
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00001000 <_vector_start>:
    1000:	20006920 	.word	0x20006920
    1004:	00017985 	.word	0x00017985
    1008:	0002e195 	.word	0x0002e195
    100c:	00017959 	.word	0x00017959
    1010:	00017959 	.word	0x00017959
    1014:	00017959 	.word	0x00017959
    1018:	00017959 	.word	0x00017959
	...
    102c:	0001715d 	.word	0x0001715d
    1030:	00017959 	.word	0x00017959
    1034:	00000000 	.word	0x00000000
    1038:	000170f1 	.word	0x000170f1
    103c:	00017959 	.word	0x00017959

00001040 <_irq_vector_table>:
    1040:	00017221 000300b9 00017221 00017221     !r......!r..!r..
    1050:	00017221 00017221 00017221 00017221     !r..!r..!r..!r..
    1060:	00030081 00017221 00017221 0003009f     ....!r..!r......
    1070:	00017221 00017221 00017221 00017221     !r..!r..!r..!r..
    1080:	00017221 00017221 00017221 00017221     !r..!r..!r..!r..
    1090:	00017221 00017221 00017221 00017221     !r..!r..!r..!r..
    10a0:	00017221 00017221 00017221 00017221     !r..!r..!r..!r..
    10b0:	00017221 00017221 00017221 00017221     !r..!r..!r..!r..
    10c0:	00017221 00017221 00017221 00017221     !r..!r..!r..!r..
    10d0:	00017221 00017221 00017221 00017221     !r..!r..!r..!r..
    10e0:	00017221 00017221 00017221 00017221     !r..!r..!r..!r..
    10f0:	00017221 00017221 00017221 00017221     !r..!r..!r..!r..

Disassembly of section text:

00001100 <memchr>:
    1100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    1104:	2a10      	cmp	r2, #16
    1106:	db2b      	blt.n	1160 <memchr+0x60>
    1108:	f010 0f07 	tst.w	r0, #7
    110c:	d008      	beq.n	1120 <memchr+0x20>
    110e:	f810 3b01 	ldrb.w	r3, [r0], #1
    1112:	3a01      	subs	r2, #1
    1114:	428b      	cmp	r3, r1
    1116:	d02d      	beq.n	1174 <memchr+0x74>
    1118:	f010 0f07 	tst.w	r0, #7
    111c:	b342      	cbz	r2, 1170 <memchr+0x70>
    111e:	d1f6      	bne.n	110e <memchr+0xe>
    1120:	b4f0      	push	{r4, r5, r6, r7}
    1122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    1126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    112a:	f022 0407 	bic.w	r4, r2, #7
    112e:	f07f 0700 	mvns.w	r7, #0
    1132:	2300      	movs	r3, #0
    1134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    1138:	3c08      	subs	r4, #8
    113a:	ea85 0501 	eor.w	r5, r5, r1
    113e:	ea86 0601 	eor.w	r6, r6, r1
    1142:	fa85 f547 	uadd8	r5, r5, r7
    1146:	faa3 f587 	sel	r5, r3, r7
    114a:	fa86 f647 	uadd8	r6, r6, r7
    114e:	faa5 f687 	sel	r6, r5, r7
    1152:	b98e      	cbnz	r6, 1178 <memchr+0x78>
    1154:	d1ee      	bne.n	1134 <memchr+0x34>
    1156:	bcf0      	pop	{r4, r5, r6, r7}
    1158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    115c:	f002 0207 	and.w	r2, r2, #7
    1160:	b132      	cbz	r2, 1170 <memchr+0x70>
    1162:	f810 3b01 	ldrb.w	r3, [r0], #1
    1166:	3a01      	subs	r2, #1
    1168:	ea83 0301 	eor.w	r3, r3, r1
    116c:	b113      	cbz	r3, 1174 <memchr+0x74>
    116e:	d1f8      	bne.n	1162 <memchr+0x62>
    1170:	2000      	movs	r0, #0
    1172:	4770      	bx	lr
    1174:	3801      	subs	r0, #1
    1176:	4770      	bx	lr
    1178:	2d00      	cmp	r5, #0
    117a:	bf06      	itte	eq
    117c:	4635      	moveq	r5, r6
    117e:	3803      	subeq	r0, #3
    1180:	3807      	subne	r0, #7
    1182:	f015 0f01 	tst.w	r5, #1
    1186:	d107      	bne.n	1198 <memchr+0x98>
    1188:	3001      	adds	r0, #1
    118a:	f415 7f80 	tst.w	r5, #256	; 0x100
    118e:	bf02      	ittt	eq
    1190:	3001      	addeq	r0, #1
    1192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    1196:	3001      	addeq	r0, #1
    1198:	bcf0      	pop	{r4, r5, r6, r7}
    119a:	3801      	subs	r0, #1
    119c:	4770      	bx	lr
    119e:	bf00      	nop

000011a0 <__aeabi_ldivmod>:
    11a0:	b97b      	cbnz	r3, 11c2 <__aeabi_ldivmod+0x22>
    11a2:	b972      	cbnz	r2, 11c2 <__aeabi_ldivmod+0x22>
    11a4:	2900      	cmp	r1, #0
    11a6:	bfbe      	ittt	lt
    11a8:	2000      	movlt	r0, #0
    11aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
    11ae:	e006      	blt.n	11be <__aeabi_ldivmod+0x1e>
    11b0:	bf08      	it	eq
    11b2:	2800      	cmpeq	r0, #0
    11b4:	bf1c      	itt	ne
    11b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
    11ba:	f04f 30ff 	movne.w	r0, #4294967295
    11be:	f000 b9b7 	b.w	1530 <__aeabi_idiv0>
    11c2:	f1ad 0c08 	sub.w	ip, sp, #8
    11c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    11ca:	2900      	cmp	r1, #0
    11cc:	db09      	blt.n	11e2 <__aeabi_ldivmod+0x42>
    11ce:	2b00      	cmp	r3, #0
    11d0:	db1a      	blt.n	1208 <__aeabi_ldivmod+0x68>
    11d2:	f000 f84d 	bl	1270 <__udivmoddi4>
    11d6:	f8dd e004 	ldr.w	lr, [sp, #4]
    11da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    11de:	b004      	add	sp, #16
    11e0:	4770      	bx	lr
    11e2:	4240      	negs	r0, r0
    11e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    11e8:	2b00      	cmp	r3, #0
    11ea:	db1b      	blt.n	1224 <__aeabi_ldivmod+0x84>
    11ec:	f000 f840 	bl	1270 <__udivmoddi4>
    11f0:	f8dd e004 	ldr.w	lr, [sp, #4]
    11f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    11f8:	b004      	add	sp, #16
    11fa:	4240      	negs	r0, r0
    11fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1200:	4252      	negs	r2, r2
    1202:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1206:	4770      	bx	lr
    1208:	4252      	negs	r2, r2
    120a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    120e:	f000 f82f 	bl	1270 <__udivmoddi4>
    1212:	f8dd e004 	ldr.w	lr, [sp, #4]
    1216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    121a:	b004      	add	sp, #16
    121c:	4240      	negs	r0, r0
    121e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    1222:	4770      	bx	lr
    1224:	4252      	negs	r2, r2
    1226:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    122a:	f000 f821 	bl	1270 <__udivmoddi4>
    122e:	f8dd e004 	ldr.w	lr, [sp, #4]
    1232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1236:	b004      	add	sp, #16
    1238:	4252      	negs	r2, r2
    123a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    123e:	4770      	bx	lr

00001240 <__aeabi_uldivmod>:
    1240:	b953      	cbnz	r3, 1258 <__aeabi_uldivmod+0x18>
    1242:	b94a      	cbnz	r2, 1258 <__aeabi_uldivmod+0x18>
    1244:	2900      	cmp	r1, #0
    1246:	bf08      	it	eq
    1248:	2800      	cmpeq	r0, #0
    124a:	bf1c      	itt	ne
    124c:	f04f 31ff 	movne.w	r1, #4294967295
    1250:	f04f 30ff 	movne.w	r0, #4294967295
    1254:	f000 b96c 	b.w	1530 <__aeabi_idiv0>
    1258:	f1ad 0c08 	sub.w	ip, sp, #8
    125c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    1260:	f000 f806 	bl	1270 <__udivmoddi4>
    1264:	f8dd e004 	ldr.w	lr, [sp, #4]
    1268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    126c:	b004      	add	sp, #16
    126e:	4770      	bx	lr

00001270 <__udivmoddi4>:
    1270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1274:	9e08      	ldr	r6, [sp, #32]
    1276:	460d      	mov	r5, r1
    1278:	4604      	mov	r4, r0
    127a:	468e      	mov	lr, r1
    127c:	2b00      	cmp	r3, #0
    127e:	f040 8082 	bne.w	1386 <__udivmoddi4+0x116>
    1282:	428a      	cmp	r2, r1
    1284:	4617      	mov	r7, r2
    1286:	d946      	bls.n	1316 <__udivmoddi4+0xa6>
    1288:	fab2 f282 	clz	r2, r2
    128c:	b14a      	cbz	r2, 12a2 <__udivmoddi4+0x32>
    128e:	f1c2 0120 	rsb	r1, r2, #32
    1292:	fa05 f302 	lsl.w	r3, r5, r2
    1296:	fa20 f101 	lsr.w	r1, r0, r1
    129a:	4097      	lsls	r7, r2
    129c:	ea41 0e03 	orr.w	lr, r1, r3
    12a0:	4094      	lsls	r4, r2
    12a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
    12a6:	0c23      	lsrs	r3, r4, #16
    12a8:	fbbe fcf8 	udiv	ip, lr, r8
    12ac:	b2b9      	uxth	r1, r7
    12ae:	fb08 ee1c 	mls	lr, r8, ip, lr
    12b2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
    12b6:	fb0c f001 	mul.w	r0, ip, r1
    12ba:	4298      	cmp	r0, r3
    12bc:	d90a      	bls.n	12d4 <__udivmoddi4+0x64>
    12be:	18fb      	adds	r3, r7, r3
    12c0:	f10c 35ff 	add.w	r5, ip, #4294967295
    12c4:	f080 8116 	bcs.w	14f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16c>
    12c8:	4298      	cmp	r0, r3
    12ca:	f240 8113 	bls.w	14f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x16c>
    12ce:	f1ac 0c02 	sub.w	ip, ip, #2
    12d2:	443b      	add	r3, r7
    12d4:	1a1b      	subs	r3, r3, r0
    12d6:	b2a4      	uxth	r4, r4
    12d8:	fbb3 f0f8 	udiv	r0, r3, r8
    12dc:	fb08 3310 	mls	r3, r8, r0, r3
    12e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    12e4:	fb00 f101 	mul.w	r1, r0, r1
    12e8:	42a1      	cmp	r1, r4
    12ea:	d909      	bls.n	1300 <__udivmoddi4+0x90>
    12ec:	193c      	adds	r4, r7, r4
    12ee:	f100 33ff 	add.w	r3, r0, #4294967295
    12f2:	f080 8101 	bcs.w	14f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x170>
    12f6:	42a1      	cmp	r1, r4
    12f8:	f240 80fe 	bls.w	14f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x170>
    12fc:	3802      	subs	r0, #2
    12fe:	443c      	add	r4, r7
    1300:	1a64      	subs	r4, r4, r1
    1302:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1306:	2100      	movs	r1, #0
    1308:	b11e      	cbz	r6, 1312 <__udivmoddi4+0xa2>
    130a:	40d4      	lsrs	r4, r2
    130c:	2300      	movs	r3, #0
    130e:	e9c6 4300 	strd	r4, r3, [r6]
    1312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1316:	b902      	cbnz	r2, 131a <__udivmoddi4+0xaa>
    1318:	deff      	udf	#255	; 0xff
    131a:	fab2 f282 	clz	r2, r2
    131e:	2a00      	cmp	r2, #0
    1320:	d14f      	bne.n	13c2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3a>
    1322:	1bcb      	subs	r3, r1, r7
    1324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1328:	fa1f f887 	uxth.w	r8, r7
    132c:	2101      	movs	r1, #1
    132e:	fbb3 fcfe 	udiv	ip, r3, lr
    1332:	0c25      	lsrs	r5, r4, #16
    1334:	fb0e 331c 	mls	r3, lr, ip, r3
    1338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    133c:	fb08 f30c 	mul.w	r3, r8, ip
    1340:	42ab      	cmp	r3, r5
    1342:	d907      	bls.n	1354 <__udivmoddi4+0xe4>
    1344:	197d      	adds	r5, r7, r5
    1346:	f10c 30ff 	add.w	r0, ip, #4294967295
    134a:	d202      	bcs.n	1352 <__udivmoddi4+0xe2>
    134c:	42ab      	cmp	r3, r5
    134e:	f200 80e7 	bhi.w	1520 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x198>
    1352:	4684      	mov	ip, r0
    1354:	1aed      	subs	r5, r5, r3
    1356:	b2a3      	uxth	r3, r4
    1358:	fbb5 f0fe 	udiv	r0, r5, lr
    135c:	fb0e 5510 	mls	r5, lr, r0, r5
    1360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1364:	fb08 f800 	mul.w	r8, r8, r0
    1368:	45a0      	cmp	r8, r4
    136a:	d907      	bls.n	137c <__udivmoddi4+0x10c>
    136c:	193c      	adds	r4, r7, r4
    136e:	f100 33ff 	add.w	r3, r0, #4294967295
    1372:	d202      	bcs.n	137a <__udivmoddi4+0x10a>
    1374:	45a0      	cmp	r8, r4
    1376:	f200 80d7 	bhi.w	1528 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a0>
    137a:	4618      	mov	r0, r3
    137c:	eba4 0408 	sub.w	r4, r4, r8
    1380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    1384:	e7c0      	b.n	1308 <__udivmoddi4+0x98>
    1386:	428b      	cmp	r3, r1
    1388:	d908      	bls.n	139c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x14>
    138a:	2e00      	cmp	r6, #0
    138c:	f000 80af 	beq.w	14ee <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x166>
    1390:	2100      	movs	r1, #0
    1392:	e9c6 0500 	strd	r0, r5, [r6]
    1396:	4608      	mov	r0, r1
    1398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    139c:	fab3 f183 	clz	r1, r3
    13a0:	2900      	cmp	r1, #0
    13a2:	d14b      	bne.n	143c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4>
    13a4:	42ab      	cmp	r3, r5
    13a6:	d302      	bcc.n	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
    13a8:	4282      	cmp	r2, r0
    13aa:	f200 80b7 	bhi.w	151c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x194>
    13ae:	1a84      	subs	r4, r0, r2
    13b0:	eb65 0303 	sbc.w	r3, r5, r3
    13b4:	2001      	movs	r0, #1
    13b6:	469e      	mov	lr, r3
    13b8:	2e00      	cmp	r6, #0
    13ba:	d0aa      	beq.n	1312 <__udivmoddi4+0xa2>
    13bc:	e9c6 4e00 	strd	r4, lr, [r6]
    13c0:	e7a7      	b.n	1312 <__udivmoddi4+0xa2>
    13c2:	f1c2 0c20 	rsb	ip, r2, #32
    13c6:	fa01 f302 	lsl.w	r3, r1, r2
    13ca:	4097      	lsls	r7, r2
    13cc:	fa20 f00c 	lsr.w	r0, r0, ip
    13d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    13d4:	fa21 fc0c 	lsr.w	ip, r1, ip
    13d8:	4318      	orrs	r0, r3
    13da:	fbbc f1fe 	udiv	r1, ip, lr
    13de:	0c05      	lsrs	r5, r0, #16
    13e0:	fb0e cc11 	mls	ip, lr, r1, ip
    13e4:	fa1f f887 	uxth.w	r8, r7
    13e8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    13ec:	fb01 f308 	mul.w	r3, r1, r8
    13f0:	42ab      	cmp	r3, r5
    13f2:	fa04 f402 	lsl.w	r4, r4, r2
    13f6:	d909      	bls.n	140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>
    13f8:	197d      	adds	r5, r7, r5
    13fa:	f101 3cff 	add.w	ip, r1, #4294967295
    13fe:	f080 808b 	bcs.w	1518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x190>
    1402:	42ab      	cmp	r3, r5
    1404:	f240 8088 	bls.w	1518 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x190>
    1408:	3902      	subs	r1, #2
    140a:	443d      	add	r5, r7
    140c:	1aeb      	subs	r3, r5, r3
    140e:	b285      	uxth	r5, r0
    1410:	fbb3 f0fe 	udiv	r0, r3, lr
    1414:	fb0e 3310 	mls	r3, lr, r0, r3
    1418:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    141c:	fb00 f308 	mul.w	r3, r0, r8
    1420:	42ab      	cmp	r3, r5
    1422:	d907      	bls.n	1434 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac>
    1424:	197d      	adds	r5, r7, r5
    1426:	f100 3cff 	add.w	ip, r0, #4294967295
    142a:	d271      	bcs.n	1510 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x188>
    142c:	42ab      	cmp	r3, r5
    142e:	d96f      	bls.n	1510 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x188>
    1430:	3802      	subs	r0, #2
    1432:	443d      	add	r5, r7
    1434:	1aeb      	subs	r3, r5, r3
    1436:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    143a:	e778      	b.n	132e <__udivmoddi4+0xbe>
    143c:	f1c1 0c20 	rsb	ip, r1, #32
    1440:	408b      	lsls	r3, r1
    1442:	fa22 f70c 	lsr.w	r7, r2, ip
    1446:	431f      	orrs	r7, r3
    1448:	fa20 f40c 	lsr.w	r4, r0, ip
    144c:	fa05 f301 	lsl.w	r3, r5, r1
    1450:	ea4f 4e17 	mov.w	lr, r7, lsr #16
    1454:	fa25 f50c 	lsr.w	r5, r5, ip
    1458:	431c      	orrs	r4, r3
    145a:	0c23      	lsrs	r3, r4, #16
    145c:	fbb5 f9fe 	udiv	r9, r5, lr
    1460:	fa1f f887 	uxth.w	r8, r7
    1464:	fb0e 5519 	mls	r5, lr, r9, r5
    1468:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
    146c:	fb09 fa08 	mul.w	sl, r9, r8
    1470:	45aa      	cmp	sl, r5
    1472:	fa02 f201 	lsl.w	r2, r2, r1
    1476:	fa00 f301 	lsl.w	r3, r0, r1
    147a:	d908      	bls.n	148e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x106>
    147c:	197d      	adds	r5, r7, r5
    147e:	f109 30ff 	add.w	r0, r9, #4294967295
    1482:	d247      	bcs.n	1514 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c>
    1484:	45aa      	cmp	sl, r5
    1486:	d945      	bls.n	1514 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18c>
    1488:	f1a9 0902 	sub.w	r9, r9, #2
    148c:	443d      	add	r5, r7
    148e:	eba5 050a 	sub.w	r5, r5, sl
    1492:	b2a4      	uxth	r4, r4
    1494:	fbb5 f0fe 	udiv	r0, r5, lr
    1498:	fb0e 5510 	mls	r5, lr, r0, r5
    149c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    14a0:	fb00 f808 	mul.w	r8, r0, r8
    14a4:	45a0      	cmp	r8, r4
    14a6:	d907      	bls.n	14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>
    14a8:	193c      	adds	r4, r7, r4
    14aa:	f100 35ff 	add.w	r5, r0, #4294967295
    14ae:	d22d      	bcs.n	150c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x184>
    14b0:	45a0      	cmp	r8, r4
    14b2:	d92b      	bls.n	150c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x184>
    14b4:	3802      	subs	r0, #2
    14b6:	443c      	add	r4, r7
    14b8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    14bc:	eba4 0408 	sub.w	r4, r4, r8
    14c0:	fba0 8902 	umull	r8, r9, r0, r2
    14c4:	454c      	cmp	r4, r9
    14c6:	46c6      	mov	lr, r8
    14c8:	464d      	mov	r5, r9
    14ca:	d319      	bcc.n	1500 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x178>
    14cc:	d016      	beq.n	14fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x174>
    14ce:	b15e      	cbz	r6, 14e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x160>
    14d0:	ebb3 020e 	subs.w	r2, r3, lr
    14d4:	eb64 0405 	sbc.w	r4, r4, r5
    14d8:	fa04 fc0c 	lsl.w	ip, r4, ip
    14dc:	40ca      	lsrs	r2, r1
    14de:	ea4c 0202 	orr.w	r2, ip, r2
    14e2:	40cc      	lsrs	r4, r1
    14e4:	e9c6 2400 	strd	r2, r4, [r6]
    14e8:	2100      	movs	r1, #0
    14ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    14ee:	4631      	mov	r1, r6
    14f0:	4630      	mov	r0, r6
    14f2:	e70e      	b.n	1312 <__udivmoddi4+0xa2>
    14f4:	46ac      	mov	ip, r5
    14f6:	e6ed      	b.n	12d4 <__udivmoddi4+0x64>
    14f8:	4618      	mov	r0, r3
    14fa:	e701      	b.n	1300 <__udivmoddi4+0x90>
    14fc:	4543      	cmp	r3, r8
    14fe:	d2e6      	bcs.n	14ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x146>
    1500:	ebb8 0e02 	subs.w	lr, r8, r2
    1504:	eb69 0507 	sbc.w	r5, r9, r7
    1508:	3801      	subs	r0, #1
    150a:	e7e0      	b.n	14ce <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x146>
    150c:	4628      	mov	r0, r5
    150e:	e7d3      	b.n	14b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x130>
    1510:	4660      	mov	r0, ip
    1512:	e78f      	b.n	1434 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xac>
    1514:	4681      	mov	r9, r0
    1516:	e7ba      	b.n	148e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x106>
    1518:	4661      	mov	r1, ip
    151a:	e777      	b.n	140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>
    151c:	4608      	mov	r0, r1
    151e:	e74b      	b.n	13b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x30>
    1520:	f1ac 0c02 	sub.w	ip, ip, #2
    1524:	443d      	add	r5, r7
    1526:	e715      	b.n	1354 <__udivmoddi4+0xe4>
    1528:	3802      	subs	r0, #2
    152a:	443c      	add	r4, r7
    152c:	e726      	b.n	137c <__udivmoddi4+0x10c>
    152e:	bf00      	nop

00001530 <__aeabi_idiv0>:
    1530:	4770      	bx	lr
    1532:	bf00      	nop

00001534 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
    1534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    1536:	4615      	mov	r5, r2
    1538:	4a0a      	ldr	r2, [pc, #40]	; (1564 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
    153a:	461c      	mov	r4, r3
    153c:	6856      	ldr	r6, [r2, #4]
    153e:	b12e      	cbz	r6, 154c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
    1540:	b001      	add	sp, #4
    1542:	462a      	mov	r2, r5
    1544:	46b4      	mov	ip, r6
    1546:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    154a:	4760      	bx	ip
    154c:	2000      	movs	r0, #0
    154e:	f88d 0000 	strb.w	r0, [sp]
    1552:	4668      	mov	r0, sp
    1554:	f00b ff36 	bl	d3c4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
    1558:	f89d 0000 	ldrb.w	r0, [sp]
    155c:	1a28      	subs	r0, r5, r0
    155e:	7020      	strb	r0, [r4, #0]
    1560:	2000      	movs	r0, #0
    1562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1564:	20000000 	.word	0x20000000

00001568 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
    1568:	4801      	ldr	r0, [pc, #4]	; (1570 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
    156a:	7800      	ldrb	r0, [r0, #0]
    156c:	4770      	bx	lr
    156e:	0000      	.short	0x0000
    1570:	20000008 	.word	0x20000008

00001574 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
    1574:	4905      	ldr	r1, [pc, #20]	; (158c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
    1576:	780a      	ldrb	r2, [r1, #0]
    1578:	4290      	cmp	r0, r2
    157a:	d301      	bcc.n	1580 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
    157c:	2000      	movs	r0, #0
    157e:	4770      	bx	lr
    1580:	6849      	ldr	r1, [r1, #4]
    1582:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
    1586:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    158a:	4770      	bx	lr
    158c:	20000008 	.word	0x20000008
    1590:	b570      	push	{r4, r5, r6, lr}
    1592:	4605      	mov	r5, r0
    1594:	2a20      	cmp	r2, #32
    1596:	d027      	beq.n	15e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
    1598:	4819      	ldr	r0, [pc, #100]	; (1600 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x8c>)
    159a:	4c1a      	ldr	r4, [pc, #104]	; (1604 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x90>)
    159c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
    15a0:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
    15a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    15a8:	2920      	cmp	r1, #32
    15aa:	d022      	beq.n	15f2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7e>
    15ac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
    15b0:	7840      	ldrb	r0, [r0, #1]
    15b2:	784c      	ldrb	r4, [r1, #1]
    15b4:	7048      	strb	r0, [r1, #1]
    15b6:	4620      	mov	r0, r4
    15b8:	4601      	mov	r1, r0
    15ba:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
    15be:	4291      	cmp	r1, r2
    15c0:	7005      	strb	r5, [r0, #0]
    15c2:	7840      	ldrb	r0, [r0, #1]
    15c4:	d1f8      	bne.n	15b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
    15c6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
    15ca:	2a20      	cmp	r2, #32
    15cc:	bf1a      	itte	ne
    15ce:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
    15d2:	7054      	strbne	r4, [r2, #1]
    15d4:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
    15d8:	2220      	movs	r2, #32
    15da:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
    15de:	f88c 2001 	strb.w	r2, [ip, #1]
    15e2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
    15e6:	bd70      	pop	{r4, r5, r6, pc}
    15e8:	f240 217e 	movw	r1, #638	; 0x27e
    15ec:	2070      	movs	r0, #112	; 0x70
    15ee:	f003 f987 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    15f2:	f893 4020 	ldrb.w	r4, [r3, #32]
    15f6:	7840      	ldrb	r0, [r0, #1]
    15f8:	f883 0020 	strb.w	r0, [r3, #32]
    15fc:	e7db      	b.n	15b6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
    15fe:	0000      	.short	0x0000
    1600:	20000f34 	.word	0x20000f34
    1604:	20000fb4 	.word	0x20000fb4
    1608:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    160c:	b085      	sub	sp, #20
    160e:	4615      	mov	r5, r2
    1610:	460c      	mov	r4, r1
    1612:	f002 f915 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1616:	4428      	add	r0, r5
    1618:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    161c:	9002      	str	r0, [sp, #8]
    161e:	6821      	ldr	r1, [r4, #0]
    1620:	1a08      	subs	r0, r1, r0
    1622:	0200      	lsls	r0, r0, #8
    1624:	17c1      	asrs	r1, r0, #31
    1626:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    162a:	1200      	asrs	r0, r0, #8
    162c:	2800      	cmp	r0, #0
    162e:	f300 80d5 	bgt.w	17dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x268>
    1632:	48ac      	ldr	r0, [pc, #688]	; (18e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x370>)
    1634:	9f08      	ldr	r7, [sp, #32]
    1636:	4eac      	ldr	r6, [pc, #688]	; (18e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x374>)
    1638:	eb00 0087 	add.w	r0, r0, r7, lsl #2
    163c:	9003      	str	r0, [sp, #12]
    163e:	f890 5020 	ldrb.w	r5, [r0, #32]
    1642:	2020      	movs	r0, #32
    1644:	46e9      	mov	r9, sp
    1646:	f10d 0804 	add.w	r8, sp, #4
    164a:	f88d 0000 	strb.w	r0, [sp]
    164e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
    1652:	2d20      	cmp	r5, #32
    1654:	bf18      	it	ne
    1656:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
    165a:	d025      	beq.n	16a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    165c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1660:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1664:	6822      	ldr	r2, [r4, #0]
    1666:	68c1      	ldr	r1, [r0, #12]
    1668:	1a51      	subs	r1, r2, r1
    166a:	0209      	lsls	r1, r1, #8
    166c:	17ca      	asrs	r2, r1, #31
    166e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1672:	3008      	adds	r0, #8
    1674:	1209      	asrs	r1, r1, #8
    1676:	d417      	bmi.n	16a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    1678:	8961      	ldrh	r1, [r4, #10]
    167a:	b171      	cbz	r1, 169a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    167c:	8941      	ldrh	r1, [r0, #10]
    167e:	b961      	cbnz	r1, 169a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x126>
    1680:	f000 fdb4 	bl	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    1684:	f002 f8dc 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1688:	6821      	ldr	r1, [r4, #0]
    168a:	1a08      	subs	r0, r1, r0
    168c:	0200      	lsls	r0, r0, #8
    168e:	17c1      	asrs	r1, r0, #31
    1690:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1694:	1200      	asrs	r0, r0, #8
    1696:	2833      	cmp	r0, #51	; 0x33
    1698:	db06      	blt.n	16a8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x134>
    169a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    169e:	f889 5000 	strb.w	r5, [r9]
    16a2:	7845      	ldrb	r5, [r0, #1]
    16a4:	2d20      	cmp	r5, #32
    16a6:	d1d9      	bne.n	165c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xe8>
    16a8:	f899 0000 	ldrb.w	r0, [r9]
    16ac:	f888 0000 	strb.w	r0, [r8]
    16b0:	46a1      	mov	r9, r4
    16b2:	2d20      	cmp	r5, #32
    16b4:	bf1c      	itt	ne
    16b6:	488d      	ldrne	r0, [pc, #564]	; (18ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    16b8:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
    16bc:	f000 810e 	beq.w	18dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16c0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    16c4:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
    16c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
    16cc:	f8da 1008 	ldr.w	r1, [sl, #8]
    16d0:	4648      	mov	r0, r9
    16d2:	1a89      	subs	r1, r1, r2
    16d4:	0209      	lsls	r1, r1, #8
    16d6:	17ca      	asrs	r2, r1, #31
    16d8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    16dc:	f10a 0708 	add.w	r7, sl, #8
    16e0:	1209      	asrs	r1, r1, #8
    16e2:	d415      	bmi.n	1710 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x19c>
    16e4:	8979      	ldrh	r1, [r7, #10]
    16e6:	2900      	cmp	r1, #0
    16e8:	f000 80f8 	beq.w	18dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16ec:	8941      	ldrh	r1, [r0, #10]
    16ee:	2900      	cmp	r1, #0
    16f0:	f040 80f4 	bne.w	18dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    16f4:	f000 fd7a 	bl	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    16f8:	f002 f8a2 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    16fc:	6839      	ldr	r1, [r7, #0]
    16fe:	1a08      	subs	r0, r1, r0
    1700:	0200      	lsls	r0, r0, #8
    1702:	17c1      	asrs	r1, r0, #31
    1704:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1708:	1200      	asrs	r0, r0, #8
    170a:	2833      	cmp	r0, #51	; 0x33
    170c:	f280 80e6 	bge.w	18dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    1710:	f888 5000 	strb.w	r5, [r8]
    1714:	f89a 1014 	ldrb.w	r1, [sl, #20]
    1718:	f899 000c 	ldrb.w	r0, [r9, #12]
    171c:	4281      	cmp	r1, r0
    171e:	d906      	bls.n	172e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    1720:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1724:	7845      	ldrb	r5, [r0, #1]
    1726:	2d20      	cmp	r5, #32
    1728:	d1ca      	bne.n	16c0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x14c>
    172a:	f000 b8d7 	b.w	18dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    172e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1732:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1736:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
    173a:	8a68      	ldrh	r0, [r5, #18]
    173c:	68ef      	ldr	r7, [r5, #12]
    173e:	2800      	cmp	r0, #0
    1740:	d143      	bne.n	17ca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    1742:	8960      	ldrh	r0, [r4, #10]
    1744:	b3e8      	cbz	r0, 17c2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x24e>
    1746:	68a8      	ldr	r0, [r5, #8]
    1748:	f00b fe5c 	bl	d404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    174c:	8a69      	ldrh	r1, [r5, #18]
    174e:	7c2a      	ldrb	r2, [r5, #16]
    1750:	4b67      	ldr	r3, [pc, #412]	; (18f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x37c>)
    1752:	4411      	add	r1, r2
    1754:	1c49      	adds	r1, r1, #1
    1756:	1842      	adds	r2, r0, r1
    1758:	4298      	cmp	r0, r3
    175a:	d904      	bls.n	1766 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1f2>
    175c:	f240 6109 	movw	r1, #1545	; 0x609
    1760:	2070      	movs	r0, #112	; 0x70
    1762:	f003 f8cd 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1766:	4863      	ldr	r0, [pc, #396]	; (18f4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x380>)
    1768:	4281      	cmp	r1, r0
    176a:	dd04      	ble.n	1776 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x202>
    176c:	f240 610a 	movw	r1, #1546	; 0x60a
    1770:	2070      	movs	r0, #112	; 0x70
    1772:	f003 f8c5 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1776:	4860      	ldr	r0, [pc, #384]	; (18f8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x384>)
    1778:	4281      	cmp	r1, r0
    177a:	da04      	bge.n	1786 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x212>
    177c:	f240 610b 	movw	r1, #1547	; 0x60b
    1780:	2070      	movs	r0, #112	; 0x70
    1782:	f003 f8bd 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1786:	485d      	ldr	r0, [pc, #372]	; (18fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x388>)
    1788:	4290      	cmp	r0, r2
    178a:	bfdc      	itt	le
    178c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1790:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1794:	dd05      	ble.n	17a2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x22e>
    1796:	2a00      	cmp	r2, #0
    1798:	bfbc      	itt	lt
    179a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    179e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    17a2:	4610      	mov	r0, r2
    17a4:	f002 f84c 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    17a8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    17ac:	1a78      	subs	r0, r7, r1
    17ae:	0200      	lsls	r0, r0, #8
    17b0:	17c2      	asrs	r2, r0, #31
    17b2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    17b6:	1200      	asrs	r0, r0, #8
    17b8:	2833      	cmp	r0, #51	; 0x33
    17ba:	bfb8      	it	lt
    17bc:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
    17c0:	e000      	b.n	17c4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x250>
    17c2:	e002      	b.n	17ca <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x256>
    17c4:	bfb8      	it	lt
    17c6:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
    17ca:	9802      	ldr	r0, [sp, #8]
    17cc:	1a38      	subs	r0, r7, r0
    17ce:	0200      	lsls	r0, r0, #8
    17d0:	17c1      	asrs	r1, r0, #31
    17d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    17d6:	1200      	asrs	r0, r0, #8
    17d8:	2800      	cmp	r0, #0
    17da:	dd03      	ble.n	17e4 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x270>
    17dc:	b009      	add	sp, #36	; 0x24
    17de:	2000      	movs	r0, #0
    17e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    17e4:	e9d4 1000 	ldrd	r1, r0, [r4]
    17e8:	1a40      	subs	r0, r0, r1
    17ea:	4438      	add	r0, r7
    17ec:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
    17f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    17f4:	e9c4 1000 	strd	r1, r0, [r4]
    17f8:	9803      	ldr	r0, [sp, #12]
    17fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
    17fe:	466f      	mov	r7, sp
    1800:	f890 5020 	ldrb.w	r5, [r0, #32]
    1804:	2020      	movs	r0, #32
    1806:	f10d 0a04 	add.w	sl, sp, #4
    180a:	f88d 0000 	strb.w	r0, [sp]
    180e:	2d20      	cmp	r5, #32
    1810:	bf1c      	itt	ne
    1812:	4836      	ldrne	r0, [pc, #216]	; (18ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1814:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
    1818:	d025      	beq.n	1866 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    181a:	bf00      	nop
    181c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1820:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
    1824:	6822      	ldr	r2, [r4, #0]
    1826:	68c1      	ldr	r1, [r0, #12]
    1828:	1a51      	subs	r1, r2, r1
    182a:	0209      	lsls	r1, r1, #8
    182c:	17ca      	asrs	r2, r1, #31
    182e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1832:	3008      	adds	r0, #8
    1834:	1209      	asrs	r1, r1, #8
    1836:	d416      	bmi.n	1866 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    1838:	8961      	ldrh	r1, [r4, #10]
    183a:	b171      	cbz	r1, 185a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    183c:	8941      	ldrh	r1, [r0, #10]
    183e:	b961      	cbnz	r1, 185a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2e6>
    1840:	f000 fcd4 	bl	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    1844:	f001 fffc 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1848:	6821      	ldr	r1, [r4, #0]
    184a:	1a08      	subs	r0, r1, r0
    184c:	0200      	lsls	r0, r0, #8
    184e:	17c1      	asrs	r1, r0, #31
    1850:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1854:	1200      	asrs	r0, r0, #8
    1856:	2833      	cmp	r0, #51	; 0x33
    1858:	db05      	blt.n	1866 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2f2>
    185a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
    185e:	703d      	strb	r5, [r7, #0]
    1860:	7845      	ldrb	r5, [r0, #1]
    1862:	2d20      	cmp	r5, #32
    1864:	d1da      	bne.n	181c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x2a8>
    1866:	7838      	ldrb	r0, [r7, #0]
    1868:	f88a 0000 	strb.w	r0, [sl]
    186c:	4627      	mov	r7, r4
    186e:	2d20      	cmp	r5, #32
    1870:	bf1c      	itt	ne
    1872:	481e      	ldrne	r0, [pc, #120]	; (18ec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x378>)
    1874:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
    1878:	d030      	beq.n	18dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    187a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    187e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
    1882:	6879      	ldr	r1, [r7, #4]
    1884:	f8d9 2008 	ldr.w	r2, [r9, #8]
    1888:	4638      	mov	r0, r7
    188a:	1a51      	subs	r1, r2, r1
    188c:	0209      	lsls	r1, r1, #8
    188e:	17ca      	asrs	r2, r1, #31
    1890:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1894:	f109 0808 	add.w	r8, r9, #8
    1898:	1209      	asrs	r1, r1, #8
    189a:	d412      	bmi.n	18c2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x34e>
    189c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
    18a0:	b1e1      	cbz	r1, 18dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    18a2:	8941      	ldrh	r1, [r0, #10]
    18a4:	b9d1      	cbnz	r1, 18dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    18a6:	f000 fca1 	bl	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    18aa:	f001 ffc9 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    18ae:	f8d8 1000 	ldr.w	r1, [r8]
    18b2:	1a08      	subs	r0, r1, r0
    18b4:	0200      	lsls	r0, r0, #8
    18b6:	17c1      	asrs	r1, r0, #31
    18b8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    18bc:	1200      	asrs	r0, r0, #8
    18be:	2833      	cmp	r0, #51	; 0x33
    18c0:	da0c      	bge.n	18dc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x368>
    18c2:	f88a 5000 	strb.w	r5, [sl]
    18c6:	f899 0014 	ldrb.w	r0, [r9, #20]
    18ca:	7b39      	ldrb	r1, [r7, #12]
    18cc:	4288      	cmp	r0, r1
    18ce:	f67f af2e 	bls.w	172e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1ba>
    18d2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    18d6:	7845      	ldrb	r5, [r0, #1]
    18d8:	2d20      	cmp	r5, #32
    18da:	d1ce      	bne.n	187a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x306>
    18dc:	b009      	add	sp, #36	; 0x24
    18de:	2001      	movs	r0, #1
    18e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    18e4:	20000fb4 	.word	0x20000fb4
    18e8:	20000c34 	.word	0x20000c34
    18ec:	20000f34 	.word	0x20000f34
    18f0:	1e847fff 	.word	0x1e847fff
    18f4:	07a12000 	.word	0x07a12000
    18f8:	f85ee000 	.word	0xf85ee000
    18fc:	1e848000 	.word	0x1e848000
    1900:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1904:	4604      	mov	r4, r0
    1906:	483c      	ldr	r0, [pc, #240]	; (19f8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x484>)
    1908:	460e      	mov	r6, r1
    190a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
    190e:	4f3b      	ldr	r7, [pc, #236]	; (19fc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x488>)
    1910:	f890 5020 	ldrb.w	r5, [r0, #32]
    1914:	2020      	movs	r0, #32
    1916:	4698      	mov	r8, r3
    1918:	4692      	mov	sl, r2
    191a:	7010      	strb	r0, [r2, #0]
    191c:	f507 7940 	add.w	r9, r7, #768	; 0x300
    1920:	2d20      	cmp	r5, #32
    1922:	bf18      	it	ne
    1924:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
    1928:	d028      	beq.n	197c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    192a:	bf00      	nop
    192c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1930:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
    1934:	f100 0108 	add.w	r1, r0, #8
    1938:	68c0      	ldr	r0, [r0, #12]
    193a:	6822      	ldr	r2, [r4, #0]
    193c:	1a10      	subs	r0, r2, r0
    193e:	0200      	lsls	r0, r0, #8
    1940:	17c2      	asrs	r2, r0, #31
    1942:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1946:	1200      	asrs	r0, r0, #8
    1948:	d418      	bmi.n	197c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    194a:	8960      	ldrh	r0, [r4, #10]
    194c:	b178      	cbz	r0, 196e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    194e:	8948      	ldrh	r0, [r1, #10]
    1950:	b968      	cbnz	r0, 196e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3fa>
    1952:	4608      	mov	r0, r1
    1954:	f000 fc4a 	bl	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    1958:	f001 ff72 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    195c:	6821      	ldr	r1, [r4, #0]
    195e:	1a08      	subs	r0, r1, r0
    1960:	0200      	lsls	r0, r0, #8
    1962:	17c1      	asrs	r1, r0, #31
    1964:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1968:	1200      	asrs	r0, r0, #8
    196a:	2833      	cmp	r0, #51	; 0x33
    196c:	db06      	blt.n	197c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x408>
    196e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1972:	f88a 5000 	strb.w	r5, [sl]
    1976:	7845      	ldrb	r5, [r0, #1]
    1978:	2d20      	cmp	r5, #32
    197a:	d1d7      	bne.n	192c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x3b8>
    197c:	f89a 0000 	ldrb.w	r0, [sl]
    1980:	f888 0000 	strb.w	r0, [r8]
    1984:	2d20      	cmp	r5, #32
    1986:	bf18      	it	ne
    1988:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
    198c:	d030      	beq.n	19f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    198e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    1992:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
    1996:	6861      	ldr	r1, [r4, #4]
    1998:	f8d9 2008 	ldr.w	r2, [r9, #8]
    199c:	4620      	mov	r0, r4
    199e:	1a51      	subs	r1, r2, r1
    19a0:	0209      	lsls	r1, r1, #8
    19a2:	17ca      	asrs	r2, r1, #31
    19a4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    19a8:	f109 0608 	add.w	r6, r9, #8
    19ac:	1209      	asrs	r1, r1, #8
    19ae:	d410      	bmi.n	19d2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x45e>
    19b0:	8971      	ldrh	r1, [r6, #10]
    19b2:	b1e9      	cbz	r1, 19f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    19b4:	8941      	ldrh	r1, [r0, #10]
    19b6:	b9d9      	cbnz	r1, 19f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    19b8:	f000 fc18 	bl	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    19bc:	f001 ff40 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    19c0:	6831      	ldr	r1, [r6, #0]
    19c2:	1a08      	subs	r0, r1, r0
    19c4:	0200      	lsls	r0, r0, #8
    19c6:	17c1      	asrs	r1, r0, #31
    19c8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    19cc:	1200      	asrs	r0, r0, #8
    19ce:	2833      	cmp	r0, #51	; 0x33
    19d0:	da0e      	bge.n	19f0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x47c>
    19d2:	f888 5000 	strb.w	r5, [r8]
    19d6:	f899 0014 	ldrb.w	r0, [r9, #20]
    19da:	7b21      	ldrb	r1, [r4, #12]
    19dc:	4288      	cmp	r0, r1
    19de:	d802      	bhi.n	19e6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x472>
    19e0:	2000      	movs	r0, #0
    19e2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19e6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
    19ea:	7845      	ldrb	r5, [r0, #1]
    19ec:	2d20      	cmp	r5, #32
    19ee:	d1ce      	bne.n	198e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x41a>
    19f0:	2001      	movs	r0, #1
    19f2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    19f6:	0000      	.short	0x0000
    19f8:	20000fb4 	.word	0x20000fb4
    19fc:	20000c34 	.word	0x20000c34
    1a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a04:	b098      	sub	sp, #96	; 0x60
    1a06:	4616      	mov	r6, r2
    1a08:	460d      	mov	r5, r1
    1a0a:	f04f 0800 	mov.w	r8, #0
    1a0e:	f04f 0b01 	mov.w	fp, #1
    1a12:	f002 f997 	bl	3d44 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
    1a16:	4604      	mov	r4, r0
    1a18:	2d01      	cmp	r5, #1
    1a1a:	bf18      	it	ne
    1a1c:	2d02      	cmpne	r5, #2
    1a1e:	d005      	beq.n	1a2c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x4b8>
    1a20:	f640 1194 	movw	r1, #2452	; 0x994
    1a24:	f04f 0070 	mov.w	r0, #112	; 0x70
    1a28:	f002 ff6a 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a2c:	49f9      	ldr	r1, [pc, #996]	; (1e14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc8>)
    1a2e:	2001      	movs	r0, #1
    1a30:	6008      	str	r0, [r1, #0]
    1a32:	49f9      	ldr	r1, [pc, #996]	; (1e18 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xcc>)
    1a34:	6889      	ldr	r1, [r1, #8]
    1a36:	6008      	str	r0, [r1, #0]
    1a38:	2000      	movs	r0, #0
    1a3a:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
    1a3e:	900c      	str	r0, [sp, #48]	; 0x30
    1a40:	1e40      	subs	r0, r0, #1
    1a42:	900e      	str	r0, [sp, #56]	; 0x38
    1a44:	49f5      	ldr	r1, [pc, #980]	; (1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>)
    1a46:	eb06 0046 	add.w	r0, r6, r6, lsl #1
    1a4a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    1a4e:	3308      	adds	r3, #8
    1a50:	af0f      	add	r7, sp, #60	; 0x3c
    1a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    1a54:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
    1a58:	a80f      	add	r0, sp, #60	; 0x3c
    1a5a:	f000 fbc7 	bl	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    1a5e:	900d      	str	r0, [sp, #52]	; 0x34
    1a60:	48ee      	ldr	r0, [pc, #952]	; (1e1c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd0>)
    1a62:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
    1a66:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
    1a6a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
    1a6e:	f1b9 0f00 	cmp.w	r9, #0
    1a72:	bf14      	ite	ne
    1a74:	f04f 0a01 	movne.w	sl, #1
    1a78:	f04f 0a00 	moveq.w	sl, #0
    1a7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1a7e:	9014      	str	r0, [sp, #80]	; 0x50
    1a80:	f1ba 0f00 	cmp.w	sl, #0
    1a84:	d009      	beq.n	1a9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    1a86:	48e6      	ldr	r0, [pc, #920]	; (1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>)
    1a88:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    1a8c:	b928      	cbnz	r0, 1a9a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x526>
    1a8e:	f002 febf 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1a92:	2800      	cmp	r0, #0
    1a94:	bf08      	it	eq
    1a96:	2701      	moveq	r7, #1
    1a98:	d000      	beq.n	1a9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x528>
    1a9a:	2700      	movs	r7, #0
    1a9c:	48e1      	ldr	r0, [pc, #900]	; (1e24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>)
    1a9e:	2200      	movs	r2, #0
    1aa0:	9215      	str	r2, [sp, #84]	; 0x54
    1aa2:	7800      	ldrb	r0, [r0, #0]
    1aa4:	4616      	mov	r6, r2
    1aa6:	2801      	cmp	r0, #1
    1aa8:	bf18      	it	ne
    1aaa:	2803      	cmpne	r0, #3
    1aac:	d140      	bne.n	1b30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    1aae:	48dd      	ldr	r0, [pc, #884]	; (1e24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>)
    1ab0:	f8b0 8002 	ldrh.w	r8, [r0, #2]
    1ab4:	eba8 0009 	sub.w	r0, r8, r9
    1ab8:	9015      	str	r0, [sp, #84]	; 0x54
    1aba:	45c8      	cmp	r8, r9
    1abc:	d938      	bls.n	1b30 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5bc>
    1abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    1ac0:	ea6f 0108 	mvn.w	r1, r8
    1ac4:	f8df e360 	ldr.w	lr, [pc, #864]	; 1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>
    1ac8:	1858      	adds	r0, r3, r1
    1aca:	f10d 0c0c 	add.w	ip, sp, #12
    1ace:	aa17      	add	r2, sp, #92	; 0x5c
    1ad0:	4573      	cmp	r3, lr
    1ad2:	d904      	bls.n	1ade <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x56a>
    1ad4:	f240 6109 	movw	r1, #1545	; 0x609
    1ad8:	2070      	movs	r0, #112	; 0x70
    1ada:	f002 ff11 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ade:	4bd3      	ldr	r3, [pc, #844]	; (1e2c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe0>)
    1ae0:	4299      	cmp	r1, r3
    1ae2:	dd04      	ble.n	1aee <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x57a>
    1ae4:	f240 610a 	movw	r1, #1546	; 0x60a
    1ae8:	2070      	movs	r0, #112	; 0x70
    1aea:	f002 ff09 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1aee:	4bd0      	ldr	r3, [pc, #832]	; (1e30 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe4>)
    1af0:	4299      	cmp	r1, r3
    1af2:	da04      	bge.n	1afe <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x58a>
    1af4:	f240 610b 	movw	r1, #1547	; 0x60b
    1af8:	2070      	movs	r0, #112	; 0x70
    1afa:	f002 ff01 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1afe:	49cd      	ldr	r1, [pc, #820]	; (1e34 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xe8>)
    1b00:	4281      	cmp	r1, r0
    1b02:	bfdc      	itt	le
    1b04:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1b08:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1b0c:	dd05      	ble.n	1b1a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5a6>
    1b0e:	2800      	cmp	r0, #0
    1b10:	bfbc      	itt	lt
    1b12:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1b16:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1b1a:	4661      	mov	r1, ip
    1b1c:	f001 feac 	bl	3878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1b20:	9803      	ldr	r0, [sp, #12]
    1b22:	990f      	ldr	r1, [sp, #60]	; 0x3c
    1b24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1b28:	9003      	str	r0, [sp, #12]
    1b2a:	1a08      	subs	r0, r1, r0
    1b2c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1b30:	2f00      	cmp	r7, #0
    1b32:	bf18      	it	ne
    1b34:	2632      	movne	r6, #50	; 0x32
    1b36:	d104      	bne.n	1b42 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ce>
    1b38:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1b3c:	2800      	cmp	r0, #0
    1b3e:	bf18      	it	ne
    1b40:	2602      	movne	r6, #2
    1b42:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1b46:	d008      	beq.n	1b5a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5e6>
    1b48:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1b4a:	1b00      	subs	r0, r0, r4
    1b4c:	0200      	lsls	r0, r0, #8
    1b4e:	17c1      	asrs	r1, r0, #31
    1b50:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1b54:	1200      	asrs	r0, r0, #8
    1b56:	2801      	cmp	r0, #1
    1b58:	da02      	bge.n	1b60 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x5ec>
    1b5a:	2004      	movs	r0, #4
    1b5c:	9918      	ldr	r1, [sp, #96]	; 0x60
    1b5e:	e00b      	b.n	1b78 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x604>
    1b60:	b147      	cbz	r7, 1b74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    1b62:	48af      	ldr	r0, [pc, #700]	; (1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>)
    1b64:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1b68:	b120      	cbz	r0, 1b74 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x600>
    1b6a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1b6e:	1c06      	adds	r6, r0, #0
    1b70:	bf18      	it	ne
    1b72:	2602      	movne	r6, #2
    1b74:	4621      	mov	r1, r4
    1b76:	2001      	movs	r0, #1
    1b78:	f1b9 0f00 	cmp.w	r9, #0
    1b7c:	d002      	beq.n	1b84 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x610>
    1b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
    1b80:	2b1e      	cmp	r3, #30
    1b82:	da02      	bge.n	1b8a <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x616>
    1b84:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
    1b88:	b113      	cbz	r3, 1b90 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x61c>
    1b8a:	f04f 0b00 	mov.w	fp, #0
    1b8e:	1e40      	subs	r0, r0, #1
    1b90:	1983      	adds	r3, r0, r6
    1b92:	48a4      	ldr	r0, [pc, #656]	; (1e24 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd8>)
    1b94:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
    1b98:	7800      	ldrb	r0, [r0, #0]
    1b9a:	9015      	str	r0, [sp, #84]	; 0x54
    1b9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1b9e:	1a80      	subs	r0, r0, r2
    1ba0:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
    1ba4:	ebac 0001 	sub.w	r0, ip, r1
    1ba8:	0200      	lsls	r0, r0, #8
    1baa:	17c6      	asrs	r6, r0, #31
    1bac:	eb00 6016 	add.w	r0, r0, r6, lsr #24
    1bb0:	1200      	asrs	r0, r0, #8
    1bb2:	4298      	cmp	r0, r3
    1bb4:	db18      	blt.n	1be8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x674>
    1bb6:	2a00      	cmp	r2, #0
    1bb8:	bf18      	it	ne
    1bba:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
    1bbe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    1bc0:	9705      	str	r7, [sp, #20]
    1bc2:	2700      	movs	r7, #0
    1bc4:	f001 ffb6 	bl	3b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1bc8:	1a30      	subs	r0, r6, r0
    1bca:	0200      	lsls	r0, r0, #8
    1bcc:	17c1      	asrs	r1, r0, #31
    1bce:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1bd2:	1200      	asrs	r0, r0, #8
    1bd4:	283e      	cmp	r0, #62	; 0x3e
    1bd6:	da3f      	bge.n	1c58 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6e4>
    1bd8:	2d01      	cmp	r5, #1
    1bda:	d020      	beq.n	1c1e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6aa>
    1bdc:	1e70      	subs	r0, r6, #1
    1bde:	9905      	ldr	r1, [sp, #20]
    1be0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1be4:	b319      	cbz	r1, 1c2e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6ba>
    1be6:	e02d      	b.n	1c44 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    1be8:	b182      	cbz	r2, 1c0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    1bea:	f1be 0f00 	cmp.w	lr, #0
    1bee:	bf04      	itt	eq
    1bf0:	9815      	ldreq	r0, [sp, #84]	; 0x54
    1bf2:	2803      	cmpeq	r0, #3
    1bf4:	d00a      	beq.n	1c0c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x698>
    1bf6:	b927      	cbnz	r7, 1c02 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x68e>
    1bf8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1bfc:	2800      	cmp	r0, #0
    1bfe:	bf18      	it	ne
    1c00:	1e9b      	subne	r3, r3, #2
    1c02:	2200      	movs	r2, #0
    1c04:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
    1c08:	4690      	mov	r8, r2
    1c0a:	e7c7      	b.n	1b9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    1c0c:	bb07      	cbnz	r7, 1c50 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1c0e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
    1c12:	b1e8      	cbz	r0, 1c50 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1c14:	2000      	movs	r0, #0
    1c16:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    1c1a:	1e9b      	subs	r3, r3, #2
    1c1c:	e7be      	b.n	1b9c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x628>
    1c1e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1c22:	d120      	bne.n	1c66 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    1c24:	f640 110d 	movw	r1, #2317	; 0x90d
    1c28:	2070      	movs	r0, #112	; 0x70
    1c2a:	f002 fe69 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1c2e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1c32:	d007      	beq.n	1c44 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d0>
    1c34:	1a21      	subs	r1, r4, r0
    1c36:	0209      	lsls	r1, r1, #8
    1c38:	17ca      	asrs	r2, r1, #31
    1c3a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1c3e:	1209      	asrs	r1, r1, #8
    1c40:	2904      	cmp	r1, #4
    1c42:	dd03      	ble.n	1c4c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6d8>
    1c44:	4604      	mov	r4, r0
    1c46:	f001 ff7b 	bl	3b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1c4a:	e00c      	b.n	1c66 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    1c4c:	2900      	cmp	r1, #0
    1c4e:	dd0a      	ble.n	1c66 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6f2>
    1c50:	b01b      	add	sp, #108	; 0x6c
    1c52:	2000      	movs	r0, #0
    1c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1c58:	1e70      	subs	r0, r6, #1
    1c5a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
    1c5e:	4620      	mov	r0, r4
    1c60:	f001 ff6e 	bl	3b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    1c64:	4657      	mov	r7, sl
    1c66:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
    1c6a:	d024      	beq.n	1cb6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x742>
    1c6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
    1c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1c70:	1b00      	subs	r0, r0, r4
    1c72:	1b1b      	subs	r3, r3, r4
    1c74:	4a70      	ldr	r2, [pc, #448]	; (1e38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xec>)
    1c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1c7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1c7e:	4583      	cmp	fp, r0
    1c80:	bf98      	it	ls
    1c82:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    1c86:	d2e3      	bcs.n	1c50 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1c88:	429a      	cmp	r2, r3
    1c8a:	d3e1      	bcc.n	1c50 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x6dc>
    1c8c:	4620      	mov	r0, r4
    1c8e:	f00b fbb9 	bl	d404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1c92:	4965      	ldr	r1, [pc, #404]	; (1e28 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xdc>)
    1c94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    1c96:	1c4b      	adds	r3, r1, #1
    1c98:	1a16      	subs	r6, r2, r0
    1c9a:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
    1c9e:	bf24      	itt	cs
    1ca0:	eba0 0c02 	subcs.w	ip, r0, r2
    1ca4:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
    1ca8:	d310      	bcc.n	1ccc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    1caa:	42b1      	cmp	r1, r6
    1cac:	d208      	bcs.n	1cc0 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74c>
    1cae:	1a08      	subs	r0, r1, r0
    1cb0:	4410      	add	r0, r2
    1cb2:	1c46      	adds	r6, r0, #1
    1cb4:	e00a      	b.n	1ccc <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x758>
    1cb6:	f640 212d 	movw	r1, #2605	; 0xa2d
    1cba:	2070      	movs	r0, #112	; 0x70
    1cbc:	f002 fe20 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1cc0:	4561      	cmp	r1, ip
    1cc2:	d22c      	bcs.n	1d1e <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7aa>
    1cc4:	1a89      	subs	r1, r1, r2
    1cc6:	4408      	add	r0, r1
    1cc8:	1c40      	adds	r0, r0, #1
    1cca:	4246      	negs	r6, r0
    1ccc:	4854      	ldr	r0, [pc, #336]	; (1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>)
    1cce:	7f80      	ldrb	r0, [r0, #30]
    1cd0:	b350      	cbz	r0, 1d28 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7b4>
    1cd2:	4628      	mov	r0, r5
    1cd4:	4645      	mov	r5, r8
    1cd6:	f04f 0b00 	mov.w	fp, #0
    1cda:	46d8      	mov	r8, fp
    1cdc:	2801      	cmp	r0, #1
    1cde:	d005      	beq.n	1cec <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x778>
    1ce0:	2002      	movs	r0, #2
    1ce2:	f002 f985 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1ce6:	2001      	movs	r0, #1
    1ce8:	f002 f982 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1cec:	45a9      	cmp	r9, r5
    1cee:	d227      	bcs.n	1d40 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x7cc>
    1cf0:	eba6 0105 	sub.w	r1, r6, r5
    1cf4:	f04f 0301 	mov.w	r3, #1
    1cf8:	f04f 0203 	mov.w	r2, #3
    1cfc:	f04f 0002 	mov.w	r0, #2
    1d00:	f002 f8a2 	bl	3e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d04:	2800      	cmp	r0, #0
    1d06:	bf08      	it	eq
    1d08:	f04f 0801 	moveq.w	r8, #1
    1d0c:	f1b9 0f00 	cmp.w	r9, #0
    1d10:	d030      	beq.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d12:	2301      	movs	r3, #1
    1d14:	eba6 0109 	sub.w	r1, r6, r9
    1d18:	2203      	movs	r2, #3
    1d1a:	4618      	mov	r0, r3
    1d1c:	e01e      	b.n	1d5c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10>
    1d1e:	f640 310c 	movw	r1, #2828	; 0xb0c
    1d22:	2070      	movs	r0, #112	; 0x70
    1d24:	f002 fdec 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d28:	45c1      	cmp	r9, r8
    1d2a:	bf34      	ite	cc
    1d2c:	4640      	movcc	r0, r8
    1d2e:	4648      	movcs	r0, r9
    1d30:	4458      	add	r0, fp
    1d32:	42b0      	cmp	r0, r6
    1d34:	dbcd      	blt.n	1cd2 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x75e>
    1d36:	f44f 6124 	mov.w	r1, #2624	; 0xa40
    1d3a:	2070      	movs	r0, #112	; 0x70
    1d3c:	f002 fde0 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d40:	d910      	bls.n	1d64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1d42:	2301      	movs	r3, #1
    1d44:	eba6 0109 	sub.w	r1, r6, r9
    1d48:	2203      	movs	r2, #3
    1d4a:	4618      	mov	r0, r3
    1d4c:	f002 f87c 	bl	3e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d50:	b328      	cbz	r0, 1d9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52>
    1d52:	b17d      	cbz	r5, 1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d54:	1b71      	subs	r1, r6, r5
    1d56:	2301      	movs	r3, #1
    1d58:	2203      	movs	r2, #3
    1d5a:	2002      	movs	r0, #2
    1d5c:	f002 f874 	bl	3e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d60:	b1e8      	cbz	r0, 1d9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52>
    1d62:	e007      	b.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d64:	ea55 0009 	orrs.w	r0, r5, r9
    1d68:	d004      	beq.n	1d74 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28>
    1d6a:	f640 1177 	movw	r1, #2423	; 0x977
    1d6e:	2070      	movs	r0, #112	; 0x70
    1d70:	f002 fdc6 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1d74:	2301      	movs	r3, #1
    1d76:	2203      	movs	r2, #3
    1d78:	4631      	mov	r1, r6
    1d7a:	2000      	movs	r0, #0
    1d7c:	f002 f864 	bl	3e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1d80:	b168      	cbz	r0, 1d9e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x52>
    1d82:	2501      	movs	r5, #1
    1d84:	f1b8 0f00 	cmp.w	r8, #0
    1d88:	d003      	beq.n	1d92 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x46>
    1d8a:	9814      	ldr	r0, [sp, #80]	; 0x50
    1d8c:	900f      	str	r0, [sp, #60]	; 0x3c
    1d8e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
    1d92:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1e3c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf0>
    1d96:	f1ba 0f00 	cmp.w	sl, #0
    1d9a:	d10e      	bne.n	1dba <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6e>
    1d9c:	e009      	b.n	1db2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x66>
    1d9e:	2002      	movs	r0, #2
    1da0:	f002 f926 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1da4:	2001      	movs	r0, #1
    1da6:	f002 f923 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1daa:	b01b      	add	sp, #108	; 0x6c
    1dac:	2000      	movs	r0, #0
    1dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1db2:	481b      	ldr	r0, [pc, #108]	; (1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>)
    1db4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
    1db8:	b100      	cbz	r0, 1dbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x70>
    1dba:	b34f      	cbz	r7, 1e10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc4>
    1dbc:	f8df a060 	ldr.w	sl, [pc, #96]	; 1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>
    1dc0:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1dc4:	b118      	cbz	r0, 1dce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x82>
    1dc6:	f002 fbeb 	bl	45a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    1dca:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
    1dce:	b307      	cbz	r7, 1e12 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc6>
    1dd0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
    1dd4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1dd8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1ddc:	f8c8 0000 	str.w	r0, [r8]
    1de0:	2300      	movs	r3, #0
    1de2:	2203      	movs	r2, #3
    1de4:	2005      	movs	r0, #5
    1de6:	f002 f82f 	bl	3e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1dea:	b368      	cbz	r0, 1e48 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfc>
    1dec:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    1df0:	2005      	movs	r0, #5
    1df2:	f002 f9c9 	bl	4188 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    1df6:	4912      	ldr	r1, [pc, #72]	; (1e40 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf4>)
    1df8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    1dfc:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
    1e00:	4910      	ldr	r1, [pc, #64]	; (1e44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>)
    1e02:	12e0      	asrs	r0, r4, #11
    1e04:	6008      	str	r0, [r1, #0]
    1e06:	4c06      	ldr	r4, [pc, #24]	; (1e20 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xd4>)
    1e08:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1e0c:	b3e8      	cbz	r0, 1e8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13e>
    1e0e:	e030      	b.n	1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e10:	e01b      	b.n	1e4a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xfe>
    1e12:	e01f      	b.n	1e54 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x108>
    1e14:	40000508 	.word	0x40000508
    1e18:	20000010 	.word	0x20000010
    1e1c:	20000c34 	.word	0x20000c34
    1e20:	20000fb4 	.word	0x20000fb4
    1e24:	20000012 	.word	0x20000012
    1e28:	1e847fff 	.word	0x1e847fff
    1e2c:	07a12000 	.word	0x07a12000
    1e30:	f85ee000 	.word	0xf85ee000
    1e34:	1e848000 	.word	0x1e848000
    1e38:	003fffff 	.word	0x003fffff
    1e3c:	4001f508 	.word	0x4001f508
    1e40:	4001f098 	.word	0x4001f098
    1e44:	4001f504 	.word	0x4001f504
    1e48:	e025      	b.n	1e96 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14a>
    1e4a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>
    1e4e:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
    1e52:	b1c8      	cbz	r0, 1e88 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x13c>
    1e54:	4c2b      	ldr	r4, [pc, #172]	; (1f04 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1b8>)
    1e56:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    1e5a:	b150      	cbz	r0, 1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1e5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    1e60:	f8c8 0000 	str.w	r0, [r8]
    1e64:	2005      	movs	r0, #5
    1e66:	f002 f8c3 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    1e6a:	f002 fc01 	bl	4670 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1e6e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
    1e72:	eba6 0009 	sub.w	r0, r6, r9
    1e76:	f1a0 0119 	sub.w	r1, r0, #25
    1e7a:	2900      	cmp	r1, #0
    1e7c:	dc15      	bgt.n	1eaa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x15e>
    1e7e:	f640 2171 	movw	r1, #2673	; 0xa71
    1e82:	2070      	movs	r0, #112	; 0x70
    1e84:	f002 fd3c 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1e88:	e000      	b.n	1e8c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x140>
    1e8a:	e009      	b.n	1ea0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x154>
    1e8c:	f002 fba4 	bl	45d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    1e90:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
    1e94:	e79b      	b.n	1dce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x82>
    1e96:	f240 313e 	movw	r1, #830	; 0x33e
    1e9a:	2070      	movs	r0, #112	; 0x70
    1e9c:	f002 fd30 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1ea0:	f002 fbd8 	bl	4654 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
    1ea4:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
    1ea8:	e7e3      	b.n	1e72 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x126>
    1eaa:	2203      	movs	r2, #3
    1eac:	2301      	movs	r3, #1
    1eae:	4610      	mov	r0, r2
    1eb0:	f001 ffca 	bl	3e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1eb4:	b308      	cbz	r0, 1efa <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ae>
    1eb6:	4814      	ldr	r0, [pc, #80]	; (1f08 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1bc>)
    1eb8:	6880      	ldr	r0, [r0, #8]
    1eba:	f8c0 b000 	str.w	fp, [r0]
    1ebe:	4813      	ldr	r0, [pc, #76]	; (1f0c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c0>)
    1ec0:	f8c0 b000 	str.w	fp, [r0]
    1ec4:	ac0c      	add	r4, sp, #48	; 0x30
    1ec6:	4812      	ldr	r0, [pc, #72]	; (1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>)
    1ec8:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1ecc:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
    1ed0:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
    1ed4:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
    1ed8:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
    1edc:	ac10      	add	r4, sp, #64	; 0x40
    1ede:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
    1ee2:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
    1ee6:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
    1eea:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
    1eee:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
    1ef2:	b01b      	add	sp, #108	; 0x6c
    1ef4:	2001      	movs	r0, #1
    1ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1efa:	f640 2179 	movw	r1, #2681	; 0xa79
    1efe:	2070      	movs	r0, #112	; 0x70
    1f00:	f002 fcfe 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f04:	20000fb4 	.word	0x20000fb4
    1f08:	20000010 	.word	0x20000010
    1f0c:	40000508 	.word	0x40000508
    1f10:	20000c34 	.word	0x20000c34
    1f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    1f18:	4606      	mov	r6, r0
    1f1a:	b083      	sub	sp, #12
    1f1c:	7808      	ldrb	r0, [r1, #0]
    1f1e:	7390      	strb	r0, [r2, #14]
    1f20:	7acf      	ldrb	r7, [r1, #11]
    1f22:	7357      	strb	r7, [r2, #13]
    1f24:	7a88      	ldrb	r0, [r1, #10]
    1f26:	7310      	strb	r0, [r2, #12]
    1f28:	8908      	ldrh	r0, [r1, #8]
    1f2a:	4614      	mov	r4, r2
    1f2c:	8150      	strh	r0, [r2, #10]
    1f2e:	460d      	mov	r5, r1
    1f30:	780a      	ldrb	r2, [r1, #0]
    1f32:	495f      	ldr	r1, [pc, #380]	; (20b0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x364>)
    1f34:	4699      	mov	r9, r3
    1f36:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    1f3a:	424b      	negs	r3, r1
    1f3c:	f1ac 0801 	sub.w	r8, ip, #1
    1f40:	b15a      	cbz	r2, 1f5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20e>
    1f42:	43c0      	mvns	r0, r0
    1f44:	f8d5 8004 	ldr.w	r8, [r5, #4]
    1f48:	f104 0208 	add.w	r2, r4, #8
    1f4c:	4288      	cmp	r0, r1
    1f4e:	dd3d      	ble.n	1fcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x280>
    1f50:	f240 610a 	movw	r1, #1546	; 0x60a
    1f54:	2070      	movs	r0, #112	; 0x70
    1f56:	f002 fcd3 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f5a:	68ee      	ldr	r6, [r5, #12]
    1f5c:	686d      	ldr	r5, [r5, #4]
    1f5e:	ea6f 0900 	mvn.w	r9, r0
    1f62:	f104 0208 	add.w	r2, r4, #8
    1f66:	eb06 0009 	add.w	r0, r6, r9
    1f6a:	4546      	cmp	r6, r8
    1f6c:	d904      	bls.n	1f78 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22c>
    1f6e:	f240 6109 	movw	r1, #1545	; 0x609
    1f72:	2070      	movs	r0, #112	; 0x70
    1f74:	f002 fcc4 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f78:	4589      	cmp	r9, r1
    1f7a:	dce9      	bgt.n	1f50 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x204>
    1f7c:	4599      	cmp	r9, r3
    1f7e:	db28      	blt.n	1fd2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x286>
    1f80:	4584      	cmp	ip, r0
    1f82:	bfdc      	itt	le
    1f84:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    1f88:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1f8c:	dd05      	ble.n	1f9a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x24e>
    1f8e:	2800      	cmp	r0, #0
    1f90:	bfbc      	itt	lt
    1f92:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    1f96:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1f9a:	4621      	mov	r1, r4
    1f9c:	f001 fc6c 	bl	3878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1fa0:	6820      	ldr	r0, [r4, #0]
    1fa2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1fa6:	1970      	adds	r0, r6, r5
    1fa8:	1c40      	adds	r0, r0, #1
    1faa:	6021      	str	r1, [r4, #0]
    1fac:	2f00      	cmp	r7, #0
    1fae:	bf08      	it	eq
    1fb0:	307a      	addeq	r0, #122	; 0x7a
    1fb2:	d003      	beq.n	1fbc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x270>
    1fb4:	2f01      	cmp	r7, #1
    1fb6:	bf08      	it	eq
    1fb8:	3048      	addeq	r0, #72	; 0x48
    1fba:	d12d      	bne.n	2018 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2cc>
    1fbc:	f001 fc40 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1fc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1fc4:	6060      	str	r0, [r4, #4]
    1fc6:	b003      	add	sp, #12
    1fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1fcc:	4601      	mov	r1, r0
    1fce:	4298      	cmp	r0, r3
    1fd0:	da04      	bge.n	1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>
    1fd2:	f240 610b 	movw	r1, #1547	; 0x60b
    1fd6:	2070      	movs	r0, #112	; 0x70
    1fd8:	f002 fc92 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1fdc:	4584      	cmp	ip, r0
    1fde:	bfdc      	itt	le
    1fe0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
    1fe4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
    1fe8:	dd05      	ble.n	1ff6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2aa>
    1fea:	2800      	cmp	r0, #0
    1fec:	bfbc      	itt	lt
    1fee:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
    1ff2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
    1ff6:	4621      	mov	r1, r4
    1ff8:	f001 fc3e 	bl	3878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1ffc:	6820      	ldr	r0, [r4, #0]
    1ffe:	2f00      	cmp	r7, #0
    2000:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2004:	f108 0001 	add.w	r0, r8, #1
    2008:	6021      	str	r1, [r4, #0]
    200a:	bf08      	it	eq
    200c:	307a      	addeq	r0, #122	; 0x7a
    200e:	d008      	beq.n	2022 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d6>
    2010:	2f01      	cmp	r7, #1
    2012:	bf08      	it	eq
    2014:	3048      	addeq	r0, #72	; 0x48
    2016:	d004      	beq.n	2022 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2d6>
    2018:	f240 61b1 	movw	r1, #1713	; 0x6b1
    201c:	2070      	movs	r0, #112	; 0x70
    201e:	f002 fc6f 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2022:	f001 fc0d 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2026:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    202a:	6061      	str	r1, [r4, #4]
    202c:	8960      	ldrh	r0, [r4, #10]
    202e:	aa01      	add	r2, sp, #4
    2030:	4669      	mov	r1, sp
    2032:	f001 fc21 	bl	3878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2036:	481f      	ldr	r0, [pc, #124]	; (20b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x368>)
    2038:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    203c:	2920      	cmp	r1, #32
    203e:	d023      	beq.n	2088 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x33c>
    2040:	6900      	ldr	r0, [r0, #16]
    2042:	1d40      	adds	r0, r0, #5
    2044:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2048:	e9d4 2100 	ldrd	r2, r1, [r4]
    204c:	1a89      	subs	r1, r1, r2
    204e:	6020      	str	r0, [r4, #0]
    2050:	4408      	add	r0, r1
    2052:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2056:	6060      	str	r0, [r4, #4]
    2058:	464b      	mov	r3, r9
    205a:	4632      	mov	r2, r6
    205c:	4621      	mov	r1, r4
    205e:	68e8      	ldr	r0, [r5, #12]
    2060:	f7ff fad2 	bl	1608 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2064:	2800      	cmp	r0, #0
    2066:	bf1c      	itt	ne
    2068:	b003      	addne	sp, #12
    206a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    206e:	e9d4 1000 	ldrd	r1, r0, [r4]
    2072:	1a40      	subs	r0, r0, r1
    2074:	4430      	add	r0, r6
    2076:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    207a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    207e:	e9c4 1000 	strd	r1, r0, [r4]
    2082:	b003      	add	sp, #12
    2084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    2088:	8960      	ldrh	r0, [r4, #10]
    208a:	f106 0709 	add.w	r7, r6, #9
    208e:	b120      	cbz	r0, 209a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x34e>
    2090:	f002 fbbe 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2094:	2800      	cmp	r0, #0
    2096:	bf08      	it	eq
    2098:	3732      	addeq	r7, #50	; 0x32
    209a:	4807      	ldr	r0, [pc, #28]	; (20b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x36c>)
    209c:	7841      	ldrb	r1, [r0, #1]
    209e:	9800      	ldr	r0, [sp, #0]
    20a0:	4281      	cmp	r1, r0
    20a2:	bf84      	itt	hi
    20a4:	1a08      	subhi	r0, r1, r0
    20a6:	4407      	addhi	r7, r0
    20a8:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    20ac:	e7cc      	b.n	2048 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2fc>
    20ae:	0000      	.short	0x0000
    20b0:	07a12000 	.word	0x07a12000
    20b4:	20000fb4 	.word	0x20000fb4
    20b8:	20000012 	.word	0x20000012
    20bc:	b510      	push	{r4, lr}
    20be:	4c15      	ldr	r4, [pc, #84]	; (2114 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3c8>)
    20c0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    20c4:	2820      	cmp	r0, #32
    20c6:	bf18      	it	ne
    20c8:	bd10      	popne	{r4, pc}
    20ca:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    20ce:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    20d2:	f890 1020 	ldrb.w	r1, [r0, #32]
    20d6:	2920      	cmp	r1, #32
    20d8:	d017      	beq.n	210a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3be>
    20da:	f8df c03c 	ldr.w	ip, [pc, #60]	; 2118 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3cc>
    20de:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    20e2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    20e6:	785b      	ldrb	r3, [r3, #1]
    20e8:	f880 3020 	strb.w	r3, [r0, #32]
    20ec:	2301      	movs	r3, #1
    20ee:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    20f2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    20f6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    20fa:	2002      	movs	r0, #2
    20fc:	f000 f8b0 	bl	2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>
    2100:	2000      	movs	r0, #0
    2102:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    2106:	77a0      	strb	r0, [r4, #30]
    2108:	bd10      	pop	{r4, pc}
    210a:	f240 318b 	movw	r1, #907	; 0x38b
    210e:	2070      	movs	r0, #112	; 0x70
    2110:	f002 fbf6 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2114:	20000fb4 	.word	0x20000fb4
    2118:	20000f34 	.word	0x20000f34
    211c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    2120:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 21dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x490>
    2124:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    2128:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    212c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    2130:	2c20      	cmp	r4, #32
    2132:	bf08      	it	eq
    2134:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    2138:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 21e0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x494>
    213c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 21e4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x498>
    2140:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    2144:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    2148:	2607      	movs	r6, #7
    214a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    214e:	2801      	cmp	r0, #1
    2150:	d00e      	beq.n	2170 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x424>
    2152:	2804      	cmp	r0, #4
    2154:	bf08      	it	eq
    2156:	2602      	moveq	r6, #2
    2158:	d00a      	beq.n	2170 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x424>
    215a:	2805      	cmp	r0, #5
    215c:	bf0c      	ite	eq
    215e:	2603      	moveq	r6, #3
    2160:	2806      	cmpne	r0, #6
    2162:	d005      	beq.n	2170 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x424>
    2164:	f640 01d9 	movw	r1, #2265	; 0x8d9
    2168:	f04f 0070 	mov.w	r0, #112	; 0x70
    216c:	f002 fbc8 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2170:	f1bb 0f00 	cmp.w	fp, #0
    2174:	bf18      	it	ne
    2176:	f3af 8000 	nopne.w
    217a:	f3ef 8010 	mrs	r0, PRIMASK
    217e:	b672      	cpsid	i
    2180:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    2184:	784a      	ldrb	r2, [r1, #1]
    2186:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    218a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    218e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    2192:	42a2      	cmp	r2, r4
    2194:	bf04      	itt	eq
    2196:	2220      	moveq	r2, #32
    2198:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    219c:	b1b8      	cbz	r0, 21ce <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x482>
    219e:	462a      	mov	r2, r5
    21a0:	4621      	mov	r1, r4
    21a2:	2001      	movs	r0, #1
    21a4:	f000 f85c 	bl	2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>
    21a8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    21ac:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    21b0:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    21b4:	6840      	ldr	r0, [r0, #4]
    21b6:	4631      	mov	r1, r6
    21b8:	4790      	blx	r2
    21ba:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    21be:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    21c2:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    21c6:	2c20      	cmp	r4, #32
    21c8:	d1bc      	bne.n	2144 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x3f8>
    21ca:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    21ce:	4806      	ldr	r0, [pc, #24]	; (21e8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x49c>)
    21d0:	2800      	cmp	r0, #0
    21d2:	bf18      	it	ne
    21d4:	f3af 8000 	nopne.w
    21d8:	b662      	cpsie	i
    21da:	e7e0      	b.n	219e <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x452>
    21dc:	20000fb4 	.word	0x20000fb4
    21e0:	00000000 	.word	0x00000000
    21e4:	20000f34 	.word	0x20000f34
    21e8:	00000000 	.word	0x00000000
    21ec:	b510      	push	{r4, lr}
    21ee:	4604      	mov	r4, r0
    21f0:	6800      	ldr	r0, [r0, #0]
    21f2:	f00b f907 	bl	d404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    21f6:	4602      	mov	r2, r0
    21f8:	8960      	ldrh	r0, [r4, #10]
    21fa:	7a21      	ldrb	r1, [r4, #8]
    21fc:	4b14      	ldr	r3, [pc, #80]	; (2250 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x504>)
    21fe:	4408      	add	r0, r1
    2200:	1c41      	adds	r1, r0, #1
    2202:	1850      	adds	r0, r2, r1
    2204:	429a      	cmp	r2, r3
    2206:	d904      	bls.n	2212 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4c6>
    2208:	f240 6109 	movw	r1, #1545	; 0x609
    220c:	2070      	movs	r0, #112	; 0x70
    220e:	f002 fb77 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2212:	4a10      	ldr	r2, [pc, #64]	; (2254 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x508>)
    2214:	4291      	cmp	r1, r2
    2216:	dd04      	ble.n	2222 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4d6>
    2218:	f240 610a 	movw	r1, #1546	; 0x60a
    221c:	2070      	movs	r0, #112	; 0x70
    221e:	f002 fb6f 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2222:	4a0d      	ldr	r2, [pc, #52]	; (2258 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x50c>)
    2224:	4291      	cmp	r1, r2
    2226:	da04      	bge.n	2232 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4e6>
    2228:	f240 610b 	movw	r1, #1547	; 0x60b
    222c:	2070      	movs	r0, #112	; 0x70
    222e:	f002 fb67 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2232:	490a      	ldr	r1, [pc, #40]	; (225c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x510>)
    2234:	4281      	cmp	r1, r0
    2236:	bfde      	ittt	le
    2238:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    223c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2240:	bd10      	pople	{r4, pc}
    2242:	2800      	cmp	r0, #0
    2244:	bfbc      	itt	lt
    2246:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    224a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    224e:	bd10      	pop	{r4, pc}
    2250:	1e847fff 	.word	0x1e847fff
    2254:	07a12000 	.word	0x07a12000
    2258:	f85ee000 	.word	0xf85ee000
    225c:	1e848000 	.word	0x1e848000
    2260:	f8df c054 	ldr.w	ip, [pc, #84]	; 22b8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x56c>
    2264:	b510      	push	{r4, lr}
    2266:	2300      	movs	r3, #0
    2268:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    226c:	2807      	cmp	r0, #7
    226e:	d21e      	bcs.n	22ae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x562>
    2270:	e8df f000 	tbb	[pc, r0]
    2274:	05050505 	.word	0x05050505
    2278:	00040404 	.word	0x00040404
    227c:	2301      	movs	r3, #1
    227e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    2282:	2b00      	cmp	r3, #0
    2284:	bf08      	it	eq
    2286:	bd10      	popeq	{r4, pc}
    2288:	480c      	ldr	r0, [pc, #48]	; (22bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x570>)
    228a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    228e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    2292:	2820      	cmp	r0, #32
    2294:	bf0e      	itee	eq
    2296:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    229a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    229e:	7041      	strbne	r1, [r0, #1]
    22a0:	2020      	movs	r0, #32
    22a2:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    22a6:	7058      	strb	r0, [r3, #1]
    22a8:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    22ac:	bd10      	pop	{r4, pc}
    22ae:	f44f 7115 	mov.w	r1, #596	; 0x254
    22b2:	2070      	movs	r0, #112	; 0x70
    22b4:	f002 fb24 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22b8:	20000f34 	.word	0x20000f34
    22bc:	20000fb4 	.word	0x20000fb4
    22c0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22c4:	b083      	sub	sp, #12
    22c6:	485c      	ldr	r0, [pc, #368]	; (2438 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6ec>)
    22c8:	9904      	ldr	r1, [sp, #16]
    22ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    22ce:	9001      	str	r0, [sp, #4]
    22d0:	f890 4020 	ldrb.w	r4, [r0, #32]
    22d4:	9803      	ldr	r0, [sp, #12]
    22d6:	4625      	mov	r5, r4
    22d8:	2801      	cmp	r0, #1
    22da:	bf18      	it	ne
    22dc:	2802      	cmpne	r0, #2
    22de:	d005      	beq.n	22ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5a0>
    22e0:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    22e4:	f04f 0070 	mov.w	r0, #112	; 0x70
    22e8:	f002 fb0a 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    22ec:	2700      	movs	r7, #0
    22ee:	2d20      	cmp	r5, #32
    22f0:	d04a      	beq.n	2388 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x63c>
    22f2:	4851      	ldr	r0, [pc, #324]	; (2438 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6ec>)
    22f4:	9100      	str	r1, [sp, #0]
    22f6:	2600      	movs	r6, #0
    22f8:	7f80      	ldrb	r0, [r0, #30]
    22fa:	2800      	cmp	r0, #0
    22fc:	bf08      	it	eq
    22fe:	2602      	moveq	r6, #2
    2300:	f001 fc18 	bl	3b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2304:	f8df a138 	ldr.w	sl, [pc, #312]	; 2440 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f4>
    2308:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    230c:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    2310:	f8df 9128 	ldr.w	r9, [pc, #296]	; 243c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f0>
    2314:	688a      	ldr	r2, [r1, #8]
    2316:	68c9      	ldr	r1, [r1, #12]
    2318:	1a12      	subs	r2, r2, r0
    231a:	1a09      	subs	r1, r1, r0
    231c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2320:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2324:	4296      	cmp	r6, r2
    2326:	bf98      	it	ls
    2328:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    232c:	d201      	bcs.n	2332 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5e6>
    232e:	4589      	cmp	r9, r1
    2330:	d228      	bcs.n	2384 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x638>
    2332:	4a44      	ldr	r2, [pc, #272]	; (2444 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6f8>)
    2334:	9900      	ldr	r1, [sp, #0]
    2336:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    233a:	4622      	mov	r2, r4
    233c:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    2340:	784c      	ldrb	r4, [r1, #1]
    2342:	2c20      	cmp	r4, #32
    2344:	d016      	beq.n	2374 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x628>
    2346:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    234a:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    234e:	f8dc 8008 	ldr.w	r8, [ip, #8]
    2352:	f8dc c00c 	ldr.w	ip, [ip, #12]
    2356:	eba8 0800 	sub.w	r8, r8, r0
    235a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    235e:	ebac 0100 	sub.w	r1, ip, r0
    2362:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2366:	4546      	cmp	r6, r8
    2368:	bf98      	it	ls
    236a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    236e:	d2e4      	bcs.n	233a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5ee>
    2370:	4589      	cmp	r9, r1
    2372:	d3e2      	bcc.n	233a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5ee>
    2374:	2a20      	cmp	r2, #32
    2376:	d005      	beq.n	2384 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x638>
    2378:	2120      	movs	r1, #32
    237a:	2004      	movs	r0, #4
    237c:	9b00      	ldr	r3, [sp, #0]
    237e:	f7ff f907 	bl	1590 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2382:	4604      	mov	r4, r0
    2384:	42ac      	cmp	r4, r5
    2386:	d115      	bne.n	23b4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x668>
    2388:	482f      	ldr	r0, [pc, #188]	; (2448 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6fc>)
    238a:	2800      	cmp	r0, #0
    238c:	bf18      	it	ne
    238e:	f3af 8000 	nopne.w
    2392:	f001 fbcf 	bl	3b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2396:	4c28      	ldr	r4, [pc, #160]	; (2438 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6ec>)
    2398:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    239c:	2920      	cmp	r1, #32
    239e:	d00d      	beq.n	23bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x670>
    23a0:	68e1      	ldr	r1, [r4, #12]
    23a2:	1c82      	adds	r2, r0, #2
    23a4:	1a51      	subs	r1, r2, r1
    23a6:	0209      	lsls	r1, r1, #8
    23a8:	17ca      	asrs	r2, r1, #31
    23aa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    23ae:	1209      	asrs	r1, r1, #8
    23b0:	2900      	cmp	r1, #0
    23b2:	dd03      	ble.n	23bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x670>
    23b4:	b005      	add	sp, #20
    23b6:	2000      	movs	r0, #0
    23b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23bc:	2d20      	cmp	r5, #32
    23be:	d00d      	beq.n	23dc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x690>
    23c0:	462a      	mov	r2, r5
    23c2:	9903      	ldr	r1, [sp, #12]
    23c4:	f7ff fb1c 	bl	1a00 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x48c>
    23c8:	b358      	cbz	r0, 2422 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6d6>
    23ca:	9801      	ldr	r0, [sp, #4]
    23cc:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    23d0:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    23d4:	b005      	add	sp, #20
    23d6:	2001      	movs	r0, #1
    23d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    23dc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    23e0:	b118      	cbz	r0, 23ea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x69e>
    23e2:	f002 f8dd 	bl	45a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    23e6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    23ea:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    23ee:	b150      	cbz	r0, 2406 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x6ba>
    23f0:	4916      	ldr	r1, [pc, #88]	; (244c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x700>)
    23f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    23f6:	6008      	str	r0, [r1, #0]
    23f8:	2005      	movs	r0, #5
    23fa:	f001 fdf9 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    23fe:	f002 f937 	bl	4670 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    2402:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    2406:	2004      	movs	r0, #4
    2408:	f001 fdf2 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    240c:	f001 fe5e 	bl	40cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    2410:	2020      	movs	r0, #32
    2412:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    2416:	480e      	ldr	r0, [pc, #56]	; (2450 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x704>)
    2418:	6880      	ldr	r0, [r0, #8]
    241a:	6007      	str	r7, [r0, #0]
    241c:	480d      	ldr	r0, [pc, #52]	; (2454 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x708>)
    241e:	6007      	str	r7, [r0, #0]
    2420:	e7d8      	b.n	23d4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x688>
    2422:	462a      	mov	r2, r5
    2424:	2120      	movs	r1, #32
    2426:	2004      	movs	r0, #4
    2428:	9b04      	ldr	r3, [sp, #16]
    242a:	f7ff f8b1 	bl	1590 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    242e:	b005      	add	sp, #20
    2430:	2000      	movs	r0, #0
    2432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2436:	0000      	.short	0x0000
    2438:	20000fb4 	.word	0x20000fb4
    243c:	003fffff 	.word	0x003fffff
    2440:	20000c34 	.word	0x20000c34
    2444:	20000f34 	.word	0x20000f34
    2448:	00000000 	.word	0x00000000
    244c:	4001f508 	.word	0x4001f508
    2450:	20000010 	.word	0x20000010
    2454:	40000508 	.word	0x40000508

00002458 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    2458:	4906      	ldr	r1, [pc, #24]	; (2474 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    245a:	b510      	push	{r4, lr}
    245c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    2460:	2a20      	cmp	r2, #32
    2462:	bf1c      	itt	ne
    2464:	7788      	strbne	r0, [r1, #30]
    2466:	bd10      	popne	{r4, pc}
    2468:	f240 31ea 	movw	r1, #1002	; 0x3ea
    246c:	2070      	movs	r0, #112	; 0x70
    246e:	f002 fa47 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2472:	0000      	.short	0x0000
    2474:	20000fb4 	.word	0x20000fb4

00002478 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    2478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    247c:	4e5b      	ldr	r6, [pc, #364]	; (25ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    247e:	4681      	mov	r9, r0
    2480:	b085      	sub	sp, #20
    2482:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2486:	468a      	mov	sl, r1
    2488:	2820      	cmp	r0, #32
    248a:	d04d      	beq.n	2528 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    248c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    2490:	f106 040c 	add.w	r4, r6, #12
    2494:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2498:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    249c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    24a0:	2020      	movs	r0, #32
    24a2:	f88d 0000 	strb.w	r0, [sp]
    24a6:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    24aa:	aa03      	add	r2, sp, #12
    24ac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    24b0:	a901      	add	r1, sp, #4
    24b2:	f890 5020 	ldrb.w	r5, [r0, #32]
    24b6:	6930      	ldr	r0, [r6, #16]
    24b8:	9002      	str	r0, [sp, #8]
    24ba:	6830      	ldr	r0, [r6, #0]
    24bc:	4448      	add	r0, r9
    24be:	f001 f9db 	bl	3878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    24c2:	68f8      	ldr	r0, [r7, #12]
    24c4:	9901      	ldr	r1, [sp, #4]
    24c6:	4a4a      	ldr	r2, [pc, #296]	; (25f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    24c8:	4408      	add	r0, r1
    24ca:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    24ce:	4291      	cmp	r1, r2
    24d0:	d82f      	bhi.n	2532 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    24d2:	68b9      	ldr	r1, [r7, #8]
    24d4:	1a41      	subs	r1, r0, r1
    24d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    24da:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    24de:	d228      	bcs.n	2532 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    24e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    24e4:	6060      	str	r0, [r4, #4]
    24e6:	4630      	mov	r0, r6
    24e8:	f884 a00c 	strb.w	sl, [r4, #12]
    24ec:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    24f0:	46ea      	mov	sl, sp
    24f2:	2d20      	cmp	r5, #32
    24f4:	bf1c      	itt	ne
    24f6:	493f      	ldrne	r1, [pc, #252]	; (25f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    24f8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    24fc:	d03c      	beq.n	2578 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    24fe:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    2502:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    2506:	6860      	ldr	r0, [r4, #4]
    2508:	68ba      	ldr	r2, [r7, #8]
    250a:	4621      	mov	r1, r4
    250c:	1a10      	subs	r0, r2, r0
    250e:	0200      	lsls	r0, r0, #8
    2510:	17c2      	asrs	r2, r0, #31
    2512:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    2516:	f107 0608 	add.w	r6, r7, #8
    251a:	1200      	asrs	r0, r0, #8
    251c:	d41b      	bmi.n	2556 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    251e:	8970      	ldrh	r0, [r6, #10]
    2520:	b350      	cbz	r0, 2578 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2522:	8948      	ldrh	r0, [r1, #10]
    2524:	b148      	cbz	r0, 253a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    2526:	e027      	b.n	2578 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2528:	f640 317b 	movw	r1, #2939	; 0xb7b
    252c:	2070      	movs	r0, #112	; 0x70
    252e:	f002 f9e7 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2532:	b005      	add	sp, #20
    2534:	2001      	movs	r0, #1
    2536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    253a:	4620      	mov	r0, r4
    253c:	f7ff fe56 	bl	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    2540:	f001 f97e 	bl	3840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    2544:	6831      	ldr	r1, [r6, #0]
    2546:	1a08      	subs	r0, r1, r0
    2548:	0200      	lsls	r0, r0, #8
    254a:	17c1      	asrs	r1, r0, #31
    254c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2550:	1200      	asrs	r0, r0, #8
    2552:	2833      	cmp	r0, #51	; 0x33
    2554:	da10      	bge.n	2578 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    2556:	f88a 5000 	strb.w	r5, [sl]
    255a:	7d39      	ldrb	r1, [r7, #20]
    255c:	7b20      	ldrb	r0, [r4, #12]
    255e:	4281      	cmp	r1, r0
    2560:	d805      	bhi.n	256e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    2562:	9802      	ldr	r0, [sp, #8]
    2564:	6060      	str	r0, [r4, #4]
    2566:	b005      	add	sp, #20
    2568:	2002      	movs	r0, #2
    256a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    256e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    2572:	7845      	ldrb	r5, [r0, #1]
    2574:	2d20      	cmp	r5, #32
    2576:	d1c2      	bne.n	24fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    2578:	2005      	movs	r0, #5
    257a:	f001 fd39 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    257e:	4c1b      	ldr	r4, [pc, #108]	; (25ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    2580:	f04f 30ff 	mov.w	r0, #4294967295
    2584:	60a0      	str	r0, [r4, #8]
    2586:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    258a:	f89d 2000 	ldrb.w	r2, [sp]
    258e:	2120      	movs	r1, #32
    2590:	2a20      	cmp	r2, #32
    2592:	bf13      	iteet	ne
    2594:	2005      	movne	r0, #5
    2596:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    259a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    259e:	f7fe fff7 	blne	1590 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    25a2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    25a6:	4913      	ldr	r1, [pc, #76]	; (25f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    25a8:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    25ac:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    25b0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    25b4:	7048      	strb	r0, [r1, #1]
    25b6:	6820      	ldr	r0, [r4, #0]
    25b8:	4448      	add	r0, r9
    25ba:	6020      	str	r0, [r4, #0]
    25bc:	2001      	movs	r0, #1
    25be:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    25c2:	7e60      	ldrb	r0, [r4, #25]
    25c4:	2801      	cmp	r0, #1
    25c6:	d105      	bne.n	25d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    25c8:	6920      	ldr	r0, [r4, #16]
    25ca:	1e40      	subs	r0, r0, #1
    25cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    25d0:	f001 fb54 	bl	3c7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    25d4:	f89d 0000 	ldrb.w	r0, [sp]
    25d8:	2820      	cmp	r0, #32
    25da:	d003      	beq.n	25e4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    25dc:	4806      	ldr	r0, [pc, #24]	; (25f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    25de:	7840      	ldrb	r0, [r0, #1]
    25e0:	f002 fa5e 	bl	4aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    25e4:	b005      	add	sp, #20
    25e6:	2000      	movs	r0, #0
    25e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25ec:	20000fb4 	.word	0x20000fb4
    25f0:	07a11f9b 	.word	0x07a11f9b
    25f4:	20000f34 	.word	0x20000f34
    25f8:	20000010 	.word	0x20000010

000025fc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    25fc:	b570      	push	{r4, r5, r6, lr}
    25fe:	4a23      	ldr	r2, [pc, #140]	; (268c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    2600:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    2604:	2920      	cmp	r1, #32
    2606:	d039      	beq.n	267c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    2608:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    260c:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    2610:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2614:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    2618:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    261c:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    2620:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    2624:	f891 1020 	ldrb.w	r1, [r1, #32]
    2628:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    262c:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    2630:	2920      	cmp	r1, #32
    2632:	d028      	beq.n	2686 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    2634:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    2638:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    263c:	7d2d      	ldrb	r5, [r5, #20]
    263e:	4285      	cmp	r5, r0
    2640:	bf84      	itt	hi
    2642:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    2646:	7849      	ldrbhi	r1, [r1, #1]
    2648:	d8f2      	bhi.n	2630 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    264a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    264e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    2652:	f8dc 000c 	ldr.w	r0, [ip, #12]
    2656:	6889      	ldr	r1, [r1, #8]
    2658:	6814      	ldr	r4, [r2, #0]
    265a:	1a08      	subs	r0, r1, r0
    265c:	0200      	lsls	r0, r0, #8
    265e:	17c1      	asrs	r1, r0, #31
    2660:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2664:	1200      	asrs	r0, r0, #8
    2666:	d407      	bmi.n	2678 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    2668:	f00a fecc 	bl	d404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    266c:	f104 0165 	add.w	r1, r4, #101	; 0x65
    2670:	4288      	cmp	r0, r1
    2672:	bf24      	itt	cs
    2674:	1b00      	subcs	r0, r0, r4
    2676:	bd70      	popcs	{r4, r5, r6, pc}
    2678:	2000      	movs	r0, #0
    267a:	bd70      	pop	{r4, r5, r6, pc}
    267c:	f640 314d 	movw	r1, #2893	; 0xb4d
    2680:	2070      	movs	r0, #112	; 0x70
    2682:	f002 f93d 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2686:	f04f 30ff 	mov.w	r0, #4294967295
    268a:	bd70      	pop	{r4, r5, r6, pc}
    268c:	20000fb4 	.word	0x20000fb4

00002690 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    2690:	4806      	ldr	r0, [pc, #24]	; (26ac <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    2692:	b510      	push	{r4, lr}
    2694:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    2698:	2920      	cmp	r1, #32
    269a:	bf1c      	itt	ne
    269c:	7e00      	ldrbne	r0, [r0, #24]
    269e:	bd10      	popne	{r4, pc}
    26a0:	f640 3174 	movw	r1, #2932	; 0xb74
    26a4:	2070      	movs	r0, #112	; 0x70
    26a6:	f002 f92b 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26aa:	0000      	.short	0x0000
    26ac:	20000fb4 	.word	0x20000fb4

000026b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    26b0:	4602      	mov	r2, r0
    26b2:	4b14      	ldr	r3, [pc, #80]	; (2704 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    26b4:	b510      	push	{r4, lr}
    26b6:	4408      	add	r0, r1
    26b8:	429a      	cmp	r2, r3
    26ba:	d904      	bls.n	26c6 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    26bc:	f240 6109 	movw	r1, #1545	; 0x609
    26c0:	2070      	movs	r0, #112	; 0x70
    26c2:	f002 f91d 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26c6:	4a10      	ldr	r2, [pc, #64]	; (2708 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    26c8:	4291      	cmp	r1, r2
    26ca:	dd04      	ble.n	26d6 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    26cc:	f240 610a 	movw	r1, #1546	; 0x60a
    26d0:	2070      	movs	r0, #112	; 0x70
    26d2:	f002 f915 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26d6:	4a0d      	ldr	r2, [pc, #52]	; (270c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    26d8:	4291      	cmp	r1, r2
    26da:	da04      	bge.n	26e6 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    26dc:	f240 610b 	movw	r1, #1547	; 0x60b
    26e0:	2070      	movs	r0, #112	; 0x70
    26e2:	f002 f90d 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26e6:	490a      	ldr	r1, [pc, #40]	; (2710 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    26e8:	4281      	cmp	r1, r0
    26ea:	bfde      	ittt	le
    26ec:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    26f0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    26f4:	bd10      	pople	{r4, pc}
    26f6:	2800      	cmp	r0, #0
    26f8:	bfbc      	itt	lt
    26fa:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    26fe:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2702:	bd10      	pop	{r4, pc}
    2704:	1e847fff 	.word	0x1e847fff
    2708:	07a12000 	.word	0x07a12000
    270c:	f85ee000 	.word	0xf85ee000
    2710:	1e848000 	.word	0x1e848000

00002714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    2714:	4a10      	ldr	r2, [pc, #64]	; (2758 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    2716:	1a0b      	subs	r3, r1, r0
    2718:	f102 0c01 	add.w	ip, r2, #1
    271c:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    2720:	bf3c      	itt	cc
    2722:	4618      	movcc	r0, r3
    2724:	4770      	bxcc	lr
    2726:	b510      	push	{r4, lr}
    2728:	1a44      	subs	r4, r0, r1
    272a:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    272e:	bf3c      	itt	cc
    2730:	4618      	movcc	r0, r3
    2732:	bd10      	popcc	{r4, pc}
    2734:	429a      	cmp	r2, r3
    2736:	d203      	bcs.n	2740 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    2738:	1a10      	subs	r0, r2, r0
    273a:	4408      	add	r0, r1
    273c:	1c40      	adds	r0, r0, #1
    273e:	bd10      	pop	{r4, pc}
    2740:	42a2      	cmp	r2, r4
    2742:	d204      	bcs.n	274e <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    2744:	1a51      	subs	r1, r2, r1
    2746:	4408      	add	r0, r1
    2748:	1c40      	adds	r0, r0, #1
    274a:	4240      	negs	r0, r0
    274c:	bd10      	pop	{r4, pc}
    274e:	f640 310c 	movw	r1, #2828	; 0xb0c
    2752:	2070      	movs	r0, #112	; 0x70
    2754:	f002 f8d4 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2758:	1e847fff 	.word	0x1e847fff

0000275c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    275c:	4907      	ldr	r1, [pc, #28]	; (277c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    275e:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    2762:	4282      	cmp	r2, r0
    2764:	bf04      	itt	eq
    2766:	6848      	ldreq	r0, [r1, #4]
    2768:	4770      	bxeq	lr
    276a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    276e:	4904      	ldr	r1, [pc, #16]	; (2780 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    2770:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2774:	3008      	adds	r0, #8
    2776:	f7ff bd39 	b.w	21ec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x4a0>
    277a:	0000      	.short	0x0000
    277c:	20000fb4 	.word	0x20000fb4
    2780:	20000c34 	.word	0x20000c34

00002784 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    2784:	490e      	ldr	r1, [pc, #56]	; (27c0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    2786:	b510      	push	{r4, lr}
    2788:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    278c:	2820      	cmp	r0, #32
    278e:	d012      	beq.n	27b6 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    2790:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    2794:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    2798:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    279c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    27a0:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    27a4:	6840      	ldr	r0, [r0, #4]
    27a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    27aa:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    27ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    27b2:	2104      	movs	r1, #4
    27b4:	4710      	bx	r2
    27b6:	f640 01bc 	movw	r1, #2236	; 0x8bc
    27ba:	2070      	movs	r0, #112	; 0x70
    27bc:	f002 f8a0 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    27c0:	20000fb4 	.word	0x20000fb4

000027c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    27c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    27c6:	4d6d      	ldr	r5, [pc, #436]	; (297c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    27c8:	496d      	ldr	r1, [pc, #436]	; (2980 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    27ca:	2601      	movs	r6, #1
    27cc:	f505 7460 	add.w	r4, r5, #896	; 0x380
    27d0:	2808      	cmp	r0, #8
    27d2:	d273      	bcs.n	28bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    27d4:	e8df f000 	tbb	[pc, r0]
    27d8:	af9d6704 	.word	0xaf9d6704
    27dc:	b9b444cd 	.word	0xb9b444cd
    27e0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    27e4:	b918      	cbnz	r0, 27ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    27e6:	f001 fef7 	bl	45d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    27ea:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    27ee:	8ae0      	ldrh	r0, [r4, #22]
    27f0:	b110      	cbz	r0, 27f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    27f2:	f002 f80d 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    27f6:	b188      	cbz	r0, 281c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    27f8:	f7ff fc60 	bl	20bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x370>
    27fc:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    2800:	68a1      	ldr	r1, [r4, #8]
    2802:	f1b1 3fff 	cmp.w	r1, #4294967295
    2806:	d005      	beq.n	2814 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    2808:	2301      	movs	r3, #1
    280a:	2203      	movs	r2, #3
    280c:	2005      	movs	r0, #5
    280e:	f001 fb1b 	bl	3e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2812:	b140      	cbz	r0, 2826 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    2814:	7e60      	ldrb	r0, [r4, #25]
    2816:	2801      	cmp	r0, #1
    2818:	d110      	bne.n	283c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    281a:	e009      	b.n	2830 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    281c:	f44f 6107 	mov.w	r1, #2160	; 0x870
    2820:	2070      	movs	r0, #112	; 0x70
    2822:	f002 f86d 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2826:	f640 0175 	movw	r1, #2165	; 0x875
    282a:	2070      	movs	r0, #112	; 0x70
    282c:	f002 f868 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2830:	6920      	ldr	r0, [r4, #16]
    2832:	1e40      	subs	r0, r0, #1
    2834:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2838:	f001 fa20 	bl	3c7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    283c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2840:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2844:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2848:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    284c:	6840      	ldr	r0, [r0, #4]
    284e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2852:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2856:	b001      	add	sp, #4
    2858:	2101      	movs	r1, #1
    285a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    285e:	4710      	bx	r2
    2860:	f7ff fc2c 	bl	20bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x370>
    2864:	f04f 30ff 	mov.w	r0, #4294967295
    2868:	60a0      	str	r0, [r4, #8]
    286a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    286e:	f88d 0000 	strb.w	r0, [sp]
    2872:	f89d 0000 	ldrb.w	r0, [sp]
    2876:	b188      	cbz	r0, 289c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    2878:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    287c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2880:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    2884:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    2888:	6840      	ldr	r0, [r0, #4]
    288a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    288e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2892:	b001      	add	sp, #4
    2894:	2106      	movs	r1, #6
    2896:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    289a:	4710      	bx	r2
    289c:	f640 0186 	movw	r1, #2182	; 0x886
    28a0:	2070      	movs	r0, #112	; 0x70
    28a2:	f002 f82d 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28a6:	f7ff fc09 	bl	20bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x370>
    28aa:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    28ae:	f001 ffaf 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    28b2:	b120      	cbz	r0, 28be <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    28b4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    28b8:	b130      	cbz	r0, 28c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    28ba:	e009      	b.n	28d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    28bc:	e059      	b.n	2972 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    28be:	f640 0196 	movw	r1, #2198	; 0x896
    28c2:	2070      	movs	r0, #112	; 0x70
    28c4:	f002 f81c 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    28c8:	f001 fe86 	bl	45d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    28cc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    28d0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    28d4:	b158      	cbz	r0, 28ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    28d6:	492b      	ldr	r1, [pc, #172]	; (2984 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    28d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    28dc:	6008      	str	r0, [r1, #0]
    28de:	2005      	movs	r0, #5
    28e0:	f001 fb86 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    28e4:	f001 fec4 	bl	4670 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    28e8:	2000      	movs	r0, #0
    28ea:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    28ee:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    28f2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    28f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    28fa:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    28fe:	6840      	ldr	r0, [r0, #4]
    2900:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2904:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2908:	b001      	add	sp, #4
    290a:	2100      	movs	r1, #0
    290c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2910:	4710      	bx	r2
    2912:	f001 fc25 	bl	4160 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    2916:	8ae0      	ldrh	r0, [r4, #22]
    2918:	b110      	cbz	r0, 2920 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    291a:	f001 ff79 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    291e:	b128      	cbz	r0, 292c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    2920:	4819      	ldr	r0, [pc, #100]	; (2988 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    2922:	7800      	ldrb	r0, [r0, #0]
    2924:	2803      	cmp	r0, #3
    2926:	bf08      	it	eq
    2928:	7766      	strbeq	r6, [r4, #29]
    292a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    292c:	f640 01a1 	movw	r1, #2209	; 0x8a1
    2930:	2070      	movs	r0, #112	; 0x70
    2932:	f001 ffe5 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2936:	4815      	ldr	r0, [pc, #84]	; (298c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    2938:	6006      	str	r6, [r0, #0]
    293a:	6888      	ldr	r0, [r1, #8]
    293c:	6006      	str	r6, [r0, #0]
    293e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2940:	7808      	ldrb	r0, [r1, #0]
    2942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2946:	f002 b8ab 	b.w	4aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    294a:	f7ff fbb7 	bl	20bc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x370>
    294e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2952:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2956:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    295a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    295e:	6840      	ldr	r0, [r0, #4]
    2960:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2964:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    2968:	b001      	add	sp, #4
    296a:	2105      	movs	r1, #5
    296c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    2970:	4710      	bx	r2
    2972:	f640 01b4 	movw	r1, #2228	; 0x8b4
    2976:	2070      	movs	r0, #112	; 0x70
    2978:	f001 ffc2 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    297c:	20000c34 	.word	0x20000c34
    2980:	20000010 	.word	0x20000010
    2984:	4001f508 	.word	0x4001f508
    2988:	20000012 	.word	0x20000012
    298c:	40000508 	.word	0x40000508

00002990 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    2990:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2994:	4682      	mov	sl, r0
    2996:	48dc      	ldr	r0, [pc, #880]	; (2d08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    2998:	b08b      	sub	sp, #44	; 0x2c
    299a:	6800      	ldr	r0, [r0, #0]
    299c:	4ddb      	ldr	r5, [pc, #876]	; (2d0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    299e:	05c0      	lsls	r0, r0, #23
    29a0:	0dc0      	lsrs	r0, r0, #23
    29a2:	d00e      	beq.n	29c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    29a4:	3810      	subs	r0, #16
    29a6:	b240      	sxtb	r0, r0
    29a8:	2800      	cmp	r0, #0
    29aa:	bfb8      	it	lt
    29ac:	f000 000f 	andlt.w	r0, r0, #15
    29b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    29b4:	bfac      	ite	ge
    29b6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    29ba:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    29be:	0940      	lsrs	r0, r0, #5
    29c0:	d00d      	beq.n	29de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    29c2:	980c      	ldr	r0, [sp, #48]	; 0x30
    29c4:	f04f 0b00 	mov.w	fp, #0
    29c8:	7800      	ldrb	r0, [r0, #0]
    29ca:	2800      	cmp	r0, #0
    29cc:	bf18      	it	ne
    29ce:	2801      	cmpne	r0, #1
    29d0:	d018      	beq.n	2a04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    29d2:	f240 714f 	movw	r1, #1871	; 0x74f
    29d6:	f04f 0070 	mov.w	r0, #112	; 0x70
    29da:	f001 ff91 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29de:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    29e2:	f04f 0b01 	mov.w	fp, #1
    29e6:	2820      	cmp	r0, #32
    29e8:	d007      	beq.n	29fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    29ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    29ec:	7800      	ldrb	r0, [r0, #0]
    29ee:	b148      	cbz	r0, 2a04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    29f0:	f240 714b 	movw	r1, #1867	; 0x74b
    29f4:	2070      	movs	r0, #112	; 0x70
    29f6:	f001 ff83 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    29fa:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    29fe:	2070      	movs	r0, #112	; 0x70
    2a00:	f001 ff7e 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2a04:	4cc2      	ldr	r4, [pc, #776]	; (2d10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    2a06:	b124      	cbz	r4, 2a12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    2a08:	2100      	movs	r1, #0
    2a0a:	f240 7052 	movw	r0, #1874	; 0x752
    2a0e:	f3af 8000 	nop.w
    2a12:	49c0      	ldr	r1, [pc, #768]	; (2d14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    2a14:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    2a18:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    2a1c:	f04f 0801 	mov.w	r8, #1
    2a20:	9000      	str	r0, [sp, #0]
    2a22:	b124      	cbz	r4, 2a2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    2a24:	2100      	movs	r1, #0
    2a26:	f240 705a 	movw	r0, #1882	; 0x75a
    2a2a:	f3af 8000 	nop.w
    2a2e:	f1b8 0f00 	cmp.w	r8, #0
    2a32:	d009      	beq.n	2a48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    2a34:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    2a38:	f04f 0900 	mov.w	r9, #0
    2a3c:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2a40:	f1bb 0f00 	cmp.w	fp, #0
    2a44:	d007      	beq.n	2a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    2a46:	e032      	b.n	2aae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    2a48:	48b3      	ldr	r0, [pc, #716]	; (2d18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2a4a:	2800      	cmp	r0, #0
    2a4c:	bf18      	it	ne
    2a4e:	f3af 8000 	nopne.w
    2a52:	b662      	cpsie	i
    2a54:	e7ee      	b.n	2a34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    2a56:	4637      	mov	r7, r6
    2a58:	2001      	movs	r0, #1
    2a5a:	ea20 0607 	bic.w	r6, r0, r7
    2a5e:	48af      	ldr	r0, [pc, #700]	; (2d1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    2a60:	2240      	movs	r2, #64	; 0x40
    2a62:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2a66:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2a6a:	f00a fe39 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2a6e:	b124      	cbz	r4, 2a7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    2a70:	2100      	movs	r1, #0
    2a72:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2a76:	f3af 8000 	nop.w
    2a7a:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    2a7e:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2a82:	6a09      	ldr	r1, [r1, #32]
    2a84:	6201      	str	r1, [r0, #32]
    2a86:	b124      	cbz	r4, 2a92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    2a88:	2100      	movs	r1, #0
    2a8a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2a8e:	f3af 8000 	nop.w
    2a92:	b124      	cbz	r4, 2a9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    2a94:	2100      	movs	r1, #0
    2a96:	f240 7064 	movw	r0, #1892	; 0x764
    2a9a:	f3af 8000 	nop.w
    2a9e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2aa2:	f88d 0004 	strb.w	r0, [sp, #4]
    2aa6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2aaa:	2800      	cmp	r0, #0
    2aac:	d1b9      	bne.n	2a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2aae:	b124      	cbz	r4, 2aba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    2ab0:	2100      	movs	r1, #0
    2ab2:	f240 706e 	movw	r0, #1902	; 0x76e
    2ab6:	f3af 8000 	nop.w
    2aba:	f001 f83b 	bl	3b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2abe:	4680      	mov	r8, r0
    2ac0:	4633      	mov	r3, r6
    2ac2:	aa06      	add	r2, sp, #24
    2ac4:	990c      	ldr	r1, [sp, #48]	; 0x30
    2ac6:	f7ff fa25 	bl	1f14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>
    2aca:	b124      	cbz	r4, 2ad6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    2acc:	2100      	movs	r1, #0
    2ace:	f240 7075 	movw	r0, #1909	; 0x775
    2ad2:	f3af 8000 	nop.w
    2ad6:	4991      	ldr	r1, [pc, #580]	; (2d1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    2ad8:	a806      	add	r0, sp, #24
    2ada:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    2ade:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    2ae2:	2901      	cmp	r1, #1
    2ae4:	bf18      	it	ne
    2ae6:	2902      	cmpne	r1, #2
    2ae8:	d13c      	bne.n	2b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2aea:	9906      	ldr	r1, [sp, #24]
    2aec:	9b07      	ldr	r3, [sp, #28]
    2aee:	eba1 0108 	sub.w	r1, r1, r8
    2af2:	4a8b      	ldr	r2, [pc, #556]	; (2d20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    2af4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2af8:	eba3 0308 	sub.w	r3, r3, r8
    2afc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2b00:	2902      	cmp	r1, #2
    2b02:	d371      	bcc.n	2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2b04:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    2b08:	d26e      	bcs.n	2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2b0a:	429a      	cmp	r2, r3
    2b0c:	d36c      	bcc.n	2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2b0e:	f04f 0901 	mov.w	r9, #1
    2b12:	ab01      	add	r3, sp, #4
    2b14:	aa05      	add	r2, sp, #20
    2b16:	4631      	mov	r1, r6
    2b18:	f7fe fef2 	bl	1900 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x38c>
    2b1c:	2800      	cmp	r0, #0
    2b1e:	d06b      	beq.n	2bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    2b20:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2b24:	f89d 2004 	ldrb.w	r2, [sp, #4]
    2b28:	4633      	mov	r3, r6
    2b2a:	428a      	cmp	r2, r1
    2b2c:	d068      	beq.n	2c00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    2b2e:	2005      	movs	r0, #5
    2b30:	f7fe fd2e 	bl	1590 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    2b34:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    2b38:	7048      	strb	r0, [r1, #1]
    2b3a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2b3e:	2820      	cmp	r0, #32
    2b40:	bf03      	ittte	eq
    2b42:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2b46:	f880 a020 	strbeq.w	sl, [r0, #32]
    2b4a:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    2b4e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    2b52:	bf18      	it	ne
    2b54:	f880 a001 	strbne.w	sl, [r0, #1]
    2b58:	4632      	mov	r2, r6
    2b5a:	4651      	mov	r1, sl
    2b5c:	f05f 0003 	movs.w	r0, #3
    2b60:	f7ff fb7e 	bl	2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>
    2b64:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    2b68:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    2b6c:	f88d 0004 	strb.w	r0, [sp, #4]
    2b70:	f89d 7004 	ldrb.w	r7, [sp, #4]
    2b74:	b124      	cbz	r4, 2b80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    2b76:	2100      	movs	r1, #0
    2b78:	f240 707c 	movw	r0, #1916	; 0x77c
    2b7c:	f3af 8000 	nop.w
    2b80:	4868      	ldr	r0, [pc, #416]	; (2d24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    2b82:	2800      	cmp	r0, #0
    2b84:	bf18      	it	ne
    2b86:	f3af 8000 	nopne.w
    2b8a:	f3ef 8810 	mrs	r8, PRIMASK
    2b8e:	b672      	cpsid	i
    2b90:	b124      	cbz	r4, 2b9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    2b92:	2100      	movs	r1, #0
    2b94:	f240 7082 	movw	r0, #1922	; 0x782
    2b98:	f3af 8000 	nop.w
    2b9c:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2ba0:	f88d 0004 	strb.w	r0, [sp, #4]
    2ba4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2ba8:	2800      	cmp	r0, #0
    2baa:	f47f af3a 	bne.w	2a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2bae:	b124      	cbz	r4, 2bba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    2bb0:	2100      	movs	r1, #0
    2bb2:	f240 708a 	movw	r0, #1930	; 0x78a
    2bb6:	f3af 8000 	nop.w
    2bba:	f10d 0e18 	add.w	lr, sp, #24
    2bbe:	9800      	ldr	r0, [sp, #0]
    2bc0:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    2bc4:	f100 0008 	add.w	r0, r0, #8
    2bc8:	f1b9 0f00 	cmp.w	r9, #0
    2bcc:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    2bd0:	d044      	beq.n	2c5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2bd2:	b124      	cbz	r4, 2bde <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    2bd4:	2100      	movs	r1, #0
    2bd6:	f240 7097 	movw	r0, #1943	; 0x797
    2bda:	f3af 8000 	nop.w
    2bde:	f1bb 0f00 	cmp.w	fp, #0
    2be2:	d12c      	bne.n	2c3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2be4:	e016      	b.n	2c14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    2be6:	e7ff      	b.n	2be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    2be8:	4632      	mov	r2, r6
    2bea:	4651      	mov	r1, sl
    2bec:	2004      	movs	r0, #4
    2bee:	f7ff fb37 	bl	2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>
    2bf2:	f04f 0901 	mov.w	r9, #1
    2bf6:	e7b5      	b.n	2b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    2bf8:	4632      	mov	r2, r6
    2bfa:	4651      	mov	r1, sl
    2bfc:	2004      	movs	r0, #4
    2bfe:	e7af      	b.n	2b60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    2c00:	2920      	cmp	r1, #32
    2c02:	bf19      	ittee	ne
    2c04:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    2c08:	7840      	ldrbne	r0, [r0, #1]
    2c0a:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    2c0e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    2c12:	e78f      	b.n	2b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    2c14:	b19f      	cbz	r7, 2c3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2c16:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    2c1a:	2820      	cmp	r0, #32
    2c1c:	d10f      	bne.n	2c3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2c1e:	b124      	cbz	r4, 2c2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    2c20:	2100      	movs	r1, #0
    2c22:	f240 709c 	movw	r0, #1948	; 0x79c
    2c26:	f3af 8000 	nop.w
    2c2a:	4631      	mov	r1, r6
    2c2c:	2002      	movs	r0, #2
    2c2e:	f7ff fb47 	bl	22c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x574>
    2c32:	b920      	cbnz	r0, 2c3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    2c34:	980c      	ldr	r0, [sp, #48]	; 0x30
    2c36:	7800      	ldrb	r0, [r0, #0]
    2c38:	b3f0      	cbz	r0, 2cb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    2c3a:	2801      	cmp	r0, #1
    2c3c:	d04c      	beq.n	2cd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    2c3e:	b124      	cbz	r4, 2c4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    2c40:	2100      	movs	r1, #0
    2c42:	f240 70b9 	movw	r0, #1977	; 0x7b9
    2c46:	f3af 8000 	nop.w
    2c4a:	f1bb 0f00 	cmp.w	fp, #0
    2c4e:	bf18      	it	ne
    2c50:	2001      	movne	r0, #1
    2c52:	d04a      	beq.n	2cea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    2c54:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    2c58:	f04f 0901 	mov.w	r9, #1
    2c5c:	b124      	cbz	r4, 2c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    2c5e:	2100      	movs	r1, #0
    2c60:	f240 70ca 	movw	r0, #1994	; 0x7ca
    2c64:	f3af 8000 	nop.w
    2c68:	f1b8 0f00 	cmp.w	r8, #0
    2c6c:	d045      	beq.n	2cfa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    2c6e:	b124      	cbz	r4, 2c7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    2c70:	2100      	movs	r1, #0
    2c72:	f240 70ce 	movw	r0, #1998	; 0x7ce
    2c76:	f3af 8000 	nop.w
    2c7a:	f1b9 0f00 	cmp.w	r9, #0
    2c7e:	d011      	beq.n	2ca4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2c80:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2c84:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    2c88:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    2c8c:	2820      	cmp	r0, #32
    2c8e:	d009      	beq.n	2ca4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    2c90:	b124      	cbz	r4, 2c9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    2c92:	2100      	movs	r1, #0
    2c94:	f240 70d5 	movw	r0, #2005	; 0x7d5
    2c98:	f3af 8000 	nop.w
    2c9c:	4822      	ldr	r0, [pc, #136]	; (2d28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    2c9e:	7840      	ldrb	r0, [r0, #1]
    2ca0:	f001 fefe 	bl	4aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    2ca4:	b124      	cbz	r4, 2cb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    2ca6:	2100      	movs	r1, #0
    2ca8:	f240 70da 	movw	r0, #2010	; 0x7da
    2cac:	f3af 8000 	nop.w
    2cb0:	b00d      	add	sp, #52	; 0x34
    2cb2:	4648      	mov	r0, r9
    2cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2cb8:	e7ff      	b.n	2cba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    2cba:	b124      	cbz	r4, 2cc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    2cbc:	2100      	movs	r1, #0
    2cbe:	f240 70a4 	movw	r0, #1956	; 0x7a4
    2cc2:	f3af 8000 	nop.w
    2cc6:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    2cca:	4651      	mov	r1, sl
    2ccc:	2004      	movs	r0, #4
    2cce:	f7ff fac7 	bl	2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>
    2cd2:	f04f 0901 	mov.w	r9, #1
    2cd6:	e7c1      	b.n	2c5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    2cd8:	2c00      	cmp	r4, #0
    2cda:	f43f aea2 	beq.w	2a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2cde:	2100      	movs	r1, #0
    2ce0:	f240 70af 	movw	r0, #1967	; 0x7af
    2ce4:	f3af 8000 	nop.w
    2ce8:	e69b      	b.n	2a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    2cea:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    2cee:	2001      	movs	r0, #1
    2cf0:	ea20 0101 	bic.w	r1, r0, r1
    2cf4:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    2cf8:	e7ac      	b.n	2c54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    2cfa:	4807      	ldr	r0, [pc, #28]	; (2d18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    2cfc:	2800      	cmp	r0, #0
    2cfe:	bf18      	it	ne
    2d00:	f3af 8000 	nopne.w
    2d04:	b662      	cpsie	i
    2d06:	e7b2      	b.n	2c6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    2d08:	e000ed04 	.word	0xe000ed04
    2d0c:	20000fb4 	.word	0x20000fb4
    2d10:	00000000 	.word	0x00000000
    2d14:	20000c34 	.word	0x20000c34
    2d18:	00000000 	.word	0x00000000
    2d1c:	20000f34 	.word	0x20000f34
    2d20:	003fffff 	.word	0x003fffff
    2d24:	00000000 	.word	0x00000000
    2d28:	20000010 	.word	0x20000010

00002d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    2d2c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2d30:	48a5      	ldr	r0, [pc, #660]	; (2fc8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x29c>)
    2d32:	b08c      	sub	sp, #48	; 0x30
    2d34:	6800      	ldr	r0, [r0, #0]
    2d36:	05c0      	lsls	r0, r0, #23
    2d38:	0dc0      	lsrs	r0, r0, #23
    2d3a:	d011      	beq.n	2d60 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x34>
    2d3c:	3810      	subs	r0, #16
    2d3e:	b240      	sxtb	r0, r0
    2d40:	2800      	cmp	r0, #0
    2d42:	bfb8      	it	lt
    2d44:	f000 000f 	andlt.w	r0, r0, #15
    2d48:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    2d4c:	bfac      	ite	ge
    2d4e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    2d52:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    2d56:	0940      	lsrs	r0, r0, #5
    2d58:	bf08      	it	eq
    2d5a:	f04f 0901 	moveq.w	r9, #1
    2d5e:	d001      	beq.n	2d64 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x38>
    2d60:	f04f 0900 	mov.w	r9, #0
    2d64:	980c      	ldr	r0, [sp, #48]	; 0x30
    2d66:	7800      	ldrb	r0, [r0, #0]
    2d68:	2800      	cmp	r0, #0
    2d6a:	f04f 0000 	mov.w	r0, #0
    2d6e:	bf1c      	itt	ne
    2d70:	b00d      	addne	sp, #52	; 0x34
    2d72:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d76:	f8df a254 	ldr.w	sl, [pc, #596]	; 2fcc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a0>
    2d7a:	4d95      	ldr	r5, [pc, #596]	; (2fd0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a4>)
    2d7c:	4c95      	ldr	r4, [pc, #596]	; (2fd4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2a8>)
    2d7e:	f04f 0b00 	mov.w	fp, #0
    2d82:	900b      	str	r0, [sp, #44]	; 0x2c
    2d84:	b125      	cbz	r5, 2d90 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x64>
    2d86:	2100      	movs	r1, #0
    2d88:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    2d8c:	f3af 8000 	nop.w
    2d90:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    2d94:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    2d98:	f04f 0800 	mov.w	r8, #0
    2d9c:	b125      	cbz	r5, 2da8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x7c>
    2d9e:	2100      	movs	r1, #0
    2da0:	f240 605d 	movw	r0, #1629	; 0x65d
    2da4:	f3af 8000 	nop.w
    2da8:	f1b9 0f00 	cmp.w	r9, #0
    2dac:	d11d      	bne.n	2dea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2dae:	4637      	mov	r7, r6
    2db0:	2001      	movs	r0, #1
    2db2:	ea20 0607 	bic.w	r6, r0, r7
    2db6:	4888      	ldr	r0, [pc, #544]	; (2fd8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2ac>)
    2db8:	2240      	movs	r2, #64	; 0x40
    2dba:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    2dbe:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    2dc2:	f00a fc8d 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2dc6:	b125      	cbz	r5, 2dd2 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xa6>
    2dc8:	2100      	movs	r1, #0
    2dca:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2dce:	f3af 8000 	nop.w
    2dd2:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    2dd6:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    2dda:	6a09      	ldr	r1, [r1, #32]
    2ddc:	6201      	str	r1, [r0, #32]
    2dde:	b125      	cbz	r5, 2dea <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xbe>
    2de0:	2100      	movs	r1, #0
    2de2:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2de6:	f3af 8000 	nop.w
    2dea:	b125      	cbz	r5, 2df6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xca>
    2dec:	2100      	movs	r1, #0
    2dee:	f240 6065 	movw	r0, #1637	; 0x665
    2df2:	f3af 8000 	nop.w
    2df6:	f000 fe9d 	bl	3b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    2dfa:	4607      	mov	r7, r0
    2dfc:	4633      	mov	r3, r6
    2dfe:	466a      	mov	r2, sp
    2e00:	990c      	ldr	r1, [sp, #48]	; 0x30
    2e02:	f7ff f887 	bl	1f14 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c8>
    2e06:	b125      	cbz	r5, 2e12 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0xe6>
    2e08:	2100      	movs	r1, #0
    2e0a:	f240 606b 	movw	r0, #1643	; 0x66b
    2e0e:	f3af 8000 	nop.w
    2e12:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2e16:	2820      	cmp	r0, #32
    2e18:	d014      	beq.n	2e44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2e1a:	6920      	ldr	r0, [r4, #16]
    2e1c:	9900      	ldr	r1, [sp, #0]
    2e1e:	1a09      	subs	r1, r1, r0
    2e20:	0209      	lsls	r1, r1, #8
    2e22:	17ca      	asrs	r2, r1, #31
    2e24:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    2e28:	1209      	asrs	r1, r1, #8
    2e2a:	d50b      	bpl.n	2e44 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x118>
    2e2c:	e9dd 2100 	ldrd	r2, r1, [sp]
    2e30:	1a89      	subs	r1, r1, r2
    2e32:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    2e36:	4408      	add	r0, r1
    2e38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e3c:	e9cd 2000 	strd	r2, r0, [sp]
    2e40:	f04f 0801 	mov.w	r8, #1
    2e44:	b14d      	cbz	r5, 2e5a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x12e>
    2e46:	2100      	movs	r1, #0
    2e48:	f240 6075 	movw	r0, #1653	; 0x675
    2e4c:	f3af 8000 	nop.w
    2e50:	2100      	movs	r1, #0
    2e52:	f240 607b 	movw	r0, #1659	; 0x67b
    2e56:	f3af 8000 	nop.w
    2e5a:	9800      	ldr	r0, [sp, #0]
    2e5c:	9901      	ldr	r1, [sp, #4]
    2e5e:	1bc0      	subs	r0, r0, r7
    2e60:	1bc9      	subs	r1, r1, r7
    2e62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2e66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2e6a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2e6e:	d205      	bcs.n	2e7c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2e70:	458a      	cmp	sl, r1
    2e72:	d303      	bcc.n	2e7c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x150>
    2e74:	f1b9 0f00 	cmp.w	r9, #0
    2e78:	d10c      	bne.n	2e94 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x168>
    2e7a:	e003      	b.n	2e84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x158>
    2e7c:	f1b9 0f00 	cmp.w	r9, #0
    2e80:	d038      	beq.n	2ef4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1c8>
    2e82:	e094      	b.n	2fae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2e84:	4633      	mov	r3, r6
    2e86:	463a      	mov	r2, r7
    2e88:	4669      	mov	r1, sp
    2e8a:	4854      	ldr	r0, [pc, #336]	; (2fdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2e8c:	f7fe fbbc 	bl	1608 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x94>
    2e90:	ea48 0800 	orr.w	r8, r8, r0
    2e94:	f1b8 0f00 	cmp.w	r8, #0
    2e98:	d022      	beq.n	2ee0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b4>
    2e9a:	9800      	ldr	r0, [sp, #0]
    2e9c:	f00a fab2 	bl	d404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2ea0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2ea4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2ea8:	4b4d      	ldr	r3, [pc, #308]	; (2fe0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2eaa:	4411      	add	r1, r2
    2eac:	1c49      	adds	r1, r1, #1
    2eae:	1842      	adds	r2, r0, r1
    2eb0:	4298      	cmp	r0, r3
    2eb2:	d841      	bhi.n	2f38 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x20c>
    2eb4:	4849      	ldr	r0, [pc, #292]	; (2fdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2eb6:	4281      	cmp	r1, r0
    2eb8:	dc5a      	bgt.n	2f70 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x244>
    2eba:	4240      	negs	r0, r0
    2ebc:	4281      	cmp	r1, r0
    2ebe:	db5f      	blt.n	2f80 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x254>
    2ec0:	1c58      	adds	r0, r3, #1
    2ec2:	4290      	cmp	r0, r2
    2ec4:	bfdc      	itt	le
    2ec6:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    2eca:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    2ece:	dd05      	ble.n	2edc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1b0>
    2ed0:	2a00      	cmp	r2, #0
    2ed2:	bfbc      	itt	lt
    2ed4:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    2ed8:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    2edc:	980c      	ldr	r0, [sp, #48]	; 0x30
    2ede:	60c2      	str	r2, [r0, #12]
    2ee0:	2001      	movs	r0, #1
    2ee2:	900b      	str	r0, [sp, #44]	; 0x2c
    2ee4:	2d00      	cmp	r5, #0
    2ee6:	d062      	beq.n	2fae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2ee8:	2100      	movs	r1, #0
    2eea:	f240 608e 	movw	r0, #1678	; 0x68e
    2eee:	f3af 8000 	nop.w
    2ef2:	e05c      	b.n	2fae <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x282>
    2ef4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2ef8:	aa08      	add	r2, sp, #32
    2efa:	a907      	add	r1, sp, #28
    2efc:	f000 fcbc 	bl	3878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    2f00:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2f04:	2820      	cmp	r0, #32
    2f06:	d01c      	beq.n	2f42 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x216>
    2f08:	6920      	ldr	r0, [r4, #16]
    2f0a:	1d40      	adds	r0, r0, #5
    2f0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f10:	e9dd 2100 	ldrd	r2, r1, [sp]
    2f14:	1a89      	subs	r1, r1, r2
    2f16:	4401      	add	r1, r0
    2f18:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    2f1c:	e9cd 0100 	strd	r0, r1, [sp]
    2f20:	f00a fa70 	bl	d404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    2f24:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    2f28:	f89d 2008 	ldrb.w	r2, [sp, #8]
    2f2c:	4b2c      	ldr	r3, [pc, #176]	; (2fe0 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b4>)
    2f2e:	4411      	add	r1, r2
    2f30:	1c4a      	adds	r2, r1, #1
    2f32:	1881      	adds	r1, r0, r2
    2f34:	4298      	cmp	r0, r3
    2f36:	d918      	bls.n	2f6a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x23e>
    2f38:	f240 6109 	movw	r1, #1545	; 0x609
    2f3c:	2070      	movs	r0, #112	; 0x70
    2f3e:	f001 fcdf 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f42:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    2f46:	f107 0609 	add.w	r6, r7, #9
    2f4a:	b120      	cbz	r0, 2f56 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x22a>
    2f4c:	f001 fc60 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2f50:	2800      	cmp	r0, #0
    2f52:	bf08      	it	eq
    2f54:	3632      	addeq	r6, #50	; 0x32
    2f56:	4823      	ldr	r0, [pc, #140]	; (2fe4 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b8>)
    2f58:	7841      	ldrb	r1, [r0, #1]
    2f5a:	9807      	ldr	r0, [sp, #28]
    2f5c:	4281      	cmp	r1, r0
    2f5e:	bf84      	itt	hi
    2f60:	1a08      	subhi	r0, r1, r0
    2f62:	4406      	addhi	r6, r0
    2f64:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    2f68:	e7d2      	b.n	2f10 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x1e4>
    2f6a:	481c      	ldr	r0, [pc, #112]	; (2fdc <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2b0>)
    2f6c:	4282      	cmp	r2, r0
    2f6e:	dd04      	ble.n	2f7a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x24e>
    2f70:	f240 610a 	movw	r1, #1546	; 0x60a
    2f74:	2070      	movs	r0, #112	; 0x70
    2f76:	f001 fcc3 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f7a:	481b      	ldr	r0, [pc, #108]	; (2fe8 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2bc>)
    2f7c:	4282      	cmp	r2, r0
    2f7e:	da04      	bge.n	2f8a <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x25e>
    2f80:	f240 610b 	movw	r1, #1547	; 0x60b
    2f84:	2070      	movs	r0, #112	; 0x70
    2f86:	f001 fcbb 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f8a:	4818      	ldr	r0, [pc, #96]	; (2fec <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x2c0>)
    2f8c:	4288      	cmp	r0, r1
    2f8e:	bfdc      	itt	le
    2f90:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    2f94:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    2f98:	dd05      	ble.n	2fa6 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x27a>
    2f9a:	2900      	cmp	r1, #0
    2f9c:	bfbc      	itt	lt
    2f9e:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    2fa2:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    2fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
    2fa8:	60c1      	str	r1, [r0, #12]
    2faa:	2001      	movs	r0, #1
    2fac:	900b      	str	r0, [sp, #44]	; 0x2c
    2fae:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    2fb2:	f88d 0010 	strb.w	r0, [sp, #16]
    2fb6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2fba:	2800      	cmp	r0, #0
    2fbc:	f47f aee2 	bne.w	2d84 <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI+0x58>
    2fc0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    2fc2:	b00d      	add	sp, #52	; 0x34
    2fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2fc8:	e000ed04 	.word	0xe000ed04
    2fcc:	003fffff 	.word	0x003fffff
    2fd0:	00000000 	.word	0x00000000
    2fd4:	20000fb4 	.word	0x20000fb4
    2fd8:	20000f34 	.word	0x20000f34
    2fdc:	07a12000 	.word	0x07a12000
    2fe0:	1e847fff 	.word	0x1e847fff
    2fe4:	20000012 	.word	0x20000012
    2fe8:	f85ee000 	.word	0xf85ee000
    2fec:	1e848000 	.word	0x1e848000

00002ff0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    2ff0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2ff4:	4d88      	ldr	r5, [pc, #544]	; (3218 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    2ff6:	b08c      	sub	sp, #48	; 0x30
    2ff8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    2ffc:	2000      	movs	r0, #0
    2ffe:	9009      	str	r0, [sp, #36]	; 0x24
    3000:	2001      	movs	r0, #1
    3002:	4c86      	ldr	r4, [pc, #536]	; (321c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    3004:	f04f 0900 	mov.w	r9, #0
    3008:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    300c:	4680      	mov	r8, r0
    300e:	9008      	str	r0, [sp, #32]
    3010:	b124      	cbz	r4, 301c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    3012:	2100      	movs	r1, #0
    3014:	f240 70e9 	movw	r0, #2025	; 0x7e9
    3018:	f3af 8000 	nop.w
    301c:	9808      	ldr	r0, [sp, #32]
    301e:	2800      	cmp	r0, #0
    3020:	d037      	beq.n	3092 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    3022:	bf00      	nop
    3024:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    3028:	b124      	cbz	r4, 3034 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    302a:	2100      	movs	r1, #0
    302c:	f240 70ee 	movw	r0, #2030	; 0x7ee
    3030:	f3af 8000 	nop.w
    3034:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    3038:	2240      	movs	r2, #64	; 0x40
    303a:	ea28 060a 	bic.w	r6, r8, sl
    303e:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    3042:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    3046:	4683      	mov	fp, r0
    3048:	f00a fb4a 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    304c:	b124      	cbz	r4, 3058 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    304e:	2100      	movs	r1, #0
    3050:	f240 50cd 	movw	r0, #1485	; 0x5cd
    3054:	f3af 8000 	nop.w
    3058:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    305c:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    3060:	9000      	str	r0, [sp, #0]
    3062:	6a09      	ldr	r1, [r1, #32]
    3064:	6201      	str	r1, [r0, #32]
    3066:	b124      	cbz	r4, 3072 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    3068:	2100      	movs	r1, #0
    306a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    306e:	f3af 8000 	nop.w
    3072:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    3076:	f88d 0008 	strb.w	r0, [sp, #8]
    307a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    307e:	b178      	cbz	r0, 30a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    3080:	2c00      	cmp	r4, #0
    3082:	bf1c      	itt	ne
    3084:	2100      	movne	r1, #0
    3086:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    308a:	d0c1      	beq.n	3010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    308c:	f3af 8000 	nop.w
    3090:	e7be      	b.n	3010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    3092:	4863      	ldr	r0, [pc, #396]	; (3220 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    3094:	2800      	cmp	r0, #0
    3096:	bf18      	it	ne
    3098:	f3af 8000 	nopne.w
    309c:	b662      	cpsie	i
    309e:	e7c1      	b.n	3024 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    30a0:	b124      	cbz	r4, 30ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    30a2:	2100      	movs	r1, #0
    30a4:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    30a8:	f3af 8000 	nop.w
    30ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    30ae:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    30b2:	2803      	cmp	r0, #3
    30b4:	d172      	bne.n	319c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    30b6:	f8dd a000 	ldr.w	sl, [sp]
    30ba:	f8cd a018 	str.w	sl, [sp, #24]
    30be:	990c      	ldr	r1, [sp, #48]	; 0x30
    30c0:	f89a 0020 	ldrb.w	r0, [sl, #32]
    30c4:	4288      	cmp	r0, r1
    30c6:	bf14      	ite	ne
    30c8:	f04f 0b00 	movne.w	fp, #0
    30cc:	f04f 0b01 	moveq.w	fp, #1
    30d0:	f10a 0c20 	add.w	ip, sl, #32
    30d4:	4686      	mov	lr, r0
    30d6:	2220      	movs	r2, #32
    30d8:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    30dc:	e003      	b.n	30e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    30de:	4602      	mov	r2, r0
    30e0:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    30e4:	7840      	ldrb	r0, [r0, #1]
    30e6:	4288      	cmp	r0, r1
    30e8:	d002      	beq.n	30f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    30ea:	2820      	cmp	r0, #32
    30ec:	d00a      	beq.n	3104 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    30ee:	e7f6      	b.n	30de <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    30f0:	2820      	cmp	r0, #32
    30f2:	d007      	beq.n	3104 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    30f4:	4586      	cmp	lr, r0
    30f6:	d107      	bne.n	3108 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    30f8:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    30fc:	7840      	ldrb	r0, [r0, #1]
    30fe:	f88c 0000 	strb.w	r0, [ip]
    3102:	e007      	b.n	3114 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    3104:	4648      	mov	r0, r9
    3106:	e00c      	b.n	3122 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    3108:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    310c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    3110:	7840      	ldrb	r0, [r0, #1]
    3112:	7048      	strb	r0, [r1, #1]
    3114:	b124      	cbz	r4, 3120 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    3116:	2100      	movs	r1, #0
    3118:	f240 5037 	movw	r0, #1335	; 0x537
    311c:	f3af 8000 	nop.w
    3120:	4640      	mov	r0, r8
    3122:	ea10 0f0b 	tst.w	r0, fp
    3126:	bf18      	it	ne
    3128:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    312c:	2800      	cmp	r0, #0
    312e:	d052      	beq.n	31d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    3130:	b124      	cbz	r4, 313c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    3132:	2100      	movs	r1, #0
    3134:	f240 70fd 	movw	r0, #2045	; 0x7fd
    3138:	f3af 8000 	nop.w
    313c:	4632      	mov	r2, r6
    313e:	2001      	movs	r0, #1
    3140:	990c      	ldr	r1, [sp, #48]	; 0x30
    3142:	f7ff f88d 	bl	2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>
    3146:	9806      	ldr	r0, [sp, #24]
    3148:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    314c:	f88d 0008 	strb.w	r0, [sp, #8]
    3150:	f89d a008 	ldrb.w	sl, [sp, #8]
    3154:	b124      	cbz	r4, 3160 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    3156:	2100      	movs	r1, #0
    3158:	f640 0008 	movw	r0, #2056	; 0x808
    315c:	f3af 8000 	nop.w
    3160:	4830      	ldr	r0, [pc, #192]	; (3224 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    3162:	2800      	cmp	r0, #0
    3164:	bf18      	it	ne
    3166:	f3af 8000 	nopne.w
    316a:	f3ef 8010 	mrs	r0, PRIMASK
    316e:	b672      	cpsid	i
    3170:	9008      	str	r0, [sp, #32]
    3172:	b124      	cbz	r4, 317e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    3174:	2100      	movs	r1, #0
    3176:	f640 000d 	movw	r0, #2061	; 0x80d
    317a:	f3af 8000 	nop.w
    317e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    3182:	f88d 0008 	strb.w	r0, [sp, #8]
    3186:	f89d 0008 	ldrb.w	r0, [sp, #8]
    318a:	b140      	cbz	r0, 319e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    318c:	2c00      	cmp	r4, #0
    318e:	bf1c      	itt	ne
    3190:	2100      	movne	r1, #0
    3192:	f640 0011 	movwne	r0, #2065	; 0x811
    3196:	f43f af3b 	beq.w	3010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    319a:	e777      	b.n	308c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    319c:	e01b      	b.n	31d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    319e:	f1ba 0f00 	cmp.w	sl, #0
    31a2:	d008      	beq.n	31b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    31a4:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    31a8:	2820      	cmp	r0, #32
    31aa:	d104      	bne.n	31b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    31ac:	4631      	mov	r1, r6
    31ae:	2002      	movs	r0, #2
    31b0:	f7ff f886 	bl	22c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x574>
    31b4:	b308      	cbz	r0, 31fa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    31b6:	b124      	cbz	r4, 31c2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    31b8:	2100      	movs	r1, #0
    31ba:	f640 0025 	movw	r0, #2085	; 0x825
    31be:	f3af 8000 	nop.w
    31c2:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    31c6:	ea28 0000 	bic.w	r0, r8, r0
    31ca:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    31ce:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    31d2:	2001      	movs	r0, #1
    31d4:	9009      	str	r0, [sp, #36]	; 0x24
    31d6:	b124      	cbz	r4, 31e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    31d8:	2100      	movs	r1, #0
    31da:	f640 002e 	movw	r0, #2094	; 0x82e
    31de:	f3af 8000 	nop.w
    31e2:	9808      	ldr	r0, [sp, #32]
    31e4:	b188      	cbz	r0, 320a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    31e6:	b124      	cbz	r4, 31f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    31e8:	2100      	movs	r1, #0
    31ea:	f640 0032 	movw	r0, #2098	; 0x832
    31ee:	f3af 8000 	nop.w
    31f2:	9809      	ldr	r0, [sp, #36]	; 0x24
    31f4:	b00d      	add	sp, #52	; 0x34
    31f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    31fa:	2c00      	cmp	r4, #0
    31fc:	d0f1      	beq.n	31e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    31fe:	2100      	movs	r1, #0
    3200:	f44f 6002 	mov.w	r0, #2080	; 0x820
    3204:	f3af 8000 	nop.w
    3208:	e7e6      	b.n	31d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    320a:	4805      	ldr	r0, [pc, #20]	; (3220 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    320c:	2800      	cmp	r0, #0
    320e:	bf18      	it	ne
    3210:	f3af 8000 	nopne.w
    3214:	b662      	cpsie	i
    3216:	e7e6      	b.n	31e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    3218:	20000fb4 	.word	0x20000fb4
	...

00003228 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    3228:	b510      	push	{r4, lr}
    322a:	2820      	cmp	r0, #32
    322c:	d211      	bcs.n	3252 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    322e:	490e      	ldr	r1, [pc, #56]	; (3268 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    3230:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3234:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    3238:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    323c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    3240:	b13b      	cbz	r3, 3252 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    3242:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    3246:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    324a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    324e:	2a01      	cmp	r2, #1
    3250:	d001      	beq.n	3256 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    3252:	2000      	movs	r0, #0
    3254:	bd10      	pop	{r4, pc}
    3256:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    325a:	4601      	mov	r1, r0
    325c:	2000      	movs	r0, #0
    325e:	f7fe ffff 	bl	2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>
    3262:	2001      	movs	r0, #1
    3264:	bd10      	pop	{r4, pc}
    3266:	0000      	.short	0x0000
    3268:	20000fb4 	.word	0x20000fb4

0000326c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    326c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3270:	4e80      	ldr	r6, [pc, #512]	; (3474 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    3272:	4680      	mov	r8, r0
    3274:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    3278:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    327c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    3280:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3284:	2800      	cmp	r0, #0
    3286:	d068      	beq.n	335a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    3288:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    328c:	4d7a      	ldr	r5, [pc, #488]	; (3478 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    328e:	b125      	cbz	r5, 329a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    3290:	2100      	movs	r1, #0
    3292:	f640 30c1 	movw	r0, #3009	; 0xbc1
    3296:	f3af 8000 	nop.w
    329a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    329e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    32a2:	2801      	cmp	r0, #1
    32a4:	d018      	beq.n	32d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    32a6:	b2c0      	uxtb	r0, r0
    32a8:	2804      	cmp	r0, #4
    32aa:	bf1c      	itt	ne
    32ac:	2805      	cmpne	r0, #5
    32ae:	2806      	cmpne	r0, #6
    32b0:	d058      	beq.n	3364 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    32b2:	b12d      	cbz	r5, 32c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    32b4:	f04f 0100 	mov.w	r1, #0
    32b8:	f640 30cd 	movw	r0, #3021	; 0xbcd
    32bc:	f3af 8000 	nop.w
    32c0:	f001 fc44 	bl	4b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    32c4:	b125      	cbz	r5, 32d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    32c6:	2100      	movs	r1, #0
    32c8:	f640 30d1 	movw	r0, #3025	; 0xbd1
    32cc:	f3af 8000 	nop.w
    32d0:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    32d4:	2801      	cmp	r0, #1
    32d6:	d1e6      	bne.n	32a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    32d8:	2401      	movs	r4, #1
    32da:	b125      	cbz	r5, 32e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    32dc:	2100      	movs	r1, #0
    32de:	f640 30d8 	movw	r0, #3032	; 0xbd8
    32e2:	f3af 8000 	nop.w
    32e6:	2c00      	cmp	r4, #0
    32e8:	d042      	beq.n	3370 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    32ea:	2000      	movs	r0, #0
    32ec:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    32f0:	b125      	cbz	r5, 32fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    32f2:	2100      	movs	r1, #0
    32f4:	f640 30dd 	movw	r0, #3037	; 0xbdd
    32f8:	f3af 8000 	nop.w
    32fc:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    3300:	2001      	movs	r0, #1
    3302:	ea20 090b 	bic.w	r9, r0, fp
    3306:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    330a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    330e:	2240      	movs	r2, #64	; 0x40
    3310:	f00a f9e6 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3314:	b125      	cbz	r5, 3320 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    3316:	2100      	movs	r1, #0
    3318:	f240 50cd 	movw	r0, #1485	; 0x5cd
    331c:	f3af 8000 	nop.w
    3320:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    3324:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    3328:	6a00      	ldr	r0, [r0, #32]
    332a:	f8ca 0020 	str.w	r0, [sl, #32]
    332e:	b125      	cbz	r5, 333a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    3330:	2100      	movs	r1, #0
    3332:	f240 50d1 	movw	r0, #1489	; 0x5d1
    3336:	f3af 8000 	nop.w
    333a:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    333e:	f88d 0000 	strb.w	r0, [sp]
    3342:	f89d 0000 	ldrb.w	r0, [sp]
    3346:	b1d0      	cbz	r0, 337e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    3348:	2d00      	cmp	r5, #0
    334a:	bf1c      	itt	ne
    334c:	2100      	movne	r1, #0
    334e:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    3352:	d0c2      	beq.n	32da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3354:	f3af 8000 	nop.w
    3358:	e7bf      	b.n	32da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    335a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    335e:	2070      	movs	r0, #112	; 0x70
    3360:	f001 face 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3364:	464a      	mov	r2, r9
    3366:	4641      	mov	r1, r8
    3368:	2001      	movs	r0, #1
    336a:	f7fe ff79 	bl	2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>
    336e:	e7a9      	b.n	32c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    3370:	4842      	ldr	r0, [pc, #264]	; (347c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    3372:	2800      	cmp	r0, #0
    3374:	bf18      	it	ne
    3376:	f3af 8000 	nopne.w
    337a:	b662      	cpsie	i
    337c:	e7b5      	b.n	32ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    337e:	b125      	cbz	r5, 338a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    3380:	2100      	movs	r1, #0
    3382:	f640 30e7 	movw	r0, #3047	; 0xbe7
    3386:	f3af 8000 	nop.w
    338a:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    338e:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    3392:	4614      	mov	r4, r2
    3394:	f04f 0b20 	mov.w	fp, #32
    3398:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    339c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    33a0:	e003      	b.n	33aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    33a2:	46a3      	mov	fp, r4
    33a4:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    33a8:	785c      	ldrb	r4, [r3, #1]
    33aa:	4544      	cmp	r4, r8
    33ac:	d002      	beq.n	33b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    33ae:	2c20      	cmp	r4, #32
    33b0:	d02b      	beq.n	340a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    33b2:	e7f6      	b.n	33a2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    33b4:	2c20      	cmp	r4, #32
    33b6:	d028      	beq.n	340a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    33b8:	42a2      	cmp	r2, r4
    33ba:	d104      	bne.n	33c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    33bc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    33c0:	7840      	ldrb	r0, [r0, #1]
    33c2:	7008      	strb	r0, [r1, #0]
    33c4:	e005      	b.n	33d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    33c6:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    33ca:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    33ce:	7849      	ldrb	r1, [r1, #1]
    33d0:	7041      	strb	r1, [r0, #1]
    33d2:	f1ba 0f00 	cmp.w	sl, #0
    33d6:	d011      	beq.n	33fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    33d8:	b125      	cbz	r5, 33e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    33da:	2100      	movs	r1, #0
    33dc:	f240 502f 	movw	r0, #1327	; 0x52f
    33e0:	f3af 8000 	nop.w
    33e4:	f89a 0000 	ldrb.w	r0, [sl]
    33e8:	42a0      	cmp	r0, r4
    33ea:	d107      	bne.n	33fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    33ec:	b125      	cbz	r5, 33f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    33ee:	2100      	movs	r1, #0
    33f0:	f240 5032 	movw	r0, #1330	; 0x532
    33f4:	f3af 8000 	nop.w
    33f8:	f88a b000 	strb.w	fp, [sl]
    33fc:	b15d      	cbz	r5, 3416 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    33fe:	2100      	movs	r1, #0
    3400:	f240 5037 	movw	r0, #1335	; 0x537
    3404:	f3af 8000 	nop.w
    3408:	e000      	b.n	340c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    340a:	b125      	cbz	r5, 3416 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    340c:	2100      	movs	r1, #0
    340e:	f640 30eb 	movw	r0, #3051	; 0xbeb
    3412:	f3af 8000 	nop.w
    3416:	481a      	ldr	r0, [pc, #104]	; (3480 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    3418:	2800      	cmp	r0, #0
    341a:	bf18      	it	ne
    341c:	f3af 8000 	nopne.w
    3420:	f3ef 8410 	mrs	r4, PRIMASK
    3424:	b672      	cpsid	i
    3426:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    342a:	f88d 0000 	strb.w	r0, [sp]
    342e:	f89d 0000 	ldrb.w	r0, [sp]
    3432:	b138      	cbz	r0, 3444 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    3434:	2d00      	cmp	r5, #0
    3436:	bf1c      	itt	ne
    3438:	2100      	movne	r1, #0
    343a:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    343e:	f43f af4c 	beq.w	32da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    3442:	e787      	b.n	3354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    3444:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    3448:	2001      	movs	r0, #1
    344a:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    344e:	b154      	cbz	r4, 3466 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    3450:	2d00      	cmp	r5, #0
    3452:	bf08      	it	eq
    3454:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3458:	2100      	movs	r1, #0
    345a:	f640 30fe 	movw	r0, #3070	; 0xbfe
    345e:	f3af 8000 	nop.w
    3462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3466:	4805      	ldr	r0, [pc, #20]	; (347c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    3468:	2800      	cmp	r0, #0
    346a:	bf18      	it	ne
    346c:	f3af 8000 	nopne.w
    3470:	b662      	cpsie	i
    3472:	e7ed      	b.n	3450 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    3474:	20000fb4 	.word	0x20000fb4
	...

00003484 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    3484:	b570      	push	{r4, r5, r6, lr}
    3486:	460d      	mov	r5, r1
    3488:	4606      	mov	r6, r0
    348a:	f001 f9af 	bl	47ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    348e:	480f      	ldr	r0, [pc, #60]	; (34cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    3490:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    3494:	2400      	movs	r4, #0
    3496:	3880      	subs	r0, #128	; 0x80
    3498:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    349c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    34a0:	b129      	cbz	r1, 34ae <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    34a2:	1c61      	adds	r1, r4, #1
    34a4:	b2cc      	uxtb	r4, r1
    34a6:	2c20      	cmp	r4, #32
    34a8:	d3f8      	bcc.n	349c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    34aa:	2020      	movs	r0, #32
    34ac:	bd70      	pop	{r4, r5, r6, pc}
    34ae:	4808      	ldr	r0, [pc, #32]	; (34d0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    34b0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    34b4:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    34b8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    34bc:	4621      	mov	r1, r4
    34be:	6045      	str	r5, [r0, #4]
    34c0:	2001      	movs	r0, #1
    34c2:	f7fe fecd 	bl	2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>
    34c6:	4620      	mov	r0, r4
    34c8:	bd70      	pop	{r4, r5, r6, pc}
    34ca:	0000      	.short	0x0000
    34cc:	20000fb4 	.word	0x20000fb4
    34d0:	20000c34 	.word	0x20000c34

000034d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    34d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34d8:	b083      	sub	sp, #12
    34da:	f000 fb2b 	bl	3b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    34de:	4605      	mov	r5, r0
    34e0:	f000 fdf4 	bl	40cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    34e4:	4c67      	ldr	r4, [pc, #412]	; (3684 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    34e6:	68a0      	ldr	r0, [r4, #8]
    34e8:	f1b0 3fff 	cmp.w	r0, #4294967295
    34ec:	bf1c      	itt	ne
    34ee:	f04f 30ff 	movne.w	r0, #4294967295
    34f2:	60a0      	strne	r0, [r4, #8]
    34f4:	7fa0      	ldrb	r0, [r4, #30]
    34f6:	f8df b190 	ldr.w	fp, [pc, #400]	; 3688 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    34fa:	b9a8      	cbnz	r0, 3528 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    34fc:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    3500:	1a08      	subs	r0, r1, r0
    3502:	0200      	lsls	r0, r0, #8
    3504:	17c1      	asrs	r1, r0, #31
    3506:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    350a:	1200      	asrs	r0, r0, #8
    350c:	f44f 710c 	mov.w	r1, #560	; 0x230
    3510:	f009 ffa5 	bl	d45e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    3514:	6921      	ldr	r1, [r4, #16]
    3516:	4408      	add	r0, r1
    3518:	1a28      	subs	r0, r5, r0
    351a:	0200      	lsls	r0, r0, #8
    351c:	17c1      	asrs	r1, r0, #31
    351e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    3522:	1200      	asrs	r0, r0, #8
    3524:	0fc0      	lsrs	r0, r0, #31
    3526:	d013      	beq.n	3550 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    3528:	7e60      	ldrb	r0, [r4, #25]
    352a:	b328      	cbz	r0, 3578 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    352c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3530:	f88d 0000 	strb.w	r0, [sp]
    3534:	f89d 0000 	ldrb.w	r0, [sp]
    3538:	b1f0      	cbz	r0, 3578 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    353a:	f000 fc09 	bl	3d50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    353e:	bf00      	nop
    3540:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    3544:	b1f0      	cbz	r0, 3584 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    3546:	f240 4147 	movw	r1, #1095	; 0x447
    354a:	2070      	movs	r0, #112	; 0x70
    354c:	f001 f9d8 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3550:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3554:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    3558:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    355c:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    3560:	6840      	ldr	r0, [r0, #4]
    3562:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    3566:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    356a:	2108      	movs	r1, #8
    356c:	4790      	blx	r2
    356e:	f44f 6186 	mov.w	r1, #1072	; 0x430
    3572:	2070      	movs	r0, #112	; 0x70
    3574:	f001 f9c4 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3578:	1ce8      	adds	r0, r5, #3
    357a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    357e:	f000 fadf 	bl	3b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3582:	e7dd      	b.n	3540 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    3584:	f04f 0a01 	mov.w	sl, #1
    3588:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    358c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    3590:	2820      	cmp	r0, #32
    3592:	d024      	beq.n	35de <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    3594:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    3598:	2020      	movs	r0, #32
    359a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    359e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    35a2:	2600      	movs	r6, #0
    35a4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    35a8:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    35ac:	4837      	ldr	r0, [pc, #220]	; (368c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    35ae:	6026      	str	r6, [r4, #0]
    35b0:	7800      	ldrb	r0, [r0, #0]
    35b2:	2802      	cmp	r0, #2
    35b4:	bf16      	itet	ne
    35b6:	2803      	cmpne	r0, #3
    35b8:	2001      	moveq	r0, #1
    35ba:	2000      	movne	r0, #0
    35bc:	7720      	strb	r0, [r4, #28]
    35be:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    35c2:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    35c6:	f899 0020 	ldrb.w	r0, [r9, #32]
    35ca:	2820      	cmp	r0, #32
    35cc:	d031      	beq.n	3632 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    35ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    35d2:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    35d6:	7d81      	ldrb	r1, [r0, #22]
    35d8:	2901      	cmp	r1, #1
    35da:	d005      	beq.n	35e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    35dc:	e029      	b.n	3632 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    35de:	f240 414a 	movw	r1, #1098	; 0x44a
    35e2:	2070      	movs	r0, #112	; 0x70
    35e4:	f001 f98c 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35e8:	46ab      	mov	fp, r5
    35ea:	f100 0508 	add.w	r5, r0, #8
    35ee:	8a40      	ldrh	r0, [r0, #18]
    35f0:	aa01      	add	r2, sp, #4
    35f2:	4669      	mov	r1, sp
    35f4:	f000 f940 	bl	3878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    35f8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    35fc:	2820      	cmp	r0, #32
    35fe:	d004      	beq.n	360a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    3600:	6920      	ldr	r0, [r4, #16]
    3602:	1d40      	adds	r0, r0, #5
    3604:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3608:	e00b      	b.n	3622 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    360a:	8968      	ldrh	r0, [r5, #10]
    360c:	f10b 0b09 	add.w	fp, fp, #9
    3610:	b128      	cbz	r0, 361e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    3612:	f001 f8fd 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3616:	2800      	cmp	r0, #0
    3618:	bf08      	it	eq
    361a:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    361e:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    3622:	e9d5 2100 	ldrd	r2, r1, [r5]
    3626:	1a89      	subs	r1, r1, r2
    3628:	6028      	str	r0, [r5, #0]
    362a:	4408      	add	r0, r1
    362c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3630:	6068      	str	r0, [r5, #4]
    3632:	4639      	mov	r1, r7
    3634:	2001      	movs	r0, #1
    3636:	f7fe fe43 	bl	22c0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x574>
    363a:	2800      	cmp	r0, #0
    363c:	d0f9      	beq.n	3632 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    363e:	4814      	ldr	r0, [pc, #80]	; (3690 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    3640:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    3644:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    3648:	2802      	cmp	r0, #2
    364a:	d104      	bne.n	3656 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    364c:	463a      	mov	r2, r7
    364e:	4641      	mov	r1, r8
    3650:	2006      	movs	r0, #6
    3652:	f7fe fe05 	bl	2260 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x514>
    3656:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    365a:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    365e:	2820      	cmp	r0, #32
    3660:	d003      	beq.n	366a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    3662:	480c      	ldr	r0, [pc, #48]	; (3694 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    3664:	7840      	ldrb	r0, [r0, #1]
    3666:	f001 fa1b 	bl	4aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    366a:	7f20      	ldrb	r0, [r4, #28]
    366c:	2800      	cmp	r0, #0
    366e:	bf04      	itt	eq
    3670:	b003      	addeq	sp, #12
    3672:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3676:	f000 fd73 	bl	4160 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    367a:	7726      	strb	r6, [r4, #28]
    367c:	7766      	strb	r6, [r4, #29]
    367e:	b003      	add	sp, #12
    3680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3684:	20000fb4 	.word	0x20000fb4
    3688:	20000c34 	.word	0x20000c34
    368c:	20000012 	.word	0x20000012
    3690:	20000f34 	.word	0x20000f34
    3694:	20000010 	.word	0x20000010

00003698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    3698:	b510      	push	{r4, lr}
    369a:	4c32      	ldr	r4, [pc, #200]	; (3764 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    369c:	b082      	sub	sp, #8
    369e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    36a2:	2920      	cmp	r1, #32
    36a4:	d008      	beq.n	36b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    36a6:	68a1      	ldr	r1, [r4, #8]
    36a8:	f1b1 3fff 	cmp.w	r1, #4294967295
    36ac:	d009      	beq.n	36c2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    36ae:	f640 21e9 	movw	r1, #2793	; 0xae9
    36b2:	2070      	movs	r0, #112	; 0x70
    36b4:	f001 f924 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36b8:	f640 21e8 	movw	r1, #2792	; 0xae8
    36bc:	2070      	movs	r0, #112	; 0x70
    36be:	f001 f91f 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36c2:	6862      	ldr	r2, [r4, #4]
    36c4:	4601      	mov	r1, r0
    36c6:	4b28      	ldr	r3, [pc, #160]	; (3768 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    36c8:	1850      	adds	r0, r2, r1
    36ca:	429a      	cmp	r2, r3
    36cc:	d904      	bls.n	36d8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    36ce:	f240 6109 	movw	r1, #1545	; 0x609
    36d2:	2070      	movs	r0, #112	; 0x70
    36d4:	f001 f914 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36d8:	4a24      	ldr	r2, [pc, #144]	; (376c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    36da:	4291      	cmp	r1, r2
    36dc:	dd04      	ble.n	36e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    36de:	f240 610a 	movw	r1, #1546	; 0x60a
    36e2:	2070      	movs	r0, #112	; 0x70
    36e4:	f001 f90c 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36e8:	4a21      	ldr	r2, [pc, #132]	; (3770 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    36ea:	4291      	cmp	r1, r2
    36ec:	da04      	bge.n	36f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    36ee:	f240 610b 	movw	r1, #1547	; 0x60b
    36f2:	2070      	movs	r0, #112	; 0x70
    36f4:	f001 f904 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    36f8:	491e      	ldr	r1, [pc, #120]	; (3774 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    36fa:	4281      	cmp	r1, r0
    36fc:	bfdc      	itt	le
    36fe:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    3702:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    3706:	dd05      	ble.n	3714 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    3708:	2800      	cmp	r0, #0
    370a:	bfbc      	itt	lt
    370c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    3710:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    3714:	aa01      	add	r2, sp, #4
    3716:	4669      	mov	r1, sp
    3718:	f000 f8ae 	bl	3878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    371c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    3720:	280f      	cmp	r0, #15
    3722:	bf8c      	ite	hi
    3724:	2001      	movhi	r0, #1
    3726:	2000      	movls	r0, #0
    3728:	9900      	ldr	r1, [sp, #0]
    372a:	4408      	add	r0, r1
    372c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    3730:	60a1      	str	r1, [r4, #8]
    3732:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    3736:	f88d 0000 	strb.w	r0, [sp]
    373a:	f89d 0000 	ldrb.w	r0, [sp]
    373e:	2800      	cmp	r0, #0
    3740:	bf04      	itt	eq
    3742:	b002      	addeq	sp, #8
    3744:	bd10      	popeq	{r4, pc}
    3746:	2301      	movs	r3, #1
    3748:	2203      	movs	r2, #3
    374a:	2005      	movs	r0, #5
    374c:	f000 fb7c 	bl	3e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    3750:	2800      	cmp	r0, #0
    3752:	bf1c      	itt	ne
    3754:	b002      	addne	sp, #8
    3756:	bd10      	popne	{r4, pc}
    3758:	f640 21f1 	movw	r1, #2801	; 0xaf1
    375c:	2070      	movs	r0, #112	; 0x70
    375e:	f001 f8cf 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3762:	0000      	.short	0x0000
    3764:	20000fb4 	.word	0x20000fb4
    3768:	1e847fff 	.word	0x1e847fff
    376c:	07a12000 	.word	0x07a12000
    3770:	f85ee000 	.word	0xf85ee000
    3774:	1e848000 	.word	0x1e848000

00003778 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    3778:	b570      	push	{r4, r5, r6, lr}
    377a:	4c1e      	ldr	r4, [pc, #120]	; (37f4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    377c:	2120      	movs	r1, #32
    377e:	f884 1020 	strb.w	r1, [r4, #32]
    3782:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    3786:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    378a:	2000      	movs	r0, #0
    378c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    3790:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    3794:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    3798:	1e42      	subs	r2, r0, #1
    379a:	60a2      	str	r2, [r4, #8]
    379c:	6020      	str	r0, [r4, #0]
    379e:	77a0      	strb	r0, [r4, #30]
    37a0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    37a4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    37a8:	7720      	strb	r0, [r4, #28]
    37aa:	7760      	strb	r0, [r4, #29]
    37ac:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    37b0:	4911      	ldr	r1, [pc, #68]	; (37f8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    37b2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    37b6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    37ba:	7008      	strb	r0, [r1, #0]
    37bc:	7048      	strb	r0, [r1, #1]
    37be:	8048      	strh	r0, [r1, #2]
    37c0:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    37c4:	2210      	movs	r2, #16
    37c6:	7088      	strb	r0, [r1, #2]
    37c8:	f801 0f04 	strb.w	r0, [r1, #4]!
    37cc:	1e52      	subs	r2, r2, #1
    37ce:	d1fa      	bne.n	37c6 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    37d0:	4d0a      	ldr	r5, [pc, #40]	; (37fc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    37d2:	2601      	movs	r6, #1
    37d4:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    37d8:	20ff      	movs	r0, #255	; 0xff
    37da:	7028      	strb	r0, [r5, #0]
    37dc:	4808      	ldr	r0, [pc, #32]	; (3800 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    37de:	f001 f941 	bl	4a64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    37e2:	7068      	strb	r0, [r5, #1]
    37e4:	f001 f99c 	bl	4b20 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    37e8:	60a8      	str	r0, [r5, #8]
    37ea:	f000 fce7 	bl	41bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    37ee:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    37f2:	bd70      	pop	{r4, r5, r6, pc}
    37f4:	20000fb4 	.word	0x20000fb4
    37f8:	20000012 	.word	0x20000012
    37fc:	20000010 	.word	0x20000010
    3800:	0000211d 	.word	0x0000211d

00003804 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    3804:	b570      	push	{r4, r5, r6, lr}
    3806:	4605      	mov	r5, r0
    3808:	2001      	movs	r0, #1
    380a:	fa00 f405 	lsl.w	r4, r0, r5
    380e:	460e      	mov	r6, r1
    3810:	2a00      	cmp	r2, #0
    3812:	bf08      	it	eq
    3814:	4808      	ldreq	r0, [pc, #32]	; (3838 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    3816:	d00c      	beq.n	3832 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    3818:	2000      	movs	r0, #0
    381a:	f000 fcb5 	bl	4188 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    381e:	00e9      	lsls	r1, r5, #3
    3820:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    3824:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    3828:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    382c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    3830:	4802      	ldr	r0, [pc, #8]	; (383c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    3832:	6004      	str	r4, [r0, #0]
    3834:	bd70      	pop	{r4, r5, r6, pc}
    3836:	0000      	.short	0x0000
    3838:	4001f508 	.word	0x4001f508
    383c:	4001f504 	.word	0x4001f504

00003840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    3840:	0b41      	lsrs	r1, r0, #13
    3842:	f248 6237 	movw	r2, #34359	; 0x8637
    3846:	4351      	muls	r1, r2
    3848:	0c0a      	lsrs	r2, r1, #16
    384a:	4b09      	ldr	r3, [pc, #36]	; (3870 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    384c:	0251      	lsls	r1, r2, #9
    384e:	fb02 0203 	mla	r2, r2, r3, r0
    3852:	4808      	ldr	r0, [pc, #32]	; (3874 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    3854:	4350      	muls	r0, r2
    3856:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    385a:	306e      	adds	r0, #110	; 0x6e
    385c:	0d40      	lsrs	r0, r0, #21
    385e:	425b      	negs	r3, r3
    3860:	fb10 f303 	smulbb	r3, r0, r3
    3864:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    3868:	bf88      	it	hi
    386a:	1c49      	addhi	r1, r1, #1
    386c:	4408      	add	r0, r1
    386e:	4770      	bx	lr
    3870:	ffffc2f7 	.word	0xffffc2f7
    3874:	00010c6f 	.word	0x00010c6f

00003878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    3878:	0b43      	lsrs	r3, r0, #13
    387a:	f248 6c37 	movw	ip, #34359	; 0x8637
    387e:	fb03 f30c 	mul.w	r3, r3, ip
    3882:	b430      	push	{r4, r5}
    3884:	0c1b      	lsrs	r3, r3, #16
    3886:	f8df c044 	ldr.w	ip, [pc, #68]	; 38cc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    388a:	025c      	lsls	r4, r3, #9
    388c:	fb03 030c 	mla	r3, r3, ip, r0
    3890:	480f      	ldr	r0, [pc, #60]	; (38d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    3892:	4358      	muls	r0, r3
    3894:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    3898:	eb04 000c 	add.w	r0, r4, ip
    389c:	f643 5409 	movw	r4, #15625	; 0x3d09
    38a0:	fb1c f404 	smulbb	r4, ip, r4
    38a4:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    38a8:	f643 5508 	movw	r5, #15624	; 0x3d08
    38ac:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    38b0:	442c      	add	r4, r5
    38b2:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    38b6:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    38ba:	bf84      	itt	hi
    38bc:	f04f 0c00 	movhi.w	ip, #0
    38c0:	1c40      	addhi	r0, r0, #1
    38c2:	6008      	str	r0, [r1, #0]
    38c4:	f882 c000 	strb.w	ip, [r2]
    38c8:	bc30      	pop	{r4, r5}
    38ca:	4770      	bx	lr
    38cc:	ffffc2f7 	.word	0xffffc2f7
    38d0:	00010c6f 	.word	0x00010c6f

000038d4 <MPSL_IRQ_RTC0_Handler>:
    38d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    38d8:	4c36      	ldr	r4, [pc, #216]	; (39b4 <MPSL_IRQ_RTC0_Handler+0xe0>)
    38da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    38de:	f44f 6600 	mov.w	r6, #2048	; 0x800
    38e2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    38e6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    38ea:	f04f 0500 	mov.w	r5, #0
    38ee:	d019      	beq.n	3924 <MPSL_IRQ_RTC0_Handler+0x50>
    38f0:	4831      	ldr	r0, [pc, #196]	; (39b8 <MPSL_IRQ_RTC0_Handler+0xe4>)
    38f2:	6800      	ldr	r0, [r0, #0]
    38f4:	b1b0      	cbz	r0, 3924 <MPSL_IRQ_RTC0_Handler+0x50>
    38f6:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    38fa:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    38fe:	482f      	ldr	r0, [pc, #188]	; (39bc <MPSL_IRQ_RTC0_Handler+0xe8>)
    3900:	6800      	ldr	r0, [r0, #0]
    3902:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    3906:	1a40      	subs	r0, r0, r1
    3908:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    390c:	2802      	cmp	r0, #2
    390e:	d302      	bcc.n	3916 <MPSL_IRQ_RTC0_Handler+0x42>
    3910:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3914:	d306      	bcc.n	3924 <MPSL_IRQ_RTC0_Handler+0x50>
    3916:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    391a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    391e:	2004      	movs	r0, #4
    3920:	f7fe ff50 	bl	27c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3924:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3928:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    392c:	d019      	beq.n	3962 <MPSL_IRQ_RTC0_Handler+0x8e>
    392e:	4824      	ldr	r0, [pc, #144]	; (39c0 <MPSL_IRQ_RTC0_Handler+0xec>)
    3930:	6800      	ldr	r0, [r0, #0]
    3932:	b1b0      	cbz	r0, 3962 <MPSL_IRQ_RTC0_Handler+0x8e>
    3934:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    3938:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    393c:	4821      	ldr	r0, [pc, #132]	; (39c4 <MPSL_IRQ_RTC0_Handler+0xf0>)
    393e:	6800      	ldr	r0, [r0, #0]
    3940:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    3944:	1a40      	subs	r0, r0, r1
    3946:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    394a:	2802      	cmp	r0, #2
    394c:	d302      	bcc.n	3954 <MPSL_IRQ_RTC0_Handler+0x80>
    394e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3952:	d306      	bcc.n	3962 <MPSL_IRQ_RTC0_Handler+0x8e>
    3954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    3958:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    395c:	2005      	movs	r0, #5
    395e:	f7fe ff31 	bl	27c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3962:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3966:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    396a:	bf08      	it	eq
    396c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3970:	4815      	ldr	r0, [pc, #84]	; (39c8 <MPSL_IRQ_RTC0_Handler+0xf4>)
    3972:	6800      	ldr	r0, [r0, #0]
    3974:	2800      	cmp	r0, #0
    3976:	bf08      	it	eq
    3978:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    397c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    3980:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    3984:	4811      	ldr	r0, [pc, #68]	; (39cc <MPSL_IRQ_RTC0_Handler+0xf8>)
    3986:	6800      	ldr	r0, [r0, #0]
    3988:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    398c:	1a40      	subs	r0, r0, r1
    398e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3992:	2802      	cmp	r0, #2
    3994:	d304      	bcc.n	39a0 <MPSL_IRQ_RTC0_Handler+0xcc>
    3996:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    399a:	bf38      	it	cc
    399c:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    39a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    39a4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    39a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    39ac:	2006      	movs	r0, #6
    39ae:	f7fe bf09 	b.w	27c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    39b2:	0000      	.short	0x0000
    39b4:	4000b000 	.word	0x4000b000
    39b8:	4000b140 	.word	0x4000b140
    39bc:	4000b540 	.word	0x4000b540
    39c0:	4000b144 	.word	0x4000b144
    39c4:	4000b544 	.word	0x4000b544
    39c8:	4000b148 	.word	0x4000b148
    39cc:	4000b548 	.word	0x4000b548

000039d0 <MPSL_IRQ_TIMER0_Handler>:
    39d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39d4:	4d38      	ldr	r5, [pc, #224]	; (3ab8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    39d6:	7828      	ldrb	r0, [r5, #0]
    39d8:	2804      	cmp	r0, #4
    39da:	d068      	beq.n	3aae <MPSL_IRQ_TIMER0_Handler+0xde>
    39dc:	1ce8      	adds	r0, r5, #3
    39de:	2201      	movs	r2, #1
    39e0:	7801      	ldrb	r1, [r0, #0]
    39e2:	b159      	cbz	r1, 39fc <MPSL_IRQ_TIMER0_Handler+0x2c>
    39e4:	2901      	cmp	r1, #1
    39e6:	bf08      	it	eq
    39e8:	706a      	strbeq	r2, [r5, #1]
    39ea:	d002      	beq.n	39f2 <MPSL_IRQ_TIMER0_Handler+0x22>
    39ec:	7869      	ldrb	r1, [r5, #1]
    39ee:	2900      	cmp	r1, #0
    39f0:	d058      	beq.n	3aa4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    39f2:	2102      	movs	r1, #2
    39f4:	7001      	strb	r1, [r0, #0]
    39f6:	7840      	ldrb	r0, [r0, #1]
    39f8:	f000 fafa 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    39fc:	4c2f      	ldr	r4, [pc, #188]	; (3abc <MPSL_IRQ_TIMER0_Handler+0xec>)
    39fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3a02:	f04f 0800 	mov.w	r8, #0
    3a06:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    3a0a:	f44f 7780 	mov.w	r7, #256	; 0x100
    3a0e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    3a12:	d00a      	beq.n	3a2a <MPSL_IRQ_TIMER0_Handler+0x5a>
    3a14:	482a      	ldr	r0, [pc, #168]	; (3ac0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    3a16:	6800      	ldr	r0, [r0, #0]
    3a18:	b138      	cbz	r0, 3a2a <MPSL_IRQ_TIMER0_Handler+0x5a>
    3a1a:	2003      	movs	r0, #3
    3a1c:	f000 fae8 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3a20:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3a24:	2003      	movs	r0, #3
    3a26:	f7fe fecd 	bl	27c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3a2a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3a2e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    3a32:	d00a      	beq.n	3a4a <MPSL_IRQ_TIMER0_Handler+0x7a>
    3a34:	4823      	ldr	r0, [pc, #140]	; (3ac4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    3a36:	6800      	ldr	r0, [r0, #0]
    3a38:	b138      	cbz	r0, 3a4a <MPSL_IRQ_TIMER0_Handler+0x7a>
    3a3a:	2002      	movs	r0, #2
    3a3c:	f000 fad8 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3a40:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3a44:	2002      	movs	r0, #2
    3a46:	f7fe febd 	bl	27c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3a4a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3a4e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    3a52:	d00a      	beq.n	3a6a <MPSL_IRQ_TIMER0_Handler+0x9a>
    3a54:	481c      	ldr	r0, [pc, #112]	; (3ac8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    3a56:	6800      	ldr	r0, [r0, #0]
    3a58:	b138      	cbz	r0, 3a6a <MPSL_IRQ_TIMER0_Handler+0x9a>
    3a5a:	2001      	movs	r0, #1
    3a5c:	f000 fac8 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3a60:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3a64:	2001      	movs	r0, #1
    3a66:	f7fe fead 	bl	27c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3a6a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    3a6e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    3a72:	bf08      	it	eq
    3a74:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a78:	4814      	ldr	r0, [pc, #80]	; (3acc <MPSL_IRQ_TIMER0_Handler+0xfc>)
    3a7a:	6800      	ldr	r0, [r0, #0]
    3a7c:	2800      	cmp	r0, #0
    3a7e:	bf08      	it	eq
    3a80:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a84:	2000      	movs	r0, #0
    3a86:	f000 fab3 	bl	3ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    3a8a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    3a8e:	2004      	movs	r0, #4
    3a90:	7028      	strb	r0, [r5, #0]
    3a92:	f8c5 8008 	str.w	r8, [r5, #8]
    3a96:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    3a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3a9e:	2000      	movs	r0, #0
    3aa0:	f7fe be90 	b.w	27c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3aa4:	f240 316a 	movw	r1, #874	; 0x36a
    3aa8:	206c      	movs	r0, #108	; 0x6c
    3aaa:	f000 ff29 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3ab2:	2007      	movs	r0, #7
    3ab4:	f7fe be86 	b.w	27c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    3ab8:	2000001c 	.word	0x2000001c
    3abc:	40008000 	.word	0x40008000
    3ac0:	4000814c 	.word	0x4000814c
    3ac4:	40008148 	.word	0x40008148
    3ac8:	40008144 	.word	0x40008144
    3acc:	40008140 	.word	0x40008140
    3ad0:	2201      	movs	r2, #1
    3ad2:	0211      	lsls	r1, r2, #8
    3ad4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3ad8:	2000      	movs	r0, #0
    3ada:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    3ade:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    3ae2:	f3bf 8f4f 	dsb	sy
    3ae6:	f3bf 8f6f 	isb	sy
    3aea:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    3aee:	490e      	ldr	r1, [pc, #56]	; (3b28 <MPSL_IRQ_TIMER0_Handler+0x158>)
    3af0:	f841 2f04 	str.w	r2, [r1, #4]!
    3af4:	1e43      	subs	r3, r0, #1
    3af6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    3afa:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    3afe:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    3b02:	4b0a      	ldr	r3, [pc, #40]	; (3b2c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    3b04:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3b08:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3b0c:	1d1b      	adds	r3, r3, #4
    3b0e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3b12:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3b16:	1d1b      	adds	r3, r3, #4
    3b18:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    3b1c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3b20:	60ca      	str	r2, [r1, #12]
    3b22:	4903      	ldr	r1, [pc, #12]	; (3b30 <MPSL_IRQ_TIMER0_Handler+0x160>)
    3b24:	7048      	strb	r0, [r1, #1]
    3b26:	4770      	bx	lr
    3b28:	40008000 	.word	0x40008000
    3b2c:	40008004 	.word	0x40008004
    3b30:	2000001c 	.word	0x2000001c

00003b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    3b34:	4801      	ldr	r0, [pc, #4]	; (3b3c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    3b36:	6800      	ldr	r0, [r0, #0]
    3b38:	4770      	bx	lr
    3b3a:	0000      	.short	0x0000
    3b3c:	4000b504 	.word	0x4000b504

00003b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    3b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3b44:	4e47      	ldr	r6, [pc, #284]	; (3c64 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    3b46:	4605      	mov	r5, r0
    3b48:	1ef7      	subs	r7, r6, #3
    3b4a:	7832      	ldrb	r2, [r6, #0]
    3b4c:	68f9      	ldr	r1, [r7, #12]
    3b4e:	2a01      	cmp	r2, #1
    3b50:	bf04      	itt	eq
    3b52:	42a9      	cmpeq	r1, r5
    3b54:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b58:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    3b5c:	4b42      	ldr	r3, [pc, #264]	; (3c68 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    3b5e:	6018      	str	r0, [r3, #0]
    3b60:	4842      	ldr	r0, [pc, #264]	; (3c6c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    3b62:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    3b66:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    3b6a:	f100 0304 	add.w	r3, r0, #4
    3b6e:	f04f 0400 	mov.w	r4, #0
    3b72:	2a00      	cmp	r2, #0
    3b74:	d061      	beq.n	3c3a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    3b76:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3b7a:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    3b7e:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    3b82:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3b86:	4b3a      	ldr	r3, [pc, #232]	; (3c70 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    3b88:	681b      	ldr	r3, [r3, #0]
    3b8a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    3b8e:	f04f 0801 	mov.w	r8, #1
    3b92:	2b00      	cmp	r3, #0
    3b94:	bf04      	itt	eq
    3b96:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    3b9a:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    3b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3ba2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    3ba6:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    3baa:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3bae:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    3bb2:	1aeb      	subs	r3, r5, r3
    3bb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3bb8:	2b02      	cmp	r3, #2
    3bba:	d34b      	bcc.n	3c54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    3bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3bc0:	d248      	bcs.n	3c54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    3bc2:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    3bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3bca:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    3bce:	b132      	cbz	r2, 3bde <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    3bd0:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3bd4:	1a8a      	subs	r2, r1, r2
    3bd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    3bda:	2a02      	cmp	r2, #2
    3bdc:	d3f8      	bcc.n	3bd0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    3bde:	f8c7 8008 	str.w	r8, [r7, #8]
    3be2:	703c      	strb	r4, [r7, #0]
    3be4:	f7ff ff74 	bl	3ad0 <MPSL_IRQ_TIMER0_Handler+0x100>
    3be8:	4822      	ldr	r0, [pc, #136]	; (3c74 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    3bea:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    3bee:	f364 0101 	bfi	r1, r4, #0, #2
    3bf2:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    3bf6:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    3bfa:	2102      	movs	r1, #2
    3bfc:	f361 0201 	bfi	r2, r1, #0, #2
    3c00:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    3c04:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    3c08:	2104      	movs	r1, #4
    3c0a:	f361 0203 	bfi	r2, r1, #0, #4
    3c0e:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    3c12:	f8c0 800c 	str.w	r8, [r0, #12]
    3c16:	68b9      	ldr	r1, [r7, #8]
    3c18:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3c1c:	1580      	asrs	r0, r0, #22
    3c1e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    3c22:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    3c26:	4914      	ldr	r1, [pc, #80]	; (3c78 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    3c28:	05c0      	lsls	r0, r0, #23
    3c2a:	6008      	str	r0, [r1, #0]
    3c2c:	2004      	movs	r0, #4
    3c2e:	60fd      	str	r5, [r7, #12]
    3c30:	7070      	strb	r0, [r6, #1]
    3c32:	f886 8000 	strb.w	r8, [r6]
    3c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3c3a:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3c3e:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    3c42:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    3c46:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3c4a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    3c4e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    3c52:	e798      	b.n	3b86 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    3c54:	2100      	movs	r1, #0
    3c56:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3c5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    3c5e:	206c      	movs	r0, #108	; 0x6c
    3c60:	f000 fe4e 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3c64:	2000001f 	.word	0x2000001f
    3c68:	4001f508 	.word	0x4001f508
    3c6c:	4000b000 	.word	0x4000b000
    3c70:	4000b148 	.word	0x4000b148
    3c74:	40008000 	.word	0x40008000
    3c78:	4001f504 	.word	0x4001f504

00003c7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    3c7c:	b570      	push	{r4, r5, r6, lr}
    3c7e:	4c2c      	ldr	r4, [pc, #176]	; (3d30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    3c80:	68e2      	ldr	r2, [r4, #12]
    3c82:	4282      	cmp	r2, r0
    3c84:	bf14      	ite	ne
    3c86:	2101      	movne	r1, #1
    3c88:	2100      	moveq	r1, #0
    3c8a:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 3d34 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    3c8e:	f89c 5000 	ldrb.w	r5, [ip]
    3c92:	2d02      	cmp	r5, #2
    3c94:	d002      	beq.n	3c9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    3c96:	2900      	cmp	r1, #0
    3c98:	d037      	beq.n	3d0a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    3c9a:	e002      	b.n	3ca2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    3c9c:	2900      	cmp	r1, #0
    3c9e:	bf08      	it	eq
    3ca0:	bd70      	popeq	{r4, r5, r6, pc}
    3ca2:	7861      	ldrb	r1, [r4, #1]
    3ca4:	b381      	cbz	r1, 3d08 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    3ca6:	4b24      	ldr	r3, [pc, #144]	; (3d38 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    3ca8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    3cac:	6019      	str	r1, [r3, #0]
    3cae:	138b      	asrs	r3, r1, #14
    3cb0:	4922      	ldr	r1, [pc, #136]	; (3d3c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    3cb2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    3cb6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3cba:	2300      	movs	r3, #0
    3cbc:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    3cc0:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    3cc4:	1ac3      	subs	r3, r0, r3
    3cc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3cca:	2b02      	cmp	r3, #2
    3ccc:	d327      	bcc.n	3d1e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    3cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3cd2:	d224      	bcs.n	3d1e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    3cd4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3cdc:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    3ce0:	b13d      	cbz	r5, 3cf2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    3ce2:	bf00      	nop
    3ce4:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    3ce8:	1ad3      	subs	r3, r2, r3
    3cea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    3cee:	2b02      	cmp	r3, #2
    3cf0:	d3f8      	bcc.n	3ce4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    3cf2:	4b13      	ldr	r3, [pc, #76]	; (3d40 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    3cf4:	2102      	movs	r1, #2
    3cf6:	074a      	lsls	r2, r1, #29
    3cf8:	601a      	str	r2, [r3, #0]
    3cfa:	60e0      	str	r0, [r4, #12]
    3cfc:	2004      	movs	r0, #4
    3cfe:	f88c 0001 	strb.w	r0, [ip, #1]
    3d02:	f88c 1000 	strb.w	r1, [ip]
    3d06:	bd70      	pop	{r4, r5, r6, pc}
    3d08:	e004      	b.n	3d14 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    3d0a:	f240 2102 	movw	r1, #514	; 0x202
    3d0e:	206c      	movs	r0, #108	; 0x6c
    3d10:	f000 fdf6 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d14:	f240 2106 	movw	r1, #518	; 0x206
    3d18:	206c      	movs	r0, #108	; 0x6c
    3d1a:	f000 fdf1 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d1e:	2000      	movs	r0, #0
    3d20:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3d24:	f240 2112 	movw	r1, #530	; 0x212
    3d28:	206c      	movs	r0, #108	; 0x6c
    3d2a:	f000 fde9 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3d2e:	0000      	.short	0x0000
    3d30:	2000001c 	.word	0x2000001c
    3d34:	2000001f 	.word	0x2000001f
    3d38:	4001f508 	.word	0x4001f508
    3d3c:	4000b000 	.word	0x4000b000
    3d40:	4001f504 	.word	0x4001f504

00003d44 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    3d44:	4801      	ldr	r0, [pc, #4]	; (3d4c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    3d46:	68c0      	ldr	r0, [r0, #12]
    3d48:	4770      	bx	lr
    3d4a:	0000      	.short	0x0000
    3d4c:	2000001c 	.word	0x2000001c

00003d50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    3d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3d54:	4936      	ldr	r1, [pc, #216]	; (3e30 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    3d56:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    3d5a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    3d5e:	4d35      	ldr	r5, [pc, #212]	; (3e34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    3d60:	1d0b      	adds	r3, r1, #4
    3d62:	2200      	movs	r2, #0
    3d64:	7828      	ldrb	r0, [r5, #0]
    3d66:	b168      	cbz	r0, 3d84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    3d68:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    3d6c:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3d70:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3d74:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3d78:	4b2f      	ldr	r3, [pc, #188]	; (3e38 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    3d7a:	681b      	ldr	r3, [r3, #0]
    3d7c:	f04f 0c01 	mov.w	ip, #1
    3d80:	b99b      	cbnz	r3, 3daa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    3d82:	e00c      	b.n	3d9e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    3d84:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    3d88:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    3d8c:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    3d90:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    3d94:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3d98:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    3d9c:	e7ec      	b.n	3d78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    3d9e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    3da2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    3da6:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    3daa:	2802      	cmp	r0, #2
    3dac:	d004      	beq.n	3db8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    3dae:	f240 211e 	movw	r1, #542	; 0x21e
    3db2:	206c      	movs	r0, #108	; 0x6c
    3db4:	f000 fda4 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3db8:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3dbc:	4c1f      	ldr	r4, [pc, #124]	; (3e3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    3dbe:	1cc0      	adds	r0, r0, #3
    3dc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3dc4:	68e3      	ldr	r3, [r4, #12]
    3dc6:	4e1e      	ldr	r6, [pc, #120]	; (3e40 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    3dc8:	4298      	cmp	r0, r3
    3dca:	d00c      	beq.n	3de6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3dcc:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    3dd0:	1bdf      	subs	r7, r3, r7
    3dd2:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    3dd6:	2f04      	cmp	r7, #4
    3dd8:	d305      	bcc.n	3de6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3dda:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    3dde:	d202      	bcs.n	3de6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    3de0:	f7ff feae 	bl	3b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    3de4:	e01f      	b.n	3e26 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    3de6:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    3dea:	1a18      	subs	r0, r3, r0
    3dec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3df0:	2802      	cmp	r0, #2
    3df2:	d315      	bcc.n	3e20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3df4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    3df8:	d212      	bcs.n	3e20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    3dfa:	4912      	ldr	r1, [pc, #72]	; (3e44 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    3dfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3e00:	6008      	str	r0, [r1, #0]
    3e02:	f8c4 c008 	str.w	ip, [r4, #8]
    3e06:	7022      	strb	r2, [r4, #0]
    3e08:	f8c6 c004 	str.w	ip, [r6, #4]
    3e0c:	f8c6 c00c 	str.w	ip, [r6, #12]
    3e10:	0040      	lsls	r0, r0, #1
    3e12:	1f09      	subs	r1, r1, #4
    3e14:	6008      	str	r0, [r1, #0]
    3e16:	2004      	movs	r0, #4
    3e18:	7068      	strb	r0, [r5, #1]
    3e1a:	f885 c000 	strb.w	ip, [r5]
    3e1e:	e002      	b.n	3e26 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    3e20:	f8c4 c008 	str.w	ip, [r4, #8]
    3e24:	7022      	strb	r2, [r4, #0]
    3e26:	68a0      	ldr	r0, [r4, #8]
    3e28:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    3e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3e30:	4000b000 	.word	0x4000b000
    3e34:	2000001f 	.word	0x2000001f
    3e38:	4000b148 	.word	0x4000b148
    3e3c:	2000001c 	.word	0x2000001c
    3e40:	40008000 	.word	0x40008000
    3e44:	4001f508 	.word	0x4001f508

00003e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    3e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3e4c:	f8df c190 	ldr.w	ip, [pc, #400]	; 3fe0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    3e50:	2600      	movs	r6, #0
    3e52:	2701      	movs	r7, #1
    3e54:	f89c 4000 	ldrb.w	r4, [ip]
    3e58:	f89c c001 	ldrb.w	ip, [ip, #1]
    3e5c:	f44f 75a0 	mov.w	r5, #320	; 0x140
    3e60:	2807      	cmp	r0, #7
    3e62:	d27b      	bcs.n	3f5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    3e64:	e8df f000 	tbb	[pc, r0]
    3e68:	04040404 	.word	0x04040404
    3e6c:	006c6c6c 	.word	0x006c6c6c
    3e70:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3fe4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    3e74:	f8d8 900c 	ldr.w	r9, [r8, #12]
    3e78:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    3e7c:	bf04      	itt	eq
    3e7e:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    3e82:	f1b8 0f00 	cmpeq.w	r8, #0
    3e86:	d002      	beq.n	3e8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    3e88:	2c02      	cmp	r4, #2
    3e8a:	d005      	beq.n	3e98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    3e8c:	e02c      	b.n	3ee8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    3e8e:	f240 2151 	movw	r1, #593	; 0x251
    3e92:	206c      	movs	r0, #108	; 0x6c
    3e94:	f000 fd34 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3e98:	f1ac 0804 	sub.w	r8, ip, #4
    3e9c:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3ea0:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    3ea4:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    3ea8:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    3eac:	2500      	movs	r5, #0
    3eae:	2c01      	cmp	r4, #1
    3eb0:	d002      	beq.n	3eb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    3eb2:	2c02      	cmp	r4, #2
    3eb4:	d00b      	beq.n	3ece <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    3eb6:	e014      	b.n	3ee2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3eb8:	f1bc 0f04 	cmp.w	ip, #4
    3ebc:	bf24      	itt	cs
    3ebe:	f8d8 9000 	ldrcs.w	r9, [r8]
    3ec2:	f1b9 0f00 	cmpcs.w	r9, #0
    3ec6:	bf08      	it	eq
    3ec8:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    3ecc:	e009      	b.n	3ee2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    3ece:	f1bc 0f04 	cmp.w	ip, #4
    3ed2:	bf24      	itt	cs
    3ed4:	f8d8 9000 	ldrcs.w	r9, [r8]
    3ed8:	f1b9 0f00 	cmpcs.w	r9, #0
    3edc:	bf08      	it	eq
    3ede:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    3ee2:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    3ee6:	d1e1      	bne.n	3eac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    3ee8:	4c3f      	ldr	r4, [pc, #252]	; (3fe8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    3eea:	f100 0c10 	add.w	ip, r0, #16
    3eee:	fa07 fc0c 	lsl.w	ip, r7, ip
    3ef2:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    3ef6:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    3efa:	b1c2      	cbz	r2, 3f2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    3efc:	f04f 0840 	mov.w	r8, #64	; 0x40
    3f00:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    3f04:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    3f08:	44a0      	add	r8, r4
    3f0a:	f8c8 7000 	str.w	r7, [r8]
    3f0e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    3f12:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    3f16:	eba1 0000 	sub.w	r0, r1, r0
    3f1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    3f1e:	4282      	cmp	r2, r0
    3f20:	bf98      	it	ls
    3f22:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    3f26:	bf28      	it	cs
    3f28:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    3f2c:	d250      	bcs.n	3fd0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3f2e:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    3f32:	2b01      	cmp	r3, #1
    3f34:	bf08      	it	eq
    3f36:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    3f3a:	2001      	movs	r0, #1
    3f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3f40:	b134      	cbz	r4, 3f50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    3f42:	4584      	cmp	ip, r0
    3f44:	d104      	bne.n	3f50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    3f46:	f44f 711d 	mov.w	r1, #628	; 0x274
    3f4a:	206c      	movs	r0, #108	; 0x6c
    3f4c:	f000 fcd8 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f50:	f1a0 0c04 	sub.w	ip, r0, #4
    3f54:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    3f58:	2b01      	cmp	r3, #1
    3f5a:	e000      	b.n	3f5e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    3f5c:	e03b      	b.n	3fd6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    3f5e:	bf0c      	ite	eq
    3f60:	f04f 0801 	moveq.w	r8, #1
    3f64:	f04f 0800 	movne.w	r8, #0
    3f68:	2c03      	cmp	r4, #3
    3f6a:	d304      	bcc.n	3f76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    3f6c:	f240 114d 	movw	r1, #333	; 0x14d
    3f70:	206c      	movs	r0, #108	; 0x6c
    3f72:	f000 fcc5 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3f76:	f8df c074 	ldr.w	ip, [pc, #116]	; 3fec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    3f7a:	f104 0310 	add.w	r3, r4, #16
    3f7e:	fa07 f303 	lsl.w	r3, r7, r3
    3f82:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    3f86:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    3f8a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    3f8e:	f84c 6004 	str.w	r6, [ip, r4]
    3f92:	1f00      	subs	r0, r0, #4
    3f94:	b2c0      	uxtb	r0, r0
    3f96:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    3f9a:	b16a      	cbz	r2, 3fb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    3f9c:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    3fa0:	1b0c      	subs	r4, r1, r4
    3fa2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    3fa6:	42a2      	cmp	r2, r4
    3fa8:	bf98      	it	ls
    3faa:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    3fae:	bf24      	itt	cs
    3fb0:	2100      	movcs	r1, #0
    3fb2:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    3fb6:	d20b      	bcs.n	3fd0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    3fb8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    3fbc:	f1b8 0f00 	cmp.w	r8, #0
    3fc0:	bf18      	it	ne
    3fc2:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    3fc6:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    3fca:	2001      	movs	r0, #1
    3fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3fd0:	2000      	movs	r0, #0
    3fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3fd6:	f240 2179 	movw	r1, #633	; 0x279
    3fda:	206c      	movs	r0, #108	; 0x6c
    3fdc:	f000 fc90 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3fe0:	2000001f 	.word	0x2000001f
    3fe4:	2000001c 	.word	0x2000001c
    3fe8:	40008000 	.word	0x40008000
    3fec:	4000b000 	.word	0x4000b000

00003ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    3ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3ff4:	2600      	movs	r6, #0
    3ff6:	f44f 77a0 	mov.w	r7, #320	; 0x140
    3ffa:	f04f 0801 	mov.w	r8, #1
    3ffe:	2807      	cmp	r0, #7
    4000:	d251      	bcs.n	40a6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    4002:	e8df f000 	tbb	[pc, r0]
    4006:	0404      	.short	0x0404
    4008:	19190404 	.word	0x19190404
    400c:	0019      	.short	0x0019
    400e:	f100 0110 	add.w	r1, r0, #16
    4012:	fa08 f201 	lsl.w	r2, r8, r1
    4016:	4926      	ldr	r1, [pc, #152]	; (40b0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    4018:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    401c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    4020:	2200      	movs	r2, #0
    4022:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    4026:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    402a:	508e      	str	r6, [r1, r2]
    402c:	4921      	ldr	r1, [pc, #132]	; (40b4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    402e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4032:	9000      	str	r0, [sp, #0]
    4034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4038:	4d1f      	ldr	r5, [pc, #124]	; (40b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    403a:	1f01      	subs	r1, r0, #4
    403c:	b2cc      	uxtb	r4, r1
    403e:	7829      	ldrb	r1, [r5, #0]
    4040:	b179      	cbz	r1, 4062 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    4042:	786a      	ldrb	r2, [r5, #1]
    4044:	4282      	cmp	r2, r0
    4046:	d10c      	bne.n	4062 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    4048:	4a1c      	ldr	r2, [pc, #112]	; (40bc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    404a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    404e:	6010      	str	r0, [r2, #0]
    4050:	2901      	cmp	r1, #1
    4052:	bf08      	it	eq
    4054:	f7ff fd3c 	bleq	3ad0 <MPSL_IRQ_TIMER0_Handler+0x100>
    4058:	702e      	strb	r6, [r5, #0]
    405a:	4919      	ldr	r1, [pc, #100]	; (40c0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    405c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    4060:	60c8      	str	r0, [r1, #12]
    4062:	f104 0010 	add.w	r0, r4, #16
    4066:	fa08 f100 	lsl.w	r1, r8, r0
    406a:	4816      	ldr	r0, [pc, #88]	; (40c4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    406c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4070:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    4074:	00a1      	lsls	r1, r4, #2
    4076:	4401      	add	r1, r0
    4078:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    407c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    4080:	1a89      	subs	r1, r1, r2
    4082:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4086:	2902      	cmp	r1, #2
    4088:	d307      	bcc.n	409a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    408a:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    408e:	2100      	movs	r1, #0
    4090:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    4094:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    4098:	5046      	str	r6, [r0, r1]
    409a:	480b      	ldr	r0, [pc, #44]	; (40c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    409c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    40a0:	9000      	str	r0, [sp, #0]
    40a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    40a6:	f240 21f1 	movw	r1, #753	; 0x2f1
    40aa:	206c      	movs	r0, #108	; 0x6c
    40ac:	f000 fc28 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    40b0:	40008000 	.word	0x40008000
    40b4:	40008140 	.word	0x40008140
    40b8:	2000001f 	.word	0x2000001f
    40bc:	4001f508 	.word	0x4001f508
    40c0:	2000001c 	.word	0x2000001c
    40c4:	4000b000 	.word	0x4000b000
    40c8:	4000b140 	.word	0x4000b140

000040cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    40cc:	4920      	ldr	r1, [pc, #128]	; (4150 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    40ce:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    40d2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    40d6:	481f      	ldr	r0, [pc, #124]	; (4154 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    40d8:	1d0a      	adds	r2, r1, #4
    40da:	7803      	ldrb	r3, [r0, #0]
    40dc:	2000      	movs	r0, #0
    40de:	b15b      	cbz	r3, 40f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    40e0:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    40e4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    40e8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    40ec:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    40f0:	4919      	ldr	r1, [pc, #100]	; (4158 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    40f2:	6809      	ldr	r1, [r1, #0]
    40f4:	b999      	cbnz	r1, 411e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    40f6:	e00c      	b.n	4112 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    40f8:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    40fc:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    4100:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    4104:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    4108:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    410c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    4110:	e7ee      	b.n	40f0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    4112:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    4116:	f44f 6100 	mov.w	r1, #2048	; 0x800
    411a:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    411e:	490f      	ldr	r1, [pc, #60]	; (415c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    4120:	f04f 32ff 	mov.w	r2, #4294967295
    4124:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    4128:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    412c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    4130:	1d0a      	adds	r2, r1, #4
    4132:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4136:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    413a:	1d12      	adds	r2, r2, #4
    413c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    4140:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    4144:	1d12      	adds	r2, r2, #4
    4146:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    414a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    414e:	4770      	bx	lr
    4150:	4000b000 	.word	0x4000b000
    4154:	2000001f 	.word	0x2000001f
    4158:	4000b148 	.word	0x4000b148
    415c:	40008000 	.word	0x40008000

00004160 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    4160:	4808      	ldr	r0, [pc, #32]	; (4184 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    4162:	f990 0002 	ldrsb.w	r0, [r0, #2]
    4166:	2800      	cmp	r0, #0
    4168:	bfb8      	it	lt
    416a:	4770      	bxlt	lr
    416c:	f000 011f 	and.w	r1, r0, #31
    4170:	2201      	movs	r2, #1
    4172:	fa02 f101 	lsl.w	r1, r2, r1
    4176:	0940      	lsrs	r0, r0, #5
    4178:	0080      	lsls	r0, r0, #2
    417a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    417e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    4182:	4770      	bx	lr
    4184:	2000001c 	.word	0x2000001c

00004188 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    4188:	b510      	push	{r4, lr}
    418a:	2807      	cmp	r0, #7
    418c:	d20d      	bcs.n	41aa <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    418e:	e8df f000 	tbb	[pc, r0]
    4192:	0404      	.short	0x0404
    4194:	06060404 	.word	0x06060404
    4198:	0006      	.short	0x0006
    419a:	4906      	ldr	r1, [pc, #24]	; (41b4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    419c:	e002      	b.n	41a4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    419e:	1f00      	subs	r0, r0, #4
    41a0:	4905      	ldr	r1, [pc, #20]	; (41b8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    41a2:	b2c0      	uxtb	r0, r0
    41a4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    41a8:	bd10      	pop	{r4, pc}
    41aa:	f240 219d 	movw	r1, #669	; 0x29d
    41ae:	206c      	movs	r0, #108	; 0x6c
    41b0:	f000 fba6 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    41b4:	40008140 	.word	0x40008140
    41b8:	4000b140 	.word	0x4000b140

000041bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    41bc:	b510      	push	{r4, lr}
    41be:	481c      	ldr	r0, [pc, #112]	; (4230 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    41c0:	2400      	movs	r4, #0
    41c2:	2104      	movs	r1, #4
    41c4:	7004      	strb	r4, [r0, #0]
    41c6:	1ec0      	subs	r0, r0, #3
    41c8:	7001      	strb	r1, [r0, #0]
    41ca:	0589      	lsls	r1, r1, #22
    41cc:	60c1      	str	r1, [r0, #12]
    41ce:	f7ff fc7f 	bl	3ad0 <MPSL_IRQ_TIMER0_Handler+0x100>
    41d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    41d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    41da:	f04f 0c01 	mov.w	ip, #1
    41de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    41e2:	f3bf 8f4f 	dsb	sy
    41e6:	f3bf 8f6f 	isb	sy
    41ea:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    41ee:	4811      	ldr	r0, [pc, #68]	; (4234 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    41f0:	f8c0 c004 	str.w	ip, [r0, #4]
    41f4:	f8c0 c008 	str.w	ip, [r0, #8]
    41f8:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    41fc:	2900      	cmp	r1, #0
    41fe:	d1fb      	bne.n	41f8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    4200:	1e49      	subs	r1, r1, #1
    4202:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    4206:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    420a:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    420e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    4212:	4909      	ldr	r1, [pc, #36]	; (4238 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    4214:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    4218:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    421c:	1d09      	adds	r1, r1, #4
    421e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    4222:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    4226:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    422a:	f8c0 c000 	str.w	ip, [r0]
    422e:	bd10      	pop	{r4, pc}
    4230:	2000001f 	.word	0x2000001f
    4234:	4000b000 	.word	0x4000b000
    4238:	4000b004 	.word	0x4000b004

0000423c <MPSL_IRQ_CLOCK_Handler>:
    423c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4240:	4c16      	ldr	r4, [pc, #88]	; (429c <MPSL_IRQ_CLOCK_Handler+0x60>)
    4242:	7a60      	ldrb	r0, [r4, #9]
    4244:	2800      	cmp	r0, #0
    4246:	d027      	beq.n	4298 <MPSL_IRQ_CLOCK_Handler+0x5c>
    4248:	f44f 7180 	mov.w	r1, #256	; 0x100
    424c:	058d      	lsls	r5, r1, #22
    424e:	4628      	mov	r0, r5
    4250:	f009 f929 	bl	d4a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4254:	4680      	mov	r8, r0
    4256:	f44f 7182 	mov.w	r1, #260	; 0x104
    425a:	4628      	mov	r0, r5
    425c:	f009 f923 	bl	d4a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4260:	2600      	movs	r6, #0
    4262:	4607      	mov	r7, r0
    4264:	f1b8 0f00 	cmp.w	r8, #0
    4268:	d009      	beq.n	427e <MPSL_IRQ_CLOCK_Handler+0x42>
    426a:	2001      	movs	r0, #1
    426c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4270:	7920      	ldrb	r0, [r4, #4]
    4272:	b120      	cbz	r0, 427e <MPSL_IRQ_CLOCK_Handler+0x42>
    4274:	7126      	strb	r6, [r4, #4]
    4276:	69e0      	ldr	r0, [r4, #28]
    4278:	b108      	cbz	r0, 427e <MPSL_IRQ_CLOCK_Handler+0x42>
    427a:	4780      	blx	r0
    427c:	61e6      	str	r6, [r4, #28]
    427e:	b137      	cbz	r7, 428e <MPSL_IRQ_CLOCK_Handler+0x52>
    4280:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    4284:	2002      	movs	r0, #2
    4286:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    428a:	f000 fa6d 	bl	4768 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    428e:	4640      	mov	r0, r8
    4290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    4294:	f000 b85a 	b.w	434c <MPSL_IRQ_CLOCK_Handler+0x110>
    4298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    429c:	2000002c 	.word	0x2000002c
    42a0:	b510      	push	{r4, lr}
    42a2:	f009 f9aa 	bl	d5fa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    42a6:	b930      	cbnz	r0, 42b6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    42a8:	f009 f9c8 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    42ac:	b918      	cbnz	r0, 42b6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    42ae:	f009 f9fb 	bl	d6a8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    42b2:	2800      	cmp	r0, #0
    42b4:	d002      	beq.n	42bc <MPSL_IRQ_CLOCK_Handler+0x80>
    42b6:	4902      	ldr	r1, [pc, #8]	; (42c0 <MPSL_IRQ_CLOCK_Handler+0x84>)
    42b8:	2002      	movs	r0, #2
    42ba:	6008      	str	r0, [r1, #0]
    42bc:	bd10      	pop	{r4, pc}
    42be:	0000      	.short	0x0000
    42c0:	40000c34 	.word	0x40000c34
    42c4:	b570      	push	{r4, r5, r6, lr}
    42c6:	f000 f987 	bl	45d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    42ca:	f000 faa1 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    42ce:	4c09      	ldr	r4, [pc, #36]	; (42f4 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    42d0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    42d4:	b130      	cbz	r0, 42e4 <MPSL_IRQ_CLOCK_Handler+0xa8>
    42d6:	f7ff ffe3 	bl	42a0 <MPSL_IRQ_CLOCK_Handler+0x64>
    42da:	2001      	movs	r0, #1
    42dc:	6128      	str	r0, [r5, #16]
    42de:	2004      	movs	r0, #4
    42e0:	72a0      	strb	r0, [r4, #10]
    42e2:	e004      	b.n	42ee <MPSL_IRQ_CLOCK_Handler+0xb2>
    42e4:	2003      	movs	r0, #3
    42e6:	72a0      	strb	r0, [r4, #10]
    42e8:	2001      	movs	r0, #1
    42ea:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    42ee:	2000      	movs	r0, #0
    42f0:	71e0      	strb	r0, [r4, #7]
    42f2:	bd70      	pop	{r4, r5, r6, pc}
    42f4:	2000002c 	.word	0x2000002c
    42f8:	b570      	push	{r4, r5, r6, lr}
    42fa:	4c13      	ldr	r4, [pc, #76]	; (4348 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    42fc:	79a0      	ldrb	r0, [r4, #6]
    42fe:	b1f0      	cbz	r0, 433e <MPSL_IRQ_CLOCK_Handler+0x102>
    4300:	2801      	cmp	r0, #1
    4302:	d003      	beq.n	430c <MPSL_IRQ_CLOCK_Handler+0xd0>
    4304:	79e1      	ldrb	r1, [r4, #7]
    4306:	1e40      	subs	r0, r0, #1
    4308:	4281      	cmp	r1, r0
    430a:	da18      	bge.n	433e <MPSL_IRQ_CLOCK_Handler+0x102>
    430c:	f000 fa80 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4310:	4605      	mov	r5, r0
    4312:	f000 fb65 	bl	49e0 <mpsl_temperature_get>
    4316:	79a1      	ldrb	r1, [r4, #6]
    4318:	2901      	cmp	r1, #1
    431a:	d902      	bls.n	4322 <MPSL_IRQ_CLOCK_Handler+0xe6>
    431c:	79e1      	ldrb	r1, [r4, #7]
    431e:	1c49      	adds	r1, r1, #1
    4320:	71e1      	strb	r1, [r4, #7]
    4322:	b10d      	cbz	r5, 4328 <MPSL_IRQ_CLOCK_Handler+0xec>
    4324:	6961      	ldr	r1, [r4, #20]
    4326:	e000      	b.n	432a <MPSL_IRQ_CLOCK_Handler+0xee>
    4328:	6921      	ldr	r1, [r4, #16]
    432a:	1a41      	subs	r1, r0, r1
    432c:	2902      	cmp	r1, #2
    432e:	da02      	bge.n	4336 <MPSL_IRQ_CLOCK_Handler+0xfa>
    4330:	f111 0f02 	cmn.w	r1, #2
    4334:	dc07      	bgt.n	4346 <MPSL_IRQ_CLOCK_Handler+0x10a>
    4336:	b10d      	cbz	r5, 433c <MPSL_IRQ_CLOCK_Handler+0x100>
    4338:	6160      	str	r0, [r4, #20]
    433a:	e000      	b.n	433e <MPSL_IRQ_CLOCK_Handler+0x102>
    433c:	6120      	str	r0, [r4, #16]
    433e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4342:	f7ff bfbf 	b.w	42c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    4346:	bd70      	pop	{r4, r5, r6, pc}
    4348:	2000002c 	.word	0x2000002c
    434c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4350:	4606      	mov	r6, r0
    4352:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    4356:	f44f 7186 	mov.w	r1, #268	; 0x10c
    435a:	4628      	mov	r0, r5
    435c:	f009 f8a3 	bl	d4a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4360:	4680      	mov	r8, r0
    4362:	f44f 7188 	mov.w	r1, #272	; 0x110
    4366:	4628      	mov	r0, r5
    4368:	f009 f89d 	bl	d4a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    436c:	4c27      	ldr	r4, [pc, #156]	; (440c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    436e:	4682      	mov	sl, r0
    4370:	7827      	ldrb	r7, [r4, #0]
    4372:	f104 0008 	add.w	r0, r4, #8
    4376:	f009 f90a 	bl	d58e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    437a:	b110      	cbz	r0, 4382 <MPSL_IRQ_CLOCK_Handler+0x146>
    437c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    4380:	e016      	b.n	43b0 <MPSL_IRQ_CLOCK_Handler+0x174>
    4382:	f04f 0901 	mov.w	r9, #1
    4386:	b146      	cbz	r6, 439a <MPSL_IRQ_CLOCK_Handler+0x15e>
    4388:	7aa0      	ldrb	r0, [r4, #10]
    438a:	2803      	cmp	r0, #3
    438c:	d105      	bne.n	439a <MPSL_IRQ_CLOCK_Handler+0x15e>
    438e:	2004      	movs	r0, #4
    4390:	72a0      	strb	r0, [r4, #10]
    4392:	f7ff ff85 	bl	42a0 <MPSL_IRQ_CLOCK_Handler+0x64>
    4396:	f8c5 9010 	str.w	r9, [r5, #16]
    439a:	2600      	movs	r6, #0
    439c:	f1b8 0f00 	cmp.w	r8, #0
    43a0:	d018      	beq.n	43d4 <MPSL_IRQ_CLOCK_Handler+0x198>
    43a2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    43a6:	7aa0      	ldrb	r0, [r4, #10]
    43a8:	2804      	cmp	r0, #4
    43aa:	d004      	beq.n	43b6 <MPSL_IRQ_CLOCK_Handler+0x17a>
    43ac:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    43b0:	206d      	movs	r0, #109	; 0x6d
    43b2:	f000 faa5 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    43b6:	f009 f920 	bl	d5fa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    43ba:	b928      	cbnz	r0, 43c8 <MPSL_IRQ_CLOCK_Handler+0x18c>
    43bc:	f009 f93e 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    43c0:	b910      	cbnz	r0, 43c8 <MPSL_IRQ_CLOCK_Handler+0x18c>
    43c2:	f009 f971 	bl	d6a8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    43c6:	b108      	cbz	r0, 43cc <MPSL_IRQ_CLOCK_Handler+0x190>
    43c8:	4811      	ldr	r0, [pc, #68]	; (4410 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    43ca:	6006      	str	r6, [r0, #0]
    43cc:	2002      	movs	r0, #2
    43ce:	72a0      	strb	r0, [r4, #10]
    43d0:	f000 f8e6 	bl	45a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    43d4:	f1ba 0f00 	cmp.w	sl, #0
    43d8:	d008      	beq.n	43ec <MPSL_IRQ_CLOCK_Handler+0x1b0>
    43da:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    43de:	7aa0      	ldrb	r0, [r4, #10]
    43e0:	2802      	cmp	r0, #2
    43e2:	d101      	bne.n	43e8 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    43e4:	f7ff ff88 	bl	42f8 <MPSL_IRQ_CLOCK_Handler+0xbc>
    43e8:	f8c5 9014 	str.w	r9, [r5, #20]
    43ec:	b13f      	cbz	r7, 43fe <MPSL_IRQ_CLOCK_Handler+0x1c2>
    43ee:	7026      	strb	r6, [r4, #0]
    43f0:	7aa0      	ldrb	r0, [r4, #10]
    43f2:	2802      	cmp	r0, #2
    43f4:	d101      	bne.n	43fa <MPSL_IRQ_CLOCK_Handler+0x1be>
    43f6:	f7ff ff65 	bl	42c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    43fa:	f000 f8d1 	bl	45a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    43fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4402:	4802      	ldr	r0, [pc, #8]	; (440c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    4404:	3008      	adds	r0, #8
    4406:	f009 b8d9 	b.w	d5bc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    440a:	0000      	.short	0x0000
    440c:	2000002c 	.word	0x2000002c
    4410:	40000c34 	.word	0x40000c34
    4414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4418:	4c5c      	ldr	r4, [pc, #368]	; (458c <MPSL_IRQ_CLOCK_Handler+0x350>)
    441a:	f04f 0800 	mov.w	r8, #0
    441e:	4606      	mov	r6, r0
    4420:	f8c4 8018 	str.w	r8, [r4, #24]
    4424:	7843      	ldrb	r3, [r0, #1]
    4426:	7882      	ldrb	r2, [r0, #2]
    4428:	7800      	ldrb	r0, [r0, #0]
    442a:	72e0      	strb	r0, [r4, #11]
    442c:	7163      	strb	r3, [r4, #5]
    442e:	2701      	movs	r7, #1
    4430:	71a2      	strb	r2, [r4, #6]
    4432:	07bd      	lsls	r5, r7, #30
    4434:	f884 8007 	strb.w	r8, [r4, #7]
    4438:	2805      	cmp	r0, #5
    443a:	d224      	bcs.n	4486 <MPSL_IRQ_CLOCK_Handler+0x24a>
    443c:	e8df f000 	tbb	[pc, r0]
    4440:	1f05030f 	.word	0x1f05030f
    4444:	0021      	.short	0x0021
    4446:	61a7      	str	r7, [r4, #24]
    4448:	e009      	b.n	445e <MPSL_IRQ_CLOCK_Handler+0x222>
    444a:	f000 f8c5 	bl	45d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    444e:	2101      	movs	r1, #1
    4450:	4628      	mov	r0, r5
    4452:	f009 f82d 	bl	d4b0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4456:	2800      	cmp	r0, #0
    4458:	d0f9      	beq.n	444e <MPSL_IRQ_CLOCK_Handler+0x212>
    445a:	2002      	movs	r0, #2
    445c:	61a0      	str	r0, [r4, #24]
    445e:	f009 f853 	bl	d508 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    4462:	b1b0      	cbz	r0, 4492 <MPSL_IRQ_CLOCK_Handler+0x256>
    4464:	f000 f9ee 	bl	4844 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    4468:	7e21      	ldrb	r1, [r4, #24]
    446a:	f001 0103 	and.w	r1, r1, #3
    446e:	4288      	cmp	r0, r1
    4470:	d10f      	bne.n	4492 <MPSL_IRQ_CLOCK_Handler+0x256>
    4472:	79b0      	ldrb	r0, [r6, #6]
    4474:	b150      	cbz	r0, 448c <MPSL_IRQ_CLOCK_Handler+0x250>
    4476:	2002      	movs	r0, #2
    4478:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    447c:	e06a      	b.n	4554 <MPSL_IRQ_CLOCK_Handler+0x318>
    447e:	4844      	ldr	r0, [pc, #272]	; (4590 <MPSL_IRQ_CLOCK_Handler+0x354>)
    4480:	e7ec      	b.n	445c <MPSL_IRQ_CLOCK_Handler+0x220>
    4482:	4844      	ldr	r0, [pc, #272]	; (4594 <MPSL_IRQ_CLOCK_Handler+0x358>)
    4484:	e7ea      	b.n	445c <MPSL_IRQ_CLOCK_Handler+0x220>
    4486:	f240 312d 	movw	r1, #813	; 0x32d
    448a:	e049      	b.n	4520 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    448c:	f000 f9ae 	bl	47ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    4490:	e060      	b.n	4554 <MPSL_IRQ_CLOCK_Handler+0x318>
    4492:	60ef      	str	r7, [r5, #12]
    4494:	f44f 7a82 	mov.w	sl, #260	; 0x104
    4498:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    449c:	69a0      	ldr	r0, [r4, #24]
    449e:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    44a2:	f009 f896 	bl	d5d2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    44a6:	b940      	cbnz	r0, 44ba <MPSL_IRQ_CLOCK_Handler+0x27e>
    44a8:	f009 f89d 	bl	d5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    44ac:	b928      	cbnz	r0, 44ba <MPSL_IRQ_CLOCK_Handler+0x27e>
    44ae:	f009 f8b1 	bl	d614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    44b2:	b910      	cbnz	r0, 44ba <MPSL_IRQ_CLOCK_Handler+0x27e>
    44b4:	f009 f8c2 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    44b8:	b138      	cbz	r0, 44ca <MPSL_IRQ_CLOCK_Handler+0x28e>
    44ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    44be:	4836      	ldr	r0, [pc, #216]	; (4598 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    44c0:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    44c4:	f3c1 3142 	ubfx	r1, r1, #13, #3
    44c8:	6001      	str	r1, [r0, #0]
    44ca:	f009 f882 	bl	d5d2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    44ce:	b940      	cbnz	r0, 44e2 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    44d0:	f009 f889 	bl	d5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    44d4:	b928      	cbnz	r0, 44e2 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    44d6:	f009 f89d 	bl	d614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    44da:	b910      	cbnz	r0, 44e2 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    44dc:	f009 f8ae 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    44e0:	b110      	cbz	r0, 44e8 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    44e2:	482d      	ldr	r0, [pc, #180]	; (4598 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    44e4:	3010      	adds	r0, #16
    44e6:	6007      	str	r7, [r0, #0]
    44e8:	60af      	str	r7, [r5, #8]
    44ea:	2002      	movs	r0, #2
    44ec:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    44f0:	79b0      	ldrb	r0, [r6, #6]
    44f2:	bb78      	cbnz	r0, 4554 <MPSL_IRQ_CLOCK_Handler+0x318>
    44f4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    44f8:	f010 0f02 	tst.w	r0, #2
    44fc:	d00e      	beq.n	451c <MPSL_IRQ_CLOCK_Handler+0x2e0>
    44fe:	f8df 909c 	ldr.w	r9, [pc, #156]	; 459c <MPSL_IRQ_CLOCK_Handler+0x360>
    4502:	f8d9 1000 	ldr.w	r1, [r9]
    4506:	43c9      	mvns	r1, r1
    4508:	f341 1700 	sbfx	r7, r1, #4, #1
    450c:	f8d9 1000 	ldr.w	r1, [r9]
    4510:	f041 0110 	orr.w	r1, r1, #16
    4514:	f8c9 1000 	str.w	r1, [r9]
    4518:	1c7f      	adds	r7, r7, #1
    451a:	e007      	b.n	452c <MPSL_IRQ_CLOCK_Handler+0x2f0>
    451c:	f240 21ee 	movw	r1, #750	; 0x2ee
    4520:	206d      	movs	r0, #109	; 0x6d
    4522:	f000 f9ed 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4526:	bf00      	nop
    4528:	f000 fb10 	bl	4b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    452c:	4651      	mov	r1, sl
    452e:	4628      	mov	r0, r5
    4530:	f008 ffb9 	bl	d4a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    4534:	2800      	cmp	r0, #0
    4536:	d0f7      	beq.n	4528 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    4538:	f000 f958 	bl	47ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    453c:	b92f      	cbnz	r7, 454a <MPSL_IRQ_CLOCK_Handler+0x30e>
    453e:	f8d9 1000 	ldr.w	r1, [r9]
    4542:	f021 0110 	bic.w	r1, r1, #16
    4546:	f8c9 1000 	str.w	r1, [r9]
    454a:	2002      	movs	r0, #2
    454c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    4550:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    4554:	79a0      	ldrb	r0, [r4, #6]
    4556:	b170      	cbz	r0, 4576 <MPSL_IRQ_CLOCK_Handler+0x33a>
    4558:	7830      	ldrb	r0, [r6, #0]
    455a:	b960      	cbnz	r0, 4576 <MPSL_IRQ_CLOCK_Handler+0x33a>
    455c:	f000 f958 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4560:	4606      	mov	r6, r0
    4562:	f000 fa3d 	bl	49e0 <mpsl_temperature_get>
    4566:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    456a:	b116      	cbz	r6, 4572 <MPSL_IRQ_CLOCK_Handler+0x336>
    456c:	e9c4 2004 	strd	r2, r0, [r4, #16]
    4570:	e001      	b.n	4576 <MPSL_IRQ_CLOCK_Handler+0x33a>
    4572:	e9c4 0204 	strd	r0, r2, [r4, #16]
    4576:	2101      	movs	r1, #1
    4578:	4628      	mov	r0, r5
    457a:	f008 ff99 	bl	d4b0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    457e:	b108      	cbz	r0, 4584 <MPSL_IRQ_CLOCK_Handler+0x348>
    4580:	f000 f940 	bl	4804 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4584:	f884 800a 	strb.w	r8, [r4, #10]
    4588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    458c:	2000002c 	.word	0x2000002c
    4590:	00020001 	.word	0x00020001
    4594:	00030001 	.word	0x00030001
    4598:	4000053c 	.word	0x4000053c
    459c:	e000ed10 	.word	0xe000ed10

000045a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    45a0:	b510      	push	{r4, lr}
    45a2:	f3ef 8410 	mrs	r4, PRIMASK
    45a6:	b672      	cpsid	i
    45a8:	480a      	ldr	r0, [pc, #40]	; (45d4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    45aa:	7841      	ldrb	r1, [r0, #1]
    45ac:	b129      	cbz	r1, 45ba <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    45ae:	7841      	ldrb	r1, [r0, #1]
    45b0:	1e49      	subs	r1, r1, #1
    45b2:	7041      	strb	r1, [r0, #1]
    45b4:	7841      	ldrb	r1, [r0, #1]
    45b6:	b129      	cbz	r1, 45c4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    45b8:	e008      	b.n	45cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    45ba:	f240 110d 	movw	r1, #269	; 0x10d
    45be:	206d      	movs	r0, #109	; 0x6d
    45c0:	f000 f99e 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    45c4:	7880      	ldrb	r0, [r0, #2]
    45c6:	b908      	cbnz	r0, 45cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    45c8:	f000 f930 	bl	482c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    45cc:	2c00      	cmp	r4, #0
    45ce:	d100      	bne.n	45d2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    45d0:	b662      	cpsie	i
    45d2:	bd10      	pop	{r4, pc}
    45d4:	2000002c 	.word	0x2000002c

000045d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    45d8:	b510      	push	{r4, lr}
    45da:	f3ef 8410 	mrs	r4, PRIMASK
    45de:	b672      	cpsid	i
    45e0:	4806      	ldr	r0, [pc, #24]	; (45fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    45e2:	7841      	ldrb	r1, [r0, #1]
    45e4:	1c49      	adds	r1, r1, #1
    45e6:	7041      	strb	r1, [r0, #1]
    45e8:	7840      	ldrb	r0, [r0, #1]
    45ea:	2801      	cmp	r0, #1
    45ec:	d101      	bne.n	45f2 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    45ee:	f008 ff76 	bl	d4de <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    45f2:	2c00      	cmp	r4, #0
    45f4:	d100      	bne.n	45f8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    45f6:	b662      	cpsie	i
    45f8:	bd10      	pop	{r4, pc}
    45fa:	0000      	.short	0x0000
    45fc:	2000002c 	.word	0x2000002c

00004600 <mpsl_clock_hfclk_release>:
    4600:	4805      	ldr	r0, [pc, #20]	; (4618 <mpsl_clock_hfclk_release+0x18>)
    4602:	b510      	push	{r4, lr}
    4604:	78c1      	ldrb	r1, [r0, #3]
    4606:	b121      	cbz	r1, 4612 <mpsl_clock_hfclk_release+0x12>
    4608:	2100      	movs	r1, #0
    460a:	7101      	strb	r1, [r0, #4]
    460c:	70c1      	strb	r1, [r0, #3]
    460e:	f7ff ffc7 	bl	45a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    4612:	2000      	movs	r0, #0
    4614:	bd10      	pop	{r4, pc}
    4616:	0000      	.short	0x0000
    4618:	2000002c 	.word	0x2000002c

0000461c <mpsl_clock_hfclk_request>:
    461c:	b570      	push	{r4, r5, r6, lr}
    461e:	4c0c      	ldr	r4, [pc, #48]	; (4650 <mpsl_clock_hfclk_request+0x34>)
    4620:	78e1      	ldrb	r1, [r4, #3]
    4622:	b961      	cbnz	r1, 463e <mpsl_clock_hfclk_request+0x22>
    4624:	2501      	movs	r5, #1
    4626:	70e5      	strb	r5, [r4, #3]
    4628:	61e0      	str	r0, [r4, #28]
    462a:	f7ff ffd5 	bl	45d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    462e:	f000 f8ef 	bl	4810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    4632:	b130      	cbz	r0, 4642 <mpsl_clock_hfclk_request+0x26>
    4634:	69e0      	ldr	r0, [r4, #28]
    4636:	b110      	cbz	r0, 463e <mpsl_clock_hfclk_request+0x22>
    4638:	4780      	blx	r0
    463a:	2000      	movs	r0, #0
    463c:	61e0      	str	r0, [r4, #28]
    463e:	2000      	movs	r0, #0
    4640:	bd70      	pop	{r4, r5, r6, pc}
    4642:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4646:	7125      	strb	r5, [r4, #4]
    4648:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    464c:	e7f7      	b.n	463e <mpsl_clock_hfclk_request+0x22>
    464e:	0000      	.short	0x0000
    4650:	2000002c 	.word	0x2000002c

00004654 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    4654:	f3ef 8010 	mrs	r0, PRIMASK
    4658:	b672      	cpsid	i
    465a:	4904      	ldr	r1, [pc, #16]	; (466c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    465c:	788a      	ldrb	r2, [r1, #2]
    465e:	1c52      	adds	r2, r2, #1
    4660:	708a      	strb	r2, [r1, #2]
    4662:	2800      	cmp	r0, #0
    4664:	d100      	bne.n	4668 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    4666:	b662      	cpsie	i
    4668:	4770      	bx	lr
    466a:	0000      	.short	0x0000
    466c:	2000002c 	.word	0x2000002c

00004670 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    4670:	b510      	push	{r4, lr}
    4672:	f3ef 8410 	mrs	r4, PRIMASK
    4676:	b672      	cpsid	i
    4678:	480a      	ldr	r0, [pc, #40]	; (46a4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    467a:	7881      	ldrb	r1, [r0, #2]
    467c:	b129      	cbz	r1, 468a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    467e:	7881      	ldrb	r1, [r0, #2]
    4680:	1e49      	subs	r1, r1, #1
    4682:	7081      	strb	r1, [r0, #2]
    4684:	7841      	ldrb	r1, [r0, #1]
    4686:	b129      	cbz	r1, 4694 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    4688:	e008      	b.n	469c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    468a:	f240 1125 	movw	r1, #293	; 0x125
    468e:	206d      	movs	r0, #109	; 0x6d
    4690:	f000 f936 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4694:	7880      	ldrb	r0, [r0, #2]
    4696:	b908      	cbnz	r0, 469c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    4698:	f000 f8c8 	bl	482c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    469c:	2c00      	cmp	r4, #0
    469e:	d100      	bne.n	46a2 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    46a0:	b662      	cpsie	i
    46a2:	bd10      	pop	{r4, pc}
    46a4:	2000002c 	.word	0x2000002c

000046a8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    46a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    46ac:	0004      	movs	r4, r0
    46ae:	f06f 0015 	mvn.w	r0, #21
    46b2:	d03c      	beq.n	472e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    46b4:	7821      	ldrb	r1, [r4, #0]
    46b6:	2904      	cmp	r1, #4
    46b8:	d839      	bhi.n	472e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    46ba:	2900      	cmp	r1, #0
    46bc:	7861      	ldrb	r1, [r4, #1]
    46be:	d038      	beq.n	4732 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    46c0:	2900      	cmp	r1, #0
    46c2:	d134      	bne.n	472e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    46c4:	78a1      	ldrb	r1, [r4, #2]
    46c6:	2900      	cmp	r1, #0
    46c8:	d131      	bne.n	472e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    46ca:	2000      	movs	r0, #0
    46cc:	f008 feb6 	bl	d43c <MPSL_IRQ_RADIO_Handler+0x1e>
    46d0:	2000      	movs	r0, #0
    46d2:	f008 fea6 	bl	d422 <MPSL_IRQ_RADIO_Handler+0x4>
    46d6:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    46da:	f04f 31ff 	mov.w	r1, #4294967295
    46de:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    46e2:	2600      	movs	r6, #0
    46e4:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    46e8:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    46ec:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    46f0:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    46f4:	4f14      	ldr	r7, [pc, #80]	; (4748 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    46f6:	707e      	strb	r6, [r7, #1]
    46f8:	88a0      	ldrh	r0, [r4, #4]
    46fa:	81b8      	strh	r0, [r7, #12]
    46fc:	f008 fee6 	bl	d4cc <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    4700:	2501      	movs	r5, #1
    4702:	b108      	cbz	r0, 4708 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    4704:	70fd      	strb	r5, [r7, #3]
    4706:	707d      	strb	r5, [r7, #1]
    4708:	2101      	movs	r1, #1
    470a:	4640      	mov	r0, r8
    470c:	f008 fed0 	bl	d4b0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    4710:	b108      	cbz	r0, 4716 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    4712:	f000 f877 	bl	4804 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    4716:	4620      	mov	r0, r4
    4718:	f7ff fe7c 	bl	4414 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    471c:	727d      	strb	r5, [r7, #9]
    471e:	2000      	movs	r0, #0
    4720:	f008 fe7f 	bl	d422 <MPSL_IRQ_RADIO_Handler+0x4>
    4724:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    4728:	4630      	mov	r0, r6
    472a:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    472e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4732:	2900      	cmp	r1, #0
    4734:	d0fb      	beq.n	472e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4736:	2920      	cmp	r1, #32
    4738:	d8f9      	bhi.n	472e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    473a:	78a1      	ldrb	r1, [r4, #2]
    473c:	2921      	cmp	r1, #33	; 0x21
    473e:	d8f6      	bhi.n	472e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4740:	2901      	cmp	r1, #1
    4742:	d1c2      	bne.n	46ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    4744:	e7f3      	b.n	472e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    4746:	0000      	.short	0x0000
    4748:	2000002c 	.word	0x2000002c

0000474c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    474c:	4801      	ldr	r0, [pc, #4]	; (4754 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    474e:	8980      	ldrh	r0, [r0, #12]
    4750:	4770      	bx	lr
    4752:	0000      	.short	0x0000
    4754:	2000002c 	.word	0x2000002c

00004758 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    4758:	4802      	ldr	r0, [pc, #8]	; (4764 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    475a:	7a80      	ldrb	r0, [r0, #10]
    475c:	2800      	cmp	r0, #0
    475e:	d000      	beq.n	4762 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    4760:	2001      	movs	r0, #1
    4762:	4770      	bx	lr
    4764:	2000002c 	.word	0x2000002c

00004768 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    4768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    476a:	4d1f      	ldr	r5, [pc, #124]	; (47e8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    476c:	7ae8      	ldrb	r0, [r5, #11]
    476e:	2800      	cmp	r0, #0
    4770:	d10f      	bne.n	4792 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4772:	7e28      	ldrb	r0, [r5, #24]
    4774:	f000 0003 	and.w	r0, r0, #3
    4778:	f008 feb6 	bl	d4e8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    477c:	2800      	cmp	r0, #0
    477e:	d008      	beq.n	4792 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4780:	f3ef 8110 	mrs	r1, PRIMASK
    4784:	b672      	cpsid	i
    4786:	f7ff ffe7 	bl	4758 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    478a:	b118      	cbz	r0, 4794 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    478c:	2900      	cmp	r1, #0
    478e:	d100      	bne.n	4792 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    4790:	b662      	cpsie	i
    4792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4794:	2601      	movs	r6, #1
    4796:	72ae      	strb	r6, [r5, #10]
    4798:	b901      	cbnz	r1, 479c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    479a:	b662      	cpsie	i
    479c:	2018      	movs	r0, #24
    479e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    47a2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    47a6:	61a6      	str	r6, [r4, #24]
    47a8:	f44f 7020 	mov.w	r0, #640	; 0x280
    47ac:	f8ad 0000 	strh.w	r0, [sp]
    47b0:	f8bd 0000 	ldrh.w	r0, [sp]
    47b4:	1e41      	subs	r1, r0, #1
    47b6:	f8ad 1000 	strh.w	r1, [sp]
    47ba:	d2f9      	bcs.n	47b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    47bc:	2700      	movs	r7, #0
    47be:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    47c2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    47c6:	4808      	ldr	r0, [pc, #32]	; (47e8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    47c8:	3008      	adds	r0, #8
    47ca:	f008 fef3 	bl	d5b4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    47ce:	702f      	strb	r7, [r5, #0]
    47d0:	f7ff fd78 	bl	42c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    47d4:	6166      	str	r6, [r4, #20]
    47d6:	7968      	ldrb	r0, [r5, #5]
    47d8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    47dc:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    47e0:	2018      	movs	r0, #24
    47e2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    47e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    47e8:	2000002c 	.word	0x2000002c

000047ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    47ec:	b510      	push	{r4, lr}
    47ee:	4c04      	ldr	r4, [pc, #16]	; (4800 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    47f0:	7e20      	ldrb	r0, [r4, #24]
    47f2:	f000 0003 	and.w	r0, r0, #3
    47f6:	f008 fe77 	bl	d4e8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    47fa:	2800      	cmp	r0, #0
    47fc:	d0f8      	beq.n	47f0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    47fe:	bd10      	pop	{r4, pc}
    4800:	2000002c 	.word	0x2000002c

00004804 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    4804:	4901      	ldr	r1, [pc, #4]	; (480c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    4806:	2001      	movs	r0, #1
    4808:	7008      	strb	r0, [r1, #0]
    480a:	4770      	bx	lr
    480c:	20000284 	.word	0x20000284

00004810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    4810:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4814:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    4818:	b918      	cbnz	r0, 4822 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    481a:	4803      	ldr	r0, [pc, #12]	; (4828 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    481c:	7800      	ldrb	r0, [r0, #0]
    481e:	2800      	cmp	r0, #0
    4820:	d000      	beq.n	4824 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    4822:	2001      	movs	r0, #1
    4824:	4770      	bx	lr
    4826:	0000      	.short	0x0000
    4828:	20000284 	.word	0x20000284

0000482c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    482c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    4830:	2101      	movs	r1, #1
    4832:	6041      	str	r1, [r0, #4]
    4834:	2100      	movs	r1, #0
    4836:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    483a:	4801      	ldr	r0, [pc, #4]	; (4840 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    483c:	7001      	strb	r1, [r0, #0]
    483e:	4770      	bx	lr
    4840:	20000284 	.word	0x20000284

00004844 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    4844:	4802      	ldr	r0, [pc, #8]	; (4850 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    4846:	6800      	ldr	r0, [r0, #0]
    4848:	f000 0003 	and.w	r0, r0, #3
    484c:	4770      	bx	lr
    484e:	0000      	.short	0x0000
    4850:	4000041c 	.word	0x4000041c
    4854:	b510      	push	{r4, lr}
    4856:	b131      	cbz	r1, 4866 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    4858:	2901      	cmp	r1, #1
    485a:	d007      	beq.n	486c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    485c:	f240 3102 	movw	r1, #770	; 0x302
    4860:	a005      	add	r0, pc, #20	; (adr r0, 4878 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    4862:	f000 f821 	bl	48a8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    4866:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    486a:	e001      	b.n	4870 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    486c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    4870:	f000 0001 	and.w	r0, r0, #1
    4874:	bd10      	pop	{r4, pc}
    4876:	0000      	.short	0x0000
    4878:	5f66726e 	.word	0x5f66726e
    487c:	636f6c63 	.word	0x636f6c63
    4880:	00682e6b 	.word	0x00682e6b
    4884:	f3bf 8f4f 	dsb	sy
    4888:	4805      	ldr	r0, [pc, #20]	; (48a0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    488a:	6801      	ldr	r1, [r0, #0]
    488c:	4a05      	ldr	r2, [pc, #20]	; (48a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    488e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4892:	4311      	orrs	r1, r2
    4894:	6001      	str	r1, [r0, #0]
    4896:	f3bf 8f4f 	dsb	sy
    489a:	bf00      	nop
    489c:	e7fd      	b.n	489a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    489e:	0000      	.short	0x0000
    48a0:	e000ed0c 	.word	0xe000ed0c
    48a4:	05fa0004 	.word	0x05fa0004

000048a8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    48a8:	b672      	cpsid	i
    48aa:	4a03      	ldr	r2, [pc, #12]	; (48b8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    48ac:	6852      	ldr	r2, [r2, #4]
    48ae:	b102      	cbz	r2, 48b2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    48b0:	4790      	blx	r2
    48b2:	f7ff ffe7 	bl	4884 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    48b6:	0000      	.short	0x0000
    48b8:	2000004c 	.word	0x2000004c
    48bc:	4806      	ldr	r0, [pc, #24]	; (48d8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    48be:	b510      	push	{r4, lr}
    48c0:	2100      	movs	r1, #0
    48c2:	6001      	str	r1, [r0, #0]
    48c4:	2101      	movs	r1, #1
    48c6:	6001      	str	r1, [r0, #0]
    48c8:	4608      	mov	r0, r1
    48ca:	f008 fe34 	bl	d536 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    48ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48d2:	2001      	movs	r0, #1
    48d4:	f008 be22 	b.w	d51c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    48d8:	40001ffc 	.word	0x40001ffc
    48dc:	4807      	ldr	r0, [pc, #28]	; (48fc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    48de:	b510      	push	{r4, lr}
    48e0:	2101      	movs	r1, #1
    48e2:	6041      	str	r1, [r0, #4]
    48e4:	1e89      	subs	r1, r1, #2
    48e6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    48ea:	200c      	movs	r0, #12
    48ec:	f008 fe23 	bl	d536 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    48f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    48f4:	200c      	movs	r0, #12
    48f6:	f008 be11 	b.w	d51c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    48fa:	0000      	.short	0x0000
    48fc:	4000c000 	.word	0x4000c000

00004900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    4900:	b50e      	push	{r1, r2, r3, lr}
    4902:	b672      	cpsid	i
    4904:	4a0f      	ldr	r2, [pc, #60]	; (4944 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    4906:	6855      	ldr	r5, [r2, #4]
    4908:	b1d5      	cbz	r5, 4940 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    490a:	2200      	movs	r2, #0
    490c:	4603      	mov	r3, r0
    490e:	466e      	mov	r6, sp
    4910:	240a      	movs	r4, #10
    4912:	e003      	b.n	491c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    4914:	fbb0 f0f4 	udiv	r0, r0, r4
    4918:	1c52      	adds	r2, r2, #1
    491a:	b2d2      	uxtb	r2, r2
    491c:	2800      	cmp	r0, #0
    491e:	d1f9      	bne.n	4914 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    4920:	54b0      	strb	r0, [r6, r2]
    4922:	e009      	b.n	4938 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    4924:	fbb3 f0f4 	udiv	r0, r3, r4
    4928:	fb04 3010 	mls	r0, r4, r0, r3
    492c:	fbb3 f3f4 	udiv	r3, r3, r4
    4930:	1e52      	subs	r2, r2, #1
    4932:	b2d2      	uxtb	r2, r2
    4934:	3030      	adds	r0, #48	; 0x30
    4936:	54b0      	strb	r0, [r6, r2]
    4938:	2a00      	cmp	r2, #0
    493a:	d1f3      	bne.n	4924 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    493c:	4630      	mov	r0, r6
    493e:	47a8      	blx	r5
    4940:	f7ff ffa0 	bl	4884 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    4944:	2000004c 	.word	0x2000004c

00004948 <mpsl_init>:
    4948:	b570      	push	{r4, r5, r6, lr}
    494a:	4c17      	ldr	r4, [pc, #92]	; (49a8 <mpsl_init+0x60>)
    494c:	4606      	mov	r6, r0
    494e:	460d      	mov	r5, r1
    4950:	7860      	ldrb	r0, [r4, #1]
    4952:	b110      	cbz	r0, 495a <mpsl_init+0x12>
    4954:	f04f 30ff 	mov.w	r0, #4294967295
    4958:	bd70      	pop	{r4, r5, r6, pc}
    495a:	b906      	cbnz	r6, 495e <mpsl_init+0x16>
    495c:	4e13      	ldr	r6, [pc, #76]	; (49ac <mpsl_init+0x64>)
    495e:	6062      	str	r2, [r4, #4]
    4960:	7025      	strb	r5, [r4, #0]
    4962:	f7ff ffab 	bl	48bc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    4966:	f7ff ffb9 	bl	48dc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    496a:	4630      	mov	r0, r6
    496c:	f7ff fe9c 	bl	46a8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    4970:	0006      	movs	r6, r0
    4972:	d1f1      	bne.n	4958 <mpsl_init+0x10>
    4974:	f7fe ff00 	bl	3778 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    4978:	f7ff fef6 	bl	4768 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    497c:	f008 fd28 	bl	d3d0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    4980:	4628      	mov	r0, r5
    4982:	f008 fdcb 	bl	d51c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    4986:	2001      	movs	r0, #1
    4988:	2d00      	cmp	r5, #0
    498a:	db09      	blt.n	49a0 <mpsl_init+0x58>
    498c:	f005 011f 	and.w	r1, r5, #31
    4990:	fa00 f101 	lsl.w	r1, r0, r1
    4994:	096a      	lsrs	r2, r5, #5
    4996:	0092      	lsls	r2, r2, #2
    4998:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    499c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    49a0:	7060      	strb	r0, [r4, #1]
    49a2:	4630      	mov	r0, r6
    49a4:	bd70      	pop	{r4, r5, r6, pc}
    49a6:	0000      	.short	0x0000
    49a8:	2000004c 	.word	0x2000004c
    49ac:	0000d558 	.word	0x0000d558

000049b0 <mpsl_is_initialized>:
    49b0:	4801      	ldr	r0, [pc, #4]	; (49b8 <mpsl_is_initialized+0x8>)
    49b2:	7840      	ldrb	r0, [r0, #1]
    49b4:	4770      	bx	lr
    49b6:	0000      	.short	0x0000
    49b8:	2000004c 	.word	0x2000004c

000049bc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    49bc:	4807      	ldr	r0, [pc, #28]	; (49dc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    49be:	f990 0000 	ldrsb.w	r0, [r0]
    49c2:	2800      	cmp	r0, #0
    49c4:	db09      	blt.n	49da <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    49c6:	f000 021f 	and.w	r2, r0, #31
    49ca:	2101      	movs	r1, #1
    49cc:	4091      	lsls	r1, r2
    49ce:	0940      	lsrs	r0, r0, #5
    49d0:	0080      	lsls	r0, r0, #2
    49d2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    49d6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    49da:	4770      	bx	lr
    49dc:	2000004c 	.word	0x2000004c

000049e0 <mpsl_temperature_get>:
    49e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    49e4:	2601      	movs	r6, #1
    49e6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    49ea:	0331      	lsls	r1, r6, #12
    49ec:	f04f 0800 	mov.w	r8, #0
    49f0:	4640      	mov	r0, r8
    49f2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    49f6:	f3bf 8f4f 	dsb	sy
    49fa:	f3bf 8f6f 	isb	sy
    49fe:	4c16      	ldr	r4, [pc, #88]	; (4a58 <mpsl_temperature_get+0x78>)
    4a00:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    4a04:	200c      	movs	r0, #12
    4a06:	f008 fdb5 	bl	d574 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4a0a:	4d14      	ldr	r5, [pc, #80]	; (4a5c <mpsl_temperature_get+0x7c>)
    4a0c:	6828      	ldr	r0, [r5, #0]
    4a0e:	43c0      	mvns	r0, r0
    4a10:	f340 1700 	sbfx	r7, r0, #4, #1
    4a14:	6828      	ldr	r0, [r5, #0]
    4a16:	f040 0010 	orr.w	r0, r0, #16
    4a1a:	6028      	str	r0, [r5, #0]
    4a1c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    4a20:	6026      	str	r6, [r4, #0]
    4a22:	1c7f      	adds	r7, r7, #1
    4a24:	e002      	b.n	4a2c <mpsl_temperature_get+0x4c>
    4a26:	bf00      	nop
    4a28:	f000 f890 	bl	4b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4a2c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    4a30:	2800      	cmp	r0, #0
    4a32:	d0f9      	beq.n	4a28 <mpsl_temperature_get+0x48>
    4a34:	b91f      	cbnz	r7, 4a3e <mpsl_temperature_get+0x5e>
    4a36:	6828      	ldr	r0, [r5, #0]
    4a38:	f020 0010 	bic.w	r0, r0, #16
    4a3c:	6028      	str	r0, [r5, #0]
    4a3e:	4808      	ldr	r0, [pc, #32]	; (4a60 <mpsl_temperature_get+0x80>)
    4a40:	6805      	ldr	r5, [r0, #0]
    4a42:	6066      	str	r6, [r4, #4]
    4a44:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    4a48:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4a4c:	200c      	movs	r0, #12
    4a4e:	f008 fd91 	bl	d574 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    4a52:	4628      	mov	r0, r5
    4a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4a58:	4000c000 	.word	0x4000c000
    4a5c:	e000ed10 	.word	0xe000ed10
    4a60:	4000c508 	.word	0x4000c508

00004a64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    4a64:	b510      	push	{r4, lr}
    4a66:	4602      	mov	r2, r0
    4a68:	2005      	movs	r0, #5
    4a6a:	490c      	ldr	r1, [pc, #48]	; (4a9c <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x38>)
    4a6c:	e004      	b.n	4a78 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    4a6e:	bf00      	nop
    4a70:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    4a74:	791b      	ldrb	r3, [r3, #4]
    4a76:	b133      	cbz	r3, 4a86 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    4a78:	1e40      	subs	r0, r0, #1
    4a7a:	b2c0      	uxtb	r0, r0
    4a7c:	d2f8      	bcs.n	4a70 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    4a7e:	2148      	movs	r1, #72	; 0x48
    4a80:	2069      	movs	r0, #105	; 0x69
    4a82:	f7ff ff3d 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4a86:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    4a8a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    4a8e:	2200      	movs	r2, #0
    4a90:	714a      	strb	r2, [r1, #5]
    4a92:	718a      	strb	r2, [r1, #6]
    4a94:	2201      	movs	r2, #1
    4a96:	710a      	strb	r2, [r1, #4]
    4a98:	bd10      	pop	{r4, pc}
    4a9a:	0000      	.short	0x0000
    4a9c:	20000fe8 	.word	0x20000fe8

00004aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    4aa0:	b510      	push	{r4, lr}
    4aa2:	2805      	cmp	r0, #5
    4aa4:	d301      	bcc.n	4aaa <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    4aa6:	2158      	movs	r1, #88	; 0x58
    4aa8:	e006      	b.n	4ab8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    4aaa:	490a      	ldr	r1, [pc, #40]	; (4ad4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    4aac:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    4ab0:	7901      	ldrb	r1, [r0, #4]
    4ab2:	2901      	cmp	r1, #1
    4ab4:	d003      	beq.n	4abe <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    4ab6:	2159      	movs	r1, #89	; 0x59
    4ab8:	2069      	movs	r0, #105	; 0x69
    4aba:	f7ff ff21 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    4abe:	7941      	ldrb	r1, [r0, #5]
    4ac0:	7982      	ldrb	r2, [r0, #6]
    4ac2:	1c49      	adds	r1, r1, #1
    4ac4:	b2c9      	uxtb	r1, r1
    4ac6:	428a      	cmp	r2, r1
    4ac8:	d000      	beq.n	4acc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    4aca:	7141      	strb	r1, [r0, #5]
    4acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4ad0:	f7ff bf74 	b.w	49bc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    4ad4:	20000fe8 	.word	0x20000fe8

00004ad8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    4ad8:	b570      	push	{r4, r5, r6, lr}
    4ada:	2505      	movs	r5, #5
    4adc:	4e0e      	ldr	r6, [pc, #56]	; (4b18 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    4ade:	4c0f      	ldr	r4, [pc, #60]	; (4b1c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    4ae0:	e016      	b.n	4b10 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4ae2:	7821      	ldrb	r1, [r4, #0]
    4ae4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    4ae8:	7902      	ldrb	r2, [r0, #4]
    4aea:	2a01      	cmp	r2, #1
    4aec:	d108      	bne.n	4b00 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4aee:	7942      	ldrb	r2, [r0, #5]
    4af0:	7983      	ldrb	r3, [r0, #6]
    4af2:	429a      	cmp	r2, r3
    4af4:	d004      	beq.n	4b00 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    4af6:	7942      	ldrb	r2, [r0, #5]
    4af8:	7182      	strb	r2, [r0, #6]
    4afa:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    4afe:	4780      	blx	r0
    4b00:	7820      	ldrb	r0, [r4, #0]
    4b02:	1c40      	adds	r0, r0, #1
    4b04:	b2c0      	uxtb	r0, r0
    4b06:	7020      	strb	r0, [r4, #0]
    4b08:	2805      	cmp	r0, #5
    4b0a:	d301      	bcc.n	4b10 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    4b0c:	2000      	movs	r0, #0
    4b0e:	7020      	strb	r0, [r4, #0]
    4b10:	1e6d      	subs	r5, r5, #1
    4b12:	b2ed      	uxtb	r5, r5
    4b14:	d2e5      	bcs.n	4ae2 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    4b16:	bd70      	pop	{r4, r5, r6, pc}
    4b18:	20000fe8 	.word	0x20000fe8
    4b1c:	20000285 	.word	0x20000285

00004b20 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    4b20:	b500      	push	{lr}
    4b22:	f008 fd56 	bl	d5d2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    4b26:	b940      	cbnz	r0, 4b3a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4b28:	f008 fd5d 	bl	d5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    4b2c:	b928      	cbnz	r0, 4b3a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4b2e:	f008 fd71 	bl	d614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    4b32:	b910      	cbnz	r0, 4b3a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    4b34:	f008 fd82 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4b38:	b108      	cbz	r0, 4b3e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    4b3a:	4802      	ldr	r0, [pc, #8]	; (4b44 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    4b3c:	bd00      	pop	{pc}
    4b3e:	4802      	ldr	r0, [pc, #8]	; (4b48 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    4b40:	bd00      	pop	{pc}
    4b42:	0000      	.short	0x0000
    4b44:	4000050c 	.word	0x4000050c
    4b48:	4001e700 	.word	0x4001e700

00004b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    4b4c:	b510      	push	{r4, lr}
    4b4e:	f008 fd75 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    4b52:	b330      	cbz	r0, 4ba2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    4b54:	f3ef 8010 	mrs	r0, PRIMASK
    4b58:	b1c8      	cbz	r0, 4b8e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    4b5a:	2100      	movs	r1, #0
    4b5c:	b672      	cpsid	i
    4b5e:	4812      	ldr	r0, [pc, #72]	; (4ba8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    4b60:	6802      	ldr	r2, [r0, #0]
    4b62:	6803      	ldr	r3, [r0, #0]
    4b64:	f3c2 1200 	ubfx	r2, r2, #4, #1
    4b68:	f043 0310 	orr.w	r3, r3, #16
    4b6c:	6003      	str	r3, [r0, #0]
    4b6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    4b72:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    4b76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    4b7a:	431c      	orrs	r4, r3
    4b7c:	d000      	beq.n	4b80 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    4b7e:	bf40      	sev
    4b80:	bf20      	wfe
    4b82:	bf00      	nop
    4b84:	bf00      	nop
    4b86:	bf00      	nop
    4b88:	bf00      	nop
    4b8a:	b112      	cbz	r2, 4b92 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    4b8c:	e005      	b.n	4b9a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    4b8e:	2101      	movs	r1, #1
    4b90:	e7e4      	b.n	4b5c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    4b92:	6802      	ldr	r2, [r0, #0]
    4b94:	f022 0210 	bic.w	r2, r2, #16
    4b98:	6002      	str	r2, [r0, #0]
    4b9a:	2900      	cmp	r1, #0
    4b9c:	d000      	beq.n	4ba0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    4b9e:	b662      	cpsie	i
    4ba0:	bd10      	pop	{r4, pc}
    4ba2:	bf20      	wfe
    4ba4:	bd10      	pop	{r4, pc}
    4ba6:	0000      	.short	0x0000
    4ba8:	e000ed10 	.word	0xe000ed10

00004bac <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    4bac:	0000d8ad 0000d8c9 0000d8b7 0000d8c3     ................
    4bbc:	0000d8b1 0000d8ab 0000d8a9 0000d8cf     ................
    4bcc:	0000d8bd 0000d8a3 0000d89b 0000d89f     ................
    4bdc:	0000d895                                ....

00004be0 <mpsl_fem_disable>:
    4be0:	4801      	ldr	r0, [pc, #4]	; (4be8 <mpsl_fem_disable+0x8>)
    4be2:	6800      	ldr	r0, [r0, #0]
    4be4:	6800      	ldr	r0, [r0, #0]
    4be6:	4700      	bx	r0
    4be8:	20000054 	.word	0x20000054

00004bec <mpsl_fem_lna_configuration_clear>:
    4bec:	4801      	ldr	r0, [pc, #4]	; (4bf4 <mpsl_fem_lna_configuration_clear+0x8>)
    4bee:	6800      	ldr	r0, [r0, #0]
    4bf0:	6900      	ldr	r0, [r0, #16]
    4bf2:	4700      	bx	r0
    4bf4:	20000054 	.word	0x20000054

00004bf8 <mpsl_fem_lna_configuration_set>:
    4bf8:	4a01      	ldr	r2, [pc, #4]	; (4c00 <mpsl_fem_lna_configuration_set+0x8>)
    4bfa:	6812      	ldr	r2, [r2, #0]
    4bfc:	6892      	ldr	r2, [r2, #8]
    4bfe:	4710      	bx	r2
    4c00:	20000054 	.word	0x20000054

00004c04 <mpsl_fem_pa_configuration_clear>:
    4c04:	4801      	ldr	r0, [pc, #4]	; (4c0c <mpsl_fem_pa_configuration_clear+0x8>)
    4c06:	6800      	ldr	r0, [r0, #0]
    4c08:	68c0      	ldr	r0, [r0, #12]
    4c0a:	4700      	bx	r0
    4c0c:	20000054 	.word	0x20000054

00004c10 <mpsl_fem_pa_configuration_set>:
    4c10:	4a01      	ldr	r2, [pc, #4]	; (4c18 <mpsl_fem_pa_configuration_set+0x8>)
    4c12:	6812      	ldr	r2, [r2, #0]
    4c14:	6852      	ldr	r2, [r2, #4]
    4c16:	4710      	bx	r2
    4c18:	20000054 	.word	0x20000054

00004c1c <mpsl_fem_pa_is_configured>:
    4c1c:	4901      	ldr	r1, [pc, #4]	; (4c24 <mpsl_fem_pa_is_configured+0x8>)
    4c1e:	6809      	ldr	r1, [r1, #0]
    4c20:	6a09      	ldr	r1, [r1, #32]
    4c22:	4708      	bx	r1
    4c24:	20000054 	.word	0x20000054

00004c28 <mpsl_fem_device_config_254_apply_get>:
    4c28:	4801      	ldr	r0, [pc, #4]	; (4c30 <mpsl_fem_device_config_254_apply_get+0x8>)
    4c2a:	7800      	ldrb	r0, [r0, #0]
    4c2c:	4770      	bx	lr
    4c2e:	0000      	.short	0x0000
    4c30:	20000286 	.word	0x20000286
    4c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4c36:	4c17      	ldr	r4, [pc, #92]	; (4c94 <mpsl_fem_device_config_254_apply_get+0x6c>)
    4c38:	7a20      	ldrb	r0, [r4, #8]
    4c3a:	2802      	cmp	r0, #2
    4c3c:	d200      	bcs.n	4c40 <mpsl_fem_device_config_254_apply_get+0x18>
    4c3e:	2002      	movs	r0, #2
    4c40:	f88d 0001 	strb.w	r0, [sp, #1]
    4c44:	79e0      	ldrb	r0, [r4, #7]
    4c46:	2803      	cmp	r0, #3
    4c48:	d200      	bcs.n	4c4c <mpsl_fem_device_config_254_apply_get+0x24>
    4c4a:	2003      	movs	r0, #3
    4c4c:	f88d 0000 	strb.w	r0, [sp]
    4c50:	79a0      	ldrb	r0, [r4, #6]
    4c52:	f8ad 0004 	strh.w	r0, [sp, #4]
    4c56:	7960      	ldrb	r0, [r4, #5]
    4c58:	f8ad 0002 	strh.w	r0, [sp, #2]
    4c5c:	4668      	mov	r0, sp
    4c5e:	f006 ffeb 	bl	bc38 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    4c62:	b108      	cbz	r0, 4c68 <mpsl_fem_device_config_254_apply_get+0x40>
    4c64:	2184      	movs	r1, #132	; 0x84
    4c66:	e010      	b.n	4c8a <mpsl_fem_device_config_254_apply_get+0x62>
    4c68:	68e0      	ldr	r0, [r4, #12]
    4c6a:	9002      	str	r0, [sp, #8]
    4c6c:	a802      	add	r0, sp, #8
    4c6e:	f006 fff9 	bl	bc64 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    4c72:	b108      	cbz	r0, 4c78 <mpsl_fem_device_config_254_apply_get+0x50>
    4c74:	2188      	movs	r1, #136	; 0x88
    4c76:	e008      	b.n	4c8a <mpsl_fem_device_config_254_apply_get+0x62>
    4c78:	4807      	ldr	r0, [pc, #28]	; (4c98 <mpsl_fem_device_config_254_apply_get+0x70>)
    4c7a:	6800      	ldr	r0, [r0, #0]
    4c7c:	9003      	str	r0, [sp, #12]
    4c7e:	a803      	add	r0, sp, #12
    4c80:	f00b facb 	bl	1021a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    4c84:	2800      	cmp	r0, #0
    4c86:	d003      	beq.n	4c90 <mpsl_fem_device_config_254_apply_get+0x68>
    4c88:	218c      	movs	r1, #140	; 0x8c
    4c8a:	2003      	movs	r0, #3
    4c8c:	f000 f918 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c90:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    4c92:	0000      	.short	0x0000
    4c94:	20001010 	.word	0x20001010
    4c98:	00004fac 	.word	0x00004fac
    4c9c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    4c9e:	4604      	mov	r4, r0
    4ca0:	460e      	mov	r6, r1
    4ca2:	f100 0003 	add.w	r0, r0, #3
    4ca6:	f020 0003 	bic.w	r0, r0, #3
    4caa:	f04f 0100 	mov.w	r1, #0
    4cae:	e9cd 0100 	strd	r0, r1, [sp]
    4cb2:	7831      	ldrb	r1, [r6, #0]
    4cb4:	0015      	movs	r5, r2
    4cb6:	f88d 1005 	strb.w	r1, [sp, #5]
    4cba:	d000      	beq.n	4cbe <mpsl_fem_device_config_254_apply_get+0x96>
    4cbc:	2000      	movs	r0, #0
    4cbe:	a901      	add	r1, sp, #4
    4cc0:	f000 faee 	bl	52a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    4cc4:	9900      	ldr	r1, [sp, #0]
    4cc6:	4408      	add	r0, r1
    4cc8:	490c      	ldr	r1, [pc, #48]	; (4cfc <mpsl_fem_device_config_254_apply_get+0xd4>)
    4cca:	9000      	str	r0, [sp, #0]
    4ccc:	78c9      	ldrb	r1, [r1, #3]
    4cce:	b149      	cbz	r1, 4ce4 <mpsl_fem_device_config_254_apply_get+0xbc>
    4cd0:	7c31      	ldrb	r1, [r6, #16]
    4cd2:	b139      	cbz	r1, 4ce4 <mpsl_fem_device_config_254_apply_get+0xbc>
    4cd4:	2225      	movs	r2, #37	; 0x25
    4cd6:	b105      	cbz	r5, 4cda <mpsl_fem_device_config_254_apply_get+0xb2>
    4cd8:	2000      	movs	r0, #0
    4cda:	f000 fd29 	bl	5730 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4cde:	9900      	ldr	r1, [sp, #0]
    4ce0:	4408      	add	r0, r1
    4ce2:	9000      	str	r0, [sp, #0]
    4ce4:	462a      	mov	r2, r5
    4ce6:	4631      	mov	r1, r6
    4ce8:	4668      	mov	r0, sp
    4cea:	f008 fdf2 	bl	d8d2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    4cee:	9800      	ldr	r0, [sp, #0]
    4cf0:	1dc0      	adds	r0, r0, #7
    4cf2:	f020 0007 	bic.w	r0, r0, #7
    4cf6:	9000      	str	r0, [sp, #0]
    4cf8:	1b00      	subs	r0, r0, r4
    4cfa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    4cfc:	20000058 	.word	0x20000058

00004d00 <sdc_build_revision_get>:
    4d00:	b510      	push	{r4, lr}
    4d02:	b128      	cbz	r0, 4d10 <sdc_build_revision_get+0x10>
    4d04:	2214      	movs	r2, #20
    4d06:	4904      	ldr	r1, [pc, #16]	; (4d18 <sdc_build_revision_get+0x18>)
    4d08:	f008 fcea 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4d0c:	2000      	movs	r0, #0
    4d0e:	bd10      	pop	{r4, pc}
    4d10:	f06f 0015 	mvn.w	r0, #21
    4d14:	bd10      	pop	{r4, pc}
    4d16:	0000      	.short	0x0000
    4d18:	00004fc8 	.word	0x00004fc8

00004d1c <sdc_cfg_set>:
    4d1c:	b570      	push	{r4, r5, r6, lr}
    4d1e:	0003      	movs	r3, r0
    4d20:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    4d24:	d103      	bne.n	4d2e <sdc_cfg_set+0x12>
    4d26:	4c2a      	ldr	r4, [pc, #168]	; (4dd0 <sdc_cfg_set+0xb4>)
    4d28:	7863      	ldrb	r3, [r4, #1]
    4d2a:	b10b      	cbz	r3, 4d30 <sdc_cfg_set+0x14>
    4d2c:	1180      	asrs	r0, r0, #6
    4d2e:	bd70      	pop	{r4, r5, r6, pc}
    4d30:	b319      	cbz	r1, 4d7a <sdc_cfg_set+0x5e>
    4d32:	f06f 0515 	mvn.w	r5, #21
    4d36:	b38a      	cbz	r2, 4d9c <sdc_cfg_set+0x80>
    4d38:	4b26      	ldr	r3, [pc, #152]	; (4dd4 <sdc_cfg_set+0xb8>)
    4d3a:	290c      	cmp	r1, #12
    4d3c:	d243      	bcs.n	4dc6 <sdc_cfg_set+0xaa>
    4d3e:	e8df f001 	tbb	[pc, r1]
    4d42:	0642      	.short	0x0642
    4d44:	13100c09 	.word	0x13100c09
    4d48:	2818251d 	.word	0x2818251d
    4d4c:	332e      	.short	0x332e
    4d4e:	7810      	ldrb	r0, [r2, #0]
    4d50:	7018      	strb	r0, [r3, #0]
    4d52:	e02d      	b.n	4db0 <sdc_cfg_set+0x94>
    4d54:	7810      	ldrb	r0, [r2, #0]
    4d56:	7058      	strb	r0, [r3, #1]
    4d58:	e02a      	b.n	4db0 <sdc_cfg_set+0x94>
    4d5a:	6810      	ldr	r0, [r2, #0]
    4d5c:	f8c3 0005 	str.w	r0, [r3, #5]
    4d60:	e026      	b.n	4db0 <sdc_cfg_set+0x94>
    4d62:	6810      	ldr	r0, [r2, #0]
    4d64:	60d8      	str	r0, [r3, #12]
    4d66:	e023      	b.n	4db0 <sdc_cfg_set+0x94>
    4d68:	7811      	ldrb	r1, [r2, #0]
    4d6a:	2900      	cmp	r1, #0
    4d6c:	d1df      	bne.n	4d2e <sdc_cfg_set+0x12>
    4d6e:	7099      	strb	r1, [r3, #2]
    4d70:	e01e      	b.n	4db0 <sdc_cfg_set+0x94>
    4d72:	7811      	ldrb	r1, [r2, #0]
    4d74:	2900      	cmp	r1, #0
    4d76:	d1da      	bne.n	4d2e <sdc_cfg_set+0x12>
    4d78:	70d9      	strb	r1, [r3, #3]
    4d7a:	e019      	b.n	4db0 <sdc_cfg_set+0x94>
    4d7c:	78e0      	ldrb	r0, [r4, #3]
    4d7e:	b110      	cbz	r0, 4d86 <sdc_cfg_set+0x6a>
    4d80:	7810      	ldrb	r0, [r2, #0]
    4d82:	2802      	cmp	r0, #2
    4d84:	d31f      	bcc.n	4dc6 <sdc_cfg_set+0xaa>
    4d86:	7810      	ldrb	r0, [r2, #0]
    4d88:	7418      	strb	r0, [r3, #16]
    4d8a:	e011      	b.n	4db0 <sdc_cfg_set+0x94>
    4d8c:	8810      	ldrh	r0, [r2, #0]
    4d8e:	8258      	strh	r0, [r3, #18]
    4d90:	e00e      	b.n	4db0 <sdc_cfg_set+0x94>
    4d92:	7811      	ldrb	r1, [r2, #0]
    4d94:	2900      	cmp	r1, #0
    4d96:	d1ca      	bne.n	4d2e <sdc_cfg_set+0x12>
    4d98:	7119      	strb	r1, [r3, #4]
    4d9a:	e009      	b.n	4db0 <sdc_cfg_set+0x94>
    4d9c:	e013      	b.n	4dc6 <sdc_cfg_set+0xaa>
    4d9e:	7810      	ldrb	r0, [r2, #0]
    4da0:	2802      	cmp	r0, #2
    4da2:	d310      	bcc.n	4dc6 <sdc_cfg_set+0xaa>
    4da4:	7518      	strb	r0, [r3, #20]
    4da6:	e003      	b.n	4db0 <sdc_cfg_set+0x94>
    4da8:	7811      	ldrb	r1, [r2, #0]
    4daa:	2900      	cmp	r1, #0
    4dac:	d1bf      	bne.n	4d2e <sdc_cfg_set+0x12>
    4dae:	7559      	strb	r1, [r3, #21]
    4db0:	2201      	movs	r2, #1
    4db2:	4908      	ldr	r1, [pc, #32]	; (4dd4 <sdc_cfg_set+0xb8>)
    4db4:	2000      	movs	r0, #0
    4db6:	f7ff ff71 	bl	4c9c <mpsl_fem_device_config_254_apply_get+0x74>
    4dba:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    4dbe:	db04      	blt.n	4dca <sdc_cfg_set+0xae>
    4dc0:	f06f 000b 	mvn.w	r0, #11
    4dc4:	bd70      	pop	{r4, r5, r6, pc}
    4dc6:	4628      	mov	r0, r5
    4dc8:	bd70      	pop	{r4, r5, r6, pc}
    4dca:	2101      	movs	r1, #1
    4dcc:	70a1      	strb	r1, [r4, #2]
    4dce:	bd70      	pop	{r4, r5, r6, pc}
    4dd0:	20000058 	.word	0x20000058
    4dd4:	20001010 	.word	0x20001010

00004dd8 <sdc_enable>:
    4dd8:	b570      	push	{r4, r5, r6, lr}
    4dda:	460c      	mov	r4, r1
    4ddc:	0005      	movs	r5, r0
    4dde:	d019      	beq.n	4e14 <sdc_enable+0x3c>
    4de0:	b1c4      	cbz	r4, 4e14 <sdc_enable+0x3c>
    4de2:	f000 f925 	bl	5030 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    4de6:	b1c0      	cbz	r0, 4e1a <sdc_enable+0x42>
    4de8:	4628      	mov	r0, r5
    4dea:	f7ff fe3b 	bl	4a64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4dee:	4d0c      	ldr	r5, [pc, #48]	; (4e20 <sdc_enable+0x48>)
    4df0:	2200      	movs	r2, #0
    4df2:	490c      	ldr	r1, [pc, #48]	; (4e24 <sdc_enable+0x4c>)
    4df4:	7028      	strb	r0, [r5, #0]
    4df6:	4620      	mov	r0, r4
    4df8:	f7ff ff50 	bl	4c9c <mpsl_fem_device_config_254_apply_get+0x74>
    4dfc:	f00b fe0e 	bl	10a1c <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    4e00:	2100      	movs	r1, #0
    4e02:	7828      	ldrb	r0, [r5, #0]
    4e04:	f007 f912 	bl	c02c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    4e08:	f7ff ff14 	bl	4c34 <mpsl_fem_device_config_254_apply_get+0xc>
    4e0c:	2001      	movs	r0, #1
    4e0e:	7068      	strb	r0, [r5, #1]
    4e10:	2000      	movs	r0, #0
    4e12:	bd70      	pop	{r4, r5, r6, pc}
    4e14:	f06f 0015 	mvn.w	r0, #21
    4e18:	bd70      	pop	{r4, r5, r6, pc}
    4e1a:	f04f 30ff 	mov.w	r0, #4294967295
    4e1e:	bd70      	pop	{r4, r5, r6, pc}
    4e20:	20000058 	.word	0x20000058
    4e24:	20001010 	.word	0x20001010

00004e28 <sdc_init>:
    4e28:	b530      	push	{r4, r5, lr}
    4e2a:	b087      	sub	sp, #28
    4e2c:	0005      	movs	r5, r0
    4e2e:	d00c      	beq.n	4e4a <sdc_init+0x22>
    4e30:	f7ff fdbe 	bl	49b0 <mpsl_is_initialized>
    4e34:	f04f 34ff 	mov.w	r4, #4294967295
    4e38:	b120      	cbz	r0, 4e44 <sdc_init+0x1c>
    4e3a:	f7ff fc87 	bl	474c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    4e3e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    4e42:	d905      	bls.n	4e50 <sdc_init+0x28>
    4e44:	4620      	mov	r0, r4
    4e46:	b007      	add	sp, #28
    4e48:	bd30      	pop	{r4, r5, pc}
    4e4a:	f06f 0015 	mvn.w	r0, #21
    4e4e:	e7fa      	b.n	4e46 <sdc_init+0x1e>
    4e50:	4c15      	ldr	r4, [pc, #84]	; (4ea8 <sdc_init+0x80>)
    4e52:	4816      	ldr	r0, [pc, #88]	; (4eac <sdc_init+0x84>)
    4e54:	6065      	str	r5, [r4, #4]
    4e56:	f000 f9e5 	bl	5224 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    4e5a:	2000      	movs	r0, #0
    4e5c:	7060      	strb	r0, [r4, #1]
    4e5e:	70a0      	strb	r0, [r4, #2]
    4e60:	70e0      	strb	r0, [r4, #3]
    4e62:	4601      	mov	r1, r0
    4e64:	2218      	movs	r2, #24
    4e66:	4668      	mov	r0, sp
    4e68:	f008 fcb4 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4e6c:	2218      	movs	r2, #24
    4e6e:	4910      	ldr	r1, [pc, #64]	; (4eb0 <sdc_init+0x88>)
    4e70:	4668      	mov	r0, sp
    4e72:	f008 fc35 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e76:	2218      	movs	r2, #24
    4e78:	4669      	mov	r1, sp
    4e7a:	480e      	ldr	r0, [pc, #56]	; (4eb4 <sdc_init+0x8c>)
    4e7c:	f008 fc30 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    4e80:	f3ef 8410 	mrs	r4, PRIMASK
    4e84:	b672      	cpsid	i
    4e86:	480c      	ldr	r0, [pc, #48]	; (4eb8 <sdc_init+0x90>)
    4e88:	f06f 010c 	mvn.w	r1, #12
    4e8c:	f000 fcf2 	bl	5874 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    4e90:	480a      	ldr	r0, [pc, #40]	; (4ebc <sdc_init+0x94>)
    4e92:	f000 fdbf 	bl	5a14 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    4e96:	b118      	cbz	r0, 4ea0 <sdc_init+0x78>
    4e98:	219a      	movs	r1, #154	; 0x9a
    4e9a:	2003      	movs	r0, #3
    4e9c:	f000 f810 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ea0:	b904      	cbnz	r4, 4ea4 <sdc_init+0x7c>
    4ea2:	b662      	cpsie	i
    4ea4:	2000      	movs	r0, #0
    4ea6:	e7ce      	b.n	4e46 <sdc_init+0x1e>
    4ea8:	20000058 	.word	0x20000058
    4eac:	00004c35 	.word	0x00004c35
    4eb0:	00004fb0 	.word	0x00004fb0
    4eb4:	20001010 	.word	0x20001010
    4eb8:	4000c000 	.word	0x4000c000
    4ebc:	0000505d 	.word	0x0000505d

00004ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    4ec0:	b50e      	push	{r1, r2, r3, lr}
    4ec2:	b672      	cpsid	i
    4ec4:	4a15      	ldr	r2, [pc, #84]	; (4f1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    4ec6:	6855      	ldr	r5, [r2, #4]
    4ec8:	b1d5      	cbz	r5, 4f00 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    4eca:	2200      	movs	r2, #0
    4ecc:	4603      	mov	r3, r0
    4ece:	466e      	mov	r6, sp
    4ed0:	240a      	movs	r4, #10
    4ed2:	e003      	b.n	4edc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    4ed4:	fbb0 f0f4 	udiv	r0, r0, r4
    4ed8:	1c52      	adds	r2, r2, #1
    4eda:	b2d2      	uxtb	r2, r2
    4edc:	2800      	cmp	r0, #0
    4ede:	d1f9      	bne.n	4ed4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    4ee0:	54b0      	strb	r0, [r6, r2]
    4ee2:	e009      	b.n	4ef8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    4ee4:	fbb3 f0f4 	udiv	r0, r3, r4
    4ee8:	fb04 3010 	mls	r0, r4, r0, r3
    4eec:	fbb3 f3f4 	udiv	r3, r3, r4
    4ef0:	1e52      	subs	r2, r2, #1
    4ef2:	b2d2      	uxtb	r2, r2
    4ef4:	3030      	adds	r0, #48	; 0x30
    4ef6:	54b0      	strb	r0, [r6, r2]
    4ef8:	2a00      	cmp	r2, #0
    4efa:	d1f3      	bne.n	4ee4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    4efc:	4630      	mov	r0, r6
    4efe:	47a8      	blx	r5
    4f00:	f3bf 8f4f 	dsb	sy
    4f04:	4806      	ldr	r0, [pc, #24]	; (4f20 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    4f06:	6801      	ldr	r1, [r0, #0]
    4f08:	4a06      	ldr	r2, [pc, #24]	; (4f24 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    4f0a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    4f0e:	4311      	orrs	r1, r2
    4f10:	6001      	str	r1, [r0, #0]
    4f12:	f3bf 8f4f 	dsb	sy
    4f16:	bf00      	nop
    4f18:	e7fd      	b.n	4f16 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    4f1a:	0000      	.short	0x0000
    4f1c:	20000058 	.word	0x20000058
    4f20:	e000ed0c 	.word	0xe000ed0c
    4f24:	05fa0004 	.word	0x05fa0004

00004f28 <sdc_support_dle>:
    4f28:	4806      	ldr	r0, [pc, #24]	; (4f44 <sdc_support_dle+0x1c>)
    4f2a:	b510      	push	{r4, lr}
    4f2c:	7881      	ldrb	r1, [r0, #2]
    4f2e:	7840      	ldrb	r0, [r0, #1]
    4f30:	4301      	orrs	r1, r0
    4f32:	d002      	beq.n	4f3a <sdc_support_dle+0x12>
    4f34:	f04f 30ff 	mov.w	r0, #4294967295
    4f38:	bd10      	pop	{r4, pc}
    4f3a:	f006 fee9 	bl	bd10 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    4f3e:	2000      	movs	r0, #0
    4f40:	bd10      	pop	{r4, pc}
    4f42:	0000      	.short	0x0000
    4f44:	20000058 	.word	0x20000058

00004f48 <sdc_support_le_2m_phy>:
    4f48:	4806      	ldr	r0, [pc, #24]	; (4f64 <sdc_support_le_2m_phy+0x1c>)
    4f4a:	b510      	push	{r4, lr}
    4f4c:	7881      	ldrb	r1, [r0, #2]
    4f4e:	7840      	ldrb	r0, [r0, #1]
    4f50:	4301      	orrs	r1, r0
    4f52:	d002      	beq.n	4f5a <sdc_support_le_2m_phy+0x12>
    4f54:	f04f 30ff 	mov.w	r0, #4294967295
    4f58:	bd10      	pop	{r4, pc}
    4f5a:	f00b fa0b 	bl	10374 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    4f5e:	2000      	movs	r0, #0
    4f60:	bd10      	pop	{r4, pc}
    4f62:	0000      	.short	0x0000
    4f64:	20000058 	.word	0x20000058

00004f68 <sdc_support_master>:
    4f68:	4806      	ldr	r0, [pc, #24]	; (4f84 <sdc_support_master+0x1c>)
    4f6a:	b510      	push	{r4, lr}
    4f6c:	7881      	ldrb	r1, [r0, #2]
    4f6e:	7840      	ldrb	r0, [r0, #1]
    4f70:	4301      	orrs	r1, r0
    4f72:	d002      	beq.n	4f7a <sdc_support_master+0x12>
    4f74:	f04f 30ff 	mov.w	r0, #4294967295
    4f78:	bd10      	pop	{r4, pc}
    4f7a:	f007 f88d 	bl	c098 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    4f7e:	2000      	movs	r0, #0
    4f80:	bd10      	pop	{r4, pc}
    4f82:	0000      	.short	0x0000
    4f84:	20000058 	.word	0x20000058

00004f88 <sdc_support_scan>:
    4f88:	4807      	ldr	r0, [pc, #28]	; (4fa8 <sdc_support_scan+0x20>)
    4f8a:	b510      	push	{r4, lr}
    4f8c:	7881      	ldrb	r1, [r0, #2]
    4f8e:	7842      	ldrb	r2, [r0, #1]
    4f90:	4311      	orrs	r1, r2
    4f92:	d002      	beq.n	4f9a <sdc_support_scan+0x12>
    4f94:	f04f 30ff 	mov.w	r0, #4294967295
    4f98:	bd10      	pop	{r4, pc}
    4f9a:	2101      	movs	r1, #1
    4f9c:	70c1      	strb	r1, [r0, #3]
    4f9e:	f007 f869 	bl	c074 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    4fa2:	2000      	movs	r0, #0
    4fa4:	bd10      	pop	{r4, pc}
    4fa6:	0000      	.short	0x0000
    4fa8:	20000058 	.word	0x20000058
    4fac:	00000001 	.word	0x00000001
    4fb0:	00010101 	.word	0x00010101
    4fb4:	031b1b00 	.word	0x031b1b00
    4fb8:	00000002 	.word	0x00000002
    4fbc:	00001d4c 	.word	0x00001d4c
    4fc0:	001f0003 	.word	0x001f0003
    4fc4:	00000000 	.word	0x00000000
    4fc8:	66c5e70e 	.word	0x66c5e70e
    4fcc:	ac3c1867 	.word	0xac3c1867
    4fd0:	81ccd2b3 	.word	0x81ccd2b3
    4fd4:	c0f1dca3 	.word	0xc0f1dca3
    4fd8:	220236c0 	.word	0x220236c0

00004fdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    4fdc:	4a05      	ldr	r2, [pc, #20]	; (4ff4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    4fde:	b510      	push	{r4, lr}
    4fe0:	6852      	ldr	r2, [r2, #4]
    4fe2:	b112      	cbz	r2, 4fea <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    4fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4fe8:	4710      	bx	r2
    4fea:	2183      	movs	r1, #131	; 0x83
    4fec:	2004      	movs	r0, #4
    4fee:	f7ff ff67 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4ff2:	0000      	.short	0x0000
    4ff4:	20001028 	.word	0x20001028

00004ff8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    4ff8:	4a05      	ldr	r2, [pc, #20]	; (5010 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    4ffa:	b510      	push	{r4, lr}
    4ffc:	6812      	ldr	r2, [r2, #0]
    4ffe:	b112      	cbz	r2, 5006 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    5000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5004:	4710      	bx	r2
    5006:	217d      	movs	r1, #125	; 0x7d
    5008:	2004      	movs	r0, #4
    500a:	f7ff ff59 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    500e:	0000      	.short	0x0000
    5010:	20001028 	.word	0x20001028

00005014 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    5014:	4a05      	ldr	r2, [pc, #20]	; (502c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    5016:	b510      	push	{r4, lr}
    5018:	6892      	ldr	r2, [r2, #8]
    501a:	b112      	cbz	r2, 5022 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    501c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5020:	4710      	bx	r2
    5022:	2189      	movs	r1, #137	; 0x89
    5024:	2004      	movs	r0, #4
    5026:	f7ff ff4b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    502a:	0000      	.short	0x0000
    502c:	20001028 	.word	0x20001028

00005030 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    5030:	4805      	ldr	r0, [pc, #20]	; (5048 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    5032:	6801      	ldr	r1, [r0, #0]
    5034:	b129      	cbz	r1, 5042 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    5036:	6841      	ldr	r1, [r0, #4]
    5038:	b119      	cbz	r1, 5042 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    503a:	6880      	ldr	r0, [r0, #8]
    503c:	b108      	cbz	r0, 5042 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    503e:	2001      	movs	r0, #1
    5040:	4770      	bx	lr
    5042:	2000      	movs	r0, #0
    5044:	4770      	bx	lr
    5046:	0000      	.short	0x0000
    5048:	20001028 	.word	0x20001028

0000504c <sdc_rand_source_register>:
    504c:	4902      	ldr	r1, [pc, #8]	; (5058 <sdc_rand_source_register+0xc>)
    504e:	c80d      	ldmia	r0, {r0, r2, r3}
    5050:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    5054:	2000      	movs	r0, #0
    5056:	4770      	bx	lr
    5058:	20001028 	.word	0x20001028

0000505c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    505c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    505e:	4c12      	ldr	r4, [pc, #72]	; (50a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    5060:	2600      	movs	r6, #0
    5062:	6825      	ldr	r5, [r4, #0]
    5064:	e011      	b.n	508a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    5066:	9800      	ldr	r0, [sp, #0]
    5068:	2802      	cmp	r0, #2
    506a:	d002      	beq.n	5072 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    506c:	2803      	cmp	r0, #3
    506e:	d10c      	bne.n	508a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    5070:	e006      	b.n	5080 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    5072:	6820      	ldr	r0, [r4, #0]
    5074:	b110      	cbz	r0, 507c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    5076:	2000      	movs	r0, #0
    5078:	6026      	str	r6, [r4, #0]
    507a:	e005      	b.n	5088 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    507c:	2128      	movs	r1, #40	; 0x28
    507e:	e00c      	b.n	509a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    5080:	6820      	ldr	r0, [r4, #0]
    5082:	b168      	cbz	r0, 50a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    5084:	2001      	movs	r0, #1
    5086:	6026      	str	r6, [r4, #0]
    5088:	47a8      	blx	r5
    508a:	4668      	mov	r0, sp
    508c:	f000 fc94 	bl	59b8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    5090:	2800      	cmp	r0, #0
    5092:	d0e8      	beq.n	5066 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    5094:	2805      	cmp	r0, #5
    5096:	d005      	beq.n	50a4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    5098:	2135      	movs	r1, #53	; 0x35
    509a:	2004      	movs	r0, #4
    509c:	f7ff ff10 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50a0:	212d      	movs	r1, #45	; 0x2d
    50a2:	e7fa      	b.n	509a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    50a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    50a6:	0000      	.short	0x0000
    50a8:	20000060 	.word	0x20000060
    50ac:	b570      	push	{r4, r5, r6, lr}
    50ae:	4c14      	ldr	r4, [pc, #80]	; (5100 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    50b0:	4605      	mov	r5, r0
    50b2:	7820      	ldrb	r0, [r4, #0]
    50b4:	b140      	cbz	r0, 50c8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    50b6:	78a2      	ldrb	r2, [r4, #2]
    50b8:	1c61      	adds	r1, r4, #1
    50ba:	4628      	mov	r0, r5
    50bc:	1c92      	adds	r2, r2, #2
    50be:	f008 fb0f 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    50c2:	2000      	movs	r0, #0
    50c4:	7020      	strb	r0, [r4, #0]
    50c6:	e013      	b.n	50f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    50c8:	480e      	ldr	r0, [pc, #56]	; (5104 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    50ca:	f001 ffc9 	bl	7060 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    50ce:	2800      	cmp	r0, #0
    50d0:	d00f      	beq.n	50f2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    50d2:	480c      	ldr	r0, [pc, #48]	; (5104 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    50d4:	7800      	ldrb	r0, [r0, #0]
    50d6:	2814      	cmp	r0, #20
    50d8:	d104      	bne.n	50e4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    50da:	210a      	movs	r1, #10
    50dc:	203e      	movs	r0, #62	; 0x3e
    50de:	f008 fc50 	bl	d982 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    50e2:	b138      	cbz	r0, 50f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    50e4:	4907      	ldr	r1, [pc, #28]	; (5104 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    50e6:	4628      	mov	r0, r5
    50e8:	f008 fca9 	bl	da3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    50ec:	2800      	cmp	r0, #0
    50ee:	d000      	beq.n	50f2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    50f0:	2001      	movs	r0, #1
    50f2:	bd70      	pop	{r4, r5, r6, pc}
    50f4:	4903      	ldr	r1, [pc, #12]	; (5104 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    50f6:	4628      	mov	r0, r5
    50f8:	f008 fede 	bl	deb8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    50fc:	e7f8      	b.n	50f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    50fe:	0000      	.short	0x0000
    5100:	2000113c 	.word	0x2000113c
    5104:	20001034 	.word	0x20001034
    5108:	b570      	push	{r4, r5, r6, lr}
    510a:	780a      	ldrb	r2, [r1, #0]
    510c:	7082      	strb	r2, [r0, #2]
    510e:	b33a      	cbz	r2, 5160 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    5110:	2a01      	cmp	r2, #1
    5112:	d825      	bhi.n	5160 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    5114:	2313      	movs	r3, #19
    5116:	7003      	strb	r3, [r0, #0]
    5118:	2300      	movs	r3, #0
    511a:	e00a      	b.n	5132 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    511c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    5120:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    5124:	78a6      	ldrb	r6, [r4, #2]
    5126:	70ee      	strb	r6, [r5, #3]
    5128:	8864      	ldrh	r4, [r4, #2]
    512a:	0a24      	lsrs	r4, r4, #8
    512c:	1c5b      	adds	r3, r3, #1
    512e:	712c      	strb	r4, [r5, #4]
    5130:	b2db      	uxtb	r3, r3
    5132:	4293      	cmp	r3, r2
    5134:	d3f2      	bcc.n	511c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    5136:	2300      	movs	r3, #0
    5138:	e00b      	b.n	5152 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    513a:	bf00      	nop
    513c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    5140:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    5144:	792e      	ldrb	r6, [r5, #4]
    5146:	7166      	strb	r6, [r4, #5]
    5148:	88ad      	ldrh	r5, [r5, #4]
    514a:	0a2d      	lsrs	r5, r5, #8
    514c:	1c5b      	adds	r3, r3, #1
    514e:	71a5      	strb	r5, [r4, #6]
    5150:	b2db      	uxtb	r3, r3
    5152:	4293      	cmp	r3, r2
    5154:	d3f2      	bcc.n	513c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    5156:	2101      	movs	r1, #1
    5158:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    515c:	b2c0      	uxtb	r0, r0
    515e:	bd70      	pop	{r4, r5, r6, pc}
    5160:	2000      	movs	r0, #0
    5162:	bd70      	pop	{r4, r5, r6, pc}

00005164 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    5164:	2101      	movs	r1, #1
    5166:	4a0c      	ldr	r2, [pc, #48]	; (5198 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    5168:	2840      	cmp	r0, #64	; 0x40
    516a:	d20c      	bcs.n	5186 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    516c:	2820      	cmp	r0, #32
    516e:	d803      	bhi.n	5178 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    5170:	1e40      	subs	r0, r0, #1
    5172:	4081      	lsls	r1, r0
    5174:	6810      	ldr	r0, [r2, #0]
    5176:	e002      	b.n	517e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    5178:	3821      	subs	r0, #33	; 0x21
    517a:	4081      	lsls	r1, r0
    517c:	6850      	ldr	r0, [r2, #4]
    517e:	4201      	tst	r1, r0
    5180:	d107      	bne.n	5192 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    5182:	2000      	movs	r0, #0
    5184:	4770      	bx	lr
    5186:	28ff      	cmp	r0, #255	; 0xff
    5188:	d003      	beq.n	5192 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    518a:	3840      	subs	r0, #64	; 0x40
    518c:	4081      	lsls	r1, r0
    518e:	6890      	ldr	r0, [r2, #8]
    5190:	e7f5      	b.n	517e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    5192:	2001      	movs	r0, #1
    5194:	4770      	bx	lr
    5196:	0000      	.short	0x0000
    5198:	20000064 	.word	0x20000064

0000519c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    519c:	2101      	movs	r1, #1
    519e:	1e40      	subs	r0, r0, #1
    51a0:	4081      	lsls	r1, r0
    51a2:	4804      	ldr	r0, [pc, #16]	; (51b4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    51a4:	68c0      	ldr	r0, [r0, #12]
    51a6:	4201      	tst	r1, r0
    51a8:	d001      	beq.n	51ae <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    51aa:	2001      	movs	r0, #1
    51ac:	4770      	bx	lr
    51ae:	2000      	movs	r0, #0
    51b0:	4770      	bx	lr
    51b2:	0000      	.short	0x0000
    51b4:	20000064 	.word	0x20000064

000051b8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    51b8:	4901      	ldr	r1, [pc, #4]	; (51c0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    51ba:	6800      	ldr	r0, [r0, #0]
    51bc:	60c8      	str	r0, [r1, #12]
    51be:	4770      	bx	lr
    51c0:	20000064 	.word	0x20000064

000051c4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    51c4:	4904      	ldr	r1, [pc, #16]	; (51d8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    51c6:	6802      	ldr	r2, [r0, #0]
    51c8:	6840      	ldr	r0, [r0, #4]
    51ca:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    51ce:	600a      	str	r2, [r1, #0]
    51d0:	4a02      	ldr	r2, [pc, #8]	; (51dc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    51d2:	4310      	orrs	r0, r2
    51d4:	6048      	str	r0, [r1, #4]
    51d6:	4770      	bx	lr
    51d8:	20000064 	.word	0x20000064
    51dc:	024007f8 	.word	0x024007f8

000051e0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    51e0:	4901      	ldr	r1, [pc, #4]	; (51e8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    51e2:	6800      	ldr	r0, [r0, #0]
    51e4:	6088      	str	r0, [r1, #8]
    51e6:	4770      	bx	lr
    51e8:	20000064 	.word	0x20000064

000051ec <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    51ec:	4805      	ldr	r0, [pc, #20]	; (5204 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    51ee:	f04f 31ff 	mov.w	r1, #4294967295
    51f2:	6001      	str	r1, [r0, #0]
    51f4:	0cc9      	lsrs	r1, r1, #19
    51f6:	6041      	str	r1, [r0, #4]
    51f8:	2100      	movs	r1, #0
    51fa:	6081      	str	r1, [r0, #8]
    51fc:	211f      	movs	r1, #31
    51fe:	60c1      	str	r1, [r0, #12]
    5200:	4770      	bx	lr
    5202:	0000      	.short	0x0000
    5204:	20000064 	.word	0x20000064

00005208 <sdc_hci_cmd_cb_reset>:
    5208:	b510      	push	{r4, lr}
    520a:	f7ff ffef 	bl	51ec <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    520e:	f00b f88a 	bl	10326 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    5212:	4604      	mov	r4, r0
    5214:	4802      	ldr	r0, [pc, #8]	; (5220 <sdc_hci_cmd_cb_reset+0x18>)
    5216:	6800      	ldr	r0, [r0, #0]
    5218:	b100      	cbz	r0, 521c <sdc_hci_cmd_cb_reset+0x14>
    521a:	4780      	blx	r0
    521c:	4620      	mov	r0, r4
    521e:	bd10      	pop	{r4, pc}
    5220:	20000074 	.word	0x20000074

00005224 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    5224:	4901      	ldr	r1, [pc, #4]	; (522c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    5226:	6008      	str	r0, [r1, #0]
    5228:	4770      	bx	lr
    522a:	0000      	.short	0x0000
    522c:	20000074 	.word	0x20000074

00005230 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    5230:	2102      	movs	r1, #2
    5232:	8001      	strh	r1, [r0, #0]
    5234:	8041      	strh	r1, [r0, #2]
    5236:	2100      	movs	r1, #0
    5238:	7101      	strb	r1, [r0, #4]
    523a:	210e      	movs	r1, #14
    523c:	7141      	strb	r1, [r0, #5]
    523e:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    5242:	80c1      	strh	r1, [r0, #6]
    5244:	4901      	ldr	r1, [pc, #4]	; (524c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    5246:	6081      	str	r1, [r0, #8]
    5248:	2000      	movs	r0, #0
    524a:	4770      	bx	lr
    524c:	3c186766 	.word	0x3c186766

00005250 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    5250:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    5252:	4604      	mov	r4, r0
    5254:	4669      	mov	r1, sp
    5256:	f009 faed 	bl	e834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    525a:	b170      	cbz	r0, 527a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    525c:	f240 215a 	movw	r1, #602	; 0x25a
    5260:	e008      	b.n	5274 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    5262:	bf00      	nop
    5264:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    5268:	4621      	mov	r1, r4
    526a:	f000 f8a7 	bl	53bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    526e:	b120      	cbz	r0, 527a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    5270:	f240 215f 	movw	r1, #607	; 0x25f
    5274:	2017      	movs	r0, #23
    5276:	f7ff fe23 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    527a:	4668      	mov	r0, sp
    527c:	f000 f850 	bl	5320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    5280:	2800      	cmp	r0, #0
    5282:	d0ef      	beq.n	5264 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    5284:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00005288 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    5288:	b510      	push	{r4, lr}
    528a:	b120      	cbz	r0, 5296 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    528c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    5290:	2017      	movs	r0, #23
    5292:	f7ff fe15 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5296:	4801      	ldr	r0, [pc, #4]	; (529c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    5298:	7800      	ldrb	r0, [r0, #0]
    529a:	bd10      	pop	{r4, pc}
    529c:	20001240 	.word	0x20001240

000052a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    52a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    52a2:	4605      	mov	r5, r0
    52a4:	7808      	ldrb	r0, [r1, #0]
    52a6:	784a      	ldrb	r2, [r1, #1]
    52a8:	4290      	cmp	r0, r2
    52aa:	d902      	bls.n	52b2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    52ac:	f240 1163 	movw	r1, #355	; 0x163
    52b0:	e00a      	b.n	52c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    52b2:	9500      	str	r5, [sp, #0]
    52b4:	b15d      	cbz	r5, 52ce <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    52b6:	2600      	movs	r6, #0
    52b8:	1ce8      	adds	r0, r5, #3
    52ba:	784c      	ldrb	r4, [r1, #1]
    52bc:	f020 0003 	bic.w	r0, r0, #3
    52c0:	42a8      	cmp	r0, r5
    52c2:	d006      	beq.n	52d2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    52c4:	f240 1179 	movw	r1, #377	; 0x179
    52c8:	2017      	movs	r0, #23
    52ca:	f7ff fdf9 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    52ce:	2601      	movs	r6, #1
    52d0:	e7f2      	b.n	52b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    52d2:	4f12      	ldr	r7, [pc, #72]	; (531c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    52d4:	4631      	mov	r1, r6
    52d6:	4668      	mov	r0, sp
    52d8:	703c      	strb	r4, [r7, #0]
    52da:	f000 f8e1 	bl	54a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    52de:	2000      	movs	r0, #0
    52e0:	4603      	mov	r3, r0
    52e2:	9900      	ldr	r1, [sp, #0]
    52e4:	1cc9      	adds	r1, r1, #3
    52e6:	f021 0103 	bic.w	r1, r1, #3
    52ea:	9100      	str	r1, [sp, #0]
    52ec:	b966      	cbnz	r6, 5308 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    52ee:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    52f2:	6091      	str	r1, [r2, #8]
    52f4:	2100      	movs	r1, #0
    52f6:	e005      	b.n	5304 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    52f8:	f8d2 c008 	ldr.w	ip, [r2, #8]
    52fc:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    5300:	1c49      	adds	r1, r1, #1
    5302:	b2c9      	uxtb	r1, r1
    5304:	42a1      	cmp	r1, r4
    5306:	d3f7      	bcc.n	52f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    5308:	9900      	ldr	r1, [sp, #0]
    530a:	1c40      	adds	r0, r0, #1
    530c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    5310:	9100      	str	r1, [sp, #0]
    5312:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    5316:	d0e4      	beq.n	52e2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    5318:	1b48      	subs	r0, r1, r5
    531a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    531c:	20001240 	.word	0x20001240

00005320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    5320:	b570      	push	{r4, r5, r6, lr}
    5322:	4604      	mov	r4, r0
    5324:	f009 fae0 	bl	e8e8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    5328:	b108      	cbz	r0, 532e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    532a:	2010      	movs	r0, #16
    532c:	bd70      	pop	{r4, r5, r6, pc}
    532e:	7825      	ldrb	r5, [r4, #0]
    5330:	f000 f8f2 	bl	5518 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    5334:	4602      	mov	r2, r0
    5336:	480c      	ldr	r0, [pc, #48]	; (5368 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    5338:	8861      	ldrh	r1, [r4, #2]
    533a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    533e:	e00e      	b.n	535e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    5340:	6883      	ldr	r3, [r0, #8]
    5342:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    5346:	b143      	cbz	r3, 535a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    5348:	1c4a      	adds	r2, r1, #1
    534a:	8062      	strh	r2, [r4, #2]
    534c:	80a1      	strh	r1, [r4, #4]
    534e:	6880      	ldr	r0, [r0, #8]
    5350:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    5354:	60a0      	str	r0, [r4, #8]
    5356:	2000      	movs	r0, #0
    5358:	bd70      	pop	{r4, r5, r6, pc}
    535a:	1c49      	adds	r1, r1, #1
    535c:	b289      	uxth	r1, r1
    535e:	4291      	cmp	r1, r2
    5360:	d3ee      	bcc.n	5340 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    5362:	8061      	strh	r1, [r4, #2]
    5364:	2005      	movs	r0, #5
    5366:	bd70      	pop	{r4, r5, r6, pc}
    5368:	20001240 	.word	0x20001240

0000536c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    536c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5370:	b949      	cbnz	r1, 5386 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    5372:	4c11      	ldr	r4, [pc, #68]	; (53b8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    5374:	2700      	movs	r7, #0
    5376:	463b      	mov	r3, r7
    5378:	f64f 76ff 	movw	r6, #65535	; 0xffff
    537c:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    5380:	f814 c001 	ldrb.w	ip, [r4, r1]
    5384:	e00d      	b.n	53a2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    5386:	2000      	movs	r0, #0
    5388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    538c:	19dc      	adds	r4, r3, r7
    538e:	f8d5 e008 	ldr.w	lr, [r5, #8]
    5392:	b2a4      	uxth	r4, r4
    5394:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    5398:	f1be 0f00 	cmp.w	lr, #0
    539c:	d004      	beq.n	53a8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    539e:	1c5b      	adds	r3, r3, #1
    53a0:	b29b      	uxth	r3, r3
    53a2:	459c      	cmp	ip, r3
    53a4:	d8f2      	bhi.n	538c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    53a6:	4634      	mov	r4, r6
    53a8:	8004      	strh	r4, [r0, #0]
    53aa:	4620      	mov	r0, r4
    53ac:	42b4      	cmp	r4, r6
    53ae:	d0ea      	beq.n	5386 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    53b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    53b4:	f000 b82c 	b.w	5410 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    53b8:	20001240 	.word	0x20001240

000053bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    53bc:	b570      	push	{r4, r5, r6, lr}
    53be:	4606      	mov	r6, r0
    53c0:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    53c4:	f243 0502 	movw	r5, #12290	; 0x3002
    53c8:	38ff      	subs	r0, #255	; 0xff
    53ca:	d01a      	beq.n	5402 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    53cc:	b109      	cbz	r1, 53d2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    53ce:	2007      	movs	r0, #7
    53d0:	bd70      	pop	{r4, r5, r6, pc}
    53d2:	4630      	mov	r0, r6
    53d4:	f000 f854 	bl	5480 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    53d8:	0004      	movs	r4, r0
    53da:	d012      	beq.n	5402 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    53dc:	480a      	ldr	r0, [pc, #40]	; (5408 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    53de:	4621      	mov	r1, r4
    53e0:	6802      	ldr	r2, [r0, #0]
    53e2:	4630      	mov	r0, r6
    53e4:	4790      	blx	r2
    53e6:	4d09      	ldr	r5, [pc, #36]	; (540c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    53e8:	2000      	movs	r0, #0
    53ea:	68a9      	ldr	r1, [r5, #8]
    53ec:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    53f0:	f000 f888 	bl	5504 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    53f4:	4602      	mov	r2, r0
    53f6:	4621      	mov	r1, r4
    53f8:	6868      	ldr	r0, [r5, #4]
    53fa:	f009 fa05 	bl	e808 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    53fe:	2000      	movs	r0, #0
    5400:	bd70      	pop	{r4, r5, r6, pc}
    5402:	4628      	mov	r0, r5
    5404:	bd70      	pop	{r4, r5, r6, pc}
    5406:	0000      	.short	0x0000
    5408:	0000552c 	.word	0x0000552c
    540c:	20001240 	.word	0x20001240
    5410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5414:	4690      	mov	r8, r2
    5416:	460e      	mov	r6, r1
    5418:	4607      	mov	r7, r0
    541a:	f009 fa1b 	bl	e854 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    541e:	b148      	cbz	r0, 5434 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    5420:	4815      	ldr	r0, [pc, #84]	; (5478 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    5422:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    5426:	68a8      	ldr	r0, [r5, #8]
    5428:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    542c:	b128      	cbz	r0, 543a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    542e:	f44f 719d 	mov.w	r1, #314	; 0x13a
    5432:	e014      	b.n	545e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    5434:	f240 1139 	movw	r1, #313	; 0x139
    5438:	e011      	b.n	545e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    543a:	6868      	ldr	r0, [r5, #4]
    543c:	2800      	cmp	r0, #0
    543e:	d018      	beq.n	5472 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    5440:	4630      	mov	r0, r6
    5442:	f000 f85f 	bl	5504 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    5446:	4601      	mov	r1, r0
    5448:	6868      	ldr	r0, [r5, #4]
    544a:	f009 f98f 	bl	e76c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    544e:	0004      	movs	r4, r0
    5450:	d00e      	beq.n	5470 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    5452:	68a8      	ldr	r0, [r5, #8]
    5454:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    5458:	b126      	cbz	r6, 5464 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    545a:	f240 1145 	movw	r1, #325	; 0x145
    545e:	2017      	movs	r0, #23
    5460:	f7ff fd2e 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5464:	4805      	ldr	r0, [pc, #20]	; (547c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    5466:	4642      	mov	r2, r8
    5468:	4621      	mov	r1, r4
    546a:	6803      	ldr	r3, [r0, #0]
    546c:	4638      	mov	r0, r7
    546e:	4798      	blx	r3
    5470:	4620      	mov	r0, r4
    5472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5476:	0000      	.short	0x0000
    5478:	20001240 	.word	0x20001240
    547c:	00005528 	.word	0x00005528
    5480:	b570      	push	{r4, r5, r6, lr}
    5482:	460c      	mov	r4, r1
    5484:	4605      	mov	r5, r0
    5486:	f009 f9e5 	bl	e854 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    548a:	2800      	cmp	r0, #0
    548c:	d005      	beq.n	549a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    548e:	4803      	ldr	r0, [pc, #12]	; (549c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    5490:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    5494:	6880      	ldr	r0, [r0, #8]
    5496:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    549a:	bd70      	pop	{r4, r5, r6, pc}
    549c:	20001240 	.word	0x20001240
    54a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    54a4:	4e16      	ldr	r6, [pc, #88]	; (5500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    54a6:	4688      	mov	r8, r1
    54a8:	4605      	mov	r5, r0
    54aa:	2400      	movs	r4, #0
    54ac:	6828      	ldr	r0, [r5, #0]
    54ae:	1cc0      	adds	r0, r0, #3
    54b0:	f020 0003 	bic.w	r0, r0, #3
    54b4:	6028      	str	r0, [r5, #0]
    54b6:	4620      	mov	r0, r4
    54b8:	f000 f824 	bl	5504 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    54bc:	5d31      	ldrb	r1, [r6, r4]
    54be:	4348      	muls	r0, r1
    54c0:	f1b8 0f00 	cmp.w	r8, #0
    54c4:	d001      	beq.n	54ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    54c6:	2200      	movs	r2, #0
    54c8:	e000      	b.n	54cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    54ca:	682a      	ldr	r2, [r5, #0]
    54cc:	4601      	mov	r1, r0
    54ce:	9200      	str	r2, [sp, #0]
    54d0:	b132      	cbz	r2, 54e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    54d2:	2700      	movs	r7, #0
    54d4:	ea4f 000d 	mov.w	r0, sp
    54d8:	f009 f975 	bl	e7c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    54dc:	b11f      	cbz	r7, 54e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    54de:	e006      	b.n	54ee <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    54e0:	2701      	movs	r7, #1
    54e2:	2000      	movs	r0, #0
    54e4:	e7f8      	b.n	54d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    54e6:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    54ea:	9a00      	ldr	r2, [sp, #0]
    54ec:	604a      	str	r2, [r1, #4]
    54ee:	6829      	ldr	r1, [r5, #0]
    54f0:	1c64      	adds	r4, r4, #1
    54f2:	4408      	add	r0, r1
    54f4:	6028      	str	r0, [r5, #0]
    54f6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    54fa:	d0d7      	beq.n	54ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    54fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5500:	20001240 	.word	0x20001240
    5504:	4903      	ldr	r1, [pc, #12]	; (5514 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    5506:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    550a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    550e:	1cc0      	adds	r0, r0, #3
    5510:	4008      	ands	r0, r1
    5512:	4770      	bx	lr
    5514:	00005524 	.word	0x00005524
    5518:	4801      	ldr	r0, [pc, #4]	; (5520 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    551a:	7800      	ldrb	r0, [r0, #0]
    551c:	4770      	bx	lr
    551e:	0000      	.short	0x0000
    5520:	20001240 	.word	0x20001240
    5524:	000001e0 	.word	0x000001e0
    5528:	0000e869 	.word	0x0000e869
    552c:	0000fa01 	.word	0x0000fa01

00005530 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    5530:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5534:	4c26      	ldr	r4, [pc, #152]	; (55d0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    5536:	4680      	mov	r8, r0
    5538:	b081      	sub	sp, #4
    553a:	6820      	ldr	r0, [r4, #0]
    553c:	469a      	mov	sl, r3
    553e:	4693      	mov	fp, r2
    5540:	b158      	cbz	r0, 555a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    5542:	7a02      	ldrb	r2, [r0, #8]
    5544:	4542      	cmp	r2, r8
    5546:	d903      	bls.n	5550 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    5548:	6841      	ldr	r1, [r0, #4]
    554a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    554e:	b140      	cbz	r0, 5562 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    5550:	f243 0002 	movw	r0, #12290	; 0x3002
    5554:	b005      	add	sp, #20
    5556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    555a:	21a5      	movs	r1, #165	; 0xa5
    555c:	2018      	movs	r0, #24
    555e:	f7ff fcaf 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5562:	4619      	mov	r1, r3
    5564:	9802      	ldr	r0, [sp, #8]
    5566:	f009 f997 	bl	e898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    556a:	b286      	uxth	r6, r0
    556c:	4658      	mov	r0, fp
    556e:	990e      	ldr	r1, [sp, #56]	; 0x38
    5570:	f009 f989 	bl	e886 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    5574:	b285      	uxth	r5, r0
    5576:	1970      	adds	r0, r6, r5
    5578:	1d00      	adds	r0, r0, #4
    557a:	b287      	uxth	r7, r0
    557c:	6820      	ldr	r0, [r4, #0]
    557e:	46a1      	mov	r9, r4
    5580:	4639      	mov	r1, r7
    5582:	6800      	ldr	r0, [r0, #0]
    5584:	f009 f8f2 	bl	e76c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    5588:	0004      	movs	r4, r0
    558a:	d01f      	beq.n	55cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    558c:	8067      	strh	r7, [r4, #2]
    558e:	8025      	strh	r5, [r4, #0]
    5590:	4629      	mov	r1, r5
    5592:	1d20      	adds	r0, r4, #4
    5594:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    5596:	4607      	mov	r7, r0
    5598:	465a      	mov	r2, fp
    559a:	2301      	movs	r3, #1
    559c:	9500      	str	r5, [sp, #0]
    559e:	f009 f845 	bl	e62c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    55a2:	8820      	ldrh	r0, [r4, #0]
    55a4:	4631      	mov	r1, r6
    55a6:	4438      	add	r0, r7
    55a8:	2301      	movs	r3, #1
    55aa:	9a02      	ldr	r2, [sp, #8]
    55ac:	f8cd a000 	str.w	sl, [sp]
    55b0:	f009 f83c 	bl	e62c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    55b4:	8820      	ldrh	r0, [r4, #0]
    55b6:	19c1      	adds	r1, r0, r7
    55b8:	4638      	mov	r0, r7
    55ba:	f009 f868 	bl	e68e <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    55be:	f8d9 0000 	ldr.w	r0, [r9]
    55c2:	6841      	ldr	r1, [r0, #4]
    55c4:	2000      	movs	r0, #0
    55c6:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    55ca:	e7c3      	b.n	5554 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    55cc:	2004      	movs	r0, #4
    55ce:	e7c1      	b.n	5554 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    55d0:	20000078 	.word	0x20000078

000055d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    55d4:	b570      	push	{r4, r5, r6, lr}
    55d6:	4c14      	ldr	r4, [pc, #80]	; (5628 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    55d8:	6823      	ldr	r3, [r4, #0]
    55da:	b18b      	cbz	r3, 5600 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    55dc:	7a19      	ldrb	r1, [r3, #8]
    55de:	4281      	cmp	r1, r0
    55e0:	d912      	bls.n	5608 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    55e2:	685a      	ldr	r2, [r3, #4]
    55e4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    55e8:	b171      	cbz	r1, 5608 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    55ea:	2500      	movs	r5, #0
    55ec:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    55f0:	884a      	ldrh	r2, [r1, #2]
    55f2:	6818      	ldr	r0, [r3, #0]
    55f4:	f009 f908 	bl	e808 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    55f8:	6821      	ldr	r1, [r4, #0]
    55fa:	2000      	movs	r0, #0
    55fc:	7a0a      	ldrb	r2, [r1, #8]
    55fe:	e00c      	b.n	561a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    5600:	21c8      	movs	r1, #200	; 0xc8
    5602:	2018      	movs	r0, #24
    5604:	f7ff fc5c 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5608:	f243 0002 	movw	r0, #12290	; 0x3002
    560c:	bd70      	pop	{r4, r5, r6, pc}
    560e:	684b      	ldr	r3, [r1, #4]
    5610:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    5614:	b933      	cbnz	r3, 5624 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    5616:	1c40      	adds	r0, r0, #1
    5618:	b2c0      	uxtb	r0, r0
    561a:	4282      	cmp	r2, r0
    561c:	d8f7      	bhi.n	560e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    561e:	6808      	ldr	r0, [r1, #0]
    5620:	f009 f8e7 	bl	e7f2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    5624:	2000      	movs	r0, #0
    5626:	bd70      	pop	{r4, r5, r6, pc}
    5628:	20000078 	.word	0x20000078

0000562c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    562c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5630:	460d      	mov	r5, r1
    5632:	0004      	movs	r4, r0
    5634:	4690      	mov	r8, r2
    5636:	f04f 0600 	mov.w	r6, #0
    563a:	d009      	beq.n	5650 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    563c:	2700      	movs	r7, #0
    563e:	1ce0      	adds	r0, r4, #3
    5640:	f020 0003 	bic.w	r0, r0, #3
    5644:	42a0      	cmp	r0, r4
    5646:	d005      	beq.n	5654 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    5648:	2186      	movs	r1, #134	; 0x86
    564a:	2018      	movs	r0, #24
    564c:	f7ff fc38 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5650:	2701      	movs	r7, #1
    5652:	e7f4      	b.n	563e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    5654:	b1cd      	cbz	r5, 568a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5656:	4611      	mov	r1, r2
    5658:	2000      	movs	r0, #0
    565a:	f009 f8b4 	bl	e7c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    565e:	300c      	adds	r0, #12
    5660:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    5664:	b98f      	cbnz	r7, 568a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    5666:	4f0a      	ldr	r7, [pc, #40]	; (5690 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    5668:	f104 000c 	add.w	r0, r4, #12
    566c:	00aa      	lsls	r2, r5, #2
    566e:	603c      	str	r4, [r7, #0]
    5670:	7225      	strb	r5, [r4, #8]
    5672:	6060      	str	r0, [r4, #4]
    5674:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    5678:	6020      	str	r0, [r4, #0]
    567a:	2100      	movs	r1, #0
    567c:	6860      	ldr	r0, [r4, #4]
    567e:	f008 f8a9 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5682:	4641      	mov	r1, r8
    5684:	6838      	ldr	r0, [r7, #0]
    5686:	f009 f89e 	bl	e7c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    568a:	4630      	mov	r0, r6
    568c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5690:	20000078 	.word	0x20000078

00005694 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    5694:	b570      	push	{r4, r5, r6, lr}
    5696:	4d08      	ldr	r5, [pc, #32]	; (56b8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    5698:	6828      	ldr	r0, [r5, #0]
    569a:	2800      	cmp	r0, #0
    569c:	d00a      	beq.n	56b4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    569e:	2400      	movs	r4, #0
    56a0:	e004      	b.n	56ac <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    56a2:	4620      	mov	r0, r4
    56a4:	f7ff ff96 	bl	55d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    56a8:	1c64      	adds	r4, r4, #1
    56aa:	b2e4      	uxtb	r4, r4
    56ac:	6828      	ldr	r0, [r5, #0]
    56ae:	7a00      	ldrb	r0, [r0, #8]
    56b0:	42a0      	cmp	r0, r4
    56b2:	d8f6      	bhi.n	56a2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    56b4:	bd70      	pop	{r4, r5, r6, pc}
    56b6:	0000      	.short	0x0000
    56b8:	20000078 	.word	0x20000078

000056bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    56bc:	4909      	ldr	r1, [pc, #36]	; (56e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    56be:	b510      	push	{r4, lr}
    56c0:	4602      	mov	r2, r0
    56c2:	6809      	ldr	r1, [r1, #0]
    56c4:	2000      	movs	r0, #0
    56c6:	b149      	cbz	r1, 56dc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    56c8:	7a0b      	ldrb	r3, [r1, #8]
    56ca:	4293      	cmp	r3, r2
    56cc:	d905      	bls.n	56da <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    56ce:	6849      	ldr	r1, [r1, #4]
    56d0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    56d4:	2900      	cmp	r1, #0
    56d6:	d000      	beq.n	56da <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    56d8:	1d08      	adds	r0, r1, #4
    56da:	bd10      	pop	{r4, pc}
    56dc:	21ee      	movs	r1, #238	; 0xee
    56de:	2018      	movs	r0, #24
    56e0:	f7ff fbee 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    56e4:	20000078 	.word	0x20000078

000056e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    56e8:	490a      	ldr	r1, [pc, #40]	; (5714 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    56ea:	b510      	push	{r4, lr}
    56ec:	4602      	mov	r2, r0
    56ee:	6809      	ldr	r1, [r1, #0]
    56f0:	2000      	movs	r0, #0
    56f2:	b159      	cbz	r1, 570c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    56f4:	7a0b      	ldrb	r3, [r1, #8]
    56f6:	4293      	cmp	r3, r2
    56f8:	d907      	bls.n	570a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    56fa:	6849      	ldr	r1, [r1, #4]
    56fc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    5700:	2900      	cmp	r1, #0
    5702:	d002      	beq.n	570a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    5704:	f831 0b04 	ldrh.w	r0, [r1], #4
    5708:	4408      	add	r0, r1
    570a:	bd10      	pop	{r4, pc}
    570c:	21fc      	movs	r1, #252	; 0xfc
    570e:	2018      	movs	r0, #24
    5710:	f7ff fbd6 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5714:	20000078 	.word	0x20000078

00005718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    5718:	4801      	ldr	r0, [pc, #4]	; (5720 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    571a:	7840      	ldrb	r0, [r0, #1]
    571c:	4770      	bx	lr
    571e:	0000      	.short	0x0000
    5720:	2000007c 	.word	0x2000007c

00005724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    5724:	4801      	ldr	r0, [pc, #4]	; (572c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    5726:	6840      	ldr	r0, [r0, #4]
    5728:	4770      	bx	lr
    572a:	0000      	.short	0x0000
    572c:	2000007c 	.word	0x2000007c

00005730 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    5730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5734:	460c      	mov	r4, r1
    5736:	4607      	mov	r7, r0
    5738:	4616      	mov	r6, r2
    573a:	211c      	movs	r1, #28
    573c:	4610      	mov	r0, r2
    573e:	460d      	mov	r5, r1
    5740:	4622      	mov	r2, r4
    5742:	f008 ffce 	bl	e6e2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    5746:	4680      	mov	r8, r0
    5748:	b157      	cbz	r7, 5760 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    574a:	4638      	mov	r0, r7
    574c:	4641      	mov	r1, r8
    574e:	4632      	mov	r2, r6
    5750:	462b      	mov	r3, r5
    5752:	9400      	str	r4, [sp, #0]
    5754:	f008 ff6a 	bl	e62c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    5758:	4803      	ldr	r0, [pc, #12]	; (5768 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    575a:	6047      	str	r7, [r0, #4]
    575c:	7004      	strb	r4, [r0, #0]
    575e:	7046      	strb	r6, [r0, #1]
    5760:	4640      	mov	r0, r8
    5762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    5766:	0000      	.short	0x0000
    5768:	2000007c 	.word	0x2000007c

0000576c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    576c:	4802      	ldr	r0, [pc, #8]	; (5778 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    576e:	7842      	ldrb	r2, [r0, #1]
    5770:	7801      	ldrb	r1, [r0, #0]
    5772:	6840      	ldr	r0, [r0, #4]
    5774:	f7ff bfdc 	b.w	5730 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    5778:	2000007c 	.word	0x2000007c
    577c:	4909      	ldr	r1, [pc, #36]	; (57a4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    577e:	b510      	push	{r4, lr}
    5780:	4807      	ldr	r0, [pc, #28]	; (57a0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    5782:	6008      	str	r0, [r1, #0]
    5784:	4b08      	ldr	r3, [pc, #32]	; (57a8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    5786:	2011      	movs	r0, #17
    5788:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    578c:	2200      	movs	r2, #0
    578e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    5792:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    5796:	1c40      	adds	r0, r0, #1
    5798:	b2c0      	uxtb	r0, r0
    579a:	2814      	cmp	r0, #20
    579c:	d3f4      	bcc.n	5788 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    579e:	bd10      	pop	{r4, pc}
    57a0:	fffe0000 	.word	0xfffe0000
    57a4:	4001f508 	.word	0x4001f508
    57a8:	4001f000 	.word	0x4001f000
    57ac:	b570      	push	{r4, r5, r6, lr}
    57ae:	2420      	movs	r4, #32
    57b0:	2100      	movs	r1, #0
    57b2:	2301      	movs	r3, #1
    57b4:	fa20 f201 	lsr.w	r2, r0, r1
    57b8:	07d2      	lsls	r2, r2, #31
    57ba:	d020      	beq.n	57fe <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    57bc:	b24a      	sxtb	r2, r1
    57be:	2a00      	cmp	r2, #0
    57c0:	db10      	blt.n	57e4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    57c2:	bf00      	nop
    57c4:	ea4f 1652 	mov.w	r6, r2, lsr #5
    57c8:	ea4f 0686 	mov.w	r6, r6, lsl #2
    57cc:	f002 051f 	and.w	r5, r2, #31
    57d0:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    57d4:	fa03 f505 	lsl.w	r5, r3, r5
    57d8:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    57dc:	f3bf 8f4f 	dsb	sy
    57e0:	f3bf 8f6f 	isb	sy
    57e4:	db0b      	blt.n	57fe <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    57e6:	f002 051f 	and.w	r5, r2, #31
    57ea:	ea4f 1252 	mov.w	r2, r2, lsr #5
    57ee:	ea4f 0282 	mov.w	r2, r2, lsl #2
    57f2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    57f6:	fa03 f505 	lsl.w	r5, r3, r5
    57fa:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    57fe:	f101 0101 	add.w	r1, r1, #1
    5802:	42a1      	cmp	r1, r4
    5804:	d3d6      	bcc.n	57b4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    5806:	bd70      	pop	{r4, r5, r6, pc}
    5808:	b570      	push	{r4, r5, r6, lr}
    580a:	0042      	lsls	r2, r0, #1
    580c:	f04f 0100 	mov.w	r1, #0
    5810:	d501      	bpl.n	5816 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    5812:	4a14      	ldr	r2, [pc, #80]	; (5864 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    5814:	6011      	str	r1, [r2, #0]
    5816:	f3c0 3280 	ubfx	r2, r0, #14, #1
    581a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    581e:	429a      	cmp	r2, r3
    5820:	d003      	beq.n	582a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    5822:	2169      	movs	r1, #105	; 0x69
    5824:	201b      	movs	r0, #27
    5826:	f7ff fb4b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    582a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    582e:	d014      	beq.n	585a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    5830:	4a0d      	ldr	r2, [pc, #52]	; (5868 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    5832:	2001      	movs	r0, #1
    5834:	6050      	str	r0, [r2, #4]
    5836:	1e83      	subs	r3, r0, #2
    5838:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    583c:	4a0b      	ldr	r2, [pc, #44]	; (586c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    583e:	6090      	str	r0, [r2, #8]
    5840:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    5844:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5848:	4c09      	ldr	r4, [pc, #36]	; (5870 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    584a:	6021      	str	r1, [r4, #0]
    584c:	1d25      	adds	r5, r4, #4
    584e:	6028      	str	r0, [r5, #0]
    5850:	6090      	str	r0, [r2, #8]
    5852:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    5856:	6021      	str	r1, [r4, #0]
    5858:	6028      	str	r0, [r5, #0]
    585a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    585e:	f7ff bf8d 	b.w	577c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    5862:	0000      	.short	0x0000
    5864:	4001e504 	.word	0x4001e504
    5868:	4000e000 	.word	0x4000e000
    586c:	4000f000 	.word	0x4000f000
    5870:	4000f500 	.word	0x4000f500

00005874 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    5874:	b570      	push	{r4, r5, r6, lr}
    5876:	4c0a      	ldr	r4, [pc, #40]	; (58a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    5878:	460d      	mov	r5, r1
    587a:	6020      	str	r0, [r4, #0]
    587c:	f7ff ffc4 	bl	5808 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    5880:	6820      	ldr	r0, [r4, #0]
    5882:	f7ff ff93 	bl	57ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    5886:	f000 f883 	bl	5990 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    588a:	f7ff ff77 	bl	577c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    588e:	f009 f820 	bl	e8d2 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    5892:	4628      	mov	r0, r5
    5894:	f000 f8b6 	bl	5a04 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    5898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    589c:	f000 b8ce 	b.w	5a3c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    58a0:	20000084 	.word	0x20000084

000058a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    58a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    58a8:	4c36      	ldr	r4, [pc, #216]	; (5984 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    58aa:	b082      	sub	sp, #8
    58ac:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    58b0:	2601      	movs	r6, #1
    58b2:	4835      	ldr	r0, [pc, #212]	; (5988 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    58b4:	f007 fe6b 	bl	d58e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    58b8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5988 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    58bc:	b920      	cbnz	r0, 58c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    58be:	2600      	movs	r6, #0
    58c0:	f109 0001 	add.w	r0, r9, #1
    58c4:	f007 fe7a 	bl	d5bc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    58c8:	f44f 7580 	mov.w	r5, #256	; 0x100
    58cc:	f04f 0800 	mov.w	r8, #0
    58d0:	1d2f      	adds	r7, r5, #4
    58d2:	2101      	movs	r1, #1
    58d4:	6061      	str	r1, [r4, #4]
    58d6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    58da:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    58de:	9802      	ldr	r0, [sp, #8]
    58e0:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    58e4:	6021      	str	r1, [r4, #0]
    58e6:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 598c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    58ea:	e01c      	b.n	5926 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    58ec:	f8da 0000 	ldr.w	r0, [sl]
    58f0:	06c0      	lsls	r0, r0, #27
    58f2:	d518      	bpl.n	5926 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    58f4:	200e      	movs	r0, #14
    58f6:	f008 ffd8 	bl	e8aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    58fa:	f3ef 8010 	mrs	r0, PRIMASK
    58fe:	9000      	str	r0, [sp, #0]
    5900:	b672      	cpsid	i
    5902:	2103      	movs	r1, #3
    5904:	4620      	mov	r0, r4
    5906:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    590a:	4629      	mov	r1, r5
    590c:	f008 ffda 	bl	e8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    5910:	b930      	cbnz	r0, 5920 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    5912:	4639      	mov	r1, r7
    5914:	4620      	mov	r0, r4
    5916:	f008 ffd5 	bl	e8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    591a:	b908      	cbnz	r0, 5920 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    591c:	f7ff f916 	bl	4b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    5920:	9800      	ldr	r0, [sp, #0]
    5922:	b900      	cbnz	r0, 5926 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    5924:	b662      	cpsie	i
    5926:	4629      	mov	r1, r5
    5928:	4620      	mov	r0, r4
    592a:	f008 ffcb 	bl	e8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    592e:	b928      	cbnz	r0, 593c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    5930:	4639      	mov	r1, r7
    5932:	4620      	mov	r0, r4
    5934:	f008 ffc6 	bl	e8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    5938:	2800      	cmp	r0, #0
    593a:	d0d7      	beq.n	58ec <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    593c:	4639      	mov	r1, r7
    593e:	4620      	mov	r0, r4
    5940:	f008 ffc0 	bl	e8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    5944:	2800      	cmp	r0, #0
    5946:	d1c4      	bne.n	58d2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    5948:	b136      	cbz	r6, 5958 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    594a:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    594e:	f109 0001 	add.w	r0, r9, #1
    5952:	f007 fe1c 	bl	d58e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5956:	e012      	b.n	597e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    5958:	f109 0001 	add.w	r0, r9, #1
    595c:	f007 fe17 	bl	d58e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    5960:	2800      	cmp	r0, #0
    5962:	d1ad      	bne.n	58c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    5964:	2003      	movs	r0, #3
    5966:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    596a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    596e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    5972:	200e      	movs	r0, #14
    5974:	f008 ff99 	bl	e8aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    5978:	4803      	ldr	r0, [pc, #12]	; (5988 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    597a:	f007 fe1f 	bl	d5bc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    597e:	2000      	movs	r0, #0
    5980:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5984:	4000e000 	.word	0x4000e000
    5988:	20000287 	.word	0x20000287
    598c:	e000ed10 	.word	0xe000ed10

00005990 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    5990:	b510      	push	{r4, lr}
    5992:	4808      	ldr	r0, [pc, #32]	; (59b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    5994:	f007 fe0e 	bl	d5b4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    5998:	b108      	cbz	r0, 599e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    599a:	2125      	movs	r1, #37	; 0x25
    599c:	e006      	b.n	59ac <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    599e:	4805      	ldr	r0, [pc, #20]	; (59b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    59a0:	1c40      	adds	r0, r0, #1
    59a2:	f007 fe07 	bl	d5b4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    59a6:	2800      	cmp	r0, #0
    59a8:	d003      	beq.n	59b2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    59aa:	2129      	movs	r1, #41	; 0x29
    59ac:	201d      	movs	r0, #29
    59ae:	f7ff fa87 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    59b2:	bd10      	pop	{r4, pc}
    59b4:	20000287 	.word	0x20000287

000059b8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    59b8:	b570      	push	{r4, r5, r6, lr}
    59ba:	4911      	ldr	r1, [pc, #68]	; (5a00 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    59bc:	680a      	ldr	r2, [r1, #0]
    59be:	b1ea      	cbz	r2, 59fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    59c0:	2300      	movs	r3, #0
    59c2:	461d      	mov	r5, r3
    59c4:	2401      	movs	r4, #1
    59c6:	684a      	ldr	r2, [r1, #4]
    59c8:	1c52      	adds	r2, r2, #1
    59ca:	604a      	str	r2, [r1, #4]
    59cc:	2a0c      	cmp	r2, #12
    59ce:	d300      	bcc.n	59d2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    59d0:	604d      	str	r5, [r1, #4]
    59d2:	790e      	ldrb	r6, [r1, #4]
    59d4:	fa04 f206 	lsl.w	r2, r4, r6
    59d8:	680e      	ldr	r6, [r1, #0]
    59da:	4216      	tst	r6, r2
    59dc:	d00b      	beq.n	59f6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    59de:	f3ef 8310 	mrs	r3, PRIMASK
    59e2:	b672      	cpsid	i
    59e4:	680c      	ldr	r4, [r1, #0]
    59e6:	4394      	bics	r4, r2
    59e8:	600c      	str	r4, [r1, #0]
    59ea:	b903      	cbnz	r3, 59ee <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    59ec:	b662      	cpsie	i
    59ee:	6849      	ldr	r1, [r1, #4]
    59f0:	6001      	str	r1, [r0, #0]
    59f2:	2000      	movs	r0, #0
    59f4:	bd70      	pop	{r4, r5, r6, pc}
    59f6:	1c5b      	adds	r3, r3, #1
    59f8:	2b0c      	cmp	r3, #12
    59fa:	d3e4      	bcc.n	59c6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    59fc:	2005      	movs	r0, #5
    59fe:	bd70      	pop	{r4, r5, r6, pc}
    5a00:	20000088 	.word	0x20000088

00005a04 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    5a04:	4802      	ldr	r0, [pc, #8]	; (5a10 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    5a06:	2100      	movs	r1, #0
    5a08:	6001      	str	r1, [r0, #0]
    5a0a:	6041      	str	r1, [r0, #4]
    5a0c:	4770      	bx	lr
    5a0e:	0000      	.short	0x0000
    5a10:	20000088 	.word	0x20000088

00005a14 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    5a14:	b510      	push	{r4, lr}
    5a16:	4c08      	ldr	r4, [pc, #32]	; (5a38 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    5a18:	7861      	ldrb	r1, [r4, #1]
    5a1a:	b109      	cbz	r1, 5a20 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    5a1c:	200f      	movs	r0, #15
    5a1e:	bd10      	pop	{r4, pc}
    5a20:	f7ff f820 	bl	4a64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    5a24:	7020      	strb	r0, [r4, #0]
    5a26:	28ff      	cmp	r0, #255	; 0xff
    5a28:	d001      	beq.n	5a2e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    5a2a:	2000      	movs	r0, #0
    5a2c:	bd10      	pop	{r4, pc}
    5a2e:	2176      	movs	r1, #118	; 0x76
    5a30:	201f      	movs	r0, #31
    5a32:	f7ff fa45 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5a36:	0000      	.short	0x0000
    5a38:	20000090 	.word	0x20000090

00005a3c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    5a3c:	4901      	ldr	r1, [pc, #4]	; (5a44 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    5a3e:	2000      	movs	r0, #0
    5a40:	7048      	strb	r0, [r1, #1]
    5a42:	4770      	bx	lr
    5a44:	20000090 	.word	0x20000090

00005a48 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    5a48:	4806      	ldr	r0, [pc, #24]	; (5a64 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    5a4a:	4a07      	ldr	r2, [pc, #28]	; (5a68 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    5a4c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5a4e:	8852      	ldrh	r2, [r2, #2]
    5a50:	4291      	cmp	r1, r2
    5a52:	d104      	bne.n	5a5e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5a54:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    5a58:	b108      	cbz	r0, 5a5e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    5a5a:	2000      	movs	r0, #0
    5a5c:	4770      	bx	lr
    5a5e:	2001      	movs	r0, #1
    5a60:	4770      	bx	lr
    5a62:	0000      	.short	0x0000
    5a64:	200013c4 	.word	0x200013c4
    5a68:	2000026c 	.word	0x2000026c

00005a6c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    5a6c:	4901      	ldr	r1, [pc, #4]	; (5a74 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    5a6e:	8048      	strh	r0, [r1, #2]
    5a70:	4770      	bx	lr
    5a72:	0000      	.short	0x0000
    5a74:	2000026c 	.word	0x2000026c

00005a78 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    5a78:	4808      	ldr	r0, [pc, #32]	; (5a9c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    5a7a:	4a09      	ldr	r2, [pc, #36]	; (5aa0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    5a7c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    5a7e:	8852      	ldrh	r2, [r2, #2]
    5a80:	4291      	cmp	r1, r2
    5a82:	d109      	bne.n	5a98 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5a84:	f64f 71ff 	movw	r1, #65535	; 0xffff
    5a88:	8481      	strh	r1, [r0, #36]	; 0x24
    5a8a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5a8e:	b119      	cbz	r1, 5a98 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    5a90:	2100      	movs	r1, #0
    5a92:	7001      	strb	r1, [r0, #0]
    5a94:	2001      	movs	r0, #1
    5a96:	4770      	bx	lr
    5a98:	2000      	movs	r0, #0
    5a9a:	4770      	bx	lr
    5a9c:	200013c4 	.word	0x200013c4
    5aa0:	2000026c 	.word	0x2000026c

00005aa4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    5aa4:	4807      	ldr	r0, [pc, #28]	; (5ac4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5aa6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    5aaa:	2901      	cmp	r1, #1
    5aac:	d007      	beq.n	5abe <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    5aae:	2101      	movs	r1, #1
    5ab0:	7001      	strb	r1, [r0, #0]
    5ab2:	4805      	ldr	r0, [pc, #20]	; (5ac8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    5ab4:	4903      	ldr	r1, [pc, #12]	; (5ac4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    5ab6:	8800      	ldrh	r0, [r0, #0]
    5ab8:	8488      	strh	r0, [r1, #36]	; 0x24
    5aba:	2001      	movs	r0, #1
    5abc:	4770      	bx	lr
    5abe:	2000      	movs	r0, #0
    5ac0:	4770      	bx	lr
    5ac2:	0000      	.short	0x0000
    5ac4:	200013c4 	.word	0x200013c4
    5ac8:	2000026c 	.word	0x2000026c

00005acc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    5acc:	4906      	ldr	r1, [pc, #24]	; (5ae8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    5ace:	4b07      	ldr	r3, [pc, #28]	; (5aec <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    5ad0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5ad2:	885b      	ldrh	r3, [r3, #2]
    5ad4:	429a      	cmp	r2, r3
    5ad6:	d105      	bne.n	5ae4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5ad8:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5adc:	b112      	cbz	r2, 5ae4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    5ade:	6001      	str	r1, [r0, #0]
    5ae0:	2001      	movs	r0, #1
    5ae2:	4770      	bx	lr
    5ae4:	2000      	movs	r0, #0
    5ae6:	4770      	bx	lr
    5ae8:	200013c4 	.word	0x200013c4
    5aec:	2000026c 	.word	0x2000026c

00005af0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    5af0:	4909      	ldr	r1, [pc, #36]	; (5b18 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5af2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5af4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    5af8:	3bff      	subs	r3, #255	; 0xff
    5afa:	d002      	beq.n	5b02 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    5afc:	2100      	movs	r1, #0
    5afe:	6001      	str	r1, [r0, #0]
    5b00:	e007      	b.n	5b12 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5b02:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    5b06:	4904      	ldr	r1, [pc, #16]	; (5b18 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    5b08:	2a01      	cmp	r2, #1
    5b0a:	d002      	beq.n	5b12 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    5b0c:	6001      	str	r1, [r0, #0]
    5b0e:	2001      	movs	r0, #1
    5b10:	4770      	bx	lr
    5b12:	2000      	movs	r0, #0
    5b14:	4770      	bx	lr
    5b16:	0000      	.short	0x0000
    5b18:	200013c4 	.word	0x200013c4

00005b1c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    5b1c:	4901      	ldr	r1, [pc, #4]	; (5b24 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    5b1e:	8008      	strh	r0, [r1, #0]
    5b20:	4770      	bx	lr
    5b22:	0000      	.short	0x0000
    5b24:	2000026c 	.word	0x2000026c

00005b28 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    5b28:	4905      	ldr	r1, [pc, #20]	; (5b40 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    5b2a:	2000      	movs	r0, #0
    5b2c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5b30:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5b34:	8488      	strh	r0, [r1, #36]	; 0x24
    5b36:	4903      	ldr	r1, [pc, #12]	; (5b44 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    5b38:	8008      	strh	r0, [r1, #0]
    5b3a:	8048      	strh	r0, [r1, #2]
    5b3c:	4770      	bx	lr
    5b3e:	0000      	.short	0x0000
    5b40:	200013c4 	.word	0x200013c4
    5b44:	2000026c 	.word	0x2000026c
    5b48:	4905      	ldr	r1, [pc, #20]	; (5b60 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    5b4a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    5b4c:	4282      	cmp	r2, r0
    5b4e:	d105      	bne.n	5b5c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    5b50:	2000      	movs	r0, #0
    5b52:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    5b56:	f64f 70ff 	movw	r0, #65535	; 0xffff
    5b5a:	8488      	strh	r0, [r1, #36]	; 0x24
    5b5c:	4770      	bx	lr
    5b5e:	0000      	.short	0x0000
    5b60:	200013c4 	.word	0x200013c4

00005b64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    5b64:	4a0a      	ldr	r2, [pc, #40]	; (5b90 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    5b66:	b110      	cbz	r0, 5b6e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    5b68:	2801      	cmp	r0, #1
    5b6a:	d007      	beq.n	5b7c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    5b6c:	e00e      	b.n	5b8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5b6e:	7850      	ldrb	r0, [r2, #1]
    5b70:	b160      	cbz	r0, 5b8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5b72:	f8d2 0002 	ldr.w	r0, [r2, #2]
    5b76:	6008      	str	r0, [r1, #0]
    5b78:	88d0      	ldrh	r0, [r2, #6]
    5b7a:	e004      	b.n	5b86 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    5b7c:	7810      	ldrb	r0, [r2, #0]
    5b7e:	b128      	cbz	r0, 5b8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    5b80:	6890      	ldr	r0, [r2, #8]
    5b82:	6008      	str	r0, [r1, #0]
    5b84:	8990      	ldrh	r0, [r2, #12]
    5b86:	8088      	strh	r0, [r1, #4]
    5b88:	2001      	movs	r0, #1
    5b8a:	4770      	bx	lr
    5b8c:	2000      	movs	r0, #0
    5b8e:	4770      	bx	lr
    5b90:	20000289 	.word	0x20000289

00005b94 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    5b94:	4a08      	ldr	r2, [pc, #32]	; (5bb8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    5b96:	2301      	movs	r3, #1
    5b98:	b138      	cbz	r0, 5baa <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    5b9a:	2801      	cmp	r0, #1
    5b9c:	d104      	bne.n	5ba8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    5b9e:	7013      	strb	r3, [r2, #0]
    5ba0:	6808      	ldr	r0, [r1, #0]
    5ba2:	6090      	str	r0, [r2, #8]
    5ba4:	8888      	ldrh	r0, [r1, #4]
    5ba6:	8190      	strh	r0, [r2, #12]
    5ba8:	4770      	bx	lr
    5baa:	7053      	strb	r3, [r2, #1]
    5bac:	6808      	ldr	r0, [r1, #0]
    5bae:	f8c2 0002 	str.w	r0, [r2, #2]
    5bb2:	8888      	ldrh	r0, [r1, #4]
    5bb4:	80d0      	strh	r0, [r2, #6]
    5bb6:	4770      	bx	lr
    5bb8:	20000289 	.word	0x20000289

00005bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    5bbc:	4906      	ldr	r1, [pc, #24]	; (5bd8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    5bbe:	b110      	cbz	r0, 5bc6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    5bc0:	2801      	cmp	r0, #1
    5bc2:	d002      	beq.n	5bca <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    5bc4:	e005      	b.n	5bd2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5bc6:	7848      	ldrb	r0, [r1, #1]
    5bc8:	e000      	b.n	5bcc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    5bca:	7808      	ldrb	r0, [r1, #0]
    5bcc:	b108      	cbz	r0, 5bd2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    5bce:	2001      	movs	r0, #1
    5bd0:	4770      	bx	lr
    5bd2:	2000      	movs	r0, #0
    5bd4:	4770      	bx	lr
    5bd6:	0000      	.short	0x0000
    5bd8:	20000289 	.word	0x20000289

00005bdc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    5bdc:	4901      	ldr	r1, [pc, #4]	; (5be4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    5bde:	7448      	strb	r0, [r1, #17]
    5be0:	4770      	bx	lr
    5be2:	0000      	.short	0x0000
    5be4:	20000c22 	.word	0x20000c22

00005be8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    5be8:	b578      	push	{r3, r4, r5, r6, lr}
    5bea:	4913      	ldr	r1, [pc, #76]	; (5c38 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    5bec:	7c4a      	ldrb	r2, [r1, #17]
    5bee:	b30a      	cbz	r2, 5c34 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5bf0:	7c0a      	ldrb	r2, [r1, #16]
    5bf2:	f88d 2000 	strb.w	r2, [sp]
    5bf6:	9a00      	ldr	r2, [sp, #0]
    5bf8:	9200      	str	r2, [sp, #0]
    5bfa:	f89d 2000 	ldrb.w	r2, [sp]
    5bfe:	b1ca      	cbz	r2, 5c34 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    5c00:	2300      	movs	r3, #0
    5c02:	f101 0210 	add.w	r2, r1, #16
    5c06:	241f      	movs	r4, #31
    5c08:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    5c0c:	7c0e      	ldrb	r6, [r1, #16]
    5c0e:	f88d 6000 	strb.w	r6, [sp]
    5c12:	9e00      	ldr	r6, [sp, #0]
    5c14:	9600      	str	r6, [sp, #0]
    5c16:	f89d 6000 	ldrb.w	r6, [sp]
    5c1a:	b14e      	cbz	r6, 5c30 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    5c1c:	7013      	strb	r3, [r2, #0]
    5c1e:	7043      	strb	r3, [r0, #1]
    5c20:	7004      	strb	r4, [r0, #0]
    5c22:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    5c26:	6046      	str	r6, [r0, #4]
    5c28:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    5c2c:	6086      	str	r6, [r0, #8]
    5c2e:	e7ed      	b.n	5c0c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    5c30:	2001      	movs	r0, #1
    5c32:	bd78      	pop	{r3, r4, r5, r6, pc}
    5c34:	2000      	movs	r0, #0
    5c36:	bd78      	pop	{r3, r4, r5, r6, pc}
    5c38:	20000c22 	.word	0x20000c22

00005c3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    5c3c:	b510      	push	{r4, lr}
    5c3e:	4604      	mov	r4, r0
    5c40:	f000 f95c 	bl	5efc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    5c44:	b118      	cbz	r0, 5c4e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    5c46:	21bd      	movs	r1, #189	; 0xbd
    5c48:	2027      	movs	r0, #39	; 0x27
    5c4a:	f7ff f939 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5c4e:	4803      	ldr	r0, [pc, #12]	; (5c5c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    5c50:	2101      	movs	r1, #1
    5c52:	f009 fa30 	bl	f0b6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    5c56:	4802      	ldr	r0, [pc, #8]	; (5c60 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    5c58:	62c4      	str	r4, [r0, #44]	; 0x2c
    5c5a:	bd10      	pop	{r4, pc}
    5c5c:	20000c00 	.word	0x20000c00
    5c60:	200000ac 	.word	0x200000ac

00005c64 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    5c64:	4901      	ldr	r1, [pc, #4]	; (5c6c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    5c66:	2001      	movs	r0, #1
    5c68:	7188      	strb	r0, [r1, #6]
    5c6a:	4770      	bx	lr
    5c6c:	200000ac 	.word	0x200000ac

00005c70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    5c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5c74:	4d66      	ldr	r5, [pc, #408]	; (5e10 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    5c76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    5c78:	782e      	ldrb	r6, [r5, #0]
    5c7a:	bbee      	cbnz	r6, 5cf8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5c7c:	b3e2      	cbz	r2, 5cf8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5c7e:	b3db      	cbz	r3, 5cf8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5c80:	b3d4      	cbz	r4, 5cf8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    5c82:	f105 0614 	add.w	r6, r5, #20
    5c86:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    5c8a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    5c8e:	2700      	movs	r7, #0
    5c90:	71af      	strb	r7, [r5, #6]
    5c92:	716f      	strb	r7, [r5, #5]
    5c94:	70ef      	strb	r7, [r5, #3]
    5c96:	70af      	strb	r7, [r5, #2]
    5c98:	712f      	strb	r7, [r5, #4]
    5c9a:	81af      	strh	r7, [r5, #12]
    5c9c:	81ef      	strh	r7, [r5, #14]
    5c9e:	f000 f971 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5ca2:	4606      	mov	r6, r0
    5ca4:	f000 f968 	bl	5f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5ca8:	4604      	mov	r4, r0
    5caa:	f006 fe91 	bl	c9d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    5cae:	f006 fb75 	bl	c39c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    5cb2:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    5cb6:	f006 ff11 	bl	cadc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    5cba:	f104 0018 	add.w	r0, r4, #24
    5cbe:	f006 ffeb 	bl	cc98 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    5cc2:	6920      	ldr	r0, [r4, #16]
    5cc4:	f006 ffde 	bl	cc84 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    5cc8:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    5ccc:	f007 f802 	bl	ccd4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    5cd0:	f04f 0b01 	mov.w	fp, #1
    5cd4:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    5cd8:	2000      	movs	r0, #0
    5cda:	f006 fd3d 	bl	c758 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    5cde:	2800      	cmp	r0, #0
    5ce0:	d07e      	beq.n	5de0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    5ce2:	484c      	ldr	r0, [pc, #304]	; (5e14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    5ce4:	f006 fdac 	bl	c840 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    5ce8:	8820      	ldrh	r0, [r4, #0]
    5cea:	f7ff fcfd 	bl	56e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5cee:	6328      	str	r0, [r5, #48]	; 0x30
    5cf0:	8820      	ldrh	r0, [r4, #0]
    5cf2:	f7ff fce3 	bl	56bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    5cf6:	e000      	b.n	5cfa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    5cf8:	e00a      	b.n	5d10 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    5cfa:	6368      	str	r0, [r5, #52]	; 0x34
    5cfc:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    5d00:	f88d 0000 	strb.w	r0, [sp]
    5d04:	9800      	ldr	r0, [sp, #0]
    5d06:	9000      	str	r0, [sp, #0]
    5d08:	f89d 0000 	ldrb.w	r0, [sp]
    5d0c:	b118      	cbz	r0, 5d16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    5d0e:	e012      	b.n	5d36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5d10:	f44f 718a 	mov.w	r1, #276	; 0x114
    5d14:	e079      	b.n	5e0a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19a>
    5d16:	6f20      	ldr	r0, [r4, #112]	; 0x70
    5d18:	b168      	cbz	r0, 5d36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5d1a:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    5d1c:	88b1      	ldrh	r1, [r6, #4]
    5d1e:	4288      	cmp	r0, r1
    5d20:	d109      	bne.n	5d36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    5d22:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    5d26:	2201      	movs	r2, #1
    5d28:	4408      	add	r0, r1
    5d2a:	8670      	strh	r0, [r6, #50]	; 0x32
    5d2c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    5d30:	6f21      	ldr	r1, [r4, #112]	; 0x70
    5d32:	f7fd fd67 	bl	3804 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5d36:	f106 0168 	add.w	r1, r6, #104	; 0x68
    5d3a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 5e18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    5d3e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    5d42:	f109 0808 	add.w	r8, r9, #8
    5d46:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    5d4a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    5d4c:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    5d50:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    5d52:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    5d56:	f000 f983 	bl	6060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    5d5a:	4601      	mov	r1, r0
    5d5c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    5d5e:	46ba      	mov	sl, r7
    5d60:	f008 ff94 	bl	ec8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5d64:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    5d66:	4281      	cmp	r1, r0
    5d68:	d200      	bcs.n	5d6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    5d6a:	4608      	mov	r0, r1
    5d6c:	7228      	strb	r0, [r5, #8]
    5d6e:	46a8      	mov	r8, r5
    5d70:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    5d74:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    5d76:	7cf7      	ldrb	r7, [r6, #19]
    5d78:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    5d7a:	2908      	cmp	r1, #8
    5d7c:	d100      	bne.n	5d80 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    5d7e:	2104      	movs	r1, #4
    5d80:	f008 ff84 	bl	ec8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    5d84:	b90f      	cbnz	r7, 5d8a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    5d86:	1d00      	adds	r0, r0, #4
    5d88:	b280      	uxth	r0, r0
    5d8a:	4285      	cmp	r5, r0
    5d8c:	d200      	bcs.n	5d90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    5d8e:	4628      	mov	r0, r5
    5d90:	b2c0      	uxtb	r0, r0
    5d92:	f888 0009 	strb.w	r0, [r8, #9]
    5d96:	7cf2      	ldrb	r2, [r6, #19]
    5d98:	b102      	cbz	r2, 5d9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    5d9a:	2204      	movs	r2, #4
    5d9c:	4410      	add	r0, r2
    5d9e:	f888 0007 	strb.w	r0, [r8, #7]
    5da2:	7cb1      	ldrb	r1, [r6, #18]
    5da4:	b1a1      	cbz	r1, 5dd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x160>
    5da6:	491c      	ldr	r1, [pc, #112]	; (5e18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    5da8:	3108      	adds	r1, #8
    5daa:	f881 b018 	strb.w	fp, [r1, #24]
    5dae:	e9d6 0216 	ldrd	r0, r2, [r6, #88]	; 0x58
    5db2:	e9c1 0204 	strd	r0, r2, [r1, #16]
    5db6:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5dba:	f008 fe14 	bl	e9e6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5dbe:	4916      	ldr	r1, [pc, #88]	; (5e18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    5dc0:	4603      	mov	r3, r0
    5dc2:	22fb      	movs	r2, #251	; 0xfb
    5dc4:	3108      	adds	r1, #8
    5dc6:	2000      	movs	r0, #0
    5dc8:	f006 fb32 	bl	c430 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5dcc:	f006 fb66 	bl	c49c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5dd0:	2001      	movs	r0, #1
    5dd2:	f000 fb95 	bl	6500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    5dd6:	4811      	ldr	r0, [pc, #68]	; (5e1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>)
    5dd8:	6800      	ldr	r0, [r0, #0]
    5dda:	2803      	cmp	r0, #3
    5ddc:	d013      	beq.n	5e06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    5dde:	e000      	b.n	5de2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    5de0:	e00f      	b.n	5e02 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x192>
    5de2:	280b      	cmp	r0, #11
    5de4:	d00f      	beq.n	5e06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    5de6:	4648      	mov	r0, r9
    5de8:	f840 af52 	str.w	sl, [r0, #82]!
    5dec:	f8c0 a004 	str.w	sl, [r0, #4]
    5df0:	4809      	ldr	r0, [pc, #36]	; (5e18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    5df2:	88b1      	ldrh	r1, [r6, #4]
    5df4:	3052      	adds	r0, #82	; 0x52
    5df6:	8041      	strh	r1, [r0, #2]
    5df8:	8821      	ldrh	r1, [r4, #0]
    5dfa:	8001      	strh	r1, [r0, #0]
    5dfc:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    5e00:	7101      	strb	r1, [r0, #4]
    5e02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5e06:	f240 11c1 	movw	r1, #449	; 0x1c1
    5e0a:	2027      	movs	r0, #39	; 0x27
    5e0c:	f7ff f858 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e10:	200000ac 	.word	0x200000ac
    5e14:	00006684 	.word	0x00006684
    5e18:	20000bd0 	.word	0x20000bd0
    5e1c:	40001550 	.word	0x40001550

00005e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    5e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e24:	4605      	mov	r5, r0
    5e26:	f000 f8ad 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5e2a:	4e33      	ldr	r6, [pc, #204]	; (5ef8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    5e2c:	4604      	mov	r4, r0
    5e2e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    5e30:	7847      	ldrb	r7, [r0, #1]
    5e32:	b10d      	cbz	r5, 5e38 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    5e34:	2d01      	cmp	r5, #1
    5e36:	d103      	bne.n	5e40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    5e38:	6b71      	ldr	r1, [r6, #52]	; 0x34
    5e3a:	f007 fd7a 	bl	d932 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    5e3e:	7070      	strb	r0, [r6, #1]
    5e40:	7870      	ldrb	r0, [r6, #1]
    5e42:	f04f 0800 	mov.w	r8, #0
    5e46:	f04f 0901 	mov.w	r9, #1
    5e4a:	b150      	cbz	r0, 5e62 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    5e4c:	2801      	cmp	r0, #1
    5e4e:	d01a      	beq.n	5e86 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    5e50:	2802      	cmp	r0, #2
    5e52:	d034      	beq.n	5ebe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    5e54:	2803      	cmp	r0, #3
    5e56:	d048      	beq.n	5eea <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    5e58:	f240 4115 	movw	r1, #1045	; 0x415
    5e5c:	2027      	movs	r0, #39	; 0x27
    5e5e:	f7ff f82f 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e62:	2d01      	cmp	r5, #1
    5e64:	d032      	beq.n	5ecc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5e66:	f000 f8e7 	bl	6038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5e6a:	4639      	mov	r1, r7
    5e6c:	2201      	movs	r2, #1
    5e6e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5e70:	f008 fa3d 	bl	e2ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5e74:	e028      	b.n	5ec8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    5e76:	bf00      	nop
    5e78:	f884 8008 	strb.w	r8, [r4, #8]
    5e7c:	e031      	b.n	5ee2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5e7e:	bf00      	nop
    5e80:	f884 9008 	strb.w	r9, [r4, #8]
    5e84:	e02d      	b.n	5ee2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5e86:	2d01      	cmp	r5, #1
    5e88:	d008      	beq.n	5e9c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    5e8a:	f000 f8d5 	bl	6038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    5e8e:	4639      	mov	r1, r7
    5e90:	2200      	movs	r2, #0
    5e92:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5e94:	f008 fa2b 	bl	e2ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    5e98:	2d02      	cmp	r5, #2
    5e9a:	d00b      	beq.n	5eb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5e9c:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5ea0:	1c40      	adds	r0, r0, #1
    5ea2:	f141 0100 	adc.w	r1, r1, #0
    5ea6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5eaa:	7a20      	ldrb	r0, [r4, #8]
    5eac:	2801      	cmp	r0, #1
    5eae:	d003      	beq.n	5eb8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    5eb0:	f884 9008 	strb.w	r9, [r4, #8]
    5eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5eb8:	f884 8008 	strb.w	r8, [r4, #8]
    5ebc:	e7fa      	b.n	5eb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5ebe:	2d01      	cmp	r5, #1
    5ec0:	d004      	beq.n	5ecc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    5ec2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5ec4:	f008 fc4d 	bl	e762 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5ec8:	2d02      	cmp	r5, #2
    5eca:	d0f3      	beq.n	5eb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5ecc:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    5ed0:	1c40      	adds	r0, r0, #1
    5ed2:	f141 0100 	adc.w	r1, r1, #0
    5ed6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    5eda:	7a20      	ldrb	r0, [r4, #8]
    5edc:	2801      	cmp	r0, #1
    5ede:	d1cf      	bne.n	5e80 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    5ee0:	e7ca      	b.n	5e78 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    5ee2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5ee6:	f001 b92b 	b.w	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5eea:	2d01      	cmp	r5, #1
    5eec:	d0e2      	beq.n	5eb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    5eee:	6b70      	ldr	r0, [r6, #52]	; 0x34
    5ef0:	f008 fc37 	bl	e762 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    5ef4:	e7f5      	b.n	5ee2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    5ef6:	0000      	.short	0x0000
    5ef8:	200000ac 	.word	0x200000ac

00005efc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    5efc:	4804      	ldr	r0, [pc, #16]	; (5f10 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    5efe:	7800      	ldrb	r0, [r0, #0]
    5f00:	b108      	cbz	r0, 5f06 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    5f02:	200c      	movs	r0, #12
    5f04:	4770      	bx	lr
    5f06:	4903      	ldr	r1, [pc, #12]	; (5f14 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    5f08:	2000      	movs	r0, #0
    5f0a:	7448      	strb	r0, [r1, #17]
    5f0c:	4770      	bx	lr
    5f0e:	0000      	.short	0x0000
    5f10:	200000ac 	.word	0x200000ac
    5f14:	20000c22 	.word	0x20000c22

00005f18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    5f18:	4812      	ldr	r0, [pc, #72]	; (5f64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    5f1a:	b508      	push	{r3, lr}
    5f1c:	7801      	ldrb	r1, [r0, #0]
    5f1e:	b139      	cbz	r1, 5f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    5f20:	7800      	ldrb	r0, [r0, #0]
    5f22:	2801      	cmp	r0, #1
    5f24:	d006      	beq.n	5f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    5f26:	f240 11d9 	movw	r1, #473	; 0x1d9
    5f2a:	2027      	movs	r0, #39	; 0x27
    5f2c:	f7fe ffc8 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f30:	f000 f9ce 	bl	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    5f34:	f000 f820 	bl	5f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5f38:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    5f3c:	f88d 1000 	strb.w	r1, [sp]
    5f40:	9900      	ldr	r1, [sp, #0]
    5f42:	9100      	str	r1, [sp, #0]
    5f44:	f89d 1000 	ldrb.w	r1, [sp]
    5f48:	2900      	cmp	r1, #0
    5f4a:	d10a      	bne.n	5f62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    5f4c:	6f01      	ldr	r1, [r0, #112]	; 0x70
    5f4e:	2900      	cmp	r1, #0
    5f50:	d007      	beq.n	5f62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    5f52:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    5f56:	2200      	movs	r2, #0
    5f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5f5c:	4611      	mov	r1, r2
    5f5e:	f7fd bc51 	b.w	3804 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    5f62:	bd08      	pop	{r3, pc}
    5f64:	200000ac 	.word	0x200000ac
    5f68:	4a02      	ldr	r2, [pc, #8]	; (5f74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    5f6a:	8993      	ldrh	r3, [r2, #12]
    5f6c:	4303      	orrs	r3, r0
    5f6e:	8193      	strh	r3, [r2, #12]
    5f70:	6952      	ldr	r2, [r2, #20]
    5f72:	4710      	bx	r2
    5f74:	200000ac 	.word	0x200000ac
    5f78:	4801      	ldr	r0, [pc, #4]	; (5f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    5f7a:	6840      	ldr	r0, [r0, #4]
    5f7c:	4770      	bx	lr
    5f7e:	0000      	.short	0x0000
    5f80:	200000e4 	.word	0x200000e4
    5f84:	4801      	ldr	r0, [pc, #4]	; (5f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    5f86:	6840      	ldr	r0, [r0, #4]
    5f88:	3078      	adds	r0, #120	; 0x78
    5f8a:	4770      	bx	lr
    5f8c:	200000e4 	.word	0x200000e4
    5f90:	4a01      	ldr	r2, [pc, #4]	; (5f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    5f92:	2100      	movs	r1, #0
    5f94:	6952      	ldr	r2, [r2, #20]
    5f96:	4710      	bx	r2
    5f98:	200000ac 	.word	0x200000ac
    5f9c:	b570      	push	{r4, r5, r6, lr}
    5f9e:	f7ff fff1 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5fa2:	4604      	mov	r4, r0
    5fa4:	f7ff ffe8 	bl	5f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5fa8:	4605      	mov	r5, r0
    5faa:	4621      	mov	r1, r4
    5fac:	f008 ff36 	bl	ee1c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    5fb0:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    5fb4:	2901      	cmp	r1, #1
    5fb6:	d114      	bne.n	5fe2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5fb8:	2800      	cmp	r0, #0
    5fba:	d012      	beq.n	5fe2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    5fbc:	4909      	ldr	r1, [pc, #36]	; (5fe4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    5fbe:	2001      	movs	r0, #1
    5fc0:	684a      	ldr	r2, [r1, #4]
    5fc2:	8829      	ldrh	r1, [r5, #0]
    5fc4:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    5fc8:	7a61      	ldrb	r1, [r4, #9]
    5fca:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    5fce:	7aa1      	ldrb	r1, [r4, #10]
    5fd0:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    5fd4:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    5fd8:	7010      	strb	r0, [r2, #0]
    5fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5fde:	f001 b8af 	b.w	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5fe2:	bd70      	pop	{r4, r5, r6, pc}
    5fe4:	200000e4 	.word	0x200000e4
    5fe8:	b570      	push	{r4, r5, r6, lr}
    5fea:	4605      	mov	r5, r0
    5fec:	2901      	cmp	r1, #1
    5fee:	d81c      	bhi.n	602a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5ff0:	4c10      	ldr	r4, [pc, #64]	; (6034 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    5ff2:	69a1      	ldr	r1, [r4, #24]
    5ff4:	4788      	blx	r1
    5ff6:	b1c0      	cbz	r0, 602a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5ff8:	7960      	ldrb	r0, [r4, #5]
    5ffa:	b9b0      	cbnz	r0, 602a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5ffc:	2d01      	cmp	r5, #1
    5ffe:	d116      	bne.n	602e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    6000:	f104 0010 	add.w	r0, r4, #16
    6004:	7800      	ldrb	r0, [r0, #0]
    6006:	06c1      	lsls	r1, r0, #27
    6008:	d405      	bmi.n	6016 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    600a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    600c:	7809      	ldrb	r1, [r1, #0]
    600e:	06c9      	lsls	r1, r1, #27
    6010:	d401      	bmi.n	6016 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    6012:	2101      	movs	r1, #1
    6014:	e000      	b.n	6018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    6016:	2100      	movs	r1, #0
    6018:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    601a:	b91a      	cbnz	r2, 6024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    601c:	8962      	ldrh	r2, [r4, #10]
    601e:	b10a      	cbz	r2, 6024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    6020:	06c0      	lsls	r0, r0, #27
    6022:	d502      	bpl.n	602a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    6024:	89a0      	ldrh	r0, [r4, #12]
    6026:	4301      	orrs	r1, r0
    6028:	d001      	beq.n	602e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    602a:	2001      	movs	r0, #1
    602c:	bd70      	pop	{r4, r5, r6, pc}
    602e:	2000      	movs	r0, #0
    6030:	bd70      	pop	{r4, r5, r6, pc}
    6032:	0000      	.short	0x0000
    6034:	200000ac 	.word	0x200000ac
    6038:	b510      	push	{r4, lr}
    603a:	4c08      	ldr	r4, [pc, #32]	; (605c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    603c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    603e:	b138      	cbz	r0, 6050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    6040:	8962      	ldrh	r2, [r4, #10]
    6042:	6a61      	ldr	r1, [r4, #36]	; 0x24
    6044:	1cd2      	adds	r2, r2, #3
    6046:	f007 fb4b 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    604a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    604c:	6260      	str	r0, [r4, #36]	; 0x24
    604e:	bd10      	pop	{r4, pc}
    6050:	f240 415b 	movw	r1, #1115	; 0x45b
    6054:	2027      	movs	r0, #39	; 0x27
    6056:	f7fe ff33 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    605a:	0000      	.short	0x0000
    605c:	200000ac 	.word	0x200000ac
    6060:	b510      	push	{r4, lr}
    6062:	f7ff ff89 	bl	5f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6066:	4604      	mov	r4, r0
    6068:	f7ff ff8c 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    606c:	7b41      	ldrb	r1, [r0, #13]
    606e:	4a0a      	ldr	r2, [pc, #40]	; (6098 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    6070:	2924      	cmp	r1, #36	; 0x24
    6072:	d008      	beq.n	6086 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    6074:	7b80      	ldrb	r0, [r0, #14]
    6076:	2824      	cmp	r0, #36	; 0x24
    6078:	d005      	beq.n	6086 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    607a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    607e:	2804      	cmp	r0, #4
    6080:	d100      	bne.n	6084 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    6082:	2008      	movs	r0, #8
    6084:	bd10      	pop	{r4, pc}
    6086:	6850      	ldr	r0, [r2, #4]
    6088:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    608c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    6090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6094:	f008 bcb5 	b.w	ea02 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    6098:	200000e4 	.word	0x200000e4
    609c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    60a0:	4689      	mov	r9, r1
    60a2:	4606      	mov	r6, r0
    60a4:	f7ff ff6e 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    60a8:	4c58      	ldr	r4, [pc, #352]	; (620c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    60aa:	2700      	movs	r7, #0
    60ac:	4605      	mov	r5, r0
    60ae:	f88d 7000 	strb.w	r7, [sp]
    60b2:	7820      	ldrb	r0, [r4, #0]
    60b4:	2802      	cmp	r0, #2
    60b6:	d004      	beq.n	60c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    60b8:	f240 41ba 	movw	r1, #1210	; 0x4ba
    60bc:	2027      	movs	r0, #39	; 0x27
    60be:	f7fe feff 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    60c2:	7ba0      	ldrb	r0, [r4, #14]
    60c4:	0640      	lsls	r0, r0, #25
    60c6:	d406      	bmi.n	60d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    60c8:	2040      	movs	r0, #64	; 0x40
    60ca:	f7ff ff61 	bl	5f90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    60ce:	89e0      	ldrh	r0, [r4, #14]
    60d0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    60d4:	81e0      	strh	r0, [r4, #14]
    60d6:	7ce8      	ldrb	r0, [r5, #19]
    60d8:	f04f 0801 	mov.w	r8, #1
    60dc:	b3c6      	cbz	r6, 6150 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    60de:	f006 fa0d 	bl	c4fc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    60e2:	f006 f9f1 	bl	c4c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    60e6:	b968      	cbnz	r0, 6104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    60e8:	7ce8      	ldrb	r0, [r5, #19]
    60ea:	b158      	cbz	r0, 6104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    60ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    60ee:	7841      	ldrb	r1, [r0, #1]
    60f0:	b141      	cbz	r1, 6104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    60f2:	7800      	ldrb	r0, [r0, #0]
    60f4:	7a29      	ldrb	r1, [r5, #8]
    60f6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    60fa:	4288      	cmp	r0, r1
    60fc:	d102      	bne.n	6104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    60fe:	f884 8002 	strb.w	r8, [r4, #2]
    6102:	e064      	b.n	61ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    6104:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6106:	7841      	ldrb	r1, [r0, #1]
    6108:	8161      	strh	r1, [r4, #10]
    610a:	b121      	cbz	r1, 6116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    610c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    610e:	f008 faf5 	bl	e6fc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    6112:	62a0      	str	r0, [r4, #40]	; 0x28
    6114:	e000      	b.n	6118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    6116:	62a7      	str	r7, [r4, #40]	; 0x28
    6118:	89e0      	ldrh	r0, [r4, #14]
    611a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    611e:	81e0      	strh	r0, [r4, #14]
    6120:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6122:	79e9      	ldrb	r1, [r5, #7]
    6124:	7800      	ldrb	r0, [r0, #0]
    6126:	f3c0 0080 	ubfx	r0, r0, #2, #1
    612a:	4288      	cmp	r0, r1
    612c:	d005      	beq.n	613a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    612e:	f000 f963 	bl	63f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    6132:	89e0      	ldrh	r0, [r4, #14]
    6134:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    6138:	81e0      	strh	r0, [r4, #14]
    613a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    613c:	7a29      	ldrb	r1, [r5, #8]
    613e:	7800      	ldrb	r0, [r0, #0]
    6140:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    6144:	4288      	cmp	r0, r1
    6146:	d10e      	bne.n	6166 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    6148:	4668      	mov	r0, sp
    614a:	f000 f917 	bl	637c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    614e:	e00a      	b.n	6166 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    6150:	e7ff      	b.n	6152 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    6152:	b108      	cbz	r0, 6158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    6154:	f006 f9cc 	bl	c4f0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    6158:	78e0      	ldrb	r0, [r4, #3]
    615a:	1c40      	adds	r0, r0, #1
    615c:	70e0      	strb	r0, [r4, #3]
    615e:	89e0      	ldrh	r0, [r4, #14]
    6160:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    6164:	81e0      	strh	r0, [r4, #14]
    6166:	7ca8      	ldrb	r0, [r5, #18]
    6168:	b1a0      	cbz	r0, 6194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    616a:	f7ff ff05 	bl	5f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    616e:	4928      	ldr	r1, [pc, #160]	; (6210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    6170:	f881 8018 	strb.w	r8, [r1, #24]
    6174:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    6178:	e9c1 2304 	strd	r2, r3, [r1, #16]
    617c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    6180:	f008 fc31 	bl	e9e6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    6184:	4603      	mov	r3, r0
    6186:	22fb      	movs	r2, #251	; 0xfb
    6188:	4921      	ldr	r1, [pc, #132]	; (6210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    618a:	2000      	movs	r0, #0
    618c:	f006 f950 	bl	c430 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    6190:	f006 f984 	bl	c49c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    6194:	4d1e      	ldr	r5, [pc, #120]	; (6210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    6196:	354a      	adds	r5, #74	; 0x4a
    6198:	f1b9 0f00 	cmp.w	r9, #0
    619c:	d104      	bne.n	61a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    619e:	78e1      	ldrb	r1, [r4, #3]
    61a0:	2001      	movs	r0, #1
    61a2:	f7ff ff21 	bl	5fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    61a6:	b1b0      	cbz	r0, 61d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    61a8:	f006 fd48 	bl	cc3c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    61ac:	f89d 0000 	ldrb.w	r0, [sp]
    61b0:	b110      	cbz	r0, 61b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    61b2:	2000      	movs	r0, #0
    61b4:	f7ff fe34 	bl	5e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    61b8:	b136      	cbz	r6, 61c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    61ba:	70e7      	strb	r7, [r4, #3]
    61bc:	7968      	ldrb	r0, [r5, #5]
    61be:	1c40      	adds	r0, r0, #1
    61c0:	7168      	strb	r0, [r5, #5]
    61c2:	f7ff feeb 	bl	5f9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    61c6:	e002      	b.n	61ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    61c8:	79a8      	ldrb	r0, [r5, #6]
    61ca:	1c40      	adds	r0, r0, #1
    61cc:	71a8      	strb	r0, [r5, #6]
    61ce:	f000 f87f 	bl	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    61d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    61d6:	f89d 0000 	ldrb.w	r0, [sp]
    61da:	b110      	cbz	r0, 61e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    61dc:	2001      	movs	r0, #1
    61de:	f7ff fe1f 	bl	5e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    61e2:	2000      	movs	r0, #0
    61e4:	f000 f98c 	bl	6500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    61e8:	f89d 0000 	ldrb.w	r0, [sp]
    61ec:	b110      	cbz	r0, 61f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    61ee:	2002      	movs	r0, #2
    61f0:	f7ff fe16 	bl	5e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    61f4:	b136      	cbz	r6, 6204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    61f6:	70e7      	strb	r7, [r4, #3]
    61f8:	7968      	ldrb	r0, [r5, #5]
    61fa:	1c40      	adds	r0, r0, #1
    61fc:	7168      	strb	r0, [r5, #5]
    61fe:	f7ff fecd 	bl	5f9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    6202:	e7e6      	b.n	61d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    6204:	79a8      	ldrb	r0, [r5, #6]
    6206:	1c40      	adds	r0, r0, #1
    6208:	71a8      	strb	r0, [r5, #6]
    620a:	e7e2      	b.n	61d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    620c:	200000ac 	.word	0x200000ac
    6210:	20000bd8 	.word	0x20000bd8
    6214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6218:	4688      	mov	r8, r1
    621a:	4681      	mov	r9, r0
    621c:	f7ff feb2 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6220:	4d29      	ldr	r5, [pc, #164]	; (62c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    6222:	4604      	mov	r4, r0
    6224:	7828      	ldrb	r0, [r5, #0]
    6226:	2801      	cmp	r0, #1
    6228:	d004      	beq.n	6234 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    622a:	f240 416a 	movw	r1, #1130	; 0x46a
    622e:	2027      	movs	r0, #39	; 0x27
    6230:	f7fe fe46 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6234:	7860      	ldrb	r0, [r4, #1]
    6236:	2600      	movs	r6, #0
    6238:	2701      	movs	r7, #1
    623a:	b120      	cbz	r0, 6246 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    623c:	7066      	strb	r6, [r4, #1]
    623e:	2100      	movs	r1, #0
    6240:	2004      	movs	r0, #4
    6242:	f7ff fe91 	bl	5f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    6246:	6a29      	ldr	r1, [r5, #32]
    6248:	7808      	ldrb	r0, [r1, #0]
    624a:	43c0      	mvns	r0, r0
    624c:	0780      	lsls	r0, r0, #30
    624e:	d109      	bne.n	6264 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    6250:	79a0      	ldrb	r0, [r4, #6]
    6252:	bb88      	cbnz	r0, 62b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    6254:	2002      	movs	r0, #2
    6256:	f7ff fe87 	bl	5f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    625a:	6a28      	ldr	r0, [r5, #32]
    625c:	7800      	ldrb	r0, [r0, #0]
    625e:	43c0      	mvns	r0, r0
    6260:	0780      	lsls	r0, r0, #30
    6262:	d029      	beq.n	62b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    6264:	6a28      	ldr	r0, [r5, #32]
    6266:	7840      	ldrb	r0, [r0, #1]
    6268:	b110      	cbz	r0, 6270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    626a:	2002      	movs	r0, #2
    626c:	71a0      	strb	r0, [r4, #6]
    626e:	e000      	b.n	6272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    6270:	71a7      	strb	r7, [r4, #6]
    6272:	7ce0      	ldrb	r0, [r4, #19]
    6274:	b1a0      	cbz	r0, 62a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    6276:	f7ff fe7f 	bl	5f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    627a:	4914      	ldr	r1, [pc, #80]	; (62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    627c:	7a6d      	ldrb	r5, [r5, #9]
    627e:	760e      	strb	r6, [r1, #24]
    6280:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    6284:	e9c1 2304 	strd	r2, r3, [r1, #16]
    6288:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    628c:	f008 fbab 	bl	e9e6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    6290:	4603      	mov	r3, r0
    6292:	462a      	mov	r2, r5
    6294:	490d      	ldr	r1, [pc, #52]	; (62cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    6296:	2001      	movs	r0, #1
    6298:	f006 f8ca 	bl	c430 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    629c:	f006 f8fe 	bl	c49c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    62a0:	ea38 0009 	bics.w	r0, r8, r9
    62a4:	d004      	beq.n	62b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    62a6:	2100      	movs	r1, #0
    62a8:	4608      	mov	r0, r1
    62aa:	f7ff fe9d 	bl	5fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    62ae:	b128      	cbz	r0, 62bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    62b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62b4:	f000 b80c 	b.w	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    62b8:	2003      	movs	r0, #3
    62ba:	e7d7      	b.n	626c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    62bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    62c0:	2000      	movs	r0, #0
    62c2:	f000 b8df 	b.w	6484 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    62c6:	0000      	.short	0x0000
    62c8:	200000ac 	.word	0x200000ac
    62cc:	20000bd8 	.word	0x20000bd8
    62d0:	b510      	push	{r4, lr}
    62d2:	f006 f9a5 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    62d6:	f006 f861 	bl	c39c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    62da:	4c0d      	ldr	r4, [pc, #52]	; (6310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    62dc:	89e0      	ldrh	r0, [r4, #14]
    62de:	f7ff fe57 	bl	5f90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    62e2:	69e2      	ldr	r2, [r4, #28]
    62e4:	7961      	ldrb	r1, [r4, #5]
    62e6:	78a0      	ldrb	r0, [r4, #2]
    62e8:	4790      	blx	r2
    62ea:	480a      	ldr	r0, [pc, #40]	; (6314 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    62ec:	7c40      	ldrb	r0, [r0, #17]
    62ee:	b158      	cbz	r0, 6308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    62f0:	4808      	ldr	r0, [pc, #32]	; (6314 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    62f2:	3852      	subs	r0, #82	; 0x52
    62f4:	f850 1f52 	ldr.w	r1, [r0, #82]!
    62f8:	6081      	str	r1, [r0, #8]
    62fa:	6841      	ldr	r1, [r0, #4]
    62fc:	60c1      	str	r1, [r0, #12]
    62fe:	4805      	ldr	r0, [pc, #20]	; (6314 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    6300:	2101      	movs	r1, #1
    6302:	7401      	strb	r1, [r0, #16]
    6304:	f000 ff1c 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6308:	2000      	movs	r0, #0
    630a:	7020      	strb	r0, [r4, #0]
    630c:	bd10      	pop	{r4, pc}
    630e:	0000      	.short	0x0000
    6310:	200000ac 	.word	0x200000ac
    6314:	20000c22 	.word	0x20000c22
    6318:	4808      	ldr	r0, [pc, #32]	; (633c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    631a:	b510      	push	{r4, lr}
    631c:	7800      	ldrb	r0, [r0, #0]
    631e:	2802      	cmp	r0, #2
    6320:	d004      	beq.n	632c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    6322:	f240 2111 	movw	r1, #529	; 0x211
    6326:	2027      	movs	r0, #39	; 0x27
    6328:	f7fe fdca 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    632c:	4904      	ldr	r1, [pc, #16]	; (6340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    632e:	2001      	movs	r0, #1
    6330:	71c8      	strb	r0, [r1, #7]
    6332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6336:	f7ff bfcb 	b.w	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    633a:	0000      	.short	0x0000
    633c:	200000ac 	.word	0x200000ac
    6340:	20000c22 	.word	0x20000c22
    6344:	b430      	push	{r4, r5}
    6346:	4b0c      	ldr	r3, [pc, #48]	; (6378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    6348:	b942      	cbnz	r2, 635c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    634a:	79da      	ldrb	r2, [r3, #7]
    634c:	2aff      	cmp	r2, #255	; 0xff
    634e:	d105      	bne.n	635c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    6350:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    6354:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    6358:	42a2      	cmp	r2, r4
    635a:	d00b      	beq.n	6374 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    635c:	b131      	cbz	r1, 636c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    635e:	79da      	ldrb	r2, [r3, #7]
    6360:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    6364:	bc30      	pop	{r4, r5}
    6366:	4610      	mov	r0, r2
    6368:	f006 bca0 	b.w	ccac <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    636c:	22ff      	movs	r2, #255	; 0xff
    636e:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    6372:	e7f7      	b.n	6364 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    6374:	bc30      	pop	{r4, r5}
    6376:	4770      	bx	lr
    6378:	200000ac 	.word	0x200000ac
    637c:	b570      	push	{r4, r5, r6, lr}
    637e:	4606      	mov	r6, r0
    6380:	f7ff fe00 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6384:	4a1b      	ldr	r2, [pc, #108]	; (63f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    6386:	4604      	mov	r4, r0
    6388:	2501      	movs	r5, #1
    638a:	6a51      	ldr	r1, [r2, #36]	; 0x24
    638c:	7808      	ldrb	r0, [r1, #0]
    638e:	f000 0003 	and.w	r0, r0, #3
    6392:	2801      	cmp	r0, #1
    6394:	d00c      	beq.n	63b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    6396:	2802      	cmp	r0, #2
    6398:	d00a      	beq.n	63b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    639a:	2803      	cmp	r0, #3
    639c:	d121      	bne.n	63e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    639e:	7065      	strb	r5, [r4, #1]
    63a0:	89d0      	ldrh	r0, [r2, #14]
    63a2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    63a6:	81d0      	strh	r0, [r2, #14]
    63a8:	2001      	movs	r0, #1
    63aa:	f7ff fddd 	bl	5f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    63ae:	e018      	b.n	63e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    63b0:	7848      	ldrb	r0, [r1, #1]
    63b2:	b1b0      	cbz	r0, 63e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    63b4:	89d1      	ldrh	r1, [r2, #14]
    63b6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    63ba:	81d1      	strh	r1, [r2, #14]
    63bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
    63be:	2900      	cmp	r1, #0
    63c0:	d009      	beq.n	63d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    63c2:	28fb      	cmp	r0, #251	; 0xfb
    63c4:	d808      	bhi.n	63d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    63c6:	7990      	ldrb	r0, [r2, #6]
    63c8:	b120      	cbz	r0, 63d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    63ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    63ce:	2020      	movs	r0, #32
    63d0:	f7ff bdde 	b.w	5f90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    63d4:	7035      	strb	r5, [r6, #0]
    63d6:	bd70      	pop	{r4, r5, r6, pc}
    63d8:	7950      	ldrb	r0, [r2, #5]
    63da:	f040 0010 	orr.w	r0, r0, #16
    63de:	7150      	strb	r0, [r2, #5]
    63e0:	bd70      	pop	{r4, r5, r6, pc}
    63e2:	7a20      	ldrb	r0, [r4, #8]
    63e4:	2801      	cmp	r0, #1
    63e6:	d001      	beq.n	63ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    63e8:	7225      	strb	r5, [r4, #8]
    63ea:	bd70      	pop	{r4, r5, r6, pc}
    63ec:	2000      	movs	r0, #0
    63ee:	7220      	strb	r0, [r4, #8]
    63f0:	bd70      	pop	{r4, r5, r6, pc}
    63f2:	0000      	.short	0x0000
    63f4:	200000ac 	.word	0x200000ac
    63f8:	b570      	push	{r4, r5, r6, lr}
    63fa:	f7ff fdc3 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    63fe:	4604      	mov	r4, r0
    6400:	7980      	ldrb	r0, [r0, #6]
    6402:	2800      	cmp	r0, #0
    6404:	d027      	beq.n	6456 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    6406:	2802      	cmp	r0, #2
    6408:	d10d      	bne.n	6426 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    640a:	4818      	ldr	r0, [pc, #96]	; (646c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    640c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    640e:	f007 ff47 	bl	e2a0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    6412:	b308      	cbz	r0, 6458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    6414:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    6418:	1c40      	adds	r0, r0, #1
    641a:	f141 0100 	adc.w	r1, r1, #0
    641e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    6422:	f000 fe8d 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    6426:	2500      	movs	r5, #0
    6428:	71a5      	strb	r5, [r4, #6]
    642a:	78a0      	ldrb	r0, [r4, #2]
    642c:	2601      	movs	r6, #1
    642e:	b170      	cbz	r0, 644e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    6430:	70a5      	strb	r5, [r4, #2]
    6432:	f7ff fb21 	bl	5a78 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    6436:	b190      	cbz	r0, 645e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    6438:	2100      	movs	r1, #0
    643a:	2008      	movs	r0, #8
    643c:	f7ff fd94 	bl	5f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    6440:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    6444:	1c40      	adds	r0, r0, #1
    6446:	f141 0100 	adc.w	r1, r1, #0
    644a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    644e:	79e0      	ldrb	r0, [r4, #7]
    6450:	2801      	cmp	r0, #1
    6452:	d009      	beq.n	6468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    6454:	71e6      	strb	r6, [r4, #7]
    6456:	bd70      	pop	{r4, r5, r6, pc}
    6458:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    645c:	e001      	b.n	6462 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    645e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    6462:	2027      	movs	r0, #39	; 0x27
    6464:	f7fe fd2c 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6468:	71e5      	strb	r5, [r4, #7]
    646a:	bd70      	pop	{r4, r5, r6, pc}
    646c:	200000ac 	.word	0x200000ac
    6470:	4803      	ldr	r0, [pc, #12]	; (6480 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    6472:	7800      	ldrb	r0, [r0, #0]
    6474:	2800      	cmp	r0, #0
    6476:	d001      	beq.n	647c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    6478:	f7ff bf2a 	b.w	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    647c:	4770      	bx	lr
    647e:	0000      	.short	0x0000
    6480:	200000ac 	.word	0x200000ac
    6484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6488:	4607      	mov	r7, r0
    648a:	f7ff fd75 	bl	5f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    648e:	4680      	mov	r8, r0
    6490:	f7ff fd78 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    6494:	4c17      	ldr	r4, [pc, #92]	; (64f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    6496:	4605      	mov	r5, r0
    6498:	463a      	mov	r2, r7
    649a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    649c:	6260      	str	r0, [r4, #36]	; 0x24
    649e:	2101      	movs	r1, #1
    64a0:	4640      	mov	r0, r8
    64a2:	f7ff ff4f 	bl	6344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    64a6:	7ce8      	ldrb	r0, [r5, #19]
    64a8:	2600      	movs	r6, #0
    64aa:	b178      	cbz	r0, 64cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    64ac:	4812      	ldr	r0, [pc, #72]	; (64f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    64ae:	f006 fb1b 	bl	cae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    64b2:	4812      	ldr	r0, [pc, #72]	; (64fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    64b4:	7606      	strb	r6, [r0, #24]
    64b6:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    64ba:	e9c0 1204 	strd	r1, r2, [r0, #16]
    64be:	490e      	ldr	r1, [pc, #56]	; (64f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    64c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    64c2:	f005 ff3d 	bl	c340 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    64c6:	f005 ff4f 	bl	c368 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    64ca:	e004      	b.n	64d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    64cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    64ce:	f006 fb0b 	bl	cae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    64d2:	f005 ff63 	bl	c39c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    64d6:	b917      	cbnz	r7, 64de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    64d8:	4630      	mov	r0, r6
    64da:	f006 f9b9 	bl	c850 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    64de:	2100      	movs	r1, #0
    64e0:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    64e4:	4608      	mov	r0, r1
    64e6:	f006 fb8b 	bl	cc00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    64ea:	2002      	movs	r0, #2
    64ec:	7020      	strb	r0, [r4, #0]
    64ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64f2:	0000      	.short	0x0000
    64f4:	200000ac 	.word	0x200000ac
    64f8:	20000ad0 	.word	0x20000ad0
    64fc:	20000bd8 	.word	0x20000bd8
    6500:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6504:	4604      	mov	r4, r0
    6506:	f7ff fd3d 	bl	5f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    650a:	4605      	mov	r5, r0
    650c:	f7ff fd34 	bl	5f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    6510:	4606      	mov	r6, r0
    6512:	f8df 9164 	ldr.w	r9, [pc, #356]	; 6678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    6516:	4622      	mov	r2, r4
    6518:	2100      	movs	r1, #0
    651a:	f7ff ff13 	bl	6344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    651e:	79a8      	ldrb	r0, [r5, #6]
    6520:	f04f 0800 	mov.w	r8, #0
    6524:	2701      	movs	r7, #1
    6526:	f1a9 0420 	sub.w	r4, r9, #32
    652a:	b140      	cbz	r0, 653e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    652c:	2801      	cmp	r0, #1
    652e:	d01f      	beq.n	6570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    6530:	2802      	cmp	r0, #2
    6532:	d030      	beq.n	6596 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    6534:	2803      	cmp	r0, #3
    6536:	d03c      	beq.n	65b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    6538:	f240 21ae 	movw	r1, #686	; 0x2ae
    653c:	e058      	b.n	65f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    653e:	7a20      	ldrb	r0, [r4, #8]
    6540:	2150      	movs	r1, #80	; 0x50
    6542:	f8ad 0004 	strh.w	r0, [sp, #4]
    6546:	5388      	strh	r0, [r1, r6]
    6548:	4648      	mov	r0, r9
    654a:	f7ff fabf 	bl	5acc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    654e:	b128      	cbz	r0, 655c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    6550:	2080      	movs	r0, #128	; 0x80
    6552:	6a21      	ldr	r1, [r4, #32]
    6554:	f7ff fd08 	bl	5f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    6558:	70af      	strb	r7, [r5, #2]
    655a:	e02e      	b.n	65ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    655c:	466a      	mov	r2, sp
    655e:	a901      	add	r1, sp, #4
    6560:	6b20      	ldr	r0, [r4, #48]	; 0x30
    6562:	f008 fa58 	bl	ea16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    6566:	6220      	str	r0, [r4, #32]
    6568:	b110      	cbz	r0, 6570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    656a:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    656e:	b111      	cbz	r1, 6576 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    6570:	4842      	ldr	r0, [pc, #264]	; (667c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    6572:	6220      	str	r0, [r4, #32]
    6574:	e021      	b.n	65ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    6576:	f89d 1000 	ldrb.w	r1, [sp]
    657a:	b931      	cbnz	r1, 658a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    657c:	f8a0 8000 	strh.w	r8, [r0]
    6580:	f880 8002 	strb.w	r8, [r0, #2]
    6584:	2101      	movs	r1, #1
    6586:	f008 fd96 	bl	f0b6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    658a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    658e:	6a20      	ldr	r0, [r4, #32]
    6590:	f008 fd4b 	bl	f02a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    6594:	e011      	b.n	65ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    6596:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    659a:	f8ad 0004 	strh.w	r0, [sp, #4]
    659e:	466a      	mov	r2, sp
    65a0:	a901      	add	r1, sp, #4
    65a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    65a4:	f008 fa37 	bl	ea16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    65a8:	6220      	str	r0, [r4, #32]
    65aa:	b930      	cbnz	r0, 65ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    65ac:	f240 219f 	movw	r1, #671	; 0x29f
    65b0:	e01e      	b.n	65f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    65b2:	4648      	mov	r0, r9
    65b4:	f7ff fa8a 	bl	5acc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    65b8:	b1c0      	cbz	r0, 65ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    65ba:	6a20      	ldr	r0, [r4, #32]
    65bc:	2308      	movs	r3, #8
    65be:	7801      	ldrb	r1, [r0, #0]
    65c0:	f021 0108 	bic.w	r1, r1, #8
    65c4:	7001      	strb	r1, [r0, #0]
    65c6:	79ea      	ldrb	r2, [r5, #7]
    65c8:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    65cc:	4311      	orrs	r1, r2
    65ce:	f021 0104 	bic.w	r1, r1, #4
    65d2:	7001      	strb	r1, [r0, #0]
    65d4:	7a2a      	ldrb	r2, [r5, #8]
    65d6:	2304      	movs	r3, #4
    65d8:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    65dc:	4311      	orrs	r1, r2
    65de:	f021 0110 	bic.w	r1, r1, #16
    65e2:	7001      	strb	r1, [r0, #0]
    65e4:	43c9      	mvns	r1, r1
    65e6:	0789      	lsls	r1, r1, #30
    65e8:	d005      	beq.n	65f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    65ea:	e007      	b.n	65fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    65ec:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    65f0:	2027      	movs	r0, #39	; 0x27
    65f2:	f7fe fc65 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    65f6:	78c0      	ldrb	r0, [r0, #3]
    65f8:	2802      	cmp	r0, #2
    65fa:	d00f      	beq.n	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    65fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    65fe:	f007 ffa0 	bl	e542 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    6602:	b108      	cbz	r0, 6608 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    6604:	2101      	movs	r1, #1
    6606:	e00a      	b.n	661e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    6608:	6a20      	ldr	r0, [r4, #32]
    660a:	7800      	ldrb	r0, [r0, #0]
    660c:	43c0      	mvns	r0, r0
    660e:	0780      	lsls	r0, r0, #30
    6610:	d004      	beq.n	661c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    6612:	f7ff fa19 	bl	5a48 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    6616:	f080 0101 	eor.w	r1, r0, #1
    661a:	e000      	b.n	661e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    661c:	2100      	movs	r1, #0
    661e:	6a20      	ldr	r0, [r4, #32]
    6620:	7802      	ldrb	r2, [r0, #0]
    6622:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    6626:	7001      	strb	r1, [r0, #0]
    6628:	7ca9      	ldrb	r1, [r5, #18]
    662a:	b191      	cbz	r1, 6652 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    662c:	7841      	ldrb	r1, [r0, #1]
    662e:	b181      	cbz	r1, 6652 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    6630:	4813      	ldr	r0, [pc, #76]	; (6680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    6632:	f006 fa59 	bl	cae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6636:	4811      	ldr	r0, [pc, #68]	; (667c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    6638:	3828      	subs	r0, #40	; 0x28
    663a:	7607      	strb	r7, [r0, #24]
    663c:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    6640:	e9c0 1204 	strd	r1, r2, [r0, #16]
    6644:	480e      	ldr	r0, [pc, #56]	; (6680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    6646:	6a21      	ldr	r1, [r4, #32]
    6648:	f005 fe7a 	bl	c340 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    664c:	f005 fec4 	bl	c3d8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    6650:	e003      	b.n	665a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    6652:	f006 fa49 	bl	cae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6656:	f005 fea1 	bl	c39c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    665a:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    665e:	2101      	movs	r1, #1
    6660:	2000      	movs	r0, #0
    6662:	f006 facd 	bl	cc00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    6666:	7127      	strb	r7, [r4, #4]
    6668:	6a20      	ldr	r0, [r4, #32]
    666a:	8801      	ldrh	r1, [r0, #0]
    666c:	8221      	strh	r1, [r4, #16]
    666e:	7880      	ldrb	r0, [r0, #2]
    6670:	74a0      	strb	r0, [r4, #18]
    6672:	7027      	strb	r7, [r4, #0]
    6674:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    6678:	200000cc 	.word	0x200000cc
    667c:	20000c00 	.word	0x20000c00
    6680:	20000ad0 	.word	0x20000ad0
    6684:	00006319 	.word	0x00006319
    6688:	0000609d 	.word	0x0000609d
    668c:	00006215 	.word	0x00006215
    6690:	00006471 	.word	0x00006471

00006694 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    6694:	4800      	ldr	r0, [pc, #0]	; (6698 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    6696:	4770      	bx	lr
    6698:	200015bd 	.word	0x200015bd

0000669c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    669c:	b570      	push	{r4, r5, r6, lr}
    669e:	2600      	movs	r6, #0
    66a0:	4635      	mov	r5, r6
    66a2:	4c0f      	ldr	r4, [pc, #60]	; (66e0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    66a4:	e018      	b.n	66d8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    66a6:	1960      	adds	r0, r4, r5
    66a8:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    66ac:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    66b0:	2a01      	cmp	r2, #1
    66b2:	d002      	beq.n	66ba <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    66b4:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    66b8:	b160      	cbz	r0, 66d4 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    66ba:	480a      	ldr	r0, [pc, #40]	; (66e4 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    66bc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    66c0:	1c73      	adds	r3, r6, #1
    66c2:	5585      	strb	r5, [r0, r6]
    66c4:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    66c8:	4630      	mov	r0, r6
    66ca:	b2de      	uxtb	r6, r3
    66cc:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    66d0:	f006 fbbe 	bl	ce50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    66d4:	1c6d      	adds	r5, r5, #1
    66d6:	b2ed      	uxtb	r5, r5
    66d8:	78a0      	ldrb	r0, [r4, #2]
    66da:	42a8      	cmp	r0, r5
    66dc:	d8e3      	bhi.n	66a6 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    66de:	bd70      	pop	{r4, r5, r6, pc}
    66e0:	200013ea 	.word	0x200013ea
    66e4:	20000274 	.word	0x20000274

000066e8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    66e8:	4904      	ldr	r1, [pc, #16]	; (66fc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    66ea:	788a      	ldrb	r2, [r1, #2]
    66ec:	4282      	cmp	r2, r0
    66ee:	d903      	bls.n	66f8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    66f0:	4408      	add	r0, r1
    66f2:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    66f6:	4770      	bx	lr
    66f8:	2000      	movs	r0, #0
    66fa:	4770      	bx	lr
    66fc:	200013ea 	.word	0x200013ea

00006700 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    6700:	4904      	ldr	r1, [pc, #16]	; (6714 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    6702:	788a      	ldrb	r2, [r1, #2]
    6704:	4282      	cmp	r2, r0
    6706:	d903      	bls.n	6710 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    6708:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    670c:	3083      	adds	r0, #131	; 0x83
    670e:	4770      	bx	lr
    6710:	2000      	movs	r0, #0
    6712:	4770      	bx	lr
    6714:	200013ea 	.word	0x200013ea

00006718 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    6718:	4a05      	ldr	r2, [pc, #20]	; (6730 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    671a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    671e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    6722:	6802      	ldr	r2, [r0, #0]
    6724:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    6728:	8880      	ldrh	r0, [r0, #4]
    672a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    672e:	4770      	bx	lr
    6730:	200013ea 	.word	0x200013ea

00006734 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    6734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6738:	4607      	mov	r7, r0
    673a:	2400      	movs	r4, #0
    673c:	4d10      	ldr	r5, [pc, #64]	; (6780 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    673e:	e019      	b.n	6774 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    6740:	4620      	mov	r0, r4
    6742:	f7ff ffdd 	bl	6700 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6746:	0003      	movs	r3, r0
    6748:	d012      	beq.n	6770 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    674a:	1928      	adds	r0, r5, r4
    674c:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    6750:	b970      	cbnz	r0, 6770 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    6752:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    6756:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    675a:	f206 160b 	addw	r6, r6, #267	; 0x10b
    675e:	463a      	mov	r2, r7
    6760:	4631      	mov	r1, r6
    6762:	4618      	mov	r0, r3
    6764:	f008 f8da 	bl	e91c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    6768:	4630      	mov	r0, r6
    676a:	4621      	mov	r1, r4
    676c:	f7ff ffd4 	bl	6718 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    6770:	1c64      	adds	r4, r4, #1
    6772:	b2e4      	uxtb	r4, r4
    6774:	78a8      	ldrb	r0, [r5, #2]
    6776:	42a0      	cmp	r0, r4
    6778:	d8e2      	bhi.n	6740 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    677a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    677e:	0000      	.short	0x0000
    6780:	200013ea 	.word	0x200013ea

00006784 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    6784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6788:	460e      	mov	r6, r1
    678a:	4607      	mov	r7, r0
    678c:	4615      	mov	r5, r2
    678e:	2106      	movs	r1, #6
    6790:	4630      	mov	r0, r6
    6792:	f008 fb93 	bl	eebc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6796:	4c0d      	ldr	r4, [pc, #52]	; (67cc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    6798:	b160      	cbz	r0, 67b4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    679a:	2000      	movs	r0, #0
    679c:	e004      	b.n	67a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    679e:	1821      	adds	r1, r4, r0
    67a0:	1c40      	adds	r0, r0, #1
    67a2:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    67a6:	b2c0      	uxtb	r0, r0
    67a8:	78a1      	ldrb	r1, [r4, #2]
    67aa:	4281      	cmp	r1, r0
    67ac:	d8f7      	bhi.n	679e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    67ae:	2001      	movs	r0, #1
    67b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67b4:	4631      	mov	r1, r6
    67b6:	4638      	mov	r0, r7
    67b8:	f008 f93c 	bl	ea34 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    67bc:	2808      	cmp	r0, #8
    67be:	d003      	beq.n	67c8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    67c0:	4420      	add	r0, r4
    67c2:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    67c6:	e7f2      	b.n	67ae <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    67c8:	2000      	movs	r0, #0
    67ca:	e7f1      	b.n	67b0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    67cc:	200013ea 	.word	0x200013ea

000067d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    67d0:	4904      	ldr	r1, [pc, #16]	; (67e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    67d2:	788a      	ldrb	r2, [r1, #2]
    67d4:	4282      	cmp	r2, r0
    67d6:	d903      	bls.n	67e0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    67d8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    67dc:	1cc0      	adds	r0, r0, #3
    67de:	4770      	bx	lr
    67e0:	2000      	movs	r0, #0
    67e2:	4770      	bx	lr
    67e4:	200013ea 	.word	0x200013ea

000067e8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    67e8:	4908      	ldr	r1, [pc, #32]	; (680c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    67ea:	788a      	ldrb	r2, [r1, #2]
    67ec:	4282      	cmp	r2, r0
    67ee:	d903      	bls.n	67f8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    67f0:	180a      	adds	r2, r1, r0
    67f2:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    67f6:	b10a      	cbz	r2, 67fc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    67f8:	2000      	movs	r0, #0
    67fa:	4770      	bx	lr
    67fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    6800:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    6804:	f200 100b 	addw	r0, r0, #267	; 0x10b
    6808:	4770      	bx	lr
    680a:	0000      	.short	0x0000
    680c:	200013ea 	.word	0x200013ea

00006810 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    6810:	b510      	push	{r4, lr}
    6812:	f240 12d3 	movw	r2, #467	; 0x1d3
    6816:	2100      	movs	r1, #0
    6818:	4808      	ldr	r0, [pc, #32]	; (683c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    681a:	f006 ffdb 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    681e:	2208      	movs	r2, #8
    6820:	21ff      	movs	r1, #255	; 0xff
    6822:	4807      	ldr	r0, [pc, #28]	; (6840 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    6824:	f006 ffd6 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6828:	4805      	ldr	r0, [pc, #20]	; (6840 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    682a:	2100      	movs	r1, #0
    682c:	1f00      	subs	r0, r0, #4
    682e:	7001      	strb	r1, [r0, #0]
    6830:	7041      	strb	r1, [r0, #1]
    6832:	f44f 7161 	mov.w	r1, #900	; 0x384
    6836:	8041      	strh	r1, [r0, #2]
    6838:	bd10      	pop	{r4, pc}
    683a:	0000      	.short	0x0000
    683c:	200013ea 	.word	0x200013ea
    6840:	20000274 	.word	0x20000274

00006844 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    6844:	4901      	ldr	r1, [pc, #4]	; (684c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    6846:	7008      	strb	r0, [r1, #0]
    6848:	4770      	bx	lr
    684a:	0000      	.short	0x0000
    684c:	20000270 	.word	0x20000270

00006850 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    6850:	4801      	ldr	r0, [pc, #4]	; (6858 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    6852:	7800      	ldrb	r0, [r0, #0]
    6854:	4770      	bx	lr
    6856:	0000      	.short	0x0000
    6858:	20000270 	.word	0x20000270

0000685c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    685c:	4b0b      	ldr	r3, [pc, #44]	; (688c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    685e:	b510      	push	{r4, lr}
    6860:	789c      	ldrb	r4, [r3, #2]
    6862:	4284      	cmp	r4, r0
    6864:	d90f      	bls.n	6886 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    6866:	4418      	add	r0, r3
    6868:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    686c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    6870:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    6874:	700b      	strb	r3, [r1, #0]
    6876:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    687a:	6011      	str	r1, [r2, #0]
    687c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    6880:	8090      	strh	r0, [r2, #4]
    6882:	2001      	movs	r0, #1
    6884:	bd10      	pop	{r4, pc}
    6886:	2000      	movs	r0, #0
    6888:	bd10      	pop	{r4, pc}
    688a:	0000      	.short	0x0000
    688c:	200013ea 	.word	0x200013ea

00006890 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    6890:	4907      	ldr	r1, [pc, #28]	; (68b0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    6892:	788a      	ldrb	r2, [r1, #2]
    6894:	4282      	cmp	r2, r0
    6896:	d909      	bls.n	68ac <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    6898:	4408      	add	r0, r1
    689a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    689e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    68a2:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    68a6:	f000 0001 	and.w	r0, r0, #1
    68aa:	4770      	bx	lr
    68ac:	2000      	movs	r0, #0
    68ae:	4770      	bx	lr
    68b0:	200013ea 	.word	0x200013ea

000068b4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    68b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    68b8:	4698      	mov	r8, r3
    68ba:	4691      	mov	r9, r2
    68bc:	460c      	mov	r4, r1
    68be:	4605      	mov	r5, r0
    68c0:	f000 f962 	bl	6b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    68c4:	4606      	mov	r6, r0
    68c6:	2810      	cmp	r0, #16
    68c8:	d006      	beq.n	68d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    68ca:	f000 f92d 	bl	6b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    68ce:	2810      	cmp	r0, #16
    68d0:	d002      	beq.n	68d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    68d2:	2012      	movs	r0, #18
    68d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    68d8:	4f18      	ldr	r7, [pc, #96]	; (693c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    68da:	78b8      	ldrb	r0, [r7, #2]
    68dc:	2808      	cmp	r0, #8
    68de:	d22a      	bcs.n	6936 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    68e0:	2e10      	cmp	r6, #16
    68e2:	d105      	bne.n	68f0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    68e4:	2200      	movs	r2, #0
    68e6:	4621      	mov	r1, r4
    68e8:	4628      	mov	r0, r5
    68ea:	f000 f931 	bl	6b50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    68ee:	4606      	mov	r6, r0
    68f0:	78bc      	ldrb	r4, [r7, #2]
    68f2:	2210      	movs	r2, #16
    68f4:	1c60      	adds	r0, r4, #1
    68f6:	70b8      	strb	r0, [r7, #2]
    68f8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    68fc:	1ce8      	adds	r0, r5, #3
    68fe:	4649      	mov	r1, r9
    6900:	f008 fa7f 	bl	ee02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6904:	f105 0083 	add.w	r0, r5, #131	; 0x83
    6908:	2210      	movs	r2, #16
    690a:	4641      	mov	r1, r8
    690c:	f008 fa79 	bl	ee02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    6910:	2110      	movs	r1, #16
    6912:	4640      	mov	r0, r8
    6914:	f008 fad2 	bl	eebc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    6918:	443c      	add	r4, r7
    691a:	2110      	movs	r1, #16
    691c:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    6920:	4648      	mov	r0, r9
    6922:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    6926:	f008 fac9 	bl	eebc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    692a:	77e0      	strb	r0, [r4, #31]
    692c:	f804 6c29 	strb.w	r6, [r4, #-41]
    6930:	2000      	movs	r0, #0
    6932:	73e0      	strb	r0, [r4, #15]
    6934:	e7ce      	b.n	68d4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    6936:	2007      	movs	r0, #7
    6938:	e7cc      	b.n	68d4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    693a:	0000      	.short	0x0000
    693c:	200013ea 	.word	0x200013ea

00006940 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    6940:	4806      	ldr	r0, [pc, #24]	; (695c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    6942:	b510      	push	{r4, lr}
    6944:	7880      	ldrb	r0, [r0, #2]
    6946:	1e40      	subs	r0, r0, #1
    6948:	b244      	sxtb	r4, r0
    694a:	e004      	b.n	6956 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    694c:	b2e0      	uxtb	r0, r4
    694e:	f000 f963 	bl	6c18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    6952:	1e64      	subs	r4, r4, #1
    6954:	b264      	sxtb	r4, r4
    6956:	2c00      	cmp	r4, #0
    6958:	daf8      	bge.n	694c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    695a:	bd10      	pop	{r4, pc}
    695c:	200013ea 	.word	0x200013ea

00006960 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    6960:	4801      	ldr	r0, [pc, #4]	; (6968 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    6962:	8840      	ldrh	r0, [r0, #2]
    6964:	4770      	bx	lr
    6966:	0000      	.short	0x0000
    6968:	20000270 	.word	0x20000270

0000696c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    696c:	b138      	cbz	r0, 697e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    696e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    6972:	4288      	cmp	r0, r1
    6974:	d803      	bhi.n	697e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    6976:	4903      	ldr	r1, [pc, #12]	; (6984 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    6978:	8048      	strh	r0, [r1, #2]
    697a:	2001      	movs	r0, #1
    697c:	4770      	bx	lr
    697e:	2000      	movs	r0, #0
    6980:	4770      	bx	lr
    6982:	0000      	.short	0x0000
    6984:	20000270 	.word	0x20000270

00006988 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    6988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    698c:	4614      	mov	r4, r2
    698e:	2501      	movs	r5, #1
    6990:	2200      	movs	r2, #0
    6992:	461f      	mov	r7, r3
    6994:	462e      	mov	r6, r5
    6996:	7022      	strb	r2, [r4, #0]
    6998:	f000 f8f6 	bl	6b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    699c:	2810      	cmp	r0, #16
    699e:	d024      	beq.n	69ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    69a0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 69f8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    69a4:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    69a8:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    69ac:	f001 0101 	and.w	r1, r1, #1
    69b0:	7021      	strb	r1, [r4, #0]
    69b2:	f000 f8b9 	bl	6b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    69b6:	4604      	mov	r4, r0
    69b8:	2810      	cmp	r0, #16
    69ba:	d016      	beq.n	69ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    69bc:	b107      	cbz	r7, 69c0 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    69be:	703c      	strb	r4, [r7, #0]
    69c0:	4620      	mov	r0, r4
    69c2:	f7ff ff05 	bl	67d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    69c6:	b180      	cbz	r0, 69ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    69c8:	f898 1002 	ldrb.w	r1, [r8, #2]
    69cc:	4640      	mov	r0, r8
    69ce:	42a1      	cmp	r1, r4
    69d0:	d903      	bls.n	69da <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    69d2:	1901      	adds	r1, r0, r4
    69d4:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    69d8:	e000      	b.n	69dc <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    69da:	2600      	movs	r6, #0
    69dc:	eb08 0004 	add.w	r0, r8, r4
    69e0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    69e4:	2801      	cmp	r0, #1
    69e6:	d004      	beq.n	69f2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    69e8:	2500      	movs	r5, #0
    69ea:	ea45 0006 	orr.w	r0, r5, r6
    69ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    69f2:	2501      	movs	r5, #1
    69f4:	e7f9      	b.n	69ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    69f6:	0000      	.short	0x0000
    69f8:	200013ea 	.word	0x200013ea

000069fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    69fc:	b570      	push	{r4, r5, r6, lr}
    69fe:	460d      	mov	r5, r1
    6a00:	4606      	mov	r6, r0
    6a02:	f000 f8c1 	bl	6b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    6a06:	4c10      	ldr	r4, [pc, #64]	; (6a48 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    6a08:	2810      	cmp	r0, #16
    6a0a:	d007      	beq.n	6a1c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6a0c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    6a10:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    6a14:	07c9      	lsls	r1, r1, #31
    6a16:	d001      	beq.n	6a1c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    6a18:	2001      	movs	r0, #1
    6a1a:	bd70      	pop	{r4, r5, r6, pc}
    6a1c:	7861      	ldrb	r1, [r4, #1]
    6a1e:	2908      	cmp	r1, #8
    6a20:	d210      	bcs.n	6a44 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    6a22:	2810      	cmp	r0, #16
    6a24:	d008      	beq.n	6a38 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    6a26:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    6a2a:	2101      	movs	r1, #1
    6a2c:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    6a30:	7860      	ldrb	r0, [r4, #1]
    6a32:	1c40      	adds	r0, r0, #1
    6a34:	7060      	strb	r0, [r4, #1]
    6a36:	e7ef      	b.n	6a18 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    6a38:	2201      	movs	r2, #1
    6a3a:	4629      	mov	r1, r5
    6a3c:	4630      	mov	r0, r6
    6a3e:	f000 f887 	bl	6b50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    6a42:	e7f5      	b.n	6a30 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    6a44:	2000      	movs	r0, #0
    6a46:	bd70      	pop	{r4, r5, r6, pc}
    6a48:	200013ea 	.word	0x200013ea

00006a4c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    6a4c:	b570      	push	{r4, r5, r6, lr}
    6a4e:	4d0b      	ldr	r5, [pc, #44]	; (6a7c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    6a50:	7828      	ldrb	r0, [r5, #0]
    6a52:	1e40      	subs	r0, r0, #1
    6a54:	b244      	sxtb	r4, r0
    6a56:	e00a      	b.n	6a6e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    6a58:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6a5c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6a60:	07c0      	lsls	r0, r0, #31
    6a62:	d002      	beq.n	6a6a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    6a64:	b2e0      	uxtb	r0, r4
    6a66:	f000 f91f 	bl	6ca8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    6a6a:	1e64      	subs	r4, r4, #1
    6a6c:	b264      	sxtb	r4, r4
    6a6e:	2c00      	cmp	r4, #0
    6a70:	daf2      	bge.n	6a58 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    6a72:	4903      	ldr	r1, [pc, #12]	; (6a80 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    6a74:	2000      	movs	r0, #0
    6a76:	7048      	strb	r0, [r1, #1]
    6a78:	bd70      	pop	{r4, r5, r6, pc}
    6a7a:	0000      	.short	0x0000
    6a7c:	200013ea 	.word	0x200013ea
    6a80:	20000270 	.word	0x20000270

00006a84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    6a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a88:	2400      	movs	r4, #0
    6a8a:	4625      	mov	r5, r4
    6a8c:	4e18      	ldr	r6, [pc, #96]	; (6af0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    6a8e:	e029      	b.n	6ae4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    6a90:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    6a94:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    6a98:	07c0      	lsls	r0, r0, #31
    6a9a:	d021      	beq.n	6ae0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6a9c:	4628      	mov	r0, r5
    6a9e:	f000 f843 	bl	6b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6aa2:	4603      	mov	r3, r0
    6aa4:	f7ff fe94 	bl	67d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    6aa8:	4601      	mov	r1, r0
    6aaa:	2000      	movs	r0, #0
    6aac:	2b10      	cmp	r3, #16
    6aae:	d009      	beq.n	6ac4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6ab0:	18f2      	adds	r2, r6, r3
    6ab2:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    6ab6:	f1bc 0f01 	cmp.w	ip, #1
    6aba:	d002      	beq.n	6ac2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    6abc:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    6ac0:	b102      	cbz	r2, 6ac4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    6ac2:	2001      	movs	r0, #1
    6ac4:	1e40      	subs	r0, r0, #1
    6ac6:	4201      	tst	r1, r0
    6ac8:	d10a      	bne.n	6ae0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    6aca:	480a      	ldr	r0, [pc, #40]	; (6af4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    6acc:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    6ad0:	5503      	strb	r3, [r0, r4]
    6ad2:	4620      	mov	r0, r4
    6ad4:	1c64      	adds	r4, r4, #1
    6ad6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    6ada:	b2e4      	uxtb	r4, r4
    6adc:	f006 f9b8 	bl	ce50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    6ae0:	1c6d      	adds	r5, r5, #1
    6ae2:	b2ed      	uxtb	r5, r5
    6ae4:	7830      	ldrb	r0, [r6, #0]
    6ae6:	42a8      	cmp	r0, r5
    6ae8:	d8d2      	bhi.n	6a90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    6aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6aee:	0000      	.short	0x0000
    6af0:	200013ea 	.word	0x200013ea
    6af4:	20000274 	.word	0x20000274
    6af8:	4602      	mov	r2, r0
    6afa:	4809      	ldr	r0, [pc, #36]	; (6b20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    6afc:	b510      	push	{r4, lr}
    6afe:	7800      	ldrb	r0, [r0, #0]
    6b00:	460b      	mov	r3, r1
    6b02:	b158      	cbz	r0, 6b1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6b04:	4807      	ldr	r0, [pc, #28]	; (6b24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6b06:	7881      	ldrb	r1, [r0, #2]
    6b08:	b141      	cbz	r1, 6b1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    6b0a:	b10b      	cbz	r3, 6b10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    6b0c:	1cc0      	adds	r0, r0, #3
    6b0e:	e001      	b.n	6b14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    6b10:	4804      	ldr	r0, [pc, #16]	; (6b24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    6b12:	3083      	adds	r0, #131	; 0x83
    6b14:	f005 fb36 	bl	c184 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    6b18:	2001      	movs	r0, #1
    6b1a:	bd10      	pop	{r4, pc}
    6b1c:	2000      	movs	r0, #0
    6b1e:	bd10      	pop	{r4, pc}
    6b20:	20000270 	.word	0x20000270
    6b24:	200013ea 	.word	0x200013ea
    6b28:	4908      	ldr	r1, [pc, #32]	; (6b4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    6b2a:	b510      	push	{r4, lr}
    6b2c:	4603      	mov	r3, r0
    6b2e:	2000      	movs	r0, #0
    6b30:	788a      	ldrb	r2, [r1, #2]
    6b32:	e006      	b.n	6b42 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    6b34:	180c      	adds	r4, r1, r0
    6b36:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    6b3a:	429c      	cmp	r4, r3
    6b3c:	d004      	beq.n	6b48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    6b3e:	1c40      	adds	r0, r0, #1
    6b40:	b2c0      	uxtb	r0, r0
    6b42:	4282      	cmp	r2, r0
    6b44:	d8f6      	bhi.n	6b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    6b46:	2010      	movs	r0, #16
    6b48:	bd10      	pop	{r4, pc}
    6b4a:	0000      	.short	0x0000
    6b4c:	200013ea 	.word	0x200013ea
    6b50:	b570      	push	{r4, r5, r6, lr}
    6b52:	4b0c      	ldr	r3, [pc, #48]	; (6b84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    6b54:	4604      	mov	r4, r0
    6b56:	7818      	ldrb	r0, [r3, #0]
    6b58:	1c45      	adds	r5, r0, #1
    6b5a:	701d      	strb	r5, [r3, #0]
    6b5c:	2810      	cmp	r0, #16
    6b5e:	d303      	bcc.n	6b68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    6b60:	2146      	movs	r1, #70	; 0x46
    6b62:	2028      	movs	r0, #40	; 0x28
    6b64:	f7fe f9ac 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6b68:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    6b6c:	680d      	ldr	r5, [r1, #0]
    6b6e:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    6b72:	8889      	ldrh	r1, [r1, #4]
    6b74:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    6b78:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    6b7c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    6b80:	bd70      	pop	{r4, r5, r6, pc}
    6b82:	0000      	.short	0x0000
    6b84:	200013ea 	.word	0x200013ea
    6b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6b8c:	460f      	mov	r7, r1
    6b8e:	4606      	mov	r6, r0
    6b90:	2400      	movs	r4, #0
    6b92:	4d0d      	ldr	r5, [pc, #52]	; (6bc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    6b94:	e00f      	b.n	6bb6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    6b96:	bf00      	nop
    6b98:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    6b9c:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    6ba0:	42b1      	cmp	r1, r6
    6ba2:	d106      	bne.n	6bb2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    6ba4:	2206      	movs	r2, #6
    6ba6:	4639      	mov	r1, r7
    6ba8:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    6bac:	f006 fd86 	bl	d6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6bb0:	b138      	cbz	r0, 6bc2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    6bb2:	1c64      	adds	r4, r4, #1
    6bb4:	b2e4      	uxtb	r4, r4
    6bb6:	7828      	ldrb	r0, [r5, #0]
    6bb8:	42a0      	cmp	r0, r4
    6bba:	d8ed      	bhi.n	6b98 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    6bbc:	2010      	movs	r0, #16
    6bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bc2:	4620      	mov	r0, r4
    6bc4:	e7fb      	b.n	6bbe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    6bc6:	0000      	.short	0x0000
    6bc8:	200013ea 	.word	0x200013ea
    6bcc:	b570      	push	{r4, r5, r6, lr}
    6bce:	4605      	mov	r5, r0
    6bd0:	f7ff ffaa 	bl	6b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6bd4:	2810      	cmp	r0, #16
    6bd6:	d11c      	bne.n	6c12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6bd8:	4c0e      	ldr	r4, [pc, #56]	; (6c14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    6bda:	7820      	ldrb	r0, [r4, #0]
    6bdc:	1e40      	subs	r0, r0, #1
    6bde:	b2c0      	uxtb	r0, r0
    6be0:	7020      	strb	r0, [r4, #0]
    6be2:	42a8      	cmp	r0, r5
    6be4:	d015      	beq.n	6c12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6be6:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    6bea:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    6bee:	f502 7080 	add.w	r0, r2, #256	; 0x100
    6bf2:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    6bf6:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    6bfa:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    6bfe:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    6c02:	7820      	ldrb	r0, [r4, #0]
    6c04:	f7ff ff90 	bl	6b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    6c08:	2810      	cmp	r0, #16
    6c0a:	d002      	beq.n	6c12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    6c0c:	4420      	add	r0, r4
    6c0e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    6c12:	bd70      	pop	{r4, r5, r6, pc}
    6c14:	200013ea 	.word	0x200013ea
    6c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c1c:	4c21      	ldr	r4, [pc, #132]	; (6ca4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    6c1e:	4606      	mov	r6, r0
    6c20:	19a7      	adds	r7, r4, r6
    6c22:	78a0      	ldrb	r0, [r4, #2]
    6c24:	1e40      	subs	r0, r0, #1
    6c26:	b2c5      	uxtb	r5, r0
    6c28:	70a5      	strb	r5, [r4, #2]
    6c2a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    6c2e:	42ae      	cmp	r6, r5
    6c30:	d02a      	beq.n	6c88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    6c32:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    6c36:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    6c3a:	f10a 0103 	add.w	r1, sl, #3
    6c3e:	f109 0003 	add.w	r0, r9, #3
    6c42:	2210      	movs	r2, #16
    6c44:	f006 fd4c 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6c48:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    6c4c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    6c50:	2210      	movs	r2, #16
    6c52:	f006 fd45 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6c56:	1960      	adds	r0, r4, r5
    6c58:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    6c5c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    6c60:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    6c64:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    6c68:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    6c6c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    6c70:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    6c74:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    6c78:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    6c7c:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    6c80:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    6c84:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    6c88:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    6c8c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    6c90:	07c0      	lsls	r0, r0, #31
    6c92:	d104      	bne.n	6c9e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    6c94:	4640      	mov	r0, r8
    6c96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6c9a:	f7ff bf97 	b.w	6bcc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ca2:	0000      	.short	0x0000
    6ca4:	200013ea 	.word	0x200013ea
    6ca8:	4905      	ldr	r1, [pc, #20]	; (6cc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    6caa:	784a      	ldrb	r2, [r1, #1]
    6cac:	1e52      	subs	r2, r2, #1
    6cae:	704a      	strb	r2, [r1, #1]
    6cb0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    6cb4:	2200      	movs	r2, #0
    6cb6:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    6cba:	f7ff bf87 	b.w	6bcc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    6cbe:	0000      	.short	0x0000
    6cc0:	200013ea 	.word	0x200013ea

00006cc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    6cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6cc8:	4604      	mov	r4, r0
    6cca:	f100 0778 	add.w	r7, r0, #120	; 0x78
    6cce:	b171      	cbz	r1, 6cee <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    6cd0:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    6cd4:	1e75      	subs	r5, r6, #1
    6cd6:	2901      	cmp	r1, #1
    6cd8:	d016      	beq.n	6d08 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    6cda:	2902      	cmp	r1, #2
    6cdc:	d025      	beq.n	6d2a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    6cde:	2903      	cmp	r1, #3
    6ce0:	d110      	bne.n	6d04 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    6ce2:	4631      	mov	r1, r6
    6ce4:	4628      	mov	r0, r5
    6ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6cea:	f008 b939 	b.w	ef60 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    6cee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    6cf2:	2100      	movs	r1, #0
    6cf4:	f006 fd6e 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    6cf8:	4638      	mov	r0, r7
    6cfa:	f008 f8ee 	bl	eeda <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    6cfe:	2020      	movs	r0, #32
    6d00:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    6d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d08:	68e1      	ldr	r1, [r4, #12]
    6d0a:	480d      	ldr	r0, [pc, #52]	; (6d40 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    6d0c:	460a      	mov	r2, r1
    6d0e:	4408      	add	r0, r1
    6d10:	fbb0 f0f1 	udiv	r0, r0, r1
    6d14:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    6d18:	f640 30b8 	movw	r0, #3000	; 0xbb8
    6d1c:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    6d20:	8ae3      	ldrh	r3, [r4, #22]
    6d22:	4638      	mov	r0, r7
    6d24:	f000 f80e 	bl	6d44 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    6d28:	e7db      	b.n	6ce2 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    6d2a:	68c1      	ldr	r1, [r0, #12]
    6d2c:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    6d30:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    6d34:	4638      	mov	r0, r7
    6d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6d3a:	f000 b803 	b.w	6d44 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    6d3e:	0000      	.short	0x0000
    6d40:	01c9c37f 	.word	0x01c9c37f
    6d44:	b530      	push	{r4, r5, lr}
    6d46:	2400      	movs	r4, #0
    6d48:	86c4      	strh	r4, [r0, #54]	; 0x36
    6d4a:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    6d4c:	4d13      	ldr	r5, [pc, #76]	; (6d9c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    6d4e:	434c      	muls	r4, r1
    6d50:	fbb4 f4f2 	udiv	r4, r4, r2
    6d54:	8744      	strh	r4, [r0, #58]	; 0x3a
    6d56:	f242 7410 	movw	r4, #10000	; 0x2710
    6d5a:	4363      	muls	r3, r4
    6d5c:	fbb3 f3f2 	udiv	r3, r3, r2
    6d60:	1c5b      	adds	r3, r3, #1
    6d62:	b29b      	uxth	r3, r3
    6d64:	fb03 f402 	mul.w	r4, r3, r2
    6d68:	8703      	strh	r3, [r0, #56]	; 0x38
    6d6a:	42ac      	cmp	r4, r5
    6d6c:	d901      	bls.n	6d72 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    6d6e:	1e5b      	subs	r3, r3, #1
    6d70:	8703      	strh	r3, [r0, #56]	; 0x38
    6d72:	4b0b      	ldr	r3, [pc, #44]	; (6da0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    6d74:	f240 2471 	movw	r4, #625	; 0x271
    6d78:	fbb3 f3f2 	udiv	r3, r3, r2
    6d7c:	1c5b      	adds	r3, r3, #1
    6d7e:	87c3      	strh	r3, [r0, #62]	; 0x3e
    6d80:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    6d82:	4363      	muls	r3, r4
    6d84:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    6d88:	1e5b      	subs	r3, r3, #1
    6d8a:	fbb3 f3f2 	udiv	r3, r3, r2
    6d8e:	62c3      	str	r3, [r0, #44]	; 0x2c
    6d90:	6a83      	ldr	r3, [r0, #40]	; 0x28
    6d92:	434b      	muls	r3, r1
    6d94:	fbb3 f1f2 	udiv	r1, r3, r2
    6d98:	6281      	str	r1, [r0, #40]	; 0x28
    6d9a:	bd30      	pop	{r4, r5, pc}
    6d9c:	01e84800 	.word	0x01e84800
    6da0:	02625a00 	.word	0x02625a00

00006da4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    6da4:	4909      	ldr	r1, [pc, #36]	; (6dcc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6da6:	b508      	push	{r3, lr}
    6da8:	7809      	ldrb	r1, [r1, #0]
    6daa:	f88d 1000 	strb.w	r1, [sp]
    6dae:	9900      	ldr	r1, [sp, #0]
    6db0:	9100      	str	r1, [sp, #0]
    6db2:	f89d 1000 	ldrb.w	r1, [sp]
    6db6:	b109      	cbz	r1, 6dbc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    6db8:	2000      	movs	r0, #0
    6dba:	bd08      	pop	{r3, pc}
    6dbc:	4903      	ldr	r1, [pc, #12]	; (6dcc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    6dbe:	f8d1 2001 	ldr.w	r2, [r1, #1]
    6dc2:	6002      	str	r2, [r0, #0]
    6dc4:	7949      	ldrb	r1, [r1, #5]
    6dc6:	7101      	strb	r1, [r0, #4]
    6dc8:	2001      	movs	r0, #1
    6dca:	bd08      	pop	{r3, pc}
    6dcc:	20000297 	.word	0x20000297

00006dd0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    6dd0:	4905      	ldr	r1, [pc, #20]	; (6de8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    6dd2:	2201      	movs	r2, #1
    6dd4:	700a      	strb	r2, [r1, #0]
    6dd6:	460a      	mov	r2, r1
    6dd8:	6803      	ldr	r3, [r0, #0]
    6dda:	f8c2 3001 	str.w	r3, [r2, #1]
    6dde:	7900      	ldrb	r0, [r0, #4]
    6de0:	7150      	strb	r0, [r2, #5]
    6de2:	2000      	movs	r0, #0
    6de4:	7008      	strb	r0, [r1, #0]
    6de6:	4770      	bx	lr
    6de8:	20000297 	.word	0x20000297

00006dec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    6dec:	b570      	push	{r4, r5, r6, lr}
    6dee:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    6df2:	b28b      	uxth	r3, r1
    6df4:	7ac5      	ldrb	r5, [r0, #11]
    6df6:	ea83 0102 	eor.w	r1, r3, r2
    6dfa:	2200      	movs	r2, #0
    6dfc:	b2cc      	uxtb	r4, r1
    6dfe:	0a09      	lsrs	r1, r1, #8
    6e00:	fa94 f4a4 	rbit	r4, r4
    6e04:	fa91 f1a1 	rbit	r1, r1
    6e08:	0e24      	lsrs	r4, r4, #24
    6e0a:	0e09      	lsrs	r1, r1, #24
    6e0c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    6e10:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    6e14:	1c52      	adds	r2, r2, #1
    6e16:	4419      	add	r1, r3
    6e18:	b2d2      	uxtb	r2, r2
    6e1a:	b289      	uxth	r1, r1
    6e1c:	2a03      	cmp	r2, #3
    6e1e:	d3ed      	bcc.n	6dfc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    6e20:	4059      	eors	r1, r3
    6e22:	2225      	movs	r2, #37	; 0x25
    6e24:	fbb1 f3f2 	udiv	r3, r1, r2
    6e28:	fb02 1213 	mls	r2, r2, r3, r1
    6e2c:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    6e30:	f002 0607 	and.w	r6, r2, #7
    6e34:	785b      	ldrb	r3, [r3, #1]
    6e36:	2401      	movs	r4, #1
    6e38:	fa04 f606 	lsl.w	r6, r4, r6
    6e3c:	4233      	tst	r3, r6
    6e3e:	d001      	beq.n	6e44 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    6e40:	4610      	mov	r0, r2
    6e42:	bd70      	pop	{r4, r5, r6, pc}
    6e44:	434d      	muls	r5, r1
    6e46:	0c29      	lsrs	r1, r5, #16
    6e48:	1c49      	adds	r1, r1, #1
    6e4a:	b2c9      	uxtb	r1, r1
    6e4c:	2200      	movs	r2, #0
    6e4e:	1885      	adds	r5, r0, r2
    6e50:	79ab      	ldrb	r3, [r5, #6]
    6e52:	428b      	cmp	r3, r1
    6e54:	d312      	bcc.n	6e7c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    6e56:	f895 5001 	ldrb.w	r5, [r5, #1]
    6e5a:	2300      	movs	r3, #0
    6e5c:	fa04 f603 	lsl.w	r6, r4, r3
    6e60:	4235      	tst	r5, r6
    6e62:	d001      	beq.n	6e68 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    6e64:	1e49      	subs	r1, r1, #1
    6e66:	b2c9      	uxtb	r1, r1
    6e68:	b121      	cbz	r1, 6e74 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    6e6a:	1c5b      	adds	r3, r3, #1
    6e6c:	b2db      	uxtb	r3, r3
    6e6e:	2b08      	cmp	r3, #8
    6e70:	d3f4      	bcc.n	6e5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    6e72:	e005      	b.n	6e80 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    6e74:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    6e78:	b2c0      	uxtb	r0, r0
    6e7a:	bd70      	pop	{r4, r5, r6, pc}
    6e7c:	1ac9      	subs	r1, r1, r3
    6e7e:	b2c9      	uxtb	r1, r1
    6e80:	1c52      	adds	r2, r2, #1
    6e82:	b2d2      	uxtb	r2, r2
    6e84:	2a05      	cmp	r2, #5
    6e86:	d3e2      	bcc.n	6e4e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    6e88:	f240 110d 	movw	r1, #269	; 0x10d
    6e8c:	2046      	movs	r0, #70	; 0x46
    6e8e:	f7fe f817 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6e92:	0000      	movs	r0, r0
    6e94:	b570      	push	{r4, r5, r6, lr}
    6e96:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    6e9a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    6e9e:	2401      	movs	r4, #1
    6ea0:	fb03 2101 	mla	r1, r3, r1, r2
    6ea4:	2225      	movs	r2, #37	; 0x25
    6ea6:	fbb1 f3f2 	udiv	r3, r1, r2
    6eaa:	fb02 1113 	mls	r1, r2, r3, r1
    6eae:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    6eb2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    6eb6:	f001 0307 	and.w	r3, r1, #7
    6eba:	7d92      	ldrb	r2, [r2, #22]
    6ebc:	fa04 f303 	lsl.w	r3, r4, r3
    6ec0:	421a      	tst	r2, r3
    6ec2:	d003      	beq.n	6ecc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    6ec4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    6ec8:	2000      	movs	r0, #0
    6eca:	bd70      	pop	{r4, r5, r6, pc}
    6ecc:	f890 2020 	ldrb.w	r2, [r0, #32]
    6ed0:	fbb1 f3f2 	udiv	r3, r1, r2
    6ed4:	fb02 1113 	mls	r1, r2, r3, r1
    6ed8:	1c49      	adds	r1, r1, #1
    6eda:	b2c9      	uxtb	r1, r1
    6edc:	2300      	movs	r3, #0
    6ede:	18c5      	adds	r5, r0, r3
    6ee0:	7eea      	ldrb	r2, [r5, #27]
    6ee2:	428a      	cmp	r2, r1
    6ee4:	d311      	bcc.n	6f0a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    6ee6:	f895 5016 	ldrb.w	r5, [r5, #22]
    6eea:	2200      	movs	r2, #0
    6eec:	fa04 f602 	lsl.w	r6, r4, r2
    6ef0:	4235      	tst	r5, r6
    6ef2:	d001      	beq.n	6ef8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    6ef4:	1e49      	subs	r1, r1, #1
    6ef6:	b2c9      	uxtb	r1, r1
    6ef8:	b121      	cbz	r1, 6f04 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    6efa:	1c52      	adds	r2, r2, #1
    6efc:	b2d2      	uxtb	r2, r2
    6efe:	2a08      	cmp	r2, #8
    6f00:	d3f4      	bcc.n	6eec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    6f02:	e004      	b.n	6f0e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    6f04:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    6f08:	e7dc      	b.n	6ec4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    6f0a:	1a89      	subs	r1, r1, r2
    6f0c:	b2c9      	uxtb	r1, r1
    6f0e:	1c5b      	adds	r3, r3, #1
    6f10:	b2db      	uxtb	r3, r3
    6f12:	2b05      	cmp	r3, #5
    6f14:	d3e3      	bcc.n	6ede <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    6f16:	201f      	movs	r0, #31
    6f18:	bd70      	pop	{r4, r5, r6, pc}
	...

00006f1c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    6f1c:	7841      	ldrb	r1, [r0, #1]
    6f1e:	b141      	cbz	r1, 6f32 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6f20:	78c0      	ldrb	r0, [r0, #3]
    6f22:	2819      	cmp	r0, #25
    6f24:	d203      	bcs.n	6f2e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    6f26:	4a04      	ldr	r2, [pc, #16]	; (6f38 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    6f28:	5c10      	ldrb	r0, [r2, r0]
    6f2a:	4288      	cmp	r0, r1
    6f2c:	d101      	bne.n	6f32 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    6f2e:	2001      	movs	r0, #1
    6f30:	4770      	bx	lr
    6f32:	2000      	movs	r0, #0
    6f34:	4770      	bx	lr
    6f36:	0000      	.short	0x0000
    6f38:	00010c8a 	.word	0x00010c8a

00006f3c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    6f3c:	b510      	push	{r4, lr}
    6f3e:	2201      	movs	r2, #1
    6f40:	70c1      	strb	r1, [r0, #3]
    6f42:	2919      	cmp	r1, #25
    6f44:	d202      	bcs.n	6f4c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    6f46:	4a06      	ldr	r2, [pc, #24]	; (6f60 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    6f48:	5c52      	ldrb	r2, [r2, r1]
    6f4a:	e006      	b.n	6f5a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6f4c:	29ff      	cmp	r1, #255	; 0xff
    6f4e:	d004      	beq.n	6f5a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    6f50:	f240 31d5 	movw	r1, #981	; 0x3d5
    6f54:	202a      	movs	r0, #42	; 0x2a
    6f56:	f7fd ffb3 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6f5a:	7042      	strb	r2, [r0, #1]
    6f5c:	bd10      	pop	{r4, pc}
    6f5e:	0000      	.short	0x0000
    6f60:	00010c8a 	.word	0x00010c8a

00006f64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    6f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f68:	4c12      	ldr	r4, [pc, #72]	; (6fb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6f6a:	4607      	mov	r7, r0
    6f6c:	460e      	mov	r6, r1
    6f6e:	7da0      	ldrb	r0, [r4, #22]
    6f70:	b110      	cbz	r0, 6f78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    6f72:	8b20      	ldrh	r0, [r4, #24]
    6f74:	2800      	cmp	r0, #0
    6f76:	d012      	beq.n	6f9e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6f78:	480e      	ldr	r0, [pc, #56]	; (6fb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    6f7a:	3014      	adds	r0, #20
    6f7c:	4680      	mov	r8, r0
    6f7e:	f008 f920 	bl	f1c2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6f82:	b9a8      	cbnz	r0, 6fb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6f84:	8aa5      	ldrh	r5, [r4, #20]
    6f86:	8aa0      	ldrh	r0, [r4, #20]
    6f88:	4632      	mov	r2, r6
    6f8a:	4639      	mov	r1, r7
    6f8c:	f008 f951 	bl	f232 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    6f90:	b138      	cbz	r0, 6fa2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    6f92:	7da0      	ldrb	r0, [r4, #22]
    6f94:	b110      	cbz	r0, 6f9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    6f96:	8b20      	ldrh	r0, [r4, #24]
    6f98:	1e40      	subs	r0, r0, #1
    6f9a:	8320      	strh	r0, [r4, #24]
    6f9c:	2001      	movs	r0, #1
    6f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6fa2:	4640      	mov	r0, r8
    6fa4:	f008 f90d 	bl	f1c2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    6fa8:	b910      	cbnz	r0, 6fb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    6faa:	8aa0      	ldrh	r0, [r4, #20]
    6fac:	42a8      	cmp	r0, r5
    6fae:	d1ea      	bne.n	6f86 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    6fb0:	2000      	movs	r0, #0
    6fb2:	e7f4      	b.n	6f9e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    6fb4:	2000124c 	.word	0x2000124c
    6fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6fbc:	468a      	mov	sl, r1
    6fbe:	4699      	mov	r9, r3
    6fc0:	4615      	mov	r5, r2
    6fc2:	4604      	mov	r4, r0
    6fc4:	a901      	add	r1, sp, #4
    6fc6:	f007 fd96 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6fca:	bbd8      	cbnz	r0, 7044 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    6fcc:	9f02      	ldr	r7, [sp, #8]
    6fce:	2001      	movs	r0, #1
    6fd0:	3778      	adds	r7, #120	; 0x78
    6fd2:	b18d      	cbz	r5, 6ff8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x94>
    6fd4:	4620      	mov	r0, r4
    6fd6:	f7fe fb87 	bl	56e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    6fda:	0004      	movs	r4, r0
    6fdc:	d00e      	beq.n	6ffc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x98>
    6fde:	4629      	mov	r1, r5
    6fe0:	f007 fa81 	bl	e4e6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    6fe4:	0006      	movs	r6, r0
    6fe6:	d003      	beq.n	6ff0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8c>
    6fe8:	4819      	ldr	r0, [pc, #100]	; (7050 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xec>)
    6fea:	8840      	ldrh	r0, [r0, #2]
    6fec:	42a8      	cmp	r0, r5
    6fee:	d207      	bcs.n	7000 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    6ff0:	2000      	movs	r0, #0
    6ff2:	b004      	add	sp, #16
    6ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6ff8:	7538      	strb	r0, [r7, #20]
    6ffa:	e023      	b.n	7044 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    6ffc:	216e      	movs	r1, #110	; 0x6e
    6ffe:	e024      	b.n	704a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe6>
    7000:	4620      	mov	r0, r4
    7002:	4631      	mov	r1, r6
    7004:	aa03      	add	r2, sp, #12
    7006:	f007 fa67 	bl	e4d8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    700a:	9803      	ldr	r0, [sp, #12]
    700c:	f04f 0800 	mov.w	r8, #0
    7010:	f8a0 8000 	strh.w	r8, [r0]
    7014:	f880 8002 	strb.w	r8, [r0, #2]
    7018:	7d39      	ldrb	r1, [r7, #20]
    701a:	b109      	cbz	r1, 7020 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    701c:	f04f 0a02 	mov.w	sl, #2
    7020:	4651      	mov	r1, sl
    7022:	f008 f848 	bl	f0b6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    7026:	4631      	mov	r1, r6
    7028:	2603      	movs	r6, #3
    702a:	4620      	mov	r0, r4
    702c:	464a      	mov	r2, r9
    702e:	462b      	mov	r3, r5
    7030:	9600      	str	r6, [sp, #0]
    7032:	f007 f90e 	bl	e252 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    7036:	4620      	mov	r0, r4
    7038:	4629      	mov	r1, r5
    703a:	f007 f9e3 	bl	e404 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    703e:	b118      	cbz	r0, 7048 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    7040:	f887 8014 	strb.w	r8, [r7, #20]
    7044:	2001      	movs	r0, #1
    7046:	e7d4      	b.n	6ff2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    7048:	2184      	movs	r1, #132	; 0x84
    704a:	202b      	movs	r0, #43	; 0x2b
    704c:	f7fd ff38 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7050:	2000124c 	.word	0x2000124c

00007054 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    7054:	4901      	ldr	r1, [pc, #4]	; (705c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    7056:	2001      	movs	r0, #1
    7058:	7008      	strb	r0, [r1, #0]
    705a:	4770      	bx	lr
    705c:	2000027d 	.word	0x2000027d

00007060 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    7060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7064:	0006      	movs	r6, r0
    7066:	d00a      	beq.n	707e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    7068:	4926      	ldr	r1, [pc, #152]	; (7104 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    706a:	2201      	movs	r2, #1
    706c:	7808      	ldrb	r0, [r1, #0]
    706e:	b148      	cbz	r0, 7084 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    7070:	2000      	movs	r0, #0
    7072:	7070      	strb	r0, [r6, #1]
    7074:	2303      	movs	r3, #3
    7076:	7033      	strb	r3, [r6, #0]
    7078:	7132      	strb	r2, [r6, #4]
    707a:	7008      	strb	r0, [r1, #0]
    707c:	e03c      	b.n	70f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    707e:	f240 21da 	movw	r1, #730	; 0x2da
    7082:	e009      	b.n	7098 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    7084:	4c1f      	ldr	r4, [pc, #124]	; (7104 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    7086:	1ce4      	adds	r4, r4, #3
    7088:	7820      	ldrb	r0, [r4, #0]
    708a:	b940      	cbnz	r0, 709e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    708c:	1ca0      	adds	r0, r4, #2
    708e:	f008 f919 	bl	f2c4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    7092:	b120      	cbz	r0, 709e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    7094:	f240 21e9 	movw	r1, #745	; 0x2e9
    7098:	2010      	movs	r0, #16
    709a:	f7fd ff11 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    709e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    70a2:	2000      	movs	r0, #0
    70a4:	f7fe f8f0 	bl	5288 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    70a8:	4f17      	ldr	r7, [pc, #92]	; (7108 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    70aa:	f8df 9060 	ldr.w	r9, [pc, #96]	; 710c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    70ae:	4605      	mov	r5, r0
    70b0:	6838      	ldr	r0, [r7, #0]
    70b2:	b130      	cbz	r0, 70c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    70b4:	8860      	ldrh	r0, [r4, #2]
    70b6:	42a8      	cmp	r0, r5
    70b8:	d103      	bne.n	70c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    70ba:	4630      	mov	r0, r6
    70bc:	f000 f9d2 	bl	7464 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
    70c0:	e006      	b.n	70d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x70>
    70c2:	f8d9 0000 	ldr.w	r0, [r9]
    70c6:	b120      	cbz	r0, 70d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x72>
    70c8:	8860      	ldrh	r0, [r4, #2]
    70ca:	4631      	mov	r1, r6
    70cc:	f000 f920 	bl	7310 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a4>
    70d0:	b990      	cbnz	r0, 70f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    70d2:	1ca0      	adds	r0, r4, #2
    70d4:	f008 f8f6 	bl	f2c4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    70d8:	b910      	cbnz	r0, 70e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    70da:	8861      	ldrh	r1, [r4, #2]
    70dc:	4541      	cmp	r1, r8
    70de:	d1e7      	bne.n	70b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x50>
    70e0:	480b      	ldr	r0, [pc, #44]	; (7110 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb0>)
    70e2:	6801      	ldr	r1, [r0, #0]
    70e4:	b111      	cbz	r1, 70ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    70e6:	4630      	mov	r0, r6
    70e8:	4788      	blx	r1
    70ea:	b928      	cbnz	r0, 70f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    70ec:	4809      	ldr	r0, [pc, #36]	; (7114 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>)
    70ee:	6801      	ldr	r1, [r0, #0]
    70f0:	b129      	cbz	r1, 70fe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    70f2:	4630      	mov	r0, r6
    70f4:	4788      	blx	r1
    70f6:	b110      	cbz	r0, 70fe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    70f8:	2001      	movs	r0, #1
    70fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    70fe:	2000      	movs	r0, #0
    7100:	e7fb      	b.n	70fa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    7102:	0000      	.short	0x0000
    7104:	2000027d 	.word	0x2000027d
    7108:	200000f4 	.word	0x200000f4
    710c:	200000f0 	.word	0x200000f0
    7110:	200000f8 	.word	0x200000f8
    7114:	200000ec 	.word	0x200000ec

00007118 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    7118:	4901      	ldr	r1, [pc, #4]	; (7120 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    711a:	7008      	strb	r0, [r1, #0]
    711c:	f000 b996 	b.w	744c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    7120:	2000027c 	.word	0x2000027c

00007124 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>:
    7124:	4902      	ldr	r1, [pc, #8]	; (7130 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA+0xc>)
    7126:	2001      	movs	r0, #1
    7128:	7048      	strb	r0, [r1, #1]
    712a:	f000 b809 	b.w	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    712e:	0000      	.short	0x0000
    7130:	2000027d 	.word	0x2000027d

00007134 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>:
    7134:	4801      	ldr	r0, [pc, #4]	; (713c <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY+0x8>)
    7136:	7840      	ldrb	r0, [r0, #1]
    7138:	4770      	bx	lr
    713a:	0000      	.short	0x0000
    713c:	2000027d 	.word	0x2000027d

00007140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    7140:	4801      	ldr	r0, [pc, #4]	; (7148 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    7142:	7800      	ldrb	r0, [r0, #0]
    7144:	f7fd bcac 	b.w	4aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    7148:	2000027c 	.word	0x2000027c

0000714c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    714c:	4904      	ldr	r1, [pc, #16]	; (7160 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x14>)
    714e:	4803      	ldr	r0, [pc, #12]	; (715c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x10>)
    7150:	6008      	str	r0, [r1, #0]
    7152:	4905      	ldr	r1, [pc, #20]	; (7168 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c>)
    7154:	4803      	ldr	r0, [pc, #12]	; (7164 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x18>)
    7156:	6008      	str	r0, [r1, #0]
    7158:	4770      	bx	lr
    715a:	0000      	.short	0x0000
    715c:	000099dd 	.word	0x000099dd
    7160:	200000f0 	.word	0x200000f0
    7164:	00005be9 	.word	0x00005be9
    7168:	200000f8 	.word	0x200000f8

0000716c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    716c:	4902      	ldr	r1, [pc, #8]	; (7178 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    716e:	4801      	ldr	r0, [pc, #4]	; (7174 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    7170:	6008      	str	r0, [r1, #0]
    7172:	4770      	bx	lr
    7174:	000076d1 	.word	0x000076d1
    7178:	200000f4 	.word	0x200000f4
    717c:	b570      	push	{r4, r5, r6, lr}
    717e:	4604      	mov	r4, r0
    7180:	7800      	ldrb	r0, [r0, #0]
    7182:	2805      	cmp	r0, #5
    7184:	d001      	beq.n	718a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e>
    7186:	216d      	movs	r1, #109	; 0x6d
    7188:	e056      	b.n	7238 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    718a:	7ba0      	ldrb	r0, [r4, #14]
    718c:	06c0      	lsls	r0, r0, #27
    718e:	d401      	bmi.n	7194 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x28>
    7190:	216e      	movs	r1, #110	; 0x6e
    7192:	e051      	b.n	7238 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    7194:	221c      	movs	r2, #28
    7196:	1d21      	adds	r1, r4, #4
    7198:	482d      	ldr	r0, [pc, #180]	; (7250 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    719a:	f006 faa1 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    719e:	482c      	ldr	r0, [pc, #176]	; (7250 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    71a0:	7b22      	ldrb	r2, [r4, #12]
    71a2:	f104 0120 	add.w	r1, r4, #32
    71a6:	301c      	adds	r0, #28
    71a8:	f006 fa9a 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    71ac:	4828      	ldr	r0, [pc, #160]	; (7250 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    71ae:	f04f 0201 	mov.w	r2, #1
    71b2:	7a81      	ldrb	r1, [r0, #10]
    71b4:	0749      	lsls	r1, r1, #29
    71b6:	d502      	bpl.n	71be <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
    71b8:	7cc1      	ldrb	r1, [r0, #19]
    71ba:	29fe      	cmp	r1, #254	; 0xfe
    71bc:	d00c      	beq.n	71d8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x6c>
    71be:	2304      	movs	r3, #4
    71c0:	7023      	strb	r3, [r4, #0]
    71c2:	6801      	ldr	r1, [r0, #0]
    71c4:	6061      	str	r1, [r4, #4]
    71c6:	6841      	ldr	r1, [r0, #4]
    71c8:	60a1      	str	r1, [r4, #8]
    71ca:	8901      	ldrh	r1, [r0, #8]
    71cc:	81a1      	strh	r1, [r4, #12]
    71ce:	7a81      	ldrb	r1, [r0, #10]
    71d0:	070d      	lsls	r5, r1, #28
    71d2:	d519      	bpl.n	7208 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x9c>
    71d4:	73a3      	strb	r3, [r4, #14]
    71d6:	e02b      	b.n	7230 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    71d8:	2113      	movs	r1, #19
    71da:	7021      	strb	r1, [r4, #0]
    71dc:	7801      	ldrb	r1, [r0, #0]
    71de:	7121      	strb	r1, [r4, #4]
    71e0:	7162      	strb	r2, [r4, #5]
    71e2:	7841      	ldrb	r1, [r0, #1]
    71e4:	71a1      	strb	r1, [r4, #6]
    71e6:	f8d0 1002 	ldr.w	r1, [r0, #2]
    71ea:	f8c4 1007 	str.w	r1, [r4, #7]
    71ee:	88c1      	ldrh	r1, [r0, #6]
    71f0:	f8a4 100b 	strh.w	r1, [r4, #11]
    71f4:	21fe      	movs	r1, #254	; 0xfe
    71f6:	7361      	strb	r1, [r4, #13]
    71f8:	6941      	ldr	r1, [r0, #20]
    71fa:	f8c4 100e 	str.w	r1, [r4, #14]
    71fe:	8b01      	ldrh	r1, [r0, #24]
    7200:	8261      	strh	r1, [r4, #18]
    7202:	7a40      	ldrb	r0, [r0, #9]
    7204:	7520      	strb	r0, [r4, #20]
    7206:	bd70      	pop	{r4, r5, r6, pc}
    7208:	07cb      	lsls	r3, r1, #31
    720a:	d003      	beq.n	7214 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    720c:	078b      	lsls	r3, r1, #30
    720e:	d501      	bpl.n	7214 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    7210:	2100      	movs	r1, #0
    7212:	e00c      	b.n	722e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    7214:	074b      	lsls	r3, r1, #29
    7216:	d501      	bpl.n	721c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb0>
    7218:	73a2      	strb	r2, [r4, #14]
    721a:	e009      	b.n	7230 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    721c:	07ca      	lsls	r2, r1, #31
    721e:	d001      	beq.n	7224 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb8>
    7220:	21b5      	movs	r1, #181	; 0xb5
    7222:	e009      	b.n	7238 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    7224:	0789      	lsls	r1, r1, #30
    7226:	d501      	bpl.n	722c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc0>
    7228:	2102      	movs	r1, #2
    722a:	e000      	b.n	722e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    722c:	2103      	movs	r1, #3
    722e:	73a1      	strb	r1, [r4, #14]
    7230:	7a02      	ldrb	r2, [r0, #8]
    7232:	2a1f      	cmp	r2, #31
    7234:	d903      	bls.n	723e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    7236:	21b8      	movs	r1, #184	; 0xb8
    7238:	2010      	movs	r0, #16
    723a:	f7fd fe41 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    723e:	f104 000f 	add.w	r0, r4, #15
    7242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7246:	4902      	ldr	r1, [pc, #8]	; (7250 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    7248:	311c      	adds	r1, #28
    724a:	f006 ba49 	b.w	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    724e:	0000      	.short	0x0000
    7250:	20001268 	.word	0x20001268
    7254:	b510      	push	{r4, lr}
    7256:	492d      	ldr	r1, [pc, #180]	; (730c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a0>)
    7258:	b086      	sub	sp, #24
    725a:	7c8a      	ldrb	r2, [r1, #18]
    725c:	7801      	ldrb	r1, [r0, #0]
    725e:	07d3      	lsls	r3, r2, #31
    7260:	d101      	bne.n	7266 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xfa>
    7262:	291d      	cmp	r1, #29
    7264:	d004      	beq.n	7270 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x104>
    7266:	291c      	cmp	r1, #28
    7268:	d01f      	beq.n	72aa <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x13e>
    726a:	2915      	cmp	r1, #21
    726c:	d046      	beq.n	72fc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x190>
    726e:	e04a      	b.n	7306 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    7270:	8880      	ldrh	r0, [r0, #4]
    7272:	f8ad 0000 	strh.w	r0, [sp]
    7276:	a902      	add	r1, sp, #8
    7278:	f007 fc3d 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    727c:	b110      	cbz	r0, 7284 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x118>
    727e:	f44f 71c4 	mov.w	r1, #392	; 0x188
    7282:	e035      	b.n	72f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    7284:	9803      	ldr	r0, [sp, #12]
    7286:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    728a:	f88d 1002 	strb.w	r1, [sp, #2]
    728e:	7841      	ldrb	r1, [r0, #1]
    7290:	f88d 1003 	strb.w	r1, [sp, #3]
    7294:	8840      	ldrh	r0, [r0, #2]
    7296:	f8ad 0004 	strh.w	r0, [sp, #4]
    729a:	2102      	movs	r1, #2
    729c:	4668      	mov	r0, sp
    729e:	f004 fd45 	bl	bd2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    72a2:	b340      	cbz	r0, 72f6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    72a4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    72a8:	e022      	b.n	72f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    72aa:	0791      	lsls	r1, r2, #30
    72ac:	d42b      	bmi.n	7306 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    72ae:	8884      	ldrh	r4, [r0, #4]
    72b0:	a903      	add	r1, sp, #12
    72b2:	4620      	mov	r0, r4
    72b4:	f008 ff8e 	bl	101d4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    72b8:	b110      	cbz	r0, 72c0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x154>
    72ba:	f240 11a5 	movw	r1, #421	; 0x1a5
    72be:	e017      	b.n	72f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    72c0:	f8ad 4000 	strh.w	r4, [sp]
    72c4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    72c8:	f8ad 0002 	strh.w	r0, [sp, #2]
    72cc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    72d0:	f8ad 0004 	strh.w	r0, [sp, #4]
    72d4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    72d8:	f8ad 0006 	strh.w	r0, [sp, #6]
    72dc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    72e0:	f8ad 0008 	strh.w	r0, [sp, #8]
    72e4:	4668      	mov	r0, sp
    72e6:	f008 ffa0 	bl	1022a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    72ea:	b120      	cbz	r0, 72f6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    72ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    72f0:	2010      	movs	r0, #16
    72f2:	f7fd fde5 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    72f6:	2001      	movs	r0, #1
    72f8:	b006      	add	sp, #24
    72fa:	bd10      	pop	{r4, pc}
    72fc:	0751      	lsls	r1, r2, #29
    72fe:	d402      	bmi.n	7306 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    7300:	7b80      	ldrb	r0, [r0, #14]
    7302:	07c0      	lsls	r0, r0, #31
    7304:	d0f7      	beq.n	72f6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    7306:	2000      	movs	r0, #0
    7308:	e7f6      	b.n	72f8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18c>
    730a:	0000      	.short	0x0000
    730c:	2000124c 	.word	0x2000124c
    7310:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7314:	b087      	sub	sp, #28
    7316:	460c      	mov	r4, r1
    7318:	a902      	add	r1, sp, #8
    731a:	9807      	ldr	r0, [sp, #28]
    731c:	f007 fbeb 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    7320:	2800      	cmp	r0, #0
    7322:	d17d      	bne.n	7420 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    7324:	f8df 9120 	ldr.w	r9, [pc, #288]	; 7448 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2dc>
    7328:	f04f 0801 	mov.w	r8, #1
    732c:	4682      	mov	sl, r0
    732e:	9803      	ldr	r0, [sp, #12]
    7330:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    7334:	2800      	cmp	r0, #0
    7336:	d00c      	beq.n	7352 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    7338:	f8d9 2000 	ldr.w	r2, [r9]
    733c:	b162      	cbz	r2, 7358 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    733e:	4621      	mov	r1, r4
    7340:	9807      	ldr	r0, [sp, #28]
    7342:	4790      	blx	r2
    7344:	b140      	cbz	r0, 7358 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    7346:	4620      	mov	r0, r4
    7348:	f7ff ff84 	bl	7254 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe8>
    734c:	2800      	cmp	r0, #0
    734e:	d1ee      	bne.n	732e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1c2>
    7350:	2001      	movs	r0, #1
    7352:	b009      	add	sp, #36	; 0x24
    7354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7358:	9d03      	ldr	r5, [sp, #12]
    735a:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    735e:	3578      	adds	r5, #120	; 0x78
    7360:	b950      	cbnz	r0, 7378 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    7362:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    7366:	f88d 0004 	strb.w	r0, [sp, #4]
    736a:	9801      	ldr	r0, [sp, #4]
    736c:	9001      	str	r0, [sp, #4]
    736e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    7372:	b108      	cbz	r0, 7378 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    7374:	2001      	movs	r0, #1
    7376:	e000      	b.n	737a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20e>
    7378:	2000      	movs	r0, #0
    737a:	4683      	mov	fp, r0
    737c:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    7380:	b1c0      	cbz	r0, 73b4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    7382:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    7386:	0780      	lsls	r0, r0, #30
    7388:	d514      	bpl.n	73b4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    738a:	f884 a001 	strb.w	sl, [r4, #1]
    738e:	f884 8000 	strb.w	r8, [r4]
    7392:	f884 a004 	strb.w	sl, [r4, #4]
    7396:	9907      	ldr	r1, [sp, #28]
    7398:	f8a4 1005 	strh.w	r1, [r4, #5]
    739c:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    73a0:	71e1      	strb	r1, [r4, #7]
    73a2:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    73a6:	8121      	strh	r1, [r4, #8]
    73a8:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    73ac:	8161      	strh	r1, [r4, #10]
    73ae:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    73b2:	e7c8      	b.n	7346 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    73b4:	9807      	ldr	r0, [sp, #28]
    73b6:	f7fe f997 	bl	56e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    73ba:	0007      	movs	r7, r0
    73bc:	d00d      	beq.n	73da <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26e>
    73be:	f007 f845 	bl	e44c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    73c2:	0006      	movs	r6, r0
    73c4:	d015      	beq.n	73f2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x286>
    73c6:	f884 a001 	strb.w	sl, [r4, #1]
    73ca:	200f      	movs	r0, #15
    73cc:	7020      	strb	r0, [r4, #0]
    73ce:	9807      	ldr	r0, [sp, #28]
    73d0:	80e0      	strh	r0, [r4, #6]
    73d2:	8126      	strh	r6, [r4, #8]
    73d4:	f884 8004 	strb.w	r8, [r4, #4]
    73d8:	e007      	b.n	73ea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x27e>
    73da:	f240 2133 	movw	r1, #563	; 0x233
    73de:	e02d      	b.n	743c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d0>
    73e0:	2100      	movs	r1, #0
    73e2:	4638      	mov	r0, r7
    73e4:	460a      	mov	r2, r1
    73e6:	f007 f955 	bl	e694 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    73ea:	1e76      	subs	r6, r6, #1
    73ec:	b2b6      	uxth	r6, r6
    73ee:	d2f7      	bcs.n	73e0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x274>
    73f0:	e7a9      	b.n	7346 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    73f2:	9807      	ldr	r0, [sp, #28]
    73f4:	f7fe f962 	bl	56bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    73f8:	b1f0      	cbz	r0, 7438 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2cc>
    73fa:	f1bb 0f00 	cmp.w	fp, #0
    73fe:	d020      	beq.n	7442 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    7400:	f006 ff3e 	bl	e280 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    7404:	b160      	cbz	r0, 7420 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    7406:	9807      	ldr	r0, [sp, #28]
    7408:	f007 fa73 	bl	e8f2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    740c:	2100      	movs	r1, #0
    740e:	9807      	ldr	r0, [sp, #28]
    7410:	f7fd ffd4 	bl	53bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    7414:	f884 a001 	strb.w	sl, [r4, #1]
    7418:	210c      	movs	r1, #12
    741a:	4650      	mov	r0, sl
    741c:	7021      	strb	r1, [r4, #0]
    741e:	e000      	b.n	7422 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b6>
    7420:	e00f      	b.n	7442 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    7422:	f884 a004 	strb.w	sl, [r4, #4]
    7426:	9907      	ldr	r1, [sp, #28]
    7428:	f8a4 1005 	strh.w	r1, [r4, #5]
    742c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    7430:	71e1      	strb	r1, [r4, #7]
    7432:	3524      	adds	r5, #36	; 0x24
    7434:	7028      	strb	r0, [r5, #0]
    7436:	e786      	b.n	7346 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    7438:	f240 2151 	movw	r1, #593	; 0x251
    743c:	2010      	movs	r0, #16
    743e:	f7fd fd3f 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7442:	2000      	movs	r0, #0
    7444:	e785      	b.n	7352 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    7446:	0000      	.short	0x0000
    7448:	200000f0 	.word	0x200000f0
    744c:	4804      	ldr	r0, [pc, #16]	; (7460 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f4>)
    744e:	2100      	movs	r1, #0
    7450:	f64f 72ff 	movw	r2, #65535	; 0xffff
    7454:	7001      	strb	r1, [r0, #0]
    7456:	8042      	strh	r2, [r0, #2]
    7458:	1f00      	subs	r0, r0, #4
    745a:	f8a0 1001 	strh.w	r1, [r0, #1]
    745e:	4770      	bx	lr
    7460:	20000280 	.word	0x20000280
    7464:	b570      	push	{r4, r5, r6, lr}
    7466:	4604      	mov	r4, r0
    7468:	481b      	ldr	r0, [pc, #108]	; (74d8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x36c>)
    746a:	6801      	ldr	r1, [r0, #0]
    746c:	b319      	cbz	r1, 74b6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    746e:	4620      	mov	r0, r4
    7470:	4788      	blx	r1
    7472:	b300      	cbz	r0, 74b6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    7474:	7820      	ldrb	r0, [r4, #0]
    7476:	2818      	cmp	r0, #24
    7478:	d002      	beq.n	7480 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x314>
    747a:	2805      	cmp	r0, #5
    747c:	d016      	beq.n	74ac <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x340>
    747e:	e018      	b.n	74b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    7480:	7920      	ldrb	r0, [r4, #4]
    7482:	2801      	cmp	r0, #1
    7484:	d115      	bne.n	74b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    7486:	88e0      	ldrh	r0, [r4, #6]
    7488:	2100      	movs	r1, #0
    748a:	f007 f9ca 	bl	e822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    748e:	0004      	movs	r4, r0
    7490:	d00f      	beq.n	74b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    7492:	8820      	ldrh	r0, [r4, #0]
    7494:	f007 fa2d 	bl	e8f2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    7498:	8820      	ldrh	r0, [r4, #0]
    749a:	2100      	movs	r1, #0
    749c:	f7fd ff8e 	bl	53bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    74a0:	b138      	cbz	r0, 74b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    74a2:	f44f 7185 	mov.w	r1, #266	; 0x10a
    74a6:	2010      	movs	r0, #16
    74a8:	f7fd fd0a 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74ac:	4620      	mov	r0, r4
    74ae:	f7ff fe65 	bl	717c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    74b2:	2001      	movs	r0, #1
    74b4:	bd70      	pop	{r4, r5, r6, pc}
    74b6:	4d09      	ldr	r5, [pc, #36]	; (74dc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x370>)
    74b8:	7868      	ldrb	r0, [r5, #1]
    74ba:	2800      	cmp	r0, #0
    74bc:	d0fa      	beq.n	74b4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x348>
    74be:	2600      	movs	r6, #0
    74c0:	7066      	strb	r6, [r4, #1]
    74c2:	2014      	movs	r0, #20
    74c4:	7020      	strb	r0, [r4, #0]
    74c6:	2220      	movs	r2, #32
    74c8:	4631      	mov	r1, r6
    74ca:	1d20      	adds	r0, r4, #4
    74cc:	f006 f982 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    74d0:	2002      	movs	r0, #2
    74d2:	7120      	strb	r0, [r4, #4]
    74d4:	706e      	strb	r6, [r5, #1]
    74d6:	e7ec      	b.n	74b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    74d8:	200000f4 	.word	0x200000f4
    74dc:	2000027d 	.word	0x2000027d

000074e0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    74e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    74e2:	f06f 021f 	mvn.w	r2, #31
    74e6:	0c01      	lsrs	r1, r0, #16
    74e8:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    74ec:	251f      	movs	r5, #31
    74ee:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    74f2:	3854      	subs	r0, #84	; 0x54
    74f4:	d00d      	beq.n	7512 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    74f6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    74fa:	3855      	subs	r0, #85	; 0x55
    74fc:	d009      	beq.n	7512 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    74fe:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    7502:	38aa      	subs	r0, #170	; 0xaa
    7504:	d005      	beq.n	7512 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    7506:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    750a:	38aa      	subs	r0, #170	; 0xaa
    750c:	d001      	beq.n	7512 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    750e:	2001      	movs	r0, #1
    7510:	e000      	b.n	7514 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    7512:	2000      	movs	r0, #0
    7514:	2200      	movs	r2, #0
    7516:	4613      	mov	r3, r2
    7518:	ea4f 0402 	mov.w	r4, r2
    751c:	ea82 0701 	eor.w	r7, r2, r1
    7520:	43ff      	mvns	r7, r7
    7522:	431f      	orrs	r7, r3
    7524:	1c7f      	adds	r7, r7, #1
    7526:	d00f      	beq.n	7548 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    7528:	f006 0701 	and.w	r7, r6, #1
    752c:	0852      	lsrs	r2, r2, #1
    752e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    7532:	f005 0701 	and.w	r7, r5, #1
    7536:	085b      	lsrs	r3, r3, #1
    7538:	0876      	lsrs	r6, r6, #1
    753a:	086d      	lsrs	r5, r5, #1
    753c:	1c64      	adds	r4, r4, #1
    753e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    7542:	2c16      	cmp	r4, #22
    7544:	d3ea      	bcc.n	751c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    7546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    7548:	2000      	movs	r0, #0
    754a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000754c <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>:
    754c:	4801      	ldr	r0, [pc, #4]	; (7554 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA+0x8>)
    754e:	f008 b846 	b.w	f5de <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    7552:	0000      	.short	0x0000
    7554:	200000fc 	.word	0x200000fc

00007558 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    7558:	b510      	push	{r4, lr}
    755a:	4604      	mov	r4, r0
    755c:	f008 f82e 	bl	f5bc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    7560:	b310      	cbz	r0, 75a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    7562:	43e0      	mvns	r0, r4
    7564:	f008 f82a 	bl	f5bc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    7568:	b1f0      	cbz	r0, 75a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    756a:	16a0      	asrs	r0, r4, #26
    756c:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    7570:	1e41      	subs	r1, r0, #1
    7572:	4208      	tst	r0, r1
    7574:	d018      	beq.n	75a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    7576:	ea84 0064 	eor.w	r0, r4, r4, asr #1
    757a:	f007 fae5 	bl	eb48 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>
    757e:	2818      	cmp	r0, #24
    7580:	d812      	bhi.n	75a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    7582:	b2a0      	uxth	r0, r4
    7584:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    7588:	d107      	bne.n	759a <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x42>
    758a:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    758e:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    7592:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    7596:	4281      	cmp	r1, r0
    7598:	d006      	beq.n	75a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    759a:	4804      	ldr	r0, [pc, #16]	; (75ac <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    759c:	4044      	eors	r4, r0
    759e:	1e60      	subs	r0, r4, #1
    75a0:	4204      	tst	r4, r0
    75a2:	d001      	beq.n	75a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    75a4:	2001      	movs	r0, #1
    75a6:	bd10      	pop	{r4, pc}
    75a8:	2000      	movs	r0, #0
    75aa:	bd10      	pop	{r4, pc}
    75ac:	8e89bed6 	.word	0x8e89bed6
    75b0:	4801      	ldr	r0, [pc, #4]	; (75b8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x60>)
    75b2:	f000 b803 	b.w	75bc <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    75b6:	0000      	.short	0x0000
    75b8:	200000fc 	.word	0x200000fc

000075bc <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    75bc:	b510      	push	{r4, lr}
    75be:	e9d0 2100 	ldrd	r2, r1, [r0]
    75c2:	4b09      	ldr	r3, [pc, #36]	; (75e8 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    75c4:	4c09      	ldr	r4, [pc, #36]	; (75ec <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    75c6:	4353      	muls	r3, r2
    75c8:	4354      	muls	r4, r2
    75ca:	4051      	eors	r1, r2
    75cc:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    75d0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    75d4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    75d8:	e9c0 2100 	strd	r2, r1, [r0]
    75dc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    75e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    75e4:	4618      	mov	r0, r3
    75e6:	bd10      	pop	{r4, pc}
    75e8:	c6ef3760 	.word	0xc6ef3760
    75ec:	9e3779bb 	.word	0x9e3779bb

000075f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    75f0:	4801      	ldr	r0, [pc, #4]	; (75f8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    75f2:	6840      	ldr	r0, [r0, #4]
    75f4:	3080      	adds	r0, #128	; 0x80
    75f6:	4770      	bx	lr
    75f8:	20000104 	.word	0x20000104

000075fc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    75fc:	b510      	push	{r4, lr}
    75fe:	4c1f      	ldr	r4, [pc, #124]	; (767c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    7600:	6860      	ldr	r0, [r4, #4]
    7602:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    7606:	f008 f80b 	bl	f620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    760a:	6861      	ldr	r1, [r4, #4]
    760c:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    7610:	3132      	adds	r1, #50	; 0x32
    7612:	f7fe faa7 	bl	5b64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    7616:	6860      	ldr	r0, [r4, #4]
    7618:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    761c:	f008 f807 	bl	f62e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    7620:	6861      	ldr	r1, [r4, #4]
    7622:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    7626:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    762a:	3132      	adds	r1, #50	; 0x32
    762c:	f007 ffe4 	bl	f5f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    7630:	b930      	cbnz	r0, 7640 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    7632:	6861      	ldr	r1, [r4, #4]
    7634:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    7638:	3132      	adds	r1, #50	; 0x32
    763a:	f007 ffe6 	bl	f60a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    763e:	b108      	cbz	r0, 7644 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    7640:	2101      	movs	r1, #1
    7642:	e000      	b.n	7646 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    7644:	2100      	movs	r1, #0
    7646:	6860      	ldr	r0, [r4, #4]
    7648:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    764c:	b919      	cbnz	r1, 7656 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    764e:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    7652:	2900      	cmp	r1, #0
    7654:	d010      	beq.n	7678 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    7656:	2100      	movs	r1, #0
    7658:	6781      	str	r1, [r0, #120]	; 0x78
    765a:	f005 fecc 	bl	d3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    765e:	6861      	ldr	r1, [r4, #4]
    7660:	6448      	str	r0, [r1, #68]	; 0x44
    7662:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    7666:	b110      	cbz	r0, 766e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    7668:	2000      	movs	r0, #0
    766a:	f7ff f863 	bl	6734 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    766e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7672:	2000      	movs	r0, #0
    7674:	f000 bdfa 	b.w	826c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>
    7678:	bd10      	pop	{r4, pc}
    767a:	0000      	.short	0x0000
    767c:	20000104 	.word	0x20000104

00007680 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    7680:	b510      	push	{r4, lr}
    7682:	4c09      	ldr	r4, [pc, #36]	; (76a8 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    7684:	2803      	cmp	r0, #3
    7686:	6864      	ldr	r4, [r4, #4]
    7688:	d109      	bne.n	769e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    768a:	63e1      	str	r1, [r4, #60]	; 0x3c
    768c:	b13b      	cbz	r3, 769e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    768e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    7692:	6819      	ldr	r1, [r3, #0]
    7694:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    7698:	8899      	ldrh	r1, [r3, #4]
    769a:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    769e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    76a2:	2000      	movs	r0, #0
    76a4:	bd10      	pop	{r4, pc}
    76a6:	0000      	.short	0x0000
    76a8:	20000104 	.word	0x20000104

000076ac <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    76ac:	4807      	ldr	r0, [pc, #28]	; (76cc <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    76ae:	b508      	push	{r3, lr}
    76b0:	6840      	ldr	r0, [r0, #4]
    76b2:	7801      	ldrb	r1, [r0, #0]
    76b4:	f88d 1000 	strb.w	r1, [sp]
    76b8:	9900      	ldr	r1, [sp, #0]
    76ba:	9100      	str	r1, [sp, #0]
    76bc:	f89d 1000 	ldrb.w	r1, [sp]
    76c0:	b109      	cbz	r1, 76c6 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    76c2:	8880      	ldrh	r0, [r0, #4]
    76c4:	bd08      	pop	{r3, pc}
    76c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    76ca:	bd08      	pop	{r3, pc}
    76cc:	20000104 	.word	0x20000104

000076d0 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    76d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76d2:	4604      	mov	r4, r0
    76d4:	f007 fff3 	bl	f6be <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    76d8:	bb48      	cbnz	r0, 772e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    76da:	4e17      	ldr	r6, [pc, #92]	; (7738 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    76dc:	6870      	ldr	r0, [r6, #4]
    76de:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    76e2:	f88d 1000 	strb.w	r1, [sp]
    76e6:	9900      	ldr	r1, [sp, #0]
    76e8:	9100      	str	r1, [sp, #0]
    76ea:	f89d 1000 	ldrb.w	r1, [sp]
    76ee:	2500      	movs	r5, #0
    76f0:	b139      	cbz	r1, 7702 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    76f2:	7065      	strb	r5, [r4, #1]
    76f4:	2107      	movs	r1, #7
    76f6:	7021      	strb	r1, [r4, #0]
    76f8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    76fa:	6061      	str	r1, [r4, #4]
    76fc:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    7700:	e015      	b.n	772e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    7702:	4620      	mov	r0, r4
    7704:	f000 f9d0 	bl	7aa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    7708:	b988      	cbnz	r0, 772e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    770a:	6870      	ldr	r0, [r6, #4]
    770c:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    7710:	f88d 1000 	strb.w	r1, [sp]
    7714:	9900      	ldr	r1, [sp, #0]
    7716:	9100      	str	r1, [sp, #0]
    7718:	f89d 1000 	ldrb.w	r1, [sp]
    771c:	b149      	cbz	r1, 7732 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    771e:	7065      	strb	r5, [r4, #1]
    7720:	2118      	movs	r1, #24
    7722:	7021      	strb	r1, [r4, #0]
    7724:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    7728:	6061      	str	r1, [r4, #4]
    772a:	300a      	adds	r0, #10
    772c:	7785      	strb	r5, [r0, #30]
    772e:	2001      	movs	r0, #1
    7730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7732:	2000      	movs	r0, #0
    7734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7736:	0000      	.short	0x0000
    7738:	20000104 	.word	0x20000104

0000773c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    773c:	4902      	ldr	r1, [pc, #8]	; (7748 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    773e:	6849      	ldr	r1, [r1, #4]
    7740:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    7744:	2000      	movs	r0, #0
    7746:	4770      	bx	lr
    7748:	20000104 	.word	0x20000104

0000774c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    774c:	4809      	ldr	r0, [pc, #36]	; (7774 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    774e:	6841      	ldr	r1, [r0, #4]
    7750:	6d48      	ldr	r0, [r1, #84]	; 0x54
    7752:	b168      	cbz	r0, 7770 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    7754:	f101 0059 	add.w	r0, r1, #89	; 0x59
    7758:	2201      	movs	r2, #1
    775a:	7002      	strb	r2, [r0, #0]
    775c:	2300      	movs	r3, #0
    775e:	654b      	str	r3, [r1, #84]	; 0x54
    7760:	7003      	strb	r3, [r0, #0]
    7762:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    7766:	4082      	lsls	r2, r0
    7768:	4803      	ldr	r0, [pc, #12]	; (7778 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    776a:	6002      	str	r2, [r0, #0]
    776c:	2000      	movs	r0, #0
    776e:	4770      	bx	lr
    7770:	200c      	movs	r0, #12
    7772:	4770      	bx	lr
    7774:	20000104 	.word	0x20000104
    7778:	4001f508 	.word	0x4001f508

0000777c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    777c:	4909      	ldr	r1, [pc, #36]	; (77a4 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    777e:	b510      	push	{r4, lr}
    7780:	6088      	str	r0, [r1, #8]
    7782:	68c8      	ldr	r0, [r1, #12]
    7784:	b150      	cbz	r0, 779c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    7786:	f000 ff73 	bl	8670 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x670>
    778a:	f000 f885 	bl	7898 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    778e:	2800      	cmp	r0, #0
    7790:	d007      	beq.n	77a2 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    7792:	f640 01f9 	movw	r1, #2297	; 0x8f9
    7796:	2032      	movs	r0, #50	; 0x32
    7798:	f7fd fb92 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    779c:	f640 01f5 	movw	r1, #2293	; 0x8f5
    77a0:	e7f9      	b.n	7796 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    77a2:	bd10      	pop	{r4, pc}
    77a4:	20000104 	.word	0x20000104

000077a8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    77a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77ac:	4c0f      	ldr	r4, [pc, #60]	; (77ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    77ae:	4605      	mov	r5, r0
    77b0:	4616      	mov	r6, r2
    77b2:	6860      	ldr	r0, [r4, #4]
    77b4:	460f      	mov	r7, r1
    77b6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    77ba:	f007 ff38 	bl	f62e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    77be:	b158      	cbz	r0, 77d8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    77c0:	b955      	cbnz	r5, 77d8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    77c2:	4638      	mov	r0, r7
    77c4:	f007 ff2c 	bl	f620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    77c8:	4631      	mov	r1, r6
    77ca:	f007 f933 	bl	ea34 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    77ce:	2808      	cmp	r0, #8
    77d0:	d002      	beq.n	77d8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    77d2:	2001      	movs	r0, #1
    77d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    77d8:	6860      	ldr	r0, [r4, #4]
    77da:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    77de:	f007 ff1f 	bl	f620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    77e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    77e6:	f7fe b9e9 	b.w	5bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    77ea:	0000      	.short	0x0000
    77ec:	20000104 	.word	0x20000104

000077f0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    77f0:	b570      	push	{r4, r5, r6, lr}
    77f2:	4c13      	ldr	r4, [pc, #76]	; (7840 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    77f4:	4615      	mov	r5, r2
    77f6:	460e      	mov	r6, r1
    77f8:	2800      	cmp	r0, #0
    77fa:	d016      	beq.n	782a <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    77fc:	f04f 0200 	mov.w	r2, #0
    7800:	6861      	ldr	r1, [r4, #4]
    7802:	f801 2f39 	strb.w	r2, [r1, #57]!
    7806:	7248      	strb	r0, [r1, #9]
    7808:	f04f 0008 	mov.w	r0, #8
    780c:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    7810:	d114      	bne.n	783c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    7812:	4630      	mov	r0, r6
    7814:	f007 ff04 	bl	f620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    7818:	4629      	mov	r1, r5
    781a:	f007 f90b 	bl	ea34 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    781e:	6861      	ldr	r1, [r4, #4]
    7820:	2808      	cmp	r0, #8
    7822:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    7826:	d003      	beq.n	7830 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    7828:	e008      	b.n	783c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    782a:	f04f 0201 	mov.w	r2, #1
    782e:	e7e7      	b.n	7800 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    7830:	4630      	mov	r0, r6
    7832:	f007 fefc 	bl	f62e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    7836:	b108      	cbz	r0, 783c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    7838:	2012      	movs	r0, #18
    783a:	bd70      	pop	{r4, r5, r6, pc}
    783c:	2000      	movs	r0, #0
    783e:	bd70      	pop	{r4, r5, r6, pc}
    7840:	20000104 	.word	0x20000104

00007844 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    7844:	4902      	ldr	r1, [pc, #8]	; (7850 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    7846:	4801      	ldr	r0, [pc, #4]	; (784c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    7848:	60c8      	str	r0, [r1, #12]
    784a:	4770      	bx	lr
    784c:	000088b8 	.word	0x000088b8
    7850:	20000104 	.word	0x20000104

00007854 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    7854:	4902      	ldr	r1, [pc, #8]	; (7860 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    7856:	6849      	ldr	r1, [r1, #4]
    7858:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    785c:	4770      	bx	lr
    785e:	0000      	.short	0x0000
    7860:	20000104 	.word	0x20000104

00007864 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    7864:	b570      	push	{r4, r5, r6, lr}
    7866:	4605      	mov	r5, r0
    7868:	f7fd ff56 	bl	5718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    786c:	4604      	mov	r4, r0
    786e:	f7fd ff59 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7872:	4621      	mov	r1, r4
    7874:	f007 ff21 	bl	f6ba <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7878:	0001      	movs	r1, r0
    787a:	d006      	beq.n	788a <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    787c:	4805      	ldr	r0, [pc, #20]	; (7894 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    787e:	68c0      	ldr	r0, [r0, #12]
    7880:	6802      	ldr	r2, [r0, #0]
    7882:	4628      	mov	r0, r5
    7884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7888:	4710      	bx	r2
    788a:	f640 11f2 	movw	r1, #2546	; 0x9f2
    788e:	2032      	movs	r0, #50	; 0x32
    7890:	f7fd fb16 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7894:	20000104 	.word	0x20000104

00007898 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    7898:	b570      	push	{r4, r5, r6, lr}
    789a:	4d19      	ldr	r5, [pc, #100]	; (7900 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    789c:	6868      	ldr	r0, [r5, #4]
    789e:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    78a2:	2901      	cmp	r1, #1
    78a4:	d004      	beq.n	78b0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    78a6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    78aa:	b108      	cbz	r0, 78b0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    78ac:	200c      	movs	r0, #12
    78ae:	bd70      	pop	{r4, r5, r6, pc}
    78b0:	f7fd ff5c 	bl	576c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    78b4:	f007 ff67 	bl	f786 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    78b8:	6868      	ldr	r0, [r5, #4]
    78ba:	2400      	movs	r4, #0
    78bc:	7004      	strb	r4, [r0, #0]
    78be:	f100 0122 	add.w	r1, r0, #34	; 0x22
    78c2:	700c      	strb	r4, [r1, #0]
    78c4:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    78c8:	f000 f8b4 	bl	7a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    78cc:	6868      	ldr	r0, [r5, #4]
    78ce:	2201      	movs	r2, #1
    78d0:	2107      	movs	r1, #7
    78d2:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    78d6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    78da:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    78de:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    78e2:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    78e6:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
    78ea:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    78ee:	f100 0159 	add.w	r1, r0, #89	; 0x59
    78f2:	700a      	strb	r2, [r1, #0]
    78f4:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    78f8:	6544      	str	r4, [r0, #84]	; 0x54
    78fa:	700c      	strb	r4, [r1, #0]
    78fc:	2000      	movs	r0, #0
    78fe:	bd70      	pop	{r4, r5, r6, pc}
    7900:	20000104 	.word	0x20000104

00007904 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    7904:	4805      	ldr	r0, [pc, #20]	; (791c <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    7906:	b510      	push	{r4, lr}
    7908:	6840      	ldr	r0, [r0, #4]
    790a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    790e:	f007 fe87 	bl	f620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    7912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7916:	f7fe b951 	b.w	5bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    791a:	0000      	.short	0x0000
    791c:	20000104 	.word	0x20000104

00007920 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    7920:	b140      	cbz	r0, 7934 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    7922:	2802      	cmp	r0, #2
    7924:	d006      	beq.n	7934 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    7926:	2200      	movs	r2, #0
    7928:	4903      	ldr	r1, [pc, #12]	; (7938 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    792a:	6849      	ldr	r1, [r1, #4]
    792c:	f801 2f39 	strb.w	r2, [r1, #57]!
    7930:	7208      	strb	r0, [r1, #8]
    7932:	4770      	bx	lr
    7934:	2201      	movs	r2, #1
    7936:	e7f7      	b.n	7928 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    7938:	20000104 	.word	0x20000104

0000793c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    793c:	4902      	ldr	r1, [pc, #8]	; (7948 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    793e:	6849      	ldr	r1, [r1, #4]
    7940:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    7944:	4770      	bx	lr
    7946:	0000      	.short	0x0000
    7948:	20000104 	.word	0x20000104

0000794c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    794c:	b510      	push	{r4, lr}
    794e:	4604      	mov	r4, r0
    7950:	7800      	ldrb	r0, [r0, #0]
    7952:	07c0      	lsls	r0, r0, #31
    7954:	d007      	beq.n	7966 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    7956:	2300      	movs	r3, #0
    7958:	7860      	ldrb	r0, [r4, #1]
    795a:	461a      	mov	r2, r3
    795c:	4619      	mov	r1, r3
    795e:	f7ff fe8f 	bl	7680 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    7962:	2800      	cmp	r0, #0
    7964:	d10c      	bne.n	7980 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    7966:	4b07      	ldr	r3, [pc, #28]	; (7984 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    7968:	78a0      	ldrb	r0, [r4, #2]
    796a:	6859      	ldr	r1, [r3, #4]
    796c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    7970:	78e0      	ldrb	r0, [r4, #3]
    7972:	f7ff ffd5 	bl	7920 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    7976:	6859      	ldr	r1, [r3, #4]
    7978:	7920      	ldrb	r0, [r4, #4]
    797a:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    797e:	2000      	movs	r0, #0
    7980:	bd10      	pop	{r4, pc}
    7982:	0000      	.short	0x0000
    7984:	20000104 	.word	0x20000104

00007988 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    7988:	4801      	ldr	r0, [pc, #4]	; (7990 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    798a:	68c0      	ldr	r0, [r0, #12]
    798c:	6840      	ldr	r0, [r0, #4]
    798e:	4700      	bx	r0
    7990:	20000104 	.word	0x20000104

00007994 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    7994:	b510      	push	{r4, lr}
    7996:	2000      	movs	r0, #0
    7998:	f000 fc8e 	bl	82b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b8>
    799c:	f000 f84a 	bl	7a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    79a0:	f000 fe66 	bl	8670 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x670>
    79a4:	4803      	ldr	r0, [pc, #12]	; (79b4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    79a6:	6840      	ldr	r0, [r0, #4]
    79a8:	2100      	movs	r1, #0
    79aa:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    79ae:	4608      	mov	r0, r1
    79b0:	bd10      	pop	{r4, pc}
    79b2:	0000      	.short	0x0000
    79b4:	20000104 	.word	0x20000104

000079b8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    79b8:	b510      	push	{r4, lr}
    79ba:	f000 f941 	bl	7c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    79be:	4909      	ldr	r1, [pc, #36]	; (79e4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    79c0:	2201      	movs	r2, #1
    79c2:	b130      	cbz	r0, 79d2 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    79c4:	6848      	ldr	r0, [r1, #4]
    79c6:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    79ca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    79cc:	881b      	ldrh	r3, [r3, #0]
    79ce:	8583      	strh	r3, [r0, #44]	; 0x2c
    79d0:	e004      	b.n	79dc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    79d2:	684b      	ldr	r3, [r1, #4]
    79d4:	2000      	movs	r0, #0
    79d6:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    79da:	8598      	strh	r0, [r3, #44]	; 0x2c
    79dc:	6848      	ldr	r0, [r1, #4]
    79de:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    79e2:	bd10      	pop	{r4, pc}
    79e4:	20000104 	.word	0x20000104

000079e8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    79e8:	4802      	ldr	r0, [pc, #8]	; (79f4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    79ea:	6840      	ldr	r0, [r0, #4]
    79ec:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    79f0:	4770      	bx	lr
    79f2:	0000      	.short	0x0000
    79f4:	20000104 	.word	0x20000104

000079f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    79f8:	b510      	push	{r4, lr}
    79fa:	f000 f921 	bl	7c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    79fe:	490c      	ldr	r1, [pc, #48]	; (7a30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    7a00:	b128      	cbz	r0, 7a0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    7a02:	6848      	ldr	r0, [r1, #4]
    7a04:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    7a08:	2801      	cmp	r0, #1
    7a0a:	d00e      	beq.n	7a2a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    7a0c:	e00c      	b.n	7a28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    7a0e:	6849      	ldr	r1, [r1, #4]
    7a10:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    7a14:	2801      	cmp	r0, #1
    7a16:	d001      	beq.n	7a1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    7a18:	2802      	cmp	r0, #2
    7a1a:	d105      	bne.n	7a28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    7a1c:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    7a20:	2801      	cmp	r0, #1
    7a22:	d003      	beq.n	7a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    7a24:	2803      	cmp	r0, #3
    7a26:	d001      	beq.n	7a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    7a28:	2000      	movs	r0, #0
    7a2a:	bd10      	pop	{r4, pc}
    7a2c:	2001      	movs	r0, #1
    7a2e:	bd10      	pop	{r4, pc}
    7a30:	20000104 	.word	0x20000104
    7a34:	b510      	push	{r4, lr}
    7a36:	4c07      	ldr	r4, [pc, #28]	; (7a54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    7a38:	6860      	ldr	r0, [r4, #4]
    7a3a:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    7a3e:	2800      	cmp	r0, #0
    7a40:	d007      	beq.n	7a52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    7a42:	f004 fdd3 	bl	c5ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7a46:	f004 fbb5 	bl	c1b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7a4a:	6861      	ldr	r1, [r4, #4]
    7a4c:	2000      	movs	r0, #0
    7a4e:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    7a52:	bd10      	pop	{r4, pc}
    7a54:	20000104 	.word	0x20000104
    7a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a5c:	4d10      	ldr	r5, [pc, #64]	; (7aa0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    7a5e:	4606      	mov	r6, r0
    7a60:	460f      	mov	r7, r1
    7a62:	6868      	ldr	r0, [r5, #4]
    7a64:	490f      	ldr	r1, [pc, #60]	; (7aa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    7a66:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    7a6a:	5c0c      	ldrb	r4, [r1, r0]
    7a6c:	4620      	mov	r0, r4
    7a6e:	f005 f931 	bl	ccd4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    7a72:	6868      	ldr	r0, [r5, #4]
    7a74:	2101      	movs	r1, #1
    7a76:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    7a7a:	2025      	movs	r0, #37	; 0x25
    7a7c:	f009 f86b 	bl	10b56 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    7a80:	4638      	mov	r0, r7
    7a82:	f005 f831 	bl	cae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7a86:	f04f 0101 	mov.w	r1, #1
    7a8a:	4608      	mov	r0, r1
    7a8c:	b126      	cbz	r6, 7a98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    7a8e:	f004 fe63 	bl	c758 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    7a92:	b918      	cbnz	r0, 7a9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    7a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a98:	f004 fe12 	bl	c6c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    7a9c:	2001      	movs	r0, #1
    7a9e:	e7f9      	b.n	7a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    7aa0:	20000104 	.word	0x20000104
    7aa4:	00010ca6 	.word	0x00010ca6
    7aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7aaa:	4e20      	ldr	r6, [pc, #128]	; (7b2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    7aac:	4604      	mov	r4, r0
    7aae:	6870      	ldr	r0, [r6, #4]
    7ab0:	7801      	ldrb	r1, [r0, #0]
    7ab2:	f88d 1000 	strb.w	r1, [sp]
    7ab6:	9900      	ldr	r1, [sp, #0]
    7ab8:	9100      	str	r1, [sp, #0]
    7aba:	f89d 1000 	ldrb.w	r1, [sp]
    7abe:	b389      	cbz	r1, 7b24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    7ac0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7ac2:	6882      	ldr	r2, [r0, #8]
    7ac4:	f841 2f03 	str.w	r2, [r1, #3]!
    7ac8:	8982      	ldrh	r2, [r0, #12]
    7aca:	808a      	strh	r2, [r1, #4]
    7acc:	79c0      	ldrb	r0, [r0, #7]
    7ace:	f007 fda7 	bl	f620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    7ad2:	6871      	ldr	r1, [r6, #4]
    7ad4:	2500      	movs	r5, #0
    7ad6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    7ad8:	1c89      	adds	r1, r1, #2
    7ada:	7090      	strb	r0, [r2, #2]
    7adc:	7065      	strb	r5, [r4, #1]
    7ade:	2014      	movs	r0, #20
    7ae0:	7020      	strb	r0, [r4, #0]
    7ae2:	2220      	movs	r2, #32
    7ae4:	1d20      	adds	r0, r4, #4
    7ae6:	f005 fdfb 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    7aea:	4a11      	ldr	r2, [pc, #68]	; (7b30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    7aec:	7225      	strb	r5, [r4, #8]
    7aee:	2301      	movs	r3, #1
    7af0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7af2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    7af6:	6871      	ldr	r1, [r6, #4]
    7af8:	700d      	strb	r5, [r1, #0]
    7afa:	f101 0028 	add.w	r0, r1, #40	; 0x28
    7afe:	7005      	strb	r5, [r0, #0]
    7b00:	88e0      	ldrh	r0, [r4, #6]
    7b02:	8490      	strh	r0, [r2, #36]	; 0x24
    7b04:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7b06:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    7b0a:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    7b0e:	4610      	mov	r0, r2
    7b10:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    7b14:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    7b16:	8800      	ldrh	r0, [r0, #0]
    7b18:	f7fd fdd0 	bl	56bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7b1c:	f006 fd6c 	bl	e5f8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    7b20:	2001      	movs	r0, #1
    7b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b24:	e7ff      	b.n	7b26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    7b26:	2000      	movs	r0, #0
    7b28:	e7fb      	b.n	7b22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    7b2a:	0000      	.short	0x0000
    7b2c:	20000104 	.word	0x20000104
    7b30:	200012a4 	.word	0x200012a4
    7b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7b36:	2600      	movs	r6, #0
    7b38:	460f      	mov	r7, r1
    7b3a:	4605      	mov	r5, r0
    7b3c:	f88d 6000 	strb.w	r6, [sp]
    7b40:	466b      	mov	r3, sp
    7b42:	f000 f89d 	bl	7c80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    7b46:	0001      	movs	r1, r0
    7b48:	4810      	ldr	r0, [pc, #64]	; (7b8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>)
    7b4a:	d003      	beq.n	7b54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15c>
    7b4c:	6840      	ldr	r0, [r0, #4]
    7b4e:	f880 606d 	strb.w	r6, [r0, #109]	; 0x6d
    7b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b54:	6840      	ldr	r0, [r0, #4]
    7b56:	f89d 1000 	ldrb.w	r1, [sp]
    7b5a:	2f07      	cmp	r7, #7
    7b5c:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
    7b60:	d301      	bcc.n	7b66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
    7b62:	4634      	mov	r4, r6
    7b64:	e002      	b.n	7b6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    7b66:	0022      	movs	r2, r4
    7b68:	d100      	bne.n	7b6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    7b6a:	460c      	mov	r4, r1
    7b6c:	f880 406d 	strb.w	r4, [r0, #109]	; 0x6d
    7b70:	6869      	ldr	r1, [r5, #4]
    7b72:	2900      	cmp	r1, #0
    7b74:	d0ed      	beq.n	7b52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15a>
    7b76:	7c69      	ldrb	r1, [r5, #17]
    7b78:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    7b7c:	6869      	ldr	r1, [r5, #4]
    7b7e:	680a      	ldr	r2, [r1, #0]
    7b80:	f840 2f6e 	str.w	r2, [r0, #110]!
    7b84:	8889      	ldrh	r1, [r1, #4]
    7b86:	8081      	strh	r1, [r0, #4]
    7b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7b8a:	0000      	.short	0x0000
    7b8c:	20000104 	.word	0x20000104
    7b90:	b510      	push	{r4, lr}
    7b92:	4915      	ldr	r1, [pc, #84]	; (7be8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f0>)
    7b94:	6842      	ldr	r2, [r0, #4]
    7b96:	6849      	ldr	r1, [r1, #4]
    7b98:	7813      	ldrb	r3, [r2, #0]
    7b9a:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    7b9e:	42a3      	cmp	r3, r4
    7ba0:	d11f      	bne.n	7be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7ba2:	7853      	ldrb	r3, [r2, #1]
    7ba4:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    7ba8:	42a3      	cmp	r3, r4
    7baa:	d11a      	bne.n	7be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7bac:	7893      	ldrb	r3, [r2, #2]
    7bae:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    7bb2:	42a3      	cmp	r3, r4
    7bb4:	d115      	bne.n	7be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7bb6:	78d3      	ldrb	r3, [r2, #3]
    7bb8:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    7bbc:	42a3      	cmp	r3, r4
    7bbe:	d110      	bne.n	7be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7bc0:	7913      	ldrb	r3, [r2, #4]
    7bc2:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    7bc6:	42a3      	cmp	r3, r4
    7bc8:	d10b      	bne.n	7be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7bca:	7952      	ldrb	r2, [r2, #5]
    7bcc:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    7bd0:	429a      	cmp	r2, r3
    7bd2:	d106      	bne.n	7be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7bd4:	7c40      	ldrb	r0, [r0, #17]
    7bd6:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    7bda:	4288      	cmp	r0, r1
    7bdc:	d101      	bne.n	7be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    7bde:	2001      	movs	r0, #1
    7be0:	bd10      	pop	{r4, pc}
    7be2:	2000      	movs	r0, #0
    7be4:	bd10      	pop	{r4, pc}
    7be6:	0000      	.short	0x0000
    7be8:	20000104 	.word	0x20000104
    7bec:	b530      	push	{r4, r5, lr}
    7bee:	7801      	ldrb	r1, [r0, #0]
    7bf0:	b08b      	sub	sp, #44	; 0x2c
    7bf2:	f001 040f 	and.w	r4, r1, #15
    7bf6:	4622      	mov	r2, r4
    7bf8:	a901      	add	r1, sp, #4
    7bfa:	f000 fee9 	bl	89d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    7bfe:	a801      	add	r0, sp, #4
    7c00:	f7ff ffc6 	bl	7b90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198>
    7c04:	4605      	mov	r5, r0
    7c06:	f004 fd0b 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7c0a:	f000 fb6f 	bl	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    7c0e:	2c04      	cmp	r4, #4
    7c10:	d111      	bne.n	7c36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    7c12:	b185      	cbz	r5, 7c36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    7c14:	a80a      	add	r0, sp, #40	; 0x28
    7c16:	f000 fb75 	bl	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    7c1a:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    7c1e:	9000      	str	r0, [sp, #0]
    7c20:	4806      	ldr	r0, [pc, #24]	; (7c3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>)
    7c22:	6840      	ldr	r0, [r0, #4]
    7c24:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    7c28:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    7c2c:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    7c30:	a801      	add	r0, sp, #4
    7c32:	f007 fdaa 	bl	f78a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    7c36:	b00b      	add	sp, #44	; 0x2c
    7c38:	2005      	movs	r0, #5
    7c3a:	bd30      	pop	{r4, r5, pc}
    7c3c:	20000104 	.word	0x20000104
    7c40:	4804      	ldr	r0, [pc, #16]	; (7c54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25c>)
    7c42:	6840      	ldr	r0, [r0, #4]
    7c44:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7c48:	2803      	cmp	r0, #3
    7c4a:	d001      	beq.n	7c50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    7c4c:	2000      	movs	r0, #0
    7c4e:	4770      	bx	lr
    7c50:	2001      	movs	r0, #1
    7c52:	4770      	bx	lr
    7c54:	20000104 	.word	0x20000104
    7c58:	4908      	ldr	r1, [pc, #32]	; (7c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    7c5a:	b510      	push	{r4, lr}
    7c5c:	6849      	ldr	r1, [r1, #4]
    7c5e:	7c83      	ldrb	r3, [r0, #18]
    7c60:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    7c64:	429a      	cmp	r2, r3
    7c66:	d105      	bne.n	7c74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>
    7c68:	6880      	ldr	r0, [r0, #8]
    7c6a:	2206      	movs	r2, #6
    7c6c:	3132      	adds	r1, #50	; 0x32
    7c6e:	f005 fd25 	bl	d6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    7c72:	b108      	cbz	r0, 7c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    7c74:	2000      	movs	r0, #0
    7c76:	bd10      	pop	{r4, pc}
    7c78:	2001      	movs	r0, #1
    7c7a:	bd10      	pop	{r4, pc}
    7c7c:	20000104 	.word	0x20000104
    7c80:	b570      	push	{r4, r5, r6, lr}
    7c82:	6841      	ldr	r1, [r0, #4]
    7c84:	461e      	mov	r6, r3
    7c86:	4604      	mov	r4, r0
    7c88:	b1c1      	cbz	r1, 7cbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    7c8a:	7c60      	ldrb	r0, [r4, #17]
    7c8c:	f007 fcbd 	bl	f60a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7c90:	4d10      	ldr	r5, [pc, #64]	; (7cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    7c92:	6869      	ldr	r1, [r5, #4]
    7c94:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    7c98:	b141      	cbz	r1, 7cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    7c9a:	b138      	cbz	r0, 7cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    7c9c:	f006 fec0 	bl	ea20 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    7ca0:	6869      	ldr	r1, [r5, #4]
    7ca2:	f801 0f64 	strb.w	r0, [r1, #100]!
    7ca6:	7048      	strb	r0, [r1, #1]
    7ca8:	2001      	movs	r0, #1
    7caa:	71c8      	strb	r0, [r1, #7]
    7cac:	686b      	ldr	r3, [r5, #4]
    7cae:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    7cb2:	28ff      	cmp	r0, #255	; 0xff
    7cb4:	d004      	beq.n	7cc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    7cb6:	f7fe fdeb 	bl	6890 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    7cba:	7030      	strb	r0, [r6, #0]
    7cbc:	2000      	movs	r0, #0
    7cbe:	bd70      	pop	{r4, r5, r6, pc}
    7cc0:	7c60      	ldrb	r0, [r4, #17]
    7cc2:	4632      	mov	r2, r6
    7cc4:	3364      	adds	r3, #100	; 0x64
    7cc6:	6861      	ldr	r1, [r4, #4]
    7cc8:	f7fe fe5e 	bl	6988 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    7ccc:	f080 0001 	eor.w	r0, r0, #1
    7cd0:	bd70      	pop	{r4, r5, r6, pc}
    7cd2:	0000      	.short	0x0000
    7cd4:	20000104 	.word	0x20000104
    7cd8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7cda:	4c3d      	ldr	r4, [pc, #244]	; (7dd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d8>)
    7cdc:	466f      	mov	r7, sp
    7cde:	6860      	ldr	r0, [r4, #4]
    7ce0:	7801      	ldrb	r1, [r0, #0]
    7ce2:	f88d 1008 	strb.w	r1, [sp, #8]
    7ce6:	9902      	ldr	r1, [sp, #8]
    7ce8:	9102      	str	r1, [sp, #8]
    7cea:	f89d 1008 	ldrb.w	r1, [sp, #8]
    7cee:	b111      	cbz	r1, 7cf6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2fe>
    7cf0:	f241 41b1 	movw	r1, #5297	; 0x14b1
    7cf4:	e04f      	b.n	7d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39e>
    7cf6:	2500      	movs	r5, #0
    7cf8:	7085      	strb	r5, [r0, #2]
    7cfa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7cfc:	880a      	ldrh	r2, [r1, #0]
    7cfe:	8082      	strh	r2, [r0, #4]
    7d00:	68c8      	ldr	r0, [r1, #12]
    7d02:	f006 ff08 	bl	eb16 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7d06:	6861      	ldr	r1, [r4, #4]
    7d08:	8348      	strh	r0, [r1, #26]
    7d0a:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    7d0c:	8a82      	ldrh	r2, [r0, #20]
    7d0e:	838a      	strh	r2, [r1, #28]
    7d10:	8ac0      	ldrh	r0, [r0, #22]
    7d12:	83c8      	strh	r0, [r1, #30]
    7d14:	f881 5020 	strb.w	r5, [r1, #32]
    7d18:	4669      	mov	r1, sp
    7d1a:	68a0      	ldr	r0, [r4, #8]
    7d1c:	f007 fa03 	bl	f126 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    7d20:	68a0      	ldr	r0, [r4, #8]
    7d22:	7800      	ldrb	r0, [r0, #0]
    7d24:	f3c0 1680 	ubfx	r6, r0, #6, #1
    7d28:	6860      	ldr	r0, [r4, #4]
    7d2a:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7d2e:	b120      	cbz	r0, 7d3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x342>
    7d30:	4639      	mov	r1, r7
    7d32:	4630      	mov	r0, r6
    7d34:	f007 fc69 	bl	f60a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7d38:	b940      	cbnz	r0, 7d4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x354>
    7d3a:	6860      	ldr	r0, [r4, #4]
    7d3c:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    7d40:	b160      	cbz	r0, 7d5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    7d42:	4639      	mov	r1, r7
    7d44:	4630      	mov	r0, r6
    7d46:	f007 fc57 	bl	f5f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    7d4a:	b138      	cbz	r0, 7d5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    7d4c:	6860      	ldr	r0, [r4, #4]
    7d4e:	9900      	ldr	r1, [sp, #0]
    7d50:	f8c0 100e 	str.w	r1, [r0, #14]
    7d54:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    7d58:	8241      	strh	r1, [r0, #18]
    7d5a:	e003      	b.n	7d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    7d5c:	6860      	ldr	r0, [r4, #4]
    7d5e:	f8c0 500e 	str.w	r5, [r0, #14]
    7d62:	8245      	strh	r5, [r0, #18]
    7d64:	6861      	ldr	r1, [r4, #4]
    7d66:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    7d6a:	28ff      	cmp	r0, #255	; 0xff
    7d6c:	d016      	beq.n	7d9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    7d6e:	f101 0208 	add.w	r2, r1, #8
    7d72:	1dc9      	adds	r1, r1, #7
    7d74:	f7fe fd72 	bl	685c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    7d78:	b158      	cbz	r0, 7d92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    7d7a:	6860      	ldr	r0, [r4, #4]
    7d7c:	79c1      	ldrb	r1, [r0, #7]
    7d7e:	f041 0102 	orr.w	r1, r1, #2
    7d82:	71c1      	strb	r1, [r0, #7]
    7d84:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    7d88:	6141      	str	r1, [r0, #20]
    7d8a:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    7d8e:	8301      	strh	r1, [r0, #24]
    7d90:	e00f      	b.n	7db2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    7d92:	f241 41dc 	movw	r1, #5340	; 0x14dc
    7d96:	2032      	movs	r0, #50	; 0x32
    7d98:	f7fd f892 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d9c:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    7da0:	71c8      	strb	r0, [r1, #7]
    7da2:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    7da6:	6088      	str	r0, [r1, #8]
    7da8:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    7dac:	8188      	strh	r0, [r1, #12]
    7dae:	614d      	str	r5, [r1, #20]
    7db0:	830d      	strh	r5, [r1, #24]
    7db2:	6860      	ldr	r0, [r4, #4]
    7db4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    7db6:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    7dba:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    7dbe:	2101      	movs	r1, #1
    7dc0:	7001      	strb	r1, [r0, #0]
    7dc2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7dc4:	8800      	ldrh	r0, [r0, #0]
    7dc6:	f7fd fc79 	bl	56bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    7dca:	f006 fc1b 	bl	e604 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    7dce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7dd0:	20000104 	.word	0x20000104
    7dd4:	b570      	push	{r4, r5, r6, lr}
    7dd6:	4d39      	ldr	r5, [pc, #228]	; (7ebc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>)
    7dd8:	4601      	mov	r1, r0
    7dda:	2200      	movs	r2, #0
    7ddc:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    7de0:	365c      	adds	r6, #92	; 0x5c
    7de2:	8002      	strh	r2, [r0, #0]
    7de4:	2903      	cmp	r1, #3
    7de6:	d002      	beq.n	7dee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f6>
    7de8:	2905      	cmp	r1, #5
    7dea:	d004      	beq.n	7df6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fe>
    7dec:	e056      	b.n	7e9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    7dee:	2103      	movs	r1, #3
    7df0:	f007 f9b0 	bl	f154 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7df4:	e052      	b.n	7e9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    7df6:	2105      	movs	r1, #5
    7df8:	f007 f9ac 	bl	f154 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    7dfc:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7e00:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7e02:	6909      	ldr	r1, [r1, #16]
    7e04:	f844 1f0f 	str.w	r1, [r4, #15]!
    7e08:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7e0a:	8b0a      	ldrh	r2, [r1, #24]
    7e0c:	80a2      	strh	r2, [r4, #4]
    7e0e:	7e89      	ldrb	r1, [r1, #26]
    7e10:	71a1      	strb	r1, [r4, #6]
    7e12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7e14:	68c1      	ldr	r1, [r0, #12]
    7e16:	8b80      	ldrh	r0, [r0, #28]
    7e18:	f007 f84a 	bl	eeb0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    7e1c:	71e0      	strb	r0, [r4, #7]
    7e1e:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7e22:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7e24:	68c1      	ldr	r1, [r0, #12]
    7e26:	6a00      	ldr	r0, [r0, #32]
    7e28:	f007 f837 	bl	ee9a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    7e2c:	75e0      	strb	r0, [r4, #23]
    7e2e:	0a00      	lsrs	r0, r0, #8
    7e30:	7620      	strb	r0, [r4, #24]
    7e32:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7e36:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7e38:	68c0      	ldr	r0, [r0, #12]
    7e3a:	f006 fe6c 	bl	eb16 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    7e3e:	7660      	strb	r0, [r4, #25]
    7e40:	0a00      	lsrs	r0, r0, #8
    7e42:	76a0      	strb	r0, [r4, #26]
    7e44:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    7e48:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7e4a:	8a89      	ldrh	r1, [r1, #20]
    7e4c:	76e1      	strb	r1, [r4, #27]
    7e4e:	0a09      	lsrs	r1, r1, #8
    7e50:	7721      	strb	r1, [r4, #28]
    7e52:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7e54:	8ac9      	ldrh	r1, [r1, #22]
    7e56:	7761      	strb	r1, [r4, #29]
    7e58:	0a09      	lsrs	r1, r1, #8
    7e5a:	77a1      	strb	r1, [r4, #30]
    7e5c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    7e5e:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    7e62:	f8c4 201f 	str.w	r2, [r4, #31]
    7e66:	7909      	ldrb	r1, [r1, #4]
    7e68:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    7e6c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    7e6e:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    7e72:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    7e76:	f001 011f 	and.w	r1, r1, #31
    7e7a:	f020 001f 	bic.w	r0, r0, #31
    7e7e:	4308      	orrs	r0, r1
    7e80:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    7e84:	f004 f978 	bl	c178 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    7e88:	2807      	cmp	r0, #7
    7e8a:	d900      	bls.n	7e8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x496>
    7e8c:	2007      	movs	r0, #7
    7e8e:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    7e92:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    7e96:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    7e9a:	7021      	strb	r1, [r4, #0]
    7e9c:	f106 0112 	add.w	r1, r6, #18
    7ea0:	68a8      	ldr	r0, [r5, #8]
    7ea2:	f007 f972 	bl	f18a <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    7ea6:	7e71      	ldrb	r1, [r6, #25]
    7ea8:	68a8      	ldr	r0, [r5, #8]
    7eaa:	f007 f974 	bl	f196 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    7eae:	f000 fba7 	bl	8600 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x600>
    7eb2:	68a8      	ldr	r0, [r5, #8]
    7eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7eb8:	f004 be16 	b.w	cae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7ebc:	20000104 	.word	0x20000104
    7ec0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    7ec4:	4f65      	ldr	r7, [pc, #404]	; (805c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>)
    7ec6:	4604      	mov	r4, r0
    7ec8:	6878      	ldr	r0, [r7, #4]
    7eca:	f890 806d 	ldrb.w	r8, [r0, #109]	; 0x6d
    7ece:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7ed2:	b180      	cbz	r0, 7ef6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    7ed4:	2600      	movs	r6, #0
    7ed6:	2500      	movs	r5, #0
    7ed8:	7ca0      	ldrb	r0, [r4, #18]
    7eda:	68a1      	ldr	r1, [r4, #8]
    7edc:	f007 fb95 	bl	f60a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    7ee0:	4682      	mov	sl, r0
    7ee2:	f7ff fead 	bl	7c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7ee6:	b140      	cbz	r0, 7efa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    7ee8:	6878      	ldr	r0, [r7, #4]
    7eea:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    7eee:	b121      	cbz	r1, 7efa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    7ef0:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7ef4:	e004      	b.n	7f00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x508>
    7ef6:	2601      	movs	r6, #1
    7ef8:	e7ed      	b.n	7ed6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
    7efa:	6878      	ldr	r0, [r7, #4]
    7efc:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    7f00:	4683      	mov	fp, r0
    7f02:	f7fe fbfd 	bl	6700 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    7f06:	ea5f 0900 	movs.w	r9, r0
    7f0a:	d00c      	beq.n	7f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    7f0c:	4658      	mov	r0, fp
    7f0e:	f7fe fbeb 	bl	66e8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    7f12:	b100      	cbz	r0, 7f16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51e>
    7f14:	2601      	movs	r6, #1
    7f16:	f1ba 0f00 	cmp.w	sl, #0
    7f1a:	d004      	beq.n	7f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    7f1c:	4648      	mov	r0, r9
    7f1e:	68a1      	ldr	r1, [r4, #8]
    7f20:	f006 fd31 	bl	e986 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    7f24:	4605      	mov	r5, r0
    7f26:	6878      	ldr	r0, [r7, #4]
    7f28:	46b9      	mov	r9, r7
    7f2a:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    7f2e:	b10d      	cbz	r5, 7f34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    7f30:	f047 0702 	orr.w	r7, r7, #2
    7f34:	f7ff fe84 	bl	7c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7f38:	b3a0      	cbz	r0, 7fa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    7f3a:	6860      	ldr	r0, [r4, #4]
    7f3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    7f40:	7802      	ldrb	r2, [r0, #0]
    7f42:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    7f46:	429a      	cmp	r2, r3
    7f48:	d11f      	bne.n	7f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7f4a:	7842      	ldrb	r2, [r0, #1]
    7f4c:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    7f50:	429a      	cmp	r2, r3
    7f52:	d11a      	bne.n	7f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7f54:	7882      	ldrb	r2, [r0, #2]
    7f56:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    7f5a:	429a      	cmp	r2, r3
    7f5c:	d115      	bne.n	7f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7f5e:	78c2      	ldrb	r2, [r0, #3]
    7f60:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    7f64:	429a      	cmp	r2, r3
    7f66:	d110      	bne.n	7f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7f68:	7902      	ldrb	r2, [r0, #4]
    7f6a:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    7f6e:	429a      	cmp	r2, r3
    7f70:	d10b      	bne.n	7f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7f72:	7940      	ldrb	r0, [r0, #5]
    7f74:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    7f78:	4290      	cmp	r0, r2
    7f7a:	d106      	bne.n	7f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7f7c:	7c60      	ldrb	r0, [r4, #17]
    7f7e:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    7f82:	4288      	cmp	r0, r1
    7f84:	d101      	bne.n	7f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    7f86:	2001      	movs	r0, #1
    7f88:	e000      	b.n	7f8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x594>
    7f8a:	2000      	movs	r0, #0
    7f8c:	4f34      	ldr	r7, [pc, #208]	; (8060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    7f8e:	4682      	mov	sl, r0
    7f90:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    7f94:	2808      	cmp	r0, #8
    7f96:	d006      	beq.n	7fa6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    7f98:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    7f9c:	4288      	cmp	r0, r1
    7f9e:	d102      	bne.n	7fa6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    7fa0:	2001      	movs	r0, #1
    7fa2:	e001      	b.n	7fa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b0>
    7fa4:	e021      	b.n	7fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f2>
    7fa6:	2000      	movs	r0, #0
    7fa8:	4681      	mov	r9, r0
    7faa:	b925      	cbnz	r5, 7fb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5be>
    7fac:	b12e      	cbz	r6, 7fba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    7fae:	4620      	mov	r0, r4
    7fb0:	f7ff fe52 	bl	7c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    7fb4:	b108      	cbz	r0, 7fba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    7fb6:	2001      	movs	r0, #1
    7fb8:	e000      	b.n	7fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
    7fba:	2000      	movs	r0, #0
    7fbc:	f1b8 0f00 	cmp.w	r8, #0
    7fc0:	d009      	beq.n	7fd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    7fc2:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    7fc6:	2901      	cmp	r1, #1
    7fc8:	d003      	beq.n	7fd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5da>
    7fca:	b921      	cbnz	r1, 7fd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    7fcc:	ea5a 0109 	orrs.w	r1, sl, r9
    7fd0:	d001      	beq.n	7fd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    7fd2:	2101      	movs	r1, #1
    7fd4:	e000      	b.n	7fd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e0>
    7fd6:	2100      	movs	r1, #0
    7fd8:	4208      	tst	r0, r1
    7fda:	d003      	beq.n	7fe4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ec>
    7fdc:	200c      	movs	r0, #12
    7fde:	b004      	add	sp, #16
    7fe0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    7fe4:	f004 fb1c 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7fe8:	e036      	b.n	8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    7fea:	f004 fb19 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7fee:	f1b8 0f00 	cmp.w	r8, #0
    7ff2:	d031      	beq.n	8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    7ff4:	4620      	mov	r0, r4
    7ff6:	f7ff fe2f 	bl	7c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    7ffa:	b900      	cbnz	r0, 7ffe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x606>
    7ffc:	b175      	cbz	r5, 801c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    7ffe:	a803      	add	r0, sp, #12
    8000:	f000 f980 	bl	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    8004:	f8d9 2004 	ldr.w	r2, [r9, #4]
    8008:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    800c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    8010:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    8014:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    8018:	463b      	mov	r3, r7
    801a:	e018      	b.n	804e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    801c:	f8d9 0004 	ldr.w	r0, [r9, #4]
    8020:	464d      	mov	r5, r9
    8022:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    8026:	2803      	cmp	r0, #3
    8028:	d001      	beq.n	802e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    802a:	2802      	cmp	r0, #2
    802c:	d114      	bne.n	8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    802e:	f1ba 0f00 	cmp.w	sl, #0
    8032:	d011      	beq.n	8058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    8034:	a803      	add	r0, sp, #12
    8036:	f000 f965 	bl	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    803a:	686a      	ldr	r2, [r5, #4]
    803c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    8040:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    8044:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    8048:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    804c:	23fe      	movs	r3, #254	; 0xfe
    804e:	2101      	movs	r1, #1
    8050:	4620      	mov	r0, r4
    8052:	3232      	adds	r2, #50	; 0x32
    8054:	f000 fc46 	bl	88e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    8058:	2005      	movs	r0, #5
    805a:	e7c0      	b.n	7fde <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e6>
    805c:	20000104 	.word	0x20000104
    8060:	200012a4 	.word	0x200012a4
    8064:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8066:	4c3f      	ldr	r4, [pc, #252]	; (8164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>)
    8068:	4605      	mov	r5, r0
    806a:	6860      	ldr	r0, [r4, #4]
    806c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    8070:	2900      	cmp	r1, #0
    8072:	d06c      	beq.n	814e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    8074:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    8078:	2802      	cmp	r0, #2
    807a:	d02c      	beq.n	80d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd6>
    807c:	2801      	cmp	r0, #1
    807e:	d043      	beq.n	8108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    8080:	f7ff fdde 	bl	7c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    8084:	2800      	cmp	r0, #0
    8086:	d067      	beq.n	8158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>
    8088:	686a      	ldr	r2, [r5, #4]
    808a:	6861      	ldr	r1, [r4, #4]
    808c:	7810      	ldrb	r0, [r2, #0]
    808e:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    8092:	4298      	cmp	r0, r3
    8094:	d14c      	bne.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    8096:	7850      	ldrb	r0, [r2, #1]
    8098:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    809c:	4298      	cmp	r0, r3
    809e:	d147      	bne.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    80a0:	7890      	ldrb	r0, [r2, #2]
    80a2:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    80a6:	4298      	cmp	r0, r3
    80a8:	d142      	bne.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    80aa:	78d0      	ldrb	r0, [r2, #3]
    80ac:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    80b0:	4298      	cmp	r0, r3
    80b2:	d13d      	bne.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    80b4:	7910      	ldrb	r0, [r2, #4]
    80b6:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    80ba:	4298      	cmp	r0, r3
    80bc:	d138      	bne.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    80be:	7950      	ldrb	r0, [r2, #5]
    80c0:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    80c4:	4290      	cmp	r0, r2
    80c6:	d133      	bne.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    80c8:	7c68      	ldrb	r0, [r5, #17]
    80ca:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    80ce:	4290      	cmp	r0, r2
    80d0:	d12e      	bne.n	8130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    80d2:	2001      	movs	r0, #1
    80d4:	e02d      	b.n	8132 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x132>
    80d6:	a803      	add	r0, sp, #12
    80d8:	f000 f914 	bl	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    80dc:	6862      	ldr	r2, [r4, #4]
    80de:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    80e2:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    80e6:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    80ea:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    80ee:	23ff      	movs	r3, #255	; 0xff
    80f0:	2100      	movs	r1, #0
    80f2:	4628      	mov	r0, r5
    80f4:	3232      	adds	r2, #50	; 0x32
    80f6:	f000 fbf5 	bl	88e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    80fa:	6861      	ldr	r1, [r4, #4]
    80fc:	2001      	movs	r0, #1
    80fe:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    8102:	200b      	movs	r0, #11
    8104:	b004      	add	sp, #16
    8106:	bd70      	pop	{r4, r5, r6, pc}
    8108:	a803      	add	r0, sp, #12
    810a:	f000 f8fb 	bl	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    810e:	6862      	ldr	r2, [r4, #4]
    8110:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    8114:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    8118:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    811c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    8120:	23ff      	movs	r3, #255	; 0xff
    8122:	2100      	movs	r1, #0
    8124:	4628      	mov	r0, r5
    8126:	3232      	adds	r2, #50	; 0x32
    8128:	f000 fbdc 	bl	88e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    812c:	2005      	movs	r0, #5
    812e:	e7e9      	b.n	8104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>
    8130:	2000      	movs	r0, #0
    8132:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    8136:	2901      	cmp	r1, #1
    8138:	d00c      	beq.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    813a:	b958      	cbnz	r0, 8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    813c:	490a      	ldr	r1, [pc, #40]	; (8168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>)
    813e:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    8142:	2808      	cmp	r0, #8
    8144:	d003      	beq.n	814e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    8146:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    814a:	4281      	cmp	r1, r0
    814c:	d002      	beq.n	8154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    814e:	f004 fa67 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8152:	e7eb      	b.n	812c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>
    8154:	200c      	movs	r0, #12
    8156:	e7d5      	b.n	8104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>
    8158:	f640 6158 	movw	r1, #3672	; 0xe58
    815c:	2032      	movs	r0, #50	; 0x32
    815e:	f7fc feaf 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8162:	0000      	.short	0x0000
    8164:	20000104 	.word	0x20000104
    8168:	200012a4 	.word	0x200012a4
    816c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    816e:	4c1e      	ldr	r4, [pc, #120]	; (81e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e8>)
    8170:	4605      	mov	r5, r0
    8172:	6860      	ldr	r0, [r4, #4]
    8174:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    8178:	b129      	cbz	r1, 8186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    817a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    817e:	2802      	cmp	r0, #2
    8180:	d004      	beq.n	818c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>
    8182:	2801      	cmp	r0, #1
    8184:	d01b      	beq.n	81be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1be>
    8186:	f004 fa4b 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    818a:	e02a      	b.n	81e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e2>
    818c:	a803      	add	r0, sp, #12
    818e:	f000 f8b9 	bl	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    8192:	6862      	ldr	r2, [r4, #4]
    8194:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    8198:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    819c:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    81a0:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    81a4:	23ff      	movs	r3, #255	; 0xff
    81a6:	2106      	movs	r1, #6
    81a8:	4628      	mov	r0, r5
    81aa:	3232      	adds	r2, #50	; 0x32
    81ac:	f000 fb9a 	bl	88e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    81b0:	6862      	ldr	r2, [r4, #4]
    81b2:	200b      	movs	r0, #11
    81b4:	2100      	movs	r1, #0
    81b6:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
    81ba:	b004      	add	sp, #16
    81bc:	bd70      	pop	{r4, r5, r6, pc}
    81be:	a803      	add	r0, sp, #12
    81c0:	f000 f8a0 	bl	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    81c4:	6862      	ldr	r2, [r4, #4]
    81c6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    81ca:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    81ce:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    81d2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    81d6:	23ff      	movs	r3, #255	; 0xff
    81d8:	2106      	movs	r1, #6
    81da:	4628      	mov	r0, r5
    81dc:	3232      	adds	r2, #50	; 0x32
    81de:	f000 fb81 	bl	88e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    81e2:	2005      	movs	r0, #5
    81e4:	e7e9      	b.n	81ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ba>
    81e6:	0000      	.short	0x0000
    81e8:	20000104 	.word	0x20000104
    81ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    81ee:	b389      	cbz	r1, 8254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x254>
    81f0:	2901      	cmp	r1, #1
    81f2:	d034      	beq.n	825e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25e>
    81f4:	2505      	movs	r5, #5
    81f6:	2902      	cmp	r1, #2
    81f8:	d004      	beq.n	8204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x204>
    81fa:	2906      	cmp	r1, #6
    81fc:	d025      	beq.n	824a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24a>
    81fe:	f004 fa0f 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    8202:	e01f      	b.n	8244 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x244>
    8204:	4606      	mov	r6, r0
    8206:	f004 fa0b 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    820a:	4c17      	ldr	r4, [pc, #92]	; (8268 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x268>)
    820c:	6860      	ldr	r0, [r4, #4]
    820e:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    8212:	b1b9      	cbz	r1, 8244 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x244>
    8214:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    8218:	2801      	cmp	r0, #1
    821a:	d001      	beq.n	8220 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x220>
    821c:	2802      	cmp	r0, #2
    821e:	d111      	bne.n	8244 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x244>
    8220:	a803      	add	r0, sp, #12
    8222:	f000 f86f 	bl	8304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    8226:	6862      	ldr	r2, [r4, #4]
    8228:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    822c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    8230:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    8234:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    8238:	23ff      	movs	r3, #255	; 0xff
    823a:	2102      	movs	r1, #2
    823c:	4630      	mov	r0, r6
    823e:	3232      	adds	r2, #50	; 0x32
    8240:	f000 fb50 	bl	88e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    8244:	b004      	add	sp, #16
    8246:	4628      	mov	r0, r5
    8248:	bd70      	pop	{r4, r5, r6, pc}
    824a:	b004      	add	sp, #16
    824c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8250:	f7ff bf8c 	b.w	816c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    8254:	b004      	add	sp, #16
    8256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    825a:	f7ff bf03 	b.w	8064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    825e:	b004      	add	sp, #16
    8260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8264:	f7ff be2c 	b.w	7ec0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    8268:	20000104 	.word	0x20000104
    826c:	b570      	push	{r4, r5, r6, lr}
    826e:	4c11      	ldr	r4, [pc, #68]	; (82b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b4>)
    8270:	4605      	mov	r5, r0
    8272:	6861      	ldr	r1, [r4, #4]
    8274:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    8278:	2800      	cmp	r0, #0
    827a:	d019      	beq.n	82b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>
    827c:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    8280:	2800      	cmp	r0, #0
    8282:	d015      	beq.n	82b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>
    8284:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    8288:	3132      	adds	r1, #50	; 0x32
    828a:	f007 f9be 	bl	f60a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    828e:	b140      	cbz	r0, 82a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a2>
    8290:	f7fe fa00 	bl	6694 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    8294:	6861      	ldr	r1, [r4, #4]
    8296:	462a      	mov	r2, r5
    8298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    829c:	3132      	adds	r1, #50	; 0x32
    829e:	f006 bb3d 	b.w	e91c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    82a2:	6860      	ldr	r0, [r4, #4]
    82a4:	4629      	mov	r1, r5
    82a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82aa:	3032      	adds	r0, #50	; 0x32
    82ac:	f006 bb25 	b.w	e8fa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    82b0:	bd70      	pop	{r4, r5, r6, pc}
    82b2:	0000      	.short	0x0000
    82b4:	20000104 	.word	0x20000104
    82b8:	4602      	mov	r2, r0
    82ba:	480b      	ldr	r0, [pc, #44]	; (82e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>)
    82bc:	b082      	sub	sp, #8
    82be:	6840      	ldr	r0, [r0, #4]
    82c0:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    82c4:	f88d 1000 	strb.w	r1, [sp]
    82c8:	9900      	ldr	r1, [sp, #0]
    82ca:	9100      	str	r1, [sp, #0]
    82cc:	f89d 1000 	ldrb.w	r1, [sp]
    82d0:	2900      	cmp	r1, #0
    82d2:	d107      	bne.n	82e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    82d4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    82d6:	2900      	cmp	r1, #0
    82d8:	d004      	beq.n	82e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    82da:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    82de:	b002      	add	sp, #8
    82e0:	f7fb ba90 	b.w	3804 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    82e4:	b002      	add	sp, #8
    82e6:	4770      	bx	lr
    82e8:	20000104 	.word	0x20000104
    82ec:	b510      	push	{r4, lr}
    82ee:	4804      	ldr	r0, [pc, #16]	; (8300 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x300>)
    82f0:	f004 fcac 	bl	cc4c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    82f4:	2800      	cmp	r0, #0
    82f6:	d102      	bne.n	82fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fe>
    82f8:	4901      	ldr	r1, [pc, #4]	; (8300 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x300>)
    82fa:	207f      	movs	r0, #127	; 0x7f
    82fc:	7008      	strb	r0, [r1, #0]
    82fe:	bd10      	pop	{r4, pc}
    8300:	20000104 	.word	0x20000104
    8304:	4a07      	ldr	r2, [pc, #28]	; (8324 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x324>)
    8306:	b510      	push	{r4, lr}
    8308:	f992 1000 	ldrsb.w	r1, [r2]
    830c:	297f      	cmp	r1, #127	; 0x7f
    830e:	d003      	beq.n	8318 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x318>
    8310:	7001      	strb	r1, [r0, #0]
    8312:	207f      	movs	r0, #127	; 0x7f
    8314:	7010      	strb	r0, [r2, #0]
    8316:	bd10      	pop	{r4, pc}
    8318:	f240 319f 	movw	r1, #927	; 0x39f
    831c:	2032      	movs	r0, #50	; 0x32
    831e:	f7fc fdcf 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8322:	0000      	.short	0x0000
    8324:	20000104 	.word	0x20000104
    8328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    832c:	4607      	mov	r7, r0
    832e:	f7fd f9f3 	bl	5718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    8332:	4604      	mov	r4, r0
    8334:	f7fd f9f6 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8338:	4621      	mov	r1, r4
    833a:	f007 f9be 	bl	f6ba <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    833e:	0005      	movs	r5, r0
    8340:	d012      	beq.n	8368 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x368>
    8342:	4c2d      	ldr	r4, [pc, #180]	; (83f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f8>)
    8344:	6860      	ldr	r0, [r4, #4]
    8346:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    834a:	2801      	cmp	r0, #1
    834c:	d004      	beq.n	8358 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x358>
    834e:	2802      	cmp	r0, #2
    8350:	d002      	beq.n	8358 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x358>
    8352:	f7ff fc75 	bl	7c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    8356:	b150      	cbz	r0, 836e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36e>
    8358:	f06f 0613 	mvn.w	r6, #19
    835c:	b33f      	cbz	r7, 83ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ae>
    835e:	4628      	mov	r0, r5
    8360:	f006 fec9 	bl	f0f6 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    8364:	b950      	cbnz	r0, 837c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37c>
    8366:	e005      	b.n	8374 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x374>
    8368:	f241 4181 	movw	r1, #5249	; 0x1481
    836c:	e03a      	b.n	83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    836e:	f241 4187 	movw	r1, #5255	; 0x1487
    8372:	e037      	b.n	83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    8374:	4628      	mov	r0, r5
    8376:	f006 fee0 	bl	f13a <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    837a:	b1c0      	cbz	r0, 83ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ae>
    837c:	6861      	ldr	r1, [r4, #4]
    837e:	4628      	mov	r0, r5
    8380:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    8384:	2a05      	cmp	r2, #5
    8386:	d202      	bcs.n	838e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    8388:	f241 410b 	movw	r1, #5131	; 0x140b
    838c:	e02a      	b.n	83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    838e:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    8392:	2a0b      	cmp	r2, #11
    8394:	d302      	bcc.n	839c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>
    8396:	f241 410c 	movw	r1, #5132	; 0x140c
    839a:	e023      	b.n	83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    839c:	68e2      	ldr	r2, [r4, #12]
    839e:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    83a2:	6952      	ldr	r2, [r2, #20]
    83a4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    83a8:	5851      	ldr	r1, [r2, r1]
    83aa:	4788      	blx	r1
    83ac:	e016      	b.n	83dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3dc>
    83ae:	6860      	ldr	r0, [r4, #4]
    83b0:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    83b4:	2905      	cmp	r1, #5
    83b6:	d202      	bcs.n	83be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3be>
    83b8:	f241 4177 	movw	r1, #5239	; 0x1477
    83bc:	e012      	b.n	83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    83be:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    83c2:	290b      	cmp	r1, #11
    83c4:	d302      	bcc.n	83cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3cc>
    83c6:	f241 4178 	movw	r1, #5240	; 0x1478
    83ca:	e00b      	b.n	83e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    83cc:	68e1      	ldr	r1, [r4, #12]
    83ce:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    83d2:	6989      	ldr	r1, [r1, #24]
    83d4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    83d8:	5808      	ldr	r0, [r1, r0]
    83da:	4780      	blx	r0
    83dc:	280f      	cmp	r0, #15
    83de:	d304      	bcc.n	83ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ea>
    83e0:	f241 419c 	movw	r1, #5276	; 0x149c
    83e4:	2032      	movs	r0, #50	; 0x32
    83e6:	f7fc fd6b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    83ea:	68e1      	ldr	r1, [r4, #12]
    83ec:	6909      	ldr	r1, [r1, #16]
    83ee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    83f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    83f6:	4700      	bx	r0
    83f8:	20000104 	.word	0x20000104
    83fc:	b510      	push	{r4, lr}
    83fe:	b118      	cbz	r0, 8408 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x408>
    8400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8404:	f000 b924 	b.w	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    8408:	2900      	cmp	r1, #0
    840a:	d01d      	beq.n	8448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    840c:	480f      	ldr	r0, [pc, #60]	; (844c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44c>)
    840e:	6841      	ldr	r1, [r0, #4]
    8410:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    8414:	2a0b      	cmp	r2, #11
    8416:	d202      	bcs.n	841e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x41e>
    8418:	f241 5143 	movw	r1, #5443	; 0x1543
    841c:	e005      	b.n	842a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    841e:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    8422:	2a0f      	cmp	r2, #15
    8424:	d304      	bcc.n	8430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    8426:	f241 5144 	movw	r1, #5444	; 0x1544
    842a:	2032      	movs	r0, #50	; 0x32
    842c:	f7fc fd48 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8430:	68c0      	ldr	r0, [r0, #12]
    8432:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    8436:	6880      	ldr	r0, [r0, #8]
    8438:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    843c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    8440:	5840      	ldr	r0, [r0, r1]
    8442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8446:	4700      	bx	r0
    8448:	bd10      	pop	{r4, pc}
    844a:	0000      	.short	0x0000
    844c:	20000104 	.word	0x20000104
    8450:	b510      	push	{r4, lr}
    8452:	f7ff faef 	bl	7a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    8456:	f000 f90b 	bl	8670 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x670>
    845a:	4805      	ldr	r0, [pc, #20]	; (8470 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x470>)
    845c:	6881      	ldr	r1, [r0, #8]
    845e:	2000      	movs	r0, #0
    8460:	f7ff fc3a 	bl	7cd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    8464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8468:	2003      	movs	r0, #3
    846a:	f000 bb79 	b.w	8b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    846e:	0000      	.short	0x0000
    8470:	20000104 	.word	0x20000104
    8474:	b510      	push	{r4, lr}
    8476:	f7fd f94f 	bl	5718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    847a:	4604      	mov	r4, r0
    847c:	f7fd f952 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    8480:	4621      	mov	r1, r4
    8482:	f007 f91a 	bl	f6ba <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    8486:	b150      	cbz	r0, 849e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49e>
    8488:	f004 fb2e 	bl	cae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    848c:	2000      	movs	r0, #0
    848e:	f004 f9df 	bl	c850 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    8492:	4905      	ldr	r1, [pc, #20]	; (84a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>)
    8494:	2006      	movs	r0, #6
    8496:	6849      	ldr	r1, [r1, #4]
    8498:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    849c:	bd10      	pop	{r4, pc}
    849e:	f240 5184 	movw	r1, #1412	; 0x584
    84a2:	2032      	movs	r0, #50	; 0x32
    84a4:	f7fc fd0c 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84a8:	20000104 	.word	0x20000104
    84ac:	490f      	ldr	r1, [pc, #60]	; (84ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>)
    84ae:	b510      	push	{r4, lr}
    84b0:	6848      	ldr	r0, [r1, #4]
    84b2:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    84b6:	2a06      	cmp	r2, #6
    84b8:	d202      	bcs.n	84c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c0>
    84ba:	f241 5171 	movw	r1, #5489	; 0x1571
    84be:	e005      	b.n	84cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4cc>
    84c0:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    84c4:	2a0b      	cmp	r2, #11
    84c6:	d304      	bcc.n	84d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d2>
    84c8:	f241 5172 	movw	r1, #5490	; 0x1572
    84cc:	2032      	movs	r0, #50	; 0x32
    84ce:	f7fc fcf7 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    84d2:	68c9      	ldr	r1, [r1, #12]
    84d4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    84d8:	68c9      	ldr	r1, [r1, #12]
    84da:	f06f 0213 	mvn.w	r2, #19
    84de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    84e2:	5808      	ldr	r0, [r1, r0]
    84e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    84e8:	4700      	bx	r0
    84ea:	0000      	.short	0x0000
    84ec:	20000104 	.word	0x20000104
    84f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84f4:	4c31      	ldr	r4, [pc, #196]	; (85bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5bc>)
    84f6:	4605      	mov	r5, r0
    84f8:	460e      	mov	r6, r1
    84fa:	6860      	ldr	r0, [r4, #4]
    84fc:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    8500:	b120      	cbz	r0, 850c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50c>
    8502:	2801      	cmp	r0, #1
    8504:	d002      	beq.n	850c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50c>
    8506:	200c      	movs	r0, #12
    8508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    850c:	f004 fa60 	bl	c9d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    8510:	f004 f86c 	bl	c5ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    8514:	f003 fe4e 	bl	c1b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    8518:	f004 fcc8 	bl	ceac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    851c:	4828      	ldr	r0, [pc, #160]	; (85c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c0>)
    851e:	f004 f98f 	bl	c840 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    8522:	4828      	ldr	r0, [pc, #160]	; (85c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c4>)
    8524:	f004 fbb8 	bl	cc98 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    8528:	4827      	ldr	r0, [pc, #156]	; (85c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c8>)
    852a:	f004 fbab 	bl	cc84 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    852e:	4630      	mov	r0, r6
    8530:	f004 fada 	bl	cae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    8534:	7968      	ldrb	r0, [r5, #5]
    8536:	b110      	cbz	r0, 853e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x53e>
    8538:	2001      	movs	r0, #1
    853a:	f7ff febd 	bl	82b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b8>
    853e:	7928      	ldrb	r0, [r5, #4]
    8540:	2803      	cmp	r0, #3
    8542:	d001      	beq.n	8548 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x548>
    8544:	b118      	cbz	r0, 854e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54e>
    8546:	e018      	b.n	857a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x57a>
    8548:	f640 1188 	movw	r1, #2440	; 0x988
    854c:	e033      	b.n	85b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b6>
    854e:	6861      	ldr	r1, [r4, #4]
    8550:	2000      	movs	r0, #0
    8552:	2503      	movs	r5, #3
    8554:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    8558:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    855c:	1c52      	adds	r2, r2, #1
    855e:	fbb2 f7f5 	udiv	r7, r2, r5
    8562:	fb05 2217 	mls	r2, r5, r7, r2
    8566:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    856a:	fa23 f202 	lsr.w	r2, r3, r2
    856e:	07d2      	lsls	r2, r2, #31
    8570:	d103      	bne.n	857a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x57a>
    8572:	1c40      	adds	r0, r0, #1
    8574:	b2c0      	uxtb	r0, r0
    8576:	2803      	cmp	r0, #3
    8578:	d3ee      	bcc.n	8558 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x558>
    857a:	6860      	ldr	r0, [r4, #4]
    857c:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    8580:	f004 faac 	bl	cadc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    8584:	4631      	mov	r1, r6
    8586:	2001      	movs	r0, #1
    8588:	f7ff fa66 	bl	7a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    858c:	2800      	cmp	r0, #0
    858e:	d0bb      	beq.n	8508 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x508>
    8590:	f000 f922 	bl	87d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d8>
    8594:	6860      	ldr	r0, [r4, #4]
    8596:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    859a:	b138      	cbz	r0, 85ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ac>
    859c:	f7fe f87e 	bl	669c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    85a0:	480a      	ldr	r0, [pc, #40]	; (85cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5cc>)
    85a2:	6800      	ldr	r0, [r0, #0]
    85a4:	2803      	cmp	r0, #3
    85a6:	d004      	beq.n	85b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b2>
    85a8:	2000      	movs	r0, #0
    85aa:	e7ad      	b.n	8508 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x508>
    85ac:	f7fe fa6a 	bl	6a84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    85b0:	e7f6      	b.n	85a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a0>
    85b2:	f640 119a 	movw	r1, #2458	; 0x99a
    85b6:	2032      	movs	r0, #50	; 0x32
    85b8:	f7fc fc82 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    85bc:	20000104 	.word	0x20000104
    85c0:	000088d4 	.word	0x000088d4
    85c4:	00010ca3 	.word	0x00010ca3
    85c8:	8e89bed6 	.word	0x8e89bed6
    85cc:	40001550 	.word	0x40001550
    85d0:	b510      	push	{r4, lr}
    85d2:	2000      	movs	r0, #0
    85d4:	f7ff fe70 	bl	82b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b8>
    85d8:	4808      	ldr	r0, [pc, #32]	; (85fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fc>)
    85da:	6840      	ldr	r0, [r0, #4]
    85dc:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    85e0:	b128      	cbz	r0, 85ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ee>
    85e2:	2801      	cmp	r0, #1
    85e4:	d003      	beq.n	85ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ee>
    85e6:	2802      	cmp	r0, #2
    85e8:	d004      	beq.n	85f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f4>
    85ea:	200c      	movs	r0, #12
    85ec:	bd10      	pop	{r4, pc}
    85ee:	f000 f82f 	bl	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    85f2:	e001      	b.n	85f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f8>
    85f4:	f000 f844 	bl	8680 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x680>
    85f8:	2000      	movs	r0, #0
    85fa:	bd10      	pop	{r4, pc}
    85fc:	20000104 	.word	0x20000104
    8600:	b570      	push	{r4, r5, r6, lr}
    8602:	4c12      	ldr	r4, [pc, #72]	; (864c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64c>)
    8604:	6860      	ldr	r0, [r4, #4]
    8606:	f100 0532 	add.w	r5, r0, #50	; 0x32
    860a:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    860e:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    8612:	b188      	cbz	r0, 8638 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x638>
    8614:	f7ff fb14 	bl	7c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    8618:	b130      	cbz	r0, 8628 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x628>
    861a:	6860      	ldr	r0, [r4, #4]
    861c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    8620:	b111      	cbz	r1, 8628 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x628>
    8622:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    8626:	e002      	b.n	862e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62e>
    8628:	6860      	ldr	r0, [r4, #4]
    862a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    862e:	f7fe f8db 	bl	67e8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    8632:	b108      	cbz	r0, 8638 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x638>
    8634:	2601      	movs	r6, #1
    8636:	4605      	mov	r5, r0
    8638:	4629      	mov	r1, r5
    863a:	68a0      	ldr	r0, [r4, #8]
    863c:	f006 fdb2 	bl	f1a4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    8640:	4631      	mov	r1, r6
    8642:	68a0      	ldr	r0, [r4, #8]
    8644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8648:	f006 bdb2 	b.w	f1b0 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    864c:	20000104 	.word	0x20000104
    8650:	b510      	push	{r4, lr}
    8652:	f7ff f9ef 	bl	7a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    8656:	4905      	ldr	r1, [pc, #20]	; (866c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66c>)
    8658:	2001      	movs	r0, #1
    865a:	6849      	ldr	r1, [r1, #4]
    865c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8664:	2000      	movs	r0, #0
    8666:	f000 ba7b 	b.w	8b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    866a:	0000      	.short	0x0000
    866c:	20000104 	.word	0x20000104
    8670:	4902      	ldr	r1, [pc, #8]	; (867c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x67c>)
    8672:	2000      	movs	r0, #0
    8674:	6849      	ldr	r1, [r1, #4]
    8676:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    867a:	4770      	bx	lr
    867c:	20000104 	.word	0x20000104
    8680:	b570      	push	{r4, r5, r6, lr}
    8682:	f7fd f849 	bl	5718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    8686:	4604      	mov	r4, r0
    8688:	f7fd f84c 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    868c:	4621      	mov	r1, r4
    868e:	f007 f814 	bl	f6ba <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    8692:	0004      	movs	r4, r0
    8694:	d020      	beq.n	86d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d8>
    8696:	f007 f860 	bl	f75a <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    869a:	2000      	movs	r0, #0
    869c:	f000 fa2a 	bl	8af4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    86a0:	b1f8      	cbz	r0, 86e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e2>
    86a2:	4d1e      	ldr	r5, [pc, #120]	; (871c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x71c>)
    86a4:	6868      	ldr	r0, [r5, #4]
    86a6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    86aa:	2802      	cmp	r0, #2
    86ac:	d003      	beq.n	86b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b6>
    86ae:	4621      	mov	r1, r4
    86b0:	2000      	movs	r0, #0
    86b2:	f7ff f9d1 	bl	7a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    86b6:	1ce0      	adds	r0, r4, #3
    86b8:	f006 f9af 	bl	ea1a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    86bc:	6869      	ldr	r1, [r5, #4]
    86be:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    86c2:	b128      	cbz	r0, 86d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d0>
    86c4:	2440      	movs	r4, #64	; 0x40
    86c6:	f003 fd95 	bl	c1f4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    86ca:	4620      	mov	r0, r4
    86cc:	f003 ff9c 	bl	c608 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    86d0:	f7ff fab6 	bl	7c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    86d4:	b970      	cbnz	r0, 86f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f4>
    86d6:	e008      	b.n	86ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ea>
    86d8:	f240 4177 	movw	r1, #1143	; 0x477
    86dc:	2032      	movs	r0, #50	; 0x32
    86de:	f7fc fbef 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    86e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    86e6:	f7ff bfb3 	b.w	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    86ea:	6868      	ldr	r0, [r5, #4]
    86ec:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    86f0:	2802      	cmp	r0, #2
    86f2:	d104      	bne.n	86fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6fe>
    86f4:	2100      	movs	r1, #0
    86f6:	2201      	movs	r2, #1
    86f8:	4608      	mov	r0, r1
    86fa:	f004 fa81 	bl	cc00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    86fe:	6868      	ldr	r0, [r5, #4]
    8700:	21ff      	movs	r1, #255	; 0xff
    8702:	f800 1f64 	strb.w	r1, [r0, #100]!
    8706:	7041      	strb	r1, [r0, #1]
    8708:	2100      	movs	r1, #0
    870a:	7201      	strb	r1, [r0, #8]
    870c:	71c1      	strb	r1, [r0, #7]
    870e:	7241      	strb	r1, [r0, #9]
    8710:	7601      	strb	r1, [r0, #24]
    8712:	2105      	movs	r1, #5
    8714:	f800 1c08 	strb.w	r1, [r0, #-8]
    8718:	bd70      	pop	{r4, r5, r6, pc}
    871a:	0000      	.short	0x0000
    871c:	20000104 	.word	0x20000104
    8720:	b570      	push	{r4, r5, r6, lr}
    8722:	f7fc fff9 	bl	5718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    8726:	4604      	mov	r4, r0
    8728:	f7fc fffc 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    872c:	4621      	mov	r1, r4
    872e:	f006 ffc4 	bl	f6ba <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    8732:	0005      	movs	r5, r0
    8734:	d028      	beq.n	8788 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x788>
    8736:	4e19      	ldr	r6, [pc, #100]	; (879c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x79c>)
    8738:	2004      	movs	r0, #4
    873a:	6874      	ldr	r4, [r6, #4]
    873c:	345c      	adds	r4, #92	; 0x5c
    873e:	f000 f9d9 	bl	8af4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    8742:	b330      	cbz	r0, 8792 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x792>
    8744:	200c      	movs	r0, #12
    8746:	7020      	strb	r0, [r4, #0]
    8748:	2001      	movs	r0, #1
    874a:	f000 fa09 	bl	8b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    874e:	7828      	ldrb	r0, [r5, #0]
    8750:	6871      	ldr	r1, [r6, #4]
    8752:	f3c0 1040 	ubfx	r0, r0, #5, #1
    8756:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    875a:	2005      	movs	r0, #5
    875c:	f7ff fb3a 	bl	7dd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    8760:	4a0f      	ldr	r2, [pc, #60]	; (87a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a0>)
    8762:	68b1      	ldr	r1, [r6, #8]
    8764:	2520      	movs	r5, #32
    8766:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    8768:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    876c:	7808      	ldrb	r0, [r1, #0]
    876e:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    8772:	f020 0020 	bic.w	r0, r0, #32
    8776:	4318      	orrs	r0, r3
    8778:	7008      	strb	r0, [r1, #0]
    877a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    877c:	7ea2      	ldrb	r2, [r4, #26]
    877e:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    8782:	4011      	ands	r1, r2
    8784:	7001      	strb	r1, [r0, #0]
    8786:	bd70      	pop	{r4, r5, r6, pc}
    8788:	f240 51ef 	movw	r1, #1519	; 0x5ef
    878c:	2032      	movs	r0, #50	; 0x32
    878e:	f7fc fb97 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8796:	f7ff bf5b 	b.w	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    879a:	0000      	.short	0x0000
    879c:	20000104 	.word	0x20000104
    87a0:	200012a4 	.word	0x200012a4
    87a4:	b510      	push	{r4, lr}
    87a6:	2003      	movs	r0, #3
    87a8:	f000 f9a4 	bl	8af4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    87ac:	b168      	cbz	r0, 87ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ca>
    87ae:	2003      	movs	r0, #3
    87b0:	f7ff fb10 	bl	7dd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    87b4:	2201      	movs	r2, #1
    87b6:	4611      	mov	r1, r2
    87b8:	2000      	movs	r0, #0
    87ba:	f004 fa21 	bl	cc00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    87be:	4905      	ldr	r1, [pc, #20]	; (87d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d4>)
    87c0:	200b      	movs	r0, #11
    87c2:	6849      	ldr	r1, [r1, #4]
    87c4:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    87c8:	bd10      	pop	{r4, pc}
    87ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    87ce:	f7ff bf3f 	b.w	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    87d2:	0000      	.short	0x0000
    87d4:	20000104 	.word	0x20000104
    87d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    87dc:	4c1d      	ldr	r4, [pc, #116]	; (8854 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x854>)
    87de:	2600      	movs	r6, #0
    87e0:	6860      	ldr	r0, [r4, #4]
    87e2:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    87e6:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    87ea:	b911      	cbnz	r1, 87f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7f2>
    87ec:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    87f0:	b350      	cbz	r0, 8848 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x848>
    87f2:	f004 fe00 	bl	d3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    87f6:	4680      	mov	r8, r0
    87f8:	6860      	ldr	r0, [r4, #4]
    87fa:	4641      	mov	r1, r8
    87fc:	6c40      	ldr	r0, [r0, #68]	; 0x44
    87fe:	f7f9 ff89 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8802:	4f15      	ldr	r7, [pc, #84]	; (8858 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x858>)
    8804:	4605      	mov	r5, r0
    8806:	fb90 f0f7 	sdiv	r0, r0, r7
    880a:	fb07 5010 	mls	r0, r7, r0, r5
    880e:	4241      	negs	r1, r0
    8810:	4640      	mov	r0, r8
    8812:	f7f9 ff4d 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8816:	6861      	ldr	r1, [r4, #4]
    8818:	6448      	str	r0, [r1, #68]	; 0x44
    881a:	fb95 f0f7 	sdiv	r0, r5, r7
    881e:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    8820:	4410      	add	r0, r2
    8822:	6788      	str	r0, [r1, #120]	; 0x78
    8824:	f7fe f89c 	bl	6960 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    8828:	6861      	ldr	r1, [r4, #4]
    882a:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    882c:	4290      	cmp	r0, r2
    882e:	d80b      	bhi.n	8848 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x848>
    8830:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    8834:	678e      	str	r6, [r1, #120]	; 0x78
    8836:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    883a:	b110      	cbz	r0, 8842 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x842>
    883c:	2001      	movs	r0, #1
    883e:	f7fd ff79 	bl	6734 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    8842:	2001      	movs	r0, #1
    8844:	f7ff fd12 	bl	826c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>
    8848:	6861      	ldr	r1, [r4, #4]
    884a:	2002      	movs	r0, #2
    884c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    8850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8854:	20000104 	.word	0x20000104
    8858:	000f4240 	.word	0x000f4240
    885c:	00008671 	.word	0x00008671
    8860:	00008651 	.word	0x00008651
    8864:	0000f69b 	.word	0x0000f69b
    8868:	0000f69b 	.word	0x0000f69b
    886c:	0000f69b 	.word	0x0000f69b
    8870:	00008681 	.word	0x00008681
    8874:	0000f69b 	.word	0x0000f69b
    8878:	0000f69b 	.word	0x0000f69b
    887c:	0000f69b 	.word	0x0000f69b
    8880:	0000f69b 	.word	0x0000f69b
    8884:	0000f69b 	.word	0x0000f69b
    8888:	000087a5 	.word	0x000087a5
    888c:	00008721 	.word	0x00008721
    8890:	0000f69b 	.word	0x0000f69b
    8894:	0000f69b 	.word	0x0000f69b
    8898:	00008475 	.word	0x00008475
    889c:	00008451 	.word	0x00008451
    88a0:	00000000 	.word	0x00000000
    88a4:	0000f6a5 	.word	0x0000f6a5
    88a8:	0000f643 	.word	0x0000f643
    88ac:	0000f655 	.word	0x0000f655
    88b0:	0000f663 	.word	0x0000f663
    88b4:	00007bed 	.word	0x00007bed
    88b8:	000084f1 	.word	0x000084f1
    88bc:	000085d1 	.word	0x000085d1
    88c0:	00008898 	.word	0x00008898
    88c4:	000088a0 	.word	0x000088a0
    88c8:	0000885c 	.word	0x0000885c
    88cc:	000088b0 	.word	0x000088b0
    88d0:	000088a8 	.word	0x000088a8
    88d4:	000084ad 	.word	0x000084ad
    88d8:	00008329 	.word	0x00008329
    88dc:	000083fd 	.word	0x000083fd
    88e0:	0000f6b7 	.word	0x0000f6b7

000088e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    88e4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    88e8:	461d      	mov	r5, r3
    88ea:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    88ee:	4616      	mov	r6, r2
    88f0:	4688      	mov	r8, r1
    88f2:	4681      	mov	r9, r0
    88f4:	f7fc ff16 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    88f8:	4604      	mov	r4, r0
    88fa:	f005 fd52 	bl	e3a2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    88fe:	2801      	cmp	r0, #1
    8900:	d063      	beq.n	89ca <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    8902:	4620      	mov	r0, r4
    8904:	f006 ffa2 	bl	f84c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    8908:	4604      	mov	r4, r0
    890a:	221c      	movs	r2, #28
    890c:	2100      	movs	r1, #0
    890e:	f004 ff61 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8912:	2701      	movs	r7, #1
    8914:	7027      	strb	r7, [r4, #0]
    8916:	ea5f 0008 	movs.w	r0, r8
    891a:	d009      	beq.n	8930 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    891c:	2801      	cmp	r0, #1
    891e:	d00b      	beq.n	8938 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    8920:	2802      	cmp	r0, #2
    8922:	d02d      	beq.n	8980 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    8924:	f1b8 0f06 	cmp.w	r8, #6
    8928:	d02c      	beq.n	8984 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    892a:	f240 217d 	movw	r1, #637	; 0x27d
    892e:	e049      	b.n	89c4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    8930:	7aa0      	ldrb	r0, [r4, #10]
    8932:	f040 0001 	orr.w	r0, r0, #1
    8936:	e026      	b.n	8986 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    8938:	7aa0      	ldrb	r0, [r4, #10]
    893a:	f040 0005 	orr.w	r0, r0, #5
    893e:	bf00      	nop
    8940:	f040 0010 	orr.w	r0, r0, #16
    8944:	72a0      	strb	r0, [r4, #10]
    8946:	1c63      	adds	r3, r4, #1
    8948:	1ca2      	adds	r2, r4, #2
    894a:	4648      	mov	r0, r9
    894c:	990a      	ldr	r1, [sp, #40]	; 0x28
    894e:	f006 ff62 	bl	f816 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    8952:	f884 a009 	strb.w	sl, [r4, #9]
    8956:	7327      	strb	r7, [r4, #12]
    8958:	2000      	movs	r0, #0
    895a:	7360      	strb	r0, [r4, #13]
    895c:	20ff      	movs	r0, #255	; 0xff
    895e:	73a0      	strb	r0, [r4, #14]
    8960:	7aa1      	ldrb	r1, [r4, #10]
    8962:	0749      	lsls	r1, r1, #29
    8964:	d518      	bpl.n	8998 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    8966:	f104 0014 	add.w	r0, r4, #20
    896a:	1e41      	subs	r1, r0, #1
    896c:	2d02      	cmp	r5, #2
    896e:	d00d      	beq.n	898c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    8970:	2d03      	cmp	r5, #3
    8972:	d00b      	beq.n	898c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    8974:	f8d9 2008 	ldr.w	r2, [r9, #8]
    8978:	6813      	ldr	r3, [r2, #0]
    897a:	6003      	str	r3, [r0, #0]
    897c:	8892      	ldrh	r2, [r2, #4]
    897e:	e008      	b.n	8992 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    8980:	7aa0      	ldrb	r0, [r4, #10]
    8982:	e7dd      	b.n	8940 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    8984:	7aa0      	ldrb	r0, [r4, #10]
    8986:	f040 0002 	orr.w	r0, r0, #2
    898a:	e7d9      	b.n	8940 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    898c:	6832      	ldr	r2, [r6, #0]
    898e:	6002      	str	r2, [r0, #0]
    8990:	88b2      	ldrh	r2, [r6, #4]
    8992:	8082      	strh	r2, [r0, #4]
    8994:	700d      	strb	r5, [r1, #0]
    8996:	e000      	b.n	899a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    8998:	74e0      	strb	r0, [r4, #19]
    899a:	207f      	movs	r0, #127	; 0x7f
    899c:	76a0      	strb	r0, [r4, #26]
    899e:	f884 b01b 	strb.w	fp, [r4, #27]
    89a2:	f7fc feb9 	bl	5718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    89a6:	4604      	mov	r4, r0
    89a8:	f7fc febc 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    89ac:	2201      	movs	r2, #1
    89ae:	4621      	mov	r1, r4
    89b0:	f006 ff55 	bl	f85e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    89b4:	b120      	cbz	r0, 89c0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    89b6:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    89ba:	2005      	movs	r0, #5
    89bc:	f000 b8d0 	b.w	8b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    89c0:	f240 219d 	movw	r1, #669	; 0x29d
    89c4:	2033      	movs	r0, #51	; 0x33
    89c6:	f7fc fa7b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    89ca:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

000089d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    89d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89d4:	4616      	mov	r6, r2
    89d6:	460c      	mov	r4, r1
    89d8:	4605      	mov	r5, r0
    89da:	f006 fbaa 	bl	f132 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    89de:	7460      	strb	r0, [r4, #17]
    89e0:	4628      	mov	r0, r5
    89e2:	f006 fb9d 	bl	f120 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    89e6:	74a0      	strb	r0, [r4, #18]
    89e8:	1cea      	adds	r2, r5, #3
    89ea:	4b14      	ldr	r3, [pc, #80]	; (8a3c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    89ec:	1d90      	adds	r0, r2, #6
    89ee:	2100      	movs	r1, #0
    89f0:	2e07      	cmp	r6, #7
    89f2:	d21f      	bcs.n	8a34 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    89f4:	e8df f006 	tbb	[pc, r6]
    89f8:	1e110b04 	.word	0x1e110b04
    89fc:	00041e13 	.word	0x00041e13
    8a00:	781b      	ldrb	r3, [r3, #0]
    8a02:	e00d      	b.n	8a20 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    8a04:	60e0      	str	r0, [r4, #12]
    8a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a0a:	60e1      	str	r1, [r4, #12]
    8a0c:	e7fb      	b.n	8a06 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    8a0e:	785b      	ldrb	r3, [r3, #1]
    8a10:	7063      	strb	r3, [r4, #1]
    8a12:	e9c4 2001 	strd	r2, r0, [r4, #4]
    8a16:	7421      	strb	r1, [r4, #16]
    8a18:	e7f7      	b.n	8a0a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    8a1a:	789b      	ldrb	r3, [r3, #2]
    8a1c:	e000      	b.n	8a20 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    8a1e:	78db      	ldrb	r3, [r3, #3]
    8a20:	7063      	strb	r3, [r4, #1]
    8a22:	e9c4 2101 	strd	r2, r1, [r4, #4]
    8a26:	786a      	ldrb	r2, [r5, #1]
    8a28:	1f92      	subs	r2, r2, #6
    8a2a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    8a2e:	7422      	strb	r2, [r4, #16]
    8a30:	d0eb      	beq.n	8a0a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    8a32:	e7e7      	b.n	8a04 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    8a34:	7061      	strb	r1, [r4, #1]
    8a36:	6061      	str	r1, [r4, #4]
    8a38:	60a1      	str	r1, [r4, #8]
    8a3a:	e7ec      	b.n	8a16 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    8a3c:	00010ca9 	.word	0x00010ca9

00008a40 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    8a40:	b570      	push	{r4, r5, r6, lr}
    8a42:	f003 ff5d 	bl	c900 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    8a46:	4c0e      	ldr	r4, [pc, #56]	; (8a80 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    8a48:	4606      	mov	r6, r0
    8a4a:	7860      	ldrb	r0, [r4, #1]
    8a4c:	b170      	cbz	r0, 8a6c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    8a4e:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    8a52:	4632      	mov	r2, r6
    8a54:	4628      	mov	r0, r5
    8a56:	f006 f864 	bl	eb22 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    8a5a:	6060      	str	r0, [r4, #4]
    8a5c:	42a8      	cmp	r0, r5
    8a5e:	d005      	beq.n	8a6c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    8a60:	68e1      	ldr	r1, [r4, #12]
    8a62:	1b40      	subs	r0, r0, r5
    8a64:	4408      	add	r0, r1
    8a66:	60e0      	str	r0, [r4, #12]
    8a68:	f7fa fe16 	bl	3698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8a6c:	6860      	ldr	r0, [r4, #4]
    8a6e:	42b0      	cmp	r0, r6
    8a70:	d301      	bcc.n	8a76 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    8a72:	7820      	ldrb	r0, [r4, #0]
    8a74:	b108      	cbz	r0, 8a7a <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    8a76:	2000      	movs	r0, #0
    8a78:	bd70      	pop	{r4, r5, r6, pc}
    8a7a:	2001      	movs	r0, #1
    8a7c:	bd70      	pop	{r4, r5, r6, pc}
    8a7e:	0000      	.short	0x0000
    8a80:	20001328 	.word	0x20001328

00008a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    8a84:	b510      	push	{r4, lr}
    8a86:	2905      	cmp	r1, #5
    8a88:	d22d      	bcs.n	8ae6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    8a8a:	e8df f001 	tbb	[pc, r1]
    8a8e:	0a05      	.short	0x0a05
    8a90:	00280e03 	.word	0x00280e03
    8a94:	2100      	movs	r1, #0
    8a96:	e000      	b.n	8a9a <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    8a98:	2101      	movs	r1, #1
    8a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8a9e:	f000 babb 	b.w	9018 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x20c>
    8aa2:	2103      	movs	r1, #3
    8aa4:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    8aa8:	bd10      	pop	{r4, pc}
    8aaa:	4911      	ldr	r1, [pc, #68]	; (8af0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    8aac:	4604      	mov	r4, r0
    8aae:	68c0      	ldr	r0, [r0, #12]
    8ab0:	6008      	str	r0, [r1, #0]
    8ab2:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    8ab6:	6220      	str	r0, [r4, #32]
    8ab8:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    8abc:	83a0      	strh	r0, [r4, #28]
    8abe:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    8ac2:	60e0      	str	r0, [r4, #12]
    8ac4:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    8ac8:	82a0      	strh	r0, [r4, #20]
    8aca:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    8ace:	82e0      	strh	r0, [r4, #22]
    8ad0:	4620      	mov	r0, r4
    8ad2:	f006 fefe 	bl	f8d2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    8ad6:	2002      	movs	r0, #2
    8ad8:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    8adc:	bd10      	pop	{r4, pc}
    8ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8ae2:	f006 bef6 	b.w	f8d2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    8ae6:	f640 3158 	movw	r1, #2904	; 0xb58
    8aea:	2035      	movs	r0, #53	; 0x35
    8aec:	f7fc f9e8 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8af0:	20000114 	.word	0x20000114

00008af4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    8af4:	b570      	push	{r4, r5, r6, lr}
    8af6:	4606      	mov	r6, r0
    8af8:	f004 fc7d 	bl	d3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8afc:	4c17      	ldr	r4, [pc, #92]	; (8b5c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>)
    8afe:	4601      	mov	r1, r0
    8b00:	6920      	ldr	r0, [r4, #16]
    8b02:	f7f9 fe07 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8b06:	4605      	mov	r5, r0
    8b08:	b156      	cbz	r6, 8b20 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    8b0a:	2e03      	cmp	r6, #3
    8b0c:	d00d      	beq.n	8b2a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    8b0e:	2e04      	cmp	r6, #4
    8b10:	d00e      	beq.n	8b30 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3c>
    8b12:	2e06      	cmp	r6, #6
    8b14:	d01d      	beq.n	8b52 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    8b16:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    8b1a:	2035      	movs	r0, #53	; 0x35
    8b1c:	f7fc f9d0 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8b20:	2001      	movs	r0, #1
    8b22:	f006 feba 	bl	f89a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    8b26:	3098      	adds	r0, #152	; 0x98
    8b28:	e004      	b.n	8b34 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    8b2a:	f44f 7057 	mov.w	r0, #860	; 0x35c
    8b2e:	e001      	b.n	8b34 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    8b30:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    8b34:	6a61      	ldr	r1, [r4, #36]	; 0x24
    8b36:	4405      	add	r5, r0
    8b38:	39f1      	subs	r1, #241	; 0xf1
    8b3a:	428d      	cmp	r5, r1
    8b3c:	d307      	bcc.n	8b4e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    8b3e:	2600      	movs	r6, #0
    8b40:	f000 fd36 	bl	95b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a4>
    8b44:	b140      	cbz	r0, 8b58 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    8b46:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8b48:	38f1      	subs	r0, #241	; 0xf1
    8b4a:	4285      	cmp	r5, r0
    8b4c:	d203      	bcs.n	8b56 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x62>
    8b4e:	2601      	movs	r6, #1
    8b50:	e002      	b.n	8b58 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    8b52:	2001      	movs	r0, #1
    8b54:	bd70      	pop	{r4, r5, r6, pc}
    8b56:	2600      	movs	r6, #0
    8b58:	4630      	mov	r0, r6
    8b5a:	bd70      	pop	{r4, r5, r6, pc}
    8b5c:	20001338 	.word	0x20001338

00008b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    8b60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8b62:	2501      	movs	r5, #1
    8b64:	4c24      	ldr	r4, [pc, #144]	; (8bf8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    8b66:	2806      	cmp	r0, #6
    8b68:	d243      	bcs.n	8bf2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    8b6a:	e8df f000 	tbb	[pc, r0]
    8b6e:	1903      	.short	0x1903
    8b70:	3e232319 	.word	0x3e232319
    8b74:	f7fe fae4 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8b78:	7860      	ldrb	r0, [r4, #1]
    8b7a:	bb88      	cbnz	r0, 8be0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8b7c:	2200      	movs	r2, #0
    8b7e:	4611      	mov	r1, r2
    8b80:	4668      	mov	r0, sp
    8b82:	f000 fd5f 	bl	9644 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
    8b86:	b148      	cbz	r0, 8b9c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    8b88:	f7fe fd32 	bl	75f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8b8c:	7800      	ldrb	r0, [r0, #0]
    8b8e:	4669      	mov	r1, sp
    8b90:	f006 feb1 	bl	f8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    8b94:	bb20      	cbnz	r0, 8be0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8b96:	f640 2163 	movw	r1, #2659	; 0xa63
    8b9a:	e01c      	b.n	8bd6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    8b9c:	70e5      	strb	r5, [r4, #3]
    8b9e:	e020      	b.n	8be2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    8ba0:	2802      	cmp	r0, #2
    8ba2:	d005      	beq.n	8bb0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    8ba4:	2000      	movs	r0, #0
    8ba6:	b004      	add	sp, #16
    8ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8bac:	f000 ba50 	b.w	9050 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x244>
    8bb0:	2001      	movs	r0, #1
    8bb2:	e7f8      	b.n	8ba6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    8bb4:	2804      	cmp	r0, #4
    8bb6:	d011      	beq.n	8bdc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    8bb8:	f05f 0600 	movs.w	r6, #0
    8bbc:	f7fe fac0 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8bc0:	7725      	strb	r5, [r4, #28]
    8bc2:	7766      	strb	r6, [r4, #29]
    8bc4:	69a1      	ldr	r1, [r4, #24]
    8bc6:	2000      	movs	r0, #0
    8bc8:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    8bcc:	f000 faca 	bl	9164 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x358>
    8bd0:	b130      	cbz	r0, 8be0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    8bd2:	f640 3118 	movw	r1, #2840	; 0xb18
    8bd6:	2035      	movs	r0, #53	; 0x35
    8bd8:	f7fc f972 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8bdc:	2601      	movs	r6, #1
    8bde:	e7ed      	b.n	8bbc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    8be0:	e7ff      	b.n	8be2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    8be2:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8be6:	f000 baad 	b.w	9144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
    8bea:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8bee:	f7fe baa7 	b.w	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8bf2:	f640 31d4 	movw	r1, #3028	; 0xbd4
    8bf6:	e7ee      	b.n	8bd6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    8bf8:	20001338 	.word	0x20001338

00008bfc <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    8bfc:	b508      	push	{r3, lr}
    8bfe:	2244      	movs	r2, #68	; 0x44
    8c00:	2100      	movs	r1, #0
    8c02:	480c      	ldr	r0, [pc, #48]	; (8c34 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    8c04:	f004 fde6 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    8c08:	f7fe fcf2 	bl	75f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8c0c:	2120      	movs	r1, #32
    8c0e:	7001      	strb	r1, [r0, #0]
    8c10:	4808      	ldr	r0, [pc, #32]	; (8c34 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    8c12:	3810      	subs	r0, #16
    8c14:	2100      	movs	r1, #0
    8c16:	6001      	str	r1, [r0, #0]
    8c18:	6041      	str	r1, [r0, #4]
    8c1a:	6081      	str	r1, [r0, #8]
    8c1c:	60c1      	str	r1, [r0, #12]
    8c1e:	f000 f80b 	bl	8c38 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    8c22:	f242 7010 	movw	r0, #10000	; 0x2710
    8c26:	9000      	str	r0, [sp, #0]
    8c28:	2201      	movs	r2, #1
    8c2a:	4669      	mov	r1, sp
    8c2c:	1080      	asrs	r0, r0, #2
    8c2e:	f000 fad7 	bl	91e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d4>
    8c32:	bd08      	pop	{r3, pc}
    8c34:	20001338 	.word	0x20001338

00008c38 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    8c38:	4804      	ldr	r0, [pc, #16]	; (8c4c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x14>)
    8c3a:	b510      	push	{r4, lr}
    8c3c:	7800      	ldrb	r0, [r0, #0]
    8c3e:	b108      	cbz	r0, 8c44 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc>
    8c40:	f000 f8a8 	bl	8d94 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    8c44:	f000 f8fe 	bl	8e44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    8c48:	2000      	movs	r0, #0
    8c4a:	bd10      	pop	{r4, pc}
    8c4c:	20001338 	.word	0x20001338

00008c50 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    8c50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8c54:	4c1e      	ldr	r4, [pc, #120]	; (8cd0 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    8c56:	4607      	mov	r7, r0
    8c58:	460e      	mov	r6, r1
    8c5a:	7820      	ldrb	r0, [r4, #0]
    8c5c:	b118      	cbz	r0, 8c66 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x16>
    8c5e:	200c      	movs	r0, #12
    8c60:	b004      	add	sp, #16
    8c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8c66:	f7fe fcc3 	bl	75f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8c6a:	4605      	mov	r5, r0
    8c6c:	61a7      	str	r7, [r4, #24]
    8c6e:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    8c72:	b110      	cbz	r0, 8c7a <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x2a>
    8c74:	f44f 6184 	mov.w	r1, #1056	; 0x420
    8c78:	e026      	b.n	8cc8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    8c7a:	2005      	movs	r0, #5
    8c7c:	7020      	strb	r0, [r4, #0]
    8c7e:	2000      	movs	r0, #0
    8c80:	7060      	strb	r0, [r4, #1]
    8c82:	7720      	strb	r0, [r4, #28]
    8c84:	4630      	mov	r0, r6
    8c86:	f000 f911 	bl	8eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    8c8a:	f000 fc41 	bl	9510 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x704>
    8c8e:	6320      	str	r0, [r4, #48]	; 0x30
    8c90:	2100      	movs	r1, #0
    8c92:	4810      	ldr	r0, [pc, #64]	; (8cd4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x84>)
    8c94:	f7fa fbf6 	bl	3484 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8c98:	7028      	strb	r0, [r5, #0]
    8c9a:	2820      	cmp	r0, #32
    8c9c:	d00c      	beq.n	8cb8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x68>
    8c9e:	2200      	movs	r2, #0
    8ca0:	2101      	movs	r1, #1
    8ca2:	4668      	mov	r0, sp
    8ca4:	f000 fcce 	bl	9644 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
    8ca8:	b148      	cbz	r0, 8cbe <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6e>
    8caa:	7828      	ldrb	r0, [r5, #0]
    8cac:	4669      	mov	r1, sp
    8cae:	f006 fe22 	bl	f8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    8cb2:	b138      	cbz	r0, 8cc4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    8cb4:	2000      	movs	r0, #0
    8cb6:	e7d3      	b.n	8c60 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    8cb8:	f240 412f 	movw	r1, #1071	; 0x42f
    8cbc:	e004      	b.n	8cc8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    8cbe:	f240 4132 	movw	r1, #1074	; 0x432
    8cc2:	e001      	b.n	8cc8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    8cc4:	f240 4133 	movw	r1, #1075	; 0x433
    8cc8:	2035      	movs	r0, #53	; 0x35
    8cca:	f7fc f8f9 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8cce:	0000      	.short	0x0000
    8cd0:	20001338 	.word	0x20001338
    8cd4:	00008ecd 	.word	0x00008ecd

00008cd8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    8cd8:	4902      	ldr	r1, [pc, #8]	; (8ce4 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    8cda:	6989      	ldr	r1, [r1, #24]
    8cdc:	6001      	str	r1, [r0, #0]
    8cde:	f000 b859 	b.w	8d94 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    8ce2:	0000      	.short	0x0000
    8ce4:	20001338 	.word	0x20001338

00008ce8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    8ce8:	4901      	ldr	r1, [pc, #4]	; (8cf0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    8cea:	7048      	strb	r0, [r1, #1]
    8cec:	4770      	bx	lr
    8cee:	0000      	.short	0x0000
    8cf0:	20001328 	.word	0x20001328

00008cf4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    8cf4:	b570      	push	{r4, r5, r6, lr}
    8cf6:	4605      	mov	r5, r0
    8cf8:	4907      	ldr	r1, [pc, #28]	; (8d18 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x24>)
    8cfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8cfe:	fbb1 f4f0 	udiv	r4, r1, r0
    8d02:	f006 fe48 	bl	f996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    8d06:	1901      	adds	r1, r0, r4
    8d08:	4628      	mov	r0, r5
    8d0a:	f201 1137 	addw	r1, r1, #311	; 0x137
    8d0e:	f006 fbc6 	bl	f49e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    8d12:	b280      	uxth	r0, r0
    8d14:	bd70      	pop	{r4, r5, r6, pc}
    8d16:	0000      	.short	0x0000
    8d18:	00012105 	.word	0x00012105

00008d1c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    8d1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8d1e:	4606      	mov	r6, r0
    8d20:	b111      	cbz	r1, 8d28 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xc>
    8d22:	2011      	movs	r0, #17
    8d24:	b004      	add	sp, #16
    8d26:	bd70      	pop	{r4, r5, r6, pc}
    8d28:	4c18      	ldr	r4, [pc, #96]	; (8d8c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    8d2a:	7820      	ldrb	r0, [r4, #0]
    8d2c:	b108      	cbz	r0, 8d32 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x16>
    8d2e:	200c      	movs	r0, #12
    8d30:	e7f8      	b.n	8d24 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    8d32:	f7fe fc5d 	bl	75f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8d36:	4605      	mov	r5, r0
    8d38:	2000      	movs	r0, #0
    8d3a:	7060      	strb	r0, [r4, #1]
    8d3c:	2004      	movs	r0, #4
    8d3e:	7020      	strb	r0, [r4, #0]
    8d40:	4630      	mov	r0, r6
    8d42:	f000 f8b3 	bl	8eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    8d46:	f000 fbe3 	bl	9510 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x704>
    8d4a:	6320      	str	r0, [r4, #48]	; 0x30
    8d4c:	2100      	movs	r1, #0
    8d4e:	4810      	ldr	r0, [pc, #64]	; (8d90 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x74>)
    8d50:	f7fa fb98 	bl	3484 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    8d54:	7028      	strb	r0, [r5, #0]
    8d56:	2820      	cmp	r0, #32
    8d58:	d00c      	beq.n	8d74 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x58>
    8d5a:	2200      	movs	r2, #0
    8d5c:	2101      	movs	r1, #1
    8d5e:	4668      	mov	r0, sp
    8d60:	f000 fc70 	bl	9644 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
    8d64:	b148      	cbz	r0, 8d7a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5e>
    8d66:	7828      	ldrb	r0, [r5, #0]
    8d68:	4669      	mov	r1, sp
    8d6a:	f006 fdc4 	bl	f8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    8d6e:	b138      	cbz	r0, 8d80 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x64>
    8d70:	2000      	movs	r0, #0
    8d72:	e7d7      	b.n	8d24 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    8d74:	f240 4196 	movw	r1, #1174	; 0x496
    8d78:	e004      	b.n	8d84 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    8d7a:	f44f 6193 	mov.w	r1, #1176	; 0x498
    8d7e:	e001      	b.n	8d84 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    8d80:	f240 4199 	movw	r1, #1177	; 0x499
    8d84:	2035      	movs	r0, #53	; 0x35
    8d86:	f7fc f89b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d8a:	0000      	.short	0x0000
    8d8c:	20001338 	.word	0x20001338
    8d90:	00008ecd 	.word	0x00008ecd

00008d94 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    8d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d98:	2700      	movs	r7, #0
    8d9a:	f7fe fc29 	bl	75f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8d9e:	4c17      	ldr	r4, [pc, #92]	; (8dfc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x68>)
    8da0:	4605      	mov	r5, r0
    8da2:	7820      	ldrb	r0, [r4, #0]
    8da4:	2804      	cmp	r0, #4
    8da6:	d005      	beq.n	8db4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    8da8:	7820      	ldrb	r0, [r4, #0]
    8daa:	2805      	cmp	r0, #5
    8dac:	d002      	beq.n	8db4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    8dae:	200c      	movs	r0, #12
    8db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8db4:	2001      	movs	r0, #1
    8db6:	7060      	strb	r0, [r4, #1]
    8db8:	7b20      	ldrb	r0, [r4, #12]
    8dba:	b160      	cbz	r0, 8dd6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    8dbc:	f3ef 8610 	mrs	r6, PRIMASK
    8dc0:	b672      	cpsid	i
    8dc2:	7b20      	ldrb	r0, [r4, #12]
    8dc4:	b128      	cbz	r0, 8dd2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    8dc6:	7b60      	ldrb	r0, [r4, #13]
    8dc8:	b118      	cbz	r0, 8dd2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    8dca:	f7fe fde3 	bl	7994 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    8dce:	f000 f9b9 	bl	9144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
    8dd2:	b126      	cbz	r6, 8dde <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    8dd4:	e004      	b.n	8de0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    8dd6:	7828      	ldrb	r0, [r5, #0]
    8dd8:	f7fa f90a 	bl	2ff0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    8ddc:	e000      	b.n	8de0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    8dde:	b662      	cpsie	i
    8de0:	7828      	ldrb	r0, [r5, #0]
    8de2:	f7fa fa43 	bl	326c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8de6:	f000 fd5d 	bl	98a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa98>
    8dea:	2000      	movs	r0, #0
    8dec:	7060      	strb	r0, [r4, #1]
    8dee:	7f20      	ldrb	r0, [r4, #28]
    8df0:	b100      	cbz	r0, 8df4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x60>
    8df2:	270c      	movs	r7, #12
    8df4:	f000 fd80 	bl	98f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>
    8df8:	4638      	mov	r0, r7
    8dfa:	e7d9      	b.n	8db0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    8dfc:	20001338 	.word	0x20001338

00008e00 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    8e00:	4801      	ldr	r0, [pc, #4]	; (8e08 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    8e02:	7800      	ldrb	r0, [r0, #0]
    8e04:	4770      	bx	lr
    8e06:	0000      	.short	0x0000
    8e08:	20001338 	.word	0x20001338

00008e0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    8e0c:	490c      	ldr	r1, [pc, #48]	; (8e40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    8e0e:	b508      	push	{r3, lr}
    8e10:	7809      	ldrb	r1, [r1, #0]
    8e12:	b121      	cbz	r1, 8e1e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    8e14:	f240 414f 	movw	r1, #1103	; 0x44f
    8e18:	2035      	movs	r0, #53	; 0x35
    8e1a:	f7fc f851 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e1e:	2300      	movs	r3, #0
    8e20:	9300      	str	r3, [sp, #0]
    8e22:	7801      	ldrb	r1, [r0, #0]
    8e24:	461a      	mov	r2, r3
    8e26:	07c9      	lsls	r1, r1, #31
    8e28:	d003      	beq.n	8e32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    8e2a:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    8e2e:	2201      	movs	r2, #1
    8e30:	9000      	str	r0, [sp, #0]
    8e32:	4669      	mov	r1, sp
    8e34:	4618      	mov	r0, r3
    8e36:	f000 f9d3 	bl	91e0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d4>
    8e3a:	2000      	movs	r0, #0
    8e3c:	bd08      	pop	{r3, pc}
    8e3e:	0000      	.short	0x0000
    8e40:	20001338 	.word	0x20001338
    8e44:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    8e46:	4c18      	ldr	r4, [pc, #96]	; (8ea8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>)
    8e48:	2001      	movs	r0, #1
    8e4a:	7020      	strb	r0, [r4, #0]
    8e4c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    8e50:	e00b      	b.n	8e6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e>
    8e52:	2100      	movs	r1, #0
    8e54:	f005 fce5 	bl	e822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    8e58:	0006      	movs	r6, r0
    8e5a:	d010      	beq.n	8e7e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72>
    8e5c:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    8e60:	f7fa fa04 	bl	326c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    8e64:	4630      	mov	r0, r6
    8e66:	f006 fd5e 	bl	f926 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    8e6a:	4669      	mov	r1, sp
    8e6c:	2000      	movs	r0, #0
    8e6e:	f005 fce1 	bl	e834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    8e72:	b180      	cbz	r0, 8e96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    8e74:	f44f 710f 	mov.w	r1, #572	; 0x23c
    8e78:	2035      	movs	r0, #53	; 0x35
    8e7a:	f7fc f821 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8e7e:	f240 5141 	movw	r1, #1345	; 0x541
    8e82:	e7f9      	b.n	8e78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c>
    8e84:	9802      	ldr	r0, [sp, #8]
    8e86:	b130      	cbz	r0, 8e96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    8e88:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    8e8c:	b119      	cbz	r1, 8e96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    8e8e:	8800      	ldrh	r0, [r0, #0]
    8e90:	42a8      	cmp	r0, r5
    8e92:	d1de      	bne.n	8e52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x46>
    8e94:	e004      	b.n	8ea0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x94>
    8e96:	4668      	mov	r0, sp
    8e98:	f7fc fa42 	bl	5320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    8e9c:	2800      	cmp	r0, #0
    8e9e:	d0f1      	beq.n	8e84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78>
    8ea0:	2000      	movs	r0, #0
    8ea2:	7020      	strb	r0, [r4, #0]
    8ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    8ea6:	0000      	.short	0x0000
    8ea8:	20001328 	.word	0x20001328
    8eac:	4906      	ldr	r1, [pc, #24]	; (8ec8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>)
    8eae:	b140      	cbz	r0, 8ec2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb6>
    8eb0:	2201      	movs	r2, #1
    8eb2:	708a      	strb	r2, [r1, #2]
    8eb4:	f242 7210 	movw	r2, #10000	; 0x2710
    8eb8:	4350      	muls	r0, r2
    8eba:	684a      	ldr	r2, [r1, #4]
    8ebc:	4410      	add	r0, r2
    8ebe:	6208      	str	r0, [r1, #32]
    8ec0:	4770      	bx	lr
    8ec2:	2000      	movs	r0, #0
    8ec4:	7088      	strb	r0, [r1, #2]
    8ec6:	4770      	bx	lr
    8ec8:	20001338 	.word	0x20001338
    8ecc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    8ece:	460d      	mov	r5, r1
    8ed0:	2001      	movs	r0, #1
    8ed2:	f006 fccb 	bl	f86c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8ed6:	b2c4      	uxtb	r4, r0
    8ed8:	200b      	movs	r0, #11
    8eda:	f006 fcc7 	bl	f86c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8ede:	b2c0      	uxtb	r0, r0
    8ee0:	4284      	cmp	r4, r0
    8ee2:	d002      	beq.n	8eea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xde>
    8ee4:	f240 21c5 	movw	r1, #709	; 0x2c5
    8ee8:	e073      	b.n	8fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    8eea:	f7fe fb81 	bl	75f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    8eee:	2601      	movs	r6, #1
    8ef0:	4c3b      	ldr	r4, [pc, #236]	; (8fe0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    8ef2:	2d09      	cmp	r5, #9
    8ef4:	d270      	bcs.n	8fd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    8ef6:	e8df f005 	tbb	[pc, r5]
    8efa:	3605      	.short	0x3605
    8efc:	6f464a4a 	.word	0x6f464a4a
    8f00:	006a665e 	.word	0x006a665e
    8f04:	7326      	strb	r6, [r4, #12]
    8f06:	7861      	ldrb	r1, [r4, #1]
    8f08:	2900      	cmp	r1, #0
    8f0a:	d12b      	bne.n	8f64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    8f0c:	7800      	ldrb	r0, [r0, #0]
    8f0e:	f7f9 fc25 	bl	275c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    8f12:	4605      	mov	r5, r0
    8f14:	6120      	str	r0, [r4, #16]
    8f16:	f000 fd09 	bl	992c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb20>
    8f1a:	b118      	cbz	r0, 8f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    8f1c:	2000      	movs	r0, #0
    8f1e:	f88d 0004 	strb.w	r0, [sp, #4]
    8f22:	e001      	b.n	8f28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>
    8f24:	f88d 6004 	strb.w	r6, [sp, #4]
    8f28:	4629      	mov	r1, r5
    8f2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8f2c:	f7f9 fbf2 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8f30:	6861      	ldr	r1, [r4, #4]
    8f32:	fbb0 f2f1 	udiv	r2, r0, r1
    8f36:	fb01 0012 	mls	r0, r1, r2, r0
    8f3a:	b150      	cbz	r0, 8f52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x146>
    8f3c:	f05f 0000 	movs.w	r0, #0
    8f40:	f88d 0005 	strb.w	r0, [sp, #5]
    8f44:	4668      	mov	r0, sp
    8f46:	f7fe fc8d 	bl	7864 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    8f4a:	b120      	cbz	r0, 8f56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14a>
    8f4c:	f240 21ff 	movw	r1, #767	; 0x2ff
    8f50:	e03f      	b.n	8fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    8f52:	2001      	movs	r0, #1
    8f54:	e7f4      	b.n	8f40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x134>
    8f56:	4922      	ldr	r1, [pc, #136]	; (8fe0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    8f58:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8f5a:	3910      	subs	r1, #16
    8f5c:	38e0      	subs	r0, #224	; 0xe0
    8f5e:	60c8      	str	r0, [r1, #12]
    8f60:	f7fa fb9a 	bl	3698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    8f64:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8f66:	7860      	ldrb	r0, [r4, #1]
    8f68:	b128      	cbz	r0, 8f76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
    8f6a:	f7fe fd13 	bl	7994 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    8f6e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8f72:	f000 b8e7 	b.w	9144 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x338>
    8f76:	7366      	strb	r6, [r4, #13]
    8f78:	f7fe fd06 	bl	7988 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    8f7c:	2800      	cmp	r0, #0
    8f7e:	d0f1      	beq.n	8f64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    8f80:	f240 3112 	movw	r1, #786	; 0x312
    8f84:	e025      	b.n	8fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    8f86:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8f8a:	f003 bea9 	b.w	cce0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    8f8e:	7805      	ldrb	r5, [r0, #0]
    8f90:	2201      	movs	r2, #1
    8f92:	2100      	movs	r1, #0
    8f94:	4668      	mov	r0, sp
    8f96:	f000 fb55 	bl	9644 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x838>
    8f9a:	b140      	cbz	r0, 8fae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a2>
    8f9c:	4669      	mov	r1, sp
    8f9e:	4628      	mov	r0, r5
    8fa0:	f006 fca9 	bl	f8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    8fa4:	2800      	cmp	r0, #0
    8fa6:	d1dd      	bne.n	8f64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    8fa8:	f640 217f 	movw	r1, #2687	; 0xa7f
    8fac:	e011      	b.n	8fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    8fae:	70e6      	strb	r6, [r4, #3]
    8fb0:	f000 f818 	bl	8fe4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    8fb4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    8fb6:	f000 fafb 	bl	95b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a4>
    8fba:	2800      	cmp	r0, #0
    8fbc:	d1fa      	bne.n	8fb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    8fbe:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8fc2:	f006 bb3c 	b.w	f63e <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    8fc6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    8fca:	f000 b80b 	b.w	8fe4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    8fce:	f240 3136 	movw	r1, #822	; 0x336
    8fd2:	2035      	movs	r0, #53	; 0x35
    8fd4:	f7fb ff74 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8fd8:	f240 313a 	movw	r1, #826	; 0x33a
    8fdc:	e7f9      	b.n	8fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    8fde:	0000      	.short	0x0000
    8fe0:	20001338 	.word	0x20001338
    8fe4:	b510      	push	{r4, lr}
    8fe6:	4c0b      	ldr	r4, [pc, #44]	; (9014 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x208>)
    8fe8:	7820      	ldrb	r0, [r4, #0]
    8fea:	b130      	cbz	r0, 8ffa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ee>
    8fec:	f000 fc5a 	bl	98a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa98>
    8ff0:	78e0      	ldrb	r0, [r4, #3]
    8ff2:	b158      	cbz	r0, 900c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    8ff4:	7f20      	ldrb	r0, [r4, #28]
    8ff6:	b128      	cbz	r0, 9004 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1f8>
    8ff8:	e008      	b.n	900c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x200>
    8ffa:	f240 21b1 	movw	r1, #689	; 0x2b1
    8ffe:	2035      	movs	r0, #53	; 0x35
    9000:	f7fb ff5e 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9004:	f7fe fcd8 	bl	79b8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    9008:	f7fe f89a 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    900c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9010:	f000 bc72 	b.w	98f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xaec>
    9014:	20001338 	.word	0x20001338
    9018:	b510      	push	{r4, lr}
    901a:	4604      	mov	r4, r0
    901c:	2901      	cmp	r1, #1
    901e:	d102      	bne.n	9026 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x21a>
    9020:	480a      	ldr	r0, [pc, #40]	; (904c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x240>)
    9022:	7800      	ldrb	r0, [r0, #0]
    9024:	b140      	cbz	r0, 9038 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x22c>
    9026:	2004      	movs	r0, #4
    9028:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    902c:	f003 fca4 	bl	c978 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    9030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9034:	f7fa ba4e 	b.w	34d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9038:	2200      	movs	r2, #0
    903a:	2101      	movs	r1, #1
    903c:	4620      	mov	r0, r4
    903e:	f006 fc8a 	bl	f956 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    9042:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    9046:	1c40      	adds	r0, r0, #1
    9048:	8020      	strh	r0, [r4, #0]
    904a:	e7ef      	b.n	902c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x220>
    904c:	20001328 	.word	0x20001328
    9050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9054:	4c39      	ldr	r4, [pc, #228]	; (913c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x330>)
    9056:	4682      	mov	sl, r0
    9058:	6926      	ldr	r6, [r4, #16]
    905a:	f003 fc51 	bl	c900 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    905e:	4605      	mov	r5, r0
    9060:	69a0      	ldr	r0, [r4, #24]
    9062:	2201      	movs	r2, #1
    9064:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    9068:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    906c:	3062      	adds	r0, #98	; 0x62
    906e:	2101      	movs	r1, #1
    9070:	7281      	strb	r1, [r0, #10]
    9072:	69a0      	ldr	r0, [r4, #24]
    9074:	2100      	movs	r1, #0
    9076:	302c      	adds	r0, #44	; 0x2c
    9078:	f006 f9f8 	bl	f46c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    907c:	2101      	movs	r1, #1
    907e:	2000      	movs	r0, #0
    9080:	f006 fc95 	bl	f9ae <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    9084:	69a7      	ldr	r7, [r4, #24]
    9086:	1971      	adds	r1, r6, r5
    9088:	4408      	add	r0, r1
    908a:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    908e:	f8d7 800c 	ldr.w	r8, [r7, #12]
    9092:	f002 fb67 	bl	b764 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    9096:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    909a:	4288      	cmp	r0, r1
    909c:	d00a      	beq.n	90b4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2a8>
    909e:	464a      	mov	r2, r9
    90a0:	4641      	mov	r1, r8
    90a2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    90a6:	f006 fdb0 	bl	fc0a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    90aa:	4540      	cmp	r0, r8
    90ac:	d903      	bls.n	90b6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2aa>
    90ae:	f240 51f6 	movw	r1, #1526	; 0x5f6
    90b2:	e022      	b.n	90fa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2ee>
    90b4:	2000      	movs	r0, #0
    90b6:	4922      	ldr	r1, [pc, #136]	; (9140 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x334>)
    90b8:	4607      	mov	r7, r0
    90ba:	6849      	ldr	r1, [r1, #4]
    90bc:	4288      	cmp	r0, r1
    90be:	69a0      	ldr	r0, [r4, #24]
    90c0:	68c1      	ldr	r1, [r0, #12]
    90c2:	d202      	bcs.n	90ca <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2be>
    90c4:	440f      	add	r7, r1
    90c6:	6201      	str	r1, [r0, #32]
    90c8:	e008      	b.n	90dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2d0>
    90ca:	4638      	mov	r0, r7
    90cc:	f005 fee5 	bl	ee9a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    90d0:	69a1      	ldr	r1, [r4, #24]
    90d2:	68c9      	ldr	r1, [r1, #12]
    90d4:	f005 fedd 	bl	ee92 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    90d8:	69a1      	ldr	r1, [r4, #24]
    90da:	6208      	str	r0, [r1, #32]
    90dc:	69a0      	ldr	r0, [r4, #24]
    90de:	68c1      	ldr	r1, [r0, #12]
    90e0:	2005      	movs	r0, #5
    90e2:	f005 fee0 	bl	eea6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    90e6:	69a1      	ldr	r1, [r4, #24]
    90e8:	b280      	uxth	r0, r0
    90ea:	8388      	strh	r0, [r1, #28]
    90ec:	69a1      	ldr	r1, [r4, #24]
    90ee:	6a09      	ldr	r1, [r1, #32]
    90f0:	1a79      	subs	r1, r7, r1
    90f2:	4288      	cmp	r0, r1
    90f4:	d804      	bhi.n	9100 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x2f4>
    90f6:	f640 21ee 	movw	r1, #2798	; 0xaee
    90fa:	2035      	movs	r0, #53	; 0x35
    90fc:	f7fb fee0 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9100:	2101      	movs	r1, #1
    9102:	4650      	mov	r0, sl
    9104:	f006 fc53 	bl	f9ae <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    9108:	4428      	add	r0, r5
    910a:	19c5      	adds	r5, r0, r7
    910c:	2101      	movs	r1, #1
    910e:	4650      	mov	r0, sl
    9110:	f005 fdf5 	bl	ecfe <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    9114:	4405      	add	r5, r0
    9116:	2001      	movs	r0, #1
    9118:	f007 fd0d 	bl	10b36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    911c:	f64a 2113 	movw	r1, #43539	; 0xaa13
    9120:	4408      	add	r0, r1
    9122:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    9126:	fbb0 f0f1 	udiv	r0, r0, r1
    912a:	1a29      	subs	r1, r5, r0
    912c:	4630      	mov	r0, r6
    912e:	f7f9 fabf 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9132:	69a1      	ldr	r1, [r4, #24]
    9134:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    9138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    913c:	20001338 	.word	0x20001338
    9140:	20000114 	.word	0x20000114
    9144:	b510      	push	{r4, lr}
    9146:	4c06      	ldr	r4, [pc, #24]	; (9160 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x354>)
    9148:	7b20      	ldrb	r0, [r4, #12]
    914a:	2800      	cmp	r0, #0
    914c:	d006      	beq.n	915c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x350>
    914e:	f003 fc13 	bl	c978 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    9152:	f7fa f9bf 	bl	34d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    9156:	2000      	movs	r0, #0
    9158:	7320      	strb	r0, [r4, #12]
    915a:	7360      	strb	r0, [r4, #13]
    915c:	bd10      	pop	{r4, pc}
    915e:	0000      	.short	0x0000
    9160:	20001338 	.word	0x20001338
    9164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    9166:	4c1c      	ldr	r4, [pc, #112]	; (91d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3cc>)
    9168:	7820      	ldrb	r0, [r4, #0]
    916a:	2805      	cmp	r0, #5
    916c:	d002      	beq.n	9174 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x368>
    916e:	200c      	movs	r0, #12
    9170:	b004      	add	sp, #16
    9172:	bd10      	pop	{r4, pc}
    9174:	69a1      	ldr	r1, [r4, #24]
    9176:	b129      	cbz	r1, 9184 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x378>
    9178:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    917c:	b128      	cbz	r0, 918a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x37e>
    917e:	f240 41fa 	movw	r1, #1274	; 0x4fa
    9182:	e025      	b.n	91d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    9184:	f240 41f9 	movw	r1, #1273	; 0x4f9
    9188:	e022      	b.n	91d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    918a:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    918e:	2820      	cmp	r0, #32
    9190:	d002      	beq.n	9198 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38c>
    9192:	f240 41fc 	movw	r1, #1276	; 0x4fc
    9196:	e01b      	b.n	91d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    9198:	4810      	ldr	r0, [pc, #64]	; (91dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3d0>)
    919a:	f7fa f973 	bl	3484 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    919e:	69a1      	ldr	r1, [r4, #24]
    91a0:	2820      	cmp	r0, #32
    91a2:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    91a6:	d00e      	beq.n	91c6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ba>
    91a8:	2300      	movs	r3, #0
    91aa:	2201      	movs	r2, #1
    91ac:	4668      	mov	r0, sp
    91ae:	f000 f8bd 	bl	932c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x520>
    91b2:	69a0      	ldr	r0, [r4, #24]
    91b4:	4669      	mov	r1, sp
    91b6:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    91ba:	f006 fb9c 	bl	f8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    91be:	b128      	cbz	r0, 91cc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c0>
    91c0:	2000      	movs	r0, #0
    91c2:	61a0      	str	r0, [r4, #24]
    91c4:	e7d4      	b.n	9170 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x364>
    91c6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    91ca:	e001      	b.n	91d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3c4>
    91cc:	f240 5103 	movw	r1, #1283	; 0x503
    91d0:	2035      	movs	r0, #53	; 0x35
    91d2:	f7fb fe75 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    91d6:	0000      	.short	0x0000
    91d8:	20001338 	.word	0x20001338
    91dc:	00009235 	.word	0x00009235
    91e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91e4:	4d11      	ldr	r5, [pc, #68]	; (922c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x420>)
    91e6:	4616      	mov	r6, r2
    91e8:	460f      	mov	r7, r1
    91ea:	2400      	movs	r4, #0
    91ec:	6068      	str	r0, [r5, #4]
    91ee:	f006 fbd2 	bl	f996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    91f2:	f8df c03c 	ldr.w	ip, [pc, #60]	; 9230 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x424>
    91f6:	2100      	movs	r1, #0
    91f8:	f81c 2001 	ldrb.w	r2, [ip, r1]
    91fc:	4232      	tst	r2, r6
    91fe:	d007      	beq.n	9210 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x404>
    9200:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    9204:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    9208:	1a1b      	subs	r3, r3, r0
    920a:	1c64      	adds	r4, r4, #1
    920c:	b2e4      	uxtb	r4, r4
    920e:	6093      	str	r3, [r2, #8]
    9210:	1c49      	adds	r1, r1, #1
    9212:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    9216:	d0ef      	beq.n	91f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x3ec>
    9218:	f016 0f0e 	tst.w	r6, #14
    921c:	d004      	beq.n	9228 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x41c>
    921e:	f640 11b6 	movw	r1, #2486	; 0x9b6
    9222:	2035      	movs	r0, #53	; 0x35
    9224:	f7fb fe4c 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    922c:	20001338 	.word	0x20001338
    9230:	00010cad 	.word	0x00010cad
    9234:	b570      	push	{r4, r5, r6, lr}
    9236:	460d      	mov	r5, r1
    9238:	0004      	movs	r4, r0
    923a:	d00c      	beq.n	9256 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x44a>
    923c:	2001      	movs	r0, #1
    923e:	f006 fb15 	bl	f86c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    9242:	b2c6      	uxtb	r6, r0
    9244:	200b      	movs	r0, #11
    9246:	f006 fb11 	bl	f86c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    924a:	b2c0      	uxtb	r0, r0
    924c:	4286      	cmp	r6, r0
    924e:	d005      	beq.n	925c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x450>
    9250:	f240 215f 	movw	r1, #607	; 0x25f
    9254:	e061      	b.n	931a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
    9256:	f44f 7117 	mov.w	r1, #604	; 0x25c
    925a:	e05e      	b.n	931a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
    925c:	2d09      	cmp	r5, #9
    925e:	d25f      	bcs.n	9320 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x514>
    9260:	e8df f005 	tbb	[pc, r5]
    9264:	3d3d3505 	.word	0x3d3d3505
    9268:	4b445e39 	.word	0x4b445e39
    926c:	0059      	.short	0x0059
    926e:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    9272:	b348      	cbz	r0, 92c8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4bc>
    9274:	4620      	mov	r0, r4
    9276:	f000 fd69 	bl	9d4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    927a:	f006 fb8c 	bl	f996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    927e:	f500 709c 	add.w	r0, r0, #312	; 0x138
    9282:	b285      	uxth	r5, r0
    9284:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    9288:	2128      	movs	r1, #40	; 0x28
    928a:	f006 fb20 	bl	f8ce <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3a>
    928e:	182e      	adds	r6, r5, r0
    9290:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    9292:	68e0      	ldr	r0, [r4, #12]
    9294:	4288      	cmp	r0, r1
    9296:	d200      	bcs.n	929a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x48e>
    9298:	4601      	mov	r1, r0
    929a:	4632      	mov	r2, r6
    929c:	4620      	mov	r0, r4
    929e:	f006 f86e 	bl	f37e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    92a2:	4d21      	ldr	r5, [pc, #132]	; (9328 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x51c>)
    92a4:	4632      	mov	r2, r6
    92a6:	6068      	str	r0, [r5, #4]
    92a8:	4620      	mov	r0, r4
    92aa:	68e1      	ldr	r1, [r4, #12]
    92ac:	f006 f867 	bl	f37e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    92b0:	60a8      	str	r0, [r5, #8]
    92b2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    92b6:	f006 f8c3 	bl	f440 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    92ba:	f2a0 1027 	subw	r0, r0, #295	; 0x127
    92be:	60e8      	str	r0, [r5, #12]
    92c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92c4:	f7fa b9e8 	b.w	3698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    92c8:	f240 2165 	movw	r1, #613	; 0x265
    92cc:	e025      	b.n	931a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
    92ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92d2:	f006 bbf2 	b.w	faba <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    92d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92da:	f003 bd01 	b.w	cce0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    92de:	4620      	mov	r0, r4
    92e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92e4:	2201      	movs	r2, #1
    92e6:	2100      	movs	r1, #0
    92e8:	f006 bb35 	b.w	f956 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    92ec:	2001      	movs	r0, #1
    92ee:	f7f9 f8b3 	bl	2458 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    92f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    92f6:	f005 bb74 	b.w	e9e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    92fa:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    92fe:	2804      	cmp	r0, #4
    9300:	d002      	beq.n	9308 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x4fc>
    9302:	f240 2199 	movw	r1, #665	; 0x299
    9306:	e008      	b.n	931a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
    9308:	4620      	mov	r0, r4
    930a:	f006 fb0c 	bl	f926 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    930e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9312:	f7fd bf15 	b.w	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9316:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    931a:	2035      	movs	r0, #53	; 0x35
    931c:	f7fb fdd0 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9320:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    9324:	e7f9      	b.n	931a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x50e>
    9326:	0000      	.short	0x0000
    9328:	20001328 	.word	0x20001328
    932c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    9330:	4605      	mov	r5, r0
    9332:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9336:	2600      	movs	r6, #0
    9338:	f8d1 b020 	ldr.w	fp, [r1, #32]
    933c:	469a      	mov	sl, r3
    933e:	460c      	mov	r4, r1
    9340:	280d      	cmp	r0, #13
    9342:	d020      	beq.n	9386 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
    9344:	280c      	cmp	r0, #12
    9346:	d01e      	beq.n	9386 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
    9348:	2824      	cmp	r0, #36	; 0x24
    934a:	d01c      	beq.n	9386 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
    934c:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    9350:	2824      	cmp	r0, #36	; 0x24
    9352:	d018      	beq.n	9386 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57a>
    9354:	2000      	movs	r0, #0
    9356:	4680      	mov	r8, r0
    9358:	f006 fb12 	bl	f980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    935c:	4681      	mov	r9, r0
    935e:	f1ba 0f00 	cmp.w	sl, #0
    9362:	d003      	beq.n	936c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x560>
    9364:	2101      	movs	r1, #1
    9366:	4620      	mov	r0, r4
    9368:	f006 fb4e 	bl	fa08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    936c:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    9370:	2701      	movs	r7, #1
    9372:	b150      	cbz	r0, 938a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x57e>
    9374:	2801      	cmp	r0, #1
    9376:	d01b      	beq.n	93b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
    9378:	2802      	cmp	r0, #2
    937a:	d011      	beq.n	93a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x594>
    937c:	2803      	cmp	r0, #3
    937e:	d017      	beq.n	93b0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a4>
    9380:	f640 1139 	movw	r1, #2361	; 0x939
    9384:	e07b      	b.n	947e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x672>
    9386:	2001      	movs	r0, #1
    9388:	e7e5      	b.n	9356 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x54a>
    938a:	9802      	ldr	r0, [sp, #8]
    938c:	b128      	cbz	r0, 939a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x58e>
    938e:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    9392:	4620      	mov	r0, r4
    9394:	f006 fa9d 	bl	f8d2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    9398:	e00b      	b.n	93b2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a6>
    939a:	f640 01ff 	movw	r1, #2303	; 0x8ff
    939e:	e06e      	b.n	947e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x672>
    93a0:	4838      	ldr	r0, [pc, #224]	; (9484 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x678>)
    93a2:	6801      	ldr	r1, [r0, #0]
    93a4:	2003      	movs	r0, #3
    93a6:	eb01 060b 	add.w	r6, r1, fp
    93aa:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    93ae:	e000      	b.n	93b2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5a6>
    93b0:	68e6      	ldr	r6, [r4, #12]
    93b2:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    93b6:	4631      	mov	r1, r6
    93b8:	f7f9 f97a 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    93bc:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    93c0:	60e8      	str	r0, [r5, #12]
    93c2:	2000      	movs	r0, #0
    93c4:	7028      	strb	r0, [r5, #0]
    93c6:	f8a5 9008 	strh.w	r9, [r5, #8]
    93ca:	4620      	mov	r0, r4
    93cc:	f000 fc0c 	bl	9be8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    93d0:	f1a8 0101 	sub.w	r1, r8, #1
    93d4:	4208      	tst	r0, r1
    93d6:	d101      	bne.n	93dc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5d0>
    93d8:	72af      	strb	r7, [r5, #10]
    93da:	e005      	b.n	93e8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5dc>
    93dc:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    93e0:	2801      	cmp	r0, #1
    93e2:	d017      	beq.n	9414 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x608>
    93e4:	2003      	movs	r0, #3
    93e6:	72a8      	strb	r0, [r5, #10]
    93e8:	46b9      	mov	r9, r7
    93ea:	72ef      	strb	r7, [r5, #11]
    93ec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    93f0:	f006 f826 	bl	f440 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    93f4:	6068      	str	r0, [r5, #4]
    93f6:	f1ba 0f00 	cmp.w	sl, #0
    93fa:	d03c      	beq.n	9476 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
    93fc:	4631      	mov	r1, r6
    93fe:	4628      	mov	r0, r5
    9400:	f005 fcdc 	bl	edbc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9404:	b287      	uxth	r7, r0
    9406:	4620      	mov	r0, r4
    9408:	f000 fbee 	bl	9be8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    940c:	f1b8 0f00 	cmp.w	r8, #0
    9410:	d002      	beq.n	9418 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x60c>
    9412:	e014      	b.n	943e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x632>
    9414:	2002      	movs	r0, #2
    9416:	e7e6      	b.n	93e6 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5da>
    9418:	42b8      	cmp	r0, r7
    941a:	d810      	bhi.n	943e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x632>
    941c:	4607      	mov	r7, r0
    941e:	f885 900a 	strb.w	r9, [r5, #10]
    9422:	fb06 f107 	mul.w	r1, r6, r7
    9426:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    942a:	f7f9 f941 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    942e:	60e8      	str	r0, [r5, #12]
    9430:	b31e      	cbz	r6, 947a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66e>
    9432:	4631      	mov	r1, r6
    9434:	4628      	mov	r0, r5
    9436:	f005 fcc1 	bl	edbc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    943a:	4438      	add	r0, r7
    943c:	b287      	uxth	r7, r0
    943e:	4639      	mov	r1, r7
    9440:	4620      	mov	r0, r4
    9442:	f006 fae1 	bl	fa08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    9446:	68e8      	ldr	r0, [r5, #12]
    9448:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    944c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    944e:	2800      	cmp	r0, #0
    9450:	d011      	beq.n	9476 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
    9452:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    9456:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    945a:	1a40      	subs	r0, r0, r1
    945c:	b202      	sxth	r2, r0
    945e:	2a00      	cmp	r2, #0
    9460:	dd09      	ble.n	9476 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x66a>
    9462:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    9466:	4402      	add	r2, r0
    9468:	1e52      	subs	r2, r2, #1
    946a:	fb92 f2f0 	sdiv	r2, r2, r0
    946e:	b292      	uxth	r2, r2
    9470:	fb02 1000 	mla	r0, r2, r0, r1
    9474:	86e0      	strh	r0, [r4, #54]	; 0x36
    9476:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    947a:	f640 1174 	movw	r1, #2420	; 0x974
    947e:	2035      	movs	r0, #53	; 0x35
    9480:	f7fb fd1e 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9484:	20000114 	.word	0x20000114
    9488:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    948c:	460d      	mov	r5, r1
    948e:	4607      	mov	r7, r0
    9490:	f000 fa58 	bl	9944 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
    9494:	4c1d      	ldr	r4, [pc, #116]	; (950c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x700>)
    9496:	6861      	ldr	r1, [r4, #4]
    9498:	f7f9 f90a 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    949c:	4606      	mov	r6, r0
    949e:	4601      	mov	r1, r0
    94a0:	4638      	mov	r0, r7
    94a2:	f7f9 f937 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    94a6:	4607      	mov	r7, r0
    94a8:	f006 fa7b 	bl	f9a2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    94ac:	4287      	cmp	r7, r0
    94ae:	da10      	bge.n	94d2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c6>
    94b0:	6960      	ldr	r0, [r4, #20]
    94b2:	f000 fa47 	bl	9944 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
    94b6:	4631      	mov	r1, r6
    94b8:	f7f9 f92c 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    94bc:	6861      	ldr	r1, [r4, #4]
    94be:	fbb0 f0f1 	udiv	r0, r0, r1
    94c2:	6028      	str	r0, [r5, #0]
    94c4:	6861      	ldr	r1, [r4, #4]
    94c6:	b004      	add	sp, #16
    94c8:	4630      	mov	r0, r6
    94ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    94ce:	f7f9 b8ef 	b.w	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    94d2:	2000      	movs	r0, #0
    94d4:	f88d 0000 	strb.w	r0, [sp]
    94d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    94da:	9001      	str	r0, [sp, #4]
    94dc:	f006 fa50 	bl	f980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    94e0:	f8ad 0008 	strh.w	r0, [sp, #8]
    94e4:	2001      	movs	r0, #1
    94e6:	f88d 000b 	strb.w	r0, [sp, #11]
    94ea:	6960      	ldr	r0, [r4, #20]
    94ec:	f000 fa2a 	bl	9944 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
    94f0:	9003      	str	r0, [sp, #12]
    94f2:	f000 f9c1 	bl	9878 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa6c>
    94f6:	f88d 000a 	strb.w	r0, [sp, #10]
    94fa:	4668      	mov	r0, sp
    94fc:	6861      	ldr	r1, [r4, #4]
    94fe:	f005 fc5d 	bl	edbc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    9502:	6028      	str	r0, [r5, #0]
    9504:	9803      	ldr	r0, [sp, #12]
    9506:	b004      	add	sp, #16
    9508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    950c:	20001338 	.word	0x20001338
    9510:	b510      	push	{r4, lr}
    9512:	2400      	movs	r4, #0
    9514:	f006 fa3f 	bl	f996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    9518:	4a06      	ldr	r2, [pc, #24]	; (9534 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x728>)
    951a:	2100      	movs	r1, #0
    951c:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    9520:	4404      	add	r4, r0
    9522:	689b      	ldr	r3, [r3, #8]
    9524:	1c49      	adds	r1, r1, #1
    9526:	441c      	add	r4, r3
    9528:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    952c:	d0f6      	beq.n	951c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x710>
    952e:	4620      	mov	r0, r4
    9530:	bd10      	pop	{r4, pc}
    9532:	0000      	.short	0x0000
    9534:	20001338 	.word	0x20001338
    9538:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    953a:	4c1b      	ldr	r4, [pc, #108]	; (95a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x79c>)
    953c:	4606      	mov	r6, r0
    953e:	460d      	mov	r5, r1
    9540:	78a0      	ldrb	r0, [r4, #2]
    9542:	b360      	cbz	r0, 959e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x792>
    9544:	4919      	ldr	r1, [pc, #100]	; (95ac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7a0>)
    9546:	6a20      	ldr	r0, [r4, #32]
    9548:	4288      	cmp	r0, r1
    954a:	d828      	bhi.n	959e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x792>
    954c:	2000      	movs	r0, #0
    954e:	f88d 0000 	strb.w	r0, [sp]
    9552:	9501      	str	r5, [sp, #4]
    9554:	f006 fa14 	bl	f980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    9558:	f8ad 0008 	strh.w	r0, [sp, #8]
    955c:	2001      	movs	r0, #1
    955e:	f88d 000b 	strb.w	r0, [sp, #11]
    9562:	f006 fa1e 	bl	f9a2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    9566:	4601      	mov	r1, r0
    9568:	4630      	mov	r0, r6
    956a:	f7f9 f8a1 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    956e:	9003      	str	r0, [sp, #12]
    9570:	2003      	movs	r0, #3
    9572:	f88d 000a 	strb.w	r0, [sp, #10]
    9576:	4668      	mov	r0, sp
    9578:	f7f9 fbd8 	bl	2d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    957c:	4606      	mov	r6, r0
    957e:	4629      	mov	r1, r5
    9580:	9803      	ldr	r0, [sp, #12]
    9582:	f7f9 f895 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9586:	4605      	mov	r5, r0
    9588:	6a21      	ldr	r1, [r4, #32]
    958a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    958c:	f7f9 f890 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9590:	4601      	mov	r1, r0
    9592:	b13e      	cbz	r6, 95a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x798>
    9594:	4628      	mov	r0, r5
    9596:	f7f9 f8bd 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    959a:	2800      	cmp	r0, #0
    959c:	db02      	blt.n	95a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x798>
    959e:	2001      	movs	r0, #1
    95a0:	b004      	add	sp, #16
    95a2:	bd70      	pop	{r4, r5, r6, pc}
    95a4:	2000      	movs	r0, #0
    95a6:	e7fb      	b.n	95a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x794>
    95a8:	20001338 	.word	0x20001338
    95ac:	07a12000 	.word	0x07a12000
    95b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95b4:	f003 ff1f 	bl	d3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    95b8:	4c21      	ldr	r4, [pc, #132]	; (9640 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x834>)
    95ba:	4607      	mov	r7, r0
    95bc:	6920      	ldr	r0, [r4, #16]
    95be:	f000 f95b 	bl	9878 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa6c>
    95c2:	4606      	mov	r6, r0
    95c4:	f7f9 f81a 	bl	25fc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    95c8:	4605      	mov	r5, r0
    95ca:	2865      	cmp	r0, #101	; 0x65
    95cc:	d326      	bcc.n	961c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x810>
    95ce:	1c68      	adds	r0, r5, #1
    95d0:	d027      	beq.n	9622 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x816>
    95d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    95d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    95d6:	1948      	adds	r0, r1, r5
    95d8:	4282      	cmp	r2, r0
    95da:	d800      	bhi.n	95de <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7d2>
    95dc:	1a55      	subs	r5, r2, r1
    95de:	f06f 0139 	mvn.w	r1, #57	; 0x39
    95e2:	4638      	mov	r0, r7
    95e4:	f7f9 f864 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    95e8:	4629      	mov	r1, r5
    95ea:	f000 f9bd 	bl	9968 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb5c>
    95ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    95f0:	4408      	add	r0, r1
    95f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    95f4:	1a45      	subs	r5, r0, r1
    95f6:	f241 3088 	movw	r0, #5000	; 0x1388
    95fa:	4285      	cmp	r5, r0
    95fc:	d900      	bls.n	9600 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7f4>
    95fe:	4605      	mov	r5, r0
    9600:	f003 fef9 	bl	d3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9604:	4601      	mov	r1, r0
    9606:	4638      	mov	r0, r7
    9608:	f7f9 f884 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    960c:	309d      	adds	r0, #157	; 0x9d
    960e:	4285      	cmp	r5, r0
    9610:	d304      	bcc.n	961c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x810>
    9612:	4631      	mov	r1, r6
    9614:	4628      	mov	r0, r5
    9616:	f7f8 ff2f 	bl	2478 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    961a:	b120      	cbz	r0, 9626 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x81a>
    961c:	2000      	movs	r0, #0
    961e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9622:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    9624:	e7e5      	b.n	95f2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x7e6>
    9626:	6a60      	ldr	r0, [r4, #36]	; 0x24
    9628:	4905      	ldr	r1, [pc, #20]	; (9640 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x834>)
    962a:	4428      	add	r0, r5
    962c:	3910      	subs	r1, #16
    962e:	6260      	str	r0, [r4, #36]	; 0x24
    9630:	68c8      	ldr	r0, [r1, #12]
    9632:	4428      	add	r0, r5
    9634:	60c8      	str	r0, [r1, #12]
    9636:	f7fa f82f 	bl	3698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    963a:	2001      	movs	r0, #1
    963c:	e7ef      	b.n	961e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x812>
    963e:	0000      	.short	0x0000
    9640:	20001338 	.word	0x20001338
    9644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9648:	b08c      	sub	sp, #48	; 0x30
    964a:	4616      	mov	r6, r2
    964c:	4607      	mov	r7, r0
    964e:	f003 fed2 	bl	d3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    9652:	4c87      	ldr	r4, [pc, #540]	; (9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    9654:	9002      	str	r0, [sp, #8]
    9656:	2500      	movs	r5, #0
    9658:	f8d4 a008 	ldr.w	sl, [r4, #8]
    965c:	f006 f99b 	bl	f996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    9660:	68a1      	ldr	r1, [r4, #8]
    9662:	4408      	add	r0, r1
    9664:	6861      	ldr	r1, [r4, #4]
    9666:	4288      	cmp	r0, r1
    9668:	d101      	bne.n	966e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x862>
    966a:	2001      	movs	r0, #1
    966c:	e000      	b.n	9670 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x864>
    966e:	2000      	movs	r0, #0
    9670:	4683      	mov	fp, r0
    9672:	980d      	ldr	r0, [sp, #52]	; 0x34
    9674:	ea06 090b 	and.w	r9, r6, fp
    9678:	2800      	cmp	r0, #0
    967a:	d065      	beq.n	9748 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x93c>
    967c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    9680:	9802      	ldr	r0, [sp, #8]
    9682:	f7f9 f815 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9686:	9000      	str	r0, [sp, #0]
    9688:	f002 f872 	bl	b770 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    968c:	4680      	mov	r8, r0
    968e:	4878      	ldr	r0, [pc, #480]	; (9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    9690:	7800      	ldrb	r0, [r0, #0]
    9692:	4e77      	ldr	r6, [pc, #476]	; (9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    9694:	362c      	adds	r6, #44	; 0x2c
    9696:	2805      	cmp	r0, #5
    9698:	d12e      	bne.n	96f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ec>
    969a:	4875      	ldr	r0, [pc, #468]	; (9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    969c:	6980      	ldr	r0, [r0, #24]
    969e:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    96a2:	f002 f845 	bl	b730 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    96a6:	4604      	mov	r4, r0
    96a8:	4540      	cmp	r0, r8
    96aa:	d009      	beq.n	96c0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8b4>
    96ac:	4870      	ldr	r0, [pc, #448]	; (9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    96ae:	4621      	mov	r1, r4
    96b0:	6980      	ldr	r0, [r0, #24]
    96b2:	f500 7084 	add.w	r0, r0, #264	; 0x108
    96b6:	f001 ffff 	bl	b6b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    96ba:	2000      	movs	r0, #0
    96bc:	6170      	str	r0, [r6, #20]
    96be:	e00c      	b.n	96da <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ce>
    96c0:	496b      	ldr	r1, [pc, #428]	; (9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    96c2:	6988      	ldr	r0, [r1, #24]
    96c4:	f500 7084 	add.w	r0, r0, #264	; 0x108
    96c8:	6170      	str	r0, [r6, #20]
    96ca:	698a      	ldr	r2, [r1, #24]
    96cc:	6b08      	ldr	r0, [r1, #48]	; 0x30
    96ce:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    96d2:	4290      	cmp	r0, r2
    96d4:	d200      	bcs.n	96d8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8cc>
    96d6:	4610      	mov	r0, r2
    96d8:	6308      	str	r0, [r1, #48]	; 0x30
    96da:	4865      	ldr	r0, [pc, #404]	; (9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    96dc:	6980      	ldr	r0, [r0, #24]
    96de:	b130      	cbz	r0, 96ee <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8e2>
    96e0:	b144      	cbz	r4, 96f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8e8>
    96e2:	e9d4 1200 	ldrd	r1, r2, [r4]
    96e6:	4411      	add	r1, r2
    96e8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    96ec:	e004      	b.n	96f8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8ec>
    96ee:	f240 51c5 	movw	r1, #1477	; 0x5c5
    96f2:	e017      	b.n	9724 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x918>
    96f4:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    96f8:	4641      	mov	r1, r8
    96fa:	4630      	mov	r0, r6
    96fc:	f001 ffdc 	bl	b6b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    9700:	ea5f 0008 	movs.w	r0, r8
    9704:	f8df 8168 	ldr.w	r8, [pc, #360]	; 9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>
    9708:	9a00      	ldr	r2, [sp, #0]
    970a:	f8d8 4004 	ldr.w	r4, [r8, #4]
    970e:	d00c      	beq.n	972a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x91e>
    9710:	e9d0 1000 	ldrd	r1, r0, [r0]
    9714:	4408      	add	r0, r1
    9716:	4621      	mov	r1, r4
    9718:	f006 fa77 	bl	fc0a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    971c:	42a0      	cmp	r0, r4
    971e:	d904      	bls.n	972a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x91e>
    9720:	f240 51e3 	movw	r1, #1507	; 0x5e3
    9724:	2035      	movs	r0, #53	; 0x35
    9726:	f7fb fbcb 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    972a:	4601      	mov	r1, r0
    972c:	9800      	ldr	r0, [sp, #0]
    972e:	f7f8 ffbf 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9732:	4606      	mov	r6, r0
    9734:	f8d8 0004 	ldr.w	r0, [r8, #4]
    9738:	4644      	mov	r4, r8
    973a:	4241      	negs	r1, r0
    973c:	4630      	mov	r0, r6
    973e:	f7f8 ffb7 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9742:	62e0      	str	r0, [r4, #44]	; 0x2c
    9744:	2001      	movs	r0, #1
    9746:	e042      	b.n	97ce <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c2>
    9748:	f1b9 0f00 	cmp.w	r9, #0
    974c:	d018      	beq.n	9780 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x974>
    974e:	2001      	movs	r0, #1
    9750:	f006 f8a3 	bl	f89a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    9754:	4604      	mov	r4, r0
    9756:	2001      	movs	r0, #1
    9758:	f007 f9ed 	bl	10b36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    975c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    9760:	4401      	add	r1, r0
    9762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    9766:	fbb1 f0f0 	udiv	r0, r1, r0
    976a:	1821      	adds	r1, r4, r0
    976c:	31f1      	adds	r1, #241	; 0xf1
    976e:	9802      	ldr	r0, [sp, #8]
    9770:	f7ff fee2 	bl	9538 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72c>
    9774:	b908      	cbnz	r0, 977a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x96e>
    9776:	f04f 0a00 	mov.w	sl, #0
    977a:	9e02      	ldr	r6, [sp, #8]
    977c:	9508      	str	r5, [sp, #32]
    977e:	e027      	b.n	97d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c4>
    9780:	b12e      	cbz	r6, 978e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x982>
    9782:	a908      	add	r1, sp, #32
    9784:	9802      	ldr	r0, [sp, #8]
    9786:	f7ff fe7f 	bl	9488 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x67c>
    978a:	4606      	mov	r6, r0
    978c:	e020      	b.n	97d0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c4>
    978e:	9802      	ldr	r0, [sp, #8]
    9790:	f000 f8d8 	bl	9944 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb38>
    9794:	4c36      	ldr	r4, [pc, #216]	; (9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    9796:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    979a:	f7f8 ff89 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    979e:	4606      	mov	r6, r0
    97a0:	6920      	ldr	r0, [r4, #16]
    97a2:	f000 f8c3 	bl	992c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb20>
    97a6:	6861      	ldr	r1, [r4, #4]
    97a8:	4348      	muls	r0, r1
    97aa:	78a1      	ldrb	r1, [r4, #2]
    97ac:	b131      	cbz	r1, 97bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b0>
    97ae:	6a21      	ldr	r1, [r4, #32]
    97b0:	4281      	cmp	r1, r0
    97b2:	d302      	bcc.n	97ba <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9ae>
    97b4:	1a09      	subs	r1, r1, r0
    97b6:	6221      	str	r1, [r4, #32]
    97b8:	e000      	b.n	97bc <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9b0>
    97ba:	6225      	str	r5, [r4, #32]
    97bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    97be:	4601      	mov	r1, r0
    97c0:	4610      	mov	r0, r2
    97c2:	f7f8 ff75 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    97c6:	62e0      	str	r0, [r4, #44]	; 0x2c
    97c8:	4630      	mov	r0, r6
    97ca:	f000 f8af 	bl	992c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb20>
    97ce:	9008      	str	r0, [sp, #32]
    97d0:	2001      	movs	r0, #1
    97d2:	f006 f862 	bl	f89a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    97d6:	4604      	mov	r4, r0
    97d8:	2001      	movs	r0, #1
    97da:	f007 f9ac 	bl	10b36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    97de:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    97e2:	4401      	add	r1, r0
    97e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    97e8:	fbb1 f0f0 	udiv	r0, r1, r0
    97ec:	4404      	add	r4, r0
    97ee:	4651      	mov	r1, sl
    97f0:	4630      	mov	r0, r6
    97f2:	34f1      	adds	r4, #241	; 0xf1
    97f4:	f000 f8b8 	bl	9968 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb5c>
    97f8:	491d      	ldr	r1, [pc, #116]	; (9870 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa64>)
    97fa:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    97fe:	6892      	ldr	r2, [r2, #8]
    9800:	4282      	cmp	r2, r0
    9802:	d800      	bhi.n	9806 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9fa>
    9804:	4610      	mov	r0, r2
    9806:	6288      	str	r0, [r1, #40]	; 0x28
    9808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    980a:	b102      	cbz	r2, 980e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa02>
    980c:	610e      	str	r6, [r1, #16]
    980e:	4688      	mov	r8, r1
    9810:	614e      	str	r6, [r1, #20]
    9812:	f1bb 0f00 	cmp.w	fp, #0
    9816:	d002      	beq.n	981e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa12>
    9818:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    981c:	e001      	b.n	9822 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa16>
    981e:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    9822:	f04f 0a01 	mov.w	sl, #1
    9826:	f887 a00b 	strb.w	sl, [r7, #11]
    982a:	f006 f8a9 	bl	f980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    982e:	8138      	strh	r0, [r7, #8]
    9830:	4630      	mov	r0, r6
    9832:	f000 f821 	bl	9878 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa6c>
    9836:	72b8      	strb	r0, [r7, #10]
    9838:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    983c:	6078      	str	r0, [r7, #4]
    983e:	f1b9 0f00 	cmp.w	r9, #0
    9842:	d008      	beq.n	9856 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa4a>
    9844:	f887 a000 	strb.w	sl, [r7]
    9848:	490a      	ldr	r1, [pc, #40]	; (9874 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa68>)
    984a:	9802      	ldr	r0, [sp, #8]
    984c:	f000 f88c 	bl	9968 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb5c>
    9850:	1b00      	subs	r0, r0, r4
    9852:	60f8      	str	r0, [r7, #12]
    9854:	e001      	b.n	985a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa4e>
    9856:	703d      	strb	r5, [r7, #0]
    9858:	60fe      	str	r6, [r7, #12]
    985a:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    985e:	42a0      	cmp	r0, r4
    9860:	d303      	bcc.n	986a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa5e>
    9862:	2001      	movs	r0, #1
    9864:	b00f      	add	sp, #60	; 0x3c
    9866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    986a:	2000      	movs	r0, #0
    986c:	e7fa      	b.n	9864 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa58>
    986e:	0000      	.short	0x0000
    9870:	20001338 	.word	0x20001338
    9874:	07a12000 	.word	0x07a12000
    9878:	4a09      	ldr	r2, [pc, #36]	; (98a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa94>)
    987a:	b510      	push	{r4, lr}
    987c:	7811      	ldrb	r1, [r2, #0]
    987e:	2904      	cmp	r1, #4
    9880:	d10c      	bne.n	989c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa90>
    9882:	6851      	ldr	r1, [r2, #4]
    9884:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    9886:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    988a:	004c      	lsls	r4, r1, #1
    988c:	4601      	mov	r1, r0
    988e:	4610      	mov	r0, r2
    9890:	f7f8 ff40 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9894:	42a0      	cmp	r0, r4
    9896:	d201      	bcs.n	989c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa90>
    9898:	2003      	movs	r0, #3
    989a:	bd10      	pop	{r4, pc}
    989c:	2002      	movs	r0, #2
    989e:	bd10      	pop	{r4, pc}
    98a0:	20001338 	.word	0x20001338
    98a4:	b570      	push	{r4, r5, r6, lr}
    98a6:	4d13      	ldr	r5, [pc, #76]	; (98f4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xae8>)
    98a8:	7f28      	ldrb	r0, [r5, #28]
    98aa:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    98ae:	2800      	cmp	r0, #0
    98b0:	7828      	ldrb	r0, [r5, #0]
    98b2:	d00f      	beq.n	98d4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xac8>
    98b4:	2805      	cmp	r0, #5
    98b6:	d004      	beq.n	98c2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xab6>
    98b8:	f240 318f 	movw	r1, #911	; 0x38f
    98bc:	2035      	movs	r0, #53	; 0x35
    98be:	f7fb faff 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    98c2:	4620      	mov	r0, r4
    98c4:	f005 ffe1 	bl	f88a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    98c8:	b178      	cbz	r0, 98ea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xade>
    98ca:	4620      	mov	r0, r4
    98cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    98d0:	f001 bed0 	b.w	b674 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    98d4:	2805      	cmp	r0, #5
    98d6:	d108      	bne.n	98ea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xade>
    98d8:	4620      	mov	r0, r4
    98da:	f005 ffd6 	bl	f88a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    98de:	b920      	cbnz	r0, 98ea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xade>
    98e0:	69a8      	ldr	r0, [r5, #24]
    98e2:	f500 7084 	add.w	r0, r0, #264	; 0x108
    98e6:	f001 ff07 	bl	b6f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    98ea:	4620      	mov	r0, r4
    98ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    98f0:	f001 bf02 	b.w	b6f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    98f4:	20001338 	.word	0x20001338
    98f8:	b510      	push	{r4, lr}
    98fa:	f7fd ff27 	bl	774c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    98fe:	490a      	ldr	r1, [pc, #40]	; (9928 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb1c>)
    9900:	2000      	movs	r0, #0
    9902:	70c8      	strb	r0, [r1, #3]
    9904:	7708      	strb	r0, [r1, #28]
    9906:	6188      	str	r0, [r1, #24]
    9908:	7008      	strb	r0, [r1, #0]
    990a:	f7fd fe71 	bl	75f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    990e:	4604      	mov	r4, r0
    9910:	7800      	ldrb	r0, [r0, #0]
    9912:	f7f9 fc89 	bl	3228 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    9916:	b110      	cbz	r0, 991e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb12>
    9918:	2020      	movs	r0, #32
    991a:	7020      	strb	r0, [r4, #0]
    991c:	bd10      	pop	{r4, pc}
    991e:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    9922:	2035      	movs	r0, #53	; 0x35
    9924:	f7fb facc 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9928:	20001338 	.word	0x20001338
    992c:	b510      	push	{r4, lr}
    992e:	4c04      	ldr	r4, [pc, #16]	; (9940 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb34>)
    9930:	4601      	mov	r1, r0
    9932:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9934:	f7f8 feee 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9938:	6861      	ldr	r1, [r4, #4]
    993a:	fbb0 f0f1 	udiv	r0, r0, r1
    993e:	bd10      	pop	{r4, pc}
    9940:	20001338 	.word	0x20001338
    9944:	b510      	push	{r4, lr}
    9946:	4c07      	ldr	r4, [pc, #28]	; (9964 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb58>)
    9948:	4601      	mov	r1, r0
    994a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    994c:	f7f8 fee2 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9950:	6861      	ldr	r1, [r4, #4]
    9952:	fbb0 f2f1 	udiv	r2, r0, r1
    9956:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    9958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    995c:	4351      	muls	r1, r2
    995e:	f7f8 bea7 	b.w	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9962:	0000      	.short	0x0000
    9964:	20001338 	.word	0x20001338
    9968:	b570      	push	{r4, r5, r6, lr}
    996a:	4605      	mov	r5, r0
    996c:	480d      	ldr	r0, [pc, #52]	; (99a4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb98>)
    996e:	460c      	mov	r4, r1
    9970:	7881      	ldrb	r1, [r0, #2]
    9972:	b1a9      	cbz	r1, 99a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb94>
    9974:	4a0c      	ldr	r2, [pc, #48]	; (99a8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb9c>)
    9976:	6a01      	ldr	r1, [r0, #32]
    9978:	4291      	cmp	r1, r2
    997a:	d211      	bcs.n	99a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb94>
    997c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    997e:	f7f8 fe97 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    9982:	4606      	mov	r6, r0
    9984:	4621      	mov	r1, r4
    9986:	4628      	mov	r0, r5
    9988:	f7f8 fe92 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    998c:	4601      	mov	r1, r0
    998e:	4630      	mov	r0, r6
    9990:	f7f8 fec0 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    9994:	2800      	cmp	r0, #0
    9996:	dd03      	ble.n	99a0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb94>
    9998:	1a20      	subs	r0, r4, r0
    999a:	d500      	bpl.n	999e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb92>
    999c:	2000      	movs	r0, #0
    999e:	bd70      	pop	{r4, r5, r6, pc}
    99a0:	4620      	mov	r0, r4
    99a2:	bd70      	pop	{r4, r5, r6, pc}
    99a4:	20001338 	.word	0x20001338
    99a8:	07a12000 	.word	0x07a12000

000099ac <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    99ac:	4806      	ldr	r0, [pc, #24]	; (99c8 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    99ae:	4905      	ldr	r1, [pc, #20]	; (99c4 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    99b0:	6501      	str	r1, [r0, #80]	; 0x50
    99b2:	4906      	ldr	r1, [pc, #24]	; (99cc <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    99b4:	6541      	str	r1, [r0, #84]	; 0x54
    99b6:	4807      	ldr	r0, [pc, #28]	; (99d4 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    99b8:	4905      	ldr	r1, [pc, #20]	; (99d0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    99ba:	6501      	str	r1, [r0, #80]	; 0x50
    99bc:	4906      	ldr	r1, [pc, #24]	; (99d8 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    99be:	6541      	str	r1, [r0, #84]	; 0x54
    99c0:	4770      	bx	lr
    99c2:	0000      	.short	0x0000
    99c4:	0000ab09 	.word	0x0000ab09
    99c8:	2000012c 	.word	0x2000012c
    99cc:	0000abd5 	.word	0x0000abd5
    99d0:	0000b205 	.word	0x0000b205
    99d4:	20000190 	.word	0x20000190
    99d8:	0000b235 	.word	0x0000b235

000099dc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    99dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99de:	460d      	mov	r5, r1
    99e0:	4607      	mov	r7, r0
    99e2:	2100      	movs	r1, #0
    99e4:	f004 ff1d 	bl	e822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    99e8:	1e04      	subs	r4, r0, #0
    99ea:	d051      	beq.n	9a90 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    99ec:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    99f0:	2800      	cmp	r0, #0
    99f2:	d04d      	beq.n	9a90 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    99f4:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    99f8:	f88d 0000 	strb.w	r0, [sp]
    99fc:	9800      	ldr	r0, [sp, #0]
    99fe:	9000      	str	r0, [sp, #0]
    9a00:	f89d 0000 	ldrb.w	r0, [sp]
    9a04:	2600      	movs	r6, #0
    9a06:	b158      	cbz	r0, 9a20 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    9a08:	706e      	strb	r6, [r5, #1]
    9a0a:	2009      	movs	r0, #9
    9a0c:	7028      	strb	r0, [r5, #0]
    9a0e:	220a      	movs	r2, #10
    9a10:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    9a14:	1d28      	adds	r0, r5, #4
    9a16:	f003 fe63 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9a1a:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    9a1e:	e0e1      	b.n	9be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9a20:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    9a24:	280e      	cmp	r0, #14
    9a26:	d01d      	beq.n	9a64 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    9a28:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    9a2c:	280d      	cmp	r0, #13
    9a2e:	d027      	beq.n	9a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    9a30:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    9a34:	f88d 0000 	strb.w	r0, [sp]
    9a38:	9800      	ldr	r0, [sp, #0]
    9a3a:	9000      	str	r0, [sp, #0]
    9a3c:	f89d 0000 	ldrb.w	r0, [sp]
    9a40:	b3b0      	cbz	r0, 9ab0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    9a42:	706e      	strb	r6, [r5, #1]
    9a44:	2008      	movs	r0, #8
    9a46:	7028      	strb	r0, [r5, #0]
    9a48:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    9a4c:	6068      	str	r0, [r5, #4]
    9a4e:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    9a52:	60a8      	str	r0, [r5, #8]
    9a54:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    9a58:	60e8      	str	r0, [r5, #12]
    9a5a:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    9a5e:	f804 6c02 	strb.w	r6, [r4, #-2]
    9a62:	e0bf      	b.n	9be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9a64:	8820      	ldrh	r0, [r4, #0]
    9a66:	f7fb fe29 	bl	56bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9a6a:	4607      	mov	r7, r0
    9a6c:	f004 fda9 	bl	e5c2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    9a70:	b968      	cbnz	r0, 9a8e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    9a72:	706e      	strb	r6, [r5, #1]
    9a74:	200e      	movs	r0, #14
    9a76:	7028      	strb	r0, [r5, #0]
    9a78:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    9a7c:	6068      	str	r0, [r5, #4]
    9a7e:	e011      	b.n	9aa4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    9a80:	8820      	ldrh	r0, [r4, #0]
    9a82:	f7fb fe1b 	bl	56bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    9a86:	4607      	mov	r7, r0
    9a88:	f004 fd9b 	bl	e5c2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    9a8c:	b108      	cbz	r0, 9a92 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    9a8e:	2000      	movs	r0, #0
    9a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a92:	706e      	strb	r6, [r5, #1]
    9a94:	200d      	movs	r0, #13
    9a96:	7028      	strb	r0, [r5, #0]
    9a98:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    9a9c:	6068      	str	r0, [r5, #4]
    9a9e:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    9aa2:	8128      	strh	r0, [r5, #8]
    9aa4:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    9aa8:	4638      	mov	r0, r7
    9aaa:	f004 fda5 	bl	e5f8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    9aae:	e099      	b.n	9be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9ab0:	e7ff      	b.n	9ab2 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    9ab2:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    9ab6:	f88d 0000 	strb.w	r0, [sp]
    9aba:	9800      	ldr	r0, [sp, #0]
    9abc:	9000      	str	r0, [sp, #0]
    9abe:	f89d 0000 	ldrb.w	r0, [sp]
    9ac2:	b130      	cbz	r0, 9ad2 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    9ac4:	706e      	strb	r6, [r5, #1]
    9ac6:	2010      	movs	r0, #16
    9ac8:	7028      	strb	r0, [r5, #0]
    9aca:	80af      	strh	r7, [r5, #4]
    9acc:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    9ad0:	e088      	b.n	9be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9ad2:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    9ad6:	f88d 0000 	strb.w	r0, [sp]
    9ada:	9800      	ldr	r0, [sp, #0]
    9adc:	9000      	str	r0, [sp, #0]
    9ade:	f89d 0000 	ldrb.w	r0, [sp]
    9ae2:	b1c8      	cbz	r0, 9b18 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    9ae4:	706e      	strb	r6, [r5, #1]
    9ae6:	2015      	movs	r0, #21
    9ae8:	7028      	strb	r0, [r5, #0]
    9aea:	e00a      	b.n	9b02 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    9aec:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    9af0:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    9af4:	6068      	str	r0, [r5, #4]
    9af6:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    9afa:	60a8      	str	r0, [r5, #8]
    9afc:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    9b00:	60e8      	str	r0, [r5, #12]
    9b02:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    9b06:	f88d 0000 	strb.w	r0, [sp]
    9b0a:	9800      	ldr	r0, [sp, #0]
    9b0c:	9000      	str	r0, [sp, #0]
    9b0e:	f89d 0000 	ldrb.w	r0, [sp]
    9b12:	2800      	cmp	r0, #0
    9b14:	d1ea      	bne.n	9aec <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    9b16:	e065      	b.n	9be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9b18:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    9b1c:	f88d 0000 	strb.w	r0, [sp]
    9b20:	9800      	ldr	r0, [sp, #0]
    9b22:	9000      	str	r0, [sp, #0]
    9b24:	f89d 0000 	ldrb.w	r0, [sp]
    9b28:	b158      	cbz	r0, 9b42 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    9b2a:	706e      	strb	r6, [r5, #1]
    9b2c:	201c      	movs	r0, #28
    9b2e:	7028      	strb	r0, [r5, #0]
    9b30:	220a      	movs	r2, #10
    9b32:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    9b36:	1d28      	adds	r0, r5, #4
    9b38:	f003 fdd2 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    9b3c:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    9b40:	e050      	b.n	9be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9b42:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    9b46:	f88d 0000 	strb.w	r0, [sp]
    9b4a:	9800      	ldr	r0, [sp, #0]
    9b4c:	9000      	str	r0, [sp, #0]
    9b4e:	f89d 0000 	ldrb.w	r0, [sp]
    9b52:	b140      	cbz	r0, 9b66 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    9b54:	706e      	strb	r6, [r5, #1]
    9b56:	201d      	movs	r0, #29
    9b58:	7028      	strb	r0, [r5, #0]
    9b5a:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    9b5e:	6068      	str	r0, [r5, #4]
    9b60:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    9b64:	e03e      	b.n	9be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9b66:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    9b6a:	f88d 0000 	strb.w	r0, [sp]
    9b6e:	9800      	ldr	r0, [sp, #0]
    9b70:	9000      	str	r0, [sp, #0]
    9b72:	f89d 0000 	ldrb.w	r0, [sp]
    9b76:	b198      	cbz	r0, 9ba0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    9b78:	706e      	strb	r6, [r5, #1]
    9b7a:	201a      	movs	r0, #26
    9b7c:	7028      	strb	r0, [r5, #0]
    9b7e:	e004      	b.n	9b8a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    9b80:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    9b84:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    9b88:	6068      	str	r0, [r5, #4]
    9b8a:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    9b8e:	f88d 0000 	strb.w	r0, [sp]
    9b92:	9800      	ldr	r0, [sp, #0]
    9b94:	9000      	str	r0, [sp, #0]
    9b96:	f89d 0000 	ldrb.w	r0, [sp]
    9b9a:	2800      	cmp	r0, #0
    9b9c:	d1f0      	bne.n	9b80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    9b9e:	e021      	b.n	9be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    9ba0:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    9ba4:	f88d 0000 	strb.w	r0, [sp]
    9ba8:	9800      	ldr	r0, [sp, #0]
    9baa:	9000      	str	r0, [sp, #0]
    9bac:	f89d 0000 	ldrb.w	r0, [sp]
    9bb0:	2800      	cmp	r0, #0
    9bb2:	f43f af6d 	beq.w	9a90 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    9bb6:	706e      	strb	r6, [r5, #1]
    9bb8:	2016      	movs	r0, #22
    9bba:	7028      	strb	r0, [r5, #0]
    9bbc:	e008      	b.n	9bd0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    9bbe:	bf00      	nop
    9bc0:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    9bc4:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    9bc8:	6068      	str	r0, [r5, #4]
    9bca:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    9bce:	8128      	strh	r0, [r5, #8]
    9bd0:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    9bd4:	f88d 0000 	strb.w	r0, [sp]
    9bd8:	9800      	ldr	r0, [sp, #0]
    9bda:	9000      	str	r0, [sp, #0]
    9bdc:	f89d 0000 	ldrb.w	r0, [sp]
    9be0:	2800      	cmp	r0, #0
    9be2:	d1ed      	bne.n	9bc0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    9be4:	2001      	movs	r0, #1
    9be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00009be8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    9be8:	b570      	push	{r4, r5, r6, lr}
    9bea:	4605      	mov	r5, r0
    9bec:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    9bf0:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    9bf4:	b1c9      	cbz	r1, 9c2a <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    9bf6:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    9bfa:	1a0c      	subs	r4, r1, r0
    9bfc:	f1b4 0404 	subs.w	r4, r4, #4
    9c00:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    9c04:	b140      	cbz	r0, 9c18 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    9c06:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    9c0a:	2300      	movs	r3, #0
    9c0c:	2109      	movs	r1, #9
    9c0e:	f105 0078 	add.w	r0, r5, #120	; 0x78
    9c12:	f004 ffca 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c16:	b160      	cbz	r0, 9c32 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    9c18:	4628      	mov	r0, r5
    9c1a:	f005 ffe7 	bl	fbec <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    9c1e:	b138      	cbz	r0, 9c30 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    9c20:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    9c24:	1a40      	subs	r0, r0, r1
    9c26:	1f00      	subs	r0, r0, #4
    9c28:	e003      	b.n	9c32 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    9c2a:	f1c0 0402 	rsb	r4, r0, #2
    9c2e:	e7e7      	b.n	9c00 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    9c30:	4620      	mov	r0, r4
    9c32:	42a0      	cmp	r0, r4
    9c34:	da00      	bge.n	9c38 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    9c36:	4604      	mov	r4, r0
    9c38:	2c00      	cmp	r4, #0
    9c3a:	dc01      	bgt.n	9c40 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    9c3c:	2000      	movs	r0, #0
    9c3e:	bd70      	pop	{r4, r5, r6, pc}
    9c40:	b2a0      	uxth	r0, r4
    9c42:	bd70      	pop	{r4, r5, r6, pc}

00009c44 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    9c44:	481b      	ldr	r0, [pc, #108]	; (9cb4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    9c46:	491a      	ldr	r1, [pc, #104]	; (9cb0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    9c48:	6081      	str	r1, [r0, #8]
    9c4a:	491b      	ldr	r1, [pc, #108]	; (9cb8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    9c4c:	61c1      	str	r1, [r0, #28]
    9c4e:	491b      	ldr	r1, [pc, #108]	; (9cbc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    9c50:	62c1      	str	r1, [r0, #44]	; 0x2c
    9c52:	491b      	ldr	r1, [pc, #108]	; (9cc0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    9c54:	6101      	str	r1, [r0, #16]
    9c56:	491b      	ldr	r1, [pc, #108]	; (9cc4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    9c58:	6141      	str	r1, [r0, #20]
    9c5a:	491b      	ldr	r1, [pc, #108]	; (9cc8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    9c5c:	6441      	str	r1, [r0, #68]	; 0x44
    9c5e:	491b      	ldr	r1, [pc, #108]	; (9ccc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    9c60:	6181      	str	r1, [r0, #24]
    9c62:	491b      	ldr	r1, [pc, #108]	; (9cd0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    9c64:	6301      	str	r1, [r0, #48]	; 0x30
    9c66:	491b      	ldr	r1, [pc, #108]	; (9cd4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    9c68:	6241      	str	r1, [r0, #36]	; 0x24
    9c6a:	491b      	ldr	r1, [pc, #108]	; (9cd8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    9c6c:	64c1      	str	r1, [r0, #76]	; 0x4c
    9c6e:	491b      	ldr	r1, [pc, #108]	; (9cdc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    9c70:	6481      	str	r1, [r0, #72]	; 0x48
    9c72:	491b      	ldr	r1, [pc, #108]	; (9ce0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    9c74:	6341      	str	r1, [r0, #52]	; 0x34
    9c76:	481c      	ldr	r0, [pc, #112]	; (9ce8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    9c78:	491a      	ldr	r1, [pc, #104]	; (9ce4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    9c7a:	6081      	str	r1, [r0, #8]
    9c7c:	491b      	ldr	r1, [pc, #108]	; (9cec <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    9c7e:	61c1      	str	r1, [r0, #28]
    9c80:	491b      	ldr	r1, [pc, #108]	; (9cf0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    9c82:	6201      	str	r1, [r0, #32]
    9c84:	491b      	ldr	r1, [pc, #108]	; (9cf4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    9c86:	6041      	str	r1, [r0, #4]
    9c88:	491b      	ldr	r1, [pc, #108]	; (9cf8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    9c8a:	6001      	str	r1, [r0, #0]
    9c8c:	491b      	ldr	r1, [pc, #108]	; (9cfc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    9c8e:	6281      	str	r1, [r0, #40]	; 0x28
    9c90:	491b      	ldr	r1, [pc, #108]	; (9d00 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    9c92:	62c1      	str	r1, [r0, #44]	; 0x2c
    9c94:	491b      	ldr	r1, [pc, #108]	; (9d04 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    9c96:	60c1      	str	r1, [r0, #12]
    9c98:	491b      	ldr	r1, [pc, #108]	; (9d08 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    9c9a:	6181      	str	r1, [r0, #24]
    9c9c:	491b      	ldr	r1, [pc, #108]	; (9d0c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    9c9e:	6301      	str	r1, [r0, #48]	; 0x30
    9ca0:	491b      	ldr	r1, [pc, #108]	; (9d10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    9ca2:	6481      	str	r1, [r0, #72]	; 0x48
    9ca4:	491b      	ldr	r1, [pc, #108]	; (9d14 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    9ca6:	64c1      	str	r1, [r0, #76]	; 0x4c
    9ca8:	491b      	ldr	r1, [pc, #108]	; (9d18 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    9caa:	6441      	str	r1, [r0, #68]	; 0x44
    9cac:	4770      	bx	lr
    9cae:	0000      	.short	0x0000
    9cb0:	0000af91 	.word	0x0000af91
    9cb4:	2000012c 	.word	0x2000012c
    9cb8:	0000afcd 	.word	0x0000afcd
    9cbc:	0000aca5 	.word	0x0000aca5
    9cc0:	0000a9e5 	.word	0x0000a9e5
    9cc4:	0000aedd 	.word	0x0000aedd
    9cc8:	0000ae41 	.word	0x0000ae41
    9ccc:	0000af1d 	.word	0x0000af1d
    9cd0:	0000b069 	.word	0x0000b069
    9cd4:	0000aa1d 	.word	0x0000aa1d
    9cd8:	0000ac79 	.word	0x0000ac79
    9cdc:	0000ac45 	.word	0x0000ac45
    9ce0:	0000aecd 	.word	0x0000aecd
    9ce4:	0000b3e9 	.word	0x0000b3e9
    9ce8:	20000190 	.word	0x20000190
    9cec:	0000b419 	.word	0x0000b419
    9cf0:	0000b1d5 	.word	0x0000b1d5
    9cf4:	0000b139 	.word	0x0000b139
    9cf8:	0000b169 	.word	0x0000b169
    9cfc:	0000b2a5 	.word	0x0000b2a5
    9d00:	0000b2d9 	.word	0x0000b2d9
    9d04:	0000b199 	.word	0x0000b199
    9d08:	0000b3c5 	.word	0x0000b3c5
    9d0c:	0000b459 	.word	0x0000b459
    9d10:	0000b265 	.word	0x0000b265
    9d14:	0000b295 	.word	0x0000b295
    9d18:	0000b3b1 	.word	0x0000b3b1

00009d1c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    9d1c:	4806      	ldr	r0, [pc, #24]	; (9d38 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    9d1e:	4905      	ldr	r1, [pc, #20]	; (9d34 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    9d20:	6581      	str	r1, [r0, #88]	; 0x58
    9d22:	4906      	ldr	r1, [pc, #24]	; (9d3c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    9d24:	65c1      	str	r1, [r0, #92]	; 0x5c
    9d26:	4807      	ldr	r0, [pc, #28]	; (9d44 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    9d28:	4905      	ldr	r1, [pc, #20]	; (9d40 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    9d2a:	6581      	str	r1, [r0, #88]	; 0x58
    9d2c:	4906      	ldr	r1, [pc, #24]	; (9d48 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    9d2e:	6601      	str	r1, [r0, #96]	; 0x60
    9d30:	4770      	bx	lr
    9d32:	0000      	.short	0x0000
    9d34:	0000acc9 	.word	0x0000acc9
    9d38:	2000012c 	.word	0x2000012c
    9d3c:	0000add9 	.word	0x0000add9
    9d40:	0000b305 	.word	0x0000b305
    9d44:	20000190 	.word	0x20000190
    9d48:	0000b335 	.word	0x0000b335

00009d4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    9d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9d4e:	4d36      	ldr	r5, [pc, #216]	; (9e28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    9d50:	2600      	movs	r6, #0
    9d52:	4604      	mov	r4, r0
    9d54:	6068      	str	r0, [r5, #4]
    9d56:	806e      	strh	r6, [r5, #2]
    9d58:	706e      	strb	r6, [r5, #1]
    9d5a:	702e      	strb	r6, [r5, #0]
    9d5c:	8800      	ldrh	r0, [r0, #0]
    9d5e:	f7fb fedd 	bl	5b1c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    9d62:	6868      	ldr	r0, [r5, #4]
    9d64:	8800      	ldrh	r0, [r0, #0]
    9d66:	f7fb fe81 	bl	5a6c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    9d6a:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    9d6e:	6869      	ldr	r1, [r5, #4]
    9d70:	1c40      	adds	r0, r0, #1
    9d72:	b282      	uxth	r2, r0
    9d74:	f101 0078 	add.w	r0, r1, #120	; 0x78
    9d78:	f005 f8d1 	bl	ef1e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    9d7c:	b120      	cbz	r0, 9d88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    9d7e:	f44f 71ac 	mov.w	r1, #344	; 0x158
    9d82:	2036      	movs	r0, #54	; 0x36
    9d84:	f7fb f89c 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9d88:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    9d8c:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    9d90:	4630      	mov	r0, r6
    9d92:	2924      	cmp	r1, #36	; 0x24
    9d94:	d10a      	bne.n	9dac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    9d96:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    9d9a:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    9d9e:	1a51      	subs	r1, r2, r1
    9da0:	b209      	sxth	r1, r1
    9da2:	2900      	cmp	r1, #0
    9da4:	db02      	blt.n	9dac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    9da6:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    9daa:	e00f      	b.n	9dcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    9dac:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    9db0:	2924      	cmp	r1, #36	; 0x24
    9db2:	d001      	beq.n	9db8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    9db4:	2925      	cmp	r1, #37	; 0x25
    9db6:	d10c      	bne.n	9dd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    9db8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    9dbc:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    9dc0:	1a51      	subs	r1, r2, r1
    9dc2:	b209      	sxth	r1, r1
    9dc4:	2900      	cmp	r1, #0
    9dc6:	db04      	blt.n	9dd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    9dc8:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    9dcc:	f000 fd5a 	bl	a884 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    9dd0:	b318      	cbz	r0, 9e1a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    9dd2:	f000 fbfd 	bl	a5d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    9dd6:	2800      	cmp	r0, #0
    9dd8:	d125      	bne.n	9e26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    9dda:	6868      	ldr	r0, [r5, #4]
    9ddc:	3078      	adds	r0, #120	; 0x78
    9dde:	f005 fe7a 	bl	fad6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9de2:	b120      	cbz	r0, 9dee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    9de4:	6868      	ldr	r0, [r5, #4]
    9de6:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    9dea:	f000 faad 	bl	a348 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    9dee:	480f      	ldr	r0, [pc, #60]	; (9e2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    9df0:	9000      	str	r0, [sp, #0]
    9df2:	4b0f      	ldr	r3, [pc, #60]	; (9e30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    9df4:	4a0f      	ldr	r2, [pc, #60]	; (9e34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    9df6:	4621      	mov	r1, r4
    9df8:	4630      	mov	r0, r6
    9dfa:	f7fb ff39 	bl	5c70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    9dfe:	6868      	ldr	r0, [r5, #4]
    9e00:	2300      	movs	r3, #0
    9e02:	2105      	movs	r1, #5
    9e04:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9e08:	3078      	adds	r0, #120	; 0x78
    9e0a:	f004 fece 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9e0e:	2800      	cmp	r0, #0
    9e10:	d009      	beq.n	9e26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    9e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9e16:	f7fb bf25 	b.w	5c64 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    9e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9e1e:	2100      	movs	r1, #0
    9e20:	4608      	mov	r0, r1
    9e22:	f000 bb81 	b.w	a528 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    9e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9e28:	2000011c 	.word	0x2000011c
    9e2c:	0000a529 	.word	0x0000a529
    9e30:	00009f59 	.word	0x00009f59
    9e34:	0000a7fd 	.word	0x0000a7fd
    9e38:	4411      	add	r1, r2
    9e3a:	78c2      	ldrb	r2, [r0, #3]
    9e3c:	480c      	ldr	r0, [pc, #48]	; (9e70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    9e3e:	1d89      	adds	r1, r1, #6
    9e40:	b289      	uxth	r1, r1
    9e42:	6840      	ldr	r0, [r0, #4]
    9e44:	2a01      	cmp	r2, #1
    9e46:	d006      	beq.n	9e56 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    9e48:	b142      	cbz	r2, 9e5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    9e4a:	2a18      	cmp	r2, #24
    9e4c:	d105      	bne.n	9e5a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    9e4e:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    9e52:	b132      	cbz	r2, 9e62 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    9e54:	e009      	b.n	9e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    9e56:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    9e5a:	4770      	bx	lr
    9e5c:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    9e60:	4770      	bx	lr
    9e62:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    9e66:	b902      	cbnz	r2, 9e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    9e68:	2100      	movs	r1, #0
    9e6a:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    9e6e:	4770      	bx	lr
    9e70:	2000011c 	.word	0x2000011c
    9e74:	490b      	ldr	r1, [pc, #44]	; (9ea4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    9e76:	78c2      	ldrb	r2, [r0, #3]
    9e78:	6849      	ldr	r1, [r1, #4]
    9e7a:	2a01      	cmp	r2, #1
    9e7c:	d006      	beq.n	9e8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    9e7e:	b15a      	cbz	r2, 9e98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    9e80:	2a18      	cmp	r2, #24
    9e82:	d108      	bne.n	9e96 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    9e84:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    9e88:	f005 b92f 	b.w	f0ea <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    9e8c:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    9e90:	7241      	strb	r1, [r0, #9]
    9e92:	0a09      	lsrs	r1, r1, #8
    9e94:	7281      	strb	r1, [r0, #10]
    9e96:	4770      	bx	lr
    9e98:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    9e9c:	7341      	strb	r1, [r0, #13]
    9e9e:	0a09      	lsrs	r1, r1, #8
    9ea0:	7381      	strb	r1, [r0, #14]
    9ea2:	4770      	bx	lr
    9ea4:	2000011c 	.word	0x2000011c
    9ea8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9eaa:	4c2a      	ldr	r4, [pc, #168]	; (9f54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    9eac:	2300      	movs	r3, #0
    9eae:	4619      	mov	r1, r3
    9eb0:	6860      	ldr	r0, [r4, #4]
    9eb2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9eb6:	3078      	adds	r0, #120	; 0x78
    9eb8:	f004 fe77 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ebc:	2800      	cmp	r0, #0
    9ebe:	d048      	beq.n	9f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9ec0:	6860      	ldr	r0, [r4, #4]
    9ec2:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    9ec6:	f88d 1000 	strb.w	r1, [sp]
    9eca:	9900      	ldr	r1, [sp, #0]
    9ecc:	9100      	str	r1, [sp, #0]
    9ece:	f89d 1000 	ldrb.w	r1, [sp]
    9ed2:	2900      	cmp	r1, #0
    9ed4:	d03d      	beq.n	9f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9ed6:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9eda:	f004 febf 	bl	ec5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9ede:	2800      	cmp	r0, #0
    9ee0:	d137      	bne.n	9f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9ee2:	6860      	ldr	r0, [r4, #4]
    9ee4:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    9ee8:	280a      	cmp	r0, #10
    9eea:	d932      	bls.n	9f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9eec:	4668      	mov	r0, sp
    9eee:	f7fc ff59 	bl	6da4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    9ef2:	2800      	cmp	r0, #0
    9ef4:	d02d      	beq.n	9f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9ef6:	6861      	ldr	r1, [r4, #4]
    9ef8:	2205      	movs	r2, #5
    9efa:	4668      	mov	r0, sp
    9efc:	318e      	adds	r1, #142	; 0x8e
    9efe:	f003 fbdd 	bl	d6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9f02:	2500      	movs	r5, #0
    9f04:	b310      	cbz	r0, 9f4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    9f06:	6860      	ldr	r0, [r4, #4]
    9f08:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9f0c:	7808      	ldrb	r0, [r1, #0]
    9f0e:	b158      	cbz	r0, 9f28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    9f10:	2205      	movs	r2, #5
    9f12:	4668      	mov	r0, sp
    9f14:	1c49      	adds	r1, r1, #1
    9f16:	f003 fbd1 	bl	d6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    9f1a:	2800      	cmp	r0, #0
    9f1c:	d119      	bne.n	9f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    9f1e:	6860      	ldr	r0, [r4, #4]
    9f20:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    9f24:	7800      	ldrb	r0, [r0, #0]
    9f26:	b940      	cbnz	r0, 9f3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    9f28:	6860      	ldr	r0, [r4, #4]
    9f2a:	9900      	ldr	r1, [sp, #0]
    9f2c:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    9f30:	f8c0 1001 	str.w	r1, [r0, #1]
    9f34:	f89d 1004 	ldrb.w	r1, [sp, #4]
    9f38:	7141      	strb	r1, [r0, #5]
    9f3a:	6860      	ldr	r0, [r4, #4]
    9f3c:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    9f40:	7808      	ldrb	r0, [r1, #0]
    9f42:	1c40      	adds	r0, r0, #1
    9f44:	7008      	strb	r0, [r1, #0]
    9f46:	2001      	movs	r0, #1
    9f48:	f000 fd04 	bl	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9f4c:	6860      	ldr	r0, [r4, #4]
    9f4e:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    9f52:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9f54:	2000011c 	.word	0x2000011c
    9f58:	4a0c      	ldr	r2, [pc, #48]	; (9f8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    9f5a:	7851      	ldrb	r1, [r2, #1]
    9f5c:	b999      	cbnz	r1, 9f86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9f5e:	4611      	mov	r1, r2
    9f60:	2801      	cmp	r0, #1
    9f62:	6849      	ldr	r1, [r1, #4]
    9f64:	d008      	beq.n	9f78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    9f66:	7890      	ldrb	r0, [r2, #2]
    9f68:	0740      	lsls	r0, r0, #29
    9f6a:	d503      	bpl.n	9f74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    9f6c:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    9f70:	2807      	cmp	r0, #7
    9f72:	d008      	beq.n	9f86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9f74:	2001      	movs	r0, #1
    9f76:	4770      	bx	lr
    9f78:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    9f7c:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    9f7e:	4288      	cmp	r0, r1
    9f80:	d801      	bhi.n	9f86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    9f82:	f7fe bd5d 	b.w	8a40 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    9f86:	2000      	movs	r0, #0
    9f88:	4770      	bx	lr
    9f8a:	0000      	.short	0x0000
    9f8c:	2000011c 	.word	0x2000011c
    9f90:	b538      	push	{r3, r4, r5, lr}
    9f92:	4c87      	ldr	r4, [pc, #540]	; (a1b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    9f94:	6860      	ldr	r0, [r4, #4]
    9f96:	3078      	adds	r0, #120	; 0x78
    9f98:	f005 fd9d 	bl	fad6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9f9c:	2800      	cmp	r0, #0
    9f9e:	d15b      	bne.n	a058 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9fa0:	6860      	ldr	r0, [r4, #4]
    9fa2:	2300      	movs	r3, #0
    9fa4:	2101      	movs	r1, #1
    9fa6:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9faa:	3078      	adds	r0, #120	; 0x78
    9fac:	f004 fdfd 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fb0:	2800      	cmp	r0, #0
    9fb2:	d151      	bne.n	a058 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9fb4:	6860      	ldr	r0, [r4, #4]
    9fb6:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    9fba:	f88d 1000 	strb.w	r1, [sp]
    9fbe:	9900      	ldr	r1, [sp, #0]
    9fc0:	9100      	str	r1, [sp, #0]
    9fc2:	f89d 1000 	ldrb.w	r1, [sp]
    9fc6:	b109      	cbz	r1, 9fcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    9fc8:	2002      	movs	r0, #2
    9fca:	e038      	b.n	a03e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9fcc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fd0:	2300      	movs	r3, #0
    9fd2:	4619      	mov	r1, r3
    9fd4:	3078      	adds	r0, #120	; 0x78
    9fd6:	f004 fde8 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fda:	b128      	cbz	r0, 9fe8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    9fdc:	6860      	ldr	r0, [r4, #4]
    9fde:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    9fe2:	b108      	cbz	r0, 9fe8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    9fe4:	2012      	movs	r0, #18
    9fe6:	e02a      	b.n	a03e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9fe8:	6860      	ldr	r0, [r4, #4]
    9fea:	2500      	movs	r5, #0
    9fec:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9ff0:	2a12      	cmp	r2, #18
    9ff2:	d01d      	beq.n	a030 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    9ff4:	dc04      	bgt.n	a000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    9ff6:	2a03      	cmp	r2, #3
    9ff8:	d025      	beq.n	a046 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    9ffa:	2a11      	cmp	r2, #17
    9ffc:	d104      	bne.n	a008 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    9ffe:	e019      	b.n	a034 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    a000:	2a18      	cmp	r2, #24
    a002:	d01b      	beq.n	a03c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    a004:	2a23      	cmp	r2, #35	; 0x23
    a006:	d028      	beq.n	a05a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    a008:	2300      	movs	r3, #0
    a00a:	2104      	movs	r1, #4
    a00c:	3078      	adds	r0, #120	; 0x78
    a00e:	f004 fdcc 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a012:	2800      	cmp	r0, #0
    a014:	d120      	bne.n	a058 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    a016:	6860      	ldr	r0, [r4, #4]
    a018:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a01c:	2919      	cmp	r1, #25
    a01e:	d07c      	beq.n	a11a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    a020:	dc22      	bgt.n	a068 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    a022:	2901      	cmp	r1, #1
    a024:	d02c      	beq.n	a080 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    a026:	2902      	cmp	r1, #2
    a028:	d037      	beq.n	a09a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    a02a:	2903      	cmp	r1, #3
    a02c:	d134      	bne.n	a098 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    a02e:	e022      	b.n	a076 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    a030:	200b      	movs	r0, #11
    a032:	e004      	b.n	a03e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    a034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a038:	f000 bba0 	b.w	a77c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    a03c:	2006      	movs	r0, #6
    a03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a042:	f000 bc87 	b.w	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a046:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    a04a:	7101      	strb	r1, [r0, #4]
    a04c:	2007      	movs	r0, #7
    a04e:	f000 fc81 	bl	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a052:	6860      	ldr	r0, [r4, #4]
    a054:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a058:	bd38      	pop	{r3, r4, r5, pc}
    a05a:	2018      	movs	r0, #24
    a05c:	f000 fc7a 	bl	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a060:	6860      	ldr	r0, [r4, #4]
    a062:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    a066:	bd38      	pop	{r3, r4, r5, pc}
    a068:	291d      	cmp	r1, #29
    a06a:	d018      	beq.n	a09e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    a06c:	291e      	cmp	r1, #30
    a06e:	d016      	beq.n	a09e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    a070:	2921      	cmp	r1, #33	; 0x21
    a072:	d176      	bne.n	a162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    a074:	e056      	b.n	a124 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    a076:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    a07a:	7141      	strb	r1, [r0, #5]
    a07c:	2007      	movs	r0, #7
    a07e:	e07e      	b.n	a17e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    a080:	200c      	movs	r0, #12
    a082:	f000 fc67 	bl	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a086:	6860      	ldr	r0, [r4, #4]
    a088:	f820 5fba 	strh.w	r5, [r0, #186]!
    a08c:	7981      	ldrb	r1, [r0, #6]
    a08e:	f041 0101 	orr.w	r1, r1, #1
    a092:	7181      	strb	r1, [r0, #6]
    a094:	f800 5c34 	strb.w	r5, [r0, #-52]
    a098:	e063      	b.n	a162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    a09a:	2013      	movs	r0, #19
    a09c:	e037      	b.n	a10e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    a09e:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    a0a2:	f88d 2000 	strb.w	r2, [sp]
    a0a6:	9a00      	ldr	r2, [sp, #0]
    a0a8:	9200      	str	r2, [sp, #0]
    a0aa:	f89d 2000 	ldrb.w	r2, [sp]
    a0ae:	bbaa      	cbnz	r2, a11c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    a0b0:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    a0b4:	f88d 2000 	strb.w	r2, [sp]
    a0b8:	9a00      	ldr	r2, [sp, #0]
    a0ba:	9200      	str	r2, [sp, #0]
    a0bc:	f89d 2000 	ldrb.w	r2, [sp]
    a0c0:	b1aa      	cbz	r2, a0ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    a0c2:	2924      	cmp	r1, #36	; 0x24
    a0c4:	d011      	beq.n	a0ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    a0c6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a0ca:	2924      	cmp	r1, #36	; 0x24
    a0cc:	d00d      	beq.n	a0ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    a0ce:	2300      	movs	r3, #0
    a0d0:	f500 7293 	add.w	r2, r0, #294	; 0x126
    a0d4:	f500 7199 	add.w	r1, r0, #306	; 0x132
    a0d8:	f005 f943 	bl	f362 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a0dc:	6860      	ldr	r0, [r4, #4]
    a0de:	211e      	movs	r1, #30
    a0e0:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    a0e4:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    a0e8:	e003      	b.n	a0f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    a0ea:	2301      	movs	r3, #1
    a0ec:	e7f0      	b.n	a0d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    a0ee:	291e      	cmp	r1, #30
    a0f0:	d137      	bne.n	a162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    a0f2:	6860      	ldr	r0, [r4, #4]
    a0f4:	f005 f950 	bl	f398 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a0f8:	f000 f85c 	bl	a1b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    a0fc:	6861      	ldr	r1, [r4, #4]
    a0fe:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    a102:	8bc2      	ldrh	r2, [r0, #30]
    a104:	f821 2ffe 	strh.w	r2, [r1, #254]!
    a108:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    a10a:	8048      	strh	r0, [r1, #2]
    a10c:	2015      	movs	r0, #21
    a10e:	f000 fc21 	bl	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a112:	6860      	ldr	r0, [r4, #4]
    a114:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    a118:	e001      	b.n	a11e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    a11a:	e02f      	b.n	a17c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    a11c:	e021      	b.n	a162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    a11e:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    a122:	e01e      	b.n	a162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    a124:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    a128:	2901      	cmp	r1, #1
    a12a:	d108      	bne.n	a13e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    a12c:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    a130:	f88d 1000 	strb.w	r1, [sp]
    a134:	9900      	ldr	r1, [sp, #0]
    a136:	9100      	str	r1, [sp, #0]
    a138:	f89d 1000 	ldrb.w	r1, [sp]
    a13c:	b121      	cbz	r1, a148 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    a13e:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    a142:	2902      	cmp	r1, #2
    a144:	d005      	beq.n	a152 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    a146:	e00c      	b.n	a162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    a148:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    a14c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    a150:	e002      	b.n	a158 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    a152:	f850 1f62 	ldr.w	r1, [r0, #98]!
    a156:	6840      	ldr	r0, [r0, #4]
    a158:	f000 fc1e 	bl	a998 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    a15c:	2018      	movs	r0, #24
    a15e:	f000 fbf9 	bl	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a162:	6860      	ldr	r0, [r4, #4]
    a164:	3078      	adds	r0, #120	; 0x78
    a166:	f005 fcb6 	bl	fad6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    a16a:	2800      	cmp	r0, #0
    a16c:	f47f af7b 	bne.w	a066 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    a170:	6860      	ldr	r0, [r4, #4]
    a172:	3078      	adds	r0, #120	; 0x78
    a174:	f005 fcaf 	bl	fad6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    a178:	b128      	cbz	r0, a186 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    a17a:	e00f      	b.n	a19c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    a17c:	2011      	movs	r0, #17
    a17e:	f000 fbe9 	bl	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a182:	6860      	ldr	r0, [r4, #4]
    a184:	e7c8      	b.n	a118 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    a186:	6860      	ldr	r0, [r4, #4]
    a188:	2300      	movs	r3, #0
    a18a:	4619      	mov	r1, r3
    a18c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a190:	3078      	adds	r0, #120	; 0x78
    a192:	f004 fd0a 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a196:	b108      	cbz	r0, a19c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    a198:	f000 fa44 	bl	a624 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    a19c:	6860      	ldr	r0, [r4, #4]
    a19e:	3078      	adds	r0, #120	; 0x78
    a1a0:	f005 fc99 	bl	fad6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    a1a4:	2800      	cmp	r0, #0
    a1a6:	d1e1      	bne.n	a16c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    a1a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a1ac:	f7ff be7c 	b.w	9ea8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    a1b0:	2000011c 	.word	0x2000011c
    a1b4:	480a      	ldr	r0, [pc, #40]	; (a1e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    a1b6:	b510      	push	{r4, lr}
    a1b8:	6841      	ldr	r1, [r0, #4]
    a1ba:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    a1be:	2801      	cmp	r0, #1
    a1c0:	d009      	beq.n	a1d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    a1c2:	8808      	ldrh	r0, [r1, #0]
    a1c4:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    a1c8:	312c      	adds	r1, #44	; 0x2c
    a1ca:	f005 f8a6 	bl	f31a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a1ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a1d2:	f7fc bfb5 	b.w	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a1d6:	2002      	movs	r0, #2
    a1d8:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    a1dc:	bd10      	pop	{r4, pc}
    a1de:	0000      	.short	0x0000
    a1e0:	2000011c 	.word	0x2000011c
    a1e4:	b570      	push	{r4, r5, r6, lr}
    a1e6:	4c22      	ldr	r4, [pc, #136]	; (a270 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    a1e8:	f04f 0500 	mov.w	r5, #0
    a1ec:	8861      	ldrh	r1, [r4, #2]
    a1ee:	0748      	lsls	r0, r1, #29
    a1f0:	d510      	bpl.n	a214 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    a1f2:	6860      	ldr	r0, [r4, #4]
    a1f4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a1f8:	2a03      	cmp	r2, #3
    a1fa:	d004      	beq.n	a206 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    a1fc:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a200:	2a07      	cmp	r2, #7
    a202:	d107      	bne.n	a214 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    a204:	e002      	b.n	a20c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    a206:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    a20a:	e026      	b.n	a25a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    a20c:	2201      	movs	r2, #1
    a20e:	7022      	strb	r2, [r4, #0]
    a210:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    a214:	0788      	lsls	r0, r1, #30
    a216:	d508      	bpl.n	a22a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    a218:	68a0      	ldr	r0, [r4, #8]
    a21a:	78c0      	ldrb	r0, [r0, #3]
    a21c:	2819      	cmp	r0, #25
    a21e:	d21a      	bcs.n	a256 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    a220:	4914      	ldr	r1, [pc, #80]	; (a274 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    a222:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    a226:	b1b0      	cbz	r0, a256 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    a228:	4780      	blx	r0
    a22a:	f000 f867 	bl	a2fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    a22e:	f000 f823 	bl	a278 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    a232:	4606      	mov	r6, r0
    a234:	7860      	ldrb	r0, [r4, #1]
    a236:	0700      	lsls	r0, r0, #28
    a238:	d515      	bpl.n	a266 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    a23a:	6860      	ldr	r0, [r4, #4]
    a23c:	2300      	movs	r3, #0
    a23e:	2105      	movs	r1, #5
    a240:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a244:	3078      	adds	r0, #120	; 0x78
    a246:	f004 fcb0 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a24a:	b148      	cbz	r0, a260 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    a24c:	6860      	ldr	r0, [r4, #4]
    a24e:	2608      	movs	r6, #8
    a250:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    a254:	e007      	b.n	a266 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    a256:	f240 61b1 	movw	r1, #1713	; 0x6b1
    a25a:	2036      	movs	r0, #54	; 0x36
    a25c:	f7fa fe30 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a260:	2000      	movs	r0, #0
    a262:	f7fb fddd 	bl	5e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    a266:	6860      	ldr	r0, [r4, #4]
    a268:	f005 fc65 	bl	fb36 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    a26c:	4630      	mov	r0, r6
    a26e:	bd70      	pop	{r4, r5, r6, pc}
    a270:	2000011c 	.word	0x2000011c
    a274:	20000190 	.word	0x20000190
    a278:	b570      	push	{r4, r5, r6, lr}
    a27a:	4c1e      	ldr	r4, [pc, #120]	; (a2f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    a27c:	2000      	movs	r0, #0
    a27e:	78a1      	ldrb	r1, [r4, #2]
    a280:	07c9      	lsls	r1, r1, #31
    a282:	d01b      	beq.n	a2bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    a284:	68e0      	ldr	r0, [r4, #12]
    a286:	2300      	movs	r3, #0
    a288:	2105      	movs	r1, #5
    a28a:	78c5      	ldrb	r5, [r0, #3]
    a28c:	6860      	ldr	r0, [r4, #4]
    a28e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a292:	3078      	adds	r0, #120	; 0x78
    a294:	f004 fc89 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a298:	b188      	cbz	r0, a2be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a29a:	2d06      	cmp	r5, #6
    a29c:	d00f      	beq.n	a2be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a29e:	dc06      	bgt.n	a2ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    a2a0:	2d02      	cmp	r5, #2
    a2a2:	d00c      	beq.n	a2be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a2a4:	2d04      	cmp	r5, #4
    a2a6:	d00a      	beq.n	a2be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a2a8:	2d05      	cmp	r5, #5
    a2aa:	d106      	bne.n	a2ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    a2ac:	e007      	b.n	a2be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a2ae:	2d0b      	cmp	r5, #11
    a2b0:	d005      	beq.n	a2be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a2b2:	2d0d      	cmp	r5, #13
    a2b4:	d003      	beq.n	a2be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a2b6:	2d11      	cmp	r5, #17
    a2b8:	d001      	beq.n	a2be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    a2ba:	2008      	movs	r0, #8
    a2bc:	bd70      	pop	{r4, r5, r6, pc}
    a2be:	68e0      	ldr	r0, [r4, #12]
    a2c0:	f7fc fe2c 	bl	6f1c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    a2c4:	b148      	cbz	r0, a2da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a2c6:	68e0      	ldr	r0, [r4, #12]
    a2c8:	78c0      	ldrb	r0, [r0, #3]
    a2ca:	2819      	cmp	r0, #25
    a2cc:	d205      	bcs.n	a2da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a2ce:	490a      	ldr	r1, [pc, #40]	; (a2f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    a2d0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    a2d4:	b108      	cbz	r0, a2da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    a2d6:	4780      	blx	r0
    a2d8:	e002      	b.n	a2e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    a2da:	2000      	movs	r0, #0
    a2dc:	f000 fbdc 	bl	aa98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    a2e0:	6861      	ldr	r1, [r4, #4]
    a2e2:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    a2e6:	1c52      	adds	r2, r2, #1
    a2e8:	f143 0300 	adc.w	r3, r3, #0
    a2ec:	e9c1 2300 	strd	r2, r3, [r1]
    a2f0:	bd70      	pop	{r4, r5, r6, pc}
    a2f2:	0000      	.short	0x0000
    a2f4:	2000011c 	.word	0x2000011c
    a2f8:	2000012c 	.word	0x2000012c
    a2fc:	b510      	push	{r4, lr}
    a2fe:	4c11      	ldr	r4, [pc, #68]	; (a344 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    a300:	78a0      	ldrb	r0, [r4, #2]
    a302:	0700      	lsls	r0, r0, #28
    a304:	d517      	bpl.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    a306:	6860      	ldr	r0, [r4, #4]
    a308:	2100      	movs	r1, #0
    a30a:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    a30e:	f001 f97b 	bl	b608 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    a312:	6860      	ldr	r0, [r4, #4]
    a314:	3078      	adds	r0, #120	; 0x78
    a316:	f005 fbde 	bl	fad6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    a31a:	b168      	cbz	r0, a338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    a31c:	6860      	ldr	r0, [r4, #4]
    a31e:	21fe      	movs	r1, #254	; 0xfe
    a320:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    a324:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    a328:	2908      	cmp	r1, #8
    a32a:	d104      	bne.n	a336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    a32c:	2102      	movs	r1, #2
    a32e:	7021      	strb	r1, [r4, #0]
    a330:	2100      	movs	r1, #0
    a332:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a336:	bd10      	pop	{r4, pc}
    a338:	f240 61bd 	movw	r1, #1725	; 0x6bd
    a33c:	2036      	movs	r0, #54	; 0x36
    a33e:	f7fa fdbf 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a342:	0000      	.short	0x0000
    a344:	2000011c 	.word	0x2000011c
    a348:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a34a:	4605      	mov	r5, r0
    a34c:	4668      	mov	r0, sp
    a34e:	f7fb fbcf 	bl	5af0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    a352:	b318      	cbz	r0, a39c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    a354:	2222      	movs	r2, #34	; 0x22
    a356:	2100      	movs	r1, #0
    a358:	9800      	ldr	r0, [sp, #0]
    a35a:	f003 fa3b 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    a35e:	2103      	movs	r1, #3
    a360:	9800      	ldr	r0, [sp, #0]
    a362:	f004 fea8 	bl	f0b6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    a366:	9800      	ldr	r0, [sp, #0]
    a368:	7801      	ldrb	r1, [r0, #0]
    a36a:	f021 0110 	bic.w	r1, r1, #16
    a36e:	7001      	strb	r1, [r0, #0]
    a370:	4629      	mov	r1, r5
    a372:	f7fc fde3 	bl	6f3c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    a376:	2100      	movs	r1, #0
    a378:	4c6a      	ldr	r4, [pc, #424]	; (a524 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    a37a:	2d19      	cmp	r5, #25
    a37c:	d270      	bcs.n	a460 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    a37e:	e8df f005 	tbb	[pc, r5]
    a382:	1c24      	.short	0x1c24
    a384:	c9c94c10 	.word	0xc9c94c10
    a388:	c97016c2 	.word	0xc97016c2
    a38c:	c964c2c2 	.word	0xc964c2c2
    a390:	b6c9c9c9 	.word	0xb6c9c9c9
    a394:	8181c2c2 	.word	0x8181c2c2
    a398:	00a3c99a 	.word	0x00a3c99a
    a39c:	f640 014f 	movw	r1, #2127	; 0x84f
    a3a0:	e0bd      	b.n	a51e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    a3a2:	6860      	ldr	r0, [r4, #4]
    a3a4:	9900      	ldr	r1, [sp, #0]
    a3a6:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    a3aa:	7108      	strb	r0, [r1, #4]
    a3ac:	e0ab      	b.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a3ae:	6861      	ldr	r1, [r4, #4]
    a3b0:	9800      	ldr	r0, [sp, #0]
    a3b2:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    a3b6:	7101      	strb	r1, [r0, #4]
    a3b8:	e0a5      	b.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a3ba:	6860      	ldr	r0, [r4, #4]
    a3bc:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    a3c0:	9800      	ldr	r0, [sp, #0]
    a3c2:	1c49      	adds	r1, r1, #1
    a3c4:	f004 fe57 	bl	f076 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    a3c8:	e09d      	b.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a3ca:	6860      	ldr	r0, [r4, #4]
    a3cc:	9d00      	ldr	r5, [sp, #0]
    a3ce:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    a3d2:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    a3d6:	f004 fd6b 	bl	eeb0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    a3da:	7128      	strb	r0, [r5, #4]
    a3dc:	6860      	ldr	r0, [r4, #4]
    a3de:	9d00      	ldr	r5, [sp, #0]
    a3e0:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    a3e4:	c803      	ldmia	r0, {r0, r1}
    a3e6:	f004 fd58 	bl	ee9a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    a3ea:	7168      	strb	r0, [r5, #5]
    a3ec:	0a00      	lsrs	r0, r0, #8
    a3ee:	71a8      	strb	r0, [r5, #6]
    a3f0:	6860      	ldr	r0, [r4, #4]
    a3f2:	9d00      	ldr	r5, [sp, #0]
    a3f4:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    a3f8:	f004 fb8d 	bl	eb16 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    a3fc:	71e8      	strb	r0, [r5, #7]
    a3fe:	0a00      	lsrs	r0, r0, #8
    a400:	7228      	strb	r0, [r5, #8]
    a402:	6862      	ldr	r2, [r4, #4]
    a404:	9800      	ldr	r0, [sp, #0]
    a406:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    a40a:	7241      	strb	r1, [r0, #9]
    a40c:	0a09      	lsrs	r1, r1, #8
    a40e:	7281      	strb	r1, [r0, #10]
    a410:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    a414:	f004 fe34 	bl	f080 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    a418:	e075      	b.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a41a:	6861      	ldr	r1, [r4, #4]
    a41c:	9800      	ldr	r0, [sp, #0]
    a41e:	f201 115b 	addw	r1, r1, #347	; 0x15b
    a422:	f004 fe38 	bl	f096 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    a426:	6861      	ldr	r1, [r4, #4]
    a428:	9800      	ldr	r0, [sp, #0]
    a42a:	f201 1163 	addw	r1, r1, #355	; 0x163
    a42e:	f004 fe2b 	bl	f088 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    a432:	6861      	ldr	r1, [r4, #4]
    a434:	9800      	ldr	r0, [sp, #0]
    a436:	f201 1175 	addw	r1, r1, #373	; 0x175
    a43a:	f004 fe31 	bl	f0a0 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    a43e:	6861      	ldr	r1, [r4, #4]
    a440:	9800      	ldr	r0, [sp, #0]
    a442:	31f0      	adds	r1, #240	; 0xf0
    a444:	f004 fe23 	bl	f08e <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    a448:	e05d      	b.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a44a:	9800      	ldr	r0, [sp, #0]
    a44c:	220b      	movs	r2, #11
    a44e:	7102      	strb	r2, [r0, #4]
    a450:	2259      	movs	r2, #89	; 0x59
    a452:	7142      	strb	r2, [r0, #5]
    a454:	7181      	strb	r1, [r0, #6]
    a456:	21fe      	movs	r1, #254	; 0xfe
    a458:	71c1      	strb	r1, [r0, #7]
    a45a:	2112      	movs	r1, #18
    a45c:	7201      	strb	r1, [r0, #8]
    a45e:	e052      	b.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a460:	e058      	b.n	a514 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    a462:	9101      	str	r1, [sp, #4]
    a464:	9102      	str	r1, [sp, #8]
    a466:	f001 fe5d 	bl	c124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a46a:	f644 112f 	movw	r1, #18735	; 0x492f
    a46e:	4008      	ands	r0, r1
    a470:	f88d 0004 	strb.w	r0, [sp, #4]
    a474:	0a00      	lsrs	r0, r0, #8
    a476:	f88d 0005 	strb.w	r0, [sp, #5]
    a47a:	a901      	add	r1, sp, #4
    a47c:	9800      	ldr	r0, [sp, #0]
    a47e:	f004 fe15 	bl	f0ac <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    a482:	e040      	b.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a484:	6860      	ldr	r0, [r4, #4]
    a486:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    a48a:	9800      	ldr	r0, [sp, #0]
    a48c:	f004 fe25 	bl	f0da <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    a490:	6860      	ldr	r0, [r4, #4]
    a492:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    a496:	9800      	ldr	r0, [sp, #0]
    a498:	f004 fe23 	bl	f0e2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    a49c:	6860      	ldr	r0, [r4, #4]
    a49e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    a4a2:	9800      	ldr	r0, [sp, #0]
    a4a4:	f004 fe11 	bl	f0ca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    a4a8:	6860      	ldr	r0, [r4, #4]
    a4aa:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    a4ae:	9800      	ldr	r0, [sp, #0]
    a4b0:	f004 fe0f 	bl	f0d2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    a4b4:	e027      	b.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a4b6:	6861      	ldr	r1, [r4, #4]
    a4b8:	9800      	ldr	r0, [sp, #0]
    a4ba:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    a4be:	7102      	strb	r2, [r0, #4]
    a4c0:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    a4c4:	7141      	strb	r1, [r0, #5]
    a4c6:	e01e      	b.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a4c8:	6860      	ldr	r0, [r4, #4]
    a4ca:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    a4ce:	f004 fc10 	bl	ecf2 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    a4d2:	4601      	mov	r1, r0
    a4d4:	9800      	ldr	r0, [sp, #0]
    a4d6:	f004 fe0c 	bl	f0f2 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    a4da:	6860      	ldr	r0, [r4, #4]
    a4dc:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    a4e0:	f004 fc07 	bl	ecf2 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    a4e4:	4601      	mov	r1, r0
    a4e6:	9800      	ldr	r0, [sp, #0]
    a4e8:	f004 fded 	bl	f0c6 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    a4ec:	e00b      	b.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    a4ee:	6860      	ldr	r0, [r4, #4]
    a4f0:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    a4f4:	9800      	ldr	r0, [sp, #0]
    a4f6:	f004 fdba 	bl	f06e <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    a4fa:	6860      	ldr	r0, [r4, #4]
    a4fc:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    a500:	9800      	ldr	r0, [sp, #0]
    a502:	f004 fdb6 	bl	f072 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    a506:	f7fb facd 	bl	5aa4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    a50a:	b130      	cbz	r0, a51a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    a50c:	9800      	ldr	r0, [sp, #0]
    a50e:	f7ff fcb1 	bl	9e74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    a512:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a514:	f640 01db 	movw	r1, #2267	; 0x8db
    a518:	e001      	b.n	a51e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    a51a:	f640 01e1 	movw	r1, #2273	; 0x8e1
    a51e:	2036      	movs	r0, #54	; 0x36
    a520:	f7fa fcce 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a524:	2000011c 	.word	0x2000011c
    a528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a52c:	4c27      	ldr	r4, [pc, #156]	; (a5cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    a52e:	4680      	mov	r8, r0
    a530:	460d      	mov	r5, r1
    a532:	8860      	ldrh	r0, [r4, #2]
    a534:	f04f 0600 	mov.w	r6, #0
    a538:	05c1      	lsls	r1, r0, #23
    a53a:	4620      	mov	r0, r4
    a53c:	6840      	ldr	r0, [r0, #4]
    a53e:	d502      	bpl.n	a546 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    a540:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    a544:	e004      	b.n	a550 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    a546:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    a54a:	1c49      	adds	r1, r1, #1
    a54c:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    a550:	f005 fb4c 	bl	fbec <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    a554:	2701      	movs	r7, #1
    a556:	b1e0      	cbz	r0, a592 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a558:	8860      	ldrh	r0, [r4, #2]
    a55a:	0500      	lsls	r0, r0, #20
    a55c:	d506      	bpl.n	a56c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    a55e:	6860      	ldr	r0, [r4, #4]
    a560:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    a564:	b111      	cbz	r1, a56c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    a566:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    a56a:	e012      	b.n	a592 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a56c:	6860      	ldr	r0, [r4, #4]
    a56e:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    a572:	1c49      	adds	r1, r1, #1
    a574:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    a578:	f005 face 	bl	fb18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    a57c:	6860      	ldr	r0, [r4, #4]
    a57e:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    a582:	4291      	cmp	r1, r2
    a584:	d305      	bcc.n	a592 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    a586:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    a58a:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    a58e:	f7fc fdd7 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a592:	8860      	ldrh	r0, [r4, #2]
    a594:	f410 7f40 	tst.w	r0, #768	; 0x300
    a598:	d008      	beq.n	a5ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    a59a:	6860      	ldr	r0, [r4, #4]
    a59c:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    a5a0:	b921      	cbnz	r1, a5ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    a5a2:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    a5a6:	2101      	movs	r1, #1
    a5a8:	f7fe fa6c 	bl	8a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a5ac:	ea58 0005 	orrs.w	r0, r8, r5
    a5b0:	d104      	bne.n	a5bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    a5b2:	f7ff fe17 	bl	a1e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    a5b6:	4605      	mov	r5, r0
    a5b8:	f7ff fcea 	bl	9f90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    a5bc:	4629      	mov	r1, r5
    a5be:	4640      	mov	r0, r8
    a5c0:	f000 ff7a 	bl	b4b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    a5c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    a5c8:	f7fb ba56 	b.w	5a78 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    a5cc:	2000011c 	.word	0x2000011c
    a5d0:	4813      	ldr	r0, [pc, #76]	; (a620 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    a5d2:	6840      	ldr	r0, [r0, #4]
    a5d4:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    a5d8:	b129      	cbz	r1, a5e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    a5da:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    a5de:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    a5e2:	4291      	cmp	r1, r2
    a5e4:	d215      	bcs.n	a612 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a5e6:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    a5ea:	b129      	cbz	r1, a5f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    a5ec:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    a5f0:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    a5f4:	4291      	cmp	r1, r2
    a5f6:	d20c      	bcs.n	a612 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a5f8:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    a5fc:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    a600:	428a      	cmp	r2, r1
    a602:	d206      	bcs.n	a612 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a604:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    a608:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    a60c:	b11a      	cbz	r2, a616 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    a60e:	4288      	cmp	r0, r1
    a610:	d303      	bcc.n	a61a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    a612:	2001      	movs	r0, #1
    a614:	4770      	bx	lr
    a616:	2806      	cmp	r0, #6
    a618:	d2fb      	bcs.n	a612 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    a61a:	2000      	movs	r0, #0
    a61c:	4770      	bx	lr
    a61e:	0000      	.short	0x0000
    a620:	2000011c 	.word	0x2000011c
    a624:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    a626:	4c54      	ldr	r4, [pc, #336]	; (a778 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    a628:	6860      	ldr	r0, [r4, #4]
    a62a:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    a62e:	f88d 1000 	strb.w	r1, [sp]
    a632:	9900      	ldr	r1, [sp, #0]
    a634:	9100      	str	r1, [sp, #0]
    a636:	f89d 1000 	ldrb.w	r1, [sp]
    a63a:	b129      	cbz	r1, a648 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    a63c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a640:	f004 fb0c 	bl	ec5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a644:	2800      	cmp	r0, #0
    a646:	d00a      	beq.n	a65e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    a648:	6860      	ldr	r0, [r4, #4]
    a64a:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    a64e:	b181      	cbz	r1, a672 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    a650:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    a654:	b149      	cbz	r1, a66a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    a656:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    a65a:	b108      	cbz	r0, a660 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    a65c:	200a      	movs	r0, #10
    a65e:	e087      	b.n	a770 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a660:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    a664:	2036      	movs	r0, #54	; 0x36
    a666:	f7fa fc2b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a66a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a66e:	f000 b885 	b.w	a77c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    a672:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    a676:	b109      	cbz	r1, a67c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    a678:	2008      	movs	r0, #8
    a67a:	e079      	b.n	a770 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a67c:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    a680:	2500      	movs	r5, #0
    a682:	b181      	cbz	r1, a6a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    a684:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    a688:	0780      	lsls	r0, r0, #30
    a68a:	d10b      	bne.n	a6a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a68c:	200c      	movs	r0, #12
    a68e:	f000 f961 	bl	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a692:	6860      	ldr	r0, [r4, #4]
    a694:	2101      	movs	r1, #1
    a696:	f820 5fb4 	strh.w	r5, [r0, #180]!
    a69a:	7101      	strb	r1, [r0, #4]
    a69c:	7b01      	ldrb	r1, [r0, #12]
    a69e:	f041 0101 	orr.w	r1, r1, #1
    a6a2:	7301      	strb	r1, [r0, #12]
    a6a4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    a6a6:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    a6aa:	f88d 1004 	strb.w	r1, [sp, #4]
    a6ae:	9901      	ldr	r1, [sp, #4]
    a6b0:	9101      	str	r1, [sp, #4]
    a6b2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a6b6:	b141      	cbz	r1, a6ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    a6b8:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    a6bc:	f88d 1000 	strb.w	r1, [sp]
    a6c0:	9900      	ldr	r1, [sp, #0]
    a6c2:	9100      	str	r1, [sp, #0]
    a6c4:	f89d 1000 	ldrb.w	r1, [sp]
    a6c8:	b391      	cbz	r1, a730 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    a6ca:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    a6ce:	2901      	cmp	r1, #1
    a6d0:	d1e8      	bne.n	a6a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a6d2:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    a6d6:	f88d 1000 	strb.w	r1, [sp]
    a6da:	9900      	ldr	r1, [sp, #0]
    a6dc:	9100      	str	r1, [sp, #0]
    a6de:	f89d 1000 	ldrb.w	r1, [sp]
    a6e2:	2900      	cmp	r1, #0
    a6e4:	d1de      	bne.n	a6a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a6e6:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    a6ea:	f004 fab7 	bl	ec5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    a6ee:	2800      	cmp	r0, #0
    a6f0:	d1d8      	bne.n	a6a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    a6f2:	6860      	ldr	r0, [r4, #4]
    a6f4:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    a6f8:	f005 f9f5 	bl	fae6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a6fc:	4605      	mov	r5, r0
    a6fe:	6860      	ldr	r0, [r4, #4]
    a700:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    a704:	f005 f9ef 	bl	fae6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a708:	4606      	mov	r6, r0
    a70a:	6860      	ldr	r0, [r4, #4]
    a70c:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    a710:	4628      	mov	r0, r5
    a712:	f005 f9f3 	bl	fafc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    a716:	b350      	cbz	r0, a76e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    a718:	6860      	ldr	r0, [r4, #4]
    a71a:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    a71e:	4630      	mov	r0, r6
    a720:	f005 f9ec 	bl	fafc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    a724:	b318      	cbz	r0, a76e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    a726:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a72a:	2000      	movs	r0, #0
    a72c:	f000 b8ee 	b.w	a90c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a730:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    a734:	2924      	cmp	r1, #36	; 0x24
    a736:	d018      	beq.n	a76a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    a738:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a73c:	2924      	cmp	r1, #36	; 0x24
    a73e:	d014      	beq.n	a76a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    a740:	f05f 0300 	movs.w	r3, #0
    a744:	f500 7293 	add.w	r2, r0, #294	; 0x126
    a748:	f500 7199 	add.w	r1, r0, #306	; 0x132
    a74c:	f004 fe09 	bl	f362 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    a750:	6860      	ldr	r0, [r4, #4]
    a752:	4602      	mov	r2, r0
    a754:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    a758:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    a75c:	8bc8      	ldrh	r0, [r1, #30]
    a75e:	f822 0ffe 	strh.w	r0, [r2, #254]!
    a762:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    a764:	8050      	strh	r0, [r2, #2]
    a766:	2014      	movs	r0, #20
    a768:	e002      	b.n	a770 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    a76a:	2301      	movs	r3, #1
    a76c:	e7ea      	b.n	a744 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    a76e:	2016      	movs	r0, #22
    a770:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    a774:	f000 b8ee 	b.w	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a778:	2000011c 	.word	0x2000011c
    a77c:	b510      	push	{r4, lr}
    a77e:	4c1e      	ldr	r4, [pc, #120]	; (a7f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    a780:	6862      	ldr	r2, [r4, #4]
    a782:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    a786:	2808      	cmp	r0, #8
    a788:	d20d      	bcs.n	a7a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    a78a:	f1c0 0108 	rsb	r1, r0, #8
    a78e:	4410      	add	r0, r2
    a790:	b2c9      	uxtb	r1, r1
    a792:	f200 1075 	addw	r0, r0, #373	; 0x175
    a796:	f7fa fc21 	bl	4fdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a79a:	6861      	ldr	r1, [r4, #4]
    a79c:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a7a0:	4410      	add	r0, r2
    a7a2:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a7a6:	6862      	ldr	r2, [r4, #4]
    a7a8:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    a7ac:	3808      	subs	r0, #8
    a7ae:	2804      	cmp	r0, #4
    a7b0:	d20c      	bcs.n	a7cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    a7b2:	f1c0 0104 	rsb	r1, r0, #4
    a7b6:	4410      	add	r0, r2
    a7b8:	b2c9      	uxtb	r1, r1
    a7ba:	30f0      	adds	r0, #240	; 0xf0
    a7bc:	f7fa fc0e 	bl	4fdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    a7c0:	6861      	ldr	r1, [r4, #4]
    a7c2:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    a7c6:	4410      	add	r0, r2
    a7c8:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    a7cc:	6860      	ldr	r0, [r4, #4]
    a7ce:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    a7d2:	290c      	cmp	r1, #12
    a7d4:	d30e      	bcc.n	a7f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    a7d6:	d005      	beq.n	a7e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    a7d8:	f640 1131 	movw	r1, #2353	; 0x931
    a7dc:	f04f 0036 	mov.w	r0, #54	; 0x36
    a7e0:	f7fa fb6e 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a7e4:	2100      	movs	r1, #0
    a7e6:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    a7ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a7ee:	2003      	movs	r0, #3
    a7f0:	f000 b8b0 	b.w	a954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    a7f4:	bd10      	pop	{r4, pc}
    a7f6:	0000      	.short	0x0000
    a7f8:	2000011c 	.word	0x2000011c
    a7fc:	b570      	push	{r4, r5, r6, lr}
    a7fe:	4b20      	ldr	r3, [pc, #128]	; (a880 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    a800:	4602      	mov	r2, r0
    a802:	460c      	mov	r4, r1
    a804:	8858      	ldrh	r0, [r3, #2]
    a806:	4310      	orrs	r0, r2
    a808:	8058      	strh	r0, [r3, #2]
    a80a:	4618      	mov	r0, r3
    a80c:	0791      	lsls	r1, r2, #30
    a80e:	6840      	ldr	r0, [r0, #4]
    a810:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    a814:	d507      	bpl.n	a826 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    a816:	b121      	cbz	r1, a822 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    a818:	f640 21c5 	movw	r1, #2757	; 0xac5
    a81c:	2036      	movs	r0, #54	; 0x36
    a81e:	f7fa fb4f 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a822:	609c      	str	r4, [r3, #8]
    a824:	e003      	b.n	a82e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    a826:	b101      	cbz	r1, a82a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    a828:	60dc      	str	r4, [r3, #12]
    a82a:	0791      	lsls	r1, r2, #30
    a82c:	d515      	bpl.n	a85a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a82e:	78e1      	ldrb	r1, [r4, #3]
    a830:	2906      	cmp	r1, #6
    a832:	d002      	beq.n	a83a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    a834:	290b      	cmp	r1, #11
    a836:	d110      	bne.n	a85a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a838:	e008      	b.n	a84c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    a83a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a83e:	2918      	cmp	r1, #24
    a840:	d10b      	bne.n	a85a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a842:	2100      	movs	r1, #0
    a844:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    a848:	2101      	movs	r1, #1
    a84a:	e004      	b.n	a856 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    a84c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a850:	2912      	cmp	r1, #18
    a852:	d102      	bne.n	a85a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    a854:	2100      	movs	r1, #0
    a856:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    a85a:	0691      	lsls	r1, r2, #26
    a85c:	d501      	bpl.n	a862 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    a85e:	2108      	movs	r1, #8
    a860:	7059      	strb	r1, [r3, #1]
    a862:	0611      	lsls	r1, r2, #24
    a864:	d50a      	bpl.n	a87c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    a866:	8a82      	ldrh	r2, [r0, #20]
    a868:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    a86c:	4620      	mov	r0, r4
    a86e:	f7ff fae3 	bl	9e38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    a872:	4620      	mov	r0, r4
    a874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a878:	f7ff bafc 	b.w	9e74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    a87c:	bd70      	pop	{r4, r5, r6, pc}
    a87e:	0000      	.short	0x0000
    a880:	2000011c 	.word	0x2000011c
    a884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a888:	4c1f      	ldr	r4, [pc, #124]	; (a908 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    a88a:	2501      	movs	r5, #1
    a88c:	6862      	ldr	r2, [r4, #4]
    a88e:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    a892:	b908      	cbnz	r0, a898 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    a894:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    a898:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    a89c:	b909      	cbnz	r1, a8a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    a89e:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    a8a2:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    a8a6:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    a8aa:	3262      	adds	r2, #98	; 0x62
    a8ac:	2001      	movs	r0, #1
    a8ae:	7290      	strb	r0, [r2, #10]
    a8b0:	2000      	movs	r0, #0
    a8b2:	f000 f82b 	bl	a90c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a8b6:	6860      	ldr	r0, [r4, #4]
    a8b8:	302c      	adds	r0, #44	; 0x2c
    a8ba:	f004 fdc1 	bl	f440 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a8be:	4606      	mov	r6, r0
    a8c0:	6860      	ldr	r0, [r4, #4]
    a8c2:	f004 fd69 	bl	f398 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    a8c6:	b1c0      	cbz	r0, a8fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a8c8:	6860      	ldr	r0, [r4, #4]
    a8ca:	302c      	adds	r0, #44	; 0x2c
    a8cc:	f004 fdb8 	bl	f440 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    a8d0:	6861      	ldr	r1, [r4, #4]
    a8d2:	4607      	mov	r7, r0
    a8d4:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    a8d8:	8808      	ldrh	r0, [r1, #0]
    a8da:	312c      	adds	r1, #44	; 0x2c
    a8dc:	f004 fd1d 	bl	f31a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    a8e0:	42be      	cmp	r6, r7
    a8e2:	d20a      	bcs.n	a8fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a8e4:	f7f7 fed4 	bl	2690 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    a8e8:	4601      	mov	r1, r0
    a8ea:	1bb8      	subs	r0, r7, r6
    a8ec:	2865      	cmp	r0, #101	; 0x65
    a8ee:	d200      	bcs.n	a8f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    a8f0:	2065      	movs	r0, #101	; 0x65
    a8f2:	f7f7 fdc1 	bl	2478 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    a8f6:	b100      	cbz	r0, a8fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    a8f8:	2500      	movs	r5, #0
    a8fa:	2104      	movs	r1, #4
    a8fc:	6860      	ldr	r0, [r4, #4]
    a8fe:	f7fe f8c1 	bl	8a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a902:	4628      	mov	r0, r5
    a904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a908:	2000011c 	.word	0x2000011c
    a90c:	b510      	push	{r4, lr}
    a90e:	4c10      	ldr	r4, [pc, #64]	; (a950 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    a910:	6861      	ldr	r1, [r4, #4]
    a912:	880a      	ldrh	r2, [r1, #0]
    a914:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    a918:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    a91c:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    a920:	f005 f8e1 	bl	fae6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a924:	6861      	ldr	r1, [r4, #4]
    a926:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    a92a:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    a92e:	f005 f8da 	bl	fae6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    a932:	6862      	ldr	r2, [r4, #4]
    a934:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    a938:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    a93c:	2001      	movs	r0, #1
    a93e:	7008      	strb	r0, [r1, #0]
    a940:	2000      	movs	r0, #0
    a942:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    a946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a94a:	f7fc bbf9 	b.w	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a94e:	0000      	.short	0x0000
    a950:	2000011c 	.word	0x2000011c
    a954:	490f      	ldr	r1, [pc, #60]	; (a994 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    a956:	280c      	cmp	r0, #12
    a958:	6849      	ldr	r1, [r1, #4]
    a95a:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    a95e:	d014      	beq.n	a98a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a960:	2813      	cmp	r0, #19
    a962:	d012      	beq.n	a98a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a964:	2818      	cmp	r0, #24
    a966:	d010      	beq.n	a98a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a968:	2200      	movs	r2, #0
    a96a:	2811      	cmp	r0, #17
    a96c:	d00e      	beq.n	a98c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    a96e:	2807      	cmp	r0, #7
    a970:	d00b      	beq.n	a98a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a972:	2815      	cmp	r0, #21
    a974:	d00a      	beq.n	a98c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    a976:	2801      	cmp	r0, #1
    a978:	d007      	beq.n	a98a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a97a:	2800      	cmp	r0, #0
    a97c:	d005      	beq.n	a98a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a97e:	2802      	cmp	r0, #2
    a980:	d003      	beq.n	a98a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    a982:	f821 2fb4 	strh.w	r2, [r1, #180]!
    a986:	2001      	movs	r0, #1
    a988:	7108      	strb	r0, [r1, #4]
    a98a:	4770      	bx	lr
    a98c:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    a990:	4770      	bx	lr
    a992:	0000      	.short	0x0000
    a994:	2000011c 	.word	0x2000011c
    a998:	b538      	push	{r3, r4, r5, lr}
    a99a:	4c11      	ldr	r4, [pc, #68]	; (a9e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    a99c:	6862      	ldr	r2, [r4, #4]
    a99e:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    a9a2:	f8ad 2000 	strh.w	r2, [sp]
    a9a6:	f004 f9d9 	bl	ed5c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    a9aa:	f89d 3000 	ldrb.w	r3, [sp]
    a9ae:	b2c2      	uxtb	r2, r0
    a9b0:	2100      	movs	r1, #0
    a9b2:	4293      	cmp	r3, r2
    a9b4:	d003      	beq.n	a9be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    a9b6:	6863      	ldr	r3, [r4, #4]
    a9b8:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    a9bc:	e002      	b.n	a9c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    a9be:	6862      	ldr	r2, [r4, #4]
    a9c0:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    a9c4:	f89d 2001 	ldrb.w	r2, [sp, #1]
    a9c8:	f3c0 2007 	ubfx	r0, r0, #8, #8
    a9cc:	4282      	cmp	r2, r0
    a9ce:	d003      	beq.n	a9d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    a9d0:	6861      	ldr	r1, [r4, #4]
    a9d2:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    a9d6:	bd38      	pop	{r3, r4, r5, pc}
    a9d8:	6860      	ldr	r0, [r4, #4]
    a9da:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    a9de:	bd38      	pop	{r3, r4, r5, pc}
    a9e0:	2000011c 	.word	0x2000011c
    a9e4:	b510      	push	{r4, lr}
    a9e6:	4c0c      	ldr	r4, [pc, #48]	; (aa18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    a9e8:	6861      	ldr	r1, [r4, #4]
    a9ea:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    a9ee:	2813      	cmp	r0, #19
    a9f0:	d001      	beq.n	a9f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    a9f2:	2002      	movs	r0, #2
    a9f4:	bd10      	pop	{r4, pc}
    a9f6:	f201 117d 	addw	r1, r1, #381	; 0x17d
    a9fa:	68e0      	ldr	r0, [r4, #12]
    a9fc:	f004 fae9 	bl	efd2 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    aa00:	6861      	ldr	r1, [r4, #4]
    aa02:	68e0      	ldr	r0, [r4, #12]
    aa04:	31f4      	adds	r1, #244	; 0xf4
    aa06:	f004 fae1 	bl	efcc <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    aa0a:	6861      	ldr	r1, [r4, #4]
    aa0c:	2016      	movs	r0, #22
    aa0e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    aa12:	2000      	movs	r0, #0
    aa14:	bd10      	pop	{r4, pc}
    aa16:	0000      	.short	0x0000
    aa18:	2000011c 	.word	0x2000011c
    aa1c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    aa1e:	4c1d      	ldr	r4, [pc, #116]	; (aa94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    aa20:	2300      	movs	r3, #0
    aa22:	2107      	movs	r1, #7
    aa24:	6860      	ldr	r0, [r4, #4]
    aa26:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aa2a:	3078      	adds	r0, #120	; 0x78
    aa2c:	f004 f8bd 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aa30:	b370      	cbz	r0, aa90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    aa32:	4669      	mov	r1, sp
    aa34:	68e0      	ldr	r0, [r4, #12]
    aa36:	f004 fad1 	bl	efdc <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    aa3a:	f001 fb73 	bl	c124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    aa3e:	f644 112f 	movw	r1, #18735	; 0x492f
    aa42:	4008      	ands	r0, r1
    aa44:	f89d 2000 	ldrb.w	r2, [sp]
    aa48:	6861      	ldr	r1, [r4, #4]
    aa4a:	4002      	ands	r2, r0
    aa4c:	2500      	movs	r5, #0
    aa4e:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    aa52:	f89d 2001 	ldrb.w	r2, [sp, #1]
    aa56:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    aa5a:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    aa5e:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    aa62:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    aa66:	8808      	ldrh	r0, [r1, #0]
    aa68:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    aa6c:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    aa70:	9a00      	ldr	r2, [sp, #0]
    aa72:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    aa76:	9a01      	ldr	r2, [sp, #4]
    aa78:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    aa7c:	2001      	movs	r0, #1
    aa7e:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    aa82:	f7fc fb5d 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aa86:	6860      	ldr	r0, [r4, #4]
    aa88:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    aa8c:	2000      	movs	r0, #0
    aa8e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    aa90:	2001      	movs	r0, #1
    aa92:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    aa94:	2000011c 	.word	0x2000011c
    aa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aa9c:	4c19      	ldr	r4, [pc, #100]	; (ab04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    aa9e:	2600      	movs	r6, #0
    aaa0:	2703      	movs	r7, #3
    aaa2:	f8d4 c004 	ldr.w	ip, [r4, #4]
    aaa6:	2501      	movs	r5, #1
    aaa8:	b1a0      	cbz	r0, aad4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    aaaa:	68e0      	ldr	r0, [r4, #12]
    aaac:	78c0      	ldrb	r0, [r0, #3]
    aaae:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    aab2:	fa05 f000 	lsl.w	r0, r5, r0
    aab6:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    aaba:	b130      	cbz	r0, aaca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    aabc:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    aac0:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    aac4:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    aac8:	e017      	b.n	aafa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    aaca:	f240 5143 	movw	r1, #1347	; 0x543
    aace:	2036      	movs	r0, #54	; 0x36
    aad0:	f7fa f9f6 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    aad4:	2300      	movs	r3, #0
    aad6:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    aada:	4619      	mov	r1, r3
    aadc:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    aae0:	f004 f863 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    aae4:	b160      	cbz	r0, ab00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    aae6:	68e0      	ldr	r0, [r4, #12]
    aae8:	78c1      	ldrb	r1, [r0, #3]
    aaea:	6860      	ldr	r0, [r4, #4]
    aaec:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    aaf0:	f800 7f86 	strb.w	r7, [r0, #134]!
    aaf4:	8686      	strh	r6, [r0, #52]	; 0x34
    aaf6:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    aafa:	2000      	movs	r0, #0
    aafc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ab00:	2001      	movs	r0, #1
    ab02:	e7fb      	b.n	aafc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    ab04:	2000011c 	.word	0x2000011c
    ab08:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ab0c:	4c30      	ldr	r4, [pc, #192]	; (abd0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    ab0e:	2300      	movs	r3, #0
    ab10:	4619      	mov	r1, r3
    ab12:	6860      	ldr	r0, [r4, #4]
    ab14:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    ab18:	3078      	adds	r0, #120	; 0x78
    ab1a:	f004 f846 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ab1e:	b308      	cbz	r0, ab64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    ab20:	68e0      	ldr	r0, [r4, #12]
    ab22:	f004 fa70 	bl	f006 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    ab26:	b300      	cbz	r0, ab6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    ab28:	68e0      	ldr	r0, [r4, #12]
    ab2a:	f004 fa62 	bl	eff2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    ab2e:	4607      	mov	r7, r0
    ab30:	68e0      	ldr	r0, [r4, #12]
    ab32:	f004 fa62 	bl	effa <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    ab36:	4606      	mov	r6, r0
    ab38:	68e0      	ldr	r0, [r4, #12]
    ab3a:	f004 fa58 	bl	efee <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    ab3e:	4605      	mov	r5, r0
    ab40:	68e0      	ldr	r0, [r4, #12]
    ab42:	f004 fa58 	bl	eff6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    ab46:	4601      	mov	r1, r0
    ab48:	9700      	str	r7, [sp, #0]
    ab4a:	6860      	ldr	r0, [r4, #4]
    ab4c:	4633      	mov	r3, r6
    ab4e:	462a      	mov	r2, r5
    ab50:	302c      	adds	r0, #44	; 0x2c
    ab52:	f004 fcaf 	bl	f4b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    ab56:	6861      	ldr	r1, [r4, #4]
    ab58:	2501      	movs	r5, #1
    ab5a:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    ab5e:	281c      	cmp	r0, #28
    ab60:	d008      	beq.n	ab74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    ab62:	e009      	b.n	ab78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    ab64:	2001      	movs	r0, #1
    ab66:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    ab6a:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    ab6e:	2000      	movs	r0, #0
    ab70:	f7ff bf92 	b.w	aa98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    ab74:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    ab78:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    ab7c:	2801      	cmp	r0, #1
    ab7e:	d011      	beq.n	aba4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    ab80:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    ab84:	f88d 0004 	strb.w	r0, [sp, #4]
    ab88:	9801      	ldr	r0, [sp, #4]
    ab8a:	9001      	str	r0, [sp, #4]
    ab8c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ab90:	b940      	cbnz	r0, aba4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    ab92:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    ab96:	f88d 0000 	strb.w	r0, [sp]
    ab9a:	9800      	ldr	r0, [sp, #0]
    ab9c:	9000      	str	r0, [sp, #0]
    ab9e:	f89d 0000 	ldrb.w	r0, [sp]
    aba2:	b118      	cbz	r0, abac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    aba4:	201e      	movs	r0, #30
    aba6:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    abaa:	e00a      	b.n	abc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    abac:	201d      	movs	r0, #29
    abae:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    abb2:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    abb6:	f831 0b2c 	ldrh.w	r0, [r1], #44
    abba:	f004 fc82 	bl	f4c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    abbe:	f7fc fabf 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    abc2:	6860      	ldr	r0, [r4, #4]
    abc4:	2100      	movs	r1, #0
    abc6:	f820 1fba 	strh.w	r1, [r0, #186]!
    abca:	7085      	strb	r5, [r0, #2]
    abcc:	4608      	mov	r0, r1
    abce:	e7ca      	b.n	ab66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    abd0:	2000011c 	.word	0x2000011c
    abd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abd6:	4c1a      	ldr	r4, [pc, #104]	; (ac40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    abd8:	2300      	movs	r3, #0
    abda:	210a      	movs	r1, #10
    abdc:	6860      	ldr	r0, [r4, #4]
    abde:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    abe2:	3078      	adds	r0, #120	; 0x78
    abe4:	f003 ffe1 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    abe8:	b338      	cbz	r0, ac3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    abea:	68e0      	ldr	r0, [r4, #12]
    abec:	f004 fa0b 	bl	f006 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    abf0:	b1c8      	cbz	r0, ac26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    abf2:	68e0      	ldr	r0, [r4, #12]
    abf4:	f004 f9fd 	bl	eff2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    abf8:	4607      	mov	r7, r0
    abfa:	68e0      	ldr	r0, [r4, #12]
    abfc:	f004 f9fd 	bl	effa <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    ac00:	4606      	mov	r6, r0
    ac02:	68e0      	ldr	r0, [r4, #12]
    ac04:	f004 f9f3 	bl	efee <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    ac08:	4605      	mov	r5, r0
    ac0a:	68e0      	ldr	r0, [r4, #12]
    ac0c:	f004 f9f3 	bl	eff6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    ac10:	4601      	mov	r1, r0
    ac12:	9700      	str	r7, [sp, #0]
    ac14:	6860      	ldr	r0, [r4, #4]
    ac16:	4633      	mov	r3, r6
    ac18:	462a      	mov	r2, r5
    ac1a:	302c      	adds	r0, #44	; 0x2c
    ac1c:	f004 fc4a 	bl	f4b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    ac20:	6860      	ldr	r0, [r4, #4]
    ac22:	f004 fbb9 	bl	f398 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    ac26:	6861      	ldr	r1, [r4, #4]
    ac28:	2000      	movs	r0, #0
    ac2a:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    ac2e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    ac32:	f7ff fabf 	bl	a1b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    ac36:	2000      	movs	r0, #0
    ac38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac3a:	2001      	movs	r0, #1
    ac3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac3e:	0000      	.short	0x0000
    ac40:	2000011c 	.word	0x2000011c
    ac44:	b510      	push	{r4, lr}
    ac46:	4c0b      	ldr	r4, [pc, #44]	; (ac74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    ac48:	2300      	movs	r3, #0
    ac4a:	4619      	mov	r1, r3
    ac4c:	6860      	ldr	r0, [r4, #4]
    ac4e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    ac52:	3078      	adds	r0, #120	; 0x78
    ac54:	f003 ffa9 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac58:	b150      	cbz	r0, ac70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    ac5a:	6860      	ldr	r0, [r4, #4]
    ac5c:	2100      	movs	r1, #0
    ac5e:	f820 1fba 	strh.w	r1, [r0, #186]!
    ac62:	2101      	movs	r1, #1
    ac64:	7081      	strb	r1, [r0, #2]
    ac66:	2102      	movs	r1, #2
    ac68:	f800 1c34 	strb.w	r1, [r0, #-52]
    ac6c:	2000      	movs	r0, #0
    ac6e:	bd10      	pop	{r4, pc}
    ac70:	2001      	movs	r0, #1
    ac72:	bd10      	pop	{r4, pc}
    ac74:	2000011c 	.word	0x2000011c
    ac78:	b510      	push	{r4, lr}
    ac7a:	4c09      	ldr	r4, [pc, #36]	; (aca0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    ac7c:	2300      	movs	r3, #0
    ac7e:	2109      	movs	r1, #9
    ac80:	6860      	ldr	r0, [r4, #4]
    ac82:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ac86:	3078      	adds	r0, #120	; 0x78
    ac88:	f003 ff8f 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ac8c:	2800      	cmp	r0, #0
    ac8e:	d006      	beq.n	ac9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    ac90:	6861      	ldr	r1, [r4, #4]
    ac92:	2000      	movs	r0, #0
    ac94:	f801 0fac 	strb.w	r0, [r1, #172]!
    ac98:	7308      	strb	r0, [r1, #12]
    ac9a:	f801 0c27 	strb.w	r0, [r1, #-39]
    ac9e:	bd10      	pop	{r4, pc}
    aca0:	2000011c 	.word	0x2000011c
    aca4:	4807      	ldr	r0, [pc, #28]	; (acc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    aca6:	6840      	ldr	r0, [r0, #4]
    aca8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    acac:	290f      	cmp	r1, #15
    acae:	d001      	beq.n	acb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    acb0:	2002      	movs	r0, #2
    acb2:	4770      	bx	lr
    acb4:	2100      	movs	r1, #0
    acb6:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    acba:	2112      	movs	r1, #18
    acbc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    acc0:	2000      	movs	r0, #0
    acc2:	4770      	bx	lr
    acc4:	2000011c 	.word	0x2000011c
    acc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    acca:	4c42      	ldr	r4, [pc, #264]	; (add4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    accc:	2600      	movs	r6, #0
    acce:	b087      	sub	sp, #28
    acd0:	6860      	ldr	r0, [r4, #4]
    acd2:	4633      	mov	r3, r6
    acd4:	4631      	mov	r1, r6
    acd6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    acda:	3078      	adds	r0, #120	; 0x78
    acdc:	f003 ff65 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ace0:	b180      	cbz	r0, ad04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    ace2:	6860      	ldr	r0, [r4, #4]
    ace4:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    ace8:	2823      	cmp	r0, #35	; 0x23
    acea:	d00e      	beq.n	ad0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    acec:	2824      	cmp	r0, #36	; 0x24
    acee:	d00c      	beq.n	ad0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    acf0:	4668      	mov	r0, sp
    acf2:	f7fa feeb 	bl	5acc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    acf6:	b150      	cbz	r0, ad0e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    acf8:	9800      	ldr	r0, [sp, #0]
    acfa:	a901      	add	r1, sp, #4
    acfc:	78c0      	ldrb	r0, [r0, #3]
    acfe:	f88d 0004 	strb.w	r0, [sp, #4]
    ad02:	e005      	b.n	ad10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    ad04:	2001      	movs	r0, #1
    ad06:	b007      	add	sp, #28
    ad08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ad0a:	2020      	movs	r0, #32
    ad0c:	e7fb      	b.n	ad06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    ad0e:	2100      	movs	r1, #0
    ad10:	6860      	ldr	r0, [r4, #4]
    ad12:	ab04      	add	r3, sp, #16
    ad14:	2216      	movs	r2, #22
    ad16:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    ad1a:	f004 f802 	bl	ed22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    ad1e:	2700      	movs	r7, #0
    ad20:	2501      	movs	r5, #1
    ad22:	b178      	cbz	r0, ad44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    ad24:	6860      	ldr	r0, [r4, #4]
    ad26:	f89d 1010 	ldrb.w	r1, [sp, #16]
    ad2a:	2216      	movs	r2, #22
    ad2c:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    ad30:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    ad34:	2119      	movs	r1, #25
    ad36:	f800 1f86 	strb.w	r1, [r0, #134]!
    ad3a:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    ad3e:	8687      	strh	r7, [r0, #52]	; 0x34
    ad40:	2000      	movs	r0, #0
    ad42:	e7e0      	b.n	ad06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    ad44:	68e0      	ldr	r0, [r4, #12]
    ad46:	f004 f97a 	bl	f03e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    ad4a:	b1a8      	cbz	r0, ad78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    ad4c:	68e1      	ldr	r1, [r4, #12]
    ad4e:	7908      	ldrb	r0, [r1, #4]
    ad50:	f000 0207 	and.w	r2, r0, #7
    ad54:	6860      	ldr	r0, [r4, #4]
    ad56:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    ad5a:	7949      	ldrb	r1, [r1, #5]
    ad5c:	f001 0107 	and.w	r1, r1, #7
    ad60:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    ad64:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    ad68:	f88d 3018 	strb.w	r3, [sp, #24]
    ad6c:	9b06      	ldr	r3, [sp, #24]
    ad6e:	9301      	str	r3, [sp, #4]
    ad70:	f89d 3004 	ldrb.w	r3, [sp, #4]
    ad74:	bb23      	cbnz	r3, adc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ad76:	e004      	b.n	ad82 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    ad78:	2000      	movs	r0, #0
    ad7a:	f7ff fe8d 	bl	aa98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    ad7e:	4606      	mov	r6, r0
    ad80:	e025      	b.n	adce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    ad82:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    ad86:	2b01      	cmp	r3, #1
    ad88:	d01a      	beq.n	adc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ad8a:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    ad8e:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    ad92:	4594      	cmp	ip, r2
    ad94:	d106      	bne.n	ada4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    ad96:	781a      	ldrb	r2, [r3, #0]
    ad98:	428a      	cmp	r2, r1
    ad9a:	d103      	bne.n	ada4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    ad9c:	2102      	movs	r1, #2
    ad9e:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    ada2:	e00d      	b.n	adc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    ada4:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    ada8:	8802      	ldrh	r2, [r0, #0]
    adaa:	f821 2902 	strh.w	r2, [r1], #-2
    adae:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    adb2:	710a      	strb	r2, [r1, #4]
    adb4:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    adb8:	7148      	strb	r0, [r1, #5]
    adba:	700d      	strb	r5, [r1, #0]
    adbc:	f7fc f9c0 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    adc0:	6860      	ldr	r0, [r4, #4]
    adc2:	2121      	movs	r1, #33	; 0x21
    adc4:	f800 1f86 	strb.w	r1, [r0, #134]!
    adc8:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    adcc:	8687      	strh	r7, [r0, #52]	; 0x34
    adce:	4630      	mov	r0, r6
    add0:	e799      	b.n	ad06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    add2:	0000      	.short	0x0000
    add4:	2000011c 	.word	0x2000011c
    add8:	b570      	push	{r4, r5, r6, lr}
    adda:	4c18      	ldr	r4, [pc, #96]	; (ae3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    addc:	6860      	ldr	r0, [r4, #4]
    adde:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    ade2:	281f      	cmp	r0, #31
    ade4:	d001      	beq.n	adea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    ade6:	2001      	movs	r0, #1
    ade8:	bd70      	pop	{r4, r5, r6, pc}
    adea:	68e0      	ldr	r0, [r4, #12]
    adec:	f004 f931 	bl	f052 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    adf0:	b1d8      	cbz	r0, ae2a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    adf2:	68e0      	ldr	r0, [r4, #12]
    adf4:	2201      	movs	r2, #1
    adf6:	7901      	ldrb	r1, [r0, #4]
    adf8:	7940      	ldrb	r0, [r0, #5]
    adfa:	f001 0107 	and.w	r1, r1, #7
    adfe:	f361 0507 	bfi	r5, r1, #0, #8
    ae02:	4629      	mov	r1, r5
    ae04:	f000 0007 	and.w	r0, r0, #7
    ae08:	f360 210f 	bfi	r1, r0, #8, #8
    ae0c:	6860      	ldr	r0, [r4, #4]
    ae0e:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    ae12:	2200      	movs	r2, #0
    ae14:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    ae18:	2223      	movs	r2, #35	; 0x23
    ae1a:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    ae1e:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    ae22:	f7ff fdb9 	bl	a998 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    ae26:	2000      	movs	r0, #0
    ae28:	bd70      	pop	{r4, r5, r6, pc}
    ae2a:	2001      	movs	r0, #1
    ae2c:	f7ff fe34 	bl	aa98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    ae30:	4604      	mov	r4, r0
    ae32:	201e      	movs	r0, #30
    ae34:	f7ff fd6a 	bl	a90c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    ae38:	4620      	mov	r0, r4
    ae3a:	bd70      	pop	{r4, r5, r6, pc}
    ae3c:	2000011c 	.word	0x2000011c
    ae40:	b570      	push	{r4, r5, r6, lr}
    ae42:	4d07      	ldr	r5, [pc, #28]	; (ae60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    ae44:	2400      	movs	r4, #0
    ae46:	68e8      	ldr	r0, [r5, #12]
    ae48:	f004 f90d 	bl	f066 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    ae4c:	2803      	cmp	r0, #3
    ae4e:	d105      	bne.n	ae5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    ae50:	68e8      	ldr	r0, [r5, #12]
    ae52:	f004 f90a 	bl	f06a <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    ae56:	f000 f805 	bl	ae64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    ae5a:	4604      	mov	r4, r0
    ae5c:	4620      	mov	r0, r4
    ae5e:	bd70      	pop	{r4, r5, r6, pc}
    ae60:	2000011c 	.word	0x2000011c
    ae64:	b570      	push	{r4, r5, r6, lr}
    ae66:	4d18      	ldr	r5, [pc, #96]	; (aec8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    ae68:	6869      	ldr	r1, [r5, #4]
    ae6a:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    ae6e:	2a16      	cmp	r2, #22
    ae70:	d001      	beq.n	ae76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    ae72:	2a13      	cmp	r2, #19
    ae74:	d102      	bne.n	ae7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    ae76:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    ae7a:	b10a      	cbz	r2, ae80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    ae7c:	2002      	movs	r0, #2
    ae7e:	bd70      	pop	{r4, r5, r6, pc}
    ae80:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    ae84:	2400      	movs	r4, #0
    ae86:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    ae8a:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    ae8e:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    ae92:	b122      	cbz	r2, ae9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    ae94:	f240 21eb 	movw	r1, #747	; 0x2eb
    ae98:	2036      	movs	r0, #54	; 0x36
    ae9a:	f7fa f811 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ae9e:	880a      	ldrh	r2, [r1, #0]
    aea0:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    aea4:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    aea8:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    aeac:	200d      	movs	r0, #13
    aeae:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    aeb2:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    aeb6:	f000 fb9b 	bl	b5f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    aeba:	f7fc f941 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    aebe:	6868      	ldr	r0, [r5, #4]
    aec0:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    aec4:	2000      	movs	r0, #0
    aec6:	bd70      	pop	{r4, r5, r6, pc}
    aec8:	2000011c 	.word	0x2000011c
    aecc:	4802      	ldr	r0, [pc, #8]	; (aed8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    aece:	68c0      	ldr	r0, [r0, #12]
    aed0:	7900      	ldrb	r0, [r0, #4]
    aed2:	f7ff bfc7 	b.w	ae64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    aed6:	0000      	.short	0x0000
    aed8:	2000011c 	.word	0x2000011c
    aedc:	b510      	push	{r4, lr}
    aede:	4c0e      	ldr	r4, [pc, #56]	; (af18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    aee0:	6860      	ldr	r0, [r4, #4]
    aee2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    aee6:	2916      	cmp	r1, #22
    aee8:	d001      	beq.n	aeee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    aeea:	2002      	movs	r0, #2
    aeec:	bd10      	pop	{r4, pc}
    aeee:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    aef2:	f200 1175 	addw	r1, r0, #373	; 0x175
    aef6:	2200      	movs	r2, #0
    aef8:	f200 1065 	addw	r0, r0, #357	; 0x165
    aefc:	f003 fdbf 	bl	ea7e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    af00:	6860      	ldr	r0, [r4, #4]
    af02:	2100      	movs	r1, #0
    af04:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    af08:	2101      	movs	r1, #1
    af0a:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    af0e:	2118      	movs	r1, #24
    af10:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    af14:	2000      	movs	r0, #0
    af16:	bd10      	pop	{r4, pc}
    af18:	2000011c 	.word	0x2000011c
    af1c:	b570      	push	{r4, r5, r6, lr}
    af1e:	4d1b      	ldr	r5, [pc, #108]	; (af8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    af20:	6868      	ldr	r0, [r5, #4]
    af22:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    af26:	291a      	cmp	r1, #26
    af28:	d001      	beq.n	af2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    af2a:	2002      	movs	r0, #2
    af2c:	bd70      	pop	{r4, r5, r6, pc}
    af2e:	2400      	movs	r4, #0
    af30:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    af34:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    af38:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    af3c:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    af40:	b121      	cbz	r1, af4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    af42:	f240 3113 	movw	r1, #787	; 0x313
    af46:	2036      	movs	r0, #54	; 0x36
    af48:	f7f9 ffba 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af4c:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    af50:	b141      	cbz	r1, af64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    af52:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    af56:	8801      	ldrh	r1, [r0, #0]
    af58:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    af5c:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    af60:	210e      	movs	r1, #14
    af62:	e008      	b.n	af76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    af64:	8801      	ldrh	r1, [r0, #0]
    af66:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    af6a:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    af6e:	2101      	movs	r1, #1
    af70:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    af74:	210d      	movs	r1, #13
    af76:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    af7a:	f000 fb39 	bl	b5f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    af7e:	f7fc f8df 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    af82:	6868      	ldr	r0, [r5, #4]
    af84:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    af88:	2000      	movs	r0, #0
    af8a:	bd70      	pop	{r4, r5, r6, pc}
    af8c:	2000011c 	.word	0x2000011c
    af90:	b510      	push	{r4, lr}
    af92:	4c0d      	ldr	r4, [pc, #52]	; (afc8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    af94:	2300      	movs	r3, #0
    af96:	2101      	movs	r1, #1
    af98:	6860      	ldr	r0, [r4, #4]
    af9a:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    af9e:	3078      	adds	r0, #120	; 0x78
    afa0:	f003 fe03 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afa4:	b108      	cbz	r0, afaa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    afa6:	2000      	movs	r0, #0
    afa8:	bd10      	pop	{r4, pc}
    afaa:	68e0      	ldr	r0, [r4, #12]
    afac:	f004 f827 	bl	effe <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    afb0:	6861      	ldr	r1, [r4, #4]
    afb2:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    afb6:	2007      	movs	r0, #7
    afb8:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    afbc:	2000      	movs	r0, #0
    afbe:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    afc2:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    afc6:	e7ee      	b.n	afa6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    afc8:	2000011c 	.word	0x2000011c
    afcc:	b570      	push	{r4, r5, r6, lr}
    afce:	4c25      	ldr	r4, [pc, #148]	; (b064 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    afd0:	2600      	movs	r6, #0
    afd2:	2109      	movs	r1, #9
    afd4:	6860      	ldr	r0, [r4, #4]
    afd6:	4633      	mov	r3, r6
    afd8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    afdc:	3078      	adds	r0, #120	; 0x78
    afde:	f003 fde4 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    afe2:	2500      	movs	r5, #0
    afe4:	b118      	cbz	r0, afee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    afe6:	68e0      	ldr	r0, [r4, #12]
    afe8:	7900      	ldrb	r0, [r0, #4]
    afea:	2812      	cmp	r0, #18
    afec:	d011      	beq.n	b012 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    afee:	6860      	ldr	r0, [r4, #4]
    aff0:	210a      	movs	r1, #10
    aff2:	2300      	movs	r3, #0
    aff4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    aff8:	3078      	adds	r0, #120	; 0x78
    affa:	f003 fdd6 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    affe:	b118      	cbz	r0, b008 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    b000:	68e0      	ldr	r0, [r4, #12]
    b002:	7900      	ldrb	r0, [r0, #4]
    b004:	2814      	cmp	r0, #20
    b006:	d008      	beq.n	b01a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    b008:	68e0      	ldr	r0, [r4, #12]
    b00a:	7900      	ldrb	r0, [r0, #4]
    b00c:	2816      	cmp	r0, #22
    b00e:	d012      	beq.n	b036 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    b010:	e026      	b.n	b060 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    b012:	f7ff fe31 	bl	ac78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    b016:	4606      	mov	r6, r0
    b018:	e022      	b.n	b060 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    b01a:	6860      	ldr	r0, [r4, #4]
    b01c:	2105      	movs	r1, #5
    b01e:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    b022:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    b026:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b02a:	30c6      	adds	r0, #198	; 0xc6
    b02c:	f004 fcde 	bl	f9ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    b030:	f7ff f8c0 	bl	a1b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    b034:	e014      	b.n	b060 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    b036:	6860      	ldr	r0, [r4, #4]
    b038:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b03c:	291f      	cmp	r1, #31
    b03e:	d10f      	bne.n	b060 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    b040:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    b044:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b048:	2108      	movs	r1, #8
    b04a:	30c6      	adds	r0, #198	; 0xc6
    b04c:	f004 fcce 	bl	f9ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    b050:	6860      	ldr	r0, [r4, #4]
    b052:	210b      	movs	r1, #11
    b054:	30c6      	adds	r0, #198	; 0xc6
    b056:	f004 fcc9 	bl	f9ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    b05a:	201a      	movs	r0, #26
    b05c:	f7ff fc56 	bl	a90c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    b060:	4630      	mov	r0, r6
    b062:	bd70      	pop	{r4, r5, r6, pc}
    b064:	2000011c 	.word	0x2000011c
    b068:	b570      	push	{r4, r5, r6, lr}
    b06a:	4c32      	ldr	r4, [pc, #200]	; (b134 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    b06c:	2300      	movs	r3, #0
    b06e:	4619      	mov	r1, r3
    b070:	6860      	ldr	r0, [r4, #4]
    b072:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b076:	3078      	adds	r0, #120	; 0x78
    b078:	f003 fd97 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b07c:	b940      	cbnz	r0, b090 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    b07e:	6860      	ldr	r0, [r4, #4]
    b080:	2300      	movs	r3, #0
    b082:	2108      	movs	r1, #8
    b084:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b088:	3078      	adds	r0, #120	; 0x78
    b08a:	f003 fd8e 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b08e:	b1f8      	cbz	r0, b0d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    b090:	6860      	ldr	r0, [r4, #4]
    b092:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    b096:	0780      	lsls	r0, r0, #30
    b098:	d412      	bmi.n	b0c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    b09a:	68e0      	ldr	r0, [r4, #12]
    b09c:	f003 ffb1 	bl	f002 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    b0a0:	6861      	ldr	r1, [r4, #4]
    b0a2:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    b0a6:	68e0      	ldr	r0, [r4, #12]
    b0a8:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    b0ac:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    b0b0:	8840      	ldrh	r0, [r0, #2]
    b0b2:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    b0b6:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    b0ba:	f040 0002 	orr.w	r0, r0, #2
    b0be:	7008      	strb	r0, [r1, #0]
    b0c0:	6860      	ldr	r0, [r4, #4]
    b0c2:	f04f 0500 	mov.w	r5, #0
    b0c6:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    b0ca:	07c9      	lsls	r1, r1, #31
    b0cc:	d002      	beq.n	b0d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    b0ce:	e010      	b.n	b0f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    b0d0:	2001      	movs	r0, #1
    b0d2:	bd70      	pop	{r4, r5, r6, pc}
    b0d4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b0d8:	2300      	movs	r3, #0
    b0da:	4619      	mov	r1, r3
    b0dc:	3078      	adds	r0, #120	; 0x78
    b0de:	f003 fd64 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b0e2:	b160      	cbz	r0, b0fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    b0e4:	6860      	ldr	r0, [r4, #4]
    b0e6:	2101      	movs	r1, #1
    b0e8:	f800 1f86 	strb.w	r1, [r0, #134]!
    b0ec:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    b0f0:	8685      	strh	r5, [r0, #52]	; 0x34
    b0f2:	6860      	ldr	r0, [r4, #4]
    b0f4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b0f8:	2901      	cmp	r1, #1
    b0fa:	d005      	beq.n	b108 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    b0fc:	e00a      	b.n	b114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    b0fe:	f240 314e 	movw	r1, #846	; 0x34e
    b102:	2036      	movs	r0, #54	; 0x36
    b104:	f7f9 fedc 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b108:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    b10c:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b110:	f7fc f816 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b114:	6860      	ldr	r0, [r4, #4]
    b116:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    b11a:	b149      	cbz	r1, b130 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    b11c:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    b120:	f7fc f80e 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b124:	6860      	ldr	r0, [r4, #4]
    b126:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b12a:	b909      	cbnz	r1, b130 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    b12c:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b130:	2000      	movs	r0, #0
    b132:	bd70      	pop	{r4, r5, r6, pc}
    b134:	2000011c 	.word	0x2000011c
    b138:	b510      	push	{r4, lr}
    b13a:	4c0a      	ldr	r4, [pc, #40]	; (b164 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    b13c:	2300      	movs	r3, #0
    b13e:	4619      	mov	r1, r3
    b140:	6860      	ldr	r0, [r4, #4]
    b142:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b146:	3078      	adds	r0, #120	; 0x78
    b148:	f003 fd2f 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b14c:	b120      	cbz	r0, b158 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    b14e:	6861      	ldr	r1, [r4, #4]
    b150:	200c      	movs	r0, #12
    b152:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b156:	bd10      	pop	{r4, pc}
    b158:	f240 51fa 	movw	r1, #1530	; 0x5fa
    b15c:	2036      	movs	r0, #54	; 0x36
    b15e:	f7f9 feaf 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b162:	0000      	.short	0x0000
    b164:	2000011c 	.word	0x2000011c
    b168:	b510      	push	{r4, lr}
    b16a:	4c0a      	ldr	r4, [pc, #40]	; (b194 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    b16c:	2300      	movs	r3, #0
    b16e:	4619      	mov	r1, r3
    b170:	6860      	ldr	r0, [r4, #4]
    b172:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b176:	3078      	adds	r0, #120	; 0x78
    b178:	f003 fd17 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b17c:	b120      	cbz	r0, b188 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    b17e:	6861      	ldr	r1, [r4, #4]
    b180:	200d      	movs	r0, #13
    b182:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b186:	bd10      	pop	{r4, pc}
    b188:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    b18c:	2036      	movs	r0, #54	; 0x36
    b18e:	f7f9 fe97 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b192:	0000      	.short	0x0000
    b194:	2000011c 	.word	0x2000011c
    b198:	b510      	push	{r4, lr}
    b19a:	4c0d      	ldr	r4, [pc, #52]	; (b1d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    b19c:	2300      	movs	r3, #0
    b19e:	4619      	mov	r1, r3
    b1a0:	6860      	ldr	r0, [r4, #4]
    b1a2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b1a6:	3078      	adds	r0, #120	; 0x78
    b1a8:	f003 fcff 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1ac:	b918      	cbnz	r0, b1b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    b1ae:	6860      	ldr	r0, [r4, #4]
    b1b0:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    b1b4:	b138      	cbz	r0, b1c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    b1b6:	6860      	ldr	r0, [r4, #4]
    b1b8:	2101      	movs	r1, #1
    b1ba:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    b1be:	2113      	movs	r1, #19
    b1c0:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b1c4:	bd10      	pop	{r4, pc}
    b1c6:	f240 6115 	movw	r1, #1557	; 0x615
    b1ca:	2036      	movs	r0, #54	; 0x36
    b1cc:	f7f9 fe78 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1d0:	2000011c 	.word	0x2000011c
    b1d4:	b510      	push	{r4, lr}
    b1d6:	4c0a      	ldr	r4, [pc, #40]	; (b200 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    b1d8:	2300      	movs	r3, #0
    b1da:	4619      	mov	r1, r3
    b1dc:	6860      	ldr	r0, [r4, #4]
    b1de:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b1e2:	3078      	adds	r0, #120	; 0x78
    b1e4:	f003 fce1 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b1e8:	b120      	cbz	r0, b1f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    b1ea:	6861      	ldr	r1, [r4, #4]
    b1ec:	2004      	movs	r0, #4
    b1ee:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b1f2:	bd10      	pop	{r4, pc}
    b1f4:	f240 51f4 	movw	r1, #1524	; 0x5f4
    b1f8:	2036      	movs	r0, #54	; 0x36
    b1fa:	f7f9 fe61 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b1fe:	0000      	.short	0x0000
    b200:	2000011c 	.word	0x2000011c
    b204:	b510      	push	{r4, lr}
    b206:	4c0a      	ldr	r4, [pc, #40]	; (b230 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    b208:	2300      	movs	r3, #0
    b20a:	4619      	mov	r1, r3
    b20c:	6860      	ldr	r0, [r4, #4]
    b20e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b212:	3078      	adds	r0, #120	; 0x78
    b214:	f003 fcc9 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b218:	b120      	cbz	r0, b224 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    b21a:	6861      	ldr	r1, [r4, #4]
    b21c:	201c      	movs	r0, #28
    b21e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b222:	bd10      	pop	{r4, pc}
    b224:	f240 614c 	movw	r1, #1612	; 0x64c
    b228:	2036      	movs	r0, #54	; 0x36
    b22a:	f7f9 fe49 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b22e:	0000      	.short	0x0000
    b230:	2000011c 	.word	0x2000011c
    b234:	b510      	push	{r4, lr}
    b236:	4c0a      	ldr	r4, [pc, #40]	; (b260 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    b238:	2300      	movs	r3, #0
    b23a:	4619      	mov	r1, r3
    b23c:	6860      	ldr	r0, [r4, #4]
    b23e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b242:	3078      	adds	r0, #120	; 0x78
    b244:	f003 fcb1 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b248:	b120      	cbz	r0, b254 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    b24a:	6861      	ldr	r1, [r4, #4]
    b24c:	2000      	movs	r0, #0
    b24e:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b252:	bd10      	pop	{r4, pc}
    b254:	f240 6153 	movw	r1, #1619	; 0x653
    b258:	2036      	movs	r0, #54	; 0x36
    b25a:	f7f9 fe31 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b25e:	0000      	.short	0x0000
    b260:	2000011c 	.word	0x2000011c
    b264:	b510      	push	{r4, lr}
    b266:	4c0a      	ldr	r4, [pc, #40]	; (b290 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    b268:	2300      	movs	r3, #0
    b26a:	4619      	mov	r1, r3
    b26c:	6860      	ldr	r0, [r4, #4]
    b26e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b272:	3078      	adds	r0, #120	; 0x78
    b274:	f003 fc99 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b278:	b120      	cbz	r0, b284 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    b27a:	6861      	ldr	r1, [r4, #4]
    b27c:	2005      	movs	r0, #5
    b27e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b282:	bd10      	pop	{r4, pc}
    b284:	f240 613f 	movw	r1, #1599	; 0x63f
    b288:	2036      	movs	r0, #54	; 0x36
    b28a:	f7f9 fe19 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b28e:	0000      	.short	0x0000
    b290:	2000011c 	.word	0x2000011c
    b294:	4902      	ldr	r1, [pc, #8]	; (b2a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    b296:	2000      	movs	r0, #0
    b298:	6849      	ldr	r1, [r1, #4]
    b29a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b29e:	4770      	bx	lr
    b2a0:	2000011c 	.word	0x2000011c
    b2a4:	b510      	push	{r4, lr}
    b2a6:	4c0b      	ldr	r4, [pc, #44]	; (b2d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    b2a8:	2300      	movs	r3, #0
    b2aa:	4619      	mov	r1, r3
    b2ac:	6860      	ldr	r0, [r4, #4]
    b2ae:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b2b2:	3078      	adds	r0, #120	; 0x78
    b2b4:	f003 fc79 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b2b8:	b138      	cbz	r0, b2ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    b2ba:	6860      	ldr	r0, [r4, #4]
    b2bc:	2101      	movs	r1, #1
    b2be:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    b2c2:	210f      	movs	r1, #15
    b2c4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b2c8:	bd10      	pop	{r4, pc}
    b2ca:	f240 6106 	movw	r1, #1542	; 0x606
    b2ce:	2036      	movs	r0, #54	; 0x36
    b2d0:	f7f9 fdf6 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2d4:	2000011c 	.word	0x2000011c
    b2d8:	4809      	ldr	r0, [pc, #36]	; (b300 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    b2da:	b510      	push	{r4, lr}
    b2dc:	6840      	ldr	r0, [r0, #4]
    b2de:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b2e2:	2912      	cmp	r1, #18
    b2e4:	d004      	beq.n	b2f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    b2e6:	f240 610e 	movw	r1, #1550	; 0x60e
    b2ea:	2036      	movs	r0, #54	; 0x36
    b2ec:	f7f9 fde8 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2f0:	2101      	movs	r1, #1
    b2f2:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    b2f6:	2111      	movs	r1, #17
    b2f8:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b2fc:	bd10      	pop	{r4, pc}
    b2fe:	0000      	.short	0x0000
    b300:	2000011c 	.word	0x2000011c
    b304:	b510      	push	{r4, lr}
    b306:	4c0a      	ldr	r4, [pc, #40]	; (b330 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    b308:	2300      	movs	r3, #0
    b30a:	4619      	mov	r1, r3
    b30c:	6860      	ldr	r0, [r4, #4]
    b30e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b312:	3078      	adds	r0, #120	; 0x78
    b314:	f003 fc49 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b318:	b120      	cbz	r0, b324 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    b31a:	6861      	ldr	r1, [r4, #4]
    b31c:	201f      	movs	r0, #31
    b31e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b322:	bd10      	pop	{r4, pc}
    b324:	f240 615c 	movw	r1, #1628	; 0x65c
    b328:	2036      	movs	r0, #54	; 0x36
    b32a:	f7f9 fdc9 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b32e:	0000      	.short	0x0000
    b330:	2000011c 	.word	0x2000011c
    b334:	b570      	push	{r4, r5, r6, lr}
    b336:	4c1d      	ldr	r4, [pc, #116]	; (b3ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    b338:	6860      	ldr	r0, [r4, #4]
    b33a:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    b33e:	b911      	cbnz	r1, b346 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    b340:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    b344:	b179      	cbz	r1, b366 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    b346:	2100      	movs	r1, #0
    b348:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    b34c:	2224      	movs	r2, #36	; 0x24
    b34e:	2500      	movs	r5, #0
    b350:	2b21      	cmp	r3, #33	; 0x21
    b352:	d00a      	beq.n	b36a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    b354:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    b358:	2b23      	cmp	r3, #35	; 0x23
    b35a:	d01a      	beq.n	b392 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    b35c:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    b360:	2036      	movs	r0, #54	; 0x36
    b362:	f7f9 fdad 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b366:	2101      	movs	r1, #1
    b368:	e7ee      	b.n	b348 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    b36a:	b161      	cbz	r1, b386 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    b36c:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    b370:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    b374:	2801      	cmp	r0, #1
    b376:	d102      	bne.n	b37e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    b378:	2000      	movs	r0, #0
    b37a:	f7ff fac7 	bl	a90c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    b37e:	6860      	ldr	r0, [r4, #4]
    b380:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    b384:	e001      	b.n	b38a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    b386:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    b38a:	6860      	ldr	r0, [r4, #4]
    b38c:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    b390:	bd70      	pop	{r4, r5, r6, pc}
    b392:	b129      	cbz	r1, b3a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    b394:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    b398:	2000      	movs	r0, #0
    b39a:	f7ff fab7 	bl	a90c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    b39e:	e001      	b.n	b3a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    b3a0:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    b3a4:	6860      	ldr	r0, [r4, #4]
    b3a6:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b3aa:	bd70      	pop	{r4, r5, r6, pc}
    b3ac:	2000011c 	.word	0x2000011c
    b3b0:	4903      	ldr	r1, [pc, #12]	; (b3c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    b3b2:	2000      	movs	r0, #0
    b3b4:	6849      	ldr	r1, [r1, #4]
    b3b6:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    b3ba:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    b3be:	4770      	bx	lr
    b3c0:	2000011c 	.word	0x2000011c
    b3c4:	4807      	ldr	r0, [pc, #28]	; (b3e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    b3c6:	b510      	push	{r4, lr}
    b3c8:	6840      	ldr	r0, [r0, #4]
    b3ca:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    b3ce:	2918      	cmp	r1, #24
    b3d0:	d004      	beq.n	b3dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    b3d2:	f240 611e 	movw	r1, #1566	; 0x61e
    b3d6:	2036      	movs	r0, #54	; 0x36
    b3d8:	f7f9 fd72 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b3dc:	211a      	movs	r1, #26
    b3de:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    b3e2:	bd10      	pop	{r4, pc}
    b3e4:	2000011c 	.word	0x2000011c
    b3e8:	b510      	push	{r4, lr}
    b3ea:	4c0a      	ldr	r4, [pc, #40]	; (b414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    b3ec:	2300      	movs	r3, #0
    b3ee:	2101      	movs	r1, #1
    b3f0:	6860      	ldr	r0, [r4, #4]
    b3f2:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    b3f6:	3078      	adds	r0, #120	; 0x78
    b3f8:	f003 fbd7 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b3fc:	2800      	cmp	r0, #0
    b3fe:	d108      	bne.n	b412 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    b400:	6860      	ldr	r0, [r4, #4]
    b402:	2108      	movs	r1, #8
    b404:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    b408:	2100      	movs	r1, #0
    b40a:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    b40e:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    b412:	bd10      	pop	{r4, pc}
    b414:	2000011c 	.word	0x2000011c
    b418:	b570      	push	{r4, r5, r6, lr}
    b41a:	4c0e      	ldr	r4, [pc, #56]	; (b454 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    b41c:	2300      	movs	r3, #0
    b41e:	4619      	mov	r1, r3
    b420:	6860      	ldr	r0, [r4, #4]
    b422:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b426:	3078      	adds	r0, #120	; 0x78
    b428:	f003 fbbf 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b42c:	2500      	movs	r5, #0
    b42e:	b110      	cbz	r0, b436 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    b430:	6860      	ldr	r0, [r4, #4]
    b432:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    b436:	6860      	ldr	r0, [r4, #4]
    b438:	2300      	movs	r3, #0
    b43a:	4619      	mov	r1, r3
    b43c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b440:	3078      	adds	r0, #120	; 0x78
    b442:	f003 fbb2 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b446:	2800      	cmp	r0, #0
    b448:	d002      	beq.n	b450 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    b44a:	6860      	ldr	r0, [r4, #4]
    b44c:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    b450:	bd70      	pop	{r4, r5, r6, pc}
    b452:	0000      	.short	0x0000
    b454:	2000011c 	.word	0x2000011c
    b458:	b570      	push	{r4, r5, r6, lr}
    b45a:	4d16      	ldr	r5, [pc, #88]	; (b4b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    b45c:	f04f 0400 	mov.w	r4, #0
    b460:	6868      	ldr	r0, [r5, #4]
    b462:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    b466:	0789      	lsls	r1, r1, #30
    b468:	d411      	bmi.n	b48e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    b46a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    b46e:	2300      	movs	r3, #0
    b470:	4619      	mov	r1, r3
    b472:	3078      	adds	r0, #120	; 0x78
    b474:	f003 fb99 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b478:	b120      	cbz	r0, b484 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    b47a:	6869      	ldr	r1, [r5, #4]
    b47c:	2001      	movs	r0, #1
    b47e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    b482:	e008      	b.n	b496 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    b484:	f240 612b 	movw	r1, #1579	; 0x62b
    b488:	2036      	movs	r0, #54	; 0x36
    b48a:	f7f9 fd19 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b48e:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    b492:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    b496:	6868      	ldr	r0, [r5, #4]
    b498:	2300      	movs	r3, #0
    b49a:	4619      	mov	r1, r3
    b49c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    b4a0:	3078      	adds	r0, #120	; 0x78
    b4a2:	f003 fb82 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b4a6:	2800      	cmp	r0, #0
    b4a8:	d002      	beq.n	b4b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    b4aa:	6868      	ldr	r0, [r5, #4]
    b4ac:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    b4b0:	bd70      	pop	{r4, r5, r6, pc}
    b4b2:	0000      	.short	0x0000
    b4b4:	2000011c 	.word	0x2000011c
    b4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b4ba:	4d4c      	ldr	r5, [pc, #304]	; (b5ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    b4bc:	4607      	mov	r7, r0
    b4be:	460e      	mov	r6, r1
    b4c0:	6868      	ldr	r0, [r5, #4]
    b4c2:	f100 0478 	add.w	r4, r0, #120	; 0x78
    b4c6:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    b4ca:	f88d 0000 	strb.w	r0, [sp]
    b4ce:	9800      	ldr	r0, [sp, #0]
    b4d0:	9000      	str	r0, [sp, #0]
    b4d2:	f89d 0000 	ldrb.w	r0, [sp]
    b4d6:	b930      	cbnz	r0, b4e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    b4d8:	7c22      	ldrb	r2, [r4, #16]
    b4da:	2300      	movs	r3, #0
    b4dc:	2101      	movs	r1, #1
    b4de:	4620      	mov	r0, r4
    b4e0:	f003 fb63 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    b4e4:	b110      	cbz	r0, b4ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    b4e6:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    b4e8:	1c40      	adds	r0, r0, #1
    b4ea:	8760      	strh	r0, [r4, #58]	; 0x3a
    b4ec:	2001      	movs	r0, #1
    b4ee:	213d      	movs	r1, #61	; 0x3d
    b4f0:	bbf7      	cbnz	r7, b570 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    b4f2:	782a      	ldrb	r2, [r5, #0]
    b4f4:	2a02      	cmp	r2, #2
    b4f6:	d006      	beq.n	b506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    b4f8:	2a01      	cmp	r2, #1
    b4fa:	d006      	beq.n	b50a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    b4fc:	b1c6      	cbz	r6, b530 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    b4fe:	06f2      	lsls	r2, r6, #27
    b500:	d507      	bpl.n	b512 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    b502:	211e      	movs	r1, #30
    b504:	e043      	b.n	b58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b506:	2116      	movs	r1, #22
    b508:	e041      	b.n	b58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b50a:	6869      	ldr	r1, [r5, #4]
    b50c:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    b510:	e03d      	b.n	b58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b512:	0732      	lsls	r2, r6, #28
    b514:	d43b      	bmi.n	b58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b516:	07b1      	lsls	r1, r6, #30
    b518:	d001      	beq.n	b51e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    b51a:	212a      	movs	r1, #42	; 0x2a
    b51c:	e037      	b.n	b58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b51e:	06b1      	lsls	r1, r6, #26
    b520:	d404      	bmi.n	b52c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    b522:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    b526:	2036      	movs	r0, #54	; 0x36
    b528:	f7f9 fcca 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b52c:	2123      	movs	r1, #35	; 0x23
    b52e:	e02e      	b.n	b58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b530:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    b534:	b129      	cbz	r1, b542 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    b536:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    b538:	1c4a      	adds	r2, r1, #1
    b53a:	87a2      	strh	r2, [r4, #60]	; 0x3c
    b53c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    b53e:	4291      	cmp	r1, r2
    b540:	d21d      	bcs.n	b57e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b542:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    b546:	b139      	cbz	r1, b558 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    b548:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    b54c:	1c4a      	adds	r2, r1, #1
    b54e:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    b552:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    b554:	4291      	cmp	r1, r2
    b556:	d212      	bcs.n	b57e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b558:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    b55a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    b55c:	428a      	cmp	r2, r1
    b55e:	d30b      	bcc.n	b578 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    b560:	686b      	ldr	r3, [r5, #4]
    b562:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    b566:	f88d 3000 	strb.w	r3, [sp]
    b56a:	9b00      	ldr	r3, [sp, #0]
    b56c:	9300      	str	r3, [sp, #0]
    b56e:	e000      	b.n	b572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    b570:	e00d      	b.n	b58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b572:	f89d 3000 	ldrb.w	r3, [sp]
    b576:	b913      	cbnz	r3, b57e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    b578:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    b57a:	429a      	cmp	r2, r3
    b57c:	d301      	bcc.n	b582 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    b57e:	2122      	movs	r1, #34	; 0x22
    b580:	e005      	b.n	b58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b582:	7c62      	ldrb	r2, [r4, #17]
    b584:	b1f2      	cbz	r2, b5c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    b586:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    b588:	428a      	cmp	r2, r1
    b58a:	d304      	bcc.n	b596 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    b58c:	2108      	movs	r1, #8
    b58e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    b592:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    b596:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    b59a:	f88d 0000 	strb.w	r0, [sp]
    b59e:	9800      	ldr	r0, [sp, #0]
    b5a0:	9000      	str	r0, [sp, #0]
    b5a2:	f89d 0000 	ldrb.w	r0, [sp]
    b5a6:	b1d8      	cbz	r0, b5e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    b5a8:	2000      	movs	r0, #0
    b5aa:	7360      	strb	r0, [r4, #13]
    b5ac:	73a0      	strb	r0, [r4, #14]
    b5ae:	7460      	strb	r0, [r4, #17]
    b5b0:	2102      	movs	r1, #2
    b5b2:	6868      	ldr	r0, [r5, #4]
    b5b4:	f7fd fa66 	bl	8a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    b5b8:	6868      	ldr	r0, [r5, #4]
    b5ba:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    b5be:	2901      	cmp	r1, #1
    b5c0:	d005      	beq.n	b5ce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    b5c2:	e009      	b.n	b5d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    b5c4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    b5c6:	2906      	cmp	r1, #6
    b5c8:	d3e5      	bcc.n	b596 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    b5ca:	213e      	movs	r1, #62	; 0x3e
    b5cc:	e7df      	b.n	b58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    b5ce:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    b5d2:	7801      	ldrb	r1, [r0, #0]
    b5d4:	1e49      	subs	r1, r1, #1
    b5d6:	7001      	strb	r1, [r0, #0]
    b5d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b5dc:	f7fb bdb0 	b.w	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    b5e0:	6868      	ldr	r0, [r5, #4]
    b5e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b5e6:	2100      	movs	r1, #0
    b5e8:	f7fd ba4c 	b.w	8a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    b5ec:	2000011c 	.word	0x2000011c
    b5f0:	4804      	ldr	r0, [pc, #16]	; (b604 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    b5f2:	b510      	push	{r4, lr}
    b5f4:	6840      	ldr	r0, [r0, #4]
    b5f6:	8800      	ldrh	r0, [r0, #0]
    b5f8:	f7fa f860 	bl	56bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    b5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b600:	f003 b800 	b.w	e604 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    b604:	2000011c 	.word	0x2000011c
    b608:	4a19      	ldr	r2, [pc, #100]	; (b670 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    b60a:	2901      	cmp	r1, #1
    b60c:	6852      	ldr	r2, [r2, #4]
    b60e:	d010      	beq.n	b632 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    b610:	2100      	movs	r1, #0
    b612:	b1c8      	cbz	r0, b648 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    b614:	2801      	cmp	r0, #1
    b616:	d022      	beq.n	b65e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    b618:	2803      	cmp	r0, #3
    b61a:	d109      	bne.n	b630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b61c:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    b620:	2813      	cmp	r0, #19
    b622:	d005      	beq.n	b630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b624:	2816      	cmp	r0, #22
    b626:	d003      	beq.n	b630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b628:	2818      	cmp	r0, #24
    b62a:	d001      	beq.n	b630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b62c:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    b630:	4770      	bx	lr
    b632:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    b636:	2801      	cmp	r0, #1
    b638:	d0fa      	beq.n	b630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    b63a:	bf00      	nop
    b63c:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    b640:	7801      	ldrb	r1, [r0, #0]
    b642:	1e49      	subs	r1, r1, #1
    b644:	7001      	strb	r1, [r0, #0]
    b646:	4770      	bx	lr
    b648:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    b64c:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    b650:	1ac0      	subs	r0, r0, r3
    b652:	b200      	sxth	r0, r0
    b654:	2800      	cmp	r0, #0
    b656:	dbf6      	blt.n	b646 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    b658:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    b65c:	4770      	bx	lr
    b65e:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    b662:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    b666:	1a40      	subs	r0, r0, r1
    b668:	b200      	sxth	r0, r0
    b66a:	2800      	cmp	r0, #0
    b66c:	dae6      	bge.n	b63c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    b66e:	4770      	bx	lr
    b670:	2000011c 	.word	0x2000011c

0000b674 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    b674:	b510      	push	{r4, lr}
    b676:	6941      	ldr	r1, [r0, #20]
    b678:	b119      	cbz	r1, b682 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    b67a:	6842      	ldr	r2, [r0, #4]
    b67c:	684b      	ldr	r3, [r1, #4]
    b67e:	429a      	cmp	r2, r3
    b680:	d203      	bcs.n	b68a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    b682:	21c1      	movs	r1, #193	; 0xc1
    b684:	2037      	movs	r0, #55	; 0x37
    b686:	f7f9 fc1b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b68a:	6902      	ldr	r2, [r0, #16]
    b68c:	610a      	str	r2, [r1, #16]
    b68e:	68c3      	ldr	r3, [r0, #12]
    b690:	60cb      	str	r3, [r1, #12]
    b692:	b10a      	cbz	r2, b698 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    b694:	60d1      	str	r1, [r2, #12]
    b696:	e001      	b.n	b69c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    b698:	4a06      	ldr	r2, [pc, #24]	; (b6b4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    b69a:	6011      	str	r1, [r2, #0]
    b69c:	68ca      	ldr	r2, [r1, #12]
    b69e:	b132      	cbz	r2, b6ae <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    b6a0:	6111      	str	r1, [r2, #16]
    b6a2:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    b6a6:	4410      	add	r0, r2
    b6a8:	684a      	ldr	r2, [r1, #4]
    b6aa:	1a80      	subs	r0, r0, r2
    b6ac:	e000      	b.n	b6b0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    b6ae:	2000      	movs	r0, #0
    b6b0:	6088      	str	r0, [r1, #8]
    b6b2:	bd10      	pop	{r4, pc}
    b6b4:	200001f4 	.word	0x200001f4

0000b6b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    b6b8:	b510      	push	{r4, lr}
    b6ba:	2200      	movs	r2, #0
    b6bc:	6101      	str	r1, [r0, #16]
    b6be:	b189      	cbz	r1, b6e4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    b6c0:	68cb      	ldr	r3, [r1, #12]
    b6c2:	60c8      	str	r0, [r1, #12]
    b6c4:	60c3      	str	r3, [r0, #12]
    b6c6:	b103      	cbz	r3, b6ca <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    b6c8:	6118      	str	r0, [r3, #16]
    b6ca:	6901      	ldr	r1, [r0, #16]
    b6cc:	6082      	str	r2, [r0, #8]
    b6ce:	2900      	cmp	r1, #0
    b6d0:	d00f      	beq.n	b6f2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    b6d2:	688b      	ldr	r3, [r1, #8]
    b6d4:	b163      	cbz	r3, b6f0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    b6d6:	6844      	ldr	r4, [r0, #4]
    b6d8:	42a3      	cmp	r3, r4
    b6da:	d207      	bcs.n	b6ec <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    b6dc:	212a      	movs	r1, #42	; 0x2a
    b6de:	2037      	movs	r0, #55	; 0x37
    b6e0:	f7f9 fbee 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6e4:	4903      	ldr	r1, [pc, #12]	; (b6f4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    b6e6:	60c2      	str	r2, [r0, #12]
    b6e8:	6008      	str	r0, [r1, #0]
    b6ea:	e7ee      	b.n	b6ca <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    b6ec:	1b1b      	subs	r3, r3, r4
    b6ee:	6083      	str	r3, [r0, #8]
    b6f0:	608a      	str	r2, [r1, #8]
    b6f2:	bd10      	pop	{r4, pc}
    b6f4:	200001f4 	.word	0x200001f4

0000b6f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    b6f8:	6901      	ldr	r1, [r0, #16]
    b6fa:	b149      	cbz	r1, b710 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    b6fc:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    b700:	441a      	add	r2, r3
    b702:	688b      	ldr	r3, [r1, #8]
    b704:	441a      	add	r2, r3
    b706:	608a      	str	r2, [r1, #8]
    b708:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    b70c:	60d1      	str	r1, [r2, #12]
    b70e:	e002      	b.n	b716 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    b710:	4a06      	ldr	r2, [pc, #24]	; (b72c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    b712:	68c1      	ldr	r1, [r0, #12]
    b714:	6011      	str	r1, [r2, #0]
    b716:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    b71a:	b109      	cbz	r1, b720 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    b71c:	6108      	str	r0, [r1, #16]
    b71e:	4770      	bx	lr
    b720:	2800      	cmp	r0, #0
    b722:	d0fc      	beq.n	b71e <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    b724:	2100      	movs	r1, #0
    b726:	6081      	str	r1, [r0, #8]
    b728:	4770      	bx	lr
    b72a:	0000      	.short	0x0000
    b72c:	200001f4 	.word	0x200001f4

0000b730 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    b730:	b510      	push	{r4, lr}
    b732:	4604      	mov	r4, r0
    b734:	490a      	ldr	r1, [pc, #40]	; (b760 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    b736:	2000      	movs	r0, #0
    b738:	4602      	mov	r2, r0
    b73a:	6809      	ldr	r1, [r1, #0]
    b73c:	1e43      	subs	r3, r0, #1
    b73e:	e008      	b.n	b752 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    b740:	688a      	ldr	r2, [r1, #8]
    b742:	42a2      	cmp	r2, r4
    b744:	d303      	bcc.n	b74e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    b746:	429a      	cmp	r2, r3
    b748:	d201      	bcs.n	b74e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    b74a:	4613      	mov	r3, r2
    b74c:	4608      	mov	r0, r1
    b74e:	460a      	mov	r2, r1
    b750:	68c9      	ldr	r1, [r1, #12]
    b752:	2900      	cmp	r1, #0
    b754:	d1f4      	bne.n	b740 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    b756:	2800      	cmp	r0, #0
    b758:	d100      	bne.n	b75c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    b75a:	4610      	mov	r0, r2
    b75c:	bd10      	pop	{r4, pc}
    b75e:	0000      	.short	0x0000
    b760:	200001f4 	.word	0x200001f4

0000b764 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    b764:	4801      	ldr	r0, [pc, #4]	; (b76c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    b766:	6800      	ldr	r0, [r0, #0]
    b768:	4770      	bx	lr
    b76a:	0000      	.short	0x0000
    b76c:	200001f4 	.word	0x200001f4

0000b770 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    b770:	4804      	ldr	r0, [pc, #16]	; (b784 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    b772:	6801      	ldr	r1, [r0, #0]
    b774:	2000      	movs	r0, #0
    b776:	e001      	b.n	b77c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    b778:	4608      	mov	r0, r1
    b77a:	68c9      	ldr	r1, [r1, #12]
    b77c:	2900      	cmp	r1, #0
    b77e:	d1fb      	bne.n	b778 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    b780:	4770      	bx	lr
    b782:	0000      	.short	0x0000
    b784:	200001f4 	.word	0x200001f4

0000b788 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    b788:	4801      	ldr	r0, [pc, #4]	; (b790 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    b78a:	2100      	movs	r1, #0
    b78c:	6001      	str	r1, [r0, #0]
    b78e:	4770      	bx	lr
    b790:	200001f4 	.word	0x200001f4

0000b794 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    b794:	4903      	ldr	r1, [pc, #12]	; (b7a4 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    b796:	2000      	movs	r0, #0
    b798:	6809      	ldr	r1, [r1, #0]
    b79a:	2900      	cmp	r1, #0
    b79c:	d000      	beq.n	b7a0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    b79e:	200c      	movs	r0, #12
    b7a0:	4770      	bx	lr
    b7a2:	0000      	.short	0x0000
    b7a4:	200001f4 	.word	0x200001f4

0000b7a8 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    b7a8:	b500      	push	{lr}
    b7aa:	7941      	ldrb	r1, [r0, #5]
    b7ac:	b095      	sub	sp, #84	; 0x54
    b7ae:	b141      	cbz	r1, b7c2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b7b0:	2901      	cmp	r1, #1
    b7b2:	d006      	beq.n	b7c2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b7b4:	2902      	cmp	r1, #2
    b7b6:	d004      	beq.n	b7c2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b7b8:	2903      	cmp	r1, #3
    b7ba:	d002      	beq.n	b7c2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    b7bc:	2012      	movs	r0, #18
    b7be:	b015      	add	sp, #84	; 0x54
    b7c0:	bd00      	pop	{pc}
    b7c2:	7901      	ldrb	r1, [r0, #4]
    b7c4:	f88d 1000 	strb.w	r1, [sp]
    b7c8:	7b01      	ldrb	r1, [r0, #12]
    b7ca:	f88d 1001 	strb.w	r1, [sp, #1]
    b7ce:	7942      	ldrb	r2, [r0, #5]
    b7d0:	2100      	movs	r1, #0
    b7d2:	2301      	movs	r3, #1
    b7d4:	b3e2      	cbz	r2, b850 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    b7d6:	2a02      	cmp	r2, #2
    b7d8:	d03b      	beq.n	b852 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    b7da:	f88d 3002 	strb.w	r3, [sp, #2]
    b7de:	bf00      	nop
    b7e0:	f8d0 2006 	ldr.w	r2, [r0, #6]
    b7e4:	f8cd 2003 	str.w	r2, [sp, #3]
    b7e8:	8942      	ldrh	r2, [r0, #10]
    b7ea:	f8ad 2007 	strh.w	r2, [sp, #7]
    b7ee:	f88d 3009 	strb.w	r3, [sp, #9]
    b7f2:	f830 2b01 	ldrh.w	r2, [r0], #1
    b7f6:	f240 2371 	movw	r3, #625	; 0x271
    b7fa:	435a      	muls	r2, r3
    b7fc:	9203      	str	r2, [sp, #12]
    b7fe:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    b802:	435a      	muls	r2, r3
    b804:	9206      	str	r2, [sp, #24]
    b806:	8982      	ldrh	r2, [r0, #12]
    b808:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    b80c:	89c2      	ldrh	r2, [r0, #14]
    b80e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    b812:	8a02      	ldrh	r2, [r0, #16]
    b814:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    b818:	8a42      	ldrh	r2, [r0, #18]
    b81a:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    b81e:	8a82      	ldrh	r2, [r0, #20]
    b820:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    b824:	8ac0      	ldrh	r0, [r0, #22]
    b826:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    b82a:	2007      	movs	r0, #7
    b82c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    b830:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    b834:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    b838:	9806      	ldr	r0, [sp, #24]
    b83a:	f000 fb95 	bl	bf68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    b83e:	b158      	cbz	r0, b858 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    b840:	9803      	ldr	r0, [sp, #12]
    b842:	f000 fb85 	bl	bf50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    b846:	b138      	cbz	r0, b858 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    b848:	4668      	mov	r0, sp
    b84a:	f000 f89f 	bl	b98c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    b84e:	e7b6      	b.n	b7be <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    b850:	e7ff      	b.n	b852 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    b852:	f88d 1002 	strb.w	r1, [sp, #2]
    b856:	e7c3      	b.n	b7e0 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    b858:	2030      	movs	r0, #48	; 0x30
    b85a:	e7b0      	b.n	b7be <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000b85c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    b85c:	4903      	ldr	r1, [pc, #12]	; (b86c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    b85e:	884a      	ldrh	r2, [r1, #2]
    b860:	8002      	strh	r2, [r0, #0]
    b862:	7809      	ldrb	r1, [r1, #0]
    b864:	7081      	strb	r1, [r0, #2]
    b866:	2000      	movs	r0, #0
    b868:	4770      	bx	lr
    b86a:	0000      	.short	0x0000
    b86c:	2000124c 	.word	0x2000124c

0000b870 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    b870:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b872:	460c      	mov	r4, r1
    b874:	4605      	mov	r5, r0
    b876:	8800      	ldrh	r0, [r0, #0]
    b878:	4669      	mov	r1, sp
    b87a:	f003 f93c 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b87e:	0001      	movs	r1, r0
    b880:	f04f 0000 	mov.w	r0, #0
    b884:	d005      	beq.n	b892 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    b886:	f8c4 0002 	str.w	r0, [r4, #2]
    b88a:	71a0      	strb	r0, [r4, #6]
    b88c:	8020      	strh	r0, [r4, #0]
    b88e:	2002      	movs	r0, #2
    b890:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b892:	9901      	ldr	r1, [sp, #4]
    b894:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    b898:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    b89c:	f8d1 2016 	ldr.w	r2, [r1, #22]
    b8a0:	f8c4 2002 	str.w	r2, [r4, #2]
    b8a4:	7e8a      	ldrb	r2, [r1, #26]
    b8a6:	71a2      	strb	r2, [r4, #6]
    b8a8:	882a      	ldrh	r2, [r5, #0]
    b8aa:	8022      	strh	r2, [r4, #0]
    b8ac:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    b8b0:	f88d 2008 	strb.w	r2, [sp, #8]
    b8b4:	9a02      	ldr	r2, [sp, #8]
    b8b6:	9202      	str	r2, [sp, #8]
    b8b8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    b8bc:	2a00      	cmp	r2, #0
    b8be:	d1eb      	bne.n	b898 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    b8c0:	2000      	movs	r0, #0
    b8c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000b8c4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    b8c4:	b51c      	push	{r2, r3, r4, lr}
    b8c6:	8800      	ldrh	r0, [r0, #0]
    b8c8:	4669      	mov	r1, sp
    b8ca:	f003 f914 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    b8ce:	2800      	cmp	r0, #0
    b8d0:	d106      	bne.n	b8e0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    b8d2:	f89d 0000 	ldrb.w	r0, [sp]
    b8d6:	b120      	cbz	r0, b8e2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    b8d8:	480b      	ldr	r0, [pc, #44]	; (b908 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    b8da:	7800      	ldrb	r0, [r0, #0]
    b8dc:	b190      	cbz	r0, b904 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    b8de:	2002      	movs	r0, #2
    b8e0:	bd1c      	pop	{r2, r3, r4, pc}
    b8e2:	9801      	ldr	r0, [sp, #4]
    b8e4:	f004 ff79 	bl	107da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    b8e8:	2800      	cmp	r0, #0
    b8ea:	d0f8      	beq.n	b8de <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    b8ec:	9801      	ldr	r0, [sp, #4]
    b8ee:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    b8f2:	b108      	cbz	r0, b8f8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    b8f4:	203a      	movs	r0, #58	; 0x3a
    b8f6:	bd1c      	pop	{r2, r3, r4, pc}
    b8f8:	9901      	ldr	r1, [sp, #4]
    b8fa:	2001      	movs	r0, #1
    b8fc:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    b900:	2000      	movs	r0, #0
    b902:	bd1c      	pop	{r2, r3, r4, pc}
    b904:	2011      	movs	r0, #17
    b906:	bd1c      	pop	{r2, r3, r4, pc}
    b908:	200001f8 	.word	0x200001f8

0000b90c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    b90c:	b510      	push	{r4, lr}
    b90e:	4604      	mov	r4, r0
    b910:	f004 ff5a 	bl	107c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    b914:	b130      	cbz	r0, b924 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    b916:	4804      	ldr	r0, [pc, #16]	; (b928 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    b918:	8881      	ldrh	r1, [r0, #4]
    b91a:	8021      	strh	r1, [r4, #0]
    b91c:	88c0      	ldrh	r0, [r0, #6]
    b91e:	8060      	strh	r0, [r4, #2]
    b920:	2000      	movs	r0, #0
    b922:	bd10      	pop	{r4, pc}
    b924:	2001      	movs	r0, #1
    b926:	bd10      	pop	{r4, pc}
    b928:	20000206 	.word	0x20000206

0000b92c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    b92c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    b92e:	4605      	mov	r5, r0
    b930:	f000 fbf8 	bl	c124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    b934:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b938:	b310      	cbz	r0, b980 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    b93a:	2400      	movs	r4, #0
    b93c:	a802      	add	r0, sp, #8
    b93e:	f88d 4004 	strb.w	r4, [sp, #4]
    b942:	f88d 4008 	strb.w	r4, [sp, #8]
    b946:	9000      	str	r0, [sp, #0]
    b948:	78aa      	ldrb	r2, [r5, #2]
    b94a:	7869      	ldrb	r1, [r5, #1]
    b94c:	7828      	ldrb	r0, [r5, #0]
    b94e:	ab01      	add	r3, sp, #4
    b950:	f004 ffe7 	bl	10922 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    b954:	2800      	cmp	r0, #0
    b956:	d112      	bne.n	b97e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    b958:	f89d 0004 	ldrb.w	r0, [sp, #4]
    b95c:	f004 fd5e 	bl	1041c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    b960:	b180      	cbz	r0, b984 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b962:	f89d 0008 	ldrb.w	r0, [sp, #8]
    b966:	f004 fd59 	bl	1041c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    b96a:	b158      	cbz	r0, b984 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    b96c:	4806      	ldr	r0, [pc, #24]	; (b988 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    b96e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    b972:	7381      	strb	r1, [r0, #14]
    b974:	f89d 1008 	ldrb.w	r1, [sp, #8]
    b978:	73c1      	strb	r1, [r0, #15]
    b97a:	8204      	strh	r4, [r0, #16]
    b97c:	2000      	movs	r0, #0
    b97e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b980:	2001      	movs	r0, #1
    b982:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b984:	2011      	movs	r0, #17
    b986:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    b988:	2000124c 	.word	0x2000124c

0000b98c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    b98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b990:	a1a4      	add	r1, pc, #656	; (adr r1, bc24 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    b992:	4605      	mov	r5, r0
    b994:	e9d1 8700 	ldrd	r8, r7, [r1]
    b998:	7a40      	ldrb	r0, [r0, #9]
    b99a:	b08d      	sub	sp, #52	; 0x34
    b99c:	0781      	lsls	r1, r0, #30
    b99e:	d502      	bpl.n	b9a6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    b9a0:	f040 0001 	orr.w	r0, r0, #1
    b9a4:	7268      	strb	r0, [r5, #9]
    b9a6:	4628      	mov	r0, r5
    b9a8:	f004 fd97 	bl	104da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    b9ac:	2800      	cmp	r0, #0
    b9ae:	d10c      	bne.n	b9ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    b9b0:	f004 ff2e 	bl	10810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    b9b4:	b940      	cbnz	r0, b9c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b9b6:	f7fb fbbd 	bl	7134 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    b9ba:	b928      	cbnz	r0, b9c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    b9bc:	f7fb fe76 	bl	76ac <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    b9c0:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    b9c4:	39ff      	subs	r1, #255	; 0xff
    b9c6:	d003      	beq.n	b9d0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    b9c8:	200c      	movs	r0, #12
    b9ca:	b00d      	add	sp, #52	; 0x34
    b9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b9d0:	7828      	ldrb	r0, [r5, #0]
    b9d2:	f04f 0b00 	mov.w	fp, #0
    b9d6:	f04f 0a01 	mov.w	sl, #1
    b9da:	b9e0      	cbnz	r0, ba16 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8a>
    b9dc:	f895 9002 	ldrb.w	r9, [r5, #2]
    b9e0:	1cee      	adds	r6, r5, #3
    b9e2:	a909      	add	r1, sp, #36	; 0x24
    b9e4:	2000      	movs	r0, #0
    b9e6:	f002 ff25 	bl	e834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    b9ea:	b178      	cbz	r0, ba0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    b9ec:	f240 2109 	movw	r1, #521	; 0x209
    b9f0:	e112      	b.n	bc18 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    b9f2:	4648      	mov	r0, r9
    b9f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    b9f6:	f004 f926 	bl	fc46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    b9fa:	78a1      	ldrb	r1, [r4, #2]
    b9fc:	4288      	cmp	r0, r1
    b9fe:	d105      	bne.n	ba0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    ba00:	2206      	movs	r2, #6
    ba02:	4631      	mov	r1, r6
    ba04:	1ce0      	adds	r0, r4, #3
    ba06:	f001 fe59 	bl	d6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    ba0a:	b328      	cbz	r0, ba58 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    ba0c:	a809      	add	r0, sp, #36	; 0x24
    ba0e:	f7f9 fc87 	bl	5320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    ba12:	2800      	cmp	r0, #0
    ba14:	d0ed      	beq.n	b9f2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    ba16:	2103      	movs	r1, #3
    ba18:	f105 0018 	add.w	r0, r5, #24
    ba1c:	f000 fab0 	bl	bf80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    ba20:	2200      	movs	r2, #0
    ba22:	4611      	mov	r1, r2
    ba24:	a802      	add	r0, sp, #8
    ba26:	f7f9 fca1 	bl	536c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    ba2a:	0004      	movs	r4, r0
    ba2c:	d016      	beq.n	ba5c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    ba2e:	2100      	movs	r1, #0
    ba30:	f7fb f948 	bl	6cc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    ba34:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    ba38:	8020      	strh	r0, [r4, #0]
    ba3a:	487c      	ldr	r0, [pc, #496]	; (bc2c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    ba3c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    ba40:	f004 fec2 	bl	107c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ba44:	497a      	ldr	r1, [pc, #488]	; (bc30 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a4>)
    ba46:	2800      	cmp	r0, #0
    ba48:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    ba4c:	d008      	beq.n	ba60 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    ba4e:	884b      	ldrh	r3, [r1, #2]
    ba50:	888a      	ldrh	r2, [r1, #4]
    ba52:	84c3      	strh	r3, [r0, #38]	; 0x26
    ba54:	8502      	strh	r2, [r0, #40]	; 0x28
    ba56:	e006      	b.n	ba66 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    ba58:	200b      	movs	r0, #11
    ba5a:	e7b6      	b.n	b9ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    ba5c:	2009      	movs	r0, #9
    ba5e:	e7b4      	b.n	b9ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    ba60:	221b      	movs	r2, #27
    ba62:	84c2      	strh	r2, [r0, #38]	; 0x26
    ba64:	8502      	strh	r2, [r0, #40]	; 0x28
    ba66:	4689      	mov	r9, r1
    ba68:	4608      	mov	r0, r1
    ba6a:	7849      	ldrb	r1, [r1, #1]
    ba6c:	9100      	str	r1, [sp, #0]
    ba6e:	7803      	ldrb	r3, [r0, #0]
    ba70:	8882      	ldrh	r2, [r0, #4]
    ba72:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    ba76:	8820      	ldrh	r0, [r4, #0]
    ba78:	f7f9 fd5a 	bl	5530 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    ba7c:	b110      	cbz	r0, ba84 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf8>
    ba7e:	f640 6199 	movw	r1, #3737	; 0xe99
    ba82:	e0c9      	b.n	bc18 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    ba84:	f003 fd71 	bl	f56a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    ba88:	6120      	str	r0, [r4, #16]
    ba8a:	a06a      	add	r0, pc, #424	; (adr r0, bc34 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a8>)
    ba8c:	f104 0618 	add.w	r6, r4, #24
    ba90:	6800      	ldr	r0, [r0, #0]
    ba92:	9000      	str	r0, [sp, #0]
    ba94:	2103      	movs	r1, #3
    ba96:	4668      	mov	r0, sp
    ba98:	f7f9 faae 	bl	4ff8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    ba9c:	2000      	movs	r0, #0
    ba9e:	4669      	mov	r1, sp
    baa0:	5c0a      	ldrb	r2, [r1, r0]
    baa2:	5432      	strb	r2, [r6, r0]
    baa4:	1c40      	adds	r0, r0, #1
    baa6:	b2c0      	uxtb	r0, r0
    baa8:	2803      	cmp	r0, #3
    baaa:	d3f9      	bcc.n	baa0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x114>
    baac:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    baae:	f003 f82e 	bl	eb0e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    bab2:	60e0      	str	r0, [r4, #12]
    bab4:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    bab6:	82a0      	strh	r0, [r4, #20]
    bab8:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    baba:	82e0      	strh	r0, [r4, #22]
    babc:	7a68      	ldrb	r0, [r5, #9]
    babe:	f004 fc8c 	bl	103da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    bac2:	f8d9 1008 	ldr.w	r1, [r9, #8]
    bac6:	464e      	mov	r6, r9
    bac8:	4620      	mov	r0, r4
    baca:	62e1      	str	r1, [r4, #44]	; 0x2c
    bacc:	f003 fee2 	bl	f894 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    bad0:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    bad4:	46d1      	mov	r9, sl
    bad6:	4650      	mov	r0, sl
    bad8:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    badc:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    bae0:	4852      	ldr	r0, [pc, #328]	; (bc2c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    bae2:	3808      	subs	r0, #8
    bae4:	6843      	ldr	r3, [r0, #4]
    bae6:	b123      	cbz	r3, baf2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x166>
    bae8:	2201      	movs	r2, #1
    baea:	f504 7199 	add.w	r1, r4, #306	; 0x132
    baee:	4620      	mov	r0, r4
    baf0:	4798      	blx	r3
    baf2:	8821      	ldrh	r1, [r4, #0]
    baf4:	f8ad 1014 	strh.w	r1, [sp, #20]
    baf8:	7bb1      	ldrb	r1, [r6, #14]
    bafa:	f88d 1016 	strb.w	r1, [sp, #22]
    bafe:	7bf1      	ldrb	r1, [r6, #15]
    bb00:	f88d 1017 	strb.w	r1, [sp, #23]
    bb04:	8a31      	ldrh	r1, [r6, #16]
    bb06:	f8ad 1018 	strh.w	r1, [sp, #24]
    bb0a:	a908      	add	r1, sp, #32
    bb0c:	9100      	str	r1, [sp, #0]
    bb0e:	2000      	movs	r0, #0
    bb10:	ab07      	add	r3, sp, #28
    bb12:	aa05      	add	r2, sp, #20
    bb14:	4621      	mov	r1, r4
    bb16:	f004 fe18 	bl	1074a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    bb1a:	0006      	movs	r6, r0
    bb1c:	d10f      	bne.n	bb3e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b2>
    bb1e:	f89d 001c 	ldrb.w	r0, [sp, #28]
    bb22:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    bb26:	f89d 0020 	ldrb.w	r0, [sp, #32]
    bb2a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    bb2e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    bb32:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    bb36:	a909      	add	r1, sp, #36	; 0x24
    bb38:	4620      	mov	r0, r4
    bb3a:	f003 f8d6 	bl	ecea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    bb3e:	46d8      	mov	r8, fp
    bb40:	f88d b00c 	strb.w	fp, [sp, #12]
    bb44:	2101      	movs	r1, #1
    bb46:	a803      	add	r0, sp, #12
    bb48:	f7f9 fa56 	bl	4ff8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    bb4c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    bb50:	f000 0107 	and.w	r1, r0, #7
    bb54:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    bb58:	4411      	add	r1, r2
    bb5a:	f3c0 1040 	ubfx	r0, r0, #5, #1
    bb5e:	4408      	add	r0, r1
    bb60:	f88d 000c 	strb.w	r0, [sp, #12]
    bb64:	1d40      	adds	r0, r0, #5
    bb66:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    bb6a:	2809      	cmp	r0, #9
    bb6c:	d202      	bcs.n	bb74 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e8>
    bb6e:	3008      	adds	r0, #8
    bb70:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    bb74:	2101      	movs	r1, #1
    bb76:	4620      	mov	r0, r4
    bb78:	f7fb f8a4 	bl	6cc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    bb7c:	7868      	ldrb	r0, [r5, #1]
    bb7e:	f7fb fe69 	bl	7854 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    bb82:	bbee      	cbnz	r6, bc00 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    bb84:	78a9      	ldrb	r1, [r5, #2]
    bb86:	7828      	ldrb	r0, [r5, #0]
    bb88:	1cea      	adds	r2, r5, #3
    bb8a:	f7fb fe0d 	bl	77a8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    bb8e:	b148      	cbz	r0, bba4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x218>
    bb90:	f7fb fd34 	bl	75fc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    bb94:	78a9      	ldrb	r1, [r5, #2]
    bb96:	7828      	ldrb	r0, [r5, #0]
    bb98:	1cea      	adds	r2, r5, #3
    bb9a:	f7fb fe29 	bl	77f0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    bb9e:	0006      	movs	r6, r0
    bba0:	d002      	beq.n	bba8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21c>
    bba2:	e02f      	b.n	bc04 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    bba4:	2612      	movs	r6, #18
    bba6:	e02d      	b.n	bc04 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    bba8:	78a8      	ldrb	r0, [r5, #2]
    bbaa:	f004 f84c 	bl	fc46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    bbae:	4602      	mov	r2, r0
    bbb0:	1ceb      	adds	r3, r5, #3
    bbb2:	4621      	mov	r1, r4
    bbb4:	2003      	movs	r0, #3
    bbb6:	f7fb fd63 	bl	7680 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    bbba:	0006      	movs	r6, r0
    bbbc:	d122      	bne.n	bc04 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    bbbe:	464f      	mov	r7, r9
    bbc0:	4648      	mov	r0, r9
    bbc2:	f7fb fdbb 	bl	773c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    bbc6:	0006      	movs	r6, r0
    bbc8:	d11c      	bne.n	bc04 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    bbca:	f88d 800c 	strb.w	r8, [sp, #12]
    bbce:	7a68      	ldrb	r0, [r5, #9]
    bbd0:	07c0      	lsls	r0, r0, #31
    bbd2:	d005      	beq.n	bbe0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x254>
    bbd4:	68e8      	ldr	r0, [r5, #12]
    bbd6:	9004      	str	r0, [sp, #16]
    bbd8:	69a8      	ldr	r0, [r5, #24]
    bbda:	9005      	str	r0, [sp, #20]
    bbdc:	f88d 700c 	strb.w	r7, [sp, #12]
    bbe0:	a803      	add	r0, sp, #12
    bbe2:	f7fd f913 	bl	8e0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    bbe6:	4606      	mov	r6, r0
    bbe8:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    bbec:	f7fb fea6 	bl	793c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    bbf0:	b936      	cbnz	r6, bc00 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    bbf2:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    bbf6:	4620      	mov	r0, r4
    bbf8:	f7fd f82a 	bl	8c50 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    bbfc:	0006      	movs	r6, r0
    bbfe:	e000      	b.n	bc02 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x276>
    bc00:	e000      	b.n	bc04 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    bc02:	d00c      	beq.n	bc1e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    bc04:	8820      	ldrh	r0, [r4, #0]
    bc06:	f002 fe74 	bl	e8f2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    bc0a:	8820      	ldrh	r0, [r4, #0]
    bc0c:	2100      	movs	r1, #0
    bc0e:	f7f9 fbd5 	bl	53bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    bc12:	b120      	cbz	r0, bc1e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    bc14:	f640 715f 	movw	r1, #3935	; 0xf5f
    bc18:	2039      	movs	r0, #57	; 0x39
    bc1a:	f7f9 f951 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc1e:	4630      	mov	r0, r6
    bc20:	e6d3      	b.n	b9ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    bc22:	0000      	.short	0x0000
    bc24:	ffffffff 	.word	0xffffffff
    bc28:	0000001f 	.word	0x0000001f
    bc2c:	20000200 	.word	0x20000200
    bc30:	2000124c 	.word	0x2000124c
    bc34:	00332211 	.word	0x00332211

0000bc38 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    bc38:	7801      	ldrb	r1, [r0, #0]
    bc3a:	b171      	cbz	r1, bc5a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    bc3c:	7841      	ldrb	r1, [r0, #1]
    bc3e:	b161      	cbz	r1, bc5a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    bc40:	8841      	ldrh	r1, [r0, #2]
    bc42:	291b      	cmp	r1, #27
    bc44:	d309      	bcc.n	bc5a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    bc46:	8881      	ldrh	r1, [r0, #4]
    bc48:	291b      	cmp	r1, #27
    bc4a:	d306      	bcc.n	bc5a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    bc4c:	4904      	ldr	r1, [pc, #16]	; (bc60 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    bc4e:	6802      	ldr	r2, [r0, #0]
    bc50:	600a      	str	r2, [r1, #0]
    bc52:	8880      	ldrh	r0, [r0, #4]
    bc54:	8088      	strh	r0, [r1, #4]
    bc56:	2000      	movs	r0, #0
    bc58:	4770      	bx	lr
    bc5a:	2012      	movs	r0, #18
    bc5c:	4770      	bx	lr
    bc5e:	0000      	.short	0x0000
    bc60:	2000124c 	.word	0x2000124c

0000bc64 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    bc64:	6800      	ldr	r0, [r0, #0]
    bc66:	f240 41e2 	movw	r1, #1250	; 0x4e2
    bc6a:	4288      	cmp	r0, r1
    bc6c:	d303      	bcc.n	bc76 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    bc6e:	4903      	ldr	r1, [pc, #12]	; (bc7c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    bc70:	6088      	str	r0, [r1, #8]
    bc72:	2000      	movs	r0, #0
    bc74:	4770      	bx	lr
    bc76:	2012      	movs	r0, #18
    bc78:	4770      	bx	lr
    bc7a:	0000      	.short	0x0000
    bc7c:	2000124c 	.word	0x2000124c

0000bc80 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    bc80:	b510      	push	{r4, lr}
    bc82:	b086      	sub	sp, #24
    bc84:	4604      	mov	r4, r0
    bc86:	f004 fc9f 	bl	105c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    bc8a:	2800      	cmp	r0, #0
    bc8c:	d103      	bne.n	bc96 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bc8e:	f004 fdbf 	bl	10810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    bc92:	b110      	cbz	r0, bc9a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    bc94:	200c      	movs	r0, #12
    bc96:	b006      	add	sp, #24
    bc98:	bd10      	pop	{r4, pc}
    bc9a:	2102      	movs	r1, #2
    bc9c:	f104 0010 	add.w	r0, r4, #16
    bca0:	f000 f96e 	bl	bf80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    bca4:	78a0      	ldrb	r0, [r4, #2]
    bca6:	f88d 0008 	strb.w	r0, [sp, #8]
    bcaa:	78a0      	ldrb	r0, [r4, #2]
    bcac:	f88d 0000 	strb.w	r0, [sp]
    bcb0:	7860      	ldrb	r0, [r4, #1]
    bcb2:	f88d 0003 	strb.w	r0, [sp, #3]
    bcb6:	7820      	ldrb	r0, [r4, #0]
    bcb8:	f88d 0002 	strb.w	r0, [sp, #2]
    bcbc:	7e20      	ldrb	r0, [r4, #24]
    bcbe:	f88d 0004 	strb.w	r0, [sp, #4]
    bcc2:	78a0      	ldrb	r0, [r4, #2]
    bcc4:	07c0      	lsls	r0, r0, #31
    bcc6:	d00b      	beq.n	bce0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    bcc8:	78e0      	ldrb	r0, [r4, #3]
    bcca:	2801      	cmp	r0, #1
    bccc:	d011      	beq.n	bcf2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    bcce:	b190      	cbz	r0, bcf6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    bcd0:	f05f 0000 	movs.w	r0, #0
    bcd4:	f88d 0001 	strb.w	r0, [sp, #1]
    bcd8:	68a0      	ldr	r0, [r4, #8]
    bcda:	9003      	str	r0, [sp, #12]
    bcdc:	6920      	ldr	r0, [r4, #16]
    bcde:	9004      	str	r0, [sp, #16]
    bce0:	a802      	add	r0, sp, #8
    bce2:	f7fd f893 	bl	8e0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    bce6:	2800      	cmp	r0, #0
    bce8:	d1d5      	bne.n	bc96 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bcea:	4668      	mov	r0, sp
    bcec:	f7fb fe2e 	bl	794c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    bcf0:	e7d1      	b.n	bc96 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    bcf2:	2002      	movs	r0, #2
    bcf4:	e7ee      	b.n	bcd4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    bcf6:	2001      	movs	r0, #1
    bcf8:	e7ec      	b.n	bcd4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000bcfc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    bcfc:	4a03      	ldr	r2, [pc, #12]	; (bd0c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    bcfe:	e9d2 1200 	ldrd	r1, r2, [r2]
    bd02:	6001      	str	r1, [r0, #0]
    bd04:	6042      	str	r2, [r0, #4]
    bd06:	2000      	movs	r0, #0
    bd08:	4770      	bx	lr
    bd0a:	0000      	.short	0x0000
    bd0c:	0000c00c 	.word	0x0000c00c

0000bd10 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    bd10:	b510      	push	{r4, lr}
    bd12:	2005      	movs	r0, #5
    bd14:	f000 f9fc 	bl	c110 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    bd18:	f7fd fe48 	bl	99ac <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    bd1c:	4902      	ldr	r1, [pc, #8]	; (bd28 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    bd1e:	4801      	ldr	r0, [pc, #4]	; (bd24 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    bd20:	6048      	str	r0, [r1, #4]
    bd22:	bd10      	pop	{r4, pc}
    bd24:	0000be55 	.word	0x0000be55
    bd28:	200001f8 	.word	0x200001f8

0000bd2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    bd2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bd30:	b086      	sub	sp, #24
    bd32:	468a      	mov	sl, r1
    bd34:	4606      	mov	r6, r0
    bd36:	8800      	ldrh	r0, [r0, #0]
    bd38:	a901      	add	r1, sp, #4
    bd3a:	f002 fedc 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    bd3e:	2800      	cmp	r0, #0
    bd40:	d139      	bne.n	bdb6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    bd42:	9802      	ldr	r0, [sp, #8]
    bd44:	f04f 0801 	mov.w	r8, #1
    bd48:	4601      	mov	r1, r0
    bd4a:	4689      	mov	r9, r1
    bd4c:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    bd50:	f88d 1000 	strb.w	r1, [sp]
    bd54:	9900      	ldr	r1, [sp, #0]
    bd56:	9100      	str	r1, [sp, #0]
    bd58:	f89d 5000 	ldrb.w	r5, [sp]
    bd5c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    bd60:	3078      	adds	r0, #120	; 0x78
    bd62:	2921      	cmp	r1, #33	; 0x21
    bd64:	d100      	bne.n	bd68 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    bd66:	b13d      	cbz	r5, bd78 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    bd68:	2400      	movs	r4, #0
    bd6a:	304e      	adds	r0, #78	; 0x4e
    bd6c:	2108      	movs	r1, #8
    bd6e:	4607      	mov	r7, r0
    bd70:	f003 ff5f 	bl	fc32 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    bd74:	b110      	cbz	r0, bd7c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    bd76:	e007      	b.n	bd88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    bd78:	2401      	movs	r4, #1
    bd7a:	e7f6      	b.n	bd6a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    bd7c:	210b      	movs	r1, #11
    bd7e:	4638      	mov	r0, r7
    bd80:	f003 ff57 	bl	fc32 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    bd84:	b900      	cbnz	r0, bd88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    bd86:	b1ac      	cbz	r4, bdb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    bd88:	a804      	add	r0, sp, #16
    bd8a:	9000      	str	r0, [sp, #0]
    bd8c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bd90:	ab03      	add	r3, sp, #12
    bd92:	4632      	mov	r2, r6
    bd94:	4649      	mov	r1, r9
    bd96:	f004 fcd8 	bl	1074a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    bd9a:	0007      	movs	r7, r0
    bd9c:	d10b      	bne.n	bdb6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    bd9e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    bda2:	9c02      	ldr	r4, [sp, #8]
    bda4:	b150      	cbz	r0, bdbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    bda6:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    bdaa:	bf00      	nop
    bdac:	f884 8001 	strb.w	r8, [r4, #1]
    bdb0:	b94d      	cbnz	r5, bdc6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    bdb2:	e006      	b.n	bdc2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    bdb4:	201a      	movs	r0, #26
    bdb6:	b006      	add	sp, #24
    bdb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bdbc:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    bdc0:	e7f4      	b.n	bdac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    bdc2:	7820      	ldrb	r0, [r4, #0]
    bdc4:	b108      	cbz	r0, bdca <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    bdc6:	273a      	movs	r7, #58	; 0x3a
    bdc8:	e012      	b.n	bdf0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    bdca:	f884 a000 	strb.w	sl, [r4]
    bdce:	f89d 000c 	ldrb.w	r0, [sp, #12]
    bdd2:	70a0      	strb	r0, [r4, #2]
    bdd4:	f89d 1010 	ldrb.w	r1, [sp, #16]
    bdd8:	70e1      	strb	r1, [r4, #3]
    bdda:	f88d 0000 	strb.w	r0, [sp]
    bdde:	f88d 1001 	strb.w	r1, [sp, #1]
    bde2:	88b0      	ldrh	r0, [r6, #4]
    bde4:	f8ad 0002 	strh.w	r0, [sp, #2]
    bde8:	4669      	mov	r1, sp
    bdea:	4648      	mov	r0, r9
    bdec:	f002 ff7d 	bl	ecea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    bdf0:	2000      	movs	r0, #0
    bdf2:	7060      	strb	r0, [r4, #1]
    bdf4:	4638      	mov	r0, r7
    bdf6:	e7de      	b.n	bdb6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000bdf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    bdf8:	b510      	push	{r4, lr}
    bdfa:	f002 fd8e 	bl	e91a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    bdfe:	f7fa fd07 	bl	6810 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    be02:	f000 f99f 	bl	c144 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    be06:	f003 fa5b 	bl	f2c0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    be0a:	4810      	ldr	r0, [pc, #64]	; (be4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    be0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    be10:	4b0f      	ldr	r3, [pc, #60]	; (be50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    be12:	8281      	strh	r1, [r0, #20]
    be14:	2100      	movs	r1, #0
    be16:	7581      	strb	r1, [r0, #22]
    be18:	8301      	strh	r1, [r0, #24]
    be1a:	221b      	movs	r2, #27
    be1c:	801a      	strh	r2, [r3, #0]
    be1e:	f44f 74a4 	mov.w	r4, #328	; 0x148
    be22:	805c      	strh	r4, [r3, #2]
    be24:	809a      	strh	r2, [r3, #4]
    be26:	80dc      	strh	r4, [r3, #6]
    be28:	7381      	strb	r1, [r0, #14]
    be2a:	73c1      	strb	r1, [r0, #15]
    be2c:	2303      	movs	r3, #3
    be2e:	7003      	strb	r3, [r0, #0]
    be30:	2302      	movs	r3, #2
    be32:	7043      	strb	r3, [r0, #1]
    be34:	8042      	strh	r2, [r0, #2]
    be36:	8082      	strh	r2, [r0, #4]
    be38:	f640 62a6 	movw	r2, #3750	; 0xea6
    be3c:	6082      	str	r2, [r0, #8]
    be3e:	4a04      	ldr	r2, [pc, #16]	; (be50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    be40:	1f92      	subs	r2, r2, #6
    be42:	7011      	strb	r1, [r2, #0]
    be44:	7481      	strb	r1, [r0, #18]
    be46:	7301      	strb	r1, [r0, #12]
    be48:	bd10      	pop	{r4, pc}
    be4a:	0000      	.short	0x0000
    be4c:	2000124c 	.word	0x2000124c
    be50:	20000206 	.word	0x20000206
    be54:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    be58:	4692      	mov	sl, r2
    be5a:	460f      	mov	r7, r1
    be5c:	4681      	mov	r9, r0
    be5e:	f004 fcb3 	bl	107c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    be62:	2800      	cmp	r0, #0
    be64:	d063      	beq.n	bf2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    be66:	4933      	ldr	r1, [pc, #204]	; (bf34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13c>)
    be68:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    be6c:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    be70:	8808      	ldrh	r0, [r1, #0]
    be72:	4290      	cmp	r0, r2
    be74:	d300      	bcc.n	be78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
    be76:	4610      	mov	r0, r2
    be78:	4680      	mov	r8, r0
    be7a:	8888      	ldrh	r0, [r1, #4]
    be7c:	42b0      	cmp	r0, r6
    be7e:	d200      	bcs.n	be82 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8a>
    be80:	4606      	mov	r6, r0
    be82:	884c      	ldrh	r4, [r1, #2]
    be84:	f640 0048 	movw	r0, #2120	; 0x848
    be88:	4284      	cmp	r4, r0
    be8a:	d300      	bcc.n	be8e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    be8c:	4604      	mov	r4, r0
    be8e:	88cd      	ldrh	r5, [r1, #6]
    be90:	4285      	cmp	r5, r0
    be92:	d300      	bcc.n	be96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
    be94:	4605      	mov	r5, r0
    be96:	4284      	cmp	r4, r0
    be98:	d300      	bcc.n	be9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    be9a:	4604      	mov	r4, r0
    be9c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    bea0:	2e1b      	cmp	r6, #27
    bea2:	d001      	beq.n	bea8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    bea4:	428d      	cmp	r5, r1
    bea6:	d104      	bne.n	beb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xba>
    bea8:	f1b8 0f1b 	cmp.w	r8, #27
    beac:	d03f      	beq.n	bf2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    beae:	428c      	cmp	r4, r1
    beb0:	d03d      	beq.n	bf2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    beb2:	466a      	mov	r2, sp
    beb4:	4651      	mov	r1, sl
    beb6:	4648      	mov	r0, r9
    beb8:	f004 fc11 	bl	106de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    bebc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    bec0:	4641      	mov	r1, r8
    bec2:	4540      	cmp	r0, r8
    bec4:	d900      	bls.n	bec8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd0>
    bec6:	4608      	mov	r0, r1
    bec8:	80f8      	strh	r0, [r7, #6]
    beca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    bece:	42a1      	cmp	r1, r4
    bed0:	d800      	bhi.n	bed4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
    bed2:	460c      	mov	r4, r1
    bed4:	813c      	strh	r4, [r7, #8]
    bed6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    beda:	42b1      	cmp	r1, r6
    bedc:	d800      	bhi.n	bee0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe8>
    bede:	460e      	mov	r6, r1
    bee0:	807e      	strh	r6, [r7, #2]
    bee2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    bee6:	42a9      	cmp	r1, r5
    bee8:	d900      	bls.n	beec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    beea:	4629      	mov	r1, r5
    beec:	80b9      	strh	r1, [r7, #4]
    beee:	2201      	movs	r2, #1
    bef0:	703a      	strb	r2, [r7, #0]
    bef2:	381b      	subs	r0, #27
    bef4:	28e0      	cmp	r0, #224	; 0xe0
    bef6:	d902      	bls.n	befe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x106>
    bef8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    befc:	e014      	b.n	bf28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    befe:	3e1b      	subs	r6, #27
    bf00:	2ee0      	cmp	r6, #224	; 0xe0
    bf02:	d902      	bls.n	bf0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x112>
    bf04:	f640 4182 	movw	r1, #3202	; 0xc82
    bf08:	e00e      	b.n	bf28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    bf0a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    bf0e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    bf12:	4284      	cmp	r4, r0
    bf14:	d902      	bls.n	bf1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
    bf16:	f640 4184 	movw	r1, #3204	; 0xc84
    bf1a:	e005      	b.n	bf28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    bf1c:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    bf20:	4281      	cmp	r1, r0
    bf22:	d904      	bls.n	bf2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    bf24:	f640 4186 	movw	r1, #3206	; 0xc86
    bf28:	2039      	movs	r0, #57	; 0x39
    bf2a:	f7f8 ffc9 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf2e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bf32:	0000      	.short	0x0000
    bf34:	20000206 	.word	0x20000206
    bf38:	4904      	ldr	r1, [pc, #16]	; (bf4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>)
    bf3a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bf3e:	4288      	cmp	r0, r1
    bf40:	d301      	bcc.n	bf46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    bf42:	2000      	movs	r0, #0
    bf44:	4770      	bx	lr
    bf46:	2001      	movs	r0, #1
    bf48:	4770      	bx	lr
    bf4a:	0000      	.short	0x0000
    bf4c:	0270f3cc 	.word	0x0270f3cc
    bf50:	4904      	ldr	r1, [pc, #16]	; (bf64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16c>)
    bf52:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bf56:	4288      	cmp	r0, r1
    bf58:	d301      	bcc.n	bf5e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    bf5a:	2000      	movs	r0, #0
    bf5c:	4770      	bx	lr
    bf5e:	2001      	movs	r0, #1
    bf60:	4770      	bx	lr
    bf62:	0000      	.short	0x0000
    bf64:	009c363d 	.word	0x009c363d
    bf68:	4904      	ldr	r1, [pc, #16]	; (bf7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>)
    bf6a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    bf6e:	4288      	cmp	r0, r1
    bf70:	d301      	bcc.n	bf76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17e>
    bf72:	2000      	movs	r0, #0
    bf74:	4770      	bx	lr
    bf76:	2001      	movs	r0, #1
    bf78:	4770      	bx	lr
    bf7a:	0000      	.short	0x0000
    bf7c:	009c363d 	.word	0x009c363d
    bf80:	b530      	push	{r4, r5, lr}
    bf82:	2200      	movs	r2, #0
    bf84:	4d07      	ldr	r5, [pc, #28]	; (bfa4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ac>)
    bf86:	e009      	b.n	bf9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a4>
    bf88:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    bf8c:	462b      	mov	r3, r5
    bf8e:	429c      	cmp	r4, r3
    bf90:	d800      	bhi.n	bf94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19c>
    bf92:	4623      	mov	r3, r4
    bf94:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    bf98:	1c52      	adds	r2, r2, #1
    bf9a:	b2d2      	uxtb	r2, r2
    bf9c:	428a      	cmp	r2, r1
    bf9e:	d3f3      	bcc.n	bf88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x190>
    bfa0:	bd30      	pop	{r4, r5, pc}
    bfa2:	0000      	.short	0x0000
    bfa4:	00f42400 	.word	0x00f42400
    bfa8:	4a09      	ldr	r2, [pc, #36]	; (bfd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>)
    bfaa:	4290      	cmp	r0, r2
    bfac:	d80b      	bhi.n	bfc6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    bfae:	2901      	cmp	r1, #1
    bfb0:	d002      	beq.n	bfb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
    bfb2:	2904      	cmp	r1, #4
    bfb4:	d003      	beq.n	bfbe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    bfb6:	e008      	b.n	bfca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    bfb8:	f240 7153 	movw	r1, #1875	; 0x753
    bfbc:	e001      	b.n	bfc2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
    bfbe:	f640 11c4 	movw	r1, #2500	; 0x9c4
    bfc2:	4288      	cmp	r0, r1
    bfc4:	d201      	bcs.n	bfca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    bfc6:	2000      	movs	r0, #0
    bfc8:	4770      	bx	lr
    bfca:	2001      	movs	r0, #1
    bfcc:	4770      	bx	lr
    bfce:	0000      	.short	0x0000
    bfd0:	0270fd8f 	.word	0x0270fd8f
    bfd4:	b510      	push	{r4, lr}
    bfd6:	4604      	mov	r4, r0
    bfd8:	88c1      	ldrh	r1, [r0, #6]
    bfda:	8880      	ldrh	r0, [r0, #4]
    bfdc:	f004 fa33 	bl	10446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    bfe0:	2800      	cmp	r0, #0
    bfe2:	d10f      	bne.n	c004 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    bfe4:	8861      	ldrh	r1, [r4, #2]
    bfe6:	8820      	ldrh	r0, [r4, #0]
    bfe8:	f004 fa2d 	bl	10446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    bfec:	2800      	cmp	r0, #0
    bfee:	d109      	bne.n	c004 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    bff0:	4805      	ldr	r0, [pc, #20]	; (c008 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x210>)
    bff2:	88a1      	ldrh	r1, [r4, #4]
    bff4:	8081      	strh	r1, [r0, #4]
    bff6:	8821      	ldrh	r1, [r4, #0]
    bff8:	8001      	strh	r1, [r0, #0]
    bffa:	88e1      	ldrh	r1, [r4, #6]
    bffc:	80c1      	strh	r1, [r0, #6]
    bffe:	8861      	ldrh	r1, [r4, #2]
    c000:	8041      	strh	r1, [r0, #2]
    c002:	2000      	movs	r0, #0
    c004:	bd10      	pop	{r4, pc}
    c006:	0000      	.short	0x0000
    c008:	20000206 	.word	0x20000206
    c00c:	0b12fe0b 	.word	0x0b12fe0b
    c010:	12fe0059 	.word	0x12fe0059
    c014:	05060708 	.word	0x05060708
    c018:	00020304 	.word	0x00020304
    c01c:	f0f4f8fc 	.word	0xf0f4f8fc
    c020:	0304d8ec 	.word	0x0304d8ec
    c024:	f4f8fc00 	.word	0xf4f8fc00
    c028:	00d8ecf0 	.word	0x00d8ecf0

0000c02c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    c02c:	b510      	push	{r4, lr}
    c02e:	460c      	mov	r4, r1
    c030:	f7fb f872 	bl	7118 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    c034:	4805      	ldr	r0, [pc, #20]	; (c04c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    c036:	6004      	str	r4, [r0, #0]
    c038:	6840      	ldr	r0, [r0, #4]
    c03a:	f004 fca1 	bl	10980 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    c03e:	f004 f997 	bl	10370 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    c042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c046:	f7fb ba81 	b.w	754c <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>
    c04a:	0000      	.short	0x0000
    c04c:	20000210 	.word	0x20000210

0000c050 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    c050:	b510      	push	{r4, lr}
    c052:	4c07      	ldr	r4, [pc, #28]	; (c070 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    c054:	68a0      	ldr	r0, [r4, #8]
    c056:	f004 fc93 	bl	10980 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    c05a:	68e0      	ldr	r0, [r4, #12]
    c05c:	f004 fc90 	bl	10980 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    c060:	f002 fc5b 	bl	e91a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    c064:	f7fa fbd4 	bl	6810 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    c068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c06c:	f7ff bec4 	b.w	bdf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    c070:	20000210 	.word	0x20000210

0000c074 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    c074:	b500      	push	{lr}
    c076:	4905      	ldr	r1, [pc, #20]	; (c08c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    c078:	4805      	ldr	r0, [pc, #20]	; (c090 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    c07a:	f004 fc74 	bl	10966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    c07e:	4804      	ldr	r0, [pc, #16]	; (c090 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    c080:	4904      	ldr	r1, [pc, #16]	; (c094 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    c082:	1d00      	adds	r0, r0, #4
    c084:	f85d eb04 	ldr.w	lr, [sp], #4
    c088:	f004 bc6d 	b.w	10966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    c08c:	20000238 	.word	0x20000238
    c090:	20000214 	.word	0x20000214
    c094:	20000240 	.word	0x20000240

0000c098 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    c098:	b500      	push	{lr}
    c09a:	4908      	ldr	r1, [pc, #32]	; (c0bc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    c09c:	4808      	ldr	r0, [pc, #32]	; (c0c0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    c09e:	f004 fc62 	bl	10966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    c0a2:	4807      	ldr	r0, [pc, #28]	; (c0c0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    c0a4:	4907      	ldr	r1, [pc, #28]	; (c0c4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    c0a6:	1d00      	adds	r0, r0, #4
    c0a8:	f004 fc5d 	bl	10966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    c0ac:	4804      	ldr	r0, [pc, #16]	; (c0c0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    c0ae:	4906      	ldr	r1, [pc, #24]	; (c0c8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    c0b0:	3008      	adds	r0, #8
    c0b2:	f85d eb04 	ldr.w	lr, [sp], #4
    c0b6:	f004 bc56 	b.w	10966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    c0ba:	0000      	.short	0x0000
    c0bc:	20000228 	.word	0x20000228
    c0c0:	20000214 	.word	0x20000214
    c0c4:	20000230 	.word	0x20000230
    c0c8:	20000220 	.word	0x20000220
    c0cc:	b510      	push	{r4, lr}
    c0ce:	f002 fc12 	bl	e8f6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    c0d2:	4806      	ldr	r0, [pc, #24]	; (c0ec <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x54>)
    c0d4:	f7f9 fdb2 	bl	5c3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    c0d8:	2000      	movs	r0, #0
    c0da:	f7f9 f8b9 	bl	5250 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    c0de:	f7fd fdb1 	bl	9c44 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    c0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c0e6:	f7fb b831 	b.w	714c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    c0ea:	0000      	.short	0x0000
    c0ec:	200015cd 	.word	0x200015cd
    c0f0:	b510      	push	{r4, lr}
    c0f2:	f7fb fba7 	bl	7844 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    c0f6:	f7ff fb47 	bl	b788 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    c0fa:	f7fc fd7f 	bl	8bfc <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    c0fe:	4803      	ldr	r0, [pc, #12]	; (c10c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    c100:	f7fb fb3c 	bl	777c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    c104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c108:	f7fb b830 	b.w	716c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    c10c:	200015cd 	.word	0x200015cd

0000c110 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    c110:	2101      	movs	r1, #1
    c112:	4081      	lsls	r1, r0
    c114:	4802      	ldr	r0, [pc, #8]	; (c120 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    c116:	6802      	ldr	r2, [r0, #0]
    c118:	4311      	orrs	r1, r2
    c11a:	6001      	str	r1, [r0, #0]
    c11c:	4770      	bx	lr
    c11e:	0000      	.short	0x0000
    c120:	20000248 	.word	0x20000248

0000c124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    c124:	4801      	ldr	r0, [pc, #4]	; (c12c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    c126:	6800      	ldr	r0, [r0, #0]
    c128:	4770      	bx	lr
    c12a:	0000      	.short	0x0000
    c12c:	20000248 	.word	0x20000248

0000c130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    c130:	4803      	ldr	r0, [pc, #12]	; (c140 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    c132:	8800      	ldrh	r0, [r0, #0]
    c134:	f3c0 2000 	ubfx	r0, r0, #8, #1
    c138:	0040      	lsls	r0, r0, #1
    c13a:	1c40      	adds	r0, r0, #1
    c13c:	4770      	bx	lr
    c13e:	0000      	.short	0x0000
    c140:	20000248 	.word	0x20000248

0000c144 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    c144:	b510      	push	{r4, lr}
    c146:	f7f8 fb01 	bl	474c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    c14a:	2200      	movs	r2, #0
    c14c:	4b08      	ldr	r3, [pc, #32]	; (c170 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    c14e:	4611      	mov	r1, r2
    c150:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    c154:	4284      	cmp	r4, r0
    c156:	d303      	bcc.n	c160 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    c158:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    c15c:	7882      	ldrb	r2, [r0, #2]
    c15e:	e003      	b.n	c168 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    c160:	1c49      	adds	r1, r1, #1
    c162:	b2c9      	uxtb	r1, r1
    c164:	290c      	cmp	r1, #12
    c166:	d3f3      	bcc.n	c150 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    c168:	4802      	ldr	r0, [pc, #8]	; (c174 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    c16a:	7002      	strb	r2, [r0, #0]
    c16c:	bd10      	pop	{r4, pc}
    c16e:	0000      	.short	0x0000
    c170:	000109ec 	.word	0x000109ec
    c174:	2000029d 	.word	0x2000029d

0000c178 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    c178:	4801      	ldr	r0, [pc, #4]	; (c180 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    c17a:	7800      	ldrb	r0, [r0, #0]
    c17c:	4770      	bx	lr
    c17e:	0000      	.short	0x0000
    c180:	2000029d 	.word	0x2000029d

0000c184 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    c184:	b570      	push	{r4, r5, r6, lr}
    c186:	4605      	mov	r5, r0
    c188:	4616      	mov	r6, r2
    c18a:	460c      	mov	r4, r1
    c18c:	2002      	movs	r0, #2
    c18e:	f000 f9f9 	bl	c584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c192:	4906      	ldr	r1, [pc, #24]	; (c1ac <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    c194:	2001      	movs	r0, #1
    c196:	1ef6      	subs	r6, r6, #3
    c198:	7008      	strb	r0, [r1, #0]
    c19a:	4805      	ldr	r0, [pc, #20]	; (c1b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    c19c:	6006      	str	r6, [r0, #0]
    c19e:	4804      	ldr	r0, [pc, #16]	; (c1b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    c1a0:	3808      	subs	r0, #8
    c1a2:	6005      	str	r5, [r0, #0]
    c1a4:	1f00      	subs	r0, r0, #4
    c1a6:	6004      	str	r4, [r0, #0]
    c1a8:	bd70      	pop	{r4, r5, r6, pc}
    c1aa:	0000      	.short	0x0000
    c1ac:	2000029e 	.word	0x2000029e
    c1b0:	4000f510 	.word	0x4000f510

0000c1b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    c1b4:	b510      	push	{r4, lr}
    c1b6:	4c0c      	ldr	r4, [pc, #48]	; (c1e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    c1b8:	7820      	ldrb	r0, [r4, #0]
    c1ba:	b180      	cbz	r0, c1de <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    c1bc:	490b      	ldr	r1, [pc, #44]	; (c1ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    c1be:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c1c2:	6008      	str	r0, [r1, #0]
    c1c4:	f000 f86a 	bl	c29c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    c1c8:	2100      	movs	r1, #0
    c1ca:	b120      	cbz	r0, c1d6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    c1cc:	2001      	movs	r0, #1
    c1ce:	7060      	strb	r0, [r4, #1]
    c1d0:	4807      	ldr	r0, [pc, #28]	; (c1f0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    c1d2:	6800      	ldr	r0, [r0, #0]
    c1d4:	e001      	b.n	c1da <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    c1d6:	7061      	strb	r1, [r4, #1]
    c1d8:	2010      	movs	r0, #16
    c1da:	70a0      	strb	r0, [r4, #2]
    c1dc:	7021      	strb	r1, [r4, #0]
    c1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c1e2:	2000      	movs	r0, #0
    c1e4:	f000 b9ce 	b.w	c584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c1e8:	2000029e 	.word	0x2000029e
    c1ec:	4001f508 	.word	0x4001f508
    c1f0:	4000f400 	.word	0x4000f400

0000c1f4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    c1f4:	b510      	push	{r4, lr}
    c1f6:	2002      	movs	r0, #2
    c1f8:	f000 f9c4 	bl	c584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c1fc:	4904      	ldr	r1, [pc, #16]	; (c210 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    c1fe:	2001      	movs	r0, #1
    c200:	7008      	strb	r0, [r1, #0]
    c202:	f000 f859 	bl	c2b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    c206:	4903      	ldr	r1, [pc, #12]	; (c214 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    c208:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c20c:	6008      	str	r0, [r1, #0]
    c20e:	bd10      	pop	{r4, pc}
    c210:	2000029e 	.word	0x2000029e
    c214:	4001f504 	.word	0x4001f504

0000c218 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    c218:	4803      	ldr	r0, [pc, #12]	; (c228 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    c21a:	2100      	movs	r1, #0
    c21c:	7001      	strb	r1, [r0, #0]
    c21e:	7041      	strb	r1, [r0, #1]
    c220:	2110      	movs	r1, #16
    c222:	7081      	strb	r1, [r0, #2]
    c224:	4770      	bx	lr
    c226:	0000      	.short	0x0000
    c228:	2000029e 	.word	0x2000029e

0000c22c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    c22c:	4807      	ldr	r0, [pc, #28]	; (c24c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    c22e:	b510      	push	{r4, lr}
    c230:	7801      	ldrb	r1, [r0, #0]
    c232:	b141      	cbz	r1, c246 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    c234:	f000 f832 	bl	c29c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    c238:	b118      	cbz	r0, c242 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    c23a:	4805      	ldr	r0, [pc, #20]	; (c250 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    c23c:	6800      	ldr	r0, [r0, #0]
    c23e:	b2c0      	uxtb	r0, r0
    c240:	bd10      	pop	{r4, pc}
    c242:	2010      	movs	r0, #16
    c244:	bd10      	pop	{r4, pc}
    c246:	7880      	ldrb	r0, [r0, #2]
    c248:	bd10      	pop	{r4, pc}
    c24a:	0000      	.short	0x0000
    c24c:	2000029e 	.word	0x2000029e
    c250:	4000f400 	.word	0x4000f400

0000c254 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    c254:	4808      	ldr	r0, [pc, #32]	; (c278 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    c256:	b510      	push	{r4, lr}
    c258:	7801      	ldrb	r1, [r0, #0]
    c25a:	b159      	cbz	r1, c274 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    c25c:	4807      	ldr	r0, [pc, #28]	; (c27c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    c25e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c262:	b128      	cbz	r0, c270 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    c264:	f000 f80c 	bl	c280 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    c268:	2800      	cmp	r0, #0
    c26a:	d000      	beq.n	c26e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    c26c:	2001      	movs	r0, #1
    c26e:	bd10      	pop	{r4, pc}
    c270:	2002      	movs	r0, #2
    c272:	bd10      	pop	{r4, pc}
    c274:	7840      	ldrb	r0, [r0, #1]
    c276:	bd10      	pop	{r4, pc}
    c278:	2000029e 	.word	0x2000029e
    c27c:	4000f000 	.word	0x4000f000
    c280:	4805      	ldr	r0, [pc, #20]	; (c298 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    c282:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    c286:	b111      	cbz	r1, c28e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    c288:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    c28c:	b108      	cbz	r0, c292 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    c28e:	2000      	movs	r0, #0
    c290:	4770      	bx	lr
    c292:	2001      	movs	r0, #1
    c294:	4770      	bx	lr
    c296:	0000      	.short	0x0000
    c298:	4000f000 	.word	0x4000f000
    c29c:	4805      	ldr	r0, [pc, #20]	; (c2b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    c29e:	b510      	push	{r4, lr}
    c2a0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    c2a4:	b120      	cbz	r0, c2b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    c2a6:	f7ff ffeb 	bl	c280 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    c2aa:	b108      	cbz	r0, c2b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    c2ac:	2001      	movs	r0, #1
    c2ae:	bd10      	pop	{r4, pc}
    c2b0:	2000      	movs	r0, #0
    c2b2:	bd10      	pop	{r4, pc}
    c2b4:	4000f000 	.word	0x4000f000
    c2b8:	4804      	ldr	r0, [pc, #16]	; (c2cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    c2ba:	2100      	movs	r1, #0
    c2bc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    c2c0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    c2c4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    c2c8:	4770      	bx	lr
    c2ca:	0000      	.short	0x0000
    c2cc:	4000f000 	.word	0x4000f000

0000c2d0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    c2d0:	4a08      	ldr	r2, [pc, #32]	; (c2f4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    c2d2:	b510      	push	{r4, lr}
    c2d4:	e9c2 0102 	strd	r0, r1, [r2, #8]
    c2d8:	4907      	ldr	r1, [pc, #28]	; (c2f8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    c2da:	4610      	mov	r0, r2
    c2dc:	f7f8 fc8c 	bl	4bf8 <mpsl_fem_lna_configuration_set>
    c2e0:	2800      	cmp	r0, #0
    c2e2:	d005      	beq.n	c2f0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    c2e4:	1c40      	adds	r0, r0, #1
    c2e6:	d003      	beq.n	c2f0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    c2e8:	217d      	movs	r1, #125	; 0x7d
    c2ea:	2040      	movs	r0, #64	; 0x40
    c2ec:	f7f8 fde8 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c2f0:	bd10      	pop	{r4, pc}
    c2f2:	0000      	.short	0x0000
    c2f4:	2000024c 	.word	0x2000024c
    c2f8:	0000c328 	.word	0x0000c328

0000c2fc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    c2fc:	4a08      	ldr	r2, [pc, #32]	; (c320 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    c2fe:	b510      	push	{r4, lr}
    c300:	e9c2 0102 	strd	r0, r1, [r2, #8]
    c304:	4907      	ldr	r1, [pc, #28]	; (c324 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    c306:	4610      	mov	r0, r2
    c308:	f7f8 fc82 	bl	4c10 <mpsl_fem_pa_configuration_set>
    c30c:	2800      	cmp	r0, #0
    c30e:	d005      	beq.n	c31c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    c310:	1c40      	adds	r0, r0, #1
    c312:	d003      	beq.n	c31c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    c314:	2172      	movs	r1, #114	; 0x72
    c316:	2040      	movs	r0, #64	; 0x40
    c318:	f7f8 fdd2 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c31c:	bd10      	pop	{r4, pc}
    c31e:	0000      	.short	0x0000
    c320:	2000024c 	.word	0x2000024c
    c324:	0000c328 	.word	0x0000c328
    c328:	00000001 	.word	0x00000001
    c32c:	40001110 	.word	0x40001110
	...

0000c340 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    c340:	4a07      	ldr	r2, [pc, #28]	; (c360 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    c342:	b510      	push	{r4, lr}
    c344:	7853      	ldrb	r3, [r2, #1]
    c346:	b133      	cbz	r3, c356 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    c348:	4b06      	ldr	r3, [pc, #24]	; (c364 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    c34a:	6019      	str	r1, [r3, #0]
    c34c:	1d19      	adds	r1, r3, #4
    c34e:	6008      	str	r0, [r1, #0]
    c350:	2001      	movs	r0, #1
    c352:	7090      	strb	r0, [r2, #2]
    c354:	bd10      	pop	{r4, pc}
    c356:	21ba      	movs	r1, #186	; 0xba
    c358:	203c      	movs	r0, #60	; 0x3c
    c35a:	f7f8 fdb1 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c35e:	0000      	.short	0x0000
    c360:	200002a1 	.word	0x200002a1
    c364:	4000f50c 	.word	0x4000f50c

0000c368 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    c368:	4809      	ldr	r0, [pc, #36]	; (c390 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    c36a:	b510      	push	{r4, lr}
    c36c:	7801      	ldrb	r1, [r0, #0]
    c36e:	b151      	cbz	r1, c386 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    c370:	7880      	ldrb	r0, [r0, #2]
    c372:	b140      	cbz	r0, c386 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    c374:	4907      	ldr	r1, [pc, #28]	; (c394 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    c376:	2000      	movs	r0, #0
    c378:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    c37c:	4906      	ldr	r1, [pc, #24]	; (c398 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    c37e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    c382:	6008      	str	r0, [r1, #0]
    c384:	bd10      	pop	{r4, pc}
    c386:	21e1      	movs	r1, #225	; 0xe1
    c388:	203c      	movs	r0, #60	; 0x3c
    c38a:	f7f8 fd99 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c38e:	0000      	.short	0x0000
    c390:	200002a1 	.word	0x200002a1
    c394:	4000f000 	.word	0x4000f000
    c398:	4001f504 	.word	0x4001f504

0000c39c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    c39c:	b570      	push	{r4, r5, r6, lr}
    c39e:	4c0b      	ldr	r4, [pc, #44]	; (c3cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    c3a0:	2500      	movs	r5, #0
    c3a2:	7820      	ldrb	r0, [r4, #0]
    c3a4:	b158      	cbz	r0, c3be <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    c3a6:	f000 f8e5 	bl	c574 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    c3aa:	4809      	ldr	r0, [pc, #36]	; (c3d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    c3ac:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    c3b0:	b118      	cbz	r0, c3ba <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    c3b2:	4808      	ldr	r0, [pc, #32]	; (c3d4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    c3b4:	6800      	ldr	r0, [r0, #0]
    c3b6:	70e0      	strb	r0, [r4, #3]
    c3b8:	e000      	b.n	c3bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    c3ba:	70e5      	strb	r5, [r4, #3]
    c3bc:	7025      	strb	r5, [r4, #0]
    c3be:	2000      	movs	r0, #0
    c3c0:	f000 f8e0 	bl	c584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c3c4:	7065      	strb	r5, [r4, #1]
    c3c6:	70a5      	strb	r5, [r4, #2]
    c3c8:	bd70      	pop	{r4, r5, r6, pc}
    c3ca:	0000      	.short	0x0000
    c3cc:	200002a1 	.word	0x200002a1
    c3d0:	4000f000 	.word	0x4000f000
    c3d4:	4000f400 	.word	0x4000f400

0000c3d8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    c3d8:	480d      	ldr	r0, [pc, #52]	; (c410 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    c3da:	b510      	push	{r4, lr}
    c3dc:	7801      	ldrb	r1, [r0, #0]
    c3de:	b191      	cbz	r1, c406 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    c3e0:	7880      	ldrb	r0, [r0, #2]
    c3e2:	b180      	cbz	r0, c406 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    c3e4:	490b      	ldr	r1, [pc, #44]	; (c414 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    c3e6:	2000      	movs	r0, #0
    c3e8:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    c3ec:	4a0a      	ldr	r2, [pc, #40]	; (c418 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    c3ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    c3f2:	6010      	str	r0, [r2, #0]
    c3f4:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    c3f8:	2a01      	cmp	r2, #1
    c3fa:	d103      	bne.n	c404 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    c3fc:	604a      	str	r2, [r1, #4]
    c3fe:	4906      	ldr	r1, [pc, #24]	; (c418 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    c400:	1d09      	adds	r1, r1, #4
    c402:	6008      	str	r0, [r1, #0]
    c404:	bd10      	pop	{r4, pc}
    c406:	21d1      	movs	r1, #209	; 0xd1
    c408:	203c      	movs	r0, #60	; 0x3c
    c40a:	f7f8 fd59 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c40e:	0000      	.short	0x0000
    c410:	200002a1 	.word	0x200002a1
    c414:	4000f000 	.word	0x4000f000
    c418:	4001f504 	.word	0x4001f504

0000c41c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    c41c:	4803      	ldr	r0, [pc, #12]	; (c42c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    c41e:	2100      	movs	r1, #0
    c420:	7001      	strb	r1, [r0, #0]
    c422:	7041      	strb	r1, [r0, #1]
    c424:	7081      	strb	r1, [r0, #2]
    c426:	70c1      	strb	r1, [r0, #3]
    c428:	4770      	bx	lr
    c42a:	0000      	.short	0x0000
    c42c:	200002a1 	.word	0x200002a1

0000c430 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    c430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c434:	4605      	mov	r5, r0
    c436:	461c      	mov	r4, r3
    c438:	4690      	mov	r8, r2
    c43a:	460f      	mov	r7, r1
    c43c:	2001      	movs	r0, #1
    c43e:	f000 f8a1 	bl	c584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    c442:	4e12      	ldr	r6, [pc, #72]	; (c48c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    c444:	4812      	ldr	r0, [pc, #72]	; (c490 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c446:	7134      	strb	r4, [r6, #4]
    c448:	6007      	str	r7, [r0, #0]
    c44a:	4911      	ldr	r1, [pc, #68]	; (c490 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c44c:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    c450:	1f09      	subs	r1, r1, #4
    c452:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    c456:	6008      	str	r0, [r1, #0]
    c458:	f001 f8f0 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c45c:	b938      	cbnz	r0, c46e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    c45e:	480c      	ldr	r0, [pc, #48]	; (c490 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    c460:	3010      	adds	r0, #16
    c462:	6801      	ldr	r1, [r0, #0]
    c464:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    c468:	ea41 0108 	orr.w	r1, r1, r8
    c46c:	6001      	str	r1, [r0, #0]
    c46e:	f000 f881 	bl	c574 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    c472:	b93d      	cbnz	r5, c484 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    c474:	4808      	ldr	r0, [pc, #32]	; (c498 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    c476:	4a07      	ldr	r2, [pc, #28]	; (c494 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    c478:	4906      	ldr	r1, [pc, #24]	; (c494 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    c47a:	3afc      	subs	r2, #252	; 0xfc
    c47c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    c480:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    c484:	2001      	movs	r0, #1
    c486:	7070      	strb	r0, [r6, #1]
    c488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c48c:	200002a1 	.word	0x200002a1
    c490:	4000f508 	.word	0x4000f508
    c494:	4000f100 	.word	0x4000f100
    c498:	4001f088 	.word	0x4001f088

0000c49c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    c49c:	4808      	ldr	r0, [pc, #32]	; (c4c0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    c49e:	b510      	push	{r4, lr}
    c4a0:	7841      	ldrb	r1, [r0, #1]
    c4a2:	b149      	cbz	r1, c4b8 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    c4a4:	2101      	movs	r1, #1
    c4a6:	7001      	strb	r1, [r0, #0]
    c4a8:	4806      	ldr	r0, [pc, #24]	; (c4c4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    c4aa:	2200      	movs	r2, #0
    c4ac:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    c4b0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    c4b4:	6001      	str	r1, [r0, #0]
    c4b6:	bd10      	pop	{r4, pc}
    c4b8:	21c5      	movs	r1, #197	; 0xc5
    c4ba:	203c      	movs	r0, #60	; 0x3c
    c4bc:	f7f8 fd00 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c4c0:	200002a1 	.word	0x200002a1
    c4c4:	4000f000 	.word	0x4000f000

0000c4c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    c4c8:	4806      	ldr	r0, [pc, #24]	; (c4e4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    c4ca:	7801      	ldrb	r1, [r0, #0]
    c4cc:	b141      	cbz	r1, c4e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    c4ce:	4806      	ldr	r0, [pc, #24]	; (c4e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    c4d0:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    c4d4:	2800      	cmp	r0, #0
    c4d6:	d002      	beq.n	c4de <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    c4d8:	4804      	ldr	r0, [pc, #16]	; (c4ec <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    c4da:	6800      	ldr	r0, [r0, #0]
    c4dc:	b2c0      	uxtb	r0, r0
    c4de:	4770      	bx	lr
    c4e0:	78c0      	ldrb	r0, [r0, #3]
    c4e2:	4770      	bx	lr
    c4e4:	200002a1 	.word	0x200002a1
    c4e8:	4000f000 	.word	0x4000f000
    c4ec:	4000f400 	.word	0x4000f400

0000c4f0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    c4f0:	4901      	ldr	r1, [pc, #4]	; (c4f8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    c4f2:	2001      	movs	r0, #1
    c4f4:	6088      	str	r0, [r1, #8]
    c4f6:	4770      	bx	lr
    c4f8:	4000f000 	.word	0x4000f000

0000c4fc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    c4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c500:	2800      	cmp	r0, #0
    c502:	d02e      	beq.n	c562 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    c504:	4818      	ldr	r0, [pc, #96]	; (c568 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    c506:	7800      	ldrb	r0, [r0, #0]
    c508:	b1b0      	cbz	r0, c538 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    c50a:	4d18      	ldr	r5, [pc, #96]	; (c56c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    c50c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c510:	2800      	cmp	r0, #0
    c512:	d126      	bne.n	c562 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    c514:	2702      	movs	r7, #2
    c516:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    c51a:	4c15      	ldr	r4, [pc, #84]	; (c570 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    c51c:	6820      	ldr	r0, [r4, #0]
    c51e:	43c0      	mvns	r0, r0
    c520:	f340 1600 	sbfx	r6, r0, #4, #1
    c524:	6820      	ldr	r0, [r4, #0]
    c526:	f040 0010 	orr.w	r0, r0, #16
    c52a:	6020      	str	r0, [r4, #0]
    c52c:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    c530:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    c534:	1c76      	adds	r6, r6, #1
    c536:	e009      	b.n	c54c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    c538:	f240 1153 	movw	r1, #339	; 0x153
    c53c:	203c      	movs	r0, #60	; 0x3c
    c53e:	f7f8 fcbf 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c542:	bf00      	nop
    c544:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    c548:	f7f8 fb00 	bl	4b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    c54c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    c550:	2800      	cmp	r0, #0
    c552:	d0f7      	beq.n	c544 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    c554:	b91e      	cbnz	r6, c55e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    c556:	6820      	ldr	r0, [r4, #0]
    c558:	f020 0010 	bic.w	r0, r0, #16
    c55c:	6020      	str	r0, [r4, #0]
    c55e:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    c562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c566:	0000      	.short	0x0000
    c568:	200002a1 	.word	0x200002a1
    c56c:	4000f000 	.word	0x4000f000
    c570:	e000ed10 	.word	0xe000ed10
    c574:	4902      	ldr	r1, [pc, #8]	; (c580 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    c576:	4801      	ldr	r0, [pc, #4]	; (c57c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    c578:	6008      	str	r0, [r1, #0]
    c57a:	4770      	bx	lr
    c57c:	02020000 	.word	0x02020000
    c580:	4001f508 	.word	0x4001f508

0000c584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    c584:	b510      	push	{r4, lr}
    c586:	4604      	mov	r4, r0
    c588:	f000 f822 	bl	c5d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    c58c:	2c00      	cmp	r4, #0
    c58e:	d017      	beq.n	c5c0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    c590:	4a0c      	ldr	r2, [pc, #48]	; (c5c4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c592:	480c      	ldr	r0, [pc, #48]	; (c5c4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    c594:	490c      	ldr	r1, [pc, #48]	; (c5c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    c596:	3214      	adds	r2, #20
    c598:	4b0c      	ldr	r3, [pc, #48]	; (c5cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    c59a:	2c01      	cmp	r4, #1
    c59c:	d005      	beq.n	c5aa <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    c59e:	2c02      	cmp	r4, #2
    c5a0:	d008      	beq.n	c5b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    c5a2:	2183      	movs	r1, #131	; 0x83
    c5a4:	203d      	movs	r0, #61	; 0x3d
    c5a6:	f7f8 fc8b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c5aa:	2402      	movs	r4, #2
    c5ac:	6004      	str	r4, [r0, #0]
    c5ae:	6011      	str	r1, [r2, #0]
    c5b0:	0620      	lsls	r0, r4, #24
    c5b2:	e004      	b.n	c5be <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    c5b4:	2403      	movs	r4, #3
    c5b6:	6004      	str	r4, [r0, #0]
    c5b8:	6011      	str	r1, [r2, #0]
    c5ba:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    c5be:	6018      	str	r0, [r3, #0]
    c5c0:	bd10      	pop	{r4, pc}
    c5c2:	0000      	.short	0x0000
    c5c4:	4000f500 	.word	0x4000f500
    c5c8:	200016cf 	.word	0x200016cf
    c5cc:	4001f504 	.word	0x4001f504
    c5d0:	4804      	ldr	r0, [pc, #16]	; (c5e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    c5d2:	2100      	movs	r1, #0
    c5d4:	6001      	str	r1, [r0, #0]
    c5d6:	6001      	str	r1, [r0, #0]
    c5d8:	4903      	ldr	r1, [pc, #12]	; (c5e8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    c5da:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    c5de:	6008      	str	r0, [r1, #0]
    c5e0:	4770      	bx	lr
    c5e2:	0000      	.short	0x0000
    c5e4:	4000f500 	.word	0x4000f500
    c5e8:	4001f508 	.word	0x4001f508

0000c5ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    c5ec:	4805      	ldr	r0, [pc, #20]	; (c604 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    c5ee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c5f2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    c5f6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c5fa:	2100      	movs	r1, #0
    c5fc:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    c600:	4770      	bx	lr
    c602:	0000      	.short	0x0000
    c604:	40001000 	.word	0x40001000

0000c608 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    c608:	4904      	ldr	r1, [pc, #16]	; (c61c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    c60a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    c60e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    c612:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    c616:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    c61a:	4770      	bx	lr
    c61c:	40001000 	.word	0x40001000

0000c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    c620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c622:	4c23      	ldr	r4, [pc, #140]	; (c6b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    c624:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    c628:	f010 0f10 	tst.w	r0, #16
    c62c:	d001      	beq.n	c632 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    c62e:	2701      	movs	r7, #1
    c630:	e000      	b.n	c634 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    c632:	2700      	movs	r7, #0
    c634:	2010      	movs	r0, #16
    c636:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    c63a:	2002      	movs	r0, #2
    c63c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    c640:	481c      	ldr	r0, [pc, #112]	; (c6b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    c642:	2500      	movs	r5, #0
    c644:	491d      	ldr	r1, [pc, #116]	; (c6bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    c646:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    c64a:	481b      	ldr	r0, [pc, #108]	; (c6b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    c64c:	6008      	str	r0, [r1, #0]
    c64e:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    c652:	f44f 7688 	mov.w	r6, #272	; 0x110
    c656:	f010 0fff 	tst.w	r0, #255	; 0xff
    c65a:	d018      	beq.n	c68e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    c65c:	20ff      	movs	r0, #255	; 0xff
    c65e:	f88d 0000 	strb.w	r0, [sp]
    c662:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c666:	2001      	movs	r0, #1
    c668:	6120      	str	r0, [r4, #16]
    c66a:	e004      	b.n	c676 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    c66c:	f89d 0000 	ldrb.w	r0, [sp]
    c670:	1e40      	subs	r0, r0, #1
    c672:	f88d 0000 	strb.w	r0, [sp]
    c676:	f89d 0000 	ldrb.w	r0, [sp]
    c67a:	b128      	cbz	r0, c688 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    c67c:	4631      	mov	r1, r6
    c67e:	4620      	mov	r0, r4
    c680:	f004 fa83 	bl	10b8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c684:	2800      	cmp	r0, #0
    c686:	d0f1      	beq.n	c66c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    c688:	f89d 0000 	ldrb.w	r0, [sp]
    c68c:	b158      	cbz	r0, c6a6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    c68e:	f000 fc91 	bl	cfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    c692:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    c696:	f000 fe0d 	bl	d2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c69a:	2f00      	cmp	r7, #0
    c69c:	d002      	beq.n	c6a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    c69e:	2010      	movs	r0, #16
    c6a0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    c6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c6a6:	f240 718f 	movw	r1, #1935	; 0x78f
    c6aa:	203e      	movs	r0, #62	; 0x3e
    c6ac:	f7f8 fc08 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c6b0:	40001000 	.word	0x40001000
    c6b4:	2000138c 	.word	0x2000138c
    c6b8:	0c0e0000 	.word	0x0c0e0000
    c6bc:	4001f508 	.word	0x4001f508

0000c6c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    c6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6c4:	4d20      	ldr	r5, [pc, #128]	; (c748 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    c6c6:	4607      	mov	r7, r0
    c6c8:	4688      	mov	r8, r1
    c6ca:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    c6ce:	07c1      	lsls	r1, r0, #31
    c6d0:	d018      	beq.n	c704 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    c6d2:	4a1e      	ldr	r2, [pc, #120]	; (c74c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    c6d4:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    c6d8:	6011      	str	r1, [r2, #0]
    c6da:	4c1d      	ldr	r4, [pc, #116]	; (c750 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    c6dc:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    c6e0:	f041 0101 	orr.w	r1, r1, #1
    c6e4:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    c6e8:	f040 0002 	orr.w	r0, r0, #2
    c6ec:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    c6f0:	4640      	mov	r0, r8
    c6f2:	f000 fe43 	bl	d37c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c6f6:	f000 fbfb 	bl	cef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c6fa:	2601      	movs	r6, #1
    c6fc:	b13f      	cbz	r7, c70e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    c6fe:	2f01      	cmp	r7, #1
    c700:	d00e      	beq.n	c720 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    c702:	e016      	b.n	c732 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    c704:	f240 611a 	movw	r1, #1562	; 0x61a
    c708:	203e      	movs	r0, #62	; 0x3e
    c70a:	f7f8 fbd9 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c70e:	4640      	mov	r0, r8
    c710:	f000 fc1e 	bl	cf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c714:	4640      	mov	r0, r8
    c716:	f000 fbcf 	bl	ceb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c71a:	726e      	strb	r6, [r5, #9]
    c71c:	6026      	str	r6, [r4, #0]
    c71e:	e008      	b.n	c732 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    c720:	f000 fc3e 	bl	cfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c724:	f000 fd8c 	bl	d240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    c728:	2002      	movs	r0, #2
    c72a:	7268      	strb	r0, [r5, #9]
    c72c:	f000 fcb0 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    c730:	6066      	str	r6, [r4, #4]
    c732:	4808      	ldr	r0, [pc, #32]	; (c754 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    c734:	64c6      	str	r6, [r0, #76]	; 0x4c
    c736:	4807      	ldr	r0, [pc, #28]	; (c754 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    c738:	300c      	adds	r0, #12
    c73a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    c73e:	4638      	mov	r0, r7
    c740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    c744:	f004 ba09 	b.w	10b5a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c748:	2000138c 	.word	0x2000138c
    c74c:	4001f504 	.word	0x4001f504
    c750:	40001000 	.word	0x40001000
    c754:	40008000 	.word	0x40008000

0000c758 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    c758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c75c:	4d35      	ldr	r5, [pc, #212]	; (c834 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    c75e:	4606      	mov	r6, r0
    c760:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c764:	4689      	mov	r9, r1
    c766:	6028      	str	r0, [r5, #0]
    c768:	4c33      	ldr	r4, [pc, #204]	; (c838 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    c76a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    c76e:	f040 0002 	orr.w	r0, r0, #2
    c772:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    c776:	4608      	mov	r0, r1
    c778:	f000 fe00 	bl	d37c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    c77c:	f000 fbb8 	bl	cef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    c780:	f8df 80b8 	ldr.w	r8, [pc, #184]	; c83c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    c784:	2700      	movs	r7, #0
    c786:	b116      	cbz	r6, c78e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    c788:	2e01      	cmp	r6, #1
    c78a:	d027      	beq.n	c7dc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    c78c:	e03f      	b.n	c80e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    c78e:	4648      	mov	r0, r9
    c790:	f000 fbde 	bl	cf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    c794:	79e0      	ldrb	r0, [r4, #7]
    c796:	2801      	cmp	r0, #1
    c798:	d105      	bne.n	c7a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    c79a:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    c79e:	f041 0108 	orr.w	r1, r1, #8
    c7a2:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    c7a6:	4648      	mov	r0, r9
    c7a8:	f000 fb86 	bl	ceb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    c7ac:	2001      	movs	r0, #1
    c7ae:	7260      	strb	r0, [r4, #9]
    c7b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c7b2:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    c7b6:	62a0      	str	r0, [r4, #40]	; 0x28
    c7b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    c7bc:	6028      	str	r0, [r5, #0]
    c7be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    c7c2:	f1b9 0f02 	cmp.w	r9, #2
    c7c6:	d007      	beq.n	c7d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    c7c8:	f640 0034 	movw	r0, #2100	; 0x834
    c7cc:	f649 72ec 	movw	r2, #40940	; 0x9fec
    c7d0:	4410      	add	r0, r2
    c7d2:	fbb0 f7f1 	udiv	r7, r0, r1
    c7d6:	e01a      	b.n	c80e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    c7d8:	4608      	mov	r0, r1
    c7da:	e7f7      	b.n	c7cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    c7dc:	f000 fbe0 	bl	cfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    c7e0:	f000 fd2e 	bl	d240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    c7e4:	79e0      	ldrb	r0, [r4, #7]
    c7e6:	2801      	cmp	r0, #1
    c7e8:	d105      	bne.n	c7f6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    c7ea:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    c7ee:	f041 0104 	orr.w	r1, r1, #4
    c7f2:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    c7f6:	2002      	movs	r0, #2
    c7f8:	7260      	strb	r0, [r4, #9]
    c7fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    c7fc:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    c800:	62a0      	str	r0, [r4, #40]	; 0x28
    c802:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    c806:	6028      	str	r0, [r5, #0]
    c808:	2729      	movs	r7, #41	; 0x29
    c80a:	f000 fc41 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    c80e:	f000 fc2b 	bl	d068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    c812:	f000 fded 	bl	d3f0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    c816:	6800      	ldr	r0, [r0, #0]
    c818:	2801      	cmp	r0, #1
    c81a:	d006      	beq.n	c82a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    c81c:	2100      	movs	r1, #0
    c81e:	4630      	mov	r0, r6
    c820:	f004 f99b 	bl	10b5a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    c824:	4638      	mov	r0, r7
    c826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c82a:	f7ff fef9 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c82e:	2000      	movs	r0, #0
    c830:	e7f9      	b.n	c826 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    c832:	0000      	.short	0x0000
    c834:	4001f504 	.word	0x4001f504
    c838:	2000138c 	.word	0x2000138c
    c83c:	40001000 	.word	0x40001000

0000c840 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    c840:	b510      	push	{r4, lr}
    c842:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    c844:	4901      	ldr	r1, [pc, #4]	; (c84c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    c846:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    c84a:	bd10      	pop	{r4, pc}
    c84c:	2000137c 	.word	0x2000137c

0000c850 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    c850:	b570      	push	{r4, r5, r6, lr}
    c852:	4c11      	ldr	r4, [pc, #68]	; (c898 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    c854:	4606      	mov	r6, r0
    c856:	2002      	movs	r0, #2
    c858:	7320      	strb	r0, [r4, #12]
    c85a:	2596      	movs	r5, #150	; 0x96
    c85c:	f000 f85e 	bl	c91c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    c860:	4602      	mov	r2, r0
    c862:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    c866:	f894 1020 	ldrb.w	r1, [r4, #32]
    c86a:	2801      	cmp	r0, #1
    c86c:	d00f      	beq.n	c88e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    c86e:	4628      	mov	r0, r5
    c870:	f004 f995 	bl	10b9e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    c874:	6120      	str	r0, [r4, #16]
    c876:	4809      	ldr	r0, [pc, #36]	; (c89c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    c878:	2100      	movs	r1, #0
    c87a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    c87e:	6921      	ldr	r1, [r4, #16]
    c880:	69e0      	ldr	r0, [r4, #28]
    c882:	4408      	add	r0, r1
    c884:	4905      	ldr	r1, [pc, #20]	; (c89c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    c886:	1d09      	adds	r1, r1, #4
    c888:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c88c:	bd70      	pop	{r4, r5, r6, pc}
    c88e:	4633      	mov	r3, r6
    c890:	4628      	mov	r0, r5
    c892:	f004 f9a0 	bl	10bd6 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    c896:	e7ed      	b.n	c874 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    c898:	2000138c 	.word	0x2000138c
    c89c:	40008000 	.word	0x40008000

0000c8a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    c8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c8a4:	2238      	movs	r2, #56	; 0x38
    c8a6:	2100      	movs	r1, #0
    c8a8:	4813      	ldr	r0, [pc, #76]	; (c8f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    c8aa:	f000 ff93 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c8ae:	f000 fd01 	bl	d2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c8b2:	f000 fe98 	bl	d5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c8b6:	4d11      	ldr	r5, [pc, #68]	; (c8fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c8b8:	4e10      	ldr	r6, [pc, #64]	; (c8fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c8ba:	2400      	movs	r4, #0
    c8bc:	4f0f      	ldr	r7, [pc, #60]	; (c8fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    c8be:	3508      	adds	r5, #8
    c8c0:	3610      	adds	r6, #16
    c8c2:	b928      	cbnz	r0, c8d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c8c4:	f000 fea6 	bl	d614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    c8c8:	b910      	cbnz	r0, c8d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    c8ca:	f000 fead 	bl	d628 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    c8ce:	b108      	cbz	r0, c8d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    c8d0:	2224      	movs	r2, #36	; 0x24
    c8d2:	e006      	b.n	c8e2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c8d4:	f000 fee8 	bl	d6a8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    c8d8:	b910      	cbnz	r0, c8e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    c8da:	f000 fedb 	bl	d694 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    c8de:	b140      	cbz	r0, c8f2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    c8e0:	2240      	movs	r2, #64	; 0x40
    c8e2:	21ff      	movs	r1, #255	; 0xff
    c8e4:	4638      	mov	r0, r7
    c8e6:	f000 ff75 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    c8ea:	602c      	str	r4, [r5, #0]
    c8ec:	6034      	str	r4, [r6, #0]
    c8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c8f2:	2238      	movs	r2, #56	; 0x38
    c8f4:	e7f5      	b.n	c8e2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    c8f6:	0000      	.short	0x0000
    c8f8:	2000138c 	.word	0x2000138c
    c8fc:	40000e00 	.word	0x40000e00

0000c900 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    c900:	4805      	ldr	r0, [pc, #20]	; (c918 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    c902:	b510      	push	{r4, lr}
    c904:	69c0      	ldr	r0, [r0, #28]
    c906:	2800      	cmp	r0, #0
    c908:	d104      	bne.n	c914 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    c90a:	f240 11fb 	movw	r1, #507	; 0x1fb
    c90e:	203e      	movs	r0, #62	; 0x3e
    c910:	f7f8 fad6 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c914:	bd10      	pop	{r4, pc}
    c916:	0000      	.short	0x0000
    c918:	2000138c 	.word	0x2000138c

0000c91c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    c91c:	4814      	ldr	r0, [pc, #80]	; (c970 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    c91e:	b510      	push	{r4, lr}
    c920:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    c924:	7a40      	ldrb	r0, [r0, #9]
    c926:	b141      	cbz	r1, c93a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    c928:	2902      	cmp	r1, #2
    c92a:	d00b      	beq.n	c944 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    c92c:	2802      	cmp	r0, #2
    c92e:	d009      	beq.n	c944 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    c930:	2901      	cmp	r1, #1
    c932:	d00b      	beq.n	c94c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    c934:	2801      	cmp	r0, #1
    c936:	d009      	beq.n	c94c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    c938:	e016      	b.n	c968 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    c93a:	2800      	cmp	r0, #0
    c93c:	d1f6      	bne.n	c92c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    c93e:	f240 117d 	movw	r1, #381	; 0x17d
    c942:	e00e      	b.n	c962 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    c944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c948:	f000 bc2a 	b.w	d1a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    c94c:	4809      	ldr	r0, [pc, #36]	; (c974 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    c94e:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    c952:	f000 000f 	and.w	r0, r0, #15
    c956:	2803      	cmp	r0, #3
    c958:	d006      	beq.n	c968 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    c95a:	2804      	cmp	r0, #4
    c95c:	d006      	beq.n	c96c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    c95e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    c962:	203e      	movs	r0, #62	; 0x3e
    c964:	f7f8 faac 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c968:	2001      	movs	r0, #1
    c96a:	bd10      	pop	{r4, pc}
    c96c:	2002      	movs	r0, #2
    c96e:	bd10      	pop	{r4, pc}
    c970:	2000138c 	.word	0x2000138c
    c974:	40001000 	.word	0x40001000

0000c978 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    c978:	b510      	push	{r4, lr}
    c97a:	f000 fc7d 	bl	d278 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    c97e:	f7ff fe4f 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c982:	f004 f880 	bl	10a86 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    c986:	480f      	ldr	r0, [pc, #60]	; (c9c4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    c988:	4a0f      	ldr	r2, [pc, #60]	; (c9c8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    c98a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c98c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c990:	6011      	str	r1, [r2, #0]
    c992:	2400      	movs	r4, #0
    c994:	6284      	str	r4, [r0, #40]	; 0x28
    c996:	7304      	strb	r4, [r0, #12]
    c998:	61c4      	str	r4, [r0, #28]
    c99a:	6184      	str	r4, [r0, #24]
    c99c:	f000 fc6c 	bl	d278 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    c9a0:	480a      	ldr	r0, [pc, #40]	; (c9cc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    c9a2:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    c9a6:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    c9aa:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    c9ae:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    c9b2:	2001      	movs	r0, #1
    c9b4:	f004 f8a0 	bl	10af8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c9bc:	2001      	movs	r0, #1
    c9be:	f004 b88e 	b.w	10ade <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    c9c2:	0000      	.short	0x0000
    c9c4:	2000138c 	.word	0x2000138c
    c9c8:	4001f508 	.word	0x4001f508
    c9cc:	40008000 	.word	0x40008000

0000c9d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    c9d0:	b570      	push	{r4, r5, r6, lr}
    c9d2:	2001      	movs	r0, #1
    c9d4:	f004 f890 	bl	10af8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    c9d8:	4c37      	ldr	r4, [pc, #220]	; (cab8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    c9da:	2000      	movs	r0, #0
    c9dc:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c9e0:	2001      	movs	r0, #1
    c9e2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    c9e6:	f000 fe35 	bl	d654 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c9ea:	4d34      	ldr	r5, [pc, #208]	; (cabc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    c9ec:	b118      	cbz	r0, c9f6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    c9ee:	6828      	ldr	r0, [r5, #0]
    c9f0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    c9f4:	6028      	str	r0, [r5, #0]
    c9f6:	f000 fe21 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c9fa:	b128      	cbz	r0, ca08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    c9fc:	6828      	ldr	r0, [r5, #0]
    c9fe:	4930      	ldr	r1, [pc, #192]	; (cac0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ca00:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ca04:	4308      	orrs	r0, r1
    ca06:	6028      	str	r0, [r5, #0]
    ca08:	f000 fe34 	bl	d674 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ca0c:	b138      	cbz	r0, ca1e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    ca0e:	482b      	ldr	r0, [pc, #172]	; (cabc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ca10:	1d00      	adds	r0, r0, #4
    ca12:	6801      	ldr	r1, [r0, #0]
    ca14:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ca18:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ca1c:	6001      	str	r1, [r0, #0]
    ca1e:	4927      	ldr	r1, [pc, #156]	; (cabc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ca20:	4828      	ldr	r0, [pc, #160]	; (cac4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ca22:	313c      	adds	r1, #60	; 0x3c
    ca24:	6008      	str	r0, [r1, #0]
    ca26:	f7f8 f8ff 	bl	4c28 <mpsl_fem_device_config_254_apply_get>
    ca2a:	b140      	cbz	r0, ca3e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ca2c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ca30:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ca34:	1c41      	adds	r1, r0, #1
    ca36:	d002      	beq.n	ca3e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ca38:	4920      	ldr	r1, [pc, #128]	; (cabc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ca3a:	3110      	adds	r1, #16
    ca3c:	6008      	str	r0, [r1, #0]
    ca3e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ca42:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ca44:	1c41      	adds	r1, r0, #1
    ca46:	d004      	beq.n	ca52 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    ca48:	491f      	ldr	r1, [pc, #124]	; (cac8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ca4a:	680a      	ldr	r2, [r1, #0]
    ca4c:	f360 4217 	bfi	r2, r0, #16, #8
    ca50:	600a      	str	r2, [r1, #0]
    ca52:	f240 1103 	movw	r1, #259	; 0x103
    ca56:	f240 605b 	movw	r0, #1627	; 0x65b
    ca5a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    ca5e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    ca62:	2001      	movs	r0, #1
    ca64:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    ca68:	f000 fc88 	bl	d37c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ca6c:	f240 1001 	movw	r0, #257	; 0x101
    ca70:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    ca74:	2002      	movs	r0, #2
    ca76:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ca7a:	4915      	ldr	r1, [pc, #84]	; (cad0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ca7c:	4813      	ldr	r0, [pc, #76]	; (cacc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ca7e:	6008      	str	r0, [r1, #0]
    ca80:	4914      	ldr	r1, [pc, #80]	; (cad4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ca82:	2000      	movs	r0, #0
    ca84:	4d14      	ldr	r5, [pc, #80]	; (cad8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ca86:	8608      	strh	r0, [r1, #48]	; 0x30
    ca88:	3110      	adds	r1, #16
    ca8a:	61c8      	str	r0, [r1, #28]
    ca8c:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    ca90:	7028      	strb	r0, [r5, #0]
    ca92:	2001      	movs	r0, #1
    ca94:	f004 f823 	bl	10ade <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ca98:	2010      	movs	r0, #16
    ca9a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    ca9e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    caa2:	2002      	movs	r0, #2
    caa4:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    caa8:	6868      	ldr	r0, [r5, #4]
    caaa:	2800      	cmp	r0, #0
    caac:	d002      	beq.n	cab4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    caae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    cab2:	4700      	bx	r0
    cab4:	bd70      	pop	{r4, r5, r6, pc}
    cab6:	0000      	.short	0x0000
    cab8:	40001000 	.word	0x40001000
    cabc:	4000173c 	.word	0x4000173c
    cac0:	80000096 	.word	0x80000096
    cac4:	8900002c 	.word	0x8900002c
    cac8:	4000158c 	.word	0x4000158c
    cacc:	0c0e0000 	.word	0x0c0e0000
    cad0:	4001f508 	.word	0x4001f508
    cad4:	2000137c 	.word	0x2000137c
    cad8:	20000264 	.word	0x20000264

0000cadc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    cadc:	4901      	ldr	r1, [pc, #4]	; (cae4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    cade:	7508      	strb	r0, [r1, #20]
    cae0:	4770      	bx	lr
    cae2:	0000      	.short	0x0000
    cae4:	2000138c 	.word	0x2000138c

0000cae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    cae8:	4905      	ldr	r1, [pc, #20]	; (cb00 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    caea:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    caee:	4805      	ldr	r0, [pc, #20]	; (cb04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    caf0:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    caf4:	f041 0101 	orr.w	r1, r1, #1
    caf8:	7001      	strb	r1, [r0, #0]
    cafa:	f000 ba7b 	b.w	cff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    cafe:	0000      	.short	0x0000
    cb00:	40001000 	.word	0x40001000
    cb04:	2000138c 	.word	0x2000138c

0000cb08 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    cb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cb0c:	4e36      	ldr	r6, [pc, #216]	; (cbe8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    cb0e:	4607      	mov	r7, r0
    cb10:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    cb14:	4689      	mov	r9, r1
    cb16:	4614      	mov	r4, r2
    cb18:	6030      	str	r0, [r6, #0]
    cb1a:	4610      	mov	r0, r2
    cb1c:	f000 fc2e 	bl	d37c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    cb20:	f000 f9e6 	bl	cef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    cb24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; cbec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    cb28:	4d31      	ldr	r5, [pc, #196]	; (cbf0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    cb2a:	f04f 0801 	mov.w	r8, #1
    cb2e:	b127      	cbz	r7, cb3a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    cb30:	2f01      	cmp	r7, #1
    cb32:	d01d      	beq.n	cb70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    cb34:	f240 710f 	movw	r1, #1807	; 0x70f
    cb38:	e04c      	b.n	cbd4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    cb3a:	4620      	mov	r0, r4
    cb3c:	f000 fa08 	bl	cf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    cb40:	4620      	mov	r0, r4
    cb42:	f000 f9b9 	bl	ceb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    cb46:	2c02      	cmp	r4, #2
    cb48:	d00f      	beq.n	cb6a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    cb4a:	f640 0034 	movw	r0, #2100	; 0x834
    cb4e:	bf00      	nop
    cb50:	f649 51f8 	movw	r1, #40440	; 0x9df8
    cb54:	4401      	add	r1, r0
    cb56:	4648      	mov	r0, r9
    cb58:	f000 fbb4 	bl	d2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    cb5c:	4604      	mov	r4, r0
    cb5e:	4650      	mov	r0, sl
    cb60:	f000 fb9c 	bl	d29c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    cb64:	f885 8009 	strb.w	r8, [r5, #9]
    cb68:	e014      	b.n	cb94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    cb6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    cb6e:	e7ef      	b.n	cb50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    cb70:	f000 fa16 	bl	cfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    cb74:	f000 fb64 	bl	d240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    cb78:	f000 fa8a 	bl	d090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    cb7c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    cb80:	4648      	mov	r0, r9
    cb82:	f000 fb9f 	bl	d2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    cb86:	4604      	mov	r4, r0
    cb88:	4818      	ldr	r0, [pc, #96]	; (cbec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    cb8a:	1d00      	adds	r0, r0, #4
    cb8c:	f000 fb86 	bl	d29c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    cb90:	2002      	movs	r0, #2
    cb92:	7268      	strb	r0, [r5, #9]
    cb94:	f8df 905c 	ldr.w	r9, [pc, #92]	; cbf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    cb98:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    cb9c:	4917      	ldr	r1, [pc, #92]	; (cbfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    cb9e:	4816      	ldr	r0, [pc, #88]	; (cbf8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    cba0:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    cba4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    cba6:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    cbaa:	62a8      	str	r0, [r5, #40]	; 0x28
    cbac:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    cbb0:	6030      	str	r0, [r6, #0]
    cbb2:	2010      	movs	r0, #16
    cbb4:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    cbb8:	03c0      	lsls	r0, r0, #15
    cbba:	6030      	str	r0, [r6, #0]
    cbbc:	f000 fa54 	bl	d068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    cbc0:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    cbc4:	480b      	ldr	r0, [pc, #44]	; (cbf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    cbc6:	300c      	adds	r0, #12
    cbc8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    cbcc:	42a0      	cmp	r0, r4
    cbce:	d304      	bcc.n	cbda <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    cbd0:	f240 7136 	movw	r1, #1846	; 0x736
    cbd4:	203e      	movs	r0, #62	; 0x3e
    cbd6:	f7f8 f973 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cbda:	4621      	mov	r1, r4
    cbdc:	4638      	mov	r0, r7
    cbde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cbe2:	f003 bfba 	b.w	10b5a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    cbe6:	0000      	.short	0x0000
    cbe8:	4001f504 	.word	0x4001f504
    cbec:	40001000 	.word	0x40001000
    cbf0:	2000138c 	.word	0x2000138c
    cbf4:	40008000 	.word	0x40008000
    cbf8:	40008140 	.word	0x40008140
    cbfc:	4001f098 	.word	0x4001f098

0000cc00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    cc00:	4b0d      	ldr	r3, [pc, #52]	; (cc38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    cc02:	b510      	push	{r4, lr}
    cc04:	71d8      	strb	r0, [r3, #7]
    cc06:	729a      	strb	r2, [r3, #10]
    cc08:	b151      	cbz	r1, cc20 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    cc0a:	2002      	movs	r0, #2
    cc0c:	7218      	strb	r0, [r3, #8]
    cc0e:	2801      	cmp	r0, #1
    cc10:	d008      	beq.n	cc24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    cc12:	2802      	cmp	r0, #2
    cc14:	d00f      	beq.n	cc36 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    cc16:	f640 1112 	movw	r1, #2322	; 0x912
    cc1a:	203e      	movs	r0, #62	; 0x3e
    cc1c:	f7f8 f950 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cc20:	2001      	movs	r0, #1
    cc22:	e7f3      	b.n	cc0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    cc24:	7a58      	ldrb	r0, [r3, #9]
    cc26:	2802      	cmp	r0, #2
    cc28:	d105      	bne.n	cc36 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    cc2a:	f000 f9b9 	bl	cfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    cc2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cc32:	f000 bb05 	b.w	d240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    cc36:	bd10      	pop	{r4, pc}
    cc38:	2000138c 	.word	0x2000138c

0000cc3c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    cc3c:	4902      	ldr	r1, [pc, #8]	; (cc48 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    cc3e:	2000      	movs	r0, #0
    cc40:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    cc44:	4770      	bx	lr
    cc46:	0000      	.short	0x0000
    cc48:	40008000 	.word	0x40008000

0000cc4c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    cc4c:	b538      	push	{r3, r4, r5, lr}
    cc4e:	4c0b      	ldr	r4, [pc, #44]	; (cc7c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    cc50:	4605      	mov	r5, r0
    cc52:	f44f 718e 	mov.w	r1, #284	; 0x11c
    cc56:	4620      	mov	r0, r4
    cc58:	f003 ff97 	bl	10b8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    cc5c:	2800      	cmp	r0, #0
    cc5e:	d00c      	beq.n	cc7a <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    cc60:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    cc64:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    cc68:	4240      	negs	r0, r0
    cc6a:	7028      	strb	r0, [r5, #0]
    cc6c:	2000      	movs	r0, #0
    cc6e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    cc72:	4803      	ldr	r0, [pc, #12]	; (cc80 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    cc74:	6800      	ldr	r0, [r0, #0]
    cc76:	9000      	str	r0, [sp, #0]
    cc78:	2001      	movs	r0, #1
    cc7a:	bd38      	pop	{r3, r4, r5, pc}
    cc7c:	40001000 	.word	0x40001000
    cc80:	4000111c 	.word	0x4000111c

0000cc84 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    cc84:	4903      	ldr	r1, [pc, #12]	; (cc94 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    cc86:	0e02      	lsrs	r2, r0, #24
    cc88:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    cc8c:	0200      	lsls	r0, r0, #8
    cc8e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    cc92:	4770      	bx	lr
    cc94:	40001000 	.word	0x40001000

0000cc98 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    cc98:	6800      	ldr	r0, [r0, #0]
    cc9a:	4903      	ldr	r1, [pc, #12]	; (cca8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    cc9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    cca0:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    cca4:	4770      	bx	lr
    cca6:	0000      	.short	0x0000
    cca8:	40001000 	.word	0x40001000

0000ccac <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    ccac:	b510      	push	{r4, lr}
    ccae:	f000 fb41 	bl	d334 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    ccb2:	4807      	ldr	r0, [pc, #28]	; (ccd0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    ccb4:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    ccb8:	b2c0      	uxtb	r0, r0
    ccba:	2803      	cmp	r0, #3
    ccbc:	d001      	beq.n	ccc2 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    ccbe:	280b      	cmp	r0, #11
    ccc0:	d104      	bne.n	cccc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    ccc2:	f44f 7121 	mov.w	r1, #644	; 0x284
    ccc6:	203e      	movs	r0, #62	; 0x3e
    ccc8:	f7f8 f8fa 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cccc:	bd10      	pop	{r4, pc}
    ccce:	0000      	.short	0x0000
    ccd0:	40001000 	.word	0x40001000

0000ccd4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    ccd4:	4901      	ldr	r1, [pc, #4]	; (ccdc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    ccd6:	7548      	strb	r0, [r1, #21]
    ccd8:	4770      	bx	lr
    ccda:	0000      	.short	0x0000
    ccdc:	2000138c 	.word	0x2000138c

0000cce0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    cce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cce4:	4853      	ldr	r0, [pc, #332]	; (ce34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    cce6:	f04f 0a01 	mov.w	sl, #1
    ccea:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    ccee:	4851      	ldr	r0, [pc, #324]	; (ce34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    ccf0:	300c      	adds	r0, #12
    ccf2:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    ccf6:	4850      	ldr	r0, [pc, #320]	; (ce38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    ccf8:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    ccfc:	4c4f      	ldr	r4, [pc, #316]	; (ce3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    ccfe:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    cd02:	f000 f957 	bl	cfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    cd06:	494e      	ldr	r1, [pc, #312]	; (ce40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    cd08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    cd0a:	6008      	str	r0, [r1, #0]
    cd0c:	f8df 9134 	ldr.w	r9, [pc, #308]	; ce44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    cd10:	2600      	movs	r6, #0
    cd12:	62a6      	str	r6, [r4, #40]	; 0x28
    cd14:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    cd18:	f240 121d 	movw	r2, #285	; 0x11d
    cd1c:	4391      	bics	r1, r2
    cd1e:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    cd22:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    cd26:	f000 f9c5 	bl	d0b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    cd2a:	4605      	mov	r5, r0
    cd2c:	4841      	ldr	r0, [pc, #260]	; (ce34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    cd2e:	3008      	adds	r0, #8
    cd30:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    cd34:	61e0      	str	r0, [r4, #28]
    cd36:	f7ff fdf1 	bl	c91c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    cd3a:	f884 0020 	strb.w	r0, [r4, #32]
    cd3e:	7a60      	ldrb	r0, [r4, #9]
    cd40:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    cd44:	61a6      	str	r6, [r4, #24]
    cd46:	4e40      	ldr	r6, [pc, #256]	; (ce48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    cd48:	07a8      	lsls	r0, r5, #30
    cd4a:	d502      	bpl.n	cd52 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    cd4c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    cd50:	61a0      	str	r0, [r4, #24]
    cd52:	0728      	lsls	r0, r5, #28
    cd54:	d502      	bpl.n	cd5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    cd56:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    cd5a:	61a0      	str	r0, [r4, #24]
    cd5c:	f04f 0800 	mov.w	r8, #0
    cd60:	4639      	mov	r1, r7
    cd62:	4628      	mov	r0, r5
    cd64:	f000 fa32 	bl	d1cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    cd68:	b918      	cbnz	r0, cd72 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    cd6a:	f8c9 a010 	str.w	sl, [r9, #16]
    cd6e:	f04f 0801 	mov.w	r8, #1
    cd72:	4f32      	ldr	r7, [pc, #200]	; (ce3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    cd74:	07e8      	lsls	r0, r5, #31
    cd76:	f1a7 0710 	sub.w	r7, r7, #16
    cd7a:	d002      	beq.n	cd82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    cd7c:	6838      	ldr	r0, [r7, #0]
    cd7e:	4780      	blx	r0
    cd80:	e031      	b.n	cde6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    cd82:	07a8      	lsls	r0, r5, #30
    cd84:	d526      	bpl.n	cdd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    cd86:	0768      	lsls	r0, r5, #29
    cd88:	d41e      	bmi.n	cdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    cd8a:	f000 fc73 	bl	d674 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cd8e:	b9d8      	cbnz	r0, cdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    cd90:	f000 fc60 	bl	d654 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    cd94:	b9c0      	cbnz	r0, cdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    cd96:	482d      	ldr	r0, [pc, #180]	; (ce4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    cd98:	6800      	ldr	r0, [r0, #0]
    cd9a:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    cd9e:	f3c0 6100 	ubfx	r1, r0, #24, #1
    cda2:	f000 030f 	and.w	r3, r0, #15
    cda6:	f3c0 1203 	ubfx	r2, r0, #4, #4
    cdaa:	f3c0 2003 	ubfx	r0, r0, #8, #4
    cdae:	b159      	cbz	r1, cdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    cdb0:	b10b      	cbz	r3, cdb6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    cdb2:	b102      	cbz	r2, cdb6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    cdb4:	b940      	cbnz	r0, cdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    cdb6:	4825      	ldr	r0, [pc, #148]	; (ce4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    cdb8:	1d00      	adds	r0, r0, #4
    cdba:	6800      	ldr	r0, [r0, #0]
    cdbc:	b120      	cbz	r0, cdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    cdbe:	f1bc 0f03 	cmp.w	ip, #3
    cdc2:	d201      	bcs.n	cdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    cdc4:	f045 0504 	orr.w	r5, r5, #4
    cdc8:	f345 0080 	sbfx	r0, r5, #2, #1
    cdcc:	4641      	mov	r1, r8
    cdce:	1c40      	adds	r0, r0, #1
    cdd0:	687a      	ldr	r2, [r7, #4]
    cdd2:	e007      	b.n	cde4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    cdd4:	f015 0f28 	tst.w	r5, #40	; 0x28
    cdd8:	d005      	beq.n	cde6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    cdda:	f345 1140 	sbfx	r1, r5, #5, #1
    cdde:	68ba      	ldr	r2, [r7, #8]
    cde0:	4640      	mov	r0, r8
    cde2:	1c49      	adds	r1, r1, #1
    cde4:	4790      	blx	r2
    cde6:	06e8      	lsls	r0, r5, #27
    cde8:	d501      	bpl.n	cdee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    cdea:	68f8      	ldr	r0, [r7, #12]
    cdec:	4780      	blx	r0
    cdee:	7a60      	ldrb	r0, [r4, #9]
    cdf0:	2802      	cmp	r0, #2
    cdf2:	d11c      	bne.n	ce2e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    cdf4:	7b20      	ldrb	r0, [r4, #12]
    cdf6:	2800      	cmp	r0, #0
    cdf8:	d019      	beq.n	ce2e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    cdfa:	2802      	cmp	r0, #2
    cdfc:	d004      	beq.n	ce08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    cdfe:	2801      	cmp	r0, #1
    ce00:	d006      	beq.n	ce10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    ce02:	f640 21e1 	movw	r1, #2785	; 0xae1
    ce06:	e009      	b.n	ce1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    ce08:	6921      	ldr	r1, [r4, #16]
    ce0a:	69e0      	ldr	r0, [r4, #28]
    ce0c:	4408      	add	r0, r1
    ce0e:	e008      	b.n	ce22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    ce10:	69e1      	ldr	r1, [r4, #28]
    ce12:	6920      	ldr	r0, [r4, #16]
    ce14:	4288      	cmp	r0, r1
    ce16:	d804      	bhi.n	ce22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    ce18:	f640 21e2 	movw	r1, #2786	; 0xae2
    ce1c:	203e      	movs	r0, #62	; 0x3e
    ce1e:	f7f8 f84f 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce22:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    ce26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ce2a:	f000 ba17 	b.w	d25c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    ce2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ce32:	0000      	.short	0x0000
    ce34:	40008000 	.word	0x40008000
    ce38:	4000b000 	.word	0x4000b000
    ce3c:	2000138c 	.word	0x2000138c
    ce40:	4001f508 	.word	0x4001f508
    ce44:	40001000 	.word	0x40001000
    ce48:	40008004 	.word	0x40008004
    ce4c:	40001450 	.word	0x40001450

0000ce50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    ce50:	b570      	push	{r4, r5, r6, lr}
    ce52:	4b15      	ldr	r3, [pc, #84]	; (cea8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    ce54:	888c      	ldrh	r4, [r1, #4]
    ce56:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    ce5a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    ce5e:	780c      	ldrb	r4, [r1, #0]
    ce60:	f8d1 1001 	ldr.w	r1, [r1, #1]
    ce64:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    ce68:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    ce6c:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    ce70:	2101      	movs	r1, #1
    ce72:	4081      	lsls	r1, r0
    ce74:	430c      	orrs	r4, r1
    ce76:	b2e4      	uxtb	r4, r4
    ce78:	b132      	cbz	r2, ce88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    ce7a:	2a01      	cmp	r2, #1
    ce7c:	d00a      	beq.n	ce94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    ce7e:	f240 41ac 	movw	r1, #1196	; 0x4ac
    ce82:	203e      	movs	r0, #62	; 0x3e
    ce84:	f7f8 f81c 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ce88:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    ce8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
    ce90:	4388      	bics	r0, r1
    ce92:	e004      	b.n	ce9e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    ce94:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    ce98:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    ce9c:	b2c0      	uxtb	r0, r0
    ce9e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    cea2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    cea6:	bd70      	pop	{r4, r5, r6, pc}
    cea8:	40001000 	.word	0x40001000

0000ceac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    ceac:	4901      	ldr	r1, [pc, #4]	; (ceb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    ceae:	2001      	movs	r0, #1
    ceb0:	7008      	strb	r0, [r1, #0]
    ceb2:	4770      	bx	lr
    ceb4:	20000264 	.word	0x20000264
    ceb8:	b510      	push	{r4, lr}
    ceba:	4604      	mov	r4, r0
    cebc:	f000 fbda 	bl	d674 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    cec0:	2800      	cmp	r0, #0
    cec2:	d00e      	beq.n	cee2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    cec4:	4a09      	ldr	r2, [pc, #36]	; (ceec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    cec6:	6811      	ldr	r1, [r2, #0]
    cec8:	0650      	lsls	r0, r2, #25
    ceca:	2c02      	cmp	r4, #2
    cecc:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    ced0:	d008      	beq.n	cee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    ced2:	f3c0 2006 	ubfx	r0, r0, #8, #7
    ced6:	bf00      	nop
    ced8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    cedc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    cee0:	6010      	str	r0, [r2, #0]
    cee2:	bd10      	pop	{r4, pc}
    cee4:	f3c0 6006 	ubfx	r0, r0, #24, #7
    cee8:	e7f6      	b.n	ced8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    ceea:	0000      	.short	0x0000
    ceec:	40001588 	.word	0x40001588
    cef0:	4815      	ldr	r0, [pc, #84]	; (cf48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    cef2:	7d41      	ldrb	r1, [r0, #21]
    cef4:	2925      	cmp	r1, #37	; 0x25
    cef6:	d00a      	beq.n	cf0e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    cef8:	2926      	cmp	r1, #38	; 0x26
    cefa:	d00b      	beq.n	cf14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    cefc:	2927      	cmp	r1, #39	; 0x27
    cefe:	d00c      	beq.n	cf1a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    cf00:	7d40      	ldrb	r0, [r0, #21]
    cf02:	0040      	lsls	r0, r0, #1
    cf04:	290a      	cmp	r1, #10
    cf06:	d80b      	bhi.n	cf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    cf08:	f600 1064 	addw	r0, r0, #2404	; 0x964
    cf0c:	e00a      	b.n	cf24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    cf0e:	f640 1062 	movw	r0, #2402	; 0x962
    cf12:	e00f      	b.n	cf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    cf14:	f640 107a 	movw	r0, #2426	; 0x97a
    cf18:	e00c      	b.n	cf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    cf1a:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    cf1e:	e009      	b.n	cf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    cf20:	f600 1066 	addw	r0, r0, #2406	; 0x966
    cf24:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    cf28:	d204      	bcs.n	cf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    cf2a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    cf2e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    cf32:	e001      	b.n	cf38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    cf34:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    cf38:	4a04      	ldr	r2, [pc, #16]	; (cf4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    cf3a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    cf3e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    cf42:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    cf46:	4770      	bx	lr
    cf48:	2000138c 	.word	0x2000138c
    cf4c:	40001000 	.word	0x40001000
    cf50:	4912      	ldr	r1, [pc, #72]	; (cf9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    cf52:	b508      	push	{r3, lr}
    cf54:	f991 2014 	ldrsb.w	r2, [r1, #20]
    cf58:	7d49      	ldrb	r1, [r1, #21]
    cf5a:	2801      	cmp	r0, #1
    cf5c:	d00a      	beq.n	cf74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    cf5e:	2802      	cmp	r0, #2
    cf60:	d00a      	beq.n	cf78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    cf62:	2804      	cmp	r0, #4
    cf64:	d00a      	beq.n	cf7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    cf66:	2808      	cmp	r0, #8
    cf68:	d00a      	beq.n	cf80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    cf6a:	f240 31ed 	movw	r1, #1005	; 0x3ed
    cf6e:	2006      	movs	r0, #6
    cf70:	f7f7 ffa6 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    cf74:	2000      	movs	r0, #0
    cf76:	e004      	b.n	cf82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    cf78:	2001      	movs	r0, #1
    cf7a:	e002      	b.n	cf82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    cf7c:	2003      	movs	r0, #3
    cf7e:	e000      	b.n	cf82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    cf80:	2002      	movs	r0, #2
    cf82:	466b      	mov	r3, sp
    cf84:	f7f4 fad6 	bl	1534 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    cf88:	b118      	cbz	r0, cf92 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    cf8a:	f240 41de 	movw	r1, #1246	; 0x4de
    cf8e:	203e      	movs	r0, #62	; 0x3e
    cf90:	e7ee      	b.n	cf70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    cf92:	f99d 0000 	ldrsb.w	r0, [sp]
    cf96:	f000 f9eb 	bl	d370 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    cf9a:	bd08      	pop	{r3, pc}
    cf9c:	2000138c 	.word	0x2000138c
    cfa0:	4803      	ldr	r0, [pc, #12]	; (cfb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    cfa2:	7a01      	ldrb	r1, [r0, #8]
    cfa4:	2901      	cmp	r1, #1
    cfa6:	d102      	bne.n	cfae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    cfa8:	7a80      	ldrb	r0, [r0, #10]
    cfaa:	f7ff bfd1 	b.w	cf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    cfae:	4770      	bx	lr
    cfb0:	2000138c 	.word	0x2000138c
    cfb4:	4805      	ldr	r0, [pc, #20]	; (cfcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    cfb6:	7a40      	ldrb	r0, [r0, #9]
    cfb8:	2801      	cmp	r0, #1
    cfba:	d003      	beq.n	cfc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    cfbc:	2802      	cmp	r0, #2
    cfbe:	d103      	bne.n	cfc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    cfc0:	f003 bd49 	b.w	10a56 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    cfc4:	f003 bd53 	b.w	10a6e <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    cfc8:	4770      	bx	lr
    cfca:	0000      	.short	0x0000
    cfcc:	2000138c 	.word	0x2000138c
    cfd0:	4807      	ldr	r0, [pc, #28]	; (cff0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    cfd2:	2100      	movs	r1, #0
    cfd4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    cfd8:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    cfdc:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    cfe0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    cfe4:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    cfe8:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    cfec:	4770      	bx	lr
    cfee:	0000      	.short	0x0000
    cff0:	40001000 	.word	0x40001000
    cff4:	4818      	ldr	r0, [pc, #96]	; (d058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    cff6:	b510      	push	{r4, lr}
    cff8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    cffc:	07c1      	lsls	r1, r0, #31
    cffe:	d029      	beq.n	d054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    d000:	0781      	lsls	r1, r0, #30
    d002:	d514      	bpl.n	d02e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    d004:	4815      	ldr	r0, [pc, #84]	; (d05c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    d006:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d00a:	f041 0101 	orr.w	r1, r1, #1
    d00e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d012:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    d016:	b2c0      	uxtb	r0, r0
    d018:	280b      	cmp	r0, #11
    d01a:	d005      	beq.n	d028 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    d01c:	280a      	cmp	r0, #10
    d01e:	d003      	beq.n	d028 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    d020:	2803      	cmp	r0, #3
    d022:	d001      	beq.n	d028 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    d024:	2802      	cmp	r0, #2
    d026:	d115      	bne.n	d054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    d028:	f240 510f 	movw	r1, #1295	; 0x50f
    d02c:	e00f      	b.n	d04e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    d02e:	0740      	lsls	r0, r0, #29
    d030:	d510      	bpl.n	d054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    d032:	480a      	ldr	r0, [pc, #40]	; (d05c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    d034:	490a      	ldr	r1, [pc, #40]	; (d060 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    d036:	3008      	adds	r0, #8
    d038:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    d03c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    d040:	4808      	ldr	r0, [pc, #32]	; (d064 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    d042:	f003 fda7 	bl	10b94 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    d046:	2800      	cmp	r0, #0
    d048:	d004      	beq.n	d054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    d04a:	f240 5117 	movw	r1, #1303	; 0x517
    d04e:	203e      	movs	r0, #62	; 0x3e
    d050:	f7f7 ff36 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d054:	bd10      	pop	{r4, pc}
    d056:	0000      	.short	0x0000
    d058:	2000138c 	.word	0x2000138c
    d05c:	40001000 	.word	0x40001000
    d060:	4001f098 	.word	0x4001f098
    d064:	40008000 	.word	0x40008000
    d068:	4808      	ldr	r0, [pc, #32]	; (d08c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    d06a:	4601      	mov	r1, r0
    d06c:	79c2      	ldrb	r2, [r0, #7]
    d06e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    d072:	b112      	cbz	r2, d07a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    d074:	2a01      	cmp	r2, #1
    d076:	d003      	beq.n	d080 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    d078:	e006      	b.n	d088 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    d07a:	f041 0102 	orr.w	r1, r1, #2
    d07e:	e001      	b.n	d084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    d080:	f041 0104 	orr.w	r1, r1, #4
    d084:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    d088:	f7ff bfb4 	b.w	cff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    d08c:	2000138c 	.word	0x2000138c
    d090:	b510      	push	{r4, lr}
    d092:	f000 faef 	bl	d674 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    d096:	2800      	cmp	r0, #0
    d098:	d108      	bne.n	d0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    d09a:	f000 fadb 	bl	d654 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    d09e:	2800      	cmp	r0, #0
    d0a0:	d104      	bne.n	d0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    d0a2:	4803      	ldr	r0, [pc, #12]	; (d0b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    d0a4:	6801      	ldr	r1, [r0, #0]
    d0a6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    d0aa:	6001      	str	r1, [r0, #0]
    d0ac:	bd10      	pop	{r4, pc}
    d0ae:	0000      	.short	0x0000
    d0b0:	40001568 	.word	0x40001568
    d0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d0b8:	4d35      	ldr	r5, [pc, #212]	; (d190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    d0ba:	2400      	movs	r4, #0
    d0bc:	7b28      	ldrb	r0, [r5, #12]
    d0be:	b138      	cbz	r0, d0d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    d0c0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    d0c4:	4833      	ldr	r0, [pc, #204]	; (d194 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    d0c6:	f003 fd65 	bl	10b94 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    d0ca:	b108      	cbz	r0, d0d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    d0cc:	2601      	movs	r6, #1
    d0ce:	e000      	b.n	d0d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    d0d0:	2600      	movs	r6, #0
    d0d2:	7a68      	ldrb	r0, [r5, #9]
    d0d4:	4f30      	ldr	r7, [pc, #192]	; (d198 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    d0d6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    d0da:	2801      	cmp	r0, #1
    d0dc:	d002      	beq.n	d0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    d0de:	2802      	cmp	r0, #2
    d0e0:	d008      	beq.n	d0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    d0e2:	e018      	b.n	d116 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    d0e4:	4638      	mov	r0, r7
    d0e6:	f003 fd50 	bl	10b8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    d0ea:	b108      	cbz	r0, d0f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    d0ec:	2408      	movs	r4, #8
    d0ee:	e012      	b.n	d116 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    d0f0:	2400      	movs	r4, #0
    d0f2:	e010      	b.n	d116 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    d0f4:	4638      	mov	r0, r7
    d0f6:	f003 fd48 	bl	10b8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    d0fa:	b100      	cbz	r0, d0fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    d0fc:	2002      	movs	r0, #2
    d0fe:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    d102:	43c9      	mvns	r1, r1
    d104:	f341 0100 	sbfx	r1, r1, #0, #1
    d108:	1c49      	adds	r1, r1, #1
    d10a:	d001      	beq.n	d110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    d10c:	2400      	movs	r4, #0
    d10e:	e000      	b.n	d112 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    d110:	2404      	movs	r4, #4
    d112:	4304      	orrs	r4, r0
    d114:	4334      	orrs	r4, r6
    d116:	f014 0f0b 	tst.w	r4, #11
    d11a:	d107      	bne.n	d12c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    d11c:	f44f 7188 	mov.w	r1, #272	; 0x110
    d120:	4638      	mov	r0, r7
    d122:	f003 fd32 	bl	10b8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    d126:	b100      	cbz	r0, d12a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    d128:	2010      	movs	r0, #16
    d12a:	4304      	orrs	r4, r0
    d12c:	481b      	ldr	r0, [pc, #108]	; (d19c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    d12e:	7800      	ldrb	r0, [r0, #0]
    d130:	b1f8      	cbz	r0, d172 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    d132:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    d136:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    d13a:	d007      	beq.n	d14c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    d13c:	f44f 718a 	mov.w	r1, #276	; 0x114
    d140:	4638      	mov	r0, r7
    d142:	f003 fd22 	bl	10b8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    d146:	b108      	cbz	r0, d14c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    d148:	2001      	movs	r0, #1
    d14a:	e000      	b.n	d14e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    d14c:	2000      	movs	r0, #0
    d14e:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    d152:	b13e      	cbz	r6, d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    d154:	f44f 718c 	mov.w	r1, #280	; 0x118
    d158:	4638      	mov	r0, r7
    d15a:	f003 fd16 	bl	10b8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    d15e:	b108      	cbz	r0, d164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    d160:	2001      	movs	r0, #1
    d162:	e000      	b.n	d166 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    d164:	2000      	movs	r0, #0
    d166:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    d16a:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    d16e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    d172:	f7ff ff2d 	bl	cfd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    d176:	06e0      	lsls	r0, r4, #27
    d178:	d506      	bpl.n	d188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    d17a:	0720      	lsls	r0, r4, #28
    d17c:	d404      	bmi.n	d188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    d17e:	7a68      	ldrb	r0, [r5, #9]
    d180:	2801      	cmp	r0, #1
    d182:	d101      	bne.n	d188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    d184:	f044 0420 	orr.w	r4, r4, #32
    d188:	4620      	mov	r0, r4
    d18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d18e:	0000      	.short	0x0000
    d190:	2000138c 	.word	0x2000138c
    d194:	40008000 	.word	0x40008000
    d198:	40001000 	.word	0x40001000
    d19c:	20000264 	.word	0x20000264
    d1a0:	4809      	ldr	r0, [pc, #36]	; (d1c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    d1a2:	b510      	push	{r4, lr}
    d1a4:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    d1a8:	f000 000f 	and.w	r0, r0, #15
    d1ac:	2803      	cmp	r0, #3
    d1ae:	d006      	beq.n	d1be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    d1b0:	2804      	cmp	r0, #4
    d1b2:	d006      	beq.n	d1c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    d1b4:	f240 11dd 	movw	r1, #477	; 0x1dd
    d1b8:	203e      	movs	r0, #62	; 0x3e
    d1ba:	f7f7 fe81 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d1be:	2001      	movs	r0, #1
    d1c0:	bd10      	pop	{r4, pc}
    d1c2:	2002      	movs	r0, #2
    d1c4:	bd10      	pop	{r4, pc}
    d1c6:	0000      	.short	0x0000
    d1c8:	40001000 	.word	0x40001000
    d1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d1d0:	4c19      	ldr	r4, [pc, #100]	; (d238 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    d1d2:	460d      	mov	r5, r1
    d1d4:	7a21      	ldrb	r1, [r4, #8]
    d1d6:	b129      	cbz	r1, d1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    d1d8:	f010 0f11 	tst.w	r0, #17
    d1dc:	d00b      	beq.n	d1f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    d1de:	f7ff fa1f 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    d1e2:	e027      	b.n	d234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    d1e4:	4915      	ldr	r1, [pc, #84]	; (d23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    d1e6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    d1ea:	6008      	str	r0, [r1, #0]
    d1ec:	f000 f862 	bl	d2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    d1f0:	2000      	movs	r0, #0
    d1f2:	7320      	strb	r0, [r4, #12]
    d1f4:	e01e      	b.n	d234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    d1f6:	2901      	cmp	r1, #1
    d1f8:	d001      	beq.n	d1fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    d1fa:	2601      	movs	r6, #1
    d1fc:	e000      	b.n	d200 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    d1fe:	2600      	movs	r6, #0
    d200:	79e0      	ldrb	r0, [r4, #7]
    d202:	2801      	cmp	r0, #1
    d204:	d00e      	beq.n	d224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    d206:	2700      	movs	r7, #0
    d208:	f000 f854 	bl	d2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    d20c:	2196      	movs	r1, #150	; 0x96
    d20e:	4630      	mov	r0, r6
    d210:	f000 f866 	bl	d2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    d214:	4601      	mov	r1, r0
    d216:	b14f      	cbz	r7, d22c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    d218:	353b      	adds	r5, #59	; 0x3b
    d21a:	428d      	cmp	r5, r1
    d21c:	d904      	bls.n	d228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    d21e:	2000      	movs	r0, #0
    d220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d224:	2701      	movs	r7, #1
    d226:	e7ef      	b.n	d208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    d228:	2001      	movs	r0, #1
    d22a:	71e0      	strb	r0, [r4, #7]
    d22c:	7aa2      	ldrb	r2, [r4, #10]
    d22e:	4630      	mov	r0, r6
    d230:	f7ff fc6a 	bl	cb08 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    d234:	2001      	movs	r0, #1
    d236:	e7f3      	b.n	d220 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    d238:	2000138c 	.word	0x2000138c
    d23c:	4001f508 	.word	0x4001f508
    d240:	4805      	ldr	r0, [pc, #20]	; (d258 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    d242:	2100      	movs	r1, #0
    d244:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    d248:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    d24c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    d250:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    d254:	4770      	bx	lr
    d256:	0000      	.short	0x0000
    d258:	40001000 	.word	0x40001000
    d25c:	4804      	ldr	r0, [pc, #16]	; (d270 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    d25e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    d260:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    d264:	6281      	str	r1, [r0, #40]	; 0x28
    d266:	4903      	ldr	r1, [pc, #12]	; (d274 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    d268:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    d26c:	6008      	str	r0, [r1, #0]
    d26e:	4770      	bx	lr
    d270:	2000138c 	.word	0x2000138c
    d274:	4001f504 	.word	0x4001f504
    d278:	4a07      	ldr	r2, [pc, #28]	; (d298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    d27a:	2000      	movs	r0, #0
    d27c:	3208      	adds	r2, #8
    d27e:	4906      	ldr	r1, [pc, #24]	; (d298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    d280:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    d284:	1d0a      	adds	r2, r1, #4
    d286:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    d28a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    d28e:	4902      	ldr	r1, [pc, #8]	; (d298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    d290:	310c      	adds	r1, #12
    d292:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    d296:	4770      	bx	lr
    d298:	40008000 	.word	0x40008000
    d29c:	4903      	ldr	r1, [pc, #12]	; (d2ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    d29e:	79c9      	ldrb	r1, [r1, #7]
    d2a0:	2900      	cmp	r1, #0
    d2a2:	d102      	bne.n	d2aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    d2a4:	4902      	ldr	r1, [pc, #8]	; (d2b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    d2a6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    d2aa:	4770      	bx	lr
    d2ac:	2000138c 	.word	0x2000138c
    d2b0:	4001f098 	.word	0x4001f098
    d2b4:	4802      	ldr	r0, [pc, #8]	; (d2c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    d2b6:	2100      	movs	r1, #0
    d2b8:	71c1      	strb	r1, [r0, #7]
    d2ba:	7201      	strb	r1, [r0, #8]
    d2bc:	7241      	strb	r1, [r0, #9]
    d2be:	4770      	bx	lr
    d2c0:	2000138c 	.word	0x2000138c
    d2c4:	4a05      	ldr	r2, [pc, #20]	; (d2dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    d2c6:	79d2      	ldrb	r2, [r2, #7]
    d2c8:	2a01      	cmp	r2, #1
    d2ca:	d006      	beq.n	d2da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    d2cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    d2d0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    d2d4:	fbb1 f1f2 	udiv	r1, r1, r2
    d2d8:	1a40      	subs	r0, r0, r1
    d2da:	4770      	bx	lr
    d2dc:	2000138c 	.word	0x2000138c
    d2e0:	b570      	push	{r4, r5, r6, lr}
    d2e2:	4c13      	ldr	r4, [pc, #76]	; (d330 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    d2e4:	4603      	mov	r3, r0
    d2e6:	460d      	mov	r5, r1
    d2e8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    d2ec:	2000      	movs	r0, #0
    d2ee:	b15a      	cbz	r2, d308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    d2f0:	4621      	mov	r1, r4
    d2f2:	f891 1020 	ldrb.w	r1, [r1, #32]
    d2f6:	b163      	cbz	r3, d312 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    d2f8:	2b01      	cmp	r3, #1
    d2fa:	d111      	bne.n	d320 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    d2fc:	2a01      	cmp	r2, #1
    d2fe:	4628      	mov	r0, r5
    d300:	d012      	beq.n	d328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    d302:	f003 fc8c 	bl	10c1e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    d306:	e009      	b.n	d31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    d308:	f240 7152 	movw	r1, #1874	; 0x752
    d30c:	203e      	movs	r0, #62	; 0x3e
    d30e:	f7f7 fdd7 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d312:	2a01      	cmp	r2, #1
    d314:	4628      	mov	r0, r5
    d316:	d004      	beq.n	d322 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    d318:	f003 fc8f 	bl	10c3a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    d31c:	69e1      	ldr	r1, [r4, #28]
    d31e:	4408      	add	r0, r1
    d320:	bd70      	pop	{r4, r5, r6, pc}
    d322:	f003 fca4 	bl	10c6e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    d326:	e7f9      	b.n	d31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    d328:	f003 fc92 	bl	10c50 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    d32c:	e7f6      	b.n	d31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    d32e:	0000      	.short	0x0000
    d330:	2000138c 	.word	0x2000138c
    d334:	b510      	push	{r4, lr}
    d336:	2200      	movs	r2, #0
    d338:	2901      	cmp	r1, #1
    d33a:	d008      	beq.n	d34e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    d33c:	2902      	cmp	r1, #2
    d33e:	d004      	beq.n	d34a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    d340:	f240 2163 	movw	r1, #611	; 0x263
    d344:	203e      	movs	r0, #62	; 0x3e
    d346:	f7f7 fdbb 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d34a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    d34e:	4905      	ldr	r1, [pc, #20]	; (d364 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    d350:	430a      	orrs	r2, r1
    d352:	4905      	ldr	r1, [pc, #20]	; (d368 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    d354:	600a      	str	r2, [r1, #0]
    d356:	4905      	ldr	r1, [pc, #20]	; (d36c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    d358:	4308      	orrs	r0, r1
    d35a:	4903      	ldr	r1, [pc, #12]	; (d368 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    d35c:	1d09      	adds	r1, r1, #4
    d35e:	6008      	str	r0, [r1, #0]
    d360:	bd10      	pop	{r4, pc}
    d362:	0000      	.short	0x0000
    d364:	00100108 	.word	0x00100108
    d368:	40001514 	.word	0x40001514
    d36c:	02030000 	.word	0x02030000

0000d370 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    d370:	4901      	ldr	r1, [pc, #4]	; (d378 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    d372:	b2c0      	uxtb	r0, r0
    d374:	6008      	str	r0, [r1, #0]
    d376:	4770      	bx	lr
    d378:	4000150c 	.word	0x4000150c

0000d37c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    d37c:	b510      	push	{r4, lr}
    d37e:	4907      	ldr	r1, [pc, #28]	; (d39c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    d380:	2801      	cmp	r0, #1
    d382:	d005      	beq.n	d390 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    d384:	2802      	cmp	r0, #2
    d386:	d005      	beq.n	d394 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    d388:	218b      	movs	r1, #139	; 0x8b
    d38a:	203f      	movs	r0, #63	; 0x3f
    d38c:	f7f7 fd98 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d390:	2003      	movs	r0, #3
    d392:	e000      	b.n	d396 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    d394:	2004      	movs	r0, #4
    d396:	6008      	str	r0, [r1, #0]
    d398:	bd10      	pop	{r4, pc}
    d39a:	0000      	.short	0x0000
    d39c:	40001510 	.word	0x40001510

0000d3a0 <strcmp>:
    d3a0:	f810 2b01 	ldrb.w	r2, [r0], #1
    d3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
    d3a8:	2a01      	cmp	r2, #1
    d3aa:	bf28      	it	cs
    d3ac:	429a      	cmpcs	r2, r3
    d3ae:	d0f7      	beq.n	d3a0 <strcmp>
    d3b0:	1ad0      	subs	r0, r2, r3
    d3b2:	4770      	bx	lr

0000d3b4 <strlen>:
    d3b4:	4603      	mov	r3, r0
    d3b6:	f813 2b01 	ldrb.w	r2, [r3], #1
    d3ba:	2a00      	cmp	r2, #0
    d3bc:	d1fb      	bne.n	d3b6 <strlen+0x2>
    d3be:	1a18      	subs	r0, r3, r0
    d3c0:	3801      	subs	r0, #1
    d3c2:	4770      	bx	lr

0000d3c4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    d3c4:	4770      	bx	lr
    d3c6:	2100      	movs	r1, #0
    d3c8:	7081      	strb	r1, [r0, #2]
    d3ca:	7001      	strb	r1, [r0, #0]
    d3cc:	7041      	strb	r1, [r0, #1]
    d3ce:	4770      	bx	lr

0000d3d0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    d3d0:	b570      	push	{r4, r5, r6, lr}
    d3d2:	f7f4 f8c9 	bl	1568 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    d3d6:	4605      	mov	r5, r0
    d3d8:	2400      	movs	r4, #0
    d3da:	e006      	b.n	d3ea <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    d3dc:	4620      	mov	r0, r4
    d3de:	f7f4 f8c9 	bl	1574 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    d3e2:	f7ff fff0 	bl	d3c6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    d3e6:	1c64      	adds	r4, r4, #1
    d3e8:	b2e4      	uxtb	r4, r4
    d3ea:	42ac      	cmp	r4, r5
    d3ec:	d3f6      	bcc.n	d3dc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    d3ee:	bd70      	pop	{r4, r5, r6, pc}

0000d3f0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    d3f0:	2000      	movs	r0, #0
    d3f2:	f7f6 bec9 	b.w	4188 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000d3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    d3f6:	b510      	push	{r4, lr}
    d3f8:	f7f6 fb9c 	bl	3b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    d3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d400:	f000 b800 	b.w	d404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000d404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    d404:	0a41      	lsrs	r1, r0, #9
    d406:	f643 5209 	movw	r2, #15625	; 0x3d09
    d40a:	4351      	muls	r1, r2
    d40c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    d410:	fb10 f002 	smulbb	r0, r0, r2
    d414:	f500 7080 	add.w	r0, r0, #256	; 0x100
    d418:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    d41c:	4770      	bx	lr

0000d41e <MPSL_IRQ_RADIO_Handler>:
    d41e:	f7f5 b9b1 	b.w	2784 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    d422:	2800      	cmp	r0, #0
    d424:	db09      	blt.n	d43a <MPSL_IRQ_RADIO_Handler+0x1c>
    d426:	f000 021f 	and.w	r2, r0, #31
    d42a:	2101      	movs	r1, #1
    d42c:	4091      	lsls	r1, r2
    d42e:	0940      	lsrs	r0, r0, #5
    d430:	0080      	lsls	r0, r0, #2
    d432:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d436:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d43a:	4770      	bx	lr
    d43c:	2800      	cmp	r0, #0
    d43e:	db0d      	blt.n	d45c <MPSL_IRQ_RADIO_Handler+0x3e>
    d440:	f000 021f 	and.w	r2, r0, #31
    d444:	2101      	movs	r1, #1
    d446:	4091      	lsls	r1, r2
    d448:	0940      	lsrs	r0, r0, #5
    d44a:	0080      	lsls	r0, r0, #2
    d44c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d450:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d454:	f3bf 8f4f 	dsb	sy
    d458:	f3bf 8f6f 	isb	sy
    d45c:	4770      	bx	lr

0000d45e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    d45e:	b570      	push	{r4, r5, r6, lr}
    d460:	4602      	mov	r2, r0
    d462:	2000      	movs	r0, #0
    d464:	2900      	cmp	r1, #0
    d466:	d01d      	beq.n	d4a4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    d468:	fba2 0101 	umull	r0, r1, r2, r1
    d46c:	0a40      	lsrs	r0, r0, #9
    d46e:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    d472:	0a49      	lsrs	r1, r1, #9
    d474:	1c40      	adds	r0, r0, #1
    d476:	f141 0100 	adc.w	r1, r1, #0
    d47a:	f240 72a1 	movw	r2, #1953	; 0x7a1
    d47e:	1883      	adds	r3, r0, r2
    d480:	f141 0100 	adc.w	r1, r1, #0
    d484:	1c5b      	adds	r3, r3, #1
    d486:	f141 0400 	adc.w	r4, r1, #0
    d48a:	2100      	movs	r1, #0
    d48c:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    d490:	41a1      	sbcs	r1, r4
    d492:	d203      	bcs.n	d49c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    d494:	2171      	movs	r1, #113	; 0x71
    d496:	206d      	movs	r0, #109	; 0x6d
    d498:	f7f7 fa32 	bl	4900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    d49c:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    d4a0:	fbb0 f0f2 	udiv	r0, r0, r2
    d4a4:	bd70      	pop	{r4, r5, r6, pc}
    d4a6:	5840      	ldr	r0, [r0, r1]
    d4a8:	2800      	cmp	r0, #0
    d4aa:	d000      	beq.n	d4ae <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    d4ac:	2001      	movs	r0, #1
    d4ae:	4770      	bx	lr
    d4b0:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    d4b4:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    d4b8:	f002 0201 	and.w	r2, r2, #1
    d4bc:	03c0      	lsls	r0, r0, #15
    d4be:	d503      	bpl.n	d4c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d4c0:	428a      	cmp	r2, r1
    d4c2:	d101      	bne.n	d4c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    d4c4:	2001      	movs	r0, #1
    d4c6:	4770      	bx	lr
    d4c8:	2000      	movs	r0, #0
    d4ca:	4770      	bx	lr

0000d4cc <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    d4cc:	b510      	push	{r4, lr}
    d4ce:	2101      	movs	r1, #1
    d4d0:	0788      	lsls	r0, r1, #30
    d4d2:	f7f7 f9bf 	bl	4854 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d4d6:	2800      	cmp	r0, #0
    d4d8:	d000      	beq.n	d4dc <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    d4da:	2001      	movs	r0, #1
    d4dc:	bd10      	pop	{r4, pc}

0000d4de <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    d4de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d4e2:	2101      	movs	r1, #1
    d4e4:	6001      	str	r1, [r0, #0]
    d4e6:	4770      	bx	lr

0000d4e8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    d4e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d4ec:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    d4f0:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    d4f4:	f002 0203 	and.w	r2, r2, #3
    d4f8:	03c9      	lsls	r1, r1, #15
    d4fa:	d503      	bpl.n	d504 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d4fc:	4282      	cmp	r2, r0
    d4fe:	d101      	bne.n	d504 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    d500:	2001      	movs	r0, #1
    d502:	4770      	bx	lr
    d504:	2000      	movs	r0, #0
    d506:	4770      	bx	lr

0000d508 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    d508:	b510      	push	{r4, lr}
    d50a:	2100      	movs	r1, #0
    d50c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    d510:	f7f7 f9a0 	bl	4854 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    d514:	2800      	cmp	r0, #0
    d516:	d000      	beq.n	d51a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    d518:	2001      	movs	r0, #1
    d51a:	bd10      	pop	{r4, pc}
    d51c:	2800      	cmp	r0, #0
    d51e:	db09      	blt.n	d534 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    d520:	f000 021f 	and.w	r2, r0, #31
    d524:	2101      	movs	r1, #1
    d526:	4091      	lsls	r1, r2
    d528:	0940      	lsrs	r0, r0, #5
    d52a:	0080      	lsls	r0, r0, #2
    d52c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d530:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d534:	4770      	bx	lr
    d536:	2800      	cmp	r0, #0
    d538:	db0d      	blt.n	d556 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    d53a:	f000 021f 	and.w	r2, r0, #31
    d53e:	2101      	movs	r1, #1
    d540:	4091      	lsls	r1, r2
    d542:	0940      	lsrs	r0, r0, #5
    d544:	0080      	lsls	r0, r0, #2
    d546:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d54a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    d54e:	f3bf 8f4f 	dsb	sy
    d552:	f3bf 8f6f 	isb	sy
    d556:	4770      	bx	lr
    d558:	00021000 	.word	0x00021000
    d55c:	000000fa 	.word	0x000000fa
    d560:	24625723 	.word	0x24625723
    d564:	578f3123 	.word	0x578f3123
    d568:	2fd1ee74 	.word	0x2fd1ee74
    d56c:	4594c088 	.word	0x4594c088
    d570:	36f9a2f7 	.word	0x36f9a2f7
    d574:	2800      	cmp	r0, #0
    d576:	db09      	blt.n	d58c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    d578:	f000 021f 	and.w	r2, r0, #31
    d57c:	2101      	movs	r1, #1
    d57e:	4091      	lsls	r1, r2
    d580:	0940      	lsrs	r0, r0, #5
    d582:	0080      	lsls	r0, r0, #2
    d584:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d588:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d58c:	4770      	bx	lr

0000d58e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    d58e:	f3ef 8110 	mrs	r1, PRIMASK
    d592:	b672      	cpsid	i
    d594:	7802      	ldrb	r2, [r0, #0]
    d596:	2a01      	cmp	r2, #1
    d598:	d001      	beq.n	d59e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    d59a:	2201      	movs	r2, #1
    d59c:	e000      	b.n	d5a0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    d59e:	2200      	movs	r2, #0
    d5a0:	2301      	movs	r3, #1
    d5a2:	7003      	strb	r3, [r0, #0]
    d5a4:	b901      	cbnz	r1, d5a8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    d5a6:	b662      	cpsie	i
    d5a8:	b10a      	cbz	r2, d5ae <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    d5aa:	2000      	movs	r0, #0
    d5ac:	4770      	bx	lr
    d5ae:	f06f 0022 	mvn.w	r0, #34	; 0x22
    d5b2:	4770      	bx	lr

0000d5b4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    d5b4:	2100      	movs	r1, #0
    d5b6:	7001      	strb	r1, [r0, #0]
    d5b8:	4608      	mov	r0, r1
    d5ba:	4770      	bx	lr

0000d5bc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    d5bc:	f3ef 8110 	mrs	r1, PRIMASK
    d5c0:	b672      	cpsid	i
    d5c2:	2200      	movs	r2, #0
    d5c4:	7002      	strb	r2, [r0, #0]
    d5c6:	b901      	cbnz	r1, d5ca <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    d5c8:	b662      	cpsie	i
    d5ca:	2000      	movs	r0, #0
    d5cc:	4770      	bx	lr

0000d5ce <mpsl_low_priority_process>:
    d5ce:	f7f7 ba83 	b.w	4ad8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000d5d2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    d5d2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d5d6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d5da:	280f      	cmp	r0, #15
    d5dc:	d001      	beq.n	d5e2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    d5de:	2000      	movs	r0, #0
    d5e0:	4770      	bx	lr
    d5e2:	2001      	movs	r0, #1
    d5e4:	4770      	bx	lr

0000d5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    d5e6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d5ea:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d5ee:	280a      	cmp	r0, #10
    d5f0:	d001      	beq.n	d5f6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    d5f2:	2000      	movs	r0, #0
    d5f4:	4770      	bx	lr
    d5f6:	2001      	movs	r0, #1
    d5f8:	4770      	bx	lr

0000d5fa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    d5fa:	b500      	push	{lr}
    d5fc:	f7ff fff3 	bl	d5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    d600:	b120      	cbz	r0, d60c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    d602:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d606:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d60a:	b108      	cbz	r0, d610 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    d60c:	2000      	movs	r0, #0
    d60e:	bd00      	pop	{pc}
    d610:	2001      	movs	r0, #1
    d612:	bd00      	pop	{pc}

0000d614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    d614:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d618:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d61c:	280e      	cmp	r0, #14
    d61e:	d001      	beq.n	d624 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    d620:	2000      	movs	r0, #0
    d622:	4770      	bx	lr
    d624:	2001      	movs	r0, #1
    d626:	4770      	bx	lr

0000d628 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    d628:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d62c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d630:	2810      	cmp	r0, #16
    d632:	d001      	beq.n	d638 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    d634:	2000      	movs	r0, #0
    d636:	4770      	bx	lr
    d638:	2001      	movs	r0, #1
    d63a:	4770      	bx	lr

0000d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    d63c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d640:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d644:	2806      	cmp	r0, #6
    d646:	d003      	beq.n	d650 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d648:	1c40      	adds	r0, r0, #1
    d64a:	d001      	beq.n	d650 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    d64c:	2000      	movs	r0, #0
    d64e:	4770      	bx	lr
    d650:	2001      	movs	r0, #1
    d652:	4770      	bx	lr

0000d654 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    d654:	b500      	push	{lr}
    d656:	f7ff fff1 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d65a:	b148      	cbz	r0, d670 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d65c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d660:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d664:	2806      	cmp	r0, #6
    d666:	d303      	bcc.n	d670 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d668:	1c40      	adds	r0, r0, #1
    d66a:	d001      	beq.n	d670 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    d66c:	2001      	movs	r0, #1
    d66e:	bd00      	pop	{pc}
    d670:	2000      	movs	r0, #0
    d672:	bd00      	pop	{pc}

0000d674 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    d674:	b500      	push	{lr}
    d676:	f7ff ffe1 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    d67a:	b138      	cbz	r0, d68c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    d67c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d680:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    d684:	2806      	cmp	r0, #6
    d686:	d303      	bcc.n	d690 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d688:	1c40      	adds	r0, r0, #1
    d68a:	d001      	beq.n	d690 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    d68c:	2000      	movs	r0, #0
    d68e:	bd00      	pop	{pc}
    d690:	2001      	movs	r0, #1
    d692:	bd00      	pop	{pc}

0000d694 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    d694:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d698:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d69c:	280d      	cmp	r0, #13
    d69e:	d001      	beq.n	d6a4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    d6a0:	2000      	movs	r0, #0
    d6a2:	4770      	bx	lr
    d6a4:	2001      	movs	r0, #1
    d6a6:	4770      	bx	lr

0000d6a8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    d6a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    d6ac:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    d6b0:	2808      	cmp	r0, #8
    d6b2:	d001      	beq.n	d6b8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    d6b4:	2000      	movs	r0, #0
    d6b6:	4770      	bx	lr
    d6b8:	2001      	movs	r0, #1
    d6ba:	4770      	bx	lr

0000d6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    d6bc:	2a00      	cmp	r2, #0
    d6be:	bf04      	itt	eq
    d6c0:	2000      	moveq	r0, #0
    d6c2:	4770      	bxeq	lr
    d6c4:	1e52      	subs	r2, r2, #1
    d6c6:	d007      	beq.n	d6d8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    d6c8:	7803      	ldrb	r3, [r0, #0]
    d6ca:	f891 c000 	ldrb.w	ip, [r1]
    d6ce:	4563      	cmp	r3, ip
    d6d0:	bf04      	itt	eq
    d6d2:	1c40      	addeq	r0, r0, #1
    d6d4:	1c49      	addeq	r1, r1, #1
    d6d6:	d0f5      	beq.n	d6c4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    d6d8:	7800      	ldrb	r0, [r0, #0]
    d6da:	7809      	ldrb	r1, [r1, #0]
    d6dc:	1a40      	subs	r0, r0, r1
    d6de:	4770      	bx	lr

0000d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    d6e0:	b4f0      	push	{r4, r5, r6, r7}
    d6e2:	ea80 0c01 	eor.w	ip, r0, r1
    d6e6:	4603      	mov	r3, r0
    d6e8:	f01c 0f03 	tst.w	ip, #3
    d6ec:	d13c      	bne.n	d768 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d6ee:	f013 0f03 	tst.w	r3, #3
    d6f2:	d00b      	beq.n	d70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    d6f4:	2a00      	cmp	r2, #0
    d6f6:	bf04      	itt	eq
    d6f8:	bcf0      	popeq	{r4, r5, r6, r7}
    d6fa:	4770      	bxeq	lr
    d6fc:	f811 cb01 	ldrb.w	ip, [r1], #1
    d700:	f803 cb01 	strb.w	ip, [r3], #1
    d704:	1e52      	subs	r2, r2, #1
    d706:	f013 0f03 	tst.w	r3, #3
    d70a:	d1f3      	bne.n	d6f4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    d70c:	2a03      	cmp	r2, #3
    d70e:	d94f      	bls.n	d7b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d710:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d714:	d24c      	bcs.n	d7b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    d716:	f1c2 0c00 	rsb	ip, r2, #0
    d71a:	ea4f 74ec 	mov.w	r4, ip, asr #31
    d71e:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    d722:	ea4f 0cac 	mov.w	ip, ip, asr #2
    d726:	f1cc 0c00 	rsb	ip, ip, #0
    d72a:	f1bc 0f00 	cmp.w	ip, #0
    d72e:	dd1b      	ble.n	d768 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d730:	1f0d      	subs	r5, r1, #4
    d732:	1f1c      	subs	r4, r3, #4
    d734:	f01c 0f01 	tst.w	ip, #1
    d738:	d003      	beq.n	d742 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    d73a:	f855 6f04 	ldr.w	r6, [r5, #4]!
    d73e:	f844 6f04 	str.w	r6, [r4, #4]!
    d742:	ea5f 066c 	movs.w	r6, ip, asr #1
    d746:	d007      	beq.n	d758 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    d748:	686f      	ldr	r7, [r5, #4]
    d74a:	6067      	str	r7, [r4, #4]
    d74c:	f855 7f08 	ldr.w	r7, [r5, #8]!
    d750:	f844 7f08 	str.w	r7, [r4, #8]!
    d754:	1e76      	subs	r6, r6, #1
    d756:	d1f7      	bne.n	d748 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    d758:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    d75c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    d760:	f1cc 0c00 	rsb	ip, ip, #0
    d764:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    d768:	2a00      	cmp	r2, #0
    d76a:	bf04      	itt	eq
    d76c:	bcf0      	popeq	{r4, r5, r6, r7}
    d76e:	4770      	bxeq	lr
    d770:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d774:	d226      	bcs.n	d7c4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d776:	2a00      	cmp	r2, #0
    d778:	bfdc      	itt	le
    d77a:	bcf0      	pople	{r4, r5, r6, r7}
    d77c:	4770      	bxle	lr
    d77e:	1e49      	subs	r1, r1, #1
    d780:	1e5b      	subs	r3, r3, #1
    d782:	f012 0f01 	tst.w	r2, #1
    d786:	d003      	beq.n	d790 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    d788:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    d78c:	f803 cf01 	strb.w	ip, [r3, #1]!
    d790:	1052      	asrs	r2, r2, #1
    d792:	bf04      	itt	eq
    d794:	bcf0      	popeq	{r4, r5, r6, r7}
    d796:	4770      	bxeq	lr
    d798:	f891 c001 	ldrb.w	ip, [r1, #1]
    d79c:	f883 c001 	strb.w	ip, [r3, #1]
    d7a0:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    d7a4:	f803 cf02 	strb.w	ip, [r3, #2]!
    d7a8:	1e52      	subs	r2, r2, #1
    d7aa:	d1f5      	bne.n	d798 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    d7ac:	bcf0      	pop	{r4, r5, r6, r7}
    d7ae:	4770      	bx	lr
    d7b0:	2a04      	cmp	r2, #4
    d7b2:	d3d9      	bcc.n	d768 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d7b4:	f851 cb04 	ldr.w	ip, [r1], #4
    d7b8:	1f12      	subs	r2, r2, #4
    d7ba:	f843 cb04 	str.w	ip, [r3], #4
    d7be:	2a04      	cmp	r2, #4
    d7c0:	d2f8      	bcs.n	d7b4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    d7c2:	e7d1      	b.n	d768 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    d7c4:	f811 cb01 	ldrb.w	ip, [r1], #1
    d7c8:	f803 cb01 	strb.w	ip, [r3], #1
    d7cc:	1e52      	subs	r2, r2, #1
    d7ce:	d1f9      	bne.n	d7c4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    d7d0:	bcf0      	pop	{r4, r5, r6, r7}
    d7d2:	4770      	bx	lr

0000d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    d7d4:	b470      	push	{r4, r5, r6}
    d7d6:	4603      	mov	r3, r0
    d7d8:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    d7dc:	f010 0f03 	tst.w	r0, #3
    d7e0:	d009      	beq.n	d7f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    d7e2:	2a00      	cmp	r2, #0
    d7e4:	bf04      	itt	eq
    d7e6:	bc70      	popeq	{r4, r5, r6}
    d7e8:	4770      	bxeq	lr
    d7ea:	f803 cb01 	strb.w	ip, [r3], #1
    d7ee:	1e52      	subs	r2, r2, #1
    d7f0:	f013 0f03 	tst.w	r3, #3
    d7f4:	d1f5      	bne.n	d7e2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    d7f6:	b2c9      	uxtb	r1, r1
    d7f8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    d7fc:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    d800:	2a03      	cmp	r2, #3
    d802:	d939      	bls.n	d878 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d808:	d236      	bcs.n	d878 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    d80a:	4251      	negs	r1, r2
    d80c:	17cc      	asrs	r4, r1, #31
    d80e:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    d812:	1089      	asrs	r1, r1, #2
    d814:	424e      	negs	r6, r1
    d816:	2e00      	cmp	r6, #0
    d818:	dd11      	ble.n	d83e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d81a:	1f19      	subs	r1, r3, #4
    d81c:	f016 0f01 	tst.w	r6, #1
    d820:	bf18      	it	ne
    d822:	f841 5f04 	strne.w	r5, [r1, #4]!
    d826:	1074      	asrs	r4, r6, #1
    d828:	d004      	beq.n	d834 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    d82a:	604d      	str	r5, [r1, #4]
    d82c:	f841 5f08 	str.w	r5, [r1, #8]!
    d830:	1e64      	subs	r4, r4, #1
    d832:	d1fa      	bne.n	d82a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    d834:	4271      	negs	r1, r6
    d836:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    d83a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    d83e:	2a00      	cmp	r2, #0
    d840:	bf04      	itt	eq
    d842:	bc70      	popeq	{r4, r5, r6}
    d844:	4770      	bxeq	lr
    d846:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    d84a:	d21d      	bcs.n	d888 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d84c:	2a00      	cmp	r2, #0
    d84e:	bfdc      	itt	le
    d850:	bc70      	pople	{r4, r5, r6}
    d852:	4770      	bxle	lr
    d854:	1e59      	subs	r1, r3, #1
    d856:	f012 0f01 	tst.w	r2, #1
    d85a:	bf18      	it	ne
    d85c:	f801 cf01 	strbne.w	ip, [r1, #1]!
    d860:	1052      	asrs	r2, r2, #1
    d862:	bf04      	itt	eq
    d864:	bc70      	popeq	{r4, r5, r6}
    d866:	4770      	bxeq	lr
    d868:	f881 c001 	strb.w	ip, [r1, #1]
    d86c:	f801 cf02 	strb.w	ip, [r1, #2]!
    d870:	1e52      	subs	r2, r2, #1
    d872:	d1f9      	bne.n	d868 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    d874:	bc70      	pop	{r4, r5, r6}
    d876:	4770      	bx	lr
    d878:	2a04      	cmp	r2, #4
    d87a:	d3e0      	bcc.n	d83e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d87c:	1f12      	subs	r2, r2, #4
    d87e:	f843 5b04 	str.w	r5, [r3], #4
    d882:	2a04      	cmp	r2, #4
    d884:	d2fa      	bcs.n	d87c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    d886:	e7da      	b.n	d83e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    d888:	f803 cb01 	strb.w	ip, [r3], #1
    d88c:	1e52      	subs	r2, r2, #1
    d88e:	d1fb      	bne.n	d888 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    d890:	bc70      	pop	{r4, r5, r6}
    d892:	4770      	bx	lr
    d894:	f04f 30ff 	mov.w	r0, #4294967295
    d898:	4770      	bx	lr
    d89a:	2000      	movs	r0, #0
    d89c:	4770      	bx	lr
    d89e:	2000      	movs	r0, #0
    d8a0:	4770      	bx	lr
    d8a2:	f04f 30ff 	mov.w	r0, #4294967295
    d8a6:	4770      	bx	lr
    d8a8:	4770      	bx	lr
    d8aa:	4770      	bx	lr
    d8ac:	2000      	movs	r0, #0
    d8ae:	4770      	bx	lr
    d8b0:	f04f 30ff 	mov.w	r0, #4294967295
    d8b4:	4770      	bx	lr
    d8b6:	f04f 30ff 	mov.w	r0, #4294967295
    d8ba:	4770      	bx	lr
    d8bc:	2100      	movs	r1, #0
    d8be:	7001      	strb	r1, [r0, #0]
    d8c0:	4770      	bx	lr
    d8c2:	f04f 30ff 	mov.w	r0, #4294967295
    d8c6:	4770      	bx	lr
    d8c8:	f04f 30ff 	mov.w	r0, #4294967295
    d8cc:	4770      	bx	lr
    d8ce:	2000      	movs	r0, #0
    d8d0:	4770      	bx	lr
    d8d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d8d6:	4606      	mov	r6, r0
    d8d8:	460c      	mov	r4, r1
    d8da:	7808      	ldrb	r0, [r1, #0]
    d8dc:	7849      	ldrb	r1, [r1, #1]
    d8de:	2700      	movs	r7, #0
    d8e0:	4408      	add	r0, r1
    d8e2:	4691      	mov	r9, r2
    d8e4:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    d8e8:	463d      	mov	r5, r7
    d8ea:	e00e      	b.n	d90a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    d8ec:	7a23      	ldrb	r3, [r4, #8]
    d8ee:	2b02      	cmp	r3, #2
    d8f0:	d200      	bcs.n	d8f4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    d8f2:	2302      	movs	r3, #2
    d8f4:	79e2      	ldrb	r2, [r4, #7]
    d8f6:	2a03      	cmp	r2, #3
    d8f8:	d200      	bcs.n	d8fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    d8fa:	2203      	movs	r2, #3
    d8fc:	79a1      	ldrb	r1, [r4, #6]
    d8fe:	7960      	ldrb	r0, [r4, #5]
    d900:	f000 ffb3 	bl	e86a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    d904:	1c6d      	adds	r5, r5, #1
    d906:	4407      	add	r7, r0
    d908:	b2ed      	uxtb	r5, r5
    d90a:	4545      	cmp	r5, r8
    d90c:	d3ee      	bcc.n	d8ec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    d90e:	6830      	ldr	r0, [r6, #0]
    d910:	1cc0      	adds	r0, r0, #3
    d912:	f020 0003 	bic.w	r0, r0, #3
    d916:	6030      	str	r0, [r6, #0]
    d918:	f1b9 0f00 	cmp.w	r9, #0
    d91c:	d000      	beq.n	d920 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    d91e:	2000      	movs	r0, #0
    d920:	463a      	mov	r2, r7
    d922:	4641      	mov	r1, r8
    d924:	f7f7 fe82 	bl	562c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    d928:	6831      	ldr	r1, [r6, #0]
    d92a:	4408      	add	r0, r1
    d92c:	6030      	str	r0, [r6, #0]
    d92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000d932 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    d932:	2000      	movs	r0, #0
    d934:	4770      	bx	lr

0000d936 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    d936:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    d938:	4604      	mov	r4, r0
    d93a:	1d01      	adds	r1, r0, #4
    d93c:	4668      	mov	r0, sp
    d93e:	f7f9 fb11 	bl	6f64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    d942:	2800      	cmp	r0, #0
    d944:	d004      	beq.n	d950 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    d946:	4669      	mov	r1, sp
    d948:	4620      	mov	r0, r4
    d94a:	f000 f848 	bl	d9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    d94e:	2001      	movs	r0, #1
    d950:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000d952 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    d952:	b50e      	push	{r1, r2, r3, lr}
    d954:	4601      	mov	r1, r0
    d956:	4668      	mov	r0, sp
    d958:	f000 f827 	bl	d9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    d95c:	4668      	mov	r0, sp
    d95e:	f001 fc51 	bl	f204 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    d962:	bd0e      	pop	{r1, r2, r3, pc}

0000d964 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    d964:	b510      	push	{r4, lr}
    d966:	4604      	mov	r4, r0
    d968:	4620      	mov	r0, r4
    d96a:	f7f7 fb9f 	bl	50ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    d96e:	2800      	cmp	r0, #0
    d970:	d006      	beq.n	d980 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    d972:	78a1      	ldrb	r1, [r4, #2]
    d974:	7820      	ldrb	r0, [r4, #0]
    d976:	f000 f804 	bl	d982 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    d97a:	2800      	cmp	r0, #0
    d97c:	d0f4      	beq.n	d968 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    d97e:	2001      	movs	r0, #1
    d980:	bd10      	pop	{r4, pc}
    d982:	b570      	push	{r4, r5, r6, lr}
    d984:	460c      	mov	r4, r1
    d986:	4605      	mov	r5, r0
    d988:	f7f7 fbec 	bl	5164 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    d98c:	2800      	cmp	r0, #0
    d98e:	d002      	beq.n	d996 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    d990:	2d3e      	cmp	r5, #62	; 0x3e
    d992:	d001      	beq.n	d998 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    d994:	2001      	movs	r0, #1
    d996:	bd70      	pop	{r4, r5, r6, pc}
    d998:	2c12      	cmp	r4, #18
    d99a:	d004      	beq.n	d9a6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    d99c:	4620      	mov	r0, r4
    d99e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    d9a2:	f7f7 bbfb 	b.w	519c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    d9a6:	2000      	movs	r0, #0
    d9a8:	bd70      	pop	{r4, r5, r6, pc}

0000d9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    d9aa:	880a      	ldrh	r2, [r1, #0]
    d9ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
    d9b0:	8002      	strh	r2, [r0, #0]
    d9b2:	884a      	ldrh	r2, [r1, #2]
    d9b4:	8042      	strh	r2, [r0, #2]
    d9b6:	784a      	ldrb	r2, [r1, #1]
    d9b8:	0993      	lsrs	r3, r2, #6
    d9ba:	2200      	movs	r2, #0
    d9bc:	7142      	strb	r2, [r0, #5]
    d9be:	784b      	ldrb	r3, [r1, #1]
    d9c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    d9c4:	b11b      	cbz	r3, d9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d9c6:	2b01      	cmp	r3, #1
    d9c8:	d005      	beq.n	d9d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    d9ca:	2b02      	cmp	r3, #2
    d9cc:	d005      	beq.n	d9da <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    d9ce:	7102      	strb	r2, [r0, #4]
    d9d0:	1d09      	adds	r1, r1, #4
    d9d2:	6081      	str	r1, [r0, #8]
    d9d4:	4770      	bx	lr
    d9d6:	2201      	movs	r2, #1
    d9d8:	e7f9      	b.n	d9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    d9da:	2202      	movs	r2, #2
    d9dc:	e7f7      	b.n	d9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000d9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    d9de:	b510      	push	{r4, lr}
    d9e0:	460c      	mov	r4, r1
    d9e2:	7809      	ldrb	r1, [r1, #0]
    d9e4:	7001      	strb	r1, [r0, #0]
    d9e6:	7841      	ldrb	r1, [r0, #1]
    d9e8:	f021 010f 	bic.w	r1, r1, #15
    d9ec:	7041      	strb	r1, [r0, #1]
    d9ee:	8822      	ldrh	r2, [r4, #0]
    d9f0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    d9f4:	4311      	orrs	r1, r2
    d9f6:	7041      	strb	r1, [r0, #1]
    d9f8:	78a2      	ldrb	r2, [r4, #2]
    d9fa:	7082      	strb	r2, [r0, #2]
    d9fc:	8862      	ldrh	r2, [r4, #2]
    d9fe:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    da02:	0a12      	lsrs	r2, r2, #8
    da04:	70c2      	strb	r2, [r0, #3]
    da06:	7041      	strb	r1, [r0, #1]
    da08:	7922      	ldrb	r2, [r4, #4]
    da0a:	f002 0203 	and.w	r2, r2, #3
    da0e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    da12:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    da16:	7041      	strb	r1, [r0, #1]
    da18:	7962      	ldrb	r2, [r4, #5]
    da1a:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    da1e:	7041      	strb	r1, [r0, #1]
    da20:	68a1      	ldr	r1, [r4, #8]
    da22:	1d02      	adds	r2, r0, #4
    da24:	4291      	cmp	r1, r2
    da26:	d006      	beq.n	da36 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    da28:	8862      	ldrh	r2, [r4, #2]
    da2a:	2afb      	cmp	r2, #251	; 0xfb
    da2c:	d300      	bcc.n	da30 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    da2e:	22fb      	movs	r2, #251	; 0xfb
    da30:	1d00      	adds	r0, r0, #4
    da32:	f7ff fe55 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    da36:	78a0      	ldrb	r0, [r4, #2]
    da38:	1d00      	adds	r0, r0, #4
    da3a:	b2c0      	uxtb	r0, r0
    da3c:	bd10      	pop	{r4, pc}

0000da3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    da3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    da42:	4604      	mov	r4, r0
    da44:	f891 c000 	ldrb.w	ip, [r1]
    da48:	2000      	movs	r0, #0
    da4a:	270c      	movs	r7, #12
    da4c:	223e      	movs	r2, #62	; 0x3e
    da4e:	2612      	movs	r6, #18
    da50:	25ff      	movs	r5, #255	; 0xff
    da52:	f04f 0b14 	mov.w	fp, #20
    da56:	f04f 0e13 	mov.w	lr, #19
    da5a:	f04f 0a05 	mov.w	sl, #5
    da5e:	f104 030d 	add.w	r3, r4, #13
    da62:	f04f 0911 	mov.w	r9, #17
    da66:	f1bc 0f20 	cmp.w	ip, #32
    da6a:	d272      	bcs.n	db52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    da6c:	e8df f00c 	tbb	[pc, ip]
    da70:	29271071 	.word	0x29271071
    da74:	a46dfc2e 	.word	0xa46dfc2e
    da78:	fbdac0ae 	.word	0xfbdac0ae
    da7c:	f7f8f9fa 	.word	0xf7f8f9fa
    da80:	507171f6 	.word	0x507171f6
    da84:	f3f4f572 	.word	0xf3f4f572
    da88:	eff0f1f2 	.word	0xeff0f1f2
    da8c:	ec71edee 	.word	0xec71edee
    da90:	7027      	strb	r7, [r4, #0]
    da92:	7908      	ldrb	r0, [r1, #4]
    da94:	70a0      	strb	r0, [r4, #2]
    da96:	7948      	ldrb	r0, [r1, #5]
    da98:	70e0      	strb	r0, [r4, #3]
    da9a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    da9e:	0a00      	lsrs	r0, r0, #8
    daa0:	7120      	strb	r0, [r4, #4]
    daa2:	79c8      	ldrb	r0, [r1, #7]
    daa4:	7160      	strb	r0, [r4, #5]
    daa6:	7a08      	ldrb	r0, [r1, #8]
    daa8:	71a0      	strb	r0, [r4, #6]
    daaa:	8908      	ldrh	r0, [r1, #8]
    daac:	0a00      	lsrs	r0, r0, #8
    daae:	71e0      	strb	r0, [r4, #7]
    dab0:	7a88      	ldrb	r0, [r1, #10]
    dab2:	7220      	strb	r0, [r4, #8]
    dab4:	8948      	ldrh	r0, [r1, #10]
    dab6:	0a00      	lsrs	r0, r0, #8
    dab8:	7260      	strb	r0, [r4, #9]
    daba:	2008      	movs	r0, #8
    dabc:	e154      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dabe:	2010      	movs	r0, #16
    dac0:	e000      	b.n	dac4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    dac2:	201a      	movs	r0, #26
    dac4:	7020      	strb	r0, [r4, #0]
    dac6:	7908      	ldrb	r0, [r1, #4]
    dac8:	70a0      	strb	r0, [r4, #2]
    daca:	e154      	b.n	dd76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    dacc:	7022      	strb	r2, [r4, #0]
    dace:	2002      	movs	r0, #2
    dad0:	70a0      	strb	r0, [r4, #2]
    dad2:	7908      	ldrb	r0, [r1, #4]
    dad4:	70e0      	strb	r0, [r4, #3]
    dad6:	7b88      	ldrb	r0, [r1, #14]
    dad8:	7120      	strb	r0, [r4, #4]
    dada:	7948      	ldrb	r0, [r1, #5]
    dadc:	7160      	strb	r0, [r4, #5]
    dade:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dae2:	f8c4 0006 	str.w	r0, [r4, #6]
    dae6:	8948      	ldrh	r0, [r1, #10]
    dae8:	8160      	strh	r0, [r4, #10]
    daea:	7b08      	ldrb	r0, [r1, #12]
    daec:	7320      	strb	r0, [r4, #12]
    daee:	7b0e      	ldrb	r6, [r1, #12]
    daf0:	1d0d      	adds	r5, r1, #4
    daf2:	2e1f      	cmp	r6, #31
    daf4:	d300      	bcc.n	daf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    daf6:	261f      	movs	r6, #31
    daf8:	4618      	mov	r0, r3
    dafa:	4632      	mov	r2, r6
    dafc:	f105 010b 	add.w	r1, r5, #11
    db00:	f7ff fdee 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    db04:	360d      	adds	r6, #13
    db06:	7a69      	ldrb	r1, [r5, #9]
    db08:	55a1      	strb	r1, [r4, r6]
    db0a:	1e76      	subs	r6, r6, #1
    db0c:	b2f0      	uxtb	r0, r6
    db0e:	e129      	b.n	dd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    db10:	7022      	strb	r2, [r4, #0]
    db12:	200b      	movs	r0, #11
    db14:	70a0      	strb	r0, [r4, #2]
    db16:	7908      	ldrb	r0, [r1, #4]
    db18:	70e0      	strb	r0, [r4, #3]
    db1a:	7948      	ldrb	r0, [r1, #5]
    db1c:	7120      	strb	r0, [r4, #4]
    db1e:	7988      	ldrb	r0, [r1, #6]
    db20:	7160      	strb	r0, [r4, #5]
    db22:	f8d1 0007 	ldr.w	r0, [r1, #7]
    db26:	f8c4 0006 	str.w	r0, [r4, #6]
    db2a:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    db2e:	8160      	strh	r0, [r4, #10]
    db30:	7b48      	ldrb	r0, [r1, #13]
    db32:	7320      	strb	r0, [r4, #12]
    db34:	f8d1 000e 	ldr.w	r0, [r1, #14]
    db38:	f8c4 000d 	str.w	r0, [r4, #13]
    db3c:	8a48      	ldrh	r0, [r1, #18]
    db3e:	f8a4 0011 	strh.w	r0, [r4, #17]
    db42:	7d08      	ldrb	r0, [r1, #20]
    db44:	74e0      	strb	r0, [r4, #19]
    db46:	4630      	mov	r0, r6
    db48:	e10e      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    db4a:	4620      	mov	r0, r4
    db4c:	f000 f98d 	bl	de6a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    db50:	e108      	b.n	dd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    db52:	e10b      	b.n	dd6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    db54:	7022      	strb	r2, [r4, #0]
    db56:	200a      	movs	r0, #10
    db58:	70a0      	strb	r0, [r4, #2]
    db5a:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    db5e:	70e0      	strb	r0, [r4, #3]
    db60:	7888      	ldrb	r0, [r1, #2]
    db62:	7120      	strb	r0, [r4, #4]
    db64:	8848      	ldrh	r0, [r1, #2]
    db66:	0a00      	lsrs	r0, r0, #8
    db68:	7160      	strb	r0, [r4, #5]
    db6a:	7908      	ldrb	r0, [r1, #4]
    db6c:	71a0      	strb	r0, [r4, #6]
    db6e:	7948      	ldrb	r0, [r1, #5]
    db70:	71e0      	strb	r0, [r4, #7]
    db72:	f8d1 0006 	ldr.w	r0, [r1, #6]
    db76:	60a0      	str	r0, [r4, #8]
    db78:	8948      	ldrh	r0, [r1, #10]
    db7a:	81a0      	strh	r0, [r4, #12]
    db7c:	68c8      	ldr	r0, [r1, #12]
    db7e:	f8c4 000e 	str.w	r0, [r4, #14]
    db82:	8a08      	ldrh	r0, [r1, #16]
    db84:	8260      	strh	r0, [r4, #18]
    db86:	f8d1 0012 	ldr.w	r0, [r1, #18]
    db8a:	6160      	str	r0, [r4, #20]
    db8c:	8ac8      	ldrh	r0, [r1, #22]
    db8e:	8320      	strh	r0, [r4, #24]
    db90:	7e08      	ldrb	r0, [r1, #24]
    db92:	76a0      	strb	r0, [r4, #26]
    db94:	8b08      	ldrh	r0, [r1, #24]
    db96:	0a00      	lsrs	r0, r0, #8
    db98:	76e0      	strb	r0, [r4, #27]
    db9a:	7e88      	ldrb	r0, [r1, #26]
    db9c:	7720      	strb	r0, [r4, #28]
    db9e:	8b48      	ldrh	r0, [r1, #26]
    dba0:	0a00      	lsrs	r0, r0, #8
    dba2:	7760      	strb	r0, [r4, #29]
    dba4:	7f08      	ldrb	r0, [r1, #28]
    dba6:	77a0      	strb	r0, [r4, #30]
    dba8:	8b88      	ldrh	r0, [r1, #28]
    dbaa:	0a00      	lsrs	r0, r0, #8
    dbac:	77e0      	strb	r0, [r4, #31]
    dbae:	7f88      	ldrb	r0, [r1, #30]
    dbb0:	f884 0020 	strb.w	r0, [r4, #32]
    dbb4:	201f      	movs	r0, #31
    dbb6:	e0d7      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dbb8:	7022      	strb	r2, [r4, #0]
    dbba:	f884 b002 	strb.w	fp, [r4, #2]
    dbbe:	7908      	ldrb	r0, [r1, #4]
    dbc0:	70e0      	strb	r0, [r4, #3]
    dbc2:	8888      	ldrh	r0, [r1, #4]
    dbc4:	0a00      	lsrs	r0, r0, #8
    dbc6:	7120      	strb	r0, [r4, #4]
    dbc8:	7988      	ldrb	r0, [r1, #6]
    dbca:	e0ed      	b.n	dda8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    dbcc:	7022      	strb	r2, [r4, #0]
    dbce:	2004      	movs	r0, #4
    dbd0:	70a0      	strb	r0, [r4, #2]
    dbd2:	7908      	ldrb	r0, [r1, #4]
    dbd4:	70e0      	strb	r0, [r4, #3]
    dbd6:	7988      	ldrb	r0, [r1, #6]
    dbd8:	7120      	strb	r0, [r4, #4]
    dbda:	88c8      	ldrh	r0, [r1, #6]
    dbdc:	0a00      	lsrs	r0, r0, #8
    dbde:	7160      	strb	r0, [r4, #5]
    dbe0:	6888      	ldr	r0, [r1, #8]
    dbe2:	f8c4 0006 	str.w	r0, [r4, #6]
    dbe6:	68c8      	ldr	r0, [r1, #12]
    dbe8:	f8c4 000a 	str.w	r0, [r4, #10]
    dbec:	200c      	movs	r0, #12
    dbee:	e0bb      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dbf0:	7022      	strb	r2, [r4, #0]
    dbf2:	2003      	movs	r0, #3
    dbf4:	70a0      	strb	r0, [r4, #2]
    dbf6:	7908      	ldrb	r0, [r1, #4]
    dbf8:	70e0      	strb	r0, [r4, #3]
    dbfa:	7988      	ldrb	r0, [r1, #6]
    dbfc:	7120      	strb	r0, [r4, #4]
    dbfe:	88c8      	ldrh	r0, [r1, #6]
    dc00:	0a00      	lsrs	r0, r0, #8
    dc02:	7160      	strb	r0, [r4, #5]
    dc04:	7a08      	ldrb	r0, [r1, #8]
    dc06:	71a0      	strb	r0, [r4, #6]
    dc08:	8908      	ldrh	r0, [r1, #8]
    dc0a:	0a00      	lsrs	r0, r0, #8
    dc0c:	71e0      	strb	r0, [r4, #7]
    dc0e:	7a88      	ldrb	r0, [r1, #10]
    dc10:	7220      	strb	r0, [r4, #8]
    dc12:	8948      	ldrh	r0, [r1, #10]
    dc14:	0a00      	lsrs	r0, r0, #8
    dc16:	7260      	strb	r0, [r4, #9]
    dc18:	7b08      	ldrb	r0, [r1, #12]
    dc1a:	72a0      	strb	r0, [r4, #10]
    dc1c:	8988      	ldrh	r0, [r1, #12]
    dc1e:	0a00      	lsrs	r0, r0, #8
    dc20:	72e0      	strb	r0, [r4, #11]
    dc22:	e120      	b.n	de66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    dc24:	7022      	strb	r2, [r4, #0]
    dc26:	f884 a002 	strb.w	sl, [r4, #2]
    dc2a:	7908      	ldrb	r0, [r1, #4]
    dc2c:	70e0      	strb	r0, [r4, #3]
    dc2e:	8888      	ldrh	r0, [r1, #4]
    dc30:	0a00      	lsrs	r0, r0, #8
    dc32:	7120      	strb	r0, [r4, #4]
    dc34:	f8d1 0006 	ldr.w	r0, [r1, #6]
    dc38:	f8c4 0005 	str.w	r0, [r4, #5]
    dc3c:	f8d1 000a 	ldr.w	r0, [r1, #10]
    dc40:	f8c4 0009 	str.w	r0, [r4, #9]
    dc44:	89c8      	ldrh	r0, [r1, #14]
    dc46:	e010      	b.n	dc6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    dc48:	e0fa      	b.n	de40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    dc4a:	e0ce      	b.n	ddea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    dc4c:	e0af      	b.n	ddae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    dc4e:	e0da      	b.n	de06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    dc50:	e0e8      	b.n	de24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    dc52:	e0a1      	b.n	dd98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    dc54:	e08c      	b.n	dd70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    dc56:	e090      	b.n	dd7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    dc58:	e033      	b.n	dcc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    dc5a:	e02f      	b.n	dcbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    dc5c:	e043      	b.n	dce6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    dc5e:	e03d      	b.n	dcdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    dc60:	e021      	b.n	dca6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    dc62:	e015      	b.n	dc90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    dc64:	e008      	b.n	dc78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    dc66:	e004      	b.n	dc72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    dc68:	e046      	b.n	dcf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    dc6a:	f8a4 000d 	strh.w	r0, [r4, #13]
    dc6e:	200d      	movs	r0, #13
    dc70:	e07a      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dc72:	f884 9000 	strb.w	r9, [r4]
    dc76:	e038      	b.n	dcea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    dc78:	f884 a000 	strb.w	sl, [r4]
    dc7c:	7908      	ldrb	r0, [r1, #4]
    dc7e:	70a0      	strb	r0, [r4, #2]
    dc80:	7948      	ldrb	r0, [r1, #5]
    dc82:	70e0      	strb	r0, [r4, #3]
    dc84:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    dc88:	0a00      	lsrs	r0, r0, #8
    dc8a:	7120      	strb	r0, [r4, #4]
    dc8c:	79c8      	ldrb	r0, [r1, #7]
    dc8e:	e08b      	b.n	dda8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    dc90:	2008      	movs	r0, #8
    dc92:	7020      	strb	r0, [r4, #0]
    dc94:	7908      	ldrb	r0, [r1, #4]
    dc96:	70a0      	strb	r0, [r4, #2]
    dc98:	7988      	ldrb	r0, [r1, #6]
    dc9a:	70e0      	strb	r0, [r4, #3]
    dc9c:	88c8      	ldrh	r0, [r1, #6]
    dc9e:	0a00      	lsrs	r0, r0, #8
    dca0:	7120      	strb	r0, [r4, #4]
    dca2:	7a08      	ldrb	r0, [r1, #8]
    dca4:	e080      	b.n	dda8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    dca6:	2030      	movs	r0, #48	; 0x30
    dca8:	7020      	strb	r0, [r4, #0]
    dcaa:	7908      	ldrb	r0, [r1, #4]
    dcac:	70a0      	strb	r0, [r4, #2]
    dcae:	7988      	ldrb	r0, [r1, #6]
    dcb0:	70e0      	strb	r0, [r4, #3]
    dcb2:	88c8      	ldrh	r0, [r1, #6]
    dcb4:	0a00      	lsrs	r0, r0, #8
    dcb6:	7120      	strb	r0, [r4, #4]
    dcb8:	2003      	movs	r0, #3
    dcba:	e055      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dcbc:	7022      	strb	r2, [r4, #0]
    dcbe:	2007      	movs	r0, #7
    dcc0:	e077      	b.n	ddb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    dcc2:	7022      	strb	r2, [r4, #0]
    dcc4:	70a7      	strb	r7, [r4, #2]
    dcc6:	7908      	ldrb	r0, [r1, #4]
    dcc8:	70e0      	strb	r0, [r4, #3]
    dcca:	7988      	ldrb	r0, [r1, #6]
    dccc:	7120      	strb	r0, [r4, #4]
    dcce:	88c8      	ldrh	r0, [r1, #6]
    dcd0:	0a00      	lsrs	r0, r0, #8
    dcd2:	7160      	strb	r0, [r4, #5]
    dcd4:	7a08      	ldrb	r0, [r1, #8]
    dcd6:	71a0      	strb	r0, [r4, #6]
    dcd8:	7a48      	ldrb	r0, [r1, #9]
    dcda:	e05a      	b.n	dd92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    dcdc:	4620      	mov	r0, r4
    dcde:	1d09      	adds	r1, r1, #4
    dce0:	f7f7 fa12 	bl	5108 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    dce4:	e03e      	b.n	dd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    dce6:	2057      	movs	r0, #87	; 0x57
    dce8:	7020      	strb	r0, [r4, #0]
    dcea:	7908      	ldrb	r0, [r1, #4]
    dcec:	70a0      	strb	r0, [r4, #2]
    dcee:	8888      	ldrh	r0, [r1, #4]
    dcf0:	0a00      	lsrs	r0, r0, #8
    dcf2:	70e0      	strb	r0, [r4, #3]
    dcf4:	2002      	movs	r0, #2
    dcf6:	e037      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dcf8:	7022      	strb	r2, [r4, #0]
    dcfa:	220d      	movs	r2, #13
    dcfc:	70a2      	strb	r2, [r4, #2]
    dcfe:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    dd02:	70e2      	strb	r2, [r4, #3]
    dd04:	894a      	ldrh	r2, [r1, #10]
    dd06:	80a2      	strh	r2, [r4, #4]
    dd08:	784a      	ldrb	r2, [r1, #1]
    dd0a:	71a2      	strb	r2, [r4, #6]
    dd0c:	f8d1 2002 	ldr.w	r2, [r1, #2]
    dd10:	f8c4 2007 	str.w	r2, [r4, #7]
    dd14:	88ca      	ldrh	r2, [r1, #6]
    dd16:	f8a4 200b 	strh.w	r2, [r4, #11]
    dd1a:	7b0a      	ldrb	r2, [r1, #12]
    dd1c:	4620      	mov	r0, r4
    dd1e:	7362      	strb	r2, [r4, #13]
    dd20:	7b4a      	ldrb	r2, [r1, #13]
    dd22:	7382      	strb	r2, [r0, #14]
    dd24:	7b8a      	ldrb	r2, [r1, #14]
    dd26:	73c2      	strb	r2, [r0, #15]
    dd28:	7e8a      	ldrb	r2, [r1, #26]
    dd2a:	7402      	strb	r2, [r0, #16]
    dd2c:	7a4a      	ldrb	r2, [r1, #9]
    dd2e:	7442      	strb	r2, [r0, #17]
    dd30:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    dd34:	f8ad 2000 	strh.w	r2, [sp]
    dd38:	8242      	strh	r2, [r0, #18]
    dd3a:	7cca      	ldrb	r2, [r1, #19]
    dd3c:	7502      	strb	r2, [r0, #20]
    dd3e:	694a      	ldr	r2, [r1, #20]
    dd40:	f8c0 2015 	str.w	r2, [r0, #21]
    dd44:	8b0a      	ldrh	r2, [r1, #24]
    dd46:	f8a0 2019 	strh.w	r2, [r0, #25]
    dd4a:	7a0a      	ldrb	r2, [r1, #8]
    dd4c:	76c2      	strb	r2, [r0, #27]
    dd4e:	7a0d      	ldrb	r5, [r1, #8]
    dd50:	2de5      	cmp	r5, #229	; 0xe5
    dd52:	d300      	bcc.n	dd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    dd54:	25e5      	movs	r5, #229	; 0xe5
    dd56:	462a      	mov	r2, r5
    dd58:	301c      	adds	r0, #28
    dd5a:	311c      	adds	r1, #28
    dd5c:	f7ff fcc0 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dd60:	351a      	adds	r5, #26
    dd62:	b2e8      	uxtb	r0, r5
    dd64:	2800      	cmp	r0, #0
    dd66:	d001      	beq.n	dd6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    dd68:	7060      	strb	r0, [r4, #1]
    dd6a:	1c80      	adds	r0, r0, #2
    dd6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    dd70:	7022      	strb	r2, [r4, #0]
    dd72:	f884 9002 	strb.w	r9, [r4, #2]
    dd76:	2001      	movs	r0, #1
    dd78:	e7f6      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dd7a:	7022      	strb	r2, [r4, #0]
    dd7c:	70a6      	strb	r6, [r4, #2]
    dd7e:	7908      	ldrb	r0, [r1, #4]
    dd80:	70e0      	strb	r0, [r4, #3]
    dd82:	7948      	ldrb	r0, [r1, #5]
    dd84:	7120      	strb	r0, [r4, #4]
    dd86:	7988      	ldrb	r0, [r1, #6]
    dd88:	7160      	strb	r0, [r4, #5]
    dd8a:	88c8      	ldrh	r0, [r1, #6]
    dd8c:	0a00      	lsrs	r0, r0, #8
    dd8e:	71a0      	strb	r0, [r4, #6]
    dd90:	7a08      	ldrb	r0, [r1, #8]
    dd92:	71e0      	strb	r0, [r4, #7]
    dd94:	2006      	movs	r0, #6
    dd96:	e7e7      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    dd98:	7025      	strb	r5, [r4, #0]
    dd9a:	20a1      	movs	r0, #161	; 0xa1
    dd9c:	70a0      	strb	r0, [r4, #2]
    dd9e:	7908      	ldrb	r0, [r1, #4]
    dda0:	70e0      	strb	r0, [r4, #3]
    dda2:	7948      	ldrb	r0, [r1, #5]
    dda4:	7120      	strb	r0, [r4, #4]
    dda6:	2000      	movs	r0, #0
    dda8:	7160      	strb	r0, [r4, #5]
    ddaa:	2004      	movs	r0, #4
    ddac:	e7dc      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ddae:	7025      	strb	r5, [r4, #0]
    ddb0:	20a2      	movs	r0, #162	; 0xa2
    ddb2:	70a0      	strb	r0, [r4, #2]
    ddb4:	7908      	ldrb	r0, [r1, #4]
    ddb6:	70e0      	strb	r0, [r4, #3]
    ddb8:	8888      	ldrh	r0, [r1, #4]
    ddba:	0a00      	lsrs	r0, r0, #8
    ddbc:	7120      	strb	r0, [r4, #4]
    ddbe:	7988      	ldrb	r0, [r1, #6]
    ddc0:	7160      	strb	r0, [r4, #5]
    ddc2:	88c8      	ldrh	r0, [r1, #6]
    ddc4:	0a00      	lsrs	r0, r0, #8
    ddc6:	71a0      	strb	r0, [r4, #6]
    ddc8:	7a08      	ldrb	r0, [r1, #8]
    ddca:	71e0      	strb	r0, [r4, #7]
    ddcc:	8908      	ldrh	r0, [r1, #8]
    ddce:	0a00      	lsrs	r0, r0, #8
    ddd0:	7220      	strb	r0, [r4, #8]
    ddd2:	7a88      	ldrb	r0, [r1, #10]
    ddd4:	7260      	strb	r0, [r4, #9]
    ddd6:	8948      	ldrh	r0, [r1, #10]
    ddd8:	0a00      	lsrs	r0, r0, #8
    ddda:	72a0      	strb	r0, [r4, #10]
    dddc:	7b08      	ldrb	r0, [r1, #12]
    ddde:	72e0      	strb	r0, [r4, #11]
    dde0:	8988      	ldrh	r0, [r1, #12]
    dde2:	0a00      	lsrs	r0, r0, #8
    dde4:	7320      	strb	r0, [r4, #12]
    dde6:	200b      	movs	r0, #11
    dde8:	e7be      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ddea:	7025      	strb	r5, [r4, #0]
    ddec:	20a3      	movs	r0, #163	; 0xa3
    ddee:	70a0      	strb	r0, [r4, #2]
    ddf0:	7908      	ldrb	r0, [r1, #4]
    ddf2:	70e0      	strb	r0, [r4, #3]
    ddf4:	8888      	ldrh	r0, [r1, #4]
    ddf6:	0a00      	lsrs	r0, r0, #8
    ddf8:	7120      	strb	r0, [r4, #4]
    ddfa:	7988      	ldrb	r0, [r1, #6]
    ddfc:	7160      	strb	r0, [r4, #5]
    ddfe:	79c8      	ldrb	r0, [r1, #7]
    de00:	71a0      	strb	r0, [r4, #6]
    de02:	2005      	movs	r0, #5
    de04:	e7b0      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    de06:	7022      	strb	r2, [r4, #0]
    de08:	f884 e002 	strb.w	lr, [r4, #2]
    de0c:	7908      	ldrb	r0, [r1, #4]
    de0e:	70e0      	strb	r0, [r4, #3]
    de10:	7948      	ldrb	r0, [r1, #5]
    de12:	7120      	strb	r0, [r4, #4]
    de14:	f8d1 0006 	ldr.w	r0, [r1, #6]
    de18:	f8c4 0005 	str.w	r0, [r4, #5]
    de1c:	8948      	ldrh	r0, [r1, #10]
    de1e:	f8a4 0009 	strh.w	r0, [r4, #9]
    de22:	e020      	b.n	de66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    de24:	7025      	strb	r5, [r4, #0]
    de26:	20a4      	movs	r0, #164	; 0xa4
    de28:	70a0      	strb	r0, [r4, #2]
    de2a:	7908      	ldrb	r0, [r1, #4]
    de2c:	70e0      	strb	r0, [r4, #3]
    de2e:	8888      	ldrh	r0, [r1, #4]
    de30:	0a00      	lsrs	r0, r0, #8
    de32:	7120      	strb	r0, [r4, #4]
    de34:	7988      	ldrb	r0, [r1, #6]
    de36:	7160      	strb	r0, [r4, #5]
    de38:	79c8      	ldrb	r0, [r1, #7]
    de3a:	71a0      	strb	r0, [r4, #6]
    de3c:	2007      	movs	r0, #7
    de3e:	e793      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    de40:	7025      	strb	r5, [r4, #0]
    de42:	2080      	movs	r0, #128	; 0x80
    de44:	70a0      	strb	r0, [r4, #2]
    de46:	888a      	ldrh	r2, [r1, #4]
    de48:	f8a4 2003 	strh.w	r2, [r4, #3]
    de4c:	88ca      	ldrh	r2, [r1, #6]
    de4e:	f8a4 2005 	strh.w	r2, [r4, #5]
    de52:	7a0a      	ldrb	r2, [r1, #8]
    de54:	71e2      	strb	r2, [r4, #7]
    de56:	7a4a      	ldrb	r2, [r1, #9]
    de58:	8122      	strh	r2, [r4, #8]
    de5a:	7a8a      	ldrb	r2, [r1, #10]
    de5c:	72a2      	strb	r2, [r4, #10]
    de5e:	7ac9      	ldrb	r1, [r1, #11]
    de60:	f001 0101 	and.w	r1, r1, #1
    de64:	72e1      	strb	r1, [r4, #11]
    de66:	200a      	movs	r0, #10
    de68:	e77e      	b.n	dd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000de6a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    de6a:	223e      	movs	r2, #62	; 0x3e
    de6c:	7002      	strb	r2, [r0, #0]
    de6e:	2201      	movs	r2, #1
    de70:	7082      	strb	r2, [r0, #2]
    de72:	790a      	ldrb	r2, [r1, #4]
    de74:	70c2      	strb	r2, [r0, #3]
    de76:	798a      	ldrb	r2, [r1, #6]
    de78:	7102      	strb	r2, [r0, #4]
    de7a:	88ca      	ldrh	r2, [r1, #6]
    de7c:	0a12      	lsrs	r2, r2, #8
    de7e:	7142      	strb	r2, [r0, #5]
    de80:	7a0a      	ldrb	r2, [r1, #8]
    de82:	7182      	strb	r2, [r0, #6]
    de84:	7a4a      	ldrb	r2, [r1, #9]
    de86:	71c2      	strb	r2, [r0, #7]
    de88:	f8d1 200a 	ldr.w	r2, [r1, #10]
    de8c:	6082      	str	r2, [r0, #8]
    de8e:	89ca      	ldrh	r2, [r1, #14]
    de90:	8182      	strh	r2, [r0, #12]
    de92:	7c0a      	ldrb	r2, [r1, #16]
    de94:	7382      	strb	r2, [r0, #14]
    de96:	8a0a      	ldrh	r2, [r1, #16]
    de98:	0a12      	lsrs	r2, r2, #8
    de9a:	73c2      	strb	r2, [r0, #15]
    de9c:	7c8a      	ldrb	r2, [r1, #18]
    de9e:	7402      	strb	r2, [r0, #16]
    dea0:	8a4a      	ldrh	r2, [r1, #18]
    dea2:	0a12      	lsrs	r2, r2, #8
    dea4:	7442      	strb	r2, [r0, #17]
    dea6:	7d0a      	ldrb	r2, [r1, #20]
    dea8:	7482      	strb	r2, [r0, #18]
    deaa:	8a8a      	ldrh	r2, [r1, #20]
    deac:	0a12      	lsrs	r2, r2, #8
    deae:	74c2      	strb	r2, [r0, #19]
    deb0:	7d89      	ldrb	r1, [r1, #22]
    deb2:	7501      	strb	r1, [r0, #20]
    deb4:	2013      	movs	r0, #19
    deb6:	4770      	bx	lr

0000deb8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    deb8:	223e      	movs	r2, #62	; 0x3e
    deba:	7002      	strb	r2, [r0, #0]
    debc:	2201      	movs	r2, #1
    debe:	7082      	strb	r2, [r0, #2]
    dec0:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    dec4:	70c2      	strb	r2, [r0, #3]
    dec6:	788a      	ldrb	r2, [r1, #2]
    dec8:	7102      	strb	r2, [r0, #4]
    deca:	884a      	ldrh	r2, [r1, #2]
    decc:	0a12      	lsrs	r2, r2, #8
    dece:	7142      	strb	r2, [r0, #5]
    ded0:	790a      	ldrb	r2, [r1, #4]
    ded2:	7182      	strb	r2, [r0, #6]
    ded4:	794a      	ldrb	r2, [r1, #5]
    ded6:	71c2      	strb	r2, [r0, #7]
    ded8:	f8d1 2006 	ldr.w	r2, [r1, #6]
    dedc:	6082      	str	r2, [r0, #8]
    dede:	894a      	ldrh	r2, [r1, #10]
    dee0:	8182      	strh	r2, [r0, #12]
    dee2:	7e0a      	ldrb	r2, [r1, #24]
    dee4:	7382      	strb	r2, [r0, #14]
    dee6:	8b0a      	ldrh	r2, [r1, #24]
    dee8:	0a12      	lsrs	r2, r2, #8
    deea:	73c2      	strb	r2, [r0, #15]
    deec:	7e8a      	ldrb	r2, [r1, #26]
    deee:	7402      	strb	r2, [r0, #16]
    def0:	8b4a      	ldrh	r2, [r1, #26]
    def2:	0a12      	lsrs	r2, r2, #8
    def4:	7442      	strb	r2, [r0, #17]
    def6:	7f0a      	ldrb	r2, [r1, #28]
    def8:	7482      	strb	r2, [r0, #18]
    defa:	8b8a      	ldrh	r2, [r1, #28]
    defc:	0a12      	lsrs	r2, r2, #8
    defe:	74c2      	strb	r2, [r0, #19]
    df00:	7f89      	ldrb	r1, [r1, #30]
    df02:	7501      	strb	r1, [r0, #20]
    df04:	2113      	movs	r1, #19
    df06:	7041      	strb	r1, [r0, #1]
    df08:	4608      	mov	r0, r1
    df0a:	4770      	bx	lr

0000df0c <sdc_hci_data_get>:
    df0c:	b510      	push	{r4, lr}
    df0e:	b120      	cbz	r0, df1a <sdc_hci_data_get+0xe>
    df10:	f7ff fd11 	bl	d936 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    df14:	b120      	cbz	r0, df20 <sdc_hci_data_get+0x14>
    df16:	2000      	movs	r0, #0
    df18:	bd10      	pop	{r4, pc}
    df1a:	f06f 0015 	mvn.w	r0, #21
    df1e:	bd10      	pop	{r4, pc}
    df20:	f06f 0022 	mvn.w	r0, #34	; 0x22
    df24:	bd10      	pop	{r4, pc}

0000df26 <sdc_hci_data_put>:
    df26:	b510      	push	{r4, lr}
    df28:	f06f 0415 	mvn.w	r4, #21
    df2c:	b120      	cbz	r0, df38 <sdc_hci_data_put+0x12>
    df2e:	f7ff fd10 	bl	d952 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    df32:	b108      	cbz	r0, df38 <sdc_hci_data_put+0x12>
    df34:	2000      	movs	r0, #0
    df36:	bd10      	pop	{r4, pc}
    df38:	4620      	mov	r0, r4
    df3a:	bd10      	pop	{r4, pc}

0000df3c <sdc_hci_evt_get>:
    df3c:	b510      	push	{r4, lr}
    df3e:	b120      	cbz	r0, df4a <sdc_hci_evt_get+0xe>
    df40:	f7ff fd10 	bl	d964 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    df44:	b120      	cbz	r0, df50 <sdc_hci_evt_get+0x14>
    df46:	2000      	movs	r0, #0
    df48:	bd10      	pop	{r4, pc}
    df4a:	f06f 0015 	mvn.w	r0, #21
    df4e:	bd10      	pop	{r4, pc}
    df50:	f06f 0022 	mvn.w	r0, #34	; 0x22
    df54:	bd10      	pop	{r4, pc}

0000df56 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    df56:	f002 b98e 	b.w	10276 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000df5a <sdc_hci_cmd_cb_read_transmit_power_level>:
    df5a:	f002 b9cd 	b.w	102f8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000df5e <sdc_hci_cmd_cb_set_event_mask>:
    df5e:	b510      	push	{r4, lr}
    df60:	f7f7 f930 	bl	51c4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    df64:	2000      	movs	r0, #0
    df66:	bd10      	pop	{r4, pc}

0000df68 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    df68:	b510      	push	{r4, lr}
    df6a:	f7f7 f939 	bl	51e0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    df6e:	2000      	movs	r0, #0
    df70:	bd10      	pop	{r4, pc}

0000df72 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    df72:	f002 b9dd 	b.w	10330 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000df76 <sdc_hci_cmd_vs_conn_event_extend>:
    df76:	b508      	push	{r3, lr}
    df78:	7800      	ldrb	r0, [r0, #0]
    df7a:	f88d 0000 	strb.w	r0, [sp]
    df7e:	4668      	mov	r0, sp
    df80:	f002 f94b 	bl	1021a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    df84:	bd08      	pop	{r3, pc}

0000df86 <sdc_hci_cmd_vs_conn_update>:
    df86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    df88:	2100      	movs	r1, #0
    df8a:	9100      	str	r1, [sp, #0]
    df8c:	9101      	str	r1, [sp, #4]
    df8e:	9102      	str	r1, [sp, #8]
    df90:	9103      	str	r1, [sp, #12]
    df92:	f8d0 1002 	ldr.w	r1, [r0, #2]
    df96:	f641 524c 	movw	r2, #7500	; 0x1d4c
    df9a:	4291      	cmp	r1, r2
    df9c:	d304      	bcc.n	dfa8 <sdc_hci_cmd_vs_conn_update+0x22>
    df9e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    dfa2:	fbb1 f1f2 	udiv	r1, r1, r2
    dfa6:	e005      	b.n	dfb4 <sdc_hci_cmd_vs_conn_update+0x2e>
    dfa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    dfac:	fbb1 f1f2 	udiv	r1, r1, r2
    dfb0:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    dfb4:	8802      	ldrh	r2, [r0, #0]
    dfb6:	b289      	uxth	r1, r1
    dfb8:	f8ad 2000 	strh.w	r2, [sp]
    dfbc:	f8ad 1002 	strh.w	r1, [sp, #2]
    dfc0:	f8ad 1004 	strh.w	r1, [sp, #4]
    dfc4:	88c1      	ldrh	r1, [r0, #6]
    dfc6:	f8ad 1006 	strh.w	r1, [sp, #6]
    dfca:	8900      	ldrh	r0, [r0, #8]
    dfcc:	f8ad 0008 	strh.w	r0, [sp, #8]
    dfd0:	4668      	mov	r0, sp
    dfd2:	f001 fed9 	bl	fd88 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    dfd6:	b004      	add	sp, #16
    dfd8:	bd10      	pop	{r4, pc}

0000dfda <sdc_hci_cmd_vs_event_length_set>:
    dfda:	f7fd be43 	b.w	bc64 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000dfde <sdc_hci_cmd_vs_llpm_mode_set>:
    dfde:	2001      	movs	r0, #1
    dfe0:	4770      	bx	lr

0000dfe2 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    dfe2:	7800      	ldrb	r0, [r0, #0]
    dfe4:	b100      	cbz	r0, dfe8 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    dfe6:	2001      	movs	r0, #1
    dfe8:	f002 b8ef 	b.w	101ca <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000dfec <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    dfec:	b570      	push	{r4, r5, r6, lr}
    dfee:	4605      	mov	r5, r0
    dff0:	2210      	movs	r2, #16
    dff2:	2100      	movs	r1, #0
    dff4:	f7ff fbee 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    dff8:	2210      	movs	r2, #16
    dffa:	2100      	movs	r1, #0
    dffc:	f105 0010 	add.w	r0, r5, #16
    e000:	f7ff fbe8 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e004:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    e008:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    e00c:	1c40      	adds	r0, r0, #1
    e00e:	d10b      	bne.n	e028 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e010:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e014:	1c40      	adds	r0, r0, #1
    e016:	d107      	bne.n	e028 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e018:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    e01c:	1c40      	adds	r0, r0, #1
    e01e:	d103      	bne.n	e028 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    e020:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    e024:	1c40      	adds	r0, r0, #1
    e026:	d00b      	beq.n	e040 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    e028:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    e02c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    e030:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    e034:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    e038:	612a      	str	r2, [r5, #16]
    e03a:	6168      	str	r0, [r5, #20]
    e03c:	61a9      	str	r1, [r5, #24]
    e03e:	61eb      	str	r3, [r5, #28]
    e040:	2000      	movs	r0, #0
    e042:	f7f7 fdbb 	bl	5bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e046:	b918      	cbnz	r0, e050 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    e048:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    e04c:	07c0      	lsls	r0, r0, #31
    e04e:	d118      	bne.n	e082 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e050:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    e054:	1c40      	adds	r0, r0, #1
    e056:	d10b      	bne.n	e070 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e058:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    e05c:	1c40      	adds	r0, r0, #1
    e05e:	d107      	bne.n	e070 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e060:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    e064:	1c40      	adds	r0, r0, #1
    e066:	d103      	bne.n	e070 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    e068:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    e06c:	1c40      	adds	r0, r0, #1
    e06e:	d008      	beq.n	e082 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    e070:	f854 0f90 	ldr.w	r0, [r4, #144]!
    e074:	6861      	ldr	r1, [r4, #4]
    e076:	68a2      	ldr	r2, [r4, #8]
    e078:	68e3      	ldr	r3, [r4, #12]
    e07a:	6028      	str	r0, [r5, #0]
    e07c:	6069      	str	r1, [r5, #4]
    e07e:	60aa      	str	r2, [r5, #8]
    e080:	60eb      	str	r3, [r5, #12]
    e082:	2000      	movs	r0, #0
    e084:	bd70      	pop	{r4, r5, r6, pc}

0000e086 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    e086:	b538      	push	{r3, r4, r5, lr}
    e088:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    e08c:	4604      	mov	r4, r0
    e08e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e092:	1c40      	adds	r0, r0, #1
    e094:	d105      	bne.n	e0a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    e096:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    e09a:	43c0      	mvns	r0, r0
    e09c:	0400      	lsls	r0, r0, #16
    e09e:	0c00      	lsrs	r0, r0, #16
    e0a0:	d03e      	beq.n	e120 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e0a2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    e0a6:	07c0      	lsls	r0, r0, #31
    e0a8:	d03a      	beq.n	e120 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    e0aa:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    e0ae:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    e0b2:	f8ad 1000 	strh.w	r1, [sp]
    e0b6:	f8c4 0001 	str.w	r0, [r4, #1]
    e0ba:	f8bd 0000 	ldrh.w	r0, [sp]
    e0be:	f8a4 0005 	strh.w	r0, [r4, #5]
    e0c2:	79a0      	ldrb	r0, [r4, #6]
    e0c4:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    e0c8:	71a0      	strb	r0, [r4, #6]
    e0ca:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    e0ce:	1c40      	adds	r0, r0, #1
    e0d0:	d00f      	beq.n	e0f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e0d2:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    e0d6:	1c40      	adds	r0, r0, #1
    e0d8:	d00b      	beq.n	e0f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e0da:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    e0de:	1c40      	adds	r0, r0, #1
    e0e0:	d007      	beq.n	e0f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e0e2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    e0e6:	1c40      	adds	r0, r0, #1
    e0e8:	d003      	beq.n	e0f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    e0ea:	2000      	movs	r0, #0
    e0ec:	f7f7 fd66 	bl	5bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    e0f0:	b140      	cbz	r0, e104 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    e0f2:	2210      	movs	r2, #16
    e0f4:	2100      	movs	r1, #0
    e0f6:	1de0      	adds	r0, r4, #7
    e0f8:	f7ff fb6c 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e0fc:	2001      	movs	r0, #1
    e0fe:	7020      	strb	r0, [r4, #0]
    e100:	2000      	movs	r0, #0
    e102:	bd38      	pop	{r3, r4, r5, pc}
    e104:	f855 2f90 	ldr.w	r2, [r5, #144]!
    e108:	6869      	ldr	r1, [r5, #4]
    e10a:	68a8      	ldr	r0, [r5, #8]
    e10c:	68eb      	ldr	r3, [r5, #12]
    e10e:	f8c4 2007 	str.w	r2, [r4, #7]
    e112:	f8c4 100b 	str.w	r1, [r4, #11]
    e116:	f8c4 000f 	str.w	r0, [r4, #15]
    e11a:	f8c4 3013 	str.w	r3, [r4, #19]
    e11e:	e7ed      	b.n	e0fc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    e120:	2000      	movs	r0, #0
    e122:	e7ec      	b.n	e0fe <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000e124 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    e124:	f002 b86b 	b.w	101fe <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000e128 <sdc_hci_cmd_ip_read_bd_addr>:
    e128:	f002 b8b6 	b.w	10298 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000e12c <sdc_hci_cmd_ip_read_local_version_information>:
    e12c:	f7fd bde6 	b.w	bcfc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000e130 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    e130:	f001 bde1 	b.w	fcf6 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000e134 <sdc_hci_cmd_le_add_device_to_white_list>:
    e134:	f001 bdfa 	b.w	fd2c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000e138 <sdc_hci_cmd_le_clear_resolving_list>:
    e138:	f001 be0f 	b.w	fd5a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000e13c <sdc_hci_cmd_le_clear_white_list>:
    e13c:	f001 be1a 	b.w	fd74 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000e140 <sdc_hci_cmd_le_conn_update>:
    e140:	f001 be22 	b.w	fd88 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000e144 <sdc_hci_cmd_le_create_conn>:
    e144:	f7fd bb30 	b.w	b7a8 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000e148 <sdc_hci_cmd_le_create_conn_cancel>:
    e148:	f001 be60 	b.w	fe0c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000e14c <sdc_hci_cmd_le_enable_encryption>:
    e14c:	f001 bff4 	b.w	10138 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000e150 <sdc_hci_cmd_le_encrypt>:
    e150:	f001 be84 	b.w	fe5c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000e154 <sdc_hci_cmd_le_rand>:
    e154:	f001 be8b 	b.w	fe6e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000e158 <sdc_hci_cmd_le_read_buffer_size>:
    e158:	f7fd bb80 	b.w	b85c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000e15c <sdc_hci_cmd_le_read_channel_map>:
    e15c:	f7fd bb88 	b.w	b870 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000e160 <sdc_hci_cmd_le_read_max_data_length>:
    e160:	f001 be8b 	b.w	fe7a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000e164 <sdc_hci_cmd_le_read_phy>:
    e164:	f001 be99 	b.w	fe9a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000e168 <sdc_hci_cmd_le_read_remote_features>:
    e168:	f7fd bbac 	b.w	b8c4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000e16c <sdc_hci_cmd_le_read_resolving_list_size>:
    e16c:	f001 bec0 	b.w	fef0 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000e170 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    e170:	f7fd bbcc 	b.w	b90c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000e174 <sdc_hci_cmd_le_read_transmit_power>:
    e174:	f001 bec0 	b.w	fef8 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000e178 <sdc_hci_cmd_le_read_white_list_size>:
    e178:	f001 bec7 	b.w	ff0a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000e17c <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    e17c:	f001 bec9 	b.w	ff12 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000e180 <sdc_hci_cmd_le_remove_device_from_white_list>:
    e180:	f001 bee0 	b.w	ff44 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000e184 <sdc_hci_cmd_le_set_address_resolution_enable>:
    e184:	f001 bef3 	b.w	ff6e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000e188 <sdc_hci_cmd_le_set_data_length>:
    e188:	f001 beff 	b.w	ff8a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000e18c <sdc_hci_cmd_le_set_default_phy>:
    e18c:	f7fd bbce 	b.w	b92c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000e190 <sdc_hci_cmd_le_set_event_mask>:
    e190:	b510      	push	{r4, lr}
    e192:	f7f7 f811 	bl	51b8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    e196:	2000      	movs	r0, #0
    e198:	bd10      	pop	{r4, pc}

0000e19a <sdc_hci_cmd_le_set_host_channel_classification>:
    e19a:	f001 bf1d 	b.w	ffd8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000e19e <sdc_hci_cmd_le_set_phy>:
    e19e:	f001 bf3b 	b.w	10018 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000e1a2 <sdc_hci_cmd_le_set_privacy_mode>:
    e1a2:	f001 bf59 	b.w	10058 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000e1a6 <sdc_hci_cmd_le_set_random_address>:
    e1a6:	f001 bf6d 	b.w	10084 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000e1aa <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    e1aa:	f001 bf79 	b.w	100a0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000e1ae <sdc_hci_cmd_le_set_scan_enable>:
    e1ae:	f001 bf80 	b.w	100b2 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000e1b2 <sdc_hci_cmd_le_set_scan_params>:
    e1b2:	f001 bf94 	b.w	100de <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000e1b6 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    e1b6:	f001 bff1 	b.w	1019c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000e1ba <sdc_hci_cmd_lc_disconnect>:
    e1ba:	f001 bd4b 	b.w	fc54 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000e1be <sdc_hci_cmd_lc_read_remote_version_information>:
    e1be:	f002 b877 	b.w	102b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    e1c2:	b570      	push	{r4, r5, r6, lr}
    e1c4:	880b      	ldrh	r3, [r1, #0]
    e1c6:	7f04      	ldrb	r4, [r0, #28]
    e1c8:	f100 0524 	add.w	r5, r0, #36	; 0x24
    e1cc:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    e1d0:	8802      	ldrh	r2, [r0, #0]
    e1d2:	4435      	add	r5, r6
    e1d4:	1da4      	adds	r4, r4, #6
    e1d6:	882d      	ldrh	r5, [r5, #0]
    e1d8:	4422      	add	r2, r4
    e1da:	b292      	uxth	r2, r2
    e1dc:	4425      	add	r5, r4
    e1de:	1e54      	subs	r4, r2, #1
    e1e0:	442c      	add	r4, r5
    e1e2:	fb94 f4f2 	sdiv	r4, r4, r2
    e1e6:	fb02 6204 	mla	r2, r2, r4, r6
    e1ea:	8840      	ldrh	r0, [r0, #2]
    e1ec:	b292      	uxth	r2, r2
    e1ee:	4290      	cmp	r0, r2
    e1f0:	d903      	bls.n	e1fa <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    e1f2:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    e1f6:	4310      	orrs	r0, r2
    e1f8:	e002      	b.n	e200 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    e1fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    e1fe:	4398      	bics	r0, r3
    e200:	8008      	strh	r0, [r1, #0]
    e202:	bd70      	pop	{r4, r5, r6, pc}
    e204:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    e208:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e20c:	429a      	cmp	r2, r3
    e20e:	d107      	bne.n	e220 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    e210:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    e214:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    e218:	4288      	cmp	r0, r1
    e21a:	d001      	beq.n	e220 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    e21c:	2001      	movs	r0, #1
    e21e:	4770      	bx	lr
    e220:	2000      	movs	r0, #0
    e222:	4770      	bx	lr

0000e224 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    e224:	b570      	push	{r4, r5, r6, lr}
    e226:	7f00      	ldrb	r0, [r0, #28]
    e228:	461c      	mov	r4, r3
    e22a:	1d80      	adds	r0, r0, #6
    e22c:	4408      	add	r0, r1
    e22e:	4613      	mov	r3, r2
    e230:	8809      	ldrh	r1, [r1, #0]
    e232:	9a04      	ldr	r2, [sp, #16]
    e234:	1cc9      	adds	r1, r1, #3
    e236:	b289      	uxth	r1, r1
    e238:	1915      	adds	r5, r2, r4
    e23a:	1ec0      	subs	r0, r0, #3
    e23c:	428d      	cmp	r5, r1
    e23e:	d805      	bhi.n	e24c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    e240:	1881      	adds	r1, r0, r2
    e242:	4622      	mov	r2, r4
    e244:	4618      	mov	r0, r3
    e246:	f7ff fa4b 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e24a:	e000      	b.n	e24e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    e24c:	2400      	movs	r4, #0
    e24e:	4620      	mov	r0, r4
    e250:	bd70      	pop	{r4, r5, r6, pc}

0000e252 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    e252:	b570      	push	{r4, r5, r6, lr}
    e254:	7f00      	ldrb	r0, [r0, #28]
    e256:	461c      	mov	r4, r3
    e258:	1d80      	adds	r0, r0, #6
    e25a:	4408      	add	r0, r1
    e25c:	4613      	mov	r3, r2
    e25e:	8809      	ldrh	r1, [r1, #0]
    e260:	9a04      	ldr	r2, [sp, #16]
    e262:	1cc9      	adds	r1, r1, #3
    e264:	b289      	uxth	r1, r1
    e266:	1915      	adds	r5, r2, r4
    e268:	1ec0      	subs	r0, r0, #3
    e26a:	428d      	cmp	r5, r1
    e26c:	d805      	bhi.n	e27a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    e26e:	4410      	add	r0, r2
    e270:	4622      	mov	r2, r4
    e272:	4619      	mov	r1, r3
    e274:	f7ff fa34 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e278:	e000      	b.n	e27c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    e27a:	2400      	movs	r4, #0
    e27c:	4620      	mov	r0, r4
    e27e:	bd70      	pop	{r4, r5, r6, pc}

0000e280 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    e280:	8881      	ldrh	r1, [r0, #4]
    e282:	88c0      	ldrh	r0, [r0, #6]
    e284:	4288      	cmp	r0, r1
    e286:	d101      	bne.n	e28c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    e288:	2001      	movs	r0, #1
    e28a:	4770      	bx	lr
    e28c:	2000      	movs	r0, #0
    e28e:	4770      	bx	lr

0000e290 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    e290:	8881      	ldrh	r1, [r0, #4]
    e292:	8900      	ldrh	r0, [r0, #8]
    e294:	4288      	cmp	r0, r1
    e296:	d101      	bne.n	e29c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    e298:	2001      	movs	r0, #1
    e29a:	4770      	bx	lr
    e29c:	2000      	movs	r0, #0
    e29e:	4770      	bx	lr

0000e2a0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    e2a0:	b570      	push	{r4, r5, r6, lr}
    e2a2:	4604      	mov	r4, r0
    e2a4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e2a8:	8880      	ldrh	r0, [r0, #4]
    e2aa:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e2ae:	4401      	add	r1, r0
    e2b0:	8a20      	ldrh	r0, [r4, #16]
    e2b2:	2800      	cmp	r0, #0
    e2b4:	d01a      	beq.n	e2ec <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    e2b6:	89a2      	ldrh	r2, [r4, #12]
    e2b8:	2500      	movs	r5, #0
    e2ba:	4410      	add	r0, r2
    e2bc:	b280      	uxth	r0, r0
    e2be:	81a0      	strh	r0, [r4, #12]
    e2c0:	880a      	ldrh	r2, [r1, #0]
    e2c2:	4290      	cmp	r0, r2
    e2c4:	d905      	bls.n	e2d2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    e2c6:	f240 1163 	movw	r1, #355	; 0x163
    e2ca:	f04f 0014 	mov.w	r0, #20
    e2ce:	f7f6 fdf7 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e2d2:	d109      	bne.n	e2e8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    e2d4:	69a0      	ldr	r0, [r4, #24]
    e2d6:	b108      	cbz	r0, e2dc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    e2d8:	7f40      	ldrb	r0, [r0, #29]
    e2da:	7088      	strb	r0, [r1, #2]
    e2dc:	f104 0104 	add.w	r1, r4, #4
    e2e0:	4620      	mov	r0, r4
    e2e2:	f7ff ff6e 	bl	e1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e2e6:	81a5      	strh	r5, [r4, #12]
    e2e8:	8225      	strh	r5, [r4, #16]
    e2ea:	2001      	movs	r0, #1
    e2ec:	bd70      	pop	{r4, r5, r6, pc}

0000e2ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    e2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e2f0:	4604      	mov	r4, r0
    e2f2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    e2f6:	88c0      	ldrh	r0, [r0, #6]
    e2f8:	460e      	mov	r6, r1
    e2fa:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e2fe:	8a60      	ldrh	r0, [r4, #18]
    e300:	19d9      	adds	r1, r3, r7
    e302:	b108      	cbz	r0, e308 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    e304:	42b0      	cmp	r0, r6
    e306:	d201      	bcs.n	e30c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    e308:	2000      	movs	r0, #0
    e30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e30c:	89e0      	ldrh	r0, [r4, #14]
    e30e:	2500      	movs	r5, #0
    e310:	b140      	cbz	r0, e324 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    e312:	f8b1 c000 	ldrh.w	ip, [r1]
    e316:	4560      	cmp	r0, ip
    e318:	d008      	beq.n	e32c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    e31a:	f240 214b 	movw	r1, #587	; 0x24b
    e31e:	2014      	movs	r0, #20
    e320:	f7f6 fdce 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e324:	7f60      	ldrb	r0, [r4, #29]
    e326:	7088      	strb	r0, [r1, #2]
    e328:	800d      	strh	r5, [r1, #0]
    e32a:	e00e      	b.n	e34a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    e32c:	f894 c01c 	ldrb.w	ip, [r4, #28]
    e330:	4418      	add	r0, r3
    e332:	f10c 0c06 	add.w	ip, ip, #6
    e336:	44bc      	add	ip, r7
    e338:	4460      	add	r0, ip
    e33a:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    e33e:	f820 cc03 	strh.w	ip, [r0, #-3]
    e342:	f894 c020 	ldrb.w	ip, [r4, #32]
    e346:	f800 cc01 	strb.w	ip, [r0, #-1]
    e34a:	89e0      	ldrh	r0, [r4, #14]
    e34c:	4430      	add	r0, r6
    e34e:	81e0      	strh	r0, [r4, #14]
    e350:	8808      	ldrh	r0, [r1, #0]
    e352:	4430      	add	r0, r6
    e354:	8008      	strh	r0, [r1, #0]
    e356:	b19a      	cbz	r2, e380 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    e358:	1da1      	adds	r1, r4, #6
    e35a:	4620      	mov	r0, r4
    e35c:	f7ff ff31 	bl	e1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e360:	81e5      	strh	r5, [r4, #14]
    e362:	7f60      	ldrb	r0, [r4, #29]
    e364:	1c40      	adds	r0, r0, #1
    e366:	7760      	strb	r0, [r4, #29]
    e368:	7da0      	ldrb	r0, [r4, #22]
    e36a:	f88d 0000 	strb.w	r0, [sp]
    e36e:	9800      	ldr	r0, [sp, #0]
    e370:	9000      	str	r0, [sp, #0]
    e372:	f89d 0000 	ldrb.w	r0, [sp]
    e376:	b178      	cbz	r0, e398 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e378:	88e0      	ldrh	r0, [r4, #6]
    e37a:	82a0      	strh	r0, [r4, #20]
    e37c:	75a5      	strb	r5, [r4, #22]
    e37e:	e00b      	b.n	e398 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    e380:	7f20      	ldrb	r0, [r4, #28]
    e382:	89e1      	ldrh	r1, [r4, #14]
    e384:	1d80      	adds	r0, r0, #6
    e386:	4438      	add	r0, r7
    e388:	4419      	add	r1, r3
    e38a:	4408      	add	r0, r1
    e38c:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    e390:	83e1      	strh	r1, [r4, #30]
    e392:	7880      	ldrb	r0, [r0, #2]
    e394:	f884 0020 	strb.w	r0, [r4, #32]
    e398:	8265      	strh	r5, [r4, #18]
    e39a:	2001      	movs	r0, #1
    e39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e39e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    e39e:	1cc0      	adds	r0, r0, #3
    e3a0:	4770      	bx	lr

0000e3a2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    e3a2:	b510      	push	{r4, lr}
    e3a4:	88c2      	ldrh	r2, [r0, #6]
    e3a6:	8943      	ldrh	r3, [r0, #10]
    e3a8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    e3ac:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    e3b0:	1a61      	subs	r1, r4, r1
    e3b2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    e3b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    e3ba:	429a      	cmp	r2, r3
    e3bc:	d101      	bne.n	e3c2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    e3be:	8842      	ldrh	r2, [r0, #2]
    e3c0:	4411      	add	r1, r2
    e3c2:	7f02      	ldrb	r2, [r0, #28]
    e3c4:	8800      	ldrh	r0, [r0, #0]
    e3c6:	4410      	add	r0, r2
    e3c8:	1d80      	adds	r0, r0, #6
    e3ca:	b280      	uxth	r0, r0
    e3cc:	fb91 f0f0 	sdiv	r0, r1, r0
    e3d0:	b280      	uxth	r0, r0
    e3d2:	bd10      	pop	{r4, pc}

0000e3d4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    e3d4:	b510      	push	{r4, lr}
    e3d6:	4604      	mov	r4, r0
    e3d8:	88c0      	ldrh	r0, [r0, #6]
    e3da:	88a1      	ldrh	r1, [r4, #4]
    e3dc:	4281      	cmp	r1, r0
    e3de:	d007      	beq.n	e3f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e3e0:	89a0      	ldrh	r0, [r4, #12]
    e3e2:	b928      	cbnz	r0, e3f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e3e4:	8a20      	ldrh	r0, [r4, #16]
    e3e6:	b918      	cbnz	r0, e3f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    e3e8:	88a0      	ldrh	r0, [r4, #4]
    e3ea:	8aa1      	ldrh	r1, [r4, #20]
    e3ec:	4288      	cmp	r0, r1
    e3ee:	d101      	bne.n	e3f4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    e3f0:	2000      	movs	r0, #0
    e3f2:	bd10      	pop	{r4, pc}
    e3f4:	1d21      	adds	r1, r4, #4
    e3f6:	4620      	mov	r0, r4
    e3f8:	f7ff fee3 	bl	e1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e3fc:	2000      	movs	r0, #0
    e3fe:	8220      	strh	r0, [r4, #16]
    e400:	2001      	movs	r0, #1
    e402:	bd10      	pop	{r4, pc}

0000e404 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    e404:	b510      	push	{r4, lr}
    e406:	4604      	mov	r4, r0
    e408:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e40c:	88c0      	ldrh	r0, [r0, #6]
    e40e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e412:	4402      	add	r2, r0
    e414:	8820      	ldrh	r0, [r4, #0]
    e416:	2845      	cmp	r0, #69	; 0x45
    e418:	d200      	bcs.n	e41c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    e41a:	2045      	movs	r0, #69	; 0x45
    e41c:	4288      	cmp	r0, r1
    e41e:	d204      	bcs.n	e42a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    e420:	f240 1119 	movw	r1, #281	; 0x119
    e424:	2014      	movs	r0, #20
    e426:	f7f6 fd4b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e42a:	7de0      	ldrb	r0, [r4, #23]
    e42c:	2800      	cmp	r0, #0
    e42e:	d003      	beq.n	e438 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    e430:	8810      	ldrh	r0, [r2, #0]
    e432:	4288      	cmp	r0, r1
    e434:	d201      	bcs.n	e43a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    e436:	2000      	movs	r0, #0
    e438:	bd10      	pop	{r4, pc}
    e43a:	8011      	strh	r1, [r2, #0]
    e43c:	1da1      	adds	r1, r4, #6
    e43e:	4620      	mov	r0, r4
    e440:	f7ff febf 	bl	e1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e444:	2000      	movs	r0, #0
    e446:	75e0      	strb	r0, [r4, #23]
    e448:	2001      	movs	r0, #1
    e44a:	bd10      	pop	{r4, pc}

0000e44c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    e44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e450:	8941      	ldrh	r1, [r0, #10]
    e452:	8886      	ldrh	r6, [r0, #4]
    e454:	4604      	mov	r4, r0
    e456:	2500      	movs	r5, #0
    e458:	f100 070a 	add.w	r7, r0, #10
    e45c:	e006      	b.n	e46c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    e45e:	4639      	mov	r1, r7
    e460:	4620      	mov	r0, r4
    e462:	f7ff feae 	bl	e1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e466:	1c6d      	adds	r5, r5, #1
    e468:	8961      	ldrh	r1, [r4, #10]
    e46a:	b2ad      	uxth	r5, r5
    e46c:	42b1      	cmp	r1, r6
    e46e:	d1f6      	bne.n	e45e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    e470:	4628      	mov	r0, r5
    e472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e476 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    e476:	b530      	push	{r4, r5, lr}
    e478:	88c4      	ldrh	r4, [r0, #6]
    e47a:	8881      	ldrh	r1, [r0, #4]
    e47c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e480:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e484:	4413      	add	r3, r2
    e486:	8882      	ldrh	r2, [r0, #4]
    e488:	8a85      	ldrh	r5, [r0, #20]
    e48a:	42aa      	cmp	r2, r5
    e48c:	d012      	beq.n	e4b4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e48e:	42a1      	cmp	r1, r4
    e490:	d010      	beq.n	e4b4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e492:	8981      	ldrh	r1, [r0, #12]
    e494:	b971      	cbnz	r1, e4b4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    e496:	6982      	ldr	r2, [r0, #24]
    e498:	b172      	cbz	r2, e4b8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e49a:	4610      	mov	r0, r2
    e49c:	f7ff fef8 	bl	e290 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    e4a0:	b950      	cbnz	r0, e4b8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e4a2:	8910      	ldrh	r0, [r2, #8]
    e4a4:	3224      	adds	r2, #36	; 0x24
    e4a6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    e4aa:	4410      	add	r0, r2
    e4ac:	7899      	ldrb	r1, [r3, #2]
    e4ae:	7880      	ldrb	r0, [r0, #2]
    e4b0:	4288      	cmp	r0, r1
    e4b2:	d101      	bne.n	e4b8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    e4b4:	2000      	movs	r0, #0
    e4b6:	bd30      	pop	{r4, r5, pc}
    e4b8:	4618      	mov	r0, r3
    e4ba:	bd30      	pop	{r4, r5, pc}

0000e4bc <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    e4bc:	8803      	ldrh	r3, [r0, #0]
    e4be:	2b45      	cmp	r3, #69	; 0x45
    e4c0:	d200      	bcs.n	e4c4 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    e4c2:	2345      	movs	r3, #69	; 0x45
    e4c4:	8013      	strh	r3, [r2, #0]
    e4c6:	88c2      	ldrh	r2, [r0, #6]
    e4c8:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    e4cc:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e4d0:	441a      	add	r2, r3
    e4d2:	600a      	str	r2, [r1, #0]
    e4d4:	89c0      	ldrh	r0, [r0, #14]
    e4d6:	4770      	bx	lr

0000e4d8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    e4d8:	7f00      	ldrb	r0, [r0, #28]
    e4da:	1d80      	adds	r0, r0, #6
    e4dc:	4408      	add	r0, r1
    e4de:	1ec0      	subs	r0, r0, #3
    e4e0:	6010      	str	r0, [r2, #0]
    e4e2:	8808      	ldrh	r0, [r1, #0]
    e4e4:	4770      	bx	lr

0000e4e6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    e4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e4ea:	460e      	mov	r6, r1
    e4ec:	88c1      	ldrh	r1, [r0, #6]
    e4ee:	8902      	ldrh	r2, [r0, #8]
    e4f0:	4604      	mov	r4, r0
    e4f2:	f100 0824 	add.w	r8, r0, #36	; 0x24
    e4f6:	8800      	ldrh	r0, [r0, #0]
    e4f8:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    e4fc:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    e500:	2845      	cmp	r0, #69	; 0x45
    e502:	d200      	bcs.n	e506 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    e504:	2045      	movs	r0, #69	; 0x45
    e506:	42b0      	cmp	r0, r6
    e508:	d203      	bcs.n	e512 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    e50a:	21db      	movs	r1, #219	; 0xdb
    e50c:	2014      	movs	r0, #20
    e50e:	f7f6 fcd7 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e512:	4610      	mov	r0, r2
    e514:	f7ff fe76 	bl	e204 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e518:	b110      	cbz	r0, e520 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    e51a:	2000      	movs	r0, #0
    e51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e520:	42af      	cmp	r7, r5
    e522:	d908      	bls.n	e536 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e524:	7f21      	ldrb	r1, [r4, #28]
    e526:	1b78      	subs	r0, r7, r5
    e528:	1a40      	subs	r0, r0, r1
    e52a:	1f80      	subs	r0, r0, #6
    e52c:	4286      	cmp	r6, r0
    e52e:	dd02      	ble.n	e536 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    e530:	2000      	movs	r0, #0
    e532:	75e0      	strb	r0, [r4, #23]
    e534:	e7f1      	b.n	e51a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    e536:	eb08 0005 	add.w	r0, r8, r5
    e53a:	2101      	movs	r1, #1
    e53c:	8006      	strh	r6, [r0, #0]
    e53e:	75e1      	strb	r1, [r4, #23]
    e540:	e7ec      	b.n	e51c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000e542 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    e542:	b538      	push	{r3, r4, r5, lr}
    e544:	88c4      	ldrh	r4, [r0, #6]
    e546:	8881      	ldrh	r1, [r0, #4]
    e548:	f100 0224 	add.w	r2, r0, #36	; 0x24
    e54c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    e550:	441a      	add	r2, r3
    e552:	42a1      	cmp	r1, r4
    e554:	d010      	beq.n	e578 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e556:	8983      	ldrh	r3, [r0, #12]
    e558:	8a05      	ldrh	r5, [r0, #16]
    e55a:	8812      	ldrh	r2, [r2, #0]
    e55c:	442b      	add	r3, r5
    e55e:	4293      	cmp	r3, r2
    e560:	d308      	bcc.n	e574 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    e562:	f8ad 1000 	strh.w	r1, [sp]
    e566:	4669      	mov	r1, sp
    e568:	f7ff fe2b 	bl	e1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e56c:	f8bd 0000 	ldrh.w	r0, [sp]
    e570:	42a0      	cmp	r0, r4
    e572:	d001      	beq.n	e578 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    e574:	2001      	movs	r0, #1
    e576:	bd38      	pop	{r3, r4, r5, pc}
    e578:	2000      	movs	r0, #0
    e57a:	bd38      	pop	{r3, r4, r5, pc}

0000e57c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    e57c:	b570      	push	{r4, r5, r6, lr}
    e57e:	88c6      	ldrh	r6, [r0, #6]
    e580:	8885      	ldrh	r5, [r0, #4]
    e582:	4603      	mov	r3, r0
    e584:	f100 0424 	add.w	r4, r0, #36	; 0x24
    e588:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    e58c:	4420      	add	r0, r4
    e58e:	42b5      	cmp	r5, r6
    e590:	d102      	bne.n	e598 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    e592:	2000      	movs	r0, #0
    e594:	8218      	strh	r0, [r3, #16]
    e596:	bd70      	pop	{r4, r5, r6, pc}
    e598:	8804      	ldrh	r4, [r0, #0]
    e59a:	899d      	ldrh	r5, [r3, #12]
    e59c:	7f1e      	ldrb	r6, [r3, #28]
    e59e:	1b64      	subs	r4, r4, r5
    e5a0:	4435      	add	r5, r6
    e5a2:	4428      	add	r0, r5
    e5a4:	880d      	ldrh	r5, [r1, #0]
    e5a6:	b2a4      	uxth	r4, r4
    e5a8:	1cc0      	adds	r0, r0, #3
    e5aa:	42a5      	cmp	r5, r4
    e5ac:	d900      	bls.n	e5b0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    e5ae:	800c      	strh	r4, [r1, #0]
    e5b0:	899c      	ldrh	r4, [r3, #12]
    e5b2:	b124      	cbz	r4, e5be <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    e5b4:	2400      	movs	r4, #0
    e5b6:	7014      	strb	r4, [r2, #0]
    e5b8:	8809      	ldrh	r1, [r1, #0]
    e5ba:	8219      	strh	r1, [r3, #16]
    e5bc:	bd70      	pop	{r4, r5, r6, pc}
    e5be:	2401      	movs	r4, #1
    e5c0:	e7f9      	b.n	e5b6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000e5c2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    e5c2:	b508      	push	{r3, lr}
    e5c4:	8a81      	ldrh	r1, [r0, #20]
    e5c6:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e5ca:	3aff      	subs	r2, #255	; 0xff
    e5cc:	d008      	beq.n	e5e0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    e5ce:	7d82      	ldrb	r2, [r0, #22]
    e5d0:	f88d 2000 	strb.w	r2, [sp]
    e5d4:	9a00      	ldr	r2, [sp, #0]
    e5d6:	9200      	str	r2, [sp, #0]
    e5d8:	f89d 2000 	ldrb.w	r2, [sp]
    e5dc:	b952      	cbnz	r2, e5f4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e5de:	e004      	b.n	e5ea <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    e5e0:	f44f 7162 	mov.w	r1, #904	; 0x388
    e5e4:	2014      	movs	r0, #20
    e5e6:	f7f6 fc6b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5ea:	8880      	ldrh	r0, [r0, #4]
    e5ec:	4281      	cmp	r1, r0
    e5ee:	d101      	bne.n	e5f4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    e5f0:	2000      	movs	r0, #0
    e5f2:	bd08      	pop	{r3, pc}
    e5f4:	2001      	movs	r0, #1
    e5f6:	bd08      	pop	{r3, pc}

0000e5f8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    e5f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e5fc:	8281      	strh	r1, [r0, #20]
    e5fe:	2100      	movs	r1, #0
    e600:	7581      	strb	r1, [r0, #22]
    e602:	4770      	bx	lr

0000e604 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    e604:	b510      	push	{r4, lr}
    e606:	8a81      	ldrh	r1, [r0, #20]
    e608:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    e60c:	3aff      	subs	r2, #255	; 0xff
    e60e:	d004      	beq.n	e61a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    e610:	f44f 7159 	mov.w	r1, #868	; 0x364
    e614:	2014      	movs	r0, #20
    e616:	f7f6 fc53 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e61a:	88c1      	ldrh	r1, [r0, #6]
    e61c:	8281      	strh	r1, [r0, #20]
    e61e:	89c1      	ldrh	r1, [r0, #14]
    e620:	b109      	cbz	r1, e626 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    e622:	2101      	movs	r1, #1
    e624:	e000      	b.n	e628 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    e626:	2100      	movs	r1, #0
    e628:	7581      	strb	r1, [r0, #22]
    e62a:	bd10      	pop	{r4, pc}

0000e62c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    e62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e630:	461d      	mov	r5, r3
    e632:	4616      	mov	r6, r2
    e634:	9f06      	ldr	r7, [sp, #24]
    e636:	460b      	mov	r3, r1
    e638:	4604      	mov	r4, r0
    e63a:	463a      	mov	r2, r7
    e63c:	4629      	mov	r1, r5
    e63e:	4630      	mov	r0, r6
    e640:	f000 f84f 	bl	e6e2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e644:	4283      	cmp	r3, r0
    e646:	d201      	bcs.n	e64c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    e648:	21a8      	movs	r1, #168	; 0xa8
    e64a:	e018      	b.n	e67e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e64c:	1ce0      	adds	r0, r4, #3
    e64e:	f020 0103 	bic.w	r1, r0, #3
    e652:	4620      	mov	r0, r4
    e654:	42a1      	cmp	r1, r4
    e656:	d001      	beq.n	e65c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    e658:	21a9      	movs	r1, #169	; 0xa9
    e65a:	e010      	b.n	e67e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    e65c:	2224      	movs	r2, #36	; 0x24
    e65e:	2100      	movs	r1, #0
    e660:	f7ff f8b8 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e664:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e668:	82a0      	strh	r0, [r4, #20]
    e66a:	19a8      	adds	r0, r5, r6
    e66c:	1d80      	adds	r0, r0, #6
    e66e:	4378      	muls	r0, r7
    e670:	b280      	uxth	r0, r0
    e672:	7725      	strb	r5, [r4, #28]
    e674:	8060      	strh	r0, [r4, #2]
    e676:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    e67a:	d903      	bls.n	e684 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    e67c:	21af      	movs	r1, #175	; 0xaf
    e67e:	2014      	movs	r0, #20
    e680:	f7f6 fc1e 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e684:	8026      	strh	r6, [r4, #0]
    e686:	2000      	movs	r0, #0
    e688:	7760      	strb	r0, [r4, #29]
    e68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e68e <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    e68e:	6181      	str	r1, [r0, #24]
    e690:	6188      	str	r0, [r1, #24]
    e692:	4770      	bx	lr

0000e694 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    e694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e698:	460b      	mov	r3, r1
    e69a:	4604      	mov	r4, r0
    e69c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    e6a0:	8905      	ldrh	r5, [r0, #8]
    e6a2:	8946      	ldrh	r6, [r0, #10]
    e6a4:	8880      	ldrh	r0, [r0, #4]
    e6a6:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    e6aa:	4439      	add	r1, r7
    e6ac:	460f      	mov	r7, r1
    e6ae:	4285      	cmp	r5, r0
    e6b0:	d102      	bne.n	e6b8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    e6b2:	2000      	movs	r0, #0
    e6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e6b8:	b10a      	cbz	r2, e6be <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    e6ba:	1cc8      	adds	r0, r1, #3
    e6bc:	6010      	str	r0, [r2, #0]
    e6be:	b123      	cbz	r3, e6ca <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    e6c0:	7f22      	ldrb	r2, [r4, #28]
    e6c2:	1cf9      	adds	r1, r7, #3
    e6c4:	4618      	mov	r0, r3
    e6c6:	f7ff f80b 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e6ca:	883f      	ldrh	r7, [r7, #0]
    e6cc:	f104 0108 	add.w	r1, r4, #8
    e6d0:	4620      	mov	r0, r4
    e6d2:	f7ff fd76 	bl	e1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    e6d6:	42b5      	cmp	r5, r6
    e6d8:	d101      	bne.n	e6de <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    e6da:	8920      	ldrh	r0, [r4, #8]
    e6dc:	8160      	strh	r0, [r4, #10]
    e6de:	4638      	mov	r0, r7
    e6e0:	e7e8      	b.n	e6b4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000e6e2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    e6e2:	4401      	add	r1, r0
    e6e4:	1d89      	adds	r1, r1, #6
    e6e6:	4351      	muls	r1, r2
    e6e8:	b28a      	uxth	r2, r1
    e6ea:	2100      	movs	r1, #0
    e6ec:	2845      	cmp	r0, #69	; 0x45
    e6ee:	d201      	bcs.n	e6f4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    e6f0:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    e6f4:	3224      	adds	r2, #36	; 0x24
    e6f6:	1850      	adds	r0, r2, r1
    e6f8:	b280      	uxth	r0, r0
    e6fa:	4770      	bx	lr

0000e6fc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    e6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e700:	4688      	mov	r8, r1
    e702:	88c1      	ldrh	r1, [r0, #6]
    e704:	4604      	mov	r4, r0
    e706:	8900      	ldrh	r0, [r0, #8]
    e708:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    e70c:	f104 0524 	add.w	r5, r4, #36	; 0x24
    e710:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    e714:	eb05 0906 	add.w	r9, r5, r6
    e718:	f7ff fd74 	bl	e204 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    e71c:	2200      	movs	r2, #0
    e71e:	b998      	cbnz	r0, e748 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    e720:	8820      	ldrh	r0, [r4, #0]
    e722:	2845      	cmp	r0, #69	; 0x45
    e724:	d200      	bcs.n	e728 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    e726:	2045      	movs	r0, #69	; 0x45
    e728:	42b7      	cmp	r7, r6
    e72a:	d906      	bls.n	e73a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e72c:	7f23      	ldrb	r3, [r4, #28]
    e72e:	1bb9      	subs	r1, r7, r6
    e730:	1ac9      	subs	r1, r1, r3
    e732:	1f89      	subs	r1, r1, #6
    e734:	4281      	cmp	r1, r0
    e736:	da00      	bge.n	e73a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    e738:	4608      	mov	r0, r1
    e73a:	89e1      	ldrh	r1, [r4, #14]
    e73c:	b111      	cbz	r1, e744 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    e73e:	f8b9 3000 	ldrh.w	r3, [r9]
    e742:	1ac0      	subs	r0, r0, r3
    e744:	4540      	cmp	r0, r8
    e746:	da03      	bge.n	e750 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    e748:	8262      	strh	r2, [r4, #18]
    e74a:	2000      	movs	r0, #0
    e74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e750:	7f20      	ldrb	r0, [r4, #28]
    e752:	4429      	add	r1, r5
    e754:	1d80      	adds	r0, r0, #6
    e756:	4430      	add	r0, r6
    e758:	4408      	add	r0, r1
    e75a:	f8a4 8012 	strh.w	r8, [r4, #18]
    e75e:	1ec0      	subs	r0, r0, #3
    e760:	e7f4      	b.n	e74c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000e762 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    e762:	2100      	movs	r1, #0
    e764:	81c1      	strh	r1, [r0, #14]
    e766:	8241      	strh	r1, [r0, #18]
    e768:	7581      	strb	r1, [r0, #22]
    e76a:	4770      	bx	lr

0000e76c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    e76c:	b570      	push	{r4, r5, r6, lr}
    e76e:	2300      	movs	r3, #0
    e770:	2908      	cmp	r1, #8
    e772:	d204      	bcs.n	e77e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    e774:	f240 11cb 	movw	r1, #459	; 0x1cb
    e778:	2015      	movs	r0, #21
    e77a:	f7f6 fba1 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e77e:	6802      	ldr	r2, [r0, #0]
    e780:	b90a      	cbnz	r2, e786 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    e782:	e01e      	b.n	e7c2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e784:	4610      	mov	r0, r2
    e786:	6802      	ldr	r2, [r0, #0]
    e788:	8893      	ldrh	r3, [r2, #4]
    e78a:	428b      	cmp	r3, r1
    e78c:	d002      	beq.n	e794 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    e78e:	6813      	ldr	r3, [r2, #0]
    e790:	2b00      	cmp	r3, #0
    e792:	d1f7      	bne.n	e784 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    e794:	8894      	ldrh	r4, [r2, #4]
    e796:	4613      	mov	r3, r2
    e798:	428c      	cmp	r4, r1
    e79a:	d101      	bne.n	e7a0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    e79c:	6811      	ldr	r1, [r2, #0]
    e79e:	e00d      	b.n	e7bc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    e7a0:	f101 0508 	add.w	r5, r1, #8
    e7a4:	b2ae      	uxth	r6, r5
    e7a6:	2500      	movs	r5, #0
    e7a8:	42b4      	cmp	r4, r6
    e7aa:	d309      	bcc.n	e7c0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    e7ac:	1a64      	subs	r4, r4, r1
    e7ae:	4411      	add	r1, r2
    e7b0:	600d      	str	r5, [r1, #0]
    e7b2:	808c      	strh	r4, [r1, #4]
    e7b4:	6802      	ldr	r2, [r0, #0]
    e7b6:	6812      	ldr	r2, [r2, #0]
    e7b8:	6002      	str	r2, [r0, #0]
    e7ba:	600a      	str	r2, [r1, #0]
    e7bc:	6001      	str	r1, [r0, #0]
    e7be:	e000      	b.n	e7c2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    e7c0:	2300      	movs	r3, #0
    e7c2:	4618      	mov	r0, r3
    e7c4:	bd70      	pop	{r4, r5, r6, pc}

0000e7c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    e7c6:	b510      	push	{r4, lr}
    e7c8:	000c      	movs	r4, r1
    e7ca:	d006      	beq.n	e7da <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    e7cc:	2c08      	cmp	r4, #8
    e7ce:	d209      	bcs.n	e7e4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    e7d0:	f240 1195 	movw	r1, #405	; 0x195
    e7d4:	2015      	movs	r0, #21
    e7d6:	f7f6 fb73 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e7da:	b108      	cbz	r0, e7e0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    e7dc:	2100      	movs	r1, #0
    e7de:	6001      	str	r1, [r0, #0]
    e7e0:	2000      	movs	r0, #0
    e7e2:	bd10      	pop	{r4, pc}
    e7e4:	b118      	cbz	r0, e7ee <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    e7e6:	b2a1      	uxth	r1, r4
    e7e8:	6800      	ldr	r0, [r0, #0]
    e7ea:	f000 f814 	bl	e816 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    e7ee:	1d20      	adds	r0, r4, #4
    e7f0:	bd10      	pop	{r4, pc}

0000e7f2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    e7f2:	2100      	movs	r1, #0
    e7f4:	6802      	ldr	r2, [r0, #0]
    e7f6:	e003      	b.n	e800 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    e7f8:	8893      	ldrh	r3, [r2, #4]
    e7fa:	6812      	ldr	r2, [r2, #0]
    e7fc:	4419      	add	r1, r3
    e7fe:	b289      	uxth	r1, r1
    e800:	2a00      	cmp	r2, #0
    e802:	d1f9      	bne.n	e7f8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    e804:	f000 b807 	b.w	e816 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000e808 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    e808:	2300      	movs	r3, #0
    e80a:	600b      	str	r3, [r1, #0]
    e80c:	808a      	strh	r2, [r1, #4]
    e80e:	6802      	ldr	r2, [r0, #0]
    e810:	600a      	str	r2, [r1, #0]
    e812:	6001      	str	r1, [r0, #0]
    e814:	4770      	bx	lr
    e816:	2300      	movs	r3, #0
    e818:	6043      	str	r3, [r0, #4]
    e81a:	1d02      	adds	r2, r0, #4
    e81c:	8101      	strh	r1, [r0, #8]
    e81e:	6002      	str	r2, [r0, #0]
    e820:	4770      	bx	lr

0000e822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    e822:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    e826:	3aff      	subs	r2, #255	; 0xff
    e828:	d000      	beq.n	e82c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    e82a:	b109      	cbz	r1, e830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    e82c:	2000      	movs	r0, #0
    e82e:	4770      	bx	lr
    e830:	f7f6 be26 	b.w	5480 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000e834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    e834:	b570      	push	{r4, r5, r6, lr}
    e836:	4605      	mov	r5, r0
    e838:	460c      	mov	r4, r1
    e83a:	4608      	mov	r0, r1
    e83c:	f000 f854 	bl	e8e8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    e840:	b108      	cbz	r0, e846 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    e842:	2010      	movs	r0, #16
    e844:	bd70      	pop	{r4, r5, r6, pc}
    e846:	b10d      	cbz	r5, e84c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    e848:	2007      	movs	r0, #7
    e84a:	bd70      	pop	{r4, r5, r6, pc}
    e84c:	7025      	strb	r5, [r4, #0]
    e84e:	2000      	movs	r0, #0
    e850:	8060      	strh	r0, [r4, #2]
    e852:	bd70      	pop	{r4, r5, r6, pc}
    e854:	b510      	push	{r4, lr}
    e856:	4604      	mov	r4, r0
    e858:	f7f6 fe5e 	bl	5518 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    e85c:	42a0      	cmp	r0, r4
    e85e:	d901      	bls.n	e864 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    e860:	2001      	movs	r0, #1
    e862:	bd10      	pop	{r4, pc}
    e864:	2000      	movs	r0, #0
    e866:	bd10      	pop	{r4, pc}
    e868:	4770      	bx	lr

0000e86a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    e86a:	b570      	push	{r4, r5, r6, lr}
    e86c:	460e      	mov	r6, r1
    e86e:	461d      	mov	r5, r3
    e870:	4611      	mov	r1, r2
    e872:	f000 f811 	bl	e898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    e876:	4604      	mov	r4, r0
    e878:	4629      	mov	r1, r5
    e87a:	4630      	mov	r0, r6
    e87c:	f000 f803 	bl	e886 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    e880:	4420      	add	r0, r4
    e882:	1d00      	adds	r0, r0, #4
    e884:	bd70      	pop	{r4, r5, r6, pc}
    e886:	b510      	push	{r4, lr}
    e888:	460a      	mov	r2, r1
    e88a:	2101      	movs	r1, #1
    e88c:	f7ff ff29 	bl	e6e2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e890:	1cc0      	adds	r0, r0, #3
    e892:	f020 0003 	bic.w	r0, r0, #3
    e896:	bd10      	pop	{r4, pc}
    e898:	b510      	push	{r4, lr}
    e89a:	460a      	mov	r2, r1
    e89c:	2101      	movs	r1, #1
    e89e:	f7ff ff20 	bl	e6e2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    e8a2:	1cc0      	adds	r0, r0, #3
    e8a4:	f020 0003 	bic.w	r0, r0, #3
    e8a8:	bd10      	pop	{r4, pc}
    e8aa:	2800      	cmp	r0, #0
    e8ac:	db09      	blt.n	e8c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    e8ae:	f000 021f 	and.w	r2, r0, #31
    e8b2:	2101      	movs	r1, #1
    e8b4:	4091      	lsls	r1, r2
    e8b6:	0940      	lsrs	r0, r0, #5
    e8b8:	0080      	lsls	r0, r0, #2
    e8ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e8be:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    e8c2:	4770      	bx	lr
    e8c4:	5840      	ldr	r0, [r0, r1]
    e8c6:	2800      	cmp	r0, #0
    e8c8:	d000      	beq.n	e8cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    e8ca:	2001      	movs	r0, #1
    e8cc:	4770      	bx	lr

0000e8ce <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    e8ce:	f7f6 bfe9 	b.w	58a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000e8d2 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    e8d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    e8d6:	2000      	movs	r0, #0
    e8d8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    e8dc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    e8e0:	2001      	movs	r0, #1
    e8e2:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    e8e6:	4770      	bx	lr

0000e8e8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    e8e8:	b108      	cbz	r0, e8ee <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    e8ea:	2000      	movs	r0, #0
    e8ec:	4770      	bx	lr
    e8ee:	2001      	movs	r0, #1
    e8f0:	4770      	bx	lr

0000e8f2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    e8f2:	f7f7 b929 	b.w	5b48 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000e8f6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    e8f6:	f7f7 b917 	b.w	5b28 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000e8fa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    e8fa:	b510      	push	{r4, lr}
    e8fc:	2900      	cmp	r1, #0
    e8fe:	4604      	mov	r4, r0
    e900:	f04f 0106 	mov.w	r1, #6
    e904:	d002      	beq.n	e90c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    e906:	f7f6 fb69 	bl	4fdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e90a:	e001      	b.n	e910 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    e90c:	f7f6 fb82 	bl	5014 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e910:	7960      	ldrb	r0, [r4, #5]
    e912:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e916:	7160      	strb	r0, [r4, #5]
    e918:	bd10      	pop	{r4, pc}

0000e91a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    e91a:	4770      	bx	lr

0000e91c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    e91c:	b530      	push	{r4, r5, lr}
    e91e:	460c      	mov	r4, r1
    e920:	4605      	mov	r5, r0
    e922:	b08d      	sub	sp, #52	; 0x34
    e924:	f04f 0103 	mov.w	r1, #3
    e928:	f104 0003 	add.w	r0, r4, #3
    e92c:	b112      	cbz	r2, e934 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    e92e:	f7f6 fb55 	bl	4fdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    e932:	e001      	b.n	e938 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    e934:	f7f6 fb6e 	bl	5014 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e938:	7960      	ldrb	r0, [r4, #5]
    e93a:	220d      	movs	r2, #13
    e93c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    e940:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    e944:	7160      	strb	r0, [r4, #5]
    e946:	2100      	movs	r1, #0
    e948:	a804      	add	r0, sp, #16
    e94a:	f7fe ff43 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e94e:	78e0      	ldrb	r0, [r4, #3]
    e950:	f88d 001f 	strb.w	r0, [sp, #31]
    e954:	7920      	ldrb	r0, [r4, #4]
    e956:	f88d 001e 	strb.w	r0, [sp, #30]
    e95a:	7960      	ldrb	r0, [r4, #5]
    e95c:	f88d 001d 	strb.w	r0, [sp, #29]
    e960:	2210      	movs	r2, #16
    e962:	4629      	mov	r1, r5
    e964:	4668      	mov	r0, sp
    e966:	f7fe febb 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e96a:	4668      	mov	r0, sp
    e96c:	f7ff ffaf 	bl	e8ce <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e970:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    e974:	7020      	strb	r0, [r4, #0]
    e976:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    e97a:	7060      	strb	r0, [r4, #1]
    e97c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    e980:	70a0      	strb	r0, [r4, #2]
    e982:	b00d      	add	sp, #52	; 0x34
    e984:	bd30      	pop	{r4, r5, pc}

0000e986 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    e986:	b530      	push	{r4, r5, lr}
    e988:	b08d      	sub	sp, #52	; 0x34
    e98a:	460c      	mov	r4, r1
    e98c:	4605      	mov	r5, r0
    e98e:	220d      	movs	r2, #13
    e990:	2100      	movs	r1, #0
    e992:	a804      	add	r0, sp, #16
    e994:	f7fe ff1e 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e998:	78e0      	ldrb	r0, [r4, #3]
    e99a:	f88d 001f 	strb.w	r0, [sp, #31]
    e99e:	7920      	ldrb	r0, [r4, #4]
    e9a0:	f88d 001e 	strb.w	r0, [sp, #30]
    e9a4:	7960      	ldrb	r0, [r4, #5]
    e9a6:	f88d 001d 	strb.w	r0, [sp, #29]
    e9aa:	2210      	movs	r2, #16
    e9ac:	4629      	mov	r1, r5
    e9ae:	4668      	mov	r0, sp
    e9b0:	f7fe fe96 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e9b4:	4668      	mov	r0, sp
    e9b6:	f7ff ff8a 	bl	e8ce <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    e9ba:	7820      	ldrb	r0, [r4, #0]
    e9bc:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    e9c0:	4288      	cmp	r0, r1
    e9c2:	d10c      	bne.n	e9de <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e9c4:	7860      	ldrb	r0, [r4, #1]
    e9c6:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    e9ca:	4288      	cmp	r0, r1
    e9cc:	d107      	bne.n	e9de <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e9ce:	78a0      	ldrb	r0, [r4, #2]
    e9d0:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    e9d4:	4288      	cmp	r0, r1
    e9d6:	d102      	bne.n	e9de <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    e9d8:	2001      	movs	r0, #1
    e9da:	b00d      	add	sp, #52	; 0x34
    e9dc:	bd30      	pop	{r4, r5, pc}
    e9de:	2000      	movs	r0, #0
    e9e0:	e7fb      	b.n	e9da <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000e9e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    e9e2:	f7f7 bc75 	b.w	62d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    e9e6:	b510      	push	{r4, lr}
    e9e8:	2801      	cmp	r0, #1
    e9ea:	d008      	beq.n	e9fe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    e9ec:	2802      	cmp	r0, #2
    e9ee:	d004      	beq.n	e9fa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    e9f0:	f240 31ad 	movw	r1, #941	; 0x3ad
    e9f4:	2006      	movs	r0, #6
    e9f6:	f7f6 fa63 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e9fa:	2001      	movs	r0, #1
    e9fc:	bd10      	pop	{r4, pc}
    e9fe:	2000      	movs	r0, #0
    ea00:	bd10      	pop	{r4, pc}
    ea02:	2900      	cmp	r1, #0
    ea04:	d004      	beq.n	ea10 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    ea06:	2801      	cmp	r0, #1
    ea08:	d003      	beq.n	ea12 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    ea0a:	2901      	cmp	r1, #1
    ea0c:	d001      	beq.n	ea12 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    ea0e:	2002      	movs	r0, #2
    ea10:	4770      	bx	lr
    ea12:	2001      	movs	r0, #1
    ea14:	4770      	bx	lr
    ea16:	f7ff bdb1 	b.w	e57c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000ea1a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    ea1a:	2101      	movs	r1, #1
    ea1c:	f7f8 b86c 	b.w	6af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000ea20 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    ea20:	b510      	push	{r4, lr}
    ea22:	f002 f806 	bl	10a32 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    ea26:	b118      	cbz	r0, ea30 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    ea28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ea2c:	f7fd bbfe 	b.w	c22c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    ea30:	20ff      	movs	r0, #255	; 0xff
    ea32:	bd10      	pop	{r4, pc}

0000ea34 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    ea34:	b510      	push	{r4, lr}
    ea36:	f7f8 f8a7 	bl	6b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ea3a:	2810      	cmp	r0, #16
    ea3c:	d003      	beq.n	ea46 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    ea3e:	f7f8 f873 	bl	6b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ea42:	2810      	cmp	r0, #16
    ea44:	d100      	bne.n	ea48 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    ea46:	2008      	movs	r0, #8
    ea48:	bd10      	pop	{r4, pc}

0000ea4a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    ea4a:	b510      	push	{r4, lr}
    ea4c:	f7f8 f89c 	bl	6b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ea50:	2810      	cmp	r0, #16
    ea52:	d007      	beq.n	ea64 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    ea54:	f7f8 f868 	bl	6b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    ea58:	2810      	cmp	r0, #16
    ea5a:	d003      	beq.n	ea64 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    ea5c:	f7f8 f8dc 	bl	6c18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    ea60:	2001      	movs	r0, #1
    ea62:	bd10      	pop	{r4, pc}
    ea64:	2000      	movs	r0, #0
    ea66:	bd10      	pop	{r4, pc}

0000ea68 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    ea68:	b510      	push	{r4, lr}
    ea6a:	f7f8 f88d 	bl	6b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    ea6e:	2810      	cmp	r0, #16
    ea70:	d003      	beq.n	ea7a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    ea72:	f7f8 f919 	bl	6ca8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    ea76:	2001      	movs	r0, #1
    ea78:	bd10      	pop	{r4, pc}
    ea7a:	2000      	movs	r0, #0
    ea7c:	bd10      	pop	{r4, pc}

0000ea7e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    ea7e:	b570      	push	{r4, r5, r6, lr}
    ea80:	460e      	mov	r6, r1
    ea82:	b08c      	sub	sp, #48	; 0x30
    ea84:	4614      	mov	r4, r2
    ea86:	4601      	mov	r1, r0
    ea88:	461d      	mov	r5, r3
    ea8a:	2210      	movs	r2, #16
    ea8c:	4668      	mov	r0, sp
    ea8e:	f000 f9b8 	bl	ee02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ea92:	2210      	movs	r2, #16
    ea94:	4631      	mov	r1, r6
    ea96:	a804      	add	r0, sp, #16
    ea98:	f000 f9b3 	bl	ee02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    ea9c:	4668      	mov	r0, sp
    ea9e:	f7ff ff16 	bl	e8ce <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    eaa2:	a908      	add	r1, sp, #32
    eaa4:	f04f 0210 	mov.w	r2, #16
    eaa8:	4628      	mov	r0, r5
    eaaa:	b11c      	cbz	r4, eab4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    eaac:	f000 f9a9 	bl	ee02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    eab0:	b00c      	add	sp, #48	; 0x30
    eab2:	bd70      	pop	{r4, r5, r6, pc}
    eab4:	f7fe fe14 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    eab8:	e7fa      	b.n	eab0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    eaba:	0781      	lsls	r1, r0, #30
    eabc:	d501      	bpl.n	eac2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    eabe:	2002      	movs	r0, #2
    eac0:	4770      	bx	lr
    eac2:	07c0      	lsls	r0, r0, #31
    eac4:	d0fc      	beq.n	eac0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    eac6:	2001      	movs	r0, #1
    eac8:	4770      	bx	lr

0000eaca <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    eaca:	b530      	push	{r4, r5, lr}
    eacc:	4605      	mov	r5, r0
    eace:	7900      	ldrb	r0, [r0, #4]
    ead0:	0940      	lsrs	r0, r0, #5
    ead2:	d10e      	bne.n	eaf2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    ead4:	2400      	movs	r4, #0
    ead6:	4623      	mov	r3, r4
    ead8:	5ce8      	ldrb	r0, [r5, r3]
    eada:	f000 f855 	bl	eb88 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>
    eade:	1c5b      	adds	r3, r3, #1
    eae0:	4420      	add	r0, r4
    eae2:	b2db      	uxtb	r3, r3
    eae4:	b2c4      	uxtb	r4, r0
    eae6:	2b05      	cmp	r3, #5
    eae8:	d3f6      	bcc.n	ead8 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    eaea:	2c01      	cmp	r4, #1
    eaec:	d901      	bls.n	eaf2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    eaee:	2001      	movs	r0, #1
    eaf0:	bd30      	pop	{r4, r5, pc}
    eaf2:	2000      	movs	r0, #0
    eaf4:	bd30      	pop	{r4, r5, pc}

0000eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    eaf6:	b510      	push	{r4, lr}
    eaf8:	460c      	mov	r4, r1
    eafa:	2100      	movs	r1, #0
    eafc:	f7ff fe91 	bl	e822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    eb00:	6060      	str	r0, [r4, #4]
    eb02:	b110      	cbz	r0, eb0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    eb04:	2000      	movs	r0, #0
    eb06:	7020      	strb	r0, [r4, #0]
    eb08:	bd10      	pop	{r4, pc}
    eb0a:	2002      	movs	r0, #2
    eb0c:	bd10      	pop	{r4, pc}

0000eb0e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    eb0e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eb12:	4348      	muls	r0, r1
    eb14:	4770      	bx	lr

0000eb16 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    eb16:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eb1a:	fbb0 f0f1 	udiv	r0, r0, r1
    eb1e:	b280      	uxth	r0, r0
    eb20:	4770      	bx	lr

0000eb22 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    eb22:	b570      	push	{r4, r5, r6, lr}
    eb24:	4604      	mov	r4, r0
    eb26:	4290      	cmp	r0, r2
    eb28:	d20b      	bcs.n	eb42 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    eb2a:	1b10      	subs	r0, r2, r4
    eb2c:	2865      	cmp	r0, #101	; 0x65
    eb2e:	d200      	bcs.n	eb32 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    eb30:	2065      	movs	r0, #101	; 0x65
    eb32:	1825      	adds	r5, r4, r0
    eb34:	428d      	cmp	r5, r1
    eb36:	d803      	bhi.n	eb40 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    eb38:	2104      	movs	r1, #4
    eb3a:	f7f3 fc9d 	bl	2478 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    eb3e:	b108      	cbz	r0, eb44 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    eb40:	4620      	mov	r0, r4
    eb42:	bd70      	pop	{r4, r5, r6, pc}
    eb44:	4628      	mov	r0, r5
    eb46:	bd70      	pop	{r4, r5, r6, pc}

0000eb48 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>:
    eb48:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    eb4c:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    eb50:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    eb54:	4408      	add	r0, r1
    eb56:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    eb5a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    eb5e:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    eb62:	4408      	add	r0, r1
    eb64:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    eb68:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    eb6c:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    eb70:	4408      	add	r0, r1
    eb72:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    eb76:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    eb7a:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    eb7e:	4408      	add	r0, r1
    eb80:	b281      	uxth	r1, r0
    eb82:	eb01 4010 	add.w	r0, r1, r0, lsr #16
    eb86:	4770      	bx	lr

0000eb88 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>:
    eb88:	f000 0155 	and.w	r1, r0, #85	; 0x55
    eb8c:	2255      	movs	r2, #85	; 0x55
    eb8e:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    eb92:	4408      	add	r0, r1
    eb94:	f000 0133 	and.w	r1, r0, #51	; 0x33
    eb98:	2233      	movs	r2, #51	; 0x33
    eb9a:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    eb9e:	4408      	add	r0, r1
    eba0:	f000 010f 	and.w	r1, r0, #15
    eba4:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    eba8:	4770      	bx	lr

0000ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    ebaa:	b510      	push	{r4, lr}
    ebac:	f1a2 030f 	sub.w	r3, r2, #15
    ebb0:	290c      	cmp	r1, #12
    ebb2:	d24f      	bcs.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebb4:	e8df f001 	tbb	[pc, r1]
    ebb8:	120d0806 	.word	0x120d0806
    ebbc:	2f271815 	.word	0x2f271815
    ebc0:	3d354c32 	.word	0x3d354c32
    ebc4:	b3a2      	cbz	r2, ec30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    ebc6:	e045      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebc8:	2a07      	cmp	r2, #7
    ebca:	d045      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebcc:	2a08      	cmp	r2, #8
    ebce:	d043      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebd0:	e040      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebd2:	2a0c      	cmp	r2, #12
    ebd4:	d040      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebd6:	2a0b      	cmp	r2, #11
    ebd8:	d03e      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebda:	e03b      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebdc:	2a0d      	cmp	r2, #13
    ebde:	d03b      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebe0:	e038      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebe2:	2b0c      	cmp	r3, #12
    ebe4:	d938      	bls.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebe6:	e035      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebe8:	2a12      	cmp	r2, #18
    ebea:	d035      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebec:	2a11      	cmp	r2, #17
    ebee:	d033      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebf0:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    ebf4:	b120      	cbz	r0, ec00 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    ebf6:	2a12      	cmp	r2, #18
    ebf8:	d32c      	bcc.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ebfa:	2a1a      	cmp	r2, #26
    ebfc:	d92c      	bls.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ebfe:	e029      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ec00:	2a16      	cmp	r2, #22
    ec02:	d2fa      	bcs.n	ebfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    ec04:	e026      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ec06:	2b03      	cmp	r3, #3
    ec08:	d926      	bls.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec0a:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    ec0e:	b308      	cbz	r0, ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ec10:	2a1b      	cmp	r2, #27
    ec12:	d921      	bls.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec14:	e01e      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ec16:	2a04      	cmp	r2, #4
    ec18:	d01e      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec1a:	e01b      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ec1c:	2a01      	cmp	r2, #1
    ec1e:	d01b      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec20:	e018      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ec22:	2a1c      	cmp	r2, #28
    ec24:	d018      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec26:	2a1d      	cmp	r2, #29
    ec28:	d016      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec2a:	2a1e      	cmp	r2, #30
    ec2c:	d014      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec2e:	e011      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ec30:	e012      	b.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec32:	2a1f      	cmp	r2, #31
    ec34:	d010      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec36:	2a20      	cmp	r2, #32
    ec38:	d00e      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec3a:	2a21      	cmp	r2, #33	; 0x21
    ec3c:	d00c      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec3e:	2a22      	cmp	r2, #34	; 0x22
    ec40:	d00a      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec42:	2a23      	cmp	r2, #35	; 0x23
    ec44:	d008      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec46:	2a24      	cmp	r2, #36	; 0x24
    ec48:	d006      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec4a:	2a26      	cmp	r2, #38	; 0x26
    ec4c:	d004      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec4e:	e001      	b.n	ec54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    ec50:	2a05      	cmp	r2, #5
    ec52:	d001      	beq.n	ec58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    ec54:	2000      	movs	r0, #0
    ec56:	bd10      	pop	{r4, pc}
    ec58:	2001      	movs	r0, #1
    ec5a:	bd10      	pop	{r4, pc}

0000ec5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    ec5c:	280c      	cmp	r0, #12
    ec5e:	d013      	beq.n	ec88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec60:	280b      	cmp	r0, #11
    ec62:	d011      	beq.n	ec88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec64:	280d      	cmp	r0, #13
    ec66:	d00f      	beq.n	ec88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec68:	281f      	cmp	r0, #31
    ec6a:	d00d      	beq.n	ec88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec6c:	2820      	cmp	r0, #32
    ec6e:	d00b      	beq.n	ec88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec70:	2821      	cmp	r0, #33	; 0x21
    ec72:	d009      	beq.n	ec88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec74:	2822      	cmp	r0, #34	; 0x22
    ec76:	d007      	beq.n	ec88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec78:	2823      	cmp	r0, #35	; 0x23
    ec7a:	d005      	beq.n	ec88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec7c:	2824      	cmp	r0, #36	; 0x24
    ec7e:	d003      	beq.n	ec88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec80:	2826      	cmp	r0, #38	; 0x26
    ec82:	d001      	beq.n	ec88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    ec84:	2000      	movs	r0, #0
    ec86:	4770      	bx	lr
    ec88:	2001      	movs	r0, #1
    ec8a:	4770      	bx	lr

0000ec8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    ec8c:	f011 0f0c 	tst.w	r1, #12
    ec90:	d016      	beq.n	ecc0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    ec92:	074a      	lsls	r2, r1, #29
    ec94:	f44f 7116 	mov.w	r1, #600	; 0x258
    ec98:	2a00      	cmp	r2, #0
    ec9a:	da02      	bge.n	eca2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    ec9c:	f04f 0210 	mov.w	r2, #16
    eca0:	e001      	b.n	eca6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    eca2:	f04f 0240 	mov.w	r2, #64	; 0x40
    eca6:	da01      	bge.n	ecac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    eca8:	f04f 0196 	mov.w	r1, #150	; 0x96
    ecac:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    ecb0:	eba0 0301 	sub.w	r3, r0, r1
    ecb4:	4288      	cmp	r0, r1
    ecb6:	d910      	bls.n	ecda <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ecb8:	fb93 f0f2 	sdiv	r0, r3, r2
    ecbc:	b280      	uxth	r0, r0
    ecbe:	4770      	bx	lr
    ecc0:	2902      	cmp	r1, #2
    ecc2:	d002      	beq.n	ecca <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    ecc4:	2870      	cmp	r0, #112	; 0x70
    ecc6:	d80a      	bhi.n	ecde <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    ecc8:	e007      	b.n	ecda <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ecca:	283c      	cmp	r0, #60	; 0x3c
    eccc:	d905      	bls.n	ecda <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    ecce:	383c      	subs	r0, #60	; 0x3c
    ecd0:	17c1      	asrs	r1, r0, #31
    ecd2:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    ecd6:	1080      	asrs	r0, r0, #2
    ecd8:	e7f0      	b.n	ecbc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    ecda:	2000      	movs	r0, #0
    ecdc:	e7ee      	b.n	ecbc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    ecde:	3870      	subs	r0, #112	; 0x70
    ece0:	17c1      	asrs	r1, r0, #31
    ece2:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    ece6:	10c0      	asrs	r0, r0, #3
    ece8:	e7e8      	b.n	ecbc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000ecea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    ecea:	6809      	ldr	r1, [r1, #0]
    ecec:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    ecf0:	4770      	bx	lr

0000ecf2 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    ecf2:	2801      	cmp	r0, #1
    ecf4:	d002      	beq.n	ecfc <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    ecf6:	2802      	cmp	r0, #2
    ecf8:	d000      	beq.n	ecfc <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    ecfa:	2000      	movs	r0, #0
    ecfc:	4770      	bx	lr

0000ecfe <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    ecfe:	b510      	push	{r4, lr}
    ed00:	f640 12c4 	movw	r2, #2500	; 0x9c4
    ed04:	2901      	cmp	r1, #1
    ed06:	d006      	beq.n	ed16 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    ed08:	2902      	cmp	r1, #2
    ed0a:	d005      	beq.n	ed18 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    ed0c:	f240 31b1 	movw	r1, #945	; 0x3b1
    ed10:	2029      	movs	r0, #41	; 0x29
    ed12:	f7f6 f8d5 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ed16:	b108      	cbz	r0, ed1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    ed18:	4610      	mov	r0, r2
    ed1a:	bd10      	pop	{r4, pc}
    ed1c:	f240 40e2 	movw	r0, #1250	; 0x4e2
    ed20:	bd10      	pop	{r4, pc}

0000ed22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    ed22:	b530      	push	{r4, r5, lr}
    ed24:	242a      	movs	r4, #42	; 0x2a
    ed26:	2523      	movs	r5, #35	; 0x23
    ed28:	2a16      	cmp	r2, #22
    ed2a:	d105      	bne.n	ed38 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    ed2c:	280c      	cmp	r0, #12
    ed2e:	d007      	beq.n	ed40 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    ed30:	280d      	cmp	r0, #13
    ed32:	d005      	beq.n	ed40 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    ed34:	281f      	cmp	r0, #31
    ed36:	d005      	beq.n	ed44 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    ed38:	b171      	cbz	r1, ed58 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    ed3a:	2a16      	cmp	r2, #22
    ed3c:	d10c      	bne.n	ed58 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    ed3e:	e004      	b.n	ed4a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    ed40:	701c      	strb	r4, [r3, #0]
    ed42:	e000      	b.n	ed46 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    ed44:	701d      	strb	r5, [r3, #0]
    ed46:	2001      	movs	r0, #1
    ed48:	bd30      	pop	{r4, r5, pc}
    ed4a:	7808      	ldrb	r0, [r1, #0]
    ed4c:	2801      	cmp	r0, #1
    ed4e:	d0f7      	beq.n	ed40 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    ed50:	2800      	cmp	r0, #0
    ed52:	d0f5      	beq.n	ed40 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    ed54:	2816      	cmp	r0, #22
    ed56:	d0f5      	beq.n	ed44 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    ed58:	2000      	movs	r0, #0
    ed5a:	bd30      	pop	{r4, r5, pc}

0000ed5c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    ed5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed5e:	b2cf      	uxtb	r7, r1
    ed60:	4606      	mov	r6, r0
    ed62:	f3c1 2407 	ubfx	r4, r1, #8, #8
    ed66:	4621      	mov	r1, r4
    ed68:	4638      	mov	r0, r7
    ed6a:	f000 f8ca 	bl	ef02 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    ed6e:	b2f5      	uxtb	r5, r6
    ed70:	f3c6 2607 	ubfx	r6, r6, #8, #8
    ed74:	b920      	cbnz	r0, ed80 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    ed76:	4631      	mov	r1, r6
    ed78:	4628      	mov	r0, r5
    ed7a:	f000 f8c2 	bl	ef02 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    ed7e:	b140      	cbz	r0, ed92 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    ed80:	4027      	ands	r7, r4
    ed82:	4035      	ands	r5, r6
    ed84:	403d      	ands	r5, r7
    ed86:	4644      	mov	r4, r8
    ed88:	f365 0407 	bfi	r4, r5, #0, #8
    ed8c:	f365 240f 	bfi	r4, r5, #8, #8
    ed90:	e006      	b.n	eda0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    ed92:	4025      	ands	r5, r4
    ed94:	4644      	mov	r4, r8
    ed96:	f365 0407 	bfi	r4, r5, #0, #8
    ed9a:	403e      	ands	r6, r7
    ed9c:	f366 240f 	bfi	r4, r6, #8, #8
    eda0:	b2e0      	uxtb	r0, r4
    eda2:	f7ff fe8a 	bl	eaba <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    eda6:	f88d 0000 	strb.w	r0, [sp]
    edaa:	f3c4 2007 	ubfx	r0, r4, #8, #8
    edae:	f7ff fe84 	bl	eaba <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    edb2:	f88d 0001 	strb.w	r0, [sp, #1]
    edb6:	f8bd 0000 	ldrh.w	r0, [sp]
    edba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000edbc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    edbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    edc0:	460c      	mov	r4, r1
    edc2:	4605      	mov	r5, r0
    edc4:	68c6      	ldr	r6, [r0, #12]
    edc6:	f7f3 ffb1 	bl	2d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    edca:	b198      	cbz	r0, edf4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    edcc:	b1bc      	cbz	r4, edfe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    edce:	4630      	mov	r0, r6
    edd0:	68e9      	ldr	r1, [r5, #12]
    edd2:	f7f3 fc9f 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    edd6:	2800      	cmp	r0, #0
    edd8:	dd11      	ble.n	edfe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    edda:	4420      	add	r0, r4
    eddc:	1e40      	subs	r0, r0, #1
    edde:	fbb0 f7f4 	udiv	r7, r0, r4
    ede2:	fb07 f104 	mul.w	r1, r7, r4
    ede6:	4630      	mov	r0, r6
    ede8:	f7f3 fc62 	bl	26b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    edec:	60e8      	str	r0, [r5, #12]
    edee:	4638      	mov	r0, r7
    edf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    edf4:	f240 2136 	movw	r1, #566	; 0x236
    edf8:	2029      	movs	r0, #41	; 0x29
    edfa:	f7f6 f861 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    edfe:	2000      	movs	r0, #0
    ee00:	e7f6      	b.n	edf0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000ee02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    ee02:	b530      	push	{r4, r5, lr}
    ee04:	4613      	mov	r3, r2
    ee06:	e006      	b.n	ee16 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    ee08:	18cc      	adds	r4, r1, r3
    ee0a:	1ad5      	subs	r5, r2, r3
    ee0c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    ee10:	1e5b      	subs	r3, r3, #1
    ee12:	5544      	strb	r4, [r0, r5]
    ee14:	b2db      	uxtb	r3, r3
    ee16:	2b00      	cmp	r3, #0
    ee18:	d1f6      	bne.n	ee08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    ee1a:	bd30      	pop	{r4, r5, pc}

0000ee1c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    ee1c:	b538      	push	{r3, r4, r5, lr}
    ee1e:	4605      	mov	r5, r0
    ee20:	460c      	mov	r4, r1
    ee22:	4668      	mov	r0, sp
    ee24:	f7fd ff12 	bl	cc4c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    ee28:	b310      	cbz	r0, ee70 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    ee2a:	f99d 0000 	ldrsb.w	r0, [sp]
    ee2e:	7260      	strb	r0, [r4, #9]
    ee30:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    ee34:	72a1      	strb	r1, [r4, #10]
    ee36:	f994 100b 	ldrsb.w	r1, [r4, #11]
    ee3a:	2200      	movs	r2, #0
    ee3c:	1a41      	subs	r1, r0, r1
    ee3e:	d500      	bpl.n	ee42 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    ee40:	4249      	negs	r1, r1
    ee42:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    ee46:	428b      	cmp	r3, r1
    ee48:	dc10      	bgt.n	ee6c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ee4a:	2bff      	cmp	r3, #255	; 0xff
    ee4c:	d00e      	beq.n	ee6c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ee4e:	7b21      	ldrb	r1, [r4, #12]
    ee50:	1c49      	adds	r1, r1, #1
    ee52:	b2c9      	uxtb	r1, r1
    ee54:	7321      	strb	r1, [r4, #12]
    ee56:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    ee5a:	4299      	cmp	r1, r3
    ee5c:	d802      	bhi.n	ee64 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    ee5e:	7ae1      	ldrb	r1, [r4, #11]
    ee60:	297f      	cmp	r1, #127	; 0x7f
    ee62:	d103      	bne.n	ee6c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    ee64:	72e0      	strb	r0, [r4, #11]
    ee66:	2000      	movs	r0, #0
    ee68:	7320      	strb	r0, [r4, #12]
    ee6a:	2201      	movs	r2, #1
    ee6c:	4610      	mov	r0, r2
    ee6e:	bd38      	pop	{r3, r4, r5, pc}
    ee70:	207f      	movs	r0, #127	; 0x7f
    ee72:	7260      	strb	r0, [r4, #9]
    ee74:	2000      	movs	r0, #0
    ee76:	bd38      	pop	{r3, r4, r5, pc}

0000ee78 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    ee78:	2300      	movs	r3, #0
    ee7a:	6283      	str	r3, [r0, #40]	; 0x28
    ee7c:	8602      	strh	r2, [r0, #48]	; 0x30
    ee7e:	f240 2371 	movw	r3, #625	; 0x271
    ee82:	435a      	muls	r2, r3
    ee84:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    ee88:	1e52      	subs	r2, r2, #1
    ee8a:	fbb2 f1f1 	udiv	r1, r2, r1
    ee8e:	62c1      	str	r1, [r0, #44]	; 0x2c
    ee90:	4770      	bx	lr

0000ee92 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    ee92:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ee96:	4348      	muls	r0, r1
    ee98:	4770      	bx	lr

0000ee9a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    ee9a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ee9e:	fbb0 f0f1 	udiv	r0, r0, r1
    eea2:	b280      	uxth	r0, r0
    eea4:	4770      	bx	lr

0000eea6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    eea6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eeaa:	fb10 f001 	smulbb	r0, r0, r1
    eeae:	4770      	bx	lr

0000eeb0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    eeb0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    eeb4:	fbb0 f0f1 	udiv	r0, r0, r1
    eeb8:	b2c0      	uxtb	r0, r0
    eeba:	4770      	bx	lr

0000eebc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    eebc:	b510      	push	{r4, lr}
    eebe:	2300      	movs	r3, #0
    eec0:	461a      	mov	r2, r3
    eec2:	e003      	b.n	eecc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    eec4:	5c84      	ldrb	r4, [r0, r2]
    eec6:	4323      	orrs	r3, r4
    eec8:	1c52      	adds	r2, r2, #1
    eeca:	b2d2      	uxtb	r2, r2
    eecc:	428a      	cmp	r2, r1
    eece:	d3f9      	bcc.n	eec4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    eed0:	b10b      	cbz	r3, eed6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    eed2:	2000      	movs	r0, #0
    eed4:	bd10      	pop	{r4, pc}
    eed6:	2001      	movs	r0, #1
    eed8:	bd10      	pop	{r4, pc}
    eeda:	b510      	push	{r4, lr}
    eedc:	4604      	mov	r4, r0
    eede:	f7fd f921 	bl	c124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    eee2:	f644 112b 	movw	r1, #18731	; 0x492b
    eee6:	4008      	ands	r0, r1
    eee8:	2101      	movs	r1, #1
    eeea:	7561      	strb	r1, [r4, #21]
    eeec:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    eef0:	0a00      	lsrs	r0, r0, #8
    eef2:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    eef6:	20fe      	movs	r0, #254	; 0xfe
    eef8:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    eefc:	207f      	movs	r0, #127	; 0x7f
    eefe:	7260      	strb	r0, [r4, #9]
    ef00:	bd10      	pop	{r4, pc}
    ef02:	2801      	cmp	r0, #1
    ef04:	d002      	beq.n	ef0c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    ef06:	2802      	cmp	r0, #2
    ef08:	d003      	beq.n	ef12 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    ef0a:	e004      	b.n	ef16 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    ef0c:	2901      	cmp	r1, #1
    ef0e:	d004      	beq.n	ef1a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    ef10:	e001      	b.n	ef16 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    ef12:	2902      	cmp	r1, #2
    ef14:	d001      	beq.n	ef1a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    ef16:	2000      	movs	r0, #0
    ef18:	4770      	bx	lr
    ef1a:	2001      	movs	r0, #1
    ef1c:	4770      	bx	lr

0000ef1e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    ef1e:	b510      	push	{r4, lr}
    ef20:	4604      	mov	r4, r0
    ef22:	f890 0020 	ldrb.w	r0, [r0, #32]
    ef26:	b108      	cbz	r0, ef2c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    ef28:	2825      	cmp	r0, #37	; 0x25
    ef2a:	d901      	bls.n	ef30 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    ef2c:	2012      	movs	r0, #18
    ef2e:	bd10      	pop	{r4, pc}
    ef30:	b12a      	cbz	r2, ef3e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    ef32:	7d60      	ldrb	r0, [r4, #21]
    ef34:	b128      	cbz	r0, ef42 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    ef36:	2801      	cmp	r0, #1
    ef38:	d009      	beq.n	ef4e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    ef3a:	201f      	movs	r0, #31
    ef3c:	bd10      	pop	{r4, pc}
    ef3e:	2000      	movs	r0, #0
    ef40:	bd10      	pop	{r4, pc}
    ef42:	4620      	mov	r0, r4
    ef44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ef48:	4611      	mov	r1, r2
    ef4a:	f7f7 bfa3 	b.w	6e94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    ef4e:	88a2      	ldrh	r2, [r4, #4]
    ef50:	6909      	ldr	r1, [r1, #16]
    ef52:	f104 0015 	add.w	r0, r4, #21
    ef56:	f7f7 ff49 	bl	6dec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    ef5a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    ef5e:	e7ee      	b.n	ef3e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000ef60 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    ef60:	b530      	push	{r4, r5, lr}
    ef62:	1c42      	adds	r2, r0, #1
    ef64:	428a      	cmp	r2, r1
    ef66:	d004      	beq.n	ef72 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    ef68:	680a      	ldr	r2, [r1, #0]
    ef6a:	f8c0 2001 	str.w	r2, [r0, #1]
    ef6e:	7909      	ldrb	r1, [r1, #4]
    ef70:	7141      	strb	r1, [r0, #5]
    ef72:	7941      	ldrb	r1, [r0, #5]
    ef74:	f001 011f 	and.w	r1, r1, #31
    ef78:	7141      	strb	r1, [r0, #5]
    ef7a:	2100      	movs	r1, #0
    ef7c:	72c1      	strb	r1, [r0, #11]
    ef7e:	1843      	adds	r3, r0, r1
    ef80:	1c49      	adds	r1, r1, #1
    ef82:	785c      	ldrb	r4, [r3, #1]
    ef84:	b2c9      	uxtb	r1, r1
    ef86:	f004 0201 	and.w	r2, r4, #1
    ef8a:	0864      	lsrs	r4, r4, #1
    ef8c:	f004 0501 	and.w	r5, r4, #1
    ef90:	4415      	add	r5, r2
    ef92:	0862      	lsrs	r2, r4, #1
    ef94:	f002 0401 	and.w	r4, r2, #1
    ef98:	442c      	add	r4, r5
    ef9a:	0852      	lsrs	r2, r2, #1
    ef9c:	f002 0501 	and.w	r5, r2, #1
    efa0:	442c      	add	r4, r5
    efa2:	0852      	lsrs	r2, r2, #1
    efa4:	f002 0501 	and.w	r5, r2, #1
    efa8:	442c      	add	r4, r5
    efaa:	0852      	lsrs	r2, r2, #1
    efac:	f002 0501 	and.w	r5, r2, #1
    efb0:	442c      	add	r4, r5
    efb2:	0852      	lsrs	r2, r2, #1
    efb4:	f002 0501 	and.w	r5, r2, #1
    efb8:	442c      	add	r4, r5
    efba:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    efbe:	719a      	strb	r2, [r3, #6]
    efc0:	7ac3      	ldrb	r3, [r0, #11]
    efc2:	2905      	cmp	r1, #5
    efc4:	441a      	add	r2, r3
    efc6:	72c2      	strb	r2, [r0, #11]
    efc8:	d3d9      	bcc.n	ef7e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    efca:	bd30      	pop	{r4, r5, pc}

0000efcc <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    efcc:	68c0      	ldr	r0, [r0, #12]
    efce:	6008      	str	r0, [r1, #0]
    efd0:	4770      	bx	lr

0000efd2 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    efd2:	6842      	ldr	r2, [r0, #4]
    efd4:	600a      	str	r2, [r1, #0]
    efd6:	6880      	ldr	r0, [r0, #8]
    efd8:	6048      	str	r0, [r1, #4]
    efda:	4770      	bx	lr

0000efdc <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    efdc:	6842      	ldr	r2, [r0, #4]
    efde:	600a      	str	r2, [r1, #0]
    efe0:	6880      	ldr	r0, [r0, #8]
    efe2:	6048      	str	r0, [r1, #4]
    efe4:	4770      	bx	lr

0000efe6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    efe6:	7800      	ldrb	r0, [r0, #0]
    efe8:	f000 0003 	and.w	r0, r0, #3
    efec:	4770      	bx	lr

0000efee <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    efee:	8880      	ldrh	r0, [r0, #4]
    eff0:	4770      	bx	lr

0000eff2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    eff2:	88c0      	ldrh	r0, [r0, #6]
    eff4:	4770      	bx	lr

0000eff6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    eff6:	8900      	ldrh	r0, [r0, #8]
    eff8:	4770      	bx	lr

0000effa <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    effa:	8940      	ldrh	r0, [r0, #10]
    effc:	4770      	bx	lr

0000effe <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    effe:	7900      	ldrb	r0, [r0, #4]
    f000:	4770      	bx	lr

0000f002 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    f002:	7900      	ldrb	r0, [r0, #4]
    f004:	4770      	bx	lr

0000f006 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    f006:	8901      	ldrh	r1, [r0, #8]
    f008:	291b      	cmp	r1, #27
    f00a:	d30c      	bcc.n	f026 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f00c:	8941      	ldrh	r1, [r0, #10]
    f00e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    f012:	4291      	cmp	r1, r2
    f014:	d307      	bcc.n	f026 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f016:	8881      	ldrh	r1, [r0, #4]
    f018:	291b      	cmp	r1, #27
    f01a:	d304      	bcc.n	f026 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f01c:	88c0      	ldrh	r0, [r0, #6]
    f01e:	4290      	cmp	r0, r2
    f020:	d301      	bcc.n	f026 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    f022:	2001      	movs	r0, #1
    f024:	4770      	bx	lr
    f026:	2000      	movs	r0, #0
    f028:	4770      	bx	lr

0000f02a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    f02a:	b510      	push	{r4, lr}
    f02c:	29fb      	cmp	r1, #251	; 0xfb
    f02e:	d904      	bls.n	f03a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    f030:	f44f 61af 	mov.w	r1, #1400	; 0x578
    f034:	202a      	movs	r0, #42	; 0x2a
    f036:	f7f5 ff43 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f03a:	7041      	strb	r1, [r0, #1]
    f03c:	bd10      	pop	{r4, pc}

0000f03e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    f03e:	7901      	ldrb	r1, [r0, #4]
    f040:	0749      	lsls	r1, r1, #29
    f042:	d004      	beq.n	f04e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f044:	7940      	ldrb	r0, [r0, #5]
    f046:	0740      	lsls	r0, r0, #29
    f048:	d001      	beq.n	f04e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    f04a:	2001      	movs	r0, #1
    f04c:	4770      	bx	lr
    f04e:	2000      	movs	r0, #0
    f050:	4770      	bx	lr

0000f052 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    f052:	7901      	ldrb	r1, [r0, #4]
    f054:	0749      	lsls	r1, r1, #29
    f056:	d004      	beq.n	f062 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    f058:	7940      	ldrb	r0, [r0, #5]
    f05a:	0740      	lsls	r0, r0, #29
    f05c:	d001      	beq.n	f062 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    f05e:	2001      	movs	r0, #1
    f060:	4770      	bx	lr
    f062:	2000      	movs	r0, #0
    f064:	4770      	bx	lr

0000f066 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    f066:	7900      	ldrb	r0, [r0, #4]
    f068:	4770      	bx	lr

0000f06a <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    f06a:	7940      	ldrb	r0, [r0, #5]
    f06c:	4770      	bx	lr

0000f06e <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    f06e:	7101      	strb	r1, [r0, #4]
    f070:	4770      	bx	lr

0000f072 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    f072:	7141      	strb	r1, [r0, #5]
    f074:	4770      	bx	lr

0000f076 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    f076:	680a      	ldr	r2, [r1, #0]
    f078:	6042      	str	r2, [r0, #4]
    f07a:	7909      	ldrb	r1, [r1, #4]
    f07c:	7201      	strb	r1, [r0, #8]
    f07e:	4770      	bx	lr

0000f080 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    f080:	72c1      	strb	r1, [r0, #11]
    f082:	0a09      	lsrs	r1, r1, #8
    f084:	7301      	strb	r1, [r0, #12]
    f086:	4770      	bx	lr

0000f088 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    f088:	8809      	ldrh	r1, [r1, #0]
    f08a:	8181      	strh	r1, [r0, #12]
    f08c:	4770      	bx	lr

0000f08e <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    f08e:	6809      	ldr	r1, [r1, #0]
    f090:	f8c0 1016 	str.w	r1, [r0, #22]
    f094:	4770      	bx	lr

0000f096 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    f096:	680a      	ldr	r2, [r1, #0]
    f098:	6042      	str	r2, [r0, #4]
    f09a:	6849      	ldr	r1, [r1, #4]
    f09c:	6081      	str	r1, [r0, #8]
    f09e:	4770      	bx	lr

0000f0a0 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    f0a0:	680a      	ldr	r2, [r1, #0]
    f0a2:	f840 2f0e 	str.w	r2, [r0, #14]!
    f0a6:	6849      	ldr	r1, [r1, #4]
    f0a8:	6041      	str	r1, [r0, #4]
    f0aa:	4770      	bx	lr

0000f0ac <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    f0ac:	680a      	ldr	r2, [r1, #0]
    f0ae:	6042      	str	r2, [r0, #4]
    f0b0:	6849      	ldr	r1, [r1, #4]
    f0b2:	6081      	str	r1, [r0, #8]
    f0b4:	4770      	bx	lr

0000f0b6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    f0b6:	7802      	ldrb	r2, [r0, #0]
    f0b8:	f001 0103 	and.w	r1, r1, #3
    f0bc:	f022 0203 	bic.w	r2, r2, #3
    f0c0:	430a      	orrs	r2, r1
    f0c2:	7002      	strb	r2, [r0, #0]
    f0c4:	4770      	bx	lr

0000f0c6 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    f0c6:	7101      	strb	r1, [r0, #4]
    f0c8:	4770      	bx	lr

0000f0ca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    f0ca:	7101      	strb	r1, [r0, #4]
    f0cc:	0a09      	lsrs	r1, r1, #8
    f0ce:	7141      	strb	r1, [r0, #5]
    f0d0:	4770      	bx	lr

0000f0d2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    f0d2:	7181      	strb	r1, [r0, #6]
    f0d4:	0a09      	lsrs	r1, r1, #8
    f0d6:	71c1      	strb	r1, [r0, #7]
    f0d8:	4770      	bx	lr

0000f0da <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    f0da:	7201      	strb	r1, [r0, #8]
    f0dc:	0a09      	lsrs	r1, r1, #8
    f0de:	7241      	strb	r1, [r0, #9]
    f0e0:	4770      	bx	lr

0000f0e2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    f0e2:	7281      	strb	r1, [r0, #10]
    f0e4:	0a09      	lsrs	r1, r1, #8
    f0e6:	72c1      	strb	r1, [r0, #11]
    f0e8:	4770      	bx	lr

0000f0ea <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    f0ea:	7181      	strb	r1, [r0, #6]
    f0ec:	0a09      	lsrs	r1, r1, #8
    f0ee:	71c1      	strb	r1, [r0, #7]
    f0f0:	4770      	bx	lr

0000f0f2 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    f0f2:	7141      	strb	r1, [r0, #5]
    f0f4:	4770      	bx	lr

0000f0f6 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    f0f6:	7841      	ldrb	r1, [r0, #1]
    f0f8:	7800      	ldrb	r0, [r0, #0]
    f0fa:	f010 000f 	ands.w	r0, r0, #15
    f0fe:	d005      	beq.n	f10c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    f100:	2801      	cmp	r0, #1
    f102:	d007      	beq.n	f114 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    f104:	2802      	cmp	r0, #2
    f106:	d001      	beq.n	f10c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    f108:	2806      	cmp	r0, #6
    f10a:	d105      	bne.n	f118 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    f10c:	1f89      	subs	r1, r1, #6
    f10e:	291f      	cmp	r1, #31
    f110:	d904      	bls.n	f11c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    f112:	e001      	b.n	f118 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    f114:	290c      	cmp	r1, #12
    f116:	d001      	beq.n	f11c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    f118:	2000      	movs	r0, #0
    f11a:	4770      	bx	lr
    f11c:	2001      	movs	r0, #1
    f11e:	4770      	bx	lr

0000f120 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    f120:	7800      	ldrb	r0, [r0, #0]
    f122:	09c0      	lsrs	r0, r0, #7
    f124:	4770      	bx	lr

0000f126 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    f126:	f850 2f03 	ldr.w	r2, [r0, #3]!
    f12a:	600a      	str	r2, [r1, #0]
    f12c:	8880      	ldrh	r0, [r0, #4]
    f12e:	8088      	strh	r0, [r1, #4]
    f130:	4770      	bx	lr

0000f132 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    f132:	7800      	ldrb	r0, [r0, #0]
    f134:	f3c0 1080 	ubfx	r0, r0, #6, #1
    f138:	4770      	bx	lr

0000f13a <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    f13a:	7801      	ldrb	r1, [r0, #0]
    f13c:	f001 010f 	and.w	r1, r1, #15
    f140:	2904      	cmp	r1, #4
    f142:	d105      	bne.n	f150 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    f144:	7840      	ldrb	r0, [r0, #1]
    f146:	1f80      	subs	r0, r0, #6
    f148:	281f      	cmp	r0, #31
    f14a:	d801      	bhi.n	f150 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    f14c:	2001      	movs	r0, #1
    f14e:	4770      	bx	lr
    f150:	2000      	movs	r0, #0
    f152:	4770      	bx	lr

0000f154 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    f154:	b510      	push	{r4, lr}
    f156:	7802      	ldrb	r2, [r0, #0]
    f158:	f001 030f 	and.w	r3, r1, #15
    f15c:	f022 020f 	bic.w	r2, r2, #15
    f160:	431a      	orrs	r2, r3
    f162:	7002      	strb	r2, [r0, #0]
    f164:	2907      	cmp	r1, #7
    f166:	d20c      	bcs.n	f182 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    f168:	e8df f001 	tbb	[pc, r1]
    f16c:	06040604 	.word	0x06040604
    f170:	00040804 	.word	0x00040804
    f174:	2106      	movs	r1, #6
    f176:	e002      	b.n	f17e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f178:	210c      	movs	r1, #12
    f17a:	e000      	b.n	f17e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    f17c:	2122      	movs	r1, #34	; 0x22
    f17e:	7041      	strb	r1, [r0, #1]
    f180:	bd10      	pop	{r4, pc}
    f182:	216e      	movs	r1, #110	; 0x6e
    f184:	202a      	movs	r0, #42	; 0x2a
    f186:	f7f5 fe9b 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f18a <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    f18a:	680a      	ldr	r2, [r1, #0]
    f18c:	f840 2f09 	str.w	r2, [r0, #9]!
    f190:	8889      	ldrh	r1, [r1, #4]
    f192:	8081      	strh	r1, [r0, #4]
    f194:	4770      	bx	lr

0000f196 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    f196:	7802      	ldrb	r2, [r0, #0]
    f198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    f19c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    f1a0:	7002      	strb	r2, [r0, #0]
    f1a2:	4770      	bx	lr

0000f1a4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    f1a4:	680a      	ldr	r2, [r1, #0]
    f1a6:	f840 2f03 	str.w	r2, [r0, #3]!
    f1aa:	8889      	ldrh	r1, [r1, #4]
    f1ac:	8081      	strh	r1, [r0, #4]
    f1ae:	4770      	bx	lr

0000f1b0 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    f1b0:	7802      	ldrb	r2, [r0, #0]
    f1b2:	2340      	movs	r3, #64	; 0x40
    f1b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    f1b8:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    f1bc:	430a      	orrs	r2, r1
    f1be:	7002      	strb	r2, [r0, #0]
    f1c0:	4770      	bx	lr

0000f1c2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    f1c2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f1c6:	4604      	mov	r4, r0
    f1c8:	2000      	movs	r0, #0
    f1ca:	f7f6 f85d 	bl	5288 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f1ce:	2600      	movs	r6, #0
    f1d0:	4605      	mov	r5, r0
    f1d2:	4637      	mov	r7, r6
    f1d4:	e00e      	b.n	f1f4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    f1d6:	8820      	ldrh	r0, [r4, #0]
    f1d8:	1c40      	adds	r0, r0, #1
    f1da:	b280      	uxth	r0, r0
    f1dc:	8020      	strh	r0, [r4, #0]
    f1de:	42a8      	cmp	r0, r5
    f1e0:	d300      	bcc.n	f1e4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    f1e2:	8027      	strh	r7, [r4, #0]
    f1e4:	8820      	ldrh	r0, [r4, #0]
    f1e6:	4669      	mov	r1, sp
    f1e8:	f7ff fc85 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f1ec:	2800      	cmp	r0, #0
    f1ee:	d007      	beq.n	f200 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    f1f0:	1c76      	adds	r6, r6, #1
    f1f2:	b2f6      	uxtb	r6, r6
    f1f4:	42ae      	cmp	r6, r5
    f1f6:	d3ee      	bcc.n	f1d6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    f1f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f1fc:	8020      	strh	r0, [r4, #0]
    f1fe:	2012      	movs	r0, #18
    f200:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000f204 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    f204:	b510      	push	{r4, lr}
    f206:	7901      	ldrb	r1, [r0, #4]
    f208:	b119      	cbz	r1, f212 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    f20a:	2901      	cmp	r1, #1
    f20c:	d006      	beq.n	f21c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    f20e:	2000      	movs	r0, #0
    f210:	bd10      	pop	{r4, pc}
    f212:	8842      	ldrh	r2, [r0, #2]
    f214:	6883      	ldr	r3, [r0, #8]
    f216:	8800      	ldrh	r0, [r0, #0]
    f218:	2102      	movs	r1, #2
    f21a:	e003      	b.n	f224 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    f21c:	8842      	ldrh	r2, [r0, #2]
    f21e:	6883      	ldr	r3, [r0, #8]
    f220:	8800      	ldrh	r0, [r0, #0]
    f222:	2101      	movs	r1, #1
    f224:	f7f7 fec8 	bl	6fb8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    f228:	b908      	cbnz	r0, f22e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    f22a:	f7f7 ff13 	bl	7054 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    f22e:	2001      	movs	r0, #1
    f230:	bd10      	pop	{r4, pc}
    f232:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f236:	460e      	mov	r6, r1
    f238:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    f23c:	4617      	mov	r7, r2
    f23e:	39ff      	subs	r1, #255	; 0xff
    f240:	d014      	beq.n	f26c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f242:	8030      	strh	r0, [r6, #0]
    f244:	2100      	movs	r1, #0
    f246:	7171      	strb	r1, [r6, #5]
    f248:	f7f6 fa38 	bl	56bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    f24c:	4604      	mov	r4, r0
    f24e:	f7ff f912 	bl	e476 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f252:	0005      	movs	r5, r0
    f254:	d00a      	beq.n	f26c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    f256:	4620      	mov	r0, r4
    f258:	4629      	mov	r1, r5
    f25a:	aa01      	add	r2, sp, #4
    f25c:	f7ff f93c 	bl	e4d8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f260:	8070      	strh	r0, [r6, #2]
    f262:	b130      	cbz	r0, f272 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    f264:	28fb      	cmp	r0, #251	; 0xfb
    f266:	d906      	bls.n	f276 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    f268:	21ae      	movs	r1, #174	; 0xae
    f26a:	e026      	b.n	f2ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f26c:	2000      	movs	r0, #0
    f26e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f272:	21ad      	movs	r1, #173	; 0xad
    f274:	e021      	b.n	f2ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f276:	9801      	ldr	r0, [sp, #4]
    f278:	f7ff feb5 	bl	efe6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    f27c:	2801      	cmp	r0, #1
    f27e:	d003      	beq.n	f288 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f280:	2802      	cmp	r0, #2
    f282:	d001      	beq.n	f288 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    f284:	21bd      	movs	r1, #189	; 0xbd
    f286:	e018      	b.n	f2ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f288:	7130      	strb	r0, [r6, #4]
    f28a:	4629      	mov	r1, r5
    f28c:	8873      	ldrh	r3, [r6, #2]
    f28e:	2503      	movs	r5, #3
    f290:	4620      	mov	r0, r4
    f292:	463a      	mov	r2, r7
    f294:	9500      	str	r5, [sp, #0]
    f296:	f7fe ffc5 	bl	e224 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    f29a:	4620      	mov	r0, r4
    f29c:	60b7      	str	r7, [r6, #8]
    f29e:	f7ff f899 	bl	e3d4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f2a2:	b138      	cbz	r0, f2b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    f2a4:	2100      	movs	r1, #0
    f2a6:	4620      	mov	r0, r4
    f2a8:	460a      	mov	r2, r1
    f2aa:	f7ff f9f3 	bl	e694 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f2ae:	b118      	cbz	r0, f2b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    f2b0:	2001      	movs	r0, #1
    f2b2:	e7dc      	b.n	f26e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    f2b4:	21cd      	movs	r1, #205	; 0xcd
    f2b6:	e000      	b.n	f2ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    f2b8:	21d2      	movs	r1, #210	; 0xd2
    f2ba:	202b      	movs	r0, #43	; 0x2b
    f2bc:	f7f5 fe00 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f2c0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    f2c0:	f7f8 b8c4 	b.w	744c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    f2c4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f2c8:	4604      	mov	r4, r0
    f2ca:	2000      	movs	r0, #0
    f2cc:	f7f5 ffdc 	bl	5288 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    f2d0:	4605      	mov	r5, r0
    f2d2:	1c40      	adds	r0, r0, #1
    f2d4:	2600      	movs	r6, #0
    f2d6:	b2c7      	uxtb	r7, r0
    f2d8:	46b0      	mov	r8, r6
    f2da:	e017      	b.n	f30c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4c>
    f2dc:	8820      	ldrh	r0, [r4, #0]
    f2de:	1c40      	adds	r0, r0, #1
    f2e0:	b280      	uxth	r0, r0
    f2e2:	8020      	strh	r0, [r4, #0]
    f2e4:	42b8      	cmp	r0, r7
    f2e6:	d302      	bcc.n	f2ee <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    f2e8:	4640      	mov	r0, r8
    f2ea:	f8a4 8000 	strh.w	r8, [r4]
    f2ee:	b280      	uxth	r0, r0
    f2f0:	42a8      	cmp	r0, r5
    f2f2:	d304      	bcc.n	f2fe <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    f2f4:	42b8      	cmp	r0, r7
    f2f6:	d202      	bcs.n	f2fe <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    f2f8:	2000      	movs	r0, #0
    f2fa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f2fe:	4669      	mov	r1, sp
    f300:	f7ff fbf9 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f304:	2800      	cmp	r0, #0
    f306:	d0f8      	beq.n	f2fa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>
    f308:	1c76      	adds	r6, r6, #1
    f30a:	b2f6      	uxtb	r6, r6
    f30c:	42be      	cmp	r6, r7
    f30e:	d3e5      	bcc.n	f2dc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    f310:	f64f 70ff 	movw	r0, #65535	; 0xffff
    f314:	8020      	strh	r0, [r4, #0]
    f316:	2012      	movs	r0, #18
    f318:	e7ef      	b.n	f2fa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>

0000f31a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    f31a:	b570      	push	{r4, r5, r6, lr}
    f31c:	8050      	strh	r0, [r2, #2]
    f31e:	890c      	ldrh	r4, [r1, #8]
    f320:	8094      	strh	r4, [r2, #4]
    f322:	898b      	ldrh	r3, [r1, #12]
    f324:	80d3      	strh	r3, [r2, #6]
    f326:	8948      	ldrh	r0, [r1, #10]
    f328:	8110      	strh	r0, [r2, #8]
    f32a:	89cd      	ldrh	r5, [r1, #14]
    f32c:	8155      	strh	r5, [r2, #10]
    f32e:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    f330:	42ae      	cmp	r6, r5
    f332:	d108      	bne.n	f346 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f334:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    f336:	4285      	cmp	r5, r0
    f338:	d105      	bne.n	f346 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f33a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    f33c:	429d      	cmp	r5, r3
    f33e:	d102      	bne.n	f346 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    f340:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    f342:	42a3      	cmp	r3, r4
    f344:	d001      	beq.n	f34a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    f346:	2301      	movs	r3, #1
    f348:	e000      	b.n	f34c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    f34a:	2300      	movs	r3, #0
    f34c:	7313      	strb	r3, [r2, #12]
    f34e:	8548      	strh	r0, [r1, #42]	; 0x2a
    f350:	8950      	ldrh	r0, [r2, #10]
    f352:	85c8      	strh	r0, [r1, #46]	; 0x2e
    f354:	8890      	ldrh	r0, [r2, #4]
    f356:	8588      	strh	r0, [r1, #44]	; 0x2c
    f358:	88d0      	ldrh	r0, [r2, #6]
    f35a:	8608      	strh	r0, [r1, #48]	; 0x30
    f35c:	2001      	movs	r0, #1
    f35e:	7010      	strb	r0, [r2, #0]
    f360:	bd70      	pop	{r4, r5, r6, pc}

0000f362 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    f362:	b510      	push	{r4, lr}
    f364:	888c      	ldrh	r4, [r1, #4]
    f366:	890a      	ldrh	r2, [r1, #8]
    f368:	884b      	ldrh	r3, [r1, #2]
    f36a:	88c9      	ldrh	r1, [r1, #6]
    f36c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    f370:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    f374:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    f378:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    f37c:	bd10      	pop	{r4, pc}

0000f37e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    f37e:	b570      	push	{r4, r5, r6, lr}
    f380:	4615      	mov	r5, r2
    f382:	460c      	mov	r4, r1
    f384:	f000 f8c7 	bl	f516 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f388:	3096      	adds	r0, #150	; 0x96
    f38a:	4428      	add	r0, r5
    f38c:	42a0      	cmp	r0, r4
    f38e:	d801      	bhi.n	f394 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    f390:	1a20      	subs	r0, r4, r0
    f392:	bd70      	pop	{r4, r5, r6, pc}
    f394:	2000      	movs	r0, #0
    f396:	bd70      	pop	{r4, r5, r6, pc}

0000f398 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    f398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f39c:	4604      	mov	r4, r0
    f39e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    f3a0:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    f3a2:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    f3a6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    f3aa:	4285      	cmp	r5, r0
    f3ac:	d300      	bcc.n	f3b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    f3ae:	4605      	mov	r5, r0
    f3b0:	4620      	mov	r0, r4
    f3b2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    f3b6:	f000 f89e 	bl	f4f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f3ba:	4601      	mov	r1, r0
    f3bc:	86e5      	strh	r5, [r4, #54]	; 0x36
    f3be:	8761      	strh	r1, [r4, #58]	; 0x3a
    f3c0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    f3c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    f3c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    f3c8:	4680      	mov	r8, r0
    f3ca:	42aa      	cmp	r2, r5
    f3cc:	d200      	bcs.n	f3d0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    f3ce:	462a      	mov	r2, r5
    f3d0:	428b      	cmp	r3, r1
    f3d2:	d200      	bcs.n	f3d6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    f3d4:	460b      	mov	r3, r1
    f3d6:	8202      	strh	r2, [r0, #16]
    f3d8:	f8a8 3012 	strh.w	r3, [r8, #18]
    f3dc:	42bd      	cmp	r5, r7
    f3de:	d101      	bne.n	f3e4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    f3e0:	42b1      	cmp	r1, r6
    f3e2:	d001      	beq.n	f3e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    f3e4:	2001      	movs	r0, #1
    f3e6:	e000      	b.n	f3ea <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    f3e8:	2000      	movs	r0, #0
    f3ea:	4681      	mov	r9, r0
    f3ec:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    f3f0:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    f3f4:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    f3f6:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    f3f8:	4285      	cmp	r5, r0
    f3fa:	d300      	bcc.n	f3fe <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    f3fc:	4605      	mov	r5, r0
    f3fe:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    f402:	4620      	mov	r0, r4
    f404:	f000 f87f 	bl	f506 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f408:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    f40c:	2902      	cmp	r1, #2
    f40e:	d108      	bne.n	f422 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    f410:	42af      	cmp	r7, r5
    f412:	d200      	bcs.n	f416 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    f414:	463d      	mov	r5, r7
    f416:	4286      	cmp	r6, r0
    f418:	d200      	bcs.n	f41c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    f41a:	4630      	mov	r0, r6
    f41c:	2100      	movs	r1, #0
    f41e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    f422:	f8a8 5008 	strh.w	r5, [r8, #8]
    f426:	f8a8 000c 	strh.w	r0, [r8, #12]
    f42a:	42bd      	cmp	r5, r7
    f42c:	d101      	bne.n	f432 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    f42e:	42b0      	cmp	r0, r6
    f430:	d001      	beq.n	f436 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    f432:	2001      	movs	r0, #1
    f434:	e000      	b.n	f438 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    f436:	2000      	movs	r0, #0
    f438:	ea40 0009 	orr.w	r0, r0, r9
    f43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000f440 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    f440:	6840      	ldr	r0, [r0, #4]
    f442:	4770      	bx	lr

0000f444 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    f444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f448:	4616      	mov	r6, r2
    f44a:	460f      	mov	r7, r1
    f44c:	4604      	mov	r4, r0
    f44e:	f000 f862 	bl	f516 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    f452:	4605      	mov	r5, r0
    f454:	463a      	mov	r2, r7
    f456:	68e1      	ldr	r1, [r4, #12]
    f458:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    f45a:	f000 f847 	bl	f4ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    f45e:	19a9      	adds	r1, r5, r6
    f460:	4281      	cmp	r1, r0
    f462:	d300      	bcc.n	f466 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    f464:	4608      	mov	r0, r1
    f466:	6320      	str	r0, [r4, #48]	; 0x30
    f468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f46c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    f46c:	221b      	movs	r2, #27
    f46e:	8402      	strh	r2, [r0, #32]
    f470:	8382      	strh	r2, [r0, #28]
    f472:	82c2      	strh	r2, [r0, #22]
    f474:	8282      	strh	r2, [r0, #20]
    f476:	8142      	strh	r2, [r0, #10]
    f478:	8202      	strh	r2, [r0, #16]
    f47a:	8102      	strh	r2, [r0, #8]
    f47c:	8542      	strh	r2, [r0, #42]	; 0x2a
    f47e:	8582      	strh	r2, [r0, #44]	; 0x2c
    f480:	8482      	strh	r2, [r0, #36]	; 0x24
    f482:	2900      	cmp	r1, #0
    f484:	d10a      	bne.n	f49c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    f486:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f48a:	8441      	strh	r1, [r0, #34]	; 0x22
    f48c:	83c1      	strh	r1, [r0, #30]
    f48e:	8341      	strh	r1, [r0, #26]
    f490:	8301      	strh	r1, [r0, #24]
    f492:	81c1      	strh	r1, [r0, #14]
    f494:	8241      	strh	r1, [r0, #18]
    f496:	8181      	strh	r1, [r0, #12]
    f498:	85c1      	strh	r1, [r0, #46]	; 0x2e
    f49a:	8601      	strh	r1, [r0, #48]	; 0x30
    f49c:	4770      	bx	lr

0000f49e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    f49e:	6800      	ldr	r0, [r0, #0]
    f4a0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    f4a4:	4290      	cmp	r0, r2
    f4a6:	d903      	bls.n	f4b0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    f4a8:	1a40      	subs	r0, r0, r1
    f4aa:	389c      	subs	r0, #156	; 0x9c
    f4ac:	0840      	lsrs	r0, r0, #1
    f4ae:	4770      	bx	lr
    f4b0:	2000      	movs	r0, #0
    f4b2:	4770      	bx	lr

0000f4b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    f4b4:	b510      	push	{r4, lr}
    f4b6:	9c02      	ldr	r4, [sp, #8]
    f4b8:	8281      	strh	r1, [r0, #20]
    f4ba:	82c2      	strh	r2, [r0, #22]
    f4bc:	8303      	strh	r3, [r0, #24]
    f4be:	8344      	strh	r4, [r0, #26]
    f4c0:	bd10      	pop	{r4, pc}

0000f4c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    f4c2:	8050      	strh	r0, [r2, #2]
    f4c4:	8a88      	ldrh	r0, [r1, #20]
    f4c6:	8090      	strh	r0, [r2, #4]
    f4c8:	8ac8      	ldrh	r0, [r1, #22]
    f4ca:	80d0      	strh	r0, [r2, #6]
    f4cc:	8b08      	ldrh	r0, [r1, #24]
    f4ce:	8110      	strh	r0, [r2, #8]
    f4d0:	8b48      	ldrh	r0, [r1, #26]
    f4d2:	8150      	strh	r0, [r2, #10]
    f4d4:	2001      	movs	r0, #1
    f4d6:	7010      	strb	r0, [r2, #0]
    f4d8:	4770      	bx	lr
    f4da:	2902      	cmp	r1, #2
    f4dc:	d003      	beq.n	f4e6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    f4de:	00c0      	lsls	r0, r0, #3
    f4e0:	3070      	adds	r0, #112	; 0x70
    f4e2:	b280      	uxth	r0, r0
    f4e4:	4770      	bx	lr
    f4e6:	0080      	lsls	r0, r0, #2
    f4e8:	303c      	adds	r0, #60	; 0x3c
    f4ea:	e7fa      	b.n	f4e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    f4ec:	4288      	cmp	r0, r1
    f4ee:	d300      	bcc.n	f4f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    f4f0:	4608      	mov	r0, r1
    f4f2:	1a80      	subs	r0, r0, r2
    f4f4:	4770      	bx	lr
    f4f6:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    f4fa:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    f4fe:	4281      	cmp	r1, r0
    f500:	d200      	bcs.n	f504 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    f502:	4608      	mov	r0, r1
    f504:	4770      	bx	lr
    f506:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    f50a:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    f50e:	4281      	cmp	r1, r0
    f510:	d200      	bcs.n	f514 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    f512:	4608      	mov	r0, r1
    f514:	4770      	bx	lr
    f516:	2196      	movs	r1, #150	; 0x96
    f518:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    f51c:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    f520:	f000 b800 	b.w	f524 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    f524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f528:	460d      	mov	r5, r1
    f52a:	4606      	mov	r6, r0
    f52c:	4698      	mov	r8, r3
    f52e:	4617      	mov	r7, r2
    f530:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    f532:	4611      	mov	r1, r2
    f534:	f7ff ffd1 	bl	f4da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f538:	4604      	mov	r4, r0
    f53a:	4639      	mov	r1, r7
    f53c:	4630      	mov	r0, r6
    f53e:	f7ff ffe2 	bl	f506 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    f542:	42a0      	cmp	r0, r4
    f544:	d200      	bcs.n	f548 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    f546:	4604      	mov	r4, r0
    f548:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    f54a:	4641      	mov	r1, r8
    f54c:	f7ff ffc5 	bl	f4da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    f550:	4607      	mov	r7, r0
    f552:	4641      	mov	r1, r8
    f554:	4630      	mov	r0, r6
    f556:	f7ff ffce 	bl	f4f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    f55a:	42b8      	cmp	r0, r7
    f55c:	d300      	bcc.n	f560 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    f55e:	4638      	mov	r0, r7
    f560:	4420      	add	r0, r4
    f562:	4428      	add	r0, r5
    f564:	1d80      	adds	r0, r0, #6
    f566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000f56a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    f56a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    f56c:	2700      	movs	r7, #0
    f56e:	463d      	mov	r5, r7
    f570:	2623      	movs	r6, #35	; 0x23
    f572:	f7f8 f81d 	bl	75b0 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x58>
    f576:	4604      	mov	r4, r0
    f578:	f7f7 ffee 	bl	7558 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    f57c:	b190      	cbz	r0, f5a4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    f57e:	4669      	mov	r1, sp
    f580:	2000      	movs	r0, #0
    f582:	f7ff f957 	bl	e834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    f586:	e003      	b.n	f590 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x26>
    f588:	9802      	ldr	r0, [sp, #8]
    f58a:	6901      	ldr	r1, [r0, #16]
    f58c:	42a1      	cmp	r1, r4
    f58e:	d009      	beq.n	f5a4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    f590:	4668      	mov	r0, sp
    f592:	f7f5 fec5 	bl	5320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f596:	2800      	cmp	r0, #0
    f598:	d0f6      	beq.n	f588 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x1e>
    f59a:	4625      	mov	r5, r4
    f59c:	4620      	mov	r0, r4
    f59e:	f7f7 ff9f 	bl	74e0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    f5a2:	4607      	mov	r7, r0
    f5a4:	1e76      	subs	r6, r6, #1
    f5a6:	d001      	beq.n	f5ac <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x42>
    f5a8:	2f00      	cmp	r7, #0
    f5aa:	d0e2      	beq.n	f572 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8>
    f5ac:	b10d      	cbz	r5, f5b2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x48>
    f5ae:	4628      	mov	r0, r5
    f5b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    f5b2:	f240 1177 	movw	r1, #375	; 0x177
    f5b6:	200f      	movs	r0, #15
    f5b8:	f7f5 fc82 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f5bc:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    f5c0:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    f5c4:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    f5c8:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    f5cc:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    f5d0:	ea10 0f40 	tst.w	r0, r0, lsl #1
    f5d4:	d001      	beq.n	f5da <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x70>
    f5d6:	2000      	movs	r0, #0
    f5d8:	4770      	bx	lr
    f5da:	2001      	movs	r0, #1
    f5dc:	4770      	bx	lr

0000f5de <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    f5de:	b510      	push	{r4, lr}
    f5e0:	4604      	mov	r4, r0
    f5e2:	2108      	movs	r1, #8
    f5e4:	4620      	mov	r0, r4
    f5e6:	f7f5 fd15 	bl	5014 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    f5ea:	6820      	ldr	r0, [r4, #0]
    f5ec:	2800      	cmp	r0, #0
    f5ee:	d102      	bne.n	f5f6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    f5f0:	6860      	ldr	r0, [r4, #4]
    f5f2:	2800      	cmp	r0, #0
    f5f4:	d0f5      	beq.n	f5e2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    f5f6:	bd10      	pop	{r4, pc}
    f5f8:	2801      	cmp	r0, #1
    f5fa:	d102      	bne.n	f602 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    f5fc:	7948      	ldrb	r0, [r1, #5]
    f5fe:	0980      	lsrs	r0, r0, #6
    f600:	d001      	beq.n	f606 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    f602:	2000      	movs	r0, #0
    f604:	4770      	bx	lr
    f606:	2001      	movs	r0, #1
    f608:	4770      	bx	lr
    f60a:	2801      	cmp	r0, #1
    f60c:	d106      	bne.n	f61c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    f60e:	7948      	ldrb	r0, [r1, #5]
    f610:	2101      	movs	r1, #1
    f612:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    f616:	d101      	bne.n	f61c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    f618:	2001      	movs	r0, #1
    f61a:	4770      	bx	lr
    f61c:	2000      	movs	r0, #0
    f61e:	4770      	bx	lr
    f620:	b118      	cbz	r0, f62a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    f622:	2802      	cmp	r0, #2
    f624:	d001      	beq.n	f62a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    f626:	2001      	movs	r0, #1
    f628:	4770      	bx	lr
    f62a:	2000      	movs	r0, #0
    f62c:	4770      	bx	lr
    f62e:	2802      	cmp	r0, #2
    f630:	d003      	beq.n	f63a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    f632:	2803      	cmp	r0, #3
    f634:	d001      	beq.n	f63a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    f636:	2000      	movs	r0, #0
    f638:	4770      	bx	lr
    f63a:	2001      	movs	r0, #1
    f63c:	4770      	bx	lr

0000f63e <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    f63e:	f7f9 b807 	b.w	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    f642:	b510      	push	{r4, lr}
    f644:	f7f8 fe52 	bl	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    f648:	f7f8 f9f4 	bl	7a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f64c:	f7fc ffe8 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f650:	2005      	movs	r0, #5
    f652:	bd10      	pop	{r4, pc}
    f654:	b510      	push	{r4, lr}
    f656:	f7f8 fe49 	bl	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    f65a:	f7fc ffe1 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f65e:	2005      	movs	r0, #5
    f660:	bd10      	pop	{r4, pc}
    f662:	b530      	push	{r4, r5, lr}
    f664:	b089      	sub	sp, #36	; 0x24
    f666:	4605      	mov	r5, r0
    f668:	f7f8 fe40 	bl	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    f66c:	7828      	ldrb	r0, [r5, #0]
    f66e:	4669      	mov	r1, sp
    f670:	f000 040f 	and.w	r4, r0, #15
    f674:	4622      	mov	r2, r4
    f676:	4628      	mov	r0, r5
    f678:	f7f9 f9aa 	bl	89d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f67c:	2200      	movs	r2, #0
    f67e:	4621      	mov	r1, r4
    f680:	4668      	mov	r0, sp
    f682:	f7f8 fa57 	bl	7b34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    f686:	4621      	mov	r1, r4
    f688:	4668      	mov	r0, sp
    f68a:	f7f8 fdaf 	bl	81ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    f68e:	4604      	mov	r4, r0
    f690:	f7f8 f9d0 	bl	7a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    f694:	b009      	add	sp, #36	; 0x24
    f696:	4620      	mov	r0, r4
    f698:	bd30      	pop	{r4, r5, pc}
    f69a:	f240 21f2 	movw	r1, #754	; 0x2f2
    f69e:	2032      	movs	r0, #50	; 0x32
    f6a0:	f7f5 fc0e 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f6a4:	b510      	push	{r4, lr}
    f6a6:	f7f8 fe21 	bl	82ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    f6aa:	f7fc ffb9 	bl	c620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    f6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f6b2:	f7f8 bfe5 	b.w	8680 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x680>
    f6b6:	f7f8 bfcb 	b.w	8650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    f6ba:	f7ff b81f 	b.w	e6fc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000f6be <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    f6be:	b5f0      	push	{r4, r5, r6, r7, lr}
    f6c0:	b08b      	sub	sp, #44	; 0x2c
    f6c2:	4607      	mov	r7, r0
    f6c4:	f7f6 f82e 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f6c8:	4604      	mov	r4, r0
    f6ca:	f7fe fed4 	bl	e476 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    f6ce:	0005      	movs	r5, r0
    f6d0:	d00c      	beq.n	f6ec <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    f6d2:	4620      	mov	r0, r4
    f6d4:	4629      	mov	r1, r5
    f6d6:	466a      	mov	r2, sp
    f6d8:	f7fe fefe 	bl	e4d8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    f6dc:	4606      	mov	r6, r0
    f6de:	f7f6 f81b 	bl	5718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f6e2:	42b0      	cmp	r0, r6
    f6e4:	d005      	beq.n	f6f2 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    f6e6:	f44f 7198 	mov.w	r1, #304	; 0x130
    f6ea:	e033      	b.n	f754 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    f6ec:	2000      	movs	r0, #0
    f6ee:	b00b      	add	sp, #44	; 0x2c
    f6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f6f2:	a901      	add	r1, sp, #4
    f6f4:	9800      	ldr	r0, [sp, #0]
    f6f6:	f000 f8b4 	bl	f862 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    f6fa:	1d3e      	adds	r6, r7, #4
    f6fc:	4628      	mov	r0, r5
    f6fe:	f7fe fe4e 	bl	e39e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f702:	4605      	mov	r5, r0
    f704:	4601      	mov	r1, r0
    f706:	221c      	movs	r2, #28
    f708:	4630      	mov	r0, r6
    f70a:	f7fd ffe9 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f70e:	7aa8      	ldrb	r0, [r5, #10]
    f710:	f04f 0500 	mov.w	r5, #0
    f714:	06c1      	lsls	r1, r0, #27
    f716:	d50d      	bpl.n	f734 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    f718:	0740      	lsls	r0, r0, #29
    f71a:	d40a      	bmi.n	f732 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    f71c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    f720:	f106 001c 	add.w	r0, r6, #28
    f724:	9904      	ldr	r1, [sp, #16]
    f726:	f7fd ffdb 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f72a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    f72e:	7230      	strb	r0, [r6, #8]
    f730:	e000      	b.n	f734 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    f732:	7235      	strb	r5, [r6, #8]
    f734:	707d      	strb	r5, [r7, #1]
    f736:	2005      	movs	r0, #5
    f738:	7038      	strb	r0, [r7, #0]
    f73a:	4620      	mov	r0, r4
    f73c:	f7fe fe4a 	bl	e3d4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    f740:	b130      	cbz	r0, f750 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    f742:	2100      	movs	r1, #0
    f744:	4620      	mov	r0, r4
    f746:	460a      	mov	r2, r1
    f748:	f7fe ffa4 	bl	e694 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    f74c:	2001      	movs	r0, #1
    f74e:	e7ce      	b.n	f6ee <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    f750:	f240 1173 	movw	r1, #371	; 0x173
    f754:	2033      	movs	r0, #51	; 0x33
    f756:	f7f5 fbb3 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000f75a <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    f75a:	b510      	push	{r4, lr}
    f75c:	f7f5 ffe2 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f760:	f000 f874 	bl	f84c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    f764:	4604      	mov	r4, r0
    f766:	221c      	movs	r2, #28
    f768:	2100      	movs	r1, #0
    f76a:	f7fe f833 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f76e:	207f      	movs	r0, #127	; 0x7f
    f770:	76a0      	strb	r0, [r4, #26]
    f772:	21ff      	movs	r1, #255	; 0xff
    f774:	73a1      	strb	r1, [r4, #14]
    f776:	7061      	strb	r1, [r4, #1]
    f778:	74e1      	strb	r1, [r4, #19]
    f77a:	7aa0      	ldrb	r0, [r4, #10]
    f77c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    f780:	3020      	adds	r0, #32
    f782:	72a0      	strb	r0, [r4, #10]
    f784:	bd10      	pop	{r4, pc}

0000f786 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    f786:	f7ff bfe8 	b.w	f75a <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000f78a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    f78a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f78e:	461e      	mov	r6, r3
    f790:	4617      	mov	r7, r2
    f792:	4689      	mov	r9, r1
    f794:	4682      	mov	sl, r0
    f796:	f8dd 8020 	ldr.w	r8, [sp, #32]
    f79a:	f7f5 ffc3 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f79e:	4604      	mov	r4, r0
    f7a0:	f7fe fdff 	bl	e3a2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    f7a4:	2801      	cmp	r0, #1
    f7a6:	d034      	beq.n	f812 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    f7a8:	4620      	mov	r0, r4
    f7aa:	f000 f84f 	bl	f84c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    f7ae:	4604      	mov	r4, r0
    f7b0:	221c      	movs	r2, #28
    f7b2:	2100      	movs	r1, #0
    f7b4:	f7fe f80e 	bl	d7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    f7b8:	2501      	movs	r5, #1
    f7ba:	7025      	strb	r5, [r4, #0]
    f7bc:	1c63      	adds	r3, r4, #1
    f7be:	1ca2      	adds	r2, r4, #2
    f7c0:	4649      	mov	r1, r9
    f7c2:	4650      	mov	r0, sl
    f7c4:	f000 f827 	bl	f816 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    f7c8:	f884 8009 	strb.w	r8, [r4, #9]
    f7cc:	7aa0      	ldrb	r0, [r4, #10]
    f7ce:	21ff      	movs	r1, #255	; 0xff
    f7d0:	f367 0000 	bfi	r0, r7, #0, #1
    f7d4:	f040 001a 	orr.w	r0, r0, #26
    f7d8:	72a0      	strb	r0, [r4, #10]
    f7da:	7325      	strb	r5, [r4, #12]
    f7dc:	2000      	movs	r0, #0
    f7de:	7360      	strb	r0, [r4, #13]
    f7e0:	73a1      	strb	r1, [r4, #14]
    f7e2:	74e1      	strb	r1, [r4, #19]
    f7e4:	207f      	movs	r0, #127	; 0x7f
    f7e6:	76a0      	strb	r0, [r4, #26]
    f7e8:	76e6      	strb	r6, [r4, #27]
    f7ea:	f7f5 ff95 	bl	5718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    f7ee:	4604      	mov	r4, r0
    f7f0:	f7f5 ff98 	bl	5724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    f7f4:	2201      	movs	r2, #1
    f7f6:	4621      	mov	r1, r4
    f7f8:	f000 f831 	bl	f85e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    f7fc:	b120      	cbz	r0, f808 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    f7fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f802:	2005      	movs	r0, #5
    f804:	f7f9 b9ac 	b.w	8b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    f808:	f240 21c9 	movw	r1, #713	; 0x2c9
    f80c:	2033      	movs	r0, #51	; 0x33
    f80e:	f7f5 fb57 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f816:	b510      	push	{r4, lr}
    f818:	461c      	mov	r4, r3
    f81a:	460b      	mov	r3, r1
    f81c:	29ff      	cmp	r1, #255	; 0xff
    f81e:	d00d      	beq.n	f83c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    f820:	4621      	mov	r1, r4
    f822:	4618      	mov	r0, r3
    f824:	f7f7 f81a 	bl	685c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    f828:	b120      	cbz	r0, f834 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    f82a:	7820      	ldrb	r0, [r4, #0]
    f82c:	f040 0002 	orr.w	r0, r0, #2
    f830:	7020      	strb	r0, [r4, #0]
    f832:	bd10      	pop	{r4, pc}
    f834:	2150      	movs	r1, #80	; 0x50
    f836:	2033      	movs	r0, #51	; 0x33
    f838:	f7f5 fb42 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f83c:	7c41      	ldrb	r1, [r0, #17]
    f83e:	7021      	strb	r1, [r4, #0]
    f840:	6840      	ldr	r0, [r0, #4]
    f842:	6801      	ldr	r1, [r0, #0]
    f844:	6011      	str	r1, [r2, #0]
    f846:	8880      	ldrh	r0, [r0, #4]
    f848:	8090      	strh	r0, [r2, #4]
    f84a:	bd10      	pop	{r4, pc}
    f84c:	b51c      	push	{r2, r3, r4, lr}
    f84e:	4669      	mov	r1, sp
    f850:	aa01      	add	r2, sp, #4
    f852:	f7fe fe33 	bl	e4bc <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    f856:	9800      	ldr	r0, [sp, #0]
    f858:	f7fe fda1 	bl	e39e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    f85c:	bd1c      	pop	{r2, r3, r4, pc}
    f85e:	f7fe bd46 	b.w	e2ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000f862 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    f862:	7802      	ldrb	r2, [r0, #0]
    f864:	f002 020f 	and.w	r2, r2, #15
    f868:	f7f9 b8b2 	b.w	89d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    f86c:	2800      	cmp	r0, #0
    f86e:	db04      	blt.n	f87a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    f870:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f874:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    f878:	e005      	b.n	f886 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    f87a:	f000 000f 	and.w	r0, r0, #15
    f87e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    f882:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    f886:	0940      	lsrs	r0, r0, #5
    f888:	4770      	bx	lr
    f88a:	6940      	ldr	r0, [r0, #20]
    f88c:	2800      	cmp	r0, #0
    f88e:	d000      	beq.n	f892 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x30>
    f890:	2001      	movs	r0, #1
    f892:	4770      	bx	lr

0000f894 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    f894:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    f898:	4770      	bx	lr
    f89a:	b510      	push	{r4, lr}
    f89c:	2808      	cmp	r0, #8
    f89e:	d00a      	beq.n	f8b6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x22>
    f8a0:	2804      	cmp	r0, #4
    f8a2:	d00a      	beq.n	f8ba <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x26>
    f8a4:	2802      	cmp	r0, #2
    f8a6:	d00a      	beq.n	f8be <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2a>
    f8a8:	2108      	movs	r1, #8
    f8aa:	2801      	cmp	r0, #1
    f8ac:	d009      	beq.n	f8c2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    f8ae:	21d9      	movs	r1, #217	; 0xd9
    f8b0:	2005      	movs	r0, #5
    f8b2:	f7f5 fb05 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f8b6:	2140      	movs	r1, #64	; 0x40
    f8b8:	e7f7      	b.n	f8aa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    f8ba:	2110      	movs	r1, #16
    f8bc:	e7f5      	b.n	f8aa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    f8be:	2104      	movs	r1, #4
    f8c0:	e7f3      	b.n	f8aa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    f8c2:	222a      	movs	r2, #42	; 0x2a
    f8c4:	2028      	movs	r0, #40	; 0x28
    f8c6:	fb11 0002 	smlabb	r0, r1, r2, r0
    f8ca:	b280      	uxth	r0, r0
    f8cc:	bd10      	pop	{r4, pc}
    f8ce:	2000      	movs	r0, #0
    f8d0:	4770      	bx	lr
    f8d2:	b570      	push	{r4, r5, r6, lr}
    f8d4:	4604      	mov	r4, r0
    f8d6:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    f8da:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    f8de:	f000 f80c 	bl	f8fa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x66>
    f8e2:	4605      	mov	r5, r0
    f8e4:	f000 f857 	bl	f996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    f8e8:	4601      	mov	r1, r0
    f8ea:	462a      	mov	r2, r5
    f8ec:	4620      	mov	r0, r4
    f8ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    f8f2:	f7ff bda7 	b.w	f444 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    f8f6:	f7f3 b84b 	b.w	2990 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    f8fa:	b510      	push	{r4, lr}
    f8fc:	4604      	mov	r4, r0
    f8fe:	4608      	mov	r0, r1
    f900:	f001 f919 	bl	10b36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    f904:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    f908:	2c02      	cmp	r4, #2
    f90a:	d00a      	beq.n	f922 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x8e>
    f90c:	f640 0234 	movw	r2, #2100	; 0x834
    f910:	4410      	add	r0, r2
    f912:	f24a 5295 	movw	r2, #42389	; 0xa595
    f916:	4410      	add	r0, r2
    f918:	fbb0 f0f1 	udiv	r0, r0, r1
    f91c:	f200 1037 	addw	r0, r0, #311	; 0x137
    f920:	bd10      	pop	{r4, pc}
    f922:	460a      	mov	r2, r1
    f924:	e7f4      	b.n	f910 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7c>
    f926:	b510      	push	{r4, lr}
    f928:	4604      	mov	r4, r0
    f92a:	2000      	movs	r0, #0
    f92c:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    f930:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    f934:	f7f3 fc78 	bl	3228 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    f938:	b140      	cbz	r0, f94c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb8>
    f93a:	2020      	movs	r0, #32
    f93c:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    f940:	f504 7084 	add.w	r0, r4, #264	; 0x108
    f944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f948:	f7fb bed6 	b.w	b6f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    f94c:	f44f 61a6 	mov.w	r1, #1328	; 0x530
    f950:	2035      	movs	r0, #53	; 0x35
    f952:	f7f5 fab5 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f956:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    f958:	4613      	mov	r3, r2
    f95a:	460a      	mov	r2, r1
    f95c:	4604      	mov	r4, r0
    f95e:	4601      	mov	r1, r0
    f960:	4668      	mov	r0, sp
    f962:	f7f9 fce3 	bl	932c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x520>
    f966:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    f96a:	4669      	mov	r1, sp
    f96c:	f7ff ffc3 	bl	f8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    f970:	2800      	cmp	r0, #0
    f972:	d104      	bne.n	f97e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xea>
    f974:	f640 2139 	movw	r1, #2617	; 0xa39
    f978:	2035      	movs	r0, #53	; 0x35
    f97a:	f7f5 faa1 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f97e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    f980:	b510      	push	{r4, lr}
    f982:	245b      	movs	r4, #91	; 0x5b
    f984:	f001 f895 	bl	10ab2 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    f988:	b910      	cbnz	r0, f990 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    f98a:	f001 f888 	bl	10a9e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    f98e:	b100      	cbz	r0, f992 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfe>
    f990:	2462      	movs	r4, #98	; 0x62
    f992:	4620      	mov	r0, r4
    f994:	bd10      	pop	{r4, pc}
    f996:	b510      	push	{r4, lr}
    f998:	f7ff fff2 	bl	f980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    f99c:	3069      	adds	r0, #105	; 0x69
    f99e:	b280      	uxth	r0, r0
    f9a0:	bd10      	pop	{r4, pc}
    f9a2:	b510      	push	{r4, lr}
    f9a4:	f7ff ffec 	bl	f980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    f9a8:	30ff      	adds	r0, #255	; 0xff
    f9aa:	b280      	uxth	r0, r0
    f9ac:	bd10      	pop	{r4, pc}
    f9ae:	b1d0      	cbz	r0, f9e6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x152>
    f9b0:	2908      	cmp	r1, #8
    f9b2:	d011      	beq.n	f9d8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x144>
    f9b4:	2904      	cmp	r1, #4
    f9b6:	d00b      	beq.n	f9d0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x13c>
    f9b8:	2000      	movs	r0, #0
    f9ba:	2902      	cmp	r1, #2
    f9bc:	d010      	beq.n	f9e0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x14c>
    f9be:	2108      	movs	r1, #8
    f9c0:	3028      	adds	r0, #40	; 0x28
    f9c2:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    f9c6:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    f9ca:	4408      	add	r0, r1
    f9cc:	3098      	adds	r0, #152	; 0x98
    f9ce:	4770      	bx	lr
    f9d0:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    f9d4:	2110      	movs	r1, #16
    f9d6:	e7f4      	b.n	f9c2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    f9d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    f9dc:	2140      	movs	r1, #64	; 0x40
    f9de:	e7f0      	b.n	f9c2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    f9e0:	2104      	movs	r1, #4
    f9e2:	3018      	adds	r0, #24
    f9e4:	e7ed      	b.n	f9c2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    f9e6:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    f9ea:	4770      	bx	lr
    f9ec:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    f9f0:	f001 0307 	and.w	r3, r1, #7
    f9f4:	7802      	ldrb	r2, [r0, #0]
    f9f6:	2101      	movs	r1, #1
    f9f8:	4099      	lsls	r1, r3
    f9fa:	438a      	bics	r2, r1
    f9fc:	7002      	strb	r2, [r0, #0]
    f9fe:	4770      	bx	lr

0000fa00 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    fa00:	f7f5 bde8 	b.w	55d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000fa04 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    fa04:	2000      	movs	r0, #0
    fa06:	4770      	bx	lr

0000fa08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    fa08:	b538      	push	{r3, r4, r5, lr}
    fa0a:	460d      	mov	r5, r1
    fa0c:	4604      	mov	r4, r0
    fa0e:	e050      	b.n	fab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    fa10:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    fa14:	1c40      	adds	r0, r0, #1
    fa16:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    fa1a:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    fa1e:	1c40      	adds	r0, r0, #1
    fa20:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    fa24:	4620      	mov	r0, r4
    fa26:	f000 f8e1 	bl	fbec <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    fa2a:	b198      	cbz	r0, fa54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    fa2c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    fa30:	1c40      	adds	r0, r0, #1
    fa32:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    fa36:	4620      	mov	r0, r4
    fa38:	f000 f86e 	bl	fb18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    fa3c:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    fa40:	4288      	cmp	r0, r1
    fa42:	d307      	bcc.n	fa54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    fa44:	2000      	movs	r0, #0
    fa46:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    fa4a:	2001      	movs	r0, #1
    fa4c:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    fa50:	f7f7 fb76 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fa54:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    fa58:	b120      	cbz	r0, fa64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    fa5a:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    fa5e:	1c40      	adds	r0, r0, #1
    fa60:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    fa64:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    fa68:	b120      	cbz	r0, fa74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    fa6a:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    fa6e:	1c40      	adds	r0, r0, #1
    fa70:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    fa74:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    fa78:	f88d 0000 	strb.w	r0, [sp]
    fa7c:	9800      	ldr	r0, [sp, #0]
    fa7e:	9000      	str	r0, [sp, #0]
    fa80:	f89d 0000 	ldrb.w	r0, [sp]
    fa84:	b940      	cbnz	r0, fa98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    fa86:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    fa8a:	2300      	movs	r3, #0
    fa8c:	2101      	movs	r1, #1
    fa8e:	f104 0078 	add.w	r0, r4, #120	; 0x78
    fa92:	f7ff f88a 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    fa96:	b120      	cbz	r0, faa2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    fa98:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    fa9c:	1c40      	adds	r0, r0, #1
    fa9e:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    faa2:	4620      	mov	r0, r4
    faa4:	f000 f847 	bl	fb36 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    faa8:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    faac:	1c40      	adds	r0, r0, #1
    faae:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    fab2:	1e6d      	subs	r5, r5, #1
    fab4:	b2ad      	uxth	r5, r5
    fab6:	d2ab      	bcs.n	fa10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    fab8:	bd38      	pop	{r3, r4, r5, pc}

0000faba <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    faba:	b510      	push	{r4, lr}
    fabc:	f7fa fd88 	bl	a5d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    fac0:	b128      	cbz	r0, face <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    fac2:	2000      	movs	r0, #0
    fac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fac8:	4601      	mov	r1, r0
    faca:	f7fa bd2d 	b.w	a528 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    face:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fad2:	f7f6 ba21 	b.w	5f18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    fad6:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    fada:	28fe      	cmp	r0, #254	; 0xfe
    fadc:	d001      	beq.n	fae2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    fade:	2001      	movs	r0, #1
    fae0:	4770      	bx	lr
    fae2:	2000      	movs	r0, #0
    fae4:	4770      	bx	lr
    fae6:	b510      	push	{r4, lr}
    fae8:	2801      	cmp	r0, #1
    faea:	d006      	beq.n	fafa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    faec:	2802      	cmp	r0, #2
    faee:	d004      	beq.n	fafa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    faf0:	f240 2163 	movw	r1, #611	; 0x263
    faf4:	2006      	movs	r0, #6
    faf6:	f7f5 f9e3 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fafa:	bd10      	pop	{r4, pc}
    fafc:	2801      	cmp	r0, #1
    fafe:	d002      	beq.n	fb06 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    fb00:	2802      	cmp	r0, #2
    fb02:	d105      	bne.n	fb10 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    fb04:	e002      	b.n	fb0c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    fb06:	2901      	cmp	r1, #1
    fb08:	d004      	beq.n	fb14 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    fb0a:	e001      	b.n	fb10 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    fb0c:	2902      	cmp	r1, #2
    fb0e:	d001      	beq.n	fb14 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    fb10:	2000      	movs	r0, #0
    fb12:	4770      	bx	lr
    fb14:	2001      	movs	r0, #1
    fb16:	4770      	bx	lr
    fb18:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    fb1c:	428a      	cmp	r2, r1
    fb1e:	d301      	bcc.n	fb24 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    fb20:	1a51      	subs	r1, r2, r1
    fb22:	e000      	b.n	fb26 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    fb24:	2100      	movs	r1, #0
    fb26:	8a82      	ldrh	r2, [r0, #20]
    fb28:	1d52      	adds	r2, r2, #5
    fb2a:	428a      	cmp	r2, r1
    fb2c:	d302      	bcc.n	fb34 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    fb2e:	2101      	movs	r1, #1
    fb30:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    fb34:	4770      	bx	lr
    fb36:	b570      	push	{r4, r5, r6, lr}
    fb38:	4604      	mov	r4, r0
    fb3a:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    fb3e:	2500      	movs	r5, #0
    fb40:	2601      	movs	r6, #1
    fb42:	280c      	cmp	r0, #12
    fb44:	d02c      	beq.n	fba0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    fb46:	280d      	cmp	r0, #13
    fb48:	d129      	bne.n	fb9e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    fb4a:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    fb4e:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    fb52:	1c40      	adds	r0, r0, #1
    fb54:	4288      	cmp	r0, r1
    fb56:	d122      	bne.n	fb9e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    fb58:	8820      	ldrh	r0, [r4, #0]
    fb5a:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    fb5e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    fb62:	f7fe ffd8 	bl	eb16 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    fb66:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    fb6a:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    fb6e:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    fb72:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    fb76:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    fb7a:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    fb7e:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    fb82:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    fb86:	2102      	movs	r1, #2
    fb88:	4620      	mov	r0, r4
    fb8a:	f7f7 f89b 	bl	6cc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    fb8e:	f7f7 fad7 	bl	7140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    fb92:	2103      	movs	r1, #3
    fb94:	4620      	mov	r0, r4
    fb96:	f7f8 ff75 	bl	8a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    fb9a:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    fb9e:	bd70      	pop	{r4, r5, r6, pc}
    fba0:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    fba4:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    fba8:	1c40      	adds	r0, r0, #1
    fbaa:	4288      	cmp	r0, r1
    fbac:	d1f7      	bne.n	fb9e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    fbae:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    fbb2:	f8d0 1001 	ldr.w	r1, [r0, #1]
    fbb6:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    fbba:	7940      	ldrb	r0, [r0, #5]
    fbbc:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    fbc0:	2103      	movs	r1, #3
    fbc2:	4620      	mov	r0, r4
    fbc4:	f7f7 f87e 	bl	6cc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    fbc8:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    fbcc:	7800      	ldrb	r0, [r0, #0]
    fbce:	b140      	cbz	r0, fbe2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    fbd0:	2101      	movs	r1, #1
    fbd2:	20fe      	movs	r0, #254	; 0xfe
    fbd4:	f7fb fd18 	bl	b608 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    fbd8:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    fbdc:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    fbe0:	bd70      	pop	{r4, r5, r6, pc}
    fbe2:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    fbe6:	2036      	movs	r0, #54	; 0x36
    fbe8:	f7f5 f96a 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fbec:	b510      	push	{r4, lr}
    fbee:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    fbf2:	b941      	cbnz	r1, fc06 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    fbf4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    fbf8:	2300      	movs	r3, #0
    fbfa:	2106      	movs	r1, #6
    fbfc:	3078      	adds	r0, #120	; 0x78
    fbfe:	f7fe ffd4 	bl	ebaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    fc02:	2800      	cmp	r0, #0
    fc04:	d000      	beq.n	fc08 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    fc06:	2001      	movs	r0, #1
    fc08:	bd10      	pop	{r4, pc}

0000fc0a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    fc0a:	b510      	push	{r4, lr}
    fc0c:	460c      	mov	r4, r1
    fc0e:	4601      	mov	r1, r0
    fc10:	4610      	mov	r0, r2
    fc12:	f7f2 fd7f 	bl	2714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    fc16:	2800      	cmp	r0, #0
    fc18:	da06      	bge.n	fc28 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    fc1a:	1a21      	subs	r1, r4, r0
    fc1c:	1e49      	subs	r1, r1, #1
    fc1e:	fbb1 f1f4 	udiv	r1, r1, r4
    fc22:	fb01 0004 	mla	r0, r1, r4, r0
    fc26:	bd10      	pop	{r4, pc}
    fc28:	fb90 f1f4 	sdiv	r1, r0, r4
    fc2c:	fb01 0014 	mls	r0, r1, r4, r0
    fc30:	bd10      	pop	{r4, pc}
    fc32:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    fc36:	f001 0107 	and.w	r1, r1, #7
    fc3a:	7800      	ldrb	r0, [r0, #0]
    fc3c:	2201      	movs	r2, #1
    fc3e:	408a      	lsls	r2, r1
    fc40:	4010      	ands	r0, r2
    fc42:	40c8      	lsrs	r0, r1
    fc44:	4770      	bx	lr
    fc46:	b118      	cbz	r0, fc50 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    fc48:	2802      	cmp	r0, #2
    fc4a:	d001      	beq.n	fc50 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    fc4c:	2001      	movs	r0, #1
    fc4e:	4770      	bx	lr
    fc50:	2000      	movs	r0, #0
    fc52:	4770      	bx	lr

0000fc54 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    fc54:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    fc56:	7881      	ldrb	r1, [r0, #2]
    fc58:	4604      	mov	r4, r0
    fc5a:	291a      	cmp	r1, #26
    fc5c:	d025      	beq.n	fcaa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    fc5e:	dc0e      	bgt.n	fc7e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    fc60:	2916      	cmp	r1, #22
    fc62:	d22d      	bcs.n	fcc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    fc64:	e8df f001 	tbb	[pc, r1]
    fc68:	2c2c2c2c 	.word	0x2c2c2c2c
    fc6c:	2c2c212c 	.word	0x2c2c212c
    fc70:	2c2c2c2c 	.word	0x2c2c2c2c
    fc74:	2c2c2c2c 	.word	0x2c2c2c2c
    fc78:	212c2c2c 	.word	0x212c2c2c
    fc7c:	2121      	.short	0x2121
    fc7e:	292a      	cmp	r1, #42	; 0x2a
    fc80:	d01e      	beq.n	fcc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    fc82:	dc0b      	bgt.n	fc9c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    fc84:	f1a1 011e 	sub.w	r1, r1, #30
    fc88:	290c      	cmp	r1, #12
    fc8a:	d219      	bcs.n	fcc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    fc8c:	e8df f001 	tbb	[pc, r1]
    fc90:	18181818 	.word	0x18181818
    fc94:	18181818 	.word	0x18181818
    fc98:	0d181818 	.word	0x0d181818
    fc9c:	393a      	subs	r1, #58	; 0x3a
    fc9e:	2904      	cmp	r1, #4
    fca0:	d20e      	bcs.n	fcc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    fca2:	e8df f001 	tbb	[pc, r1]
    fca6:	020d      	.short	0x020d
    fca8:	020d      	.short	0x020d
    fcaa:	8820      	ldrh	r0, [r4, #0]
    fcac:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    fcb0:	d206      	bcs.n	fcc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    fcb2:	2701      	movs	r7, #1
    fcb4:	4669      	mov	r1, sp
    fcb6:	f7fe ff1e 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    fcba:	b118      	cbz	r0, fcc4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    fcbc:	2002      	movs	r0, #2
    fcbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fcc0:	2012      	movs	r0, #18
    fcc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fcc4:	9d01      	ldr	r5, [sp, #4]
    fcc6:	4668      	mov	r0, sp
    fcc8:	462e      	mov	r6, r5
    fcca:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    fcce:	f206 163d 	addw	r6, r6, #317	; 0x13d
    fcd2:	f000 fd7f 	bl	107d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    fcd6:	b138      	cbz	r0, fce8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    fcd8:	7828      	ldrb	r0, [r5, #0]
    fcda:	f88d 0008 	strb.w	r0, [sp, #8]
    fcde:	9802      	ldr	r0, [sp, #8]
    fce0:	9002      	str	r0, [sp, #8]
    fce2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fce6:	b108      	cbz	r0, fcec <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    fce8:	200c      	movs	r0, #12
    fcea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    fcec:	702f      	strb	r7, [r5, #0]
    fcee:	78a0      	ldrb	r0, [r4, #2]
    fcf0:	7030      	strb	r0, [r6, #0]
    fcf2:	2000      	movs	r0, #0
    fcf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fcf6 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    fcf6:	b510      	push	{r4, lr}
    fcf8:	4604      	mov	r4, r0
    fcfa:	7800      	ldrb	r0, [r0, #0]
    fcfc:	b118      	cbz	r0, fd06 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fcfe:	2801      	cmp	r0, #1
    fd00:	d001      	beq.n	fd06 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    fd02:	2012      	movs	r0, #18
    fd04:	bd10      	pop	{r4, pc}
    fd06:	f000 fd7c 	bl	10802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    fd0a:	b120      	cbz	r0, fd16 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fd0c:	f7f6 fda0 	bl	6850 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fd10:	b108      	cbz	r0, fd16 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    fd12:	200c      	movs	r0, #12
    fd14:	bd10      	pop	{r4, pc}
    fd16:	7820      	ldrb	r0, [r4, #0]
    fd18:	f7ff ff95 	bl	fc46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fd1c:	1de2      	adds	r2, r4, #7
    fd1e:	f104 0317 	add.w	r3, r4, #23
    fd22:	1c61      	adds	r1, r4, #1
    fd24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fd28:	f7f6 bdc4 	b.w	68b4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000fd2c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    fd2c:	b510      	push	{r4, lr}
    fd2e:	4604      	mov	r4, r0
    fd30:	f000 fe0e 	bl	10950 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fd34:	b108      	cbz	r0, fd3a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    fd36:	200c      	movs	r0, #12
    fd38:	bd10      	pop	{r4, pc}
    fd3a:	7820      	ldrb	r0, [r4, #0]
    fd3c:	b118      	cbz	r0, fd46 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fd3e:	2801      	cmp	r0, #1
    fd40:	d001      	beq.n	fd46 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    fd42:	2012      	movs	r0, #18
    fd44:	bd10      	pop	{r4, pc}
    fd46:	f7ff ff7e 	bl	fc46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    fd4a:	1c61      	adds	r1, r4, #1
    fd4c:	f7f6 fe56 	bl	69fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    fd50:	b108      	cbz	r0, fd56 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    fd52:	2000      	movs	r0, #0
    fd54:	bd10      	pop	{r4, pc}
    fd56:	2007      	movs	r0, #7
    fd58:	bd10      	pop	{r4, pc}

0000fd5a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    fd5a:	b510      	push	{r4, lr}
    fd5c:	f000 fd51 	bl	10802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    fd60:	b120      	cbz	r0, fd6c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fd62:	f7f6 fd75 	bl	6850 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    fd66:	b108      	cbz	r0, fd6c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    fd68:	200c      	movs	r0, #12
    fd6a:	bd10      	pop	{r4, pc}
    fd6c:	f7f6 fde8 	bl	6940 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    fd70:	2000      	movs	r0, #0
    fd72:	bd10      	pop	{r4, pc}

0000fd74 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    fd74:	b510      	push	{r4, lr}
    fd76:	f000 fdeb 	bl	10950 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    fd7a:	b108      	cbz	r0, fd80 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    fd7c:	200c      	movs	r0, #12
    fd7e:	bd10      	pop	{r4, pc}
    fd80:	f7f6 fe64 	bl	6a4c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    fd84:	2000      	movs	r0, #0
    fd86:	bd10      	pop	{r4, pc}

0000fd88 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    fd88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd8a:	4605      	mov	r5, r0
    fd8c:	f000 fafa 	bl	10384 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    fd90:	2800      	cmp	r0, #0
    fd92:	d112      	bne.n	fdba <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    fd94:	8828      	ldrh	r0, [r5, #0]
    fd96:	2100      	movs	r1, #0
    fd98:	f7fe fd43 	bl	e822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    fd9c:	0004      	movs	r4, r0
    fd9e:	d00d      	beq.n	fdbc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fda0:	f000 fd1b 	bl	107da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    fda4:	b150      	cbz	r0, fdbc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    fda6:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    fdaa:	f88d 0000 	strb.w	r0, [sp]
    fdae:	9800      	ldr	r0, [sp, #0]
    fdb0:	9000      	str	r0, [sp, #0]
    fdb2:	f89d 0000 	ldrb.w	r0, [sp]
    fdb6:	b118      	cbz	r0, fdc0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    fdb8:	203a      	movs	r0, #58	; 0x3a
    fdba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdbc:	2002      	movs	r0, #2
    fdbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdc0:	88a8      	ldrh	r0, [r5, #4]
    fdc2:	f7fe fea4 	bl	eb0e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    fdc6:	4606      	mov	r6, r0
    fdc8:	4601      	mov	r1, r0
    fdca:	2008      	movs	r0, #8
    fdcc:	f7ff f86b 	bl	eea6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fdd0:	4601      	mov	r1, r0
    fdd2:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    fdd6:	4281      	cmp	r1, r0
    fdd8:	d301      	bcc.n	fdde <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    fdda:	42b0      	cmp	r0, r6
    fddc:	d301      	bcc.n	fde2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    fdde:	2012      	movs	r0, #18
    fde0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fde2:	4631      	mov	r1, r6
    fde4:	2005      	movs	r0, #5
    fde6:	f7ff f85e 	bl	eea6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    fdea:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    fdee:	2000      	movs	r0, #0
    fdf0:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    fdf4:	88e8      	ldrh	r0, [r5, #6]
    fdf6:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    fdfa:	8928      	ldrh	r0, [r5, #8]
    fdfc:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    fe00:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    fe04:	2001      	movs	r0, #1
    fe06:	7020      	strb	r0, [r4, #0]
    fe08:	2000      	movs	r0, #0
    fe0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000fe0c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    fe0c:	b508      	push	{r3, lr}
    fe0e:	f7f7 f991 	bl	7134 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    fe12:	b970      	cbnz	r0, fe32 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    fe14:	f7f8 fff4 	bl	8e00 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    fe18:	2805      	cmp	r0, #5
    fe1a:	d005      	beq.n	fe28 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    fe1c:	f7f7 fc46 	bl	76ac <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    fe20:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    fe24:	39ff      	subs	r1, #255	; 0xff
    fe26:	d004      	beq.n	fe32 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    fe28:	4668      	mov	r0, sp
    fe2a:	f7f8 ff55 	bl	8cd8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    fe2e:	b110      	cbz	r0, fe36 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    fe30:	e012      	b.n	fe58 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x4c>
    fe32:	200c      	movs	r0, #12
    fe34:	bd08      	pop	{r3, pc}
    fe36:	9800      	ldr	r0, [sp, #0]
    fe38:	8800      	ldrh	r0, [r0, #0]
    fe3a:	f7fe fd5a 	bl	e8f2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    fe3e:	9800      	ldr	r0, [sp, #0]
    fe40:	2100      	movs	r1, #0
    fe42:	8800      	ldrh	r0, [r0, #0]
    fe44:	f7f5 faba 	bl	53bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    fe48:	b120      	cbz	r0, fe54 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    fe4a:	f640 717f 	movw	r1, #3967	; 0xf7f
    fe4e:	2039      	movs	r0, #57	; 0x39
    fe50:	f7f5 f836 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fe54:	f7f7 f966 	bl	7124 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>
    fe58:	2000      	movs	r0, #0
    fe5a:	bd08      	pop	{r3, pc}

0000fe5c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    fe5c:	b510      	push	{r4, lr}
    fe5e:	460b      	mov	r3, r1
    fe60:	2201      	movs	r2, #1
    fe62:	f100 0110 	add.w	r1, r0, #16
    fe66:	f7fe fe0a 	bl	ea7e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    fe6a:	2000      	movs	r0, #0
    fe6c:	bd10      	pop	{r4, pc}

0000fe6e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    fe6e:	b510      	push	{r4, lr}
    fe70:	2108      	movs	r1, #8
    fe72:	f7f5 f8cf 	bl	5014 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    fe76:	2000      	movs	r0, #0
    fe78:	bd10      	pop	{r4, pc}

0000fe7a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    fe7a:	b510      	push	{r4, lr}
    fe7c:	4604      	mov	r4, r0
    fe7e:	f000 fca3 	bl	107c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    fe82:	b140      	cbz	r0, fe96 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    fe84:	20fb      	movs	r0, #251	; 0xfb
    fe86:	8020      	strh	r0, [r4, #0]
    fe88:	f640 0148 	movw	r1, #2120	; 0x848
    fe8c:	8061      	strh	r1, [r4, #2]
    fe8e:	80a0      	strh	r0, [r4, #4]
    fe90:	80e1      	strh	r1, [r4, #6]
    fe92:	2000      	movs	r0, #0
    fe94:	bd10      	pop	{r4, pc}
    fe96:	2001      	movs	r0, #1
    fe98:	bd10      	pop	{r4, pc}

0000fe9a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    fe9a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    fe9c:	460d      	mov	r5, r1
    fe9e:	4606      	mov	r6, r0
    fea0:	f7fc f940 	bl	c124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    fea4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    fea8:	b300      	cbz	r0, feec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    feaa:	8830      	ldrh	r0, [r6, #0]
    feac:	4669      	mov	r1, sp
    feae:	f7fe fe22 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    feb2:	2800      	cmp	r0, #0
    feb4:	d119      	bne.n	feea <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    feb6:	9c01      	ldr	r4, [sp, #4]
    feb8:	2700      	movs	r7, #0
    feba:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    febe:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    fec2:	f000 fa94 	bl	103ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    fec6:	70a8      	strb	r0, [r5, #2]
    fec8:	7860      	ldrb	r0, [r4, #1]
    feca:	f000 fa90 	bl	103ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    fece:	70e8      	strb	r0, [r5, #3]
    fed0:	78a0      	ldrb	r0, [r4, #2]
    fed2:	f88d 0008 	strb.w	r0, [sp, #8]
    fed6:	9802      	ldr	r0, [sp, #8]
    fed8:	9002      	str	r0, [sp, #8]
    feda:	f89d 0008 	ldrb.w	r0, [sp, #8]
    fede:	3c6a      	subs	r4, #106	; 0x6a
    fee0:	2800      	cmp	r0, #0
    fee2:	d1ea      	bne.n	feba <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    fee4:	8830      	ldrh	r0, [r6, #0]
    fee6:	8028      	strh	r0, [r5, #0]
    fee8:	2000      	movs	r0, #0
    feea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    feec:	2001      	movs	r0, #1
    feee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000fef0 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    fef0:	2108      	movs	r1, #8
    fef2:	7001      	strb	r1, [r0, #0]
    fef4:	2000      	movs	r0, #0
    fef6:	4770      	bx	lr

0000fef8 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    fef8:	b510      	push	{r4, lr}
    fefa:	4604      	mov	r4, r0
    fefc:	20d8      	movs	r0, #216	; 0xd8
    fefe:	7020      	strb	r0, [r4, #0]
    ff00:	f000 fc43 	bl	1078a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    ff04:	7060      	strb	r0, [r4, #1]
    ff06:	2000      	movs	r0, #0
    ff08:	bd10      	pop	{r4, pc}

0000ff0a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    ff0a:	2108      	movs	r1, #8
    ff0c:	7001      	strb	r1, [r0, #0]
    ff0e:	2000      	movs	r0, #0
    ff10:	4770      	bx	lr

0000ff12 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    ff12:	b510      	push	{r4, lr}
    ff14:	4604      	mov	r4, r0
    ff16:	7800      	ldrb	r0, [r0, #0]
    ff18:	b108      	cbz	r0, ff1e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    ff1a:	2801      	cmp	r0, #1
    ff1c:	d110      	bne.n	ff40 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ff1e:	f000 fc70 	bl	10802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ff22:	b120      	cbz	r0, ff2e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ff24:	f7f6 fc94 	bl	6850 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ff28:	b108      	cbz	r0, ff2e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ff2a:	200c      	movs	r0, #12
    ff2c:	bd10      	pop	{r4, pc}
    ff2e:	7820      	ldrb	r0, [r4, #0]
    ff30:	f7ff fe89 	bl	fc46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ff34:	1c61      	adds	r1, r4, #1
    ff36:	f7fe fd88 	bl	ea4a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    ff3a:	b108      	cbz	r0, ff40 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ff3c:	2000      	movs	r0, #0
    ff3e:	bd10      	pop	{r4, pc}
    ff40:	2012      	movs	r0, #18
    ff42:	bd10      	pop	{r4, pc}

0000ff44 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    ff44:	b510      	push	{r4, lr}
    ff46:	4604      	mov	r4, r0
    ff48:	f000 fd02 	bl	10950 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ff4c:	b108      	cbz	r0, ff52 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ff4e:	200c      	movs	r0, #12
    ff50:	bd10      	pop	{r4, pc}
    ff52:	7820      	ldrb	r0, [r4, #0]
    ff54:	b108      	cbz	r0, ff5a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    ff56:	2801      	cmp	r0, #1
    ff58:	d107      	bne.n	ff6a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ff5a:	f7ff fe74 	bl	fc46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ff5e:	1c61      	adds	r1, r4, #1
    ff60:	f7fe fd82 	bl	ea68 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    ff64:	b108      	cbz	r0, ff6a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ff66:	2000      	movs	r0, #0
    ff68:	bd10      	pop	{r4, pc}
    ff6a:	2012      	movs	r0, #18
    ff6c:	bd10      	pop	{r4, pc}

0000ff6e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ff6e:	b510      	push	{r4, lr}
    ff70:	4604      	mov	r4, r0
    ff72:	f000 fc46 	bl	10802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ff76:	b108      	cbz	r0, ff7c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    ff78:	200c      	movs	r0, #12
    ff7a:	bd10      	pop	{r4, pc}
    ff7c:	7820      	ldrb	r0, [r4, #0]
    ff7e:	f000 0001 	and.w	r0, r0, #1
    ff82:	f7f6 fc5f 	bl	6844 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ff86:	2000      	movs	r0, #0
    ff88:	bd10      	pop	{r4, pc}

0000ff8a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ff8a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ff8c:	460d      	mov	r5, r1
    ff8e:	4604      	mov	r4, r0
    ff90:	f000 fc1a 	bl	107c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ff94:	b130      	cbz	r0, ffa4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ff96:	88a2      	ldrh	r2, [r4, #4]
    ff98:	f244 2090 	movw	r0, #17040	; 0x4290
    ff9c:	4282      	cmp	r2, r0
    ff9e:	d903      	bls.n	ffa8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    ffa0:	2012      	movs	r0, #18
    ffa2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ffa4:	2001      	movs	r0, #1
    ffa6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    ffa8:	f640 0048 	movw	r0, #2120	; 0x848
    ffac:	4282      	cmp	r2, r0
    ffae:	d300      	bcc.n	ffb2 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    ffb0:	4602      	mov	r2, r0
    ffb2:	8820      	ldrh	r0, [r4, #0]
    ffb4:	f8ad 0000 	strh.w	r0, [sp]
    ffb8:	8860      	ldrh	r0, [r4, #2]
    ffba:	f8ad 0002 	strh.w	r0, [sp, #2]
    ffbe:	f8ad 2004 	strh.w	r2, [sp, #4]
    ffc2:	8860      	ldrh	r0, [r4, #2]
    ffc4:	f8ad 0006 	strh.w	r0, [sp, #6]
    ffc8:	f8ad 2008 	strh.w	r2, [sp, #8]
    ffcc:	8820      	ldrh	r0, [r4, #0]
    ffce:	8028      	strh	r0, [r5, #0]
    ffd0:	4668      	mov	r0, sp
    ffd2:	f000 fc28 	bl	10826 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    ffd6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000ffd8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    ffd8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ffda:	4604      	mov	r4, r0
    ffdc:	f7fe fd75 	bl	eaca <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    ffe0:	b160      	cbz	r0, fffc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    ffe2:	4620      	mov	r0, r4
    ffe4:	f7f6 fef4 	bl	6dd0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    ffe8:	4669      	mov	r1, sp
    ffea:	2000      	movs	r0, #0
    ffec:	f7fe fc22 	bl	e834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    fff0:	b150      	cbz	r0, 10008 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    fff2:	f241 0104 	movw	r1, #4100	; 0x1004
    fff6:	2039      	movs	r0, #57	; 0x39
    fff8:	f7f4 ff62 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fffc:	2012      	movs	r0, #18
    fffe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10000:	9802      	ldr	r0, [sp, #8]
   10002:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
   10006:	e000      	b.n	1000a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
   10008:	2401      	movs	r4, #1
   1000a:	4668      	mov	r0, sp
   1000c:	f7f5 f988 	bl	5320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
   10010:	2800      	cmp	r0, #0
   10012:	d0f5      	beq.n	10000 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
   10014:	2000      	movs	r0, #0
   10016:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010018 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
   10018:	b53e      	push	{r1, r2, r3, r4, r5, lr}
   1001a:	4604      	mov	r4, r0
   1001c:	f7fc f882 	bl	c124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   10020:	f3c0 2000 	ubfx	r0, r0, #8, #1
   10024:	b1b0      	cbz	r0, 10054 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
   10026:	f10d 0007 	add.w	r0, sp, #7
   1002a:	9000      	str	r0, [sp, #0]
   1002c:	7922      	ldrb	r2, [r4, #4]
   1002e:	78e1      	ldrb	r1, [r4, #3]
   10030:	78a0      	ldrb	r0, [r4, #2]
   10032:	f10d 0306 	add.w	r3, sp, #6
   10036:	f000 fc74 	bl	10922 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
   1003a:	2800      	cmp	r0, #0
   1003c:	d109      	bne.n	10052 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
   1003e:	8820      	ldrh	r0, [r4, #0]
   10040:	f8ad 0004 	strh.w	r0, [sp, #4]
   10044:	f8b4 0005 	ldrh.w	r0, [r4, #5]
   10048:	f8ad 0008 	strh.w	r0, [sp, #8]
   1004c:	a801      	add	r0, sp, #4
   1004e:	f000 f8f8 	bl	10242 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
   10052:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
   10054:	2001      	movs	r0, #1
   10056:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

00010058 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
   10058:	b510      	push	{r4, lr}
   1005a:	4604      	mov	r4, r0
   1005c:	f000 fbd1 	bl	10802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
   10060:	b120      	cbz	r0, 1006c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   10062:	f7f6 fbf5 	bl	6850 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
   10066:	b108      	cbz	r0, 1006c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
   10068:	200c      	movs	r0, #12
   1006a:	bd10      	pop	{r4, pc}
   1006c:	7820      	ldrb	r0, [r4, #0]
   1006e:	f7ff fdea 	bl	fc46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
   10072:	79e2      	ldrb	r2, [r4, #7]
   10074:	1c61      	adds	r1, r4, #1
   10076:	f7f6 fb85 	bl	6784 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
   1007a:	b108      	cbz	r0, 10080 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
   1007c:	2000      	movs	r0, #0
   1007e:	bd10      	pop	{r4, pc}
   10080:	2002      	movs	r0, #2
   10082:	bd10      	pop	{r4, pc}

00010084 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
   10084:	b510      	push	{r4, lr}
   10086:	4604      	mov	r4, r0
   10088:	2001      	movs	r0, #1
   1008a:	f000 f9bb 	bl	10404 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   1008e:	b128      	cbz	r0, 1009c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
   10090:	4621      	mov	r1, r4
   10092:	2001      	movs	r0, #1
   10094:	f7f5 fd7e 	bl	5b94 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10098:	2000      	movs	r0, #0
   1009a:	bd10      	pop	{r4, pc}
   1009c:	200c      	movs	r0, #12
   1009e:	bd10      	pop	{r4, pc}

000100a0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
   100a0:	b510      	push	{r4, lr}
   100a2:	8800      	ldrh	r0, [r0, #0]
   100a4:	f7f6 fc62 	bl	696c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
   100a8:	b108      	cbz	r0, 100ae <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
   100aa:	2000      	movs	r0, #0
   100ac:	bd10      	pop	{r4, pc}
   100ae:	2030      	movs	r0, #48	; 0x30
   100b0:	bd10      	pop	{r4, pc}

000100b2 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
   100b2:	b51c      	push	{r2, r3, r4, lr}
   100b4:	7801      	ldrb	r1, [r0, #0]
   100b6:	f88d 1000 	strb.w	r1, [sp]
   100ba:	7840      	ldrb	r0, [r0, #1]
   100bc:	f88d 0001 	strb.w	r0, [sp, #1]
   100c0:	2000      	movs	r0, #0
   100c2:	f8ad 0002 	strh.w	r0, [sp, #2]
   100c6:	f8ad 0004 	strh.w	r0, [sp, #4]
   100ca:	4601      	mov	r1, r0
   100cc:	4668      	mov	r0, sp
   100ce:	f000 f9e4 	bl	1049a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
   100d2:	2800      	cmp	r0, #0
   100d4:	d102      	bne.n	100dc <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
   100d6:	4668      	mov	r0, sp
   100d8:	f000 f9c3 	bl	10462 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
   100dc:	bd1c      	pop	{r2, r3, r4, pc}

000100de <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
   100de:	b500      	push	{lr}
   100e0:	b087      	sub	sp, #28
   100e2:	7941      	ldrb	r1, [r0, #5]
   100e4:	f88d 1000 	strb.w	r1, [sp]
   100e8:	7981      	ldrb	r1, [r0, #6]
   100ea:	f88d 1001 	strb.w	r1, [sp, #1]
   100ee:	2101      	movs	r1, #1
   100f0:	f88d 1002 	strb.w	r1, [sp, #2]
   100f4:	7801      	ldrb	r1, [r0, #0]
   100f6:	f88d 1003 	strb.w	r1, [sp, #3]
   100fa:	f8b0 1001 	ldrh.w	r1, [r0, #1]
   100fe:	f240 2271 	movw	r2, #625	; 0x271
   10102:	4351      	muls	r1, r2
   10104:	9102      	str	r1, [sp, #8]
   10106:	f8b0 0003 	ldrh.w	r0, [r0, #3]
   1010a:	4350      	muls	r0, r2
   1010c:	9004      	str	r0, [sp, #16]
   1010e:	2007      	movs	r0, #7
   10110:	f88d 0018 	strb.w	r0, [sp, #24]
   10114:	2000      	movs	r0, #0
   10116:	f88d 0019 	strb.w	r0, [sp, #25]
   1011a:	9804      	ldr	r0, [sp, #16]
   1011c:	f7fb ff24 	bl	bf68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
   10120:	b140      	cbz	r0, 10134 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
   10122:	9802      	ldr	r0, [sp, #8]
   10124:	f7fb ff14 	bl	bf50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
   10128:	b120      	cbz	r0, 10134 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
   1012a:	4668      	mov	r0, sp
   1012c:	f7fb fda8 	bl	bc80 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
   10130:	b007      	add	sp, #28
   10132:	bd00      	pop	{pc}
   10134:	2030      	movs	r0, #48	; 0x30
   10136:	e7fb      	b.n	10130 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

00010138 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
   10138:	b570      	push	{r4, r5, r6, lr}
   1013a:	4605      	mov	r5, r0
   1013c:	8800      	ldrh	r0, [r0, #0]
   1013e:	2100      	movs	r1, #0
   10140:	f7fe fb6f 	bl	e822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
   10144:	0004      	movs	r4, r0
   10146:	d007      	beq.n	10158 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
   10148:	f000 fb47 	bl	107da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
   1014c:	b120      	cbz	r0, 10158 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
   1014e:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
   10152:	b118      	cbz	r0, 1015c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
   10154:	203a      	movs	r0, #58	; 0x3a
   10156:	bd70      	pop	{r4, r5, r6, pc}
   10158:	2002      	movs	r0, #2
   1015a:	bd70      	pop	{r4, r5, r6, pc}
   1015c:	2100      	movs	r1, #0
   1015e:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
   10162:	f7ff fd66 	bl	fc32 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
   10166:	2801      	cmp	r0, #1
   10168:	d001      	beq.n	1016e <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
   1016a:	201a      	movs	r0, #26
   1016c:	bd70      	pop	{r4, r5, r6, pc}
   1016e:	f8d5 1002 	ldr.w	r1, [r5, #2]
   10172:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
   10176:	f8d5 1006 	ldr.w	r1, [r5, #6]
   1017a:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
   1017e:	8969      	ldrh	r1, [r5, #10]
   10180:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
   10184:	2210      	movs	r2, #16
   10186:	f105 010c 	add.w	r1, r5, #12
   1018a:	f204 1065 	addw	r0, r4, #357	; 0x165
   1018e:	f7fd faa7 	bl	d6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
   10192:	2001      	movs	r0, #1
   10194:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
   10198:	2000      	movs	r0, #0
   1019a:	bd70      	pop	{r4, r5, r6, pc}

0001019c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
   1019c:	b51c      	push	{r2, r3, r4, lr}
   1019e:	4604      	mov	r4, r0
   101a0:	f000 fb12 	bl	107c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   101a4:	b178      	cbz	r0, 101c6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
   101a6:	8820      	ldrh	r0, [r4, #0]
   101a8:	f8ad 0000 	strh.w	r0, [sp]
   101ac:	8860      	ldrh	r0, [r4, #2]
   101ae:	f8ad 0002 	strh.w	r0, [sp, #2]
   101b2:	8820      	ldrh	r0, [r4, #0]
   101b4:	f8ad 0004 	strh.w	r0, [sp, #4]
   101b8:	8860      	ldrh	r0, [r4, #2]
   101ba:	f8ad 0006 	strh.w	r0, [sp, #6]
   101be:	4668      	mov	r0, sp
   101c0:	f7fb ff08 	bl	bfd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1dc>
   101c4:	bd1c      	pop	{r2, r3, r4, pc}
   101c6:	2001      	movs	r0, #1
   101c8:	bd1c      	pop	{r2, r3, r4, pc}

000101ca <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
   101ca:	b510      	push	{r4, lr}
   101cc:	f7f5 fd06 	bl	5bdc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
   101d0:	2000      	movs	r0, #0
   101d2:	bd10      	pop	{r4, pc}

000101d4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
   101d4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   101d6:	460c      	mov	r4, r1
   101d8:	4605      	mov	r5, r0
   101da:	f000 faf5 	bl	107c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   101de:	b160      	cbz	r0, 101fa <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
   101e0:	4669      	mov	r1, sp
   101e2:	4628      	mov	r0, r5
   101e4:	f7fe fc87 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   101e8:	2800      	cmp	r0, #0
   101ea:	d105      	bne.n	101f8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
   101ec:	2101      	movs	r1, #1
   101ee:	4622      	mov	r2, r4
   101f0:	9801      	ldr	r0, [sp, #4]
   101f2:	f000 fa74 	bl	106de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
   101f6:	2000      	movs	r0, #0
   101f8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   101fa:	2001      	movs	r0, #1
   101fc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

000101fe <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
   101fe:	b510      	push	{r4, lr}
   10200:	4604      	mov	r4, r0
   10202:	2000      	movs	r0, #0
   10204:	f000 f8fe 	bl	10404 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
   10208:	b128      	cbz	r0, 10216 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
   1020a:	4621      	mov	r1, r4
   1020c:	2000      	movs	r0, #0
   1020e:	f7f5 fcc1 	bl	5b94 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
   10212:	2000      	movs	r0, #0
   10214:	bd10      	pop	{r4, pc}
   10216:	200c      	movs	r0, #12
   10218:	bd10      	pop	{r4, pc}

0001021a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
   1021a:	b510      	push	{r4, lr}
   1021c:	7800      	ldrb	r0, [r0, #0]
   1021e:	f000 0001 	and.w	r0, r0, #1
   10222:	f7f8 fd61 	bl	8ce8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
   10226:	2000      	movs	r0, #0
   10228:	bd10      	pop	{r4, pc}

0001022a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
   1022a:	b510      	push	{r4, lr}
   1022c:	4604      	mov	r4, r0
   1022e:	f000 facb 	bl	107c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
   10232:	b120      	cbz	r0, 1023e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
   10234:	4620      	mov	r0, r4
   10236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1023a:	f000 baf4 	b.w	10826 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
   1023e:	2001      	movs	r0, #1
   10240:	bd10      	pop	{r4, pc}

00010242 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
   10242:	b510      	push	{r4, lr}
   10244:	4604      	mov	r4, r0
   10246:	8880      	ldrh	r0, [r0, #4]
   10248:	b128      	cbz	r0, 10256 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1024a:	2801      	cmp	r0, #1
   1024c:	d003      	beq.n	10256 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   1024e:	2802      	cmp	r0, #2
   10250:	d001      	beq.n	10256 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
   10252:	2012      	movs	r0, #18
   10254:	bd10      	pop	{r4, pc}
   10256:	78e0      	ldrb	r0, [r4, #3]
   10258:	f000 f8e0 	bl	1041c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
   1025c:	b148      	cbz	r0, 10272 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   1025e:	78a0      	ldrb	r0, [r4, #2]
   10260:	f000 f8dc 	bl	1041c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
   10264:	b128      	cbz	r0, 10272 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
   10266:	4620      	mov	r0, r4
   10268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1026c:	2101      	movs	r1, #1
   1026e:	f7fb bd5d 	b.w	bd2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
   10272:	2011      	movs	r0, #17
   10274:	bd10      	pop	{r4, pc}

00010276 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
   10276:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   10278:	460c      	mov	r4, r1
   1027a:	4605      	mov	r5, r0
   1027c:	8800      	ldrh	r0, [r0, #0]
   1027e:	4669      	mov	r1, sp
   10280:	f7fe fc39 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10284:	2800      	cmp	r0, #0
   10286:	d106      	bne.n	10296 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
   10288:	9801      	ldr	r0, [sp, #4]
   1028a:	8829      	ldrh	r1, [r5, #0]
   1028c:	8021      	strh	r1, [r4, #0]
   1028e:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
   10292:	8060      	strh	r0, [r4, #2]
   10294:	2000      	movs	r0, #0
   10296:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

00010298 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
   10298:	b510      	push	{r4, lr}
   1029a:	4604      	mov	r4, r0
   1029c:	4601      	mov	r1, r0
   1029e:	2000      	movs	r0, #0
   102a0:	f7f5 fc60 	bl	5b64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
   102a4:	b910      	cbnz	r0, 102ac <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
   102a6:	2000      	movs	r0, #0
   102a8:	6020      	str	r0, [r4, #0]
   102aa:	80a0      	strh	r0, [r4, #4]
   102ac:	2000      	movs	r0, #0
   102ae:	bd10      	pop	{r4, pc}

000102b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
   102b0:	b51c      	push	{r2, r3, r4, lr}
   102b2:	8800      	ldrh	r0, [r0, #0]
   102b4:	4669      	mov	r1, sp
   102b6:	f7fe fc1e 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   102ba:	b968      	cbnz	r0, 102d8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   102bc:	4668      	mov	r0, sp
   102be:	f000 fa89 	bl	107d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
   102c2:	b148      	cbz	r0, 102d8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
   102c4:	9801      	ldr	r0, [sp, #4]
   102c6:	2201      	movs	r2, #1
   102c8:	4601      	mov	r1, r0
   102ca:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
   102ce:	3078      	adds	r0, #120	; 0x78
   102d0:	f501 71ac 	add.w	r1, r1, #344	; 0x158
   102d4:	b92b      	cbnz	r3, 102e2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
   102d6:	e001      	b.n	102dc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
   102d8:	2002      	movs	r0, #2
   102da:	bd1c      	pop	{r2, r3, r4, pc}
   102dc:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
   102e0:	b10b      	cbz	r3, 102e6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
   102e2:	203a      	movs	r0, #58	; 0x3a
   102e4:	bd1c      	pop	{r2, r3, r4, pc}
   102e6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
   102ea:	079b      	lsls	r3, r3, #30
   102ec:	d100      	bne.n	102f0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
   102ee:	700a      	strb	r2, [r1, #0]
   102f0:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
   102f4:	2000      	movs	r0, #0
   102f6:	bd1c      	pop	{r2, r3, r4, pc}

000102f8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
   102f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
   102fa:	460c      	mov	r4, r1
   102fc:	4605      	mov	r5, r0
   102fe:	8800      	ldrh	r0, [r0, #0]
   10300:	4669      	mov	r1, sp
   10302:	f7fe fbf8 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10306:	b108      	cbz	r0, 1030c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
   10308:	2002      	movs	r0, #2
   1030a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1030c:	78a8      	ldrb	r0, [r5, #2]
   1030e:	b130      	cbz	r0, 1031e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
   10310:	f000 fa3b 	bl	1078a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
   10314:	70a0      	strb	r0, [r4, #2]
   10316:	8828      	ldrh	r0, [r5, #0]
   10318:	8020      	strh	r0, [r4, #0]
   1031a:	2000      	movs	r0, #0
   1031c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
   1031e:	9801      	ldr	r0, [sp, #4]
   10320:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
   10324:	e7f6      	b.n	10314 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

00010326 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
   10326:	b510      	push	{r4, lr}
   10328:	f7fb fe92 	bl	c050 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
   1032c:	2000      	movs	r0, #0
   1032e:	bd10      	pop	{r4, pc}

00010330 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
   10330:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
   10334:	4604      	mov	r4, r0
   10336:	8840      	ldrh	r0, [r0, #2]
   10338:	460d      	mov	r5, r1
   1033a:	b1b8      	cbz	r0, 1036c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
   1033c:	8820      	ldrh	r0, [r4, #0]
   1033e:	4669      	mov	r1, sp
   10340:	f7fe fbd9 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10344:	2800      	cmp	r0, #0
   10346:	d10f      	bne.n	10368 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
   10348:	8820      	ldrh	r0, [r4, #0]
   1034a:	8028      	strh	r0, [r5, #0]
   1034c:	9e01      	ldr	r6, [sp, #4]
   1034e:	f106 050c 	add.w	r5, r6, #12
   10352:	3678      	adds	r6, #120	; 0x78
   10354:	682f      	ldr	r7, [r5, #0]
   10356:	8862      	ldrh	r2, [r4, #2]
   10358:	4639      	mov	r1, r7
   1035a:	4630      	mov	r0, r6
   1035c:	f7fe fd8c 	bl	ee78 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
   10360:	6828      	ldr	r0, [r5, #0]
   10362:	42b8      	cmp	r0, r7
   10364:	d1f6      	bne.n	10354 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
   10366:	2000      	movs	r0, #0
   10368:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
   1036c:	2012      	movs	r0, #18
   1036e:	e7fb      	b.n	10368 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

00010370 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
   10370:	f7fb bd42 	b.w	bdf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

00010374 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
   10374:	b510      	push	{r4, lr}
   10376:	2008      	movs	r0, #8
   10378:	f7fb feca 	bl	c110 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
   1037c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10380:	f7f9 bccc 	b.w	9d1c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

00010384 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
   10384:	b510      	push	{r4, lr}
   10386:	4604      	mov	r4, r0
   10388:	2000      	movs	r0, #0
   1038a:	8822      	ldrh	r2, [r4, #0]
   1038c:	b086      	sub	sp, #24
   1038e:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
   10392:	39ff      	subs	r1, #255	; 0xff
   10394:	d008      	beq.n	103a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
   10396:	a903      	add	r1, sp, #12
   10398:	4610      	mov	r0, r2
   1039a:	f7fe fbac 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   1039e:	b110      	cbz	r0, 103a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
   103a0:	2002      	movs	r0, #2
   103a2:	b006      	add	sp, #24
   103a4:	bd10      	pop	{r4, pc}
   103a6:	9804      	ldr	r0, [sp, #16]
   103a8:	8921      	ldrh	r1, [r4, #8]
   103aa:	89a3      	ldrh	r3, [r4, #12]
   103ac:	8962      	ldrh	r2, [r4, #10]
   103ae:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   103b2:	88e3      	ldrh	r3, [r4, #6]
   103b4:	88a2      	ldrh	r2, [r4, #4]
   103b6:	8861      	ldrh	r1, [r4, #2]
   103b8:	f000 f966 	bl	10688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   103bc:	b108      	cbz	r0, 103c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
   103be:	2000      	movs	r0, #0
   103c0:	e7ef      	b.n	103a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   103c2:	2030      	movs	r0, #48	; 0x30
   103c4:	e7ed      	b.n	103a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
   103c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
   103ca:	4288      	cmp	r0, r1
   103cc:	d303      	bcc.n	103d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
   103ce:	f640 0148 	movw	r1, #2120	; 0x848
   103d2:	4288      	cmp	r0, r1
   103d4:	d300      	bcc.n	103d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
   103d6:	4608      	mov	r0, r1
   103d8:	4770      	bx	lr
   103da:	07c1      	lsls	r1, r0, #31
   103dc:	d001      	beq.n	103e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
   103de:	2001      	movs	r0, #1
   103e0:	4770      	bx	lr
   103e2:	0780      	lsls	r0, r0, #30
   103e4:	d501      	bpl.n	103ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
   103e6:	2002      	movs	r0, #2
   103e8:	4770      	bx	lr
   103ea:	2000      	movs	r0, #0
   103ec:	4770      	bx	lr
   103ee:	b510      	push	{r4, lr}
   103f0:	2801      	cmp	r0, #1
   103f2:	d006      	beq.n	10402 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   103f4:	2802      	cmp	r0, #2
   103f6:	d004      	beq.n	10402 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
   103f8:	f240 2163 	movw	r1, #611	; 0x263
   103fc:	2006      	movs	r0, #6
   103fe:	f7f4 fd5f 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10402:	bd10      	pop	{r4, pc}
   10404:	b510      	push	{r4, lr}
   10406:	f000 fa03 	bl	10810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   1040a:	b128      	cbz	r0, 10418 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
   1040c:	f7f7 faec 	bl	79e8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
   10410:	2801      	cmp	r0, #1
   10412:	d001      	beq.n	10418 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
   10414:	2000      	movs	r0, #0
   10416:	bd10      	pop	{r4, pc}
   10418:	2001      	movs	r0, #1
   1041a:	bd10      	pop	{r4, pc}
   1041c:	b510      	push	{r4, lr}
   1041e:	0004      	movs	r4, r0
   10420:	d005      	beq.n	1042e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
   10422:	f7fb fe85 	bl	c130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10426:	4384      	bics	r4, r0
   10428:	d001      	beq.n	1042e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
   1042a:	2000      	movs	r0, #0
   1042c:	bd10      	pop	{r4, pc}
   1042e:	2001      	movs	r0, #1
   10430:	bd10      	pop	{r4, pc}
   10432:	28fb      	cmp	r0, #251	; 0xfb
   10434:	d803      	bhi.n	1043e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
   10436:	f640 0048 	movw	r0, #2120	; 0x848
   1043a:	4281      	cmp	r1, r0
   1043c:	d901      	bls.n	10442 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
   1043e:	2011      	movs	r0, #17
   10440:	4770      	bx	lr
   10442:	2000      	movs	r0, #0
   10444:	4770      	bx	lr
   10446:	381b      	subs	r0, #27
   10448:	28e1      	cmp	r0, #225	; 0xe1
   1044a:	d206      	bcs.n	1045a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
   1044c:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
   10450:	d303      	bcc.n	1045a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
   10452:	f244 2090 	movw	r0, #17040	; 0x4290
   10456:	4281      	cmp	r1, r0
   10458:	d901      	bls.n	1045e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
   1045a:	2012      	movs	r0, #18
   1045c:	4770      	bx	lr
   1045e:	2000      	movs	r0, #0
   10460:	4770      	bx	lr
   10462:	b510      	push	{r4, lr}
   10464:	4604      	mov	r4, r0
   10466:	7800      	ldrb	r0, [r0, #0]
   10468:	2801      	cmp	r0, #1
   1046a:	d009      	beq.n	10480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
   1046c:	f7f8 fcc8 	bl	8e00 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   10470:	2805      	cmp	r0, #5
   10472:	d003      	beq.n	1047c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
   10474:	f7f8 fc8e 	bl	8d94 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
   10478:	2800      	cmp	r0, #0
   1047a:	d000      	beq.n	1047e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
   1047c:	200c      	movs	r0, #12
   1047e:	bd10      	pop	{r4, pc}
   10480:	f7f7 fa40 	bl	7904 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
   10484:	b138      	cbz	r0, 10496 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
   10486:	f7f7 f8b9 	bl	75fc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
   1048a:	88a1      	ldrh	r1, [r4, #4]
   1048c:	8860      	ldrh	r0, [r4, #2]
   1048e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10492:	f7f8 bc43 	b.w	8d1c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
   10496:	2012      	movs	r0, #18
   10498:	bd10      	pop	{r4, pc}
   1049a:	7802      	ldrb	r2, [r0, #0]
   1049c:	2a01      	cmp	r2, #1
   1049e:	d001      	beq.n	104a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
   104a0:	b1ba      	cbz	r2, 104d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   104a2:	e018      	b.n	104d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   104a4:	7842      	ldrb	r2, [r0, #1]
   104a6:	b13a      	cbz	r2, 104b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   104a8:	2a01      	cmp	r2, #1
   104aa:	d005      	beq.n	104b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
   104ac:	2a02      	cmp	r2, #2
   104ae:	d112      	bne.n	104d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   104b0:	b189      	cbz	r1, 104d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   104b2:	8881      	ldrh	r1, [r0, #4]
   104b4:	b179      	cbz	r1, 104d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   104b6:	e000      	b.n	104ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
   104b8:	b159      	cbz	r1, 104d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   104ba:	8841      	ldrh	r1, [r0, #2]
   104bc:	b149      	cbz	r1, 104d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   104be:	8880      	ldrh	r0, [r0, #4]
   104c0:	b138      	cbz	r0, 104d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
   104c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   104c6:	0049      	lsls	r1, r1, #1
   104c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   104cc:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
   104d0:	d201      	bcs.n	104d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
   104d2:	2000      	movs	r0, #0
   104d4:	4770      	bx	lr
   104d6:	2012      	movs	r0, #18
   104d8:	4770      	bx	lr
   104da:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
   104de:	7a45      	ldrb	r5, [r0, #9]
   104e0:	4604      	mov	r4, r0
   104e2:	0768      	lsls	r0, r5, #29
   104e4:	d06c      	beq.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   104e6:	08e8      	lsrs	r0, r5, #3
   104e8:	d16a      	bne.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   104ea:	2d02      	cmp	r5, #2
   104ec:	d068      	beq.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   104ee:	f7fb fe1f 	bl	c130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   104f2:	ea25 0000 	bic.w	r0, r5, r0
   104f6:	0740      	lsls	r0, r0, #29
   104f8:	d102      	bne.n	10500 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
   104fa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   104fe:	b110      	cbz	r0, 10506 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
   10500:	2011      	movs	r0, #17
   10502:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
   10506:	2d01      	cmp	r5, #1
   10508:	d15a      	bne.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1050a:	27ff      	movs	r7, #255	; 0xff
   1050c:	2101      	movs	r1, #1
   1050e:	69a0      	ldr	r0, [r4, #24]
   10510:	f7fb fd4a 	bl	bfa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
   10514:	b3e8      	cbz	r0, 10592 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
   10516:	46a8      	mov	r8, r5
   10518:	2600      	movs	r6, #0
   1051a:	4635      	mov	r5, r6
   1051c:	42bd      	cmp	r5, r7
   1051e:	d02f      	beq.n	10580 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
   10520:	eb04 0185 	add.w	r1, r4, r5, lsl #2
   10524:	6988      	ldr	r0, [r1, #24]
   10526:	68c9      	ldr	r1, [r1, #12]
   10528:	4288      	cmp	r0, r1
   1052a:	d849      	bhi.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1052c:	4406      	add	r6, r0
   1052e:	eb04 0045 	add.w	r0, r4, r5, lsl #1
   10532:	4681      	mov	r9, r0
   10534:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
   10536:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
   1053a:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   1053c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
   10540:	8e03      	ldrh	r3, [r0, #48]	; 0x30
   10542:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
   10544:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   10546:	2000      	movs	r0, #0
   10548:	f000 f89e 	bl	10688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
   1054c:	b308      	cbz	r0, 10592 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
   1054e:	b1bd      	cbz	r5, 10580 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
   10550:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
   10554:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
   10558:	4281      	cmp	r1, r0
   1055a:	d131      	bne.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1055c:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
   10560:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
   10564:	4281      	cmp	r1, r0
   10566:	d12b      	bne.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10568:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
   1056c:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
   10570:	4281      	cmp	r1, r0
   10572:	d125      	bne.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10574:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
   10578:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
   1057c:	4281      	cmp	r1, r0
   1057e:	d11f      	bne.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   10580:	1c6d      	adds	r5, r5, #1
   10582:	b2ed      	uxtb	r5, r5
   10584:	4545      	cmp	r5, r8
   10586:	d3c9      	bcc.n	1051c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
   10588:	68e0      	ldr	r0, [r4, #12]
   1058a:	42b0      	cmp	r0, r6
   1058c:	d318      	bcc.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1058e:	7820      	ldrb	r0, [r4, #0]
   10590:	e000      	b.n	10594 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
   10592:	e003      	b.n	1059c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
   10594:	b120      	cbz	r0, 105a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
   10596:	2801      	cmp	r0, #1
   10598:	d112      	bne.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   1059a:	e004      	b.n	105a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
   1059c:	2030      	movs	r0, #48	; 0x30
   1059e:	e7b0      	b.n	10502 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   105a0:	78a0      	ldrb	r0, [r4, #2]
   105a2:	2800      	cmp	r0, #0
   105a4:	d1f7      	bne.n	10596 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
   105a6:	7860      	ldrb	r0, [r4, #1]
   105a8:	b128      	cbz	r0, 105b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   105aa:	2801      	cmp	r0, #1
   105ac:	d003      	beq.n	105b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   105ae:	2802      	cmp	r0, #2
   105b0:	d001      	beq.n	105b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
   105b2:	2803      	cmp	r0, #3
   105b4:	d104      	bne.n	105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   105b6:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
   105ba:	b108      	cbz	r0, 105c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
   105bc:	2807      	cmp	r0, #7
   105be:	d901      	bls.n	105c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
   105c0:	2012      	movs	r0, #18
   105c2:	e79e      	b.n	10502 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   105c4:	2000      	movs	r0, #0
   105c6:	e79c      	b.n	10502 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
   105c8:	b570      	push	{r4, r5, r6, lr}
   105ca:	4604      	mov	r4, r0
   105cc:	7800      	ldrb	r0, [r0, #0]
   105ce:	2500      	movs	r5, #0
   105d0:	2801      	cmp	r0, #1
   105d2:	d004      	beq.n	105de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   105d4:	b118      	cbz	r0, 105de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   105d6:	2802      	cmp	r0, #2
   105d8:	d001      	beq.n	105de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
   105da:	2803      	cmp	r0, #3
   105dc:	d139      	bne.n	10652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   105de:	7860      	ldrb	r0, [r4, #1]
   105e0:	b128      	cbz	r0, 105ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   105e2:	2801      	cmp	r0, #1
   105e4:	d003      	beq.n	105ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   105e6:	2802      	cmp	r0, #2
   105e8:	d001      	beq.n	105ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
   105ea:	2803      	cmp	r0, #3
   105ec:	d131      	bne.n	10652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   105ee:	7e60      	ldrb	r0, [r4, #25]
   105f0:	b948      	cbnz	r0, 10606 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
   105f2:	78a0      	ldrb	r0, [r4, #2]
   105f4:	2801      	cmp	r0, #1
   105f6:	d12c      	bne.n	10652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   105f8:	f7fb fd9a 	bl	c130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   105fc:	4601      	mov	r1, r0
   105fe:	78a0      	ldrb	r0, [r4, #2]
   10600:	ea30 0101 	bics.w	r1, r0, r1
   10604:	d001      	beq.n	1060a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
   10606:	2011      	movs	r0, #17
   10608:	bd70      	pop	{r4, r5, r6, pc}
   1060a:	07c0      	lsls	r0, r0, #31
   1060c:	d006      	beq.n	1061c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
   1060e:	78e0      	ldrb	r0, [r4, #3]
   10610:	2301      	movs	r3, #1
   10612:	6922      	ldr	r2, [r4, #16]
   10614:	68a1      	ldr	r1, [r4, #8]
   10616:	f000 f820 	bl	1065a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   1061a:	4605      	mov	r5, r0
   1061c:	78a0      	ldrb	r0, [r4, #2]
   1061e:	0780      	lsls	r0, r0, #30
   10620:	d506      	bpl.n	10630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
   10622:	78e0      	ldrb	r0, [r4, #3]
   10624:	2302      	movs	r3, #2
   10626:	6922      	ldr	r2, [r4, #16]
   10628:	68a1      	ldr	r1, [r4, #8]
   1062a:	f000 f816 	bl	1065a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   1062e:	4305      	orrs	r5, r0
   10630:	78a0      	ldrb	r0, [r4, #2]
   10632:	0740      	lsls	r0, r0, #29
   10634:	d506      	bpl.n	10644 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
   10636:	78e0      	ldrb	r0, [r4, #3]
   10638:	2304      	movs	r3, #4
   1063a:	6922      	ldr	r2, [r4, #16]
   1063c:	68a1      	ldr	r1, [r4, #8]
   1063e:	f000 f80c 	bl	1065a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
   10642:	4305      	orrs	r5, r0
   10644:	b10d      	cbz	r5, 1064a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
   10646:	4628      	mov	r0, r5
   10648:	bd70      	pop	{r4, r5, r6, pc}
   1064a:	7e20      	ldrb	r0, [r4, #24]
   1064c:	b108      	cbz	r0, 10652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
   1064e:	2807      	cmp	r0, #7
   10650:	d901      	bls.n	10656 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
   10652:	2012      	movs	r0, #18
   10654:	bd70      	pop	{r4, r5, r6, pc}
   10656:	2000      	movs	r0, #0
   10658:	bd70      	pop	{r4, r5, r6, pc}
   1065a:	b570      	push	{r4, r5, r6, lr}
   1065c:	4614      	mov	r4, r2
   1065e:	460d      	mov	r5, r1
   10660:	b108      	cbz	r0, 10666 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
   10662:	2801      	cmp	r0, #1
   10664:	d10a      	bne.n	1067c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
   10666:	4619      	mov	r1, r3
   10668:	4610      	mov	r0, r2
   1066a:	f7fb fc9d 	bl	bfa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
   1066e:	b138      	cbz	r0, 10680 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
   10670:	4628      	mov	r0, r5
   10672:	f7fb fc61 	bl	bf38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x140>
   10676:	b118      	cbz	r0, 10680 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
   10678:	42ac      	cmp	r4, r5
   1067a:	d903      	bls.n	10684 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
   1067c:	2012      	movs	r0, #18
   1067e:	bd70      	pop	{r4, r5, r6, pc}
   10680:	2030      	movs	r0, #48	; 0x30
   10682:	bd70      	pop	{r4, r5, r6, pc}
   10684:	2000      	movs	r0, #0
   10686:	bd70      	pop	{r4, r5, r6, pc}
   10688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1068c:	461d      	mov	r5, r3
   1068e:	4610      	mov	r0, r2
   10690:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
   10694:	1f8b      	subs	r3, r1, #6
   10696:	f640 427a 	movw	r2, #3194	; 0xc7a
   1069a:	9e08      	ldr	r6, [sp, #32]
   1069c:	4293      	cmp	r3, r2
   1069e:	d81c      	bhi.n	106da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   106a0:	1f83      	subs	r3, r0, #6
   106a2:	4293      	cmp	r3, r2
   106a4:	d819      	bhi.n	106da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   106a6:	4281      	cmp	r1, r0
   106a8:	d817      	bhi.n	106da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   106aa:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
   106ae:	d214      	bcs.n	106da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   106b0:	f1a4 010a 	sub.w	r1, r4, #10
   106b4:	1f12      	subs	r2, r2, #4
   106b6:	4291      	cmp	r1, r2
   106b8:	d80f      	bhi.n	106da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   106ba:	f7fe fa28 	bl	eb0e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
   106be:	1c6d      	adds	r5, r5, #1
   106c0:	4368      	muls	r0, r5
   106c2:	f240 2171 	movw	r1, #625	; 0x271
   106c6:	0040      	lsls	r0, r0, #1
   106c8:	434c      	muls	r4, r1
   106ca:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
   106ce:	d204      	bcs.n	106da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   106d0:	42b7      	cmp	r7, r6
   106d2:	d802      	bhi.n	106da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
   106d4:	2001      	movs	r0, #1
   106d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   106da:	2000      	movs	r0, #0
   106dc:	e7fb      	b.n	106d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
   106de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106e2:	4606      	mov	r6, r0
   106e4:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
   106e8:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
   106ec:	4615      	mov	r5, r2
   106ee:	302c      	adds	r0, #44	; 0x2c
   106f0:	f7f8 fb00 	bl	8cf4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
   106f4:	4680      	mov	r8, r0
   106f6:	2102      	movs	r1, #2
   106f8:	f7fe fac8 	bl	ec8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   106fc:	4287      	cmp	r7, r0
   106fe:	d200      	bcs.n	10702 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
   10700:	4638      	mov	r0, r7
   10702:	4607      	mov	r7, r0
   10704:	2102      	movs	r1, #2
   10706:	4640      	mov	r0, r8
   10708:	f7fe fac0 	bl	ec8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
   1070c:	4284      	cmp	r4, r0
   1070e:	d200      	bcs.n	10712 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
   10710:	4620      	mov	r0, r4
   10712:	8831      	ldrh	r1, [r6, #0]
   10714:	8029      	strh	r1, [r5, #0]
   10716:	2f1b      	cmp	r7, #27
   10718:	d913      	bls.n	10742 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
   1071a:	2ffb      	cmp	r7, #251	; 0xfb
   1071c:	d300      	bcc.n	10720 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
   1071e:	27fb      	movs	r7, #251	; 0xfb
   10720:	806f      	strh	r7, [r5, #2]
   10722:	281b      	cmp	r0, #27
   10724:	d90f      	bls.n	10746 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
   10726:	28fb      	cmp	r0, #251	; 0xfb
   10728:	d300      	bcc.n	1072c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   1072a:	20fb      	movs	r0, #251	; 0xfb
   1072c:	80e8      	strh	r0, [r5, #6]
   1072e:	4640      	mov	r0, r8
   10730:	f7ff fe49 	bl	103c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   10734:	80a8      	strh	r0, [r5, #4]
   10736:	4640      	mov	r0, r8
   10738:	f7ff fe45 	bl	103c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
   1073c:	8128      	strh	r0, [r5, #8]
   1073e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10742:	271b      	movs	r7, #27
   10744:	e7ec      	b.n	10720 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
   10746:	201b      	movs	r0, #27
   10748:	e7f0      	b.n	1072c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
   1074a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1074e:	7890      	ldrb	r0, [r2, #2]
   10750:	9e06      	ldr	r6, [sp, #24]
   10752:	461d      	mov	r5, r3
   10754:	4614      	mov	r4, r2
   10756:	b908      	cbnz	r0, 1075c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d8>
   10758:	f7fb fcea 	bl	c130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   1075c:	78e4      	ldrb	r4, [r4, #3]
   1075e:	4607      	mov	r7, r0
   10760:	b914      	cbnz	r4, 10768 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e4>
   10762:	f7fb fce5 	bl	c130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
   10766:	4604      	mov	r4, r0
   10768:	b16f      	cbz	r7, 10786 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
   1076a:	b164      	cbz	r4, 10786 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
   1076c:	4638      	mov	r0, r7
   1076e:	f7ff fe34 	bl	103da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   10772:	4620      	mov	r0, r4
   10774:	f7ff fe31 	bl	103da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
   10778:	b12f      	cbz	r7, 10786 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
   1077a:	b124      	cbz	r4, 10786 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
   1077c:	702f      	strb	r7, [r5, #0]
   1077e:	7034      	strb	r4, [r6, #0]
   10780:	2000      	movs	r0, #0
   10782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10786:	2009      	movs	r0, #9
   10788:	e7fb      	b.n	10782 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fe>
   1078a:	b510      	push	{r4, lr}
   1078c:	f7fc ff4c 	bl	d628 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
   10790:	b928      	cbnz	r0, 1079e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
   10792:	f7fc ff7f 	bl	d694 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
   10796:	b910      	cbnz	r0, 1079e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
   10798:	f7fc ff86 	bl	d6a8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
   1079c:	b108      	cbz	r0, 107a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41e>
   1079e:	2008      	movs	r0, #8
   107a0:	bd10      	pop	{r4, pc}
   107a2:	f7fc ff16 	bl	d5d2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
   107a6:	b940      	cbnz	r0, 107ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
   107a8:	f7fc ff1d 	bl	d5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
   107ac:	b928      	cbnz	r0, 107ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
   107ae:	f7fc ff31 	bl	d614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
   107b2:	b910      	cbnz	r0, 107ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
   107b4:	f7fc ff42 	bl	d63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
   107b8:	b108      	cbz	r0, 107be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x43a>
   107ba:	2004      	movs	r0, #4
   107bc:	bd10      	pop	{r4, pc}
   107be:	f240 519c 	movw	r1, #1436	; 0x59c
   107c2:	2039      	movs	r0, #57	; 0x39
   107c4:	f7f4 fb7c 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   107c8:	b510      	push	{r4, lr}
   107ca:	f7fb fcab 	bl	c124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
   107ce:	f3c0 1040 	ubfx	r0, r0, #5, #1
   107d2:	bd10      	pop	{r4, pc}
   107d4:	6840      	ldr	r0, [r0, #4]
   107d6:	f000 b800 	b.w	107da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
   107da:	b508      	push	{r3, lr}
   107dc:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
   107e0:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
   107e4:	f88d 0000 	strb.w	r0, [sp]
   107e8:	9800      	ldr	r0, [sp, #0]
   107ea:	9000      	str	r0, [sp, #0]
   107ec:	f89d 0000 	ldrb.w	r0, [sp]
   107f0:	1e40      	subs	r0, r0, #1
   107f2:	4208      	tst	r0, r1
   107f4:	d003      	beq.n	107fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
   107f6:	2904      	cmp	r1, #4
   107f8:	d001      	beq.n	107fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
   107fa:	2001      	movs	r0, #1
   107fc:	bd08      	pop	{r3, pc}
   107fe:	2000      	movs	r0, #0
   10800:	bd08      	pop	{r3, pc}
   10802:	b510      	push	{r4, lr}
   10804:	f000 f804 	bl	10810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   10808:	2800      	cmp	r0, #0
   1080a:	d000      	beq.n	1080e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48a>
   1080c:	2001      	movs	r0, #1
   1080e:	bd10      	pop	{r4, pc}
   10810:	b510      	push	{r4, lr}
   10812:	f7f8 faf5 	bl	8e00 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
   10816:	2804      	cmp	r0, #4
   10818:	d003      	beq.n	10822 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
   1081a:	2805      	cmp	r0, #5
   1081c:	d001      	beq.n	10822 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
   1081e:	2000      	movs	r0, #0
   10820:	bd10      	pop	{r4, pc}
   10822:	2001      	movs	r0, #1
   10824:	bd10      	pop	{r4, pc}
   10826:	b5f0      	push	{r4, r5, r6, r7, lr}
   10828:	b089      	sub	sp, #36	; 0x24
   1082a:	4604      	mov	r4, r0
   1082c:	8800      	ldrh	r0, [r0, #0]
   1082e:	a906      	add	r1, sp, #24
   10830:	f7fe f961 	bl	eaf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
   10834:	2800      	cmp	r0, #0
   10836:	d143      	bne.n	108c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   10838:	9807      	ldr	r0, [sp, #28]
   1083a:	2601      	movs	r6, #1
   1083c:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
   10840:	f88d 1008 	strb.w	r1, [sp, #8]
   10844:	9902      	ldr	r1, [sp, #8]
   10846:	9102      	str	r1, [sp, #8]
   10848:	f89d 1008 	ldrb.w	r1, [sp, #8]
   1084c:	f88d 100c 	strb.w	r1, [sp, #12]
   10850:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
   10854:	3078      	adds	r0, #120	; 0x78
   10856:	291d      	cmp	r1, #29
   10858:	d102      	bne.n	10860 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
   1085a:	f89d 100c 	ldrb.w	r1, [sp, #12]
   1085e:	b141      	cbz	r1, 10872 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
   10860:	2100      	movs	r1, #0
   10862:	f88d 1004 	strb.w	r1, [sp, #4]
   10866:	2105      	movs	r1, #5
   10868:	304e      	adds	r0, #78	; 0x4e
   1086a:	f7ff f9e2 	bl	fc32 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
   1086e:	b110      	cbz	r0, 10876 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
   10870:	e004      	b.n	1087c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
   10872:	2101      	movs	r1, #1
   10874:	e7f5      	b.n	10862 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
   10876:	f89d 0004 	ldrb.w	r0, [sp, #4]
   1087a:	b300      	cbz	r0, 108be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
   1087c:	8921      	ldrh	r1, [r4, #8]
   1087e:	88e0      	ldrh	r0, [r4, #6]
   10880:	f7ff fde1 	bl	10446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   10884:	2800      	cmp	r0, #0
   10886:	d11b      	bne.n	108c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   10888:	88a1      	ldrh	r1, [r4, #4]
   1088a:	8860      	ldrh	r0, [r4, #2]
   1088c:	f7ff fddb 	bl	10446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
   10890:	2800      	cmp	r0, #0
   10892:	d115      	bne.n	108c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   10894:	8921      	ldrh	r1, [r4, #8]
   10896:	88e0      	ldrh	r0, [r4, #6]
   10898:	f7ff fdcb 	bl	10432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   1089c:	2800      	cmp	r0, #0
   1089e:	d10f      	bne.n	108c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   108a0:	88a1      	ldrh	r1, [r4, #4]
   108a2:	8860      	ldrh	r0, [r4, #2]
   108a4:	f7ff fdc5 	bl	10432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
   108a8:	0007      	movs	r7, r0
   108aa:	d109      	bne.n	108c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   108ac:	9807      	ldr	r0, [sp, #28]
   108ae:	f500 7599 	add.w	r5, r0, #306	; 0x132
   108b2:	706e      	strb	r6, [r5, #1]
   108b4:	f89d 100c 	ldrb.w	r1, [sp, #12]
   108b8:	b121      	cbz	r1, 108c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
   108ba:	273a      	movs	r7, #58	; 0x3a
   108bc:	e02d      	b.n	1091a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
   108be:	201a      	movs	r0, #26
   108c0:	b009      	add	sp, #36	; 0x24
   108c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
   108c4:	4631      	mov	r1, r6
   108c6:	aa03      	add	r2, sp, #12
   108c8:	f7ff ff09 	bl	106de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
   108cc:	8861      	ldrh	r1, [r4, #2]
   108ce:	f8bd 0012 	ldrh.w	r0, [sp, #18]
   108d2:	4281      	cmp	r1, r0
   108d4:	d200      	bcs.n	108d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
   108d6:	4608      	mov	r0, r1
   108d8:	80e8      	strh	r0, [r5, #6]
   108da:	88a1      	ldrh	r1, [r4, #4]
   108dc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
   108e0:	4281      	cmp	r1, r0
   108e2:	d200      	bcs.n	108e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
   108e4:	4608      	mov	r0, r1
   108e6:	8128      	strh	r0, [r5, #8]
   108e8:	88e2      	ldrh	r2, [r4, #6]
   108ea:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   108ee:	428a      	cmp	r2, r1
   108f0:	d200      	bcs.n	108f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
   108f2:	4611      	mov	r1, r2
   108f4:	8069      	strh	r1, [r5, #2]
   108f6:	8922      	ldrh	r2, [r4, #8]
   108f8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   108fc:	428a      	cmp	r2, r1
   108fe:	d200      	bcs.n	10902 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
   10900:	4611      	mov	r1, r2
   10902:	f640 0248 	movw	r2, #2120	; 0x848
   10906:	80a9      	strh	r1, [r5, #4]
   10908:	4291      	cmp	r1, r2
   1090a:	d300      	bcc.n	1090e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
   1090c:	4611      	mov	r1, r2
   1090e:	80a9      	strh	r1, [r5, #4]
   10910:	4290      	cmp	r0, r2
   10912:	d200      	bcs.n	10916 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
   10914:	4602      	mov	r2, r0
   10916:	812a      	strh	r2, [r5, #8]
   10918:	702e      	strb	r6, [r5, #0]
   1091a:	2000      	movs	r0, #0
   1091c:	7068      	strb	r0, [r5, #1]
   1091e:	4638      	mov	r0, r7
   10920:	e7ce      	b.n	108c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
   10922:	b530      	push	{r4, r5, lr}
   10924:	f340 0400 	sbfx	r4, r0, #0, #1
   10928:	f340 0040 	sbfx	r0, r0, #1, #1
   1092c:	1c40      	adds	r0, r0, #1
   1092e:	9d03      	ldr	r5, [sp, #12]
   10930:	1c64      	adds	r4, r4, #1
   10932:	d000      	beq.n	10936 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
   10934:	b119      	cbz	r1, 1093e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
   10936:	b100      	cbz	r0, 1093a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
   10938:	b10a      	cbz	r2, 1093e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
   1093a:	b91c      	cbnz	r4, 10944 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
   1093c:	e001      	b.n	10942 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
   1093e:	2011      	movs	r0, #17
   10940:	bd30      	pop	{r4, r5, pc}
   10942:	2100      	movs	r1, #0
   10944:	7019      	strb	r1, [r3, #0]
   10946:	b900      	cbnz	r0, 1094a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
   10948:	2200      	movs	r2, #0
   1094a:	702a      	strb	r2, [r5, #0]
   1094c:	2000      	movs	r0, #0
   1094e:	bd30      	pop	{r4, r5, pc}
   10950:	b510      	push	{r4, lr}
   10952:	f7ff ff5d 	bl	10810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
   10956:	b120      	cbz	r0, 10962 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   10958:	f7f7 f84e 	bl	79f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
   1095c:	b108      	cbz	r0, 10962 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
   1095e:	2001      	movs	r0, #1
   10960:	bd10      	pop	{r4, pc}
   10962:	2000      	movs	r0, #0
   10964:	bd10      	pop	{r4, pc}

00010966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
   10966:	6802      	ldr	r2, [r0, #0]
   10968:	b912      	cbnz	r2, 10970 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
   1096a:	6001      	str	r1, [r0, #0]
   1096c:	4770      	bx	lr
   1096e:	4602      	mov	r2, r0
   10970:	6850      	ldr	r0, [r2, #4]
   10972:	b108      	cbz	r0, 10978 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
   10974:	428a      	cmp	r2, r1
   10976:	d1fa      	bne.n	1096e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
   10978:	428a      	cmp	r2, r1
   1097a:	d0f7      	beq.n	1096c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
   1097c:	6051      	str	r1, [r2, #4]
   1097e:	4770      	bx	lr
   10980:	b510      	push	{r4, lr}
   10982:	4604      	mov	r4, r0
   10984:	e002      	b.n	1098c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
   10986:	6820      	ldr	r0, [r4, #0]
   10988:	4780      	blx	r0
   1098a:	6864      	ldr	r4, [r4, #4]
   1098c:	2c00      	cmp	r4, #0
   1098e:	d1fa      	bne.n	10986 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
   10990:	bd10      	pop	{r4, pc}
   10992:	b510      	push	{r4, lr}
   10994:	2000      	movs	r0, #0
   10996:	f7f4 fc5b 	bl	5250 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
   1099a:	f7f4 fe7b 	bl	5694 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
   1099e:	f7f5 f8c3 	bl	5b28 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
   109a2:	f7f5 faab 	bl	5efc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
   109a6:	2800      	cmp	r0, #0
   109a8:	d003      	beq.n	109b2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
   109aa:	21b8      	movs	r1, #184	; 0xb8
   109ac:	2001      	movs	r0, #1
   109ae:	f7f4 fa87 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109b2:	bd10      	pop	{r4, pc}
   109b4:	b510      	push	{r4, lr}
   109b6:	f000 f80a 	bl	109ce <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
   109ba:	f7ff f823 	bl	fa04 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
   109be:	2800      	cmp	r0, #0
   109c0:	d004      	beq.n	109cc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
   109c2:	f240 1135 	movw	r1, #309	; 0x135
   109c6:	2001      	movs	r0, #1
   109c8:	f7f4 fa7a 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109cc:	bd10      	pop	{r4, pc}
   109ce:	b510      	push	{r4, lr}
   109d0:	f7f8 f932 	bl	8c38 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
   109d4:	b120      	cbz	r0, 109e0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
   109d6:	f240 111d 	movw	r1, #285	; 0x11d
   109da:	2001      	movs	r0, #1
   109dc:	f7f4 fa70 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   109e0:	f7f6 ff5a 	bl	7898 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
   109e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   109e8:	f7fa bed4 	b.w	b794 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
   109ec:	000b0001 	.word	0x000b0001
   109f0:	000a0002 	.word	0x000a0002
   109f4:	00090005 	.word	0x00090005
   109f8:	0008000a 	.word	0x0008000a
   109fc:	00070014 	.word	0x00070014
   10a00:	0006001e 	.word	0x0006001e
   10a04:	00050032 	.word	0x00050032
   10a08:	0004004b 	.word	0x0004004b
   10a0c:	00030064 	.word	0x00030064
   10a10:	00020096 	.word	0x00020096
   10a14:	000100fa 	.word	0x000100fa
   10a18:	000001f4 	.word	0x000001f4

00010a1c <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
   10a1c:	b510      	push	{r4, lr}
   10a1e:	f7fb ff3f 	bl	c8a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
   10a22:	f000 f850 	bl	10ac6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
   10a26:	f7fb fbf7 	bl	c218 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
   10a2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10a2e:	f7fb bcf5 	b.w	c41c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

00010a32 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
   10a32:	b510      	push	{r4, lr}
   10a34:	24c8      	movs	r4, #200	; 0xc8
   10a36:	1e64      	subs	r4, r4, #1
   10a38:	b2e4      	uxtb	r4, r4
   10a3a:	f7fb fc0b 	bl	c254 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
   10a3e:	2802      	cmp	r0, #2
   10a40:	d003      	beq.n	10a4a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
   10a42:	2801      	cmp	r0, #1
   10a44:	d000      	beq.n	10a48 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
   10a46:	2000      	movs	r0, #0
   10a48:	bd10      	pop	{r4, pc}
   10a4a:	2c00      	cmp	r4, #0
   10a4c:	d1f3      	bne.n	10a36 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
   10a4e:	2193      	movs	r1, #147	; 0x93
   10a50:	203b      	movs	r0, #59	; 0x3b
   10a52:	f7f4 fa35 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

00010a56 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
   10a56:	b510      	push	{r4, lr}
   10a58:	f7f4 f8c8 	bl	4bec <mpsl_fem_lna_configuration_clear>
   10a5c:	2800      	cmp	r0, #0
   10a5e:	d005      	beq.n	10a6c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   10a60:	1c40      	adds	r0, r0, #1
   10a62:	d003      	beq.n	10a6c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
   10a64:	2150      	movs	r1, #80	; 0x50
   10a66:	2040      	movs	r0, #64	; 0x40
   10a68:	f7f4 fa2a 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a6c:	bd10      	pop	{r4, pc}

00010a6e <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
   10a6e:	b510      	push	{r4, lr}
   10a70:	f7f4 f8c8 	bl	4c04 <mpsl_fem_pa_configuration_clear>
   10a74:	2800      	cmp	r0, #0
   10a76:	d005      	beq.n	10a84 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   10a78:	1c40      	adds	r0, r0, #1
   10a7a:	d003      	beq.n	10a84 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
   10a7c:	2149      	movs	r1, #73	; 0x49
   10a7e:	2040      	movs	r0, #64	; 0x40
   10a80:	f7f4 fa1e 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a84:	bd10      	pop	{r4, pc}

00010a86 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
   10a86:	b510      	push	{r4, lr}
   10a88:	f7f4 f8aa 	bl	4be0 <mpsl_fem_disable>
   10a8c:	2800      	cmp	r0, #0
   10a8e:	d005      	beq.n	10a9c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   10a90:	1c40      	adds	r0, r0, #1
   10a92:	d003      	beq.n	10a9c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
   10a94:	2157      	movs	r1, #87	; 0x57
   10a96:	2040      	movs	r0, #64	; 0x40
   10a98:	f7f4 fa12 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10a9c:	bd10      	pop	{r4, pc}

00010a9e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
   10a9e:	b510      	push	{r4, lr}
   10aa0:	2100      	movs	r1, #0
   10aa2:	4608      	mov	r0, r1
   10aa4:	f7f4 f8a8 	bl	4bf8 <mpsl_fem_lna_configuration_set>
   10aa8:	b108      	cbz	r0, 10aae <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
   10aaa:	2000      	movs	r0, #0
   10aac:	bd10      	pop	{r4, pc}
   10aae:	2001      	movs	r0, #1
   10ab0:	bd10      	pop	{r4, pc}

00010ab2 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
   10ab2:	b508      	push	{r3, lr}
   10ab4:	4668      	mov	r0, sp
   10ab6:	f7f4 f8b1 	bl	4c1c <mpsl_fem_pa_is_configured>
   10aba:	f89d 0000 	ldrb.w	r0, [sp]
   10abe:	2800      	cmp	r0, #0
   10ac0:	d000      	beq.n	10ac4 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
   10ac2:	2001      	movs	r0, #1
   10ac4:	bd08      	pop	{r3, pc}

00010ac6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
   10ac6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
   10aca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   10ace:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
   10ad2:	f3bf 8f4f 	dsb	sy
   10ad6:	f3bf 8f6f 	isb	sy
   10ada:	f7fb bd79 	b.w	c5d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
   10ade:	2800      	cmp	r0, #0
   10ae0:	db09      	blt.n	10af6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
   10ae2:	f000 021f 	and.w	r2, r0, #31
   10ae6:	2101      	movs	r1, #1
   10ae8:	4091      	lsls	r1, r2
   10aea:	0940      	lsrs	r0, r0, #5
   10aec:	0080      	lsls	r0, r0, #2
   10aee:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10af2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
   10af6:	4770      	bx	lr
   10af8:	2800      	cmp	r0, #0
   10afa:	db0d      	blt.n	10b18 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
   10afc:	f000 021f 	and.w	r2, r0, #31
   10b00:	2101      	movs	r1, #1
   10b02:	4091      	lsls	r1, r2
   10b04:	0940      	lsrs	r0, r0, #5
   10b06:	0080      	lsls	r0, r0, #2
   10b08:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
   10b0c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
   10b10:	f3bf 8f4f 	dsb	sy
   10b14:	f3bf 8f6f 	isb	sy
   10b18:	4770      	bx	lr

00010b1a <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
   10b1a:	b510      	push	{r4, lr}
   10b1c:	2801      	cmp	r0, #1
   10b1e:	d006      	beq.n	10b2e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
   10b20:	2802      	cmp	r0, #2
   10b22:	d006      	beq.n	10b32 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
   10b24:	f640 3141 	movw	r1, #2881	; 0xb41
   10b28:	203e      	movs	r0, #62	; 0x3e
   10b2a:	f7f4 f9c9 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b2e:	2028      	movs	r0, #40	; 0x28
   10b30:	bd10      	pop	{r4, pc}
   10b32:	2018      	movs	r0, #24
   10b34:	bd10      	pop	{r4, pc}

00010b36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
   10b36:	b510      	push	{r4, lr}
   10b38:	2801      	cmp	r0, #1
   10b3a:	d006      	beq.n	10b4a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
   10b3c:	2802      	cmp	r0, #2
   10b3e:	d007      	beq.n	10b50 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
   10b40:	f640 3155 	movw	r1, #2901	; 0xb55
   10b44:	203e      	movs	r0, #62	; 0x3e
   10b46:	f7f4 f9bb 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b4a:	f641 6014 	movw	r0, #7700	; 0x1e14
   10b4e:	bd10      	pop	{r4, pc}
   10b50:	f241 1030 	movw	r0, #4400	; 0x1130
   10b54:	bd10      	pop	{r4, pc}

00010b56 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
   10b56:	f7fc bbed 	b.w	d334 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
   10b5a:	b510      	push	{r4, lr}
   10b5c:	460a      	mov	r2, r1
   10b5e:	b130      	cbz	r0, 10b6e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
   10b60:	2801      	cmp	r0, #1
   10b62:	d00b      	beq.n	10b7c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
   10b64:	f240 6114 	movw	r1, #1556	; 0x614
   10b68:	203e      	movs	r0, #62	; 0x3e
   10b6a:	f7f4 f9a9 	bl	4ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
   10b6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b72:	f102 0128 	add.w	r1, r2, #40	; 0x28
   10b76:	4610      	mov	r0, r2
   10b78:	f7fb bbc0 	b.w	c2fc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
   10b7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   10b80:	f102 0129 	add.w	r1, r2, #41	; 0x29
   10b84:	4610      	mov	r0, r2
   10b86:	f7fb bba3 	b.w	c2d0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
   10b8a:	5840      	ldr	r0, [r0, r1]
   10b8c:	2800      	cmp	r0, #0
   10b8e:	d000      	beq.n	10b92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
   10b90:	2001      	movs	r0, #1
   10b92:	4770      	bx	lr
   10b94:	5840      	ldr	r0, [r0, r1]
   10b96:	2800      	cmp	r0, #0
   10b98:	d000      	beq.n	10b9c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
   10b9a:	2001      	movs	r0, #1
   10b9c:	4770      	bx	lr

00010b9e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
   10b9e:	b570      	push	{r4, r5, r6, lr}
   10ba0:	4605      	mov	r5, r0
   10ba2:	4614      	mov	r4, r2
   10ba4:	4608      	mov	r0, r1
   10ba6:	f7ff ffc6 	bl	10b36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10baa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
   10bae:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
   10bb2:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
   10bb6:	4620      	mov	r0, r4
   10bb8:	f7ff ffbd 	bl	10b36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10bbc:	4428      	add	r0, r5
   10bbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10bc2:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
   10bc6:	fbb0 f5f1 	udiv	r5, r0, r1
   10bca:	4620      	mov	r0, r4
   10bcc:	f7ff ffa5 	bl	10b1a <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10bd0:	4428      	add	r0, r5
   10bd2:	1d40      	adds	r0, r0, #5
   10bd4:	bd70      	pop	{r4, r5, r6, pc}

00010bd6 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
   10bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10bda:	4607      	mov	r7, r0
   10bdc:	461d      	mov	r5, r3
   10bde:	460e      	mov	r6, r1
   10be0:	4614      	mov	r4, r2
   10be2:	4610      	mov	r0, r2
   10be4:	f7ff ffa7 	bl	10b36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10be8:	eb07 0147 	add.w	r1, r7, r7, lsl #1
   10bec:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
   10bf0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
   10bf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   10bf8:	2e02      	cmp	r6, #2
   10bfa:	d00e      	beq.n	10c1a <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
   10bfc:	f240 52dc 	movw	r2, #1500	; 0x5dc
   10c00:	4411      	add	r1, r2
   10c02:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
   10c06:	fbb1 f6f0 	udiv	r6, r1, r0
   10c0a:	4620      	mov	r0, r4
   10c0c:	f7ff ff85 	bl	10b1a <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
   10c10:	4430      	add	r0, r6
   10c12:	4428      	add	r0, r5
   10c14:	1d40      	adds	r0, r0, #5
   10c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10c1a:	4602      	mov	r2, r0
   10c1c:	e7f0      	b.n	10c00 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

00010c1e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
   10c1e:	b510      	push	{r4, lr}
   10c20:	4604      	mov	r4, r0
   10c22:	4608      	mov	r0, r1
   10c24:	f7ff ff87 	bl	10b36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10c28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10c2c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
   10c30:	fbb0 f0f1 	udiv	r0, r0, r1
   10c34:	1a20      	subs	r0, r4, r0
   10c36:	1e80      	subs	r0, r0, #2
   10c38:	bd10      	pop	{r4, pc}

00010c3a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
   10c3a:	b510      	push	{r4, lr}
   10c3c:	4604      	mov	r4, r0
   10c3e:	4608      	mov	r0, r1
   10c40:	f7ff ff79 	bl	10b36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
   10c44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   10c48:	fbb0 f0f1 	udiv	r0, r0, r1
   10c4c:	1a20      	subs	r0, r4, r0
   10c4e:	bd10      	pop	{r4, pc}

00010c50 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
   10c50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c54:	2902      	cmp	r1, #2
   10c56:	d008      	beq.n	10c6a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
   10c58:	f240 51dc 	movw	r1, #1500	; 0x5dc
   10c5c:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
   10c60:	fbb1 f1f2 	udiv	r1, r1, r2
   10c64:	4408      	add	r0, r1
   10c66:	1e80      	subs	r0, r0, #2
   10c68:	4770      	bx	lr
   10c6a:	4611      	mov	r1, r2
   10c6c:	e7f6      	b.n	10c5c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

00010c6e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
   10c6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   10c72:	2902      	cmp	r1, #2
   10c74:	d007      	beq.n	10c86 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
   10c76:	f240 51dc 	movw	r1, #1500	; 0x5dc
   10c7a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
   10c7e:	fbb1 f1f2 	udiv	r1, r1, r2
   10c82:	4408      	add	r0, r1
   10c84:	4770      	bx	lr
   10c86:	4611      	mov	r1, r2
   10c88:	e7f7      	b.n	10c7a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
   10c8a:	080c      	.short	0x080c
   10c8c:	010d1702 	.word	0x010d1702
   10c90:	09090201 	.word	0x09090201
   10c94:	02060101 	.word	0x02060101
   10c98:	03181809 	.word	0x03181809
   10c9c:	09090101 	.word	0x09090101
   10ca0:	0303      	.short	0x0303
   10ca2:	05          	.byte	0x05
   10ca3:	55          	.byte	0x55
   10ca4:	26255555 	.word	0x26255555
   10ca8:	27          	.byte	0x27
   10ca9:	01          	.byte	0x01
   10caa:	0103      	.short	0x0103
   10cac:	01          	.byte	0x01
   10cad:	01          	.byte	0x01
	...

00010cb0 <z_impl_clock_gettime>:
{
	uint64_t elapsed_nsecs;
	struct timespec base;
	k_spinlock_key_t key;

	switch (clock_id) {
   10cb0:	2801      	cmp	r0, #1
{
   10cb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   10cb6:	460d      	mov	r5, r1
	switch (clock_id) {
   10cb8:	d009      	beq.n	10cce <z_impl_clock_gettime+0x1e>
   10cba:	2804      	cmp	r0, #4
   10cbc:	d06d      	beq.n	10d9a <z_impl_clock_gettime+0xea>
		base = rt_clock_base;
		k_spin_unlock(&rt_clock_base_lock, key);
		break;

	default:
		errno = EINVAL;
   10cbe:	f01d fa70 	bl	2e1a2 <__errno>
   10cc2:	2316      	movs	r3, #22
   10cc4:	6003      	str	r3, [r0, #0]
		return -1;
   10cc6:	f04f 30ff 	mov.w	r0, #4294967295
		ts->tv_sec++;
		ts->tv_nsec -= NSEC_PER_SEC;
	}

	return 0;
}
   10cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
   10cce:	f04f 0340 	mov.w	r3, #64	; 0x40
   10cd2:	f3ef 8711 	mrs	r7, BASEPRI
   10cd6:	f383 8812 	msr	BASEPRI_MAX, r3
   10cda:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10cde:	4834      	ldr	r0, [pc, #208]	; (10db0 <z_impl_clock_gettime+0x100>)
   10ce0:	f014 f8e4 	bl	24eac <z_spin_lock_valid>
   10ce4:	b968      	cbnz	r0, 10d02 <z_impl_clock_gettime+0x52>
   10ce6:	4a33      	ldr	r2, [pc, #204]	; (10db4 <z_impl_clock_gettime+0x104>)
   10ce8:	4933      	ldr	r1, [pc, #204]	; (10db8 <z_impl_clock_gettime+0x108>)
   10cea:	4834      	ldr	r0, [pc, #208]	; (10dbc <z_impl_clock_gettime+0x10c>)
   10cec:	2381      	movs	r3, #129	; 0x81
   10cee:	f01b fc54 	bl	2c59a <printk>
   10cf2:	492f      	ldr	r1, [pc, #188]	; (10db0 <z_impl_clock_gettime+0x100>)
   10cf4:	4832      	ldr	r0, [pc, #200]	; (10dc0 <z_impl_clock_gettime+0x110>)
   10cf6:	f01b fc50 	bl	2c59a <printk>
   10cfa:	482e      	ldr	r0, [pc, #184]	; (10db4 <z_impl_clock_gettime+0x104>)
   10cfc:	2181      	movs	r1, #129	; 0x81
   10cfe:	f01b fe8d 	bl	2ca1c <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
   10d02:	482b      	ldr	r0, [pc, #172]	; (10db0 <z_impl_clock_gettime+0x100>)
   10d04:	f014 f8f0 	bl	24ee8 <z_spin_lock_set_owner>
		base = rt_clock_base;
   10d08:	4b2e      	ldr	r3, [pc, #184]	; (10dc4 <z_impl_clock_gettime+0x114>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10d0a:	4829      	ldr	r0, [pc, #164]	; (10db0 <z_impl_clock_gettime+0x100>)
   10d0c:	689e      	ldr	r6, [r3, #8]
   10d0e:	e9d3 4800 	ldrd	r4, r8, [r3]
   10d12:	f014 f8d9 	bl	24ec8 <z_spin_unlock_valid>
   10d16:	b968      	cbnz	r0, 10d34 <z_impl_clock_gettime+0x84>
   10d18:	4a26      	ldr	r2, [pc, #152]	; (10db4 <z_impl_clock_gettime+0x104>)
   10d1a:	492b      	ldr	r1, [pc, #172]	; (10dc8 <z_impl_clock_gettime+0x118>)
   10d1c:	4827      	ldr	r0, [pc, #156]	; (10dbc <z_impl_clock_gettime+0x10c>)
   10d1e:	23ac      	movs	r3, #172	; 0xac
   10d20:	f01b fc3b 	bl	2c59a <printk>
   10d24:	4922      	ldr	r1, [pc, #136]	; (10db0 <z_impl_clock_gettime+0x100>)
   10d26:	4829      	ldr	r0, [pc, #164]	; (10dcc <z_impl_clock_gettime+0x11c>)
   10d28:	f01b fc37 	bl	2c59a <printk>
   10d2c:	4821      	ldr	r0, [pc, #132]	; (10db4 <z_impl_clock_gettime+0x104>)
   10d2e:	21ac      	movs	r1, #172	; 0xac
   10d30:	f01b fe74 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
   10d34:	f387 8811 	msr	BASEPRI, r7
   10d38:	f3bf 8f6f 	isb	sy
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
   10d3c:	f01f fb8e 	bl	3045c <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   10d40:	4f23      	ldr	r7, [pc, #140]	; (10dd0 <z_impl_clock_gettime+0x120>)
   10d42:	460b      	mov	r3, r1
   10d44:	fba0 0107 	umull	r0, r1, r0, r7
   10d48:	fb07 1103 	mla	r1, r7, r3, r1
   10d4c:	ea4f 39d0 	mov.w	r9, r0, lsr #15
   10d50:	ea49 4941 	orr.w	r9, r9, r1, lsl #17
   10d54:	ea4f 3ad1 	mov.w	sl, r1, lsr #15
	ts->tv_sec = (int32_t) (elapsed_nsecs / NSEC_PER_SEC);
   10d58:	a313      	add	r3, pc, #76	; (adr r3, 10da8 <z_impl_clock_gettime+0xf8>)
   10d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d5e:	4648      	mov	r0, r9
   10d60:	4651      	mov	r1, sl
   10d62:	f7f0 fa6d 	bl	1240 <__aeabi_uldivmod>
	ts->tv_sec += base.tv_sec;
   10d66:	1904      	adds	r4, r0, r4
   10d68:	eb41 0808 	adc.w	r8, r1, r8
   10d6c:	e9c5 4800 	strd	r4, r8, [r5]
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
   10d70:	a30d      	add	r3, pc, #52	; (adr r3, 10da8 <z_impl_clock_gettime+0xf8>)
   10d72:	e9d3 2300 	ldrd	r2, r3, [r3]
   10d76:	4648      	mov	r0, r9
   10d78:	4651      	mov	r1, sl
   10d7a:	f7f0 fa61 	bl	1240 <__aeabi_uldivmod>
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   10d7e:	4b15      	ldr	r3, [pc, #84]	; (10dd4 <z_impl_clock_gettime+0x124>)
	ts->tv_nsec += base.tv_nsec;
   10d80:	4432      	add	r2, r6
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   10d82:	429a      	cmp	r2, r3
	ts->tv_nsec += base.tv_nsec;
   10d84:	60aa      	str	r2, [r5, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
   10d86:	d906      	bls.n	10d96 <z_impl_clock_gettime+0xe6>
		ts->tv_sec++;
   10d88:	3401      	adds	r4, #1
   10d8a:	f148 0100 	adc.w	r1, r8, #0
   10d8e:	e9c5 4100 	strd	r4, r1, [r5]
		ts->tv_nsec -= NSEC_PER_SEC;
   10d92:	1bd2      	subs	r2, r2, r7
   10d94:	60aa      	str	r2, [r5, #8]
	return 0;
   10d96:	2000      	movs	r0, #0
   10d98:	e797      	b.n	10cca <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
   10d9a:	2600      	movs	r6, #0
   10d9c:	4634      	mov	r4, r6
   10d9e:	46b0      	mov	r8, r6
   10da0:	e7cc      	b.n	10d3c <z_impl_clock_gettime+0x8c>
   10da2:	bf00      	nop
   10da4:	f3af 8000 	nop.w
   10da8:	3b9aca00 	.word	0x3b9aca00
   10dac:	00000000 	.word	0x00000000
   10db0:	20002cc8 	.word	0x20002cc8
   10db4:	00032546 	.word	0x00032546
   10db8:	00032598 	.word	0x00032598
   10dbc:	00032486 	.word	0x00032486
   10dc0:	000325ad 	.word	0x000325ad
   10dc4:	20001998 	.word	0x20001998
   10dc8:	0003256c 	.word	0x0003256c
   10dcc:	00032583 	.word	0x00032583
   10dd0:	3b9aca00 	.word	0x3b9aca00
   10dd4:	3b9ac9ff 	.word	0x3b9ac9ff

00010dd8 <clock_settime>:
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
   10dd8:	2801      	cmp	r0, #1
{
   10dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10ddc:	460c      	mov	r4, r1
	if (clock_id != CLOCK_REALTIME) {
   10dde:	d006      	beq.n	10dee <clock_settime+0x16>
		errno = EINVAL;
   10de0:	f01d f9df 	bl	2e1a2 <__errno>
   10de4:	2316      	movs	r3, #22
   10de6:	6003      	str	r3, [r0, #0]
		return -1;
   10de8:	f04f 30ff 	mov.w	r0, #4294967295
	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
}
   10dec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10dee:	f01f fb35 	bl	3045c <z_impl_k_uptime_ticks>
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
   10df2:	4d33      	ldr	r5, [pc, #204]	; (10ec0 <clock_settime+0xe8>)
   10df4:	6822      	ldr	r2, [r4, #0]
   10df6:	460e      	mov	r6, r1
   10df8:	6861      	ldr	r1, [r4, #4]
   10dfa:	fba2 2305 	umull	r2, r3, r2, r5
   10dfe:	fb05 3301 	mla	r3, r5, r1, r3
   10e02:	68a1      	ldr	r1, [r4, #8]
   10e04:	1852      	adds	r2, r2, r1
   10e06:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
   10e0a:	fba0 0105 	umull	r0, r1, r0, r5
   10e0e:	fb05 1106 	mla	r1, r5, r6, r1
   10e12:	0bc4      	lsrs	r4, r0, #15
   10e14:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
		- elapsed_nsecs;
   10e18:	1b14      	subs	r4, r2, r4
   10e1a:	ea4f 35d1 	mov.w	r5, r1, lsr #15
   10e1e:	eb63 0505 	sbc.w	r5, r3, r5
	base.tv_sec = delta / NSEC_PER_SEC;
   10e22:	4620      	mov	r0, r4
   10e24:	a324      	add	r3, pc, #144	; (adr r3, 10eb8 <clock_settime+0xe0>)
   10e26:	e9d3 2300 	ldrd	r2, r3, [r3]
   10e2a:	4629      	mov	r1, r5
   10e2c:	f7f0 f9b8 	bl	11a0 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
   10e30:	a321      	add	r3, pc, #132	; (adr r3, 10eb8 <clock_settime+0xe0>)
   10e32:	e9d3 2300 	ldrd	r2, r3, [r3]
	base.tv_sec = delta / NSEC_PER_SEC;
   10e36:	4607      	mov	r7, r0
   10e38:	460e      	mov	r6, r1
	base.tv_nsec = delta % NSEC_PER_SEC;
   10e3a:	4620      	mov	r0, r4
   10e3c:	4629      	mov	r1, r5
   10e3e:	f7f0 f9af 	bl	11a0 <__aeabi_ldivmod>
   10e42:	4614      	mov	r4, r2
	__asm__ volatile(
   10e44:	f04f 0340 	mov.w	r3, #64	; 0x40
   10e48:	f3ef 8511 	mrs	r5, BASEPRI
   10e4c:	f383 8812 	msr	BASEPRI_MAX, r3
   10e50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10e54:	481b      	ldr	r0, [pc, #108]	; (10ec4 <clock_settime+0xec>)
   10e56:	f014 f829 	bl	24eac <z_spin_lock_valid>
   10e5a:	b968      	cbnz	r0, 10e78 <clock_settime+0xa0>
   10e5c:	4a1a      	ldr	r2, [pc, #104]	; (10ec8 <clock_settime+0xf0>)
   10e5e:	491b      	ldr	r1, [pc, #108]	; (10ecc <clock_settime+0xf4>)
   10e60:	481b      	ldr	r0, [pc, #108]	; (10ed0 <clock_settime+0xf8>)
   10e62:	2381      	movs	r3, #129	; 0x81
   10e64:	f01b fb99 	bl	2c59a <printk>
   10e68:	4916      	ldr	r1, [pc, #88]	; (10ec4 <clock_settime+0xec>)
   10e6a:	481a      	ldr	r0, [pc, #104]	; (10ed4 <clock_settime+0xfc>)
   10e6c:	f01b fb95 	bl	2c59a <printk>
   10e70:	4815      	ldr	r0, [pc, #84]	; (10ec8 <clock_settime+0xf0>)
   10e72:	2181      	movs	r1, #129	; 0x81
   10e74:	f01b fdd2 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   10e78:	4812      	ldr	r0, [pc, #72]	; (10ec4 <clock_settime+0xec>)
   10e7a:	f014 f835 	bl	24ee8 <z_spin_lock_set_owner>
	rt_clock_base = base;
   10e7e:	4b16      	ldr	r3, [pc, #88]	; (10ed8 <clock_settime+0x100>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10e80:	4810      	ldr	r0, [pc, #64]	; (10ec4 <clock_settime+0xec>)
   10e82:	609c      	str	r4, [r3, #8]
   10e84:	e9c3 7600 	strd	r7, r6, [r3]
   10e88:	f014 f81e 	bl	24ec8 <z_spin_unlock_valid>
   10e8c:	b968      	cbnz	r0, 10eaa <clock_settime+0xd2>
   10e8e:	4a0e      	ldr	r2, [pc, #56]	; (10ec8 <clock_settime+0xf0>)
   10e90:	4912      	ldr	r1, [pc, #72]	; (10edc <clock_settime+0x104>)
   10e92:	480f      	ldr	r0, [pc, #60]	; (10ed0 <clock_settime+0xf8>)
   10e94:	23ac      	movs	r3, #172	; 0xac
   10e96:	f01b fb80 	bl	2c59a <printk>
   10e9a:	490a      	ldr	r1, [pc, #40]	; (10ec4 <clock_settime+0xec>)
   10e9c:	4810      	ldr	r0, [pc, #64]	; (10ee0 <clock_settime+0x108>)
   10e9e:	f01b fb7c 	bl	2c59a <printk>
   10ea2:	4809      	ldr	r0, [pc, #36]	; (10ec8 <clock_settime+0xf0>)
   10ea4:	21ac      	movs	r1, #172	; 0xac
   10ea6:	f01b fdb9 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   10eaa:	f385 8811 	msr	BASEPRI, r5
   10eae:	f3bf 8f6f 	isb	sy
	return 0;
   10eb2:	2000      	movs	r0, #0
   10eb4:	e79a      	b.n	10dec <clock_settime+0x14>
   10eb6:	bf00      	nop
   10eb8:	3b9aca00 	.word	0x3b9aca00
   10ebc:	00000000 	.word	0x00000000
   10ec0:	3b9aca00 	.word	0x3b9aca00
   10ec4:	20002cc8 	.word	0x20002cc8
   10ec8:	00032546 	.word	0x00032546
   10ecc:	00032598 	.word	0x00032598
   10ed0:	00032486 	.word	0x00032486
   10ed4:	000325ad 	.word	0x000325ad
   10ed8:	20001998 	.word	0x20001998
   10edc:	0003256c 	.word	0x0003256c
   10ee0:	00032583 	.word	0x00032583

00010ee4 <scan_filter_match>:

//Callback function for a matching name
void scan_filter_match(struct bt_scan_device_info *device_info,
		       struct bt_scan_filter_match *filter_match,
		       bool connectable)
{
   10ee4:	b510      	push	{r4, lr}

	//Get the rssi
	rssiVal=device_info->recv_info->rssi;

	if (active_print == 1){
   10ee6:	490e      	ldr	r1, [pc, #56]	; (10f20 <scan_filter_match+0x3c>)
	rssiVal=device_info->recv_info->rssi;
   10ee8:	6803      	ldr	r3, [r0, #0]
	if (active_print == 1){
   10eea:	6809      	ldr	r1, [r1, #0]
	rssiVal=device_info->recv_info->rssi;
   10eec:	4c0d      	ldr	r4, [pc, #52]	; (10f24 <scan_filter_match+0x40>)
   10eee:	f993 3005 	ldrsb.w	r3, [r3, #5]
   10ef2:	6023      	str	r3, [r4, #0]
	if (active_print == 1){
   10ef4:	2901      	cmp	r1, #1
   10ef6:	d105      	bne.n	10f04 <scan_filter_match+0x20>
		shell_print(main_shell,"rssi: %i",rssiVal);
   10ef8:	480b      	ldr	r0, [pc, #44]	; (10f28 <scan_filter_match+0x44>)
   10efa:	4a0c      	ldr	r2, [pc, #48]	; (10f2c <scan_filter_match+0x48>)
   10efc:	6800      	ldr	r0, [r0, #0]
   10efe:	2108      	movs	r1, #8
   10f00:	f01c fb3c 	bl	2d57c <shell_fprintf>
	}

	if (rssi_number == 20){
   10f04:	4b0a      	ldr	r3, [pc, #40]	; (10f30 <scan_filter_match+0x4c>)
		rssi_number = 0;
	}
	average_rssi[rssi_number] = rssiVal;
   10f06:	490b      	ldr	r1, [pc, #44]	; (10f34 <scan_filter_match+0x50>)
	if (rssi_number == 20){
   10f08:	681a      	ldr	r2, [r3, #0]
	average_rssi[rssi_number] = rssiVal;
   10f0a:	6820      	ldr	r0, [r4, #0]
	if (rssi_number == 20){
   10f0c:	2a14      	cmp	r2, #20
		rssi_number = 0;
   10f0e:	bf04      	itt	eq
   10f10:	2200      	moveq	r2, #0
   10f12:	601a      	streq	r2, [r3, #0]
	average_rssi[rssi_number] = rssiVal;
   10f14:	681a      	ldr	r2, [r3, #0]
   10f16:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	rssi_number++;
   10f1a:	3201      	adds	r2, #1
   10f1c:	601a      	str	r2, [r3, #0]
}
   10f1e:	bd10      	pop	{r4, pc}
   10f20:	200022e8 	.word	0x200022e8
   10f24:	20002340 	.word	0x20002340
   10f28:	2000233c 	.word	0x2000233c
   10f2c:	000320c7 	.word	0x000320c7
   10f30:	20002344 	.word	0x20002344
   10f34:	200022ec 	.word	0x200022ec

00010f38 <cmd_print_stop>:
	return 0;
}

static int cmd_print_stop(const struct shell *shell, size_t argc,
				    char **argv, void *data)
{
   10f38:	b510      	push	{r4, lr}
	active_print =0;
   10f3a:	4b04      	ldr	r3, [pc, #16]	; (10f4c <cmd_print_stop+0x14>)
	shell_print(shell,"Active rssi print off");
   10f3c:	4a04      	ldr	r2, [pc, #16]	; (10f50 <cmd_print_stop+0x18>)
	active_print =0;
   10f3e:	2400      	movs	r4, #0
	shell_print(shell,"Active rssi print off");
   10f40:	2108      	movs	r1, #8
	active_print =0;
   10f42:	601c      	str	r4, [r3, #0]
	shell_print(shell,"Active rssi print off");
   10f44:	f01c fb1a 	bl	2d57c <shell_fprintf>
	return 0;
}
   10f48:	4620      	mov	r0, r4
   10f4a:	bd10      	pop	{r4, pc}
   10f4c:	200022e8 	.word	0x200022e8
   10f50:	0003207c 	.word	0x0003207c

00010f54 <cmd_print_start>:
{
   10f54:	b508      	push	{r3, lr}
	active_print = 1;
   10f56:	4b05      	ldr	r3, [pc, #20]	; (10f6c <cmd_print_start+0x18>)
   10f58:	2201      	movs	r2, #1
   10f5a:	601a      	str	r2, [r3, #0]
	main_shell = shell;
   10f5c:	4b04      	ldr	r3, [pc, #16]	; (10f70 <cmd_print_start+0x1c>)
	shell_print(shell,"Active rssi print on");
   10f5e:	4a05      	ldr	r2, [pc, #20]	; (10f74 <cmd_print_start+0x20>)
	main_shell = shell;
   10f60:	6018      	str	r0, [r3, #0]
	shell_print(shell,"Active rssi print on");
   10f62:	2108      	movs	r1, #8
   10f64:	f01c fb0a 	bl	2d57c <shell_fprintf>
}
   10f68:	2000      	movs	r0, #0
   10f6a:	bd08      	pop	{r3, pc}
   10f6c:	200022e8 	.word	0x200022e8
   10f70:	2000233c 	.word	0x2000233c
   10f74:	00032093 	.word	0x00032093

00010f78 <cmd_average_rssi>:
	return 0;
}

static int cmd_average_rssi(const struct shell *shell, size_t argc,
				    char **argv)
{
   10f78:	b510      	push	{r4, lr}
	int tot = 0;
	int values = 20; 
	for (int i =0; i<20 ;i++)
   10f7a:	2300      	movs	r3, #0
   10f7c:	4c08      	ldr	r4, [pc, #32]	; (10fa0 <cmd_average_rssi+0x28>)
	int tot = 0;
   10f7e:	461a      	mov	r2, r3
	{
		if (average_rssi[i] == 0){
   10f80:	f854 1b04 	ldr.w	r1, [r4], #4
   10f84:	3301      	adds	r3, #1
   10f86:	b111      	cbz	r1, 10f8e <cmd_average_rssi+0x16>
	for (int i =0; i<20 ;i++)
   10f88:	2b14      	cmp	r3, #20
			values = i+1;
			break;
		}
		tot += average_rssi[i];
   10f8a:	440a      	add	r2, r1
	for (int i =0; i<20 ;i++)
   10f8c:	d1f8      	bne.n	10f80 <cmd_average_rssi+0x8>
	}
	tot = tot/values;
	
	shell_print(shell,"average rssi value %i",tot);
   10f8e:	fb92 f3f3 	sdiv	r3, r2, r3
   10f92:	2108      	movs	r1, #8
   10f94:	4a03      	ldr	r2, [pc, #12]	; (10fa4 <cmd_average_rssi+0x2c>)
   10f96:	f01c faf1 	bl	2d57c <shell_fprintf>
	return 0;
}
   10f9a:	2000      	movs	r0, #0
   10f9c:	bd10      	pop	{r4, pc}
   10f9e:	bf00      	nop
   10fa0:	200022ec 	.word	0x200022ec
   10fa4:	000320a9 	.word	0x000320a9

00010fa8 <cmd_rssi_signal>:
{
   10fa8:	b508      	push	{r3, lr}
	shell_print(shell,"Latest rssi: %i",rssiVal);
   10faa:	4b04      	ldr	r3, [pc, #16]	; (10fbc <cmd_rssi_signal+0x14>)
   10fac:	4a04      	ldr	r2, [pc, #16]	; (10fc0 <cmd_rssi_signal+0x18>)
   10fae:	681b      	ldr	r3, [r3, #0]
   10fb0:	2108      	movs	r1, #8
   10fb2:	f01c fae3 	bl	2d57c <shell_fprintf>
}
   10fb6:	2000      	movs	r0, #0
   10fb8:	bd08      	pop	{r3, pc}
   10fba:	bf00      	nop
   10fbc:	20002340 	.word	0x20002340
   10fc0:	000320c0 	.word	0x000320c0

00010fc4 <scan_connecting_error>:
	printk("Connection to peer failed!\n");
   10fc4:	4801      	ldr	r0, [pc, #4]	; (10fcc <scan_connecting_error+0x8>)
   10fc6:	f01b bae8 	b.w	2c59a <printk>
   10fca:	bf00      	nop
   10fcc:	000320d1 	.word	0x000320d1

00010fd0 <ble_ready>:
	printk("Bluetooth ready\n");
   10fd0:	4801      	ldr	r0, [pc, #4]	; (10fd8 <ble_ready+0x8>)
   10fd2:	f01b bae2 	b.w	2c59a <printk>
   10fd6:	bf00      	nop
   10fd8:	000320ed 	.word	0x000320ed

00010fdc <cmd_change_name>:
	return 0;
}

static int cmd_change_name(const struct shell *shell, size_t argc,
				    char **argv)
{
   10fdc:	b538      	push	{r3, r4, r5, lr}
   10fde:	4615      	mov	r5, r2
   10fe0:	4604      	mov	r4, r0
	bt_scan_filter_remove_all();
   10fe2:	f005 fc91 	bl	16908 <bt_scan_filter_remove_all>
	int err;

	// Add the target name to the filter
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, argv[1]);
   10fe6:	6869      	ldr	r1, [r5, #4]
   10fe8:	2000      	movs	r0, #0
   10fea:	f005 fc3f 	bl	1686c <bt_scan_filter_add>
	if (err) {
   10fee:	b120      	cbz	r0, 10ffa <cmd_change_name+0x1e>
		shell_print(shell,"Scanning filters cannot be set\n");
   10ff0:	4a06      	ldr	r2, [pc, #24]	; (1100c <cmd_change_name+0x30>)
   10ff2:	2108      	movs	r1, #8
   10ff4:	4620      	mov	r0, r4
   10ff6:	f01c fac1 	bl	2d57c <shell_fprintf>
	}

	shell_print(shell,"The name was set to: %s",argv[1]);
   10ffa:	4620      	mov	r0, r4
   10ffc:	686b      	ldr	r3, [r5, #4]
   10ffe:	4a04      	ldr	r2, [pc, #16]	; (11010 <cmd_change_name+0x34>)
   11000:	2108      	movs	r1, #8
   11002:	f01c fabb 	bl	2d57c <shell_fprintf>

	return 0;
}
   11006:	2000      	movs	r0, #0
   11008:	bd38      	pop	{r3, r4, r5, pc}
   1100a:	bf00      	nop
   1100c:	000320fe 	.word	0x000320fe
   11010:	0003211f 	.word	0x0003211f

00011014 <cmd_stop_scan>:
{
   11014:	b508      	push	{r3, lr}
	err = bt_scan_stop();
   11016:	f01c feda 	bl	2ddce <bt_scan_stop>
	if (err == -EALREADY) {
   1101a:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_scan_stop();
   1101e:	4601      	mov	r1, r0
	if (err == -EALREADY) {
   11020:	d107      	bne.n	11032 <cmd_stop_scan+0x1e>
		printk("Scanning is not on \n");
   11022:	4807      	ldr	r0, [pc, #28]	; (11040 <cmd_stop_scan+0x2c>)
   11024:	f01b fab9 	bl	2c59a <printk>
	printk("Scanning has stopped \n");
   11028:	4806      	ldr	r0, [pc, #24]	; (11044 <cmd_stop_scan+0x30>)
   1102a:	f01b fab6 	bl	2c59a <printk>
}
   1102e:	2000      	movs	r0, #0
   11030:	bd08      	pop	{r3, pc}
	else if (err){
   11032:	2800      	cmp	r0, #0
   11034:	d0f8      	beq.n	11028 <cmd_stop_scan+0x14>
		printk("Scanning failed to stop, err %d\n", err);
   11036:	4804      	ldr	r0, [pc, #16]	; (11048 <cmd_stop_scan+0x34>)
   11038:	f01b faaf 	bl	2c59a <printk>
   1103c:	e7f4      	b.n	11028 <cmd_stop_scan+0x14>
   1103e:	bf00      	nop
   11040:	00032138 	.word	0x00032138
   11044:	0003216e 	.word	0x0003216e
   11048:	0003214d 	.word	0x0003214d

0001104c <cmd_active_start>:
{
   1104c:	b510      	push	{r4, lr}
   1104e:	4604      	mov	r4, r0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   11050:	2001      	movs	r0, #1
   11052:	f005 fd9f 	bl	16b94 <bt_scan_start>
			if (err == -EALREADY)
   11056:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   1105a:	4603      	mov	r3, r0
			if (err == -EALREADY)
   1105c:	d10b      	bne.n	11076 <cmd_active_start+0x2a>
				shell_print(shell,"Scanning already enable \n");
   1105e:	4a0a      	ldr	r2, [pc, #40]	; (11088 <cmd_active_start+0x3c>)
   11060:	2108      	movs	r1, #8
   11062:	4620      	mov	r0, r4
   11064:	f01c fa8a 	bl	2d57c <shell_fprintf>
	shell_print(shell,"Active scanning on");
   11068:	4620      	mov	r0, r4
   1106a:	4a08      	ldr	r2, [pc, #32]	; (1108c <cmd_active_start+0x40>)
   1106c:	2108      	movs	r1, #8
   1106e:	f01c fa85 	bl	2d57c <shell_fprintf>
}
   11072:	2000      	movs	r0, #0
   11074:	bd10      	pop	{r4, pc}
			else if (err) {
   11076:	2800      	cmp	r0, #0
   11078:	d0f6      	beq.n	11068 <cmd_active_start+0x1c>
				shell_print(shell,"Scanning failed to start, err %d\n", err);
   1107a:	4a05      	ldr	r2, [pc, #20]	; (11090 <cmd_active_start+0x44>)
   1107c:	2108      	movs	r1, #8
   1107e:	4620      	mov	r0, r4
   11080:	f01c fa7c 	bl	2d57c <shell_fprintf>
   11084:	e7f0      	b.n	11068 <cmd_active_start+0x1c>
   11086:	bf00      	nop
   11088:	00032185 	.word	0x00032185
   1108c:	000321c3 	.word	0x000321c3
   11090:	000321a0 	.word	0x000321a0

00011094 <cmd_passive_start>:
{
   11094:	b510      	push	{r4, lr}
   11096:	4604      	mov	r4, r0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_PASSIVE);
   11098:	2000      	movs	r0, #0
   1109a:	f005 fd7b 	bl	16b94 <bt_scan_start>
			if (err == -EALREADY)
   1109e:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_PASSIVE);
   110a2:	4603      	mov	r3, r0
			if (err == -EALREADY)
   110a4:	d10b      	bne.n	110be <cmd_passive_start+0x2a>
				shell_print(shell,"Scanning already enable \n");
   110a6:	4a0a      	ldr	r2, [pc, #40]	; (110d0 <cmd_passive_start+0x3c>)
   110a8:	2108      	movs	r1, #8
   110aa:	4620      	mov	r0, r4
   110ac:	f01c fa66 	bl	2d57c <shell_fprintf>
	shell_print(shell,"Passive scanning on");
   110b0:	4620      	mov	r0, r4
   110b2:	4a08      	ldr	r2, [pc, #32]	; (110d4 <cmd_passive_start+0x40>)
   110b4:	2108      	movs	r1, #8
   110b6:	f01c fa61 	bl	2d57c <shell_fprintf>
}
   110ba:	2000      	movs	r0, #0
   110bc:	bd10      	pop	{r4, pc}
			else if (err) {
   110be:	2800      	cmp	r0, #0
   110c0:	d0f6      	beq.n	110b0 <cmd_passive_start+0x1c>
				shell_print(shell,"Scanning failed to start, err %d\n", err);
   110c2:	4a05      	ldr	r2, [pc, #20]	; (110d8 <cmd_passive_start+0x44>)
   110c4:	2108      	movs	r1, #8
   110c6:	4620      	mov	r0, r4
   110c8:	f01c fa58 	bl	2d57c <shell_fprintf>
   110cc:	e7f0      	b.n	110b0 <cmd_passive_start+0x1c>
   110ce:	bf00      	nop
   110d0:	00032185 	.word	0x00032185
   110d4:	000321d7 	.word	0x000321d7
   110d8:	000321a0 	.word	0x000321a0

000110dc <cmd_enable_scan>:
{
   110dc:	b570      	push	{r4, r5, r6, lr}
   110de:	b08a      	sub	sp, #40	; 0x28
	struct bt_le_scan_param scan_param = {
   110e0:	ab05      	add	r3, sp, #20
   110e2:	2214      	movs	r2, #20
   110e4:	2100      	movs	r1, #0
{
   110e6:	4604      	mov	r4, r0
	struct bt_le_scan_param scan_param = {
   110e8:	4618      	mov	r0, r3
   110ea:	f01f fa9e 	bl	3062a <memset>
   110ee:	2501      	movs	r5, #1
   110f0:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
   110f4:	e9cd 5206 	strd	r5, r2, [sp, #24]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
   110f8:	4a14      	ldr	r2, [pc, #80]	; (1114c <cmd_enable_scan+0x70>)
	struct bt_scan_init_param scan_init = {
   110fa:	9002      	str	r0, [sp, #8]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
   110fc:	6851      	ldr	r1, [r2, #4]
   110fe:	6810      	ldr	r0, [r2, #0]
	struct bt_scan_init_param scan_init = {
   11100:	f8cd d010 	str.w	sp, [sp, #16]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
   11104:	466b      	mov	r3, sp
   11106:	c303      	stmia	r3!, {r0, r1}
	struct bt_scan_init_param scan_init = {
   11108:	2600      	movs	r6, #0
	bt_scan_init(&scan_init);
   1110a:	4618      	mov	r0, r3
	struct bt_scan_init_param scan_init = {
   1110c:	f88d 600c 	strb.w	r6, [sp, #12]
	bt_scan_init(&scan_init);
   11110:	f005 fd06 	bl	16b20 <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
   11114:	480e      	ldr	r0, [pc, #56]	; (11150 <cmd_enable_scan+0x74>)
   11116:	f005 fb99 	bl	1684c <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, target);
   1111a:	4b0e      	ldr	r3, [pc, #56]	; (11154 <cmd_enable_scan+0x78>)
   1111c:	4630      	mov	r0, r6
   1111e:	6819      	ldr	r1, [r3, #0]
   11120:	f005 fba4 	bl	1686c <bt_scan_filter_add>
	if (err) {
   11124:	4601      	mov	r1, r0
   11126:	b150      	cbz	r0, 1113e <cmd_enable_scan+0x62>
		printk("Scanning filters cannot be set\n");
   11128:	480b      	ldr	r0, [pc, #44]	; (11158 <cmd_enable_scan+0x7c>)
		printk("Filters cannot be turned on\n");
   1112a:	f01b fa36 	bl	2c59a <printk>
	shell_print(shell,"Scanning module enable \n");
   1112e:	4620      	mov	r0, r4
   11130:	4a0a      	ldr	r2, [pc, #40]	; (1115c <cmd_enable_scan+0x80>)
   11132:	2108      	movs	r1, #8
   11134:	f01c fa22 	bl	2d57c <shell_fprintf>
}
   11138:	2000      	movs	r0, #0
   1113a:	b00a      	add	sp, #40	; 0x28
   1113c:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_scan_filter_enable(BT_SCAN_NAME_FILTER, false);
   1113e:	4628      	mov	r0, r5
   11140:	f005 fc14 	bl	1696c <bt_scan_filter_enable>
	if (err) {
   11144:	2800      	cmp	r0, #0
   11146:	d0f2      	beq.n	1112e <cmd_enable_scan+0x52>
		printk("Filters cannot be turned on\n");
   11148:	4805      	ldr	r0, [pc, #20]	; (11160 <cmd_enable_scan+0x84>)
   1114a:	e7ee      	b.n	1112a <cmd_enable_scan+0x4e>
   1114c:	00030ddc 	.word	0x00030ddc
   11150:	20000418 	.word	0x20000418
   11154:	20000420 	.word	0x20000420
   11158:	000321ec 	.word	0x000321ec
   1115c:	00032229 	.word	0x00032229
   11160:	0003220c 	.word	0x0003220c

00011164 <main>:

SHELL_CMD_REGISTER(bt_scan, &bt_scan, "Enable options for passive and active scanning", NULL);

//Main
void main(void)
{
   11164:	b508      	push	{r3, lr}
	int err;

	//Initializing Bluetooth
	err = bt_enable(ble_ready);
   11166:	4806      	ldr	r0, [pc, #24]	; (11180 <main+0x1c>)
   11168:	f008 fc76 	bl	19a58 <bt_enable>
		if (err) {
   1116c:	b110      	cbz	r0, 11174 <main+0x10>
			printk("Cold not enable Bluetooth\n");
   1116e:	4805      	ldr	r0, [pc, #20]	; (11184 <main+0x20>)
   11170:	f01b fa13 	bl	2c59a <printk>
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
		k_sleep(K_MSEC(100));
	}
	#endif

}
   11174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Bluetooth initialized\n");
   11178:	4803      	ldr	r0, [pc, #12]	; (11188 <main+0x24>)
   1117a:	f01b ba0e 	b.w	2c59a <printk>
   1117e:	bf00      	nop
   11180:	00010fd1 	.word	0x00010fd1
   11184:	00032243 	.word	0x00032243
   11188:	0003225e 	.word	0x0003225e

0001118c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1118c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   1118e:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   11192:	2b02      	cmp	r3, #2
{
   11194:	b570      	push	{r4, r5, r6, lr}
   11196:	4604      	mov	r4, r0
   11198:	460e      	mov	r6, r1
	notify->result = res;
   1119a:	6081      	str	r1, [r0, #8]
	switch (method) {
   1119c:	d010      	beq.n	111c0 <sys_notify_finalize+0x34>
   1119e:	2b03      	cmp	r3, #3
   111a0:	d004      	beq.n	111ac <sys_notify_finalize+0x20>
   111a2:	2b01      	cmp	r3, #1
   111a4:	d10f      	bne.n	111c6 <sys_notify_finalize+0x3a>
   111a6:	2500      	movs	r5, #0
   111a8:	4628      	mov	r0, r5
   111aa:	e001      	b.n	111b0 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   111ac:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   111ae:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   111b0:	2300      	movs	r3, #0
   111b2:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   111b4:	b110      	cbz	r0, 111bc <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   111b6:	4631      	mov	r1, r6
   111b8:	f017 ff56 	bl	29068 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   111bc:	4628      	mov	r0, r5
   111be:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   111c0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   111c2:	2500      	movs	r5, #0
		break;
   111c4:	e7f4      	b.n	111b0 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   111c6:	4a06      	ldr	r2, [pc, #24]	; (111e0 <sys_notify_finalize+0x54>)
   111c8:	4906      	ldr	r1, [pc, #24]	; (111e4 <sys_notify_finalize+0x58>)
   111ca:	4807      	ldr	r0, [pc, #28]	; (111e8 <sys_notify_finalize+0x5c>)
   111cc:	2345      	movs	r3, #69	; 0x45
   111ce:	f01b f9e4 	bl	2c59a <printk>
   111d2:	4803      	ldr	r0, [pc, #12]	; (111e0 <sys_notify_finalize+0x54>)
   111d4:	2145      	movs	r1, #69	; 0x45
   111d6:	f01b fc21 	bl	2ca1c <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   111da:	2500      	movs	r5, #0
   111dc:	e7e7      	b.n	111ae <sys_notify_finalize+0x22>
   111de:	bf00      	nop
   111e0:	00032463 	.word	0x00032463
   111e4:	000380f0 	.word	0x000380f0
   111e8:	00032486 	.word	0x00032486

000111ec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   111ec:	680b      	ldr	r3, [r1, #0]
   111ee:	3301      	adds	r3, #1
   111f0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   111f2:	4b01      	ldr	r3, [pc, #4]	; (111f8 <char_out+0xc>)
   111f4:	681b      	ldr	r3, [r3, #0]
   111f6:	4718      	bx	r3
   111f8:	20000424 	.word	0x20000424

000111fc <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   111fc:	b507      	push	{r0, r1, r2, lr}
   111fe:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   11200:	2100      	movs	r1, #0
{
   11202:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   11204:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   11206:	4803      	ldr	r0, [pc, #12]	; (11214 <vprintk+0x18>)
   11208:	a901      	add	r1, sp, #4
   1120a:	f000 fd2b 	bl	11c64 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1120e:	b003      	add	sp, #12
   11210:	f85d fb04 	ldr.w	pc, [sp], #4
   11214:	000111ed 	.word	0x000111ed

00011218 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   11218:	b530      	push	{r4, r5, lr}
   1121a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   1121c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   11220:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   11222:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   11224:	a901      	add	r1, sp, #4
   11226:	4805      	ldr	r0, [pc, #20]	; (1123c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   11228:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   1122a:	f000 fd1b 	bl	11c64 <cbvprintf>

	if (ctx.count < ctx.max) {
   1122e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   11232:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   11234:	bfb8      	it	lt
   11236:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   11238:	b005      	add	sp, #20
   1123a:	bd30      	pop	{r4, r5, pc}
   1123c:	0002c575 	.word	0x0002c575

00011240 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   11240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   11244:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   11248:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   1124a:	f019 0f08 	tst.w	r9, #8
{
   1124e:	4604      	mov	r4, r0
   11250:	9203      	str	r2, [sp, #12]
	if (processing) {
   11252:	d022      	beq.n	1129a <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
   11254:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   11256:	bf0c      	ite	eq
   11258:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   1125c:	f049 0920 	orrne.w	r9, r9, #32
   11260:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   11264:	3414      	adds	r4, #20
   11266:	4620      	mov	r0, r4
   11268:	f013 fe2e 	bl	24ec8 <z_spin_unlock_valid>
   1126c:	b968      	cbnz	r0, 1128a <process_event+0x4a>
   1126e:	4a9f      	ldr	r2, [pc, #636]	; (114ec <process_event+0x2ac>)
   11270:	499f      	ldr	r1, [pc, #636]	; (114f0 <process_event+0x2b0>)
   11272:	48a0      	ldr	r0, [pc, #640]	; (114f4 <process_event+0x2b4>)
   11274:	23ac      	movs	r3, #172	; 0xac
   11276:	f01b f990 	bl	2c59a <printk>
   1127a:	489f      	ldr	r0, [pc, #636]	; (114f8 <process_event+0x2b8>)
   1127c:	4621      	mov	r1, r4
   1127e:	f01b f98c 	bl	2c59a <printk>
   11282:	489a      	ldr	r0, [pc, #616]	; (114ec <process_event+0x2ac>)
   11284:	21ac      	movs	r1, #172	; 0xac
   11286:	f01b fbc9 	bl	2ca1c <assert_post_action>
   1128a:	9b03      	ldr	r3, [sp, #12]
   1128c:	f383 8811 	msr	BASEPRI, r3
   11290:	f3bf 8f6f 	isb	sy
}
   11294:	b005      	add	sp, #20
   11296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   1129a:	4f98      	ldr	r7, [pc, #608]	; (114fc <process_event+0x2bc>)
   1129c:	f8df 8254 	ldr.w	r8, [pc, #596]	; 114f4 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   112a0:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   112a4:	2902      	cmp	r1, #2
   112a6:	d106      	bne.n	112b6 <process_event+0x76>
			evt = process_recheck(mgr);
   112a8:	4620      	mov	r0, r4
   112aa:	f01b f990 	bl	2c5ce <process_recheck>
		if (evt == EVT_NOP) {
   112ae:	2800      	cmp	r0, #0
   112b0:	d0d8      	beq.n	11264 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
   112b2:	2801      	cmp	r0, #1
   112b4:	d168      	bne.n	11388 <process_event+0x148>
			res = mgr->last_res;
   112b6:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   112ba:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   112bc:	f1bb 0f00 	cmp.w	fp, #0
   112c0:	da0a      	bge.n	112d8 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   112c2:	2600      	movs	r6, #0
		*clients = mgr->clients;
   112c4:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   112c6:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   112ca:	e9c4 6600 	strd	r6, r6, [r4]
   112ce:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   112d2:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   112d4:	9601      	str	r6, [sp, #4]
   112d6:	e027      	b.n	11328 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   112d8:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   112dc:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   112de:	2901      	cmp	r1, #1
   112e0:	d834      	bhi.n	1134c <process_event+0x10c>
	list->head = NULL;
   112e2:	2100      	movs	r1, #0
   112e4:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   112e8:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   112ea:	6825      	ldr	r5, [r4, #0]
   112ec:	b29b      	uxth	r3, r3
	list->tail = NULL;
   112ee:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   112f2:	d10c      	bne.n	1130e <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   112f4:	428d      	cmp	r5, r1
   112f6:	462a      	mov	r2, r5
   112f8:	bf38      	it	cc
   112fa:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   112fc:	b12a      	cbz	r2, 1130a <process_event+0xca>
				mgr->refs += 1U;
   112fe:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   11300:	6812      	ldr	r2, [r2, #0]
   11302:	3101      	adds	r1, #1
   11304:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   11306:	2a00      	cmp	r2, #0
   11308:	d1f8      	bne.n	112fc <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1130a:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1130e:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11310:	4620      	mov	r0, r4
   11312:	f01b f95c 	bl	2c5ce <process_recheck>
   11316:	4606      	mov	r6, r0
   11318:	2800      	cmp	r0, #0
   1131a:	d0db      	beq.n	112d4 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1131c:	8ba3      	ldrh	r3, [r4, #28]
   1131e:	f043 0320 	orr.w	r3, r3, #32
   11322:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   11324:	2300      	movs	r3, #0
   11326:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11328:	8ba3      	ldrh	r3, [r4, #28]
   1132a:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1132e:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   11330:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
   11332:	d003      	beq.n	1133c <process_event+0xfc>
		if (do_monitors
   11334:	68a2      	ldr	r2, [r4, #8]
   11336:	2a00      	cmp	r2, #0
   11338:	f040 80f0 	bne.w	1151c <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
   1133c:	b91d      	cbnz	r5, 11346 <process_event+0x106>
		    || (transit != NULL)) {
   1133e:	9a01      	ldr	r2, [sp, #4]
   11340:	2a00      	cmp	r2, #0
   11342:	f000 8136 	beq.w	115b2 <process_event+0x372>
   11346:	f04f 0900 	mov.w	r9, #0
   1134a:	e0e9      	b.n	11520 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
   1134c:	2a04      	cmp	r2, #4
   1134e:	d10e      	bne.n	1136e <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11350:	f023 0307 	bic.w	r3, r3, #7
   11354:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   11356:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   11358:	4620      	mov	r0, r4
   1135a:	f01b f938 	bl	2c5ce <process_recheck>
   1135e:	4605      	mov	r5, r0
   11360:	b118      	cbz	r0, 1136a <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   11362:	f042 0220 	orr.w	r2, r2, #32
   11366:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   11368:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   1136a:	9501      	str	r5, [sp, #4]
   1136c:	e7dc      	b.n	11328 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
   1136e:	4640      	mov	r0, r8
   11370:	4963      	ldr	r1, [pc, #396]	; (11500 <process_event+0x2c0>)
   11372:	f240 131b 	movw	r3, #283	; 0x11b
   11376:	463a      	mov	r2, r7
   11378:	f01b f90f 	bl	2c59a <printk>
   1137c:	f240 111b 	movw	r1, #283	; 0x11b
   11380:	4638      	mov	r0, r7
   11382:	f01b fb4b 	bl	2ca1c <assert_post_action>
   11386:	e7ef      	b.n	11368 <process_event+0x128>
		} else if (evt == EVT_START) {
   11388:	2803      	cmp	r0, #3
   1138a:	d135      	bne.n	113f8 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   1138c:	f1b9 0f00 	cmp.w	r9, #0
   11390:	d00b      	beq.n	113aa <process_event+0x16a>
   11392:	495c      	ldr	r1, [pc, #368]	; (11504 <process_event+0x2c4>)
   11394:	4640      	mov	r0, r8
   11396:	f44f 73ab 	mov.w	r3, #342	; 0x156
   1139a:	463a      	mov	r2, r7
   1139c:	f01b f8fd 	bl	2c59a <printk>
   113a0:	f44f 71ab 	mov.w	r1, #342	; 0x156
   113a4:	4638      	mov	r0, r7
   113a6:	f01b fb39 	bl	2ca1c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   113aa:	6823      	ldr	r3, [r4, #0]
   113ac:	b95b      	cbnz	r3, 113c6 <process_event+0x186>
   113ae:	4956      	ldr	r1, [pc, #344]	; (11508 <process_event+0x2c8>)
   113b0:	4640      	mov	r0, r8
   113b2:	f240 1357 	movw	r3, #343	; 0x157
   113b6:	463a      	mov	r2, r7
   113b8:	f01b f8ef 	bl	2c59a <printk>
   113bc:	f240 1157 	movw	r1, #343	; 0x157
   113c0:	4638      	mov	r0, r7
   113c2:	f01b fb2b 	bl	2ca1c <assert_post_action>
			transit = mgr->transitions->start;
   113c6:	6923      	ldr	r3, [r4, #16]
   113c8:	681b      	ldr	r3, [r3, #0]
   113ca:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   113cc:	b95b      	cbnz	r3, 113e6 <process_event+0x1a6>
   113ce:	494f      	ldr	r1, [pc, #316]	; (1150c <process_event+0x2cc>)
   113d0:	4640      	mov	r0, r8
   113d2:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   113d6:	463a      	mov	r2, r7
   113d8:	f01b f8df 	bl	2c59a <printk>
   113dc:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   113e0:	4638      	mov	r0, r7
   113e2:	f01b fb1b 	bl	2ca1c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   113e6:	8ba3      	ldrh	r3, [r4, #28]
   113e8:	f023 0307 	bic.w	r3, r3, #7
   113ec:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   113f0:	83a3      	strh	r3, [r4, #28]
}
   113f2:	2500      	movs	r5, #0
		res = 0;
   113f4:	46ab      	mov	fp, r5
}
   113f6:	e797      	b.n	11328 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
   113f8:	2804      	cmp	r0, #4
   113fa:	d132      	bne.n	11462 <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   113fc:	f1b9 0f02 	cmp.w	r9, #2
   11400:	d00b      	beq.n	1141a <process_event+0x1da>
   11402:	4943      	ldr	r1, [pc, #268]	; (11510 <process_event+0x2d0>)
   11404:	4640      	mov	r0, r8
   11406:	f240 135d 	movw	r3, #349	; 0x15d
   1140a:	463a      	mov	r2, r7
   1140c:	f01b f8c5 	bl	2c59a <printk>
   11410:	f240 115d 	movw	r1, #349	; 0x15d
   11414:	4638      	mov	r0, r7
   11416:	f01b fb01 	bl	2ca1c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   1141a:	8be3      	ldrh	r3, [r4, #30]
   1141c:	b15b      	cbz	r3, 11436 <process_event+0x1f6>
   1141e:	493d      	ldr	r1, [pc, #244]	; (11514 <process_event+0x2d4>)
   11420:	4640      	mov	r0, r8
   11422:	f44f 73af 	mov.w	r3, #350	; 0x15e
   11426:	463a      	mov	r2, r7
   11428:	f01b f8b7 	bl	2c59a <printk>
   1142c:	f44f 71af 	mov.w	r1, #350	; 0x15e
   11430:	4638      	mov	r0, r7
   11432:	f01b faf3 	bl	2ca1c <assert_post_action>
			transit = mgr->transitions->stop;
   11436:	6923      	ldr	r3, [r4, #16]
   11438:	685b      	ldr	r3, [r3, #4]
   1143a:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   1143c:	b95b      	cbnz	r3, 11456 <process_event+0x216>
   1143e:	4933      	ldr	r1, [pc, #204]	; (1150c <process_event+0x2cc>)
   11440:	4640      	mov	r0, r8
   11442:	f240 1361 	movw	r3, #353	; 0x161
   11446:	463a      	mov	r2, r7
   11448:	f01b f8a7 	bl	2c59a <printk>
   1144c:	f240 1161 	movw	r1, #353	; 0x161
   11450:	4638      	mov	r0, r7
   11452:	f01b fae3 	bl	2ca1c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   11456:	8ba3      	ldrh	r3, [r4, #28]
   11458:	f023 0307 	bic.w	r3, r3, #7
   1145c:	f043 0304 	orr.w	r3, r3, #4
   11460:	e7c6      	b.n	113f0 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
   11462:	2805      	cmp	r0, #5
   11464:	d132      	bne.n	114cc <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11466:	f1b9 0f01 	cmp.w	r9, #1
   1146a:	d00b      	beq.n	11484 <process_event+0x244>
   1146c:	492a      	ldr	r1, [pc, #168]	; (11518 <process_event+0x2d8>)
   1146e:	4640      	mov	r0, r8
   11470:	f44f 73b2 	mov.w	r3, #356	; 0x164
   11474:	463a      	mov	r2, r7
   11476:	f01b f890 	bl	2c59a <printk>
   1147a:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1147e:	4638      	mov	r0, r7
   11480:	f01b facc 	bl	2ca1c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   11484:	6823      	ldr	r3, [r4, #0]
   11486:	b95b      	cbnz	r3, 114a0 <process_event+0x260>
   11488:	491f      	ldr	r1, [pc, #124]	; (11508 <process_event+0x2c8>)
   1148a:	4640      	mov	r0, r8
   1148c:	f240 1365 	movw	r3, #357	; 0x165
   11490:	463a      	mov	r2, r7
   11492:	f01b f882 	bl	2c59a <printk>
   11496:	f240 1165 	movw	r1, #357	; 0x165
   1149a:	4638      	mov	r0, r7
   1149c:	f01b fabe 	bl	2ca1c <assert_post_action>
			transit = mgr->transitions->reset;
   114a0:	6923      	ldr	r3, [r4, #16]
   114a2:	689b      	ldr	r3, [r3, #8]
   114a4:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   114a6:	b95b      	cbnz	r3, 114c0 <process_event+0x280>
   114a8:	4918      	ldr	r1, [pc, #96]	; (1150c <process_event+0x2cc>)
   114aa:	4640      	mov	r0, r8
   114ac:	f44f 73b4 	mov.w	r3, #360	; 0x168
   114b0:	463a      	mov	r2, r7
   114b2:	f01b f872 	bl	2c59a <printk>
   114b6:	f44f 71b4 	mov.w	r1, #360	; 0x168
   114ba:	4638      	mov	r0, r7
   114bc:	f01b faae 	bl	2ca1c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   114c0:	8ba3      	ldrh	r3, [r4, #28]
   114c2:	f023 0307 	bic.w	r3, r3, #7
   114c6:	f043 0305 	orr.w	r3, r3, #5
   114ca:	e791      	b.n	113f0 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   114cc:	490c      	ldr	r1, [pc, #48]	; (11500 <process_event+0x2c0>)
   114ce:	f240 136b 	movw	r3, #363	; 0x16b
   114d2:	463a      	mov	r2, r7
   114d4:	4640      	mov	r0, r8
   114d6:	f01b f860 	bl	2c59a <printk>
   114da:	2500      	movs	r5, #0
   114dc:	f240 116b 	movw	r1, #363	; 0x16b
   114e0:	4638      	mov	r0, r7
   114e2:	f01b fa9b 	bl	2ca1c <assert_post_action>
		onoff_transition_fn transit = NULL;
   114e6:	9501      	str	r5, [sp, #4]
   114e8:	e784      	b.n	113f4 <process_event+0x1b4>
   114ea:	bf00      	nop
   114ec:	00032546 	.word	0x00032546
   114f0:	0003256c 	.word	0x0003256c
   114f4:	00032486 	.word	0x00032486
   114f8:	00032583 	.word	0x00032583
   114fc:	000324a3 	.word	0x000324a3
   11500:	000380f0 	.word	0x000380f0
   11504:	000324c5 	.word	0x000324c5
   11508:	000324d1 	.word	0x000324d1
   1150c:	000324f4 	.word	0x000324f4
   11510:	0003250b 	.word	0x0003250b
   11514:	00032521 	.word	0x00032521
   11518:	00032530 	.word	0x00032530
				   && !sys_slist_is_empty(&mgr->monitors);
   1151c:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   11520:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   11524:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
   11528:	83a3      	strh	r3, [r4, #28]
   1152a:	4650      	mov	r0, sl
   1152c:	f013 fccc 	bl	24ec8 <z_spin_unlock_valid>
   11530:	b968      	cbnz	r0, 1154e <process_event+0x30e>
   11532:	4a3a      	ldr	r2, [pc, #232]	; (1161c <process_event+0x3dc>)
   11534:	493a      	ldr	r1, [pc, #232]	; (11620 <process_event+0x3e0>)
   11536:	23ac      	movs	r3, #172	; 0xac
   11538:	4640      	mov	r0, r8
   1153a:	f01b f82e 	bl	2c59a <printk>
   1153e:	4839      	ldr	r0, [pc, #228]	; (11624 <process_event+0x3e4>)
   11540:	4651      	mov	r1, sl
   11542:	f01b f82a 	bl	2c59a <printk>
   11546:	4835      	ldr	r0, [pc, #212]	; (1161c <process_event+0x3dc>)
   11548:	21ac      	movs	r1, #172	; 0xac
   1154a:	f01b fa67 	bl	2ca1c <assert_post_action>
   1154e:	9b03      	ldr	r3, [sp, #12]
   11550:	f383 8811 	msr	BASEPRI, r3
   11554:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   11558:	f1b9 0f00 	cmp.w	r9, #0
   1155c:	d138      	bne.n	115d0 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
   1155e:	2d00      	cmp	r5, #0
   11560:	d14b      	bne.n	115fa <process_event+0x3ba>
			if (transit != NULL) {
   11562:	9b01      	ldr	r3, [sp, #4]
   11564:	b113      	cbz	r3, 1156c <process_event+0x32c>
				transit(mgr, transition_complete);
   11566:	4930      	ldr	r1, [pc, #192]	; (11628 <process_event+0x3e8>)
   11568:	4620      	mov	r0, r4
   1156a:	4798      	blx	r3
	__asm__ volatile(
   1156c:	f04f 0340 	mov.w	r3, #64	; 0x40
   11570:	f3ef 8b11 	mrs	fp, BASEPRI
   11574:	f383 8812 	msr	BASEPRI_MAX, r3
   11578:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1157c:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   1157e:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   11582:	f013 fc93 	bl	24eac <z_spin_lock_valid>
   11586:	b968      	cbnz	r0, 115a4 <process_event+0x364>
   11588:	4a24      	ldr	r2, [pc, #144]	; (1161c <process_event+0x3dc>)
   1158a:	4928      	ldr	r1, [pc, #160]	; (1162c <process_event+0x3ec>)
   1158c:	2381      	movs	r3, #129	; 0x81
   1158e:	4640      	mov	r0, r8
   11590:	f01b f803 	bl	2c59a <printk>
   11594:	4826      	ldr	r0, [pc, #152]	; (11630 <process_event+0x3f0>)
   11596:	4651      	mov	r1, sl
   11598:	f01a ffff 	bl	2c59a <printk>
   1159c:	481f      	ldr	r0, [pc, #124]	; (1161c <process_event+0x3dc>)
   1159e:	2181      	movs	r1, #129	; 0x81
   115a0:	f01b fa3c 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   115a4:	4650      	mov	r0, sl
   115a6:	f013 fc9f 	bl	24ee8 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   115aa:	8ba3      	ldrh	r3, [r4, #28]
   115ac:	f023 0308 	bic.w	r3, r3, #8
   115b0:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   115b2:	8ba3      	ldrh	r3, [r4, #28]
   115b4:	06da      	lsls	r2, r3, #27
   115b6:	d528      	bpl.n	1160a <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   115b8:	f023 0310 	bic.w	r3, r3, #16
   115bc:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   115be:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   115c0:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   115c4:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   115c8:	2900      	cmp	r1, #0
   115ca:	f47f ae6b 	bne.w	112a4 <process_event+0x64>
out:
   115ce:	e649      	b.n	11264 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   115d0:	68a1      	ldr	r1, [r4, #8]
   115d2:	2900      	cmp	r1, #0
   115d4:	d0c3      	beq.n	1155e <process_event+0x31e>
	return node->next;
   115d6:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   115d8:	9a02      	ldr	r2, [sp, #8]
   115da:	2b00      	cmp	r3, #0
   115dc:	bf38      	it	cc
   115de:	2300      	movcc	r3, #0
   115e0:	4699      	mov	r9, r3
   115e2:	684b      	ldr	r3, [r1, #4]
   115e4:	4620      	mov	r0, r4
   115e6:	461e      	mov	r6, r3
   115e8:	465b      	mov	r3, fp
   115ea:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   115ec:	f1b9 0f00 	cmp.w	r9, #0
   115f0:	d0b5      	beq.n	1155e <process_event+0x31e>
   115f2:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   115f6:	4649      	mov	r1, r9
   115f8:	e7ee      	b.n	115d8 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   115fa:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   115fc:	9a02      	ldr	r2, [sp, #8]
   115fe:	682d      	ldr	r5, [r5, #0]
   11600:	465b      	mov	r3, fp
   11602:	4620      	mov	r0, r4
   11604:	f01a ffff 	bl	2c606 <notify_one>
   11608:	e7a9      	b.n	1155e <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   1160a:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1160e:	bf1e      	ittt	ne
   11610:	f023 0320 	bicne.w	r3, r3, #32
   11614:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   11616:	2102      	movne	r1, #2
   11618:	e7d2      	b.n	115c0 <process_event+0x380>
   1161a:	bf00      	nop
   1161c:	00032546 	.word	0x00032546
   11620:	0003256c 	.word	0x0003256c
   11624:	00032583 	.word	0x00032583
   11628:	00011635 	.word	0x00011635
   1162c:	00032598 	.word	0x00032598
   11630:	000325ad 	.word	0x000325ad

00011634 <transition_complete>:
{
   11634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11636:	4604      	mov	r4, r0
   11638:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   1163a:	f100 0614 	add.w	r6, r0, #20
   1163e:	f04f 0340 	mov.w	r3, #64	; 0x40
   11642:	f3ef 8711 	mrs	r7, BASEPRI
   11646:	f383 8812 	msr	BASEPRI_MAX, r3
   1164a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1164e:	4630      	mov	r0, r6
   11650:	f013 fc2c 	bl	24eac <z_spin_lock_valid>
   11654:	b968      	cbnz	r0, 11672 <transition_complete+0x3e>
   11656:	4a0c      	ldr	r2, [pc, #48]	; (11688 <transition_complete+0x54>)
   11658:	490c      	ldr	r1, [pc, #48]	; (1168c <transition_complete+0x58>)
   1165a:	480d      	ldr	r0, [pc, #52]	; (11690 <transition_complete+0x5c>)
   1165c:	2381      	movs	r3, #129	; 0x81
   1165e:	f01a ff9c 	bl	2c59a <printk>
   11662:	480c      	ldr	r0, [pc, #48]	; (11694 <transition_complete+0x60>)
   11664:	4631      	mov	r1, r6
   11666:	f01a ff98 	bl	2c59a <printk>
   1166a:	4807      	ldr	r0, [pc, #28]	; (11688 <transition_complete+0x54>)
   1166c:	2181      	movs	r1, #129	; 0x81
   1166e:	f01b f9d5 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   11672:	4630      	mov	r0, r6
   11674:	f013 fc38 	bl	24ee8 <z_spin_lock_set_owner>
	mgr->last_res = res;
   11678:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   1167a:	463a      	mov	r2, r7
   1167c:	4620      	mov	r0, r4
   1167e:	2101      	movs	r1, #1
}
   11680:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   11684:	f7ff bddc 	b.w	11240 <process_event>
   11688:	00032546 	.word	0x00032546
   1168c:	00032598 	.word	0x00032598
   11690:	00032486 	.word	0x00032486
   11694:	000325ad 	.word	0x000325ad

00011698 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   11698:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1169c:	4604      	mov	r4, r0
   1169e:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   116a0:	f01a ffc7 	bl	2c632 <validate_args>

	if (rv < 0) {
   116a4:	1e05      	subs	r5, r0, #0
   116a6:	db5e      	blt.n	11766 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   116a8:	f104 0914 	add.w	r9, r4, #20
   116ac:	f04f 0340 	mov.w	r3, #64	; 0x40
   116b0:	f3ef 8a11 	mrs	sl, BASEPRI
   116b4:	f383 8812 	msr	BASEPRI_MAX, r3
   116b8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   116bc:	4648      	mov	r0, r9
   116be:	f013 fbf5 	bl	24eac <z_spin_lock_valid>
   116c2:	b968      	cbnz	r0, 116e0 <onoff_request+0x48>
   116c4:	4a38      	ldr	r2, [pc, #224]	; (117a8 <onoff_request+0x110>)
   116c6:	4939      	ldr	r1, [pc, #228]	; (117ac <onoff_request+0x114>)
   116c8:	4839      	ldr	r0, [pc, #228]	; (117b0 <onoff_request+0x118>)
   116ca:	2381      	movs	r3, #129	; 0x81
   116cc:	f01a ff65 	bl	2c59a <printk>
   116d0:	4838      	ldr	r0, [pc, #224]	; (117b4 <onoff_request+0x11c>)
   116d2:	4649      	mov	r1, r9
   116d4:	f01a ff61 	bl	2c59a <printk>
   116d8:	4833      	ldr	r0, [pc, #204]	; (117a8 <onoff_request+0x110>)
   116da:	2181      	movs	r1, #129	; 0x81
   116dc:	f01b f99e 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   116e0:	4648      	mov	r0, r9
   116e2:	f013 fc01 	bl	24ee8 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   116e6:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   116e8:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   116ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
   116ee:	428b      	cmp	r3, r1
   116f0:	f002 0607 	and.w	r6, r2, #7
   116f4:	d050      	beq.n	11798 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   116f6:	2e02      	cmp	r6, #2
   116f8:	d124      	bne.n	11744 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   116fa:	3301      	adds	r3, #1
   116fc:	83e3      	strh	r3, [r4, #30]
	rv = state;
   116fe:	4635      	mov	r5, r6
		notify = true;
   11700:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   11704:	4648      	mov	r0, r9
   11706:	f013 fbdf 	bl	24ec8 <z_spin_unlock_valid>
   1170a:	b968      	cbnz	r0, 11728 <onoff_request+0x90>
   1170c:	4a26      	ldr	r2, [pc, #152]	; (117a8 <onoff_request+0x110>)
   1170e:	492a      	ldr	r1, [pc, #168]	; (117b8 <onoff_request+0x120>)
   11710:	4827      	ldr	r0, [pc, #156]	; (117b0 <onoff_request+0x118>)
   11712:	23ac      	movs	r3, #172	; 0xac
   11714:	f01a ff41 	bl	2c59a <printk>
   11718:	4828      	ldr	r0, [pc, #160]	; (117bc <onoff_request+0x124>)
   1171a:	4649      	mov	r1, r9
   1171c:	f01a ff3d 	bl	2c59a <printk>
   11720:	4821      	ldr	r0, [pc, #132]	; (117a8 <onoff_request+0x110>)
   11722:	21ac      	movs	r1, #172	; 0xac
   11724:	f01b f97a 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   11728:	f38a 8811 	msr	BASEPRI, sl
   1172c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   11730:	f1b8 0f00 	cmp.w	r8, #0
   11734:	d017      	beq.n	11766 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   11736:	2300      	movs	r3, #0
   11738:	4632      	mov	r2, r6
   1173a:	4639      	mov	r1, r7
   1173c:	4620      	mov	r0, r4
   1173e:	f01a ff62 	bl	2c606 <notify_one>
   11742:	e010      	b.n	11766 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   11744:	0793      	lsls	r3, r2, #30
   11746:	d001      	beq.n	1174c <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   11748:	2e06      	cmp	r6, #6
   1174a:	d10f      	bne.n	1176c <onoff_request+0xd4>
	parent->next = child;
   1174c:	2300      	movs	r3, #0
   1174e:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   11750:	6863      	ldr	r3, [r4, #4]
   11752:	b9f3      	cbnz	r3, 11792 <onoff_request+0xfa>
	list->head = node;
   11754:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   11758:	4635      	mov	r5, r6
   1175a:	b9fe      	cbnz	r6, 1179c <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   1175c:	4652      	mov	r2, sl
   1175e:	2102      	movs	r1, #2
   11760:	4620      	mov	r0, r4
   11762:	f7ff fd6d 	bl	11240 <process_event>
		}
	}

	return rv;
}
   11766:	4628      	mov	r0, r5
   11768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   1176c:	2e05      	cmp	r6, #5
   1176e:	d018      	beq.n	117a2 <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   11770:	2e01      	cmp	r6, #1
   11772:	d00b      	beq.n	1178c <onoff_request+0xf4>
   11774:	4912      	ldr	r1, [pc, #72]	; (117c0 <onoff_request+0x128>)
   11776:	480e      	ldr	r0, [pc, #56]	; (117b0 <onoff_request+0x118>)
   11778:	4a12      	ldr	r2, [pc, #72]	; (117c4 <onoff_request+0x12c>)
   1177a:	f240 13c9 	movw	r3, #457	; 0x1c9
   1177e:	f01a ff0c 	bl	2c59a <printk>
   11782:	4810      	ldr	r0, [pc, #64]	; (117c4 <onoff_request+0x12c>)
   11784:	f240 11c9 	movw	r1, #457	; 0x1c9
   11788:	f01b f948 	bl	2ca1c <assert_post_action>
		rv = -EIO;
   1178c:	f06f 0504 	mvn.w	r5, #4
   11790:	e004      	b.n	1179c <onoff_request+0x104>
	parent->next = child;
   11792:	601f      	str	r7, [r3, #0]
	list->tail = node;
   11794:	6067      	str	r7, [r4, #4]
}
   11796:	e7df      	b.n	11758 <onoff_request+0xc0>
		rv = -EAGAIN;
   11798:	f06f 050a 	mvn.w	r5, #10
   1179c:	f04f 0800 	mov.w	r8, #0
   117a0:	e7b0      	b.n	11704 <onoff_request+0x6c>
		rv = -ENOTSUP;
   117a2:	f06f 0585 	mvn.w	r5, #133	; 0x85
   117a6:	e7f9      	b.n	1179c <onoff_request+0x104>
   117a8:	00032546 	.word	0x00032546
   117ac:	00032598 	.word	0x00032598
   117b0:	00032486 	.word	0x00032486
   117b4:	000325ad 	.word	0x000325ad
   117b8:	0003256c 	.word	0x0003256c
   117bc:	00032583 	.word	0x00032583
   117c0:	00032530 	.word	0x00032530
   117c4:	000324a3 	.word	0x000324a3

000117c8 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   117c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   117cc:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   117ce:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   117d0:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   117d4:	1e63      	subs	r3, r4, #1
   117d6:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   117d8:	6943      	ldr	r3, [r0, #20]
   117da:	f240 746c 	movw	r4, #1900	; 0x76c
   117de:	18e4      	adds	r4, r4, r3
   117e0:	f04f 0500 	mov.w	r5, #0
   117e4:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   117e8:	f1b9 0f02 	cmp.w	r9, #2
   117ec:	bf8c      	ite	hi
   117ee:	2300      	movhi	r3, #0
   117f0:	2301      	movls	r3, #1
   117f2:	1ae4      	subs	r4, r4, r3
   117f4:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   117f8:	2c00      	cmp	r4, #0
   117fa:	f175 0300 	sbcs.w	r3, r5, #0
{
   117fe:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   11800:	da58      	bge.n	118b4 <timeutil_timegm64+0xec>
   11802:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   11806:	1820      	adds	r0, r4, r0
   11808:	f44f 72c8 	mov.w	r2, #400	; 0x190
   1180c:	f04f 0300 	mov.w	r3, #0
   11810:	f145 31ff 	adc.w	r1, r5, #4294967295
   11814:	f7ef fcc4 	bl	11a0 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   11818:	4b29      	ldr	r3, [pc, #164]	; (118c0 <timeutil_timegm64+0xf8>)
   1181a:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1181e:	e9d8 5300 	ldrd	r5, r3, [r8]
   11822:	469a      	mov	sl, r3
   11824:	ea4f 7be3 	mov.w	fp, r3, asr #31
   11828:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1182c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   11830:	fbcc ab03 	smlal	sl, fp, ip, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   11834:	f1b9 0f02 	cmp.w	r9, #2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   11838:	fbaa 230c 	umull	r2, r3, sl, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1183c:	bf8c      	ite	hi
   1183e:	f06f 0e02 	mvnhi.w	lr, #2
   11842:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   11846:	fb0c 330b 	mla	r3, ip, fp, r3
   1184a:	1952      	adds	r2, r2, r5
   1184c:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   11850:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   11854:	f240 156d 	movw	r5, #365	; 0x16d
   11858:	fb05 cc04 	mla	ip, r5, r4, ip
   1185c:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1185e:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   11860:	4465      	add	r5, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   11862:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   11866:	f04f 0c64 	mov.w	ip, #100	; 0x64
   1186a:	fbb4 f4fc 	udiv	r4, r4, ip
	return era * 146097 + (time_t)doe - 719468;
   1186e:	f8df c05c 	ldr.w	ip, [pc, #92]	; 118cc <timeutil_timegm64+0x104>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   11872:	1b2c      	subs	r4, r5, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   11874:	fb0e fe09 	mul.w	lr, lr, r9
   11878:	f10e 0e02 	add.w	lr, lr, #2
   1187c:	f04f 0905 	mov.w	r9, #5
   11880:	fbbe fef9 	udiv	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   11884:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   11886:	fba0 450c 	umull	r4, r5, r0, ip
   1188a:	fb0c 5501 	mla	r5, ip, r1, r5
   1188e:	490d      	ldr	r1, [pc, #52]	; (118c4 <timeutil_timegm64+0xfc>)
   11890:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
   11892:	490d      	ldr	r1, [pc, #52]	; (118c8 <timeutil_timegm64+0x100>)
	return era * 146097 + (time_t)doe - 719468;
   11894:	f145 37ff 	adc.w	r7, r5, #4294967295
   11898:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   1189c:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   118a0:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   118a4:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   118a8:	18a0      	adds	r0, r4, r2
   118aa:	eb45 0103 	adc.w	r1, r5, r3
   118ae:	b003      	add	sp, #12
   118b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   118b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
   118b8:	2300      	movs	r3, #0
   118ba:	4620      	mov	r0, r4
   118bc:	4629      	mov	r1, r5
   118be:	e7a9      	b.n	11814 <timeutil_timegm64+0x4c>
   118c0:	fffffe70 	.word	0xfffffe70
   118c4:	fff50594 	.word	0xfff50594
   118c8:	00015180 	.word	0x00015180
   118cc:	00023ab1 	.word	0x00023ab1

000118d0 <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   118d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   118d2:	460d      	mov	r5, r1
   118d4:	2900      	cmp	r1, #0
   118d6:	d039      	beq.n	1194c <sys_heap_free+0x7c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   118d8:	6806      	ldr	r6, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   118da:	1f0c      	subs	r4, r1, #4
   118dc:	1ba4      	subs	r4, r4, r6
   118de:	08e7      	lsrs	r7, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   118e0:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   118e4:	4434      	add	r4, r6
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   118e6:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   118e8:	07db      	lsls	r3, r3, #31
   118ea:	d40d      	bmi.n	11908 <sys_heap_free+0x38>
   118ec:	4a18      	ldr	r2, [pc, #96]	; (11950 <sys_heap_free+0x80>)
   118ee:	4919      	ldr	r1, [pc, #100]	; (11954 <sys_heap_free+0x84>)
   118f0:	4819      	ldr	r0, [pc, #100]	; (11958 <sys_heap_free+0x88>)
   118f2:	23a3      	movs	r3, #163	; 0xa3
   118f4:	f01a fe51 	bl	2c59a <printk>
   118f8:	4818      	ldr	r0, [pc, #96]	; (1195c <sys_heap_free+0x8c>)
   118fa:	4629      	mov	r1, r5
   118fc:	f01a fe4d 	bl	2c59a <printk>
   11900:	4813      	ldr	r0, [pc, #76]	; (11950 <sys_heap_free+0x80>)
   11902:	21a3      	movs	r1, #163	; 0xa3
   11904:	f01b f88a 	bl	2ca1c <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   11908:	4639      	mov	r1, r7
   1190a:	4630      	mov	r0, r6
   1190c:	f01a fec9 	bl	2c6a2 <chunk_size>
   11910:	4438      	add	r0, r7
		return ((uint16_t *)cmem)[f];
   11912:	f836 3030 	ldrh.w	r3, [r6, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   11916:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   11918:	4287      	cmp	r7, r0
   1191a:	d00d      	beq.n	11938 <sys_heap_free+0x68>
   1191c:	4a0c      	ldr	r2, [pc, #48]	; (11950 <sys_heap_free+0x80>)
   1191e:	4910      	ldr	r1, [pc, #64]	; (11960 <sys_heap_free+0x90>)
   11920:	480d      	ldr	r0, [pc, #52]	; (11958 <sys_heap_free+0x88>)
   11922:	23ab      	movs	r3, #171	; 0xab
   11924:	f01a fe39 	bl	2c59a <printk>
   11928:	480e      	ldr	r0, [pc, #56]	; (11964 <sys_heap_free+0x94>)
   1192a:	4629      	mov	r1, r5
   1192c:	f01a fe35 	bl	2c59a <printk>
   11930:	4807      	ldr	r0, [pc, #28]	; (11950 <sys_heap_free+0x80>)
   11932:	21ab      	movs	r1, #171	; 0xab
   11934:	f01b f872 	bl	2ca1c <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   11938:	8863      	ldrh	r3, [r4, #2]
   1193a:	f023 0301 	bic.w	r3, r3, #1
   1193e:	8063      	strh	r3, [r4, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
   11940:	4639      	mov	r1, r7
   11942:	4630      	mov	r0, r6
}
   11944:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   11948:	f01a bf68 	b.w	2c81c <free_chunk>
}
   1194c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1194e:	bf00      	nop
   11950:	000325c5 	.word	0x000325c5
   11954:	000325e6 	.word	0x000325e6
   11958:	00032486 	.word	0x00032486
   1195c:	000325f7 	.word	0x000325f7
   11960:	0003262f 	.word	0x0003262f
   11964:	00032655 	.word	0x00032655

00011968 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   11968:	424b      	negs	r3, r1
{
   1196a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   1196e:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   11972:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   11976:	6806      	ldr	r6, [r0, #0]
{
   11978:	4614      	mov	r4, r2
	if (align != rew) {
   1197a:	d01f      	beq.n	119bc <sys_heap_aligned_alloc+0x54>
		return false;
   1197c:	2f04      	cmp	r7, #4
   1197e:	463d      	mov	r5, r7
   11980:	46b9      	mov	r9, r7
   11982:	bf28      	it	cs
   11984:	2504      	movcs	r5, #4
		align -= rew;
   11986:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   11988:	f107 3aff 	add.w	sl, r7, #4294967295
   1198c:	ea1a 0f07 	tst.w	sl, r7
   11990:	d00e      	beq.n	119b0 <sys_heap_aligned_alloc+0x48>
   11992:	4933      	ldr	r1, [pc, #204]	; (11a60 <sys_heap_aligned_alloc+0xf8>)
   11994:	4a33      	ldr	r2, [pc, #204]	; (11a64 <sys_heap_aligned_alloc+0xfc>)
   11996:	4834      	ldr	r0, [pc, #208]	; (11a68 <sys_heap_aligned_alloc+0x100>)
   11998:	f240 1327 	movw	r3, #295	; 0x127
   1199c:	f01a fdfd 	bl	2c59a <printk>
   119a0:	4832      	ldr	r0, [pc, #200]	; (11a6c <sys_heap_aligned_alloc+0x104>)
   119a2:	f01a fdfa 	bl	2c59a <printk>
   119a6:	482f      	ldr	r0, [pc, #188]	; (11a64 <sys_heap_aligned_alloc+0xfc>)
   119a8:	f240 1127 	movw	r1, #295	; 0x127
   119ac:	f01b f836 	bl	2ca1c <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   119b0:	b97c      	cbnz	r4, 119d2 <sys_heap_aligned_alloc+0x6a>
		return NULL;
   119b2:	f04f 0900 	mov.w	r9, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   119b6:	4648      	mov	r0, r9
   119b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   119bc:	2904      	cmp	r1, #4
   119be:	d804      	bhi.n	119ca <sys_heap_aligned_alloc+0x62>
}
   119c0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   119c4:	4611      	mov	r1, r2
   119c6:	f01a bf5a 	b.w	2c87e <sys_heap_alloc>
		rew = 0;
   119ca:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   119ce:	2504      	movs	r5, #4
   119d0:	e7da      	b.n	11988 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   119d2:	68b3      	ldr	r3, [r6, #8]
   119d4:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   119d8:	d9eb      	bls.n	119b2 <sys_heap_aligned_alloc+0x4a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   119da:	f104 010b 	add.w	r1, r4, #11
   119de:	4439      	add	r1, r7
   119e0:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   119e2:	08c9      	lsrs	r1, r1, #3
   119e4:	4630      	mov	r0, r6
   119e6:	f01a feb2 	bl	2c74e <alloc_chunk>
	if (c0 == 0) {
   119ea:	4680      	mov	r8, r0
   119ec:	2800      	cmp	r0, #0
   119ee:	d0e0      	beq.n	119b2 <sys_heap_aligned_alloc+0x4a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   119f0:	f109 0504 	add.w	r5, r9, #4
   119f4:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   119f8:	4435      	add	r5, r6
   119fa:	4455      	add	r5, sl
   119fc:	427f      	negs	r7, r7
   119fe:	402f      	ands	r7, r5
   11a00:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11a04:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11a06:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11a0a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11a0c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   11a0e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   11a12:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   11a14:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   11a18:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   11a1c:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   11a20:	d208      	bcs.n	11a34 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
   11a22:	4601      	mov	r1, r0
   11a24:	463a      	mov	r2, r7
   11a26:	4630      	mov	r0, r6
   11a28:	f01a fede 	bl	2c7e8 <split_chunks>
		free_list_add(h, c0);
   11a2c:	4641      	mov	r1, r8
   11a2e:	4630      	mov	r0, r6
   11a30:	f01a fe3c 	bl	2c6ac <free_list_add>
	return c + chunk_size(h, c);
   11a34:	4639      	mov	r1, r7
   11a36:	4630      	mov	r0, r6
   11a38:	f01a fe33 	bl	2c6a2 <chunk_size>
   11a3c:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   11a3e:	4284      	cmp	r4, r0
   11a40:	d207      	bcs.n	11a52 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   11a42:	4630      	mov	r0, r6
   11a44:	4622      	mov	r2, r4
   11a46:	f01a fecf 	bl	2c7e8 <split_chunks>
		free_list_add(h, c_end);
   11a4a:	4621      	mov	r1, r4
   11a4c:	4630      	mov	r0, r6
   11a4e:	f01a fe2d 	bl	2c6ac <free_list_add>
	void *cmem = &buf[c];
   11a52:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11a56:	8873      	ldrh	r3, [r6, #2]
   11a58:	f043 0301 	orr.w	r3, r3, #1
   11a5c:	8073      	strh	r3, [r6, #2]
   11a5e:	e7aa      	b.n	119b6 <sys_heap_aligned_alloc+0x4e>
   11a60:	00032691 	.word	0x00032691
   11a64:	000325c5 	.word	0x000325c5
   11a68:	00032486 	.word	0x00032486
   11a6c:	000326ac 	.word	0x000326ac

00011a70 <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11a70:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   11a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a78:	4606      	mov	r6, r0
   11a7a:	460d      	mov	r5, r1
   11a7c:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   11a7e:	d369      	bcc.n	11b54 <sys_heap_init+0xe4>
   11a80:	493d      	ldr	r1, [pc, #244]	; (11b78 <sys_heap_init+0x108>)
   11a82:	4a3e      	ldr	r2, [pc, #248]	; (11b7c <sys_heap_init+0x10c>)
   11a84:	483e      	ldr	r0, [pc, #248]	; (11b80 <sys_heap_init+0x110>)
   11a86:	f240 13a5 	movw	r3, #421	; 0x1a5
   11a8a:	f01a fd86 	bl	2c59a <printk>
   11a8e:	483d      	ldr	r0, [pc, #244]	; (11b84 <sys_heap_init+0x114>)
   11a90:	f01a fd83 	bl	2c59a <printk>
   11a94:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11a98:	4838      	ldr	r0, [pc, #224]	; (11b7c <sys_heap_init+0x10c>)
   11a9a:	f01a ffbf 	bl	2ca1c <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   11a9e:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11aa0:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11aa2:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   11aa4:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   11aa8:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11aac:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11aae:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   11ab0:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   11ab4:	d80e      	bhi.n	11ad4 <sys_heap_init+0x64>
   11ab6:	4934      	ldr	r1, [pc, #208]	; (11b88 <sys_heap_init+0x118>)
   11ab8:	4a30      	ldr	r2, [pc, #192]	; (11b7c <sys_heap_init+0x10c>)
   11aba:	4831      	ldr	r0, [pc, #196]	; (11b80 <sys_heap_init+0x110>)
   11abc:	f240 13b5 	movw	r3, #437	; 0x1b5
   11ac0:	f01a fd6b 	bl	2c59a <printk>
   11ac4:	4831      	ldr	r0, [pc, #196]	; (11b8c <sys_heap_init+0x11c>)
   11ac6:	f01a fd68 	bl	2c59a <printk>
   11aca:	482c      	ldr	r0, [pc, #176]	; (11b7c <sys_heap_init+0x10c>)
   11acc:	f240 11b5 	movw	r1, #437	; 0x1b5
   11ad0:	f01a ffa4 	bl	2ca1c <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   11ad4:	fab7 f887 	clz	r8, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   11ad8:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
   11adc:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
   11ae0:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   11ae2:	f108 0607 	add.w	r6, r8, #7
	h->avail_buckets = 0;
   11ae6:	2300      	movs	r3, #0
   11ae8:	08f6      	lsrs	r6, r6, #3
   11aea:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11aec:	1c73      	adds	r3, r6, #1
   11aee:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   11af0:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   11af2:	d90e      	bls.n	11b12 <sys_heap_init+0xa2>
   11af4:	4926      	ldr	r1, [pc, #152]	; (11b90 <sys_heap_init+0x120>)
   11af6:	4a21      	ldr	r2, [pc, #132]	; (11b7c <sys_heap_init+0x10c>)
   11af8:	4821      	ldr	r0, [pc, #132]	; (11b80 <sys_heap_init+0x110>)
   11afa:	f240 13c5 	movw	r3, #453	; 0x1c5
   11afe:	f01a fd4c 	bl	2c59a <printk>
   11b02:	4822      	ldr	r0, [pc, #136]	; (11b8c <sys_heap_init+0x11c>)
   11b04:	f01a fd49 	bl	2c59a <printk>
   11b08:	481c      	ldr	r0, [pc, #112]	; (11b7c <sys_heap_init+0x10c>)
   11b0a:	f240 11c5 	movw	r1, #453	; 0x1c5
   11b0e:	f01a ff85 	bl	2ca1c <assert_post_action>
   11b12:	f104 0210 	add.w	r2, r4, #16
   11b16:	44a0      	add	r8, r4
   11b18:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
   11b1a:	4590      	cmp	r8, r2
   11b1c:	d129      	bne.n	11b72 <sys_heap_init+0x102>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11b1e:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11b20:	f042 0201 	orr.w	r2, r2, #1
   11b24:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
   11b26:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   11b2a:	1bba      	subs	r2, r7, r6
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   11b2c:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
   11b2e:	8023      	strh	r3, [r4, #0]
   11b30:	8048      	strh	r0, [r1, #2]
   11b32:	1961      	adds	r1, r4, r5
   11b34:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
   11b38:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
   11b3c:	804b      	strh	r3, [r1, #2]
   11b3e:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   11b40:	887b      	ldrh	r3, [r7, #2]
   11b42:	f043 0301 	orr.w	r3, r3, #1
   11b46:	807b      	strh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   11b48:	4631      	mov	r1, r6
   11b4a:	4620      	mov	r0, r4
}
   11b4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   11b50:	f01a bdac 	b.w	2c6ac <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   11b54:	2a04      	cmp	r2, #4
   11b56:	d8a2      	bhi.n	11a9e <sys_heap_init+0x2e>
   11b58:	490e      	ldr	r1, [pc, #56]	; (11b94 <sys_heap_init+0x124>)
   11b5a:	4a08      	ldr	r2, [pc, #32]	; (11b7c <sys_heap_init+0x10c>)
   11b5c:	4808      	ldr	r0, [pc, #32]	; (11b80 <sys_heap_init+0x110>)
   11b5e:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   11b62:	f01a fd1a 	bl	2c59a <printk>
   11b66:	4809      	ldr	r0, [pc, #36]	; (11b8c <sys_heap_init+0x11c>)
   11b68:	f01a fd17 	bl	2c59a <printk>
   11b6c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   11b70:	e792      	b.n	11a98 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
   11b72:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   11b76:	e7d0      	b.n	11b1a <sys_heap_init+0xaa>
   11b78:	000326c9 	.word	0x000326c9
   11b7c:	000325c5 	.word	0x000325c5
   11b80:	00032486 	.word	0x00032486
   11b84:	000326df 	.word	0x000326df
   11b88:	00032730 	.word	0x00032730
   11b8c:	00032717 	.word	0x00032717
   11b90:	00032759 	.word	0x00032759
   11b94:	000326f6 	.word	0x000326f6

00011b98 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   11b98:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   11b9a:	4e09      	ldr	r6, [pc, #36]	; (11bc0 <extract_decimal+0x28>)
   11b9c:	6801      	ldr	r1, [r0, #0]
{
   11b9e:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   11ba0:	270a      	movs	r7, #10
	size_t val = 0;
   11ba2:	2000      	movs	r0, #0
   11ba4:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
   11ba6:	3101      	adds	r1, #1
   11ba8:	7823      	ldrb	r3, [r4, #0]
   11baa:	5d9d      	ldrb	r5, [r3, r6]
   11bac:	076d      	lsls	r5, r5, #29
   11bae:	d401      	bmi.n	11bb4 <extract_decimal+0x1c>
	}
	*str = sp;
   11bb0:	6014      	str	r4, [r2, #0]
	return val;
}
   11bb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   11bb4:	fb07 3300 	mla	r3, r7, r0, r3
   11bb8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   11bbc:	e7f2      	b.n	11ba4 <extract_decimal+0xc>
   11bbe:	bf00      	nop
   11bc0:	0003811b 	.word	0x0003811b

00011bc4 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   11bc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc8:	4614      	mov	r4, r2
   11bca:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   11bcc:	78d3      	ldrb	r3, [r2, #3]
   11bce:	4a24      	ldr	r2, [pc, #144]	; (11c60 <encode_uint+0x9c>)
   11bd0:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
   11bd4:	2b6f      	cmp	r3, #111	; 0x6f
   11bd6:	f00a 0203 	and.w	r2, sl, #3
{
   11bda:	4606      	mov	r6, r0
   11bdc:	460f      	mov	r7, r1
   11bde:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   11be0:	d02d      	beq.n	11c3e <encode_uint+0x7a>
   11be2:	d828      	bhi.n	11c36 <encode_uint+0x72>
		return 16;
   11be4:	2b58      	cmp	r3, #88	; 0x58
   11be6:	bf14      	ite	ne
   11be8:	250a      	movne	r5, #10
   11bea:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   11bec:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   11bf0:	46aa      	mov	sl, r5
   11bf2:	f04f 0b00 	mov.w	fp, #0
   11bf6:	4652      	mov	r2, sl
   11bf8:	465b      	mov	r3, fp
   11bfa:	4630      	mov	r0, r6
   11bfc:	4639      	mov	r1, r7
   11bfe:	f7ef fb1f 	bl	1240 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   11c02:	2a09      	cmp	r2, #9
   11c04:	b2d3      	uxtb	r3, r2
   11c06:	d81f      	bhi.n	11c48 <encode_uint+0x84>
   11c08:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   11c0a:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11c0c:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   11c0e:	bf08      	it	eq
   11c10:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11c12:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   11c16:	d301      	bcc.n	11c1c <encode_uint+0x58>
   11c18:	45c8      	cmp	r8, r9
   11c1a:	d812      	bhi.n	11c42 <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   11c1c:	7823      	ldrb	r3, [r4, #0]
   11c1e:	069b      	lsls	r3, r3, #26
   11c20:	d505      	bpl.n	11c2e <encode_uint+0x6a>
		if (radix == 8) {
   11c22:	2d08      	cmp	r5, #8
   11c24:	d116      	bne.n	11c54 <encode_uint+0x90>
			conv->altform_0 = true;
   11c26:	78a3      	ldrb	r3, [r4, #2]
   11c28:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   11c2c:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   11c2e:	4640      	mov	r0, r8
   11c30:	b003      	add	sp, #12
   11c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   11c36:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   11c3a:	2b70      	cmp	r3, #112	; 0x70
   11c3c:	e7d3      	b.n	11be6 <encode_uint+0x22>
	switch (specifier) {
   11c3e:	2508      	movs	r5, #8
   11c40:	e7d4      	b.n	11bec <encode_uint+0x28>
		value /= radix;
   11c42:	4606      	mov	r6, r0
   11c44:	460f      	mov	r7, r1
   11c46:	e7d6      	b.n	11bf6 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   11c48:	9a01      	ldr	r2, [sp, #4]
   11c4a:	2a01      	cmp	r2, #1
   11c4c:	bf0c      	ite	eq
   11c4e:	3337      	addeq	r3, #55	; 0x37
   11c50:	3357      	addne	r3, #87	; 0x57
   11c52:	e7da      	b.n	11c0a <encode_uint+0x46>
		} else if (radix == 16) {
   11c54:	2d10      	cmp	r5, #16
   11c56:	d1ea      	bne.n	11c2e <encode_uint+0x6a>
			conv->altform_0c = true;
   11c58:	78a3      	ldrb	r3, [r4, #2]
   11c5a:	f043 0310 	orr.w	r3, r3, #16
   11c5e:	e7e5      	b.n	11c2c <encode_uint+0x68>
   11c60:	0003811b 	.word	0x0003811b

00011c64 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   11c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11c68:	4682      	mov	sl, r0
   11c6a:	b093      	sub	sp, #76	; 0x4c
   11c6c:	468b      	mov	fp, r1
   11c6e:	4691      	mov	r9, r2
   11c70:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   11c72:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   11c74:	f899 0000 	ldrb.w	r0, [r9]
   11c78:	b908      	cbnz	r0, 11c7e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   11c7a:	4628      	mov	r0, r5
   11c7c:	e33a      	b.n	122f4 <cbvprintf+0x690>
		if (*fp != '%') {
   11c7e:	f109 0301 	add.w	r3, r9, #1
   11c82:	2825      	cmp	r0, #37	; 0x25
   11c84:	9302      	str	r3, [sp, #8]
   11c86:	d006      	beq.n	11c96 <cbvprintf+0x32>
			OUTC('%');
   11c88:	4659      	mov	r1, fp
   11c8a:	47d0      	blx	sl
   11c8c:	2800      	cmp	r0, #0
   11c8e:	f2c0 8331 	blt.w	122f4 <cbvprintf+0x690>
   11c92:	3501      	adds	r5, #1
			break;
   11c94:	e1f1      	b.n	1207a <cbvprintf+0x416>
		} state = {
   11c96:	2218      	movs	r2, #24
   11c98:	2100      	movs	r1, #0
   11c9a:	a80c      	add	r0, sp, #48	; 0x30
   11c9c:	f01e fcc5 	bl	3062a <memset>
	if (*sp == '%') {
   11ca0:	f899 3001 	ldrb.w	r3, [r9, #1]
   11ca4:	2b25      	cmp	r3, #37	; 0x25
   11ca6:	d059      	beq.n	11d5c <cbvprintf+0xf8>
   11ca8:	9a02      	ldr	r2, [sp, #8]
   11caa:	4616      	mov	r6, r2
		switch (*sp) {
   11cac:	f812 3b01 	ldrb.w	r3, [r2], #1
   11cb0:	2b2b      	cmp	r3, #43	; 0x2b
   11cb2:	f000 808b 	beq.w	11dcc <cbvprintf+0x168>
   11cb6:	d879      	bhi.n	11dac <cbvprintf+0x148>
   11cb8:	2b20      	cmp	r3, #32
   11cba:	f000 808c 	beq.w	11dd6 <cbvprintf+0x172>
   11cbe:	2b23      	cmp	r3, #35	; 0x23
   11cc0:	f000 808e 	beq.w	11de0 <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   11cc4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11cc8:	f003 0244 	and.w	r2, r3, #68	; 0x44
   11ccc:	2a44      	cmp	r2, #68	; 0x44
   11cce:	d103      	bne.n	11cd8 <cbvprintf+0x74>
		conv->flag_zero = false;
   11cd0:	f36f 1386 	bfc	r3, #6, #1
   11cd4:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   11cd8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11cdc:	9605      	str	r6, [sp, #20]
   11cde:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11ce2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   11ce6:	7833      	ldrb	r3, [r6, #0]
   11ce8:	2b2a      	cmp	r3, #42	; 0x2a
   11cea:	d17e      	bne.n	11dea <cbvprintf+0x186>
		conv->width_star = true;
   11cec:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   11cf0:	f043 0301 	orr.w	r3, r3, #1
   11cf4:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   11cf8:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   11cfa:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   11cfc:	781a      	ldrb	r2, [r3, #0]
   11cfe:	2a2e      	cmp	r2, #46	; 0x2e
   11d00:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   11d04:	bf0c      	ite	eq
   11d06:	2101      	moveq	r1, #1
   11d08:	2100      	movne	r1, #0
   11d0a:	f361 0241 	bfi	r2, r1, #1, #1
   11d0e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   11d12:	d10b      	bne.n	11d2c <cbvprintf+0xc8>
	++sp;
   11d14:	1c5a      	adds	r2, r3, #1
   11d16:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   11d18:	785a      	ldrb	r2, [r3, #1]
   11d1a:	2a2a      	cmp	r2, #42	; 0x2a
   11d1c:	d17b      	bne.n	11e16 <cbvprintf+0x1b2>
		conv->prec_star = true;
   11d1e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   11d22:	f042 0204 	orr.w	r2, r2, #4
   11d26:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   11d2a:	3302      	adds	r3, #2
	switch (*sp) {
   11d2c:	4619      	mov	r1, r3
   11d2e:	f811 0b01 	ldrb.w	r0, [r1], #1
   11d32:	286c      	cmp	r0, #108	; 0x6c
   11d34:	f000 80b6 	beq.w	11ea4 <cbvprintf+0x240>
   11d38:	d87d      	bhi.n	11e36 <cbvprintf+0x1d2>
   11d3a:	2868      	cmp	r0, #104	; 0x68
   11d3c:	f000 8084 	beq.w	11e48 <cbvprintf+0x1e4>
   11d40:	286a      	cmp	r0, #106	; 0x6a
   11d42:	f000 80b9 	beq.w	11eb8 <cbvprintf+0x254>
   11d46:	284c      	cmp	r0, #76	; 0x4c
   11d48:	f000 80bd 	beq.w	11ec6 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   11d4c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   11d50:	f36f 02c6 	bfc	r2, #3, #4
   11d54:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   11d58:	4619      	mov	r1, r3
   11d5a:	e080      	b.n	11e5e <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   11d5c:	f109 0202 	add.w	r2, r9, #2
   11d60:	9202      	str	r2, [sp, #8]
   11d62:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   11d66:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   11d6a:	07d9      	lsls	r1, r3, #31
   11d6c:	f140 8149 	bpl.w	12002 <cbvprintf+0x39e>
			width = va_arg(ap, int);
   11d70:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   11d74:	f1b8 0f00 	cmp.w	r8, #0
   11d78:	da07      	bge.n	11d8a <cbvprintf+0x126>
				conv->flag_dash = true;
   11d7a:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   11d7e:	f042 0204 	orr.w	r2, r2, #4
   11d82:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   11d86:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   11d8a:	075a      	lsls	r2, r3, #29
   11d8c:	f140 8142 	bpl.w	12014 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   11d90:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   11d94:	2f00      	cmp	r7, #0
   11d96:	f280 8141 	bge.w	1201c <cbvprintf+0x3b8>
				conv->prec_present = false;
   11d9a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   11d9e:	f36f 0341 	bfc	r3, #1, #1
   11da2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   11da6:	f04f 37ff 	mov.w	r7, #4294967295
   11daa:	e137      	b.n	1201c <cbvprintf+0x3b8>
		switch (*sp) {
   11dac:	2b2d      	cmp	r3, #45	; 0x2d
   11dae:	d006      	beq.n	11dbe <cbvprintf+0x15a>
   11db0:	2b30      	cmp	r3, #48	; 0x30
   11db2:	d187      	bne.n	11cc4 <cbvprintf+0x60>
			conv->flag_zero = true;
   11db4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11db8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   11dbc:	e003      	b.n	11dc6 <cbvprintf+0x162>
			conv->flag_dash = true;
   11dbe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11dc2:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   11dc6:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   11dca:	e76e      	b.n	11caa <cbvprintf+0x46>
			conv->flag_plus = true;
   11dcc:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11dd0:	f043 0308 	orr.w	r3, r3, #8
   11dd4:	e7f7      	b.n	11dc6 <cbvprintf+0x162>
			conv->flag_space = true;
   11dd6:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11dda:	f043 0310 	orr.w	r3, r3, #16
   11dde:	e7f2      	b.n	11dc6 <cbvprintf+0x162>
			conv->flag_hash = true;
   11de0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11de4:	f043 0320 	orr.w	r3, r3, #32
   11de8:	e7ed      	b.n	11dc6 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   11dea:	a805      	add	r0, sp, #20
   11dec:	f7ff fed4 	bl	11b98 <extract_decimal>
	if (sp != wp) {
   11df0:	9b05      	ldr	r3, [sp, #20]
   11df2:	42b3      	cmp	r3, r6
   11df4:	d081      	beq.n	11cfa <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   11df6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   11dfa:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   11dfc:	f3c1 0240 	ubfx	r2, r1, #1, #1
   11e00:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   11e04:	0052      	lsls	r2, r2, #1
   11e06:	f062 027f 	orn	r2, r2, #127	; 0x7f
   11e0a:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   11e0e:	430a      	orrs	r2, r1
   11e10:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   11e14:	e771      	b.n	11cfa <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   11e16:	a805      	add	r0, sp, #20
   11e18:	f7ff febe 	bl	11b98 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   11e1c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   11e20:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   11e22:	f3c3 0240 	ubfx	r2, r3, #1, #1
   11e26:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   11e2a:	f360 0341 	bfi	r3, r0, #1, #1
   11e2e:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   11e32:	9b05      	ldr	r3, [sp, #20]
   11e34:	e77a      	b.n	11d2c <cbvprintf+0xc8>
	switch (*sp) {
   11e36:	2874      	cmp	r0, #116	; 0x74
   11e38:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   11e3c:	d040      	beq.n	11ec0 <cbvprintf+0x25c>
   11e3e:	287a      	cmp	r0, #122	; 0x7a
   11e40:	d184      	bne.n	11d4c <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   11e42:	4613      	mov	r3, r2
   11e44:	2206      	movs	r2, #6
   11e46:	e028      	b.n	11e9a <cbvprintf+0x236>
		if (*++sp == 'h') {
   11e48:	785a      	ldrb	r2, [r3, #1]
   11e4a:	2a68      	cmp	r2, #104	; 0x68
   11e4c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   11e50:	d121      	bne.n	11e96 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   11e52:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   11e54:	f361 02c6 	bfi	r2, r1, #3, #4
   11e58:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   11e5c:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   11e5e:	460b      	mov	r3, r1
   11e60:	f813 2b01 	ldrb.w	r2, [r3], #1
   11e64:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   11e66:	2a78      	cmp	r2, #120	; 0x78
   11e68:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   11e6c:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   11e70:	f200 80bf 	bhi.w	11ff2 <cbvprintf+0x38e>
   11e74:	2a57      	cmp	r2, #87	; 0x57
   11e76:	d833      	bhi.n	11ee0 <cbvprintf+0x27c>
   11e78:	2a41      	cmp	r2, #65	; 0x41
   11e7a:	d003      	beq.n	11e84 <cbvprintf+0x220>
   11e7c:	3a45      	subs	r2, #69	; 0x45
   11e7e:	2a02      	cmp	r2, #2
   11e80:	f200 80b7 	bhi.w	11ff2 <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   11e84:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   11e88:	2204      	movs	r2, #4
   11e8a:	f362 0302 	bfi	r3, r2, #0, #3
   11e8e:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   11e92:	2301      	movs	r3, #1
			break;
   11e94:	e084      	b.n	11fa0 <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   11e96:	4613      	mov	r3, r2
   11e98:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   11e9a:	f362 03c6 	bfi	r3, r2, #3, #4
   11e9e:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   11ea2:	e7dc      	b.n	11e5e <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   11ea4:	785a      	ldrb	r2, [r3, #1]
   11ea6:	2a6c      	cmp	r2, #108	; 0x6c
   11ea8:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   11eac:	d101      	bne.n	11eb2 <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   11eae:	2104      	movs	r1, #4
   11eb0:	e7d0      	b.n	11e54 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   11eb2:	4613      	mov	r3, r2
   11eb4:	2203      	movs	r2, #3
   11eb6:	e7f0      	b.n	11e9a <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   11eb8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   11ebc:	2205      	movs	r2, #5
   11ebe:	e7ec      	b.n	11e9a <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   11ec0:	4613      	mov	r3, r2
   11ec2:	2207      	movs	r2, #7
   11ec4:	e7e9      	b.n	11e9a <cbvprintf+0x236>
		conv->unsupported = true;
   11ec6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   11eca:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   11ece:	f023 0302 	bic.w	r3, r3, #2
   11ed2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   11ed6:	f043 0302 	orr.w	r3, r3, #2
   11eda:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   11ede:	e7be      	b.n	11e5e <cbvprintf+0x1fa>
   11ee0:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   11ee4:	2920      	cmp	r1, #32
   11ee6:	f200 8084 	bhi.w	11ff2 <cbvprintf+0x38e>
   11eea:	a001      	add	r0, pc, #4	; (adr r0, 11ef0 <cbvprintf+0x28c>)
   11eec:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   11ef0:	00011fb5 	.word	0x00011fb5
   11ef4:	00011ff3 	.word	0x00011ff3
   11ef8:	00011ff3 	.word	0x00011ff3
   11efc:	00011ff3 	.word	0x00011ff3
   11f00:	00011ff3 	.word	0x00011ff3
   11f04:	00011ff3 	.word	0x00011ff3
   11f08:	00011ff3 	.word	0x00011ff3
   11f0c:	00011ff3 	.word	0x00011ff3
   11f10:	00011ff3 	.word	0x00011ff3
   11f14:	00011e85 	.word	0x00011e85
   11f18:	00011ff3 	.word	0x00011ff3
   11f1c:	00011fb5 	.word	0x00011fb5
   11f20:	00011f75 	.word	0x00011f75
   11f24:	00011e85 	.word	0x00011e85
   11f28:	00011e85 	.word	0x00011e85
   11f2c:	00011e85 	.word	0x00011e85
   11f30:	00011ff3 	.word	0x00011ff3
   11f34:	00011f75 	.word	0x00011f75
   11f38:	00011ff3 	.word	0x00011ff3
   11f3c:	00011ff3 	.word	0x00011ff3
   11f40:	00011ff3 	.word	0x00011ff3
   11f44:	00011ff3 	.word	0x00011ff3
   11f48:	00011fbd 	.word	0x00011fbd
   11f4c:	00011fb5 	.word	0x00011fb5
   11f50:	00011fd9 	.word	0x00011fd9
   11f54:	00011ff3 	.word	0x00011ff3
   11f58:	00011ff3 	.word	0x00011ff3
   11f5c:	00011fd9 	.word	0x00011fd9
   11f60:	00011ff3 	.word	0x00011ff3
   11f64:	00011fb5 	.word	0x00011fb5
   11f68:	00011ff3 	.word	0x00011ff3
   11f6c:	00011ff3 	.word	0x00011ff3
   11f70:	00011fb5 	.word	0x00011fb5
		conv->specifier_cat = SPECIFIER_SINT;
   11f74:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   11f78:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   11f7a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   11f7e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11f82:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   11f84:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   11f88:	bf02      	ittt	eq
   11f8a:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   11f8e:	f041 0101 	orreq.w	r1, r1, #1
   11f92:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   11f96:	2a63      	cmp	r2, #99	; 0x63
   11f98:	d131      	bne.n	11ffe <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   11f9a:	3b00      	subs	r3, #0
   11f9c:	bf18      	it	ne
   11f9e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   11fa0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   11fa4:	f3c2 0140 	ubfx	r1, r2, #1, #1
   11fa8:	430b      	orrs	r3, r1
   11faa:	f363 0241 	bfi	r2, r3, #1, #1
   11fae:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   11fb2:	e6d8      	b.n	11d66 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   11fb4:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   11fb8:	2002      	movs	r0, #2
   11fba:	e7de      	b.n	11f7a <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   11fbc:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   11fc0:	f003 0378 	and.w	r3, r3, #120	; 0x78
   11fc4:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   11fc8:	2103      	movs	r1, #3
   11fca:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   11fce:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   11fd0:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   11fd4:	4143      	adcs	r3, r0
   11fd6:	e7e3      	b.n	11fa0 <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   11fd8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   11fdc:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   11fde:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   11fe2:	f361 0202 	bfi	r2, r1, #0, #3
   11fe6:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   11fea:	bf14      	ite	ne
   11fec:	2301      	movne	r3, #1
   11fee:	2300      	moveq	r3, #0
   11ff0:	e7d6      	b.n	11fa0 <cbvprintf+0x33c>
		conv->invalid = true;
   11ff2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11ff6:	f043 0301 	orr.w	r3, r3, #1
   11ffa:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   11ffe:	2300      	movs	r3, #0
   12000:	e7ce      	b.n	11fa0 <cbvprintf+0x33c>
		} else if (conv->width_present) {
   12002:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   12006:	2a00      	cmp	r2, #0
			width = conv->width_value;
   12008:	bfb4      	ite	lt
   1200a:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   1200e:	f04f 38ff 	movge.w	r8, #4294967295
   12012:	e6ba      	b.n	11d8a <cbvprintf+0x126>
		} else if (conv->prec_present) {
   12014:	079f      	lsls	r7, r3, #30
   12016:	f57f aec6 	bpl.w	11da6 <cbvprintf+0x142>
			precision = conv->prec_value;
   1201a:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   1201c:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   12020:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   12022:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   12026:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   1202a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1202e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   12030:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   12034:	d137      	bne.n	120a6 <cbvprintf+0x442>
			switch (length_mod) {
   12036:	1ecb      	subs	r3, r1, #3
   12038:	2b04      	cmp	r3, #4
   1203a:	d821      	bhi.n	12080 <cbvprintf+0x41c>
   1203c:	e8df f003 	tbb	[pc, r3]
   12040:	20070703 	.word	0x20070703
   12044:	20          	.byte	0x20
   12045:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   12046:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   1204a:	17d3      	asrs	r3, r2, #31
   1204c:	e004      	b.n	12058 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   1204e:	3407      	adds	r4, #7
   12050:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   12054:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   12058:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   1205c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   12060:	f013 0603 	ands.w	r6, r3, #3
   12064:	d055      	beq.n	12112 <cbvprintf+0x4ae>
			OUTS(sp, fp);
   12066:	9b02      	ldr	r3, [sp, #8]
   12068:	464a      	mov	r2, r9
   1206a:	4659      	mov	r1, fp
   1206c:	4650      	mov	r0, sl
   1206e:	f01a fc30 	bl	2c8d2 <outs>
   12072:	2800      	cmp	r0, #0
   12074:	f2c0 813e 	blt.w	122f4 <cbvprintf+0x690>
   12078:	4405      	add	r5, r0
			OUTS(bps, bpe);
   1207a:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1207e:	e5f9      	b.n	11c74 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12080:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   12084:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   12086:	ea4f 73e2 	mov.w	r3, r2, asr #31
   1208a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1208e:	d105      	bne.n	1209c <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   12090:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   12094:	930c      	str	r3, [sp, #48]	; 0x30
   12096:	2300      	movs	r3, #0
   12098:	930d      	str	r3, [sp, #52]	; 0x34
   1209a:	e7df      	b.n	1205c <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   1209c:	2902      	cmp	r1, #2
   1209e:	d1dd      	bne.n	1205c <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   120a0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   120a4:	e7d1      	b.n	1204a <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   120a6:	2b02      	cmp	r3, #2
   120a8:	d123      	bne.n	120f2 <cbvprintf+0x48e>
			switch (length_mod) {
   120aa:	1ecb      	subs	r3, r1, #3
   120ac:	2b04      	cmp	r3, #4
   120ae:	d813      	bhi.n	120d8 <cbvprintf+0x474>
   120b0:	e8df f003 	tbb	[pc, r3]
   120b4:	120a0a03 	.word	0x120a0a03
   120b8:	12          	.byte	0x12
   120b9:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   120ba:	6822      	ldr	r2, [r4, #0]
   120bc:	920c      	str	r2, [sp, #48]	; 0x30
   120be:	2300      	movs	r3, #0
   120c0:	1d20      	adds	r0, r4, #4
   120c2:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   120c4:	4604      	mov	r4, r0
   120c6:	e7c9      	b.n	1205c <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   120c8:	3407      	adds	r4, #7
   120ca:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   120ce:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   120d2:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   120d6:	e7f5      	b.n	120c4 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   120d8:	f854 3b04 	ldr.w	r3, [r4], #4
   120dc:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   120de:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   120e0:	f04f 0300 	mov.w	r3, #0
   120e4:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   120e6:	d0d3      	beq.n	12090 <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   120e8:	2902      	cmp	r1, #2
   120ea:	d1b7      	bne.n	1205c <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   120ec:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   120f0:	e7d0      	b.n	12094 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   120f2:	2b04      	cmp	r3, #4
   120f4:	d107      	bne.n	12106 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   120f6:	3407      	adds	r4, #7
   120f8:	f024 0407 	bic.w	r4, r4, #7
   120fc:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   12100:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   12104:	e7aa      	b.n	1205c <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   12106:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   12108:	bf04      	itt	eq
   1210a:	f854 3b04 	ldreq.w	r3, [r4], #4
   1210e:	930c      	streq	r3, [sp, #48]	; 0x30
   12110:	e7a4      	b.n	1205c <cbvprintf+0x3f8>
		switch (conv->specifier) {
   12112:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   12116:	2878      	cmp	r0, #120	; 0x78
   12118:	d8af      	bhi.n	1207a <cbvprintf+0x416>
   1211a:	2862      	cmp	r0, #98	; 0x62
   1211c:	d820      	bhi.n	12160 <cbvprintf+0x4fc>
   1211e:	2825      	cmp	r0, #37	; 0x25
   12120:	f43f adb2 	beq.w	11c88 <cbvprintf+0x24>
   12124:	2858      	cmp	r0, #88	; 0x58
   12126:	d1a8      	bne.n	1207a <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   12128:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   1212c:	9300      	str	r3, [sp, #0]
   1212e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   12132:	ab06      	add	r3, sp, #24
   12134:	aa0e      	add	r2, sp, #56	; 0x38
   12136:	f7ff fd45 	bl	11bc4 <encode_uint>
   1213a:	4681      	mov	r9, r0
			if (precision >= 0) {
   1213c:	2f00      	cmp	r7, #0
   1213e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   12142:	db0b      	blt.n	1215c <cbvprintf+0x4f8>
				conv->flag_zero = false;
   12144:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   12148:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   1214c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   12150:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   12152:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   12156:	d901      	bls.n	1215c <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   12158:	1aff      	subs	r7, r7, r3
   1215a:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   1215c:	4607      	mov	r7, r0
   1215e:	e03c      	b.n	121da <cbvprintf+0x576>
   12160:	3863      	subs	r0, #99	; 0x63
   12162:	2815      	cmp	r0, #21
   12164:	d889      	bhi.n	1207a <cbvprintf+0x416>
   12166:	a201      	add	r2, pc, #4	; (adr r2, 1216c <cbvprintf+0x508>)
   12168:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   1216c:	000121eb 	.word	0x000121eb
   12170:	0001224d 	.word	0x0001224d
   12174:	0001207b 	.word	0x0001207b
   12178:	0001207b 	.word	0x0001207b
   1217c:	0001207b 	.word	0x0001207b
   12180:	0001207b 	.word	0x0001207b
   12184:	0001224d 	.word	0x0001224d
   12188:	0001207b 	.word	0x0001207b
   1218c:	0001207b 	.word	0x0001207b
   12190:	0001207b 	.word	0x0001207b
   12194:	0001207b 	.word	0x0001207b
   12198:	000122ab 	.word	0x000122ab
   1219c:	00012279 	.word	0x00012279
   121a0:	0001227d 	.word	0x0001227d
   121a4:	0001207b 	.word	0x0001207b
   121a8:	0001207b 	.word	0x0001207b
   121ac:	000121c5 	.word	0x000121c5
   121b0:	0001207b 	.word	0x0001207b
   121b4:	00012279 	.word	0x00012279
   121b8:	0001207b 	.word	0x0001207b
   121bc:	0001207b 	.word	0x0001207b
   121c0:	00012279 	.word	0x00012279
			if (precision >= 0) {
   121c4:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   121c6:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   121ca:	db0a      	blt.n	121e2 <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   121cc:	4639      	mov	r1, r7
   121ce:	4648      	mov	r0, r9
   121d0:	f01e fa6d 	bl	306ae <strnlen>
			bpe = bps + len;
   121d4:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   121d8:	2600      	movs	r6, #0
		if (bps == NULL) {
   121da:	f1b9 0f00 	cmp.w	r9, #0
   121de:	d10c      	bne.n	121fa <cbvprintf+0x596>
   121e0:	e74b      	b.n	1207a <cbvprintf+0x416>
				len = strlen(bps);
   121e2:	4648      	mov	r0, r9
   121e4:	f7fb f8e6 	bl	d3b4 <strlen>
   121e8:	e7f4      	b.n	121d4 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   121ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   121ec:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   121f0:	2600      	movs	r6, #0
			bpe = buf + 1;
   121f2:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   121f6:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   121fa:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   121fe:	b106      	cbz	r6, 12202 <cbvprintf+0x59e>
			nj_len += 1U;
   12200:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   12202:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   12206:	06d0      	lsls	r0, r2, #27
   12208:	d569      	bpl.n	122de <cbvprintf+0x67a>
			nj_len += 2U;
   1220a:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   1220c:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   1220e:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   12210:	bf48      	it	mi
   12212:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   12214:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   12216:	bf48      	it	mi
   12218:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   1221a:	f1b8 0f00 	cmp.w	r8, #0
   1221e:	dd76      	ble.n	1230e <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   12220:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   12224:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   12228:	f3c2 0380 	ubfx	r3, r2, #2, #1
   1222c:	9303      	str	r3, [sp, #12]
   1222e:	0753      	lsls	r3, r2, #29
   12230:	d46d      	bmi.n	1230e <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   12232:	0650      	lsls	r0, r2, #25
   12234:	d561      	bpl.n	122fa <cbvprintf+0x696>
					if (sign != 0) {
   12236:	b13e      	cbz	r6, 12248 <cbvprintf+0x5e4>
						OUTC(sign);
   12238:	4659      	mov	r1, fp
   1223a:	4630      	mov	r0, r6
   1223c:	47d0      	blx	sl
   1223e:	2800      	cmp	r0, #0
   12240:	db58      	blt.n	122f4 <cbvprintf+0x690>
						sign = 0;
   12242:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   12244:	3501      	adds	r5, #1
						sign = 0;
   12246:	461e      	mov	r6, r3
					pad = '0';
   12248:	2330      	movs	r3, #48	; 0x30
   1224a:	e057      	b.n	122fc <cbvprintf+0x698>
			if (conv->flag_plus) {
   1224c:	071e      	lsls	r6, r3, #28
   1224e:	d411      	bmi.n	12274 <cbvprintf+0x610>
				sign = ' ';
   12250:	f013 0610 	ands.w	r6, r3, #16
   12254:	bf18      	it	ne
   12256:	2620      	movne	r6, #32
			sint = value->sint;
   12258:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   1225c:	2a00      	cmp	r2, #0
   1225e:	f173 0100 	sbcs.w	r1, r3, #0
   12262:	f6bf af61 	bge.w	12128 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   12266:	4252      	negs	r2, r2
   12268:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   1226c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   12270:	262d      	movs	r6, #45	; 0x2d
   12272:	e759      	b.n	12128 <cbvprintf+0x4c4>
				sign = '+';
   12274:	262b      	movs	r6, #43	; 0x2b
   12276:	e7ef      	b.n	12258 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   12278:	2600      	movs	r6, #0
   1227a:	e755      	b.n	12128 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   1227c:	980c      	ldr	r0, [sp, #48]	; 0x30
   1227e:	b348      	cbz	r0, 122d4 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   12280:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   12284:	9300      	str	r3, [sp, #0]
   12286:	aa0e      	add	r2, sp, #56	; 0x38
   12288:	ab06      	add	r3, sp, #24
   1228a:	2100      	movs	r1, #0
   1228c:	f7ff fc9a 	bl	11bc4 <encode_uint>
				conv->altform_0c = true;
   12290:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   12294:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   12298:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   1229c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   122a0:	4681      	mov	r9, r0
				conv->altform_0c = true;
   122a2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   122a6:	2600      	movs	r6, #0
				goto prec_int_pad0;
   122a8:	e748      	b.n	1213c <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   122aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   122ac:	2907      	cmp	r1, #7
   122ae:	f63f aee4 	bhi.w	1207a <cbvprintf+0x416>
   122b2:	e8df f001 	tbb	[pc, r1]
   122b6:	040d      	.short	0x040d
   122b8:	08080d06 	.word	0x08080d06
   122bc:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   122be:	701d      	strb	r5, [r3, #0]
		break;
   122c0:	e6db      	b.n	1207a <cbvprintf+0x416>
		*(short *)dp = (short)count;
   122c2:	801d      	strh	r5, [r3, #0]
		break;
   122c4:	e6d9      	b.n	1207a <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   122c6:	4628      	mov	r0, r5
   122c8:	17e9      	asrs	r1, r5, #31
   122ca:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   122ce:	e6d4      	b.n	1207a <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   122d0:	601d      	str	r5, [r3, #0]
		break;
   122d2:	e6d2      	b.n	1207a <cbvprintf+0x416>
			bpe = bps + 5;
   122d4:	4f2e      	ldr	r7, [pc, #184]	; (12390 <cbvprintf+0x72c>)
   122d6:	4606      	mov	r6, r0
			bps = "(nil)";
   122d8:	f1a7 0905 	sub.w	r9, r7, #5
   122dc:	e78d      	b.n	121fa <cbvprintf+0x596>
		} else if (conv->altform_0) {
   122de:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   122e0:	bf48      	it	mi
   122e2:	3301      	addmi	r3, #1
   122e4:	e792      	b.n	1220c <cbvprintf+0x5a8>
					OUTC(pad);
   122e6:	4618      	mov	r0, r3
   122e8:	4659      	mov	r1, fp
   122ea:	9303      	str	r3, [sp, #12]
   122ec:	47d0      	blx	sl
   122ee:	2800      	cmp	r0, #0
   122f0:	9b03      	ldr	r3, [sp, #12]
   122f2:	da04      	bge.n	122fe <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   122f4:	b013      	add	sp, #76	; 0x4c
   122f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   122fa:	2320      	movs	r3, #32
   122fc:	4445      	add	r5, r8
   122fe:	4642      	mov	r2, r8
				while (width-- > 0) {
   12300:	2a00      	cmp	r2, #0
   12302:	eba5 0108 	sub.w	r1, r5, r8
   12306:	f108 38ff 	add.w	r8, r8, #4294967295
   1230a:	dcec      	bgt.n	122e6 <cbvprintf+0x682>
   1230c:	460d      	mov	r5, r1
		if (sign != 0) {
   1230e:	b12e      	cbz	r6, 1231c <cbvprintf+0x6b8>
			OUTC(sign);
   12310:	4659      	mov	r1, fp
   12312:	4630      	mov	r0, r6
   12314:	47d0      	blx	sl
   12316:	2800      	cmp	r0, #0
   12318:	dbec      	blt.n	122f4 <cbvprintf+0x690>
   1231a:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   1231c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12320:	06d9      	lsls	r1, r3, #27
   12322:	d401      	bmi.n	12328 <cbvprintf+0x6c4>
   12324:	071a      	lsls	r2, r3, #28
   12326:	d505      	bpl.n	12334 <cbvprintf+0x6d0>
				OUTC('0');
   12328:	4659      	mov	r1, fp
   1232a:	2030      	movs	r0, #48	; 0x30
   1232c:	47d0      	blx	sl
   1232e:	2800      	cmp	r0, #0
   12330:	dbe0      	blt.n	122f4 <cbvprintf+0x690>
   12332:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   12334:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   12338:	06db      	lsls	r3, r3, #27
   1233a:	d506      	bpl.n	1234a <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   1233c:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   12340:	4659      	mov	r1, fp
   12342:	47d0      	blx	sl
   12344:	2800      	cmp	r0, #0
   12346:	dbd5      	blt.n	122f4 <cbvprintf+0x690>
   12348:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   1234a:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   1234c:	442e      	add	r6, r5
   1234e:	1b73      	subs	r3, r6, r5
   12350:	2b00      	cmp	r3, #0
   12352:	dc15      	bgt.n	12380 <cbvprintf+0x71c>
			OUTS(bps, bpe);
   12354:	463b      	mov	r3, r7
   12356:	464a      	mov	r2, r9
   12358:	4659      	mov	r1, fp
   1235a:	4650      	mov	r0, sl
   1235c:	f01a fab9 	bl	2c8d2 <outs>
   12360:	2800      	cmp	r0, #0
   12362:	dbc7      	blt.n	122f4 <cbvprintf+0x690>
   12364:	4405      	add	r5, r0
		while (width > 0) {
   12366:	44a8      	add	r8, r5
   12368:	eba8 0305 	sub.w	r3, r8, r5
   1236c:	2b00      	cmp	r3, #0
   1236e:	f77f ae84 	ble.w	1207a <cbvprintf+0x416>
			OUTC(' ');
   12372:	4659      	mov	r1, fp
   12374:	2020      	movs	r0, #32
   12376:	47d0      	blx	sl
   12378:	2800      	cmp	r0, #0
   1237a:	dbbb      	blt.n	122f4 <cbvprintf+0x690>
   1237c:	3501      	adds	r5, #1
			--width;
   1237e:	e7f3      	b.n	12368 <cbvprintf+0x704>
				OUTC('0');
   12380:	4659      	mov	r1, fp
   12382:	2030      	movs	r0, #48	; 0x30
   12384:	47d0      	blx	sl
   12386:	2800      	cmp	r0, #0
   12388:	dbb4      	blt.n	122f4 <cbvprintf+0x690>
   1238a:	3501      	adds	r5, #1
   1238c:	e7df      	b.n	1234e <cbvprintf+0x6ea>
   1238e:	bf00      	nop
   12390:	00032789 	.word	0x00032789

00012394 <ring_buf_put>:

	return 0;
}

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   12394:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   12398:	4680      	mov	r8, r0
   1239a:	460e      	mov	r6, r1
   1239c:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1239e:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   123a0:	462a      	mov	r2, r5
   123a2:	a901      	add	r1, sp, #4
   123a4:	4640      	mov	r0, r8
   123a6:	f01a fabd 	bl	2c924 <ring_buf_put_claim>
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   123aa:	4631      	mov	r1, r6
   123ac:	4604      	mov	r4, r0
   123ae:	4602      	mov	r2, r0
   123b0:	9801      	ldr	r0, [sp, #4]
   123b2:	f01e f912 	bl	305da <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   123b6:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   123b8:	4427      	add	r7, r4
		data += partial_size;
   123ba:	4426      	add	r6, r4
	} while (size && partial_size);
   123bc:	d001      	beq.n	123c2 <ring_buf_put+0x2e>
   123be:	2c00      	cmp	r4, #0
   123c0:	d1ee      	bne.n	123a0 <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   123c2:	4639      	mov	r1, r7
   123c4:	4640      	mov	r0, r8
   123c6:	f01a fac9 	bl	2c95c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
   123ca:	b148      	cbz	r0, 123e0 <ring_buf_put+0x4c>
   123cc:	4906      	ldr	r1, [pc, #24]	; (123e8 <ring_buf_put+0x54>)
   123ce:	4807      	ldr	r0, [pc, #28]	; (123ec <ring_buf_put+0x58>)
   123d0:	4a07      	ldr	r2, [pc, #28]	; (123f0 <ring_buf_put+0x5c>)
   123d2:	23e8      	movs	r3, #232	; 0xe8
   123d4:	f01a f8e1 	bl	2c59a <printk>
   123d8:	4805      	ldr	r0, [pc, #20]	; (123f0 <ring_buf_put+0x5c>)
   123da:	21e8      	movs	r1, #232	; 0xe8
   123dc:	f01a fb1e 	bl	2ca1c <assert_post_action>

	return total_size;
}
   123e0:	4638      	mov	r0, r7
   123e2:	b002      	add	sp, #8
   123e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   123e8:	000327b2 	.word	0x000327b2
   123ec:	00032486 	.word	0x00032486
   123f0:	0003278a 	.word	0x0003278a

000123f4 <ring_buf_get>:

	return 0;
}

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   123f4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   123f8:	4680      	mov	r8, r0
   123fa:	460d      	mov	r5, r1
   123fc:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   123fe:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   12400:	4632      	mov	r2, r6
   12402:	a901      	add	r1, sp, #4
   12404:	4640      	mov	r0, r8
   12406:	f01a fac3 	bl	2c990 <ring_buf_get_claim>
   1240a:	4604      	mov	r4, r0
		if (data) {
   1240c:	b12d      	cbz	r5, 1241a <ring_buf_get+0x26>
   1240e:	4602      	mov	r2, r0
   12410:	9901      	ldr	r1, [sp, #4]
   12412:	4628      	mov	r0, r5
   12414:	f01e f8e1 	bl	305da <memcpy>
			memcpy(data, src, partial_size);
			data += partial_size;
   12418:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   1241a:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   1241c:	4427      	add	r7, r4
	} while (size && partial_size);
   1241e:	d001      	beq.n	12424 <ring_buf_get+0x30>
   12420:	2c00      	cmp	r4, #0
   12422:	d1ed      	bne.n	12400 <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   12424:	4639      	mov	r1, r7
   12426:	4640      	mov	r0, r8
   12428:	f01a fadc 	bl	2c9e4 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
   1242c:	b158      	cbz	r0, 12446 <ring_buf_get+0x52>
   1242e:	4908      	ldr	r1, [pc, #32]	; (12450 <ring_buf_get+0x5c>)
   12430:	4808      	ldr	r0, [pc, #32]	; (12454 <ring_buf_get+0x60>)
   12432:	4a09      	ldr	r2, [pc, #36]	; (12458 <ring_buf_get+0x64>)
   12434:	f240 1335 	movw	r3, #309	; 0x135
   12438:	f01a f8af 	bl	2c59a <printk>
   1243c:	4806      	ldr	r0, [pc, #24]	; (12458 <ring_buf_get+0x64>)
   1243e:	f240 1135 	movw	r1, #309	; 0x135
   12442:	f01a faeb 	bl	2ca1c <assert_post_action>

	return total_size;
}
   12446:	4638      	mov	r0, r7
   12448:	b002      	add	sp, #8
   1244a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1244e:	bf00      	nop
   12450:	000327b2 	.word	0x000327b2
   12454:	00032486 	.word	0x00032486
   12458:	0003278a 	.word	0x0003278a

0001245c <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   1245c:	b508      	push	{r3, lr}
	__asm__ volatile(
   1245e:	f04f 0240 	mov.w	r2, #64	; 0x40
   12462:	f3ef 8311 	mrs	r3, BASEPRI
   12466:	f382 8812 	msr	BASEPRI_MAX, r2
   1246a:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   1246e:	f005 fd37 	bl	17ee0 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   12472:	4803      	ldr	r0, [pc, #12]	; (12480 <sys_reboot+0x24>)
   12474:	f01a f891 	bl	2c59a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   12478:	f004 fd2a 	bl	16ed0 <arch_cpu_idle>
   1247c:	e7fc      	b.n	12478 <sys_reboot+0x1c>
   1247e:	bf00      	nop
   12480:	000327bb 	.word	0x000327bb

00012484 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   12484:	070b      	lsls	r3, r1, #28
   12486:	d506      	bpl.n	12496 <foldcase+0x12>
   12488:	4b03      	ldr	r3, [pc, #12]	; (12498 <foldcase+0x14>)
   1248a:	5cc3      	ldrb	r3, [r0, r3]
   1248c:	f003 0303 	and.w	r3, r3, #3
   12490:	2b01      	cmp	r3, #1
        return tolower(ch);
   12492:	bf08      	it	eq
   12494:	3020      	addeq	r0, #32
    return ch;
}
   12496:	4770      	bx	lr
   12498:	0003811b 	.word	0x0003811b

0001249c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   1249c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   1249e:	4910      	ldr	r1, [pc, #64]	; (124e0 <enable_logger+0x44>)
   124a0:	4810      	ldr	r0, [pc, #64]	; (124e4 <enable_logger+0x48>)
{
   124a2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   124a4:	2200      	movs	r2, #0
   124a6:	f01e f808 	bl	304ba <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   124aa:	4d0f      	ldr	r5, [pc, #60]	; (124e8 <enable_logger+0x4c>)
   124ac:	490f      	ldr	r1, [pc, #60]	; (124ec <enable_logger+0x50>)
   124ae:	2200      	movs	r2, #0
   124b0:	2300      	movs	r3, #0
   124b2:	e9cd 2306 	strd	r2, r3, [sp, #24]
   124b6:	2400      	movs	r4, #0
   124b8:	230e      	movs	r3, #14
   124ba:	e9cd 3403 	strd	r3, r4, [sp, #12]
   124be:	e9cd 4401 	strd	r4, r4, [sp, #4]
   124c2:	4b0b      	ldr	r3, [pc, #44]	; (124f0 <enable_logger+0x54>)
   124c4:	9400      	str	r4, [sp, #0]
   124c6:	f44f 7240 	mov.w	r2, #768	; 0x300
   124ca:	4628      	mov	r0, r5
   124cc:	f012 fe96 	bl	251fc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   124d0:	4908      	ldr	r1, [pc, #32]	; (124f4 <enable_logger+0x58>)
   124d2:	4628      	mov	r0, r5
   124d4:	f012 fca0 	bl	24e18 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   124d8:	4620      	mov	r0, r4
   124da:	b009      	add	sp, #36	; 0x24
   124dc:	bd30      	pop	{r4, r5, pc}
   124de:	bf00      	nop
   124e0:	000124f9 	.word	0x000124f9
   124e4:	200017e0 	.word	0x200017e0
   124e8:	20001818 	.word	0x20001818
   124ec:	20004360 	.word	0x20004360
   124f0:	000129d9 	.word	0x000129d9
   124f4:	00032d8d 	.word	0x00032d8d

000124f8 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   124f8:	4801      	ldr	r0, [pc, #4]	; (12500 <log_process_thread_timer_expiry_fn+0x8>)
   124fa:	f013 bc7d 	b.w	25df8 <z_impl_k_sem_give>
   124fe:	bf00      	nop
   12500:	20000930 	.word	0x20000930

00012504 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   12504:	2920      	cmp	r1, #32
{
   12506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12508:	4605      	mov	r5, r0
   1250a:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   1250c:	d909      	bls.n	12522 <z_log_get_s_mask+0x1e>
   1250e:	4914      	ldr	r1, [pc, #80]	; (12560 <z_log_get_s_mask+0x5c>)
   12510:	4814      	ldr	r0, [pc, #80]	; (12564 <z_log_get_s_mask+0x60>)
   12512:	4a15      	ldr	r2, [pc, #84]	; (12568 <z_log_get_s_mask+0x64>)
   12514:	2387      	movs	r3, #135	; 0x87
   12516:	f01a f840 	bl	2c59a <printk>
   1251a:	4813      	ldr	r0, [pc, #76]	; (12568 <z_log_get_s_mask+0x64>)
   1251c:	2187      	movs	r1, #135	; 0x87
   1251e:	f01a fa7d 	bl	2ca1c <assert_post_action>
			arm = false;
   12522:	2000      	movs	r0, #0
		} else if (arm && isalpha((int)curr)) {
   12524:	4e11      	ldr	r6, [pc, #68]	; (1256c <z_log_get_s_mask+0x68>)
			arm = false;
   12526:	4603      	mov	r3, r0
   12528:	4602      	mov	r2, r0
				mask |= BIT(arg);
   1252a:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   1252c:	f815 1b01 	ldrb.w	r1, [r5], #1
   12530:	b109      	cbz	r1, 12536 <z_log_get_s_mask+0x32>
   12532:	42a3      	cmp	r3, r4
   12534:	d300      	bcc.n	12538 <z_log_get_s_mask+0x34>
}
   12536:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   12538:	2925      	cmp	r1, #37	; 0x25
   1253a:	d102      	bne.n	12542 <z_log_get_s_mask+0x3e>
			arm = !arm;
   1253c:	f082 0201 	eor.w	r2, r2, #1
   12540:	e7f4      	b.n	1252c <z_log_get_s_mask+0x28>
		} else if (arm && isalpha((int)curr)) {
   12542:	2a00      	cmp	r2, #0
   12544:	d0f2      	beq.n	1252c <z_log_get_s_mask+0x28>
   12546:	f811 c006 	ldrb.w	ip, [r1, r6]
   1254a:	f01c 0f03 	tst.w	ip, #3
   1254e:	d0ed      	beq.n	1252c <z_log_get_s_mask+0x28>
			if (curr == 's') {
   12550:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   12552:	bf04      	itt	eq
   12554:	fa07 f203 	lsleq.w	r2, r7, r3
   12558:	4310      	orreq	r0, r2
			arg++;
   1255a:	3301      	adds	r3, #1
			arm = false;
   1255c:	2200      	movs	r2, #0
   1255e:	e7e5      	b.n	1252c <z_log_get_s_mask+0x28>
   12560:	00032811 	.word	0x00032811
   12564:	00032486 	.word	0x00032486
   12568:	000327e4 	.word	0x000327e4
   1256c:	0003811b 	.word	0x0003811b

00012570 <log_core_init>:
	panic_mode = false;
   12570:	4a0d      	ldr	r2, [pc, #52]	; (125a8 <log_core_init+0x38>)
{
   12572:	b508      	push	{r3, lr}
	panic_mode = false;
   12574:	2300      	movs	r3, #0
   12576:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   12578:	4a0c      	ldr	r2, [pc, #48]	; (125ac <log_core_init+0x3c>)
   1257a:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   1257c:	4b0c      	ldr	r3, [pc, #48]	; (125b0 <log_core_init+0x40>)
   1257e:	4a0d      	ldr	r2, [pc, #52]	; (125b4 <log_core_init+0x44>)
   12580:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   12582:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   12586:	f000 ff13 	bl	133b0 <log_output_timestamp_freq_set>
		log_msg_pool_init();
   1258a:	f000 fbf5 	bl	12d78 <log_msg_pool_init>
		log_list_init(&list);
   1258e:	480a      	ldr	r0, [pc, #40]	; (125b8 <log_core_init+0x48>)
   12590:	f01a fb7f 	bl	2cc92 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   12594:	2308      	movs	r3, #8
   12596:	4909      	ldr	r1, [pc, #36]	; (125bc <log_core_init+0x4c>)
   12598:	4809      	ldr	r0, [pc, #36]	; (125c0 <log_core_init+0x50>)
   1259a:	2248      	movs	r2, #72	; 0x48
   1259c:	f01d fe46 	bl	3022c <k_mem_slab_init>
}
   125a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
   125a4:	f000 baac 	b.w	12b00 <z_log_runtime_filters_init>
   125a8:	20003921 	.word	0x20003921
   125ac:	2000234c 	.word	0x2000234c
   125b0:	20000428 	.word	0x20000428
   125b4:	0002ccd7 	.word	0x0002ccd7
   125b8:	20002354 	.word	0x20002354
   125bc:	20007c38 	.word	0x20007c38
   125c0:	2000235c 	.word	0x2000235c

000125c4 <log_init>:
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   125c4:	4b1a      	ldr	r3, [pc, #104]	; (12630 <log_init+0x6c>)
   125c6:	4a1b      	ldr	r2, [pc, #108]	; (12634 <log_init+0x70>)
   125c8:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   125ca:	2b9f      	cmp	r3, #159	; 0x9f
{
   125cc:	b570      	push	{r4, r5, r6, lr}
   125ce:	ea4f 1623 	mov.w	r6, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   125d2:	d90b      	bls.n	125ec <log_init+0x28>
   125d4:	4918      	ldr	r1, [pc, #96]	; (12638 <log_init+0x74>)
   125d6:	4819      	ldr	r0, [pc, #100]	; (1263c <log_init+0x78>)
   125d8:	4a19      	ldr	r2, [pc, #100]	; (12640 <log_init+0x7c>)
   125da:	f240 234a 	movw	r3, #586	; 0x24a
   125de:	f019 ffdc 	bl	2c59a <printk>
   125e2:	4817      	ldr	r0, [pc, #92]	; (12640 <log_init+0x7c>)
   125e4:	f240 214a 	movw	r1, #586	; 0x24a
   125e8:	f01a fa18 	bl	2ca1c <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   125ec:	f3bf 8f5b 	dmb	ish
   125f0:	4b14      	ldr	r3, [pc, #80]	; (12644 <log_init+0x80>)
   125f2:	e853 5f00 	ldrex	r5, [r3]
   125f6:	1c6a      	adds	r2, r5, #1
   125f8:	e843 2100 	strex	r1, r2, [r3]
   125fc:	2900      	cmp	r1, #0
   125fe:	d1f8      	bne.n	125f2 <log_init+0x2e>
   12600:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   12604:	b915      	cbnz	r5, 1260c <log_init+0x48>
   12606:	4c0b      	ldr	r4, [pc, #44]	; (12634 <log_init+0x70>)
	for (i = 0; i < log_backend_count_get(); i++) {
   12608:	42b5      	cmp	r5, r6
   1260a:	db00      	blt.n	1260e <log_init+0x4a>
}
   1260c:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1260e:	7b23      	ldrb	r3, [r4, #12]
   12610:	b153      	cbz	r3, 12628 <log_init+0x64>
			if (backend->api->init != NULL) {
   12612:	6823      	ldr	r3, [r4, #0]
   12614:	699b      	ldr	r3, [r3, #24]
   12616:	b10b      	cbz	r3, 1261c <log_init+0x58>
				backend->api->init(backend);
   12618:	4620      	mov	r0, r4
   1261a:	4798      	blx	r3
			log_backend_enable(backend,
   1261c:	6863      	ldr	r3, [r4, #4]
   1261e:	2204      	movs	r2, #4
   12620:	6819      	ldr	r1, [r3, #0]
   12622:	4620      	mov	r0, r4
   12624:	f000 fb60 	bl	12ce8 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   12628:	3501      	adds	r5, #1
   1262a:	3410      	adds	r4, #16
   1262c:	e7ec      	b.n	12608 <log_init+0x44>
   1262e:	bf00      	nop
   12630:	00030cb4 	.word	0x00030cb4
   12634:	00030ca4 	.word	0x00030ca4
   12638:	00032829 	.word	0x00032829
   1263c:	00032486 	.word	0x00032486
   12640:	000327e4 	.word	0x000327e4
   12644:	20002350 	.word	0x20002350

00012648 <get_msg>:
{
   12648:	b510      	push	{r4, lr}
   1264a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1264e:	f3ef 8411 	mrs	r4, BASEPRI
   12652:	f383 8812 	msr	BASEPRI_MAX, r3
   12656:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   1265a:	4804      	ldr	r0, [pc, #16]	; (1266c <get_msg+0x24>)
   1265c:	f01a fb29 	bl	2ccb2 <log_list_head_get>
	__asm__ volatile(
   12660:	f384 8811 	msr	BASEPRI, r4
   12664:	f3bf 8f6f 	isb	sy
}
   12668:	bd10      	pop	{r4, pc}
   1266a:	bf00      	nop
   1266c:	20002354 	.word	0x20002354

00012670 <z_log_notify_backend_enabled>:
{
   12670:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   12672:	4c04      	ldr	r4, [pc, #16]	; (12684 <z_log_notify_backend_enabled+0x14>)
   12674:	7822      	ldrb	r2, [r4, #0]
   12676:	b912      	cbnz	r2, 1267e <z_log_notify_backend_enabled+0xe>
   12678:	4803      	ldr	r0, [pc, #12]	; (12688 <z_log_notify_backend_enabled+0x18>)
   1267a:	f013 fbbd 	bl	25df8 <z_impl_k_sem_give>
	backend_attached = true;
   1267e:	2301      	movs	r3, #1
   12680:	7023      	strb	r3, [r4, #0]
}
   12682:	bd10      	pop	{r4, pc}
   12684:	20003920 	.word	0x20003920
   12688:	20000930 	.word	0x20000930

0001268c <z_log_dropped>:
   1268c:	4b0c      	ldr	r3, [pc, #48]	; (126c0 <z_log_dropped+0x34>)
   1268e:	f3bf 8f5b 	dmb	ish
   12692:	e853 2f00 	ldrex	r2, [r3]
   12696:	3201      	adds	r2, #1
   12698:	e843 2100 	strex	r1, r2, [r3]
   1269c:	2900      	cmp	r1, #0
   1269e:	d1f8      	bne.n	12692 <z_log_dropped+0x6>
   126a0:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   126a4:	f3bf 8f5b 	dmb	ish
   126a8:	4b06      	ldr	r3, [pc, #24]	; (126c4 <z_log_dropped+0x38>)
   126aa:	e853 2f00 	ldrex	r2, [r3]
   126ae:	3a01      	subs	r2, #1
   126b0:	e843 2100 	strex	r1, r2, [r3]
   126b4:	2900      	cmp	r1, #0
   126b6:	d1f8      	bne.n	126aa <z_log_dropped+0x1e>
   126b8:	f3bf 8f5b 	dmb	ish
}
   126bc:	4770      	bx	lr
   126be:	bf00      	nop
   126c0:	2000234c 	.word	0x2000234c
   126c4:	20002348 	.word	0x20002348

000126c8 <z_log_dropped_read_and_clear>:
}
   126c8:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   126ca:	4b06      	ldr	r3, [pc, #24]	; (126e4 <z_log_dropped_read_and_clear+0x1c>)
   126cc:	f3bf 8f5b 	dmb	ish
   126d0:	4602      	mov	r2, r0
   126d2:	e853 0f00 	ldrex	r0, [r3]
   126d6:	e843 2100 	strex	r1, r2, [r3]
   126da:	2900      	cmp	r1, #0
   126dc:	d1f9      	bne.n	126d2 <z_log_dropped_read_and_clear+0xa>
   126de:	f3bf 8f5b 	dmb	ish
   126e2:	4770      	bx	lr
   126e4:	2000234c 	.word	0x2000234c

000126e8 <dropped_notify>:
{
   126e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   126ea:	f7ff ffed 	bl	126c8 <z_log_dropped_read_and_clear>
   126ee:	4c0b      	ldr	r4, [pc, #44]	; (1271c <dropped_notify+0x34>)
   126f0:	4d0b      	ldr	r5, [pc, #44]	; (12720 <dropped_notify+0x38>)
   126f2:	1b2d      	subs	r5, r5, r4
   126f4:	4607      	mov	r7, r0
   126f6:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   126f8:	2600      	movs	r6, #0
   126fa:	42ae      	cmp	r6, r5
   126fc:	db00      	blt.n	12700 <dropped_notify+0x18>
}
   126fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   12700:	4620      	mov	r0, r4
   12702:	f01a fadc 	bl	2ccbe <log_backend_is_active>
   12706:	b128      	cbz	r0, 12714 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
   12708:	6823      	ldr	r3, [r4, #0]
   1270a:	691b      	ldr	r3, [r3, #16]
   1270c:	b113      	cbz	r3, 12714 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
   1270e:	4639      	mov	r1, r7
   12710:	4620      	mov	r0, r4
   12712:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12714:	3601      	adds	r6, #1
   12716:	3410      	adds	r4, #16
   12718:	e7ef      	b.n	126fa <dropped_notify+0x12>
   1271a:	bf00      	nop
   1271c:	00030ca4 	.word	0x00030ca4
   12720:	00030cb4 	.word	0x00030cb4

00012724 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   12724:	4b17      	ldr	r3, [pc, #92]	; (12784 <z_log_strdup+0x60>)
   12726:	4298      	cmp	r0, r3
{
   12728:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1272a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1272c:	d302      	bcc.n	12734 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1272e:	4b16      	ldr	r3, [pc, #88]	; (12788 <z_log_strdup+0x64>)
   12730:	4298      	cmp	r0, r3
   12732:	d321      	bcc.n	12778 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   12734:	4815      	ldr	r0, [pc, #84]	; (1278c <z_log_strdup+0x68>)
   12736:	2200      	movs	r2, #0
   12738:	2300      	movs	r3, #0
   1273a:	a901      	add	r1, sp, #4
   1273c:	f012 fa9c 	bl	24c78 <k_mem_slab_alloc>
	if (err != 0) {
   12740:	4605      	mov	r5, r0
   12742:	b9e0      	cbnz	r0, 1277e <z_log_strdup+0x5a>
   12744:	2201      	movs	r2, #1
   12746:	9b01      	ldr	r3, [sp, #4]
   12748:	f3bf 8f5b 	dmb	ish
   1274c:	e853 1f00 	ldrex	r1, [r3]
   12750:	e843 2000 	strex	r0, r2, [r3]
   12754:	2800      	cmp	r0, #0
   12756:	d1f9      	bne.n	1274c <z_log_strdup+0x28>
   12758:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   1275c:	9e01      	ldr	r6, [sp, #4]
   1275e:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   12760:	2241      	movs	r2, #65	; 0x41
   12762:	4618      	mov	r0, r3
   12764:	4621      	mov	r1, r4
   12766:	f01d ff8f 	bl	30688 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   1276a:	227e      	movs	r2, #126	; 0x7e
   1276c:	4603      	mov	r3, r0
   1276e:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   12772:	f886 5046 	strb.w	r5, [r6, #70]	; 0x46
	return dup->buf;
   12776:	461c      	mov	r4, r3
}
   12778:	4620      	mov	r0, r4
   1277a:	b002      	add	sp, #8
   1277c:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   1277e:	4b04      	ldr	r3, [pc, #16]	; (12790 <z_log_strdup+0x6c>)
   12780:	e7f9      	b.n	12776 <z_log_strdup+0x52>
   12782:	bf00      	nop
   12784:	000308f0 	.word	0x000308f0
   12788:	00038250 	.word	0x00038250
   1278c:	2000235c 	.word	0x2000235c
   12790:	0003284d 	.word	0x0003284d

00012794 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   12794:	b150      	cbz	r0, 127ac <log_is_strdup+0x18>
   12796:	4b06      	ldr	r3, [pc, #24]	; (127b0 <log_is_strdup+0x1c>)
   12798:	4298      	cmp	r0, r3
   1279a:	d306      	bcc.n	127aa <log_is_strdup+0x16>
   1279c:	f503 7310 	add.w	r3, r3, #576	; 0x240
   127a0:	4298      	cmp	r0, r3
   127a2:	bf2c      	ite	cs
   127a4:	2000      	movcs	r0, #0
   127a6:	2001      	movcc	r0, #1
   127a8:	4770      	bx	lr
   127aa:	2000      	movs	r0, #0
}
   127ac:	4770      	bx	lr
   127ae:	bf00      	nop
   127b0:	20007c38 	.word	0x20007c38

000127b4 <z_impl_log_process>:
{
   127b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   127b8:	4b49      	ldr	r3, [pc, #292]	; (128e0 <z_impl_log_process+0x12c>)
   127ba:	781b      	ldrb	r3, [r3, #0]
{
   127bc:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
   127be:	b903      	cbnz	r3, 127c2 <z_impl_log_process+0xe>
   127c0:	b1a0      	cbz	r0, 127ec <z_impl_log_process+0x38>
	msg = get_msg();
   127c2:	f7ff ff41 	bl	12648 <get_msg>
	if (msg.msg) {
   127c6:	4604      	mov	r4, r0
   127c8:	b118      	cbz	r0, 127d2 <z_impl_log_process+0x1e>
		if (!bypass) {
   127ca:	b195      	cbz	r5, 127f2 <z_impl_log_process+0x3e>
			log_msg_put(msg.msg);
   127cc:	4620      	mov	r0, r4
   127ce:	f01a fb79 	bl	2cec4 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   127d2:	b92d      	cbnz	r5, 127e0 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
   127d4:	4b43      	ldr	r3, [pc, #268]	; (128e4 <z_impl_log_process+0x130>)
	if (!bypass && z_log_dropped_pending()) {
   127d6:	681b      	ldr	r3, [r3, #0]
   127d8:	2b00      	cmp	r3, #0
   127da:	dd01      	ble.n	127e0 <z_impl_log_process+0x2c>
		dropped_notify();
   127dc:	f7ff ff84 	bl	126e8 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   127e0:	4841      	ldr	r0, [pc, #260]	; (128e8 <z_impl_log_process+0x134>)
   127e2:	f01a fa64 	bl	2ccae <log_list_head_peek>
   127e6:	1e05      	subs	r5, r0, #0
   127e8:	bf18      	it	ne
   127ea:	2501      	movne	r5, #1
}
   127ec:	4628      	mov	r0, r5
   127ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   127f2:	4b3e      	ldr	r3, [pc, #248]	; (128ec <z_impl_log_process+0x138>)
   127f4:	f3bf 8f5b 	dmb	ish
   127f8:	e853 2f00 	ldrex	r2, [r3]
   127fc:	3a01      	subs	r2, #1
   127fe:	e843 2100 	strex	r1, r2, [r3]
   12802:	2900      	cmp	r1, #0
   12804:	d1f8      	bne.n	127f8 <z_impl_log_process+0x44>
   12806:	f3bf 8f5b 	dmb	ish
		    !panic_mode) {
   1280a:	4b39      	ldr	r3, [pc, #228]	; (128f0 <z_impl_log_process+0x13c>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   1280c:	781b      	ldrb	r3, [r3, #0]
   1280e:	b993      	cbnz	r3, 12836 <z_impl_log_process+0x82>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12810:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
   12812:	07db      	lsls	r3, r3, #31
   12814:	d40f      	bmi.n	12836 <z_impl_log_process+0x82>
	msg_str = log_msg_str_get(msg);
   12816:	f01a fb68 	bl	2ceea <log_msg_str_get>
   1281a:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1281c:	4620      	mov	r0, r4
   1281e:	f01a fb2f 	bl	2ce80 <log_msg_nargs_get>
   12822:	4601      	mov	r1, r0
   12824:	4640      	mov	r0, r8
   12826:	f7ff fe6d 	bl	12504 <z_log_get_s_mask>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1282a:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 12910 <z_impl_log_process+0x15c>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   1282e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 12914 <z_impl_log_process+0x160>
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   12832:	4606      	mov	r6, r0
	while (mask) {
   12834:	b936      	cbnz	r6, 12844 <z_impl_log_process+0x90>
	return __log_backends_end - __log_backends_start;
   12836:	4e2f      	ldr	r6, [pc, #188]	; (128f4 <z_impl_log_process+0x140>)
   12838:	4b2f      	ldr	r3, [pc, #188]	; (128f8 <z_impl_log_process+0x144>)
   1283a:	1b9b      	subs	r3, r3, r6
   1283c:	ea4f 1823 	mov.w	r8, r3, asr #4
   12840:	2700      	movs	r7, #0
   12842:	e049      	b.n	128d8 <z_impl_log_process+0x124>
		idx = 31 - __builtin_clz(mask);
   12844:	fab6 f786 	clz	r7, r6
   12848:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   1284c:	4639      	mov	r1, r7
   1284e:	4620      	mov	r0, r4
   12850:	f01a fb19 	bl	2ce86 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   12854:	4b29      	ldr	r3, [pc, #164]	; (128fc <z_impl_log_process+0x148>)
   12856:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   12858:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   1285a:	d302      	bcc.n	12862 <z_impl_log_process+0xae>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   1285c:	4b28      	ldr	r3, [pc, #160]	; (12900 <z_impl_log_process+0x14c>)
   1285e:	4298      	cmp	r0, r3
   12860:	d31b      	bcc.n	1289a <z_impl_log_process+0xe6>
   12862:	4610      	mov	r0, r2
   12864:	f7ff ff96 	bl	12794 <log_is_strdup>
   12868:	b9b8      	cbnz	r0, 1289a <z_impl_log_process+0xe6>
   1286a:	455a      	cmp	r2, fp
   1286c:	d015      	beq.n	1289a <z_impl_log_process+0xe6>
	return msg->hdr.ids.source_id;
   1286e:	8961      	ldrh	r1, [r4, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   12870:	f3c1 1189 	ubfx	r1, r1, #6, #10
   12874:	f000 f962 	bl	12b3c <log_source_name_get>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   12878:	4922      	ldr	r1, [pc, #136]	; (12904 <z_impl_log_process+0x150>)
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   1287a:	4681      	mov	r9, r0
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   1287c:	23d8      	movs	r3, #216	; 0xd8
   1287e:	4822      	ldr	r0, [pc, #136]	; (12908 <z_impl_log_process+0x154>)
   12880:	4652      	mov	r2, sl
   12882:	f019 fe8a 	bl	2c59a <printk>
   12886:	4821      	ldr	r0, [pc, #132]	; (1290c <z_impl_log_process+0x158>)
   12888:	4639      	mov	r1, r7
   1288a:	4643      	mov	r3, r8
   1288c:	464a      	mov	r2, r9
   1288e:	f019 fe84 	bl	2c59a <printk>
   12892:	21d8      	movs	r1, #216	; 0xd8
   12894:	4650      	mov	r0, sl
   12896:	f01a f8c1 	bl	2ca1c <assert_post_action>
		mask &= ~BIT(idx);
   1289a:	2301      	movs	r3, #1
   1289c:	fa03 f707 	lsl.w	r7, r3, r7
   128a0:	ea26 0607 	bic.w	r6, r6, r7
   128a4:	e7c6      	b.n	12834 <z_impl_log_process+0x80>
			if (log_backend_is_active(backend) &&
   128a6:	4630      	mov	r0, r6
   128a8:	f01a fa09 	bl	2ccbe <log_backend_is_active>
   128ac:	b190      	cbz	r0, 128d4 <z_impl_log_process+0x120>
	return msg->hdr.ids.level;
   128ae:	7aa1      	ldrb	r1, [r4, #10]
	return msg->hdr.ids.source_id;
   128b0:	8962      	ldrh	r2, [r4, #10]
	return msg->hdr.ids.level;
   128b2:	f001 0907 	and.w	r9, r1, #7
	backend_level = log_filter_get(backend, domain_id,
   128b6:	2301      	movs	r3, #1
   128b8:	f3c2 1289 	ubfx	r2, r2, #6, #10
   128bc:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   128c0:	4630      	mov	r0, r6
   128c2:	f000 f949 	bl	12b58 <log_filter_get>
			if (log_backend_is_active(backend) &&
   128c6:	4581      	cmp	r9, r0
   128c8:	d804      	bhi.n	128d4 <z_impl_log_process+0x120>
	backend->api->put(backend, msg);
   128ca:	6833      	ldr	r3, [r6, #0]
   128cc:	4621      	mov	r1, r4
   128ce:	685b      	ldr	r3, [r3, #4]
   128d0:	4630      	mov	r0, r6
   128d2:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   128d4:	3701      	adds	r7, #1
   128d6:	3610      	adds	r6, #16
   128d8:	4547      	cmp	r7, r8
   128da:	dbe4      	blt.n	128a6 <z_impl_log_process+0xf2>
   128dc:	e776      	b.n	127cc <z_impl_log_process+0x18>
   128de:	bf00      	nop
   128e0:	20003920 	.word	0x20003920
   128e4:	2000234c 	.word	0x2000234c
   128e8:	20002354 	.word	0x20002354
   128ec:	20002348 	.word	0x20002348
   128f0:	20003921 	.word	0x20003921
   128f4:	00030ca4 	.word	0x00030ca4
   128f8:	00030cb4 	.word	0x00030cb4
   128fc:	000308f0 	.word	0x000308f0
   12900:	00038250 	.word	0x00038250
   12904:	000380f0 	.word	0x000380f0
   12908:	00032486 	.word	0x00032486
   1290c:	00032867 	.word	0x00032867
   12910:	0003284d 	.word	0x0003284d
   12914:	000327e4 	.word	0x000327e4

00012918 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   12918:	4b28      	ldr	r3, [pc, #160]	; (129bc <msg_finalize+0xa4>)
{
   1291a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   1291c:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   1291e:	8141      	strh	r1, [r0, #10]
{
   12920:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   12922:	4798      	blx	r3
   12924:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   12926:	f04f 0340 	mov.w	r3, #64	; 0x40
   1292a:	f3ef 8511 	mrs	r5, BASEPRI
   1292e:	f383 8812 	msr	BASEPRI_MAX, r3
   12932:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   12936:	4822      	ldr	r0, [pc, #136]	; (129c0 <msg_finalize+0xa8>)
   12938:	4621      	mov	r1, r4
   1293a:	f01a f9ae 	bl	2cc9a <log_list_add_tail>
	__asm__ volatile(
   1293e:	f385 8811 	msr	BASEPRI, r5
   12942:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   12946:	f3bf 8f5b 	dmb	ish
   1294a:	4b1e      	ldr	r3, [pc, #120]	; (129c4 <msg_finalize+0xac>)
   1294c:	e853 2f00 	ldrex	r2, [r3]
   12950:	1c51      	adds	r1, r2, #1
   12952:	e843 1000 	strex	r0, r1, [r3]
   12956:	2800      	cmp	r0, #0
   12958:	d1f8      	bne.n	1294c <msg_finalize+0x34>
   1295a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   1295e:	4b1a      	ldr	r3, [pc, #104]	; (129c8 <msg_finalize+0xb0>)
   12960:	781b      	ldrb	r3, [r3, #0]
   12962:	b183      	cbz	r3, 12986 <msg_finalize+0x6e>
	__asm__ volatile(
   12964:	f04f 0340 	mov.w	r3, #64	; 0x40
   12968:	f3ef 8411 	mrs	r4, BASEPRI
   1296c:	f383 8812 	msr	BASEPRI_MAX, r3
   12970:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   12974:	2000      	movs	r0, #0
   12976:	f7ff ff1d 	bl	127b4 <z_impl_log_process>
	__asm__ volatile(
   1297a:	f384 8811 	msr	BASEPRI, r4
   1297e:	f3bf 8f6f 	isb	sy
}
   12982:	b003      	add	sp, #12
   12984:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && cnt == 0) {
   12986:	4b11      	ldr	r3, [pc, #68]	; (129cc <msg_finalize+0xb4>)
   12988:	681b      	ldr	r3, [r3, #0]
   1298a:	2b00      	cmp	r3, #0
   1298c:	d0f9      	beq.n	12982 <msg_finalize+0x6a>
   1298e:	b952      	cbnz	r2, 129a6 <msg_finalize+0x8e>
	z_impl_k_timer_start(timer, duration, period);
   12990:	2200      	movs	r2, #0
   12992:	2300      	movs	r3, #0
   12994:	e9cd 2300 	strd	r2, r3, [sp]
   12998:	480d      	ldr	r0, [pc, #52]	; (129d0 <msg_finalize+0xb8>)
   1299a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   1299e:	2300      	movs	r3, #0
   129a0:	f015 ff40 	bl	28824 <z_impl_k_timer_start>
   129a4:	e7ed      	b.n	12982 <msg_finalize+0x6a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   129a6:	2a0a      	cmp	r2, #10
   129a8:	d1eb      	bne.n	12982 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   129aa:	4809      	ldr	r0, [pc, #36]	; (129d0 <msg_finalize+0xb8>)
   129ac:	f01d fd91 	bl	304d2 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   129b0:	4808      	ldr	r0, [pc, #32]	; (129d4 <msg_finalize+0xbc>)
}
   129b2:	b003      	add	sp, #12
   129b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   129b8:	f013 ba1e 	b.w	25df8 <z_impl_k_sem_give>
   129bc:	20000428 	.word	0x20000428
   129c0:	20002354 	.word	0x20002354
   129c4:	20002348 	.word	0x20002348
   129c8:	20003921 	.word	0x20003921
   129cc:	2000237c 	.word	0x2000237c
   129d0:	200017e0 	.word	0x200017e0
   129d4:	20000930 	.word	0x20000930

000129d8 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   129d8:	4b16      	ldr	r3, [pc, #88]	; (12a34 <log_process_thread_func+0x5c>)
   129da:	4a17      	ldr	r2, [pc, #92]	; (12a38 <log_process_thread_func+0x60>)
   129dc:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   129de:	2b00      	cmp	r3, #0
{
   129e0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   129e2:	dc0b      	bgt.n	129fc <log_process_thread_func+0x24>
   129e4:	4915      	ldr	r1, [pc, #84]	; (12a3c <log_process_thread_func+0x64>)
   129e6:	4816      	ldr	r0, [pc, #88]	; (12a40 <log_process_thread_func+0x68>)
   129e8:	4a16      	ldr	r2, [pc, #88]	; (12a44 <log_process_thread_func+0x6c>)
   129ea:	f240 43f1 	movw	r3, #1265	; 0x4f1
   129ee:	f019 fdd4 	bl	2c59a <printk>
   129f2:	4814      	ldr	r0, [pc, #80]	; (12a44 <log_process_thread_func+0x6c>)
   129f4:	f240 41f1 	movw	r1, #1265	; 0x4f1
   129f8:	f01a f810 	bl	2ca1c <assert_post_action>
	log_init();
   129fc:	f7ff fde2 	bl	125c4 <log_init>
	return z_impl_z_current_get();
   12a00:	f015 f8ea 	bl	27bd8 <z_impl_z_current_get>
	proc_tid = process_tid;
   12a04:	4b10      	ldr	r3, [pc, #64]	; (12a48 <log_process_thread_func+0x70>)
   12a06:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   12a08:	b130      	cbz	r0, 12a18 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   12a0a:	4b10      	ldr	r3, [pc, #64]	; (12a4c <log_process_thread_func+0x74>)
	    process_tid &&
   12a0c:	681b      	ldr	r3, [r3, #0]
   12a0e:	2b09      	cmp	r3, #9
   12a10:	dd02      	ble.n	12a18 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   12a12:	480f      	ldr	r0, [pc, #60]	; (12a50 <log_process_thread_func+0x78>)
   12a14:	f013 f9f0 	bl	25df8 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   12a18:	4c0d      	ldr	r4, [pc, #52]	; (12a50 <log_process_thread_func+0x78>)
   12a1a:	2000      	movs	r0, #0
   12a1c:	f7ff feca 	bl	127b4 <z_impl_log_process>
		if (log_process(false) == false) {
   12a20:	2800      	cmp	r0, #0
   12a22:	d1fa      	bne.n	12a1a <log_process_thread_func+0x42>
   12a24:	f04f 32ff 	mov.w	r2, #4294967295
   12a28:	f04f 33ff 	mov.w	r3, #4294967295
   12a2c:	4620      	mov	r0, r4
   12a2e:	f013 fa27 	bl	25e80 <z_impl_k_sem_take>
   12a32:	e7f2      	b.n	12a1a <log_process_thread_func+0x42>
   12a34:	00030cb4 	.word	0x00030cb4
   12a38:	00030ca4 	.word	0x00030ca4
   12a3c:	000328a9 	.word	0x000328a9
   12a40:	00032486 	.word	0x00032486
   12a44:	000327e4 	.word	0x000327e4
   12a48:	2000237c 	.word	0x2000237c
   12a4c:	20002348 	.word	0x20002348
   12a50:	20000930 	.word	0x20000930

00012a54 <z_impl_log_panic>:
{
   12a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   12a56:	4f0f      	ldr	r7, [pc, #60]	; (12a94 <z_impl_log_panic+0x40>)
   12a58:	783d      	ldrb	r5, [r7, #0]
   12a5a:	b975      	cbnz	r5, 12a7a <z_impl_log_panic+0x26>
   12a5c:	4c0e      	ldr	r4, [pc, #56]	; (12a98 <z_impl_log_panic+0x44>)
   12a5e:	4e0f      	ldr	r6, [pc, #60]	; (12a9c <z_impl_log_panic+0x48>)
	log_init();
   12a60:	f7ff fdb0 	bl	125c4 <log_init>
   12a64:	1b36      	subs	r6, r6, r4
   12a66:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   12a68:	42b5      	cmp	r5, r6
   12a6a:	db07      	blt.n	12a7c <z_impl_log_panic+0x28>
   12a6c:	2000      	movs	r0, #0
   12a6e:	f7ff fea1 	bl	127b4 <z_impl_log_process>
		while (log_process(false) == true) {
   12a72:	2800      	cmp	r0, #0
   12a74:	d1fa      	bne.n	12a6c <z_impl_log_panic+0x18>
	panic_mode = true;
   12a76:	2301      	movs	r3, #1
   12a78:	703b      	strb	r3, [r7, #0]
}
   12a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   12a7c:	4620      	mov	r0, r4
   12a7e:	f01a f91e 	bl	2ccbe <log_backend_is_active>
   12a82:	b118      	cbz	r0, 12a8c <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   12a84:	6823      	ldr	r3, [r4, #0]
   12a86:	4620      	mov	r0, r4
   12a88:	695b      	ldr	r3, [r3, #20]
   12a8a:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   12a8c:	3501      	adds	r5, #1
   12a8e:	3410      	adds	r4, #16
   12a90:	e7ea      	b.n	12a68 <z_impl_log_panic+0x14>
   12a92:	bf00      	nop
   12a94:	20003921 	.word	0x20003921
   12a98:	00030ca4 	.word	0x00030ca4
   12a9c:	00030cb4 	.word	0x00030cb4

00012aa0 <z_log_free>:
{
   12aa0:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   12aa2:	3804      	subs	r0, #4
   12aa4:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   12aa6:	f3bf 8f5b 	dmb	ish
   12aaa:	e850 3f00 	ldrex	r3, [r0]
   12aae:	1e5a      	subs	r2, r3, #1
   12ab0:	e840 2100 	strex	r1, r2, [r0]
   12ab4:	2900      	cmp	r1, #0
   12ab6:	d1f8      	bne.n	12aaa <z_log_free+0xa>
   12ab8:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   12abc:	2b01      	cmp	r3, #1
   12abe:	d103      	bne.n	12ac8 <z_log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   12ac0:	4803      	ldr	r0, [pc, #12]	; (12ad0 <z_log_free+0x30>)
   12ac2:	a901      	add	r1, sp, #4
   12ac4:	f012 f944 	bl	24d50 <k_mem_slab_free>
}
   12ac8:	b003      	add	sp, #12
   12aca:	f85d fb04 	ldr.w	pc, [sp], #4
   12ace:	bf00      	nop
   12ad0:	2000235c 	.word	0x2000235c

00012ad4 <log_backend_id_get>:
{
   12ad4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   12ad6:	4604      	mov	r4, r0
   12ad8:	b948      	cbnz	r0, 12aee <log_backend_id_get+0x1a>
   12ada:	4906      	ldr	r1, [pc, #24]	; (12af4 <log_backend_id_get+0x20>)
   12adc:	4806      	ldr	r0, [pc, #24]	; (12af8 <log_backend_id_get+0x24>)
   12ade:	4a07      	ldr	r2, [pc, #28]	; (12afc <log_backend_id_get+0x28>)
   12ae0:	23df      	movs	r3, #223	; 0xdf
   12ae2:	f019 fd5a 	bl	2c59a <printk>
   12ae6:	4805      	ldr	r0, [pc, #20]	; (12afc <log_backend_id_get+0x28>)
   12ae8:	21df      	movs	r1, #223	; 0xdf
   12aea:	f019 ff97 	bl	2ca1c <assert_post_action>
	return backend->cb->id;
   12aee:	6863      	ldr	r3, [r4, #4]
}
   12af0:	7918      	ldrb	r0, [r3, #4]
   12af2:	bd10      	pop	{r4, pc}
   12af4:	000328fa 	.word	0x000328fa
   12af8:	00032486 	.word	0x00032486
   12afc:	000328c9 	.word	0x000328c9

00012b00 <z_log_runtime_filters_init>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   12b00:	480b      	ldr	r0, [pc, #44]	; (12b30 <z_log_runtime_filters_init+0x30>)
   12b02:	4b0c      	ldr	r3, [pc, #48]	; (12b34 <z_log_runtime_filters_init+0x34>)
{
	return __log_const_start[source_id].level;
}

void z_log_runtime_filters_init(void)
{
   12b04:	b530      	push	{r4, r5, lr}
   12b06:	1a1b      	subs	r3, r3, r0
   12b08:	4c0b      	ldr	r4, [pc, #44]	; (12b38 <z_log_runtime_filters_init+0x38>)
   12b0a:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
   12b0c:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
   12b0e:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
   12b10:	4299      	cmp	r1, r3
   12b12:	d100      	bne.n	12b16 <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
   12b14:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
   12b16:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
   12b1a:	6825      	ldr	r5, [r4, #0]
   12b1c:	f002 0207 	and.w	r2, r2, #7
   12b20:	f025 0507 	bic.w	r5, r5, #7
   12b24:	432a      	orrs	r2, r5
   12b26:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
   12b2a:	3101      	adds	r1, #1
   12b2c:	e7f0      	b.n	12b10 <z_log_runtime_filters_init+0x10>
   12b2e:	bf00      	nop
   12b30:	00030bd4 	.word	0x00030bd4
   12b34:	00030ca4 	.word	0x00030ca4
   12b38:	200007a8 	.word	0x200007a8

00012b3c <log_source_name_get>:
   12b3c:	4a04      	ldr	r2, [pc, #16]	; (12b50 <log_source_name_get+0x14>)
   12b3e:	4b05      	ldr	r3, [pc, #20]	; (12b54 <log_source_name_get+0x18>)
   12b40:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   12b42:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   12b46:	bf34      	ite	cc
   12b48:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   12b4c:	2000      	movcs	r0, #0
}
   12b4e:	4770      	bx	lr
   12b50:	00030bd4 	.word	0x00030bd4
   12b54:	00030ca4 	.word	0x00030ca4

00012b58 <log_filter_get>:
	backend_filter_set(backend, LOG_LEVEL_NONE);
}

uint32_t log_filter_get(struct log_backend const *const backend,
			uint32_t domain_id, int16_t source_id, bool runtime)
{
   12b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12b5a:	4615      	mov	r5, r2
   12b5c:	4c14      	ldr	r4, [pc, #80]	; (12bb0 <log_filter_get+0x58>)
   12b5e:	4a15      	ldr	r2, [pc, #84]	; (12bb4 <log_filter_get+0x5c>)
   12b60:	1b12      	subs	r2, r2, r4
	__ASSERT_NO_MSG(source_id < (int16_t)z_log_sources_count());
   12b62:	f342 02cf 	sbfx	r2, r2, #3, #16
   12b66:	42aa      	cmp	r2, r5
{
   12b68:	4606      	mov	r6, r0
   12b6a:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(source_id < (int16_t)z_log_sources_count());
   12b6c:	dc09      	bgt.n	12b82 <log_filter_get+0x2a>
   12b6e:	4912      	ldr	r1, [pc, #72]	; (12bb8 <log_filter_get+0x60>)
   12b70:	4812      	ldr	r0, [pc, #72]	; (12bbc <log_filter_get+0x64>)
   12b72:	4a13      	ldr	r2, [pc, #76]	; (12bc0 <log_filter_get+0x68>)
   12b74:	23bc      	movs	r3, #188	; 0xbc
   12b76:	f019 fd10 	bl	2c59a <printk>
   12b7a:	4811      	ldr	r0, [pc, #68]	; (12bc0 <log_filter_get+0x68>)
   12b7c:	21bc      	movs	r1, #188	; 0xbc
   12b7e:	f019 ff4d 	bl	2ca1c <assert_post_action>

	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
   12b82:	b17f      	cbz	r7, 12ba4 <log_filter_get+0x4c>
		if (source_id < 0) {
   12b84:	2d00      	cmp	r5, #0
   12b86:	db11      	blt.n	12bac <log_filter_get+0x54>
			return LOG_LEVEL_DBG;
		}

		uint32_t *filters = z_log_dynamic_filters_get(source_id);

		return LOG_FILTER_SLOT_GET(filters,
   12b88:	4b0e      	ldr	r3, [pc, #56]	; (12bc4 <log_filter_get+0x6c>)
   12b8a:	4630      	mov	r0, r6
   12b8c:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
   12b90:	f7ff ffa0 	bl	12ad4 <log_backend_id_get>
   12b94:	b200      	sxth	r0, r0
   12b96:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   12b9a:	fa24 f000 	lsr.w	r0, r4, r0
   12b9e:	f000 0007 	and.w	r0, r0, #7
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
}
   12ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __log_const_start[source_id].level;
   12ba4:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
	return log_compiled_level_get(source_id);
   12ba8:	7908      	ldrb	r0, [r1, #4]
   12baa:	e7fa      	b.n	12ba2 <log_filter_get+0x4a>
			return LOG_LEVEL_DBG;
   12bac:	2004      	movs	r0, #4
   12bae:	e7f8      	b.n	12ba2 <log_filter_get+0x4a>
   12bb0:	00030bd4 	.word	0x00030bd4
   12bb4:	00030ca4 	.word	0x00030ca4
   12bb8:	0003293e 	.word	0x0003293e
   12bbc:	00032486 	.word	0x00032486
   12bc0:	00032911 	.word	0x00032911
   12bc4:	200007a8 	.word	0x200007a8

00012bc8 <z_impl_log_filter_set>:
{
   12bc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12bcc:	4615      	mov	r5, r2
   12bce:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(source_id < (int16_t)z_log_sources_count());
   12bd0:	4a31      	ldr	r2, [pc, #196]	; (12c98 <z_impl_log_filter_set+0xd0>)
   12bd2:	4b32      	ldr	r3, [pc, #200]	; (12c9c <z_impl_log_filter_set+0xd4>)
   12bd4:	1ad2      	subs	r2, r2, r3
   12bd6:	f342 02cf 	sbfx	r2, r2, #3, #16
   12bda:	42aa      	cmp	r2, r5
{
   12bdc:	4604      	mov	r4, r0
   12bde:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(source_id < (int16_t)z_log_sources_count());
   12be0:	dc09      	bgt.n	12bf6 <z_impl_log_filter_set+0x2e>
   12be2:	492f      	ldr	r1, [pc, #188]	; (12ca0 <z_impl_log_filter_set+0xd8>)
   12be4:	482f      	ldr	r0, [pc, #188]	; (12ca4 <z_impl_log_filter_set+0xdc>)
   12be6:	4a30      	ldr	r2, [pc, #192]	; (12ca8 <z_impl_log_filter_set+0xe0>)
   12be8:	2357      	movs	r3, #87	; 0x57
   12bea:	f019 fcd6 	bl	2c59a <printk>
   12bee:	482e      	ldr	r0, [pc, #184]	; (12ca8 <z_impl_log_filter_set+0xe0>)
   12bf0:	2157      	movs	r1, #87	; 0x57
   12bf2:	f019 ff13 	bl	2ca1c <assert_post_action>
		if (backend == NULL) {
   12bf6:	b9b4      	cbnz	r4, 12c26 <z_impl_log_filter_set+0x5e>
	return __log_backends_end - __log_backends_start;
   12bf8:	4b2c      	ldr	r3, [pc, #176]	; (12cac <z_impl_log_filter_set+0xe4>)
   12bfa:	4f2d      	ldr	r7, [pc, #180]	; (12cb0 <z_impl_log_filter_set+0xe8>)
   12bfc:	1aff      	subs	r7, r7, r3
   12bfe:	113f      	asrs	r7, r7, #4
			uint32_t max = 0U;
   12c00:	4626      	mov	r6, r4
   12c02:	469a      	mov	sl, r3
			for (int i = 0; i < log_backend_count_get(); i++) {
   12c04:	42bc      	cmp	r4, r7
   12c06:	db02      	blt.n	12c0e <z_impl_log_filter_set+0x46>
}
   12c08:	4630      	mov	r0, r6
   12c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   12c0e:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
   12c12:	4643      	mov	r3, r8
   12c14:	462a      	mov	r2, r5
   12c16:	4649      	mov	r1, r9
   12c18:	f7ff ffd6 	bl	12bc8 <z_impl_log_filter_set>
				max = MAX(current, max);
   12c1c:	4286      	cmp	r6, r0
   12c1e:	bf38      	it	cc
   12c20:	4606      	movcc	r6, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
   12c22:	3401      	adds	r4, #1
   12c24:	e7ee      	b.n	12c04 <z_impl_log_filter_set+0x3c>
			uint32_t max = log_filter_get(backend, domain_id,
   12c26:	462a      	mov	r2, r5
   12c28:	4649      	mov	r1, r9
   12c2a:	2300      	movs	r3, #0
   12c2c:	4620      	mov	r0, r4
   12c2e:	f7ff ff93 	bl	12b58 <log_filter_get>
			level = MIN(level, max);
   12c32:	4540      	cmp	r0, r8
   12c34:	bf28      	it	cs
   12c36:	4640      	movcs	r0, r8
   12c38:	4606      	mov	r6, r0
			LOG_FILTER_SLOT_SET(filters,
   12c3a:	4620      	mov	r0, r4
   12c3c:	f7ff ff4a 	bl	12ad4 <log_backend_id_get>
   12c40:	4f1c      	ldr	r7, [pc, #112]	; (12cb4 <z_impl_log_filter_set+0xec>)
   12c42:	b200      	sxth	r0, r0
   12c44:	2307      	movs	r3, #7
   12c46:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   12c4a:	fa03 f000 	lsl.w	r0, r3, r0
   12c4e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   12c52:	ea23 0300 	bic.w	r3, r3, r0
   12c56:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
   12c5a:	4620      	mov	r0, r4
   12c5c:	f7ff ff3a 	bl	12ad4 <log_backend_id_get>
   12c60:	b200      	sxth	r0, r0
   12c62:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   12c66:	f006 0307 	and.w	r3, r6, #7
   12c6a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   12c6e:	4083      	lsls	r3, r0
   12c70:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
   12c72:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
   12c74:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
   12c76:	fa23 f002 	lsr.w	r0, r3, r2
   12c7a:	f000 0007 	and.w	r0, r0, #7
   12c7e:	4281      	cmp	r1, r0
   12c80:	f102 0203 	add.w	r2, r2, #3
   12c84:	bf38      	it	cc
   12c86:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
   12c88:	2a1e      	cmp	r2, #30
   12c8a:	d1f4      	bne.n	12c76 <z_impl_log_filter_set+0xae>
			LOG_FILTER_SLOT_SET(filters,
   12c8c:	f023 0307 	bic.w	r3, r3, #7
   12c90:	430b      	orrs	r3, r1
   12c92:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
	return level;
   12c96:	e7b7      	b.n	12c08 <z_impl_log_filter_set+0x40>
   12c98:	00030ca4 	.word	0x00030ca4
   12c9c:	00030bd4 	.word	0x00030bd4
   12ca0:	0003293e 	.word	0x0003293e
   12ca4:	00032486 	.word	0x00032486
   12ca8:	00032911 	.word	0x00032911
   12cac:	00030ca4 	.word	0x00030ca4
   12cb0:	00030cb4 	.word	0x00030cb4
   12cb4:	200007a8 	.word	0x200007a8

00012cb8 <backend_filter_set>:
{
   12cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12cba:	4c09      	ldr	r4, [pc, #36]	; (12ce0 <backend_filter_set+0x28>)
   12cbc:	4b09      	ldr	r3, [pc, #36]	; (12ce4 <backend_filter_set+0x2c>)
   12cbe:	1ae4      	subs	r4, r4, r3
   12cc0:	4606      	mov	r6, r0
   12cc2:	460f      	mov	r7, r1
   12cc4:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < z_log_sources_count(); i++) {
   12cc6:	2500      	movs	r5, #0
   12cc8:	42a5      	cmp	r5, r4
   12cca:	d100      	bne.n	12cce <backend_filter_set+0x16>
}
   12ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12cce:	2100      	movs	r1, #0
   12cd0:	b22a      	sxth	r2, r5
   12cd2:	463b      	mov	r3, r7
   12cd4:	4630      	mov	r0, r6
   12cd6:	f7ff ff77 	bl	12bc8 <z_impl_log_filter_set>
		for (int i = 0; i < z_log_sources_count(); i++) {
   12cda:	3501      	adds	r5, #1
   12cdc:	e7f4      	b.n	12cc8 <backend_filter_set+0x10>
   12cde:	bf00      	nop
   12ce0:	00030ca4 	.word	0x00030ca4
   12ce4:	00030bd4 	.word	0x00030bd4

00012ce8 <log_backend_enable>:
{
   12ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	id += backend - log_backend_get(0);
   12cea:	4c10      	ldr	r4, [pc, #64]	; (12d2c <log_backend_enable+0x44>)
   12cec:	1b04      	subs	r4, r0, r4
   12cee:	1124      	asrs	r4, r4, #4
   12cf0:	3401      	adds	r4, #1
{
   12cf2:	4605      	mov	r5, r0
   12cf4:	460e      	mov	r6, r1
   12cf6:	4617      	mov	r7, r2
	log_backend_id_set(backend, id);
   12cf8:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   12cfa:	b948      	cbnz	r0, 12d10 <log_backend_enable+0x28>
   12cfc:	490c      	ldr	r1, [pc, #48]	; (12d30 <log_backend_enable+0x48>)
   12cfe:	480d      	ldr	r0, [pc, #52]	; (12d34 <log_backend_enable+0x4c>)
   12d00:	4a0d      	ldr	r2, [pc, #52]	; (12d38 <log_backend_enable+0x50>)
   12d02:	23d1      	movs	r3, #209	; 0xd1
   12d04:	f019 fc49 	bl	2c59a <printk>
   12d08:	480b      	ldr	r0, [pc, #44]	; (12d38 <log_backend_enable+0x50>)
   12d0a:	21d1      	movs	r1, #209	; 0xd1
   12d0c:	f019 fe86 	bl	2ca1c <assert_post_action>
	backend->cb->id = id;
   12d10:	686b      	ldr	r3, [r5, #4]
	backend_filter_set(backend, level);
   12d12:	4639      	mov	r1, r7
   12d14:	711c      	strb	r4, [r3, #4]
   12d16:	4628      	mov	r0, r5
   12d18:	f7ff ffce 	bl	12cb8 <backend_filter_set>
 */
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
   12d1c:	686b      	ldr	r3, [r5, #4]
	backend->cb->active = true;
   12d1e:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   12d20:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   12d22:	715a      	strb	r2, [r3, #5]
}
   12d24:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_log_notify_backend_enabled();
   12d28:	f7ff bca2 	b.w	12670 <z_log_notify_backend_enabled>
   12d2c:	00030ca4 	.word	0x00030ca4
   12d30:	000328fa 	.word	0x000328fa
   12d34:	00032486 	.word	0x00032486
   12d38:	000328c9 	.word	0x000328c9

00012d3c <log_backend_disable>:
{
   12d3c:	b510      	push	{r4, lr}
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_deactivate(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   12d3e:	4604      	mov	r4, r0
   12d40:	b958      	cbnz	r0, 12d5a <log_backend_disable+0x1e>
   12d42:	490a      	ldr	r1, [pc, #40]	; (12d6c <log_backend_disable+0x30>)
   12d44:	480a      	ldr	r0, [pc, #40]	; (12d70 <log_backend_disable+0x34>)
   12d46:	4a0b      	ldr	r2, [pc, #44]	; (12d74 <log_backend_disable+0x38>)
   12d48:	f240 130f 	movw	r3, #271	; 0x10f
   12d4c:	f019 fc25 	bl	2c59a <printk>
   12d50:	4808      	ldr	r0, [pc, #32]	; (12d74 <log_backend_disable+0x38>)
   12d52:	f240 110f 	movw	r1, #271	; 0x10f
   12d56:	f019 fe61 	bl	2ca1c <assert_post_action>
	backend->cb->active = false;
   12d5a:	6863      	ldr	r3, [r4, #4]
   12d5c:	2100      	movs	r1, #0
	backend_filter_set(backend, LOG_LEVEL_NONE);
   12d5e:	4620      	mov	r0, r4
   12d60:	7159      	strb	r1, [r3, #5]
}
   12d62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	backend_filter_set(backend, LOG_LEVEL_NONE);
   12d66:	f7ff bfa7 	b.w	12cb8 <backend_filter_set>
   12d6a:	bf00      	nop
   12d6c:	000328fa 	.word	0x000328fa
   12d70:	00032486 	.word	0x00032486
   12d74:	000328c9 	.word	0x000328c9

00012d78 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   12d78:	2320      	movs	r3, #32
   12d7a:	4902      	ldr	r1, [pc, #8]	; (12d84 <log_msg_pool_init+0xc>)
   12d7c:	4802      	ldr	r0, [pc, #8]	; (12d88 <log_msg_pool_init+0x10>)
   12d7e:	461a      	mov	r2, r3
   12d80:	f01d ba54 	b.w	3022c <k_mem_slab_init>
   12d84:	20007e78 	.word	0x20007e78
   12d88:	20002380 	.word	0x20002380

00012d8c <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   12d8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   12d8e:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   12d90:	4d09      	ldr	r5, [pc, #36]	; (12db8 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   12d92:	9301      	str	r3, [sp, #4]
	return z_impl_log_process(bypass);
   12d94:	2001      	movs	r0, #1
   12d96:	f7ff fd0d 	bl	127b4 <z_impl_log_process>
   12d9a:	4604      	mov	r4, r0
			z_log_dropped();
   12d9c:	f7ff fc76 	bl	1268c <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   12da0:	2200      	movs	r2, #0
   12da2:	2300      	movs	r3, #0
   12da4:	a901      	add	r1, sp, #4
   12da6:	4628      	mov	r0, r5
   12da8:	f011 ff66 	bl	24c78 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   12dac:	b108      	cbz	r0, 12db2 <log_msg_no_space_handle+0x26>
   12dae:	2c00      	cmp	r4, #0
   12db0:	d1f0      	bne.n	12d94 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   12db2:	9801      	ldr	r0, [sp, #4]
   12db4:	b003      	add	sp, #12
   12db6:	bd30      	pop	{r4, r5, pc}
   12db8:	20002380 	.word	0x20002380

00012dbc <log_msg_chunk_alloc>:
{
   12dbc:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   12dbe:	2300      	movs	r3, #0
   12dc0:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   12dc2:	4807      	ldr	r0, [pc, #28]	; (12de0 <log_msg_chunk_alloc+0x24>)
   12dc4:	2200      	movs	r2, #0
   12dc6:	2300      	movs	r3, #0
   12dc8:	a901      	add	r1, sp, #4
   12dca:	f011 ff55 	bl	24c78 <k_mem_slab_alloc>
	if (err != 0) {
   12dce:	b110      	cbz	r0, 12dd6 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   12dd0:	f7ff ffdc 	bl	12d8c <log_msg_no_space_handle>
   12dd4:	9001      	str	r0, [sp, #4]
}
   12dd6:	9801      	ldr	r0, [sp, #4]
   12dd8:	b003      	add	sp, #12
   12dda:	f85d fb04 	ldr.w	pc, [sp], #4
   12dde:	bf00      	nop
   12de0:	20002380 	.word	0x20002380

00012de4 <msg_free>:
{
   12de4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12de6:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   12de8:	7a45      	ldrb	r5, [r0, #9]
{
   12dea:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   12dec:	092d      	lsrs	r5, r5, #4
{
   12dee:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   12df0:	07d8      	lsls	r0, r3, #31
   12df2:	d41c      	bmi.n	12e2e <msg_free+0x4a>
   12df4:	b1dd      	cbz	r5, 12e2e <msg_free+0x4a>
		uint32_t smask = 0U;
   12df6:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   12df8:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   12dfa:	9801      	ldr	r0, [sp, #4]
   12dfc:	4631      	mov	r1, r6
   12dfe:	f01a f842 	bl	2ce86 <log_msg_arg_get>
   12e02:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   12e04:	f7ff fcc6 	bl	12794 <log_is_strdup>
   12e08:	b170      	cbz	r0, 12e28 <msg_free+0x44>
				if (smask == 0U) {
   12e0a:	b934      	cbnz	r4, 12e1a <msg_free+0x36>
					smask = z_log_get_s_mask(
   12e0c:	9b01      	ldr	r3, [sp, #4]
   12e0e:	4629      	mov	r1, r5
   12e10:	6918      	ldr	r0, [r3, #16]
   12e12:	f7ff fb77 	bl	12504 <z_log_get_s_mask>
					if (smask == 0U) {
   12e16:	4604      	mov	r4, r0
   12e18:	b148      	cbz	r0, 12e2e <msg_free+0x4a>
				if (smask & BIT(i)) {
   12e1a:	fa24 f306 	lsr.w	r3, r4, r6
   12e1e:	07d9      	lsls	r1, r3, #31
   12e20:	d502      	bpl.n	12e28 <msg_free+0x44>
					z_log_free(buf);
   12e22:	4638      	mov	r0, r7
   12e24:	f7ff fe3c 	bl	12aa0 <z_log_free>
		for (i = 0U; i < nargs; i++) {
   12e28:	3601      	adds	r6, #1
   12e2a:	42ae      	cmp	r6, r5
   12e2c:	d3e5      	bcc.n	12dfa <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   12e2e:	9b01      	ldr	r3, [sp, #4]
   12e30:	7a1a      	ldrb	r2, [r3, #8]
   12e32:	0792      	lsls	r2, r2, #30
   12e34:	d504      	bpl.n	12e40 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   12e36:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12e38:	4c08      	ldr	r4, [pc, #32]	; (12e5c <msg_free+0x78>)
   12e3a:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   12e3c:	9b03      	ldr	r3, [sp, #12]
   12e3e:	b92b      	cbnz	r3, 12e4c <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   12e40:	4806      	ldr	r0, [pc, #24]	; (12e5c <msg_free+0x78>)
   12e42:	a901      	add	r1, sp, #4
   12e44:	f011 ff84 	bl	24d50 <k_mem_slab_free>
}
   12e48:	b005      	add	sp, #20
   12e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   12e4c:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   12e4e:	a903      	add	r1, sp, #12
   12e50:	4620      	mov	r0, r4
   12e52:	f011 ff7d 	bl	24d50 <k_mem_slab_free>
		cont = next;
   12e56:	9503      	str	r5, [sp, #12]
   12e58:	e7f0      	b.n	12e3c <msg_free+0x58>
   12e5a:	bf00      	nop
   12e5c:	20002380 	.word	0x20002380

00012e60 <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   12e60:	2a0e      	cmp	r2, #14
{
   12e62:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e66:	4681      	mov	r9, r0
   12e68:	4688      	mov	r8, r1
   12e6a:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   12e6c:	d90b      	bls.n	12e86 <log_msg_create_n+0x26>
   12e6e:	492d      	ldr	r1, [pc, #180]	; (12f24 <log_msg_create_n+0xc4>)
   12e70:	482d      	ldr	r0, [pc, #180]	; (12f28 <log_msg_create_n+0xc8>)
   12e72:	4a2e      	ldr	r2, [pc, #184]	; (12f2c <log_msg_create_n+0xcc>)
   12e74:	f240 133b 	movw	r3, #315	; 0x13b
   12e78:	f019 fb8f 	bl	2c59a <printk>
   12e7c:	482b      	ldr	r0, [pc, #172]	; (12f2c <log_msg_create_n+0xcc>)
   12e7e:	f240 113b 	movw	r1, #315	; 0x13b
   12e82:	f019 fdcb 	bl	2ca1c <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   12e86:	f7ff ff99 	bl	12dbc <log_msg_chunk_alloc>

	if (msg != NULL) {
   12e8a:	4604      	mov	r4, r0
   12e8c:	b330      	cbz	r0, 12edc <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   12e8e:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   12e90:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   12e92:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   12e94:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   12e96:	8107      	strh	r7, [r0, #8]
   12e98:	d909      	bls.n	12eae <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   12e9a:	2202      	movs	r2, #2
   12e9c:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   12e9e:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   12ea2:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   12ea6:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   12ea8:	f1ba 0f00 	cmp.w	sl, #0
   12eac:	dc0e      	bgt.n	12ecc <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   12eae:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   12eb0:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   12eb4:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   12eb8:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   12eba:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   12ebc:	d818      	bhi.n	12ef0 <log_msg_create_n+0x90>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   12ebe:	00aa      	lsls	r2, r5, #2
   12ec0:	4641      	mov	r1, r8
   12ec2:	f104 0014 	add.w	r0, r4, #20
   12ec6:	f01d fb88 	bl	305da <memcpy>
	while (nargs != 0U) {
   12eca:	e007      	b.n	12edc <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   12ecc:	f7ff ff76 	bl	12dbc <log_msg_chunk_alloc>
		if (cont == NULL) {
   12ed0:	4606      	mov	r6, r0
   12ed2:	b930      	cbnz	r0, 12ee2 <log_msg_create_n+0x82>
			msg_free(msg);
   12ed4:	4620      	mov	r0, r4
   12ed6:	f7ff ff85 	bl	12de4 <msg_free>
			return NULL;
   12eda:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   12edc:	4620      	mov	r0, r4
   12ede:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   12ee2:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   12ee6:	f1aa 0a07 	sub.w	sl, sl, #7
   12eea:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   12eec:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   12eee:	e7db      	b.n	12ea8 <log_msg_create_n+0x48>
   12ef0:	f8d8 3000 	ldr.w	r3, [r8]
   12ef4:	61a3      	str	r3, [r4, #24]
   12ef6:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
   12efa:	6967      	ldr	r7, [r4, #20]
   12efc:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   12efe:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   12f00:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   12f04:	2d07      	cmp	r5, #7
   12f06:	462e      	mov	r6, r5
   12f08:	bf28      	it	cs
   12f0a:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   12f0c:	ea4f 0986 	mov.w	r9, r6, lsl #2
   12f10:	4641      	mov	r1, r8
   12f12:	1d38      	adds	r0, r7, #4
   12f14:	464a      	mov	r2, r9
   12f16:	f01d fb60 	bl	305da <memcpy>
	while (nargs != 0U) {
   12f1a:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   12f1c:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   12f1e:	44c8      	add	r8, r9
	while (nargs != 0U) {
   12f20:	d1f0      	bne.n	12f04 <log_msg_create_n+0xa4>
   12f22:	e7db      	b.n	12edc <log_msg_create_n+0x7c>
   12f24:	00032995 	.word	0x00032995
   12f28:	00032486 	.word	0x00032486
   12f2c:	00032969 	.word	0x00032969

00012f30 <log_msg_mem_get_free>:
	return slab->num_blocks - slab->num_used;
   12f30:	4b02      	ldr	r3, [pc, #8]	; (12f3c <log_msg_mem_get_free+0xc>)
   12f32:	68d8      	ldr	r0, [r3, #12]
   12f34:	69db      	ldr	r3, [r3, #28]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
   12f36:	1ac0      	subs	r0, r0, r3
   12f38:	4770      	bx	lr
   12f3a:	bf00      	nop
   12f3c:	20002380 	.word	0x20002380

00012f40 <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
   12f40:	4b01      	ldr	r3, [pc, #4]	; (12f48 <log_msg_mem_get_used+0x8>)
   12f42:	69d8      	ldr	r0, [r3, #28]
   12f44:	4770      	bx	lr
   12f46:	bf00      	nop
   12f48:	20002380 	.word	0x20002380

00012f4c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   12f4c:	b40e      	push	{r1, r2, r3}
   12f4e:	b503      	push	{r0, r1, lr}
   12f50:	ab03      	add	r3, sp, #12
   12f52:	4601      	mov	r1, r0
   12f54:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12f58:	4804      	ldr	r0, [pc, #16]	; (12f6c <print_formatted+0x20>)
	va_start(args, fmt);
   12f5a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   12f5c:	f7fe fe82 	bl	11c64 <cbvprintf>
	va_end(args);

	return length;
}
   12f60:	b002      	add	sp, #8
   12f62:	f85d eb04 	ldr.w	lr, [sp], #4
   12f66:	b003      	add	sp, #12
   12f68:	4770      	bx	lr
   12f6a:	bf00      	nop
   12f6c:	000131d5 	.word	0x000131d5

00012f70 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   12f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f74:	b087      	sub	sp, #28
   12f76:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   12f78:	f001 0301 	and.w	r3, r1, #1
{
   12f7c:	9205      	str	r2, [sp, #20]
   12f7e:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   12f82:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   12f86:	9304      	str	r3, [sp, #16]
{
   12f88:	4606      	mov	r6, r0
   12f8a:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   12f8c:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   12f90:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   12f94:	f019 ff0f 	bl	2cdb6 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   12f98:	4602      	mov	r2, r0
   12f9a:	2800      	cmp	r0, #0
   12f9c:	d044      	beq.n	13028 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   12f9e:	4939      	ldr	r1, [pc, #228]	; (13084 <prefix_print+0x114>)
   12fa0:	4630      	mov	r0, r6
   12fa2:	f7ff ffd3 	bl	12f4c <print_formatted>
   12fa6:	4604      	mov	r4, r0
	}

	if (stamp) {
   12fa8:	f1bb 0f00 	cmp.w	fp, #0
   12fac:	d008      	beq.n	12fc0 <prefix_print+0x50>
	if (!format) {
   12fae:	f018 0f44 	tst.w	r8, #68	; 0x44
   12fb2:	d13b      	bne.n	1302c <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   12fb4:	4934      	ldr	r1, [pc, #208]	; (13088 <prefix_print+0x118>)
   12fb6:	463a      	mov	r2, r7
   12fb8:	4630      	mov	r0, r6
   12fba:	f7ff ffc7 	bl	12f4c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   12fbe:	4404      	add	r4, r0
	if (color) {
   12fc0:	9b04      	ldr	r3, [sp, #16]
   12fc2:	b153      	cbz	r3, 12fda <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   12fc4:	4b31      	ldr	r3, [pc, #196]	; (1308c <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   12fc6:	4932      	ldr	r1, [pc, #200]	; (13090 <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
   12fc8:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   12fcc:	4b31      	ldr	r3, [pc, #196]	; (13094 <prefix_print+0x124>)
   12fce:	4630      	mov	r0, r6
   12fd0:	2a00      	cmp	r2, #0
   12fd2:	bf08      	it	eq
   12fd4:	461a      	moveq	r2, r3
   12fd6:	f7ff ffb9 	bl	12f4c <print_formatted>
	if (level_on) {
   12fda:	b13d      	cbz	r5, 12fec <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   12fdc:	4b2e      	ldr	r3, [pc, #184]	; (13098 <prefix_print+0x128>)
   12fde:	492f      	ldr	r1, [pc, #188]	; (1309c <prefix_print+0x12c>)
   12fe0:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   12fe4:	4630      	mov	r0, r6
   12fe6:	f7ff ffb1 	bl	12f4c <print_formatted>
   12fea:	4605      	mov	r5, r0
	if (source_id >= 0) {
   12fec:	f1ba 0f00 	cmp.w	sl, #0
   12ff0:	db16      	blt.n	13020 <prefix_print+0xb0>
		total += print_formatted(output,
   12ff2:	9b05      	ldr	r3, [sp, #20]
   12ff4:	2b00      	cmp	r3, #0
   12ff6:	d043      	beq.n	13080 <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   12ff8:	2301      	movs	r3, #1
   12ffa:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   12ffe:	4b28      	ldr	r3, [pc, #160]	; (130a0 <prefix_print+0x130>)
   13000:	4f28      	ldr	r7, [pc, #160]	; (130a4 <prefix_print+0x134>)
   13002:	f019 0f10 	tst.w	r9, #16
   13006:	bf18      	it	ne
   13008:	461f      	movne	r7, r3
   1300a:	4651      	mov	r1, sl
   1300c:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   13010:	f7ff fd94 	bl	12b3c <log_source_name_get>
   13014:	4639      	mov	r1, r7
   13016:	4602      	mov	r2, r0
   13018:	4630      	mov	r0, r6
   1301a:	f7ff ff97 	bl	12f4c <print_formatted>
   1301e:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   13020:	1928      	adds	r0, r5, r4
   13022:	b007      	add	sp, #28
   13024:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   13028:	4604      	mov	r4, r0
   1302a:	e7bd      	b.n	12fa8 <prefix_print+0x38>
	} else if (freq != 0U) {
   1302c:	4b1e      	ldr	r3, [pc, #120]	; (130a8 <prefix_print+0x138>)
   1302e:	6818      	ldr	r0, [r3, #0]
   13030:	2800      	cmp	r0, #0
   13032:	d0c4      	beq.n	12fbe <prefix_print+0x4e>
		timestamp /= timestamp_div;
   13034:	4b1d      	ldr	r3, [pc, #116]	; (130ac <prefix_print+0x13c>)
   13036:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   1303a:	6819      	ldr	r1, [r3, #0]
   1303c:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   13040:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   13044:	fb00 7711 	mls	r7, r0, r1, r7
   13048:	fbb1 f2fc 	udiv	r2, r1, ip
   1304c:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   13050:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   13054:	434f      	muls	r7, r1
		mins = seconds / 60U;
   13056:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1305a:	fbb7 f8f0 	udiv	r8, r7, r0
   1305e:	fb00 7718 	mls	r7, r0, r8, r7
   13062:	434f      	muls	r7, r1
		mins = seconds / 60U;
   13064:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
   13068:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   1306c:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   13070:	9100      	str	r1, [sp, #0]
   13072:	e9cd 8001 	strd	r8, r0, [sp, #4]
   13076:	490e      	ldr	r1, [pc, #56]	; (130b0 <prefix_print+0x140>)
   13078:	4630      	mov	r0, r6
   1307a:	f7ff ff67 	bl	12f4c <print_formatted>
   1307e:	e79e      	b.n	12fbe <prefix_print+0x4e>
		total += print_formatted(output,
   13080:	4f08      	ldr	r7, [pc, #32]	; (130a4 <prefix_print+0x134>)
   13082:	e7c2      	b.n	1300a <prefix_print+0x9a>
   13084:	000329ae 	.word	0x000329ae
   13088:	000329b2 	.word	0x000329b2
   1308c:	00030fbc 	.word	0x00030fbc
   13090:	000330d8 	.word	0x000330d8
   13094:	000329a0 	.word	0x000329a0
   13098:	00030fd0 	.word	0x00030fd0
   1309c:	000329d7 	.word	0x000329d7
   130a0:	000329aa 	.word	0x000329aa
   130a4:	000329a5 	.word	0x000329a5
   130a8:	200023a0 	.word	0x200023a0
   130ac:	200023a4 	.word	0x200023a4
   130b0:	000329bb 	.word	0x000329bb

000130b4 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   130b4:	b538      	push	{r3, r4, r5, lr}
   130b6:	460c      	mov	r4, r1
	if (color) {
   130b8:	07e1      	lsls	r1, r4, #31
{
   130ba:	4605      	mov	r5, r0
	if (color) {
   130bc:	d503      	bpl.n	130c6 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   130be:	4a08      	ldr	r2, [pc, #32]	; (130e0 <postfix_print+0x2c>)
   130c0:	4908      	ldr	r1, [pc, #32]	; (130e4 <postfix_print+0x30>)
   130c2:	f7ff ff43 	bl	12f4c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   130c6:	06e2      	lsls	r2, r4, #27
   130c8:	d408      	bmi.n	130dc <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   130ca:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   130cc:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   130ce:	bf4c      	ite	mi
   130d0:	4905      	ldrmi	r1, [pc, #20]	; (130e8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   130d2:	4906      	ldrpl	r1, [pc, #24]	; (130ec <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   130d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   130d8:	f7ff bf38 	b.w	12f4c <print_formatted>
}
   130dc:	bd38      	pop	{r3, r4, r5, pc}
   130de:	bf00      	nop
   130e0:	000329a0 	.word	0x000329a0
   130e4:	000330d8 	.word	0x000330d8
   130e8:	00036e20 	.word	0x00036e20
   130ec:	00032b31 	.word	0x00032b31

000130f0 <hexdump_line_print>:
{
   130f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   130f4:	461d      	mov	r5, r3
   130f6:	9b08      	ldr	r3, [sp, #32]
   130f8:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   130fa:	06da      	lsls	r2, r3, #27
{
   130fc:	4604      	mov	r4, r0
   130fe:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   13100:	d405      	bmi.n	1310e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   13102:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   13104:	bf4c      	ite	mi
   13106:	492b      	ldrmi	r1, [pc, #172]	; (131b4 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   13108:	492b      	ldrpl	r1, [pc, #172]	; (131b8 <hexdump_line_print+0xc8>)
   1310a:	f7ff ff1f 	bl	12f4c <print_formatted>
		print_formatted(output, " ");
   1310e:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 131c0 <hexdump_line_print+0xd0>
{
   13112:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   13116:	45a8      	cmp	r8, r5
   13118:	db2d      	blt.n	13176 <hexdump_line_print+0x86>
			print_formatted(output, "   ");
   1311a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 131c4 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
   1311e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 131c8 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
   13122:	f8df a09c 	ldr.w	sl, [pc, #156]	; 131c0 <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13126:	2500      	movs	r5, #0
		if (i < length) {
   13128:	42bd      	cmp	r5, r7
   1312a:	d232      	bcs.n	13192 <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
   1312c:	5d72      	ldrb	r2, [r6, r5]
   1312e:	4649      	mov	r1, r9
   13130:	4620      	mov	r0, r4
   13132:	f7ff ff0b 	bl	12f4c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13136:	3501      	adds	r5, #1
   13138:	2d10      	cmp	r5, #16
   1313a:	d123      	bne.n	13184 <hexdump_line_print+0x94>
	print_formatted(output, "|");
   1313c:	491f      	ldr	r1, [pc, #124]	; (131bc <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
   1313e:	f8df 8080 	ldr.w	r8, [pc, #128]	; 131c0 <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   13142:	f8df 9088 	ldr.w	r9, [pc, #136]	; 131cc <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
   13146:	f8df a088 	ldr.w	sl, [pc, #136]	; 131d0 <hexdump_line_print+0xe0>
	print_formatted(output, "|");
   1314a:	4620      	mov	r0, r4
   1314c:	f7ff fefe 	bl	12f4c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   13150:	2500      	movs	r5, #0
		if (i < length) {
   13152:	42af      	cmp	r7, r5
   13154:	d929      	bls.n	131aa <hexdump_line_print+0xba>
			char c = (char)data[i];
   13156:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   13158:	f812 3009 	ldrb.w	r3, [r2, r9]
   1315c:	f013 0f97 	tst.w	r3, #151	; 0x97
   13160:	bf08      	it	eq
   13162:	222e      	moveq	r2, #46	; 0x2e
   13164:	4651      	mov	r1, sl
   13166:	4620      	mov	r0, r4
   13168:	f7ff fef0 	bl	12f4c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1316c:	3501      	adds	r5, #1
   1316e:	2d10      	cmp	r5, #16
   13170:	d114      	bne.n	1319c <hexdump_line_print+0xac>
}
   13172:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   13176:	4649      	mov	r1, r9
   13178:	4620      	mov	r0, r4
   1317a:	f7ff fee7 	bl	12f4c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1317e:	f108 0801 	add.w	r8, r8, #1
   13182:	e7c8      	b.n	13116 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   13184:	076a      	lsls	r2, r5, #29
   13186:	d1cf      	bne.n	13128 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   13188:	4651      	mov	r1, sl
   1318a:	4620      	mov	r0, r4
   1318c:	f7ff fede 	bl	12f4c <print_formatted>
   13190:	e7ca      	b.n	13128 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   13192:	4641      	mov	r1, r8
   13194:	4620      	mov	r0, r4
   13196:	f7ff fed9 	bl	12f4c <print_formatted>
   1319a:	e7cc      	b.n	13136 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   1319c:	076b      	lsls	r3, r5, #29
   1319e:	d1d8      	bne.n	13152 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   131a0:	4641      	mov	r1, r8
   131a2:	4620      	mov	r0, r4
   131a4:	f7ff fed2 	bl	12f4c <print_formatted>
   131a8:	e7d3      	b.n	13152 <hexdump_line_print+0x62>
			print_formatted(output, " ");
   131aa:	4641      	mov	r1, r8
   131ac:	4620      	mov	r0, r4
   131ae:	f7ff fecd 	bl	12f4c <print_formatted>
   131b2:	e7db      	b.n	1316c <hexdump_line_print+0x7c>
   131b4:	00036e20 	.word	0x00036e20
   131b8:	00032b31 	.word	0x00032b31
   131bc:	000329e7 	.word	0x000329e7
   131c0:	000329e5 	.word	0x000329e5
   131c4:	000329e3 	.word	0x000329e3
   131c8:	000329dd 	.word	0x000329dd
   131cc:	0003811b 	.word	0x0003811b
   131d0:	000338cb 	.word	0x000338cb

000131d4 <out_func>:
{
   131d4:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   131d6:	684b      	ldr	r3, [r1, #4]
   131d8:	681a      	ldr	r2, [r3, #0]
   131da:	68cb      	ldr	r3, [r1, #12]
   131dc:	429a      	cmp	r2, r3
{
   131de:	4605      	mov	r5, r0
   131e0:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   131e2:	d102      	bne.n	131ea <out_func+0x16>
		log_output_flush(out_ctx);
   131e4:	4608      	mov	r0, r1
   131e6:	f01a f845 	bl	2d274 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   131ea:	6863      	ldr	r3, [r4, #4]
   131ec:	f3bf 8f5b 	dmb	ish
   131f0:	e853 2f00 	ldrex	r2, [r3]
   131f4:	1c51      	adds	r1, r2, #1
   131f6:	e843 1000 	strex	r0, r1, [r3]
   131fa:	2800      	cmp	r0, #0
   131fc:	d1f8      	bne.n	131f0 <out_func+0x1c>
   131fe:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   13202:	68a3      	ldr	r3, [r4, #8]
   13204:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   13206:	6863      	ldr	r3, [r4, #4]
   13208:	681a      	ldr	r2, [r3, #0]
   1320a:	68e3      	ldr	r3, [r4, #12]
   1320c:	429a      	cmp	r2, r3
   1320e:	d909      	bls.n	13224 <out_func+0x50>
   13210:	4905      	ldr	r1, [pc, #20]	; (13228 <out_func+0x54>)
   13212:	4806      	ldr	r0, [pc, #24]	; (1322c <out_func+0x58>)
   13214:	4a06      	ldr	r2, [pc, #24]	; (13230 <out_func+0x5c>)
   13216:	2374      	movs	r3, #116	; 0x74
   13218:	f019 f9bf 	bl	2c59a <printk>
   1321c:	4804      	ldr	r0, [pc, #16]	; (13230 <out_func+0x5c>)
   1321e:	2174      	movs	r1, #116	; 0x74
   13220:	f019 fbfc 	bl	2ca1c <assert_post_action>
}
   13224:	2000      	movs	r0, #0
   13226:	bd38      	pop	{r3, r4, r5, pc}
   13228:	00032a18 	.word	0x00032a18
   1322c:	00032486 	.word	0x00032486
   13230:	000329e9 	.word	0x000329e9

00013234 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   13234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   13238:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   1323a:	f013 0707 	ands.w	r7, r3, #7
{
   1323e:	4616      	mov	r6, r2
   13240:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13242:	7a0a      	ldrb	r2, [r1, #8]
   13244:	4604      	mov	r4, r0
   13246:	460d      	mov	r5, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
   13248:	d020      	beq.n	1328c <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
   1324a:	8949      	ldrh	r1, [r1, #10]
   1324c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13250:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   13254:	43d2      	mvns	r2, r2
   13256:	e9cd 7300 	strd	r7, r3, [sp]
   1325a:	9102      	str	r1, [sp, #8]
   1325c:	68eb      	ldr	r3, [r5, #12]
   1325e:	f002 0201 	and.w	r2, r2, #1
   13262:	4631      	mov	r1, r6
   13264:	f7ff fe84 	bl	12f70 <prefix_print>
   13268:	4681      	mov	r9, r0
   1326a:	7a2b      	ldrb	r3, [r5, #8]
   1326c:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1326e:	f013 0801 	ands.w	r8, r3, #1
   13272:	d00d      	beq.n	13290 <log_output_msg_process+0x5c>
		std_print(msg, output);
   13274:	4621      	mov	r1, r4
   13276:	4628      	mov	r0, r5
   13278:	f019 fe9f 	bl	2cfba <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   1327c:	2f00      	cmp	r7, #0
   1327e:	d03c      	beq.n	132fa <log_output_msg_process+0xc6>
		postfix_print(output, flags, level);
   13280:	463a      	mov	r2, r7
   13282:	4631      	mov	r1, r6
   13284:	4620      	mov	r0, r4
   13286:	f7ff ff15 	bl	130b4 <postfix_print>
   1328a:	e036      	b.n	132fa <log_output_msg_process+0xc6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   1328c:	46b9      	mov	r9, r7
   1328e:	e7ec      	b.n	1326a <log_output_msg_process+0x36>
	} else if (raw_string) {
   13290:	2f00      	cmp	r7, #0
   13292:	d138      	bne.n	13306 <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(output->size);
   13294:	68e3      	ldr	r3, [r4, #12]
   13296:	b95b      	cbnz	r3, 132b0 <log_output_msg_process+0x7c>
   13298:	492a      	ldr	r1, [pc, #168]	; (13344 <log_output_msg_process+0x110>)
   1329a:	482b      	ldr	r0, [pc, #172]	; (13348 <log_output_msg_process+0x114>)
   1329c:	4a2b      	ldr	r2, [pc, #172]	; (1334c <log_output_msg_process+0x118>)
   1329e:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   132a2:	f019 f97a 	bl	2c59a <printk>
   132a6:	4829      	ldr	r0, [pc, #164]	; (1334c <log_output_msg_process+0x118>)
   132a8:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   132ac:	f019 fbb6 	bl	2ca1c <assert_post_action>
			0 : prefix_print(output, flags, std_msg, timestamp,
   132b0:	2600      	movs	r6, #0
		length = output->size;
   132b2:	68e3      	ldr	r3, [r4, #12]
   132b4:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   132b6:	aa06      	add	r2, sp, #24
   132b8:	4633      	mov	r3, r6
   132ba:	68a1      	ldr	r1, [r4, #8]
   132bc:	4628      	mov	r0, r5
   132be:	f019 fe68 	bl	2cf92 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   132c2:	9a06      	ldr	r2, [sp, #24]
   132c4:	6863      	ldr	r3, [r4, #4]
   132c6:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   132c8:	b14a      	cbz	r2, 132de <log_output_msg_process+0xaa>
			eol = (output->buf[length - 1] == '\n');
   132ca:	68a3      	ldr	r3, [r4, #8]
   132cc:	4413      	add	r3, r2
   132ce:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   132d2:	f1a8 030a 	sub.w	r3, r8, #10
   132d6:	f1d3 0800 	rsbs	r8, r3, #0
   132da:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(output);
   132de:	4620      	mov	r0, r4
   132e0:	f019 ffc8 	bl	2d274 <log_output_flush>
		offset += length;
   132e4:	9b06      	ldr	r3, [sp, #24]
   132e6:	441e      	add	r6, r3
	} while (length > 0);
   132e8:	2b00      	cmp	r3, #0
   132ea:	d1e2      	bne.n	132b2 <log_output_msg_process+0x7e>
	if (eol) {
   132ec:	f1b8 0f00 	cmp.w	r8, #0
   132f0:	d003      	beq.n	132fa <log_output_msg_process+0xc6>
		print_formatted(output, "\r");
   132f2:	4917      	ldr	r1, [pc, #92]	; (13350 <log_output_msg_process+0x11c>)
   132f4:	4620      	mov	r0, r4
   132f6:	f7ff fe29 	bl	12f4c <print_formatted>
	}

	log_output_flush(output);
   132fa:	4620      	mov	r0, r4
   132fc:	f019 ffba 	bl	2d274 <log_output_flush>
}
   13300:	b00a      	add	sp, #40	; 0x28
   13302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   13306:	4628      	mov	r0, r5
   13308:	f019 fdef 	bl	2ceea <log_msg_str_get>
   1330c:	4911      	ldr	r1, [pc, #68]	; (13354 <log_output_msg_process+0x120>)
   1330e:	4602      	mov	r2, r0
   13310:	4620      	mov	r0, r4
   13312:	f7ff fe1b 	bl	12f4c <print_formatted>
		length = sizeof(buf);
   13316:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   1331a:	aa05      	add	r2, sp, #20
   1331c:	4643      	mov	r3, r8
   1331e:	a906      	add	r1, sp, #24
   13320:	4628      	mov	r0, r5
		length = sizeof(buf);
   13322:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   13326:	f019 fe34 	bl	2cf92 <log_msg_hexdump_data_get>
		if (length) {
   1332a:	9a05      	ldr	r2, [sp, #20]
   1332c:	2a00      	cmp	r2, #0
   1332e:	d0a7      	beq.n	13280 <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
   13330:	464b      	mov	r3, r9
   13332:	9600      	str	r6, [sp, #0]
   13334:	a906      	add	r1, sp, #24
   13336:	4620      	mov	r0, r4
   13338:	f7ff feda 	bl	130f0 <hexdump_line_print>
			offset += length;
   1333c:	9b05      	ldr	r3, [sp, #20]
   1333e:	4498      	add	r8, r3
		length = sizeof(buf);
   13340:	e7eb      	b.n	1331a <log_output_msg_process+0xe6>
   13342:	bf00      	nop
   13344:	00032a48 	.word	0x00032a48
   13348:	00032486 	.word	0x00032486
   1334c:	000329e9 	.word	0x000329e9
   13350:	00032a55 	.word	0x00032a55
   13354:	000330d8 	.word	0x000330d8

00013358 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   13358:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1335a:	f242 730f 	movw	r3, #9999	; 0x270f
   1335e:	428b      	cmp	r3, r1
   13360:	bf28      	it	cs
   13362:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   13364:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13366:	4a0f      	ldr	r2, [pc, #60]	; (133a4 <log_output_dropped_process+0x4c>)
{
   13368:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   1336a:	2105      	movs	r1, #5
   1336c:	4668      	mov	r0, sp
   1336e:	f019 f921 	bl	2c5b4 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   13372:	6863      	ldr	r3, [r4, #4]
   13374:	490c      	ldr	r1, [pc, #48]	; (133a8 <log_output_dropped_process+0x50>)
   13376:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   13378:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1337a:	2204      	movs	r2, #4
   1337c:	4628      	mov	r0, r5
   1337e:	f019 fe0f 	bl	2cfa0 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   13382:	6863      	ldr	r3, [r4, #4]
   13384:	4632      	mov	r2, r6
   13386:	4669      	mov	r1, sp
   13388:	4628      	mov	r0, r5
   1338a:	685b      	ldr	r3, [r3, #4]
   1338c:	f019 fe08 	bl	2cfa0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   13390:	6863      	ldr	r3, [r4, #4]
   13392:	4906      	ldr	r1, [pc, #24]	; (133ac <log_output_dropped_process+0x54>)
   13394:	685b      	ldr	r3, [r3, #4]
   13396:	2217      	movs	r2, #23
   13398:	4628      	mov	r0, r5
   1339a:	f019 fe01 	bl	2cfa0 <buffer_write>
		     output->control_block->ctx);
}
   1339e:	b002      	add	sp, #8
   133a0:	bd70      	pop	{r4, r5, r6, pc}
   133a2:	bf00      	nop
   133a4:	00037595 	.word	0x00037595
   133a8:	00032a8f 	.word	0x00032a8f
   133ac:	00032a77 	.word	0x00032a77

000133b0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   133b0:	4a08      	ldr	r2, [pc, #32]	; (133d4 <log_output_timestamp_freq_set+0x24>)
{
   133b2:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   133b4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   133b6:	4c08      	ldr	r4, [pc, #32]	; (133d8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   133b8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   133ba:	2100      	movs	r1, #0
   133bc:	42a0      	cmp	r0, r4
   133be:	d804      	bhi.n	133ca <log_output_timestamp_freq_set+0x1a>
   133c0:	b101      	cbz	r1, 133c4 <log_output_timestamp_freq_set+0x14>
   133c2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   133c4:	4b05      	ldr	r3, [pc, #20]	; (133dc <log_output_timestamp_freq_set+0x2c>)
   133c6:	6018      	str	r0, [r3, #0]
}
   133c8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   133ca:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   133cc:	005b      	lsls	r3, r3, #1
   133ce:	2101      	movs	r1, #1
   133d0:	e7f4      	b.n	133bc <log_output_timestamp_freq_set+0xc>
   133d2:	bf00      	nop
   133d4:	200023a4 	.word	0x200023a4
   133d8:	000f4240 	.word	0x000f4240
   133dc:	200023a0 	.word	0x200023a0

000133e0 <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   133e0:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
   133e2:	2804      	cmp	r0, #4
	entry->handler = NULL;
   133e4:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   133e6:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
   133e8:	bf98      	it	ls
   133ea:	4b04      	ldrls	r3, [pc, #16]	; (133fc <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
   133ec:	4a04      	ldr	r2, [pc, #16]	; (13400 <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
   133ee:	bf98      	it	ls
   133f0:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
   133f4:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
   133f6:	600b      	str	r3, [r1, #0]
}
   133f8:	4770      	bx	lr
   133fa:	bf00      	nop
   133fc:	00031024 	.word	0x00031024
   13400:	00031000 	.word	0x00031000

00013404 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   13404:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
   13406:	4a08      	ldr	r2, [pc, #32]	; (13428 <backend_name_get+0x24>)
	entry->syntax  = NULL;
   13408:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
   1340a:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   1340c:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
   1340e:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
   13410:	4b06      	ldr	r3, [pc, #24]	; (1342c <backend_name_get+0x28>)
   13412:	4a07      	ldr	r2, [pc, #28]	; (13430 <backend_name_get+0x2c>)
   13414:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
   13416:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
   1341a:	bf3e      	ittt	cc
   1341c:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
   13420:	689b      	ldrcc	r3, [r3, #8]
   13422:	600b      	strcc	r3, [r1, #0]
	}
}
   13424:	4770      	bx	lr
   13426:	bf00      	nop
   13428:	00031178 	.word	0x00031178
   1342c:	00030ca4 	.word	0x00030ca4
   13430:	00030cb4 	.word	0x00030cb4

00013434 <cmd_log_memory_slabs>:
{
   13434:	b538      	push	{r3, r4, r5, lr}
   13436:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
   13438:	f7ff fd7a 	bl	12f30 <log_msg_mem_get_free>
   1343c:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
   1343e:	f7ff fd7f 	bl	12f40 <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
   13442:	4a09      	ldr	r2, [pc, #36]	; (13468 <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
   13444:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
   13446:	2108      	movs	r1, #8
   13448:	4620      	mov	r0, r4
   1344a:	f01a f897 	bl	2d57c <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
   1344e:	462b      	mov	r3, r5
   13450:	4620      	mov	r0, r4
   13452:	4a06      	ldr	r2, [pc, #24]	; (1346c <cmd_log_memory_slabs+0x38>)
   13454:	2108      	movs	r1, #8
   13456:	f01a f891 	bl	2d57c <shell_fprintf>
		shell_print(
   1345a:	4620      	mov	r0, r4
   1345c:	4a04      	ldr	r2, [pc, #16]	; (13470 <cmd_log_memory_slabs+0x3c>)
   1345e:	2108      	movs	r1, #8
   13460:	f01a f88c 	bl	2d57c <shell_fprintf>
}
   13464:	2000      	movs	r0, #0
   13466:	bd38      	pop	{r3, r4, r5, pc}
   13468:	00032a94 	.word	0x00032a94
   1346c:	00032aa5 	.word	0x00032aa5
   13470:	00032ab6 	.word	0x00032ab6

00013474 <cmd_log_backends_list>:
{
   13474:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13478:	4c11      	ldr	r4, [pc, #68]	; (134c0 <cmd_log_backends_list+0x4c>)
   1347a:	4d12      	ldr	r5, [pc, #72]	; (134c4 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
   1347c:	f8df 8048 	ldr.w	r8, [pc, #72]	; 134c8 <cmd_log_backends_list+0x54>
   13480:	f8df 9048 	ldr.w	r9, [pc, #72]	; 134cc <cmd_log_backends_list+0x58>
   13484:	f8df a048 	ldr.w	sl, [pc, #72]	; 134d0 <cmd_log_backends_list+0x5c>
   13488:	1b2d      	subs	r5, r5, r4
{
   1348a:	4607      	mov	r7, r0
   1348c:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
   1348e:	2600      	movs	r6, #0
   13490:	42ae      	cmp	r6, r5
   13492:	db03      	blt.n	1349c <cmd_log_backends_list+0x28>
}
   13494:	2000      	movs	r0, #0
   13496:	b002      	add	sp, #8
   13498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
   1349c:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
   1349e:	7953      	ldrb	r3, [r2, #5]
   134a0:	7912      	ldrb	r2, [r2, #4]
   134a2:	2b00      	cmp	r3, #0
   134a4:	bf14      	ite	ne
   134a6:	4643      	movne	r3, r8
   134a8:	464b      	moveq	r3, r9
   134aa:	e9cd 3200 	strd	r3, r2, [sp]
   134ae:	2108      	movs	r1, #8
   134b0:	68a3      	ldr	r3, [r4, #8]
   134b2:	4652      	mov	r2, sl
   134b4:	4638      	mov	r0, r7
   134b6:	f01a f861 	bl	2d57c <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
   134ba:	3601      	adds	r6, #1
   134bc:	3410      	adds	r4, #16
   134be:	e7e7      	b.n	13490 <cmd_log_backends_list+0x1c>
   134c0:	00030ca4 	.word	0x00030ca4
   134c4:	00030cb4 	.word	0x00030cb4
   134c8:	00032b02 	.word	0x00032b02
   134cc:	00032b0a 	.word	0x00032b0a
   134d0:	00032b13 	.word	0x00032b13

000134d4 <module_name_get>:
{
   134d4:	b510      	push	{r4, lr}
	entry->handler = NULL;
   134d6:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
   134d8:	4a05      	ldr	r2, [pc, #20]	; (134f0 <module_name_get+0x1c>)
	entry->handler = NULL;
   134da:	60cb      	str	r3, [r1, #12]
{
   134dc:	460c      	mov	r4, r1
	entry->help  = NULL;
   134de:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
   134e0:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
   134e2:	4601      	mov	r1, r0
   134e4:	4618      	mov	r0, r3
   134e6:	f7ff fb29 	bl	12b3c <log_source_name_get>
   134ea:	6020      	str	r0, [r4, #0]
}
   134ec:	bd10      	pop	{r4, pc}
   134ee:	bf00      	nop
   134f0:	00031000 	.word	0x00031000

000134f4 <log_status>:
{
   134f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   134f8:	4b2b      	ldr	r3, [pc, #172]	; (135a8 <log_status+0xb4>)
   134fa:	4e2c      	ldr	r6, [pc, #176]	; (135ac <log_status+0xb8>)
   134fc:	1af6      	subs	r6, r6, r3
   134fe:	b085      	sub	sp, #20
   13500:	4604      	mov	r4, r0
   13502:	08f6      	lsrs	r6, r6, #3
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   13504:	460d      	mov	r5, r1
   13506:	b959      	cbnz	r1, 13520 <log_status+0x2c>
   13508:	4929      	ldr	r1, [pc, #164]	; (135b0 <log_status+0xbc>)
   1350a:	482a      	ldr	r0, [pc, #168]	; (135b4 <log_status+0xc0>)
   1350c:	4a2a      	ldr	r2, [pc, #168]	; (135b8 <log_status+0xc4>)
   1350e:	f240 131d 	movw	r3, #285	; 0x11d
   13512:	f019 f842 	bl	2c59a <printk>
   13516:	4828      	ldr	r0, [pc, #160]	; (135b8 <log_status+0xc4>)
   13518:	f240 111d 	movw	r1, #285	; 0x11d
   1351c:	f019 fa7e 	bl	2ca1c <assert_post_action>
	return backend->cb->active;
   13520:	686b      	ldr	r3, [r5, #4]
	if (!log_backend_is_active(backend)) {
   13522:	795b      	ldrb	r3, [r3, #5]
   13524:	b923      	cbnz	r3, 13530 <log_status+0x3c>
		shell_warn(shell, "Logs are halted!");
   13526:	4a25      	ldr	r2, [pc, #148]	; (135bc <log_status+0xc8>)
   13528:	2103      	movs	r1, #3
   1352a:	4620      	mov	r0, r4
   1352c:	f01a f826 	bl	2d57c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   13530:	4b23      	ldr	r3, [pc, #140]	; (135c0 <log_status+0xcc>)
   13532:	4a24      	ldr	r2, [pc, #144]	; (135c4 <log_status+0xd0>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   13534:	f8df a094 	ldr.w	sl, [pc, #148]	; 135cc <log_status+0xd8>
   13538:	f8df b094 	ldr.w	fp, [pc, #148]	; 135d0 <log_status+0xdc>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   1353c:	2108      	movs	r1, #8
   1353e:	4620      	mov	r0, r4
   13540:	f01a f81c 	bl	2d57c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
   13544:	4a20      	ldr	r2, [pc, #128]	; (135c8 <log_status+0xd4>)
   13546:	2108      	movs	r1, #8
   13548:	4620      	mov	r0, r4
   1354a:	f01a f817 	bl	2d57c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
   1354e:	f04f 0800 	mov.w	r8, #0
   13552:	fa0f f788 	sxth.w	r7, r8
   13556:	42b7      	cmp	r7, r6
   13558:	f108 0801 	add.w	r8, r8, #1
   1355c:	d303      	bcc.n	13566 <log_status+0x72>
}
   1355e:	2000      	movs	r0, #0
   13560:	b005      	add	sp, #20
   13562:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   13566:	463a      	mov	r2, r7
   13568:	2301      	movs	r3, #1
   1356a:	2100      	movs	r1, #0
   1356c:	4628      	mov	r0, r5
   1356e:	f7ff faf3 	bl	12b58 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   13572:	2300      	movs	r3, #0
   13574:	463a      	mov	r2, r7
   13576:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   13578:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1357a:	4628      	mov	r0, r5
   1357c:	f7ff faec 	bl	12b58 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   13580:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   13582:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   13584:	2000      	movs	r0, #0
   13586:	f7ff fad9 	bl	12b3c <log_source_name_get>
   1358a:	9a03      	ldr	r2, [sp, #12]
   1358c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
   13590:	9201      	str	r2, [sp, #4]
   13592:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
   13596:	9200      	str	r2, [sp, #0]
   13598:	4603      	mov	r3, r0
   1359a:	465a      	mov	r2, fp
   1359c:	2108      	movs	r1, #8
   1359e:	4620      	mov	r0, r4
   135a0:	f019 ffec 	bl	2d57c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
   135a4:	e7d5      	b.n	13552 <log_status+0x5e>
   135a6:	bf00      	nop
   135a8:	00030bd4 	.word	0x00030bd4
   135ac:	00030ca4 	.word	0x00030ca4
   135b0:	000328fa 	.word	0x000328fa
   135b4:	00032486 	.word	0x00032486
   135b8:	000328c9 	.word	0x000328c9
   135bc:	00032b34 	.word	0x00032b34
   135c0:	00032b46 	.word	0x00032b46
   135c4:	00032b52 	.word	0x00032b52
   135c8:	00032b70 	.word	0x00032b70
   135cc:	00031010 	.word	0x00031010
   135d0:	00032bad 	.word	0x00032bad

000135d4 <log_backend_deactivate>:
{
   135d4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   135d6:	4604      	mov	r4, r0
   135d8:	b958      	cbnz	r0, 135f2 <log_backend_deactivate+0x1e>
   135da:	4908      	ldr	r1, [pc, #32]	; (135fc <log_backend_deactivate+0x28>)
   135dc:	4808      	ldr	r0, [pc, #32]	; (13600 <log_backend_deactivate+0x2c>)
   135de:	4a09      	ldr	r2, [pc, #36]	; (13604 <log_backend_deactivate+0x30>)
   135e0:	f240 130f 	movw	r3, #271	; 0x10f
   135e4:	f018 ffd9 	bl	2c59a <printk>
   135e8:	4806      	ldr	r0, [pc, #24]	; (13604 <log_backend_deactivate+0x30>)
   135ea:	f240 110f 	movw	r1, #271	; 0x10f
   135ee:	f019 fa15 	bl	2ca1c <assert_post_action>
	backend->cb->active = false;
   135f2:	6863      	ldr	r3, [r4, #4]
   135f4:	2200      	movs	r2, #0
   135f6:	715a      	strb	r2, [r3, #5]
}
   135f8:	bd10      	pop	{r4, pc}
   135fa:	bf00      	nop
   135fc:	000328fa 	.word	0x000328fa
   13600:	00032486 	.word	0x00032486
   13604:	000328c9 	.word	0x000328c9

00013608 <log_backend_activate>:
{
   13608:	b538      	push	{r3, r4, r5, lr}
   1360a:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(backend != NULL);
   1360c:	4604      	mov	r4, r0
   1360e:	b958      	cbnz	r0, 13628 <log_backend_activate+0x20>
   13610:	4908      	ldr	r1, [pc, #32]	; (13634 <log_backend_activate+0x2c>)
   13612:	4809      	ldr	r0, [pc, #36]	; (13638 <log_backend_activate+0x30>)
   13614:	4a09      	ldr	r2, [pc, #36]	; (1363c <log_backend_activate+0x34>)
   13616:	f44f 7381 	mov.w	r3, #258	; 0x102
   1361a:	f018 ffbe 	bl	2c59a <printk>
   1361e:	4807      	ldr	r0, [pc, #28]	; (1363c <log_backend_activate+0x34>)
   13620:	f44f 7181 	mov.w	r1, #258	; 0x102
   13624:	f019 f9fa 	bl	2ca1c <assert_post_action>
	backend->cb->ctx = ctx;
   13628:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
   1362a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   1362c:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
   1362e:	715a      	strb	r2, [r3, #5]
}
   13630:	bd38      	pop	{r3, r4, r5, pc}
   13632:	bf00      	nop
   13634:	000328fa 	.word	0x000328fa
   13638:	00032486 	.word	0x00032486
   1363c:	000328c9 	.word	0x000328c9

00013640 <shell_backend_cmd_execute>:
{
   13640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
   13644:	f852 bc04 	ldr.w	fp, [r2, #-4]
	return __log_backends_end - __log_backends_start;
   13648:	4c18      	ldr	r4, [pc, #96]	; (136ac <shell_backend_cmd_execute+0x6c>)
   1364a:	4e19      	ldr	r6, [pc, #100]	; (136b0 <shell_backend_cmd_execute+0x70>)
{
   1364c:	9300      	str	r3, [sp, #0]
   1364e:	4607      	mov	r7, r0
	size_t slen = strlen(name);
   13650:	4658      	mov	r0, fp
{
   13652:	4691      	mov	r9, r2
   13654:	468a      	mov	sl, r1
	size_t slen = strlen(name);
   13656:	f7f9 fead 	bl	d3b4 <strlen>
   1365a:	1b36      	subs	r6, r6, r4
   1365c:	4602      	mov	r2, r0
   1365e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   13660:	f04f 0800 	mov.w	r8, #0
   13664:	45b0      	cmp	r8, r6
   13666:	db08      	blt.n	1367a <shell_backend_cmd_execute+0x3a>
		shell_error(shell, "Invalid backend: %s", name);
   13668:	4a12      	ldr	r2, [pc, #72]	; (136b4 <shell_backend_cmd_execute+0x74>)
   1366a:	465b      	mov	r3, fp
   1366c:	2101      	movs	r1, #1
   1366e:	4638      	mov	r0, r7
   13670:	f019 ff84 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   13674:	f06f 0507 	mvn.w	r5, #7
   13678:	e013      	b.n	136a2 <shell_backend_cmd_execute+0x62>
		if (strncmp(name, backend->name, slen) == 0) {
   1367a:	68a1      	ldr	r1, [r4, #8]
   1367c:	9201      	str	r2, [sp, #4]
   1367e:	4658      	mov	r0, fp
   13680:	f01c fff0 	bl	30664 <strncmp>
   13684:	3410      	adds	r4, #16
   13686:	4605      	mov	r5, r0
   13688:	b118      	cbz	r0, 13692 <shell_backend_cmd_execute+0x52>
	for (int i = 0; i < log_backend_count_get(); i++) {
   1368a:	9a01      	ldr	r2, [sp, #4]
   1368c:	f108 0801 	add.w	r8, r8, #1
   13690:	e7e8      	b.n	13664 <shell_backend_cmd_execute+0x24>
		func(shell, backend, argc, argv);
   13692:	4906      	ldr	r1, [pc, #24]	; (136ac <shell_backend_cmd_execute+0x6c>)
   13694:	9c00      	ldr	r4, [sp, #0]
   13696:	464b      	mov	r3, r9
   13698:	4652      	mov	r2, sl
   1369a:	eb01 1108 	add.w	r1, r1, r8, lsl #4
   1369e:	4638      	mov	r0, r7
   136a0:	47a0      	blx	r4
}
   136a2:	4628      	mov	r0, r5
   136a4:	b003      	add	sp, #12
   136a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136aa:	bf00      	nop
   136ac:	00030ca4 	.word	0x00030ca4
   136b0:	00030cb4 	.word	0x00030cb4
   136b4:	00032bc1 	.word	0x00032bc1

000136b8 <cmd_log_backend_status>:
{
   136b8:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
   136ba:	4b02      	ldr	r3, [pc, #8]	; (136c4 <cmd_log_backend_status+0xc>)
   136bc:	f7ff ffc0 	bl	13640 <shell_backend_cmd_execute>
}
   136c0:	2000      	movs	r0, #0
   136c2:	bd08      	pop	{r3, pc}
   136c4:	000134f5 	.word	0x000134f5

000136c8 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
   136c8:	4b01      	ldr	r3, [pc, #4]	; (136d0 <cmd_log_backend_halt+0x8>)
   136ca:	f7ff bfb9 	b.w	13640 <shell_backend_cmd_execute>
   136ce:	bf00      	nop
   136d0:	0002d28f 	.word	0x0002d28f

000136d4 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
   136d4:	4b01      	ldr	r3, [pc, #4]	; (136dc <cmd_log_backend_go+0x8>)
   136d6:	f7ff bfb3 	b.w	13640 <shell_backend_cmd_execute>
   136da:	bf00      	nop
   136dc:	0002d29b 	.word	0x0002d29b

000136e0 <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
   136e0:	4b01      	ldr	r3, [pc, #4]	; (136e8 <cmd_log_backend_enable+0x8>)
   136e2:	f7ff bfad 	b.w	13640 <shell_backend_cmd_execute>
   136e6:	bf00      	nop
   136e8:	000137e9 	.word	0x000137e9

000136ec <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
   136ec:	4b01      	ldr	r3, [pc, #4]	; (136f4 <cmd_log_backend_disable+0x8>)
   136ee:	f7ff bfa7 	b.w	13640 <shell_backend_cmd_execute>
   136f2:	bf00      	nop
   136f4:	0002d31d 	.word	0x0002d31d

000136f8 <shell_state_precheck>:
{
   136f8:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
   136fa:	69c3      	ldr	r3, [r0, #28]
   136fc:	68db      	ldr	r3, [r3, #12]
   136fe:	791c      	ldrb	r4, [r3, #4]
   13700:	b92c      	cbnz	r4, 1370e <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
   13702:	4a04      	ldr	r2, [pc, #16]	; (13714 <shell_state_precheck+0x1c>)
   13704:	2101      	movs	r1, #1
   13706:	f019 ff39 	bl	2d57c <shell_fprintf>
   1370a:	4620      	mov	r0, r4
}
   1370c:	bd10      	pop	{r4, pc}
	return true;
   1370e:	2001      	movs	r0, #1
   13710:	e7fc      	b.n	1370c <shell_state_precheck+0x14>
   13712:	bf00      	nop
   13714:	00032bd6 	.word	0x00032bd6

00013718 <filters_set>:
{
   13718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1371c:	4e2c      	ldr	r6, [pc, #176]	; (137d0 <filters_set+0xb8>)
   1371e:	461f      	mov	r7, r3
   13720:	4b2c      	ldr	r3, [pc, #176]	; (137d4 <filters_set+0xbc>)
   13722:	1af6      	subs	r6, r6, r3
	int cnt = all ? z_log_sources_count() : argc;
   13724:	1e15      	subs	r5, r2, #0
{
   13726:	b085      	sub	sp, #20
   13728:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? z_log_sources_count() : argc;
   1372c:	bf14      	ite	ne
   1372e:	462b      	movne	r3, r5
   13730:	4633      	moveq	r3, r6
   13732:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
   13734:	684b      	ldr	r3, [r1, #4]
   13736:	795b      	ldrb	r3, [r3, #5]
{
   13738:	4680      	mov	r8, r0
   1373a:	4689      	mov	r9, r1
	if (!backend->cb->active) {
   1373c:	b91b      	cbnz	r3, 13746 <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
   1373e:	4a26      	ldr	r2, [pc, #152]	; (137d8 <filters_set+0xc0>)
   13740:	2103      	movs	r1, #3
   13742:	f019 ff1b 	bl	2d57c <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
   13746:	f8df a09c 	ldr.w	sl, [pc, #156]	; 137e4 <filters_set+0xcc>
	for (i = 0U; i < modules_cnt; i++) {
   1374a:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
   1374c:	9b02      	ldr	r3, [sp, #8]
   1374e:	429c      	cmp	r4, r3
   13750:	db02      	blt.n	13758 <filters_set+0x40>
}
   13752:	b005      	add	sp, #20
   13754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
   13758:	b3bd      	cbz	r5, 137ca <filters_set+0xb2>
   1375a:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
   1375e:	2300      	movs	r3, #0
   13760:	429e      	cmp	r6, r3
   13762:	d107      	bne.n	13774 <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
   13764:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   13768:	4a1c      	ldr	r2, [pc, #112]	; (137dc <filters_set+0xc4>)
   1376a:	2101      	movs	r1, #1
   1376c:	4640      	mov	r0, r8
   1376e:	f019 ff05 	bl	2d57c <shell_fprintf>
   13772:	e023      	b.n	137bc <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
   13774:	4619      	mov	r1, r3
   13776:	2000      	movs	r0, #0
   13778:	9303      	str	r3, [sp, #12]
   1377a:	f7ff f9df 	bl	12b3c <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
   1377e:	2240      	movs	r2, #64	; 0x40
   13780:	4659      	mov	r1, fp
   13782:	f01c ff6f 	bl	30664 <strncmp>
   13786:	9b03      	ldr	r3, [sp, #12]
   13788:	b9d0      	cbnz	r0, 137c0 <filters_set+0xa8>
			return i;
   1378a:	461a      	mov	r2, r3
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   1378c:	2100      	movs	r1, #0
   1378e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   13790:	b212      	sxth	r2, r2
   13792:	4648      	mov	r0, r9
   13794:	f7ff fa18 	bl	12bc8 <z_impl_log_filter_set>
			if (set_lvl != level) {
   13798:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1379a:	4283      	cmp	r3, r0
   1379c:	4683      	mov	fp, r0
   1379e:	d00d      	beq.n	137bc <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
   137a0:	b985      	cbnz	r5, 137c4 <filters_set+0xac>
					log_source_name_get(
   137a2:	4621      	mov	r1, r4
   137a4:	4628      	mov	r0, r5
   137a6:	f7ff f9c9 	bl	12b3c <log_source_name_get>
   137aa:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
   137ac:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
   137b0:	9200      	str	r2, [sp, #0]
   137b2:	2103      	movs	r1, #3
   137b4:	4a0a      	ldr	r2, [pc, #40]	; (137e0 <filters_set+0xc8>)
   137b6:	4640      	mov	r0, r8
   137b8:	f019 fee0 	bl	2d57c <shell_fprintf>
	for (i = 0; i < cnt; i++) {
   137bc:	3401      	adds	r4, #1
   137be:	e7c5      	b.n	1374c <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
   137c0:	3301      	adds	r3, #1
   137c2:	e7cd      	b.n	13760 <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
   137c4:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   137c8:	e7f0      	b.n	137ac <filters_set+0x94>
   137ca:	4622      	mov	r2, r4
   137cc:	e7de      	b.n	1378c <filters_set+0x74>
   137ce:	bf00      	nop
   137d0:	00030ca4 	.word	0x00030ca4
   137d4:	00030bd4 	.word	0x00030bd4
   137d8:	00032bfa 	.word	0x00032bfa
   137dc:	00032c25 	.word	0x00032c25
   137e0:	00032c0f 	.word	0x00032c0f
   137e4:	00031010 	.word	0x00031010

000137e8 <log_enable>:
{
   137e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
   137ec:	f8d3 b004 	ldr.w	fp, [r3, #4]
   137f0:	f8df a050 	ldr.w	sl, [pc, #80]	; 13844 <log_enable+0x5c>
{
   137f4:	4606      	mov	r6, r0
   137f6:	4688      	mov	r8, r1
   137f8:	4691      	mov	r9, r2
   137fa:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   137fc:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
   137fe:	f85a 1b04 	ldr.w	r1, [sl], #4
   13802:	2204      	movs	r2, #4
   13804:	4658      	mov	r0, fp
   13806:	f01c ff2d 	bl	30664 <strncmp>
   1380a:	4604      	mov	r4, r0
   1380c:	b170      	cbz	r0, 1382c <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   1380e:	3701      	adds	r7, #1
   13810:	2f05      	cmp	r7, #5
   13812:	d1f4      	bne.n	137fe <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
   13814:	686b      	ldr	r3, [r5, #4]
   13816:	4a0a      	ldr	r2, [pc, #40]	; (13840 <log_enable+0x58>)
   13818:	2101      	movs	r1, #1
   1381a:	4630      	mov	r0, r6
   1381c:	f019 feae 	bl	2d57c <shell_fprintf>
   13820:	f06f 0407 	mvn.w	r4, #7
}
   13824:	4620      	mov	r0, r4
   13826:	b003      	add	sp, #12
   13828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
   1382c:	9700      	str	r7, [sp, #0]
   1382e:	f105 0308 	add.w	r3, r5, #8
   13832:	f1a9 0202 	sub.w	r2, r9, #2
   13836:	4641      	mov	r1, r8
   13838:	4630      	mov	r0, r6
   1383a:	f7ff ff6d 	bl	13718 <filters_set>
	return 0;
   1383e:	e7f1      	b.n	13824 <log_enable+0x3c>
   13840:	00032c3f 	.word	0x00032c3f
   13844:	00031010 	.word	0x00031010

00013848 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
   13848:	b513      	push	{r0, r1, r4, lr}
   1384a:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
   1384c:	f011 fdce 	bl	253ec <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
   13850:	f3c0 2307 	ubfx	r3, r0, #8, #8
   13854:	9301      	str	r3, [sp, #4]
   13856:	f3c0 4307 	ubfx	r3, r0, #16, #8
   1385a:	9300      	str	r3, [sp, #0]
   1385c:	4a04      	ldr	r2, [pc, #16]	; (13870 <cmd_kernel_version+0x28>)
   1385e:	0e03      	lsrs	r3, r0, #24
   13860:	2108      	movs	r1, #8
   13862:	4620      	mov	r0, r4
   13864:	f019 fe8a 	bl	2d57c <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
   13868:	2000      	movs	r0, #0
   1386a:	b002      	add	sp, #8
   1386c:	bd10      	pop	{r4, pc}
   1386e:	bf00      	nop
   13870:	00032df3 	.word	0x00032df3

00013874 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
   13874:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   13878:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
   1387a:	f01c fdef 	bl	3045c <z_impl_k_uptime_ticks>
   1387e:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   13882:	fba0 bc05 	umull	fp, ip, r0, r5
   13886:	fb05 cc01 	mla	ip, r5, r1, ip
   1388a:	ea4f 32db 	mov.w	r2, fp, lsr #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
   1388e:	ea42 434c 	orr.w	r3, r2, ip, lsl #17
   13892:	4620      	mov	r0, r4
   13894:	4a03      	ldr	r2, [pc, #12]	; (138a4 <cmd_kernel_uptime+0x30>)
   13896:	2108      	movs	r1, #8
   13898:	f019 fe70 	bl	2d57c <shell_fprintf>
	return 0;
}
   1389c:	2000      	movs	r0, #0
   1389e:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   138a2:	bf00      	nop
   138a4:	00032e0c 	.word	0x00032e0c

000138a8 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
   138a8:	b510      	push	{r4, lr}
   138aa:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
   138ac:	f00f fa70 	bl	22d90 <sys_clock_elapsed>
   138b0:	4a08      	ldr	r2, [pc, #32]	; (138d4 <cmd_kernel_threads+0x2c>)
   138b2:	4603      	mov	r3, r0
   138b4:	2108      	movs	r1, #8
   138b6:	4620      	mov	r0, r4
   138b8:	f019 fe60 	bl	2d57c <shell_fprintf>
	shell_print(shell, "Threads:");
   138bc:	4a06      	ldr	r2, [pc, #24]	; (138d8 <cmd_kernel_threads+0x30>)
   138be:	4620      	mov	r0, r4
   138c0:	2108      	movs	r1, #8
   138c2:	f019 fe5b 	bl	2d57c <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
   138c6:	4805      	ldr	r0, [pc, #20]	; (138dc <cmd_kernel_threads+0x34>)
   138c8:	4621      	mov	r1, r4
   138ca:	f011 fb15 	bl	24ef8 <k_thread_foreach>
	return 0;
}
   138ce:	2000      	movs	r0, #0
   138d0:	bd10      	pop	{r4, pc}
   138d2:	bf00      	nop
   138d4:	00032e1b 	.word	0x00032e1b
   138d8:	00032e3a 	.word	0x00032e3a
   138dc:	00013941 	.word	0x00013941

000138e0 <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
   138e0:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
   138e2:	4601      	mov	r1, r0
{
   138e4:	b087      	sub	sp, #28
   138e6:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
   138e8:	4811      	ldr	r0, [pc, #68]	; (13930 <cmd_kernel_stacks+0x50>)
   138ea:	f011 fb05 	bl	24ef8 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
   138ee:	4a11      	ldr	r2, [pc, #68]	; (13934 <cmd_kernel_stacks+0x54>)
		unused = 0;
   138f0:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
   138f2:	f812 1b01 	ldrb.w	r1, [r2], #1
   138f6:	29aa      	cmp	r1, #170	; 0xaa
   138f8:	d103      	bne.n	13902 <cmd_kernel_stacks+0x22>
				unused++;
   138fa:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
   138fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   13900:	d1f7      	bne.n	138f2 <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
   13902:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   13906:	2264      	movs	r2, #100	; 0x64
   13908:	434a      	muls	r2, r1
   1390a:	0ad2      	lsrs	r2, r2, #11
   1390c:	9205      	str	r2, [sp, #20]
   1390e:	2500      	movs	r5, #0
   13910:	f44f 6200 	mov.w	r2, #2048	; 0x800
   13914:	e9cd 1203 	strd	r1, r2, [sp, #12]
   13918:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1391c:	4620      	mov	r0, r4
   1391e:	4b06      	ldr	r3, [pc, #24]	; (13938 <cmd_kernel_stacks+0x58>)
   13920:	4a06      	ldr	r2, [pc, #24]	; (1393c <cmd_kernel_stacks+0x5c>)
   13922:	9500      	str	r5, [sp, #0]
   13924:	2108      	movs	r1, #8
   13926:	f019 fe29 	bl	2d57c <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
   1392a:	4628      	mov	r0, r5
   1392c:	b007      	add	sp, #28
   1392e:	bd30      	pop	{r4, r5, pc}
   13930:	00013a6d 	.word	0x00013a6d
   13934:	20006ac0 	.word	0x20006ac0
   13938:	20006aa0 	.word	0x20006aa0
   1393c:	00032e44 	.word	0x00032e44

00013940 <shell_tdata_dump>:
{
   13940:	b5f0      	push	{r4, r5, r6, r7, lr}
   13942:	b08b      	sub	sp, #44	; 0x2c
	size_t size = thread->stack_info.size;
   13944:	f8d0 70a8 	ldr.w	r7, [r0, #168]	; 0xa8
{
   13948:	4604      	mov	r4, r0
   1394a:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
   1394c:	f01c fc90 	bl	30270 <k_thread_name_get>
   13950:	4606      	mov	r6, r0
	return z_impl_z_current_get();
   13952:	f014 f941 	bl	27bd8 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
   13956:	4b34      	ldr	r3, [pc, #208]	; (13a28 <shell_tdata_dump+0xe8>)
   13958:	4a34      	ldr	r2, [pc, #208]	; (13a2c <shell_tdata_dump+0xec>)
   1395a:	2e00      	cmp	r6, #0
   1395c:	bf08      	it	eq
   1395e:	461e      	moveq	r6, r3
   13960:	4b33      	ldr	r3, [pc, #204]	; (13a30 <shell_tdata_dump+0xf0>)
   13962:	e9cd 4600 	strd	r4, r6, [sp]
   13966:	4284      	cmp	r4, r0
   13968:	bf18      	it	ne
   1396a:	4613      	movne	r3, r2
   1396c:	2108      	movs	r1, #8
   1396e:	4a31      	ldr	r2, [pc, #196]	; (13a34 <shell_tdata_dump+0xf4>)
   13970:	4628      	mov	r0, r5
   13972:	f019 fe03 	bl	2d57c <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
   13976:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   1397a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   1397e:	f994 300e 	ldrsb.w	r3, [r4, #14]
   13982:	4a2d      	ldr	r2, [pc, #180]	; (13a38 <shell_tdata_dump+0xf8>)
   13984:	9300      	str	r3, [sp, #0]
   13986:	2108      	movs	r1, #8
   13988:	7b23      	ldrb	r3, [r4, #12]
   1398a:	4628      	mov	r0, r5
   1398c:	f019 fdf6 	bl	2d57c <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
   13990:	4620      	mov	r0, r4
   13992:	f011 fa51 	bl	24e38 <k_thread_state_str>
   13996:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   13998:	9200      	str	r2, [sp, #0]
   1399a:	4603      	mov	r3, r0
   1399c:	4a27      	ldr	r2, [pc, #156]	; (13a3c <shell_tdata_dump+0xfc>)
   1399e:	2108      	movs	r1, #8
   139a0:	4628      	mov	r0, r5
   139a2:	f019 fdeb 	bl	2d57c <shell_fprintf>
	if (k_thread_runtime_stats_get(thread, &rt_stats_thread) != 0) {
   139a6:	a906      	add	r1, sp, #24
   139a8:	4620      	mov	r0, r4
   139aa:	f01c fc75 	bl	30298 <k_thread_runtime_stats_get>
   139ae:	4606      	mov	r6, r0
	if (k_thread_runtime_stats_all_get(&rt_stats_all) != 0) {
   139b0:	a808      	add	r0, sp, #32
   139b2:	f011 fd07 	bl	253c4 <k_thread_runtime_stats_all_get>
   139b6:	ea56 0300 	orrs.w	r3, r6, r0
   139ba:	d11e      	bne.n	139fa <shell_tdata_dump+0xba>
		pcnt = (rt_stats_thread.execution_cycles * 100U) /
   139bc:	9e06      	ldr	r6, [sp, #24]
   139be:	9a07      	ldr	r2, [sp, #28]
   139c0:	2364      	movs	r3, #100	; 0x64
   139c2:	fba6 0103 	umull	r0, r1, r6, r3
   139c6:	fb03 1102 	mla	r1, r3, r2, r1
   139ca:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   139ce:	f7ed fc37 	bl	1240 <__aeabi_uldivmod>
		shell_print(shell, "\tTotal execution cycles: %u (%u %%)",
   139d2:	4a1b      	ldr	r2, [pc, #108]	; (13a40 <shell_tdata_dump+0x100>)
		pcnt = (rt_stats_thread.execution_cycles * 100U) /
   139d4:	9000      	str	r0, [sp, #0]
		shell_print(shell, "\tTotal execution cycles: %u (%u %%)",
   139d6:	4633      	mov	r3, r6
   139d8:	2108      	movs	r1, #8
   139da:	4628      	mov	r0, r5
   139dc:	f019 fdce 	bl	2d57c <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
   139e0:	a905      	add	r1, sp, #20
   139e2:	4620      	mov	r0, r4
   139e4:	f01c fc48 	bl	30278 <z_impl_k_thread_stack_space_get>
	if (ret) {
   139e8:	4603      	mov	r3, r0
   139ea:	b160      	cbz	r0, 13a06 <shell_tdata_dump+0xc6>
		shell_print(shell,
   139ec:	4a15      	ldr	r2, [pc, #84]	; (13a44 <shell_tdata_dump+0x104>)
   139ee:	2108      	movs	r1, #8
   139f0:	4628      	mov	r0, r5
   139f2:	f019 fdc3 	bl	2d57c <shell_fprintf>
}
   139f6:	b00b      	add	sp, #44	; 0x2c
   139f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_print(shell, "\tTotal execution cycles: ? (? %%)");
   139fa:	4a13      	ldr	r2, [pc, #76]	; (13a48 <shell_tdata_dump+0x108>)
   139fc:	2108      	movs	r1, #8
   139fe:	4628      	mov	r0, r5
   13a00:	f019 fdbc 	bl	2d57c <shell_fprintf>
   13a04:	e7ec      	b.n	139e0 <shell_tdata_dump+0xa0>
		pcnt = ((size - unused) * 100U) / size;
   13a06:	9a05      	ldr	r2, [sp, #20]
   13a08:	2364      	movs	r3, #100	; 0x64
   13a0a:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
   13a0c:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
   13a10:	434b      	muls	r3, r1
		shell_print(shell,
   13a12:	4a0e      	ldr	r2, [pc, #56]	; (13a4c <shell_tdata_dump+0x10c>)
		pcnt = ((size - unused) * 100U) / size;
   13a14:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
   13a18:	2108      	movs	r1, #8
   13a1a:	e9cd 7302 	strd	r7, r3, [sp, #8]
   13a1e:	4628      	mov	r0, r5
   13a20:	463b      	mov	r3, r7
   13a22:	f019 fdab 	bl	2d57c <shell_fprintf>
}
   13a26:	e7e6      	b.n	139f6 <shell_tdata_dump+0xb6>
   13a28:	00032e8a 	.word	0x00032e8a
   13a2c:	000329e5 	.word	0x000329e5
   13a30:	00034596 	.word	0x00034596
   13a34:	00032e8d 	.word	0x00032e8d
   13a38:	00032e99 	.word	0x00032e99
   13a3c:	00032ec5 	.word	0x00032ec5
   13a40:	00032edc 	.word	0x00032edc
   13a44:	00032f24 	.word	0x00032f24
   13a48:	00032f01 	.word	0x00032f01
   13a4c:	00032f51 	.word	0x00032f51

00013a50 <cmd_kernel_cycles>:
{
   13a50:	b510      	push	{r4, lr}
   13a52:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   13a54:	f01c fb10 	bl	30078 <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
   13a58:	4a03      	ldr	r2, [pc, #12]	; (13a68 <cmd_kernel_cycles+0x18>)
   13a5a:	4603      	mov	r3, r0
   13a5c:	2108      	movs	r1, #8
   13a5e:	4620      	mov	r0, r4
   13a60:	f019 fd8c 	bl	2d57c <shell_fprintf>
}
   13a64:	2000      	movs	r0, #0
   13a66:	bd10      	pop	{r4, pc}
   13a68:	00032f88 	.word	0x00032f88

00013a6c <shell_stack_dump>:
{
   13a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
   13a6e:	f8d0 60a8 	ldr.w	r6, [r0, #168]	; 0xa8
{
   13a72:	b089      	sub	sp, #36	; 0x24
   13a74:	4604      	mov	r4, r0
   13a76:	460d      	mov	r5, r1
   13a78:	a907      	add	r1, sp, #28
   13a7a:	f01c fbfd 	bl	30278 <z_impl_k_thread_stack_space_get>
	if (ret) {
   13a7e:	4603      	mov	r3, r0
   13a80:	b130      	cbz	r0, 13a90 <shell_stack_dump+0x24>
		shell_print(shell,
   13a82:	4a10      	ldr	r2, [pc, #64]	; (13ac4 <shell_stack_dump+0x58>)
   13a84:	2108      	movs	r1, #8
   13a86:	4628      	mov	r0, r5
   13a88:	f019 fd78 	bl	2d57c <shell_fprintf>
}
   13a8c:	b009      	add	sp, #36	; 0x24
   13a8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
   13a90:	4620      	mov	r0, r4
   13a92:	f01c fbed 	bl	30270 <k_thread_name_get>
	shell_print((const struct shell *)user_data,
   13a96:	4f0c      	ldr	r7, [pc, #48]	; (13ac8 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
   13a98:	9a07      	ldr	r2, [sp, #28]
	shell_print((const struct shell *)user_data,
   13a9a:	2800      	cmp	r0, #0
   13a9c:	bf08      	it	eq
   13a9e:	4638      	moveq	r0, r7
	pcnt = ((size - unused) * 100U) / size;
   13aa0:	1ab1      	subs	r1, r6, r2
   13aa2:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
   13aa4:	e9cd 2102 	strd	r2, r1, [sp, #8]
   13aa8:	e9cd 0600 	strd	r0, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
   13aac:	434b      	muls	r3, r1
	shell_print((const struct shell *)user_data,
   13aae:	4a07      	ldr	r2, [pc, #28]	; (13acc <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
   13ab0:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
   13ab4:	2108      	movs	r1, #8
   13ab6:	e9cd 6304 	strd	r6, r3, [sp, #16]
   13aba:	4628      	mov	r0, r5
   13abc:	4623      	mov	r3, r4
   13abe:	f019 fd5d 	bl	2d57c <shell_fprintf>
   13ac2:	e7e3      	b.n	13a8c <shell_stack_dump+0x20>
   13ac4:	00032f24 	.word	0x00032f24
   13ac8:	00032e8a 	.word	0x00032e8a
   13acc:	00032f9e 	.word	0x00032f9e

00013ad0 <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
   13ad0:	4603      	mov	r3, r0
	const char *name = dev->name;
   13ad2:	6800      	ldr	r0, [r0, #0]
{
   13ad4:	b510      	push	{r4, lr}
   13ad6:	460c      	mov	r4, r1
   13ad8:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
   13ada:	b108      	cbz	r0, 13ae0 <get_device_name+0x10>
   13adc:	7802      	ldrb	r2, [r0, #0]
   13ade:	b922      	cbnz	r2, 13aea <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
   13ae0:	4a02      	ldr	r2, [pc, #8]	; (13aec <get_device_name+0x1c>)
   13ae2:	4620      	mov	r0, r4
   13ae4:	f018 f936 	bl	2bd54 <sniprintf>
   13ae8:	4620      	mov	r0, r4
		name = buf;
	}

	return name;
}
   13aea:	bd10      	pop	{r4, pc}
   13aec:	000330a8 	.word	0x000330a8

00013af0 <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
   13af0:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
   13af2:	680c      	ldr	r4, [r1, #0]
   13af4:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
   13af8:	f7ff ffea 	bl	13ad0 <get_device_name>
   13afc:	4a03      	ldr	r2, [pc, #12]	; (13b0c <cmd_device_list_visitor+0x1c>)
   13afe:	4603      	mov	r3, r0
   13b00:	2108      	movs	r1, #8
   13b02:	4620      	mov	r0, r4
   13b04:	f019 fd3a 	bl	2d57c <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
   13b08:	2000      	movs	r0, #0
   13b0a:	bd10      	pop	{r4, pc}
   13b0c:	000330ad 	.word	0x000330ad

00013b10 <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
   13b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13b14:	b08a      	sub	sp, #40	; 0x28
   13b16:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
   13b18:	a801      	add	r0, sp, #4
   13b1a:	f010 fda3 	bl	24664 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
   13b1e:	9b01      	ldr	r3, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   13b20:	4a1b      	ldr	r2, [pc, #108]	; (13b90 <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   13b22:	f8df 8078 	ldr.w	r8, [pc, #120]	; 13b9c <cmd_device_list+0x8c>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
   13b26:	f8df 9078 	ldr.w	r9, [pc, #120]	; 13ba0 <cmd_device_list+0x90>
   13b2a:	f8df a078 	ldr.w	sl, [pc, #120]	; 13ba4 <cmd_device_list+0x94>
	const struct device *devlist_end = devlist + devcnt;
   13b2e:	2618      	movs	r6, #24
   13b30:	fb06 3600 	mla	r6, r6, r0, r3
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   13b34:	2108      	movs	r1, #8
   13b36:	4628      	mov	r0, r5
   13b38:	f019 fd20 	bl	2d57c <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
   13b3c:	9c01      	ldr	r4, [sp, #4]
   13b3e:	42b4      	cmp	r4, r6
   13b40:	d303      	bcc.n	13b4a <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
   13b42:	2000      	movs	r0, #0
   13b44:	b00a      	add	sp, #40	; 0x28
   13b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
   13b4a:	af05      	add	r7, sp, #20
   13b4c:	4639      	mov	r1, r7
   13b4e:	2214      	movs	r2, #20
   13b50:	4620      	mov	r0, r4
   13b52:	f7ff ffbd 	bl	13ad0 <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   13b56:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
   13b58:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   13b5a:	2108      	movs	r1, #8
   13b5c:	4628      	mov	r0, r5
   13b5e:	f019 fd0d 	bl	2d57c <shell_fprintf>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   13b62:	4620      	mov	r0, r4
   13b64:	f01c fb38 	bl	301d8 <z_device_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
   13b68:	4a0a      	ldr	r2, [pc, #40]	; (13b94 <cmd_device_list+0x84>)
   13b6a:	2800      	cmp	r0, #0
   13b6c:	bf14      	ite	ne
   13b6e:	464b      	movne	r3, r9
   13b70:	4653      	moveq	r3, sl
   13b72:	2108      	movs	r1, #8
   13b74:	4628      	mov	r0, r5
   13b76:	f019 fd01 	bl	2d57c <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
   13b7a:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   13b7c:	4620      	mov	r0, r4
   13b7e:	4906      	ldr	r1, [pc, #24]	; (13b98 <cmd_device_list+0x88>)
			struct cmd_device_list_visitor_context ctx = {
   13b80:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   13b82:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
   13b84:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
   13b88:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   13b8a:	f01c fb2f 	bl	301ec <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
   13b8e:	e7d6      	b.n	13b3e <cmd_device_list+0x2e>
   13b90:	000330cc 	.word	0x000330cc
   13b94:	00035d1a 	.word	0x00035d1a
   13b98:	00013af1 	.word	0x00013af1
   13b9c:	000330d6 	.word	0x000330d6
   13ba0:	000330bd 	.word	0x000330bd
   13ba4:	000330c3 	.word	0x000330c3

00013ba8 <device_get_config_level>:
{
   13ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   13bac:	4b11      	ldr	r3, [pc, #68]	; (13bf4 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
   13bae:	f8df 9048 	ldr.w	r9, [pc, #72]	; 13bf8 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   13bb2:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   13bb6:	3101      	adds	r1, #1
{
   13bb8:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   13bba:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
   13bbe:	4606      	mov	r6, r0
	bool devices = false;
   13bc0:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   13bc2:	45a0      	cmp	r8, r4
   13bc4:	d803      	bhi.n	13bce <device_get_config_level+0x26>
}
   13bc6:	4638      	mov	r0, r7
   13bc8:	b007      	add	sp, #28
   13bca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13bce:	4620      	mov	r0, r4
   13bd0:	f01c fb02 	bl	301d8 <z_device_ready>
   13bd4:	4605      	mov	r5, r0
   13bd6:	b158      	cbz	r0, 13bf0 <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
   13bd8:	2214      	movs	r2, #20
   13bda:	a901      	add	r1, sp, #4
   13bdc:	4620      	mov	r0, r4
   13bde:	f7ff ff77 	bl	13ad0 <get_device_name>
   13be2:	464a      	mov	r2, r9
   13be4:	4603      	mov	r3, r0
   13be6:	2108      	movs	r1, #8
   13be8:	4630      	mov	r0, r6
   13bea:	f019 fcc7 	bl	2d57c <shell_fprintf>
			devices = true;
   13bee:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   13bf0:	3418      	adds	r4, #24
   13bf2:	e7e6      	b.n	13bc2 <device_get_config_level+0x1a>
   13bf4:	00031288 	.word	0x00031288
   13bf8:	000330db 	.word	0x000330db

00013bfc <cmd_device_levels>:
{
   13bfc:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
   13bfe:	2108      	movs	r1, #8
{
   13c00:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
   13c02:	4a1e      	ldr	r2, [pc, #120]	; (13c7c <cmd_device_levels+0x80>)
   13c04:	f019 fcba 	bl	2d57c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
   13c08:	2100      	movs	r1, #0
   13c0a:	4620      	mov	r0, r4
   13c0c:	f7ff ffcc 	bl	13ba8 <device_get_config_level>
	if (ret == false) {
   13c10:	b920      	cbnz	r0, 13c1c <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   13c12:	4a1b      	ldr	r2, [pc, #108]	; (13c80 <cmd_device_levels+0x84>)
   13c14:	2108      	movs	r1, #8
   13c16:	4620      	mov	r0, r4
   13c18:	f019 fcb0 	bl	2d57c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
   13c1c:	2108      	movs	r1, #8
   13c1e:	4620      	mov	r0, r4
   13c20:	4a18      	ldr	r2, [pc, #96]	; (13c84 <cmd_device_levels+0x88>)
   13c22:	f019 fcab 	bl	2d57c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
   13c26:	2101      	movs	r1, #1
   13c28:	4620      	mov	r0, r4
   13c2a:	f7ff ffbd 	bl	13ba8 <device_get_config_level>
	if (ret == false) {
   13c2e:	b920      	cbnz	r0, 13c3a <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   13c30:	4a13      	ldr	r2, [pc, #76]	; (13c80 <cmd_device_levels+0x84>)
   13c32:	2108      	movs	r1, #8
   13c34:	4620      	mov	r0, r4
   13c36:	f019 fca1 	bl	2d57c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
   13c3a:	2108      	movs	r1, #8
   13c3c:	4620      	mov	r0, r4
   13c3e:	4a12      	ldr	r2, [pc, #72]	; (13c88 <cmd_device_levels+0x8c>)
   13c40:	f019 fc9c 	bl	2d57c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
   13c44:	2102      	movs	r1, #2
   13c46:	4620      	mov	r0, r4
   13c48:	f7ff ffae 	bl	13ba8 <device_get_config_level>
	if (ret == false) {
   13c4c:	b920      	cbnz	r0, 13c58 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   13c4e:	4a0c      	ldr	r2, [pc, #48]	; (13c80 <cmd_device_levels+0x84>)
   13c50:	2108      	movs	r1, #8
   13c52:	4620      	mov	r0, r4
   13c54:	f019 fc92 	bl	2d57c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
   13c58:	2108      	movs	r1, #8
   13c5a:	4620      	mov	r0, r4
   13c5c:	4a0b      	ldr	r2, [pc, #44]	; (13c8c <cmd_device_levels+0x90>)
   13c5e:	f019 fc8d 	bl	2d57c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
   13c62:	2103      	movs	r1, #3
   13c64:	4620      	mov	r0, r4
   13c66:	f7ff ff9f 	bl	13ba8 <device_get_config_level>
	if (ret == false) {
   13c6a:	b920      	cbnz	r0, 13c76 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   13c6c:	4a04      	ldr	r2, [pc, #16]	; (13c80 <cmd_device_levels+0x84>)
   13c6e:	2108      	movs	r1, #8
   13c70:	4620      	mov	r0, r4
   13c72:	f019 fc83 	bl	2d57c <shell_fprintf>
}
   13c76:	2000      	movs	r0, #0
   13c78:	bd10      	pop	{r4, pc}
   13c7a:	bf00      	nop
   13c7c:	000330e1 	.word	0x000330e1
   13c80:	000330f0 	.word	0x000330f0
   13c84:	000330f8 	.word	0x000330f8
   13c88:	00033107 	.word	0x00033107
   13c8c:	00033115 	.word	0x00033115

00013c90 <date_print>:

#define HELP_NONE      "[none]"
#define HELP_DATE_SET  "[Y-m-d] <H:M:S>"

static void date_print(const struct shell *shell, struct tm *tm)
{
   13c90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	shell_print(shell,
   13c92:	680a      	ldr	r2, [r1, #0]
   13c94:	694b      	ldr	r3, [r1, #20]
   13c96:	9204      	str	r2, [sp, #16]
   13c98:	684a      	ldr	r2, [r1, #4]
   13c9a:	9203      	str	r2, [sp, #12]
   13c9c:	688a      	ldr	r2, [r1, #8]
   13c9e:	9202      	str	r2, [sp, #8]
   13ca0:	68ca      	ldr	r2, [r1, #12]
   13ca2:	9201      	str	r2, [sp, #4]
   13ca4:	690a      	ldr	r2, [r1, #16]
   13ca6:	3201      	adds	r2, #1
   13ca8:	9200      	str	r2, [sp, #0]
   13caa:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   13cae:	4a03      	ldr	r2, [pc, #12]	; (13cbc <date_print+0x2c>)
   13cb0:	2108      	movs	r1, #8
   13cb2:	f019 fc63 	bl	2d57c <shell_fprintf>
		    tm->tm_mon + 1,
		    tm->tm_mday,
		    tm->tm_hour,
		    tm->tm_min,
		    tm->tm_sec);
}
   13cb6:	b007      	add	sp, #28
   13cb8:	f85d fb04 	ldr.w	pc, [sp], #4
   13cbc:	00033179 	.word	0x00033179

00013cc0 <get_h_m_s>:
 * For user convenience of small adjustments to time the time argument will
 * accept H:M:S, :M:S or ::S where the missing field(s) will be filled in by
 * the previous time state.
 */
static int get_h_m_s(const struct shell *shell, struct tm *tm, char *time_str)
{
   13cc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char *endptr;

	if (*time_str == ':') {
   13cc2:	7813      	ldrb	r3, [r2, #0]
   13cc4:	2b3a      	cmp	r3, #58	; 0x3a
{
   13cc6:	4606      	mov	r6, r0
   13cc8:	460f      	mov	r7, r1
   13cca:	4615      	mov	r5, r2
	if (*time_str == ':') {
   13ccc:	d116      	bne.n	13cfc <get_h_m_s+0x3c>
		time_str++;
   13cce:	1c54      	adds	r4, r2, #1
		} else {
			return -EINVAL;
		}
	}

	if (*time_str == ':') {
   13cd0:	7823      	ldrb	r3, [r4, #0]
   13cd2:	2b3a      	cmp	r3, #58	; 0x3a
   13cd4:	d12e      	bne.n	13d34 <get_h_m_s+0x74>
		time_str++;
   13cd6:	3401      	adds	r4, #1
		} else {
			return -EINVAL;
		}
	}

	endptr = NULL;
   13cd8:	2300      	movs	r3, #0
	tm->tm_sec = strtol(time_str, &endptr, 10);
   13cda:	220a      	movs	r2, #10
   13cdc:	a901      	add	r1, sp, #4
   13cde:	4620      	mov	r0, r4
	endptr = NULL;
   13ce0:	9301      	str	r3, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   13ce2:	f018 f8e5 	bl	2beb0 <strtol>
	if ((endptr == time_str) || (*endptr != '\0')) {
   13ce6:	9a01      	ldr	r2, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   13ce8:	6038      	str	r0, [r7, #0]
	if ((endptr == time_str) || (*endptr != '\0')) {
   13cea:	42a2      	cmp	r2, r4
	tm->tm_sec = strtol(time_str, &endptr, 10);
   13cec:	4603      	mov	r3, r0
	if ((endptr == time_str) || (*endptr != '\0')) {
   13cee:	d010      	beq.n	13d12 <get_h_m_s+0x52>
   13cf0:	7810      	ldrb	r0, [r2, #0]
   13cf2:	b970      	cbnz	r0, 13d12 <get_h_m_s+0x52>
		return -EINVAL;
	}

	/* Note range allows for a leap second */
	if ((tm->tm_sec < 0) || (tm->tm_sec > 60)) {
   13cf4:	2b3c      	cmp	r3, #60	; 0x3c
   13cf6:	d90e      	bls.n	13d16 <get_h_m_s+0x56>
		shell_error(shell, "Invalid second");
   13cf8:	4a18      	ldr	r2, [pc, #96]	; (13d5c <get_h_m_s+0x9c>)
   13cfa:	e014      	b.n	13d26 <get_h_m_s+0x66>
		endptr = NULL;
   13cfc:	2300      	movs	r3, #0
		tm->tm_hour = strtol(time_str, &endptr, 10);
   13cfe:	220a      	movs	r2, #10
   13d00:	a901      	add	r1, sp, #4
   13d02:	4628      	mov	r0, r5
		endptr = NULL;
   13d04:	9301      	str	r3, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   13d06:	f018 f8d3 	bl	2beb0 <strtol>
		if (endptr == time_str) {
   13d0a:	9c01      	ldr	r4, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   13d0c:	60b8      	str	r0, [r7, #8]
		if (endptr == time_str) {
   13d0e:	42ac      	cmp	r4, r5
   13d10:	d103      	bne.n	13d1a <get_h_m_s+0x5a>
		return -EINVAL;
   13d12:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
   13d16:	b003      	add	sp, #12
   13d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (*endptr == ':') {
   13d1a:	7823      	ldrb	r3, [r4, #0]
   13d1c:	2b3a      	cmp	r3, #58	; 0x3a
   13d1e:	d1f8      	bne.n	13d12 <get_h_m_s+0x52>
			if ((tm->tm_hour < 0) || (tm->tm_hour > 23)) {
   13d20:	2817      	cmp	r0, #23
   13d22:	d905      	bls.n	13d30 <get_h_m_s+0x70>
				shell_error(shell, "Invalid hour");
   13d24:	4a0e      	ldr	r2, [pc, #56]	; (13d60 <get_h_m_s+0xa0>)
		shell_error(shell, "Invalid second");
   13d26:	2101      	movs	r1, #1
   13d28:	4630      	mov	r0, r6
   13d2a:	f019 fc27 	bl	2d57c <shell_fprintf>
   13d2e:	e7f0      	b.n	13d12 <get_h_m_s+0x52>
			time_str = endptr + 1;
   13d30:	3401      	adds	r4, #1
   13d32:	e7cd      	b.n	13cd0 <get_h_m_s+0x10>
		endptr = NULL;
   13d34:	2300      	movs	r3, #0
		tm->tm_min = strtol(time_str, &endptr, 10);
   13d36:	220a      	movs	r2, #10
   13d38:	a901      	add	r1, sp, #4
   13d3a:	4620      	mov	r0, r4
		endptr = NULL;
   13d3c:	9301      	str	r3, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   13d3e:	f018 f8b7 	bl	2beb0 <strtol>
		if (endptr == time_str) {
   13d42:	9a01      	ldr	r2, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   13d44:	6078      	str	r0, [r7, #4]
		if (endptr == time_str) {
   13d46:	42a2      	cmp	r2, r4
   13d48:	d0e3      	beq.n	13d12 <get_h_m_s+0x52>
		} else if (*endptr == ':') {
   13d4a:	7813      	ldrb	r3, [r2, #0]
   13d4c:	2b3a      	cmp	r3, #58	; 0x3a
   13d4e:	d1e0      	bne.n	13d12 <get_h_m_s+0x52>
			if ((tm->tm_min < 0) || (tm->tm_min > 59)) {
   13d50:	283b      	cmp	r0, #59	; 0x3b
   13d52:	d901      	bls.n	13d58 <get_h_m_s+0x98>
				shell_error(shell, "Invalid minute");
   13d54:	4a03      	ldr	r2, [pc, #12]	; (13d64 <get_h_m_s+0xa4>)
   13d56:	e7e6      	b.n	13d26 <get_h_m_s+0x66>
			time_str = endptr + 1;
   13d58:	1c54      	adds	r4, r2, #1
   13d5a:	e7bd      	b.n	13cd8 <get_h_m_s+0x18>
   13d5c:	000331b8 	.word	0x000331b8
   13d60:	0003319a 	.word	0x0003319a
   13d64:	000331a8 	.word	0x000331a8

00013d68 <cmd_date_set>:

static int cmd_date_set(const struct shell *shell, size_t argc, char **argv)
{
   13d68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   13d6c:	4604      	mov	r4, r0
   13d6e:	b091      	sub	sp, #68	; 0x44
   13d70:	460d      	mov	r5, r1
   13d72:	4617      	mov	r7, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   13d74:	2001      	movs	r0, #1
   13d76:	a902      	add	r1, sp, #8
   13d78:	f7fc ff9a 	bl	10cb0 <z_impl_clock_gettime>
	struct tm tm;
	int ret;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   13d7c:	a907      	add	r1, sp, #28
   13d7e:	a802      	add	r0, sp, #8
   13d80:	f017 fe80 	bl	2ba84 <gmtime_r>

	if (argc == 3) {
   13d84:	2d03      	cmp	r5, #3
   13d86:	d160      	bne.n	13e4a <cmd_date_set+0xe2>
		ret = get_y_m_d(shell, &tm, argv[1]);
   13d88:	687d      	ldr	r5, [r7, #4]
	endptr = NULL;
   13d8a:	f04f 0900 	mov.w	r9, #0
	year = strtol(date_str, &endptr, 10);
   13d8e:	220a      	movs	r2, #10
   13d90:	a901      	add	r1, sp, #4
   13d92:	4628      	mov	r0, r5
	endptr = NULL;
   13d94:	f8cd 9004 	str.w	r9, [sp, #4]
	year = strtol(date_str, &endptr, 10);
   13d98:	f018 f88a 	bl	2beb0 <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   13d9c:	9e01      	ldr	r6, [sp, #4]
   13d9e:	42b5      	cmp	r5, r6
	year = strtol(date_str, &endptr, 10);
   13da0:	4680      	mov	r8, r0
	if ((endptr == date_str) || (*endptr != '-')) {
   13da2:	d018      	beq.n	13dd6 <cmd_date_set+0x6e>
   13da4:	7832      	ldrb	r2, [r6, #0]
   13da6:	2a2d      	cmp	r2, #45	; 0x2d
   13da8:	d115      	bne.n	13dd6 <cmd_date_set+0x6e>
	date_str = endptr + 1;
   13daa:	3601      	adds	r6, #1
	month = strtol(date_str, &endptr, 10);
   13dac:	220a      	movs	r2, #10
   13dae:	a901      	add	r1, sp, #4
   13db0:	4630      	mov	r0, r6
	endptr = NULL;
   13db2:	f8cd 9004 	str.w	r9, [sp, #4]
	month = strtol(date_str, &endptr, 10);
   13db6:	f018 f87b 	bl	2beb0 <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   13dba:	9b01      	ldr	r3, [sp, #4]
   13dbc:	429e      	cmp	r6, r3
   13dbe:	d00a      	beq.n	13dd6 <cmd_date_set+0x6e>
   13dc0:	781a      	ldrb	r2, [r3, #0]
   13dc2:	2a2d      	cmp	r2, #45	; 0x2d
   13dc4:	d107      	bne.n	13dd6 <cmd_date_set+0x6e>
	if ((month < 1) || (month > 12)) {
   13dc6:	1e45      	subs	r5, r0, #1
   13dc8:	2d0b      	cmp	r5, #11
   13dca:	d90d      	bls.n	13de8 <cmd_date_set+0x80>
		shell_error(shell, "Invalid month");
   13dcc:	4a2b      	ldr	r2, [pc, #172]	; (13e7c <cmd_date_set+0x114>)
		shell_error(shell, "Invalid day");
   13dce:	2101      	movs	r1, #1
   13dd0:	4620      	mov	r0, r4
   13dd2:	f019 fbd3 	bl	2d57c <shell_fprintf>
		if (ret != 0) {
			shell_help(shell);
   13dd6:	4620      	mov	r0, r4
   13dd8:	f019 fbf5 	bl	2d5c6 <shell_help>
	tp.tv_nsec = 0;

	ret = clock_settime(CLOCK_REALTIME, &tp);
	if (ret != 0) {
		shell_error(shell, "Could not set date %d", ret);
		return -EINVAL;
   13ddc:	f06f 0515 	mvn.w	r5, #21
	}

	date_print(shell, &tm);

	return 0;
}
   13de0:	4628      	mov	r0, r5
   13de2:	b011      	add	sp, #68	; 0x44
   13de4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	date_str = endptr + 1;
   13de8:	1c5e      	adds	r6, r3, #1
	day = strtol(date_str, &endptr, 10);
   13dea:	220a      	movs	r2, #10
   13dec:	a901      	add	r1, sp, #4
   13dee:	4630      	mov	r0, r6
	endptr = NULL;
   13df0:	f8cd 9004 	str.w	r9, [sp, #4]
	day = strtol(date_str, &endptr, 10);
   13df4:	f018 f85c 	bl	2beb0 <strtol>
	if ((endptr == date_str) || (*endptr != '\0')) {
   13df8:	9b01      	ldr	r3, [sp, #4]
   13dfa:	429e      	cmp	r6, r3
   13dfc:	d0eb      	beq.n	13dd6 <cmd_date_set+0x6e>
   13dfe:	781b      	ldrb	r3, [r3, #0]
   13e00:	2b00      	cmp	r3, #0
   13e02:	d1e8      	bne.n	13dd6 <cmd_date_set+0x6e>
	if ((day < 1) || (day > 31)) {
   13e04:	1e43      	subs	r3, r0, #1
   13e06:	2b1e      	cmp	r3, #30
   13e08:	d901      	bls.n	13e0e <cmd_date_set+0xa6>
		shell_error(shell, "Invalid day");
   13e0a:	4a1d      	ldr	r2, [pc, #116]	; (13e80 <cmd_date_set+0x118>)
   13e0c:	e7df      	b.n	13dce <cmd_date_set+0x66>
	tm->tm_year = year - 1900;
   13e0e:	f2a8 736c 	subw	r3, r8, #1900	; 0x76c
	tm->tm_mon = month - 1;
   13e12:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
		ret = get_h_m_s(shell, &tm, argv[2]);
   13e16:	68ba      	ldr	r2, [r7, #8]
	tm->tm_mday = day;
   13e18:	900a      	str	r0, [sp, #40]	; 0x28
		ret = get_h_m_s(shell, &tm, argv[2]);
   13e1a:	a907      	add	r1, sp, #28
   13e1c:	4620      	mov	r0, r4
   13e1e:	f7ff ff4f 	bl	13cc0 <get_h_m_s>
		if (ret != 0) {
   13e22:	2800      	cmp	r0, #0
   13e24:	d1d7      	bne.n	13dd6 <cmd_date_set+0x6e>
	tp.tv_sec = timeutil_timegm(&tm);
   13e26:	a807      	add	r0, sp, #28
   13e28:	f018 fc2f 	bl	2c68a <timeutil_timegm>
   13e2c:	460b      	mov	r3, r1
   13e2e:	4602      	mov	r2, r0
   13e30:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (tp.tv_sec == -1) {
   13e34:	3301      	adds	r3, #1
   13e36:	bf08      	it	eq
   13e38:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   13e3c:	d109      	bne.n	13e52 <cmd_date_set+0xea>
		shell_error(shell, "Failed to calculate seconds since Epoch");
   13e3e:	4a11      	ldr	r2, [pc, #68]	; (13e84 <cmd_date_set+0x11c>)
   13e40:	2101      	movs	r1, #1
   13e42:	4620      	mov	r0, r4
   13e44:	f019 fb9a 	bl	2d57c <shell_fprintf>
		return -EINVAL;
   13e48:	e7c8      	b.n	13ddc <cmd_date_set+0x74>
	} else if (argc == 2) {
   13e4a:	2d02      	cmp	r5, #2
   13e4c:	d1c3      	bne.n	13dd6 <cmd_date_set+0x6e>
		ret = get_h_m_s(shell, &tm, argv[1]);
   13e4e:	687a      	ldr	r2, [r7, #4]
   13e50:	e7e3      	b.n	13e1a <cmd_date_set+0xb2>
	tp.tv_nsec = 0;
   13e52:	2300      	movs	r3, #0
	ret = clock_settime(CLOCK_REALTIME, &tp);
   13e54:	a902      	add	r1, sp, #8
   13e56:	2001      	movs	r0, #1
	tp.tv_nsec = 0;
   13e58:	9304      	str	r3, [sp, #16]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   13e5a:	f7fc ffbd 	bl	10dd8 <clock_settime>
	if (ret != 0) {
   13e5e:	4605      	mov	r5, r0
   13e60:	b130      	cbz	r0, 13e70 <cmd_date_set+0x108>
		shell_error(shell, "Could not set date %d", ret);
   13e62:	4603      	mov	r3, r0
   13e64:	4a08      	ldr	r2, [pc, #32]	; (13e88 <cmd_date_set+0x120>)
   13e66:	2101      	movs	r1, #1
   13e68:	4620      	mov	r0, r4
   13e6a:	f019 fb87 	bl	2d57c <shell_fprintf>
   13e6e:	e7b5      	b.n	13ddc <cmd_date_set+0x74>
	date_print(shell, &tm);
   13e70:	a907      	add	r1, sp, #28
   13e72:	4620      	mov	r0, r4
   13e74:	f7ff ff0c 	bl	13c90 <date_print>
	return 0;
   13e78:	e7b2      	b.n	13de0 <cmd_date_set+0x78>
   13e7a:	bf00      	nop
   13e7c:	000331c8 	.word	0x000331c8
   13e80:	000331d7 	.word	0x000331d7
   13e84:	000331e4 	.word	0x000331e4
   13e88:	0003320d 	.word	0x0003320d

00013e8c <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
   13e8c:	1e8b      	subs	r3, r1, #2
   13e8e:	2b02      	cmp	r3, #2
{
   13e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13e94:	4607      	mov	r7, r0
   13e96:	4688      	mov	r8, r1
   13e98:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
   13e9a:	d833      	bhi.n	13f04 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
   13e9c:	6860      	ldr	r0, [r4, #4]
   13e9e:	2210      	movs	r2, #16
   13ea0:	2100      	movs	r1, #0
   13ea2:	f018 f88b 	bl	2bfbc <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
   13ea6:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
   13eaa:	4606      	mov	r6, r0
	if (argc < 3) {
   13eac:	d01e      	beq.n	13eec <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
   13eae:	68a0      	ldr	r0, [r4, #8]
   13eb0:	220a      	movs	r2, #10
   13eb2:	2100      	movs	r1, #0
   13eb4:	f018 f882 	bl	2bfbc <strtoul>
   13eb8:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
   13eba:	4a21      	ldr	r2, [pc, #132]	; (13f40 <cmd_devmem+0xb4>)
   13ebc:	462b      	mov	r3, r5
   13ebe:	2108      	movs	r1, #8
   13ec0:	4638      	mov	r0, r7
   13ec2:	f019 fb5b 	bl	2d57c <shell_fprintf>

	if (argc <= 3) {
   13ec6:	f1b8 0f04 	cmp.w	r8, #4
   13eca:	d01e      	beq.n	13f0a <cmd_devmem+0x7e>
	switch (width) {
   13ecc:	2d10      	cmp	r5, #16
   13ece:	d00f      	beq.n	13ef0 <cmd_devmem+0x64>
   13ed0:	2d20      	cmp	r5, #32
   13ed2:	d010      	beq.n	13ef6 <cmd_devmem+0x6a>
   13ed4:	2d08      	cmp	r5, #8
   13ed6:	d110      	bne.n	13efa <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
   13ed8:	7833      	ldrb	r3, [r6, #0]
   13eda:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
   13edc:	4a19      	ldr	r2, [pc, #100]	; (13f44 <cmd_devmem+0xb8>)
   13ede:	2108      	movs	r1, #8
   13ee0:	4638      	mov	r0, r7
   13ee2:	f019 fb4b 	bl	2d57c <shell_fprintf>
	int err = 0;
   13ee6:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
   13ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
   13eec:	2520      	movs	r5, #32
   13eee:	e7e4      	b.n	13eba <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
   13ef0:	8833      	ldrh	r3, [r6, #0]
   13ef2:	b29b      	uxth	r3, r3
	if (err == 0) {
   13ef4:	e7f2      	b.n	13edc <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
   13ef6:	6833      	ldr	r3, [r6, #0]
   13ef8:	e7f0      	b.n	13edc <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
   13efa:	4a13      	ldr	r2, [pc, #76]	; (13f48 <cmd_devmem+0xbc>)
   13efc:	2108      	movs	r1, #8
   13efe:	4638      	mov	r0, r7
   13f00:	f019 fb3c 	bl	2d57c <shell_fprintf>
		return -EINVAL;
   13f04:	f06f 0015 	mvn.w	r0, #21
   13f08:	e7ee      	b.n	13ee8 <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
   13f0a:	68e0      	ldr	r0, [r4, #12]
   13f0c:	2210      	movs	r2, #16
   13f0e:	2100      	movs	r1, #0
   13f10:	f018 f854 	bl	2bfbc <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
   13f14:	4a0d      	ldr	r2, [pc, #52]	; (13f4c <cmd_devmem+0xc0>)
   13f16:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
   13f18:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
   13f1a:	2108      	movs	r1, #8
   13f1c:	4638      	mov	r0, r7
   13f1e:	f019 fb2d 	bl	2d57c <shell_fprintf>
	switch (width) {
   13f22:	2d10      	cmp	r5, #16
   13f24:	d006      	beq.n	13f34 <cmd_devmem+0xa8>
   13f26:	2d20      	cmp	r5, #32
   13f28:	d007      	beq.n	13f3a <cmd_devmem+0xae>
   13f2a:	2d08      	cmp	r5, #8
   13f2c:	d1e5      	bne.n	13efa <cmd_devmem+0x6e>
		sys_write8(value, addr);
   13f2e:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
   13f30:	7034      	strb	r4, [r6, #0]
   13f32:	e7d8      	b.n	13ee6 <cmd_devmem+0x5a>
		sys_write16(value, addr);
   13f34:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
   13f36:	8034      	strh	r4, [r6, #0]
   13f38:	e7d5      	b.n	13ee6 <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
   13f3a:	6034      	str	r4, [r6, #0]
   13f3c:	e7d3      	b.n	13ee6 <cmd_devmem+0x5a>
   13f3e:	bf00      	nop
   13f40:	0003324d 	.word	0x0003324d
   13f44:	00033278 	.word	0x00033278
   13f48:	00033262 	.word	0x00033262
   13f4c:	00033289 	.word	0x00033289

00013f50 <set_bypass>:
{
   13f50:	b570      	push	{r4, r5, r6, lr}
   13f52:	4c0f      	ldr	r4, [pc, #60]	; (13f90 <set_bypass+0x40>)
   13f54:	4605      	mov	r5, r0
	if (bypass && in_use) {
   13f56:	7823      	ldrb	r3, [r4, #0]
   13f58:	460e      	mov	r6, r1
   13f5a:	b139      	cbz	r1, 13f6c <set_bypass+0x1c>
   13f5c:	b133      	cbz	r3, 13f6c <set_bypass+0x1c>
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
   13f5e:	4a0d      	ldr	r2, [pc, #52]	; (13f94 <set_bypass+0x44>)
   13f60:	2101      	movs	r1, #1
   13f62:	f019 fb0b 	bl	2d57c <shell_fprintf>
   13f66:	f06f 000f 	mvn.w	r0, #15
}
   13f6a:	bd70      	pop	{r4, r5, r6, pc}
	in_use = !in_use;
   13f6c:	f083 0301 	eor.w	r3, r3, #1
   13f70:	7023      	strb	r3, [r4, #0]
	if (in_use) {
   13f72:	b133      	cbz	r3, 13f82 <set_bypass+0x32>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
   13f74:	4a08      	ldr	r2, [pc, #32]	; (13f98 <set_bypass+0x48>)
   13f76:	2108      	movs	r1, #8
   13f78:	4628      	mov	r0, r5
   13f7a:	f019 faff 	bl	2d57c <shell_fprintf>
		in_use = true;
   13f7e:	2301      	movs	r3, #1
   13f80:	7023      	strb	r3, [r4, #0]
	shell_set_bypass(sh, bypass);
   13f82:	4628      	mov	r0, r5
   13f84:	4631      	mov	r1, r6
   13f86:	f019 fb33 	bl	2d5f0 <shell_set_bypass>
	return 0;
   13f8a:	2000      	movs	r0, #0
   13f8c:	e7ed      	b.n	13f6a <set_bypass+0x1a>
   13f8e:	bf00      	nop
   13f90:	20003924 	.word	0x20003924
   13f94:	0003329d 	.word	0x0003329d
   13f98:	000332d8 	.word	0x000332d8

00013f9c <cmd_load>:
{
   13f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13fa0:	4606      	mov	r6, r0
	chunk_element = 0;
   13fa2:	482e      	ldr	r0, [pc, #184]	; (1405c <cmd_load+0xc0>)
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
   13fa4:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 14074 <cmd_load+0xd8>
		if (!strncmp(arg, "-e", 2)) {
   13fa8:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 14078 <cmd_load+0xdc>
			shell_print(sh, "Unknown option \"%s\"", arg);
   13fac:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 1407c <cmd_load+0xe0>
	littleendian = false;
   13fb0:	2300      	movs	r3, #0
	chunk_element = 0;
   13fb2:	6003      	str	r3, [r0, #0]
{
   13fb4:	460d      	mov	r5, r1
	sum = 0;
   13fb6:	482a      	ldr	r0, [pc, #168]	; (14060 <cmd_load+0xc4>)
	littleendian = false;
   13fb8:	492a      	ldr	r1, [pc, #168]	; (14064 <cmd_load+0xc8>)
	sum = 0;
   13fba:	6003      	str	r3, [r0, #0]
	littleendian = false;
   13fbc:	700b      	strb	r3, [r1, #0]
	while (argc >= 2) {
   13fbe:	4614      	mov	r4, r2
   13fc0:	9100      	str	r1, [sp, #0]
   13fc2:	2d01      	cmp	r5, #1
   13fc4:	4627      	mov	r7, r4
   13fc6:	f854 3f04 	ldr.w	r3, [r4, #4]!
   13fca:	d921      	bls.n	14010 <cmd_load+0x74>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
   13fcc:	4618      	mov	r0, r3
   13fce:	2202      	movs	r2, #2
   13fd0:	4649      	mov	r1, r9
   13fd2:	9301      	str	r3, [sp, #4]
   13fd4:	f01c fb46 	bl	30664 <strncmp>
   13fd8:	9b01      	ldr	r3, [sp, #4]
   13fda:	b988      	cbnz	r0, 14000 <cmd_load+0x64>
   13fdc:	6822      	ldr	r2, [r4, #0]
   13fde:	7892      	ldrb	r2, [r2, #2]
   13fe0:	3a00      	subs	r2, #0
   13fe2:	bf18      	it	ne
   13fe4:	2201      	movne	r2, #1
   13fe6:	eb03 0802 	add.w	r8, r3, r2
		if (!strncmp(arg, "-e", 2)) {
   13fea:	4651      	mov	r1, sl
   13fec:	2202      	movs	r2, #2
   13fee:	4640      	mov	r0, r8
   13ff0:	f01c fb38 	bl	30664 <strncmp>
   13ff4:	b930      	cbnz	r0, 14004 <cmd_load+0x68>
			littleendian = true;
   13ff6:	9a00      	ldr	r2, [sp, #0]
   13ff8:	2301      	movs	r3, #1
   13ffa:	7013      	strb	r3, [r2, #0]
		argc--;
   13ffc:	3d01      	subs	r5, #1
   13ffe:	e7e0      	b.n	13fc2 <cmd_load+0x26>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
   14000:	2200      	movs	r2, #0
   14002:	e7f0      	b.n	13fe6 <cmd_load+0x4a>
		} else if (!strcmp(arg, "--")) {
   14004:	4649      	mov	r1, r9
   14006:	4640      	mov	r0, r8
   14008:	f7f9 f9ca 	bl	d3a0 <strcmp>
   1400c:	b9b0      	cbnz	r0, 1403c <cmd_load+0xa0>
			argv++;
   1400e:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
   14010:	2200      	movs	r2, #0
   14012:	4611      	mov	r1, r2
   14014:	6878      	ldr	r0, [r7, #4]
   14016:	f017 ff4b 	bl	2beb0 <strtol>
   1401a:	4b13      	ldr	r3, [pc, #76]	; (14068 <cmd_load+0xcc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
   1401c:	2200      	movs	r2, #0
   1401e:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
   14020:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
   14022:	6878      	ldr	r0, [r7, #4]
   14024:	f017 ff44 	bl	2beb0 <strtol>
   14028:	4b10      	ldr	r3, [pc, #64]	; (1406c <cmd_load+0xd0>)
	set_bypass(sh, bypass_cb);
   1402a:	4911      	ldr	r1, [pc, #68]	; (14070 <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
   1402c:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
   1402e:	4630      	mov	r0, r6
   14030:	f7ff ff8e 	bl	13f50 <set_bypass>
}
   14034:	2000      	movs	r0, #0
   14036:	b003      	add	sp, #12
   14038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
   1403c:	f898 2000 	ldrb.w	r2, [r8]
   14040:	2a2d      	cmp	r2, #45	; 0x2d
   14042:	d1e5      	bne.n	14010 <cmd_load+0x74>
   14044:	f898 2001 	ldrb.w	r2, [r8, #1]
   14048:	2a00      	cmp	r2, #0
   1404a:	d0e1      	beq.n	14010 <cmd_load+0x74>
			shell_print(sh, "Unknown option \"%s\"", arg);
   1404c:	4643      	mov	r3, r8
   1404e:	465a      	mov	r2, fp
   14050:	2108      	movs	r1, #8
   14052:	4630      	mov	r0, r6
   14054:	f019 fa92 	bl	2d57c <shell_fprintf>
   14058:	e7d0      	b.n	13ffc <cmd_load+0x60>
   1405a:	bf00      	nop
   1405c:	200023ac 	.word	0x200023ac
   14060:	200023b4 	.word	0x200023b4
   14064:	20003925 	.word	0x20003925
   14068:	200023a8 	.word	0x200023a8
   1406c:	200023b0 	.word	0x200023b0
   14070:	00014081 	.word	0x00014081
   14074:	00033302 	.word	0x00033302
   14078:	00033305 	.word	0x00033305
   1407c:	00033308 	.word	0x00033308

00014080 <bypass_cb>:
{
   14080:	b570      	push	{r4, r5, r6, lr}
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
   14082:	4b3e      	ldr	r3, [pc, #248]	; (1417c <bypass_cb+0xfc>)
{
   14084:	4605      	mov	r5, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
   14086:	7818      	ldrb	r0, [r3, #0]
   14088:	2818      	cmp	r0, #24
   1408a:	d102      	bne.n	14092 <bypass_cb+0x12>
   1408c:	7808      	ldrb	r0, [r1, #0]
   1408e:	2811      	cmp	r0, #17
   14090:	d031      	beq.n	140f6 <bypass_cb+0x76>
   14092:	3a01      	subs	r2, #1
   14094:	4608      	mov	r0, r1
   14096:	1854      	adds	r4, r2, r1
		for (int i = 0; i < (len - 1); i++) {
   14098:	4284      	cmp	r4, r0
   1409a:	d125      	bne.n	140e8 <bypass_cb+0x68>
	tail = recv[len - 1];
   1409c:	5c8a      	ldrb	r2, [r1, r2]
   1409e:	701a      	strb	r2, [r3, #0]
	if (is_ascii(*recv)) {
   140a0:	780a      	ldrb	r2, [r1, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
   140a2:	4c37      	ldr	r4, [pc, #220]	; (14180 <bypass_cb+0x100>)
   140a4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   140a8:	2b09      	cmp	r3, #9
   140aa:	d904      	bls.n	140b6 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
   140ac:	f022 0320 	bic.w	r3, r2, #32
   140b0:	3b41      	subs	r3, #65	; 0x41
   140b2:	2b05      	cmp	r3, #5
   140b4:	d804      	bhi.n	140c0 <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
   140b6:	6823      	ldr	r3, [r4, #0]
   140b8:	4932      	ldr	r1, [pc, #200]	; (14184 <bypass_cb+0x104>)
   140ba:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
   140bc:	3301      	adds	r3, #1
   140be:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
   140c0:	6823      	ldr	r3, [r4, #0]
   140c2:	2b02      	cmp	r3, #2
   140c4:	d134      	bne.n	14130 <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
   140c6:	2210      	movs	r2, #16
   140c8:	482e      	ldr	r0, [pc, #184]	; (14184 <bypass_cb+0x104>)
   140ca:	2100      	movs	r1, #0
   140cc:	f017 ff76 	bl	2bfbc <strtoul>
		*bytes = byte;
   140d0:	4a2d      	ldr	r2, [pc, #180]	; (14188 <bypass_cb+0x108>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
   140d2:	6813      	ldr	r3, [r2, #0]
   140d4:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
   140d8:	6013      	str	r3, [r2, #0]
		sum++;
   140da:	4a2c      	ldr	r2, [pc, #176]	; (1418c <bypass_cb+0x10c>)
   140dc:	6813      	ldr	r3, [r2, #0]
   140de:	3301      	adds	r3, #1
   140e0:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
   140e2:	2300      	movs	r3, #0
   140e4:	6023      	str	r3, [r4, #0]
   140e6:	e023      	b.n	14130 <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
   140e8:	f810 6b01 	ldrb.w	r6, [r0], #1
   140ec:	2e18      	cmp	r6, #24
   140ee:	d1d3      	bne.n	14098 <bypass_cb+0x18>
   140f0:	7806      	ldrb	r6, [r0, #0]
   140f2:	2e11      	cmp	r6, #17
   140f4:	d1d0      	bne.n	14098 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
   140f6:	4c25      	ldr	r4, [pc, #148]	; (1418c <bypass_cb+0x10c>)
   140f8:	4a25      	ldr	r2, [pc, #148]	; (14190 <bypass_cb+0x110>)
   140fa:	6823      	ldr	r3, [r4, #0]
   140fc:	2108      	movs	r1, #8
   140fe:	4628      	mov	r0, r5
   14100:	f019 fa3c 	bl	2d57c <shell_fprintf>
		set_bypass(sh, NULL);
   14104:	2100      	movs	r1, #0
   14106:	4628      	mov	r0, r5
   14108:	f7ff ff22 	bl	13f50 <set_bypass>
		if (!littleendian) {
   1410c:	4b21      	ldr	r3, [pc, #132]	; (14194 <bypass_cb+0x114>)
   1410e:	7818      	ldrb	r0, [r3, #0]
   14110:	b970      	cbnz	r0, 14130 <bypass_cb+0xb0>
   14112:	4a21      	ldr	r2, [pc, #132]	; (14198 <bypass_cb+0x118>)
   14114:	6823      	ldr	r3, [r4, #0]
   14116:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
   14118:	2b04      	cmp	r3, #4
   1411a:	dc0a      	bgt.n	14132 <bypass_cb+0xb2>
   1411c:	b108      	cbz	r0, 14122 <bypass_cb+0xa2>
   1411e:	6011      	str	r1, [r2, #0]
   14120:	6023      	str	r3, [r4, #0]
			if (sum % 4 == 0) {
   14122:	f013 0103 	ands.w	r1, r3, #3
   14126:	d10b      	bne.n	14140 <bypass_cb+0xc0>
				*data = __bswap_32(*data);
   14128:	6812      	ldr	r2, [r2, #0]
   1412a:	6813      	ldr	r3, [r2, #0]
   1412c:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
   1412e:	6013      	str	r3, [r2, #0]
}
   14130:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
   14132:	6808      	ldr	r0, [r1, #0]
   14134:	ba00      	rev	r0, r0
   14136:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
   1413a:	3b04      	subs	r3, #4
				data++;
   1413c:	2001      	movs	r0, #1
   1413e:	e7eb      	b.n	14118 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
   14140:	425b      	negs	r3, r3
   14142:	f003 0303 	and.w	r3, r3, #3
   14146:	bf58      	it	pl
   14148:	4259      	negpl	r1, r3
   1414a:	2902      	cmp	r1, #2
   1414c:	d107      	bne.n	1415e <bypass_cb+0xde>
				*data = __bswap_16(*data);
   1414e:	6812      	ldr	r2, [r2, #0]
   14150:	6811      	ldr	r1, [r2, #0]
   14152:	f3c1 2307 	ubfx	r3, r1, #8, #8
   14156:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1415a:	b29b      	uxth	r3, r3
   1415c:	e7e7      	b.n	1412e <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
   1415e:	2903      	cmp	r1, #3
   14160:	d1e6      	bne.n	14130 <bypass_cb+0xb0>
				*data = __bswap_24(*data);
   14162:	6810      	ldr	r0, [r2, #0]
   14164:	6802      	ldr	r2, [r0, #0]
   14166:	0411      	lsls	r1, r2, #16
   14168:	f3c2 4307 	ubfx	r3, r2, #16, #8
   1416c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   14170:	430b      	orrs	r3, r1
   14172:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   14176:	4313      	orrs	r3, r2
   14178:	6003      	str	r3, [r0, #0]
   1417a:	e7d9      	b.n	14130 <bypass_cb+0xb0>
   1417c:	20003926 	.word	0x20003926
   14180:	200023ac 	.word	0x200023ac
   14184:	20003922 	.word	0x20003922
   14188:	200023a8 	.word	0x200023a8
   1418c:	200023b4 	.word	0x200023b4
   14190:	0003331d 	.word	0x0003331d
   14194:	20003925 	.word	0x20003925
   14198:	200023b0 	.word	0x200023b0

0001419c <init>:

static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
   1419c:	b538      	push	{r3, r4, r5, lr}
   1419e:	4615      	mov	r5, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   141a0:	6842      	ldr	r2, [r0, #4]
{
   141a2:	460c      	mov	r4, r1

	sh_uart->ctrl_blk->dev = (const struct device *)config;
   141a4:	6811      	ldr	r1, [r2, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
   141a6:	6890      	ldr	r0, [r2, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
   141a8:	608b      	str	r3, [r1, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
   141aa:	e9c1 4500 	strd	r4, r5, [r1]
	ring_buf_reset(sh_uart->tx_ringbuf);
   141ae:	f019 f8f8 	bl	2d3a2 <ring_buf_reset>
	ring_buf_reset(sh_uart->rx_ringbuf);
   141b2:	68d0      	ldr	r0, [r2, #12]
   141b4:	f019 f8f5 	bl	2d3a2 <ring_buf_reset>
	sh_uart->ctrl_blk->tx_busy = 0;
   141b8:	6813      	ldr	r3, [r2, #0]
   141ba:	2100      	movs	r1, #0
   141bc:	60d9      	str	r1, [r3, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   141be:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   141c0:	b123      	cbz	r3, 141cc <init+0x30>
   141c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   141c4:	b113      	cbz	r3, 141cc <init+0x30>
		api->irq_callback_set(dev, cb, user_data);
   141c6:	4905      	ldr	r1, [pc, #20]	; (141dc <init+0x40>)
   141c8:	4620      	mov	r0, r4
   141ca:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
   141cc:	68a3      	ldr	r3, [r4, #8]
   141ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   141d0:	b10b      	cbz	r3, 141d6 <init+0x3a>
		api->irq_rx_enable(dev);
   141d2:	4620      	mov	r0, r4
   141d4:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
   141d6:	2000      	movs	r0, #0
   141d8:	bd38      	pop	{r3, r4, r5, pc}
   141da:	bf00      	nop
   141dc:	00014219 	.word	0x00014219

000141e0 <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
   141e0:	b507      	push	{r0, r1, r2, lr}
   141e2:	480a      	ldr	r0, [pc, #40]	; (1420c <enable_shell_uart+0x2c>)
   141e4:	f01b fff8 	bl	301d8 <z_device_ready>
   141e8:	b160      	cbz	r0, 14204 <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
   141ea:	4a09      	ldr	r2, [pc, #36]	; (14210 <enable_shell_uart+0x30>)
   141ec:	4907      	ldr	r1, [pc, #28]	; (1420c <enable_shell_uart+0x2c>)
   141ee:	6812      	ldr	r2, [r2, #0]
   141f0:	4808      	ldr	r0, [pc, #32]	; (14214 <enable_shell_uart+0x34>)
   141f2:	2304      	movs	r3, #4
   141f4:	9300      	str	r3, [sp, #0]
   141f6:	2301      	movs	r3, #1
   141f8:	f000 fe8c 	bl	14f14 <shell_init>

	return 0;
   141fc:	2000      	movs	r0, #0
}
   141fe:	b003      	add	sp, #12
   14200:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
   14204:	f06f 0012 	mvn.w	r0, #18
   14208:	e7f9      	b.n	141fe <enable_shell_uart+0x1e>
   1420a:	bf00      	nop
   1420c:	00030a08 	.word	0x00030a08
   14210:	0003137c 	.word	0x0003137c
   14214:	00030cb4 	.word	0x00030cb4

00014218 <uart_callback>:
{
   14218:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1421c:	4605      	mov	r5, r0
   1421e:	460e      	mov	r6, r1
	if (api->irq_update == NULL) {
   14220:	6883      	ldr	r3, [r0, #8]
   14222:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   14224:	b103      	cbz	r3, 14228 <uart_callback+0x10>
	return api->irq_update(dev);
   14226:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   14228:	68ab      	ldr	r3, [r5, #8]
   1422a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   1422c:	2b00      	cmp	r3, #0
   1422e:	d13a      	bne.n	142a6 <uart_callback+0x8e>
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   14230:	4b46      	ldr	r3, [pc, #280]	; (1434c <uart_callback+0x134>)
   14232:	4f47      	ldr	r7, [pc, #284]	; (14350 <uart_callback+0x138>)
			LOG_WRN("RX ring buffer full.");
   14234:	f8df b128 	ldr.w	fp, [pc, #296]	; 14360 <uart_callback+0x148>
   14238:	1bdf      	subs	r7, r3, r7
   1423a:	08bf      	lsrs	r7, r7, #2
   1423c:	01bf      	lsls	r7, r7, #6
   1423e:	f04f 0900 	mov.w	r9, #0
   14242:	4698      	mov	r8, r3
   14244:	f047 0702 	orr.w	r7, r7, #2
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
   14248:	68f0      	ldr	r0, [r6, #12]
   1424a:	a901      	add	r1, sp, #4
   1424c:	6902      	ldr	r2, [r0, #16]
   1424e:	f018 fb69 	bl	2c924 <ring_buf_put_claim>
		if (len > 0) {
   14252:	4682      	mov	sl, r0
   14254:	2800      	cmp	r0, #0
   14256:	d03d      	beq.n	142d4 <uart_callback+0xbc>
	if (api->fifo_read == NULL) {
   14258:	68ab      	ldr	r3, [r5, #8]
			rd_len = uart_fifo_read(dev, data, len);
   1425a:	9901      	ldr	r1, [sp, #4]
   1425c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1425e:	2b00      	cmp	r3, #0
   14260:	d035      	beq.n	142ce <uart_callback+0xb6>
	return api->fifo_read(dev, rx_data, size);
   14262:	4602      	mov	r2, r0
   14264:	4628      	mov	r0, r5
   14266:	4798      	blx	r3
				new_data = true;
   14268:	1e04      	subs	r4, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   1426a:	4621      	mov	r1, r4
   1426c:	68f0      	ldr	r0, [r6, #12]
				new_data = true;
   1426e:	bf18      	it	ne
   14270:	f04f 0901 	movne.w	r9, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   14274:	f018 fb72 	bl	2c95c <ring_buf_put_finish>
			__ASSERT_NO_MSG(err == 0);
   14278:	b148      	cbz	r0, 1428e <uart_callback+0x76>
   1427a:	4936      	ldr	r1, [pc, #216]	; (14354 <uart_callback+0x13c>)
   1427c:	4836      	ldr	r0, [pc, #216]	; (14358 <uart_callback+0x140>)
   1427e:	4a37      	ldr	r2, [pc, #220]	; (1435c <uart_callback+0x144>)
   14280:	234e      	movs	r3, #78	; 0x4e
   14282:	f018 f98a 	bl	2c59a <printk>
   14286:	4835      	ldr	r0, [pc, #212]	; (1435c <uart_callback+0x144>)
   14288:	214e      	movs	r1, #78	; 0x4e
   1428a:	f018 fbc7 	bl	2ca1c <assert_post_action>
	} while (rd_len && (rd_len == len));
   1428e:	b10c      	cbz	r4, 14294 <uart_callback+0x7c>
   14290:	45a2      	cmp	sl, r4
   14292:	d0d9      	beq.n	14248 <uart_callback+0x30>
	if (new_data) {
   14294:	f1b9 0f00 	cmp.w	r9, #0
   14298:	d009      	beq.n	142ae <uart_callback+0x96>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
   1429a:	6833      	ldr	r3, [r6, #0]
   1429c:	2000      	movs	r0, #0
   1429e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   142a2:	4790      	blx	r2
}
   142a4:	e003      	b.n	142ae <uart_callback+0x96>
	return api->irq_rx_ready(dev);
   142a6:	4628      	mov	r0, r5
   142a8:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   142aa:	2800      	cmp	r0, #0
   142ac:	d1c0      	bne.n	14230 <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
   142ae:	68ab      	ldr	r3, [r5, #8]
   142b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   142b2:	bb2b      	cbnz	r3, 14300 <uart_callback+0xe8>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
   142b4:	68b0      	ldr	r0, [r6, #8]
   142b6:	a901      	add	r1, sp, #4
   142b8:	6902      	ldr	r2, [r0, #16]
   142ba:	f018 fb69 	bl	2c990 <ring_buf_get_claim>
	if (len) {
   142be:	4604      	mov	r4, r0
   142c0:	bb28      	cbnz	r0, 1430e <uart_callback+0xf6>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   142c2:	4628      	mov	r0, r5
   142c4:	f019 f85f 	bl	2d386 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
   142c8:	6833      	ldr	r3, [r6, #0]
   142ca:	60dc      	str	r4, [r3, #12]
   142cc:	e035      	b.n	1433a <uart_callback+0x122>
		return -ENOSYS;
   142ce:	f06f 0057 	mvn.w	r0, #87	; 0x57
   142d2:	e7c9      	b.n	14268 <uart_callback+0x50>
			LOG_WRN("RX ring buffer full.");
   142d4:	f8d8 3000 	ldr.w	r3, [r8]
   142d8:	f013 0f06 	tst.w	r3, #6
   142dc:	d003      	beq.n	142e6 <uart_callback+0xce>
   142de:	4639      	mov	r1, r7
   142e0:	4658      	mov	r0, fp
   142e2:	f018 fcfc 	bl	2ccde <log_0>
	if (api->fifo_read == NULL) {
   142e6:	68ab      	ldr	r3, [r5, #8]
   142e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   142ea:	b133      	cbz	r3, 142fa <uart_callback+0xe2>
	return api->fifo_read(dev, rx_data, size);
   142ec:	2201      	movs	r2, #1
   142ee:	f10d 0103 	add.w	r1, sp, #3
   142f2:	4628      	mov	r0, r5
   142f4:	4798      	blx	r3
   142f6:	4604      	mov	r4, r0
   142f8:	e7c9      	b.n	1428e <uart_callback+0x76>
		return -ENOSYS;
   142fa:	f06f 0457 	mvn.w	r4, #87	; 0x57
   142fe:	e7c6      	b.n	1428e <uart_callback+0x76>
	return api->irq_tx_ready(dev);
   14300:	4628      	mov	r0, r5
   14302:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   14304:	2800      	cmp	r0, #0
   14306:	d1d5      	bne.n	142b4 <uart_callback+0x9c>
}
   14308:	b003      	add	sp, #12
   1430a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (api->fifo_fill == NULL) {
   1430e:	68ab      	ldr	r3, [r5, #8]
		len = uart_fifo_fill(dev, data, len);
   14310:	9901      	ldr	r1, [sp, #4]
   14312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   14314:	b1bb      	cbz	r3, 14346 <uart_callback+0x12e>
	return api->fifo_fill(dev, tx_data, size);
   14316:	4602      	mov	r2, r0
   14318:	4628      	mov	r0, r5
   1431a:	4798      	blx	r3
   1431c:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
   1431e:	68b0      	ldr	r0, [r6, #8]
   14320:	f018 fb60 	bl	2c9e4 <ring_buf_get_finish>
		__ASSERT_NO_MSG(err == 0);
   14324:	b148      	cbz	r0, 1433a <uart_callback+0x122>
   14326:	490b      	ldr	r1, [pc, #44]	; (14354 <uart_callback+0x13c>)
   14328:	480b      	ldr	r0, [pc, #44]	; (14358 <uart_callback+0x140>)
   1432a:	4a0c      	ldr	r2, [pc, #48]	; (1435c <uart_callback+0x144>)
   1432c:	2389      	movs	r3, #137	; 0x89
   1432e:	f018 f934 	bl	2c59a <printk>
   14332:	480a      	ldr	r0, [pc, #40]	; (1435c <uart_callback+0x144>)
   14334:	2189      	movs	r1, #137	; 0x89
   14336:	f018 fb71 	bl	2ca1c <assert_post_action>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   1433a:	6833      	ldr	r3, [r6, #0]
   1433c:	2001      	movs	r0, #1
   1433e:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   14342:	4790      	blx	r2
}
   14344:	e7e0      	b.n	14308 <uart_callback+0xf0>
		return -ENOSYS;
   14346:	f06f 0157 	mvn.w	r1, #87	; 0x57
   1434a:	e7e8      	b.n	1431e <uart_callback+0x106>
   1434c:	20000804 	.word	0x20000804
   14350:	200007a8 	.word	0x200007a8
   14354:	000327b2 	.word	0x000327b2
   14358:	00032486 	.word	0x00032486
   1435c:	000333bf 	.word	0x000333bf
   14360:	000333f5 	.word	0x000333f5

00014364 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
   14364:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
   14366:	6881      	ldr	r1, [r0, #8]
{
   14368:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
   1436a:	3108      	adds	r1, #8
   1436c:	f001 fe5e 	bl	1602c <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   14370:	68a1      	ldr	r1, [r4, #8]
   14372:	4a03      	ldr	r2, [pc, #12]	; (14380 <shell_internal_help_print+0x1c>)
   14374:	4620      	mov	r0, r4
   14376:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
   14378:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   1437c:	f001 bddc 	b.w	15f38 <z_shell_help_subcmd_print>
   14380:	00033437 	.word	0x00033437

00014384 <kill_handler>:
		handler(shell);
	}
}

static void kill_handler(const struct shell *shell)
{
   14384:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(shell);
   14386:	4604      	mov	r4, r0
   14388:	b958      	cbnz	r0, 143a2 <kill_handler+0x1e>
   1438a:	4921      	ldr	r1, [pc, #132]	; (14410 <kill_handler+0x8c>)
   1438c:	4821      	ldr	r0, [pc, #132]	; (14414 <kill_handler+0x90>)
   1438e:	4a22      	ldr	r2, [pc, #136]	; (14418 <kill_handler+0x94>)
   14390:	f240 43d6 	movw	r3, #1238	; 0x4d6
   14394:	f018 f901 	bl	2c59a <printk>
   14398:	481f      	ldr	r0, [pc, #124]	; (14418 <kill_handler+0x94>)
   1439a:	f240 41d6 	movw	r1, #1238	; 0x4d6
   1439e:	f018 fb3d 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx && shell->iface);
   143a2:	68a3      	ldr	r3, [r4, #8]
   143a4:	b10b      	cbz	r3, 143aa <kill_handler+0x26>
   143a6:	6863      	ldr	r3, [r4, #4]
   143a8:	b95b      	cbnz	r3, 143c2 <kill_handler+0x3e>
   143aa:	491c      	ldr	r1, [pc, #112]	; (1441c <kill_handler+0x98>)
   143ac:	4819      	ldr	r0, [pc, #100]	; (14414 <kill_handler+0x90>)
   143ae:	4a1a      	ldr	r2, [pc, #104]	; (14418 <kill_handler+0x94>)
   143b0:	f240 43d7 	movw	r3, #1239	; 0x4d7
   143b4:	f018 f8f1 	bl	2c59a <printk>
   143b8:	4817      	ldr	r0, [pc, #92]	; (14418 <kill_handler+0x94>)
   143ba:	f240 41d7 	movw	r1, #1239	; 0x4d7
   143be:	f018 fb2d 	bl	2ca1c <assert_post_action>
	if (z_flag_processing_get(shell)) {
   143c2:	68a3      	ldr	r3, [r4, #8]
	return ret;
}

static inline bool z_flag_processing_get(const struct shell *sh)
{
	return sh->ctx->ctx.flags.processing == 1;
   143c4:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
   143c8:	07db      	lsls	r3, r3, #31
   143ca:	d41d      	bmi.n	14408 <kill_handler+0x84>
		z_shell_log_backend_disable(shell->log_backend);
   143cc:	69e0      	ldr	r0, [r4, #28]
   143ce:	f019 fb5c 	bl	2da8a <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   143d2:	6860      	ldr	r0, [r4, #4]
   143d4:	6803      	ldr	r3, [r0, #0]
   143d6:	685b      	ldr	r3, [r3, #4]
   143d8:	4798      	blx	r3
	if (err != 0) {
   143da:	4605      	mov	r5, r0
   143dc:	b920      	cbnz	r0, 143e8 <kill_handler+0x64>
	z_shell_history_purge(shell->history);
   143de:	68e0      	ldr	r0, [r4, #12]
   143e0:	f019 fc96 	bl	2dd10 <z_shell_history_purge>
	shell->ctx->state = state;
   143e4:	68a3      	ldr	r3, [r4, #8]
   143e6:	711d      	strb	r5, [r3, #4]
	int err = instance_uninit(shell);

	if (shell->ctx->uninit_cb) {
   143e8:	68a3      	ldr	r3, [r4, #8]
   143ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   143ec:	b113      	cbz	r3, 143f4 <kill_handler+0x70>
		shell->ctx->uninit_cb(shell, err);
   143ee:	4629      	mov	r1, r5
   143f0:	4620      	mov	r0, r4
   143f2:	4798      	blx	r3
	}

	shell->ctx->tid = NULL;
   143f4:	68a3      	ldr	r3, [r4, #8]
   143f6:	2200      	movs	r2, #0
   143f8:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
   143fc:	f013 fbec 	bl	27bd8 <z_impl_z_current_get>
	k_thread_abort(k_current_get());
}
   14400:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   14404:	f003 bb32 	b.w	17a6c <z_impl_k_thread_abort>
		return -EBUSY;
   14408:	f06f 050f 	mvn.w	r5, #15
   1440c:	e7ec      	b.n	143e8 <kill_handler+0x64>
   1440e:	bf00      	nop
   14410:	0003346d 	.word	0x0003346d
   14414:	00032486 	.word	0x00032486
   14418:	00033445 	.word	0x00033445
   1441c:	00033473 	.word	0x00033473

00014420 <history_handle>:
{
   14420:	b537      	push	{r0, r1, r2, r4, r5, lr}
   14422:	4604      	mov	r4, r0
	if (z_flag_history_exit_get(shell)) {
   14424:	6880      	ldr	r0, [r0, #8]
	return ret;
}

static inline bool z_flag_history_exit_get(const struct shell *sh)
{
	return sh->ctx->ctx.flags.history_exit == 1;
   14426:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
   1442a:	075a      	lsls	r2, r3, #29
{
   1442c:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
   1442e:	d505      	bpl.n	1443c <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
   14430:	2100      	movs	r1, #0
   14432:	f019 f853 	bl	2d4dc <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
   14436:	68e0      	ldr	r0, [r4, #12]
   14438:	f019 fc3c 	bl	2dcb4 <z_shell_history_mode_exit>
	if (!z_shell_history_active(shell->history)) {
   1443c:	68e3      	ldr	r3, [r4, #12]
   1443e:	68db      	ldr	r3, [r3, #12]
   14440:	b96b      	cbnz	r3, 1445e <history_handle+0x3e>
		if (up) {
   14442:	2d00      	cmp	r5, #0
   14444:	d037      	beq.n	144b6 <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
   14446:	68a0      	ldr	r0, [r4, #8]
   14448:	3042      	adds	r0, #66	; 0x42
   1444a:	f019 f834 	bl	2d4b6 <z_shell_strlen>
			if (cmd_len) {
   1444e:	68a3      	ldr	r3, [r4, #8]
   14450:	b398      	cbz	r0, 144ba <history_handle+0x9a>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   14452:	f103 0142 	add.w	r1, r3, #66	; 0x42
   14456:	f503 70a1 	add.w	r0, r3, #322	; 0x142
   1445a:	f01c f8fb 	bl	30654 <strcpy>
					   shell->ctx->cmd_buff, &len);
   1445e:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
   14460:	68e0      	ldr	r0, [r4, #12]
   14462:	f10d 0306 	add.w	r3, sp, #6
   14466:	3242      	adds	r2, #66	; 0x42
   14468:	4629      	mov	r1, r5
   1446a:	f019 fc26 	bl	2dcba <z_shell_history_get>
	if (!history_mode) {
   1446e:	b958      	cbnz	r0, 14488 <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
   14470:	68a0      	ldr	r0, [r4, #8]
   14472:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   14476:	3042      	adds	r0, #66	; 0x42
   14478:	f01c f8ec 	bl	30654 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
   1447c:	68a0      	ldr	r0, [r4, #8]
   1447e:	3042      	adds	r0, #66	; 0x42
   14480:	f019 f819 	bl	2d4b6 <z_shell_strlen>
   14484:	f8ad 0006 	strh.w	r0, [sp, #6]
	z_shell_op_cursor_home_move(shell);
   14488:	4620      	mov	r0, r4
   1448a:	f019 f9eb 	bl	2d864 <z_shell_op_cursor_home_move>
/* Function sends VT100 command to clear the screen from cursor position to
 * end of the screen.
 */
static inline void z_clear_eos(const struct shell *sh)
{
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   1448e:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   14490:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   14494:	069b      	lsls	r3, r3, #26
   14496:	d503      	bpl.n	144a0 <history_handle+0x80>
   14498:	4909      	ldr	r1, [pc, #36]	; (144c0 <history_handle+0xa0>)
   1449a:	6960      	ldr	r0, [r4, #20]
   1449c:	f019 f811 	bl	2d4c2 <z_shell_raw_fprintf>
	z_shell_print_cmd(shell);
   144a0:	4620      	mov	r0, r4
   144a2:	f001 fa0f 	bl	158c4 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
   144a6:	68a3      	ldr	r3, [r4, #8]
   144a8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   144ac:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
   144ae:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
   144b0:	4620      	mov	r0, r4
   144b2:	f001 f991 	bl	157d8 <z_shell_op_cond_next_line>
}
   144b6:	b003      	add	sp, #12
   144b8:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
   144ba:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
   144be:	e7ce      	b.n	1445e <history_handle+0x3e>
   144c0:	00030dec 	.word	0x00030dec

000144c4 <state_set.constprop.0>:
	shell->ctx->state = state;
   144c4:	6883      	ldr	r3, [r0, #8]
   144c6:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
   144c8:	b510      	push	{r4, lr}
	shell->ctx->state = state;
   144ca:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
   144cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
   144ce:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
   144d0:	b9cb      	cbnz	r3, 14506 <state_set.constprop.0+0x42>
		cmd_buffer_clear(shell);
   144d2:	6882      	ldr	r2, [r0, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   144d4:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
   144d8:	63d3      	str	r3, [r2, #60]	; 0x3c
		if (z_flag_print_noinit_get(shell)) {
   144da:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->ctx.flags.print_noinit == 1;
   144dc:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
   144e0:	04db      	lsls	r3, r3, #19
   144e2:	d50b      	bpl.n	144fc <state_set.constprop.0+0x38>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
   144e4:	2103      	movs	r1, #3
   144e6:	4b08      	ldr	r3, [pc, #32]	; (14508 <state_set.constprop.0+0x44>)
   144e8:	4a08      	ldr	r2, [pc, #32]	; (1450c <state_set.constprop.0+0x48>)
   144ea:	f001 fab1 	bl	15a50 <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   144ee:	68a0      	ldr	r0, [r4, #8]
   144f0:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   144f4:	f500 7019 	add.w	r0, r0, #612	; 0x264
   144f8:	f018 ffb6 	bl	2d468 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
   144fc:	4620      	mov	r0, r4
}
   144fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
   14502:	f001 bbe7 	b.w	15cd4 <z_shell_print_prompt_and_cmd>
}
   14506:	bd10      	pop	{r4, pc}
   14508:	0003348e 	.word	0x0003348e
   1450c:	000330d8 	.word	0x000330d8

00014510 <execute>:
{
   14510:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t cmd_lvl = 0;
   14514:	2300      	movs	r3, #0
{
   14516:	b09f      	sub	sp, #124	; 0x7c
	size_t argc = 0, args_left = SIZE_MAX;
   14518:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char *cmd_buf = shell->ctx->cmd_buff;
   1451c:	6883      	ldr	r3, [r0, #8]
{
   1451e:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
   14520:	3342      	adds	r3, #66	; 0x42
   14522:	9303      	str	r3, [sp, #12]
	z_shell_op_cursor_end_move(shell);
   14524:	f019 f9a4 	bl	2d870 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
   14528:	4620      	mov	r0, r4
   1452a:	f019 f963 	bl	2d7f4 <z_shell_cursor_in_empty_line>
   1452e:	b918      	cbnz	r0, 14538 <execute+0x28>
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   14530:	499f      	ldr	r1, [pc, #636]	; (147b0 <execute+0x2a0>)
   14532:	6960      	ldr	r0, [r4, #20]
   14534:	f018 ffc5 	bl	2d4c2 <z_shell_raw_fprintf>
__ssp_bos_icheck3(memset, void *, int)
   14538:	68a0      	ldr	r0, [r4, #8]
   1453a:	2214      	movs	r2, #20
   1453c:	2100      	movs	r1, #0
   1453e:	3008      	adds	r0, #8
   14540:	f01c f873 	bl	3062a <memset>
		z_shell_cmd_trim(shell);
   14544:	4620      	mov	r0, r4
   14546:	f001 f8d9 	bl	156fc <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
   1454a:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
   1454c:	68e0      	ldr	r0, [r4, #12]
   1454e:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
   14550:	3142      	adds	r1, #66	; 0x42
		help_entry.help = NULL;
   14552:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
   14554:	f001 feee 	bl	16334 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
   14558:	4620      	mov	r0, r4
   1455a:	f019 fbff 	bl	2dd5c <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
   1455e:	f04f 38ff 	mov.w	r8, #4294967295
	size_t cmd_with_handler_lvl = 0;
   14562:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
   14564:	46b2      	mov	sl, r6
   14566:	af11      	add	r7, sp, #68	; 0x44
   14568:	9602      	str	r6, [sp, #8]
   1456a:	4635      	mov	r5, r6
   1456c:	46b3      	mov	fp, r6
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
   1456e:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   14572:	2a01      	cmp	r2, #1
   14574:	f000 80d7 	beq.w	14726 <execute+0x216>
   14578:	2b0b      	cmp	r3, #11
   1457a:	f240 80af 	bls.w	146dc <execute+0x1cc>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   1457e:	9b06      	ldr	r3, [sp, #24]
   14580:	2b02      	cmp	r3, #2
   14582:	f040 80af 	bne.w	146e4 <execute+0x1d4>
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
   14586:	4b8b      	ldr	r3, [pc, #556]	; (147b4 <execute+0x2a4>)
   14588:	4a8b      	ldr	r2, [pc, #556]	; (147b8 <execute+0x2a8>)
   1458a:	2101      	movs	r1, #1
   1458c:	e014      	b.n	145b8 <execute+0xa8>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
   1458e:	9a03      	ldr	r2, [sp, #12]
   14590:	2302      	movs	r3, #2
   14592:	4639      	mov	r1, r7
   14594:	a806      	add	r0, sp, #24
   14596:	f000 ff75 	bl	15484 <z_shell_make_argv>
		if (argc == 0) {
   1459a:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
   1459c:	687a      	ldr	r2, [r7, #4]
   1459e:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
   145a0:	4603      	mov	r3, r0
		if (argc == 0) {
   145a2:	b929      	cbnz	r1, 145b0 <execute+0xa0>
			return -ENOEXEC;
   145a4:	f06f 0507 	mvn.w	r5, #7
}
   145a8:	4628      	mov	r0, r5
   145aa:	b01f      	add	sp, #124	; 0x7c
   145ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
   145b0:	2901      	cmp	r1, #1
   145b2:	d105      	bne.n	145c0 <execute+0xb0>
   145b4:	b120      	cbz	r0, 145c0 <execute+0xb0>
			z_shell_fprintf(shell, SHELL_ERROR,
   145b6:	4a81      	ldr	r2, [pc, #516]	; (147bc <execute+0x2ac>)
   145b8:	4620      	mov	r0, r4
   145ba:	f001 fa49 	bl	15a50 <z_shell_fprintf>
   145be:	e7f1      	b.n	145a4 <execute+0x94>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   145c0:	9b05      	ldr	r3, [sp, #20]
   145c2:	b34b      	cbz	r3, 14618 <execute+0x108>
		    z_shell_help_request(argvp[0])) {
   145c4:	6838      	ldr	r0, [r7, #0]
   145c6:	f001 fd55 	bl	16074 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   145ca:	b198      	cbz	r0, 145f4 <execute+0xe4>
			if (help_entry.help) {
   145cc:	b166      	cbz	r6, 145e8 <execute+0xd8>
				shell->ctx->active_cmd = help_entry;
   145ce:	68a5      	ldr	r5, [r4, #8]
   145d0:	960d      	str	r6, [sp, #52]	; 0x34
   145d2:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
   145d4:	ae0c      	add	r6, sp, #48	; 0x30
   145d6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   145d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   145da:	6833      	ldr	r3, [r6, #0]
   145dc:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
   145de:	4620      	mov	r0, r4
   145e0:	f7ff fec0 	bl	14364 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
   145e4:	2501      	movs	r5, #1
   145e6:	e7df      	b.n	145a8 <execute+0x98>
			z_shell_fprintf(shell, SHELL_ERROR,
   145e8:	4a75      	ldr	r2, [pc, #468]	; (147c0 <execute+0x2b0>)
		z_shell_fprintf(shell, SHELL_ERROR,
   145ea:	2101      	movs	r1, #1
   145ec:	4620      	mov	r0, r4
   145ee:	f001 fa2f 	bl	15a50 <z_shell_fprintf>
		return false;
   145f2:	e7d7      	b.n	145a4 <execute+0x94>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
   145f4:	9b05      	ldr	r3, [sp, #20]
   145f6:	b17b      	cbz	r3, 14618 <execute+0x108>
			status = z_shell_wildcard_process(shell, entry,
   145f8:	683a      	ldr	r2, [r7, #0]
   145fa:	4629      	mov	r1, r5
   145fc:	4620      	mov	r0, r4
   145fe:	f001 ff15 	bl	1642c <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
   14602:	2802      	cmp	r0, #2
   14604:	f000 808f 	beq.w	14726 <execute+0x216>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
   14608:	2803      	cmp	r0, #3
   1460a:	d005      	beq.n	14618 <execute+0x108>
				++cmd_lvl;
   1460c:	9b05      	ldr	r3, [sp, #20]
   1460e:	3301      	adds	r3, #1
   14610:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
   14612:	2301      	movs	r3, #1
   14614:	9302      	str	r3, [sp, #8]
				continue;
   14616:	e7aa      	b.n	1456e <execute+0x5e>
		if (has_last_handler == false) {
   14618:	f1ba 0f00 	cmp.w	sl, #0
   1461c:	d105      	bne.n	1462a <execute+0x11a>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
   1461e:	6839      	ldr	r1, [r7, #0]
   14620:	aa07      	add	r2, sp, #28
   14622:	4658      	mov	r0, fp
   14624:	f019 f86c 	bl	2d700 <z_shell_find_cmd>
   14628:	4605      	mov	r5, r0
		argvp++;
   1462a:	3704      	adds	r7, #4
		args_left--;
   1462c:	f108 38ff 	add.w	r8, r8, #4294967295
		if (entry) {
   14630:	2d00      	cmp	r5, #0
   14632:	d041      	beq.n	146b8 <execute+0x1a8>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
   14634:	9b02      	ldr	r3, [sp, #8]
   14636:	b14b      	cbz	r3, 1464c <execute+0x13c>
   14638:	68eb      	ldr	r3, [r5, #12]
   1463a:	b13b      	cbz	r3, 1464c <execute+0x13c>
		z_shell_op_cursor_end_move(shell);
   1463c:	4620      	mov	r0, r4
   1463e:	f019 f917 	bl	2d870 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
   14642:	4620      	mov	r0, r4
   14644:	f001 f8c8 	bl	157d8 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
   14648:	4a5e      	ldr	r2, [pc, #376]	; (147c4 <execute+0x2b4>)
   1464a:	e7ce      	b.n	145ea <execute+0xda>
	if (entry->handler) {
   1464c:	68eb      	ldr	r3, [r5, #12]
   1464e:	b1cb      	cbz	r3, 14684 <execute+0x174>
		*active_cmd = *entry;
   14650:	68a3      	ldr	r3, [r4, #8]
   14652:	f8dd 9014 	ldr.w	r9, [sp, #20]
   14656:	46ae      	mov	lr, r5
   14658:	f103 0c08 	add.w	ip, r3, #8
   1465c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14660:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   14664:	f8de 3000 	ldr.w	r3, [lr]
   14668:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
   1466c:	68ab      	ldr	r3, [r5, #8]
   1466e:	b94b      	cbnz	r3, 14684 <execute+0x174>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
   14670:	7c6b      	ldrb	r3, [r5, #17]
   14672:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
   14674:	bf01      	itttt	eq
   14676:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
   1467a:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
   1467e:	f108 38ff 	addeq.w	r8, r8, #4294967295
			*lvl = *lvl + 1;
   14682:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
   14684:	f8d5 c004 	ldr.w	ip, [r5, #4]
   14688:	f1bc 0f00 	cmp.w	ip, #0
   1468c:	d008      	beq.n	146a0 <execute+0x190>
		*help_entry = *entry;
   1468e:	46ae      	mov	lr, r5
   14690:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   14694:	ae0c      	add	r6, sp, #48	; 0x30
   14696:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   14698:	f8de 3000 	ldr.w	r3, [lr]
   1469c:	6033      	str	r3, [r6, #0]
   1469e:	4666      	mov	r6, ip
   146a0:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
   146a2:	f1b8 0f00 	cmp.w	r8, #0
   146a6:	d103      	bne.n	146b0 <execute+0x1a0>
   146a8:	9b06      	ldr	r3, [sp, #24]
   146aa:	2b02      	cmp	r3, #2
   146ac:	f47f af5f 	bne.w	1456e <execute+0x5e>
			cmd_lvl++;
   146b0:	9b05      	ldr	r3, [sp, #20]
   146b2:	3301      	adds	r3, #1
   146b4:	9305      	str	r3, [sp, #20]
   146b6:	e75a      	b.n	1456e <execute+0x5e>
			if (cmd_lvl == 0 &&
   146b8:	9b05      	ldr	r3, [sp, #20]
   146ba:	b963      	cbnz	r3, 146d6 <execute+0x1c6>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
   146bc:	68a3      	ldr	r3, [r4, #8]
   146be:	69db      	ldr	r3, [r3, #28]
   146c0:	b10b      	cbz	r3, 146c6 <execute+0x1b6>
				(!z_shell_in_select_mode(shell) ||
   146c2:	68db      	ldr	r3, [r3, #12]
   146c4:	b93b      	cbnz	r3, 146d6 <execute+0x1c6>
				z_shell_fprintf(shell, SHELL_ERROR,
   146c6:	4b40      	ldr	r3, [pc, #256]	; (147c8 <execute+0x2b8>)
   146c8:	9300      	str	r3, [sp, #0]
   146ca:	4a40      	ldr	r2, [pc, #256]	; (147cc <execute+0x2bc>)
   146cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   146ce:	2101      	movs	r1, #1
   146d0:	4620      	mov	r0, r4
   146d2:	f001 f9bd 	bl	15a50 <z_shell_fprintf>
			has_last_handler = true;
   146d6:	f04f 0a01 	mov.w	sl, #1
   146da:	e7e2      	b.n	146a2 <execute+0x192>
		&& args_left > 0) {
   146dc:	f1b8 0f00 	cmp.w	r8, #0
   146e0:	f47f af55 	bne.w	1458e <execute+0x7e>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
   146e4:	9b02      	ldr	r3, [sp, #8]
   146e6:	b14b      	cbz	r3, 146fc <execute+0x1ec>
		z_shell_wildcard_finalize(shell);
   146e8:	4620      	mov	r0, r4
   146ea:	f019 fb5c 	bl	2dda6 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
   146ee:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
   146f0:	230c      	movs	r3, #12
   146f2:	3242      	adds	r2, #66	; 0x42
   146f4:	a911      	add	r1, sp, #68	; 0x44
   146f6:	a805      	add	r0, sp, #20
   146f8:	f000 fec4 	bl	15484 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
   146fc:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
   146fe:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
   14700:	ab1e      	add	r3, sp, #120	; 0x78
   14702:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   14706:	2200      	movs	r2, #0
   14708:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
   1470c:	6943      	ldr	r3, [r0, #20]
   1470e:	b973      	cbnz	r3, 1472e <execute+0x21e>
			if (help_entry->help == NULL) {
   14710:	2e00      	cmp	r6, #0
   14712:	f43f af47 	beq.w	145a4 <execute+0x94>
			if (help_entry->help != shell->ctx->active_cmd.help) {
   14716:	68c3      	ldr	r3, [r0, #12]
   14718:	42b3      	cmp	r3, r6
   1471a:	f43f af60 	beq.w	145de <execute+0xce>
				shell->ctx->active_cmd = *help_entry;
   1471e:	960d      	str	r6, [sp, #52]	; 0x34
   14720:	f100 0508 	add.w	r5, r0, #8
   14724:	e756      	b.n	145d4 <execute+0xc4>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   14726:	9b05      	ldr	r3, [sp, #20]
   14728:	2b0b      	cmp	r3, #11
   1472a:	d9db      	bls.n	146e4 <execute+0x1d4>
   1472c:	e727      	b.n	1457e <execute+0x6e>
	if (shell->ctx->active_cmd.args.mandatory) {
   1472e:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
   14730:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
   14734:	b1b3      	cbz	r3, 14764 <execute+0x254>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
   14736:	7e42      	ldrb	r2, [r0, #25]
				UINT16_MAX : opt8;
   14738:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1473c:	2aff      	cmp	r2, #255	; 0xff
   1473e:	bf08      	it	eq
   14740:	460a      	moveq	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
   14742:	429d      	cmp	r5, r3
   14744:	d302      	bcc.n	1474c <execute+0x23c>
   14746:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
   14748:	429d      	cmp	r5, r3
   1474a:	d90b      	bls.n	14764 <execute+0x254>
		z_shell_fprintf(shell, SHELL_ERROR,
   1474c:	6883      	ldr	r3, [r0, #8]
   1474e:	4a20      	ldr	r2, [pc, #128]	; (147d0 <execute+0x2c0>)
   14750:	2101      	movs	r1, #1
   14752:	4620      	mov	r0, r4
   14754:	f001 f97c 	bl	15a50 <z_shell_fprintf>
			shell_internal_help_print(shell);
   14758:	4620      	mov	r0, r4
   1475a:	f7ff fe03 	bl	14364 <shell_internal_help_print>
		return -EINVAL;
   1475e:	f06f 0515 	mvn.w	r5, #21
   14762:	e721      	b.n	145a8 <execute+0x98>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
   14764:	f44f 6100 	mov.w	r1, #2048	; 0x800
   14768:	f500 7019 	add.w	r0, r0, #612	; 0x264
   1476c:	f018 fe6d 	bl	2d44a <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   14770:	68a0      	ldr	r0, [r4, #8]
   14772:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   14776:	f018 fe9c 	bl	2d4b2 <k_mutex_unlock>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
   1477a:	68a3      	ldr	r3, [r4, #8]
   1477c:	aa11      	add	r2, sp, #68	; 0x44
   1477e:	4629      	mov	r1, r5
   14780:	eb02 0289 	add.w	r2, r2, r9, lsl #2
   14784:	695b      	ldr	r3, [r3, #20]
   14786:	4620      	mov	r0, r4
   14788:	4798      	blx	r3
   1478a:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1478c:	68a0      	ldr	r0, [r4, #8]
   1478e:	f04f 32ff 	mov.w	r2, #4294967295
   14792:	f04f 33ff 	mov.w	r3, #4294967295
   14796:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   1479a:	f018 febf 	bl	2d51c <k_mutex_lock.constprop.0>
   1479e:	68a0      	ldr	r0, [r4, #8]
   147a0:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   147a4:	f500 7019 	add.w	r0, r0, #612	; 0x264
   147a8:	f018 fe5e 	bl	2d468 <atomic_and>
	return ret;
   147ac:	e6fc      	b.n	145a8 <execute+0x98>
   147ae:	bf00      	nop
   147b0:	00036e20 	.word	0x00036e20
   147b4:	00033547 	.word	0x00033547
   147b8:	000330dd 	.word	0x000330dd
   147bc:	000334d2 	.word	0x000334d2
   147c0:	000334e6 	.word	0x000334e6
   147c4:	00033504 	.word	0x00033504
   147c8:	00033533 	.word	0x00033533
   147cc:	000339c2 	.word	0x000339c2
   147d0:	0003356b 	.word	0x0003356b

000147d4 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
   147d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT_NO_MSG(shell);
   147d8:	4604      	mov	r4, r0
{
   147da:	b0a9      	sub	sp, #164	; 0xa4
	__ASSERT_NO_MSG(shell);
   147dc:	b958      	cbnz	r0, 147f6 <shell_process+0x22>
   147de:	49ac      	ldr	r1, [pc, #688]	; (14a90 <shell_process+0x2bc>)
   147e0:	48ac      	ldr	r0, [pc, #688]	; (14a94 <shell_process+0x2c0>)
   147e2:	4aad      	ldr	r2, [pc, #692]	; (14a98 <shell_process+0x2c4>)
   147e4:	f240 53a3 	movw	r3, #1443	; 0x5a3
   147e8:	f017 fed7 	bl	2c59a <printk>
   147ec:	48aa      	ldr	r0, [pc, #680]	; (14a98 <shell_process+0x2c4>)
   147ee:	f240 51a3 	movw	r1, #1443	; 0x5a3
   147f2:	f018 f913 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx);
   147f6:	68a3      	ldr	r3, [r4, #8]
   147f8:	b95b      	cbnz	r3, 14812 <shell_process+0x3e>
   147fa:	49a8      	ldr	r1, [pc, #672]	; (14a9c <shell_process+0x2c8>)
   147fc:	48a5      	ldr	r0, [pc, #660]	; (14a94 <shell_process+0x2c0>)
   147fe:	4aa6      	ldr	r2, [pc, #664]	; (14a98 <shell_process+0x2c4>)
   14800:	f240 53a4 	movw	r3, #1444	; 0x5a4
   14804:	f017 fec9 	bl	2c59a <printk>
   14808:	48a3      	ldr	r0, [pc, #652]	; (14a98 <shell_process+0x2c4>)
   1480a:	f240 51a4 	movw	r1, #1444	; 0x5a4
   1480e:	f018 f905 	bl	2ca1c <assert_post_action>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
   14812:	68a0      	ldr	r0, [r4, #8]
   14814:	2101      	movs	r1, #1
   14816:	f500 7019 	add.w	r0, r0, #612	; 0x264
   1481a:	f018 fe16 	bl	2d44a <atomic_or>

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
   1481e:	68a3      	ldr	r3, [r4, #8]
   14820:	791b      	ldrb	r3, [r3, #4]
   14822:	2b02      	cmp	r3, #2
   14824:	d117      	bne.n	14856 <shell_process+0x82>
	size_t count = 0;
   14826:	2300      	movs	r3, #0
   14828:	9309      	str	r3, [sp, #36]	; 0x24
		shell_bypass_cb_t bypass = shell->ctx->bypass;
   1482a:	68a3      	ldr	r3, [r4, #8]
   1482c:	6860      	ldr	r0, [r4, #4]
   1482e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
		if (bypass) {
   14830:	6803      	ldr	r3, [r0, #0]
   14832:	691d      	ldr	r5, [r3, #16]
			(void)shell->iface->api->read(shell->iface, buf,
   14834:	ab09      	add	r3, sp, #36	; 0x24
		if (bypass) {
   14836:	b1c6      	cbz	r6, 1486a <shell_process+0x96>
			(void)shell->iface->api->read(shell->iface, buf,
   14838:	2210      	movs	r2, #16
   1483a:	a91b      	add	r1, sp, #108	; 0x6c
   1483c:	47a8      	blx	r5
			if (count) {
   1483e:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14840:	b14a      	cbz	r2, 14856 <shell_process+0x82>
				bypass(shell, buf, count);
   14842:	a91b      	add	r1, sp, #108	; 0x6c
   14844:	4620      	mov	r0, r4
   14846:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
   14848:	68a3      	ldr	r3, [r4, #8]
   1484a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   1484c:	2b00      	cmp	r3, #0
   1484e:	d1ec      	bne.n	1482a <shell_process+0x56>
					state_set(shell, SHELL_STATE_ACTIVE);
   14850:	4620      	mov	r0, r4
   14852:	f7ff fe37 	bl	144c4 <state_set.constprop.0>
   14856:	68a0      	ldr	r0, [r4, #8]
   14858:	f06f 0101 	mvn.w	r1, #1
   1485c:	f500 7019 	add.w	r0, r0, #612	; 0x264
   14860:	f018 fe02 	bl	2d468 <atomic_and>
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
   14864:	b029      	add	sp, #164	; 0xa4
   14866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(void)shell->iface->api->read(shell->iface, &data,
   1486a:	2201      	movs	r2, #1
   1486c:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   14870:	47a8      	blx	r5
		if (count == 0) {
   14872:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14874:	2b00      	cmp	r3, #0
   14876:	d0ee      	beq.n	14856 <shell_process+0x82>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   14878:	f99d 2023 	ldrsb.w	r2, [sp, #35]	; 0x23
		if (ascii_filter(data) != 0) {
   1487c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   14880:	68a0      	ldr	r0, [r4, #8]
   14882:	2a00      	cmp	r2, #0
   14884:	dbd1      	blt.n	1482a <shell_process+0x56>
		switch (shell->ctx->receive_state) {
   14886:	7942      	ldrb	r2, [r0, #5]
   14888:	2a03      	cmp	r2, #3
   1488a:	f200 8340 	bhi.w	14f0e <shell_process+0x73a>
   1488e:	e8df f012 	tbh	[pc, r2, lsl #1]
   14892:	0004      	.short	0x0004
   14894:	02d702aa 	.word	0x02d702aa
   14898:	033e      	.short	0x033e
	if ((data != '\r') && (data != '\n')) {
   1489a:	2b0d      	cmp	r3, #13
   1489c:	d01b      	beq.n	148d6 <shell_process+0x102>
   1489e:	2b0a      	cmp	r3, #10
   148a0:	d019      	beq.n	148d6 <shell_process+0x102>
	sh->ctx->ctx.flags.last_nl = val;
   148a2:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
   148a6:	f36f 02ca 	bfc	r2, #3, #8
   148aa:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
   148ae:	2b09      	cmp	r3, #9
   148b0:	d04e      	beq.n	14950 <shell_process+0x17c>
   148b2:	d834      	bhi.n	1491e <shell_process+0x14a>
   148b4:	2b00      	cmp	r3, #0
   148b6:	d0b8      	beq.n	1482a <shell_process+0x56>
   148b8:	2b08      	cmp	r3, #8
   148ba:	f000 81f6 	beq.w	14caa <shell_process+0x4d6>
				if (isprint((int) data)) {
   148be:	4a78      	ldr	r2, [pc, #480]	; (14aa0 <shell_process+0x2cc>)
   148c0:	5c9a      	ldrb	r2, [r3, r2]
   148c2:	f012 0f97 	tst.w	r2, #151	; 0x97
   148c6:	f000 81fc 	beq.w	14cc2 <shell_process+0x4ee>
					z_flag_history_exit_set(shell, true);
   148ca:	2101      	movs	r1, #1
   148cc:	f018 fe06 	bl	2d4dc <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
   148d0:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   148d4:	e102      	b.n	14adc <shell_process+0x308>
	return sh->ctx->ctx.flags.last_nl;
   148d6:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
   148da:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
   148de:	b12a      	cbz	r2, 148ec <shell_process+0x118>
   148e0:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
   148e4:	f3c2 02c7 	ubfx	r2, r2, #3, #8
   148e8:	4293      	cmp	r3, r2
   148ea:	d1e0      	bne.n	148ae <shell_process+0xda>
	sh->ctx->ctx.flags.last_nl = val;
   148ec:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
   148f0:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
   148f2:	f363 02ca 	bfi	r2, r3, #3, #8
   148f6:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
   148fa:	b961      	cbnz	r1, 14916 <shell_process+0x142>
	z_flag_history_exit_set(shell, false);
   148fc:	f018 fdee 	bl	2d4dc <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
   14900:	68e0      	ldr	r0, [r4, #12]
   14902:	f019 f9d7 	bl	2dcb4 <z_shell_history_mode_exit>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   14906:	4967      	ldr	r1, [pc, #412]	; (14aa4 <shell_process+0x2d0>)
   14908:	6960      	ldr	r0, [r4, #20]
   1490a:	f018 fdda 	bl	2d4c2 <z_shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
   1490e:	4620      	mov	r0, r4
   14910:	f7ff fdd8 	bl	144c4 <state_set.constprop.0>
		break;
   14914:	e789      	b.n	1482a <shell_process+0x56>
					(void)execute(shell);
   14916:	4620      	mov	r0, r4
   14918:	f7ff fdfa 	bl	14510 <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
   1491c:	e7f7      	b.n	1490e <shell_process+0x13a>
   1491e:	2b1b      	cmp	r3, #27
   14920:	d013      	beq.n	1494a <shell_process+0x176>
   14922:	2b7f      	cmp	r3, #127	; 0x7f
   14924:	d1cb      	bne.n	148be <shell_process+0xea>
	return sh->ctx->cfg.flags.echo == 1;
   14926:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
   1492a:	079d      	lsls	r5, r3, #30
   1492c:	f57f af7d 	bpl.w	1482a <shell_process+0x56>
					z_flag_history_exit_set(shell, true);
   14930:	2101      	movs	r1, #1
   14932:	f018 fdd3 	bl	2d4dc <z_flag_history_exit_set.isra.0>
					if (z_flag_mode_delete_get(shell)) {
   14936:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.mode_delete == 1;
   14938:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   1493c:	0719      	lsls	r1, r3, #28
   1493e:	f100 81bc 	bmi.w	14cba <shell_process+0x4e6>
		z_shell_op_char_delete(shell);
   14942:	4620      	mov	r0, r4
   14944:	f019 f828 	bl	2d998 <z_shell_op_char_delete>
		break;
   14948:	e76f      	b.n	1482a <shell_process+0x56>
	shell->ctx->receive_state = state;
   1494a:	2301      	movs	r3, #1
   1494c:	7143      	strb	r3, [r0, #5]
}
   1494e:	e76c      	b.n	1482a <shell_process+0x56>
	return sh->ctx->cfg.flags.echo == 1;
   14950:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
   14954:	079a      	lsls	r2, r3, #30
   14956:	f57f af68 	bpl.w	1482a <shell_process+0x56>
					z_flag_history_exit_set(shell, true);
   1495a:	2101      	movs	r1, #1
   1495c:	f018 fdbe 	bl	2d4dc <z_flag_history_exit_set.isra.0>
	uint16_t compl_space = completion_space_get(shell);
   14960:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
   14962:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   14964:	2bff      	cmp	r3, #255	; 0xff
   14966:	f43f af60 	beq.w	1482a <shell_process+0x56>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1496a:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
   1496c:	f100 0142 	add.w	r1, r0, #66	; 0x42
   14970:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   14974:	f01b fe31 	bl	305da <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   14978:	68a2      	ldr	r2, [r4, #8]
   1497a:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   1497c:	4413      	add	r3, r2
   1497e:	2500      	movs	r5, #0
   14980:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   14984:	a91b      	add	r1, sp, #108	; 0x6c
   14986:	230c      	movs	r3, #12
   14988:	f502 72a1 	add.w	r2, r2, #322	; 0x142
   1498c:	a80b      	add	r0, sp, #44	; 0x2c
   1498e:	f000 fd79 	bl	15484 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
   14992:	990b      	ldr	r1, [sp, #44]	; 0x2c
   14994:	290c      	cmp	r1, #12
   14996:	f63f af48 	bhi.w	1482a <shell_process+0x56>
	(*argv)[*argc] = NULL;
   1499a:	ab28      	add	r3, sp, #160	; 0xa0
   1499c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   149a0:	f843 5c34 	str.w	r5, [r3, #-52]
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   149a4:	b151      	cbz	r1, 149bc <shell_process+0x1e8>
	int space = isspace((int)shell->ctx->cmd_buff[
   149a6:	68a3      	ldr	r3, [r4, #8]
   149a8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   149aa:	4413      	add	r3, r2
   149ac:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   149b0:	4b3b      	ldr	r3, [pc, #236]	; (14aa0 <shell_process+0x2cc>)
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   149b2:	5cd3      	ldrb	r3, [r2, r3]
   149b4:	071b      	lsls	r3, r3, #28
   149b6:	d45e      	bmi.n	14a76 <shell_process+0x2a2>
   149b8:	2901      	cmp	r1, #1
   149ba:	d15b      	bne.n	14a74 <shell_process+0x2a0>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
   149bc:	2500      	movs	r5, #0
   149be:	950a      	str	r5, [sp, #40]	; 0x28
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   149c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   149c2:	aa28      	add	r2, sp, #160	; 0xa0
   149c4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
   149c8:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   149ca:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
   149ce:	4650      	mov	r0, sl
   149d0:	f018 fd71 	bl	2d4b6 <z_shell_strlen>
	size_t first = 0;
   149d4:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
   149d6:	4681      	mov	r9, r0
	*longest = 0U;
   149d8:	9602      	str	r6, [sp, #8]
	size_t idx = 0;
   149da:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
   149dc:	aa16      	add	r2, sp, #88	; 0x58
   149de:	4639      	mov	r1, r7
   149e0:	4628      	mov	r0, r5
   149e2:	f000 fe17 	bl	15614 <z_shell_cmd_get>
   149e6:	4683      	mov	fp, r0
   149e8:	2800      	cmp	r0, #0
   149ea:	d15f      	bne.n	14aac <shell_process+0x2d8>
	if (cnt == 1) {
   149ec:	2e01      	cmp	r6, #1
   149ee:	d17e      	bne.n	14aee <shell_process+0x31a>
		autocomplete(shell, cmd, argv[arg_idx], first);
   149f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   149f2:	aa28      	add	r2, sp, #160	; 0xa0
   149f4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
   149f8:	f853 0c34 	ldr.w	r0, [r3, #-52]
   149fc:	f018 fd5b 	bl	2d4b6 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   14a00:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
   14a02:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   14a04:	3208      	adds	r2, #8
   14a06:	4628      	mov	r0, r5
   14a08:	4641      	mov	r1, r8
   14a0a:	f000 fe03 	bl	15614 <z_shell_cmd_get>
	__ASSERT_NO_MSG(match != NULL);
   14a0e:	4605      	mov	r5, r0
   14a10:	b958      	cbnz	r0, 14a2a <shell_process+0x256>
   14a12:	4925      	ldr	r1, [pc, #148]	; (14aa8 <shell_process+0x2d4>)
   14a14:	481f      	ldr	r0, [pc, #124]	; (14a94 <shell_process+0x2c0>)
   14a16:	4a20      	ldr	r2, [pc, #128]	; (14a98 <shell_process+0x2c4>)
   14a18:	f240 136f 	movw	r3, #367	; 0x16f
   14a1c:	f017 fdbd 	bl	2c59a <printk>
   14a20:	481d      	ldr	r0, [pc, #116]	; (14a98 <shell_process+0x2c4>)
   14a22:	f240 116f 	movw	r1, #367	; 0x16f
   14a26:	f017 fff9 	bl	2ca1c <assert_post_action>
	cmd_len = z_shell_strlen(match->syntax);
   14a2a:	6828      	ldr	r0, [r5, #0]
   14a2c:	f018 fd43 	bl	2d4b6 <z_shell_strlen>
	if (cmd_len != arg_len) {
   14a30:	4286      	cmp	r6, r0
   14a32:	d006      	beq.n	14a42 <shell_process+0x26e>
		z_shell_op_completion_insert(shell,
   14a34:	6829      	ldr	r1, [r5, #0]
   14a36:	1b82      	subs	r2, r0, r6
   14a38:	b292      	uxth	r2, r2
   14a3a:	4431      	add	r1, r6
   14a3c:	4620      	mov	r0, r4
   14a3e:	f018 ffa9 	bl	2d994 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
   14a42:	68a0      	ldr	r0, [r4, #8]
   14a44:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   14a46:	4403      	add	r3, r0
   14a48:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
   14a4c:	4b14      	ldr	r3, [pc, #80]	; (14aa0 <shell_process+0x2cc>)
   14a4e:	5cd1      	ldrb	r1, [r2, r3]
   14a50:	f011 0108 	ands.w	r1, r1, #8
   14a54:	d146      	bne.n	14ae4 <shell_process+0x310>
	return sh->ctx->cfg.flags.insert_mode == 1;
   14a56:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
   14a5a:	07df      	lsls	r7, r3, #31
   14a5c:	d53d      	bpl.n	14ada <shell_process+0x306>
			z_flag_insert_mode_set(shell, false);
   14a5e:	f018 fd4d 	bl	2d4fc <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
   14a62:	2120      	movs	r1, #32
   14a64:	4620      	mov	r0, r4
   14a66:	f001 f8fd 	bl	15c64 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
   14a6a:	68a0      	ldr	r0, [r4, #8]
   14a6c:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
   14a6e:	f018 fd45 	bl	2d4fc <z_flag_insert_mode_set.isra.0>
				break;
   14a72:	e6da      	b.n	1482a <shell_process+0x56>
	search_argc = space ? *argc : *argc - 1;
   14a74:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
   14a76:	2000      	movs	r0, #0
   14a78:	ab0c      	add	r3, sp, #48	; 0x30
   14a7a:	9300      	str	r3, [sp, #0]
   14a7c:	9001      	str	r0, [sp, #4]
   14a7e:	ab0a      	add	r3, sp, #40	; 0x28
   14a80:	aa1b      	add	r2, sp, #108	; 0x6c
   14a82:	f018 fe68 	bl	2d756 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
   14a86:	4605      	mov	r5, r0
   14a88:	2800      	cmp	r0, #0
   14a8a:	d199      	bne.n	149c0 <shell_process+0x1ec>
   14a8c:	e6cd      	b.n	1482a <shell_process+0x56>
   14a8e:	bf00      	nop
   14a90:	0003346d 	.word	0x0003346d
   14a94:	00032486 	.word	0x00032486
   14a98:	00033445 	.word	0x00033445
   14a9c:	00033586 	.word	0x00033586
   14aa0:	0003811b 	.word	0x0003811b
   14aa4:	00036e20 	.word	0x00036e20
   14aa8:	00033591 	.word	0x00033591
	return (strncmp(candidate, str, len) == 0) ? true : false;
   14aac:	f8db 0000 	ldr.w	r0, [fp]
   14ab0:	464a      	mov	r2, r9
   14ab2:	4651      	mov	r1, sl
   14ab4:	f01b fdd6 	bl	30664 <strncmp>
		if (is_candidate) {
   14ab8:	b968      	cbnz	r0, 14ad6 <shell_process+0x302>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   14aba:	f8db 0000 	ldr.w	r0, [fp]
   14abe:	f7f8 fc79 	bl	d3b4 <strlen>
   14ac2:	9b02      	ldr	r3, [sp, #8]
   14ac4:	4283      	cmp	r3, r0
   14ac6:	bf38      	it	cc
   14ac8:	4603      	movcc	r3, r0
   14aca:	b29b      	uxth	r3, r3
				*first_idx = idx;
   14acc:	2e00      	cmp	r6, #0
   14ace:	bf08      	it	eq
   14ad0:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   14ad2:	9302      	str	r3, [sp, #8]
			(*cnt)++;
   14ad4:	3601      	adds	r6, #1
		idx++;
   14ad6:	3701      	adds	r7, #1
   14ad8:	e780      	b.n	149dc <shell_process+0x208>
			z_shell_op_char_insert(shell, ' ');
   14ada:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
   14adc:	4620      	mov	r0, r4
   14ade:	f001 f8c1 	bl	15c64 <z_shell_op_char_insert>
   14ae2:	e6a2      	b.n	1482a <shell_process+0x56>
		z_shell_op_cursor_move(shell, 1);
   14ae4:	2101      	movs	r1, #1
   14ae6:	4620      	mov	r0, r4
   14ae8:	f018 fe98 	bl	2d81c <z_shell_op_cursor_move>
   14aec:	e69d      	b.n	1482a <shell_process+0x56>
	} else if (cnt > 1) {
   14aee:	f67f ae9c 	bls.w	1482a <shell_process+0x56>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
   14af2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14af4:	aa28      	add	r2, sp, #160	; 0xa0
   14af6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   14afa:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
   14afe:	4650      	mov	r0, sl
   14b00:	f018 fcd9 	bl	2d4b6 <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   14b04:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
   14b06:	9004      	str	r0, [sp, #16]
		shell->ctx->vt100_ctx.printed_cmd = 0;
   14b08:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
   14b0c:	9603      	str	r6, [sp, #12]
   14b0e:	46c3      	mov	fp, r8
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   14b10:	68a2      	ldr	r2, [r4, #8]
   14b12:	4659      	mov	r1, fp
   14b14:	3208      	adds	r2, #8
   14b16:	4628      	mov	r0, r5
   14b18:	f000 fd7c 	bl	15614 <z_shell_cmd_get>
		__ASSERT_NO_MSG(match != NULL);
   14b1c:	4607      	mov	r7, r0
   14b1e:	b958      	cbnz	r0, 14b38 <shell_process+0x364>
   14b20:	49bc      	ldr	r1, [pc, #752]	; (14e14 <shell_process+0x640>)
   14b22:	48bd      	ldr	r0, [pc, #756]	; (14e18 <shell_process+0x644>)
   14b24:	4abd      	ldr	r2, [pc, #756]	; (14e1c <shell_process+0x648>)
   14b26:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   14b2a:	f017 fd36 	bl	2c59a <printk>
   14b2e:	48bb      	ldr	r0, [pc, #748]	; (14e1c <shell_process+0x648>)
   14b30:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   14b34:	f017 ff72 	bl	2ca1c <assert_post_action>
		idx++;
   14b38:	6838      	ldr	r0, [r7, #0]
   14b3a:	f10b 0b01 	add.w	fp, fp, #1
		if (str && match->syntax &&
   14b3e:	f1ba 0f00 	cmp.w	sl, #0
   14b42:	d160      	bne.n	14c06 <shell_process+0x432>
		tab_item_print(shell, match->syntax, longest);
   14b44:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
   14b46:	2b00      	cmp	r3, #0
   14b48:	d166      	bne.n	14c18 <shell_process+0x444>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   14b4a:	68a2      	ldr	r2, [r4, #8]
   14b4c:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
   14b4e:	9b03      	ldr	r3, [sp, #12]
   14b50:	3b01      	subs	r3, #1
   14b52:	9303      	str	r3, [sp, #12]
   14b54:	d1dc      	bne.n	14b10 <shell_process+0x33c>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   14b56:	49b2      	ldr	r1, [pc, #712]	; (14e20 <shell_process+0x64c>)
   14b58:	6960      	ldr	r0, [r4, #20]
   14b5a:	f018 fcb2 	bl	2d4c2 <z_shell_raw_fprintf>
	z_shell_print_prompt_and_cmd(shell);
   14b5e:	4620      	mov	r0, r4
   14b60:	f001 f8b8 	bl	15cd4 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
   14b64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   14b66:	aa28      	add	r2, sp, #160	; 0xa0
   14b68:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
   14b6c:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
   14b70:	f853 0c34 	ldr.w	r0, [r3, #-52]
   14b74:	f018 fc9f 	bl	2d4b6 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   14b78:	4641      	mov	r1, r8
	uint16_t arg_len = z_shell_strlen(arg);
   14b7a:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   14b7c:	aa11      	add	r2, sp, #68	; 0x44
   14b7e:	4628      	mov	r0, r5
   14b80:	f000 fd48 	bl	15614 <z_shell_cmd_get>
	__ASSERT_NO_MSG(match);
   14b84:	4680      	mov	r8, r0
   14b86:	b958      	cbnz	r0, 14ba0 <shell_process+0x3cc>
   14b88:	49a6      	ldr	r1, [pc, #664]	; (14e24 <shell_process+0x650>)
   14b8a:	48a3      	ldr	r0, [pc, #652]	; (14e18 <shell_process+0x644>)
   14b8c:	4aa3      	ldr	r2, [pc, #652]	; (14e1c <shell_process+0x648>)
   14b8e:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
   14b92:	f017 fd02 	bl	2c59a <printk>
   14b96:	48a1      	ldr	r0, [pc, #644]	; (14e1c <shell_process+0x648>)
   14b98:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   14b9c:	f017 ff3e 	bl	2ca1c <assert_post_action>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   14ba0:	68a0      	ldr	r0, [r4, #8]
   14ba2:	f8d8 1000 	ldr.w	r1, [r8]
   14ba6:	22ff      	movs	r2, #255	; 0xff
   14ba8:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   14bac:	f01b fd6c 	bl	30688 <strncpy>
	*str = match->syntax;
   14bb0:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
   14bb4:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   14bb8:	aa16      	add	r2, sp, #88	; 0x58
   14bba:	4649      	mov	r1, r9
   14bbc:	4628      	mov	r0, r5
   14bbe:	f109 0b01 	add.w	fp, r9, #1
   14bc2:	f000 fd27 	bl	15614 <z_shell_cmd_get>
		if (match2 == NULL) {
   14bc6:	2800      	cmp	r0, #0
   14bc8:	d062      	beq.n	14c90 <shell_process+0x4bc>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
   14bca:	68a3      	ldr	r3, [r4, #8]
   14bcc:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   14bce:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
   14bd2:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   14bd4:	f813 cb01 	ldrb.w	ip, [r3], #1
   14bd8:	5c81      	ldrb	r1, [r0, r2]
   14bda:	4561      	cmp	r1, ip
   14bdc:	d105      	bne.n	14bea <shell_process+0x416>
   14bde:	b121      	cbz	r1, 14bea <shell_process+0x416>
		common++;
   14be0:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   14be2:	f64f 71ff 	movw	r1, #65535	; 0xffff
   14be6:	428a      	cmp	r2, r1
   14be8:	d1f4      	bne.n	14bd4 <shell_process+0x400>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
   14bea:	b10f      	cbz	r7, 14bf0 <shell_process+0x41c>
   14bec:	42ba      	cmp	r2, r7
   14bee:	db08      	blt.n	14c02 <shell_process+0x42e>
			common = (curr_common < common) ? curr_common : common;
   14bf0:	4590      	cmp	r8, r2
			--cnt;
   14bf2:	f106 36ff 	add.w	r6, r6, #4294967295
			common = (curr_common < common) ? curr_common : common;
   14bf6:	bfa8      	it	ge
   14bf8:	4690      	movge	r8, r2
	while (cnt > 1) {
   14bfa:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
   14bfc:	fa1f f888 	uxth.w	r8, r8
	while (cnt > 1) {
   14c00:	d046      	beq.n	14c90 <shell_process+0x4bc>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   14c02:	46d9      	mov	r9, fp
   14c04:	e7d8      	b.n	14bb8 <shell_process+0x3e4>
		if (str && match->syntax &&
   14c06:	2800      	cmp	r0, #0
   14c08:	d09c      	beq.n	14b44 <shell_process+0x370>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   14c0a:	9a04      	ldr	r2, [sp, #16]
   14c0c:	4651      	mov	r1, sl
   14c0e:	f01b fd29 	bl	30664 <strncmp>
		if (str && match->syntax &&
   14c12:	2800      	cmp	r0, #0
   14c14:	d096      	beq.n	14b44 <shell_process+0x370>
   14c16:	e77b      	b.n	14b10 <shell_process+0x33c>
	longest_option += z_shell_strlen(tab);
   14c18:	4883      	ldr	r0, [pc, #524]	; (14e28 <shell_process+0x654>)
   14c1a:	9305      	str	r3, [sp, #20]
   14c1c:	f018 fc4b 	bl	2d4b6 <z_shell_strlen>
   14c20:	9b02      	ldr	r3, [sp, #8]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   14c22:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
   14c24:	18c2      	adds	r2, r0, r3
   14c26:	b292      	uxth	r2, r2
			- z_shell_strlen(tab)) / longest_option;
   14c28:	487f      	ldr	r0, [pc, #508]	; (14e28 <shell_process+0x654>)
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   14c2a:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
   14c2c:	9207      	str	r2, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
   14c2e:	f018 fc42 	bl	2d4b6 <z_shell_strlen>
	diff = longest_option - z_shell_strlen(option);
   14c32:	9b05      	ldr	r3, [sp, #20]
			- z_shell_strlen(tab)) / longest_option;
   14c34:	9006      	str	r0, [sp, #24]
	diff = longest_option - z_shell_strlen(option);
   14c36:	4618      	mov	r0, r3
   14c38:	f018 fc3d 	bl	2d4b6 <z_shell_strlen>
   14c3c:	9a07      	ldr	r2, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
   14c3e:	9906      	ldr	r1, [sp, #24]
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   14c40:	9b05      	ldr	r3, [sp, #20]
	diff = longest_option - z_shell_strlen(option);
   14c42:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   14c46:	68a0      	ldr	r0, [r4, #8]
   14c48:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
   14c4c:	1a7f      	subs	r7, r7, r1
   14c4e:	fb97 f2f2 	sdiv	r2, r7, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   14c52:	b292      	uxth	r2, r2
   14c54:	fbbc f1f2 	udiv	r1, ip, r2
   14c58:	fb02 c211 	mls	r2, r2, r1, ip
   14c5c:	f10c 0e01 	add.w	lr, ip, #1
   14c60:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
   14c62:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   14c66:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
   14c6a:	b95a      	cbnz	r2, 14c84 <shell_process+0x4b0>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
   14c6c:	9300      	str	r3, [sp, #0]
   14c6e:	4a6f      	ldr	r2, [pc, #444]	; (14e2c <shell_process+0x658>)
   14c70:	4b6d      	ldr	r3, [pc, #436]	; (14e28 <shell_process+0x654>)
   14c72:	2106      	movs	r1, #6
   14c74:	4620      	mov	r0, r4
   14c76:	f000 feeb 	bl	15a50 <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
   14c7a:	4649      	mov	r1, r9
   14c7c:	4620      	mov	r0, r4
   14c7e:	f000 fd95 	bl	157ac <z_shell_op_cursor_horiz_move>
   14c82:	e764      	b.n	14b4e <shell_process+0x37a>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
   14c84:	4a6a      	ldr	r2, [pc, #424]	; (14e30 <shell_process+0x65c>)
   14c86:	2106      	movs	r1, #6
   14c88:	4620      	mov	r0, r4
   14c8a:	f000 fee1 	bl	15a50 <z_shell_fprintf>
   14c8e:	e7f4      	b.n	14c7a <shell_process+0x4a6>
	if (common) {
   14c90:	f1b8 0f00 	cmp.w	r8, #0
   14c94:	f43f adc9 	beq.w	1482a <shell_process+0x56>
		z_shell_op_completion_insert(shell, &completion[arg_len],
   14c98:	eba8 0207 	sub.w	r2, r8, r7
   14c9c:	b292      	uxth	r2, r2
   14c9e:	eb0a 0107 	add.w	r1, sl, r7
   14ca2:	4620      	mov	r0, r4
   14ca4:	f018 fe76 	bl	2d994 <z_shell_op_completion_insert>
   14ca8:	e5bf      	b.n	1482a <shell_process+0x56>
	return sh->ctx->cfg.flags.echo == 1;
   14caa:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
   14cae:	079e      	lsls	r6, r3, #30
   14cb0:	f57f adbb 	bpl.w	1482a <shell_process+0x56>
					z_flag_history_exit_set(shell, true);
   14cb4:	2101      	movs	r1, #1
   14cb6:	f018 fc11 	bl	2d4dc <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
   14cba:	4620      	mov	r0, r4
   14cbc:	f018 fe87 	bl	2d9ce <z_shell_op_char_backspace>
   14cc0:	e5b3      	b.n	1482a <shell_process+0x56>
   14cc2:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
   14cc6:	0792      	lsls	r2, r2, #30
   14cc8:	f57f adaf 	bpl.w	1482a <shell_process+0x56>
	switch (data) {
   14ccc:	3b01      	subs	r3, #1
   14cce:	2b16      	cmp	r3, #22
   14cd0:	f63f adab 	bhi.w	1482a <shell_process+0x56>
   14cd4:	a201      	add	r2, pc, #4	; (adr r2, 14cdc <shell_process+0x508>)
   14cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14cda:	bf00      	nop
   14cdc:	00014ee1 	.word	0x00014ee1
   14ce0:	00014d39 	.word	0x00014d39
   14ce4:	00014d41 	.word	0x00014d41
   14ce8:	00014943 	.word	0x00014943
   14cec:	00014ed5 	.word	0x00014ed5
   14cf0:	00014d61 	.word	0x00014d61
   14cf4:	0001482b 	.word	0x0001482b
   14cf8:	0001482b 	.word	0x0001482b
   14cfc:	0001482b 	.word	0x0001482b
   14d00:	0001482b 	.word	0x0001482b
   14d04:	00014d69 	.word	0x00014d69
   14d08:	00014d71 	.word	0x00014d71
   14d0c:	0001482b 	.word	0x0001482b
   14d10:	00014d9b 	.word	0x00014d9b
   14d14:	0001482b 	.word	0x0001482b
   14d18:	00014da5 	.word	0x00014da5
   14d1c:	0001482b 	.word	0x0001482b
   14d20:	0001482b 	.word	0x0001482b
   14d24:	0001482b 	.word	0x0001482b
   14d28:	0001482b 	.word	0x0001482b
   14d2c:	00014da9 	.word	0x00014da9
   14d30:	0001482b 	.word	0x0001482b
   14d34:	00014dd7 	.word	0x00014dd7
		z_shell_op_left_arrow(shell);
   14d38:	4620      	mov	r0, r4
   14d3a:	f018 fda0 	bl	2d87e <z_shell_op_left_arrow>
		break;
   14d3e:	e574      	b.n	1482a <shell_process+0x56>
		z_shell_op_cursor_end_move(shell);
   14d40:	4620      	mov	r0, r4
   14d42:	f018 fd95 	bl	2d870 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
   14d46:	4620      	mov	r0, r4
   14d48:	f018 fd54 	bl	2d7f4 <z_shell_cursor_in_empty_line>
   14d4c:	b918      	cbnz	r0, 14d56 <shell_process+0x582>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   14d4e:	4934      	ldr	r1, [pc, #208]	; (14e20 <shell_process+0x64c>)
   14d50:	6960      	ldr	r0, [r4, #20]
   14d52:	f018 fbb6 	bl	2d4c2 <z_shell_raw_fprintf>
		z_flag_history_exit_set(shell, true);
   14d56:	68a0      	ldr	r0, [r4, #8]
   14d58:	2101      	movs	r1, #1
   14d5a:	f018 fbbf 	bl	2d4dc <z_flag_history_exit_set.isra.0>
   14d5e:	e5d6      	b.n	1490e <shell_process+0x13a>
		z_shell_op_right_arrow(shell);
   14d60:	4620      	mov	r0, r4
   14d62:	f018 fd94 	bl	2d88e <z_shell_op_right_arrow>
		break;
   14d66:	e560      	b.n	1482a <shell_process+0x56>
		z_shell_op_delete_from_cursor(shell);
   14d68:	4620      	mov	r0, r4
   14d6a:	f018 fd99 	bl	2d8a0 <z_shell_op_delete_from_cursor>
		break;
   14d6e:	e55c      	b.n	1482a <shell_process+0x56>
	return sh->ctx->cfg.flags.use_vt100 == 1;
   14d70:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   14d74:	069f      	lsls	r7, r3, #26
   14d76:	d503      	bpl.n	14d80 <shell_process+0x5ac>
   14d78:	492e      	ldr	r1, [pc, #184]	; (14e34 <shell_process+0x660>)
   14d7a:	6960      	ldr	r0, [r4, #20]
   14d7c:	f018 fba1 	bl	2d4c2 <z_shell_raw_fprintf>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   14d80:	68a3      	ldr	r3, [r4, #8]
   14d82:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   14d86:	069e      	lsls	r6, r3, #26
   14d88:	d503      	bpl.n	14d92 <shell_process+0x5be>
   14d8a:	492b      	ldr	r1, [pc, #172]	; (14e38 <shell_process+0x664>)
   14d8c:	6960      	ldr	r0, [r4, #20]
   14d8e:	f018 fb98 	bl	2d4c2 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
   14d92:	4620      	mov	r0, r4
   14d94:	f000 ff9e 	bl	15cd4 <z_shell_print_prompt_and_cmd>
		break;
   14d98:	e547      	b.n	1482a <shell_process+0x56>
		history_handle(shell, false);
   14d9a:	2100      	movs	r1, #0
		history_handle(shell, true);
   14d9c:	4620      	mov	r0, r4
   14d9e:	f7ff fb3f 	bl	14420 <history_handle>
		break;
   14da2:	e542      	b.n	1482a <shell_process+0x56>
		history_handle(shell, true);
   14da4:	2101      	movs	r1, #1
   14da6:	e7f9      	b.n	14d9c <shell_process+0x5c8>
		z_shell_op_cursor_home_move(shell);
   14da8:	4620      	mov	r0, r4
   14daa:	f018 fd5b 	bl	2d864 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
   14dae:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   14db0:	2200      	movs	r2, #0
   14db2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
   14db6:	63da      	str	r2, [r3, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
   14db8:	68a0      	ldr	r0, [r4, #8]
   14dba:	2101      	movs	r1, #1
   14dbc:	f018 fb8e 	bl	2d4dc <z_flag_history_exit_set.isra.0>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   14dc0:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   14dc2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   14dc6:	069d      	lsls	r5, r3, #26
   14dc8:	f57f ad2f 	bpl.w	1482a <shell_process+0x56>
   14dcc:	491b      	ldr	r1, [pc, #108]	; (14e3c <shell_process+0x668>)
   14dce:	6960      	ldr	r0, [r4, #20]
   14dd0:	f018 fb77 	bl	2d4c2 <z_shell_raw_fprintf>
}
   14dd4:	e529      	b.n	1482a <shell_process+0x56>
		z_shell_op_word_remove(shell);
   14dd6:	4620      	mov	r0, r4
   14dd8:	f000 fea8 	bl	15b2c <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
   14ddc:	68a0      	ldr	r0, [r4, #8]
   14dde:	2101      	movs	r1, #1
   14de0:	f018 fb7c 	bl	2d4dc <z_flag_history_exit_set.isra.0>
		break;
   14de4:	e521      	b.n	1482a <shell_process+0x56>
			if (data == '[') {
   14de6:	2b5b      	cmp	r3, #91	; 0x5b
   14de8:	d101      	bne.n	14dee <shell_process+0x61a>
	shell->ctx->receive_state = state;
   14dea:	2302      	movs	r3, #2
   14dec:	e5ae      	b.n	1494c <shell_process+0x178>
	return sh->ctx->cfg.flags.echo == 1;
   14dee:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
   14df2:	0790      	lsls	r0, r2, #30
   14df4:	d506      	bpl.n	14e04 <shell_process+0x630>
	if (data == SHELL_VT100_ASCII_ALT_B) {
   14df6:	2b62      	cmp	r3, #98	; 0x62
   14df8:	d108      	bne.n	14e0c <shell_process+0x638>
		z_shell_op_cursor_word_move(shell, -1);
   14dfa:	f04f 31ff 	mov.w	r1, #4294967295
		z_shell_op_cursor_word_move(shell, 1);
   14dfe:	4620      	mov	r0, r4
   14e00:	f000 fd28 	bl	15854 <z_shell_op_cursor_word_move>
			receive_state_change(shell, SHELL_RECEIVE_DEFAULT);
   14e04:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->receive_state = state;
   14e06:	2200      	movs	r2, #0
   14e08:	715a      	strb	r2, [r3, #5]
}
   14e0a:	e50e      	b.n	1482a <shell_process+0x56>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
   14e0c:	2b66      	cmp	r3, #102	; 0x66
   14e0e:	d1f9      	bne.n	14e04 <shell_process+0x630>
		z_shell_op_cursor_word_move(shell, 1);
   14e10:	2101      	movs	r1, #1
   14e12:	e7f4      	b.n	14dfe <shell_process+0x62a>
   14e14:	00033591 	.word	0x00033591
   14e18:	00032486 	.word	0x00032486
   14e1c:	00033445 	.word	0x00033445
   14e20:	00036e20 	.word	0x00036e20
   14e24:	00034c53 	.word	0x00034c53
   14e28:	000329e4 	.word	0x000329e4
   14e2c:	000335a6 	.word	0x000335a6
   14e30:	000330d8 	.word	0x000330d8
   14e34:	00030df1 	.word	0x00030df1
   14e38:	00030df6 	.word	0x00030df6
   14e3c:	00030dec 	.word	0x00030dec
	shell->ctx->receive_state = state;
   14e40:	2200      	movs	r2, #0
   14e42:	7142      	strb	r2, [r0, #5]
			if (!z_flag_echo_get(shell)) {
   14e44:	68a2      	ldr	r2, [r4, #8]
   14e46:	f8d2 1260 	ldr.w	r1, [r2, #608]	; 0x260
   14e4a:	0789      	lsls	r1, r1, #30
   14e4c:	f57f aced 	bpl.w	1482a <shell_process+0x56>
			switch (data) {
   14e50:	3b31      	subs	r3, #49	; 0x31
   14e52:	2b1b      	cmp	r3, #27
   14e54:	f63f ace9 	bhi.w	1482a <shell_process+0x56>
   14e58:	a101      	add	r1, pc, #4	; (adr r1, 14e60 <shell_process+0x68c>)
   14e5a:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   14e5e:	bf00      	nop
   14e60:	00014edd 	.word	0x00014edd
   14e64:	00014ee9 	.word	0x00014ee9
   14e68:	00014efd 	.word	0x00014efd
   14e6c:	00014ed1 	.word	0x00014ed1
   14e70:	0001482b 	.word	0x0001482b
   14e74:	0001482b 	.word	0x0001482b
   14e78:	0001482b 	.word	0x0001482b
   14e7c:	0001482b 	.word	0x0001482b
   14e80:	0001482b 	.word	0x0001482b
   14e84:	0001482b 	.word	0x0001482b
   14e88:	0001482b 	.word	0x0001482b
   14e8c:	0001482b 	.word	0x0001482b
   14e90:	0001482b 	.word	0x0001482b
   14e94:	0001482b 	.word	0x0001482b
   14e98:	0001482b 	.word	0x0001482b
   14e9c:	0001482b 	.word	0x0001482b
   14ea0:	00014da5 	.word	0x00014da5
   14ea4:	00014d9b 	.word	0x00014d9b
   14ea8:	00014d61 	.word	0x00014d61
   14eac:	00014d39 	.word	0x00014d39
   14eb0:	0001482b 	.word	0x0001482b
   14eb4:	00014ed5 	.word	0x00014ed5
   14eb8:	0001482b 	.word	0x0001482b
   14ebc:	00014ee1 	.word	0x00014ee1
   14ec0:	0001482b 	.word	0x0001482b
   14ec4:	0001482b 	.word	0x0001482b
   14ec8:	0001482b 	.word	0x0001482b
   14ecc:	00014eed 	.word	0x00014eed
	shell->ctx->receive_state = state;
   14ed0:	2303      	movs	r3, #3
   14ed2:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(shell);
   14ed4:	4620      	mov	r0, r4
   14ed6:	f018 fccb 	bl	2d870 <z_shell_op_cursor_end_move>
		break;
   14eda:	e4a6      	b.n	1482a <shell_process+0x56>
	shell->ctx->receive_state = state;
   14edc:	2303      	movs	r3, #3
   14ede:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(shell);
   14ee0:	4620      	mov	r0, r4
   14ee2:	f018 fcbf 	bl	2d864 <z_shell_op_cursor_home_move>
		break;
   14ee6:	e4a0      	b.n	1482a <shell_process+0x56>
	shell->ctx->receive_state = state;
   14ee8:	2303      	movs	r3, #3
   14eea:	7153      	strb	r3, [r2, #5]
				bool status = z_flag_insert_mode_get(shell);
   14eec:	68a0      	ldr	r0, [r4, #8]
	return sh->ctx->cfg.flags.insert_mode == 1;
   14eee:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
   14ef2:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
   14ef6:	f081 0101 	eor.w	r1, r1, #1
   14efa:	e5b8      	b.n	14a6e <shell_process+0x29a>
	shell->ctx->receive_state = state;
   14efc:	2303      	movs	r3, #3
   14efe:	7153      	strb	r3, [r2, #5]
				if (z_flag_echo_get(shell)) {
   14f00:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
   14f02:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   14f06:	079b      	lsls	r3, r3, #30
   14f08:	f57f ac8f 	bpl.w	1482a <shell_process+0x56>
   14f0c:	e519      	b.n	14942 <shell_process+0x16e>
	shell->ctx->receive_state = state;
   14f0e:	2300      	movs	r3, #0
   14f10:	e51c      	b.n	1494c <shell_process+0x178>
   14f12:	bf00      	nop

00014f14 <shell_init>:
{
   14f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14f18:	4688      	mov	r8, r1
   14f1a:	b089      	sub	sp, #36	; 0x24
   14f1c:	4615      	mov	r5, r2
   14f1e:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(shell);
   14f20:	4604      	mov	r4, r0
   14f22:	b958      	cbnz	r0, 14f3c <shell_init+0x28>
   14f24:	494c      	ldr	r1, [pc, #304]	; (15058 <shell_init+0x144>)
   14f26:	484d      	ldr	r0, [pc, #308]	; (1505c <shell_init+0x148>)
   14f28:	4a4d      	ldr	r2, [pc, #308]	; (15060 <shell_init+0x14c>)
   14f2a:	f44f 63a9 	mov.w	r3, #1352	; 0x548
   14f2e:	f017 fb34 	bl	2c59a <printk>
   14f32:	484b      	ldr	r0, [pc, #300]	; (15060 <shell_init+0x14c>)
   14f34:	f44f 61a9 	mov.w	r1, #1352	; 0x548
   14f38:	f017 fd70 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx && shell->iface && shell->default_prompt);
   14f3c:	68a3      	ldr	r3, [r4, #8]
   14f3e:	b11b      	cbz	r3, 14f48 <shell_init+0x34>
   14f40:	6863      	ldr	r3, [r4, #4]
   14f42:	b10b      	cbz	r3, 14f48 <shell_init+0x34>
   14f44:	6823      	ldr	r3, [r4, #0]
   14f46:	b95b      	cbnz	r3, 14f60 <shell_init+0x4c>
   14f48:	4946      	ldr	r1, [pc, #280]	; (15064 <shell_init+0x150>)
   14f4a:	4844      	ldr	r0, [pc, #272]	; (1505c <shell_init+0x148>)
   14f4c:	4a44      	ldr	r2, [pc, #272]	; (15060 <shell_init+0x14c>)
   14f4e:	f240 5349 	movw	r3, #1353	; 0x549
   14f52:	f017 fb22 	bl	2c59a <printk>
   14f56:	4842      	ldr	r0, [pc, #264]	; (15060 <shell_init+0x14c>)
   14f58:	f240 5149 	movw	r1, #1353	; 0x549
   14f5c:	f017 fd5e 	bl	2ca1c <assert_post_action>
	if (shell->ctx->tid) {
   14f60:	68a3      	ldr	r3, [r4, #8]
   14f62:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   14f66:	2b00      	cmp	r3, #0
   14f68:	d173      	bne.n	15052 <shell_init+0x13e>
	__ASSERT_NO_MSG((sh->shell_flag == SHELL_FLAG_CRLF_DEFAULT) ||
   14f6a:	7c23      	ldrb	r3, [r4, #16]
   14f6c:	3b01      	subs	r3, #1
   14f6e:	2b01      	cmp	r3, #1
   14f70:	d90b      	bls.n	14f8a <shell_init+0x76>
   14f72:	493d      	ldr	r1, [pc, #244]	; (15068 <shell_init+0x154>)
   14f74:	4839      	ldr	r0, [pc, #228]	; (1505c <shell_init+0x148>)
   14f76:	4a3a      	ldr	r2, [pc, #232]	; (15060 <shell_init+0x14c>)
   14f78:	f240 439f 	movw	r3, #1183	; 0x49f
   14f7c:	f017 fb0d 	bl	2c59a <printk>
   14f80:	4837      	ldr	r0, [pc, #220]	; (15060 <shell_init+0x14c>)
   14f82:	f240 419f 	movw	r1, #1183	; 0x49f
   14f86:	f017 fd49 	bl	2ca1c <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   14f8a:	2100      	movs	r1, #0
   14f8c:	68a0      	ldr	r0, [r4, #8]
   14f8e:	f44f 7244 	mov.w	r2, #784	; 0x310
   14f92:	f01b fb4a 	bl	3062a <memset>
	sh->ctx->prompt = sh->default_prompt;
   14f96:	68a3      	ldr	r3, [r4, #8]
   14f98:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
   14f9a:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
   14f9c:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
   14f9e:	f018 fec3 	bl	2dd28 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
   14fa2:	68a0      	ldr	r0, [r4, #8]
   14fa4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
   14fa8:	f01b f98e 	bl	302c8 <z_impl_k_mutex_init>
   14fac:	f44f 792a 	mov.w	r9, #680	; 0x2a8
   14fb0:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
   14fb4:	68a0      	ldr	r0, [r4, #8]
   14fb6:	4430      	add	r0, r6
	z_impl_k_poll_signal_init(sig);
   14fb8:	f01b faeb 	bl	30592 <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
   14fbc:	68a0      	ldr	r0, [r4, #8]
   14fbe:	2200      	movs	r2, #0
   14fc0:	1983      	adds	r3, r0, r6
   14fc2:	2101      	movs	r1, #1
   14fc4:	4448      	add	r0, r9
   14fc6:	3610      	adds	r6, #16
   14fc8:	f013 fef2 	bl	28db0 <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
   14fcc:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
   14fd0:	f109 0914 	add.w	r9, r9, #20
   14fd4:	d1ee      	bne.n	14fb4 <shell_init+0xa0>
		sh->stats->log_lost_cnt = 0;
   14fd6:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
   14fd8:	68a0      	ldr	r0, [r4, #8]
   14fda:	2600      	movs	r6, #0
   14fdc:	2102      	movs	r1, #2
   14fde:	601e      	str	r6, [r3, #0]
   14fe0:	f500 7019 	add.w	r0, r0, #612	; 0x264
   14fe4:	f018 fa31 	bl	2d44a <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
   14fe8:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
   14fea:	4a20      	ldr	r2, [pc, #128]	; (1506c <shell_init+0x158>)
   14fec:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
   14fee:	6818      	ldr	r0, [r3, #0]
   14ff0:	f018 fa61 	bl	2d4b6 <z_shell_strlen>
   14ff4:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
   14ff6:	4a1e      	ldr	r2, [pc, #120]	; (15070 <shell_init+0x15c>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
   14ff8:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
   14ffc:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
   14ffe:	f366 0582 	bfi	r5, r6, #2, #1
   15002:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
   15006:	6803      	ldr	r3, [r0, #0]
   15008:	4641      	mov	r1, r8
   1500a:	681d      	ldr	r5, [r3, #0]
   1500c:	4623      	mov	r3, r4
   1500e:	47a8      	blx	r5
	if (ret == 0) {
   15010:	4605      	mov	r5, r0
   15012:	b9d0      	cbnz	r0, 1504a <shell_init+0x136>
	shell->ctx->state = state;
   15014:	68a3      	ldr	r3, [r4, #8]
   15016:	2201      	movs	r2, #1
   15018:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
   1501a:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1501e:	2200      	movs	r2, #0
   15020:	2300      	movs	r3, #0
   15022:	e9cd 2306 	strd	r2, r3, [sp, #24]
   15026:	230e      	movs	r3, #14
   15028:	9303      	str	r3, [sp, #12]
   1502a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   1502c:	9504      	str	r5, [sp, #16]
   1502e:	e9cd 7301 	strd	r7, r3, [sp, #4]
   15032:	9400      	str	r4, [sp, #0]
   15034:	4b0f      	ldr	r3, [pc, #60]	; (15074 <shell_init+0x160>)
   15036:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1503a:	f010 f8df 	bl	251fc <z_impl_k_thread_create>
	shell->ctx->tid = tid;
   1503e:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
   15040:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
   15042:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
   15046:	f00f fee7 	bl	24e18 <z_impl_k_thread_name_set>
}
   1504a:	4628      	mov	r0, r5
   1504c:	b009      	add	sp, #36	; 0x24
   1504e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
   15052:	f06f 0577 	mvn.w	r5, #119	; 0x77
   15056:	e7f8      	b.n	1504a <shell_init+0x136>
   15058:	0003346d 	.word	0x0003346d
   1505c:	00032486 	.word	0x00032486
   15060:	00033445 	.word	0x00033445
   15064:	000335ac 	.word	0x000335ac
   15068:	000335e0 	.word	0x000335e0
   1506c:	00500018 	.word	0x00500018
   15070:	0002d569 	.word	0x0002d569
   15074:	00015111 	.word	0x00015111

00015078 <shell_start>:
{
   15078:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(shell);
   1507a:	4604      	mov	r4, r0
   1507c:	b958      	cbnz	r0, 15096 <shell_start+0x1e>
   1507e:	491f      	ldr	r1, [pc, #124]	; (150fc <shell_start+0x84>)
   15080:	481f      	ldr	r0, [pc, #124]	; (15100 <shell_start+0x88>)
   15082:	4a20      	ldr	r2, [pc, #128]	; (15104 <shell_start+0x8c>)
   15084:	f240 537b 	movw	r3, #1403	; 0x57b
   15088:	f017 fa87 	bl	2c59a <printk>
   1508c:	481d      	ldr	r0, [pc, #116]	; (15104 <shell_start+0x8c>)
   1508e:	f240 517b 	movw	r1, #1403	; 0x57b
   15092:	f017 fcc3 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx && shell->iface && shell->default_prompt);
   15096:	68a3      	ldr	r3, [r4, #8]
   15098:	b11b      	cbz	r3, 150a2 <shell_start+0x2a>
   1509a:	6863      	ldr	r3, [r4, #4]
   1509c:	b10b      	cbz	r3, 150a2 <shell_start+0x2a>
   1509e:	6823      	ldr	r3, [r4, #0]
   150a0:	b95b      	cbnz	r3, 150ba <shell_start+0x42>
   150a2:	4919      	ldr	r1, [pc, #100]	; (15108 <shell_start+0x90>)
   150a4:	4816      	ldr	r0, [pc, #88]	; (15100 <shell_start+0x88>)
   150a6:	4a17      	ldr	r2, [pc, #92]	; (15104 <shell_start+0x8c>)
   150a8:	f240 537c 	movw	r3, #1404	; 0x57c
   150ac:	f017 fa75 	bl	2c59a <printk>
   150b0:	4814      	ldr	r0, [pc, #80]	; (15104 <shell_start+0x8c>)
   150b2:	f240 517c 	movw	r1, #1404	; 0x57c
   150b6:	f017 fcb1 	bl	2ca1c <assert_post_action>
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
   150ba:	68a0      	ldr	r0, [r4, #8]
   150bc:	7903      	ldrb	r3, [r0, #4]
   150be:	2b01      	cmp	r3, #1
   150c0:	d119      	bne.n	150f6 <shell_start+0x7e>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   150c2:	f04f 32ff 	mov.w	r2, #4294967295
   150c6:	f04f 33ff 	mov.w	r3, #4294967295
   150ca:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   150ce:	f018 fa25 	bl	2d51c <k_mutex_lock.constprop.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
   150d2:	2108      	movs	r1, #8
   150d4:	4620      	mov	r0, r4
   150d6:	f000 fc7d 	bl	159d4 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
   150da:	490c      	ldr	r1, [pc, #48]	; (1510c <shell_start+0x94>)
   150dc:	6960      	ldr	r0, [r4, #20]
   150de:	f018 f9f0 	bl	2d4c2 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
   150e2:	4620      	mov	r0, r4
   150e4:	f7ff f9ee 	bl	144c4 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   150e8:	68a0      	ldr	r0, [r4, #8]
   150ea:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   150ee:	f018 f9e0 	bl	2d4b2 <k_mutex_unlock>
	return 0;
   150f2:	2000      	movs	r0, #0
}
   150f4:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   150f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
   150fa:	e7fb      	b.n	150f4 <shell_start+0x7c>
   150fc:	0003346d 	.word	0x0003346d
   15100:	00032486 	.word	0x00032486
   15104:	00033445 	.word	0x00033445
   15108:	000335ac 	.word	0x000335ac
   1510c:	00032240 	.word	0x00032240

00015110 <shell_thread>:
{
   15110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15114:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
   15116:	6840      	ldr	r0, [r0, #4]
   15118:	6803      	ldr	r3, [r0, #0]
{
   1511a:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
   1511c:	689b      	ldr	r3, [r3, #8]
   1511e:	2100      	movs	r1, #0
{
   15120:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
   15122:	4798      	blx	r3
	if (err != 0) {
   15124:	2800      	cmp	r0, #0
   15126:	d14c      	bne.n	151c2 <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
   15128:	b126      	cbz	r6, 15134 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
   1512a:	69e0      	ldr	r0, [r4, #28]
   1512c:	462a      	mov	r2, r5
   1512e:	4621      	mov	r1, r4
   15130:	f018 fc92 	bl	2da58 <z_shell_log_backend_enable>
	err = shell_start(shell);
   15134:	4620      	mov	r0, r4
   15136:	f7ff ff9f 	bl	15078 <shell_start>
	if (err != 0) {
   1513a:	2800      	cmp	r0, #0
   1513c:	d141      	bne.n	151c2 <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   1513e:	f8df 8094 	ldr.w	r8, [pc, #148]	; 151d4 <shell_thread+0xc4>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   15142:	4f21      	ldr	r7, [pc, #132]	; (151c8 <shell_thread+0xb8>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   15144:	4e21      	ldr	r6, [pc, #132]	; (151cc <shell_thread+0xbc>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
   15146:	68a0      	ldr	r0, [r4, #8]
   15148:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
   1514c:	f04f 32ff 	mov.w	r2, #4294967295
   15150:	f04f 33ff 	mov.w	r3, #4294967295
   15154:	2103      	movs	r1, #3
   15156:	f013 fe79 	bl	28e4c <z_impl_k_poll>
		if (err != 0) {
   1515a:	4605      	mov	r5, r0
   1515c:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1515e:	f04f 32ff 	mov.w	r2, #4294967295
   15162:	f04f 33ff 	mov.w	r3, #4294967295
   15166:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
   1516a:	b175      	cbz	r5, 1518a <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1516c:	f018 f9d6 	bl	2d51c <k_mutex_lock.constprop.0>
			z_shell_fprintf(shell, SHELL_ERROR,
   15170:	4620      	mov	r0, r4
   15172:	462b      	mov	r3, r5
   15174:	4a16      	ldr	r2, [pc, #88]	; (151d0 <shell_thread+0xc0>)
   15176:	2101      	movs	r1, #1
   15178:	f000 fc6a 	bl	15a50 <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
   1517c:	68a0      	ldr	r0, [r4, #8]
}
   1517e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
   15182:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   15186:	f018 b994 	b.w	2d4b2 <k_mutex_unlock>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1518a:	f018 f9c7 	bl	2d51c <k_mutex_lock.constprop.0>
		if (shell->iface->api->update) {
   1518e:	6860      	ldr	r0, [r4, #4]
   15190:	6803      	ldr	r3, [r0, #0]
   15192:	695b      	ldr	r3, [r3, #20]
   15194:	b103      	cbz	r3, 15198 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
   15196:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   15198:	4642      	mov	r2, r8
   1519a:	4620      	mov	r0, r4
   1519c:	2102      	movs	r1, #2
   1519e:	f018 f972 	bl	2d486 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   151a2:	463a      	mov	r2, r7
   151a4:	4620      	mov	r0, r4
   151a6:	2100      	movs	r1, #0
   151a8:	f018 f96d 	bl	2d486 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   151ac:	4620      	mov	r0, r4
   151ae:	4632      	mov	r2, r6
   151b0:	2101      	movs	r1, #1
   151b2:	f018 f968 	bl	2d486 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   151b6:	68a0      	ldr	r0, [r4, #8]
   151b8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   151bc:	f018 f979 	bl	2d4b2 <k_mutex_unlock>
   151c0:	e7c1      	b.n	15146 <shell_thread+0x36>
}
   151c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   151c6:	bf00      	nop
   151c8:	000147d5 	.word	0x000147d5
   151cc:	0002d521 	.word	0x0002d521
   151d0:	00033637 	.word	0x00033637
   151d4:	00014385 	.word	0x00014385

000151d8 <shell_vfprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_vfprintf(const struct shell *sh, enum shell_vt100_color color,
		   const char *fmt, va_list args)
{
   151d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   151dc:	460e      	mov	r6, r1
   151de:	4615      	mov	r5, r2
   151e0:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(sh);
   151e2:	4604      	mov	r4, r0
   151e4:	b958      	cbnz	r0, 151fe <shell_vfprintf+0x26>
   151e6:	494b      	ldr	r1, [pc, #300]	; (15314 <shell_vfprintf+0x13c>)
   151e8:	484b      	ldr	r0, [pc, #300]	; (15318 <shell_vfprintf+0x140>)
   151ea:	4a4c      	ldr	r2, [pc, #304]	; (1531c <shell_vfprintf+0x144>)
   151ec:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
   151f0:	f017 f9d3 	bl	2c59a <printk>
   151f4:	4849      	ldr	r0, [pc, #292]	; (1531c <shell_vfprintf+0x144>)
   151f6:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
   151fa:	f017 fc0f 	bl	2ca1c <assert_post_action>
	__ASSERT(!k_is_in_isr(), "Thread context required.");
   151fe:	f01b f831 	bl	30264 <k_is_in_isr>
   15202:	b170      	cbz	r0, 15222 <shell_vfprintf+0x4a>
   15204:	4946      	ldr	r1, [pc, #280]	; (15320 <shell_vfprintf+0x148>)
   15206:	4a45      	ldr	r2, [pc, #276]	; (1531c <shell_vfprintf+0x144>)
   15208:	4843      	ldr	r0, [pc, #268]	; (15318 <shell_vfprintf+0x140>)
   1520a:	f240 53c1 	movw	r3, #1473	; 0x5c1
   1520e:	f017 f9c4 	bl	2c59a <printk>
   15212:	4844      	ldr	r0, [pc, #272]	; (15324 <shell_vfprintf+0x14c>)
   15214:	f017 f9c1 	bl	2c59a <printk>
   15218:	4840      	ldr	r0, [pc, #256]	; (1531c <shell_vfprintf+0x144>)
   1521a:	f240 51c1 	movw	r1, #1473	; 0x5c1
   1521e:	f017 fbfd 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(sh->ctx);
   15222:	68a3      	ldr	r3, [r4, #8]
   15224:	b95b      	cbnz	r3, 1523e <shell_vfprintf+0x66>
   15226:	4940      	ldr	r1, [pc, #256]	; (15328 <shell_vfprintf+0x150>)
   15228:	483b      	ldr	r0, [pc, #236]	; (15318 <shell_vfprintf+0x140>)
   1522a:	4a3c      	ldr	r2, [pc, #240]	; (1531c <shell_vfprintf+0x144>)
   1522c:	f240 53c2 	movw	r3, #1474	; 0x5c2
   15230:	f017 f9b3 	bl	2c59a <printk>
   15234:	4839      	ldr	r0, [pc, #228]	; (1531c <shell_vfprintf+0x144>)
   15236:	f240 51c2 	movw	r1, #1474	; 0x5c2
   1523a:	f017 fbef 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(z_flag_cmd_ctx_get(sh) ||
   1523e:	f8d4 8008 	ldr.w	r8, [r4, #8]
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   15242:	f8d8 3264 	ldr.w	r3, [r8, #612]	; 0x264
   15246:	0518      	lsls	r0, r3, #20
   15248:	d411      	bmi.n	1526e <shell_vfprintf+0x96>
	return z_impl_z_current_get();
   1524a:	f012 fcc5 	bl	27bd8 <z_impl_z_current_get>
   1524e:	f8d8 330c 	ldr.w	r3, [r8, #780]	; 0x30c
   15252:	4283      	cmp	r3, r0
   15254:	d10b      	bne.n	1526e <shell_vfprintf+0x96>
   15256:	4935      	ldr	r1, [pc, #212]	; (1532c <shell_vfprintf+0x154>)
   15258:	482f      	ldr	r0, [pc, #188]	; (15318 <shell_vfprintf+0x140>)
   1525a:	4a30      	ldr	r2, [pc, #192]	; (1531c <shell_vfprintf+0x144>)
   1525c:	f240 53c3 	movw	r3, #1475	; 0x5c3
   15260:	f017 f99b 	bl	2c59a <printk>
   15264:	482d      	ldr	r0, [pc, #180]	; (1531c <shell_vfprintf+0x144>)
   15266:	f240 51c3 	movw	r1, #1475	; 0x5c3
   1526a:	f017 fbd7 	bl	2ca1c <assert_post_action>
			(k_current_get() != sh->ctx->tid));
	__ASSERT_NO_MSG(sh->fprintf_ctx);
   1526e:	6963      	ldr	r3, [r4, #20]
   15270:	b95b      	cbnz	r3, 1528a <shell_vfprintf+0xb2>
   15272:	492f      	ldr	r1, [pc, #188]	; (15330 <shell_vfprintf+0x158>)
   15274:	4828      	ldr	r0, [pc, #160]	; (15318 <shell_vfprintf+0x140>)
   15276:	4a29      	ldr	r2, [pc, #164]	; (1531c <shell_vfprintf+0x144>)
   15278:	f240 53c5 	movw	r3, #1477	; 0x5c5
   1527c:	f017 f98d 	bl	2c59a <printk>
   15280:	4826      	ldr	r0, [pc, #152]	; (1531c <shell_vfprintf+0x144>)
   15282:	f240 51c5 	movw	r1, #1477	; 0x5c5
   15286:	f017 fbc9 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(fmt);
   1528a:	b95d      	cbnz	r5, 152a4 <shell_vfprintf+0xcc>
   1528c:	4929      	ldr	r1, [pc, #164]	; (15334 <shell_vfprintf+0x15c>)
   1528e:	4822      	ldr	r0, [pc, #136]	; (15318 <shell_vfprintf+0x140>)
   15290:	4a22      	ldr	r2, [pc, #136]	; (1531c <shell_vfprintf+0x144>)
   15292:	f240 53c6 	movw	r3, #1478	; 0x5c6
   15296:	f017 f980 	bl	2c59a <printk>
   1529a:	4820      	ldr	r0, [pc, #128]	; (1531c <shell_vfprintf+0x144>)
   1529c:	f240 51c6 	movw	r1, #1478	; 0x5c6
   152a0:	f017 fbbc 	bl	2ca1c <assert_post_action>

	/* Sending a message to a non-active shell leads to a dead lock. */
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   152a4:	68a0      	ldr	r0, [r4, #8]
   152a6:	7903      	ldrb	r3, [r0, #4]
   152a8:	2b02      	cmp	r3, #2
   152aa:	d007      	beq.n	152bc <shell_vfprintf+0xe4>
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
		z_shell_print_prompt_and_cmd(sh);
	}
	z_transport_buffer_flush(sh);
	k_mutex_unlock(&sh->ctx->wr_mtx);
}
   152ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   152b0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   152b4:	f500 7019 	add.w	r0, r0, #612	; 0x264
   152b8:	f018 b8c7 	b.w	2d44a <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   152bc:	f04f 32ff 	mov.w	r2, #4294967295
   152c0:	f04f 33ff 	mov.w	r3, #4294967295
   152c4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   152c8:	f018 f928 	bl	2d51c <k_mutex_lock.constprop.0>
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   152cc:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   152ce:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
   152d2:	0511      	lsls	r1, r2, #20
   152d4:	d404      	bmi.n	152e0 <shell_vfprintf+0x108>
   152d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   152d8:	b913      	cbnz	r3, 152e0 <shell_vfprintf+0x108>
		z_shell_cmd_line_erase(sh);
   152da:	4620      	mov	r0, r4
   152dc:	f018 fae9 	bl	2d8b2 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
   152e0:	463b      	mov	r3, r7
   152e2:	462a      	mov	r2, r5
   152e4:	4631      	mov	r1, r6
   152e6:	4620      	mov	r0, r4
   152e8:	f018 faff 	bl	2d8ea <z_shell_vfprintf>
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   152ec:	68a3      	ldr	r3, [r4, #8]
   152ee:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
   152f2:	0512      	lsls	r2, r2, #20
   152f4:	d404      	bmi.n	15300 <shell_vfprintf+0x128>
   152f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   152f8:	b913      	cbnz	r3, 15300 <shell_vfprintf+0x128>
		z_shell_print_prompt_and_cmd(sh);
   152fa:	4620      	mov	r0, r4
   152fc:	f000 fcea 	bl	15cd4 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   15300:	6960      	ldr	r0, [r4, #20]
   15302:	f018 f978 	bl	2d5f6 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
   15306:	68a0      	ldr	r0, [r4, #8]
}
   15308:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
   1530c:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   15310:	f018 b8cf 	b.w	2d4b2 <k_mutex_unlock>
   15314:	000359c0 	.word	0x000359c0
   15318:	00032486 	.word	0x00032486
   1531c:	00033445 	.word	0x00033445
   15320:	00033949 	.word	0x00033949
   15324:	0003364e 	.word	0x0003364e
   15328:	00033669 	.word	0x00033669
   1532c:	00033671 	.word	0x00033671
   15330:	000336ad 	.word	0x000336ad
   15334:	000336bd 	.word	0x000336bd

00015338 <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
   15338:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
   1533a:	4a0d      	ldr	r2, [pc, #52]	; (15370 <cmd_help+0x38>)
{
   1533c:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
   1533e:	2108      	movs	r1, #8
   15340:	f018 f91c 	bl	2d57c <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
   15344:	4620      	mov	r0, r4
   15346:	4a0b      	ldr	r2, [pc, #44]	; (15374 <cmd_help+0x3c>)
   15348:	2108      	movs	r1, #8
   1534a:	f018 f917 	bl	2d57c <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
   1534e:	4620      	mov	r0, r4
   15350:	4a09      	ldr	r2, [pc, #36]	; (15378 <cmd_help+0x40>)
   15352:	2108      	movs	r1, #8
   15354:	f018 f912 	bl	2d57c <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
   15358:	4620      	mov	r0, r4
   1535a:	4a08      	ldr	r2, [pc, #32]	; (1537c <cmd_help+0x44>)
   1535c:	2108      	movs	r1, #8
   1535e:	f018 f90d 	bl	2d57c <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
   15362:	4620      	mov	r0, r4
   15364:	4a06      	ldr	r2, [pc, #24]	; (15380 <cmd_help+0x48>)
   15366:	2100      	movs	r1, #0
   15368:	f000 fde6 	bl	15f38 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
   1536c:	2000      	movs	r0, #0
   1536e:	bd10      	pop	{r4, pc}
   15370:	000336c1 	.word	0x000336c1
   15374:	000336ff 	.word	0x000336ff
   15378:	0003375e 	.word	0x0003375e
   1537c:	000337b2 	.word	0x000337b2
   15380:	0003384c 	.word	0x0003384c

00015384 <shell_hexdump_line>:
{
   15384:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   15388:	4616      	mov	r6, r2
   1538a:	461f      	mov	r7, r3
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
   1538c:	4a2b      	ldr	r2, [pc, #172]	; (1543c <shell_hexdump_line+0xb8>)
			shell_fprintf(shell, SHELL_NORMAL, "   ");
   1538e:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 15448 <shell_hexdump_line+0xc4>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
   15392:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 1544c <shell_hexdump_line+0xc8>
			shell_fprintf(shell, SHELL_NORMAL, " ");
   15396:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 15450 <shell_hexdump_line+0xcc>
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
   1539a:	460b      	mov	r3, r1
   1539c:	2108      	movs	r1, #8
{
   1539e:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
   153a0:	f018 f8ec 	bl	2d57c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
   153a4:	2500      	movs	r5, #0
		if (i < len) {
   153a6:	42af      	cmp	r7, r5
   153a8:	d934      	bls.n	15414 <shell_hexdump_line+0x90>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
   153aa:	5d73      	ldrb	r3, [r6, r5]
   153ac:	464a      	mov	r2, r9
   153ae:	2108      	movs	r1, #8
   153b0:	4620      	mov	r0, r4
   153b2:	f018 f8e3 	bl	2d57c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
   153b6:	3501      	adds	r5, #1
   153b8:	2d10      	cmp	r5, #16
   153ba:	d123      	bne.n	15404 <shell_hexdump_line+0x80>
	shell_fprintf(shell, SHELL_NORMAL, "|");
   153bc:	4a20      	ldr	r2, [pc, #128]	; (15440 <shell_hexdump_line+0xbc>)
			shell_fprintf(shell, SHELL_NORMAL, " ");
   153be:	f8df 8090 	ldr.w	r8, [pc, #144]	; 15450 <shell_hexdump_line+0xcc>
				      isprint((int)c) ? c : '.');
   153c2:	f8df 9090 	ldr.w	r9, [pc, #144]	; 15454 <shell_hexdump_line+0xd0>
			shell_fprintf(shell, SHELL_NORMAL, "%c",
   153c6:	f8df a090 	ldr.w	sl, [pc, #144]	; 15458 <shell_hexdump_line+0xd4>
	shell_fprintf(shell, SHELL_NORMAL, "|");
   153ca:	2108      	movs	r1, #8
   153cc:	4620      	mov	r0, r4
   153ce:	f018 f8d5 	bl	2d57c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
   153d2:	2500      	movs	r5, #0
		if (i < len) {
   153d4:	42af      	cmp	r7, r5
   153d6:	d92b      	bls.n	15430 <shell_hexdump_line+0xac>
			char c = data[i];
   153d8:	5d73      	ldrb	r3, [r6, r5]
			shell_fprintf(shell, SHELL_NORMAL, "%c",
   153da:	f813 2009 	ldrb.w	r2, [r3, r9]
   153de:	f012 0f97 	tst.w	r2, #151	; 0x97
   153e2:	bf08      	it	eq
   153e4:	232e      	moveq	r3, #46	; 0x2e
   153e6:	4652      	mov	r2, sl
   153e8:	2108      	movs	r1, #8
   153ea:	4620      	mov	r0, r4
   153ec:	f018 f8c6 	bl	2d57c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
   153f0:	3501      	adds	r5, #1
   153f2:	2d10      	cmp	r5, #16
   153f4:	d114      	bne.n	15420 <shell_hexdump_line+0x9c>
	shell_print(shell, "|");
   153f6:	4620      	mov	r0, r4
   153f8:	4a12      	ldr	r2, [pc, #72]	; (15444 <shell_hexdump_line+0xc0>)
}
   153fa:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	shell_print(shell, "|");
   153fe:	2108      	movs	r1, #8
   15400:	f018 b8bc 	b.w	2d57c <shell_fprintf>
		if (i > 0 && !(i % 8)) {
   15404:	076a      	lsls	r2, r5, #29
   15406:	d1ce      	bne.n	153a6 <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, " ");
   15408:	4652      	mov	r2, sl
   1540a:	2108      	movs	r1, #8
   1540c:	4620      	mov	r0, r4
   1540e:	f018 f8b5 	bl	2d57c <shell_fprintf>
   15412:	e7c8      	b.n	153a6 <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
   15414:	4642      	mov	r2, r8
   15416:	2108      	movs	r1, #8
   15418:	4620      	mov	r0, r4
   1541a:	f018 f8af 	bl	2d57c <shell_fprintf>
   1541e:	e7ca      	b.n	153b6 <shell_hexdump_line+0x32>
		if (i > 0 && !(i % 8)) {
   15420:	076b      	lsls	r3, r5, #29
   15422:	d1d7      	bne.n	153d4 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
   15424:	4642      	mov	r2, r8
   15426:	2108      	movs	r1, #8
   15428:	4620      	mov	r0, r4
   1542a:	f018 f8a7 	bl	2d57c <shell_fprintf>
   1542e:	e7d1      	b.n	153d4 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
   15430:	4642      	mov	r2, r8
   15432:	2108      	movs	r1, #8
   15434:	4620      	mov	r0, r4
   15436:	f018 f8a1 	bl	2d57c <shell_fprintf>
   1543a:	e7d9      	b.n	153f0 <shell_hexdump_line+0x6c>
   1543c:	00033862 	.word	0x00033862
   15440:	000329e7 	.word	0x000329e7
   15444:	00033869 	.word	0x00033869
   15448:	000329e3 	.word	0x000329e3
   1544c:	000329dd 	.word	0x000329dd
   15450:	000329e5 	.word	0x000329e5
   15454:	0003811b 	.word	0x0003811b
   15458:	000338cb 	.word	0x000338cb

0001545c <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
   1545c:	b510      	push	{r4, lr}
   1545e:	4604      	mov	r4, r0
   15460:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
   15462:	460a      	mov	r2, r1
   15464:	4601      	mov	r1, r0
   15466:	4806      	ldr	r0, [pc, #24]	; (15480 <z_shell_fprintf_fmt+0x24>)
   15468:	f7fc fbfc 	bl	11c64 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
   1546c:	6923      	ldr	r3, [r4, #16]
   1546e:	791b      	ldrb	r3, [r3, #4]
   15470:	b123      	cbz	r3, 1547c <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   15472:	4620      	mov	r0, r4
	}
}
   15474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
   15478:	f018 b8bd 	b.w	2d5f6 <z_shell_fprintf_buffer_flush>
}
   1547c:	bd10      	pop	{r4, pc}
   1547e:	bf00      	nop
   15480:	0002d60f 	.word	0x0002d60f

00015484 <z_shell_make_argv>:
}


char z_shell_make_argv(size_t *argc, const char **argv, char *cmd,
		       uint8_t max_argc)
{
   15484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15488:	461f      	mov	r7, r3
		c = *cmd;
		if (c == '\0') {
			break;
		}

		if (isspace((int) c)) {
   1548a:	f8df 8184 	ldr.w	r8, [pc, #388]	; 15610 <z_shell_make_argv+0x18c>
	*argc = 0;
   1548e:	2300      	movs	r3, #0
{
   15490:	4605      	mov	r5, r0
   15492:	460e      	mov	r6, r1
   15494:	4614      	mov	r4, r2
	*argc = 0;
   15496:	6003      	str	r3, [r0, #0]
	char quote = 0;
   15498:	469a      	mov	sl, r3
	char quote = 0;
   1549a:	4699      	mov	r9, r3
		c = *cmd;
   1549c:	7823      	ldrb	r3, [r4, #0]
		if (c == '\0') {
   1549e:	2b00      	cmp	r3, #0
   154a0:	f000 80b1 	beq.w	15606 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
   154a4:	f813 3008 	ldrb.w	r3, [r3, r8]
   154a8:	f013 0308 	ands.w	r3, r3, #8
   154ac:	d002      	beq.n	154b4 <z_shell_make_argv+0x30>
			*cmd++ = '\0';
   154ae:	f804 9b01 	strb.w	r9, [r4], #1
			continue;
   154b2:	e7f3      	b.n	1549c <z_shell_make_argv+0x18>
		}

		argv[(*argc)++] = cmd;
   154b4:	6829      	ldr	r1, [r5, #0]
   154b6:	1c4a      	adds	r2, r1, #1
		if (*argc == max_argc) {
   154b8:	42ba      	cmp	r2, r7
		argv[(*argc)++] = cmd;
   154ba:	602a      	str	r2, [r5, #0]
   154bc:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
		if (*argc == max_argc) {
   154c0:	f000 80a1 	beq.w	15606 <z_shell_make_argv+0x182>
	char quote = 0;
   154c4:	469a      	mov	sl, r3
		c = *cmd;
   154c6:	f894 b000 	ldrb.w	fp, [r4]
		if (c == '\0') {
   154ca:	f1bb 0f00 	cmp.w	fp, #0
   154ce:	d0e5      	beq.n	1549c <z_shell_make_argv+0x18>
		if (!quote) {
   154d0:	f1ba 0f00 	cmp.w	sl, #0
   154d4:	f040 8083 	bne.w	155de <z_shell_make_argv+0x15a>
			switch (c) {
   154d8:	f1bb 0f27 	cmp.w	fp, #39	; 0x27
   154dc:	d006      	beq.n	154ec <z_shell_make_argv+0x68>
   154de:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
   154e2:	f000 8084 	beq.w	155ee <z_shell_make_argv+0x16a>
   154e6:	f1bb 0f22 	cmp.w	fp, #34	; 0x22
   154ea:	d171      	bne.n	155d0 <z_shell_make_argv+0x14c>
				memmove(cmd, cmd + 1,
   154ec:	4620      	mov	r0, r4
   154ee:	f018 f8aa 	bl	2d646 <z_shell_strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
   154f2:	1c61      	adds	r1, r4, #1
   154f4:	4602      	mov	r2, r0
   154f6:	4620      	mov	r0, r4
   154f8:	f01b f87d 	bl	305f6 <memmove>
				continue;
   154fc:	46da      	mov	sl, fp
   154fe:	e7e2      	b.n	154c6 <z_shell_make_argv+0x42>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
   15500:	4620      	mov	r0, r4
   15502:	f018 f8a0 	bl	2d646 <z_shell_strlen>
   15506:	1c61      	adds	r1, r4, #1
   15508:	4602      	mov	r2, r0
   1550a:	4620      	mov	r0, r4
   1550c:	f01b f873 	bl	305f6 <memmove>
			quote = 0;
   15510:	f04f 0a00 	mov.w	sl, #0
			continue;
   15514:	e7d7      	b.n	154c6 <z_shell_make_argv+0x42>
			if (t == '0') {
   15516:	2930      	cmp	r1, #48	; 0x30
   15518:	d126      	bne.n	15568 <z_shell_make_argv+0xe4>
				uint8_t v = 0U;
   1551a:	f04f 0b00 	mov.w	fp, #0
   1551e:	2302      	movs	r3, #2
					t = *(cmd + i);
   15520:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
   15522:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   15526:	fa5f fc80 	uxtb.w	ip, r0
   1552a:	f1bc 0f07 	cmp.w	ip, #7
   1552e:	b2da      	uxtb	r2, r3
   15530:	d818      	bhi.n	15564 <z_shell_make_argv+0xe0>
						v = (v << 3) | (t - '0');
   15532:	3301      	adds	r3, #1
   15534:	ea40 0bcb 	orr.w	fp, r0, fp, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   15538:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   1553a:	fa5f fb8b 	uxtb.w	fp, fp
				for (i = 2U; i < (2 + 3); i++) {
   1553e:	d1ef      	bne.n	15520 <z_shell_make_argv+0x9c>
   15540:	461a      	mov	r2, r3
					memmove(cmd, cmd + (i - 1),
   15542:	1e51      	subs	r1, r2, #1
   15544:	4421      	add	r1, r4
   15546:	4620      	mov	r0, r4
   15548:	9201      	str	r2, [sp, #4]
   1554a:	9100      	str	r1, [sp, #0]
   1554c:	f018 f87b 	bl	2d646 <z_shell_strlen>
   15550:	9a01      	ldr	r2, [sp, #4]
   15552:	3002      	adds	r0, #2
   15554:	1a82      	subs	r2, r0, r2
   15556:	4620      	mov	r0, r4
   15558:	9900      	ldr	r1, [sp, #0]
   1555a:	f01b f84c 	bl	305f6 <memmove>
					*cmd++ = v;
   1555e:	f804 bb01 	strb.w	fp, [r4], #1
					continue;
   15562:	e7b0      	b.n	154c6 <z_shell_make_argv+0x42>
				if (i > 2) {
   15564:	2a02      	cmp	r2, #2
   15566:	d1ec      	bne.n	15542 <z_shell_make_argv+0xbe>
			if (t == 'x') {
   15568:	2978      	cmp	r1, #120	; 0x78
   1556a:	d136      	bne.n	155da <z_shell_make_argv+0x156>
				uint8_t v = 0U;
   1556c:	f04f 0b00 	mov.w	fp, #0
   15570:	2302      	movs	r3, #2
					t = *(cmd + i);
   15572:	5ce2      	ldrb	r2, [r4, r3]
					if (t >= '0' && t <= '9') {
   15574:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   15578:	fa5f fc81 	uxtb.w	ip, r1
   1557c:	f1bc 0f09 	cmp.w	ip, #9
   15580:	b2d8      	uxtb	r0, r3
   15582:	d813      	bhi.n	155ac <z_shell_make_argv+0x128>
						v = (v << 4) | (t - '0');
   15584:	ea41 120b 	orr.w	r2, r1, fp, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   15588:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
   1558a:	fa5f fb82 	uxtb.w	fp, r2
				for (i = 2U; i < (2 + 2); i++) {
   1558e:	d10b      	bne.n	155a8 <z_shell_make_argv+0x124>
   15590:	2304      	movs	r3, #4
					memmove(cmd, cmd + (i - 1),
   15592:	1e59      	subs	r1, r3, #1
   15594:	4421      	add	r1, r4
   15596:	4620      	mov	r0, r4
   15598:	9301      	str	r3, [sp, #4]
   1559a:	9100      	str	r1, [sp, #0]
   1559c:	f018 f853 	bl	2d646 <z_shell_strlen>
   155a0:	9b01      	ldr	r3, [sp, #4]
   155a2:	1c82      	adds	r2, r0, #2
   155a4:	1ad2      	subs	r2, r2, r3
   155a6:	e7d6      	b.n	15556 <z_shell_make_argv+0xd2>
   155a8:	2303      	movs	r3, #3
   155aa:	e7e2      	b.n	15572 <z_shell_make_argv+0xee>
					} else if ((t >= 'a') &&
   155ac:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   155b0:	2905      	cmp	r1, #5
   155b2:	d803      	bhi.n	155bc <z_shell_make_argv+0x138>
						v = (v << 4) | (t - 'a' + 10);
   155b4:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   155b6:	ea42 120b 	orr.w	r2, r2, fp, lsl #4
   155ba:	e7e5      	b.n	15588 <z_shell_make_argv+0x104>
					} else if ((t >= 'A') && (t <= 'F')) {
   155bc:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   155c0:	2905      	cmp	r1, #5
   155c2:	d801      	bhi.n	155c8 <z_shell_make_argv+0x144>
						v = (v << 4) | (t - 'A' + 10);
   155c4:	3a37      	subs	r2, #55	; 0x37
   155c6:	e7f6      	b.n	155b6 <z_shell_make_argv+0x132>
				if (i > 2) {
   155c8:	2802      	cmp	r0, #2
   155ca:	d006      	beq.n	155da <z_shell_make_argv+0x156>
   155cc:	2303      	movs	r3, #3
   155ce:	e7e0      	b.n	15592 <z_shell_make_argv+0x10e>
		if (!quote && isspace((int) c)) {
   155d0:	f818 300b 	ldrb.w	r3, [r8, fp]
   155d4:	071b      	lsls	r3, r3, #28
   155d6:	f53f af61 	bmi.w	1549c <z_shell_make_argv+0x18>
		cmd += 1;
   155da:	3401      	adds	r4, #1
   155dc:	e773      	b.n	154c6 <z_shell_make_argv+0x42>
		if (quote == c) {
   155de:	45d3      	cmp	fp, sl
   155e0:	d08e      	beq.n	15500 <z_shell_make_argv+0x7c>
		if (quote && c == '\\') {
   155e2:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
   155e6:	d1f8      	bne.n	155da <z_shell_make_argv+0x156>
   155e8:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   155ea:	458a      	cmp	sl, r1
   155ec:	d193      	bne.n	15516 <z_shell_make_argv+0x92>
				memmove(cmd, cmd + 1,
   155ee:	4620      	mov	r0, r4
   155f0:	f018 f829 	bl	2d646 <z_shell_strlen>
   155f4:	f104 0b01 	add.w	fp, r4, #1
   155f8:	4602      	mov	r2, r0
   155fa:	4659      	mov	r1, fp
   155fc:	4620      	mov	r0, r4
   155fe:	f01a fffa 	bl	305f6 <memmove>
				continue;
   15602:	465c      	mov	r4, fp
   15604:	e75f      	b.n	154c6 <z_shell_make_argv+0x42>
		}
		quote = make_argv(&cmd, c);
	} while (true);

	return quote;
}
   15606:	4650      	mov	r0, sl
   15608:	b003      	add	sp, #12
   1560a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1560e:	bf00      	nop
   15610:	0003811b 	.word	0x0003811b

00015614 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
   15614:	b570      	push	{r4, r5, r6, lr}
   15616:	460d      	mov	r5, r1
   15618:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
   1561a:	4606      	mov	r6, r0
   1561c:	b950      	cbnz	r0, 15634 <z_shell_cmd_get+0x20>
	return ((uint8_t *)__shell_root_cmds_end -
   1561e:	4915      	ldr	r1, [pc, #84]	; (15674 <z_shell_cmd_get+0x60>)
   15620:	4b15      	ldr	r3, [pc, #84]	; (15678 <z_shell_cmd_get+0x64>)
   15622:	1a5b      	subs	r3, r3, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
   15624:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
   15628:	d21c      	bcs.n	15664 <z_shell_cmd_get+0x50>
   1562a:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   1562e:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
   15630:	4620      	mov	r0, r4
   15632:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dloc != NULL);
   15634:	b95a      	cbnz	r2, 1564e <z_shell_cmd_get+0x3a>
   15636:	4911      	ldr	r1, [pc, #68]	; (1567c <z_shell_cmd_get+0x68>)
   15638:	4811      	ldr	r0, [pc, #68]	; (15680 <z_shell_cmd_get+0x6c>)
   1563a:	4a12      	ldr	r2, [pc, #72]	; (15684 <z_shell_cmd_get+0x70>)
   1563c:	f240 1303 	movw	r3, #259	; 0x103
   15640:	f016 ffab 	bl	2c59a <printk>
   15644:	480f      	ldr	r0, [pc, #60]	; (15684 <z_shell_cmd_get+0x70>)
   15646:	f240 1103 	movw	r1, #259	; 0x103
   1564a:	f017 f9e7 	bl	2ca1c <assert_post_action>
	if (parent->subcmd) {
   1564e:	68b2      	ldr	r2, [r6, #8]
   15650:	b142      	cbz	r2, 15664 <z_shell_cmd_get+0x50>
		if (parent->subcmd->is_dynamic) {
   15652:	6853      	ldr	r3, [r2, #4]
   15654:	7812      	ldrb	r2, [r2, #0]
   15656:	b13a      	cbz	r2, 15668 <z_shell_cmd_get+0x54>
			parent->subcmd->u.dynamic_get(idx, dloc);
   15658:	4621      	mov	r1, r4
   1565a:	4628      	mov	r0, r5
   1565c:	4798      	blx	r3
			if (dloc->syntax != NULL) {
   1565e:	6823      	ldr	r3, [r4, #0]
   15660:	2b00      	cmp	r3, #0
   15662:	d1e5      	bne.n	15630 <z_shell_cmd_get+0x1c>
	const struct shell_static_entry *res = NULL;
   15664:	2400      	movs	r4, #0
   15666:	e7e3      	b.n	15630 <z_shell_cmd_get+0x1c>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
   15668:	2114      	movs	r1, #20
   1566a:	434d      	muls	r5, r1
   1566c:	195c      	adds	r4, r3, r5
   1566e:	595b      	ldr	r3, [r3, r5]
   15670:	e7f6      	b.n	15660 <z_shell_cmd_get+0x4c>
   15672:	bf00      	nop
   15674:	00030ce4 	.word	0x00030ce4
   15678:	00030d54 	.word	0x00030d54
   1567c:	000338b3 	.word	0x000338b3
   15680:	00032486 	.word	0x00032486
   15684:	00033885 	.word	0x00033885

00015688 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
   15688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1568c:	4606      	mov	r6, r0
	uint16_t len = z_shell_strlen(str);
   1568e:	f017 ffda 	bl	2d646 <z_shell_strlen>
   15692:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
   15694:	bb56      	cbnz	r6, 156ec <z_shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
   15696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
   1569a:	b14c      	cbz	r4, 156b0 <z_shell_spaces_trim+0x28>
					memmove(&str[i + 1],
   1569c:	1c6a      	adds	r2, r5, #1
   1569e:	b29b      	uxth	r3, r3
   156a0:	3001      	adds	r0, #1
   156a2:	1ad2      	subs	r2, r2, r3
   156a4:	4430      	add	r0, r6
   156a6:	f01a ffa6 	bl	305f6 <memmove>
					len -= shift;
   156aa:	1b2d      	subs	r5, r5, r4
   156ac:	b2ad      	uxth	r5, r5
					shift = 0U;
   156ae:	464c      	mov	r4, r9
	for (uint16_t i = 0; i < len - 1; i++) {
   156b0:	3701      	adds	r7, #1
   156b2:	b2bb      	uxth	r3, r7
   156b4:	1e6a      	subs	r2, r5, #1
   156b6:	4293      	cmp	r3, r2
   156b8:	4618      	mov	r0, r3
   156ba:	daec      	bge.n	15696 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   156bc:	5c32      	ldrb	r2, [r6, r0]
   156be:	f812 2008 	ldrb.w	r2, [r2, r8]
   156c2:	0712      	lsls	r2, r2, #28
   156c4:	d5f4      	bpl.n	156b0 <z_shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
   156c6:	3301      	adds	r3, #1
   156c8:	b29b      	uxth	r3, r3
   156ca:	b29a      	uxth	r2, r3
   156cc:	4295      	cmp	r5, r2
   156ce:	d9ef      	bls.n	156b0 <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
   156d0:	5cf2      	ldrb	r2, [r6, r3]
   156d2:	f818 2002 	ldrb.w	r2, [r8, r2]
   156d6:	f012 0908 	ands.w	r9, r2, #8
   156da:	eb06 0103 	add.w	r1, r6, r3
   156de:	f103 0c01 	add.w	ip, r3, #1
   156e2:	d0da      	beq.n	1569a <z_shell_spaces_trim+0x12>
					shift++;
   156e4:	3401      	adds	r4, #1
   156e6:	b2a4      	uxth	r4, r4
   156e8:	4663      	mov	r3, ip
   156ea:	e7ee      	b.n	156ca <z_shell_spaces_trim+0x42>
   156ec:	2700      	movs	r7, #0
		if (isspace((int)str[i])) {
   156ee:	f8df 8008 	ldr.w	r8, [pc, #8]	; 156f8 <z_shell_spaces_trim+0x70>
	uint16_t shift = 0U;
   156f2:	463c      	mov	r4, r7
   156f4:	e7dd      	b.n	156b2 <z_shell_spaces_trim+0x2a>
   156f6:	bf00      	nop
   156f8:	0003811b 	.word	0x0003811b

000156fc <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
   156fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   156fe:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
   15700:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
   15704:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   15706:	b953      	cbnz	r3, 1571e <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   15708:	68ab      	ldr	r3, [r5, #8]
   1570a:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   1570c:	87da      	strh	r2, [r3, #62]	; 0x3e
}
   1570e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   15710:	3a01      	subs	r2, #1
   15712:	b292      	uxth	r2, r2
   15714:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
   15716:	b932      	cbnz	r2, 15726 <z_shell_cmd_trim+0x2a>
			buff[0] = '\0';
   15718:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
   1571c:	e7f4      	b.n	15708 <z_shell_cmd_trim+0xc>
	while (isspace((int) buff[*buff_len - 1U])) {
   1571e:	4911      	ldr	r1, [pc, #68]	; (15764 <z_shell_cmd_trim+0x68>)
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   15720:	f104 0042 	add.w	r0, r4, #66	; 0x42
   15724:	460e      	mov	r6, r1
	while (isspace((int) buff[*buff_len - 1U])) {
   15726:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   15728:	1883      	adds	r3, r0, r2
   1572a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   1572e:	5c5b      	ldrb	r3, [r3, r1]
   15730:	f013 0308 	ands.w	r3, r3, #8
   15734:	d1ec      	bne.n	15710 <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   15736:	5483      	strb	r3, [r0, r2]
	while (isspace((int) buff[i++])) {
   15738:	b29f      	uxth	r7, r3
   1573a:	fa10 f183 	uxtah	r1, r0, r3
   1573e:	f810 c007 	ldrb.w	ip, [r0, r7]
   15742:	f816 c00c 	ldrb.w	ip, [r6, ip]
   15746:	f01c 0f08 	tst.w	ip, #8
   1574a:	f103 0301 	add.w	r3, r3, #1
   1574e:	d1f3      	bne.n	15738 <z_shell_cmd_trim+0x3c>
	if (--i > 0) {
   15750:	2f00      	cmp	r7, #0
   15752:	d0d9      	beq.n	15708 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   15754:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
   15756:	1c73      	adds	r3, r6, #1
   15758:	1bda      	subs	r2, r3, r7
		*buff_len = *buff_len - i;
   1575a:	1bf6      	subs	r6, r6, r7
   1575c:	f01a ff4b 	bl	305f6 <memmove>
   15760:	87a6      	strh	r6, [r4, #60]	; 0x3c
   15762:	e7d1      	b.n	15708 <z_shell_cmd_trim+0xc>
   15764:	0003811b 	.word	0x0003811b

00015768 <z_clear_eos>:
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   15768:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   1576a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   1576e:	069b      	lsls	r3, r3, #26
   15770:	d503      	bpl.n	1577a <z_clear_eos+0x12>
   15772:	4902      	ldr	r1, [pc, #8]	; (1577c <z_clear_eos+0x14>)
   15774:	6940      	ldr	r0, [r0, #20]
   15776:	f018 b81c 	b.w	2d7b2 <z_shell_raw_fprintf>
}
   1577a:	4770      	bx	lr
   1577c:	00030dfc 	.word	0x00030dfc

00015780 <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
   15780:	1e0a      	subs	r2, r1, #0
   15782:	dc0d      	bgt.n	157a0 <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
   15784:	d00e      	beq.n	157a4 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
   15786:	2342      	movs	r3, #66	; 0x42

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
   15788:	6881      	ldr	r1, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   1578a:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
   1578e:	0689      	lsls	r1, r1, #26
   15790:	d508      	bpl.n	157a4 <z_shell_op_cursor_vert_move+0x24>
   15792:	2a00      	cmp	r2, #0
   15794:	4904      	ldr	r1, [pc, #16]	; (157a8 <z_shell_op_cursor_vert_move+0x28>)
   15796:	6940      	ldr	r0, [r0, #20]
   15798:	bfb8      	it	lt
   1579a:	4252      	neglt	r2, r2
   1579c:	f018 b809 	b.w	2d7b2 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
   157a0:	2341      	movs	r3, #65	; 0x41
   157a2:	e7f1      	b.n	15788 <z_shell_op_cursor_vert_move+0x8>
}
   157a4:	4770      	bx	lr
   157a6:	bf00      	nop
   157a8:	000338c7 	.word	0x000338c7

000157ac <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
   157ac:	1e0a      	subs	r2, r1, #0
   157ae:	dc0d      	bgt.n	157cc <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
   157b0:	d00e      	beq.n	157d0 <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
   157b2:	2344      	movs	r3, #68	; 0x44

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
   157b4:	6881      	ldr	r1, [r0, #8]
   157b6:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
   157ba:	0689      	lsls	r1, r1, #26
   157bc:	d508      	bpl.n	157d0 <z_shell_op_cursor_horiz_move+0x24>
   157be:	2a00      	cmp	r2, #0
   157c0:	4904      	ldr	r1, [pc, #16]	; (157d4 <z_shell_op_cursor_horiz_move+0x28>)
   157c2:	6940      	ldr	r0, [r0, #20]
   157c4:	bfb8      	it	lt
   157c6:	4252      	neglt	r2, r2
   157c8:	f017 bff3 	b.w	2d7b2 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
   157cc:	2343      	movs	r3, #67	; 0x43
   157ce:	e7f1      	b.n	157b4 <z_shell_op_cursor_horiz_move+0x8>
}
   157d0:	4770      	bx	lr
   157d2:	bf00      	nop
   157d4:	000338c7 	.word	0x000338c7

000157d8 <z_shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void z_shell_op_cond_next_line(const struct shell *shell)
{
   157d8:	b510      	push	{r4, lr}
   157da:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   157dc:	f018 f80a 	bl	2d7f4 <z_shell_cursor_in_empty_line>
   157e0:	b128      	cbz	r0, 157ee <z_shell_op_cond_next_line+0x16>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   157e2:	6960      	ldr	r0, [r4, #20]
   157e4:	4905      	ldr	r1, [pc, #20]	; (157fc <z_shell_op_cond_next_line+0x24>)
		z_cursor_next_line_move(shell);
	}
}
   157e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   157ea:	f017 bfe2 	b.w	2d7b2 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   157ee:	f104 0008 	add.w	r0, r4, #8
   157f2:	f017 ffeb 	bl	2d7cc <full_line_cmd.isra.0>
   157f6:	2800      	cmp	r0, #0
   157f8:	d1f3      	bne.n	157e2 <z_shell_op_cond_next_line+0xa>
}
   157fa:	bd10      	pop	{r4, pc}
   157fc:	00036e20 	.word	0x00036e20

00015800 <z_shell_op_cursor_position_synchronize>:

void z_shell_op_cursor_position_synchronize(const struct shell *shell)
{
   15800:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   15804:	4606      	mov	r6, r0
{
   15806:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   15808:	f856 4f08 	ldr.w	r4, [r6, #8]!
	bool last_line;

	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   1580c:	f104 0020 	add.w	r0, r4, #32
   15810:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   15812:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   15814:	f017 ff37 	bl	2d686 <z_shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
   15818:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
   1581a:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   1581e:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   15820:	f017 ffd4 	bl	2d7cc <full_line_cmd.isra.0>
   15824:	b118      	cbz	r0, 1582e <z_shell_op_cursor_position_synchronize+0x2e>
   15826:	490a      	ldr	r1, [pc, #40]	; (15850 <z_shell_op_cursor_position_synchronize+0x50>)
   15828:	6968      	ldr	r0, [r5, #20]
   1582a:	f017 ffc2 	bl	2d7b2 <z_shell_raw_fprintf>
		z_cursor_next_line_move(shell);
	}

	if (last_line) {
   1582e:	45b8      	cmp	r8, r7
   15830:	d107      	bne.n	15842 <z_shell_op_cursor_position_synchronize+0x42>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   15832:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   15834:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   15836:	4628      	mov	r0, r5
   15838:	1ac9      	subs	r1, r1, r3
	}
}
   1583a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   1583e:	f7ff bfb5 	b.w	157ac <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   15842:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   15844:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   15846:	4628      	mov	r0, r5
   15848:	1ac9      	subs	r1, r1, r3
   1584a:	f7ff ff99 	bl	15780 <z_shell_op_cursor_vert_move>
   1584e:	e7f0      	b.n	15832 <z_shell_op_cursor_position_synchronize+0x32>
   15850:	00036e20 	.word	0x00036e20

00015854 <z_shell_op_cursor_word_move>:

	return ret;
}

void z_shell_op_cursor_word_move(const struct shell *shell, int16_t val)
{
   15854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t shift;
	int16_t sign;

	if (val < 0) {
   15858:	1e0c      	subs	r4, r1, #0
{
   1585a:	4606      	mov	r6, r0
	if (val < 0) {
   1585c:	da2e      	bge.n	158bc <z_shell_op_cursor_word_move+0x68>
		val = -val;
   1585e:	4264      	negs	r4, r4
   15860:	b224      	sxth	r4, r4
		sign = -1;
   15862:	f04f 35ff 	mov.w	r5, #4294967295
		if (isalnum((int)str[idx]) != 0) {
   15866:	f8df 8058 	ldr.w	r8, [pc, #88]	; 158c0 <z_shell_op_cursor_word_move+0x6c>
   1586a:	b2af      	uxth	r7, r5
   1586c:	e01c      	b.n	158a8 <z_shell_op_cursor_word_move+0x54>
	} else {
		sign = 1;
	}

	while (val--) {
		shift = shift_calc(shell->ctx->cmd_buff,
   1586e:	68b3      	ldr	r3, [r6, #8]
   15870:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   15872:	f8b3 e03c 	ldrh.w	lr, [r3, #60]	; 0x3c
   15876:	f103 0c42 	add.w	ip, r3, #66	; 0x42
	bool found = false;
   1587a:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   1587c:	4613      	mov	r3, r2
		idx = pos + ret * sign;
   1587e:	1a99      	subs	r1, r3, r2
   15880:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   15882:	b913      	cbnz	r3, 1588a <z_shell_op_cursor_word_move+0x36>
   15884:	f1b5 3fff 	cmp.w	r5, #4294967295
   15888:	d00b      	beq.n	158a2 <z_shell_op_cursor_word_move+0x4e>
   1588a:	459e      	cmp	lr, r3
   1588c:	d101      	bne.n	15892 <z_shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
   1588e:	2d01      	cmp	r5, #1
   15890:	d007      	beq.n	158a2 <z_shell_op_cursor_word_move+0x4e>
		if (isalnum((int)str[idx]) != 0) {
   15892:	f81c 9003 	ldrb.w	r9, [ip, r3]
   15896:	f819 9008 	ldrb.w	r9, [r9, r8]
   1589a:	f019 0f07 	tst.w	r9, #7
   1589e:	d109      	bne.n	158b4 <z_shell_op_cursor_word_move+0x60>
			if (found) {
   158a0:	b148      	cbz	r0, 158b6 <z_shell_op_cursor_word_move+0x62>
				   shell->ctx->cmd_buff_pos,
				   shell->ctx->cmd_buff_len, sign);
		z_shell_op_cursor_move(shell, sign * shift);
   158a2:	4630      	mov	r0, r6
   158a4:	f017 ffba 	bl	2d81c <z_shell_op_cursor_move>
	while (val--) {
   158a8:	3c01      	subs	r4, #1
   158aa:	b224      	sxth	r4, r4
   158ac:	1c63      	adds	r3, r4, #1
   158ae:	d1de      	bne.n	1586e <z_shell_op_cursor_word_move+0x1a>
	}
}
   158b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   158b4:	2001      	movs	r0, #1
	while (1) {
   158b6:	443b      	add	r3, r7
   158b8:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
   158ba:	e7e0      	b.n	1587e <z_shell_op_cursor_word_move+0x2a>
		sign = 1;
   158bc:	2501      	movs	r5, #1
   158be:	e7d2      	b.n	15866 <z_shell_op_cursor_word_move+0x12>
   158c0:	0003811b 	.word	0x0003811b

000158c4 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
   158c4:	6882      	ldr	r2, [r0, #8]
   158c6:	4902      	ldr	r1, [pc, #8]	; (158d0 <z_shell_print_cmd+0xc>)
   158c8:	6940      	ldr	r0, [r0, #20]
   158ca:	3242      	adds	r2, #66	; 0x42
   158cc:	f017 bf71 	b.w	2d7b2 <z_shell_raw_fprintf>
   158d0:	000330d8 	.word	0x000330d8

000158d4 <z_shell_write>:
	}
}

void z_shell_write(const struct shell *shell, const void *data,
		 size_t length)
{
   158d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158d8:	460e      	mov	r6, r1
   158da:	b087      	sub	sp, #28
   158dc:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(shell && data);
   158de:	4605      	mov	r5, r0
   158e0:	b100      	cbz	r0, 158e4 <z_shell_write+0x10>
   158e2:	b959      	cbnz	r1, 158fc <z_shell_write+0x28>
   158e4:	4936      	ldr	r1, [pc, #216]	; (159c0 <z_shell_write+0xec>)
   158e6:	4837      	ldr	r0, [pc, #220]	; (159c4 <z_shell_write+0xf0>)
   158e8:	4a37      	ldr	r2, [pc, #220]	; (159c8 <z_shell_write+0xf4>)
   158ea:	f44f 73ca 	mov.w	r3, #404	; 0x194
   158ee:	f016 fe54 	bl	2c59a <printk>
   158f2:	4835      	ldr	r0, [pc, #212]	; (159c8 <z_shell_write+0xf4>)
   158f4:	f44f 71ca 	mov.w	r1, #404	; 0x194
   158f8:	f017 f890 	bl	2ca1c <assert_post_action>
	while (length) {
		int err = shell->iface->api->write(shell->iface,
				&((const uint8_t *) data)[offset], length,
				&tmp_cnt);
		(void)err;
		__ASSERT_NO_MSG(err == 0);
   158fc:	4f32      	ldr	r7, [pc, #200]	; (159c8 <z_shell_write+0xf4>)
   158fe:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 159d0 <z_shell_write+0xfc>
   15902:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 159c4 <z_shell_write+0xf0>
{
   15906:	f04f 0800 	mov.w	r8, #0
	while (length) {
   1590a:	b914      	cbnz	r4, 15912 <z_shell_write+0x3e>
		if (tmp_cnt == 0 &&
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
			shell_pend_on_txdone(shell);
		}
	}
}
   1590c:	b007      	add	sp, #28
   1590e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int err = shell->iface->api->write(shell->iface,
   15912:	6868      	ldr	r0, [r5, #4]
   15914:	6803      	ldr	r3, [r0, #0]
   15916:	4622      	mov	r2, r4
   15918:	f8d3 b00c 	ldr.w	fp, [r3, #12]
   1591c:	eb06 0108 	add.w	r1, r6, r8
   15920:	466b      	mov	r3, sp
   15922:	47d8      	blx	fp
		__ASSERT_NO_MSG(err == 0);
   15924:	b158      	cbz	r0, 1593e <z_shell_write+0x6a>
   15926:	4651      	mov	r1, sl
   15928:	4648      	mov	r0, r9
   1592a:	f44f 73cf 	mov.w	r3, #414	; 0x19e
   1592e:	463a      	mov	r2, r7
   15930:	f016 fe33 	bl	2c59a <printk>
   15934:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   15938:	4638      	mov	r0, r7
   1593a:	f017 f86f 	bl	2ca1c <assert_post_action>
		__ASSERT_NO_MSG(length >= tmp_cnt);
   1593e:	9b00      	ldr	r3, [sp, #0]
   15940:	42a3      	cmp	r3, r4
   15942:	d90b      	bls.n	1595c <z_shell_write+0x88>
   15944:	4921      	ldr	r1, [pc, #132]	; (159cc <z_shell_write+0xf8>)
   15946:	4648      	mov	r0, r9
   15948:	f240 139f 	movw	r3, #415	; 0x19f
   1594c:	463a      	mov	r2, r7
   1594e:	f016 fe24 	bl	2c59a <printk>
   15952:	f240 119f 	movw	r1, #415	; 0x19f
   15956:	4638      	mov	r0, r7
   15958:	f017 f860 	bl	2ca1c <assert_post_action>
		offset += tmp_cnt;
   1595c:	9a00      	ldr	r2, [sp, #0]
   1595e:	4490      	add	r8, r2
		length -= tmp_cnt;
   15960:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
   15962:	2a00      	cmp	r2, #0
   15964:	d1d1      	bne.n	1590a <z_shell_write+0x36>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   15966:	68ab      	ldr	r3, [r5, #8]
   15968:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
   1596a:	2903      	cmp	r1, #3
   1596c:	d0cd      	beq.n	1590a <z_shell_write+0x36>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   1596e:	2902      	cmp	r1, #2
   15970:	d813      	bhi.n	1599a <z_shell_write+0xc6>
		k_poll_event_init(&event,
   15972:	f503 7326 	add.w	r3, r3, #664	; 0x298
   15976:	2101      	movs	r1, #1
   15978:	a801      	add	r0, sp, #4
   1597a:	f013 fa19 	bl	28db0 <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
   1597e:	f04f 32ff 	mov.w	r2, #4294967295
   15982:	f04f 33ff 	mov.w	r3, #4294967295
   15986:	2101      	movs	r1, #1
   15988:	a801      	add	r0, sp, #4
   1598a:	f013 fa5f 	bl	28e4c <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   1598e:	68a8      	ldr	r0, [r5, #8]
   15990:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
   15994:	f01a fe02 	bl	3059c <z_impl_k_poll_signal_reset>
   15998:	e7b7      	b.n	1590a <z_shell_write+0x36>
	return sh->ctx->ctx.flags.tx_rdy == 1;
   1599a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
   1599e:	0792      	lsls	r2, r2, #30
   159a0:	d5fb      	bpl.n	1599a <z_shell_write+0xc6>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   159a2:	f3bf 8f5b 	dmb	ish
   159a6:	f503 7319 	add.w	r3, r3, #612	; 0x264
   159aa:	e853 2f00 	ldrex	r2, [r3]
   159ae:	f022 0202 	bic.w	r2, r2, #2
   159b2:	e843 2100 	strex	r1, r2, [r3]
   159b6:	2900      	cmp	r1, #0
   159b8:	d1f7      	bne.n	159aa <z_shell_write+0xd6>
   159ba:	f3bf 8f5b 	dmb	ish
	return ret;
   159be:	e7a4      	b.n	1590a <z_shell_write+0x36>
   159c0:	000338fa 	.word	0x000338fa
   159c4:	00032486 	.word	0x00032486
   159c8:	000338ce 	.word	0x000338ce
   159cc:	00033908 	.word	0x00033908
   159d0:	000327b2 	.word	0x000327b2

000159d4 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
   159d4:	2908      	cmp	r1, #8
{
   159d6:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
   159d8:	d817      	bhi.n	15a0a <z_shell_vt100_color_set+0x36>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
   159da:	6883      	ldr	r3, [r0, #8]
   159dc:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
   159e0:	4291      	cmp	r1, r2
   159e2:	d012      	beq.n	15a0a <z_shell_vt100_color_set+0x36>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
   159e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
   159e8:	6883      	ldr	r3, [r0, #8]
   159ea:	2a08      	cmp	r2, #8
	return sh->ctx->cfg.flags.use_vt100 == 1;
   159ec:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   159f0:	d005      	beq.n	159fe <z_shell_vt100_color_set+0x2a>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
   159f2:	0699      	lsls	r1, r3, #26
   159f4:	d509      	bpl.n	15a0a <z_shell_vt100_color_set+0x36>
   159f6:	4905      	ldr	r1, [pc, #20]	; (15a0c <z_shell_vt100_color_set+0x38>)
   159f8:	6940      	ldr	r0, [r0, #20]
   159fa:	f017 beda 	b.w	2d7b2 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
   159fe:	069b      	lsls	r3, r3, #26
   15a00:	d503      	bpl.n	15a0a <z_shell_vt100_color_set+0x36>
   15a02:	4903      	ldr	r1, [pc, #12]	; (15a10 <z_shell_vt100_color_set+0x3c>)
   15a04:	6940      	ldr	r0, [r0, #20]
   15a06:	f017 bed4 	b.w	2d7b2 <z_shell_raw_fprintf>
	}
}
   15a0a:	4770      	bx	lr
   15a0c:	0003391a 	.word	0x0003391a
   15a10:	00030e01 	.word	0x00030e01

00015a14 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
   15a14:	b538      	push	{r3, r4, r5, lr}
   15a16:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
   15a18:	7809      	ldrb	r1, [r1, #0]
{
   15a1a:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
   15a1c:	f7ff ffda 	bl	159d4 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
   15a20:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
   15a22:	2a07      	cmp	r2, #7
   15a24:	d811      	bhi.n	15a4a <z_shell_vt100_colors_restore+0x36>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
   15a26:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
   15a28:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
   15a2c:	4291      	cmp	r1, r2
   15a2e:	d00c      	beq.n	15a4a <z_shell_vt100_colors_restore+0x36>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
   15a30:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
   15a34:	68a3      	ldr	r3, [r4, #8]
   15a36:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   15a3a:	069b      	lsls	r3, r3, #26
   15a3c:	d505      	bpl.n	15a4a <z_shell_vt100_colors_restore+0x36>
   15a3e:	6960      	ldr	r0, [r4, #20]
   15a40:	4902      	ldr	r1, [pc, #8]	; (15a4c <z_shell_vt100_colors_restore+0x38>)
}
   15a42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
   15a46:	f017 beb4 	b.w	2d7b2 <z_shell_raw_fprintf>
}
   15a4a:	bd38      	pop	{r3, r4, r5, pc}
   15a4c:	00033923 	.word	0x00033923

00015a50 <z_shell_fprintf>:
}

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
   15a50:	b40c      	push	{r2, r3}
   15a52:	b573      	push	{r0, r1, r4, r5, r6, lr}
   15a54:	9e06      	ldr	r6, [sp, #24]
   15a56:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(sh);
   15a58:	4604      	mov	r4, r0
   15a5a:	b958      	cbnz	r0, 15a74 <z_shell_fprintf+0x24>
   15a5c:	492b      	ldr	r1, [pc, #172]	; (15b0c <z_shell_fprintf+0xbc>)
   15a5e:	482c      	ldr	r0, [pc, #176]	; (15b10 <z_shell_fprintf+0xc0>)
   15a60:	4a2c      	ldr	r2, [pc, #176]	; (15b14 <z_shell_fprintf+0xc4>)
   15a62:	f240 13fd 	movw	r3, #509	; 0x1fd
   15a66:	f016 fd98 	bl	2c59a <printk>
   15a6a:	482a      	ldr	r0, [pc, #168]	; (15b14 <z_shell_fprintf+0xc4>)
   15a6c:	f240 11fd 	movw	r1, #509	; 0x1fd
   15a70:	f016 ffd4 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(sh->ctx);
   15a74:	68a3      	ldr	r3, [r4, #8]
   15a76:	b95b      	cbnz	r3, 15a90 <z_shell_fprintf+0x40>
   15a78:	4927      	ldr	r1, [pc, #156]	; (15b18 <z_shell_fprintf+0xc8>)
   15a7a:	4825      	ldr	r0, [pc, #148]	; (15b10 <z_shell_fprintf+0xc0>)
   15a7c:	4a25      	ldr	r2, [pc, #148]	; (15b14 <z_shell_fprintf+0xc4>)
   15a7e:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   15a82:	f016 fd8a 	bl	2c59a <printk>
   15a86:	4823      	ldr	r0, [pc, #140]	; (15b14 <z_shell_fprintf+0xc4>)
   15a88:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   15a8c:	f016 ffc6 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(sh->fprintf_ctx);
   15a90:	6963      	ldr	r3, [r4, #20]
   15a92:	b95b      	cbnz	r3, 15aac <z_shell_fprintf+0x5c>
   15a94:	4921      	ldr	r1, [pc, #132]	; (15b1c <z_shell_fprintf+0xcc>)
   15a96:	481e      	ldr	r0, [pc, #120]	; (15b10 <z_shell_fprintf+0xc0>)
   15a98:	4a1e      	ldr	r2, [pc, #120]	; (15b14 <z_shell_fprintf+0xc4>)
   15a9a:	f240 13ff 	movw	r3, #511	; 0x1ff
   15a9e:	f016 fd7c 	bl	2c59a <printk>
   15aa2:	481c      	ldr	r0, [pc, #112]	; (15b14 <z_shell_fprintf+0xc4>)
   15aa4:	f240 11ff 	movw	r1, #511	; 0x1ff
   15aa8:	f016 ffb8 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(fmt);
   15aac:	b95e      	cbnz	r6, 15ac6 <z_shell_fprintf+0x76>
   15aae:	491c      	ldr	r1, [pc, #112]	; (15b20 <z_shell_fprintf+0xd0>)
   15ab0:	4817      	ldr	r0, [pc, #92]	; (15b10 <z_shell_fprintf+0xc0>)
   15ab2:	4a18      	ldr	r2, [pc, #96]	; (15b14 <z_shell_fprintf+0xc4>)
   15ab4:	f44f 7300 	mov.w	r3, #512	; 0x200
   15ab8:	f016 fd6f 	bl	2c59a <printk>
   15abc:	4815      	ldr	r0, [pc, #84]	; (15b14 <z_shell_fprintf+0xc4>)
   15abe:	f44f 7100 	mov.w	r1, #512	; 0x200
   15ac2:	f016 ffab 	bl	2ca1c <assert_post_action>
	__ASSERT(z_flag_panic_mode_get(sh) || !k_is_in_isr(),
   15ac6:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->ctx.flags.panic_mode == 1;
   15ac8:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
   15acc:	049b      	lsls	r3, r3, #18
   15ace:	d411      	bmi.n	15af4 <z_shell_fprintf+0xa4>
   15ad0:	f01a fbc8 	bl	30264 <k_is_in_isr>
   15ad4:	b170      	cbz	r0, 15af4 <z_shell_fprintf+0xa4>
   15ad6:	4913      	ldr	r1, [pc, #76]	; (15b24 <z_shell_fprintf+0xd4>)
   15ad8:	4a0e      	ldr	r2, [pc, #56]	; (15b14 <z_shell_fprintf+0xc4>)
   15ada:	480d      	ldr	r0, [pc, #52]	; (15b10 <z_shell_fprintf+0xc0>)
   15adc:	f240 2301 	movw	r3, #513	; 0x201
   15ae0:	f016 fd5b 	bl	2c59a <printk>
   15ae4:	4810      	ldr	r0, [pc, #64]	; (15b28 <z_shell_fprintf+0xd8>)
   15ae6:	f016 fd58 	bl	2c59a <printk>
   15aea:	480a      	ldr	r0, [pc, #40]	; (15b14 <z_shell_fprintf+0xc4>)
   15aec:	f240 2101 	movw	r1, #513	; 0x201
   15af0:	f016 ff94 	bl	2ca1c <assert_post_action>
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
   15af4:	ab07      	add	r3, sp, #28
	z_shell_vfprintf(sh, color, fmt, args);
   15af6:	4632      	mov	r2, r6
   15af8:	4629      	mov	r1, r5
   15afa:	4620      	mov	r0, r4
	va_start(args, fmt);
   15afc:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
   15afe:	f017 fef4 	bl	2d8ea <z_shell_vfprintf>
	va_end(args);
}
   15b02:	b002      	add	sp, #8
   15b04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   15b08:	b002      	add	sp, #8
   15b0a:	4770      	bx	lr
   15b0c:	000359c0 	.word	0x000359c0
   15b10:	00032486 	.word	0x00032486
   15b14:	000338ce 	.word	0x000338ce
   15b18:	00033669 	.word	0x00033669
   15b1c:	000336ad 	.word	0x000336ad
   15b20:	000336bd 	.word	0x000336bd
   15b24:	0003392c 	.word	0x0003392c
   15b28:	0003364e 	.word	0x0003364e

00015b2c <z_shell_op_word_remove>:
{
   15b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   15b2e:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
   15b30:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
   15b32:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   15b34:	2a00      	cmp	r2, #0
   15b36:	d04e      	beq.n	15bd6 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   15b38:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
   15b3a:	2800      	cmp	r0, #0
   15b3c:	d04b      	beq.n	15bd6 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   15b3e:	3041      	adds	r0, #65	; 0x41
   15b40:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
   15b42:	f103 0642 	add.w	r6, r3, #66	; 0x42
   15b46:	4603      	mov	r3, r0
   15b48:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
   15b4a:	42b3      	cmp	r3, r6
   15b4c:	b2a4      	uxth	r4, r4
   15b4e:	4619      	mov	r1, r3
   15b50:	d30d      	bcc.n	15b6e <z_shell_op_word_remove+0x42>
   15b52:	f811 7901 	ldrb.w	r7, [r1], #-1
   15b56:	2f20      	cmp	r7, #32
   15b58:	d03b      	beq.n	15bd2 <z_shell_op_word_remove+0xa6>
   15b5a:	4619      	mov	r1, r3
   15b5c:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
   15b5e:	7808      	ldrb	r0, [r1, #0]
   15b60:	2820      	cmp	r0, #32
   15b62:	d004      	beq.n	15b6e <z_shell_op_word_remove+0x42>
		++chars_to_delete;
   15b64:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
   15b66:	429e      	cmp	r6, r3
		++chars_to_delete;
   15b68:	b2a4      	uxth	r4, r4
		--str;
   15b6a:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
   15b6c:	d9f5      	bls.n	15b5a <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
   15b6e:	1c63      	adds	r3, r4, #1
   15b70:	1c4e      	adds	r6, r1, #1
   15b72:	1b12      	subs	r2, r2, r4
   15b74:	4419      	add	r1, r3
   15b76:	4630      	mov	r0, r6
   15b78:	f01a fd3d 	bl	305f6 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
   15b7c:	68a9      	ldr	r1, [r5, #8]
   15b7e:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
   15b80:	1b12      	subs	r2, r2, r4
   15b82:	b292      	uxth	r2, r2
   15b84:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   15b86:	440a      	add	r2, r1
   15b88:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
   15b8a:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   15b8c:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
   15b90:	b209      	sxth	r1, r1
   15b92:	4628      	mov	r0, r5
   15b94:	f017 fe42 	bl	2d81c <z_shell_op_cursor_move>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   15b98:	68ab      	ldr	r3, [r5, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   15b9a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   15b9e:	069a      	lsls	r2, r3, #26
   15ba0:	d503      	bpl.n	15baa <z_shell_op_word_remove+0x7e>
   15ba2:	490d      	ldr	r1, [pc, #52]	; (15bd8 <z_shell_op_word_remove+0xac>)
   15ba4:	6968      	ldr	r0, [r5, #20]
   15ba6:	f017 fe04 	bl	2d7b2 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
   15baa:	4633      	mov	r3, r6
   15bac:	4a0b      	ldr	r2, [pc, #44]	; (15bdc <z_shell_op_word_remove+0xb0>)
   15bae:	2108      	movs	r1, #8
   15bb0:	4628      	mov	r0, r5
   15bb2:	f7ff ff4d 	bl	15a50 <z_shell_fprintf>
	z_clear_eos(shell);
   15bb6:	4628      	mov	r0, r5
   15bb8:	f7ff fdd6 	bl	15768 <z_clear_eos>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   15bbc:	68ab      	ldr	r3, [r5, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   15bbe:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   15bc2:	069b      	lsls	r3, r3, #26
   15bc4:	d507      	bpl.n	15bd6 <z_shell_op_word_remove+0xaa>
   15bc6:	6968      	ldr	r0, [r5, #20]
   15bc8:	4905      	ldr	r1, [pc, #20]	; (15be0 <z_shell_op_word_remove+0xb4>)
}
   15bca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   15bce:	f017 bdf0 	b.w	2d7b2 <z_shell_raw_fprintf>
   15bd2:	460b      	mov	r3, r1
   15bd4:	e7b8      	b.n	15b48 <z_shell_op_word_remove+0x1c>
   15bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15bd8:	00030e06 	.word	0x00030e06
   15bdc:	000330d8 	.word	0x000330d8
   15be0:	00030e0a 	.word	0x00030e0a

00015be4 <reprint_from_cursor>:
{
   15be4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   15be8:	4604      	mov	r4, r0
   15bea:	460d      	mov	r5, r1
	if (data_removed) {
   15bec:	4617      	mov	r7, r2
   15bee:	b10a      	cbz	r2, 15bf4 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
   15bf0:	f7ff fdba 	bl	15768 <z_clear_eos>
	if (z_flag_obscure_get(shell)) {
   15bf4:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.obscure == 1;
   15bf6:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
   15bfa:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
   15bfc:	0752      	lsls	r2, r2, #29
   15bfe:	f100 0042 	add.w	r0, r0, #66	; 0x42
   15c02:	4403      	add	r3, r0
   15c04:	d521      	bpl.n	15c4a <reprint_from_cursor+0x66>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   15c06:	4618      	mov	r0, r3
   15c08:	f7f7 fbd4 	bl	d3b4 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
   15c0c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 15c60 <reprint_from_cursor+0x7c>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   15c10:	4606      	mov	r6, r0
		while (len--) {
   15c12:	3e01      	subs	r6, #1
   15c14:	d214      	bcs.n	15c40 <reprint_from_cursor+0x5c>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   15c16:	4620      	mov	r0, r4
   15c18:	f850 3f08 	ldr.w	r3, [r0, #8]!
   15c1c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   15c1e:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
   15c20:	f017 fdd4 	bl	2d7cc <full_line_cmd.isra.0>
   15c24:	b128      	cbz	r0, 15c32 <reprint_from_cursor+0x4e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
   15c26:	b107      	cbz	r7, 15c2a <reprint_from_cursor+0x46>
   15c28:	b11d      	cbz	r5, 15c32 <reprint_from_cursor+0x4e>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   15c2a:	490b      	ldr	r1, [pc, #44]	; (15c58 <reprint_from_cursor+0x74>)
   15c2c:	6960      	ldr	r0, [r4, #20]
   15c2e:	f017 fdc0 	bl	2d7b2 <z_shell_raw_fprintf>
	z_shell_op_cursor_move(shell, -diff);
   15c32:	4269      	negs	r1, r5
   15c34:	4620      	mov	r0, r4
   15c36:	b209      	sxth	r1, r1
}
   15c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
   15c3c:	f017 bdee 	b.w	2d81c <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
   15c40:	6960      	ldr	r0, [r4, #20]
   15c42:	4641      	mov	r1, r8
   15c44:	f017 fdb5 	bl	2d7b2 <z_shell_raw_fprintf>
   15c48:	e7e3      	b.n	15c12 <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
   15c4a:	4a04      	ldr	r2, [pc, #16]	; (15c5c <reprint_from_cursor+0x78>)
   15c4c:	2108      	movs	r1, #8
   15c4e:	4620      	mov	r0, r4
   15c50:	f7ff fefe 	bl	15a50 <z_shell_fprintf>
   15c54:	e7df      	b.n	15c16 <reprint_from_cursor+0x32>
   15c56:	bf00      	nop
   15c58:	00036e20 	.word	0x00036e20
   15c5c:	000330d8 	.word	0x000330d8
   15c60:	00034596 	.word	0x00034596

00015c64 <z_shell_op_char_insert>:
{
   15c64:	b513      	push	{r0, r1, r4, lr}
	if (z_flag_insert_mode_get(shell) &&
   15c66:	6883      	ldr	r3, [r0, #8]
{
   15c68:	f88d 1007 	strb.w	r1, [sp, #7]
	return sh->ctx->cfg.flags.insert_mode == 1;
   15c6c:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
   15c70:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
   15c72:	07d0      	lsls	r0, r2, #31
   15c74:	d523      	bpl.n	15cbe <z_shell_op_char_insert+0x5a>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
   15c76:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
   15c78:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   15c7a:	428a      	cmp	r2, r1
   15c7c:	d01f      	beq.n	15cbe <z_shell_op_char_insert+0x5a>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   15c7e:	1c48      	adds	r0, r1, #1
   15c80:	87d8      	strh	r0, [r3, #62]	; 0x3e
   15c82:	440b      	add	r3, r1
		char_replace(shell, data);
   15c84:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   15c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	if (!z_flag_echo_get(shell)) {
   15c8c:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
   15c8e:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
   15c92:	0789      	lsls	r1, r1, #30
   15c94:	d511      	bpl.n	15cba <z_shell_op_char_insert+0x56>
	return sh->ctx->cfg.flags.obscure == 1;
   15c96:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   15c9a:	6960      	ldr	r0, [r4, #20]
   15c9c:	490b      	ldr	r1, [pc, #44]	; (15ccc <z_shell_op_char_insert+0x68>)
		data = '*';
   15c9e:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   15ca2:	bf18      	it	ne
   15ca4:	222a      	movne	r2, #42	; 0x2a
   15ca6:	f017 fd84 	bl	2d7b2 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
   15caa:	4620      	mov	r0, r4
   15cac:	f017 fda2 	bl	2d7f4 <z_shell_cursor_in_empty_line>
   15cb0:	b118      	cbz	r0, 15cba <z_shell_op_char_insert+0x56>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   15cb2:	4907      	ldr	r1, [pc, #28]	; (15cd0 <z_shell_op_char_insert+0x6c>)
   15cb4:	6960      	ldr	r0, [r4, #20]
   15cb6:	f017 fd7c 	bl	2d7b2 <z_shell_raw_fprintf>
}
   15cba:	b002      	add	sp, #8
   15cbc:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
   15cbe:	2201      	movs	r2, #1
   15cc0:	f10d 0107 	add.w	r1, sp, #7
   15cc4:	4620      	mov	r0, r4
   15cc6:	f017 fe33 	bl	2d930 <data_insert>
}
   15cca:	e7f6      	b.n	15cba <z_shell_op_char_insert+0x56>
   15ccc:	000338cb 	.word	0x000338cb
   15cd0:	00036e20 	.word	0x00036e20

00015cd4 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   15cd4:	6883      	ldr	r3, [r0, #8]
   15cd6:	4a0a      	ldr	r2, [pc, #40]	; (15d00 <z_shell_print_prompt_and_cmd+0x2c>)
   15cd8:	681b      	ldr	r3, [r3, #0]
{
   15cda:	b510      	push	{r4, lr}
   15cdc:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   15cde:	2102      	movs	r1, #2
   15ce0:	f7ff feb6 	bl	15a50 <z_shell_fprintf>
	if (z_flag_echo_get(shell)) {
   15ce4:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
   15ce6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   15cea:	079b      	lsls	r3, r3, #30
   15cec:	d507      	bpl.n	15cfe <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
   15cee:	4620      	mov	r0, r4
   15cf0:	f7ff fde8 	bl	158c4 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
   15cf4:	4620      	mov	r0, r4
}
   15cf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
   15cfa:	f7ff bd81 	b.w	15800 <z_shell_op_cursor_position_synchronize>
}
   15cfe:	bd10      	pop	{r4, pc}
   15d00:	000330d8 	.word	0x000330d8

00015d04 <put>:

	return true;
}

static void put(const struct log_backend *const backend, struct log_msg *msg)
{
   15d04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   15d08:	6843      	ldr	r3, [r0, #4]
   15d0a:	681c      	ldr	r4, [r3, #0]
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);
   15d0c:	68a3      	ldr	r3, [r4, #8]
	struct k_poll_signal *signal;

	log_msg_get(msg);
   15d0e:	4608      	mov	r0, r1
	return sh->ctx->cfg.flags.use_colors == 1;
   15d10:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
{
   15d14:	460d      	mov	r5, r1
	log_msg_get(msg);
   15d16:	f017 f8a6 	bl	2ce66 <log_msg_get>

	switch (shell->log_backend->control_block->state) {
   15d1a:	69e3      	ldr	r3, [r4, #28]
   15d1c:	68db      	ldr	r3, [r3, #12]
   15d1e:	791b      	ldrb	r3, [r3, #4]
   15d20:	2b01      	cmp	r3, #1
   15d22:	f3c6 1600 	ubfx	r6, r6, #4, #1
   15d26:	d005      	beq.n	15d34 <put+0x30>
   15d28:	2b03      	cmp	r3, #3
   15d2a:	d078      	beq.n	15e1e <put+0x11a>

	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		/* Discard message. */
		log_msg_put(msg);
   15d2c:	4628      	mov	r0, r5
   15d2e:	f017 f8c9 	bl	2cec4 <log_msg_put>
	}
}
   15d32:	e071      	b.n	15e18 <put+0x114>
	struct shell_log_backend_msg t_msg = {
   15d34:	9500      	str	r5, [sp, #0]
	return z_impl_k_uptime_ticks();
   15d36:	f01a fb91 	bl	3045c <z_impl_k_uptime_ticks>
   15d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15d3e:	460a      	mov	r2, r1
   15d40:	fba0 0103 	umull	r0, r1, r0, r3
   15d44:	fb03 1102 	mla	r1, r3, r2, r1
   15d48:	0bc3      	lsrs	r3, r0, #15
   15d4a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (uint32_t)k_uptime_get();
   15d4e:	9301      	str	r3, [sp, #4]
   15d50:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   15d54:	f240 36e7 	movw	r6, #999	; 0x3e7
   15d58:	2700      	movs	r7, #0
		err = k_msgq_put(shell->log_backend->msgq, &t_msg,
   15d5a:	69e3      	ldr	r3, [r4, #28]
   15d5c:	6919      	ldr	r1, [r3, #16]
   15d5e:	f8d3 8004 	ldr.w	r8, [r3, #4]
   15d62:	46b1      	mov	r9, r6
   15d64:	46ba      	mov	sl, r7
   15d66:	fbe5 9a01 	umlal	r9, sl, r5, r1
   15d6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15d6e:	2300      	movs	r3, #0
   15d70:	4648      	mov	r0, r9
   15d72:	4651      	mov	r1, sl
   15d74:	f7eb fa64 	bl	1240 <__aeabi_uldivmod>
   15d78:	4602      	mov	r2, r0
   15d7a:	460b      	mov	r3, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
   15d7c:	4669      	mov	r1, sp
   15d7e:	4640      	mov	r0, r8
   15d80:	f00f fb64 	bl	2544c <z_impl_k_msgq_put>
		switch (err) {
   15d84:	f110 0f0b 	cmn.w	r0, #11
   15d88:	d003      	beq.n	15d92 <put+0x8e>
   15d8a:	2800      	cmp	r0, #0
   15d8c:	d03e      	beq.n	15e0c <put+0x108>
   15d8e:	3023      	adds	r0, #35	; 0x23
   15d90:	d132      	bne.n	15df8 <put+0xf4>
	struct k_msgq *msgq = shell->log_backend->msgq;
   15d92:	69e3      	ldr	r3, [r4, #28]
   15d94:	f8d3 8004 	ldr.w	r8, [r3, #4]
	uint32_t timeout = shell->log_backend->timeout;
   15d98:	f8d3 9010 	ldr.w	r9, [r3, #16]
	return z_impl_k_uptime_ticks();
   15d9c:	f01a fb5e 	bl	3045c <z_impl_k_uptime_ticks>
   15da0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   15da4:	460a      	mov	r2, r1
   15da6:	fba0 0103 	umull	r0, r1, r0, r3
   15daa:	fb03 1102 	mla	r1, r3, r2, r1
   15dae:	ea4f 3ad0 	mov.w	sl, r0, lsr #15
   15db2:	ea4a 4a41 	orr.w	sl, sl, r1, lsl #17
	return z_impl_k_msgq_peek(msgq, data);
   15db6:	a902      	add	r1, sp, #8
   15db8:	4640      	mov	r0, r8
   15dba:	f00f fc9d 	bl	256f8 <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
   15dbe:	2800      	cmp	r0, #0
   15dc0:	d1cb      	bne.n	15d5a <put+0x56>
   15dc2:	9b03      	ldr	r3, [sp, #12]
   15dc4:	ebaa 0303 	sub.w	r3, sl, r3
   15dc8:	4599      	cmp	r9, r3
   15dca:	d2c6      	bcs.n	15d5a <put+0x56>
	return z_impl_k_msgq_get(msgq, data, timeout);
   15dcc:	2300      	movs	r3, #0
   15dce:	2200      	movs	r2, #0
   15dd0:	a902      	add	r1, sp, #8
   15dd2:	4640      	mov	r0, r8
   15dd4:	f00f fbe2 	bl	2559c <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
   15dd8:	9802      	ldr	r0, [sp, #8]
   15dda:	f017 f873 	bl	2cec4 <log_msg_put>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   15dde:	69a3      	ldr	r3, [r4, #24]
   15de0:	f3bf 8f5b 	dmb	ish
   15de4:	e853 2f00 	ldrex	r2, [r3]
   15de8:	3201      	adds	r2, #1
   15dea:	e843 2100 	strex	r1, r2, [r3]
   15dee:	2900      	cmp	r1, #0
   15df0:	d1f8      	bne.n	15de4 <put+0xe0>
   15df2:	f3bf 8f5b 	dmb	ish
		err = k_msgq_peek(msgq, &msg);
   15df6:	e7de      	b.n	15db6 <put+0xb2>
			__ASSERT_NO_MSG(0);
   15df8:	490f      	ldr	r1, [pc, #60]	; (15e38 <put+0x134>)
   15dfa:	4810      	ldr	r0, [pc, #64]	; (15e3c <put+0x138>)
   15dfc:	4a10      	ldr	r2, [pc, #64]	; (15e40 <put+0x13c>)
   15dfe:	237f      	movs	r3, #127	; 0x7f
   15e00:	f016 fbcb 	bl	2c59a <printk>
   15e04:	480e      	ldr	r0, [pc, #56]	; (15e40 <put+0x13c>)
   15e06:	217f      	movs	r1, #127	; 0x7f
   15e08:	f016 fe08 	bl	2ca1c <assert_post_action>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   15e0c:	68a0      	ldr	r0, [r4, #8]
   15e0e:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
   15e12:	2100      	movs	r1, #0
   15e14:	f013 f928 	bl	29068 <z_impl_k_poll_signal_raise>
}
   15e18:	b004      	add	sp, #16
   15e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		z_shell_cmd_line_erase(shell);
   15e1e:	4620      	mov	r0, r4
   15e20:	f017 fd47 	bl	2d8b2 <z_shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
   15e24:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   15e26:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   15e28:	6898      	ldr	r0, [r3, #8]
   15e2a:	bf0c      	ite	eq
   15e2c:	220e      	moveq	r2, #14
   15e2e:	220f      	movne	r2, #15
   15e30:	4629      	mov	r1, r5
   15e32:	f7fd f9ff 	bl	13234 <log_output_msg_process>
	log_msg_put(msg);
   15e36:	e779      	b.n	15d2c <put+0x28>
   15e38:	000380f0 	.word	0x000380f0
   15e3c:	00032486 	.word	0x00032486
   15e40:	00033958 	.word	0x00033958

00015e44 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
   15e44:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e48:	4604      	mov	r4, r0
   15e4a:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
   15e4c:	460e      	mov	r6, r1
   15e4e:	2900      	cmp	r1, #0
   15e50:	d06b      	beq.n	15f2a <formatted_text_print.constprop.0+0xe6>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
   15e52:	4b37      	ldr	r3, [pc, #220]	; (15f30 <formatted_text_print.constprop.0+0xec>)
   15e54:	2500      	movs	r5, #0
   15e56:	4699      	mov	r9, r3
   15e58:	5d72      	ldrb	r2, [r6, r5]
   15e5a:	5cd2      	ldrb	r2, [r2, r3]
   15e5c:	0712      	lsls	r2, r2, #28
   15e5e:	d420      	bmi.n	15ea2 <formatted_text_print.constprop.0+0x5e>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   15e60:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 15f34 <formatted_text_print.constprop.0+0xf0>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   15e64:	4630      	mov	r0, r6
   15e66:	f7f7 faa5 	bl	d3b4 <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   15e6a:	68a3      	ldr	r3, [r4, #8]
   15e6c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
   15e6e:	b280      	uxth	r0, r0
   15e70:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   15e72:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
   15e76:	4298      	cmp	r0, r3
   15e78:	eb06 0b05 	add.w	fp, r6, r5
   15e7c:	d913      	bls.n	15ea6 <formatted_text_print.constprop.0+0x62>
   15e7e:	4659      	mov	r1, fp
		size_t idx = 0;
   15e80:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
   15e82:	f811 0b01 	ldrb.w	r0, [r1], #1
   15e86:	f819 c000 	ldrb.w	ip, [r9, r0]
   15e8a:	f01c 0f08 	tst.w	ip, #8
   15e8e:	d002      	beq.n	15e96 <formatted_text_print.constprop.0+0x52>
				length = idx;
				if (*(str + offset + idx) == '\n') {
   15e90:	280a      	cmp	r0, #10
   15e92:	d031      	beq.n	15ef8 <formatted_text_print.constprop.0+0xb4>
   15e94:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
   15e96:	eb08 0007 	add.w	r0, r8, r7
   15e9a:	4282      	cmp	r2, r0
   15e9c:	d92b      	bls.n	15ef6 <formatted_text_print.constprop.0+0xb2>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
   15e9e:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   15ea0:	e7ef      	b.n	15e82 <formatted_text_print.constprop.0+0x3e>
		++offset;
   15ea2:	3501      	adds	r5, #1
   15ea4:	e7d8      	b.n	15e58 <formatted_text_print.constprop.0+0x14>
   15ea6:	465b      	mov	r3, fp
			for (idx = 0; idx < length; idx++) {
   15ea8:	2700      	movs	r7, #0
   15eaa:	42b8      	cmp	r0, r7
   15eac:	d017      	beq.n	15ede <formatted_text_print.constprop.0+0x9a>
				if (*(str + offset + idx) == '\n') {
   15eae:	f813 2b01 	ldrb.w	r2, [r3], #1
   15eb2:	2a0a      	cmp	r2, #10
   15eb4:	eb05 0907 	add.w	r9, r5, r7
   15eb8:	d11b      	bne.n	15ef2 <formatted_text_print.constprop.0+0xae>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   15eba:	6960      	ldr	r0, [r4, #20]
   15ebc:	f017 fb9b 	bl	2d5f6 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
   15ec0:	463a      	mov	r2, r7
   15ec2:	4659      	mov	r1, fp
   15ec4:	4620      	mov	r0, r4
   15ec6:	f7ff fd05 	bl	158d4 <z_shell_write>
   15eca:	491a      	ldr	r1, [pc, #104]	; (15f34 <formatted_text_print.constprop.0+0xf0>)
   15ecc:	6960      	ldr	r0, [r4, #20]
   15ece:	f017 fe5b 	bl	2db88 <z_shell_raw_fprintf>
					z_shell_op_cursor_horiz_move(shell,
   15ed2:	4641      	mov	r1, r8
   15ed4:	4620      	mov	r0, r4
					offset += idx + 1;
   15ed6:	f109 0501 	add.w	r5, r9, #1
					z_shell_op_cursor_horiz_move(shell,
   15eda:	f7ff fc67 	bl	157ac <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   15ede:	6960      	ldr	r0, [r4, #20]
   15ee0:	1971      	adds	r1, r6, r5
   15ee2:	f017 fe51 	bl	2db88 <z_shell_raw_fprintf>
   15ee6:	6960      	ldr	r0, [r4, #20]
   15ee8:	4912      	ldr	r1, [pc, #72]	; (15f34 <formatted_text_print.constprop.0+0xf0>)
		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
}
   15eea:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15eee:	f017 be4b 	b.w	2db88 <z_shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
   15ef2:	3701      	adds	r7, #1
   15ef4:	e7d9      	b.n	15eaa <formatted_text_print.constprop.0+0x66>
   15ef6:	461f      	mov	r7, r3
   15ef8:	6960      	ldr	r0, [r4, #20]
   15efa:	f017 fb7c 	bl	2d5f6 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
   15efe:	463a      	mov	r2, r7
   15f00:	4659      	mov	r1, fp
   15f02:	4620      	mov	r0, r4
   15f04:	f7ff fce6 	bl	158d4 <z_shell_write>
		offset += length;
   15f08:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
   15f0a:	5d73      	ldrb	r3, [r6, r5]
   15f0c:	f819 3003 	ldrb.w	r3, [r9, r3]
   15f10:	071b      	lsls	r3, r3, #28
   15f12:	d408      	bmi.n	15f26 <formatted_text_print.constprop.0+0xe2>
   15f14:	6960      	ldr	r0, [r4, #20]
   15f16:	4651      	mov	r1, sl
   15f18:	f017 fe36 	bl	2db88 <z_shell_raw_fprintf>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
   15f1c:	4641      	mov	r1, r8
   15f1e:	4620      	mov	r0, r4
   15f20:	f7ff fc44 	bl	157ac <z_shell_op_cursor_horiz_move>
	while (true) {
   15f24:	e79e      	b.n	15e64 <formatted_text_print.constprop.0+0x20>
			++offset;
   15f26:	3501      	adds	r5, #1
   15f28:	e7ef      	b.n	15f0a <formatted_text_print.constprop.0+0xc6>
}
   15f2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f2e:	bf00      	nop
   15f30:	0003811b 	.word	0x0003811b
   15f34:	00036e20 	.word	0x00036e20

00015f38 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
   15f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f3c:	460f      	mov	r7, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
   15f3e:	2100      	movs	r1, #0
{
   15f40:	b08d      	sub	sp, #52	; 0x34
   15f42:	4604      	mov	r4, r0
   15f44:	4616      	mov	r6, r2
	uint16_t longest = 0U;
   15f46:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   15f48:	aa07      	add	r2, sp, #28
   15f4a:	4638      	mov	r0, r7
   15f4c:	f101 0801 	add.w	r8, r1, #1
   15f50:	f7ff fb60 	bl	15614 <z_shell_cmd_get>
   15f54:	b9a8      	cbnz	r0, 15f82 <z_shell_help_subcmd_print+0x4a>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
   15f56:	b18d      	cbz	r5, 15f7c <z_shell_help_subcmd_print+0x44>
		return;
	}

	if (description != NULL) {
   15f58:	b126      	cbz	r6, 15f64 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
   15f5a:	4632      	mov	r2, r6
   15f5c:	2108      	movs	r1, #8
   15f5e:	4620      	mov	r0, r4
   15f60:	f7ff fd76 	bl	15a50 <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   15f64:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 16024 <z_shell_help_subcmd_print+0xec>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
   15f68:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 16028 <z_shell_help_subcmd_print+0xf0>
		for (uint16_t i = 0; i < tmp; i++) {
   15f6c:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   15f6e:	1c4b      	adds	r3, r1, #1
   15f70:	aa07      	add	r2, sp, #28
   15f72:	4638      	mov	r0, r7
   15f74:	9303      	str	r3, [sp, #12]
   15f76:	f7ff fb4d 	bl	15614 <z_shell_cmd_get>
   15f7a:	b960      	cbnz	r0, 15f96 <z_shell_help_subcmd_print+0x5e>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
   15f7c:	b00d      	add	sp, #52	; 0x34
   15f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
   15f82:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
   15f84:	b110      	cbz	r0, 15f8c <z_shell_help_subcmd_print+0x54>
   15f86:	f7f7 fa15 	bl	d3b4 <strlen>
   15f8a:	b280      	uxth	r0, r0
   15f8c:	4285      	cmp	r5, r0
   15f8e:	bf38      	it	cc
   15f90:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   15f92:	4641      	mov	r1, r8
   15f94:	e7d8      	b.n	15f48 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
   15f96:	e9d0 a900 	ldrd	sl, r9, [r0]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   15f9a:	4640      	mov	r0, r8
   15f9c:	f7f7 fa0a 	bl	d3b4 <strlen>
   15fa0:	9004      	str	r0, [sp, #16]
	if ((item_name == NULL) || (item_name[0] == '\0')) {
   15fa2:	f1ba 0f00 	cmp.w	sl, #0
   15fa6:	d023      	beq.n	15ff0 <z_shell_help_subcmd_print+0xb8>
   15fa8:	f89a 2000 	ldrb.w	r2, [sl]
   15fac:	b302      	cbz	r2, 15ff0 <z_shell_help_subcmd_print+0xb8>
		uint16_t tmp = item_name_width - strlen(item_name);
   15fae:	4650      	mov	r0, sl
   15fb0:	f7f7 fa00 	bl	d3b4 <strlen>
		char space = ' ';
   15fb4:	2220      	movs	r2, #32
		uint16_t tmp = item_name_width - strlen(item_name);
   15fb6:	1a2e      	subs	r6, r5, r0
		char space = ' ';
   15fb8:	f88d 201b 	strb.w	r2, [sp, #27]
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
   15fbc:	4643      	mov	r3, r8
   15fbe:	4a17      	ldr	r2, [pc, #92]	; (1601c <z_shell_help_subcmd_print+0xe4>)
   15fc0:	f8cd a000 	str.w	sl, [sp]
   15fc4:	2108      	movs	r1, #8
   15fc6:	4620      	mov	r0, r4
   15fc8:	f7ff fd42 	bl	15a50 <z_shell_fprintf>
		uint16_t tmp = item_name_width - strlen(item_name);
   15fcc:	b2b6      	uxth	r6, r6
		for (uint16_t i = 0; i < tmp; i++) {
   15fce:	2300      	movs	r3, #0
   15fd0:	b29a      	uxth	r2, r3
   15fd2:	42b2      	cmp	r2, r6
   15fd4:	d30e      	bcc.n	15ff4 <z_shell_help_subcmd_print+0xbc>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
   15fd6:	4643      	mov	r3, r8
   15fd8:	465a      	mov	r2, fp
   15fda:	2108      	movs	r1, #8
   15fdc:	4620      	mov	r0, r4
   15fde:	f7ff fd37 	bl	15a50 <z_shell_fprintf>
	if (item_help == NULL) {
   15fe2:	f1b9 0f00 	cmp.w	r9, #0
   15fe6:	d10f      	bne.n	16008 <z_shell_help_subcmd_print+0xd0>
   15fe8:	490d      	ldr	r1, [pc, #52]	; (16020 <z_shell_help_subcmd_print+0xe8>)
   15fea:	6960      	ldr	r0, [r4, #20]
   15fec:	f017 fdcc 	bl	2db88 <z_shell_raw_fprintf>
		for (uint16_t i = 0; i < tmp; i++) {
   15ff0:	9903      	ldr	r1, [sp, #12]
   15ff2:	e7bc      	b.n	15f6e <z_shell_help_subcmd_print+0x36>
			z_shell_write(shell, &space, 1);
   15ff4:	2201      	movs	r2, #1
   15ff6:	f10d 011b 	add.w	r1, sp, #27
   15ffa:	4620      	mov	r0, r4
   15ffc:	9305      	str	r3, [sp, #20]
   15ffe:	f7ff fc69 	bl	158d4 <z_shell_write>
		for (uint16_t i = 0; i < tmp; i++) {
   16002:	9b05      	ldr	r3, [sp, #20]
   16004:	3301      	adds	r3, #1
   16006:	e7e3      	b.n	15fd0 <z_shell_help_subcmd_print+0x98>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   16008:	9b04      	ldr	r3, [sp, #16]
   1600a:	1c6a      	adds	r2, r5, #1
   1600c:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	formatted_text_print(shell, item_help, offset, false);
   16010:	b292      	uxth	r2, r2
   16012:	4649      	mov	r1, r9
   16014:	4620      	mov	r0, r4
   16016:	f7ff ff15 	bl	15e44 <formatted_text_print.constprop.0>
   1601a:	e7e9      	b.n	15ff0 <z_shell_help_subcmd_print+0xb8>
   1601c:	000335a7 	.word	0x000335a7
   16020:	00036e20 	.word	0x00036e20
   16024:	0003399e 	.word	0x0003399e
   16028:	0003398c 	.word	0x0003398c

0001602c <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
   1602c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1602e:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   16030:	6808      	ldr	r0, [r1, #0]
{
   16032:	460d      	mov	r5, r1
   16034:	b1b8      	cbz	r0, 16066 <z_shell_help_cmd_print+0x3a>
   16036:	f7f7 f9bd 	bl	d3b4 <strlen>
   1603a:	b284      	uxth	r4, r0
   1603c:	4f0b      	ldr	r7, [pc, #44]	; (1606c <z_shell_help_cmd_print+0x40>)
   1603e:	4638      	mov	r0, r7
   16040:	f7f7 f9b8 	bl	d3b4 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
   16044:	682b      	ldr	r3, [r5, #0]
   16046:	4a0a      	ldr	r2, [pc, #40]	; (16070 <z_shell_help_cmd_print+0x44>)
   16048:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   1604a:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
   1604c:	2108      	movs	r1, #8
   1604e:	4630      	mov	r0, r6
   16050:	f7ff fcfe 	bl	15a50 <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   16054:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
   16056:	6869      	ldr	r1, [r5, #4]
   16058:	4622      	mov	r2, r4
   1605a:	4630      	mov	r0, r6
}
   1605c:	b003      	add	sp, #12
   1605e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
   16062:	f7ff beef 	b.w	15e44 <formatted_text_print.constprop.0>
   16066:	4604      	mov	r4, r0
   16068:	e7e8      	b.n	1603c <z_shell_help_cmd_print+0x10>
   1606a:	bf00      	nop
   1606c:	0003399a 	.word	0x0003399a
   16070:	000335a7 	.word	0x000335a7

00016074 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
   16074:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
   16076:	4907      	ldr	r1, [pc, #28]	; (16094 <z_shell_help_request+0x20>)
{
   16078:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
   1607a:	f7f7 f991 	bl	d3a0 <strcmp>
   1607e:	b138      	cbz	r0, 16090 <z_shell_help_request+0x1c>
   16080:	4905      	ldr	r1, [pc, #20]	; (16098 <z_shell_help_request+0x24>)
   16082:	4620      	mov	r0, r4
   16084:	f7f7 f98c 	bl	d3a0 <strcmp>
   16088:	fab0 f080 	clz	r0, r0
   1608c:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   1608e:	bd10      	pop	{r4, pc}
		return true;
   16090:	2001      	movs	r0, #1
   16092:	e7fc      	b.n	1608e <z_shell_help_request+0x1a>
   16094:	00033990 	.word	0x00033990
   16098:	00033993 	.word	0x00033993

0001609c <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
   1609c:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   1609e:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   160a0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   160a4:	069b      	lsls	r3, r3, #26
{
   160a6:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   160a8:	d503      	bpl.n	160b2 <cmd_resize_default+0x16>
   160aa:	4904      	ldr	r1, [pc, #16]	; (160bc <cmd_resize_default+0x20>)
   160ac:	6940      	ldr	r0, [r0, #20]
   160ae:	f017 fd7c 	bl	2dbaa <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   160b2:	68a3      	ldr	r3, [r4, #8]
   160b4:	4a02      	ldr	r2, [pc, #8]	; (160c0 <cmd_resize_default+0x24>)
   160b6:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
   160b8:	2000      	movs	r0, #0
   160ba:	bd10      	pop	{r4, pc}
   160bc:	00030e0e 	.word	0x00030e0e
   160c0:	00500018 	.word	0x00500018

000160c4 <cmd_shell_stats_show>:
{
   160c4:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
   160c6:	6983      	ldr	r3, [r0, #24]
   160c8:	4a03      	ldr	r2, [pc, #12]	; (160d8 <cmd_shell_stats_show+0x14>)
   160ca:	681b      	ldr	r3, [r3, #0]
   160cc:	2108      	movs	r1, #8
   160ce:	f017 fa55 	bl	2d57c <shell_fprintf>
}
   160d2:	2000      	movs	r0, #0
   160d4:	bd08      	pop	{r3, pc}
   160d6:	bf00      	nop
   160d8:	000339a1 	.word	0x000339a1

000160dc <cmd_history>:
{
   160dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
   160de:	4e0f      	ldr	r6, [pc, #60]	; (1611c <cmd_history+0x40>)
{
   160e0:	4604      	mov	r4, r0
   160e2:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
   160e4:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
   160e6:	68e0      	ldr	r0, [r4, #12]
   160e8:	f10d 030e 	add.w	r3, sp, #14
   160ec:	f502 72a1 	add.w	r2, r2, #322	; 0x142
   160f0:	2101      	movs	r1, #1
   160f2:	f017 fde2 	bl	2dcba <z_shell_history_get>
		if (len) {
   160f6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   160fa:	68a3      	ldr	r3, [r4, #8]
   160fc:	b150      	cbz	r0, 16114 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
   160fe:	f503 73a1 	add.w	r3, r3, #322	; 0x142
   16102:	9300      	str	r3, [sp, #0]
   16104:	4632      	mov	r2, r6
   16106:	462b      	mov	r3, r5
   16108:	2108      	movs	r1, #8
   1610a:	4620      	mov	r0, r4
   1610c:	f017 fa36 	bl	2d57c <shell_fprintf>
	while (1) {
   16110:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
   16112:	e7e7      	b.n	160e4 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
   16114:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
   16118:	b004      	add	sp, #16
   1611a:	bd70      	pop	{r4, r5, r6, pc}
   1611c:	000339b1 	.word	0x000339b1

00016120 <cmd_clear>:
{
   16120:	b510      	push	{r4, lr}
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   16122:	6883      	ldr	r3, [r0, #8]
   16124:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   16128:	069a      	lsls	r2, r3, #26
{
   1612a:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   1612c:	d503      	bpl.n	16136 <cmd_clear+0x16>
   1612e:	4907      	ldr	r1, [pc, #28]	; (1614c <cmd_clear+0x2c>)
   16130:	6940      	ldr	r0, [r0, #20]
   16132:	f017 fd3a 	bl	2dbaa <z_shell_raw_fprintf>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   16136:	68a3      	ldr	r3, [r4, #8]
   16138:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   1613c:	069b      	lsls	r3, r3, #26
   1613e:	d503      	bpl.n	16148 <cmd_clear+0x28>
   16140:	4903      	ldr	r1, [pc, #12]	; (16150 <cmd_clear+0x30>)
   16142:	6960      	ldr	r0, [r4, #20]
   16144:	f017 fd31 	bl	2dbaa <z_shell_raw_fprintf>
}
   16148:	2000      	movs	r0, #0
   1614a:	bd10      	pop	{r4, pc}
   1614c:	00030e15 	.word	0x00030e15
   16150:	00030e1a 	.word	0x00030e1a

00016154 <cmd_echo>:
	if (argc == 2) {
   16154:	2902      	cmp	r1, #2
{
   16156:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
   16158:	d10d      	bne.n	16176 <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
   1615a:	6853      	ldr	r3, [r2, #4]
   1615c:	9301      	str	r3, [sp, #4]
   1615e:	4b0e      	ldr	r3, [pc, #56]	; (16198 <cmd_echo+0x44>)
   16160:	9300      	str	r3, [sp, #0]
   16162:	6813      	ldr	r3, [r2, #0]
   16164:	4a0d      	ldr	r2, [pc, #52]	; (1619c <cmd_echo+0x48>)
   16166:	2101      	movs	r1, #1
   16168:	f017 fa08 	bl	2d57c <shell_fprintf>
   1616c:	f06f 0015 	mvn.w	r0, #21
}
   16170:	b003      	add	sp, #12
   16172:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
   16176:	6883      	ldr	r3, [r0, #8]
   16178:	4a09      	ldr	r2, [pc, #36]	; (161a0 <cmd_echo+0x4c>)
	return sh->ctx->cfg.flags.echo == 1;
   1617a:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   1617e:	f013 0f02 	tst.w	r3, #2
   16182:	f04f 0108 	mov.w	r1, #8
   16186:	4b07      	ldr	r3, [pc, #28]	; (161a4 <cmd_echo+0x50>)
   16188:	bf18      	it	ne
   1618a:	4613      	movne	r3, r2
   1618c:	4a06      	ldr	r2, [pc, #24]	; (161a8 <cmd_echo+0x54>)
   1618e:	f017 f9f5 	bl	2d57c <shell_fprintf>
	return 0;
   16192:	2000      	movs	r0, #0
   16194:	e7ec      	b.n	16170 <cmd_echo+0x1c>
   16196:	bf00      	nop
   16198:	000339c8 	.word	0x000339c8
   1619c:	000339bf 	.word	0x000339bf
   161a0:	00037d65 	.word	0x00037d65
   161a4:	000339bb 	.word	0x000339bb
   161a8:	000339dd 	.word	0x000339dd

000161ac <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
   161ac:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
   161ae:	2901      	cmp	r1, #1
{
   161b0:	b085      	sub	sp, #20
   161b2:	4604      	mov	r4, r0
	if (argc != 1) {
   161b4:	d00d      	beq.n	161d2 <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
   161b6:	6853      	ldr	r3, [r2, #4]
   161b8:	9301      	str	r3, [sp, #4]
   161ba:	4b57      	ldr	r3, [pc, #348]	; (16318 <cmd_resize+0x16c>)
   161bc:	9300      	str	r3, [sp, #0]
   161be:	6813      	ldr	r3, [r2, #0]
   161c0:	4a56      	ldr	r2, [pc, #344]	; (1631c <cmd_resize+0x170>)
   161c2:	2101      	movs	r1, #1
   161c4:	f017 f9da 	bl	2d57c <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
   161c8:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
   161cc:	4628      	mov	r0, r5
   161ce:	b005      	add	sp, #20
   161d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   161d2:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   161d4:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   161d8:	069a      	lsls	r2, r3, #26
   161da:	d503      	bpl.n	161e4 <cmd_resize+0x38>
   161dc:	4950      	ldr	r1, [pc, #320]	; (16320 <cmd_resize+0x174>)
   161de:	6940      	ldr	r0, [r0, #20]
   161e0:	f017 fce3 	bl	2dbaa <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
   161e4:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
   161e8:	4620      	mov	r0, r4
   161ea:	f7ff fac9 	bl	15780 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
   161ee:	21fa      	movs	r1, #250	; 0xfa
   161f0:	4620      	mov	r0, r4
   161f2:	f7ff fadb 	bl	157ac <z_shell_op_cursor_horiz_move>
__ssp_bos_icheck3(memset, void *, int)
   161f6:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
   161f8:	2500      	movs	r5, #0
   161fa:	f44f 7280 	mov.w	r2, #256	; 0x100
   161fe:	4629      	mov	r1, r5
   16200:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   16204:	f88d 500b 	strb.w	r5, [sp, #11]
   16208:	f01a fa0f 	bl	3062a <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
   1620c:	4945      	ldr	r1, [pc, #276]	; (16324 <cmd_resize+0x178>)
   1620e:	6960      	ldr	r0, [r4, #20]
   16210:	f017 fccb 	bl	2dbaa <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   16214:	6960      	ldr	r0, [r4, #20]
   16216:	f017 f9ee 	bl	2d5f6 <z_shell_fprintf_buffer_flush>
   1621a:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
   1621e:	6860      	ldr	r0, [r4, #4]
   16220:	6803      	ldr	r3, [r0, #0]
   16222:	2201      	movs	r2, #1
   16224:	691f      	ldr	r7, [r3, #16]
   16226:	f10d 010b 	add.w	r1, sp, #11
   1622a:	ab03      	add	r3, sp, #12
   1622c:	47b8      	blx	r7
			if (cnt == 0) {
   1622e:	9b03      	ldr	r3, [sp, #12]
   16230:	b953      	cbnz	r3, 16248 <cmd_resize+0x9c>
	z_impl_k_busy_wait(usec_to_wait);
   16232:	3e01      	subs	r6, #1
   16234:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   16238:	b2b6      	uxth	r6, r6
   1623a:	f01a f911 	bl	30460 <z_impl_k_busy_wait>
	for (uint16_t i = 0; i < 1000; i++) {
   1623e:	2e00      	cmp	r6, #0
   16240:	d1ed      	bne.n	1621e <cmd_resize+0x72>
		ret_val = -ENOTSUP;
   16242:	f06f 0585 	mvn.w	r5, #133	; 0x85
   16246:	e031      	b.n	162ac <cmd_resize+0x100>
			if ((c != SHELL_VT100_ASCII_ESC) &&
   16248:	f89d 300b 	ldrb.w	r3, [sp, #11]
   1624c:	68a2      	ldr	r2, [r4, #8]
   1624e:	2b1b      	cmp	r3, #27
   16250:	d057      	beq.n	16302 <cmd_resize+0x156>
   16252:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
   16256:	291b      	cmp	r1, #27
   16258:	d1e1      	bne.n	1621e <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
   1625a:	2b52      	cmp	r3, #82	; 0x52
   1625c:	d151      	bne.n	16302 <cmd_resize+0x156>
				shell->ctx->temp_buff[buff_idx] = '\0';
   1625e:	4415      	add	r5, r2
   16260:	2300      	movs	r3, #0
   16262:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
   16266:	f892 1143 	ldrb.w	r1, [r2, #323]	; 0x143
   1626a:	295b      	cmp	r1, #91	; 0x5b
   1626c:	d151      	bne.n	16312 <cmd_resize+0x166>
   1626e:	f502 70a2 	add.w	r0, r2, #324	; 0x144
	*y = 0U;
   16272:	461f      	mov	r7, r3
				buff_idx = 2U;
   16274:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
   16276:	f810 1b01 	ldrb.w	r1, [r0], #1
   1627a:	3601      	adds	r6, #1
   1627c:	293b      	cmp	r1, #59	; 0x3b
   1627e:	b2b6      	uxth	r6, r6
   16280:	d12a      	bne.n	162d8 <cmd_resize+0x12c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   16282:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   16286:	d0dc      	beq.n	16242 <cmd_resize+0x96>
   16288:	f506 70a1 	add.w	r0, r6, #322	; 0x142
   1628c:	4410      	add	r0, r2
	*x = 0U;
   1628e:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
   16290:	f810 5b01 	ldrb.w	r5, [r0], #1
   16294:	bb55      	cbnz	r5, 162ec <cmd_resize+0x140>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   16296:	2bfa      	cmp	r3, #250	; 0xfa
   16298:	bf28      	it	cs
   1629a:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   1629c:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   1629e:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   162a0:	463b      	mov	r3, r7
   162a2:	bf28      	it	cs
   162a4:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
   162a6:	f882 5142 	strb.w	r5, [r2, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   162aa:	8513      	strh	r3, [r2, #40]	; 0x28
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   162ac:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   162ae:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   162b2:	069b      	lsls	r3, r3, #26
   162b4:	d503      	bpl.n	162be <cmd_resize+0x112>
   162b6:	491c      	ldr	r1, [pc, #112]	; (16328 <cmd_resize+0x17c>)
   162b8:	6960      	ldr	r0, [r4, #20]
   162ba:	f017 fc76 	bl	2dbaa <z_shell_raw_fprintf>
	if (err != 0) {
   162be:	2d00      	cmp	r5, #0
   162c0:	d084      	beq.n	161cc <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
   162c2:	68a3      	ldr	r3, [r4, #8]
   162c4:	4a19      	ldr	r2, [pc, #100]	; (1632c <cmd_resize+0x180>)
   162c6:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   162c8:	2103      	movs	r1, #3
   162ca:	4a19      	ldr	r2, [pc, #100]	; (16330 <cmd_resize+0x184>)
   162cc:	4620      	mov	r0, r4
   162ce:	f017 f955 	bl	2d57c <shell_fprintf>
   162d2:	f06f 0507 	mvn.w	r5, #7
   162d6:	e779      	b.n	161cc <cmd_resize+0x20>
					*y = *y * 10U +
   162d8:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   162dc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   162e0:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
   162e2:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
   162e6:	b29f      	uxth	r7, r3
					if (buff_idx >=
   162e8:	d1c5      	bne.n	16276 <cmd_resize+0xca>
   162ea:	e7aa      	b.n	16242 <cmd_resize+0x96>
					*x = *x * 10U +
   162ec:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
   162f0:	3601      	adds	r6, #1
					*x = *x * 10U +
   162f2:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
   162f6:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
   162f8:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
   162fa:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
   162fc:	b2ab      	uxth	r3, r5
					if (buff_idx >=
   162fe:	d9c7      	bls.n	16290 <cmd_resize+0xe4>
   16300:	e79f      	b.n	16242 <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
   16302:	1951      	adds	r1, r2, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   16304:	3501      	adds	r5, #1
   16306:	b2ad      	uxth	r5, r5
   16308:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
   1630a:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   1630e:	d986      	bls.n	1621e <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
   16310:	2300      	movs	r3, #0
   16312:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
				return -ENOMEM;
   16316:	e794      	b.n	16242 <cmd_resize+0x96>
   16318:	000339c8 	.word	0x000339c8
   1631c:	000339bf 	.word	0x000339bf
   16320:	00030e20 	.word	0x00030e20
   16324:	00033dd4 	.word	0x00033dd4
   16328:	00030e24 	.word	0x00030e24
   1632c:	00500018 	.word	0x00500018
   16330:	000339ee 	.word	0x000339ee

00016334 <z_shell_history_put>:
	}
}

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
   16334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   16338:	6803      	ldr	r3, [r0, #0]
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   1633a:	f102 050c 	add.w	r5, r2, #12
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   1633e:	426f      	negs	r7, r5
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   16340:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   16342:	f007 0703 	and.w	r7, r7, #3
	total_len += padding;
   16346:	443d      	add	r5, r7
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   16348:	429d      	cmp	r5, r3
{
   1634a:	4604      	mov	r4, r0
   1634c:	4689      	mov	r9, r1
   1634e:	4616      	mov	r6, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   16350:	d83f      	bhi.n	163d2 <z_shell_history_put+0x9e>
	history->current = NULL;
   16352:	2300      	movs	r3, #0
   16354:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
   16356:	2a00      	cmp	r2, #0
   16358:	d03b      	beq.n	163d2 <z_shell_history_put+0x9e>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   1635a:	f100 0804 	add.w	r8, r0, #4
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1635e:	6840      	ldr	r0, [r0, #4]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   16360:	4580      	cmp	r8, r0
   16362:	d12b      	bne.n	163bc <z_shell_history_put+0x88>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   16364:	9301      	str	r3, [sp, #4]
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
		if (remove_from_tail(history) == false) {
			__ASSERT_NO_MSG(ring_buf_is_empty(history->ring_buf));
   16366:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 16428 <z_shell_history_put+0xf4>
		claim_len = ring_buf_put_claim(history->ring_buf,
   1636a:	6820      	ldr	r0, [r4, #0]
   1636c:	462a      	mov	r2, r5
   1636e:	a901      	add	r1, sp, #4
   16370:	f016 fad8 	bl	2c924 <ring_buf_put_claim>
		if (claim_len < total_len) {
   16374:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   16376:	4683      	mov	fp, r0
		if (claim_len < total_len) {
   16378:	d92e      	bls.n	163d8 <z_shell_history_put+0xa4>
				ring_buf_put_claim(history->ring_buf,
   1637a:	6820      	ldr	r0, [r4, #0]
   1637c:	462a      	mov	r2, r5
   1637e:	a901      	add	r1, sp, #4
   16380:	f016 fad0 	bl	2c924 <ring_buf_put_claim>
			if (claim2_len == total_len) {
   16384:	4285      	cmp	r5, r0
   16386:	d128      	bne.n	163da <z_shell_history_put+0xa6>
				ring_buf_put_finish(history->ring_buf,
   16388:	4659      	mov	r1, fp
   1638a:	6820      	ldr	r0, [r4, #0]
   1638c:	f016 fae6 	bl	2c95c <ring_buf_put_finish>
				padding += claim_len;
   16390:	445f      	add	r7, fp
   16392:	b2bf      	uxth	r7, r7
   16394:	46ab      	mov	fp, r5
			add_to_head(history, h_item, line, len, padding);
   16396:	9d01      	ldr	r5, [sp, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   16398:	4632      	mov	r2, r6
   1639a:	4649      	mov	r1, r9
	item->len = len;
   1639c:	812e      	strh	r6, [r5, #8]
	item->padding = padding;
   1639e:	816f      	strh	r7, [r5, #10]
   163a0:	f105 000c 	add.w	r0, r5, #12
   163a4:	f01a f919 	bl	305da <memcpy>
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const head = list->head;
   163a8:	6862      	ldr	r2, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   163aa:	6820      	ldr	r0, [r4, #0]

	node->next = head;
	node->prev = list;
   163ac:	e9c5 2800 	strd	r2, r8, [r5]
   163b0:	4659      	mov	r1, fp

	head->prev = node;
   163b2:	6055      	str	r5, [r2, #4]
	list->head = node;
   163b4:	6065      	str	r5, [r4, #4]
   163b6:	f016 fad1 	bl	2c95c <ring_buf_put_finish>
			break;
   163ba:	e00a      	b.n	163d2 <z_shell_history_put+0x9e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   163bc:	9001      	str	r0, [sp, #4]
	if (l_item &&
   163be:	2800      	cmp	r0, #0
   163c0:	d0d1      	beq.n	16366 <z_shell_history_put+0x32>
	   (h_item->len == len) &&
   163c2:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   163c4:	4293      	cmp	r3, r2
   163c6:	d1ce      	bne.n	16366 <z_shell_history_put+0x32>
	   (memcmp(h_item->data, line, len) == 0)) {
   163c8:	300c      	adds	r0, #12
   163ca:	f01a f8f8 	bl	305be <memcmp>
	   (h_item->len == len) &&
   163ce:	2800      	cmp	r0, #0
   163d0:	d1c9      	bne.n	16366 <z_shell_history_put+0x32>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   163d2:	b003      	add	sp, #12
   163d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   163d8:	d0dd      	beq.n	16396 <z_shell_history_put+0x62>
		ring_buf_put_finish(history->ring_buf, 0);
   163da:	6820      	ldr	r0, [r4, #0]
   163dc:	2100      	movs	r1, #0
   163de:	f016 fabd 	bl	2c95c <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   163e2:	6863      	ldr	r3, [r4, #4]
   163e4:	4598      	cmp	r8, r3
   163e6:	d114      	bne.n	16412 <z_shell_history_put+0xde>
			__ASSERT_NO_MSG(ring_buf_is_empty(history->ring_buf));
   163e8:	6820      	ldr	r0, [r4, #0]
   163ea:	f016 fa8b 	bl	2c904 <ring_buf_is_empty>
   163ee:	b948      	cbnz	r0, 16404 <z_shell_history_put+0xd0>
   163f0:	490b      	ldr	r1, [pc, #44]	; (16420 <z_shell_history_put+0xec>)
   163f2:	480c      	ldr	r0, [pc, #48]	; (16424 <z_shell_history_put+0xf0>)
   163f4:	23bd      	movs	r3, #189	; 0xbd
   163f6:	4652      	mov	r2, sl
   163f8:	f016 f8cf 	bl	2c59a <printk>
   163fc:	21bd      	movs	r1, #189	; 0xbd
   163fe:	4650      	mov	r0, sl
   16400:	f016 fb0c 	bl	2ca1c <assert_post_action>
			ring_buf_reset(history->ring_buf);
   16404:	6823      	ldr	r3, [r4, #0]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
   16406:	2200      	movs	r2, #0
	buf->tail = 0;
   16408:	e9c3 2200 	strd	r2, r2, [r3]
__ssp_bos_icheck3(memset, void *, int)
   1640c:	609a      	str	r2, [r3, #8]
   1640e:	60da      	str	r2, [r3, #12]
	memset(&buf->misc, 0, sizeof(buf->misc));
}
   16410:	e7ab      	b.n	1636a <z_shell_history_put+0x36>
   16412:	4620      	mov	r0, r4
   16414:	f017 fc3c 	bl	2dc90 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
   16418:	2800      	cmp	r0, #0
   1641a:	d1a6      	bne.n	1636a <z_shell_history_put+0x36>
   1641c:	e7e4      	b.n	163e8 <z_shell_history_put+0xb4>
   1641e:	bf00      	nop
   16420:	00033e09 	.word	0x00033e09
   16424:	00032486 	.word	0x00032486
   16428:	00033dd9 	.word	0x00033dd9

0001642c <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
   1642c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16430:	4607      	mov	r7, r0
   16432:	b089      	sub	sp, #36	; 0x24
   16434:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
   16436:	4689      	mov	r9, r1
   16438:	b921      	cbnz	r1, 16444 <z_shell_wildcard_process+0x18>
		return ret_val;
   1643a:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
   1643c:	4620      	mov	r0, r4
   1643e:	b009      	add	sp, #36	; 0x24
   16440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
   16444:	4610      	mov	r0, r2
   16446:	f017 fc75 	bl	2dd34 <z_shell_has_wildcard>
   1644a:	2800      	cmp	r0, #0
   1644c:	d0f5      	beq.n	1643a <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
   1644e:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
   16452:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   16454:	2402      	movs	r4, #2
   16456:	e024      	b.n	164a2 <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   16458:	465c      	mov	r4, fp
   1645a:	e03c      	b.n	164d6 <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
   1645c:	4629      	mov	r1, r5
   1645e:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
   16462:	f01a f931 	bl	306c8 <strstr>
	if (!completion_addr) {
   16466:	4606      	mov	r6, r0
   16468:	2800      	cmp	r0, #0
   1646a:	d04e      	beq.n	1650a <z_shell_wildcard_process+0xde>
   1646c:	f7f6 ffa2 	bl	d3b4 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
   16470:	b282      	uxth	r2, r0
   16472:	1c60      	adds	r0, r4, #1
__ssp_bos_icheck3(memmove, void *, const void *)
   16474:	3201      	adds	r2, #1
   16476:	4631      	mov	r1, r6
   16478:	4430      	add	r0, r6
   1647a:	f01a f8bc 	bl	305f6 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1647e:	4622      	mov	r2, r4
   16480:	4659      	mov	r1, fp
   16482:	4630      	mov	r0, r6
   16484:	f01a f8a9 	bl	305da <memcpy>
	completion_addr[cmd_len] = ' ';
   16488:	f04f 0320 	mov.w	r3, #32
   1648c:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
   1648e:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
   16492:	4404      	add	r4, r0
   16494:	3401      	adds	r4, #1
   16496:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
   1649a:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
   1649e:	2400      	movs	r4, #0
   164a0:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
   164a2:	1c4b      	adds	r3, r1, #1
   164a4:	aa03      	add	r2, sp, #12
   164a6:	4648      	mov	r0, r9
   164a8:	9301      	str	r3, [sp, #4]
   164aa:	f7ff f8b3 	bl	15614 <z_shell_cmd_get>
   164ae:	4606      	mov	r6, r0
   164b0:	b1f8      	cbz	r0, 164f2 <z_shell_wildcard_process+0xc6>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
   164b2:	6831      	ldr	r1, [r6, #0]
   164b4:	2200      	movs	r2, #0
   164b6:	4628      	mov	r0, r5
   164b8:	f016 fbe7 	bl	2cc8a <fnmatch>
   164bc:	2800      	cmp	r0, #0
   164be:	d1ef      	bne.n	164a0 <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
   164c0:	f8d6 b000 	ldr.w	fp, [r6]
   164c4:	f8d7 a008 	ldr.w	sl, [r7, #8]
   164c8:	f1bb 0f00 	cmp.w	fp, #0
   164cc:	d0c4      	beq.n	16458 <z_shell_wildcard_process+0x2c>
   164ce:	4658      	mov	r0, fp
   164d0:	f7f6 ff70 	bl	d3b4 <strlen>
   164d4:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
   164d6:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
   164da:	3201      	adds	r2, #1
   164dc:	4422      	add	r2, r4
   164de:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   164e2:	ddbb      	ble.n	1645c <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
   164e4:	4a0a      	ldr	r2, [pc, #40]	; (16510 <z_shell_wildcard_process+0xe4>)
   164e6:	462b      	mov	r3, r5
   164e8:	2103      	movs	r1, #3
   164ea:	4638      	mov	r0, r7
   164ec:	f7ff fab0 	bl	15a50 <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
   164f0:	2401      	movs	r4, #1
	if (cnt > 0) {
   164f2:	f1b8 0f00 	cmp.w	r8, #0
   164f6:	d0a1      	beq.n	1643c <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
   164f8:	68b8      	ldr	r0, [r7, #8]
   164fa:	462a      	mov	r2, r5
   164fc:	f100 0140 	add.w	r1, r0, #64	; 0x40
   16500:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   16504:	f017 f8d5 	bl	2d6b2 <z_shell_pattern_remove>
	return ret_val;
   16508:	e798      	b.n	1643c <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   1650a:	2402      	movs	r4, #2
   1650c:	e7f1      	b.n	164f2 <z_shell_wildcard_process+0xc6>
   1650e:	bf00      	nop
   16510:	00033e2e 	.word	0x00033e2e

00016514 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   16514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   16518:	4605      	mov	r5, r0
	__asm__ volatile(
   1651a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1651e:	f3ef 8611 	mrs	r6, BASEPRI
   16522:	f383 8812 	msr	BASEPRI_MAX, r3
   16526:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1652a:	4823      	ldr	r0, [pc, #140]	; (165b8 <pm_state_notify+0xa4>)
   1652c:	f00e fcbe 	bl	24eac <z_spin_lock_valid>
   16530:	b968      	cbnz	r0, 1654e <pm_state_notify+0x3a>
   16532:	4a22      	ldr	r2, [pc, #136]	; (165bc <pm_state_notify+0xa8>)
   16534:	4922      	ldr	r1, [pc, #136]	; (165c0 <pm_state_notify+0xac>)
   16536:	4823      	ldr	r0, [pc, #140]	; (165c4 <pm_state_notify+0xb0>)
   16538:	2381      	movs	r3, #129	; 0x81
   1653a:	f016 f82e 	bl	2c59a <printk>
   1653e:	491e      	ldr	r1, [pc, #120]	; (165b8 <pm_state_notify+0xa4>)
   16540:	4821      	ldr	r0, [pc, #132]	; (165c8 <pm_state_notify+0xb4>)
   16542:	f016 f82a 	bl	2c59a <printk>
   16546:	481d      	ldr	r0, [pc, #116]	; (165bc <pm_state_notify+0xa8>)
   16548:	2181      	movs	r1, #129	; 0x81
   1654a:	f016 fa67 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   1654e:	481a      	ldr	r0, [pc, #104]	; (165b8 <pm_state_notify+0xa4>)
   16550:	f00e fcca 	bl	24ee8 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   16554:	4b1d      	ldr	r3, [pc, #116]	; (165cc <pm_state_notify+0xb8>)
   16556:	681c      	ldr	r4, [r3, #0]
   16558:	2c00      	cmp	r4, #0
   1655a:	bf38      	it	cc
   1655c:	2400      	movcc	r4, #0
   1655e:	b19c      	cbz	r4, 16588 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   16560:	4f1b      	ldr	r7, [pc, #108]	; (165d0 <pm_state_notify+0xbc>)
   16562:	f8df 8078 	ldr.w	r8, [pc, #120]	; 165dc <pm_state_notify+0xc8>
   16566:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   1656a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1656e:	2d00      	cmp	r5, #0
   16570:	bf08      	it	eq
   16572:	4613      	moveq	r3, r2
		if (callback) {
   16574:	b12b      	cbz	r3, 16582 <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
   16576:	f898 2014 	ldrb.w	r2, [r8, #20]
   1657a:	fb09 f202 	mul.w	r2, r9, r2
   1657e:	5cb8      	ldrb	r0, [r7, r2]
   16580:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16582:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   16584:	2c00      	cmp	r4, #0
   16586:	d1f0      	bne.n	1656a <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   16588:	480b      	ldr	r0, [pc, #44]	; (165b8 <pm_state_notify+0xa4>)
   1658a:	f00e fc9d 	bl	24ec8 <z_spin_unlock_valid>
   1658e:	b968      	cbnz	r0, 165ac <pm_state_notify+0x98>
   16590:	4a0a      	ldr	r2, [pc, #40]	; (165bc <pm_state_notify+0xa8>)
   16592:	4910      	ldr	r1, [pc, #64]	; (165d4 <pm_state_notify+0xc0>)
   16594:	480b      	ldr	r0, [pc, #44]	; (165c4 <pm_state_notify+0xb0>)
   16596:	23ac      	movs	r3, #172	; 0xac
   16598:	f015 ffff 	bl	2c59a <printk>
   1659c:	4906      	ldr	r1, [pc, #24]	; (165b8 <pm_state_notify+0xa4>)
   1659e:	480e      	ldr	r0, [pc, #56]	; (165d8 <pm_state_notify+0xc4>)
   165a0:	f015 fffb 	bl	2c59a <printk>
   165a4:	4805      	ldr	r0, [pc, #20]	; (165bc <pm_state_notify+0xa8>)
   165a6:	21ac      	movs	r1, #172	; 0xac
   165a8:	f016 fa38 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   165ac:	f386 8811 	msr	BASEPRI, r6
   165b0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   165b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   165b8:	200026fc 	.word	0x200026fc
   165bc:	00032546 	.word	0x00032546
   165c0:	00032598 	.word	0x00032598
   165c4:	00032486 	.word	0x00032486
   165c8:	000325ad 	.word	0x000325ad
   165cc:	20002700 	.word	0x20002700
   165d0:	2000270c 	.word	0x2000270c
   165d4:	0003256c 	.word	0x0003256c
   165d8:	00032583 	.word	0x00032583
   165dc:	20002040 	.word	0x20002040

000165e0 <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   165e0:	f000 031f 	and.w	r3, r0, #31
   165e4:	2201      	movs	r2, #1
   165e6:	409a      	lsls	r2, r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   165e8:	4b0a      	ldr	r3, [pc, #40]	; (16614 <atomic_test_and_set_bit.constprop.0+0x34>)
   165ea:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   165ee:	0940      	lsrs	r0, r0, #5
   165f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   165f4:	e850 3f00 	ldrex	r3, [r0]
   165f8:	ea43 0102 	orr.w	r1, r3, r2
   165fc:	e840 1c00 	strex	ip, r1, [r0]
   16600:	f1bc 0f00 	cmp.w	ip, #0
   16604:	d1f6      	bne.n	165f4 <atomic_test_and_set_bit.constprop.0+0x14>
   16606:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   1660a:	421a      	tst	r2, r3
}
   1660c:	bf14      	ite	ne
   1660e:	2001      	movne	r0, #1
   16610:	2000      	moveq	r0, #0
   16612:	4770      	bx	lr
   16614:	20002718 	.word	0x20002718

00016618 <pm_system_resume>:

void pm_system_resume(void)
{
   16618:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   1661a:	4b1d      	ldr	r3, [pc, #116]	; (16690 <pm_system_resume+0x78>)
   1661c:	7d1d      	ldrb	r5, [r3, #20]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1661e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   16622:	f005 031f 	and.w	r3, r5, #31
   16626:	2201      	movs	r2, #1
   16628:	409a      	lsls	r2, r3
   1662a:	4b1a      	ldr	r3, [pc, #104]	; (16694 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1662c:	0969      	lsrs	r1, r5, #5
{
   1662e:	b085      	sub	sp, #20
   16630:	43d0      	mvns	r0, r2
   16632:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16636:	e853 1f00 	ldrex	r1, [r3]
   1663a:	ea01 0400 	and.w	r4, r1, r0
   1663e:	e843 4c00 	strex	ip, r4, [r3]
   16642:	f1bc 0f00 	cmp.w	ip, #0
   16646:	d1f6      	bne.n	16636 <pm_system_resume+0x1e>
   16648:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   1664c:	4211      	tst	r1, r2
   1664e:	d017      	beq.n	16680 <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   16650:	4c11      	ldr	r4, [pc, #68]	; (16698 <pm_system_resume+0x80>)
   16652:	220c      	movs	r2, #12
   16654:	fb02 4205 	mla	r2, r2, r5, r4
   16658:	ca07      	ldmia	r2, {r0, r1, r2}
   1665a:	ab01      	add	r3, sp, #4
   1665c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   16660:	4a0e      	ldr	r2, [pc, #56]	; (1669c <pm_system_resume+0x84>)
   16662:	b17a      	cbz	r2, 16684 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   16664:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   16668:	f017 fdb0 	bl	2e1cc <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   1666c:	2000      	movs	r0, #0
   1666e:	f7ff ff51 	bl	16514 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   16672:	230c      	movs	r3, #12
   16674:	436b      	muls	r3, r5
   16676:	2200      	movs	r2, #0
   16678:	18e1      	adds	r1, r4, r3
   1667a:	50e2      	str	r2, [r4, r3]
   1667c:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   16680:	b005      	add	sp, #20
   16682:	bd30      	pop	{r4, r5, pc}
   16684:	f382 8811 	msr	BASEPRI, r2
   16688:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1668c:	e7ee      	b.n	1666c <pm_system_resume+0x54>
   1668e:	bf00      	nop
   16690:	20002040 	.word	0x20002040
   16694:	20002708 	.word	0x20002708
   16698:	2000270c 	.word	0x2000270c
   1669c:	0002e1cd 	.word	0x0002e1cd

000166a0 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   166a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   166a4:	4b37      	ldr	r3, [pc, #220]	; (16784 <pm_system_suspend+0xe4>)
   166a6:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 1679c <pm_system_suspend+0xfc>
   166aa:	7d1c      	ldrb	r4, [r3, #20]
{
   166ac:	b088      	sub	sp, #32
   166ae:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   166b0:	4620      	mov	r0, r4
   166b2:	f7ff ff95 	bl	165e0 <atomic_test_and_set_bit.constprop.0>
   166b6:	b960      	cbnz	r0, 166d2 <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   166b8:	466e      	mov	r6, sp
   166ba:	463a      	mov	r2, r7
   166bc:	4621      	mov	r1, r4
   166be:	4630      	mov	r0, r6
   166c0:	f017 fb80 	bl	2ddc4 <pm_policy_next_state>
   166c4:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   166c8:	250c      	movs	r5, #12
   166ca:	fb05 8504 	mla	r5, r5, r4, r8
   166ce:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   166d2:	230c      	movs	r3, #12
   166d4:	4363      	muls	r3, r4
   166d6:	eb08 0203 	add.w	r2, r8, r3
   166da:	f818 0003 	ldrb.w	r0, [r8, r3]
   166de:	0965      	lsrs	r5, r4, #5
   166e0:	f004 061f 	and.w	r6, r4, #31
   166e4:	b3c8      	cbz	r0, 1675a <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   166e6:	1c7b      	adds	r3, r7, #1
   166e8:	d00f      	beq.n	1670a <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
   166ea:	f8d2 e008 	ldr.w	lr, [r2, #8]
   166ee:	4826      	ldr	r0, [pc, #152]	; (16788 <pm_system_suspend+0xe8>)
   166f0:	4a26      	ldr	r2, [pc, #152]	; (1678c <pm_system_suspend+0xec>)
   166f2:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   166f6:	2100      	movs	r1, #0
   166f8:	2300      	movs	r3, #0
   166fa:	fbec 010e 	umlal	r0, r1, ip, lr
   166fe:	f7ea fd9f 	bl	1240 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   16702:	2101      	movs	r1, #1
   16704:	1a38      	subs	r0, r7, r0
   16706:	f011 fe6b 	bl	283e0 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   1670a:	f010 fa73 	bl	26bf4 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1670e:	2001      	movs	r0, #1
   16710:	f7ff ff00 	bl	16514 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   16714:	f3bf 8f5b 	dmb	ish
   16718:	4b1d      	ldr	r3, [pc, #116]	; (16790 <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   1671a:	2201      	movs	r2, #1
   1671c:	40b2      	lsls	r2, r6
   1671e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   16722:	e853 1f00 	ldrex	r1, [r3]
   16726:	4311      	orrs	r1, r2
   16728:	e843 1000 	strex	r0, r1, [r3]
   1672c:	2800      	cmp	r0, #0
   1672e:	d1f8      	bne.n	16722 <pm_system_suspend+0x82>
   16730:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   16734:	230c      	movs	r3, #12
   16736:	fb03 8404 	mla	r4, r3, r4, r8
   1673a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   1673e:	ab05      	add	r3, sp, #20
   16740:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   16744:	4a13      	ldr	r2, [pc, #76]	; (16794 <pm_system_suspend+0xf4>)
   16746:	b11a      	cbz	r2, 16750 <pm_system_suspend+0xb0>
		pm_power_state_set(info);
   16748:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   1674c:	f017 fd2b 	bl	2e1a6 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   16750:	f7ff ff62 	bl	16618 <pm_system_resume>
	k_sched_unlock();
   16754:	f010 ff92 	bl	2767c <k_sched_unlock>
	bool ret = true;
   16758:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1675a:	4a0f      	ldr	r2, [pc, #60]	; (16798 <pm_system_suspend+0xf8>)
   1675c:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   16760:	2301      	movs	r3, #1
   16762:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   16764:	43db      	mvns	r3, r3
   16766:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   1676a:	e855 2f00 	ldrex	r2, [r5]
   1676e:	401a      	ands	r2, r3
   16770:	e845 2100 	strex	r1, r2, [r5]
   16774:	2900      	cmp	r1, #0
   16776:	d1f8      	bne.n	1676a <pm_system_suspend+0xca>
   16778:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   1677c:	b008      	add	sp, #32
   1677e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   16782:	bf00      	nop
   16784:	20002040 	.word	0x20002040
   16788:	000f423f 	.word	0x000f423f
   1678c:	000f4240 	.word	0x000f4240
   16790:	20002708 	.word	0x20002708
   16794:	0002e1a7 	.word	0x0002e1a7
   16798:	20002718 	.word	0x20002718
   1679c:	2000270c 	.word	0x2000270c

000167a0 <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   167a0:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   167a2:	4d06      	ldr	r5, [pc, #24]	; (167bc <scan_default_param_set+0x1c>)
   167a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   167a6:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   167a8:	ac01      	add	r4, sp, #4
   167aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   167ac:	ae01      	add	r6, sp, #4
   167ae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   167b0:	4c03      	ldr	r4, [pc, #12]	; (167c0 <scan_default_param_set+0x20>)
   167b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   167b4:	682b      	ldr	r3, [r5, #0]
   167b6:	6023      	str	r3, [r4, #0]
}
   167b8:	b006      	add	sp, #24
   167ba:	bd70      	pop	{r4, r5, r6, pc}
   167bc:	00030d80 	.word	0x00030d80
   167c0:	20002774 	.word	0x20002774

000167c4 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
   167c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
   167c8:	7803      	ldrb	r3, [r0, #0]
   167ca:	2b09      	cmp	r3, #9
{
   167cc:	4605      	mov	r5, r0
   167ce:	460c      	mov	r4, r1
	switch (data->type) {
   167d0:	d11c      	bne.n	1680c <adv_data_found+0x48>
	return CONFIG_BT_SCAN_NAME_CNT && bt_scan.scan_filters.name.enabled;
   167d2:	4e11      	ldr	r6, [pc, #68]	; (16818 <adv_data_found+0x54>)
	if (is_name_filter_enabled()) {
   167d4:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
   167d8:	b1c3      	cbz	r3, 1680c <adv_data_found+0x48>
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   167da:	f896 a040 	ldrb.w	sl, [r6, #64]	; 0x40
	uint8_t data_len = data->data_len;
   167de:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
   167e2:	2700      	movs	r7, #0
   167e4:	4557      	cmp	r7, sl
   167e6:	d211      	bcs.n	1680c <adv_data_found+0x48>
		if (adv_name_cmp(data->data,
   167e8:	eb06 1947 	add.w	r9, r6, r7, lsl #5
	return strncmp(target_name, data, data_len) == 0;
   167ec:	6869      	ldr	r1, [r5, #4]
   167ee:	4642      	mov	r2, r8
   167f0:	4648      	mov	r0, r9
   167f2:	f019 ff37 	bl	30664 <strncmp>
		if (adv_name_cmp(data->data,
   167f6:	b960      	cbnz	r0, 16812 <adv_data_found+0x4e>
			control->filter_match_cnt++;
   167f8:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
   167fa:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
   167fe:	3301      	adds	r3, #1
   16800:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
   16802:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
   16804:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
   16808:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
   1680a:	70a3      	strb	r3, [r4, #2]
	default:
		break;
	}

	return true;
}
   1680c:	2001      	movs	r0, #1
   1680e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < counter; i++) {
   16812:	3701      	adds	r7, #1
   16814:	e7e6      	b.n	167e4 <adv_data_found+0x20>
   16816:	bf00      	nop
   16818:	2000271c 	.word	0x2000271c

0001681c <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   1681c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1681e:	4b0a      	ldr	r3, [pc, #40]	; (16848 <notify_filter_matched.constprop.0+0x2c>)
   16820:	681c      	ldr	r4, [r3, #0]
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   16822:	4605      	mov	r5, r0
   16824:	460e      	mov	r6, r1
   16826:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16828:	b10c      	cbz	r4, 1682e <notify_filter_matched.constprop.0+0x12>
   1682a:	3c04      	subs	r4, #4
   1682c:	b904      	cbnz	r4, 16830 <notify_filter_matched.constprop.0+0x14>
}
   1682e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
   16830:	6823      	ldr	r3, [r4, #0]
   16832:	681b      	ldr	r3, [r3, #0]
   16834:	b11b      	cbz	r3, 1683e <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
   16836:	463a      	mov	r2, r7
   16838:	4631      	mov	r1, r6
   1683a:	4628      	mov	r0, r5
   1683c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1683e:	1d23      	adds	r3, r4, #4
   16840:	d0f5      	beq.n	1682e <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16842:	6864      	ldr	r4, [r4, #4]
   16844:	e7f0      	b.n	16828 <notify_filter_matched.constprop.0+0xc>
   16846:	bf00      	nop
   16848:	20002790 	.word	0x20002790

0001684c <bt_scan_cb_register>:
	if (!cb) {
   1684c:	b150      	cbz	r0, 16864 <bt_scan_cb_register+0x18>
	parent->next = child;
   1684e:	2300      	movs	r3, #0
   16850:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   16852:	4b05      	ldr	r3, [pc, #20]	; (16868 <bt_scan_cb_register+0x1c>)
   16854:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   16856:	1d02      	adds	r2, r0, #4
   16858:	b911      	cbnz	r1, 16860 <bt_scan_cb_register+0x14>
	list->head = node;
   1685a:	e9c3 2200 	strd	r2, r2, [r3]
}
   1685e:	4770      	bx	lr
	parent->next = child;
   16860:	600a      	str	r2, [r1, #0]
	list->tail = node;
   16862:	605a      	str	r2, [r3, #4]
}
   16864:	4770      	bx	lr
   16866:	bf00      	nop
   16868:	20002790 	.word	0x20002790

0001686c <bt_scan_filter_add>:
{
   1686c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   16870:	4604      	mov	r4, r0
	if (!data) {
   16872:	460f      	mov	r7, r1
   16874:	2900      	cmp	r1, #0
   16876:	d040      	beq.n	168fa <bt_scan_filter_add+0x8e>
	return z_impl_k_mutex_lock(mutex, timeout);
   16878:	4821      	ldr	r0, [pc, #132]	; (16900 <bt_scan_filter_add+0x94>)
   1687a:	f04f 32ff 	mov.w	r2, #4294967295
   1687e:	f04f 33ff 	mov.w	r3, #4294967295
   16882:	f00e ff8b 	bl	2579c <z_impl_k_mutex_lock>
	switch (type) {
   16886:	b164      	cbz	r4, 168a2 <bt_scan_filter_add+0x36>
   16888:	3c01      	subs	r4, #1
   1688a:	2c04      	cmp	r4, #4
   1688c:	bf94      	ite	ls
   1688e:	f06f 050b 	mvnls.w	r5, #11
   16892:	f06f 0515 	mvnhi.w	r5, #21
	return z_impl_k_mutex_unlock(mutex);
   16896:	481a      	ldr	r0, [pc, #104]	; (16900 <bt_scan_filter_add+0x94>)
   16898:	f00f f880 	bl	2599c <z_impl_k_mutex_unlock>
}
   1689c:	4628      	mov	r0, r5
   1689e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   168a2:	4e18      	ldr	r6, [pc, #96]	; (16904 <bt_scan_filter_add+0x98>)
   168a4:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
	if (counter >= CONFIG_BT_SCAN_NAME_CNT) {
   168a8:	f1b9 0f01 	cmp.w	r9, #1
   168ac:	d81f      	bhi.n	168ee <bt_scan_filter_add+0x82>
	name_len = strlen(name);
   168ae:	4638      	mov	r0, r7
   168b0:	f7f6 fd80 	bl	d3b4 <strlen>
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   168b4:	1e43      	subs	r3, r0, #1
   168b6:	2b1f      	cmp	r3, #31
	name_len = strlen(name);
   168b8:	4680      	mov	r8, r0
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   168ba:	d81b      	bhi.n	168f4 <bt_scan_filter_add+0x88>
		if (!strcmp(bt_scan.scan_filters.name.target_name[i], name)) {
   168bc:	46b2      	mov	sl, r6
	for (size_t i = 0; i < counter; i++) {
   168be:	45a1      	cmp	r9, r4
   168c0:	d80c      	bhi.n	168dc <bt_scan_filter_add+0x70>
   168c2:	4642      	mov	r2, r8
   168c4:	4639      	mov	r1, r7
   168c6:	eb06 1049 	add.w	r0, r6, r9, lsl #5
   168ca:	f019 fe86 	bl	305da <memcpy>
	bt_scan.scan_filters.name.cnt++;
   168ce:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
   168d2:	3301      	adds	r3, #1
   168d4:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
	return 0;
   168d8:	2500      	movs	r5, #0
   168da:	e7dc      	b.n	16896 <bt_scan_filter_add+0x2a>
		if (!strcmp(bt_scan.scan_filters.name.target_name[i], name)) {
   168dc:	4639      	mov	r1, r7
   168de:	4650      	mov	r0, sl
   168e0:	f7f6 fd5e 	bl	d3a0 <strcmp>
	for (size_t i = 0; i < counter; i++) {
   168e4:	2401      	movs	r4, #1
		if (!strcmp(bt_scan.scan_filters.name.target_name[i], name)) {
   168e6:	4605      	mov	r5, r0
   168e8:	2800      	cmp	r0, #0
   168ea:	d1e8      	bne.n	168be <bt_scan_filter_add+0x52>
   168ec:	e7d3      	b.n	16896 <bt_scan_filter_add+0x2a>
		return -ENOMEM;
   168ee:	f06f 050b 	mvn.w	r5, #11
   168f2:	e7d0      	b.n	16896 <bt_scan_filter_add+0x2a>
		return -EINVAL;
   168f4:	f06f 0515 	mvn.w	r5, #21
   168f8:	e7cd      	b.n	16896 <bt_scan_filter_add+0x2a>
		return -EINVAL;
   168fa:	f06f 0515 	mvn.w	r5, #21
   168fe:	e7cd      	b.n	1689c <bt_scan_filter_add+0x30>
   16900:	200008d4 	.word	0x200008d4
   16904:	2000271c 	.word	0x2000271c

00016908 <bt_scan_filter_remove_all>:
{
   16908:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   1690a:	4c0d      	ldr	r4, [pc, #52]	; (16940 <bt_scan_filter_remove_all+0x38>)
   1690c:	f04f 32ff 	mov.w	r2, #4294967295
   16910:	f04f 33ff 	mov.w	r3, #4294967295
   16914:	4620      	mov	r0, r4
   16916:	f00e ff41 	bl	2579c <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
   1691a:	4b0a      	ldr	r3, [pc, #40]	; (16944 <bt_scan_filter_remove_all+0x3c>)
   1691c:	2200      	movs	r2, #0
   1691e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	short_name_filter->cnt = 0;
   16922:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	addr_filter->cnt = 0;
   16926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	uuid_filter->cnt = 0;
   1692a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	appearance_filter->cnt = 0;
   1692e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	manufacturer_data_filter->cnt = 0;
   16932:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	return z_impl_k_mutex_unlock(mutex);
   16936:	4620      	mov	r0, r4
}
   16938:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1693c:	f00f b82e 	b.w	2599c <z_impl_k_mutex_unlock>
   16940:	200008d4 	.word	0x200008d4
   16944:	2000271c 	.word	0x2000271c

00016948 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
   16948:	4b07      	ldr	r3, [pc, #28]	; (16968 <bt_scan_filter_disable+0x20>)
   1694a:	2200      	movs	r2, #0
   1694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	bt_scan.scan_filters.short_name.enabled = false;
   16950:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	bt_scan.scan_filters.addr.enabled = false;
   16954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	bt_scan.scan_filters.uuid.enabled = false;
   16958:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	bt_scan.scan_filters.appearance.enabled = false;
   1695c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   16960:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
   16964:	4770      	bx	lr
   16966:	bf00      	nop
   16968:	2000271c 	.word	0x2000271c

0001696c <bt_scan_filter_enable>:
{
   1696c:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
   1696e:	0683      	lsls	r3, r0, #26
   16970:	d025      	beq.n	169be <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
   16972:	f7ff ffe9 	bl	16948 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
   16976:	4b13      	ldr	r3, [pc, #76]	; (169c4 <bt_scan_filter_enable+0x58>)
   16978:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   1697c:	bf1c      	itt	ne
   1697e:	2201      	movne	r2, #1
   16980:	f883 2045 	strbne.w	r2, [r3, #69]	; 0x45
	if (mode & BT_SCAN_NAME_FILTER) {
   16984:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   16986:	bf44      	itt	mi
   16988:	2201      	movmi	r2, #1
   1698a:	f883 2041 	strbmi.w	r2, [r3, #65]	; 0x41
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   1698e:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   16990:	bf44      	itt	mi
   16992:	2201      	movmi	r2, #1
   16994:	f883 2043 	strbmi.w	r2, [r3, #67]	; 0x43
	if (mode & BT_SCAN_UUID_FILTER) {
   16998:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   1699a:	bf44      	itt	mi
   1699c:	2201      	movmi	r2, #1
   1699e:	f883 2049 	strbmi.w	r2, [r3, #73]	; 0x49
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   169a2:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   169a4:	bf44      	itt	mi
   169a6:	2201      	movmi	r2, #1
   169a8:	f883 204d 	strbmi.w	r2, [r3, #77]	; 0x4d
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   169ac:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   169ae:	bf44      	itt	mi
   169b0:	2201      	movmi	r2, #1
   169b2:	f883 204f 	strbmi.w	r2, [r3, #79]	; 0x4f
	filters->all_mode = match_all;
   169b6:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	return 0;
   169ba:	2000      	movs	r0, #0
}
   169bc:	bd08      	pop	{r3, pc}
		return -EINVAL;
   169be:	f06f 0015 	mvn.w	r0, #21
   169c2:	e7fb      	b.n	169bc <bt_scan_filter_enable+0x50>
   169c4:	2000271c 	.word	0x2000271c

000169c8 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   169c8:	b570      	push	{r4, r5, r6, lr}
   169ca:	b086      	sub	sp, #24
   169cc:	460e      	mov	r6, r1
   169ce:	4605      	mov	r5, r0
	bt_scan_stop();
   169d0:	f017 f9fd 	bl	2ddce <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   169d4:	4b18      	ldr	r3, [pc, #96]	; (16a38 <scan_connect_with_target.part.0+0x70>)
   169d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   169d8:	ac02      	add	r4, sp, #8
   169da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   169de:	ab01      	add	r3, sp, #4
   169e0:	4621      	mov	r1, r4
   169e2:	4a16      	ldr	r2, [pc, #88]	; (16a3c <scan_connect_with_target.part.0+0x74>)
   169e4:	4630      	mov	r0, r6
   169e6:	f004 fc9b 	bl	1b320 <bt_conn_le_create>
	if (err) {
   169ea:	4b15      	ldr	r3, [pc, #84]	; (16a40 <scan_connect_with_target.part.0+0x78>)
   169ec:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   169ee:	681c      	ldr	r4, [r3, #0]
	if (err) {
   169f0:	b168      	cbz	r0, 16a0e <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   169f2:	b10c      	cbz	r4, 169f8 <scan_connect_with_target.part.0+0x30>
   169f4:	3c04      	subs	r4, #4
   169f6:	b90c      	cbnz	r4, 169fc <scan_connect_with_target.part.0+0x34>
}
   169f8:	b006      	add	sp, #24
   169fa:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
   169fc:	6823      	ldr	r3, [r4, #0]
   169fe:	689b      	ldr	r3, [r3, #8]
   16a00:	b10b      	cbz	r3, 16a06 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
   16a02:	4628      	mov	r0, r5
   16a04:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16a06:	1d22      	adds	r2, r4, #4
   16a08:	d0f6      	beq.n	169f8 <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16a0a:	6864      	ldr	r4, [r4, #4]
   16a0c:	e7f1      	b.n	169f2 <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16a0e:	b91c      	cbnz	r4, 16a18 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
   16a10:	9801      	ldr	r0, [sp, #4]
   16a12:	f004 f95d 	bl	1acd0 <bt_conn_unref>
   16a16:	e7ef      	b.n	169f8 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
   16a18:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16a1a:	3c04      	subs	r4, #4
   16a1c:	2c00      	cmp	r4, #0
   16a1e:	d0f7      	beq.n	16a10 <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
   16a20:	6823      	ldr	r3, [r4, #0]
   16a22:	68db      	ldr	r3, [r3, #12]
   16a24:	b113      	cbz	r3, 16a2c <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
   16a26:	4631      	mov	r1, r6
   16a28:	4628      	mov	r0, r5
   16a2a:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16a2c:	1d23      	adds	r3, r4, #4
   16a2e:	d0ef      	beq.n	16a10 <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16a30:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16a32:	2c00      	cmp	r4, #0
   16a34:	d1f1      	bne.n	16a1a <scan_connect_with_target.part.0+0x52>
   16a36:	e7eb      	b.n	16a10 <scan_connect_with_target.part.0+0x48>
   16a38:	00030d94 	.word	0x00030d94
   16a3c:	20002788 	.word	0x20002788
   16a40:	20002790 	.word	0x20002790

00016a44 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   16a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   16a48:	4f31      	ldr	r7, [pc, #196]	; (16b10 <scan_recv+0xcc>)
{
   16a4a:	b094      	sub	sp, #80	; 0x50
	memset(&scan_control, 0, sizeof(scan_control));
   16a4c:	2250      	movs	r2, #80	; 0x50
{
   16a4e:	4605      	mov	r5, r0
   16a50:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   16a52:	4668      	mov	r0, sp
   16a54:	2100      	movs	r1, #0
   16a56:	f019 fde8 	bl	3062a <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   16a5a:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   16a5e:	f88d 2003 	strb.w	r2, [sp, #3]
	control->filter_cnt = 0;
   16a62:	2200      	movs	r2, #0
   16a64:	f88d 2000 	strb.w	r2, [sp]
	if (is_name_filter_enabled()) {
   16a68:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
   16a6c:	b112      	cbz	r2, 16a74 <scan_recv+0x30>
		control->filter_cnt++;
   16a6e:	2301      	movs	r3, #1
   16a70:	f88d 3000 	strb.w	r3, [sp]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   16a74:	7a2b      	ldrb	r3, [r5, #8]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   16a76:	4620      	mov	r0, r4
   16a78:	f003 0301 	and.w	r3, r3, #1
   16a7c:	f88d 3004 	strb.w	r3, [sp, #4]
   16a80:	f018 ffef 	bl	2fa62 <net_buf_simple_headroom>

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   16a84:	4923      	ldr	r1, [pc, #140]	; (16b14 <scan_recv+0xd0>)
	state->len = buf->len;
   16a86:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   16a8a:	4606      	mov	r6, r0
   16a8c:	466a      	mov	r2, sp
   16a8e:	4620      	mov	r0, r4
   16a90:	f003 f8c4 	bl	19c1c <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   16a94:	4b20      	ldr	r3, [pc, #128]	; (16b18 <scan_recv+0xd4>)
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   16a96:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   16a98:	f8a4 8004 	strh.w	r8, [r4, #4]
	scan_control.device_info.adv_data = ad;
   16a9c:	e9cd 3403 	strd	r3, r4, [sp, #12]
	if (control->all_mode &&
   16aa0:	f89d 3003 	ldrb.w	r3, [sp, #3]
	scan_control.device_info.recv_info = info;
   16aa4:	9502      	str	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
   16aa6:	fa10 f686 	uxtah	r6, r0, r6
   16aaa:	6026      	str	r6, [r4, #0]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   16aac:	682c      	ldr	r4, [r5, #0]
	if (control->all_mode &&
   16aae:	b1ab      	cbz	r3, 16adc <scan_recv+0x98>
   16ab0:	f89d 2001 	ldrb.w	r2, [sp, #1]
   16ab4:	f89d 3000 	ldrb.w	r3, [sp]
   16ab8:	429a      	cmp	r2, r3
   16aba:	d113      	bne.n	16ae4 <scan_recv+0xa0>
		notify_filter_matched(&control->device_info,
   16abc:	f89d 2004 	ldrb.w	r2, [sp, #4]
   16ac0:	a905      	add	r1, sp, #20
   16ac2:	a802      	add	r0, sp, #8
   16ac4:	f7ff feaa 	bl	1681c <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   16ac8:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
   16acc:	b11b      	cbz	r3, 16ad6 <scan_recv+0x92>
   16ace:	4621      	mov	r1, r4
   16ad0:	4668      	mov	r0, sp
   16ad2:	f7ff ff79 	bl	169c8 <scan_connect_with_target.part.0>
}
   16ad6:	b014      	add	sp, #80	; 0x50
   16ad8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   16adc:	f89d 3002 	ldrb.w	r3, [sp, #2]
   16ae0:	2b00      	cmp	r3, #0
   16ae2:	d1eb      	bne.n	16abc <scan_recv+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16ae4:	4b0d      	ldr	r3, [pc, #52]	; (16b1c <scan_recv+0xd8>)
   16ae6:	681c      	ldr	r4, [r3, #0]
   16ae8:	2c00      	cmp	r4, #0
   16aea:	d0f4      	beq.n	16ad6 <scan_recv+0x92>
		notify_filter_no_match(&control->device_info,
   16aec:	f89d 5004 	ldrb.w	r5, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16af0:	3c04      	subs	r4, #4
   16af2:	2c00      	cmp	r4, #0
   16af4:	d0ef      	beq.n	16ad6 <scan_recv+0x92>
		if (cb->cb_addr->filter_no_match) {
   16af6:	6823      	ldr	r3, [r4, #0]
   16af8:	685b      	ldr	r3, [r3, #4]
   16afa:	b113      	cbz	r3, 16b02 <scan_recv+0xbe>
			cb->cb_addr->filter_no_match(device_info, connectable);
   16afc:	4629      	mov	r1, r5
   16afe:	a802      	add	r0, sp, #8
   16b00:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   16b02:	1d23      	adds	r3, r4, #4
   16b04:	d0e7      	beq.n	16ad6 <scan_recv+0x92>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   16b06:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   16b08:	2c00      	cmp	r4, #0
   16b0a:	d1f1      	bne.n	16af0 <scan_recv+0xac>
   16b0c:	e7e3      	b.n	16ad6 <scan_recv+0x92>
   16b0e:	bf00      	nop
   16b10:	2000271c 	.word	0x2000271c
   16b14:	000167c5 	.word	0x000167c5
   16b18:	20002788 	.word	0x20002788
   16b1c:	20002790 	.word	0x20002790

00016b20 <bt_scan_init>:
{
   16b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   16b22:	4c18      	ldr	r4, [pc, #96]	; (16b84 <bt_scan_init+0x64>)
{
   16b24:	4605      	mov	r5, r0
	bt_le_scan_cb_register(&scan_cb);
   16b26:	4818      	ldr	r0, [pc, #96]	; (16b88 <bt_scan_init+0x68>)
   16b28:	f003 fdf4 	bl	1a714 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   16b2c:	2254      	movs	r2, #84	; 0x54
   16b2e:	2100      	movs	r1, #0
   16b30:	4620      	mov	r0, r4
   16b32:	f019 fd7a 	bl	3062a <memset>
	if (init) {
   16b36:	4627      	mov	r7, r4
   16b38:	b1d5      	cbz	r5, 16b70 <bt_scan_init+0x50>
		bt_scan.connect_if_match = init->connect_if_match;
   16b3a:	792b      	ldrb	r3, [r5, #4]
   16b3c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
		if (init->scan_param) {
   16b40:	682c      	ldr	r4, [r5, #0]
   16b42:	b164      	cbz	r4, 16b5e <bt_scan_init+0x3e>
			bt_scan.scan_param = *init->scan_param;
   16b44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   16b46:	f107 0658 	add.w	r6, r7, #88	; 0x58
   16b4a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   16b4c:	6823      	ldr	r3, [r4, #0]
   16b4e:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   16b50:	68aa      	ldr	r2, [r5, #8]
   16b52:	b13a      	cbz	r2, 16b64 <bt_scan_init+0x44>
			bt_scan.conn_param = *init->conn_param;
   16b54:	4b0d      	ldr	r3, [pc, #52]	; (16b8c <bt_scan_init+0x6c>)
   16b56:	6810      	ldr	r0, [r2, #0]
   16b58:	6851      	ldr	r1, [r2, #4]
   16b5a:	c303      	stmia	r3!, {r0, r1}
}
   16b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
   16b5e:	f7ff fe1f 	bl	167a0 <scan_default_param_set>
   16b62:	e7f5      	b.n	16b50 <bt_scan_init+0x30>
	bt_scan.conn_param = *conn_param;
   16b64:	490a      	ldr	r1, [pc, #40]	; (16b90 <bt_scan_init+0x70>)
   16b66:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   16b6a:	e9c7 131b 	strd	r1, r3, [r7, #108]	; 0x6c
}
   16b6e:	e7f5      	b.n	16b5c <bt_scan_init+0x3c>
		scan_default_param_set();
   16b70:	f7ff fe16 	bl	167a0 <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
   16b74:	4a06      	ldr	r2, [pc, #24]	; (16b90 <bt_scan_init+0x70>)
		bt_scan.connect_if_match = false;
   16b76:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
	bt_scan.conn_param = *conn_param;
   16b7a:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   16b7e:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
}
   16b82:	e7eb      	b.n	16b5c <bt_scan_init+0x3c>
   16b84:	2000271c 	.word	0x2000271c
   16b88:	200004ac 	.word	0x200004ac
   16b8c:	20002788 	.word	0x20002788
   16b90:	00280018 	.word	0x00280018

00016b94 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   16b94:	b108      	cbz	r0, 16b9a <bt_scan_start+0x6>
   16b96:	2801      	cmp	r0, #1
   16b98:	d106      	bne.n	16ba8 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   16b9a:	4b05      	ldr	r3, [pc, #20]	; (16bb0 <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   16b9c:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   16b9e:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   16ba2:	4804      	ldr	r0, [pc, #16]	; (16bb4 <bt_scan_start+0x20>)
   16ba4:	f003 bd20 	b.w	1a5e8 <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   16ba8:	f06f 0015 	mvn.w	r0, #21
   16bac:	4770      	bx	lr
   16bae:	bf00      	nop
   16bb0:	2000271c 	.word	0x2000271c
   16bb4:	20002774 	.word	0x20002774

00016bb8 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   16bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   16bba:	4e26      	ldr	r6, [pc, #152]	; (16c54 <tc_aes128_set_encrypt_key+0x9c>)
{
   16bbc:	4607      	mov	r7, r0
   16bbe:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   16bc0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   16bc2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   16bc4:	ad01      	add	r5, sp, #4
   16bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16bc8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   16bca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   16bcc:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   16bd0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   16bd4:	4638      	mov	r0, r7
   16bd6:	2f00      	cmp	r7, #0
   16bd8:	d038      	beq.n	16c4c <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   16bda:	2c00      	cmp	r4, #0
   16bdc:	d038      	beq.n	16c50 <tc_aes128_set_encrypt_key+0x98>
   16bde:	1f38      	subs	r0, r7, #4
   16be0:	4621      	mov	r1, r4
   16be2:	4602      	mov	r2, r0
   16be4:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   16be6:	784b      	ldrb	r3, [r1, #1]
   16be8:	780d      	ldrb	r5, [r1, #0]
   16bea:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   16bec:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   16bf0:	78cd      	ldrb	r5, [r1, #3]
   16bf2:	432b      	orrs	r3, r5
   16bf4:	788d      	ldrb	r5, [r1, #2]
   16bf6:	3104      	adds	r1, #4
   16bf8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   16bfc:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   16bfe:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   16c02:	d1f0      	bne.n	16be6 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   16c04:	4c14      	ldr	r4, [pc, #80]	; (16c58 <tc_aes128_set_encrypt_key+0xa0>)
   16c06:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   16c08:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   16c0a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   16c0c:	d116      	bne.n	16c3c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   16c0e:	f3c3 4207 	ubfx	r2, r3, #16, #8
   16c12:	5ca5      	ldrb	r5, [r4, r2]
   16c14:	0e1a      	lsrs	r2, r3, #24
   16c16:	5ca2      	ldrb	r2, [r4, r2]
   16c18:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   16c1c:	f3c3 2507 	ubfx	r5, r3, #8, #8
   16c20:	b2db      	uxtb	r3, r3
   16c22:	5d65      	ldrb	r5, [r4, r5]
   16c24:	5ce3      	ldrb	r3, [r4, r3]
   16c26:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   16c2a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   16c2e:	ad0c      	add	r5, sp, #48	; 0x30
   16c30:	f021 0303 	bic.w	r3, r1, #3
   16c34:	442b      	add	r3, r5
   16c36:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   16c3a:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   16c3c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   16c40:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   16c42:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   16c44:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   16c46:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   16c48:	d1de      	bne.n	16c08 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   16c4a:	2001      	movs	r0, #1
}
   16c4c:	b00d      	add	sp, #52	; 0x34
   16c4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   16c50:	4620      	mov	r0, r4
   16c52:	e7fb      	b.n	16c4c <tc_aes128_set_encrypt_key+0x94>
   16c54:	00030da4 	.word	0x00030da4
   16c58:	00033e8f 	.word	0x00033e8f

00016c5c <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   16c5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   16c60:	4615      	mov	r5, r2
   16c62:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   16c64:	4606      	mov	r6, r0
   16c66:	2800      	cmp	r0, #0
   16c68:	d058      	beq.n	16d1c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   16c6a:	2900      	cmp	r1, #0
   16c6c:	d059      	beq.n	16d22 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   16c6e:	2a00      	cmp	r2, #0
   16c70:	d059      	beq.n	16d26 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   16c72:	2310      	movs	r3, #16
   16c74:	460a      	mov	r2, r1
   16c76:	4668      	mov	r0, sp
   16c78:	4619      	mov	r1, r3
   16c7a:	f017 f8aa 	bl	2ddd2 <_copy>
	add_round_key(state, s->words);
   16c7e:	4629      	mov	r1, r5
   16c80:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   16c82:	4c2a      	ldr	r4, [pc, #168]	; (16d2c <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   16c84:	f017 f8bd 	bl	2de02 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   16c88:	f105 0710 	add.w	r7, r5, #16
   16c8c:	46a1      	mov	r9, r4
   16c8e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   16c90:	46e8      	mov	r8, sp
{
   16c92:	466a      	mov	r2, sp
   16c94:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   16c96:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   16c98:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   16c9a:	5c61      	ldrb	r1, [r4, r1]
   16c9c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   16ca0:	d1f9      	bne.n	16c96 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   16ca2:	4668      	mov	r0, sp
   16ca4:	f017 f8f2 	bl	2de8c <shift_rows>
	mult_row_column(t, s);
   16ca8:	4669      	mov	r1, sp
   16caa:	a804      	add	r0, sp, #16
   16cac:	f017 f927 	bl	2defe <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   16cb0:	a901      	add	r1, sp, #4
   16cb2:	a805      	add	r0, sp, #20
   16cb4:	f017 f923 	bl	2defe <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   16cb8:	a902      	add	r1, sp, #8
   16cba:	a806      	add	r0, sp, #24
   16cbc:	f017 f91f 	bl	2defe <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   16cc0:	a903      	add	r1, sp, #12
   16cc2:	a807      	add	r0, sp, #28
   16cc4:	f017 f91b 	bl	2defe <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   16cc8:	2310      	movs	r3, #16
   16cca:	4619      	mov	r1, r3
   16ccc:	eb0d 0203 	add.w	r2, sp, r3
   16cd0:	4668      	mov	r0, sp
   16cd2:	f017 f87e 	bl	2ddd2 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   16cd6:	4639      	mov	r1, r7
   16cd8:	4668      	mov	r0, sp
   16cda:	3710      	adds	r7, #16
   16cdc:	f017 f891 	bl	2de02 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   16ce0:	42af      	cmp	r7, r5
   16ce2:	d1d5      	bne.n	16c90 <tc_aes_encrypt+0x34>
   16ce4:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   16ce6:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   16cea:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   16cec:	f819 3003 	ldrb.w	r3, [r9, r3]
   16cf0:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   16cf4:	d1f7      	bne.n	16ce6 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   16cf6:	4668      	mov	r0, sp
   16cf8:	f017 f8c8 	bl	2de8c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   16cfc:	4629      	mov	r1, r5
   16cfe:	4668      	mov	r0, sp
   16d00:	f017 f87f 	bl	2de02 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   16d04:	2310      	movs	r3, #16
   16d06:	4619      	mov	r1, r3
   16d08:	466a      	mov	r2, sp
   16d0a:	4630      	mov	r0, r6
   16d0c:	f017 f861 	bl	2ddd2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   16d10:	4668      	mov	r0, sp
   16d12:	2210      	movs	r2, #16
   16d14:	4621      	mov	r1, r4
   16d16:	f017 f869 	bl	2ddec <_set>

	return TC_CRYPTO_SUCCESS;
   16d1a:	2001      	movs	r0, #1
}
   16d1c:	b009      	add	sp, #36	; 0x24
   16d1e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   16d22:	4608      	mov	r0, r1
   16d24:	e7fa      	b.n	16d1c <tc_aes_encrypt+0xc0>
   16d26:	4610      	mov	r0, r2
   16d28:	e7f8      	b.n	16d1c <tc_aes_encrypt+0xc0>
   16d2a:	bf00      	nop
   16d2c:	00033e8f 	.word	0x00033e8f

00016d30 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
   16d30:	4801      	ldr	r0, [pc, #4]	; (16d38 <nrf_cc3xx_platform_abort_init+0x8>)
   16d32:	f012 ba85 	b.w	29240 <nrf_cc3xx_platform_set_abort>
   16d36:	bf00      	nop
   16d38:	00031614 	.word	0x00031614

00016d3c <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16d3c:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
   16d3e:	b1d0      	cbz	r0, 16d76 <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
   16d40:	6843      	ldr	r3, [r0, #4]
   16d42:	2b04      	cmp	r3, #4
   16d44:	d111      	bne.n	16d6a <mutex_unlock_platform+0x2e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   16d46:	2200      	movs	r2, #0
   16d48:	6803      	ldr	r3, [r0, #0]
   16d4a:	f3bf 8f5b 	dmb	ish
   16d4e:	e853 1f00 	ldrex	r1, [r3]
   16d52:	2901      	cmp	r1, #1
   16d54:	d103      	bne.n	16d5e <mutex_unlock_platform+0x22>
   16d56:	e843 2000 	strex	r0, r2, [r3]
   16d5a:	2800      	cmp	r0, #0
   16d5c:	d1f7      	bne.n	16d4e <mutex_unlock_platform+0x12>
   16d5e:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16d62:	4807      	ldr	r0, [pc, #28]	; (16d80 <mutex_unlock_platform+0x44>)
   16d64:	bf08      	it	eq
   16d66:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
   16d68:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16d6a:	b13b      	cbz	r3, 16d7c <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
   16d6c:	6800      	ldr	r0, [r0, #0]
   16d6e:	f00e fe15 	bl	2599c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
   16d72:	2000      	movs	r0, #0
   16d74:	e7f8      	b.n	16d68 <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   16d76:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   16d7a:	e7f5      	b.n	16d68 <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   16d7c:	4801      	ldr	r0, [pc, #4]	; (16d84 <mutex_unlock_platform+0x48>)
   16d7e:	e7f3      	b.n	16d68 <mutex_unlock_platform+0x2c>
   16d80:	ffff8fe9 	.word	0xffff8fe9
   16d84:	ffff8fea 	.word	0xffff8fea

00016d88 <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16d88:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   16d8a:	4604      	mov	r4, r0
   16d8c:	b918      	cbnz	r0, 16d96 <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
   16d8e:	4b0d      	ldr	r3, [pc, #52]	; (16dc4 <mutex_free_platform+0x3c>)
   16d90:	480d      	ldr	r0, [pc, #52]	; (16dc8 <mutex_free_platform+0x40>)
   16d92:	685b      	ldr	r3, [r3, #4]
   16d94:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   16d96:	6861      	ldr	r1, [r4, #4]
   16d98:	2908      	cmp	r1, #8
   16d9a:	d00d      	beq.n	16db8 <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16d9c:	f031 0304 	bics.w	r3, r1, #4
   16da0:	d00a      	beq.n	16db8 <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
   16da2:	f011 0102 	ands.w	r1, r1, #2
   16da6:	d008      	beq.n	16dba <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
   16da8:	4808      	ldr	r0, [pc, #32]	; (16dcc <mutex_free_platform+0x44>)
   16daa:	4621      	mov	r1, r4
   16dac:	f00d ffd0 	bl	24d50 <k_mem_slab_free>
        mutex->mutex = NULL;
   16db0:	2300      	movs	r3, #0
   16db2:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
   16db4:	2300      	movs	r3, #0
   16db6:	6063      	str	r3, [r4, #4]
}
   16db8:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
   16dba:	6820      	ldr	r0, [r4, #0]
   16dbc:	2214      	movs	r2, #20
   16dbe:	f019 fc34 	bl	3062a <memset>
   16dc2:	e7f7      	b.n	16db4 <mutex_free_platform+0x2c>
   16dc4:	2000066c 	.word	0x2000066c
   16dc8:	00033f8f 	.word	0x00033f8f
   16dcc:	20002798 	.word	0x20002798

00016dd0 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16dd0:	b510      	push	{r4, lr}
    if (mutex == NULL) {
   16dd2:	4604      	mov	r4, r0
   16dd4:	b918      	cbnz	r0, 16dde <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
   16dd6:	4b16      	ldr	r3, [pc, #88]	; (16e30 <mutex_init_platform+0x60>)
   16dd8:	4816      	ldr	r0, [pc, #88]	; (16e34 <mutex_init_platform+0x64>)
   16dda:	685b      	ldr	r3, [r3, #4]
   16ddc:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
   16dde:	6863      	ldr	r3, [r4, #4]
   16de0:	2b04      	cmp	r3, #4
   16de2:	d023      	beq.n	16e2c <mutex_init_platform+0x5c>
   16de4:	2b08      	cmp	r3, #8
   16de6:	d021      	beq.n	16e2c <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
   16de8:	b9cb      	cbnz	r3, 16e1e <mutex_init_platform+0x4e>
   16dea:	6823      	ldr	r3, [r4, #0]
   16dec:	b9bb      	cbnz	r3, 16e1e <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
   16dee:	4812      	ldr	r0, [pc, #72]	; (16e38 <mutex_init_platform+0x68>)
   16df0:	f04f 32ff 	mov.w	r2, #4294967295
   16df4:	f04f 33ff 	mov.w	r3, #4294967295
   16df8:	4621      	mov	r1, r4
   16dfa:	f00d ff3d 	bl	24c78 <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
   16dfe:	b908      	cbnz	r0, 16e04 <mutex_init_platform+0x34>
   16e00:	6823      	ldr	r3, [r4, #0]
   16e02:	b91b      	cbnz	r3, 16e0c <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
   16e04:	4b0a      	ldr	r3, [pc, #40]	; (16e30 <mutex_init_platform+0x60>)
   16e06:	480d      	ldr	r0, [pc, #52]	; (16e3c <mutex_init_platform+0x6c>)
   16e08:	685b      	ldr	r3, [r3, #4]
   16e0a:	4798      	blx	r3
   16e0c:	6820      	ldr	r0, [r4, #0]
   16e0e:	2214      	movs	r2, #20
   16e10:	2100      	movs	r1, #0
   16e12:	f019 fc0a 	bl	3062a <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
   16e16:	6863      	ldr	r3, [r4, #4]
   16e18:	f043 0302 	orr.w	r3, r3, #2
   16e1c:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
   16e1e:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
   16e20:	f019 fa52 	bl	302c8 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
   16e24:	6863      	ldr	r3, [r4, #4]
   16e26:	f043 0301 	orr.w	r3, r3, #1
   16e2a:	6063      	str	r3, [r4, #4]
}
   16e2c:	bd10      	pop	{r4, pc}
   16e2e:	bf00      	nop
   16e30:	2000066c 	.word	0x2000066c
   16e34:	00033f8f 	.word	0x00033f8f
   16e38:	20002798 	.word	0x20002798
   16e3c:	00033fb5 	.word	0x00033fb5

00016e40 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
   16e40:	b508      	push	{r3, lr}
    if(mutex == NULL) {
   16e42:	b308      	cbz	r0, 16e88 <mutex_lock_platform+0x48>
    switch (mutex->flags) {
   16e44:	6843      	ldr	r3, [r0, #4]
   16e46:	2b04      	cmp	r3, #4
   16e48:	d110      	bne.n	16e6c <mutex_lock_platform+0x2c>
   16e4a:	2201      	movs	r2, #1
   16e4c:	6803      	ldr	r3, [r0, #0]
   16e4e:	f3bf 8f5b 	dmb	ish
   16e52:	e853 1f00 	ldrex	r1, [r3]
   16e56:	2900      	cmp	r1, #0
   16e58:	d103      	bne.n	16e62 <mutex_lock_platform+0x22>
   16e5a:	e843 2000 	strex	r0, r2, [r3]
   16e5e:	2800      	cmp	r0, #0
   16e60:	d1f7      	bne.n	16e52 <mutex_lock_platform+0x12>
   16e62:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16e66:	d10b      	bne.n	16e80 <mutex_lock_platform+0x40>
   16e68:	2000      	movs	r0, #0
}
   16e6a:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
   16e6c:	b153      	cbz	r3, 16e84 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
   16e6e:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
   16e70:	f04f 32ff 	mov.w	r2, #4294967295
   16e74:	f04f 33ff 	mov.w	r3, #4294967295
   16e78:	f00e fc90 	bl	2579c <z_impl_k_mutex_lock>
        if (ret == 0) {
   16e7c:	2800      	cmp	r0, #0
   16e7e:	d0f3      	beq.n	16e68 <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
   16e80:	4803      	ldr	r0, [pc, #12]	; (16e90 <mutex_lock_platform+0x50>)
   16e82:	e7f2      	b.n	16e6a <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
   16e84:	4803      	ldr	r0, [pc, #12]	; (16e94 <mutex_lock_platform+0x54>)
   16e86:	e7f0      	b.n	16e6a <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
   16e88:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   16e8c:	e7ed      	b.n	16e6a <mutex_lock_platform+0x2a>
   16e8e:	bf00      	nop
   16e90:	ffff8fe9 	.word	0xffff8fe9
   16e94:	ffff8fea 	.word	0xffff8fea

00016e98 <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
   16e98:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
   16e9a:	4906      	ldr	r1, [pc, #24]	; (16eb4 <nrf_cc3xx_platform_mutex_init+0x1c>)
   16e9c:	4806      	ldr	r0, [pc, #24]	; (16eb8 <nrf_cc3xx_platform_mutex_init+0x20>)
   16e9e:	2340      	movs	r3, #64	; 0x40
   16ea0:	2214      	movs	r2, #20
   16ea2:	f019 f9c3 	bl	3022c <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
   16ea6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
   16eaa:	4904      	ldr	r1, [pc, #16]	; (16ebc <nrf_cc3xx_platform_mutex_init+0x24>)
   16eac:	4804      	ldr	r0, [pc, #16]	; (16ec0 <nrf_cc3xx_platform_mutex_init+0x28>)
   16eae:	f012 ba7f 	b.w	293b0 <nrf_cc3xx_platform_set_mutexes>
   16eb2:	bf00      	nop
   16eb4:	200027b8 	.word	0x200027b8
   16eb8:	20002798 	.word	0x20002798
   16ebc:	0003162c 	.word	0x0003162c
   16ec0:	0003161c 	.word	0x0003161c

00016ec4 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   16ec4:	4901      	ldr	r1, [pc, #4]	; (16ecc <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   16ec6:	2210      	movs	r2, #16
	str	r2, [r1]
   16ec8:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   16eca:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   16ecc:	e000ed10 	.word	0xe000ed10

00016ed0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   16ed0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   16ed2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   16ed4:	f380 8811 	msr	BASEPRI, r0
	isb
   16ed8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   16edc:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   16ee0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   16ee2:	b662      	cpsie	i
	isb
   16ee4:	f3bf 8f6f 	isb	sy

	bx	lr
   16ee8:	4770      	bx	lr
   16eea:	bf00      	nop

00016eec <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   16eec:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   16eee:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   16ef0:	f381 8811 	msr	BASEPRI, r1

	wfe
   16ef4:	bf20      	wfe

	msr	BASEPRI, r0
   16ef6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   16efa:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   16efc:	4770      	bx	lr
   16efe:	bf00      	nop

00016f00 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   16f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   16f02:	4607      	mov	r7, r0

	if (esf != NULL) {
   16f04:	460c      	mov	r4, r1
   16f06:	b361      	cbz	r1, 16f62 <z_arm_fatal_error+0x62>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   16f08:	4e19      	ldr	r6, [pc, #100]	; (16f70 <z_arm_fatal_error+0x70>)
   16f0a:	6833      	ldr	r3, [r6, #0]
   16f0c:	0758      	lsls	r0, r3, #29
   16f0e:	d028      	beq.n	16f62 <z_arm_fatal_error+0x62>
   16f10:	4d18      	ldr	r5, [pc, #96]	; (16f74 <z_arm_fatal_error+0x74>)
   16f12:	4819      	ldr	r0, [pc, #100]	; (16f78 <z_arm_fatal_error+0x78>)
   16f14:	1b75      	subs	r5, r6, r5
   16f16:	08ad      	lsrs	r5, r5, #2
   16f18:	01ad      	lsls	r5, r5, #6
   16f1a:	f045 0501 	orr.w	r5, r5, #1
   16f1e:	f8ad 5000 	strh.w	r5, [sp]
   16f22:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   16f26:	6809      	ldr	r1, [r1, #0]
   16f28:	f015 ff13 	bl	2cd52 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   16f2c:	6833      	ldr	r3, [r6, #0]
   16f2e:	0759      	lsls	r1, r3, #29
   16f30:	d017      	beq.n	16f62 <z_arm_fatal_error+0x62>
   16f32:	f8ad 5000 	strh.w	r5, [sp]
   16f36:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   16f3a:	68e1      	ldr	r1, [r4, #12]
   16f3c:	480f      	ldr	r0, [pc, #60]	; (16f7c <z_arm_fatal_error+0x7c>)
   16f3e:	f015 ff08 	bl	2cd52 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   16f42:	6833      	ldr	r3, [r6, #0]
   16f44:	075a      	lsls	r2, r3, #29
   16f46:	d00c      	beq.n	16f62 <z_arm_fatal_error+0x62>
   16f48:	69e1      	ldr	r1, [r4, #28]
   16f4a:	480d      	ldr	r0, [pc, #52]	; (16f80 <z_arm_fatal_error+0x80>)
   16f4c:	462a      	mov	r2, r5
   16f4e:	f015 fed3 	bl	2ccf8 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   16f52:	6833      	ldr	r3, [r6, #0]
   16f54:	075b      	lsls	r3, r3, #29
   16f56:	d004      	beq.n	16f62 <z_arm_fatal_error+0x62>
   16f58:	69a1      	ldr	r1, [r4, #24]
   16f5a:	480a      	ldr	r0, [pc, #40]	; (16f84 <z_arm_fatal_error+0x84>)
   16f5c:	462a      	mov	r2, r5
   16f5e:	f015 fecb 	bl	2ccf8 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   16f62:	4621      	mov	r1, r4
   16f64:	4638      	mov	r0, r7
}
   16f66:	b003      	add	sp, #12
   16f68:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
   16f6c:	f00d bbba 	b.w	246e4 <z_fatal_error>
   16f70:	200007ec 	.word	0x200007ec
   16f74:	200007a8 	.word	0x200007a8
   16f78:	00033fe2 	.word	0x00033fe2
   16f7c:	00034011 	.word	0x00034011
   16f80:	00034040 	.word	0x00034040
   16f84:	0003404f 	.word	0x0003404f

00016f88 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   16f88:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   16f8a:	2b00      	cmp	r3, #0
   16f8c:	db08      	blt.n	16fa0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16f8e:	2201      	movs	r2, #1
   16f90:	f000 001f 	and.w	r0, r0, #31
   16f94:	fa02 f000 	lsl.w	r0, r2, r0
   16f98:	095b      	lsrs	r3, r3, #5
   16f9a:	4a02      	ldr	r2, [pc, #8]	; (16fa4 <arch_irq_enable+0x1c>)
   16f9c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   16fa0:	4770      	bx	lr
   16fa2:	bf00      	nop
   16fa4:	e000e100 	.word	0xe000e100

00016fa8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   16fa8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   16faa:	2b00      	cmp	r3, #0
   16fac:	db0d      	blt.n	16fca <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   16fae:	2201      	movs	r2, #1
   16fb0:	095b      	lsrs	r3, r3, #5
   16fb2:	f000 001f 	and.w	r0, r0, #31
   16fb6:	fa02 f000 	lsl.w	r0, r2, r0
   16fba:	3320      	adds	r3, #32
   16fbc:	4a03      	ldr	r2, [pc, #12]	; (16fcc <arch_irq_disable+0x24>)
   16fbe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   16fc2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16fc6:	f3bf 8f6f 	isb	sy
}
   16fca:	4770      	bx	lr
   16fcc:	e000e100 	.word	0xe000e100

00016fd0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   16fd0:	4b05      	ldr	r3, [pc, #20]	; (16fe8 <arch_irq_is_enabled+0x18>)
   16fd2:	0942      	lsrs	r2, r0, #5
   16fd4:	f000 001f 	and.w	r0, r0, #31
   16fd8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   16fdc:	2301      	movs	r3, #1
   16fde:	fa03 f000 	lsl.w	r0, r3, r0
}
   16fe2:	4010      	ands	r0, r2
   16fe4:	4770      	bx	lr
   16fe6:	bf00      	nop
   16fe8:	e000e100 	.word	0xe000e100

00016fec <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   16fec:	07d3      	lsls	r3, r2, #31
{
   16fee:	b570      	push	{r4, r5, r6, lr}
   16ff0:	4605      	mov	r5, r0
   16ff2:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   16ff4:	d425      	bmi.n	17042 <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   16ff6:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   16ff8:	2c07      	cmp	r4, #7
   16ffa:	d90f      	bls.n	1701c <z_arm_irq_priority_set+0x30>
   16ffc:	4a12      	ldr	r2, [pc, #72]	; (17048 <z_arm_irq_priority_set+0x5c>)
   16ffe:	4913      	ldr	r1, [pc, #76]	; (1704c <z_arm_irq_priority_set+0x60>)
   17000:	4813      	ldr	r0, [pc, #76]	; (17050 <z_arm_irq_priority_set+0x64>)
   17002:	2359      	movs	r3, #89	; 0x59
   17004:	f015 fac9 	bl	2c59a <printk>
   17008:	4812      	ldr	r0, [pc, #72]	; (17054 <z_arm_irq_priority_set+0x68>)
   1700a:	4631      	mov	r1, r6
   1700c:	2306      	movs	r3, #6
   1700e:	462a      	mov	r2, r5
   17010:	f015 fac3 	bl	2c59a <printk>
   17014:	480c      	ldr	r0, [pc, #48]	; (17048 <z_arm_irq_priority_set+0x5c>)
   17016:	2159      	movs	r1, #89	; 0x59
   17018:	f015 fd00 	bl	2ca1c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   1701c:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   1701e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17020:	bfac      	ite	ge
   17022:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17026:	4b0c      	ldrlt	r3, [pc, #48]	; (17058 <z_arm_irq_priority_set+0x6c>)
   17028:	ea4f 1444 	mov.w	r4, r4, lsl #5
   1702c:	bfb8      	it	lt
   1702e:	f005 050f 	andlt.w	r5, r5, #15
   17032:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   17034:	bfaa      	itet	ge
   17036:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1703a:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1703c:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   17040:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   17042:	2400      	movs	r4, #0
   17044:	e7ea      	b.n	1701c <z_arm_irq_priority_set+0x30>
   17046:	bf00      	nop
   17048:	0003407d 	.word	0x0003407d
   1704c:	000340b3 	.word	0x000340b3
   17050:	00032486 	.word	0x00032486
   17054:	000340ce 	.word	0x000340ce
   17058:	e000ed14 	.word	0xe000ed14

0001705c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   1705c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   1705e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   17060:	4b04      	ldr	r3, [pc, #16]	; (17074 <_arch_isr_direct_pm+0x18>)
   17062:	69da      	ldr	r2, [r3, #28]
   17064:	b11a      	cbz	r2, 1706e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   17066:	2200      	movs	r2, #0
   17068:	61da      	str	r2, [r3, #28]
		z_pm_save_idle_exit();
   1706a:	f019 f926 	bl	302ba <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   1706e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   17070:	bd08      	pop	{r3, pc}
   17072:	bf00      	nop
   17074:	20002040 	.word	0x20002040

00017078 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   17078:	bf30      	wfi
    b z_SysNmiOnReset
   1707a:	f7ff bffd 	b.w	17078 <z_SysNmiOnReset>
   1707e:	bf00      	nop

00017080 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   17080:	4a0b      	ldr	r2, [pc, #44]	; (170b0 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   17082:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   17084:	4b0b      	ldr	r3, [pc, #44]	; (170b4 <z_arm_prep_c+0x34>)
   17086:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   1708a:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   1708c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17090:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   17094:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   17098:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   1709c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   170a0:	f00d fbfc 	bl	2489c <z_bss_zero>
	z_data_copy();
   170a4:	f010 ffc8 	bl	28038 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   170a8:	f000 fc60 	bl	1796c <z_arm_interrupt_init>
	z_cstart();
   170ac:	f00d fc00 	bl	248b0 <z_cstart>
   170b0:	00001000 	.word	0x00001000
   170b4:	e000ed00 	.word	0xe000ed00

000170b8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   170b8:	4a0a      	ldr	r2, [pc, #40]	; (170e4 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   170ba:	490b      	ldr	r1, [pc, #44]	; (170e8 <arch_swap+0x30>)
	_current->arch.basepri = key;
   170bc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   170be:	6809      	ldr	r1, [r1, #0]
   170c0:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   170c4:	4909      	ldr	r1, [pc, #36]	; (170ec <arch_swap+0x34>)
	_current->arch.basepri = key;
   170c6:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   170ca:	684b      	ldr	r3, [r1, #4]
   170cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   170d0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   170d2:	2300      	movs	r3, #0
   170d4:	f383 8811 	msr	BASEPRI, r3
   170d8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   170dc:	6893      	ldr	r3, [r2, #8]
}
   170de:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
   170e2:	4770      	bx	lr
   170e4:	20002040 	.word	0x20002040
   170e8:	00031edc 	.word	0x00031edc
   170ec:	e000ed00 	.word	0xe000ed00

000170f0 <z_arm_pendsv>:

SECTION_FUNC(TEXT, z_arm_pendsv)

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
    /* Register the context switch */
    push {r0, lr}
   170f0:	b501      	push	{r0, lr}
    bl z_thread_mark_switched_out
   170f2:	f019 f8cf 	bl	30294 <z_thread_mark_switched_out>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
   170f6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   170fa:	4916      	ldr	r1, [pc, #88]	; (17154 <z_arm_pendsv+0x64>)
    ldr r2, [r1, #_kernel_offset_to_current]
   170fc:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   170fe:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   17102:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   17104:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   17108:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1710c:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   1710e:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   17112:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   17116:	4f10      	ldr	r7, [pc, #64]	; (17158 <z_arm_pendsv+0x68>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   17118:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   1711c:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
   1711e:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   17120:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   17122:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    movs r3, #0
   17126:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   17128:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   1712c:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   17130:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   17132:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   17134:	f000 fcf4 	bl	17b20 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   17138:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   1713c:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   17140:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   17144:	f38c 8809 	msr	PSP, ip
    pop {r2, lr}
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
    /* Register the context switch */
    push {r0, lr}
   17148:	b501      	push	{r0, lr}
    bl z_thread_mark_switched_in
   1714a:	f00e f935 	bl	253b8 <z_thread_mark_switched_in>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
   1714e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   17152:	4770      	bx	lr
    ldr r1, =_kernel
   17154:	20002040 	.word	0x20002040
    ldr v4, =_SCS_ICSR
   17158:	e000ed04 	.word	0xe000ed04

0001715c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   1715c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   17160:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   17162:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   17166:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   1716a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   1716c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   17170:	2902      	cmp	r1, #2
    beq _oops
   17172:	d0ff      	beq.n	17174 <_oops>

00017174 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   17174:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   17176:	f017 f805 	bl	2e184 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   1717a:	bd01      	pop	{r0, pc}

0001717c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   1717c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   17180:	9b00      	ldr	r3, [sp, #0]
   17182:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   17186:	490a      	ldr	r1, [pc, #40]	; (171b0 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   17188:	9b01      	ldr	r3, [sp, #4]
   1718a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   1718e:	9b02      	ldr	r3, [sp, #8]
   17190:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   17194:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   17198:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   1719c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   171a0:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   171a4:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   171a6:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   171a8:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   171aa:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   171ae:	4770      	bx	lr
   171b0:	0002c677 	.word	0x0002c677

000171b4 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   171b4:	4a0c      	ldr	r2, [pc, #48]	; (171e8 <z_check_thread_stack_fail+0x34>)
{
   171b6:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   171b8:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   171ba:	b198      	cbz	r0, 171e4 <z_check_thread_stack_fail+0x30>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   171bc:	f113 0f16 	cmn.w	r3, #22
   171c0:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   171c4:	d005      	beq.n	171d2 <z_check_thread_stack_fail+0x1e>
   171c6:	f1a0 0220 	sub.w	r2, r0, #32
   171ca:	429a      	cmp	r2, r3
   171cc:	d806      	bhi.n	171dc <z_check_thread_stack_fail+0x28>
   171ce:	4283      	cmp	r3, r0
   171d0:	d204      	bcs.n	171dc <z_check_thread_stack_fail+0x28>
   171d2:	4281      	cmp	r1, r0
   171d4:	bf2c      	ite	cs
   171d6:	2100      	movcs	r1, #0
   171d8:	2101      	movcc	r1, #1
   171da:	e000      	b.n	171de <z_check_thread_stack_fail+0x2a>
   171dc:	2100      	movs	r1, #0
   171de:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   171e0:	bf08      	it	eq
   171e2:	2000      	moveq	r0, #0
}
   171e4:	4770      	bx	lr
   171e6:	bf00      	nop
   171e8:	20002040 	.word	0x20002040

000171ec <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   171ec:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   171ee:	4b0b      	ldr	r3, [pc, #44]	; (1721c <arch_switch_to_main_thread+0x30>)
{
   171f0:	4604      	mov	r4, r0
	_current = main_thread;
   171f2:	6098      	str	r0, [r3, #8]
{
   171f4:	460e      	mov	r6, r1
   171f6:	4615      	mov	r5, r2

	z_arm_tls_ptr = main_thread->tls;
#endif

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_in();
   171f8:	f00e f8de 	bl	253b8 <z_thread_mark_switched_in>
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   171fc:	4620      	mov	r0, r4
   171fe:	f000 fc8f 	bl	17b20 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   17202:	4628      	mov	r0, r5
   17204:	f386 8809 	msr	PSP, r6
   17208:	2100      	movs	r1, #0
   1720a:	b663      	cpsie	if
   1720c:	f381 8811 	msr	BASEPRI, r1
   17210:	f3bf 8f6f 	isb	sy
   17214:	2200      	movs	r2, #0
   17216:	2300      	movs	r3, #0
   17218:	f015 fa2d 	bl	2c676 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   1721c:	20002040 	.word	0x20002040

00017220 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   17220:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   17222:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   17224:	4a0b      	ldr	r2, [pc, #44]	; (17254 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   17226:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
   17228:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   1722a:	bf1e      	ittt	ne
	movne	r1, #0
   1722c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   1722e:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
   17230:	f019 f843 	blne	302ba <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   17234:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   17236:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   1723a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   1723e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   17242:	4905      	ldr	r1, [pc, #20]	; (17258 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   17244:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   17246:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   17248:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   1724a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   1724e:	4903      	ldr	r1, [pc, #12]	; (1725c <_isr_wrapper+0x3c>)
	bx r1
   17250:	4708      	bx	r1
   17252:	0000      	.short	0x0000
	ldr r2, =_kernel
   17254:	20002040 	.word	0x20002040
	ldr r1, =_sw_isr_table
   17258:	00030a20 	.word	0x00030a20
	ldr r1, =z_arm_int_exit
   1725c:	00017261 	.word	0x00017261

00017260 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   17260:	4b04      	ldr	r3, [pc, #16]	; (17274 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   17262:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   17264:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
   17266:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   17268:	d003      	beq.n	17272 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   1726a:	4903      	ldr	r1, [pc, #12]	; (17278 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   1726c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   17270:	600a      	str	r2, [r1, #0]

00017272 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   17272:	4770      	bx	lr
	ldr r3, =_kernel
   17274:	20002040 	.word	0x20002040
	ldr r1, =_SCS_ICSR
   17278:	e000ed04 	.word	0xe000ed04

0001727c <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   1727c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   17280:	4c59      	ldr	r4, [pc, #356]	; (173e8 <mem_manage_fault+0x16c>)
   17282:	6823      	ldr	r3, [r4, #0]
{
   17284:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   17286:	0759      	lsls	r1, r3, #29
{
   17288:	4607      	mov	r7, r0
   1728a:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   1728c:	d008      	beq.n	172a0 <mem_manage_fault+0x24>
   1728e:	4957      	ldr	r1, [pc, #348]	; (173ec <mem_manage_fault+0x170>)
   17290:	4857      	ldr	r0, [pc, #348]	; (173f0 <mem_manage_fault+0x174>)
   17292:	1a61      	subs	r1, r4, r1
   17294:	0889      	lsrs	r1, r1, #2
   17296:	0189      	lsls	r1, r1, #6
   17298:	f041 0101 	orr.w	r1, r1, #1
   1729c:	f015 fd1f 	bl	2ccde <log_0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   172a0:	4b54      	ldr	r3, [pc, #336]	; (173f4 <mem_manage_fault+0x178>)
   172a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   172a4:	06da      	lsls	r2, r3, #27
   172a6:	d50b      	bpl.n	172c0 <mem_manage_fault+0x44>
		PR_FAULT_INFO("  Stacking error (context area might be"
   172a8:	6823      	ldr	r3, [r4, #0]
   172aa:	075b      	lsls	r3, r3, #29
   172ac:	d008      	beq.n	172c0 <mem_manage_fault+0x44>
   172ae:	494f      	ldr	r1, [pc, #316]	; (173ec <mem_manage_fault+0x170>)
   172b0:	4851      	ldr	r0, [pc, #324]	; (173f8 <mem_manage_fault+0x17c>)
   172b2:	1a61      	subs	r1, r4, r1
   172b4:	0889      	lsrs	r1, r1, #2
   172b6:	0189      	lsls	r1, r1, #6
   172b8:	f041 0101 	orr.w	r1, r1, #1
   172bc:	f015 fd0f 	bl	2ccde <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   172c0:	4b4c      	ldr	r3, [pc, #304]	; (173f4 <mem_manage_fault+0x178>)
   172c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   172c4:	071e      	lsls	r6, r3, #28
   172c6:	d50b      	bpl.n	172e0 <mem_manage_fault+0x64>
		PR_FAULT_INFO("  Unstacking error");
   172c8:	6823      	ldr	r3, [r4, #0]
   172ca:	0758      	lsls	r0, r3, #29
   172cc:	d008      	beq.n	172e0 <mem_manage_fault+0x64>
   172ce:	4947      	ldr	r1, [pc, #284]	; (173ec <mem_manage_fault+0x170>)
   172d0:	484a      	ldr	r0, [pc, #296]	; (173fc <mem_manage_fault+0x180>)
   172d2:	1a61      	subs	r1, r4, r1
   172d4:	0889      	lsrs	r1, r1, #2
   172d6:	0189      	lsls	r1, r1, #6
   172d8:	f041 0101 	orr.w	r1, r1, #1
   172dc:	f015 fcff 	bl	2ccde <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   172e0:	4b44      	ldr	r3, [pc, #272]	; (173f4 <mem_manage_fault+0x178>)
   172e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   172e4:	0799      	lsls	r1, r3, #30
   172e6:	d435      	bmi.n	17354 <mem_manage_fault+0xd8>
	uint32_t mmfar = -EINVAL;
   172e8:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   172ec:	4b41      	ldr	r3, [pc, #260]	; (173f4 <mem_manage_fault+0x178>)
   172ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   172f0:	07d9      	lsls	r1, r3, #31
   172f2:	d50b      	bpl.n	1730c <mem_manage_fault+0x90>
		PR_FAULT_INFO("  Instruction Access Violation");
   172f4:	6823      	ldr	r3, [r4, #0]
   172f6:	075a      	lsls	r2, r3, #29
   172f8:	d008      	beq.n	1730c <mem_manage_fault+0x90>
   172fa:	493c      	ldr	r1, [pc, #240]	; (173ec <mem_manage_fault+0x170>)
   172fc:	4840      	ldr	r0, [pc, #256]	; (17400 <mem_manage_fault+0x184>)
   172fe:	1a61      	subs	r1, r4, r1
   17300:	0889      	lsrs	r1, r1, #2
   17302:	0189      	lsls	r1, r1, #6
   17304:	f041 0101 	orr.w	r1, r1, #1
   17308:	f015 fce9 	bl	2ccde <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   1730c:	4b39      	ldr	r3, [pc, #228]	; (173f4 <mem_manage_fault+0x178>)
   1730e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17310:	069b      	lsls	r3, r3, #26
   17312:	d50b      	bpl.n	1732c <mem_manage_fault+0xb0>
		PR_FAULT_INFO(
   17314:	6823      	ldr	r3, [r4, #0]
   17316:	0758      	lsls	r0, r3, #29
   17318:	d008      	beq.n	1732c <mem_manage_fault+0xb0>
   1731a:	4934      	ldr	r1, [pc, #208]	; (173ec <mem_manage_fault+0x170>)
   1731c:	4839      	ldr	r0, [pc, #228]	; (17404 <mem_manage_fault+0x188>)
   1731e:	1a61      	subs	r1, r4, r1
   17320:	0889      	lsrs	r1, r1, #2
   17322:	0189      	lsls	r1, r1, #6
   17324:	f041 0101 	orr.w	r1, r1, #1
   17328:	f015 fcd9 	bl	2ccde <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1732c:	4b31      	ldr	r3, [pc, #196]	; (173f4 <mem_manage_fault+0x178>)
   1732e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   17330:	f012 0f10 	tst.w	r2, #16
   17334:	4698      	mov	r8, r3
   17336:	d134      	bne.n	173a2 <mem_manage_fault+0x126>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   17338:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   1733a:	0799      	lsls	r1, r3, #30
   1733c:	d431      	bmi.n	173a2 <mem_manage_fault+0x126>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   1733e:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   17340:	4a2c      	ldr	r2, [pc, #176]	; (173f4 <mem_manage_fault+0x178>)
   17342:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17344:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   17348:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   1734a:	2300      	movs	r3, #0
   1734c:	702b      	strb	r3, [r5, #0]

	return reason;
}
   1734e:	4620      	mov	r0, r4
   17350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   17354:	6823      	ldr	r3, [r4, #0]
   17356:	075a      	lsls	r2, r3, #29
   17358:	d008      	beq.n	1736c <mem_manage_fault+0xf0>
   1735a:	4924      	ldr	r1, [pc, #144]	; (173ec <mem_manage_fault+0x170>)
   1735c:	482a      	ldr	r0, [pc, #168]	; (17408 <mem_manage_fault+0x18c>)
   1735e:	1a61      	subs	r1, r4, r1
   17360:	0889      	lsrs	r1, r1, #2
   17362:	0189      	lsls	r1, r1, #6
   17364:	f041 0101 	orr.w	r1, r1, #1
   17368:	f015 fcb9 	bl	2ccde <log_0>
		uint32_t temp = SCB->MMFAR;
   1736c:	4b21      	ldr	r3, [pc, #132]	; (173f4 <mem_manage_fault+0x178>)
   1736e:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   17370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17372:	061b      	lsls	r3, r3, #24
   17374:	d5b8      	bpl.n	172e8 <mem_manage_fault+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   17376:	6823      	ldr	r3, [r4, #0]
   17378:	0758      	lsls	r0, r3, #29
   1737a:	d009      	beq.n	17390 <mem_manage_fault+0x114>
   1737c:	4a1b      	ldr	r2, [pc, #108]	; (173ec <mem_manage_fault+0x170>)
   1737e:	4823      	ldr	r0, [pc, #140]	; (1740c <mem_manage_fault+0x190>)
   17380:	1aa2      	subs	r2, r4, r2
   17382:	0892      	lsrs	r2, r2, #2
   17384:	0192      	lsls	r2, r2, #6
   17386:	f042 0201 	orr.w	r2, r2, #1
   1738a:	4631      	mov	r1, r6
   1738c:	f015 fcb4 	bl	2ccf8 <log_1>
			if (from_hard_fault != 0) {
   17390:	f1b8 0f00 	cmp.w	r8, #0
   17394:	d0aa      	beq.n	172ec <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   17396:	4a17      	ldr	r2, [pc, #92]	; (173f4 <mem_manage_fault+0x178>)
   17398:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1739a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   1739e:	6293      	str	r3, [r2, #40]	; 0x28
   173a0:	e7a4      	b.n	172ec <mem_manage_fault+0x70>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   173a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
   173a6:	051a      	lsls	r2, r3, #20
   173a8:	d5c9      	bpl.n	1733e <mem_manage_fault+0xc2>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   173aa:	4639      	mov	r1, r7
   173ac:	4630      	mov	r0, r6
   173ae:	f7ff ff01 	bl	171b4 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   173b2:	4604      	mov	r4, r0
   173b4:	b118      	cbz	r0, 173be <mem_manage_fault+0x142>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   173b6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   173ba:	2402      	movs	r4, #2
   173bc:	e7c0      	b.n	17340 <mem_manage_fault+0xc4>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   173be:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   173c2:	06db      	lsls	r3, r3, #27
   173c4:	d5bb      	bpl.n	1733e <mem_manage_fault+0xc2>
   173c6:	4a12      	ldr	r2, [pc, #72]	; (17410 <mem_manage_fault+0x194>)
   173c8:	4912      	ldr	r1, [pc, #72]	; (17414 <mem_manage_fault+0x198>)
   173ca:	4813      	ldr	r0, [pc, #76]	; (17418 <mem_manage_fault+0x19c>)
   173cc:	f240 1349 	movw	r3, #329	; 0x149
   173d0:	f015 f8e3 	bl	2c59a <printk>
   173d4:	4811      	ldr	r0, [pc, #68]	; (1741c <mem_manage_fault+0x1a0>)
   173d6:	f015 f8e0 	bl	2c59a <printk>
   173da:	480d      	ldr	r0, [pc, #52]	; (17410 <mem_manage_fault+0x194>)
   173dc:	f240 1149 	movw	r1, #329	; 0x149
   173e0:	f015 fb1c 	bl	2ca1c <assert_post_action>
   173e4:	e7ac      	b.n	17340 <mem_manage_fault+0xc4>
   173e6:	bf00      	nop
   173e8:	200007ec 	.word	0x200007ec
   173ec:	200007a8 	.word	0x200007a8
   173f0:	0003410e 	.word	0x0003410e
   173f4:	e000ed00 	.word	0xe000ed00
   173f8:	00034124 	.word	0x00034124
   173fc:	00034157 	.word	0x00034157
   17400:	00034198 	.word	0x00034198
   17404:	000341b7 	.word	0x000341b7
   17408:	0003416a 	.word	0x0003416a
   1740c:	00034182 	.word	0x00034182
   17410:	000341e6 	.word	0x000341e6
   17414:	00034220 	.word	0x00034220
   17418:	00032486 	.word	0x00032486
   1741c:	0003426a 	.word	0x0003426a

00017420 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   17420:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   17422:	4c3b      	ldr	r4, [pc, #236]	; (17510 <usage_fault.isra.0+0xf0>)
   17424:	6823      	ldr	r3, [r4, #0]
   17426:	075b      	lsls	r3, r3, #29
   17428:	d008      	beq.n	1743c <usage_fault.isra.0+0x1c>
   1742a:	493a      	ldr	r1, [pc, #232]	; (17514 <usage_fault.isra.0+0xf4>)
   1742c:	483a      	ldr	r0, [pc, #232]	; (17518 <usage_fault.isra.0+0xf8>)
   1742e:	1a61      	subs	r1, r4, r1
   17430:	0889      	lsrs	r1, r1, #2
   17432:	0189      	lsls	r1, r1, #6
   17434:	f041 0101 	orr.w	r1, r1, #1
   17438:	f015 fc51 	bl	2ccde <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   1743c:	4b37      	ldr	r3, [pc, #220]	; (1751c <usage_fault.isra.0+0xfc>)
   1743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17440:	0198      	lsls	r0, r3, #6
   17442:	d50b      	bpl.n	1745c <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Division by zero");
   17444:	6823      	ldr	r3, [r4, #0]
   17446:	0759      	lsls	r1, r3, #29
   17448:	d008      	beq.n	1745c <usage_fault.isra.0+0x3c>
   1744a:	4932      	ldr	r1, [pc, #200]	; (17514 <usage_fault.isra.0+0xf4>)
   1744c:	4834      	ldr	r0, [pc, #208]	; (17520 <usage_fault.isra.0+0x100>)
   1744e:	1a61      	subs	r1, r4, r1
   17450:	0889      	lsrs	r1, r1, #2
   17452:	0189      	lsls	r1, r1, #6
   17454:	f041 0101 	orr.w	r1, r1, #1
   17458:	f015 fc41 	bl	2ccde <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   1745c:	4b2f      	ldr	r3, [pc, #188]	; (1751c <usage_fault.isra.0+0xfc>)
   1745e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17460:	01da      	lsls	r2, r3, #7
   17462:	d50b      	bpl.n	1747c <usage_fault.isra.0+0x5c>
		PR_FAULT_INFO("  Unaligned memory access");
   17464:	6823      	ldr	r3, [r4, #0]
   17466:	075b      	lsls	r3, r3, #29
   17468:	d008      	beq.n	1747c <usage_fault.isra.0+0x5c>
   1746a:	492a      	ldr	r1, [pc, #168]	; (17514 <usage_fault.isra.0+0xf4>)
   1746c:	482d      	ldr	r0, [pc, #180]	; (17524 <usage_fault.isra.0+0x104>)
   1746e:	1a61      	subs	r1, r4, r1
   17470:	0889      	lsrs	r1, r1, #2
   17472:	0189      	lsls	r1, r1, #6
   17474:	f041 0101 	orr.w	r1, r1, #1
   17478:	f015 fc31 	bl	2ccde <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   1747c:	4b27      	ldr	r3, [pc, #156]	; (1751c <usage_fault.isra.0+0xfc>)
   1747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17480:	0318      	lsls	r0, r3, #12
   17482:	d50b      	bpl.n	1749c <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  No coprocessor instructions");
   17484:	6823      	ldr	r3, [r4, #0]
   17486:	0759      	lsls	r1, r3, #29
   17488:	d008      	beq.n	1749c <usage_fault.isra.0+0x7c>
   1748a:	4922      	ldr	r1, [pc, #136]	; (17514 <usage_fault.isra.0+0xf4>)
   1748c:	4826      	ldr	r0, [pc, #152]	; (17528 <usage_fault.isra.0+0x108>)
   1748e:	1a61      	subs	r1, r4, r1
   17490:	0889      	lsrs	r1, r1, #2
   17492:	0189      	lsls	r1, r1, #6
   17494:	f041 0101 	orr.w	r1, r1, #1
   17498:	f015 fc21 	bl	2ccde <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   1749c:	4b1f      	ldr	r3, [pc, #124]	; (1751c <usage_fault.isra.0+0xfc>)
   1749e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   174a0:	035a      	lsls	r2, r3, #13
   174a2:	d50b      	bpl.n	174bc <usage_fault.isra.0+0x9c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   174a4:	6823      	ldr	r3, [r4, #0]
   174a6:	075b      	lsls	r3, r3, #29
   174a8:	d008      	beq.n	174bc <usage_fault.isra.0+0x9c>
   174aa:	491a      	ldr	r1, [pc, #104]	; (17514 <usage_fault.isra.0+0xf4>)
   174ac:	481f      	ldr	r0, [pc, #124]	; (1752c <usage_fault.isra.0+0x10c>)
   174ae:	1a61      	subs	r1, r4, r1
   174b0:	0889      	lsrs	r1, r1, #2
   174b2:	0189      	lsls	r1, r1, #6
   174b4:	f041 0101 	orr.w	r1, r1, #1
   174b8:	f015 fc11 	bl	2ccde <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   174bc:	4b17      	ldr	r3, [pc, #92]	; (1751c <usage_fault.isra.0+0xfc>)
   174be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   174c0:	0398      	lsls	r0, r3, #14
   174c2:	d50b      	bpl.n	174dc <usage_fault.isra.0+0xbc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   174c4:	6823      	ldr	r3, [r4, #0]
   174c6:	0759      	lsls	r1, r3, #29
   174c8:	d008      	beq.n	174dc <usage_fault.isra.0+0xbc>
   174ca:	4912      	ldr	r1, [pc, #72]	; (17514 <usage_fault.isra.0+0xf4>)
   174cc:	4818      	ldr	r0, [pc, #96]	; (17530 <usage_fault.isra.0+0x110>)
   174ce:	1a61      	subs	r1, r4, r1
   174d0:	0889      	lsrs	r1, r1, #2
   174d2:	0189      	lsls	r1, r1, #6
   174d4:	f041 0101 	orr.w	r1, r1, #1
   174d8:	f015 fc01 	bl	2ccde <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   174dc:	4b0f      	ldr	r3, [pc, #60]	; (1751c <usage_fault.isra.0+0xfc>)
   174de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   174e0:	03da      	lsls	r2, r3, #15
   174e2:	d50b      	bpl.n	174fc <usage_fault.isra.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   174e4:	6823      	ldr	r3, [r4, #0]
   174e6:	075b      	lsls	r3, r3, #29
   174e8:	d008      	beq.n	174fc <usage_fault.isra.0+0xdc>
   174ea:	490a      	ldr	r1, [pc, #40]	; (17514 <usage_fault.isra.0+0xf4>)
   174ec:	4811      	ldr	r0, [pc, #68]	; (17534 <usage_fault.isra.0+0x114>)
   174ee:	1a61      	subs	r1, r4, r1
   174f0:	0889      	lsrs	r1, r1, #2
   174f2:	0189      	lsls	r1, r1, #6
   174f4:	f041 0101 	orr.w	r1, r1, #1
   174f8:	f015 fbf1 	bl	2ccde <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   174fc:	4a07      	ldr	r2, [pc, #28]	; (1751c <usage_fault.isra.0+0xfc>)
   174fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
   17500:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   17504:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   17508:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   1750a:	2000      	movs	r0, #0
   1750c:	bd10      	pop	{r4, pc}
   1750e:	bf00      	nop
   17510:	200007ec 	.word	0x200007ec
   17514:	200007a8 	.word	0x200007a8
   17518:	0003428d 	.word	0x0003428d
   1751c:	e000ed00 	.word	0xe000ed00
   17520:	000342a5 	.word	0x000342a5
   17524:	000342b8 	.word	0x000342b8
   17528:	000342d2 	.word	0x000342d2
   1752c:	000342f0 	.word	0x000342f0
   17530:	00034315 	.word	0x00034315
   17534:	0003432f 	.word	0x0003432f

00017538 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   17538:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
   1753a:	4c46      	ldr	r4, [pc, #280]	; (17654 <bus_fault.isra.0+0x11c>)
   1753c:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   1753e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   17540:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   17542:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   17544:	d008      	beq.n	17558 <bus_fault.isra.0+0x20>
   17546:	4944      	ldr	r1, [pc, #272]	; (17658 <bus_fault.isra.0+0x120>)
   17548:	4844      	ldr	r0, [pc, #272]	; (1765c <bus_fault.isra.0+0x124>)
   1754a:	1a61      	subs	r1, r4, r1
   1754c:	0889      	lsrs	r1, r1, #2
   1754e:	0189      	lsls	r1, r1, #6
   17550:	f041 0101 	orr.w	r1, r1, #1
   17554:	f015 fbc3 	bl	2ccde <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   17558:	4b41      	ldr	r3, [pc, #260]	; (17660 <bus_fault.isra.0+0x128>)
   1755a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1755c:	04da      	lsls	r2, r3, #19
   1755e:	d50b      	bpl.n	17578 <bus_fault.isra.0+0x40>
		PR_FAULT_INFO("  Stacking error");
   17560:	6823      	ldr	r3, [r4, #0]
   17562:	075b      	lsls	r3, r3, #29
   17564:	d008      	beq.n	17578 <bus_fault.isra.0+0x40>
   17566:	493c      	ldr	r1, [pc, #240]	; (17658 <bus_fault.isra.0+0x120>)
   17568:	483e      	ldr	r0, [pc, #248]	; (17664 <bus_fault.isra.0+0x12c>)
   1756a:	1a61      	subs	r1, r4, r1
   1756c:	0889      	lsrs	r1, r1, #2
   1756e:	0189      	lsls	r1, r1, #6
   17570:	f041 0101 	orr.w	r1, r1, #1
   17574:	f015 fbb3 	bl	2ccde <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   17578:	4b39      	ldr	r3, [pc, #228]	; (17660 <bus_fault.isra.0+0x128>)
   1757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1757c:	0518      	lsls	r0, r3, #20
   1757e:	d50b      	bpl.n	17598 <bus_fault.isra.0+0x60>
		PR_FAULT_INFO("  Unstacking error");
   17580:	6823      	ldr	r3, [r4, #0]
   17582:	0759      	lsls	r1, r3, #29
   17584:	d008      	beq.n	17598 <bus_fault.isra.0+0x60>
   17586:	4934      	ldr	r1, [pc, #208]	; (17658 <bus_fault.isra.0+0x120>)
   17588:	4837      	ldr	r0, [pc, #220]	; (17668 <bus_fault.isra.0+0x130>)
   1758a:	1a61      	subs	r1, r4, r1
   1758c:	0889      	lsrs	r1, r1, #2
   1758e:	0189      	lsls	r1, r1, #6
   17590:	f041 0101 	orr.w	r1, r1, #1
   17594:	f015 fba3 	bl	2ccde <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   17598:	4b31      	ldr	r3, [pc, #196]	; (17660 <bus_fault.isra.0+0x128>)
   1759a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1759c:	059a      	lsls	r2, r3, #22
   1759e:	d522      	bpl.n	175e6 <bus_fault.isra.0+0xae>
		PR_FAULT_INFO("  Precise data bus error");
   175a0:	6823      	ldr	r3, [r4, #0]
   175a2:	075b      	lsls	r3, r3, #29
   175a4:	d008      	beq.n	175b8 <bus_fault.isra.0+0x80>
   175a6:	492c      	ldr	r1, [pc, #176]	; (17658 <bus_fault.isra.0+0x120>)
   175a8:	4830      	ldr	r0, [pc, #192]	; (1766c <bus_fault.isra.0+0x134>)
   175aa:	1a61      	subs	r1, r4, r1
   175ac:	0889      	lsrs	r1, r1, #2
   175ae:	0189      	lsls	r1, r1, #6
   175b0:	f041 0101 	orr.w	r1, r1, #1
   175b4:	f015 fb93 	bl	2ccde <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   175b8:	4b29      	ldr	r3, [pc, #164]	; (17660 <bus_fault.isra.0+0x128>)
   175ba:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   175bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   175be:	0418      	lsls	r0, r3, #16
   175c0:	d511      	bpl.n	175e6 <bus_fault.isra.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   175c2:	6823      	ldr	r3, [r4, #0]
   175c4:	075a      	lsls	r2, r3, #29
   175c6:	d008      	beq.n	175da <bus_fault.isra.0+0xa2>
   175c8:	4a23      	ldr	r2, [pc, #140]	; (17658 <bus_fault.isra.0+0x120>)
   175ca:	4829      	ldr	r0, [pc, #164]	; (17670 <bus_fault.isra.0+0x138>)
   175cc:	1aa2      	subs	r2, r4, r2
   175ce:	0892      	lsrs	r2, r2, #2
   175d0:	0192      	lsls	r2, r2, #6
   175d2:	f042 0201 	orr.w	r2, r2, #1
   175d6:	f015 fb8f 	bl	2ccf8 <log_1>
			if (from_hard_fault != 0) {
   175da:	b126      	cbz	r6, 175e6 <bus_fault.isra.0+0xae>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   175dc:	4a20      	ldr	r2, [pc, #128]	; (17660 <bus_fault.isra.0+0x128>)
   175de:	6a93      	ldr	r3, [r2, #40]	; 0x28
   175e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   175e4:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   175e6:	4b1e      	ldr	r3, [pc, #120]	; (17660 <bus_fault.isra.0+0x128>)
   175e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   175ea:	055b      	lsls	r3, r3, #21
   175ec:	d50b      	bpl.n	17606 <bus_fault.isra.0+0xce>
		PR_FAULT_INFO("  Imprecise data bus error");
   175ee:	6823      	ldr	r3, [r4, #0]
   175f0:	075e      	lsls	r6, r3, #29
   175f2:	d008      	beq.n	17606 <bus_fault.isra.0+0xce>
   175f4:	4918      	ldr	r1, [pc, #96]	; (17658 <bus_fault.isra.0+0x120>)
   175f6:	481f      	ldr	r0, [pc, #124]	; (17674 <bus_fault.isra.0+0x13c>)
   175f8:	1a61      	subs	r1, r4, r1
   175fa:	0889      	lsrs	r1, r1, #2
   175fc:	0189      	lsls	r1, r1, #6
   175fe:	f041 0101 	orr.w	r1, r1, #1
   17602:	f015 fb6c 	bl	2ccde <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   17606:	4b16      	ldr	r3, [pc, #88]	; (17660 <bus_fault.isra.0+0x128>)
   17608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1760a:	05d0      	lsls	r0, r2, #23
   1760c:	d513      	bpl.n	17636 <bus_fault.isra.0+0xfe>
		PR_FAULT_INFO("  Instruction bus error");
   1760e:	6823      	ldr	r3, [r4, #0]
   17610:	0759      	lsls	r1, r3, #29
   17612:	d008      	beq.n	17626 <bus_fault.isra.0+0xee>
   17614:	4910      	ldr	r1, [pc, #64]	; (17658 <bus_fault.isra.0+0x120>)
   17616:	4818      	ldr	r0, [pc, #96]	; (17678 <bus_fault.isra.0+0x140>)
   17618:	1a64      	subs	r4, r4, r1
   1761a:	08a4      	lsrs	r4, r4, #2
   1761c:	01a4      	lsls	r4, r4, #6
   1761e:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   17622:	f015 fb5c 	bl	2ccde <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   17626:	4a0e      	ldr	r2, [pc, #56]	; (17660 <bus_fault.isra.0+0x128>)
   17628:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   1762a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   1762c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   17630:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   17632:	7028      	strb	r0, [r5, #0]
}
   17634:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   17636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   17638:	049a      	lsls	r2, r3, #18
   1763a:	d5f4      	bpl.n	17626 <bus_fault.isra.0+0xee>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   1763c:	6823      	ldr	r3, [r4, #0]
   1763e:	075b      	lsls	r3, r3, #29
   17640:	d0f1      	beq.n	17626 <bus_fault.isra.0+0xee>
   17642:	4905      	ldr	r1, [pc, #20]	; (17658 <bus_fault.isra.0+0x120>)
   17644:	480d      	ldr	r0, [pc, #52]	; (1767c <bus_fault.isra.0+0x144>)
   17646:	1a64      	subs	r4, r4, r1
   17648:	08a4      	lsrs	r4, r4, #2
   1764a:	01a4      	lsls	r4, r4, #6
   1764c:	f044 0101 	orr.w	r1, r4, #1
   17650:	e7e7      	b.n	17622 <bus_fault.isra.0+0xea>
   17652:	bf00      	nop
   17654:	200007ec 	.word	0x200007ec
   17658:	200007a8 	.word	0x200007a8
   1765c:	0003435a 	.word	0x0003435a
   17660:	e000ed00 	.word	0xe000ed00
   17664:	00034370 	.word	0x00034370
   17668:	00034157 	.word	0x00034157
   1766c:	00034381 	.word	0x00034381
   17670:	0003439a 	.word	0x0003439a
   17674:	000343af 	.word	0x000343af
   17678:	000343ca 	.word	0x000343ca
   1767c:	000341b7 	.word	0x000341b7

00017680 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   17680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   17684:	4b9a      	ldr	r3, [pc, #616]	; (178f0 <z_arm_fault+0x270>)
   17686:	685e      	ldr	r6, [r3, #4]
{
   17688:	b08a      	sub	sp, #40	; 0x28
   1768a:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1768c:	f3c6 0408 	ubfx	r4, r6, #0, #9
   17690:	2700      	movs	r7, #0
   17692:	f387 8811 	msr	BASEPRI, r7
   17696:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   1769a:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   1769e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   176a2:	d111      	bne.n	176c8 <z_arm_fault+0x48>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   176a4:	f002 030c 	and.w	r3, r2, #12
   176a8:	2b08      	cmp	r3, #8
   176aa:	d11e      	bne.n	176ea <z_arm_fault+0x6a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   176ac:	4991      	ldr	r1, [pc, #580]	; (178f4 <z_arm_fault+0x274>)
   176ae:	680b      	ldr	r3, [r1, #0]
   176b0:	f013 0307 	ands.w	r3, r3, #7
   176b4:	d032      	beq.n	1771c <z_arm_fault+0x9c>
   176b6:	4b90      	ldr	r3, [pc, #576]	; (178f8 <z_arm_fault+0x278>)
   176b8:	4890      	ldr	r0, [pc, #576]	; (178fc <z_arm_fault+0x27c>)
   176ba:	1ac9      	subs	r1, r1, r3
   176bc:	0889      	lsrs	r1, r1, #2
   176be:	0189      	lsls	r1, r1, #6
   176c0:	f041 0101 	orr.w	r1, r1, #1
   176c4:	f015 fb0b 	bl	2ccde <log_0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   176c8:	4a8d      	ldr	r2, [pc, #564]	; (17900 <z_arm_fault+0x280>)
   176ca:	498e      	ldr	r1, [pc, #568]	; (17904 <z_arm_fault+0x284>)
   176cc:	488e      	ldr	r0, [pc, #568]	; (17908 <z_arm_fault+0x288>)
   176ce:	f240 33f2 	movw	r3, #1010	; 0x3f2
   176d2:	f014 ff62 	bl	2c59a <printk>
   176d6:	488d      	ldr	r0, [pc, #564]	; (1790c <z_arm_fault+0x28c>)
   176d8:	f014 ff5f 	bl	2c59a <printk>
   176dc:	4888      	ldr	r0, [pc, #544]	; (17900 <z_arm_fault+0x280>)
   176de:	f240 31f2 	movw	r1, #1010	; 0x3f2
   176e2:	f015 f99b 	bl	2ca1c <assert_post_action>
   176e6:	2500      	movs	r5, #0
   176e8:	e005      	b.n	176f6 <z_arm_fault+0x76>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   176ea:	0713      	lsls	r3, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   176ec:	bf5c      	itt	pl
   176ee:	4605      	movpl	r5, r0
			*nested_exc = true;
   176f0:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
   176f2:	2d00      	cmp	r5, #0
   176f4:	d0e8      	beq.n	176c8 <z_arm_fault+0x48>
	*recoverable = false;
   176f6:	2300      	movs	r3, #0
   176f8:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   176fc:	1ee3      	subs	r3, r4, #3
   176fe:	2b09      	cmp	r3, #9
   17700:	f200 80d8 	bhi.w	178b4 <z_arm_fault+0x234>
   17704:	e8df f013 	tbh	[pc, r3, lsl #1]
   17708:	00c1000c 	.word	0x00c1000c
   1770c:	00a100c5 	.word	0x00a100c5
   17710:	00d600d6 	.word	0x00d600d6
   17714:	00d600d6 	.word	0x00d600d6
   17718:	00c900d6 	.word	0x00c900d6
	*nested_exc = false;
   1771c:	461f      	mov	r7, r3
   1771e:	e7d3      	b.n	176c8 <z_arm_fault+0x48>
	PR_FAULT_INFO("***** HARD FAULT *****");
   17720:	4e74      	ldr	r6, [pc, #464]	; (178f4 <z_arm_fault+0x274>)
   17722:	6833      	ldr	r3, [r6, #0]
   17724:	075c      	lsls	r4, r3, #29
   17726:	d008      	beq.n	1773a <z_arm_fault+0xba>
   17728:	4973      	ldr	r1, [pc, #460]	; (178f8 <z_arm_fault+0x278>)
   1772a:	4879      	ldr	r0, [pc, #484]	; (17910 <z_arm_fault+0x290>)
   1772c:	1a71      	subs	r1, r6, r1
   1772e:	0889      	lsrs	r1, r1, #2
   17730:	0189      	lsls	r1, r1, #6
   17732:	f041 0101 	orr.w	r1, r1, #1
   17736:	f015 fad2 	bl	2ccde <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1773a:	4b6d      	ldr	r3, [pc, #436]	; (178f0 <z_arm_fault+0x270>)
   1773c:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   1773e:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   17742:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   17746:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   1774a:	d00e      	beq.n	1776a <z_arm_fault+0xea>
		PR_EXC("  Bus fault on vector table read");
   1774c:	6833      	ldr	r3, [r6, #0]
   1774e:	0758      	lsls	r0, r3, #29
   17750:	d101      	bne.n	17756 <z_arm_fault+0xd6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   17752:	2400      	movs	r4, #0
   17754:	e018      	b.n	17788 <z_arm_fault+0x108>
   17756:	4968      	ldr	r1, [pc, #416]	; (178f8 <z_arm_fault+0x278>)
		PR_EXC("  Bus fault on vector table read");
   17758:	486e      	ldr	r0, [pc, #440]	; (17914 <z_arm_fault+0x294>)
   1775a:	1a71      	subs	r1, r6, r1
   1775c:	0889      	lsrs	r1, r1, #2
   1775e:	0189      	lsls	r1, r1, #6
   17760:	f041 0101 	orr.w	r1, r1, #1
	PR_FAULT_INFO(
   17764:	f015 fabb 	bl	2ccde <log_0>
   17768:	e7f3      	b.n	17752 <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   1776a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   1776c:	2a00      	cmp	r2, #0
   1776e:	da2c      	bge.n	177ca <z_arm_fault+0x14a>
		PR_EXC("  Debug event");
   17770:	6833      	ldr	r3, [r6, #0]
   17772:	0759      	lsls	r1, r3, #29
   17774:	d0ed      	beq.n	17752 <z_arm_fault+0xd2>
   17776:	4960      	ldr	r1, [pc, #384]	; (178f8 <z_arm_fault+0x278>)
   17778:	4867      	ldr	r0, [pc, #412]	; (17918 <z_arm_fault+0x298>)
   1777a:	1a71      	subs	r1, r6, r1
   1777c:	0889      	lsrs	r1, r1, #2
   1777e:	0189      	lsls	r1, r1, #6
   17780:	f041 0101 	orr.w	r1, r1, #1
   17784:	f015 faab 	bl	2ccde <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   17788:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1778c:	b9d3      	cbnz	r3, 177c4 <z_arm_fault+0x144>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   1778e:	aa02      	add	r2, sp, #8
   17790:	f105 0620 	add.w	r6, r5, #32
   17794:	6828      	ldr	r0, [r5, #0]
   17796:	6869      	ldr	r1, [r5, #4]
   17798:	4613      	mov	r3, r2
   1779a:	c303      	stmia	r3!, {r0, r1}
   1779c:	3508      	adds	r5, #8
   1779e:	42b5      	cmp	r5, r6
   177a0:	461a      	mov	r2, r3
   177a2:	d1f7      	bne.n	17794 <z_arm_fault+0x114>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   177a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
   177a6:	2f00      	cmp	r7, #0
   177a8:	f000 809c 	beq.w	178e4 <z_arm_fault+0x264>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   177ac:	f3c3 0208 	ubfx	r2, r3, #0, #9
   177b0:	b922      	cbnz	r2, 177bc <z_arm_fault+0x13c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   177b2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   177b6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   177ba:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   177bc:	a902      	add	r1, sp, #8
   177be:	4620      	mov	r0, r4
   177c0:	f7ff fb9e 	bl	16f00 <z_arm_fatal_error>
}
   177c4:	b00a      	add	sp, #40	; 0x28
   177c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   177ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   177cc:	005a      	lsls	r2, r3, #1
   177ce:	d54f      	bpl.n	17870 <z_arm_fault+0x1f0>
		PR_EXC("  Fault escalation (see below)");
   177d0:	6833      	ldr	r3, [r6, #0]
   177d2:	075b      	lsls	r3, r3, #29
   177d4:	d008      	beq.n	177e8 <z_arm_fault+0x168>
   177d6:	4948      	ldr	r1, [pc, #288]	; (178f8 <z_arm_fault+0x278>)
   177d8:	4850      	ldr	r0, [pc, #320]	; (1791c <z_arm_fault+0x29c>)
   177da:	1a71      	subs	r1, r6, r1
   177dc:	0889      	lsrs	r1, r1, #2
   177de:	0189      	lsls	r1, r1, #6
   177e0:	f041 0101 	orr.w	r1, r1, #1
   177e4:	f015 fa7b 	bl	2ccde <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
   177e8:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   177ea:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   177ee:	f64d 7302 	movw	r3, #57090	; 0xdf02
   177f2:	429a      	cmp	r2, r3
   177f4:	d00d      	beq.n	17812 <z_arm_fault+0x192>
		} else if (SCB_MMFSR != 0) {
   177f6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   177fa:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   177fe:	781b      	ldrb	r3, [r3, #0]
   17800:	b1b3      	cbz	r3, 17830 <z_arm_fault+0x1b0>
			reason = mem_manage_fault(esf, 1, recoverable);
   17802:	f10d 0207 	add.w	r2, sp, #7
   17806:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   17808:	4628      	mov	r0, r5
   1780a:	f7ff fd37 	bl	1727c <mem_manage_fault>
   1780e:	4604      	mov	r4, r0
		break;
   17810:	e7ba      	b.n	17788 <z_arm_fault+0x108>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   17812:	6833      	ldr	r3, [r6, #0]
   17814:	075c      	lsls	r4, r3, #29
   17816:	d009      	beq.n	1782c <z_arm_fault+0x1ac>
   17818:	4a37      	ldr	r2, [pc, #220]	; (178f8 <z_arm_fault+0x278>)
   1781a:	6829      	ldr	r1, [r5, #0]
   1781c:	4840      	ldr	r0, [pc, #256]	; (17920 <z_arm_fault+0x2a0>)
   1781e:	1ab2      	subs	r2, r6, r2
   17820:	0892      	lsrs	r2, r2, #2
   17822:	0192      	lsls	r2, r2, #6
   17824:	f042 0201 	orr.w	r2, r2, #1
   17828:	f015 fa66 	bl	2ccf8 <log_1>
			reason = esf->basic.r0;
   1782c:	682c      	ldr	r4, [r5, #0]
   1782e:	e7ab      	b.n	17788 <z_arm_fault+0x108>
		} else if (SCB_BFSR != 0) {
   17830:	4b3c      	ldr	r3, [pc, #240]	; (17924 <z_arm_fault+0x2a4>)
   17832:	781b      	ldrb	r3, [r3, #0]
   17834:	b12b      	cbz	r3, 17842 <z_arm_fault+0x1c2>
			reason = bus_fault(esf, 1, recoverable);
   17836:	f10d 0107 	add.w	r1, sp, #7
   1783a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   1783c:	f7ff fe7c 	bl	17538 <bus_fault.isra.0>
   17840:	e7e5      	b.n	1780e <z_arm_fault+0x18e>
		} else if (SCB_UFSR != 0) {
   17842:	4b39      	ldr	r3, [pc, #228]	; (17928 <z_arm_fault+0x2a8>)
   17844:	881b      	ldrh	r3, [r3, #0]
   17846:	b29b      	uxth	r3, r3
   17848:	b113      	cbz	r3, 17850 <z_arm_fault+0x1d0>
		reason = usage_fault(esf);
   1784a:	f7ff fde9 	bl	17420 <usage_fault.isra.0>
   1784e:	e7de      	b.n	1780e <z_arm_fault+0x18e>
			__ASSERT(0,
   17850:	4936      	ldr	r1, [pc, #216]	; (1792c <z_arm_fault+0x2ac>)
   17852:	4a2b      	ldr	r2, [pc, #172]	; (17900 <z_arm_fault+0x280>)
   17854:	482c      	ldr	r0, [pc, #176]	; (17908 <z_arm_fault+0x288>)
   17856:	f240 23c3 	movw	r3, #707	; 0x2c3
   1785a:	f014 fe9e 	bl	2c59a <printk>
   1785e:	4834      	ldr	r0, [pc, #208]	; (17930 <z_arm_fault+0x2b0>)
   17860:	f014 fe9b 	bl	2c59a <printk>
   17864:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   17868:	4825      	ldr	r0, [pc, #148]	; (17900 <z_arm_fault+0x280>)
   1786a:	f015 f8d7 	bl	2ca1c <assert_post_action>
   1786e:	e78b      	b.n	17788 <z_arm_fault+0x108>
   17870:	492e      	ldr	r1, [pc, #184]	; (1792c <z_arm_fault+0x2ac>)
   17872:	4a23      	ldr	r2, [pc, #140]	; (17900 <z_arm_fault+0x280>)
   17874:	4824      	ldr	r0, [pc, #144]	; (17908 <z_arm_fault+0x288>)
   17876:	f240 23c7 	movw	r3, #711	; 0x2c7
   1787a:	f014 fe8e 	bl	2c59a <printk>
   1787e:	482d      	ldr	r0, [pc, #180]	; (17934 <z_arm_fault+0x2b4>)
   17880:	f014 fe8b 	bl	2c59a <printk>
   17884:	f240 21c7 	movw	r1, #711	; 0x2c7
   17888:	e7ee      	b.n	17868 <z_arm_fault+0x1e8>
		reason = mem_manage_fault(esf, 0, recoverable);
   1788a:	f10d 0207 	add.w	r2, sp, #7
   1788e:	2100      	movs	r1, #0
   17890:	e7ba      	b.n	17808 <z_arm_fault+0x188>
		reason = bus_fault(esf, 0, recoverable);
   17892:	f10d 0107 	add.w	r1, sp, #7
   17896:	2000      	movs	r0, #0
   17898:	e7d0      	b.n	1783c <z_arm_fault+0x1bc>
	PR_FAULT_INFO(
   1789a:	4916      	ldr	r1, [pc, #88]	; (178f4 <z_arm_fault+0x274>)
   1789c:	680b      	ldr	r3, [r1, #0]
   1789e:	0758      	lsls	r0, r3, #29
   178a0:	f43f af57 	beq.w	17752 <z_arm_fault+0xd2>
   178a4:	4b14      	ldr	r3, [pc, #80]	; (178f8 <z_arm_fault+0x278>)
   178a6:	4824      	ldr	r0, [pc, #144]	; (17938 <z_arm_fault+0x2b8>)
   178a8:	1ac9      	subs	r1, r1, r3
   178aa:	0889      	lsrs	r1, r1, #2
   178ac:	0189      	lsls	r1, r1, #6
   178ae:	f041 0101 	orr.w	r1, r1, #1
   178b2:	e757      	b.n	17764 <z_arm_fault+0xe4>
	PR_FAULT_INFO("***** %s %d) *****",
   178b4:	4b0f      	ldr	r3, [pc, #60]	; (178f4 <z_arm_fault+0x274>)
   178b6:	681a      	ldr	r2, [r3, #0]
   178b8:	0752      	lsls	r2, r2, #29
   178ba:	f43f af4a 	beq.w	17752 <z_arm_fault+0xd2>
   178be:	4a0e      	ldr	r2, [pc, #56]	; (178f8 <z_arm_fault+0x278>)
   178c0:	481e      	ldr	r0, [pc, #120]	; (1793c <z_arm_fault+0x2bc>)
   178c2:	491f      	ldr	r1, [pc, #124]	; (17940 <z_arm_fault+0x2c0>)
   178c4:	1a9b      	subs	r3, r3, r2
   178c6:	089b      	lsrs	r3, r3, #2
   178c8:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   178cc:	ea4f 1383 	mov.w	r3, r3, lsl #6
   178d0:	bf18      	it	ne
   178d2:	4601      	movne	r1, r0
   178d4:	f043 0301 	orr.w	r3, r3, #1
   178d8:	481a      	ldr	r0, [pc, #104]	; (17944 <z_arm_fault+0x2c4>)
   178da:	f1a4 0210 	sub.w	r2, r4, #16
   178de:	f015 fa1f 	bl	2cd20 <log_2>
   178e2:	e736      	b.n	17752 <z_arm_fault+0xd2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   178e4:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   178e8:	f023 0301 	bic.w	r3, r3, #1
   178ec:	e765      	b.n	177ba <z_arm_fault+0x13a>
   178ee:	bf00      	nop
   178f0:	e000ed00 	.word	0xe000ed00
   178f4:	200007ec 	.word	0x200007ec
   178f8:	200007a8 	.word	0x200007a8
   178fc:	000343e2 	.word	0x000343e2
   17900:	000341e6 	.word	0x000341e6
   17904:	0003440d 	.word	0x0003440d
   17908:	00032486 	.word	0x00032486
   1790c:	00034420 	.word	0x00034420
   17910:	0003445e 	.word	0x0003445e
   17914:	00034475 	.word	0x00034475
   17918:	00034496 	.word	0x00034496
   1791c:	000344a4 	.word	0x000344a4
   17920:	000344c3 	.word	0x000344c3
   17924:	e000ed29 	.word	0xe000ed29
   17928:	e000ed2a 	.word	0xe000ed2a
   1792c:	000380f0 	.word	0x000380f0
   17930:	000344df 	.word	0x000344df
   17934:	00034503 	.word	0x00034503
   17938:	00034533 	.word	0x00034533
   1793c:	0003456c 	.word	0x0003456c
   17940:	00034557 	.word	0x00034557
   17944:	00034585 	.word	0x00034585

00017948 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   17948:	4a02      	ldr	r2, [pc, #8]	; (17954 <z_arm_fault_init+0xc>)
   1794a:	6953      	ldr	r3, [r2, #20]
   1794c:	f043 0310 	orr.w	r3, r3, #16
   17950:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   17952:	4770      	bx	lr
   17954:	e000ed00 	.word	0xe000ed00

00017958 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   17958:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   1795c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   17960:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   17962:	4672      	mov	r2, lr
	bl z_arm_fault
   17964:	f7ff fe8c 	bl	17680 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   17968:	bd01      	pop	{r0, pc}
   1796a:	bf00      	nop

0001796c <z_arm_interrupt_init>:
   1796c:	4804      	ldr	r0, [pc, #16]	; (17980 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   1796e:	2300      	movs	r3, #0
   17970:	2140      	movs	r1, #64	; 0x40
   17972:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   17974:	3301      	adds	r3, #1
   17976:	2b30      	cmp	r3, #48	; 0x30
   17978:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   1797c:	d1f9      	bne.n	17972 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   1797e:	4770      	bx	lr
   17980:	e000e100 	.word	0xe000e100

00017984 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   17984:	2000      	movs	r0, #0
    msr CONTROL, r0
   17986:	f380 8814 	msr	CONTROL, r0
    isb
   1798a:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   1798e:	f018 ffa9 	bl	308e4 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   17992:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   17994:	4911      	ldr	r1, [pc, #68]	; (179dc <__start+0x58>)
    str r0, [r1]
   17996:	6008      	str	r0, [r1, #0]
    dsb
   17998:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   1799c:	4810      	ldr	r0, [pc, #64]	; (179e0 <__start+0x5c>)
    msr msp, r0
   1799e:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   179a2:	f000 f831 	bl	17a08 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   179a6:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   179a8:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
   179ac:	480d      	ldr	r0, [pc, #52]	; (179e4 <__start+0x60>)
    ldr r1, =0xaa
   179ae:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   179b2:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
   179b6:	f018 fe38 	bl	3062a <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   179ba:	480a      	ldr	r0, [pc, #40]	; (179e4 <__start+0x60>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   179bc:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   179c0:	1840      	adds	r0, r0, r1
    msr PSP, r0
   179c2:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   179c6:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   179ca:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   179cc:	4308      	orrs	r0, r1
    msr CONTROL, r0
   179ce:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   179d2:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   179d6:	f7ff fb53 	bl	17080 <z_arm_prep_c>
   179da:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   179dc:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   179e0:	20006920 	.word	0x20006920
    ldr r0, =z_interrupt_stacks
   179e4:	20006aa0 	.word	0x20006aa0

000179e8 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   179e8:	4a06      	ldr	r2, [pc, #24]	; (17a04 <z_arm_clear_arm_mpu_config+0x1c>)
   179ea:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   179ec:	2300      	movs	r3, #0
	int num_regions =
   179ee:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   179f2:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   179f4:	428b      	cmp	r3, r1
   179f6:	d100      	bne.n	179fa <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   179f8:	4770      	bx	lr
  MPU->RNR = rnr;
   179fa:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   179fc:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   179fe:	3301      	adds	r3, #1
   17a00:	e7f8      	b.n	179f4 <z_arm_clear_arm_mpu_config+0xc>
   17a02:	bf00      	nop
   17a04:	e000ed90 	.word	0xe000ed90

00017a08 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   17a08:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   17a0a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   17a0c:	2300      	movs	r3, #0
   17a0e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   17a12:	f7ff ffe9 	bl	179e8 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   17a16:	4b14      	ldr	r3, [pc, #80]	; (17a68 <z_arm_init_arch_hw_at_boot+0x60>)
   17a18:	f04f 32ff 	mov.w	r2, #4294967295
   17a1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   17a20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   17a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   17a28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   17a2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   17a30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   17a34:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   17a38:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   17a3c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   17a40:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   17a44:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   17a48:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   17a4c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   17a50:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   17a54:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   17a58:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   17a5c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   17a5e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17a62:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   17a66:	bd08      	pop	{r3, pc}
   17a68:	e000e100 	.word	0xe000e100

00017a6c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   17a6c:	4b06      	ldr	r3, [pc, #24]	; (17a88 <z_impl_k_thread_abort+0x1c>)
   17a6e:	689b      	ldr	r3, [r3, #8]
   17a70:	4283      	cmp	r3, r0
   17a72:	d107      	bne.n	17a84 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   17a74:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   17a78:	b123      	cbz	r3, 17a84 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   17a7a:	4a04      	ldr	r2, [pc, #16]	; (17a8c <z_impl_k_thread_abort+0x20>)
   17a7c:	6853      	ldr	r3, [r2, #4]
   17a7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   17a82:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   17a84:	f010 b8be 	b.w	27c04 <z_thread_abort>
   17a88:	20002040 	.word	0x20002040
   17a8c:	e000ed00 	.word	0xe000ed00

00017a90 <arch_timing_init>:
 * @return 0
 */
static inline int z_arm_dwt_init(void)
{
	/* Enable tracing */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   17a90:	4a0f      	ldr	r2, [pc, #60]	; (17ad0 <arch_timing_init+0x40>)
	return dwt_frequency;
#endif /* CONFIG_SOC_FAMILY_NRF */
}

void arch_timing_init(void)
{
   17a92:	b508      	push	{r3, lr}
   17a94:	68d3      	ldr	r3, [r2, #12]
   17a96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   17a9a:	60d3      	str	r3, [r2, #12]
 * @return 0
 */
static inline int z_arm_dwt_init_cycle_counter(void)
{
	/* Clear and enable the cycle counter */
	DWT->CYCCNT = 0;
   17a9c:	4b0d      	ldr	r3, [pc, #52]	; (17ad4 <arch_timing_init+0x44>)
   17a9e:	2200      	movs	r2, #0
   17aa0:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   17aa2:	681a      	ldr	r2, [r3, #0]
   17aa4:	f042 0201 	orr.w	r2, r2, #1
   17aa8:	601a      	str	r2, [r3, #0]

	/* Assert that the cycle counter is indeed implemented.
	 * The field is called NOCYCCNT. So 1 means there is no cycle counter.
	 */
	__ASSERT((DWT->CTRL & DWT_CTRL_NOCYCCNT_Msk) == 0,
   17aaa:	681b      	ldr	r3, [r3, #0]
   17aac:	019b      	lsls	r3, r3, #6
   17aae:	d50e      	bpl.n	17ace <arch_timing_init+0x3e>
   17ab0:	4909      	ldr	r1, [pc, #36]	; (17ad8 <arch_timing_init+0x48>)
   17ab2:	4a0a      	ldr	r2, [pc, #40]	; (17adc <arch_timing_init+0x4c>)
   17ab4:	480a      	ldr	r0, [pc, #40]	; (17ae0 <arch_timing_init+0x50>)
   17ab6:	2369      	movs	r3, #105	; 0x69
   17ab8:	f014 fd6f 	bl	2c59a <printk>
   17abc:	4809      	ldr	r0, [pc, #36]	; (17ae4 <arch_timing_init+0x54>)
   17abe:	f014 fd6c 	bl	2c59a <printk>
	z_arm_dwt_init();
	z_arm_dwt_init_cycle_counter();
}
   17ac2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   17ac6:	4805      	ldr	r0, [pc, #20]	; (17adc <arch_timing_init+0x4c>)
   17ac8:	2169      	movs	r1, #105	; 0x69
   17aca:	f014 bfa7 	b.w	2ca1c <assert_post_action>
   17ace:	bd08      	pop	{r3, pc}
   17ad0:	e000edf0 	.word	0xe000edf0
   17ad4:	e0001000 	.word	0xe0001000
   17ad8:	000345d3 	.word	0x000345d3
   17adc:	00034598 	.word	0x00034598
   17ae0:	00032486 	.word	0x00032486
   17ae4:	00034610 	.word	0x00034610

00017ae8 <arch_timing_start>:
 *
 * @return N/A
 */
static inline void z_arm_dwt_cycle_count_start(void)
{
	DWT->CYCCNT = 0;
   17ae8:	4b03      	ldr	r3, [pc, #12]	; (17af8 <arch_timing_start+0x10>)
   17aea:	2200      	movs	r2, #0
   17aec:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   17aee:	681a      	ldr	r2, [r3, #0]
   17af0:	f042 0201 	orr.w	r2, r2, #1
   17af4:	601a      	str	r2, [r3, #0]

void arch_timing_start(void)
{
	z_arm_dwt_cycle_count_start();
}
   17af6:	4770      	bx	lr
   17af8:	e0001000 	.word	0xe0001000

00017afc <arch_timing_counter_get>:
	return DWT->CYCCNT;
   17afc:	4b01      	ldr	r3, [pc, #4]	; (17b04 <arch_timing_counter_get+0x8>)
}

timing_t arch_timing_counter_get(void)
{
	return (timing_t)z_arm_dwt_get_cycles();
}
   17afe:	2100      	movs	r1, #0
   17b00:	6858      	ldr	r0, [r3, #4]
   17b02:	4770      	bx	lr
   17b04:	e0001000 	.word	0xe0001000

00017b08 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   17b08:	4b02      	ldr	r3, [pc, #8]	; (17b14 <z_arm_configure_static_mpu_regions+0xc>)
   17b0a:	4a03      	ldr	r2, [pc, #12]	; (17b18 <z_arm_configure_static_mpu_regions+0x10>)
   17b0c:	4803      	ldr	r0, [pc, #12]	; (17b1c <z_arm_configure_static_mpu_regions+0x14>)
   17b0e:	2101      	movs	r1, #1
   17b10:	f000 b88e 	b.w	17c30 <arm_core_mpu_configure_static_mpu_regions>
   17b14:	20040000 	.word	0x20040000
   17b18:	20000000 	.word	0x20000000
   17b1c:	00031640 	.word	0x00031640

00017b20 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   17b20:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   17b24:	4b05      	ldr	r3, [pc, #20]	; (17b3c <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
   17b26:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   17b28:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   17b2a:	4a05      	ldr	r2, [pc, #20]	; (17b40 <z_arm_configure_dynamic_mpu_regions+0x20>)
   17b2c:	2120      	movs	r1, #32
   17b2e:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   17b32:	4618      	mov	r0, r3
   17b34:	2101      	movs	r1, #1
   17b36:	f000 b8a3 	b.w	17c80 <arm_core_mpu_configure_dynamic_mpu_regions>
   17b3a:	bf00      	nop
   17b3c:	20002cb8 	.word	0x20002cb8
   17b40:	150b0000 	.word	0x150b0000

00017b44 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   17b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   17b46:	4f2c      	ldr	r7, [pc, #176]	; (17bf8 <mpu_configure_regions+0xb4>)
   17b48:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   17b4a:	2100      	movs	r1, #0
   17b4c:	42b1      	cmp	r1, r6
   17b4e:	db01      	blt.n	17b54 <mpu_configure_regions+0x10>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   17b50:	4610      	mov	r0, r2
   17b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   17b54:	6844      	ldr	r4, [r0, #4]
   17b56:	2c00      	cmp	r4, #0
   17b58:	d04b      	beq.n	17bf2 <mpu_configure_regions+0xae>
		if (do_sanity_check &&
   17b5a:	b1c3      	cbz	r3, 17b8e <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   17b5c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   17b60:	ea14 0f0c 	tst.w	r4, ip
   17b64:	d00d      	beq.n	17b82 <mpu_configure_regions+0x3e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   17b66:	4a25      	ldr	r2, [pc, #148]	; (17bfc <mpu_configure_regions+0xb8>)
   17b68:	6813      	ldr	r3, [r2, #0]
   17b6a:	0758      	lsls	r0, r3, #29
   17b6c:	d026      	beq.n	17bbc <mpu_configure_regions+0x78>
   17b6e:	4b24      	ldr	r3, [pc, #144]	; (17c00 <mpu_configure_regions+0xbc>)
   17b70:	4824      	ldr	r0, [pc, #144]	; (17c04 <mpu_configure_regions+0xc0>)
   17b72:	1ad2      	subs	r2, r2, r3
   17b74:	0892      	lsrs	r2, r2, #2
   17b76:	0192      	lsls	r2, r2, #6
   17b78:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   17b7c:	f015 f8bc 	bl	2ccf8 <log_1>
		if (reg_index == -EINVAL) {
   17b80:	e01c      	b.n	17bbc <mpu_configure_regions+0x78>
		&&
   17b82:	2c1f      	cmp	r4, #31
   17b84:	d9ef      	bls.n	17b66 <mpu_configure_regions+0x22>
		((part->start & (part->size - 1U)) == 0U);
   17b86:	6805      	ldr	r5, [r0, #0]
		&&
   17b88:	ea1c 0f05 	tst.w	ip, r5
   17b8c:	d1eb      	bne.n	17b66 <mpu_configure_regions+0x22>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   17b8e:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   17b90:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   17b92:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   17b96:	6802      	ldr	r2, [r0, #0]
   17b98:	d913      	bls.n	17bc2 <mpu_configure_regions+0x7e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   17b9a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   17b9e:	d812      	bhi.n	17bc6 <mpu_configure_regions+0x82>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   17ba0:	3c01      	subs	r4, #1
   17ba2:	fab4 f484 	clz	r4, r4
   17ba6:	f1c4 041f 	rsb	r4, r4, #31
   17baa:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   17bac:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   17bae:	ea4c 0404 	orr.w	r4, ip, r4
   17bb2:	d913      	bls.n	17bdc <mpu_configure_regions+0x98>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   17bb4:	4a11      	ldr	r2, [pc, #68]	; (17bfc <mpu_configure_regions+0xb8>)
   17bb6:	6813      	ldr	r3, [r2, #0]
   17bb8:	075b      	lsls	r3, r3, #29
   17bba:	d106      	bne.n	17bca <mpu_configure_regions+0x86>
			return -EINVAL;
   17bbc:	f06f 0215 	mvn.w	r2, #21
   17bc0:	e7c6      	b.n	17b50 <mpu_configure_regions+0xc>
		return REGION_32B;
   17bc2:	2408      	movs	r4, #8
   17bc4:	e7f2      	b.n	17bac <mpu_configure_regions+0x68>
		return REGION_4G;
   17bc6:	243e      	movs	r4, #62	; 0x3e
   17bc8:	e7f0      	b.n	17bac <mpu_configure_regions+0x68>
   17bca:	4b0d      	ldr	r3, [pc, #52]	; (17c00 <mpu_configure_regions+0xbc>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   17bcc:	480e      	ldr	r0, [pc, #56]	; (17c08 <mpu_configure_regions+0xc4>)
   17bce:	1ad2      	subs	r2, r2, r3
   17bd0:	0892      	lsrs	r2, r2, #2
   17bd2:	0192      	lsls	r2, r2, #6
   17bd4:	f042 0201 	orr.w	r2, r2, #1
   17bd8:	4629      	mov	r1, r5
   17bda:	e7cf      	b.n	17b7c <mpu_configure_regions+0x38>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17bdc:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   17be0:	432a      	orrs	r2, r5
   17be2:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   17be6:	f044 0401 	orr.w	r4, r4, #1
   17bea:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17bec:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   17bee:	613c      	str	r4, [r7, #16]
		reg_index++;
   17bf0:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   17bf2:	3101      	adds	r1, #1
   17bf4:	300c      	adds	r0, #12
   17bf6:	e7a9      	b.n	17b4c <mpu_configure_regions+0x8>
   17bf8:	e000ed90 	.word	0xe000ed90
   17bfc:	200007e0 	.word	0x200007e0
   17c00:	200007a8 	.word	0x200007a8
   17c04:	0003465a 	.word	0x0003465a
   17c08:	0003467d 	.word	0x0003467d

00017c0c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   17c0c:	4b03      	ldr	r3, [pc, #12]	; (17c1c <arm_core_mpu_enable+0x10>)
   17c0e:	2205      	movs	r2, #5
   17c10:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   17c12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   17c16:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   17c1a:	4770      	bx	lr
   17c1c:	e000ed90 	.word	0xe000ed90

00017c20 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   17c20:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   17c24:	4b01      	ldr	r3, [pc, #4]	; (17c2c <arm_core_mpu_disable+0xc>)
   17c26:	2200      	movs	r2, #0
   17c28:	605a      	str	r2, [r3, #4]
}
   17c2a:	4770      	bx	lr
   17c2c:	e000ed90 	.word	0xe000ed90

00017c30 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   17c30:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   17c32:	4d0e      	ldr	r5, [pc, #56]	; (17c6c <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   17c34:	2301      	movs	r3, #1
   17c36:	782a      	ldrb	r2, [r5, #0]
   17c38:	460c      	mov	r4, r1
   17c3a:	f7ff ff83 	bl	17b44 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   17c3e:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   17c40:	3016      	adds	r0, #22
   17c42:	d111      	bne.n	17c68 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   17c44:	f240 1311 	movw	r3, #273	; 0x111
   17c48:	4a09      	ldr	r2, [pc, #36]	; (17c70 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   17c4a:	490a      	ldr	r1, [pc, #40]	; (17c74 <arm_core_mpu_configure_static_mpu_regions+0x44>)
   17c4c:	480a      	ldr	r0, [pc, #40]	; (17c78 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   17c4e:	f014 fca4 	bl	2c59a <printk>
   17c52:	4621      	mov	r1, r4
   17c54:	4809      	ldr	r0, [pc, #36]	; (17c7c <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   17c56:	f014 fca0 	bl	2c59a <printk>
			regions_num);
	}
}
   17c5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   17c5e:	4804      	ldr	r0, [pc, #16]	; (17c70 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   17c60:	f240 1111 	movw	r1, #273	; 0x111
   17c64:	f014 beda 	b.w	2ca1c <assert_post_action>
}
   17c68:	bd38      	pop	{r3, r4, r5, pc}
   17c6a:	bf00      	nop
   17c6c:	20003945 	.word	0x20003945
   17c70:	000346a3 	.word	0x000346a3
   17c74:	000380f0 	.word	0x000380f0
   17c78:	00032486 	.word	0x00032486
   17c7c:	000346da 	.word	0x000346da

00017c80 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   17c80:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   17c82:	4a12      	ldr	r2, [pc, #72]	; (17ccc <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   17c84:	2300      	movs	r3, #0
   17c86:	7812      	ldrb	r2, [r2, #0]
   17c88:	460c      	mov	r4, r1
   17c8a:	f7ff ff5b 	bl	17b44 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   17c8e:	f110 0f16 	cmn.w	r0, #22
   17c92:	d008      	beq.n	17ca6 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   17c94:	4b0e      	ldr	r3, [pc, #56]	; (17cd0 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   17c96:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   17c98:	2807      	cmp	r0, #7
   17c9a:	dd00      	ble.n	17c9e <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   17c9c:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   17c9e:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   17ca0:	611a      	str	r2, [r3, #16]
   17ca2:	3001      	adds	r0, #1
   17ca4:	e7f8      	b.n	17c98 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   17ca6:	4a0b      	ldr	r2, [pc, #44]	; (17cd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   17ca8:	490b      	ldr	r1, [pc, #44]	; (17cd8 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   17caa:	480c      	ldr	r0, [pc, #48]	; (17cdc <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   17cac:	f44f 7398 	mov.w	r3, #304	; 0x130
   17cb0:	f014 fc73 	bl	2c59a <printk>
   17cb4:	4621      	mov	r1, r4
   17cb6:	480a      	ldr	r0, [pc, #40]	; (17ce0 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   17cb8:	f014 fc6f 	bl	2c59a <printk>
}
   17cbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   17cc0:	4804      	ldr	r0, [pc, #16]	; (17cd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   17cc2:	f44f 7198 	mov.w	r1, #304	; 0x130
   17cc6:	f014 bea9 	b.w	2ca1c <assert_post_action>
   17cca:	bf00      	nop
   17ccc:	20003945 	.word	0x20003945
   17cd0:	e000ed90 	.word	0xe000ed90
   17cd4:	000346a3 	.word	0x000346a3
   17cd8:	000380f0 	.word	0x000380f0
   17cdc:	00032486 	.word	0x00032486
   17ce0:	00034706 	.word	0x00034706

00017ce4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   17ce4:	4925      	ldr	r1, [pc, #148]	; (17d7c <z_arm_mpu_init+0x98>)
{
   17ce6:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   17ce8:	680c      	ldr	r4, [r1, #0]
   17cea:	2c08      	cmp	r4, #8
   17cec:	d913      	bls.n	17d16 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   17cee:	f44f 73a4 	mov.w	r3, #328	; 0x148
   17cf2:	4a23      	ldr	r2, [pc, #140]	; (17d80 <z_arm_mpu_init+0x9c>)
   17cf4:	4923      	ldr	r1, [pc, #140]	; (17d84 <z_arm_mpu_init+0xa0>)
   17cf6:	4824      	ldr	r0, [pc, #144]	; (17d88 <z_arm_mpu_init+0xa4>)
   17cf8:	f014 fc4f 	bl	2c59a <printk>
   17cfc:	4823      	ldr	r0, [pc, #140]	; (17d8c <z_arm_mpu_init+0xa8>)
   17cfe:	2208      	movs	r2, #8
   17d00:	4621      	mov	r1, r4
   17d02:	f014 fc4a 	bl	2c59a <printk>
   17d06:	481e      	ldr	r0, [pc, #120]	; (17d80 <z_arm_mpu_init+0x9c>)
   17d08:	f44f 71a4 	mov.w	r1, #328	; 0x148
   17d0c:	f014 fe86 	bl	2ca1c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   17d10:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   17d14:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   17d16:	f7ff ff83 	bl	17c20 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   17d1a:	6848      	ldr	r0, [r1, #4]
   17d1c:	491c      	ldr	r1, [pc, #112]	; (17d90 <z_arm_mpu_init+0xac>)
   17d1e:	2200      	movs	r2, #0
   17d20:	4294      	cmp	r4, r2
   17d22:	f100 000c 	add.w	r0, r0, #12
   17d26:	d119      	bne.n	17d5c <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   17d28:	4b1a      	ldr	r3, [pc, #104]	; (17d94 <z_arm_mpu_init+0xb0>)
   17d2a:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   17d2c:	f7ff ff6e 	bl	17c0c <arm_core_mpu_enable>
	__ASSERT(
   17d30:	680b      	ldr	r3, [r1, #0]
   17d32:	f3c3 2307 	ubfx	r3, r3, #8, #8
   17d36:	2b08      	cmp	r3, #8
   17d38:	d00e      	beq.n	17d58 <z_arm_mpu_init+0x74>
   17d3a:	4917      	ldr	r1, [pc, #92]	; (17d98 <z_arm_mpu_init+0xb4>)
   17d3c:	4a10      	ldr	r2, [pc, #64]	; (17d80 <z_arm_mpu_init+0x9c>)
   17d3e:	4812      	ldr	r0, [pc, #72]	; (17d88 <z_arm_mpu_init+0xa4>)
   17d40:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   17d44:	f014 fc29 	bl	2c59a <printk>
   17d48:	4814      	ldr	r0, [pc, #80]	; (17d9c <z_arm_mpu_init+0xb8>)
   17d4a:	f014 fc26 	bl	2c59a <printk>
   17d4e:	480c      	ldr	r0, [pc, #48]	; (17d80 <z_arm_mpu_init+0x9c>)
   17d50:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   17d54:	f014 fe62 	bl	2ca1c <assert_post_action>
	return 0;
   17d58:	2000      	movs	r0, #0
   17d5a:	e7db      	b.n	17d14 <z_arm_mpu_init+0x30>
   17d5c:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17d5e:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   17d62:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   17d66:	4313      	orrs	r3, r2
   17d68:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   17d6c:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   17d6e:	f850 3c04 	ldr.w	r3, [r0, #-4]
   17d72:	f043 0301 	orr.w	r3, r3, #1
   17d76:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   17d78:	3201      	adds	r2, #1
   17d7a:	e7d1      	b.n	17d20 <z_arm_mpu_init+0x3c>
   17d7c:	0003164c 	.word	0x0003164c
   17d80:	000346a3 	.word	0x000346a3
   17d84:	000380f0 	.word	0x000380f0
   17d88:	00032486 	.word	0x00032486
   17d8c:	00034733 	.word	0x00034733
   17d90:	e000ed90 	.word	0xe000ed90
   17d94:	20003945 	.word	0x20003945
   17d98:	00034767 	.word	0x00034767
   17d9c:	000347b7 	.word	0x000347b7

00017da0 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   17da0:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   17da2:	4b0b      	ldr	r3, [pc, #44]	; (17dd0 <malloc_prepare+0x30>)
   17da4:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   17da8:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
   17dac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   17db0:	d20c      	bcs.n	17dcc <malloc_prepare+0x2c>
   17db2:	4908      	ldr	r1, [pc, #32]	; (17dd4 <malloc_prepare+0x34>)
   17db4:	4a08      	ldr	r2, [pc, #32]	; (17dd8 <malloc_prepare+0x38>)
   17db6:	4809      	ldr	r0, [pc, #36]	; (17ddc <malloc_prepare+0x3c>)
   17db8:	2381      	movs	r3, #129	; 0x81
   17dba:	f014 fbee 	bl	2c59a <printk>
   17dbe:	4808      	ldr	r0, [pc, #32]	; (17de0 <malloc_prepare+0x40>)
   17dc0:	f014 fbeb 	bl	2c59a <printk>
   17dc4:	4804      	ldr	r0, [pc, #16]	; (17dd8 <malloc_prepare+0x38>)
   17dc6:	2181      	movs	r1, #129	; 0x81
   17dc8:	f014 fe28 	bl	2ca1c <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   17dcc:	2000      	movs	r0, #0
   17dce:	bd08      	pop	{r3, pc}
   17dd0:	20008c21 	.word	0x20008c21
   17dd4:	00034808 	.word	0x00034808
   17dd8:	000347d8 	.word	0x000347d8
   17ddc:	00032486 	.word	0x00032486
   17de0:	0003484f 	.word	0x0003484f

00017de4 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   17de4:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   17de6:	4c07      	ldr	r4, [pc, #28]	; (17e04 <_sbrk+0x20>)
   17de8:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   17dea:	18c2      	adds	r2, r0, r3
   17dec:	4806      	ldr	r0, [pc, #24]	; (17e08 <_sbrk+0x24>)
   17dee:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   17df2:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
   17df6:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
   17df8:	bf3a      	itte	cc
   17dfa:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   17dfc:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   17dfe:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
   17e02:	bd10      	pop	{r4, pc}
   17e04:	20002cc4 	.word	0x20002cc4
   17e08:	20008c21 	.word	0x20008c21

00017e0c <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   17e0c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   17e0e:	4604      	mov	r4, r0
   17e10:	b958      	cbnz	r0, 17e2a <__retarget_lock_acquire_recursive+0x1e>
   17e12:	490a      	ldr	r1, [pc, #40]	; (17e3c <__retarget_lock_acquire_recursive+0x30>)
   17e14:	480a      	ldr	r0, [pc, #40]	; (17e40 <__retarget_lock_acquire_recursive+0x34>)
   17e16:	4a0b      	ldr	r2, [pc, #44]	; (17e44 <__retarget_lock_acquire_recursive+0x38>)
   17e18:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   17e1c:	f014 fbbd 	bl	2c59a <printk>
   17e20:	4808      	ldr	r0, [pc, #32]	; (17e44 <__retarget_lock_acquire_recursive+0x38>)
   17e22:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   17e26:	f014 fdf9 	bl	2ca1c <assert_post_action>
   17e2a:	f04f 32ff 	mov.w	r2, #4294967295
   17e2e:	4620      	mov	r0, r4
   17e30:	f04f 33ff 	mov.w	r3, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   17e34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17e38:	f00d bcb0 	b.w	2579c <z_impl_k_mutex_lock>
   17e3c:	000348d7 	.word	0x000348d7
   17e40:	00032486 	.word	0x00032486
   17e44:	000347d8 	.word	0x000347d8

00017e48 <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   17e48:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   17e4a:	4604      	mov	r4, r0
   17e4c:	b958      	cbnz	r0, 17e66 <__retarget_lock_release_recursive+0x1e>
   17e4e:	4908      	ldr	r1, [pc, #32]	; (17e70 <__retarget_lock_release_recursive+0x28>)
   17e50:	4808      	ldr	r0, [pc, #32]	; (17e74 <__retarget_lock_release_recursive+0x2c>)
   17e52:	4a09      	ldr	r2, [pc, #36]	; (17e78 <__retarget_lock_release_recursive+0x30>)
   17e54:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   17e58:	f014 fb9f 	bl	2c59a <printk>
   17e5c:	4806      	ldr	r0, [pc, #24]	; (17e78 <__retarget_lock_release_recursive+0x30>)
   17e5e:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   17e62:	f014 fddb 	bl	2ca1c <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   17e66:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   17e68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17e6c:	f00d bd96 	b.w	2599c <z_impl_k_mutex_unlock>
   17e70:	000348d7 	.word	0x000348d7
   17e74:	00032486 	.word	0x00032486
   17e78:	000347d8 	.word	0x000347d8

00017e7c <nordicsemi_nrf52_init>:
	__asm__ volatile(
   17e7c:	f04f 0340 	mov.w	r3, #64	; 0x40
   17e80:	f3ef 8111 	mrs	r1, BASEPRI
   17e84:	f383 8812 	msr	BASEPRI_MAX, r3
   17e88:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   17e8c:	4a0f      	ldr	r2, [pc, #60]	; (17ecc <nordicsemi_nrf52_init+0x50>)
   17e8e:	2301      	movs	r3, #1
   17e90:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   17e94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   17e98:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17e9c:	4a0c      	ldr	r2, [pc, #48]	; (17ed0 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17e9e:	6812      	ldr	r2, [r2, #0]
   17ea0:	2a08      	cmp	r2, #8
   17ea2:	d108      	bne.n	17eb6 <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   17ea4:	4a0b      	ldr	r2, [pc, #44]	; (17ed4 <nordicsemi_nrf52_init+0x58>)
   17ea6:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
   17ea8:	2a05      	cmp	r2, #5
   17eaa:	d804      	bhi.n	17eb6 <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
   17eac:	480a      	ldr	r0, [pc, #40]	; (17ed8 <nordicsemi_nrf52_init+0x5c>)
   17eae:	5c82      	ldrb	r2, [r0, r2]
   17eb0:	b10a      	cbz	r2, 17eb6 <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
   17eb2:	4a0a      	ldr	r2, [pc, #40]	; (17edc <nordicsemi_nrf52_init+0x60>)
   17eb4:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
   17eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17eba:	2201      	movs	r2, #1
   17ebc:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
   17ec0:	f381 8811 	msr	BASEPRI, r1
   17ec4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   17ec8:	2000      	movs	r0, #0
   17eca:	4770      	bx	lr
   17ecc:	4001e000 	.word	0x4001e000
   17ed0:	10000130 	.word	0x10000130
   17ed4:	10000134 	.word	0x10000134
   17ed8:	00034925 	.word	0x00034925
   17edc:	40000638 	.word	0x40000638

00017ee0 <sys_arch_reboot>:
    *p_gpregret = val;
   17ee0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17ee4:	b2c0      	uxtb	r0, r0
   17ee6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   17eea:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   17eee:	4905      	ldr	r1, [pc, #20]	; (17f04 <sys_arch_reboot+0x24>)
   17ef0:	4b05      	ldr	r3, [pc, #20]	; (17f08 <sys_arch_reboot+0x28>)
   17ef2:	68ca      	ldr	r2, [r1, #12]
   17ef4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17ef8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   17efa:	60cb      	str	r3, [r1, #12]
   17efc:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   17f00:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   17f02:	e7fd      	b.n	17f00 <sys_arch_reboot+0x20>
   17f04:	e000ed00 	.word	0xe000ed00
   17f08:	05fa0004 	.word	0x05fa0004

00017f0c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   17f0c:	b120      	cbz	r0, 17f18 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   17f0e:	4b03      	ldr	r3, [pc, #12]	; (17f1c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   17f10:	0180      	lsls	r0, r0, #6
   17f12:	f043 0301 	orr.w	r3, r3, #1
   17f16:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   17f18:	4770      	bx	lr
   17f1a:	bf00      	nop
   17f1c:	00030e30 	.word	0x00030e30

00017f20 <board_nrf52840dongle_nrf52840_init>:

#if NRF_POWER_HAS_MAINREGSTATUS
NRF_STATIC_INLINE
nrf_power_mainregstatus_t nrf_power_mainregstatus_get(NRF_POWER_Type const * p_reg)
{
    return (nrf_power_mainregstatus_t)(((p_reg->MAINREGSTATUS) &
   17f20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17f24:	f8d3 3640 	ldr.w	r3, [r3, #1600]	; 0x640
	/* if the nrf52840dongle_nrf52840 board is powered from USB
	 * (high voltage mode), GPIO output voltage is set to 1.8 volts by
	 * default and that is not enough to turn the green and blue LEDs on.
	 * Increase GPIO voltage to 3.0 volts.
	 */
	if ((nrf_power_mainregstatus_get(NRF_POWER) ==
   17f28:	07db      	lsls	r3, r3, #31
   17f2a:	d52e      	bpl.n	17f8a <board_nrf52840dongle_nrf52840_init+0x6a>
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
	    ((NRF_UICR->REGOUT0 & UICR_REGOUT0_VOUT_Msk) ==
   17f2c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   17f30:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
   17f34:	f003 0307 	and.w	r3, r3, #7
	     NRF_POWER_MAINREGSTATUS_HIGH) &&
   17f38:	2b07      	cmp	r3, #7
   17f3a:	d126      	bne.n	17f8a <board_nrf52840dongle_nrf52840_init+0x6a>
	     (UICR_REGOUT0_VOUT_DEFAULT << UICR_REGOUT0_VOUT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   17f3c:	4b14      	ldr	r3, [pc, #80]	; (17f90 <board_nrf52840dongle_nrf52840_init+0x70>)
   17f3e:	2201      	movs	r2, #1
   17f40:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   17f44:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   17f48:	2a00      	cmp	r2, #0
   17f4a:	d0fb      	beq.n	17f44 <board_nrf52840dongle_nrf52840_init+0x24>
			;
		}

		NRF_UICR->REGOUT0 =
		    (NRF_UICR->REGOUT0 & ~((uint32_t)UICR_REGOUT0_VOUT_Msk)) |
   17f4c:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   17f50:	f8d1 2304 	ldr.w	r2, [r1, #772]	; 0x304
   17f54:	f022 0207 	bic.w	r2, r2, #7
   17f58:	f042 0204 	orr.w	r2, r2, #4
		NRF_UICR->REGOUT0 =
   17f5c:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
		    (UICR_REGOUT0_VOUT_3V0 << UICR_REGOUT0_VOUT_Pos);

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   17f60:	2200      	movs	r2, #0
   17f62:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   17f66:	4a0a      	ldr	r2, [pc, #40]	; (17f90 <board_nrf52840dongle_nrf52840_init+0x70>)
   17f68:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   17f6c:	2b00      	cmp	r3, #0
   17f6e:	d0fb      	beq.n	17f68 <board_nrf52840dongle_nrf52840_init+0x48>
   17f70:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   17f74:	4907      	ldr	r1, [pc, #28]	; (17f94 <board_nrf52840dongle_nrf52840_init+0x74>)
   17f76:	4b08      	ldr	r3, [pc, #32]	; (17f98 <board_nrf52840dongle_nrf52840_init+0x78>)
   17f78:	68ca      	ldr	r2, [r1, #12]
   17f7a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   17f7e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   17f80:	60cb      	str	r3, [r1, #12]
   17f82:	f3bf 8f4f 	dsb	sy
    __NOP();
   17f86:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   17f88:	e7fd      	b.n	17f86 <board_nrf52840dongle_nrf52840_init+0x66>
		/* a reset is required for changes to take effect */
		NVIC_SystemReset();
	}

	return 0;
}
   17f8a:	2000      	movs	r0, #0
   17f8c:	4770      	bx	lr
   17f8e:	bf00      	nop
   17f90:	4001e000 	.word	0x4001e000
   17f94:	e000ed00 	.word	0xe000ed00
   17f98:	05fa0004 	.word	0x05fa0004

00017f9c <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   17f9c:	4b0e      	ldr	r3, [pc, #56]	; (17fd8 <bt_hex_real+0x3c>)
   17f9e:	2940      	cmp	r1, #64	; 0x40
{
   17fa0:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   17fa2:	bf28      	it	cs
   17fa4:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   17fa6:	4c0d      	ldr	r4, [pc, #52]	; (17fdc <bt_hex_real+0x40>)
   17fa8:	1846      	adds	r6, r0, r1
   17faa:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   17fac:	42b0      	cmp	r0, r6
   17fae:	f103 0302 	add.w	r3, r3, #2
   17fb2:	d104      	bne.n	17fbe <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   17fb4:	2300      	movs	r3, #0
   17fb6:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   17fba:	4807      	ldr	r0, [pc, #28]	; (17fd8 <bt_hex_real+0x3c>)
   17fbc:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   17fbe:	7802      	ldrb	r2, [r0, #0]
   17fc0:	0912      	lsrs	r2, r2, #4
   17fc2:	5ca2      	ldrb	r2, [r4, r2]
   17fc4:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   17fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
   17fcc:	f002 020f 	and.w	r2, r2, #15
   17fd0:	5ca2      	ldrb	r2, [r4, r2]
   17fd2:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   17fd6:	e7e9      	b.n	17fac <bt_hex_real+0x10>
   17fd8:	20003946 	.word	0x20003946
   17fdc:	00034970 	.word	0x00034970

00017fe0 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   17fe0:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   17fe2:	7803      	ldrb	r3, [r0, #0]
   17fe4:	b08b      	sub	sp, #44	; 0x2c
   17fe6:	4604      	mov	r4, r0
   17fe8:	ad07      	add	r5, sp, #28
   17fea:	2b03      	cmp	r3, #3
   17fec:	d821      	bhi.n	18032 <bt_addr_le_str_real+0x52>
   17fee:	e8df f003 	tbb	[pc, r3]
   17ff2:	1a02      	.short	0x1a02
   17ff4:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   17ff6:	4912      	ldr	r1, [pc, #72]	; (18040 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   17ff8:	4628      	mov	r0, r5
   17ffa:	f018 fb2b 	bl	30654 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   17ffe:	7863      	ldrb	r3, [r4, #1]
   18000:	9304      	str	r3, [sp, #16]
   18002:	78a3      	ldrb	r3, [r4, #2]
   18004:	9303      	str	r3, [sp, #12]
   18006:	78e3      	ldrb	r3, [r4, #3]
   18008:	9302      	str	r3, [sp, #8]
   1800a:	7923      	ldrb	r3, [r4, #4]
   1800c:	9301      	str	r3, [sp, #4]
   1800e:	7963      	ldrb	r3, [r4, #5]
   18010:	9300      	str	r3, [sp, #0]
   18012:	4a0c      	ldr	r2, [pc, #48]	; (18044 <bt_addr_le_str_real+0x64>)
   18014:	79a3      	ldrb	r3, [r4, #6]
   18016:	9505      	str	r5, [sp, #20]
   18018:	211e      	movs	r1, #30
   1801a:	480b      	ldr	r0, [pc, #44]	; (18048 <bt_addr_le_str_real+0x68>)
   1801c:	f014 faca 	bl	2c5b4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   18020:	4809      	ldr	r0, [pc, #36]	; (18048 <bt_addr_le_str_real+0x68>)
   18022:	b00b      	add	sp, #44	; 0x2c
   18024:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   18026:	4909      	ldr	r1, [pc, #36]	; (1804c <bt_addr_le_str_real+0x6c>)
   18028:	e7e6      	b.n	17ff8 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   1802a:	4909      	ldr	r1, [pc, #36]	; (18050 <bt_addr_le_str_real+0x70>)
   1802c:	e7e4      	b.n	17ff8 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   1802e:	4909      	ldr	r1, [pc, #36]	; (18054 <bt_addr_le_str_real+0x74>)
   18030:	e7e2      	b.n	17ff8 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   18032:	4a09      	ldr	r2, [pc, #36]	; (18058 <bt_addr_le_str_real+0x78>)
   18034:	210a      	movs	r1, #10
   18036:	4628      	mov	r0, r5
   18038:	f014 fabc 	bl	2c5b4 <snprintk>
		break;
   1803c:	e7df      	b.n	17ffe <bt_addr_le_str_real+0x1e>
   1803e:	bf00      	nop
   18040:	0003492b 	.word	0x0003492b
   18044:	0003494d 	.word	0x0003494d
   18048:	200039c7 	.word	0x200039c7
   1804c:	00034932 	.word	0x00034932
   18050:	00034939 	.word	0x00034939
   18054:	00034943 	.word	0x00034943
   18058:	00035810 	.word	0x00035810

0001805c <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   1805c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1805e:	460b      	mov	r3, r1
	switch (src->type) {
   18060:	7801      	ldrb	r1, [r0, #0]
   18062:	2901      	cmp	r1, #1
{
   18064:	4602      	mov	r2, r0
	switch (src->type) {
   18066:	d015      	beq.n	18094 <uuid_to_uuid128+0x38>
   18068:	2902      	cmp	r1, #2
   1806a:	d02b      	beq.n	180c4 <uuid_to_uuid128+0x68>
   1806c:	b989      	cbnz	r1, 18092 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   1806e:	4c1c      	ldr	r4, [pc, #112]	; (180e0 <uuid_to_uuid128+0x84>)
   18070:	461d      	mov	r5, r3
   18072:	f104 0710 	add.w	r7, r4, #16
   18076:	6820      	ldr	r0, [r4, #0]
   18078:	6861      	ldr	r1, [r4, #4]
   1807a:	462e      	mov	r6, r5
   1807c:	c603      	stmia	r6!, {r0, r1}
   1807e:	3408      	adds	r4, #8
   18080:	42bc      	cmp	r4, r7
   18082:	4635      	mov	r5, r6
   18084:	d1f7      	bne.n	18076 <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
   18086:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
   18088:	7821      	ldrb	r1, [r4, #0]
   1808a:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   1808c:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   1808e:	0a12      	lsrs	r2, r2, #8
   18090:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   18092:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
   18094:	4c12      	ldr	r4, [pc, #72]	; (180e0 <uuid_to_uuid128+0x84>)
   18096:	461d      	mov	r5, r3
   18098:	f104 0710 	add.w	r7, r4, #16
   1809c:	6820      	ldr	r0, [r4, #0]
   1809e:	6861      	ldr	r1, [r4, #4]
   180a0:	462e      	mov	r6, r5
   180a2:	c603      	stmia	r6!, {r0, r1}
   180a4:	3408      	adds	r4, #8
   180a6:	42bc      	cmp	r4, r7
   180a8:	4635      	mov	r5, r6
   180aa:	d1f7      	bne.n	1809c <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
   180ac:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
   180ae:	7821      	ldrb	r1, [r4, #0]
   180b0:	7031      	strb	r1, [r6, #0]
   180b2:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   180b6:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   180b8:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   180ba:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   180bc:	0a12      	lsrs	r2, r2, #8
   180be:	7399      	strb	r1, [r3, #14]
   180c0:	741a      	strb	r2, [r3, #16]
}
   180c2:	e7e6      	b.n	18092 <uuid_to_uuid128+0x36>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   180c4:	f100 0510 	add.w	r5, r0, #16
   180c8:	6810      	ldr	r0, [r2, #0]
   180ca:	6851      	ldr	r1, [r2, #4]
   180cc:	461c      	mov	r4, r3
   180ce:	c403      	stmia	r4!, {r0, r1}
   180d0:	3208      	adds	r2, #8
   180d2:	42aa      	cmp	r2, r5
   180d4:	4623      	mov	r3, r4
   180d6:	d1f7      	bne.n	180c8 <uuid_to_uuid128+0x6c>
   180d8:	7812      	ldrb	r2, [r2, #0]
   180da:	7022      	strb	r2, [r4, #0]
   180dc:	e7d9      	b.n	18092 <uuid_to_uuid128+0x36>
   180de:	bf00      	nop
   180e0:	000349a5 	.word	0x000349a5

000180e4 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   180e4:	b510      	push	{r4, lr}
   180e6:	4603      	mov	r3, r0
   180e8:	b086      	sub	sp, #24
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   180ea:	781c      	ldrb	r4, [r3, #0]
   180ec:	2c01      	cmp	r4, #1
{
   180ee:	4608      	mov	r0, r1
   180f0:	4611      	mov	r1, r2
	switch (uuid->type) {
   180f2:	d009      	beq.n	18108 <bt_uuid_to_str+0x24>
   180f4:	2c02      	cmp	r4, #2
   180f6:	d00a      	beq.n	1810e <bt_uuid_to_str+0x2a>
   180f8:	b9fc      	cbnz	r4, 1813a <bt_uuid_to_str+0x56>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   180fa:	885b      	ldrh	r3, [r3, #2]
   180fc:	4a12      	ldr	r2, [pc, #72]	; (18148 <bt_uuid_to_str+0x64>)
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   180fe:	b006      	add	sp, #24
   18100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   18104:	f014 ba56 	b.w	2c5b4 <snprintk>
   18108:	685b      	ldr	r3, [r3, #4]
   1810a:	4a10      	ldr	r2, [pc, #64]	; (1814c <bt_uuid_to_str+0x68>)
   1810c:	e7f7      	b.n	180fe <bt_uuid_to_str+0x1a>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   1810e:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   18112:	9204      	str	r2, [sp, #16]
   18114:	f8d3 2003 	ldr.w	r2, [r3, #3]
   18118:	9203      	str	r2, [sp, #12]
   1811a:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   1811e:	9202      	str	r2, [sp, #8]
   18120:	f8b3 2009 	ldrh.w	r2, [r3, #9]
   18124:	9201      	str	r2, [sp, #4]
   18126:	f8b3 200b 	ldrh.w	r2, [r3, #11]
   1812a:	9200      	str	r2, [sp, #0]
   1812c:	f8d3 300d 	ldr.w	r3, [r3, #13]
   18130:	4a07      	ldr	r2, [pc, #28]	; (18150 <bt_uuid_to_str+0x6c>)
   18132:	f014 fa3f 	bl	2c5b4 <snprintk>
}
   18136:	b006      	add	sp, #24
   18138:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
   1813a:	2100      	movs	r1, #0
   1813c:	b006      	add	sp, #24
   1813e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   18142:	f018 ba72 	b.w	3062a <memset>
   18146:	bf00      	nop
   18148:	00035660 	.word	0x00035660
   1814c:	0003400c 	.word	0x0003400c
   18150:	00034988 	.word	0x00034988

00018154 <bt_addr_le_from_str>:

	return 0;
}

int bt_addr_le_from_str(const char *str, const char *type, bt_addr_le_t *addr)
{
   18154:	b538      	push	{r3, r4, r5, lr}
   18156:	460c      	mov	r4, r1
	int err;

	err = bt_addr_from_str(str, &addr->a);
   18158:	1c51      	adds	r1, r2, #1
{
   1815a:	4615      	mov	r5, r2
	err = bt_addr_from_str(str, &addr->a);
   1815c:	f016 f8a6 	bl	2e2ac <bt_addr_from_str>
	if (err < 0) {
   18160:	2800      	cmp	r0, #0
   18162:	db06      	blt.n	18172 <bt_addr_le_from_str+0x1e>
		return err;
	}

	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   18164:	491c      	ldr	r1, [pc, #112]	; (181d8 <bt_addr_le_from_str+0x84>)
   18166:	4620      	mov	r0, r4
   18168:	f7f5 f91a 	bl	d3a0 <strcmp>
   1816c:	b910      	cbnz	r0, 18174 <bt_addr_le_from_str+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
   1816e:	2000      	movs	r0, #0
   18170:	7028      	strb	r0, [r5, #0]
	} else {
		return -EINVAL;
	}

	return 0;
}
   18172:	bd38      	pop	{r3, r4, r5, pc}
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   18174:	4919      	ldr	r1, [pc, #100]	; (181dc <bt_addr_le_from_str+0x88>)
   18176:	4620      	mov	r0, r4
   18178:	f7f5 f912 	bl	d3a0 <strcmp>
   1817c:	2800      	cmp	r0, #0
   1817e:	d0f6      	beq.n	1816e <bt_addr_le_from_str+0x1a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   18180:	4917      	ldr	r1, [pc, #92]	; (181e0 <bt_addr_le_from_str+0x8c>)
   18182:	4620      	mov	r0, r4
   18184:	f7f5 f90c 	bl	d3a0 <strcmp>
   18188:	b918      	cbnz	r0, 18192 <bt_addr_le_from_str+0x3e>
		addr->type = BT_ADDR_LE_RANDOM;
   1818a:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_RANDOM_ID;
   1818c:	702b      	strb	r3, [r5, #0]
	return 0;
   1818e:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM_ID;
   18190:	e7ef      	b.n	18172 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   18192:	4914      	ldr	r1, [pc, #80]	; (181e4 <bt_addr_le_from_str+0x90>)
   18194:	4620      	mov	r0, r4
   18196:	f7f5 f903 	bl	d3a0 <strcmp>
   1819a:	2800      	cmp	r0, #0
   1819c:	d0f5      	beq.n	1818a <bt_addr_le_from_str+0x36>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   1819e:	4912      	ldr	r1, [pc, #72]	; (181e8 <bt_addr_le_from_str+0x94>)
   181a0:	4620      	mov	r0, r4
   181a2:	f7f5 f8fd 	bl	d3a0 <strcmp>
   181a6:	b908      	cbnz	r0, 181ac <bt_addr_le_from_str+0x58>
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   181a8:	2302      	movs	r3, #2
   181aa:	e7ef      	b.n	1818c <bt_addr_le_from_str+0x38>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   181ac:	490f      	ldr	r1, [pc, #60]	; (181ec <bt_addr_le_from_str+0x98>)
   181ae:	4620      	mov	r0, r4
   181b0:	f7f5 f8f6 	bl	d3a0 <strcmp>
   181b4:	2800      	cmp	r0, #0
   181b6:	d0f7      	beq.n	181a8 <bt_addr_le_from_str+0x54>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   181b8:	490d      	ldr	r1, [pc, #52]	; (181f0 <bt_addr_le_from_str+0x9c>)
   181ba:	4620      	mov	r0, r4
   181bc:	f7f5 f8f0 	bl	d3a0 <strcmp>
   181c0:	b908      	cbnz	r0, 181c6 <bt_addr_le_from_str+0x72>
		addr->type = BT_ADDR_LE_RANDOM_ID;
   181c2:	2303      	movs	r3, #3
   181c4:	e7e2      	b.n	1818c <bt_addr_le_from_str+0x38>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   181c6:	490b      	ldr	r1, [pc, #44]	; (181f4 <bt_addr_le_from_str+0xa0>)
   181c8:	4620      	mov	r0, r4
   181ca:	f7f5 f8e9 	bl	d3a0 <strcmp>
   181ce:	2800      	cmp	r0, #0
   181d0:	d0f7      	beq.n	181c2 <bt_addr_le_from_str+0x6e>
		return -EINVAL;
   181d2:	f06f 0015 	mvn.w	r0, #21
   181d6:	e7cc      	b.n	18172 <bt_addr_le_from_str+0x1e>
   181d8:	0003492b 	.word	0x0003492b
   181dc:	000349b6 	.word	0x000349b6
   181e0:	00034932 	.word	0x00034932
   181e4:	000349bf 	.word	0x000349bf
   181e8:	00034939 	.word	0x00034939
   181ec:	000349c8 	.word	0x000349c8
   181f0:	00034943 	.word	0x00034943
   181f4:	000349d4 	.word	0x000349d4

000181f8 <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   181f8:	b570      	push	{r4, r5, r6, lr}
   181fa:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   181fc:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   18200:	2b01      	cmp	r3, #1
{
   18202:	4605      	mov	r5, r0
   18204:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   18206:	d00e      	beq.n	18226 <bt_buf_get_rx+0x2e>
   18208:	2805      	cmp	r0, #5
   1820a:	d00c      	beq.n	18226 <bt_buf_get_rx+0x2e>
   1820c:	490d      	ldr	r1, [pc, #52]	; (18244 <bt_buf_get_rx+0x4c>)
   1820e:	4a0e      	ldr	r2, [pc, #56]	; (18248 <bt_buf_get_rx+0x50>)
   18210:	480e      	ldr	r0, [pc, #56]	; (1824c <bt_buf_get_rx+0x54>)
   18212:	2341      	movs	r3, #65	; 0x41
   18214:	f014 f9c1 	bl	2c59a <printk>
   18218:	480d      	ldr	r0, [pc, #52]	; (18250 <bt_buf_get_rx+0x58>)
   1821a:	f014 f9be 	bl	2c59a <printk>
   1821e:	480a      	ldr	r0, [pc, #40]	; (18248 <bt_buf_get_rx+0x50>)
   18220:	2141      	movs	r1, #65	; 0x41
   18222:	f014 fbfb 	bl	2ca1c <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   18226:	4623      	mov	r3, r4
   18228:	480a      	ldr	r0, [pc, #40]	; (18254 <bt_buf_get_rx+0x5c>)
   1822a:	4632      	mov	r2, r6
   1822c:	f017 fbfe 	bl	2fa2c <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   18230:	4604      	mov	r4, r0
   18232:	b120      	cbz	r0, 1823e <bt_buf_get_rx+0x46>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   18234:	2100      	movs	r1, #0
   18236:	3008      	adds	r0, #8
   18238:	f008 ff10 	bl	2105c <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1823c:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   1823e:	4620      	mov	r0, r4
   18240:	bd70      	pop	{r4, r5, r6, pc}
   18242:	bf00      	nop
   18244:	00034a0f 	.word	0x00034a0f
   18248:	000349e0 	.word	0x000349e0
   1824c:	00032486 	.word	0x00032486
   18250:	00034a54 	.word	0x00034a54
   18254:	20000a64 	.word	0x20000a64

00018258 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   18258:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   1825a:	490b      	ldr	r1, [pc, #44]	; (18288 <bt_buf_get_cmd_complete+0x30>)
{
   1825c:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   1825e:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   18262:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   18264:	b920      	cbnz	r0, 18270 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   18266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1826a:	2001      	movs	r0, #1
   1826c:	f7ff bfc4 	b.w	181f8 <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   18270:	f008 ff98 	bl	211a4 <net_buf_ref>
   18274:	2301      	movs	r3, #1
		buf->len = 0U;
   18276:	2100      	movs	r1, #0
   18278:	7503      	strb	r3, [r0, #20]
   1827a:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   1827c:	4604      	mov	r4, r0
   1827e:	3008      	adds	r0, #8
   18280:	f008 feec 	bl	2105c <net_buf_simple_reserve>
}
   18284:	4620      	mov	r0, r4
   18286:	bd10      	pop	{r4, pc}
   18288:	200002a8 	.word	0x200002a8

0001828c <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   1828c:	b570      	push	{r4, r5, r6, lr}
   1828e:	4604      	mov	r4, r0
	switch (evt) {
   18290:	2c0f      	cmp	r4, #15
{
   18292:	460d      	mov	r5, r1
   18294:	4610      	mov	r0, r2
   18296:	4619      	mov	r1, r3
	switch (evt) {
   18298:	d805      	bhi.n	182a6 <bt_buf_get_evt+0x1a>
   1829a:	2c0d      	cmp	r4, #13
   1829c:	d912      	bls.n	182c4 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   1829e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   182a2:	f7ff bfd9 	b.w	18258 <bt_buf_get_cmd_complete>
	switch (evt) {
   182a6:	2c13      	cmp	r4, #19
   182a8:	d10c      	bne.n	182c4 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   182aa:	480b      	ldr	r0, [pc, #44]	; (182d8 <bt_buf_get_evt+0x4c>)
   182ac:	f017 fbbe 	bl	2fa2c <net_buf_alloc_fixed>
			if (buf) {
   182b0:	4604      	mov	r4, r0
   182b2:	b128      	cbz	r0, 182c0 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   182b4:	2100      	movs	r1, #0
   182b6:	3008      	adds	r0, #8
   182b8:	f008 fed0 	bl	2105c <net_buf_simple_reserve>
   182bc:	2301      	movs	r3, #1
   182be:	7523      	strb	r3, [r4, #20]
}
   182c0:	4620      	mov	r0, r4
   182c2:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   182c4:	4602      	mov	r2, r0
   182c6:	460b      	mov	r3, r1
		if (discardable) {
   182c8:	b10d      	cbz	r5, 182ce <bt_buf_get_evt+0x42>
   182ca:	4804      	ldr	r0, [pc, #16]	; (182dc <bt_buf_get_evt+0x50>)
   182cc:	e7ee      	b.n	182ac <bt_buf_get_evt+0x20>
}
   182ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   182d2:	2001      	movs	r0, #1
   182d4:	f7ff bf90 	b.w	181f8 <bt_buf_get_rx>
   182d8:	20000a98 	.word	0x20000a98
   182dc:	200009c8 	.word	0x200009c8

000182e0 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   182e0:	4a08      	ldr	r2, [pc, #32]	; (18304 <hci_data_buf_overflow+0x24>)
   182e2:	6813      	ldr	r3, [r2, #0]
   182e4:	f013 0f06 	tst.w	r3, #6
   182e8:	d00a      	beq.n	18300 <hci_data_buf_overflow+0x20>
   182ea:	4907      	ldr	r1, [pc, #28]	; (18308 <hci_data_buf_overflow+0x28>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   182ec:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   182ee:	4807      	ldr	r0, [pc, #28]	; (1830c <hci_data_buf_overflow+0x2c>)
   182f0:	1a52      	subs	r2, r2, r1
   182f2:	0892      	lsrs	r2, r2, #2
   182f4:	0192      	lsls	r2, r2, #6
   182f6:	7819      	ldrb	r1, [r3, #0]
   182f8:	f042 0202 	orr.w	r2, r2, #2
   182fc:	f014 bcfc 	b.w	2ccf8 <log_1>
}
   18300:	4770      	bx	lr
   18302:	bf00      	nop
   18304:	200007b8 	.word	0x200007b8
   18308:	200007a8 	.word	0x200007a8
   1830c:	00034a7b 	.word	0x00034a7b

00018310 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   18310:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   18312:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   18314:	781a      	ldrb	r2, [r3, #0]
   18316:	b972      	cbnz	r2, 18336 <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18318:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   1831c:	4620      	mov	r0, r4
   1831e:	f002 fd01 	bl	1ad24 <bt_conn_lookup_handle>
	if (!conn) {
   18322:	4605      	mov	r5, r0
   18324:	b940      	cbnz	r0, 18338 <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   18326:	4b08      	ldr	r3, [pc, #32]	; (18348 <hci_disconn_complete_prio+0x38>)
   18328:	881a      	ldrh	r2, [r3, #0]
   1832a:	b922      	cbnz	r2, 18336 <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   1832c:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   18330:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   18334:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   18336:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   18338:	2101      	movs	r1, #1
   1833a:	f002 fcff 	bl	1ad3c <bt_conn_set_state>
	bt_conn_unref(conn);
   1833e:	4628      	mov	r0, r5
}
   18340:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   18344:	f002 bcc4 	b.w	1acd0 <bt_conn_unref>
   18348:	20003904 	.word	0x20003904

0001834c <le_data_len_change>:

#if defined(CONFIG_BT_DATA_LEN_UPDATE)
static void le_data_len_change(struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1834c:	6883      	ldr	r3, [r0, #8]
{
   1834e:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18350:	881c      	ldrh	r4, [r3, #0]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
   18352:	4620      	mov	r0, r4
   18354:	f002 fce6 	bl	1ad24 <bt_conn_lookup_handle>
	if (!conn) {
   18358:	b978      	cbnz	r0, 1837a <le_data_len_change+0x2e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1835a:	4a0a      	ldr	r2, [pc, #40]	; (18384 <le_data_len_change+0x38>)
   1835c:	6813      	ldr	r3, [r2, #0]
   1835e:	075b      	lsls	r3, r3, #29
   18360:	d00f      	beq.n	18382 <le_data_len_change+0x36>
   18362:	4b09      	ldr	r3, [pc, #36]	; (18388 <le_data_len_change+0x3c>)
   18364:	4809      	ldr	r0, [pc, #36]	; (1838c <le_data_len_change+0x40>)
   18366:	1ad2      	subs	r2, r2, r3
   18368:	0892      	lsrs	r2, r2, #2
   1836a:	0192      	lsls	r2, r2, #6
   1836c:	4621      	mov	r1, r4
   1836e:	f042 0201 	orr.w	r2, r2, #1
	conn->le.data_len.rx_max_time = max_rx_time;
	notify_le_data_len_updated(conn);
#endif

	bt_conn_unref(conn);
}
   18372:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18376:	f014 bcbf 	b.w	2ccf8 <log_1>
}
   1837a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1837e:	f002 bca7 	b.w	1acd0 <bt_conn_unref>
}
   18382:	bd10      	pop	{r4, pc}
   18384:	200007b8 	.word	0x200007b8
   18388:	200007a8 	.word	0x200007a8
   1838c:	00034aa3 	.word	0x00034aa3

00018390 <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
   18390:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   18392:	2101      	movs	r1, #1
   18394:	3008      	adds	r0, #8
   18396:	f008 ffcd 	bl	21334 <net_buf_simple_pull_mem>
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1839a:	4a08      	ldr	r2, [pc, #32]	; (183bc <hci_hardware_error+0x2c>)
   1839c:	6813      	ldr	r3, [r2, #0]
   1839e:	075b      	lsls	r3, r3, #29
   183a0:	d00b      	beq.n	183ba <hci_hardware_error+0x2a>
   183a2:	4b07      	ldr	r3, [pc, #28]	; (183c0 <hci_hardware_error+0x30>)
   183a4:	7801      	ldrb	r1, [r0, #0]
   183a6:	4807      	ldr	r0, [pc, #28]	; (183c4 <hci_hardware_error+0x34>)
   183a8:	1ad2      	subs	r2, r2, r3
   183aa:	0892      	lsrs	r2, r2, #2
   183ac:	0192      	lsls	r2, r2, #6
}
   183ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   183b2:	f042 0201 	orr.w	r2, r2, #1
   183b6:	f014 bc9f 	b.w	2ccf8 <log_1>
}
   183ba:	bd08      	pop	{r3, pc}
   183bc:	200007b8 	.word	0x200007b8
   183c0:	200007a8 	.word	0x200007a8
   183c4:	00034ac7 	.word	0x00034ac7

000183c8 <hci_vendor_event>:
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
   183c8:	4b0c      	ldr	r3, [pc, #48]	; (183fc <hci_vendor_event+0x34>)
   183ca:	681a      	ldr	r2, [r3, #0]
   183cc:	f012 0f06 	tst.w	r2, #6
{
   183d0:	b510      	push	{r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   183d2:	d012      	beq.n	183fa <hci_vendor_event+0x32>
   183d4:	4c0a      	ldr	r4, [pc, #40]	; (18400 <hci_vendor_event+0x38>)
   183d6:	8981      	ldrh	r1, [r0, #12]
   183d8:	6880      	ldr	r0, [r0, #8]
   183da:	1b1c      	subs	r4, r3, r4
   183dc:	f7ff fdde 	bl	17f9c <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   183e0:	f7fa f9a0 	bl	12724 <z_log_strdup>
   183e4:	08a4      	lsrs	r4, r4, #2
   183e6:	01a4      	lsls	r4, r4, #6
   183e8:	f044 0402 	orr.w	r4, r4, #2
   183ec:	4601      	mov	r1, r0
   183ee:	4622      	mov	r2, r4
   183f0:	4804      	ldr	r0, [pc, #16]	; (18404 <hci_vendor_event+0x3c>)
			bt_hex(buf->data, buf->len));
	}
}
   183f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   183f6:	f014 bc7f 	b.w	2ccf8 <log_1>
}
   183fa:	bd10      	pop	{r4, pc}
   183fc:	200007b8 	.word	0x200007b8
   18400:	200007a8 	.word	0x200007a8
   18404:	00034ae9 	.word	0x00034ae9

00018408 <handle_event>:
{
   18408:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1840a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1840e:	4605      	mov	r5, r0
   18410:	4608      	mov	r0, r1
		if (handler->event != event) {
   18412:	7811      	ldrb	r1, [r2, #0]
   18414:	42a9      	cmp	r1, r5
   18416:	d01e      	beq.n	18456 <handle_event+0x4e>
	for (i = 0; i < num_handlers; i++) {
   18418:	3208      	adds	r2, #8
   1841a:	4293      	cmp	r3, r2
   1841c:	d1f9      	bne.n	18412 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   1841e:	4b1b      	ldr	r3, [pc, #108]	; (1848c <handle_event+0x84>)
   18420:	681a      	ldr	r2, [r3, #0]
   18422:	f012 0f06 	tst.w	r2, #6
   18426:	d014      	beq.n	18452 <handle_event+0x4a>
   18428:	8986      	ldrh	r6, [r0, #12]
   1842a:	4c19      	ldr	r4, [pc, #100]	; (18490 <handle_event+0x88>)
   1842c:	6880      	ldr	r0, [r0, #8]
   1842e:	4631      	mov	r1, r6
   18430:	1b1c      	subs	r4, r3, r4
   18432:	f7ff fdb3 	bl	17f9c <bt_hex_real>
   18436:	f7fa f975 	bl	12724 <z_log_strdup>
   1843a:	08a4      	lsrs	r4, r4, #2
   1843c:	01a4      	lsls	r4, r4, #6
   1843e:	f044 0402 	orr.w	r4, r4, #2
   18442:	4603      	mov	r3, r0
   18444:	f8ad 4000 	strh.w	r4, [sp]
   18448:	4812      	ldr	r0, [pc, #72]	; (18494 <handle_event+0x8c>)
   1844a:	4632      	mov	r2, r6
   1844c:	4629      	mov	r1, r5
   1844e:	f014 fc80 	bl	2cd52 <log_3>
}
   18452:	b002      	add	sp, #8
   18454:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   18456:	8981      	ldrh	r1, [r0, #12]
   18458:	7853      	ldrb	r3, [r2, #1]
   1845a:	428b      	cmp	r3, r1
   1845c:	d910      	bls.n	18480 <handle_event+0x78>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1845e:	4b0b      	ldr	r3, [pc, #44]	; (1848c <handle_event+0x84>)
   18460:	681a      	ldr	r2, [r3, #0]
   18462:	0752      	lsls	r2, r2, #29
   18464:	d0f5      	beq.n	18452 <handle_event+0x4a>
   18466:	4a0a      	ldr	r2, [pc, #40]	; (18490 <handle_event+0x88>)
   18468:	480b      	ldr	r0, [pc, #44]	; (18498 <handle_event+0x90>)
   1846a:	1a9b      	subs	r3, r3, r2
   1846c:	089b      	lsrs	r3, r3, #2
   1846e:	019b      	lsls	r3, r3, #6
   18470:	f043 0301 	orr.w	r3, r3, #1
   18474:	462a      	mov	r2, r5
}
   18476:	b002      	add	sp, #8
   18478:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   1847c:	f014 bc50 	b.w	2cd20 <log_2>
		handler->handler(buf);
   18480:	6853      	ldr	r3, [r2, #4]
}
   18482:	b002      	add	sp, #8
   18484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   18488:	4718      	bx	r3
   1848a:	bf00      	nop
   1848c:	200007b8 	.word	0x200007b8
   18490:	200007a8 	.word	0x200007a8
   18494:	00034b2f 	.word	0x00034b2f
   18498:	00034b0d 	.word	0x00034b0d

0001849c <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   1849c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   184a0:	4e4c      	ldr	r6, [pc, #304]	; (185d4 <hci_rx_thread+0x138>)
   184a2:	4d4d      	ldr	r5, [pc, #308]	; (185d8 <hci_rx_thread+0x13c>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   184a4:	f8df a14c 	ldr.w	sl, [pc, #332]	; 185f4 <hci_rx_thread+0x158>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   184a8:	f8df b14c 	ldr.w	fp, [pc, #332]	; 185f8 <hci_rx_thread+0x15c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   184ac:	f8df 814c 	ldr.w	r8, [pc, #332]	; 185fc <hci_rx_thread+0x160>
   184b0:	1b75      	subs	r5, r6, r5
   184b2:	08ad      	lsrs	r5, r5, #2
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   184b4:	f04f 32ff 	mov.w	r2, #4294967295
   184b8:	f04f 33ff 	mov.w	r3, #4294967295
   184bc:	4650      	mov	r0, sl
   184be:	f008 fd99 	bl	20ff4 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   184c2:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   184c4:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   184c6:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   184c8:	d04c      	beq.n	18564 <hci_rx_thread+0xc8>
   184ca:	2903      	cmp	r1, #3
   184cc:	d179      	bne.n	185c2 <hci_rx_thread+0x126>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   184ce:	8983      	ldrh	r3, [r0, #12]
   184d0:	2b03      	cmp	r3, #3
   184d2:	d80c      	bhi.n	184ee <hci_rx_thread+0x52>
   184d4:	4941      	ldr	r1, [pc, #260]	; (185dc <hci_rx_thread+0x140>)
   184d6:	4842      	ldr	r0, [pc, #264]	; (185e0 <hci_rx_thread+0x144>)
   184d8:	f240 13b5 	movw	r3, #437	; 0x1b5
   184dc:	4642      	mov	r2, r8
   184de:	f014 f85c 	bl	2c59a <printk>
   184e2:	4040      	eors	r0, r0
   184e4:	f380 8811 	msr	BASEPRI, r0
   184e8:	f04f 0003 	mov.w	r0, #3
   184ec:	df02      	svc	2
   184ee:	2104      	movs	r1, #4
   184f0:	f104 0008 	add.w	r0, r4, #8
   184f4:	f008 ff1e 	bl	21334 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   184f8:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   184fa:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   184fc:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   18500:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   18502:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   18506:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   18508:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   1850a:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   1850c:	d00c      	beq.n	18528 <hci_rx_thread+0x8c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   1850e:	6833      	ldr	r3, [r6, #0]
   18510:	0758      	lsls	r0, r3, #29
   18512:	d005      	beq.n	18520 <hci_rx_thread+0x84>
   18514:	01ab      	lsls	r3, r5, #6
   18516:	4833      	ldr	r0, [pc, #204]	; (185e4 <hci_rx_thread+0x148>)
   18518:	f043 0301 	orr.w	r3, r3, #1
   1851c:	f014 fc00 	bl	2cd20 <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   18520:	4620      	mov	r0, r4
   18522:	f008 fdf9 	bl	21118 <net_buf_unref>
			break;
   18526:	e01a      	b.n	1855e <hci_rx_thread+0xc2>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   18528:	f002 fbfc 	bl	1ad24 <bt_conn_lookup_handle>
	if (!conn) {
   1852c:	4607      	mov	r7, r0
   1852e:	b950      	cbnz	r0, 18546 <hci_rx_thread+0xaa>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   18530:	6833      	ldr	r3, [r6, #0]
   18532:	0759      	lsls	r1, r3, #29
   18534:	d0f4      	beq.n	18520 <hci_rx_thread+0x84>
   18536:	01aa      	lsls	r2, r5, #6
   18538:	8ae1      	ldrh	r1, [r4, #22]
   1853a:	482b      	ldr	r0, [pc, #172]	; (185e8 <hci_rx_thread+0x14c>)
   1853c:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   18540:	f014 fbda 	bl	2ccf8 <log_1>
   18544:	e7ec      	b.n	18520 <hci_rx_thread+0x84>
	acl(buf)->index = bt_conn_index(conn);
   18546:	f002 fd0d 	bl	1af64 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1854a:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   1854e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   18550:	4621      	mov	r1, r4
   18552:	4638      	mov	r0, r7
   18554:	f002 fa6e 	bl	1aa34 <bt_conn_recv>
	bt_conn_unref(conn);
   18558:	4638      	mov	r0, r7
   1855a:	f002 fbb9 	bl	1acd0 <bt_conn_unref>
	z_impl_k_yield();
   1855e:	f00f f9b1 	bl	278c4 <z_impl_k_yield>
	while (1) {
   18562:	e7a7      	b.n	184b4 <hci_rx_thread+0x18>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   18564:	8983      	ldrh	r3, [r0, #12]
   18566:	2b01      	cmp	r3, #1
   18568:	d80c      	bhi.n	18584 <hci_rx_thread+0xe8>
   1856a:	491c      	ldr	r1, [pc, #112]	; (185dc <hci_rx_thread+0x140>)
   1856c:	481c      	ldr	r0, [pc, #112]	; (185e0 <hci_rx_thread+0x144>)
   1856e:	f640 1317 	movw	r3, #2327	; 0x917
   18572:	4642      	mov	r2, r8
   18574:	f014 f811 	bl	2c59a <printk>
   18578:	4040      	eors	r0, r0
   1857a:	f380 8811 	msr	BASEPRI, r0
   1857e:	f04f 0003 	mov.w	r0, #3
   18582:	df02      	svc	2
   18584:	2102      	movs	r1, #2
   18586:	f104 0008 	add.w	r0, r4, #8
   1858a:	f008 fed3 	bl	21334 <net_buf_simple_pull_mem>
   1858e:	4607      	mov	r7, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   18590:	7800      	ldrb	r0, [r0, #0]
   18592:	f015 febf 	bl	2e314 <bt_hci_evt_get_flags>
   18596:	0782      	lsls	r2, r0, #30
   18598:	d40c      	bmi.n	185b4 <hci_rx_thread+0x118>
   1859a:	4914      	ldr	r1, [pc, #80]	; (185ec <hci_rx_thread+0x150>)
   1859c:	4810      	ldr	r0, [pc, #64]	; (185e0 <hci_rx_thread+0x144>)
   1859e:	f640 131b 	movw	r3, #2331	; 0x91b
   185a2:	4642      	mov	r2, r8
   185a4:	f013 fff9 	bl	2c59a <printk>
   185a8:	4040      	eors	r0, r0
   185aa:	f380 8811 	msr	BASEPRI, r0
   185ae:	f04f 0003 	mov.w	r0, #3
   185b2:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   185b4:	7838      	ldrb	r0, [r7, #0]
   185b6:	2304      	movs	r3, #4
   185b8:	465a      	mov	r2, fp
   185ba:	4621      	mov	r1, r4
   185bc:	f7ff ff24 	bl	18408 <handle_event>
	net_buf_unref(buf);
   185c0:	e7ae      	b.n	18520 <hci_rx_thread+0x84>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   185c2:	6833      	ldr	r3, [r6, #0]
   185c4:	075b      	lsls	r3, r3, #29
   185c6:	d0ab      	beq.n	18520 <hci_rx_thread+0x84>
   185c8:	01aa      	lsls	r2, r5, #6
   185ca:	4809      	ldr	r0, [pc, #36]	; (185f0 <hci_rx_thread+0x154>)
   185cc:	f042 0201 	orr.w	r2, r2, #1
   185d0:	e7b6      	b.n	18540 <hci_rx_thread+0xa4>
   185d2:	bf00      	nop
   185d4:	200007b8 	.word	0x200007b8
   185d8:	200007a8 	.word	0x200007a8
   185dc:	00034b85 	.word	0x00034b85
   185e0:	00032486 	.word	0x00032486
   185e4:	00034b9e 	.word	0x00034b9e
   185e8:	00034bc2 	.word	0x00034bc2
   185ec:	00034be4 	.word	0x00034be4
   185f0:	00034c12 	.word	0x00034c12
   185f4:	200003dc 	.word	0x200003dc
   185f8:	000316ec 	.word	0x000316ec
   185fc:	00034b51 	.word	0x00034b51

00018600 <hci_le_meta_event>:
{
   18600:	b510      	push	{r4, lr}
   18602:	2101      	movs	r1, #1
   18604:	4604      	mov	r4, r0
   18606:	3008      	adds	r0, #8
   18608:	f008 fe94 	bl	21334 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   1860c:	4621      	mov	r1, r4
   1860e:	4a03      	ldr	r2, [pc, #12]	; (1861c <hci_le_meta_event+0x1c>)
   18610:	7800      	ldrb	r0, [r0, #0]
}
   18612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   18616:	2308      	movs	r3, #8
   18618:	f7ff bef6 	b.w	18408 <handle_event>
   1861c:	0003169c 	.word	0x0003169c

00018620 <hci_num_completed_packets>:
{
   18620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18624:	4e3e      	ldr	r6, [pc, #248]	; (18720 <hci_num_completed_packets+0x100>)
   18626:	4c3f      	ldr	r4, [pc, #252]	; (18724 <hci_num_completed_packets+0x104>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   18628:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   1862c:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 1872c <hci_num_completed_packets+0x10c>
   18630:	1b34      	subs	r4, r6, r4
   18632:	08a3      	lsrs	r3, r4, #2
	for (i = 0; i < evt->num_handles; i++) {
   18634:	2500      	movs	r5, #0
   18636:	9301      	str	r3, [sp, #4]
			tx->pending_no_cb = 0U;
   18638:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   1863a:	f898 3000 	ldrb.w	r3, [r8]
   1863e:	429d      	cmp	r5, r3
   18640:	db02      	blt.n	18648 <hci_num_completed_packets+0x28>
}
   18642:	b003      	add	sp, #12
   18644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   18648:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   1864c:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   18650:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   18654:	4658      	mov	r0, fp
   18656:	f002 fb65 	bl	1ad24 <bt_conn_lookup_handle>
		if (!conn) {
   1865a:	4604      	mov	r4, r0
   1865c:	b1d8      	cbz	r0, 18696 <hci_num_completed_packets+0x76>
			k_work_submit(&conn->tx_complete_work);
   1865e:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   18662:	2f00      	cmp	r7, #0
   18664:	d03b      	beq.n	186de <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   18666:	f04f 0240 	mov.w	r2, #64	; 0x40
   1866a:	f3ef 8111 	mrs	r1, BASEPRI
   1866e:	f382 8812 	msr	BASEPRI_MAX, r2
   18672:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   18676:	69e2      	ldr	r2, [r4, #28]
   18678:	b1d2      	cbz	r2, 186b0 <hci_num_completed_packets+0x90>
				conn->pending_no_cb--;
   1867a:	3a01      	subs	r2, #1
   1867c:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   1867e:	f381 8811 	msr	BASEPRI, r1
   18682:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   18686:	4620      	mov	r0, r4
   18688:	f002 f954 	bl	1a934 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   1868c:	3f01      	subs	r7, #1
   1868e:	f00d fbb3 	bl	25df8 <z_impl_k_sem_give>
   18692:	b2bf      	uxth	r7, r7
   18694:	e7e5      	b.n	18662 <hci_num_completed_packets+0x42>
			BT_ERR("No connection for handle %u", handle);
   18696:	6833      	ldr	r3, [r6, #0]
   18698:	075a      	lsls	r2, r3, #29
   1869a:	d007      	beq.n	186ac <hci_num_completed_packets+0x8c>
   1869c:	9b01      	ldr	r3, [sp, #4]
   1869e:	4822      	ldr	r0, [pc, #136]	; (18728 <hci_num_completed_packets+0x108>)
   186a0:	019a      	lsls	r2, r3, #6
   186a2:	f042 0201 	orr.w	r2, r2, #1
   186a6:	4659      	mov	r1, fp
   186a8:	f014 fb26 	bl	2ccf8 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   186ac:	3501      	adds	r5, #1
   186ae:	e7c4      	b.n	1863a <hci_num_completed_packets+0x1a>
Z_GENLIST_IS_EMPTY(slist)
   186b0:	6962      	ldr	r2, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   186b2:	b12a      	cbz	r2, 186c0 <hci_num_completed_packets+0xa0>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   186b4:	69a0      	ldr	r0, [r4, #24]
   186b6:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   186b8:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   186ba:	4282      	cmp	r2, r0
	list->tail = node;
   186bc:	bf08      	it	eq
   186be:	61a3      	streq	r3, [r4, #24]
   186c0:	f381 8811 	msr	BASEPRI, r1
   186c4:	f3bf 8f6f 	isb	sy
			if (!node) {
   186c8:	b96a      	cbnz	r2, 186e6 <hci_num_completed_packets+0xc6>
				BT_ERR("packets count mismatch");
   186ca:	6832      	ldr	r2, [r6, #0]
   186cc:	0753      	lsls	r3, r2, #29
   186ce:	d006      	beq.n	186de <hci_num_completed_packets+0xbe>
   186d0:	9b01      	ldr	r3, [sp, #4]
   186d2:	0199      	lsls	r1, r3, #6
   186d4:	f041 0101 	orr.w	r1, r1, #1
   186d8:	4650      	mov	r0, sl
   186da:	f014 fb00 	bl	2ccde <log_0>
		bt_conn_unref(conn);
   186de:	4620      	mov	r0, r4
   186e0:	f002 faf6 	bl	1acd0 <bt_conn_unref>
   186e4:	e7e2      	b.n	186ac <hci_num_completed_packets+0x8c>
	__asm__ volatile(
   186e6:	f04f 0140 	mov.w	r1, #64	; 0x40
   186ea:	f3ef 8011 	mrs	r0, BASEPRI
   186ee:	f381 8812 	msr	BASEPRI_MAX, r1
   186f2:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   186f6:	68d1      	ldr	r1, [r2, #12]
   186f8:	61e1      	str	r1, [r4, #28]
	parent->next = child;
   186fa:	f8c2 9000 	str.w	r9, [r2]
Z_GENLIST_APPEND(slist, snode)
   186fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   18700:	f8c2 900c 	str.w	r9, [r2, #12]
   18704:	b949      	cbnz	r1, 1871a <hci_num_completed_packets+0xfa>
	list->head = node;
   18706:	e9c4 2208 	strd	r2, r2, [r4, #32]
	__asm__ volatile(
   1870a:	f380 8811 	msr	BASEPRI, r0
   1870e:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   18712:	4658      	mov	r0, fp
   18714:	f00d fed0 	bl	264b8 <k_work_submit>
   18718:	e7b5      	b.n	18686 <hci_num_completed_packets+0x66>
	parent->next = child;
   1871a:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1871c:	6262      	str	r2, [r4, #36]	; 0x24
}
   1871e:	e7f4      	b.n	1870a <hci_num_completed_packets+0xea>
   18720:	200007b8 	.word	0x200007b8
   18724:	200007a8 	.word	0x200007a8
   18728:	00034c26 	.word	0x00034c26
   1872c:	00034c42 	.word	0x00034c42

00018730 <hci_disconn_complete>:
{
   18730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   18732:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   18734:	7835      	ldrb	r5, [r6, #0]
   18736:	bb95      	cbnz	r5, 1879e <hci_disconn_complete+0x6e>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18738:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   1873c:	4638      	mov	r0, r7
   1873e:	f002 faf1 	bl	1ad24 <bt_conn_lookup_handle>
	if (!conn) {
   18742:	4604      	mov	r4, r0
   18744:	b978      	cbnz	r0, 18766 <hci_disconn_complete+0x36>
		BT_ERR("Unable to look up conn with handle %u", handle);
   18746:	4a16      	ldr	r2, [pc, #88]	; (187a0 <hci_disconn_complete+0x70>)
   18748:	6813      	ldr	r3, [r2, #0]
   1874a:	0759      	lsls	r1, r3, #29
   1874c:	d027      	beq.n	1879e <hci_disconn_complete+0x6e>
   1874e:	4b15      	ldr	r3, [pc, #84]	; (187a4 <hci_disconn_complete+0x74>)
   18750:	4815      	ldr	r0, [pc, #84]	; (187a8 <hci_disconn_complete+0x78>)
   18752:	1ad2      	subs	r2, r2, r3
   18754:	0892      	lsrs	r2, r2, #2
   18756:	0192      	lsls	r2, r2, #6
   18758:	4639      	mov	r1, r7
   1875a:	f042 0201 	orr.w	r2, r2, #1
}
   1875e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   18762:	f014 bac9 	b.w	2ccf8 <log_1>
	conn->err = evt->reason;
   18766:	78f3      	ldrb	r3, [r6, #3]
   18768:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1876a:	4629      	mov	r1, r5
   1876c:	f002 fae6 	bl	1ad3c <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   18770:	78a3      	ldrb	r3, [r4, #2]
   18772:	2b01      	cmp	r3, #1
   18774:	d004      	beq.n	18780 <hci_disconn_complete+0x50>
	bt_conn_unref(conn);
   18776:	4620      	mov	r0, r4
}
   18778:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   1877c:	f002 baa8 	b.w	1acd0 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18780:	f3bf 8f5b 	dmb	ish
   18784:	6863      	ldr	r3, [r4, #4]
   18786:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1878a:	07db      	lsls	r3, r3, #31
   1878c:	d5f3      	bpl.n	18776 <hci_disconn_complete+0x46>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1878e:	4620      	mov	r0, r4
   18790:	2102      	movs	r1, #2
   18792:	f002 fad3 	bl	1ad3c <bt_conn_set_state>
		bt_le_scan_update(false);
   18796:	4628      	mov	r0, r5
   18798:	f001 fde6 	bl	1a368 <bt_le_scan_update>
   1879c:	e7eb      	b.n	18776 <hci_disconn_complete+0x46>
}
   1879e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   187a0:	200007b8 	.word	0x200007b8
   187a4:	200007a8 	.word	0x200007a8
   187a8:	00034c59 	.word	0x00034c59

000187ac <le_conn_update_complete>:
{
   187ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   187ae:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   187b0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   187b4:	4630      	mov	r0, r6
   187b6:	f002 fab5 	bl	1ad24 <bt_conn_lookup_handle>
	if (!conn) {
   187ba:	4604      	mov	r4, r0
   187bc:	b978      	cbnz	r0, 187de <le_conn_update_complete+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   187be:	4a24      	ldr	r2, [pc, #144]	; (18850 <le_conn_update_complete+0xa4>)
   187c0:	6813      	ldr	r3, [r2, #0]
   187c2:	0759      	lsls	r1, r3, #29
   187c4:	d009      	beq.n	187da <le_conn_update_complete+0x2e>
   187c6:	4b23      	ldr	r3, [pc, #140]	; (18854 <le_conn_update_complete+0xa8>)
   187c8:	4823      	ldr	r0, [pc, #140]	; (18858 <le_conn_update_complete+0xac>)
   187ca:	1ad2      	subs	r2, r2, r3
   187cc:	0892      	lsrs	r2, r2, #2
   187ce:	0192      	lsls	r2, r2, #6
   187d0:	f042 0201 	orr.w	r2, r2, #1
   187d4:	4631      	mov	r1, r6
   187d6:	f014 fa8f 	bl	2ccf8 <log_1>
}
   187da:	b002      	add	sp, #8
   187dc:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   187de:	782b      	ldrb	r3, [r5, #0]
   187e0:	b9bb      	cbnz	r3, 18812 <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   187e2:	792a      	ldrb	r2, [r5, #4]
   187e4:	78eb      	ldrb	r3, [r5, #3]
   187e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   187ea:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   187ee:	79aa      	ldrb	r2, [r5, #6]
   187f0:	796b      	ldrb	r3, [r5, #5]
   187f2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   187f6:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   187fa:	79eb      	ldrb	r3, [r5, #7]
   187fc:	7a2a      	ldrb	r2, [r5, #8]
   187fe:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18802:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   18806:	f002 fc15 	bl	1b034 <notify_le_param_updated>
	bt_conn_unref(conn);
   1880a:	4620      	mov	r0, r4
   1880c:	f002 fa60 	bl	1acd0 <bt_conn_unref>
   18810:	e7e3      	b.n	187da <le_conn_update_complete+0x2e>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   18812:	2b1a      	cmp	r3, #26
   18814:	d1f9      	bne.n	1880a <le_conn_update_complete+0x5e>
   18816:	78c3      	ldrb	r3, [r0, #3]
   18818:	2b01      	cmp	r3, #1
   1881a:	d1f6      	bne.n	1880a <le_conn_update_complete+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1881c:	f3bf 8f5b 	dmb	ish
   18820:	1d03      	adds	r3, r0, #4
   18822:	e853 2f00 	ldrex	r2, [r3]
   18826:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   1882a:	e843 1500 	strex	r5, r1, [r3]
   1882e:	2d00      	cmp	r5, #0
   18830:	d1f7      	bne.n	18822 <le_conn_update_complete+0x76>
   18832:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   18836:	0553      	lsls	r3, r2, #21
   18838:	d4e7      	bmi.n	1880a <le_conn_update_complete+0x5e>
		param.interval_min = conn->le.interval_min;
   1883a:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1883e:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   18840:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   18842:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   18846:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   18848:	f003 f9e4 	bl	1bc14 <bt_l2cap_update_conn_param>
   1884c:	e7dd      	b.n	1880a <le_conn_update_complete+0x5e>
   1884e:	bf00      	nop
   18850:	200007b8 	.word	0x200007b8
   18854:	200007a8 	.word	0x200007a8
   18858:	00034aa3 	.word	0x00034aa3

0001885c <hci_cmd_done>:
{
   1885c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18860:	4606      	mov	r6, r0
   18862:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   18864:	7990      	ldrb	r0, [r2, #6]
   18866:	f8df 8144 	ldr.w	r8, [pc, #324]	; 189ac <hci_cmd_done+0x150>
{
   1886a:	460f      	mov	r7, r1
   1886c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   1886e:	f008 fa51 	bl	20d14 <net_buf_pool_get>
   18872:	4580      	cmp	r8, r0
   18874:	d01a      	beq.n	188ac <hci_cmd_done+0x50>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   18876:	4b48      	ldr	r3, [pc, #288]	; (18998 <hci_cmd_done+0x13c>)
   18878:	681a      	ldr	r2, [r3, #0]
   1887a:	f012 0f06 	tst.w	r2, #6
   1887e:	d012      	beq.n	188a6 <hci_cmd_done+0x4a>
   18880:	4d46      	ldr	r5, [pc, #280]	; (1899c <hci_cmd_done+0x140>)
   18882:	79a0      	ldrb	r0, [r4, #6]
   18884:	9600      	str	r6, [sp, #0]
   18886:	1b5d      	subs	r5, r3, r5
   18888:	08ad      	lsrs	r5, r5, #2
   1888a:	9001      	str	r0, [sp, #4]
   1888c:	f008 fa42 	bl	20d14 <net_buf_pool_get>
   18890:	01ad      	lsls	r5, r5, #6
   18892:	f045 0502 	orr.w	r5, r5, #2
   18896:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1889a:	462b      	mov	r3, r5
   1889c:	4840      	ldr	r0, [pc, #256]	; (189a0 <hci_cmd_done+0x144>)
   1889e:	2204      	movs	r2, #4
   188a0:	4669      	mov	r1, sp
   188a2:	f014 fa72 	bl	2cd8a <log_n>
}
   188a6:	b005      	add	sp, #20
   188a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   188ac:	4620      	mov	r0, r4
   188ae:	f008 fa39 	bl	20d24 <net_buf_id>
   188b2:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 189b0 <hci_cmd_done+0x154>
   188b6:	f04f 090c 	mov.w	r9, #12
   188ba:	fb09 8000 	mla	r0, r9, r0, r8
   188be:	4645      	mov	r5, r8
   188c0:	8843      	ldrh	r3, [r0, #2]
   188c2:	42b3      	cmp	r3, r6
   188c4:	d016      	beq.n	188f4 <hci_cmd_done+0x98>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   188c6:	4b34      	ldr	r3, [pc, #208]	; (18998 <hci_cmd_done+0x13c>)
   188c8:	681a      	ldr	r2, [r3, #0]
   188ca:	f012 0f06 	tst.w	r2, #6
   188ce:	d0ea      	beq.n	188a6 <hci_cmd_done+0x4a>
   188d0:	4d32      	ldr	r5, [pc, #200]	; (1899c <hci_cmd_done+0x140>)
   188d2:	4620      	mov	r0, r4
   188d4:	1b5d      	subs	r5, r3, r5
   188d6:	f008 fa25 	bl	20d24 <net_buf_id>
   188da:	08ad      	lsrs	r5, r5, #2
   188dc:	fb09 8000 	mla	r0, r9, r0, r8
   188e0:	01ad      	lsls	r5, r5, #6
   188e2:	f045 0502 	orr.w	r5, r5, #2
   188e6:	8842      	ldrh	r2, [r0, #2]
   188e8:	482e      	ldr	r0, [pc, #184]	; (189a4 <hci_cmd_done+0x148>)
   188ea:	462b      	mov	r3, r5
   188ec:	4631      	mov	r1, r6
   188ee:	f014 fa17 	bl	2cd20 <log_2>
   188f2:	e7d8      	b.n	188a6 <hci_cmd_done+0x4a>
	if (bt_dev.sent_cmd) {
   188f4:	4e2c      	ldr	r6, [pc, #176]	; (189a8 <hci_cmd_done+0x14c>)
   188f6:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   188fa:	b120      	cbz	r0, 18906 <hci_cmd_done+0xaa>
		net_buf_unref(bt_dev.sent_cmd);
   188fc:	f008 fc0c 	bl	21118 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   18900:	2300      	movs	r3, #0
   18902:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   18906:	4620      	mov	r0, r4
   18908:	f008 fa0c 	bl	20d24 <net_buf_id>
   1890c:	260c      	movs	r6, #12
   1890e:	fb06 5000 	mla	r0, r6, r0, r5
   18912:	6843      	ldr	r3, [r0, #4]
   18914:	b1e3      	cbz	r3, 18950 <hci_cmd_done+0xf4>
   18916:	b9df      	cbnz	r7, 18950 <hci_cmd_done+0xf4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   18918:	4620      	mov	r0, r4
   1891a:	f008 fa03 	bl	20d24 <net_buf_id>
   1891e:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   18922:	2201      	movs	r2, #1
   18924:	6840      	ldr	r0, [r0, #4]
   18926:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   1892a:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   1892c:	f001 061f 	and.w	r6, r1, #31
   18930:	40b2      	lsls	r2, r6
	if (val) {
   18932:	0949      	lsrs	r1, r1, #5
   18934:	b318      	cbz	r0, 1897e <hci_cmd_done+0x122>
   18936:	f3bf 8f5b 	dmb	ish
   1893a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   1893e:	e853 1f00 	ldrex	r1, [r3]
   18942:	4311      	orrs	r1, r2
   18944:	e843 1000 	strex	r0, r1, [r3]
   18948:	2800      	cmp	r0, #0
   1894a:	d1f8      	bne.n	1893e <hci_cmd_done+0xe2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1894c:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   18950:	4620      	mov	r0, r4
   18952:	f008 f9e7 	bl	20d24 <net_buf_id>
   18956:	260c      	movs	r6, #12
   18958:	fb06 5000 	mla	r0, r6, r0, r5
   1895c:	6883      	ldr	r3, [r0, #8]
   1895e:	2b00      	cmp	r3, #0
   18960:	d0a1      	beq.n	188a6 <hci_cmd_done+0x4a>
		cmd(buf)->status = status;
   18962:	4620      	mov	r0, r4
   18964:	f008 f9de 	bl	20d24 <net_buf_id>
   18968:	4370      	muls	r0, r6
   1896a:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   1896c:	4620      	mov	r0, r4
   1896e:	f008 f9d9 	bl	20d24 <net_buf_id>
   18972:	fb06 5500 	mla	r5, r6, r0, r5
   18976:	68a8      	ldr	r0, [r5, #8]
   18978:	f00d fa3e 	bl	25df8 <z_impl_k_sem_give>
}
   1897c:	e793      	b.n	188a6 <hci_cmd_done+0x4a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1897e:	43d2      	mvns	r2, r2
   18980:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   18984:	f3bf 8f5b 	dmb	ish
   18988:	e853 1f00 	ldrex	r1, [r3]
   1898c:	4011      	ands	r1, r2
   1898e:	e843 1000 	strex	r0, r1, [r3]
   18992:	2800      	cmp	r0, #0
   18994:	d0da      	beq.n	1894c <hci_cmd_done+0xf0>
   18996:	e7f7      	b.n	18988 <hci_cmd_done+0x12c>
   18998:	200007b8 	.word	0x200007b8
   1899c:	200007a8 	.word	0x200007a8
   189a0:	00034c7f 	.word	0x00034c7f
   189a4:	00034cb4 	.word	0x00034cb4
   189a8:	200002a8 	.word	0x200002a8
   189ac:	20000a30 	.word	0x20000a30
   189b0:	20002ccc 	.word	0x20002ccc

000189b4 <hci_cmd_status>:
{
   189b4:	b538      	push	{r3, r4, r5, lr}
   189b6:	2104      	movs	r1, #4
   189b8:	4604      	mov	r4, r0
   189ba:	3008      	adds	r0, #8
   189bc:	f008 fcba 	bl	21334 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   189c0:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   189c2:	7801      	ldrb	r1, [r0, #0]
   189c4:	8840      	ldrh	r0, [r0, #2]
   189c6:	4622      	mov	r2, r4
   189c8:	f7ff ff48 	bl	1885c <hci_cmd_done>
	if (ncmd) {
   189cc:	b125      	cbz	r5, 189d8 <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   189ce:	4803      	ldr	r0, [pc, #12]	; (189dc <hci_cmd_status+0x28>)
}
   189d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   189d4:	f00d ba10 	b.w	25df8 <z_impl_k_sem_give>
   189d8:	bd38      	pop	{r3, r4, r5, pc}
   189da:	bf00      	nop
   189dc:	200003c0 	.word	0x200003c0

000189e0 <hci_cmd_complete>:
{
   189e0:	b538      	push	{r3, r4, r5, lr}
   189e2:	2103      	movs	r1, #3
   189e4:	4604      	mov	r4, r0
   189e6:	3008      	adds	r0, #8
   189e8:	f008 fca4 	bl	21334 <net_buf_simple_pull_mem>
	status = buf->data[0];
   189ec:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   189ee:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   189f0:	7819      	ldrb	r1, [r3, #0]
   189f2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   189f6:	4622      	mov	r2, r4
   189f8:	f7ff ff30 	bl	1885c <hci_cmd_done>
	if (ncmd) {
   189fc:	b125      	cbz	r5, 18a08 <hci_cmd_complete+0x28>
   189fe:	4803      	ldr	r0, [pc, #12]	; (18a0c <hci_cmd_complete+0x2c>)
}
   18a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   18a04:	f00d b9f8 	b.w	25df8 <z_impl_k_sem_give>
   18a08:	bd38      	pop	{r3, r4, r5, pc}
   18a0a:	bf00      	nop
   18a0c:	200003c0 	.word	0x200003c0

00018a10 <bt_hci_cmd_state_set_init>:
{
   18a10:	b510      	push	{r4, lr}
	state->bit = bit;
   18a12:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   18a16:	f89d 3008 	ldrb.w	r3, [sp, #8]
   18a1a:	720b      	strb	r3, [r1, #8]
{
   18a1c:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   18a1e:	f008 f981 	bl	20d24 <net_buf_id>
   18a22:	4b03      	ldr	r3, [pc, #12]	; (18a30 <bt_hci_cmd_state_set_init+0x20>)
   18a24:	220c      	movs	r2, #12
   18a26:	fb02 3000 	mla	r0, r2, r0, r3
   18a2a:	6044      	str	r4, [r0, #4]
}
   18a2c:	bd10      	pop	{r4, pc}
   18a2e:	bf00      	nop
   18a30:	20002ccc 	.word	0x20002ccc

00018a34 <bt_hci_cmd_create>:
{
   18a34:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   18a38:	f04f 32ff 	mov.w	r2, #4294967295
   18a3c:	4605      	mov	r5, r0
   18a3e:	f04f 33ff 	mov.w	r3, #4294967295
   18a42:	481b      	ldr	r0, [pc, #108]	; (18ab0 <bt_hci_cmd_create+0x7c>)
   18a44:	460e      	mov	r6, r1
   18a46:	f016 fff1 	bl	2fa2c <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   18a4a:	4604      	mov	r4, r0
   18a4c:	b948      	cbnz	r0, 18a62 <bt_hci_cmd_create+0x2e>
   18a4e:	4919      	ldr	r1, [pc, #100]	; (18ab4 <bt_hci_cmd_create+0x80>)
   18a50:	4819      	ldr	r0, [pc, #100]	; (18ab8 <bt_hci_cmd_create+0x84>)
   18a52:	4a1a      	ldr	r2, [pc, #104]	; (18abc <bt_hci_cmd_create+0x88>)
   18a54:	23e9      	movs	r3, #233	; 0xe9
   18a56:	f013 fda0 	bl	2c59a <printk>
   18a5a:	4818      	ldr	r0, [pc, #96]	; (18abc <bt_hci_cmd_create+0x88>)
   18a5c:	21e9      	movs	r1, #233	; 0xe9
   18a5e:	f013 ffdd 	bl	2ca1c <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   18a62:	f104 0b08 	add.w	fp, r4, #8
   18a66:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   18a68:	2700      	movs	r7, #0
   18a6a:	4658      	mov	r0, fp
   18a6c:	f008 faf6 	bl	2105c <net_buf_simple_reserve>
   18a70:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   18a72:	4620      	mov	r0, r4
   18a74:	f008 f956 	bl	20d24 <net_buf_id>
   18a78:	f8df 8044 	ldr.w	r8, [pc, #68]	; 18ac0 <bt_hci_cmd_create+0x8c>
   18a7c:	f04f 0a0c 	mov.w	sl, #12
   18a80:	fb0a 8000 	mla	r0, sl, r0, r8
   18a84:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   18a86:	4620      	mov	r0, r4
   18a88:	f008 f94c 	bl	20d24 <net_buf_id>
   18a8c:	fb0a 8000 	mla	r0, sl, r0, r8
   18a90:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   18a92:	4620      	mov	r0, r4
   18a94:	f008 f946 	bl	20d24 <net_buf_id>
   18a98:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   18a9c:	2103      	movs	r1, #3
   18a9e:	6047      	str	r7, [r0, #4]
   18aa0:	4658      	mov	r0, fp
   18aa2:	f008 fc69 	bl	21378 <net_buf_simple_add>
	hdr->param_len = param_len;
   18aa6:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   18aa8:	8005      	strh	r5, [r0, #0]
}
   18aaa:	4620      	mov	r0, r4
   18aac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ab0:	20000a30 	.word	0x20000a30
   18ab4:	00034a77 	.word	0x00034a77
   18ab8:	00032486 	.word	0x00032486
   18abc:	00034b51 	.word	0x00034b51
   18ac0:	20002ccc 	.word	0x20002ccc

00018ac4 <bt_hci_cmd_send_sync>:
{
   18ac4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18ac8:	4607      	mov	r7, r0
   18aca:	b086      	sub	sp, #24
   18acc:	4615      	mov	r5, r2
	if (!buf) {
   18ace:	460c      	mov	r4, r1
   18ad0:	b921      	cbnz	r1, 18adc <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   18ad2:	f7ff ffaf 	bl	18a34 <bt_hci_cmd_create>
		if (!buf) {
   18ad6:	4604      	mov	r4, r0
   18ad8:	2800      	cmp	r0, #0
   18ada:	d059      	beq.n	18b90 <bt_hci_cmd_send_sync+0xcc>
	return z_impl_k_sem_init(sem, initial_count, limit);
   18adc:	2201      	movs	r2, #1
   18ade:	2100      	movs	r1, #0
   18ae0:	4668      	mov	r0, sp
   18ae2:	f017 fc26 	bl	30332 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   18ae6:	4620      	mov	r0, r4
   18ae8:	f008 f91c 	bl	20d24 <net_buf_id>
   18aec:	4e2a      	ldr	r6, [pc, #168]	; (18b98 <bt_hci_cmd_send_sync+0xd4>)
   18aee:	230c      	movs	r3, #12
   18af0:	fb03 6000 	mla	r0, r3, r0, r6
   18af4:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   18af8:	4620      	mov	r0, r4
   18afa:	f008 fb53 	bl	211a4 <net_buf_ref>
   18afe:	4601      	mov	r1, r0
   18b00:	4826      	ldr	r0, [pc, #152]	; (18b9c <bt_hci_cmd_send_sync+0xd8>)
   18b02:	f008 fad5 	bl	210b0 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   18b06:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   18b0a:	2300      	movs	r3, #0
   18b0c:	4668      	mov	r0, sp
   18b0e:	f00d f9b7 	bl	25e80 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   18b12:	4680      	mov	r8, r0
   18b14:	b180      	cbz	r0, 18b38 <bt_hci_cmd_send_sync+0x74>
   18b16:	4a22      	ldr	r2, [pc, #136]	; (18ba0 <bt_hci_cmd_send_sync+0xdc>)
   18b18:	4922      	ldr	r1, [pc, #136]	; (18ba4 <bt_hci_cmd_send_sync+0xe0>)
   18b1a:	4823      	ldr	r0, [pc, #140]	; (18ba8 <bt_hci_cmd_send_sync+0xe4>)
   18b1c:	f240 1331 	movw	r3, #305	; 0x131
   18b20:	f013 fd3b 	bl	2c59a <printk>
   18b24:	4821      	ldr	r0, [pc, #132]	; (18bac <bt_hci_cmd_send_sync+0xe8>)
   18b26:	4641      	mov	r1, r8
   18b28:	f013 fd37 	bl	2c59a <printk>
   18b2c:	4040      	eors	r0, r0
   18b2e:	f380 8811 	msr	BASEPRI, r0
   18b32:	f04f 0003 	mov.w	r0, #3
   18b36:	df02      	svc	2
	status = cmd(buf)->status;
   18b38:	4620      	mov	r0, r4
   18b3a:	f008 f8f3 	bl	20d24 <net_buf_id>
   18b3e:	230c      	movs	r3, #12
   18b40:	4343      	muls	r3, r0
   18b42:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   18b44:	b1de      	cbz	r6, 18b7e <bt_hci_cmd_send_sync+0xba>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   18b46:	4b1a      	ldr	r3, [pc, #104]	; (18bb0 <bt_hci_cmd_send_sync+0xec>)
   18b48:	681a      	ldr	r2, [r3, #0]
   18b4a:	f012 0f06 	tst.w	r2, #6
   18b4e:	d00a      	beq.n	18b66 <bt_hci_cmd_send_sync+0xa2>
   18b50:	4a18      	ldr	r2, [pc, #96]	; (18bb4 <bt_hci_cmd_send_sync+0xf0>)
   18b52:	4819      	ldr	r0, [pc, #100]	; (18bb8 <bt_hci_cmd_send_sync+0xf4>)
   18b54:	1a9b      	subs	r3, r3, r2
   18b56:	089b      	lsrs	r3, r3, #2
   18b58:	019b      	lsls	r3, r3, #6
   18b5a:	f043 0302 	orr.w	r3, r3, #2
   18b5e:	4632      	mov	r2, r6
   18b60:	4639      	mov	r1, r7
   18b62:	f014 f8dd 	bl	2cd20 <log_2>
		net_buf_unref(buf);
   18b66:	4620      	mov	r0, r4
   18b68:	f008 fad6 	bl	21118 <net_buf_unref>
			return -EIO;
   18b6c:	2e09      	cmp	r6, #9
   18b6e:	bf0c      	ite	eq
   18b70:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   18b74:	f06f 0004 	mvnne.w	r0, #4
}
   18b78:	b006      	add	sp, #24
   18b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   18b7e:	b115      	cbz	r5, 18b86 <bt_hci_cmd_send_sync+0xc2>
		*rsp = buf;
   18b80:	602c      	str	r4, [r5, #0]
	return 0;
   18b82:	4630      	mov	r0, r6
   18b84:	e7f8      	b.n	18b78 <bt_hci_cmd_send_sync+0xb4>
		net_buf_unref(buf);
   18b86:	4620      	mov	r0, r4
   18b88:	f008 fac6 	bl	21118 <net_buf_unref>
	return 0;
   18b8c:	4628      	mov	r0, r5
   18b8e:	e7f3      	b.n	18b78 <bt_hci_cmd_send_sync+0xb4>
			return -ENOBUFS;
   18b90:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18b94:	e7f0      	b.n	18b78 <bt_hci_cmd_send_sync+0xb4>
   18b96:	bf00      	nop
   18b98:	20002ccc 	.word	0x20002ccc
   18b9c:	200003f8 	.word	0x200003f8
   18ba0:	00034b51 	.word	0x00034b51
   18ba4:	000327b2 	.word	0x000327b2
   18ba8:	00032486 	.word	0x00032486
   18bac:	00034ce7 	.word	0x00034ce7
   18bb0:	200007b8 	.word	0x200007b8
   18bb4:	200007a8 	.word	0x200007a8
   18bb8:	00034d07 	.word	0x00034d07

00018bbc <hci_le_read_max_data_len>:
{
   18bbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18bbe:	4606      	mov	r6, r0
   18bc0:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   18bc2:	aa01      	add	r2, sp, #4
   18bc4:	2100      	movs	r1, #0
   18bc6:	f242 002f 	movw	r0, #8239	; 0x202f
   18bca:	f7ff ff7b 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   18bce:	4604      	mov	r4, r0
   18bd0:	b178      	cbz	r0, 18bf2 <hci_le_read_max_data_len+0x36>
		BT_ERR("Failed to read DLE max data len");
   18bd2:	490d      	ldr	r1, [pc, #52]	; (18c08 <hci_le_read_max_data_len+0x4c>)
   18bd4:	680b      	ldr	r3, [r1, #0]
   18bd6:	075b      	lsls	r3, r3, #29
   18bd8:	d008      	beq.n	18bec <hci_le_read_max_data_len+0x30>
   18bda:	4b0c      	ldr	r3, [pc, #48]	; (18c0c <hci_le_read_max_data_len+0x50>)
   18bdc:	480c      	ldr	r0, [pc, #48]	; (18c10 <hci_le_read_max_data_len+0x54>)
   18bde:	1ac9      	subs	r1, r1, r3
   18be0:	0889      	lsrs	r1, r1, #2
   18be2:	0189      	lsls	r1, r1, #6
   18be4:	f041 0101 	orr.w	r1, r1, #1
   18be8:	f014 f879 	bl	2ccde <log_0>
}
   18bec:	4620      	mov	r0, r4
   18bee:	b002      	add	sp, #8
   18bf0:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   18bf2:	9801      	ldr	r0, [sp, #4]
   18bf4:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   18bf6:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   18bfa:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   18bfc:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   18c00:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   18c02:	f008 fa89 	bl	21118 <net_buf_unref>
	return 0;
   18c06:	e7f1      	b.n	18bec <hci_le_read_max_data_len+0x30>
   18c08:	200007b8 	.word	0x200007b8
   18c0c:	200007a8 	.word	0x200007a8
   18c10:	00034d23 	.word	0x00034d23

00018c14 <hci_init>:
{
   18c14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   18c16:	4d48      	ldr	r5, [pc, #288]	; (18d38 <hci_init+0x124>)
   18c18:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   18c1c:	6899      	ldr	r1, [r3, #8]
   18c1e:	f011 0101 	ands.w	r1, r1, #1
   18c22:	d123      	bne.n	18c6c <hci_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   18c24:	aa01      	add	r2, sp, #4
   18c26:	f640 4003 	movw	r0, #3075	; 0xc03
   18c2a:	f7ff ff4b 	bl	18ac4 <bt_hci_cmd_send_sync>
		if (err) {
   18c2e:	4604      	mov	r4, r0
   18c30:	2800      	cmp	r0, #0
   18c32:	d174      	bne.n	18d1e <hci_init+0x10a>
	uint8_t status = buf->data[0];
   18c34:	9b01      	ldr	r3, [sp, #4]
   18c36:	689b      	ldr	r3, [r3, #8]
	if (status) {
   18c38:	781b      	ldrb	r3, [r3, #0]
   18c3a:	b9a3      	cbnz	r3, 18c66 <hci_init+0x52>
		bt_scan_reset();
   18c3c:	f001 fb8e 	bl	1a35c <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18c40:	f3bf 8f5b 	dmb	ish
   18c44:	462b      	mov	r3, r5
   18c46:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   18c4a:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   18c4e:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   18c52:	f3bf 8f5b 	dmb	ish
   18c56:	e853 1f00 	ldrex	r1, [r3]
   18c5a:	e843 2000 	strex	r0, r2, [r3]
   18c5e:	2800      	cmp	r0, #0
   18c60:	d1f9      	bne.n	18c56 <hci_init+0x42>
   18c62:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   18c66:	9801      	ldr	r0, [sp, #4]
   18c68:	f008 fa56 	bl	21118 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   18c6c:	aa01      	add	r2, sp, #4
   18c6e:	2100      	movs	r1, #0
   18c70:	f241 0003 	movw	r0, #4099	; 0x1003
   18c74:	f7ff ff26 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   18c78:	4604      	mov	r4, r0
   18c7a:	2800      	cmp	r0, #0
   18c7c:	d14f      	bne.n	18d1e <hci_init+0x10a>
	read_local_features_complete(rsp);
   18c7e:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   18c80:	4e2e      	ldr	r6, [pc, #184]	; (18d3c <hci_init+0x128>)
   18c82:	6893      	ldr	r3, [r2, #8]
   18c84:	f853 0f01 	ldr.w	r0, [r3, #1]!
   18c88:	6859      	ldr	r1, [r3, #4]
   18c8a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   18c8c:	4610      	mov	r0, r2
   18c8e:	f008 fa43 	bl	21118 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   18c92:	4621      	mov	r1, r4
   18c94:	aa01      	add	r2, sp, #4
   18c96:	f241 0001 	movw	r0, #4097	; 0x1001
   18c9a:	f7ff ff13 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   18c9e:	4604      	mov	r4, r0
   18ca0:	2800      	cmp	r0, #0
   18ca2:	d13c      	bne.n	18d1e <hci_init+0x10a>
	read_local_ver_complete(rsp);
   18ca4:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   18ca6:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   18ca8:	785a      	ldrb	r2, [r3, #1]
   18caa:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   18cae:	78d9      	ldrb	r1, [r3, #3]
   18cb0:	789a      	ldrb	r2, [r3, #2]
   18cb2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18cb6:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   18cba:	791a      	ldrb	r2, [r3, #4]
   18cbc:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   18cc0:	7a19      	ldrb	r1, [r3, #8]
   18cc2:	79da      	ldrb	r2, [r3, #7]
   18cc4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18cc8:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   18ccc:	795a      	ldrb	r2, [r3, #5]
   18cce:	799b      	ldrb	r3, [r3, #6]
   18cd0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   18cd4:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   18cd8:	f008 fa1e 	bl	21118 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   18cdc:	4621      	mov	r1, r4
   18cde:	aa01      	add	r2, sp, #4
   18ce0:	f241 0002 	movw	r0, #4098	; 0x1002
   18ce4:	f7ff feee 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   18ce8:	4604      	mov	r4, r0
   18cea:	b9c0      	cbnz	r0, 18d1e <hci_init+0x10a>
	read_supported_commands_complete(rsp);
   18cec:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   18cee:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   18cf0:	1c53      	adds	r3, r2, #1
   18cf2:	3241      	adds	r2, #65	; 0x41
   18cf4:	6818      	ldr	r0, [r3, #0]
   18cf6:	6859      	ldr	r1, [r3, #4]
   18cf8:	4634      	mov	r4, r6
   18cfa:	c403      	stmia	r4!, {r0, r1}
   18cfc:	3308      	adds	r3, #8
   18cfe:	4293      	cmp	r3, r2
   18d00:	4626      	mov	r6, r4
   18d02:	d1f7      	bne.n	18cf4 <hci_init+0xe0>
	net_buf_unref(rsp);
   18d04:	4638      	mov	r0, r7
   18d06:	f008 fa07 	bl	21118 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   18d0a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   18d0e:	0659      	lsls	r1, r3, #25
   18d10:	d41c      	bmi.n	18d4c <hci_init+0x138>
		BT_ERR("Non-LE capable controller detected!");
   18d12:	490b      	ldr	r1, [pc, #44]	; (18d40 <hci_init+0x12c>)
   18d14:	680b      	ldr	r3, [r1, #0]
   18d16:	075a      	lsls	r2, r3, #29
   18d18:	d104      	bne.n	18d24 <hci_init+0x110>
		return -ENODEV;
   18d1a:	f06f 0412 	mvn.w	r4, #18
}
   18d1e:	4620      	mov	r0, r4
   18d20:	b003      	add	sp, #12
   18d22:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18d24:	4b07      	ldr	r3, [pc, #28]	; (18d44 <hci_init+0x130>)
		BT_ERR("Non-LE capable controller detected!");
   18d26:	4808      	ldr	r0, [pc, #32]	; (18d48 <hci_init+0x134>)
   18d28:	1ac9      	subs	r1, r1, r3
   18d2a:	0889      	lsrs	r1, r1, #2
   18d2c:	0189      	lsls	r1, r1, #6
   18d2e:	f041 0101 	orr.w	r1, r1, #1
   18d32:	f013 ffd4 	bl	2ccde <log_0>
   18d36:	e7f0      	b.n	18d1a <hci_init+0x106>
   18d38:	200002a8 	.word	0x200002a8
   18d3c:	20000318 	.word	0x20000318
   18d40:	200007b8 	.word	0x200007b8
   18d44:	200007a8 	.word	0x200007a8
   18d48:	00034d43 	.word	0x00034d43
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   18d4c:	aa01      	add	r2, sp, #4
   18d4e:	2100      	movs	r1, #0
   18d50:	f242 0003 	movw	r0, #8195	; 0x2003
   18d54:	f7ff feb6 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   18d58:	4604      	mov	r4, r0
   18d5a:	2800      	cmp	r0, #0
   18d5c:	d1df      	bne.n	18d1e <hci_init+0x10a>
	read_le_features_complete(rsp);
   18d5e:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   18d60:	4eb4      	ldr	r6, [pc, #720]	; (19034 <hci_init+0x420>)
   18d62:	6893      	ldr	r3, [r2, #8]
   18d64:	f853 0f01 	ldr.w	r0, [r3, #1]!
   18d68:	6859      	ldr	r1, [r3, #4]
   18d6a:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   18d6c:	4610      	mov	r0, r2
   18d6e:	f008 f9d3 	bl	21118 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   18d72:	4621      	mov	r1, r4
   18d74:	aa01      	add	r2, sp, #4
   18d76:	f242 0002 	movw	r0, #8194	; 0x2002
   18d7a:	f7ff fea3 	bl	18ac4 <bt_hci_cmd_send_sync>
		if (err) {
   18d7e:	4604      	mov	r4, r0
   18d80:	2800      	cmp	r0, #0
   18d82:	d1cc      	bne.n	18d1e <hci_init+0x10a>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   18d84:	9b01      	ldr	r3, [sp, #4]
   18d86:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   18d88:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   18d8c:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   18d90:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   18d92:	b129      	cbz	r1, 18da0 <hci_init+0x18c>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   18d94:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   18d96:	4611      	mov	r1, r2
   18d98:	f106 0028 	add.w	r0, r6, #40	; 0x28
   18d9c:	f017 fac9 	bl	30332 <z_impl_k_sem_init>
		net_buf_unref(rsp);
   18da0:	9801      	ldr	r0, [sp, #4]
   18da2:	f008 f9b9 	bl	21118 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18da6:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   18daa:	f016 0620 	ands.w	r6, r6, #32
   18dae:	f000 80d2 	beq.w	18f56 <hci_init+0x342>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   18db2:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   18db6:	071b      	lsls	r3, r3, #28
   18db8:	d511      	bpl.n	18dde <hci_init+0x1ca>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   18dba:	aa01      	add	r2, sp, #4
   18dbc:	2100      	movs	r1, #0
   18dbe:	f242 001c 	movw	r0, #8220	; 0x201c
   18dc2:	f7ff fe7f 	bl	18ac4 <bt_hci_cmd_send_sync>
		if (err) {
   18dc6:	4604      	mov	r4, r0
   18dc8:	2800      	cmp	r0, #0
   18dca:	d1a8      	bne.n	18d1e <hci_init+0x10a>
		le_read_supp_states_complete(rsp);
   18dcc:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   18dce:	6883      	ldr	r3, [r0, #8]
   18dd0:	f853 2f01 	ldr.w	r2, [r3, #1]!
   18dd4:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   18dd6:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   18dda:	f008 f99d 	bl	21118 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   18dde:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   18de2:	069f      	lsls	r7, r3, #26
   18de4:	d524      	bpl.n	18e30 <hci_init+0x21c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   18de6:	f10d 0102 	add.w	r1, sp, #2
   18dea:	4668      	mov	r0, sp
   18dec:	f7ff fee6 	bl	18bbc <hci_le_read_max_data_len>
		if (err) {
   18df0:	4604      	mov	r4, r0
   18df2:	2800      	cmp	r0, #0
   18df4:	d193      	bne.n	18d1e <hci_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18df6:	2104      	movs	r1, #4
   18df8:	f242 0024 	movw	r0, #8228	; 0x2024
   18dfc:	f7ff fe1a 	bl	18a34 <bt_hci_cmd_create>
		if (!buf) {
   18e00:	4606      	mov	r6, r0
   18e02:	2800      	cmp	r0, #0
   18e04:	f000 80ae 	beq.w	18f64 <hci_init+0x350>
   18e08:	2104      	movs	r1, #4
   18e0a:	3008      	adds	r0, #8
   18e0c:	f008 fab4 	bl	21378 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   18e10:	f8bd 3000 	ldrh.w	r3, [sp]
   18e14:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   18e16:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   18e1a:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   18e1c:	4622      	mov	r2, r4
   18e1e:	4631      	mov	r1, r6
   18e20:	f242 0024 	movw	r0, #8228	; 0x2024
   18e24:	f7ff fe4e 	bl	18ac4 <bt_hci_cmd_send_sync>
		if (err) {
   18e28:	4604      	mov	r4, r0
   18e2a:	2800      	cmp	r0, #0
   18e2c:	f47f af77 	bne.w	18d1e <hci_init+0x10a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   18e30:	2108      	movs	r1, #8
   18e32:	f242 0001 	movw	r0, #8193	; 0x2001
   18e36:	f7ff fdfd 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   18e3a:	4604      	mov	r4, r0
   18e3c:	2800      	cmp	r0, #0
   18e3e:	f000 8091 	beq.w	18f64 <hci_init+0x350>
   18e42:	2108      	movs	r1, #8
   18e44:	4408      	add	r0, r1
   18e46:	f008 fa97 	bl	21378 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   18e4a:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   18e4e:	f012 0f02 	tst.w	r2, #2
   18e52:	bf14      	ite	ne
   18e54:	232f      	movne	r3, #47	; 0x2f
   18e56:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   18e58:	0696      	lsls	r6, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   18e5a:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   18e5e:	bf48      	it	mi
   18e60:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   18e64:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   18e68:	bf18      	it	ne
   18e6a:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   18e6e:	2200      	movs	r2, #0
   18e70:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   18e72:	f3c3 2307 	ubfx	r3, r3, #8, #8
   18e76:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   18e78:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   18e7a:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   18e7c:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   18e7e:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   18e80:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   18e82:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   18e84:	4621      	mov	r1, r4
   18e86:	f242 0001 	movw	r0, #8193	; 0x2001
   18e8a:	f7ff fe1b 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   18e8e:	4604      	mov	r4, r0
   18e90:	2800      	cmp	r0, #0
   18e92:	f47f af44 	bne.w	18d1e <hci_init+0x10a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   18e96:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   18e9a:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   18e9e:	0698      	lsls	r0, r3, #26
   18ea0:	d475      	bmi.n	18f8e <hci_init+0x37a>
	if (bt_dev.le.acl_mtu) {
   18ea2:	b9d9      	cbnz	r1, 18edc <hci_init+0x2c8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   18ea4:	aa01      	add	r2, sp, #4
   18ea6:	f241 0005 	movw	r0, #4101	; 0x1005
   18eaa:	f7ff fe0b 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   18eae:	4604      	mov	r4, r0
   18eb0:	2800      	cmp	r0, #0
   18eb2:	f47f af34 	bne.w	18d1e <hci_init+0x10a>
	if (bt_dev.le.acl_mtu) {
   18eb6:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   18eba:	b963      	cbnz	r3, 18ed6 <hci_init+0x2c2>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   18ebc:	9b01      	ldr	r3, [sp, #4]
   18ebe:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   18ec0:	785a      	ldrb	r2, [r3, #1]
   18ec2:	7899      	ldrb	r1, [r3, #2]
   18ec4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18ec8:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   18ecc:	889a      	ldrh	r2, [r3, #4]
   18ece:	485a      	ldr	r0, [pc, #360]	; (19038 <hci_init+0x424>)
   18ed0:	4611      	mov	r1, r2
   18ed2:	f017 fa2e 	bl	30332 <z_impl_k_sem_init>
	net_buf_unref(rsp);
   18ed6:	9801      	ldr	r0, [sp, #4]
   18ed8:	f008 f91e 	bl	21118 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   18edc:	2108      	movs	r1, #8
   18ede:	f640 4001 	movw	r0, #3073	; 0xc01
   18ee2:	f7ff fda7 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   18ee6:	4604      	mov	r4, r0
   18ee8:	2800      	cmp	r0, #0
   18eea:	d03b      	beq.n	18f64 <hci_init+0x350>
   18eec:	2108      	movs	r1, #8
   18eee:	4408      	add	r0, r1
   18ef0:	f008 fa42 	bl	21378 <net_buf_simple_add>
	dst[0] = val;
   18ef4:	2310      	movs	r3, #16
   18ef6:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   18ef8:	2388      	movs	r3, #136	; 0x88
   18efa:	7043      	strb	r3, [r0, #1]
   18efc:	2302      	movs	r3, #2
	dst[0] = val;
   18efe:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   18f00:	70c3      	strb	r3, [r0, #3]
   18f02:	2320      	movs	r3, #32
	dst[0] = val;
   18f04:	7082      	strb	r2, [r0, #2]
   18f06:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   18f08:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   18f0a:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   18f0c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   18f0e:	4621      	mov	r1, r4
   18f10:	f640 4001 	movw	r0, #3073	; 0xc01
   18f14:	f7ff fdd6 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   18f18:	4604      	mov	r4, r0
   18f1a:	2800      	cmp	r0, #0
   18f1c:	f47f aeff 	bne.w	18d1e <hci_init+0x10a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   18f20:	4601      	mov	r1, r0
   18f22:	aa01      	add	r2, sp, #4
   18f24:	f64f 4001 	movw	r0, #64513	; 0xfc01
   18f28:	f7ff fdcc 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   18f2c:	4604      	mov	r4, r0
   18f2e:	2800      	cmp	r0, #0
   18f30:	d03f      	beq.n	18fb2 <hci_init+0x39e>
		BT_WARN("Vendor HCI extensions not available");
   18f32:	4942      	ldr	r1, [pc, #264]	; (1903c <hci_init+0x428>)
   18f34:	680b      	ldr	r3, [r1, #0]
   18f36:	f013 0f06 	tst.w	r3, #6
   18f3a:	d008      	beq.n	18f4e <hci_init+0x33a>
   18f3c:	4b40      	ldr	r3, [pc, #256]	; (19040 <hci_init+0x42c>)
   18f3e:	4841      	ldr	r0, [pc, #260]	; (19044 <hci_init+0x430>)
   18f40:	1ac9      	subs	r1, r1, r3
   18f42:	0889      	lsrs	r1, r1, #2
   18f44:	0189      	lsls	r1, r1, #6
   18f46:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Failed to read supported vendor features");
   18f4a:	f013 fec8 	bl	2ccde <log_0>
	err = bt_id_init();
   18f4e:	f001 f93f 	bl	1a1d0 <bt_id_init>
   18f52:	4604      	mov	r4, r0
	if (err) {
   18f54:	e6e3      	b.n	18d1e <hci_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   18f56:	2102      	movs	r1, #2
   18f58:	f640 406d 	movw	r0, #3181	; 0xc6d
   18f5c:	f7ff fd6a 	bl	18a34 <bt_hci_cmd_create>
		if (!buf) {
   18f60:	4604      	mov	r4, r0
   18f62:	b910      	cbnz	r0, 18f6a <hci_init+0x356>
		return -ENOBUFS;
   18f64:	f06f 0468 	mvn.w	r4, #104	; 0x68
   18f68:	e6d9      	b.n	18d1e <hci_init+0x10a>
   18f6a:	2102      	movs	r1, #2
   18f6c:	3008      	adds	r0, #8
   18f6e:	f008 fa03 	bl	21378 <net_buf_simple_add>
		cp_le->le = 0x01;
   18f72:	2301      	movs	r3, #1
   18f74:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   18f76:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   18f78:	4621      	mov	r1, r4
   18f7a:	4632      	mov	r2, r6
   18f7c:	f640 406d 	movw	r0, #3181	; 0xc6d
   18f80:	f7ff fda0 	bl	18ac4 <bt_hci_cmd_send_sync>
		if (err) {
   18f84:	4604      	mov	r4, r0
   18f86:	2800      	cmp	r0, #0
   18f88:	f43f af13 	beq.w	18db2 <hci_init+0x19e>
   18f8c:	e6c7      	b.n	18d1e <hci_init+0x10a>
	else if (!bt_dev.le.acl_mtu) {
   18f8e:	2900      	cmp	r1, #0
   18f90:	d1a4      	bne.n	18edc <hci_init+0x2c8>
		BT_ERR("ACL BR/EDR buffers not initialized");
   18f92:	492a      	ldr	r1, [pc, #168]	; (1903c <hci_init+0x428>)
   18f94:	680b      	ldr	r3, [r1, #0]
   18f96:	075a      	lsls	r2, r3, #29
   18f98:	d008      	beq.n	18fac <hci_init+0x398>
   18f9a:	4b29      	ldr	r3, [pc, #164]	; (19040 <hci_init+0x42c>)
   18f9c:	482a      	ldr	r0, [pc, #168]	; (19048 <hci_init+0x434>)
   18f9e:	1ac9      	subs	r1, r1, r3
   18fa0:	0889      	lsrs	r1, r1, #2
   18fa2:	0189      	lsls	r1, r1, #6
   18fa4:	f041 0101 	orr.w	r1, r1, #1
   18fa8:	f013 fe99 	bl	2ccde <log_0>
		return -EIO;
   18fac:	f06f 0404 	mvn.w	r4, #4
   18fb0:	e6b5      	b.n	18d1e <hci_init+0x10a>
	net_buf_unref(rsp);
   18fb2:	9801      	ldr	r0, [sp, #4]
   18fb4:	f008 f8b0 	bl	21118 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   18fb8:	4621      	mov	r1, r4
   18fba:	aa01      	add	r2, sp, #4
   18fbc:	f64f 4002 	movw	r0, #64514	; 0xfc02
   18fc0:	f7ff fd80 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   18fc4:	4604      	mov	r4, r0
   18fc6:	b160      	cbz	r0, 18fe2 <hci_init+0x3ce>
		BT_WARN("Failed to read supported vendor commands");
   18fc8:	491c      	ldr	r1, [pc, #112]	; (1903c <hci_init+0x428>)
   18fca:	680b      	ldr	r3, [r1, #0]
   18fcc:	f013 0f06 	tst.w	r3, #6
   18fd0:	d0bd      	beq.n	18f4e <hci_init+0x33a>
   18fd2:	4b1b      	ldr	r3, [pc, #108]	; (19040 <hci_init+0x42c>)
   18fd4:	481d      	ldr	r0, [pc, #116]	; (1904c <hci_init+0x438>)
   18fd6:	1ac9      	subs	r1, r1, r3
   18fd8:	0889      	lsrs	r1, r1, #2
   18fda:	0189      	lsls	r1, r1, #6
   18fdc:	f041 0102 	orr.w	r1, r1, #2
   18fe0:	e7b3      	b.n	18f4a <hci_init+0x336>
	rp.cmds = (void *)rsp->data;
   18fe2:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   18fe4:	6883      	ldr	r3, [r0, #8]
   18fe6:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   18fea:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   18fee:	f008 f893 	bl	21118 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   18ff2:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   18ff6:	075b      	lsls	r3, r3, #29
   18ff8:	d5a9      	bpl.n	18f4e <hci_init+0x33a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   18ffa:	aa01      	add	r2, sp, #4
   18ffc:	4621      	mov	r1, r4
   18ffe:	f64f 4003 	movw	r0, #64515	; 0xfc03
   19002:	f7ff fd5f 	bl	18ac4 <bt_hci_cmd_send_sync>
		if (err) {
   19006:	b160      	cbz	r0, 19022 <hci_init+0x40e>
			BT_WARN("Failed to read supported vendor features");
   19008:	490c      	ldr	r1, [pc, #48]	; (1903c <hci_init+0x428>)
   1900a:	680b      	ldr	r3, [r1, #0]
   1900c:	f013 0f06 	tst.w	r3, #6
   19010:	d09d      	beq.n	18f4e <hci_init+0x33a>
   19012:	4b0b      	ldr	r3, [pc, #44]	; (19040 <hci_init+0x42c>)
   19014:	480e      	ldr	r0, [pc, #56]	; (19050 <hci_init+0x43c>)
   19016:	1ac9      	subs	r1, r1, r3
   19018:	0889      	lsrs	r1, r1, #2
   1901a:	0189      	lsls	r1, r1, #6
   1901c:	f041 0102 	orr.w	r1, r1, #2
   19020:	e793      	b.n	18f4a <hci_init+0x336>
		rp.feat = (void *)rsp->data;
   19022:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   19024:	6883      	ldr	r3, [r0, #8]
   19026:	785b      	ldrb	r3, [r3, #1]
   19028:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   1902c:	f008 f874 	bl	21118 <net_buf_unref>
   19030:	e78d      	b.n	18f4e <hci_init+0x33a>
   19032:	bf00      	nop
   19034:	20000378 	.word	0x20000378
   19038:	200003a8 	.word	0x200003a8
   1903c:	200007b8 	.word	0x200007b8
   19040:	200007a8 	.word	0x200007a8
   19044:	00034d8a 	.word	0x00034d8a
   19048:	00034d67 	.word	0x00034d67
   1904c:	00034dae 	.word	0x00034dae
   19050:	00034dd7 	.word	0x00034dd7

00019054 <bt_le_create_conn_legacy>:
{
   19054:	b5f0      	push	{r4, r5, r6, r7, lr}
   19056:	b085      	sub	sp, #20
   19058:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   1905a:	f10d 0103 	add.w	r1, sp, #3
   1905e:	2000      	movs	r0, #0
   19060:	f001 f87c 	bl	1a15c <bt_id_set_create_conn_own_addr>
	if (err) {
   19064:	4604      	mov	r4, r0
   19066:	2800      	cmp	r0, #0
   19068:	d145      	bne.n	190f6 <bt_le_create_conn_legacy+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   1906a:	2119      	movs	r1, #25
   1906c:	f242 000d 	movw	r0, #8205	; 0x200d
   19070:	f7ff fce0 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   19074:	4607      	mov	r7, r0
   19076:	2800      	cmp	r0, #0
   19078:	d040      	beq.n	190fc <bt_le_create_conn_legacy+0xa8>
   1907a:	2119      	movs	r1, #25
   1907c:	3008      	adds	r0, #8
   1907e:	f008 f97b 	bl	21378 <net_buf_simple_add>
   19082:	2219      	movs	r2, #25
   19084:	4605      	mov	r5, r0
   19086:	4621      	mov	r1, r4
   19088:	f017 facf 	bl	3062a <memset>
	cp->own_addr_type = own_addr_type;
   1908c:	f89d 3003 	ldrb.w	r3, [sp, #3]
   19090:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   19092:	f106 0190 	add.w	r1, r6, #144	; 0x90
   19096:	1d68      	adds	r0, r5, #5
   19098:	f015 f94e 	bl	2e338 <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   1909c:	4b19      	ldr	r3, [pc, #100]	; (19104 <bt_le_create_conn_legacy+0xb0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   1909e:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   190a0:	899a      	ldrh	r2, [r3, #12]
   190a2:	802a      	strh	r2, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   190a4:	89da      	ldrh	r2, [r3, #14]
   190a6:	806a      	strh	r2, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   190a8:	f8b6 20a8 	ldrh.w	r2, [r6, #168]	; 0xa8
   190ac:	f8a5 200d 	strh.w	r2, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   190b0:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
   190b4:	f8a5 200f 	strh.w	r2, [r5, #15]
	state->target = target;
   190b8:	33cc      	adds	r3, #204	; 0xcc
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   190ba:	f8b6 20ac 	ldrh.w	r2, [r6, #172]	; 0xac
   190be:	f8a5 2011 	strh.w	r2, [r5, #17]
	state->target = target;
   190c2:	9301      	str	r3, [sp, #4]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   190c4:	f8b6 20ae 	ldrh.w	r2, [r6, #174]	; 0xae
   190c8:	f8a5 2013 	strh.w	r2, [r5, #19]
	state->bit = bit;
   190cc:	230b      	movs	r3, #11
   190ce:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = state;
   190d0:	4638      	mov	r0, r7
	state->val = val;
   190d2:	2301      	movs	r3, #1
   190d4:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = state;
   190d8:	f007 fe24 	bl	20d24 <net_buf_id>
   190dc:	4b0a      	ldr	r3, [pc, #40]	; (19108 <bt_le_create_conn_legacy+0xb4>)
   190de:	220c      	movs	r2, #12
   190e0:	fb02 3300 	mla	r3, r2, r0, r3
   190e4:	aa01      	add	r2, sp, #4
   190e6:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   190e8:	4639      	mov	r1, r7
   190ea:	4622      	mov	r2, r4
   190ec:	f242 000d 	movw	r0, #8205	; 0x200d
   190f0:	f7ff fce8 	bl	18ac4 <bt_hci_cmd_send_sync>
   190f4:	4604      	mov	r4, r0
}
   190f6:	4620      	mov	r0, r4
   190f8:	b005      	add	sp, #20
   190fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   190fc:	f06f 0468 	mvn.w	r4, #104	; 0x68
   19100:	e7f9      	b.n	190f6 <bt_le_create_conn_legacy+0xa2>
   19102:	bf00      	nop
   19104:	200002a8 	.word	0x200002a8
   19108:	20002ccc 	.word	0x20002ccc

0001910c <bt_le_create_conn_cancel>:
{
   1910c:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   1910e:	2100      	movs	r1, #0
{
   19110:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   19112:	f242 000e 	movw	r0, #8206	; 0x200e
   19116:	f7ff fc8d 	bl	18a34 <bt_hci_cmd_create>
	state->target = target;
   1911a:	4b0c      	ldr	r3, [pc, #48]	; (1914c <bt_le_create_conn_cancel+0x40>)
   1911c:	9301      	str	r3, [sp, #4]
	state->val = val;
   1911e:	2500      	movs	r5, #0
	state->bit = bit;
   19120:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   19122:	4604      	mov	r4, r0
	state->bit = bit;
   19124:	9302      	str	r3, [sp, #8]
	state->val = val;
   19126:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = state;
   1912a:	f007 fdfb 	bl	20d24 <net_buf_id>
   1912e:	4b08      	ldr	r3, [pc, #32]	; (19150 <bt_le_create_conn_cancel+0x44>)
   19130:	220c      	movs	r2, #12
   19132:	fb02 3000 	mla	r0, r2, r0, r3
   19136:	ab01      	add	r3, sp, #4
   19138:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   1913a:	462a      	mov	r2, r5
   1913c:	4621      	mov	r1, r4
   1913e:	f242 000e 	movw	r0, #8206	; 0x200e
   19142:	f7ff fcbf 	bl	18ac4 <bt_hci_cmd_send_sync>
}
   19146:	b005      	add	sp, #20
   19148:	bd30      	pop	{r4, r5, pc}
   1914a:	bf00      	nop
   1914c:	20000374 	.word	0x20000374
   19150:	20002ccc 	.word	0x20002ccc

00019154 <bt_send>:
	return bt_dev.drv->send(buf);
   19154:	4b02      	ldr	r3, [pc, #8]	; (19160 <bt_send+0xc>)
   19156:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   1915a:	691b      	ldr	r3, [r3, #16]
   1915c:	4718      	bx	r3
   1915e:	bf00      	nop
   19160:	200002a8 	.word	0x200002a8

00019164 <bt_hci_cmd_send>:
{
   19164:	b538      	push	{r3, r4, r5, lr}
   19166:	4605      	mov	r5, r0
	if (!buf) {
   19168:	460c      	mov	r4, r1
   1916a:	b919      	cbnz	r1, 19174 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   1916c:	f7ff fc62 	bl	18a34 <bt_hci_cmd_create>
		if (!buf) {
   19170:	4604      	mov	r4, r0
   19172:	b308      	cbz	r0, 191b8 <bt_hci_cmd_send+0x54>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   19174:	f640 4335 	movw	r3, #3125	; 0xc35
   19178:	429d      	cmp	r5, r3
   1917a:	d117      	bne.n	191ac <bt_hci_cmd_send+0x48>
		err = bt_send(buf);
   1917c:	4620      	mov	r0, r4
   1917e:	f7ff ffe9 	bl	19154 <bt_send>
		if (err) {
   19182:	4605      	mov	r5, r0
   19184:	b180      	cbz	r0, 191a8 <bt_hci_cmd_send+0x44>
			BT_ERR("Unable to send to driver (err %d)", err);
   19186:	4a0e      	ldr	r2, [pc, #56]	; (191c0 <bt_hci_cmd_send+0x5c>)
   19188:	6813      	ldr	r3, [r2, #0]
   1918a:	075b      	lsls	r3, r3, #29
   1918c:	d009      	beq.n	191a2 <bt_hci_cmd_send+0x3e>
   1918e:	4b0d      	ldr	r3, [pc, #52]	; (191c4 <bt_hci_cmd_send+0x60>)
   19190:	1ad2      	subs	r2, r2, r3
   19192:	0892      	lsrs	r2, r2, #2
   19194:	0192      	lsls	r2, r2, #6
   19196:	4601      	mov	r1, r0
   19198:	f042 0201 	orr.w	r2, r2, #1
   1919c:	480a      	ldr	r0, [pc, #40]	; (191c8 <bt_hci_cmd_send+0x64>)
   1919e:	f013 fdab 	bl	2ccf8 <log_1>
			net_buf_unref(buf);
   191a2:	4620      	mov	r0, r4
   191a4:	f007 ffb8 	bl	21118 <net_buf_unref>
}
   191a8:	4628      	mov	r0, r5
   191aa:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   191ac:	4807      	ldr	r0, [pc, #28]	; (191cc <bt_hci_cmd_send+0x68>)
   191ae:	4621      	mov	r1, r4
   191b0:	f007 ff7e 	bl	210b0 <net_buf_put>
	return 0;
   191b4:	2500      	movs	r5, #0
   191b6:	e7f7      	b.n	191a8 <bt_hci_cmd_send+0x44>
			return -ENOBUFS;
   191b8:	f06f 0568 	mvn.w	r5, #104	; 0x68
   191bc:	e7f4      	b.n	191a8 <bt_hci_cmd_send+0x44>
   191be:	bf00      	nop
   191c0:	200007b8 	.word	0x200007b8
   191c4:	200007a8 	.word	0x200007a8
   191c8:	00034e00 	.word	0x00034e00
   191cc:	200003f8 	.word	0x200003f8

000191d0 <conn_auto_initiate>:
{
   191d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   191d2:	7a83      	ldrb	r3, [r0, #10]
   191d4:	2b07      	cmp	r3, #7
{
   191d6:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   191d8:	d121      	bne.n	1921e <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   191da:	f3bf 8f5b 	dmb	ish
   191de:	6843      	ldr	r3, [r0, #4]
   191e0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   191e4:	0499      	lsls	r1, r3, #18
   191e6:	f100 0604 	add.w	r6, r0, #4
   191ea:	d41a      	bmi.n	19222 <conn_auto_initiate+0x52>
   191ec:	78c3      	ldrb	r3, [r0, #3]
   191ee:	b123      	cbz	r3, 191fa <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   191f0:	4b38      	ldr	r3, [pc, #224]	; (192d4 <conn_auto_initiate+0x104>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   191f2:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   191f6:	071a      	lsls	r2, r3, #28
   191f8:	d513      	bpl.n	19222 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   191fa:	2102      	movs	r1, #2
   191fc:	f242 0016 	movw	r0, #8214	; 0x2016
   19200:	f7ff fc18 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   19204:	4605      	mov	r5, r0
   19206:	b160      	cbz	r0, 19222 <conn_auto_initiate+0x52>
   19208:	2102      	movs	r1, #2
   1920a:	3008      	adds	r0, #8
   1920c:	f008 f8b4 	bl	21378 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   19210:	8823      	ldrh	r3, [r4, #0]
   19212:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   19214:	4629      	mov	r1, r5
   19216:	f242 0016 	movw	r0, #8214	; 0x2016
   1921a:	f7ff ffa3 	bl	19164 <bt_hci_cmd_send>
}
   1921e:	b004      	add	sp, #16
   19220:	bd70      	pop	{r4, r5, r6, pc}
   19222:	f3bf 8f5b 	dmb	ish
   19226:	6863      	ldr	r3, [r4, #4]
   19228:	4d2a      	ldr	r5, [pc, #168]	; (192d4 <conn_auto_initiate+0x104>)
   1922a:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1922e:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   19232:	f3c3 3100 	ubfx	r1, r3, #12, #1
   19236:	d125      	bne.n	19284 <conn_auto_initiate+0xb4>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   19238:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   1923c:	07db      	lsls	r3, r3, #31
   1923e:	d521      	bpl.n	19284 <conn_auto_initiate+0xb4>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   19240:	2302      	movs	r3, #2
   19242:	9100      	str	r1, [sp, #0]
   19244:	461a      	mov	r2, r3
   19246:	4620      	mov	r0, r4
   19248:	f015 f8f8 	bl	2e43c <bt_le_set_phy>
		if (!err) {
   1924c:	4601      	mov	r1, r0
   1924e:	b960      	cbnz	r0, 1926a <conn_auto_initiate+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19250:	f3bf 8f5b 	dmb	ish
   19254:	e856 3f00 	ldrex	r3, [r6]
   19258:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1925c:	e846 3200 	strex	r2, r3, [r6]
   19260:	2a00      	cmp	r2, #0
   19262:	d1f7      	bne.n	19254 <conn_auto_initiate+0x84>
   19264:	f3bf 8f5b 	dmb	ish
			return;
   19268:	e7d9      	b.n	1921e <conn_auto_initiate+0x4e>
		BT_ERR("Failed to set LE PHY (%d)", err);
   1926a:	4a1b      	ldr	r2, [pc, #108]	; (192d8 <conn_auto_initiate+0x108>)
   1926c:	6813      	ldr	r3, [r2, #0]
   1926e:	0758      	lsls	r0, r3, #29
   19270:	d008      	beq.n	19284 <conn_auto_initiate+0xb4>
   19272:	4b1a      	ldr	r3, [pc, #104]	; (192dc <conn_auto_initiate+0x10c>)
   19274:	481a      	ldr	r0, [pc, #104]	; (192e0 <conn_auto_initiate+0x110>)
   19276:	1ad2      	subs	r2, r2, r3
   19278:	0892      	lsrs	r2, r2, #2
   1927a:	0192      	lsls	r2, r2, #6
   1927c:	f042 0201 	orr.w	r2, r2, #1
   19280:	f013 fd3a 	bl	2ccf8 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   19284:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   19288:	0699      	lsls	r1, r3, #26
   1928a:	d5c8      	bpl.n	1921e <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   1928c:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   19290:	689b      	ldr	r3, [r3, #8]
   19292:	079a      	lsls	r2, r3, #30
   19294:	d5c3      	bpl.n	1921e <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   19296:	f10d 010e 	add.w	r1, sp, #14
   1929a:	a803      	add	r0, sp, #12
   1929c:	f7ff fc8e 	bl	18bbc <hci_le_read_max_data_len>
			if (!err) {
   192a0:	2800      	cmp	r0, #0
   192a2:	d1bc      	bne.n	1921e <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   192a4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   192a8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   192ac:	4620      	mov	r0, r4
   192ae:	f015 f8a8 	bl	2e402 <bt_le_set_data_len>
				if (err) {
   192b2:	4601      	mov	r1, r0
   192b4:	2800      	cmp	r0, #0
   192b6:	d0b2      	beq.n	1921e <conn_auto_initiate+0x4e>
					BT_ERR("Failed to set data len (%d)", err);
   192b8:	4a07      	ldr	r2, [pc, #28]	; (192d8 <conn_auto_initiate+0x108>)
   192ba:	6813      	ldr	r3, [r2, #0]
   192bc:	075b      	lsls	r3, r3, #29
   192be:	d0ae      	beq.n	1921e <conn_auto_initiate+0x4e>
   192c0:	4b06      	ldr	r3, [pc, #24]	; (192dc <conn_auto_initiate+0x10c>)
   192c2:	4808      	ldr	r0, [pc, #32]	; (192e4 <conn_auto_initiate+0x114>)
   192c4:	1ad2      	subs	r2, r2, r3
   192c6:	0892      	lsrs	r2, r2, #2
   192c8:	0192      	lsls	r2, r2, #6
   192ca:	f042 0201 	orr.w	r2, r2, #1
   192ce:	f013 fd13 	bl	2ccf8 <log_1>
		}
   192d2:	e7a4      	b.n	1921e <conn_auto_initiate+0x4e>
   192d4:	200002a8 	.word	0x200002a8
   192d8:	200007b8 	.word	0x200007b8
   192dc:	200007a8 	.word	0x200007a8
   192e0:	00034e22 	.word	0x00034e22
   192e4:	00034e3c 	.word	0x00034e3c

000192e8 <bt_hci_le_enh_conn_complete>:
{
   192e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   192ec:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   192f0:	4a7a      	ldr	r2, [pc, #488]	; (194dc <bt_hci_le_enh_conn_complete+0x1f4>)
	if (evt->status) {
   192f2:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   192f4:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   192f6:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   192fa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   192fe:	b29b      	uxth	r3, r3
   19300:	4299      	cmp	r1, r3
   19302:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
   19306:	bf08      	it	eq
   19308:	f8a2 8000 	strheq.w	r8, [r2]
{
   1930c:	b085      	sub	sp, #20
   1930e:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19310:	fa1f f689 	uxth.w	r6, r9
			return true;
   19314:	bf08      	it	eq
   19316:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
   1931a:	2c00      	cmp	r4, #0
   1931c:	d03e      	beq.n	1939c <bt_hci_le_enh_conn_complete+0xb4>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1931e:	2c02      	cmp	r4, #2
   19320:	d12c      	bne.n	1937c <bt_hci_le_enh_conn_complete+0x94>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   19322:	2100      	movs	r1, #0
   19324:	2206      	movs	r2, #6
   19326:	4608      	mov	r0, r1
   19328:	f001 ffac 	bl	1b284 <bt_conn_lookup_state_le>
	if (!conn) {
   1932c:	4605      	mov	r5, r0
   1932e:	b990      	cbnz	r0, 19356 <bt_hci_le_enh_conn_complete+0x6e>
		BT_ERR("No pending central connection");
   19330:	496b      	ldr	r1, [pc, #428]	; (194e0 <bt_hci_le_enh_conn_complete+0x1f8>)
   19332:	680b      	ldr	r3, [r1, #0]
   19334:	0758      	lsls	r0, r3, #29
   19336:	d008      	beq.n	1934a <bt_hci_le_enh_conn_complete+0x62>
   19338:	4b6a      	ldr	r3, [pc, #424]	; (194e4 <bt_hci_le_enh_conn_complete+0x1fc>)
   1933a:	486b      	ldr	r0, [pc, #428]	; (194e8 <bt_hci_le_enh_conn_complete+0x200>)
   1933c:	1ac9      	subs	r1, r1, r3
   1933e:	0889      	lsrs	r1, r1, #2
   19340:	0189      	lsls	r1, r1, #6
   19342:	f041 0101 	orr.w	r1, r1, #1
   19346:	f013 fcca 	bl	2ccde <log_0>
			bt_le_scan_update(false);
   1934a:	2000      	movs	r0, #0
   1934c:	f001 f80c 	bl	1a368 <bt_le_scan_update>
}
   19350:	b005      	add	sp, #20
   19352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   19356:	2100      	movs	r1, #0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   19358:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1935a:	f001 fcef 	bl	1ad3c <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1935e:	f3bf 8f5b 	dmb	ish
   19362:	686b      	ldr	r3, [r5, #4]
   19364:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   19368:	07d9      	lsls	r1, r3, #31
   1936a:	d503      	bpl.n	19374 <bt_hci_le_enh_conn_complete+0x8c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1936c:	4621      	mov	r1, r4
   1936e:	4628      	mov	r0, r5
   19370:	f001 fce4 	bl	1ad3c <bt_conn_set_state>
	bt_conn_unref(conn);
   19374:	4628      	mov	r0, r5
   19376:	f001 fcab 	bl	1acd0 <bt_conn_unref>
   1937a:	e7e6      	b.n	1934a <bt_hci_le_enh_conn_complete+0x62>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   1937c:	4a58      	ldr	r2, [pc, #352]	; (194e0 <bt_hci_le_enh_conn_complete+0x1f8>)
   1937e:	6813      	ldr	r3, [r2, #0]
   19380:	f013 0f06 	tst.w	r3, #6
   19384:	d0e4      	beq.n	19350 <bt_hci_le_enh_conn_complete+0x68>
   19386:	4b57      	ldr	r3, [pc, #348]	; (194e4 <bt_hci_le_enh_conn_complete+0x1fc>)
   19388:	4858      	ldr	r0, [pc, #352]	; (194ec <bt_hci_le_enh_conn_complete+0x204>)
   1938a:	1ad2      	subs	r2, r2, r3
   1938c:	0892      	lsrs	r2, r2, #2
   1938e:	0192      	lsls	r2, r2, #6
   19390:	f042 0202 	orr.w	r2, r2, #2
   19394:	4621      	mov	r1, r4
   19396:	f013 fcaf 	bl	2ccf8 <log_1>
   1939a:	e7d9      	b.n	19350 <bt_hci_le_enh_conn_complete+0x68>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   1939c:	7903      	ldrb	r3, [r0, #4]
   1939e:	3b02      	subs	r3, #2
   193a0:	2b01      	cmp	r3, #1
   193a2:	f100 0704 	add.w	r7, r0, #4
   193a6:	d841      	bhi.n	1942c <bt_hci_le_enh_conn_complete+0x144>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   193a8:	4639      	mov	r1, r7
   193aa:	a802      	add	r0, sp, #8
   193ac:	f014 ffc4 	bl	2e338 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   193b0:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   193b4:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   193b8:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   193ba:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   193be:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   193c2:	f014 ffc0 	bl	2e346 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   193c6:	2301      	movs	r3, #1
   193c8:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   193cc:	78e8      	ldrb	r0, [r5, #3]
   193ce:	b9a0      	cbnz	r0, 193fa <bt_hci_le_enh_conn_complete+0x112>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   193d0:	2206      	movs	r2, #6
   193d2:	a902      	add	r1, sp, #8
   193d4:	f001 ff56 	bl	1b284 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   193d8:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   193da:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   193dc:	b963      	cbnz	r3, 193f8 <bt_hci_le_enh_conn_complete+0x110>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   193de:	f3bf 8f5b 	dmb	ish
   193e2:	4b43      	ldr	r3, [pc, #268]	; (194f0 <bt_hci_le_enh_conn_complete+0x208>)
   193e4:	e853 2f00 	ldrex	r2, [r3]
   193e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   193ec:	e843 2100 	strex	r1, r2, [r3]
   193f0:	2900      	cmp	r1, #0
   193f2:	d1f7      	bne.n	193e4 <bt_hci_le_enh_conn_complete+0xfc>
   193f4:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   193f8:	bb5c      	cbnz	r4, 19452 <bt_hci_le_enh_conn_complete+0x16a>
		BT_ERR("No pending conn for peer %s",
   193fa:	4b39      	ldr	r3, [pc, #228]	; (194e0 <bt_hci_le_enh_conn_complete+0x1f8>)
   193fc:	681a      	ldr	r2, [r3, #0]
   193fe:	0752      	lsls	r2, r2, #29
   19400:	d00f      	beq.n	19422 <bt_hci_le_enh_conn_complete+0x13a>
   19402:	4c38      	ldr	r4, [pc, #224]	; (194e4 <bt_hci_le_enh_conn_complete+0x1fc>)
   19404:	4638      	mov	r0, r7
   19406:	1b1c      	subs	r4, r3, r4
   19408:	f7fe fdea 	bl	17fe0 <bt_addr_le_str_real>
   1940c:	f7f9 f98a 	bl	12724 <z_log_strdup>
   19410:	08a4      	lsrs	r4, r4, #2
   19412:	01a4      	lsls	r4, r4, #6
   19414:	f044 0401 	orr.w	r4, r4, #1
   19418:	4601      	mov	r1, r0
   1941a:	4622      	mov	r2, r4
   1941c:	4835      	ldr	r0, [pc, #212]	; (194f4 <bt_hci_le_enh_conn_complete+0x20c>)
   1941e:	f013 fc6b 	bl	2ccf8 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   19422:	211f      	movs	r1, #31
   19424:	4630      	mov	r0, r6
   19426:	f014 ff95 	bl	2e354 <bt_hci_disconnect>
		return;
   1942a:	e791      	b.n	19350 <bt_hci_le_enh_conn_complete+0x68>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   1942c:	78c3      	ldrb	r3, [r0, #3]
   1942e:	2b01      	cmp	r3, #1
   19430:	bf04      	itt	eq
   19432:	4b31      	ldreq	r3, [pc, #196]	; (194f8 <bt_hci_le_enh_conn_complete+0x210>)
   19434:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   19438:	4639      	mov	r1, r7
   1943a:	4620      	mov	r0, r4
   1943c:	f015 f86f 	bl	2e51e <bt_lookup_id_addr>
   19440:	4601      	mov	r1, r0
   19442:	a802      	add	r0, sp, #8
   19444:	f014 ff78 	bl	2e338 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   19448:	4639      	mov	r1, r7
   1944a:	4668      	mov	r0, sp
   1944c:	f014 ff74 	bl	2e338 <bt_addr_le_copy>
   19450:	e7bc      	b.n	193cc <bt_hci_le_enh_conn_complete+0xe4>
	conn->handle = handle;
   19452:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   19454:	a902      	add	r1, sp, #8
	conn->handle = handle;
   19456:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1945a:	f014 ff6d 	bl	2e338 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   1945e:	7e2a      	ldrb	r2, [r5, #24]
   19460:	7deb      	ldrb	r3, [r5, #23]
   19462:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19466:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1946a:	7eaa      	ldrb	r2, [r5, #26]
   1946c:	7e6b      	ldrb	r3, [r5, #25]
   1946e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   19472:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   19476:	7f2a      	ldrb	r2, [r5, #28]
   19478:	7eeb      	ldrb	r3, [r5, #27]
   1947a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1947e:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   19482:	78eb      	ldrb	r3, [r5, #3]
   19484:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   19486:	2200      	movs	r2, #0
   19488:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1948a:	b96b      	cbnz	r3, 194a8 <bt_hci_le_enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   1948c:	4669      	mov	r1, sp
   1948e:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   19492:	f014 ff51 	bl	2e338 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   19496:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   19498:	4b17      	ldr	r3, [pc, #92]	; (194f8 <bt_hci_le_enh_conn_complete+0x210>)
					&bt_dev.id_addr[conn->id]);
   1949a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   1949e:	4419      	add	r1, r3
   194a0:	f104 0097 	add.w	r0, r4, #151	; 0x97
   194a4:	f014 ff48 	bl	2e338 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   194a8:	2107      	movs	r1, #7
   194aa:	4620      	mov	r0, r4
   194ac:	f001 fc46 	bl	1ad3c <bt_conn_set_state>
	if (is_disconnected) {
   194b0:	f1b8 0f00 	cmp.w	r8, #0
   194b4:	d003      	beq.n	194be <bt_hci_le_enh_conn_complete+0x1d6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   194b6:	2101      	movs	r1, #1
   194b8:	4620      	mov	r0, r4
   194ba:	f001 fc3f 	bl	1ad3c <bt_conn_set_state>
	bt_conn_connected(conn);
   194be:	4620      	mov	r0, r4
   194c0:	f015 f8d2 	bl	2e668 <bt_conn_connected>
	conn_auto_initiate(conn);
   194c4:	4620      	mov	r0, r4
   194c6:	f7ff fe83 	bl	191d0 <conn_auto_initiate>
	bt_conn_unref(conn);
   194ca:	4620      	mov	r0, r4
   194cc:	f001 fc00 	bl	1acd0 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   194d0:	78e3      	ldrb	r3, [r4, #3]
   194d2:	2b00      	cmp	r3, #0
   194d4:	f47f af3c 	bne.w	19350 <bt_hci_le_enh_conn_complete+0x68>
   194d8:	e737      	b.n	1934a <bt_hci_le_enh_conn_complete+0x62>
   194da:	bf00      	nop
   194dc:	20003904 	.word	0x20003904
   194e0:	200007b8 	.word	0x200007b8
   194e4:	200007a8 	.word	0x200007a8
   194e8:	00034e58 	.word	0x00034e58
   194ec:	00034e76 	.word	0x00034e76
   194f0:	20000374 	.word	0x20000374
   194f4:	00034e8f 	.word	0x00034e8f
   194f8:	200002a8 	.word	0x200002a8

000194fc <le_phy_update_complete>:
{
   194fc:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   194fe:	6883      	ldr	r3, [r0, #8]
   19500:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   19504:	4628      	mov	r0, r5
   19506:	f001 fc0d 	bl	1ad24 <bt_conn_lookup_handle>
	if (!conn) {
   1950a:	4604      	mov	r4, r0
   1950c:	b978      	cbnz	r0, 1952e <le_phy_update_complete+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1950e:	4a19      	ldr	r2, [pc, #100]	; (19574 <le_phy_update_complete+0x78>)
   19510:	6813      	ldr	r3, [r2, #0]
   19512:	0759      	lsls	r1, r3, #29
   19514:	d02d      	beq.n	19572 <le_phy_update_complete+0x76>
   19516:	4b18      	ldr	r3, [pc, #96]	; (19578 <le_phy_update_complete+0x7c>)
   19518:	4818      	ldr	r0, [pc, #96]	; (1957c <le_phy_update_complete+0x80>)
   1951a:	1ad2      	subs	r2, r2, r3
   1951c:	0892      	lsrs	r2, r2, #2
   1951e:	0192      	lsls	r2, r2, #6
   19520:	4629      	mov	r1, r5
   19522:	f042 0201 	orr.w	r2, r2, #1
}
   19526:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1952a:	f013 bbe5 	b.w	2ccf8 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1952e:	1d03      	adds	r3, r0, #4
   19530:	f3bf 8f5b 	dmb	ish
   19534:	e853 2f00 	ldrex	r2, [r3]
   19538:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   1953c:	e843 1500 	strex	r5, r1, [r3]
   19540:	2d00      	cmp	r5, #0
   19542:	d1f7      	bne.n	19534 <le_phy_update_complete+0x38>
   19544:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   19548:	0612      	lsls	r2, r2, #24
   1954a:	d50d      	bpl.n	19568 <le_phy_update_complete+0x6c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1954c:	f3bf 8f5b 	dmb	ish
   19550:	e853 2f00 	ldrex	r2, [r3]
   19554:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   19558:	e843 2100 	strex	r1, r2, [r3]
   1955c:	2900      	cmp	r1, #0
   1955e:	d1f7      	bne.n	19550 <le_phy_update_complete+0x54>
   19560:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   19564:	f7ff fe34 	bl	191d0 <conn_auto_initiate>
	bt_conn_unref(conn);
   19568:	4620      	mov	r0, r4
}
   1956a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1956e:	f001 bbaf 	b.w	1acd0 <bt_conn_unref>
}
   19572:	bd38      	pop	{r3, r4, r5, pc}
   19574:	200007b8 	.word	0x200007b8
   19578:	200007a8 	.word	0x200007a8
   1957c:	00034aa3 	.word	0x00034aa3

00019580 <le_remote_feat_complete>:
{
   19580:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   19582:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   19584:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   19588:	4630      	mov	r0, r6
   1958a:	f001 fbcb 	bl	1ad24 <bt_conn_lookup_handle>
	if (!conn) {
   1958e:	4604      	mov	r4, r0
   19590:	b978      	cbnz	r0, 195b2 <le_remote_feat_complete+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   19592:	4a17      	ldr	r2, [pc, #92]	; (195f0 <le_remote_feat_complete+0x70>)
   19594:	6813      	ldr	r3, [r2, #0]
   19596:	075b      	lsls	r3, r3, #29
   19598:	d029      	beq.n	195ee <le_remote_feat_complete+0x6e>
   1959a:	4b16      	ldr	r3, [pc, #88]	; (195f4 <le_remote_feat_complete+0x74>)
   1959c:	4816      	ldr	r0, [pc, #88]	; (195f8 <le_remote_feat_complete+0x78>)
   1959e:	1ad2      	subs	r2, r2, r3
   195a0:	0892      	lsrs	r2, r2, #2
   195a2:	0192      	lsls	r2, r2, #6
   195a4:	4631      	mov	r1, r6
   195a6:	f042 0201 	orr.w	r2, r2, #1
}
   195aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   195ae:	f013 bba3 	b.w	2ccf8 <log_1>
	if (!evt->status) {
   195b2:	782b      	ldrb	r3, [r5, #0]
   195b4:	b933      	cbnz	r3, 195c4 <le_remote_feat_complete+0x44>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   195b6:	f855 3f03 	ldr.w	r3, [r5, #3]!
   195ba:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   195be:	686b      	ldr	r3, [r5, #4]
   195c0:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   195c4:	1d23      	adds	r3, r4, #4
   195c6:	f3bf 8f5b 	dmb	ish
   195ca:	e853 2f00 	ldrex	r2, [r3]
   195ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   195d2:	e843 2100 	strex	r1, r2, [r3]
   195d6:	2900      	cmp	r1, #0
   195d8:	d1f7      	bne.n	195ca <le_remote_feat_complete+0x4a>
   195da:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   195de:	4620      	mov	r0, r4
   195e0:	f7ff fdf6 	bl	191d0 <conn_auto_initiate>
	bt_conn_unref(conn);
   195e4:	4620      	mov	r0, r4
}
   195e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   195ea:	f001 bb71 	b.w	1acd0 <bt_conn_unref>
}
   195ee:	bd70      	pop	{r4, r5, r6, pc}
   195f0:	200007b8 	.word	0x200007b8
   195f4:	200007a8 	.word	0x200007a8
   195f8:	00034aa3 	.word	0x00034aa3

000195fc <le_conn_param_neg_reply>:
{
   195fc:	b570      	push	{r4, r5, r6, lr}
   195fe:	4606      	mov	r6, r0
   19600:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   19602:	f242 0021 	movw	r0, #8225	; 0x2021
   19606:	2103      	movs	r1, #3
   19608:	f7ff fa14 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   1960c:	4604      	mov	r4, r0
   1960e:	b970      	cbnz	r0, 1962e <le_conn_param_neg_reply+0x32>
		BT_ERR("Unable to allocate buffer");
   19610:	490e      	ldr	r1, [pc, #56]	; (1964c <le_conn_param_neg_reply+0x50>)
   19612:	680b      	ldr	r3, [r1, #0]
   19614:	075b      	lsls	r3, r3, #29
   19616:	d017      	beq.n	19648 <le_conn_param_neg_reply+0x4c>
   19618:	4b0d      	ldr	r3, [pc, #52]	; (19650 <le_conn_param_neg_reply+0x54>)
   1961a:	480e      	ldr	r0, [pc, #56]	; (19654 <le_conn_param_neg_reply+0x58>)
   1961c:	1ac9      	subs	r1, r1, r3
   1961e:	0889      	lsrs	r1, r1, #2
   19620:	0189      	lsls	r1, r1, #6
}
   19622:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   19626:	f041 0101 	orr.w	r1, r1, #1
   1962a:	f013 bb58 	b.w	2ccde <log_0>
   1962e:	2103      	movs	r1, #3
   19630:	3008      	adds	r0, #8
   19632:	f007 fea1 	bl	21378 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   19636:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   19638:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1963a:	4621      	mov	r1, r4
   1963c:	f242 0021 	movw	r0, #8225	; 0x2021
}
   19640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   19644:	f7ff bd8e 	b.w	19164 <bt_hci_cmd_send>
}
   19648:	bd70      	pop	{r4, r5, r6, pc}
   1964a:	bf00      	nop
   1964c:	200007b8 	.word	0x200007b8
   19650:	200007a8 	.word	0x200007a8
   19654:	00034eab 	.word	0x00034eab

00019658 <le_conn_param_req>:
{
   19658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1965a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1965c:	78d9      	ldrb	r1, [r3, #3]
   1965e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   19660:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   19662:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19666:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1966a:	7959      	ldrb	r1, [r3, #5]
   1966c:	791a      	ldrb	r2, [r3, #4]
   1966e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   19672:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   19676:	799a      	ldrb	r2, [r3, #6]
   19678:	79d9      	ldrb	r1, [r3, #7]
   1967a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1967e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   19682:	7a1a      	ldrb	r2, [r3, #8]
   19684:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   19686:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   19688:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1968c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1968e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   19692:	f001 fb47 	bl	1ad24 <bt_conn_lookup_handle>
	if (!conn) {
   19696:	4606      	mov	r6, r0
   19698:	b998      	cbnz	r0, 196c2 <le_conn_param_req+0x6a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1969a:	4a22      	ldr	r2, [pc, #136]	; (19724 <le_conn_param_req+0xcc>)
   1969c:	6813      	ldr	r3, [r2, #0]
   1969e:	075b      	lsls	r3, r3, #29
   196a0:	d009      	beq.n	196b6 <le_conn_param_req+0x5e>
   196a2:	4b21      	ldr	r3, [pc, #132]	; (19728 <le_conn_param_req+0xd0>)
   196a4:	4821      	ldr	r0, [pc, #132]	; (1972c <le_conn_param_req+0xd4>)
   196a6:	1ad2      	subs	r2, r2, r3
   196a8:	0892      	lsrs	r2, r2, #2
   196aa:	0192      	lsls	r2, r2, #6
   196ac:	f042 0201 	orr.w	r2, r2, #1
   196b0:	4621      	mov	r1, r4
   196b2:	f013 fb21 	bl	2ccf8 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   196b6:	2102      	movs	r1, #2
   196b8:	4620      	mov	r0, r4
   196ba:	f7ff ff9f 	bl	195fc <le_conn_param_neg_reply>
}
   196be:	b003      	add	sp, #12
   196c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   196c2:	4669      	mov	r1, sp
   196c4:	f001 fd1e 	bl	1b104 <le_param_req>
   196c8:	b938      	cbnz	r0, 196da <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   196ca:	211e      	movs	r1, #30
   196cc:	4620      	mov	r0, r4
   196ce:	f7ff ff95 	bl	195fc <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   196d2:	4630      	mov	r0, r6
   196d4:	f001 fafc 	bl	1acd0 <bt_conn_unref>
   196d8:	e7f1      	b.n	196be <le_conn_param_req+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   196da:	210e      	movs	r1, #14
   196dc:	f242 0020 	movw	r0, #8224	; 0x2020
   196e0:	f7ff f9a8 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   196e4:	4605      	mov	r5, r0
   196e6:	2800      	cmp	r0, #0
   196e8:	d0f3      	beq.n	196d2 <le_conn_param_req+0x7a>
   196ea:	210e      	movs	r1, #14
   196ec:	3008      	adds	r0, #8
   196ee:	f007 fe43 	bl	21378 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   196f2:	220e      	movs	r2, #14
   196f4:	4604      	mov	r4, r0
   196f6:	2100      	movs	r1, #0
   196f8:	f016 ff97 	bl	3062a <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   196fc:	f8bd 3000 	ldrh.w	r3, [sp]
   19700:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   19702:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   19706:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   19708:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1970c:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1970e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   19712:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   19714:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   19716:	4629      	mov	r1, r5
   19718:	f242 0020 	movw	r0, #8224	; 0x2020
   1971c:	f7ff fd22 	bl	19164 <bt_hci_cmd_send>
   19720:	e7d7      	b.n	196d2 <le_conn_param_req+0x7a>
   19722:	bf00      	nop
   19724:	200007b8 	.word	0x200007b8
   19728:	200007a8 	.word	0x200007a8
   1972c:	00034aa3 	.word	0x00034aa3

00019730 <hci_tx_thread>:
{
   19730:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19734:	4f57      	ldr	r7, [pc, #348]	; (19894 <hci_tx_thread+0x164>)
   19736:	4d58      	ldr	r5, [pc, #352]	; (19898 <hci_tx_thread+0x168>)
		events[0].state = K_POLL_STATE_NOT_READY;
   19738:	f8df a164 	ldr.w	sl, [pc, #356]	; 198a0 <hci_tx_thread+0x170>
		BT_ASSERT(err == 0);
   1973c:	f8df b18c 	ldr.w	fp, [pc, #396]	; 198cc <hci_tx_thread+0x19c>
   19740:	1b7d      	subs	r5, r7, r5
   19742:	08ad      	lsrs	r5, r5, #2
		events[0].state = K_POLL_STATE_NOT_READY;
   19744:	f8da 300c 	ldr.w	r3, [sl, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   19748:	4854      	ldr	r0, [pc, #336]	; (1989c <hci_tx_thread+0x16c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1974a:	f36f 3352 	bfc	r3, #13, #6
   1974e:	f8ca 300c 	str.w	r3, [sl, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   19752:	f001 fa7f 	bl	1ac54 <bt_conn_prepare_events>
   19756:	f100 0801 	add.w	r8, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1975a:	4851      	ldr	r0, [pc, #324]	; (198a0 <hci_tx_thread+0x170>)
   1975c:	f04f 32ff 	mov.w	r2, #4294967295
   19760:	f04f 33ff 	mov.w	r3, #4294967295
   19764:	4641      	mov	r1, r8
   19766:	f00f fb71 	bl	28e4c <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1976a:	b160      	cbz	r0, 19786 <hci_tx_thread+0x56>
   1976c:	494d      	ldr	r1, [pc, #308]	; (198a4 <hci_tx_thread+0x174>)
   1976e:	484e      	ldr	r0, [pc, #312]	; (198a8 <hci_tx_thread+0x178>)
   19770:	f640 1393 	movw	r3, #2451	; 0x993
   19774:	465a      	mov	r2, fp
   19776:	f012 ff10 	bl	2c59a <printk>
   1977a:	4040      	eors	r0, r0
   1977c:	f380 8811 	msr	BASEPRI, r0
   19780:	f04f 0003 	mov.w	r0, #3
   19784:	df02      	svc	2
{
   19786:	f8df 9118 	ldr.w	r9, [pc, #280]	; 198a0 <hci_tx_thread+0x170>
	return z_impl_k_sem_take(sem, timeout);
   1978a:	4e48      	ldr	r6, [pc, #288]	; (198ac <hci_tx_thread+0x17c>)
	for (; count; ev++, count--) {
   1978c:	f1b8 0f00 	cmp.w	r8, #0
   19790:	d102      	bne.n	19798 <hci_tx_thread+0x68>
	z_impl_k_yield();
   19792:	f00e f897 	bl	278c4 <z_impl_k_yield>
	while (1) {
   19796:	e7d5      	b.n	19744 <hci_tx_thread+0x14>
		switch (ev->state) {
   19798:	f8d9 100c 	ldr.w	r1, [r9, #12]
   1979c:	f3c1 3145 	ubfx	r1, r1, #13, #6
   197a0:	2901      	cmp	r1, #1
   197a2:	d95f      	bls.n	19864 <hci_tx_thread+0x134>
   197a4:	2904      	cmp	r1, #4
   197a6:	d16a      	bne.n	1987e <hci_tx_thread+0x14e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   197a8:	f899 300c 	ldrb.w	r3, [r9, #12]
   197ac:	2b00      	cmp	r3, #0
   197ae:	d15e      	bne.n	1986e <hci_tx_thread+0x13e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   197b0:	483f      	ldr	r0, [pc, #252]	; (198b0 <hci_tx_thread+0x180>)
   197b2:	2200      	movs	r2, #0
   197b4:	2300      	movs	r3, #0
   197b6:	f007 fc1d 	bl	20ff4 <net_buf_get>
	BT_ASSERT(buf);
   197ba:	4604      	mov	r4, r0
   197bc:	b960      	cbnz	r0, 197d8 <hci_tx_thread+0xa8>
   197be:	493d      	ldr	r1, [pc, #244]	; (198b4 <hci_tx_thread+0x184>)
   197c0:	4839      	ldr	r0, [pc, #228]	; (198a8 <hci_tx_thread+0x178>)
   197c2:	f640 132a 	movw	r3, #2346	; 0x92a
   197c6:	465a      	mov	r2, fp
   197c8:	f012 fee7 	bl	2c59a <printk>
   197cc:	4040      	eors	r0, r0
   197ce:	f380 8811 	msr	BASEPRI, r0
   197d2:	f04f 0003 	mov.w	r0, #3
   197d6:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   197d8:	f04f 33ff 	mov.w	r3, #4294967295
   197dc:	4836      	ldr	r0, [pc, #216]	; (198b8 <hci_tx_thread+0x188>)
   197de:	f04f 32ff 	mov.w	r2, #4294967295
   197e2:	f00c fb4d 	bl	25e80 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   197e6:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
   197ea:	b17b      	cbz	r3, 1980c <hci_tx_thread+0xdc>
		BT_ERR("Uncleared pending sent_cmd");
   197ec:	683b      	ldr	r3, [r7, #0]
   197ee:	075a      	lsls	r2, r3, #29
   197f0:	d005      	beq.n	197fe <hci_tx_thread+0xce>
   197f2:	01a9      	lsls	r1, r5, #6
   197f4:	4831      	ldr	r0, [pc, #196]	; (198bc <hci_tx_thread+0x18c>)
   197f6:	f041 0101 	orr.w	r1, r1, #1
   197fa:	f013 fa70 	bl	2ccde <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   197fe:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   19802:	f007 fc89 	bl	21118 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   19806:	2300      	movs	r3, #0
   19808:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   1980c:	4620      	mov	r0, r4
   1980e:	f007 fcc9 	bl	211a4 <net_buf_ref>
   19812:	f8c6 0130 	str.w	r0, [r6, #304]	; 0x130
	err = bt_send(buf);
   19816:	4620      	mov	r0, r4
   19818:	f7ff fc9c 	bl	19154 <bt_send>
	if (err) {
   1981c:	4601      	mov	r1, r0
   1981e:	b308      	cbz	r0, 19864 <hci_tx_thread+0x134>
		BT_ERR("Unable to send to driver (err %d)", err);
   19820:	683b      	ldr	r3, [r7, #0]
   19822:	075b      	lsls	r3, r3, #29
   19824:	d005      	beq.n	19832 <hci_tx_thread+0x102>
   19826:	01aa      	lsls	r2, r5, #6
   19828:	4825      	ldr	r0, [pc, #148]	; (198c0 <hci_tx_thread+0x190>)
   1982a:	f042 0201 	orr.w	r2, r2, #1
   1982e:	f013 fa63 	bl	2ccf8 <log_1>
	z_impl_k_sem_give(sem);
   19832:	4821      	ldr	r0, [pc, #132]	; (198b8 <hci_tx_thread+0x188>)
   19834:	f00c fae0 	bl	25df8 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   19838:	4620      	mov	r0, r4
   1983a:	f007 fa73 	bl	20d24 <net_buf_id>
   1983e:	4b21      	ldr	r3, [pc, #132]	; (198c4 <hci_tx_thread+0x194>)
   19840:	220c      	movs	r2, #12
   19842:	fb02 3000 	mla	r0, r2, r0, r3
   19846:	211f      	movs	r1, #31
   19848:	8840      	ldrh	r0, [r0, #2]
   1984a:	4622      	mov	r2, r4
   1984c:	f7ff f806 	bl	1885c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   19850:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   19854:	f007 fc60 	bl	21118 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   19858:	2300      	movs	r3, #0
		net_buf_unref(buf);
   1985a:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   1985c:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
		net_buf_unref(buf);
   19860:	f007 fc5a 	bl	21118 <net_buf_unref>
	for (; count; ev++, count--) {
   19864:	f109 0914 	add.w	r9, r9, #20
   19868:	f108 38ff 	add.w	r8, r8, #4294967295
   1986c:	e78e      	b.n	1978c <hci_tx_thread+0x5c>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   1986e:	2b01      	cmp	r3, #1
   19870:	d1f8      	bne.n	19864 <hci_tx_thread+0x134>
					conn = CONTAINER_OF(ev->fifo,
   19872:	f8d9 0010 	ldr.w	r0, [r9, #16]
					bt_conn_process_tx(conn);
   19876:	3838      	subs	r0, #56	; 0x38
   19878:	f001 ff40 	bl	1b6fc <bt_conn_process_tx>
   1987c:	e7f2      	b.n	19864 <hci_tx_thread+0x134>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   1987e:	683b      	ldr	r3, [r7, #0]
   19880:	f013 0f06 	tst.w	r3, #6
   19884:	d0ee      	beq.n	19864 <hci_tx_thread+0x134>
   19886:	01aa      	lsls	r2, r5, #6
   19888:	480f      	ldr	r0, [pc, #60]	; (198c8 <hci_tx_thread+0x198>)
   1988a:	f042 0202 	orr.w	r2, r2, #2
   1988e:	f013 fa33 	bl	2ccf8 <log_1>
   19892:	e7e7      	b.n	19864 <hci_tx_thread+0x134>
   19894:	200007b8 	.word	0x200007b8
   19898:	200007a8 	.word	0x200007a8
   1989c:	200004ec 	.word	0x200004ec
   198a0:	200004d8 	.word	0x200004d8
   198a4:	000327b2 	.word	0x000327b2
   198a8:	00032486 	.word	0x00032486
   198ac:	200002a8 	.word	0x200002a8
   198b0:	200003f8 	.word	0x200003f8
   198b4:	00034a77 	.word	0x00034a77
   198b8:	200003c0 	.word	0x200003c0
   198bc:	00034ec5 	.word	0x00034ec5
   198c0:	00034e00 	.word	0x00034e00
   198c4:	20002ccc 	.word	0x20002ccc
   198c8:	00034ee0 	.word	0x00034ee0
   198cc:	00034b51 	.word	0x00034b51

000198d0 <hci_event_prio>:
{
   198d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   198d4:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   198d6:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   198da:	4630      	mov	r0, r6
   198dc:	f016 f8c1 	bl	2fa62 <net_buf_simple_headroom>
	state->len = buf->len;
   198e0:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   198e4:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   198e8:	4605      	mov	r5, r0
   198ea:	d80c      	bhi.n	19906 <hci_event_prio+0x36>
   198ec:	4a1c      	ldr	r2, [pc, #112]	; (19960 <hci_event_prio+0x90>)
   198ee:	491d      	ldr	r1, [pc, #116]	; (19964 <hci_event_prio+0x94>)
   198f0:	481d      	ldr	r0, [pc, #116]	; (19968 <hci_event_prio+0x98>)
   198f2:	f640 5327 	movw	r3, #3367	; 0xd27
   198f6:	f012 fe50 	bl	2c59a <printk>
   198fa:	4040      	eors	r0, r0
   198fc:	f380 8811 	msr	BASEPRI, r0
   19900:	f04f 0003 	mov.w	r0, #3
   19904:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   19906:	2102      	movs	r1, #2
   19908:	4630      	mov	r0, r6
   1990a:	f007 fd13 	bl	21334 <net_buf_simple_pull_mem>
   1990e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19910:	7800      	ldrb	r0, [r0, #0]
   19912:	f014 fcff 	bl	2e314 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   19916:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19918:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   1991a:	d40c      	bmi.n	19936 <hci_event_prio+0x66>
   1991c:	4a10      	ldr	r2, [pc, #64]	; (19960 <hci_event_prio+0x90>)
   1991e:	4913      	ldr	r1, [pc, #76]	; (1996c <hci_event_prio+0x9c>)
   19920:	4811      	ldr	r0, [pc, #68]	; (19968 <hci_event_prio+0x98>)
   19922:	f640 532b 	movw	r3, #3371	; 0xd2b
   19926:	f012 fe38 	bl	2c59a <printk>
   1992a:	4040      	eors	r0, r0
   1992c:	f380 8811 	msr	BASEPRI, r0
   19930:	f04f 0003 	mov.w	r0, #3
   19934:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   19936:	2305      	movs	r3, #5
   19938:	4a0d      	ldr	r2, [pc, #52]	; (19970 <hci_event_prio+0xa0>)
   1993a:	7838      	ldrb	r0, [r7, #0]
   1993c:	4621      	mov	r1, r4
   1993e:	f7fe fd63 	bl	18408 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   19942:	07b3      	lsls	r3, r6, #30
   19944:	d507      	bpl.n	19956 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   19946:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   19948:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1994c:	fa10 f585 	uxtah	r5, r0, r5
   19950:	60a5      	str	r5, [r4, #8]
}
   19952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   19956:	4620      	mov	r0, r4
}
   19958:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   1995c:	f007 bbdc 	b.w	21118 <net_buf_unref>
   19960:	00034b51 	.word	0x00034b51
   19964:	00034b85 	.word	0x00034b85
   19968:	00032486 	.word	0x00032486
   1996c:	00034f01 	.word	0x00034f01
   19970:	0003170c 	.word	0x0003170c

00019974 <bt_recv>:
{
   19974:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   19976:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   19978:	2901      	cmp	r1, #1
{
   1997a:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   1997c:	d007      	beq.n	1998e <bt_recv+0x1a>
   1997e:	2903      	cmp	r1, #3
   19980:	d113      	bne.n	199aa <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   19982:	4813      	ldr	r0, [pc, #76]	; (199d0 <bt_recv+0x5c>)
   19984:	4629      	mov	r1, r5
   19986:	f007 fb93 	bl	210b0 <net_buf_put>
		return 0;
   1998a:	2000      	movs	r0, #0
   1998c:	e00c      	b.n	199a8 <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1998e:	6883      	ldr	r3, [r0, #8]
   19990:	7818      	ldrb	r0, [r3, #0]
   19992:	f014 fcbf 	bl	2e314 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   19996:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   19998:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1999a:	d502      	bpl.n	199a2 <bt_recv+0x2e>
			hci_event_prio(buf);
   1999c:	4628      	mov	r0, r5
   1999e:	f7ff ff97 	bl	198d0 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   199a2:	f014 0002 	ands.w	r0, r4, #2
   199a6:	d1ec      	bne.n	19982 <bt_recv+0xe>
}
   199a8:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   199aa:	4a0a      	ldr	r2, [pc, #40]	; (199d4 <bt_recv+0x60>)
   199ac:	6813      	ldr	r3, [r2, #0]
   199ae:	075b      	lsls	r3, r3, #29
   199b0:	d008      	beq.n	199c4 <bt_recv+0x50>
   199b2:	4b09      	ldr	r3, [pc, #36]	; (199d8 <bt_recv+0x64>)
   199b4:	4809      	ldr	r0, [pc, #36]	; (199dc <bt_recv+0x68>)
   199b6:	1ad2      	subs	r2, r2, r3
   199b8:	0892      	lsrs	r2, r2, #2
   199ba:	0192      	lsls	r2, r2, #6
   199bc:	f042 0201 	orr.w	r2, r2, #1
   199c0:	f013 f99a 	bl	2ccf8 <log_1>
		net_buf_unref(buf);
   199c4:	4628      	mov	r0, r5
   199c6:	f007 fba7 	bl	21118 <net_buf_unref>
		return -EINVAL;
   199ca:	f06f 0015 	mvn.w	r0, #21
   199ce:	e7eb      	b.n	199a8 <bt_recv+0x34>
   199d0:	200003dc 	.word	0x200003dc
   199d4:	200007b8 	.word	0x200007b8
   199d8:	200007a8 	.word	0x200007a8
   199dc:	00034f1a 	.word	0x00034f1a

000199e0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   199e0:	4a08      	ldr	r2, [pc, #32]	; (19a04 <bt_hci_driver_register+0x24>)
{
   199e2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   199e4:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   199e8:	b930      	cbnz	r0, 199f8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   199ea:	68d9      	ldr	r1, [r3, #12]
   199ec:	b139      	cbz	r1, 199fe <bt_hci_driver_register+0x1e>
   199ee:	6919      	ldr	r1, [r3, #16]
   199f0:	b129      	cbz	r1, 199fe <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   199f2:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	return 0;
   199f6:	4770      	bx	lr
		return -EALREADY;
   199f8:	f06f 0077 	mvn.w	r0, #119	; 0x77
   199fc:	4770      	bx	lr
		return -EINVAL;
   199fe:	f06f 0015 	mvn.w	r0, #21
}
   19a02:	4770      	bx	lr
   19a04:	200002a8 	.word	0x200002a8

00019a08 <bt_finalize_init>:
   19a08:	4b07      	ldr	r3, [pc, #28]	; (19a28 <bt_finalize_init+0x20>)
   19a0a:	f3bf 8f5b 	dmb	ish
   19a0e:	e853 2f00 	ldrex	r2, [r3]
   19a12:	f042 0202 	orr.w	r2, r2, #2
   19a16:	e843 2100 	strex	r1, r2, [r3]
   19a1a:	2900      	cmp	r1, #0
   19a1c:	d1f7      	bne.n	19a0e <bt_finalize_init+0x6>
   19a1e:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   19a22:	2000      	movs	r0, #0
   19a24:	f000 bca0 	b.w	1a368 <bt_le_scan_update>
   19a28:	20000374 	.word	0x20000374

00019a2c <init_work>:
{
   19a2c:	b510      	push	{r4, lr}
	err = hci_init();
   19a2e:	f7ff f8f1 	bl	18c14 <hci_init>
	if (err) {
   19a32:	4604      	mov	r4, r0
   19a34:	b928      	cbnz	r0, 19a42 <init_work+0x16>
		err = bt_conn_init();
   19a36:	f001 fec9 	bl	1b7cc <bt_conn_init>
		if (err) {
   19a3a:	4604      	mov	r4, r0
   19a3c:	b908      	cbnz	r0, 19a42 <init_work+0x16>
	bt_finalize_init();
   19a3e:	f7ff ffe3 	bl	19a08 <bt_finalize_init>
	if (ready_cb) {
   19a42:	4b04      	ldr	r3, [pc, #16]	; (19a54 <init_work+0x28>)
   19a44:	681b      	ldr	r3, [r3, #0]
   19a46:	b11b      	cbz	r3, 19a50 <init_work+0x24>
		ready_cb(err);
   19a48:	4620      	mov	r0, r4
}
   19a4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   19a4e:	4718      	bx	r3
}
   19a50:	bd10      	pop	{r4, pc}
   19a52:	bf00      	nop
   19a54:	20002ce4 	.word	0x20002ce4

00019a58 <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   19a58:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   19a5c:	4d41      	ldr	r5, [pc, #260]	; (19b64 <bt_enable+0x10c>)
   19a5e:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
{
   19a62:	b088      	sub	sp, #32
   19a64:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   19a66:	b97b      	cbnz	r3, 19a88 <bt_enable+0x30>
		BT_ERR("No HCI driver registered");
   19a68:	493f      	ldr	r1, [pc, #252]	; (19b68 <bt_enable+0x110>)
   19a6a:	680b      	ldr	r3, [r1, #0]
   19a6c:	075a      	lsls	r2, r3, #29
   19a6e:	d008      	beq.n	19a82 <bt_enable+0x2a>
   19a70:	4b3e      	ldr	r3, [pc, #248]	; (19b6c <bt_enable+0x114>)
   19a72:	483f      	ldr	r0, [pc, #252]	; (19b70 <bt_enable+0x118>)
   19a74:	1ac9      	subs	r1, r1, r3
   19a76:	0889      	lsrs	r1, r1, #2
   19a78:	0189      	lsls	r1, r1, #6
   19a7a:	f041 0101 	orr.w	r1, r1, #1
   19a7e:	f013 f92e 	bl	2ccde <log_0>
		return -ENODEV;
   19a82:	f06f 0412 	mvn.w	r4, #18
   19a86:	e052      	b.n	19b2e <bt_enable+0xd6>
   19a88:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   19a8c:	f3bf 8f5b 	dmb	ish
   19a90:	e853 4f00 	ldrex	r4, [r3]
   19a94:	f044 0201 	orr.w	r2, r4, #1
   19a98:	e843 2100 	strex	r1, r2, [r3]
   19a9c:	2900      	cmp	r1, #0
   19a9e:	d1f7      	bne.n	19a90 <bt_enable+0x38>
   19aa0:	f3bf 8f5b 	dmb	ish
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19aa4:	f014 0401 	ands.w	r4, r4, #1
   19aa8:	d158      	bne.n	19b5c <bt_enable+0x104>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   19aaa:	4b32      	ldr	r3, [pc, #200]	; (19b74 <bt_enable+0x11c>)
   19aac:	f04f 0800 	mov.w	r8, #0
   19ab0:	601e      	str	r6, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   19ab2:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19ab6:	f06f 0308 	mvn.w	r3, #8
   19aba:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19abe:	e9cd 8906 	strd	r8, r9, [sp, #24]
   19ac2:	e9cd 4400 	strd	r4, r4, [sp]
   19ac6:	4b2c      	ldr	r3, [pc, #176]	; (19b78 <bt_enable+0x120>)
   19ac8:	492c      	ldr	r1, [pc, #176]	; (19b7c <bt_enable+0x124>)
   19aca:	9404      	str	r4, [sp, #16]
   19acc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   19ad0:	482b      	ldr	r0, [pc, #172]	; (19b80 <bt_enable+0x128>)
   19ad2:	f00b fb93 	bl	251fc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19ad6:	492b      	ldr	r1, [pc, #172]	; (19b84 <bt_enable+0x12c>)
   19ad8:	4829      	ldr	r0, [pc, #164]	; (19b80 <bt_enable+0x128>)
   19ada:	f00b f99d 	bl	24e18 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19ade:	f06f 0307 	mvn.w	r3, #7
   19ae2:	e9cd 4302 	strd	r4, r3, [sp, #8]
   19ae6:	e9cd 8906 	strd	r8, r9, [sp, #24]
   19aea:	e9cd 4400 	strd	r4, r4, [sp]
   19aee:	4b26      	ldr	r3, [pc, #152]	; (19b88 <bt_enable+0x130>)
   19af0:	4926      	ldr	r1, [pc, #152]	; (19b8c <bt_enable+0x134>)
   19af2:	9404      	str	r4, [sp, #16]
   19af4:	f44f 6280 	mov.w	r2, #1024	; 0x400
   19af8:	4825      	ldr	r0, [pc, #148]	; (19b90 <bt_enable+0x138>)
   19afa:	f00b fb7f 	bl	251fc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   19afe:	4925      	ldr	r1, [pc, #148]	; (19b94 <bt_enable+0x13c>)
   19b00:	4823      	ldr	r0, [pc, #140]	; (19b90 <bt_enable+0x138>)
   19b02:	f00b f989 	bl	24e18 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   19b06:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   19b0a:	68db      	ldr	r3, [r3, #12]
   19b0c:	4798      	blx	r3
	if (err) {
   19b0e:	4604      	mov	r4, r0
   19b10:	b188      	cbz	r0, 19b36 <bt_enable+0xde>
		BT_ERR("HCI driver open failed (%d)", err);
   19b12:	4a15      	ldr	r2, [pc, #84]	; (19b68 <bt_enable+0x110>)
   19b14:	6813      	ldr	r3, [r2, #0]
   19b16:	075b      	lsls	r3, r3, #29
   19b18:	d009      	beq.n	19b2e <bt_enable+0xd6>
   19b1a:	4b14      	ldr	r3, [pc, #80]	; (19b6c <bt_enable+0x114>)
   19b1c:	1ad2      	subs	r2, r2, r3
   19b1e:	0892      	lsrs	r2, r2, #2
   19b20:	0192      	lsls	r2, r2, #6
   19b22:	4601      	mov	r1, r0
   19b24:	f042 0201 	orr.w	r2, r2, #1
   19b28:	481b      	ldr	r0, [pc, #108]	; (19b98 <bt_enable+0x140>)
   19b2a:	f013 f8e5 	bl	2ccf8 <log_1>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   19b2e:	4620      	mov	r0, r4
   19b30:	b008      	add	sp, #32
   19b32:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	if (!cb) {
   19b36:	b966      	cbnz	r6, 19b52 <bt_enable+0xfa>
	err = hci_init();
   19b38:	f7ff f86c 	bl	18c14 <hci_init>
	if (err) {
   19b3c:	4604      	mov	r4, r0
   19b3e:	2800      	cmp	r0, #0
   19b40:	d1f5      	bne.n	19b2e <bt_enable+0xd6>
		err = bt_conn_init();
   19b42:	f001 fe43 	bl	1b7cc <bt_conn_init>
		if (err) {
   19b46:	4604      	mov	r4, r0
   19b48:	2800      	cmp	r0, #0
   19b4a:	d1f0      	bne.n	19b2e <bt_enable+0xd6>
	bt_finalize_init();
   19b4c:	f7ff ff5c 	bl	19a08 <bt_finalize_init>
	return 0;
   19b50:	e7ed      	b.n	19b2e <bt_enable+0xd6>
	k_work_submit(&bt_dev.init);
   19b52:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   19b56:	f00c fcaf 	bl	264b8 <k_work_submit>
	return 0;
   19b5a:	e7e8      	b.n	19b2e <bt_enable+0xd6>
		return -EALREADY;
   19b5c:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19b60:	e7e5      	b.n	19b2e <bt_enable+0xd6>
   19b62:	bf00      	nop
   19b64:	200002a8 	.word	0x200002a8
   19b68:	200007b8 	.word	0x200007b8
   19b6c:	200007a8 	.word	0x200007a8
   19b70:	00034f2e 	.word	0x00034f2e
   19b74:	20002ce4 	.word	0x20002ce4
   19b78:	00019731 	.word	0x00019731
   19b7c:	200052c0 	.word	0x200052c0
   19b80:	20001a68 	.word	0x20001a68
   19b84:	00034f47 	.word	0x00034f47
   19b88:	0001849d 	.word	0x0001849d
   19b8c:	20004ea0 	.word	0x20004ea0
   19b90:	200019a8 	.word	0x200019a8
   19b94:	00034f4d 	.word	0x00034f4d
   19b98:	00034f53 	.word	0x00034f53

00019b9c <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   19b9c:	4800      	ldr	r0, [pc, #0]	; (19ba0 <bt_get_name+0x4>)
   19b9e:	4770      	bx	lr
   19ba0:	00034f6f 	.word	0x00034f6f

00019ba4 <bt_le_set_chan_map>:
	return 0;
}
#endif /* defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

int bt_le_set_chan_map(uint8_t chan_map[5])
{
   19ba4:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_BT_CENTRAL)) {
		return -ENOTSUP;
	}

	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 3)) {
   19ba6:	4b19      	ldr	r3, [pc, #100]	; (19c0c <bt_le_set_chan_map+0x68>)
   19ba8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   19bac:	071b      	lsls	r3, r3, #28
{
   19bae:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 3)) {
   19bb0:	d410      	bmi.n	19bd4 <bt_le_set_chan_map+0x30>
		BT_WARN("Set Host Channel Classification command is "
   19bb2:	4917      	ldr	r1, [pc, #92]	; (19c10 <bt_le_set_chan_map+0x6c>)
   19bb4:	680b      	ldr	r3, [r1, #0]
   19bb6:	f013 0f06 	tst.w	r3, #6
   19bba:	d008      	beq.n	19bce <bt_le_set_chan_map+0x2a>
   19bbc:	4b15      	ldr	r3, [pc, #84]	; (19c14 <bt_le_set_chan_map+0x70>)
   19bbe:	4816      	ldr	r0, [pc, #88]	; (19c18 <bt_le_set_chan_map+0x74>)
   19bc0:	1ac9      	subs	r1, r1, r3
   19bc2:	0889      	lsrs	r1, r1, #2
   19bc4:	0189      	lsls	r1, r1, #6
   19bc6:	f041 0102 	orr.w	r1, r1, #2
   19bca:	f013 f888 	bl	2ccde <log_0>
			"not supported");
		return -ENOTSUP;
   19bce:	f06f 0085 	mvn.w	r0, #133	; 0x85
	memcpy(&cp->ch_map[0], &chan_map[0], 4);
	cp->ch_map[4] = chan_map[4] & BIT_MASK(5);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}
   19bd2:	bd38      	pop	{r3, r4, r5, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
   19bd4:	2105      	movs	r1, #5
   19bd6:	f242 0014 	movw	r0, #8212	; 0x2014
   19bda:	f7fe ff2b 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   19bde:	4604      	mov	r4, r0
   19be0:	b188      	cbz	r0, 19c06 <bt_le_set_chan_map+0x62>
	return net_buf_simple_add(&buf->b, len);
   19be2:	2105      	movs	r1, #5
   19be4:	3008      	adds	r0, #8
   19be6:	f007 fbc7 	bl	21378 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   19bea:	682b      	ldr	r3, [r5, #0]
   19bec:	6003      	str	r3, [r0, #0]
	cp->ch_map[4] = chan_map[4] & BIT_MASK(5);
   19bee:	792b      	ldrb	r3, [r5, #4]
   19bf0:	f003 031f 	and.w	r3, r3, #31
   19bf4:	7103      	strb	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
   19bf6:	4621      	mov	r1, r4
   19bf8:	2200      	movs	r2, #0
}
   19bfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
   19bfe:	f242 0014 	movw	r0, #8212	; 0x2014
   19c02:	f7fe bf5f 	b.w	18ac4 <bt_hci_cmd_send_sync>
		return -ENOBUFS;
   19c06:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19c0a:	e7e2      	b.n	19bd2 <bt_le_set_chan_map+0x2e>
   19c0c:	200002a8 	.word	0x200002a8
   19c10:	200007b8 	.word	0x200007b8
   19c14:	200007a8 	.word	0x200007a8
   19c18:	00034f76 	.word	0x00034f76

00019c1c <bt_data_parse>:

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   19c1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19c1e:	4604      	mov	r4, r0
   19c20:	460e      	mov	r6, r1
   19c22:	4617      	mov	r7, r2
	while (ad->len > 1) {
   19c24:	88a3      	ldrh	r3, [r4, #4]
   19c26:	2b01      	cmp	r3, #1
   19c28:	d916      	bls.n	19c58 <bt_data_parse+0x3c>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   19c2a:	4620      	mov	r0, r4
   19c2c:	f015 ff09 	bl	2fa42 <net_buf_simple_pull_u8>
		if (len == 0U) {
   19c30:	4605      	mov	r5, r0
   19c32:	b188      	cbz	r0, 19c58 <bt_data_parse+0x3c>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   19c34:	88a2      	ldrh	r2, [r4, #4]
   19c36:	b283      	uxth	r3, r0
   19c38:	429a      	cmp	r2, r3
   19c3a:	d20f      	bcs.n	19c5c <bt_data_parse+0x40>
			BT_WARN("Malformed data");
   19c3c:	4911      	ldr	r1, [pc, #68]	; (19c84 <bt_data_parse+0x68>)
   19c3e:	680b      	ldr	r3, [r1, #0]
   19c40:	f013 0f06 	tst.w	r3, #6
   19c44:	d008      	beq.n	19c58 <bt_data_parse+0x3c>
   19c46:	4b10      	ldr	r3, [pc, #64]	; (19c88 <bt_data_parse+0x6c>)
   19c48:	4810      	ldr	r0, [pc, #64]	; (19c8c <bt_data_parse+0x70>)
   19c4a:	1ac9      	subs	r1, r1, r3
   19c4c:	0889      	lsrs	r1, r1, #2
   19c4e:	0189      	lsls	r1, r1, #6
   19c50:	f041 0102 	orr.w	r1, r1, #2
   19c54:	f013 f843 	bl	2ccde <log_0>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   19c58:	b003      	add	sp, #12
   19c5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
   19c5c:	4620      	mov	r0, r4
   19c5e:	f015 fef0 	bl	2fa42 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   19c62:	3d01      	subs	r5, #1
		data.data = ad->data;
   19c64:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   19c66:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   19c6a:	4639      	mov	r1, r7
   19c6c:	4668      	mov	r0, sp
		data.data_len = len - 1;
   19c6e:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   19c72:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   19c74:	47b0      	blx	r6
   19c76:	2800      	cmp	r0, #0
   19c78:	d0ee      	beq.n	19c58 <bt_data_parse+0x3c>
		net_buf_simple_pull(ad, len - 1);
   19c7a:	4629      	mov	r1, r5
   19c7c:	4620      	mov	r0, r4
   19c7e:	f007 fb39 	bl	212f4 <net_buf_simple_pull>
   19c82:	e7cf      	b.n	19c24 <bt_data_parse+0x8>
   19c84:	200007b8 	.word	0x200007b8
   19c88:	200007a8 	.word	0x200007a8
   19c8c:	00034faf 	.word	0x00034faf

00019c90 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   19c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   19c92:	4f0b      	ldr	r7, [pc, #44]	; (19cc0 <id_find+0x30>)
{
   19c94:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   19c96:	2500      	movs	r5, #0
   19c98:	79fb      	ldrb	r3, [r7, #7]
   19c9a:	b2ec      	uxtb	r4, r5
   19c9c:	42a3      	cmp	r3, r4
   19c9e:	d802      	bhi.n	19ca6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   19ca0:	f06f 0401 	mvn.w	r4, #1
   19ca4:	e009      	b.n	19cba <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   19ca6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   19caa:	2207      	movs	r2, #7
   19cac:	4439      	add	r1, r7
   19cae:	4630      	mov	r0, r6
   19cb0:	f016 fc85 	bl	305be <memcmp>
   19cb4:	3501      	adds	r5, #1
   19cb6:	2800      	cmp	r0, #0
   19cb8:	d1ee      	bne.n	19c98 <id_find+0x8>
}
   19cba:	4620      	mov	r0, r4
   19cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19cbe:	bf00      	nop
   19cc0:	200002a8 	.word	0x200002a8

00019cc4 <set_random_address>:
{
   19cc4:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   19cc6:	2206      	movs	r2, #6
   19cc8:	4913      	ldr	r1, [pc, #76]	; (19d18 <set_random_address+0x54>)
   19cca:	4605      	mov	r5, r0
   19ccc:	f016 fc77 	bl	305be <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   19cd0:	4602      	mov	r2, r0
   19cd2:	b1d8      	cbz	r0, 19d0c <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   19cd4:	2106      	movs	r1, #6
   19cd6:	f242 0005 	movw	r0, #8197	; 0x2005
   19cda:	f7fe feab 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   19cde:	4604      	mov	r4, r0
   19ce0:	b1b0      	cbz	r0, 19d10 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   19ce2:	2206      	movs	r2, #6
   19ce4:	4629      	mov	r1, r5
   19ce6:	3008      	adds	r0, #8
   19ce8:	f015 fec7 	bl	2fa7a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   19cec:	2200      	movs	r2, #0
   19cee:	4621      	mov	r1, r4
   19cf0:	f242 0005 	movw	r0, #8197	; 0x2005
   19cf4:	f7fe fee6 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   19cf8:	4602      	mov	r2, r0
   19cfa:	b938      	cbnz	r0, 19d0c <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   19cfc:	4629      	mov	r1, r5
   19cfe:	4806      	ldr	r0, [pc, #24]	; (19d18 <set_random_address+0x54>)
   19d00:	f014 fc01 	bl	2e506 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   19d04:	4b05      	ldr	r3, [pc, #20]	; (19d1c <set_random_address+0x58>)
   19d06:	2101      	movs	r1, #1
   19d08:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
}
   19d0c:	4610      	mov	r0, r2
   19d0e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   19d10:	f06f 0268 	mvn.w	r2, #104	; 0x68
   19d14:	e7fa      	b.n	19d0c <set_random_address+0x48>
   19d16:	bf00      	nop
   19d18:	20000309 	.word	0x20000309
   19d1c:	200002a8 	.word	0x200002a8

00019d20 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   19d20:	b530      	push	{r4, r5, lr}
   19d22:	4604      	mov	r4, r0
   19d24:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   19d26:	460d      	mov	r5, r1
   19d28:	b199      	cbz	r1, 19d52 <id_create.isra.0+0x32>
   19d2a:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   19d2c:	2207      	movs	r2, #7
   19d2e:	a902      	add	r1, sp, #8
   19d30:	4628      	mov	r0, r5
   19d32:	9302      	str	r3, [sp, #8]
   19d34:	f8cd 300b 	str.w	r3, [sp, #11]
   19d38:	f016 fc41 	bl	305be <memcmp>
   19d3c:	b148      	cbz	r0, 19d52 <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   19d3e:	4810      	ldr	r0, [pc, #64]	; (19d80 <id_create.isra.0+0x60>)
   19d40:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   19d44:	4629      	mov	r1, r5
   19d46:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   19d48:	f014 fbe2 	bl	2e510 <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   19d4c:	2000      	movs	r0, #0
}
   19d4e:	b005      	add	sp, #20
   19d50:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   19d52:	4668      	mov	r0, sp
   19d54:	f014 fa9c 	bl	2e290 <bt_addr_le_create_static>
			if (err) {
   19d58:	2800      	cmp	r0, #0
   19d5a:	d1f8      	bne.n	19d4e <id_create.isra.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   19d5c:	4668      	mov	r0, sp
   19d5e:	f7ff ff97 	bl	19c90 <id_find>
   19d62:	2800      	cmp	r0, #0
   19d64:	daf5      	bge.n	19d52 <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   19d66:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   19d6a:	4c05      	ldr	r4, [pc, #20]	; (19d80 <id_create.isra.0+0x60>)
   19d6c:	4669      	mov	r1, sp
   19d6e:	4420      	add	r0, r4
   19d70:	f014 fbce 	bl	2e510 <bt_addr_le_copy>
		if (addr) {
   19d74:	2d00      	cmp	r5, #0
   19d76:	d0e9      	beq.n	19d4c <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   19d78:	4601      	mov	r1, r0
   19d7a:	4628      	mov	r0, r5
   19d7c:	e7e4      	b.n	19d48 <id_create.isra.0+0x28>
   19d7e:	bf00      	nop
   19d80:	200002a8 	.word	0x200002a8

00019d84 <bt_id_get>:
{
   19d84:	b538      	push	{r3, r4, r5, lr}
   19d86:	460d      	mov	r5, r1
   19d88:	4906      	ldr	r1, [pc, #24]	; (19da4 <bt_id_get+0x20>)
   19d8a:	79cc      	ldrb	r4, [r1, #7]
	if (addrs) {
   19d8c:	b138      	cbz	r0, 19d9e <bt_id_get+0x1a>
		size_t to_copy = MIN(*count, bt_dev.id_count);
   19d8e:	682b      	ldr	r3, [r5, #0]
   19d90:	429c      	cmp	r4, r3
   19d92:	bf28      	it	cs
   19d94:	461c      	movcs	r4, r3
   19d96:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   19d9a:	f016 fc1e 	bl	305da <memcpy>
		*count = bt_dev.id_count;
   19d9e:	602c      	str	r4, [r5, #0]
}
   19da0:	bd38      	pop	{r3, r4, r5, pc}
   19da2:	bf00      	nop
   19da4:	200002a8 	.word	0x200002a8

00019da8 <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   19da8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19daa:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   19dac:	4604      	mov	r4, r0
   19dae:	b918      	cbnz	r0, 19db8 <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   19db0:	b35e      	cbz	r6, 19e0a <bt_id_create+0x62>
		return -EINVAL;
   19db2:	f06f 0015 	mvn.w	r0, #21
   19db6:	e026      	b.n	19e06 <bt_id_create+0x5e>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   19db8:	2300      	movs	r3, #0
   19dba:	2207      	movs	r2, #7
   19dbc:	4669      	mov	r1, sp
   19dbe:	9300      	str	r3, [sp, #0]
   19dc0:	f8cd 3003 	str.w	r3, [sp, #3]
   19dc4:	f016 fbfb 	bl	305be <memcmp>
   19dc8:	2800      	cmp	r0, #0
   19dca:	d0f1      	beq.n	19db0 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   19dcc:	7823      	ldrb	r3, [r4, #0]
   19dce:	2b01      	cmp	r3, #1
   19dd0:	d104      	bne.n	19ddc <bt_id_create+0x34>
   19dd2:	79a3      	ldrb	r3, [r4, #6]
   19dd4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19dd8:	2bc0      	cmp	r3, #192	; 0xc0
   19dda:	d00d      	beq.n	19df8 <bt_id_create+0x50>
			BT_ERR("Only static random identity address supported");
   19ddc:	491e      	ldr	r1, [pc, #120]	; (19e58 <bt_id_create+0xb0>)
   19dde:	680b      	ldr	r3, [r1, #0]
   19de0:	075a      	lsls	r2, r3, #29
   19de2:	d0e6      	beq.n	19db2 <bt_id_create+0xa>
   19de4:	4b1d      	ldr	r3, [pc, #116]	; (19e5c <bt_id_create+0xb4>)
   19de6:	481e      	ldr	r0, [pc, #120]	; (19e60 <bt_id_create+0xb8>)
   19de8:	1ac9      	subs	r1, r1, r3
   19dea:	0889      	lsrs	r1, r1, #2
   19dec:	0189      	lsls	r1, r1, #6
   19dee:	f041 0101 	orr.w	r1, r1, #1
   19df2:	f012 ff74 	bl	2ccde <log_0>
   19df6:	e7dc      	b.n	19db2 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   19df8:	4620      	mov	r0, r4
   19dfa:	f7ff ff49 	bl	19c90 <id_find>
   19dfe:	2800      	cmp	r0, #0
   19e00:	dbd6      	blt.n	19db0 <bt_id_create+0x8>
			return -EALREADY;
   19e02:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   19e06:	b002      	add	sp, #8
   19e08:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   19e0a:	4d16      	ldr	r5, [pc, #88]	; (19e64 <bt_id_create+0xbc>)
   19e0c:	79eb      	ldrb	r3, [r5, #7]
   19e0e:	2b01      	cmp	r3, #1
   19e10:	d01e      	beq.n	19e50 <bt_id_create+0xa8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   19e12:	f3bf 8f5b 	dmb	ish
   19e16:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   19e1a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   19e1e:	07db      	lsls	r3, r3, #31
   19e20:	d40b      	bmi.n	19e3a <bt_id_create+0x92>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   19e22:	2c00      	cmp	r4, #0
   19e24:	d0c5      	beq.n	19db2 <bt_id_create+0xa>
   19e26:	2207      	movs	r2, #7
   19e28:	4669      	mov	r1, sp
   19e2a:	4620      	mov	r0, r4
   19e2c:	9600      	str	r6, [sp, #0]
   19e2e:	f8cd 6003 	str.w	r6, [sp, #3]
   19e32:	f016 fbc4 	bl	305be <memcmp>
   19e36:	2800      	cmp	r0, #0
   19e38:	d0bb      	beq.n	19db2 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   19e3a:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   19e3c:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   19e3e:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   19e40:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   19e42:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   19e44:	f7ff ff6c 	bl	19d20 <id_create.isra.0>
	new_id = bt_dev.id_count++;
   19e48:	2800      	cmp	r0, #0
   19e4a:	bf08      	it	eq
   19e4c:	4630      	moveq	r0, r6
   19e4e:	e7da      	b.n	19e06 <bt_id_create+0x5e>
		return -ENOMEM;
   19e50:	f06f 000b 	mvn.w	r0, #11
   19e54:	e7d7      	b.n	19e06 <bt_id_create+0x5e>
   19e56:	bf00      	nop
   19e58:	200007bc 	.word	0x200007bc
   19e5c:	200007a8 	.word	0x200007a8
   19e60:	00034fca 	.word	0x00034fca
   19e64:	200002a8 	.word	0x200002a8

00019e68 <bt_id_reset>:

int bt_id_reset(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   19e68:	b573      	push	{r0, r1, r4, r5, r6, lr}
   19e6a:	4604      	mov	r4, r0
   19e6c:	4616      	mov	r6, r2
	int err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   19e6e:	460d      	mov	r5, r1
   19e70:	b919      	cbnz	r1, 19e7a <bt_id_reset+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   19e72:	b366      	cbz	r6, 19ece <bt_id_reset+0x66>
		return -EINVAL;
   19e74:	f06f 0015 	mvn.w	r0, #21
   19e78:	e027      	b.n	19eca <bt_id_reset+0x62>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   19e7a:	2300      	movs	r3, #0
   19e7c:	2207      	movs	r2, #7
   19e7e:	4669      	mov	r1, sp
   19e80:	4628      	mov	r0, r5
   19e82:	9300      	str	r3, [sp, #0]
   19e84:	f8cd 3003 	str.w	r3, [sp, #3]
   19e88:	f016 fb99 	bl	305be <memcmp>
   19e8c:	2800      	cmp	r0, #0
   19e8e:	d0f0      	beq.n	19e72 <bt_id_reset+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   19e90:	782b      	ldrb	r3, [r5, #0]
   19e92:	2b01      	cmp	r3, #1
   19e94:	d104      	bne.n	19ea0 <bt_id_reset+0x38>
   19e96:	79ab      	ldrb	r3, [r5, #6]
   19e98:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19e9c:	2bc0      	cmp	r3, #192	; 0xc0
   19e9e:	d00d      	beq.n	19ebc <bt_id_reset+0x54>
			BT_ERR("Only static random identity address supported");
   19ea0:	491a      	ldr	r1, [pc, #104]	; (19f0c <bt_id_reset+0xa4>)
   19ea2:	680b      	ldr	r3, [r1, #0]
   19ea4:	075b      	lsls	r3, r3, #29
   19ea6:	d0e5      	beq.n	19e74 <bt_id_reset+0xc>
   19ea8:	4b19      	ldr	r3, [pc, #100]	; (19f10 <bt_id_reset+0xa8>)
   19eaa:	481a      	ldr	r0, [pc, #104]	; (19f14 <bt_id_reset+0xac>)
   19eac:	1ac9      	subs	r1, r1, r3
   19eae:	0889      	lsrs	r1, r1, #2
   19eb0:	0189      	lsls	r1, r1, #6
   19eb2:	f041 0101 	orr.w	r1, r1, #1
   19eb6:	f012 ff12 	bl	2ccde <log_0>
   19eba:	e7db      	b.n	19e74 <bt_id_reset+0xc>
		if (id_find(addr) >= 0) {
   19ebc:	4628      	mov	r0, r5
   19ebe:	f7ff fee7 	bl	19c90 <id_find>
   19ec2:	2800      	cmp	r0, #0
   19ec4:	dbd5      	blt.n	19e72 <bt_id_reset+0xa>
			return -EALREADY;
   19ec6:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return id;
}
   19eca:	b002      	add	sp, #8
   19ecc:	bd70      	pop	{r4, r5, r6, pc}
	if (id == BT_ID_DEFAULT || id >= bt_dev.id_count) {
   19ece:	2c00      	cmp	r4, #0
   19ed0:	d0d0      	beq.n	19e74 <bt_id_reset+0xc>
   19ed2:	4b11      	ldr	r3, [pc, #68]	; (19f18 <bt_id_reset+0xb0>)
   19ed4:	79da      	ldrb	r2, [r3, #7]
   19ed6:	42a2      	cmp	r2, r4
   19ed8:	d9cc      	bls.n	19e74 <bt_id_reset+0xc>
	    bt_addr_le_cmp(&bt_dev.id_addr[id], BT_ADDR_LE_ANY)) {
   19eda:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   19ede:	2207      	movs	r2, #7
   19ee0:	4669      	mov	r1, sp
   19ee2:	4418      	add	r0, r3
   19ee4:	9600      	str	r6, [sp, #0]
   19ee6:	f8cd 6003 	str.w	r6, [sp, #3]
   19eea:	f016 fb68 	bl	305be <memcmp>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   19eee:	b128      	cbz	r0, 19efc <bt_id_reset+0x94>
		err = bt_unpair(id, NULL);
   19ef0:	4631      	mov	r1, r6
   19ef2:	4620      	mov	r0, r4
   19ef4:	f014 fa69 	bl	2e3ca <bt_unpair>
		if (err) {
   19ef8:	2800      	cmp	r0, #0
   19efa:	d1e6      	bne.n	19eca <bt_id_reset+0x62>
	err = id_create(id, addr, irk);
   19efc:	4629      	mov	r1, r5
   19efe:	4620      	mov	r0, r4
   19f00:	f7ff ff0e 	bl	19d20 <id_create.isra.0>
	if (err) {
   19f04:	2800      	cmp	r0, #0
   19f06:	bf08      	it	eq
   19f08:	4620      	moveq	r0, r4
   19f0a:	e7de      	b.n	19eca <bt_id_reset+0x62>
   19f0c:	200007bc 	.word	0x200007bc
   19f10:	200007a8 	.word	0x200007a8
   19f14:	00034fca 	.word	0x00034fca
   19f18:	200002a8 	.word	0x200002a8

00019f1c <bt_id_delete>:

int bt_id_delete(uint8_t id)
{
   19f1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (id == BT_ID_DEFAULT || id >= bt_dev.id_count) {
   19f1e:	4604      	mov	r4, r0
   19f20:	b348      	cbz	r0, 19f76 <bt_id_delete+0x5a>
   19f22:	4d16      	ldr	r5, [pc, #88]	; (19f7c <bt_id_delete+0x60>)
   19f24:	79eb      	ldrb	r3, [r5, #7]
   19f26:	4283      	cmp	r3, r0
   19f28:	d925      	bls.n	19f76 <bt_id_delete+0x5a>
		return -EINVAL;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr[id], BT_ADDR_LE_ANY)) {
   19f2a:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
   19f2e:	442e      	add	r6, r5
   19f30:	2700      	movs	r7, #0
   19f32:	2207      	movs	r2, #7
   19f34:	4669      	mov	r1, sp
   19f36:	4630      	mov	r0, r6
   19f38:	9700      	str	r7, [sp, #0]
   19f3a:	f8cd 7003 	str.w	r7, [sp, #3]
   19f3e:	f016 fb3e 	bl	305be <memcmp>
   19f42:	b920      	cbnz	r0, 19f4e <bt_id_delete+0x32>
		return -EALREADY;
   19f44:	f06f 0277 	mvn.w	r2, #119	; 0x77
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   19f48:	4610      	mov	r0, r2
   19f4a:	b003      	add	sp, #12
   19f4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_unpair(id, NULL);
   19f4e:	4639      	mov	r1, r7
   19f50:	4620      	mov	r0, r4
   19f52:	f014 fa3a 	bl	2e3ca <bt_unpair>
		if (err) {
   19f56:	4602      	mov	r2, r0
   19f58:	2800      	cmp	r0, #0
   19f5a:	d1f5      	bne.n	19f48 <bt_id_delete+0x2c>
	bt_addr_le_copy(&bt_dev.id_addr[id], BT_ADDR_LE_ANY);
   19f5c:	9000      	str	r0, [sp, #0]
   19f5e:	4669      	mov	r1, sp
   19f60:	f8cd 0003 	str.w	r0, [sp, #3]
   19f64:	4630      	mov	r0, r6
   19f66:	f014 fad3 	bl	2e510 <bt_addr_le_copy>
	if (id == bt_dev.id_count - 1) {
   19f6a:	79eb      	ldrb	r3, [r5, #7]
   19f6c:	3b01      	subs	r3, #1
   19f6e:	429c      	cmp	r4, r3
   19f70:	d1ea      	bne.n	19f48 <bt_id_delete+0x2c>
		bt_dev.id_count--;
   19f72:	71ec      	strb	r4, [r5, #7]
   19f74:	e7e8      	b.n	19f48 <bt_id_delete+0x2c>
		return -EINVAL;
   19f76:	f06f 0215 	mvn.w	r2, #21
   19f7a:	e7e5      	b.n	19f48 <bt_id_delete+0x2c>
   19f7c:	200002a8 	.word	0x200002a8

00019f80 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   19f80:	b570      	push	{r4, r5, r6, lr}
   19f82:	b086      	sub	sp, #24
   19f84:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   19f86:	aa01      	add	r2, sp, #4
   19f88:	2100      	movs	r1, #0
   19f8a:	f241 0009 	movw	r0, #4105	; 0x1009
   19f8e:	f7fe fd99 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   19f92:	4604      	mov	r4, r0
   19f94:	b180      	cbz	r0, 19fb8 <bt_id_read_public_addr+0x38>
		BT_WARN("Failed to read public address");
   19f96:	491b      	ldr	r1, [pc, #108]	; (1a004 <bt_id_read_public_addr+0x84>)
   19f98:	6808      	ldr	r0, [r1, #0]
   19f9a:	f010 0006 	ands.w	r0, r0, #6
   19f9e:	d009      	beq.n	19fb4 <bt_id_read_public_addr+0x34>
   19fa0:	4b19      	ldr	r3, [pc, #100]	; (1a008 <bt_id_read_public_addr+0x88>)
   19fa2:	481a      	ldr	r0, [pc, #104]	; (1a00c <bt_id_read_public_addr+0x8c>)
   19fa4:	1ac9      	subs	r1, r1, r3
   19fa6:	0889      	lsrs	r1, r1, #2
   19fa8:	0189      	lsls	r1, r1, #6
   19faa:	f041 0102 	orr.w	r1, r1, #2
   19fae:	f012 fe96 	bl	2ccde <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   19fb2:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   19fb4:	b006      	add	sp, #24
   19fb6:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   19fb8:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   19fba:	9002      	str	r0, [sp, #8]
   19fbc:	689d      	ldr	r5, [r3, #8]
   19fbe:	f8ad 000c 	strh.w	r0, [sp, #12]
   19fc2:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   19fc4:	2206      	movs	r2, #6
   19fc6:	a902      	add	r1, sp, #8
   19fc8:	4628      	mov	r0, r5
   19fca:	f016 faf8 	bl	305be <memcmp>
   19fce:	b918      	cbnz	r0, 19fd8 <bt_id_read_public_addr+0x58>
		net_buf_unref(rsp);
   19fd0:	9801      	ldr	r0, [sp, #4]
   19fd2:	f007 f8a1 	bl	21118 <net_buf_unref>
   19fd6:	e7ec      	b.n	19fb2 <bt_id_read_public_addr+0x32>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   19fd8:	f04f 33ff 	mov.w	r3, #4294967295
   19fdc:	2206      	movs	r2, #6
   19fde:	a904      	add	r1, sp, #16
   19fe0:	4628      	mov	r0, r5
   19fe2:	9304      	str	r3, [sp, #16]
   19fe4:	f8ad 3014 	strh.w	r3, [sp, #20]
   19fe8:	f016 fae9 	bl	305be <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   19fec:	2800      	cmp	r0, #0
   19fee:	d0ef      	beq.n	19fd0 <bt_id_read_public_addr+0x50>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   19ff0:	4629      	mov	r1, r5
   19ff2:	1c70      	adds	r0, r6, #1
   19ff4:	f014 fa87 	bl	2e506 <bt_addr_copy>
	net_buf_unref(rsp);
   19ff8:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   19ffa:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   19ffc:	f007 f88c 	bl	21118 <net_buf_unref>
	return 1U;
   1a000:	2001      	movs	r0, #1
   1a002:	e7d7      	b.n	19fb4 <bt_id_read_public_addr+0x34>
   1a004:	200007bc 	.word	0x200007bc
   1a008:	200007a8 	.word	0x200007a8
   1a00c:	00034ff8 	.word	0x00034ff8

0001a010 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   1a010:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   1a012:	4668      	mov	r0, sp
   1a014:	f7ff ffb4 	bl	19f80 <bt_id_read_public_addr>
   1a018:	4b04      	ldr	r3, [pc, #16]	; (1a02c <bt_setup_public_id_addr+0x1c>)
   1a01a:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   1a01c:	b118      	cbz	r0, 1a026 <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   1a01e:	4669      	mov	r1, sp
   1a020:	2000      	movs	r0, #0
   1a022:	f7ff fe7d 	bl	19d20 <id_create.isra.0>
}
   1a026:	b003      	add	sp, #12
   1a028:	f85d fb04 	ldr.w	pc, [sp], #4
   1a02c:	200002a8 	.word	0x200002a8

0001a030 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   1a030:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1a032:	4b2e      	ldr	r3, [pc, #184]	; (1a0ec <bt_read_static_addr+0xbc>)
   1a034:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   1a038:	f014 0401 	ands.w	r4, r4, #1
{
   1a03c:	4605      	mov	r5, r0
   1a03e:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   1a040:	d10e      	bne.n	1a060 <bt_read_static_addr+0x30>
		BT_WARN("Read Static Addresses command not available");
   1a042:	492b      	ldr	r1, [pc, #172]	; (1a0f0 <bt_read_static_addr+0xc0>)
   1a044:	680b      	ldr	r3, [r1, #0]
   1a046:	f013 0f06 	tst.w	r3, #6
   1a04a:	d017      	beq.n	1a07c <bt_read_static_addr+0x4c>
   1a04c:	4b29      	ldr	r3, [pc, #164]	; (1a0f4 <bt_read_static_addr+0xc4>)
   1a04e:	482a      	ldr	r0, [pc, #168]	; (1a0f8 <bt_read_static_addr+0xc8>)
   1a050:	1ac9      	subs	r1, r1, r3
   1a052:	0889      	lsrs	r1, r1, #2
   1a054:	0189      	lsls	r1, r1, #6
   1a056:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   1a05a:	f012 fe40 	bl	2ccde <log_0>
   1a05e:	e00d      	b.n	1a07c <bt_read_static_addr+0x4c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   1a060:	aa01      	add	r2, sp, #4
   1a062:	2100      	movs	r1, #0
   1a064:	f64f 4009 	movw	r0, #64521	; 0xfc09
   1a068:	f7fe fd2c 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   1a06c:	4603      	mov	r3, r0
   1a06e:	b190      	cbz	r0, 1a096 <bt_read_static_addr+0x66>
		BT_WARN("Failed to read static addresses");
   1a070:	491f      	ldr	r1, [pc, #124]	; (1a0f0 <bt_read_static_addr+0xc0>)
   1a072:	680b      	ldr	r3, [r1, #0]
   1a074:	f013 0f06 	tst.w	r3, #6
   1a078:	d103      	bne.n	1a082 <bt_read_static_addr+0x52>
		return 0;
   1a07a:	2400      	movs	r4, #0
	}

	return cnt;
}
   1a07c:	4620      	mov	r0, r4
   1a07e:	b003      	add	sp, #12
   1a080:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a082:	4b1c      	ldr	r3, [pc, #112]	; (1a0f4 <bt_read_static_addr+0xc4>)
		BT_WARN("Failed to read static addresses");
   1a084:	481d      	ldr	r0, [pc, #116]	; (1a0fc <bt_read_static_addr+0xcc>)
   1a086:	1ac9      	subs	r1, r1, r3
   1a088:	0889      	lsrs	r1, r1, #2
   1a08a:	0189      	lsls	r1, r1, #6
   1a08c:	f041 0102 	orr.w	r1, r1, #2
   1a090:	f012 fe25 	bl	2ccde <log_0>
   1a094:	e7f1      	b.n	1a07a <bt_read_static_addr+0x4a>
	rp = (void *)rsp->data;
   1a096:	9801      	ldr	r0, [sp, #4]
   1a098:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   1a09a:	7854      	ldrb	r4, [r2, #1]
   1a09c:	f04f 0c16 	mov.w	ip, #22
   1a0a0:	42b4      	cmp	r4, r6
   1a0a2:	bf28      	it	cs
   1a0a4:	4634      	movcs	r4, r6
   1a0a6:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
   1a0aa:	42a3      	cmp	r3, r4
   1a0ac:	db10      	blt.n	1a0d0 <bt_read_static_addr+0xa0>
	net_buf_unref(rsp);
   1a0ae:	f007 f833 	bl	21118 <net_buf_unref>
	if (!cnt) {
   1a0b2:	2c00      	cmp	r4, #0
   1a0b4:	d1e2      	bne.n	1a07c <bt_read_static_addr+0x4c>
		BT_WARN("No static addresses stored in controller");
   1a0b6:	490e      	ldr	r1, [pc, #56]	; (1a0f0 <bt_read_static_addr+0xc0>)
   1a0b8:	680b      	ldr	r3, [r1, #0]
   1a0ba:	f013 0f06 	tst.w	r3, #6
   1a0be:	d0dc      	beq.n	1a07a <bt_read_static_addr+0x4a>
   1a0c0:	4b0c      	ldr	r3, [pc, #48]	; (1a0f4 <bt_read_static_addr+0xc4>)
   1a0c2:	480f      	ldr	r0, [pc, #60]	; (1a100 <bt_read_static_addr+0xd0>)
   1a0c4:	1ac9      	subs	r1, r1, r3
   1a0c6:	0889      	lsrs	r1, r1, #2
   1a0c8:	0189      	lsls	r1, r1, #6
   1a0ca:	f041 0102 	orr.w	r1, r1, #2
   1a0ce:	e7c4      	b.n	1a05a <bt_read_static_addr+0x2a>
   1a0d0:	1c96      	adds	r6, r2, #2
   1a0d2:	fb0c 5103 	mla	r1, ip, r3, r5
   1a0d6:	f856 eb04 	ldr.w	lr, [r6], #4
   1a0da:	f841 eb04 	str.w	lr, [r1], #4
   1a0de:	42be      	cmp	r6, r7
   1a0e0:	d1f9      	bne.n	1a0d6 <bt_read_static_addr+0xa6>
   1a0e2:	883e      	ldrh	r6, [r7, #0]
   1a0e4:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   1a0e6:	3301      	adds	r3, #1
   1a0e8:	e7df      	b.n	1a0aa <bt_read_static_addr+0x7a>
   1a0ea:	bf00      	nop
   1a0ec:	200002a8 	.word	0x200002a8
   1a0f0:	200007bc 	.word	0x200007bc
   1a0f4:	200007a8 	.word	0x200007a8
   1a0f8:	00035016 	.word	0x00035016
   1a0fc:	00035042 	.word	0x00035042
   1a100:	00035062 	.word	0x00035062

0001a104 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   1a104:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   1a106:	4d14      	ldr	r5, [pc, #80]	; (1a158 <bt_setup_random_id_addr+0x54>)
   1a108:	79ec      	ldrb	r4, [r5, #7]
{
   1a10a:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   1a10c:	b92c      	cbnz	r4, 1a11a <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   1a10e:	2101      	movs	r1, #1
   1a110:	a802      	add	r0, sp, #8
   1a112:	f7ff ff8d 	bl	1a030 <bt_read_static_addr>
   1a116:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   1a118:	b9b0      	cbnz	r0, 1a148 <bt_setup_random_id_addr+0x44>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   1a11a:	2100      	movs	r1, #0
   1a11c:	4608      	mov	r0, r1
   1a11e:	f7ff fe43 	bl	19da8 <bt_id_create>
   1a122:	e00f      	b.n	1a144 <bt_setup_random_id_addr+0x40>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1a124:	ab02      	add	r3, sp, #8
   1a126:	fb06 3102 	mla	r1, r6, r2, r3
   1a12a:	f10d 0001 	add.w	r0, sp, #1
   1a12e:	f014 f9ea 	bl	2e506 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   1a132:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   1a134:	4669      	mov	r1, sp
   1a136:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   1a138:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   1a13c:	f7ff fdf0 	bl	19d20 <id_create.isra.0>
				if (err) {
   1a140:	3401      	adds	r4, #1
   1a142:	b110      	cbz	r0, 1a14a <bt_setup_random_id_addr+0x46>
}
   1a144:	b008      	add	sp, #32
   1a146:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1a148:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1a14a:	79eb      	ldrb	r3, [r5, #7]
   1a14c:	b2e2      	uxtb	r2, r4
   1a14e:	4293      	cmp	r3, r2
   1a150:	d8e8      	bhi.n	1a124 <bt_setup_random_id_addr+0x20>
			return 0;
   1a152:	2000      	movs	r0, #0
   1a154:	e7f6      	b.n	1a144 <bt_setup_random_id_addr+0x40>
   1a156:	bf00      	nop
   1a158:	200002a8 	.word	0x200002a8

0001a15c <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   1a15c:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1a15e:	4c07      	ldr	r4, [pc, #28]	; (1a17c <bt_id_set_create_conn_own_addr+0x20>)
   1a160:	7823      	ldrb	r3, [r4, #0]
   1a162:	2b01      	cmp	r3, #1
{
   1a164:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1a166:	d003      	beq.n	1a170 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   1a168:	7823      	ldrb	r3, [r4, #0]
   1a16a:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   1a16c:	2000      	movs	r0, #0
}
   1a16e:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   1a170:	1c60      	adds	r0, r4, #1
   1a172:	f7ff fda7 	bl	19cc4 <set_random_address>
			if (err) {
   1a176:	2800      	cmp	r0, #0
   1a178:	d0f6      	beq.n	1a168 <bt_id_set_create_conn_own_addr+0xc>
   1a17a:	e7f8      	b.n	1a16e <bt_id_set_create_conn_own_addr+0x12>
   1a17c:	200002a8 	.word	0x200002a8

0001a180 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   1a180:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   1a182:	4b05      	ldr	r3, [pc, #20]	; (1a198 <bt_id_set_scan_own_addr+0x18>)
   1a184:	781b      	ldrb	r3, [r3, #0]
   1a186:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1a188:	2000      	movs	r0, #0
{
   1a18a:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1a18c:	f014 f9c9 	bl	2e522 <bt_id_set_private_addr>
			if (err) {
   1a190:	b908      	cbnz	r0, 1a196 <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   1a192:	2301      	movs	r3, #1
   1a194:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   1a196:	bd10      	pop	{r4, pc}
   1a198:	200002a8 	.word	0x200002a8

0001a19c <bt_le_oob_get_local>:
	return 0;
}
#endif /* CONFIG_BT_BREDR */

int bt_le_oob_get_local(uint8_t id, struct bt_le_oob *oob)
{
   1a19c:	b508      	push	{r3, lr}
   1a19e:	4602      	mov	r2, r0
   1a1a0:	4608      	mov	r0, r1
   1a1a2:	490a      	ldr	r1, [pc, #40]	; (1a1cc <bt_le_oob_get_local+0x30>)
   1a1a4:	f3bf 8f5b 	dmb	ish
   1a1a8:	680b      	ldr	r3, [r1, #0]
   1a1aa:	f3bf 8f5b 	dmb	ish
	struct bt_le_ext_adv *adv = NULL;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a1ae:	079b      	lsls	r3, r3, #30
   1a1b0:	d505      	bpl.n	1a1be <bt_le_oob_get_local+0x22>
		return -EAGAIN;
	}

	if (id >= CONFIG_BT_ID_MAX) {
   1a1b2:	b93a      	cbnz	r2, 1a1c4 <bt_le_oob_get_local+0x28>

		le_force_rpa_timeout();

		bt_addr_le_copy(&oob->addr, &bt_dev.random_addr);
	} else {
		bt_addr_le_copy(&oob->addr, &bt_dev.id_addr[id]);
   1a1b4:	39cc      	subs	r1, #204	; 0xcc
   1a1b6:	f014 f9ab 	bl	2e510 <bt_addr_le_copy>
		if (err && err != -ENOTSUP) {
			return err;
		}
	}

	return 0;
   1a1ba:	4610      	mov	r0, r2
}
   1a1bc:	bd08      	pop	{r3, pc}
		return -EAGAIN;
   1a1be:	f06f 000a 	mvn.w	r0, #10
   1a1c2:	e7fb      	b.n	1a1bc <bt_le_oob_get_local+0x20>
		return -EINVAL;
   1a1c4:	f06f 0015 	mvn.w	r0, #21
   1a1c8:	e7f8      	b.n	1a1bc <bt_le_oob_get_local+0x20>
   1a1ca:	bf00      	nop
   1a1cc:	20000374 	.word	0x20000374

0001a1d0 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   1a1d0:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1a1d2:	4d19      	ldr	r5, [pc, #100]	; (1a238 <bt_id_init+0x68>)
   1a1d4:	79eb      	ldrb	r3, [r5, #7]
   1a1d6:	b113      	cbz	r3, 1a1de <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   1a1d8:	2400      	movs	r4, #0
}
   1a1da:	4620      	mov	r0, r4
   1a1dc:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_setup_public_id_addr();
   1a1de:	f7ff ff17 	bl	1a010 <bt_setup_public_id_addr>
		if (err) {
   1a1e2:	4604      	mov	r4, r0
   1a1e4:	b168      	cbz	r0, 1a202 <bt_id_init+0x32>
			BT_ERR("Unable to set identity address");
   1a1e6:	4915      	ldr	r1, [pc, #84]	; (1a23c <bt_id_init+0x6c>)
   1a1e8:	680b      	ldr	r3, [r1, #0]
   1a1ea:	075a      	lsls	r2, r3, #29
   1a1ec:	d0f5      	beq.n	1a1da <bt_id_init+0xa>
   1a1ee:	4b14      	ldr	r3, [pc, #80]	; (1a240 <bt_id_init+0x70>)
   1a1f0:	4814      	ldr	r0, [pc, #80]	; (1a244 <bt_id_init+0x74>)
   1a1f2:	1ac9      	subs	r1, r1, r3
   1a1f4:	0889      	lsrs	r1, r1, #2
   1a1f6:	0189      	lsls	r1, r1, #6
   1a1f8:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
   1a1fc:	f012 fd6f 	bl	2ccde <log_0>
   1a200:	e7eb      	b.n	1a1da <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   1a202:	79eb      	ldrb	r3, [r5, #7]
   1a204:	2b00      	cmp	r3, #0
   1a206:	d1e7      	bne.n	1a1d8 <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   1a208:	f7ff ff7c 	bl	1a104 <bt_setup_random_id_addr>
		if (err) {
   1a20c:	4604      	mov	r4, r0
   1a20e:	2800      	cmp	r0, #0
   1a210:	d1e9      	bne.n	1a1e6 <bt_id_init+0x16>
		err = set_random_address(&bt_dev.id_addr[0].a);
   1a212:	1c68      	adds	r0, r5, #1
   1a214:	f7ff fd56 	bl	19cc4 <set_random_address>
		if (err) {
   1a218:	4604      	mov	r4, r0
   1a21a:	2800      	cmp	r0, #0
   1a21c:	d0dc      	beq.n	1a1d8 <bt_id_init+0x8>
			BT_ERR("Unable to set random address");
   1a21e:	4907      	ldr	r1, [pc, #28]	; (1a23c <bt_id_init+0x6c>)
   1a220:	680b      	ldr	r3, [r1, #0]
   1a222:	075b      	lsls	r3, r3, #29
   1a224:	d0d9      	beq.n	1a1da <bt_id_init+0xa>
   1a226:	4b06      	ldr	r3, [pc, #24]	; (1a240 <bt_id_init+0x70>)
   1a228:	4807      	ldr	r0, [pc, #28]	; (1a248 <bt_id_init+0x78>)
   1a22a:	1ac9      	subs	r1, r1, r3
   1a22c:	0889      	lsrs	r1, r1, #2
   1a22e:	0189      	lsls	r1, r1, #6
   1a230:	f041 0101 	orr.w	r1, r1, #1
   1a234:	e7e2      	b.n	1a1fc <bt_id_init+0x2c>
   1a236:	bf00      	nop
   1a238:	200002a8 	.word	0x200002a8
   1a23c:	200007bc 	.word	0x200007bc
   1a240:	200007a8 	.word	0x200007a8
   1a244:	0003508b 	.word	0x0003508b
   1a248:	000350aa 	.word	0x000350aa

0001a24c <atomic_get.constprop.0>:
   1a24c:	4b03      	ldr	r3, [pc, #12]	; (1a25c <atomic_get.constprop.0+0x10>)
   1a24e:	f3bf 8f5b 	dmb	ish
   1a252:	6818      	ldr	r0, [r3, #0]
   1a254:	f3bf 8f5b 	dmb	ish
}
   1a258:	4770      	bx	lr
   1a25a:	bf00      	nop
   1a25c:	20000374 	.word	0x20000374

0001a260 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   1a260:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1a262:	2102      	movs	r1, #2
{
   1a264:	b087      	sub	sp, #28
   1a266:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1a268:	f242 000c 	movw	r0, #8204	; 0x200c
   1a26c:	f7fe fbe2 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   1a270:	4605      	mov	r5, r0
   1a272:	b308      	cbz	r0, 1a2b8 <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
   1a274:	2102      	movs	r1, #2
   1a276:	3008      	adds	r0, #8
   1a278:	f007 f87e 	bl	21378 <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   1a27c:	2c01      	cmp	r4, #1
   1a27e:	4602      	mov	r2, r0
   1a280:	d117      	bne.n	1a2b2 <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a282:	f7ff ffe3 	bl	1a24c <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1a286:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1a28a:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1a28c:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   1a28e:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   1a290:	425c      	negs	r4, r3
   1a292:	415c      	adcs	r4, r3
   1a294:	4a0a      	ldr	r2, [pc, #40]	; (1a2c0 <bt_le_scan_set_enable_legacy+0x60>)
   1a296:	9400      	str	r4, [sp, #0]
   1a298:	a903      	add	r1, sp, #12
   1a29a:	4628      	mov	r0, r5
   1a29c:	2305      	movs	r3, #5
   1a29e:	f7fe fbb7 	bl	18a10 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   1a2a2:	2200      	movs	r2, #0
   1a2a4:	4629      	mov	r1, r5
   1a2a6:	f242 000c 	movw	r0, #8204	; 0x200c
   1a2aa:	f7fe fc0b 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   1a2ae:	b007      	add	sp, #28
   1a2b0:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   1a2b2:	2300      	movs	r3, #0
   1a2b4:	7043      	strb	r3, [r0, #1]
   1a2b6:	e7e9      	b.n	1a28c <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   1a2b8:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1a2bc:	e7f7      	b.n	1a2ae <bt_le_scan_set_enable_legacy+0x4e>
   1a2be:	bf00      	nop
   1a2c0:	20000374 	.word	0x20000374

0001a2c4 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   1a2c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1a2c6:	2300      	movs	r3, #0
   1a2c8:	f88d 3005 	strb.w	r3, [sp, #5]

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   1a2cc:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1a2d0:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   1a2d2:	f88d 0000 	strb.w	r0, [sp]
{
   1a2d6:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1a2d8:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   1a2da:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1a2de:	4158      	adcs	r0, r3
   1a2e0:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   1a2e4:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   1a2e8:	f7ff ff4a 	bl	1a180 <bt_id_set_scan_own_addr>
	if (err) {
   1a2ec:	4604      	mov	r4, r0
   1a2ee:	bb38      	cbnz	r0, 1a340 <start_le_scan_legacy+0x7c>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   1a2f0:	2107      	movs	r1, #7
   1a2f2:	f242 000b 	movw	r0, #8203	; 0x200b
   1a2f6:	f7fe fb9d 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   1a2fa:	4606      	mov	r6, r0
   1a2fc:	b348      	cbz	r0, 1a352 <start_le_scan_legacy+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a2fe:	2207      	movs	r2, #7
   1a300:	4669      	mov	r1, sp
   1a302:	3008      	adds	r0, #8
   1a304:	f015 fbb9 	bl	2fa7a <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   1a308:	4622      	mov	r2, r4
   1a30a:	4631      	mov	r1, r6
   1a30c:	f242 000b 	movw	r0, #8203	; 0x200b
   1a310:	f7fe fbd8 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   1a314:	4604      	mov	r4, r0
   1a316:	b998      	cbnz	r0, 1a340 <start_le_scan_legacy+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
   1a318:	2001      	movs	r0, #1
   1a31a:	f7ff ffa1 	bl	1a260 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   1a31e:	4604      	mov	r4, r0
   1a320:	b970      	cbnz	r0, 1a340 <start_le_scan_legacy+0x7c>
	if (val) {
   1a322:	2d01      	cmp	r5, #1
   1a324:	d10f      	bne.n	1a346 <start_le_scan_legacy+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a326:	f3bf 8f5b 	dmb	ish
   1a32a:	4b0b      	ldr	r3, [pc, #44]	; (1a358 <start_le_scan_legacy+0x94>)
   1a32c:	e853 2f00 	ldrex	r2, [r3]
   1a330:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1a334:	e843 2100 	strex	r1, r2, [r3]
   1a338:	2900      	cmp	r1, #0
   1a33a:	d1f7      	bne.n	1a32c <start_le_scan_legacy+0x68>
   1a33c:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   1a340:	4620      	mov	r0, r4
   1a342:	b002      	add	sp, #8
   1a344:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a346:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1a34a:	4803      	ldr	r0, [pc, #12]	; (1a358 <start_le_scan_legacy+0x94>)
   1a34c:	f014 f8fd 	bl	2e54a <atomic_and>
   1a350:	e7f6      	b.n	1a340 <start_le_scan_legacy+0x7c>
		return -ENOBUFS;
   1a352:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1a356:	e7f3      	b.n	1a340 <start_le_scan_legacy+0x7c>
   1a358:	20000374 	.word	0x20000374

0001a35c <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   1a35c:	4b01      	ldr	r3, [pc, #4]	; (1a364 <bt_scan_reset+0x8>)
   1a35e:	2200      	movs	r2, #0
   1a360:	601a      	str	r2, [r3, #0]
}
   1a362:	4770      	bx	lr
   1a364:	20002cf0 	.word	0x20002cf0

0001a368 <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   1a368:	b538      	push	{r3, r4, r5, lr}
   1a36a:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1a36c:	f7ff ff6e 	bl	1a24c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a370:	0641      	lsls	r1, r0, #25
   1a372:	f3c0 1280 	ubfx	r2, r0, #6, #1
   1a376:	d501      	bpl.n	1a37c <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   1a378:	2000      	movs	r0, #0
   1a37a:	e031      	b.n	1a3e0 <bt_le_scan_update+0x78>
   1a37c:	f7ff ff66 	bl	1a24c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1a380:	0683      	lsls	r3, r0, #26
   1a382:	d428      	bmi.n	1a3d6 <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1a384:	2100      	movs	r1, #0
   1a386:	2206      	movs	r2, #6
   1a388:	4608      	mov	r0, r1
   1a38a:	f000 ff7b 	bl	1b284 <bt_conn_lookup_state_le>
		if (conn) {
   1a38e:	4604      	mov	r4, r0
   1a390:	bb38      	cbnz	r0, 1a3e2 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   1a392:	2202      	movs	r2, #2
   1a394:	4601      	mov	r1, r0
   1a396:	f000 ff75 	bl	1b284 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   1a39a:	2800      	cmp	r0, #0
   1a39c:	d0ec      	beq.n	1a378 <bt_le_scan_update+0x10>
   1a39e:	f3bf 8f5b 	dmb	ish
   1a3a2:	4b11      	ldr	r3, [pc, #68]	; (1a3e8 <bt_le_scan_update+0x80>)
   1a3a4:	e853 2f00 	ldrex	r2, [r3]
   1a3a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   1a3ac:	e843 2100 	strex	r1, r2, [r3]
   1a3b0:	2900      	cmp	r1, #0
   1a3b2:	d1f7      	bne.n	1a3a4 <bt_le_scan_update+0x3c>
   1a3b4:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   1a3b8:	f000 fc8a 	bl	1acd0 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   1a3bc:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   1a3be:	4620      	mov	r0, r4
   1a3c0:	bf18      	it	ne
   1a3c2:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   1a3c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   1a3c8:	bf0a      	itet	eq
   1a3ca:	2212      	moveq	r2, #18
   1a3cc:	2160      	movne	r1, #96	; 0x60
   1a3ce:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   1a3d2:	f7ff bf77 	b.w	1a2c4 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   1a3d6:	4610      	mov	r0, r2
   1a3d8:	f7ff ff42 	bl	1a260 <bt_le_scan_set_enable_legacy>
		if (err) {
   1a3dc:	2800      	cmp	r0, #0
   1a3de:	d0d1      	beq.n	1a384 <bt_le_scan_update+0x1c>
}
   1a3e0:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   1a3e2:	f000 fc75 	bl	1acd0 <bt_conn_unref>
   1a3e6:	e7c7      	b.n	1a378 <bt_le_scan_update+0x10>
   1a3e8:	20000374 	.word	0x20000374

0001a3ec <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   1a3ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   1a3f0:	f100 0808 	add.w	r8, r0, #8
   1a3f4:	b08d      	sub	sp, #52	; 0x34
   1a3f6:	4604      	mov	r4, r0
   1a3f8:	4640      	mov	r0, r8
   1a3fa:	f015 fb22 	bl	2fa42 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   1a3fe:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 1a5e4 <bt_hci_le_adv_report+0x1f8>
   1a402:	4607      	mov	r7, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   1a404:	b17f      	cbz	r7, 1a426 <bt_hci_le_adv_report+0x3a>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   1a406:	89a3      	ldrh	r3, [r4, #12]
   1a408:	2b08      	cmp	r3, #8
   1a40a:	d80f      	bhi.n	1a42c <bt_hci_le_adv_report+0x40>
			BT_ERR("Unexpected end of buffer");
   1a40c:	4970      	ldr	r1, [pc, #448]	; (1a5d0 <bt_hci_le_adv_report+0x1e4>)
   1a40e:	680b      	ldr	r3, [r1, #0]
   1a410:	075e      	lsls	r6, r3, #29
   1a412:	d008      	beq.n	1a426 <bt_hci_le_adv_report+0x3a>
   1a414:	4b6f      	ldr	r3, [pc, #444]	; (1a5d4 <bt_hci_le_adv_report+0x1e8>)
   1a416:	4870      	ldr	r0, [pc, #448]	; (1a5d8 <bt_hci_le_adv_report+0x1ec>)
   1a418:	1ac9      	subs	r1, r1, r3
   1a41a:	0889      	lsrs	r1, r1, #2
   1a41c:	0189      	lsls	r1, r1, #6
   1a41e:	f041 0101 	orr.w	r1, r1, #1
   1a422:	f012 fc5c 	bl	2ccde <log_0>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   1a426:	b00d      	add	sp, #52	; 0x34
   1a428:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1a42c:	2109      	movs	r1, #9
   1a42e:	4640      	mov	r0, r8
   1a430:	f006 ff80 	bl	21334 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   1a434:	7a01      	ldrb	r1, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   1a436:	237f      	movs	r3, #127	; 0x7f
   1a438:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   1a43c:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1a43e:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   1a440:	7a5b      	ldrb	r3, [r3, #9]
   1a442:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   1a446:	23ff      	movs	r3, #255	; 0xff
   1a448:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   1a44c:	2300      	movs	r3, #0
   1a44e:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   1a452:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   1a456:	7802      	ldrb	r2, [r0, #0]
   1a458:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   1a45c:	2a04      	cmp	r2, #4
   1a45e:	bf9c      	itt	ls
   1a460:	4b5e      	ldrls	r3, [pc, #376]	; (1a5dc <bt_hci_le_adv_report+0x1f0>)
   1a462:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   1a464:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   1a468:	b28b      	uxth	r3, r1
   1a46a:	4606      	mov	r6, r0
   1a46c:	f100 0901 	add.w	r9, r0, #1
   1a470:	9301      	str	r3, [sp, #4]
   1a472:	f7ff feeb 	bl	1a24c <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1a476:	0645      	lsls	r5, r0, #25
   1a478:	d50b      	bpl.n	1a492 <bt_hci_le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   1a47a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a47e:	0758      	lsls	r0, r3, #29
   1a480:	d507      	bpl.n	1a492 <bt_hci_le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   1a482:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
   1a484:	4640      	mov	r0, r8
   1a486:	3101      	adds	r1, #1
   1a488:	3f01      	subs	r7, #1
   1a48a:	f006 ff33 	bl	212f4 <net_buf_simple_pull>
   1a48e:	b2ff      	uxtb	r7, r7
   1a490:	e7b8      	b.n	1a404 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   1a492:	7873      	ldrb	r3, [r6, #1]
   1a494:	1e9a      	subs	r2, r3, #2
   1a496:	2a01      	cmp	r2, #1
   1a498:	d84e      	bhi.n	1a538 <bt_hci_le_adv_report+0x14c>
		bt_addr_le_copy(&id_addr, addr);
   1a49a:	4649      	mov	r1, r9
   1a49c:	a804      	add	r0, sp, #16
   1a49e:	f014 f863 	bl	2e568 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1a4a2:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1a4a6:	3b02      	subs	r3, #2
   1a4a8:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   1a4ac:	ab04      	add	r3, sp, #16
   1a4ae:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   1a4b0:	f8da 3000 	ldr.w	r3, [sl]
   1a4b4:	b1b3      	cbz	r3, 1a4e4 <bt_hci_le_adv_report+0xf8>
	state->offset = net_buf_simple_headroom(buf);
   1a4b6:	4640      	mov	r0, r8
   1a4b8:	f015 fad3 	bl	2fa62 <net_buf_simple_headroom>
	state->len = buf->len;
   1a4bc:	89a3      	ldrh	r3, [r4, #12]
   1a4be:	9302      	str	r3, [sp, #8]
		buf->len = len;
   1a4c0:	9b01      	ldr	r3, [sp, #4]
   1a4c2:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1a4c4:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   1a4c6:	4643      	mov	r3, r8
   1a4c8:	a804      	add	r0, sp, #16
   1a4ca:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   1a4ce:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   1a4d2:	f8da 5000 	ldr.w	r5, [sl]
   1a4d6:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
   1a4d8:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1a4da:	9b02      	ldr	r3, [sp, #8]
   1a4dc:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1a4de:	fa10 f08b 	uxtah	r0, r0, fp
   1a4e2:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1a4e4:	4b3e      	ldr	r3, [pc, #248]	; (1a5e0 <bt_hci_le_adv_report+0x1f4>)
   1a4e6:	681b      	ldr	r3, [r3, #0]
   1a4e8:	2b00      	cmp	r3, #0
   1a4ea:	d036      	beq.n	1a55a <bt_hci_le_adv_report+0x16e>
   1a4ec:	f1b3 0208 	subs.w	r2, r3, #8
   1a4f0:	d033      	beq.n	1a55a <bt_hci_le_adv_report+0x16e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a4f2:	681d      	ldr	r5, [r3, #0]
   1a4f4:	b105      	cbz	r5, 1a4f8 <bt_hci_le_adv_report+0x10c>
   1a4f6:	3d08      	subs	r5, #8
		if (listener->recv) {
   1a4f8:	6813      	ldr	r3, [r2, #0]
   1a4fa:	9203      	str	r2, [sp, #12]
   1a4fc:	b193      	cbz	r3, 1a524 <bt_hci_le_adv_report+0x138>
	state->offset = net_buf_simple_headroom(buf);
   1a4fe:	4640      	mov	r0, r8
   1a500:	f015 faaf 	bl	2fa62 <net_buf_simple_headroom>
	state->len = buf->len;
   1a504:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
   1a506:	9a03      	ldr	r2, [sp, #12]
   1a508:	9302      	str	r3, [sp, #8]
			buf->len = len;
   1a50a:	9b01      	ldr	r3, [sp, #4]
   1a50c:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1a50e:	4683      	mov	fp, r0
			listener->recv(info, buf);
   1a510:	6812      	ldr	r2, [r2, #0]
   1a512:	a808      	add	r0, sp, #32
   1a514:	4641      	mov	r1, r8
   1a516:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   1a518:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1a51a:	9b02      	ldr	r3, [sp, #8]
   1a51c:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1a51e:	fa10 f08b 	uxtah	r0, r0, fp
   1a522:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   1a524:	b1cd      	cbz	r5, 1a55a <bt_hci_le_adv_report+0x16e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1a526:	f115 0308 	adds.w	r3, r5, #8
   1a52a:	d002      	beq.n	1a532 <bt_hci_le_adv_report+0x146>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a52c:	68ab      	ldr	r3, [r5, #8]
   1a52e:	b103      	cbz	r3, 1a532 <bt_hci_le_adv_report+0x146>
   1a530:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   1a532:	462a      	mov	r2, r5
   1a534:	461d      	mov	r5, r3
   1a536:	e7df      	b.n	1a4f8 <bt_hci_le_adv_report+0x10c>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   1a538:	2bff      	cmp	r3, #255	; 0xff
   1a53a:	d108      	bne.n	1a54e <bt_hci_le_adv_report+0x162>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   1a53c:	2300      	movs	r3, #0
   1a53e:	9306      	str	r3, [sp, #24]
   1a540:	a906      	add	r1, sp, #24
   1a542:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
   1a546:	a804      	add	r0, sp, #16
   1a548:	f014 f80e 	bl	2e568 <bt_addr_le_copy>
   1a54c:	e7ae      	b.n	1a4ac <bt_hci_le_adv_report+0xc0>
   1a54e:	4649      	mov	r1, r9
   1a550:	2000      	movs	r0, #0
   1a552:	f013 ffe4 	bl	2e51e <bt_lookup_id_addr>
   1a556:	4601      	mov	r1, r0
   1a558:	e7f5      	b.n	1a546 <bt_hci_le_adv_report+0x15a>
	check_pending_conn(&id_addr, addr, info->adv_props);
   1a55a:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   1a55e:	f7ff fe75 	bl	1a24c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a562:	0641      	lsls	r1, r0, #25
   1a564:	f3c0 1580 	ubfx	r5, r0, #6, #1
   1a568:	d48b      	bmi.n	1a482 <bt_hci_le_adv_report+0x96>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   1a56a:	07d2      	lsls	r2, r2, #31
   1a56c:	d589      	bpl.n	1a482 <bt_hci_le_adv_report+0x96>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   1a56e:	2202      	movs	r2, #2
   1a570:	a904      	add	r1, sp, #16
   1a572:	4628      	mov	r0, r5
   1a574:	f000 fe86 	bl	1b284 <bt_conn_lookup_state_le>
	if (!conn) {
   1a578:	4683      	mov	fp, r0
   1a57a:	2800      	cmp	r0, #0
   1a57c:	d081      	beq.n	1a482 <bt_hci_le_adv_report+0x96>
   1a57e:	f7ff fe65 	bl	1a24c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1a582:	0683      	lsls	r3, r0, #26
   1a584:	d410      	bmi.n	1a5a8 <bt_hci_le_adv_report+0x1bc>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   1a586:	f10b 009e 	add.w	r0, fp, #158	; 0x9e
   1a58a:	4649      	mov	r1, r9
   1a58c:	f013 ffec 	bl	2e568 <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   1a590:	4658      	mov	r0, fp
   1a592:	f013 fedd 	bl	2e350 <bt_le_create_conn>
   1a596:	b960      	cbnz	r0, 1a5b2 <bt_hci_le_adv_report+0x1c6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1a598:	4658      	mov	r0, fp
   1a59a:	2106      	movs	r1, #6
   1a59c:	f000 fbce 	bl	1ad3c <bt_conn_set_state>
	bt_conn_unref(conn);
   1a5a0:	4658      	mov	r0, fp
   1a5a2:	f000 fb95 	bl	1acd0 <bt_conn_unref>
	return;
   1a5a6:	e76c      	b.n	1a482 <bt_hci_le_adv_report+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   1a5a8:	4628      	mov	r0, r5
   1a5aa:	f7ff fe59 	bl	1a260 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   1a5ae:	2800      	cmp	r0, #0
   1a5b0:	d0e9      	beq.n	1a586 <bt_hci_le_adv_report+0x19a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   1a5b2:	231f      	movs	r3, #31
   1a5b4:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a5b8:	2100      	movs	r1, #0
   1a5ba:	4658      	mov	r0, fp
   1a5bc:	f000 fbbe 	bl	1ad3c <bt_conn_set_state>
	bt_conn_unref(conn);
   1a5c0:	4658      	mov	r0, fp
   1a5c2:	f000 fb85 	bl	1acd0 <bt_conn_unref>
	bt_le_scan_update(false);
   1a5c6:	2000      	movs	r0, #0
   1a5c8:	f7ff fece 	bl	1a368 <bt_le_scan_update>
   1a5cc:	e759      	b.n	1a482 <bt_hci_le_adv_report+0x96>
   1a5ce:	bf00      	nop
   1a5d0:	200007c8 	.word	0x200007c8
   1a5d4:	200007a8 	.word	0x200007a8
   1a5d8:	000350cd 	.word	0x000350cd
   1a5dc:	000350e6 	.word	0x000350e6
   1a5e0:	20002ce8 	.word	0x20002ce8
   1a5e4:	20002cf0 	.word	0x20002cf0

0001a5e8 <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   1a5e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a5ec:	4605      	mov	r5, r0
   1a5ee:	460f      	mov	r7, r1
   1a5f0:	f7ff fe2c 	bl	1a24c <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a5f4:	0780      	lsls	r0, r0, #30
   1a5f6:	d56f      	bpl.n	1a6d8 <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   1a5f8:	782a      	ldrb	r2, [r5, #0]
   1a5fa:	2a01      	cmp	r2, #1
   1a5fc:	d904      	bls.n	1a608 <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   1a5fe:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   1a602:	4620      	mov	r0, r4
   1a604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   1a608:	686b      	ldr	r3, [r5, #4]
   1a60a:	f033 030f 	bics.w	r3, r3, #15
   1a60e:	d1f6      	bne.n	1a5fe <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   1a610:	8928      	ldrh	r0, [r5, #8]
   1a612:	1f03      	subs	r3, r0, #4
   1a614:	b29b      	uxth	r3, r3
   1a616:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   1a61a:	42a3      	cmp	r3, r4
   1a61c:	d8ef      	bhi.n	1a5fe <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   1a61e:	8969      	ldrh	r1, [r5, #10]
   1a620:	1f0b      	subs	r3, r1, #4
   1a622:	b29b      	uxth	r3, r3
   1a624:	42a3      	cmp	r3, r4
   1a626:	d8ea      	bhi.n	1a5fe <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   1a628:	4288      	cmp	r0, r1
   1a62a:	d3e8      	bcc.n	1a5fe <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1a62c:	b99a      	cbnz	r2, 1a656 <bt_le_scan_start+0x6e>
   1a62e:	f3bf 8f5b 	dmb	ish
   1a632:	4e2b      	ldr	r6, [pc, #172]	; (1a6e0 <bt_le_scan_start+0xf8>)
   1a634:	e856 0f00 	ldrex	r0, [r6]
   1a638:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   1a63c:	e846 3200 	strex	r2, r3, [r6]
   1a640:	2a00      	cmp	r2, #0
   1a642:	d1f7      	bne.n	1a634 <bt_le_scan_start+0x4c>
   1a644:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a648:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   1a64c:	46b0      	mov	r8, r6
   1a64e:	d007      	beq.n	1a660 <bt_le_scan_start+0x78>
		return -EALREADY;
   1a650:	f06f 0477 	mvn.w	r4, #119	; 0x77
   1a654:	e7d5      	b.n	1a602 <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1a656:	f013 ff76 	bl	2e546 <bt_id_scan_random_addr_check>
   1a65a:	2800      	cmp	r0, #0
   1a65c:	d1e7      	bne.n	1a62e <bt_le_scan_start+0x46>
   1a65e:	e7ce      	b.n	1a5fe <bt_le_scan_start+0x16>
   1a660:	f7ff fdf4 	bl	1a24c <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   1a664:	0681      	lsls	r1, r0, #26
   1a666:	d50a      	bpl.n	1a67e <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   1a668:	4610      	mov	r0, r2
   1a66a:	f7ff fdf9 	bl	1a260 <bt_le_scan_set_enable_legacy>
		if (err) {
   1a66e:	4604      	mov	r4, r0
   1a670:	b128      	cbz	r0, 1a67e <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a672:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1a676:	4630      	mov	r0, r6
   1a678:	f013 ff67 	bl	2e54a <atomic_and>
		return err;
   1a67c:	e7c1      	b.n	1a602 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   1a67e:	686b      	ldr	r3, [r5, #4]
	if (val) {
   1a680:	07db      	lsls	r3, r3, #31
   1a682:	d515      	bpl.n	1a6b0 <bt_le_scan_start+0xc8>
   1a684:	f3bf 8f5b 	dmb	ish
   1a688:	e858 3f00 	ldrex	r3, [r8]
   1a68c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1a690:	e848 3200 	strex	r2, r3, [r8]
   1a694:	2a00      	cmp	r2, #0
   1a696:	d1f7      	bne.n	1a688 <bt_le_scan_start+0xa0>
   1a698:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   1a69c:	89ab      	ldrh	r3, [r5, #12]
   1a69e:	b16b      	cbz	r3, 1a6bc <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a6a0:	480f      	ldr	r0, [pc, #60]	; (1a6e0 <bt_le_scan_start+0xf8>)
   1a6a2:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1a6a6:	f013 ff50 	bl	2e54a <atomic_and>
			return -ENOTSUP;
   1a6aa:	f06f 0485 	mvn.w	r4, #133	; 0x85
   1a6ae:	e7a8      	b.n	1a602 <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a6b0:	f46f 7180 	mvn.w	r1, #256	; 0x100
   1a6b4:	480a      	ldr	r0, [pc, #40]	; (1a6e0 <bt_le_scan_start+0xf8>)
   1a6b6:	f013 ff48 	bl	2e54a <atomic_and>
   1a6ba:	e7ef      	b.n	1a69c <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
   1a6bc:	896a      	ldrh	r2, [r5, #10]
   1a6be:	8929      	ldrh	r1, [r5, #8]
   1a6c0:	7828      	ldrb	r0, [r5, #0]
   1a6c2:	f7ff fdff 	bl	1a2c4 <start_le_scan_legacy>
	if (err) {
   1a6c6:	4604      	mov	r4, r0
   1a6c8:	b118      	cbz	r0, 1a6d2 <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a6ca:	4805      	ldr	r0, [pc, #20]	; (1a6e0 <bt_le_scan_start+0xf8>)
   1a6cc:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1a6d0:	e7d2      	b.n	1a678 <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   1a6d2:	4b04      	ldr	r3, [pc, #16]	; (1a6e4 <bt_le_scan_start+0xfc>)
   1a6d4:	601f      	str	r7, [r3, #0]
	return 0;
   1a6d6:	e794      	b.n	1a602 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   1a6d8:	f06f 040a 	mvn.w	r4, #10
   1a6dc:	e791      	b.n	1a602 <bt_le_scan_start+0x1a>
   1a6de:	bf00      	nop
   1a6e0:	20000374 	.word	0x20000374
   1a6e4:	20002cf0 	.word	0x20002cf0

0001a6e8 <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   1a6e8:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1a6ea:	4808      	ldr	r0, [pc, #32]	; (1a70c <bt_le_scan_stop+0x24>)
   1a6ec:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1a6f0:	f013 ff2b 	bl	2e54a <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a6f4:	0643      	lsls	r3, r0, #25
   1a6f6:	d506      	bpl.n	1a706 <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   1a6f8:	4b05      	ldr	r3, [pc, #20]	; (1a710 <bt_le_scan_stop+0x28>)
   1a6fa:	2000      	movs	r0, #0
   1a6fc:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   1a6fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   1a702:	f7ff be31 	b.w	1a368 <bt_le_scan_update>
}
   1a706:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1a70a:	bd08      	pop	{r3, pc}
   1a70c:	20000374 	.word	0x20000374
   1a710:	20002cf0 	.word	0x20002cf0

0001a714 <bt_le_scan_cb_register>:
	parent->next = child;
   1a714:	2300      	movs	r3, #0
   1a716:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   1a718:	4b05      	ldr	r3, [pc, #20]	; (1a730 <bt_le_scan_cb_register+0x1c>)
   1a71a:	6859      	ldr	r1, [r3, #4]

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   1a71c:	f100 0208 	add.w	r2, r0, #8
   1a720:	b911      	cbnz	r1, 1a728 <bt_le_scan_cb_register+0x14>
	list->head = node;
   1a722:	e9c3 2200 	strd	r2, r2, [r3]
}
   1a726:	4770      	bx	lr
	parent->next = child;
   1a728:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1a72a:	605a      	str	r2, [r3, #4]
}
   1a72c:	4770      	bx	lr
   1a72e:	bf00      	nop
   1a730:	20002ce8 	.word	0x20002ce8

0001a734 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   1a734:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1a736:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1a73a:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   1a73c:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   1a73e:	4801      	ldr	r0, [pc, #4]	; (1a744 <tx_free+0x10>)
   1a740:	f015 bde2 	b.w	30308 <k_queue_append>
   1a744:	20000978 	.word	0x20000978

0001a748 <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1a748:	4b19      	ldr	r3, [pc, #100]	; (1a7b0 <notify_connected+0x68>)
{
   1a74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   1a74e:	681d      	ldr	r5, [r3, #0]
{
   1a750:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   1a752:	b9ed      	cbnz	r5, 1a790 <notify_connected+0x48>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a754:	4e17      	ldr	r6, [pc, #92]	; (1a7b4 <notify_connected+0x6c>)
   1a756:	4d18      	ldr	r5, [pc, #96]	; (1a7b8 <notify_connected+0x70>)
   1a758:	4f18      	ldr	r7, [pc, #96]	; (1a7bc <notify_connected+0x74>)
   1a75a:	46b0      	mov	r8, r6
   1a75c:	42b5      	cmp	r5, r6
   1a75e:	d90e      	bls.n	1a77e <notify_connected+0x36>
   1a760:	4917      	ldr	r1, [pc, #92]	; (1a7c0 <notify_connected+0x78>)
   1a762:	4818      	ldr	r0, [pc, #96]	; (1a7c4 <notify_connected+0x7c>)
   1a764:	f240 5311 	movw	r3, #1297	; 0x511
   1a768:	463a      	mov	r2, r7
   1a76a:	f011 ff16 	bl	2c59a <printk>
   1a76e:	4816      	ldr	r0, [pc, #88]	; (1a7c8 <notify_connected+0x80>)
   1a770:	f011 ff13 	bl	2c59a <printk>
   1a774:	f240 5111 	movw	r1, #1297	; 0x511
   1a778:	4638      	mov	r0, r7
   1a77a:	f012 f94f 	bl	2ca1c <assert_post_action>
   1a77e:	4545      	cmp	r5, r8
   1a780:	d30d      	bcc.n	1a79e <notify_connected+0x56>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   1a782:	7a63      	ldrb	r3, [r4, #9]
   1a784:	b993      	cbnz	r3, 1a7ac <notify_connected+0x64>
		bt_gatt_connected(conn);
   1a786:	4620      	mov	r0, r4
	}
}
   1a788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_gatt_connected(conn);
   1a78c:	f004 bb78 	b.w	1ee80 <bt_gatt_connected>
		if (cb->connected) {
   1a790:	682b      	ldr	r3, [r5, #0]
   1a792:	b113      	cbz	r3, 1a79a <notify_connected+0x52>
			cb->connected(conn, conn->err);
   1a794:	7a61      	ldrb	r1, [r4, #9]
   1a796:	4620      	mov	r0, r4
   1a798:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a79a:	692d      	ldr	r5, [r5, #16]
   1a79c:	e7d9      	b.n	1a752 <notify_connected+0xa>
		if (cb->connected) {
   1a79e:	682b      	ldr	r3, [r5, #0]
   1a7a0:	b113      	cbz	r3, 1a7a8 <notify_connected+0x60>
			cb->connected(conn, conn->err);
   1a7a2:	7a61      	ldrb	r1, [r4, #9]
   1a7a4:	4620      	mov	r0, r4
   1a7a6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a7a8:	3514      	adds	r5, #20
   1a7aa:	e7d7      	b.n	1a75c <notify_connected+0x14>
}
   1a7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a7b0:	20002cf4 	.word	0x20002cf4
   1a7b4:	00030bc4 	.word	0x00030bc4
   1a7b8:	00030bc4 	.word	0x00030bc4
   1a7bc:	000350eb 	.word	0x000350eb
   1a7c0:	0003511b 	.word	0x0003511b
   1a7c4:	00032486 	.word	0x00032486
   1a7c8:	00035136 	.word	0x00035136

0001a7cc <send_frag>:
{
   1a7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   1a7d0:	694d      	ldr	r5, [r1, #20]
{
   1a7d2:	4604      	mov	r4, r0
   1a7d4:	460e      	mov	r6, r1
   1a7d6:	4691      	mov	r9, r2
   1a7d8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   1a7da:	f04f 33ff 	mov.w	r3, #4294967295
   1a7de:	484e      	ldr	r0, [pc, #312]	; (1a918 <send_frag+0x14c>)
   1a7e0:	f04f 32ff 	mov.w	r2, #4294967295
   1a7e4:	f00b fb4c 	bl	25e80 <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   1a7e8:	7aa3      	ldrb	r3, [r4, #10]
   1a7ea:	2b07      	cmp	r3, #7
   1a7ec:	d154      	bne.n	1a898 <send_frag+0xcc>
	__asm__ volatile(
   1a7ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a7f2:	f3ef 8211 	mrs	r2, BASEPRI
   1a7f6:	f383 8812 	msr	BASEPRI_MAX, r3
   1a7fa:	f3bf 8f6f 	isb	sy
	if (tx) {
   1a7fe:	2d00      	cmp	r5, #0
   1a800:	d05c      	beq.n	1a8bc <send_frag+0xf0>
	parent->next = child;
   1a802:	2300      	movs	r3, #0
   1a804:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   1a806:	69a3      	ldr	r3, [r4, #24]
   1a808:	2b00      	cmp	r3, #0
   1a80a:	d154      	bne.n	1a8b6 <send_frag+0xea>
	list->head = node;
   1a80c:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   1a810:	f382 8811 	msr	BASEPRI, r2
   1a814:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   1a818:	2104      	movs	r1, #4
   1a81a:	f106 0008 	add.w	r0, r6, #8
   1a81e:	f006 fd47 	bl	212b0 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1a822:	8823      	ldrh	r3, [r4, #0]
   1a824:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   1a828:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1a82c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   1a82e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1a832:	3b04      	subs	r3, #4
   1a834:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1a836:	2302      	movs	r3, #2
   1a838:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1a83a:	4630      	mov	r0, r6
   1a83c:	f7fe fc8a 	bl	19154 <bt_send>
	if (err) {
   1a840:	4601      	mov	r1, r0
   1a842:	2800      	cmp	r0, #0
   1a844:	d065      	beq.n	1a912 <send_frag+0x146>
		BT_ERR("Unable to send to driver (err %d)", err);
   1a846:	4a35      	ldr	r2, [pc, #212]	; (1a91c <send_frag+0x150>)
   1a848:	6813      	ldr	r3, [r2, #0]
   1a84a:	075b      	lsls	r3, r3, #29
   1a84c:	d008      	beq.n	1a860 <send_frag+0x94>
   1a84e:	4b34      	ldr	r3, [pc, #208]	; (1a920 <send_frag+0x154>)
   1a850:	4834      	ldr	r0, [pc, #208]	; (1a924 <send_frag+0x158>)
   1a852:	1ad2      	subs	r2, r2, r3
   1a854:	0892      	lsrs	r2, r2, #2
   1a856:	0192      	lsls	r2, r2, #6
   1a858:	f042 0201 	orr.w	r2, r2, #1
   1a85c:	f012 fa4c 	bl	2ccf8 <log_1>
	__asm__ volatile(
   1a860:	f04f 0340 	mov.w	r3, #64	; 0x40
   1a864:	f3ef 8911 	mrs	r9, BASEPRI
   1a868:	f383 8812 	msr	BASEPRI_MAX, r3
   1a86c:	f3bf 8f6f 	isb	sy
		if (tx) {
   1a870:	2d00      	cmp	r5, #0
   1a872:	d039      	beq.n	1a8e8 <send_frag+0x11c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a874:	6963      	ldr	r3, [r4, #20]
   1a876:	2200      	movs	r2, #0
   1a878:	b153      	cbz	r3, 1a890 <send_frag+0xc4>
   1a87a:	429d      	cmp	r5, r3
   1a87c:	d131      	bne.n	1a8e2 <send_frag+0x116>
Z_GENLIST_REMOVE(slist, snode)
   1a87e:	682b      	ldr	r3, [r5, #0]
   1a880:	bb4a      	cbnz	r2, 1a8d6 <send_frag+0x10a>
   1a882:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   1a884:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1a886:	4295      	cmp	r5, r2
   1a888:	d100      	bne.n	1a88c <send_frag+0xc0>
	list->tail = node;
   1a88a:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   1a88c:	2300      	movs	r3, #0
   1a88e:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   1a890:	f389 8811 	msr	BASEPRI, r9
   1a894:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1a898:	481f      	ldr	r0, [pc, #124]	; (1a918 <send_frag+0x14c>)
   1a89a:	f00b faad 	bl	25df8 <z_impl_k_sem_give>
	if (tx) {
   1a89e:	b115      	cbz	r5, 1a8a6 <send_frag+0xda>
		tx_free(tx);
   1a8a0:	4628      	mov	r0, r5
   1a8a2:	f7ff ff47 	bl	1a734 <tx_free>
	if (always_consume) {
   1a8a6:	b11f      	cbz	r7, 1a8b0 <send_frag+0xe4>
		net_buf_unref(buf);
   1a8a8:	4630      	mov	r0, r6
   1a8aa:	f006 fc35 	bl	21118 <net_buf_unref>
	return false;
   1a8ae:	2700      	movs	r7, #0
}
   1a8b0:	4638      	mov	r0, r7
   1a8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1a8b6:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1a8b8:	61a5      	str	r5, [r4, #24]
}
   1a8ba:	e7a9      	b.n	1a810 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   1a8bc:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   1a8be:	b133      	cbz	r3, 1a8ce <send_frag+0x102>
			pending_no_cb = &tail_tx->pending_no_cb;
   1a8c0:	f103 080c 	add.w	r8, r3, #12
   1a8c4:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   1a8c6:	3301      	adds	r3, #1
   1a8c8:	f8c8 3000 	str.w	r3, [r8]
   1a8cc:	e7a0      	b.n	1a810 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   1a8ce:	69e3      	ldr	r3, [r4, #28]
   1a8d0:	f104 081c 	add.w	r8, r4, #28
   1a8d4:	e7f7      	b.n	1a8c6 <send_frag+0xfa>
	parent->next = child;
   1a8d6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1a8d8:	69a3      	ldr	r3, [r4, #24]
   1a8da:	429d      	cmp	r5, r3
	list->tail = node;
   1a8dc:	bf08      	it	eq
   1a8de:	61a2      	streq	r2, [r4, #24]
}
   1a8e0:	e7d4      	b.n	1a88c <send_frag+0xc0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1a8e2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1a8e4:	681b      	ldr	r3, [r3, #0]
   1a8e6:	e7c7      	b.n	1a878 <send_frag+0xac>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   1a8e8:	f8d8 3000 	ldr.w	r3, [r8]
   1a8ec:	b95b      	cbnz	r3, 1a906 <send_frag+0x13a>
   1a8ee:	490e      	ldr	r1, [pc, #56]	; (1a928 <send_frag+0x15c>)
   1a8f0:	480e      	ldr	r0, [pc, #56]	; (1a92c <send_frag+0x160>)
   1a8f2:	4a0f      	ldr	r2, [pc, #60]	; (1a930 <send_frag+0x164>)
   1a8f4:	f240 230f 	movw	r3, #527	; 0x20f
   1a8f8:	f011 fe4f 	bl	2c59a <printk>
   1a8fc:	480c      	ldr	r0, [pc, #48]	; (1a930 <send_frag+0x164>)
   1a8fe:	f240 210f 	movw	r1, #527	; 0x20f
   1a902:	f012 f88b 	bl	2ca1c <assert_post_action>
			(*pending_no_cb)--;
   1a906:	f8d8 3000 	ldr.w	r3, [r8]
   1a90a:	3b01      	subs	r3, #1
   1a90c:	f8c8 3000 	str.w	r3, [r8]
   1a910:	e7be      	b.n	1a890 <send_frag+0xc4>
	return true;
   1a912:	2701      	movs	r7, #1
   1a914:	e7cc      	b.n	1a8b0 <send_frag+0xe4>
   1a916:	bf00      	nop
   1a918:	200003a8 	.word	0x200003a8
   1a91c:	200007b0 	.word	0x200007b0
   1a920:	200007a8 	.word	0x200007a8
   1a924:	00034e00 	.word	0x00034e00
   1a928:	00035155 	.word	0x00035155
   1a92c:	00032486 	.word	0x00032486
   1a930:	000350eb 	.word	0x000350eb

0001a934 <bt_conn_get_pkts>:
}
   1a934:	4800      	ldr	r0, [pc, #0]	; (1a938 <bt_conn_get_pkts+0x4>)
   1a936:	4770      	bx	lr
   1a938:	200003a8 	.word	0x200003a8

0001a93c <bt_conn_new>:
{
   1a93c:	b538      	push	{r3, r4, r5, lr}
   1a93e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1a940:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1a942:	2501      	movs	r5, #1
   1a944:	428b      	cmp	r3, r1
   1a946:	d102      	bne.n	1a94e <bt_conn_new+0x12>
		return NULL;
   1a948:	2400      	movs	r4, #0
}
   1a94a:	4620      	mov	r0, r4
   1a94c:	bd38      	pop	{r3, r4, r5, pc}
   1a94e:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   1a952:	f3bf 8f5b 	dmb	ish
   1a956:	e852 0f00 	ldrex	r0, [r2]
   1a95a:	2800      	cmp	r0, #0
   1a95c:	d104      	bne.n	1a968 <bt_conn_new+0x2c>
   1a95e:	e842 5c00 	strex	ip, r5, [r2]
   1a962:	f1bc 0f00 	cmp.w	ip, #0
   1a966:	d1f6      	bne.n	1a956 <bt_conn_new+0x1a>
   1a968:	f3bf 8f5b 	dmb	ish
   1a96c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   1a970:	d002      	beq.n	1a978 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   1a972:	3301      	adds	r3, #1
   1a974:	4604      	mov	r4, r0
   1a976:	e7e5      	b.n	1a944 <bt_conn_new+0x8>
	if (!conn) {
   1a978:	2c00      	cmp	r4, #0
   1a97a:	d0e6      	beq.n	1a94a <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   1a97c:	22c0      	movs	r2, #192	; 0xc0
   1a97e:	2100      	movs	r1, #0
   1a980:	4620      	mov	r0, r4
   1a982:	f015 fe52 	bl	3062a <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1a986:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1a98a:	4904      	ldr	r1, [pc, #16]	; (1a99c <bt_conn_new+0x60>)
   1a98c:	f00b fe0c 	bl	265a8 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   1a990:	4903      	ldr	r1, [pc, #12]	; (1a9a0 <bt_conn_new+0x64>)
   1a992:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1a996:	f00b fd03 	bl	263a0 <k_work_init>
	return conn;
   1a99a:	e7d6      	b.n	1a94a <bt_conn_new+0xe>
   1a99c:	0001b591 	.word	0x0001b591
   1a9a0:	0002e5d7 	.word	0x0002e5d7

0001a9a4 <conn_cleanup>:
{
   1a9a4:	b570      	push	{r4, r5, r6, lr}
   1a9a6:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1a9a8:	f100 0638 	add.w	r6, r0, #56	; 0x38
   1a9ac:	2200      	movs	r2, #0
   1a9ae:	2300      	movs	r3, #0
   1a9b0:	4630      	mov	r0, r6
   1a9b2:	f006 fb1f 	bl	20ff4 <net_buf_get>
   1a9b6:	4605      	mov	r5, r0
   1a9b8:	bb48      	cbnz	r0, 1aa0e <conn_cleanup+0x6a>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1a9ba:	6963      	ldr	r3, [r4, #20]
   1a9bc:	b173      	cbz	r3, 1a9dc <conn_cleanup+0x38>
   1a9be:	4918      	ldr	r1, [pc, #96]	; (1aa20 <conn_cleanup+0x7c>)
   1a9c0:	4a18      	ldr	r2, [pc, #96]	; (1aa24 <conn_cleanup+0x80>)
   1a9c2:	4819      	ldr	r0, [pc, #100]	; (1aa28 <conn_cleanup+0x84>)
   1a9c4:	f240 2392 	movw	r3, #658	; 0x292
   1a9c8:	f011 fde7 	bl	2c59a <printk>
   1a9cc:	4817      	ldr	r0, [pc, #92]	; (1aa2c <conn_cleanup+0x88>)
   1a9ce:	f011 fde4 	bl	2c59a <printk>
   1a9d2:	4814      	ldr	r0, [pc, #80]	; (1aa24 <conn_cleanup+0x80>)
   1a9d4:	f240 2192 	movw	r1, #658	; 0x292
   1a9d8:	f012 f820 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   1a9dc:	69e3      	ldr	r3, [r4, #28]
   1a9de:	b15b      	cbz	r3, 1a9f8 <conn_cleanup+0x54>
   1a9e0:	4913      	ldr	r1, [pc, #76]	; (1aa30 <conn_cleanup+0x8c>)
   1a9e2:	4811      	ldr	r0, [pc, #68]	; (1aa28 <conn_cleanup+0x84>)
   1a9e4:	4a0f      	ldr	r2, [pc, #60]	; (1aa24 <conn_cleanup+0x80>)
   1a9e6:	f240 2393 	movw	r3, #659	; 0x293
   1a9ea:	f011 fdd6 	bl	2c59a <printk>
   1a9ee:	480d      	ldr	r0, [pc, #52]	; (1aa24 <conn_cleanup+0x80>)
   1a9f0:	f240 2193 	movw	r1, #659	; 0x293
   1a9f4:	f012 f812 	bl	2ca1c <assert_post_action>
	bt_conn_reset_rx_state(conn);
   1a9f8:	4620      	mov	r0, r4
   1a9fa:	f013 fdef 	bl	2e5dc <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1a9fe:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1aa02:	2200      	movs	r2, #0
}
   1aa04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   1aa08:	2300      	movs	r3, #0
   1aa0a:	f00b bef1 	b.w	267f0 <k_work_reschedule>
		if (tx_data(buf)->tx) {
   1aa0e:	6968      	ldr	r0, [r5, #20]
   1aa10:	b108      	cbz	r0, 1aa16 <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   1aa12:	f7ff fe8f 	bl	1a734 <tx_free>
		net_buf_unref(buf);
   1aa16:	4628      	mov	r0, r5
   1aa18:	f006 fb7e 	bl	21118 <net_buf_unref>
   1aa1c:	e7c6      	b.n	1a9ac <conn_cleanup+0x8>
   1aa1e:	bf00      	nop
   1aa20:	00035168 	.word	0x00035168
   1aa24:	000350eb 	.word	0x000350eb
   1aa28:	00032486 	.word	0x00032486
   1aa2c:	0003518e 	.word	0x0003518e
   1aa30:	000351a3 	.word	0x000351a3

0001aa34 <bt_conn_recv>:
{
   1aa34:	b570      	push	{r4, r5, r6, lr}
   1aa36:	4616      	mov	r6, r2
   1aa38:	4604      	mov	r4, r0
   1aa3a:	460d      	mov	r5, r1
	tx_notify(conn);
   1aa3c:	f013 fda8 	bl	2e590 <tx_notify>
	switch (flags) {
   1aa40:	2e01      	cmp	r6, #1
   1aa42:	d034      	beq.n	1aaae <bt_conn_recv+0x7a>
   1aa44:	2e02      	cmp	r6, #2
   1aa46:	d170      	bne.n	1ab2a <bt_conn_recv+0xf6>
		if (conn->rx) {
   1aa48:	6923      	ldr	r3, [r4, #16]
   1aa4a:	b17b      	cbz	r3, 1aa6c <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
   1aa4c:	4943      	ldr	r1, [pc, #268]	; (1ab5c <bt_conn_recv+0x128>)
   1aa4e:	680b      	ldr	r3, [r1, #0]
   1aa50:	075b      	lsls	r3, r3, #29
   1aa52:	d008      	beq.n	1aa66 <bt_conn_recv+0x32>
   1aa54:	4b42      	ldr	r3, [pc, #264]	; (1ab60 <bt_conn_recv+0x12c>)
   1aa56:	4843      	ldr	r0, [pc, #268]	; (1ab64 <bt_conn_recv+0x130>)
   1aa58:	1ac9      	subs	r1, r1, r3
   1aa5a:	0889      	lsrs	r1, r1, #2
   1aa5c:	0189      	lsls	r1, r1, #6
   1aa5e:	f041 0101 	orr.w	r1, r1, #1
   1aa62:	f012 f93c 	bl	2ccde <log_0>
			bt_conn_reset_rx_state(conn);
   1aa66:	4620      	mov	r0, r4
   1aa68:	f013 fdb8 	bl	2e5dc <bt_conn_reset_rx_state>
		conn->rx = buf;
   1aa6c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1aa6e:	6923      	ldr	r3, [r4, #16]
   1aa70:	8999      	ldrh	r1, [r3, #12]
   1aa72:	2901      	cmp	r1, #1
   1aa74:	d971      	bls.n	1ab5a <bt_conn_recv+0x126>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1aa76:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1aa78:	7845      	ldrb	r5, [r0, #1]
   1aa7a:	7802      	ldrb	r2, [r0, #0]
   1aa7c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1aa80:	3204      	adds	r2, #4
   1aa82:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   1aa84:	4291      	cmp	r1, r2
   1aa86:	d368      	bcc.n	1ab5a <bt_conn_recv+0x126>
	if (conn->rx->len > acl_total_len) {
   1aa88:	d95e      	bls.n	1ab48 <bt_conn_recv+0x114>
		BT_ERR("ACL len mismatch (%u > %u)",
   1aa8a:	4b34      	ldr	r3, [pc, #208]	; (1ab5c <bt_conn_recv+0x128>)
   1aa8c:	6818      	ldr	r0, [r3, #0]
   1aa8e:	0740      	lsls	r0, r0, #29
   1aa90:	d008      	beq.n	1aaa4 <bt_conn_recv+0x70>
   1aa92:	4833      	ldr	r0, [pc, #204]	; (1ab60 <bt_conn_recv+0x12c>)
   1aa94:	1a1b      	subs	r3, r3, r0
   1aa96:	089b      	lsrs	r3, r3, #2
   1aa98:	019b      	lsls	r3, r3, #6
   1aa9a:	4833      	ldr	r0, [pc, #204]	; (1ab68 <bt_conn_recv+0x134>)
   1aa9c:	f043 0301 	orr.w	r3, r3, #1
   1aaa0:	f012 f93e 	bl	2cd20 <log_2>
		bt_conn_reset_rx_state(conn);
   1aaa4:	4620      	mov	r0, r4
}
   1aaa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1aaaa:	f013 bd97 	b.w	2e5dc <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1aaae:	6920      	ldr	r0, [r4, #16]
   1aab0:	b9a0      	cbnz	r0, 1aadc <bt_conn_recv+0xa8>
			BT_ERR("Unexpected L2CAP continuation");
   1aab2:	492a      	ldr	r1, [pc, #168]	; (1ab5c <bt_conn_recv+0x128>)
   1aab4:	680b      	ldr	r3, [r1, #0]
   1aab6:	075e      	lsls	r6, r3, #29
   1aab8:	d008      	beq.n	1aacc <bt_conn_recv+0x98>
   1aaba:	4b29      	ldr	r3, [pc, #164]	; (1ab60 <bt_conn_recv+0x12c>)
   1aabc:	482b      	ldr	r0, [pc, #172]	; (1ab6c <bt_conn_recv+0x138>)
   1aabe:	1ac9      	subs	r1, r1, r3
   1aac0:	0889      	lsrs	r1, r1, #2
   1aac2:	0189      	lsls	r1, r1, #6
   1aac4:	f041 0101 	orr.w	r1, r1, #1
   1aac8:	f012 f909 	bl	2ccde <log_0>
			bt_conn_reset_rx_state(conn);
   1aacc:	4620      	mov	r0, r4
   1aace:	f013 fd85 	bl	2e5dc <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   1aad2:	4628      	mov	r0, r5
}
   1aad4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   1aad8:	f006 bb1e 	b.w	21118 <net_buf_unref>
		if (!buf->len) {
   1aadc:	89ae      	ldrh	r6, [r5, #12]
   1aade:	2e00      	cmp	r6, #0
   1aae0:	d0f7      	beq.n	1aad2 <bt_conn_recv+0x9e>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   1aae2:	3008      	adds	r0, #8
   1aae4:	f014 ffc1 	bl	2fa6a <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1aae8:	4286      	cmp	r6, r0
   1aaea:	d914      	bls.n	1ab16 <bt_conn_recv+0xe2>
			BT_ERR("Not enough buffer space for L2CAP data");
   1aaec:	491b      	ldr	r1, [pc, #108]	; (1ab5c <bt_conn_recv+0x128>)
   1aaee:	680b      	ldr	r3, [r1, #0]
   1aaf0:	0758      	lsls	r0, r3, #29
   1aaf2:	d008      	beq.n	1ab06 <bt_conn_recv+0xd2>
   1aaf4:	4b1a      	ldr	r3, [pc, #104]	; (1ab60 <bt_conn_recv+0x12c>)
   1aaf6:	481e      	ldr	r0, [pc, #120]	; (1ab70 <bt_conn_recv+0x13c>)
   1aaf8:	1ac9      	subs	r1, r1, r3
   1aafa:	0889      	lsrs	r1, r1, #2
   1aafc:	0189      	lsls	r1, r1, #6
   1aafe:	f041 0101 	orr.w	r1, r1, #1
   1ab02:	f012 f8ec 	bl	2ccde <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   1ab06:	6921      	ldr	r1, [r4, #16]
   1ab08:	2200      	movs	r2, #0
   1ab0a:	4620      	mov	r0, r4
   1ab0c:	f001 f844 	bl	1bb98 <bt_l2cap_recv>
			conn->rx = NULL;
   1ab10:	2300      	movs	r3, #0
   1ab12:	6123      	str	r3, [r4, #16]
   1ab14:	e7dd      	b.n	1aad2 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ab16:	6920      	ldr	r0, [r4, #16]
   1ab18:	89aa      	ldrh	r2, [r5, #12]
   1ab1a:	68a9      	ldr	r1, [r5, #8]
   1ab1c:	3008      	adds	r0, #8
   1ab1e:	f014 ffac 	bl	2fa7a <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1ab22:	4628      	mov	r0, r5
   1ab24:	f006 faf8 	bl	21118 <net_buf_unref>
		break;
   1ab28:	e7a1      	b.n	1aa6e <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   1ab2a:	4b0c      	ldr	r3, [pc, #48]	; (1ab5c <bt_conn_recv+0x128>)
   1ab2c:	681a      	ldr	r2, [r3, #0]
   1ab2e:	0752      	lsls	r2, r2, #29
   1ab30:	d0cc      	beq.n	1aacc <bt_conn_recv+0x98>
   1ab32:	4a0b      	ldr	r2, [pc, #44]	; (1ab60 <bt_conn_recv+0x12c>)
   1ab34:	480f      	ldr	r0, [pc, #60]	; (1ab74 <bt_conn_recv+0x140>)
   1ab36:	1a9b      	subs	r3, r3, r2
   1ab38:	089b      	lsrs	r3, r3, #2
   1ab3a:	019b      	lsls	r3, r3, #6
   1ab3c:	f043 0201 	orr.w	r2, r3, #1
   1ab40:	4631      	mov	r1, r6
   1ab42:	f012 f8d9 	bl	2ccf8 <log_1>
   1ab46:	e7c1      	b.n	1aacc <bt_conn_recv+0x98>
	conn->rx = NULL;
   1ab48:	2200      	movs	r2, #0
   1ab4a:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   1ab4c:	4620      	mov	r0, r4
   1ab4e:	2201      	movs	r2, #1
}
   1ab50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   1ab54:	4619      	mov	r1, r3
   1ab56:	f001 b81f 	b.w	1bb98 <bt_l2cap_recv>
}
   1ab5a:	bd70      	pop	{r4, r5, r6, pc}
   1ab5c:	200007b0 	.word	0x200007b0
   1ab60:	200007a8 	.word	0x200007a8
   1ab64:	000351bc 	.word	0x000351bc
   1ab68:	0003523c 	.word	0x0003523c
   1ab6c:	000351d9 	.word	0x000351d9
   1ab70:	000351f7 	.word	0x000351f7
   1ab74:	0003521e 	.word	0x0003521e

0001ab78 <bt_conn_send_cb>:
{
   1ab78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ab7c:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   1ab7e:	7a83      	ldrb	r3, [r0, #10]
   1ab80:	2b07      	cmp	r3, #7
{
   1ab82:	4605      	mov	r5, r0
   1ab84:	460e      	mov	r6, r1
   1ab86:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   1ab88:	d010      	beq.n	1abac <bt_conn_send_cb+0x34>
		BT_ERR("not connected!");
   1ab8a:	492b      	ldr	r1, [pc, #172]	; (1ac38 <bt_conn_send_cb+0xc0>)
   1ab8c:	680b      	ldr	r3, [r1, #0]
   1ab8e:	075a      	lsls	r2, r3, #29
   1ab90:	d008      	beq.n	1aba4 <bt_conn_send_cb+0x2c>
   1ab92:	4b2a      	ldr	r3, [pc, #168]	; (1ac3c <bt_conn_send_cb+0xc4>)
   1ab94:	482a      	ldr	r0, [pc, #168]	; (1ac40 <bt_conn_send_cb+0xc8>)
   1ab96:	1ac9      	subs	r1, r1, r3
   1ab98:	0889      	lsrs	r1, r1, #2
   1ab9a:	0189      	lsls	r1, r1, #6
   1ab9c:	f041 0101 	orr.w	r1, r1, #1
   1aba0:	f012 f89d 	bl	2ccde <log_0>
			return -ENOTCONN;
   1aba4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1aba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1abac:	2a00      	cmp	r2, #0
   1abae:	d040      	beq.n	1ac32 <bt_conn_send_cb+0xba>
	return z_impl_z_current_get();
   1abb0:	f00d f812 	bl	27bd8 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   1abb4:	4b23      	ldr	r3, [pc, #140]	; (1ac44 <bt_conn_send_cb+0xcc>)
   1abb6:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   1abb8:	4823      	ldr	r0, [pc, #140]	; (1ac48 <bt_conn_send_cb+0xd0>)
   1abba:	bf07      	ittee	eq
   1abbc:	2200      	moveq	r2, #0
   1abbe:	2300      	moveq	r3, #0
   1abc0:	f04f 32ff 	movne.w	r2, #4294967295
   1abc4:	f04f 33ff 	movne.w	r3, #4294967295
   1abc8:	f00b f8aa 	bl	25d20 <z_impl_k_queue_get>
   1abcc:	4604      	mov	r4, r0
		if (!tx) {
   1abce:	b978      	cbnz	r0, 1abf0 <bt_conn_send_cb+0x78>
			BT_ERR("Unable to allocate TX context");
   1abd0:	4919      	ldr	r1, [pc, #100]	; (1ac38 <bt_conn_send_cb+0xc0>)
   1abd2:	680b      	ldr	r3, [r1, #0]
   1abd4:	075b      	lsls	r3, r3, #29
   1abd6:	d008      	beq.n	1abea <bt_conn_send_cb+0x72>
   1abd8:	4b18      	ldr	r3, [pc, #96]	; (1ac3c <bt_conn_send_cb+0xc4>)
   1abda:	481c      	ldr	r0, [pc, #112]	; (1ac4c <bt_conn_send_cb+0xd4>)
   1abdc:	1ac9      	subs	r1, r1, r3
   1abde:	0889      	lsrs	r1, r1, #2
   1abe0:	0189      	lsls	r1, r1, #6
   1abe2:	f041 0101 	orr.w	r1, r1, #1
   1abe6:	f012 f87a 	bl	2ccde <log_0>
			return -ENOBUFS;
   1abea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   1abee:	e7db      	b.n	1aba8 <bt_conn_send_cb+0x30>
		if (conn->state != BT_CONN_CONNECTED) {
   1abf0:	7aab      	ldrb	r3, [r5, #10]
   1abf2:	2b07      	cmp	r3, #7
   1abf4:	d011      	beq.n	1ac1a <bt_conn_send_cb+0xa2>
			BT_WARN("Disconnected while allocating context");
   1abf6:	4910      	ldr	r1, [pc, #64]	; (1ac38 <bt_conn_send_cb+0xc0>)
   1abf8:	680b      	ldr	r3, [r1, #0]
   1abfa:	f013 0f06 	tst.w	r3, #6
   1abfe:	d008      	beq.n	1ac12 <bt_conn_send_cb+0x9a>
   1ac00:	4b0e      	ldr	r3, [pc, #56]	; (1ac3c <bt_conn_send_cb+0xc4>)
   1ac02:	4813      	ldr	r0, [pc, #76]	; (1ac50 <bt_conn_send_cb+0xd8>)
   1ac04:	1ac9      	subs	r1, r1, r3
   1ac06:	0889      	lsrs	r1, r1, #2
   1ac08:	0189      	lsls	r1, r1, #6
   1ac0a:	f041 0102 	orr.w	r1, r1, #2
   1ac0e:	f012 f866 	bl	2ccde <log_0>
			tx_free(tx);
   1ac12:	4620      	mov	r0, r4
   1ac14:	f7ff fd8e 	bl	1a734 <tx_free>
   1ac18:	e7c4      	b.n	1aba4 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
   1ac1a:	2300      	movs	r3, #0
		tx->user_data = user_data;
   1ac1c:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   1ac20:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   1ac22:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   1ac24:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1ac28:	4631      	mov	r1, r6
   1ac2a:	f006 fa41 	bl	210b0 <net_buf_put>
	return 0;
   1ac2e:	2000      	movs	r0, #0
   1ac30:	e7ba      	b.n	1aba8 <bt_conn_send_cb+0x30>
		tx_data(buf)->tx = NULL;
   1ac32:	614a      	str	r2, [r1, #20]
   1ac34:	e7f6      	b.n	1ac24 <bt_conn_send_cb+0xac>
   1ac36:	bf00      	nop
   1ac38:	200007b0 	.word	0x200007b0
   1ac3c:	200007a8 	.word	0x200007a8
   1ac40:	00035257 	.word	0x00035257
   1ac44:	20002200 	.word	0x20002200
   1ac48:	20000978 	.word	0x20000978
   1ac4c:	00035266 	.word	0x00035266
   1ac50:	00035284 	.word	0x00035284

0001ac54 <bt_conn_prepare_events>:
{
   1ac54:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   1ac56:	4b1b      	ldr	r3, [pc, #108]	; (1acc4 <bt_conn_prepare_events+0x70>)
   1ac58:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1ac5a:	2101      	movs	r1, #1
{
   1ac5c:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   1ac5e:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   1ac60:	f00e f8a6 	bl	28db0 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   1ac64:	4b18      	ldr	r3, [pc, #96]	; (1acc8 <bt_conn_prepare_events+0x74>)
   1ac66:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   1ac6a:	f013 fc84 	bl	2e576 <atomic_get>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   1ac6e:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   1ac72:	4619      	mov	r1, r3
   1ac74:	b908      	cbnz	r0, 1ac7a <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   1ac76:	2001      	movs	r0, #1
}
   1ac78:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1ac7a:	7a9a      	ldrb	r2, [r3, #10]
   1ac7c:	b99a      	cbnz	r2, 1aca6 <bt_conn_prepare_events+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ac7e:	f3bf 8f5b 	dmb	ish
   1ac82:	1d1a      	adds	r2, r3, #4
   1ac84:	e852 0f00 	ldrex	r0, [r2]
   1ac88:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   1ac8c:	e842 ce00 	strex	lr, ip, [r2]
   1ac90:	f1be 0f00 	cmp.w	lr, #0
   1ac94:	d1f6      	bne.n	1ac84 <bt_conn_prepare_events+0x30>
   1ac96:	f3bf 8f5b 	dmb	ish
   1ac9a:	0642      	lsls	r2, r0, #25
   1ac9c:	d503      	bpl.n	1aca6 <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   1ac9e:	4618      	mov	r0, r3
   1aca0:	f7ff fe80 	bl	1a9a4 <conn_cleanup>
   1aca4:	e7e7      	b.n	1ac76 <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   1aca6:	7a8b      	ldrb	r3, [r1, #10]
   1aca8:	2b07      	cmp	r3, #7
   1acaa:	d1e4      	bne.n	1ac76 <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   1acac:	4b07      	ldr	r3, [pc, #28]	; (1accc <bt_conn_prepare_events+0x78>)
   1acae:	4628      	mov	r0, r5
   1acb0:	2200      	movs	r2, #0
   1acb2:	2104      	movs	r1, #4
   1acb4:	f00e f87c 	bl	28db0 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   1acb8:	2301      	movs	r3, #1
   1acba:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   1acbe:	2002      	movs	r0, #2
	return ev_count;
   1acc0:	e7da      	b.n	1ac78 <bt_conn_prepare_events+0x24>
   1acc2:	bf00      	nop
   1acc4:	20000514 	.word	0x20000514
   1acc8:	20001b28 	.word	0x20001b28
   1accc:	20001b60 	.word	0x20001b60

0001acd0 <bt_conn_unref>:
{
   1acd0:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1acd2:	30c0      	adds	r0, #192	; 0xc0
   1acd4:	f3bf 8f5b 	dmb	ish
   1acd8:	e850 3f00 	ldrex	r3, [r0]
   1acdc:	1e5a      	subs	r2, r3, #1
   1acde:	e840 2100 	strex	r1, r2, [r0]
   1ace2:	2900      	cmp	r1, #0
   1ace4:	d1f8      	bne.n	1acd8 <bt_conn_unref+0x8>
   1ace6:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   1acea:	2b00      	cmp	r3, #0
   1acec:	dc10      	bgt.n	1ad10 <bt_conn_unref+0x40>
   1acee:	4909      	ldr	r1, [pc, #36]	; (1ad14 <bt_conn_unref+0x44>)
   1acf0:	4a09      	ldr	r2, [pc, #36]	; (1ad18 <bt_conn_unref+0x48>)
   1acf2:	480a      	ldr	r0, [pc, #40]	; (1ad1c <bt_conn_unref+0x4c>)
   1acf4:	f240 434e 	movw	r3, #1102	; 0x44e
   1acf8:	f011 fc4f 	bl	2c59a <printk>
   1acfc:	4808      	ldr	r0, [pc, #32]	; (1ad20 <bt_conn_unref+0x50>)
   1acfe:	f011 fc4c 	bl	2c59a <printk>
}
   1ad02:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   1ad06:	4804      	ldr	r0, [pc, #16]	; (1ad18 <bt_conn_unref+0x48>)
   1ad08:	f240 414e 	movw	r1, #1102	; 0x44e
   1ad0c:	f011 be86 	b.w	2ca1c <assert_post_action>
}
   1ad10:	bd08      	pop	{r3, pc}
   1ad12:	bf00      	nop
   1ad14:	000352aa 	.word	0x000352aa
   1ad18:	000350eb 	.word	0x000350eb
   1ad1c:	00032486 	.word	0x00032486
   1ad20:	000352b2 	.word	0x000352b2

0001ad24 <bt_conn_lookup_handle>:
{
   1ad24:	4602      	mov	r2, r0
   1ad26:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   1ad28:	2101      	movs	r1, #1
   1ad2a:	4803      	ldr	r0, [pc, #12]	; (1ad38 <bt_conn_lookup_handle+0x14>)
   1ad2c:	f013 fc7a 	bl	2e624 <conn_lookup_handle>
}
   1ad30:	2800      	cmp	r0, #0
   1ad32:	bf38      	it	cc
   1ad34:	2000      	movcc	r0, #0
   1ad36:	bd08      	pop	{r3, pc}
   1ad38:	20001b28 	.word	0x20001b28

0001ad3c <bt_conn_set_state>:
{
   1ad3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   1ad40:	7a86      	ldrb	r6, [r0, #10]
   1ad42:	428e      	cmp	r6, r1
{
   1ad44:	4604      	mov	r4, r0
   1ad46:	460d      	mov	r5, r1
	if (conn->state == state) {
   1ad48:	d116      	bne.n	1ad78 <bt_conn_set_state+0x3c>
		BT_WARN("no transition %s", state2str(state));
   1ad4a:	4b7c      	ldr	r3, [pc, #496]	; (1af3c <bt_conn_set_state+0x200>)
   1ad4c:	681a      	ldr	r2, [r3, #0]
   1ad4e:	f012 0f06 	tst.w	r2, #6
   1ad52:	d053      	beq.n	1adfc <bt_conn_set_state+0xc0>
   1ad54:	4a7a      	ldr	r2, [pc, #488]	; (1af40 <bt_conn_set_state+0x204>)
   1ad56:	487b      	ldr	r0, [pc, #492]	; (1af44 <bt_conn_set_state+0x208>)
   1ad58:	2e08      	cmp	r6, #8
   1ad5a:	eba3 0202 	sub.w	r2, r3, r2
   1ad5e:	bf96      	itet	ls
   1ad60:	4b79      	ldrls	r3, [pc, #484]	; (1af48 <bt_conn_set_state+0x20c>)
   1ad62:	497a      	ldrhi	r1, [pc, #488]	; (1af4c <bt_conn_set_state+0x210>)
   1ad64:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   1ad68:	0892      	lsrs	r2, r2, #2
   1ad6a:	0192      	lsls	r2, r2, #6
   1ad6c:	f042 0202 	orr.w	r2, r2, #2
}
   1ad70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
   1ad74:	f011 bfc0 	b.w	2ccf8 <log_1>
	conn->state = state;
   1ad78:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   1ad7a:	b166      	cbz	r6, 1ad96 <bt_conn_set_state+0x5a>
   1ad7c:	2e06      	cmp	r6, #6
   1ad7e:	d010      	beq.n	1ada2 <bt_conn_set_state+0x66>
	switch (conn->state) {
   1ad80:	7aa3      	ldrb	r3, [r4, #10]
   1ad82:	2b08      	cmp	r3, #8
   1ad84:	f200 80cb 	bhi.w	1af1e <bt_conn_set_state+0x1e2>
   1ad88:	e8df f003 	tbb	[pc, r3]
   1ad8c:	3838123a 	.word	0x3838123a
   1ad90:	2a8c3838 	.word	0x2a8c3838
   1ad94:	38          	.byte	0x38
   1ad95:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   1ad96:	7883      	ldrb	r3, [r0, #2]
   1ad98:	2b08      	cmp	r3, #8
   1ad9a:	d0f1      	beq.n	1ad80 <bt_conn_set_state+0x44>
			bt_conn_ref(conn);
   1ad9c:	f013 fc27 	bl	2e5ee <bt_conn_ref>
   1ada0:	e7ee      	b.n	1ad80 <bt_conn_set_state+0x44>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1ada2:	7883      	ldrb	r3, [r0, #2]
   1ada4:	2b01      	cmp	r3, #1
   1ada6:	d1eb      	bne.n	1ad80 <bt_conn_set_state+0x44>
			k_work_cancel_delayable(&conn->deferred_work);
   1ada8:	3060      	adds	r0, #96	; 0x60
   1adaa:	f00b fd27 	bl	267fc <k_work_cancel_delayable>
   1adae:	e7e7      	b.n	1ad80 <bt_conn_set_state+0x44>
	z_impl_k_sem_give(sem);
   1adb0:	4d67      	ldr	r5, [pc, #412]	; (1af50 <bt_conn_set_state+0x214>)
		tx->pending_no_cb = 0U;
   1adb2:	2600      	movs	r6, #0
	__asm__ volatile(
   1adb4:	f04f 0340 	mov.w	r3, #64	; 0x40
   1adb8:	f3ef 8211 	mrs	r2, BASEPRI
   1adbc:	f383 8812 	msr	BASEPRI_MAX, r3
   1adc0:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   1adc4:	69e3      	ldr	r3, [r4, #28]
   1adc6:	2b00      	cmp	r3, #0
   1adc8:	f000 8089 	beq.w	1aede <bt_conn_set_state+0x1a2>
			conn->pending_no_cb--;
   1adcc:	3b01      	subs	r3, #1
   1adce:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   1add0:	f382 8811 	msr	BASEPRI, r2
   1add4:	f3bf 8f6f 	isb	sy
   1add8:	4628      	mov	r0, r5
   1adda:	f00b f80d 	bl	25df8 <z_impl_k_sem_give>
}
   1adde:	e7e9      	b.n	1adb4 <bt_conn_set_state+0x78>
		if (conn->type == BT_CONN_TYPE_SCO) {
   1ade0:	78a3      	ldrb	r3, [r4, #2]
   1ade2:	2b04      	cmp	r3, #4
   1ade4:	d00a      	beq.n	1adfc <bt_conn_set_state+0xc0>
	z_impl_k_queue_init(queue);
   1ade6:	f104 0038 	add.w	r0, r4, #56	; 0x38
   1adea:	f015 fa80 	bl	302ee <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   1adee:	4859      	ldr	r0, [pc, #356]	; (1af54 <bt_conn_set_state+0x218>)
   1adf0:	2100      	movs	r1, #0
   1adf2:	f00e f939 	bl	29068 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   1adf6:	2300      	movs	r3, #0
	list->tail = NULL;
   1adf8:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   1adfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   1ae00:	78a3      	ldrb	r3, [r4, #2]
   1ae02:	2b04      	cmp	r3, #4
   1ae04:	d104      	bne.n	1ae10 <bt_conn_set_state+0xd4>
			bt_conn_unref(conn);
   1ae06:	4620      	mov	r0, r4
}
   1ae08:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   1ae0c:	f7ff bf60 	b.w	1acd0 <bt_conn_unref>
		switch (old_state) {
   1ae10:	2e08      	cmp	r6, #8
   1ae12:	d8f3      	bhi.n	1adfc <bt_conn_set_state+0xc0>
   1ae14:	a301      	add	r3, pc, #4	; (adr r3, 1ae1c <bt_conn_set_state+0xe0>)
   1ae16:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   1ae1a:	bf00      	nop
   1ae1c:	0001ae89 	.word	0x0001ae89
   1ae20:	0001ae41 	.word	0x0001ae41
   1ae24:	0001ae7b 	.word	0x0001ae7b
   1ae28:	0001ae07 	.word	0x0001ae07
   1ae2c:	0001ae07 	.word	0x0001ae07
   1ae30:	0001ae7b 	.word	0x0001ae7b
   1ae34:	0001ae7b 	.word	0x0001ae7b
   1ae38:	0001ae89 	.word	0x0001ae89
   1ae3c:	0001ae89 	.word	0x0001ae89
			tx_notify(conn);
   1ae40:	4620      	mov	r0, r4
   1ae42:	f013 fba5 	bl	2e590 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   1ae46:	78a3      	ldrb	r3, [r4, #2]
   1ae48:	2b01      	cmp	r3, #1
   1ae4a:	d103      	bne.n	1ae54 <bt_conn_set_state+0x118>
				k_work_cancel_delayable(&conn->deferred_work);
   1ae4c:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1ae50:	f00b fcd4 	bl	267fc <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ae54:	f3bf 8f5b 	dmb	ish
   1ae58:	3404      	adds	r4, #4
   1ae5a:	e854 3f00 	ldrex	r3, [r4]
   1ae5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1ae62:	e844 3200 	strex	r2, r3, [r4]
   1ae66:	2a00      	cmp	r2, #0
   1ae68:	d1f7      	bne.n	1ae5a <bt_conn_set_state+0x11e>
   1ae6a:	f3bf 8f5b 	dmb	ish
   1ae6e:	4839      	ldr	r0, [pc, #228]	; (1af54 <bt_conn_set_state+0x218>)
}
   1ae70:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1ae74:	2100      	movs	r1, #0
   1ae76:	f00e b8f7 	b.w	29068 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   1ae7a:	7a63      	ldrb	r3, [r4, #9]
   1ae7c:	2b00      	cmp	r3, #0
   1ae7e:	d0c2      	beq.n	1ae06 <bt_conn_set_state+0xca>
				notify_connected(conn);
   1ae80:	4620      	mov	r0, r4
   1ae82:	f7ff fc61 	bl	1a748 <notify_connected>
   1ae86:	e7be      	b.n	1ae06 <bt_conn_set_state+0xca>
			BT_WARN("Invalid (%u) old state", state);
   1ae88:	4a2c      	ldr	r2, [pc, #176]	; (1af3c <bt_conn_set_state+0x200>)
   1ae8a:	6813      	ldr	r3, [r2, #0]
   1ae8c:	f013 0f06 	tst.w	r3, #6
   1ae90:	d0b4      	beq.n	1adfc <bt_conn_set_state+0xc0>
   1ae92:	4b2b      	ldr	r3, [pc, #172]	; (1af40 <bt_conn_set_state+0x204>)
   1ae94:	4830      	ldr	r0, [pc, #192]	; (1af58 <bt_conn_set_state+0x21c>)
   1ae96:	1ad2      	subs	r2, r2, r3
   1ae98:	0892      	lsrs	r2, r2, #2
   1ae9a:	0192      	lsls	r2, r2, #6
   1ae9c:	f042 0202 	orr.w	r2, r2, #2
   1aea0:	4629      	mov	r1, r5
   1aea2:	e765      	b.n	1ad70 <bt_conn_set_state+0x34>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1aea4:	78a3      	ldrb	r3, [r4, #2]
   1aea6:	2b01      	cmp	r3, #1
   1aea8:	d1a8      	bne.n	1adfc <bt_conn_set_state+0xc0>
					K_MSEC(10 * bt_dev.create_param.timeout));
   1aeaa:	4b2c      	ldr	r3, [pc, #176]	; (1af5c <bt_conn_set_state+0x220>)
   1aeac:	8a9b      	ldrh	r3, [r3, #20]
   1aeae:	210a      	movs	r1, #10
   1aeb0:	4359      	muls	r1, r3
			return (t * to_hz + off) / from_hz;
   1aeb2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   1aeb6:	f240 36e7 	movw	r6, #999	; 0x3e7
   1aeba:	2700      	movs	r7, #0
   1aebc:	fbc0 6701 	smlal	r6, r7, r0, r1
   1aec0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aec4:	2300      	movs	r3, #0
   1aec6:	4630      	mov	r0, r6
   1aec8:	4639      	mov	r1, r7
   1aeca:	f7e6 f9b9 	bl	1240 <__aeabi_uldivmod>
   1aece:	4602      	mov	r2, r0
   1aed0:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   1aed2:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   1aed6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   1aeda:	f00b bc0d 	b.w	266f8 <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   1aede:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   1aee0:	b128      	cbz	r0, 1aeee <bt_conn_set_state+0x1b2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aee2:	69a1      	ldr	r1, [r4, #24]
   1aee4:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   1aee6:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1aee8:	4288      	cmp	r0, r1
	list->tail = node;
   1aeea:	bf08      	it	eq
   1aeec:	61a3      	streq	r3, [r4, #24]
   1aeee:	f382 8811 	msr	BASEPRI, r2
   1aef2:	f3bf 8f6f 	isb	sy
		if (!node) {
   1aef6:	2800      	cmp	r0, #0
   1aef8:	d080      	beq.n	1adfc <bt_conn_set_state+0xc0>
	__asm__ volatile(
   1aefa:	f04f 0240 	mov.w	r2, #64	; 0x40
   1aefe:	f3ef 8311 	mrs	r3, BASEPRI
   1af02:	f382 8812 	msr	BASEPRI_MAX, r2
   1af06:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   1af0a:	68c2      	ldr	r2, [r0, #12]
   1af0c:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   1af0e:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   1af10:	f383 8811 	msr	BASEPRI, r3
   1af14:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   1af18:	f7ff fc0c 	bl	1a734 <tx_free>
   1af1c:	e75c      	b.n	1add8 <bt_conn_set_state+0x9c>
		BT_WARN("no valid (%u) state was set", state);
   1af1e:	4a07      	ldr	r2, [pc, #28]	; (1af3c <bt_conn_set_state+0x200>)
   1af20:	6813      	ldr	r3, [r2, #0]
   1af22:	f013 0f06 	tst.w	r3, #6
   1af26:	f43f af69 	beq.w	1adfc <bt_conn_set_state+0xc0>
   1af2a:	4b05      	ldr	r3, [pc, #20]	; (1af40 <bt_conn_set_state+0x204>)
   1af2c:	480c      	ldr	r0, [pc, #48]	; (1af60 <bt_conn_set_state+0x224>)
   1af2e:	1ad2      	subs	r2, r2, r3
   1af30:	0892      	lsrs	r2, r2, #2
   1af32:	0192      	lsls	r2, r2, #6
   1af34:	f042 0202 	orr.w	r2, r2, #2
   1af38:	4629      	mov	r1, r5
   1af3a:	e719      	b.n	1ad70 <bt_conn_set_state+0x34>
   1af3c:	200007b0 	.word	0x200007b0
   1af40:	200007a8 	.word	0x200007a8
   1af44:	000352da 	.word	0x000352da
   1af48:	00031734 	.word	0x00031734
   1af4c:	000352d0 	.word	0x000352d0
   1af50:	200003a8 	.word	0x200003a8
   1af54:	20000514 	.word	0x20000514
   1af58:	000352eb 	.word	0x000352eb
   1af5c:	200002a8 	.word	0x200002a8
   1af60:	00035302 	.word	0x00035302

0001af64 <bt_conn_index>:
		index = conn - acl_conns;
   1af64:	4a0c      	ldr	r2, [pc, #48]	; (1af98 <bt_conn_index+0x34>)
{
   1af66:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   1af68:	1a84      	subs	r4, r0, r2
   1af6a:	10e3      	asrs	r3, r4, #3
   1af6c:	4c0b      	ldr	r4, [pc, #44]	; (1af9c <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1af6e:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   1af70:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   1af74:	d00e      	beq.n	1af94 <bt_conn_index+0x30>
   1af76:	490a      	ldr	r1, [pc, #40]	; (1afa0 <bt_conn_index+0x3c>)
   1af78:	4a0a      	ldr	r2, [pc, #40]	; (1afa4 <bt_conn_index+0x40>)
   1af7a:	480b      	ldr	r0, [pc, #44]	; (1afa8 <bt_conn_index+0x44>)
   1af7c:	f240 436c 	movw	r3, #1132	; 0x46c
   1af80:	f011 fb0b 	bl	2c59a <printk>
   1af84:	4809      	ldr	r0, [pc, #36]	; (1afac <bt_conn_index+0x48>)
   1af86:	f011 fb08 	bl	2c59a <printk>
   1af8a:	4806      	ldr	r0, [pc, #24]	; (1afa4 <bt_conn_index+0x40>)
   1af8c:	f240 416c 	movw	r1, #1132	; 0x46c
   1af90:	f011 fd44 	bl	2ca1c <assert_post_action>
}
   1af94:	b2e0      	uxtb	r0, r4
   1af96:	bd10      	pop	{r4, pc}
   1af98:	20001b28 	.word	0x20001b28
   1af9c:	c28f5c29 	.word	0xc28f5c29
   1afa0:	0003531e 	.word	0x0003531e
   1afa4:	000350eb 	.word	0x000350eb
   1afa8:	00032486 	.word	0x00032486
   1afac:	000353e5 	.word	0x000353e5

0001afb0 <bt_conn_create_pdu_timeout>:
{
   1afb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1afb2:	4604      	mov	r4, r0
   1afb4:	460d      	mov	r5, r1
   1afb6:	4617      	mov	r7, r2
   1afb8:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   1afba:	f015 f953 	bl	30264 <k_is_in_isr>
   1afbe:	b158      	cbz	r0, 1afd8 <bt_conn_create_pdu_timeout+0x28>
   1afc0:	4915      	ldr	r1, [pc, #84]	; (1b018 <bt_conn_create_pdu_timeout+0x68>)
   1afc2:	4816      	ldr	r0, [pc, #88]	; (1b01c <bt_conn_create_pdu_timeout+0x6c>)
   1afc4:	4a16      	ldr	r2, [pc, #88]	; (1b020 <bt_conn_create_pdu_timeout+0x70>)
   1afc6:	f44f 6391 	mov.w	r3, #1160	; 0x488
   1afca:	f011 fae6 	bl	2c59a <printk>
   1afce:	4814      	ldr	r0, [pc, #80]	; (1b020 <bt_conn_create_pdu_timeout+0x70>)
   1afd0:	f44f 6191 	mov.w	r1, #1160	; 0x488
   1afd4:	f011 fd22 	bl	2ca1c <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   1afd8:	4812      	ldr	r0, [pc, #72]	; (1b024 <bt_conn_create_pdu_timeout+0x74>)
   1afda:	463a      	mov	r2, r7
   1afdc:	2c00      	cmp	r4, #0
   1afde:	bf18      	it	ne
   1afe0:	4620      	movne	r0, r4
   1afe2:	4633      	mov	r3, r6
   1afe4:	f014 fd22 	bl	2fa2c <net_buf_alloc_fixed>
	if (!buf) {
   1afe8:	4604      	mov	r4, r0
   1afea:	b978      	cbnz	r0, 1b00c <bt_conn_create_pdu_timeout+0x5c>
		BT_WARN("Unable to allocate buffer within timeout");
   1afec:	490e      	ldr	r1, [pc, #56]	; (1b028 <bt_conn_create_pdu_timeout+0x78>)
   1afee:	680b      	ldr	r3, [r1, #0]
   1aff0:	f013 0f06 	tst.w	r3, #6
   1aff4:	d008      	beq.n	1b008 <bt_conn_create_pdu_timeout+0x58>
   1aff6:	4b0d      	ldr	r3, [pc, #52]	; (1b02c <bt_conn_create_pdu_timeout+0x7c>)
   1aff8:	480d      	ldr	r0, [pc, #52]	; (1b030 <bt_conn_create_pdu_timeout+0x80>)
   1affa:	1ac9      	subs	r1, r1, r3
   1affc:	0889      	lsrs	r1, r1, #2
   1affe:	0189      	lsls	r1, r1, #6
   1b000:	f041 0102 	orr.w	r1, r1, #2
   1b004:	f011 fe6b 	bl	2ccde <log_0>
}
   1b008:	4620      	mov	r0, r4
   1b00a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   1b00c:	1d29      	adds	r1, r5, #4
   1b00e:	3008      	adds	r0, #8
   1b010:	f006 f824 	bl	2105c <net_buf_simple_reserve>
	return buf;
   1b014:	e7f8      	b.n	1b008 <bt_conn_create_pdu_timeout+0x58>
   1b016:	bf00      	nop
   1b018:	00033949 	.word	0x00033949
   1b01c:	00032486 	.word	0x00032486
   1b020:	000350eb 	.word	0x000350eb
   1b024:	20000994 	.word	0x20000994
   1b028:	200007b0 	.word	0x200007b0
   1b02c:	200007a8 	.word	0x200007a8
   1b030:	000353ff 	.word	0x000353ff

0001b034 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   1b034:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1b038:	1d03      	adds	r3, r0, #4
{
   1b03a:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1b03c:	4618      	mov	r0, r3
   1b03e:	f013 fa9a 	bl	2e576 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1b042:	0582      	lsls	r2, r0, #22
   1b044:	d519      	bpl.n	1b07a <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   1b046:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   1b04a:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   1b04e:	4291      	cmp	r1, r2
   1b050:	d813      	bhi.n	1b07a <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   1b052:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   1b056:	4291      	cmp	r1, r2
   1b058:	d30f      	bcc.n	1b07a <notify_le_param_updated+0x46>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   1b05a:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   1b05e:	4291      	cmp	r1, r2
   1b060:	d10b      	bne.n	1b07a <notify_le_param_updated+0x46>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b062:	f3bf 8f5b 	dmb	ish
   1b066:	e853 2f00 	ldrex	r2, [r3]
   1b06a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   1b06e:	e843 2100 	strex	r1, r2, [r3]
   1b072:	2900      	cmp	r1, #0
   1b074:	d1f7      	bne.n	1b066 <notify_le_param_updated+0x32>
   1b076:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   1b07a:	4b1b      	ldr	r3, [pc, #108]	; (1b0e8 <notify_le_param_updated+0xb4>)
   1b07c:	681d      	ldr	r5, [r3, #0]
   1b07e:	b9c5      	cbnz	r5, 1b0b2 <notify_le_param_updated+0x7e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b080:	4e1a      	ldr	r6, [pc, #104]	; (1b0ec <notify_le_param_updated+0xb8>)
   1b082:	4d1b      	ldr	r5, [pc, #108]	; (1b0f0 <notify_le_param_updated+0xbc>)
   1b084:	4f1b      	ldr	r7, [pc, #108]	; (1b0f4 <notify_le_param_updated+0xc0>)
   1b086:	46b1      	mov	r9, r6
   1b088:	42b5      	cmp	r5, r6
   1b08a:	d90e      	bls.n	1b0aa <notify_le_param_updated+0x76>
   1b08c:	491a      	ldr	r1, [pc, #104]	; (1b0f8 <notify_le_param_updated+0xc4>)
   1b08e:	481b      	ldr	r0, [pc, #108]	; (1b0fc <notify_le_param_updated+0xc8>)
   1b090:	f240 535f 	movw	r3, #1375	; 0x55f
   1b094:	463a      	mov	r2, r7
   1b096:	f011 fa80 	bl	2c59a <printk>
   1b09a:	4819      	ldr	r0, [pc, #100]	; (1b100 <notify_le_param_updated+0xcc>)
   1b09c:	f011 fa7d 	bl	2c59a <printk>
   1b0a0:	f240 515f 	movw	r1, #1375	; 0x55f
   1b0a4:	4638      	mov	r0, r7
   1b0a6:	f011 fcb9 	bl	2ca1c <assert_post_action>
   1b0aa:	454d      	cmp	r5, r9
   1b0ac:	d30d      	bcc.n	1b0ca <notify_le_param_updated+0x96>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   1b0ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->le_param_updated) {
   1b0b2:	68ee      	ldr	r6, [r5, #12]
   1b0b4:	b13e      	cbz	r6, 1b0c6 <notify_le_param_updated+0x92>
			cb->le_param_updated(conn, conn->le.interval,
   1b0b6:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1b0ba:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1b0be:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1b0c2:	4620      	mov	r0, r4
   1b0c4:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   1b0c6:	692d      	ldr	r5, [r5, #16]
   1b0c8:	e7d9      	b.n	1b07e <notify_le_param_updated+0x4a>
		if (cb->le_param_updated) {
   1b0ca:	f8d5 800c 	ldr.w	r8, [r5, #12]
   1b0ce:	f1b8 0f00 	cmp.w	r8, #0
   1b0d2:	d007      	beq.n	1b0e4 <notify_le_param_updated+0xb0>
			cb->le_param_updated(conn, conn->le.interval,
   1b0d4:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   1b0d8:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1b0dc:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   1b0e0:	4620      	mov	r0, r4
   1b0e2:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b0e4:	3514      	adds	r5, #20
   1b0e6:	e7cf      	b.n	1b088 <notify_le_param_updated+0x54>
   1b0e8:	20002cf4 	.word	0x20002cf4
   1b0ec:	00030bc4 	.word	0x00030bc4
   1b0f0:	00030bc4 	.word	0x00030bc4
   1b0f4:	000350eb 	.word	0x000350eb
   1b0f8:	0003511b 	.word	0x0003511b
   1b0fc:	00032486 	.word	0x00032486
   1b100:	00035136 	.word	0x00035136

0001b104 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   1b104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b108:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   1b10a:	4608      	mov	r0, r1
{
   1b10c:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   1b10e:	f013 f93c 	bl	2e38a <bt_le_conn_params_valid>
   1b112:	4605      	mov	r5, r0
   1b114:	b918      	cbnz	r0, 1b11e <le_param_req+0x1a>
		return false;
   1b116:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   1b118:	4628      	mov	r0, r5
   1b11a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1b11e:	4b1d      	ldr	r3, [pc, #116]	; (1b194 <le_param_req+0x90>)
   1b120:	681e      	ldr	r6, [r3, #0]
   1b122:	b9e6      	cbnz	r6, 1b15e <le_param_req+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b124:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1b1a8 <le_param_req+0xa4>
   1b128:	4e1b      	ldr	r6, [pc, #108]	; (1b198 <le_param_req+0x94>)
   1b12a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1b1ac <le_param_req+0xa8>
   1b12e:	46c2      	mov	sl, r8
   1b130:	4546      	cmp	r6, r8
   1b132:	d90e      	bls.n	1b152 <le_param_req+0x4e>
   1b134:	4919      	ldr	r1, [pc, #100]	; (1b19c <le_param_req+0x98>)
   1b136:	481a      	ldr	r0, [pc, #104]	; (1b1a0 <le_param_req+0x9c>)
   1b138:	f240 53a7 	movw	r3, #1447	; 0x5a7
   1b13c:	464a      	mov	r2, r9
   1b13e:	f011 fa2c 	bl	2c59a <printk>
   1b142:	4818      	ldr	r0, [pc, #96]	; (1b1a4 <le_param_req+0xa0>)
   1b144:	f011 fa29 	bl	2c59a <printk>
   1b148:	f240 51a7 	movw	r1, #1447	; 0x5a7
   1b14c:	4648      	mov	r0, r9
   1b14e:	f011 fc65 	bl	2ca1c <assert_post_action>
   1b152:	4556      	cmp	r6, sl
   1b154:	d2e0      	bcs.n	1b118 <le_param_req+0x14>
		if (!cb->le_param_req) {
   1b156:	68b3      	ldr	r3, [r6, #8]
   1b158:	b983      	cbnz	r3, 1b17c <le_param_req+0x78>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b15a:	3614      	adds	r6, #20
   1b15c:	e7e8      	b.n	1b130 <le_param_req+0x2c>
		if (!cb->le_param_req) {
   1b15e:	68b3      	ldr	r3, [r6, #8]
   1b160:	b90b      	cbnz	r3, 1b166 <le_param_req+0x62>
	for (cb = callback_list; cb; cb = cb->_next) {
   1b162:	6936      	ldr	r6, [r6, #16]
   1b164:	e7dd      	b.n	1b122 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1b166:	4621      	mov	r1, r4
   1b168:	4638      	mov	r0, r7
   1b16a:	4798      	blx	r3
   1b16c:	2800      	cmp	r0, #0
   1b16e:	d0d2      	beq.n	1b116 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1b170:	4620      	mov	r0, r4
   1b172:	f013 f90a 	bl	2e38a <bt_le_conn_params_valid>
   1b176:	2800      	cmp	r0, #0
   1b178:	d1f3      	bne.n	1b162 <le_param_req+0x5e>
   1b17a:	e7cc      	b.n	1b116 <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1b17c:	4621      	mov	r1, r4
   1b17e:	4638      	mov	r0, r7
   1b180:	4798      	blx	r3
   1b182:	2800      	cmp	r0, #0
   1b184:	d0c7      	beq.n	1b116 <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1b186:	4620      	mov	r0, r4
   1b188:	f013 f8ff 	bl	2e38a <bt_le_conn_params_valid>
   1b18c:	2800      	cmp	r0, #0
   1b18e:	d1e4      	bne.n	1b15a <le_param_req+0x56>
   1b190:	e7c1      	b.n	1b116 <le_param_req+0x12>
   1b192:	bf00      	nop
   1b194:	20002cf4 	.word	0x20002cf4
   1b198:	00030bc4 	.word	0x00030bc4
   1b19c:	0003511b 	.word	0x0003511b
   1b1a0:	00032486 	.word	0x00032486
   1b1a4:	00035136 	.word	0x00035136
   1b1a8:	00030bc4 	.word	0x00030bc4
   1b1ac:	000350eb 	.word	0x000350eb

0001b1b0 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1b1b0:	4b02      	ldr	r3, [pc, #8]	; (1b1bc <bt_conn_cb_register+0xc>)
   1b1b2:	681a      	ldr	r2, [r3, #0]
   1b1b4:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1b1b6:	6018      	str	r0, [r3, #0]
}
   1b1b8:	4770      	bx	lr
   1b1ba:	bf00      	nop
   1b1bc:	20002cf4 	.word	0x20002cf4

0001b1c0 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1b1c0:	b538      	push	{r3, r4, r5, lr}
   1b1c2:	4605      	mov	r5, r0
   1b1c4:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1b1c6:	4809      	ldr	r0, [pc, #36]	; (1b1ec <bt_conn_add_le+0x2c>)
   1b1c8:	2101      	movs	r1, #1
   1b1ca:	f7ff fbb7 	bl	1a93c <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1b1ce:	4602      	mov	r2, r0
   1b1d0:	b148      	cbz	r0, 1b1e6 <bt_conn_add_le+0x26>
		return NULL;
	}

	conn->id = id;
   1b1d2:	7205      	strb	r5, [r0, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
   1b1d4:	4621      	mov	r1, r4
   1b1d6:	3090      	adds	r0, #144	; 0x90
   1b1d8:	f013 f9d3 	bl	2e582 <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1b1dc:	2301      	movs	r3, #1
   1b1de:	7093      	strb	r3, [r2, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1b1e0:	4b03      	ldr	r3, [pc, #12]	; (1b1f0 <bt_conn_add_le+0x30>)
   1b1e2:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1b1e6:	4610      	mov	r0, r2
   1b1e8:	bd38      	pop	{r3, r4, r5, pc}
   1b1ea:	bf00      	nop
   1b1ec:	20001b28 	.word	0x20001b28
   1b1f0:	00280018 	.word	0x00280018

0001b1f4 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1b1f4:	b570      	push	{r4, r5, r6, lr}
   1b1f6:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b1f8:	480c      	ldr	r0, [pc, #48]	; (1b22c <bt_conn_lookup_addr_le+0x38>)
{
   1b1fa:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b1fc:	f013 f9f7 	bl	2e5ee <bt_conn_ref>

		if (!conn) {
   1b200:	4604      	mov	r4, r0
   1b202:	b128      	cbz	r0, 1b210 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1b204:	7883      	ldrb	r3, [r0, #2]
   1b206:	2b01      	cmp	r3, #1
   1b208:	d004      	beq.n	1b214 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   1b20a:	f7ff fd61 	bl	1acd0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1b20e:	2400      	movs	r4, #0
}
   1b210:	4620      	mov	r0, r4
   1b212:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b214:	4629      	mov	r1, r5
   1b216:	4632      	mov	r2, r6
   1b218:	f013 fa31 	bl	2e67e <bt_conn_is_peer_addr_le>
   1b21c:	4605      	mov	r5, r0
   1b21e:	2800      	cmp	r0, #0
   1b220:	d1f6      	bne.n	1b210 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1b222:	4620      	mov	r0, r4
   1b224:	f7ff fd54 	bl	1acd0 <bt_conn_unref>
	return NULL;
   1b228:	462c      	mov	r4, r5
			continue;
   1b22a:	e7f1      	b.n	1b210 <bt_conn_lookup_addr_le+0x1c>
   1b22c:	20001b28 	.word	0x20001b28

0001b230 <bt_conn_exists_le>:
{
   1b230:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1b232:	f7ff ffdf 	bl	1b1f4 <bt_conn_lookup_addr_le>
	if (conn) {
   1b236:	4604      	mov	r4, r0
   1b238:	b1c0      	cbz	r0, 1b26c <bt_conn_exists_le+0x3c>
		BT_WARN("Found valid connection in %s state",
   1b23a:	4b0d      	ldr	r3, [pc, #52]	; (1b270 <bt_conn_exists_le+0x40>)
   1b23c:	681a      	ldr	r2, [r3, #0]
   1b23e:	f012 0f06 	tst.w	r2, #6
   1b242:	d00f      	beq.n	1b264 <bt_conn_exists_le+0x34>
   1b244:	4a0b      	ldr	r2, [pc, #44]	; (1b274 <bt_conn_exists_le+0x44>)
   1b246:	1a9a      	subs	r2, r3, r2
   1b248:	7a83      	ldrb	r3, [r0, #10]
   1b24a:	480b      	ldr	r0, [pc, #44]	; (1b278 <bt_conn_exists_le+0x48>)
   1b24c:	2b08      	cmp	r3, #8
   1b24e:	bf96      	itet	ls
   1b250:	490a      	ldrls	r1, [pc, #40]	; (1b27c <bt_conn_exists_le+0x4c>)
   1b252:	490b      	ldrhi	r1, [pc, #44]	; (1b280 <bt_conn_exists_le+0x50>)
   1b254:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   1b258:	0892      	lsrs	r2, r2, #2
   1b25a:	0192      	lsls	r2, r2, #6
   1b25c:	f042 0202 	orr.w	r2, r2, #2
   1b260:	f011 fd4a 	bl	2ccf8 <log_1>
		bt_conn_unref(conn);
   1b264:	4620      	mov	r0, r4
   1b266:	f7ff fd33 	bl	1acd0 <bt_conn_unref>
		return true;
   1b26a:	2001      	movs	r0, #1
}
   1b26c:	bd10      	pop	{r4, pc}
   1b26e:	bf00      	nop
   1b270:	200007b0 	.word	0x200007b0
   1b274:	200007a8 	.word	0x200007a8
   1b278:	00035428 	.word	0x00035428
   1b27c:	00031734 	.word	0x00031734
   1b280:	000352d0 	.word	0x000352d0

0001b284 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b286:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b288:	480e      	ldr	r0, [pc, #56]	; (1b2c4 <bt_conn_lookup_state_le+0x40>)
{
   1b28a:	460e      	mov	r6, r1
   1b28c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b28e:	f013 f9ae 	bl	2e5ee <bt_conn_ref>

		if (!conn) {
   1b292:	4604      	mov	r4, r0
   1b294:	b1a0      	cbz	r0, 1b2c0 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1b296:	7883      	ldrb	r3, [r0, #2]
   1b298:	2b01      	cmp	r3, #1
   1b29a:	d003      	beq.n	1b2a4 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1b29c:	f7ff fd18 	bl	1acd0 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1b2a0:	2400      	movs	r4, #0
			continue;
   1b2a2:	e00d      	b.n	1b2c0 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1b2a4:	b136      	cbz	r6, 1b2b4 <bt_conn_lookup_state_le+0x30>
   1b2a6:	4632      	mov	r2, r6
   1b2a8:	4629      	mov	r1, r5
   1b2aa:	f013 f9e8 	bl	2e67e <bt_conn_is_peer_addr_le>
   1b2ae:	b908      	cbnz	r0, 1b2b4 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1b2b0:	4620      	mov	r0, r4
   1b2b2:	e7f3      	b.n	1b29c <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1b2b4:	7aa3      	ldrb	r3, [r4, #10]
   1b2b6:	42bb      	cmp	r3, r7
   1b2b8:	d1fa      	bne.n	1b2b0 <bt_conn_lookup_state_le+0x2c>
   1b2ba:	7a23      	ldrb	r3, [r4, #8]
   1b2bc:	42ab      	cmp	r3, r5
   1b2be:	d1f7      	bne.n	1b2b0 <bt_conn_lookup_state_le+0x2c>
}
   1b2c0:	4620      	mov	r0, r4
   1b2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b2c4:	20001b28 	.word	0x20001b28

0001b2c8 <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   1b2c8:	b510      	push	{r4, lr}
	info->type = conn->type;
   1b2ca:	7882      	ldrb	r2, [r0, #2]
   1b2cc:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   1b2ce:	78c4      	ldrb	r4, [r0, #3]
   1b2d0:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   1b2d2:	7a03      	ldrb	r3, [r0, #8]
   1b2d4:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   1b2d6:	2a01      	cmp	r2, #1
   1b2d8:	d11c      	bne.n	1b314 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   1b2da:	f100 0290 	add.w	r2, r0, #144	; 0x90
   1b2de:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   1b2e0:	4a0e      	ldr	r2, [pc, #56]	; (1b31c <bt_conn_get_info+0x54>)
   1b2e2:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1b2e6:	4413      	add	r3, r2
   1b2e8:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1b2ea:	f100 029e 	add.w	r2, r0, #158	; 0x9e
   1b2ee:	f100 0397 	add.w	r3, r0, #151	; 0x97
   1b2f2:	b964      	cbnz	r4, 1b30e <bt_conn_get_info+0x46>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   1b2f4:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   1b2f8:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   1b2fc:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   1b2fe:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   1b302:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   1b304:	f8b0 30ae 	ldrh.w	r3, [r0, #174]	; 0xae
   1b308:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   1b30a:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   1b30c:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   1b30e:	e9c1 2303 	strd	r2, r3, [r1, #12]
   1b312:	e7f1      	b.n	1b2f8 <bt_conn_get_info+0x30>
	return -EINVAL;
   1b314:	f06f 0015 	mvn.w	r0, #21
   1b318:	e7f8      	b.n	1b30c <bt_conn_get_info+0x44>
   1b31a:	bf00      	nop
   1b31c:	200002a8 	.word	0x200002a8

0001b320 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   1b320:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1b324:	4604      	mov	r4, r0
   1b326:	4843      	ldr	r0, [pc, #268]	; (1b434 <bt_conn_le_create+0x114>)
   1b328:	460e      	mov	r6, r1
   1b32a:	4615      	mov	r5, r2
   1b32c:	461f      	mov	r7, r3
   1b32e:	f013 f922 	bl	2e576 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b332:	0781      	lsls	r1, r0, #30
   1b334:	d405      	bmi.n	1b342 <bt_conn_le_create+0x22>
		return -EAGAIN;
   1b336:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   1b33a:	4628      	mov	r0, r5
   1b33c:	b002      	add	sp, #8
   1b33e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   1b342:	4610      	mov	r0, r2
   1b344:	f013 f821 	bl	2e38a <bt_le_conn_params_valid>
   1b348:	b910      	cbnz	r0, 1b350 <bt_conn_le_create+0x30>
		return -EINVAL;
   1b34a:	f06f 0515 	mvn.w	r5, #21
   1b34e:	e7f4      	b.n	1b33a <bt_conn_le_create+0x1a>
   1b350:	4838      	ldr	r0, [pc, #224]	; (1b434 <bt_conn_le_create+0x114>)
   1b352:	f013 f910 	bl	2e576 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1b356:	0642      	lsls	r2, r0, #25
   1b358:	d4ed      	bmi.n	1b336 <bt_conn_le_create+0x16>
   1b35a:	4836      	ldr	r0, [pc, #216]	; (1b434 <bt_conn_le_create+0x114>)
   1b35c:	f013 f90b 	bl	2e576 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1b360:	0503      	lsls	r3, r0, #20
   1b362:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   1b366:	d45e      	bmi.n	1b426 <bt_conn_le_create+0x106>
	if (!bt_id_scan_random_addr_check()) {
   1b368:	f013 f8ed 	bl	2e546 <bt_id_scan_random_addr_check>
   1b36c:	2800      	cmp	r0, #0
   1b36e:	d0ec      	beq.n	1b34a <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   1b370:	4621      	mov	r1, r4
   1b372:	4640      	mov	r0, r8
   1b374:	f7ff ff5c 	bl	1b230 <bt_conn_exists_le>
   1b378:	2800      	cmp	r0, #0
   1b37a:	d1e6      	bne.n	1b34a <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   1b37c:	7823      	ldrb	r3, [r4, #0]
   1b37e:	3b02      	subs	r3, #2
   1b380:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&dst, peer);
   1b382:	4621      	mov	r1, r4
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   1b384:	d846      	bhi.n	1b414 <bt_conn_le_create+0xf4>
		bt_addr_le_copy(&dst, peer);
   1b386:	4668      	mov	r0, sp
   1b388:	f013 f8fb 	bl	2e582 <bt_addr_le_copy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   1b38c:	f89d 3000 	ldrb.w	r3, [sp]
   1b390:	3b02      	subs	r3, #2
   1b392:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   1b396:	4669      	mov	r1, sp
   1b398:	2000      	movs	r0, #0
   1b39a:	f7ff ff11 	bl	1b1c0 <bt_conn_add_le>
	if (!conn) {
   1b39e:	4604      	mov	r4, r0
   1b3a0:	2800      	cmp	r0, #0
   1b3a2:	d043      	beq.n	1b42c <bt_conn_le_create+0x10c>
	conn->le.interval_min = param->interval_min;
   1b3a4:	882b      	ldrh	r3, [r5, #0]
   1b3a6:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   1b3aa:	886b      	ldrh	r3, [r5, #2]
   1b3ac:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   1b3b0:	88ab      	ldrh	r3, [r5, #4]
   1b3b2:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   1b3b6:	88eb      	ldrh	r3, [r5, #6]
   1b3b8:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   1b3bc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1b3c0:	4d1d      	ldr	r5, [pc, #116]	; (1b438 <bt_conn_le_create+0x118>)
   1b3c2:	f105 0c08 	add.w	ip, r5, #8
   1b3c6:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   1b3ca:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   1b3cc:	2b00      	cmp	r3, #0
   1b3ce:	bf08      	it	eq
   1b3d0:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   1b3d4:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   1b3d6:	8a2b      	ldrh	r3, [r5, #16]
   1b3d8:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
   1b3da:	b903      	cbnz	r3, 1b3de <bt_conn_le_create+0xbe>
   1b3dc:	89ab      	ldrh	r3, [r5, #12]
   1b3de:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
   1b3e0:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   1b3e2:	b903      	cbnz	r3, 1b3e6 <bt_conn_le_create+0xc6>
   1b3e4:	89d3      	ldrh	r3, [r2, #14]
   1b3e6:	8253      	strh	r3, [r2, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1b3e8:	2106      	movs	r1, #6
   1b3ea:	4620      	mov	r0, r4
   1b3ec:	f7ff fca6 	bl	1ad3c <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   1b3f0:	4620      	mov	r0, r4
   1b3f2:	f012 ffad 	bl	2e350 <bt_le_create_conn>
	if (err) {
   1b3f6:	4605      	mov	r5, r0
   1b3f8:	b198      	cbz	r0, 1b422 <bt_conn_le_create+0x102>
		conn->err = 0;
   1b3fa:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b3fc:	4631      	mov	r1, r6
   1b3fe:	4620      	mov	r0, r4
		conn->err = 0;
   1b400:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b402:	f7ff fc9b 	bl	1ad3c <bt_conn_set_state>
		bt_conn_unref(conn);
   1b406:	4620      	mov	r0, r4
   1b408:	f7ff fc62 	bl	1acd0 <bt_conn_unref>
		bt_le_scan_update(false);
   1b40c:	4630      	mov	r0, r6
   1b40e:	f7fe ffab 	bl	1a368 <bt_le_scan_update>
		return err;
   1b412:	e792      	b.n	1b33a <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   1b414:	f013 f883 	bl	2e51e <bt_lookup_id_addr>
   1b418:	4601      	mov	r1, r0
   1b41a:	4668      	mov	r0, sp
   1b41c:	f013 f8b1 	bl	2e582 <bt_addr_le_copy>
   1b420:	e7b9      	b.n	1b396 <bt_conn_le_create+0x76>
	*ret_conn = conn;
   1b422:	603c      	str	r4, [r7, #0]
	return 0;
   1b424:	e789      	b.n	1b33a <bt_conn_le_create+0x1a>
		return -EALREADY;
   1b426:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1b42a:	e786      	b.n	1b33a <bt_conn_le_create+0x1a>
		return -ENOMEM;
   1b42c:	f06f 050b 	mvn.w	r5, #11
   1b430:	e783      	b.n	1b33a <bt_conn_le_create+0x1a>
   1b432:	bf00      	nop
   1b434:	20000374 	.word	0x20000374
   1b438:	200002a8 	.word	0x200002a8

0001b43c <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   1b43c:	b570      	push	{r4, r5, r6, lr}
   1b43e:	4606      	mov	r6, r0
   1b440:	4838      	ldr	r0, [pc, #224]	; (1b524 <bt_le_set_auto_conn+0xe8>)
   1b442:	460d      	mov	r5, r1
   1b444:	f013 f897 	bl	2e576 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1b448:	0780      	lsls	r0, r0, #30
   1b44a:	d564      	bpl.n	1b516 <bt_le_set_auto_conn+0xda>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   1b44c:	b929      	cbnz	r1, 1b45a <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   1b44e:	f013 f87a 	bl	2e546 <bt_id_scan_random_addr_check>
   1b452:	b940      	cbnz	r0, 1b466 <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   1b454:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   1b458:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   1b45a:	4608      	mov	r0, r1
   1b45c:	f012 ff95 	bl	2e38a <bt_le_conn_params_valid>
   1b460:	2800      	cmp	r0, #0
   1b462:	d1f4      	bne.n	1b44e <bt_le_set_auto_conn+0x12>
   1b464:	e7f6      	b.n	1b454 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   1b466:	4631      	mov	r1, r6
   1b468:	2000      	movs	r0, #0
   1b46a:	f7ff fec3 	bl	1b1f4 <bt_conn_lookup_addr_le>
	if (!conn) {
   1b46e:	4604      	mov	r4, r0
   1b470:	b928      	cbnz	r0, 1b47e <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   1b472:	4631      	mov	r1, r6
   1b474:	f7ff fea4 	bl	1b1c0 <bt_conn_add_le>
		if (!conn) {
   1b478:	4604      	mov	r4, r0
   1b47a:	2800      	cmp	r0, #0
   1b47c:	d04e      	beq.n	1b51c <bt_le_set_auto_conn+0xe0>
	if (param) {
   1b47e:	1d23      	adds	r3, r4, #4
   1b480:	b385      	cbz	r5, 1b4e4 <bt_le_set_auto_conn+0xa8>
	conn->le.interval_min = param->interval_min;
   1b482:	882a      	ldrh	r2, [r5, #0]
   1b484:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   1b488:	886a      	ldrh	r2, [r5, #2]
   1b48a:	f8a4 20aa 	strh.w	r2, [r4, #170]	; 0xaa
	conn->le.latency = param->latency;
   1b48e:	88aa      	ldrh	r2, [r5, #4]
   1b490:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
	conn->le.timeout = param->timeout;
   1b494:	88ea      	ldrh	r2, [r5, #6]
   1b496:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b49a:	f3bf 8f5b 	dmb	ish
   1b49e:	e853 2f00 	ldrex	r2, [r3]
   1b4a2:	f042 0101 	orr.w	r1, r2, #1
   1b4a6:	e843 1000 	strex	r0, r1, [r3]
   1b4aa:	2800      	cmp	r0, #0
   1b4ac:	d1f7      	bne.n	1b49e <bt_le_set_auto_conn+0x62>
   1b4ae:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
   1b4b2:	07d1      	lsls	r1, r2, #31
   1b4b4:	d402      	bmi.n	1b4bc <bt_le_set_auto_conn+0x80>
			bt_conn_ref(conn);
   1b4b6:	4620      	mov	r0, r4
   1b4b8:	f013 f899 	bl	2e5ee <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b4bc:	7aa3      	ldrb	r3, [r4, #10]
   1b4be:	b963      	cbnz	r3, 1b4da <bt_le_set_auto_conn+0x9e>
   1b4c0:	4818      	ldr	r0, [pc, #96]	; (1b524 <bt_le_set_auto_conn+0xe8>)
   1b4c2:	f013 f858 	bl	2e576 <atomic_get>
   1b4c6:	0783      	lsls	r3, r0, #30
   1b4c8:	d507      	bpl.n	1b4da <bt_le_set_auto_conn+0x9e>
		if (param) {
   1b4ca:	b11d      	cbz	r5, 1b4d4 <bt_le_set_auto_conn+0x98>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1b4cc:	2102      	movs	r1, #2
   1b4ce:	4620      	mov	r0, r4
   1b4d0:	f7ff fc34 	bl	1ad3c <bt_conn_set_state>
		bt_le_scan_update(false);
   1b4d4:	2000      	movs	r0, #0
   1b4d6:	f7fe ff47 	bl	1a368 <bt_le_scan_update>
	bt_conn_unref(conn);
   1b4da:	4620      	mov	r0, r4
   1b4dc:	f7ff fbf8 	bl	1acd0 <bt_conn_unref>
	return 0;
   1b4e0:	2000      	movs	r0, #0
   1b4e2:	e7b9      	b.n	1b458 <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b4e4:	f3bf 8f5b 	dmb	ish
   1b4e8:	e853 2f00 	ldrex	r2, [r3]
   1b4ec:	f022 0101 	bic.w	r1, r2, #1
   1b4f0:	e843 1000 	strex	r0, r1, [r3]
   1b4f4:	2800      	cmp	r0, #0
   1b4f6:	d1f7      	bne.n	1b4e8 <bt_le_set_auto_conn+0xac>
   1b4f8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
   1b4fc:	07d2      	lsls	r2, r2, #31
   1b4fe:	d5dd      	bpl.n	1b4bc <bt_le_set_auto_conn+0x80>
			bt_conn_unref(conn);
   1b500:	4620      	mov	r0, r4
   1b502:	f7ff fbe5 	bl	1acd0 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   1b506:	7aa3      	ldrb	r3, [r4, #10]
   1b508:	2b02      	cmp	r3, #2
   1b50a:	d1d7      	bne.n	1b4bc <bt_le_set_auto_conn+0x80>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1b50c:	4629      	mov	r1, r5
   1b50e:	4620      	mov	r0, r4
   1b510:	f7ff fc14 	bl	1ad3c <bt_conn_set_state>
   1b514:	e7d2      	b.n	1b4bc <bt_le_set_auto_conn+0x80>
		return -EAGAIN;
   1b516:	f06f 000a 	mvn.w	r0, #10
   1b51a:	e79d      	b.n	1b458 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   1b51c:	f06f 000b 	mvn.w	r0, #11
   1b520:	e79a      	b.n	1b458 <bt_le_set_auto_conn+0x1c>
   1b522:	bf00      	nop
   1b524:	20000374 	.word	0x20000374

0001b528 <send_conn_le_param_update>:
{
   1b528:	b538      	push	{r3, r4, r5, lr}
   1b52a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1b52c:	4608      	mov	r0, r1
{
   1b52e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1b530:	f012 ff2b 	bl	2e38a <bt_le_conn_params_valid>
   1b534:	b338      	cbz	r0, 1b586 <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b536:	4b15      	ldr	r3, [pc, #84]	; (1b58c <send_conn_le_param_update+0x64>)
   1b538:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1b53c:	0799      	lsls	r1, r3, #30
   1b53e:	d407      	bmi.n	1b550 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1b540:	78e3      	ldrb	r3, [r4, #3]
   1b542:	b173      	cbz	r3, 1b562 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   1b544:	4629      	mov	r1, r5
   1b546:	4620      	mov	r0, r4
}
   1b548:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1b54c:	f000 bb62 	b.w	1bc14 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1b550:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   1b554:	079a      	lsls	r2, r3, #30
   1b556:	d5f3      	bpl.n	1b540 <send_conn_le_param_update+0x18>
   1b558:	1d20      	adds	r0, r4, #4
   1b55a:	f013 f80c 	bl	2e576 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1b55e:	0543      	lsls	r3, r0, #21
   1b560:	d4ee      	bmi.n	1b540 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1b562:	4629      	mov	r1, r5
   1b564:	4620      	mov	r0, r4
   1b566:	f013 f8e3 	bl	2e730 <bt_conn_le_conn_update>
		if (rc == 0) {
   1b56a:	b958      	cbnz	r0, 1b584 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   1b56c:	882b      	ldrh	r3, [r5, #0]
   1b56e:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1b572:	886b      	ldrh	r3, [r5, #2]
   1b574:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   1b578:	88ab      	ldrh	r3, [r5, #4]
   1b57a:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1b57e:	88eb      	ldrh	r3, [r5, #6]
   1b580:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   1b584:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1b586:	f06f 0015 	mvn.w	r0, #21
   1b58a:	e7fb      	b.n	1b584 <send_conn_le_param_update+0x5c>
   1b58c:	200002a8 	.word	0x200002a8

0001b590 <deferred_work>:
{
   1b590:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1b594:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   1b598:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   1b59a:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1b59e:	2b00      	cmp	r3, #0
   1b5a0:	d133      	bne.n	1b60a <deferred_work+0x7a>
		bt_l2cap_disconnected(conn);
   1b5a2:	4630      	mov	r0, r6
   1b5a4:	f013 f94f 	bl	2e846 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1b5a8:	4b2f      	ldr	r3, [pc, #188]	; (1b668 <deferred_work+0xd8>)
   1b5aa:	681d      	ldr	r5, [r3, #0]
   1b5ac:	b9ed      	cbnz	r5, 1b5ea <deferred_work+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b5ae:	4f2f      	ldr	r7, [pc, #188]	; (1b66c <deferred_work+0xdc>)
   1b5b0:	4d2f      	ldr	r5, [pc, #188]	; (1b670 <deferred_work+0xe0>)
   1b5b2:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1b680 <deferred_work+0xf0>
   1b5b6:	46b9      	mov	r9, r7
   1b5b8:	42bd      	cmp	r5, r7
   1b5ba:	d90e      	bls.n	1b5da <deferred_work+0x4a>
   1b5bc:	492d      	ldr	r1, [pc, #180]	; (1b674 <deferred_work+0xe4>)
   1b5be:	482e      	ldr	r0, [pc, #184]	; (1b678 <deferred_work+0xe8>)
   1b5c0:	f240 5326 	movw	r3, #1318	; 0x526
   1b5c4:	4642      	mov	r2, r8
   1b5c6:	f010 ffe8 	bl	2c59a <printk>
   1b5ca:	482c      	ldr	r0, [pc, #176]	; (1b67c <deferred_work+0xec>)
   1b5cc:	f010 ffe5 	bl	2c59a <printk>
   1b5d0:	f240 5126 	movw	r1, #1318	; 0x526
   1b5d4:	4640      	mov	r0, r8
   1b5d6:	f011 fa21 	bl	2ca1c <assert_post_action>
   1b5da:	454d      	cmp	r5, r9
   1b5dc:	d30d      	bcc.n	1b5fa <deferred_work+0x6a>
		bt_conn_unref(conn);
   1b5de:	4630      	mov	r0, r6
   1b5e0:	f7ff fb76 	bl	1acd0 <bt_conn_unref>
}
   1b5e4:	b003      	add	sp, #12
   1b5e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (cb->disconnected) {
   1b5ea:	686b      	ldr	r3, [r5, #4]
   1b5ec:	b11b      	cbz	r3, 1b5f6 <deferred_work+0x66>
			cb->disconnected(conn, conn->err);
   1b5ee:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   1b5f2:	4630      	mov	r0, r6
   1b5f4:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1b5f6:	692d      	ldr	r5, [r5, #16]
   1b5f8:	e7d8      	b.n	1b5ac <deferred_work+0x1c>
		if (cb->disconnected) {
   1b5fa:	686b      	ldr	r3, [r5, #4]
   1b5fc:	b11b      	cbz	r3, 1b606 <deferred_work+0x76>
			cb->disconnected(conn, conn->err);
   1b5fe:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   1b602:	4630      	mov	r0, r6
   1b604:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1b606:	3514      	adds	r5, #20
   1b608:	e7d6      	b.n	1b5b8 <deferred_work+0x28>
	if (conn->type != BT_CONN_TYPE_LE) {
   1b60a:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1b60e:	2b01      	cmp	r3, #1
   1b610:	d1e8      	bne.n	1b5e4 <deferred_work+0x54>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1b612:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   1b616:	b913      	cbnz	r3, 1b61e <deferred_work+0x8e>
		bt_le_create_conn_cancel();
   1b618:	f7fd fd78 	bl	1910c <bt_le_create_conn_cancel>
		return;
   1b61c:	e7e2      	b.n	1b5e4 <deferred_work+0x54>
	if (atomic_test_and_clear_bit(conn->flags,
   1b61e:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   1b622:	f3bf 8f5b 	dmb	ish
   1b626:	e855 3f00 	ldrex	r3, [r5]
   1b62a:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1b62e:	e845 2100 	strex	r1, r2, [r5]
   1b632:	2900      	cmp	r1, #0
   1b634:	d1f7      	bne.n	1b626 <deferred_work+0x96>
   1b636:	f3bf 8f5b 	dmb	ish
   1b63a:	059b      	lsls	r3, r3, #22
   1b63c:	d507      	bpl.n	1b64e <deferred_work+0xbe>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1b63e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1b640:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
   1b642:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1b644:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1b646:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   1b648:	4630      	mov	r0, r6
   1b64a:	f7ff ff6d 	bl	1b528 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b64e:	f3bf 8f5b 	dmb	ish
   1b652:	e855 3f00 	ldrex	r3, [r5]
   1b656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1b65a:	e845 3200 	strex	r2, r3, [r5]
   1b65e:	2a00      	cmp	r2, #0
   1b660:	d1f7      	bne.n	1b652 <deferred_work+0xc2>
   1b662:	f3bf 8f5b 	dmb	ish
   1b666:	e7bd      	b.n	1b5e4 <deferred_work+0x54>
   1b668:	20002cf4 	.word	0x20002cf4
   1b66c:	00030bc4 	.word	0x00030bc4
   1b670:	00030bc4 	.word	0x00030bc4
   1b674:	0003511b 	.word	0x0003511b
   1b678:	00032486 	.word	0x00032486
   1b67c:	00035136 	.word	0x00035136
   1b680:	000350eb 	.word	0x000350eb

0001b684 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1b684:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1b686:	4801      	ldr	r0, [pc, #4]	; (1b68c <bt_conn_create_frag_timeout+0x8>)
   1b688:	f7ff bc92 	b.w	1afb0 <bt_conn_create_pdu_timeout>
   1b68c:	200009fc 	.word	0x200009fc

0001b690 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1b690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b694:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1b696:	f04f 33ff 	mov.w	r3, #4294967295
   1b69a:	f04f 32ff 	mov.w	r2, #4294967295
   1b69e:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1b6a0:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1b6a2:	f7ff ffef 	bl	1b684 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1b6a6:	7833      	ldrb	r3, [r6, #0]
   1b6a8:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1b6aa:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1b6ac:	f04f 0600 	mov.w	r6, #0
   1b6b0:	d005      	beq.n	1b6be <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   1b6b2:	f005 fd31 	bl	21118 <net_buf_unref>
		return NULL;
   1b6b6:	4635      	mov	r5, r6
}
   1b6b8:	4628      	mov	r0, r5
   1b6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1b6be:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   1b6c0:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   1b6c4:	4e0c      	ldr	r6, [pc, #48]	; (1b6f8 <create_frag.isra.0+0x68>)
   1b6c6:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1b6c8:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   1b6cc:	f014 f9cd 	bl	2fa6a <net_buf_simple_tailroom>
   1b6d0:	4580      	cmp	r8, r0
   1b6d2:	d20c      	bcs.n	1b6ee <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   1b6d4:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1b6d8:	f854 1f08 	ldr.w	r1, [r4, #8]!
   1b6dc:	4632      	mov	r2, r6
   1b6de:	4638      	mov	r0, r7
   1b6e0:	f014 f9cb 	bl	2fa7a <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1b6e4:	4631      	mov	r1, r6
   1b6e6:	4620      	mov	r0, r4
   1b6e8:	f005 fe04 	bl	212f4 <net_buf_simple_pull>
   1b6ec:	e7e4      	b.n	1b6b8 <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1b6ee:	4638      	mov	r0, r7
   1b6f0:	f014 f9bb 	bl	2fa6a <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1b6f4:	b286      	uxth	r6, r0
   1b6f6:	e7ef      	b.n	1b6d8 <create_frag.isra.0+0x48>
   1b6f8:	200002a8 	.word	0x200002a8

0001b6fc <bt_conn_process_tx>:
{
   1b6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b6fe:	7a83      	ldrb	r3, [r0, #10]
{
   1b700:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1b702:	b993      	cbnz	r3, 1b72a <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1b704:	f3bf 8f5b 	dmb	ish
   1b708:	1d03      	adds	r3, r0, #4
   1b70a:	e853 2f00 	ldrex	r2, [r3]
   1b70e:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1b712:	e843 1400 	strex	r4, r1, [r3]
   1b716:	2c00      	cmp	r4, #0
   1b718:	d1f7      	bne.n	1b70a <bt_conn_process_tx+0xe>
   1b71a:	f3bf 8f5b 	dmb	ish
   1b71e:	0653      	lsls	r3, r2, #25
   1b720:	d503      	bpl.n	1b72a <bt_conn_process_tx+0x2e>
}
   1b722:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   1b726:	f7ff b93d 	b.w	1a9a4 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1b72a:	2200      	movs	r2, #0
   1b72c:	2300      	movs	r3, #0
   1b72e:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1b732:	f005 fc5f 	bl	20ff4 <net_buf_get>
	BT_ASSERT(buf);
   1b736:	4604      	mov	r4, r0
   1b738:	b960      	cbnz	r0, 1b754 <bt_conn_process_tx+0x58>
   1b73a:	4a20      	ldr	r2, [pc, #128]	; (1b7bc <bt_conn_process_tx+0xc0>)
   1b73c:	4920      	ldr	r1, [pc, #128]	; (1b7c0 <bt_conn_process_tx+0xc4>)
   1b73e:	4821      	ldr	r0, [pc, #132]	; (1b7c4 <bt_conn_process_tx+0xc8>)
   1b740:	f240 23e7 	movw	r3, #743	; 0x2e7
   1b744:	f010 ff29 	bl	2c59a <printk>
   1b748:	4040      	eors	r0, r0
   1b74a:	f380 8811 	msr	BASEPRI, r0
   1b74e:	f04f 0003 	mov.w	r0, #3
   1b752:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1b754:	4f1c      	ldr	r7, [pc, #112]	; (1b7c8 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1b756:	89a1      	ldrh	r1, [r4, #12]
   1b758:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   1b75c:	4291      	cmp	r1, r2
   1b75e:	d807      	bhi.n	1b770 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1b760:	2300      	movs	r3, #0
   1b762:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1b764:	4621      	mov	r1, r4
   1b766:	4628      	mov	r0, r5
   1b768:	f7ff f830 	bl	1a7cc <send_frag>
	if (!send_buf(conn, buf)) {
   1b76c:	b140      	cbz	r0, 1b780 <bt_conn_process_tx+0x84>
}
   1b76e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   1b770:	f105 060a 	add.w	r6, r5, #10
   1b774:	4621      	mov	r1, r4
   1b776:	4630      	mov	r0, r6
   1b778:	f7ff ff8a 	bl	1b690 <create_frag.isra.0>
	if (!frag) {
   1b77c:	4601      	mov	r1, r0
   1b77e:	b920      	cbnz	r0, 1b78a <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   1b780:	4620      	mov	r0, r4
}
   1b782:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   1b786:	f005 bcc7 	b.w	21118 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1b78a:	2301      	movs	r3, #1
   1b78c:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1b78e:	4628      	mov	r0, r5
   1b790:	f7ff f81c 	bl	1a7cc <send_frag>
   1b794:	2800      	cmp	r0, #0
   1b796:	d0f3      	beq.n	1b780 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   1b798:	89a2      	ldrh	r2, [r4, #12]
   1b79a:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   1b79e:	429a      	cmp	r2, r3
   1b7a0:	d802      	bhi.n	1b7a8 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   1b7a2:	2300      	movs	r3, #0
   1b7a4:	2203      	movs	r2, #3
   1b7a6:	e7dd      	b.n	1b764 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   1b7a8:	4621      	mov	r1, r4
   1b7aa:	4630      	mov	r0, r6
   1b7ac:	f7ff ff70 	bl	1b690 <create_frag.isra.0>
		if (!frag) {
   1b7b0:	4601      	mov	r1, r0
   1b7b2:	2800      	cmp	r0, #0
   1b7b4:	d0e4      	beq.n	1b780 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1b7b6:	2301      	movs	r3, #1
   1b7b8:	461a      	mov	r2, r3
   1b7ba:	e7e8      	b.n	1b78e <bt_conn_process_tx+0x92>
   1b7bc:	000350eb 	.word	0x000350eb
   1b7c0:	00034a77 	.word	0x00034a77
   1b7c4:	00032486 	.word	0x00032486
   1b7c8:	200002a8 	.word	0x200002a8

0001b7cc <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1b7cc:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1b7ce:	4914      	ldr	r1, [pc, #80]	; (1b820 <bt_conn_init+0x54>)
   1b7d0:	4814      	ldr	r0, [pc, #80]	; (1b824 <bt_conn_init+0x58>)
   1b7d2:	f014 fd99 	bl	30308 <k_queue_append>
   1b7d6:	4914      	ldr	r1, [pc, #80]	; (1b828 <bt_conn_init+0x5c>)
   1b7d8:	4812      	ldr	r0, [pc, #72]	; (1b824 <bt_conn_init+0x58>)
   1b7da:	f014 fd95 	bl	30308 <k_queue_append>
   1b7de:	4913      	ldr	r1, [pc, #76]	; (1b82c <bt_conn_init+0x60>)
   1b7e0:	4810      	ldr	r0, [pc, #64]	; (1b824 <bt_conn_init+0x58>)
   1b7e2:	f014 fd91 	bl	30308 <k_queue_append>
	}

	bt_att_init();
   1b7e6:	f013 fbca 	bl	2ef7e <bt_att_init>

	err = bt_smp_init();
   1b7ea:	f014 f8e1 	bl	2f9b0 <bt_smp_init>
	if (err) {
   1b7ee:	4605      	mov	r5, r0
   1b7f0:	b998      	cbnz	r0, 1b81a <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   1b7f2:	f013 f898 	bl	2e926 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1b7f6:	480e      	ldr	r0, [pc, #56]	; (1b830 <bt_conn_init+0x64>)
   1b7f8:	f012 fef9 	bl	2e5ee <bt_conn_ref>

			if (!conn) {
   1b7fc:	4604      	mov	r4, r0
   1b7fe:	b160      	cbz	r0, 1b81a <bt_conn_init+0x4e>
   1b800:	3004      	adds	r0, #4
   1b802:	f012 feb8 	bl	2e576 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   1b806:	07c3      	lsls	r3, r0, #31
   1b808:	d504      	bpl.n	1b814 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   1b80a:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1b80c:	2102      	movs	r1, #2
   1b80e:	4620      	mov	r0, r4
   1b810:	f7ff fa94 	bl	1ad3c <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   1b814:	4620      	mov	r0, r4
   1b816:	f7ff fa5b 	bl	1acd0 <bt_conn_unref>
		}
	}

	return 0;
}
   1b81a:	4628      	mov	r0, r5
   1b81c:	bd38      	pop	{r3, r4, r5, pc}
   1b81e:	bf00      	nop
   1b820:	20002cf8 	.word	0x20002cf8
   1b824:	20000978 	.word	0x20000978
   1b828:	20002d08 	.word	0x20002d08
   1b82c:	20002d18 	.word	0x20002d18
   1b830:	20001b28 	.word	0x20001b28

0001b834 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1b834:	4a0c      	ldr	r2, [pc, #48]	; (1b868 <l2cap_accept+0x34>)
{
   1b836:	b508      	push	{r3, lr}
   1b838:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   1b83a:	6810      	ldr	r0, [r2, #0]
   1b83c:	b918      	cbnz	r0, 1b846 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1b83e:	4b0b      	ldr	r3, [pc, #44]	; (1b86c <l2cap_accept+0x38>)
   1b840:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   1b842:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1b844:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   1b846:	4a0a      	ldr	r2, [pc, #40]	; (1b870 <l2cap_accept+0x3c>)
   1b848:	6811      	ldr	r1, [r2, #0]
   1b84a:	0749      	lsls	r1, r1, #29
   1b84c:	d009      	beq.n	1b862 <l2cap_accept+0x2e>
   1b84e:	4909      	ldr	r1, [pc, #36]	; (1b874 <l2cap_accept+0x40>)
   1b850:	4809      	ldr	r0, [pc, #36]	; (1b878 <l2cap_accept+0x44>)
   1b852:	1a52      	subs	r2, r2, r1
   1b854:	0892      	lsrs	r2, r2, #2
   1b856:	0192      	lsls	r2, r2, #6
   1b858:	f042 0201 	orr.w	r2, r2, #1
   1b85c:	4619      	mov	r1, r3
   1b85e:	f011 fa4b 	bl	2ccf8 <log_1>
   1b862:	f06f 000b 	mvn.w	r0, #11
   1b866:	e7ed      	b.n	1b844 <l2cap_accept+0x10>
   1b868:	20001bf0 	.word	0x20001bf0
   1b86c:	00031778 	.word	0x00031778
   1b870:	200007c0 	.word	0x200007c0
   1b874:	200007a8 	.word	0x200007a8
   1b878:	000354a8 	.word	0x000354a8

0001b87c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1b87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b87e:	4605      	mov	r5, r0
   1b880:	460f      	mov	r7, r1
   1b882:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1b884:	2300      	movs	r3, #0
   1b886:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1b88a:	2104      	movs	r1, #4
   1b88c:	2000      	movs	r0, #0
   1b88e:	f7ff fb8f 	bl	1afb0 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1b892:	4604      	mov	r4, r0
   1b894:	b978      	cbnz	r0, 1b8b6 <l2cap_create_le_sig_pdu.isra.0+0x3a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1b896:	4a0c      	ldr	r2, [pc, #48]	; (1b8c8 <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   1b898:	6813      	ldr	r3, [r2, #0]
   1b89a:	075b      	lsls	r3, r3, #29
   1b89c:	d009      	beq.n	1b8b2 <l2cap_create_le_sig_pdu.isra.0+0x36>
   1b89e:	4b0b      	ldr	r3, [pc, #44]	; (1b8cc <l2cap_create_le_sig_pdu.isra.0+0x50>)
   1b8a0:	480b      	ldr	r0, [pc, #44]	; (1b8d0 <l2cap_create_le_sig_pdu.isra.0+0x54>)
   1b8a2:	1ad2      	subs	r2, r2, r3
   1b8a4:	0892      	lsrs	r2, r2, #2
   1b8a6:	0192      	lsls	r2, r2, #6
   1b8a8:	f042 0201 	orr.w	r2, r2, #1
   1b8ac:	4629      	mov	r1, r5
   1b8ae:	f011 fa23 	bl	2ccf8 <log_1>
}
   1b8b2:	4620      	mov	r0, r4
   1b8b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1b8b6:	2104      	movs	r1, #4
   1b8b8:	3008      	adds	r0, #8
   1b8ba:	f005 fd5d 	bl	21378 <net_buf_simple_add>
	hdr->code = code;
   1b8be:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1b8c0:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1b8c2:	8046      	strh	r6, [r0, #2]
	return buf;
   1b8c4:	e7f5      	b.n	1b8b2 <l2cap_create_le_sig_pdu.isra.0+0x36>
   1b8c6:	bf00      	nop
   1b8c8:	200007c0 	.word	0x200007c0
   1b8cc:	200007a8 	.word	0x200007a8
   1b8d0:	000354cf 	.word	0x000354cf

0001b8d4 <l2cap_rtx_timeout>:
	BT_ERR("chan %p timeout", chan);
   1b8d4:	4a0d      	ldr	r2, [pc, #52]	; (1b90c <l2cap_rtx_timeout+0x38>)
{
   1b8d6:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
   1b8d8:	6813      	ldr	r3, [r2, #0]
	struct bt_conn *conn = chan->chan.conn;
   1b8da:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
   1b8dc:	075b      	lsls	r3, r3, #29
	struct bt_conn *conn = chan->chan.conn;
   1b8de:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   1b8e2:	d009      	beq.n	1b8f8 <l2cap_rtx_timeout+0x24>
   1b8e4:	4b0a      	ldr	r3, [pc, #40]	; (1b910 <l2cap_rtx_timeout+0x3c>)
   1b8e6:	480b      	ldr	r0, [pc, #44]	; (1b914 <l2cap_rtx_timeout+0x40>)
   1b8e8:	1ad2      	subs	r2, r2, r3
   1b8ea:	0892      	lsrs	r2, r2, #2
   1b8ec:	0192      	lsls	r2, r2, #6
   1b8ee:	f042 0201 	orr.w	r2, r2, #1
   1b8f2:	4621      	mov	r1, r4
   1b8f4:	f011 fa00 	bl	2ccf8 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1b8f8:	4628      	mov	r0, r5
   1b8fa:	4621      	mov	r1, r4
   1b8fc:	f012 ff6c 	bl	2e7d8 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1b900:	4620      	mov	r0, r4
}
   1b902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   1b906:	f012 bf89 	b.w	2e81c <bt_l2cap_chan_del>
   1b90a:	bf00      	nop
   1b90c:	200007c0 	.word	0x200007c0
   1b910:	200007a8 	.word	0x200007a8
   1b914:	000354f7 	.word	0x000354f7

0001b918 <bt_l2cap_connected>:
{
   1b918:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1b91c:	4f32      	ldr	r7, [pc, #200]	; (1b9e8 <bt_l2cap_connected+0xd0>)
   1b91e:	4e33      	ldr	r6, [pc, #204]	; (1b9ec <bt_l2cap_connected+0xd4>)
   1b920:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1ba00 <bt_l2cap_connected+0xe8>
{
   1b924:	4604      	mov	r4, r0
   1b926:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1b928:	42be      	cmp	r6, r7
   1b92a:	d90e      	bls.n	1b94a <bt_l2cap_connected+0x32>
   1b92c:	4930      	ldr	r1, [pc, #192]	; (1b9f0 <bt_l2cap_connected+0xd8>)
   1b92e:	4831      	ldr	r0, [pc, #196]	; (1b9f4 <bt_l2cap_connected+0xdc>)
   1b930:	f44f 73b3 	mov.w	r3, #358	; 0x166
   1b934:	4642      	mov	r2, r8
   1b936:	f010 fe30 	bl	2c59a <printk>
   1b93a:	482f      	ldr	r0, [pc, #188]	; (1b9f8 <bt_l2cap_connected+0xe0>)
   1b93c:	f010 fe2d 	bl	2c59a <printk>
   1b940:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1b944:	4640      	mov	r0, r8
   1b946:	f011 f869 	bl	2ca1c <assert_post_action>
   1b94a:	454e      	cmp	r6, r9
   1b94c:	d302      	bcc.n	1b954 <bt_l2cap_connected+0x3c>
}
   1b94e:	b002      	add	sp, #8
   1b950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1b954:	6873      	ldr	r3, [r6, #4]
   1b956:	a901      	add	r1, sp, #4
   1b958:	4620      	mov	r0, r4
   1b95a:	4798      	blx	r3
   1b95c:	2800      	cmp	r0, #0
   1b95e:	db3d      	blt.n	1b9dc <bt_l2cap_connected+0xc4>
		ch = BT_L2CAP_LE_CHAN(chan);
   1b960:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1b962:	8833      	ldrh	r3, [r6, #0]
   1b964:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1b968:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1b96c:	4923      	ldr	r1, [pc, #140]	; (1b9fc <bt_l2cap_connected+0xe4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1b96e:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1b972:	f105 0010 	add.w	r0, r5, #16
   1b976:	f00a fe17 	bl	265a8 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b97a:	f3bf 8f5b 	dmb	ish
   1b97e:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1b982:	2200      	movs	r2, #0
   1b984:	e853 1f00 	ldrex	r1, [r3]
   1b988:	e843 2000 	strex	r0, r2, [r3]
   1b98c:	2800      	cmp	r0, #0
   1b98e:	d1f9      	bne.n	1b984 <bt_l2cap_connected+0x6c>
   1b990:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1b994:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   1b996:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   1b998:	f105 0308 	add.w	r3, r5, #8
   1b99c:	bb02      	cbnz	r2, 1b9e0 <bt_l2cap_connected+0xc8>
	list->head = node;
   1b99e:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   1b9a2:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1b9a4:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1b9a6:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1b9a8:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   1b9ac:	681b      	ldr	r3, [r3, #0]
   1b9ae:	b103      	cbz	r3, 1b9b2 <bt_l2cap_connected+0x9a>
			chan->ops->connected(chan);
   1b9b0:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b9b2:	9b01      	ldr	r3, [sp, #4]
   1b9b4:	f3bf 8f5b 	dmb	ish
   1b9b8:	3368      	adds	r3, #104	; 0x68
   1b9ba:	e853 2f00 	ldrex	r2, [r3]
   1b9be:	f042 0201 	orr.w	r2, r2, #1
   1b9c2:	e843 2100 	strex	r1, r2, [r3]
   1b9c6:	2900      	cmp	r1, #0
   1b9c8:	d1f7      	bne.n	1b9ba <bt_l2cap_connected+0xa2>
   1b9ca:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1b9ce:	9801      	ldr	r0, [sp, #4]
   1b9d0:	6843      	ldr	r3, [r0, #4]
   1b9d2:	699b      	ldr	r3, [r3, #24]
   1b9d4:	b113      	cbz	r3, 1b9dc <bt_l2cap_connected+0xc4>
			chan->ops->status(chan, chan->status);
   1b9d6:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1b9da:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1b9dc:	360c      	adds	r6, #12
   1b9de:	e7a3      	b.n	1b928 <bt_l2cap_connected+0x10>
	parent->next = child;
   1b9e0:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1b9e2:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1b9e4:	e7dd      	b.n	1b9a2 <bt_l2cap_connected+0x8a>
   1b9e6:	bf00      	nop
   1b9e8:	00030bc4 	.word	0x00030bc4
   1b9ec:	00030ba0 	.word	0x00030ba0
   1b9f0:	00035538 	.word	0x00035538
   1b9f4:	00032486 	.word	0x00032486
   1b9f8:	00035136 	.word	0x00035136
   1b9fc:	0001b8d5 	.word	0x0001b8d5
   1ba00:	00035507 	.word	0x00035507

0001ba04 <l2cap_recv>:
{
   1ba04:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1ba06:	898b      	ldrh	r3, [r1, #12]
   1ba08:	2b03      	cmp	r3, #3
{
   1ba0a:	b085      	sub	sp, #20
   1ba0c:	4606      	mov	r6, r0
   1ba0e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1ba10:	d80d      	bhi.n	1ba2e <l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP signaling PDU");
   1ba12:	4959      	ldr	r1, [pc, #356]	; (1bb78 <l2cap_recv+0x174>)
   1ba14:	680b      	ldr	r3, [r1, #0]
   1ba16:	075d      	lsls	r5, r3, #29
   1ba18:	d020      	beq.n	1ba5c <l2cap_recv+0x58>
   1ba1a:	4b58      	ldr	r3, [pc, #352]	; (1bb7c <l2cap_recv+0x178>)
   1ba1c:	4858      	ldr	r0, [pc, #352]	; (1bb80 <l2cap_recv+0x17c>)
   1ba1e:	1ac9      	subs	r1, r1, r3
   1ba20:	0889      	lsrs	r1, r1, #2
   1ba22:	0189      	lsls	r1, r1, #6
   1ba24:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   1ba28:	f011 f959 	bl	2ccde <log_0>
   1ba2c:	e016      	b.n	1ba5c <l2cap_recv+0x58>
	return net_buf_simple_pull_mem(&buf->b, len);
   1ba2e:	2104      	movs	r1, #4
   1ba30:	f105 0008 	add.w	r0, r5, #8
   1ba34:	f005 fc7e 	bl	21334 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1ba38:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1ba3a:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   1ba3c:	428a      	cmp	r2, r1
   1ba3e:	4604      	mov	r4, r0
   1ba40:	d00f      	beq.n	1ba62 <l2cap_recv+0x5e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1ba42:	4b4d      	ldr	r3, [pc, #308]	; (1bb78 <l2cap_recv+0x174>)
   1ba44:	6818      	ldr	r0, [r3, #0]
   1ba46:	0744      	lsls	r4, r0, #29
   1ba48:	d008      	beq.n	1ba5c <l2cap_recv+0x58>
   1ba4a:	484c      	ldr	r0, [pc, #304]	; (1bb7c <l2cap_recv+0x178>)
   1ba4c:	1a1b      	subs	r3, r3, r0
   1ba4e:	089b      	lsrs	r3, r3, #2
   1ba50:	019b      	lsls	r3, r3, #6
   1ba52:	484c      	ldr	r0, [pc, #304]	; (1bb84 <l2cap_recv+0x180>)
   1ba54:	f043 0301 	orr.w	r3, r3, #1
   1ba58:	f011 f962 	bl	2cd20 <log_2>
}
   1ba5c:	2000      	movs	r0, #0
   1ba5e:	b005      	add	sp, #20
   1ba60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1ba62:	7841      	ldrb	r1, [r0, #1]
   1ba64:	b959      	cbnz	r1, 1ba7e <l2cap_recv+0x7a>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1ba66:	4944      	ldr	r1, [pc, #272]	; (1bb78 <l2cap_recv+0x174>)
   1ba68:	680b      	ldr	r3, [r1, #0]
   1ba6a:	0758      	lsls	r0, r3, #29
   1ba6c:	d0f6      	beq.n	1ba5c <l2cap_recv+0x58>
   1ba6e:	4b43      	ldr	r3, [pc, #268]	; (1bb7c <l2cap_recv+0x178>)
   1ba70:	4845      	ldr	r0, [pc, #276]	; (1bb88 <l2cap_recv+0x184>)
   1ba72:	1ac9      	subs	r1, r1, r3
   1ba74:	0889      	lsrs	r1, r1, #2
   1ba76:	0189      	lsls	r1, r1, #6
   1ba78:	f041 0101 	orr.w	r1, r1, #1
   1ba7c:	e7d4      	b.n	1ba28 <l2cap_recv+0x24>
	switch (hdr->code) {
   1ba7e:	7803      	ldrb	r3, [r0, #0]
   1ba80:	2b12      	cmp	r3, #18
   1ba82:	d023      	beq.n	1bacc <l2cap_recv+0xc8>
   1ba84:	2b13      	cmp	r3, #19
   1ba86:	d013      	beq.n	1bab0 <l2cap_recv+0xac>
   1ba88:	2b01      	cmp	r3, #1
   1ba8a:	d0e7      	beq.n	1ba5c <l2cap_recv+0x58>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1ba8c:	4a3a      	ldr	r2, [pc, #232]	; (1bb78 <l2cap_recv+0x174>)
   1ba8e:	6811      	ldr	r1, [r2, #0]
   1ba90:	f011 0f06 	tst.w	r1, #6
   1ba94:	d009      	beq.n	1baaa <l2cap_recv+0xa6>
   1ba96:	4939      	ldr	r1, [pc, #228]	; (1bb7c <l2cap_recv+0x178>)
   1ba98:	483c      	ldr	r0, [pc, #240]	; (1bb8c <l2cap_recv+0x188>)
   1ba9a:	1a52      	subs	r2, r2, r1
   1ba9c:	0892      	lsrs	r2, r2, #2
   1ba9e:	0192      	lsls	r2, r2, #6
   1baa0:	f042 0202 	orr.w	r2, r2, #2
   1baa4:	4619      	mov	r1, r3
   1baa6:	f011 f927 	bl	2ccf8 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   1baaa:	7861      	ldrb	r1, [r4, #1]
   1baac:	6830      	ldr	r0, [r6, #0]
   1baae:	e01f      	b.n	1baf0 <l2cap_recv+0xec>
	if (buf->len < sizeof(*rsp)) {
   1bab0:	2a01      	cmp	r2, #1
   1bab2:	d8d3      	bhi.n	1ba5c <l2cap_recv+0x58>
		BT_ERR("Too small LE conn param rsp");
   1bab4:	4930      	ldr	r1, [pc, #192]	; (1bb78 <l2cap_recv+0x174>)
   1bab6:	680b      	ldr	r3, [r1, #0]
   1bab8:	075a      	lsls	r2, r3, #29
   1baba:	d0cf      	beq.n	1ba5c <l2cap_recv+0x58>
   1babc:	4b2f      	ldr	r3, [pc, #188]	; (1bb7c <l2cap_recv+0x178>)
   1babe:	4834      	ldr	r0, [pc, #208]	; (1bb90 <l2cap_recv+0x18c>)
   1bac0:	1ac9      	subs	r1, r1, r3
   1bac2:	0889      	lsrs	r1, r1, #2
   1bac4:	0189      	lsls	r1, r1, #6
   1bac6:	f041 0101 	orr.w	r1, r1, #1
   1baca:	e7ad      	b.n	1ba28 <l2cap_recv+0x24>
	if (buf->len < sizeof(*req)) {
   1bacc:	2a07      	cmp	r2, #7
   1bace:	d80b      	bhi.n	1bae8 <l2cap_recv+0xe4>
		BT_ERR("Too small LE conn update param req");
   1bad0:	4929      	ldr	r1, [pc, #164]	; (1bb78 <l2cap_recv+0x174>)
   1bad2:	680b      	ldr	r3, [r1, #0]
   1bad4:	075b      	lsls	r3, r3, #29
   1bad6:	d0c1      	beq.n	1ba5c <l2cap_recv+0x58>
   1bad8:	4b28      	ldr	r3, [pc, #160]	; (1bb7c <l2cap_recv+0x178>)
   1bada:	482e      	ldr	r0, [pc, #184]	; (1bb94 <l2cap_recv+0x190>)
   1badc:	1ac9      	subs	r1, r1, r3
   1bade:	0889      	lsrs	r1, r1, #2
   1bae0:	0189      	lsls	r1, r1, #6
   1bae2:	f041 0101 	orr.w	r1, r1, #1
   1bae6:	e79f      	b.n	1ba28 <l2cap_recv+0x24>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1bae8:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1baea:	78f7      	ldrb	r7, [r6, #3]
   1baec:	b11f      	cbz	r7, 1baf6 <l2cap_recv+0xf2>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1baee:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
   1baf0:	f012 fedb 	bl	2e8aa <l2cap_send_reject.constprop.0>
		break;
   1baf4:	e7b2      	b.n	1ba5c <l2cap_recv+0x58>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1baf6:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1baf8:	7850      	ldrb	r0, [r2, #1]
   1bafa:	7813      	ldrb	r3, [r2, #0]
   1bafc:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1bb00:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1bb04:	78d0      	ldrb	r0, [r2, #3]
   1bb06:	7893      	ldrb	r3, [r2, #2]
   1bb08:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1bb0c:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1bb10:	7950      	ldrb	r0, [r2, #5]
   1bb12:	7913      	ldrb	r3, [r2, #4]
   1bb14:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1bb18:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1bb1c:	7993      	ldrb	r3, [r2, #6]
   1bb1e:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1bb20:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1bb22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1bb26:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1bb28:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1bb2c:	f7ff fea6 	bl	1b87c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1bb30:	4604      	mov	r4, r0
   1bb32:	2800      	cmp	r0, #0
   1bb34:	d092      	beq.n	1ba5c <l2cap_recv+0x58>
	accepted = le_param_req(conn, &param);
   1bb36:	a902      	add	r1, sp, #8
   1bb38:	4630      	mov	r0, r6
   1bb3a:	f7ff fae3 	bl	1b104 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   1bb3e:	2102      	movs	r1, #2
   1bb40:	4605      	mov	r5, r0
   1bb42:	f104 0008 	add.w	r0, r4, #8
   1bb46:	f005 fc17 	bl	21378 <net_buf_simple_add>
	if (accepted) {
   1bb4a:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1bb4e:	b2db      	uxtb	r3, r3
   1bb50:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1bb52:	4622      	mov	r2, r4
   1bb54:	9700      	str	r7, [sp, #0]
   1bb56:	463b      	mov	r3, r7
   1bb58:	2105      	movs	r1, #5
   1bb5a:	4630      	mov	r0, r6
   1bb5c:	f012 fe8c 	bl	2e878 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1bb60:	b110      	cbz	r0, 1bb68 <l2cap_recv+0x164>
		net_buf_unref(buf);
   1bb62:	4620      	mov	r0, r4
   1bb64:	f005 fad8 	bl	21118 <net_buf_unref>
	if (accepted) {
   1bb68:	2d00      	cmp	r5, #0
   1bb6a:	f43f af77 	beq.w	1ba5c <l2cap_recv+0x58>
		bt_conn_le_conn_update(conn, &param);
   1bb6e:	a902      	add	r1, sp, #8
   1bb70:	4630      	mov	r0, r6
   1bb72:	f012 fddd 	bl	2e730 <bt_conn_le_conn_update>
   1bb76:	e771      	b.n	1ba5c <l2cap_recv+0x58>
   1bb78:	200007c0 	.word	0x200007c0
   1bb7c:	200007a8 	.word	0x200007a8
   1bb80:	0003555f 	.word	0x0003555f
   1bb84:	0003557d 	.word	0x0003557d
   1bb88:	0003559e 	.word	0x0003559e
   1bb8c:	000355fe 	.word	0x000355fe
   1bb90:	000355bf 	.word	0x000355bf
   1bb94:	000355db 	.word	0x000355db

0001bb98 <bt_l2cap_recv>:
{
   1bb98:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1bb9a:	898b      	ldrh	r3, [r1, #12]
   1bb9c:	2b03      	cmp	r3, #3
{
   1bb9e:	4605      	mov	r5, r0
   1bba0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1bba2:	d811      	bhi.n	1bbc8 <bt_l2cap_recv+0x30>
		BT_ERR("Too small L2CAP PDU received");
   1bba4:	4b17      	ldr	r3, [pc, #92]	; (1bc04 <bt_l2cap_recv+0x6c>)
   1bba6:	681a      	ldr	r2, [r3, #0]
   1bba8:	0752      	lsls	r2, r2, #29
   1bbaa:	d008      	beq.n	1bbbe <bt_l2cap_recv+0x26>
   1bbac:	4916      	ldr	r1, [pc, #88]	; (1bc08 <bt_l2cap_recv+0x70>)
   1bbae:	4817      	ldr	r0, [pc, #92]	; (1bc0c <bt_l2cap_recv+0x74>)
   1bbb0:	1a5b      	subs	r3, r3, r1
   1bbb2:	089b      	lsrs	r3, r3, #2
   1bbb4:	019b      	lsls	r3, r3, #6
   1bbb6:	f043 0101 	orr.w	r1, r3, #1
   1bbba:	f011 f890 	bl	2ccde <log_0>
	net_buf_unref(buf);
   1bbbe:	4620      	mov	r0, r4
}
   1bbc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1bbc4:	f005 baa8 	b.w	21118 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1bbc8:	2104      	movs	r1, #4
   1bbca:	f104 0008 	add.w	r0, r4, #8
   1bbce:	f005 fbb1 	bl	21334 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1bbd2:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1bbd4:	4628      	mov	r0, r5
   1bbd6:	f012 fe96 	bl	2e906 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1bbda:	b970      	cbnz	r0, 1bbfa <bt_l2cap_recv+0x62>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1bbdc:	4a09      	ldr	r2, [pc, #36]	; (1bc04 <bt_l2cap_recv+0x6c>)
   1bbde:	6813      	ldr	r3, [r2, #0]
   1bbe0:	f013 0f06 	tst.w	r3, #6
   1bbe4:	d0eb      	beq.n	1bbbe <bt_l2cap_recv+0x26>
   1bbe6:	4b08      	ldr	r3, [pc, #32]	; (1bc08 <bt_l2cap_recv+0x70>)
   1bbe8:	4809      	ldr	r0, [pc, #36]	; (1bc10 <bt_l2cap_recv+0x78>)
   1bbea:	1ad2      	subs	r2, r2, r3
   1bbec:	0892      	lsrs	r2, r2, #2
   1bbee:	0192      	lsls	r2, r2, #6
   1bbf0:	f042 0202 	orr.w	r2, r2, #2
   1bbf4:	f011 f880 	bl	2ccf8 <log_1>
   1bbf8:	e7e1      	b.n	1bbbe <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   1bbfa:	6843      	ldr	r3, [r0, #4]
   1bbfc:	4621      	mov	r1, r4
   1bbfe:	691b      	ldr	r3, [r3, #16]
   1bc00:	4798      	blx	r3
   1bc02:	e7dc      	b.n	1bbbe <bt_l2cap_recv+0x26>
   1bc04:	200007c0 	.word	0x200007c0
   1bc08:	200007a8 	.word	0x200007a8
   1bc0c:	0003561c 	.word	0x0003561c
   1bc10:	00035639 	.word	0x00035639

0001bc14 <bt_l2cap_update_conn_param>:
{
   1bc14:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1bc16:	4b17      	ldr	r3, [pc, #92]	; (1bc74 <bt_l2cap_update_conn_param+0x60>)
   1bc18:	781a      	ldrb	r2, [r3, #0]
   1bc1a:	3201      	adds	r2, #1
	if (!ident) {
   1bc1c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   1bc20:	bf08      	it	eq
   1bc22:	2201      	moveq	r2, #1
   1bc24:	701a      	strb	r2, [r3, #0]
{
   1bc26:	4606      	mov	r6, r0
   1bc28:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1bc2a:	2208      	movs	r2, #8
   1bc2c:	7819      	ldrb	r1, [r3, #0]
   1bc2e:	2012      	movs	r0, #18
   1bc30:	f7ff fe24 	bl	1b87c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1bc34:	4604      	mov	r4, r0
   1bc36:	b1d0      	cbz	r0, 1bc6e <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1bc38:	2108      	movs	r1, #8
   1bc3a:	4408      	add	r0, r1
   1bc3c:	f005 fb9c 	bl	21378 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1bc40:	882b      	ldrh	r3, [r5, #0]
   1bc42:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1bc44:	886b      	ldrh	r3, [r5, #2]
   1bc46:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1bc48:	88ab      	ldrh	r3, [r5, #4]
   1bc4a:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1bc4c:	88eb      	ldrh	r3, [r5, #6]
   1bc4e:	80c3      	strh	r3, [r0, #6]
   1bc50:	2300      	movs	r3, #0
   1bc52:	9300      	str	r3, [sp, #0]
   1bc54:	4622      	mov	r2, r4
   1bc56:	2105      	movs	r1, #5
   1bc58:	4630      	mov	r0, r6
   1bc5a:	f012 fe0d 	bl	2e878 <bt_l2cap_send_cb>
	if (err) {
   1bc5e:	4605      	mov	r5, r0
   1bc60:	b110      	cbz	r0, 1bc68 <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1bc62:	4620      	mov	r0, r4
   1bc64:	f005 fa58 	bl	21118 <net_buf_unref>
}
   1bc68:	4628      	mov	r0, r5
   1bc6a:	b002      	add	sp, #8
   1bc6c:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1bc6e:	f06f 050b 	mvn.w	r5, #11
   1bc72:	e7f9      	b.n	1bc68 <bt_l2cap_update_conn_param+0x54>
   1bc74:	200039e5 	.word	0x200039e5

0001bc78 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1bc78:	4b02      	ldr	r3, [pc, #8]	; (1bc84 <att_cfm_sent+0xc>)
   1bc7a:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1bc7e:	f012 be80 	b.w	2e982 <att_sent>
   1bc82:	bf00      	nop
   1bc84:	0002ed45 	.word	0x0002ed45

0001bc88 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1bc88:	4b02      	ldr	r3, [pc, #8]	; (1bc94 <att_rsp_sent+0xc>)
   1bc8a:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1bc8e:	f012 be78 	b.w	2e982 <att_sent>
   1bc92:	bf00      	nop
   1bc94:	0002ed61 	.word	0x0002ed61

0001bc98 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1bc98:	4b02      	ldr	r3, [pc, #8]	; (1bca4 <att_req_sent+0xc>)
   1bc9a:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1bc9e:	f012 be70 	b.w	2e982 <att_sent>
   1bca2:	bf00      	nop
   1bca4:	0002ec89 	.word	0x0002ec89

0001bca8 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1bca8:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1bcaa:	3808      	subs	r0, #8
   1bcac:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1bcae:	a901      	add	r1, sp, #4
   1bcb0:	4802      	ldr	r0, [pc, #8]	; (1bcbc <bt_att_released+0x14>)
   1bcb2:	f009 f84d 	bl	24d50 <k_mem_slab_free>
}
   1bcb6:	b003      	add	sp, #12
   1bcb8:	f85d fb04 	ldr.w	pc, [sp], #4
   1bcbc:	20000830 	.word	0x20000830

0001bcc0 <chan_send>:
{
   1bcc0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1bcc4:	688b      	ldr	r3, [r1, #8]
   1bcc6:	781b      	ldrb	r3, [r3, #0]
   1bcc8:	2bd2      	cmp	r3, #210	; 0xd2
{
   1bcca:	4606      	mov	r6, r0
   1bccc:	460c      	mov	r4, r1
   1bcce:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1bcd0:	d119      	bne.n	1bd06 <chan_send+0x46>
		err = bt_smp_sign(chan->att->conn, buf);
   1bcd2:	6803      	ldr	r3, [r0, #0]
   1bcd4:	6818      	ldr	r0, [r3, #0]
   1bcd6:	f013 fe68 	bl	2f9aa <bt_smp_sign>
		if (err) {
   1bcda:	4605      	mov	r5, r0
   1bcdc:	b198      	cbz	r0, 1bd06 <chan_send+0x46>
			BT_ERR("Error signing data");
   1bcde:	4925      	ldr	r1, [pc, #148]	; (1bd74 <chan_send+0xb4>)
   1bce0:	680b      	ldr	r3, [r1, #0]
   1bce2:	075b      	lsls	r3, r3, #29
   1bce4:	d008      	beq.n	1bcf8 <chan_send+0x38>
   1bce6:	4b24      	ldr	r3, [pc, #144]	; (1bd78 <chan_send+0xb8>)
   1bce8:	4824      	ldr	r0, [pc, #144]	; (1bd7c <chan_send+0xbc>)
   1bcea:	1ac9      	subs	r1, r1, r3
   1bcec:	0889      	lsrs	r1, r1, #2
   1bcee:	0189      	lsls	r1, r1, #6
   1bcf0:	f041 0101 	orr.w	r1, r1, #1
   1bcf4:	f010 fff3 	bl	2ccde <log_0>
			net_buf_unref(buf);
   1bcf8:	4620      	mov	r0, r4
   1bcfa:	f005 fa0d 	bl	21118 <net_buf_unref>
}
   1bcfe:	4628      	mov	r0, r5
   1bd00:	b003      	add	sp, #12
   1bd02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1bd06:	f104 0008 	add.w	r0, r4, #8
   1bd0a:	f013 feaa 	bl	2fa62 <net_buf_simple_headroom>
	state->len = buf->len;
   1bd0e:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1bd12:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1bd14:	b957      	cbnz	r7, 1bd2c <chan_send+0x6c>
	switch (att_op_get_type(buf->data[0])) {
   1bd16:	68a3      	ldr	r3, [r4, #8]
   1bd18:	7818      	ldrb	r0, [r3, #0]
   1bd1a:	f012 fe4a 	bl	2e9b2 <att_op_get_type>
   1bd1e:	1e43      	subs	r3, r0, #1
   1bd20:	b2db      	uxtb	r3, r3
   1bd22:	2b04      	cmp	r3, #4
   1bd24:	bf9c      	itt	ls
   1bd26:	4a16      	ldrls	r2, [pc, #88]	; (1bd80 <chan_send+0xc0>)
   1bd28:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1bd2c:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1bd2e:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1bd32:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   1bd34:	4b13      	ldr	r3, [pc, #76]	; (1bd84 <chan_send+0xc4>)
   1bd36:	429f      	cmp	r7, r3
   1bd38:	d018      	beq.n	1bd6c <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   1bd3a:	4b13      	ldr	r3, [pc, #76]	; (1bd88 <chan_send+0xc8>)
   1bd3c:	429f      	cmp	r7, r3
   1bd3e:	d017      	beq.n	1bd70 <chan_send+0xb0>
		return att_sent;
   1bd40:	4912      	ldr	r1, [pc, #72]	; (1bd8c <chan_send+0xcc>)
   1bd42:	4b13      	ldr	r3, [pc, #76]	; (1bd90 <chan_send+0xd0>)
   1bd44:	4a13      	ldr	r2, [pc, #76]	; (1bd94 <chan_send+0xd4>)
   1bd46:	428f      	cmp	r7, r1
   1bd48:	bf18      	it	ne
   1bd4a:	4613      	movne	r3, r2
			       &chan->chan.chan);
   1bd4c:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1bd4e:	9600      	str	r6, [sp, #0]
   1bd50:	4622      	mov	r2, r4
   1bd52:	2104      	movs	r1, #4
   1bd54:	f012 fd90 	bl	2e878 <bt_l2cap_send_cb>
	if (err) {
   1bd58:	4605      	mov	r5, r0
   1bd5a:	2800      	cmp	r0, #0
   1bd5c:	d0cf      	beq.n	1bcfe <chan_send+0x3e>
	buf->data = buf->__buf + state->offset;
   1bd5e:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1bd60:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1bd64:	fa10 f088 	uxtah	r0, r0, r8
   1bd68:	60a0      	str	r0, [r4, #8]
}
   1bd6a:	e7c8      	b.n	1bcfe <chan_send+0x3e>
		return att_rsp_sent;
   1bd6c:	4b0a      	ldr	r3, [pc, #40]	; (1bd98 <chan_send+0xd8>)
   1bd6e:	e7ed      	b.n	1bd4c <chan_send+0x8c>
		return att_cfm_sent;
   1bd70:	4b0a      	ldr	r3, [pc, #40]	; (1bd9c <chan_send+0xdc>)
   1bd72:	e7eb      	b.n	1bd4c <chan_send+0x8c>
   1bd74:	200007a8 	.word	0x200007a8
   1bd78:	200007a8 	.word	0x200007a8
   1bd7c:	00035675 	.word	0x00035675
   1bd80:	0003179c 	.word	0x0003179c
   1bd84:	0002ed61 	.word	0x0002ed61
   1bd88:	0002ed45 	.word	0x0002ed45
   1bd8c:	0002ec89 	.word	0x0002ec89
   1bd90:	0001bc99 	.word	0x0001bc99
   1bd94:	0002e983 	.word	0x0002e983
   1bd98:	0001bc89 	.word	0x0001bc89
   1bd9c:	0001bc79 	.word	0x0001bc79

0001bda0 <bt_att_chan_req_send>:
{
   1bda0:	b538      	push	{r3, r4, r5, lr}
   1bda2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   1bda4:	4604      	mov	r4, r0
   1bda6:	b958      	cbnz	r0, 1bdc0 <bt_att_chan_req_send+0x20>
   1bda8:	491d      	ldr	r1, [pc, #116]	; (1be20 <bt_att_chan_req_send+0x80>)
   1bdaa:	481e      	ldr	r0, [pc, #120]	; (1be24 <bt_att_chan_req_send+0x84>)
   1bdac:	4a1e      	ldr	r2, [pc, #120]	; (1be28 <bt_att_chan_req_send+0x88>)
   1bdae:	f240 2333 	movw	r3, #563	; 0x233
   1bdb2:	f010 fbf2 	bl	2c59a <printk>
   1bdb6:	481c      	ldr	r0, [pc, #112]	; (1be28 <bt_att_chan_req_send+0x88>)
   1bdb8:	f240 2133 	movw	r1, #563	; 0x233
   1bdbc:	f010 fe2e 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(req);
   1bdc0:	b95d      	cbnz	r5, 1bdda <bt_att_chan_req_send+0x3a>
   1bdc2:	491a      	ldr	r1, [pc, #104]	; (1be2c <bt_att_chan_req_send+0x8c>)
   1bdc4:	4817      	ldr	r0, [pc, #92]	; (1be24 <bt_att_chan_req_send+0x84>)
   1bdc6:	4a18      	ldr	r2, [pc, #96]	; (1be28 <bt_att_chan_req_send+0x88>)
   1bdc8:	f44f 730d 	mov.w	r3, #564	; 0x234
   1bdcc:	f010 fbe5 	bl	2c59a <printk>
   1bdd0:	4815      	ldr	r0, [pc, #84]	; (1be28 <bt_att_chan_req_send+0x88>)
   1bdd2:	f44f 710d 	mov.w	r1, #564	; 0x234
   1bdd6:	f010 fe21 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1bdda:	686b      	ldr	r3, [r5, #4]
   1bddc:	b95b      	cbnz	r3, 1bdf6 <bt_att_chan_req_send+0x56>
   1bdde:	4914      	ldr	r1, [pc, #80]	; (1be30 <bt_att_chan_req_send+0x90>)
   1bde0:	4810      	ldr	r0, [pc, #64]	; (1be24 <bt_att_chan_req_send+0x84>)
   1bde2:	4a11      	ldr	r2, [pc, #68]	; (1be28 <bt_att_chan_req_send+0x88>)
   1bde4:	f240 2335 	movw	r3, #565	; 0x235
   1bde8:	f010 fbd7 	bl	2c59a <printk>
   1bdec:	480e      	ldr	r0, [pc, #56]	; (1be28 <bt_att_chan_req_send+0x88>)
   1bdee:	f240 2135 	movw	r1, #565	; 0x235
   1bdf2:	f010 fe13 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1bdf6:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   1bdfa:	b15b      	cbz	r3, 1be14 <bt_att_chan_req_send+0x74>
   1bdfc:	490d      	ldr	r1, [pc, #52]	; (1be34 <bt_att_chan_req_send+0x94>)
   1bdfe:	4809      	ldr	r0, [pc, #36]	; (1be24 <bt_att_chan_req_send+0x84>)
   1be00:	4a09      	ldr	r2, [pc, #36]	; (1be28 <bt_att_chan_req_send+0x88>)
   1be02:	f240 2336 	movw	r3, #566	; 0x236
   1be06:	f010 fbc8 	bl	2c59a <printk>
   1be0a:	4807      	ldr	r0, [pc, #28]	; (1be28 <bt_att_chan_req_send+0x88>)
   1be0c:	f240 2136 	movw	r1, #566	; 0x236
   1be10:	f010 fe04 	bl	2ca1c <assert_post_action>
	return chan_req_send(chan, req);
   1be14:	4629      	mov	r1, r5
   1be16:	4620      	mov	r0, r4
}
   1be18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   1be1c:	f012 bdf6 	b.w	2ea0c <chan_req_send>
   1be20:	000356b7 	.word	0x000356b7
   1be24:	00032486 	.word	0x00032486
   1be28:	00035688 	.word	0x00035688
   1be2c:	000355fa 	.word	0x000355fa
   1be30:	000356bc 	.word	0x000356bc
   1be34:	000356c6 	.word	0x000356c6

0001be38 <read_group_cb>:
{
   1be38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1be3c:	4606      	mov	r6, r0
   1be3e:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1be40:	f04f 0800 	mov.w	r8, #0
   1be44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1be48:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1be4a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1be4c:	f88d 8008 	strb.w	r8, [sp, #8]
   1be50:	a902      	add	r1, sp, #8
{
   1be52:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1be54:	f8ad 300a 	strh.w	r3, [sp, #10]
   1be58:	f012 f9c3 	bl	2e1e2 <bt_uuid_cmp>
   1be5c:	b1a0      	cbz	r0, 1be88 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1be5e:	f642 0301 	movw	r3, #10241	; 0x2801
   1be62:	6830      	ldr	r0, [r6, #0]
   1be64:	f88d 800c 	strb.w	r8, [sp, #12]
   1be68:	a903      	add	r1, sp, #12
   1be6a:	f8ad 300e 	strh.w	r3, [sp, #14]
   1be6e:	f012 f9b8 	bl	2e1e2 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1be72:	b148      	cbz	r0, 1be88 <read_group_cb+0x50>
		if (data->group &&
   1be74:	6923      	ldr	r3, [r4, #16]
   1be76:	b11b      	cbz	r3, 1be80 <read_group_cb+0x48>
   1be78:	885a      	ldrh	r2, [r3, #2]
   1be7a:	42aa      	cmp	r2, r5
   1be7c:	d200      	bcs.n	1be80 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1be7e:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1be80:	2001      	movs	r0, #1
}
   1be82:	b004      	add	sp, #16
   1be84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1be88:	6861      	ldr	r1, [r4, #4]
   1be8a:	6830      	ldr	r0, [r6, #0]
   1be8c:	f012 f9a9 	bl	2e1e2 <bt_uuid_cmp>
   1be90:	b110      	cbz	r0, 1be98 <read_group_cb+0x60>
		data->group = NULL;
   1be92:	2300      	movs	r3, #0
   1be94:	6123      	str	r3, [r4, #16]
   1be96:	e7f3      	b.n	1be80 <read_group_cb+0x48>
	if (data->rsp->len &&
   1be98:	68e3      	ldr	r3, [r4, #12]
   1be9a:	68a0      	ldr	r0, [r4, #8]
   1be9c:	781a      	ldrb	r2, [r3, #0]
   1be9e:	b13a      	cbz	r2, 1beb0 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1bea0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   1bea4:	8981      	ldrh	r1, [r0, #12]
   1bea6:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1bea8:	4293      	cmp	r3, r2
   1beaa:	da01      	bge.n	1beb0 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1beac:	2000      	movs	r0, #0
   1beae:	e7e8      	b.n	1be82 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1beb0:	2104      	movs	r1, #4
   1beb2:	3008      	adds	r0, #8
   1beb4:	f005 fa60 	bl	21378 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1beb8:	4b09      	ldr	r3, [pc, #36]	; (1bee0 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1beba:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1bebc:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1bebe:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1bec0:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1bec2:	4631      	mov	r1, r6
   1bec4:	9300      	str	r3, [sp, #0]
   1bec6:	9401      	str	r4, [sp, #4]
   1bec8:	2300      	movs	r3, #0
   1beca:	4638      	mov	r0, r7
   1becc:	f012 fe41 	bl	2eb52 <att_chan_read>
	if (read < 0) {
   1bed0:	2800      	cmp	r0, #0
   1bed2:	dbeb      	blt.n	1beac <read_group_cb+0x74>
	if (!data->group) {
   1bed4:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1bed6:	3800      	subs	r0, #0
   1bed8:	bf18      	it	ne
   1beda:	2001      	movne	r0, #1
   1bedc:	e7d1      	b.n	1be82 <read_group_cb+0x4a>
   1bede:	bf00      	nop
   1bee0:	0002ec69 	.word	0x0002ec69

0001bee4 <read_type_cb>:
{
   1bee4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1bee8:	f8d2 8000 	ldr.w	r8, [r2]
{
   1beec:	4606      	mov	r6, r0
   1beee:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1bef0:	6800      	ldr	r0, [r0, #0]
   1bef2:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1bef4:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   1bef8:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1befa:	f012 f972 	bl	2e1e2 <bt_uuid_cmp>
   1befe:	4607      	mov	r7, r0
   1bf00:	2800      	cmp	r0, #0
   1bf02:	d13e      	bne.n	1bf82 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1bf04:	4628      	mov	r0, r5
   1bf06:	2215      	movs	r2, #21
   1bf08:	4631      	mov	r1, r6
   1bf0a:	f013 fc40 	bl	2f78e <bt_gatt_check_perm>
   1bf0e:	4605      	mov	r5, r0
   1bf10:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1bf12:	b148      	cbz	r0, 1bf28 <read_type_cb+0x44>
		if (data->rsp->len) {
   1bf14:	68e3      	ldr	r3, [r4, #12]
   1bf16:	781b      	ldrb	r3, [r3, #0]
   1bf18:	b923      	cbnz	r3, 1bf24 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1bf1a:	2500      	movs	r5, #0
}
   1bf1c:	4628      	mov	r0, r5
   1bf1e:	b003      	add	sp, #12
   1bf20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   1bf24:	7527      	strb	r7, [r4, #20]
   1bf26:	e7f8      	b.n	1bf1a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1bf28:	68a0      	ldr	r0, [r4, #8]
   1bf2a:	f005 f955 	bl	211d8 <net_buf_frag_last>
   1bf2e:	2102      	movs	r1, #2
   1bf30:	3008      	adds	r0, #8
   1bf32:	f005 fa21 	bl	21378 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1bf36:	4b14      	ldr	r3, [pc, #80]	; (1bf88 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1bf38:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1bf3a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   1bf3c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1bf40:	4631      	mov	r1, r6
   1bf42:	9300      	str	r3, [sp, #0]
   1bf44:	9401      	str	r4, [sp, #4]
   1bf46:	462b      	mov	r3, r5
   1bf48:	4640      	mov	r0, r8
   1bf4a:	f012 fe02 	bl	2eb52 <att_chan_read>
	if (read < 0) {
   1bf4e:	2800      	cmp	r0, #0
   1bf50:	da07      	bge.n	1bf62 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1bf52:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1bf56:	bf26      	itte	cs
   1bf58:	4240      	negcs	r0, r0
   1bf5a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1bf5c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1bf5e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1bf60:	e7dc      	b.n	1bf1c <read_type_cb+0x38>
	if (!data->item) {
   1bf62:	6923      	ldr	r3, [r4, #16]
   1bf64:	2b00      	cmp	r3, #0
   1bf66:	d0d8      	beq.n	1bf1a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1bf68:	68a0      	ldr	r0, [r4, #8]
   1bf6a:	f012 fd02 	bl	2e972 <net_buf_frags_len>
   1bf6e:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1bf72:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1bf74:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1bf76:	7818      	ldrb	r0, [r3, #0]
   1bf78:	4285      	cmp	r5, r0
   1bf7a:	bf94      	ite	ls
   1bf7c:	2500      	movls	r5, #0
   1bf7e:	2501      	movhi	r5, #1
   1bf80:	e7cc      	b.n	1bf1c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1bf82:	2501      	movs	r5, #1
   1bf84:	e7ca      	b.n	1bf1c <read_type_cb+0x38>
   1bf86:	bf00      	nop
   1bf88:	0002e98f 	.word	0x0002e98f

0001bf8c <find_type_cb>:
{
   1bf8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1bf90:	f8d2 9000 	ldr.w	r9, [r2]
{
   1bf94:	b091      	sub	sp, #68	; 0x44
   1bf96:	4607      	mov	r7, r0
   1bf98:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1bf9a:	2500      	movs	r5, #0
   1bf9c:	f642 0301 	movw	r3, #10241	; 0x2801
   1bfa0:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1bfa2:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1bfa6:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1bfaa:	a90b      	add	r1, sp, #44	; 0x2c
{
   1bfac:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1bfae:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1bfb2:	f012 f916 	bl	2e1e2 <bt_uuid_cmp>
   1bfb6:	2800      	cmp	r0, #0
   1bfb8:	d06a      	beq.n	1c090 <find_type_cb+0x104>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1bfba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1bfbe:	6838      	ldr	r0, [r7, #0]
   1bfc0:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1bfc4:	a90b      	add	r1, sp, #44	; 0x2c
   1bfc6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1bfca:	f012 f90a 	bl	2e1e2 <bt_uuid_cmp>
   1bfce:	b138      	cbz	r0, 1bfe0 <find_type_cb+0x54>
		if (data->group &&
   1bfd0:	68a3      	ldr	r3, [r4, #8]
   1bfd2:	b11b      	cbz	r3, 1bfdc <find_type_cb+0x50>
   1bfd4:	885a      	ldrh	r2, [r3, #2]
   1bfd6:	42b2      	cmp	r2, r6
   1bfd8:	d200      	bcs.n	1bfdc <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1bfda:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1bfdc:	2001      	movs	r0, #1
   1bfde:	e009      	b.n	1bff4 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1bfe0:	6861      	ldr	r1, [r4, #4]
   1bfe2:	4608      	mov	r0, r1
   1bfe4:	f012 fcc5 	bl	2e972 <net_buf_frags_len>
   1bfe8:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1bfec:	1a1b      	subs	r3, r3, r0
   1bfee:	2b03      	cmp	r3, #3
   1bff0:	d803      	bhi.n	1bffa <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1bff2:	2000      	movs	r0, #0
}
   1bff4:	b011      	add	sp, #68	; 0x44
   1bff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1bffa:	4608      	mov	r0, r1
   1bffc:	f005 f8ec 	bl	211d8 <net_buf_frag_last>
   1c000:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1c002:	6860      	ldr	r0, [r4, #4]
   1c004:	f012 fcb5 	bl	2e972 <net_buf_frags_len>
   1c008:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1c00c:	f105 0b08 	add.w	fp, r5, #8
   1c010:	ebaa 0a00 	sub.w	sl, sl, r0
   1c014:	4658      	mov	r0, fp
   1c016:	f013 fd28 	bl	2fa6a <net_buf_simple_tailroom>
   1c01a:	4582      	cmp	sl, r0
   1c01c:	d23b      	bcs.n	1c096 <find_type_cb+0x10a>
   1c01e:	6860      	ldr	r0, [r4, #4]
   1c020:	f012 fca7 	bl	2e972 <net_buf_frags_len>
   1c024:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1c028:	1a18      	subs	r0, r3, r0
	if (!len) {
   1c02a:	b970      	cbnz	r0, 1c04a <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1c02c:	6863      	ldr	r3, [r4, #4]
   1c02e:	7998      	ldrb	r0, [r3, #6]
   1c030:	f004 fe70 	bl	20d14 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1c034:	2200      	movs	r2, #0
   1c036:	2300      	movs	r3, #0
   1c038:	f013 fcf8 	bl	2fa2c <net_buf_alloc_fixed>
		if (!frag) {
   1c03c:	4605      	mov	r5, r0
   1c03e:	2800      	cmp	r0, #0
   1c040:	d0d7      	beq.n	1bff2 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1c042:	4601      	mov	r1, r0
   1c044:	6860      	ldr	r0, [r4, #4]
   1c046:	f005 f90f 	bl	21268 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1c04a:	2300      	movs	r3, #0
   1c04c:	9300      	str	r3, [sp, #0]
   1c04e:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1c052:	4639      	mov	r1, r7
   1c054:	2310      	movs	r3, #16
   1c056:	aa02      	add	r2, sp, #8
   1c058:	4640      	mov	r0, r8
   1c05a:	47c8      	blx	r9
	if (read < 0) {
   1c05c:	1e07      	subs	r7, r0, #0
   1c05e:	db17      	blt.n	1c090 <find_type_cb+0x104>
	if (read != data->value_len) {
   1c060:	7c22      	ldrb	r2, [r4, #16]
   1c062:	68e0      	ldr	r0, [r4, #12]
   1c064:	42ba      	cmp	r2, r7
   1c066:	d03f      	beq.n	1c0e8 <find_type_cb+0x15c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1c068:	4601      	mov	r1, r0
   1c06a:	a80b      	add	r0, sp, #44	; 0x2c
   1c06c:	f012 f8e3 	bl	2e236 <bt_uuid_create>
   1c070:	b9a8      	cbnz	r0, 1c09e <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1c072:	4a1f      	ldr	r2, [pc, #124]	; (1c0f0 <find_type_cb+0x164>)
   1c074:	6813      	ldr	r3, [r2, #0]
   1c076:	f013 0f06 	tst.w	r3, #6
   1c07a:	d009      	beq.n	1c090 <find_type_cb+0x104>
   1c07c:	4b1d      	ldr	r3, [pc, #116]	; (1c0f4 <find_type_cb+0x168>)
   1c07e:	7c21      	ldrb	r1, [r4, #16]
   1c080:	481d      	ldr	r0, [pc, #116]	; (1c0f8 <find_type_cb+0x16c>)
   1c082:	1ad2      	subs	r2, r2, r3
   1c084:	0892      	lsrs	r2, r2, #2
   1c086:	0192      	lsls	r2, r2, #6
   1c088:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   1c08c:	f010 fe34 	bl	2ccf8 <log_1>
	data->group = NULL;
   1c090:	2300      	movs	r3, #0
   1c092:	60a3      	str	r3, [r4, #8]
   1c094:	e7a2      	b.n	1bfdc <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1c096:	4658      	mov	r0, fp
   1c098:	f013 fce7 	bl	2fa6a <net_buf_simple_tailroom>
   1c09c:	e7c5      	b.n	1c02a <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1c09e:	b2fa      	uxtb	r2, r7
   1c0a0:	a902      	add	r1, sp, #8
   1c0a2:	a806      	add	r0, sp, #24
   1c0a4:	f012 f8c7 	bl	2e236 <bt_uuid_create>
   1c0a8:	b968      	cbnz	r0, 1c0c6 <find_type_cb+0x13a>
			BT_WARN("Unable to create UUID: size %d", read);
   1c0aa:	4a11      	ldr	r2, [pc, #68]	; (1c0f0 <find_type_cb+0x164>)
   1c0ac:	6813      	ldr	r3, [r2, #0]
   1c0ae:	f013 0f06 	tst.w	r3, #6
   1c0b2:	d0ed      	beq.n	1c090 <find_type_cb+0x104>
   1c0b4:	4b0f      	ldr	r3, [pc, #60]	; (1c0f4 <find_type_cb+0x168>)
   1c0b6:	4811      	ldr	r0, [pc, #68]	; (1c0fc <find_type_cb+0x170>)
   1c0b8:	1ad2      	subs	r2, r2, r3
   1c0ba:	0892      	lsrs	r2, r2, #2
   1c0bc:	0192      	lsls	r2, r2, #6
   1c0be:	f042 0202 	orr.w	r2, r2, #2
   1c0c2:	4639      	mov	r1, r7
   1c0c4:	e7e2      	b.n	1c08c <find_type_cb+0x100>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1c0c6:	a906      	add	r1, sp, #24
   1c0c8:	a80b      	add	r0, sp, #44	; 0x2c
   1c0ca:	f012 f88a 	bl	2e1e2 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1c0ce:	2800      	cmp	r0, #0
   1c0d0:	d1de      	bne.n	1c090 <find_type_cb+0x104>
	data->err = 0x00;
   1c0d2:	2300      	movs	r3, #0
   1c0d4:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1c0d6:	2104      	movs	r1, #4
   1c0d8:	f105 0008 	add.w	r0, r5, #8
   1c0dc:	f005 f94c 	bl	21378 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1c0e0:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1c0e2:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1c0e4:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1c0e6:	e779      	b.n	1bfdc <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   1c0e8:	a902      	add	r1, sp, #8
   1c0ea:	f014 fa68 	bl	305be <memcmp>
   1c0ee:	e7ee      	b.n	1c0ce <find_type_cb+0x142>
   1c0f0:	200007a8 	.word	0x200007a8
   1c0f4:	200007a8 	.word	0x200007a8
   1c0f8:	000356d1 	.word	0x000356d1
   1c0fc:	000356f0 	.word	0x000356f0

0001c100 <att_get>:
{
   1c100:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1c102:	7a83      	ldrb	r3, [r0, #10]
   1c104:	2b07      	cmp	r3, #7
   1c106:	d011      	beq.n	1c12c <att_get+0x2c>
		BT_WARN("Not connected");
   1c108:	491e      	ldr	r1, [pc, #120]	; (1c184 <att_get+0x84>)
   1c10a:	680b      	ldr	r3, [r1, #0]
   1c10c:	f013 0f06 	tst.w	r3, #6
   1c110:	d102      	bne.n	1c118 <att_get+0x18>
		return NULL;
   1c112:	2400      	movs	r4, #0
}
   1c114:	4620      	mov	r0, r4
   1c116:	bd10      	pop	{r4, pc}
   1c118:	4b1b      	ldr	r3, [pc, #108]	; (1c188 <att_get+0x88>)
		BT_WARN("Not connected");
   1c11a:	481c      	ldr	r0, [pc, #112]	; (1c18c <att_get+0x8c>)
   1c11c:	1ac9      	subs	r1, r1, r3
   1c11e:	0889      	lsrs	r1, r1, #2
   1c120:	0189      	lsls	r1, r1, #6
   1c122:	f041 0102 	orr.w	r1, r1, #2
   1c126:	f010 fdda 	bl	2ccde <log_0>
   1c12a:	e7f2      	b.n	1c112 <att_get+0x12>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1c12c:	2104      	movs	r1, #4
   1c12e:	f012 fbea 	bl	2e906 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1c132:	4604      	mov	r4, r0
   1c134:	b968      	cbnz	r0, 1c152 <att_get+0x52>
		BT_ERR("Unable to find ATT channel");
   1c136:	4913      	ldr	r1, [pc, #76]	; (1c184 <att_get+0x84>)
   1c138:	680b      	ldr	r3, [r1, #0]
   1c13a:	075a      	lsls	r2, r3, #29
   1c13c:	d0e9      	beq.n	1c112 <att_get+0x12>
   1c13e:	4b12      	ldr	r3, [pc, #72]	; (1c188 <att_get+0x88>)
   1c140:	4813      	ldr	r0, [pc, #76]	; (1c190 <att_get+0x90>)
   1c142:	1ac9      	subs	r1, r1, r3
   1c144:	0889      	lsrs	r1, r1, #2
   1c146:	0189      	lsls	r1, r1, #6
   1c148:	f041 0101 	orr.w	r1, r1, #1
   1c14c:	f010 fdc7 	bl	2ccde <log_0>
   1c150:	e7e0      	b.n	1c114 <att_get+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c152:	f3bf 8f5b 	dmb	ish
   1c156:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1c15a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1c15e:	075b      	lsls	r3, r3, #29
   1c160:	d50c      	bpl.n	1c17c <att_get+0x7c>
		BT_WARN("ATT channel flagged as disconnected");
   1c162:	4908      	ldr	r1, [pc, #32]	; (1c184 <att_get+0x84>)
   1c164:	680b      	ldr	r3, [r1, #0]
   1c166:	f013 0f06 	tst.w	r3, #6
   1c16a:	d0d2      	beq.n	1c112 <att_get+0x12>
   1c16c:	4b06      	ldr	r3, [pc, #24]	; (1c188 <att_get+0x88>)
   1c16e:	4809      	ldr	r0, [pc, #36]	; (1c194 <att_get+0x94>)
   1c170:	1ac9      	subs	r1, r1, r3
   1c172:	0889      	lsrs	r1, r1, #2
   1c174:	0189      	lsls	r1, r1, #6
   1c176:	f041 0102 	orr.w	r1, r1, #2
   1c17a:	e7d4      	b.n	1c126 <att_get+0x26>
	return att_chan->att;
   1c17c:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1c180:	e7c8      	b.n	1c114 <att_get+0x14>
   1c182:	bf00      	nop
   1c184:	200007a8 	.word	0x200007a8
   1c188:	200007a8 	.word	0x200007a8
   1c18c:	0003570f 	.word	0x0003570f
   1c190:	0003571d 	.word	0x0003571d
   1c194:	00035738 	.word	0x00035738

0001c198 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1c198:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1c19a:	2300      	movs	r3, #0
{
   1c19c:	4606      	mov	r6, r0
   1c19e:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1c1a0:	482c      	ldr	r0, [pc, #176]	; (1c254 <bt_att_accept+0xbc>)
   1c1a2:	2200      	movs	r2, #0
   1c1a4:	4669      	mov	r1, sp
   1c1a6:	f008 fd67 	bl	24c78 <k_mem_slab_alloc>
   1c1aa:	4604      	mov	r4, r0
   1c1ac:	b180      	cbz	r0, 1c1d0 <bt_att_accept+0x38>
		BT_ERR("No available ATT context for conn %p", conn);
   1c1ae:	4a2a      	ldr	r2, [pc, #168]	; (1c258 <bt_att_accept+0xc0>)
   1c1b0:	6813      	ldr	r3, [r2, #0]
   1c1b2:	0759      	lsls	r1, r3, #29
   1c1b4:	d009      	beq.n	1c1ca <bt_att_accept+0x32>
   1c1b6:	4b29      	ldr	r3, [pc, #164]	; (1c25c <bt_att_accept+0xc4>)
   1c1b8:	4829      	ldr	r0, [pc, #164]	; (1c260 <bt_att_accept+0xc8>)
   1c1ba:	1ad2      	subs	r2, r2, r3
   1c1bc:	0892      	lsrs	r2, r2, #2
   1c1be:	0192      	lsls	r2, r2, #6
   1c1c0:	f042 0201 	orr.w	r2, r2, #1
   1c1c4:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1c1c6:	f010 fd97 	bl	2ccf8 <log_1>
		BT_ERR("No available ATT context for conn %p", conn);
   1c1ca:	f06f 040b 	mvn.w	r4, #11
   1c1ce:	e03d      	b.n	1c24c <bt_att_accept+0xb4>
   1c1d0:	4601      	mov	r1, r0
   1c1d2:	2230      	movs	r2, #48	; 0x30
   1c1d4:	9800      	ldr	r0, [sp, #0]
   1c1d6:	f014 fa28 	bl	3062a <memset>
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
	att->conn = conn;
   1c1da:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1c1dc:	4821      	ldr	r0, [pc, #132]	; (1c264 <bt_att_accept+0xcc>)
	list->tail = NULL;
   1c1de:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   1c1e0:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1c1e4:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   1c1e8:	2200      	movs	r2, #0
   1c1ea:	2300      	movs	r3, #0
   1c1ec:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1c1ee:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1c1f0:	f008 fd42 	bl	24c78 <k_mem_slab_alloc>
   1c1f4:	4604      	mov	r4, r0
   1c1f6:	b160      	cbz	r0, 1c212 <bt_att_accept+0x7a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1c1f8:	4a17      	ldr	r2, [pc, #92]	; (1c258 <bt_att_accept+0xc0>)
   1c1fa:	6813      	ldr	r3, [r2, #0]
   1c1fc:	075b      	lsls	r3, r3, #29
   1c1fe:	d0e4      	beq.n	1c1ca <bt_att_accept+0x32>
   1c200:	4b16      	ldr	r3, [pc, #88]	; (1c25c <bt_att_accept+0xc4>)
   1c202:	6829      	ldr	r1, [r5, #0]
   1c204:	4818      	ldr	r0, [pc, #96]	; (1c268 <bt_att_accept+0xd0>)
   1c206:	1ad2      	subs	r2, r2, r3
   1c208:	0892      	lsrs	r2, r2, #2
   1c20a:	0192      	lsls	r2, r2, #6
   1c20c:	f042 0201 	orr.w	r2, r2, #1
   1c210:	e7d9      	b.n	1c1c6 <bt_att_accept+0x2e>
   1c212:	4601      	mov	r1, r0
   1c214:	f44f 72ac 	mov.w	r2, #344	; 0x158
   1c218:	9801      	ldr	r0, [sp, #4]
   1c21a:	f014 fa06 	bl	3062a <memset>
	chan->chan.chan.ops = &ops;
   1c21e:	9801      	ldr	r0, [sp, #4]
   1c220:	4b12      	ldr	r3, [pc, #72]	; (1c26c <bt_att_accept+0xd4>)
   1c222:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   1c224:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1c228:	f014 f861 	bl	302ee <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c22c:	9b01      	ldr	r3, [sp, #4]
   1c22e:	f3bf 8f5b 	dmb	ish
   1c232:	33f8      	adds	r3, #248	; 0xf8
   1c234:	e853 2f00 	ldrex	r2, [r3]
   1c238:	e843 4100 	strex	r1, r4, [r3]
   1c23c:	2900      	cmp	r1, #0
   1c23e:	d1f9      	bne.n	1c234 <bt_att_accept+0x9c>
   1c240:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1c244:	9b01      	ldr	r3, [sp, #4]
   1c246:	f843 5b08 	str.w	r5, [r3], #8
	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1c24a:	603b      	str	r3, [r7, #0]

	return 0;
}
   1c24c:	4620      	mov	r0, r4
   1c24e:	b003      	add	sp, #12
   1c250:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1c252:	bf00      	nop
   1c254:	20000810 	.word	0x20000810
   1c258:	200007a8 	.word	0x200007a8
   1c25c:	200007a8 	.word	0x200007a8
   1c260:	0003575c 	.word	0x0003575c
   1c264:	20000830 	.word	0x20000830
   1c268:	00035781 	.word	0x00035781
   1c26c:	20000524 	.word	0x20000524

0001c270 <bt_att_connected>:
{
   1c270:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1c272:	2104      	movs	r1, #4
{
   1c274:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1c276:	6800      	ldr	r0, [r0, #0]
   1c278:	f012 fb35 	bl	2e8e6 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   1c27c:	4605      	mov	r5, r0
   1c27e:	b970      	cbnz	r0, 1c29e <bt_att_connected+0x2e>
   1c280:	491c      	ldr	r1, [pc, #112]	; (1c2f4 <bt_att_connected+0x84>)
   1c282:	4a1d      	ldr	r2, [pc, #116]	; (1c2f8 <bt_att_connected+0x88>)
   1c284:	481d      	ldr	r0, [pc, #116]	; (1c2fc <bt_att_connected+0x8c>)
   1c286:	f640 2381 	movw	r3, #2689	; 0xa81
   1c28a:	f010 f986 	bl	2c59a <printk>
   1c28e:	481c      	ldr	r0, [pc, #112]	; (1c300 <bt_att_connected+0x90>)
   1c290:	f010 f983 	bl	2c59a <printk>
   1c294:	4818      	ldr	r0, [pc, #96]	; (1c2f8 <bt_att_connected+0x88>)
   1c296:	f640 2181 	movw	r1, #2689	; 0xa81
   1c29a:	f010 fbbf 	bl	2ca1c <assert_post_action>
	struct bt_att *att = att_chan->att;
   1c29e:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   1c2a2:	6aab      	ldr	r3, [r5, #40]	; 0x28
	att_chan = ATT_CHAN(chan);
   1c2a4:	f1a4 0608 	sub.w	r6, r4, #8
	if (sys_slist_is_empty(&att->chans)) {
   1c2a8:	b91b      	cbnz	r3, 1c2b2 <bt_att_connected+0x42>
   1c2aa:	f105 000c 	add.w	r0, r5, #12
   1c2ae:	f014 f81e 	bl	302ee <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   1c2b2:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
   1c2b4:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   1c2b8:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   1c2ba:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	list->head = node;
   1c2be:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1c2c0:	b902      	cbnz	r2, 1c2c4 <bt_att_connected+0x54>
	list->tail = node;
   1c2c2:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c2c4:	f3bf 8f5b 	dmb	ish
   1c2c8:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1c2cc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1c2d0:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c2d2:	bf58      	it	pl
   1c2d4:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   1c2d6:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c2d8:	bf5c      	itt	pl
   1c2da:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1c2de:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   1c2e2:	f012 fbf0 	bl	2eac6 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1c2e6:	f504 708c 	add.w	r0, r4, #280	; 0x118
   1c2ea:	4906      	ldr	r1, [pc, #24]	; (1c304 <bt_att_connected+0x94>)
}
   1c2ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1c2f0:	f00a b95a 	b.w	265a8 <k_work_init_delayable>
   1c2f4:	000356b7 	.word	0x000356b7
   1c2f8:	00035688 	.word	0x00035688
   1c2fc:	00032486 	.word	0x00032486
   1c300:	000357a6 	.word	0x000357a6
   1c304:	0001cdd5 	.word	0x0001cdd5

0001c308 <att_write_cmd>:
{
   1c308:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c30a:	4604      	mov	r4, r0
   1c30c:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1c30e:	f101 0008 	add.w	r0, r1, #8
   1c312:	460d      	mov	r5, r1
   1c314:	f013 fb9d 	bl	2fa52 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c318:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1c31a:	68af      	ldr	r7, [r5, #8]
   1c31c:	89ad      	ldrh	r5, [r5, #12]
   1c31e:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c320:	2100      	movs	r1, #0
   1c322:	6818      	ldr	r0, [r3, #0]
   1c324:	f013 fae9 	bl	2f8fa <bt_gatt_change_aware>
   1c328:	b328      	cbz	r0, 1c376 <att_write_cmd+0x6e>
	if (!handle) {
   1c32a:	b336      	cbz	r6, 1c37a <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   1c32c:	2214      	movs	r2, #20
   1c32e:	2100      	movs	r1, #0
   1c330:	a801      	add	r0, sp, #4
   1c332:	f014 f97a 	bl	3062a <memset>
	data.conn = chan->att->conn;
   1c336:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c338:	4a11      	ldr	r2, [pc, #68]	; (1c380 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   1c33a:	681b      	ldr	r3, [r3, #0]
   1c33c:	9300      	str	r3, [sp, #0]
	data.req = req;
   1c33e:	2300      	movs	r3, #0
   1c340:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   1c344:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c348:	2301      	movs	r3, #1
   1c34a:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c34e:	4631      	mov	r1, r6
   1c350:	466b      	mov	r3, sp
   1c352:	4630      	mov	r0, r6
	data.value = value;
   1c354:	9703      	str	r7, [sp, #12]
	data.len = len;
   1c356:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c35a:	f012 fbef 	bl	2eb3c <bt_gatt_foreach_attr>
	if (data.err) {
   1c35e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1c362:	b92b      	cbnz	r3, 1c370 <att_write_cmd+0x68>
	if (data.buf) {
   1c364:	9901      	ldr	r1, [sp, #4]
   1c366:	b119      	cbz	r1, 1c370 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c368:	4a06      	ldr	r2, [pc, #24]	; (1c384 <att_write_cmd+0x7c>)
   1c36a:	4620      	mov	r0, r4
   1c36c:	f012 fb9d 	bl	2eaaa <bt_att_chan_send_rsp>
   1c370:	2000      	movs	r0, #0
}
   1c372:	b007      	add	sp, #28
   1c374:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c376:	2012      	movs	r0, #18
   1c378:	e7fb      	b.n	1c372 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c37a:	2001      	movs	r0, #1
   1c37c:	e7f9      	b.n	1c372 <att_write_cmd+0x6a>
   1c37e:	bf00      	nop
   1c380:	0002ee1d 	.word	0x0002ee1d
   1c384:	0002ed61 	.word	0x0002ed61

0001c388 <bt_att_chan_create_pdu>:
{
   1c388:	b538      	push	{r3, r4, r5, lr}
   1c38a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c38c:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1c390:	3201      	adds	r2, #1
   1c392:	428a      	cmp	r2, r1
   1c394:	d911      	bls.n	1c3ba <bt_att_chan_create_pdu+0x32>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1c396:	4b1e      	ldr	r3, [pc, #120]	; (1c410 <bt_att_chan_create_pdu+0x88>)
   1c398:	6818      	ldr	r0, [r3, #0]
   1c39a:	f010 0f06 	tst.w	r0, #6
   1c39e:	d102      	bne.n	1c3a6 <bt_att_chan_create_pdu+0x1e>
		return NULL;
   1c3a0:	2400      	movs	r4, #0
}
   1c3a2:	4620      	mov	r0, r4
   1c3a4:	bd38      	pop	{r3, r4, r5, pc}
   1c3a6:	481b      	ldr	r0, [pc, #108]	; (1c414 <bt_att_chan_create_pdu+0x8c>)
   1c3a8:	1a1b      	subs	r3, r3, r0
   1c3aa:	089b      	lsrs	r3, r3, #2
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1c3ac:	019b      	lsls	r3, r3, #6
   1c3ae:	481a      	ldr	r0, [pc, #104]	; (1c418 <bt_att_chan_create_pdu+0x90>)
   1c3b0:	f043 0302 	orr.w	r3, r3, #2
   1c3b4:	f010 fcb4 	bl	2cd20 <log_2>
   1c3b8:	e7f2      	b.n	1c3a0 <bt_att_chan_create_pdu+0x18>
	switch (att_op_get_type(op)) {
   1c3ba:	4628      	mov	r0, r5
   1c3bc:	f012 faf9 	bl	2e9b2 <att_op_get_type>
   1c3c0:	2802      	cmp	r0, #2
   1c3c2:	d001      	beq.n	1c3c8 <bt_att_chan_create_pdu+0x40>
   1c3c4:	2804      	cmp	r0, #4
   1c3c6:	d117      	bne.n	1c3f8 <bt_att_chan_create_pdu+0x70>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1c3c8:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1c3cc:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1c3ce:	2100      	movs	r1, #0
   1c3d0:	4608      	mov	r0, r1
   1c3d2:	f012 fa4e 	bl	2e872 <bt_l2cap_create_pdu_timeout>
   1c3d6:	4604      	mov	r4, r0
	if (!buf) {
   1c3d8:	b998      	cbnz	r0, 1c402 <bt_att_chan_create_pdu+0x7a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1c3da:	4a0d      	ldr	r2, [pc, #52]	; (1c410 <bt_att_chan_create_pdu+0x88>)
   1c3dc:	6813      	ldr	r3, [r2, #0]
   1c3de:	075b      	lsls	r3, r3, #29
   1c3e0:	d0de      	beq.n	1c3a0 <bt_att_chan_create_pdu+0x18>
   1c3e2:	4b0c      	ldr	r3, [pc, #48]	; (1c414 <bt_att_chan_create_pdu+0x8c>)
   1c3e4:	480d      	ldr	r0, [pc, #52]	; (1c41c <bt_att_chan_create_pdu+0x94>)
   1c3e6:	1ad2      	subs	r2, r2, r3
   1c3e8:	0892      	lsrs	r2, r2, #2
   1c3ea:	0192      	lsls	r2, r2, #6
   1c3ec:	f042 0201 	orr.w	r2, r2, #1
   1c3f0:	4629      	mov	r1, r5
   1c3f2:	f010 fc81 	bl	2ccf8 <log_1>
   1c3f6:	e7d4      	b.n	1c3a2 <bt_att_chan_create_pdu+0x1a>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1c3f8:	f04f 32ff 	mov.w	r2, #4294967295
   1c3fc:	f04f 33ff 	mov.w	r3, #4294967295
   1c400:	e7e5      	b.n	1c3ce <bt_att_chan_create_pdu+0x46>
	return net_buf_simple_add(&buf->b, len);
   1c402:	2101      	movs	r1, #1
   1c404:	3008      	adds	r0, #8
   1c406:	f004 ffb7 	bl	21378 <net_buf_simple_add>
	hdr->code = op;
   1c40a:	7005      	strb	r5, [r0, #0]
	return buf;
   1c40c:	e7c9      	b.n	1c3a2 <bt_att_chan_create_pdu+0x1a>
   1c40e:	bf00      	nop
   1c410:	200007a8 	.word	0x200007a8
   1c414:	200007a8 	.word	0x200007a8
   1c418:	000357bd 	.word	0x000357bd
   1c41c:	000354cf 	.word	0x000354cf

0001c420 <att_indicate>:
{
   1c420:	b570      	push	{r4, r5, r6, lr}
   1c422:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   1c424:	f101 0008 	add.w	r0, r1, #8
   1c428:	460d      	mov	r5, r1
   1c42a:	f013 fb12 	bl	2fa52 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1c42e:	6826      	ldr	r6, [r4, #0]
   1c430:	89ab      	ldrh	r3, [r5, #12]
   1c432:	68aa      	ldr	r2, [r5, #8]
   1c434:	4601      	mov	r1, r0
   1c436:	6830      	ldr	r0, [r6, #0]
   1c438:	f013 fa34 	bl	2f8a4 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   1c43c:	211e      	movs	r1, #30
   1c43e:	2200      	movs	r2, #0
   1c440:	4620      	mov	r0, r4
   1c442:	f7ff ffa1 	bl	1c388 <bt_att_chan_create_pdu>
	if (!buf) {
   1c446:	4601      	mov	r1, r0
   1c448:	b118      	cbz	r0, 1c452 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   1c44a:	4a03      	ldr	r2, [pc, #12]	; (1c458 <att_indicate+0x38>)
   1c44c:	4620      	mov	r0, r4
   1c44e:	f012 fb2c 	bl	2eaaa <bt_att_chan_send_rsp>
}
   1c452:	2000      	movs	r0, #0
   1c454:	bd70      	pop	{r4, r5, r6, pc}
   1c456:	bf00      	nop
   1c458:	0002ed45 	.word	0x0002ed45

0001c45c <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1c45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c460:	4688      	mov	r8, r1
   1c462:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1c464:	2101      	movs	r1, #1
   1c466:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1c468:	4605      	mov	r5, r0
   1c46a:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1c46c:	f7ff ff8c 	bl	1c388 <bt_att_chan_create_pdu>
	if (!buf) {
   1c470:	4604      	mov	r4, r0
   1c472:	b178      	cbz	r0, 1c494 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1c474:	2104      	movs	r1, #4
   1c476:	3008      	adds	r0, #8
   1c478:	f004 ff7e 	bl	21378 <net_buf_simple_add>
	rsp->request = req;
   1c47c:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1c480:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1c482:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1c486:	4621      	mov	r1, r4
   1c488:	4628      	mov	r0, r5
   1c48a:	4a03      	ldr	r2, [pc, #12]	; (1c498 <send_err_rsp.part.0+0x3c>)
}
   1c48c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1c490:	f012 bb0b 	b.w	2eaaa <bt_att_chan_send_rsp>
}
   1c494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1c498:	0002ed61 	.word	0x0002ed61

0001c49c <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   1c49c:	898b      	ldrh	r3, [r1, #12]
{
   1c49e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c4a2:	4604      	mov	r4, r0
   1c4a4:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   1c4a6:	b97b      	cbnz	r3, 1c4c8 <bt_att_recv+0x2c>
		BT_ERR("Too small ATT PDU received");
   1c4a8:	4957      	ldr	r1, [pc, #348]	; (1c608 <bt_att_recv+0x16c>)
   1c4aa:	680b      	ldr	r3, [r1, #0]
   1c4ac:	075d      	lsls	r5, r3, #29
   1c4ae:	d008      	beq.n	1c4c2 <bt_att_recv+0x26>
   1c4b0:	4b56      	ldr	r3, [pc, #344]	; (1c60c <bt_att_recv+0x170>)
   1c4b2:	4857      	ldr	r0, [pc, #348]	; (1c610 <bt_att_recv+0x174>)
   1c4b4:	1ac9      	subs	r1, r1, r3
   1c4b6:	0889      	lsrs	r1, r1, #2
   1c4b8:	0189      	lsls	r1, r1, #6
   1c4ba:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   1c4be:	f010 fc0e 	bl	2ccde <log_0>
}
   1c4c2:	2000      	movs	r0, #0
   1c4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1c4c8:	2101      	movs	r1, #1
   1c4ca:	f108 0008 	add.w	r0, r8, #8
   1c4ce:	f004 ff31 	bl	21334 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1c4d2:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1c4d6:	4605      	mov	r5, r0
   1c4d8:	2b00      	cmp	r3, #0
   1c4da:	d0f2      	beq.n	1c4c2 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1c4dc:	4a4d      	ldr	r2, [pc, #308]	; (1c614 <bt_att_recv+0x178>)
   1c4de:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1c4e0:	f1a4 0708 	sub.w	r7, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1c4e4:	2300      	movs	r3, #0
   1c4e6:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1c4e8:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   1c4ec:	4288      	cmp	r0, r1
   1c4ee:	d121      	bne.n	1c534 <bt_att_recv+0x98>
		if (handler->type == ATT_REQUEST &&
   1c4f0:	00d8      	lsls	r0, r3, #3
   1c4f2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1c4f6:	789e      	ldrb	r6, [r3, #2]
   1c4f8:	2e01      	cmp	r6, #1
   1c4fa:	d13c      	bne.n	1c576 <bt_att_recv+0xda>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c4fc:	f3bf 8f5b 	dmb	ish
   1c500:	34f0      	adds	r4, #240	; 0xf0
   1c502:	e854 3f00 	ldrex	r3, [r4]
   1c506:	f043 0201 	orr.w	r2, r3, #1
   1c50a:	e844 2100 	strex	r1, r2, [r4]
   1c50e:	2900      	cmp	r1, #0
   1c510:	d1f7      	bne.n	1c502 <bt_att_recv+0x66>
   1c512:	f3bf 8f5b 	dmb	ish
   1c516:	07dc      	lsls	r4, r3, #31
   1c518:	d54b      	bpl.n	1c5b2 <bt_att_recv+0x116>
			BT_WARN("Ignoring unexpected request");
   1c51a:	493b      	ldr	r1, [pc, #236]	; (1c608 <bt_att_recv+0x16c>)
   1c51c:	680b      	ldr	r3, [r1, #0]
   1c51e:	f013 0f06 	tst.w	r3, #6
   1c522:	d0ce      	beq.n	1c4c2 <bt_att_recv+0x26>
   1c524:	4b39      	ldr	r3, [pc, #228]	; (1c60c <bt_att_recv+0x170>)
   1c526:	483c      	ldr	r0, [pc, #240]	; (1c618 <bt_att_recv+0x17c>)
   1c528:	1ac9      	subs	r1, r1, r3
   1c52a:	0889      	lsrs	r1, r1, #2
   1c52c:	0189      	lsls	r1, r1, #6
   1c52e:	f041 0102 	orr.w	r1, r1, #2
   1c532:	e7c4      	b.n	1c4be <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1c534:	3301      	adds	r3, #1
   1c536:	2b1c      	cmp	r3, #28
   1c538:	d1d6      	bne.n	1c4e8 <bt_att_recv+0x4c>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1c53a:	4a33      	ldr	r2, [pc, #204]	; (1c608 <bt_att_recv+0x16c>)
   1c53c:	6813      	ldr	r3, [r2, #0]
   1c53e:	f013 0f06 	tst.w	r3, #6
   1c542:	d008      	beq.n	1c556 <bt_att_recv+0xba>
   1c544:	4b31      	ldr	r3, [pc, #196]	; (1c60c <bt_att_recv+0x170>)
   1c546:	4835      	ldr	r0, [pc, #212]	; (1c61c <bt_att_recv+0x180>)
   1c548:	1ad2      	subs	r2, r2, r3
   1c54a:	0892      	lsrs	r2, r2, #2
   1c54c:	0192      	lsls	r2, r2, #6
   1c54e:	f042 0202 	orr.w	r2, r2, #2
   1c552:	f010 fbd1 	bl	2ccf8 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1c556:	7829      	ldrb	r1, [r5, #0]
   1c558:	4608      	mov	r0, r1
   1c55a:	f012 fa2a 	bl	2e9b2 <att_op_get_type>
   1c55e:	2800      	cmp	r0, #0
   1c560:	d0af      	beq.n	1c4c2 <bt_att_recv+0x26>
   1c562:	2805      	cmp	r0, #5
   1c564:	d0ad      	beq.n	1c4c2 <bt_att_recv+0x26>
	if (!req) {
   1c566:	2900      	cmp	r1, #0
   1c568:	d0ab      	beq.n	1c4c2 <bt_att_recv+0x26>
   1c56a:	2306      	movs	r3, #6
   1c56c:	2200      	movs	r2, #0
   1c56e:	4638      	mov	r0, r7
   1c570:	f7ff ff74 	bl	1c45c <send_err_rsp.part.0>
   1c574:	e7a5      	b.n	1c4c2 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   1c576:	2e05      	cmp	r6, #5
   1c578:	d11b      	bne.n	1c5b2 <bt_att_recv+0x116>
   1c57a:	f3bf 8f5b 	dmb	ish
   1c57e:	34f0      	adds	r4, #240	; 0xf0
   1c580:	e854 3f00 	ldrex	r3, [r4]
   1c584:	f043 0202 	orr.w	r2, r3, #2
   1c588:	e844 2100 	strex	r1, r2, [r4]
   1c58c:	2900      	cmp	r1, #0
   1c58e:	d1f7      	bne.n	1c580 <bt_att_recv+0xe4>
   1c590:	f3bf 8f5b 	dmb	ish
   1c594:	0799      	lsls	r1, r3, #30
   1c596:	d50c      	bpl.n	1c5b2 <bt_att_recv+0x116>
			BT_WARN("Ignoring unexpected indication");
   1c598:	491b      	ldr	r1, [pc, #108]	; (1c608 <bt_att_recv+0x16c>)
   1c59a:	680b      	ldr	r3, [r1, #0]
   1c59c:	f013 0f06 	tst.w	r3, #6
   1c5a0:	d08f      	beq.n	1c4c2 <bt_att_recv+0x26>
   1c5a2:	4b1a      	ldr	r3, [pc, #104]	; (1c60c <bt_att_recv+0x170>)
   1c5a4:	481e      	ldr	r0, [pc, #120]	; (1c620 <bt_att_recv+0x184>)
   1c5a6:	1ac9      	subs	r1, r1, r3
   1c5a8:	0889      	lsrs	r1, r1, #2
   1c5aa:	0189      	lsls	r1, r1, #6
   1c5ac:	f041 0102 	orr.w	r1, r1, #2
   1c5b0:	e785      	b.n	1c4be <bt_att_recv+0x22>
	if (buf->len < handler->expect_len) {
   1c5b2:	eb0c 0300 	add.w	r3, ip, r0
   1c5b6:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   1c5ba:	785a      	ldrb	r2, [r3, #1]
   1c5bc:	428a      	cmp	r2, r1
   1c5be:	d912      	bls.n	1c5e6 <bt_att_recv+0x14a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1c5c0:	4b11      	ldr	r3, [pc, #68]	; (1c608 <bt_att_recv+0x16c>)
   1c5c2:	681a      	ldr	r2, [r3, #0]
   1c5c4:	0752      	lsls	r2, r2, #29
   1c5c6:	d009      	beq.n	1c5dc <bt_att_recv+0x140>
   1c5c8:	4a10      	ldr	r2, [pc, #64]	; (1c60c <bt_att_recv+0x170>)
   1c5ca:	4816      	ldr	r0, [pc, #88]	; (1c624 <bt_att_recv+0x188>)
   1c5cc:	1a9b      	subs	r3, r3, r2
   1c5ce:	089b      	lsrs	r3, r3, #2
   1c5d0:	019b      	lsls	r3, r3, #6
   1c5d2:	782a      	ldrb	r2, [r5, #0]
   1c5d4:	f043 0301 	orr.w	r3, r3, #1
   1c5d8:	f010 fba2 	bl	2cd20 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   1c5dc:	2e01      	cmp	r6, #1
   1c5de:	f47f af70 	bne.w	1c4c2 <bt_att_recv+0x26>
   1c5e2:	2304      	movs	r3, #4
   1c5e4:	e00a      	b.n	1c5fc <bt_att_recv+0x160>
		err = handler->func(att_chan, buf);
   1c5e6:	685b      	ldr	r3, [r3, #4]
   1c5e8:	4641      	mov	r1, r8
   1c5ea:	4638      	mov	r0, r7
   1c5ec:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1c5ee:	2e01      	cmp	r6, #1
		err = handler->func(att_chan, buf);
   1c5f0:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1c5f2:	f47f af66 	bne.w	1c4c2 <bt_att_recv+0x26>
   1c5f6:	2800      	cmp	r0, #0
   1c5f8:	f43f af63 	beq.w	1c4c2 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1c5fc:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1c5fe:	2900      	cmp	r1, #0
   1c600:	f43f af5f 	beq.w	1c4c2 <bt_att_recv+0x26>
   1c604:	e7b2      	b.n	1c56c <bt_att_recv+0xd0>
   1c606:	bf00      	nop
   1c608:	200007a8 	.word	0x200007a8
   1c60c:	200007a8 	.word	0x200007a8
   1c610:	000357e2 	.word	0x000357e2
   1c614:	000317b0 	.word	0x000317b0
   1c618:	00035817 	.word	0x00035817
   1c61c:	000357fd 	.word	0x000357fd
   1c620:	00035833 	.word	0x00035833
   1c624:	00035852 	.word	0x00035852

0001c628 <att_write_req>:
{
   1c628:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c62c:	4604      	mov	r4, r0
   1c62e:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1c630:	f101 0008 	add.w	r0, r1, #8
   1c634:	460d      	mov	r5, r1
   1c636:	f013 fa0c 	bl	2fa52 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c63a:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   1c63c:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1c640:	89ad      	ldrh	r5, [r5, #12]
   1c642:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1c644:	2101      	movs	r1, #1
   1c646:	6818      	ldr	r0, [r3, #0]
   1c648:	f013 f957 	bl	2f8fa <bt_gatt_change_aware>
   1c64c:	2800      	cmp	r0, #0
   1c64e:	d040      	beq.n	1c6d2 <att_write_req+0xaa>
	if (!handle) {
   1c650:	2e00      	cmp	r6, #0
   1c652:	d040      	beq.n	1c6d6 <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   1c654:	2218      	movs	r2, #24
   1c656:	2100      	movs	r1, #0
   1c658:	4668      	mov	r0, sp
   1c65a:	f013 ffe6 	bl	3062a <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1c65e:	2200      	movs	r2, #0
   1c660:	2113      	movs	r1, #19
   1c662:	4620      	mov	r0, r4
   1c664:	f7ff fe90 	bl	1c388 <bt_att_chan_create_pdu>
   1c668:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1c66a:	b380      	cbz	r0, 1c6ce <att_write_req+0xa6>
	data.conn = chan->att->conn;
   1c66c:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c66e:	4a1b      	ldr	r2, [pc, #108]	; (1c6dc <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   1c670:	681b      	ldr	r3, [r3, #0]
   1c672:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c674:	2301      	movs	r3, #1
   1c676:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   1c67a:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   1c67e:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c680:	466b      	mov	r3, sp
   1c682:	4631      	mov	r1, r6
   1c684:	4630      	mov	r0, r6
	data.len = len;
   1c686:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   1c68a:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   1c68e:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   1c692:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1c696:	f012 fa51 	bl	2eb3c <bt_gatt_foreach_attr>
	if (data.err) {
   1c69a:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1c69e:	b175      	cbz	r5, 1c6be <att_write_req+0x96>
			net_buf_unref(data.buf);
   1c6a0:	9801      	ldr	r0, [sp, #4]
   1c6a2:	f004 fd39 	bl	21118 <net_buf_unref>
	if (!req) {
   1c6a6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1c6aa:	4632      	mov	r2, r6
   1c6ac:	4641      	mov	r1, r8
   1c6ae:	4620      	mov	r0, r4
   1c6b0:	f7ff fed4 	bl	1c45c <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1c6b4:	463d      	mov	r5, r7
}
   1c6b6:	4628      	mov	r0, r5
   1c6b8:	b007      	add	sp, #28
   1c6ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   1c6be:	9901      	ldr	r1, [sp, #4]
   1c6c0:	2900      	cmp	r1, #0
   1c6c2:	d0f8      	beq.n	1c6b6 <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c6c4:	4a06      	ldr	r2, [pc, #24]	; (1c6e0 <att_write_req+0xb8>)
   1c6c6:	4620      	mov	r0, r4
   1c6c8:	f012 f9ef 	bl	2eaaa <bt_att_chan_send_rsp>
   1c6cc:	e7f3      	b.n	1c6b6 <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   1c6ce:	250e      	movs	r5, #14
   1c6d0:	e7f1      	b.n	1c6b6 <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c6d2:	2512      	movs	r5, #18
   1c6d4:	e7ef      	b.n	1c6b6 <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c6d6:	2501      	movs	r5, #1
   1c6d8:	e7ed      	b.n	1c6b6 <att_write_req+0x8e>
   1c6da:	bf00      	nop
   1c6dc:	0002ee1d 	.word	0x0002ee1d
   1c6e0:	0002ed61 	.word	0x0002ed61

0001c6e4 <bt_att_create_pdu>:
{
   1c6e4:	b538      	push	{r3, r4, r5, lr}
   1c6e6:	460d      	mov	r5, r1
   1c6e8:	4614      	mov	r4, r2
	att = att_get(conn);
   1c6ea:	f7ff fd09 	bl	1c100 <att_get>
	if (!att) {
   1c6ee:	b1e8      	cbz	r0, 1c72c <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c6f0:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1c6f2:	b163      	cbz	r3, 1c70e <bt_att_create_pdu+0x2a>
   1c6f4:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1c6f8:	d009      	beq.n	1c70e <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c6fa:	681b      	ldr	r3, [r3, #0]
   1c6fc:	b10b      	cbz	r3, 1c702 <bt_att_create_pdu+0x1e>
   1c6fe:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1c702:	1c61      	adds	r1, r4, #1
   1c704:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   1c708:	4291      	cmp	r1, r2
   1c70a:	d911      	bls.n	1c730 <bt_att_create_pdu+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c70c:	b9b3      	cbnz	r3, 1c73c <bt_att_create_pdu+0x58>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1c70e:	4b11      	ldr	r3, [pc, #68]	; (1c754 <bt_att_create_pdu+0x70>)
   1c710:	681a      	ldr	r2, [r3, #0]
   1c712:	f012 0f06 	tst.w	r2, #6
   1c716:	d009      	beq.n	1c72c <bt_att_create_pdu+0x48>
   1c718:	4a0f      	ldr	r2, [pc, #60]	; (1c758 <bt_att_create_pdu+0x74>)
   1c71a:	4810      	ldr	r0, [pc, #64]	; (1c75c <bt_att_create_pdu+0x78>)
   1c71c:	1a9b      	subs	r3, r3, r2
   1c71e:	089b      	lsrs	r3, r3, #2
   1c720:	019b      	lsls	r3, r3, #6
   1c722:	f043 0202 	orr.w	r2, r3, #2
   1c726:	1c61      	adds	r1, r4, #1
   1c728:	f010 fae6 	bl	2ccf8 <log_1>
}
   1c72c:	2000      	movs	r0, #0
   1c72e:	bd38      	pop	{r3, r4, r5, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1c730:	4622      	mov	r2, r4
   1c732:	4629      	mov	r1, r5
}
   1c734:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1c738:	f7ff be26 	b.w	1c388 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c73c:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   1c740:	d004      	beq.n	1c74c <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c742:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1c746:	b10a      	cbz	r2, 1c74c <bt_att_create_pdu+0x68>
   1c748:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   1c74c:	4618      	mov	r0, r3
   1c74e:	4613      	mov	r3, r2
   1c750:	e7d8      	b.n	1c704 <bt_att_create_pdu+0x20>
   1c752:	bf00      	nop
   1c754:	200007a8 	.word	0x200007a8
   1c758:	200007a8 	.word	0x200007a8
   1c75c:	00035871 	.word	0x00035871

0001c760 <att_read_group_req>:
{
   1c760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1c764:	7b0c      	ldrb	r4, [r1, #12]
   1c766:	3c04      	subs	r4, #4
   1c768:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1c76a:	2c02      	cmp	r4, #2
{
   1c76c:	4605      	mov	r5, r0
   1c76e:	b08c      	sub	sp, #48	; 0x30
   1c770:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1c772:	d001      	beq.n	1c778 <att_read_group_req+0x18>
   1c774:	2c10      	cmp	r4, #16
   1c776:	d16f      	bne.n	1c858 <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1c778:	2104      	movs	r1, #4
   1c77a:	3008      	adds	r0, #8
   1c77c:	f004 fdda 	bl	21334 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1c780:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1c784:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1c786:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1c788:	1d01      	adds	r1, r0, #4
   1c78a:	4622      	mov	r2, r4
   1c78c:	4640      	mov	r0, r8
   1c78e:	f011 fd52 	bl	2e236 <bt_uuid_create>
   1c792:	2800      	cmp	r0, #0
   1c794:	d062      	beq.n	1c85c <att_read_group_req+0xfc>
	if (!start || !end) {
   1c796:	2e00      	cmp	r6, #0
   1c798:	d03a      	beq.n	1c810 <att_read_group_req+0xb0>
   1c79a:	2400      	movs	r4, #0
   1c79c:	2f00      	cmp	r7, #0
   1c79e:	d036      	beq.n	1c80e <att_read_group_req+0xae>
	if (start > end) {
   1c7a0:	42b7      	cmp	r7, r6
   1c7a2:	d335      	bcc.n	1c810 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1c7a4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1c7a8:	a901      	add	r1, sp, #4
   1c7aa:	4640      	mov	r0, r8
   1c7ac:	f88d 4004 	strb.w	r4, [sp, #4]
   1c7b0:	f8ad 3006 	strh.w	r3, [sp, #6]
   1c7b4:	f011 fd15 	bl	2e1e2 <bt_uuid_cmp>
   1c7b8:	2800      	cmp	r0, #0
   1c7ba:	d134      	bne.n	1c826 <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   1c7bc:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1c7be:	2214      	movs	r2, #20
   1c7c0:	2100      	movs	r1, #0
   1c7c2:	a807      	add	r0, sp, #28
   1c7c4:	f013 ff31 	bl	3062a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1c7c8:	2201      	movs	r2, #1
   1c7ca:	2111      	movs	r1, #17
   1c7cc:	4620      	mov	r0, r4
   1c7ce:	f7ff ff89 	bl	1c6e4 <bt_att_create_pdu>
   1c7d2:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1c7d4:	2800      	cmp	r0, #0
   1c7d6:	d041      	beq.n	1c85c <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   1c7d8:	2101      	movs	r1, #1
   1c7da:	3008      	adds	r0, #8
	data.uuid = uuid;
   1c7dc:	e9cd 5807 	strd	r5, r8, [sp, #28]
   1c7e0:	f004 fdca 	bl	21378 <net_buf_simple_add>
	data.rsp->len = 0U;
   1c7e4:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1c7e8:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1c7ea:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1c7ec:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1c7f0:	4a1b      	ldr	r2, [pc, #108]	; (1c860 <att_read_group_req+0x100>)
	data.group = NULL;
   1c7f2:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1c7f6:	4639      	mov	r1, r7
   1c7f8:	4630      	mov	r0, r6
   1c7fa:	f012 f99f 	bl	2eb3c <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1c7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c800:	781c      	ldrb	r4, [r3, #0]
   1c802:	bb1c      	cbnz	r4, 1c84c <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   1c804:	9809      	ldr	r0, [sp, #36]	; 0x24
   1c806:	f004 fc87 	bl	21118 <net_buf_unref>
	if (!req) {
   1c80a:	230a      	movs	r3, #10
   1c80c:	e018      	b.n	1c840 <att_read_group_req+0xe0>
			*err = 0U;
   1c80e:	463e      	mov	r6, r7
	if (!req) {
   1c810:	2301      	movs	r3, #1
   1c812:	4632      	mov	r2, r6
   1c814:	2110      	movs	r1, #16
   1c816:	4628      	mov	r0, r5
   1c818:	f7ff fe20 	bl	1c45c <send_err_rsp.part.0>
		return 0;
   1c81c:	2400      	movs	r4, #0
}
   1c81e:	4620      	mov	r0, r4
   1c820:	b00c      	add	sp, #48	; 0x30
   1c822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1c826:	f642 0301 	movw	r3, #10241	; 0x2801
   1c82a:	a907      	add	r1, sp, #28
   1c82c:	4640      	mov	r0, r8
   1c82e:	f88d 401c 	strb.w	r4, [sp, #28]
   1c832:	f8ad 301e 	strh.w	r3, [sp, #30]
   1c836:	f011 fcd4 	bl	2e1e2 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1c83a:	2800      	cmp	r0, #0
   1c83c:	d0be      	beq.n	1c7bc <att_read_group_req+0x5c>
	if (!req) {
   1c83e:	2310      	movs	r3, #16
   1c840:	4632      	mov	r2, r6
   1c842:	2110      	movs	r1, #16
   1c844:	4628      	mov	r0, r5
   1c846:	f7ff fe09 	bl	1c45c <send_err_rsp.part.0>
		return 0;
   1c84a:	e7e8      	b.n	1c81e <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c84c:	4a05      	ldr	r2, [pc, #20]	; (1c864 <att_read_group_req+0x104>)
   1c84e:	9909      	ldr	r1, [sp, #36]	; 0x24
   1c850:	4628      	mov	r0, r5
   1c852:	f012 f92a 	bl	2eaaa <bt_att_chan_send_rsp>
	return 0;
   1c856:	e7e1      	b.n	1c81c <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   1c858:	2404      	movs	r4, #4
   1c85a:	e7e0      	b.n	1c81e <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   1c85c:	240e      	movs	r4, #14
   1c85e:	e7de      	b.n	1c81e <att_read_group_req+0xbe>
   1c860:	0001be39 	.word	0x0001be39
   1c864:	0002ed61 	.word	0x0002ed61

0001c868 <att_read_mult_req>:
{
   1c868:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1c86c:	6886      	ldr	r6, [r0, #8]
{
   1c86e:	b085      	sub	sp, #20
   1c870:	4604      	mov	r4, r0
   1c872:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1c874:	4630      	mov	r0, r6
   1c876:	2101      	movs	r1, #1
   1c878:	f013 f83f 	bl	2f8fa <bt_gatt_change_aware>
   1c87c:	2800      	cmp	r0, #0
   1c87e:	d038      	beq.n	1c8f2 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   1c880:	2210      	movs	r2, #16
   1c882:	2100      	movs	r1, #0
   1c884:	4668      	mov	r0, sp
   1c886:	f013 fed0 	bl	3062a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1c88a:	2200      	movs	r2, #0
   1c88c:	210f      	movs	r1, #15
   1c88e:	4630      	mov	r0, r6
   1c890:	f7ff ff28 	bl	1c6e4 <bt_att_create_pdu>
   1c894:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1c896:	b370      	cbz	r0, 1c8f6 <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c898:	f8df 9064 	ldr.w	r9, [pc, #100]	; 1c900 <att_read_mult_req+0x98>
	data.chan = chan;
   1c89c:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1c89e:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c8a2:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1c8a6:	89ab      	ldrh	r3, [r5, #12]
   1c8a8:	2b01      	cmp	r3, #1
   1c8aa:	d805      	bhi.n	1c8b8 <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c8ac:	4a13      	ldr	r2, [pc, #76]	; (1c8fc <att_read_mult_req+0x94>)
   1c8ae:	9902      	ldr	r1, [sp, #8]
   1c8b0:	4620      	mov	r0, r4
   1c8b2:	f012 f8fa 	bl	2eaaa <bt_att_chan_send_rsp>
   1c8b6:	e018      	b.n	1c8ea <att_read_mult_req+0x82>
   1c8b8:	4638      	mov	r0, r7
   1c8ba:	f013 f8ca 	bl	2fa52 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c8be:	466b      	mov	r3, sp
   1c8c0:	464a      	mov	r2, r9
   1c8c2:	4601      	mov	r1, r0
   1c8c4:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c8c6:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c8ca:	f012 f937 	bl	2eb3c <bt_gatt_foreach_attr>
		if (data.err) {
   1c8ce:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c8d2:	2b00      	cmp	r3, #0
   1c8d4:	d0e7      	beq.n	1c8a6 <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   1c8d6:	9802      	ldr	r0, [sp, #8]
   1c8d8:	f004 fc1e 	bl	21118 <net_buf_unref>
	if (!req) {
   1c8dc:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c8e0:	4632      	mov	r2, r6
   1c8e2:	210e      	movs	r1, #14
   1c8e4:	4620      	mov	r0, r4
   1c8e6:	f7ff fdb9 	bl	1c45c <send_err_rsp.part.0>
	return 0;
   1c8ea:	2000      	movs	r0, #0
}
   1c8ec:	b005      	add	sp, #20
   1c8ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c8f2:	2012      	movs	r0, #18
   1c8f4:	e7fa      	b.n	1c8ec <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   1c8f6:	200e      	movs	r0, #14
   1c8f8:	e7f8      	b.n	1c8ec <att_read_mult_req+0x84>
   1c8fa:	bf00      	nop
   1c8fc:	0002ed61 	.word	0x0002ed61
   1c900:	0002eefb 	.word	0x0002eefb

0001c904 <att_read_rsp>:
{
   1c904:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1c908:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   1c90c:	4605      	mov	r5, r0
   1c90e:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1c910:	4640      	mov	r0, r8
   1c912:	2101      	movs	r1, #1
{
   1c914:	4614      	mov	r4, r2
   1c916:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1c918:	f012 ffef 	bl	2f8fa <bt_gatt_change_aware>
   1c91c:	b390      	cbz	r0, 1c984 <att_read_rsp+0x80>
	if (!handle) {
   1c91e:	b39e      	cbz	r6, 1c988 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   1c920:	2210      	movs	r2, #16
   1c922:	2100      	movs	r1, #0
   1c924:	4668      	mov	r0, sp
   1c926:	f013 fe80 	bl	3062a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1c92a:	2200      	movs	r2, #0
   1c92c:	4621      	mov	r1, r4
   1c92e:	4640      	mov	r0, r8
   1c930:	f7ff fed8 	bl	1c6e4 <bt_att_create_pdu>
   1c934:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1c936:	b348      	cbz	r0, 1c98c <att_read_rsp+0x88>
	data.offset = offset;
   1c938:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1c93c:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1c940:	2301      	movs	r3, #1
   1c942:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c946:	4a12      	ldr	r2, [pc, #72]	; (1c990 <att_read_rsp+0x8c>)
	data.chan = chan;
   1c948:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1c94a:	466b      	mov	r3, sp
   1c94c:	4631      	mov	r1, r6
   1c94e:	4630      	mov	r0, r6
   1c950:	f012 f8f4 	bl	2eb3c <bt_gatt_foreach_attr>
	if (data.err) {
   1c954:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1c958:	b174      	cbz	r4, 1c978 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1c95a:	9802      	ldr	r0, [sp, #8]
   1c95c:	f004 fbdc 	bl	21118 <net_buf_unref>
	if (!req) {
   1c960:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1c964:	4632      	mov	r2, r6
   1c966:	4639      	mov	r1, r7
   1c968:	4628      	mov	r0, r5
   1c96a:	f7ff fd77 	bl	1c45c <send_err_rsp.part.0>
		return 0;
   1c96e:	2400      	movs	r4, #0
}
   1c970:	4620      	mov	r0, r4
   1c972:	b004      	add	sp, #16
   1c974:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1c978:	4a06      	ldr	r2, [pc, #24]	; (1c994 <att_read_rsp+0x90>)
   1c97a:	9902      	ldr	r1, [sp, #8]
   1c97c:	4628      	mov	r0, r5
   1c97e:	f012 f894 	bl	2eaaa <bt_att_chan_send_rsp>
	return 0;
   1c982:	e7f5      	b.n	1c970 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1c984:	2412      	movs	r4, #18
   1c986:	e7f3      	b.n	1c970 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1c988:	2401      	movs	r4, #1
   1c98a:	e7f1      	b.n	1c970 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1c98c:	240e      	movs	r4, #14
   1c98e:	e7ef      	b.n	1c970 <att_read_rsp+0x6c>
   1c990:	0002eefb 	.word	0x0002eefb
   1c994:	0002ed61 	.word	0x0002ed61

0001c998 <att_read_type_req>:
{
   1c998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1c99c:	7b0c      	ldrb	r4, [r1, #12]
   1c99e:	3c04      	subs	r4, #4
   1c9a0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1c9a2:	2c02      	cmp	r4, #2
{
   1c9a4:	4605      	mov	r5, r0
   1c9a6:	b08c      	sub	sp, #48	; 0x30
   1c9a8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1c9aa:	d001      	beq.n	1c9b0 <att_read_type_req+0x18>
   1c9ac:	2c10      	cmp	r4, #16
   1c9ae:	d150      	bne.n	1ca52 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1c9b0:	2104      	movs	r1, #4
   1c9b2:	3008      	adds	r0, #8
   1c9b4:	f004 fcbe 	bl	21334 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1c9b8:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1c9bc:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1c9be:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1c9c0:	1d01      	adds	r1, r0, #4
   1c9c2:	4622      	mov	r2, r4
   1c9c4:	4640      	mov	r0, r8
   1c9c6:	f011 fc36 	bl	2e236 <bt_uuid_create>
   1c9ca:	b188      	cbz	r0, 1c9f0 <att_read_type_req+0x58>
	if (!start || !end) {
   1c9cc:	b19e      	cbz	r6, 1c9f6 <att_read_type_req+0x5e>
   1c9ce:	b18f      	cbz	r7, 1c9f4 <att_read_type_req+0x5c>
	if (start > end) {
   1c9d0:	42be      	cmp	r6, r7
   1c9d2:	d810      	bhi.n	1c9f6 <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1c9d4:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1c9d6:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1c9d8:	2100      	movs	r1, #0
   1c9da:	eb0d 0002 	add.w	r0, sp, r2
   1c9de:	f013 fe24 	bl	3062a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1c9e2:	2201      	movs	r2, #1
   1c9e4:	2109      	movs	r1, #9
   1c9e6:	4620      	mov	r0, r4
   1c9e8:	f7ff fe7c 	bl	1c6e4 <bt_att_create_pdu>
   1c9ec:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1c9ee:	b968      	cbnz	r0, 1ca0c <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   1c9f0:	240e      	movs	r4, #14
   1c9f2:	e007      	b.n	1ca04 <att_read_type_req+0x6c>
			*err = 0U;
   1c9f4:	463e      	mov	r6, r7
	if (!req) {
   1c9f6:	2301      	movs	r3, #1
   1c9f8:	4632      	mov	r2, r6
   1c9fa:	2108      	movs	r1, #8
   1c9fc:	4628      	mov	r0, r5
   1c9fe:	f7ff fd2d 	bl	1c45c <send_err_rsp.part.0>
		return 0;
   1ca02:	2400      	movs	r4, #0
}
   1ca04:	4620      	mov	r0, r4
   1ca06:	b00c      	add	sp, #48	; 0x30
   1ca08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1ca0c:	2101      	movs	r1, #1
   1ca0e:	3008      	adds	r0, #8
	data.uuid = uuid;
   1ca10:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1ca14:	f004 fcb0 	bl	21378 <net_buf_simple_add>
	data.rsp->len = 0U;
   1ca18:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1ca1c:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1ca1e:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1ca20:	4a0d      	ldr	r2, [pc, #52]	; (1ca58 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   1ca22:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1ca26:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1ca28:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1ca2c:	4630      	mov	r0, r6
   1ca2e:	ab06      	add	r3, sp, #24
   1ca30:	f012 f884 	bl	2eb3c <bt_gatt_foreach_attr>
	if (data.err) {
   1ca34:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   1ca38:	b12c      	cbz	r4, 1ca46 <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1ca3a:	9808      	ldr	r0, [sp, #32]
   1ca3c:	f004 fb6c 	bl	21118 <net_buf_unref>
	if (!req) {
   1ca40:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1ca44:	e7d8      	b.n	1c9f8 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1ca46:	4a05      	ldr	r2, [pc, #20]	; (1ca5c <att_read_type_req+0xc4>)
   1ca48:	9908      	ldr	r1, [sp, #32]
   1ca4a:	4628      	mov	r0, r5
   1ca4c:	f012 f82d 	bl	2eaaa <bt_att_chan_send_rsp>
	return 0;
   1ca50:	e7d8      	b.n	1ca04 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1ca52:	2404      	movs	r4, #4
   1ca54:	e7d6      	b.n	1ca04 <att_read_type_req+0x6c>
   1ca56:	bf00      	nop
   1ca58:	0001bee5 	.word	0x0001bee5
   1ca5c:	0002ed61 	.word	0x0002ed61

0001ca60 <att_find_type_req>:
{
   1ca60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ca64:	4688      	mov	r8, r1
   1ca66:	b086      	sub	sp, #24
   1ca68:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1ca6a:	2106      	movs	r1, #6
   1ca6c:	f108 0008 	add.w	r0, r8, #8
   1ca70:	f004 fc60 	bl	21334 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1ca74:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1ca76:	b317      	cbz	r7, 1cabe <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1ca78:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1ca7c:	f1b9 0f00 	cmp.w	r9, #0
   1ca80:	d01c      	beq.n	1cabc <att_find_type_req+0x5c>
	if (start > end) {
   1ca82:	45b9      	cmp	r9, r7
   1ca84:	d31b      	bcc.n	1cabe <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1ca86:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1ca88:	f8ad 3002 	strh.w	r3, [sp, #2]
   1ca8c:	2400      	movs	r4, #0
   1ca8e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ca92:	a901      	add	r1, sp, #4
   1ca94:	4668      	mov	r0, sp
	value = buf->data;
   1ca96:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1ca9a:	f88d 4000 	strb.w	r4, [sp]
   1ca9e:	f88d 4004 	strb.w	r4, [sp, #4]
   1caa2:	f8ad 3006 	strh.w	r3, [sp, #6]
   1caa6:	f011 fb9c 	bl	2e1e2 <bt_uuid_cmp>
   1caaa:	4606      	mov	r6, r0
   1caac:	b190      	cbz	r0, 1cad4 <att_find_type_req+0x74>
	if (!req) {
   1caae:	230a      	movs	r3, #10
   1cab0:	463a      	mov	r2, r7
   1cab2:	2106      	movs	r1, #6
   1cab4:	4628      	mov	r0, r5
   1cab6:	f7ff fcd1 	bl	1c45c <send_err_rsp.part.0>
		return 0;
   1caba:	e007      	b.n	1cacc <att_find_type_req+0x6c>
			*err = 0U;
   1cabc:	464f      	mov	r7, r9
	if (!req) {
   1cabe:	2301      	movs	r3, #1
   1cac0:	463a      	mov	r2, r7
   1cac2:	2106      	movs	r1, #6
   1cac4:	4628      	mov	r0, r5
   1cac6:	f7ff fcc9 	bl	1c45c <send_err_rsp.part.0>
		return 0;
   1caca:	2400      	movs	r4, #0
}
   1cacc:	4620      	mov	r0, r4
   1cace:	b006      	add	sp, #24
   1cad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1cad4:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1cad8:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1cadc:	4601      	mov	r1, r0
   1cade:	2214      	movs	r2, #20
   1cae0:	a801      	add	r0, sp, #4
   1cae2:	f013 fda2 	bl	3062a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1cae6:	4632      	mov	r2, r6
   1cae8:	2107      	movs	r1, #7
   1caea:	4640      	mov	r0, r8
   1caec:	f7ff fdfa 	bl	1c6e4 <bt_att_create_pdu>
   1caf0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1caf2:	b1e0      	cbz	r0, 1cb2e <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1caf4:	230a      	movs	r3, #10
   1caf6:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1cafa:	4a0e      	ldr	r2, [pc, #56]	; (1cb34 <att_find_type_req+0xd4>)
	data.value_len = value_len;
   1cafc:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1cb00:	ab01      	add	r3, sp, #4
   1cb02:	4649      	mov	r1, r9
   1cb04:	4638      	mov	r0, r7
	data.value = value;
   1cb06:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   1cb0a:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1cb0c:	f012 f816 	bl	2eb3c <bt_gatt_foreach_attr>
	if (data.err) {
   1cb10:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1cb14:	b12c      	cbz	r4, 1cb22 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1cb16:	9802      	ldr	r0, [sp, #8]
   1cb18:	f004 fafe 	bl	21118 <net_buf_unref>
	if (!req) {
   1cb1c:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1cb20:	e7ce      	b.n	1cac0 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1cb22:	4a05      	ldr	r2, [pc, #20]	; (1cb38 <att_find_type_req+0xd8>)
   1cb24:	9902      	ldr	r1, [sp, #8]
   1cb26:	4628      	mov	r0, r5
   1cb28:	f011 ffbf 	bl	2eaaa <bt_att_chan_send_rsp>
	return 0;
   1cb2c:	e7ce      	b.n	1cacc <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1cb2e:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1cb30:	e7cc      	b.n	1cacc <att_find_type_req+0x6c>
   1cb32:	bf00      	nop
   1cb34:	0001bf8d 	.word	0x0001bf8d
   1cb38:	0002ed61 	.word	0x0002ed61

0001cb3c <att_find_info_req>:
{
   1cb3c:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1cb3e:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1cb40:	881e      	ldrh	r6, [r3, #0]
{
   1cb42:	b085      	sub	sp, #20
   1cb44:	4605      	mov	r5, r0
	if (!start || !end) {
   1cb46:	b19e      	cbz	r6, 1cb70 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1cb48:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1cb4a:	b184      	cbz	r4, 1cb6e <att_find_info_req+0x32>
	if (start > end) {
   1cb4c:	42a6      	cmp	r6, r4
   1cb4e:	d80f      	bhi.n	1cb70 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1cb50:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1cb52:	2210      	movs	r2, #16
   1cb54:	2100      	movs	r1, #0
   1cb56:	4668      	mov	r0, sp
   1cb58:	f013 fd67 	bl	3062a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1cb5c:	2200      	movs	r2, #0
   1cb5e:	2105      	movs	r1, #5
   1cb60:	4638      	mov	r0, r7
   1cb62:	f7ff fdbf 	bl	1c6e4 <bt_att_create_pdu>
   1cb66:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1cb68:	b958      	cbnz	r0, 1cb82 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1cb6a:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1cb6c:	e007      	b.n	1cb7e <att_find_info_req+0x42>
			*err = 0U;
   1cb6e:	4626      	mov	r6, r4
	if (!req) {
   1cb70:	2301      	movs	r3, #1
   1cb72:	4632      	mov	r2, r6
   1cb74:	2104      	movs	r1, #4
   1cb76:	4628      	mov	r0, r5
   1cb78:	f7ff fc70 	bl	1c45c <send_err_rsp.part.0>
	return 0;
   1cb7c:	2000      	movs	r0, #0
}
   1cb7e:	b005      	add	sp, #20
   1cb80:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1cb82:	4621      	mov	r1, r4
   1cb84:	4a09      	ldr	r2, [pc, #36]	; (1cbac <att_find_info_req+0x70>)
	data.chan = chan;
   1cb86:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1cb88:	466b      	mov	r3, sp
   1cb8a:	4630      	mov	r0, r6
   1cb8c:	f011 ffd6 	bl	2eb3c <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1cb90:	9c02      	ldr	r4, [sp, #8]
   1cb92:	b924      	cbnz	r4, 1cb9e <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   1cb94:	9801      	ldr	r0, [sp, #4]
   1cb96:	f004 fabf 	bl	21118 <net_buf_unref>
	if (!req) {
   1cb9a:	230a      	movs	r3, #10
   1cb9c:	e7e9      	b.n	1cb72 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1cb9e:	4a04      	ldr	r2, [pc, #16]	; (1cbb0 <att_find_info_req+0x74>)
   1cba0:	9901      	ldr	r1, [sp, #4]
   1cba2:	4628      	mov	r0, r5
   1cba4:	f011 ff81 	bl	2eaaa <bt_att_chan_send_rsp>
   1cba8:	e7e8      	b.n	1cb7c <att_find_info_req+0x40>
   1cbaa:	bf00      	nop
   1cbac:	0002ec9f 	.word	0x0002ec9f
   1cbb0:	0002ed61 	.word	0x0002ed61

0001cbb4 <att_mtu_req>:
{
   1cbb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1cbb6:	6803      	ldr	r3, [r0, #0]
{
   1cbb8:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1cbba:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cbbc:	f3bf 8f5b 	dmb	ish
   1cbc0:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1cbc4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1cbc8:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1cbcc:	071b      	lsls	r3, r3, #28
   1cbce:	d41e      	bmi.n	1cc0e <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1cbd0:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1cbd2:	881b      	ldrh	r3, [r3, #0]
   1cbd4:	2b16      	cmp	r3, #22
   1cbd6:	d91c      	bls.n	1cc12 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1cbd8:	2202      	movs	r2, #2
   1cbda:	2103      	movs	r1, #3
   1cbdc:	f7ff fd82 	bl	1c6e4 <bt_att_create_pdu>
	if (!pdu) {
   1cbe0:	4606      	mov	r6, r0
   1cbe2:	b1c0      	cbz	r0, 1cc16 <att_mtu_req+0x62>
	return net_buf_simple_add(&buf->b, len);
   1cbe4:	2102      	movs	r1, #2
   1cbe6:	3008      	adds	r0, #8
   1cbe8:	f004 fbc6 	bl	21378 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1cbec:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1cbee:	4a0b      	ldr	r2, [pc, #44]	; (1cc1c <att_mtu_req+0x68>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1cbf0:	7007      	strb	r7, [r0, #0]
   1cbf2:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1cbf4:	4631      	mov	r1, r6
   1cbf6:	4620      	mov	r0, r4
   1cbf8:	f011 ff57 	bl	2eaaa <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   1cbfc:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1cbfe:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1cc02:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1cc06:	f011 ff5e 	bl	2eac6 <att_chan_mtu_updated>
	return 0;
   1cc0a:	4628      	mov	r0, r5
}
   1cc0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1cc0e:	2006      	movs	r0, #6
   1cc10:	e7fc      	b.n	1cc0c <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   1cc12:	2004      	movs	r0, #4
   1cc14:	e7fa      	b.n	1cc0c <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   1cc16:	200e      	movs	r0, #14
   1cc18:	e7f8      	b.n	1cc0c <att_mtu_req+0x58>
   1cc1a:	bf00      	nop
   1cc1c:	0002ed61 	.word	0x0002ed61

0001cc20 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1cc20:	b513      	push	{r0, r1, r4, lr}
   1cc22:	4602      	mov	r2, r0
   1cc24:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1cc26:	4808      	ldr	r0, [pc, #32]	; (1cc48 <bt_att_req_alloc+0x28>)
   1cc28:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   1cc2a:	2400      	movs	r4, #0
   1cc2c:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1cc2e:	f008 f823 	bl	24c78 <k_mem_slab_alloc>
   1cc32:	4601      	mov	r1, r0
   1cc34:	b930      	cbnz	r0, 1cc44 <bt_att_req_alloc+0x24>
   1cc36:	9801      	ldr	r0, [sp, #4]
   1cc38:	2210      	movs	r2, #16
   1cc3a:	f013 fcf6 	bl	3062a <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   1cc3e:	9801      	ldr	r0, [sp, #4]
}
   1cc40:	b002      	add	sp, #8
   1cc42:	bd10      	pop	{r4, pc}
		return NULL;
   1cc44:	4620      	mov	r0, r4
   1cc46:	e7fb      	b.n	1cc40 <bt_att_req_alloc+0x20>
   1cc48:	20000850 	.word	0x20000850

0001cc4c <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1cc4c:	b507      	push	{r0, r1, r2, lr}
   1cc4e:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1cc50:	6880      	ldr	r0, [r0, #8]
   1cc52:	b120      	cbz	r0, 1cc5e <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   1cc54:	f004 fa60 	bl	21118 <net_buf_unref>
		req->buf = NULL;
   1cc58:	9b01      	ldr	r3, [sp, #4]
   1cc5a:	2200      	movs	r2, #0
   1cc5c:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1cc5e:	4803      	ldr	r0, [pc, #12]	; (1cc6c <bt_att_req_free+0x20>)
   1cc60:	a901      	add	r1, sp, #4
   1cc62:	f008 f875 	bl	24d50 <k_mem_slab_free>
}
   1cc66:	b003      	add	sp, #12
   1cc68:	f85d fb04 	ldr.w	pc, [sp], #4
   1cc6c:	20000850 	.word	0x20000850

0001cc70 <att_handle_rsp>:
{
   1cc70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cc74:	4605      	mov	r5, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1cc76:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   1cc7a:	460f      	mov	r7, r1
   1cc7c:	4690      	mov	r8, r2
   1cc7e:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1cc80:	f009 fdbc 	bl	267fc <k_work_cancel_delayable>
	if (!chan->req) {
   1cc84:	f8d5 a0fc 	ldr.w	sl, [r5, #252]	; 0xfc
   1cc88:	f1ba 0f00 	cmp.w	sl, #0
   1cc8c:	d11e      	bne.n	1cccc <att_handle_rsp+0x5c>
		BT_WARN("No pending ATT request");
   1cc8e:	481a      	ldr	r0, [pc, #104]	; (1ccf8 <att_handle_rsp+0x88>)
   1cc90:	6804      	ldr	r4, [r0, #0]
   1cc92:	f014 0406 	ands.w	r4, r4, #6
   1cc96:	d009      	beq.n	1ccac <att_handle_rsp+0x3c>
   1cc98:	4918      	ldr	r1, [pc, #96]	; (1ccfc <att_handle_rsp+0x8c>)
   1cc9a:	1a40      	subs	r0, r0, r1
   1cc9c:	0880      	lsrs	r0, r0, #2
   1cc9e:	0180      	lsls	r0, r0, #6
   1cca0:	f040 0102 	orr.w	r1, r0, #2
   1cca4:	4816      	ldr	r0, [pc, #88]	; (1cd00 <att_handle_rsp+0x90>)
   1cca6:	f010 f81a 	bl	2ccde <log_0>
	bt_att_func_t func = NULL;
   1ccaa:	4654      	mov	r4, sl
	att_req_send_process(chan->att);
   1ccac:	6828      	ldr	r0, [r5, #0]
   1ccae:	f012 f889 	bl	2edc4 <att_req_send_process>
	if (func) {
   1ccb2:	b13c      	cbz	r4, 1ccc4 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   1ccb4:	6828      	ldr	r0, [r5, #0]
   1ccb6:	f8cd 9000 	str.w	r9, [sp]
   1ccba:	6800      	ldr	r0, [r0, #0]
   1ccbc:	4643      	mov	r3, r8
   1ccbe:	463a      	mov	r2, r7
   1ccc0:	4631      	mov	r1, r6
   1ccc2:	47a0      	blx	r4
}
   1ccc4:	2000      	movs	r0, #0
   1ccc6:	b003      	add	sp, #12
   1ccc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1cccc:	4b0d      	ldr	r3, [pc, #52]	; (1cd04 <att_handle_rsp+0x94>)
   1ccce:	459a      	cmp	sl, r3
   1ccd0:	f04f 0b00 	mov.w	fp, #0
   1ccd4:	d103      	bne.n	1ccde <att_handle_rsp+0x6e>
		chan->req = NULL;
   1ccd6:	f8c5 b0fc 	str.w	fp, [r5, #252]	; 0xfc
	bt_att_func_t func = NULL;
   1ccda:	465c      	mov	r4, fp
		goto process;
   1ccdc:	e7e6      	b.n	1ccac <att_handle_rsp+0x3c>
	func = chan->req->func;
   1ccde:	f8da 4004 	ldr.w	r4, [sl, #4]
	chan->req->func = NULL;
   1cce2:	f8ca b004 	str.w	fp, [sl, #4]
	bt_att_req_free(chan->req);
   1cce6:	4650      	mov	r0, sl
	params = chan->req->user_data;
   1cce8:	f8da 900c 	ldr.w	r9, [sl, #12]
	bt_att_req_free(chan->req);
   1ccec:	f7ff ffae 	bl	1cc4c <bt_att_req_free>
	chan->req = NULL;
   1ccf0:	f8c5 b0fc 	str.w	fp, [r5, #252]	; 0xfc
   1ccf4:	e7da      	b.n	1ccac <att_handle_rsp+0x3c>
   1ccf6:	bf00      	nop
   1ccf8:	200007a8 	.word	0x200007a8
   1ccfc:	200007a8 	.word	0x200007a8
   1cd00:	0003588c 	.word	0x0003588c
   1cd04:	20002d28 	.word	0x20002d28

0001cd08 <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   1cd08:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1cd0c:	b143      	cbz	r3, 1cd20 <att_error_rsp+0x18>
   1cd0e:	4a05      	ldr	r2, [pc, #20]	; (1cd24 <att_error_rsp+0x1c>)
   1cd10:	4293      	cmp	r3, r2
   1cd12:	d005      	beq.n	1cd20 <att_error_rsp+0x18>
	err = rsp->error;
   1cd14:	688b      	ldr	r3, [r1, #8]
   1cd16:	78db      	ldrb	r3, [r3, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   1cd18:	2200      	movs	r2, #0
   1cd1a:	4611      	mov	r1, r2
   1cd1c:	f7ff bfa8 	b.w	1cc70 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   1cd20:	230e      	movs	r3, #14
   1cd22:	e7f9      	b.n	1cd18 <att_error_rsp+0x10>
   1cd24:	20002d28 	.word	0x20002d28

0001cd28 <bt_att_disconnected>:
{
   1cd28:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1cd2a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1cd2e:	b085      	sub	sp, #20
   1cd30:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1cd32:	b38d      	cbz	r5, 1cd98 <bt_att_disconnected+0x70>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1cd34:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   1cd38:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1cd3c:	f011 fdfe 	bl	2e93c <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1cd40:	f1a4 0608 	sub.w	r6, r4, #8
   1cd44:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   1cd48:	2200      	movs	r2, #0
   1cd4a:	2300      	movs	r3, #0
   1cd4c:	4638      	mov	r0, r7
   1cd4e:	f004 f951 	bl	20ff4 <net_buf_get>
   1cd52:	4602      	mov	r2, r0
   1cd54:	bb10      	cbnz	r0, 1cd9c <bt_att_disconnected+0x74>
	if (chan->req) {
   1cd56:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1cd5a:	b123      	cbz	r3, 1cd66 <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1cd5c:	4601      	mov	r1, r0
   1cd5e:	230e      	movs	r3, #14
   1cd60:	4630      	mov	r0, r6
   1cd62:	f7ff ff85 	bl	1cc70 <att_handle_rsp>
	chan->att = NULL;
   1cd66:	2300      	movs	r3, #0
   1cd68:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   1cd6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1cd6e:	b99b      	cbnz	r3, 1cd98 <bt_att_disconnected+0x70>
	att_reset(att);
   1cd70:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1cd72:	9803      	ldr	r0, [sp, #12]
   1cd74:	2200      	movs	r2, #0
   1cd76:	2300      	movs	r3, #0
   1cd78:	300c      	adds	r0, #12
   1cd7a:	f004 f93b 	bl	20ff4 <net_buf_get>
   1cd7e:	b980      	cbnz	r0, 1cda2 <bt_att_disconnected+0x7a>
	att->conn = NULL;
   1cd80:	9a03      	ldr	r2, [sp, #12]
   1cd82:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   1cd84:	9b03      	ldr	r3, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
   1cd86:	685d      	ldr	r5, [r3, #4]
   1cd88:	b975      	cbnz	r5, 1cda8 <bt_att_disconnected+0x80>
	k_mem_slab_free(&att_slab, (void **)&att);
   1cd8a:	4811      	ldr	r0, [pc, #68]	; (1cdd0 <bt_att_disconnected+0xa8>)
   1cd8c:	a903      	add	r1, sp, #12
   1cd8e:	f007 ffdf 	bl	24d50 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   1cd92:	6820      	ldr	r0, [r4, #0]
   1cd94:	f002 f938 	bl	1f008 <bt_gatt_disconnected>
}
   1cd98:	b005      	add	sp, #20
   1cd9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1cd9c:	f004 f9bc 	bl	21118 <net_buf_unref>
   1cda0:	e7d2      	b.n	1cd48 <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   1cda2:	f004 f9b9 	bl	21118 <net_buf_unref>
   1cda6:	e7e4      	b.n	1cd72 <bt_att_disconnected+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cda8:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
   1cdaa:	686e      	ldr	r6, [r5, #4]
   1cdac:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   1cdae:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1cdb0:	428d      	cmp	r5, r1
	list->tail = node;
   1cdb2:	bf08      	it	eq
   1cdb4:	609a      	streq	r2, [r3, #8]
   1cdb6:	b136      	cbz	r6, 1cdc6 <bt_att_disconnected+0x9e>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1cdb8:	68eb      	ldr	r3, [r5, #12]
   1cdba:	9300      	str	r3, [sp, #0]
   1cdbc:	2300      	movs	r3, #0
   1cdbe:	461a      	mov	r2, r3
   1cdc0:	210e      	movs	r1, #14
   1cdc2:	4618      	mov	r0, r3
   1cdc4:	47b0      	blx	r6
		bt_att_req_free(req);
   1cdc6:	4628      	mov	r0, r5
   1cdc8:	f7ff ff40 	bl	1cc4c <bt_att_req_free>
   1cdcc:	e7da      	b.n	1cd84 <bt_att_disconnected+0x5c>
   1cdce:	bf00      	nop
   1cdd0:	20000810 	.word	0x20000810

0001cdd4 <att_timeout>:
	BT_ERR("ATT Timeout");
   1cdd4:	490a      	ldr	r1, [pc, #40]	; (1ce00 <att_timeout+0x2c>)
   1cdd6:	680b      	ldr	r3, [r1, #0]
   1cdd8:	075b      	lsls	r3, r3, #29
{
   1cdda:	b510      	push	{r4, lr}
   1cddc:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1cdde:	d008      	beq.n	1cdf2 <att_timeout+0x1e>
   1cde0:	4b08      	ldr	r3, [pc, #32]	; (1ce04 <att_timeout+0x30>)
   1cde2:	4809      	ldr	r0, [pc, #36]	; (1ce08 <att_timeout+0x34>)
   1cde4:	1ac9      	subs	r1, r1, r3
   1cde6:	0889      	lsrs	r1, r1, #2
   1cde8:	0189      	lsls	r1, r1, #6
   1cdea:	f041 0101 	orr.w	r1, r1, #1
   1cdee:	f00f ff76 	bl	2ccde <log_0>
	bt_att_disconnected(&chan->chan.chan);
   1cdf2:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
}
   1cdf6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1cdfa:	f7ff bf95 	b.w	1cd28 <bt_att_disconnected>
   1cdfe:	bf00      	nop
   1ce00:	200007a8 	.word	0x200007a8
   1ce04:	200007a8 	.word	0x200007a8
   1ce08:	000358a3 	.word	0x000358a3

0001ce0c <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1ce0c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ce10:	460c      	mov	r4, r1
   1ce12:	4617      	mov	r7, r2
   1ce14:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1ce16:	4605      	mov	r5, r0
   1ce18:	b958      	cbnz	r0, 1ce32 <bt_att_send+0x26>
   1ce1a:	492f      	ldr	r1, [pc, #188]	; (1ced8 <bt_att_send+0xcc>)
   1ce1c:	482f      	ldr	r0, [pc, #188]	; (1cedc <bt_att_send+0xd0>)
   1ce1e:	4a30      	ldr	r2, [pc, #192]	; (1cee0 <bt_att_send+0xd4>)
   1ce20:	f640 434a 	movw	r3, #3146	; 0xc4a
   1ce24:	f00f fbb9 	bl	2c59a <printk>
   1ce28:	482d      	ldr	r0, [pc, #180]	; (1cee0 <bt_att_send+0xd4>)
   1ce2a:	f640 414a 	movw	r1, #3146	; 0xc4a
   1ce2e:	f00f fdf5 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1ce32:	b95c      	cbnz	r4, 1ce4c <bt_att_send+0x40>
   1ce34:	492b      	ldr	r1, [pc, #172]	; (1cee4 <bt_att_send+0xd8>)
   1ce36:	4829      	ldr	r0, [pc, #164]	; (1cedc <bt_att_send+0xd0>)
   1ce38:	4a29      	ldr	r2, [pc, #164]	; (1cee0 <bt_att_send+0xd4>)
   1ce3a:	f640 434b 	movw	r3, #3147	; 0xc4b
   1ce3e:	f00f fbac 	bl	2c59a <printk>
   1ce42:	4827      	ldr	r0, [pc, #156]	; (1cee0 <bt_att_send+0xd4>)
   1ce44:	f640 414b 	movw	r1, #3147	; 0xc4b
   1ce48:	f00f fde8 	bl	2ca1c <assert_post_action>

	att = att_get(conn);
   1ce4c:	4628      	mov	r0, r5
   1ce4e:	f7ff f957 	bl	1c100 <att_get>
	if (!att) {
   1ce52:	4606      	mov	r6, r0
   1ce54:	b938      	cbnz	r0, 1ce66 <bt_att_send+0x5a>
		net_buf_unref(buf);
   1ce56:	4620      	mov	r0, r4
   1ce58:	f004 f95e 	bl	21118 <net_buf_unref>
		return -ENOTCONN;
   1ce5c:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1ce60:	b002      	add	sp, #8
   1ce62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1ce66:	b147      	cbz	r7, 1ce7a <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1ce68:	f8cd 8000 	str.w	r8, [sp]
   1ce6c:	463b      	mov	r3, r7
   1ce6e:	4622      	mov	r2, r4
   1ce70:	2104      	movs	r1, #4
   1ce72:	4628      	mov	r0, r5
   1ce74:	f011 fd00 	bl	2e878 <bt_l2cap_send_cb>
   1ce78:	e7f2      	b.n	1ce60 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   1ce7a:	f100 070c 	add.w	r7, r0, #12
   1ce7e:	4621      	mov	r1, r4
   1ce80:	4638      	mov	r0, r7
   1ce82:	f004 f915 	bl	210b0 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1ce86:	2200      	movs	r2, #0
   1ce88:	2300      	movs	r3, #0
   1ce8a:	4638      	mov	r0, r7
   1ce8c:	f004 f8b2 	bl	20ff4 <net_buf_get>
	if (!buf) {
   1ce90:	4605      	mov	r5, r0
   1ce92:	b908      	cbnz	r0, 1ce98 <bt_att_send+0x8c>
	return 0;
   1ce94:	2000      	movs	r0, #0
   1ce96:	e7e3      	b.n	1ce60 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ce98:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1ce9a:	b1c3      	cbz	r3, 1cece <bt_att_send+0xc2>
   1ce9c:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1cea0:	d015      	beq.n	1cece <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cea2:	681c      	ldr	r4, [r3, #0]
   1cea4:	b10c      	cbz	r4, 1ceaa <bt_att_send+0x9e>
   1cea6:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   1ceaa:	2200      	movs	r2, #0
   1ceac:	4629      	mov	r1, r5
   1ceae:	f7fe ff07 	bl	1bcc0 <chan_send>
		if (err >= 0) {
   1ceb2:	2800      	cmp	r0, #0
   1ceb4:	daee      	bge.n	1ce94 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1ceb6:	b154      	cbz	r4, 1cece <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ceb8:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1cebc:	d004      	beq.n	1cec8 <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cebe:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   1cec2:	b10b      	cbz	r3, 1cec8 <bt_att_send+0xbc>
   1cec4:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1cec8:	4620      	mov	r0, r4
   1ceca:	461c      	mov	r4, r3
   1cecc:	e7ed      	b.n	1ceaa <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1cece:	4629      	mov	r1, r5
   1ced0:	4638      	mov	r0, r7
   1ced2:	f013 fa24 	bl	3031e <k_queue_prepend>
   1ced6:	e7dd      	b.n	1ce94 <bt_att_send+0x88>
   1ced8:	00036585 	.word	0x00036585
   1cedc:	00032486 	.word	0x00032486
   1cee0:	00035688 	.word	0x00035688
   1cee4:	00034a77 	.word	0x00034a77

0001cee8 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1cee8:	b538      	push	{r3, r4, r5, lr}
   1ceea:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1ceec:	4605      	mov	r5, r0
   1ceee:	b958      	cbnz	r0, 1cf08 <bt_att_req_send+0x20>
   1cef0:	4916      	ldr	r1, [pc, #88]	; (1cf4c <bt_att_req_send+0x64>)
   1cef2:	4817      	ldr	r0, [pc, #92]	; (1cf50 <bt_att_req_send+0x68>)
   1cef4:	4a17      	ldr	r2, [pc, #92]	; (1cf54 <bt_att_req_send+0x6c>)
   1cef6:	f640 4367 	movw	r3, #3175	; 0xc67
   1cefa:	f00f fb4e 	bl	2c59a <printk>
   1cefe:	4815      	ldr	r0, [pc, #84]	; (1cf54 <bt_att_req_send+0x6c>)
   1cf00:	f640 4167 	movw	r1, #3175	; 0xc67
   1cf04:	f00f fd8a 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(req);
   1cf08:	b95c      	cbnz	r4, 1cf22 <bt_att_req_send+0x3a>
   1cf0a:	4913      	ldr	r1, [pc, #76]	; (1cf58 <bt_att_req_send+0x70>)
   1cf0c:	4810      	ldr	r0, [pc, #64]	; (1cf50 <bt_att_req_send+0x68>)
   1cf0e:	4a11      	ldr	r2, [pc, #68]	; (1cf54 <bt_att_req_send+0x6c>)
   1cf10:	f640 4368 	movw	r3, #3176	; 0xc68
   1cf14:	f00f fb41 	bl	2c59a <printk>
   1cf18:	480e      	ldr	r0, [pc, #56]	; (1cf54 <bt_att_req_send+0x6c>)
   1cf1a:	f640 4168 	movw	r1, #3176	; 0xc68
   1cf1e:	f00f fd7d 	bl	2ca1c <assert_post_action>

	att = att_get(conn);
   1cf22:	4628      	mov	r0, r5
   1cf24:	f7ff f8ec 	bl	1c100 <att_get>
	if (!att) {
   1cf28:	b160      	cbz	r0, 1cf44 <bt_att_req_send+0x5c>
	parent->next = child;
   1cf2a:	2300      	movs	r3, #0
   1cf2c:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1cf2e:	6883      	ldr	r3, [r0, #8]
   1cf30:	b92b      	cbnz	r3, 1cf3e <bt_att_req_send+0x56>
	list->head = node;
   1cf32:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1cf36:	f011 ff45 	bl	2edc4 <att_req_send_process>

	return 0;
   1cf3a:	2000      	movs	r0, #0
}
   1cf3c:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1cf3e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1cf40:	6084      	str	r4, [r0, #8]
}
   1cf42:	e7f8      	b.n	1cf36 <bt_att_req_send+0x4e>
		return -ENOTCONN;
   1cf44:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1cf48:	e7f8      	b.n	1cf3c <bt_att_req_send+0x54>
   1cf4a:	bf00      	nop
   1cf4c:	00036585 	.word	0x00036585
   1cf50:	00032486 	.word	0x00032486
   1cf54:	00035688 	.word	0x00035688
   1cf58:	000355fa 	.word	0x000355fa

0001cf5c <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   1cf5c:	b510      	push	{r4, lr}
   1cf5e:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   1cf60:	b348      	cbz	r0, 1cfb6 <bt_att_req_cancel+0x5a>
   1cf62:	b341      	cbz	r1, 1cfb6 <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   1cf64:	f7ff f8cc 	bl	1c100 <att_get>
	if (!att) {
   1cf68:	b328      	cbz	r0, 1cfb6 <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cf6a:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1cf6c:	b15b      	cbz	r3, 1cf86 <bt_att_req_cancel+0x2a>
   1cf6e:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   1cf72:	d008      	beq.n	1cf86 <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cf74:	681b      	ldr	r3, [r3, #0]
   1cf76:	b10b      	cbz	r3, 1cf7c <bt_att_req_cancel+0x20>
   1cf78:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   1cf7c:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   1cf80:	4294      	cmp	r4, r2
   1cf82:	d005      	beq.n	1cf90 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cf84:	b963      	cbnz	r3, 1cfa0 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1cf86:	4621      	mov	r1, r4
   1cf88:	3004      	adds	r0, #4
   1cf8a:	f011 fcd7 	bl	2e93c <sys_slist_find_and_remove>
   1cf8e:	e002      	b.n	1cf96 <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   1cf90:	4b09      	ldr	r3, [pc, #36]	; (1cfb8 <bt_att_req_cancel+0x5c>)
   1cf92:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   1cf96:	4620      	mov	r0, r4
}
   1cf98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1cf9c:	f7ff be56 	b.w	1cc4c <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1cfa0:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   1cfa4:	d004      	beq.n	1cfb0 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1cfa6:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1cfaa:	b10a      	cbz	r2, 1cfb0 <bt_att_req_cancel+0x54>
   1cfac:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   1cfb0:	4619      	mov	r1, r3
   1cfb2:	4613      	mov	r3, r2
   1cfb4:	e7e2      	b.n	1cf7c <bt_att_req_cancel+0x20>
}
   1cfb6:	bd10      	pop	{r4, pc}
   1cfb8:	20002d28 	.word	0x20002d28

0001cfbc <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1cfbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cfbe:	4d0d      	ldr	r5, [pc, #52]	; (1cff4 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1cfc0:	4604      	mov	r4, r0
   1cfc2:	b960      	cbnz	r0, 1cfde <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1cfc4:	9000      	str	r0, [sp, #0]
   1cfc6:	4669      	mov	r1, sp
   1cfc8:	f8cd 0003 	str.w	r0, [sp, #3]
   1cfcc:	1c68      	adds	r0, r5, #1
   1cfce:	f012 f8a9 	bl	2f124 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1cfd2:	2800      	cmp	r0, #0
   1cfd4:	bf08      	it	eq
   1cfd6:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1cfd8:	4620      	mov	r0, r4
   1cfda:	b003      	add	sp, #12
   1cfdc:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1cfde:	462a      	mov	r2, r5
   1cfe0:	f812 1b01 	ldrb.w	r1, [r2], #1
   1cfe4:	f011 fb4b 	bl	2e67e <bt_conn_is_peer_addr_le>
   1cfe8:	2800      	cmp	r0, #0
	return NULL;
   1cfea:	bf14      	ite	ne
   1cfec:	462c      	movne	r4, r5
   1cfee:	2400      	moveq	r4, #0
   1cff0:	e7f2      	b.n	1cfd8 <find_cf_cfg+0x1c>
   1cff2:	bf00      	nop
   1cff4:	20002d40 	.word	0x20002d40

0001cff8 <find_sc_cfg>:
{
   1cff8:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1cffa:	4c06      	ldr	r4, [pc, #24]	; (1d014 <find_sc_cfg+0x1c>)
   1cffc:	7823      	ldrb	r3, [r4, #0]
   1cffe:	4283      	cmp	r3, r0
   1d000:	d103      	bne.n	1d00a <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1d002:	1c60      	adds	r0, r4, #1
   1d004:	f012 f88e 	bl	2f124 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1d008:	b108      	cbz	r0, 1d00e <find_sc_cfg+0x16>
	return NULL;
   1d00a:	2000      	movs	r0, #0
}
   1d00c:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1d00e:	4620      	mov	r0, r4
   1d010:	e7fc      	b.n	1d00c <find_sc_cfg+0x14>
   1d012:	bf00      	nop
   1d014:	20003908 	.word	0x20003908

0001d018 <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   1d018:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d01a:	4d0d      	ldr	r5, [pc, #52]	; (1d050 <gatt_sub_find+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   1d01c:	4604      	mov	r4, r0
   1d01e:	b960      	cbnz	r0, 1d03a <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   1d020:	9000      	str	r0, [sp, #0]
   1d022:	4669      	mov	r1, sp
   1d024:	f8cd 0003 	str.w	r0, [sp, #3]
   1d028:	1c68      	adds	r0, r5, #1
   1d02a:	f012 f87b 	bl	2f124 <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
   1d02e:	2800      	cmp	r0, #0
   1d030:	bf08      	it	eq
   1d032:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
   1d034:	4620      	mov	r0, r4
   1d036:	b003      	add	sp, #12
   1d038:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1d03a:	462a      	mov	r2, r5
   1d03c:	f812 1b01 	ldrb.w	r1, [r2], #1
   1d040:	f011 fb1d 	bl	2e67e <bt_conn_is_peer_addr_le>
   1d044:	2800      	cmp	r0, #0
	return NULL;
   1d046:	bf14      	ite	ne
   1d048:	462c      	movne	r4, r5
   1d04a:	2400      	moveq	r4, #0
   1d04c:	e7f2      	b.n	1d034 <gatt_sub_find+0x1c>
   1d04e:	bf00      	nop
   1d050:	20002d70 	.word	0x20002d70

0001d054 <bt_gatt_attr_write_ccc>:
{
   1d054:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d058:	461f      	mov	r7, r3
   1d05a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1d05e:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1d062:	4604      	mov	r4, r0
   1d064:	4688      	mov	r8, r1
	if (offset) {
   1d066:	2b00      	cmp	r3, #0
   1d068:	d155      	bne.n	1d116 <bt_gatt_attr_write_ccc+0xc2>
	if (!len || len > sizeof(uint16_t)) {
   1d06a:	1e7b      	subs	r3, r7, #1
   1d06c:	2b01      	cmp	r3, #1
   1d06e:	d855      	bhi.n	1d11c <bt_gatt_attr_write_ccc+0xc8>
	if (len < sizeof(uint16_t)) {
   1d070:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1d072:	7816      	ldrb	r6, [r2, #0]
   1d074:	bf18      	it	ne
   1d076:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1d078:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1d07a:	bf0c      	ite	eq
   1d07c:	b2b6      	uxtheq	r6, r6
   1d07e:	ea46 2602 	orrne.w	r6, r6, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1d082:	f012 f852 	bl	2f12a <find_ccc_cfg>
	if (!cfg) {
   1d086:	4605      	mov	r5, r0
   1d088:	bb08      	cbnz	r0, 1d0ce <bt_gatt_attr_write_ccc+0x7a>
		if (!value) {
   1d08a:	b91e      	cbnz	r6, 1d094 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1d08c:	4638      	mov	r0, r7
}
   1d08e:	b003      	add	sp, #12
   1d090:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1d094:	4649      	mov	r1, r9
   1d096:	f012 f848 	bl	2f12a <find_ccc_cfg>
		if (!cfg) {
   1d09a:	4605      	mov	r5, r0
   1d09c:	b980      	cbnz	r0, 1d0c0 <bt_gatt_attr_write_ccc+0x6c>
			BT_WARN("No space to store CCC cfg");
   1d09e:	4921      	ldr	r1, [pc, #132]	; (1d124 <bt_gatt_attr_write_ccc+0xd0>)
   1d0a0:	680b      	ldr	r3, [r1, #0]
   1d0a2:	f013 0f06 	tst.w	r3, #6
   1d0a6:	d008      	beq.n	1d0ba <bt_gatt_attr_write_ccc+0x66>
   1d0a8:	4b1f      	ldr	r3, [pc, #124]	; (1d128 <bt_gatt_attr_write_ccc+0xd4>)
   1d0aa:	4820      	ldr	r0, [pc, #128]	; (1d12c <bt_gatt_attr_write_ccc+0xd8>)
   1d0ac:	1ac9      	subs	r1, r1, r3
   1d0ae:	0889      	lsrs	r1, r1, #2
   1d0b0:	0189      	lsls	r1, r1, #6
   1d0b2:	f041 0102 	orr.w	r1, r1, #2
   1d0b6:	f00f fe12 	bl	2ccde <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d0ba:	f06f 0010 	mvn.w	r0, #16
   1d0be:	e7e6      	b.n	1d08e <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d0c0:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1d0c4:	3001      	adds	r0, #1
   1d0c6:	f012 f934 	bl	2f332 <bt_addr_le_copy>
		cfg->id = conn->id;
   1d0ca:	7a23      	ldrb	r3, [r4, #8]
   1d0cc:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1d0ce:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1d0d2:	b9a3      	cbnz	r3, 1d0fe <bt_gatt_attr_write_ccc+0xaa>
	if (cfg->value != ccc->value) {
   1d0d4:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1d0d8:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   1d0da:	42b3      	cmp	r3, r6
   1d0dc:	d003      	beq.n	1d0e6 <bt_gatt_attr_write_ccc+0x92>
		gatt_ccc_changed(attr, ccc);
   1d0de:	4649      	mov	r1, r9
   1d0e0:	4640      	mov	r0, r8
   1d0e2:	f011 ffa2 	bl	2f02a <gatt_ccc_changed>
	if (!value) {
   1d0e6:	2e00      	cmp	r6, #0
   1d0e8:	d1d0      	bne.n	1d08c <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d0ea:	4669      	mov	r1, sp
   1d0ec:	1c68      	adds	r0, r5, #1
   1d0ee:	9600      	str	r6, [sp, #0]
   1d0f0:	f8cd 6003 	str.w	r6, [sp, #3]
   1d0f4:	f012 f91d 	bl	2f332 <bt_addr_le_copy>
	cfg->id = 0U;
   1d0f8:	702e      	strb	r6, [r5, #0]
	cfg->value = 0U;
   1d0fa:	812e      	strh	r6, [r5, #8]
}
   1d0fc:	e7c6      	b.n	1d08c <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1d0fe:	4632      	mov	r2, r6
   1d100:	4641      	mov	r1, r8
   1d102:	4620      	mov	r0, r4
   1d104:	4798      	blx	r3
		if (write < 0) {
   1d106:	2800      	cmp	r0, #0
   1d108:	dbc1      	blt.n	1d08e <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1d10a:	1e44      	subs	r4, r0, #1
   1d10c:	2c01      	cmp	r4, #1
   1d10e:	d9e1      	bls.n	1d0d4 <bt_gatt_attr_write_ccc+0x80>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1d110:	f06f 000d 	mvn.w	r0, #13
   1d114:	e7bb      	b.n	1d08e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d116:	f06f 0006 	mvn.w	r0, #6
   1d11a:	e7b8      	b.n	1d08e <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d11c:	f06f 000c 	mvn.w	r0, #12
   1d120:	e7b5      	b.n	1d08e <bt_gatt_attr_write_ccc+0x3a>
   1d122:	bf00      	nop
   1d124:	200007b4 	.word	0x200007b4
   1d128:	200007a8 	.word	0x200007a8
   1d12c:	000358b6 	.word	0x000358b6

0001d130 <gatt_sub_free>:
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   1d130:	6883      	ldr	r3, [r0, #8]
{
   1d132:	b513      	push	{r0, r1, r4, lr}
   1d134:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   1d136:	b15b      	cbz	r3, 1d150 <gatt_sub_free+0x20>
   1d138:	490a      	ldr	r1, [pc, #40]	; (1d164 <gatt_sub_free+0x34>)
   1d13a:	480b      	ldr	r0, [pc, #44]	; (1d168 <gatt_sub_free+0x38>)
   1d13c:	4a0b      	ldr	r2, [pc, #44]	; (1d16c <gatt_sub_free+0x3c>)
   1d13e:	f640 23b1 	movw	r3, #2737	; 0xab1
   1d142:	f00f fa2a 	bl	2c59a <printk>
   1d146:	4809      	ldr	r0, [pc, #36]	; (1d16c <gatt_sub_free+0x3c>)
   1d148:	f640 21b1 	movw	r1, #2737	; 0xab1
   1d14c:	f00f fc66 	bl	2ca1c <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1d150:	2300      	movs	r3, #0
   1d152:	4669      	mov	r1, sp
   1d154:	1c60      	adds	r0, r4, #1
   1d156:	9300      	str	r3, [sp, #0]
   1d158:	f8cd 3003 	str.w	r3, [sp, #3]
   1d15c:	f012 f8e9 	bl	2f332 <bt_addr_le_copy>
}
   1d160:	b002      	add	sp, #8
   1d162:	bd10      	pop	{r4, pc}
   1d164:	00035900 	.word	0x00035900
   1d168:	00032486 	.word	0x00032486
   1d16c:	000358d0 	.word	0x000358d0

0001d170 <sc_save>:
{
   1d170:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d174:	4680      	mov	r8, r0
   1d176:	460f      	mov	r7, r1
   1d178:	4616      	mov	r6, r2
   1d17a:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1d17c:	f7ff ff3c 	bl	1cff8 <find_sc_cfg>
	if (!cfg) {
   1d180:	4604      	mov	r4, r0
   1d182:	b9e0      	cbnz	r0, 1d1be <sc_save+0x4e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1d184:	4669      	mov	r1, sp
   1d186:	9000      	str	r0, [sp, #0]
   1d188:	f8cd 0003 	str.w	r0, [sp, #3]
   1d18c:	f7ff ff34 	bl	1cff8 <find_sc_cfg>
		if (!cfg) {
   1d190:	4604      	mov	r4, r0
   1d192:	b978      	cbnz	r0, 1d1b4 <sc_save+0x44>
			BT_ERR("unable to save SC: no cfg left");
   1d194:	4911      	ldr	r1, [pc, #68]	; (1d1dc <sc_save+0x6c>)
   1d196:	680b      	ldr	r3, [r1, #0]
   1d198:	075b      	lsls	r3, r3, #29
   1d19a:	d008      	beq.n	1d1ae <sc_save+0x3e>
   1d19c:	4b10      	ldr	r3, [pc, #64]	; (1d1e0 <sc_save+0x70>)
   1d19e:	4811      	ldr	r0, [pc, #68]	; (1d1e4 <sc_save+0x74>)
   1d1a0:	1ac9      	subs	r1, r1, r3
   1d1a2:	0889      	lsrs	r1, r1, #2
   1d1a4:	0189      	lsls	r1, r1, #6
   1d1a6:	f041 0101 	orr.w	r1, r1, #1
   1d1aa:	f00f fd98 	bl	2ccde <log_0>
}
   1d1ae:	b002      	add	sp, #8
   1d1b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1d1b4:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1d1b8:	4639      	mov	r1, r7
   1d1ba:	f012 f8ba 	bl	2f332 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1d1be:	8922      	ldrh	r2, [r4, #8]
   1d1c0:	8963      	ldrh	r3, [r4, #10]
   1d1c2:	b91a      	cbnz	r2, 1d1cc <sc_save+0x5c>
   1d1c4:	b923      	cbnz	r3, 1d1d0 <sc_save+0x60>
		cfg->data.start = start;
   1d1c6:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1d1c8:	8165      	strh	r5, [r4, #10]
   1d1ca:	e7f0      	b.n	1d1ae <sc_save+0x3e>
	if (new_start >= *start && new_end <= *end) {
   1d1cc:	4296      	cmp	r6, r2
   1d1ce:	d302      	bcc.n	1d1d6 <sc_save+0x66>
   1d1d0:	429d      	cmp	r5, r3
   1d1d2:	d9ec      	bls.n	1d1ae <sc_save+0x3e>
   1d1d4:	e7f8      	b.n	1d1c8 <sc_save+0x58>
		*start = new_start;
   1d1d6:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1d1d8:	e7fa      	b.n	1d1d0 <sc_save+0x60>
   1d1da:	bf00      	nop
   1d1dc:	200007b4 	.word	0x200007b4
   1d1e0:	200007a8 	.word	0x200007a8
   1d1e4:	00035917 	.word	0x00035917

0001d1e8 <remove_peer_from_attr>:
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d1e8:	6881      	ldr	r1, [r0, #8]
   1d1ea:	4b09      	ldr	r3, [pc, #36]	; (1d210 <remove_peer_from_attr+0x28>)
   1d1ec:	4299      	cmp	r1, r3
{
   1d1ee:	b510      	push	{r4, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d1f0:	d10c      	bne.n	1d20c <remove_peer_from_attr+0x24>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1d1f2:	68c4      	ldr	r4, [r0, #12]

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1d1f4:	6811      	ldr	r1, [r2, #0]
		if (id == ccc->cfg[i].id &&
   1d1f6:	7823      	ldrb	r3, [r4, #0]
   1d1f8:	7912      	ldrb	r2, [r2, #4]
   1d1fa:	429a      	cmp	r2, r3
   1d1fc:	d106      	bne.n	1d20c <remove_peer_from_attr+0x24>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1d1fe:	1c60      	adds	r0, r4, #1
   1d200:	f011 ff90 	bl	2f124 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1d204:	b910      	cbnz	r0, 1d20c <remove_peer_from_attr+0x24>
   1d206:	6020      	str	r0, [r4, #0]
   1d208:	6060      	str	r0, [r4, #4]
   1d20a:	8120      	strh	r0, [r4, #8]
	if (cfg) {
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   1d20c:	2001      	movs	r0, #1
   1d20e:	bd10      	pop	{r4, pc}
   1d210:	0001d055 	.word	0x0001d055

0001d214 <cf_write>:
{
   1d214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d218:	4698      	mov	r8, r3
   1d21a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1d21e:	2b01      	cmp	r3, #1
{
   1d220:	4606      	mov	r6, r0
   1d222:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1d224:	d841      	bhi.n	1d2aa <cf_write+0x96>
	if (offset + len > sizeof(cfg->data)) {
   1d226:	4443      	add	r3, r8
   1d228:	2b01      	cmp	r3, #1
   1d22a:	4645      	mov	r5, r8
   1d22c:	dc40      	bgt.n	1d2b0 <cf_write+0x9c>
	cfg = find_cf_cfg(conn);
   1d22e:	f7ff fec5 	bl	1cfbc <find_cf_cfg>
	if (!cfg) {
   1d232:	4604      	mov	r4, r0
   1d234:	b9a0      	cbnz	r0, 1d260 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1d236:	f7ff fec1 	bl	1cfbc <find_cf_cfg>
	if (!cfg) {
   1d23a:	4604      	mov	r4, r0
   1d23c:	b980      	cbnz	r0, 1d260 <cf_write+0x4c>
		BT_WARN("No space to store Client Supported Features");
   1d23e:	491f      	ldr	r1, [pc, #124]	; (1d2bc <cf_write+0xa8>)
   1d240:	680b      	ldr	r3, [r1, #0]
   1d242:	f013 0f06 	tst.w	r3, #6
   1d246:	d008      	beq.n	1d25a <cf_write+0x46>
   1d248:	4b1d      	ldr	r3, [pc, #116]	; (1d2c0 <cf_write+0xac>)
   1d24a:	481e      	ldr	r0, [pc, #120]	; (1d2c4 <cf_write+0xb0>)
   1d24c:	1ac9      	subs	r1, r1, r3
   1d24e:	0889      	lsrs	r1, r1, #2
   1d250:	0189      	lsls	r1, r1, #6
   1d252:	f041 0102 	orr.w	r1, r1, #2
   1d256:	f00f fd42 	bl	2ccde <log_0>
   1d25a:	f06f 0510 	mvn.w	r5, #16
   1d25e:	e00f      	b.n	1d280 <cf_write+0x6c>
{
   1d260:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1d262:	f1b8 0f00 	cmp.w	r8, #0
   1d266:	d10e      	bne.n	1d286 <cf_write+0x72>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d268:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1d26c:	1c60      	adds	r0, r4, #1
   1d26e:	f012 f860 	bl	2f332 <bt_addr_le_copy>
	cfg->id = conn->id;
   1d272:	4620      	mov	r0, r4
   1d274:	7a33      	ldrb	r3, [r6, #8]
   1d276:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d27a:	2100      	movs	r1, #0
   1d27c:	f012 f946 	bl	2f50c <atomic_set_bit>
}
   1d280:	4628      	mov	r0, r5
   1d282:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1d286:	7a20      	ldrb	r0, [r4, #8]
   1d288:	fa20 f301 	lsr.w	r3, r0, r1
   1d28c:	07da      	lsls	r2, r3, #31
   1d28e:	d503      	bpl.n	1d298 <cf_write+0x84>
		    !(value[i / 8] & BIT(i % 8))) {
   1d290:	783b      	ldrb	r3, [r7, #0]
   1d292:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1d294:	07db      	lsls	r3, r3, #31
   1d296:	d50e      	bpl.n	1d2b6 <cf_write+0xa2>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1d298:	3101      	adds	r1, #1
   1d29a:	2903      	cmp	r1, #3
   1d29c:	d1e1      	bne.n	1d262 <cf_write+0x4e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1d29e:	783b      	ldrb	r3, [r7, #0]
   1d2a0:	f003 0307 	and.w	r3, r3, #7
   1d2a4:	4318      	orrs	r0, r3
   1d2a6:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1d2a8:	e7de      	b.n	1d268 <cf_write+0x54>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d2aa:	f06f 0506 	mvn.w	r5, #6
   1d2ae:	e7e7      	b.n	1d280 <cf_write+0x6c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d2b0:	f06f 050c 	mvn.w	r5, #12
   1d2b4:	e7e4      	b.n	1d280 <cf_write+0x6c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1d2b6:	f06f 0512 	mvn.w	r5, #18
   1d2ba:	e7e1      	b.n	1d280 <cf_write+0x6c>
   1d2bc:	200007b4 	.word	0x200007b4
   1d2c0:	200007a8 	.word	0x200007a8
   1d2c4:	00035936 	.word	0x00035936

0001d2c8 <sc_indicate_rsp>:
{
   1d2c8:	b510      	push	{r4, lr}
   1d2ca:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d2cc:	4814      	ldr	r0, [pc, #80]	; (1d320 <sc_indicate_rsp+0x58>)
   1d2ce:	f3bf 8f5b 	dmb	ish
   1d2d2:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1d2d6:	e853 2f00 	ldrex	r2, [r3]
   1d2da:	f022 0202 	bic.w	r2, r2, #2
   1d2de:	e843 2100 	strex	r1, r2, [r3]
   1d2e2:	2900      	cmp	r1, #0
   1d2e4:	d1f7      	bne.n	1d2d6 <sc_indicate_rsp+0xe>
   1d2e6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d2ea:	f3bf 8f5b 	dmb	ish
   1d2ee:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1d2f0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1d2f4:	07da      	lsls	r2, r3, #31
   1d2f6:	d504      	bpl.n	1d302 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   1d2f8:	2200      	movs	r2, #0
   1d2fa:	2300      	movs	r3, #0
   1d2fc:	3020      	adds	r0, #32
   1d2fe:	f009 fa77 	bl	267f0 <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1d302:	4620      	mov	r0, r4
   1d304:	f7ff fe5a 	bl	1cfbc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1d308:	b140      	cbz	r0, 1d31c <sc_indicate_rsp+0x54>
   1d30a:	7a03      	ldrb	r3, [r0, #8]
   1d30c:	07db      	lsls	r3, r3, #31
   1d30e:	d505      	bpl.n	1d31c <sc_indicate_rsp+0x54>
}
   1d310:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1d314:	2100      	movs	r1, #0
   1d316:	300c      	adds	r0, #12
   1d318:	f012 b8f8 	b.w	2f50c <atomic_set_bit>
}
   1d31c:	bd10      	pop	{r4, pc}
   1d31e:	bf00      	nop
   1d320:	20001d48 	.word	0x20001d48

0001d324 <gatt_write_ccc>:
{
   1d324:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1d326:	2312      	movs	r3, #18
{
   1d328:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1d32a:	2104      	movs	r1, #4
   1d32c:	e9cd 3100 	strd	r3, r1, [sp]
   1d330:	4b03      	ldr	r3, [pc, #12]	; (1d340 <gatt_write_ccc+0x1c>)
   1d332:	4904      	ldr	r1, [pc, #16]	; (1d344 <gatt_write_ccc+0x20>)
   1d334:	f012 f9a1 	bl	2f67a <gatt_req_send>
}
   1d338:	b003      	add	sp, #12
   1d33a:	f85d fb04 	ldr.w	pc, [sp], #4
   1d33e:	bf00      	nop
   1d340:	0002f555 	.word	0x0002f555
   1d344:	0002f605 	.word	0x0002f605

0001d348 <disconnected_cb>:
{
   1d348:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d34c:	4b23      	ldr	r3, [pc, #140]	; (1d3dc <disconnected_cb+0x94>)
{
   1d34e:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d350:	6882      	ldr	r2, [r0, #8]
   1d352:	429a      	cmp	r2, r3
{
   1d354:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1d356:	d102      	bne.n	1d35e <disconnected_cb+0x16>
	ccc = attr->user_data;
   1d358:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1d35a:	8963      	ldrh	r3, [r4, #10]
   1d35c:	bb03      	cbnz	r3, 1d3a0 <disconnected_cb+0x58>
}
   1d35e:	2001      	movs	r0, #1
   1d360:	b002      	add	sp, #8
   1d362:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d366:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1d36a:	7a28      	ldrb	r0, [r5, #8]
   1d36c:	4641      	mov	r1, r8
   1d36e:	f011 f8c8 	bl	2e502 <bt_addr_le_is_bonded>
   1d372:	b980      	cbnz	r0, 1d396 <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   1d374:	4b1a      	ldr	r3, [pc, #104]	; (1d3e0 <disconnected_cb+0x98>)
   1d376:	429c      	cmp	r4, r3
   1d378:	d102      	bne.n	1d380 <disconnected_cb+0x38>
					sc_clear(conn);
   1d37a:	4628      	mov	r0, r5
   1d37c:	f011 ffe5 	bl	2f34a <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d380:	2200      	movs	r2, #0
   1d382:	4669      	mov	r1, sp
   1d384:	4630      	mov	r0, r6
   1d386:	9200      	str	r2, [sp, #0]
   1d388:	f8cd 2003 	str.w	r2, [sp, #3]
   1d38c:	f011 ffd1 	bl	2f332 <bt_addr_le_copy>
	cfg->id = 0U;
   1d390:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   1d392:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   1d394:	e019      	b.n	1d3ca <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1d396:	4641      	mov	r1, r8
   1d398:	4630      	mov	r0, r6
   1d39a:	f011 ffca 	bl	2f332 <bt_addr_le_copy>
	if (!value_used) {
   1d39e:	e014      	b.n	1d3ca <disconnected_cb+0x82>
		if (!cfg->value) {
   1d3a0:	8923      	ldrh	r3, [r4, #8]
   1d3a2:	b193      	cbz	r3, 1d3ca <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1d3a4:	4626      	mov	r6, r4
   1d3a6:	4628      	mov	r0, r5
   1d3a8:	f816 1b01 	ldrb.w	r1, [r6], #1
   1d3ac:	4632      	mov	r2, r6
   1d3ae:	f011 f966 	bl	2e67e <bt_conn_is_peer_addr_le>
   1d3b2:	2800      	cmp	r0, #0
   1d3b4:	d1d7      	bne.n	1d366 <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1d3b6:	7820      	ldrb	r0, [r4, #0]
   1d3b8:	4631      	mov	r1, r6
   1d3ba:	f7fd ff1b 	bl	1b1f4 <bt_conn_lookup_addr_le>
			if (tmp) {
   1d3be:	b120      	cbz	r0, 1d3ca <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   1d3c0:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1d3c2:	f7fd fc85 	bl	1acd0 <bt_conn_unref>
	if (!value_used) {
   1d3c6:	2d07      	cmp	r5, #7
   1d3c8:	d0c9      	beq.n	1d35e <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1d3ca:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1d3cc:	2100      	movs	r1, #0
   1d3ce:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1d3d0:	2b00      	cmp	r3, #0
   1d3d2:	d0c4      	beq.n	1d35e <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1d3d4:	4638      	mov	r0, r7
   1d3d6:	4798      	blx	r3
   1d3d8:	e7c1      	b.n	1d35e <disconnected_cb+0x16>
   1d3da:	bf00      	nop
   1d3dc:	0001d055 	.word	0x0001d055
   1d3e0:	20000570 	.word	0x20000570

0001d3e4 <bt_gatt_init>:
{
   1d3e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1d3e6:	4b28      	ldr	r3, [pc, #160]	; (1d488 <bt_gatt_init+0xa4>)
   1d3e8:	f3bf 8f5b 	dmb	ish
   1d3ec:	2201      	movs	r2, #1
   1d3ee:	e853 1f00 	ldrex	r1, [r3]
   1d3f2:	2900      	cmp	r1, #0
   1d3f4:	d103      	bne.n	1d3fe <bt_gatt_init+0x1a>
   1d3f6:	e843 2000 	strex	r0, r2, [r3]
   1d3fa:	2800      	cmp	r0, #0
   1d3fc:	d1f7      	bne.n	1d3ee <bt_gatt_init+0xa>
   1d3fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1d402:	d140      	bne.n	1d486 <bt_gatt_init+0xa2>
   1d404:	f3bf 8f5b 	dmb	ish
   1d408:	4b20      	ldr	r3, [pc, #128]	; (1d48c <bt_gatt_init+0xa8>)
   1d40a:	e853 1f00 	ldrex	r1, [r3]
   1d40e:	2900      	cmp	r1, #0
   1d410:	d103      	bne.n	1d41a <bt_gatt_init+0x36>
   1d412:	e843 2000 	strex	r0, r2, [r3]
   1d416:	2800      	cmp	r0, #0
   1d418:	d1f7      	bne.n	1d40a <bt_gatt_init+0x26>
   1d41a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1d41e:	d02d      	beq.n	1d47c <bt_gatt_init+0x98>
	list->head = NULL;
   1d420:	4b1b      	ldr	r3, [pc, #108]	; (1d490 <bt_gatt_init+0xac>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1d422:	491c      	ldr	r1, [pc, #112]	; (1d494 <bt_gatt_init+0xb0>)
   1d424:	481c      	ldr	r0, [pc, #112]	; (1d498 <bt_gatt_init+0xb4>)
   1d426:	2200      	movs	r2, #0
	list->tail = NULL;
   1d428:	e9c3 2200 	strd	r2, r2, [r3]
   1d42c:	f009 f8bc 	bl	265a8 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1d430:	2300      	movs	r3, #0
   1d432:	4819      	ldr	r0, [pc, #100]	; (1d498 <bt_gatt_init+0xb4>)
   1d434:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1d438:	f009 f95e 	bl	266f8 <k_work_schedule>
}
   1d43c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1d440:	4916      	ldr	r1, [pc, #88]	; (1d49c <bt_gatt_init+0xb8>)
   1d442:	4817      	ldr	r0, [pc, #92]	; (1d4a0 <bt_gatt_init+0xbc>)
   1d444:	f009 b8b0 	b.w	265a8 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1d448:	4a16      	ldr	r2, [pc, #88]	; (1d4a4 <bt_gatt_init+0xc0>)
   1d44a:	6863      	ldr	r3, [r4, #4]
   1d44c:	8811      	ldrh	r1, [r2, #0]
   1d44e:	440b      	add	r3, r1
   1d450:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1d452:	3408      	adds	r4, #8
   1d454:	42ac      	cmp	r4, r5
   1d456:	d90e      	bls.n	1d476 <bt_gatt_init+0x92>
   1d458:	4913      	ldr	r1, [pc, #76]	; (1d4a8 <bt_gatt_init+0xc4>)
   1d45a:	4814      	ldr	r0, [pc, #80]	; (1d4ac <bt_gatt_init+0xc8>)
   1d45c:	f240 4351 	movw	r3, #1105	; 0x451
   1d460:	4632      	mov	r2, r6
   1d462:	f00f f89a 	bl	2c59a <printk>
   1d466:	4812      	ldr	r0, [pc, #72]	; (1d4b0 <bt_gatt_init+0xcc>)
   1d468:	f00f f897 	bl	2c59a <printk>
   1d46c:	f240 4151 	movw	r1, #1105	; 0x451
   1d470:	4630      	mov	r0, r6
   1d472:	f00f fad3 	bl	2ca1c <assert_post_action>
   1d476:	42bc      	cmp	r4, r7
   1d478:	d3e6      	bcc.n	1d448 <bt_gatt_init+0x64>
   1d47a:	e7d1      	b.n	1d420 <bt_gatt_init+0x3c>
   1d47c:	4d0d      	ldr	r5, [pc, #52]	; (1d4b4 <bt_gatt_init+0xd0>)
   1d47e:	4c0e      	ldr	r4, [pc, #56]	; (1d4b8 <bt_gatt_init+0xd4>)
   1d480:	4e0e      	ldr	r6, [pc, #56]	; (1d4bc <bt_gatt_init+0xd8>)
   1d482:	462f      	mov	r7, r5
   1d484:	e7e6      	b.n	1d454 <bt_gatt_init+0x70>
}
   1d486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1d488:	20002d50 	.word	0x20002d50
   1d48c:	20002d6c 	.word	0x20002d6c
   1d490:	20002d38 	.word	0x20002d38
   1d494:	0002f787 	.word	0x0002f787
   1d498:	20001cf0 	.word	0x20001cf0
   1d49c:	0001d929 	.word	0x0001d929
   1d4a0:	20001d68 	.word	0x20001d68
   1d4a4:	20003906 	.word	0x20003906
   1d4a8:	00035969 	.word	0x00035969
   1d4ac:	00032486 	.word	0x00032486
   1d4b0:	00035136 	.word	0x00035136
   1d4b4:	00030bd4 	.word	0x00030bd4
   1d4b8:	00030bc4 	.word	0x00030bc4
   1d4bc:	000358d0 	.word	0x000358d0

0001d4c0 <bt_gatt_attr_get_handle>:
{
   1d4c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   1d4c4:	4604      	mov	r4, r0
   1d4c6:	b910      	cbnz	r0, 1d4ce <bt_gatt_attr_get_handle+0xe>
		return 0;
   1d4c8:	2000      	movs	r0, #0
}
   1d4ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   1d4ce:	8a00      	ldrh	r0, [r0, #16]
   1d4d0:	2800      	cmp	r0, #0
   1d4d2:	d1fa      	bne.n	1d4ca <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d4d4:	4f1a      	ldr	r7, [pc, #104]	; (1d540 <bt_gatt_attr_get_handle+0x80>)
   1d4d6:	4d1b      	ldr	r5, [pc, #108]	; (1d544 <bt_gatt_attr_get_handle+0x84>)
   1d4d8:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1d554 <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
   1d4dc:	2601      	movs	r6, #1
   1d4de:	46b8      	mov	r8, r7
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d4e0:	42bd      	cmp	r5, r7
   1d4e2:	d90e      	bls.n	1d502 <bt_gatt_attr_get_handle+0x42>
   1d4e4:	4918      	ldr	r1, [pc, #96]	; (1d548 <bt_gatt_attr_get_handle+0x88>)
   1d4e6:	4819      	ldr	r0, [pc, #100]	; (1d54c <bt_gatt_attr_get_handle+0x8c>)
   1d4e8:	f240 538c 	movw	r3, #1420	; 0x58c
   1d4ec:	464a      	mov	r2, r9
   1d4ee:	f00f f854 	bl	2c59a <printk>
   1d4f2:	4817      	ldr	r0, [pc, #92]	; (1d550 <bt_gatt_attr_get_handle+0x90>)
   1d4f4:	f00f f851 	bl	2c59a <printk>
   1d4f8:	f240 518c 	movw	r1, #1420	; 0x58c
   1d4fc:	4648      	mov	r0, r9
   1d4fe:	f00f fa8d 	bl	2ca1c <assert_post_action>
   1d502:	4545      	cmp	r5, r8
   1d504:	d2e0      	bcs.n	1d4c8 <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   1d506:	e9d5 ec00 	ldrd	lr, ip, [r5]
   1d50a:	4574      	cmp	r4, lr
   1d50c:	d305      	bcc.n	1d51a <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1d50e:	2114      	movs	r1, #20
   1d510:	fb01 e30c 	mla	r3, r1, ip, lr
   1d514:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1d516:	429c      	cmp	r4, r3
   1d518:	d90f      	bls.n	1d53a <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   1d51a:	eb06 030c 	add.w	r3, r6, ip
   1d51e:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d520:	3508      	adds	r5, #8
   1d522:	4606      	mov	r6, r0
   1d524:	e7dc      	b.n	1d4e0 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   1d526:	fb01 e302 	mla	r3, r1, r2, lr
   1d52a:	429c      	cmp	r4, r3
   1d52c:	d0cd      	beq.n	1d4ca <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1d52e:	3201      	adds	r2, #1
   1d530:	18b3      	adds	r3, r6, r2
   1d532:	4562      	cmp	r2, ip
   1d534:	b298      	uxth	r0, r3
   1d536:	d1f6      	bne.n	1d526 <bt_gatt_attr_get_handle+0x66>
   1d538:	e7f2      	b.n	1d520 <bt_gatt_attr_get_handle+0x60>
   1d53a:	2200      	movs	r2, #0
   1d53c:	e7f8      	b.n	1d530 <bt_gatt_attr_get_handle+0x70>
   1d53e:	bf00      	nop
   1d540:	00030bd4 	.word	0x00030bd4
   1d544:	00030bc4 	.word	0x00030bc4
   1d548:	00035962 	.word	0x00035962
   1d54c:	00032486 	.word	0x00032486
   1d550:	00035136 	.word	0x00035136
   1d554:	000358d0 	.word	0x000358d0

0001d558 <bt_gatt_foreach_attr_type>:
{
   1d558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d55c:	b085      	sub	sp, #20
   1d55e:	4607      	mov	r7, r0
   1d560:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   1d564:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   1d566:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d56a:	2d00      	cmp	r5, #0
   1d56c:	bf08      	it	eq
   1d56e:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1d570:	4b2d      	ldr	r3, [pc, #180]	; (1d628 <bt_gatt_foreach_attr_type+0xd0>)
{
   1d572:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   1d574:	881b      	ldrh	r3, [r3, #0]
   1d576:	4283      	cmp	r3, r0
{
   1d578:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1d57a:	d24e      	bcs.n	1d61a <bt_gatt_foreach_attr_type+0xc2>
}
   1d57c:	b005      	add	sp, #20
   1d57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1d582:	6873      	ldr	r3, [r6, #4]
   1d584:	4423      	add	r3, r4
   1d586:	42bb      	cmp	r3, r7
   1d588:	d244      	bcs.n	1d614 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   1d58a:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d58c:	3608      	adds	r6, #8
   1d58e:	4556      	cmp	r6, sl
   1d590:	d90e      	bls.n	1d5b0 <bt_gatt_foreach_attr_type+0x58>
   1d592:	4926      	ldr	r1, [pc, #152]	; (1d62c <bt_gatt_foreach_attr_type+0xd4>)
   1d594:	4826      	ldr	r0, [pc, #152]	; (1d630 <bt_gatt_foreach_attr_type+0xd8>)
   1d596:	f44f 63ca 	mov.w	r3, #1616	; 0x650
   1d59a:	465a      	mov	r2, fp
   1d59c:	f00e fffd 	bl	2c59a <printk>
   1d5a0:	4824      	ldr	r0, [pc, #144]	; (1d634 <bt_gatt_foreach_attr_type+0xdc>)
   1d5a2:	f00e fffa 	bl	2c59a <printk>
   1d5a6:	f44f 61ca 	mov.w	r1, #1616	; 0x650
   1d5aa:	4658      	mov	r0, fp
   1d5ac:	f00f fa36 	bl	2ca1c <assert_post_action>
   1d5b0:	4b21      	ldr	r3, [pc, #132]	; (1d638 <bt_gatt_foreach_attr_type+0xe0>)
   1d5b2:	429e      	cmp	r6, r3
   1d5b4:	d3e5      	bcc.n	1d582 <bt_gatt_foreach_attr_type+0x2a>
   1d5b6:	e7e1      	b.n	1d57c <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1d5b8:	5889      	ldr	r1, [r1, r2]
   1d5ba:	9303      	str	r3, [sp, #12]
   1d5bc:	4640      	mov	r0, r8
   1d5be:	f010 fe10 	bl	2e1e2 <bt_uuid_cmp>
   1d5c2:	9b03      	ldr	r3, [sp, #12]
   1d5c4:	b198      	cbz	r0, 1d5ee <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1d5c6:	3401      	adds	r4, #1
   1d5c8:	f109 0901 	add.w	r9, r9, #1
   1d5cc:	b2a4      	uxth	r4, r4
   1d5ce:	6873      	ldr	r3, [r6, #4]
   1d5d0:	454b      	cmp	r3, r9
   1d5d2:	d9db      	bls.n	1d58c <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   1d5d4:	9b02      	ldr	r3, [sp, #8]
   1d5d6:	429c      	cmp	r4, r3
   1d5d8:	d8d0      	bhi.n	1d57c <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   1d5da:	42bc      	cmp	r4, r7
   1d5dc:	d3f3      	bcc.n	1d5c6 <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1d5de:	2314      	movs	r3, #20
   1d5e0:	6831      	ldr	r1, [r6, #0]
   1d5e2:	fb03 f209 	mul.w	r2, r3, r9
   1d5e6:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1d5e8:	f1b8 0f00 	cmp.w	r8, #0
   1d5ec:	d1e4      	bne.n	1d5b8 <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   1d5ee:	9a01      	ldr	r2, [sp, #4]
   1d5f0:	b95a      	cbnz	r2, 1d60a <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   1d5f2:	3d01      	subs	r5, #1
   1d5f4:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1d5f6:	4618      	mov	r0, r3
   1d5f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1d5fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1d5fc:	4621      	mov	r1, r4
   1d5fe:	4798      	blx	r3
	if (!*num_matches) {
   1d600:	2d00      	cmp	r5, #0
   1d602:	d0bb      	beq.n	1d57c <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1d604:	2800      	cmp	r0, #0
   1d606:	d1de      	bne.n	1d5c6 <bt_gatt_foreach_attr_type+0x6e>
   1d608:	e7b8      	b.n	1d57c <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   1d60a:	68da      	ldr	r2, [r3, #12]
   1d60c:	9901      	ldr	r1, [sp, #4]
   1d60e:	4291      	cmp	r1, r2
   1d610:	d1d9      	bne.n	1d5c6 <bt_gatt_foreach_attr_type+0x6e>
   1d612:	e7ee      	b.n	1d5f2 <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1d614:	f04f 0900 	mov.w	r9, #0
   1d618:	e7d9      	b.n	1d5ce <bt_gatt_foreach_attr_type+0x76>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1d61a:	4e08      	ldr	r6, [pc, #32]	; (1d63c <bt_gatt_foreach_attr_type+0xe4>)
   1d61c:	f8df a018 	ldr.w	sl, [pc, #24]	; 1d638 <bt_gatt_foreach_attr_type+0xe0>
   1d620:	f8df b01c 	ldr.w	fp, [pc, #28]	; 1d640 <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
   1d624:	2401      	movs	r4, #1
   1d626:	e7b2      	b.n	1d58e <bt_gatt_foreach_attr_type+0x36>
   1d628:	20003906 	.word	0x20003906
   1d62c:	00035962 	.word	0x00035962
   1d630:	00032486 	.word	0x00032486
   1d634:	00035136 	.word	0x00035136
   1d638:	00030bd4 	.word	0x00030bd4
   1d63c:	00030bc4 	.word	0x00030bc4
   1d640:	000358d0 	.word	0x000358d0

0001d644 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   1d644:	b510      	push	{r4, lr}
   1d646:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   1d648:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1d64a:	aa1c      	add	r2, sp, #112	; 0x70
   1d64c:	4669      	mov	r1, sp
   1d64e:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1d650:	e9cd 4400 	strd	r4, r4, [sp]
   1d654:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1d658:	f010 fcc4 	bl	2dfe4 <tc_cmac_setup>
   1d65c:	b970      	cbnz	r0, 1d67c <db_hash_gen.isra.0+0x38>
		BT_ERR("Unable to setup AES CMAC");
   1d65e:	4920      	ldr	r1, [pc, #128]	; (1d6e0 <db_hash_gen.isra.0+0x9c>)
   1d660:	680b      	ldr	r3, [r1, #0]
   1d662:	075a      	lsls	r2, r3, #29
   1d664:	d008      	beq.n	1d678 <db_hash_gen.isra.0+0x34>
   1d666:	4b1f      	ldr	r3, [pc, #124]	; (1d6e4 <db_hash_gen.isra.0+0xa0>)
   1d668:	481f      	ldr	r0, [pc, #124]	; (1d6e8 <db_hash_gen.isra.0+0xa4>)
   1d66a:	1ac9      	subs	r1, r1, r3
   1d66c:	0889      	lsrs	r1, r1, #2
   1d66e:	0189      	lsls	r1, r1, #6
   1d670:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   1d674:	f00f fb33 	bl	2ccde <log_0>
}
   1d678:	b048      	add	sp, #288	; 0x120
   1d67a:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1d67c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1d680:	2001      	movs	r0, #1
   1d682:	4a1a      	ldr	r2, [pc, #104]	; (1d6ec <db_hash_gen.isra.0+0xa8>)
   1d684:	ab04      	add	r3, sp, #16
   1d686:	f012 f873 	bl	2f770 <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1d68a:	4819      	ldr	r0, [pc, #100]	; (1d6f0 <db_hash_gen.isra.0+0xac>)
   1d68c:	a904      	add	r1, sp, #16
   1d68e:	f010 fd40 	bl	2e112 <tc_cmac_final>
   1d692:	b958      	cbnz	r0, 1d6ac <db_hash_gen.isra.0+0x68>
		BT_ERR("Unable to calculate hash");
   1d694:	4912      	ldr	r1, [pc, #72]	; (1d6e0 <db_hash_gen.isra.0+0x9c>)
   1d696:	680b      	ldr	r3, [r1, #0]
   1d698:	075b      	lsls	r3, r3, #29
   1d69a:	d0ed      	beq.n	1d678 <db_hash_gen.isra.0+0x34>
   1d69c:	4b11      	ldr	r3, [pc, #68]	; (1d6e4 <db_hash_gen.isra.0+0xa0>)
   1d69e:	4815      	ldr	r0, [pc, #84]	; (1d6f4 <db_hash_gen.isra.0+0xb0>)
   1d6a0:	1ac9      	subs	r1, r1, r3
   1d6a2:	0889      	lsrs	r1, r1, #2
   1d6a4:	0189      	lsls	r1, r1, #6
   1d6a6:	f041 0101 	orr.w	r1, r1, #1
   1d6aa:	e7e3      	b.n	1d674 <db_hash_gen.isra.0+0x30>
   1d6ac:	4b10      	ldr	r3, [pc, #64]	; (1d6f0 <db_hash_gen.isra.0+0xac>)
   1d6ae:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1d6b2:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1d6b4:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1d6b6:	7810      	ldrb	r0, [r2, #0]
   1d6b8:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1d6bc:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1d6be:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   1d6c2:	d1f6      	bne.n	1d6b2 <db_hash_gen.isra.0+0x6e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d6c4:	f3bf 8f5b 	dmb	ish
   1d6c8:	4b0b      	ldr	r3, [pc, #44]	; (1d6f8 <db_hash_gen.isra.0+0xb4>)
   1d6ca:	e853 2f00 	ldrex	r2, [r3]
   1d6ce:	f042 0204 	orr.w	r2, r2, #4
   1d6d2:	e843 2100 	strex	r1, r2, [r3]
   1d6d6:	2900      	cmp	r1, #0
   1d6d8:	d1f7      	bne.n	1d6ca <db_hash_gen.isra.0+0x86>
   1d6da:	f3bf 8f5b 	dmb	ish
   1d6de:	e7cb      	b.n	1d678 <db_hash_gen.isra.0+0x34>
   1d6e0:	200007b4 	.word	0x200007b4
   1d6e4:	200007a8 	.word	0x200007a8
   1d6e8:	00035991 	.word	0x00035991
   1d6ec:	0002f079 	.word	0x0002f079
   1d6f0:	20001ce0 	.word	0x20001ce0
   1d6f4:	000359aa 	.word	0x000359aa
   1d6f8:	20001d98 	.word	0x20001d98

0001d6fc <gatt_indicate>:
{
   1d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d700:	4615      	mov	r5, r2
   1d702:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1d704:	2214      	movs	r2, #20
   1d706:	6869      	ldr	r1, [r5, #4]
{
   1d708:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1d70a:	f012 f840 	bl	2f78e <bt_gatt_check_perm>
   1d70e:	b180      	cbz	r0, 1d732 <gatt_indicate+0x36>
		BT_WARN("Link is not encrypted");
   1d710:	492c      	ldr	r1, [pc, #176]	; (1d7c4 <gatt_indicate+0xc8>)
   1d712:	680b      	ldr	r3, [r1, #0]
   1d714:	f013 0f06 	tst.w	r3, #6
   1d718:	d008      	beq.n	1d72c <gatt_indicate+0x30>
   1d71a:	4b2b      	ldr	r3, [pc, #172]	; (1d7c8 <gatt_indicate+0xcc>)
   1d71c:	482b      	ldr	r0, [pc, #172]	; (1d7cc <gatt_indicate+0xd0>)
   1d71e:	1ac9      	subs	r1, r1, r3
   1d720:	0889      	lsrs	r1, r1, #2
   1d722:	0189      	lsls	r1, r1, #6
   1d724:	f041 0102 	orr.w	r1, r1, #2
   1d728:	f00f fad9 	bl	2ccde <log_0>
		return -EPERM;
   1d72c:	f04f 35ff 	mov.w	r5, #4294967295
   1d730:	e00a      	b.n	1d748 <gatt_indicate+0x4c>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1d732:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1d736:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1d738:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1d73a:	f7ff fa71 	bl	1cc20 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1d73e:	3602      	adds	r6, #2
	if (!req) {
   1d740:	4604      	mov	r4, r0
   1d742:	b920      	cbnz	r0, 1d74e <gatt_indicate+0x52>
		return -ENOMEM;
   1d744:	f06f 050b 	mvn.w	r5, #11
}
   1d748:	4628      	mov	r0, r5
   1d74a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   1d74e:	4b20      	ldr	r3, [pc, #128]	; (1d7d0 <gatt_indicate+0xd4>)
   1d750:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1d752:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1d754:	4632      	mov	r2, r6
   1d756:	211d      	movs	r1, #29
   1d758:	4640      	mov	r0, r8
   1d75a:	f7fe ffc3 	bl	1c6e4 <bt_att_create_pdu>
	if (!buf) {
   1d75e:	4606      	mov	r6, r0
   1d760:	b988      	cbnz	r0, 1d786 <gatt_indicate+0x8a>
		BT_WARN("No buffer available to send indication");
   1d762:	4918      	ldr	r1, [pc, #96]	; (1d7c4 <gatt_indicate+0xc8>)
   1d764:	680b      	ldr	r3, [r1, #0]
   1d766:	f013 0f06 	tst.w	r3, #6
   1d76a:	d008      	beq.n	1d77e <gatt_indicate+0x82>
   1d76c:	4b16      	ldr	r3, [pc, #88]	; (1d7c8 <gatt_indicate+0xcc>)
   1d76e:	4819      	ldr	r0, [pc, #100]	; (1d7d4 <gatt_indicate+0xd8>)
   1d770:	1ac9      	subs	r1, r1, r3
   1d772:	0889      	lsrs	r1, r1, #2
   1d774:	0189      	lsls	r1, r1, #6
   1d776:	f041 0102 	orr.w	r1, r1, #2
   1d77a:	f00f fab0 	bl	2ccde <log_0>
		bt_att_req_free(req);
   1d77e:	4620      	mov	r0, r4
   1d780:	f7ff fa64 	bl	1cc4c <bt_att_req_free>
   1d784:	e7de      	b.n	1d744 <gatt_indicate+0x48>
   1d786:	f100 0a08 	add.w	sl, r0, #8
   1d78a:	2102      	movs	r1, #2
   1d78c:	4650      	mov	r0, sl
   1d78e:	f003 fdf3 	bl	21378 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1d792:	4607      	mov	r7, r0
   1d794:	8aa9      	ldrh	r1, [r5, #20]
   1d796:	f827 9b02 	strh.w	r9, [r7], #2
   1d79a:	4650      	mov	r0, sl
   1d79c:	f003 fdec 	bl	21378 <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1d7a0:	8aaa      	ldrh	r2, [r5, #20]
   1d7a2:	6929      	ldr	r1, [r5, #16]
   1d7a4:	4638      	mov	r0, r7
   1d7a6:	f012 ff18 	bl	305da <memcpy>
	req->buf = buf;
   1d7aa:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1d7ac:	4621      	mov	r1, r4
   1d7ae:	4640      	mov	r0, r8
   1d7b0:	f7ff fb9a 	bl	1cee8 <bt_att_req_send>
	if (err) {
   1d7b4:	4605      	mov	r5, r0
   1d7b6:	2800      	cmp	r0, #0
   1d7b8:	d0c6      	beq.n	1d748 <gatt_indicate+0x4c>
		bt_att_req_free(req);
   1d7ba:	4620      	mov	r0, r4
   1d7bc:	f7ff fa46 	bl	1cc4c <bt_att_req_free>
   1d7c0:	e7c2      	b.n	1d748 <gatt_indicate+0x4c>
   1d7c2:	bf00      	nop
   1d7c4:	200007b4 	.word	0x200007b4
   1d7c8:	200007a8 	.word	0x200007a8
   1d7cc:	000359c3 	.word	0x000359c3
   1d7d0:	0002f03f 	.word	0x0002f03f
   1d7d4:	000359d9 	.word	0x000359d9

0001d7d8 <bt_gatt_indicate>:
{
   1d7d8:	b530      	push	{r4, r5, lr}
   1d7da:	4605      	mov	r5, r0
   1d7dc:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1d7de:	460c      	mov	r4, r1
   1d7e0:	b971      	cbnz	r1, 1d800 <bt_gatt_indicate+0x28>
   1d7e2:	4949      	ldr	r1, [pc, #292]	; (1d908 <bt_gatt_indicate+0x130>)
   1d7e4:	4a49      	ldr	r2, [pc, #292]	; (1d90c <bt_gatt_indicate+0x134>)
   1d7e6:	484a      	ldr	r0, [pc, #296]	; (1d910 <bt_gatt_indicate+0x138>)
   1d7e8:	f640 1348 	movw	r3, #2376	; 0x948
   1d7ec:	f00e fed5 	bl	2c59a <printk>
   1d7f0:	4848      	ldr	r0, [pc, #288]	; (1d914 <bt_gatt_indicate+0x13c>)
   1d7f2:	f00e fed2 	bl	2c59a <printk>
   1d7f6:	4845      	ldr	r0, [pc, #276]	; (1d90c <bt_gatt_indicate+0x134>)
   1d7f8:	f640 1148 	movw	r1, #2376	; 0x948
   1d7fc:	f00f f90e 	bl	2ca1c <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1d800:	6863      	ldr	r3, [r4, #4]
   1d802:	b983      	cbnz	r3, 1d826 <bt_gatt_indicate+0x4e>
   1d804:	6823      	ldr	r3, [r4, #0]
   1d806:	b973      	cbnz	r3, 1d826 <bt_gatt_indicate+0x4e>
   1d808:	4943      	ldr	r1, [pc, #268]	; (1d918 <bt_gatt_indicate+0x140>)
   1d80a:	4a40      	ldr	r2, [pc, #256]	; (1d90c <bt_gatt_indicate+0x134>)
   1d80c:	4840      	ldr	r0, [pc, #256]	; (1d910 <bt_gatt_indicate+0x138>)
   1d80e:	f640 1349 	movw	r3, #2377	; 0x949
   1d812:	f00e fec2 	bl	2c59a <printk>
   1d816:	483f      	ldr	r0, [pc, #252]	; (1d914 <bt_gatt_indicate+0x13c>)
   1d818:	f00e febf 	bl	2c59a <printk>
   1d81c:	483b      	ldr	r0, [pc, #236]	; (1d90c <bt_gatt_indicate+0x134>)
   1d81e:	f640 1149 	movw	r1, #2377	; 0x949
   1d822:	f00f f8fb 	bl	2ca1c <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1d826:	f3bf 8f5b 	dmb	ish
   1d82a:	4b3c      	ldr	r3, [pc, #240]	; (1d91c <bt_gatt_indicate+0x144>)
   1d82c:	681b      	ldr	r3, [r3, #0]
   1d82e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1d832:	079a      	lsls	r2, r3, #30
   1d834:	d561      	bpl.n	1d8fa <bt_gatt_indicate+0x122>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1d836:	b115      	cbz	r5, 1d83e <bt_gatt_indicate+0x66>
   1d838:	7aab      	ldrb	r3, [r5, #10]
   1d83a:	2b07      	cmp	r3, #7
   1d83c:	d160      	bne.n	1d900 <bt_gatt_indicate+0x128>
	data.attr = params->attr;
   1d83e:	6860      	ldr	r0, [r4, #4]
   1d840:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1d842:	f7ff fe3d 	bl	1d4c0 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1d846:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1d848:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1d84c:	b33a      	cbz	r2, 1d89e <bt_gatt_indicate+0xc6>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1d84e:	a905      	add	r1, sp, #20
   1d850:	9102      	str	r1, [sp, #8]
   1d852:	4933      	ldr	r1, [pc, #204]	; (1d920 <bt_gatt_indicate+0x148>)
   1d854:	9101      	str	r1, [sp, #4]
   1d856:	2101      	movs	r1, #1
	found->attr = NULL;
   1d858:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1d85a:	9100      	str	r1, [sp, #0]
   1d85c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1d860:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1d862:	f7ff fe79 	bl	1d558 <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1d866:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1d868:	b91b      	cbnz	r3, 1d872 <bt_gatt_indicate+0x9a>
			return -ENOENT;
   1d86a:	f06f 0001 	mvn.w	r0, #1
}
   1d86e:	b00b      	add	sp, #44	; 0x2c
   1d870:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1d872:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1d874:	9b05      	ldr	r3, [sp, #20]
   1d876:	6818      	ldr	r0, [r3, #0]
   1d878:	2300      	movs	r3, #0
   1d87a:	f88d 3010 	strb.w	r3, [sp, #16]
   1d87e:	a904      	add	r1, sp, #16
   1d880:	f642 0303 	movw	r3, #10243	; 0x2803
   1d884:	f8ad 3012 	strh.w	r3, [sp, #18]
   1d888:	f010 fcab 	bl	2e1e2 <bt_uuid_cmp>
   1d88c:	b970      	cbnz	r0, 1d8ac <bt_gatt_indicate+0xd4>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1d88e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1d890:	68c3      	ldr	r3, [r0, #12]
   1d892:	799b      	ldrb	r3, [r3, #6]
   1d894:	069b      	lsls	r3, r3, #26
   1d896:	d405      	bmi.n	1d8a4 <bt_gatt_indicate+0xcc>
			return -EINVAL;
   1d898:	f06f 0015 	mvn.w	r0, #21
   1d89c:	e7e7      	b.n	1d86e <bt_gatt_indicate+0x96>
		if (!data.handle) {
   1d89e:	2800      	cmp	r0, #0
   1d8a0:	d1e8      	bne.n	1d874 <bt_gatt_indicate+0x9c>
   1d8a2:	e7e2      	b.n	1d86a <bt_gatt_indicate+0x92>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1d8a4:	f011 ff1d 	bl	2f6e2 <bt_gatt_attr_value_handle>
   1d8a8:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1d8ac:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1d8b0:	b13d      	cbz	r5, 1d8c2 <bt_gatt_indicate+0xea>
		params->_ref = 1;
   1d8b2:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1d8b4:	4601      	mov	r1, r0
		params->_ref = 1;
   1d8b6:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1d8b8:	4622      	mov	r2, r4
   1d8ba:	4628      	mov	r0, r5
   1d8bc:	f7ff ff1e 	bl	1d6fc <gatt_indicate>
   1d8c0:	e7d5      	b.n	1d86e <bt_gatt_indicate+0x96>
	data.err = -ENOTCONN;
   1d8c2:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d8c6:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1d8c8:	2302      	movs	r3, #2
   1d8ca:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d8ce:	f642 1302 	movw	r3, #10498	; 0x2902
   1d8d2:	f8ad 3012 	strh.w	r3, [sp, #18]
   1d8d6:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1d8d8:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d8da:	9302      	str	r3, [sp, #8]
   1d8dc:	4b11      	ldr	r3, [pc, #68]	; (1d924 <bt_gatt_indicate+0x14c>)
   1d8de:	9301      	str	r3, [sp, #4]
   1d8e0:	2301      	movs	r3, #1
   1d8e2:	9300      	str	r3, [sp, #0]
   1d8e4:	aa04      	add	r2, sp, #16
   1d8e6:	462b      	mov	r3, r5
   1d8e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1d8ec:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1d8ee:	f88d 5010 	strb.w	r5, [sp, #16]
   1d8f2:	f7ff fe31 	bl	1d558 <bt_gatt_foreach_attr_type>
	return data.err;
   1d8f6:	9807      	ldr	r0, [sp, #28]
   1d8f8:	e7b9      	b.n	1d86e <bt_gatt_indicate+0x96>
		return -EAGAIN;
   1d8fa:	f06f 000a 	mvn.w	r0, #10
   1d8fe:	e7b6      	b.n	1d86e <bt_gatt_indicate+0x96>
		return -ENOTCONN;
   1d900:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d904:	e7b3      	b.n	1d86e <bt_gatt_indicate+0x96>
   1d906:	bf00      	nop
   1d908:	00035a00 	.word	0x00035a00
   1d90c:	000358d0 	.word	0x000358d0
   1d910:	00032486 	.word	0x00032486
   1d914:	00035a07 	.word	0x00035a07
   1d918:	00035a1d 	.word	0x00035a1d
   1d91c:	20000374 	.word	0x20000374
   1d920:	0002f065 	.word	0x0002f065
   1d924:	0001da7d 	.word	0x0001da7d

0001d928 <sc_process>:
{
   1d928:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d92a:	f3bf 8f5b 	dmb	ish
   1d92e:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1d930:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1d934:	079b      	lsls	r3, r3, #30
{
   1d936:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1d938:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1d93c:	d50e      	bpl.n	1d95c <sc_process+0x34>
   1d93e:	491d      	ldr	r1, [pc, #116]	; (1d9b4 <sc_process+0x8c>)
   1d940:	4a1d      	ldr	r2, [pc, #116]	; (1d9b8 <sc_process+0x90>)
   1d942:	481e      	ldr	r0, [pc, #120]	; (1d9bc <sc_process+0x94>)
   1d944:	f240 33e7 	movw	r3, #999	; 0x3e7
   1d948:	f00e fe27 	bl	2c59a <printk>
   1d94c:	481c      	ldr	r0, [pc, #112]	; (1d9c0 <sc_process+0x98>)
   1d94e:	f00e fe24 	bl	2c59a <printk>
   1d952:	4819      	ldr	r0, [pc, #100]	; (1d9b8 <sc_process+0x90>)
   1d954:	f240 31e7 	movw	r1, #999	; 0x3e7
   1d958:	f00f f860 	bl	2ca1c <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1d95c:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1d960:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1d962:	f3bf 8f5b 	dmb	ish
   1d966:	e855 3f00 	ldrex	r3, [r5]
   1d96a:	f023 0301 	bic.w	r3, r3, #1
   1d96e:	e845 3200 	strex	r2, r3, [r5]
   1d972:	2a00      	cmp	r2, #0
   1d974:	d1f7      	bne.n	1d966 <sc_process+0x3e>
   1d976:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1d97a:	4b12      	ldr	r3, [pc, #72]	; (1d9c4 <sc_process+0x9c>)
   1d97c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1d980:	4b11      	ldr	r3, [pc, #68]	; (1d9c8 <sc_process+0xa0>)
   1d982:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1d986:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1d988:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1d98a:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1d98e:	2304      	movs	r3, #4
	sc->start = 0U;
   1d990:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1d994:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1d998:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1d99c:	f1a4 0120 	sub.w	r1, r4, #32
   1d9a0:	f7ff ff1a 	bl	1d7d8 <bt_gatt_indicate>
   1d9a4:	b918      	cbnz	r0, 1d9ae <sc_process+0x86>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1d9a6:	2101      	movs	r1, #1
   1d9a8:	4628      	mov	r0, r5
   1d9aa:	f011 fdaf 	bl	2f50c <atomic_set_bit>
}
   1d9ae:	b003      	add	sp, #12
   1d9b0:	bd30      	pop	{r4, r5, pc}
   1d9b2:	bf00      	nop
   1d9b4:	00035a3a 	.word	0x00035a3a
   1d9b8:	000358d0 	.word	0x000358d0
   1d9bc:	00032486 	.word	0x00032486
   1d9c0:	00035a6b 	.word	0x00035a6b
   1d9c4:	000318b8 	.word	0x000318b8
   1d9c8:	0001d2c9 	.word	0x0001d2c9

0001d9cc <gatt_notify>:
{
   1d9cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d9d0:	4614      	mov	r4, r2
   1d9d2:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1d9d4:	2214      	movs	r2, #20
   1d9d6:	6861      	ldr	r1, [r4, #4]
{
   1d9d8:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1d9da:	f011 fed8 	bl	2f78e <bt_gatt_check_perm>
   1d9de:	b188      	cbz	r0, 1da04 <gatt_notify+0x38>
		BT_WARN("Link is not encrypted");
   1d9e0:	4922      	ldr	r1, [pc, #136]	; (1da6c <gatt_notify+0xa0>)
   1d9e2:	680b      	ldr	r3, [r1, #0]
   1d9e4:	f013 0f06 	tst.w	r3, #6
   1d9e8:	d008      	beq.n	1d9fc <gatt_notify+0x30>
   1d9ea:	4b21      	ldr	r3, [pc, #132]	; (1da70 <gatt_notify+0xa4>)
   1d9ec:	4821      	ldr	r0, [pc, #132]	; (1da74 <gatt_notify+0xa8>)
   1d9ee:	1ac9      	subs	r1, r1, r3
   1d9f0:	0889      	lsrs	r1, r1, #2
   1d9f2:	0189      	lsls	r1, r1, #6
   1d9f4:	f041 0102 	orr.w	r1, r1, #2
   1d9f8:	f00f f971 	bl	2ccde <log_0>
		return -EPERM;
   1d9fc:	f04f 30ff 	mov.w	r0, #4294967295
}
   1da00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   1da04:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1da06:	211b      	movs	r1, #27
   1da08:	3202      	adds	r2, #2
   1da0a:	4638      	mov	r0, r7
   1da0c:	f7fe fe6a 	bl	1c6e4 <bt_att_create_pdu>
	if (!buf) {
   1da10:	4605      	mov	r5, r0
   1da12:	b980      	cbnz	r0, 1da36 <gatt_notify+0x6a>
		BT_WARN("No buffer available to send notification");
   1da14:	4915      	ldr	r1, [pc, #84]	; (1da6c <gatt_notify+0xa0>)
   1da16:	680b      	ldr	r3, [r1, #0]
   1da18:	f013 0f06 	tst.w	r3, #6
   1da1c:	d008      	beq.n	1da30 <gatt_notify+0x64>
   1da1e:	4b14      	ldr	r3, [pc, #80]	; (1da70 <gatt_notify+0xa4>)
   1da20:	4815      	ldr	r0, [pc, #84]	; (1da78 <gatt_notify+0xac>)
   1da22:	1ac9      	subs	r1, r1, r3
   1da24:	0889      	lsrs	r1, r1, #2
   1da26:	0189      	lsls	r1, r1, #6
   1da28:	f041 0102 	orr.w	r1, r1, #2
   1da2c:	f00f f957 	bl	2ccde <log_0>
		return -ENOMEM;
   1da30:	f06f 000b 	mvn.w	r0, #11
   1da34:	e7e4      	b.n	1da00 <gatt_notify+0x34>
   1da36:	f100 0908 	add.w	r9, r0, #8
   1da3a:	2102      	movs	r1, #2
   1da3c:	4648      	mov	r0, r9
   1da3e:	f003 fc9b 	bl	21378 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1da42:	4606      	mov	r6, r0
   1da44:	89a1      	ldrh	r1, [r4, #12]
   1da46:	f826 8b02 	strh.w	r8, [r6], #2
   1da4a:	4648      	mov	r0, r9
   1da4c:	f003 fc94 	bl	21378 <net_buf_simple_add>
   1da50:	89a2      	ldrh	r2, [r4, #12]
   1da52:	68a1      	ldr	r1, [r4, #8]
   1da54:	4630      	mov	r0, r6
   1da56:	f012 fdc0 	bl	305da <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1da5a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1da5e:	4629      	mov	r1, r5
   1da60:	4638      	mov	r0, r7
}
   1da62:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1da66:	f7ff b9d1 	b.w	1ce0c <bt_att_send>
   1da6a:	bf00      	nop
   1da6c:	200007b4 	.word	0x200007b4
   1da70:	200007a8 	.word	0x200007a8
   1da74:	000359c3 	.word	0x000359c3
   1da78:	00035a86 	.word	0x00035a86

0001da7c <notify_cb>:
{
   1da7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1da7e:	4b39      	ldr	r3, [pc, #228]	; (1db64 <notify_cb+0xe8>)
{
   1da80:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1da82:	6882      	ldr	r2, [r0, #8]
   1da84:	429a      	cmp	r2, r3
{
   1da86:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1da88:	d12d      	bne.n	1dae6 <notify_cb+0x6a>
	ccc = attr->user_data;
   1da8a:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1da8c:	4b36      	ldr	r3, [pc, #216]	; (1db68 <notify_cb+0xec>)
   1da8e:	429f      	cmp	r7, r3
   1da90:	d119      	bne.n	1dac6 <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1da92:	4d36      	ldr	r5, [pc, #216]	; (1db6c <notify_cb+0xf0>)
   1da94:	2300      	movs	r3, #0
   1da96:	4669      	mov	r1, sp
   1da98:	1c68      	adds	r0, r5, #1
   1da9a:	9300      	str	r3, [sp, #0]
   1da9c:	f8cd 3003 	str.w	r3, [sp, #3]
   1daa0:	f011 fb40 	bl	2f124 <bt_addr_le_cmp>
   1daa4:	b178      	cbz	r0, 1dac6 <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1daa6:	4629      	mov	r1, r5
   1daa8:	2207      	movs	r2, #7
   1daaa:	f811 0b01 	ldrb.w	r0, [r1], #1
   1daae:	f7fd fbe9 	bl	1b284 <bt_conn_lookup_state_le>
			if (!conn) {
   1dab2:	b9e0      	cbnz	r0, 1daee <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
   1dab4:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1dab6:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   1dab8:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1daba:	f811 0b01 	ldrb.w	r0, [r1], #1
   1dabe:	8853      	ldrh	r3, [r2, #2]
   1dac0:	8812      	ldrh	r2, [r2, #0]
   1dac2:	f7ff fb55 	bl	1d170 <sc_save>
		if (cfg->value != data->type) {
   1dac6:	893a      	ldrh	r2, [r7, #8]
   1dac8:	89a3      	ldrh	r3, [r4, #12]
   1daca:	429a      	cmp	r2, r3
   1dacc:	d10b      	bne.n	1dae6 <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1dace:	4639      	mov	r1, r7
   1dad0:	f811 0b01 	ldrb.w	r0, [r1], #1
   1dad4:	f7fd fb8e 	bl	1b1f4 <bt_conn_lookup_addr_le>
		if (!conn) {
   1dad8:	4605      	mov	r5, r0
   1dada:	b120      	cbz	r0, 1dae6 <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
   1dadc:	7a83      	ldrb	r3, [r0, #10]
   1dade:	2b07      	cmp	r3, #7
   1dae0:	d008      	beq.n	1daf4 <notify_cb+0x78>
			bt_conn_unref(conn);
   1dae2:	f7fd f8f5 	bl	1acd0 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   1dae6:	2701      	movs	r7, #1
}
   1dae8:	4638      	mov	r0, r7
   1daea:	b003      	add	sp, #12
   1daec:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1daee:	f7fd f8ef 	bl	1acd0 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1daf2:	e7e8      	b.n	1dac6 <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1daf4:	697b      	ldr	r3, [r7, #20]
   1daf6:	b123      	cbz	r3, 1db02 <notify_cb+0x86>
   1daf8:	4631      	mov	r1, r6
   1dafa:	4798      	blx	r3
   1dafc:	b908      	cbnz	r0, 1db02 <notify_cb+0x86>
			bt_conn_unref(conn);
   1dafe:	4628      	mov	r0, r5
   1db00:	e7ef      	b.n	1dae2 <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
   1db02:	2214      	movs	r2, #20
   1db04:	4631      	mov	r1, r6
   1db06:	4628      	mov	r0, r5
   1db08:	f011 fe41 	bl	2f78e <bt_gatt_check_perm>
   1db0c:	4607      	mov	r7, r0
   1db0e:	b170      	cbz	r0, 1db2e <notify_cb+0xb2>
			BT_WARN("Link is not encrypted");
   1db10:	4917      	ldr	r1, [pc, #92]	; (1db70 <notify_cb+0xf4>)
   1db12:	680b      	ldr	r3, [r1, #0]
   1db14:	f013 0f06 	tst.w	r3, #6
   1db18:	d0e5      	beq.n	1dae6 <notify_cb+0x6a>
   1db1a:	4b16      	ldr	r3, [pc, #88]	; (1db74 <notify_cb+0xf8>)
   1db1c:	4816      	ldr	r0, [pc, #88]	; (1db78 <notify_cb+0xfc>)
   1db1e:	1ac9      	subs	r1, r1, r3
   1db20:	0889      	lsrs	r1, r1, #2
   1db22:	0189      	lsls	r1, r1, #6
   1db24:	f041 0102 	orr.w	r1, r1, #2
   1db28:	f00f f8d9 	bl	2ccde <log_0>
   1db2c:	e7db      	b.n	1dae6 <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1db2e:	89a3      	ldrh	r3, [r4, #12]
   1db30:	88a1      	ldrh	r1, [r4, #4]
   1db32:	6922      	ldr	r2, [r4, #16]
   1db34:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1db36:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1db38:	d10f      	bne.n	1db5a <notify_cb+0xde>
			err = gatt_indicate(conn, data->handle,
   1db3a:	f7ff fddf 	bl	1d6fc <gatt_indicate>
			if (err == 0) {
   1db3e:	4606      	mov	r6, r0
   1db40:	b918      	cbnz	r0, 1db4a <notify_cb+0xce>
				data->ind_params->_ref++;
   1db42:	6922      	ldr	r2, [r4, #16]
   1db44:	7d93      	ldrb	r3, [r2, #22]
   1db46:	3301      	adds	r3, #1
   1db48:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1db4a:	4628      	mov	r0, r5
   1db4c:	f7fd f8c0 	bl	1acd0 <bt_conn_unref>
		if (err < 0) {
   1db50:	2e00      	cmp	r6, #0
   1db52:	dbc9      	blt.n	1dae8 <notify_cb+0x6c>
		data->err = 0;
   1db54:	2300      	movs	r3, #0
   1db56:	60a3      	str	r3, [r4, #8]
   1db58:	e7c5      	b.n	1dae6 <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1db5a:	f7ff ff37 	bl	1d9cc <gatt_notify>
   1db5e:	4606      	mov	r6, r0
   1db60:	e7f3      	b.n	1db4a <notify_cb+0xce>
   1db62:	bf00      	nop
   1db64:	0001d055 	.word	0x0001d055
   1db68:	20000570 	.word	0x20000570
   1db6c:	20003908 	.word	0x20003908
   1db70:	200007b4 	.word	0x200007b4
   1db74:	200007a8 	.word	0x200007a8
   1db78:	000359c3 	.word	0x000359c3

0001db7c <update_ccc>:
{
   1db7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1db80:	4b32      	ldr	r3, [pc, #200]	; (1dc4c <update_ccc+0xd0>)
   1db82:	6881      	ldr	r1, [r0, #8]
   1db84:	4299      	cmp	r1, r3
{
   1db86:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1db88:	d122      	bne.n	1dbd0 <update_ccc+0x54>
	ccc = attr->user_data;
   1db8a:	f8d0 800c 	ldr.w	r8, [r0, #12]
   1db8e:	4f30      	ldr	r7, [pc, #192]	; (1dc50 <update_ccc+0xd4>)
   1db90:	4c30      	ldr	r4, [pc, #192]	; (1dc54 <update_ccc+0xd8>)
		if (!cfg->value ||
   1db92:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	struct bt_conn *conn = data->conn;
   1db96:	6816      	ldr	r6, [r2, #0]
   1db98:	1b3c      	subs	r4, r7, r4
   1db9a:	08a4      	lsrs	r4, r4, #2
		if (!cfg->value ||
   1db9c:	b1c3      	cbz	r3, 1dbd0 <update_ccc+0x54>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1db9e:	4642      	mov	r2, r8
   1dba0:	4630      	mov	r0, r6
   1dba2:	f812 1b01 	ldrb.w	r1, [r2], #1
   1dba6:	f010 fd6a 	bl	2e67e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1dbaa:	b188      	cbz	r0, 1dbd0 <update_ccc+0x54>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1dbac:	222a      	movs	r2, #42	; 0x2a
   1dbae:	4629      	mov	r1, r5
   1dbb0:	4630      	mov	r0, r6
   1dbb2:	f011 fdec 	bl	2f78e <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1dbb6:	2803      	cmp	r0, #3
   1dbb8:	d10e      	bne.n	1dbd8 <update_ccc+0x5c>
				BT_WARN("CCC %p not writable", attr);
   1dbba:	683b      	ldr	r3, [r7, #0]
   1dbbc:	f013 0f06 	tst.w	r3, #6
   1dbc0:	d006      	beq.n	1dbd0 <update_ccc+0x54>
   1dbc2:	01a2      	lsls	r2, r4, #6
   1dbc4:	4824      	ldr	r0, [pc, #144]	; (1dc58 <update_ccc+0xdc>)
   1dbc6:	f042 0202 	orr.w	r2, r2, #2
   1dbca:	4629      	mov	r1, r5
   1dbcc:	f00f f894 	bl	2ccf8 <log_1>
}
   1dbd0:	2001      	movs	r0, #1
   1dbd2:	b002      	add	sp, #8
   1dbd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gatt_ccc_changed(attr, ccc);
   1dbd8:	4641      	mov	r1, r8
   1dbda:	4628      	mov	r0, r5
   1dbdc:	f011 fa25 	bl	2f02a <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1dbe0:	4b1e      	ldr	r3, [pc, #120]	; (1dc5c <update_ccc+0xe0>)
   1dbe2:	4598      	cmp	r8, r3
   1dbe4:	d1f4      	bne.n	1dbd0 <update_ccc+0x54>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1dbe6:	7a30      	ldrb	r0, [r6, #8]
   1dbe8:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1dbec:	f7ff fa04 	bl	1cff8 <find_sc_cfg>
	if (!cfg) {
   1dbf0:	2800      	cmp	r0, #0
   1dbf2:	d0ed      	beq.n	1dbd0 <update_ccc+0x54>
	if (!(cfg->data.start || cfg->data.end)) {
   1dbf4:	8902      	ldrh	r2, [r0, #8]
   1dbf6:	8943      	ldrh	r3, [r0, #10]
   1dbf8:	ea53 0102 	orrs.w	r1, r3, r2
   1dbfc:	d0e8      	beq.n	1dbd0 <update_ccc+0x54>
	index = bt_conn_index(conn);
   1dbfe:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1dc00:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1dc04:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1dc08:	f7fd f9ac 	bl	1af64 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1dc0c:	4914      	ldr	r1, [pc, #80]	; (1dc60 <update_ccc+0xe4>)
   1dc0e:	4a15      	ldr	r2, [pc, #84]	; (1dc64 <update_ccc+0xe8>)
   1dc10:	2318      	movs	r3, #24
   1dc12:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1dc16:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1dc18:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1dc1a:	4a13      	ldr	r2, [pc, #76]	; (1dc68 <update_ccc+0xec>)
   1dc1c:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1dc1e:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1dc20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1dc24:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1dc26:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1dc28:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1dc2c:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1dc2e:	4630      	mov	r0, r6
   1dc30:	f7ff fdd2 	bl	1d7d8 <bt_gatt_indicate>
   1dc34:	2800      	cmp	r0, #0
   1dc36:	d0cb      	beq.n	1dbd0 <update_ccc+0x54>
		BT_ERR("SC restore indication failed");
   1dc38:	683b      	ldr	r3, [r7, #0]
   1dc3a:	075b      	lsls	r3, r3, #29
   1dc3c:	d0c8      	beq.n	1dbd0 <update_ccc+0x54>
   1dc3e:	01a1      	lsls	r1, r4, #6
   1dc40:	480a      	ldr	r0, [pc, #40]	; (1dc6c <update_ccc+0xf0>)
   1dc42:	f041 0101 	orr.w	r1, r1, #1
   1dc46:	f00f f84a 	bl	2ccde <log_0>
   1dc4a:	e7c1      	b.n	1dbd0 <update_ccc+0x54>
   1dc4c:	0001d055 	.word	0x0001d055
   1dc50:	200007b4 	.word	0x200007b4
   1dc54:	200007a8 	.word	0x200007a8
   1dc58:	00035aaf 	.word	0x00035aaf
   1dc5c:	20000570 	.word	0x20000570
   1dc60:	20002d54 	.word	0x20002d54
   1dc64:	000318b8 	.word	0x000318b8
   1dc68:	0002f529 	.word	0x0002f529
   1dc6c:	00035ac3 	.word	0x00035ac3

0001dc70 <bt_gatt_exchange_mtu>:
{
   1dc70:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1dc72:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameter\n");
   1dc74:	4604      	mov	r4, r0
   1dc76:	b970      	cbnz	r0, 1dc96 <bt_gatt_exchange_mtu+0x26>
   1dc78:	4918      	ldr	r1, [pc, #96]	; (1dcdc <bt_gatt_exchange_mtu+0x6c>)
   1dc7a:	4a19      	ldr	r2, [pc, #100]	; (1dce0 <bt_gatt_exchange_mtu+0x70>)
   1dc7c:	4819      	ldr	r0, [pc, #100]	; (1dce4 <bt_gatt_exchange_mtu+0x74>)
   1dc7e:	f640 338f 	movw	r3, #2959	; 0xb8f
   1dc82:	f00e fc8a 	bl	2c59a <printk>
   1dc86:	4818      	ldr	r0, [pc, #96]	; (1dce8 <bt_gatt_exchange_mtu+0x78>)
   1dc88:	f00e fc87 	bl	2c59a <printk>
   1dc8c:	4814      	ldr	r0, [pc, #80]	; (1dce0 <bt_gatt_exchange_mtu+0x70>)
   1dc8e:	f640 318f 	movw	r1, #2959	; 0xb8f
   1dc92:	f00e fec3 	bl	2ca1c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1dc96:	b10d      	cbz	r5, 1dc9c <bt_gatt_exchange_mtu+0x2c>
   1dc98:	682b      	ldr	r3, [r5, #0]
   1dc9a:	b973      	cbnz	r3, 1dcba <bt_gatt_exchange_mtu+0x4a>
   1dc9c:	4913      	ldr	r1, [pc, #76]	; (1dcec <bt_gatt_exchange_mtu+0x7c>)
   1dc9e:	4a10      	ldr	r2, [pc, #64]	; (1dce0 <bt_gatt_exchange_mtu+0x70>)
   1dca0:	4810      	ldr	r0, [pc, #64]	; (1dce4 <bt_gatt_exchange_mtu+0x74>)
   1dca2:	f44f 6339 	mov.w	r3, #2960	; 0xb90
   1dca6:	f00e fc78 	bl	2c59a <printk>
   1dcaa:	4811      	ldr	r0, [pc, #68]	; (1dcf0 <bt_gatt_exchange_mtu+0x80>)
   1dcac:	f00e fc75 	bl	2c59a <printk>
   1dcb0:	480b      	ldr	r0, [pc, #44]	; (1dce0 <bt_gatt_exchange_mtu+0x70>)
   1dcb2:	f44f 6139 	mov.w	r1, #2960	; 0xb90
   1dcb6:	f00e feb1 	bl	2ca1c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1dcba:	7aa3      	ldrb	r3, [r4, #10]
   1dcbc:	2b07      	cmp	r3, #7
   1dcbe:	d10a      	bne.n	1dcd6 <bt_gatt_exchange_mtu+0x66>
	return gatt_req_send(conn, gatt_mtu_rsp, params,
   1dcc0:	2302      	movs	r3, #2
   1dcc2:	e9cd 3300 	strd	r3, r3, [sp]
   1dcc6:	490b      	ldr	r1, [pc, #44]	; (1dcf4 <bt_gatt_exchange_mtu+0x84>)
   1dcc8:	4b0b      	ldr	r3, [pc, #44]	; (1dcf8 <bt_gatt_exchange_mtu+0x88>)
   1dcca:	462a      	mov	r2, r5
   1dccc:	4620      	mov	r0, r4
   1dcce:	f011 fcd4 	bl	2f67a <gatt_req_send>
}
   1dcd2:	b003      	add	sp, #12
   1dcd4:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1dcd6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1dcda:	e7fa      	b.n	1dcd2 <bt_gatt_exchange_mtu+0x62>
   1dcdc:	00036585 	.word	0x00036585
   1dce0:	000358d0 	.word	0x000358d0
   1dce4:	00032486 	.word	0x00032486
   1dce8:	00035ae0 	.word	0x00035ae0
   1dcec:	00035afa 	.word	0x00035afa
   1dcf0:	00035a07 	.word	0x00035a07
   1dcf4:	0002f06d 	.word	0x0002f06d
   1dcf8:	0002f15b 	.word	0x0002f15b

0001dcfc <bt_gatt_discover>:
{
   1dcfc:	b570      	push	{r4, r5, r6, lr}
   1dcfe:	460c      	mov	r4, r1
   1dd00:	b086      	sub	sp, #24
	__ASSERT(conn, "invalid parameters\n");
   1dd02:	4605      	mov	r5, r0
   1dd04:	b970      	cbnz	r0, 1dd24 <bt_gatt_discover+0x28>
   1dd06:	4981      	ldr	r1, [pc, #516]	; (1df0c <bt_gatt_discover+0x210>)
   1dd08:	4a81      	ldr	r2, [pc, #516]	; (1df10 <bt_gatt_discover+0x214>)
   1dd0a:	4882      	ldr	r0, [pc, #520]	; (1df14 <bt_gatt_discover+0x218>)
   1dd0c:	f640 63bd 	movw	r3, #3773	; 0xebd
   1dd10:	f00e fc43 	bl	2c59a <printk>
   1dd14:	4880      	ldr	r0, [pc, #512]	; (1df18 <bt_gatt_discover+0x21c>)
   1dd16:	f00e fc40 	bl	2c59a <printk>
   1dd1a:	487d      	ldr	r0, [pc, #500]	; (1df10 <bt_gatt_discover+0x214>)
   1dd1c:	f640 61bd 	movw	r1, #3773	; 0xebd
   1dd20:	f00e fe7c 	bl	2ca1c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1dd24:	b10c      	cbz	r4, 1dd2a <bt_gatt_discover+0x2e>
   1dd26:	6863      	ldr	r3, [r4, #4]
   1dd28:	b973      	cbnz	r3, 1dd48 <bt_gatt_discover+0x4c>
   1dd2a:	497c      	ldr	r1, [pc, #496]	; (1df1c <bt_gatt_discover+0x220>)
   1dd2c:	4a78      	ldr	r2, [pc, #480]	; (1df10 <bt_gatt_discover+0x214>)
   1dd2e:	4879      	ldr	r0, [pc, #484]	; (1df14 <bt_gatt_discover+0x218>)
   1dd30:	f640 63be 	movw	r3, #3774	; 0xebe
   1dd34:	f00e fc31 	bl	2c59a <printk>
   1dd38:	4877      	ldr	r0, [pc, #476]	; (1df18 <bt_gatt_discover+0x21c>)
   1dd3a:	f00e fc2e 	bl	2c59a <printk>
   1dd3e:	4874      	ldr	r0, [pc, #464]	; (1df10 <bt_gatt_discover+0x214>)
   1dd40:	f640 61be 	movw	r1, #3774	; 0xebe
   1dd44:	f00e fe6a 	bl	2ca1c <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   1dd48:	8923      	ldrh	r3, [r4, #8]
   1dd4a:	b10b      	cbz	r3, 1dd50 <bt_gatt_discover+0x54>
   1dd4c:	89e3      	ldrh	r3, [r4, #14]
   1dd4e:	b973      	cbnz	r3, 1dd6e <bt_gatt_discover+0x72>
   1dd50:	4973      	ldr	r1, [pc, #460]	; (1df20 <bt_gatt_discover+0x224>)
   1dd52:	4a6f      	ldr	r2, [pc, #444]	; (1df10 <bt_gatt_discover+0x214>)
   1dd54:	486f      	ldr	r0, [pc, #444]	; (1df14 <bt_gatt_discover+0x218>)
   1dd56:	f640 63bf 	movw	r3, #3775	; 0xebf
   1dd5a:	f00e fc1e 	bl	2c59a <printk>
   1dd5e:	486e      	ldr	r0, [pc, #440]	; (1df18 <bt_gatt_discover+0x21c>)
   1dd60:	f00e fc1b 	bl	2c59a <printk>
   1dd64:	486a      	ldr	r0, [pc, #424]	; (1df10 <bt_gatt_discover+0x214>)
   1dd66:	f640 61bf 	movw	r1, #3775	; 0xebf
   1dd6a:	f00e fe57 	bl	2ca1c <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1dd6e:	8922      	ldrh	r2, [r4, #8]
   1dd70:	89e3      	ldrh	r3, [r4, #14]
   1dd72:	429a      	cmp	r2, r3
   1dd74:	d90e      	bls.n	1dd94 <bt_gatt_discover+0x98>
   1dd76:	496b      	ldr	r1, [pc, #428]	; (1df24 <bt_gatt_discover+0x228>)
   1dd78:	4a65      	ldr	r2, [pc, #404]	; (1df10 <bt_gatt_discover+0x214>)
   1dd7a:	4866      	ldr	r0, [pc, #408]	; (1df14 <bt_gatt_discover+0x218>)
   1dd7c:	f640 63c1 	movw	r3, #3777	; 0xec1
   1dd80:	f00e fc0b 	bl	2c59a <printk>
   1dd84:	4864      	ldr	r0, [pc, #400]	; (1df18 <bt_gatt_discover+0x21c>)
   1dd86:	f00e fc08 	bl	2c59a <printk>
   1dd8a:	4861      	ldr	r0, [pc, #388]	; (1df10 <bt_gatt_discover+0x214>)
   1dd8c:	f640 61c1 	movw	r1, #3777	; 0xec1
   1dd90:	f00e fe44 	bl	2ca1c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1dd94:	7aab      	ldrb	r3, [r5, #10]
   1dd96:	2b07      	cmp	r3, #7
   1dd98:	f040 80b5 	bne.w	1df06 <bt_gatt_discover+0x20a>
	switch (params->type) {
   1dd9c:	7c21      	ldrb	r1, [r4, #16]
   1dd9e:	2906      	cmp	r1, #6
   1dda0:	f200 80a5 	bhi.w	1deee <bt_gatt_discover+0x1f2>
   1dda4:	e8df f001 	tbb	[pc, r1]
   1dda8:	62620404 	.word	0x62620404
   1ddac:	9c6a      	.short	0x9c6a
   1ddae:	2e          	.byte	0x2e
   1ddaf:	00          	.byte	0x00
		if (params->uuid) {
   1ddb0:	6823      	ldr	r3, [r4, #0]
   1ddb2:	b1fb      	cbz	r3, 1ddf4 <bt_gatt_discover+0xf8>
	switch (params->uuid->type) {
   1ddb4:	7819      	ldrb	r1, [r3, #0]
   1ddb6:	b179      	cbz	r1, 1ddd8 <bt_gatt_discover+0xdc>
   1ddb8:	2902      	cmp	r1, #2
   1ddba:	d019      	beq.n	1ddf0 <bt_gatt_discover+0xf4>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   1ddbc:	4a5a      	ldr	r2, [pc, #360]	; (1df28 <bt_gatt_discover+0x22c>)
   1ddbe:	6813      	ldr	r3, [r2, #0]
   1ddc0:	0758      	lsls	r0, r3, #29
   1ddc2:	d021      	beq.n	1de08 <bt_gatt_discover+0x10c>
   1ddc4:	4b59      	ldr	r3, [pc, #356]	; (1df2c <bt_gatt_discover+0x230>)
   1ddc6:	485a      	ldr	r0, [pc, #360]	; (1df30 <bt_gatt_discover+0x234>)
   1ddc8:	1ad2      	subs	r2, r2, r3
   1ddca:	0892      	lsrs	r2, r2, #2
   1ddcc:	0192      	lsls	r2, r2, #6
   1ddce:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Invalid discovery type: %u", params->type);
   1ddd2:	f00e ff91 	bl	2ccf8 <log_1>
   1ddd6:	e017      	b.n	1de08 <bt_gatt_discover+0x10c>
		len += BT_UUID_SIZE_16;
   1ddd8:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   1ddda:	9301      	str	r3, [sp, #4]
   1dddc:	2306      	movs	r3, #6
   1ddde:	9300      	str	r3, [sp, #0]
   1dde0:	4954      	ldr	r1, [pc, #336]	; (1df34 <bt_gatt_discover+0x238>)
   1dde2:	4b55      	ldr	r3, [pc, #340]	; (1df38 <bt_gatt_discover+0x23c>)
   1dde4:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1dde6:	4628      	mov	r0, r5
   1dde8:	f011 fc47 	bl	2f67a <gatt_req_send>
}
   1ddec:	b006      	add	sp, #24
   1ddee:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
   1ddf0:	2316      	movs	r3, #22
   1ddf2:	e7f2      	b.n	1ddda <bt_gatt_discover+0xde>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1ddf4:	2310      	movs	r3, #16
   1ddf6:	2104      	movs	r1, #4
   1ddf8:	e9cd 3100 	strd	r3, r1, [sp]
   1ddfc:	4622      	mov	r2, r4
   1ddfe:	4b4f      	ldr	r3, [pc, #316]	; (1df3c <bt_gatt_discover+0x240>)
   1de00:	494f      	ldr	r1, [pc, #316]	; (1df40 <bt_gatt_discover+0x244>)
   1de02:	e7f0      	b.n	1dde6 <bt_gatt_discover+0xea>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1de04:	6820      	ldr	r0, [r4, #0]
   1de06:	b910      	cbnz	r0, 1de0e <bt_gatt_discover+0x112>
		return -EINVAL;
   1de08:	f06f 0015 	mvn.w	r0, #21
   1de0c:	e7ee      	b.n	1ddec <bt_gatt_discover+0xf0>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1de0e:	7806      	ldrb	r6, [r0, #0]
   1de10:	2e00      	cmp	r6, #0
   1de12:	d1f9      	bne.n	1de08 <bt_gatt_discover+0x10c>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1de14:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   1de18:	a902      	add	r1, sp, #8
   1de1a:	f88d 6008 	strb.w	r6, [sp, #8]
   1de1e:	f8ad 300a 	strh.w	r3, [sp, #10]
   1de22:	f010 f9de 	bl	2e1e2 <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1de26:	b308      	cbz	r0, 1de6c <bt_gatt_discover+0x170>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1de28:	f642 1302 	movw	r3, #10498	; 0x2902
   1de2c:	6820      	ldr	r0, [r4, #0]
   1de2e:	f88d 600c 	strb.w	r6, [sp, #12]
   1de32:	a903      	add	r1, sp, #12
   1de34:	f8ad 300e 	strh.w	r3, [sp, #14]
   1de38:	f010 f9d3 	bl	2e1e2 <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1de3c:	b1b0      	cbz	r0, 1de6c <bt_gatt_discover+0x170>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1de3e:	f642 1303 	movw	r3, #10499	; 0x2903
   1de42:	6820      	ldr	r0, [r4, #0]
   1de44:	f88d 6010 	strb.w	r6, [sp, #16]
   1de48:	a904      	add	r1, sp, #16
   1de4a:	f8ad 3012 	strh.w	r3, [sp, #18]
   1de4e:	f010 f9c8 	bl	2e1e2 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1de52:	b158      	cbz	r0, 1de6c <bt_gatt_discover+0x170>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   1de54:	f642 1304 	movw	r3, #10500	; 0x2904
   1de58:	6820      	ldr	r0, [r4, #0]
   1de5a:	f88d 6014 	strb.w	r6, [sp, #20]
   1de5e:	a905      	add	r1, sp, #20
   1de60:	f8ad 3016 	strh.w	r3, [sp, #22]
   1de64:	f010 f9bd 	bl	2e1e2 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1de68:	2800      	cmp	r0, #0
   1de6a:	d1cd      	bne.n	1de08 <bt_gatt_discover+0x10c>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   1de6c:	2308      	movs	r3, #8
   1de6e:	2204      	movs	r2, #4
   1de70:	e9cd 3200 	strd	r3, r2, [sp]
   1de74:	4933      	ldr	r1, [pc, #204]	; (1df44 <bt_gatt_discover+0x248>)
   1de76:	4b34      	ldr	r3, [pc, #208]	; (1df48 <bt_gatt_discover+0x24c>)
   1de78:	4622      	mov	r2, r4
   1de7a:	e7b4      	b.n	1dde6 <bt_gatt_discover+0xea>
		if (params->uuid &&
   1de7c:	6820      	ldr	r0, [r4, #0]
   1de7e:	b378      	cbz	r0, 1dee0 <bt_gatt_discover+0x1e4>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1de80:	2600      	movs	r6, #0
   1de82:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1de86:	a902      	add	r1, sp, #8
   1de88:	f88d 6008 	strb.w	r6, [sp, #8]
   1de8c:	f8ad 300a 	strh.w	r3, [sp, #10]
   1de90:	f010 f9a7 	bl	2e1e2 <bt_uuid_cmp>
		if (params->uuid &&
   1de94:	2800      	cmp	r0, #0
   1de96:	d0b7      	beq.n	1de08 <bt_gatt_discover+0x10c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1de98:	f642 0301 	movw	r3, #10241	; 0x2801
   1de9c:	6820      	ldr	r0, [r4, #0]
   1de9e:	f88d 600c 	strb.w	r6, [sp, #12]
   1dea2:	a903      	add	r1, sp, #12
   1dea4:	f8ad 300e 	strh.w	r3, [sp, #14]
   1dea8:	f010 f99b 	bl	2e1e2 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1deac:	2800      	cmp	r0, #0
   1deae:	d0ab      	beq.n	1de08 <bt_gatt_discover+0x10c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1deb0:	f642 0302 	movw	r3, #10242	; 0x2802
   1deb4:	6820      	ldr	r0, [r4, #0]
   1deb6:	f88d 6010 	strb.w	r6, [sp, #16]
   1deba:	a904      	add	r1, sp, #16
   1debc:	f8ad 3012 	strh.w	r3, [sp, #18]
   1dec0:	f010 f98f 	bl	2e1e2 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1dec4:	2800      	cmp	r0, #0
   1dec6:	d09f      	beq.n	1de08 <bt_gatt_discover+0x10c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1dec8:	f642 0303 	movw	r3, #10243	; 0x2803
   1decc:	6820      	ldr	r0, [r4, #0]
   1dece:	f88d 6014 	strb.w	r6, [sp, #20]
   1ded2:	a905      	add	r1, sp, #20
   1ded4:	f8ad 3016 	strh.w	r3, [sp, #22]
   1ded8:	f010 f983 	bl	2e1e2 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1dedc:	2800      	cmp	r0, #0
   1dede:	d093      	beq.n	1de08 <bt_gatt_discover+0x10c>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1dee0:	2304      	movs	r3, #4
   1dee2:	e9cd 3300 	strd	r3, r3, [sp]
   1dee6:	4919      	ldr	r1, [pc, #100]	; (1df4c <bt_gatt_discover+0x250>)
   1dee8:	4b19      	ldr	r3, [pc, #100]	; (1df50 <bt_gatt_discover+0x254>)
   1deea:	4622      	mov	r2, r4
   1deec:	e77b      	b.n	1dde6 <bt_gatt_discover+0xea>
		BT_ERR("Invalid discovery type: %u", params->type);
   1deee:	4a0e      	ldr	r2, [pc, #56]	; (1df28 <bt_gatt_discover+0x22c>)
   1def0:	6813      	ldr	r3, [r2, #0]
   1def2:	075b      	lsls	r3, r3, #29
   1def4:	d088      	beq.n	1de08 <bt_gatt_discover+0x10c>
   1def6:	4b0d      	ldr	r3, [pc, #52]	; (1df2c <bt_gatt_discover+0x230>)
   1def8:	4816      	ldr	r0, [pc, #88]	; (1df54 <bt_gatt_discover+0x258>)
   1defa:	1ad2      	subs	r2, r2, r3
   1defc:	0892      	lsrs	r2, r2, #2
   1defe:	0192      	lsls	r2, r2, #6
   1df00:	f042 0201 	orr.w	r2, r2, #1
   1df04:	e765      	b.n	1ddd2 <bt_gatt_discover+0xd6>
		return -ENOTCONN;
   1df06:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1df0a:	e76f      	b.n	1ddec <bt_gatt_discover+0xf0>
   1df0c:	00036585 	.word	0x00036585
   1df10:	000358d0 	.word	0x000358d0
   1df14:	00032486 	.word	0x00032486
   1df18:	00035a07 	.word	0x00035a07
   1df1c:	00035afa 	.word	0x00035afa
   1df20:	00035b11 	.word	0x00035b11
   1df24:	00035b3e 	.word	0x00035b3e
   1df28:	200007b4 	.word	0x200007b4
   1df2c:	200007a8 	.word	0x200007a8
   1df30:	00035b6b 	.word	0x00035b6b
   1df34:	0002f80f 	.word	0x0002f80f
   1df38:	0002f491 	.word	0x0002f491
   1df3c:	0002f1ed 	.word	0x0002f1ed
   1df40:	0001df59 	.word	0x0001df59
   1df44:	0001e075 	.word	0x0001e075
   1df48:	0002f21d 	.word	0x0002f21d
   1df4c:	0001e405 	.word	0x0001e405
   1df50:	0002f185 	.word	0x0002f185
   1df54:	00035b80 	.word	0x00035b80

0001df58 <gatt_read_group_rsp>:
{
   1df58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1df5c:	b08e      	sub	sp, #56	; 0x38
   1df5e:	4690      	mov	r8, r2
   1df60:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1df62:	4606      	mov	r6, r0
	if (err) {
   1df64:	460a      	mov	r2, r1
   1df66:	b131      	cbz	r1, 1df76 <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
   1df68:	687b      	ldr	r3, [r7, #4]
   1df6a:	463a      	mov	r2, r7
   1df6c:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   1df6e:	4798      	blx	r3
}
   1df70:	b00e      	add	sp, #56	; 0x38
   1df72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (rsp->len) {
   1df76:	f898 1000 	ldrb.w	r1, [r8]
   1df7a:	2906      	cmp	r1, #6
   1df7c:	d014      	beq.n	1dfa8 <gatt_read_group_rsp+0x50>
   1df7e:	2914      	cmp	r1, #20
   1df80:	d011      	beq.n	1dfa6 <gatt_read_group_rsp+0x4e>
		BT_ERR("Invalid data len %u", rsp->len);
   1df82:	4a39      	ldr	r2, [pc, #228]	; (1e068 <gatt_read_group_rsp+0x110>)
   1df84:	6813      	ldr	r3, [r2, #0]
   1df86:	075b      	lsls	r3, r3, #29
   1df88:	d008      	beq.n	1df9c <gatt_read_group_rsp+0x44>
   1df8a:	4b38      	ldr	r3, [pc, #224]	; (1e06c <gatt_read_group_rsp+0x114>)
   1df8c:	4838      	ldr	r0, [pc, #224]	; (1e070 <gatt_read_group_rsp+0x118>)
   1df8e:	1ad2      	subs	r2, r2, r3
   1df90:	0892      	lsrs	r2, r2, #2
   1df92:	0192      	lsls	r2, r2, #6
   1df94:	f042 0201 	orr.w	r2, r2, #1
   1df98:	f00e feae 	bl	2ccf8 <log_1>
	params->func(conn, NULL, params);
   1df9c:	687b      	ldr	r3, [r7, #4]
   1df9e:	463a      	mov	r2, r7
   1dfa0:	2100      	movs	r1, #0
   1dfa2:	4630      	mov	r0, r6
   1dfa4:	e7e3      	b.n	1df6e <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
   1dfa6:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1dfa8:	3b01      	subs	r3, #1
	uint16_t start_handle, end_handle = 0U;
   1dfaa:	2500      	movs	r5, #0
		u.uuid.type = BT_UUID_TYPE_128;
   1dfac:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1dfb0:	b29c      	uxth	r4, r3
   1dfb2:	f108 0901 	add.w	r9, r8, #1
		struct bt_gatt_attr attr = {};
   1dfb6:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
   1dfb8:	f898 3000 	ldrb.w	r3, [r8]
   1dfbc:	42a3      	cmp	r3, r4
   1dfbe:	d909      	bls.n	1dfd4 <gatt_read_group_rsp+0x7c>
	if (length == 0U && end_handle) {
   1dfc0:	2c00      	cmp	r4, #0
   1dfc2:	d1eb      	bne.n	1df9c <gatt_read_group_rsp+0x44>
   1dfc4:	2d00      	cmp	r5, #0
   1dfc6:	d0e9      	beq.n	1df9c <gatt_read_group_rsp+0x44>
	gatt_discover_next(conn, handle, params);
   1dfc8:	463a      	mov	r2, r7
   1dfca:	4629      	mov	r1, r5
   1dfcc:	4630      	mov	r0, r6
   1dfce:	f011 fc01 	bl	2f7d4 <gatt_discover_next>
   1dfd2:	e7cd      	b.n	1df70 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
   1dfd4:	2214      	movs	r2, #20
   1dfd6:	2100      	movs	r1, #0
   1dfd8:	a809      	add	r0, sp, #36	; 0x24
   1dfda:	f012 fb26 	bl	3062a <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   1dfde:	f8b9 2000 	ldrh.w	r2, [r9]
   1dfe2:	b293      	uxth	r3, r2
		if (!start_handle) {
   1dfe4:	2b00      	cmp	r3, #0
   1dfe6:	d0d9      	beq.n	1df9c <gatt_read_group_rsp+0x44>
		end_handle = sys_le16_to_cpu(data->end_handle);
   1dfe8:	f8b9 1002 	ldrh.w	r1, [r9, #2]
   1dfec:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
   1dfee:	2d00      	cmp	r5, #0
   1dff0:	d0d4      	beq.n	1df9c <gatt_read_group_rsp+0x44>
   1dff2:	42ab      	cmp	r3, r5
   1dff4:	d8d2      	bhi.n	1df9c <gatt_read_group_rsp+0x44>
		switch (u.uuid.type) {
   1dff6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1dffa:	b31b      	cbz	r3, 1e044 <gatt_read_group_rsp+0xec>
   1dffc:	2b02      	cmp	r3, #2
   1dffe:	d026      	beq.n	1e04e <gatt_read_group_rsp+0xf6>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1e000:	7c3b      	ldrb	r3, [r7, #16]
		value.end_handle = end_handle;
   1e002:	f8ad 100c 	strh.w	r1, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1e006:	2b00      	cmp	r3, #0
   1e008:	f642 0301 	movw	r3, #10241	; 0x2801
   1e00c:	bf08      	it	eq
   1e00e:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1e012:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   1e016:	ab04      	add	r3, sp, #16
   1e018:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   1e01a:	ab01      	add	r3, sp, #4
   1e01c:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1e01e:	ab02      	add	r3, sp, #8
		attr.handle = start_handle;
   1e020:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
		attr.user_data = &value;
   1e024:	930c      	str	r3, [sp, #48]	; 0x30
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1e026:	f88d a004 	strb.w	sl, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1e02a:	687b      	ldr	r3, [r7, #4]
   1e02c:	463a      	mov	r2, r7
   1e02e:	a909      	add	r1, sp, #36	; 0x24
   1e030:	4630      	mov	r0, r6
   1e032:	4798      	blx	r3
   1e034:	2800      	cmp	r0, #0
   1e036:	d09b      	beq.n	1df70 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1e038:	f898 2000 	ldrb.w	r2, [r8]
   1e03c:	1aa4      	subs	r4, r4, r2
   1e03e:	b2a4      	uxth	r4, r4
   1e040:	4491      	add	r9, r2
   1e042:	e7b9      	b.n	1dfb8 <gatt_read_group_rsp+0x60>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1e044:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1e048:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   1e04c:	e7d8      	b.n	1e000 <gatt_read_group_rsp+0xa8>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1e04e:	f109 0304 	add.w	r3, r9, #4
   1e052:	f10d 0011 	add.w	r0, sp, #17
   1e056:	f109 0c14 	add.w	ip, r9, #20
   1e05a:	f853 eb04 	ldr.w	lr, [r3], #4
   1e05e:	f840 eb04 	str.w	lr, [r0], #4
   1e062:	4563      	cmp	r3, ip
   1e064:	d1f9      	bne.n	1e05a <gatt_read_group_rsp+0x102>
   1e066:	e7cb      	b.n	1e000 <gatt_read_group_rsp+0xa8>
   1e068:	200007b4 	.word	0x200007b4
   1e06c:	200007a8 	.word	0x200007a8
   1e070:	00035b9b 	.word	0x00035b9b

0001e074 <gatt_read_type_rsp>:
{
   1e074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e078:	b093      	sub	sp, #76	; 0x4c
   1e07a:	4617      	mov	r7, r2
   1e07c:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   1e07e:	4680      	mov	r8, r0
	if (err) {
   1e080:	460a      	mov	r2, r1
   1e082:	b121      	cbz	r1, 1e08e <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
   1e084:	686b      	ldr	r3, [r5, #4]
   1e086:	462a      	mov	r2, r5
   1e088:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   1e08a:	4798      	blx	r3
	if (!handle) {
   1e08c:	e05c      	b.n	1e148 <gatt_read_type_rsp+0xd4>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1e08e:	7c28      	ldrb	r0, [r5, #16]
   1e090:	2802      	cmp	r0, #2
   1e092:	d175      	bne.n	1e180 <gatt_read_type_rsp+0x10c>
	switch (rsp->len) {
   1e094:	7839      	ldrb	r1, [r7, #0]
   1e096:	2906      	cmp	r1, #6
   1e098:	d018      	beq.n	1e0cc <gatt_read_type_rsp+0x58>
   1e09a:	2908      	cmp	r1, #8
   1e09c:	d177      	bne.n	1e18e <gatt_read_type_rsp+0x11a>
		u.uuid.type = BT_UUID_TYPE_16;
   1e09e:	f88d 2020 	strb.w	r2, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1e0a2:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   1e0a4:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1e0a6:	b2a4      	uxth	r4, r4
   1e0a8:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
   1e0ac:	f10d 0a20 	add.w	sl, sp, #32
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e0b0:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   1e0b2:	783b      	ldrb	r3, [r7, #0]
   1e0b4:	42a3      	cmp	r3, r4
   1e0b6:	d90c      	bls.n	1e0d2 <gatt_read_type_rsp+0x5e>
	if (length == 0U && handle) {
   1e0b8:	2c00      	cmp	r4, #0
   1e0ba:	d175      	bne.n	1e1a8 <gatt_read_type_rsp+0x134>
   1e0bc:	2e00      	cmp	r6, #0
   1e0be:	d073      	beq.n	1e1a8 <gatt_read_type_rsp+0x134>
	gatt_discover_next(conn, handle, params);
   1e0c0:	462a      	mov	r2, r5
   1e0c2:	4631      	mov	r1, r6
   1e0c4:	4640      	mov	r0, r8
   1e0c6:	f011 fb85 	bl	2f7d4 <gatt_discover_next>
   1e0ca:	e03d      	b.n	1e148 <gatt_read_type_rsp+0xd4>
		u.uuid.type = BT_UUID_TYPE_128;
   1e0cc:	f88d 0020 	strb.w	r0, [sp, #32]
		break;
   1e0d0:	e7e7      	b.n	1e0a2 <gatt_read_type_rsp+0x2e>
		handle = sys_le16_to_cpu(data->handle);
   1e0d2:	f8b9 3000 	ldrh.w	r3, [r9]
   1e0d6:	b29e      	uxth	r6, r3
		if (!handle) {
   1e0d8:	2e00      	cmp	r6, #0
   1e0da:	d065      	beq.n	1e1a8 <gatt_read_type_rsp+0x134>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1e0dc:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1e0e0:	f8ad 201c 	strh.w	r2, [sp, #28]
   1e0e4:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   1e0e6:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   1e0ea:	f8ad 201e 	strh.w	r2, [sp, #30]
   1e0ee:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
   1e0f0:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1e0f4:	b172      	cbz	r2, 1e114 <gatt_read_type_rsp+0xa0>
   1e0f6:	2a02      	cmp	r2, #2
   1e0f8:	d017      	beq.n	1e12a <gatt_read_type_rsp+0xb6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1e0fa:	6829      	ldr	r1, [r5, #0]
   1e0fc:	b339      	cbz	r1, 1e14e <gatt_read_type_rsp+0xda>
   1e0fe:	4650      	mov	r0, sl
   1e100:	9303      	str	r3, [sp, #12]
   1e102:	f010 f86e 	bl	2e1e2 <bt_uuid_cmp>
   1e106:	9b03      	ldr	r3, [sp, #12]
   1e108:	b308      	cbz	r0, 1e14e <gatt_read_type_rsp+0xda>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1e10a:	783a      	ldrb	r2, [r7, #0]
   1e10c:	1aa4      	subs	r4, r4, r2
   1e10e:	b2a4      	uxth	r4, r4
   1e110:	4491      	add	r9, r2
   1e112:	e7ce      	b.n	1e0b2 <gatt_read_type_rsp+0x3e>
			value.uuid = &u.uuid;
   1e114:	f8cd a018 	str.w	sl, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1e118:	f899 2006 	ldrb.w	r2, [r9, #6]
   1e11c:	f899 1007 	ldrb.w	r1, [r9, #7]
   1e120:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e124:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   1e128:	e7e7      	b.n	1e0fa <gatt_read_type_rsp+0x86>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1e12a:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
   1e12c:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
   1e12e:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
   1e130:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1e132:	4981      	ldr	r1, [pc, #516]	; (1e338 <gatt_read_type_rsp+0x2c4>)
   1e134:	9201      	str	r2, [sp, #4]
   1e136:	9300      	str	r3, [sp, #0]
   1e138:	462a      	mov	r2, r5
   1e13a:	4b80      	ldr	r3, [pc, #512]	; (1e33c <gatt_read_type_rsp+0x2c8>)
   1e13c:	4640      	mov	r0, r8
   1e13e:	f011 fa9c 	bl	2f67a <gatt_req_send>
			return read_included_uuid(conn, params);
   1e142:	b286      	uxth	r6, r0
	if (!handle) {
   1e144:	2e00      	cmp	r6, #0
   1e146:	d1bb      	bne.n	1e0c0 <gatt_read_type_rsp+0x4c>
}
   1e148:	b013      	add	sp, #76	; 0x4c
   1e14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e14e:	f642 0202 	movw	r2, #10242	; 0x2802
   1e152:	f8ad 2016 	strh.w	r2, [sp, #22]
   1e156:	aa05      	add	r2, sp, #20
   1e158:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   1e15c:	aa06      	add	r2, sp, #24
   1e15e:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   1e160:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e164:	f88d b014 	strb.w	fp, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1e168:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e16a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   1e16e:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1e172:	462a      	mov	r2, r5
   1e174:	a90d      	add	r1, sp, #52	; 0x34
   1e176:	4640      	mov	r0, r8
   1e178:	4798      	blx	r3
   1e17a:	2800      	cmp	r0, #0
   1e17c:	d1c5      	bne.n	1e10a <gatt_read_type_rsp+0x96>
   1e17e:	e7e3      	b.n	1e148 <gatt_read_type_rsp+0xd4>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   1e180:	2803      	cmp	r0, #3
   1e182:	d175      	bne.n	1e270 <gatt_read_type_rsp+0x1fc>
	switch (rsp->len) {
   1e184:	7839      	ldrb	r1, [r7, #0]
   1e186:	2907      	cmp	r1, #7
   1e188:	d014      	beq.n	1e1b4 <gatt_read_type_rsp+0x140>
   1e18a:	2915      	cmp	r1, #21
   1e18c:	d011      	beq.n	1e1b2 <gatt_read_type_rsp+0x13e>
		BT_ERR("Invalid data len %u", rsp->len);
   1e18e:	4a6c      	ldr	r2, [pc, #432]	; (1e340 <gatt_read_type_rsp+0x2cc>)
   1e190:	6813      	ldr	r3, [r2, #0]
   1e192:	075b      	lsls	r3, r3, #29
   1e194:	d008      	beq.n	1e1a8 <gatt_read_type_rsp+0x134>
   1e196:	4b6b      	ldr	r3, [pc, #428]	; (1e344 <gatt_read_type_rsp+0x2d0>)
   1e198:	486b      	ldr	r0, [pc, #428]	; (1e348 <gatt_read_type_rsp+0x2d4>)
   1e19a:	1ad2      	subs	r2, r2, r3
   1e19c:	0892      	lsrs	r2, r2, #2
   1e19e:	0192      	lsls	r2, r2, #6
   1e1a0:	f042 0201 	orr.w	r2, r2, #1
   1e1a4:	f00e fda8 	bl	2ccf8 <log_1>
	params->func(conn, NULL, params);
   1e1a8:	686b      	ldr	r3, [r5, #4]
   1e1aa:	462a      	mov	r2, r5
   1e1ac:	2100      	movs	r1, #0
   1e1ae:	4640      	mov	r0, r8
   1e1b0:	e76b      	b.n	1e08a <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
   1e1b2:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1e1b4:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   1e1b6:	2600      	movs	r6, #0
		u.uuid.type = BT_UUID_TYPE_128;
   1e1b8:	f88d 2020 	strb.w	r2, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1e1bc:	b2a4      	uxth	r4, r4
   1e1be:	f107 0901 	add.w	r9, r7, #1
   1e1c2:	f10d 0a20 	add.w	sl, sp, #32
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e1c6:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   1e1c8:	783b      	ldrb	r3, [r7, #0]
   1e1ca:	42a3      	cmp	r3, r4
   1e1cc:	f63f af74 	bhi.w	1e0b8 <gatt_read_type_rsp+0x44>
		handle = sys_le16_to_cpu(data->handle);
   1e1d0:	f8b9 3000 	ldrh.w	r3, [r9]
   1e1d4:	b29e      	uxth	r6, r3
		if (!handle) {
   1e1d6:	2e00      	cmp	r6, #0
   1e1d8:	d0e6      	beq.n	1e1a8 <gatt_read_type_rsp+0x134>
		switch (u.uuid.type) {
   1e1da:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1e1de:	b172      	cbz	r2, 1e1fe <gatt_read_type_rsp+0x18a>
   1e1e0:	2a02      	cmp	r2, #2
   1e1e2:	d015      	beq.n	1e210 <gatt_read_type_rsp+0x19c>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1e1e4:	6829      	ldr	r1, [r5, #0]
   1e1e6:	b301      	cbz	r1, 1e22a <gatt_read_type_rsp+0x1b6>
   1e1e8:	4650      	mov	r0, sl
   1e1ea:	9303      	str	r3, [sp, #12]
   1e1ec:	f00f fff9 	bl	2e1e2 <bt_uuid_cmp>
   1e1f0:	9b03      	ldr	r3, [sp, #12]
   1e1f2:	b1d0      	cbz	r0, 1e22a <gatt_read_type_rsp+0x1b6>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1e1f4:	783a      	ldrb	r2, [r7, #0]
   1e1f6:	1aa4      	subs	r4, r4, r2
   1e1f8:	b2a4      	uxth	r4, r4
   1e1fa:	4491      	add	r9, r2
   1e1fc:	e7e4      	b.n	1e1c8 <gatt_read_type_rsp+0x154>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   1e1fe:	f899 2005 	ldrb.w	r2, [r9, #5]
   1e202:	f899 1006 	ldrb.w	r1, [r9, #6]
   1e206:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1e20a:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   1e20e:	e7e9      	b.n	1e1e4 <gatt_read_type_rsp+0x170>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1e210:	f109 0205 	add.w	r2, r9, #5
   1e214:	f10d 0121 	add.w	r1, sp, #33	; 0x21
   1e218:	f109 0015 	add.w	r0, r9, #21
   1e21c:	f852 cb04 	ldr.w	ip, [r2], #4
   1e220:	f841 cb04 	str.w	ip, [r1], #4
   1e224:	4282      	cmp	r2, r0
   1e226:	d1f9      	bne.n	1e21c <gatt_read_type_rsp+0x1a8>
   1e228:	e7dc      	b.n	1e1e4 <gatt_read_type_rsp+0x170>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1e22a:	f899 2002 	ldrb.w	r2, [r9, #2]
   1e22e:	f88d 201e 	strb.w	r2, [sp, #30]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e232:	f642 0203 	movw	r2, #10243	; 0x2803
   1e236:	f8ad 2016 	strh.w	r2, [sp, #22]
   1e23a:	aa05      	add	r2, sp, #20
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1e23c:	f8b9 1003 	ldrh.w	r1, [r9, #3]
   1e240:	f8ad 101c 	strh.w	r1, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e244:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   1e248:	aa06      	add	r2, sp, #24
   1e24a:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   1e24c:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1e250:	f8cd a018 	str.w	sl, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1e254:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e256:	f88d b014 	strb.w	fp, [sp, #20]
   1e25a:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   1e25e:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1e262:	462a      	mov	r2, r5
   1e264:	a90d      	add	r1, sp, #52	; 0x34
   1e266:	4640      	mov	r0, r8
   1e268:	4798      	blx	r3
   1e26a:	2800      	cmp	r0, #0
   1e26c:	d1c2      	bne.n	1e1f4 <gatt_read_type_rsp+0x180>
   1e26e:	e76b      	b.n	1e148 <gatt_read_type_rsp+0xd4>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   1e270:	682a      	ldr	r2, [r5, #0]
   1e272:	7816      	ldrb	r6, [r2, #0]
   1e274:	2e00      	cmp	r6, #0
   1e276:	d197      	bne.n	1e1a8 <gatt_read_type_rsp+0x134>
	uuid_val = BT_UUID_16(params->uuid)->val;
   1e278:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1e27a:	1e5c      	subs	r4, r3, #1
   1e27c:	b2a4      	uxth	r4, r4
   1e27e:	f107 0901 	add.w	r9, r7, #1
   1e282:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e286:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   1e288:	783b      	ldrb	r3, [r7, #0]
   1e28a:	42a3      	cmp	r3, r4
   1e28c:	f63f af14 	bhi.w	1e0b8 <gatt_read_type_rsp+0x44>
		handle = sys_le16_to_cpu(data->handle);
   1e290:	f8b9 2000 	ldrh.w	r2, [r9]
   1e294:	b296      	uxth	r6, r2
		if (!handle) {
   1e296:	2e00      	cmp	r6, #0
   1e298:	d086      	beq.n	1e1a8 <gatt_read_type_rsp+0x134>
		switch (uuid_val) {
   1e29a:	f1bb 0f04 	cmp.w	fp, #4
   1e29e:	d883      	bhi.n	1e1a8 <gatt_read_type_rsp+0x134>
   1e2a0:	a301      	add	r3, pc, #4	; (adr r3, 1e2a8 <gatt_read_type_rsp+0x234>)
   1e2a2:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
   1e2a6:	bf00      	nop
   1e2a8:	0001e2bd 	.word	0x0001e2bd
   1e2ac:	0001e1a9 	.word	0x0001e1a9
   1e2b0:	0001e2bd 	.word	0x0001e2bd
   1e2b4:	0001e2bd 	.word	0x0001e2bd
   1e2b8:	0001e2fd 	.word	0x0001e2fd
	return ((uint16_t)src[1] << 8) | src[0];
   1e2bc:	f899 1003 	ldrb.w	r1, [r9, #3]
   1e2c0:	f899 3002 	ldrb.w	r3, [r9, #2]
   1e2c4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			value.scc.flags = sys_get_le16(data->value);
   1e2c8:	f8ad 3020 	strh.w	r3, [sp, #32]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e2cc:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
   1e2ce:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e2d2:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   1e2d6:	ab08      	add	r3, sp, #32
   1e2d8:	9310      	str	r3, [sp, #64]	; 0x40
   1e2da:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1e2de:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e2e0:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1e2e4:	462a      	mov	r2, r5
   1e2e6:	a90d      	add	r1, sp, #52	; 0x34
   1e2e8:	4640      	mov	r0, r8
   1e2ea:	4798      	blx	r3
   1e2ec:	2800      	cmp	r0, #0
   1e2ee:	f43f af2b 	beq.w	1e148 <gatt_read_type_rsp+0xd4>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1e2f2:	783a      	ldrb	r2, [r7, #0]
   1e2f4:	1aa4      	subs	r4, r4, r2
   1e2f6:	b2a4      	uxth	r4, r4
   1e2f8:	4491      	add	r9, r2
   1e2fa:	e7c5      	b.n	1e288 <gatt_read_type_rsp+0x214>
			value.cpf.format = cpf->format;
   1e2fc:	f899 3002 	ldrb.w	r3, [r9, #2]
   1e300:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   1e304:	f899 3003 	ldrb.w	r3, [r9, #3]
   1e308:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   1e30c:	f899 1005 	ldrb.w	r1, [r9, #5]
   1e310:	f899 3004 	ldrb.w	r3, [r9, #4]
   1e314:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1e318:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   1e31c:	f899 3006 	ldrb.w	r3, [r9, #6]
   1e320:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   1e324:	f899 3007 	ldrb.w	r3, [r9, #7]
   1e328:	f899 1008 	ldrb.w	r1, [r9, #8]
   1e32c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1e330:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   1e334:	e7ca      	b.n	1e2cc <gatt_read_type_rsp+0x258>
   1e336:	bf00      	nop
   1e338:	0001e34d 	.word	0x0001e34d
   1e33c:	0002f171 	.word	0x0002f171
   1e340:	200007b4 	.word	0x200007b4
   1e344:	200007a8 	.word	0x200007a8
   1e348:	00035b9b 	.word	0x00035b9b

0001e34c <read_included_uuid_cb>:
{
   1e34c:	b570      	push	{r4, r5, r6, lr}
   1e34e:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   1e350:	2b10      	cmp	r3, #16
{
   1e352:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1e354:	4605      	mov	r5, r0
   1e356:	4619      	mov	r1, r3
	if (length != 16U) {
   1e358:	d013      	beq.n	1e382 <read_included_uuid_cb+0x36>
		BT_ERR("Invalid data len %u", length);
   1e35a:	4a27      	ldr	r2, [pc, #156]	; (1e3f8 <read_included_uuid_cb+0xac>)
   1e35c:	6813      	ldr	r3, [r2, #0]
   1e35e:	075b      	lsls	r3, r3, #29
   1e360:	d008      	beq.n	1e374 <read_included_uuid_cb+0x28>
   1e362:	4b26      	ldr	r3, [pc, #152]	; (1e3fc <read_included_uuid_cb+0xb0>)
   1e364:	4826      	ldr	r0, [pc, #152]	; (1e400 <read_included_uuid_cb+0xb4>)
   1e366:	1ad2      	subs	r2, r2, r3
   1e368:	0892      	lsrs	r2, r2, #2
   1e36a:	0192      	lsls	r2, r2, #6
   1e36c:	f042 0201 	orr.w	r2, r2, #1
   1e370:	f00e fcc2 	bl	2ccf8 <log_1>
		params->func(conn, NULL, params);
   1e374:	6863      	ldr	r3, [r4, #4]
   1e376:	4622      	mov	r2, r4
   1e378:	2100      	movs	r1, #0
   1e37a:	4628      	mov	r0, r5
   1e37c:	4798      	blx	r3
}
   1e37e:	b00e      	add	sp, #56	; 0x38
   1e380:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
   1e382:	8963      	ldrh	r3, [r4, #10]
   1e384:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   1e388:	89a3      	ldrh	r3, [r4, #12]
   1e38a:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   1e38e:	a804      	add	r0, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   1e390:	2302      	movs	r3, #2
   1e392:	f88d 3010 	strb.w	r3, [sp, #16]
	value.uuid = &u.uuid;
   1e396:	9002      	str	r0, [sp, #8]
	memcpy(u.u128.val, pdu, length);
   1e398:	f10d 0311 	add.w	r3, sp, #17
   1e39c:	f102 0110 	add.w	r1, r2, #16
   1e3a0:	f852 6b04 	ldr.w	r6, [r2], #4
   1e3a4:	f843 6b04 	str.w	r6, [r3], #4
   1e3a8:	428a      	cmp	r2, r1
   1e3aa:	d1f9      	bne.n	1e3a0 <read_included_uuid_cb+0x54>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1e3ac:	6821      	ldr	r1, [r4, #0]
   1e3ae:	b9f1      	cbnz	r1, 1e3ee <read_included_uuid_cb+0xa2>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e3b0:	f642 0202 	movw	r2, #10242	; 0x2802
   1e3b4:	2300      	movs	r3, #0
   1e3b6:	f8ad 2006 	strh.w	r2, [sp, #6]
   1e3ba:	aa01      	add	r2, sp, #4
   1e3bc:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   1e3c0:	f88d 3004 	strb.w	r3, [sp, #4]
   1e3c4:	aa02      	add	r2, sp, #8
   1e3c6:	930b      	str	r3, [sp, #44]	; 0x2c
   1e3c8:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   1e3cc:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e3ce:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   1e3d0:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1e3d4:	4622      	mov	r2, r4
   1e3d6:	6863      	ldr	r3, [r4, #4]
   1e3d8:	a909      	add	r1, sp, #36	; 0x24
   1e3da:	4628      	mov	r0, r5
   1e3dc:	4798      	blx	r3
   1e3de:	2800      	cmp	r0, #0
   1e3e0:	d0cd      	beq.n	1e37e <read_included_uuid_cb+0x32>
	gatt_discover_next(conn, params->start_handle, params);
   1e3e2:	8921      	ldrh	r1, [r4, #8]
   1e3e4:	4622      	mov	r2, r4
   1e3e6:	4628      	mov	r0, r5
   1e3e8:	f011 f9f4 	bl	2f7d4 <gatt_discover_next>
	return;
   1e3ec:	e7c7      	b.n	1e37e <read_included_uuid_cb+0x32>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1e3ee:	f00f fef8 	bl	2e1e2 <bt_uuid_cmp>
   1e3f2:	2800      	cmp	r0, #0
   1e3f4:	d0dc      	beq.n	1e3b0 <read_included_uuid_cb+0x64>
   1e3f6:	e7f4      	b.n	1e3e2 <read_included_uuid_cb+0x96>
   1e3f8:	200007b4 	.word	0x200007b4
   1e3fc:	200007a8 	.word	0x200007a8
   1e400:	00035b9b 	.word	0x00035b9b

0001e404 <gatt_find_info_rsp>:
{
   1e404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e408:	b08f      	sub	sp, #60	; 0x3c
   1e40a:	4680      	mov	r8, r0
   1e40c:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   1e40e:	4608      	mov	r0, r1
   1e410:	b989      	cbnz	r1, 1e436 <gatt_find_info_rsp+0x32>
	switch (rsp->format) {
   1e412:	7811      	ldrb	r1, [r2, #0]
   1e414:	2901      	cmp	r1, #1
   1e416:	d014      	beq.n	1e442 <gatt_find_info_rsp+0x3e>
   1e418:	2902      	cmp	r1, #2
   1e41a:	d02b      	beq.n	1e474 <gatt_find_info_rsp+0x70>
		BT_ERR("Invalid format %u", rsp->format);
   1e41c:	4a53      	ldr	r2, [pc, #332]	; (1e56c <gatt_find_info_rsp+0x168>)
   1e41e:	6813      	ldr	r3, [r2, #0]
   1e420:	075b      	lsls	r3, r3, #29
   1e422:	d008      	beq.n	1e436 <gatt_find_info_rsp+0x32>
   1e424:	4b52      	ldr	r3, [pc, #328]	; (1e570 <gatt_find_info_rsp+0x16c>)
   1e426:	4853      	ldr	r0, [pc, #332]	; (1e574 <gatt_find_info_rsp+0x170>)
   1e428:	1ad2      	subs	r2, r2, r3
   1e42a:	0892      	lsrs	r2, r2, #2
   1e42c:	0192      	lsls	r2, r2, #6
   1e42e:	f042 0201 	orr.w	r2, r2, #1
   1e432:	f00e fc61 	bl	2ccf8 <log_1>
	params->func(conn, NULL, params);
   1e436:	6873      	ldr	r3, [r6, #4]
   1e438:	4632      	mov	r2, r6
   1e43a:	2100      	movs	r1, #0
   1e43c:	4640      	mov	r0, r8
   1e43e:	4798      	blx	r3
   1e440:	e090      	b.n	1e564 <gatt_find_info_rsp+0x160>
		u.uuid.type = BT_UUID_TYPE_16;
   1e442:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i16);
   1e446:	f04f 0a04 	mov.w	sl, #4
	length--;
   1e44a:	3b01      	subs	r3, #1
   1e44c:	b29b      	uxth	r3, r3
	if (length < len) {
   1e44e:	4553      	cmp	r3, sl
   1e450:	d3f1      	bcc.n	1e436 <gatt_find_info_rsp+0x32>
	for (i = length / len, pdu = rsp->info; i != 0;
   1e452:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
   1e456:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   1e45a:	9300      	str	r3, [sp, #0]
   1e45c:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   1e45e:	46cb      	mov	fp, r9
			skip = false;
   1e460:	464d      	mov	r5, r9
   1e462:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   1e464:	9b00      	ldr	r3, [sp, #0]
   1e466:	b953      	cbnz	r3, 1e47e <gatt_find_info_rsp+0x7a>
	gatt_discover_next(conn, handle, params);
   1e468:	4632      	mov	r2, r6
   1e46a:	4659      	mov	r1, fp
   1e46c:	4640      	mov	r0, r8
   1e46e:	f011 f9b1 	bl	2f7d4 <gatt_discover_next>
	return;
   1e472:	e077      	b.n	1e564 <gatt_find_info_rsp+0x160>
		u.uuid.type = BT_UUID_TYPE_128;
   1e474:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i128);
   1e478:	f04f 0a12 	mov.w	sl, #18
		break;
   1e47c:	e7e5      	b.n	1e44a <gatt_find_info_rsp+0x46>
		handle = sys_le16_to_cpu(info.i16->handle);
   1e47e:	8823      	ldrh	r3, [r4, #0]
   1e480:	f8ad 3004 	strh.w	r3, [sp, #4]
   1e484:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
   1e488:	f1b9 0f00 	cmp.w	r9, #0
   1e48c:	d156      	bne.n	1e53c <gatt_find_info_rsp+0x138>
		switch (u.uuid.type) {
   1e48e:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1e492:	2b00      	cmp	r3, #0
   1e494:	d03a      	beq.n	1e50c <gatt_find_info_rsp+0x108>
   1e496:	2b02      	cmp	r3, #2
   1e498:	d03f      	beq.n	1e51a <gatt_find_info_rsp+0x116>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1e49a:	6831      	ldr	r1, [r6, #0]
   1e49c:	2900      	cmp	r1, #0
   1e49e:	d148      	bne.n	1e532 <gatt_find_info_rsp+0x12e>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   1e4a0:	7c33      	ldrb	r3, [r6, #16]
   1e4a2:	2b04      	cmp	r3, #4
   1e4a4:	d14d      	bne.n	1e542 <gatt_find_info_rsp+0x13e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1e4a6:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1e4aa:	a902      	add	r1, sp, #8
   1e4ac:	4638      	mov	r0, r7
   1e4ae:	f88d 5008 	strb.w	r5, [sp, #8]
   1e4b2:	f8ad 300a 	strh.w	r3, [sp, #10]
   1e4b6:	f00f fe94 	bl	2e1e2 <bt_uuid_cmp>
   1e4ba:	b310      	cbz	r0, 1e502 <gatt_find_info_rsp+0xfe>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1e4bc:	f642 0301 	movw	r3, #10241	; 0x2801
   1e4c0:	a903      	add	r1, sp, #12
   1e4c2:	4638      	mov	r0, r7
   1e4c4:	f88d 500c 	strb.w	r5, [sp, #12]
   1e4c8:	f8ad 300e 	strh.w	r3, [sp, #14]
   1e4cc:	f00f fe89 	bl	2e1e2 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1e4d0:	b1b8      	cbz	r0, 1e502 <gatt_find_info_rsp+0xfe>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   1e4d2:	f642 0302 	movw	r3, #10242	; 0x2802
   1e4d6:	a909      	add	r1, sp, #36	; 0x24
   1e4d8:	4638      	mov	r0, r7
   1e4da:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   1e4de:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1e4e2:	f00f fe7e 	bl	2e1e2 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1e4e6:	b160      	cbz	r0, 1e502 <gatt_find_info_rsp+0xfe>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   1e4e8:	f642 0303 	movw	r3, #10243	; 0x2803
   1e4ec:	a909      	add	r1, sp, #36	; 0x24
   1e4ee:	4638      	mov	r0, r7
   1e4f0:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   1e4f4:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1e4f8:	f00f fe73 	bl	2e1e2 <bt_uuid_cmp>
   1e4fc:	bb08      	cbnz	r0, 1e542 <gatt_find_info_rsp+0x13e>
				skip = true;
   1e4fe:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   1e502:	9b00      	ldr	r3, [sp, #0]
   1e504:	3b01      	subs	r3, #1
   1e506:	9300      	str	r3, [sp, #0]
   1e508:	4454      	add	r4, sl
   1e50a:	e7ab      	b.n	1e464 <gatt_find_info_rsp+0x60>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   1e50c:	78a3      	ldrb	r3, [r4, #2]
   1e50e:	78e2      	ldrb	r2, [r4, #3]
   1e510:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e514:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   1e518:	e7bf      	b.n	1e49a <gatt_find_info_rsp+0x96>
			memcpy(u.u128.val, info.i128->uuid, 16);
   1e51a:	1ca3      	adds	r3, r4, #2
   1e51c:	f10d 0211 	add.w	r2, sp, #17
   1e520:	f104 0112 	add.w	r1, r4, #18
   1e524:	f853 0b04 	ldr.w	r0, [r3], #4
   1e528:	f842 0b04 	str.w	r0, [r2], #4
   1e52c:	428b      	cmp	r3, r1
   1e52e:	d1f9      	bne.n	1e524 <gatt_find_info_rsp+0x120>
   1e530:	e7b3      	b.n	1e49a <gatt_find_info_rsp+0x96>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1e532:	4638      	mov	r0, r7
   1e534:	f00f fe55 	bl	2e1e2 <bt_uuid_cmp>
   1e538:	2800      	cmp	r0, #0
   1e53a:	d0b1      	beq.n	1e4a0 <gatt_find_info_rsp+0x9c>
			skip = false;
   1e53c:	f04f 0900 	mov.w	r9, #0
   1e540:	e7df      	b.n	1e502 <gatt_find_info_rsp+0xfe>
		attr.handle = handle;
   1e542:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1e546:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e54a:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   1e54e:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1e552:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1e554:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1e558:	4632      	mov	r2, r6
   1e55a:	a909      	add	r1, sp, #36	; 0x24
   1e55c:	4640      	mov	r0, r8
   1e55e:	4798      	blx	r3
   1e560:	2800      	cmp	r0, #0
   1e562:	d1ce      	bne.n	1e502 <gatt_find_info_rsp+0xfe>
}
   1e564:	b00f      	add	sp, #60	; 0x3c
   1e566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e56a:	bf00      	nop
   1e56c:	200007b4 	.word	0x200007b4
   1e570:	200007a8 	.word	0x200007a8
   1e574:	00035baf 	.word	0x00035baf

0001e578 <bt_gatt_read>:
{
   1e578:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1e57a:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1e57c:	4605      	mov	r5, r0
   1e57e:	b970      	cbnz	r0, 1e59e <bt_gatt_read+0x26>
   1e580:	4928      	ldr	r1, [pc, #160]	; (1e624 <bt_gatt_read+0xac>)
   1e582:	4a29      	ldr	r2, [pc, #164]	; (1e628 <bt_gatt_read+0xb0>)
   1e584:	4829      	ldr	r0, [pc, #164]	; (1e62c <bt_gatt_read+0xb4>)
   1e586:	f241 030c 	movw	r3, #4108	; 0x100c
   1e58a:	f00e f806 	bl	2c59a <printk>
   1e58e:	4828      	ldr	r0, [pc, #160]	; (1e630 <bt_gatt_read+0xb8>)
   1e590:	f00e f803 	bl	2c59a <printk>
   1e594:	4824      	ldr	r0, [pc, #144]	; (1e628 <bt_gatt_read+0xb0>)
   1e596:	f241 010c 	movw	r1, #4108	; 0x100c
   1e59a:	f00e fa3f 	bl	2ca1c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1e59e:	b10c      	cbz	r4, 1e5a4 <bt_gatt_read+0x2c>
   1e5a0:	6823      	ldr	r3, [r4, #0]
   1e5a2:	b973      	cbnz	r3, 1e5c2 <bt_gatt_read+0x4a>
   1e5a4:	4923      	ldr	r1, [pc, #140]	; (1e634 <bt_gatt_read+0xbc>)
   1e5a6:	4a20      	ldr	r2, [pc, #128]	; (1e628 <bt_gatt_read+0xb0>)
   1e5a8:	4820      	ldr	r0, [pc, #128]	; (1e62c <bt_gatt_read+0xb4>)
   1e5aa:	f241 030d 	movw	r3, #4109	; 0x100d
   1e5ae:	f00d fff4 	bl	2c59a <printk>
   1e5b2:	481f      	ldr	r0, [pc, #124]	; (1e630 <bt_gatt_read+0xb8>)
   1e5b4:	f00d fff1 	bl	2c59a <printk>
   1e5b8:	481b      	ldr	r0, [pc, #108]	; (1e628 <bt_gatt_read+0xb0>)
   1e5ba:	f241 010d 	movw	r1, #4109	; 0x100d
   1e5be:	f00e fa2d 	bl	2ca1c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1e5c2:	7aab      	ldrb	r3, [r5, #10]
   1e5c4:	2b07      	cmp	r3, #7
   1e5c6:	d127      	bne.n	1e618 <bt_gatt_read+0xa0>
	if (params->handle_count == 0) {
   1e5c8:	6863      	ldr	r3, [r4, #4]
   1e5ca:	b93b      	cbnz	r3, 1e5dc <bt_gatt_read+0x64>
	return gatt_req_send(conn, gatt_read_rsp, params,
   1e5cc:	2308      	movs	r3, #8
   1e5ce:	2004      	movs	r0, #4
   1e5d0:	e9cd 3000 	strd	r3, r0, [sp]
   1e5d4:	4b18      	ldr	r3, [pc, #96]	; (1e638 <bt_gatt_read+0xc0>)
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1e5d6:	4919      	ldr	r1, [pc, #100]	; (1e63c <bt_gatt_read+0xc4>)
   1e5d8:	4622      	mov	r2, r4
   1e5da:	e00a      	b.n	1e5f2 <bt_gatt_read+0x7a>
	if (params->handle_count > 1) {
   1e5dc:	2b01      	cmp	r3, #1
   1e5de:	d90d      	bls.n	1e5fc <bt_gatt_read+0x84>
		if (params->multiple.variable) {
   1e5e0:	7b22      	ldrb	r2, [r4, #12]
   1e5e2:	b9e2      	cbnz	r2, 1e61e <bt_gatt_read+0xa6>
	return gatt_req_send(conn, gatt_read_mult_rsp, params,
   1e5e4:	005b      	lsls	r3, r3, #1
   1e5e6:	9301      	str	r3, [sp, #4]
   1e5e8:	230e      	movs	r3, #14
   1e5ea:	9300      	str	r3, [sp, #0]
   1e5ec:	4914      	ldr	r1, [pc, #80]	; (1e640 <bt_gatt_read+0xc8>)
   1e5ee:	4b15      	ldr	r3, [pc, #84]	; (1e644 <bt_gatt_read+0xcc>)
   1e5f0:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1e5f2:	4628      	mov	r0, r5
   1e5f4:	f011 f841 	bl	2f67a <gatt_req_send>
}
   1e5f8:	b003      	add	sp, #12
   1e5fa:	bd30      	pop	{r4, r5, pc}
	if (params->single.offset) {
   1e5fc:	8963      	ldrh	r3, [r4, #10]
   1e5fe:	b12b      	cbz	r3, 1e60c <bt_gatt_read+0x94>
	return gatt_req_send(conn, gatt_read_rsp, params,
   1e600:	230c      	movs	r3, #12
   1e602:	2104      	movs	r1, #4
   1e604:	e9cd 3100 	strd	r3, r1, [sp]
   1e608:	4b0f      	ldr	r3, [pc, #60]	; (1e648 <bt_gatt_read+0xd0>)
   1e60a:	e7e4      	b.n	1e5d6 <bt_gatt_read+0x5e>
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1e60c:	230a      	movs	r3, #10
   1e60e:	2202      	movs	r2, #2
   1e610:	e9cd 3200 	strd	r3, r2, [sp]
   1e614:	4b0d      	ldr	r3, [pc, #52]	; (1e64c <bt_gatt_read+0xd4>)
   1e616:	e7de      	b.n	1e5d6 <bt_gatt_read+0x5e>
		return -ENOTCONN;
   1e618:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e61c:	e7ec      	b.n	1e5f8 <bt_gatt_read+0x80>
			return gatt_read_mult_vl(conn, params);
   1e61e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1e622:	e7e9      	b.n	1e5f8 <bt_gatt_read+0x80>
   1e624:	00036585 	.word	0x00036585
   1e628:	000358d0 	.word	0x000358d0
   1e62c:	00032486 	.word	0x00032486
   1e630:	00035a07 	.word	0x00035a07
   1e634:	00035afa 	.word	0x00035afa
   1e638:	0002f58f 	.word	0x0002f58f
   1e63c:	0001e651 	.word	0x0001e651
   1e640:	0002f2fd 	.word	0x0002f2fd
   1e644:	0002f259 	.word	0x0002f259
   1e648:	0002f1b1 	.word	0x0002f1b1
   1e64c:	0002f19d 	.word	0x0002f19d

0001e650 <gatt_read_rsp>:
{
   1e650:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e654:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1e656:	4606      	mov	r6, r0
   1e658:	4690      	mov	r8, r2
   1e65a:	4699      	mov	r9, r3
	if (err || !length) {
   1e65c:	460f      	mov	r7, r1
   1e65e:	b901      	cbnz	r1, 1e662 <gatt_read_rsp+0x12>
   1e660:	b953      	cbnz	r3, 1e678 <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   1e662:	2300      	movs	r3, #0
   1e664:	930a      	str	r3, [sp, #40]	; 0x28
   1e666:	6825      	ldr	r5, [r4, #0]
   1e668:	4622      	mov	r2, r4
   1e66a:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1e66c:	4630      	mov	r0, r6
   1e66e:	46ac      	mov	ip, r5
}
   1e670:	b003      	add	sp, #12
   1e672:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1e676:	4760      	bx	ip
	if (!params->handle_count) {
   1e678:	6863      	ldr	r3, [r4, #4]
   1e67a:	2b00      	cmp	r3, #0
   1e67c:	d14b      	bne.n	1e716 <gatt_read_rsp+0xc6>
	for (length--, pdu = rsp->data; length;
   1e67e:	f109 35ff 	add.w	r5, r9, #4294967295
   1e682:	b2ad      	uxth	r5, r5
   1e684:	f102 0901 	add.w	r9, r2, #1
   1e688:	b34d      	cbz	r5, 1e6de <gatt_read_rsp+0x8e>
		handle = sys_le16_to_cpu(data->handle);
   1e68a:	f8b9 2000 	ldrh.w	r2, [r9]
   1e68e:	b293      	uxth	r3, r2
		if (!handle) {
   1e690:	b97b      	cbnz	r3, 1e6b2 <gatt_read_rsp+0x62>
			BT_ERR("Invalid handle");
   1e692:	4932      	ldr	r1, [pc, #200]	; (1e75c <gatt_read_rsp+0x10c>)
   1e694:	680b      	ldr	r3, [r1, #0]
   1e696:	075b      	lsls	r3, r3, #29
   1e698:	d05c      	beq.n	1e754 <gatt_read_rsp+0x104>
   1e69a:	4b31      	ldr	r3, [pc, #196]	; (1e760 <gatt_read_rsp+0x110>)
   1e69c:	4831      	ldr	r0, [pc, #196]	; (1e764 <gatt_read_rsp+0x114>)
   1e69e:	1ac9      	subs	r1, r1, r3
   1e6a0:	0889      	lsrs	r1, r1, #2
   1e6a2:	0189      	lsls	r1, r1, #6
   1e6a4:	f041 0101 	orr.w	r1, r1, #1
}
   1e6a8:	b003      	add	sp, #12
   1e6aa:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
   1e6ae:	f00e bb16 	b.w	2ccde <log_0>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1e6b2:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
   1e6b6:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1e6b8:	42ab      	cmp	r3, r5
   1e6ba:	bf8c      	ite	hi
   1e6bc:	1eab      	subhi	r3, r5, #2
   1e6be:	3b02      	subls	r3, #2
   1e6c0:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
   1e6c2:	9300      	str	r3, [sp, #0]
   1e6c4:	6827      	ldr	r7, [r4, #0]
   1e6c6:	f109 0302 	add.w	r3, r9, #2
   1e6ca:	4622      	mov	r2, r4
   1e6cc:	2100      	movs	r1, #0
   1e6ce:	4630      	mov	r0, r6
   1e6d0:	47b8      	blx	r7
   1e6d2:	2800      	cmp	r0, #0
   1e6d4:	d03e      	beq.n	1e754 <gatt_read_rsp+0x104>
		if (rsp->len > length) {
   1e6d6:	f898 1000 	ldrb.w	r1, [r8]
   1e6da:	428d      	cmp	r5, r1
   1e6dc:	d20b      	bcs.n	1e6f6 <gatt_read_rsp+0xa6>
	if (bt_gatt_read(conn, params) < 0) {
   1e6de:	4621      	mov	r1, r4
   1e6e0:	4630      	mov	r0, r6
   1e6e2:	f7ff ff49 	bl	1e578 <bt_gatt_read>
   1e6e6:	2800      	cmp	r0, #0
   1e6e8:	da34      	bge.n	1e754 <gatt_read_rsp+0x104>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1e6ea:	2300      	movs	r3, #0
   1e6ec:	930a      	str	r3, [sp, #40]	; 0x28
   1e6ee:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1e6f0:	4622      	mov	r2, r4
   1e6f2:	210e      	movs	r1, #14
   1e6f4:	e7ba      	b.n	1e66c <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   1e6f6:	8922      	ldrh	r2, [r4, #8]
   1e6f8:	8960      	ldrh	r0, [r4, #10]
   1e6fa:	4290      	cmp	r0, r2
   1e6fc:	d105      	bne.n	1e70a <gatt_read_rsp+0xba>
			params->func(conn, 0, params, NULL, 0);
   1e6fe:	2300      	movs	r3, #0
   1e700:	930a      	str	r3, [sp, #40]	; 0x28
   1e702:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   1e704:	4622      	mov	r2, r4
   1e706:	4619      	mov	r1, r3
   1e708:	e7b0      	b.n	1e66c <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   1e70a:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1e70c:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
   1e70e:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1e710:	b2ad      	uxth	r5, r5
   1e712:	4489      	add	r9, r1
   1e714:	e7b8      	b.n	1e688 <gatt_read_rsp+0x38>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   1e716:	f8cd 9000 	str.w	r9, [sp]
   1e71a:	4613      	mov	r3, r2
   1e71c:	6825      	ldr	r5, [r4, #0]
   1e71e:	4622      	mov	r2, r4
   1e720:	47a8      	blx	r5
   1e722:	b1b8      	cbz	r0, 1e754 <gatt_read_rsp+0x104>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   1e724:	4630      	mov	r0, r6
   1e726:	f010 fc2c 	bl	2ef82 <bt_att_get_mtu>
   1e72a:	3801      	subs	r0, #1
   1e72c:	4581      	cmp	r9, r0
   1e72e:	da03      	bge.n	1e738 <gatt_read_rsp+0xe8>
		params->func(conn, 0, params, NULL, 0);
   1e730:	970a      	str	r7, [sp, #40]	; 0x28
   1e732:	6825      	ldr	r5, [r4, #0]
   1e734:	463b      	mov	r3, r7
   1e736:	e7e5      	b.n	1e704 <gatt_read_rsp+0xb4>
	params->single.offset += length;
   1e738:	8963      	ldrh	r3, [r4, #10]
   1e73a:	eb09 0503 	add.w	r5, r9, r3
   1e73e:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   1e740:	4621      	mov	r1, r4
   1e742:	4630      	mov	r0, r6
   1e744:	f7ff ff18 	bl	1e578 <bt_gatt_read>
   1e748:	2800      	cmp	r0, #0
   1e74a:	da03      	bge.n	1e754 <gatt_read_rsp+0x104>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1e74c:	970a      	str	r7, [sp, #40]	; 0x28
   1e74e:	6825      	ldr	r5, [r4, #0]
   1e750:	463b      	mov	r3, r7
   1e752:	e7cd      	b.n	1e6f0 <gatt_read_rsp+0xa0>
}
   1e754:	b003      	add	sp, #12
   1e756:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e75a:	bf00      	nop
   1e75c:	200007b4 	.word	0x200007b4
   1e760:	200007a8 	.word	0x200007a8
   1e764:	00035bc1 	.word	0x00035bc1

0001e768 <bt_gatt_write_without_response_cb>:
{
   1e768:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1e76c:	460f      	mov	r7, r1
   1e76e:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
   1e772:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
   1e776:	4692      	mov	sl, r2
   1e778:	461e      	mov	r6, r3
	__ASSERT(conn, "invalid parameters\n");
   1e77a:	4605      	mov	r5, r0
   1e77c:	b970      	cbnz	r0, 1e79c <bt_gatt_write_without_response_cb+0x34>
   1e77e:	4932      	ldr	r1, [pc, #200]	; (1e848 <bt_gatt_write_without_response_cb+0xe0>)
   1e780:	4a32      	ldr	r2, [pc, #200]	; (1e84c <bt_gatt_write_without_response_cb+0xe4>)
   1e782:	4833      	ldr	r0, [pc, #204]	; (1e850 <bt_gatt_write_without_response_cb+0xe8>)
   1e784:	f241 033d 	movw	r3, #4157	; 0x103d
   1e788:	f00d ff07 	bl	2c59a <printk>
   1e78c:	4831      	ldr	r0, [pc, #196]	; (1e854 <bt_gatt_write_without_response_cb+0xec>)
   1e78e:	f00d ff04 	bl	2c59a <printk>
   1e792:	482e      	ldr	r0, [pc, #184]	; (1e84c <bt_gatt_write_without_response_cb+0xe4>)
   1e794:	f241 013d 	movw	r1, #4157	; 0x103d
   1e798:	f00e f940 	bl	2ca1c <assert_post_action>
	__ASSERT(handle, "invalid parameters\n");
   1e79c:	b977      	cbnz	r7, 1e7bc <bt_gatt_write_without_response_cb+0x54>
   1e79e:	492e      	ldr	r1, [pc, #184]	; (1e858 <bt_gatt_write_without_response_cb+0xf0>)
   1e7a0:	4a2a      	ldr	r2, [pc, #168]	; (1e84c <bt_gatt_write_without_response_cb+0xe4>)
   1e7a2:	482b      	ldr	r0, [pc, #172]	; (1e850 <bt_gatt_write_without_response_cb+0xe8>)
   1e7a4:	f241 033e 	movw	r3, #4158	; 0x103e
   1e7a8:	f00d fef7 	bl	2c59a <printk>
   1e7ac:	4829      	ldr	r0, [pc, #164]	; (1e854 <bt_gatt_write_without_response_cb+0xec>)
   1e7ae:	f00d fef4 	bl	2c59a <printk>
   1e7b2:	4826      	ldr	r0, [pc, #152]	; (1e84c <bt_gatt_write_without_response_cb+0xe4>)
   1e7b4:	f241 013e 	movw	r1, #4158	; 0x103e
   1e7b8:	f00e f930 	bl	2ca1c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1e7bc:	7aab      	ldrb	r3, [r5, #10]
   1e7be:	2b07      	cmp	r3, #7
   1e7c0:	d13d      	bne.n	1e83e <bt_gatt_write_without_response_cb+0xd6>
	if (sign) {
   1e7c2:	b384      	cbz	r4, 1e826 <bt_gatt_write_without_response_cb+0xbe>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
   1e7c4:	f106 020e 	add.w	r2, r6, #14
   1e7c8:	21d2      	movs	r1, #210	; 0xd2
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   1e7ca:	4628      	mov	r0, r5
   1e7cc:	f7fd ff8a 	bl	1c6e4 <bt_att_create_pdu>
   1e7d0:	4604      	mov	r4, r0
	if (!buf) {
   1e7d2:	b328      	cbz	r0, 1e820 <bt_gatt_write_without_response_cb+0xb8>
   1e7d4:	2102      	movs	r1, #2
   1e7d6:	3008      	adds	r0, #8
   1e7d8:	f002 fdce 	bl	21378 <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   1e7dc:	2300      	movs	r3, #0
	cmd->handle = sys_cpu_to_le16(handle);
   1e7de:	8007      	strh	r7, [r0, #0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   1e7e0:	2200      	movs	r2, #0
   1e7e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1e7e6:	2300      	movs	r3, #0
   1e7e8:	e9cd 2300 	strd	r2, r3, [sp]
   1e7ec:	4631      	mov	r1, r6
   1e7ee:	4652      	mov	r2, sl
   1e7f0:	4620      	mov	r0, r4
   1e7f2:	f002 fde3 	bl	213bc <net_buf_append_bytes>
	if (write != length) {
   1e7f6:	42b0      	cmp	r0, r6
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   1e7f8:	4602      	mov	r2, r0
	if (write != length) {
   1e7fa:	d017      	beq.n	1e82c <bt_gatt_write_without_response_cb+0xc4>
		BT_WARN("Unable to allocate length %u: only %zu written",
   1e7fc:	4917      	ldr	r1, [pc, #92]	; (1e85c <bt_gatt_write_without_response_cb+0xf4>)
   1e7fe:	680b      	ldr	r3, [r1, #0]
   1e800:	f013 0f06 	tst.w	r3, #6
   1e804:	d009      	beq.n	1e81a <bt_gatt_write_without_response_cb+0xb2>
   1e806:	4b16      	ldr	r3, [pc, #88]	; (1e860 <bt_gatt_write_without_response_cb+0xf8>)
   1e808:	4816      	ldr	r0, [pc, #88]	; (1e864 <bt_gatt_write_without_response_cb+0xfc>)
   1e80a:	1ac9      	subs	r1, r1, r3
   1e80c:	0889      	lsrs	r1, r1, #2
   1e80e:	0189      	lsls	r1, r1, #6
   1e810:	f041 0302 	orr.w	r3, r1, #2
   1e814:	4631      	mov	r1, r6
   1e816:	f00e fa83 	bl	2cd20 <log_2>
		net_buf_unref(buf);
   1e81a:	4620      	mov	r0, r4
   1e81c:	f002 fc7c 	bl	21118 <net_buf_unref>
		return -ENOMEM;
   1e820:	f06f 000b 	mvn.w	r0, #11
   1e824:	e00d      	b.n	1e842 <bt_gatt_write_without_response_cb+0xda>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   1e826:	1cb2      	adds	r2, r6, #2
   1e828:	2152      	movs	r1, #82	; 0x52
   1e82a:	e7ce      	b.n	1e7ca <bt_gatt_write_without_response_cb+0x62>
	return bt_att_send(conn, buf, func, user_data);
   1e82c:	464b      	mov	r3, r9
   1e82e:	4642      	mov	r2, r8
   1e830:	4621      	mov	r1, r4
   1e832:	4628      	mov	r0, r5
}
   1e834:	b004      	add	sp, #16
   1e836:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, func, user_data);
   1e83a:	f7fe bae7 	b.w	1ce0c <bt_att_send>
		return -ENOTCONN;
   1e83e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1e842:	b004      	add	sp, #16
   1e844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1e848:	00036585 	.word	0x00036585
   1e84c:	000358d0 	.word	0x000358d0
   1e850:	00032486 	.word	0x00032486
   1e854:	00035a07 	.word	0x00035a07
   1e858:	00035bc9 	.word	0x00035bc9
   1e85c:	200007b4 	.word	0x200007b4
   1e860:	200007a8 	.word	0x200007a8
   1e864:	00035bd0 	.word	0x00035bd0

0001e868 <bt_gatt_write>:
{
   1e868:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e86a:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1e86c:	4605      	mov	r5, r0
   1e86e:	b970      	cbnz	r0, 1e88e <bt_gatt_write+0x26>
   1e870:	492f      	ldr	r1, [pc, #188]	; (1e930 <bt_gatt_write+0xc8>)
   1e872:	4a30      	ldr	r2, [pc, #192]	; (1e934 <bt_gatt_write+0xcc>)
   1e874:	4830      	ldr	r0, [pc, #192]	; (1e938 <bt_gatt_write+0xd0>)
   1e876:	f241 1307 	movw	r3, #4359	; 0x1107
   1e87a:	f00d fe8e 	bl	2c59a <printk>
   1e87e:	482f      	ldr	r0, [pc, #188]	; (1e93c <bt_gatt_write+0xd4>)
   1e880:	f00d fe8b 	bl	2c59a <printk>
   1e884:	482b      	ldr	r0, [pc, #172]	; (1e934 <bt_gatt_write+0xcc>)
   1e886:	f241 1107 	movw	r1, #4359	; 0x1107
   1e88a:	f00e f8c7 	bl	2ca1c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1e88e:	b10c      	cbz	r4, 1e894 <bt_gatt_write+0x2c>
   1e890:	6823      	ldr	r3, [r4, #0]
   1e892:	b973      	cbnz	r3, 1e8b2 <bt_gatt_write+0x4a>
   1e894:	492a      	ldr	r1, [pc, #168]	; (1e940 <bt_gatt_write+0xd8>)
   1e896:	4a27      	ldr	r2, [pc, #156]	; (1e934 <bt_gatt_write+0xcc>)
   1e898:	4827      	ldr	r0, [pc, #156]	; (1e938 <bt_gatt_write+0xd0>)
   1e89a:	f241 1308 	movw	r3, #4360	; 0x1108
   1e89e:	f00d fe7c 	bl	2c59a <printk>
   1e8a2:	4826      	ldr	r0, [pc, #152]	; (1e93c <bt_gatt_write+0xd4>)
   1e8a4:	f00d fe79 	bl	2c59a <printk>
   1e8a8:	4822      	ldr	r0, [pc, #136]	; (1e934 <bt_gatt_write+0xcc>)
   1e8aa:	f241 1108 	movw	r1, #4360	; 0x1108
   1e8ae:	f00e f8b5 	bl	2ca1c <assert_post_action>
	__ASSERT(params->handle, "invalid parameters\n");
   1e8b2:	88a3      	ldrh	r3, [r4, #4]
   1e8b4:	b973      	cbnz	r3, 1e8d4 <bt_gatt_write+0x6c>
   1e8b6:	4923      	ldr	r1, [pc, #140]	; (1e944 <bt_gatt_write+0xdc>)
   1e8b8:	4a1e      	ldr	r2, [pc, #120]	; (1e934 <bt_gatt_write+0xcc>)
   1e8ba:	481f      	ldr	r0, [pc, #124]	; (1e938 <bt_gatt_write+0xd0>)
   1e8bc:	f241 1309 	movw	r3, #4361	; 0x1109
   1e8c0:	f00d fe6b 	bl	2c59a <printk>
   1e8c4:	481d      	ldr	r0, [pc, #116]	; (1e93c <bt_gatt_write+0xd4>)
   1e8c6:	f00d fe68 	bl	2c59a <printk>
   1e8ca:	481a      	ldr	r0, [pc, #104]	; (1e934 <bt_gatt_write+0xcc>)
   1e8cc:	f241 1109 	movw	r1, #4361	; 0x1109
   1e8d0:	f00e f8a4 	bl	2ca1c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1e8d4:	7aab      	ldrb	r3, [r5, #10]
   1e8d6:	2b07      	cmp	r3, #7
   1e8d8:	d126      	bne.n	1e928 <bt_gatt_write+0xc0>
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1e8da:	88e3      	ldrh	r3, [r4, #6]
   1e8dc:	b1ab      	cbz	r3, 1e90a <bt_gatt_write+0xa2>
	len = bt_att_get_mtu(conn) - req_len - 1;
   1e8de:	4628      	mov	r0, r5
   1e8e0:	f010 fb4f 	bl	2ef82 <bt_att_get_mtu>
   1e8e4:	1f43      	subs	r3, r0, #5
   1e8e6:	b298      	uxth	r0, r3
	len = MIN(params->length, len);
   1e8e8:	89a3      	ldrh	r3, [r4, #12]
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   1e8ea:	4917      	ldr	r1, [pc, #92]	; (1e948 <bt_gatt_write+0xe0>)
	len = MIN(params->length, len);
   1e8ec:	4283      	cmp	r3, r0
   1e8ee:	bf28      	it	cs
   1e8f0:	4603      	movcs	r3, r0
	len += req_len;
   1e8f2:	3304      	adds	r3, #4
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   1e8f4:	b29b      	uxth	r3, r3
   1e8f6:	9301      	str	r3, [sp, #4]
   1e8f8:	2316      	movs	r3, #22
   1e8fa:	9300      	str	r3, [sp, #0]
   1e8fc:	4b13      	ldr	r3, [pc, #76]	; (1e94c <bt_gatt_write+0xe4>)
   1e8fe:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   1e900:	4628      	mov	r0, r5
   1e902:	f010 feba 	bl	2f67a <gatt_req_send>
}
   1e906:	b002      	add	sp, #8
   1e908:	bd70      	pop	{r4, r5, r6, pc}
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1e90a:	4628      	mov	r0, r5
	len = sizeof(struct bt_att_write_req) + params->length;
   1e90c:	89a6      	ldrh	r6, [r4, #12]
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1e90e:	f010 fb38 	bl	2ef82 <bt_att_get_mtu>
	len = sizeof(struct bt_att_write_req) + params->length;
   1e912:	3602      	adds	r6, #2
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1e914:	3801      	subs	r0, #1
   1e916:	42b0      	cmp	r0, r6
   1e918:	d3e1      	bcc.n	1e8de <bt_gatt_write+0x76>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   1e91a:	2312      	movs	r3, #18
   1e91c:	9300      	str	r3, [sp, #0]
   1e91e:	490c      	ldr	r1, [pc, #48]	; (1e950 <bt_gatt_write+0xe8>)
   1e920:	4b0c      	ldr	r3, [pc, #48]	; (1e954 <bt_gatt_write+0xec>)
   1e922:	9601      	str	r6, [sp, #4]
   1e924:	4622      	mov	r2, r4
   1e926:	e7eb      	b.n	1e900 <bt_gatt_write+0x98>
		return -ENOTCONN;
   1e928:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1e92c:	e7eb      	b.n	1e906 <bt_gatt_write+0x9e>
   1e92e:	bf00      	nop
   1e930:	00036585 	.word	0x00036585
   1e934:	000358d0 	.word	0x000358d0
   1e938:	00032486 	.word	0x00032486
   1e93c:	00035a07 	.word	0x00035a07
   1e940:	00035afa 	.word	0x00035afa
   1e944:	00035bff 	.word	0x00035bff
   1e948:	0001e959 	.word	0x0001e959
   1e94c:	0002f2bd 	.word	0x0002f2bd
   1e950:	0002f073 	.word	0x0002f073
   1e954:	0002f281 	.word	0x0002f281

0001e958 <gatt_prepare_write_rsp>:
{
   1e958:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1e95a:	9c08      	ldr	r4, [sp, #32]
   1e95c:	4606      	mov	r6, r0
   1e95e:	4617      	mov	r7, r2
	if (err) {
   1e960:	b129      	cbz	r1, 1e96e <gatt_prepare_write_rsp+0x16>
		params->func(conn, err, params);
   1e962:	6823      	ldr	r3, [r4, #0]
   1e964:	4622      	mov	r2, r4
}
   1e966:	b003      	add	sp, #12
   1e968:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   1e96c:	4718      	bx	r3
	len = length - sizeof(*rsp);
   1e96e:	1f1d      	subs	r5, r3, #4
	if (len > params->length) {
   1e970:	89a3      	ldrh	r3, [r4, #12]
   1e972:	429d      	cmp	r5, r3
   1e974:	d91c      	bls.n	1e9b0 <gatt_prepare_write_rsp+0x58>
		BT_ERR("Incorrect length, canceling write");
   1e976:	4925      	ldr	r1, [pc, #148]	; (1ea0c <gatt_prepare_write_rsp+0xb4>)
   1e978:	680b      	ldr	r3, [r1, #0]
   1e97a:	075f      	lsls	r7, r3, #29
   1e97c:	d008      	beq.n	1e990 <gatt_prepare_write_rsp+0x38>
   1e97e:	4b24      	ldr	r3, [pc, #144]	; (1ea10 <gatt_prepare_write_rsp+0xb8>)
   1e980:	4824      	ldr	r0, [pc, #144]	; (1ea14 <gatt_prepare_write_rsp+0xbc>)
   1e982:	1ac9      	subs	r1, r1, r3
   1e984:	0889      	lsrs	r1, r1, #2
   1e986:	0189      	lsls	r1, r1, #6
   1e988:	f041 0101 	orr.w	r1, r1, #1
   1e98c:	f00e f9a7 	bl	2ccde <log_0>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_cancel_encode,
   1e990:	2318      	movs	r3, #24
   1e992:	2501      	movs	r5, #1
   1e994:	e9cd 3500 	strd	r3, r5, [sp]
   1e998:	4b1f      	ldr	r3, [pc, #124]	; (1ea18 <gatt_prepare_write_rsp+0xc0>)
   1e99a:	4920      	ldr	r1, [pc, #128]	; (1ea1c <gatt_prepare_write_rsp+0xc4>)
   1e99c:	4622      	mov	r2, r4
   1e99e:	4630      	mov	r0, r6
   1e9a0:	f010 fe6b 	bl	2f67a <gatt_req_send>
		if (gatt_cancel_all_writes(conn, params)) {
   1e9a4:	b380      	cbz	r0, 1ea08 <gatt_prepare_write_rsp+0xb0>
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   1e9a6:	6823      	ldr	r3, [r4, #0]
   1e9a8:	4622      	mov	r2, r4
   1e9aa:	210e      	movs	r1, #14
   1e9ac:	4630      	mov	r0, r6
   1e9ae:	e7da      	b.n	1e966 <gatt_prepare_write_rsp+0xe>
	data_valid = memcmp(params->data, rsp->value, len) == 0;
   1e9b0:	462a      	mov	r2, r5
   1e9b2:	68a0      	ldr	r0, [r4, #8]
   1e9b4:	1d39      	adds	r1, r7, #4
   1e9b6:	f011 fe02 	bl	305be <memcmp>
	if (params->offset != rsp->offset || !data_valid) {
   1e9ba:	88e2      	ldrh	r2, [r4, #6]
   1e9bc:	887b      	ldrh	r3, [r7, #2]
   1e9be:	4293      	cmp	r3, r2
   1e9c0:	d100      	bne.n	1e9c4 <gatt_prepare_write_rsp+0x6c>
   1e9c2:	b158      	cbz	r0, 1e9dc <gatt_prepare_write_rsp+0x84>
		BT_ERR("Incorrect offset or data in response, canceling write");
   1e9c4:	4911      	ldr	r1, [pc, #68]	; (1ea0c <gatt_prepare_write_rsp+0xb4>)
   1e9c6:	680b      	ldr	r3, [r1, #0]
   1e9c8:	0758      	lsls	r0, r3, #29
   1e9ca:	d0e1      	beq.n	1e990 <gatt_prepare_write_rsp+0x38>
   1e9cc:	4b10      	ldr	r3, [pc, #64]	; (1ea10 <gatt_prepare_write_rsp+0xb8>)
   1e9ce:	4814      	ldr	r0, [pc, #80]	; (1ea20 <gatt_prepare_write_rsp+0xc8>)
   1e9d0:	1ac9      	subs	r1, r1, r3
   1e9d2:	0889      	lsrs	r1, r1, #2
   1e9d4:	0189      	lsls	r1, r1, #6
   1e9d6:	f041 0101 	orr.w	r1, r1, #1
   1e9da:	e7d7      	b.n	1e98c <gatt_prepare_write_rsp+0x34>
	params->offset += len;
   1e9dc:	fa13 f385 	uxtah	r3, r3, r5
	params->length -= len;
   1e9e0:	89a2      	ldrh	r2, [r4, #12]
	params->offset += len;
   1e9e2:	80e3      	strh	r3, [r4, #6]
	params->data = (const uint8_t *)params->data + len;
   1e9e4:	68a3      	ldr	r3, [r4, #8]
   1e9e6:	442b      	add	r3, r5
	params->length -= len;
   1e9e8:	1b55      	subs	r5, r2, r5
   1e9ea:	b2ad      	uxth	r5, r5
	params->data = (const uint8_t *)params->data + len;
   1e9ec:	60a3      	str	r3, [r4, #8]
	params->length -= len;
   1e9ee:	81a5      	strh	r5, [r4, #12]
	if (!params->length) {
   1e9f0:	b92d      	cbnz	r5, 1e9fe <gatt_prepare_write_rsp+0xa6>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_exec_encode,
   1e9f2:	2318      	movs	r3, #24
   1e9f4:	2201      	movs	r2, #1
   1e9f6:	e9cd 3200 	strd	r3, r2, [sp]
   1e9fa:	4b0a      	ldr	r3, [pc, #40]	; (1ea24 <gatt_prepare_write_rsp+0xcc>)
   1e9fc:	e7cd      	b.n	1e99a <gatt_prepare_write_rsp+0x42>
	if (!bt_gatt_write(conn, params)) {
   1e9fe:	4621      	mov	r1, r4
   1ea00:	4630      	mov	r0, r6
   1ea02:	f7ff ff31 	bl	1e868 <bt_gatt_write>
   1ea06:	e7cd      	b.n	1e9a4 <gatt_prepare_write_rsp+0x4c>
}
   1ea08:	b003      	add	sp, #12
   1ea0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ea0c:	200007b4 	.word	0x200007b4
   1ea10:	200007a8 	.word	0x200007a8
   1ea14:	00035c0e 	.word	0x00035c0e
   1ea18:	0002f1c9 	.word	0x0002f1c9
   1ea1c:	0002f073 	.word	0x0002f073
   1ea20:	00035c30 	.word	0x00035c30
   1ea24:	0002f1db 	.word	0x0002f1db

0001ea28 <bt_gatt_subscribe>:
{
   1ea28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea2a:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   1ea2c:	4605      	mov	r5, r0
   1ea2e:	b970      	cbnz	r0, 1ea4e <bt_gatt_subscribe+0x26>
   1ea30:	494b      	ldr	r1, [pc, #300]	; (1eb60 <bt_gatt_subscribe+0x138>)
   1ea32:	4a4c      	ldr	r2, [pc, #304]	; (1eb64 <bt_gatt_subscribe+0x13c>)
   1ea34:	484c      	ldr	r0, [pc, #304]	; (1eb68 <bt_gatt_subscribe+0x140>)
   1ea36:	f241 1399 	movw	r3, #4505	; 0x1199
   1ea3a:	f00d fdae 	bl	2c59a <printk>
   1ea3e:	484b      	ldr	r0, [pc, #300]	; (1eb6c <bt_gatt_subscribe+0x144>)
   1ea40:	f00d fdab 	bl	2c59a <printk>
   1ea44:	4847      	ldr	r0, [pc, #284]	; (1eb64 <bt_gatt_subscribe+0x13c>)
   1ea46:	f241 1199 	movw	r1, #4505	; 0x1199
   1ea4a:	f00d ffe7 	bl	2ca1c <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1ea4e:	b10e      	cbz	r6, 1ea54 <bt_gatt_subscribe+0x2c>
   1ea50:	6833      	ldr	r3, [r6, #0]
   1ea52:	b973      	cbnz	r3, 1ea72 <bt_gatt_subscribe+0x4a>
   1ea54:	4946      	ldr	r1, [pc, #280]	; (1eb70 <bt_gatt_subscribe+0x148>)
   1ea56:	4a43      	ldr	r2, [pc, #268]	; (1eb64 <bt_gatt_subscribe+0x13c>)
   1ea58:	4843      	ldr	r0, [pc, #268]	; (1eb68 <bt_gatt_subscribe+0x140>)
   1ea5a:	f241 139a 	movw	r3, #4506	; 0x119a
   1ea5e:	f00d fd9c 	bl	2c59a <printk>
   1ea62:	4842      	ldr	r0, [pc, #264]	; (1eb6c <bt_gatt_subscribe+0x144>)
   1ea64:	f00d fd99 	bl	2c59a <printk>
   1ea68:	483e      	ldr	r0, [pc, #248]	; (1eb64 <bt_gatt_subscribe+0x13c>)
   1ea6a:	f241 119a 	movw	r1, #4506	; 0x119a
   1ea6e:	f00d ffd5 	bl	2ca1c <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   1ea72:	89b3      	ldrh	r3, [r6, #12]
   1ea74:	b973      	cbnz	r3, 1ea94 <bt_gatt_subscribe+0x6c>
   1ea76:	493f      	ldr	r1, [pc, #252]	; (1eb74 <bt_gatt_subscribe+0x14c>)
   1ea78:	4a3a      	ldr	r2, [pc, #232]	; (1eb64 <bt_gatt_subscribe+0x13c>)
   1ea7a:	483b      	ldr	r0, [pc, #236]	; (1eb68 <bt_gatt_subscribe+0x140>)
   1ea7c:	f241 139b 	movw	r3, #4507	; 0x119b
   1ea80:	f00d fd8b 	bl	2c59a <printk>
   1ea84:	4839      	ldr	r0, [pc, #228]	; (1eb6c <bt_gatt_subscribe+0x144>)
   1ea86:	f00d fd88 	bl	2c59a <printk>
   1ea8a:	4836      	ldr	r0, [pc, #216]	; (1eb64 <bt_gatt_subscribe+0x13c>)
   1ea8c:	f241 119b 	movw	r1, #4507	; 0x119b
   1ea90:	f00d ffc4 	bl	2ca1c <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   1ea94:	8973      	ldrh	r3, [r6, #10]
   1ea96:	b973      	cbnz	r3, 1eab6 <bt_gatt_subscribe+0x8e>
   1ea98:	4937      	ldr	r1, [pc, #220]	; (1eb78 <bt_gatt_subscribe+0x150>)
   1ea9a:	4a32      	ldr	r2, [pc, #200]	; (1eb64 <bt_gatt_subscribe+0x13c>)
   1ea9c:	4832      	ldr	r0, [pc, #200]	; (1eb68 <bt_gatt_subscribe+0x140>)
   1ea9e:	f241 13a1 	movw	r3, #4513	; 0x11a1
   1eaa2:	f00d fd7a 	bl	2c59a <printk>
   1eaa6:	4831      	ldr	r0, [pc, #196]	; (1eb6c <bt_gatt_subscribe+0x144>)
   1eaa8:	f00d fd77 	bl	2c59a <printk>
   1eaac:	482d      	ldr	r0, [pc, #180]	; (1eb64 <bt_gatt_subscribe+0x13c>)
   1eaae:	f241 11a1 	movw	r1, #4513	; 0x11a1
   1eab2:	f00d ffb3 	bl	2ca1c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1eab6:	7aab      	ldrb	r3, [r5, #10]
   1eab8:	2b07      	cmp	r3, #7
   1eaba:	d149      	bne.n	1eb50 <bt_gatt_subscribe+0x128>
	sub = gatt_sub_find(conn);
   1eabc:	4628      	mov	r0, r5
   1eabe:	f7fe faab 	bl	1d018 <gatt_sub_find>
	if (!sub) {
   1eac2:	4604      	mov	r4, r0
   1eac4:	b958      	cbnz	r0, 1eade <bt_gatt_subscribe+0xb6>
		sub = gatt_sub_find(NULL);
   1eac6:	f7fe faa7 	bl	1d018 <gatt_sub_find>
		if (sub) {
   1eaca:	4604      	mov	r4, r0
   1eacc:	2800      	cmp	r0, #0
   1eace:	d042      	beq.n	1eb56 <bt_gatt_subscribe+0x12e>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1ead0:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1ead4:	3001      	adds	r0, #1
   1ead6:	f010 fc2c 	bl	2f332 <bt_addr_le_copy>
			sub->id = conn->id;
   1eada:	7a2b      	ldrb	r3, [r5, #8]
   1eadc:	7023      	strb	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1eade:	68a2      	ldr	r2, [r4, #8]
   1eae0:	b90a      	cbnz	r2, 1eae6 <bt_gatt_subscribe+0xbe>
   1eae2:	4613      	mov	r3, r2
   1eae4:	e001      	b.n	1eaea <bt_gatt_subscribe+0xc2>
   1eae6:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   1eaea:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1eaec:	b96b      	cbnz	r3, 1eb0a <bt_gatt_subscribe+0xe2>
	if (!has_subscription) {
   1eaee:	bb31      	cbnz	r1, 1eb3e <bt_gatt_subscribe+0x116>
		err = gatt_write_ccc(conn, params);
   1eaf0:	4628      	mov	r0, r5
   1eaf2:	4631      	mov	r1, r6
   1eaf4:	f7fe fc16 	bl	1d324 <gatt_write_ccc>
		if (err) {
   1eaf8:	4605      	mov	r5, r0
   1eafa:	b300      	cbz	r0, 1eb3e <bt_gatt_subscribe+0x116>
	if (gatt_sub_is_empty(sub)) {
   1eafc:	68a3      	ldr	r3, [r4, #8]
   1eafe:	b913      	cbnz	r3, 1eb06 <bt_gatt_subscribe+0xde>
		gatt_sub_free(sub);
   1eb00:	4620      	mov	r0, r4
   1eb02:	f7fe fb15 	bl	1d130 <gatt_sub_free>
}
   1eb06:	4628      	mov	r0, r5
   1eb08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   1eb0a:	42b3      	cmp	r3, r6
   1eb0c:	d106      	bne.n	1eb1c <bt_gatt_subscribe+0xf4>
	if (gatt_sub_is_empty(sub)) {
   1eb0e:	b912      	cbnz	r2, 1eb16 <bt_gatt_subscribe+0xee>
		gatt_sub_free(sub);
   1eb10:	4620      	mov	r0, r4
   1eb12:	f7fe fb0d 	bl	1d130 <gatt_sub_free>
			return -EALREADY;
   1eb16:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1eb1a:	e7f4      	b.n	1eb06 <bt_gatt_subscribe+0xde>
		if (tmp->value_handle == params->value_handle &&
   1eb1c:	891f      	ldrh	r7, [r3, #8]
   1eb1e:	8930      	ldrh	r0, [r6, #8]
   1eb20:	4287      	cmp	r7, r0
   1eb22:	d104      	bne.n	1eb2e <bt_gatt_subscribe+0x106>
   1eb24:	899f      	ldrh	r7, [r3, #12]
   1eb26:	89b0      	ldrh	r0, [r6, #12]
			has_subscription = true;
   1eb28:	4287      	cmp	r7, r0
   1eb2a:	bf28      	it	cs
   1eb2c:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eb2e:	f113 0f14 	cmn.w	r3, #20
   1eb32:	d0dc      	beq.n	1eaee <bt_gatt_subscribe+0xc6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eb34:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1eb36:	2b00      	cmp	r3, #0
   1eb38:	d0d9      	beq.n	1eaee <bt_gatt_subscribe+0xc6>
   1eb3a:	3b14      	subs	r3, #20
   1eb3c:	e7d6      	b.n	1eaec <bt_gatt_subscribe+0xc4>
Z_GENLIST_PREPEND(slist, snode)
   1eb3e:	68a2      	ldr	r2, [r4, #8]
	parent->next = child;
   1eb40:	6172      	str	r2, [r6, #20]
Z_GENLIST_PREPEND(slist, snode)
   1eb42:	68e5      	ldr	r5, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   1eb44:	f106 0314 	add.w	r3, r6, #20
	list->head = node;
   1eb48:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1eb4a:	b93d      	cbnz	r5, 1eb5c <bt_gatt_subscribe+0x134>
	list->tail = node;
   1eb4c:	60e3      	str	r3, [r4, #12]
}
   1eb4e:	e7da      	b.n	1eb06 <bt_gatt_subscribe+0xde>
		return -ENOTCONN;
   1eb50:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   1eb54:	e7d7      	b.n	1eb06 <bt_gatt_subscribe+0xde>
		return -ENOMEM;
   1eb56:	f06f 050b 	mvn.w	r5, #11
   1eb5a:	e7d4      	b.n	1eb06 <bt_gatt_subscribe+0xde>
	return 0;
   1eb5c:	2500      	movs	r5, #0
   1eb5e:	e7d2      	b.n	1eb06 <bt_gatt_subscribe+0xde>
   1eb60:	00036585 	.word	0x00036585
   1eb64:	000358d0 	.word	0x000358d0
   1eb68:	00032486 	.word	0x00032486
   1eb6c:	00035a07 	.word	0x00035a07
   1eb70:	00035c66 	.word	0x00035c66
   1eb74:	00035c7f 	.word	0x00035c7f
   1eb78:	00035c8d 	.word	0x00035c8d

0001eb7c <bt_gatt_resubscribe>:
{
   1eb7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb7e:	4606      	mov	r6, r0
   1eb80:	460f      	mov	r7, r1
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1eb82:	4615      	mov	r5, r2
   1eb84:	b10a      	cbz	r2, 1eb8a <bt_gatt_resubscribe+0xe>
   1eb86:	6813      	ldr	r3, [r2, #0]
   1eb88:	b973      	cbnz	r3, 1eba8 <bt_gatt_resubscribe+0x2c>
   1eb8a:	4932      	ldr	r1, [pc, #200]	; (1ec54 <bt_gatt_resubscribe+0xd8>)
   1eb8c:	4a32      	ldr	r2, [pc, #200]	; (1ec58 <bt_gatt_resubscribe+0xdc>)
   1eb8e:	4833      	ldr	r0, [pc, #204]	; (1ec5c <bt_gatt_resubscribe+0xe0>)
   1eb90:	f241 13db 	movw	r3, #4571	; 0x11db
   1eb94:	f00d fd01 	bl	2c59a <printk>
   1eb98:	4831      	ldr	r0, [pc, #196]	; (1ec60 <bt_gatt_resubscribe+0xe4>)
   1eb9a:	f00d fcfe 	bl	2c59a <printk>
   1eb9e:	482e      	ldr	r0, [pc, #184]	; (1ec58 <bt_gatt_resubscribe+0xdc>)
   1eba0:	f241 11db 	movw	r1, #4571	; 0x11db
   1eba4:	f00d ff3a 	bl	2ca1c <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   1eba8:	89ab      	ldrh	r3, [r5, #12]
   1ebaa:	b973      	cbnz	r3, 1ebca <bt_gatt_resubscribe+0x4e>
   1ebac:	492d      	ldr	r1, [pc, #180]	; (1ec64 <bt_gatt_resubscribe+0xe8>)
   1ebae:	4a2a      	ldr	r2, [pc, #168]	; (1ec58 <bt_gatt_resubscribe+0xdc>)
   1ebb0:	482a      	ldr	r0, [pc, #168]	; (1ec5c <bt_gatt_resubscribe+0xe0>)
   1ebb2:	f241 13dc 	movw	r3, #4572	; 0x11dc
   1ebb6:	f00d fcf0 	bl	2c59a <printk>
   1ebba:	4829      	ldr	r0, [pc, #164]	; (1ec60 <bt_gatt_resubscribe+0xe4>)
   1ebbc:	f00d fced 	bl	2c59a <printk>
   1ebc0:	4825      	ldr	r0, [pc, #148]	; (1ec58 <bt_gatt_resubscribe+0xdc>)
   1ebc2:	f241 11dc 	movw	r1, #4572	; 0x11dc
   1ebc6:	f00d ff29 	bl	2ca1c <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   1ebca:	896b      	ldrh	r3, [r5, #10]
   1ebcc:	b973      	cbnz	r3, 1ebec <bt_gatt_resubscribe+0x70>
   1ebce:	4926      	ldr	r1, [pc, #152]	; (1ec68 <bt_gatt_resubscribe+0xec>)
   1ebd0:	4a21      	ldr	r2, [pc, #132]	; (1ec58 <bt_gatt_resubscribe+0xdc>)
   1ebd2:	4822      	ldr	r0, [pc, #136]	; (1ec5c <bt_gatt_resubscribe+0xe0>)
   1ebd4:	f241 13dd 	movw	r3, #4573	; 0x11dd
   1ebd8:	f00d fcdf 	bl	2c59a <printk>
   1ebdc:	4820      	ldr	r0, [pc, #128]	; (1ec60 <bt_gatt_resubscribe+0xe4>)
   1ebde:	f00d fcdc 	bl	2c59a <printk>
   1ebe2:	481d      	ldr	r0, [pc, #116]	; (1ec58 <bt_gatt_resubscribe+0xdc>)
   1ebe4:	f241 11dd 	movw	r1, #4573	; 0x11dd
   1ebe8:	f00d ff18 	bl	2ca1c <assert_post_action>
		if (id == sub->id && !bt_addr_le_cmp(&sub->peer, addr)) {
   1ebec:	4c1f      	ldr	r4, [pc, #124]	; (1ec6c <bt_gatt_resubscribe+0xf0>)
   1ebee:	7823      	ldrb	r3, [r4, #0]
   1ebf0:	42b3      	cmp	r3, r6
   1ebf2:	d007      	beq.n	1ec04 <bt_gatt_resubscribe+0x88>
		sub = gatt_sub_find(NULL);
   1ebf4:	2000      	movs	r0, #0
   1ebf6:	f7fe fa0f 	bl	1d018 <gatt_sub_find>
		if (sub) {
   1ebfa:	4604      	mov	r4, r0
   1ebfc:	b9a8      	cbnz	r0, 1ec2a <bt_gatt_resubscribe+0xae>
		return -ENOMEM;
   1ebfe:	f06f 000b 	mvn.w	r0, #11
   1ec02:	e011      	b.n	1ec28 <bt_gatt_resubscribe+0xac>
		if (id == sub->id && !bt_addr_le_cmp(&sub->peer, addr)) {
   1ec04:	4639      	mov	r1, r7
   1ec06:	1c60      	adds	r0, r4, #1
   1ec08:	f010 fa8c 	bl	2f124 <bt_addr_le_cmp>
   1ec0c:	2800      	cmp	r0, #0
   1ec0e:	d1f1      	bne.n	1ebf4 <bt_gatt_resubscribe+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1ec10:	68a2      	ldr	r2, [r4, #8]
   1ec12:	b112      	cbz	r2, 1ec1a <bt_gatt_resubscribe+0x9e>
   1ec14:	f1a2 0314 	sub.w	r3, r2, #20
   1ec18:	b96b      	cbnz	r3, 1ec36 <bt_gatt_resubscribe+0xba>
	parent->next = child;
   1ec1a:	616a      	str	r2, [r5, #20]
Z_GENLIST_PREPEND(slist, snode)
   1ec1c:	68e0      	ldr	r0, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   1ec1e:	f105 0314 	add.w	r3, r5, #20
	list->head = node;
   1ec22:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1ec24:	b9a0      	cbnz	r0, 1ec50 <bt_gatt_resubscribe+0xd4>
	list->tail = node;
   1ec26:	60e3      	str	r3, [r4, #12]
}
   1ec28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_addr_le_copy(&sub->peer, addr);
   1ec2a:	4639      	mov	r1, r7
   1ec2c:	1c60      	adds	r0, r4, #1
   1ec2e:	f010 fb80 	bl	2f332 <bt_addr_le_copy>
			sub->id = id;
   1ec32:	7026      	strb	r6, [r4, #0]
   1ec34:	e7ec      	b.n	1ec10 <bt_gatt_resubscribe+0x94>
		if (tmp == params) {
   1ec36:	42ab      	cmp	r3, r5
   1ec38:	d007      	beq.n	1ec4a <bt_gatt_resubscribe+0xce>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ec3a:	f113 0f14 	cmn.w	r3, #20
   1ec3e:	d0ec      	beq.n	1ec1a <bt_gatt_resubscribe+0x9e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ec40:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1ec42:	2b00      	cmp	r3, #0
   1ec44:	d0e9      	beq.n	1ec1a <bt_gatt_resubscribe+0x9e>
   1ec46:	3b14      	subs	r3, #20
   1ec48:	e7e6      	b.n	1ec18 <bt_gatt_resubscribe+0x9c>
			return -EALREADY;
   1ec4a:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1ec4e:	e7eb      	b.n	1ec28 <bt_gatt_resubscribe+0xac>
	return 0;
   1ec50:	2000      	movs	r0, #0
   1ec52:	e7e9      	b.n	1ec28 <bt_gatt_resubscribe+0xac>
   1ec54:	00035c66 	.word	0x00035c66
   1ec58:	000358d0 	.word	0x000358d0
   1ec5c:	00032486 	.word	0x00032486
   1ec60:	00035a07 	.word	0x00035a07
   1ec64:	00035c7f 	.word	0x00035c7f
   1ec68:	00035c8d 	.word	0x00035c8d
   1ec6c:	20002d70 	.word	0x20002d70

0001ec70 <bt_gatt_unsubscribe>:
{
   1ec70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ec74:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   1ec76:	4607      	mov	r7, r0
   1ec78:	b970      	cbnz	r0, 1ec98 <bt_gatt_unsubscribe+0x28>
   1ec7a:	494b      	ldr	r1, [pc, #300]	; (1eda8 <bt_gatt_unsubscribe+0x138>)
   1ec7c:	4a4b      	ldr	r2, [pc, #300]	; (1edac <bt_gatt_unsubscribe+0x13c>)
   1ec7e:	484c      	ldr	r0, [pc, #304]	; (1edb0 <bt_gatt_unsubscribe+0x140>)
   1ec80:	f241 13f9 	movw	r3, #4601	; 0x11f9
   1ec84:	f00d fc89 	bl	2c59a <printk>
   1ec88:	484a      	ldr	r0, [pc, #296]	; (1edb4 <bt_gatt_unsubscribe+0x144>)
   1ec8a:	f00d fc86 	bl	2c59a <printk>
   1ec8e:	4847      	ldr	r0, [pc, #284]	; (1edac <bt_gatt_unsubscribe+0x13c>)
   1ec90:	f241 11f9 	movw	r1, #4601	; 0x11f9
   1ec94:	f00d fec2 	bl	2ca1c <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   1ec98:	b975      	cbnz	r5, 1ecb8 <bt_gatt_unsubscribe+0x48>
   1ec9a:	4947      	ldr	r1, [pc, #284]	; (1edb8 <bt_gatt_unsubscribe+0x148>)
   1ec9c:	4a43      	ldr	r2, [pc, #268]	; (1edac <bt_gatt_unsubscribe+0x13c>)
   1ec9e:	4844      	ldr	r0, [pc, #272]	; (1edb0 <bt_gatt_unsubscribe+0x140>)
   1eca0:	f241 13fa 	movw	r3, #4602	; 0x11fa
   1eca4:	f00d fc79 	bl	2c59a <printk>
   1eca8:	4842      	ldr	r0, [pc, #264]	; (1edb4 <bt_gatt_unsubscribe+0x144>)
   1ecaa:	f00d fc76 	bl	2c59a <printk>
   1ecae:	483f      	ldr	r0, [pc, #252]	; (1edac <bt_gatt_unsubscribe+0x13c>)
   1ecb0:	f241 11fa 	movw	r1, #4602	; 0x11fa
   1ecb4:	f00d feb2 	bl	2ca1c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1ecb8:	7abb      	ldrb	r3, [r7, #10]
   1ecba:	2b07      	cmp	r3, #7
   1ecbc:	d170      	bne.n	1eda0 <bt_gatt_unsubscribe+0x130>
	sub = gatt_sub_find(conn);
   1ecbe:	4638      	mov	r0, r7
   1ecc0:	f7fe f9aa 	bl	1d018 <gatt_sub_find>
	if (!sub) {
   1ecc4:	4606      	mov	r6, r0
   1ecc6:	b918      	cbnz	r0, 1ecd0 <bt_gatt_unsubscribe+0x60>
		return -EINVAL;
   1ecc8:	f06f 0015 	mvn.w	r0, #21
}
   1eccc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1ecd0:	6884      	ldr	r4, [r0, #8]
   1ecd2:	b1f4      	cbz	r4, 1ed12 <bt_gatt_unsubscribe+0xa2>
   1ecd4:	f1b4 0314 	subs.w	r3, r4, #20
   1ecd8:	d01d      	beq.n	1ed16 <bt_gatt_unsubscribe+0xa6>
   1ecda:	6824      	ldr	r4, [r4, #0]
   1ecdc:	b104      	cbz	r4, 1ece0 <bt_gatt_unsubscribe+0x70>
   1ecde:	3c14      	subs	r4, #20
   1ece0:	f04f 0800 	mov.w	r8, #0
   1ece4:	46c2      	mov	sl, r8
   1ece6:	46c1      	mov	r9, r8
	parent->next = child;
   1ece8:	46c3      	mov	fp, r8
   1ecea:	b9b3      	cbnz	r3, 1ed1a <bt_gatt_unsubscribe+0xaa>
	if (!found) {
   1ecec:	f1ba 0f00 	cmp.w	sl, #0
   1ecf0:	d0ea      	beq.n	1ecc8 <bt_gatt_unsubscribe+0x58>
	if (gatt_sub_is_empty(sub)) {
   1ecf2:	68b3      	ldr	r3, [r6, #8]
   1ecf4:	b913      	cbnz	r3, 1ecfc <bt_gatt_unsubscribe+0x8c>
		gatt_sub_free(sub);
   1ecf6:	4630      	mov	r0, r6
   1ecf8:	f7fe fa1a 	bl	1d130 <gatt_sub_free>
	if (has_subscription) {
   1ecfc:	f1b9 0f00 	cmp.w	r9, #0
   1ed00:	d046      	beq.n	1ed90 <bt_gatt_unsubscribe+0x120>
		params->notify(conn, params, NULL, 0);
   1ed02:	2300      	movs	r3, #0
   1ed04:	682c      	ldr	r4, [r5, #0]
   1ed06:	461a      	mov	r2, r3
   1ed08:	4629      	mov	r1, r5
   1ed0a:	4638      	mov	r0, r7
   1ed0c:	47a0      	blx	r4
		return 0;
   1ed0e:	2000      	movs	r0, #0
   1ed10:	e7dc      	b.n	1eccc <bt_gatt_unsubscribe+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1ed12:	4623      	mov	r3, r4
   1ed14:	e7e4      	b.n	1ece0 <bt_gatt_unsubscribe+0x70>
   1ed16:	461c      	mov	r4, r3
   1ed18:	e7e2      	b.n	1ece0 <bt_gatt_unsubscribe+0x70>
		if (params == tmp) {
   1ed1a:	42ab      	cmp	r3, r5
   1ed1c:	f103 0114 	add.w	r1, r3, #20
   1ed20:	d129      	bne.n	1ed76 <bt_gatt_unsubscribe+0x106>
Z_GENLIST_REMOVE(slist, snode)
   1ed22:	6958      	ldr	r0, [r3, #20]
   1ed24:	f1b8 0f00 	cmp.w	r8, #0
   1ed28:	d11d      	bne.n	1ed66 <bt_gatt_unsubscribe+0xf6>
   1ed2a:	68f2      	ldr	r2, [r6, #12]
	list->head = node;
   1ed2c:	60b0      	str	r0, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   1ed2e:	4291      	cmp	r1, r2
   1ed30:	d100      	bne.n	1ed34 <bt_gatt_unsubscribe+0xc4>
	list->tail = node;
   1ed32:	60f0      	str	r0, [r6, #12]
	parent->next = child;
   1ed34:	f8c3 b014 	str.w	fp, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ed38:	f3bf 8f5b 	dmb	ish
   1ed3c:	692b      	ldr	r3, [r5, #16]
   1ed3e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1ed42:	f3c3 0a80 	ubfx	sl, r3, #2, #1
			if (atomic_test_bit(params->flags,
   1ed46:	075b      	lsls	r3, r3, #29
   1ed48:	d51d      	bpl.n	1ed86 <bt_gatt_unsubscribe+0x116>
	bt_att_req_cancel(conn, params);
   1ed4a:	4629      	mov	r1, r5
   1ed4c:	4638      	mov	r0, r7
   1ed4e:	f7fe f905 	bl	1cf5c <bt_att_req_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1ed52:	b1dc      	cbz	r4, 1ed8c <bt_gatt_unsubscribe+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ed54:	f114 0214 	adds.w	r2, r4, #20
   1ed58:	d002      	beq.n	1ed60 <bt_gatt_unsubscribe+0xf0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ed5a:	6962      	ldr	r2, [r4, #20]
   1ed5c:	b102      	cbz	r2, 1ed60 <bt_gatt_unsubscribe+0xf0>
   1ed5e:	3a14      	subs	r2, #20
   1ed60:	4623      	mov	r3, r4
   1ed62:	4614      	mov	r4, r2
   1ed64:	e7c1      	b.n	1ecea <bt_gatt_unsubscribe+0x7a>
	parent->next = child;
   1ed66:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   1ed6a:	68f2      	ldr	r2, [r6, #12]
   1ed6c:	4291      	cmp	r1, r2
	list->tail = node;
   1ed6e:	bf08      	it	eq
   1ed70:	f8c6 800c 	streq.w	r8, [r6, #12]
}
   1ed74:	e7de      	b.n	1ed34 <bt_gatt_unsubscribe+0xc4>
		if (tmp->value_handle == params->value_handle) {
   1ed76:	891a      	ldrh	r2, [r3, #8]
   1ed78:	892b      	ldrh	r3, [r5, #8]
   1ed7a:	4688      	mov	r8, r1
   1ed7c:	429a      	cmp	r2, r3
   1ed7e:	bf08      	it	eq
   1ed80:	f04f 0901 	moveq.w	r9, #1
   1ed84:	e7e5      	b.n	1ed52 <bt_gatt_unsubscribe+0xe2>
			found = true;
   1ed86:	f04f 0a01 	mov.w	sl, #1
   1ed8a:	e7e2      	b.n	1ed52 <bt_gatt_unsubscribe+0xe2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1ed8c:	4622      	mov	r2, r4
   1ed8e:	e7e7      	b.n	1ed60 <bt_gatt_unsubscribe+0xf0>
	params->value = 0x0000;
   1ed90:	f8a5 900c 	strh.w	r9, [r5, #12]
	return gatt_write_ccc(conn, params);
   1ed94:	4629      	mov	r1, r5
   1ed96:	4638      	mov	r0, r7
}
   1ed98:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   1ed9c:	f7fe bac2 	b.w	1d324 <gatt_write_ccc>
		return -ENOTCONN;
   1eda0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1eda4:	e792      	b.n	1eccc <bt_gatt_unsubscribe+0x5c>
   1eda6:	bf00      	nop
   1eda8:	00036585 	.word	0x00036585
   1edac:	000358d0 	.word	0x000358d0
   1edb0:	00032486 	.word	0x00032486
   1edb4:	00035a07 	.word	0x00035a07
   1edb8:	00035a00 	.word	0x00035a00

0001edbc <bt_gatt_mult_notification>:
{
   1edbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1edc0:	b087      	sub	sp, #28
   1edc2:	4682      	mov	sl, r0
   1edc4:	460c      	mov	r4, r1
   1edc6:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
   1edc8:	f7fe f926 	bl	1d018 <gatt_sub_find>
	if (!sub) {
   1edcc:	4607      	mov	r7, r0
   1edce:	b310      	cbz	r0, 1ee16 <bt_gatt_mult_notification+0x5a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1edd0:	4632      	mov	r2, r6
   1edd2:	4621      	mov	r1, r4
   1edd4:	a803      	add	r0, sp, #12
   1edd6:	f010 fe2e 	bl	2fa36 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1edda:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1edde:	2b04      	cmp	r3, #4
   1ede0:	d919      	bls.n	1ee16 <bt_gatt_mult_notification+0x5a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1ede2:	2104      	movs	r1, #4
   1ede4:	a803      	add	r0, sp, #12
   1ede6:	f002 faa5 	bl	21334 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1edea:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
   1edee:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
   1edf2:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1edf4:	4605      	mov	r5, r0
		if (len > buf.len) {
   1edf6:	d211      	bcs.n	1ee1c <bt_gatt_mult_notification+0x60>
			BT_ERR("Invalid data len %u > %u", len, length);
   1edf8:	4b1e      	ldr	r3, [pc, #120]	; (1ee74 <bt_gatt_mult_notification+0xb8>)
   1edfa:	681a      	ldr	r2, [r3, #0]
   1edfc:	0752      	lsls	r2, r2, #29
   1edfe:	d00a      	beq.n	1ee16 <bt_gatt_mult_notification+0x5a>
   1ee00:	4a1d      	ldr	r2, [pc, #116]	; (1ee78 <bt_gatt_mult_notification+0xbc>)
   1ee02:	481e      	ldr	r0, [pc, #120]	; (1ee7c <bt_gatt_mult_notification+0xc0>)
   1ee04:	1a9b      	subs	r3, r3, r2
   1ee06:	089b      	lsrs	r3, r3, #2
   1ee08:	019b      	lsls	r3, r3, #6
   1ee0a:	f043 0301 	orr.w	r3, r3, #1
   1ee0e:	4632      	mov	r2, r6
   1ee10:	4641      	mov	r1, r8
   1ee12:	f00d ff85 	bl	2cd20 <log_2>
}
   1ee16:	b007      	add	sp, #28
   1ee18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1ee1c:	68bb      	ldr	r3, [r7, #8]
   1ee1e:	b31b      	cbz	r3, 1ee68 <bt_gatt_mult_notification+0xac>
   1ee20:	f1b3 0914 	subs.w	r9, r3, #20
   1ee24:	d020      	beq.n	1ee68 <bt_gatt_mult_notification+0xac>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ee26:	681c      	ldr	r4, [r3, #0]
   1ee28:	b104      	cbz	r4, 1ee2c <bt_gatt_mult_notification+0x70>
   1ee2a:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   1ee2c:	462b      	mov	r3, r5
   1ee2e:	f833 bb04 	ldrh.w	fp, [r3], #4
   1ee32:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
   1ee34:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1ee38:	455b      	cmp	r3, fp
   1ee3a:	d10b      	bne.n	1ee54 <bt_gatt_mult_notification+0x98>
			if (params->notify(conn, params, nfy->value, len) ==
   1ee3c:	9a01      	ldr	r2, [sp, #4]
   1ee3e:	f8d9 5000 	ldr.w	r5, [r9]
   1ee42:	4643      	mov	r3, r8
   1ee44:	4649      	mov	r1, r9
   1ee46:	4650      	mov	r0, sl
   1ee48:	47a8      	blx	r5
   1ee4a:	b918      	cbnz	r0, 1ee54 <bt_gatt_mult_notification+0x98>
				bt_gatt_unsubscribe(conn, params);
   1ee4c:	4649      	mov	r1, r9
   1ee4e:	4650      	mov	r0, sl
   1ee50:	f7ff ff0e 	bl	1ec70 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1ee54:	b144      	cbz	r4, 1ee68 <bt_gatt_mult_notification+0xac>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ee56:	f114 0314 	adds.w	r3, r4, #20
   1ee5a:	d002      	beq.n	1ee62 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ee5c:	6963      	ldr	r3, [r4, #20]
   1ee5e:	b103      	cbz	r3, 1ee62 <bt_gatt_mult_notification+0xa6>
   1ee60:	3b14      	subs	r3, #20
{
   1ee62:	46a1      	mov	r9, r4
   1ee64:	461c      	mov	r4, r3
   1ee66:	e7e5      	b.n	1ee34 <bt_gatt_mult_notification+0x78>
		net_buf_simple_pull_mem(&buf, len);
   1ee68:	4641      	mov	r1, r8
   1ee6a:	a803      	add	r0, sp, #12
   1ee6c:	f002 fa62 	bl	21334 <net_buf_simple_pull_mem>
   1ee70:	e7b3      	b.n	1edda <bt_gatt_mult_notification+0x1e>
   1ee72:	bf00      	nop
   1ee74:	200007b4 	.word	0x200007b4
   1ee78:	200007a8 	.word	0x200007a8
   1ee7c:	00035ca0 	.word	0x00035ca0

0001ee80 <bt_gatt_connected>:
{
   1ee80:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ee82:	4a17      	ldr	r2, [pc, #92]	; (1eee0 <bt_gatt_connected+0x60>)
	data.conn = conn;
   1ee84:	9000      	str	r0, [sp, #0]
{
   1ee86:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ee88:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1ee8a:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ee8c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1ee90:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1ee94:	f010 fc6c 	bl	2f770 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1ee98:	4628      	mov	r0, r5
   1ee9a:	f7fe f8bd 	bl	1d018 <gatt_sub_find>
	if (!sub) {
   1ee9e:	b128      	cbz	r0, 1eeac <bt_gatt_connected+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1eea0:	6884      	ldr	r4, [r0, #8]
   1eea2:	b11c      	cbz	r4, 1eeac <bt_gatt_connected+0x2c>
   1eea4:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1eea6:	f105 0690 	add.w	r6, r5, #144	; 0x90
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1eeaa:	b90c      	cbnz	r4, 1eeb0 <bt_gatt_connected+0x30>
}
   1eeac:	b002      	add	sp, #8
   1eeae:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1eeb0:	7a28      	ldrb	r0, [r5, #8]
   1eeb2:	4631      	mov	r1, r6
   1eeb4:	f00f fb25 	bl	2e502 <bt_addr_le_is_bonded>
   1eeb8:	b150      	cbz	r0, 1eed0 <bt_gatt_connected+0x50>
   1eeba:	f3bf 8f5b 	dmb	ish
   1eebe:	6923      	ldr	r3, [r4, #16]
   1eec0:	f3bf 8f5b 	dmb	ish
   1eec4:	079b      	lsls	r3, r3, #30
   1eec6:	d403      	bmi.n	1eed0 <bt_gatt_connected+0x50>
			gatt_write_ccc(conn, params);
   1eec8:	4621      	mov	r1, r4
   1eeca:	4628      	mov	r0, r5
   1eecc:	f7fe fa2a 	bl	1d324 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1eed0:	f114 0f14 	cmn.w	r4, #20
   1eed4:	d0ea      	beq.n	1eeac <bt_gatt_connected+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1eed6:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1eed8:	2c00      	cmp	r4, #0
   1eeda:	d0e7      	beq.n	1eeac <bt_gatt_connected+0x2c>
   1eedc:	3c14      	subs	r4, #20
   1eede:	e7e4      	b.n	1eeaa <bt_gatt_connected+0x2a>
   1eee0:	0001db7d 	.word	0x0001db7d

0001eee4 <bt_gatt_att_max_mtu_changed>:
{
   1eee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1eee6:	4b09      	ldr	r3, [pc, #36]	; (1ef0c <bt_gatt_att_max_mtu_changed+0x28>)
   1eee8:	681c      	ldr	r4, [r3, #0]
{
   1eeea:	4605      	mov	r5, r0
   1eeec:	460e      	mov	r6, r1
   1eeee:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1eef0:	b10c      	cbz	r4, 1eef6 <bt_gatt_att_max_mtu_changed+0x12>
   1eef2:	3c04      	subs	r4, #4
   1eef4:	b904      	cbnz	r4, 1eef8 <bt_gatt_att_max_mtu_changed+0x14>
}
   1eef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   1eef8:	6823      	ldr	r3, [r4, #0]
   1eefa:	b11b      	cbz	r3, 1ef04 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   1eefc:	463a      	mov	r2, r7
   1eefe:	4631      	mov	r1, r6
   1ef00:	4628      	mov	r0, r5
   1ef02:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ef04:	1d23      	adds	r3, r4, #4
   1ef06:	d0f6      	beq.n	1eef6 <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ef08:	6864      	ldr	r4, [r4, #4]
   1ef0a:	e7f1      	b.n	1eef0 <bt_gatt_att_max_mtu_changed+0xc>
   1ef0c:	20002d38 	.word	0x20002d38

0001ef10 <db_hash_read>:
{
   1ef10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1ef14:	4910      	ldr	r1, [pc, #64]	; (1ef58 <db_hash_read+0x48>)
{
   1ef16:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   1ef1a:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1ef1c:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1ef20:	461d      	mov	r5, r3
   1ef22:	4614      	mov	r4, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1ef24:	f007 fcc8 	bl	268b8 <k_work_cancel_delayable_sync>
   1ef28:	f3bf 8f5b 	dmb	ish
   1ef2c:	4b0b      	ldr	r3, [pc, #44]	; (1ef5c <db_hash_read+0x4c>)
   1ef2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1ef30:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1ef34:	075b      	lsls	r3, r3, #29
   1ef36:	d401      	bmi.n	1ef3c <db_hash_read+0x2c>
		db_hash_gen(true);
   1ef38:	f7fe fb84 	bl	1d644 <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
   1ef3c:	2101      	movs	r1, #1
   1ef3e:	4630      	mov	r0, r6
   1ef40:	f010 fcdb 	bl	2f8fa <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1ef44:	2310      	movs	r3, #16
   1ef46:	9306      	str	r3, [sp, #24]
   1ef48:	463a      	mov	r2, r7
   1ef4a:	4629      	mov	r1, r5
   1ef4c:	4620      	mov	r0, r4
   1ef4e:	4b04      	ldr	r3, [pc, #16]	; (1ef60 <db_hash_read+0x50>)
}
   1ef50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1ef54:	f010 ba1a 	b.w	2f38c <bt_gatt_attr_read.constprop.0>
   1ef58:	20001d20 	.word	0x20001d20
   1ef5c:	20001d48 	.word	0x20001d48
   1ef60:	20001ce0 	.word	0x20001ce0

0001ef64 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1ef64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1ef66:	4a25      	ldr	r2, [pc, #148]	; (1effc <bt_gatt_clear+0x98>)
	struct addr_with_id addr_with_id = {
   1ef68:	9100      	str	r1, [sp, #0]
{
   1ef6a:	4604      	mov	r4, r0
   1ef6c:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1ef6e:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1ef72:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1ef76:	2001      	movs	r0, #1
   1ef78:	466b      	mov	r3, sp
   1ef7a:	f010 fbf9 	bl	2f770 <bt_gatt_foreach_attr>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1ef7e:	4629      	mov	r1, r5
   1ef80:	4620      	mov	r0, r4
   1ef82:	f7fe f839 	bl	1cff8 <find_sc_cfg>
	if (!cfg) {
   1ef86:	b108      	cbz	r0, 1ef8c <bt_gatt_clear+0x28>
	clear_sc_cfg(cfg);
   1ef88:	f010 f9da 	bl	2f340 <clear_sc_cfg>
			if (id == cf_cfg[i].id &&
   1ef8c:	4e1c      	ldr	r6, [pc, #112]	; (1f000 <bt_gatt_clear+0x9c>)
   1ef8e:	7833      	ldrb	r3, [r6, #0]
   1ef90:	42a3      	cmp	r3, r4
   1ef92:	d006      	beq.n	1efa2 <bt_gatt_clear+0x3e>
		if (id == sub->id &&
   1ef94:	4e1b      	ldr	r6, [pc, #108]	; (1f004 <bt_gatt_clear+0xa0>)
   1ef96:	7833      	ldrb	r3, [r6, #0]
   1ef98:	42a3      	cmp	r3, r4
   1ef9a:	d00c      	beq.n	1efb6 <bt_gatt_clear+0x52>
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1ef9c:	2000      	movs	r0, #0
   1ef9e:	b002      	add	sp, #8
   1efa0:	bd70      	pop	{r4, r5, r6, pc}
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1efa2:	1c71      	adds	r1, r6, #1
   1efa4:	4628      	mov	r0, r5
   1efa6:	f010 f8bd 	bl	2f124 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   1efaa:	2800      	cmp	r0, #0
   1efac:	d1f2      	bne.n	1ef94 <bt_gatt_clear+0x30>
		clear_cf_cfg(cfg);
   1efae:	4630      	mov	r0, r6
   1efb0:	f010 fa94 	bl	2f4dc <clear_cf_cfg>
   1efb4:	e7ee      	b.n	1ef94 <bt_gatt_clear+0x30>
		    !bt_addr_le_cmp(addr, &sub->peer)) {
   1efb6:	1c71      	adds	r1, r6, #1
   1efb8:	4628      	mov	r0, r5
   1efba:	f010 f8b3 	bl	2f124 <bt_addr_le_cmp>
		if (id == sub->id &&
   1efbe:	2800      	cmp	r0, #0
   1efc0:	d1ec      	bne.n	1ef9c <bt_gatt_clear+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1efc2:	68b2      	ldr	r2, [r6, #8]
   1efc4:	2a00      	cmp	r2, #0
   1efc6:	d0e9      	beq.n	1ef9c <bt_gatt_clear+0x38>
   1efc8:	f1b2 0314 	subs.w	r3, r2, #20
   1efcc:	d0e6      	beq.n	1ef9c <bt_gatt_clear+0x38>
   1efce:	6814      	ldr	r4, [r2, #0]
   1efd0:	b104      	cbz	r4, 1efd4 <bt_gatt_clear+0x70>
   1efd2:	3c14      	subs	r4, #20
		gatt_sub_remove(NULL, sub, prev, params);
   1efd4:	4e0b      	ldr	r6, [pc, #44]	; (1f004 <bt_gatt_clear+0xa0>)
		params->value = 0U;
   1efd6:	2500      	movs	r5, #0
		gatt_sub_remove(NULL, sub, prev, params);
   1efd8:	2200      	movs	r2, #0
		params->value = 0U;
   1efda:	819d      	strh	r5, [r3, #12]
		gatt_sub_remove(NULL, sub, prev, params);
   1efdc:	4631      	mov	r1, r6
   1efde:	4610      	mov	r0, r2
   1efe0:	f010 faf0 	bl	2f5c4 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1efe4:	2c00      	cmp	r4, #0
   1efe6:	d0d9      	beq.n	1ef9c <bt_gatt_clear+0x38>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1efe8:	f114 0214 	adds.w	r2, r4, #20
   1efec:	d002      	beq.n	1eff4 <bt_gatt_clear+0x90>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1efee:	6962      	ldr	r2, [r4, #20]
   1eff0:	b102      	cbz	r2, 1eff4 <bt_gatt_clear+0x90>
   1eff2:	3a14      	subs	r2, #20
{
   1eff4:	4623      	mov	r3, r4
   1eff6:	4614      	mov	r4, r2
   1eff8:	e7ee      	b.n	1efd8 <bt_gatt_clear+0x74>
   1effa:	bf00      	nop
   1effc:	0001d1e9 	.word	0x0001d1e9
   1f000:	20002d40 	.word	0x20002d40
   1f004:	20002d70 	.word	0x20002d70

0001f008 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1f008:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1f00c:	4a33      	ldr	r2, [pc, #204]	; (1f0dc <bt_gatt_disconnected+0xd4>)
   1f00e:	4603      	mov	r3, r0
{
   1f010:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1f012:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1f016:	2001      	movs	r0, #1
   1f018:	f010 fbaa 	bl	2f770 <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1f01c:	4620      	mov	r0, r4
   1f01e:	f7fd fffb 	bl	1d018 <gatt_sub_find>
	if (!sub) {
   1f022:	4606      	mov	r6, r0
   1f024:	b3a8      	cbz	r0, 1f092 <bt_gatt_disconnected+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1f026:	6883      	ldr	r3, [r0, #8]
   1f028:	b39b      	cbz	r3, 1f092 <bt_gatt_disconnected+0x8a>
   1f02a:	f1b3 0714 	subs.w	r7, r3, #20
   1f02e:	d030      	beq.n	1f092 <bt_gatt_disconnected+0x8a>
   1f030:	681d      	ldr	r5, [r3, #0]
   1f032:	b105      	cbz	r5, 1f036 <bt_gatt_disconnected+0x2e>
   1f034:	3d14      	subs	r5, #20
{
   1f036:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1f03a:	f104 0890 	add.w	r8, r4, #144	; 0x90
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1f03e:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
   1f042:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1f044:	7a20      	ldrb	r0, [r4, #8]
   1f046:	4641      	mov	r1, r8
   1f048:	f00f fa5b 	bl	2e502 <bt_addr_le_is_bonded>
   1f04c:	b988      	cbnz	r0, 1f072 <bt_gatt_disconnected+0x6a>
			params->value = 0U;
   1f04e:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1f052:	463b      	mov	r3, r7
   1f054:	465a      	mov	r2, fp
   1f056:	4631      	mov	r1, r6
   1f058:	4620      	mov	r0, r4
   1f05a:	f010 fab3 	bl	2f5c4 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1f05e:	b1c5      	cbz	r5, 1f092 <bt_gatt_disconnected+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1f060:	f115 0114 	adds.w	r1, r5, #20
   1f064:	d002      	beq.n	1f06c <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1f066:	6969      	ldr	r1, [r5, #20]
   1f068:	b101      	cbz	r1, 1f06c <bt_gatt_disconnected+0x64>
   1f06a:	3914      	subs	r1, #20
{
   1f06c:	462f      	mov	r7, r5
   1f06e:	460d      	mov	r5, r1
   1f070:	e7e8      	b.n	1f044 <bt_gatt_disconnected+0x3c>
   1f072:	f3bf 8f5b 	dmb	ish
   1f076:	693b      	ldr	r3, [r7, #16]
   1f078:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1f07c:	07db      	lsls	r3, r3, #31
   1f07e:	d4e6      	bmi.n	1f04e <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1f080:	7873      	ldrb	r3, [r6, #1]
   1f082:	b11b      	cbz	r3, 1f08c <bt_gatt_disconnected+0x84>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1f084:	4641      	mov	r1, r8
   1f086:	4648      	mov	r0, r9
   1f088:	f010 f953 	bl	2f332 <bt_addr_le_copy>
			prev = &params->node;
   1f08c:	f107 0b14 	add.w	fp, r7, #20
   1f090:	e7e5      	b.n	1f05e <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
   1f092:	4620      	mov	r0, r4
   1f094:	f7fd ff92 	bl	1cfbc <find_cf_cfg>
	if (!cfg) {
   1f098:	4605      	mov	r5, r0
   1f09a:	b1e0      	cbz	r0, 1f0d6 <bt_gatt_disconnected+0xce>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1f09c:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1f0a0:	7a20      	ldrb	r0, [r4, #8]
   1f0a2:	4631      	mov	r1, r6
   1f0a4:	f00f fa2d 	bl	2e502 <bt_addr_le_is_bonded>
   1f0a8:	b920      	cbnz	r0, 1f0b4 <bt_gatt_disconnected+0xac>
		clear_cf_cfg(cfg);
   1f0aa:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1f0ac:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   1f0b0:	f010 ba14 	b.w	2f4dc <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1f0b4:	1c68      	adds	r0, r5, #1
   1f0b6:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1f0b8:	350c      	adds	r5, #12
   1f0ba:	f010 f93a 	bl	2f332 <bt_addr_le_copy>
   1f0be:	f3bf 8f5b 	dmb	ish
   1f0c2:	e855 3f00 	ldrex	r3, [r5]
   1f0c6:	f023 0302 	bic.w	r3, r3, #2
   1f0ca:	e845 3200 	strex	r2, r3, [r5]
   1f0ce:	2a00      	cmp	r2, #0
   1f0d0:	d1f7      	bne.n	1f0c2 <bt_gatt_disconnected+0xba>
   1f0d2:	f3bf 8f5b 	dmb	ish
}
   1f0d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f0da:	bf00      	nop
   1f0dc:	0001d349 	.word	0x0001d349

0001f0e0 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1f0e0:	4a0c      	ldr	r2, [pc, #48]	; (1f114 <bt_smp_accept+0x34>)
{
   1f0e2:	b508      	push	{r3, lr}
   1f0e4:	4603      	mov	r3, r0
		if (smp->chan.conn) {
   1f0e6:	6810      	ldr	r0, [r2, #0]
   1f0e8:	b918      	cbnz	r0, 1f0f2 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   1f0ea:	4b0b      	ldr	r3, [pc, #44]	; (1f118 <bt_smp_accept+0x38>)
   1f0ec:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
   1f0ee:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1f0f0:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   1f0f2:	4a0a      	ldr	r2, [pc, #40]	; (1f11c <bt_smp_accept+0x3c>)
   1f0f4:	6811      	ldr	r1, [r2, #0]
   1f0f6:	0749      	lsls	r1, r1, #29
   1f0f8:	d009      	beq.n	1f10e <bt_smp_accept+0x2e>
   1f0fa:	4909      	ldr	r1, [pc, #36]	; (1f120 <bt_smp_accept+0x40>)
   1f0fc:	4809      	ldr	r0, [pc, #36]	; (1f124 <bt_smp_accept+0x44>)
   1f0fe:	1a52      	subs	r2, r2, r1
   1f100:	0892      	lsrs	r2, r2, #2
   1f102:	0192      	lsls	r2, r2, #6
   1f104:	f042 0201 	orr.w	r2, r2, #1
   1f108:	4619      	mov	r1, r3
   1f10a:	f00d fdf5 	bl	2ccf8 <log_1>
   1f10e:	f06f 000b 	mvn.w	r0, #11
   1f112:	e7ed      	b.n	1f0f0 <bt_smp_accept+0x10>
   1f114:	20001da0 	.word	0x20001da0
   1f118:	00031994 	.word	0x00031994
   1f11c:	200007cc 	.word	0x200007cc
   1f120:	200007a8 	.word	0x200007a8
   1f124:	00035cc8 	.word	0x00035cc8

0001f128 <bt_addr_le_to_str>:
{
   1f128:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (addr->type) {
   1f12a:	7803      	ldrb	r3, [r0, #0]
{
   1f12c:	b08b      	sub	sp, #44	; 0x2c
   1f12e:	4604      	mov	r4, r0
   1f130:	460e      	mov	r6, r1
   1f132:	4617      	mov	r7, r2
   1f134:	ad07      	add	r5, sp, #28
   1f136:	2b03      	cmp	r3, #3
   1f138:	d820      	bhi.n	1f17c <bt_addr_le_to_str+0x54>
   1f13a:	e8df f003 	tbb	[pc, r3]
   1f13e:	1902      	.short	0x1902
   1f140:	1d1b      	.short	0x1d1b
		strcpy(type, "public");
   1f142:	4911      	ldr	r1, [pc, #68]	; (1f188 <bt_addr_le_to_str+0x60>)
		strcpy(type, "random");
   1f144:	4628      	mov	r0, r5
   1f146:	f011 fa85 	bl	30654 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1f14a:	7863      	ldrb	r3, [r4, #1]
   1f14c:	9304      	str	r3, [sp, #16]
   1f14e:	78a3      	ldrb	r3, [r4, #2]
   1f150:	9303      	str	r3, [sp, #12]
   1f152:	78e3      	ldrb	r3, [r4, #3]
   1f154:	9302      	str	r3, [sp, #8]
   1f156:	7923      	ldrb	r3, [r4, #4]
   1f158:	9301      	str	r3, [sp, #4]
   1f15a:	7963      	ldrb	r3, [r4, #5]
   1f15c:	9300      	str	r3, [sp, #0]
   1f15e:	4a0b      	ldr	r2, [pc, #44]	; (1f18c <bt_addr_le_to_str+0x64>)
   1f160:	79a3      	ldrb	r3, [r4, #6]
   1f162:	9505      	str	r5, [sp, #20]
   1f164:	4639      	mov	r1, r7
   1f166:	4630      	mov	r0, r6
   1f168:	f00d fa24 	bl	2c5b4 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   1f16c:	b00b      	add	sp, #44	; 0x2c
   1f16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   1f170:	4907      	ldr	r1, [pc, #28]	; (1f190 <bt_addr_le_to_str+0x68>)
   1f172:	e7e7      	b.n	1f144 <bt_addr_le_to_str+0x1c>
		strcpy(type, "public-id");
   1f174:	4907      	ldr	r1, [pc, #28]	; (1f194 <bt_addr_le_to_str+0x6c>)
   1f176:	e7e5      	b.n	1f144 <bt_addr_le_to_str+0x1c>
		strcpy(type, "random-id");
   1f178:	4907      	ldr	r1, [pc, #28]	; (1f198 <bt_addr_le_to_str+0x70>)
   1f17a:	e7e3      	b.n	1f144 <bt_addr_le_to_str+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1f17c:	4a07      	ldr	r2, [pc, #28]	; (1f19c <bt_addr_le_to_str+0x74>)
   1f17e:	210a      	movs	r1, #10
   1f180:	4628      	mov	r0, r5
   1f182:	f00d fa17 	bl	2c5b4 <snprintk>
		break;
   1f186:	e7e0      	b.n	1f14a <bt_addr_le_to_str+0x22>
   1f188:	0003492b 	.word	0x0003492b
   1f18c:	0003494d 	.word	0x0003494d
   1f190:	00034932 	.word	0x00034932
   1f194:	00034939 	.word	0x00034939
   1f198:	00034943 	.word	0x00034943
   1f19c:	00035810 	.word	0x00035810

0001f1a0 <print_le_addr>:
	default: return "Invalid";
	}
}

static void print_le_addr(const char *desc, const bt_addr_le_t *addr)
{
   1f1a0:	b570      	push	{r4, r5, r6, lr}
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1f1a2:	780b      	ldrb	r3, [r1, #0]
   1f1a4:	4605      	mov	r5, r0
   1f1a6:	b08a      	sub	sp, #40	; 0x28
   1f1a8:	4608      	mov	r0, r1
   1f1aa:	b1db      	cbz	r3, 1f1e4 <print_le_addr+0x44>
	return BT_ADDR_IS_STATIC(&addr->a);
   1f1ac:	798c      	ldrb	r4, [r1, #6]
   1f1ae:	f004 02c0 	and.w	r2, r4, #192	; 0xc0
	char addr_str[BT_ADDR_LE_STR_LEN];

	const char *addr_desc = bt_addr_le_is_identity(addr) ? "identity" :
   1f1b2:	2ac0      	cmp	r2, #192	; 0xc0
   1f1b4:	d016      	beq.n	1f1e4 <print_le_addr+0x44>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1f1b6:	2b01      	cmp	r3, #1
   1f1b8:	4c0b      	ldr	r4, [pc, #44]	; (1f1e8 <print_le_addr+0x48>)
   1f1ba:	d103      	bne.n	1f1c4 <print_le_addr+0x24>
   1f1bc:	4b0b      	ldr	r3, [pc, #44]	; (1f1ec <print_le_addr+0x4c>)
   1f1be:	2a40      	cmp	r2, #64	; 0x40
   1f1c0:	bf08      	it	eq
   1f1c2:	461c      	moveq	r4, r3
				bt_addr_le_is_rpa(addr) ? "resolvable" :
				"non-resolvable";

	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   1f1c4:	ae02      	add	r6, sp, #8
   1f1c6:	4631      	mov	r1, r6
   1f1c8:	221e      	movs	r2, #30
   1f1ca:	f7ff ffad 	bl	1f128 <bt_addr_le_to_str>

	shell_print(ctx_shell, "%s address: %s (%s)", desc, addr_str,
   1f1ce:	e9cd 6400 	strd	r6, r4, [sp]
   1f1d2:	4807      	ldr	r0, [pc, #28]	; (1f1f0 <print_le_addr+0x50>)
   1f1d4:	4a07      	ldr	r2, [pc, #28]	; (1f1f4 <print_le_addr+0x54>)
   1f1d6:	6800      	ldr	r0, [r0, #0]
   1f1d8:	462b      	mov	r3, r5
   1f1da:	2108      	movs	r1, #8
   1f1dc:	f00e f9ce 	bl	2d57c <shell_fprintf>
		    addr_desc);
}
   1f1e0:	b00a      	add	sp, #40	; 0x28
   1f1e2:	bd70      	pop	{r4, r5, r6, pc}
	const char *addr_desc = bt_addr_le_is_identity(addr) ? "identity" :
   1f1e4:	4c04      	ldr	r4, [pc, #16]	; (1f1f8 <print_le_addr+0x58>)
   1f1e6:	e7ed      	b.n	1f1c4 <print_le_addr+0x24>
   1f1e8:	00035cf4 	.word	0x00035cf4
   1f1ec:	00035cf8 	.word	0x00035cf8
   1f1f0:	20002d80 	.word	0x20002d80
   1f1f4:	00035d0c 	.word	0x00035d0c
   1f1f8:	00035d03 	.word	0x00035d03

0001f1fc <le_param_updated>:
{
   1f1fc:	b507      	push	{r0, r1, r2, lr}
	shell_print(ctx_shell, "LE conn param updated: int 0x%04x lat %d "
   1f1fe:	e9cd 2300 	strd	r2, r3, [sp]
   1f202:	4805      	ldr	r0, [pc, #20]	; (1f218 <le_param_updated+0x1c>)
   1f204:	4a05      	ldr	r2, [pc, #20]	; (1f21c <le_param_updated+0x20>)
   1f206:	6800      	ldr	r0, [r0, #0]
   1f208:	460b      	mov	r3, r1
   1f20a:	2108      	movs	r1, #8
   1f20c:	f00e f9b6 	bl	2d57c <shell_fprintf>
}
   1f210:	b003      	add	sp, #12
   1f212:	f85d fb04 	ldr.w	pc, [sp], #4
   1f216:	bf00      	nop
   1f218:	20002d80 	.word	0x20002d80
   1f21c:	00035d21 	.word	0x00035d21

0001f220 <le_param_req>:
{
   1f220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	shell_print(ctx_shell, "LE conn  param req: int (0x%04x, 0x%04x) lat %d"
   1f222:	88cb      	ldrh	r3, [r1, #6]
   1f224:	9302      	str	r3, [sp, #8]
   1f226:	888b      	ldrh	r3, [r1, #4]
   1f228:	9301      	str	r3, [sp, #4]
   1f22a:	884b      	ldrh	r3, [r1, #2]
   1f22c:	4805      	ldr	r0, [pc, #20]	; (1f244 <le_param_req+0x24>)
   1f22e:	9300      	str	r3, [sp, #0]
   1f230:	880b      	ldrh	r3, [r1, #0]
   1f232:	4a05      	ldr	r2, [pc, #20]	; (1f248 <le_param_req+0x28>)
   1f234:	6800      	ldr	r0, [r0, #0]
   1f236:	2108      	movs	r1, #8
   1f238:	f00e f9a0 	bl	2d57c <shell_fprintf>
}
   1f23c:	2001      	movs	r0, #1
   1f23e:	b005      	add	sp, #20
   1f240:	f85d fb04 	ldr.w	pc, [sp], #4
   1f244:	20002d80 	.word	0x20002d80
   1f248:	00035d51 	.word	0x00035d51

0001f24c <scan_timeout>:
	shell_print(ctx_shell, "Scan timeout");
   1f24c:	4b02      	ldr	r3, [pc, #8]	; (1f258 <scan_timeout+0xc>)
   1f24e:	4a03      	ldr	r2, [pc, #12]	; (1f25c <scan_timeout+0x10>)
   1f250:	6818      	ldr	r0, [r3, #0]
   1f252:	2108      	movs	r1, #8
   1f254:	f00e b992 	b.w	2d57c <shell_fprintf>
   1f258:	20002d80 	.word	0x20002d80
   1f25c:	00035d88 	.word	0x00035d88

0001f260 <cmd_conn_update>:

	return err;
}

static int cmd_conn_update(const struct shell *sh, size_t argc, char *argv[])
{
   1f260:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_le_conn_param param;
	int err;

	if (default_conn == NULL) {
   1f262:	4e1f      	ldr	r6, [pc, #124]	; (1f2e0 <cmd_conn_update+0x80>)
   1f264:	6833      	ldr	r3, [r6, #0]
{
   1f266:	4605      	mov	r5, r0
   1f268:	4614      	mov	r4, r2
	if (default_conn == NULL) {
   1f26a:	b953      	cbnz	r3, 1f282 <cmd_conn_update+0x22>
		shell_error(sh,
   1f26c:	6883      	ldr	r3, [r0, #8]
   1f26e:	4a1d      	ldr	r2, [pc, #116]	; (1f2e4 <cmd_conn_update+0x84>)
   1f270:	689b      	ldr	r3, [r3, #8]
   1f272:	2101      	movs	r1, #1
   1f274:	f00e f982 	bl	2d57c <shell_fprintf>
				"%s: at least, one connection is required",
				sh->ctx->active_cmd.syntax);
		return -ENOEXEC;
   1f278:	f06f 0407 	mvn.w	r4, #7
	} else {
		shell_print(sh, "conn update initiated.");
	}

	return err;
}
   1f27c:	4620      	mov	r0, r4
   1f27e:	b002      	add	sp, #8
   1f280:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = strtoul(argv[1], NULL, 16);
   1f282:	6860      	ldr	r0, [r4, #4]
   1f284:	2210      	movs	r2, #16
   1f286:	2100      	movs	r1, #0
   1f288:	f00c fe98 	bl	2bfbc <strtoul>
	param.interval_max = strtoul(argv[2], NULL, 16);
   1f28c:	2210      	movs	r2, #16
	param.interval_min = strtoul(argv[1], NULL, 16);
   1f28e:	f8ad 0000 	strh.w	r0, [sp]
	param.interval_max = strtoul(argv[2], NULL, 16);
   1f292:	2100      	movs	r1, #0
   1f294:	68a0      	ldr	r0, [r4, #8]
   1f296:	f00c fe91 	bl	2bfbc <strtoul>
	param.latency = strtoul(argv[3], NULL, 16);
   1f29a:	2210      	movs	r2, #16
	param.interval_max = strtoul(argv[2], NULL, 16);
   1f29c:	f8ad 0002 	strh.w	r0, [sp, #2]
	param.latency = strtoul(argv[3], NULL, 16);
   1f2a0:	2100      	movs	r1, #0
   1f2a2:	68e0      	ldr	r0, [r4, #12]
   1f2a4:	f00c fe8a 	bl	2bfbc <strtoul>
	param.timeout = strtoul(argv[4], NULL, 16);
   1f2a8:	2210      	movs	r2, #16
	param.latency = strtoul(argv[3], NULL, 16);
   1f2aa:	f8ad 0004 	strh.w	r0, [sp, #4]
	param.timeout = strtoul(argv[4], NULL, 16);
   1f2ae:	2100      	movs	r1, #0
   1f2b0:	6920      	ldr	r0, [r4, #16]
   1f2b2:	f00c fe83 	bl	2bfbc <strtoul>
	err = bt_conn_le_param_update(default_conn, &param);
   1f2b6:	4669      	mov	r1, sp
	param.timeout = strtoul(argv[4], NULL, 16);
   1f2b8:	f8ad 0006 	strh.w	r0, [sp, #6]
	err = bt_conn_le_param_update(default_conn, &param);
   1f2bc:	6830      	ldr	r0, [r6, #0]
   1f2be:	f00f fa5f 	bl	2e780 <bt_conn_le_param_update>
	if (err) {
   1f2c2:	4604      	mov	r4, r0
   1f2c4:	b130      	cbz	r0, 1f2d4 <cmd_conn_update+0x74>
		shell_error(sh, "conn update failed (err %d).", err);
   1f2c6:	4603      	mov	r3, r0
   1f2c8:	4a07      	ldr	r2, [pc, #28]	; (1f2e8 <cmd_conn_update+0x88>)
   1f2ca:	2101      	movs	r1, #1
   1f2cc:	4628      	mov	r0, r5
   1f2ce:	f00e f955 	bl	2d57c <shell_fprintf>
   1f2d2:	e7d3      	b.n	1f27c <cmd_conn_update+0x1c>
		shell_print(sh, "conn update initiated.");
   1f2d4:	4a05      	ldr	r2, [pc, #20]	; (1f2ec <cmd_conn_update+0x8c>)
   1f2d6:	2108      	movs	r1, #8
   1f2d8:	4628      	mov	r0, r5
   1f2da:	f00e f94f 	bl	2d57c <shell_fprintf>
   1f2de:	e7cd      	b.n	1f27c <cmd_conn_update+0x1c>
   1f2e0:	20002d84 	.word	0x20002d84
   1f2e4:	00035d96 	.word	0x00035d96
   1f2e8:	00035dc0 	.word	0x00035dc0
   1f2ec:	00035dde 	.word	0x00035dde

0001f2f0 <cmd_info>:
{
   1f2f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (argc) {
   1f2f2:	2902      	cmp	r1, #2
{
   1f2f4:	b08d      	sub	sp, #52	; 0x34
   1f2f6:	4606      	mov	r6, r0
   1f2f8:	4613      	mov	r3, r2
	switch (argc) {
   1f2fa:	d012      	beq.n	1f322 <cmd_info+0x32>
   1f2fc:	2903      	cmp	r1, #3
   1f2fe:	d023      	beq.n	1f348 <cmd_info+0x58>
   1f300:	2901      	cmp	r1, #1
   1f302:	d106      	bne.n	1f312 <cmd_info+0x22>
		if (default_conn) {
   1f304:	4b47      	ldr	r3, [pc, #284]	; (1f424 <cmd_info+0x134>)
   1f306:	6818      	ldr	r0, [r3, #0]
   1f308:	b118      	cbz	r0, 1f312 <cmd_info+0x22>
			conn = bt_conn_ref(default_conn);
   1f30a:	f00f f970 	bl	2e5ee <bt_conn_ref>
		conn = bt_conn_lookup_addr_le(selected_id, &addr);
   1f30e:	4605      	mov	r5, r0
	if (!conn) {
   1f310:	bb30      	cbnz	r0, 1f360 <cmd_info+0x70>
		shell_error(sh, "Not connected");
   1f312:	4a45      	ldr	r2, [pc, #276]	; (1f428 <cmd_info+0x138>)
   1f314:	2101      	movs	r1, #1
   1f316:	4630      	mov	r0, r6
   1f318:	f00e f930 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   1f31c:	f06f 0407 	mvn.w	r4, #7
   1f320:	e00f      	b.n	1f342 <cmd_info+0x52>
		addr.type = BT_ADDR_LE_PUBLIC;
   1f322:	2200      	movs	r2, #0
		err = bt_addr_from_str(argv[1], &addr.a);
   1f324:	6858      	ldr	r0, [r3, #4]
		addr.type = BT_ADDR_LE_PUBLIC;
   1f326:	f88d 200c 	strb.w	r2, [sp, #12]
		err = bt_addr_from_str(argv[1], &addr.a);
   1f32a:	f10d 010d 	add.w	r1, sp, #13
   1f32e:	f00e ffbd 	bl	2e2ac <bt_addr_from_str>
		if (err) {
   1f332:	4604      	mov	r4, r0
   1f334:	b170      	cbz	r0, 1f354 <cmd_info+0x64>
			shell_error(sh, "Invalid peer address (err %d)",
   1f336:	4603      	mov	r3, r0
   1f338:	4a3c      	ldr	r2, [pc, #240]	; (1f42c <cmd_info+0x13c>)
   1f33a:	2101      	movs	r1, #1
   1f33c:	4630      	mov	r0, r6
   1f33e:	f00e f91d 	bl	2d57c <shell_fprintf>
}
   1f342:	4620      	mov	r0, r4
   1f344:	b00d      	add	sp, #52	; 0x34
   1f346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1f348:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   1f34c:	aa03      	add	r2, sp, #12
   1f34e:	f7f8 ff01 	bl	18154 <bt_addr_le_from_str>
   1f352:	e7ee      	b.n	1f332 <cmd_info+0x42>
		conn = bt_conn_lookup_addr_le(selected_id, &addr);
   1f354:	4b36      	ldr	r3, [pc, #216]	; (1f430 <cmd_info+0x140>)
   1f356:	a903      	add	r1, sp, #12
   1f358:	7818      	ldrb	r0, [r3, #0]
   1f35a:	f7fb ff4b 	bl	1b1f4 <bt_conn_lookup_addr_le>
   1f35e:	e7d6      	b.n	1f30e <cmd_info+0x1e>
	err = bt_conn_get_info(conn, &info);
   1f360:	a905      	add	r1, sp, #20
   1f362:	f7fb ffb1 	bl	1b2c8 <bt_conn_get_info>
	if (err) {
   1f366:	4e33      	ldr	r6, [pc, #204]	; (1f434 <cmd_info+0x144>)
   1f368:	4604      	mov	r4, r0
   1f36a:	b140      	cbz	r0, 1f37e <cmd_info+0x8e>
		shell_print(ctx_shell, "Failed to get info");
   1f36c:	4a32      	ldr	r2, [pc, #200]	; (1f438 <cmd_info+0x148>)
   1f36e:	6830      	ldr	r0, [r6, #0]
   1f370:	2108      	movs	r1, #8
   1f372:	f00e f903 	bl	2d57c <shell_fprintf>
	bt_conn_unref(conn);
   1f376:	4628      	mov	r0, r5
   1f378:	f7fb fcaa 	bl	1acd0 <bt_conn_unref>
	return err;
   1f37c:	e7e1      	b.n	1f342 <cmd_info+0x52>
	shell_print(ctx_shell, "Type: %s, Role: %s, Id: %u",
   1f37e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1f382:	f89d 1015 	ldrb.w	r1, [sp, #21]
   1f386:	6830      	ldr	r0, [r6, #0]
	switch (type) {
   1f388:	3b01      	subs	r3, #1
   1f38a:	b2db      	uxtb	r3, r3
   1f38c:	2b03      	cmp	r3, #3
   1f38e:	bf96      	itet	ls
   1f390:	4a2a      	ldrls	r2, [pc, #168]	; (1f43c <cmd_info+0x14c>)
	shell_print(ctx_shell, "Type: %s, Role: %s, Id: %u",
   1f392:	4b2b      	ldrhi	r3, [pc, #172]	; (1f440 <cmd_info+0x150>)
	switch (role) {
   1f394:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1f398:	2900      	cmp	r1, #0
   1f39a:	d041      	beq.n	1f420 <cmd_info+0x130>
   1f39c:	4a28      	ldr	r2, [pc, #160]	; (1f440 <cmd_info+0x150>)
   1f39e:	4f29      	ldr	r7, [pc, #164]	; (1f444 <cmd_info+0x154>)
   1f3a0:	2901      	cmp	r1, #1
   1f3a2:	bf08      	it	eq
   1f3a4:	463a      	moveq	r2, r7
	shell_print(ctx_shell, "Type: %s, Role: %s, Id: %u",
   1f3a6:	f89d 1016 	ldrb.w	r1, [sp, #22]
   1f3aa:	e9cd 2100 	strd	r2, r1, [sp]
   1f3ae:	4a26      	ldr	r2, [pc, #152]	; (1f448 <cmd_info+0x158>)
   1f3b0:	2108      	movs	r1, #8
   1f3b2:	f00e f8e3 	bl	2d57c <shell_fprintf>
	if (info.type == BT_CONN_TYPE_LE) {
   1f3b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1f3ba:	2b01      	cmp	r3, #1
   1f3bc:	d1db      	bne.n	1f376 <cmd_info+0x86>
		print_le_addr("Remote", info.le.dst);
   1f3be:	9907      	ldr	r1, [sp, #28]
   1f3c0:	4822      	ldr	r0, [pc, #136]	; (1f44c <cmd_info+0x15c>)
   1f3c2:	f7ff feed 	bl	1f1a0 <print_le_addr>
		print_le_addr("Local", info.le.src);
   1f3c6:	9906      	ldr	r1, [sp, #24]
   1f3c8:	4821      	ldr	r0, [pc, #132]	; (1f450 <cmd_info+0x160>)
   1f3ca:	f7ff fee9 	bl	1f1a0 <print_le_addr>
		print_le_addr("Remote on-air", info.le.remote);
   1f3ce:	9909      	ldr	r1, [sp, #36]	; 0x24
   1f3d0:	4820      	ldr	r0, [pc, #128]	; (1f454 <cmd_info+0x164>)
   1f3d2:	f7ff fee5 	bl	1f1a0 <print_le_addr>
		print_le_addr("Local on-air", info.le.local);
   1f3d6:	9908      	ldr	r1, [sp, #32]
   1f3d8:	481f      	ldr	r0, [pc, #124]	; (1f458 <cmd_info+0x168>)
   1f3da:	f7ff fee1 	bl	1f1a0 <print_le_addr>
		shell_print(ctx_shell, "Interval: 0x%04x (%u ms)",
   1f3de:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1f3e2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1f3e6:	1092      	asrs	r2, r2, #2
   1f3e8:	9200      	str	r2, [sp, #0]
   1f3ea:	6830      	ldr	r0, [r6, #0]
   1f3ec:	4a1b      	ldr	r2, [pc, #108]	; (1f45c <cmd_info+0x16c>)
   1f3ee:	2108      	movs	r1, #8
   1f3f0:	f00e f8c4 	bl	2d57c <shell_fprintf>
		shell_print(ctx_shell, "Latency: 0x%04x (%u ms)",
   1f3f4:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1f3f8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1f3fc:	1092      	asrs	r2, r2, #2
   1f3fe:	9200      	str	r2, [sp, #0]
   1f400:	6830      	ldr	r0, [r6, #0]
   1f402:	4a17      	ldr	r2, [pc, #92]	; (1f460 <cmd_info+0x170>)
   1f404:	2108      	movs	r1, #8
   1f406:	f00e f8b9 	bl	2d57c <shell_fprintf>
		shell_print(ctx_shell, "Supervision timeout: 0x%04x (%d ms)",
   1f40a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1f40e:	220a      	movs	r2, #10
   1f410:	435a      	muls	r2, r3
   1f412:	9200      	str	r2, [sp, #0]
   1f414:	6830      	ldr	r0, [r6, #0]
   1f416:	4a13      	ldr	r2, [pc, #76]	; (1f464 <cmd_info+0x174>)
   1f418:	2108      	movs	r1, #8
   1f41a:	f00e f8af 	bl	2d57c <shell_fprintf>
   1f41e:	e7aa      	b.n	1f376 <cmd_info+0x86>
	case BT_CONN_ROLE_CENTRAL: return "central";
   1f420:	4a11      	ldr	r2, [pc, #68]	; (1f468 <cmd_info+0x178>)
   1f422:	e7c0      	b.n	1f3a6 <cmd_info+0xb6>
   1f424:	20002d84 	.word	0x20002d84
   1f428:	00035e30 	.word	0x00035e30
   1f42c:	00035e11 	.word	0x00035e11
   1f430:	20003a4e 	.word	0x20003a4e
   1f434:	20002d80 	.word	0x20002d80
   1f438:	00035e3f 	.word	0x00035e3f
   1f43c:	000319cc 	.word	0x000319cc
   1f440:	00035df6 	.word	0x00035df6
   1f444:	00035e06 	.word	0x00035e06
   1f448:	00035e53 	.word	0x00035e53
   1f44c:	00035e6f 	.word	0x00035e6f
   1f450:	00035e76 	.word	0x00035e76
   1f454:	00035e7c 	.word	0x00035e7c
   1f458:	00035e8a 	.word	0x00035e8a
   1f45c:	00035e97 	.word	0x00035e97
   1f460:	00035eb1 	.word	0x00035eb1
   1f464:	00035eca 	.word	0x00035eca
   1f468:	00035dfe 	.word	0x00035dfe

0001f46c <cmd_disconnect>:
{
   1f46c:	4613      	mov	r3, r2
	if (default_conn && argc < 3) {
   1f46e:	4a1e      	ldr	r2, [pc, #120]	; (1f4e8 <cmd_disconnect+0x7c>)
   1f470:	6812      	ldr	r2, [r2, #0]
{
   1f472:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f474:	4606      	mov	r6, r0
	if (default_conn && argc < 3) {
   1f476:	b172      	cbz	r2, 1f496 <cmd_disconnect+0x2a>
   1f478:	2902      	cmp	r1, #2
   1f47a:	d814      	bhi.n	1f4a6 <cmd_disconnect+0x3a>
		conn = bt_conn_ref(default_conn);
   1f47c:	4610      	mov	r0, r2
   1f47e:	f00f f8b6 	bl	2e5ee <bt_conn_ref>
		conn = bt_conn_lookup_addr_le(selected_id, &addr);
   1f482:	4605      	mov	r5, r0
	if (!conn) {
   1f484:	bb18      	cbnz	r0, 1f4ce <cmd_disconnect+0x62>
		shell_error(sh, "Not connected");
   1f486:	4a19      	ldr	r2, [pc, #100]	; (1f4ec <cmd_disconnect+0x80>)
   1f488:	2101      	movs	r1, #1
   1f48a:	4630      	mov	r0, r6
   1f48c:	f00e f876 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   1f490:	f06f 0407 	mvn.w	r4, #7
   1f494:	e004      	b.n	1f4a0 <cmd_disconnect+0x34>
		if (argc < 3) {
   1f496:	2902      	cmp	r1, #2
   1f498:	d805      	bhi.n	1f4a6 <cmd_disconnect+0x3a>
			shell_help(sh);
   1f49a:	f00e f894 	bl	2d5c6 <shell_help>
			return SHELL_CMD_HELP_PRINTED;
   1f49e:	2401      	movs	r4, #1
}
   1f4a0:	4620      	mov	r0, r4
   1f4a2:	b002      	add	sp, #8
   1f4a4:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1f4a6:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   1f4aa:	466a      	mov	r2, sp
   1f4ac:	f7f8 fe52 	bl	18154 <bt_addr_le_from_str>
		if (err) {
   1f4b0:	4604      	mov	r4, r0
   1f4b2:	b130      	cbz	r0, 1f4c2 <cmd_disconnect+0x56>
			shell_error(sh, "Invalid peer address (err %d)",
   1f4b4:	4a0e      	ldr	r2, [pc, #56]	; (1f4f0 <cmd_disconnect+0x84>)
   1f4b6:	4603      	mov	r3, r0
		shell_error(sh, "Disconnection failed (err %d)", err);
   1f4b8:	2101      	movs	r1, #1
   1f4ba:	4630      	mov	r0, r6
   1f4bc:	f00e f85e 	bl	2d57c <shell_fprintf>
		return err;
   1f4c0:	e7ee      	b.n	1f4a0 <cmd_disconnect+0x34>
		conn = bt_conn_lookup_addr_le(selected_id, &addr);
   1f4c2:	4b0c      	ldr	r3, [pc, #48]	; (1f4f4 <cmd_disconnect+0x88>)
   1f4c4:	4669      	mov	r1, sp
   1f4c6:	7818      	ldrb	r0, [r3, #0]
   1f4c8:	f7fb fe94 	bl	1b1f4 <bt_conn_lookup_addr_le>
   1f4cc:	e7d9      	b.n	1f482 <cmd_disconnect+0x16>
	err = bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   1f4ce:	2113      	movs	r1, #19
   1f4d0:	f00f f8f5 	bl	2e6be <bt_conn_disconnect>
	if (err) {
   1f4d4:	4604      	mov	r4, r0
   1f4d6:	b110      	cbz	r0, 1f4de <cmd_disconnect+0x72>
		shell_error(sh, "Disconnection failed (err %d)", err);
   1f4d8:	4a07      	ldr	r2, [pc, #28]	; (1f4f8 <cmd_disconnect+0x8c>)
   1f4da:	4603      	mov	r3, r0
   1f4dc:	e7ec      	b.n	1f4b8 <cmd_disconnect+0x4c>
	bt_conn_unref(conn);
   1f4de:	4628      	mov	r0, r5
   1f4e0:	f7fb fbf6 	bl	1acd0 <bt_conn_unref>
	return 0;
   1f4e4:	e7dc      	b.n	1f4a0 <cmd_disconnect+0x34>
   1f4e6:	bf00      	nop
   1f4e8:	20002d84 	.word	0x20002d84
   1f4ec:	00035e30 	.word	0x00035e30
   1f4f0:	00035e11 	.word	0x00035e11
   1f4f4:	20003a4e 	.word	0x20003a4e
   1f4f8:	00035eef 	.word	0x00035eef

0001f4fc <cmd_auto_conn>:
{
   1f4fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f4fe:	4615      	mov	r5, r2
   1f500:	b085      	sub	sp, #20
   1f502:	4606      	mov	r6, r0
   1f504:	460f      	mov	r7, r1
	err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1f506:	466a      	mov	r2, sp
   1f508:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   1f50c:	f7f8 fe22 	bl	18154 <bt_addr_le_from_str>
	if (err) {
   1f510:	4604      	mov	r4, r0
   1f512:	b140      	cbz	r0, 1f526 <cmd_auto_conn+0x2a>
		shell_error(sh, "Invalid peer address (err %d)", err);
   1f514:	4603      	mov	r3, r0
   1f516:	4a13      	ldr	r2, [pc, #76]	; (1f564 <cmd_auto_conn+0x68>)
   1f518:	2101      	movs	r1, #1
   1f51a:	4630      	mov	r0, r6
   1f51c:	f00e f82e 	bl	2d57c <shell_fprintf>
}
   1f520:	4620      	mov	r0, r4
   1f522:	b005      	add	sp, #20
   1f524:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (argc < 4) {
   1f526:	2f03      	cmp	r7, #3
   1f528:	d80a      	bhi.n	1f540 <cmd_auto_conn+0x44>
		return bt_le_set_auto_conn(&addr, BT_LE_CONN_PARAM_DEFAULT);
   1f52a:	4a0f      	ldr	r2, [pc, #60]	; (1f568 <cmd_auto_conn+0x6c>)
   1f52c:	6851      	ldr	r1, [r2, #4]
   1f52e:	6810      	ldr	r0, [r2, #0]
   1f530:	ab02      	add	r3, sp, #8
   1f532:	c303      	stmia	r3!, {r0, r1}
   1f534:	a902      	add	r1, sp, #8
		return bt_le_set_auto_conn(&addr, NULL);
   1f536:	4668      	mov	r0, sp
   1f538:	f7fb ff80 	bl	1b43c <bt_le_set_auto_conn>
   1f53c:	4604      	mov	r4, r0
   1f53e:	e7ef      	b.n	1f520 <cmd_auto_conn+0x24>
	} else if (!strcmp(argv[3], "on")) {
   1f540:	490a      	ldr	r1, [pc, #40]	; (1f56c <cmd_auto_conn+0x70>)
   1f542:	68e8      	ldr	r0, [r5, #12]
   1f544:	f7ed ff2c 	bl	d3a0 <strcmp>
   1f548:	2800      	cmp	r0, #0
   1f54a:	d0ee      	beq.n	1f52a <cmd_auto_conn+0x2e>
	} else if (!strcmp(argv[3], "off")) {
   1f54c:	4908      	ldr	r1, [pc, #32]	; (1f570 <cmd_auto_conn+0x74>)
   1f54e:	68e8      	ldr	r0, [r5, #12]
   1f550:	f7ed ff26 	bl	d3a0 <strcmp>
   1f554:	b908      	cbnz	r0, 1f55a <cmd_auto_conn+0x5e>
		return bt_le_set_auto_conn(&addr, NULL);
   1f556:	4621      	mov	r1, r4
   1f558:	e7ed      	b.n	1f536 <cmd_auto_conn+0x3a>
		shell_help(sh);
   1f55a:	4630      	mov	r0, r6
   1f55c:	f00e f833 	bl	2d5c6 <shell_help>
		return SHELL_CMD_HELP_PRINTED;
   1f560:	2401      	movs	r4, #1
   1f562:	e7dd      	b.n	1f520 <cmd_auto_conn+0x24>
   1f564:	00035e11 	.word	0x00035e11
   1f568:	00030de4 	.word	0x00030de4
   1f56c:	00037d65 	.word	0x00037d65
   1f570:	000339bb 	.word	0x000339bb

0001f574 <cmd_connect_le>:
{
   1f574:	b530      	push	{r4, r5, lr}
   1f576:	4613      	mov	r3, r2
   1f578:	b08b      	sub	sp, #44	; 0x2c
   1f57a:	4605      	mov	r5, r0
	err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1f57c:	aa02      	add	r2, sp, #8
   1f57e:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   1f582:	f7f8 fde7 	bl	18154 <bt_addr_le_from_str>
	if (err) {
   1f586:	4604      	mov	r4, r0
   1f588:	b140      	cbz	r0, 1f59c <cmd_connect_le+0x28>
		shell_error(sh, "Invalid peer address (err %d)", err);
   1f58a:	4603      	mov	r3, r0
   1f58c:	4a16      	ldr	r2, [pc, #88]	; (1f5e8 <cmd_connect_le+0x74>)
   1f58e:	2101      	movs	r1, #1
   1f590:	4628      	mov	r0, r5
   1f592:	f00d fff3 	bl	2d57c <shell_fprintf>
}
   1f596:	4620      	mov	r0, r4
   1f598:	b00b      	add	sp, #44	; 0x2c
   1f59a:	bd30      	pop	{r4, r5, pc}
	err = bt_conn_le_create(&addr, create_params, BT_LE_CONN_PARAM_DEFAULT,
   1f59c:	4a13      	ldr	r2, [pc, #76]	; (1f5ec <cmd_connect_le+0x78>)
		BT_CONN_LE_CREATE_PARAM(options,
   1f59e:	9006      	str	r0, [sp, #24]
   1f5a0:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
	err = bt_conn_le_create(&addr, create_params, BT_LE_CONN_PARAM_DEFAULT,
   1f5a4:	6851      	ldr	r1, [r2, #4]
		BT_CONN_LE_CREATE_PARAM(options,
   1f5a6:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
   1f5aa:	e9cd 3007 	strd	r3, r0, [sp, #28]
	err = bt_conn_le_create(&addr, create_params, BT_LE_CONN_PARAM_DEFAULT,
   1f5ae:	6810      	ldr	r0, [r2, #0]
   1f5b0:	ab04      	add	r3, sp, #16
   1f5b2:	c303      	stmia	r3!, {r0, r1}
   1f5b4:	aa04      	add	r2, sp, #16
   1f5b6:	ab01      	add	r3, sp, #4
   1f5b8:	a906      	add	r1, sp, #24
   1f5ba:	a802      	add	r0, sp, #8
   1f5bc:	f7fb feb0 	bl	1b320 <bt_conn_le_create>
	if (err) {
   1f5c0:	4604      	mov	r4, r0
   1f5c2:	b140      	cbz	r0, 1f5d6 <cmd_connect_le+0x62>
		shell_error(sh, "Connection failed (%d)", err);
   1f5c4:	4603      	mov	r3, r0
   1f5c6:	4a0a      	ldr	r2, [pc, #40]	; (1f5f0 <cmd_connect_le+0x7c>)
   1f5c8:	2101      	movs	r1, #1
   1f5ca:	4628      	mov	r0, r5
   1f5cc:	f00d ffd6 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   1f5d0:	f06f 0407 	mvn.w	r4, #7
   1f5d4:	e7df      	b.n	1f596 <cmd_connect_le+0x22>
		shell_print(sh, "Connection pending");
   1f5d6:	4628      	mov	r0, r5
   1f5d8:	4a06      	ldr	r2, [pc, #24]	; (1f5f4 <cmd_connect_le+0x80>)
   1f5da:	2108      	movs	r1, #8
   1f5dc:	f00d ffce 	bl	2d57c <shell_fprintf>
		bt_conn_unref(conn);
   1f5e0:	9801      	ldr	r0, [sp, #4]
   1f5e2:	f7fb fb75 	bl	1acd0 <bt_conn_unref>
	return 0;
   1f5e6:	e7d6      	b.n	1f596 <cmd_connect_le+0x22>
   1f5e8:	00035e11 	.word	0x00035e11
   1f5ec:	00030de4 	.word	0x00030de4
   1f5f0:	00035f0e 	.word	0x00035f0e
   1f5f4:	00035f26 	.word	0x00035f26

0001f5f8 <cmd_scan>:
{
   1f5f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t timeout = 0;
   1f5fc:	2700      	movs	r7, #0
		} else if (!strcmp(arg, "fal")) {
   1f5fe:	f8df b188 	ldr.w	fp, [pc, #392]	; 1f788 <cmd_scan+0x190>
{
   1f602:	b089      	sub	sp, #36	; 0x24
   1f604:	4605      	mov	r5, r0
   1f606:	4689      	mov	r9, r1
   1f608:	4690      	mov	r8, r2
	for (size_t argn = 2; argn < argc; argn++) {
   1f60a:	2602      	movs	r6, #2
	uint32_t options = 0;
   1f60c:	463c      	mov	r4, r7
	for (size_t argn = 2; argn < argc; argn++) {
   1f60e:	454e      	cmp	r6, r9
   1f610:	d324      	bcc.n	1f65c <cmd_scan+0x64>
	action = argv[1];
   1f612:	f8d8 8004 	ldr.w	r8, [r8, #4]
	if (!strcmp(action, "on")) {
   1f616:	494d      	ldr	r1, [pc, #308]	; (1f74c <cmd_scan+0x154>)
   1f618:	4640      	mov	r0, r8
   1f61a:	f7ed fec1 	bl	d3a0 <strcmp>
   1f61e:	4606      	mov	r6, r0
   1f620:	2800      	cmp	r0, #0
   1f622:	d167      	bne.n	1f6f4 <cmd_scan+0xfc>
	struct bt_le_scan_param param = {
   1f624:	4601      	mov	r1, r0
   1f626:	2214      	movs	r2, #20
   1f628:	a803      	add	r0, sp, #12
   1f62a:	f010 fffe 	bl	3062a <memset>
   1f62e:	f04f 0801 	mov.w	r8, #1
   1f632:	4b47      	ldr	r3, [pc, #284]	; (1f750 <cmd_scan+0x158>)
	param.options |= options;
   1f634:	9404      	str	r4, [sp, #16]
	err = bt_le_scan_start(&param, NULL);
   1f636:	4631      	mov	r1, r6
   1f638:	a803      	add	r0, sp, #12
	struct bt_le_scan_param param = {
   1f63a:	f88d 800c 	strb.w	r8, [sp, #12]
   1f63e:	9305      	str	r3, [sp, #20]
   1f640:	f8ad 7018 	strh.w	r7, [sp, #24]
	err = bt_le_scan_start(&param, NULL);
   1f644:	f7fa ffd0 	bl	1a5e8 <bt_le_scan_start>
	if (err) {
   1f648:	4604      	mov	r4, r0
   1f64a:	2800      	cmp	r0, #0
   1f64c:	d04c      	beq.n	1f6e8 <cmd_scan+0xf0>
		shell_error(sh, "Bluetooth set active scan failed "
   1f64e:	4a41      	ldr	r2, [pc, #260]	; (1f754 <cmd_scan+0x15c>)
   1f650:	4603      	mov	r3, r0
		shell_error(sh, "Bluetooth set passive scan failed "
   1f652:	2101      	movs	r1, #1
   1f654:	4628      	mov	r0, r5
   1f656:	f00d ff91 	bl	2d57c <shell_fprintf>
		return err;
   1f65a:	e039      	b.n	1f6d0 <cmd_scan+0xd8>
		const char *arg = argv[argn];
   1f65c:	f858 a026 	ldr.w	sl, [r8, r6, lsl #2]
		if (!strcmp(arg, "dups")) {
   1f660:	493d      	ldr	r1, [pc, #244]	; (1f758 <cmd_scan+0x160>)
		const char *arg = argv[argn];
   1f662:	00b3      	lsls	r3, r6, #2
		if (!strcmp(arg, "dups")) {
   1f664:	4650      	mov	r0, sl
		const char *arg = argv[argn];
   1f666:	9301      	str	r3, [sp, #4]
		if (!strcmp(arg, "dups")) {
   1f668:	f7ed fe9a 	bl	d3a0 <strcmp>
   1f66c:	b918      	cbnz	r0, 1f676 <cmd_scan+0x7e>
			options |= BT_LE_SCAN_OPT_FILTER_DUPLICATE;
   1f66e:	f044 0401 	orr.w	r4, r4, #1
	for (size_t argn = 2; argn < argc; argn++) {
   1f672:	3601      	adds	r6, #1
   1f674:	e7cb      	b.n	1f60e <cmd_scan+0x16>
		} else if (!strcmp(arg, "nodups")) {
   1f676:	4939      	ldr	r1, [pc, #228]	; (1f75c <cmd_scan+0x164>)
   1f678:	4650      	mov	r0, sl
   1f67a:	f7ed fe91 	bl	d3a0 <strcmp>
   1f67e:	b910      	cbnz	r0, 1f686 <cmd_scan+0x8e>
			options &= ~BT_LE_SCAN_OPT_FILTER_DUPLICATE;
   1f680:	f024 0401 	bic.w	r4, r4, #1
   1f684:	e7f5      	b.n	1f672 <cmd_scan+0x7a>
		} else if (!strcmp(arg, "fal")) {
   1f686:	4659      	mov	r1, fp
   1f688:	4650      	mov	r0, sl
   1f68a:	f7ed fe89 	bl	d3a0 <strcmp>
   1f68e:	b910      	cbnz	r0, 1f696 <cmd_scan+0x9e>
			options |= BT_LE_SCAN_OPT_FILTER_ACCEPT_LIST;
   1f690:	f044 0402 	orr.w	r4, r4, #2
   1f694:	e7ed      	b.n	1f672 <cmd_scan+0x7a>
		} else if (!strcmp(arg, "coded")) {
   1f696:	4932      	ldr	r1, [pc, #200]	; (1f760 <cmd_scan+0x168>)
   1f698:	4650      	mov	r0, sl
   1f69a:	f7ed fe81 	bl	d3a0 <strcmp>
   1f69e:	b910      	cbnz	r0, 1f6a6 <cmd_scan+0xae>
			options |= BT_LE_SCAN_OPT_CODED;
   1f6a0:	f044 0404 	orr.w	r4, r4, #4
   1f6a4:	e7e5      	b.n	1f672 <cmd_scan+0x7a>
		} else if (!strcmp(arg, "no-1m")) {
   1f6a6:	492f      	ldr	r1, [pc, #188]	; (1f764 <cmd_scan+0x16c>)
   1f6a8:	4650      	mov	r0, sl
   1f6aa:	f7ed fe79 	bl	d3a0 <strcmp>
   1f6ae:	b910      	cbnz	r0, 1f6b6 <cmd_scan+0xbe>
			options |= BT_LE_SCAN_OPT_NO_1M;
   1f6b0:	f044 0408 	orr.w	r4, r4, #8
   1f6b4:	e7dd      	b.n	1f672 <cmd_scan+0x7a>
		} else if (!strcmp(arg, "timeout")) {
   1f6b6:	492c      	ldr	r1, [pc, #176]	; (1f768 <cmd_scan+0x170>)
   1f6b8:	4650      	mov	r0, sl
   1f6ba:	f7ed fe71 	bl	d3a0 <strcmp>
   1f6be:	4601      	mov	r1, r0
   1f6c0:	b910      	cbnz	r0, 1f6c8 <cmd_scan+0xd0>
			if (++argn == argc) {
   1f6c2:	3601      	adds	r6, #1
   1f6c4:	45b1      	cmp	r9, r6
   1f6c6:	d107      	bne.n	1f6d8 <cmd_scan+0xe0>
				shell_help(sh);
   1f6c8:	4628      	mov	r0, r5
   1f6ca:	f00d ff7c 	bl	2d5c6 <shell_help>
				return SHELL_CMD_HELP_PRINTED;
   1f6ce:	2401      	movs	r4, #1
}
   1f6d0:	4620      	mov	r0, r4
   1f6d2:	b009      	add	sp, #36	; 0x24
   1f6d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			timeout = strtoul(argv[argn], NULL, 16);
   1f6d8:	9b01      	ldr	r3, [sp, #4]
   1f6da:	4443      	add	r3, r8
   1f6dc:	2210      	movs	r2, #16
   1f6de:	6858      	ldr	r0, [r3, #4]
   1f6e0:	f00c fc6c 	bl	2bfbc <strtoul>
   1f6e4:	b287      	uxth	r7, r0
   1f6e6:	e7c4      	b.n	1f672 <cmd_scan+0x7a>
		shell_print(sh, "Bluetooth active scan enabled");
   1f6e8:	4a20      	ldr	r2, [pc, #128]	; (1f76c <cmd_scan+0x174>)
		shell_print(sh, "Bluetooth passive scan enabled");
   1f6ea:	2108      	movs	r1, #8
   1f6ec:	4628      	mov	r0, r5
   1f6ee:	f00d ff45 	bl	2d57c <shell_fprintf>
		return cmd_passive_scan_on(sh, options, timeout);
   1f6f2:	e7ed      	b.n	1f6d0 <cmd_scan+0xd8>
	} else if (!strcmp(action, "off")) {
   1f6f4:	491e      	ldr	r1, [pc, #120]	; (1f770 <cmd_scan+0x178>)
   1f6f6:	4640      	mov	r0, r8
   1f6f8:	f7ed fe52 	bl	d3a0 <strcmp>
   1f6fc:	b940      	cbnz	r0, 1f710 <cmd_scan+0x118>
	err = bt_le_scan_stop();
   1f6fe:	f7fa fff3 	bl	1a6e8 <bt_le_scan_stop>
	if (err) {
   1f702:	4604      	mov	r4, r0
   1f704:	b110      	cbz	r0, 1f70c <cmd_scan+0x114>
		shell_error(sh, "Stopping scanning failed (err %d)", err);
   1f706:	4a1b      	ldr	r2, [pc, #108]	; (1f774 <cmd_scan+0x17c>)
   1f708:	4603      	mov	r3, r0
   1f70a:	e7a2      	b.n	1f652 <cmd_scan+0x5a>
		shell_print(sh, "Scan successfully stopped");
   1f70c:	4a1a      	ldr	r2, [pc, #104]	; (1f778 <cmd_scan+0x180>)
   1f70e:	e7ec      	b.n	1f6ea <cmd_scan+0xf2>
	} else if (!strcmp(action, "passive")) {
   1f710:	491a      	ldr	r1, [pc, #104]	; (1f77c <cmd_scan+0x184>)
   1f712:	4640      	mov	r0, r8
   1f714:	f7ed fe44 	bl	d3a0 <strcmp>
   1f718:	4606      	mov	r6, r0
   1f71a:	2800      	cmp	r0, #0
   1f71c:	d1d4      	bne.n	1f6c8 <cmd_scan+0xd0>
	struct bt_le_scan_param param = {
   1f71e:	4601      	mov	r1, r0
   1f720:	2214      	movs	r2, #20
   1f722:	a803      	add	r0, sp, #12
   1f724:	f010 ff81 	bl	3062a <memset>
   1f728:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
	err = bt_le_scan_start(&param, NULL);
   1f72c:	4631      	mov	r1, r6
   1f72e:	a803      	add	r0, sp, #12
	param.options |= options;
   1f730:	9404      	str	r4, [sp, #16]
	struct bt_le_scan_param param = {
   1f732:	9305      	str	r3, [sp, #20]
   1f734:	f8ad 7018 	strh.w	r7, [sp, #24]
	err = bt_le_scan_start(&param, NULL);
   1f738:	f7fa ff56 	bl	1a5e8 <bt_le_scan_start>
	if (err) {
   1f73c:	4604      	mov	r4, r0
   1f73e:	b110      	cbz	r0, 1f746 <cmd_scan+0x14e>
		shell_error(sh, "Bluetooth set passive scan failed "
   1f740:	4a0f      	ldr	r2, [pc, #60]	; (1f780 <cmd_scan+0x188>)
   1f742:	4603      	mov	r3, r0
   1f744:	e785      	b.n	1f652 <cmd_scan+0x5a>
		shell_print(sh, "Bluetooth passive scan enabled");
   1f746:	4a0f      	ldr	r2, [pc, #60]	; (1f784 <cmd_scan+0x18c>)
   1f748:	e7cf      	b.n	1f6ea <cmd_scan+0xf2>
   1f74a:	bf00      	nop
   1f74c:	00037d65 	.word	0x00037d65
   1f750:	00300060 	.word	0x00300060
   1f754:	00035f51 	.word	0x00035f51
   1f758:	00035f3c 	.word	0x00035f3c
   1f75c:	00035f3a 	.word	0x00035f3a
   1f760:	00035f45 	.word	0x00035f45
   1f764:	00035f4b 	.word	0x00035f4b
   1f768:	00035420 	.word	0x00035420
   1f76c:	00035f7c 	.word	0x00035f7c
   1f770:	000339bb 	.word	0x000339bb
   1f774:	00035f9b 	.word	0x00035f9b
   1f778:	00035fbe 	.word	0x00035fbe
   1f77c:	0003237a 	.word	0x0003237a
   1f780:	00035fd9 	.word	0x00035fd9
   1f784:	00036005 	.word	0x00036005
   1f788:	00035f41 	.word	0x00035f41

0001f78c <cmd_id_show>:
{
   1f78c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f790:	b08f      	sub	sp, #60	; 0x3c
	size_t i, count = CONFIG_BT_ID_MAX;
   1f792:	2301      	movs	r3, #1
{
   1f794:	4605      	mov	r5, r0
	bt_id_get(addrs, &count);
   1f796:	a903      	add	r1, sp, #12
   1f798:	a804      	add	r0, sp, #16
	size_t i, count = CONFIG_BT_ID_MAX;
   1f79a:	9303      	str	r3, [sp, #12]
	bt_id_get(addrs, &count);
   1f79c:	f7fa faf2 	bl	19d84 <bt_id_get>
		shell_print(sh, "%s%zu: %s", i == selected_id ? "*" : " ", i,
   1f7a0:	4f11      	ldr	r7, [pc, #68]	; (1f7e8 <cmd_id_show+0x5c>)
   1f7a2:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1f7f0 <cmd_id_show+0x64>
   1f7a6:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1f7f4 <cmd_id_show+0x68>
	for (i = 0; i < count; i++) {
   1f7aa:	2400      	movs	r4, #0
   1f7ac:	9b03      	ldr	r3, [sp, #12]
   1f7ae:	42a3      	cmp	r3, r4
   1f7b0:	d803      	bhi.n	1f7ba <cmd_id_show+0x2e>
}
   1f7b2:	2000      	movs	r0, #0
   1f7b4:	b00f      	add	sp, #60	; 0x3c
   1f7b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_addr_le_to_str(&addrs[i], addr_str, sizeof(addr_str));
   1f7ba:	ab04      	add	r3, sp, #16
   1f7bc:	ae06      	add	r6, sp, #24
   1f7be:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1f7c2:	221e      	movs	r2, #30
   1f7c4:	4631      	mov	r1, r6
   1f7c6:	4418      	add	r0, r3
   1f7c8:	f7ff fcae 	bl	1f128 <bt_addr_le_to_str>
		shell_print(sh, "%s%zu: %s", i == selected_id ? "*" : " ", i,
   1f7cc:	783b      	ldrb	r3, [r7, #0]
   1f7ce:	4a07      	ldr	r2, [pc, #28]	; (1f7ec <cmd_id_show+0x60>)
   1f7d0:	e9cd 4600 	strd	r4, r6, [sp]
   1f7d4:	42a3      	cmp	r3, r4
   1f7d6:	bf0c      	ite	eq
   1f7d8:	4643      	moveq	r3, r8
   1f7da:	464b      	movne	r3, r9
   1f7dc:	2108      	movs	r1, #8
   1f7de:	4628      	mov	r0, r5
   1f7e0:	f00d fecc 	bl	2d57c <shell_fprintf>
	for (i = 0; i < count; i++) {
   1f7e4:	3401      	adds	r4, #1
   1f7e6:	e7e1      	b.n	1f7ac <cmd_id_show+0x20>
   1f7e8:	20003a4e 	.word	0x20003a4e
   1f7ec:	00036025 	.word	0x00036025
   1f7f0:	00034596 	.word	0x00034596
   1f7f4:	000329e5 	.word	0x000329e5

0001f7f8 <scan_recv>:
{
   1f7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7fc:	b09f      	sub	sp, #124	; 0x7c
	(void)memset(name, 0, sizeof(name));
   1f7fe:	ad16      	add	r5, sp, #88	; 0x58
{
   1f800:	4604      	mov	r4, r0
   1f802:	460e      	mov	r6, r1
	(void)memset(name, 0, sizeof(name));
   1f804:	221e      	movs	r2, #30
   1f806:	2100      	movs	r1, #0
   1f808:	4628      	mov	r0, r5
   1f80a:	f010 ff0e 	bl	3062a <memset>
	bt_data_parse(buf, data_cb, name);
   1f80e:	4630      	mov	r0, r6
   1f810:	462a      	mov	r2, r5
   1f812:	4920      	ldr	r1, [pc, #128]	; (1f894 <scan_recv+0x9c>)
   1f814:	f7fa fa02 	bl	19c1c <bt_data_parse>
	bt_addr_le_to_str(info->addr, le_addr, sizeof(le_addr));
   1f818:	a90e      	add	r1, sp, #56	; 0x38
   1f81a:	6820      	ldr	r0, [r4, #0]
   1f81c:	221e      	movs	r2, #30
   1f81e:	f7ff fc83 	bl	1f128 <bt_addr_le_to_str>
	shell_print(ctx_shell, "[DEVICE]: %s, AD evt type %u, RSSI %i %s "
   1f822:	7b22      	ldrb	r2, [r4, #12]
   1f824:	4b1c      	ldr	r3, [pc, #112]	; (1f898 <scan_recv+0xa0>)
   1f826:	79e7      	ldrb	r7, [r4, #7]
   1f828:	6818      	ldr	r0, [r3, #0]
   1f82a:	8923      	ldrh	r3, [r4, #8]
   1f82c:	f994 c005 	ldrsb.w	ip, [r4, #5]
   1f830:	2a04      	cmp	r2, #4
   1f832:	bf96      	itet	ls
   1f834:	4919      	ldrls	r1, [pc, #100]	; (1f89c <scan_recv+0xa4>)
   1f836:	4e1a      	ldrhi	r6, [pc, #104]	; (1f8a0 <scan_recv+0xa8>)
   1f838:	f851 6022 	ldrls.w	r6, [r1, r2, lsl #2]
   1f83c:	7b62      	ldrb	r2, [r4, #13]
	switch (phy) {
   1f83e:	2a04      	cmp	r2, #4
   1f840:	bf96      	itet	ls
   1f842:	4916      	ldrls	r1, [pc, #88]	; (1f89c <scan_recv+0xa4>)
	shell_print(ctx_shell, "[DEVICE]: %s, AD evt type %u, RSSI %i %s "
   1f844:	f8df b058 	ldrhi.w	fp, [pc, #88]	; 1f8a0 <scan_recv+0xa8>
   1f848:	f851 b022 	ldrls.w	fp, [r1, r2, lsl #2]
   1f84c:	8962      	ldrh	r2, [r4, #10]
   1f84e:	7921      	ldrb	r1, [r4, #4]
   1f850:	910c      	str	r1, [sp, #48]	; 0x30
   1f852:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1f856:	f003 0e01 	and.w	lr, r3, #1
   1f85a:	f3c3 0840 	ubfx	r8, r3, #1, #1
   1f85e:	f3c3 0980 	ubfx	r9, r3, #2, #1
   1f862:	f3c3 0ac0 	ubfx	sl, r3, #3, #1
   1f866:	1089      	asrs	r1, r1, #2
   1f868:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1f86c:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
   1f870:	e9cd a306 	strd	sl, r3, [sp, #24]
   1f874:	e9cd 6b08 	strd	r6, fp, [sp, #32]
   1f878:	e9cd 8904 	strd	r8, r9, [sp, #16]
   1f87c:	e9cd 5e02 	strd	r5, lr, [sp, #8]
   1f880:	e9cd 7c00 	strd	r7, ip, [sp]
   1f884:	4a07      	ldr	r2, [pc, #28]	; (1f8a4 <scan_recv+0xac>)
   1f886:	ab0e      	add	r3, sp, #56	; 0x38
   1f888:	2108      	movs	r1, #8
   1f88a:	f00d fe77 	bl	2d57c <shell_fprintf>
}
   1f88e:	b01f      	add	sp, #124	; 0x7c
   1f890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f894:	0002f9c3 	.word	0x0002f9c3
   1f898:	20002d80 	.word	0x20002d80
   1f89c:	000319b8 	.word	0x000319b8
   1f8a0:	00036030 	.word	0x00036030
   1f8a4:	00036038 	.word	0x00036038

0001f8a8 <cmd_bt>:
	SHELL_SUBCMD_SET_END
);

static int cmd_bt(const struct shell *sh, size_t argc, char **argv)
{
	if (argc == 1) {
   1f8a8:	2901      	cmp	r1, #1
{
   1f8aa:	b513      	push	{r0, r1, r4, lr}
   1f8ac:	460c      	mov	r4, r1
	if (argc == 1) {
   1f8ae:	d104      	bne.n	1f8ba <cmd_bt+0x12>
		shell_help(sh);
   1f8b0:	f00d fe89 	bl	2d5c6 <shell_help>
		return SHELL_CMD_HELP_PRINTED;
   1f8b4:	4620      	mov	r0, r4
	}

	shell_error(sh, "%s unknown parameter: %s", argv[0], argv[1]);

	return -EINVAL;
}
   1f8b6:	b002      	add	sp, #8
   1f8b8:	bd10      	pop	{r4, pc}
	shell_error(sh, "%s unknown parameter: %s", argv[0], argv[1]);
   1f8ba:	6853      	ldr	r3, [r2, #4]
   1f8bc:	9300      	str	r3, [sp, #0]
   1f8be:	6813      	ldr	r3, [r2, #0]
   1f8c0:	4a03      	ldr	r2, [pc, #12]	; (1f8d0 <cmd_bt+0x28>)
   1f8c2:	2101      	movs	r1, #1
   1f8c4:	f00d fe5a 	bl	2d57c <shell_fprintf>
   1f8c8:	f06f 0015 	mvn.w	r0, #21
   1f8cc:	e7f3      	b.n	1f8b6 <cmd_bt+0xe>
   1f8ce:	bf00      	nop
   1f8d0:	000360b4 	.word	0x000360b4

0001f8d4 <cmd_clear>:
{
   1f8d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f8d6:	4605      	mov	r5, r0
   1f8d8:	460e      	mov	r6, r1
	if (strcmp(argv[1], "all") == 0) {
   1f8da:	6850      	ldr	r0, [r2, #4]
   1f8dc:	491c      	ldr	r1, [pc, #112]	; (1f950 <cmd_clear+0x7c>)
{
   1f8de:	4614      	mov	r4, r2
	if (strcmp(argv[1], "all") == 0) {
   1f8e0:	f7ed fd5e 	bl	d3a0 <strcmp>
   1f8e4:	4601      	mov	r1, r0
   1f8e6:	b990      	cbnz	r0, 1f90e <cmd_clear+0x3a>
		err = bt_unpair(selected_id, NULL);
   1f8e8:	4b1a      	ldr	r3, [pc, #104]	; (1f954 <cmd_clear+0x80>)
   1f8ea:	7818      	ldrb	r0, [r3, #0]
   1f8ec:	f00e fd6d 	bl	2e3ca <bt_unpair>
		if (err) {
   1f8f0:	4604      	mov	r4, r0
   1f8f2:	b130      	cbz	r0, 1f902 <cmd_clear+0x2e>
			shell_error(sh, "Failed to clear pairings (err %d)",
   1f8f4:	4a18      	ldr	r2, [pc, #96]	; (1f958 <cmd_clear+0x84>)
   1f8f6:	4603      	mov	r3, r0
		shell_error(sh, "Failed to clear pairing (err %d)", err);
   1f8f8:	2101      	movs	r1, #1
   1f8fa:	4628      	mov	r0, r5
   1f8fc:	f00d fe3e 	bl	2d57c <shell_fprintf>
   1f900:	e00e      	b.n	1f920 <cmd_clear+0x4c>
			shell_print(sh, "Pairings successfully cleared");
   1f902:	4a16      	ldr	r2, [pc, #88]	; (1f95c <cmd_clear+0x88>)
		shell_print(sh, "Pairing successfully cleared");
   1f904:	2108      	movs	r1, #8
   1f906:	4628      	mov	r0, r5
   1f908:	f00d fe38 	bl	2d57c <shell_fprintf>
   1f90c:	e008      	b.n	1f920 <cmd_clear+0x4c>
	if (argc < 3) {
   1f90e:	2e02      	cmp	r6, #2
   1f910:	d809      	bhi.n	1f926 <cmd_clear+0x52>
		shell_print(sh, "Both address and address type needed");
   1f912:	4a13      	ldr	r2, [pc, #76]	; (1f960 <cmd_clear+0x8c>)
   1f914:	2108      	movs	r1, #8
   1f916:	4628      	mov	r0, r5
   1f918:	f00d fe30 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   1f91c:	f06f 0407 	mvn.w	r4, #7
}
   1f920:	4620      	mov	r0, r4
   1f922:	b002      	add	sp, #8
   1f924:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1f926:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   1f92a:	466a      	mov	r2, sp
   1f92c:	f7f8 fc12 	bl	18154 <bt_addr_le_from_str>
	if (err) {
   1f930:	4604      	mov	r4, r0
   1f932:	b108      	cbz	r0, 1f938 <cmd_clear+0x64>
		shell_print(sh, "Invalid address");
   1f934:	4a0b      	ldr	r2, [pc, #44]	; (1f964 <cmd_clear+0x90>)
   1f936:	e7e5      	b.n	1f904 <cmd_clear+0x30>
	err = bt_unpair(selected_id, &addr);
   1f938:	4b06      	ldr	r3, [pc, #24]	; (1f954 <cmd_clear+0x80>)
   1f93a:	4669      	mov	r1, sp
   1f93c:	7818      	ldrb	r0, [r3, #0]
   1f93e:	f00e fd44 	bl	2e3ca <bt_unpair>
	if (err) {
   1f942:	4604      	mov	r4, r0
   1f944:	b110      	cbz	r0, 1f94c <cmd_clear+0x78>
		shell_error(sh, "Failed to clear pairing (err %d)", err);
   1f946:	4a08      	ldr	r2, [pc, #32]	; (1f968 <cmd_clear+0x94>)
   1f948:	4603      	mov	r3, r0
   1f94a:	e7d5      	b.n	1f8f8 <cmd_clear+0x24>
		shell_print(sh, "Pairing successfully cleared");
   1f94c:	4a07      	ldr	r2, [pc, #28]	; (1f96c <cmd_clear+0x98>)
   1f94e:	e7d9      	b.n	1f904 <cmd_clear+0x30>
   1f950:	000360ce 	.word	0x000360ce
   1f954:	20003a4e 	.word	0x20003a4e
   1f958:	000360d2 	.word	0x000360d2
   1f95c:	000360f5 	.word	0x000360f5
   1f960:	00036114 	.word	0x00036114
   1f964:	0003613a 	.word	0x0003613a
   1f968:	0003614b 	.word	0x0003614b
   1f96c:	0003616d 	.word	0x0003616d

0001f970 <cmd_select>:
{
   1f970:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f972:	4613      	mov	r3, r2
   1f974:	4605      	mov	r5, r0
	err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1f976:	466a      	mov	r2, sp
   1f978:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   1f97c:	f7f8 fbea 	bl	18154 <bt_addr_le_from_str>
	if (err) {
   1f980:	4604      	mov	r4, r0
   1f982:	b140      	cbz	r0, 1f996 <cmd_select+0x26>
		shell_error(sh, "Invalid peer address (err %d)", err);
   1f984:	4603      	mov	r3, r0
   1f986:	4a0f      	ldr	r2, [pc, #60]	; (1f9c4 <cmd_select+0x54>)
   1f988:	2101      	movs	r1, #1
   1f98a:	4628      	mov	r0, r5
   1f98c:	f00d fdf6 	bl	2d57c <shell_fprintf>
}
   1f990:	4620      	mov	r0, r4
   1f992:	b002      	add	sp, #8
   1f994:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_addr_le(selected_id, &addr);
   1f996:	4b0c      	ldr	r3, [pc, #48]	; (1f9c8 <cmd_select+0x58>)
   1f998:	4669      	mov	r1, sp
   1f99a:	7818      	ldrb	r0, [r3, #0]
   1f99c:	f7fb fc2a 	bl	1b1f4 <bt_conn_lookup_addr_le>
	if (!conn) {
   1f9a0:	4606      	mov	r6, r0
   1f9a2:	b938      	cbnz	r0, 1f9b4 <cmd_select+0x44>
		shell_error(sh, "No matching connection found");
   1f9a4:	4a09      	ldr	r2, [pc, #36]	; (1f9cc <cmd_select+0x5c>)
   1f9a6:	2101      	movs	r1, #1
   1f9a8:	4628      	mov	r0, r5
   1f9aa:	f00d fde7 	bl	2d57c <shell_fprintf>
   1f9ae:	f06f 0407 	mvn.w	r4, #7
   1f9b2:	e7ed      	b.n	1f990 <cmd_select+0x20>
	if (default_conn) {
   1f9b4:	4d06      	ldr	r5, [pc, #24]	; (1f9d0 <cmd_select+0x60>)
   1f9b6:	6828      	ldr	r0, [r5, #0]
   1f9b8:	b108      	cbz	r0, 1f9be <cmd_select+0x4e>
		bt_conn_unref(default_conn);
   1f9ba:	f7fb f989 	bl	1acd0 <bt_conn_unref>
	default_conn = conn;
   1f9be:	602e      	str	r6, [r5, #0]
	return 0;
   1f9c0:	e7e6      	b.n	1f990 <cmd_select+0x20>
   1f9c2:	bf00      	nop
   1f9c4:	00035e11 	.word	0x00035e11
   1f9c8:	20003a4e 	.word	0x20003a4e
   1f9cc:	0003618b 	.word	0x0003618b
   1f9d0:	20002d84 	.word	0x20002d84

0001f9d4 <cmd_name>:
	if (argc < 2) {
   1f9d4:	2901      	cmp	r1, #1
{
   1f9d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1f9d8:	4605      	mov	r5, r0
   1f9da:	4616      	mov	r6, r2
	if (argc < 2) {
   1f9dc:	d80b      	bhi.n	1f9f6 <cmd_name+0x22>
		shell_print(sh, "Bluetooth Local Name: %s", bt_get_name());
   1f9de:	f7fa f8dd 	bl	19b9c <bt_get_name>
   1f9e2:	4a0c      	ldr	r2, [pc, #48]	; (1fa14 <cmd_name+0x40>)
   1f9e4:	4603      	mov	r3, r0
   1f9e6:	2108      	movs	r1, #8
   1f9e8:	4628      	mov	r0, r5
   1f9ea:	f00d fdc7 	bl	2d57c <shell_fprintf>
   1f9ee:	2400      	movs	r4, #0
}
   1f9f0:	4620      	mov	r0, r4
   1f9f2:	b002      	add	sp, #8
   1f9f4:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_set_name(argv[1]);
   1f9f6:	6850      	ldr	r0, [r2, #4]
   1f9f8:	f00e fd80 	bl	2e4fc <bt_set_name>
	if (err) {
   1f9fc:	4604      	mov	r4, r0
   1f9fe:	2800      	cmp	r0, #0
   1fa00:	d0f6      	beq.n	1f9f0 <cmd_name+0x1c>
		shell_error(sh, "Unable to set name %s (err %d)", argv[1],
   1fa02:	9000      	str	r0, [sp, #0]
   1fa04:	6873      	ldr	r3, [r6, #4]
   1fa06:	4a04      	ldr	r2, [pc, #16]	; (1fa18 <cmd_name+0x44>)
   1fa08:	2101      	movs	r1, #1
   1fa0a:	4628      	mov	r0, r5
   1fa0c:	f00d fdb6 	bl	2d57c <shell_fprintf>
		return err;
   1fa10:	e7ee      	b.n	1f9f0 <cmd_name+0x1c>
   1fa12:	bf00      	nop
   1fa14:	000361a9 	.word	0x000361a9
   1fa18:	000361c3 	.word	0x000361c3

0001fa1c <cmd_id_select>:
{
   1fa1c:	b570      	push	{r4, r5, r6, lr}
   1fa1e:	4613      	mov	r3, r2
   1fa20:	b08c      	sub	sp, #48	; 0x30
	id = strtol(argv[1], NULL, 10);
   1fa22:	220a      	movs	r2, #10
   1fa24:	2100      	movs	r1, #0
{
   1fa26:	4605      	mov	r5, r0
	size_t count = CONFIG_BT_ID_MAX;
   1fa28:	2601      	movs	r6, #1
	id = strtol(argv[1], NULL, 10);
   1fa2a:	6858      	ldr	r0, [r3, #4]
	size_t count = CONFIG_BT_ID_MAX;
   1fa2c:	9601      	str	r6, [sp, #4]
	id = strtol(argv[1], NULL, 10);
   1fa2e:	f00c fa3f 	bl	2beb0 <strtol>
	bt_id_get(addrs, &count);
   1fa32:	a901      	add	r1, sp, #4
	id = strtol(argv[1], NULL, 10);
   1fa34:	b2c4      	uxtb	r4, r0
	bt_id_get(addrs, &count);
   1fa36:	a802      	add	r0, sp, #8
   1fa38:	f7fa f9a4 	bl	19d84 <bt_id_get>
	if (count <= id) {
   1fa3c:	9b01      	ldr	r3, [sp, #4]
   1fa3e:	429c      	cmp	r4, r3
   1fa40:	d308      	bcc.n	1fa54 <cmd_id_select+0x38>
		shell_error(sh, "Invalid identity");
   1fa42:	4628      	mov	r0, r5
   1fa44:	4a0c      	ldr	r2, [pc, #48]	; (1fa78 <cmd_id_select+0x5c>)
   1fa46:	4631      	mov	r1, r6
   1fa48:	f00d fd98 	bl	2d57c <shell_fprintf>
   1fa4c:	f06f 0007 	mvn.w	r0, #7
}
   1fa50:	b00c      	add	sp, #48	; 0x30
   1fa52:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(&addrs[id], addr_str, sizeof(addr_str));
   1fa54:	ab02      	add	r3, sp, #8
   1fa56:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1fa5a:	221e      	movs	r2, #30
   1fa5c:	a904      	add	r1, sp, #16
   1fa5e:	4418      	add	r0, r3
   1fa60:	f7ff fb62 	bl	1f128 <bt_addr_le_to_str>
	shell_print(sh, "Selected identity: %s", addr_str);
   1fa64:	ab04      	add	r3, sp, #16
   1fa66:	4628      	mov	r0, r5
   1fa68:	4a04      	ldr	r2, [pc, #16]	; (1fa7c <cmd_id_select+0x60>)
   1fa6a:	2108      	movs	r1, #8
   1fa6c:	f00d fd86 	bl	2d57c <shell_fprintf>
	selected_id = id;
   1fa70:	4b03      	ldr	r3, [pc, #12]	; (1fa80 <cmd_id_select+0x64>)
	return 0;
   1fa72:	2000      	movs	r0, #0
	selected_id = id;
   1fa74:	701c      	strb	r4, [r3, #0]
	return 0;
   1fa76:	e7eb      	b.n	1fa50 <cmd_id_select+0x34>
   1fa78:	000361e3 	.word	0x000361e3
   1fa7c:	000361f5 	.word	0x000361f5
   1fa80:	20003a4e 	.word	0x20003a4e

0001fa84 <cmd_id_delete>:
	if (argc < 2) {
   1fa84:	2901      	cmp	r1, #1
{
   1fa86:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1fa88:	4613      	mov	r3, r2
   1fa8a:	4606      	mov	r6, r0
	if (argc < 2) {
   1fa8c:	d808      	bhi.n	1faa0 <cmd_id_delete+0x1c>
		shell_error(sh, "Identity identifier not specified");
   1fa8e:	4a12      	ldr	r2, [pc, #72]	; (1fad8 <cmd_id_delete+0x54>)
   1fa90:	2101      	movs	r1, #1
   1fa92:	f00d fd73 	bl	2d57c <shell_fprintf>
   1fa96:	f06f 0407 	mvn.w	r4, #7
}
   1fa9a:	4620      	mov	r0, r4
   1fa9c:	b002      	add	sp, #8
   1fa9e:	bd70      	pop	{r4, r5, r6, pc}
	id = strtol(argv[1], NULL, 10);
   1faa0:	6858      	ldr	r0, [r3, #4]
   1faa2:	220a      	movs	r2, #10
   1faa4:	2100      	movs	r1, #0
   1faa6:	f00c fa03 	bl	2beb0 <strtol>
	err = bt_id_delete(id);
   1faaa:	b2c5      	uxtb	r5, r0
   1faac:	4628      	mov	r0, r5
   1faae:	f7fa fa35 	bl	19f1c <bt_id_delete>
	if (err < 0) {
   1fab2:	1e04      	subs	r4, r0, #0
   1fab4:	da07      	bge.n	1fac6 <cmd_id_delete+0x42>
		shell_error(sh, "Deleting ID %u failed (err %d)", id, err);
   1fab6:	4a09      	ldr	r2, [pc, #36]	; (1fadc <cmd_id_delete+0x58>)
   1fab8:	9400      	str	r4, [sp, #0]
   1faba:	462b      	mov	r3, r5
   1fabc:	2101      	movs	r1, #1
   1fabe:	4630      	mov	r0, r6
   1fac0:	f00d fd5c 	bl	2d57c <shell_fprintf>
		return err;
   1fac4:	e7e9      	b.n	1fa9a <cmd_id_delete+0x16>
	shell_print(sh, "Identity %u deleted", id);
   1fac6:	4a06      	ldr	r2, [pc, #24]	; (1fae0 <cmd_id_delete+0x5c>)
   1fac8:	462b      	mov	r3, r5
   1faca:	2108      	movs	r1, #8
   1facc:	4630      	mov	r0, r6
   1face:	f00d fd55 	bl	2d57c <shell_fprintf>
	return 0;
   1fad2:	2400      	movs	r4, #0
   1fad4:	e7e1      	b.n	1fa9a <cmd_id_delete+0x16>
   1fad6:	bf00      	nop
   1fad8:	0003620c 	.word	0x0003620c
   1fadc:	0003622f 	.word	0x0003622f
   1fae0:	0003624f 	.word	0x0003624f

0001fae4 <cmd_id_reset>:
{
   1fae4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (argc < 2) {
   1fae6:	2901      	cmp	r1, #1
{
   1fae8:	b08d      	sub	sp, #52	; 0x34
   1faea:	4605      	mov	r5, r0
   1faec:	460f      	mov	r7, r1
   1faee:	4614      	mov	r4, r2
	if (argc < 2) {
   1faf0:	d808      	bhi.n	1fb04 <cmd_id_reset+0x20>
		shell_error(sh, "Identity identifier not specified");
   1faf2:	4a22      	ldr	r2, [pc, #136]	; (1fb7c <cmd_id_reset+0x98>)
   1faf4:	2101      	movs	r1, #1
   1faf6:	f00d fd41 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   1fafa:	f06f 0407 	mvn.w	r4, #7
}
   1fafe:	4620      	mov	r0, r4
   1fb00:	b00d      	add	sp, #52	; 0x34
   1fb02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	id = strtol(argv[1], NULL, 10);
   1fb04:	6860      	ldr	r0, [r4, #4]
   1fb06:	220a      	movs	r2, #10
   1fb08:	2100      	movs	r1, #0
   1fb0a:	f00c f9d1 	bl	2beb0 <strtol>
	if (argc > 2) {
   1fb0e:	2f02      	cmp	r7, #2
	id = strtol(argv[1], NULL, 10);
   1fb10:	b2c6      	uxtb	r6, r0
	if (argc > 2) {
   1fb12:	d00c      	beq.n	1fb2e <cmd_id_reset+0x4a>
		err = bt_addr_le_from_str(argv[2], "random", &addr);
   1fb14:	68a0      	ldr	r0, [r4, #8]
   1fb16:	491a      	ldr	r1, [pc, #104]	; (1fb80 <cmd_id_reset+0x9c>)
   1fb18:	aa02      	add	r2, sp, #8
   1fb1a:	f7f8 fb1b 	bl	18154 <bt_addr_le_from_str>
		if (err) {
   1fb1e:	4604      	mov	r4, r0
   1fb20:	b168      	cbz	r0, 1fb3e <cmd_id_reset+0x5a>
			shell_print(sh, "Invalid address");
   1fb22:	4a18      	ldr	r2, [pc, #96]	; (1fb84 <cmd_id_reset+0xa0>)
   1fb24:	2108      	movs	r1, #8
   1fb26:	4628      	mov	r0, r5
   1fb28:	f00d fd28 	bl	2d57c <shell_fprintf>
			return err;
   1fb2c:	e7e7      	b.n	1fafe <cmd_id_reset+0x1a>
		bt_addr_le_copy(&addr, BT_ADDR_LE_ANY);
   1fb2e:	2300      	movs	r3, #0
   1fb30:	a904      	add	r1, sp, #16
   1fb32:	a802      	add	r0, sp, #8
   1fb34:	9304      	str	r3, [sp, #16]
   1fb36:	f8cd 3013 	str.w	r3, [sp, #19]
   1fb3a:	f00f ff3b 	bl	2f9b4 <bt_addr_le_copy>
	err = bt_id_reset(id, &addr, NULL);
   1fb3e:	2200      	movs	r2, #0
   1fb40:	a902      	add	r1, sp, #8
   1fb42:	4630      	mov	r0, r6
   1fb44:	f7fa f990 	bl	19e68 <bt_id_reset>
	if (err < 0) {
   1fb48:	1e04      	subs	r4, r0, #0
   1fb4a:	da07      	bge.n	1fb5c <cmd_id_reset+0x78>
		shell_print(sh, "Resetting ID %u failed (err %d)", id, err);
   1fb4c:	4a0e      	ldr	r2, [pc, #56]	; (1fb88 <cmd_id_reset+0xa4>)
   1fb4e:	9400      	str	r4, [sp, #0]
   1fb50:	4633      	mov	r3, r6
   1fb52:	2108      	movs	r1, #8
   1fb54:	4628      	mov	r0, r5
   1fb56:	f00d fd11 	bl	2d57c <shell_fprintf>
		return err;
   1fb5a:	e7d0      	b.n	1fafe <cmd_id_reset+0x1a>
	bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1fb5c:	ac04      	add	r4, sp, #16
   1fb5e:	4621      	mov	r1, r4
   1fb60:	221e      	movs	r2, #30
   1fb62:	a802      	add	r0, sp, #8
   1fb64:	f7ff fae0 	bl	1f128 <bt_addr_le_to_str>
	shell_print(sh, "Identity %u reset: %s", id, addr_str);
   1fb68:	9400      	str	r4, [sp, #0]
   1fb6a:	4a08      	ldr	r2, [pc, #32]	; (1fb8c <cmd_id_reset+0xa8>)
   1fb6c:	4633      	mov	r3, r6
   1fb6e:	2108      	movs	r1, #8
   1fb70:	4628      	mov	r0, r5
   1fb72:	f00d fd03 	bl	2d57c <shell_fprintf>
	return 0;
   1fb76:	2400      	movs	r4, #0
   1fb78:	e7c1      	b.n	1fafe <cmd_id_reset+0x1a>
   1fb7a:	bf00      	nop
   1fb7c:	0003620c 	.word	0x0003620c
   1fb80:	00034932 	.word	0x00034932
   1fb84:	0003613a 	.word	0x0003613a
   1fb88:	00036264 	.word	0x00036264
   1fb8c:	00036285 	.word	0x00036285

0001fb90 <cmd_id_create>:
{
   1fb90:	b570      	push	{r4, r5, r6, lr}
	if (argc > 1) {
   1fb92:	2901      	cmp	r1, #1
{
   1fb94:	b08c      	sub	sp, #48	; 0x30
   1fb96:	4605      	mov	r5, r0
   1fb98:	4613      	mov	r3, r2
	if (argc > 1) {
   1fb9a:	d919      	bls.n	1fbd0 <cmd_id_create+0x40>
		err = bt_addr_le_from_str(argv[1], "random", &addr);
   1fb9c:	4918      	ldr	r1, [pc, #96]	; (1fc00 <cmd_id_create+0x70>)
   1fb9e:	6858      	ldr	r0, [r3, #4]
   1fba0:	aa02      	add	r2, sp, #8
   1fba2:	f7f8 fad7 	bl	18154 <bt_addr_le_from_str>
		if (err) {
   1fba6:	b120      	cbz	r0, 1fbb2 <cmd_id_create+0x22>
			shell_error(sh, "Invalid address");
   1fba8:	4a16      	ldr	r2, [pc, #88]	; (1fc04 <cmd_id_create+0x74>)
   1fbaa:	2101      	movs	r1, #1
   1fbac:	4628      	mov	r0, r5
   1fbae:	f00d fce5 	bl	2d57c <shell_fprintf>
	err = bt_id_create(&addr, NULL);
   1fbb2:	2100      	movs	r1, #0
   1fbb4:	a802      	add	r0, sp, #8
   1fbb6:	f7fa f8f7 	bl	19da8 <bt_id_create>
	if (err < 0) {
   1fbba:	1e04      	subs	r4, r0, #0
   1fbbc:	da11      	bge.n	1fbe2 <cmd_id_create+0x52>
		shell_error(sh, "Creating new ID failed (err %d)", err);
   1fbbe:	4a12      	ldr	r2, [pc, #72]	; (1fc08 <cmd_id_create+0x78>)
   1fbc0:	4623      	mov	r3, r4
   1fbc2:	2101      	movs	r1, #1
   1fbc4:	4628      	mov	r0, r5
   1fbc6:	f00d fcd9 	bl	2d57c <shell_fprintf>
}
   1fbca:	4620      	mov	r0, r4
   1fbcc:	b00c      	add	sp, #48	; 0x30
   1fbce:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&addr, BT_ADDR_LE_ANY);
   1fbd0:	2300      	movs	r3, #0
   1fbd2:	a904      	add	r1, sp, #16
   1fbd4:	a802      	add	r0, sp, #8
   1fbd6:	9304      	str	r3, [sp, #16]
   1fbd8:	f8cd 3013 	str.w	r3, [sp, #19]
   1fbdc:	f00f feea 	bl	2f9b4 <bt_addr_le_copy>
   1fbe0:	e7e7      	b.n	1fbb2 <cmd_id_create+0x22>
	bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1fbe2:	ae04      	add	r6, sp, #16
   1fbe4:	221e      	movs	r2, #30
   1fbe6:	4631      	mov	r1, r6
   1fbe8:	a802      	add	r0, sp, #8
   1fbea:	f7ff fa9d 	bl	1f128 <bt_addr_le_to_str>
	shell_print(sh, "New identity (%d) created: %s", err, addr_str);
   1fbee:	4623      	mov	r3, r4
   1fbf0:	4a06      	ldr	r2, [pc, #24]	; (1fc0c <cmd_id_create+0x7c>)
   1fbf2:	9600      	str	r6, [sp, #0]
   1fbf4:	2108      	movs	r1, #8
   1fbf6:	4628      	mov	r0, r5
   1fbf8:	f00d fcc0 	bl	2d57c <shell_fprintf>
	return 0;
   1fbfc:	2400      	movs	r4, #0
   1fbfe:	e7e4      	b.n	1fbca <cmd_id_create+0x3a>
   1fc00:	00034932 	.word	0x00034932
   1fc04:	0003613a 	.word	0x0003613a
   1fc08:	0003629c 	.word	0x0003629c
   1fc0c:	000362bd 	.word	0x000362bd

0001fc10 <bt_ready>:
	if (err) {
   1fc10:	4b0c      	ldr	r3, [pc, #48]	; (1fc44 <bt_ready+0x34>)
{
   1fc12:	b510      	push	{r4, lr}
   1fc14:	4604      	mov	r4, r0
   1fc16:	6818      	ldr	r0, [r3, #0]
	if (err) {
   1fc18:	b134      	cbz	r4, 1fc28 <bt_ready+0x18>
		shell_error(ctx_shell, "Bluetooth init failed (err %d)", err);
   1fc1a:	4623      	mov	r3, r4
   1fc1c:	4a0a      	ldr	r2, [pc, #40]	; (1fc48 <bt_ready+0x38>)
}
   1fc1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_error(ctx_shell, "Bluetooth init failed (err %d)", err);
   1fc22:	2101      	movs	r1, #1
   1fc24:	f00d bcaa 	b.w	2d57c <shell_fprintf>
	shell_print(ctx_shell, "Bluetooth initialized");
   1fc28:	4a08      	ldr	r2, [pc, #32]	; (1fc4c <bt_ready+0x3c>)
   1fc2a:	2108      	movs	r1, #8
   1fc2c:	f00d fca6 	bl	2d57c <shell_fprintf>
	bt_le_scan_cb_register(&scan_callbacks);
   1fc30:	4807      	ldr	r0, [pc, #28]	; (1fc50 <bt_ready+0x40>)
   1fc32:	f7fa fd6f 	bl	1a714 <bt_le_scan_cb_register>
	default_conn = NULL;
   1fc36:	4b07      	ldr	r3, [pc, #28]	; (1fc54 <bt_ready+0x44>)
	bt_conn_cb_register(&conn_callbacks);
   1fc38:	4807      	ldr	r0, [pc, #28]	; (1fc58 <bt_ready+0x48>)
	default_conn = NULL;
   1fc3a:	601c      	str	r4, [r3, #0]
}
   1fc3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&conn_callbacks);
   1fc40:	f7fb bab6 	b.w	1b1b0 <bt_conn_cb_register>
   1fc44:	20002d80 	.word	0x20002d80
   1fc48:	000362dc 	.word	0x000362dc
   1fc4c:	0003225e 	.word	0x0003225e
   1fc50:	2000059c 	.word	0x2000059c
   1fc54:	20002d84 	.word	0x20002d84
   1fc58:	20000588 	.word	0x20000588

0001fc5c <cmd_init>:
{
   1fc5c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ctx_shell = sh;
   1fc60:	4b1b      	ldr	r3, [pc, #108]	; (1fcd0 <cmd_init+0x74>)
		if (!strcmp(arg, "no-settings-load")) {
   1fc62:	f8df a078 	ldr.w	sl, [pc, #120]	; 1fcdc <cmd_init+0x80>
		} else if (!strcmp(arg, "sync")) {
   1fc66:	f8df b078 	ldr.w	fp, [pc, #120]	; 1fce0 <cmd_init+0x84>
	ctx_shell = sh;
   1fc6a:	6018      	str	r0, [r3, #0]
{
   1fc6c:	4605      	mov	r5, r0
   1fc6e:	460f      	mov	r7, r1
   1fc70:	4690      	mov	r8, r2
	for (size_t argn = 1; argn < argc; argn++) {
   1fc72:	2401      	movs	r4, #1
	bool no_ready_cb = false;
   1fc74:	2600      	movs	r6, #0
	for (size_t argn = 1; argn < argc; argn++) {
   1fc76:	42bc      	cmp	r4, r7
   1fc78:	d30c      	bcc.n	1fc94 <cmd_init+0x38>
	if (no_ready_cb) {
   1fc7a:	b30e      	cbz	r6, 1fcc0 <cmd_init+0x64>
		err = bt_enable(bt_ready);
   1fc7c:	4815      	ldr	r0, [pc, #84]	; (1fcd4 <cmd_init+0x78>)
   1fc7e:	f7f9 feeb 	bl	19a58 <bt_enable>
		if (err) {
   1fc82:	4604      	mov	r4, r0
   1fc84:	b1b0      	cbz	r0, 1fcb4 <cmd_init+0x58>
			shell_error(sh, "Bluetooth init failed (err %d)",
   1fc86:	4603      	mov	r3, r0
   1fc88:	4a13      	ldr	r2, [pc, #76]	; (1fcd8 <cmd_init+0x7c>)
   1fc8a:	2101      	movs	r1, #1
   1fc8c:	4628      	mov	r0, r5
   1fc8e:	f00d fc75 	bl	2d57c <shell_fprintf>
   1fc92:	e00f      	b.n	1fcb4 <cmd_init+0x58>
		const char *arg = argv[argn];
   1fc94:	f858 9024 	ldr.w	r9, [r8, r4, lsl #2]
		if (!strcmp(arg, "no-settings-load")) {
   1fc98:	4651      	mov	r1, sl
   1fc9a:	4648      	mov	r0, r9
   1fc9c:	f7ed fb80 	bl	d3a0 <strcmp>
   1fca0:	b160      	cbz	r0, 1fcbc <cmd_init+0x60>
		} else if (!strcmp(arg, "sync")) {
   1fca2:	4659      	mov	r1, fp
   1fca4:	4648      	mov	r0, r9
   1fca6:	f7ed fb7b 	bl	d3a0 <strcmp>
   1fcaa:	b130      	cbz	r0, 1fcba <cmd_init+0x5e>
			shell_help(sh);
   1fcac:	4628      	mov	r0, r5
   1fcae:	f00d fc8a 	bl	2d5c6 <shell_help>
			return SHELL_CMD_HELP_PRINTED;
   1fcb2:	2401      	movs	r4, #1
}
   1fcb4:	4620      	mov	r0, r4
   1fcb6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			no_ready_cb = true;
   1fcba:	2601      	movs	r6, #1
	for (size_t argn = 1; argn < argc; argn++) {
   1fcbc:	3401      	adds	r4, #1
   1fcbe:	e7da      	b.n	1fc76 <cmd_init+0x1a>
		err = bt_enable(NULL);
   1fcc0:	4630      	mov	r0, r6
   1fcc2:	f7f9 fec9 	bl	19a58 <bt_enable>
   1fcc6:	4604      	mov	r4, r0
		bt_ready(err);
   1fcc8:	f7ff ffa2 	bl	1fc10 <bt_ready>
   1fccc:	e7f2      	b.n	1fcb4 <cmd_init+0x58>
   1fcce:	bf00      	nop
   1fcd0:	20002d80 	.word	0x20002d80
   1fcd4:	0001fc11 	.word	0x0001fc11
   1fcd8:	000362dc 	.word	0x000362dc
   1fcdc:	000362fc 	.word	0x000362fc
   1fce0:	0003630d 	.word	0x0003630d

0001fce4 <cmd_oob>:
{
   1fce4:	b5f0      	push	{r4, r5, r6, r7, lr}
	err = bt_le_oob_get_local(selected_id, &oob_local);
   1fce6:	4b1e      	ldr	r3, [pc, #120]	; (1fd60 <cmd_oob+0x7c>)
   1fce8:	491e      	ldr	r1, [pc, #120]	; (1fd64 <cmd_oob+0x80>)
{
   1fcea:	b09d      	sub	sp, #116	; 0x74
   1fcec:	4604      	mov	r4, r0
	err = bt_le_oob_get_local(selected_id, &oob_local);
   1fcee:	7818      	ldrb	r0, [r3, #0]
   1fcf0:	f7fa fa54 	bl	1a19c <bt_le_oob_get_local>
	if (err) {
   1fcf4:	4605      	mov	r5, r0
   1fcf6:	b138      	cbz	r0, 1fd08 <cmd_oob+0x24>
		shell_error(sh, "OOB data failed");
   1fcf8:	4a1b      	ldr	r2, [pc, #108]	; (1fd68 <cmd_oob+0x84>)
   1fcfa:	2101      	movs	r1, #1
   1fcfc:	4620      	mov	r0, r4
   1fcfe:	f00d fc3d 	bl	2d57c <shell_fprintf>
}
   1fd02:	4628      	mov	r0, r5
   1fd04:	b01d      	add	sp, #116	; 0x74
   1fd06:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_to_str(&oob->addr, addr, sizeof(addr));
   1fd08:	a902      	add	r1, sp, #8
	bin2hex(oob->le_sc_data.c, sizeof(oob->le_sc_data.c), c, sizeof(c));
   1fd0a:	af0a      	add	r7, sp, #40	; 0x28
	bt_addr_le_to_str(&oob->addr, addr, sizeof(addr));
   1fd0c:	221e      	movs	r2, #30
   1fd0e:	4815      	ldr	r0, [pc, #84]	; (1fd64 <cmd_oob+0x80>)
   1fd10:	f7ff fa0a 	bl	1f128 <bt_addr_le_to_str>
	bin2hex(oob->le_sc_data.r, sizeof(oob->le_sc_data.r), r, sizeof(r));
   1fd14:	ae13      	add	r6, sp, #76	; 0x4c
	bin2hex(oob->le_sc_data.c, sizeof(oob->le_sc_data.c), c, sizeof(c));
   1fd16:	463a      	mov	r2, r7
   1fd18:	2321      	movs	r3, #33	; 0x21
   1fd1a:	2110      	movs	r1, #16
   1fd1c:	4813      	ldr	r0, [pc, #76]	; (1fd6c <cmd_oob+0x88>)
   1fd1e:	f00c fbae 	bl	2c47e <bin2hex>
	bin2hex(oob->le_sc_data.r, sizeof(oob->le_sc_data.r), r, sizeof(r));
   1fd22:	2321      	movs	r3, #33	; 0x21
   1fd24:	4632      	mov	r2, r6
   1fd26:	2110      	movs	r1, #16
   1fd28:	4811      	ldr	r0, [pc, #68]	; (1fd70 <cmd_oob+0x8c>)
   1fd2a:	f00c fba8 	bl	2c47e <bin2hex>
	shell_print(sh, "OOB data:");
   1fd2e:	4620      	mov	r0, r4
   1fd30:	4a10      	ldr	r2, [pc, #64]	; (1fd74 <cmd_oob+0x90>)
   1fd32:	2108      	movs	r1, #8
   1fd34:	f00d fc22 	bl	2d57c <shell_fprintf>
	shell_print(sh, "%-29s %-32s %-32s", "addr", "random", "confirm");
   1fd38:	4b0f      	ldr	r3, [pc, #60]	; (1fd78 <cmd_oob+0x94>)
   1fd3a:	9301      	str	r3, [sp, #4]
   1fd3c:	4b0f      	ldr	r3, [pc, #60]	; (1fd7c <cmd_oob+0x98>)
   1fd3e:	9300      	str	r3, [sp, #0]
   1fd40:	4620      	mov	r0, r4
   1fd42:	4b0f      	ldr	r3, [pc, #60]	; (1fd80 <cmd_oob+0x9c>)
   1fd44:	4a0f      	ldr	r2, [pc, #60]	; (1fd84 <cmd_oob+0xa0>)
   1fd46:	2108      	movs	r1, #8
   1fd48:	f00d fc18 	bl	2d57c <shell_fprintf>
	shell_print(sh, "%29s %32s %32s", addr, r, c);
   1fd4c:	e9cd 6700 	strd	r6, r7, [sp]
   1fd50:	4a0d      	ldr	r2, [pc, #52]	; (1fd88 <cmd_oob+0xa4>)
   1fd52:	ab02      	add	r3, sp, #8
   1fd54:	2108      	movs	r1, #8
   1fd56:	4620      	mov	r0, r4
   1fd58:	f00d fc10 	bl	2d57c <shell_fprintf>
}
   1fd5c:	e7d1      	b.n	1fd02 <cmd_oob+0x1e>
   1fd5e:	bf00      	nop
   1fd60:	20003a4e 	.word	0x20003a4e
   1fd64:	20003a27 	.word	0x20003a27
   1fd68:	00036312 	.word	0x00036312
   1fd6c:	20003a3e 	.word	0x20003a3e
   1fd70:	20003a2e 	.word	0x20003a2e
   1fd74:	00036323 	.word	0x00036323
   1fd78:	00036346 	.word	0x00036346
   1fd7c:	00034932 	.word	0x00034932
   1fd80:	0003632e 	.word	0x0003632e
   1fd84:	00036333 	.word	0x00036333
   1fd88:	0003634e 	.word	0x0003634e

0001fd8c <cmd_hci_cmd>:
{
   1fd8c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fd90:	4616      	mov	r6, r2
   1fd92:	460f      	mov	r7, r1
	ogf = strtoul(argv[1], NULL, 16);
   1fd94:	2210      	movs	r2, #16
   1fd96:	2100      	movs	r1, #0
{
   1fd98:	4605      	mov	r5, r0
	ogf = strtoul(argv[1], NULL, 16);
   1fd9a:	6870      	ldr	r0, [r6, #4]
   1fd9c:	f00c f90e 	bl	2bfbc <strtoul>
	ocf = strtoul(argv[2], NULL, 16);
   1fda0:	2210      	movs	r2, #16
	ogf = strtoul(argv[1], NULL, 16);
   1fda2:	4680      	mov	r8, r0
	ocf = strtoul(argv[2], NULL, 16);
   1fda4:	2100      	movs	r1, #0
   1fda6:	68b0      	ldr	r0, [r6, #8]
   1fda8:	f00c f908 	bl	2bfbc <strtoul>
	if (argc > 3) {
   1fdac:	2f03      	cmp	r7, #3
	ocf = strtoul(argv[2], NULL, 16);
   1fdae:	4604      	mov	r4, r0
	if (argc > 3) {
   1fdb0:	d939      	bls.n	1fe26 <cmd_hci_cmd+0x9a>
		if (strlen(argv[3]) > 2 * HCI_CMD_MAX_PARAM) {
   1fdb2:	68f0      	ldr	r0, [r6, #12]
   1fdb4:	f7ed fafe 	bl	d3b4 <strlen>
   1fdb8:	2882      	cmp	r0, #130	; 0x82
   1fdba:	d90a      	bls.n	1fdd2 <cmd_hci_cmd+0x46>
			shell_error(sh, "Data field too large\n");
   1fdbc:	4a20      	ldr	r2, [pc, #128]	; (1fe40 <cmd_hci_cmd+0xb4>)
			shell_error(sh, "HCI command illegal data field\n");
   1fdbe:	2101      	movs	r1, #1
   1fdc0:	4628      	mov	r0, r5
   1fdc2:	f00d fbdb 	bl	2d57c <shell_fprintf>
			return -ENOEXEC;
   1fdc6:	f06f 0407 	mvn.w	r4, #7
}
   1fdca:	4620      	mov	r0, r4
   1fdcc:	b002      	add	sp, #8
   1fdce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = hex2bin(argv[3], strlen(argv[3]), &hex_data[hex_data_len],
   1fdd2:	68f6      	ldr	r6, [r6, #12]
   1fdd4:	4630      	mov	r0, r6
   1fdd6:	f7ed faed 	bl	d3b4 <strlen>
   1fdda:	4a1a      	ldr	r2, [pc, #104]	; (1fe44 <cmd_hci_cmd+0xb8>)
   1fddc:	4601      	mov	r1, r0
   1fdde:	2341      	movs	r3, #65	; 0x41
   1fde0:	4630      	mov	r0, r6
   1fde2:	f00c fb77 	bl	2c4d4 <hex2bin>
		if (!len) {
   1fde6:	4607      	mov	r7, r0
   1fde8:	b908      	cbnz	r0, 1fdee <cmd_hci_cmd+0x62>
			shell_error(sh, "HCI command illegal data field\n");
   1fdea:	4a17      	ldr	r2, [pc, #92]	; (1fe48 <cmd_hci_cmd+0xbc>)
   1fdec:	e7e7      	b.n	1fdbe <cmd_hci_cmd+0x32>
		buf = bt_hci_cmd_create(BT_OP(ogf, ocf), len);
   1fdee:	ea44 2088 	orr.w	r0, r4, r8, lsl #10
   1fdf2:	b2f9      	uxtb	r1, r7
   1fdf4:	b280      	uxth	r0, r0
   1fdf6:	f7f8 fe1d 	bl	18a34 <bt_hci_cmd_create>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1fdfa:	4912      	ldr	r1, [pc, #72]	; (1fe44 <cmd_hci_cmd+0xb8>)
   1fdfc:	4606      	mov	r6, r0
   1fdfe:	463a      	mov	r2, r7
   1fe00:	3008      	adds	r0, #8
   1fe02:	f00f fe3a 	bl	2fa7a <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_OP(ogf, ocf), buf, &rsp);
   1fe06:	ea44 2088 	orr.w	r0, r4, r8, lsl #10
   1fe0a:	aa01      	add	r2, sp, #4
   1fe0c:	4631      	mov	r1, r6
   1fe0e:	b280      	uxth	r0, r0
   1fe10:	f7f8 fe58 	bl	18ac4 <bt_hci_cmd_send_sync>
	if (err) {
   1fe14:	4604      	mov	r4, r0
   1fe16:	b140      	cbz	r0, 1fe2a <cmd_hci_cmd+0x9e>
		shell_error(sh, "HCI command failed (err %d)", err);
   1fe18:	4603      	mov	r3, r0
   1fe1a:	4a0c      	ldr	r2, [pc, #48]	; (1fe4c <cmd_hci_cmd+0xc0>)
   1fe1c:	2101      	movs	r1, #1
   1fe1e:	4628      	mov	r0, r5
   1fe20:	f00d fbac 	bl	2d57c <shell_fprintf>
		return err;
   1fe24:	e7d1      	b.n	1fdca <cmd_hci_cmd+0x3e>
	struct net_buf *buf = NULL, *rsp;
   1fe26:	2600      	movs	r6, #0
   1fe28:	e7ed      	b.n	1fe06 <cmd_hci_cmd+0x7a>
		shell_hexdump(sh, rsp->data, rsp->len);
   1fe2a:	9b01      	ldr	r3, [sp, #4]
   1fe2c:	4628      	mov	r0, r5
   1fe2e:	899a      	ldrh	r2, [r3, #12]
   1fe30:	6899      	ldr	r1, [r3, #8]
   1fe32:	f00d fbb0 	bl	2d596 <shell_hexdump>
		net_buf_unref(rsp);
   1fe36:	9801      	ldr	r0, [sp, #4]
   1fe38:	f001 f96e 	bl	21118 <net_buf_unref>
	return 0;
   1fe3c:	e7c5      	b.n	1fdca <cmd_hci_cmd+0x3e>
   1fe3e:	bf00      	nop
   1fe40:	0003635e 	.word	0x0003635e
   1fe44:	200039e6 	.word	0x200039e6
   1fe48:	00036375 	.word	0x00036375
   1fe4c:	00036396 	.word	0x00036396

0001fe50 <cmd_chan_map>:
{
   1fe50:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (hex2bin(argv[1], strlen(argv[1]), chan_map, 5) == 0) {
   1fe52:	6854      	ldr	r4, [r2, #4]
	uint8_t chan_map[5] = {};
   1fe54:	2300      	movs	r3, #0
{
   1fe56:	4605      	mov	r5, r0
	if (hex2bin(argv[1], strlen(argv[1]), chan_map, 5) == 0) {
   1fe58:	4620      	mov	r0, r4
	uint8_t chan_map[5] = {};
   1fe5a:	9300      	str	r3, [sp, #0]
   1fe5c:	f88d 3004 	strb.w	r3, [sp, #4]
	if (hex2bin(argv[1], strlen(argv[1]), chan_map, 5) == 0) {
   1fe60:	f7ed faa8 	bl	d3b4 <strlen>
   1fe64:	2305      	movs	r3, #5
   1fe66:	4601      	mov	r1, r0
   1fe68:	466a      	mov	r2, sp
   1fe6a:	4620      	mov	r0, r4
   1fe6c:	f00c fb32 	bl	2c4d4 <hex2bin>
   1fe70:	b1d0      	cbz	r0, 1fea8 <cmd_chan_map+0x58>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1fe72:	f89d 3000 	ldrb.w	r3, [sp]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1fe76:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1fe7a:	f88d 2000 	strb.w	r2, [sp]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1fe7e:	f88d 3004 	strb.w	r3, [sp, #4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1fe82:	f89d 2003 	ldrb.w	r2, [sp, #3]
		uint8_t tmp = ((uint8_t *)buf)[i];
   1fe86:	f89d 3001 	ldrb.w	r3, [sp, #1]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1fe8a:	f88d 3003 	strb.w	r3, [sp, #3]
	err = bt_le_set_chan_map(chan_map);
   1fe8e:	4668      	mov	r0, sp
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1fe90:	f88d 2001 	strb.w	r2, [sp, #1]
   1fe94:	f7f9 fe86 	bl	19ba4 <bt_le_set_chan_map>
	if (err) {
   1fe98:	4604      	mov	r4, r0
   1fe9a:	b978      	cbnz	r0, 1febc <cmd_chan_map+0x6c>
		shell_print(sh, "Channel map set");
   1fe9c:	4a0b      	ldr	r2, [pc, #44]	; (1fecc <cmd_chan_map+0x7c>)
   1fe9e:	2108      	movs	r1, #8
   1fea0:	4628      	mov	r0, r5
   1fea2:	f00d fb6b 	bl	2d57c <shell_fprintf>
   1fea6:	e006      	b.n	1feb6 <cmd_chan_map+0x66>
		shell_error(sh, "Invalid channel map");
   1fea8:	4a09      	ldr	r2, [pc, #36]	; (1fed0 <cmd_chan_map+0x80>)
   1feaa:	2101      	movs	r1, #1
   1feac:	4628      	mov	r0, r5
   1feae:	f00d fb65 	bl	2d57c <shell_fprintf>
   1feb2:	f06f 0407 	mvn.w	r4, #7
}
   1feb6:	4620      	mov	r0, r4
   1feb8:	b003      	add	sp, #12
   1feba:	bd30      	pop	{r4, r5, pc}
		shell_error(sh, "Failed to set channel map (err %d)", err);
   1febc:	4603      	mov	r3, r0
   1febe:	4a05      	ldr	r2, [pc, #20]	; (1fed4 <cmd_chan_map+0x84>)
   1fec0:	2101      	movs	r1, #1
   1fec2:	4628      	mov	r0, r5
   1fec4:	f00d fb5a 	bl	2d57c <shell_fprintf>
   1fec8:	e7f5      	b.n	1feb6 <cmd_chan_map+0x66>
   1feca:	bf00      	nop
   1fecc:	000363ec 	.word	0x000363ec
   1fed0:	000363b3 	.word	0x000363b3
   1fed4:	000363c8 	.word	0x000363c8

0001fed8 <disconnected>:
{
   1fed8:	b530      	push	{r4, r5, lr}
   1feda:	b08b      	sub	sp, #44	; 0x2c
   1fedc:	460d      	mov	r5, r1
	conn_addr_str(conn, addr, sizeof(addr));
   1fede:	221e      	movs	r2, #30
   1fee0:	a902      	add	r1, sp, #8
{
   1fee2:	4604      	mov	r4, r0
	conn_addr_str(conn, addr, sizeof(addr));
   1fee4:	f00f fd7f 	bl	2f9e6 <conn_addr_str>
	shell_print(ctx_shell, "Disconnected: %s (reason 0x%02x)", addr, reason);
   1fee8:	4808      	ldr	r0, [pc, #32]	; (1ff0c <disconnected+0x34>)
   1feea:	9500      	str	r5, [sp, #0]
	if (default_conn == conn) {
   1feec:	4d08      	ldr	r5, [pc, #32]	; (1ff10 <disconnected+0x38>)
	shell_print(ctx_shell, "Disconnected: %s (reason 0x%02x)", addr, reason);
   1feee:	6800      	ldr	r0, [r0, #0]
   1fef0:	4a08      	ldr	r2, [pc, #32]	; (1ff14 <disconnected+0x3c>)
   1fef2:	ab02      	add	r3, sp, #8
   1fef4:	2108      	movs	r1, #8
   1fef6:	f00d fb41 	bl	2d57c <shell_fprintf>
	if (default_conn == conn) {
   1fefa:	6828      	ldr	r0, [r5, #0]
   1fefc:	42a0      	cmp	r0, r4
   1fefe:	d103      	bne.n	1ff08 <disconnected+0x30>
		bt_conn_unref(default_conn);
   1ff00:	f7fa fee6 	bl	1acd0 <bt_conn_unref>
		default_conn = NULL;
   1ff04:	2300      	movs	r3, #0
   1ff06:	602b      	str	r3, [r5, #0]
}
   1ff08:	b00b      	add	sp, #44	; 0x2c
   1ff0a:	bd30      	pop	{r4, r5, pc}
   1ff0c:	20002d80 	.word	0x20002d80
   1ff10:	20002d84 	.word	0x20002d84
   1ff14:	000363fd 	.word	0x000363fd

0001ff18 <connected>:
{
   1ff18:	b530      	push	{r4, r5, lr}
   1ff1a:	b08b      	sub	sp, #44	; 0x2c
   1ff1c:	460c      	mov	r4, r1
	conn_addr_str(conn, addr, sizeof(addr));
   1ff1e:	221e      	movs	r2, #30
   1ff20:	a902      	add	r1, sp, #8
{
   1ff22:	4605      	mov	r5, r0
	conn_addr_str(conn, addr, sizeof(addr));
   1ff24:	f00f fd5f 	bl	2f9e6 <conn_addr_str>
	if (err) {
   1ff28:	4810      	ldr	r0, [pc, #64]	; (1ff6c <connected+0x54>)
   1ff2a:	b17c      	cbz	r4, 1ff4c <connected+0x34>
		shell_error(ctx_shell, "Failed to connect to %s (0x%02x)", addr,
   1ff2c:	9400      	str	r4, [sp, #0]
   1ff2e:	4a10      	ldr	r2, [pc, #64]	; (1ff70 <connected+0x58>)
   1ff30:	6800      	ldr	r0, [r0, #0]
   1ff32:	ab02      	add	r3, sp, #8
   1ff34:	2101      	movs	r1, #1
   1ff36:	f00d fb21 	bl	2d57c <shell_fprintf>
	if (pairing_conn) {
   1ff3a:	4c0e      	ldr	r4, [pc, #56]	; (1ff74 <connected+0x5c>)
   1ff3c:	6820      	ldr	r0, [r4, #0]
   1ff3e:	b118      	cbz	r0, 1ff48 <connected+0x30>
		bt_conn_unref(pairing_conn);
   1ff40:	f7fa fec6 	bl	1acd0 <bt_conn_unref>
		pairing_conn = NULL;
   1ff44:	2300      	movs	r3, #0
   1ff46:	6023      	str	r3, [r4, #0]
}
   1ff48:	b00b      	add	sp, #44	; 0x2c
   1ff4a:	bd30      	pop	{r4, r5, pc}
	if (!default_conn) {
   1ff4c:	4c0a      	ldr	r4, [pc, #40]	; (1ff78 <connected+0x60>)
	shell_print(ctx_shell, "Connected: %s", addr);
   1ff4e:	4a0b      	ldr	r2, [pc, #44]	; (1ff7c <connected+0x64>)
   1ff50:	6800      	ldr	r0, [r0, #0]
   1ff52:	ab02      	add	r3, sp, #8
   1ff54:	2108      	movs	r1, #8
   1ff56:	f00d fb11 	bl	2d57c <shell_fprintf>
	if (!default_conn) {
   1ff5a:	6823      	ldr	r3, [r4, #0]
   1ff5c:	2b00      	cmp	r3, #0
   1ff5e:	d1ec      	bne.n	1ff3a <connected+0x22>
		default_conn = bt_conn_ref(conn);
   1ff60:	4628      	mov	r0, r5
   1ff62:	f00e fb44 	bl	2e5ee <bt_conn_ref>
   1ff66:	6020      	str	r0, [r4, #0]
   1ff68:	e7e7      	b.n	1ff3a <connected+0x22>
   1ff6a:	bf00      	nop
   1ff6c:	20002d80 	.word	0x20002d80
   1ff70:	0003641f 	.word	0x0003641f
   1ff74:	20002d88 	.word	0x20002d88
   1ff78:	20002d84 	.word	0x20002d84
   1ff7c:	00036441 	.word	0x00036441

0001ff80 <write_func>:
static struct bt_gatt_write_params write_params;
static uint8_t gatt_write_buf[CHAR_SIZE_MAX];

static void write_func(struct bt_conn *conn, uint8_t err,
		       struct bt_gatt_write_params *params)
{
   1ff80:	b508      	push	{r3, lr}
	shell_print(ctx_shell, "Write complete: err 0x%02x", err);
   1ff82:	4807      	ldr	r0, [pc, #28]	; (1ffa0 <write_func+0x20>)
   1ff84:	4a07      	ldr	r2, [pc, #28]	; (1ffa4 <write_func+0x24>)
   1ff86:	6800      	ldr	r0, [r0, #0]
{
   1ff88:	460b      	mov	r3, r1
	shell_print(ctx_shell, "Write complete: err 0x%02x", err);
   1ff8a:	2108      	movs	r1, #8
   1ff8c:	f00d faf6 	bl	2d57c <shell_fprintf>

	(void)memset(&write_params, 0, sizeof(write_params));
}
   1ff90:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memset(&write_params, 0, sizeof(write_params));
   1ff94:	4804      	ldr	r0, [pc, #16]	; (1ffa8 <write_func+0x28>)
   1ff96:	2210      	movs	r2, #16
   1ff98:	2100      	movs	r1, #0
   1ff9a:	f010 bb46 	b.w	3062a <memset>
   1ff9e:	bf00      	nop
   1ffa0:	20002d80 	.word	0x20002d80
   1ffa4:	00036600 	.word	0x00036600
   1ffa8:	20002dd0 	.word	0x20002dd0

0001ffac <cmd_set>:

	return BT_GATT_ITER_CONTINUE;
}

static int cmd_set(const struct shell *sh, size_t argc, char *argv[])
{
   1ffac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ffae:	4614      	mov	r4, r2
   1ffb0:	b085      	sub	sp, #20
   1ffb2:	4607      	mov	r7, r0
   1ffb4:	460e      	mov	r6, r1
	uint16_t handle;
	struct set_data data;

	handle = strtoul(argv[1], NULL, 16);
   1ffb6:	6860      	ldr	r0, [r4, #4]
   1ffb8:	2210      	movs	r2, #16
   1ffba:	2100      	movs	r1, #0
   1ffbc:	f00b fffe 	bl	2bfbc <strtoul>

	data.sh = sh;
	data.argc = argc - 2;
	data.argv = argv + 2;
   1ffc0:	3408      	adds	r4, #8
	handle = strtoul(argv[1], NULL, 16);
   1ffc2:	b285      	uxth	r5, r0
	data.argv = argv + 2;
   1ffc4:	9402      	str	r4, [sp, #8]
	data.err = 0;

	bt_gatt_foreach_attr(handle, handle, set_cb, &data);
   1ffc6:	466b      	mov	r3, sp
	data.err = 0;
   1ffc8:	2400      	movs	r4, #0
	bt_gatt_foreach_attr(handle, handle, set_cb, &data);
   1ffca:	4a0c      	ldr	r2, [pc, #48]	; (1fffc <cmd_set+0x50>)
	data.sh = sh;
   1ffcc:	9700      	str	r7, [sp, #0]
	data.argc = argc - 2;
   1ffce:	3e02      	subs	r6, #2
	bt_gatt_foreach_attr(handle, handle, set_cb, &data);
   1ffd0:	4629      	mov	r1, r5
   1ffd2:	4628      	mov	r0, r5
	data.argc = argc - 2;
   1ffd4:	9601      	str	r6, [sp, #4]
	data.err = 0;
   1ffd6:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, set_cb, &data);
   1ffd8:	f00f fd1c 	bl	2fa14 <bt_gatt_foreach_attr>

	if (data.err < 0) {
   1ffdc:	9b03      	ldr	r3, [sp, #12]
   1ffde:	42a3      	cmp	r3, r4
   1ffe0:	db08      	blt.n	1fff4 <cmd_set+0x48>
		return -ENOEXEC;
	}

	bt_gatt_foreach_attr(handle, handle, get_cb, (void *)sh);
   1ffe2:	4628      	mov	r0, r5
   1ffe4:	4a06      	ldr	r2, [pc, #24]	; (20000 <cmd_set+0x54>)
   1ffe6:	463b      	mov	r3, r7
   1ffe8:	4629      	mov	r1, r5
   1ffea:	f00f fd13 	bl	2fa14 <bt_gatt_foreach_attr>

	return 0;
   1ffee:	4620      	mov	r0, r4
}
   1fff0:	b005      	add	sp, #20
   1fff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOEXEC;
   1fff4:	f06f 0007 	mvn.w	r0, #7
   1fff8:	e7fa      	b.n	1fff0 <cmd_set+0x44>
   1fffa:	bf00      	nop
   1fffc:	00020aa9 	.word	0x00020aa9
   20000:	0002010d 	.word	0x0002010d

00020004 <cmd_get>:
{
   20004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   20006:	4615      	mov	r5, r2
   20008:	460f      	mov	r7, r1
   2000a:	4606      	mov	r6, r0
	start = strtoul(argv[1], NULL, 16);
   2000c:	2210      	movs	r2, #16
   2000e:	6868      	ldr	r0, [r5, #4]
   20010:	2100      	movs	r1, #0
   20012:	f00b ffd3 	bl	2bfbc <strtoul>
	if (argc > 2) {
   20016:	2f02      	cmp	r7, #2
	start = strtoul(argv[1], NULL, 16);
   20018:	b284      	uxth	r4, r0
	if (argc > 2) {
   2001a:	d90c      	bls.n	20036 <cmd_get+0x32>
		end = strtoul(argv[2], NULL, 16);
   2001c:	2100      	movs	r1, #0
   2001e:	68a8      	ldr	r0, [r5, #8]
   20020:	2210      	movs	r2, #16
   20022:	f00b ffcb 	bl	2bfbc <strtoul>
   20026:	b281      	uxth	r1, r0
	bt_gatt_foreach_attr(start, end, get_cb, (void *)sh);
   20028:	4620      	mov	r0, r4
   2002a:	4a04      	ldr	r2, [pc, #16]	; (2003c <cmd_get+0x38>)
   2002c:	4633      	mov	r3, r6
   2002e:	f00f fcf1 	bl	2fa14 <bt_gatt_foreach_attr>
}
   20032:	2000      	movs	r0, #0
   20034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	end = start;
   20036:	4621      	mov	r1, r4
   20038:	e7f6      	b.n	20028 <cmd_get+0x24>
   2003a:	bf00      	nop
   2003c:	0002010d 	.word	0x0002010d

00020040 <print_attr>:
{
   20040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	stats.attr_count++;
   20044:	4d2e      	ldr	r5, [pc, #184]	; (20100 <print_attr+0xc0>)
   20046:	886b      	ldrh	r3, [r5, #2]
{
   20048:	b091      	sub	sp, #68	; 0x44
	stats.attr_count++;
   2004a:	3301      	adds	r3, #1
   2004c:	806b      	strh	r3, [r5, #2]
{
   2004e:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) ||
   20050:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   20054:	6800      	ldr	r0, [r0, #0]
   20056:	f8ad 3016 	strh.w	r3, [sp, #22]
{
   2005a:	4688      	mov	r8, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) ||
   2005c:	f04f 0900 	mov.w	r9, #0
   20060:	a905      	add	r1, sp, #20
{
   20062:	4617      	mov	r7, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) ||
   20064:	f88d 9014 	strb.w	r9, [sp, #20]
   20068:	f00e f8bb 	bl	2e1e2 <bt_uuid_cmp>
   2006c:	ae06      	add	r6, sp, #24
   2006e:	2800      	cmp	r0, #0
   20070:	d138      	bne.n	200e4 <print_attr+0xa4>
		stats.svc_count++;
   20072:	882b      	ldrh	r3, [r5, #0]
   20074:	3301      	adds	r3, #1
   20076:	802b      	strh	r3, [r5, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   20078:	2300      	movs	r3, #0
   2007a:	f88d 3018 	strb.w	r3, [sp, #24]
   2007e:	6820      	ldr	r0, [r4, #0]
   20080:	f642 0303 	movw	r3, #10243	; 0x2803
   20084:	4631      	mov	r1, r6
   20086:	f8ad 301a 	strh.w	r3, [sp, #26]
   2008a:	f00e f8aa 	bl	2e1e2 <bt_uuid_cmp>
   2008e:	b910      	cbnz	r0, 20096 <print_attr+0x56>
		stats.chrc_count++;
   20090:	88ab      	ldrh	r3, [r5, #4]
   20092:	3301      	adds	r3, #1
   20094:	80ab      	strh	r3, [r5, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   20096:	2300      	movs	r3, #0
   20098:	f88d 3018 	strb.w	r3, [sp, #24]
   2009c:	6820      	ldr	r0, [r4, #0]
   2009e:	f642 1302 	movw	r3, #10498	; 0x2902
   200a2:	4631      	mov	r1, r6
   200a4:	f8ad 301a 	strh.w	r3, [sp, #26]
   200a8:	f00e f89b 	bl	2e1e2 <bt_uuid_cmp>
   200ac:	b930      	cbnz	r0, 200bc <print_attr+0x7c>
   200ae:	4b15      	ldr	r3, [pc, #84]	; (20104 <print_attr+0xc4>)
   200b0:	68a2      	ldr	r2, [r4, #8]
   200b2:	429a      	cmp	r2, r3
		stats.ccc_count++;
   200b4:	bf02      	ittt	eq
   200b6:	88eb      	ldrheq	r3, [r5, #6]
   200b8:	3301      	addeq	r3, #1
   200ba:	80eb      	strheq	r3, [r5, #6]
	bt_uuid_to_str(attr->uuid, str, sizeof(str));
   200bc:	6820      	ldr	r0, [r4, #0]
   200be:	4631      	mov	r1, r6
   200c0:	2225      	movs	r2, #37	; 0x25
   200c2:	f7f8 f80f 	bl	180e4 <bt_uuid_to_str>
	shell_print(sh, "attr %p handle 0x%04x uuid %s perm 0x%02x",
   200c6:	7ca3      	ldrb	r3, [r4, #18]
   200c8:	4a0f      	ldr	r2, [pc, #60]	; (20108 <print_attr+0xc8>)
   200ca:	f8cd 8000 	str.w	r8, [sp]
   200ce:	e9cd 6301 	strd	r6, r3, [sp, #4]
   200d2:	4638      	mov	r0, r7
   200d4:	4623      	mov	r3, r4
   200d6:	2108      	movs	r1, #8
   200d8:	f00d fa50 	bl	2d57c <shell_fprintf>
}
   200dc:	2001      	movs	r0, #1
   200de:	b011      	add	sp, #68	; 0x44
   200e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    !bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   200e4:	f642 0301 	movw	r3, #10241	; 0x2801
   200e8:	6820      	ldr	r0, [r4, #0]
   200ea:	f88d 9018 	strb.w	r9, [sp, #24]
   200ee:	4631      	mov	r1, r6
   200f0:	f8ad 301a 	strh.w	r3, [sp, #26]
   200f4:	f00e f875 	bl	2e1e2 <bt_uuid_cmp>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) ||
   200f8:	2800      	cmp	r0, #0
   200fa:	d0ba      	beq.n	20072 <print_attr+0x32>
   200fc:	e7bc      	b.n	20078 <print_attr+0x38>
   200fe:	bf00      	nop
   20100:	20003914 	.word	0x20003914
   20104:	0001d055 	.word	0x0001d055
   20108:	0003661c 	.word	0x0003661c

0002010c <get_cb>:
{
   2010c:	b5f0      	push	{r4, r5, r6, r7, lr}
   2010e:	b0cd      	sub	sp, #308	; 0x134
   20110:	4605      	mov	r5, r0
	bt_uuid_to_str(attr->uuid, str, sizeof(str));
   20112:	ac02      	add	r4, sp, #8
   20114:	6800      	ldr	r0, [r0, #0]
{
   20116:	4616      	mov	r6, r2
	bt_uuid_to_str(attr->uuid, str, sizeof(str));
   20118:	4621      	mov	r1, r4
   2011a:	2225      	movs	r2, #37	; 0x25
   2011c:	f7f7 ffe2 	bl	180e4 <bt_uuid_to_str>
	shell_print(sh, "attr %p uuid %s perm 0x%02x", attr, str,
   20120:	7cab      	ldrb	r3, [r5, #18]
   20122:	4a11      	ldr	r2, [pc, #68]	; (20168 <get_cb+0x5c>)
   20124:	e9cd 4300 	strd	r4, r3, [sp]
   20128:	2108      	movs	r1, #8
   2012a:	462b      	mov	r3, r5
   2012c:	4630      	mov	r0, r6
   2012e:	f00d fa25 	bl	2d57c <shell_fprintf>
	if (!attr->read) {
   20132:	686f      	ldr	r7, [r5, #4]
   20134:	b1b7      	cbz	r7, 20164 <get_cb+0x58>
	ret = attr->read(NULL, attr, (void *)buf, sizeof(buf), 0);
   20136:	2400      	movs	r4, #0
   20138:	f44f 7380 	mov.w	r3, #256	; 0x100
   2013c:	9400      	str	r4, [sp, #0]
   2013e:	aa0c      	add	r2, sp, #48	; 0x30
   20140:	4629      	mov	r1, r5
   20142:	4620      	mov	r0, r4
   20144:	47b8      	blx	r7
	if (ret < 0) {
   20146:	1e03      	subs	r3, r0, #0
   20148:	da07      	bge.n	2015a <get_cb+0x4e>
		shell_print(sh, "Failed to read: %zd", ret);
   2014a:	4630      	mov	r0, r6
   2014c:	4a07      	ldr	r2, [pc, #28]	; (2016c <get_cb+0x60>)
   2014e:	2108      	movs	r1, #8
   20150:	f00d fa14 	bl	2d57c <shell_fprintf>
		return BT_GATT_ITER_STOP;
   20154:	4620      	mov	r0, r4
}
   20156:	b04d      	add	sp, #308	; 0x134
   20158:	bdf0      	pop	{r4, r5, r6, r7, pc}
	shell_hexdump(sh, buf, ret);
   2015a:	461a      	mov	r2, r3
   2015c:	a90c      	add	r1, sp, #48	; 0x30
   2015e:	4630      	mov	r0, r6
   20160:	f00d fa19 	bl	2d596 <shell_hexdump>
		return BT_GATT_ITER_CONTINUE;
   20164:	2001      	movs	r0, #1
   20166:	e7f6      	b.n	20156 <get_cb+0x4a>
   20168:	00036647 	.word	0x00036647
   2016c:	00036664 	.word	0x00036664

00020170 <cmd_write>:
{
   20170:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!default_conn) {
   20174:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 2023c <cmd_write+0xcc>
   20178:	f8da 3000 	ldr.w	r3, [sl]
{
   2017c:	4606      	mov	r6, r0
   2017e:	4614      	mov	r4, r2
	if (!default_conn) {
   20180:	b943      	cbnz	r3, 20194 <cmd_write+0x24>
		shell_error(sh, "Not connected");
   20182:	4a26      	ldr	r2, [pc, #152]	; (2021c <cmd_write+0xac>)
		shell_error(sh, "Write ongoing");
   20184:	2101      	movs	r1, #1
		shell_error(sh, "No data set");
   20186:	f00d f9f9 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   2018a:	f06f 0407 	mvn.w	r4, #7
}
   2018e:	4620      	mov	r0, r4
   20190:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (write_params.func) {
   20194:	4d22      	ldr	r5, [pc, #136]	; (20220 <cmd_write+0xb0>)
   20196:	682f      	ldr	r7, [r5, #0]
   20198:	b10f      	cbz	r7, 2019e <cmd_write+0x2e>
		shell_error(sh, "Write ongoing");
   2019a:	4a22      	ldr	r2, [pc, #136]	; (20224 <cmd_write+0xb4>)
   2019c:	e7f2      	b.n	20184 <cmd_write+0x14>
	handle = strtoul(argv[1], NULL, 16);
   2019e:	6860      	ldr	r0, [r4, #4]
   201a0:	2210      	movs	r2, #16
   201a2:	4639      	mov	r1, r7
   201a4:	f00b ff0a 	bl	2bfbc <strtoul>
	offset = strtoul(argv[2], NULL, 16);
   201a8:	2210      	movs	r2, #16
   201aa:	4639      	mov	r1, r7
	handle = strtoul(argv[1], NULL, 16);
   201ac:	fa1f f980 	uxth.w	r9, r0
	offset = strtoul(argv[2], NULL, 16);
   201b0:	68a0      	ldr	r0, [r4, #8]
   201b2:	f00b ff03 	bl	2bfbc <strtoul>
	write_params.length = hex2bin(argv[3], strlen(argv[3]),
   201b6:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   201ba:	4c1b      	ldr	r4, [pc, #108]	; (20228 <cmd_write+0xb8>)
	offset = strtoul(argv[2], NULL, 16);
   201bc:	fa1f f880 	uxth.w	r8, r0
	write_params.length = hex2bin(argv[3], strlen(argv[3]),
   201c0:	4658      	mov	r0, fp
   201c2:	f7ed f8f7 	bl	d3b4 <strlen>
   201c6:	f44f 7300 	mov.w	r3, #512	; 0x200
   201ca:	4601      	mov	r1, r0
   201cc:	4622      	mov	r2, r4
   201ce:	4658      	mov	r0, fp
   201d0:	f00c f980 	bl	2c4d4 <hex2bin>
   201d4:	b280      	uxth	r0, r0
   201d6:	81a8      	strh	r0, [r5, #12]
	if (write_params.length == 0) {
   201d8:	b918      	cbnz	r0, 201e2 <cmd_write+0x72>
		shell_error(sh, "No data set");
   201da:	4a14      	ldr	r2, [pc, #80]	; (2022c <cmd_write+0xbc>)
   201dc:	2101      	movs	r1, #1
   201de:	4630      	mov	r0, r6
   201e0:	e7d1      	b.n	20186 <cmd_write+0x16>
	write_params.func = write_func;
   201e2:	4b13      	ldr	r3, [pc, #76]	; (20230 <cmd_write+0xc0>)
	err = bt_gatt_write(default_conn, &write_params);
   201e4:	f8da 0000 	ldr.w	r0, [sl]
	write_params.data = gatt_write_buf;
   201e8:	60ac      	str	r4, [r5, #8]
	err = bt_gatt_write(default_conn, &write_params);
   201ea:	4629      	mov	r1, r5
	write_params.handle = handle;
   201ec:	f8a5 9004 	strh.w	r9, [r5, #4]
	write_params.offset = offset;
   201f0:	f8a5 8006 	strh.w	r8, [r5, #6]
	write_params.func = write_func;
   201f4:	602b      	str	r3, [r5, #0]
	err = bt_gatt_write(default_conn, &write_params);
   201f6:	f7fe fb37 	bl	1e868 <bt_gatt_write>
	if (err) {
   201fa:	4604      	mov	r4, r0
   201fc:	b138      	cbz	r0, 2020e <cmd_write+0x9e>
		shell_error(sh, "Write failed (err %d)", err);
   201fe:	4603      	mov	r3, r0
   20200:	4a0c      	ldr	r2, [pc, #48]	; (20234 <cmd_write+0xc4>)
		write_params.func = NULL;
   20202:	602f      	str	r7, [r5, #0]
		shell_error(sh, "Write failed (err %d)", err);
   20204:	2101      	movs	r1, #1
   20206:	4630      	mov	r0, r6
   20208:	f00d f9b8 	bl	2d57c <shell_fprintf>
   2020c:	e7bf      	b.n	2018e <cmd_write+0x1e>
		shell_print(sh, "Write pending");
   2020e:	4a0a      	ldr	r2, [pc, #40]	; (20238 <cmd_write+0xc8>)
   20210:	2108      	movs	r1, #8
   20212:	4630      	mov	r0, r6
   20214:	f00d f9b2 	bl	2d57c <shell_fprintf>
   20218:	e7b9      	b.n	2018e <cmd_write+0x1e>
   2021a:	bf00      	nop
   2021c:	00035e30 	.word	0x00035e30
   20220:	20002dd0 	.word	0x20002dd0
   20224:	00036679 	.word	0x00036679
   20228:	20003a4f 	.word	0x20003a4f
   2022c:	00036688 	.word	0x00036688
   20230:	0001ff81 	.word	0x0001ff81
   20234:	00036695 	.word	0x00036695
   20238:	000366ac 	.word	0x000366ac
   2023c:	20002d84 	.word	0x20002d84

00020240 <cmd_resubscribe>:
{
   20240:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (subscribe_params.value_handle) {
   20244:	4c26      	ldr	r4, [pc, #152]	; (202e0 <cmd_resubscribe+0xa0>)
   20246:	8923      	ldrh	r3, [r4, #8]
{
   20248:	4607      	mov	r7, r0
   2024a:	4688      	mov	r8, r1
   2024c:	4615      	mov	r5, r2
	if (subscribe_params.value_handle) {
   2024e:	b14b      	cbz	r3, 20264 <cmd_resubscribe+0x24>
		shell_error(sh, "Cannot resubscribe: subscription to %x"
   20250:	4a24      	ldr	r2, [pc, #144]	; (202e4 <cmd_resubscribe+0xa4>)
   20252:	2101      	movs	r1, #1
		shell_error(sh, "Invalid peer address (err %d)", err);
   20254:	f00d f992 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   20258:	f06f 0507 	mvn.w	r5, #7
}
   2025c:	4628      	mov	r0, r5
   2025e:	b002      	add	sp, #8
   20260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   20264:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   20268:	466a      	mov	r2, sp
   2026a:	f7f7 ff73 	bl	18154 <bt_addr_le_from_str>
	if (err) {
   2026e:	4606      	mov	r6, r0
   20270:	b120      	cbz	r0, 2027c <cmd_resubscribe+0x3c>
		shell_error(sh, "Invalid peer address (err %d)", err);
   20272:	4603      	mov	r3, r0
   20274:	4a1c      	ldr	r2, [pc, #112]	; (202e8 <cmd_resubscribe+0xa8>)
   20276:	2101      	movs	r1, #1
   20278:	4638      	mov	r0, r7
   2027a:	e7eb      	b.n	20254 <cmd_resubscribe+0x14>
	subscribe_params.ccc_handle = strtoul(argv[3], NULL, 16);
   2027c:	4601      	mov	r1, r0
   2027e:	2210      	movs	r2, #16
   20280:	68e8      	ldr	r0, [r5, #12]
   20282:	f00b fe9b 	bl	2bfbc <strtoul>
	subscribe_params.value_handle = strtoul(argv[4], NULL, 16);
   20286:	2210      	movs	r2, #16
	subscribe_params.ccc_handle = strtoul(argv[3], NULL, 16);
   20288:	8160      	strh	r0, [r4, #10]
	subscribe_params.value_handle = strtoul(argv[4], NULL, 16);
   2028a:	4631      	mov	r1, r6
   2028c:	6928      	ldr	r0, [r5, #16]
   2028e:	f00b fe95 	bl	2bfbc <strtoul>
	subscribe_params.value = BT_GATT_CCC_NOTIFY;
   20292:	2301      	movs	r3, #1
   20294:	81a3      	strh	r3, [r4, #12]
	if (argc > 5 && !strcmp(argv[5], "ind")) {
   20296:	f1b8 0f05 	cmp.w	r8, #5
	subscribe_params.notify = notify_func;
   2029a:	4b14      	ldr	r3, [pc, #80]	; (202ec <cmd_resubscribe+0xac>)
	subscribe_params.value_handle = strtoul(argv[4], NULL, 16);
   2029c:	8120      	strh	r0, [r4, #8]
	subscribe_params.notify = notify_func;
   2029e:	6023      	str	r3, [r4, #0]
	if (argc > 5 && !strcmp(argv[5], "ind")) {
   202a0:	d906      	bls.n	202b0 <cmd_resubscribe+0x70>
   202a2:	4913      	ldr	r1, [pc, #76]	; (202f0 <cmd_resubscribe+0xb0>)
   202a4:	6968      	ldr	r0, [r5, #20]
   202a6:	f7ed f87b 	bl	d3a0 <strcmp>
   202aa:	b908      	cbnz	r0, 202b0 <cmd_resubscribe+0x70>
		subscribe_params.value = BT_GATT_CCC_INDICATE;
   202ac:	2302      	movs	r3, #2
   202ae:	81a3      	strh	r3, [r4, #12]
	err = bt_gatt_resubscribe(selected_id, &addr, &subscribe_params);
   202b0:	4b10      	ldr	r3, [pc, #64]	; (202f4 <cmd_resubscribe+0xb4>)
   202b2:	4a0b      	ldr	r2, [pc, #44]	; (202e0 <cmd_resubscribe+0xa0>)
   202b4:	7818      	ldrb	r0, [r3, #0]
   202b6:	4669      	mov	r1, sp
   202b8:	f7fe fc60 	bl	1eb7c <bt_gatt_resubscribe>
	if (err) {
   202bc:	4605      	mov	r5, r0
   202be:	b140      	cbz	r0, 202d2 <cmd_resubscribe+0x92>
		subscribe_params.value_handle = 0U;
   202c0:	2300      	movs	r3, #0
   202c2:	8123      	strh	r3, [r4, #8]
		shell_error(sh, "Resubscribe failed (err %d)", err);
   202c4:	4a0c      	ldr	r2, [pc, #48]	; (202f8 <cmd_resubscribe+0xb8>)
   202c6:	4603      	mov	r3, r0
   202c8:	2101      	movs	r1, #1
   202ca:	4638      	mov	r0, r7
   202cc:	f00d f956 	bl	2d57c <shell_fprintf>
   202d0:	e7c4      	b.n	2025c <cmd_resubscribe+0x1c>
		shell_print(sh, "Resubscribed");
   202d2:	4a0a      	ldr	r2, [pc, #40]	; (202fc <cmd_resubscribe+0xbc>)
   202d4:	2108      	movs	r1, #8
   202d6:	4638      	mov	r0, r7
   202d8:	f00d f950 	bl	2d57c <shell_fprintf>
   202dc:	e7be      	b.n	2025c <cmd_resubscribe+0x1c>
   202de:	bf00      	nop
   202e0:	20002db8 	.word	0x20002db8
   202e4:	000366bb 	.word	0x000366bb
   202e8:	00035e11 	.word	0x00035e11
   202ec:	00020a45 	.word	0x00020a45
   202f0:	000366f2 	.word	0x000366f2
   202f4:	20003a4e 	.word	0x20003a4e
   202f8:	000366f6 	.word	0x000366f6
   202fc:	00036713 	.word	0x00036713

00020300 <cmd_subscribe>:
{
   20300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (subscribe_params.value_handle) {
   20304:	4c24      	ldr	r4, [pc, #144]	; (20398 <cmd_subscribe+0x98>)
   20306:	8927      	ldrh	r7, [r4, #8]
{
   20308:	4606      	mov	r6, r0
   2030a:	4688      	mov	r8, r1
   2030c:	4615      	mov	r5, r2
	if (subscribe_params.value_handle) {
   2030e:	b14f      	cbz	r7, 20324 <cmd_subscribe+0x24>
		shell_error(sh, "Cannot subscribe: subscription to %x "
   20310:	4a22      	ldr	r2, [pc, #136]	; (2039c <cmd_subscribe+0x9c>)
   20312:	463b      	mov	r3, r7
   20314:	2101      	movs	r1, #1
   20316:	f00d f931 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   2031a:	f06f 0507 	mvn.w	r5, #7
}
   2031e:	4628      	mov	r0, r5
   20320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!default_conn) {
   20324:	4b1e      	ldr	r3, [pc, #120]	; (203a0 <cmd_subscribe+0xa0>)
   20326:	681a      	ldr	r2, [r3, #0]
   20328:	4699      	mov	r9, r3
   2032a:	b922      	cbnz	r2, 20336 <cmd_subscribe+0x36>
		shell_error(sh, "Not connected");
   2032c:	4a1d      	ldr	r2, [pc, #116]	; (203a4 <cmd_subscribe+0xa4>)
   2032e:	2101      	movs	r1, #1
   20330:	f00d f924 	bl	2d57c <shell_fprintf>
   20334:	e7f1      	b.n	2031a <cmd_subscribe+0x1a>
	subscribe_params.ccc_handle = strtoul(argv[1], NULL, 16);
   20336:	2210      	movs	r2, #16
   20338:	4639      	mov	r1, r7
   2033a:	6868      	ldr	r0, [r5, #4]
   2033c:	f00b fe3e 	bl	2bfbc <strtoul>
	subscribe_params.value_handle = strtoul(argv[2], NULL, 16);
   20340:	2210      	movs	r2, #16
	subscribe_params.ccc_handle = strtoul(argv[1], NULL, 16);
   20342:	8160      	strh	r0, [r4, #10]
	subscribe_params.value_handle = strtoul(argv[2], NULL, 16);
   20344:	4639      	mov	r1, r7
   20346:	68a8      	ldr	r0, [r5, #8]
   20348:	f00b fe38 	bl	2bfbc <strtoul>
	subscribe_params.value = BT_GATT_CCC_NOTIFY;
   2034c:	2301      	movs	r3, #1
   2034e:	81a3      	strh	r3, [r4, #12]
	if (argc > 3 && !strcmp(argv[3], "ind")) {
   20350:	f1b8 0f03 	cmp.w	r8, #3
	subscribe_params.notify = notify_func;
   20354:	4b14      	ldr	r3, [pc, #80]	; (203a8 <cmd_subscribe+0xa8>)
	subscribe_params.value_handle = strtoul(argv[2], NULL, 16);
   20356:	8120      	strh	r0, [r4, #8]
	subscribe_params.notify = notify_func;
   20358:	6023      	str	r3, [r4, #0]
	if (argc > 3 && !strcmp(argv[3], "ind")) {
   2035a:	d906      	bls.n	2036a <cmd_subscribe+0x6a>
   2035c:	4913      	ldr	r1, [pc, #76]	; (203ac <cmd_subscribe+0xac>)
   2035e:	68e8      	ldr	r0, [r5, #12]
   20360:	f7ed f81e 	bl	d3a0 <strcmp>
   20364:	b908      	cbnz	r0, 2036a <cmd_subscribe+0x6a>
		subscribe_params.value = BT_GATT_CCC_INDICATE;
   20366:	2302      	movs	r3, #2
   20368:	81a3      	strh	r3, [r4, #12]
	err = bt_gatt_subscribe(default_conn, &subscribe_params);
   2036a:	490b      	ldr	r1, [pc, #44]	; (20398 <cmd_subscribe+0x98>)
   2036c:	f8d9 0000 	ldr.w	r0, [r9]
   20370:	f7fe fb5a 	bl	1ea28 <bt_gatt_subscribe>
	if (err) {
   20374:	4605      	mov	r5, r0
   20376:	b140      	cbz	r0, 2038a <cmd_subscribe+0x8a>
		subscribe_params.value_handle = 0U;
   20378:	2300      	movs	r3, #0
   2037a:	8123      	strh	r3, [r4, #8]
		shell_error(sh, "Subscribe failed (err %d)", err);
   2037c:	4a0c      	ldr	r2, [pc, #48]	; (203b0 <cmd_subscribe+0xb0>)
   2037e:	4603      	mov	r3, r0
   20380:	2101      	movs	r1, #1
   20382:	4630      	mov	r0, r6
   20384:	f00d f8fa 	bl	2d57c <shell_fprintf>
   20388:	e7c9      	b.n	2031e <cmd_subscribe+0x1e>
		shell_print(sh, "Subscribed");
   2038a:	4a0a      	ldr	r2, [pc, #40]	; (203b4 <cmd_subscribe+0xb4>)
   2038c:	2108      	movs	r1, #8
   2038e:	4630      	mov	r0, r6
   20390:	f00d f8f4 	bl	2d57c <shell_fprintf>
   20394:	e7c3      	b.n	2031e <cmd_subscribe+0x1e>
   20396:	bf00      	nop
   20398:	20002db8 	.word	0x20002db8
   2039c:	00036721 	.word	0x00036721
   203a0:	20002d84 	.word	0x20002d84
   203a4:	00035e30 	.word	0x00035e30
   203a8:	00020a45 	.word	0x00020a45
   203ac:	000366f2 	.word	0x000366f2
   203b0:	00036756 	.word	0x00036756
   203b4:	00036771 	.word	0x00036771

000203b8 <write_without_rsp_cb>:
{
   203b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	delta = k_cycle_get_32() - cycle_stamp;
   203ba:	4e1c      	ldr	r6, [pc, #112]	; (2042c <write_without_rsp_cb+0x74>)
   203bc:	4f1c      	ldr	r7, [pc, #112]	; (20430 <write_without_rsp_cb+0x78>)
	write_stats.count++;
   203be:	4c1d      	ldr	r4, [pc, #116]	; (20434 <write_without_rsp_cb+0x7c>)
{
   203c0:	460d      	mov	r5, r1
   203c2:	f00f fe59 	bl	30078 <sys_clock_cycle_get_32>
	delta = k_cycle_get_32() - cycle_stamp;
   203c6:	6833      	ldr	r3, [r6, #0]
   203c8:	1ac0      	subs	r0, r0, r3
   203ca:	fba0 0107 	umull	r0, r1, r0, r7
	write_stats.count++;
   203ce:	6823      	ldr	r3, [r4, #0]
   203d0:	0bc2      	lsrs	r2, r0, #15
   203d2:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
	write_stats.total += len;
   203d6:	68a1      	ldr	r1, [r4, #8]
	write_stats.count++;
   203d8:	3301      	adds	r3, #1
   203da:	6023      	str	r3, [r4, #0]
	if (delta > 1000000000) {
   203dc:	42ba      	cmp	r2, r7
	write_stats.total += len;
   203de:	b2ab      	uxth	r3, r5
   203e0:	fa11 f585 	uxtah	r5, r1, r5
   203e4:	60a5      	str	r5, [r4, #8]
	if (delta > 1000000000) {
   203e6:	d912      	bls.n	2040e <write_without_rsp_cb+0x56>
		write_stats.len = 0U;
   203e8:	2300      	movs	r3, #0
   203ea:	6063      	str	r3, [r4, #4]
		write_stats.rate = 0U;
   203ec:	60e3      	str	r3, [r4, #12]
   203ee:	f00f fe43 	bl	30078 <sys_clock_cycle_get_32>
		cycle_stamp = k_cycle_get_32();
   203f2:	6030      	str	r0, [r6, #0]
	shell_print(ctx_shell, "Write #%u: %u bytes (%u bps)",
   203f4:	68e3      	ldr	r3, [r4, #12]
   203f6:	9301      	str	r3, [sp, #4]
   203f8:	480f      	ldr	r0, [pc, #60]	; (20438 <write_without_rsp_cb+0x80>)
   203fa:	68a3      	ldr	r3, [r4, #8]
   203fc:	9300      	str	r3, [sp, #0]
   203fe:	4a0f      	ldr	r2, [pc, #60]	; (2043c <write_without_rsp_cb+0x84>)
   20400:	6823      	ldr	r3, [r4, #0]
   20402:	6800      	ldr	r0, [r0, #0]
   20404:	2108      	movs	r1, #8
   20406:	f00d f8b9 	bl	2d57c <shell_fprintf>
}
   2040a:	b003      	add	sp, #12
   2040c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		write_stats.len += len;
   2040e:	6861      	ldr	r1, [r4, #4]
		write_stats.rate = ((uint64_t)write_stats.len << 3) *
   20410:	480b      	ldr	r0, [pc, #44]	; (20440 <write_without_rsp_cb+0x88>)
		write_stats.len += len;
   20412:	440b      	add	r3, r1
		write_stats.rate = ((uint64_t)write_stats.len << 3) *
   20414:	fba3 0100 	umull	r0, r1, r3, r0
			1000000000U / delta;
   20418:	2a01      	cmp	r2, #1
		write_stats.len += len;
   2041a:	6063      	str	r3, [r4, #4]
		write_stats.rate = ((uint64_t)write_stats.len << 3) *
   2041c:	4419      	add	r1, r3
			1000000000U / delta;
   2041e:	bf38      	it	cc
   20420:	2201      	movcc	r2, #1
   20422:	2300      	movs	r3, #0
   20424:	f7e0 ff0c 	bl	1240 <__aeabi_uldivmod>
		write_stats.rate = ((uint64_t)write_stats.len << 3) *
   20428:	60e0      	str	r0, [r4, #12]
   2042a:	e7e3      	b.n	203f4 <write_without_rsp_cb+0x3c>
   2042c:	20002d8c 	.word	0x20002d8c
   20430:	3b9aca00 	.word	0x3b9aca00
   20434:	20002de0 	.word	0x20002de0
   20438:	20002d80 	.word	0x20002d80
   2043c:	0003677d 	.word	0x0003677d
   20440:	dcd65000 	.word	0xdcd65000

00020444 <cmd_write_without_rsp>:
{
   20444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!default_conn) {
   20448:	4e3f      	ldr	r6, [pc, #252]	; (20548 <cmd_write_without_rsp+0x104>)
   2044a:	6833      	ldr	r3, [r6, #0]
{
   2044c:	b087      	sub	sp, #28
   2044e:	4607      	mov	r7, r0
   20450:	468b      	mov	fp, r1
   20452:	4614      	mov	r4, r2
   20454:	46b2      	mov	sl, r6
	if (!default_conn) {
   20456:	b94b      	cbnz	r3, 2046c <cmd_write_without_rsp+0x28>
		shell_error(sh, "Not connected");
   20458:	4a3c      	ldr	r2, [pc, #240]	; (2054c <cmd_write_without_rsp+0x108>)
   2045a:	2101      	movs	r1, #1
   2045c:	f00d f88e 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   20460:	f06f 0b07 	mvn.w	fp, #7
}
   20464:	4658      	mov	r0, fp
   20466:	b007      	add	sp, #28
   20468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sign = !strcmp(argv[0], "signed-write");
   2046c:	4938      	ldr	r1, [pc, #224]	; (20550 <cmd_write_without_rsp+0x10c>)
   2046e:	6810      	ldr	r0, [r2, #0]
   20470:	f7ec ff96 	bl	d3a0 <strcmp>
   20474:	2800      	cmp	r0, #0
   20476:	bf0c      	ite	eq
   20478:	2301      	moveq	r3, #1
   2047a:	2300      	movne	r3, #0
   2047c:	9305      	str	r3, [sp, #20]
	if (!sign) {
   2047e:	d14b      	bne.n	20518 <cmd_write_without_rsp+0xd4>
	bt_gatt_complete_func_t func = NULL;
   20480:	f04f 0900 	mov.w	r9, #0
	handle = strtoul(argv[1], NULL, 16);
   20484:	2210      	movs	r2, #16
   20486:	2100      	movs	r1, #0
   20488:	6860      	ldr	r0, [r4, #4]
	gatt_write_buf[0] = strtoul(argv[2], NULL, 16);
   2048a:	4d32      	ldr	r5, [pc, #200]	; (20554 <cmd_write_without_rsp+0x110>)
	handle = strtoul(argv[1], NULL, 16);
   2048c:	f00b fd96 	bl	2bfbc <strtoul>
	gatt_write_buf[0] = strtoul(argv[2], NULL, 16);
   20490:	2210      	movs	r2, #16
	handle = strtoul(argv[1], NULL, 16);
   20492:	fa1f f880 	uxth.w	r8, r0
	gatt_write_buf[0] = strtoul(argv[2], NULL, 16);
   20496:	2100      	movs	r1, #0
   20498:	68a0      	ldr	r0, [r4, #8]
   2049a:	f00b fd8f 	bl	2bfbc <strtoul>
	if (argc > 3) {
   2049e:	f1bb 0f03 	cmp.w	fp, #3
	gatt_write_buf[0] = strtoul(argv[2], NULL, 16);
   204a2:	7028      	strb	r0, [r5, #0]
	if (argc > 3) {
   204a4:	d94c      	bls.n	20540 <cmd_write_without_rsp+0xfc>
		len = MIN(strtoul(argv[3], NULL, 16), sizeof(gatt_write_buf));
   204a6:	68e0      	ldr	r0, [r4, #12]
   204a8:	2210      	movs	r2, #16
   204aa:	2100      	movs	r1, #0
   204ac:	f00b fd86 	bl	2bfbc <strtoul>
   204b0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   204b4:	d23e      	bcs.n	20534 <cmd_write_without_rsp+0xf0>
   204b6:	68e0      	ldr	r0, [r4, #12]
   204b8:	2210      	movs	r2, #16
   204ba:	2100      	movs	r1, #0
   204bc:	f00b fd7e 	bl	2bfbc <strtoul>
   204c0:	b286      	uxth	r6, r0
			gatt_write_buf[i] = gatt_write_buf[0];
   204c2:	7829      	ldrb	r1, [r5, #0]
		for (i = 1; i < len; i++) {
   204c4:	2201      	movs	r2, #1
   204c6:	4296      	cmp	r6, r2
   204c8:	dc37      	bgt.n	2053a <cmd_write_without_rsp+0xf6>
	if (argc > 4) {
   204ca:	f1bb 0f04 	cmp.w	fp, #4
   204ce:	d038      	beq.n	20542 <cmd_write_without_rsp+0xfe>
		repeat = strtoul(argv[4], NULL, 16);
   204d0:	6920      	ldr	r0, [r4, #16]
   204d2:	2210      	movs	r2, #16
   204d4:	2100      	movs	r1, #0
   204d6:	f00b fd71 	bl	2bfbc <strtoul>
	if (!repeat) {
   204da:	b284      	uxth	r4, r0
   204dc:	2c01      	cmp	r4, #1
   204de:	bf38      	it	cc
   204e0:	2401      	movcc	r4, #1
		err = bt_gatt_write_without_response_cb(default_conn, handle,
   204e2:	4d1c      	ldr	r5, [pc, #112]	; (20554 <cmd_write_without_rsp+0x110>)
   204e4:	9b05      	ldr	r3, [sp, #20]
   204e6:	9300      	str	r3, [sp, #0]
   204e8:	e9cd 9601 	strd	r9, r6, [sp, #4]
   204ec:	4633      	mov	r3, r6
   204ee:	f8da 0000 	ldr.w	r0, [sl]
   204f2:	462a      	mov	r2, r5
   204f4:	4641      	mov	r1, r8
   204f6:	f7fe f937 	bl	1e768 <bt_gatt_write_without_response_cb>
		if (err) {
   204fa:	3c01      	subs	r4, #1
   204fc:	b2a4      	uxth	r4, r4
   204fe:	4683      	mov	fp, r0
   20500:	b918      	cbnz	r0, 2050a <cmd_write_without_rsp+0xc6>
	z_impl_k_yield();
   20502:	f007 f9df 	bl	278c4 <z_impl_k_yield>
	while (repeat--) {
   20506:	2c00      	cmp	r4, #0
   20508:	d1ec      	bne.n	204e4 <cmd_write_without_rsp+0xa0>
	shell_print(sh, "Write Complete (err %d)", err);
   2050a:	4a13      	ldr	r2, [pc, #76]	; (20558 <cmd_write_without_rsp+0x114>)
   2050c:	465b      	mov	r3, fp
   2050e:	2108      	movs	r1, #8
   20510:	4638      	mov	r0, r7
   20512:	f00d f833 	bl	2d57c <shell_fprintf>
	return err;
   20516:	e7a5      	b.n	20464 <cmd_write_without_rsp+0x20>
		if (!strcmp(argv[0], "write-without-response-cb")) {
   20518:	4910      	ldr	r1, [pc, #64]	; (2055c <cmd_write_without_rsp+0x118>)
   2051a:	6820      	ldr	r0, [r4, #0]
   2051c:	f7ec ff40 	bl	d3a0 <strcmp>
   20520:	4601      	mov	r1, r0
   20522:	2800      	cmp	r0, #0
   20524:	d1ac      	bne.n	20480 <cmd_write_without_rsp+0x3c>
	memset(&write_stats, 0, sizeof(write_stats));
   20526:	480e      	ldr	r0, [pc, #56]	; (20560 <cmd_write_without_rsp+0x11c>)
			func = write_without_rsp_cb;
   20528:	f8df 9038 	ldr.w	r9, [pc, #56]	; 20564 <cmd_write_without_rsp+0x120>
	memset(&write_stats, 0, sizeof(write_stats));
   2052c:	2210      	movs	r2, #16
   2052e:	f010 f87c 	bl	3062a <memset>
}
   20532:	e7a7      	b.n	20484 <cmd_write_without_rsp+0x40>
		len = MIN(strtoul(argv[3], NULL, 16), sizeof(gatt_write_buf));
   20534:	f44f 7600 	mov.w	r6, #512	; 0x200
   20538:	e7c3      	b.n	204c2 <cmd_write_without_rsp+0x7e>
			gatt_write_buf[i] = gatt_write_buf[0];
   2053a:	54a9      	strb	r1, [r5, r2]
		for (i = 1; i < len; i++) {
   2053c:	3201      	adds	r2, #1
   2053e:	e7c2      	b.n	204c6 <cmd_write_without_rsp+0x82>
	len = 1U;
   20540:	2601      	movs	r6, #1
		repeat = 1U;
   20542:	2401      	movs	r4, #1
   20544:	e7cd      	b.n	204e2 <cmd_write_without_rsp+0x9e>
   20546:	bf00      	nop
   20548:	20002d84 	.word	0x20002d84
   2054c:	00035e30 	.word	0x00035e30
   20550:	0003679b 	.word	0x0003679b
   20554:	20003a4f 	.word	0x20003a4f
   20558:	000367c2 	.word	0x000367c2
   2055c:	000367a8 	.word	0x000367a8
   20560:	20002de0 	.word	0x20002de0
   20564:	000203b9 	.word	0x000203b9

00020568 <cmd_mread>:
{
   20568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!default_conn) {
   2056c:	4e23      	ldr	r6, [pc, #140]	; (205fc <cmd_mread+0x94>)
   2056e:	6833      	ldr	r3, [r6, #0]
{
   20570:	b085      	sub	sp, #20
   20572:	4607      	mov	r7, r0
	if (!default_conn) {
   20574:	b94b      	cbnz	r3, 2058a <cmd_mread+0x22>
		shell_error(sh, "Not connected");
   20576:	4a22      	ldr	r2, [pc, #136]	; (20600 <cmd_mread+0x98>)
   20578:	2101      	movs	r1, #1
		shell_print(sh, "Read ongoing");
   2057a:	f00c ffff 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   2057e:	f06f 0407 	mvn.w	r4, #7
}
   20582:	4620      	mov	r0, r4
   20584:	b005      	add	sp, #20
   20586:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (read_params.func) {
   2058a:	4c1e      	ldr	r4, [pc, #120]	; (20604 <cmd_mread+0x9c>)
   2058c:	6823      	ldr	r3, [r4, #0]
   2058e:	b113      	cbz	r3, 20596 <cmd_mread+0x2e>
		shell_print(sh, "Read ongoing");
   20590:	4a1d      	ldr	r2, [pc, #116]	; (20608 <cmd_mread+0xa0>)
   20592:	2108      	movs	r1, #8
   20594:	e7f1      	b.n	2057a <cmd_mread+0x12>
	if ((argc - 1) >  ARRAY_SIZE(h)) {
   20596:	f101 3aff 	add.w	sl, r1, #4294967295
   2059a:	f1ba 0f08 	cmp.w	sl, #8
   2059e:	d81c      	bhi.n	205da <cmd_mread+0x72>
   205a0:	46e9      	mov	r9, sp
   205a2:	f102 0804 	add.w	r8, r2, #4
   205a6:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   205aa:	46cb      	mov	fp, r9
	for (i = 0; i < argc - 1; i++) {
   205ac:	45a8      	cmp	r8, r5
   205ae:	d11c      	bne.n	205ea <cmd_mread+0x82>
	read_params.func = read_func;
   205b0:	4b16      	ldr	r3, [pc, #88]	; (2060c <cmd_mread+0xa4>)
	err = bt_gatt_read(default_conn, &read_params);
   205b2:	4914      	ldr	r1, [pc, #80]	; (20604 <cmd_mread+0x9c>)
   205b4:	6830      	ldr	r0, [r6, #0]
	read_params.multiple.handles = h;
   205b6:	f8c4 b008 	str.w	fp, [r4, #8]
	read_params.multiple.variable = true;
   205ba:	2501      	movs	r5, #1
	read_params.handle_count = i;
   205bc:	e9c4 3a00 	strd	r3, sl, [r4]
	read_params.multiple.variable = true;
   205c0:	7325      	strb	r5, [r4, #12]
	err = bt_gatt_read(default_conn, &read_params);
   205c2:	f7fd ffd9 	bl	1e578 <bt_gatt_read>
	if (err) {
   205c6:	4604      	mov	r4, r0
   205c8:	2800      	cmp	r0, #0
   205ca:	d0da      	beq.n	20582 <cmd_mread+0x1a>
		shell_error(sh, "GATT multiple read request failed (err %d)",
   205cc:	4603      	mov	r3, r0
   205ce:	4a10      	ldr	r2, [pc, #64]	; (20610 <cmd_mread+0xa8>)
   205d0:	4629      	mov	r1, r5
   205d2:	4638      	mov	r0, r7
   205d4:	f00c ffd2 	bl	2d57c <shell_fprintf>
   205d8:	e7d3      	b.n	20582 <cmd_mread+0x1a>
		shell_print(sh, "Enter max %lu handle items to read",
   205da:	2308      	movs	r3, #8
   205dc:	4a0d      	ldr	r2, [pc, #52]	; (20614 <cmd_mread+0xac>)
   205de:	4619      	mov	r1, r3
   205e0:	f00c ffcc 	bl	2d57c <shell_fprintf>
		return -EINVAL;
   205e4:	f06f 0415 	mvn.w	r4, #21
   205e8:	e7cb      	b.n	20582 <cmd_mread+0x1a>
		h[i] = strtoul(argv[i + 1], NULL, 16);
   205ea:	f858 0b04 	ldr.w	r0, [r8], #4
   205ee:	2210      	movs	r2, #16
   205f0:	2100      	movs	r1, #0
   205f2:	f00b fce3 	bl	2bfbc <strtoul>
   205f6:	f829 0b02 	strh.w	r0, [r9], #2
	for (i = 0; i < argc - 1; i++) {
   205fa:	e7d7      	b.n	205ac <cmd_mread+0x44>
   205fc:	20002d84 	.word	0x20002d84
   20600:	00035e30 	.word	0x00035e30
   20604:	20002da8 	.word	0x20002da8
   20608:	000367db 	.word	0x000367db
   2060c:	00020c45 	.word	0x00020c45
   20610:	0003680d 	.word	0x0003680d
   20614:	000367e9 	.word	0x000367e9

00020618 <cmd_read_uuid>:
	if (!default_conn) {
   20618:	4b25      	ldr	r3, [pc, #148]	; (206b0 <cmd_read_uuid+0x98>)
{
   2061a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2061e:	4615      	mov	r5, r2
	if (!default_conn) {
   20620:	681a      	ldr	r2, [r3, #0]
{
   20622:	4607      	mov	r7, r0
   20624:	460e      	mov	r6, r1
   20626:	4698      	mov	r8, r3
	if (!default_conn) {
   20628:	b942      	cbnz	r2, 2063c <cmd_read_uuid+0x24>
		shell_error(sh, "Not connected");
   2062a:	4a22      	ldr	r2, [pc, #136]	; (206b4 <cmd_read_uuid+0x9c>)
   2062c:	2101      	movs	r1, #1
		shell_print(sh, "Read ongoing");
   2062e:	f00c ffa5 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   20632:	f06f 0407 	mvn.w	r4, #7
}
   20636:	4620      	mov	r0, r4
   20638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (read_params.func) {
   2063c:	4c1e      	ldr	r4, [pc, #120]	; (206b8 <cmd_read_uuid+0xa0>)
   2063e:	6821      	ldr	r1, [r4, #0]
   20640:	b111      	cbz	r1, 20648 <cmd_read_uuid+0x30>
		shell_print(sh, "Read ongoing");
   20642:	4a1e      	ldr	r2, [pc, #120]	; (206bc <cmd_read_uuid+0xa4>)
   20644:	2108      	movs	r1, #8
   20646:	e7f2      	b.n	2062e <cmd_read_uuid+0x16>
	read_params.func = read_func;
   20648:	4b1d      	ldr	r3, [pc, #116]	; (206c0 <cmd_read_uuid+0xa8>)
	if (argc > 1) {
   2064a:	2e01      	cmp	r6, #1
	read_params.handle_count = 0;
   2064c:	e9c4 3100 	strd	r3, r1, [r4]
	read_params.by_uuid.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
   20650:	4b1c      	ldr	r3, [pc, #112]	; (206c4 <cmd_read_uuid+0xac>)
   20652:	60a3      	str	r3, [r4, #8]
	if (argc > 1) {
   20654:	d918      	bls.n	20688 <cmd_read_uuid+0x70>
		uuid.val = strtoul(argv[1], NULL, 16);
   20656:	6868      	ldr	r0, [r5, #4]
   20658:	2210      	movs	r2, #16
   2065a:	f00b fcaf 	bl	2bfbc <strtoul>
   2065e:	4b1a      	ldr	r3, [pc, #104]	; (206c8 <cmd_read_uuid+0xb0>)
   20660:	b280      	uxth	r0, r0
   20662:	8058      	strh	r0, [r3, #2]
		if (uuid.val) {
   20664:	b100      	cbz	r0, 20668 <cmd_read_uuid+0x50>
			read_params.by_uuid.uuid = &uuid.uuid;
   20666:	60e3      	str	r3, [r4, #12]
	if (argc > 2) {
   20668:	2e02      	cmp	r6, #2
   2066a:	d00d      	beq.n	20688 <cmd_read_uuid+0x70>
		read_params.by_uuid.start_handle = strtoul(argv[2], NULL, 16);
   2066c:	68a8      	ldr	r0, [r5, #8]
   2066e:	2210      	movs	r2, #16
   20670:	2100      	movs	r1, #0
   20672:	f00b fca3 	bl	2bfbc <strtoul>
		if (argc > 3) {
   20676:	2e03      	cmp	r6, #3
		read_params.by_uuid.start_handle = strtoul(argv[2], NULL, 16);
   20678:	8120      	strh	r0, [r4, #8]
		if (argc > 3) {
   2067a:	d005      	beq.n	20688 <cmd_read_uuid+0x70>
			read_params.by_uuid.end_handle = strtoul(argv[3],
   2067c:	68e8      	ldr	r0, [r5, #12]
   2067e:	2210      	movs	r2, #16
   20680:	2100      	movs	r1, #0
   20682:	f00b fc9b 	bl	2bfbc <strtoul>
   20686:	8160      	strh	r0, [r4, #10]
	err = bt_gatt_read(default_conn, &read_params);
   20688:	490b      	ldr	r1, [pc, #44]	; (206b8 <cmd_read_uuid+0xa0>)
   2068a:	f8d8 0000 	ldr.w	r0, [r8]
   2068e:	f7fd ff73 	bl	1e578 <bt_gatt_read>
	if (err) {
   20692:	4604      	mov	r4, r0
   20694:	b130      	cbz	r0, 206a4 <cmd_read_uuid+0x8c>
		shell_error(sh, "Read failed (err %d)", err);
   20696:	4603      	mov	r3, r0
   20698:	4a0c      	ldr	r2, [pc, #48]	; (206cc <cmd_read_uuid+0xb4>)
   2069a:	2101      	movs	r1, #1
   2069c:	4638      	mov	r0, r7
   2069e:	f00c ff6d 	bl	2d57c <shell_fprintf>
   206a2:	e7c8      	b.n	20636 <cmd_read_uuid+0x1e>
		shell_print(sh, "Read pending");
   206a4:	4a0a      	ldr	r2, [pc, #40]	; (206d0 <cmd_read_uuid+0xb8>)
   206a6:	2108      	movs	r1, #8
   206a8:	4638      	mov	r0, r7
   206aa:	f00c ff67 	bl	2d57c <shell_fprintf>
   206ae:	e7c2      	b.n	20636 <cmd_read_uuid+0x1e>
   206b0:	20002d84 	.word	0x20002d84
   206b4:	00035e30 	.word	0x00035e30
   206b8:	20002da8 	.word	0x20002da8
   206bc:	000367db 	.word	0x000367db
   206c0:	00020c45 	.word	0x00020c45
   206c4:	ffff0001 	.word	0xffff0001
   206c8:	2000391c 	.word	0x2000391c
   206cc:	00036839 	.word	0x00036839
   206d0:	0003684f 	.word	0x0003684f

000206d4 <cmd_read>:
{
   206d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!default_conn) {
   206d8:	4b1e      	ldr	r3, [pc, #120]	; (20754 <cmd_read+0x80>)
{
   206da:	4616      	mov	r6, r2
	if (!default_conn) {
   206dc:	681a      	ldr	r2, [r3, #0]
{
   206de:	4605      	mov	r5, r0
   206e0:	4688      	mov	r8, r1
   206e2:	4699      	mov	r9, r3
	if (!default_conn) {
   206e4:	b942      	cbnz	r2, 206f8 <cmd_read+0x24>
		shell_error(sh, "Not connected");
   206e6:	4a1c      	ldr	r2, [pc, #112]	; (20758 <cmd_read+0x84>)
   206e8:	2101      	movs	r1, #1
		shell_print(sh, "Read ongoing");
   206ea:	f00c ff47 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   206ee:	f06f 0407 	mvn.w	r4, #7
}
   206f2:	4620      	mov	r0, r4
   206f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (read_params.func) {
   206f8:	4c18      	ldr	r4, [pc, #96]	; (2075c <cmd_read+0x88>)
   206fa:	6827      	ldr	r7, [r4, #0]
   206fc:	b117      	cbz	r7, 20704 <cmd_read+0x30>
		shell_print(sh, "Read ongoing");
   206fe:	4a18      	ldr	r2, [pc, #96]	; (20760 <cmd_read+0x8c>)
   20700:	2108      	movs	r1, #8
   20702:	e7f2      	b.n	206ea <cmd_read+0x16>
	read_params.func = read_func;
   20704:	4b17      	ldr	r3, [pc, #92]	; (20764 <cmd_read+0x90>)
   20706:	6023      	str	r3, [r4, #0]
	read_params.single.handle = strtoul(argv[1], NULL, 16);
   20708:	6870      	ldr	r0, [r6, #4]
	read_params.handle_count = 1;
   2070a:	2301      	movs	r3, #1
	read_params.single.handle = strtoul(argv[1], NULL, 16);
   2070c:	2210      	movs	r2, #16
   2070e:	4639      	mov	r1, r7
	read_params.handle_count = 1;
   20710:	6063      	str	r3, [r4, #4]
	read_params.single.handle = strtoul(argv[1], NULL, 16);
   20712:	f00b fc53 	bl	2bfbc <strtoul>
	if (argc > 2) {
   20716:	f1b8 0f02 	cmp.w	r8, #2
	read_params.single.handle = strtoul(argv[1], NULL, 16);
   2071a:	8120      	strh	r0, [r4, #8]
	read_params.single.offset = 0U;
   2071c:	8167      	strh	r7, [r4, #10]
	if (argc > 2) {
   2071e:	d905      	bls.n	2072c <cmd_read+0x58>
		read_params.single.offset = strtoul(argv[2], NULL, 16);
   20720:	68b0      	ldr	r0, [r6, #8]
   20722:	2210      	movs	r2, #16
   20724:	4639      	mov	r1, r7
   20726:	f00b fc49 	bl	2bfbc <strtoul>
   2072a:	8160      	strh	r0, [r4, #10]
	err = bt_gatt_read(default_conn, &read_params);
   2072c:	490b      	ldr	r1, [pc, #44]	; (2075c <cmd_read+0x88>)
   2072e:	f8d9 0000 	ldr.w	r0, [r9]
   20732:	f7fd ff21 	bl	1e578 <bt_gatt_read>
	if (err) {
   20736:	4604      	mov	r4, r0
   20738:	b130      	cbz	r0, 20748 <cmd_read+0x74>
		shell_error(sh, "Read failed (err %d)", err);
   2073a:	4603      	mov	r3, r0
   2073c:	4a0a      	ldr	r2, [pc, #40]	; (20768 <cmd_read+0x94>)
   2073e:	2101      	movs	r1, #1
   20740:	4628      	mov	r0, r5
   20742:	f00c ff1b 	bl	2d57c <shell_fprintf>
   20746:	e7d4      	b.n	206f2 <cmd_read+0x1e>
		shell_print(sh, "Read pending");
   20748:	4a08      	ldr	r2, [pc, #32]	; (2076c <cmd_read+0x98>)
   2074a:	2108      	movs	r1, #8
   2074c:	4628      	mov	r0, r5
   2074e:	f00c ff15 	bl	2d57c <shell_fprintf>
   20752:	e7ce      	b.n	206f2 <cmd_read+0x1e>
   20754:	20002d84 	.word	0x20002d84
   20758:	00035e30 	.word	0x00035e30
   2075c:	20002da8 	.word	0x20002da8
   20760:	000367db 	.word	0x000367db
   20764:	00020c45 	.word	0x00020c45
   20768:	00036839 	.word	0x00036839
   2076c:	0003684f 	.word	0x0003684f

00020770 <discover_func>:
{
   20770:	b570      	push	{r4, r5, r6, lr}
   20772:	4d4f      	ldr	r5, [pc, #316]	; (208b0 <discover_func+0x140>)
   20774:	b08e      	sub	sp, #56	; 0x38
   20776:	4616      	mov	r6, r2
	if (!attr) {
   20778:	460c      	mov	r4, r1
   2077a:	b961      	cbnz	r1, 20796 <discover_func+0x26>
		shell_print(ctx_shell, "Discover complete");
   2077c:	4a4d      	ldr	r2, [pc, #308]	; (208b4 <discover_func+0x144>)
   2077e:	6828      	ldr	r0, [r5, #0]
   20780:	2108      	movs	r1, #8
   20782:	f00c fefb 	bl	2d57c <shell_fprintf>
__ssp_bos_icheck3(memset, void *, int)
   20786:	2214      	movs	r2, #20
   20788:	4621      	mov	r1, r4
   2078a:	4630      	mov	r0, r6
   2078c:	f00f ff4d 	bl	3062a <memset>
		return BT_GATT_ITER_STOP;
   20790:	4620      	mov	r0, r4
}
   20792:	b00e      	add	sp, #56	; 0x38
   20794:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->type) {
   20796:	7c13      	ldrb	r3, [r2, #16]
   20798:	2b02      	cmp	r3, #2
   2079a:	d075      	beq.n	20888 <discover_func+0x118>
   2079c:	d90f      	bls.n	207be <discover_func+0x4e>
   2079e:	2b03      	cmp	r3, #3
   207a0:	d01f      	beq.n	207e2 <discover_func+0x72>
		bt_uuid_to_str(attr->uuid, str, sizeof(str));
   207a2:	6820      	ldr	r0, [r4, #0]
   207a4:	a904      	add	r1, sp, #16
   207a6:	2225      	movs	r2, #37	; 0x25
   207a8:	f7f7 fc9c 	bl	180e4 <bt_uuid_to_str>
		shell_print(ctx_shell, "Descriptor %s found: handle %x", str,
   207ac:	8a23      	ldrh	r3, [r4, #16]
   207ae:	9300      	str	r3, [sp, #0]
   207b0:	4a41      	ldr	r2, [pc, #260]	; (208b8 <discover_func+0x148>)
   207b2:	6828      	ldr	r0, [r5, #0]
   207b4:	ab04      	add	r3, sp, #16
   207b6:	2108      	movs	r1, #8
   207b8:	f00c fee0 	bl	2d57c <shell_fprintf>
   207bc:	e00f      	b.n	207de <discover_func+0x6e>
		gatt_service = attr->user_data;
   207be:	68ce      	ldr	r6, [r1, #12]
		bt_uuid_to_str(gatt_service->uuid, str, sizeof(str));
   207c0:	2225      	movs	r2, #37	; 0x25
   207c2:	6830      	ldr	r0, [r6, #0]
   207c4:	a904      	add	r1, sp, #16
   207c6:	f7f7 fc8d 	bl	180e4 <bt_uuid_to_str>
		shell_print(ctx_shell, "Service %s found: start handle %x, "
   207ca:	88b3      	ldrh	r3, [r6, #4]
   207cc:	9301      	str	r3, [sp, #4]
   207ce:	8a23      	ldrh	r3, [r4, #16]
   207d0:	9300      	str	r3, [sp, #0]
   207d2:	4a3a      	ldr	r2, [pc, #232]	; (208bc <discover_func+0x14c>)
   207d4:	6828      	ldr	r0, [r5, #0]
   207d6:	ab04      	add	r3, sp, #16
   207d8:	2108      	movs	r1, #8
   207da:	f00c fecf 	bl	2d57c <shell_fprintf>
	return BT_GATT_ITER_CONTINUE;
   207de:	2001      	movs	r0, #1
		break;
   207e0:	e7d7      	b.n	20792 <discover_func+0x22>
		gatt_chrc = attr->user_data;
   207e2:	68ce      	ldr	r6, [r1, #12]
		bt_uuid_to_str(gatt_chrc->uuid, str, sizeof(str));
   207e4:	2225      	movs	r2, #37	; 0x25
   207e6:	6830      	ldr	r0, [r6, #0]
   207e8:	a904      	add	r1, sp, #16
   207ea:	f7f7 fc7b 	bl	180e4 <bt_uuid_to_str>
		shell_print(ctx_shell, "Characteristic %s found: handle %x",
   207ee:	8a23      	ldrh	r3, [r4, #16]
   207f0:	9300      	str	r3, [sp, #0]
   207f2:	6828      	ldr	r0, [r5, #0]
   207f4:	4a32      	ldr	r2, [pc, #200]	; (208c0 <discover_func+0x150>)
   207f6:	ab04      	add	r3, sp, #16
   207f8:	2108      	movs	r1, #8
   207fa:	f00c febf 	bl	2d57c <shell_fprintf>
		print_chrc_props(ctx_shell, gatt_chrc->properties);
   207fe:	682c      	ldr	r4, [r5, #0]
   20800:	79b5      	ldrb	r5, [r6, #6]
	shell_print(sh, "Properties: ");
   20802:	4a30      	ldr	r2, [pc, #192]	; (208c4 <discover_func+0x154>)
   20804:	2108      	movs	r1, #8
   20806:	4620      	mov	r0, r4
   20808:	f00c feb8 	bl	2d57c <shell_fprintf>
	if (properties & BT_GATT_CHRC_BROADCAST) {
   2080c:	07e9      	lsls	r1, r5, #31
   2080e:	d504      	bpl.n	2081a <discover_func+0xaa>
		shell_print(sh, "[bcast]");
   20810:	4a2d      	ldr	r2, [pc, #180]	; (208c8 <discover_func+0x158>)
   20812:	2108      	movs	r1, #8
   20814:	4620      	mov	r0, r4
   20816:	f00c feb1 	bl	2d57c <shell_fprintf>
	if (properties & BT_GATT_CHRC_READ) {
   2081a:	07aa      	lsls	r2, r5, #30
   2081c:	d504      	bpl.n	20828 <discover_func+0xb8>
		shell_print(sh, "[read]");
   2081e:	4a2b      	ldr	r2, [pc, #172]	; (208cc <discover_func+0x15c>)
   20820:	2108      	movs	r1, #8
   20822:	4620      	mov	r0, r4
   20824:	f00c feaa 	bl	2d57c <shell_fprintf>
	if (properties & BT_GATT_CHRC_WRITE) {
   20828:	072b      	lsls	r3, r5, #28
   2082a:	d504      	bpl.n	20836 <discover_func+0xc6>
		shell_print(sh, "[write]");
   2082c:	4a28      	ldr	r2, [pc, #160]	; (208d0 <discover_func+0x160>)
   2082e:	2108      	movs	r1, #8
   20830:	4620      	mov	r0, r4
   20832:	f00c fea3 	bl	2d57c <shell_fprintf>
	if (properties & BT_GATT_CHRC_WRITE_WITHOUT_RESP) {
   20836:	076e      	lsls	r6, r5, #29
   20838:	d504      	bpl.n	20844 <discover_func+0xd4>
		shell_print(sh, "[write w/w rsp]");
   2083a:	4a26      	ldr	r2, [pc, #152]	; (208d4 <discover_func+0x164>)
   2083c:	2108      	movs	r1, #8
   2083e:	4620      	mov	r0, r4
   20840:	f00c fe9c 	bl	2d57c <shell_fprintf>
	if (properties & BT_GATT_CHRC_NOTIFY) {
   20844:	06e8      	lsls	r0, r5, #27
   20846:	d504      	bpl.n	20852 <discover_func+0xe2>
		shell_print(sh, "[notify]");
   20848:	4a23      	ldr	r2, [pc, #140]	; (208d8 <discover_func+0x168>)
   2084a:	2108      	movs	r1, #8
   2084c:	4620      	mov	r0, r4
   2084e:	f00c fe95 	bl	2d57c <shell_fprintf>
	if (properties & BT_GATT_CHRC_INDICATE) {
   20852:	06a9      	lsls	r1, r5, #26
   20854:	d504      	bpl.n	20860 <discover_func+0xf0>
		shell_print(sh, "[indicate]");
   20856:	4a21      	ldr	r2, [pc, #132]	; (208dc <discover_func+0x16c>)
   20858:	2108      	movs	r1, #8
   2085a:	4620      	mov	r0, r4
   2085c:	f00c fe8e 	bl	2d57c <shell_fprintf>
	if (properties & BT_GATT_CHRC_AUTH) {
   20860:	066a      	lsls	r2, r5, #25
   20862:	d504      	bpl.n	2086e <discover_func+0xfe>
		shell_print(sh, "[auth]");
   20864:	4a1e      	ldr	r2, [pc, #120]	; (208e0 <discover_func+0x170>)
   20866:	2108      	movs	r1, #8
   20868:	4620      	mov	r0, r4
   2086a:	f00c fe87 	bl	2d57c <shell_fprintf>
	if (properties & BT_GATT_CHRC_EXT_PROP) {
   2086e:	062b      	lsls	r3, r5, #24
   20870:	d504      	bpl.n	2087c <discover_func+0x10c>
		shell_print(sh, "[ext prop]");
   20872:	4a1c      	ldr	r2, [pc, #112]	; (208e4 <discover_func+0x174>)
   20874:	2108      	movs	r1, #8
   20876:	4620      	mov	r0, r4
   20878:	f00c fe80 	bl	2d57c <shell_fprintf>
	shell_print(sh, "");
   2087c:	4a1a      	ldr	r2, [pc, #104]	; (208e8 <discover_func+0x178>)
   2087e:	2108      	movs	r1, #8
   20880:	4620      	mov	r0, r4
   20882:	f00c fe7b 	bl	2d57c <shell_fprintf>
   20886:	e7aa      	b.n	207de <discover_func+0x6e>
		gatt_include = attr->user_data;
   20888:	68ce      	ldr	r6, [r1, #12]
		bt_uuid_to_str(gatt_include->uuid, str, sizeof(str));
   2088a:	2225      	movs	r2, #37	; 0x25
   2088c:	6830      	ldr	r0, [r6, #0]
   2088e:	a904      	add	r1, sp, #16
   20890:	f7f7 fc28 	bl	180e4 <bt_uuid_to_str>
		shell_print(ctx_shell, "Include %s found: handle %x, start %x, "
   20894:	88f3      	ldrh	r3, [r6, #6]
   20896:	9302      	str	r3, [sp, #8]
   20898:	88b3      	ldrh	r3, [r6, #4]
   2089a:	9301      	str	r3, [sp, #4]
   2089c:	8a23      	ldrh	r3, [r4, #16]
   2089e:	9300      	str	r3, [sp, #0]
   208a0:	4a12      	ldr	r2, [pc, #72]	; (208ec <discover_func+0x17c>)
   208a2:	6828      	ldr	r0, [r5, #0]
   208a4:	ab04      	add	r3, sp, #16
   208a6:	2108      	movs	r1, #8
   208a8:	f00c fe68 	bl	2d57c <shell_fprintf>
		break;
   208ac:	e797      	b.n	207de <discover_func+0x6e>
   208ae:	bf00      	nop
   208b0:	20002d80 	.word	0x20002d80
   208b4:	0003685d 	.word	0x0003685d
   208b8:	00036958 	.word	0x00036958
   208bc:	00036870 	.word	0x00036870
   208c0:	000368a2 	.word	0x000368a2
   208c4:	000368c6 	.word	0x000368c6
   208c8:	000368d4 	.word	0x000368d4
   208cc:	000368dd 	.word	0x000368dd
   208d0:	000368e5 	.word	0x000368e5
   208d4:	000368ee 	.word	0x000368ee
   208d8:	000368ff 	.word	0x000368ff
   208dc:	00036909 	.word	0x00036909
   208e0:	00036915 	.word	0x00036915
   208e4:	0003691d 	.word	0x0003691d
   208e8:	00036e20 	.word	0x00036e20
   208ec:	00036929 	.word	0x00036929

000208f0 <cmd_discover>:
	if (!default_conn) {
   208f0:	4b39      	ldr	r3, [pc, #228]	; (209d8 <cmd_discover+0xe8>)
{
   208f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   208f6:	4615      	mov	r5, r2
	if (!default_conn) {
   208f8:	681a      	ldr	r2, [r3, #0]
{
   208fa:	4607      	mov	r7, r0
   208fc:	460e      	mov	r6, r1
   208fe:	4698      	mov	r8, r3
	if (!default_conn) {
   20900:	b942      	cbnz	r2, 20914 <cmd_discover+0x24>
		shell_error(sh, "Not connected");
   20902:	4a36      	ldr	r2, [pc, #216]	; (209dc <cmd_discover+0xec>)
   20904:	2101      	movs	r1, #1
		shell_print(sh, "Discover ongoing");
   20906:	f00c fe39 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   2090a:	f06f 0407 	mvn.w	r4, #7
}
   2090e:	4620      	mov	r0, r4
   20910:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (discover_params.func) {
   20914:	4c32      	ldr	r4, [pc, #200]	; (209e0 <cmd_discover+0xf0>)
   20916:	6861      	ldr	r1, [r4, #4]
   20918:	b111      	cbz	r1, 20920 <cmd_discover+0x30>
		shell_print(sh, "Discover ongoing");
   2091a:	4a32      	ldr	r2, [pc, #200]	; (209e4 <cmd_discover+0xf4>)
   2091c:	2108      	movs	r1, #8
   2091e:	e7f2      	b.n	20906 <cmd_discover+0x16>
	discover_params.func = discover_func;
   20920:	4b31      	ldr	r3, [pc, #196]	; (209e8 <cmd_discover+0xf8>)
   20922:	6063      	str	r3, [r4, #4]
	discover_params.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
   20924:	2301      	movs	r3, #1
   20926:	8123      	strh	r3, [r4, #8]
	if (argc > 1) {
   20928:	2e01      	cmp	r6, #1
	discover_params.end_handle = BT_ATT_LAST_ATTRIBUTE_HANDLE;
   2092a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2092e:	81e3      	strh	r3, [r4, #14]
	if (argc > 1) {
   20930:	d918      	bls.n	20964 <cmd_discover+0x74>
		uuid.val = strtoul(argv[1], NULL, 16);
   20932:	6868      	ldr	r0, [r5, #4]
   20934:	2210      	movs	r2, #16
   20936:	f00b fb41 	bl	2bfbc <strtoul>
   2093a:	4b2c      	ldr	r3, [pc, #176]	; (209ec <cmd_discover+0xfc>)
   2093c:	b280      	uxth	r0, r0
   2093e:	8058      	strh	r0, [r3, #2]
		if (uuid.val) {
   20940:	b100      	cbz	r0, 20944 <cmd_discover+0x54>
			discover_params.uuid = &uuid.uuid;
   20942:	6023      	str	r3, [r4, #0]
	if (argc > 2) {
   20944:	2e02      	cmp	r6, #2
   20946:	d00d      	beq.n	20964 <cmd_discover+0x74>
		discover_params.start_handle = strtoul(argv[2], NULL, 16);
   20948:	68a8      	ldr	r0, [r5, #8]
   2094a:	2210      	movs	r2, #16
   2094c:	2100      	movs	r1, #0
   2094e:	f00b fb35 	bl	2bfbc <strtoul>
		if (argc > 3) {
   20952:	2e03      	cmp	r6, #3
		discover_params.start_handle = strtoul(argv[2], NULL, 16);
   20954:	8120      	strh	r0, [r4, #8]
		if (argc > 3) {
   20956:	d005      	beq.n	20964 <cmd_discover+0x74>
			discover_params.end_handle = strtoul(argv[3], NULL, 16);
   20958:	68e8      	ldr	r0, [r5, #12]
   2095a:	2210      	movs	r2, #16
   2095c:	2100      	movs	r1, #0
   2095e:	f00b fb2d 	bl	2bfbc <strtoul>
   20962:	81e0      	strh	r0, [r4, #14]
	if (!strcmp(argv[0], "discover")) {
   20964:	4922      	ldr	r1, [pc, #136]	; (209f0 <cmd_discover+0x100>)
   20966:	6828      	ldr	r0, [r5, #0]
   20968:	f7ec fd1a 	bl	d3a0 <strcmp>
   2096c:	b978      	cbnz	r0, 2098e <cmd_discover+0x9e>
		discover_params.type = BT_GATT_DISCOVER_ATTRIBUTE;
   2096e:	2305      	movs	r3, #5
	err = bt_gatt_discover(default_conn, &discover_params);
   20970:	491b      	ldr	r1, [pc, #108]	; (209e0 <cmd_discover+0xf0>)
   20972:	f8d8 0000 	ldr.w	r0, [r8]
		discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   20976:	7423      	strb	r3, [r4, #16]
	err = bt_gatt_discover(default_conn, &discover_params);
   20978:	f7fd f9c0 	bl	1dcfc <bt_gatt_discover>
	if (err) {
   2097c:	4604      	mov	r4, r0
   2097e:	b320      	cbz	r0, 209ca <cmd_discover+0xda>
		shell_error(sh, "Discover failed (err %d)", err);
   20980:	4603      	mov	r3, r0
   20982:	4a1c      	ldr	r2, [pc, #112]	; (209f4 <cmd_discover+0x104>)
   20984:	2101      	movs	r1, #1
   20986:	4638      	mov	r0, r7
   20988:	f00c fdf8 	bl	2d57c <shell_fprintf>
   2098c:	e7bf      	b.n	2090e <cmd_discover+0x1e>
	} else if (!strcmp(argv[0], "discover-secondary")) {
   2098e:	491a      	ldr	r1, [pc, #104]	; (209f8 <cmd_discover+0x108>)
   20990:	6828      	ldr	r0, [r5, #0]
   20992:	f7ec fd05 	bl	d3a0 <strcmp>
   20996:	b908      	cbnz	r0, 2099c <cmd_discover+0xac>
		discover_params.type = BT_GATT_DISCOVER_SECONDARY;
   20998:	2301      	movs	r3, #1
   2099a:	e7e9      	b.n	20970 <cmd_discover+0x80>
	} else if (!strcmp(argv[0], "discover-include")) {
   2099c:	4917      	ldr	r1, [pc, #92]	; (209fc <cmd_discover+0x10c>)
   2099e:	6828      	ldr	r0, [r5, #0]
   209a0:	f7ec fcfe 	bl	d3a0 <strcmp>
   209a4:	b908      	cbnz	r0, 209aa <cmd_discover+0xba>
		discover_params.type = BT_GATT_DISCOVER_INCLUDE;
   209a6:	2302      	movs	r3, #2
   209a8:	e7e2      	b.n	20970 <cmd_discover+0x80>
	} else if (!strcmp(argv[0], "discover-characteristic")) {
   209aa:	4915      	ldr	r1, [pc, #84]	; (20a00 <cmd_discover+0x110>)
   209ac:	6828      	ldr	r0, [r5, #0]
   209ae:	f7ec fcf7 	bl	d3a0 <strcmp>
   209b2:	b908      	cbnz	r0, 209b8 <cmd_discover+0xc8>
		discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   209b4:	2303      	movs	r3, #3
   209b6:	e7db      	b.n	20970 <cmd_discover+0x80>
	} else if (!strcmp(argv[0], "discover-descriptor")) {
   209b8:	4912      	ldr	r1, [pc, #72]	; (20a04 <cmd_discover+0x114>)
   209ba:	6828      	ldr	r0, [r5, #0]
   209bc:	f7ec fcf0 	bl	d3a0 <strcmp>
   209c0:	b908      	cbnz	r0, 209c6 <cmd_discover+0xd6>
		discover_params.type = BT_GATT_DISCOVER_DESCRIPTOR;
   209c2:	2304      	movs	r3, #4
   209c4:	e7d4      	b.n	20970 <cmd_discover+0x80>
		discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   209c6:	2300      	movs	r3, #0
   209c8:	e7d2      	b.n	20970 <cmd_discover+0x80>
		shell_print(sh, "Discover pending");
   209ca:	4a0f      	ldr	r2, [pc, #60]	; (20a08 <cmd_discover+0x118>)
   209cc:	2108      	movs	r1, #8
   209ce:	4638      	mov	r0, r7
   209d0:	f00c fdd4 	bl	2d57c <shell_fprintf>
   209d4:	e79b      	b.n	2090e <cmd_discover+0x1e>
   209d6:	bf00      	nop
   209d8:	20002d84 	.word	0x20002d84
   209dc:	00035e30 	.word	0x00035e30
   209e0:	20002d90 	.word	0x20002d90
   209e4:	00036978 	.word	0x00036978
   209e8:	00020771 	.word	0x00020771
   209ec:	2000391c 	.word	0x2000391c
   209f0:	0003698a 	.word	0x0003698a
   209f4:	000369e3 	.word	0x000369e3
   209f8:	00036993 	.word	0x00036993
   209fc:	000369a6 	.word	0x000369a6
   20a00:	000369b7 	.word	0x000369b7
   20a04:	000369cf 	.word	0x000369cf
   20a08:	000369fd 	.word	0x000369fd

00020a0c <cmd_att_mtu>:

int cmd_att_mtu(const struct shell *sh, size_t argc, char *argv[])
{
	uint16_t mtu;

	if (default_conn) {
   20a0c:	4b0a      	ldr	r3, [pc, #40]	; (20a38 <cmd_att_mtu+0x2c>)
   20a0e:	681b      	ldr	r3, [r3, #0]
{
   20a10:	b510      	push	{r4, lr}
   20a12:	4604      	mov	r4, r0
	if (default_conn) {
   20a14:	b153      	cbz	r3, 20a2c <cmd_att_mtu+0x20>
		mtu = bt_gatt_get_mtu(default_conn);
   20a16:	4618      	mov	r0, r3
   20a18:	f00e feb7 	bl	2f78a <bt_gatt_get_mtu>
		shell_print(sh, "MTU size: %u", mtu);
   20a1c:	4a07      	ldr	r2, [pc, #28]	; (20a3c <cmd_att_mtu+0x30>)
		mtu = bt_gatt_get_mtu(default_conn);
   20a1e:	4603      	mov	r3, r0
		shell_print(sh, "MTU size: %u", mtu);
   20a20:	2108      	movs	r1, #8
   20a22:	4620      	mov	r0, r4
   20a24:	f00c fdaa 	bl	2d57c <shell_fprintf>
	} else {
		shell_print(sh, "No default connection");
	}

	return 0;
}
   20a28:	2000      	movs	r0, #0
   20a2a:	bd10      	pop	{r4, pc}
		shell_print(sh, "No default connection");
   20a2c:	4a04      	ldr	r2, [pc, #16]	; (20a40 <cmd_att_mtu+0x34>)
   20a2e:	2108      	movs	r1, #8
   20a30:	f00c fda4 	bl	2d57c <shell_fprintf>
   20a34:	e7f8      	b.n	20a28 <cmd_att_mtu+0x1c>
   20a36:	bf00      	nop
   20a38:	20002d84 	.word	0x20002d84
   20a3c:	00036a0f 	.word	0x00036a0f
   20a40:	00036a1d 	.word	0x00036a1d

00020a44 <notify_func>:
{
   20a44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20a46:	460d      	mov	r5, r1
   20a48:	4909      	ldr	r1, [pc, #36]	; (20a70 <notify_func+0x2c>)
	if (!data) {
   20a4a:	4614      	mov	r4, r2
   20a4c:	6808      	ldr	r0, [r1, #0]
   20a4e:	b93a      	cbnz	r2, 20a60 <notify_func+0x1c>
		shell_print(ctx_shell, "Unsubscribed");
   20a50:	4a08      	ldr	r2, [pc, #32]	; (20a74 <notify_func+0x30>)
   20a52:	2108      	movs	r1, #8
   20a54:	f00c fd92 	bl	2d57c <shell_fprintf>
		params->value_handle = 0U;
   20a58:	812c      	strh	r4, [r5, #8]
   20a5a:	4620      	mov	r0, r4
}
   20a5c:	b003      	add	sp, #12
   20a5e:	bd30      	pop	{r4, r5, pc}
	shell_print(ctx_shell, "Notification: data %p length %u", data, length);
   20a60:	9300      	str	r3, [sp, #0]
   20a62:	2108      	movs	r1, #8
   20a64:	4613      	mov	r3, r2
   20a66:	4a04      	ldr	r2, [pc, #16]	; (20a78 <notify_func+0x34>)
   20a68:	f00c fd88 	bl	2d57c <shell_fprintf>
	return BT_GATT_ITER_CONTINUE;
   20a6c:	2001      	movs	r0, #1
   20a6e:	e7f5      	b.n	20a5c <notify_func+0x18>
   20a70:	20002d80 	.word	0x20002d80
   20a74:	00036a34 	.word	0x00036a34
   20a78:	00036a42 	.word	0x00036a42

00020a7c <cmd_gatt>:
	SHELL_SUBCMD_SET_END
);

static int cmd_gatt(const struct shell *sh, size_t argc, char **argv)
{
	if (argc == 1) {
   20a7c:	2901      	cmp	r1, #1
{
   20a7e:	b513      	push	{r0, r1, r4, lr}
   20a80:	460c      	mov	r4, r1
	if (argc == 1) {
   20a82:	d104      	bne.n	20a8e <cmd_gatt+0x12>
		shell_help(sh);
   20a84:	f00c fd9f 	bl	2d5c6 <shell_help>
		/* shell returns 1 when help is printed */
		return 1;
   20a88:	4620      	mov	r0, r4
	}

	shell_error(sh, "%s unknown parameter: %s", argv[0], argv[1]);

	return -EINVAL;
}
   20a8a:	b002      	add	sp, #8
   20a8c:	bd10      	pop	{r4, pc}
	shell_error(sh, "%s unknown parameter: %s", argv[0], argv[1]);
   20a8e:	6853      	ldr	r3, [r2, #4]
   20a90:	9300      	str	r3, [sp, #0]
   20a92:	6813      	ldr	r3, [r2, #0]
   20a94:	4a03      	ldr	r2, [pc, #12]	; (20aa4 <cmd_gatt+0x28>)
   20a96:	2101      	movs	r1, #1
   20a98:	f00c fd70 	bl	2d57c <shell_fprintf>
   20a9c:	f06f 0015 	mvn.w	r0, #21
   20aa0:	e7f3      	b.n	20a8a <cmd_gatt+0xe>
   20aa2:	bf00      	nop
   20aa4:	000360b4 	.word	0x000360b4

00020aa8 <set_cb>:
{
   20aa8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!attr->write) {
   20aac:	6883      	ldr	r3, [r0, #8]
{
   20aae:	b0c3      	sub	sp, #268	; 0x10c
   20ab0:	4607      	mov	r7, r0
   20ab2:	4615      	mov	r5, r2
	if (!attr->write) {
   20ab4:	bb63      	cbnz	r3, 20b10 <set_cb+0x68>
		shell_error(data->sh, "Write not supported");
   20ab6:	4a18      	ldr	r2, [pc, #96]	; (20b18 <set_cb+0x70>)
   20ab8:	6828      	ldr	r0, [r5, #0]
   20aba:	2101      	movs	r1, #1
   20abc:	f00c fd5e 	bl	2d57c <shell_fprintf>
		data->err = -ENOENT;
   20ac0:	f06f 0301 	mvn.w	r3, #1
   20ac4:	60eb      	str	r3, [r5, #12]
	return BT_GATT_ITER_CONTINUE;
   20ac6:	2001      	movs	r0, #1
   20ac8:	e01f      	b.n	20b0a <set_cb+0x62>
		buf[i] = strtoul(data->argv[i], NULL, 16);
   20aca:	68ab      	ldr	r3, [r5, #8]
   20acc:	2210      	movs	r2, #16
   20ace:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   20ad2:	2100      	movs	r1, #0
   20ad4:	f00b fa72 	bl	2bfbc <strtoul>
   20ad8:	f808 0006 	strb.w	r0, [r8, r6]
	for (i = 0; i < data->argc; i++) {
   20adc:	3601      	adds	r6, #1
   20ade:	686b      	ldr	r3, [r5, #4]
   20ae0:	429e      	cmp	r6, r3
   20ae2:	d3f2      	bcc.n	20aca <set_cb+0x22>
	ret = attr->write(NULL, attr, (void *)buf, i, 0, 0);
   20ae4:	2400      	movs	r4, #0
   20ae6:	b2b3      	uxth	r3, r6
   20ae8:	e9cd 4400 	strd	r4, r4, [sp]
   20aec:	f8d7 9008 	ldr.w	r9, [r7, #8]
   20af0:	4642      	mov	r2, r8
   20af2:	4639      	mov	r1, r7
   20af4:	4620      	mov	r0, r4
   20af6:	47c8      	blx	r9
	if (ret < 0) {
   20af8:	1e03      	subs	r3, r0, #0
   20afa:	dae4      	bge.n	20ac6 <set_cb+0x1e>
		shell_error(data->sh, "Failed to write: %zd", ret);
   20afc:	6828      	ldr	r0, [r5, #0]
   20afe:	4a07      	ldr	r2, [pc, #28]	; (20b1c <set_cb+0x74>)
		data->err = ret;
   20b00:	60eb      	str	r3, [r5, #12]
		shell_error(data->sh, "Failed to write: %zd", ret);
   20b02:	2101      	movs	r1, #1
   20b04:	f00c fd3a 	bl	2d57c <shell_fprintf>
		return BT_GATT_ITER_STOP;
   20b08:	4620      	mov	r0, r4
}
   20b0a:	b043      	add	sp, #268	; 0x10c
   20b0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < data->argc; i++) {
   20b10:	2600      	movs	r6, #0
   20b12:	f10d 0808 	add.w	r8, sp, #8
   20b16:	e7e2      	b.n	20ade <set_cb+0x36>
   20b18:	00036a63 	.word	0x00036a63
   20b1c:	00036a78 	.word	0x00036a78

00020b20 <cmd_show_db>:
{
   20b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memset(&stats, 0, sizeof(stats));
   20b24:	4d2a      	ldr	r5, [pc, #168]	; (20bd0 <cmd_show_db+0xb0>)
   20b26:	2400      	movs	r4, #0
	if (argc > 1) {
   20b28:	2901      	cmp	r1, #1
{
   20b2a:	b086      	sub	sp, #24
   20b2c:	4606      	mov	r6, r0
   20b2e:	4688      	mov	r8, r1
   20b30:	4617      	mov	r7, r2
	memset(&stats, 0, sizeof(stats));
   20b32:	602c      	str	r4, [r5, #0]
   20b34:	606c      	str	r4, [r5, #4]
	if (argc > 1) {
   20b36:	d920      	bls.n	20b7a <cmd_show_db+0x5a>
		uuid.val = strtoul(argv[1], NULL, 16);
   20b38:	6878      	ldr	r0, [r7, #4]
		uuid.uuid.type = BT_UUID_TYPE_16;
   20b3a:	f88d 4014 	strb.w	r4, [sp, #20]
		uuid.val = strtoul(argv[1], NULL, 16);
   20b3e:	2210      	movs	r2, #16
   20b40:	4621      	mov	r1, r4
   20b42:	f00b fa3b 	bl	2bfbc <strtoul>
		if (argc > 2) {
   20b46:	f1b8 0f02 	cmp.w	r8, #2
		uuid.val = strtoul(argv[1], NULL, 16);
   20b4a:	f8ad 0016 	strh.w	r0, [sp, #22]
		if (argc > 2) {
   20b4e:	d005      	beq.n	20b5c <cmd_show_db+0x3c>
			num_matches = strtoul(argv[2], NULL, 10);
   20b50:	4621      	mov	r1, r4
   20b52:	68b8      	ldr	r0, [r7, #8]
   20b54:	220a      	movs	r2, #10
   20b56:	f00b fa31 	bl	2bfbc <strtoul>
   20b5a:	b284      	uxth	r4, r0
		bt_gatt_foreach_attr_type(0x0001, 0xffff, &uuid.uuid, NULL,
   20b5c:	4b1d      	ldr	r3, [pc, #116]	; (20bd4 <cmd_show_db+0xb4>)
   20b5e:	9602      	str	r6, [sp, #8]
   20b60:	e9cd 4300 	strd	r4, r3, [sp]
   20b64:	aa05      	add	r2, sp, #20
   20b66:	2300      	movs	r3, #0
   20b68:	f64f 71ff 	movw	r1, #65535	; 0xffff
   20b6c:	2001      	movs	r0, #1
   20b6e:	f7fc fcf3 	bl	1d558 <bt_gatt_foreach_attr_type>
}
   20b72:	2000      	movs	r0, #0
   20b74:	b006      	add	sp, #24
   20b76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, print_attr, (void *)sh);
   20b7a:	4603      	mov	r3, r0
   20b7c:	4a15      	ldr	r2, [pc, #84]	; (20bd4 <cmd_show_db+0xb4>)
   20b7e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   20b82:	2001      	movs	r0, #1
   20b84:	f00e ff46 	bl	2fa14 <bt_gatt_foreach_attr>
	if (!stats.attr_count) {
   20b88:	886b      	ldrh	r3, [r5, #2]
   20b8a:	b92b      	cbnz	r3, 20b98 <cmd_show_db+0x78>
		shell_print(sh, "No attribute found");
   20b8c:	4a12      	ldr	r2, [pc, #72]	; (20bd8 <cmd_show_db+0xb8>)
   20b8e:	2108      	movs	r1, #8
   20b90:	4630      	mov	r0, r6
   20b92:	f00c fcf3 	bl	2d57c <shell_fprintf>
		return 0;
   20b96:	e7ec      	b.n	20b72 <cmd_show_db+0x52>
	total_len += stats.chrc_count * sizeof(struct bt_gatt_chrc);
   20b98:	88a9      	ldrh	r1, [r5, #4]
	total_len = stats.svc_count * sizeof(struct bt_gatt_service);
   20b9a:	882a      	ldrh	r2, [r5, #0]
	total_len += stats.ccc_count * sizeof(struct _bt_gatt_ccc);
   20b9c:	88ec      	ldrh	r4, [r5, #6]
	total_len += stats.chrc_count * sizeof(struct bt_gatt_chrc);
   20b9e:	00c9      	lsls	r1, r1, #3
   20ba0:	200c      	movs	r0, #12
   20ba2:	fb00 1202 	mla	r2, r0, r2, r1
	total_len += stats.attr_count * sizeof(struct bt_gatt_attr);
   20ba6:	2114      	movs	r1, #20
   20ba8:	fb01 2303 	mla	r3, r1, r3, r2
	total_len += stats.ccc_count * sizeof(struct _bt_gatt_ccc);
   20bac:	2218      	movs	r2, #24
   20bae:	fb02 3404 	mla	r4, r2, r4, r3
	shell_print(sh, "=================================================");
   20bb2:	4630      	mov	r0, r6
   20bb4:	4a09      	ldr	r2, [pc, #36]	; (20bdc <cmd_show_db+0xbc>)
   20bb6:	2108      	movs	r1, #8
   20bb8:	f00c fce0 	bl	2d57c <shell_fprintf>
	shell_print(sh, "Total: %u services %u attributes (%zu bytes)",
   20bbc:	886b      	ldrh	r3, [r5, #2]
   20bbe:	9300      	str	r3, [sp, #0]
   20bc0:	4a07      	ldr	r2, [pc, #28]	; (20be0 <cmd_show_db+0xc0>)
   20bc2:	882b      	ldrh	r3, [r5, #0]
   20bc4:	9401      	str	r4, [sp, #4]
   20bc6:	2108      	movs	r1, #8
   20bc8:	4630      	mov	r0, r6
   20bca:	f00c fcd7 	bl	2d57c <shell_fprintf>
	return 0;
   20bce:	e7d0      	b.n	20b72 <cmd_show_db+0x52>
   20bd0:	20003914 	.word	0x20003914
   20bd4:	00020041 	.word	0x00020041
   20bd8:	00036a8e 	.word	0x00036a8e
   20bdc:	00036aa2 	.word	0x00036aa2
   20be0:	00036ad5 	.word	0x00036ad5

00020be4 <cmd_unsubscribe>:
{
   20be4:	b538      	push	{r3, r4, r5, lr}
	if (!default_conn) {
   20be6:	4b11      	ldr	r3, [pc, #68]	; (20c2c <cmd_unsubscribe+0x48>)
   20be8:	681b      	ldr	r3, [r3, #0]
{
   20bea:	4605      	mov	r5, r0
	if (!default_conn) {
   20bec:	b93b      	cbnz	r3, 20bfe <cmd_unsubscribe+0x1a>
		shell_error(sh, "Not connected");
   20bee:	4a10      	ldr	r2, [pc, #64]	; (20c30 <cmd_unsubscribe+0x4c>)
		shell_error(sh, "No subscription found");
   20bf0:	2101      	movs	r1, #1
   20bf2:	f00c fcc3 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   20bf6:	f06f 0407 	mvn.w	r4, #7
}
   20bfa:	4620      	mov	r0, r4
   20bfc:	bd38      	pop	{r3, r4, r5, pc}
	if (!subscribe_params.value_handle) {
   20bfe:	490d      	ldr	r1, [pc, #52]	; (20c34 <cmd_unsubscribe+0x50>)
   20c00:	890a      	ldrh	r2, [r1, #8]
   20c02:	b90a      	cbnz	r2, 20c08 <cmd_unsubscribe+0x24>
		shell_error(sh, "No subscription found");
   20c04:	4a0c      	ldr	r2, [pc, #48]	; (20c38 <cmd_unsubscribe+0x54>)
   20c06:	e7f3      	b.n	20bf0 <cmd_unsubscribe+0xc>
	err = bt_gatt_unsubscribe(default_conn, &subscribe_params);
   20c08:	4618      	mov	r0, r3
   20c0a:	f7fe f831 	bl	1ec70 <bt_gatt_unsubscribe>
	if (err) {
   20c0e:	4604      	mov	r4, r0
   20c10:	b130      	cbz	r0, 20c20 <cmd_unsubscribe+0x3c>
		shell_error(sh, "Unsubscribe failed (err %d)", err);
   20c12:	4603      	mov	r3, r0
   20c14:	4a09      	ldr	r2, [pc, #36]	; (20c3c <cmd_unsubscribe+0x58>)
   20c16:	2101      	movs	r1, #1
   20c18:	4628      	mov	r0, r5
   20c1a:	f00c fcaf 	bl	2d57c <shell_fprintf>
   20c1e:	e7ec      	b.n	20bfa <cmd_unsubscribe+0x16>
		shell_print(sh, "Unsubscribe success");
   20c20:	4a07      	ldr	r2, [pc, #28]	; (20c40 <cmd_unsubscribe+0x5c>)
   20c22:	2108      	movs	r1, #8
   20c24:	4628      	mov	r0, r5
   20c26:	f00c fca9 	bl	2d57c <shell_fprintf>
   20c2a:	e7e6      	b.n	20bfa <cmd_unsubscribe+0x16>
   20c2c:	20002d84 	.word	0x20002d84
   20c30:	00035e30 	.word	0x00035e30
   20c34:	20002db8 	.word	0x20002db8
   20c38:	00036b03 	.word	0x00036b03
   20c3c:	00036b1a 	.word	0x00036b1a
   20c40:	00036b37 	.word	0x00036b37

00020c44 <read_func>:
{
   20c44:	b537      	push	{r0, r1, r2, r4, r5, lr}
   20c46:	461c      	mov	r4, r3
	shell_print(ctx_shell, "Read complete: err 0x%02x length %u", err, length);
   20c48:	480a      	ldr	r0, [pc, #40]	; (20c74 <read_func+0x30>)
   20c4a:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   20c4e:	9300      	str	r3, [sp, #0]
{
   20c50:	4615      	mov	r5, r2
	shell_print(ctx_shell, "Read complete: err 0x%02x length %u", err, length);
   20c52:	460b      	mov	r3, r1
   20c54:	4a08      	ldr	r2, [pc, #32]	; (20c78 <read_func+0x34>)
   20c56:	6800      	ldr	r0, [r0, #0]
   20c58:	2108      	movs	r1, #8
   20c5a:	f00c fc8f 	bl	2d57c <shell_fprintf>
	if (!data) {
   20c5e:	b93c      	cbnz	r4, 20c70 <read_func+0x2c>
   20c60:	2210      	movs	r2, #16
   20c62:	4621      	mov	r1, r4
   20c64:	4628      	mov	r0, r5
   20c66:	f00f fce0 	bl	3062a <memset>
   20c6a:	4620      	mov	r0, r4
}
   20c6c:	b003      	add	sp, #12
   20c6e:	bd30      	pop	{r4, r5, pc}
	return BT_GATT_ITER_CONTINUE;
   20c70:	2001      	movs	r0, #1
   20c72:	e7fb      	b.n	20c6c <read_func+0x28>
   20c74:	20002d80 	.word	0x20002d80
   20c78:	00036b4c 	.word	0x00036b4c

00020c7c <exchange_func>:
{
   20c7c:	b510      	push	{r4, lr}
	shell_print(ctx_shell, "Exchange %s", err == 0U ? "successful" :
   20c7e:	4b07      	ldr	r3, [pc, #28]	; (20c9c <exchange_func+0x20>)
   20c80:	4807      	ldr	r0, [pc, #28]	; (20ca0 <exchange_func+0x24>)
{
   20c82:	4614      	mov	r4, r2
	shell_print(ctx_shell, "Exchange %s", err == 0U ? "successful" :
   20c84:	4a07      	ldr	r2, [pc, #28]	; (20ca4 <exchange_func+0x28>)
   20c86:	6800      	ldr	r0, [r0, #0]
   20c88:	2900      	cmp	r1, #0
   20c8a:	bf18      	it	ne
   20c8c:	4613      	movne	r3, r2
   20c8e:	4a06      	ldr	r2, [pc, #24]	; (20ca8 <exchange_func+0x2c>)
   20c90:	2108      	movs	r1, #8
   20c92:	f00c fc73 	bl	2d57c <shell_fprintf>
   20c96:	2300      	movs	r3, #0
   20c98:	6023      	str	r3, [r4, #0]
}
   20c9a:	bd10      	pop	{r4, pc}
   20c9c:	00036b71 	.word	0x00036b71
   20ca0:	20002d80 	.word	0x20002d80
   20ca4:	00035ad9 	.word	0x00035ad9
   20ca8:	00036b7c 	.word	0x00036b7c

00020cac <cmd_exchange_mtu>:
{
   20cac:	b538      	push	{r3, r4, r5, lr}
	if (!default_conn) {
   20cae:	4b12      	ldr	r3, [pc, #72]	; (20cf8 <cmd_exchange_mtu+0x4c>)
   20cb0:	681b      	ldr	r3, [r3, #0]
{
   20cb2:	4605      	mov	r5, r0
	if (!default_conn) {
   20cb4:	b93b      	cbnz	r3, 20cc6 <cmd_exchange_mtu+0x1a>
		shell_print(sh, "Not connected");
   20cb6:	4a11      	ldr	r2, [pc, #68]	; (20cfc <cmd_exchange_mtu+0x50>)
		shell_print(sh, "MTU Exchange ongoing");
   20cb8:	2108      	movs	r1, #8
   20cba:	f00c fc5f 	bl	2d57c <shell_fprintf>
		return -ENOEXEC;
   20cbe:	f06f 0407 	mvn.w	r4, #7
}
   20cc2:	4620      	mov	r0, r4
   20cc4:	bd38      	pop	{r3, r4, r5, pc}
	if (exchange_params.func) {
   20cc6:	490e      	ldr	r1, [pc, #56]	; (20d00 <cmd_exchange_mtu+0x54>)
   20cc8:	680a      	ldr	r2, [r1, #0]
   20cca:	b10a      	cbz	r2, 20cd0 <cmd_exchange_mtu+0x24>
		shell_print(sh, "MTU Exchange ongoing");
   20ccc:	4a0d      	ldr	r2, [pc, #52]	; (20d04 <cmd_exchange_mtu+0x58>)
   20cce:	e7f3      	b.n	20cb8 <cmd_exchange_mtu+0xc>
	exchange_params.func = exchange_func;
   20cd0:	4a0d      	ldr	r2, [pc, #52]	; (20d08 <cmd_exchange_mtu+0x5c>)
   20cd2:	600a      	str	r2, [r1, #0]
	err = bt_gatt_exchange_mtu(default_conn, &exchange_params);
   20cd4:	4618      	mov	r0, r3
   20cd6:	f7fc ffcb 	bl	1dc70 <bt_gatt_exchange_mtu>
	if (err) {
   20cda:	4604      	mov	r4, r0
   20cdc:	b130      	cbz	r0, 20cec <cmd_exchange_mtu+0x40>
		shell_print(sh, "Exchange failed (err %d)", err);
   20cde:	4603      	mov	r3, r0
   20ce0:	4a0a      	ldr	r2, [pc, #40]	; (20d0c <cmd_exchange_mtu+0x60>)
   20ce2:	2108      	movs	r1, #8
   20ce4:	4628      	mov	r0, r5
   20ce6:	f00c fc49 	bl	2d57c <shell_fprintf>
   20cea:	e7ea      	b.n	20cc2 <cmd_exchange_mtu+0x16>
		shell_print(sh, "Exchange pending");
   20cec:	4a08      	ldr	r2, [pc, #32]	; (20d10 <cmd_exchange_mtu+0x64>)
   20cee:	2108      	movs	r1, #8
   20cf0:	4628      	mov	r0, r5
   20cf2:	f00c fc43 	bl	2d57c <shell_fprintf>
   20cf6:	e7e4      	b.n	20cc2 <cmd_exchange_mtu+0x16>
   20cf8:	20002d84 	.word	0x20002d84
   20cfc:	00035e30 	.word	0x00035e30
   20d00:	20002da4 	.word	0x20002da4
   20d04:	00036b89 	.word	0x00036b89
   20d08:	00020c7d 	.word	0x00020c7d
   20d0c:	00036b9f 	.word	0x00036b9f
   20d10:	00036bb9 	.word	0x00036bb9

00020d14 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   20d14:	4b02      	ldr	r3, [pc, #8]	; (20d20 <net_buf_pool_get+0xc>)
   20d16:	2234      	movs	r2, #52	; 0x34
   20d18:	fb02 3000 	mla	r0, r2, r0, r3
   20d1c:	4770      	bx	lr
   20d1e:	bf00      	nop
   20d20:	20000994 	.word	0x20000994

00020d24 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20d24:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   20d26:	4a07      	ldr	r2, [pc, #28]	; (20d44 <net_buf_id+0x20>)
   20d28:	2134      	movs	r1, #52	; 0x34
   20d2a:	fb01 2303 	mla	r3, r1, r3, r2
   20d2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20d30:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   20d34:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   20d36:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20d38:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   20d3c:	fbb0 f0f3 	udiv	r0, r0, r3
   20d40:	4770      	bx	lr
   20d42:	bf00      	nop
   20d44:	20000994 	.word	0x20000994

00020d48 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   20d48:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20d4a:	4a0a      	ldr	r2, [pc, #40]	; (20d74 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20d4c:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20d4e:	2434      	movs	r4, #52	; 0x34
   20d50:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   20d54:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   20d56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20d58:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   20d5a:	6823      	ldr	r3, [r4, #0]
   20d5c:	429a      	cmp	r2, r3
   20d5e:	bf94      	ite	ls
   20d60:	600a      	strls	r2, [r1, #0]
   20d62:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   20d64:	f7ff ffde 	bl	20d24 <net_buf_id>
   20d68:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   20d6c:	fb02 3000 	mla	r0, r2, r0, r3
   20d70:	bd10      	pop	{r4, pc}
   20d72:	bf00      	nop
   20d74:	20000994 	.word	0x20000994

00020d78 <net_buf_reset>:
{
   20d78:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   20d7a:	7943      	ldrb	r3, [r0, #5]
{
   20d7c:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   20d7e:	b14b      	cbz	r3, 20d94 <net_buf_reset+0x1c>
   20d80:	490d      	ldr	r1, [pc, #52]	; (20db8 <net_buf_reset+0x40>)
   20d82:	480e      	ldr	r0, [pc, #56]	; (20dbc <net_buf_reset+0x44>)
   20d84:	4a0e      	ldr	r2, [pc, #56]	; (20dc0 <net_buf_reset+0x48>)
   20d86:	2356      	movs	r3, #86	; 0x56
   20d88:	f00b fc07 	bl	2c59a <printk>
   20d8c:	480c      	ldr	r0, [pc, #48]	; (20dc0 <net_buf_reset+0x48>)
   20d8e:	2156      	movs	r1, #86	; 0x56
   20d90:	f00b fe44 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   20d94:	6823      	ldr	r3, [r4, #0]
   20d96:	b14b      	cbz	r3, 20dac <net_buf_reset+0x34>
   20d98:	490a      	ldr	r1, [pc, #40]	; (20dc4 <net_buf_reset+0x4c>)
   20d9a:	4808      	ldr	r0, [pc, #32]	; (20dbc <net_buf_reset+0x44>)
   20d9c:	4a08      	ldr	r2, [pc, #32]	; (20dc0 <net_buf_reset+0x48>)
   20d9e:	2357      	movs	r3, #87	; 0x57
   20da0:	f00b fbfb 	bl	2c59a <printk>
   20da4:	4806      	ldr	r0, [pc, #24]	; (20dc0 <net_buf_reset+0x48>)
   20da6:	2157      	movs	r1, #87	; 0x57
   20da8:	f00b fe38 	bl	2ca1c <assert_post_action>
	buf->len  = 0U;
   20dac:	2300      	movs	r3, #0
   20dae:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   20db0:	6923      	ldr	r3, [r4, #16]
   20db2:	60a3      	str	r3, [r4, #8]
}
   20db4:	bd10      	pop	{r4, pc}
   20db6:	bf00      	nop
   20db8:	00036dde 	.word	0x00036dde
   20dbc:	00032486 	.word	0x00032486
   20dc0:	00036dba 	.word	0x00036dba
   20dc4:	00036def 	.word	0x00036def

00020dc8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   20dc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20dcc:	4605      	mov	r5, r0
   20dce:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20dd0:	4610      	mov	r0, r2
   20dd2:	4619      	mov	r1, r3
{
   20dd4:	4616      	mov	r6, r2
   20dd6:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   20dd8:	f00f fb46 	bl	30468 <sys_clock_timeout_end_calc>
   20ddc:	4681      	mov	r9, r0
   20dde:	468a      	mov	sl, r1
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   20de0:	b94d      	cbnz	r5, 20df6 <net_buf_alloc_len+0x2e>
   20de2:	4978      	ldr	r1, [pc, #480]	; (20fc4 <net_buf_alloc_len+0x1fc>)
   20de4:	4878      	ldr	r0, [pc, #480]	; (20fc8 <net_buf_alloc_len+0x200>)
   20de6:	4a79      	ldr	r2, [pc, #484]	; (20fcc <net_buf_alloc_len+0x204>)
   20de8:	23f4      	movs	r3, #244	; 0xf4
   20dea:	f00b fbd6 	bl	2c59a <printk>
   20dee:	4877      	ldr	r0, [pc, #476]	; (20fcc <net_buf_alloc_len+0x204>)
   20df0:	21f4      	movs	r1, #244	; 0xf4
   20df2:	f00b fe13 	bl	2ca1c <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   20df6:	f105 081c 	add.w	r8, r5, #28
	__asm__ volatile(
   20dfa:	f04f 0340 	mov.w	r3, #64	; 0x40
   20dfe:	f3ef 8b11 	mrs	fp, BASEPRI
   20e02:	f383 8812 	msr	BASEPRI_MAX, r3
   20e06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   20e0a:	4640      	mov	r0, r8
   20e0c:	f004 f84e 	bl	24eac <z_spin_lock_valid>
   20e10:	b968      	cbnz	r0, 20e2e <net_buf_alloc_len+0x66>
   20e12:	4a6f      	ldr	r2, [pc, #444]	; (20fd0 <net_buf_alloc_len+0x208>)
   20e14:	496f      	ldr	r1, [pc, #444]	; (20fd4 <net_buf_alloc_len+0x20c>)
   20e16:	486c      	ldr	r0, [pc, #432]	; (20fc8 <net_buf_alloc_len+0x200>)
   20e18:	2381      	movs	r3, #129	; 0x81
   20e1a:	f00b fbbe 	bl	2c59a <printk>
   20e1e:	486e      	ldr	r0, [pc, #440]	; (20fd8 <net_buf_alloc_len+0x210>)
   20e20:	4641      	mov	r1, r8
   20e22:	f00b fbba 	bl	2c59a <printk>
   20e26:	486a      	ldr	r0, [pc, #424]	; (20fd0 <net_buf_alloc_len+0x208>)
   20e28:	2181      	movs	r1, #129	; 0x81
   20e2a:	f00b fdf7 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   20e2e:	4640      	mov	r0, r8
   20e30:	f004 f85a 	bl	24ee8 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   20e34:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   20e36:	2b00      	cmp	r3, #0
   20e38:	f000 8082 	beq.w	20f40 <net_buf_alloc_len+0x178>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   20e3c:	8c2a      	ldrh	r2, [r5, #32]
   20e3e:	429a      	cmp	r2, r3
   20e40:	d952      	bls.n	20ee8 <net_buf_alloc_len+0x120>
	return z_impl_k_queue_get(queue, timeout);
   20e42:	2200      	movs	r2, #0
   20e44:	2300      	movs	r3, #0
   20e46:	4628      	mov	r0, r5
   20e48:	f004 ff6a 	bl	25d20 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   20e4c:	4604      	mov	r4, r0
   20e4e:	2800      	cmp	r0, #0
   20e50:	d04a      	beq.n	20ee8 <net_buf_alloc_len+0x120>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   20e52:	4640      	mov	r0, r8
   20e54:	f004 f838 	bl	24ec8 <z_spin_unlock_valid>
   20e58:	b968      	cbnz	r0, 20e76 <net_buf_alloc_len+0xae>
   20e5a:	4a5d      	ldr	r2, [pc, #372]	; (20fd0 <net_buf_alloc_len+0x208>)
   20e5c:	495f      	ldr	r1, [pc, #380]	; (20fdc <net_buf_alloc_len+0x214>)
   20e5e:	485a      	ldr	r0, [pc, #360]	; (20fc8 <net_buf_alloc_len+0x200>)
   20e60:	23ac      	movs	r3, #172	; 0xac
   20e62:	f00b fb9a 	bl	2c59a <printk>
   20e66:	485e      	ldr	r0, [pc, #376]	; (20fe0 <net_buf_alloc_len+0x218>)
   20e68:	4641      	mov	r1, r8
   20e6a:	f00b fb96 	bl	2c59a <printk>
   20e6e:	4858      	ldr	r0, [pc, #352]	; (20fd0 <net_buf_alloc_len+0x208>)
   20e70:	21ac      	movs	r1, #172	; 0xac
   20e72:	f00b fdd3 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   20e76:	f38b 8811 	msr	BASEPRI, fp
   20e7a:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   20e7e:	f8dd 8004 	ldr.w	r8, [sp, #4]
   20e82:	f1b8 0f00 	cmp.w	r8, #0
   20e86:	f000 8099 	beq.w	20fbc <net_buf_alloc_len+0x1f4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   20e8a:	ea56 0307 	orrs.w	r3, r6, r7
   20e8e:	d010      	beq.n	20eb2 <net_buf_alloc_len+0xea>
   20e90:	1c7b      	adds	r3, r7, #1
   20e92:	bf08      	it	eq
   20e94:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   20e98:	d00b      	beq.n	20eb2 <net_buf_alloc_len+0xea>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   20e9a:	f007 fbbd 	bl	28618 <sys_clock_tick_get>
   20e9e:	ebb9 0600 	subs.w	r6, r9, r0
   20ea2:	eb6a 0701 	sbc.w	r7, sl, r1
   20ea6:	2e00      	cmp	r6, #0
   20ea8:	f177 0300 	sbcs.w	r3, r7, #0
   20eac:	bfbc      	itt	lt
   20eae:	2600      	movlt	r6, #0
   20eb0:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   20eb2:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   20eb4:	f8df 912c 	ldr.w	r9, [pc, #300]	; 20fe4 <net_buf_alloc_len+0x21c>
   20eb8:	f04f 0a34 	mov.w	sl, #52	; 0x34
   20ebc:	fb0a 9303 	mla	r3, sl, r3, r9
   20ec0:	4632      	mov	r2, r6
   20ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   20ec4:	681b      	ldr	r3, [r3, #0]
   20ec6:	a901      	add	r1, sp, #4
   20ec8:	681d      	ldr	r5, [r3, #0]
   20eca:	4620      	mov	r0, r4
   20ecc:	463b      	mov	r3, r7
   20ece:	47a8      	blx	r5
   20ed0:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   20ed2:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   20ed4:	2800      	cmp	r0, #0
   20ed6:	d155      	bne.n	20f84 <net_buf_alloc_len+0x1bc>
	k_lifo_put(&pool->free, buf);
   20ed8:	79a0      	ldrb	r0, [r4, #6]
   20eda:	4621      	mov	r1, r4
   20edc:	fb00 900a 	mla	r0, r0, sl, r9
   20ee0:	f00f fa1d 	bl	3031e <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   20ee4:	462c      	mov	r4, r5
}
   20ee6:	e049      	b.n	20f7c <net_buf_alloc_len+0x1b4>
		uninit_count = pool->uninit_count--;
   20ee8:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   20eea:	1e63      	subs	r3, r4, #1
   20eec:	846b      	strh	r3, [r5, #34]	; 0x22
   20eee:	4640      	mov	r0, r8
   20ef0:	f003 ffea 	bl	24ec8 <z_spin_unlock_valid>
   20ef4:	b968      	cbnz	r0, 20f12 <net_buf_alloc_len+0x14a>
   20ef6:	4a36      	ldr	r2, [pc, #216]	; (20fd0 <net_buf_alloc_len+0x208>)
   20ef8:	4938      	ldr	r1, [pc, #224]	; (20fdc <net_buf_alloc_len+0x214>)
   20efa:	4833      	ldr	r0, [pc, #204]	; (20fc8 <net_buf_alloc_len+0x200>)
   20efc:	23ac      	movs	r3, #172	; 0xac
   20efe:	f00b fb4c 	bl	2c59a <printk>
   20f02:	4837      	ldr	r0, [pc, #220]	; (20fe0 <net_buf_alloc_len+0x218>)
   20f04:	4641      	mov	r1, r8
   20f06:	f00b fb48 	bl	2c59a <printk>
   20f0a:	4831      	ldr	r0, [pc, #196]	; (20fd0 <net_buf_alloc_len+0x208>)
   20f0c:	21ac      	movs	r1, #172	; 0xac
   20f0e:	f00b fd85 	bl	2ca1c <assert_post_action>
   20f12:	f38b 8811 	msr	BASEPRI, fp
   20f16:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   20f1a:	8c2b      	ldrh	r3, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20f1c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   20f20:	1b1c      	subs	r4, r3, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20f22:	f102 0017 	add.w	r0, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   20f26:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   20f28:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   20f2c:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
   20f30:	482c      	ldr	r0, [pc, #176]	; (20fe4 <net_buf_alloc_len+0x21c>)
   20f32:	4b2d      	ldr	r3, [pc, #180]	; (20fe8 <net_buf_alloc_len+0x220>)
	buf->user_data_size = pool->user_data_size;
   20f34:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   20f36:	1a2d      	subs	r5, r5, r0
   20f38:	10ad      	asrs	r5, r5, #2
   20f3a:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   20f3c:	71a5      	strb	r5, [r4, #6]
		goto success;
   20f3e:	e79e      	b.n	20e7e <net_buf_alloc_len+0xb6>
   20f40:	4640      	mov	r0, r8
   20f42:	f003 ffc1 	bl	24ec8 <z_spin_unlock_valid>
   20f46:	b968      	cbnz	r0, 20f64 <net_buf_alloc_len+0x19c>
   20f48:	4a21      	ldr	r2, [pc, #132]	; (20fd0 <net_buf_alloc_len+0x208>)
   20f4a:	4924      	ldr	r1, [pc, #144]	; (20fdc <net_buf_alloc_len+0x214>)
   20f4c:	481e      	ldr	r0, [pc, #120]	; (20fc8 <net_buf_alloc_len+0x200>)
   20f4e:	23ac      	movs	r3, #172	; 0xac
   20f50:	f00b fb23 	bl	2c59a <printk>
   20f54:	4822      	ldr	r0, [pc, #136]	; (20fe0 <net_buf_alloc_len+0x218>)
   20f56:	4641      	mov	r1, r8
   20f58:	f00b fb1f 	bl	2c59a <printk>
   20f5c:	481c      	ldr	r0, [pc, #112]	; (20fd0 <net_buf_alloc_len+0x208>)
   20f5e:	21ac      	movs	r1, #172	; 0xac
   20f60:	f00b fd5c 	bl	2ca1c <assert_post_action>
   20f64:	f38b 8811 	msr	BASEPRI, fp
   20f68:	f3bf 8f6f 	isb	sy
   20f6c:	4632      	mov	r2, r6
   20f6e:	463b      	mov	r3, r7
   20f70:	4628      	mov	r0, r5
   20f72:	f004 fed5 	bl	25d20 <z_impl_k_queue_get>
	if (!buf) {
   20f76:	4604      	mov	r4, r0
   20f78:	2800      	cmp	r0, #0
   20f7a:	d180      	bne.n	20e7e <net_buf_alloc_len+0xb6>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   20f7c:	4620      	mov	r0, r4
   20f7e:	b003      	add	sp, #12
   20f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   20f84:	9b01      	ldr	r3, [sp, #4]
   20f86:	4598      	cmp	r8, r3
   20f88:	d90e      	bls.n	20fa8 <net_buf_alloc_len+0x1e0>
   20f8a:	4918      	ldr	r1, [pc, #96]	; (20fec <net_buf_alloc_len+0x224>)
   20f8c:	4a0f      	ldr	r2, [pc, #60]	; (20fcc <net_buf_alloc_len+0x204>)
   20f8e:	480e      	ldr	r0, [pc, #56]	; (20fc8 <net_buf_alloc_len+0x200>)
   20f90:	f240 1355 	movw	r3, #341	; 0x155
   20f94:	f00b fb01 	bl	2c59a <printk>
   20f98:	4815      	ldr	r0, [pc, #84]	; (20ff0 <net_buf_alloc_len+0x228>)
   20f9a:	f00b fafe 	bl	2c59a <printk>
   20f9e:	480b      	ldr	r0, [pc, #44]	; (20fcc <net_buf_alloc_len+0x204>)
   20fa0:	f240 1155 	movw	r1, #341	; 0x155
   20fa4:	f00b fd3a 	bl	2ca1c <assert_post_action>
	buf->frags = NULL;
   20fa8:	2300      	movs	r3, #0
   20faa:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   20fac:	2301      	movs	r3, #1
   20fae:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   20fb0:	9b01      	ldr	r3, [sp, #4]
   20fb2:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   20fb4:	4620      	mov	r0, r4
   20fb6:	f7ff fedf 	bl	20d78 <net_buf_reset>
	return buf;
   20fba:	e7df      	b.n	20f7c <net_buf_alloc_len+0x1b4>
		buf->__buf = NULL;
   20fbc:	f8c4 8010 	str.w	r8, [r4, #16]
   20fc0:	e7f2      	b.n	20fa8 <net_buf_alloc_len+0x1e0>
   20fc2:	bf00      	nop
   20fc4:	00036e09 	.word	0x00036e09
   20fc8:	00032486 	.word	0x00032486
   20fcc:	00036dba 	.word	0x00036dba
   20fd0:	00032546 	.word	0x00032546
   20fd4:	00032598 	.word	0x00032598
   20fd8:	000325ad 	.word	0x000325ad
   20fdc:	0003256c 	.word	0x0003256c
   20fe0:	00032583 	.word	0x00032583
   20fe4:	20000994 	.word	0x20000994
   20fe8:	c4ec4ec5 	.word	0xc4ec4ec5
   20fec:	00036e0e 	.word	0x00036e0e
   20ff0:	00036e1f 	.word	0x00036e1f

00020ff4 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   20ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20ff8:	4606      	mov	r6, r0
   20ffa:	f004 fe91 	bl	25d20 <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   20ffe:	4605      	mov	r5, r0
   21000:	b150      	cbz	r0, 21018 <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   21002:	4f13      	ldr	r7, [pc, #76]	; (21050 <net_buf_get+0x5c>)
   21004:	f8df 804c 	ldr.w	r8, [pc, #76]	; 21054 <net_buf_get+0x60>
   21008:	f8df 904c 	ldr.w	r9, [pc, #76]	; 21058 <net_buf_get+0x64>
   2100c:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2100e:	7963      	ldrb	r3, [r4, #5]
   21010:	f013 0301 	ands.w	r3, r3, #1
   21014:	d103      	bne.n	2101e <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   21016:	6023      	str	r3, [r4, #0]

	return buf;
}
   21018:	4628      	mov	r0, r5
   2101a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2101e:	2200      	movs	r2, #0
   21020:	2300      	movs	r3, #0
   21022:	4630      	mov	r0, r6
   21024:	f004 fe7c 	bl	25d20 <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   21028:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   2102a:	b958      	cbnz	r0, 21044 <net_buf_get+0x50>
   2102c:	4641      	mov	r1, r8
   2102e:	4648      	mov	r0, r9
   21030:	f240 13ad 	movw	r3, #429	; 0x1ad
   21034:	463a      	mov	r2, r7
   21036:	f00b fab0 	bl	2c59a <printk>
   2103a:	f240 11ad 	movw	r1, #429	; 0x1ad
   2103e:	4638      	mov	r0, r7
   21040:	f00b fcec 	bl	2ca1c <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   21044:	7963      	ldrb	r3, [r4, #5]
   21046:	f023 0301 	bic.w	r3, r3, #1
   2104a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2104c:	6824      	ldr	r4, [r4, #0]
   2104e:	e7de      	b.n	2100e <net_buf_get+0x1a>
   21050:	00036dba 	.word	0x00036dba
   21054:	00036e22 	.word	0x00036e22
   21058:	00032486 	.word	0x00032486

0002105c <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   2105c:	b538      	push	{r3, r4, r5, lr}
   2105e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   21060:	4604      	mov	r4, r0
   21062:	b958      	cbnz	r0, 2107c <net_buf_simple_reserve+0x20>
   21064:	490e      	ldr	r1, [pc, #56]	; (210a0 <net_buf_simple_reserve+0x44>)
   21066:	480f      	ldr	r0, [pc, #60]	; (210a4 <net_buf_simple_reserve+0x48>)
   21068:	4a0f      	ldr	r2, [pc, #60]	; (210a8 <net_buf_simple_reserve+0x4c>)
   2106a:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   2106e:	f00b fa94 	bl	2c59a <printk>
   21072:	480d      	ldr	r0, [pc, #52]	; (210a8 <net_buf_simple_reserve+0x4c>)
   21074:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   21078:	f00b fcd0 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   2107c:	88a3      	ldrh	r3, [r4, #4]
   2107e:	b15b      	cbz	r3, 21098 <net_buf_simple_reserve+0x3c>
   21080:	490a      	ldr	r1, [pc, #40]	; (210ac <net_buf_simple_reserve+0x50>)
   21082:	4808      	ldr	r0, [pc, #32]	; (210a4 <net_buf_simple_reserve+0x48>)
   21084:	4a08      	ldr	r2, [pc, #32]	; (210a8 <net_buf_simple_reserve+0x4c>)
   21086:	f240 13c5 	movw	r3, #453	; 0x1c5
   2108a:	f00b fa86 	bl	2c59a <printk>
   2108e:	4806      	ldr	r0, [pc, #24]	; (210a8 <net_buf_simple_reserve+0x4c>)
   21090:	f240 11c5 	movw	r1, #453	; 0x1c5
   21094:	f00b fcc2 	bl	2ca1c <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   21098:	68a3      	ldr	r3, [r4, #8]
   2109a:	442b      	add	r3, r5
   2109c:	6023      	str	r3, [r4, #0]
}
   2109e:	bd38      	pop	{r3, r4, r5, pc}
   210a0:	00034a77 	.word	0x00034a77
   210a4:	00032486 	.word	0x00032486
   210a8:	00036dba 	.word	0x00036dba
   210ac:	00036e2e 	.word	0x00036e2e

000210b0 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   210b0:	b538      	push	{r3, r4, r5, lr}
   210b2:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   210b4:	4605      	mov	r5, r0
   210b6:	b958      	cbnz	r0, 210d0 <net_buf_put+0x20>
   210b8:	4913      	ldr	r1, [pc, #76]	; (21108 <net_buf_put+0x58>)
   210ba:	4814      	ldr	r0, [pc, #80]	; (2110c <net_buf_put+0x5c>)
   210bc:	4a14      	ldr	r2, [pc, #80]	; (21110 <net_buf_put+0x60>)
   210be:	f44f 7300 	mov.w	r3, #512	; 0x200
   210c2:	f00b fa6a 	bl	2c59a <printk>
   210c6:	4812      	ldr	r0, [pc, #72]	; (21110 <net_buf_put+0x60>)
   210c8:	f44f 7100 	mov.w	r1, #512	; 0x200
   210cc:	f00b fca6 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(buf);
   210d0:	b95c      	cbnz	r4, 210ea <net_buf_put+0x3a>
   210d2:	4910      	ldr	r1, [pc, #64]	; (21114 <net_buf_put+0x64>)
   210d4:	480d      	ldr	r0, [pc, #52]	; (2110c <net_buf_put+0x5c>)
   210d6:	4a0e      	ldr	r2, [pc, #56]	; (21110 <net_buf_put+0x60>)
   210d8:	f240 2301 	movw	r3, #513	; 0x201
   210dc:	f00b fa5d 	bl	2c59a <printk>
   210e0:	480b      	ldr	r0, [pc, #44]	; (21110 <net_buf_put+0x60>)
   210e2:	f240 2101 	movw	r1, #513	; 0x201
   210e6:	f00b fc99 	bl	2ca1c <assert_post_action>
{
   210ea:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   210ec:	6811      	ldr	r1, [r2, #0]
   210ee:	b929      	cbnz	r1, 210fc <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   210f0:	4621      	mov	r1, r4
   210f2:	4628      	mov	r0, r5
}
   210f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   210f8:	f004 bdb4 	b.w	25c64 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   210fc:	7953      	ldrb	r3, [r2, #5]
   210fe:	f043 0301 	orr.w	r3, r3, #1
   21102:	7153      	strb	r3, [r2, #5]
   21104:	460a      	mov	r2, r1
   21106:	e7f1      	b.n	210ec <net_buf_put+0x3c>
   21108:	00036e3d 	.word	0x00036e3d
   2110c:	00032486 	.word	0x00032486
   21110:	00036dba 	.word	0x00036dba
   21114:	00034a77 	.word	0x00034a77

00021118 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   21118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   2111c:	4605      	mov	r5, r0
   2111e:	b328      	cbz	r0, 2116c <net_buf_unref+0x54>
   21120:	4e1c      	ldr	r6, [pc, #112]	; (21194 <net_buf_unref+0x7c>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   21122:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   21124:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   21128:	462c      	mov	r4, r5
   2112a:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   2112c:	7923      	ldrb	r3, [r4, #4]
   2112e:	3b01      	subs	r3, #1
   21130:	b2db      	uxtb	r3, r3
   21132:	7123      	strb	r3, [r4, #4]
   21134:	b9c3      	cbnz	r3, 21168 <net_buf_unref+0x50>
		if (buf->__buf) {
   21136:	6921      	ldr	r1, [r4, #16]
   21138:	b159      	cbz	r1, 21152 <net_buf_unref+0x3a>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2113a:	7963      	ldrb	r3, [r4, #5]
   2113c:	079b      	lsls	r3, r3, #30
   2113e:	d407      	bmi.n	21150 <net_buf_unref+0x38>
	pool->alloc->cb->unref(buf, data);
   21140:	79a3      	ldrb	r3, [r4, #6]
   21142:	fb08 6303 	mla	r3, r8, r3, r6
   21146:	4620      	mov	r0, r4
   21148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2114a:	681b      	ldr	r3, [r3, #0]
   2114c:	689b      	ldr	r3, [r3, #8]
   2114e:	4798      	blx	r3
			buf->__buf = NULL;
   21150:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   21152:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   21154:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   21156:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   2115a:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   2115c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2115e:	b19b      	cbz	r3, 21188 <net_buf_unref+0x70>
			pool->destroy(buf);
   21160:	4620      	mov	r0, r4
   21162:	4798      	blx	r3
	while (buf) {
   21164:	2d00      	cmp	r5, #0
   21166:	d1df      	bne.n	21128 <net_buf_unref+0x10>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   21168:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   2116c:	490a      	ldr	r1, [pc, #40]	; (21198 <net_buf_unref+0x80>)
   2116e:	480b      	ldr	r0, [pc, #44]	; (2119c <net_buf_unref+0x84>)
   21170:	4a0b      	ldr	r2, [pc, #44]	; (211a0 <net_buf_unref+0x88>)
   21172:	f44f 7304 	mov.w	r3, #528	; 0x210
   21176:	f00b fa10 	bl	2c59a <printk>
}
   2117a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   2117e:	4808      	ldr	r0, [pc, #32]	; (211a0 <net_buf_unref+0x88>)
   21180:	f44f 7104 	mov.w	r1, #528	; 0x210
   21184:	f00b bc4a 	b.w	2ca1c <assert_post_action>
	k_lifo_put(&pool->free, buf);
   21188:	4621      	mov	r1, r4
   2118a:	fb00 6008 	mla	r0, r0, r8, r6
   2118e:	f00f f8c6 	bl	3031e <k_queue_prepend>
}
   21192:	e7e7      	b.n	21164 <net_buf_unref+0x4c>
   21194:	20000994 	.word	0x20000994
   21198:	00034a77 	.word	0x00034a77
   2119c:	00032486 	.word	0x00032486
   211a0:	00036dba 	.word	0x00036dba

000211a4 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   211a4:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   211a6:	4604      	mov	r4, r0
   211a8:	b958      	cbnz	r0, 211c2 <net_buf_ref+0x1e>
   211aa:	4908      	ldr	r1, [pc, #32]	; (211cc <net_buf_ref+0x28>)
   211ac:	4808      	ldr	r0, [pc, #32]	; (211d0 <net_buf_ref+0x2c>)
   211ae:	4a09      	ldr	r2, [pc, #36]	; (211d4 <net_buf_ref+0x30>)
   211b0:	f240 233f 	movw	r3, #575	; 0x23f
   211b4:	f00b f9f1 	bl	2c59a <printk>
   211b8:	4806      	ldr	r0, [pc, #24]	; (211d4 <net_buf_ref+0x30>)
   211ba:	f240 213f 	movw	r1, #575	; 0x23f
   211be:	f00b fc2d 	bl	2ca1c <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   211c2:	7923      	ldrb	r3, [r4, #4]
   211c4:	3301      	adds	r3, #1
   211c6:	7123      	strb	r3, [r4, #4]
	return buf;
}
   211c8:	4620      	mov	r0, r4
   211ca:	bd10      	pop	{r4, pc}
   211cc:	00034a77 	.word	0x00034a77
   211d0:	00032486 	.word	0x00032486
   211d4:	00036dba 	.word	0x00036dba

000211d8 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   211d8:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   211da:	4604      	mov	r4, r0
   211dc:	b958      	cbnz	r0, 211f6 <net_buf_frag_last+0x1e>
   211de:	4908      	ldr	r1, [pc, #32]	; (21200 <net_buf_frag_last+0x28>)
   211e0:	4808      	ldr	r0, [pc, #32]	; (21204 <net_buf_frag_last+0x2c>)
   211e2:	4a09      	ldr	r2, [pc, #36]	; (21208 <net_buf_frag_last+0x30>)
   211e4:	f44f 731f 	mov.w	r3, #636	; 0x27c
   211e8:	f00b f9d7 	bl	2c59a <printk>
   211ec:	4806      	ldr	r0, [pc, #24]	; (21208 <net_buf_frag_last+0x30>)
   211ee:	f44f 711f 	mov.w	r1, #636	; 0x27c
   211f2:	f00b fc13 	bl	2ca1c <assert_post_action>

	while (buf->frags) {
   211f6:	4620      	mov	r0, r4
   211f8:	6824      	ldr	r4, [r4, #0]
   211fa:	2c00      	cmp	r4, #0
   211fc:	d1fb      	bne.n	211f6 <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   211fe:	bd10      	pop	{r4, pc}
   21200:	00034a77 	.word	0x00034a77
   21204:	00032486 	.word	0x00032486
   21208:	00036dba 	.word	0x00036dba

0002120c <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   2120c:	b538      	push	{r3, r4, r5, lr}
   2120e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   21210:	4604      	mov	r4, r0
   21212:	b958      	cbnz	r0, 2122c <net_buf_frag_insert+0x20>
   21214:	4910      	ldr	r1, [pc, #64]	; (21258 <net_buf_frag_insert+0x4c>)
   21216:	4811      	ldr	r0, [pc, #68]	; (2125c <net_buf_frag_insert+0x50>)
   21218:	4a11      	ldr	r2, [pc, #68]	; (21260 <net_buf_frag_insert+0x54>)
   2121a:	f240 2387 	movw	r3, #647	; 0x287
   2121e:	f00b f9bc 	bl	2c59a <printk>
   21222:	480f      	ldr	r0, [pc, #60]	; (21260 <net_buf_frag_insert+0x54>)
   21224:	f240 2187 	movw	r1, #647	; 0x287
   21228:	f00b fbf8 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(frag);
   2122c:	b95d      	cbnz	r5, 21246 <net_buf_frag_insert+0x3a>
   2122e:	490d      	ldr	r1, [pc, #52]	; (21264 <net_buf_frag_insert+0x58>)
   21230:	480a      	ldr	r0, [pc, #40]	; (2125c <net_buf_frag_insert+0x50>)
   21232:	4a0b      	ldr	r2, [pc, #44]	; (21260 <net_buf_frag_insert+0x54>)
   21234:	f44f 7322 	mov.w	r3, #648	; 0x288
   21238:	f00b f9af 	bl	2c59a <printk>
   2123c:	4808      	ldr	r0, [pc, #32]	; (21260 <net_buf_frag_insert+0x54>)
   2123e:	f44f 7122 	mov.w	r1, #648	; 0x288
   21242:	f00b fbeb 	bl	2ca1c <assert_post_action>

	if (parent->frags) {
   21246:	6823      	ldr	r3, [r4, #0]
   21248:	b123      	cbz	r3, 21254 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   2124a:	4628      	mov	r0, r5
   2124c:	f7ff ffc4 	bl	211d8 <net_buf_frag_last>
   21250:	6823      	ldr	r3, [r4, #0]
   21252:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   21254:	6025      	str	r5, [r4, #0]
}
   21256:	bd38      	pop	{r3, r4, r5, pc}
   21258:	00036e42 	.word	0x00036e42
   2125c:	00032486 	.word	0x00032486
   21260:	00036dba 	.word	0x00036dba
   21264:	00036e49 	.word	0x00036e49

00021268 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   21268:	b538      	push	{r3, r4, r5, lr}
   2126a:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   2126c:	460d      	mov	r5, r1
   2126e:	b959      	cbnz	r1, 21288 <net_buf_frag_add+0x20>
   21270:	490c      	ldr	r1, [pc, #48]	; (212a4 <net_buf_frag_add+0x3c>)
   21272:	480d      	ldr	r0, [pc, #52]	; (212a8 <net_buf_frag_add+0x40>)
   21274:	4a0d      	ldr	r2, [pc, #52]	; (212ac <net_buf_frag_add+0x44>)
   21276:	f240 2393 	movw	r3, #659	; 0x293
   2127a:	f00b f98e 	bl	2c59a <printk>
   2127e:	480b      	ldr	r0, [pc, #44]	; (212ac <net_buf_frag_add+0x44>)
   21280:	f240 2193 	movw	r1, #659	; 0x293
   21284:	f00b fbca 	bl	2ca1c <assert_post_action>

	if (!head) {
   21288:	b924      	cbnz	r4, 21294 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   2128a:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   2128c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   21290:	f7ff bf88 	b.w	211a4 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   21294:	4620      	mov	r0, r4
   21296:	f7ff ff9f 	bl	211d8 <net_buf_frag_last>
   2129a:	4629      	mov	r1, r5
   2129c:	f7ff ffb6 	bl	2120c <net_buf_frag_insert>
}
   212a0:	4620      	mov	r0, r4
   212a2:	bd38      	pop	{r3, r4, r5, pc}
   212a4:	00036e49 	.word	0x00036e49
   212a8:	00032486 	.word	0x00032486
   212ac:	00036dba 	.word	0x00036dba

000212b0 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   212b0:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   212b2:	6882      	ldr	r2, [r0, #8]
   212b4:	6803      	ldr	r3, [r0, #0]
   212b6:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   212b8:	4299      	cmp	r1, r3
{
   212ba:	4604      	mov	r4, r0
   212bc:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   212be:	d90b      	bls.n	212d8 <net_buf_simple_push+0x28>
   212c0:	4909      	ldr	r1, [pc, #36]	; (212e8 <net_buf_simple_push+0x38>)
   212c2:	480a      	ldr	r0, [pc, #40]	; (212ec <net_buf_simple_push+0x3c>)
   212c4:	4a0a      	ldr	r2, [pc, #40]	; (212f0 <net_buf_simple_push+0x40>)
   212c6:	f240 4317 	movw	r3, #1047	; 0x417
   212ca:	f00b f966 	bl	2c59a <printk>
   212ce:	4808      	ldr	r0, [pc, #32]	; (212f0 <net_buf_simple_push+0x40>)
   212d0:	f240 4117 	movw	r1, #1047	; 0x417
   212d4:	f00b fba2 	bl	2ca1c <assert_post_action>
	buf->data -= len;
   212d8:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   212da:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   212dc:	1b40      	subs	r0, r0, r5
	buf->len += len;
   212de:	440d      	add	r5, r1
	buf->data -= len;
   212e0:	6020      	str	r0, [r4, #0]
	buf->len += len;
   212e2:	80a5      	strh	r5, [r4, #4]
}
   212e4:	bd38      	pop	{r3, r4, r5, pc}
   212e6:	bf00      	nop
   212e8:	00036e5e 	.word	0x00036e5e
   212ec:	00032486 	.word	0x00032486
   212f0:	00036dba 	.word	0x00036dba

000212f4 <net_buf_simple_pull>:
{
   212f4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   212f6:	8883      	ldrh	r3, [r0, #4]
   212f8:	428b      	cmp	r3, r1
{
   212fa:	4604      	mov	r4, r0
   212fc:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   212fe:	d20b      	bcs.n	21318 <net_buf_simple_pull+0x24>
   21300:	4909      	ldr	r1, [pc, #36]	; (21328 <net_buf_simple_pull+0x34>)
   21302:	480a      	ldr	r0, [pc, #40]	; (2132c <net_buf_simple_pull+0x38>)
   21304:	4a0a      	ldr	r2, [pc, #40]	; (21330 <net_buf_simple_pull+0x3c>)
   21306:	f240 4377 	movw	r3, #1143	; 0x477
   2130a:	f00b f946 	bl	2c59a <printk>
   2130e:	4808      	ldr	r0, [pc, #32]	; (21330 <net_buf_simple_pull+0x3c>)
   21310:	f240 4177 	movw	r1, #1143	; 0x477
   21314:	f00b fb82 	bl	2ca1c <assert_post_action>
	buf->len -= len;
   21318:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   2131a:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   2131c:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   2131e:	4428      	add	r0, r5
	buf->len -= len;
   21320:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   21322:	6020      	str	r0, [r4, #0]
}
   21324:	bd38      	pop	{r3, r4, r5, pc}
   21326:	bf00      	nop
   21328:	00036e4e 	.word	0x00036e4e
   2132c:	00032486 	.word	0x00032486
   21330:	00036dba 	.word	0x00036dba

00021334 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   21334:	8883      	ldrh	r3, [r0, #4]
   21336:	428b      	cmp	r3, r1
{
   21338:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   2133a:	6806      	ldr	r6, [r0, #0]
{
   2133c:	4604      	mov	r4, r0
   2133e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   21340:	d20b      	bcs.n	2135a <net_buf_simple_pull_mem+0x26>
   21342:	490a      	ldr	r1, [pc, #40]	; (2136c <net_buf_simple_pull_mem+0x38>)
   21344:	480a      	ldr	r0, [pc, #40]	; (21370 <net_buf_simple_pull_mem+0x3c>)
   21346:	4a0b      	ldr	r2, [pc, #44]	; (21374 <net_buf_simple_pull_mem+0x40>)
   21348:	f240 4383 	movw	r3, #1155	; 0x483
   2134c:	f00b f925 	bl	2c59a <printk>
   21350:	4808      	ldr	r0, [pc, #32]	; (21374 <net_buf_simple_pull_mem+0x40>)
   21352:	f240 4183 	movw	r1, #1155	; 0x483
   21356:	f00b fb61 	bl	2ca1c <assert_post_action>
	buf->len -= len;
   2135a:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   2135c:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   2135e:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   21360:	4429      	add	r1, r5
	buf->len -= len;
   21362:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   21364:	6021      	str	r1, [r4, #0]
}
   21366:	4630      	mov	r0, r6
   21368:	bd70      	pop	{r4, r5, r6, pc}
   2136a:	bf00      	nop
   2136c:	00036e4e 	.word	0x00036e4e
   21370:	00032486 	.word	0x00032486
   21374:	00036dba 	.word	0x00036dba

00021378 <net_buf_simple_add>:
{
   21378:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   2137a:	6803      	ldr	r3, [r0, #0]
   2137c:	8886      	ldrh	r6, [r0, #4]
   2137e:	4604      	mov	r4, r0
   21380:	460d      	mov	r5, r1
   21382:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   21384:	f00e fb71 	bl	2fa6a <net_buf_simple_tailroom>
   21388:	4288      	cmp	r0, r1
   2138a:	d20b      	bcs.n	213a4 <net_buf_simple_add+0x2c>
   2138c:	4908      	ldr	r1, [pc, #32]	; (213b0 <net_buf_simple_add+0x38>)
   2138e:	4809      	ldr	r0, [pc, #36]	; (213b4 <net_buf_simple_add+0x3c>)
   21390:	4a09      	ldr	r2, [pc, #36]	; (213b8 <net_buf_simple_add+0x40>)
   21392:	f44f 734a 	mov.w	r3, #808	; 0x328
   21396:	f00b f900 	bl	2c59a <printk>
   2139a:	4807      	ldr	r0, [pc, #28]	; (213b8 <net_buf_simple_add+0x40>)
   2139c:	f44f 714a 	mov.w	r1, #808	; 0x328
   213a0:	f00b fb3c 	bl	2ca1c <assert_post_action>
	buf->len += len;
   213a4:	88a1      	ldrh	r1, [r4, #4]
   213a6:	440d      	add	r5, r1
   213a8:	80a5      	strh	r5, [r4, #4]
}
   213aa:	4630      	mov	r0, r6
   213ac:	bd70      	pop	{r4, r5, r6, pc}
   213ae:	bf00      	nop
   213b0:	00036e82 	.word	0x00036e82
   213b4:	00032486 	.word	0x00032486
   213b8:	00036dba 	.word	0x00036dba

000213bc <net_buf_append_bytes>:
{
   213bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   213c0:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
   213c4:	4606      	mov	r6, r0
   213c6:	460c      	mov	r4, r1
   213c8:	9200      	str	r2, [sp, #0]
	struct net_buf *frag = net_buf_frag_last(buf);
   213ca:	f7ff ff05 	bl	211d8 <net_buf_frag_last>
	size_t added_len = 0;
   213ce:	2700      	movs	r7, #0
	struct net_buf *frag = net_buf_frag_last(buf);
   213d0:	4683      	mov	fp, r0
	return &_net_buf_pool_list[id];
   213d2:	f04f 0a34 	mov.w	sl, #52	; 0x34
	return net_buf_simple_tailroom(&buf->b);
   213d6:	f10b 0b08 	add.w	fp, fp, #8
   213da:	4658      	mov	r0, fp
   213dc:	f00e fb45 	bl	2fa6a <net_buf_simple_tailroom>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   213e0:	4284      	cmp	r4, r0
   213e2:	bf2c      	ite	cs
   213e4:	b282      	uxthcs	r2, r0
   213e6:	b2a2      	uxthcc	r2, r4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   213e8:	9900      	ldr	r1, [sp, #0]
   213ea:	9201      	str	r2, [sp, #4]
   213ec:	4658      	mov	r0, fp
   213ee:	f00e fb44 	bl	2fa7a <net_buf_simple_add_mem>
		added_len += count;
   213f2:	9a01      	ldr	r2, [sp, #4]
		value8 += count;
   213f4:	9b00      	ldr	r3, [sp, #0]
		if (len == 0) {
   213f6:	1aa4      	subs	r4, r4, r2
		value8 += count;
   213f8:	4413      	add	r3, r2
		added_len += count;
   213fa:	4417      	add	r7, r2
		value8 += count;
   213fc:	9300      	str	r3, [sp, #0]
		if (len == 0) {
   213fe:	d016      	beq.n	2142e <net_buf_append_bytes+0x72>
		if (allocate_cb) {
   21400:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   21402:	b153      	cbz	r3, 2141a <net_buf_append_bytes+0x5e>
			frag = allocate_cb(timeout, user_data);
   21404:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   21406:	4640      	mov	r0, r8
   21408:	4649      	mov	r1, r9
   2140a:	4798      	blx	r3
			frag = net_buf_alloc_len(pool, len, timeout);
   2140c:	4683      	mov	fp, r0
		if (!frag) {
   2140e:	b170      	cbz	r0, 2142e <net_buf_append_bytes+0x72>
		net_buf_frag_add(buf, frag);
   21410:	4601      	mov	r1, r0
   21412:	4630      	mov	r0, r6
   21414:	f7ff ff28 	bl	21268 <net_buf_frag_add>
	do {
   21418:	e7dd      	b.n	213d6 <net_buf_append_bytes+0x1a>
	return &_net_buf_pool_list[id];
   2141a:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   2141c:	4d06      	ldr	r5, [pc, #24]	; (21438 <net_buf_append_bytes+0x7c>)
   2141e:	4642      	mov	r2, r8
   21420:	464b      	mov	r3, r9
   21422:	4621      	mov	r1, r4
   21424:	fb00 500a 	mla	r0, r0, sl, r5
   21428:	f7ff fcce 	bl	20dc8 <net_buf_alloc_len>
   2142c:	e7ee      	b.n	2140c <net_buf_append_bytes+0x50>
}
   2142e:	4638      	mov	r0, r7
   21430:	b003      	add	sp, #12
   21432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21436:	bf00      	nop
   21438:	20000994 	.word	0x20000994

0002143c <timing_init>:

static bool has_inited;
static atomic_val_t started_ref;

void timing_init(void)
{
   2143c:	b510      	push	{r4, lr}
	if (has_inited) {
   2143e:	4c04      	ldr	r4, [pc, #16]	; (21450 <timing_init+0x14>)
   21440:	7823      	ldrb	r3, [r4, #0]
   21442:	b91b      	cbnz	r3, 2144c <timing_init+0x10>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_init();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_init();
#else
	arch_timing_init();
   21444:	f7f6 fb24 	bl	17a90 <arch_timing_init>
#endif

	has_inited = true;
   21448:	2301      	movs	r3, #1
   2144a:	7023      	strb	r3, [r4, #0]
}
   2144c:	bd10      	pop	{r4, pc}
   2144e:	bf00      	nop
   21450:	20003c4f 	.word	0x20003c4f

00021454 <timing_start>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   21454:	4b07      	ldr	r3, [pc, #28]	; (21474 <timing_start+0x20>)
   21456:	f3bf 8f5b 	dmb	ish
   2145a:	e853 2f00 	ldrex	r2, [r3]
   2145e:	1c51      	adds	r1, r2, #1
   21460:	e843 1000 	strex	r0, r1, [r3]
   21464:	2800      	cmp	r0, #0
   21466:	d1f8      	bne.n	2145a <timing_start+0x6>
   21468:	f3bf 8f5b 	dmb	ish

void timing_start(void)
{
	if (atomic_inc(&started_ref) != 0) {
   2146c:	b90a      	cbnz	r2, 21472 <timing_start+0x1e>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_start();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_start();
#else
	arch_timing_start();
   2146e:	f7f6 bb3b 	b.w	17ae8 <arch_timing_start>
#endif
}
   21472:	4770      	bx	lr
   21474:	20002df0 	.word	0x20002df0

00021478 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   21478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   2147c:	4c0e      	ldr	r4, [pc, #56]	; (214b8 <onoff_start+0x40>)
   2147e:	1b05      	subs	r5, r0, r4
   21480:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   21484:	250c      	movs	r5, #12
   21486:	435d      	muls	r5, r3
{
   21488:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   2148a:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   2148e:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   21490:	4420      	add	r0, r4
   21492:	2140      	movs	r1, #64	; 0x40
   21494:	f00e fb06 	bl	2faa4 <set_starting_state>
	if (err < 0) {
   21498:	1e01      	subs	r1, r0, #0
   2149a:	db08      	blt.n	214ae <onoff_start+0x36>
	subdata->cb = cb;
   2149c:	4b07      	ldr	r3, [pc, #28]	; (214bc <onoff_start+0x44>)
   2149e:	442c      	add	r4, r5
	subdata->user_data = user_data;
   214a0:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   214a4:	4b06      	ldr	r3, [pc, #24]	; (214c0 <onoff_start+0x48>)
   214a6:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   214a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   214ac:	4718      	bx	r3
		notify(mgr, err);
   214ae:	4638      	mov	r0, r7
   214b0:	4633      	mov	r3, r6
}
   214b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   214b6:	4718      	bx	r3
   214b8:	20002e04 	.word	0x20002e04
   214bc:	0002fb07 	.word	0x0002fb07
   214c0:	00031d80 	.word	0x00031d80

000214c4 <get_status>:
{
   214c4:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   214c6:	b2cc      	uxtb	r4, r1
   214c8:	2c01      	cmp	r4, #1
{
   214ca:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   214cc:	d909      	bls.n	214e2 <get_status+0x1e>
   214ce:	4909      	ldr	r1, [pc, #36]	; (214f4 <get_status+0x30>)
   214d0:	4809      	ldr	r0, [pc, #36]	; (214f8 <get_status+0x34>)
   214d2:	4a0a      	ldr	r2, [pc, #40]	; (214fc <get_status+0x38>)
   214d4:	2379      	movs	r3, #121	; 0x79
   214d6:	f00b f860 	bl	2c59a <printk>
   214da:	4808      	ldr	r0, [pc, #32]	; (214fc <get_status+0x38>)
   214dc:	2179      	movs	r1, #121	; 0x79
   214de:	f00b fa9d 	bl	2ca1c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   214e2:	692b      	ldr	r3, [r5, #16]
   214e4:	210c      	movs	r1, #12
   214e6:	fb04 3401 	mla	r4, r4, r1, r3
   214ea:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   214ec:	f000 0007 	and.w	r0, r0, #7
   214f0:	bd38      	pop	{r3, r4, r5, pc}
   214f2:	bf00      	nop
   214f4:	00036eeb 	.word	0x00036eeb
   214f8:	00032486 	.word	0x00032486
   214fc:	00036eae 	.word	0x00036eae

00021500 <stop>:
{
   21500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21502:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   21504:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   21506:	6907      	ldr	r7, [r0, #16]
{
   21508:	4605      	mov	r5, r0
   2150a:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   2150c:	d90b      	bls.n	21526 <stop+0x26>
   2150e:	4919      	ldr	r1, [pc, #100]	; (21574 <stop+0x74>)
   21510:	4819      	ldr	r0, [pc, #100]	; (21578 <stop+0x78>)
   21512:	4a1a      	ldr	r2, [pc, #104]	; (2157c <stop+0x7c>)
   21514:	f240 134d 	movw	r3, #333	; 0x14d
   21518:	f00b f83f 	bl	2c59a <printk>
   2151c:	4817      	ldr	r0, [pc, #92]	; (2157c <stop+0x7c>)
   2151e:	f240 114d 	movw	r1, #333	; 0x14d
   21522:	f00b fa7b 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   21526:	f04f 0340 	mov.w	r3, #64	; 0x40
   2152a:	f3ef 8211 	mrs	r2, BASEPRI
   2152e:	f383 8812 	msr	BASEPRI_MAX, r3
   21532:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   21536:	230c      	movs	r3, #12
   21538:	fb03 7104 	mla	r1, r3, r4, r7
   2153c:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   2153e:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   21542:	d001      	beq.n	21548 <stop+0x48>
   21544:	428e      	cmp	r6, r1
   21546:	d111      	bne.n	2156c <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   21548:	fb03 7304 	mla	r3, r3, r4, r7
   2154c:	2101      	movs	r1, #1
   2154e:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   21550:	2000      	movs	r0, #0
	__asm__ volatile(
   21552:	f382 8811 	msr	BASEPRI, r2
   21556:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2155a:	b930      	cbnz	r0, 2156a <stop+0x6a>
	get_sub_config(dev, type)->stop();
   2155c:	6869      	ldr	r1, [r5, #4]
   2155e:	230c      	movs	r3, #12
   21560:	fb03 1404 	mla	r4, r3, r4, r1
   21564:	6863      	ldr	r3, [r4, #4]
   21566:	4798      	blx	r3
	return 0;
   21568:	2000      	movs	r0, #0
}
   2156a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   2156c:	f04f 30ff 	mov.w	r0, #4294967295
   21570:	e7ef      	b.n	21552 <stop+0x52>
   21572:	bf00      	nop
   21574:	00036eeb 	.word	0x00036eeb
   21578:	00032486 	.word	0x00032486
   2157c:	00036eae 	.word	0x00036eae

00021580 <onoff_stop>:
{
   21580:	b570      	push	{r4, r5, r6, lr}
   21582:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   21584:	4906      	ldr	r1, [pc, #24]	; (215a0 <onoff_stop+0x20>)
   21586:	1a41      	subs	r1, r0, r1
{
   21588:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2158a:	1149      	asrs	r1, r1, #5
   2158c:	4805      	ldr	r0, [pc, #20]	; (215a4 <onoff_stop+0x24>)
   2158e:	2240      	movs	r2, #64	; 0x40
   21590:	f7ff ffb6 	bl	21500 <stop>
	notify(mgr, res);
   21594:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   21596:	4601      	mov	r1, r0
	notify(mgr, res);
   21598:	4620      	mov	r0, r4
}
   2159a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   2159e:	4718      	bx	r3
   215a0:	20002e04 	.word	0x20002e04
   215a4:	00030990 	.word	0x00030990

000215a8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   215a8:	2200      	movs	r2, #0
{
   215aa:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   215ac:	2101      	movs	r1, #1
{
   215ae:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   215b0:	4610      	mov	r0, r2
   215b2:	f7f5 fd1b 	bl	16fec <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   215b6:	2000      	movs	r0, #0
   215b8:	f7f5 fce6 	bl	16f88 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   215bc:	480f      	ldr	r0, [pc, #60]	; (215fc <clk_init+0x54>)
   215be:	f002 fab5 	bl	23b2c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   215c2:	4b0f      	ldr	r3, [pc, #60]	; (21600 <clk_init+0x58>)
   215c4:	4298      	cmp	r0, r3
   215c6:	d115      	bne.n	215f4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   215c8:	f00e fd85 	bl	300d6 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   215cc:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   215ce:	490d      	ldr	r1, [pc, #52]	; (21604 <clk_init+0x5c>)
   215d0:	4630      	mov	r0, r6
   215d2:	f00b f83d 	bl	2c650 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   215d6:	2800      	cmp	r0, #0
   215d8:	db0b      	blt.n	215f2 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   215da:	2501      	movs	r5, #1
   215dc:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   215de:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   215e0:	4908      	ldr	r1, [pc, #32]	; (21604 <clk_init+0x5c>)
   215e2:	f104 0020 	add.w	r0, r4, #32
   215e6:	f00b f833 	bl	2c650 <onoff_manager_init>
		if (err < 0) {
   215ea:	2800      	cmp	r0, #0
   215ec:	db01      	blt.n	215f2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   215ee:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   215f0:	2000      	movs	r0, #0
}
   215f2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   215f4:	f06f 0004 	mvn.w	r0, #4
   215f8:	e7fb      	b.n	215f2 <clk_init+0x4a>
   215fa:	bf00      	nop
   215fc:	0002163d 	.word	0x0002163d
   21600:	0bad0000 	.word	0x0bad0000
   21604:	00031dc8 	.word	0x00031dc8

00021608 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   21608:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   2160a:	230c      	movs	r3, #12
   2160c:	4809      	ldr	r0, [pc, #36]	; (21634 <clkstarted_handle.constprop.0+0x2c>)
   2160e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   21610:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   21612:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   21614:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   21618:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   2161a:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   2161c:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   2161e:	4418      	add	r0, r3
   21620:	f00e fa5e 	bl	2fae0 <set_on_state>
	if (callback) {
   21624:	b12d      	cbz	r5, 21632 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   21626:	4632      	mov	r2, r6
   21628:	462b      	mov	r3, r5
   2162a:	4803      	ldr	r0, [pc, #12]	; (21638 <clkstarted_handle.constprop.0+0x30>)
}
   2162c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   21630:	4718      	bx	r3
}
   21632:	bd70      	pop	{r4, r5, r6, pc}
   21634:	20002e04 	.word	0x20002e04
   21638:	00030990 	.word	0x00030990

0002163c <clock_event_handler>:
	switch (event) {
   2163c:	2801      	cmp	r0, #1
{
   2163e:	b508      	push	{r3, lr}
	switch (event) {
   21640:	d006      	beq.n	21650 <clock_event_handler+0x14>
   21642:	2803      	cmp	r0, #3
   21644:	d008      	beq.n	21658 <clock_event_handler+0x1c>
   21646:	b9a8      	cbnz	r0, 21674 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   21648:	4b10      	ldr	r3, [pc, #64]	; (2168c <clock_event_handler+0x50>)
   2164a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   2164c:	075b      	lsls	r3, r3, #29
   2164e:	d11b      	bne.n	21688 <clock_event_handler+0x4c>
}
   21650:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   21654:	f7ff bfd8 	b.w	21608 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   21658:	490d      	ldr	r1, [pc, #52]	; (21690 <clock_event_handler+0x54>)
   2165a:	4a0e      	ldr	r2, [pc, #56]	; (21694 <clock_event_handler+0x58>)
   2165c:	480e      	ldr	r0, [pc, #56]	; (21698 <clock_event_handler+0x5c>)
   2165e:	f240 235e 	movw	r3, #606	; 0x25e
   21662:	f00a ff9a 	bl	2c59a <printk>
   21666:	f240 215e 	movw	r1, #606	; 0x25e
}
   2166a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   2166e:	4809      	ldr	r0, [pc, #36]	; (21694 <clock_event_handler+0x58>)
   21670:	f00b b9d4 	b.w	2ca1c <assert_post_action>
   21674:	4906      	ldr	r1, [pc, #24]	; (21690 <clock_event_handler+0x54>)
   21676:	4a07      	ldr	r2, [pc, #28]	; (21694 <clock_event_handler+0x58>)
   21678:	4807      	ldr	r0, [pc, #28]	; (21698 <clock_event_handler+0x5c>)
   2167a:	f240 2362 	movw	r3, #610	; 0x262
   2167e:	f00a ff8c 	bl	2c59a <printk>
   21682:	f240 2162 	movw	r1, #610	; 0x262
   21686:	e7f0      	b.n	2166a <clock_event_handler+0x2e>
}
   21688:	bd08      	pop	{r3, pc}
   2168a:	bf00      	nop
   2168c:	20002e04 	.word	0x20002e04
   21690:	000380f0 	.word	0x000380f0
   21694:	00036eae 	.word	0x00036eae
   21698:	00032486 	.word	0x00032486

0002169c <hfclk_start>:
{
   2169c:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   2169e:	f00e fedd 	bl	3045c <z_impl_k_uptime_ticks>
   216a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   216a6:	460c      	mov	r4, r1
   216a8:	fba0 0103 	umull	r0, r1, r0, r3
   216ac:	fb03 1104 	mla	r1, r3, r4, r1
		hf_start_tstamp = k_uptime_get();
   216b0:	4a05      	ldr	r2, [pc, #20]	; (216c8 <hfclk_start+0x2c>)
   216b2:	0bc3      	lsrs	r3, r0, #15
   216b4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}
   216b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   216bc:	0bc9      	lsrs	r1, r1, #15
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   216be:	2001      	movs	r0, #1
		hf_start_tstamp = k_uptime_get();
   216c0:	e9c2 3100 	strd	r3, r1, [r2]
   216c4:	f002 b9e8 	b.w	23a98 <nrfx_clock_start>
   216c8:	20001e90 	.word	0x20001e90

000216cc <generic_hfclk_start>:
{
   216cc:	b508      	push	{r3, lr}
	__asm__ volatile(
   216ce:	f04f 0340 	mov.w	r3, #64	; 0x40
   216d2:	f3ef 8111 	mrs	r1, BASEPRI
   216d6:	f383 8812 	msr	BASEPRI_MAX, r3
   216da:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   216de:	4a11      	ldr	r2, [pc, #68]	; (21724 <generic_hfclk_start+0x58>)
   216e0:	6813      	ldr	r3, [r2, #0]
   216e2:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   216e6:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   216ea:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   216ec:	d00c      	beq.n	21708 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   216ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   216f2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   216f6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   216fa:	f013 0301 	ands.w	r3, r3, #1
   216fe:	d003      	beq.n	21708 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   21700:	4809      	ldr	r0, [pc, #36]	; (21728 <generic_hfclk_start+0x5c>)
   21702:	f00e f9ed 	bl	2fae0 <set_on_state>
			already_started = true;
   21706:	2301      	movs	r3, #1
	__asm__ volatile(
   21708:	f381 8811 	msr	BASEPRI, r1
   2170c:	f3bf 8f6f 	isb	sy
	if (already_started) {
   21710:	b123      	cbz	r3, 2171c <generic_hfclk_start+0x50>
}
   21712:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   21716:	2000      	movs	r0, #0
   21718:	f7ff bf76 	b.w	21608 <clkstarted_handle.constprop.0>
}
   2171c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   21720:	f7ff bfbc 	b.w	2169c <hfclk_start>
   21724:	20002e5c 	.word	0x20002e5c
   21728:	20002e4c 	.word	0x20002e4c

0002172c <hfclk_stop>:
{
   2172c:	b510      	push	{r4, lr}
   2172e:	f00e fe95 	bl	3045c <z_impl_k_uptime_ticks>
   21732:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   21736:	460c      	mov	r4, r1
   21738:	fba0 0103 	umull	r0, r1, r0, r3
   2173c:	fb03 1104 	mla	r1, r3, r4, r1
		hf_stop_tstamp = k_uptime_get();
   21740:	4a05      	ldr	r2, [pc, #20]	; (21758 <hfclk_stop+0x2c>)
   21742:	0bc3      	lsrs	r3, r0, #15
   21744:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}
   21748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2174c:	0bc9      	lsrs	r1, r1, #15
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   2174e:	2001      	movs	r0, #1
		hf_stop_tstamp = k_uptime_get();
   21750:	e9c2 3100 	strd	r3, r1, [r2]
   21754:	f002 b9ca 	b.w	23aec <nrfx_clock_stop>
   21758:	20001e98 	.word	0x20001e98

0002175c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2175c:	4b08      	ldr	r3, [pc, #32]	; (21780 <generic_hfclk_stop+0x24>)
   2175e:	f3bf 8f5b 	dmb	ish
   21762:	e853 2f00 	ldrex	r2, [r3]
   21766:	f022 0102 	bic.w	r1, r2, #2
   2176a:	e843 1000 	strex	r0, r1, [r3]
   2176e:	2800      	cmp	r0, #0
   21770:	d1f7      	bne.n	21762 <generic_hfclk_stop+0x6>
   21772:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   21776:	07d3      	lsls	r3, r2, #31
   21778:	d401      	bmi.n	2177e <generic_hfclk_stop+0x22>
	hfclk_stop();
   2177a:	f7ff bfd7 	b.w	2172c <hfclk_stop>
}
   2177e:	4770      	bx	lr
   21780:	20002e5c 	.word	0x20002e5c

00021784 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   21784:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21788:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   2178c:	4604      	mov	r4, r0
   2178e:	f8d7 6418 	ldr.w	r6, [r7, #1048]	; 0x418
   21792:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   21796:	f04f 0340 	mov.w	r3, #64	; 0x40
   2179a:	f3ef 8811 	mrs	r8, BASEPRI
   2179e:	f383 8812 	msr	BASEPRI_MAX, r3
   217a2:	f3bf 8f6f 	isb	sy
   217a6:	f00e fe59 	bl	3045c <z_impl_k_uptime_ticks>
   217aa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   217ae:	460a      	mov	r2, r1
   217b0:	fba0 0103 	umull	r0, r1, r0, r3
   217b4:	fb03 1102 	mla	r1, r3, r2, r1
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   217b8:	f8d7 940c 	ldr.w	r9, [r7, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   217bc:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   217c0:	4b25      	ldr	r3, [pc, #148]	; (21858 <cmd_status+0xd4>)
   217c2:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   217c6:	4b25      	ldr	r3, [pc, #148]	; (2185c <cmd_status+0xd8>)
   217c8:	0bc5      	lsrs	r5, r0, #15
   217ca:	f8d3 a000 	ldr.w	sl, [r3]
   217ce:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
	__asm__ volatile(
   217d2:	f388 8811 	msr	BASEPRI, r8
   217d6:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   217da:	4a21      	ldr	r2, [pc, #132]	; (21860 <cmd_status+0xdc>)
	shell_print(shell, "\t- %srunning (users: %u)",
   217dc:	f8df 8098 	ldr.w	r8, [pc, #152]	; 21878 <cmd_status+0xf4>
   217e0:	4f20      	ldr	r7, [pc, #128]	; (21864 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
   217e2:	4620      	mov	r0, r4
   217e4:	2108      	movs	r1, #8
   217e6:	f00b fec9 	bl	2d57c <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   217ea:	f019 0f01 	tst.w	r9, #1
   217ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 2187c <cmd_status+0xf8>
   217f2:	4a1d      	ldr	r2, [pc, #116]	; (21868 <cmd_status+0xe4>)
   217f4:	f8b9 301e 	ldrh.w	r3, [r9, #30]
   217f8:	9300      	str	r3, [sp, #0]
   217fa:	4620      	mov	r0, r4
   217fc:	bf14      	ite	ne
   217fe:	4643      	movne	r3, r8
   21800:	463b      	moveq	r3, r7
   21802:	2108      	movs	r1, #8
   21804:	f00b feba 	bl	2d57c <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   21808:	eba5 030b 	sub.w	r3, r5, fp
   2180c:	9300      	str	r3, [sp, #0]
   2180e:	4620      	mov	r0, r4
   21810:	465b      	mov	r3, fp
   21812:	4a16      	ldr	r2, [pc, #88]	; (2186c <cmd_status+0xe8>)
   21814:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   21816:	eba5 050a 	sub.w	r5, r5, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   2181a:	f00b feaf 	bl	2d57c <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   2181e:	4653      	mov	r3, sl
   21820:	4620      	mov	r0, r4
   21822:	4a13      	ldr	r2, [pc, #76]	; (21870 <cmd_status+0xec>)
   21824:	9500      	str	r5, [sp, #0]
   21826:	2108      	movs	r1, #8
   21828:	f00b fea8 	bl	2d57c <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   2182c:	4620      	mov	r0, r4
   2182e:	4a11      	ldr	r2, [pc, #68]	; (21874 <cmd_status+0xf0>)
   21830:	2108      	movs	r1, #8
   21832:	f00b fea3 	bl	2d57c <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   21836:	f8b9 303e 	ldrh.w	r3, [r9, #62]	; 0x3e
   2183a:	9300      	str	r3, [sp, #0]
   2183c:	4620      	mov	r0, r4
   2183e:	4a0a      	ldr	r2, [pc, #40]	; (21868 <cmd_status+0xe4>)
   21840:	2e00      	cmp	r6, #0
   21842:	bf14      	ite	ne
   21844:	4643      	movne	r3, r8
   21846:	463b      	moveq	r3, r7
   21848:	2108      	movs	r1, #8
   2184a:	f00b fe97 	bl	2d57c <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   2184e:	2000      	movs	r0, #0
   21850:	b003      	add	sp, #12
   21852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21856:	bf00      	nop
   21858:	20001e90 	.word	0x20001e90
   2185c:	20001e98 	.word	0x20001e98
   21860:	00036f14 	.word	0x00036f14
   21864:	00036f0f 	.word	0x00036f0f
   21868:	00036f1f 	.word	0x00036f1f
   2186c:	00036f39 	.word	0x00036f39
   21870:	00036f5b 	.word	0x00036f5b
   21874:	00036f7c 	.word	0x00036f7c
   21878:	00036e21 	.word	0x00036e21
   2187c:	20002e04 	.word	0x20002e04

00021880 <api_blocking_start>:
{
   21880:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21882:	2200      	movs	r2, #0
   21884:	2301      	movs	r3, #1
   21886:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2188a:	ab04      	add	r3, sp, #16
   2188c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   21890:	4a09      	ldr	r2, [pc, #36]	; (218b8 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21892:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   21896:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   21898:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2189c:	f00e f945 	bl	2fb2a <api_start>
	if (err < 0) {
   218a0:	2800      	cmp	r0, #0
   218a2:	db05      	blt.n	218b0 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   218a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   218a8:	2300      	movs	r3, #0
   218aa:	4668      	mov	r0, sp
   218ac:	f004 fae8 	bl	25e80 <z_impl_k_sem_take>
}
   218b0:	b007      	add	sp, #28
   218b2:	f85d fb04 	ldr.w	pc, [sp], #4
   218b6:	bf00      	nop
   218b8:	0002fb25 	.word	0x0002fb25

000218bc <z_nrf_clock_control_lf_on>:
{
   218bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   218c0:	4949      	ldr	r1, [pc, #292]	; (219e8 <z_nrf_clock_control_lf_on+0x12c>)
   218c2:	f3bf 8f5b 	dmb	ish
   218c6:	4605      	mov	r5, r0
   218c8:	2201      	movs	r2, #1
   218ca:	e851 3f00 	ldrex	r3, [r1]
   218ce:	e841 2000 	strex	r0, r2, [r1]
   218d2:	2800      	cmp	r0, #0
   218d4:	d1f9      	bne.n	218ca <z_nrf_clock_control_lf_on+0xe>
   218d6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   218da:	b9a3      	cbnz	r3, 21906 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   218dc:	4943      	ldr	r1, [pc, #268]	; (219ec <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   218de:	4844      	ldr	r0, [pc, #272]	; (219f0 <z_nrf_clock_control_lf_on+0x134>)
   218e0:	604b      	str	r3, [r1, #4]
   218e2:	60cb      	str	r3, [r1, #12]
   218e4:	608a      	str	r2, [r1, #8]
   218e6:	f7ef fed7 	bl	11698 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   218ea:	2800      	cmp	r0, #0
   218ec:	da0b      	bge.n	21906 <z_nrf_clock_control_lf_on+0x4a>
   218ee:	4941      	ldr	r1, [pc, #260]	; (219f4 <z_nrf_clock_control_lf_on+0x138>)
   218f0:	4841      	ldr	r0, [pc, #260]	; (219f8 <z_nrf_clock_control_lf_on+0x13c>)
   218f2:	4a42      	ldr	r2, [pc, #264]	; (219fc <z_nrf_clock_control_lf_on+0x140>)
   218f4:	f44f 7308 	mov.w	r3, #544	; 0x220
   218f8:	f00a fe4f 	bl	2c59a <printk>
   218fc:	483f      	ldr	r0, [pc, #252]	; (219fc <z_nrf_clock_control_lf_on+0x140>)
   218fe:	f44f 7108 	mov.w	r1, #544	; 0x220
   21902:	f00b f88b 	bl	2ca1c <assert_post_action>
	switch (start_mode) {
   21906:	b3ad      	cbz	r5, 21974 <z_nrf_clock_control_lf_on+0xb8>
   21908:	1e6b      	subs	r3, r5, #1
   2190a:	2b01      	cmp	r3, #1
   2190c:	d856      	bhi.n	219bc <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   2190e:	2d01      	cmp	r5, #1
   21910:	d107      	bne.n	21922 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   21912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   21916:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   2191a:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   2191e:	2b01      	cmp	r3, #1
   21920:	d028      	beq.n	21974 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21922:	f00e fc9f 	bl	30264 <k_is_in_isr>
   21926:	4604      	mov	r4, r0
   21928:	b918      	cbnz	r0, 21932 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
   2192a:	4b35      	ldr	r3, [pc, #212]	; (21a00 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   2192c:	781b      	ldrb	r3, [r3, #0]
   2192e:	2b00      	cmp	r3, #0
   21930:	d152      	bne.n	219d8 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   21932:	f04f 0340 	mov.w	r3, #64	; 0x40
   21936:	f3ef 8611 	mrs	r6, BASEPRI
   2193a:	f383 8812 	msr	BASEPRI_MAX, r3
   2193e:	f3bf 8f6f 	isb	sy
   21942:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   21944:	4f2f      	ldr	r7, [pc, #188]	; (21a04 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21946:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 21a0c <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2194a:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 21a10 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2194e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   21952:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   21956:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   2195a:	03d2      	lsls	r2, r2, #15
   2195c:	d50c      	bpl.n	21978 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2195e:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   21962:	2b01      	cmp	r3, #1
   21964:	d001      	beq.n	2196a <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   21966:	2d01      	cmp	r5, #1
   21968:	d106      	bne.n	21978 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   2196a:	b30c      	cbz	r4, 219b0 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   2196c:	f386 8811 	msr	BASEPRI, r6
   21970:	f3bf 8f6f 	isb	sy
}
   21974:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   21978:	b1ac      	cbz	r4, 219a6 <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2197a:	4630      	mov	r0, r6
   2197c:	f7f5 fab6 	bl	16eec <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   21980:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   21984:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   21988:	2b00      	cmp	r3, #0
   2198a:	d1e0      	bne.n	2194e <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   2198c:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   2198e:	2900      	cmp	r1, #0
   21990:	d0dd      	beq.n	2194e <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21992:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   21994:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   21996:	2301      	movs	r3, #1
   21998:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   2199c:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   219a0:	f8c9 3000 	str.w	r3, [r9]
}
   219a4:	e7d3      	b.n	2194e <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   219a6:	2100      	movs	r1, #0
   219a8:	2021      	movs	r0, #33	; 0x21
   219aa:	f006 f8dd 	bl	27b68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   219ae:	e7e7      	b.n	21980 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   219b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   219b4:	2202      	movs	r2, #2
   219b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   219ba:	e7db      	b.n	21974 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   219bc:	4912      	ldr	r1, [pc, #72]	; (21a08 <z_nrf_clock_control_lf_on+0x14c>)
   219be:	480e      	ldr	r0, [pc, #56]	; (219f8 <z_nrf_clock_control_lf_on+0x13c>)
   219c0:	4a0e      	ldr	r2, [pc, #56]	; (219fc <z_nrf_clock_control_lf_on+0x140>)
   219c2:	f240 2332 	movw	r3, #562	; 0x232
   219c6:	f00a fde8 	bl	2c59a <printk>
}
   219ca:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   219ce:	480b      	ldr	r0, [pc, #44]	; (219fc <z_nrf_clock_control_lf_on+0x140>)
   219d0:	f240 2132 	movw	r1, #562	; 0x232
   219d4:	f00b b822 	b.w	2ca1c <assert_post_action>
    p_reg->INTENCLR = mask;
   219d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   219dc:	2202      	movs	r2, #2
   219de:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   219e2:	4606      	mov	r6, r0
}
   219e4:	e7ae      	b.n	21944 <z_nrf_clock_control_lf_on+0x88>
   219e6:	bf00      	nop
   219e8:	20002e60 	.word	0x20002e60
   219ec:	20002df4 	.word	0x20002df4
   219f0:	20002e24 	.word	0x20002e24
   219f4:	00036f87 	.word	0x00036f87
   219f8:	00032486 	.word	0x00032486
   219fc:	00036eae 	.word	0x00036eae
   21a00:	20004183 	.word	0x20004183
   21a04:	40000104 	.word	0x40000104
   21a08:	000380f0 	.word	0x000380f0
   21a0c:	e000e100 	.word	0xe000e100
   21a10:	40000008 	.word	0x40000008

00021a14 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   21a14:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21a16:	6905      	ldr	r5, [r0, #16]
{
   21a18:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   21a1a:	460c      	mov	r4, r1
   21a1c:	b961      	cbnz	r1, 21a38 <gpio_nrfx_manage_callback+0x24>
   21a1e:	4922      	ldr	r1, [pc, #136]	; (21aa8 <gpio_nrfx_manage_callback+0x94>)
   21a20:	4a22      	ldr	r2, [pc, #136]	; (21aac <gpio_nrfx_manage_callback+0x98>)
   21a22:	4823      	ldr	r0, [pc, #140]	; (21ab0 <gpio_nrfx_manage_callback+0x9c>)
   21a24:	2324      	movs	r3, #36	; 0x24
   21a26:	f00a fdb8 	bl	2c59a <printk>
   21a2a:	4822      	ldr	r0, [pc, #136]	; (21ab4 <gpio_nrfx_manage_callback+0xa0>)
   21a2c:	f00a fdb5 	bl	2c59a <printk>
   21a30:	481e      	ldr	r0, [pc, #120]	; (21aac <gpio_nrfx_manage_callback+0x98>)
   21a32:	2124      	movs	r1, #36	; 0x24
   21a34:	f00a fff2 	bl	2ca1c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   21a38:	6863      	ldr	r3, [r4, #4]
   21a3a:	b963      	cbnz	r3, 21a56 <gpio_nrfx_manage_callback+0x42>
   21a3c:	491e      	ldr	r1, [pc, #120]	; (21ab8 <gpio_nrfx_manage_callback+0xa4>)
   21a3e:	4a1b      	ldr	r2, [pc, #108]	; (21aac <gpio_nrfx_manage_callback+0x98>)
   21a40:	481b      	ldr	r0, [pc, #108]	; (21ab0 <gpio_nrfx_manage_callback+0x9c>)
   21a42:	2325      	movs	r3, #37	; 0x25
   21a44:	f00a fda9 	bl	2c59a <printk>
   21a48:	481c      	ldr	r0, [pc, #112]	; (21abc <gpio_nrfx_manage_callback+0xa8>)
   21a4a:	f00a fda6 	bl	2c59a <printk>
   21a4e:	4817      	ldr	r0, [pc, #92]	; (21aac <gpio_nrfx_manage_callback+0x98>)
   21a50:	2125      	movs	r1, #37	; 0x25
   21a52:	f00a ffe3 	bl	2ca1c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   21a56:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   21a58:	b15b      	cbz	r3, 21a72 <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21a5a:	2200      	movs	r2, #0
   21a5c:	429c      	cmp	r4, r3
   21a5e:	d113      	bne.n	21a88 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   21a60:	6823      	ldr	r3, [r4, #0]
   21a62:	b95a      	cbnz	r2, 21a7c <gpio_nrfx_manage_callback+0x68>
   21a64:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   21a66:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   21a68:	4294      	cmp	r4, r2
   21a6a:	d100      	bne.n	21a6e <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   21a6c:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   21a6e:	2300      	movs	r3, #0
   21a70:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   21a72:	b976      	cbnz	r6, 21a92 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   21a74:	2000      	movs	r0, #0
				     callback, set);
}
   21a76:	bd70      	pop	{r4, r5, r6, pc}
   21a78:	460b      	mov	r3, r1
   21a7a:	e7ef      	b.n	21a5c <gpio_nrfx_manage_callback+0x48>
   21a7c:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   21a7e:	68ab      	ldr	r3, [r5, #8]
   21a80:	429c      	cmp	r4, r3
	list->tail = node;
   21a82:	bf08      	it	eq
   21a84:	60aa      	streq	r2, [r5, #8]
}
   21a86:	e7f2      	b.n	21a6e <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21a88:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   21a8a:	461a      	mov	r2, r3
   21a8c:	2900      	cmp	r1, #0
   21a8e:	d1f3      	bne.n	21a78 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   21a90:	b13e      	cbz	r6, 21aa2 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   21a92:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   21a94:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   21a96:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   21a98:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   21a9a:	2800      	cmp	r0, #0
   21a9c:	d1ea      	bne.n	21a74 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   21a9e:	60ac      	str	r4, [r5, #8]
}
   21aa0:	e7e9      	b.n	21a76 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   21aa2:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   21aa6:	e7e6      	b.n	21a76 <gpio_nrfx_manage_callback+0x62>
   21aa8:	00037000 	.word	0x00037000
   21aac:	00036fd3 	.word	0x00036fd3
   21ab0:	00032486 	.word	0x00032486
   21ab4:	00037009 	.word	0x00037009
   21ab8:	00037018 	.word	0x00037018
   21abc:	0003702a 	.word	0x0003702a

00021ac0 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21ac0:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   21ac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21ac6:	d003      	beq.n	21ad0 <nrfx_gpio_handler+0x10>
   21ac8:	2b01      	cmp	r3, #1
   21aca:	d036      	beq.n	21b3a <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
   21acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21ad0:	4f1b      	ldr	r7, [pc, #108]	; (21b40 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21ad2:	693b      	ldr	r3, [r7, #16]
   21ad4:	685c      	ldr	r4, [r3, #4]
   21ad6:	2c00      	cmp	r4, #0
   21ad8:	d0f8      	beq.n	21acc <nrfx_gpio_handler+0xc>
   21ada:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   21adc:	f8df 806c 	ldr.w	r8, [pc, #108]	; 21b4c <nrfx_gpio_handler+0x8c>
   21ae0:	f8df 906c 	ldr.w	r9, [pc, #108]	; 21b50 <nrfx_gpio_handler+0x90>
   21ae4:	f8df a06c 	ldr.w	sl, [pc, #108]	; 21b54 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   21ae8:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
   21aec:	2601      	movs	r6, #1
   21aee:	2d00      	cmp	r5, #0
   21af0:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
   21af4:	bf38      	it	cc
   21af6:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   21af8:	68a3      	ldr	r3, [r4, #8]
   21afa:	421e      	tst	r6, r3
   21afc:	d014      	beq.n	21b28 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
   21afe:	6863      	ldr	r3, [r4, #4]
   21b00:	b963      	cbnz	r3, 21b1c <nrfx_gpio_handler+0x5c>
   21b02:	4649      	mov	r1, r9
   21b04:	2345      	movs	r3, #69	; 0x45
   21b06:	4642      	mov	r2, r8
   21b08:	4650      	mov	r0, sl
   21b0a:	f00a fd46 	bl	2c59a <printk>
   21b0e:	480d      	ldr	r0, [pc, #52]	; (21b44 <nrfx_gpio_handler+0x84>)
   21b10:	f00a fd43 	bl	2c59a <printk>
   21b14:	2145      	movs	r1, #69	; 0x45
   21b16:	4640      	mov	r0, r8
   21b18:	f00a ff80 	bl	2ca1c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   21b1c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   21b20:	4621      	mov	r1, r4
   21b22:	4032      	ands	r2, r6
   21b24:	4638      	mov	r0, r7
   21b26:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   21b28:	2d00      	cmp	r5, #0
   21b2a:	d0cf      	beq.n	21acc <nrfx_gpio_handler+0xc>
   21b2c:	682b      	ldr	r3, [r5, #0]
   21b2e:	2b00      	cmp	r3, #0
   21b30:	bf38      	it	cc
   21b32:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   21b34:	462c      	mov	r4, r5
   21b36:	461d      	mov	r5, r3
   21b38:	e7de      	b.n	21af8 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   21b3a:	4f03      	ldr	r7, [pc, #12]	; (21b48 <nrfx_gpio_handler+0x88>)
   21b3c:	e7c9      	b.n	21ad2 <nrfx_gpio_handler+0x12>
   21b3e:	bf00      	nop
   21b40:	000309a8 	.word	0x000309a8
   21b44:	0003702a 	.word	0x0003702a
   21b48:	000309c0 	.word	0x000309c0
   21b4c:	00036fd3 	.word	0x00036fd3
   21b50:	00037041 	.word	0x00037041
   21b54:	00032486 	.word	0x00032486

00021b58 <gpio_nrfx_pin_interrupt_configure>:
{
   21b58:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   21b5a:	6840      	ldr	r0, [r0, #4]
   21b5c:	7b05      	ldrb	r5, [r0, #12]
   21b5e:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   21b62:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   21b66:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   21b6a:	f04f 0500 	mov.w	r5, #0
   21b6e:	d104      	bne.n	21b7a <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   21b70:	4620      	mov	r0, r4
   21b72:	f002 fc01 	bl	24378 <nrfx_gpiote_trigger_disable>
	return 0;
   21b76:	2000      	movs	r0, #0
   21b78:	e054      	b.n	21c24 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
   21b7a:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   21b7e:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   21b82:	d151      	bne.n	21c28 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   21b84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   21b88:	bf0c      	ite	eq
   21b8a:	2304      	moveq	r3, #4
   21b8c:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   21b8e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   21b92:	6883      	ldr	r3, [r0, #8]
   21b94:	fa23 f101 	lsr.w	r1, r3, r1
   21b98:	f011 0101 	ands.w	r1, r1, #1
   21b9c:	d155      	bne.n	21c4a <gpio_nrfx_pin_interrupt_configure+0xf2>
   21b9e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   21ba2:	d152      	bne.n	21c4a <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
   21ba4:	0966      	lsrs	r6, r4, #5
   21ba6:	d04a      	beq.n	21c3e <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
   21ba8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21bac:	2e01      	cmp	r6, #1
   21bae:	bf08      	it	eq
   21bb0:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
   21bb2:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21bb6:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21bb8:	07ca      	lsls	r2, r1, #31
   21bba:	d40b      	bmi.n	21bd4 <gpio_nrfx_pin_interrupt_configure+0x7c>
   21bbc:	492b      	ldr	r1, [pc, #172]	; (21c6c <gpio_nrfx_pin_interrupt_configure+0x114>)
   21bbe:	482c      	ldr	r0, [pc, #176]	; (21c70 <gpio_nrfx_pin_interrupt_configure+0x118>)
   21bc0:	4a2c      	ldr	r2, [pc, #176]	; (21c74 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   21bc2:	f240 2329 	movw	r3, #553	; 0x229
   21bc6:	f00a fce8 	bl	2c59a <printk>
   21bca:	482a      	ldr	r0, [pc, #168]	; (21c74 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   21bcc:	f240 2129 	movw	r1, #553	; 0x229
   21bd0:	f00a ff24 	bl	2ca1c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21bd4:	b16e      	cbz	r6, 21bf2 <gpio_nrfx_pin_interrupt_configure+0x9a>
   21bd6:	2e01      	cmp	r6, #1
   21bd8:	d034      	beq.n	21c44 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
   21bda:	4927      	ldr	r1, [pc, #156]	; (21c78 <gpio_nrfx_pin_interrupt_configure+0x120>)
   21bdc:	4824      	ldr	r0, [pc, #144]	; (21c70 <gpio_nrfx_pin_interrupt_configure+0x118>)
   21bde:	4a25      	ldr	r2, [pc, #148]	; (21c74 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   21be0:	f240 232e 	movw	r3, #558	; 0x22e
   21be4:	f00a fcd9 	bl	2c59a <printk>
   21be8:	4822      	ldr	r0, [pc, #136]	; (21c74 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   21bea:	f240 212e 	movw	r1, #558	; 0x22e
   21bee:	f00a ff15 	bl	2ca1c <assert_post_action>
        case 0: return NRF_P0;
   21bf2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   21bf6:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   21bfa:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   21bfe:	07db      	lsls	r3, r3, #31
   21c00:	d423      	bmi.n	21c4a <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   21c02:	f10d 0507 	add.w	r5, sp, #7
   21c06:	4629      	mov	r1, r5
   21c08:	4620      	mov	r0, r4
   21c0a:	f002 fadf 	bl	241cc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   21c0e:	4b1b      	ldr	r3, [pc, #108]	; (21c7c <gpio_nrfx_pin_interrupt_configure+0x124>)
   21c10:	4298      	cmp	r0, r3
   21c12:	d119      	bne.n	21c48 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
   21c14:	4628      	mov	r0, r5
   21c16:	f002 fb39 	bl	2428c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   21c1a:	4b19      	ldr	r3, [pc, #100]	; (21c80 <gpio_nrfx_pin_interrupt_configure+0x128>)
   21c1c:	4298      	cmp	r0, r3
   21c1e:	d013      	beq.n	21c48 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
   21c20:	f06f 000b 	mvn.w	r0, #11
}
   21c24:	b004      	add	sp, #16
   21c26:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   21c28:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   21c2c:	d005      	beq.n	21c3a <gpio_nrfx_pin_interrupt_configure+0xe2>
   21c2e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   21c32:	bf0c      	ite	eq
   21c34:	2302      	moveq	r3, #2
   21c36:	2301      	movne	r3, #1
   21c38:	e7a9      	b.n	21b8e <gpio_nrfx_pin_interrupt_configure+0x36>
   21c3a:	2303      	movs	r3, #3
   21c3c:	e7a7      	b.n	21b8e <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
   21c3e:	f04f 31ff 	mov.w	r1, #4294967295
   21c42:	e7b6      	b.n	21bb2 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21c44:	4b0f      	ldr	r3, [pc, #60]	; (21c84 <gpio_nrfx_pin_interrupt_configure+0x12c>)
   21c46:	e7d6      	b.n	21bf6 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
   21c48:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   21c4a:	2300      	movs	r3, #0
   21c4c:	4619      	mov	r1, r3
   21c4e:	aa02      	add	r2, sp, #8
   21c50:	4620      	mov	r0, r4
   21c52:	f002 f99d 	bl	23f90 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   21c56:	4b0a      	ldr	r3, [pc, #40]	; (21c80 <gpio_nrfx_pin_interrupt_configure+0x128>)
   21c58:	4298      	cmp	r0, r3
   21c5a:	d104      	bne.n	21c66 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   21c5c:	2101      	movs	r1, #1
   21c5e:	4620      	mov	r0, r4
   21c60:	f002 fb1a 	bl	24298 <nrfx_gpiote_trigger_enable>
   21c64:	e787      	b.n	21b76 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   21c66:	f06f 0004 	mvn.w	r0, #4
   21c6a:	e7db      	b.n	21c24 <gpio_nrfx_pin_interrupt_configure+0xcc>
   21c6c:	00037080 	.word	0x00037080
   21c70:	00032486 	.word	0x00032486
   21c74:	0003704d 	.word	0x0003704d
   21c78:	000380f0 	.word	0x000380f0
   21c7c:	0bad0004 	.word	0x0bad0004
   21c80:	0bad0000 	.word	0x0bad0000
   21c84:	50000300 	.word	0x50000300

00021c88 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   21c88:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   21c8a:	f002 faef 	bl	2426c <nrfx_gpiote_is_init>
   21c8e:	4604      	mov	r4, r0
   21c90:	b968      	cbnz	r0, 21cae <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   21c92:	f002 fac3 	bl	2421c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   21c96:	4b08      	ldr	r3, [pc, #32]	; (21cb8 <gpio_nrfx_init+0x30>)
   21c98:	4298      	cmp	r0, r3
   21c9a:	d10a      	bne.n	21cb2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   21c9c:	4807      	ldr	r0, [pc, #28]	; (21cbc <gpio_nrfx_init+0x34>)
   21c9e:	4621      	mov	r1, r4
   21ca0:	f002 fa8e 	bl	241c0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   21ca4:	4622      	mov	r2, r4
   21ca6:	2105      	movs	r1, #5
   21ca8:	2006      	movs	r0, #6
   21caa:	f7f5 f99f 	bl	16fec <z_arm_irq_priority_set>
		return 0;
   21cae:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   21cb0:	bd10      	pop	{r4, pc}
		return -EIO;
   21cb2:	f06f 0004 	mvn.w	r0, #4
   21cb6:	e7fb      	b.n	21cb0 <gpio_nrfx_init+0x28>
   21cb8:	0bad0000 	.word	0x0bad0000
   21cbc:	00021ac1 	.word	0x00021ac1

00021cc0 <gpio_nrfx_pin_configure>:
{
   21cc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   21cc4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21cc6:	7b3b      	ldrb	r3, [r7, #12]
   21cc8:	f001 051f 	and.w	r5, r1, #31
{
   21ccc:	b085      	sub	sp, #20
   21cce:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   21cd0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   21cd4:	4614      	mov	r4, r2
   21cd6:	b9ca      	cbnz	r2, 21d0c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   21cd8:	a902      	add	r1, sp, #8
   21cda:	4628      	mov	r0, r5
   21cdc:	f002 fa76 	bl	241cc <nrfx_gpiote_channel_get>
   21ce0:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   21ce2:	4628      	mov	r0, r5
   21ce4:	f002 fb6a 	bl	243bc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   21ce8:	4b48      	ldr	r3, [pc, #288]	; (21e0c <gpio_nrfx_pin_configure+0x14c>)
   21cea:	4298      	cmp	r0, r3
   21cec:	d004      	beq.n	21cf8 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   21cee:	f06f 0004 	mvn.w	r0, #4
}
   21cf2:	b005      	add	sp, #20
   21cf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   21cf8:	4284      	cmp	r4, r0
   21cfa:	d105      	bne.n	21d08 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   21cfc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   21d00:	f002 fabe 	bl	24280 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   21d04:	42a0      	cmp	r0, r4
   21d06:	d1f2      	bne.n	21cee <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   21d08:	2000      	movs	r0, #0
   21d0a:	e7f2      	b.n	21cf2 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   21d0c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   21d10:	f10d 0103 	add.w	r1, sp, #3
   21d14:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   21d16:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   21d1a:	f002 fa57 	bl	241cc <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   21d1e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   21d20:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   21d22:	aa02      	add	r2, sp, #8
   21d24:	4649      	mov	r1, r9
   21d26:	4628      	mov	r0, r5
   21d28:	f002 f932 	bl	23f90 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   21d2c:	4b37      	ldr	r3, [pc, #220]	; (21e0c <gpio_nrfx_pin_configure+0x14c>)
   21d2e:	4298      	cmp	r0, r3
   21d30:	d002      	beq.n	21d38 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   21d32:	f06f 0015 	mvn.w	r0, #21
   21d36:	e7dc      	b.n	21cf2 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   21d38:	4580      	cmp	r8, r0
   21d3a:	d103      	bne.n	21d44 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   21d3c:	f89d 0003 	ldrb.w	r0, [sp, #3]
   21d40:	f002 fa9e 	bl	24280 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   21d44:	05a3      	lsls	r3, r4, #22
   21d46:	d54e      	bpl.n	21de6 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   21d48:	4b31      	ldr	r3, [pc, #196]	; (21e10 <gpio_nrfx_pin_configure+0x150>)
   21d4a:	4a32      	ldr	r2, [pc, #200]	; (21e14 <gpio_nrfx_pin_configure+0x154>)
   21d4c:	4023      	ands	r3, r4
   21d4e:	4293      	cmp	r3, r2
   21d50:	d03a      	beq.n	21dc8 <gpio_nrfx_pin_configure+0x108>
   21d52:	d80c      	bhi.n	21d6e <gpio_nrfx_pin_configure+0xae>
   21d54:	2b06      	cmp	r3, #6
   21d56:	d014      	beq.n	21d82 <gpio_nrfx_pin_configure+0xc2>
   21d58:	d804      	bhi.n	21d64 <gpio_nrfx_pin_configure+0xa4>
   21d5a:	b193      	cbz	r3, 21d82 <gpio_nrfx_pin_configure+0xc2>
   21d5c:	2b02      	cmp	r3, #2
   21d5e:	d1e8      	bne.n	21d32 <gpio_nrfx_pin_configure+0x72>
   21d60:	2304      	movs	r3, #4
   21d62:	e00e      	b.n	21d82 <gpio_nrfx_pin_configure+0xc2>
   21d64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   21d68:	d1e3      	bne.n	21d32 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   21d6a:	2301      	movs	r3, #1
   21d6c:	e009      	b.n	21d82 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   21d6e:	4a2a      	ldr	r2, [pc, #168]	; (21e18 <gpio_nrfx_pin_configure+0x158>)
   21d70:	4293      	cmp	r3, r2
   21d72:	d02b      	beq.n	21dcc <gpio_nrfx_pin_configure+0x10c>
   21d74:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   21d78:	d02a      	beq.n	21dd0 <gpio_nrfx_pin_configure+0x110>
   21d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   21d7e:	d1d8      	bne.n	21d32 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   21d80:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   21d82:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   21d86:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   21d8a:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   21d8e:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   21d90:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   21d94:	bf54      	ite	pl
   21d96:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   21d9a:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   21d9c:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   21d9e:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   21da2:	d517      	bpl.n	21dd4 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   21da4:	687b      	ldr	r3, [r7, #4]
   21da6:	2101      	movs	r1, #1
   21da8:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   21dac:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   21db0:	2200      	movs	r2, #0
   21db2:	a901      	add	r1, sp, #4
   21db4:	4628      	mov	r0, r5
   21db6:	f002 f993 	bl	240e0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   21dba:	4b14      	ldr	r3, [pc, #80]	; (21e0c <gpio_nrfx_pin_configure+0x14c>)
   21dbc:	4298      	cmp	r0, r3
   21dbe:	bf14      	ite	ne
   21dc0:	f06f 0015 	mvnne.w	r0, #21
   21dc4:	2000      	moveq	r0, #0
   21dc6:	e794      	b.n	21cf2 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   21dc8:	2307      	movs	r3, #7
   21dca:	e7da      	b.n	21d82 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   21dcc:	2305      	movs	r3, #5
   21dce:	e7d8      	b.n	21d82 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   21dd0:	2303      	movs	r3, #3
   21dd2:	e7d6      	b.n	21d82 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   21dd4:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   21dd6:	bf41      	itttt	mi
   21dd8:	687b      	ldrmi	r3, [r7, #4]
   21dda:	2101      	movmi	r1, #1
   21ddc:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   21de0:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   21de4:	e7e4      	b.n	21db0 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   21de6:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   21de8:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   21dec:	bf54      	ite	pl
   21dee:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   21df2:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   21df4:	461a      	mov	r2, r3
   21df6:	a901      	add	r1, sp, #4
   21df8:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   21dfa:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   21dfe:	f002 f8c7 	bl	23f90 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   21e02:	4b02      	ldr	r3, [pc, #8]	; (21e0c <gpio_nrfx_pin_configure+0x14c>)
   21e04:	4298      	cmp	r0, r3
   21e06:	f43f af7f 	beq.w	21d08 <gpio_nrfx_pin_configure+0x48>
   21e0a:	e792      	b.n	21d32 <gpio_nrfx_pin_configure+0x72>
   21e0c:	0bad0000 	.word	0x0bad0000
   21e10:	00f00006 	.word	0x00f00006
   21e14:	00100006 	.word	0x00100006
   21e18:	00400002 	.word	0x00400002

00021e1c <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   21e1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   21e1e:	794b      	ldrb	r3, [r1, #5]
   21e20:	2b01      	cmp	r3, #1
   21e22:	d026      	beq.n	21e72 <uarte_nrfx_configure+0x56>
   21e24:	2b03      	cmp	r3, #3
   21e26:	d121      	bne.n	21e6c <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   21e28:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   21e2a:	798b      	ldrb	r3, [r1, #6]
   21e2c:	2b03      	cmp	r3, #3
   21e2e:	d11d      	bne.n	21e6c <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   21e30:	79cc      	ldrb	r4, [r1, #7]
   21e32:	b10c      	cbz	r4, 21e38 <uarte_nrfx_configure+0x1c>
   21e34:	2c01      	cmp	r4, #1
   21e36:	d119      	bne.n	21e6c <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   21e38:	790a      	ldrb	r2, [r1, #4]
   21e3a:	b112      	cbz	r2, 21e42 <uarte_nrfx_configure+0x26>
   21e3c:	2a02      	cmp	r2, #2
   21e3e:	d115      	bne.n	21e6c <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   21e40:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   21e42:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   21e44:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   21e46:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   21e4a:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   21e4c:	d065      	beq.n	21f1a <uarte_nrfx_configure+0xfe>
   21e4e:	d82d      	bhi.n	21eac <uarte_nrfx_configure+0x90>
   21e50:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   21e54:	d064      	beq.n	21f20 <uarte_nrfx_configure+0x104>
   21e56:	d816      	bhi.n	21e86 <uarte_nrfx_configure+0x6a>
   21e58:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   21e5c:	d062      	beq.n	21f24 <uarte_nrfx_configure+0x108>
   21e5e:	d80a      	bhi.n	21e76 <uarte_nrfx_configure+0x5a>
   21e60:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   21e64:	d061      	beq.n	21f2a <uarte_nrfx_configure+0x10e>
   21e66:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   21e6a:	d061      	beq.n	21f30 <uarte_nrfx_configure+0x114>
   21e6c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   21e70:	e052      	b.n	21f18 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
   21e72:	2600      	movs	r6, #0
   21e74:	e7d9      	b.n	21e2a <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   21e76:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   21e7a:	d05c      	beq.n	21f36 <uarte_nrfx_configure+0x11a>
   21e7c:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   21e80:	d1f4      	bne.n	21e6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   21e82:	4b37      	ldr	r3, [pc, #220]	; (21f60 <uarte_nrfx_configure+0x144>)
   21e84:	e03c      	b.n	21f00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21e86:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   21e8a:	d057      	beq.n	21f3c <uarte_nrfx_configure+0x120>
   21e8c:	d807      	bhi.n	21e9e <uarte_nrfx_configure+0x82>
   21e8e:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   21e92:	d055      	beq.n	21f40 <uarte_nrfx_configure+0x124>
   21e94:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   21e98:	d1e8      	bne.n	21e6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   21e9a:	4b32      	ldr	r3, [pc, #200]	; (21f64 <uarte_nrfx_configure+0x148>)
   21e9c:	e030      	b.n	21f00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21e9e:	f647 2712 	movw	r7, #31250	; 0x7a12
   21ea2:	42bb      	cmp	r3, r7
   21ea4:	d1e2      	bne.n	21e6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   21ea6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   21eaa:	e029      	b.n	21f00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21eac:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   21eb0:	d048      	beq.n	21f44 <uarte_nrfx_configure+0x128>
   21eb2:	d813      	bhi.n	21edc <uarte_nrfx_configure+0xc0>
   21eb4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   21eb8:	d047      	beq.n	21f4a <uarte_nrfx_configure+0x12e>
   21eba:	d809      	bhi.n	21ed0 <uarte_nrfx_configure+0xb4>
   21ebc:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   21ec0:	42bb      	cmp	r3, r7
   21ec2:	d044      	beq.n	21f4e <uarte_nrfx_configure+0x132>
   21ec4:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   21ec8:	d1d0      	bne.n	21e6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   21eca:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   21ece:	e017      	b.n	21f00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21ed0:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   21ed4:	d1ca      	bne.n	21e6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   21ed6:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   21eda:	e011      	b.n	21f00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21edc:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   21ee0:	d038      	beq.n	21f54 <uarte_nrfx_configure+0x138>
   21ee2:	d808      	bhi.n	21ef6 <uarte_nrfx_configure+0xda>
   21ee4:	4f20      	ldr	r7, [pc, #128]	; (21f68 <uarte_nrfx_configure+0x14c>)
   21ee6:	42bb      	cmp	r3, r7
   21ee8:	d037      	beq.n	21f5a <uarte_nrfx_configure+0x13e>
   21eea:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   21eee:	d1bd      	bne.n	21e6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   21ef0:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   21ef4:	e004      	b.n	21f00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21ef6:	4f1d      	ldr	r7, [pc, #116]	; (21f6c <uarte_nrfx_configure+0x150>)
   21ef8:	42bb      	cmp	r3, r7
   21efa:	d1b7      	bne.n	21e6c <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   21efc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   21f00:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   21f04:	6903      	ldr	r3, [r0, #16]
   21f06:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   21f08:	4334      	orrs	r4, r6
   21f0a:	4322      	orrs	r2, r4
   21f0c:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   21f0e:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   21f12:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   21f16:	2000      	movs	r0, #0
}
   21f18:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   21f1a:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   21f1e:	e7ef      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   21f20:	4b13      	ldr	r3, [pc, #76]	; (21f70 <uarte_nrfx_configure+0x154>)
   21f22:	e7ed      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   21f24:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   21f28:	e7ea      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
   21f2a:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   21f2e:	e7e7      	b.n	21f00 <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
   21f30:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   21f34:	e7e4      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   21f36:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   21f3a:	e7e1      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   21f3c:	4b0d      	ldr	r3, [pc, #52]	; (21f74 <uarte_nrfx_configure+0x158>)
   21f3e:	e7df      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   21f40:	4b0d      	ldr	r3, [pc, #52]	; (21f78 <uarte_nrfx_configure+0x15c>)
   21f42:	e7dd      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   21f44:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   21f48:	e7da      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   21f4a:	4b0c      	ldr	r3, [pc, #48]	; (21f7c <uarte_nrfx_configure+0x160>)
   21f4c:	e7d8      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   21f4e:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   21f52:	e7d5      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   21f54:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   21f58:	e7d2      	b.n	21f00 <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   21f5a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   21f5e:	e7cf      	b.n	21f00 <uarte_nrfx_configure+0xe4>
   21f60:	0013b000 	.word	0x0013b000
   21f64:	004ea000 	.word	0x004ea000
   21f68:	0003d090 	.word	0x0003d090
   21f6c:	000f4240 	.word	0x000f4240
   21f70:	00275000 	.word	0x00275000
   21f74:	0075c000 	.word	0x0075c000
   21f78:	003af000 	.word	0x003af000
   21f7c:	013a9000 	.word	0x013a9000

00021f80 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21f80:	6802      	ldr	r2, [r0, #0]
    switch (port)
   21f82:	0953      	lsrs	r3, r2, #5
{
   21f84:	b510      	push	{r4, lr}
   21f86:	4604      	mov	r4, r0
    switch (port)
   21f88:	d02c      	beq.n	21fe4 <nrf_gpio_pin_port_decode+0x64>
   21f8a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   21f8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21f90:	bf18      	it	ne
   21f92:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   21f94:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   21f98:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   21f9a:	07db      	lsls	r3, r3, #31
   21f9c:	d40b      	bmi.n	21fb6 <nrf_gpio_pin_port_decode+0x36>
   21f9e:	4914      	ldr	r1, [pc, #80]	; (21ff0 <nrf_gpio_pin_port_decode+0x70>)
   21fa0:	4814      	ldr	r0, [pc, #80]	; (21ff4 <nrf_gpio_pin_port_decode+0x74>)
   21fa2:	4a15      	ldr	r2, [pc, #84]	; (21ff8 <nrf_gpio_pin_port_decode+0x78>)
   21fa4:	f240 2329 	movw	r3, #553	; 0x229
   21fa8:	f00a faf7 	bl	2c59a <printk>
   21fac:	4812      	ldr	r0, [pc, #72]	; (21ff8 <nrf_gpio_pin_port_decode+0x78>)
   21fae:	f240 2129 	movw	r1, #553	; 0x229
   21fb2:	f00a fd33 	bl	2ca1c <assert_post_action>
    uint32_t pin_number = *p_pin;
   21fb6:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   21fb8:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21fbc:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   21fbe:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21fc0:	d00d      	beq.n	21fde <nrf_gpio_pin_port_decode+0x5e>
   21fc2:	2b01      	cmp	r3, #1
   21fc4:	d011      	beq.n	21fea <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
   21fc6:	490d      	ldr	r1, [pc, #52]	; (21ffc <nrf_gpio_pin_port_decode+0x7c>)
   21fc8:	480a      	ldr	r0, [pc, #40]	; (21ff4 <nrf_gpio_pin_port_decode+0x74>)
   21fca:	4a0b      	ldr	r2, [pc, #44]	; (21ff8 <nrf_gpio_pin_port_decode+0x78>)
   21fcc:	f240 232e 	movw	r3, #558	; 0x22e
   21fd0:	f00a fae3 	bl	2c59a <printk>
   21fd4:	4808      	ldr	r0, [pc, #32]	; (21ff8 <nrf_gpio_pin_port_decode+0x78>)
   21fd6:	f240 212e 	movw	r1, #558	; 0x22e
   21fda:	f00a fd1f 	bl	2ca1c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   21fde:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   21fe2:	bd10      	pop	{r4, pc}
    switch (port)
   21fe4:	f04f 33ff 	mov.w	r3, #4294967295
   21fe8:	e7d4      	b.n	21f94 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   21fea:	4805      	ldr	r0, [pc, #20]	; (22000 <nrf_gpio_pin_port_decode+0x80>)
   21fec:	e7f9      	b.n	21fe2 <nrf_gpio_pin_port_decode+0x62>
   21fee:	bf00      	nop
   21ff0:	00037080 	.word	0x00037080
   21ff4:	00032486 	.word	0x00032486
   21ff8:	0003704d 	.word	0x0003704d
   21ffc:	000380f0 	.word	0x000380f0
   22000:	50000300 	.word	0x50000300

00022004 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   22004:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22008:	4615      	mov	r5, r2
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   2200a:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2200c:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   22010:	6817      	ldr	r7, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
   22012:	7a12      	ldrb	r2, [r2, #8]
{
   22014:	b087      	sub	sp, #28
   22016:	4604      	mov	r4, r0
   22018:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   2201a:	b19a      	cbz	r2, 22044 <uarte_nrfx_rx_enable+0x40>
		__ASSERT(false, "TX only UARTE instance");
   2201c:	4a4f      	ldr	r2, [pc, #316]	; (2215c <uarte_nrfx_rx_enable+0x158>)
   2201e:	4950      	ldr	r1, [pc, #320]	; (22160 <uarte_nrfx_rx_enable+0x15c>)
   22020:	4850      	ldr	r0, [pc, #320]	; (22164 <uarte_nrfx_rx_enable+0x160>)
   22022:	f240 337f 	movw	r3, #895	; 0x37f
   22026:	f00a fab8 	bl	2c59a <printk>
   2202a:	484f      	ldr	r0, [pc, #316]	; (22168 <uarte_nrfx_rx_enable+0x164>)
   2202c:	f00a fab5 	bl	2c59a <printk>
   22030:	484a      	ldr	r0, [pc, #296]	; (2215c <uarte_nrfx_rx_enable+0x158>)
   22032:	f240 317f 	movw	r1, #895	; 0x37f
   22036:	f00a fcf1 	bl	2ca1c <assert_post_action>
		return -ENOTSUP;
   2203a:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   2203e:	b007      	add	sp, #28
   22040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data->async->rx_enabled) {
   22044:	f8d9 1010 	ldr.w	r1, [r9, #16]
   22048:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
   2204c:	2a00      	cmp	r2, #0
   2204e:	f040 8081 	bne.w	22154 <uarte_nrfx_rx_enable+0x150>
		MAX(timeout / RX_TIMEOUT_DIV,
   22052:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   22056:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
   22058:	bfd2      	itee	le
   2205a:	235c      	movle	r3, #92	; 0x5c
   2205c:	2205      	movgt	r2, #5
   2205e:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   22062:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
   22066:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   22068:	e9c1 8518 	strd	r8, r5, [r1, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   2206c:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
   22070:	670b      	str	r3, [r1, #112]	; 0x70
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   22072:	6843      	ldr	r3, [r0, #4]
   22074:	685b      	ldr	r3, [r3, #4]
   22076:	06da      	lsls	r2, r3, #27
   22078:	d539      	bpl.n	220ee <uarte_nrfx_rx_enable+0xea>
		if (data->async->rx_flush_cnt) {
   2207a:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
   2207e:	b3b6      	cbz	r6, 220ee <uarte_nrfx_rx_enable+0xea>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   22080:	42ae      	cmp	r6, r5
   22082:	bf28      	it	cs
   22084:	462e      	movcs	r6, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   22086:	4640      	mov	r0, r8
   22088:	4632      	mov	r2, r6
   2208a:	31cc      	adds	r1, #204	; 0xcc
   2208c:	f00e faa5 	bl	305da <memcpy>
			if (!len) {
   22090:	1bad      	subs	r5, r5, r6
			buf += cpy_len;
   22092:	44b0      	add	r8, r6
			if (!len) {
   22094:	d12b      	bne.n	220ee <uarte_nrfx_rx_enable+0xea>
				data->async->rx_flush_cnt -= cpy_len;
   22096:	f8d9 2010 	ldr.w	r2, [r9, #16]
   2209a:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
   2209e:	1b9b      	subs	r3, r3, r6
				notify_uart_rx_rdy(dev, cpy_len);
   220a0:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   220a2:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
   220a6:	4620      	mov	r0, r4
   220a8:	f00d fe04 	bl	2fcb4 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   220ac:	f8d9 6010 	ldr.w	r6, [r9, #16]
	if (*buf) {
   220b0:	6e37      	ldr	r7, [r6, #96]	; 0x60
   220b2:	b177      	cbz	r7, 220d2 <uarte_nrfx_rx_enable+0xce>
		struct uart_event evt = {
   220b4:	2214      	movs	r2, #20
   220b6:	4629      	mov	r1, r5
   220b8:	a801      	add	r0, sp, #4
   220ba:	f00e fab6 	bl	3062a <memset>
   220be:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   220c0:	eb0d 0103 	add.w	r1, sp, r3
   220c4:	4620      	mov	r0, r4
		struct uart_event evt = {
   220c6:	f88d 3004 	strb.w	r3, [sp, #4]
   220ca:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   220cc:	f00d fdeb 	bl	2fca6 <user_callback>
			*buf = NULL;
   220d0:	6635      	str	r5, [r6, #96]	; 0x60
	struct uart_event evt = {
   220d2:	2100      	movs	r1, #0
   220d4:	2214      	movs	r2, #20
   220d6:	a801      	add	r0, sp, #4
   220d8:	f00e faa7 	bl	3062a <memset>
   220dc:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   220de:	a901      	add	r1, sp, #4
   220e0:	4620      	mov	r0, r4
	struct uart_event evt = {
   220e2:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   220e6:	f00d fdde 	bl	2fca6 <user_callback>
	return 0;
   220ea:	2000      	movs	r0, #0
   220ec:	e7a7      	b.n	2203e <uarte_nrfx_rx_enable+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220ee:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   220f0:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   220f4:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   220f8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   220fc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   22100:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   22104:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
   22108:	f8d9 3010 	ldr.w	r3, [r9, #16]
   2210c:	2201      	movs	r2, #1
   2210e:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   22112:	6863      	ldr	r3, [r4, #4]
   22114:	685b      	ldr	r3, [r3, #4]
   22116:	06db      	lsls	r3, r3, #27
   22118:	d519      	bpl.n	2214e <uarte_nrfx_rx_enable+0x14a>
	__asm__ volatile(
   2211a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2211e:	f3ef 8111 	mrs	r1, BASEPRI
   22122:	f383 8812 	msr	BASEPRI_MAX, r3
   22126:	f3bf 8f6f 	isb	sy
	if (data->async) {
   2212a:	6923      	ldr	r3, [r4, #16]
   2212c:	691b      	ldr	r3, [r3, #16]
   2212e:	b12b      	cbz	r3, 2213c <uarte_nrfx_rx_enable+0x138>
		data->async->low_power_mask |= mask;
   22130:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   22134:	f042 0202 	orr.w	r2, r2, #2
   22138:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
   2213c:	6863      	ldr	r3, [r4, #4]
   2213e:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22140:	2208      	movs	r2, #8
   22142:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   22146:	f381 8811 	msr	BASEPRI, r1
   2214a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2214e:	2301      	movs	r3, #1
   22150:	603b      	str	r3, [r7, #0]
   22152:	e7ca      	b.n	220ea <uarte_nrfx_rx_enable+0xe6>
		return -EBUSY;
   22154:	f06f 000f 	mvn.w	r0, #15
   22158:	e771      	b.n	2203e <uarte_nrfx_rx_enable+0x3a>
   2215a:	bf00      	nop
   2215c:	000370b1 	.word	0x000370b1
   22160:	000380f0 	.word	0x000380f0
   22164:	00032486 	.word	0x00032486
   22168:	000370e5 	.word	0x000370e5

0002216c <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2216c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   22170:	4606      	mov	r6, r0
   22172:	2200      	movs	r2, #0
   22174:	2101      	movs	r1, #1
   22176:	2002      	movs	r0, #2
   22178:	f7f4 ff38 	bl	16fec <z_arm_irq_priority_set>
   2217c:	2002      	movs	r0, #2
   2217e:	f7f4 ff03 	bl	16f88 <arch_irq_enable>
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   22182:	f8d6 9004 	ldr.w	r9, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   22186:	6937      	ldr	r7, [r6, #16]
	return config->uarte_regs;
   22188:	f8d9 4000 	ldr.w	r4, [r9]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2218c:	2300      	movs	r3, #0
   2218e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	data->dev = dev;
   22192:	603e      	str	r6, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   22194:	6875      	ldr	r5, [r6, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   22196:	68eb      	ldr	r3, [r5, #12]
   22198:	1c5a      	adds	r2, r3, #1
   2219a:	d013      	beq.n	221c4 <uarte_0_init+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2219c:	a801      	add	r0, sp, #4
   2219e:	9301      	str	r3, [sp, #4]
   221a0:	f7ff feee 	bl	21f80 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   221a4:	9a01      	ldr	r2, [sp, #4]
   221a6:	2301      	movs	r3, #1
   221a8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   221aa:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   221ae:	68eb      	ldr	r3, [r5, #12]
   221b0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   221b2:	a801      	add	r0, sp, #4
   221b4:	f7ff fee4 	bl	21f80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   221b8:	9b01      	ldr	r3, [sp, #4]
   221ba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   221be:	2203      	movs	r2, #3
   221c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   221c4:	692b      	ldr	r3, [r5, #16]
   221c6:	1c58      	adds	r0, r3, #1
   221c8:	d011      	beq.n	221ee <uarte_0_init+0x82>
			nrf_gpio_cfg_input(cfg->rx_pin,
   221ca:	7f2a      	ldrb	r2, [r5, #28]
   221cc:	9301      	str	r3, [sp, #4]
   221ce:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   221d0:	a801      	add	r0, sp, #4
   221d2:	bf14      	ite	ne
   221d4:	f04f 0803 	movne.w	r8, #3
   221d8:	f04f 0800 	moveq.w	r8, #0
   221dc:	f7ff fed0 	bl	21f80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   221e0:	9b01      	ldr	r3, [sp, #4]
   221e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   221e6:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   221ea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   221ee:	696b      	ldr	r3, [r5, #20]
   221f0:	1c59      	adds	r1, r3, #1
   221f2:	d013      	beq.n	2221c <uarte_0_init+0xb0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   221f4:	a801      	add	r0, sp, #4
   221f6:	9301      	str	r3, [sp, #4]
   221f8:	f7ff fec2 	bl	21f80 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   221fc:	9a01      	ldr	r2, [sp, #4]
   221fe:	2301      	movs	r3, #1
   22200:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   22202:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   22206:	696b      	ldr	r3, [r5, #20]
   22208:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2220a:	a801      	add	r0, sp, #4
   2220c:	f7ff feb8 	bl	21f80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22210:	9b01      	ldr	r3, [sp, #4]
   22212:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   22216:	2203      	movs	r2, #3
   22218:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   2221c:	69ab      	ldr	r3, [r5, #24]
   2221e:	1c5a      	adds	r2, r3, #1
   22220:	d011      	beq.n	22246 <uarte_0_init+0xda>
			nrf_gpio_cfg_input(cfg->cts_pin,
   22222:	7f6a      	ldrb	r2, [r5, #29]
   22224:	9301      	str	r3, [sp, #4]
   22226:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   22228:	a801      	add	r0, sp, #4
   2222a:	bf14      	ite	ne
   2222c:	f04f 0803 	movne.w	r8, #3
   22230:	f04f 0800 	moveq.w	r8, #0
   22234:	f7ff fea4 	bl	21f80 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   22238:	9b01      	ldr	r3, [sp, #4]
   2223a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2223e:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   22242:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   22246:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   2224a:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   2224c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   22250:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   22254:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   22258:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   2225c:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
   2225e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   22262:	3104      	adds	r1, #4
   22264:	4630      	mov	r0, r6
   22266:	f7ff fdd9 	bl	21e1c <uarte_nrfx_configure>
	if (err) {
   2226a:	4605      	mov	r5, r0
   2226c:	2800      	cmp	r0, #0
   2226e:	f040 8086 	bne.w	2237e <uarte_0_init+0x212>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   22272:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   22276:	079b      	lsls	r3, r3, #30
   22278:	d529      	bpl.n	222ce <uarte_0_init+0x162>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   2227a:	f107 001a 	add.w	r0, r7, #26
   2227e:	f002 f99b 	bl	245b8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   22282:	4b4b      	ldr	r3, [pc, #300]	; (223b0 <uarte_0_init+0x244>)
   22284:	4298      	cmp	r0, r3
   22286:	d00f      	beq.n	222a8 <uarte_0_init+0x13c>
		LOG_ERR("Failed to allocate PPI Channel");
   22288:	494a      	ldr	r1, [pc, #296]	; (223b4 <uarte_0_init+0x248>)
   2228a:	680b      	ldr	r3, [r1, #0]
   2228c:	0758      	lsls	r0, r3, #29
   2228e:	d008      	beq.n	222a2 <uarte_0_init+0x136>
   22290:	4b49      	ldr	r3, [pc, #292]	; (223b8 <uarte_0_init+0x24c>)
   22292:	484a      	ldr	r0, [pc, #296]	; (223bc <uarte_0_init+0x250>)
   22294:	1ac9      	subs	r1, r1, r3
   22296:	0889      	lsrs	r1, r1, #2
   22298:	0189      	lsls	r1, r1, #6
   2229a:	f041 0101 	orr.w	r1, r1, #1
   2229e:	f00a fd1e 	bl	2ccde <log_0>
		return -EIO;
   222a2:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
   222a6:	e06a      	b.n	2237e <uarte_0_init+0x212>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   222a8:	7eb8      	ldrb	r0, [r7, #26]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   222aa:	00c3      	lsls	r3, r0, #3
   222ac:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   222b0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   222b4:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   222b8:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   222bc:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   222c0:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   222c4:	4a3e      	ldr	r2, [pc, #248]	; (223c0 <uarte_0_init+0x254>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   222c6:	2301      	movs	r3, #1
   222c8:	4083      	lsls	r3, r0
   222ca:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	if (data->async) {
   222ce:	693b      	ldr	r3, [r7, #16]
   222d0:	2b00      	cmp	r3, #0
   222d2:	d058      	beq.n	22386 <uarte_0_init+0x21a>
	return config->uarte_regs;
   222d4:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   222d6:	f8d6 8010 	ldr.w	r8, [r6, #16]
	return config->uarte_regs;
   222da:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   222dc:	f8d8 0010 	ldr.w	r0, [r8, #16]
    p_reg->INTENSET = mask;
   222e0:	4938      	ldr	r1, [pc, #224]	; (223c4 <uarte_0_init+0x258>)
   222e2:	2204      	movs	r2, #4
   222e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   222e8:	2201      	movs	r2, #1
   222ea:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
   222ee:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   222f2:	2108      	movs	r1, #8
   222f4:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   222f8:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   222fc:	b1a1      	cbz	r1, 22328 <uarte_0_init+0x1bc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   222fe:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22300:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   22304:	b91a      	cbnz	r2, 2230e <uarte_0_init+0x1a2>
   22306:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   2230a:	2a00      	cmp	r2, #0
   2230c:	d0f8      	beq.n	22300 <uarte_0_init+0x194>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2230e:	2200      	movs	r2, #0
   22310:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   22314:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   22318:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   2231c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   22320:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   22324:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   22328:	4927      	ldr	r1, [pc, #156]	; (223c8 <uarte_0_init+0x25c>)
   2232a:	2200      	movs	r2, #0
   2232c:	3088      	adds	r0, #136	; 0x88
   2232e:	f00e f8c4 	bl	304ba <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   22332:	f8d8 3010 	ldr.w	r3, [r8, #16]
	timer->user_data = user_data;
   22336:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   2233a:	f8d8 0010 	ldr.w	r0, [r8, #16]
   2233e:	4923      	ldr	r1, [pc, #140]	; (223cc <uarte_0_init+0x260>)
   22340:	2200      	movs	r2, #0
   22342:	3028      	adds	r0, #40	; 0x28
   22344:	f00e f8b9 	bl	304ba <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   22348:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2234c:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   22350:	f8d9 3004 	ldr.w	r3, [r9, #4]
   22354:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   22356:	bf5c      	itt	pl
   22358:	f44f 7280 	movpl.w	r2, #256	; 0x100
   2235c:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   22360:	06db      	lsls	r3, r3, #27
   22362:	bf44      	itt	mi
   22364:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   22368:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   2236c:	3718      	adds	r7, #24
    p_reg->TXD.MAXCNT = length;
   2236e:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   22370:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   22374:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   22378:	2301      	movs	r3, #1
   2237a:	60a3      	str	r3, [r4, #8]
   2237c:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
   2237e:	4628      	mov	r0, r5
   22380:	b003      	add	sp, #12
   22382:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   22386:	2308      	movs	r3, #8
   22388:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   2238c:	f899 3008 	ldrb.w	r3, [r9, #8]
   22390:	2b00      	cmp	r3, #0
   22392:	d1dd      	bne.n	22350 <uarte_0_init+0x1e4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   22394:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   22398:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   2239c:	f107 0319 	add.w	r3, r7, #25
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   223a0:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   223a4:	2301      	movs	r3, #1
   223a6:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   223aa:	6023      	str	r3, [r4, #0]
}
   223ac:	e7d0      	b.n	22350 <uarte_0_init+0x1e4>
   223ae:	bf00      	nop
   223b0:	0bad0000 	.word	0x0bad0000
   223b4:	2000080c 	.word	0x2000080c
   223b8:	200007a8 	.word	0x200007a8
   223bc:	000370fe 	.word	0x000370fe
   223c0:	4001f000 	.word	0x4001f000
   223c4:	000a0210 	.word	0x000a0210
   223c8:	0002fe5b 	.word	0x0002fe5b
   223cc:	0002ff4b 	.word	0x0002ff4b

000223d0 <uarte_nrfx_tx>:
{
   223d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   223d4:	4606      	mov	r6, r0
   223d6:	461d      	mov	r5, r3
	return config->uarte_regs;
   223d8:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   223da:	6937      	ldr	r7, [r6, #16]
	return config->uarte_regs;
   223dc:	f8d3 c000 	ldr.w	ip, [r3]
	__asm__ volatile(
   223e0:	f04f 0340 	mov.w	r3, #64	; 0x40
   223e4:	f3ef 8811 	mrs	r8, BASEPRI
   223e8:	f383 8812 	msr	BASEPRI_MAX, r3
   223ec:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   223f0:	693c      	ldr	r4, [r7, #16]
   223f2:	68e3      	ldr	r3, [r4, #12]
   223f4:	b143      	cbz	r3, 22408 <uarte_nrfx_tx+0x38>
	__asm__ volatile(
   223f6:	f388 8811 	msr	BASEPRI, r8
   223fa:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   223fe:	f06f 000f 	mvn.w	r0, #15
}
   22402:	b002      	add	sp, #8
   22404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->INTENSET = mask;
   22408:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
	data->async->tx_size = len;
   2240c:	60e2      	str	r2, [r4, #12]
	data->async->tx_buf = buf;
   2240e:	60a1      	str	r1, [r4, #8]
   22410:	f8cc e304 	str.w	lr, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   22414:	f001 4c60 	and.w	ip, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   22418:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
   2241c:	d12c      	bne.n	22478 <uarte_nrfx_tx+0xa8>
		data->async->xfer_len = len;
   2241e:	e9c4 1204 	strd	r1, r2, [r4, #16]
	if (!is_tx_ready(dev)) {
   22422:	4630      	mov	r0, r6
   22424:	f00d fc2f 	bl	2fc86 <is_tx_ready>
   22428:	693b      	ldr	r3, [r7, #16]
   2242a:	2800      	cmp	r0, #0
   2242c:	d132      	bne.n	22494 <uarte_nrfx_tx+0xc4>
		data->async->pending_tx = true;
   2242e:	2201      	movs	r2, #1
   22430:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
   22434:	f388 8811 	msr	BASEPRI, r8
   22438:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   2243c:	7afb      	ldrb	r3, [r7, #11]
   2243e:	2b01      	cmp	r3, #1
   22440:	d118      	bne.n	22474 <uarte_nrfx_tx+0xa4>
	    && timeout != SYS_FOREVER_US) {
   22442:	1c6b      	adds	r3, r5, #1
   22444:	d016      	beq.n	22474 <uarte_nrfx_tx+0xa4>
   22446:	481a      	ldr	r0, [pc, #104]	; (224b0 <uarte_nrfx_tx+0xe0>)
   22448:	4a1a      	ldr	r2, [pc, #104]	; (224b4 <uarte_nrfx_tx+0xe4>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   2244a:	693c      	ldr	r4, [r7, #16]
   2244c:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   22450:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   22454:	2100      	movs	r1, #0
   22456:	2300      	movs	r3, #0
   22458:	fbc6 0105 	smlal	r0, r1, r6, r5
   2245c:	f7de fef0 	bl	1240 <__aeabi_uldivmod>
   22460:	3428      	adds	r4, #40	; 0x28
   22462:	4602      	mov	r2, r0
   22464:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   22466:	2000      	movs	r0, #0
   22468:	2100      	movs	r1, #0
   2246a:	e9cd 0100 	strd	r0, r1, [sp]
   2246e:	4620      	mov	r0, r4
   22470:	f006 f9d8 	bl	28824 <z_impl_k_timer_start>
	return 0;
   22474:	2000      	movs	r0, #0
   22476:	e7c4      	b.n	22402 <uarte_nrfx_tx+0x32>
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   22478:	68e2      	ldr	r2, [r4, #12]
		data->async->tx_cache_offset = 0;
   2247a:	6223      	str	r3, [r4, #32]
	if (!remaining) {
   2247c:	2a00      	cmp	r2, #0
   2247e:	d0d0      	beq.n	22422 <uarte_nrfx_tx+0x52>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
   22480:	2a08      	cmp	r2, #8
   22482:	bf28      	it	cs
   22484:	2208      	movcs	r2, #8
	data->async->xfer_buf = data->async->tx_cache;
   22486:	f104 0018 	add.w	r0, r4, #24
	data->async->xfer_len = len;
   2248a:	6162      	str	r2, [r4, #20]
	data->async->xfer_buf = data->async->tx_cache;
   2248c:	6120      	str	r0, [r4, #16]
   2248e:	f00e f8a4 	bl	305da <memcpy>
   22492:	e7c6      	b.n	22422 <uarte_nrfx_tx+0x52>
		data->async->pending_tx = false;
   22494:	2200      	movs	r2, #0
   22496:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
   2249a:	f04f 32ff 	mov.w	r2, #4294967295
   2249e:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   224a2:	4630      	mov	r0, r6
   224a4:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   224a8:	f00d fd74 	bl	2ff94 <tx_start>
   224ac:	e7c2      	b.n	22434 <uarte_nrfx_tx+0x64>
   224ae:	bf00      	nop
   224b0:	000f423f 	.word	0x000f423f
   224b4:	000f4240 	.word	0x000f4240

000224b8 <uarte_nrfx_poll_out>:
{
   224b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   224ba:	6906      	ldr	r6, [r0, #16]
{
   224bc:	4604      	mov	r4, r0
   224be:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   224c0:	f00d fed0 	bl	30264 <k_is_in_isr>
   224c4:	b910      	cbnz	r0, 224cc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   224c6:	4b28      	ldr	r3, [pc, #160]	; (22568 <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
   224c8:	781b      	ldrb	r3, [r3, #0]
   224ca:	bb5b      	cbnz	r3, 22524 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   224cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   224d0:	f3ef 8111 	mrs	r1, BASEPRI
   224d4:	f383 8812 	msr	BASEPRI_MAX, r3
   224d8:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   224dc:	4620      	mov	r0, r4
			key = irq_lock();
   224de:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   224e0:	f00d fbd1 	bl	2fc86 <is_tx_ready>
   224e4:	b1c8      	cbz	r0, 2251a <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
   224e6:	6933      	ldr	r3, [r6, #16]
   224e8:	b15b      	cbz	r3, 22502 <uarte_nrfx_poll_out+0x4a>
   224ea:	68da      	ldr	r2, [r3, #12]
   224ec:	b14a      	cbz	r2, 22502 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   224ee:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
   224f2:	2a00      	cmp	r2, #0
   224f4:	da05      	bge.n	22502 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   224f6:	6862      	ldr	r2, [r4, #4]
   224f8:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   224fa:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   224fe:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
   22502:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   22504:	2201      	movs	r2, #1
	data->char_out = c;
   22506:	f801 7f18 	strb.w	r7, [r1, #24]!
	tx_start(dev, &data->char_out, 1);
   2250a:	4620      	mov	r0, r4
   2250c:	f00d fd42 	bl	2ff94 <tx_start>
	__asm__ volatile(
   22510:	f385 8811 	msr	BASEPRI, r5
   22514:	f3bf 8f6f 	isb	sy
}
   22518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2251a:	f381 8811 	msr	BASEPRI, r1
   2251e:	f3bf 8f6f 	isb	sy
}
   22522:	e7d3      	b.n	224cc <uarte_nrfx_poll_out+0x14>
{
   22524:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   22526:	4620      	mov	r0, r4
   22528:	f00d fbad 	bl	2fc86 <is_tx_ready>
   2252c:	b948      	cbnz	r0, 22542 <uarte_nrfx_poll_out+0x8a>
   2252e:	2001      	movs	r0, #1
   22530:	f00d fde0 	bl	300f4 <nrfx_busy_wait>
   22534:	3d01      	subs	r5, #1
   22536:	d1f6      	bne.n	22526 <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   22538:	2100      	movs	r1, #0
   2253a:	2021      	movs	r0, #33	; 0x21
   2253c:	f005 fb14 	bl	27b68 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   22540:	e7f0      	b.n	22524 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   22542:	f04f 0340 	mov.w	r3, #64	; 0x40
   22546:	f3ef 8511 	mrs	r5, BASEPRI
   2254a:	f383 8812 	msr	BASEPRI_MAX, r3
   2254e:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   22552:	4620      	mov	r0, r4
   22554:	f00d fb97 	bl	2fc86 <is_tx_ready>
   22558:	2800      	cmp	r0, #0
   2255a:	d1d2      	bne.n	22502 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   2255c:	f385 8811 	msr	BASEPRI, r5
   22560:	f3bf 8f6f 	isb	sy
}
   22564:	e7e8      	b.n	22538 <uarte_nrfx_poll_out+0x80>
   22566:	bf00      	nop
   22568:	20004183 	.word	0x20004183

0002256c <random_byte_get>:
	__asm__ volatile(
   2256c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22570:	f3ef 8211 	mrs	r2, BASEPRI
   22574:	f383 8812 	msr	BASEPRI_MAX, r3
   22578:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   2257c:	4b08      	ldr	r3, [pc, #32]	; (225a0 <random_byte_get+0x34>)
   2257e:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   22580:	b159      	cbz	r1, 2259a <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   22582:	4908      	ldr	r1, [pc, #32]	; (225a4 <random_byte_get+0x38>)
   22584:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   22588:	2100      	movs	r1, #0
   2258a:	6019      	str	r1, [r3, #0]
   2258c:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   2258e:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   22590:	f382 8811 	msr	BASEPRI, r2
   22594:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   22598:	4770      	bx	lr
	int retval = -EAGAIN;
   2259a:	f06f 000a 	mvn.w	r0, #10
   2259e:	e7f7      	b.n	22590 <random_byte_get+0x24>
   225a0:	4000d100 	.word	0x4000d100
   225a4:	4000d000 	.word	0x4000d000

000225a8 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   225a8:	b5f0      	push	{r4, r5, r6, r7, lr}
   225aa:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   225ac:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   225ae:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   225b0:	f04f 0540 	mov.w	r5, #64	; 0x40
   225b4:	f3ef 8011 	mrs	r0, BASEPRI
   225b8:	f385 8812 	msr	BASEPRI_MAX, r5
   225bc:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   225c0:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   225c2:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   225c6:	1ba4      	subs	r4, r4, r6
   225c8:	403c      	ands	r4, r7
	if (available < len) {
   225ca:	42a2      	cmp	r2, r4
		len = available;
   225cc:	bf88      	it	hi
   225ce:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   225d0:	eb06 0c02 	add.w	ip, r6, r2
   225d4:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   225d8:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   225da:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   225de:	f380 8811 	msr	BASEPRI, r0
   225e2:	f3bf 8f6f 	isb	sy
   225e6:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   225e8:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   225ea:	4282      	cmp	r2, r0
   225ec:	d119      	bne.n	22622 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   225ee:	4576      	cmp	r6, lr
   225f0:	d10d      	bne.n	2260e <rng_pool_get+0x66>
	__asm__ volatile(
   225f2:	f04f 0540 	mov.w	r5, #64	; 0x40
   225f6:	f3ef 8211 	mrs	r2, BASEPRI
   225fa:	f385 8812 	msr	BASEPRI_MAX, r5
   225fe:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   22602:	781d      	ldrb	r5, [r3, #0]
   22604:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   22606:	f382 8811 	msr	BASEPRI, r2
   2260a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   2260e:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   22610:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   22612:	b288      	uxth	r0, r1
	available = available - len;
   22614:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   22616:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   22618:	bf22      	ittt	cs
   2261a:	4b06      	ldrcs	r3, [pc, #24]	; (22634 <rng_pool_get+0x8c>)
   2261c:	2201      	movcs	r2, #1
   2261e:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   22620:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   22622:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   22626:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   22628:	f89c c005 	ldrb.w	ip, [ip, #5]
   2262c:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   22630:	403d      	ands	r5, r7
   22632:	e7da      	b.n	225ea <rng_pool_get+0x42>
   22634:	4000d000 	.word	0x4000d000

00022638 <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   22638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2263c:	4614      	mov	r4, r2
   2263e:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   22640:	6902      	ldr	r2, [r0, #16]
   22642:	4b2c      	ldr	r3, [pc, #176]	; (226f4 <entropy_nrf5_get_entropy_isr+0xbc>)
   22644:	429a      	cmp	r2, r3
{
   22646:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   22648:	d00b      	beq.n	22662 <entropy_nrf5_get_entropy_isr+0x2a>
   2264a:	492b      	ldr	r1, [pc, #172]	; (226f8 <entropy_nrf5_get_entropy_isr+0xc0>)
   2264c:	482b      	ldr	r0, [pc, #172]	; (226fc <entropy_nrf5_get_entropy_isr+0xc4>)
   2264e:	4a2c      	ldr	r2, [pc, #176]	; (22700 <entropy_nrf5_get_entropy_isr+0xc8>)
   22650:	f44f 7384 	mov.w	r3, #264	; 0x108
   22654:	f009 ffa1 	bl	2c59a <printk>
   22658:	4829      	ldr	r0, [pc, #164]	; (22700 <entropy_nrf5_get_entropy_isr+0xc8>)
   2265a:	f44f 7184 	mov.w	r1, #264	; 0x108
   2265e:	f00a f9dd 	bl	2ca1c <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   22662:	43eb      	mvns	r3, r5
   22664:	f013 0501 	ands.w	r5, r3, #1
   22668:	d006      	beq.n	22678 <entropy_nrf5_get_entropy_isr+0x40>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   2266a:	4826      	ldr	r0, [pc, #152]	; (22704 <entropy_nrf5_get_entropy_isr+0xcc>)
   2266c:	4622      	mov	r2, r4
   2266e:	4631      	mov	r1, r6
   22670:	f7ff ff9a 	bl	225a8 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   22674:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   22678:	2c00      	cmp	r4, #0
   2267a:	d033      	beq.n	226e4 <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   2267c:	f04f 0340 	mov.w	r3, #64	; 0x40
   22680:	f3ef 8811 	mrs	r8, BASEPRI
   22684:	f383 8812 	msr	BASEPRI_MAX, r3
   22688:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   2268c:	200d      	movs	r0, #13
   2268e:	f7f4 fc9f 	bl	16fd0 <arch_irq_is_enabled>
   22692:	4607      	mov	r7, r0
		irq_disable(IRQN);
   22694:	200d      	movs	r0, #13
   22696:	f7f4 fc87 	bl	16fa8 <arch_irq_disable>
	__asm__ volatile(
   2269a:	f388 8811 	msr	BASEPRI, r8
   2269e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   226a2:	4a19      	ldr	r2, [pc, #100]	; (22708 <entropy_nrf5_get_entropy_isr+0xd0>)
   226a4:	6015      	str	r5, [r2, #0]
   226a6:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   226a8:	4b18      	ldr	r3, [pc, #96]	; (2270c <entropy_nrf5_get_entropy_isr+0xd4>)
   226aa:	2101      	movs	r1, #1
   226ac:	6019      	str	r1, [r3, #0]
   226ae:	4918      	ldr	r1, [pc, #96]	; (22710 <entropy_nrf5_get_entropy_isr+0xd8>)
   226b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   226b4:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   226b8:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   226ba:	4691      	mov	r9, r2
   226bc:	468a      	mov	sl, r1
   226be:	4698      	mov	r8, r3
   226c0:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   226c4:	b183      	cbz	r3, 226e8 <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   226c6:	f7ff ff51 	bl	2256c <random_byte_get>
			if (byte < 0) {
   226ca:	1e03      	subs	r3, r0, #0
   226cc:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   226d0:	dbf6      	blt.n	226c0 <entropy_nrf5_get_entropy_isr+0x88>
   226d2:	3d01      	subs	r5, #1
   226d4:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   226d6:	5573      	strb	r3, [r6, r5]
		} while (len);
   226d8:	2d00      	cmp	r5, #0
   226da:	d1f1      	bne.n	226c0 <entropy_nrf5_get_entropy_isr+0x88>
		if (irq_enabled) {
   226dc:	b117      	cbz	r7, 226e4 <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(IRQN);
   226de:	200d      	movs	r0, #13
   226e0:	f7f4 fc52 	bl	16f88 <arch_irq_enable>
	return cnt;
   226e4:	4620      	mov	r0, r4
   226e6:	e7c5      	b.n	22674 <entropy_nrf5_get_entropy_isr+0x3c>
   226e8:	f3bf 8f4f 	dsb	sy
				__WFE();
   226ec:	bf20      	wfe
				__SEV();
   226ee:	bf40      	sev
				__WFE();
   226f0:	bf20      	wfe
   226f2:	e7e5      	b.n	226c0 <entropy_nrf5_get_entropy_isr+0x88>
   226f4:	20002e7c 	.word	0x20002e7c
   226f8:	00037166 	.word	0x00037166
   226fc:	00032486 	.word	0x00032486
   22700:	00037134 	.word	0x00037134
   22704:	20002eac 	.word	0x20002eac
   22708:	4000d100 	.word	0x4000d100
   2270c:	4000d000 	.word	0x4000d000
   22710:	e000e100 	.word	0xe000e100

00022714 <entropy_nrf5_get_entropy>:
{
   22714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   22718:	4b1a      	ldr	r3, [pc, #104]	; (22784 <entropy_nrf5_get_entropy+0x70>)
{
   2271a:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   2271c:	6902      	ldr	r2, [r0, #16]
   2271e:	429a      	cmp	r2, r3
{
   22720:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   22722:	d009      	beq.n	22738 <entropy_nrf5_get_entropy+0x24>
   22724:	4918      	ldr	r1, [pc, #96]	; (22788 <entropy_nrf5_get_entropy+0x74>)
   22726:	4819      	ldr	r0, [pc, #100]	; (2278c <entropy_nrf5_get_entropy+0x78>)
   22728:	4a19      	ldr	r2, [pc, #100]	; (22790 <entropy_nrf5_get_entropy+0x7c>)
   2272a:	23ea      	movs	r3, #234	; 0xea
   2272c:	f009 ff35 	bl	2c59a <printk>
   22730:	4817      	ldr	r0, [pc, #92]	; (22790 <entropy_nrf5_get_entropy+0x7c>)
   22732:	21ea      	movs	r1, #234	; 0xea
   22734:	f00a f972 	bl	2ca1c <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   22738:	4e12      	ldr	r6, [pc, #72]	; (22784 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2273a:	f106 0745 	add.w	r7, r6, #69	; 0x45
   2273e:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   22742:	b914      	cbnz	r4, 2274a <entropy_nrf5_get_entropy+0x36>
}
   22744:	4620      	mov	r0, r4
   22746:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2274a:	f04f 33ff 	mov.w	r3, #4294967295
   2274e:	f04f 32ff 	mov.w	r2, #4294967295
   22752:	4630      	mov	r0, r6
   22754:	f003 fb94 	bl	25e80 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   22758:	4622      	mov	r2, r4
   2275a:	4649      	mov	r1, r9
   2275c:	4638      	mov	r0, r7
   2275e:	f7ff ff23 	bl	225a8 <rng_pool_get>
   22762:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   22764:	4630      	mov	r0, r6
   22766:	f003 fb47 	bl	25df8 <z_impl_k_sem_give>
		if (bytes == 0U) {
   2276a:	b93d      	cbnz	r5, 2277c <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   2276c:	f04f 32ff 	mov.w	r2, #4294967295
   22770:	f04f 33ff 	mov.w	r3, #4294967295
   22774:	4640      	mov	r0, r8
   22776:	f003 fb83 	bl	25e80 <z_impl_k_sem_take>
			continue;
   2277a:	e7e2      	b.n	22742 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   2277c:	1b64      	subs	r4, r4, r5
   2277e:	b2a4      	uxth	r4, r4
		buf += bytes;
   22780:	44a9      	add	r9, r5
   22782:	e7de      	b.n	22742 <entropy_nrf5_get_entropy+0x2e>
   22784:	20002e7c 	.word	0x20002e7c
   22788:	00037166 	.word	0x00037166
   2278c:	00032486 	.word	0x00032486
   22790:	00037134 	.word	0x00037134

00022794 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   22794:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   22796:	4c20      	ldr	r4, [pc, #128]	; (22818 <entropy_nrf5_init+0x84>)
   22798:	6903      	ldr	r3, [r0, #16]
   2279a:	42a3      	cmp	r3, r4
   2279c:	d00b      	beq.n	227b6 <entropy_nrf5_init+0x22>
   2279e:	491f      	ldr	r1, [pc, #124]	; (2281c <entropy_nrf5_init+0x88>)
   227a0:	481f      	ldr	r0, [pc, #124]	; (22820 <entropy_nrf5_init+0x8c>)
   227a2:	4a20      	ldr	r2, [pc, #128]	; (22824 <entropy_nrf5_init+0x90>)
   227a4:	f240 1357 	movw	r3, #343	; 0x157
   227a8:	f009 fef7 	bl	2c59a <printk>
   227ac:	481d      	ldr	r0, [pc, #116]	; (22824 <entropy_nrf5_init+0x90>)
   227ae:	f240 1157 	movw	r1, #343	; 0x157
   227b2:	f00a f933 	bl	2ca1c <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   227b6:	2201      	movs	r2, #1
   227b8:	4611      	mov	r1, r2
   227ba:	4817      	ldr	r0, [pc, #92]	; (22818 <entropy_nrf5_init+0x84>)
   227bc:	f00d fdb9 	bl	30332 <z_impl_k_sem_init>
   227c0:	2201      	movs	r2, #1
   227c2:	2100      	movs	r1, #0
   227c4:	4818      	ldr	r0, [pc, #96]	; (22828 <entropy_nrf5_init+0x94>)
   227c6:	f00d fdb4 	bl	30332 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   227ca:	f240 4307 	movw	r3, #1031	; 0x407
   227ce:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   227d2:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   227d6:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   227d8:	230c      	movs	r3, #12
   227da:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   227de:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   227e0:	4b12      	ldr	r3, [pc, #72]	; (2282c <entropy_nrf5_init+0x98>)
   227e2:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   227e6:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   227ea:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   227ee:	f022 0201 	bic.w	r2, r2, #1
   227f2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   227f6:	4a0e      	ldr	r2, [pc, #56]	; (22830 <entropy_nrf5_init+0x9c>)
    p_reg->INTENSET = mask;
   227f8:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   227fa:	6015      	str	r5, [r2, #0]
   227fc:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   227fe:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   22802:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   22804:	6019      	str	r1, [r3, #0]
   22806:	200d      	movs	r0, #13
   22808:	f7f4 fbf0 	bl	16fec <z_arm_irq_priority_set>
	irq_enable(IRQN);
   2280c:	200d      	movs	r0, #13
   2280e:	f7f4 fbbb 	bl	16f88 <arch_irq_enable>

	return 0;
}
   22812:	4628      	mov	r0, r5
   22814:	bd38      	pop	{r3, r4, r5, pc}
   22816:	bf00      	nop
   22818:	20002e7c 	.word	0x20002e7c
   2281c:	00037166 	.word	0x00037166
   22820:	00032486 	.word	0x00032486
   22824:	00037134 	.word	0x00037134
   22828:	20002e94 	.word	0x20002e94
   2282c:	4000d000 	.word	0x4000d000
   22830:	4000d100 	.word	0x4000d100

00022834 <isr>:
{
   22834:	b510      	push	{r4, lr}
	byte = random_byte_get();
   22836:	f7ff fe99 	bl	2256c <random_byte_get>
	if (byte < 0) {
   2283a:	2800      	cmp	r0, #0
   2283c:	db20      	blt.n	22880 <isr+0x4c>
	uint8_t last  = rngp->last;
   2283e:	4b17      	ldr	r3, [pc, #92]	; (2289c <isr+0x68>)
   22840:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   22844:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   22848:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   2284c:	1a51      	subs	r1, r2, r1
   2284e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   22852:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   22854:	d10d      	bne.n	22872 <isr+0x3e>
	uint8_t last  = rngp->last;
   22856:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2285a:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   2285e:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   22862:	1a51      	subs	r1, r2, r1
   22864:	ea34 0101 	bics.w	r1, r4, r1
   22868:	d10b      	bne.n	22882 <isr+0x4e>
   2286a:	4b0d      	ldr	r3, [pc, #52]	; (228a0 <isr+0x6c>)
   2286c:	2201      	movs	r2, #1
   2286e:	601a      	str	r2, [r3, #0]
}
   22870:	e00e      	b.n	22890 <isr+0x5c>
	rngp->buffer[last] = byte;
   22872:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   22874:	3201      	adds	r2, #1
   22876:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   22878:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   2287c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   22880:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   22882:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   22884:	3201      	adds	r2, #1
   22886:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   22888:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   2288c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   22890:	4804      	ldr	r0, [pc, #16]	; (228a4 <isr+0x70>)
}
   22892:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   22896:	f003 baaf 	b.w	25df8 <z_impl_k_sem_give>
   2289a:	bf00      	nop
   2289c:	20002e7c 	.word	0x20002e7c
   228a0:	4000d004 	.word	0x4000d004
   228a4:	20002e94 	.word	0x20002e94

000228a8 <entropy_cc3xx_rng_get_entropy>:

static int entropy_cc3xx_rng_get_entropy(
	const struct device *dev,
	uint8_t *buffer,
	uint16_t length)
{
   228a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   228aa:	460f      	mov	r7, r1
   228ac:	4616      	mov	r6, r2
	int res = -EINVAL;

	__ASSERT_NO_MSG(dev != NULL);
   228ae:	b948      	cbnz	r0, 228c4 <entropy_cc3xx_rng_get_entropy+0x1c>
   228b0:	4919      	ldr	r1, [pc, #100]	; (22918 <entropy_cc3xx_rng_get_entropy+0x70>)
   228b2:	481a      	ldr	r0, [pc, #104]	; (2291c <entropy_cc3xx_rng_get_entropy+0x74>)
   228b4:	4a1a      	ldr	r2, [pc, #104]	; (22920 <entropy_cc3xx_rng_get_entropy+0x78>)
   228b6:	2324      	movs	r3, #36	; 0x24
   228b8:	f009 fe6f 	bl	2c59a <printk>
   228bc:	4818      	ldr	r0, [pc, #96]	; (22920 <entropy_cc3xx_rng_get_entropy+0x78>)
   228be:	2124      	movs	r1, #36	; 0x24
   228c0:	f00a f8ac 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(buffer != NULL);
   228c4:	b94f      	cbnz	r7, 228da <entropy_cc3xx_rng_get_entropy+0x32>
   228c6:	4917      	ldr	r1, [pc, #92]	; (22924 <entropy_cc3xx_rng_get_entropy+0x7c>)
   228c8:	4814      	ldr	r0, [pc, #80]	; (2291c <entropy_cc3xx_rng_get_entropy+0x74>)
   228ca:	4a15      	ldr	r2, [pc, #84]	; (22920 <entropy_cc3xx_rng_get_entropy+0x78>)
   228cc:	2325      	movs	r3, #37	; 0x25
   228ce:	f009 fe64 	bl	2c59a <printk>
   228d2:	4813      	ldr	r0, [pc, #76]	; (22920 <entropy_cc3xx_rng_get_entropy+0x78>)
   228d4:	2125      	movs	r1, #37	; 0x25
   228d6:	f00a f8a1 	bl	2ca1c <assert_post_action>
	 *  gathered using CC3xx HW using the CTR_DRBG features of the
	 *  nrf_cc310_platform/nrf_cc312_platform library.
	 */
	while (offset < length) {

		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   228da:	f44f 6580 	mov.w	r5, #1024	; 0x400
   228de:	2400      	movs	r4, #0
   228e0:	f06f 0015 	mvn.w	r0, #21
	while (offset < length) {
   228e4:	42a6      	cmp	r6, r4
   228e6:	d801      	bhi.n	228ec <entropy_cc3xx_rng_get_entropy+0x44>
		offset += chunk_size;
	}
#endif

	return res;
}
   228e8:	b003      	add	sp, #12
   228ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if ((length - offset) < CTR_DRBG_MAX_REQUEST) {
   228ec:	1b33      	subs	r3, r6, r4
   228ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   228f2:	bf38      	it	cc
   228f4:	461d      	movcc	r5, r3
			res = nrf_cc3xx_platform_ctr_drbg_get(NULL,
   228f6:	462a      	mov	r2, r5
   228f8:	ab01      	add	r3, sp, #4
   228fa:	1939      	adds	r1, r7, r4
   228fc:	2000      	movs	r0, #0
   228fe:	f006 fcdb 	bl	292b8 <nrf_cc3xx_platform_ctr_drbg_get>
		if (olen != chunk_size) {
   22902:	9b01      	ldr	r3, [sp, #4]
   22904:	42ab      	cmp	r3, r5
   22906:	d103      	bne.n	22910 <entropy_cc3xx_rng_get_entropy+0x68>
		if (res != 0) {
   22908:	2800      	cmp	r0, #0
   2290a:	d1ed      	bne.n	228e8 <entropy_cc3xx_rng_get_entropy+0x40>
		offset += chunk_size;
   2290c:	442c      	add	r4, r5
   2290e:	e7e9      	b.n	228e4 <entropy_cc3xx_rng_get_entropy+0x3c>
			return -EINVAL;
   22910:	f06f 0015 	mvn.w	r0, #21
   22914:	e7e8      	b.n	228e8 <entropy_cc3xx_rng_get_entropy+0x40>
   22916:	bf00      	nop
   22918:	000371de 	.word	0x000371de
   2291c:	00032486 	.word	0x00032486
   22920:	000371ae 	.word	0x000371ae
   22924:	000371f1 	.word	0x000371f1

00022928 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22928:	4919      	ldr	r1, [pc, #100]	; (22990 <sys_clock_timeout_handler+0x68>)
{
   2292a:	b570      	push	{r4, r5, r6, lr}
   2292c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   2292e:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   22932:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   22934:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   22938:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   2293c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   2293e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   22942:	f04f 0500 	mov.w	r5, #0
   22946:	d20a      	bcs.n	2295e <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   22948:	4b12      	ldr	r3, [pc, #72]	; (22994 <sys_clock_timeout_handler+0x6c>)
   2294a:	6819      	ldr	r1, [r3, #0]
   2294c:	060a      	lsls	r2, r1, #24
   2294e:	0a0b      	lsrs	r3, r1, #8
   22950:	1992      	adds	r2, r2, r6
   22952:	4911      	ldr	r1, [pc, #68]	; (22998 <sys_clock_timeout_handler+0x70>)
   22954:	f143 0300 	adc.w	r3, r3, #0
   22958:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   2295c:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   2295e:	f005 fd8f 	bl	28480 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   22962:	00a3      	lsls	r3, r4, #2
   22964:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   22968:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   2296c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   22970:	42b2      	cmp	r2, r6
   22972:	d10b      	bne.n	2298c <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   22974:	b91d      	cbnz	r5, 2297e <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   22976:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2297a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   2297e:	4b07      	ldr	r3, [pc, #28]	; (2299c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22980:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   22984:	fa00 f404 	lsl.w	r4, r0, r4
   22988:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   2298c:	bd70      	pop	{r4, r5, r6, pc}
   2298e:	bf00      	nop
   22990:	20001eb8 	.word	0x20001eb8
   22994:	20002ed8 	.word	0x20002ed8
   22998:	20001ea0 	.word	0x20001ea0
   2299c:	40011000 	.word	0x40011000

000229a0 <compare_int_lock>:
{
   229a0:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   229a2:	2301      	movs	r3, #1
   229a4:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   229a6:	4a11      	ldr	r2, [pc, #68]	; (229ec <compare_int_lock+0x4c>)
   229a8:	f3bf 8f5b 	dmb	ish
   229ac:	43dc      	mvns	r4, r3
   229ae:	e852 1f00 	ldrex	r1, [r2]
   229b2:	ea01 0c04 	and.w	ip, r1, r4
   229b6:	e842 ce00 	strex	lr, ip, [r2]
   229ba:	f1be 0f00 	cmp.w	lr, #0
   229be:	d1f6      	bne.n	229ae <compare_int_lock+0xe>
   229c0:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   229c4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   229c8:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   229cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   229d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   229d4:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   229d8:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   229dc:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   229e0:	420b      	tst	r3, r1
}
   229e2:	bf14      	ite	ne
   229e4:	2001      	movne	r0, #1
   229e6:	2000      	moveq	r0, #0
   229e8:	bd10      	pop	{r4, pc}
   229ea:	bf00      	nop
   229ec:	20002ed4 	.word	0x20002ed4

000229f0 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   229f0:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   229f2:	4a12      	ldr	r2, [pc, #72]	; (22a3c <compare_int_unlock.part.0+0x4c>)
   229f4:	f3bf 8f5b 	dmb	ish
   229f8:	4083      	lsls	r3, r0
   229fa:	e852 1f00 	ldrex	r1, [r2]
   229fe:	4319      	orrs	r1, r3
   22a00:	e842 1c00 	strex	ip, r1, [r2]
   22a04:	f1bc 0f00 	cmp.w	ip, #0
   22a08:	d1f7      	bne.n	229fa <compare_int_unlock.part.0+0xa>
   22a0a:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   22a0e:	4a0c      	ldr	r2, [pc, #48]	; (22a40 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22a10:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22a14:	4083      	lsls	r3, r0
   22a16:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   22a1a:	4b0a      	ldr	r3, [pc, #40]	; (22a44 <compare_int_unlock.part.0+0x54>)
   22a1c:	f3bf 8f5b 	dmb	ish
   22a20:	681b      	ldr	r3, [r3, #0]
   22a22:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   22a26:	fa23 f000 	lsr.w	r0, r3, r0
   22a2a:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22a2c:	bf42      	ittt	mi
   22a2e:	4b06      	ldrmi	r3, [pc, #24]	; (22a48 <compare_int_unlock.part.0+0x58>)
   22a30:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   22a34:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   22a38:	4770      	bx	lr
   22a3a:	bf00      	nop
   22a3c:	20002ed4 	.word	0x20002ed4
   22a40:	40011000 	.word	0x40011000
   22a44:	20002ed0 	.word	0x20002ed0
   22a48:	e000e100 	.word	0xe000e100

00022a4c <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   22a4c:	4b0d      	ldr	r3, [pc, #52]	; (22a84 <z_nrf_rtc_timer_read+0x38>)
   22a4e:	681b      	ldr	r3, [r3, #0]
   22a50:	0a19      	lsrs	r1, r3, #8
   22a52:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   22a54:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   22a58:	4b0b      	ldr	r3, [pc, #44]	; (22a88 <z_nrf_rtc_timer_read+0x3c>)
   22a5a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   22a5e:	18c0      	adds	r0, r0, r3
   22a60:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   22a64:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   22a68:	d20a      	bcs.n	22a80 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   22a6a:	4b08      	ldr	r3, [pc, #32]	; (22a8c <z_nrf_rtc_timer_read+0x40>)
   22a6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   22a70:	4299      	cmp	r1, r3
   22a72:	bf08      	it	eq
   22a74:	4290      	cmpeq	r0, r2
   22a76:	d203      	bcs.n	22a80 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   22a78:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   22a7c:	f141 0100 	adc.w	r1, r1, #0
}
   22a80:	4770      	bx	lr
   22a82:	bf00      	nop
   22a84:	20002ed8 	.word	0x20002ed8
   22a88:	40011000 	.word	0x40011000
   22a8c:	20001ea0 	.word	0x20001ea0

00022a90 <compare_set>:
{
   22a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22a94:	b085      	sub	sp, #20
   22a96:	4616      	mov	r6, r2
   22a98:	461f      	mov	r7, r3
   22a9a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   22a9c:	f7ff ff80 	bl	229a0 <compare_int_lock>
   22aa0:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   22aa2:	f7ff ffd3 	bl	22a4c <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   22aa6:	42b9      	cmp	r1, r7
   22aa8:	bf08      	it	eq
   22aaa:	42b0      	cmpeq	r0, r6
   22aac:	d27f      	bcs.n	22bae <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   22aae:	ebb6 0800 	subs.w	r8, r6, r0
   22ab2:	eb67 0901 	sbc.w	r9, r7, r1
   22ab6:	2300      	movs	r3, #0
   22ab8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   22abc:	454b      	cmp	r3, r9
   22abe:	bf08      	it	eq
   22ac0:	4542      	cmpeq	r2, r8
   22ac2:	f0c0 8085 	bcc.w	22bd0 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   22ac6:	4b44      	ldr	r3, [pc, #272]	; (22bd8 <compare_set+0x148>)
   22ac8:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   22acc:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   22ad0:	429f      	cmp	r7, r3
   22ad2:	bf08      	it	eq
   22ad4:	4296      	cmpeq	r6, r2
   22ad6:	d054      	beq.n	22b82 <compare_set+0xf2>
   22ad8:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22adc:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   22ae0:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   22ae4:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22ae8:	fa0b f205 	lsl.w	r2, fp, r5
   22aec:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   22af0:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22af4:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   22af8:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   22afa:	4a38      	ldr	r2, [pc, #224]	; (22bdc <compare_set+0x14c>)
    return p_reg->CC[ch];
   22afc:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   22b00:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22b04:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   22b08:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   22b0c:	461c      	mov	r4, r3
   22b0e:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   22b10:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   22b14:	eba0 000a 	sub.w	r0, r0, sl
   22b18:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22b1c:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   22b20:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   22b22:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   22b26:	d105      	bne.n	22b34 <compare_set+0xa4>
   22b28:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   22b2a:	2013      	movs	r0, #19
   22b2c:	f00d fc98 	bl	30460 <z_impl_k_busy_wait>
   22b30:	4a2a      	ldr	r2, [pc, #168]	; (22bdc <compare_set+0x14c>)
   22b32:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   22b34:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   22b36:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   22b3a:	eba4 000c 	sub.w	r0, r4, ip
   22b3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   22b42:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22b46:	bf88      	it	hi
   22b48:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22b4a:	2000      	movs	r0, #0
   22b4c:	f8c8 0000 	str.w	r0, [r8]
   22b50:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   22b54:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   22b58:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   22b5c:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   22b60:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   22b64:	4582      	cmp	sl, r0
   22b66:	d006      	beq.n	22b76 <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   22b68:	1a20      	subs	r0, r4, r0
   22b6a:	3802      	subs	r0, #2
   22b6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   22b70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22b74:	d819      	bhi.n	22baa <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   22b76:	1ae4      	subs	r4, r4, r3
   22b78:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   22b7c:	1932      	adds	r2, r6, r4
   22b7e:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   22b82:	4c15      	ldr	r4, [pc, #84]	; (22bd8 <compare_set+0x148>)
   22b84:	0129      	lsls	r1, r5, #4
   22b86:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   22b8a:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   22b8e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   22b90:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   22b92:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   22b94:	6043      	str	r3, [r0, #4]
	return ret;
   22b96:	2400      	movs	r4, #0
	if (key) {
   22b98:	9b01      	ldr	r3, [sp, #4]
   22b9a:	b113      	cbz	r3, 22ba2 <compare_set+0x112>
   22b9c:	4628      	mov	r0, r5
   22b9e:	f7ff ff27 	bl	229f0 <compare_int_unlock.part.0>
}
   22ba2:	4620      	mov	r0, r4
   22ba4:	b005      	add	sp, #20
   22ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22baa:	4620      	mov	r0, r4
   22bac:	e7b0      	b.n	22b10 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   22bae:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   22bb0:	4a0b      	ldr	r2, [pc, #44]	; (22be0 <compare_set+0x150>)
   22bb2:	f3bf 8f5b 	dmb	ish
   22bb6:	40ab      	lsls	r3, r5
   22bb8:	e852 1f00 	ldrex	r1, [r2]
   22bbc:	4319      	orrs	r1, r3
   22bbe:	e842 1000 	strex	r0, r1, [r2]
   22bc2:	2800      	cmp	r0, #0
   22bc4:	d1f8      	bne.n	22bb8 <compare_set+0x128>
   22bc6:	f3bf 8f5b 	dmb	ish
   22bca:	4632      	mov	r2, r6
   22bcc:	463b      	mov	r3, r7
   22bce:	e7d8      	b.n	22b82 <compare_set+0xf2>
			return -EINVAL;
   22bd0:	f06f 0415 	mvn.w	r4, #21
   22bd4:	e7e0      	b.n	22b98 <compare_set+0x108>
   22bd6:	bf00      	nop
   22bd8:	20001ea8 	.word	0x20001ea8
   22bdc:	40011000 	.word	0x40011000
   22be0:	20002ed0 	.word	0x20002ed0

00022be4 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   22be4:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   22be6:	4b19      	ldr	r3, [pc, #100]	; (22c4c <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   22be8:	4d19      	ldr	r5, [pc, #100]	; (22c50 <sys_clock_driver_init+0x6c>)
   22bea:	2400      	movs	r4, #0
   22bec:	f04f 30ff 	mov.w	r0, #4294967295
   22bf0:	f04f 31ff 	mov.w	r1, #4294967295
   22bf4:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   22bf8:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   22bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22c00:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   22c04:	4b13      	ldr	r3, [pc, #76]	; (22c54 <sys_clock_driver_init+0x70>)
   22c06:	2602      	movs	r6, #2
   22c08:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   22c0c:	2101      	movs	r1, #1
   22c0e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   22c12:	2011      	movs	r0, #17
   22c14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   22c18:	4622      	mov	r2, r4
   22c1a:	f7f4 f9e7 	bl	16fec <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   22c1e:	2011      	movs	r0, #17
   22c20:	f7f4 f9b2 	bl	16f88 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   22c24:	4a0c      	ldr	r2, [pc, #48]	; (22c58 <sys_clock_driver_init+0x74>)
   22c26:	2301      	movs	r3, #1
   22c28:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   22c2a:	4a0c      	ldr	r2, [pc, #48]	; (22c5c <sys_clock_driver_init+0x78>)
   22c2c:	602b      	str	r3, [r5, #0]
   22c2e:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   22c30:	4b0b      	ldr	r3, [pc, #44]	; (22c60 <sys_clock_driver_init+0x7c>)
   22c32:	4a0c      	ldr	r2, [pc, #48]	; (22c64 <sys_clock_driver_init+0x80>)
   22c34:	9300      	str	r3, [sp, #0]
   22c36:	9401      	str	r4, [sp, #4]
   22c38:	2300      	movs	r3, #0
   22c3a:	4620      	mov	r0, r4
   22c3c:	f7ff ff28 	bl	22a90 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   22c40:	4630      	mov	r0, r6
   22c42:	f7fe fe3b 	bl	218bc <z_nrf_clock_control_lf_on>

	return 0;
}
   22c46:	4620      	mov	r0, r4
   22c48:	b002      	add	sp, #8
   22c4a:	bd70      	pop	{r4, r5, r6, pc}
   22c4c:	20001ea8 	.word	0x20001ea8
   22c50:	40011000 	.word	0x40011000
   22c54:	e000e100 	.word	0xe000e100
   22c58:	40011008 	.word	0x40011008
   22c5c:	20002ed4 	.word	0x20002ed4
   22c60:	00022929 	.word	0x00022929
   22c64:	007fffff 	.word	0x007fffff

00022c68 <rtc_nrf_isr>:
{
   22c68:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   22c6c:	4c2a      	ldr	r4, [pc, #168]	; (22d18 <rtc_nrf_isr+0xb0>)
   22c6e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   22c72:	0799      	lsls	r1, r3, #30
   22c74:	d509      	bpl.n	22c8a <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22c76:	4b29      	ldr	r3, [pc, #164]	; (22d1c <rtc_nrf_isr+0xb4>)
   22c78:	681a      	ldr	r2, [r3, #0]
   22c7a:	b132      	cbz	r2, 22c8a <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22c7c:	2200      	movs	r2, #0
   22c7e:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   22c80:	4a27      	ldr	r2, [pc, #156]	; (22d20 <rtc_nrf_isr+0xb8>)
   22c82:	681b      	ldr	r3, [r3, #0]
   22c84:	6813      	ldr	r3, [r2, #0]
   22c86:	3301      	adds	r3, #1
   22c88:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   22c8a:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   22c8e:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   22c90:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   22c94:	03d2      	lsls	r2, r2, #15
   22c96:	d52c      	bpl.n	22cf2 <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   22c98:	f3bf 8f5b 	dmb	ish
   22c9c:	4a21      	ldr	r2, [pc, #132]	; (22d24 <rtc_nrf_isr+0xbc>)
   22c9e:	e852 1f00 	ldrex	r1, [r2]
   22ca2:	f021 0001 	bic.w	r0, r1, #1
   22ca6:	e842 0500 	strex	r5, r0, [r2]
   22caa:	2d00      	cmp	r5, #0
   22cac:	d1f7      	bne.n	22c9e <rtc_nrf_isr+0x36>
   22cae:	f3bf 8f5b 	dmb	ish
   22cb2:	4a1d      	ldr	r2, [pc, #116]	; (22d28 <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   22cb4:	b909      	cbnz	r1, 22cba <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   22cb6:	6811      	ldr	r1, [r2, #0]
		if (result) {
   22cb8:	b1d9      	cbz	r1, 22cf2 <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   22cba:	2500      	movs	r5, #0
   22cbc:	6015      	str	r5, [r2, #0]
   22cbe:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   22cc0:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   22cc4:	f7ff fec2 	bl	22a4c <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   22cc8:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   22ccc:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   22cce:	4b17      	ldr	r3, [pc, #92]	; (22d2c <rtc_nrf_isr+0xc4>)
   22cd0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   22cd4:	4549      	cmp	r1, r9
   22cd6:	bf08      	it	eq
   22cd8:	4540      	cmpeq	r0, r8
   22cda:	d20f      	bcs.n	22cfc <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   22cdc:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   22cde:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   22ce2:	b141      	cbz	r1, 22cf6 <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   22ce4:	f8cd a000 	str.w	sl, [sp]
   22ce8:	4642      	mov	r2, r8
   22cea:	464b      	mov	r3, r9
   22cec:	2000      	movs	r0, #0
   22cee:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   22cf0:	e001      	b.n	22cf6 <rtc_nrf_isr+0x8e>
   22cf2:	f383 8810 	msr	PRIMASK, r3
}
   22cf6:	b002      	add	sp, #8
   22cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22cfc:	f04f 36ff 	mov.w	r6, #4294967295
   22d00:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   22d04:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   22d08:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   22d0c:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   22d0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   22d12:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   22d16:	e7e2      	b.n	22cde <rtc_nrf_isr+0x76>
   22d18:	40011000 	.word	0x40011000
   22d1c:	40011104 	.word	0x40011104
   22d20:	20002ed8 	.word	0x20002ed8
   22d24:	20002ed0 	.word	0x20002ed0
   22d28:	40011140 	.word	0x40011140
   22d2c:	20001ea8 	.word	0x20001ea8

00022d30 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22d30:	4b14      	ldr	r3, [pc, #80]	; (22d84 <sys_clock_set_timeout+0x54>)
{
   22d32:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   22d34:	f1b0 3fff 	cmp.w	r0, #4294967295
   22d38:	bf08      	it	eq
   22d3a:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22d3c:	1e44      	subs	r4, r0, #1
   22d3e:	2c00      	cmp	r4, #0
   22d40:	dd1e      	ble.n	22d80 <sys_clock_set_timeout+0x50>
   22d42:	429c      	cmp	r4, r3
   22d44:	bfa8      	it	ge
   22d46:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22d48:	f7ff fe80 	bl	22a4c <z_nrf_rtc_timer_read>
   22d4c:	4b0e      	ldr	r3, [pc, #56]	; (22d88 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22d4e:	490f      	ldr	r1, [pc, #60]	; (22d8c <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   22d50:	e9d3 2300 	ldrd	r2, r3, [r3]
   22d54:	1a80      	subs	r0, r0, r2
		ticks = 0;
   22d56:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   22d5a:	bf28      	it	cs
   22d5c:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   22d5e:	3001      	adds	r0, #1
   22d60:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   22d62:	4808      	ldr	r0, [pc, #32]	; (22d84 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22d64:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   22d66:	4284      	cmp	r4, r0
   22d68:	bf28      	it	cs
   22d6a:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   22d6c:	1912      	adds	r2, r2, r4
   22d6e:	f04f 0000 	mov.w	r0, #0
   22d72:	9001      	str	r0, [sp, #4]
   22d74:	f143 0300 	adc.w	r3, r3, #0
   22d78:	f7ff fe8a 	bl	22a90 <compare_set>
}
   22d7c:	b002      	add	sp, #8
   22d7e:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   22d80:	2400      	movs	r4, #0
   22d82:	e7e1      	b.n	22d48 <sys_clock_set_timeout+0x18>
   22d84:	007fffff 	.word	0x007fffff
   22d88:	20001eb8 	.word	0x20001eb8
   22d8c:	00022929 	.word	0x00022929

00022d90 <sys_clock_elapsed>:
{
   22d90:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   22d92:	f7ff fe5b 	bl	22a4c <z_nrf_rtc_timer_read>
   22d96:	4b02      	ldr	r3, [pc, #8]	; (22da0 <sys_clock_elapsed+0x10>)
   22d98:	681b      	ldr	r3, [r3, #0]
}
   22d9a:	1ac0      	subs	r0, r0, r3
   22d9c:	bd08      	pop	{r3, pc}
   22d9e:	bf00      	nop
   22da0:	20001eb8 	.word	0x20001eb8

00022da4 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   22da4:	4602      	mov	r2, r0
   22da6:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   22da8:	4801      	ldr	r0, [pc, #4]	; (22db0 <multithreading_lock_acquire+0xc>)
   22daa:	f002 bcf7 	b.w	2579c <z_impl_k_mutex_lock>
   22dae:	bf00      	nop
   22db0:	20000898 	.word	0x20000898

00022db4 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   22db4:	4801      	ldr	r0, [pc, #4]	; (22dbc <multithreading_lock_release+0x8>)
   22db6:	f002 bdf1 	b.w	2599c <z_impl_k_mutex_unlock>
   22dba:	bf00      	nop
   22dbc:	20000898 	.word	0x20000898

00022dc0 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   22dc0:	b508      	push	{r3, lr}
	z_impl_log_panic();
   22dc2:	f7ef fe47 	bl	12a54 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   22dc6:	4908      	ldr	r1, [pc, #32]	; (22de8 <k_sys_fatal_error_handler+0x28>)
   22dc8:	680b      	ldr	r3, [r1, #0]
   22dca:	075b      	lsls	r3, r3, #29
   22dcc:	d008      	beq.n	22de0 <k_sys_fatal_error_handler+0x20>
   22dce:	4b07      	ldr	r3, [pc, #28]	; (22dec <k_sys_fatal_error_handler+0x2c>)
   22dd0:	4807      	ldr	r0, [pc, #28]	; (22df0 <k_sys_fatal_error_handler+0x30>)
   22dd2:	1ac9      	subs	r1, r1, r3
   22dd4:	0889      	lsrs	r1, r1, #2
   22dd6:	0189      	lsls	r1, r1, #6
   22dd8:	f041 0101 	orr.w	r1, r1, #1
   22ddc:	f009 ff7f 	bl	2ccde <log_0>
		sys_arch_reboot(0);
   22de0:	2000      	movs	r0, #0
   22de2:	f7f5 f87d 	bl	17ee0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   22de6:	bf00      	nop
   22de8:	200007d4 	.word	0x200007d4
   22dec:	200007a8 	.word	0x200007a8
   22df0:	00037212 	.word	0x00037212

00022df4 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   22df4:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   22df6:	4b0d      	ldr	r3, [pc, #52]	; (22e2c <sdc_assertion_handler+0x38>)
   22df8:	681a      	ldr	r2, [r3, #0]
   22dfa:	0752      	lsls	r2, r2, #29
{
   22dfc:	460d      	mov	r5, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   22dfe:	d00d      	beq.n	22e1c <sdc_assertion_handler+0x28>
   22e00:	4c0b      	ldr	r4, [pc, #44]	; (22e30 <sdc_assertion_handler+0x3c>)
   22e02:	1b1c      	subs	r4, r3, r4
   22e04:	08a4      	lsrs	r4, r4, #2
   22e06:	f7ef fc8d 	bl	12724 <z_log_strdup>
   22e0a:	01a4      	lsls	r4, r4, #6
   22e0c:	f044 0401 	orr.w	r4, r4, #1
   22e10:	4601      	mov	r1, r0
   22e12:	4623      	mov	r3, r4
   22e14:	4807      	ldr	r0, [pc, #28]	; (22e34 <sdc_assertion_handler+0x40>)
   22e16:	462a      	mov	r2, r5
   22e18:	f009 ff82 	bl	2cd20 <log_2>
	k_oops();
   22e1c:	4040      	eors	r0, r0
   22e1e:	f380 8811 	msr	BASEPRI, r0
   22e22:	f04f 0003 	mov.w	r0, #3
   22e26:	df02      	svc	2
}
   22e28:	bd38      	pop	{r3, r4, r5, pc}
   22e2a:	bf00      	nop
   22e2c:	200007f8 	.word	0x200007f8
   22e30:	200007a8 	.word	0x200007a8
   22e34:	0003722f 	.word	0x0003722f

00022e38 <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   22e38:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   22e3a:	4804      	ldr	r0, [pc, #16]	; (22e4c <hci_driver_init+0x14>)
   22e3c:	f7f6 fdd0 	bl	199e0 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   22e40:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   22e44:	4802      	ldr	r0, [pc, #8]	; (22e50 <hci_driver_init+0x18>)
   22e46:	f7e1 bfef 	b.w	4e28 <sdc_init>
   22e4a:	bf00      	nop
   22e4c:	00031eb4 	.word	0x00031eb4
   22e50:	00022df5 	.word	0x00022df5

00022e54 <rand_prio_low_vector_get_blocking>:
{
   22e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   22e56:	4b16      	ldr	r3, [pc, #88]	; (22eb0 <rand_prio_low_vector_get_blocking+0x5c>)
{
   22e58:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   22e5a:	681e      	ldr	r6, [r3, #0]
   22e5c:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   22e5e:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   22e60:	683b      	ldr	r3, [r7, #0]
   22e62:	b963      	cbnz	r3, 22e7e <rand_prio_low_vector_get_blocking+0x2a>
   22e64:	4913      	ldr	r1, [pc, #76]	; (22eb4 <rand_prio_low_vector_get_blocking+0x60>)
   22e66:	4a14      	ldr	r2, [pc, #80]	; (22eb8 <rand_prio_low_vector_get_blocking+0x64>)
   22e68:	4814      	ldr	r0, [pc, #80]	; (22ebc <rand_prio_low_vector_get_blocking+0x68>)
   22e6a:	234b      	movs	r3, #75	; 0x4b
   22e6c:	f009 fb95 	bl	2c59a <printk>
   22e70:	4813      	ldr	r0, [pc, #76]	; (22ec0 <rand_prio_low_vector_get_blocking+0x6c>)
   22e72:	f009 fb92 	bl	2c59a <printk>
   22e76:	4810      	ldr	r0, [pc, #64]	; (22eb8 <rand_prio_low_vector_get_blocking+0x64>)
   22e78:	214b      	movs	r1, #75	; 0x4b
   22e7a:	f009 fdcf 	bl	2ca1c <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   22e7e:	683b      	ldr	r3, [r7, #0]
   22e80:	462a      	mov	r2, r5
   22e82:	4621      	mov	r1, r4
   22e84:	4630      	mov	r0, r6
   22e86:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   22e88:	b180      	cbz	r0, 22eac <rand_prio_low_vector_get_blocking+0x58>
   22e8a:	490e      	ldr	r1, [pc, #56]	; (22ec4 <rand_prio_low_vector_get_blocking+0x70>)
   22e8c:	4a0e      	ldr	r2, [pc, #56]	; (22ec8 <rand_prio_low_vector_get_blocking+0x74>)
   22e8e:	480b      	ldr	r0, [pc, #44]	; (22ebc <rand_prio_low_vector_get_blocking+0x68>)
   22e90:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   22e94:	f009 fb81 	bl	2c59a <printk>
   22e98:	480c      	ldr	r0, [pc, #48]	; (22ecc <rand_prio_low_vector_get_blocking+0x78>)
   22e9a:	f009 fb7e 	bl	2c59a <printk>
}
   22e9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   22ea2:	4809      	ldr	r0, [pc, #36]	; (22ec8 <rand_prio_low_vector_get_blocking+0x74>)
   22ea4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   22ea8:	f009 bdb8 	b.w	2ca1c <assert_post_action>
}
   22eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22eae:	bf00      	nop
   22eb0:	20002edc 	.word	0x20002edc
   22eb4:	00037281 	.word	0x00037281
   22eb8:	00037254 	.word	0x00037254
   22ebc:	00032486 	.word	0x00032486
   22ec0:	000372a1 	.word	0x000372a1
   22ec4:	000327b2 	.word	0x000327b2
   22ec8:	000372c7 	.word	0x000372c7
   22ecc:	00037300 	.word	0x00037300

00022ed0 <rand_prio_high_vector_get>:
{
   22ed0:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   22ed2:	4b11      	ldr	r3, [pc, #68]	; (22f18 <rand_prio_high_vector_get+0x48>)
{
   22ed4:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   22ed6:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   22ed8:	6883      	ldr	r3, [r0, #8]
   22eda:	685d      	ldr	r5, [r3, #4]
   22edc:	460a      	mov	r2, r1
   22ede:	b1bd      	cbz	r5, 22f10 <rand_prio_high_vector_get+0x40>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   22ee0:	4621      	mov	r1, r4
   22ee2:	2300      	movs	r3, #0
   22ee4:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   22ee6:	1e04      	subs	r4, r0, #0
   22ee8:	da0e      	bge.n	22f08 <rand_prio_high_vector_get+0x38>
   22eea:	490c      	ldr	r1, [pc, #48]	; (22f1c <rand_prio_high_vector_get+0x4c>)
   22eec:	4a0c      	ldr	r2, [pc, #48]	; (22f20 <rand_prio_high_vector_get+0x50>)
   22eee:	480d      	ldr	r0, [pc, #52]	; (22f24 <rand_prio_high_vector_get+0x54>)
   22ef0:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   22ef4:	f009 fb51 	bl	2c59a <printk>
   22ef8:	480b      	ldr	r0, [pc, #44]	; (22f28 <rand_prio_high_vector_get+0x58>)
   22efa:	f009 fb4e 	bl	2c59a <printk>
   22efe:	4808      	ldr	r0, [pc, #32]	; (22f20 <rand_prio_high_vector_get+0x50>)
   22f00:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   22f04:	f009 fd8a 	bl	2ca1c <assert_post_action>
	return ret >= 0 ? ret : 0;
   22f08:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   22f0c:	b2c0      	uxtb	r0, r0
   22f0e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   22f10:	f06f 0485 	mvn.w	r4, #133	; 0x85
   22f14:	e7e9      	b.n	22eea <rand_prio_high_vector_get+0x1a>
   22f16:	bf00      	nop
   22f18:	20002edc 	.word	0x20002edc
   22f1c:	0003733a 	.word	0x0003733a
   22f20:	000372c7 	.word	0x000372c7
   22f24:	00032486 	.word	0x00032486
   22f28:	00037343 	.word	0x00037343

00022f2c <hci_driver_open>:
{
   22f2c:	b570      	push	{r4, r5, r6, lr}
   22f2e:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22f30:	2200      	movs	r2, #0
   22f32:	2300      	movs	r3, #0
   22f34:	e9cd 2306 	strd	r2, r3, [sp, #24]
   22f38:	2300      	movs	r3, #0
   22f3a:	f06f 0209 	mvn.w	r2, #9
   22f3e:	e9cd 2303 	strd	r2, r3, [sp, #12]
   22f42:	e9cd 3301 	strd	r3, r3, [sp, #4]
   22f46:	9300      	str	r3, [sp, #0]
   22f48:	4962      	ldr	r1, [pc, #392]	; (230d4 <hci_driver_open+0x1a8>)
   22f4a:	4b63      	ldr	r3, [pc, #396]	; (230d8 <hci_driver_open+0x1ac>)
   22f4c:	4863      	ldr	r0, [pc, #396]	; (230dc <hci_driver_open+0x1b0>)
   22f4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22f52:	f002 f953 	bl	251fc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   22f56:	4962      	ldr	r1, [pc, #392]	; (230e0 <hci_driver_open+0x1b4>)
   22f58:	4860      	ldr	r0, [pc, #384]	; (230dc <hci_driver_open+0x1b0>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   22f5a:	4c62      	ldr	r4, [pc, #392]	; (230e4 <hci_driver_open+0x1b8>)
   22f5c:	f001 ff5c 	bl	24e18 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   22f60:	a80b      	add	r0, sp, #44	; 0x2c
   22f62:	f7e1 fecd 	bl	4d00 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   22f66:	6820      	ldr	r0, [r4, #0]
   22f68:	f000 0007 	and.w	r0, r0, #7
   22f6c:	2802      	cmp	r0, #2
   22f6e:	d90a      	bls.n	22f86 <hci_driver_open+0x5a>
   22f70:	4b5d      	ldr	r3, [pc, #372]	; (230e8 <hci_driver_open+0x1bc>)
   22f72:	485e      	ldr	r0, [pc, #376]	; (230ec <hci_driver_open+0x1c0>)
   22f74:	1ae3      	subs	r3, r4, r3
   22f76:	089b      	lsrs	r3, r3, #2
   22f78:	019b      	lsls	r3, r3, #6
   22f7a:	f043 0303 	orr.w	r3, r3, #3
   22f7e:	2214      	movs	r2, #20
   22f80:	a90b      	add	r1, sp, #44	; 0x2c
   22f82:	f009 ff0d 	bl	2cda0 <log_hexdump>
			err = sdc_support_scan();
   22f86:	f7e1 ffff 	bl	4f88 <sdc_support_scan>
			if (err) {
   22f8a:	b118      	cbz	r0, 22f94 <hci_driver_open+0x68>
				return -ENOTSUP;
   22f8c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   22f90:	b010      	add	sp, #64	; 0x40
   22f92:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_master();
   22f94:	f7e1 ffe8 	bl	4f68 <sdc_support_master>
		if (err) {
   22f98:	2800      	cmp	r0, #0
   22f9a:	d1f7      	bne.n	22f8c <hci_driver_open+0x60>
		err = sdc_support_dle();
   22f9c:	f7e1 ffc4 	bl	4f28 <sdc_support_dle>
		if (err) {
   22fa0:	2800      	cmp	r0, #0
   22fa2:	d1f3      	bne.n	22f8c <hci_driver_open+0x60>
		err = sdc_support_le_2m_phy();
   22fa4:	f7e1 ffd0 	bl	4f48 <sdc_support_le_2m_phy>
		if (err) {
   22fa8:	4606      	mov	r6, r0
   22faa:	2800      	cmp	r0, #0
   22fac:	d1ee      	bne.n	22f8c <hci_driver_open+0x60>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fae:	ad08      	add	r5, sp, #32
	cfg.master_count.count = SDC_MASTER_COUNT;
   22fb0:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fb2:	462a      	mov	r2, r5
	cfg.master_count.count = SDC_MASTER_COUNT;
   22fb4:	f88d 1020 	strb.w	r1, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fb8:	f7e1 feb0 	bl	4d1c <sdc_cfg_set>
	if (required_memory < 0) {
   22fbc:	2800      	cmp	r0, #0
   22fbe:	dbe7      	blt.n	22f90 <hci_driver_open+0x64>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fc0:	462a      	mov	r2, r5
   22fc2:	2102      	movs	r1, #2
   22fc4:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   22fc6:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fca:	f7e1 fea7 	bl	4d1c <sdc_cfg_set>
	if (required_memory < 0) {
   22fce:	2800      	cmp	r0, #0
   22fd0:	dbde      	blt.n	22f90 <hci_driver_open+0x64>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   22fd2:	4b47      	ldr	r3, [pc, #284]	; (230f0 <hci_driver_open+0x1c4>)
   22fd4:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fd6:	462a      	mov	r2, r5
   22fd8:	2103      	movs	r1, #3
   22fda:	4630      	mov	r0, r6
   22fdc:	f7e1 fe9e 	bl	4d1c <sdc_cfg_set>
	if (required_memory < 0) {
   22fe0:	2800      	cmp	r0, #0
   22fe2:	dbd5      	blt.n	22f90 <hci_driver_open+0x64>
	cfg.event_length.event_length_us =
   22fe4:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22fe8:	462a      	mov	r2, r5
   22fea:	2104      	movs	r1, #4
   22fec:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   22fee:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22ff0:	f7e1 fe94 	bl	4d1c <sdc_cfg_set>
	if (required_memory < 0) {
   22ff4:	2800      	cmp	r0, #0
   22ff6:	dbcb      	blt.n	22f90 <hci_driver_open+0x64>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   22ff8:	462a      	mov	r2, r5
   22ffa:	2105      	movs	r1, #5
   22ffc:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   22ffe:	f88d 6020 	strb.w	r6, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23002:	f7e1 fe8b 	bl	4d1c <sdc_cfg_set>
	if (required_memory < 0) {
   23006:	2800      	cmp	r0, #0
   23008:	dbc2      	blt.n	22f90 <hci_driver_open+0x64>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   2300a:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   2300c:	462a      	mov	r2, r5
   2300e:	2106      	movs	r1, #6
   23010:	4630      	mov	r0, r6
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   23012:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   23016:	f7e1 fe81 	bl	4d1c <sdc_cfg_set>
		if (required_memory < 0) {
   2301a:	2800      	cmp	r0, #0
   2301c:	dbb8      	blt.n	22f90 <hci_driver_open+0x64>
	if (required_memory > sizeof(sdc_mempool)) {
   2301e:	f240 4186 	movw	r1, #1158	; 0x486
   23022:	4288      	cmp	r0, r1
   23024:	dd15      	ble.n	23052 <hci_driver_open+0x126>
		BT_ERR("Allocated memory too low: %u < %u",
   23026:	6823      	ldr	r3, [r4, #0]
   23028:	075d      	lsls	r5, r3, #29
   2302a:	d009      	beq.n	23040 <hci_driver_open+0x114>
   2302c:	4b2e      	ldr	r3, [pc, #184]	; (230e8 <hci_driver_open+0x1bc>)
   2302e:	1ae3      	subs	r3, r4, r3
   23030:	089b      	lsrs	r3, r3, #2
   23032:	019b      	lsls	r3, r3, #6
   23034:	4602      	mov	r2, r0
   23036:	f043 0301 	orr.w	r3, r3, #1
   2303a:	482e      	ldr	r0, [pc, #184]	; (230f4 <hci_driver_open+0x1c8>)
   2303c:	f009 fe70 	bl	2cd20 <log_2>
		k_panic();
   23040:	4040      	eors	r0, r0
   23042:	f380 8811 	msr	BASEPRI, r0
   23046:	f04f 0004 	mov.w	r0, #4
   2304a:	df02      	svc	2
		return -ENOMEM;
   2304c:	f06f 000b 	mvn.w	r0, #11
   23050:	e79e      	b.n	22f90 <hci_driver_open+0x64>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   23052:	4829      	ldr	r0, [pc, #164]	; (230f8 <hci_driver_open+0x1cc>)
   23054:	f001 fb14 	bl	24680 <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   23058:	4b28      	ldr	r3, [pc, #160]	; (230fc <hci_driver_open+0x1d0>)
   2305a:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   2305c:	b970      	cbnz	r0, 2307c <hci_driver_open+0x150>
		BT_ERR("An entropy source is required");
   2305e:	6823      	ldr	r3, [r4, #0]
   23060:	075a      	lsls	r2, r3, #29
   23062:	d008      	beq.n	23076 <hci_driver_open+0x14a>
   23064:	4920      	ldr	r1, [pc, #128]	; (230e8 <hci_driver_open+0x1bc>)
   23066:	4826      	ldr	r0, [pc, #152]	; (23100 <hci_driver_open+0x1d4>)
   23068:	1a61      	subs	r1, r4, r1
   2306a:	0889      	lsrs	r1, r1, #2
   2306c:	0189      	lsls	r1, r1, #6
   2306e:	f041 0101 	orr.w	r1, r1, #1
   23072:	f009 fe34 	bl	2ccde <log_0>
		return -ENODEV;
   23076:	f06f 0012 	mvn.w	r0, #18
   2307a:	e789      	b.n	22f90 <hci_driver_open+0x64>
	sdc_rand_source_t rand_functions = {
   2307c:	4b21      	ldr	r3, [pc, #132]	; (23104 <hci_driver_open+0x1d8>)
   2307e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   23082:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   23086:	4628      	mov	r0, r5
   23088:	f7e1 ffe0 	bl	504c <sdc_rand_source_register>
	if (err) {
   2308c:	4601      	mov	r1, r0
   2308e:	b170      	cbz	r0, 230ae <hci_driver_open+0x182>
		BT_ERR("Failed to register rand source (%d)", err);
   23090:	6823      	ldr	r3, [r4, #0]
   23092:	075b      	lsls	r3, r3, #29
   23094:	d008      	beq.n	230a8 <hci_driver_open+0x17c>
   23096:	4a14      	ldr	r2, [pc, #80]	; (230e8 <hci_driver_open+0x1bc>)
   23098:	481b      	ldr	r0, [pc, #108]	; (23108 <hci_driver_open+0x1dc>)
   2309a:	1aa2      	subs	r2, r4, r2
   2309c:	0892      	lsrs	r2, r2, #2
   2309e:	0192      	lsls	r2, r2, #6
   230a0:	f042 0201 	orr.w	r2, r2, #1
   230a4:	f009 fe28 	bl	2ccf8 <log_1>
		return -EINVAL;
   230a8:	f06f 0015 	mvn.w	r0, #21
   230ac:	e770      	b.n	22f90 <hci_driver_open+0x64>
	err = MULTITHREADING_LOCK_ACQUIRE();
   230ae:	f04f 30ff 	mov.w	r0, #4294967295
   230b2:	f04f 31ff 	mov.w	r1, #4294967295
   230b6:	f7ff fe75 	bl	22da4 <multithreading_lock_acquire>
	if (!err) {
   230ba:	4604      	mov	r4, r0
   230bc:	b930      	cbnz	r0, 230cc <hci_driver_open+0x1a0>
		err = sdc_enable(host_signal, sdc_mempool);
   230be:	4913      	ldr	r1, [pc, #76]	; (2310c <hci_driver_open+0x1e0>)
   230c0:	4813      	ldr	r0, [pc, #76]	; (23110 <hci_driver_open+0x1e4>)
   230c2:	f7e1 fe89 	bl	4dd8 <sdc_enable>
   230c6:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   230c8:	f7ff fe74 	bl	22db4 <multithreading_lock_release>
	if (err < 0) {
   230cc:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   230d0:	e75e      	b.n	22f90 <hci_driver_open+0x64>
   230d2:	bf00      	nop
   230d4:	200058e0 	.word	0x200058e0
   230d8:	00023115 	.word	0x00023115
   230dc:	20001ec0 	.word	0x20001ec0
   230e0:	00037387 	.word	0x00037387
   230e4:	200007f8 	.word	0x200007f8
   230e8:	200007a8 	.word	0x200007a8
   230ec:	0003738e 	.word	0x0003738e
   230f0:	02031b1b 	.word	0x02031b1b
   230f4:	000373b5 	.word	0x000373b5
   230f8:	000371aa 	.word	0x000371aa
   230fc:	20002edc 	.word	0x20002edc
   23100:	000373d7 	.word	0x000373d7
   23104:	00030dd0 	.word	0x00030dd0
   23108:	000373f5 	.word	0x000373f5
   2310c:	20003cb6 	.word	0x20003cb6
   23110:	00023241 	.word	0x00023241

00023114 <recv_thread>:
{
   23114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   23118:	4b43      	ldr	r3, [pc, #268]	; (23228 <recv_thread+0x114>)
   2311a:	4e44      	ldr	r6, [pc, #272]	; (2322c <recv_thread+0x118>)
	return z_impl_k_sem_take(sem, timeout);
   2311c:	f8df 911c 	ldr.w	r9, [pc, #284]	; 2323c <recv_thread+0x128>
		errcode = hci_internal_evt_get(p_hci_buffer);
   23120:	4d43      	ldr	r5, [pc, #268]	; (23230 <recv_thread+0x11c>)
   23122:	1b9e      	subs	r6, r3, r6
	bool received_data = false;
   23124:	2700      	movs	r7, #0
   23126:	08b6      	lsrs	r6, r6, #2
	bool received_evt = false;
   23128:	463c      	mov	r4, r7
   2312a:	4698      	mov	r8, r3
		if (!received_evt && !received_data) {
   2312c:	b93c      	cbnz	r4, 2313e <recv_thread+0x2a>
   2312e:	b937      	cbnz	r7, 2313e <recv_thread+0x2a>
   23130:	f04f 32ff 	mov.w	r2, #4294967295
   23134:	f04f 33ff 	mov.w	r3, #4294967295
   23138:	4648      	mov	r0, r9
   2313a:	f002 fea1 	bl	25e80 <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2313e:	f04f 30ff 	mov.w	r0, #4294967295
   23142:	f04f 31ff 	mov.w	r1, #4294967295
   23146:	f7ff fe2d 	bl	22da4 <multithreading_lock_acquire>
	if (!errcode) {
   2314a:	b160      	cbz	r0, 23166 <recv_thread+0x52>
		return false;
   2314c:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   2314e:	f04f 30ff 	mov.w	r0, #4294967295
   23152:	f04f 31ff 	mov.w	r1, #4294967295
   23156:	f7ff fe25 	bl	22da4 <multithreading_lock_acquire>
	if (!errcode) {
   2315a:	2800      	cmp	r0, #0
   2315c:	d03c      	beq.n	231d8 <recv_thread+0xc4>
		return false;
   2315e:	2700      	movs	r7, #0
	z_impl_k_yield();
   23160:	f004 fbb0 	bl	278c4 <z_impl_k_yield>
}
   23164:	e7e2      	b.n	2312c <recv_thread+0x18>
		errcode = hci_internal_evt_get(p_hci_buffer);
   23166:	4832      	ldr	r0, [pc, #200]	; (23230 <recv_thread+0x11c>)
   23168:	f000 fba4 	bl	238b4 <hci_internal_evt_get>
   2316c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2316e:	f7ff fe21 	bl	22db4 <multithreading_lock_release>
	if (errcode) {
   23172:	2c00      	cmp	r4, #0
   23174:	d1ea      	bne.n	2314c <recv_thread+0x38>
	switch (hdr->evt) {
   23176:	7828      	ldrb	r0, [r5, #0]
   23178:	283e      	cmp	r0, #62	; 0x3e
   2317a:	d007      	beq.n	2318c <recv_thread+0x78>
   2317c:	28ff      	cmp	r0, #255	; 0xff
   2317e:	d01e      	beq.n	231be <recv_thread+0xaa>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   23180:	f04f 32ff 	mov.w	r2, #4294967295
   23184:	f04f 33ff 	mov.w	r3, #4294967295
   23188:	2400      	movs	r4, #0
   2318a:	e005      	b.n	23198 <recv_thread+0x84>
		switch (me->subevent) {
   2318c:	78ab      	ldrb	r3, [r5, #2]
   2318e:	2b02      	cmp	r3, #2
		switch (subevent) {
   23190:	d1f6      	bne.n	23180 <recv_thread+0x6c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   23192:	2200      	movs	r2, #0
   23194:	2300      	movs	r3, #0
   23196:	2401      	movs	r4, #1
   23198:	4621      	mov	r1, r4
   2319a:	f7f5 f877 	bl	1828c <bt_buf_get_evt>
	if (!evt_buf) {
   2319e:	4607      	mov	r7, r0
   231a0:	b980      	cbnz	r0, 231c4 <recv_thread+0xb0>
		if (discardable) {
   231a2:	2c00      	cmp	r4, #0
   231a4:	d1d3      	bne.n	2314e <recv_thread+0x3a>
		BT_ERR("No event buffer available");
   231a6:	f8d8 3000 	ldr.w	r3, [r8]
   231aa:	075a      	lsls	r2, r3, #29
   231ac:	d005      	beq.n	231ba <recv_thread+0xa6>
   231ae:	01b1      	lsls	r1, r6, #6
   231b0:	4820      	ldr	r0, [pc, #128]	; (23234 <recv_thread+0x120>)
   231b2:	f041 0101 	orr.w	r1, r1, #1
   231b6:	f009 fd92 	bl	2ccde <log_0>
	return true;
   231ba:	2401      	movs	r4, #1
   231bc:	e7c7      	b.n	2314e <recv_thread+0x3a>
		switch (subevent) {
   231be:	78ab      	ldrb	r3, [r5, #2]
   231c0:	2b80      	cmp	r3, #128	; 0x80
   231c2:	e7e5      	b.n	23190 <recv_thread+0x7c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   231c4:	786a      	ldrb	r2, [r5, #1]
   231c6:	4629      	mov	r1, r5
   231c8:	3202      	adds	r2, #2
   231ca:	3008      	adds	r0, #8
   231cc:	f00c fc55 	bl	2fa7a <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   231d0:	4638      	mov	r0, r7
   231d2:	f7f6 fbcf 	bl	19974 <bt_recv>
   231d6:	e7f0      	b.n	231ba <recv_thread+0xa6>
		errcode = sdc_hci_data_get(p_hci_buffer);
   231d8:	4815      	ldr	r0, [pc, #84]	; (23230 <recv_thread+0x11c>)
   231da:	f7ea fe97 	bl	df0c <sdc_hci_data_get>
   231de:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   231e0:	f7ff fde8 	bl	22db4 <multithreading_lock_release>
	if (errcode) {
   231e4:	2f00      	cmp	r7, #0
   231e6:	d1ba      	bne.n	2315e <recv_thread+0x4a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   231e8:	f04f 32ff 	mov.w	r2, #4294967295
   231ec:	f04f 33ff 	mov.w	r3, #4294967295
   231f0:	2003      	movs	r0, #3
   231f2:	f7f5 f801 	bl	181f8 <bt_buf_get_rx>
	if (!data_buf) {
   231f6:	4607      	mov	r7, r0
   231f8:	b958      	cbnz	r0, 23212 <recv_thread+0xfe>
		BT_ERR("No data buffer available");
   231fa:	f8d8 3000 	ldr.w	r3, [r8]
   231fe:	075b      	lsls	r3, r3, #29
   23200:	d005      	beq.n	2320e <recv_thread+0xfa>
   23202:	01b1      	lsls	r1, r6, #6
   23204:	480c      	ldr	r0, [pc, #48]	; (23238 <recv_thread+0x124>)
   23206:	f041 0101 	orr.w	r1, r1, #1
   2320a:	f009 fd68 	bl	2ccde <log_0>
	return true;
   2320e:	2701      	movs	r7, #1
   23210:	e7a6      	b.n	23160 <recv_thread+0x4c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   23212:	886a      	ldrh	r2, [r5, #2]
   23214:	4629      	mov	r1, r5
   23216:	3204      	adds	r2, #4
   23218:	3008      	adds	r0, #8
   2321a:	f00c fc2e 	bl	2fa7a <net_buf_simple_add_mem>
	bt_recv(data_buf);
   2321e:	4638      	mov	r0, r7
   23220:	f7f6 fba8 	bl	19974 <bt_recv>
   23224:	e7f3      	b.n	2320e <recv_thread+0xfa>
   23226:	bf00      	nop
   23228:	200007f8 	.word	0x200007f8
   2322c:	200007a8 	.word	0x200007a8
   23230:	20003c70 	.word	0x20003c70
   23234:	00037419 	.word	0x00037419
   23238:	00037433 	.word	0x00037433
   2323c:	20000948 	.word	0x20000948

00023240 <host_signal>:
	z_impl_k_sem_give(sem);
   23240:	4801      	ldr	r0, [pc, #4]	; (23248 <host_signal+0x8>)
   23242:	f002 bdd9 	b.w	25df8 <z_impl_k_sem_give>
   23246:	bf00      	nop
   23248:	20000948 	.word	0x20000948

0002324c <hci_driver_send>:
{
   2324c:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   2324e:	8983      	ldrh	r3, [r0, #12]
{
   23250:	4605      	mov	r5, r0
	if (!buf->len) {
   23252:	b383      	cbz	r3, 232b6 <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   23254:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   23256:	b1ab      	cbz	r3, 23284 <hci_driver_send+0x38>
   23258:	2b02      	cmp	r3, #2
   2325a:	d12c      	bne.n	232b6 <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   2325c:	f04f 30ff 	mov.w	r0, #4294967295
   23260:	f04f 31ff 	mov.w	r1, #4294967295
   23264:	f7ff fd9e 	bl	22da4 <multithreading_lock_acquire>
	if (!errcode) {
   23268:	4604      	mov	r4, r0
   2326a:	b948      	cbnz	r0, 23280 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   2326c:	68a8      	ldr	r0, [r5, #8]
   2326e:	f7ea fe5a 	bl	df26 <sdc_hci_data_put>
   23272:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   23274:	f7ff fd9e 	bl	22db4 <multithreading_lock_release>
		if (errcode) {
   23278:	b1c4      	cbz	r4, 232ac <hci_driver_send+0x60>
   2327a:	4810      	ldr	r0, [pc, #64]	; (232bc <hci_driver_send+0x70>)
   2327c:	f002 fdbc 	bl	25df8 <z_impl_k_sem_give>
}
   23280:	4620      	mov	r0, r4
   23282:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   23284:	f04f 30ff 	mov.w	r0, #4294967295
   23288:	f04f 31ff 	mov.w	r1, #4294967295
   2328c:	f7ff fd8a 	bl	22da4 <multithreading_lock_acquire>
	if (!errcode) {
   23290:	4604      	mov	r4, r0
   23292:	2800      	cmp	r0, #0
   23294:	d1f4      	bne.n	23280 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   23296:	68a8      	ldr	r0, [r5, #8]
   23298:	f000 f840 	bl	2331c <hci_internal_cmd_put>
   2329c:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   2329e:	f7ff fd89 	bl	22db4 <multithreading_lock_release>
	if (errcode) {
   232a2:	2c00      	cmp	r4, #0
   232a4:	d1ec      	bne.n	23280 <hci_driver_send+0x34>
   232a6:	4805      	ldr	r0, [pc, #20]	; (232bc <hci_driver_send+0x70>)
   232a8:	f002 fda6 	bl	25df8 <z_impl_k_sem_give>
		net_buf_unref(buf);
   232ac:	4628      	mov	r0, r5
   232ae:	f7fd ff33 	bl	21118 <net_buf_unref>
   232b2:	2400      	movs	r4, #0
   232b4:	e7e4      	b.n	23280 <hci_driver_send+0x34>
	switch (type) {
   232b6:	f06f 0415 	mvn.w	r4, #21
   232ba:	e7e1      	b.n	23280 <hci_driver_send+0x34>
   232bc:	20000948 	.word	0x20000948

000232c0 <rand_prio_low_vector_get>:
{
   232c0:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   232c2:	4b11      	ldr	r3, [pc, #68]	; (23308 <rand_prio_low_vector_get+0x48>)
{
   232c4:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   232c6:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   232c8:	6883      	ldr	r3, [r0, #8]
   232ca:	685d      	ldr	r5, [r3, #4]
   232cc:	460a      	mov	r2, r1
   232ce:	b1bd      	cbz	r5, 23300 <rand_prio_low_vector_get+0x40>
	return api->get_entropy_isr(dev, buffer, length, flags);
   232d0:	4621      	mov	r1, r4
   232d2:	2300      	movs	r3, #0
   232d4:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   232d6:	1e04      	subs	r4, r0, #0
   232d8:	da0e      	bge.n	232f8 <rand_prio_low_vector_get+0x38>
   232da:	490c      	ldr	r1, [pc, #48]	; (2330c <rand_prio_low_vector_get+0x4c>)
   232dc:	4a0c      	ldr	r2, [pc, #48]	; (23310 <rand_prio_low_vector_get+0x50>)
   232de:	480d      	ldr	r0, [pc, #52]	; (23314 <rand_prio_low_vector_get+0x54>)
   232e0:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   232e4:	f009 f959 	bl	2c59a <printk>
   232e8:	480b      	ldr	r0, [pc, #44]	; (23318 <rand_prio_low_vector_get+0x58>)
   232ea:	f009 f956 	bl	2c59a <printk>
   232ee:	4808      	ldr	r0, [pc, #32]	; (23310 <rand_prio_low_vector_get+0x50>)
   232f0:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   232f4:	f009 fb92 	bl	2ca1c <assert_post_action>
	return ret >= 0 ? ret : 0;
   232f8:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   232fc:	b2c0      	uxtb	r0, r0
   232fe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   23300:	f06f 0485 	mvn.w	r4, #133	; 0x85
   23304:	e7e9      	b.n	232da <rand_prio_low_vector_get+0x1a>
   23306:	bf00      	nop
   23308:	20002edc 	.word	0x20002edc
   2330c:	0003733a 	.word	0x0003733a
   23310:	000372c7 	.word	0x000372c7
   23314:	00032486 	.word	0x00032486
   23318:	0003744c 	.word	0x0003744c

0002331c <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   2331c:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   2331e:	4cd7      	ldr	r4, [pc, #860]	; (2367c <hci_internal_cmd_put+0x360>)
   23320:	7823      	ldrb	r3, [r4, #0]
   23322:	2b00      	cmp	r3, #0
   23324:	f040 82b0 	bne.w	23888 <hci_internal_cmd_put+0x56c>
	return ((uint16_t)src[1] << 8) | src[0];
   23328:	7843      	ldrb	r3, [r0, #1]
   2332a:	7805      	ldrb	r5, [r0, #0]
   2332c:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   23330:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   23334:	b22e      	sxth	r6, r5
   23336:	ea4f 2395 	mov.w	r3, r5, lsr #10
   2333a:	d209      	bcs.n	23350 <hci_internal_cmd_put+0x34>
   2333c:	b15b      	cbz	r3, 23356 <hci_internal_cmd_put+0x3a>
   2333e:	3b01      	subs	r3, #1
   23340:	2b07      	cmp	r3, #7
   23342:	d808      	bhi.n	23356 <hci_internal_cmd_put+0x3a>
   23344:	e8df f003 	tbb	[pc, r3]
   23348:	5c28070a 	.word	0x5c28070a
   2334c:	d0070707 	.word	0xd0070707
   23350:	2b3f      	cmp	r3, #63	; 0x3f
   23352:	f000 81fc 	beq.w	2374e <hci_internal_cmd_put+0x432>
   23356:	2104      	movs	r1, #4
   23358:	2001      	movs	r0, #1
   2335a:	e233      	b.n	237c4 <hci_internal_cmd_put+0x4a8>
	switch (opcode)	{
   2335c:	f240 4306 	movw	r3, #1030	; 0x406
   23360:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   23362:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   23366:	d005      	beq.n	23374 <hci_internal_cmd_put+0x58>
   23368:	f240 431d 	movw	r3, #1053	; 0x41d
   2336c:	429e      	cmp	r6, r3
   2336e:	d010      	beq.n	23392 <hci_internal_cmd_put+0x76>
	switch (opcode)	{
   23370:	2001      	movs	r0, #1
   23372:	e001      	b.n	23378 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   23374:	f7ea ff21 	bl	e1ba <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   23378:	230f      	movs	r3, #15
   2337a:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   2337c:	2304      	movs	r3, #4
   2337e:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   23380:	2301      	movs	r3, #1
	evt_data->status = status_code;
   23382:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   23384:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   23386:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   2338a:	2301      	movs	r3, #1
   2338c:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   2338e:	2000      	movs	r0, #0
}
   23390:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   23392:	f7ea ff14 	bl	e1be <sdc_hci_cmd_lc_read_remote_version_information>
   23396:	e7ef      	b.n	23378 <hci_internal_cmd_put+0x5c>
	switch (opcode)	{
   23398:	f640 4363 	movw	r3, #3171	; 0xc63
   2339c:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   2339e:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   233a2:	d025      	beq.n	233f0 <hci_internal_cmd_put+0xd4>
   233a4:	dc0f      	bgt.n	233c6 <hci_internal_cmd_put+0xaa>
   233a6:	f640 4303 	movw	r3, #3075	; 0xc03
   233aa:	429e      	cmp	r6, r3
   233ac:	d018      	beq.n	233e0 <hci_internal_cmd_put+0xc4>
   233ae:	f640 432d 	movw	r3, #3117	; 0xc2d
   233b2:	429e      	cmp	r6, r3
   233b4:	d017      	beq.n	233e6 <hci_internal_cmd_put+0xca>
   233b6:	f640 4301 	movw	r3, #3073	; 0xc01
   233ba:	429e      	cmp	r6, r3
   233bc:	d1d8      	bne.n	23370 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   233be:	f7ea fdce 	bl	df5e <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   233c2:	2104      	movs	r1, #4
   233c4:	e08d      	b.n	234e2 <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   233c6:	f640 437b 	movw	r3, #3195	; 0xc7b
   233ca:	429e      	cmp	r6, r3
   233cc:	d013      	beq.n	233f6 <hci_internal_cmd_put+0xda>
   233ce:	f640 437c 	movw	r3, #3196	; 0xc7c
   233d2:	429e      	cmp	r6, r3
   233d4:	d1cc      	bne.n	23370 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   233d6:	49aa      	ldr	r1, [pc, #680]	; (23680 <hci_internal_cmd_put+0x364>)
   233d8:	f7ea fdcb 	bl	df72 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   233dc:	2106      	movs	r1, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   233de:	e080      	b.n	234e2 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_reset();
   233e0:	f7e1 ff12 	bl	5208 <sdc_hci_cmd_cb_reset>
   233e4:	e7ed      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   233e6:	49a6      	ldr	r1, [pc, #664]	; (23680 <hci_internal_cmd_put+0x364>)
   233e8:	f7ea fdb7 	bl	df5a <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   233ec:	2107      	movs	r1, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   233ee:	e078      	b.n	234e2 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   233f0:	f7ea fdba 	bl	df68 <sdc_hci_cmd_cb_set_event_mask_page_2>
   233f4:	e7e5      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   233f6:	49a2      	ldr	r1, [pc, #648]	; (23680 <hci_internal_cmd_put+0x364>)
   233f8:	f7ea fdad 	bl	df56 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   233fc:	2108      	movs	r1, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   233fe:	e070      	b.n	234e2 <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   23400:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   23404:	3e01      	subs	r6, #1
   23406:	2e08      	cmp	r6, #8
   23408:	d8b2      	bhi.n	23370 <hci_internal_cmd_put+0x54>
   2340a:	a301      	add	r3, pc, #4	; (adr r3, 23410 <hci_internal_cmd_put+0xf4>)
   2340c:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   23410:	00023435 	.word	0x00023435
   23414:	0002343f 	.word	0x0002343f
   23418:	000234b3 	.word	0x000234b3
   2341c:	00023371 	.word	0x00023371
   23420:	00023371 	.word	0x00023371
   23424:	00023371 	.word	0x00023371
   23428:	00023371 	.word	0x00023371
   2342c:	00023371 	.word	0x00023371
   23430:	000234db 	.word	0x000234db
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   23434:	4892      	ldr	r0, [pc, #584]	; (23680 <hci_internal_cmd_put+0x364>)
   23436:	f7ea fe79 	bl	e12c <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   2343a:	210c      	movs	r1, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   2343c:	e051      	b.n	234e2 <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   2343e:	4890      	ldr	r0, [pc, #576]	; (23680 <hci_internal_cmd_put+0x364>)
   23440:	222e      	movs	r2, #46	; 0x2e
   23442:	2100      	movs	r1, #0
   23444:	f00d f8f1 	bl	3062a <memset>
	cmds->hci_disconnect = 1;
   23448:	2320      	movs	r3, #32
   2344a:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   2344c:	2380      	movs	r3, #128	; 0x80
   2344e:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   23450:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   23454:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   23456:	2304      	movs	r3, #4
   23458:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   2345a:	2328      	movs	r3, #40	; 0x28
   2345c:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   2345e:	2302      	movs	r3, #2
   23460:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   23462:	2304      	movs	r3, #4
   23464:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   23466:	2317      	movs	r3, #23
   23468:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   2346c:	f06f 0303 	mvn.w	r3, #3
   23470:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   23474:	23ff      	movs	r3, #255	; 0xff
   23476:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   2347a:	2379      	movs	r3, #121	; 0x79
   2347c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   23480:	2330      	movs	r3, #48	; 0x30
   23482:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   23486:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   2348a:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   2348e:	2379      	movs	r3, #121	; 0x79
   23490:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   23494:	f06f 0301 	mvn.w	r3, #1
   23498:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   2349c:	2301      	movs	r3, #1
   2349e:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   234a2:	2380      	movs	r3, #128	; 0x80
   234a4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   234a8:	2304      	movs	r3, #4
   234aa:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->read_supported_vs_commands = 1;
   234ae:	2144      	movs	r1, #68	; 0x44
   234b0:	e118      	b.n	236e4 <hci_internal_cmd_put+0x3c8>
	memset(features, 0, sizeof(*features));
   234b2:	4b73      	ldr	r3, [pc, #460]	; (23680 <hci_internal_cmd_put+0x364>)
   234b4:	2000      	movs	r0, #0
   234b6:	f8c4 0007 	str.w	r0, [r4, #7]
   234ba:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   234bc:	7ae3      	ldrb	r3, [r4, #11]
   234be:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   234c2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   234c6:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   234c8:	210c      	movs	r1, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   234ca:	230e      	movs	r3, #14
   234cc:	7063      	strb	r3, [r4, #1]
	evt_data->ncmd = 1;
   234ce:	2301      	movs	r3, #1
	evt_hdr->len = param_length;
   234d0:	70a1      	strb	r1, [r4, #2]
	evt_data->ncmd = 1;
   234d2:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   234d4:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   234d6:	71a0      	strb	r0, [r4, #6]
}
   234d8:	e757      	b.n	2338a <hci_internal_cmd_put+0x6e>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   234da:	4869      	ldr	r0, [pc, #420]	; (23680 <hci_internal_cmd_put+0x364>)
   234dc:	f7ea fe24 	bl	e128 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   234e0:	210a      	movs	r1, #10
	if (!command_generates_command_complete_event(opcode) ||
   234e2:	2801      	cmp	r0, #1
   234e4:	d1f1      	bne.n	234ca <hci_internal_cmd_put+0x1ae>
   234e6:	e747      	b.n	23378 <hci_internal_cmd_put+0x5c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   234e8:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   234ec:	3e01      	subs	r6, #1
   234ee:	3003      	adds	r0, #3
	switch (opcode)	{
   234f0:	2e4d      	cmp	r6, #77	; 0x4d
   234f2:	f63f af3d 	bhi.w	23370 <hci_internal_cmd_put+0x54>
   234f6:	a301      	add	r3, pc, #4	; (adr r3, 234fc <hci_internal_cmd_put+0x1e0>)
   234f8:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   234fc:	00023635 	.word	0x00023635
   23500:	0002363b 	.word	0x0002363b
   23504:	00023643 	.word	0x00023643
   23508:	00023371 	.word	0x00023371
   2350c:	00023663 	.word	0x00023663
   23510:	00023371 	.word	0x00023371
   23514:	00023371 	.word	0x00023371
   23518:	00023371 	.word	0x00023371
   2351c:	00023371 	.word	0x00023371
   23520:	00023371 	.word	0x00023371
   23524:	00023669 	.word	0x00023669
   23528:	0002366f 	.word	0x0002366f
   2352c:	00023675 	.word	0x00023675
   23530:	00023685 	.word	0x00023685
   23534:	0002368b 	.word	0x0002368b
   23538:	00023695 	.word	0x00023695
   2353c:	0002369b 	.word	0x0002369b
   23540:	000236a1 	.word	0x000236a1
   23544:	000236a7 	.word	0x000236a7
   23548:	000236ad 	.word	0x000236ad
   2354c:	000236b3 	.word	0x000236b3
   23550:	000236bd 	.word	0x000236bd
   23554:	000236c3 	.word	0x000236c3
   23558:	000236cd 	.word	0x000236cd
   2355c:	000236d5 	.word	0x000236d5
   23560:	00023371 	.word	0x00023371
   23564:	00023371 	.word	0x00023371
   23568:	000236db 	.word	0x000236db
   2356c:	00023371 	.word	0x00023371
   23570:	00023371 	.word	0x00023371
   23574:	00023371 	.word	0x00023371
   23578:	00023371 	.word	0x00023371
   2357c:	00023371 	.word	0x00023371
   23580:	000236e9 	.word	0x000236e9
   23584:	000236f1 	.word	0x000236f1
   23588:	000236f9 	.word	0x000236f9
   2358c:	00023371 	.word	0x00023371
   23590:	00023371 	.word	0x00023371
   23594:	000236ff 	.word	0x000236ff
   23598:	00023705 	.word	0x00023705
   2359c:	0002370b 	.word	0x0002370b
   235a0:	00023711 	.word	0x00023711
   235a4:	00023371 	.word	0x00023371
   235a8:	00023371 	.word	0x00023371
   235ac:	00023719 	.word	0x00023719
   235b0:	0002371f 	.word	0x0002371f
   235b4:	00023725 	.word	0x00023725
   235b8:	0002372d 	.word	0x0002372d
   235bc:	00023735 	.word	0x00023735
   235c0:	0002373b 	.word	0x0002373b
   235c4:	00023371 	.word	0x00023371
   235c8:	00023371 	.word	0x00023371
   235cc:	00023371 	.word	0x00023371
   235d0:	00023371 	.word	0x00023371
   235d4:	00023371 	.word	0x00023371
   235d8:	00023371 	.word	0x00023371
   235dc:	00023371 	.word	0x00023371
   235e0:	00023371 	.word	0x00023371
   235e4:	00023371 	.word	0x00023371
   235e8:	00023371 	.word	0x00023371
   235ec:	00023371 	.word	0x00023371
   235f0:	00023371 	.word	0x00023371
   235f4:	00023371 	.word	0x00023371
   235f8:	00023371 	.word	0x00023371
   235fc:	00023371 	.word	0x00023371
   23600:	00023371 	.word	0x00023371
   23604:	00023371 	.word	0x00023371
   23608:	00023371 	.word	0x00023371
   2360c:	00023371 	.word	0x00023371
   23610:	00023371 	.word	0x00023371
   23614:	00023371 	.word	0x00023371
   23618:	00023371 	.word	0x00023371
   2361c:	00023371 	.word	0x00023371
   23620:	00023371 	.word	0x00023371
   23624:	00023741 	.word	0x00023741
   23628:	00023371 	.word	0x00023371
   2362c:	00023371 	.word	0x00023371
   23630:	00023749 	.word	0x00023749
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   23634:	f7ea fdac 	bl	e190 <sdc_hci_cmd_le_set_event_mask>
   23638:	e6c3      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   2363a:	4811      	ldr	r0, [pc, #68]	; (23680 <hci_internal_cmd_put+0x364>)
   2363c:	f7ea fd8c 	bl	e158 <sdc_hci_cmd_le_read_buffer_size>
   23640:	e6d4      	b.n	233ec <hci_internal_cmd_put+0xd0>
	memset(features, 0, sizeof(*features));
   23642:	4b0f      	ldr	r3, [pc, #60]	; (23680 <hci_internal_cmd_put+0x364>)
   23644:	2000      	movs	r0, #0
   23646:	f8c4 0007 	str.w	r0, [r4, #7]
   2364a:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   2364c:	79e3      	ldrb	r3, [r4, #7]
   2364e:	f063 030a 	orn	r3, r3, #10
   23652:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   23654:	7a23      	ldrb	r3, [r4, #8]
   23656:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   2365a:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   2365e:	7223      	strb	r3, [r4, #8]
   23660:	e732      	b.n	234c8 <hci_internal_cmd_put+0x1ac>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   23662:	f7ea fda0 	bl	e1a6 <sdc_hci_cmd_le_set_random_address>
   23666:	e6ac      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   23668:	f7ea fda3 	bl	e1b2 <sdc_hci_cmd_le_set_scan_params>
   2366c:	e6a9      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   2366e:	f7ea fd9e 	bl	e1ae <sdc_hci_cmd_le_set_scan_enable>
   23672:	e6a6      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   23674:	f7ea fd66 	bl	e144 <sdc_hci_cmd_le_create_conn>
   23678:	e67e      	b.n	23378 <hci_internal_cmd_put+0x5c>
   2367a:	bf00      	nop
   2367c:	2000413c 	.word	0x2000413c
   23680:	20004143 	.word	0x20004143
		return sdc_hci_cmd_le_create_conn_cancel();
   23684:	f7ea fd60 	bl	e148 <sdc_hci_cmd_le_create_conn_cancel>
   23688:	e69b      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   2368a:	4889      	ldr	r0, [pc, #548]	; (238b0 <hci_internal_cmd_put+0x594>)
   2368c:	f7ea fd74 	bl	e178 <sdc_hci_cmd_le_read_white_list_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   23690:	2105      	movs	r1, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   23692:	e726      	b.n	234e2 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_clear_white_list();
   23694:	f7ea fd52 	bl	e13c <sdc_hci_cmd_le_clear_white_list>
   23698:	e693      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   2369a:	f7ea fd4b 	bl	e134 <sdc_hci_cmd_le_add_device_to_white_list>
   2369e:	e690      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   236a0:	f7ea fd6e 	bl	e180 <sdc_hci_cmd_le_remove_device_from_white_list>
   236a4:	e68d      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   236a6:	f7ea fd4b 	bl	e140 <sdc_hci_cmd_le_conn_update>
   236aa:	e665      	b.n	23378 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   236ac:	f7ea fd75 	bl	e19a <sdc_hci_cmd_le_set_host_channel_classification>
   236b0:	e687      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   236b2:	497f      	ldr	r1, [pc, #508]	; (238b0 <hci_internal_cmd_put+0x594>)
   236b4:	f7ea fd52 	bl	e15c <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   236b8:	210b      	movs	r1, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   236ba:	e712      	b.n	234e2 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   236bc:	f7ea fd54 	bl	e168 <sdc_hci_cmd_le_read_remote_features>
   236c0:	e65a      	b.n	23378 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   236c2:	497b      	ldr	r1, [pc, #492]	; (238b0 <hci_internal_cmd_put+0x594>)
   236c4:	f7ea fd44 	bl	e150 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   236c8:	2114      	movs	r1, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   236ca:	e70a      	b.n	234e2 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   236cc:	4878      	ldr	r0, [pc, #480]	; (238b0 <hci_internal_cmd_put+0x594>)
   236ce:	f7ea fd41 	bl	e154 <sdc_hci_cmd_le_rand>
   236d2:	e6b2      	b.n	2343a <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   236d4:	f7ea fd3a 	bl	e14c <sdc_hci_cmd_le_enable_encryption>
   236d8:	e64e      	b.n	23378 <hci_internal_cmd_put+0x5c>
	*buf = states1;
   236da:	2370      	movs	r3, #112	; 0x70
   236dc:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   236de:	2340      	movs	r3, #64	; 0x40
   236e0:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   236e2:	210c      	movs	r1, #12
	cmds->read_supported_vs_commands = 1;
   236e4:	2000      	movs	r0, #0
   236e6:	e6f0      	b.n	234ca <hci_internal_cmd_put+0x1ae>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   236e8:	4971      	ldr	r1, [pc, #452]	; (238b0 <hci_internal_cmd_put+0x594>)
   236ea:	f7ea fd4d 	bl	e188 <sdc_hci_cmd_le_set_data_length>
   236ee:	e675      	b.n	233dc <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   236f0:	486f      	ldr	r0, [pc, #444]	; (238b0 <hci_internal_cmd_put+0x594>)
   236f2:	f7ea fd3d 	bl	e170 <sdc_hci_cmd_le_read_suggested_default_data_length>
   236f6:	e681      	b.n	233fc <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   236f8:	f7ea fd5d 	bl	e1b6 <sdc_hci_cmd_le_write_suggested_default_data_length>
   236fc:	e661      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   236fe:	f7ea fd17 	bl	e130 <sdc_hci_cmd_le_add_device_to_resolving_list>
   23702:	e65e      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   23704:	f7ea fd3a 	bl	e17c <sdc_hci_cmd_le_remove_device_from_resolving_list>
   23708:	e65b      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_clear_resolving_list();
   2370a:	f7ea fd15 	bl	e138 <sdc_hci_cmd_le_clear_resolving_list>
   2370e:	e658      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   23710:	4867      	ldr	r0, [pc, #412]	; (238b0 <hci_internal_cmd_put+0x594>)
   23712:	f7ea fd2b 	bl	e16c <sdc_hci_cmd_le_read_resolving_list_size>
   23716:	e7bb      	b.n	23690 <hci_internal_cmd_put+0x374>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   23718:	f7ea fd34 	bl	e184 <sdc_hci_cmd_le_set_address_resolution_enable>
   2371c:	e651      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   2371e:	f7ea fd44 	bl	e1aa <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   23722:	e64e      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   23724:	4862      	ldr	r0, [pc, #392]	; (238b0 <hci_internal_cmd_put+0x594>)
   23726:	f7ea fd1b 	bl	e160 <sdc_hci_cmd_le_read_max_data_length>
   2372a:	e686      	b.n	2343a <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   2372c:	4960      	ldr	r1, [pc, #384]	; (238b0 <hci_internal_cmd_put+0x594>)
   2372e:	f7ea fd19 	bl	e164 <sdc_hci_cmd_le_read_phy>
   23732:	e663      	b.n	233fc <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   23734:	f7ea fd2a 	bl	e18c <sdc_hci_cmd_le_set_default_phy>
   23738:	e643      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   2373a:	f7ea fd30 	bl	e19e <sdc_hci_cmd_le_set_phy>
   2373e:	e61b      	b.n	23378 <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   23740:	485b      	ldr	r0, [pc, #364]	; (238b0 <hci_internal_cmd_put+0x594>)
   23742:	f7ea fd17 	bl	e174 <sdc_hci_cmd_le_read_transmit_power>
   23746:	e649      	b.n	233dc <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   23748:	f7ea fd2b 	bl	e1a2 <sdc_hci_cmd_le_set_privacy_mode>
   2374c:	e639      	b.n	233c2 <hci_internal_cmd_put+0xa6>
	switch (opcode)	{
   2374e:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   23752:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   23754:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   23758:	d820      	bhi.n	2379c <hci_internal_cmd_put+0x480>
   2375a:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   2375e:	f43f ae07 	beq.w	23370 <hci_internal_cmd_put+0x54>
   23762:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   23766:	3b01      	subs	r3, #1
   23768:	2b09      	cmp	r3, #9
   2376a:	f63f ae01 	bhi.w	23370 <hci_internal_cmd_put+0x54>
   2376e:	a201      	add	r2, pc, #4	; (adr r2, 23774 <hci_internal_cmd_put+0x458>)
   23770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   23774:	000237bd 	.word	0x000237bd
   23778:	000237eb 	.word	0x000237eb
   2377c:	00023371 	.word	0x00023371
   23780:	00023371 	.word	0x00023371
   23784:	00023371 	.word	0x00023371
   23788:	0002382b 	.word	0x0002382b
   2378c:	00023371 	.word	0x00023371
   23790:	00023371 	.word	0x00023371
   23794:	00023817 	.word	0x00023817
   23798:	00023821 	.word	0x00023821
   2379c:	f505 7340 	add.w	r3, r5, #768	; 0x300
   237a0:	b29b      	uxth	r3, r3
   237a2:	2b05      	cmp	r3, #5
   237a4:	f63f ade4 	bhi.w	23370 <hci_internal_cmd_put+0x54>
   237a8:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   237ac:	2b05      	cmp	r3, #5
   237ae:	f63f addf 	bhi.w	23370 <hci_internal_cmd_put+0x54>
   237b2:	e8df f003 	tbb	[pc, r3]
   237b6:	413e      	.short	0x413e
   237b8:	4d4a4744 	.word	0x4d4a4744
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   237bc:	483c      	ldr	r0, [pc, #240]	; (238b0 <hci_internal_cmd_put+0x594>)
   237be:	f7e1 fd37 	bl	5230 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   237c2:	2110      	movs	r1, #16
	switch (hci_opcode) {
   237c4:	f242 0319 	movw	r3, #8217	; 0x2019
   237c8:	429e      	cmp	r6, r3
   237ca:	dc51      	bgt.n	23870 <hci_internal_cmd_put+0x554>
   237cc:	f242 030c 	movw	r3, #8204	; 0x200c
   237d0:	429e      	cmp	r6, r3
   237d2:	dc40      	bgt.n	23856 <hci_internal_cmd_put+0x53a>
   237d4:	f240 4306 	movw	r3, #1030	; 0x406
   237d8:	429e      	cmp	r6, r3
   237da:	f43f adcd 	beq.w	23378 <hci_internal_cmd_put+0x5c>
   237de:	f240 431d 	movw	r3, #1053	; 0x41d
   237e2:	429e      	cmp	r6, r3
   237e4:	f43f adc8 	beq.w	23378 <hci_internal_cmd_put+0x5c>
   237e8:	e67b      	b.n	234e2 <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   237ea:	2000      	movs	r0, #0
   237ec:	f8a4 0007 	strh.w	r0, [r4, #7]
	cmds->read_version_info = 1;
   237f0:	79e3      	ldrb	r3, [r4, #7]
   237f2:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   237f6:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   237fa:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   237fc:	7a23      	ldrb	r3, [r4, #8]
   237fe:	f023 0307 	bic.w	r3, r3, #7
   23802:	f043 0307 	orr.w	r3, r3, #7
   23806:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   23808:	f242 0319 	movw	r3, #8217	; 0x2019
   2380c:	429e      	cmp	r6, r3
   2380e:	dd3e      	ble.n	2388e <hci_internal_cmd_put+0x572>
   23810:	f242 0332 	movw	r3, #8242	; 0x2032
   23814:	e046      	b.n	238a4 <hci_internal_cmd_put+0x588>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   23816:	4826      	ldr	r0, [pc, #152]	; (238b0 <hci_internal_cmd_put+0x594>)
   23818:	f7ea fc35 	bl	e086 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   2381c:	211b      	movs	r1, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   2381e:	e7d1      	b.n	237c4 <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   23820:	4823      	ldr	r0, [pc, #140]	; (238b0 <hci_internal_cmd_put+0x594>)
   23822:	f7ea fbe3 	bl	dfec <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   23826:	2124      	movs	r1, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   23828:	e7cc      	b.n	237c4 <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   2382a:	f7ea fc7b 	bl	e124 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   2382e:	2104      	movs	r1, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   23830:	e7c8      	b.n	237c4 <hci_internal_cmd_put+0x4a8>
	cmds->read_supported_vs_commands = 1;
   23832:	233f      	movs	r3, #63	; 0x3f
   23834:	71e3      	strb	r3, [r4, #7]
   23836:	e63a      	b.n	234ae <hci_internal_cmd_put+0x192>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   23838:	f7ea fbd1 	bl	dfde <sdc_hci_cmd_vs_llpm_mode_set>
   2383c:	e5c1      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   2383e:	f7ea fba2 	bl	df86 <sdc_hci_cmd_vs_conn_update>
   23842:	e5be      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   23844:	f7ea fb97 	bl	df76 <sdc_hci_cmd_vs_conn_event_extend>
   23848:	e5bb      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2384a:	f7ea fbca 	bl	dfe2 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   2384e:	e5b8      	b.n	233c2 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   23850:	f7ea fbc3 	bl	dfda <sdc_hci_cmd_vs_event_length_set>
   23854:	e5b5      	b.n	233c2 <hci_internal_cmd_put+0xa6>
   23856:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   2385a:	3b0d      	subs	r3, #13
   2385c:	2201      	movs	r2, #1
   2385e:	b29b      	uxth	r3, r3
   23860:	fa02 f303 	lsl.w	r3, r2, r3
   23864:	f241 2241 	movw	r2, #4673	; 0x1241
   23868:	4213      	tst	r3, r2
   2386a:	f43f ae3a 	beq.w	234e2 <hci_internal_cmd_put+0x1c6>
   2386e:	e583      	b.n	23378 <hci_internal_cmd_put+0x5c>
	switch (hci_opcode) {
   23870:	f242 0332 	movw	r3, #8242	; 0x2032
   23874:	429e      	cmp	r6, r3
   23876:	f43f ad7f 	beq.w	23378 <hci_internal_cmd_put+0x5c>
   2387a:	f5a5 5301 	sub.w	r3, r5, #8256	; 0x2040
   2387e:	3b03      	subs	r3, #3
   23880:	2b01      	cmp	r3, #1
   23882:	f67f ad79 	bls.w	23378 <hci_internal_cmd_put+0x5c>
   23886:	e62c      	b.n	234e2 <hci_internal_cmd_put+0x1c6>
		return -NRF_EPERM;
   23888:	f04f 30ff 	mov.w	r0, #4294967295
   2388c:	e580      	b.n	23390 <hci_internal_cmd_put+0x74>
	switch (hci_opcode) {
   2388e:	f242 030c 	movw	r3, #8204	; 0x200c
   23892:	429e      	cmp	r6, r3
   23894:	dc09      	bgt.n	238aa <hci_internal_cmd_put+0x58e>
   23896:	f240 4306 	movw	r3, #1030	; 0x406
   2389a:	429e      	cmp	r6, r3
   2389c:	f43f ad6c 	beq.w	23378 <hci_internal_cmd_put+0x5c>
   238a0:	f240 431d 	movw	r3, #1053	; 0x41d
   238a4:	429e      	cmp	r6, r3
   238a6:	f43f ad67 	beq.w	23378 <hci_internal_cmd_put+0x5c>
   238aa:	2144      	movs	r1, #68	; 0x44
   238ac:	e60d      	b.n	234ca <hci_internal_cmd_put+0x1ae>
   238ae:	bf00      	nop
   238b0:	20004143 	.word	0x20004143

000238b4 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   238b4:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   238b6:	4c07      	ldr	r4, [pc, #28]	; (238d4 <hci_internal_evt_get+0x20>)
   238b8:	7823      	ldrb	r3, [r4, #0]
   238ba:	b13b      	cbz	r3, 238cc <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   238bc:	78a2      	ldrb	r2, [r4, #2]
   238be:	1c61      	adds	r1, r4, #1
   238c0:	3202      	adds	r2, #2
   238c2:	f00c fe8a 	bl	305da <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   238c6:	2000      	movs	r0, #0
   238c8:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   238ca:	bd10      	pop	{r4, pc}
   238cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   238d0:	f7ea bb34 	b.w	df3c <sdc_hci_evt_get>
   238d4:	2000413c 	.word	0x2000413c

000238d8 <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   238d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   238dc:	4e14      	ldr	r6, [pc, #80]	; (23930 <bt_rand+0x58>)
   238de:	6833      	ldr	r3, [r6, #0]
{
   238e0:	4605      	mov	r5, r0
   238e2:	460c      	mov	r4, r1
   238e4:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   238e6:	b1c3      	cbz	r3, 2391a <bt_rand+0x42>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   238e8:	683e      	ldr	r6, [r7, #0]
   238ea:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   238ec:	68b7      	ldr	r7, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   238ee:	683b      	ldr	r3, [r7, #0]
   238f0:	b963      	cbnz	r3, 2390c <bt_rand+0x34>
   238f2:	4910      	ldr	r1, [pc, #64]	; (23934 <bt_rand+0x5c>)
   238f4:	4a10      	ldr	r2, [pc, #64]	; (23938 <bt_rand+0x60>)
   238f6:	4811      	ldr	r0, [pc, #68]	; (2393c <bt_rand+0x64>)
   238f8:	234b      	movs	r3, #75	; 0x4b
   238fa:	f008 fe4e 	bl	2c59a <printk>
   238fe:	4810      	ldr	r0, [pc, #64]	; (23940 <bt_rand+0x68>)
   23900:	f008 fe4b 	bl	2c59a <printk>
   23904:	480c      	ldr	r0, [pc, #48]	; (23938 <bt_rand+0x60>)
   23906:	214b      	movs	r1, #75	; 0x4b
   23908:	f009 f888 	bl	2ca1c <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   2390c:	683b      	ldr	r3, [r7, #0]
   2390e:	4622      	mov	r2, r4
   23910:	4629      	mov	r1, r5
   23912:	4630      	mov	r0, r6
}
   23914:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   23918:	4718      	bx	r3
   2391a:	480a      	ldr	r0, [pc, #40]	; (23944 <bt_rand+0x6c>)
   2391c:	f000 feb0 	bl	24680 <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   23920:	6030      	str	r0, [r6, #0]
		if (!dev) {
   23922:	2800      	cmp	r0, #0
   23924:	d1e0      	bne.n	238e8 <bt_rand+0x10>
}
   23926:	f06f 0012 	mvn.w	r0, #18
   2392a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2392e:	bf00      	nop
   23930:	20002ee0 	.word	0x20002ee0
   23934:	00037281 	.word	0x00037281
   23938:	00037254 	.word	0x00037254
   2393c:	00032486 	.word	0x00032486
   23940:	000372a1 	.word	0x000372a1
   23944:	000371aa 	.word	0x000371aa

00023948 <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   23948:	b538      	push	{r3, r4, r5, lr}
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   2394a:	4b0d      	ldr	r3, [pc, #52]	; (23980 <m_assert_handler+0x38>)
   2394c:	681a      	ldr	r2, [r3, #0]
   2394e:	0752      	lsls	r2, r2, #29
{
   23950:	460d      	mov	r5, r1
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   23952:	d00d      	beq.n	23970 <m_assert_handler+0x28>
   23954:	4c0b      	ldr	r4, [pc, #44]	; (23984 <m_assert_handler+0x3c>)
   23956:	1b1c      	subs	r4, r3, r4
   23958:	08a4      	lsrs	r4, r4, #2
   2395a:	f7ee fee3 	bl	12724 <z_log_strdup>
   2395e:	01a4      	lsls	r4, r4, #6
   23960:	f044 0401 	orr.w	r4, r4, #1
   23964:	4601      	mov	r1, r0
   23966:	4623      	mov	r3, r4
   23968:	4807      	ldr	r0, [pc, #28]	; (23988 <m_assert_handler+0x40>)
   2396a:	462a      	mov	r2, r5
   2396c:	f009 f9d8 	bl	2cd20 <log_2>
	k_oops();
   23970:	4040      	eors	r0, r0
   23972:	f380 8811 	msr	BASEPRI, r0
   23976:	f04f 0003 	mov.w	r0, #3
   2397a:	df02      	svc	2
}
   2397c:	bd38      	pop	{r3, r4, r5, pc}
   2397e:	bf00      	nop
   23980:	200007dc 	.word	0x200007dc
   23984:	200007a8 	.word	0x200007a8
   23988:	00037584 	.word	0x00037584

0002398c <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   2398c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   2398e:	2332      	movs	r3, #50	; 0x32
   23990:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   23994:	4a10      	ldr	r2, [pc, #64]	; (239d8 <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   23996:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   23998:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2399a:	2119      	movs	r1, #25
   2399c:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   2399e:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   239a2:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   239a6:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   239aa:	f7e0 ffcd 	bl	4948 <mpsl_init>
	if (err) {
   239ae:	4604      	mov	r4, r0
   239b0:	b970      	cbnz	r0, 239d0 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   239b2:	4601      	mov	r1, r0
   239b4:	462a      	mov	r2, r5
   239b6:	2008      	movs	r0, #8
   239b8:	f7f3 fb18 	bl	16fec <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   239bc:	462a      	mov	r2, r5
   239be:	4621      	mov	r1, r4
   239c0:	200b      	movs	r0, #11
   239c2:	f7f3 fb13 	bl	16fec <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   239c6:	462a      	mov	r2, r5
   239c8:	4621      	mov	r1, r4
   239ca:	4628      	mov	r0, r5
   239cc:	f7f3 fb0e 	bl	16fec <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   239d0:	4620      	mov	r0, r4
   239d2:	b003      	add	sp, #12
   239d4:	bd30      	pop	{r4, r5, pc}
   239d6:	bf00      	nop
   239d8:	00023949 	.word	0x00023949

000239dc <mpsl_low_prio_irq_handler>:
   239dc:	4801      	ldr	r0, [pc, #4]	; (239e4 <mpsl_low_prio_irq_handler+0x8>)
   239de:	f002 ba0b 	b.w	25df8 <z_impl_k_sem_give>
   239e2:	bf00      	nop
   239e4:	20000960 	.word	0x20000960

000239e8 <signal_thread>:
{
   239e8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   239ea:	4d0f      	ldr	r5, [pc, #60]	; (23a28 <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   239ec:	4c0f      	ldr	r4, [pc, #60]	; (23a2c <signal_thread+0x44>)
   239ee:	f04f 32ff 	mov.w	r2, #4294967295
   239f2:	f04f 33ff 	mov.w	r3, #4294967295
   239f6:	4628      	mov	r0, r5
   239f8:	f002 fa42 	bl	25e80 <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   239fc:	f04f 30ff 	mov.w	r0, #4294967295
   23a00:	f04f 31ff 	mov.w	r1, #4294967295
   23a04:	f7ff f9ce 	bl	22da4 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   23a08:	b148      	cbz	r0, 23a1e <signal_thread+0x36>
   23a0a:	4909      	ldr	r1, [pc, #36]	; (23a30 <signal_thread+0x48>)
   23a0c:	4809      	ldr	r0, [pc, #36]	; (23a34 <signal_thread+0x4c>)
   23a0e:	2346      	movs	r3, #70	; 0x46
   23a10:	4622      	mov	r2, r4
   23a12:	f008 fdc2 	bl	2c59a <printk>
   23a16:	2146      	movs	r1, #70	; 0x46
   23a18:	4620      	mov	r0, r4
   23a1a:	f008 ffff 	bl	2ca1c <assert_post_action>
		mpsl_low_priority_process();
   23a1e:	f7e9 fdd6 	bl	d5ce <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   23a22:	f7ff f9c7 	bl	22db4 <multithreading_lock_release>
	while (true) {
   23a26:	e7e2      	b.n	239ee <signal_thread+0x6>
   23a28:	20000960 	.word	0x20000960
   23a2c:	00037598 	.word	0x00037598
   23a30:	000375c5 	.word	0x000375c5
   23a34:	00032486 	.word	0x00032486

00023a38 <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   23a38:	b530      	push	{r4, r5, lr}
   23a3a:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   23a3c:	4d0f      	ldr	r5, [pc, #60]	; (23a7c <mpsl_signal_thread_init+0x44>)
   23a3e:	4910      	ldr	r1, [pc, #64]	; (23a80 <mpsl_signal_thread_init+0x48>)
   23a40:	2200      	movs	r2, #0
   23a42:	2300      	movs	r3, #0
   23a44:	e9cd 2306 	strd	r2, r3, [sp, #24]
   23a48:	2400      	movs	r4, #0
   23a4a:	f06f 0309 	mvn.w	r3, #9
   23a4e:	e9cd 3403 	strd	r3, r4, [sp, #12]
   23a52:	e9cd 4401 	strd	r4, r4, [sp, #4]
   23a56:	4b0b      	ldr	r3, [pc, #44]	; (23a84 <mpsl_signal_thread_init+0x4c>)
   23a58:	9400      	str	r4, [sp, #0]
   23a5a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23a5e:	4628      	mov	r0, r5
   23a60:	f001 fbcc 	bl	251fc <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   23a64:	4908      	ldr	r1, [pc, #32]	; (23a88 <mpsl_signal_thread_init+0x50>)
   23a66:	4628      	mov	r0, r5
   23a68:	f001 f9d6 	bl	24e18 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   23a6c:	4622      	mov	r2, r4
   23a6e:	2104      	movs	r1, #4
   23a70:	2019      	movs	r0, #25
   23a72:	f7f3 fabb 	bl	16fec <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   23a76:	4620      	mov	r0, r4
   23a78:	b009      	add	sp, #36	; 0x24
   23a7a:	bd30      	pop	{r4, r5, pc}
   23a7c:	20001f80 	.word	0x20001f80
   23a80:	20005d00 	.word	0x20005d00
   23a84:	000239e9 	.word	0x000239e9
   23a88:	000375d2 	.word	0x000375d2

00023a8c <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   23a8c:	4b01      	ldr	r3, [pc, #4]	; (23a94 <mpsl_hfclk_callback+0x8>)
   23a8e:	2000      	movs	r0, #0
   23a90:	681b      	ldr	r3, [r3, #0]
   23a92:	4718      	bx	r3
   23a94:	20002ee4 	.word	0x20002ee4

00023a98 <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   23a98:	b510      	push	{r4, lr}
	switch (domain) {
   23a9a:	b130      	cbz	r0, 23aaa <nrfx_clock_start+0x12>
   23a9c:	2801      	cmp	r0, #1
   23a9e:	d10a      	bne.n	23ab6 <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   23aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   23aa4:	480b      	ldr	r0, [pc, #44]	; (23ad4 <nrfx_clock_start+0x3c>)
   23aa6:	f7e0 bdb9 	b.w	461c <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   23aaa:	4b0b      	ldr	r3, [pc, #44]	; (23ad8 <nrfx_clock_start+0x40>)
}
   23aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   23ab0:	681b      	ldr	r3, [r3, #0]
   23ab2:	2001      	movs	r0, #1
   23ab4:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   23ab6:	4909      	ldr	r1, [pc, #36]	; (23adc <nrfx_clock_start+0x44>)
   23ab8:	4a09      	ldr	r2, [pc, #36]	; (23ae0 <nrfx_clock_start+0x48>)
   23aba:	480a      	ldr	r0, [pc, #40]	; (23ae4 <nrfx_clock_start+0x4c>)
   23abc:	231c      	movs	r3, #28
   23abe:	f008 fd6c 	bl	2c59a <printk>
   23ac2:	4809      	ldr	r0, [pc, #36]	; (23ae8 <nrfx_clock_start+0x50>)
   23ac4:	f008 fd69 	bl	2c59a <printk>
}
   23ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   23acc:	4804      	ldr	r0, [pc, #16]	; (23ae0 <nrfx_clock_start+0x48>)
   23ace:	211c      	movs	r1, #28
   23ad0:	f008 bfa4 	b.w	2ca1c <assert_post_action>
   23ad4:	00023a8d 	.word	0x00023a8d
   23ad8:	20002ee4 	.word	0x20002ee4
   23adc:	000380f0 	.word	0x000380f0
   23ae0:	000375e8 	.word	0x000375e8
   23ae4:	00032486 	.word	0x00032486
   23ae8:	00037625 	.word	0x00037625

00023aec <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   23aec:	b508      	push	{r3, lr}
	switch (domain) {
   23aee:	b1a0      	cbz	r0, 23b1a <nrfx_clock_stop+0x2e>
   23af0:	2801      	cmp	r0, #1
   23af2:	d103      	bne.n	23afc <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   23af4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   23af8:	f7e0 bd82 	b.w	4600 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   23afc:	4907      	ldr	r1, [pc, #28]	; (23b1c <nrfx_clock_stop+0x30>)
   23afe:	4a08      	ldr	r2, [pc, #32]	; (23b20 <nrfx_clock_stop+0x34>)
   23b00:	4808      	ldr	r0, [pc, #32]	; (23b24 <nrfx_clock_stop+0x38>)
   23b02:	232a      	movs	r3, #42	; 0x2a
   23b04:	f008 fd49 	bl	2c59a <printk>
   23b08:	4807      	ldr	r0, [pc, #28]	; (23b28 <nrfx_clock_stop+0x3c>)
   23b0a:	f008 fd46 	bl	2c59a <printk>
}
   23b0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   23b12:	4803      	ldr	r0, [pc, #12]	; (23b20 <nrfx_clock_stop+0x34>)
   23b14:	212a      	movs	r1, #42	; 0x2a
   23b16:	f008 bf81 	b.w	2ca1c <assert_post_action>
}
   23b1a:	bd08      	pop	{r3, pc}
   23b1c:	000380f0 	.word	0x000380f0
   23b20:	000375e8 	.word	0x000375e8
   23b24:	00032486 	.word	0x00032486
   23b28:	00037625 	.word	0x00037625

00023b2c <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   23b2c:	4b01      	ldr	r3, [pc, #4]	; (23b34 <nrfx_clock_init+0x8>)
   23b2e:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   23b30:	4801      	ldr	r0, [pc, #4]	; (23b38 <nrfx_clock_init+0xc>)
   23b32:	4770      	bx	lr
   23b34:	20002ee4 	.word	0x20002ee4
   23b38:	0bad0000 	.word	0x0bad0000

00023b3c <__NVIC_SystemReset>:
  __ASM volatile ("dsb 0xF":::"memory");
   23b3c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   23b40:	4905      	ldr	r1, [pc, #20]	; (23b58 <__NVIC_SystemReset+0x1c>)
   23b42:	4b06      	ldr	r3, [pc, #24]	; (23b5c <__NVIC_SystemReset+0x20>)
   23b44:	68ca      	ldr	r2, [r1, #12]
   23b46:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   23b4a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   23b4c:	60cb      	str	r3, [r1, #12]
   23b4e:	f3bf 8f4f 	dsb	sy
    __NOP();
   23b52:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   23b54:	e7fd      	b.n	23b52 <__NVIC_SystemReset+0x16>
   23b56:	bf00      	nop
   23b58:	e000ed00 	.word	0xe000ed00
   23b5c:	05fa0004 	.word	0x05fa0004

00023b60 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23b60:	4b03      	ldr	r3, [pc, #12]	; (23b70 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
   23b62:	6818      	ldr	r0, [r3, #0]
}
   23b64:	f1a0 0308 	sub.w	r3, r0, #8
   23b68:	4258      	negs	r0, r3
   23b6a:	4158      	adcs	r0, r3
   23b6c:	4770      	bx	lr
   23b6e:	bf00      	nop
   23b70:	10000130 	.word	0x10000130

00023b74 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23b74:	4b06      	ldr	r3, [pc, #24]	; (23b90 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
   23b76:	681b      	ldr	r3, [r3, #0]
   23b78:	2b08      	cmp	r3, #8
   23b7a:	d106      	bne.n	23b8a <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23b7c:	4b05      	ldr	r3, [pc, #20]	; (23b94 <nrf52_errata_103+0x20>)
   23b7e:	681b      	ldr	r3, [r3, #0]
                switch(var2)
   23b80:	2b05      	cmp	r3, #5
   23b82:	d802      	bhi.n	23b8a <nrf52_errata_103+0x16>
   23b84:	4a04      	ldr	r2, [pc, #16]	; (23b98 <nrf52_errata_103+0x24>)
   23b86:	5cd0      	ldrb	r0, [r2, r3]
   23b88:	4770      	bx	lr
        return false;
   23b8a:	2000      	movs	r0, #0
}
   23b8c:	4770      	bx	lr
   23b8e:	bf00      	nop
   23b90:	10000130 	.word	0x10000130
   23b94:	10000134 	.word	0x10000134
   23b98:	0003763b 	.word	0x0003763b

00023b9c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   23b9c:	4a02      	ldr	r2, [pc, #8]	; (23ba8 <nvmc_wait+0xc>)
   23b9e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   23ba2:	2b00      	cmp	r3, #0
   23ba4:	d0fb      	beq.n	23b9e <nvmc_wait+0x2>
}
   23ba6:	4770      	bx	lr
   23ba8:	4001e000 	.word	0x4001e000

00023bac <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   23bac:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   23bae:	f7ff ffd7 	bl	23b60 <nrf52_errata_136>
   23bb2:	b140      	cbz	r0, 23bc6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   23bb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23bb8:	2200      	movs	r2, #0
   23bba:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   23bbe:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   23bc2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   23bc6:	f7ff ffcb 	bl	23b60 <nrf52_errata_136>
   23bca:	2800      	cmp	r0, #0
   23bcc:	d046      	beq.n	23c5c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   23bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   23bd2:	4b61      	ldr	r3, [pc, #388]	; (23d58 <SystemInit+0x1ac>)
   23bd4:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   23bd8:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   23bdc:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   23be0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   23be4:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   23be8:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   23bec:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   23bf0:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   23bf4:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   23bf8:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   23bfc:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   23c00:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   23c04:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   23c08:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   23c0c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   23c10:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   23c14:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   23c18:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   23c1c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   23c20:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   23c24:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   23c28:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   23c2c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   23c30:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   23c34:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   23c38:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   23c3c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   23c40:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   23c44:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   23c48:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   23c4c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   23c50:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   23c54:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   23c58:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   23c5c:	f7ff ff8a 	bl	23b74 <nrf52_errata_103>
   23c60:	b110      	cbz	r0, 23c68 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   23c62:	4b3e      	ldr	r3, [pc, #248]	; (23d5c <SystemInit+0x1b0>)
   23c64:	4a3e      	ldr	r2, [pc, #248]	; (23d60 <SystemInit+0x1b4>)
   23c66:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   23c68:	f7ff ff84 	bl	23b74 <nrf52_errata_103>
   23c6c:	b118      	cbz	r0, 23c76 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   23c6e:	4b3d      	ldr	r3, [pc, #244]	; (23d64 <SystemInit+0x1b8>)
   23c70:	22fb      	movs	r2, #251	; 0xfb
   23c72:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   23c76:	f7ff ff7d 	bl	23b74 <nrf52_errata_103>
   23c7a:	b148      	cbz	r0, 23c90 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   23c7c:	493a      	ldr	r1, [pc, #232]	; (23d68 <SystemInit+0x1bc>)
   23c7e:	4b3b      	ldr	r3, [pc, #236]	; (23d6c <SystemInit+0x1c0>)
   23c80:	680a      	ldr	r2, [r1, #0]
   23c82:	681b      	ldr	r3, [r3, #0]
   23c84:	f022 020f 	bic.w	r2, r2, #15
   23c88:	f003 030f 	and.w	r3, r3, #15
   23c8c:	4313      	orrs	r3, r2
   23c8e:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   23c90:	f7ff ff70 	bl	23b74 <nrf52_errata_103>
   23c94:	b118      	cbz	r0, 23c9e <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   23c96:	4b36      	ldr	r3, [pc, #216]	; (23d70 <SystemInit+0x1c4>)
   23c98:	f44f 7200 	mov.w	r2, #512	; 0x200
   23c9c:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   23c9e:	f7ff ff5f 	bl	23b60 <nrf52_errata_136>
   23ca2:	b148      	cbz	r0, 23cb8 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   23ca4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23ca8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   23cac:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   23cae:	bf44      	itt	mi
   23cb0:	f06f 0201 	mvnmi.w	r2, #1
   23cb4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   23cb8:	4b2e      	ldr	r3, [pc, #184]	; (23d74 <SystemInit+0x1c8>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   23cba:	681b      	ldr	r3, [r3, #0]
   23cbc:	2b08      	cmp	r3, #8
   23cbe:	d10e      	bne.n	23cde <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   23cc0:	4b2d      	ldr	r3, [pc, #180]	; (23d78 <SystemInit+0x1cc>)
   23cc2:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   23cc4:	2b05      	cmp	r3, #5
   23cc6:	d802      	bhi.n	23cce <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
   23cc8:	4a2c      	ldr	r2, [pc, #176]	; (23d7c <SystemInit+0x1d0>)
   23cca:	5cd3      	ldrb	r3, [r2, r3]
   23ccc:	b13b      	cbz	r3, 23cde <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   23cce:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   23cd2:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   23cd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   23cda:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure NFCT pins as GPIOs if NFCT is not to be used in your code. If CONFIG_NFCT_PINS_AS_GPIOS is not defined,
       two GPIOs (see Product Specification to see which ones) will be reserved for NFC and will not be available as
       normal GPIOs. */
    #if defined (CONFIG_NFCT_PINS_AS_GPIOS) && defined(NFCT_PRESENT)
        if ((NRF_UICR->NFCPINS & UICR_NFCPINS_PROTECT_Msk) == (UICR_NFCPINS_PROTECT_NFC << UICR_NFCPINS_PROTECT_Pos)){
   23cde:	f04f 2110 	mov.w	r1, #268439552	; 0x10001000
   23ce2:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   23ce6:	07db      	lsls	r3, r3, #31
   23ce8:	d514      	bpl.n	23d14 <SystemInit+0x168>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23cea:	4825      	ldr	r0, [pc, #148]	; (23d80 <SystemInit+0x1d4>)
   23cec:	2301      	movs	r3, #1
   23cee:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   23cf2:	f7ff ff53 	bl	23b9c <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->NFCPINS &= ~UICR_NFCPINS_PROTECT_Msk;
   23cf6:	f8d1 320c 	ldr.w	r3, [r1, #524]	; 0x20c
   23cfa:	f023 0301 	bic.w	r3, r3, #1
   23cfe:	f8c1 320c 	str.w	r3, [r1, #524]	; 0x20c
            nvmc_wait();
   23d02:	f7ff ff4b 	bl	23b9c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23d06:	2300      	movs	r3, #0
   23d08:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
    nvmc_wait();
   23d0c:	f7ff ff46 	bl	23b9c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
            nvmc_wait();
            NRF_UICR->PSELRESET[1] = RESET_PIN;
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
   23d10:	f7ff ff14 	bl	23b3c <__NVIC_SystemReset>
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23d14:	f8d1 3200 	ldr.w	r3, [r1, #512]	; 0x200
   23d18:	2b00      	cmp	r3, #0
   23d1a:	db03      	blt.n	23d24 <SystemInit+0x178>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   23d1c:	f8d1 3204 	ldr.w	r3, [r1, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   23d20:	2b00      	cmp	r3, #0
   23d22:	da14      	bge.n	23d4e <SystemInit+0x1a2>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23d24:	4916      	ldr	r1, [pc, #88]	; (23d80 <SystemInit+0x1d4>)
   23d26:	2301      	movs	r3, #1
   23d28:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   23d2c:	f7ff ff36 	bl	23b9c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   23d30:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   23d34:	2412      	movs	r4, #18
   23d36:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   23d3a:	f7ff ff2f 	bl	23b9c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   23d3e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   23d42:	f7ff ff2b 	bl	23b9c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   23d46:	2300      	movs	r3, #0
   23d48:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
   23d4c:	e7de      	b.n	23d0c <SystemInit+0x160>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   23d4e:	4b0d      	ldr	r3, [pc, #52]	; (23d84 <SystemInit+0x1d8>)
   23d50:	4a0d      	ldr	r2, [pc, #52]	; (23d88 <SystemInit+0x1dc>)
   23d52:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   23d54:	bd10      	pop	{r4, pc}
   23d56:	bf00      	nop
   23d58:	4000c000 	.word	0x4000c000
   23d5c:	4000568c 	.word	0x4000568c
   23d60:	00038148 	.word	0x00038148
   23d64:	4000f000 	.word	0x4000f000
   23d68:	40000ee4 	.word	0x40000ee4
   23d6c:	10000258 	.word	0x10000258
   23d70:	40029640 	.word	0x40029640
   23d74:	10000130 	.word	0x10000130
   23d78:	10000134 	.word	0x10000134
   23d7c:	00037635 	.word	0x00037635
   23d80:	4001e000 	.word	0x4001e000
   23d84:	200005d8 	.word	0x200005d8
   23d88:	03d09000 	.word	0x03d09000

00023d8c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   23d8c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   23d8e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   23d90:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   23d92:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   23d96:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   23d98:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   23d9c:	d014      	beq.n	23dc8 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   23d9e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   23da2:	fa05 f204 	lsl.w	r2, r5, r4
   23da6:	ea23 0202 	bic.w	r2, r3, r2
   23daa:	e850 6f00 	ldrex	r6, [r0]
   23dae:	429e      	cmp	r6, r3
   23db0:	d104      	bne.n	23dbc <nrfx_flag32_alloc+0x30>
   23db2:	e840 2c00 	strex	ip, r2, [r0]
   23db6:	f1bc 0f00 	cmp.w	ip, #0
   23dba:	d1f6      	bne.n	23daa <nrfx_flag32_alloc+0x1e>
   23dbc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   23dc0:	d1e6      	bne.n	23d90 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   23dc2:	4802      	ldr	r0, [pc, #8]	; (23dcc <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   23dc4:	700c      	strb	r4, [r1, #0]
}
   23dc6:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   23dc8:	4801      	ldr	r0, [pc, #4]	; (23dd0 <nrfx_flag32_alloc+0x44>)
   23dca:	e7fc      	b.n	23dc6 <nrfx_flag32_alloc+0x3a>
   23dcc:	0bad0000 	.word	0x0bad0000
   23dd0:	0bad0002 	.word	0x0bad0002

00023dd4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   23dd4:	6803      	ldr	r3, [r0, #0]
   23dd6:	40cb      	lsrs	r3, r1
   23dd8:	07db      	lsls	r3, r3, #31
{
   23dda:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   23ddc:	d415      	bmi.n	23e0a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   23dde:	2301      	movs	r3, #1
   23de0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   23de4:	6803      	ldr	r3, [r0, #0]
   23de6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   23dea:	ea41 0203 	orr.w	r2, r1, r3
   23dee:	e850 4f00 	ldrex	r4, [r0]
   23df2:	429c      	cmp	r4, r3
   23df4:	d104      	bne.n	23e00 <nrfx_flag32_free+0x2c>
   23df6:	e840 2c00 	strex	ip, r2, [r0]
   23dfa:	f1bc 0f00 	cmp.w	ip, #0
   23dfe:	d1f6      	bne.n	23dee <nrfx_flag32_free+0x1a>
   23e00:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   23e04:	d1ee      	bne.n	23de4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   23e06:	4802      	ldr	r0, [pc, #8]	; (23e10 <nrfx_flag32_free+0x3c>)
}
   23e08:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   23e0a:	4802      	ldr	r0, [pc, #8]	; (23e14 <nrfx_flag32_free+0x40>)
   23e0c:	e7fc      	b.n	23e08 <nrfx_flag32_free+0x34>
   23e0e:	bf00      	nop
   23e10:	0bad0000 	.word	0x0bad0000
   23e14:	0bad0004 	.word	0x0bad0004

00023e18 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   23e18:	4b05      	ldr	r3, [pc, #20]	; (23e30 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23e1a:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   23e1c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   23e20:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
   23e24:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   23e28:	4258      	negs	r0, r3
   23e2a:	4158      	adcs	r0, r3
   23e2c:	4770      	bx	lr
   23e2e:	bf00      	nop
   23e30:	200005dc 	.word	0x200005dc

00023e34 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   23e34:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23e36:	f100 0308 	add.w	r3, r0, #8
   23e3a:	4c0c      	ldr	r4, [pc, #48]	; (23e6c <call_handler+0x38>)
   23e3c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   23e40:	05da      	lsls	r2, r3, #23
{
   23e42:	4605      	mov	r5, r0
   23e44:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23e46:	d507      	bpl.n	23e58 <call_handler+0x24>
   23e48:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   23e4c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   23e50:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   23e54:	6852      	ldr	r2, [r2, #4]
   23e56:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   23e58:	68a3      	ldr	r3, [r4, #8]
   23e5a:	b12b      	cbz	r3, 23e68 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23e5c:	68e2      	ldr	r2, [r4, #12]
   23e5e:	4631      	mov	r1, r6
   23e60:	4628      	mov	r0, r5
    }
}
   23e62:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   23e66:	4718      	bx	r3
}
   23e68:	bd70      	pop	{r4, r5, r6, pc}
   23e6a:	bf00      	nop
   23e6c:	200005dc 	.word	0x200005dc

00023e70 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23e70:	4b19      	ldr	r3, [pc, #100]	; (23ed8 <release_handler+0x68>)
   23e72:	3008      	adds	r0, #8
{
   23e74:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   23e76:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   23e7a:	05d1      	lsls	r1, r2, #23
   23e7c:	d51d      	bpl.n	23eba <release_handler+0x4a>
   23e7e:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   23e82:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   23e86:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23e8a:	f103 0410 	add.w	r4, r3, #16
   23e8e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   23e90:	f834 2b02 	ldrh.w	r2, [r4], #2
   23e94:	f412 7f80 	tst.w	r2, #256	; 0x100
   23e98:	d003      	beq.n	23ea2 <release_handler+0x32>
   23e9a:	f3c2 2243 	ubfx	r2, r2, #9, #4
   23e9e:	4291      	cmp	r1, r2
   23ea0:	d00b      	beq.n	23eba <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   23ea2:	3001      	adds	r0, #1
   23ea4:	2830      	cmp	r0, #48	; 0x30
   23ea6:	d1f3      	bne.n	23e90 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   23ea8:	2200      	movs	r2, #0
   23eaa:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   23eae:	480b      	ldr	r0, [pc, #44]	; (23edc <release_handler+0x6c>)
   23eb0:	f7ff ff90 	bl	23dd4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   23eb4:	4b0a      	ldr	r3, [pc, #40]	; (23ee0 <release_handler+0x70>)
   23eb6:	4298      	cmp	r0, r3
   23eb8:	d100      	bne.n	23ebc <release_handler+0x4c>
}
   23eba:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   23ebc:	4909      	ldr	r1, [pc, #36]	; (23ee4 <release_handler+0x74>)
   23ebe:	480a      	ldr	r0, [pc, #40]	; (23ee8 <release_handler+0x78>)
   23ec0:	4a0a      	ldr	r2, [pc, #40]	; (23eec <release_handler+0x7c>)
   23ec2:	f44f 7399 	mov.w	r3, #306	; 0x132
   23ec6:	f008 fb68 	bl	2c59a <printk>
}
   23eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   23ece:	4807      	ldr	r0, [pc, #28]	; (23eec <release_handler+0x7c>)
   23ed0:	f44f 7199 	mov.w	r1, #306	; 0x132
   23ed4:	f008 bda2 	b.w	2ca1c <assert_post_action>
   23ed8:	200005dc 	.word	0x200005dc
   23edc:	20000650 	.word	0x20000650
   23ee0:	0bad0000 	.word	0x0bad0000
   23ee4:	000376a5 	.word	0x000376a5
   23ee8:	00032486 	.word	0x00032486
   23eec:	00037641 	.word	0x00037641

00023ef0 <pin_handler_trigger_uninit>:
{
   23ef0:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   23ef2:	4c0a      	ldr	r4, [pc, #40]	; (23f1c <pin_handler_trigger_uninit+0x2c>)
   23ef4:	f100 0508 	add.w	r5, r0, #8
   23ef8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   23efc:	069a      	lsls	r2, r3, #26
   23efe:	d506      	bpl.n	23f0e <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   23f00:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   23f02:	4a07      	ldr	r2, [pc, #28]	; (23f20 <pin_handler_trigger_uninit+0x30>)
   23f04:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   23f08:	2100      	movs	r1, #0
   23f0a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   23f0e:	f7ff ffaf 	bl	23e70 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   23f12:	2300      	movs	r3, #0
   23f14:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   23f18:	bd38      	pop	{r3, r4, r5, pc}
   23f1a:	bf00      	nop
   23f1c:	200005dc 	.word	0x200005dc
   23f20:	40006000 	.word	0x40006000

00023f24 <nrf_gpio_pin_port_decode>:
{
   23f24:	b510      	push	{r4, lr}
   23f26:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   23f28:	6800      	ldr	r0, [r0, #0]
   23f2a:	f00c f8e5 	bl	300f8 <nrf_gpio_pin_present_check>
   23f2e:	b958      	cbnz	r0, 23f48 <nrf_gpio_pin_port_decode+0x24>
   23f30:	4912      	ldr	r1, [pc, #72]	; (23f7c <nrf_gpio_pin_port_decode+0x58>)
   23f32:	4813      	ldr	r0, [pc, #76]	; (23f80 <nrf_gpio_pin_port_decode+0x5c>)
   23f34:	4a13      	ldr	r2, [pc, #76]	; (23f84 <nrf_gpio_pin_port_decode+0x60>)
   23f36:	f240 2329 	movw	r3, #553	; 0x229
   23f3a:	f008 fb2e 	bl	2c59a <printk>
   23f3e:	4811      	ldr	r0, [pc, #68]	; (23f84 <nrf_gpio_pin_port_decode+0x60>)
   23f40:	f240 2129 	movw	r1, #553	; 0x229
   23f44:	f008 fd6a 	bl	2ca1c <assert_post_action>
    uint32_t pin_number = *p_pin;
   23f48:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   23f4a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23f4e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   23f50:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23f52:	d00d      	beq.n	23f70 <nrf_gpio_pin_port_decode+0x4c>
   23f54:	2b01      	cmp	r3, #1
   23f56:	d00e      	beq.n	23f76 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
   23f58:	490b      	ldr	r1, [pc, #44]	; (23f88 <nrf_gpio_pin_port_decode+0x64>)
   23f5a:	4809      	ldr	r0, [pc, #36]	; (23f80 <nrf_gpio_pin_port_decode+0x5c>)
   23f5c:	4a09      	ldr	r2, [pc, #36]	; (23f84 <nrf_gpio_pin_port_decode+0x60>)
   23f5e:	f240 232e 	movw	r3, #558	; 0x22e
   23f62:	f008 fb1a 	bl	2c59a <printk>
   23f66:	4807      	ldr	r0, [pc, #28]	; (23f84 <nrf_gpio_pin_port_decode+0x60>)
   23f68:	f240 212e 	movw	r1, #558	; 0x22e
   23f6c:	f008 fd56 	bl	2ca1c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   23f70:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   23f74:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   23f76:	4805      	ldr	r0, [pc, #20]	; (23f8c <nrf_gpio_pin_port_decode+0x68>)
   23f78:	e7fc      	b.n	23f74 <nrf_gpio_pin_port_decode+0x50>
   23f7a:	bf00      	nop
   23f7c:	00037080 	.word	0x00037080
   23f80:	00032486 	.word	0x00032486
   23f84:	0003704d 	.word	0x0003704d
   23f88:	000380f0 	.word	0x000380f0
   23f8c:	50000300 	.word	0x50000300

00023f90 <nrfx_gpiote_input_configure>:
{
   23f90:	b5f0      	push	{r4, r5, r6, r7, lr}
   23f92:	4604      	mov	r4, r0
   23f94:	b085      	sub	sp, #20
   23f96:	4617      	mov	r7, r2
   23f98:	461d      	mov	r5, r3
    if (p_input_config)
   23f9a:	b1f1      	cbz	r1, 23fda <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   23f9c:	f7ff ff3c 	bl	23e18 <pin_is_task_output>
   23fa0:	b110      	cbz	r0, 23fa8 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   23fa2:	484a      	ldr	r0, [pc, #296]	; (240cc <nrfx_gpiote_input_configure+0x13c>)
}
   23fa4:	b005      	add	sp, #20
   23fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23fa8:	460b      	mov	r3, r1
   23faa:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   23fae:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   23fb2:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   23fb6:	f10d 020f 	add.w	r2, sp, #15
   23fba:	f10d 010e 	add.w	r1, sp, #14
   23fbe:	4620      	mov	r0, r4
   23fc0:	f00c f8af 	bl	30122 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   23fc4:	4a42      	ldr	r2, [pc, #264]	; (240d0 <nrfx_gpiote_input_configure+0x140>)
   23fc6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   23fca:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   23fce:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   23fd2:	f043 0301 	orr.w	r3, r3, #1
   23fd6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   23fda:	b197      	cbz	r7, 24002 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23fdc:	4b3c      	ldr	r3, [pc, #240]	; (240d0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   23fde:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   23fe0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   23fe2:	f104 0008 	add.w	r0, r4, #8
   23fe6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   23fea:	078f      	lsls	r7, r1, #30
   23fec:	d50c      	bpl.n	24008 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
   23fee:	2a00      	cmp	r2, #0
   23ff0:	d1d7      	bne.n	23fa2 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   23ff2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   23ff6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   23ffa:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   23ffe:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   24002:	bbcd      	cbnz	r5, 24078 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
   24004:	4833      	ldr	r0, [pc, #204]	; (240d4 <nrfx_gpiote_input_configure+0x144>)
   24006:	e7cd      	b.n	23fa4 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   24008:	f021 0120 	bic.w	r1, r1, #32
   2400c:	04c9      	lsls	r1, r1, #19
   2400e:	0cc9      	lsrs	r1, r1, #19
   24010:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   24014:	2a00      	cmp	r2, #0
   24016:	d0ec      	beq.n	23ff2 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
   24018:	2e03      	cmp	r6, #3
   2401a:	d8c2      	bhi.n	23fa2 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   2401c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   2401e:	b92e      	cbnz	r6, 2402c <nrfx_gpiote_input_configure+0x9c>
   24020:	4a2d      	ldr	r2, [pc, #180]	; (240d8 <nrfx_gpiote_input_configure+0x148>)
   24022:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   24026:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   2402a:	e7e2      	b.n	23ff2 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   2402c:	00ba      	lsls	r2, r7, #2
   2402e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   24032:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   24036:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   2403a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2403e:	f02c 0c03 	bic.w	ip, ip, #3
   24042:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   24046:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   2404a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   2404e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   24052:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24056:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   2405a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   2405e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   24062:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   24066:	ea4c 0c0e 	orr.w	ip, ip, lr
   2406a:	f041 0120 	orr.w	r1, r1, #32
   2406e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   24072:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   24076:	e7bc      	b.n	23ff2 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   24078:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   2407c:	4620      	mov	r0, r4
   2407e:	f7ff fef7 	bl	23e70 <release_handler>
    if (!handler)
   24082:	2e00      	cmp	r6, #0
   24084:	d0be      	beq.n	24004 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   24086:	4d12      	ldr	r5, [pc, #72]	; (240d0 <nrfx_gpiote_input_configure+0x140>)
   24088:	682b      	ldr	r3, [r5, #0]
   2408a:	429e      	cmp	r6, r3
   2408c:	d104      	bne.n	24098 <nrfx_gpiote_input_configure+0x108>
   2408e:	686b      	ldr	r3, [r5, #4]
   24090:	429f      	cmp	r7, r3
   24092:	d101      	bne.n	24098 <nrfx_gpiote_input_configure+0x108>
   24094:	2200      	movs	r2, #0
   24096:	e00a      	b.n	240ae <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   24098:	4810      	ldr	r0, [pc, #64]	; (240dc <nrfx_gpiote_input_configure+0x14c>)
   2409a:	f10d 010f 	add.w	r1, sp, #15
   2409e:	f7ff fe75 	bl	23d8c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   240a2:	4b0c      	ldr	r3, [pc, #48]	; (240d4 <nrfx_gpiote_input_configure+0x144>)
   240a4:	4298      	cmp	r0, r3
   240a6:	f47f af7d 	bne.w	23fa4 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   240aa:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   240ae:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   240b2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   240b6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   240b8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   240ba:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   240be:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   240c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   240c6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   240ca:	e79b      	b.n	24004 <nrfx_gpiote_input_configure+0x74>
   240cc:	0bad0004 	.word	0x0bad0004
   240d0:	200005dc 	.word	0x200005dc
   240d4:	0bad0000 	.word	0x0bad0000
   240d8:	40006000 	.word	0x40006000
   240dc:	20000650 	.word	0x20000650

000240e0 <nrfx_gpiote_output_configure>:
{
   240e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   240e2:	4604      	mov	r4, r0
   240e4:	b085      	sub	sp, #20
   240e6:	4615      	mov	r5, r2
    if (p_config)
   240e8:	b309      	cbz	r1, 2412e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   240ea:	f100 0708 	add.w	r7, r0, #8
   240ee:	4e31      	ldr	r6, [pc, #196]	; (241b4 <nrfx_gpiote_output_configure+0xd4>)
   240f0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   240f4:	0798      	lsls	r0, r3, #30
   240f6:	d401      	bmi.n	240fc <nrfx_gpiote_output_configure+0x1c>
   240f8:	069a      	lsls	r2, r3, #26
   240fa:	d458      	bmi.n	241ae <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   240fc:	f013 0f1c 	tst.w	r3, #28
   24100:	d002      	beq.n	24108 <nrfx_gpiote_output_configure+0x28>
   24102:	784b      	ldrb	r3, [r1, #1]
   24104:	2b01      	cmp	r3, #1
   24106:	d052      	beq.n	241ae <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   24108:	2301      	movs	r3, #1
   2410a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   2410e:	2300      	movs	r3, #0
   24110:	e9cd 1300 	strd	r1, r3, [sp]
   24114:	1c4a      	adds	r2, r1, #1
   24116:	1c8b      	adds	r3, r1, #2
   24118:	4620      	mov	r0, r4
   2411a:	f10d 010f 	add.w	r1, sp, #15
   2411e:	f00c f800 	bl	30122 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   24122:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   24126:	f043 0303 	orr.w	r3, r3, #3
   2412a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   2412e:	b915      	cbnz	r5, 24136 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   24130:	4821      	ldr	r0, [pc, #132]	; (241b8 <nrfx_gpiote_output_configure+0xd8>)
}
   24132:	b005      	add	sp, #20
   24134:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   24136:	4e1f      	ldr	r6, [pc, #124]	; (241b4 <nrfx_gpiote_output_configure+0xd4>)
   24138:	f104 0708 	add.w	r7, r4, #8
   2413c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   24140:	0783      	lsls	r3, r0, #30
   24142:	d534      	bpl.n	241ae <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   24144:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   24148:	4661      	mov	r1, ip
   2414a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   2414c:	f020 0020 	bic.w	r0, r0, #32
   24150:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   24154:	04c0      	lsls	r0, r0, #19
   24156:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   2415a:	0cc0      	lsrs	r0, r0, #19
   2415c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   24160:	2300      	movs	r3, #0
   24162:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   24166:	786a      	ldrb	r2, [r5, #1]
   24168:	2a00      	cmp	r2, #0
   2416a:	d0e1      	beq.n	24130 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   2416c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   24170:	78ad      	ldrb	r5, [r5, #2]
   24172:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   24176:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   2417a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2417e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   24182:	0223      	lsls	r3, r4, #8
   24184:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   24188:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2418a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   2418e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   24192:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   24194:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   24196:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   2419a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   2419e:	432b      	orrs	r3, r5
   241a0:	f040 0020 	orr.w	r0, r0, #32
   241a4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   241a8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   241ac:	e7c0      	b.n	24130 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   241ae:	4803      	ldr	r0, [pc, #12]	; (241bc <nrfx_gpiote_output_configure+0xdc>)
   241b0:	e7bf      	b.n	24132 <nrfx_gpiote_output_configure+0x52>
   241b2:	bf00      	nop
   241b4:	200005dc 	.word	0x200005dc
   241b8:	0bad0000 	.word	0x0bad0000
   241bc:	0bad0004 	.word	0x0bad0004

000241c0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   241c0:	4b01      	ldr	r3, [pc, #4]	; (241c8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   241c2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   241c6:	4770      	bx	lr
   241c8:	200005dc 	.word	0x200005dc

000241cc <nrfx_gpiote_channel_get>:
{
   241cc:	b538      	push	{r3, r4, r5, lr}
   241ce:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   241d0:	460d      	mov	r5, r1
   241d2:	b959      	cbnz	r1, 241ec <nrfx_gpiote_channel_get+0x20>
   241d4:	490b      	ldr	r1, [pc, #44]	; (24204 <nrfx_gpiote_channel_get+0x38>)
   241d6:	480c      	ldr	r0, [pc, #48]	; (24208 <nrfx_gpiote_channel_get+0x3c>)
   241d8:	4a0c      	ldr	r2, [pc, #48]	; (2420c <nrfx_gpiote_channel_get+0x40>)
   241da:	f240 2335 	movw	r3, #565	; 0x235
   241de:	f008 f9dc 	bl	2c59a <printk>
   241e2:	480a      	ldr	r0, [pc, #40]	; (2420c <nrfx_gpiote_channel_get+0x40>)
   241e4:	f240 2135 	movw	r1, #565	; 0x235
   241e8:	f008 fc18 	bl	2ca1c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   241ec:	3408      	adds	r4, #8
   241ee:	4b08      	ldr	r3, [pc, #32]	; (24210 <nrfx_gpiote_channel_get+0x44>)
   241f0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
   241f4:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   241f6:	bf43      	ittte	mi
   241f8:	0b5b      	lsrmi	r3, r3, #13
   241fa:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
   241fc:	4805      	ldrmi	r0, [pc, #20]	; (24214 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
   241fe:	4806      	ldrpl	r0, [pc, #24]	; (24218 <nrfx_gpiote_channel_get+0x4c>)
}
   24200:	bd38      	pop	{r3, r4, r5, pc}
   24202:	bf00      	nop
   24204:	000376b9 	.word	0x000376b9
   24208:	00032486 	.word	0x00032486
   2420c:	00037641 	.word	0x00037641
   24210:	200005dc 	.word	0x200005dc
   24214:	0bad0000 	.word	0x0bad0000
   24218:	0bad0004 	.word	0x0bad0004

0002421c <nrfx_gpiote_init>:
{
   2421c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   2421e:	4c0e      	ldr	r4, [pc, #56]	; (24258 <nrfx_gpiote_init+0x3c>)
   24220:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
   24224:	b9b5      	cbnz	r5, 24254 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   24226:	2260      	movs	r2, #96	; 0x60
   24228:	4629      	mov	r1, r5
   2422a:	f104 0010 	add.w	r0, r4, #16
   2422e:	f00c f9fc 	bl	3062a <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   24232:	2006      	movs	r0, #6
   24234:	f7f2 fea8 	bl	16f88 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24238:	4b08      	ldr	r3, [pc, #32]	; (2425c <nrfx_gpiote_init+0x40>)
    return err_code;
   2423a:	4809      	ldr	r0, [pc, #36]	; (24260 <nrfx_gpiote_init+0x44>)
   2423c:	601d      	str	r5, [r3, #0]
   2423e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   24240:	4b08      	ldr	r3, [pc, #32]	; (24264 <nrfx_gpiote_init+0x48>)
   24242:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   24246:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2424a:	2301      	movs	r3, #1
   2424c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   24250:	6763      	str	r3, [r4, #116]	; 0x74
}
   24252:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   24254:	4804      	ldr	r0, [pc, #16]	; (24268 <nrfx_gpiote_init+0x4c>)
   24256:	e7fc      	b.n	24252 <nrfx_gpiote_init+0x36>
   24258:	200005dc 	.word	0x200005dc
   2425c:	4000617c 	.word	0x4000617c
   24260:	0bad0000 	.word	0x0bad0000
   24264:	40006000 	.word	0x40006000
   24268:	0bad0005 	.word	0x0bad0005

0002426c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2426c:	4b03      	ldr	r3, [pc, #12]	; (2427c <nrfx_gpiote_is_init+0x10>)
   2426e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
   24272:	3800      	subs	r0, #0
   24274:	bf18      	it	ne
   24276:	2001      	movne	r0, #1
   24278:	4770      	bx	lr
   2427a:	bf00      	nop
   2427c:	200005dc 	.word	0x200005dc

00024280 <nrfx_gpiote_channel_free>:
{
   24280:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   24282:	4801      	ldr	r0, [pc, #4]	; (24288 <nrfx_gpiote_channel_free+0x8>)
   24284:	f7ff bda6 	b.w	23dd4 <nrfx_flag32_free>
   24288:	2000064c 	.word	0x2000064c

0002428c <nrfx_gpiote_channel_alloc>:
{
   2428c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2428e:	4801      	ldr	r0, [pc, #4]	; (24294 <nrfx_gpiote_channel_alloc+0x8>)
   24290:	f7ff bd7c 	b.w	23d8c <nrfx_flag32_alloc>
   24294:	2000064c 	.word	0x2000064c

00024298 <nrfx_gpiote_trigger_enable>:
{
   24298:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   2429a:	4d31      	ldr	r5, [pc, #196]	; (24360 <nrfx_gpiote_trigger_enable+0xc8>)
   2429c:	f100 0708 	add.w	r7, r0, #8
{
   242a0:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   242a2:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
   242a6:	f013 0f1c 	tst.w	r3, #28
{
   242aa:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   242ac:	d10b      	bne.n	242c6 <nrfx_gpiote_trigger_enable+0x2e>
   242ae:	492d      	ldr	r1, [pc, #180]	; (24364 <nrfx_gpiote_trigger_enable+0xcc>)
   242b0:	482d      	ldr	r0, [pc, #180]	; (24368 <nrfx_gpiote_trigger_enable+0xd0>)
   242b2:	4a2e      	ldr	r2, [pc, #184]	; (2436c <nrfx_gpiote_trigger_enable+0xd4>)
   242b4:	f240 33df 	movw	r3, #991	; 0x3df
   242b8:	f008 f96f 	bl	2c59a <printk>
   242bc:	482b      	ldr	r0, [pc, #172]	; (2436c <nrfx_gpiote_trigger_enable+0xd4>)
   242be:	f240 31df 	movw	r1, #991	; 0x3df
   242c2:	f008 fbab 	bl	2ca1c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   242c6:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   242ca:	0683      	lsls	r3, r0, #26
   242cc:	d51f      	bpl.n	2430e <nrfx_gpiote_trigger_enable+0x76>
   242ce:	f010 0302 	ands.w	r3, r0, #2
   242d2:	d11c      	bne.n	2430e <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   242d4:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   242d6:	4608      	mov	r0, r1
   242d8:	f00b ff1f 	bl	3011a <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   242dc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   242e0:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   242e4:	6003      	str	r3, [r0, #0]
   242e6:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   242e8:	008b      	lsls	r3, r1, #2
   242ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   242ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   242f2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   242f6:	f042 0201 	orr.w	r2, r2, #1
   242fa:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   242fe:	b126      	cbz	r6, 2430a <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
   24300:	4a1b      	ldr	r2, [pc, #108]	; (24370 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   24302:	2301      	movs	r3, #1
   24304:	408b      	lsls	r3, r1
   24306:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   2430a:	b003      	add	sp, #12
   2430c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   2430e:	b95e      	cbnz	r6, 24328 <nrfx_gpiote_trigger_enable+0x90>
   24310:	4918      	ldr	r1, [pc, #96]	; (24374 <nrfx_gpiote_trigger_enable+0xdc>)
   24312:	4815      	ldr	r0, [pc, #84]	; (24368 <nrfx_gpiote_trigger_enable+0xd0>)
   24314:	4a15      	ldr	r2, [pc, #84]	; (2436c <nrfx_gpiote_trigger_enable+0xd4>)
   24316:	f240 33ee 	movw	r3, #1006	; 0x3ee
   2431a:	f008 f93e 	bl	2c59a <printk>
   2431e:	4813      	ldr	r0, [pc, #76]	; (2436c <nrfx_gpiote_trigger_enable+0xd4>)
   24320:	f240 31ee 	movw	r1, #1006	; 0x3ee
   24324:	f008 fb7a 	bl	2ca1c <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   24328:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
   2432c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   24330:	2b04      	cmp	r3, #4
   24332:	d010      	beq.n	24356 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   24334:	2b05      	cmp	r3, #5
   24336:	d010      	beq.n	2435a <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   24338:	a801      	add	r0, sp, #4
   2433a:	9401      	str	r4, [sp, #4]
   2433c:	f7ff fdf2 	bl	23f24 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   24340:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   24342:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   24346:	40d9      	lsrs	r1, r3
   24348:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2434c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2434e:	4620      	mov	r0, r4
   24350:	f00b ff32 	bl	301b8 <nrf_gpio_cfg_sense_set>
}
   24354:	e7d9      	b.n	2430a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   24356:	2103      	movs	r1, #3
   24358:	e7f9      	b.n	2434e <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2435a:	2102      	movs	r1, #2
   2435c:	e7f7      	b.n	2434e <nrfx_gpiote_trigger_enable+0xb6>
   2435e:	bf00      	nop
   24360:	200005dc 	.word	0x200005dc
   24364:	000376c3 	.word	0x000376c3
   24368:	00032486 	.word	0x00032486
   2436c:	00037641 	.word	0x00037641
   24370:	40006000 	.word	0x40006000
   24374:	000376d8 	.word	0x000376d8

00024378 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   24378:	4b0e      	ldr	r3, [pc, #56]	; (243b4 <nrfx_gpiote_trigger_disable+0x3c>)
   2437a:	f100 0208 	add.w	r2, r0, #8
   2437e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   24382:	0699      	lsls	r1, r3, #26
   24384:	d513      	bpl.n	243ae <nrfx_gpiote_trigger_disable+0x36>
   24386:	079a      	lsls	r2, r3, #30
   24388:	d411      	bmi.n	243ae <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2438a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2438c:	2201      	movs	r2, #1
   2438e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   24390:	009b      	lsls	r3, r3, #2
   24392:	4909      	ldr	r1, [pc, #36]	; (243b8 <nrfx_gpiote_trigger_disable+0x40>)
   24394:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24398:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2439c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   243a0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   243a4:	f022 0203 	bic.w	r2, r2, #3
   243a8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   243ac:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   243ae:	2100      	movs	r1, #0
   243b0:	f00b bf02 	b.w	301b8 <nrf_gpio_cfg_sense_set>
   243b4:	200005dc 	.word	0x200005dc
   243b8:	40006000 	.word	0x40006000

000243bc <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   243bc:	4b0e      	ldr	r3, [pc, #56]	; (243f8 <nrfx_gpiote_pin_uninit+0x3c>)
   243be:	f100 0208 	add.w	r2, r0, #8
{
   243c2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   243c4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   243c8:	07db      	lsls	r3, r3, #31
{
   243ca:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   243cc:	d511      	bpl.n	243f2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   243ce:	f7ff ffd3 	bl	24378 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   243d2:	4620      	mov	r0, r4
   243d4:	f7ff fd8c 	bl	23ef0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   243d8:	a801      	add	r0, sp, #4
   243da:	9401      	str	r4, [sp, #4]
   243dc:	f7ff fda2 	bl	23f24 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   243e0:	9b01      	ldr	r3, [sp, #4]
   243e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   243e6:	2202      	movs	r2, #2
   243e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   243ec:	4803      	ldr	r0, [pc, #12]	; (243fc <nrfx_gpiote_pin_uninit+0x40>)
}
   243ee:	b002      	add	sp, #8
   243f0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   243f2:	4803      	ldr	r0, [pc, #12]	; (24400 <nrfx_gpiote_pin_uninit+0x44>)
   243f4:	e7fb      	b.n	243ee <nrfx_gpiote_pin_uninit+0x32>
   243f6:	bf00      	nop
   243f8:	200005dc 	.word	0x200005dc
   243fc:	0bad0000 	.word	0x0bad0000
   24400:	0bad0004 	.word	0x0bad0004

00024404 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   24404:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24408:	4b65      	ldr	r3, [pc, #404]	; (245a0 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   2440a:	4866      	ldr	r0, [pc, #408]	; (245a4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2440c:	4966      	ldr	r1, [pc, #408]	; (245a8 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
   2440e:	2500      	movs	r5, #0
{
   24410:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   24412:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24414:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24416:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   24418:	b136      	cbz	r6, 24428 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   2441a:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   2441e:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24420:	bf1e      	ittt	ne
   24422:	601c      	strne	r4, [r3, #0]
   24424:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   24426:	4315      	orrne	r5, r2
        }
        mask <<= 1;
   24428:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2442a:	428b      	cmp	r3, r1
        mask <<= 1;
   2442c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   24430:	d1f1      	bne.n	24416 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   24432:	4f5e      	ldr	r7, [pc, #376]	; (245ac <nrfx_gpiote_irq_handler+0x1a8>)
   24434:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   24436:	b37b      	cbz	r3, 24498 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
   24438:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2443c:	4e5c      	ldr	r6, [pc, #368]	; (245b0 <nrfx_gpiote_irq_handler+0x1ac>)
   2443e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   24442:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
   24444:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   24448:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   2444c:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
   2444e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   24452:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   24454:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   24458:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2445c:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
   24460:	f8d9 3000 	ldr.w	r3, [r9]
   24464:	b9f3      	cbnz	r3, 244a4 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   24466:	f108 0820 	add.w	r8, r8, #32
   2446a:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
   2446e:	f109 0904 	add.w	r9, r9, #4
   24472:	d1f5      	bne.n	24460 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   24474:	603b      	str	r3, [r7, #0]
   24476:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
   24478:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
   2447a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2447e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   24482:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
   24484:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   24488:	9b01      	ldr	r3, [sp, #4]
   2448a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   2448e:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
   24490:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   24494:	4313      	orrs	r3, r2
   24496:	d1dd      	bne.n	24454 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
   24498:	2401      	movs	r4, #1
    while (mask)
   2449a:	2d00      	cmp	r5, #0
   2449c:	d168      	bne.n	24570 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2449e:	b009      	add	sp, #36	; 0x24
   244a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   244a4:	fa93 f3a3 	rbit	r3, r3
   244a8:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
   244ac:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   244b0:	f106 0208 	add.w	r2, r6, #8
   244b4:	4b3f      	ldr	r3, [pc, #252]	; (245b4 <nrfx_gpiote_irq_handler+0x1b0>)
   244b6:	9605      	str	r6, [sp, #20]
   244b8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   244bc:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   244c0:	08f4      	lsrs	r4, r6, #3
   244c2:	9302      	str	r3, [sp, #8]
   244c4:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
   244c6:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
   244c8:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   244cc:	fa0b fc00 	lsl.w	ip, fp, r0
   244d0:	5d18      	ldrb	r0, [r3, r4]
   244d2:	ea20 000c 	bic.w	r0, r0, ip
   244d6:	5518      	strb	r0, [r3, r4]
   244d8:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   244da:	a805      	add	r0, sp, #20
   244dc:	9103      	str	r1, [sp, #12]
   244de:	f7ff fd21 	bl	23f24 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   244e2:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
   244e4:	9903      	ldr	r1, [sp, #12]
   244e6:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   244ea:	074b      	lsls	r3, r1, #29
   244ec:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   244f0:	f3c4 4401 	ubfx	r4, r4, #16, #2
   244f4:	d523      	bpl.n	2453e <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
   244f6:	4651      	mov	r1, sl
   244f8:	4630      	mov	r0, r6
   244fa:	f7ff fc9b 	bl	23e34 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   244fe:	a805      	add	r0, sp, #20
   24500:	9605      	str	r6, [sp, #20]
   24502:	f7ff fd0f 	bl	23f24 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   24506:	9a05      	ldr	r2, [sp, #20]
   24508:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   2450c:	b2e4      	uxtb	r4, r4
   2450e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   24512:	f3c2 4201 	ubfx	r2, r2, #16, #2
   24516:	4294      	cmp	r4, r2
   24518:	d107      	bne.n	2452a <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2451a:	2100      	movs	r1, #0
   2451c:	4630      	mov	r0, r6
   2451e:	f00b fe4b 	bl	301b8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   24522:	4621      	mov	r1, r4
   24524:	4630      	mov	r0, r6
   24526:	f00b fe47 	bl	301b8 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2452a:	a805      	add	r0, sp, #20
   2452c:	9605      	str	r6, [sp, #20]
   2452e:	f7ff fcf9 	bl	23f24 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   24532:	9b05      	ldr	r3, [sp, #20]
   24534:	fa0b f303 	lsl.w	r3, fp, r3
   24538:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   2453c:	e790      	b.n	24460 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2453e:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   24540:	bf0c      	ite	eq
   24542:	2103      	moveq	r1, #3
   24544:	2102      	movne	r1, #2
   24546:	4630      	mov	r0, r6
   24548:	f00b fe36 	bl	301b8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2454c:	9b02      	ldr	r3, [sp, #8]
   2454e:	2b03      	cmp	r3, #3
   24550:	d004      	beq.n	2455c <nrfx_gpiote_irq_handler+0x158>
   24552:	2c02      	cmp	r4, #2
   24554:	d107      	bne.n	24566 <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   24556:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2455a:	d1e6      	bne.n	2452a <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
   2455c:	4651      	mov	r1, sl
   2455e:	4630      	mov	r0, r6
   24560:	f7ff fc68 	bl	23e34 <call_handler>
   24564:	e7e1      	b.n	2452a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   24566:	2c03      	cmp	r4, #3
   24568:	d1df      	bne.n	2452a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2456a:	f1ba 0f02 	cmp.w	sl, #2
   2456e:	e7f4      	b.n	2455a <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
   24570:	fa95 f3a5 	rbit	r3, r5
   24574:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   24578:	fa04 f203 	lsl.w	r2, r4, r3
   2457c:	009b      	lsls	r3, r3, #2
   2457e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   24582:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   24586:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2458a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2458e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   24592:	f3c0 2005 	ubfx	r0, r0, #8, #6
   24596:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2459a:	f7ff fc4b 	bl	23e34 <call_handler>
   2459e:	e77c      	b.n	2449a <nrfx_gpiote_irq_handler+0x96>
   245a0:	40006100 	.word	0x40006100
   245a4:	40006000 	.word	0x40006000
   245a8:	40006120 	.word	0x40006120
   245ac:	4000617c 	.word	0x4000617c
   245b0:	50000300 	.word	0x50000300
   245b4:	200005dc 	.word	0x200005dc

000245b8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   245b8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   245ba:	4801      	ldr	r0, [pc, #4]	; (245c0 <nrfx_ppi_channel_alloc+0x8>)
   245bc:	f7ff bbe6 	b.w	23d8c <nrfx_flag32_alloc>
   245c0:	20000658 	.word	0x20000658

000245c4 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
   245c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
   245c8:	4e13      	ldr	r6, [pc, #76]	; (24618 <device_visitor+0x54>)
   245ca:	460f      	mov	r7, r1
   245cc:	4619      	mov	r1, r3
   245ce:	4b13      	ldr	r3, [pc, #76]	; (2461c <device_visitor+0x58>)
   245d0:	4692      	mov	sl, r2
   245d2:	eba3 0806 	sub.w	r8, r3, r6
   245d6:	4a12      	ldr	r2, [pc, #72]	; (24620 <device_visitor+0x5c>)
   245d8:	ea4f 03e8 	mov.w	r3, r8, asr #3
   245dc:	4681      	mov	r9, r0
   245de:	fb02 f803 	mul.w	r8, r2, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
   245e2:	2500      	movs	r5, #0
		dev = &__device_start[dev_handle - 1];
   245e4:	f04f 0b18 	mov.w	fp, #24
   245e8:	42bd      	cmp	r5, r7
   245ea:	d103      	bne.n	245f4 <device_visitor+0x30>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
   245ec:	4628      	mov	r0, r5
}
   245ee:	b003      	add	sp, #12
   245f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
   245f4:	f939 4015 	ldrsh.w	r4, [r9, r5, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
   245f8:	2c00      	cmp	r4, #0
   245fa:	dd0b      	ble.n	24614 <device_visitor+0x50>
   245fc:	45a0      	cmp	r8, r4
   245fe:	d309      	bcc.n	24614 <device_visitor+0x50>
		dev = &__device_start[dev_handle - 1];
   24600:	3c01      	subs	r4, #1
   24602:	fb0b 6004 	mla	r0, fp, r4, r6
		int rc = visitor_cb(rdev, context);
   24606:	9101      	str	r1, [sp, #4]
   24608:	47d0      	blx	sl
		if (rc < 0) {
   2460a:	2800      	cmp	r0, #0
   2460c:	dbef      	blt.n	245ee <device_visitor+0x2a>
	for (size_t i = 0; i < handle_count; ++i) {
   2460e:	9901      	ldr	r1, [sp, #4]
   24610:	3501      	adds	r5, #1
   24612:	e7e9      	b.n	245e8 <device_visitor+0x24>
	const struct device *dev = NULL;
   24614:	2000      	movs	r0, #0
   24616:	e7f6      	b.n	24606 <device_visitor+0x42>
   24618:	00030990 	.word	0x00030990
   2461c:	00030a20 	.word	0x00030a20
   24620:	aaaaaaab 	.word	0xaaaaaaab

00024624 <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24624:	4b0e      	ldr	r3, [pc, #56]	; (24660 <z_sys_init_run_level+0x3c>)
{
   24626:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   24628:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   2462c:	3001      	adds	r0, #1
   2462e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   24632:	42a6      	cmp	r6, r4
   24634:	d800      	bhi.n	24638 <z_sys_init_run_level+0x14>
}
   24636:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   24638:	e9d4 3500 	ldrd	r3, r5, [r4]
   2463c:	4628      	mov	r0, r5
   2463e:	4798      	blx	r3
		if (dev != NULL) {
   24640:	b165      	cbz	r5, 2465c <z_sys_init_run_level+0x38>
			if (rc != 0) {
   24642:	68eb      	ldr	r3, [r5, #12]
   24644:	b130      	cbz	r0, 24654 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   24646:	2800      	cmp	r0, #0
   24648:	bfb8      	it	lt
   2464a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   2464c:	28ff      	cmp	r0, #255	; 0xff
   2464e:	bfa8      	it	ge
   24650:	20ff      	movge	r0, #255	; 0xff
   24652:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   24654:	785a      	ldrb	r2, [r3, #1]
   24656:	f042 0201 	orr.w	r2, r2, #1
   2465a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   2465c:	3408      	adds	r4, #8
   2465e:	e7e8      	b.n	24632 <z_sys_init_run_level+0xe>
   24660:	00031ec8 	.word	0x00031ec8

00024664 <z_device_get_all_static>:
	*devices = __device_start;
   24664:	4a03      	ldr	r2, [pc, #12]	; (24674 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   24666:	4b04      	ldr	r3, [pc, #16]	; (24678 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   24668:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   2466a:	1a9b      	subs	r3, r3, r2
}
   2466c:	4803      	ldr	r0, [pc, #12]	; (2467c <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   2466e:	10db      	asrs	r3, r3, #3
}
   24670:	4358      	muls	r0, r3
   24672:	4770      	bx	lr
   24674:	00030990 	.word	0x00030990
   24678:	00030a20 	.word	0x00030a20
   2467c:	aaaaaaab 	.word	0xaaaaaaab

00024680 <z_impl_device_get_binding>:
{
   24680:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   24682:	4605      	mov	r5, r0
   24684:	b910      	cbnz	r0, 2468c <z_impl_device_get_binding+0xc>
		return NULL;
   24686:	2400      	movs	r4, #0
}
   24688:	4620      	mov	r0, r4
   2468a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   2468c:	7803      	ldrb	r3, [r0, #0]
   2468e:	2b00      	cmp	r3, #0
   24690:	d0f9      	beq.n	24686 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   24692:	4a0f      	ldr	r2, [pc, #60]	; (246d0 <z_impl_device_get_binding+0x50>)
   24694:	4c0f      	ldr	r4, [pc, #60]	; (246d4 <z_impl_device_get_binding+0x54>)
   24696:	4616      	mov	r6, r2
   24698:	4294      	cmp	r4, r2
   2469a:	d108      	bne.n	246ae <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   2469c:	4c0d      	ldr	r4, [pc, #52]	; (246d4 <z_impl_device_get_binding+0x54>)
   2469e:	42b4      	cmp	r4, r6
   246a0:	d0f1      	beq.n	24686 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   246a2:	4620      	mov	r0, r4
   246a4:	f00b fd98 	bl	301d8 <z_device_ready>
   246a8:	b950      	cbnz	r0, 246c0 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   246aa:	3418      	adds	r4, #24
   246ac:	e7f7      	b.n	2469e <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   246ae:	4620      	mov	r0, r4
   246b0:	f00b fd92 	bl	301d8 <z_device_ready>
   246b4:	b110      	cbz	r0, 246bc <z_impl_device_get_binding+0x3c>
   246b6:	6823      	ldr	r3, [r4, #0]
   246b8:	42ab      	cmp	r3, r5
   246ba:	d0e5      	beq.n	24688 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   246bc:	3418      	adds	r4, #24
   246be:	e7eb      	b.n	24698 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   246c0:	6821      	ldr	r1, [r4, #0]
   246c2:	4628      	mov	r0, r5
   246c4:	f7e8 fe6c 	bl	d3a0 <strcmp>
   246c8:	2800      	cmp	r0, #0
   246ca:	d1ee      	bne.n	246aa <z_impl_device_get_binding+0x2a>
   246cc:	e7dc      	b.n	24688 <z_impl_device_get_binding+0x8>
   246ce:	bf00      	nop
   246d0:	00030a20 	.word	0x00030a20
   246d4:	00030990 	.word	0x00030990

000246d8 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   246d8:	4b01      	ldr	r3, [pc, #4]	; (246e0 <z_impl_z_errno+0x8>)
   246da:	6898      	ldr	r0, [r3, #8]
}
   246dc:	30a0      	adds	r0, #160	; 0xa0
   246de:	4770      	bx	lr
   246e0:	20002040 	.word	0x20002040

000246e4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   246e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   246e8:	4605      	mov	r5, r0
   246ea:	460f      	mov	r7, r1
	__asm__ volatile(
   246ec:	f04f 0340 	mov.w	r3, #64	; 0x40
   246f0:	f3ef 8811 	mrs	r8, BASEPRI
   246f4:	f383 8812 	msr	BASEPRI_MAX, r3
   246f8:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   246fc:	4c33      	ldr	r4, [pc, #204]	; (247cc <z_fatal_error+0xe8>)
	return z_impl_z_current_get();
   246fe:	f003 fa6b 	bl	27bd8 <z_impl_z_current_get>
   24702:	6823      	ldr	r3, [r4, #0]
   24704:	0759      	lsls	r1, r3, #29
   24706:	4606      	mov	r6, r0
   24708:	d05d      	beq.n	247c6 <z_fatal_error+0xe2>
   2470a:	4b31      	ldr	r3, [pc, #196]	; (247d0 <z_fatal_error+0xec>)
   2470c:	4831      	ldr	r0, [pc, #196]	; (247d4 <z_fatal_error+0xf0>)
   2470e:	1ae3      	subs	r3, r4, r3
   24710:	2d04      	cmp	r5, #4
   24712:	ea4f 0393 	mov.w	r3, r3, lsr #2
   24716:	bf96      	itet	ls
   24718:	4a2f      	ldrls	r2, [pc, #188]	; (247d8 <z_fatal_error+0xf4>)
   2471a:	4a30      	ldrhi	r2, [pc, #192]	; (247dc <z_fatal_error+0xf8>)
   2471c:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   24720:	019b      	lsls	r3, r3, #6
   24722:	f043 0301 	orr.w	r3, r3, #1
   24726:	f8ad 3000 	strh.w	r3, [sp]
   2472a:	4629      	mov	r1, r5
   2472c:	2300      	movs	r3, #0
   2472e:	f008 fb10 	bl	2cd52 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   24732:	b17f      	cbz	r7, 24754 <z_fatal_error+0x70>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   24734:	69fb      	ldr	r3, [r7, #28]
   24736:	f3c3 0308 	ubfx	r3, r3, #0, #9
   2473a:	b15b      	cbz	r3, 24754 <z_fatal_error+0x70>
		LOG_ERR("Fault during interrupt handling\n");
   2473c:	6823      	ldr	r3, [r4, #0]
   2473e:	075a      	lsls	r2, r3, #29
   24740:	d01b      	beq.n	2477a <z_fatal_error+0x96>
   24742:	4923      	ldr	r1, [pc, #140]	; (247d0 <z_fatal_error+0xec>)
   24744:	4826      	ldr	r0, [pc, #152]	; (247e0 <z_fatal_error+0xfc>)
   24746:	1a61      	subs	r1, r4, r1
   24748:	0889      	lsrs	r1, r1, #2
   2474a:	0189      	lsls	r1, r1, #6
   2474c:	f041 0101 	orr.w	r1, r1, #1
   24750:	f008 fac5 	bl	2ccde <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   24754:	6823      	ldr	r3, [r4, #0]
   24756:	075b      	lsls	r3, r3, #29
   24758:	d00f      	beq.n	2477a <z_fatal_error+0x96>
   2475a:	4b1d      	ldr	r3, [pc, #116]	; (247d0 <z_fatal_error+0xec>)
   2475c:	1ae4      	subs	r4, r4, r3
   2475e:	08a4      	lsrs	r4, r4, #2
   24760:	01a4      	lsls	r4, r4, #6
   24762:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   24766:	bb2e      	cbnz	r6, 247b4 <z_fatal_error+0xd0>
		thread_name = "unknown";
   24768:	481e      	ldr	r0, [pc, #120]	; (247e4 <z_fatal_error+0x100>)
   2476a:	f7ed ffdb 	bl	12724 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   2476e:	4623      	mov	r3, r4
   24770:	4602      	mov	r2, r0
   24772:	4631      	mov	r1, r6
   24774:	481c      	ldr	r0, [pc, #112]	; (247e8 <z_fatal_error+0x104>)
   24776:	f008 fad3 	bl	2cd20 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   2477a:	4639      	mov	r1, r7
   2477c:	4628      	mov	r0, r5
   2477e:	f7fe fb1f 	bl	22dc0 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   24782:	2d04      	cmp	r5, #4
   24784:	d10c      	bne.n	247a0 <z_fatal_error+0xbc>
   24786:	4919      	ldr	r1, [pc, #100]	; (247ec <z_fatal_error+0x108>)
   24788:	4a19      	ldr	r2, [pc, #100]	; (247f0 <z_fatal_error+0x10c>)
   2478a:	481a      	ldr	r0, [pc, #104]	; (247f4 <z_fatal_error+0x110>)
   2478c:	238f      	movs	r3, #143	; 0x8f
   2478e:	f007 ff04 	bl	2c59a <printk>
   24792:	4819      	ldr	r0, [pc, #100]	; (247f8 <z_fatal_error+0x114>)
   24794:	f007 ff01 	bl	2c59a <printk>
   24798:	4815      	ldr	r0, [pc, #84]	; (247f0 <z_fatal_error+0x10c>)
   2479a:	218f      	movs	r1, #143	; 0x8f
   2479c:	f008 f93e 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   247a0:	f388 8811 	msr	BASEPRI, r8
   247a4:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   247a8:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   247aa:	b002      	add	sp, #8
   247ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   247b0:	f7f3 b95c 	b.w	17a6c <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   247b4:	4630      	mov	r0, r6
   247b6:	f00b fd5b 	bl	30270 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   247ba:	2800      	cmp	r0, #0
   247bc:	d0d4      	beq.n	24768 <z_fatal_error+0x84>
   247be:	7803      	ldrb	r3, [r0, #0]
   247c0:	2b00      	cmp	r3, #0
   247c2:	d0d1      	beq.n	24768 <z_fatal_error+0x84>
   247c4:	e7d1      	b.n	2476a <z_fatal_error+0x86>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   247c6:	2f00      	cmp	r7, #0
   247c8:	d1b4      	bne.n	24734 <z_fatal_error+0x50>
   247ca:	e7d6      	b.n	2477a <z_fatal_error+0x96>
   247cc:	200007ec 	.word	0x200007ec
   247d0:	200007a8 	.word	0x200007a8
   247d4:	000376f9 	.word	0x000376f9
   247d8:	00031ee0 	.word	0x00031ee0
   247dc:	000376e3 	.word	0x000376e3
   247e0:	00037721 	.word	0x00037721
   247e4:	000376f1 	.word	0x000376f1
   247e8:	00037742 	.word	0x00037742
   247ec:	0003777c 	.word	0x0003777c
   247f0:	0003775a 	.word	0x0003775a
   247f4:	00032486 	.word	0x00032486
   247f8:	00037799 	.word	0x00037799

000247fc <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   247fc:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   247fe:	4b15      	ldr	r3, [pc, #84]	; (24854 <init_idle_thread+0x58>)
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   24800:	4a15      	ldr	r2, [pc, #84]	; (24858 <init_idle_thread+0x5c>)
{
   24802:	b088      	sub	sp, #32
	snprintk(tname, 8, "idle %02d", i);
   24804:	ae06      	add	r6, sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   24806:	25c0      	movs	r5, #192	; 0xc0
   24808:	fb05 3500 	mla	r5, r5, r0, r3
{
   2480c:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
   2480e:	4603      	mov	r3, r0
   24810:	2108      	movs	r1, #8
   24812:	4630      	mov	r0, r6
   24814:	f007 fece 	bl	2c5b4 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   24818:	230f      	movs	r3, #15
   2481a:	2201      	movs	r2, #1
   2481c:	e9cd 3203 	strd	r3, r2, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   24820:	4a0e      	ldr	r2, [pc, #56]	; (2485c <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
   24822:	490f      	ldr	r1, [pc, #60]	; (24860 <init_idle_thread+0x64>)
   24824:	9605      	str	r6, [sp, #20]
   24826:	2300      	movs	r3, #0
   24828:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2482c:	231c      	movs	r3, #28
   2482e:	fb03 2304 	mla	r3, r3, r4, r2
	z_setup_new_thread(thread, stack,
   24832:	f44f 70b0 	mov.w	r0, #352	; 0x160
   24836:	9300      	str	r3, [sp, #0]
   24838:	fb00 1104 	mla	r1, r0, r4, r1
   2483c:	4b09      	ldr	r3, [pc, #36]	; (24864 <init_idle_thread+0x68>)
   2483e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   24842:	4628      	mov	r0, r5
   24844:	f000 fc12 	bl	2506c <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   24848:	7b6b      	ldrb	r3, [r5, #13]
   2484a:	f023 0304 	bic.w	r3, r3, #4
   2484e:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   24850:	b008      	add	sp, #32
   24852:	bd70      	pop	{r4, r5, r6, pc}
   24854:	20002080 	.word	0x20002080
   24858:	00037818 	.word	0x00037818
   2485c:	20002040 	.word	0x20002040
   24860:	20006940 	.word	0x20006940
   24864:	000253f5 	.word	0x000253f5

00024868 <bg_thread_main>:
{
   24868:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   2486a:	4b0a      	ldr	r3, [pc, #40]	; (24894 <bg_thread_main+0x2c>)
   2486c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2486e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   24870:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   24872:	f7ff fed7 	bl	24624 <z_sys_init_run_level>
	boot_banner();
   24876:	f00b fea0 	bl	305ba <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   2487a:	2003      	movs	r0, #3
   2487c:	f7ff fed2 	bl	24624 <z_sys_init_run_level>
	z_init_static_threads();
   24880:	f000 fd0a 	bl	25298 <z_init_static_threads>
	main();
   24884:	f7ec fc6e 	bl	11164 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   24888:	4a03      	ldr	r2, [pc, #12]	; (24898 <bg_thread_main+0x30>)
   2488a:	7b13      	ldrb	r3, [r2, #12]
   2488c:	f023 0301 	bic.w	r3, r3, #1
   24890:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   24892:	bd08      	pop	{r3, pc}
   24894:	20004183 	.word	0x20004183
   24898:	20002140 	.word	0x20002140

0002489c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   2489c:	4802      	ldr	r0, [pc, #8]	; (248a8 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   2489e:	4a03      	ldr	r2, [pc, #12]	; (248ac <z_bss_zero+0x10>)
   248a0:	2100      	movs	r1, #0
   248a2:	1a12      	subs	r2, r2, r0
   248a4:	f00b bec1 	b.w	3062a <memset>
   248a8:	20000ad0 	.word	0x20000ad0
   248ac:	20004344 	.word	0x20004344

000248b0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   248b0:	b580      	push	{r7, lr}
   248b2:	b0b6      	sub	sp, #216	; 0xd8
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   248b4:	f7ed fe5c 	bl	12570 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   248b8:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 2499c <z_cstart+0xec>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   248bc:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   248c0:	4d30      	ldr	r5, [pc, #192]	; (24984 <z_cstart+0xd4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   248c2:	4e31      	ldr	r6, [pc, #196]	; (24988 <z_cstart+0xd8>)
   248c4:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   248c6:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 249a0 <z_cstart+0xf0>
   248ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   248ce:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   248d0:	23e0      	movs	r3, #224	; 0xe0
   248d2:	2400      	movs	r4, #0
   248d4:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   248d8:	2320      	movs	r3, #32
   248da:	77eb      	strb	r3, [r5, #31]
   248dc:	762c      	strb	r4, [r5, #24]
   248de:	766c      	strb	r4, [r5, #25]
   248e0:	76ac      	strb	r4, [r5, #26]
   248e2:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   248e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   248e8:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   248ec:	626b      	str	r3, [r5, #36]	; 0x24
   248ee:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   248f2:	f7f3 f829 	bl	17948 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   248f6:	f7f2 fae5 	bl	16ec4 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   248fa:	f04f 33ff 	mov.w	r3, #4294967295
   248fe:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   24900:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   24902:	f7f3 f9ef 	bl	17ce4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   24906:	f7f3 f8ff 	bl	17b08 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   2490a:	f240 1301 	movw	r3, #257	; 0x101
   2490e:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   24912:	ab06      	add	r3, sp, #24
   24914:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   24916:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   2491a:	f00b fc5c 	bl	301d6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2491e:	4620      	mov	r0, r4
   24920:	f7ff fe80 	bl	24624 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   24924:	2001      	movs	r0, #1
   24926:	f7ff fe7d 	bl	24624 <z_sys_init_run_level>
	_kernel.ready_q.cache = &z_main_thread;
   2492a:	4d18      	ldr	r5, [pc, #96]	; (2498c <z_cstart+0xdc>)
	__stack_chk_guard = stack_guard;
	__stack_chk_guard <<= 8;
#endif	/* CONFIG_STACK_CANARIES */

#ifdef CONFIG_TIMING_FUNCTIONS_NEED_AT_BOOT
	timing_init();
   2492c:	f7fc fd86 	bl	2143c <timing_init>
	timing_start();
   24930:	f7fc fd90 	bl	21454 <timing_start>
	z_sched_init();
   24934:	f002 ffba 	bl	278ac <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24938:	4b15      	ldr	r3, [pc, #84]	; (24990 <z_cstart+0xe0>)
   2493a:	9305      	str	r3, [sp, #20]
   2493c:	2301      	movs	r3, #1
   2493e:	4915      	ldr	r1, [pc, #84]	; (24994 <z_cstart+0xe4>)
   24940:	9400      	str	r4, [sp, #0]
   24942:	e9cd 4303 	strd	r4, r3, [sp, #12]
   24946:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2494a:	464b      	mov	r3, r9
   2494c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   24950:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   24952:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   24954:	f000 fb8a 	bl	2506c <z_setup_new_thread>
   24958:	7b6a      	ldrb	r2, [r5, #13]
   2495a:	f022 0204 	bic.w	r2, r2, #4
   2495e:	736a      	strb	r2, [r5, #13]
   24960:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   24962:	4628      	mov	r0, r5
   24964:	f002 fba2 	bl	270ac <z_ready_thread>
		init_idle_thread(i);
   24968:	4620      	mov	r0, r4
   2496a:	f7ff ff47 	bl	247fc <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2496e:	4b0a      	ldr	r3, [pc, #40]	; (24998 <z_cstart+0xe8>)
   24970:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   24972:	464a      	mov	r2, r9
   24974:	4639      	mov	r1, r7
   24976:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   24978:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   2497a:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2497e:	f7f2 fc35 	bl	171ec <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   24982:	bf00      	nop
   24984:	e000ed00 	.word	0xe000ed00
   24988:	20002040 	.word	0x20002040
   2498c:	20002140 	.word	0x20002140
   24990:	00037822 	.word	0x00037822
   24994:	20006120 	.word	0x20006120
   24998:	20002080 	.word	0x20002080
   2499c:	200072c0 	.word	0x200072c0
   249a0:	00024869 	.word	0x00024869

000249a4 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   249a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   249a6:	4d0f      	ldr	r5, [pc, #60]	; (249e4 <statics_init+0x40>)
   249a8:	4c0f      	ldr	r4, [pc, #60]	; (249e8 <statics_init+0x44>)
   249aa:	4e10      	ldr	r6, [pc, #64]	; (249ec <statics_init+0x48>)
   249ac:	462f      	mov	r7, r5
   249ae:	42ac      	cmp	r4, r5
   249b0:	d90c      	bls.n	249cc <statics_init+0x28>
   249b2:	490f      	ldr	r1, [pc, #60]	; (249f0 <statics_init+0x4c>)
   249b4:	480f      	ldr	r0, [pc, #60]	; (249f4 <statics_init+0x50>)
   249b6:	2318      	movs	r3, #24
   249b8:	4632      	mov	r2, r6
   249ba:	f007 fdee 	bl	2c59a <printk>
   249be:	480e      	ldr	r0, [pc, #56]	; (249f8 <statics_init+0x54>)
   249c0:	f007 fdeb 	bl	2c59a <printk>
   249c4:	2118      	movs	r1, #24
   249c6:	4630      	mov	r0, r6
   249c8:	f008 f828 	bl	2ca1c <assert_post_action>
   249cc:	42bc      	cmp	r4, r7
   249ce:	d301      	bcc.n	249d4 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   249d0:	2000      	movs	r0, #0
   249d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   249d4:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   249d8:	4620      	mov	r0, r4
   249da:	f00b fc1f 	bl	3021c <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   249de:	3418      	adds	r4, #24
   249e0:	e7e5      	b.n	249ae <statics_init+0xa>
   249e2:	bf00      	nop
   249e4:	20000870 	.word	0x20000870
   249e8:	20000870 	.word	0x20000870
   249ec:	0003782a 	.word	0x0003782a
   249f0:	0003784c 	.word	0x0003784c
   249f4:	00032486 	.word	0x00032486
   249f8:	00035136 	.word	0x00035136

000249fc <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   249fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a00:	b087      	sub	sp, #28
   24a02:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   24a06:	4606      	mov	r6, r0
   24a08:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a0a:	4640      	mov	r0, r8
   24a0c:	4649      	mov	r1, r9
{
   24a0e:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a10:	f00b fd2a 	bl	30468 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24a14:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   24a18:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   24a1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a20:	f3ef 8511 	mrs	r5, BASEPRI
   24a24:	f383 8812 	msr	BASEPRI_MAX, r3
   24a28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a2c:	4620      	mov	r0, r4
   24a2e:	f000 fa3d 	bl	24eac <z_spin_lock_valid>
   24a32:	b968      	cbnz	r0, 24a50 <k_heap_aligned_alloc+0x54>
   24a34:	4a3f      	ldr	r2, [pc, #252]	; (24b34 <k_heap_aligned_alloc+0x138>)
   24a36:	4940      	ldr	r1, [pc, #256]	; (24b38 <k_heap_aligned_alloc+0x13c>)
   24a38:	4840      	ldr	r0, [pc, #256]	; (24b3c <k_heap_aligned_alloc+0x140>)
   24a3a:	2381      	movs	r3, #129	; 0x81
   24a3c:	f007 fdad 	bl	2c59a <printk>
   24a40:	483f      	ldr	r0, [pc, #252]	; (24b40 <k_heap_aligned_alloc+0x144>)
   24a42:	4621      	mov	r1, r4
   24a44:	f007 fda9 	bl	2c59a <printk>
   24a48:	483a      	ldr	r0, [pc, #232]	; (24b34 <k_heap_aligned_alloc+0x138>)
   24a4a:	2181      	movs	r1, #129	; 0x81
   24a4c:	f007 ffe6 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   24a50:	4620      	mov	r0, r4
   24a52:	f000 fa49 	bl	24ee8 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   24a56:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24a5a:	b17b      	cbz	r3, 24a7c <k_heap_aligned_alloc+0x80>
   24a5c:	ea58 0309 	orrs.w	r3, r8, r9
   24a60:	d00c      	beq.n	24a7c <k_heap_aligned_alloc+0x80>
   24a62:	4938      	ldr	r1, [pc, #224]	; (24b44 <k_heap_aligned_alloc+0x148>)
   24a64:	4a38      	ldr	r2, [pc, #224]	; (24b48 <k_heap_aligned_alloc+0x14c>)
   24a66:	4835      	ldr	r0, [pc, #212]	; (24b3c <k_heap_aligned_alloc+0x140>)
   24a68:	2349      	movs	r3, #73	; 0x49
   24a6a:	f007 fd96 	bl	2c59a <printk>
   24a6e:	4837      	ldr	r0, [pc, #220]	; (24b4c <k_heap_aligned_alloc+0x150>)
   24a70:	f007 fd93 	bl	2c59a <printk>
   24a74:	4834      	ldr	r0, [pc, #208]	; (24b48 <k_heap_aligned_alloc+0x14c>)
   24a76:	2149      	movs	r1, #73	; 0x49
   24a78:	f007 ffd0 	bl	2ca1c <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a7c:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 24b34 <k_heap_aligned_alloc+0x138>
   24a80:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 24b38 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   24a84:	4652      	mov	r2, sl
   24a86:	4659      	mov	r1, fp
   24a88:	4630      	mov	r0, r6
   24a8a:	f7ec ff6d 	bl	11968 <sys_heap_aligned_alloc>
   24a8e:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   24a90:	f003 fdc2 	bl	28618 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   24a94:	b1cf      	cbz	r7, 24aca <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24a96:	4620      	mov	r0, r4
   24a98:	f000 fa16 	bl	24ec8 <z_spin_unlock_valid>
   24a9c:	b968      	cbnz	r0, 24aba <k_heap_aligned_alloc+0xbe>
   24a9e:	4a25      	ldr	r2, [pc, #148]	; (24b34 <k_heap_aligned_alloc+0x138>)
   24aa0:	492b      	ldr	r1, [pc, #172]	; (24b50 <k_heap_aligned_alloc+0x154>)
   24aa2:	4826      	ldr	r0, [pc, #152]	; (24b3c <k_heap_aligned_alloc+0x140>)
   24aa4:	23ac      	movs	r3, #172	; 0xac
   24aa6:	f007 fd78 	bl	2c59a <printk>
   24aaa:	482a      	ldr	r0, [pc, #168]	; (24b54 <k_heap_aligned_alloc+0x158>)
   24aac:	4621      	mov	r1, r4
   24aae:	f007 fd74 	bl	2c59a <printk>
   24ab2:	4820      	ldr	r0, [pc, #128]	; (24b34 <k_heap_aligned_alloc+0x138>)
   24ab4:	21ac      	movs	r1, #172	; 0xac
   24ab6:	f007 ffb1 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   24aba:	f385 8811 	msr	BASEPRI, r5
   24abe:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   24ac2:	4638      	mov	r0, r7
   24ac4:	b007      	add	sp, #28
   24ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   24aca:	9b04      	ldr	r3, [sp, #16]
   24acc:	1a1b      	subs	r3, r3, r0
   24ace:	9302      	str	r3, [sp, #8]
   24ad0:	9b05      	ldr	r3, [sp, #20]
   24ad2:	eb63 0301 	sbc.w	r3, r3, r1
   24ad6:	9303      	str	r3, [sp, #12]
   24ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24adc:	2a01      	cmp	r2, #1
   24ade:	f173 0300 	sbcs.w	r3, r3, #0
   24ae2:	dbd8      	blt.n	24a96 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   24ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   24ae8:	4629      	mov	r1, r5
   24aea:	e9cd 2300 	strd	r2, r3, [sp]
   24aee:	4620      	mov	r0, r4
   24af0:	f106 020c 	add.w	r2, r6, #12
   24af4:	f002 fc8c 	bl	27410 <z_pend_curr>
	__asm__ volatile(
   24af8:	f04f 0340 	mov.w	r3, #64	; 0x40
   24afc:	f3ef 8511 	mrs	r5, BASEPRI
   24b00:	f383 8812 	msr	BASEPRI_MAX, r3
   24b04:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b08:	4620      	mov	r0, r4
   24b0a:	f000 f9cf 	bl	24eac <z_spin_lock_valid>
   24b0e:	b968      	cbnz	r0, 24b2c <k_heap_aligned_alloc+0x130>
   24b10:	480a      	ldr	r0, [pc, #40]	; (24b3c <k_heap_aligned_alloc+0x140>)
   24b12:	2381      	movs	r3, #129	; 0x81
   24b14:	4642      	mov	r2, r8
   24b16:	4649      	mov	r1, r9
   24b18:	f007 fd3f 	bl	2c59a <printk>
   24b1c:	4808      	ldr	r0, [pc, #32]	; (24b40 <k_heap_aligned_alloc+0x144>)
   24b1e:	4621      	mov	r1, r4
   24b20:	f007 fd3b 	bl	2c59a <printk>
   24b24:	2181      	movs	r1, #129	; 0x81
   24b26:	4640      	mov	r0, r8
   24b28:	f007 ff78 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   24b2c:	4620      	mov	r0, r4
   24b2e:	f000 f9db 	bl	24ee8 <z_spin_lock_set_owner>
	return k;
   24b32:	e7a7      	b.n	24a84 <k_heap_aligned_alloc+0x88>
   24b34:	00032546 	.word	0x00032546
   24b38:	00032598 	.word	0x00032598
   24b3c:	00032486 	.word	0x00032486
   24b40:	000325ad 	.word	0x000325ad
   24b44:	00037862 	.word	0x00037862
   24b48:	0003782a 	.word	0x0003782a
   24b4c:	00036e1f 	.word	0x00036e1f
   24b50:	0003256c 	.word	0x0003256c
   24b54:	00032583 	.word	0x00032583

00024b58 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   24b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24b5a:	4605      	mov	r5, r0
   24b5c:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   24b5e:	f100 0414 	add.w	r4, r0, #20
   24b62:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b66:	f3ef 8711 	mrs	r7, BASEPRI
   24b6a:	f383 8812 	msr	BASEPRI_MAX, r3
   24b6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b72:	4620      	mov	r0, r4
   24b74:	f000 f99a 	bl	24eac <z_spin_lock_valid>
   24b78:	b968      	cbnz	r0, 24b96 <k_heap_free+0x3e>
   24b7a:	4a1b      	ldr	r2, [pc, #108]	; (24be8 <k_heap_free+0x90>)
   24b7c:	491b      	ldr	r1, [pc, #108]	; (24bec <k_heap_free+0x94>)
   24b7e:	481c      	ldr	r0, [pc, #112]	; (24bf0 <k_heap_free+0x98>)
   24b80:	2381      	movs	r3, #129	; 0x81
   24b82:	f007 fd0a 	bl	2c59a <printk>
   24b86:	481b      	ldr	r0, [pc, #108]	; (24bf4 <k_heap_free+0x9c>)
   24b88:	4621      	mov	r1, r4
   24b8a:	f007 fd06 	bl	2c59a <printk>
   24b8e:	4816      	ldr	r0, [pc, #88]	; (24be8 <k_heap_free+0x90>)
   24b90:	2181      	movs	r1, #129	; 0x81
   24b92:	f007 ff43 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   24b96:	4620      	mov	r0, r4
   24b98:	f000 f9a6 	bl	24ee8 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   24b9c:	4628      	mov	r0, r5
   24b9e:	4631      	mov	r1, r6
   24ba0:	f7ec fe96 	bl	118d0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   24ba4:	f105 000c 	add.w	r0, r5, #12
   24ba8:	f00b fc44 	bl	30434 <z_unpend_all>
   24bac:	b128      	cbz	r0, 24bba <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   24bae:	4639      	mov	r1, r7
   24bb0:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   24bb2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   24bb6:	f001 bfd9 	b.w	26b6c <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24bba:	4620      	mov	r0, r4
   24bbc:	f000 f984 	bl	24ec8 <z_spin_unlock_valid>
   24bc0:	b968      	cbnz	r0, 24bde <k_heap_free+0x86>
   24bc2:	4a09      	ldr	r2, [pc, #36]	; (24be8 <k_heap_free+0x90>)
   24bc4:	490c      	ldr	r1, [pc, #48]	; (24bf8 <k_heap_free+0xa0>)
   24bc6:	480a      	ldr	r0, [pc, #40]	; (24bf0 <k_heap_free+0x98>)
   24bc8:	23ac      	movs	r3, #172	; 0xac
   24bca:	f007 fce6 	bl	2c59a <printk>
   24bce:	480b      	ldr	r0, [pc, #44]	; (24bfc <k_heap_free+0xa4>)
   24bd0:	4621      	mov	r1, r4
   24bd2:	f007 fce2 	bl	2c59a <printk>
   24bd6:	4804      	ldr	r0, [pc, #16]	; (24be8 <k_heap_free+0x90>)
   24bd8:	21ac      	movs	r1, #172	; 0xac
   24bda:	f007 ff1f 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   24bde:	f387 8811 	msr	BASEPRI, r7
   24be2:	f3bf 8f6f 	isb	sy
}
   24be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   24be8:	00032546 	.word	0x00032546
   24bec:	00032598 	.word	0x00032598
   24bf0:	00032486 	.word	0x00032486
   24bf4:	000325ad 	.word	0x000325ad
   24bf8:	0003256c 	.word	0x0003256c
   24bfc:	00032583 	.word	0x00032583

00024c00 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   24c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24c04:	4d16      	ldr	r5, [pc, #88]	; (24c60 <init_mem_slab_module+0x60>)
   24c06:	4c17      	ldr	r4, [pc, #92]	; (24c64 <init_mem_slab_module+0x64>)
   24c08:	4e17      	ldr	r6, [pc, #92]	; (24c68 <init_mem_slab_module+0x68>)
   24c0a:	46a8      	mov	r8, r5
   24c0c:	42ac      	cmp	r4, r5
   24c0e:	d90c      	bls.n	24c2a <init_mem_slab_module+0x2a>
   24c10:	4916      	ldr	r1, [pc, #88]	; (24c6c <init_mem_slab_module+0x6c>)
   24c12:	4817      	ldr	r0, [pc, #92]	; (24c70 <init_mem_slab_module+0x70>)
   24c14:	233c      	movs	r3, #60	; 0x3c
   24c16:	4632      	mov	r2, r6
   24c18:	f007 fcbf 	bl	2c59a <printk>
   24c1c:	4815      	ldr	r0, [pc, #84]	; (24c74 <init_mem_slab_module+0x74>)
   24c1e:	f007 fcbc 	bl	2c59a <printk>
   24c22:	213c      	movs	r1, #60	; 0x3c
   24c24:	4630      	mov	r0, r6
   24c26:	f007 fef9 	bl	2ca1c <assert_post_action>
   24c2a:	4544      	cmp	r4, r8
   24c2c:	d302      	bcc.n	24c34 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   24c2e:	2000      	movs	r0, #0
	return rc;
}
   24c30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   24c34:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   24c38:	ea41 0302 	orr.w	r3, r1, r2
   24c3c:	f013 0303 	ands.w	r3, r3, #3
   24c40:	d10b      	bne.n	24c5a <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   24c42:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   24c44:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   24c46:	4283      	cmp	r3, r0
   24c48:	d101      	bne.n	24c4e <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   24c4a:	3420      	adds	r4, #32
   24c4c:	e7de      	b.n	24c0c <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   24c4e:	69a7      	ldr	r7, [r4, #24]
   24c50:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   24c52:	3301      	adds	r3, #1
		slab->free_list = p;
   24c54:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   24c56:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   24c58:	e7f5      	b.n	24c46 <init_mem_slab_module+0x46>
		return -EINVAL;
   24c5a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   24c5e:	e7e7      	b.n	24c30 <init_mem_slab_module+0x30>
   24c60:	20000870 	.word	0x20000870
   24c64:	20000810 	.word	0x20000810
   24c68:	000378a7 	.word	0x000378a7
   24c6c:	000378cc 	.word	0x000378cc
   24c70:	00032486 	.word	0x00032486
   24c74:	00035136 	.word	0x00035136

00024c78 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   24c78:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24c7c:	4604      	mov	r4, r0
   24c7e:	460e      	mov	r6, r1
   24c80:	4690      	mov	r8, r2
   24c82:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24c84:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24c88:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c8c:	f3ef 8711 	mrs	r7, BASEPRI
   24c90:	f383 8812 	msr	BASEPRI_MAX, r3
   24c94:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c98:	4628      	mov	r0, r5
   24c9a:	f000 f907 	bl	24eac <z_spin_lock_valid>
   24c9e:	b968      	cbnz	r0, 24cbc <k_mem_slab_alloc+0x44>
   24ca0:	4a24      	ldr	r2, [pc, #144]	; (24d34 <k_mem_slab_alloc+0xbc>)
   24ca2:	4925      	ldr	r1, [pc, #148]	; (24d38 <k_mem_slab_alloc+0xc0>)
   24ca4:	4825      	ldr	r0, [pc, #148]	; (24d3c <k_mem_slab_alloc+0xc4>)
   24ca6:	2381      	movs	r3, #129	; 0x81
   24ca8:	f007 fc77 	bl	2c59a <printk>
   24cac:	4824      	ldr	r0, [pc, #144]	; (24d40 <k_mem_slab_alloc+0xc8>)
   24cae:	4629      	mov	r1, r5
   24cb0:	f007 fc73 	bl	2c59a <printk>
   24cb4:	481f      	ldr	r0, [pc, #124]	; (24d34 <k_mem_slab_alloc+0xbc>)
   24cb6:	2181      	movs	r1, #129	; 0x81
   24cb8:	f007 feb0 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   24cbc:	4628      	mov	r0, r5
   24cbe:	f000 f913 	bl	24ee8 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   24cc2:	69a3      	ldr	r3, [r4, #24]
   24cc4:	b1eb      	cbz	r3, 24d02 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   24cc6:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   24cc8:	681b      	ldr	r3, [r3, #0]
   24cca:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   24ccc:	69e3      	ldr	r3, [r4, #28]
   24cce:	3301      	adds	r3, #1
   24cd0:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   24cd2:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24cd4:	4628      	mov	r0, r5
   24cd6:	f000 f8f7 	bl	24ec8 <z_spin_unlock_valid>
   24cda:	b968      	cbnz	r0, 24cf8 <k_mem_slab_alloc+0x80>
   24cdc:	4a15      	ldr	r2, [pc, #84]	; (24d34 <k_mem_slab_alloc+0xbc>)
   24cde:	4919      	ldr	r1, [pc, #100]	; (24d44 <k_mem_slab_alloc+0xcc>)
   24ce0:	4816      	ldr	r0, [pc, #88]	; (24d3c <k_mem_slab_alloc+0xc4>)
   24ce2:	23ac      	movs	r3, #172	; 0xac
   24ce4:	f007 fc59 	bl	2c59a <printk>
   24ce8:	4817      	ldr	r0, [pc, #92]	; (24d48 <k_mem_slab_alloc+0xd0>)
   24cea:	4629      	mov	r1, r5
   24cec:	f007 fc55 	bl	2c59a <printk>
   24cf0:	4810      	ldr	r0, [pc, #64]	; (24d34 <k_mem_slab_alloc+0xbc>)
   24cf2:	21ac      	movs	r1, #172	; 0xac
   24cf4:	f007 fe92 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   24cf8:	f387 8811 	msr	BASEPRI, r7
   24cfc:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   24d00:	e013      	b.n	24d2a <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   24d02:	ea58 0209 	orrs.w	r2, r8, r9
   24d06:	d103      	bne.n	24d10 <k_mem_slab_alloc+0x98>
		*mem = NULL;
   24d08:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   24d0a:	f06f 040b 	mvn.w	r4, #11
   24d0e:	e7e1      	b.n	24cd4 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   24d10:	4622      	mov	r2, r4
   24d12:	e9cd 8900 	strd	r8, r9, [sp]
   24d16:	4639      	mov	r1, r7
   24d18:	4628      	mov	r0, r5
   24d1a:	f002 fb79 	bl	27410 <z_pend_curr>
		if (result == 0) {
   24d1e:	4604      	mov	r4, r0
   24d20:	b918      	cbnz	r0, 24d2a <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   24d22:	4b0a      	ldr	r3, [pc, #40]	; (24d4c <k_mem_slab_alloc+0xd4>)
   24d24:	689b      	ldr	r3, [r3, #8]
   24d26:	695b      	ldr	r3, [r3, #20]
   24d28:	6033      	str	r3, [r6, #0]
}
   24d2a:	4620      	mov	r0, r4
   24d2c:	b003      	add	sp, #12
   24d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24d32:	bf00      	nop
   24d34:	00032546 	.word	0x00032546
   24d38:	00032598 	.word	0x00032598
   24d3c:	00032486 	.word	0x00032486
   24d40:	000325ad 	.word	0x000325ad
   24d44:	0003256c 	.word	0x0003256c
   24d48:	00032583 	.word	0x00032583
   24d4c:	20002040 	.word	0x20002040

00024d50 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   24d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d54:	4604      	mov	r4, r0
   24d56:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   24d58:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24d5c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d60:	f3ef 8711 	mrs	r7, BASEPRI
   24d64:	f383 8812 	msr	BASEPRI_MAX, r3
   24d68:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24d6c:	4628      	mov	r0, r5
   24d6e:	f000 f89d 	bl	24eac <z_spin_lock_valid>
   24d72:	b968      	cbnz	r0, 24d90 <k_mem_slab_free+0x40>
   24d74:	4a22      	ldr	r2, [pc, #136]	; (24e00 <k_mem_slab_free+0xb0>)
   24d76:	4923      	ldr	r1, [pc, #140]	; (24e04 <k_mem_slab_free+0xb4>)
   24d78:	4823      	ldr	r0, [pc, #140]	; (24e08 <k_mem_slab_free+0xb8>)
   24d7a:	2381      	movs	r3, #129	; 0x81
   24d7c:	f007 fc0d 	bl	2c59a <printk>
   24d80:	4822      	ldr	r0, [pc, #136]	; (24e0c <k_mem_slab_free+0xbc>)
   24d82:	4629      	mov	r1, r5
   24d84:	f007 fc09 	bl	2c59a <printk>
   24d88:	481d      	ldr	r0, [pc, #116]	; (24e00 <k_mem_slab_free+0xb0>)
   24d8a:	2181      	movs	r1, #129	; 0x81
   24d8c:	f007 fe46 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   24d90:	4628      	mov	r0, r5
   24d92:	f000 f8a9 	bl	24ee8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   24d96:	f8d4 8018 	ldr.w	r8, [r4, #24]
   24d9a:	f1b8 0f00 	cmp.w	r8, #0
   24d9e:	d10f      	bne.n	24dc0 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   24da0:	4620      	mov	r0, r4
   24da2:	f002 fd33 	bl	2780c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   24da6:	b158      	cbz	r0, 24dc0 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   24da8:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   24daa:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   24dac:	f8c0 80b8 	str.w	r8, [r0, #184]	; 0xb8
			z_ready_thread(pending_thread);
   24db0:	f002 f97c 	bl	270ac <z_ready_thread>
			z_reschedule(&slab->lock, key);
   24db4:	4639      	mov	r1, r7
   24db6:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   24db8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   24dbc:	f001 bed6 	b.w	26b6c <z_reschedule>
	**(char ***) mem = slab->free_list;
   24dc0:	6833      	ldr	r3, [r6, #0]
   24dc2:	69a2      	ldr	r2, [r4, #24]
   24dc4:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   24dc6:	6833      	ldr	r3, [r6, #0]
   24dc8:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   24dca:	69e3      	ldr	r3, [r4, #28]
   24dcc:	3b01      	subs	r3, #1
   24dce:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dd0:	4628      	mov	r0, r5
   24dd2:	f000 f879 	bl	24ec8 <z_spin_unlock_valid>
   24dd6:	b968      	cbnz	r0, 24df4 <k_mem_slab_free+0xa4>
   24dd8:	4a09      	ldr	r2, [pc, #36]	; (24e00 <k_mem_slab_free+0xb0>)
   24dda:	490d      	ldr	r1, [pc, #52]	; (24e10 <k_mem_slab_free+0xc0>)
   24ddc:	480a      	ldr	r0, [pc, #40]	; (24e08 <k_mem_slab_free+0xb8>)
   24dde:	23ac      	movs	r3, #172	; 0xac
   24de0:	f007 fbdb 	bl	2c59a <printk>
   24de4:	480b      	ldr	r0, [pc, #44]	; (24e14 <k_mem_slab_free+0xc4>)
   24de6:	4629      	mov	r1, r5
   24de8:	f007 fbd7 	bl	2c59a <printk>
   24dec:	4804      	ldr	r0, [pc, #16]	; (24e00 <k_mem_slab_free+0xb0>)
   24dee:	21ac      	movs	r1, #172	; 0xac
   24df0:	f007 fe14 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   24df4:	f387 8811 	msr	BASEPRI, r7
   24df8:	f3bf 8f6f 	isb	sy
}
   24dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   24e00:	00032546 	.word	0x00032546
   24e04:	00032598 	.word	0x00032598
   24e08:	00032486 	.word	0x00032486
   24e0c:	000325ad 	.word	0x000325ad
   24e10:	0003256c 	.word	0x0003256c
   24e14:	00032583 	.word	0x00032583

00024e18 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   24e18:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   24e1a:	4604      	mov	r4, r0
   24e1c:	b908      	cbnz	r0, 24e22 <z_impl_k_thread_name_set+0xa>
		thread = _current;
   24e1e:	4b05      	ldr	r3, [pc, #20]	; (24e34 <z_impl_k_thread_name_set+0x1c>)
   24e20:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   24e22:	2220      	movs	r2, #32
   24e24:	f104 0080 	add.w	r0, r4, #128	; 0x80
   24e28:	f00b fc2e 	bl	30688 <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   24e2c:	2000      	movs	r0, #0
   24e2e:	f884 009f 	strb.w	r0, [r4, #159]	; 0x9f

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   24e32:	bd10      	pop	{r4, pc}
   24e34:	20002040 	.word	0x20002040

00024e38 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
   24e38:	7b43      	ldrb	r3, [r0, #13]
   24e3a:	2b10      	cmp	r3, #16
   24e3c:	d80e      	bhi.n	24e5c <k_thread_state_str+0x24>
   24e3e:	2b10      	cmp	r3, #16
   24e40:	d81c      	bhi.n	24e7c <k_thread_state_str+0x44>
   24e42:	e8df f003 	tbb	[pc, r3]
   24e46:	091d      	.short	0x091d
   24e48:	1b151b13 	.word	0x1b151b13
   24e4c:	1b171b1b 	.word	0x1b171b1b
   24e50:	1b1b1b1b 	.word	0x1b1b1b1b
   24e54:	1b1b      	.short	0x1b1b
   24e56:	19          	.byte	0x19
   24e57:	00          	.byte	0x00
   24e58:	480b      	ldr	r0, [pc, #44]	; (24e88 <k_thread_state_str+0x50>)
   24e5a:	4770      	bx	lr
   24e5c:	2b20      	cmp	r3, #32
   24e5e:	d011      	beq.n	24e84 <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
   24e60:	4a0a      	ldr	r2, [pc, #40]	; (24e8c <k_thread_state_str+0x54>)
   24e62:	480b      	ldr	r0, [pc, #44]	; (24e90 <k_thread_state_str+0x58>)
   24e64:	2b80      	cmp	r3, #128	; 0x80
   24e66:	bf08      	it	eq
   24e68:	4610      	moveq	r0, r2
   24e6a:	4770      	bx	lr
		return "pending";
   24e6c:	4809      	ldr	r0, [pc, #36]	; (24e94 <k_thread_state_str+0x5c>)
   24e6e:	4770      	bx	lr
		return "prestart";
   24e70:	4809      	ldr	r0, [pc, #36]	; (24e98 <k_thread_state_str+0x60>)
   24e72:	4770      	bx	lr
		return "dead";
   24e74:	4809      	ldr	r0, [pc, #36]	; (24e9c <k_thread_state_str+0x64>)
   24e76:	4770      	bx	lr
		return "suspended";
   24e78:	4809      	ldr	r0, [pc, #36]	; (24ea0 <k_thread_state_str+0x68>)
   24e7a:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
   24e7c:	4804      	ldr	r0, [pc, #16]	; (24e90 <k_thread_state_str+0x58>)
   24e7e:	4770      	bx	lr
		return "";
   24e80:	4808      	ldr	r0, [pc, #32]	; (24ea4 <k_thread_state_str+0x6c>)
   24e82:	4770      	bx	lr
		return "aborting";
   24e84:	4808      	ldr	r0, [pc, #32]	; (24ea8 <k_thread_state_str+0x70>)
}
   24e86:	4770      	bx	lr
   24e88:	00037909 	.word	0x00037909
   24e8c:	00037918 	.word	0x00037918
   24e90:	000376f1 	.word	0x000376f1
   24e94:	000378e9 	.word	0x000378e9
   24e98:	000378f1 	.word	0x000378f1
   24e9c:	000378fa 	.word	0x000378fa
   24ea0:	000378ff 	.word	0x000378ff
   24ea4:	00036e21 	.word	0x00036e21
   24ea8:	0003790f 	.word	0x0003790f

00024eac <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   24eac:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   24eae:	b138      	cbz	r0, 24ec0 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   24eb0:	4b04      	ldr	r3, [pc, #16]	; (24ec4 <z_spin_lock_valid+0x18>)
   24eb2:	7d1b      	ldrb	r3, [r3, #20]
   24eb4:	f000 0003 	and.w	r0, r0, #3
   24eb8:	1ac0      	subs	r0, r0, r3
   24eba:	bf18      	it	ne
   24ebc:	2001      	movne	r0, #1
   24ebe:	4770      	bx	lr
			return false;
		}
	}
	return true;
   24ec0:	2001      	movs	r0, #1
}
   24ec2:	4770      	bx	lr
   24ec4:	20002040 	.word	0x20002040

00024ec8 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24ec8:	4906      	ldr	r1, [pc, #24]	; (24ee4 <z_spin_unlock_valid+0x1c>)
{
   24eca:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   24ecc:	688a      	ldr	r2, [r1, #8]
   24ece:	7d08      	ldrb	r0, [r1, #20]
   24ed0:	6819      	ldr	r1, [r3, #0]
   24ed2:	4302      	orrs	r2, r0
   24ed4:	4291      	cmp	r1, r2
   24ed6:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   24eda:	bf04      	itt	eq
   24edc:	6018      	streq	r0, [r3, #0]
	return true;
   24ede:	2001      	moveq	r0, #1
}
   24ee0:	4770      	bx	lr
   24ee2:	bf00      	nop
   24ee4:	20002040 	.word	0x20002040

00024ee8 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   24ee8:	4a02      	ldr	r2, [pc, #8]	; (24ef4 <z_spin_lock_set_owner+0xc>)
   24eea:	7d11      	ldrb	r1, [r2, #20]
   24eec:	6893      	ldr	r3, [r2, #8]
   24eee:	430b      	orrs	r3, r1
   24ef0:	6003      	str	r3, [r0, #0]
}
   24ef2:	4770      	bx	lr
   24ef4:	20002040 	.word	0x20002040

00024ef8 <k_thread_foreach>:
{
   24ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24efa:	460e      	mov	r6, r1
	__ASSERT(user_cb != NULL, "user_cb can not be NULL");
   24efc:	4605      	mov	r5, r0
   24efe:	b960      	cbnz	r0, 24f1a <k_thread_foreach+0x22>
   24f00:	4924      	ldr	r1, [pc, #144]	; (24f94 <k_thread_foreach+0x9c>)
   24f02:	4a25      	ldr	r2, [pc, #148]	; (24f98 <k_thread_foreach+0xa0>)
   24f04:	4825      	ldr	r0, [pc, #148]	; (24f9c <k_thread_foreach+0xa4>)
   24f06:	2333      	movs	r3, #51	; 0x33
   24f08:	f007 fb47 	bl	2c59a <printk>
   24f0c:	4824      	ldr	r0, [pc, #144]	; (24fa0 <k_thread_foreach+0xa8>)
   24f0e:	f007 fb44 	bl	2c59a <printk>
   24f12:	4821      	ldr	r0, [pc, #132]	; (24f98 <k_thread_foreach+0xa0>)
   24f14:	2133      	movs	r1, #51	; 0x33
   24f16:	f007 fd81 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   24f1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24f1e:	f3ef 8711 	mrs	r7, BASEPRI
   24f22:	f383 8812 	msr	BASEPRI_MAX, r3
   24f26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24f2a:	481e      	ldr	r0, [pc, #120]	; (24fa4 <k_thread_foreach+0xac>)
   24f2c:	f7ff ffbe 	bl	24eac <z_spin_lock_valid>
   24f30:	b968      	cbnz	r0, 24f4e <k_thread_foreach+0x56>
   24f32:	4a1d      	ldr	r2, [pc, #116]	; (24fa8 <k_thread_foreach+0xb0>)
   24f34:	491d      	ldr	r1, [pc, #116]	; (24fac <k_thread_foreach+0xb4>)
   24f36:	4819      	ldr	r0, [pc, #100]	; (24f9c <k_thread_foreach+0xa4>)
   24f38:	2381      	movs	r3, #129	; 0x81
   24f3a:	f007 fb2e 	bl	2c59a <printk>
   24f3e:	4919      	ldr	r1, [pc, #100]	; (24fa4 <k_thread_foreach+0xac>)
   24f40:	481b      	ldr	r0, [pc, #108]	; (24fb0 <k_thread_foreach+0xb8>)
   24f42:	f007 fb2a 	bl	2c59a <printk>
   24f46:	4818      	ldr	r0, [pc, #96]	; (24fa8 <k_thread_foreach+0xb0>)
   24f48:	2181      	movs	r1, #129	; 0x81
   24f4a:	f007 fd67 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   24f4e:	4815      	ldr	r0, [pc, #84]	; (24fa4 <k_thread_foreach+0xac>)
   24f50:	f7ff ffca 	bl	24ee8 <z_spin_lock_set_owner>
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   24f54:	4b17      	ldr	r3, [pc, #92]	; (24fb4 <k_thread_foreach+0xbc>)
   24f56:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   24f58:	b9b4      	cbnz	r4, 24f88 <k_thread_foreach+0x90>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f5a:	4812      	ldr	r0, [pc, #72]	; (24fa4 <k_thread_foreach+0xac>)
   24f5c:	f7ff ffb4 	bl	24ec8 <z_spin_unlock_valid>
   24f60:	b968      	cbnz	r0, 24f7e <k_thread_foreach+0x86>
   24f62:	4a11      	ldr	r2, [pc, #68]	; (24fa8 <k_thread_foreach+0xb0>)
   24f64:	4914      	ldr	r1, [pc, #80]	; (24fb8 <k_thread_foreach+0xc0>)
   24f66:	480d      	ldr	r0, [pc, #52]	; (24f9c <k_thread_foreach+0xa4>)
   24f68:	23ac      	movs	r3, #172	; 0xac
   24f6a:	f007 fb16 	bl	2c59a <printk>
   24f6e:	490d      	ldr	r1, [pc, #52]	; (24fa4 <k_thread_foreach+0xac>)
   24f70:	4812      	ldr	r0, [pc, #72]	; (24fbc <k_thread_foreach+0xc4>)
   24f72:	f007 fb12 	bl	2c59a <printk>
   24f76:	480c      	ldr	r0, [pc, #48]	; (24fa8 <k_thread_foreach+0xb0>)
   24f78:	21ac      	movs	r1, #172	; 0xac
   24f7a:	f007 fd4f 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   24f7e:	f387 8811 	msr	BASEPRI, r7
   24f82:	f3bf 8f6f 	isb	sy
}
   24f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   24f88:	4620      	mov	r0, r4
   24f8a:	4631      	mov	r1, r6
   24f8c:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   24f8e:	6fe4      	ldr	r4, [r4, #124]	; 0x7c
   24f90:	e7e2      	b.n	24f58 <k_thread_foreach+0x60>
   24f92:	bf00      	nop
   24f94:	00037942 	.word	0x00037942
   24f98:	0003791f 	.word	0x0003791f
   24f9c:	00032486 	.word	0x00032486
   24fa0:	00037959 	.word	0x00037959
   24fa4:	20002ee8 	.word	0x20002ee8
   24fa8:	00032546 	.word	0x00032546
   24fac:	00032598 	.word	0x00032598
   24fb0:	000325ad 	.word	0x000325ad
   24fb4:	20002040 	.word	0x20002040
   24fb8:	0003256c 	.word	0x0003256c
   24fbc:	00032583 	.word	0x00032583

00024fc0 <z_thread_monitor_exit>:
{
   24fc0:	b538      	push	{r3, r4, r5, lr}
   24fc2:	4604      	mov	r4, r0
	__asm__ volatile(
   24fc4:	f04f 0340 	mov.w	r3, #64	; 0x40
   24fc8:	f3ef 8511 	mrs	r5, BASEPRI
   24fcc:	f383 8812 	msr	BASEPRI_MAX, r3
   24fd0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24fd4:	481d      	ldr	r0, [pc, #116]	; (2504c <z_thread_monitor_exit+0x8c>)
   24fd6:	f7ff ff69 	bl	24eac <z_spin_lock_valid>
   24fda:	b968      	cbnz	r0, 24ff8 <z_thread_monitor_exit+0x38>
   24fdc:	4a1c      	ldr	r2, [pc, #112]	; (25050 <z_thread_monitor_exit+0x90>)
   24fde:	491d      	ldr	r1, [pc, #116]	; (25054 <z_thread_monitor_exit+0x94>)
   24fe0:	481d      	ldr	r0, [pc, #116]	; (25058 <z_thread_monitor_exit+0x98>)
   24fe2:	2381      	movs	r3, #129	; 0x81
   24fe4:	f007 fad9 	bl	2c59a <printk>
   24fe8:	4918      	ldr	r1, [pc, #96]	; (2504c <z_thread_monitor_exit+0x8c>)
   24fea:	481c      	ldr	r0, [pc, #112]	; (2505c <z_thread_monitor_exit+0x9c>)
   24fec:	f007 fad5 	bl	2c59a <printk>
   24ff0:	4817      	ldr	r0, [pc, #92]	; (25050 <z_thread_monitor_exit+0x90>)
   24ff2:	2181      	movs	r1, #129	; 0x81
   24ff4:	f007 fd12 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   24ff8:	4814      	ldr	r0, [pc, #80]	; (2504c <z_thread_monitor_exit+0x8c>)
   24ffa:	f7ff ff75 	bl	24ee8 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
   24ffe:	4a18      	ldr	r2, [pc, #96]	; (25060 <z_thread_monitor_exit+0xa0>)
   25000:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   25002:	42a3      	cmp	r3, r4
   25004:	d119      	bne.n	2503a <z_thread_monitor_exit+0x7a>
		_kernel.threads = _kernel.threads->next_thread;
   25006:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25008:	62d3      	str	r3, [r2, #44]	; 0x2c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2500a:	4810      	ldr	r0, [pc, #64]	; (2504c <z_thread_monitor_exit+0x8c>)
   2500c:	f7ff ff5c 	bl	24ec8 <z_spin_unlock_valid>
   25010:	b968      	cbnz	r0, 2502e <z_thread_monitor_exit+0x6e>
   25012:	4a0f      	ldr	r2, [pc, #60]	; (25050 <z_thread_monitor_exit+0x90>)
   25014:	4913      	ldr	r1, [pc, #76]	; (25064 <z_thread_monitor_exit+0xa4>)
   25016:	4810      	ldr	r0, [pc, #64]	; (25058 <z_thread_monitor_exit+0x98>)
   25018:	23ac      	movs	r3, #172	; 0xac
   2501a:	f007 fabe 	bl	2c59a <printk>
   2501e:	490b      	ldr	r1, [pc, #44]	; (2504c <z_thread_monitor_exit+0x8c>)
   25020:	4811      	ldr	r0, [pc, #68]	; (25068 <z_thread_monitor_exit+0xa8>)
   25022:	f007 faba 	bl	2c59a <printk>
   25026:	480a      	ldr	r0, [pc, #40]	; (25050 <z_thread_monitor_exit+0x90>)
   25028:	21ac      	movs	r1, #172	; 0xac
   2502a:	f007 fcf7 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   2502e:	f385 8811 	msr	BASEPRI, r5
   25032:	f3bf 8f6f 	isb	sy
}
   25036:	bd38      	pop	{r3, r4, r5, pc}
   25038:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   2503a:	2b00      	cmp	r3, #0
   2503c:	d0e5      	beq.n	2500a <z_thread_monitor_exit+0x4a>
			(thread != prev_thread->next_thread)) {
   2503e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
		while ((prev_thread != NULL) &&
   25040:	42a2      	cmp	r2, r4
   25042:	d1f9      	bne.n	25038 <z_thread_monitor_exit+0x78>
			prev_thread->next_thread = thread->next_thread;
   25044:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25046:	67da      	str	r2, [r3, #124]	; 0x7c
   25048:	e7df      	b.n	2500a <z_thread_monitor_exit+0x4a>
   2504a:	bf00      	nop
   2504c:	20002ee8 	.word	0x20002ee8
   25050:	00032546 	.word	0x00032546
   25054:	00032598 	.word	0x00032598
   25058:	00032486 	.word	0x00032486
   2505c:	000325ad 	.word	0x000325ad
   25060:	20002040 	.word	0x20002040
   25064:	0003256c 	.word	0x0003256c
   25068:	00032583 	.word	0x00032583

0002506c <z_setup_new_thread>:
{
   2506c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25070:	b085      	sub	sp, #20
   25072:	4604      	mov	r4, r0
   25074:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   25078:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   2507c:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	Z_ASSERT_VALID_PRIO(prio, entry);
   25080:	f1b9 0f0f 	cmp.w	r9, #15
{
   25084:	4688      	mov	r8, r1
   25086:	4615      	mov	r5, r2
   25088:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   2508a:	f040 8083 	bne.w	25194 <z_setup_new_thread+0x128>
   2508e:	4b4f      	ldr	r3, [pc, #316]	; (251cc <z_setup_new_thread+0x160>)
   25090:	429f      	cmp	r7, r3
   25092:	f040 8084 	bne.w	2519e <z_setup_new_thread+0x132>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   25096:	f104 0360 	add.w	r3, r4, #96	; 0x60
	list->tail = (sys_dnode_t *)list;
   2509a:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
	thread_base->user_options = (uint8_t)options;
   2509e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   250a0:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   250a2:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   250a4:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
   250a6:	2600      	movs	r6, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   250a8:	f025 0507 	bic.w	r5, r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   250ac:	7363      	strb	r3, [r4, #13]

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   250ae:	f108 0320 	add.w	r3, r8, #32
	thread_base->prio = priority;
   250b2:	f884 900e 	strb.w	r9, [r4, #14]
__ssp_bos_icheck3(memset, void *, int)
   250b6:	462a      	mov	r2, r5
	node->prev = NULL;
   250b8:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   250bc:	60a6      	str	r6, [r4, #8]
	thread_base->sched_locked = 0U;
   250be:	73e6      	strb	r6, [r4, #15]
   250c0:	21aa      	movs	r1, #170	; 0xaa
   250c2:	4618      	mov	r0, r3
   250c4:	f00b fab1 	bl	3062a <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   250c8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   250ca:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   250cc:	f105 0920 	add.w	r9, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   250d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->stack_info.delta = delta;
   250d2:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
	stack_ptr = (char *)stack + stack_obj_size;
   250d6:	44c1      	add	r9, r8
	new_thread->stack_info.size = stack_buf_size;
   250d8:	e9c4 0529 	strd	r0, r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   250dc:	e9cd b300 	strd	fp, r3, [sp]
   250e0:	464a      	mov	r2, r9
   250e2:	463b      	mov	r3, r7
   250e4:	4641      	mov	r1, r8
   250e6:	4620      	mov	r0, r4
   250e8:	f7f2 f848 	bl	1717c <arch_new_thread>
	new_thread->entry.parameter2 = p2;
   250ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   250ee:	6763      	str	r3, [r4, #116]	; 0x74
	new_thread->entry.parameter3 = p3;
   250f0:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
   250f2:	65e6      	str	r6, [r4, #92]	; 0x5c
	new_thread->entry.parameter1 = p1;
   250f4:	e9c4 7b1b 	strd	r7, fp, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   250f8:	67a3      	str	r3, [r4, #120]	; 0x78
	__asm__ volatile(
   250fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   250fe:	f3ef 8611 	mrs	r6, BASEPRI
   25102:	f383 8812 	msr	BASEPRI_MAX, r3
   25106:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2510a:	4831      	ldr	r0, [pc, #196]	; (251d0 <z_setup_new_thread+0x164>)
   2510c:	f7ff fece 	bl	24eac <z_spin_lock_valid>
   25110:	b968      	cbnz	r0, 2512e <z_setup_new_thread+0xc2>
   25112:	4a30      	ldr	r2, [pc, #192]	; (251d4 <z_setup_new_thread+0x168>)
   25114:	4930      	ldr	r1, [pc, #192]	; (251d8 <z_setup_new_thread+0x16c>)
   25116:	4831      	ldr	r0, [pc, #196]	; (251dc <z_setup_new_thread+0x170>)
   25118:	2381      	movs	r3, #129	; 0x81
   2511a:	f007 fa3e 	bl	2c59a <printk>
   2511e:	492c      	ldr	r1, [pc, #176]	; (251d0 <z_setup_new_thread+0x164>)
   25120:	482f      	ldr	r0, [pc, #188]	; (251e0 <z_setup_new_thread+0x174>)
   25122:	f007 fa3a 	bl	2c59a <printk>
   25126:	482b      	ldr	r0, [pc, #172]	; (251d4 <z_setup_new_thread+0x168>)
   25128:	2181      	movs	r1, #129	; 0x81
   2512a:	f007 fc77 	bl	2ca1c <assert_post_action>
	new_thread->next_thread = _kernel.threads;
   2512e:	4d2d      	ldr	r5, [pc, #180]	; (251e4 <z_setup_new_thread+0x178>)
	z_spin_lock_set_owner(l);
   25130:	4827      	ldr	r0, [pc, #156]	; (251d0 <z_setup_new_thread+0x164>)
   25132:	f7ff fed9 	bl	24ee8 <z_spin_lock_set_owner>
   25136:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25138:	4825      	ldr	r0, [pc, #148]	; (251d0 <z_setup_new_thread+0x164>)
   2513a:	67e3      	str	r3, [r4, #124]	; 0x7c
	_kernel.threads = new_thread;
   2513c:	62ec      	str	r4, [r5, #44]	; 0x2c
   2513e:	f7ff fec3 	bl	24ec8 <z_spin_unlock_valid>
   25142:	b968      	cbnz	r0, 25160 <z_setup_new_thread+0xf4>
   25144:	4a23      	ldr	r2, [pc, #140]	; (251d4 <z_setup_new_thread+0x168>)
   25146:	4928      	ldr	r1, [pc, #160]	; (251e8 <z_setup_new_thread+0x17c>)
   25148:	4824      	ldr	r0, [pc, #144]	; (251dc <z_setup_new_thread+0x170>)
   2514a:	23ac      	movs	r3, #172	; 0xac
   2514c:	f007 fa25 	bl	2c59a <printk>
   25150:	491f      	ldr	r1, [pc, #124]	; (251d0 <z_setup_new_thread+0x164>)
   25152:	4826      	ldr	r0, [pc, #152]	; (251ec <z_setup_new_thread+0x180>)
   25154:	f007 fa21 	bl	2c59a <printk>
   25158:	481e      	ldr	r0, [pc, #120]	; (251d4 <z_setup_new_thread+0x168>)
   2515a:	21ac      	movs	r1, #172	; 0xac
   2515c:	f007 fc5e 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   25160:	f386 8811 	msr	BASEPRI, r6
   25164:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   25168:	f1ba 0f00 	cmp.w	sl, #0
   2516c:	d02b      	beq.n	251c6 <z_setup_new_thread+0x15a>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2516e:	221f      	movs	r2, #31
   25170:	4651      	mov	r1, sl
   25172:	f104 0080 	add.w	r0, r4, #128	; 0x80
   25176:	f00b fa87 	bl	30688 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   2517a:	2300      	movs	r3, #0
   2517c:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
	if (!_current) {
   25180:	68ab      	ldr	r3, [r5, #8]
   25182:	b10b      	cbz	r3, 25188 <z_setup_new_thread+0x11c>
	new_thread->resource_pool = _current->resource_pool;
   25184:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	return stack_ptr;
   25188:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
}
   2518c:	4648      	mov	r0, r9
   2518e:	b005      	add	sp, #20
   25190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   25194:	f109 0310 	add.w	r3, r9, #16
   25198:	2b1e      	cmp	r3, #30
   2519a:	f67f af7c 	bls.w	25096 <z_setup_new_thread+0x2a>
   2519e:	4a14      	ldr	r2, [pc, #80]	; (251f0 <z_setup_new_thread+0x184>)
   251a0:	4914      	ldr	r1, [pc, #80]	; (251f4 <z_setup_new_thread+0x188>)
   251a2:	480e      	ldr	r0, [pc, #56]	; (251dc <z_setup_new_thread+0x170>)
   251a4:	f240 13ff 	movw	r3, #511	; 0x1ff
   251a8:	f007 f9f7 	bl	2c59a <printk>
   251ac:	4649      	mov	r1, r9
   251ae:	4812      	ldr	r0, [pc, #72]	; (251f8 <z_setup_new_thread+0x18c>)
   251b0:	f06f 030f 	mvn.w	r3, #15
   251b4:	220e      	movs	r2, #14
   251b6:	f007 f9f0 	bl	2c59a <printk>
   251ba:	480d      	ldr	r0, [pc, #52]	; (251f0 <z_setup_new_thread+0x184>)
   251bc:	f240 11ff 	movw	r1, #511	; 0x1ff
   251c0:	f007 fc2c 	bl	2ca1c <assert_post_action>
   251c4:	e767      	b.n	25096 <z_setup_new_thread+0x2a>
		new_thread->name[0] = '\0';
   251c6:	f884 a080 	strb.w	sl, [r4, #128]	; 0x80
   251ca:	e7d9      	b.n	25180 <z_setup_new_thread+0x114>
   251cc:	000253f5 	.word	0x000253f5
   251d0:	20002ee8 	.word	0x20002ee8
   251d4:	00032546 	.word	0x00032546
   251d8:	00032598 	.word	0x00032598
   251dc:	00032486 	.word	0x00032486
   251e0:	000325ad 	.word	0x000325ad
   251e4:	20002040 	.word	0x20002040
   251e8:	0003256c 	.word	0x0003256c
   251ec:	00032583 	.word	0x00032583
   251f0:	0003791f 	.word	0x0003791f
   251f4:	00037973 	.word	0x00037973
   251f8:	000379f3 	.word	0x000379f3

000251fc <z_impl_k_thread_create>:
{
   251fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25200:	b087      	sub	sp, #28
   25202:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   25206:	4604      	mov	r4, r0
   25208:	460d      	mov	r5, r1
   2520a:	4690      	mov	r8, r2
   2520c:	4699      	mov	r9, r3
   2520e:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   25212:	b173      	cbz	r3, 25232 <z_impl_k_thread_create+0x36>
   25214:	491b      	ldr	r1, [pc, #108]	; (25284 <z_impl_k_thread_create+0x88>)
   25216:	4a1c      	ldr	r2, [pc, #112]	; (25288 <z_impl_k_thread_create+0x8c>)
   25218:	481c      	ldr	r0, [pc, #112]	; (2528c <z_impl_k_thread_create+0x90>)
   2521a:	f44f 731a 	mov.w	r3, #616	; 0x268
   2521e:	f007 f9bc 	bl	2c59a <printk>
   25222:	481b      	ldr	r0, [pc, #108]	; (25290 <z_impl_k_thread_create+0x94>)
   25224:	f007 f9b9 	bl	2c59a <printk>
   25228:	4817      	ldr	r0, [pc, #92]	; (25288 <z_impl_k_thread_create+0x8c>)
   2522a:	f44f 711a 	mov.w	r1, #616	; 0x268
   2522e:	f007 fbf5 	bl	2ca1c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   25232:	2300      	movs	r3, #0
   25234:	9305      	str	r3, [sp, #20]
   25236:	9b12      	ldr	r3, [sp, #72]	; 0x48
   25238:	9304      	str	r3, [sp, #16]
   2523a:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2523c:	9303      	str	r3, [sp, #12]
   2523e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   25240:	9302      	str	r3, [sp, #8]
   25242:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   25244:	9301      	str	r3, [sp, #4]
   25246:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25248:	9300      	str	r3, [sp, #0]
   2524a:	4642      	mov	r2, r8
   2524c:	464b      	mov	r3, r9
   2524e:	4629      	mov	r1, r5
   25250:	4620      	mov	r0, r4
   25252:	f7ff ff0b 	bl	2506c <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   25256:	1c7b      	adds	r3, r7, #1
   25258:	bf08      	it	eq
   2525a:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2525e:	d005      	beq.n	2526c <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25260:	ea56 0307 	orrs.w	r3, r6, r7
   25264:	d106      	bne.n	25274 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   25266:	4620      	mov	r0, r4
   25268:	f001 ff68 	bl	2713c <z_sched_start>
}
   2526c:	4620      	mov	r0, r4
   2526e:	b007      	add	sp, #28
   25270:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   25274:	4907      	ldr	r1, [pc, #28]	; (25294 <z_impl_k_thread_create+0x98>)
   25276:	4632      	mov	r2, r6
   25278:	463b      	mov	r3, r7
   2527a:	f104 0018 	add.w	r0, r4, #24
   2527e:	f002 ff45 	bl	2810c <z_add_timeout>
   25282:	e7f3      	b.n	2526c <z_impl_k_thread_create+0x70>
   25284:	00037a24 	.word	0x00037a24
   25288:	0003791f 	.word	0x0003791f
   2528c:	00032486 	.word	0x00032486
   25290:	00037a36 	.word	0x00037a36
   25294:	000271e5 	.word	0x000271e5

00025298 <z_init_static_threads>:
{
   25298:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   2529c:	4f3f      	ldr	r7, [pc, #252]	; (2539c <z_init_static_threads+0x104>)
   2529e:	4d40      	ldr	r5, [pc, #256]	; (253a0 <z_init_static_threads+0x108>)
   252a0:	f8df 810c 	ldr.w	r8, [pc, #268]	; 253b0 <z_init_static_threads+0x118>
{
   252a4:	b086      	sub	sp, #24
   252a6:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   252a8:	42bd      	cmp	r5, r7
   252aa:	d90e      	bls.n	252ca <z_init_static_threads+0x32>
   252ac:	493d      	ldr	r1, [pc, #244]	; (253a4 <z_init_static_threads+0x10c>)
   252ae:	483e      	ldr	r0, [pc, #248]	; (253a8 <z_init_static_threads+0x110>)
   252b0:	f240 23cf 	movw	r3, #719	; 0x2cf
   252b4:	4642      	mov	r2, r8
   252b6:	f007 f970 	bl	2c59a <printk>
   252ba:	483c      	ldr	r0, [pc, #240]	; (253ac <z_init_static_threads+0x114>)
   252bc:	f007 f96d 	bl	2c59a <printk>
   252c0:	f240 21cf 	movw	r1, #719	; 0x2cf
   252c4:	4640      	mov	r0, r8
   252c6:	f007 fba9 	bl	2ca1c <assert_post_action>
   252ca:	42b5      	cmp	r5, r6
   252cc:	f105 0430 	add.w	r4, r5, #48	; 0x30
   252d0:	d31f      	bcc.n	25312 <z_init_static_threads+0x7a>
	k_sched_lock();
   252d2:	f001 fc8f 	bl	26bf4 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   252d6:	4c32      	ldr	r4, [pc, #200]	; (253a0 <z_init_static_threads+0x108>)
   252d8:	4d35      	ldr	r5, [pc, #212]	; (253b0 <z_init_static_threads+0x118>)
   252da:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 253a4 <z_init_static_threads+0x10c>
   252de:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 253a8 <z_init_static_threads+0x110>
   252e2:	42b4      	cmp	r4, r6
   252e4:	d90e      	bls.n	25304 <z_init_static_threads+0x6c>
   252e6:	4641      	mov	r1, r8
   252e8:	f240 23ee 	movw	r3, #750	; 0x2ee
   252ec:	462a      	mov	r2, r5
   252ee:	4648      	mov	r0, r9
   252f0:	f007 f953 	bl	2c59a <printk>
   252f4:	482d      	ldr	r0, [pc, #180]	; (253ac <z_init_static_threads+0x114>)
   252f6:	f007 f950 	bl	2c59a <printk>
   252fa:	f240 21ee 	movw	r1, #750	; 0x2ee
   252fe:	4628      	mov	r0, r5
   25300:	f007 fb8c 	bl	2ca1c <assert_post_action>
   25304:	42b4      	cmp	r4, r6
   25306:	d321      	bcc.n	2534c <z_init_static_threads+0xb4>
}
   25308:	b006      	add	sp, #24
   2530a:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   2530e:	f002 b9b5 	b.w	2767c <k_sched_unlock>
		z_setup_new_thread(
   25312:	f854 3c04 	ldr.w	r3, [r4, #-4]
   25316:	9305      	str	r3, [sp, #20]
   25318:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2531c:	9304      	str	r3, [sp, #16]
   2531e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   25322:	9303      	str	r3, [sp, #12]
   25324:	f854 3c18 	ldr.w	r3, [r4, #-24]
   25328:	9302      	str	r3, [sp, #8]
   2532a:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2532e:	9301      	str	r3, [sp, #4]
   25330:	f854 3c20 	ldr.w	r3, [r4, #-32]
   25334:	9300      	str	r3, [sp, #0]
   25336:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2533a:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2533e:	f7ff fe95 	bl	2506c <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   25342:	f854 3c30 	ldr.w	r3, [r4, #-48]
   25346:	65dd      	str	r5, [r3, #92]	; 0x5c
   25348:	4625      	mov	r5, r4
   2534a:	e7ad      	b.n	252a8 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   2534c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2534e:	1c4b      	adds	r3, r1, #1
   25350:	d014      	beq.n	2537c <z_init_static_threads+0xe4>
   25352:	f240 32e7 	movw	r2, #999	; 0x3e7
   25356:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   25358:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   2535c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   25360:	4693      	mov	fp, r2
   25362:	469c      	mov	ip, r3
   25364:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25368:	459c      	cmp	ip, r3
   2536a:	bf08      	it	eq
   2536c:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   2536e:	6827      	ldr	r7, [r4, #0]
   25370:	4658      	mov	r0, fp
   25372:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25374:	d104      	bne.n	25380 <z_init_static_threads+0xe8>
	z_sched_start(thread);
   25376:	4638      	mov	r0, r7
   25378:	f001 fee0 	bl	2713c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2537c:	3430      	adds	r4, #48	; 0x30
   2537e:	e7b0      	b.n	252e2 <z_init_static_threads+0x4a>
   25380:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25384:	2300      	movs	r3, #0
   25386:	f7db ff5b 	bl	1240 <__aeabi_uldivmod>
   2538a:	4602      	mov	r2, r0
   2538c:	460b      	mov	r3, r1
   2538e:	f107 0018 	add.w	r0, r7, #24
   25392:	4908      	ldr	r1, [pc, #32]	; (253b4 <z_init_static_threads+0x11c>)
   25394:	f002 feba 	bl	2810c <z_add_timeout>
   25398:	e7f0      	b.n	2537c <z_init_static_threads+0xe4>
   2539a:	bf00      	nop
   2539c:	20000810 	.word	0x20000810
   253a0:	20000810 	.word	0x20000810
   253a4:	00037a5b 	.word	0x00037a5b
   253a8:	00032486 	.word	0x00032486
   253ac:	00035136 	.word	0x00035136
   253b0:	0003791f 	.word	0x0003791f
   253b4:	000271e5 	.word	0x000271e5

000253b8 <z_thread_mark_switched_in>:

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
void z_thread_mark_switched_in(void)
{
#if defined(CONFIG_SCHED_THREAD_USAGE) && !defined(CONFIG_USE_SWITCH)
	z_sched_usage_start(_current);
   253b8:	4b01      	ldr	r3, [pc, #4]	; (253c0 <z_thread_mark_switched_in+0x8>)
   253ba:	6898      	ldr	r0, [r3, #8]
   253bc:	f002 bd44 	b.w	27e48 <z_sched_usage_start>
   253c0:	20002040 	.word	0x20002040

000253c4 <k_thread_runtime_stats_all_get>:

	return 0;
}

int k_thread_runtime_stats_all_get(k_thread_runtime_stats_t *stats)
{
   253c4:	b510      	push	{r4, lr}
	if (stats == NULL) {
   253c6:	b158      	cbz	r0, 253e0 <k_thread_runtime_stats_all_get+0x1c>
	}

	*stats = (k_thread_runtime_stats_t) {};

#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	stats->execution_cycles = (_kernel.all_thread_usage
   253c8:	4a07      	ldr	r2, [pc, #28]	; (253e8 <k_thread_runtime_stats_all_get+0x24>)
				   + _kernel.idle_thread_usage);
   253ca:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
   253ce:	e9d2 420e 	ldrd	r4, r2, [r2, #56]	; 0x38
   253d2:	191b      	adds	r3, r3, r4
   253d4:	eb41 0202 	adc.w	r2, r1, r2
	stats->execution_cycles = (_kernel.all_thread_usage
   253d8:	e9c0 3200 	strd	r3, r2, [r0]
#endif

	return 0;
   253dc:	2000      	movs	r0, #0
}
   253de:	bd10      	pop	{r4, pc}
		return -EINVAL;
   253e0:	f06f 0015 	mvn.w	r0, #21
   253e4:	e7fb      	b.n	253de <k_thread_runtime_stats_all_get+0x1a>
   253e6:	bf00      	nop
   253e8:	20002040 	.word	0x20002040

000253ec <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   253ec:	4800      	ldr	r0, [pc, #0]	; (253f0 <sys_kernel_version_get+0x4>)
   253ee:	4770      	bx	lr
   253f0:	02076300 	.word	0x02076300

000253f4 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   253f4:	4c11      	ldr	r4, [pc, #68]	; (2543c <idle+0x48>)
   253f6:	68a2      	ldr	r2, [r4, #8]
   253f8:	f992 200e 	ldrsb.w	r2, [r2, #14]
   253fc:	2a00      	cmp	r2, #0
{
   253fe:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   25400:	da09      	bge.n	25416 <idle+0x22>
   25402:	490f      	ldr	r1, [pc, #60]	; (25440 <idle+0x4c>)
   25404:	480f      	ldr	r0, [pc, #60]	; (25444 <idle+0x50>)
   25406:	4a10      	ldr	r2, [pc, #64]	; (25448 <idle+0x54>)
   25408:	2327      	movs	r3, #39	; 0x27
   2540a:	f007 f8c6 	bl	2c59a <printk>
   2540e:	480e      	ldr	r0, [pc, #56]	; (25448 <idle+0x54>)
   25410:	2127      	movs	r1, #39	; 0x27
   25412:	f007 fb03 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   25416:	f04f 0240 	mov.w	r2, #64	; 0x40
   2541a:	f3ef 8311 	mrs	r3, BASEPRI
   2541e:	f382 8812 	msr	BASEPRI_MAX, r2
   25422:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   25426:	f002 ff93 	bl	28350 <z_get_next_timeout_expiry>
   2542a:	61e0      	str	r0, [r4, #28]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   2542c:	f7f1 f938 	bl	166a0 <pm_system_suspend>
   25430:	2800      	cmp	r0, #0
   25432:	d1f0      	bne.n	25416 <idle+0x22>
	arch_cpu_idle();
   25434:	f7f1 fd4c 	bl	16ed0 <arch_cpu_idle>
}
   25438:	e7ed      	b.n	25416 <idle+0x22>
   2543a:	bf00      	nop
   2543c:	20002040 	.word	0x20002040
   25440:	00037aa9 	.word	0x00037aa9
   25444:	00032486 	.word	0x00032486
   25448:	00037a88 	.word	0x00037a88

0002544c <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   2544c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   25450:	4604      	mov	r4, r0
   25452:	468a      	mov	sl, r1
   25454:	4690      	mov	r8, r2
   25456:	4699      	mov	r9, r3
   25458:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   2545c:	b17b      	cbz	r3, 2547e <z_impl_k_msgq_put+0x32>
   2545e:	ea58 0309 	orrs.w	r3, r8, r9
   25462:	d00c      	beq.n	2547e <z_impl_k_msgq_put+0x32>
   25464:	4943      	ldr	r1, [pc, #268]	; (25574 <z_impl_k_msgq_put+0x128>)
   25466:	4a44      	ldr	r2, [pc, #272]	; (25578 <z_impl_k_msgq_put+0x12c>)
   25468:	4844      	ldr	r0, [pc, #272]	; (2557c <z_impl_k_msgq_put+0x130>)
   2546a:	2376      	movs	r3, #118	; 0x76
   2546c:	f007 f895 	bl	2c59a <printk>
   25470:	4843      	ldr	r0, [pc, #268]	; (25580 <z_impl_k_msgq_put+0x134>)
   25472:	f007 f892 	bl	2c59a <printk>
   25476:	4840      	ldr	r0, [pc, #256]	; (25578 <z_impl_k_msgq_put+0x12c>)
   25478:	2176      	movs	r1, #118	; 0x76
   2547a:	f007 facf 	bl	2ca1c <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2547e:	f104 0508 	add.w	r5, r4, #8
   25482:	f04f 0340 	mov.w	r3, #64	; 0x40
   25486:	f3ef 8711 	mrs	r7, BASEPRI
   2548a:	f383 8812 	msr	BASEPRI_MAX, r3
   2548e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25492:	4628      	mov	r0, r5
   25494:	f7ff fd0a 	bl	24eac <z_spin_lock_valid>
   25498:	b968      	cbnz	r0, 254b6 <z_impl_k_msgq_put+0x6a>
   2549a:	4a3a      	ldr	r2, [pc, #232]	; (25584 <z_impl_k_msgq_put+0x138>)
   2549c:	493a      	ldr	r1, [pc, #232]	; (25588 <z_impl_k_msgq_put+0x13c>)
   2549e:	4837      	ldr	r0, [pc, #220]	; (2557c <z_impl_k_msgq_put+0x130>)
   254a0:	2381      	movs	r3, #129	; 0x81
   254a2:	f007 f87a 	bl	2c59a <printk>
   254a6:	4839      	ldr	r0, [pc, #228]	; (2558c <z_impl_k_msgq_put+0x140>)
   254a8:	4629      	mov	r1, r5
   254aa:	f007 f876 	bl	2c59a <printk>
   254ae:	4835      	ldr	r0, [pc, #212]	; (25584 <z_impl_k_msgq_put+0x138>)
   254b0:	2181      	movs	r1, #129	; 0x81
   254b2:	f007 fab3 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   254b6:	4628      	mov	r0, r5
   254b8:	f7ff fd16 	bl	24ee8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   254bc:	6a62      	ldr	r2, [r4, #36]	; 0x24
   254be:	6923      	ldr	r3, [r4, #16]
   254c0:	429a      	cmp	r2, r3
   254c2:	d243      	bcs.n	2554c <z_impl_k_msgq_put+0x100>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   254c4:	4620      	mov	r0, r4
   254c6:	f002 f9a1 	bl	2780c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   254ca:	68e2      	ldr	r2, [r4, #12]
   254cc:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   254ce:	4651      	mov	r1, sl
   254d0:	b180      	cbz	r0, 254f4 <z_impl_k_msgq_put+0xa8>
   254d2:	6940      	ldr	r0, [r0, #20]
   254d4:	2400      	movs	r4, #0
   254d6:	f00b f880 	bl	305da <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   254da:	4630      	mov	r0, r6
   254dc:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
   254e0:	f001 fde4 	bl	270ac <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   254e4:	4639      	mov	r1, r7
   254e6:	4628      	mov	r0, r5
   254e8:	f001 fb40 	bl	26b6c <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   254ec:	4620      	mov	r0, r4
   254ee:	b002      	add	sp, #8
   254f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   254f4:	6a20      	ldr	r0, [r4, #32]
   254f6:	f00b f870 	bl	305da <memcpy>
			msgq->write_ptr += msgq->msg_size;
   254fa:	6a23      	ldr	r3, [r4, #32]
   254fc:	68e2      	ldr	r2, [r4, #12]
   254fe:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   25500:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   25502:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   25504:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   25506:	bf04      	itt	eq
   25508:	6963      	ldreq	r3, [r4, #20]
   2550a:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   2550c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2550e:	3301      	adds	r3, #1
   25510:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   25512:	f104 0028 	add.w	r0, r4, #40	; 0x28
   25516:	2110      	movs	r1, #16
   25518:	f00b f82d 	bl	30576 <z_handle_obj_poll_events>
		result = 0;
   2551c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2551e:	4628      	mov	r0, r5
   25520:	f7ff fcd2 	bl	24ec8 <z_spin_unlock_valid>
   25524:	b968      	cbnz	r0, 25542 <z_impl_k_msgq_put+0xf6>
   25526:	4a17      	ldr	r2, [pc, #92]	; (25584 <z_impl_k_msgq_put+0x138>)
   25528:	4919      	ldr	r1, [pc, #100]	; (25590 <z_impl_k_msgq_put+0x144>)
   2552a:	4814      	ldr	r0, [pc, #80]	; (2557c <z_impl_k_msgq_put+0x130>)
   2552c:	23ac      	movs	r3, #172	; 0xac
   2552e:	f007 f834 	bl	2c59a <printk>
   25532:	4818      	ldr	r0, [pc, #96]	; (25594 <z_impl_k_msgq_put+0x148>)
   25534:	4629      	mov	r1, r5
   25536:	f007 f830 	bl	2c59a <printk>
   2553a:	4812      	ldr	r0, [pc, #72]	; (25584 <z_impl_k_msgq_put+0x138>)
   2553c:	21ac      	movs	r1, #172	; 0xac
   2553e:	f007 fa6d 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   25542:	f387 8811 	msr	BASEPRI, r7
   25546:	f3bf 8f6f 	isb	sy
	return result;
   2554a:	e7cf      	b.n	254ec <z_impl_k_msgq_put+0xa0>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2554c:	ea58 0309 	orrs.w	r3, r8, r9
   25550:	d00c      	beq.n	2556c <z_impl_k_msgq_put+0x120>
		_current->base.swap_data = (void *) data;
   25552:	4b11      	ldr	r3, [pc, #68]	; (25598 <z_impl_k_msgq_put+0x14c>)
   25554:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   25556:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   25558:	f8c3 a014 	str.w	sl, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2555c:	4639      	mov	r1, r7
   2555e:	e9cd 8900 	strd	r8, r9, [sp]
   25562:	4628      	mov	r0, r5
   25564:	f001 ff54 	bl	27410 <z_pend_curr>
   25568:	4604      	mov	r4, r0
		return result;
   2556a:	e7bf      	b.n	254ec <z_impl_k_msgq_put+0xa0>
		result = -ENOMSG;
   2556c:	f06f 0422 	mvn.w	r4, #34	; 0x22
   25570:	e7d5      	b.n	2551e <z_impl_k_msgq_put+0xd2>
   25572:	bf00      	nop
   25574:	00037862 	.word	0x00037862
   25578:	00037ad1 	.word	0x00037ad1
   2557c:	00032486 	.word	0x00032486
   25580:	00036e1f 	.word	0x00036e1f
   25584:	00032546 	.word	0x00032546
   25588:	00032598 	.word	0x00032598
   2558c:	000325ad 	.word	0x000325ad
   25590:	0003256c 	.word	0x0003256c
   25594:	00032583 	.word	0x00032583
   25598:	20002040 	.word	0x20002040

0002559c <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   2559c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   255a0:	4604      	mov	r4, r0
   255a2:	460d      	mov	r5, r1
   255a4:	4690      	mov	r8, r2
   255a6:	4699      	mov	r9, r3
   255a8:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   255ac:	b17b      	cbz	r3, 255ce <z_impl_k_msgq_get+0x32>
   255ae:	ea58 0309 	orrs.w	r3, r8, r9
   255b2:	d00c      	beq.n	255ce <z_impl_k_msgq_get+0x32>
   255b4:	4946      	ldr	r1, [pc, #280]	; (256d0 <z_impl_k_msgq_get+0x134>)
   255b6:	4a47      	ldr	r2, [pc, #284]	; (256d4 <z_impl_k_msgq_get+0x138>)
   255b8:	4847      	ldr	r0, [pc, #284]	; (256d8 <z_impl_k_msgq_get+0x13c>)
   255ba:	23d0      	movs	r3, #208	; 0xd0
   255bc:	f006 ffed 	bl	2c59a <printk>
   255c0:	4846      	ldr	r0, [pc, #280]	; (256dc <z_impl_k_msgq_get+0x140>)
   255c2:	f006 ffea 	bl	2c59a <printk>
   255c6:	4843      	ldr	r0, [pc, #268]	; (256d4 <z_impl_k_msgq_get+0x138>)
   255c8:	21d0      	movs	r1, #208	; 0xd0
   255ca:	f007 fa27 	bl	2ca1c <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   255ce:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   255d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   255d6:	f3ef 8711 	mrs	r7, BASEPRI
   255da:	f383 8812 	msr	BASEPRI_MAX, r3
   255de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   255e2:	4630      	mov	r0, r6
   255e4:	f7ff fc62 	bl	24eac <z_spin_lock_valid>
   255e8:	b968      	cbnz	r0, 25606 <z_impl_k_msgq_get+0x6a>
   255ea:	4a3d      	ldr	r2, [pc, #244]	; (256e0 <z_impl_k_msgq_get+0x144>)
   255ec:	493d      	ldr	r1, [pc, #244]	; (256e4 <z_impl_k_msgq_get+0x148>)
   255ee:	483a      	ldr	r0, [pc, #232]	; (256d8 <z_impl_k_msgq_get+0x13c>)
   255f0:	2381      	movs	r3, #129	; 0x81
   255f2:	f006 ffd2 	bl	2c59a <printk>
   255f6:	483c      	ldr	r0, [pc, #240]	; (256e8 <z_impl_k_msgq_get+0x14c>)
   255f8:	4631      	mov	r1, r6
   255fa:	f006 ffce 	bl	2c59a <printk>
   255fe:	4838      	ldr	r0, [pc, #224]	; (256e0 <z_impl_k_msgq_get+0x144>)
   25600:	2181      	movs	r1, #129	; 0x81
   25602:	f007 fa0b 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   25606:	4630      	mov	r0, r6
   25608:	f7ff fc6e 	bl	24ee8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   2560c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2560e:	2b00      	cmp	r3, #0
   25610:	d036      	beq.n	25680 <z_impl_k_msgq_get+0xe4>
   25612:	68e2      	ldr	r2, [r4, #12]
   25614:	69e1      	ldr	r1, [r4, #28]
   25616:	4628      	mov	r0, r5
   25618:	f00a ffdf 	bl	305da <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   2561c:	69e3      	ldr	r3, [r4, #28]
   2561e:	68e2      	ldr	r2, [r4, #12]
   25620:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   25622:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   25624:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   25626:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   25628:	bf04      	itt	eq
   2562a:	6963      	ldreq	r3, [r4, #20]
   2562c:	61e3      	streq	r3, [r4, #28]
		}
		msgq->used_msgs--;
   2562e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   25630:	3b01      	subs	r3, #1
   25632:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   25634:	4620      	mov	r0, r4
   25636:	f002 f8e9 	bl	2780c <z_unpend_first_thread>
		if (pending_thread != NULL) {
   2563a:	4605      	mov	r5, r0
   2563c:	2800      	cmp	r0, #0
   2563e:	d030      	beq.n	256a2 <z_impl_k_msgq_get+0x106>
   25640:	6941      	ldr	r1, [r0, #20]
   25642:	68e2      	ldr	r2, [r4, #12]
   25644:	6a20      	ldr	r0, [r4, #32]
   25646:	f00a ffc8 	bl	305da <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   2564a:	6a23      	ldr	r3, [r4, #32]
   2564c:	68e2      	ldr	r2, [r4, #12]
   2564e:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   25650:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   25652:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   25654:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   25656:	bf04      	itt	eq
   25658:	6963      	ldreq	r3, [r4, #20]
   2565a:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   2565c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2565e:	3301      	adds	r3, #1
   25660:	6263      	str	r3, [r4, #36]	; 0x24
   25662:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   25664:	4628      	mov	r0, r5
   25666:	f8c5 40b8 	str.w	r4, [r5, #184]	; 0xb8
   2566a:	f001 fd1f 	bl	270ac <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2566e:	4639      	mov	r1, r7
   25670:	4630      	mov	r0, r6
   25672:	f001 fa7b 	bl	26b6c <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   25676:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   25678:	4628      	mov	r0, r5
   2567a:	b003      	add	sp, #12
   2567c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25680:	ea58 0309 	orrs.w	r3, r8, r9
   25684:	d00b      	beq.n	2569e <z_impl_k_msgq_get+0x102>
		_current->base.swap_data = data;
   25686:	4b19      	ldr	r3, [pc, #100]	; (256ec <z_impl_k_msgq_get+0x150>)
   25688:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2568a:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   2568c:	615d      	str	r5, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2568e:	4639      	mov	r1, r7
   25690:	e9cd 8900 	strd	r8, r9, [sp]
   25694:	4630      	mov	r0, r6
   25696:	f001 febb 	bl	27410 <z_pend_curr>
   2569a:	4605      	mov	r5, r0
		return result;
   2569c:	e7ec      	b.n	25678 <z_impl_k_msgq_get+0xdc>
		result = -ENOMSG;
   2569e:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   256a2:	4630      	mov	r0, r6
   256a4:	f7ff fc10 	bl	24ec8 <z_spin_unlock_valid>
   256a8:	b968      	cbnz	r0, 256c6 <z_impl_k_msgq_get+0x12a>
   256aa:	4a0d      	ldr	r2, [pc, #52]	; (256e0 <z_impl_k_msgq_get+0x144>)
   256ac:	4910      	ldr	r1, [pc, #64]	; (256f0 <z_impl_k_msgq_get+0x154>)
   256ae:	480a      	ldr	r0, [pc, #40]	; (256d8 <z_impl_k_msgq_get+0x13c>)
   256b0:	23ac      	movs	r3, #172	; 0xac
   256b2:	f006 ff72 	bl	2c59a <printk>
   256b6:	480f      	ldr	r0, [pc, #60]	; (256f4 <z_impl_k_msgq_get+0x158>)
   256b8:	4631      	mov	r1, r6
   256ba:	f006 ff6e 	bl	2c59a <printk>
   256be:	4808      	ldr	r0, [pc, #32]	; (256e0 <z_impl_k_msgq_get+0x144>)
   256c0:	21ac      	movs	r1, #172	; 0xac
   256c2:	f007 f9ab 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   256c6:	f387 8811 	msr	BASEPRI, r7
   256ca:	f3bf 8f6f 	isb	sy
	return result;
   256ce:	e7d3      	b.n	25678 <z_impl_k_msgq_get+0xdc>
   256d0:	00037862 	.word	0x00037862
   256d4:	00037ad1 	.word	0x00037ad1
   256d8:	00032486 	.word	0x00032486
   256dc:	00036e1f 	.word	0x00036e1f
   256e0:	00032546 	.word	0x00032546
   256e4:	00032598 	.word	0x00032598
   256e8:	000325ad 	.word	0x000325ad
   256ec:	20002040 	.word	0x20002040
   256f0:	0003256c 	.word	0x0003256c
   256f4:	00032583 	.word	0x00032583

000256f8 <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
   256f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   256fa:	4604      	mov	r4, r0
   256fc:	460e      	mov	r6, r1
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   256fe:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   25702:	f04f 0340 	mov.w	r3, #64	; 0x40
   25706:	f3ef 8711 	mrs	r7, BASEPRI
   2570a:	f383 8812 	msr	BASEPRI_MAX, r3
   2570e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25712:	4628      	mov	r0, r5
   25714:	f7ff fbca 	bl	24eac <z_spin_lock_valid>
   25718:	b968      	cbnz	r0, 25736 <z_impl_k_msgq_peek+0x3e>
   2571a:	4a1a      	ldr	r2, [pc, #104]	; (25784 <z_impl_k_msgq_peek+0x8c>)
   2571c:	491a      	ldr	r1, [pc, #104]	; (25788 <z_impl_k_msgq_peek+0x90>)
   2571e:	481b      	ldr	r0, [pc, #108]	; (2578c <z_impl_k_msgq_peek+0x94>)
   25720:	2381      	movs	r3, #129	; 0x81
   25722:	f006 ff3a 	bl	2c59a <printk>
   25726:	481a      	ldr	r0, [pc, #104]	; (25790 <z_impl_k_msgq_peek+0x98>)
   25728:	4629      	mov	r1, r5
   2572a:	f006 ff36 	bl	2c59a <printk>
   2572e:	4815      	ldr	r0, [pc, #84]	; (25784 <z_impl_k_msgq_peek+0x8c>)
   25730:	2181      	movs	r1, #129	; 0x81
   25732:	f007 f973 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   25736:	4628      	mov	r0, r5
   25738:	f7ff fbd6 	bl	24ee8 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0U) {
   2573c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2573e:	b1eb      	cbz	r3, 2577c <z_impl_k_msgq_peek+0x84>
   25740:	68e2      	ldr	r2, [r4, #12]
   25742:	69e1      	ldr	r1, [r4, #28]
   25744:	4630      	mov	r0, r6
   25746:	f00a ff48 	bl	305da <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		result = 0;
   2574a:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2574c:	4628      	mov	r0, r5
   2574e:	f7ff fbbb 	bl	24ec8 <z_spin_unlock_valid>
   25752:	b968      	cbnz	r0, 25770 <z_impl_k_msgq_peek+0x78>
   25754:	4a0b      	ldr	r2, [pc, #44]	; (25784 <z_impl_k_msgq_peek+0x8c>)
   25756:	490f      	ldr	r1, [pc, #60]	; (25794 <z_impl_k_msgq_peek+0x9c>)
   25758:	480c      	ldr	r0, [pc, #48]	; (2578c <z_impl_k_msgq_peek+0x94>)
   2575a:	23ac      	movs	r3, #172	; 0xac
   2575c:	f006 ff1d 	bl	2c59a <printk>
   25760:	480d      	ldr	r0, [pc, #52]	; (25798 <z_impl_k_msgq_peek+0xa0>)
   25762:	4629      	mov	r1, r5
   25764:	f006 ff19 	bl	2c59a <printk>
   25768:	4806      	ldr	r0, [pc, #24]	; (25784 <z_impl_k_msgq_peek+0x8c>)
   2576a:	21ac      	movs	r1, #172	; 0xac
   2576c:	f007 f956 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   25770:	f387 8811 	msr	BASEPRI, r7
   25774:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, peek, msgq, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   25778:	4620      	mov	r0, r4
   2577a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		result = -ENOMSG;
   2577c:	f06f 0422 	mvn.w	r4, #34	; 0x22
   25780:	e7e4      	b.n	2574c <z_impl_k_msgq_peek+0x54>
   25782:	bf00      	nop
   25784:	00032546 	.word	0x00032546
   25788:	00032598 	.word	0x00032598
   2578c:	00032486 	.word	0x00032486
   25790:	000325ad 	.word	0x000325ad
   25794:	0003256c 	.word	0x0003256c
   25798:	00032583 	.word	0x00032583

0002579c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   2579c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   257a0:	4604      	mov	r4, r0
   257a2:	4616      	mov	r6, r2
   257a4:	461f      	mov	r7, r3
   257a6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   257aa:	b163      	cbz	r3, 257c6 <z_impl_k_mutex_lock+0x2a>
   257ac:	4970      	ldr	r1, [pc, #448]	; (25970 <z_impl_k_mutex_lock+0x1d4>)
   257ae:	4a71      	ldr	r2, [pc, #452]	; (25974 <z_impl_k_mutex_lock+0x1d8>)
   257b0:	4871      	ldr	r0, [pc, #452]	; (25978 <z_impl_k_mutex_lock+0x1dc>)
   257b2:	2365      	movs	r3, #101	; 0x65
   257b4:	f006 fef1 	bl	2c59a <printk>
   257b8:	4870      	ldr	r0, [pc, #448]	; (2597c <z_impl_k_mutex_lock+0x1e0>)
   257ba:	f006 feee 	bl	2c59a <printk>
   257be:	486d      	ldr	r0, [pc, #436]	; (25974 <z_impl_k_mutex_lock+0x1d8>)
   257c0:	2165      	movs	r1, #101	; 0x65
   257c2:	f007 f92b 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   257c6:	f04f 0340 	mov.w	r3, #64	; 0x40
   257ca:	f3ef 8811 	mrs	r8, BASEPRI
   257ce:	f383 8812 	msr	BASEPRI_MAX, r3
   257d2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   257d6:	486a      	ldr	r0, [pc, #424]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   257d8:	f7ff fb68 	bl	24eac <z_spin_lock_valid>
   257dc:	b968      	cbnz	r0, 257fa <z_impl_k_mutex_lock+0x5e>
   257de:	4a69      	ldr	r2, [pc, #420]	; (25984 <z_impl_k_mutex_lock+0x1e8>)
   257e0:	4969      	ldr	r1, [pc, #420]	; (25988 <z_impl_k_mutex_lock+0x1ec>)
   257e2:	4865      	ldr	r0, [pc, #404]	; (25978 <z_impl_k_mutex_lock+0x1dc>)
   257e4:	2381      	movs	r3, #129	; 0x81
   257e6:	f006 fed8 	bl	2c59a <printk>
   257ea:	4965      	ldr	r1, [pc, #404]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   257ec:	4867      	ldr	r0, [pc, #412]	; (2598c <z_impl_k_mutex_lock+0x1f0>)
   257ee:	f006 fed4 	bl	2c59a <printk>
   257f2:	4864      	ldr	r0, [pc, #400]	; (25984 <z_impl_k_mutex_lock+0x1e8>)
   257f4:	2181      	movs	r1, #129	; 0x81
   257f6:	f007 f911 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   257fa:	4861      	ldr	r0, [pc, #388]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   257fc:	f7ff fb74 	bl	24ee8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   25800:	68e3      	ldr	r3, [r4, #12]
   25802:	4a63      	ldr	r2, [pc, #396]	; (25990 <z_impl_k_mutex_lock+0x1f4>)
   25804:	b1fb      	cbz	r3, 25846 <z_impl_k_mutex_lock+0xaa>
   25806:	68a0      	ldr	r0, [r4, #8]
   25808:	6891      	ldr	r1, [r2, #8]
   2580a:	4288      	cmp	r0, r1
   2580c:	d03d      	beq.n	2588a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   2580e:	ea56 0307 	orrs.w	r3, r6, r7
   25812:	d13c      	bne.n	2588e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25814:	485a      	ldr	r0, [pc, #360]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   25816:	f7ff fb57 	bl	24ec8 <z_spin_unlock_valid>
   2581a:	b968      	cbnz	r0, 25838 <z_impl_k_mutex_lock+0x9c>
   2581c:	4a59      	ldr	r2, [pc, #356]	; (25984 <z_impl_k_mutex_lock+0x1e8>)
   2581e:	495d      	ldr	r1, [pc, #372]	; (25994 <z_impl_k_mutex_lock+0x1f8>)
   25820:	4855      	ldr	r0, [pc, #340]	; (25978 <z_impl_k_mutex_lock+0x1dc>)
   25822:	23ac      	movs	r3, #172	; 0xac
   25824:	f006 feb9 	bl	2c59a <printk>
   25828:	4955      	ldr	r1, [pc, #340]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   2582a:	485b      	ldr	r0, [pc, #364]	; (25998 <z_impl_k_mutex_lock+0x1fc>)
   2582c:	f006 feb5 	bl	2c59a <printk>
   25830:	4854      	ldr	r0, [pc, #336]	; (25984 <z_impl_k_mutex_lock+0x1e8>)
   25832:	21ac      	movs	r1, #172	; 0xac
   25834:	f007 f8f2 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   25838:	f388 8811 	msr	BASEPRI, r8
   2583c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   25840:	f06f 000f 	mvn.w	r0, #15
   25844:	e01e      	b.n	25884 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   25846:	6891      	ldr	r1, [r2, #8]
   25848:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2584c:	484c      	ldr	r0, [pc, #304]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2584e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   25850:	3301      	adds	r3, #1
   25852:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   25854:	6893      	ldr	r3, [r2, #8]
   25856:	60a3      	str	r3, [r4, #8]
   25858:	f7ff fb36 	bl	24ec8 <z_spin_unlock_valid>
   2585c:	b968      	cbnz	r0, 2587a <z_impl_k_mutex_lock+0xde>
   2585e:	4a49      	ldr	r2, [pc, #292]	; (25984 <z_impl_k_mutex_lock+0x1e8>)
   25860:	494c      	ldr	r1, [pc, #304]	; (25994 <z_impl_k_mutex_lock+0x1f8>)
   25862:	4845      	ldr	r0, [pc, #276]	; (25978 <z_impl_k_mutex_lock+0x1dc>)
   25864:	23ac      	movs	r3, #172	; 0xac
   25866:	f006 fe98 	bl	2c59a <printk>
   2586a:	4945      	ldr	r1, [pc, #276]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   2586c:	484a      	ldr	r0, [pc, #296]	; (25998 <z_impl_k_mutex_lock+0x1fc>)
   2586e:	f006 fe94 	bl	2c59a <printk>
   25872:	4844      	ldr	r0, [pc, #272]	; (25984 <z_impl_k_mutex_lock+0x1e8>)
   25874:	21ac      	movs	r1, #172	; 0xac
   25876:	f007 f8d1 	bl	2ca1c <assert_post_action>
   2587a:	f388 8811 	msr	BASEPRI, r8
   2587e:	f3bf 8f6f 	isb	sy
		return 0;
   25882:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   25884:	b002      	add	sp, #8
   25886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   2588a:	6921      	ldr	r1, [r4, #16]
   2588c:	e7de      	b.n	2584c <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2588e:	f991 100e 	ldrsb.w	r1, [r1, #14]
   25892:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   25896:	4299      	cmp	r1, r3
   25898:	bfa8      	it	ge
   2589a:	4619      	movge	r1, r3
   2589c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   258a0:	4291      	cmp	r1, r2
   258a2:	bfb8      	it	lt
   258a4:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   258a6:	428b      	cmp	r3, r1
   258a8:	dd44      	ble.n	25934 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   258aa:	f001 fde1 	bl	27470 <z_set_prio>
   258ae:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   258b0:	e9cd 6700 	strd	r6, r7, [sp]
   258b4:	4832      	ldr	r0, [pc, #200]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   258b6:	4622      	mov	r2, r4
   258b8:	4641      	mov	r1, r8
   258ba:	f001 fda9 	bl	27410 <z_pend_curr>
	if (got_mutex == 0) {
   258be:	2800      	cmp	r0, #0
   258c0:	d0e0      	beq.n	25884 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   258c2:	f04f 0340 	mov.w	r3, #64	; 0x40
   258c6:	f3ef 8611 	mrs	r6, BASEPRI
   258ca:	f383 8812 	msr	BASEPRI_MAX, r3
   258ce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   258d2:	482b      	ldr	r0, [pc, #172]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   258d4:	f7ff faea 	bl	24eac <z_spin_lock_valid>
   258d8:	b968      	cbnz	r0, 258f6 <z_impl_k_mutex_lock+0x15a>
   258da:	4a2a      	ldr	r2, [pc, #168]	; (25984 <z_impl_k_mutex_lock+0x1e8>)
   258dc:	492a      	ldr	r1, [pc, #168]	; (25988 <z_impl_k_mutex_lock+0x1ec>)
   258de:	4826      	ldr	r0, [pc, #152]	; (25978 <z_impl_k_mutex_lock+0x1dc>)
   258e0:	2381      	movs	r3, #129	; 0x81
   258e2:	f006 fe5a 	bl	2c59a <printk>
   258e6:	4926      	ldr	r1, [pc, #152]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   258e8:	4828      	ldr	r0, [pc, #160]	; (2598c <z_impl_k_mutex_lock+0x1f0>)
   258ea:	f006 fe56 	bl	2c59a <printk>
   258ee:	4825      	ldr	r0, [pc, #148]	; (25984 <z_impl_k_mutex_lock+0x1e8>)
   258f0:	2181      	movs	r1, #129	; 0x81
   258f2:	f007 f893 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   258f6:	4822      	ldr	r0, [pc, #136]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   258f8:	f7ff faf6 	bl	24ee8 <z_spin_lock_set_owner>
	return list->head == list;
   258fc:	6823      	ldr	r3, [r4, #0]
   258fe:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25900:	429c      	cmp	r4, r3
   25902:	d00a      	beq.n	2591a <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   25904:	b14b      	cbz	r3, 2591a <z_impl_k_mutex_lock+0x17e>
   25906:	f993 300e 	ldrsb.w	r3, [r3, #14]
   2590a:	4299      	cmp	r1, r3
   2590c:	bfa8      	it	ge
   2590e:	4619      	movge	r1, r3
   25910:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   25914:	4299      	cmp	r1, r3
   25916:	bfb8      	it	lt
   25918:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2591a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   2591c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   25920:	4299      	cmp	r1, r3
   25922:	d109      	bne.n	25938 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   25924:	b16d      	cbz	r5, 25942 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   25926:	4816      	ldr	r0, [pc, #88]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   25928:	4631      	mov	r1, r6
   2592a:	f001 f91f 	bl	26b6c <z_reschedule>
	return -EAGAIN;
   2592e:	f06f 000a 	mvn.w	r0, #10
   25932:	e7a7      	b.n	25884 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   25934:	2500      	movs	r5, #0
   25936:	e7bb      	b.n	258b0 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   25938:	f001 fd9a 	bl	27470 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   2593c:	2800      	cmp	r0, #0
   2593e:	d1f2      	bne.n	25926 <z_impl_k_mutex_lock+0x18a>
   25940:	e7f0      	b.n	25924 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25942:	480f      	ldr	r0, [pc, #60]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   25944:	f7ff fac0 	bl	24ec8 <z_spin_unlock_valid>
   25948:	b968      	cbnz	r0, 25966 <z_impl_k_mutex_lock+0x1ca>
   2594a:	4a0e      	ldr	r2, [pc, #56]	; (25984 <z_impl_k_mutex_lock+0x1e8>)
   2594c:	4911      	ldr	r1, [pc, #68]	; (25994 <z_impl_k_mutex_lock+0x1f8>)
   2594e:	480a      	ldr	r0, [pc, #40]	; (25978 <z_impl_k_mutex_lock+0x1dc>)
   25950:	23ac      	movs	r3, #172	; 0xac
   25952:	f006 fe22 	bl	2c59a <printk>
   25956:	490a      	ldr	r1, [pc, #40]	; (25980 <z_impl_k_mutex_lock+0x1e4>)
   25958:	480f      	ldr	r0, [pc, #60]	; (25998 <z_impl_k_mutex_lock+0x1fc>)
   2595a:	f006 fe1e 	bl	2c59a <printk>
   2595e:	4809      	ldr	r0, [pc, #36]	; (25984 <z_impl_k_mutex_lock+0x1e8>)
   25960:	21ac      	movs	r1, #172	; 0xac
   25962:	f007 f85b 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   25966:	f386 8811 	msr	BASEPRI, r6
   2596a:	f3bf 8f6f 	isb	sy
   2596e:	e7de      	b.n	2592e <z_impl_k_mutex_lock+0x192>
   25970:	00037a24 	.word	0x00037a24
   25974:	00037af3 	.word	0x00037af3
   25978:	00032486 	.word	0x00032486
   2597c:	00037b15 	.word	0x00037b15
   25980:	20002eec 	.word	0x20002eec
   25984:	00032546 	.word	0x00032546
   25988:	00032598 	.word	0x00032598
   2598c:	000325ad 	.word	0x000325ad
   25990:	20002040 	.word	0x20002040
   25994:	0003256c 	.word	0x0003256c
   25998:	00032583 	.word	0x00032583

0002599c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   2599c:	b538      	push	{r3, r4, r5, lr}
   2599e:	4604      	mov	r4, r0
   259a0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   259a4:	b163      	cbz	r3, 259c0 <z_impl_k_mutex_unlock+0x24>
   259a6:	4952      	ldr	r1, [pc, #328]	; (25af0 <z_impl_k_mutex_unlock+0x154>)
   259a8:	4a52      	ldr	r2, [pc, #328]	; (25af4 <z_impl_k_mutex_unlock+0x158>)
   259aa:	4853      	ldr	r0, [pc, #332]	; (25af8 <z_impl_k_mutex_unlock+0x15c>)
   259ac:	23c7      	movs	r3, #199	; 0xc7
   259ae:	f006 fdf4 	bl	2c59a <printk>
   259b2:	4852      	ldr	r0, [pc, #328]	; (25afc <z_impl_k_mutex_unlock+0x160>)
   259b4:	f006 fdf1 	bl	2c59a <printk>
   259b8:	484e      	ldr	r0, [pc, #312]	; (25af4 <z_impl_k_mutex_unlock+0x158>)
   259ba:	21c7      	movs	r1, #199	; 0xc7
   259bc:	f007 f82e 	bl	2ca1c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   259c0:	68a3      	ldr	r3, [r4, #8]
   259c2:	2b00      	cmp	r3, #0
   259c4:	f000 808e 	beq.w	25ae4 <z_impl_k_mutex_unlock+0x148>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   259c8:	4d4d      	ldr	r5, [pc, #308]	; (25b00 <z_impl_k_mutex_unlock+0x164>)
   259ca:	68aa      	ldr	r2, [r5, #8]
   259cc:	4293      	cmp	r3, r2
   259ce:	f040 808c 	bne.w	25aea <z_impl_k_mutex_unlock+0x14e>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   259d2:	68e3      	ldr	r3, [r4, #12]
   259d4:	b94b      	cbnz	r3, 259ea <z_impl_k_mutex_unlock+0x4e>
   259d6:	494b      	ldr	r1, [pc, #300]	; (25b04 <z_impl_k_mutex_unlock+0x168>)
   259d8:	4847      	ldr	r0, [pc, #284]	; (25af8 <z_impl_k_mutex_unlock+0x15c>)
   259da:	4a46      	ldr	r2, [pc, #280]	; (25af4 <z_impl_k_mutex_unlock+0x158>)
   259dc:	23df      	movs	r3, #223	; 0xdf
   259de:	f006 fddc 	bl	2c59a <printk>
   259e2:	4844      	ldr	r0, [pc, #272]	; (25af4 <z_impl_k_mutex_unlock+0x158>)
   259e4:	21df      	movs	r1, #223	; 0xdf
   259e6:	f007 f819 	bl	2ca1c <assert_post_action>
   259ea:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   259ee:	b163      	cbz	r3, 25a0a <z_impl_k_mutex_unlock+0x6e>
   259f0:	493f      	ldr	r1, [pc, #252]	; (25af0 <z_impl_k_mutex_unlock+0x154>)
   259f2:	4a45      	ldr	r2, [pc, #276]	; (25b08 <z_impl_k_mutex_unlock+0x16c>)
   259f4:	4840      	ldr	r0, [pc, #256]	; (25af8 <z_impl_k_mutex_unlock+0x15c>)
   259f6:	23fd      	movs	r3, #253	; 0xfd
   259f8:	f006 fdcf 	bl	2c59a <printk>
   259fc:	4843      	ldr	r0, [pc, #268]	; (25b0c <z_impl_k_mutex_unlock+0x170>)
   259fe:	f006 fdcc 	bl	2c59a <printk>
   25a02:	4841      	ldr	r0, [pc, #260]	; (25b08 <z_impl_k_mutex_unlock+0x16c>)
   25a04:	21fd      	movs	r1, #253	; 0xfd
   25a06:	f007 f809 	bl	2ca1c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   25a0a:	68ab      	ldr	r3, [r5, #8]
   25a0c:	7bdb      	ldrb	r3, [r3, #15]
   25a0e:	2b01      	cmp	r3, #1
   25a10:	d10c      	bne.n	25a2c <z_impl_k_mutex_unlock+0x90>
   25a12:	493f      	ldr	r1, [pc, #252]	; (25b10 <z_impl_k_mutex_unlock+0x174>)
   25a14:	4a3c      	ldr	r2, [pc, #240]	; (25b08 <z_impl_k_mutex_unlock+0x16c>)
   25a16:	4838      	ldr	r0, [pc, #224]	; (25af8 <z_impl_k_mutex_unlock+0x15c>)
   25a18:	23fe      	movs	r3, #254	; 0xfe
   25a1a:	f006 fdbe 	bl	2c59a <printk>
   25a1e:	483b      	ldr	r0, [pc, #236]	; (25b0c <z_impl_k_mutex_unlock+0x170>)
   25a20:	f006 fdbb 	bl	2c59a <printk>
   25a24:	4838      	ldr	r0, [pc, #224]	; (25b08 <z_impl_k_mutex_unlock+0x16c>)
   25a26:	21fe      	movs	r1, #254	; 0xfe
   25a28:	f006 fff8 	bl	2ca1c <assert_post_action>

	--_current->base.sched_locked;
   25a2c:	68aa      	ldr	r2, [r5, #8]
   25a2e:	7bd3      	ldrb	r3, [r2, #15]
   25a30:	3b01      	subs	r3, #1
   25a32:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   25a34:	68e3      	ldr	r3, [r4, #12]
   25a36:	2b01      	cmp	r3, #1
   25a38:	d905      	bls.n	25a46 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   25a3a:	3b01      	subs	r3, #1
   25a3c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   25a3e:	f001 fe1d 	bl	2767c <k_sched_unlock>

	return 0;
   25a42:	2000      	movs	r0, #0
}
   25a44:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   25a46:	f04f 0340 	mov.w	r3, #64	; 0x40
   25a4a:	f3ef 8511 	mrs	r5, BASEPRI
   25a4e:	f383 8812 	msr	BASEPRI_MAX, r3
   25a52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25a56:	482f      	ldr	r0, [pc, #188]	; (25b14 <z_impl_k_mutex_unlock+0x178>)
   25a58:	f7ff fa28 	bl	24eac <z_spin_lock_valid>
   25a5c:	b968      	cbnz	r0, 25a7a <z_impl_k_mutex_unlock+0xde>
   25a5e:	4a2e      	ldr	r2, [pc, #184]	; (25b18 <z_impl_k_mutex_unlock+0x17c>)
   25a60:	492e      	ldr	r1, [pc, #184]	; (25b1c <z_impl_k_mutex_unlock+0x180>)
   25a62:	4825      	ldr	r0, [pc, #148]	; (25af8 <z_impl_k_mutex_unlock+0x15c>)
   25a64:	2381      	movs	r3, #129	; 0x81
   25a66:	f006 fd98 	bl	2c59a <printk>
   25a6a:	492a      	ldr	r1, [pc, #168]	; (25b14 <z_impl_k_mutex_unlock+0x178>)
   25a6c:	482c      	ldr	r0, [pc, #176]	; (25b20 <z_impl_k_mutex_unlock+0x184>)
   25a6e:	f006 fd94 	bl	2c59a <printk>
   25a72:	4829      	ldr	r0, [pc, #164]	; (25b18 <z_impl_k_mutex_unlock+0x17c>)
   25a74:	2181      	movs	r1, #129	; 0x81
   25a76:	f006 ffd1 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   25a7a:	4826      	ldr	r0, [pc, #152]	; (25b14 <z_impl_k_mutex_unlock+0x178>)
   25a7c:	f7ff fa34 	bl	24ee8 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   25a80:	68a0      	ldr	r0, [r4, #8]
   25a82:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   25a84:	f990 300e 	ldrsb.w	r3, [r0, #14]
   25a88:	4299      	cmp	r1, r3
   25a8a:	d001      	beq.n	25a90 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   25a8c:	f001 fcf0 	bl	27470 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   25a90:	4620      	mov	r0, r4
   25a92:	f001 febb 	bl	2780c <z_unpend_first_thread>
	mutex->owner = new_owner;
   25a96:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   25a98:	b160      	cbz	r0, 25ab4 <z_impl_k_mutex_unlock+0x118>
		mutex->owner_orig_prio = new_owner->base.prio;
   25a9a:	f990 200e 	ldrsb.w	r2, [r0, #14]
   25a9e:	6122      	str	r2, [r4, #16]
   25aa0:	2200      	movs	r2, #0
   25aa2:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
		z_ready_thread(new_owner);
   25aa6:	f001 fb01 	bl	270ac <z_ready_thread>
		z_reschedule(&lock, key);
   25aaa:	481a      	ldr	r0, [pc, #104]	; (25b14 <z_impl_k_mutex_unlock+0x178>)
   25aac:	4629      	mov	r1, r5
   25aae:	f001 f85d 	bl	26b6c <z_reschedule>
   25ab2:	e7c4      	b.n	25a3e <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   25ab4:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25ab6:	4817      	ldr	r0, [pc, #92]	; (25b14 <z_impl_k_mutex_unlock+0x178>)
   25ab8:	f7ff fa06 	bl	24ec8 <z_spin_unlock_valid>
   25abc:	b968      	cbnz	r0, 25ada <z_impl_k_mutex_unlock+0x13e>
   25abe:	4a16      	ldr	r2, [pc, #88]	; (25b18 <z_impl_k_mutex_unlock+0x17c>)
   25ac0:	4918      	ldr	r1, [pc, #96]	; (25b24 <z_impl_k_mutex_unlock+0x188>)
   25ac2:	480d      	ldr	r0, [pc, #52]	; (25af8 <z_impl_k_mutex_unlock+0x15c>)
   25ac4:	23ac      	movs	r3, #172	; 0xac
   25ac6:	f006 fd68 	bl	2c59a <printk>
   25aca:	4912      	ldr	r1, [pc, #72]	; (25b14 <z_impl_k_mutex_unlock+0x178>)
   25acc:	4816      	ldr	r0, [pc, #88]	; (25b28 <z_impl_k_mutex_unlock+0x18c>)
   25ace:	f006 fd64 	bl	2c59a <printk>
   25ad2:	4811      	ldr	r0, [pc, #68]	; (25b18 <z_impl_k_mutex_unlock+0x17c>)
   25ad4:	21ac      	movs	r1, #172	; 0xac
   25ad6:	f006 ffa1 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   25ada:	f385 8811 	msr	BASEPRI, r5
   25ade:	f3bf 8f6f 	isb	sy
   25ae2:	e7ac      	b.n	25a3e <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   25ae4:	f06f 0015 	mvn.w	r0, #21
   25ae8:	e7ac      	b.n	25a44 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   25aea:	f04f 30ff 	mov.w	r0, #4294967295
   25aee:	e7a9      	b.n	25a44 <z_impl_k_mutex_unlock+0xa8>
   25af0:	00037a24 	.word	0x00037a24
   25af4:	00037af3 	.word	0x00037af3
   25af8:	00032486 	.word	0x00032486
   25afc:	00037b15 	.word	0x00037b15
   25b00:	20002040 	.word	0x20002040
   25b04:	00037b3a 	.word	0x00037b3a
   25b08:	00037b51 	.word	0x00037b51
   25b0c:	00036e1f 	.word	0x00036e1f
   25b10:	00037b7c 	.word	0x00037b7c
   25b14:	20002eec 	.word	0x20002eec
   25b18:	00032546 	.word	0x00032546
   25b1c:	00032598 	.word	0x00032598
   25b20:	000325ad 	.word	0x000325ad
   25b24:	0003256c 	.word	0x0003256c
   25b28:	00032583 	.word	0x00032583

00025b2c <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   25b2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25b30:	4604      	mov	r4, r0
   25b32:	f89d a020 	ldrb.w	sl, [sp, #32]
   25b36:	460e      	mov	r6, r1
   25b38:	4690      	mov	r8, r2
   25b3a:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25b3c:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   25b40:	f04f 0340 	mov.w	r3, #64	; 0x40
   25b44:	f3ef 8711 	mrs	r7, BASEPRI
   25b48:	f383 8812 	msr	BASEPRI_MAX, r3
   25b4c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25b50:	4628      	mov	r0, r5
   25b52:	f7ff f9ab 	bl	24eac <z_spin_lock_valid>
   25b56:	b968      	cbnz	r0, 25b74 <queue_insert+0x48>
   25b58:	4a3c      	ldr	r2, [pc, #240]	; (25c4c <queue_insert+0x120>)
   25b5a:	493d      	ldr	r1, [pc, #244]	; (25c50 <queue_insert+0x124>)
   25b5c:	483d      	ldr	r0, [pc, #244]	; (25c54 <queue_insert+0x128>)
   25b5e:	2381      	movs	r3, #129	; 0x81
   25b60:	f006 fd1b 	bl	2c59a <printk>
   25b64:	483c      	ldr	r0, [pc, #240]	; (25c58 <queue_insert+0x12c>)
   25b66:	4629      	mov	r1, r5
   25b68:	f006 fd17 	bl	2c59a <printk>
   25b6c:	4837      	ldr	r0, [pc, #220]	; (25c4c <queue_insert+0x120>)
   25b6e:	2181      	movs	r1, #129	; 0x81
   25b70:	f006 ff54 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   25b74:	4628      	mov	r0, r5
   25b76:	f7ff f9b7 	bl	24ee8 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   25b7a:	f1ba 0f00 	cmp.w	sl, #0
   25b7e:	d000      	beq.n	25b82 <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   25b80:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   25b82:	f104 000c 	add.w	r0, r4, #12
   25b86:	f001 fe41 	bl	2780c <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   25b8a:	b160      	cbz	r0, 25ba6 <queue_insert+0x7a>
   25b8c:	2400      	movs	r4, #0
   25b8e:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
   25b92:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   25b96:	f001 fa89 	bl	270ac <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   25b9a:	4628      	mov	r0, r5
   25b9c:	4639      	mov	r1, r7
   25b9e:	f000 ffe5 	bl	26b6c <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   25ba2:	2000      	movs	r0, #0
   25ba4:	e01e      	b.n	25be4 <queue_insert+0xb8>
	if (alloc) {
   25ba6:	f1b9 0f00 	cmp.w	r9, #0
   25baa:	d02d      	beq.n	25c08 <queue_insert+0xdc>
	return z_thread_aligned_alloc(0, size);
   25bac:	2108      	movs	r1, #8
   25bae:	f003 fab7 	bl	29120 <z_thread_aligned_alloc>
		if (anode == NULL) {
   25bb2:	b9c8      	cbnz	r0, 25be8 <queue_insert+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25bb4:	4628      	mov	r0, r5
   25bb6:	f7ff f987 	bl	24ec8 <z_spin_unlock_valid>
   25bba:	b968      	cbnz	r0, 25bd8 <queue_insert+0xac>
   25bbc:	4a23      	ldr	r2, [pc, #140]	; (25c4c <queue_insert+0x120>)
   25bbe:	4927      	ldr	r1, [pc, #156]	; (25c5c <queue_insert+0x130>)
   25bc0:	4824      	ldr	r0, [pc, #144]	; (25c54 <queue_insert+0x128>)
   25bc2:	23ac      	movs	r3, #172	; 0xac
   25bc4:	f006 fce9 	bl	2c59a <printk>
   25bc8:	4825      	ldr	r0, [pc, #148]	; (25c60 <queue_insert+0x134>)
   25bca:	4629      	mov	r1, r5
   25bcc:	f006 fce5 	bl	2c59a <printk>
   25bd0:	481e      	ldr	r0, [pc, #120]	; (25c4c <queue_insert+0x120>)
   25bd2:	21ac      	movs	r1, #172	; 0xac
   25bd4:	f006 ff22 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   25bd8:	f387 8811 	msr	BASEPRI, r7
   25bdc:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   25be0:	f06f 000b 	mvn.w	r0, #11
}
   25be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   25be8:	2301      	movs	r3, #1
		anode->data = data;
   25bea:	f8c0 8004 	str.w	r8, [r0, #4]
   25bee:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   25bf0:	6803      	ldr	r3, [r0, #0]
   25bf2:	f003 0303 	and.w	r3, r3, #3
   25bf6:	b95e      	cbnz	r6, 25c10 <queue_insert+0xe4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   25bf8:	6822      	ldr	r2, [r4, #0]
   25bfa:	4313      	orrs	r3, r2
   25bfc:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25bfe:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   25c00:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   25c02:	b973      	cbnz	r3, 25c22 <queue_insert+0xf6>
	list->tail = node;
   25c04:	6060      	str	r0, [r4, #4]
}
   25c06:	e00c      	b.n	25c22 <queue_insert+0xf6>
	node->next_and_flags = flags;
   25c08:	f8c8 9000 	str.w	r9, [r8]
}
   25c0c:	4640      	mov	r0, r8
   25c0e:	e7ef      	b.n	25bf0 <queue_insert+0xc4>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25c10:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   25c12:	f032 0203 	bics.w	r2, r2, #3
   25c16:	d110      	bne.n	25c3a <queue_insert+0x10e>
Z_GENLIST_APPEND(sflist, sfnode)
   25c18:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25c1a:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   25c1c:	b93a      	cbnz	r2, 25c2e <queue_insert+0x102>
	list->head = node;
   25c1e:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   25c22:	2104      	movs	r1, #4
   25c24:	f104 0014 	add.w	r0, r4, #20
   25c28:	f00a fca5 	bl	30576 <z_handle_obj_poll_events>
   25c2c:	e7b5      	b.n	25b9a <queue_insert+0x6e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25c2e:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25c30:	f003 0303 	and.w	r3, r3, #3
   25c34:	4303      	orrs	r3, r0
   25c36:	6013      	str	r3, [r2, #0]
   25c38:	e7e4      	b.n	25c04 <queue_insert+0xd8>
   25c3a:	4313      	orrs	r3, r2
   25c3c:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25c3e:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25c40:	f003 0303 	and.w	r3, r3, #3
   25c44:	4303      	orrs	r3, r0
   25c46:	6033      	str	r3, [r6, #0]
}
   25c48:	e7eb      	b.n	25c22 <queue_insert+0xf6>
   25c4a:	bf00      	nop
   25c4c:	00032546 	.word	0x00032546
   25c50:	00032598 	.word	0x00032598
   25c54:	00032486 	.word	0x00032486
   25c58:	000325ad 	.word	0x000325ad
   25c5c:	0003256c 	.word	0x0003256c
   25c60:	00032583 	.word	0x00032583

00025c64 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   25c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25c68:	4605      	mov	r5, r0
   25c6a:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   25c6c:	460c      	mov	r4, r1
   25c6e:	2900      	cmp	r1, #0
   25c70:	d04a      	beq.n	25d08 <k_queue_append_list+0xa4>
   25c72:	2a00      	cmp	r2, #0
   25c74:	d048      	beq.n	25d08 <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25c76:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   25c7a:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c7e:	f3ef 8911 	mrs	r9, BASEPRI
   25c82:	f383 8812 	msr	BASEPRI_MAX, r3
   25c86:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c8a:	4630      	mov	r0, r6
   25c8c:	f7ff f90e 	bl	24eac <z_spin_lock_valid>
   25c90:	b968      	cbnz	r0, 25cae <k_queue_append_list+0x4a>
   25c92:	4a1f      	ldr	r2, [pc, #124]	; (25d10 <k_queue_append_list+0xac>)
   25c94:	491f      	ldr	r1, [pc, #124]	; (25d14 <k_queue_append_list+0xb0>)
   25c96:	4820      	ldr	r0, [pc, #128]	; (25d18 <k_queue_append_list+0xb4>)
   25c98:	2381      	movs	r3, #129	; 0x81
   25c9a:	f006 fc7e 	bl	2c59a <printk>
   25c9e:	481f      	ldr	r0, [pc, #124]	; (25d1c <k_queue_append_list+0xb8>)
   25ca0:	4631      	mov	r1, r6
   25ca2:	f006 fc7a 	bl	2c59a <printk>
   25ca6:	481a      	ldr	r0, [pc, #104]	; (25d10 <k_queue_append_list+0xac>)
   25ca8:	2181      	movs	r1, #129	; 0x81
   25caa:	f006 feb7 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   25cae:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   25cb0:	f105 080c 	add.w	r8, r5, #12
   25cb4:	f7ff f918 	bl	24ee8 <z_spin_lock_set_owner>
   25cb8:	4640      	mov	r0, r8
   25cba:	f001 fda7 	bl	2780c <z_unpend_first_thread>
   25cbe:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   25cc2:	b920      	cbnz	r0, 25cce <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   25cc4:	686b      	ldr	r3, [r5, #4]
   25cc6:	b9cb      	cbnz	r3, 25cfc <k_queue_append_list+0x98>
	list->head = node;
   25cc8:	602c      	str	r4, [r5, #0]
	list->tail = node;
   25cca:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   25ccc:	e00a      	b.n	25ce4 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   25cce:	6144      	str	r4, [r0, #20]
   25cd0:	f8c0 a0b8 	str.w	sl, [r0, #184]	; 0xb8
	z_ready_thread(thread);
   25cd4:	f001 f9ea 	bl	270ac <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   25cd8:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   25cda:	4640      	mov	r0, r8
   25cdc:	f001 fd96 	bl	2780c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   25ce0:	2c00      	cmp	r4, #0
   25ce2:	d1ee      	bne.n	25cc2 <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   25ce4:	2104      	movs	r1, #4
   25ce6:	f105 0014 	add.w	r0, r5, #20
   25cea:	f00a fc44 	bl	30576 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   25cee:	4630      	mov	r0, r6
   25cf0:	4649      	mov	r1, r9
   25cf2:	f000 ff3b 	bl	26b6c <z_reschedule>
	return 0;
   25cf6:	2000      	movs	r0, #0
}
   25cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   25cfc:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   25cfe:	f001 0103 	and.w	r1, r1, #3
   25d02:	430c      	orrs	r4, r1
   25d04:	601c      	str	r4, [r3, #0]
}
   25d06:	e7e0      	b.n	25cca <k_queue_append_list+0x66>
		return -EINVAL;
   25d08:	f06f 0015 	mvn.w	r0, #21
   25d0c:	e7f4      	b.n	25cf8 <k_queue_append_list+0x94>
   25d0e:	bf00      	nop
   25d10:	00032546 	.word	0x00032546
   25d14:	00032598 	.word	0x00032598
   25d18:	00032486 	.word	0x00032486
   25d1c:	000325ad 	.word	0x000325ad

00025d20 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   25d20:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25d24:	4606      	mov	r6, r0
   25d26:	4690      	mov	r8, r2
   25d28:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   25d2a:	f100 0508 	add.w	r5, r0, #8
   25d2e:	f04f 0340 	mov.w	r3, #64	; 0x40
   25d32:	f3ef 8711 	mrs	r7, BASEPRI
   25d36:	f383 8812 	msr	BASEPRI_MAX, r3
   25d3a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25d3e:	4628      	mov	r0, r5
   25d40:	f7ff f8b4 	bl	24eac <z_spin_lock_valid>
   25d44:	b968      	cbnz	r0, 25d62 <z_impl_k_queue_get+0x42>
   25d46:	4a25      	ldr	r2, [pc, #148]	; (25ddc <z_impl_k_queue_get+0xbc>)
   25d48:	4925      	ldr	r1, [pc, #148]	; (25de0 <z_impl_k_queue_get+0xc0>)
   25d4a:	4826      	ldr	r0, [pc, #152]	; (25de4 <z_impl_k_queue_get+0xc4>)
   25d4c:	2381      	movs	r3, #129	; 0x81
   25d4e:	f006 fc24 	bl	2c59a <printk>
   25d52:	4825      	ldr	r0, [pc, #148]	; (25de8 <z_impl_k_queue_get+0xc8>)
   25d54:	4629      	mov	r1, r5
   25d56:	f006 fc20 	bl	2c59a <printk>
   25d5a:	4820      	ldr	r0, [pc, #128]	; (25ddc <z_impl_k_queue_get+0xbc>)
   25d5c:	2181      	movs	r1, #129	; 0x81
   25d5e:	f006 fe5d 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   25d62:	4628      	mov	r0, r5
   25d64:	f7ff f8c0 	bl	24ee8 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   25d68:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   25d6a:	b334      	cbz	r4, 25dba <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25d6c:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25d6e:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   25d70:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   25d74:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   25d76:	4620      	mov	r0, r4
	list->head = node;
   25d78:	6033      	str	r3, [r6, #0]
	list->tail = node;
   25d7a:	bf08      	it	eq
   25d7c:	6073      	streq	r3, [r6, #4]
   25d7e:	2101      	movs	r1, #1
   25d80:	f00a faa9 	bl	302d6 <z_queue_node_peek>
   25d84:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25d86:	4628      	mov	r0, r5
   25d88:	f7ff f89e 	bl	24ec8 <z_spin_unlock_valid>
   25d8c:	b968      	cbnz	r0, 25daa <z_impl_k_queue_get+0x8a>
   25d8e:	4a13      	ldr	r2, [pc, #76]	; (25ddc <z_impl_k_queue_get+0xbc>)
   25d90:	4916      	ldr	r1, [pc, #88]	; (25dec <z_impl_k_queue_get+0xcc>)
   25d92:	4814      	ldr	r0, [pc, #80]	; (25de4 <z_impl_k_queue_get+0xc4>)
   25d94:	23ac      	movs	r3, #172	; 0xac
   25d96:	f006 fc00 	bl	2c59a <printk>
   25d9a:	4815      	ldr	r0, [pc, #84]	; (25df0 <z_impl_k_queue_get+0xd0>)
   25d9c:	4629      	mov	r1, r5
   25d9e:	f006 fbfc 	bl	2c59a <printk>
   25da2:	480e      	ldr	r0, [pc, #56]	; (25ddc <z_impl_k_queue_get+0xbc>)
   25da4:	21ac      	movs	r1, #172	; 0xac
   25da6:	f006 fe39 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   25daa:	f387 8811 	msr	BASEPRI, r7
   25dae:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   25db2:	4620      	mov	r0, r4
   25db4:	b003      	add	sp, #12
   25db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25dba:	ea58 0309 	orrs.w	r3, r8, r9
   25dbe:	d0e2      	beq.n	25d86 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   25dc0:	e9cd 8900 	strd	r8, r9, [sp]
   25dc4:	f106 020c 	add.w	r2, r6, #12
   25dc8:	4639      	mov	r1, r7
   25dca:	4628      	mov	r0, r5
   25dcc:	f001 fb20 	bl	27410 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   25dd0:	2800      	cmp	r0, #0
   25dd2:	d1ee      	bne.n	25db2 <z_impl_k_queue_get+0x92>
   25dd4:	4b07      	ldr	r3, [pc, #28]	; (25df4 <z_impl_k_queue_get+0xd4>)
   25dd6:	689b      	ldr	r3, [r3, #8]
   25dd8:	695c      	ldr	r4, [r3, #20]
   25dda:	e7ea      	b.n	25db2 <z_impl_k_queue_get+0x92>
   25ddc:	00032546 	.word	0x00032546
   25de0:	00032598 	.word	0x00032598
   25de4:	00032486 	.word	0x00032486
   25de8:	000325ad 	.word	0x000325ad
   25dec:	0003256c 	.word	0x0003256c
   25df0:	00032583 	.word	0x00032583
   25df4:	20002040 	.word	0x20002040

00025df8 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   25df8:	b538      	push	{r3, r4, r5, lr}
   25dfa:	4604      	mov	r4, r0
	__asm__ volatile(
   25dfc:	f04f 0340 	mov.w	r3, #64	; 0x40
   25e00:	f3ef 8511 	mrs	r5, BASEPRI
   25e04:	f383 8812 	msr	BASEPRI_MAX, r3
   25e08:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25e0c:	4817      	ldr	r0, [pc, #92]	; (25e6c <z_impl_k_sem_give+0x74>)
   25e0e:	f7ff f84d 	bl	24eac <z_spin_lock_valid>
   25e12:	b968      	cbnz	r0, 25e30 <z_impl_k_sem_give+0x38>
   25e14:	4a16      	ldr	r2, [pc, #88]	; (25e70 <z_impl_k_sem_give+0x78>)
   25e16:	4917      	ldr	r1, [pc, #92]	; (25e74 <z_impl_k_sem_give+0x7c>)
   25e18:	4817      	ldr	r0, [pc, #92]	; (25e78 <z_impl_k_sem_give+0x80>)
   25e1a:	2381      	movs	r3, #129	; 0x81
   25e1c:	f006 fbbd 	bl	2c59a <printk>
   25e20:	4912      	ldr	r1, [pc, #72]	; (25e6c <z_impl_k_sem_give+0x74>)
   25e22:	4816      	ldr	r0, [pc, #88]	; (25e7c <z_impl_k_sem_give+0x84>)
   25e24:	f006 fbb9 	bl	2c59a <printk>
   25e28:	4811      	ldr	r0, [pc, #68]	; (25e70 <z_impl_k_sem_give+0x78>)
   25e2a:	2181      	movs	r1, #129	; 0x81
   25e2c:	f006 fdf6 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   25e30:	480e      	ldr	r0, [pc, #56]	; (25e6c <z_impl_k_sem_give+0x74>)
   25e32:	f7ff f859 	bl	24ee8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   25e36:	4620      	mov	r0, r4
   25e38:	f001 fce8 	bl	2780c <z_unpend_first_thread>

	if (thread != NULL) {
   25e3c:	b150      	cbz	r0, 25e54 <z_impl_k_sem_give+0x5c>
   25e3e:	2200      	movs	r2, #0
   25e40:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   25e44:	f001 f932 	bl	270ac <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   25e48:	4629      	mov	r1, r5
   25e4a:	4808      	ldr	r0, [pc, #32]	; (25e6c <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   25e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   25e50:	f000 be8c 	b.w	26b6c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   25e54:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   25e58:	429a      	cmp	r2, r3
   25e5a:	bf18      	it	ne
   25e5c:	3301      	addne	r3, #1
   25e5e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   25e60:	2102      	movs	r1, #2
   25e62:	f104 0010 	add.w	r0, r4, #16
   25e66:	f00a fb86 	bl	30576 <z_handle_obj_poll_events>
}
   25e6a:	e7ed      	b.n	25e48 <z_impl_k_sem_give+0x50>
   25e6c:	20002ef0 	.word	0x20002ef0
   25e70:	00032546 	.word	0x00032546
   25e74:	00032598 	.word	0x00032598
   25e78:	00032486 	.word	0x00032486
   25e7c:	000325ad 	.word	0x000325ad

00025e80 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   25e80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   25e82:	4604      	mov	r4, r0
   25e84:	4616      	mov	r6, r2
   25e86:	461f      	mov	r7, r3
   25e88:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   25e8c:	b17b      	cbz	r3, 25eae <z_impl_k_sem_take+0x2e>
   25e8e:	ea56 0307 	orrs.w	r3, r6, r7
   25e92:	d00c      	beq.n	25eae <z_impl_k_sem_take+0x2e>
   25e94:	4935      	ldr	r1, [pc, #212]	; (25f6c <z_impl_k_sem_take+0xec>)
   25e96:	4a36      	ldr	r2, [pc, #216]	; (25f70 <z_impl_k_sem_take+0xf0>)
   25e98:	4836      	ldr	r0, [pc, #216]	; (25f74 <z_impl_k_sem_take+0xf4>)
   25e9a:	2379      	movs	r3, #121	; 0x79
   25e9c:	f006 fb7d 	bl	2c59a <printk>
   25ea0:	4835      	ldr	r0, [pc, #212]	; (25f78 <z_impl_k_sem_take+0xf8>)
   25ea2:	f006 fb7a 	bl	2c59a <printk>
   25ea6:	4832      	ldr	r0, [pc, #200]	; (25f70 <z_impl_k_sem_take+0xf0>)
   25ea8:	2179      	movs	r1, #121	; 0x79
   25eaa:	f006 fdb7 	bl	2ca1c <assert_post_action>
   25eae:	f04f 0340 	mov.w	r3, #64	; 0x40
   25eb2:	f3ef 8511 	mrs	r5, BASEPRI
   25eb6:	f383 8812 	msr	BASEPRI_MAX, r3
   25eba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25ebe:	482f      	ldr	r0, [pc, #188]	; (25f7c <z_impl_k_sem_take+0xfc>)
   25ec0:	f7fe fff4 	bl	24eac <z_spin_lock_valid>
   25ec4:	b968      	cbnz	r0, 25ee2 <z_impl_k_sem_take+0x62>
   25ec6:	4a2e      	ldr	r2, [pc, #184]	; (25f80 <z_impl_k_sem_take+0x100>)
   25ec8:	492e      	ldr	r1, [pc, #184]	; (25f84 <z_impl_k_sem_take+0x104>)
   25eca:	482a      	ldr	r0, [pc, #168]	; (25f74 <z_impl_k_sem_take+0xf4>)
   25ecc:	2381      	movs	r3, #129	; 0x81
   25ece:	f006 fb64 	bl	2c59a <printk>
   25ed2:	492a      	ldr	r1, [pc, #168]	; (25f7c <z_impl_k_sem_take+0xfc>)
   25ed4:	482c      	ldr	r0, [pc, #176]	; (25f88 <z_impl_k_sem_take+0x108>)
   25ed6:	f006 fb60 	bl	2c59a <printk>
   25eda:	4829      	ldr	r0, [pc, #164]	; (25f80 <z_impl_k_sem_take+0x100>)
   25edc:	2181      	movs	r1, #129	; 0x81
   25ede:	f006 fd9d 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   25ee2:	4826      	ldr	r0, [pc, #152]	; (25f7c <z_impl_k_sem_take+0xfc>)
   25ee4:	f7ff f800 	bl	24ee8 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   25ee8:	68a3      	ldr	r3, [r4, #8]
   25eea:	b1d3      	cbz	r3, 25f22 <z_impl_k_sem_take+0xa2>
		sem->count--;
   25eec:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25eee:	4823      	ldr	r0, [pc, #140]	; (25f7c <z_impl_k_sem_take+0xfc>)
   25ef0:	60a3      	str	r3, [r4, #8]
   25ef2:	f7fe ffe9 	bl	24ec8 <z_spin_unlock_valid>
   25ef6:	b968      	cbnz	r0, 25f14 <z_impl_k_sem_take+0x94>
   25ef8:	4a21      	ldr	r2, [pc, #132]	; (25f80 <z_impl_k_sem_take+0x100>)
   25efa:	4924      	ldr	r1, [pc, #144]	; (25f8c <z_impl_k_sem_take+0x10c>)
   25efc:	481d      	ldr	r0, [pc, #116]	; (25f74 <z_impl_k_sem_take+0xf4>)
   25efe:	23ac      	movs	r3, #172	; 0xac
   25f00:	f006 fb4b 	bl	2c59a <printk>
   25f04:	491d      	ldr	r1, [pc, #116]	; (25f7c <z_impl_k_sem_take+0xfc>)
   25f06:	4822      	ldr	r0, [pc, #136]	; (25f90 <z_impl_k_sem_take+0x110>)
   25f08:	f006 fb47 	bl	2c59a <printk>
   25f0c:	481c      	ldr	r0, [pc, #112]	; (25f80 <z_impl_k_sem_take+0x100>)
   25f0e:	21ac      	movs	r1, #172	; 0xac
   25f10:	f006 fd84 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   25f14:	f385 8811 	msr	BASEPRI, r5
   25f18:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   25f1c:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   25f1e:	b003      	add	sp, #12
   25f20:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   25f22:	ea56 0307 	orrs.w	r3, r6, r7
   25f26:	d118      	bne.n	25f5a <z_impl_k_sem_take+0xda>
   25f28:	4814      	ldr	r0, [pc, #80]	; (25f7c <z_impl_k_sem_take+0xfc>)
   25f2a:	f7fe ffcd 	bl	24ec8 <z_spin_unlock_valid>
   25f2e:	b968      	cbnz	r0, 25f4c <z_impl_k_sem_take+0xcc>
   25f30:	4a13      	ldr	r2, [pc, #76]	; (25f80 <z_impl_k_sem_take+0x100>)
   25f32:	4916      	ldr	r1, [pc, #88]	; (25f8c <z_impl_k_sem_take+0x10c>)
   25f34:	480f      	ldr	r0, [pc, #60]	; (25f74 <z_impl_k_sem_take+0xf4>)
   25f36:	23ac      	movs	r3, #172	; 0xac
   25f38:	f006 fb2f 	bl	2c59a <printk>
   25f3c:	490f      	ldr	r1, [pc, #60]	; (25f7c <z_impl_k_sem_take+0xfc>)
   25f3e:	4814      	ldr	r0, [pc, #80]	; (25f90 <z_impl_k_sem_take+0x110>)
   25f40:	f006 fb2b 	bl	2c59a <printk>
   25f44:	480e      	ldr	r0, [pc, #56]	; (25f80 <z_impl_k_sem_take+0x100>)
   25f46:	21ac      	movs	r1, #172	; 0xac
   25f48:	f006 fd68 	bl	2ca1c <assert_post_action>
   25f4c:	f385 8811 	msr	BASEPRI, r5
   25f50:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   25f54:	f06f 000f 	mvn.w	r0, #15
   25f58:	e7e1      	b.n	25f1e <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   25f5a:	e9cd 6700 	strd	r6, r7, [sp]
   25f5e:	4622      	mov	r2, r4
   25f60:	4629      	mov	r1, r5
   25f62:	4806      	ldr	r0, [pc, #24]	; (25f7c <z_impl_k_sem_take+0xfc>)
   25f64:	f001 fa54 	bl	27410 <z_pend_curr>
	return ret;
   25f68:	e7d9      	b.n	25f1e <z_impl_k_sem_take+0x9e>
   25f6a:	bf00      	nop
   25f6c:	00037bcd 	.word	0x00037bcd
   25f70:	00037bad 	.word	0x00037bad
   25f74:	00032486 	.word	0x00032486
   25f78:	00036e1f 	.word	0x00036e1f
   25f7c:	20002ef0 	.word	0x20002ef0
   25f80:	00032546 	.word	0x00032546
   25f84:	00032598 	.word	0x00032598
   25f88:	000325ad 	.word	0x000325ad
   25f8c:	0003256c 	.word	0x0003256c
   25f90:	00032583 	.word	0x00032583

00025f94 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   25f94:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   25f96:	4b09      	ldr	r3, [pc, #36]	; (25fbc <k_sys_work_q_init+0x28>)
   25f98:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   25f9a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   25f9c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   25f9e:	9300      	str	r3, [sp, #0]
   25fa0:	4907      	ldr	r1, [pc, #28]	; (25fc0 <k_sys_work_q_init+0x2c>)
   25fa2:	4808      	ldr	r0, [pc, #32]	; (25fc4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   25fa4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   25fa8:	f04f 33ff 	mov.w	r3, #4294967295
   25fac:	f44f 6200 	mov.w	r2, #2048	; 0x800
   25fb0:	f000 fa88 	bl	264c4 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   25fb4:	4620      	mov	r0, r4
   25fb6:	b004      	add	sp, #16
   25fb8:	bd10      	pop	{r4, pc}
   25fba:	bf00      	nop
   25fbc:	00037c1a 	.word	0x00037c1a
   25fc0:	200072c0 	.word	0x200072c0
   25fc4:	20002200 	.word	0x20002200

00025fc8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   25fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25fcc:	4e7e      	ldr	r6, [pc, #504]	; (261c8 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25fce:	4f7f      	ldr	r7, [pc, #508]	; (261cc <work_queue_main+0x204>)
{
   25fd0:	b085      	sub	sp, #20
   25fd2:	4604      	mov	r4, r0
	__asm__ volatile(
   25fd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   25fd8:	f3ef 8811 	mrs	r8, BASEPRI
   25fdc:	f383 8812 	msr	BASEPRI_MAX, r3
   25fe0:	f3bf 8f6f 	isb	sy
   25fe4:	4630      	mov	r0, r6
   25fe6:	f7fe ff61 	bl	24eac <z_spin_lock_valid>
   25fea:	b968      	cbnz	r0, 26008 <work_queue_main+0x40>
   25fec:	4a78      	ldr	r2, [pc, #480]	; (261d0 <work_queue_main+0x208>)
   25fee:	4979      	ldr	r1, [pc, #484]	; (261d4 <work_queue_main+0x20c>)
   25ff0:	4879      	ldr	r0, [pc, #484]	; (261d8 <work_queue_main+0x210>)
   25ff2:	2381      	movs	r3, #129	; 0x81
   25ff4:	f006 fad1 	bl	2c59a <printk>
   25ff8:	4878      	ldr	r0, [pc, #480]	; (261dc <work_queue_main+0x214>)
   25ffa:	4631      	mov	r1, r6
   25ffc:	f006 facd 	bl	2c59a <printk>
   26000:	4873      	ldr	r0, [pc, #460]	; (261d0 <work_queue_main+0x208>)
   26002:	2181      	movs	r1, #129	; 0x81
   26004:	f006 fd0a 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   26008:	4630      	mov	r0, r6
   2600a:	f7fe ff6d 	bl	24ee8 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   2600e:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
	return list->head;
   26012:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
Z_GENLIST_GET(slist, snode)
   26016:	b9ad      	cbnz	r5, 26044 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   26018:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   2601c:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   2601e:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
		} else if (flag_test_and_clear(&queue->flags,
   26022:	f100 8092 	bmi.w	2614a <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   26026:	2300      	movs	r3, #0
   26028:	9302      	str	r3, [sp, #8]
   2602a:	f04f 32ff 	mov.w	r2, #4294967295
   2602e:	f04f 33ff 	mov.w	r3, #4294967295
   26032:	e9cd 2300 	strd	r2, r3, [sp]
   26036:	4641      	mov	r1, r8
   26038:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
   2603c:	4630      	mov	r0, r6
   2603e:	f001 fef1 	bl	27e24 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   26042:	e7c7      	b.n	25fd4 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   26044:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
   26048:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   2604a:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2604e:	428d      	cmp	r5, r1
   26050:	d101      	bne.n	26056 <work_queue_main+0x8e>
	list->tail = node;
   26052:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
	*flagp |= BIT(bit);
   26056:	f043 0302 	orr.w	r3, r3, #2
   2605a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	*flagp &= ~BIT(bit);
   2605e:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   26060:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   26064:	f023 0304 	bic.w	r3, r3, #4
   26068:	f043 0301 	orr.w	r3, r3, #1
   2606c:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2606e:	4630      	mov	r0, r6
   26070:	f7fe ff2a 	bl	24ec8 <z_spin_unlock_valid>
   26074:	b968      	cbnz	r0, 26092 <work_queue_main+0xca>
   26076:	4a56      	ldr	r2, [pc, #344]	; (261d0 <work_queue_main+0x208>)
   26078:	4959      	ldr	r1, [pc, #356]	; (261e0 <work_queue_main+0x218>)
   2607a:	4857      	ldr	r0, [pc, #348]	; (261d8 <work_queue_main+0x210>)
   2607c:	23ac      	movs	r3, #172	; 0xac
   2607e:	f006 fa8c 	bl	2c59a <printk>
   26082:	4858      	ldr	r0, [pc, #352]	; (261e4 <work_queue_main+0x21c>)
   26084:	4631      	mov	r1, r6
   26086:	f006 fa88 	bl	2c59a <printk>
   2608a:	4851      	ldr	r0, [pc, #324]	; (261d0 <work_queue_main+0x208>)
   2608c:	21ac      	movs	r1, #172	; 0xac
   2608e:	f006 fcc5 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26092:	f388 8811 	msr	BASEPRI, r8
   26096:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   2609a:	f1b9 0f00 	cmp.w	r9, #0
   2609e:	d10b      	bne.n	260b8 <work_queue_main+0xf0>
   260a0:	4951      	ldr	r1, [pc, #324]	; (261e8 <work_queue_main+0x220>)
   260a2:	484d      	ldr	r0, [pc, #308]	; (261d8 <work_queue_main+0x210>)
   260a4:	4a51      	ldr	r2, [pc, #324]	; (261ec <work_queue_main+0x224>)
   260a6:	f44f 7322 	mov.w	r3, #648	; 0x288
   260aa:	f006 fa76 	bl	2c59a <printk>
   260ae:	484f      	ldr	r0, [pc, #316]	; (261ec <work_queue_main+0x224>)
   260b0:	f44f 7122 	mov.w	r1, #648	; 0x288
   260b4:	f006 fcb2 	bl	2ca1c <assert_post_action>
		handler(work);
   260b8:	4628      	mov	r0, r5
   260ba:	47c8      	blx	r9
	__asm__ volatile(
   260bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   260c0:	f3ef 8a11 	mrs	sl, BASEPRI
   260c4:	f383 8812 	msr	BASEPRI_MAX, r3
   260c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   260cc:	4630      	mov	r0, r6
   260ce:	f7fe feed 	bl	24eac <z_spin_lock_valid>
   260d2:	b968      	cbnz	r0, 260f0 <work_queue_main+0x128>
   260d4:	4a3e      	ldr	r2, [pc, #248]	; (261d0 <work_queue_main+0x208>)
   260d6:	493f      	ldr	r1, [pc, #252]	; (261d4 <work_queue_main+0x20c>)
   260d8:	483f      	ldr	r0, [pc, #252]	; (261d8 <work_queue_main+0x210>)
   260da:	2381      	movs	r3, #129	; 0x81
   260dc:	f006 fa5d 	bl	2c59a <printk>
   260e0:	483e      	ldr	r0, [pc, #248]	; (261dc <work_queue_main+0x214>)
   260e2:	4631      	mov	r1, r6
   260e4:	f006 fa59 	bl	2c59a <printk>
   260e8:	4839      	ldr	r0, [pc, #228]	; (261d0 <work_queue_main+0x208>)
   260ea:	2181      	movs	r1, #129	; 0x81
   260ec:	f006 fc96 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   260f0:	4630      	mov	r0, r6
   260f2:	f7fe fef9 	bl	24ee8 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   260f6:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   260f8:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   260fa:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   260fe:	d42e      	bmi.n	2615e <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   26100:	60ea      	str	r2, [r5, #12]
   26102:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   26106:	f023 0302 	bic.w	r3, r3, #2
   2610a:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2610e:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   26110:	f3c3 2500 	ubfx	r5, r3, #8, #1
   26114:	f7fe fed8 	bl	24ec8 <z_spin_unlock_valid>
   26118:	b968      	cbnz	r0, 26136 <work_queue_main+0x16e>
   2611a:	4a2d      	ldr	r2, [pc, #180]	; (261d0 <work_queue_main+0x208>)
   2611c:	4930      	ldr	r1, [pc, #192]	; (261e0 <work_queue_main+0x218>)
   2611e:	482e      	ldr	r0, [pc, #184]	; (261d8 <work_queue_main+0x210>)
   26120:	23ac      	movs	r3, #172	; 0xac
   26122:	f006 fa3a 	bl	2c59a <printk>
   26126:	482f      	ldr	r0, [pc, #188]	; (261e4 <work_queue_main+0x21c>)
   26128:	4631      	mov	r1, r6
   2612a:	f006 fa36 	bl	2c59a <printk>
   2612e:	4828      	ldr	r0, [pc, #160]	; (261d0 <work_queue_main+0x208>)
   26130:	21ac      	movs	r1, #172	; 0xac
   26132:	f006 fc73 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26136:	f38a 8811 	msr	BASEPRI, sl
   2613a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2613e:	2d00      	cmp	r5, #0
   26140:	f47f af48 	bne.w	25fd4 <work_queue_main+0xc>
	z_impl_k_yield();
   26144:	f001 fbbe 	bl	278c4 <z_impl_k_yield>
}
   26148:	e744      	b.n	25fd4 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   2614a:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2614e:	2200      	movs	r2, #0
   26150:	2101      	movs	r1, #1
   26152:	4628      	mov	r0, r5
   26154:	f001 fe0c 	bl	27d70 <z_sched_wake>
   26158:	2800      	cmp	r0, #0
   2615a:	d1f8      	bne.n	2614e <work_queue_main+0x186>
   2615c:	e763      	b.n	26026 <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2615e:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   26160:	f023 0303 	bic.w	r3, r3, #3
   26164:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   26166:	2800      	cmp	r0, #0
   26168:	d0cb      	beq.n	26102 <work_queue_main+0x13a>
	return node->next;
   2616a:	6803      	ldr	r3, [r0, #0]
   2616c:	2b00      	cmp	r3, #0
   2616e:	bf38      	it	cc
   26170:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   26172:	f04f 0900 	mov.w	r9, #0
   26176:	4698      	mov	r8, r3
	parent->next = child;
   26178:	46cb      	mov	fp, r9
		if (wc->work == work) {
   2617a:	6843      	ldr	r3, [r0, #4]
   2617c:	429d      	cmp	r5, r3
   2617e:	4602      	mov	r2, r0
   26180:	d10d      	bne.n	2619e <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   26182:	6802      	ldr	r2, [r0, #0]
   26184:	f1b9 0f00 	cmp.w	r9, #0
   26188:	d115      	bne.n	261b6 <work_queue_main+0x1ee>
   2618a:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   2618c:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2618e:	4283      	cmp	r3, r0
   26190:	d100      	bne.n	26194 <work_queue_main+0x1cc>
	list->tail = node;
   26192:	607a      	str	r2, [r7, #4]
	parent->next = child;
   26194:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   26198:	f7ff fe2e 	bl	25df8 <z_impl_k_sem_give>
}
   2619c:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2619e:	f1b8 0f00 	cmp.w	r8, #0
   261a2:	d0ae      	beq.n	26102 <work_queue_main+0x13a>
	return node->next;
   261a4:	f8d8 3000 	ldr.w	r3, [r8]
   261a8:	2b00      	cmp	r3, #0
   261aa:	bf38      	it	cc
   261ac:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   261ae:	4640      	mov	r0, r8
   261b0:	4691      	mov	r9, r2
   261b2:	4698      	mov	r8, r3
   261b4:	e7e1      	b.n	2617a <work_queue_main+0x1b2>
	parent->next = child;
   261b6:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   261ba:	687b      	ldr	r3, [r7, #4]
   261bc:	4283      	cmp	r3, r0
	list->tail = node;
   261be:	bf08      	it	eq
   261c0:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   261c4:	e7e6      	b.n	26194 <work_queue_main+0x1cc>
   261c6:	bf00      	nop
   261c8:	20002ef4 	.word	0x20002ef4
   261cc:	20002ef8 	.word	0x20002ef8
   261d0:	00032546 	.word	0x00032546
   261d4:	00032598 	.word	0x00032598
   261d8:	00032486 	.word	0x00032486
   261dc:	000325ad 	.word	0x000325ad
   261e0:	0003256c 	.word	0x0003256c
   261e4:	00032583 	.word	0x00032583
   261e8:	00037c44 	.word	0x00037c44
   261ec:	00037c23 	.word	0x00037c23

000261f0 <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   261f0:	68c3      	ldr	r3, [r0, #12]
{
   261f2:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   261f4:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   261f8:	079b      	lsls	r3, r3, #30
{
   261fa:	4605      	mov	r5, r0
   261fc:	460c      	mov	r4, r1
	if (ret) {
   261fe:	d50d      	bpl.n	2621c <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   26200:	2201      	movs	r2, #1
   26202:	2100      	movs	r1, #0
   26204:	f104 0008 	add.w	r0, r4, #8
   26208:	f00a f893 	bl	30332 <z_impl_k_sem_init>
	parent->next = child;
   2620c:	2300      	movs	r3, #0
   2620e:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   26210:	4b05      	ldr	r3, [pc, #20]	; (26228 <cancel_sync_locked+0x38>)
	canceler->work = work;
   26212:	6065      	str	r5, [r4, #4]
   26214:	685a      	ldr	r2, [r3, #4]
   26216:	b91a      	cbnz	r2, 26220 <cancel_sync_locked+0x30>
	list->head = node;
   26218:	e9c3 4400 	strd	r4, r4, [r3]
}
   2621c:	4630      	mov	r0, r6
   2621e:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   26220:	6014      	str	r4, [r2, #0]
	list->tail = node;
   26222:	605c      	str	r4, [r3, #4]
}
   26224:	e7fa      	b.n	2621c <cancel_sync_locked+0x2c>
   26226:	bf00      	nop
   26228:	20002ef8 	.word	0x20002ef8

0002622c <submit_to_queue_locked>:
{
   2622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2622e:	68c3      	ldr	r3, [r0, #12]
   26230:	079a      	lsls	r2, r3, #30
{
   26232:	4604      	mov	r4, r0
   26234:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   26236:	f3c3 0540 	ubfx	r5, r3, #1, #1
   2623a:	d42b      	bmi.n	26294 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   2623c:	075f      	lsls	r7, r3, #29
   2623e:	d42b      	bmi.n	26298 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   26240:	680a      	ldr	r2, [r1, #0]
   26242:	b90a      	cbnz	r2, 26248 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   26244:	6882      	ldr	r2, [r0, #8]
   26246:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   26248:	07d8      	lsls	r0, r3, #31
   2624a:	d528      	bpl.n	2629e <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   2624c:	68a3      	ldr	r3, [r4, #8]
   2624e:	b95b      	cbnz	r3, 26268 <submit_to_queue_locked+0x3c>
   26250:	4924      	ldr	r1, [pc, #144]	; (262e4 <submit_to_queue_locked+0xb8>)
   26252:	4825      	ldr	r0, [pc, #148]	; (262e8 <submit_to_queue_locked+0xbc>)
   26254:	4a25      	ldr	r2, [pc, #148]	; (262ec <submit_to_queue_locked+0xc0>)
   26256:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   2625a:	f006 f99e 	bl	2c59a <printk>
   2625e:	4823      	ldr	r0, [pc, #140]	; (262ec <submit_to_queue_locked+0xc0>)
   26260:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   26264:	f006 fbda 	bl	2ca1c <assert_post_action>
			*queuep = work->queue;
   26268:	68a3      	ldr	r3, [r4, #8]
   2626a:	6033      	str	r3, [r6, #0]
			ret = 2;
   2626c:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   2626e:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   26270:	b38f      	cbz	r7, 262d6 <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   26272:	4b1f      	ldr	r3, [pc, #124]	; (262f0 <submit_to_queue_locked+0xc4>)
   26274:	689b      	ldr	r3, [r3, #8]
   26276:	42bb      	cmp	r3, r7
   26278:	d113      	bne.n	262a2 <submit_to_queue_locked+0x76>
   2627a:	f009 fff3 	bl	30264 <k_is_in_isr>
   2627e:	f080 0001 	eor.w	r0, r0, #1
   26282:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   26284:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   26288:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   2628a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2628e:	d525      	bpl.n	262dc <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   26290:	b14a      	cbz	r2, 262a6 <submit_to_queue_locked+0x7a>
   26292:	b950      	cbnz	r0, 262aa <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   26294:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   26298:	2300      	movs	r3, #0
   2629a:	6033      	str	r3, [r6, #0]
	return ret;
   2629c:	e015      	b.n	262ca <submit_to_queue_locked+0x9e>
		ret = 1;
   2629e:	2501      	movs	r5, #1
   262a0:	e7e5      	b.n	2626e <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   262a2:	2000      	movs	r0, #0
   262a4:	e7ee      	b.n	26284 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   262a6:	071b      	lsls	r3, r3, #28
   262a8:	d4f4      	bmi.n	26294 <submit_to_queue_locked+0x68>
	parent->next = child;
   262aa:	2300      	movs	r3, #0
   262ac:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   262ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   262b2:	b963      	cbnz	r3, 262ce <submit_to_queue_locked+0xa2>
	list->head = node;
   262b4:	e9c7 4430 	strd	r4, r4, [r7, #192]	; 0xc0
		(void)notify_queue_locked(queue);
   262b8:	4638      	mov	r0, r7
   262ba:	f00a f84a 	bl	30352 <notify_queue_locked>
	*flagp |= BIT(bit);
   262be:	68e3      	ldr	r3, [r4, #12]
   262c0:	f043 0304 	orr.w	r3, r3, #4
   262c4:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   262c6:	6833      	ldr	r3, [r6, #0]
   262c8:	60a3      	str	r3, [r4, #8]
}
   262ca:	4628      	mov	r0, r5
   262cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   262ce:	601c      	str	r4, [r3, #0]
	list->tail = node;
   262d0:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
}
   262d4:	e7f0      	b.n	262b8 <submit_to_queue_locked+0x8c>
		return -EINVAL;
   262d6:	f06f 0515 	mvn.w	r5, #21
   262da:	e7dd      	b.n	26298 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   262dc:	f06f 0512 	mvn.w	r5, #18
   262e0:	e7da      	b.n	26298 <submit_to_queue_locked+0x6c>
   262e2:	bf00      	nop
   262e4:	00037c5b 	.word	0x00037c5b
   262e8:	00032486 	.word	0x00032486
   262ec:	00037c23 	.word	0x00037c23
   262f0:	20002040 	.word	0x20002040

000262f4 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   262f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
   262f6:	4604      	mov	r4, r0
	__asm__ volatile(
   262f8:	f04f 0340 	mov.w	r3, #64	; 0x40
   262fc:	f3ef 8511 	mrs	r5, BASEPRI
   26300:	f383 8812 	msr	BASEPRI_MAX, r3
   26304:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26308:	481e      	ldr	r0, [pc, #120]	; (26384 <work_timeout+0x90>)
   2630a:	f7fe fdcf 	bl	24eac <z_spin_lock_valid>
   2630e:	b968      	cbnz	r0, 2632c <work_timeout+0x38>
   26310:	4a1d      	ldr	r2, [pc, #116]	; (26388 <work_timeout+0x94>)
   26312:	491e      	ldr	r1, [pc, #120]	; (2638c <work_timeout+0x98>)
   26314:	481e      	ldr	r0, [pc, #120]	; (26390 <work_timeout+0x9c>)
   26316:	2381      	movs	r3, #129	; 0x81
   26318:	f006 f93f 	bl	2c59a <printk>
   2631c:	4919      	ldr	r1, [pc, #100]	; (26384 <work_timeout+0x90>)
   2631e:	481d      	ldr	r0, [pc, #116]	; (26394 <work_timeout+0xa0>)
   26320:	f006 f93b 	bl	2c59a <printk>
   26324:	4818      	ldr	r0, [pc, #96]	; (26388 <work_timeout+0x94>)
   26326:	2181      	movs	r1, #129	; 0x81
   26328:	f006 fb78 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   2632c:	4815      	ldr	r0, [pc, #84]	; (26384 <work_timeout+0x90>)
   2632e:	f7fe fddb 	bl	24ee8 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   26332:	2300      	movs	r3, #0
   26334:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   26336:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   2633a:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2633e:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   26340:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   26344:	d506      	bpl.n	26354 <work_timeout+0x60>
		queue = dw->queue;
   26346:	69a3      	ldr	r3, [r4, #24]
   26348:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   2634a:	a901      	add	r1, sp, #4
   2634c:	f1a4 0010 	sub.w	r0, r4, #16
   26350:	f7ff ff6c 	bl	2622c <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26354:	480b      	ldr	r0, [pc, #44]	; (26384 <work_timeout+0x90>)
   26356:	f7fe fdb7 	bl	24ec8 <z_spin_unlock_valid>
   2635a:	b968      	cbnz	r0, 26378 <work_timeout+0x84>
   2635c:	4a0a      	ldr	r2, [pc, #40]	; (26388 <work_timeout+0x94>)
   2635e:	490e      	ldr	r1, [pc, #56]	; (26398 <work_timeout+0xa4>)
   26360:	480b      	ldr	r0, [pc, #44]	; (26390 <work_timeout+0x9c>)
   26362:	23ac      	movs	r3, #172	; 0xac
   26364:	f006 f919 	bl	2c59a <printk>
   26368:	4906      	ldr	r1, [pc, #24]	; (26384 <work_timeout+0x90>)
   2636a:	480c      	ldr	r0, [pc, #48]	; (2639c <work_timeout+0xa8>)
   2636c:	f006 f915 	bl	2c59a <printk>
   26370:	4805      	ldr	r0, [pc, #20]	; (26388 <work_timeout+0x94>)
   26372:	21ac      	movs	r1, #172	; 0xac
   26374:	f006 fb52 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26378:	f385 8811 	msr	BASEPRI, r5
   2637c:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   26380:	b003      	add	sp, #12
   26382:	bd30      	pop	{r4, r5, pc}
   26384:	20002ef4 	.word	0x20002ef4
   26388:	00032546 	.word	0x00032546
   2638c:	00032598 	.word	0x00032598
   26390:	00032486 	.word	0x00032486
   26394:	000325ad 	.word	0x000325ad
   26398:	0003256c 	.word	0x0003256c
   2639c:	00032583 	.word	0x00032583

000263a0 <k_work_init>:
{
   263a0:	b538      	push	{r3, r4, r5, lr}
   263a2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   263a4:	4604      	mov	r4, r0
   263a6:	b948      	cbnz	r0, 263bc <k_work_init+0x1c>
   263a8:	490d      	ldr	r1, [pc, #52]	; (263e0 <k_work_init+0x40>)
   263aa:	480e      	ldr	r0, [pc, #56]	; (263e4 <k_work_init+0x44>)
   263ac:	4a0e      	ldr	r2, [pc, #56]	; (263e8 <k_work_init+0x48>)
   263ae:	2389      	movs	r3, #137	; 0x89
   263b0:	f006 f8f3 	bl	2c59a <printk>
   263b4:	480c      	ldr	r0, [pc, #48]	; (263e8 <k_work_init+0x48>)
   263b6:	2189      	movs	r1, #137	; 0x89
   263b8:	f006 fb30 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   263bc:	b94d      	cbnz	r5, 263d2 <k_work_init+0x32>
   263be:	490b      	ldr	r1, [pc, #44]	; (263ec <k_work_init+0x4c>)
   263c0:	4808      	ldr	r0, [pc, #32]	; (263e4 <k_work_init+0x44>)
   263c2:	4a09      	ldr	r2, [pc, #36]	; (263e8 <k_work_init+0x48>)
   263c4:	238a      	movs	r3, #138	; 0x8a
   263c6:	f006 f8e8 	bl	2c59a <printk>
   263ca:	4807      	ldr	r0, [pc, #28]	; (263e8 <k_work_init+0x48>)
   263cc:	218a      	movs	r1, #138	; 0x8a
   263ce:	f006 fb25 	bl	2ca1c <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   263d2:	2210      	movs	r2, #16
   263d4:	2100      	movs	r1, #0
   263d6:	4620      	mov	r0, r4
   263d8:	f00a f927 	bl	3062a <memset>
   263dc:	6065      	str	r5, [r4, #4]
}
   263de:	bd38      	pop	{r3, r4, r5, pc}
   263e0:	00037cfa 	.word	0x00037cfa
   263e4:	00032486 	.word	0x00032486
   263e8:	00037c23 	.word	0x00037c23
   263ec:	00037c44 	.word	0x00037c44

000263f0 <k_work_submit_to_queue>:
{
   263f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   263f2:	460c      	mov	r4, r1
{
   263f4:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   263f6:	b959      	cbnz	r1, 26410 <k_work_submit_to_queue+0x20>
   263f8:	4926      	ldr	r1, [pc, #152]	; (26494 <k_work_submit_to_queue+0xa4>)
   263fa:	4827      	ldr	r0, [pc, #156]	; (26498 <k_work_submit_to_queue+0xa8>)
   263fc:	4a27      	ldr	r2, [pc, #156]	; (2649c <k_work_submit_to_queue+0xac>)
   263fe:	f240 1369 	movw	r3, #361	; 0x169
   26402:	f006 f8ca 	bl	2c59a <printk>
   26406:	4825      	ldr	r0, [pc, #148]	; (2649c <k_work_submit_to_queue+0xac>)
   26408:	f240 1169 	movw	r1, #361	; 0x169
   2640c:	f006 fb06 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26410:	f04f 0340 	mov.w	r3, #64	; 0x40
   26414:	f3ef 8511 	mrs	r5, BASEPRI
   26418:	f383 8812 	msr	BASEPRI_MAX, r3
   2641c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26420:	481f      	ldr	r0, [pc, #124]	; (264a0 <k_work_submit_to_queue+0xb0>)
   26422:	f7fe fd43 	bl	24eac <z_spin_lock_valid>
   26426:	b968      	cbnz	r0, 26444 <k_work_submit_to_queue+0x54>
   26428:	4a1e      	ldr	r2, [pc, #120]	; (264a4 <k_work_submit_to_queue+0xb4>)
   2642a:	491f      	ldr	r1, [pc, #124]	; (264a8 <k_work_submit_to_queue+0xb8>)
   2642c:	481a      	ldr	r0, [pc, #104]	; (26498 <k_work_submit_to_queue+0xa8>)
   2642e:	2381      	movs	r3, #129	; 0x81
   26430:	f006 f8b3 	bl	2c59a <printk>
   26434:	491a      	ldr	r1, [pc, #104]	; (264a0 <k_work_submit_to_queue+0xb0>)
   26436:	481d      	ldr	r0, [pc, #116]	; (264ac <k_work_submit_to_queue+0xbc>)
   26438:	f006 f8af 	bl	2c59a <printk>
   2643c:	4819      	ldr	r0, [pc, #100]	; (264a4 <k_work_submit_to_queue+0xb4>)
   2643e:	2181      	movs	r1, #129	; 0x81
   26440:	f006 faec 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   26444:	4816      	ldr	r0, [pc, #88]	; (264a0 <k_work_submit_to_queue+0xb0>)
   26446:	f7fe fd4f 	bl	24ee8 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   2644a:	4620      	mov	r0, r4
   2644c:	a901      	add	r1, sp, #4
   2644e:	f7ff feed 	bl	2622c <submit_to_queue_locked>
   26452:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26454:	4812      	ldr	r0, [pc, #72]	; (264a0 <k_work_submit_to_queue+0xb0>)
   26456:	f7fe fd37 	bl	24ec8 <z_spin_unlock_valid>
   2645a:	b968      	cbnz	r0, 26478 <k_work_submit_to_queue+0x88>
   2645c:	4a11      	ldr	r2, [pc, #68]	; (264a4 <k_work_submit_to_queue+0xb4>)
   2645e:	4914      	ldr	r1, [pc, #80]	; (264b0 <k_work_submit_to_queue+0xc0>)
   26460:	480d      	ldr	r0, [pc, #52]	; (26498 <k_work_submit_to_queue+0xa8>)
   26462:	23ac      	movs	r3, #172	; 0xac
   26464:	f006 f899 	bl	2c59a <printk>
   26468:	490d      	ldr	r1, [pc, #52]	; (264a0 <k_work_submit_to_queue+0xb0>)
   2646a:	4812      	ldr	r0, [pc, #72]	; (264b4 <k_work_submit_to_queue+0xc4>)
   2646c:	f006 f895 	bl	2c59a <printk>
   26470:	480c      	ldr	r0, [pc, #48]	; (264a4 <k_work_submit_to_queue+0xb4>)
   26472:	21ac      	movs	r1, #172	; 0xac
   26474:	f006 fad2 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26478:	f385 8811 	msr	BASEPRI, r5
   2647c:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   26480:	2c00      	cmp	r4, #0
   26482:	dd04      	ble.n	2648e <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   26484:	f001 fbae 	bl	27be4 <z_impl_k_is_preempt_thread>
   26488:	b108      	cbz	r0, 2648e <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   2648a:	f001 fa1b 	bl	278c4 <z_impl_k_yield>
}
   2648e:	4620      	mov	r0, r4
   26490:	b003      	add	sp, #12
   26492:	bd30      	pop	{r4, r5, pc}
   26494:	00037cfa 	.word	0x00037cfa
   26498:	00032486 	.word	0x00032486
   2649c:	00037c23 	.word	0x00037c23
   264a0:	20002ef4 	.word	0x20002ef4
   264a4:	00032546 	.word	0x00032546
   264a8:	00032598 	.word	0x00032598
   264ac:	000325ad 	.word	0x000325ad
   264b0:	0003256c 	.word	0x0003256c
   264b4:	00032583 	.word	0x00032583

000264b8 <k_work_submit>:
{
   264b8:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   264ba:	4801      	ldr	r0, [pc, #4]	; (264c0 <k_work_submit+0x8>)
   264bc:	f7ff bf98 	b.w	263f0 <k_work_submit_to_queue>
   264c0:	20002200 	.word	0x20002200

000264c4 <k_work_queue_start>:
{
   264c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   264c8:	b088      	sub	sp, #32
   264ca:	460e      	mov	r6, r1
   264cc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   264ce:	4617      	mov	r7, r2
   264d0:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   264d2:	4604      	mov	r4, r0
   264d4:	b958      	cbnz	r0, 264ee <k_work_queue_start+0x2a>
   264d6:	492e      	ldr	r1, [pc, #184]	; (26590 <k_work_queue_start+0xcc>)
   264d8:	482e      	ldr	r0, [pc, #184]	; (26594 <k_work_queue_start+0xd0>)
   264da:	4a2f      	ldr	r2, [pc, #188]	; (26598 <k_work_queue_start+0xd4>)
   264dc:	f240 23b5 	movw	r3, #693	; 0x2b5
   264e0:	f006 f85b 	bl	2c59a <printk>
   264e4:	482c      	ldr	r0, [pc, #176]	; (26598 <k_work_queue_start+0xd4>)
   264e6:	f240 21b5 	movw	r1, #693	; 0x2b5
   264ea:	f006 fa97 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(stack);
   264ee:	b95e      	cbnz	r6, 26508 <k_work_queue_start+0x44>
   264f0:	492a      	ldr	r1, [pc, #168]	; (2659c <k_work_queue_start+0xd8>)
   264f2:	4828      	ldr	r0, [pc, #160]	; (26594 <k_work_queue_start+0xd0>)
   264f4:	4a28      	ldr	r2, [pc, #160]	; (26598 <k_work_queue_start+0xd4>)
   264f6:	f240 23b6 	movw	r3, #694	; 0x2b6
   264fa:	f006 f84e 	bl	2c59a <printk>
   264fe:	4826      	ldr	r0, [pc, #152]	; (26598 <k_work_queue_start+0xd4>)
   26500:	f240 21b6 	movw	r1, #694	; 0x2b6
   26504:	f006 fa8a 	bl	2ca1c <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   26508:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   2650c:	07db      	lsls	r3, r3, #31
   2650e:	d50b      	bpl.n	26528 <k_work_queue_start+0x64>
   26510:	4923      	ldr	r1, [pc, #140]	; (265a0 <k_work_queue_start+0xdc>)
   26512:	4820      	ldr	r0, [pc, #128]	; (26594 <k_work_queue_start+0xd0>)
   26514:	4a20      	ldr	r2, [pc, #128]	; (26598 <k_work_queue_start+0xd4>)
   26516:	f240 23b7 	movw	r3, #695	; 0x2b7
   2651a:	f006 f83e 	bl	2c59a <printk>
   2651e:	481e      	ldr	r0, [pc, #120]	; (26598 <k_work_queue_start+0xd4>)
   26520:	f240 21b7 	movw	r1, #695	; 0x2b7
   26524:	f006 fa7a 	bl	2ca1c <assert_post_action>
	list->head = NULL;
   26528:	2300      	movs	r3, #0
	list->tail = NULL;
   2652a:	e9c4 3330 	strd	r3, r3, [r4, #192]	; 0xc0
   2652e:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
	list->tail = (sys_dnode_t *)list;
   26532:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
   26536:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   2653a:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0
	if ((cfg != NULL) && cfg->no_yield) {
   2653e:	b32d      	cbz	r5, 2658c <k_work_queue_start+0xc8>
   26540:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   26542:	2b00      	cmp	r3, #0
   26544:	f240 1101 	movw	r1, #257	; 0x101
   26548:	bf08      	it	eq
   2654a:	2101      	moveq	r1, #1
	*flagp = flags;
   2654c:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   26550:	f04f 32ff 	mov.w	r2, #4294967295
   26554:	f04f 33ff 	mov.w	r3, #4294967295
   26558:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2655c:	2200      	movs	r2, #0
   2655e:	e9cd 8203 	strd	r8, r2, [sp, #12]
   26562:	e9cd 2201 	strd	r2, r2, [sp, #4]
   26566:	4b0f      	ldr	r3, [pc, #60]	; (265a4 <k_work_queue_start+0xe0>)
   26568:	9400      	str	r4, [sp, #0]
   2656a:	463a      	mov	r2, r7
   2656c:	4631      	mov	r1, r6
   2656e:	4620      	mov	r0, r4
   26570:	f7fe fe44 	bl	251fc <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   26574:	b125      	cbz	r5, 26580 <k_work_queue_start+0xbc>
   26576:	6829      	ldr	r1, [r5, #0]
   26578:	b111      	cbz	r1, 26580 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   2657a:	4620      	mov	r0, r4
   2657c:	f7fe fc4c 	bl	24e18 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   26580:	4620      	mov	r0, r4
}
   26582:	b008      	add	sp, #32
   26584:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   26588:	f009 be74 	b.w	30274 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   2658c:	2101      	movs	r1, #1
   2658e:	e7dd      	b.n	2654c <k_work_queue_start+0x88>
   26590:	00037cb9 	.word	0x00037cb9
   26594:	00032486 	.word	0x00032486
   26598:	00037c23 	.word	0x00037c23
   2659c:	00037cbf 	.word	0x00037cbf
   265a0:	00037cc5 	.word	0x00037cc5
   265a4:	00025fc9 	.word	0x00025fc9

000265a8 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   265a8:	b538      	push	{r3, r4, r5, lr}
   265aa:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   265ac:	4604      	mov	r4, r0
   265ae:	b958      	cbnz	r0, 265c8 <k_work_init_delayable+0x20>
   265b0:	4911      	ldr	r1, [pc, #68]	; (265f8 <k_work_init_delayable+0x50>)
   265b2:	4812      	ldr	r0, [pc, #72]	; (265fc <k_work_init_delayable+0x54>)
   265b4:	4a12      	ldr	r2, [pc, #72]	; (26600 <k_work_init_delayable+0x58>)
   265b6:	f240 332d 	movw	r3, #813	; 0x32d
   265ba:	f005 ffee 	bl	2c59a <printk>
   265be:	4810      	ldr	r0, [pc, #64]	; (26600 <k_work_init_delayable+0x58>)
   265c0:	f240 312d 	movw	r1, #813	; 0x32d
   265c4:	f006 fa2a 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   265c8:	b95d      	cbnz	r5, 265e2 <k_work_init_delayable+0x3a>
   265ca:	490e      	ldr	r1, [pc, #56]	; (26604 <k_work_init_delayable+0x5c>)
   265cc:	480b      	ldr	r0, [pc, #44]	; (265fc <k_work_init_delayable+0x54>)
   265ce:	4a0c      	ldr	r2, [pc, #48]	; (26600 <k_work_init_delayable+0x58>)
   265d0:	f240 332e 	movw	r3, #814	; 0x32e
   265d4:	f005 ffe1 	bl	2c59a <printk>
   265d8:	4809      	ldr	r0, [pc, #36]	; (26600 <k_work_init_delayable+0x58>)
   265da:	f240 312e 	movw	r1, #814	; 0x32e
   265de:	f006 fa1d 	bl	2ca1c <assert_post_action>

	*dwork = (struct k_work_delayable){
   265e2:	2230      	movs	r2, #48	; 0x30
   265e4:	2100      	movs	r1, #0
   265e6:	4620      	mov	r0, r4
   265e8:	f00a f81f 	bl	3062a <memset>
   265ec:	f44f 7380 	mov.w	r3, #256	; 0x100
   265f0:	6065      	str	r5, [r4, #4]
   265f2:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   265f4:	bd38      	pop	{r3, r4, r5, pc}
   265f6:	bf00      	nop
   265f8:	00037cf9 	.word	0x00037cf9
   265fc:	00032486 	.word	0x00032486
   26600:	00037c23 	.word	0x00037c23
   26604:	00037c44 	.word	0x00037c44

00026608 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   26608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2660a:	4616      	mov	r6, r2
   2660c:	9001      	str	r0, [sp, #4]
   2660e:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   26610:	460c      	mov	r4, r1
   26612:	b959      	cbnz	r1, 2662c <k_work_schedule_for_queue+0x24>
   26614:	492e      	ldr	r1, [pc, #184]	; (266d0 <k_work_schedule_for_queue+0xc8>)
   26616:	482f      	ldr	r0, [pc, #188]	; (266d4 <k_work_schedule_for_queue+0xcc>)
   26618:	4a2f      	ldr	r2, [pc, #188]	; (266d8 <k_work_schedule_for_queue+0xd0>)
   2661a:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   2661e:	f005 ffbc 	bl	2c59a <printk>
   26622:	482d      	ldr	r0, [pc, #180]	; (266d8 <k_work_schedule_for_queue+0xd0>)
   26624:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   26628:	f006 f9f8 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   2662c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26630:	f3ef 8511 	mrs	r5, BASEPRI
   26634:	f383 8812 	msr	BASEPRI_MAX, r3
   26638:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2663c:	4827      	ldr	r0, [pc, #156]	; (266dc <k_work_schedule_for_queue+0xd4>)
   2663e:	f7fe fc35 	bl	24eac <z_spin_lock_valid>
   26642:	b968      	cbnz	r0, 26660 <k_work_schedule_for_queue+0x58>
   26644:	4a26      	ldr	r2, [pc, #152]	; (266e0 <k_work_schedule_for_queue+0xd8>)
   26646:	4927      	ldr	r1, [pc, #156]	; (266e4 <k_work_schedule_for_queue+0xdc>)
   26648:	4822      	ldr	r0, [pc, #136]	; (266d4 <k_work_schedule_for_queue+0xcc>)
   2664a:	2381      	movs	r3, #129	; 0x81
   2664c:	f005 ffa5 	bl	2c59a <printk>
   26650:	4922      	ldr	r1, [pc, #136]	; (266dc <k_work_schedule_for_queue+0xd4>)
   26652:	4825      	ldr	r0, [pc, #148]	; (266e8 <k_work_schedule_for_queue+0xe0>)
   26654:	f005 ffa1 	bl	2c59a <printk>
   26658:	4821      	ldr	r0, [pc, #132]	; (266e0 <k_work_schedule_for_queue+0xd8>)
   2665a:	2181      	movs	r1, #129	; 0x81
   2665c:	f006 f9de 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   26660:	481e      	ldr	r0, [pc, #120]	; (266dc <k_work_schedule_for_queue+0xd4>)
   26662:	f7fe fc41 	bl	24ee8 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   26666:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   26668:	f013 0f0e 	tst.w	r3, #14
   2666c:	d12e      	bne.n	266cc <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2666e:	ea56 0207 	orrs.w	r2, r6, r7
   26672:	d11d      	bne.n	266b0 <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   26674:	4620      	mov	r0, r4
   26676:	a901      	add	r1, sp, #4
   26678:	f7ff fdd8 	bl	2622c <submit_to_queue_locked>
   2667c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2667e:	4817      	ldr	r0, [pc, #92]	; (266dc <k_work_schedule_for_queue+0xd4>)
   26680:	f7fe fc22 	bl	24ec8 <z_spin_unlock_valid>
   26684:	b968      	cbnz	r0, 266a2 <k_work_schedule_for_queue+0x9a>
   26686:	4a16      	ldr	r2, [pc, #88]	; (266e0 <k_work_schedule_for_queue+0xd8>)
   26688:	4918      	ldr	r1, [pc, #96]	; (266ec <k_work_schedule_for_queue+0xe4>)
   2668a:	4812      	ldr	r0, [pc, #72]	; (266d4 <k_work_schedule_for_queue+0xcc>)
   2668c:	23ac      	movs	r3, #172	; 0xac
   2668e:	f005 ff84 	bl	2c59a <printk>
   26692:	4912      	ldr	r1, [pc, #72]	; (266dc <k_work_schedule_for_queue+0xd4>)
   26694:	4816      	ldr	r0, [pc, #88]	; (266f0 <k_work_schedule_for_queue+0xe8>)
   26696:	f005 ff80 	bl	2c59a <printk>
   2669a:	4811      	ldr	r0, [pc, #68]	; (266e0 <k_work_schedule_for_queue+0xd8>)
   2669c:	21ac      	movs	r1, #172	; 0xac
   2669e:	f006 f9bd 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   266a2:	f385 8811 	msr	BASEPRI, r5
   266a6:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   266aa:	4620      	mov	r0, r4
   266ac:	b003      	add	sp, #12
   266ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   266b0:	f043 0308 	orr.w	r3, r3, #8
   266b4:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   266b6:	9b01      	ldr	r3, [sp, #4]
   266b8:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   266ba:	f104 0010 	add.w	r0, r4, #16
   266be:	490d      	ldr	r1, [pc, #52]	; (266f4 <k_work_schedule_for_queue+0xec>)
   266c0:	4632      	mov	r2, r6
   266c2:	463b      	mov	r3, r7
   266c4:	f001 fd22 	bl	2810c <z_add_timeout>
	return ret;
   266c8:	2401      	movs	r4, #1
   266ca:	e7d8      	b.n	2667e <k_work_schedule_for_queue+0x76>
	int ret = 0;
   266cc:	2400      	movs	r4, #0
   266ce:	e7d6      	b.n	2667e <k_work_schedule_for_queue+0x76>
   266d0:	00037cf9 	.word	0x00037cf9
   266d4:	00032486 	.word	0x00032486
   266d8:	00037c23 	.word	0x00037c23
   266dc:	20002ef4 	.word	0x20002ef4
   266e0:	00032546 	.word	0x00032546
   266e4:	00032598 	.word	0x00032598
   266e8:	000325ad 	.word	0x000325ad
   266ec:	0003256c 	.word	0x0003256c
   266f0:	00032583 	.word	0x00032583
   266f4:	000262f5 	.word	0x000262f5

000266f8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   266f8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   266fa:	4801      	ldr	r0, [pc, #4]	; (26700 <k_work_schedule+0x8>)
   266fc:	f7ff bf84 	b.w	26608 <k_work_schedule_for_queue>
   26700:	20002200 	.word	0x20002200

00026704 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   26704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   26706:	4616      	mov	r6, r2
   26708:	9001      	str	r0, [sp, #4]
   2670a:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   2670c:	460c      	mov	r4, r1
   2670e:	b959      	cbnz	r1, 26728 <k_work_reschedule_for_queue+0x24>
   26710:	492d      	ldr	r1, [pc, #180]	; (267c8 <k_work_reschedule_for_queue+0xc4>)
   26712:	482e      	ldr	r0, [pc, #184]	; (267cc <k_work_reschedule_for_queue+0xc8>)
   26714:	4a2e      	ldr	r2, [pc, #184]	; (267d0 <k_work_reschedule_for_queue+0xcc>)
   26716:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   2671a:	f005 ff3e 	bl	2c59a <printk>
   2671e:	482c      	ldr	r0, [pc, #176]	; (267d0 <k_work_reschedule_for_queue+0xcc>)
   26720:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   26724:	f006 f97a 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26728:	f04f 0340 	mov.w	r3, #64	; 0x40
   2672c:	f3ef 8511 	mrs	r5, BASEPRI
   26730:	f383 8812 	msr	BASEPRI_MAX, r3
   26734:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26738:	4826      	ldr	r0, [pc, #152]	; (267d4 <k_work_reschedule_for_queue+0xd0>)
   2673a:	f7fe fbb7 	bl	24eac <z_spin_lock_valid>
   2673e:	b968      	cbnz	r0, 2675c <k_work_reschedule_for_queue+0x58>
   26740:	4a25      	ldr	r2, [pc, #148]	; (267d8 <k_work_reschedule_for_queue+0xd4>)
   26742:	4926      	ldr	r1, [pc, #152]	; (267dc <k_work_reschedule_for_queue+0xd8>)
   26744:	4821      	ldr	r0, [pc, #132]	; (267cc <k_work_reschedule_for_queue+0xc8>)
   26746:	2381      	movs	r3, #129	; 0x81
   26748:	f005 ff27 	bl	2c59a <printk>
   2674c:	4921      	ldr	r1, [pc, #132]	; (267d4 <k_work_reschedule_for_queue+0xd0>)
   2674e:	4824      	ldr	r0, [pc, #144]	; (267e0 <k_work_reschedule_for_queue+0xdc>)
   26750:	f005 ff23 	bl	2c59a <printk>
   26754:	4820      	ldr	r0, [pc, #128]	; (267d8 <k_work_reschedule_for_queue+0xd4>)
   26756:	2181      	movs	r1, #129	; 0x81
   26758:	f006 f960 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   2675c:	481d      	ldr	r0, [pc, #116]	; (267d4 <k_work_reschedule_for_queue+0xd0>)
   2675e:	f7fe fbc3 	bl	24ee8 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   26762:	4620      	mov	r0, r4
   26764:	f009 fdfc 	bl	30360 <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   26768:	ea56 0307 	orrs.w	r3, r6, r7
   2676c:	d11d      	bne.n	267aa <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   2676e:	4620      	mov	r0, r4
   26770:	a901      	add	r1, sp, #4
   26772:	f7ff fd5b 	bl	2622c <submit_to_queue_locked>
   26776:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26778:	4816      	ldr	r0, [pc, #88]	; (267d4 <k_work_reschedule_for_queue+0xd0>)
   2677a:	f7fe fba5 	bl	24ec8 <z_spin_unlock_valid>
   2677e:	b968      	cbnz	r0, 2679c <k_work_reschedule_for_queue+0x98>
   26780:	4a15      	ldr	r2, [pc, #84]	; (267d8 <k_work_reschedule_for_queue+0xd4>)
   26782:	4918      	ldr	r1, [pc, #96]	; (267e4 <k_work_reschedule_for_queue+0xe0>)
   26784:	4811      	ldr	r0, [pc, #68]	; (267cc <k_work_reschedule_for_queue+0xc8>)
   26786:	23ac      	movs	r3, #172	; 0xac
   26788:	f005 ff07 	bl	2c59a <printk>
   2678c:	4911      	ldr	r1, [pc, #68]	; (267d4 <k_work_reschedule_for_queue+0xd0>)
   2678e:	4816      	ldr	r0, [pc, #88]	; (267e8 <k_work_reschedule_for_queue+0xe4>)
   26790:	f005 ff03 	bl	2c59a <printk>
   26794:	4810      	ldr	r0, [pc, #64]	; (267d8 <k_work_reschedule_for_queue+0xd4>)
   26796:	21ac      	movs	r1, #172	; 0xac
   26798:	f006 f940 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   2679c:	f385 8811 	msr	BASEPRI, r5
   267a0:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   267a4:	4620      	mov	r0, r4
   267a6:	b003      	add	sp, #12
   267a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   267aa:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   267ac:	490f      	ldr	r1, [pc, #60]	; (267ec <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   267ae:	f043 0308 	orr.w	r3, r3, #8
   267b2:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   267b4:	9b01      	ldr	r3, [sp, #4]
   267b6:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   267b8:	f104 0010 	add.w	r0, r4, #16
   267bc:	4632      	mov	r2, r6
   267be:	463b      	mov	r3, r7
   267c0:	f001 fca4 	bl	2810c <z_add_timeout>
	return ret;
   267c4:	2401      	movs	r4, #1
   267c6:	e7d7      	b.n	26778 <k_work_reschedule_for_queue+0x74>
   267c8:	00037cf9 	.word	0x00037cf9
   267cc:	00032486 	.word	0x00032486
   267d0:	00037c23 	.word	0x00037c23
   267d4:	20002ef4 	.word	0x20002ef4
   267d8:	00032546 	.word	0x00032546
   267dc:	00032598 	.word	0x00032598
   267e0:	000325ad 	.word	0x000325ad
   267e4:	0003256c 	.word	0x0003256c
   267e8:	00032583 	.word	0x00032583
   267ec:	000262f5 	.word	0x000262f5

000267f0 <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   267f0:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   267f2:	4801      	ldr	r0, [pc, #4]	; (267f8 <k_work_reschedule+0x8>)
   267f4:	f7ff bf86 	b.w	26704 <k_work_reschedule_for_queue>
   267f8:	20002200 	.word	0x20002200

000267fc <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   267fc:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   267fe:	4604      	mov	r4, r0
   26800:	b958      	cbnz	r0, 2681a <k_work_cancel_delayable+0x1e>
   26802:	4924      	ldr	r1, [pc, #144]	; (26894 <k_work_cancel_delayable+0x98>)
   26804:	4824      	ldr	r0, [pc, #144]	; (26898 <k_work_cancel_delayable+0x9c>)
   26806:	4a25      	ldr	r2, [pc, #148]	; (2689c <k_work_cancel_delayable+0xa0>)
   26808:	f240 33ea 	movw	r3, #1002	; 0x3ea
   2680c:	f005 fec5 	bl	2c59a <printk>
   26810:	4822      	ldr	r0, [pc, #136]	; (2689c <k_work_cancel_delayable+0xa0>)
   26812:	f240 31ea 	movw	r1, #1002	; 0x3ea
   26816:	f006 f901 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   2681a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2681e:	f3ef 8511 	mrs	r5, BASEPRI
   26822:	f383 8812 	msr	BASEPRI_MAX, r3
   26826:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2682a:	481d      	ldr	r0, [pc, #116]	; (268a0 <k_work_cancel_delayable+0xa4>)
   2682c:	f7fe fb3e 	bl	24eac <z_spin_lock_valid>
   26830:	b968      	cbnz	r0, 2684e <k_work_cancel_delayable+0x52>
   26832:	4a1c      	ldr	r2, [pc, #112]	; (268a4 <k_work_cancel_delayable+0xa8>)
   26834:	491c      	ldr	r1, [pc, #112]	; (268a8 <k_work_cancel_delayable+0xac>)
   26836:	4818      	ldr	r0, [pc, #96]	; (26898 <k_work_cancel_delayable+0x9c>)
   26838:	2381      	movs	r3, #129	; 0x81
   2683a:	f005 feae 	bl	2c59a <printk>
   2683e:	4918      	ldr	r1, [pc, #96]	; (268a0 <k_work_cancel_delayable+0xa4>)
   26840:	481a      	ldr	r0, [pc, #104]	; (268ac <k_work_cancel_delayable+0xb0>)
   26842:	f005 feaa 	bl	2c59a <printk>
   26846:	4817      	ldr	r0, [pc, #92]	; (268a4 <k_work_cancel_delayable+0xa8>)
   26848:	2181      	movs	r1, #129	; 0x81
   2684a:	f006 f8e7 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   2684e:	4814      	ldr	r0, [pc, #80]	; (268a0 <k_work_cancel_delayable+0xa4>)
   26850:	f7fe fb4a 	bl	24ee8 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   26854:	4620      	mov	r0, r4
   26856:	f009 fd83 	bl	30360 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2685a:	4620      	mov	r0, r4
   2685c:	f009 fd8e 	bl	3037c <cancel_async_locked>
   26860:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26862:	480f      	ldr	r0, [pc, #60]	; (268a0 <k_work_cancel_delayable+0xa4>)
   26864:	f7fe fb30 	bl	24ec8 <z_spin_unlock_valid>
   26868:	b968      	cbnz	r0, 26886 <k_work_cancel_delayable+0x8a>
   2686a:	4a0e      	ldr	r2, [pc, #56]	; (268a4 <k_work_cancel_delayable+0xa8>)
   2686c:	4910      	ldr	r1, [pc, #64]	; (268b0 <k_work_cancel_delayable+0xb4>)
   2686e:	480a      	ldr	r0, [pc, #40]	; (26898 <k_work_cancel_delayable+0x9c>)
   26870:	23ac      	movs	r3, #172	; 0xac
   26872:	f005 fe92 	bl	2c59a <printk>
   26876:	490a      	ldr	r1, [pc, #40]	; (268a0 <k_work_cancel_delayable+0xa4>)
   26878:	480e      	ldr	r0, [pc, #56]	; (268b4 <k_work_cancel_delayable+0xb8>)
   2687a:	f005 fe8e 	bl	2c59a <printk>
   2687e:	4809      	ldr	r0, [pc, #36]	; (268a4 <k_work_cancel_delayable+0xa8>)
   26880:	21ac      	movs	r1, #172	; 0xac
   26882:	f006 f8cb 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26886:	f385 8811 	msr	BASEPRI, r5
   2688a:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2688e:	4620      	mov	r0, r4
   26890:	bd38      	pop	{r3, r4, r5, pc}
   26892:	bf00      	nop
   26894:	00037cf9 	.word	0x00037cf9
   26898:	00032486 	.word	0x00032486
   2689c:	00037c23 	.word	0x00037c23
   268a0:	20002ef4 	.word	0x20002ef4
   268a4:	00032546 	.word	0x00032546
   268a8:	00032598 	.word	0x00032598
   268ac:	000325ad 	.word	0x000325ad
   268b0:	0003256c 	.word	0x0003256c
   268b4:	00032583 	.word	0x00032583

000268b8 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   268b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268bc:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   268be:	4605      	mov	r5, r0
   268c0:	b958      	cbnz	r0, 268da <k_work_cancel_delayable_sync+0x22>
   268c2:	493d      	ldr	r1, [pc, #244]	; (269b8 <k_work_cancel_delayable_sync+0x100>)
   268c4:	483d      	ldr	r0, [pc, #244]	; (269bc <k_work_cancel_delayable_sync+0x104>)
   268c6:	4a3e      	ldr	r2, [pc, #248]	; (269c0 <k_work_cancel_delayable_sync+0x108>)
   268c8:	f240 33fb 	movw	r3, #1019	; 0x3fb
   268cc:	f005 fe65 	bl	2c59a <printk>
   268d0:	483b      	ldr	r0, [pc, #236]	; (269c0 <k_work_cancel_delayable_sync+0x108>)
   268d2:	f240 31fb 	movw	r1, #1019	; 0x3fb
   268d6:	f006 f8a1 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   268da:	b95e      	cbnz	r6, 268f4 <k_work_cancel_delayable_sync+0x3c>
   268dc:	4939      	ldr	r1, [pc, #228]	; (269c4 <k_work_cancel_delayable_sync+0x10c>)
   268de:	4837      	ldr	r0, [pc, #220]	; (269bc <k_work_cancel_delayable_sync+0x104>)
   268e0:	4a37      	ldr	r2, [pc, #220]	; (269c0 <k_work_cancel_delayable_sync+0x108>)
   268e2:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
   268e6:	f005 fe58 	bl	2c59a <printk>
   268ea:	4835      	ldr	r0, [pc, #212]	; (269c0 <k_work_cancel_delayable_sync+0x108>)
   268ec:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   268f0:	f006 f894 	bl	2ca1c <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   268f4:	f009 fcb6 	bl	30264 <k_is_in_isr>
   268f8:	b158      	cbz	r0, 26912 <k_work_cancel_delayable_sync+0x5a>
   268fa:	4933      	ldr	r1, [pc, #204]	; (269c8 <k_work_cancel_delayable_sync+0x110>)
   268fc:	482f      	ldr	r0, [pc, #188]	; (269bc <k_work_cancel_delayable_sync+0x104>)
   268fe:	4a30      	ldr	r2, [pc, #192]	; (269c0 <k_work_cancel_delayable_sync+0x108>)
   26900:	f240 33fd 	movw	r3, #1021	; 0x3fd
   26904:	f005 fe49 	bl	2c59a <printk>
   26908:	482d      	ldr	r0, [pc, #180]	; (269c0 <k_work_cancel_delayable_sync+0x108>)
   2690a:	f240 31fd 	movw	r1, #1021	; 0x3fd
   2690e:	f006 f885 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26912:	f04f 0340 	mov.w	r3, #64	; 0x40
   26916:	f3ef 8811 	mrs	r8, BASEPRI
   2691a:	f383 8812 	msr	BASEPRI_MAX, r3
   2691e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26922:	482a      	ldr	r0, [pc, #168]	; (269cc <k_work_cancel_delayable_sync+0x114>)
   26924:	f7fe fac2 	bl	24eac <z_spin_lock_valid>
   26928:	b968      	cbnz	r0, 26946 <k_work_cancel_delayable_sync+0x8e>
   2692a:	4a29      	ldr	r2, [pc, #164]	; (269d0 <k_work_cancel_delayable_sync+0x118>)
   2692c:	4929      	ldr	r1, [pc, #164]	; (269d4 <k_work_cancel_delayable_sync+0x11c>)
   2692e:	4823      	ldr	r0, [pc, #140]	; (269bc <k_work_cancel_delayable_sync+0x104>)
   26930:	2381      	movs	r3, #129	; 0x81
   26932:	f005 fe32 	bl	2c59a <printk>
   26936:	4925      	ldr	r1, [pc, #148]	; (269cc <k_work_cancel_delayable_sync+0x114>)
   26938:	4827      	ldr	r0, [pc, #156]	; (269d8 <k_work_cancel_delayable_sync+0x120>)
   2693a:	f005 fe2e 	bl	2c59a <printk>
   2693e:	4824      	ldr	r0, [pc, #144]	; (269d0 <k_work_cancel_delayable_sync+0x118>)
   26940:	2181      	movs	r1, #129	; 0x81
   26942:	f006 f86b 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   26946:	4821      	ldr	r0, [pc, #132]	; (269cc <k_work_cancel_delayable_sync+0x114>)
   26948:	f7fe face 	bl	24ee8 <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   2694c:	68ec      	ldr	r4, [r5, #12]
   2694e:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   26952:	2c00      	cmp	r4, #0
   26954:	bf14      	ite	ne
   26956:	2701      	movne	r7, #1
   26958:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   2695a:	d00a      	beq.n	26972 <k_work_cancel_delayable_sync+0xba>
	(void)unschedule_locked(dwork);
   2695c:	4628      	mov	r0, r5
   2695e:	f009 fcff 	bl	30360 <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   26962:	4628      	mov	r0, r5
   26964:	f009 fd0a 	bl	3037c <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   26968:	4631      	mov	r1, r6
   2696a:	4628      	mov	r0, r5
   2696c:	f7ff fc40 	bl	261f0 <cancel_sync_locked>
   26970:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26972:	4816      	ldr	r0, [pc, #88]	; (269cc <k_work_cancel_delayable_sync+0x114>)
   26974:	f7fe faa8 	bl	24ec8 <z_spin_unlock_valid>
   26978:	b968      	cbnz	r0, 26996 <k_work_cancel_delayable_sync+0xde>
   2697a:	4a15      	ldr	r2, [pc, #84]	; (269d0 <k_work_cancel_delayable_sync+0x118>)
   2697c:	4917      	ldr	r1, [pc, #92]	; (269dc <k_work_cancel_delayable_sync+0x124>)
   2697e:	480f      	ldr	r0, [pc, #60]	; (269bc <k_work_cancel_delayable_sync+0x104>)
   26980:	23ac      	movs	r3, #172	; 0xac
   26982:	f005 fe0a 	bl	2c59a <printk>
   26986:	4911      	ldr	r1, [pc, #68]	; (269cc <k_work_cancel_delayable_sync+0x114>)
   26988:	4815      	ldr	r0, [pc, #84]	; (269e0 <k_work_cancel_delayable_sync+0x128>)
   2698a:	f005 fe06 	bl	2c59a <printk>
   2698e:	4810      	ldr	r0, [pc, #64]	; (269d0 <k_work_cancel_delayable_sync+0x118>)
   26990:	21ac      	movs	r1, #172	; 0xac
   26992:	f006 f843 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26996:	f388 8811 	msr	BASEPRI, r8
   2699a:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2699e:	b13c      	cbz	r4, 269b0 <k_work_cancel_delayable_sync+0xf8>
	return z_impl_k_sem_take(sem, timeout);
   269a0:	f04f 32ff 	mov.w	r2, #4294967295
   269a4:	f04f 33ff 	mov.w	r3, #4294967295
   269a8:	f106 0008 	add.w	r0, r6, #8
   269ac:	f7ff fa68 	bl	25e80 <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   269b0:	4638      	mov	r0, r7
   269b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   269b6:	bf00      	nop
   269b8:	00037cf9 	.word	0x00037cf9
   269bc:	00032486 	.word	0x00032486
   269c0:	00037c23 	.word	0x00037c23
   269c4:	00037ca5 	.word	0x00037ca5
   269c8:	00033949 	.word	0x00033949
   269cc:	20002ef4 	.word	0x20002ef4
   269d0:	00032546 	.word	0x00032546
   269d4:	00032598 	.word	0x00032598
   269d8:	000325ad 	.word	0x000325ad
   269dc:	0003256c 	.word	0x0003256c
   269e0:	00032583 	.word	0x00032583

000269e4 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   269e4:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   269e6:	4c08      	ldr	r4, [pc, #32]	; (26a08 <z_reset_time_slice+0x24>)
   269e8:	6823      	ldr	r3, [r4, #0]
   269ea:	b15b      	cbz	r3, 26a04 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   269ec:	f7fc f9d0 	bl	22d90 <sys_clock_elapsed>
   269f0:	4603      	mov	r3, r0
   269f2:	6820      	ldr	r0, [r4, #0]
   269f4:	4a05      	ldr	r2, [pc, #20]	; (26a0c <z_reset_time_slice+0x28>)
   269f6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   269f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   269fc:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   269fe:	2100      	movs	r1, #0
   26a00:	f001 bcee 	b.w	283e0 <z_set_timeout_expiry>
}
   26a04:	bd10      	pop	{r4, pc}
   26a06:	bf00      	nop
   26a08:	20002f0c 	.word	0x20002f0c
   26a0c:	20002040 	.word	0x20002040

00026a10 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   26a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26a12:	4604      	mov	r4, r0
   26a14:	460d      	mov	r5, r1
	__asm__ volatile(
   26a16:	f04f 0340 	mov.w	r3, #64	; 0x40
   26a1a:	f3ef 8611 	mrs	r6, BASEPRI
   26a1e:	f383 8812 	msr	BASEPRI_MAX, r3
   26a22:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26a26:	4823      	ldr	r0, [pc, #140]	; (26ab4 <k_sched_time_slice_set+0xa4>)
   26a28:	f7fe fa40 	bl	24eac <z_spin_lock_valid>
   26a2c:	b968      	cbnz	r0, 26a4a <k_sched_time_slice_set+0x3a>
   26a2e:	4a22      	ldr	r2, [pc, #136]	; (26ab8 <k_sched_time_slice_set+0xa8>)
   26a30:	4922      	ldr	r1, [pc, #136]	; (26abc <k_sched_time_slice_set+0xac>)
   26a32:	4823      	ldr	r0, [pc, #140]	; (26ac0 <k_sched_time_slice_set+0xb0>)
   26a34:	2381      	movs	r3, #129	; 0x81
   26a36:	f005 fdb0 	bl	2c59a <printk>
   26a3a:	491e      	ldr	r1, [pc, #120]	; (26ab4 <k_sched_time_slice_set+0xa4>)
   26a3c:	4821      	ldr	r0, [pc, #132]	; (26ac4 <k_sched_time_slice_set+0xb4>)
   26a3e:	f005 fdac 	bl	2c59a <printk>
   26a42:	481d      	ldr	r0, [pc, #116]	; (26ab8 <k_sched_time_slice_set+0xa8>)
   26a44:	2181      	movs	r1, #129	; 0x81
   26a46:	f005 ffe9 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   26a4a:	481a      	ldr	r0, [pc, #104]	; (26ab4 <k_sched_time_slice_set+0xa4>)
   26a4c:	f7fe fa4c 	bl	24ee8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   26a50:	4b1d      	ldr	r3, [pc, #116]	; (26ac8 <k_sched_time_slice_set+0xb8>)
   26a52:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   26a54:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   26a58:	f240 30e7 	movw	r0, #999	; 0x3e7
   26a5c:	2100      	movs	r1, #0
   26a5e:	611a      	str	r2, [r3, #16]
   26a60:	fbe7 0104 	umlal	r0, r1, r7, r4
   26a64:	2300      	movs	r3, #0
   26a66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   26a6a:	f7da fbe9 	bl	1240 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   26a6e:	2c00      	cmp	r4, #0
   26a70:	4b16      	ldr	r3, [pc, #88]	; (26acc <k_sched_time_slice_set+0xbc>)
   26a72:	dc1b      	bgt.n	26aac <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   26a74:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   26a76:	4b16      	ldr	r3, [pc, #88]	; (26ad0 <k_sched_time_slice_set+0xc0>)
   26a78:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   26a7a:	f7ff ffb3 	bl	269e4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26a7e:	480d      	ldr	r0, [pc, #52]	; (26ab4 <k_sched_time_slice_set+0xa4>)
   26a80:	f7fe fa22 	bl	24ec8 <z_spin_unlock_valid>
   26a84:	b968      	cbnz	r0, 26aa2 <k_sched_time_slice_set+0x92>
   26a86:	4a0c      	ldr	r2, [pc, #48]	; (26ab8 <k_sched_time_slice_set+0xa8>)
   26a88:	4912      	ldr	r1, [pc, #72]	; (26ad4 <k_sched_time_slice_set+0xc4>)
   26a8a:	480d      	ldr	r0, [pc, #52]	; (26ac0 <k_sched_time_slice_set+0xb0>)
   26a8c:	23ac      	movs	r3, #172	; 0xac
   26a8e:	f005 fd84 	bl	2c59a <printk>
   26a92:	4908      	ldr	r1, [pc, #32]	; (26ab4 <k_sched_time_slice_set+0xa4>)
   26a94:	4810      	ldr	r0, [pc, #64]	; (26ad8 <k_sched_time_slice_set+0xc8>)
   26a96:	f005 fd80 	bl	2c59a <printk>
   26a9a:	4807      	ldr	r0, [pc, #28]	; (26ab8 <k_sched_time_slice_set+0xa8>)
   26a9c:	21ac      	movs	r1, #172	; 0xac
   26a9e:	f005 ffbd 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26aa2:	f386 8811 	msr	BASEPRI, r6
   26aa6:	f3bf 8f6f 	isb	sy
	}
}
   26aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   26aac:	2802      	cmp	r0, #2
   26aae:	bfb8      	it	lt
   26ab0:	2002      	movlt	r0, #2
   26ab2:	e7df      	b.n	26a74 <k_sched_time_slice_set+0x64>
   26ab4:	20002f04 	.word	0x20002f04
   26ab8:	00032546 	.word	0x00032546
   26abc:	00032598 	.word	0x00032598
   26ac0:	00032486 	.word	0x00032486
   26ac4:	000325ad 	.word	0x000325ad
   26ac8:	20002040 	.word	0x20002040
   26acc:	20002f0c 	.word	0x20002f0c
   26ad0:	20002f08 	.word	0x20002f08
   26ad4:	0003256c 	.word	0x0003256c
   26ad8:	00032583 	.word	0x00032583

00026adc <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   26adc:	b538      	push	{r3, r4, r5, lr}
   26ade:	4604      	mov	r4, r0
	__asm__ volatile(
   26ae0:	f04f 0340 	mov.w	r3, #64	; 0x40
   26ae4:	f3ef 8511 	mrs	r5, BASEPRI
   26ae8:	f383 8812 	msr	BASEPRI_MAX, r3
   26aec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26af0:	4817      	ldr	r0, [pc, #92]	; (26b50 <z_unpend_thread_no_timeout+0x74>)
   26af2:	f7fe f9db 	bl	24eac <z_spin_lock_valid>
   26af6:	b968      	cbnz	r0, 26b14 <z_unpend_thread_no_timeout+0x38>
   26af8:	4a16      	ldr	r2, [pc, #88]	; (26b54 <z_unpend_thread_no_timeout+0x78>)
   26afa:	4917      	ldr	r1, [pc, #92]	; (26b58 <z_unpend_thread_no_timeout+0x7c>)
   26afc:	4817      	ldr	r0, [pc, #92]	; (26b5c <z_unpend_thread_no_timeout+0x80>)
   26afe:	2381      	movs	r3, #129	; 0x81
   26b00:	f005 fd4b 	bl	2c59a <printk>
   26b04:	4912      	ldr	r1, [pc, #72]	; (26b50 <z_unpend_thread_no_timeout+0x74>)
   26b06:	4816      	ldr	r0, [pc, #88]	; (26b60 <z_unpend_thread_no_timeout+0x84>)
   26b08:	f005 fd47 	bl	2c59a <printk>
   26b0c:	4811      	ldr	r0, [pc, #68]	; (26b54 <z_unpend_thread_no_timeout+0x78>)
   26b0e:	2181      	movs	r1, #129	; 0x81
   26b10:	f005 ff84 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   26b14:	480e      	ldr	r0, [pc, #56]	; (26b50 <z_unpend_thread_no_timeout+0x74>)
   26b16:	f7fe f9e7 	bl	24ee8 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   26b1a:	4620      	mov	r0, r4
   26b1c:	f000 f900 	bl	26d20 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b20:	480b      	ldr	r0, [pc, #44]	; (26b50 <z_unpend_thread_no_timeout+0x74>)
   26b22:	f7fe f9d1 	bl	24ec8 <z_spin_unlock_valid>
   26b26:	b968      	cbnz	r0, 26b44 <z_unpend_thread_no_timeout+0x68>
   26b28:	4a0a      	ldr	r2, [pc, #40]	; (26b54 <z_unpend_thread_no_timeout+0x78>)
   26b2a:	490e      	ldr	r1, [pc, #56]	; (26b64 <z_unpend_thread_no_timeout+0x88>)
   26b2c:	480b      	ldr	r0, [pc, #44]	; (26b5c <z_unpend_thread_no_timeout+0x80>)
   26b2e:	23ac      	movs	r3, #172	; 0xac
   26b30:	f005 fd33 	bl	2c59a <printk>
   26b34:	4906      	ldr	r1, [pc, #24]	; (26b50 <z_unpend_thread_no_timeout+0x74>)
   26b36:	480c      	ldr	r0, [pc, #48]	; (26b68 <z_unpend_thread_no_timeout+0x8c>)
   26b38:	f005 fd2f 	bl	2c59a <printk>
   26b3c:	4805      	ldr	r0, [pc, #20]	; (26b54 <z_unpend_thread_no_timeout+0x78>)
   26b3e:	21ac      	movs	r1, #172	; 0xac
   26b40:	f005 ff6c 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26b44:	f385 8811 	msr	BASEPRI, r5
   26b48:	f3bf 8f6f 	isb	sy
	}
}
   26b4c:	bd38      	pop	{r3, r4, r5, pc}
   26b4e:	bf00      	nop
   26b50:	20002f04 	.word	0x20002f04
   26b54:	00032546 	.word	0x00032546
   26b58:	00032598 	.word	0x00032598
   26b5c:	00032486 	.word	0x00032486
   26b60:	000325ad 	.word	0x000325ad
   26b64:	0003256c 	.word	0x0003256c
   26b68:	00032583 	.word	0x00032583

00026b6c <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   26b6c:	b538      	push	{r3, r4, r5, lr}
   26b6e:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26b70:	460d      	mov	r5, r1
   26b72:	b9e9      	cbnz	r1, 26bb0 <z_reschedule+0x44>
   26b74:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   26b78:	b9d3      	cbnz	r3, 26bb0 <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   26b7a:	4b19      	ldr	r3, [pc, #100]	; (26be0 <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   26b7c:	6a1a      	ldr	r2, [r3, #32]
   26b7e:	689b      	ldr	r3, [r3, #8]
   26b80:	429a      	cmp	r2, r3
   26b82:	d015      	beq.n	26bb0 <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b84:	f7fe f9a0 	bl	24ec8 <z_spin_unlock_valid>
   26b88:	b968      	cbnz	r0, 26ba6 <z_reschedule+0x3a>
   26b8a:	4a16      	ldr	r2, [pc, #88]	; (26be4 <z_reschedule+0x78>)
   26b8c:	4916      	ldr	r1, [pc, #88]	; (26be8 <z_reschedule+0x7c>)
   26b8e:	4817      	ldr	r0, [pc, #92]	; (26bec <z_reschedule+0x80>)
   26b90:	23c3      	movs	r3, #195	; 0xc3
   26b92:	f005 fd02 	bl	2c59a <printk>
   26b96:	4816      	ldr	r0, [pc, #88]	; (26bf0 <z_reschedule+0x84>)
   26b98:	4621      	mov	r1, r4
   26b9a:	f005 fcfe 	bl	2c59a <printk>
   26b9e:	4811      	ldr	r0, [pc, #68]	; (26be4 <z_reschedule+0x78>)
   26ba0:	21c3      	movs	r1, #195	; 0xc3
   26ba2:	f005 ff3b 	bl	2ca1c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   26ba6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   26baa:	2000      	movs	r0, #0
   26bac:	f7f0 ba84 	b.w	170b8 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26bb0:	4620      	mov	r0, r4
   26bb2:	f7fe f989 	bl	24ec8 <z_spin_unlock_valid>
   26bb6:	b968      	cbnz	r0, 26bd4 <z_reschedule+0x68>
   26bb8:	4a0a      	ldr	r2, [pc, #40]	; (26be4 <z_reschedule+0x78>)
   26bba:	490b      	ldr	r1, [pc, #44]	; (26be8 <z_reschedule+0x7c>)
   26bbc:	480b      	ldr	r0, [pc, #44]	; (26bec <z_reschedule+0x80>)
   26bbe:	23ac      	movs	r3, #172	; 0xac
   26bc0:	f005 fceb 	bl	2c59a <printk>
   26bc4:	480a      	ldr	r0, [pc, #40]	; (26bf0 <z_reschedule+0x84>)
   26bc6:	4621      	mov	r1, r4
   26bc8:	f005 fce7 	bl	2c59a <printk>
   26bcc:	4805      	ldr	r0, [pc, #20]	; (26be4 <z_reschedule+0x78>)
   26bce:	21ac      	movs	r1, #172	; 0xac
   26bd0:	f005 ff24 	bl	2ca1c <assert_post_action>
   26bd4:	f385 8811 	msr	BASEPRI, r5
   26bd8:	f3bf 8f6f 	isb	sy
   26bdc:	bd38      	pop	{r3, r4, r5, pc}
   26bde:	bf00      	nop
   26be0:	20002040 	.word	0x20002040
   26be4:	00032546 	.word	0x00032546
   26be8:	0003256c 	.word	0x0003256c
   26bec:	00032486 	.word	0x00032486
   26bf0:	00032583 	.word	0x00032583

00026bf4 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   26bf4:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26bf6:	f04f 0340 	mov.w	r3, #64	; 0x40
   26bfa:	f3ef 8511 	mrs	r5, BASEPRI
   26bfe:	f383 8812 	msr	BASEPRI_MAX, r3
   26c02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26c06:	4829      	ldr	r0, [pc, #164]	; (26cac <k_sched_lock+0xb8>)
   26c08:	f7fe f950 	bl	24eac <z_spin_lock_valid>
   26c0c:	b968      	cbnz	r0, 26c2a <k_sched_lock+0x36>
   26c0e:	4a28      	ldr	r2, [pc, #160]	; (26cb0 <k_sched_lock+0xbc>)
   26c10:	4928      	ldr	r1, [pc, #160]	; (26cb4 <k_sched_lock+0xc0>)
   26c12:	4829      	ldr	r0, [pc, #164]	; (26cb8 <k_sched_lock+0xc4>)
   26c14:	2381      	movs	r3, #129	; 0x81
   26c16:	f005 fcc0 	bl	2c59a <printk>
   26c1a:	4924      	ldr	r1, [pc, #144]	; (26cac <k_sched_lock+0xb8>)
   26c1c:	4827      	ldr	r0, [pc, #156]	; (26cbc <k_sched_lock+0xc8>)
   26c1e:	f005 fcbc 	bl	2c59a <printk>
   26c22:	4823      	ldr	r0, [pc, #140]	; (26cb0 <k_sched_lock+0xbc>)
   26c24:	2181      	movs	r1, #129	; 0x81
   26c26:	f005 fef9 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   26c2a:	4820      	ldr	r0, [pc, #128]	; (26cac <k_sched_lock+0xb8>)
   26c2c:	f7fe f95c 	bl	24ee8 <z_spin_lock_set_owner>
   26c30:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   26c34:	b163      	cbz	r3, 26c50 <k_sched_lock+0x5c>
   26c36:	4922      	ldr	r1, [pc, #136]	; (26cc0 <k_sched_lock+0xcc>)
   26c38:	4a22      	ldr	r2, [pc, #136]	; (26cc4 <k_sched_lock+0xd0>)
   26c3a:	481f      	ldr	r0, [pc, #124]	; (26cb8 <k_sched_lock+0xc4>)
   26c3c:	23fd      	movs	r3, #253	; 0xfd
   26c3e:	f005 fcac 	bl	2c59a <printk>
   26c42:	4821      	ldr	r0, [pc, #132]	; (26cc8 <k_sched_lock+0xd4>)
   26c44:	f005 fca9 	bl	2c59a <printk>
   26c48:	481e      	ldr	r0, [pc, #120]	; (26cc4 <k_sched_lock+0xd0>)
   26c4a:	21fd      	movs	r1, #253	; 0xfd
   26c4c:	f005 fee6 	bl	2ca1c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   26c50:	4c1e      	ldr	r4, [pc, #120]	; (26ccc <k_sched_lock+0xd8>)
   26c52:	68a2      	ldr	r2, [r4, #8]
   26c54:	7bd2      	ldrb	r2, [r2, #15]
   26c56:	2a01      	cmp	r2, #1
   26c58:	d10c      	bne.n	26c74 <k_sched_lock+0x80>
   26c5a:	491d      	ldr	r1, [pc, #116]	; (26cd0 <k_sched_lock+0xdc>)
   26c5c:	4a19      	ldr	r2, [pc, #100]	; (26cc4 <k_sched_lock+0xd0>)
   26c5e:	4816      	ldr	r0, [pc, #88]	; (26cb8 <k_sched_lock+0xc4>)
   26c60:	23fe      	movs	r3, #254	; 0xfe
   26c62:	f005 fc9a 	bl	2c59a <printk>
   26c66:	4818      	ldr	r0, [pc, #96]	; (26cc8 <k_sched_lock+0xd4>)
   26c68:	f005 fc97 	bl	2c59a <printk>
   26c6c:	4815      	ldr	r0, [pc, #84]	; (26cc4 <k_sched_lock+0xd0>)
   26c6e:	21fe      	movs	r1, #254	; 0xfe
   26c70:	f005 fed4 	bl	2ca1c <assert_post_action>
	--_current->base.sched_locked;
   26c74:	68a2      	ldr	r2, [r4, #8]
   26c76:	7bd3      	ldrb	r3, [r2, #15]
   26c78:	3b01      	subs	r3, #1
   26c7a:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26c7c:	480b      	ldr	r0, [pc, #44]	; (26cac <k_sched_lock+0xb8>)
   26c7e:	f7fe f923 	bl	24ec8 <z_spin_unlock_valid>
   26c82:	b968      	cbnz	r0, 26ca0 <k_sched_lock+0xac>
   26c84:	4a0a      	ldr	r2, [pc, #40]	; (26cb0 <k_sched_lock+0xbc>)
   26c86:	4913      	ldr	r1, [pc, #76]	; (26cd4 <k_sched_lock+0xe0>)
   26c88:	480b      	ldr	r0, [pc, #44]	; (26cb8 <k_sched_lock+0xc4>)
   26c8a:	23ac      	movs	r3, #172	; 0xac
   26c8c:	f005 fc85 	bl	2c59a <printk>
   26c90:	4906      	ldr	r1, [pc, #24]	; (26cac <k_sched_lock+0xb8>)
   26c92:	4811      	ldr	r0, [pc, #68]	; (26cd8 <k_sched_lock+0xe4>)
   26c94:	f005 fc81 	bl	2c59a <printk>
   26c98:	4805      	ldr	r0, [pc, #20]	; (26cb0 <k_sched_lock+0xbc>)
   26c9a:	21ac      	movs	r1, #172	; 0xac
   26c9c:	f005 febe 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26ca0:	f385 8811 	msr	BASEPRI, r5
   26ca4:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   26ca8:	bd38      	pop	{r3, r4, r5, pc}
   26caa:	bf00      	nop
   26cac:	20002f04 	.word	0x20002f04
   26cb0:	00032546 	.word	0x00032546
   26cb4:	00032598 	.word	0x00032598
   26cb8:	00032486 	.word	0x00032486
   26cbc:	000325ad 	.word	0x000325ad
   26cc0:	00037a24 	.word	0x00037a24
   26cc4:	00037b51 	.word	0x00037b51
   26cc8:	00036e1f 	.word	0x00036e1f
   26ccc:	20002040 	.word	0x20002040
   26cd0:	00037b7c 	.word	0x00037b7c
   26cd4:	0003256c 	.word	0x0003256c
   26cd8:	00032583 	.word	0x00032583

00026cdc <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26cdc:	4b0c      	ldr	r3, [pc, #48]	; (26d10 <z_priq_dumb_remove+0x34>)
   26cde:	4299      	cmp	r1, r3
{
   26ce0:	b510      	push	{r4, lr}
   26ce2:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26ce4:	d10b      	bne.n	26cfe <z_priq_dumb_remove+0x22>
   26ce6:	490b      	ldr	r1, [pc, #44]	; (26d14 <z_priq_dumb_remove+0x38>)
   26ce8:	480b      	ldr	r0, [pc, #44]	; (26d18 <z_priq_dumb_remove+0x3c>)
   26cea:	4a0c      	ldr	r2, [pc, #48]	; (26d1c <z_priq_dumb_remove+0x40>)
   26cec:	f240 33e7 	movw	r3, #999	; 0x3e7
   26cf0:	f005 fc53 	bl	2c59a <printk>
   26cf4:	4809      	ldr	r0, [pc, #36]	; (26d1c <z_priq_dumb_remove+0x40>)
   26cf6:	f240 31e7 	movw	r1, #999	; 0x3e7
   26cfa:	f005 fe8f 	bl	2ca1c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   26cfe:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   26d02:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26d04:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26d06:	2300      	movs	r3, #0
	node->prev = NULL;
   26d08:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   26d0c:	bd10      	pop	{r4, pc}
   26d0e:	bf00      	nop
   26d10:	20002080 	.word	0x20002080
   26d14:	00037d30 	.word	0x00037d30
   26d18:	00032486 	.word	0x00032486
   26d1c:	00037d0e 	.word	0x00037d0e

00026d20 <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   26d20:	6883      	ldr	r3, [r0, #8]
{
   26d22:	b510      	push	{r4, lr}
   26d24:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   26d26:	b95b      	cbnz	r3, 26d40 <unpend_thread_no_timeout+0x20>
   26d28:	490b      	ldr	r1, [pc, #44]	; (26d58 <unpend_thread_no_timeout+0x38>)
   26d2a:	480c      	ldr	r0, [pc, #48]	; (26d5c <unpend_thread_no_timeout+0x3c>)
   26d2c:	4a0c      	ldr	r2, [pc, #48]	; (26d60 <unpend_thread_no_timeout+0x40>)
   26d2e:	f240 2383 	movw	r3, #643	; 0x283
   26d32:	f005 fc32 	bl	2c59a <printk>
   26d36:	480a      	ldr	r0, [pc, #40]	; (26d60 <unpend_thread_no_timeout+0x40>)
   26d38:	f240 2183 	movw	r1, #643	; 0x283
   26d3c:	f005 fe6e 	bl	2ca1c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   26d40:	68a0      	ldr	r0, [r4, #8]
   26d42:	4621      	mov	r1, r4
   26d44:	f7ff ffca 	bl	26cdc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26d48:	7b63      	ldrb	r3, [r4, #13]
   26d4a:	f023 0302 	bic.w	r3, r3, #2
   26d4e:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   26d50:	2300      	movs	r3, #0
   26d52:	60a3      	str	r3, [r4, #8]
}
   26d54:	bd10      	pop	{r4, pc}
   26d56:	bf00      	nop
   26d58:	00037d51 	.word	0x00037d51
   26d5c:	00032486 	.word	0x00032486
   26d60:	00037d0e 	.word	0x00037d0e

00026d64 <z_unpend_thread>:
{
   26d64:	b538      	push	{r3, r4, r5, lr}
   26d66:	4604      	mov	r4, r0
	__asm__ volatile(
   26d68:	f04f 0340 	mov.w	r3, #64	; 0x40
   26d6c:	f3ef 8511 	mrs	r5, BASEPRI
   26d70:	f383 8812 	msr	BASEPRI_MAX, r3
   26d74:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26d78:	4819      	ldr	r0, [pc, #100]	; (26de0 <z_unpend_thread+0x7c>)
   26d7a:	f7fe f897 	bl	24eac <z_spin_lock_valid>
   26d7e:	b968      	cbnz	r0, 26d9c <z_unpend_thread+0x38>
   26d80:	4a18      	ldr	r2, [pc, #96]	; (26de4 <z_unpend_thread+0x80>)
   26d82:	4919      	ldr	r1, [pc, #100]	; (26de8 <z_unpend_thread+0x84>)
   26d84:	4819      	ldr	r0, [pc, #100]	; (26dec <z_unpend_thread+0x88>)
   26d86:	2381      	movs	r3, #129	; 0x81
   26d88:	f005 fc07 	bl	2c59a <printk>
   26d8c:	4914      	ldr	r1, [pc, #80]	; (26de0 <z_unpend_thread+0x7c>)
   26d8e:	4818      	ldr	r0, [pc, #96]	; (26df0 <z_unpend_thread+0x8c>)
   26d90:	f005 fc03 	bl	2c59a <printk>
   26d94:	4813      	ldr	r0, [pc, #76]	; (26de4 <z_unpend_thread+0x80>)
   26d96:	2181      	movs	r1, #129	; 0x81
   26d98:	f005 fe40 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   26d9c:	4810      	ldr	r0, [pc, #64]	; (26de0 <z_unpend_thread+0x7c>)
   26d9e:	f7fe f8a3 	bl	24ee8 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   26da2:	4620      	mov	r0, r4
   26da4:	f7ff ffbc 	bl	26d20 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26da8:	480d      	ldr	r0, [pc, #52]	; (26de0 <z_unpend_thread+0x7c>)
   26daa:	f7fe f88d 	bl	24ec8 <z_spin_unlock_valid>
   26dae:	b968      	cbnz	r0, 26dcc <z_unpend_thread+0x68>
   26db0:	4a0c      	ldr	r2, [pc, #48]	; (26de4 <z_unpend_thread+0x80>)
   26db2:	4910      	ldr	r1, [pc, #64]	; (26df4 <z_unpend_thread+0x90>)
   26db4:	480d      	ldr	r0, [pc, #52]	; (26dec <z_unpend_thread+0x88>)
   26db6:	23ac      	movs	r3, #172	; 0xac
   26db8:	f005 fbef 	bl	2c59a <printk>
   26dbc:	4908      	ldr	r1, [pc, #32]	; (26de0 <z_unpend_thread+0x7c>)
   26dbe:	480e      	ldr	r0, [pc, #56]	; (26df8 <z_unpend_thread+0x94>)
   26dc0:	f005 fbeb 	bl	2c59a <printk>
   26dc4:	4807      	ldr	r0, [pc, #28]	; (26de4 <z_unpend_thread+0x80>)
   26dc6:	21ac      	movs	r1, #172	; 0xac
   26dc8:	f005 fe28 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26dcc:	f385 8811 	msr	BASEPRI, r5
   26dd0:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   26dd4:	f104 0018 	add.w	r0, r4, #24
}
   26dd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26ddc:	f001 ba6a 	b.w	282b4 <z_abort_timeout>
   26de0:	20002f04 	.word	0x20002f04
   26de4:	00032546 	.word	0x00032546
   26de8:	00032598 	.word	0x00032598
   26dec:	00032486 	.word	0x00032486
   26df0:	000325ad 	.word	0x000325ad
   26df4:	0003256c 	.word	0x0003256c
   26df8:	00032583 	.word	0x00032583

00026dfc <update_cache>:
{
   26dfc:	b538      	push	{r3, r4, r5, lr}
   26dfe:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   26e00:	4814      	ldr	r0, [pc, #80]	; (26e54 <update_cache+0x58>)
   26e02:	4d15      	ldr	r5, [pc, #84]	; (26e58 <update_cache+0x5c>)
   26e04:	f009 fb0c 	bl	30420 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   26e08:	4604      	mov	r4, r0
   26e0a:	b900      	cbnz	r0, 26e0e <update_cache+0x12>
   26e0c:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   26e0e:	b9ca      	cbnz	r2, 26e44 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   26e10:	68ab      	ldr	r3, [r5, #8]
   26e12:	b963      	cbnz	r3, 26e2e <update_cache+0x32>
   26e14:	4911      	ldr	r1, [pc, #68]	; (26e5c <update_cache+0x60>)
   26e16:	4a12      	ldr	r2, [pc, #72]	; (26e60 <update_cache+0x64>)
   26e18:	4812      	ldr	r0, [pc, #72]	; (26e64 <update_cache+0x68>)
   26e1a:	2389      	movs	r3, #137	; 0x89
   26e1c:	f005 fbbd 	bl	2c59a <printk>
   26e20:	4811      	ldr	r0, [pc, #68]	; (26e68 <update_cache+0x6c>)
   26e22:	f005 fbba 	bl	2c59a <printk>
   26e26:	480e      	ldr	r0, [pc, #56]	; (26e60 <update_cache+0x64>)
   26e28:	2189      	movs	r1, #137	; 0x89
   26e2a:	f005 fdf7 	bl	2ca1c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   26e2e:	68ab      	ldr	r3, [r5, #8]
   26e30:	7b5a      	ldrb	r2, [r3, #13]
   26e32:	06d2      	lsls	r2, r2, #27
   26e34:	d106      	bne.n	26e44 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   26e36:	69a2      	ldr	r2, [r4, #24]
   26e38:	b922      	cbnz	r2, 26e44 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   26e3a:	89da      	ldrh	r2, [r3, #14]
   26e3c:	2a7f      	cmp	r2, #127	; 0x7f
   26e3e:	d901      	bls.n	26e44 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   26e40:	622b      	str	r3, [r5, #32]
}
   26e42:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   26e44:	68ab      	ldr	r3, [r5, #8]
   26e46:	42a3      	cmp	r3, r4
   26e48:	d001      	beq.n	26e4e <update_cache+0x52>
			z_reset_time_slice();
   26e4a:	f7ff fdcb 	bl	269e4 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   26e4e:	622c      	str	r4, [r5, #32]
}
   26e50:	e7f7      	b.n	26e42 <update_cache+0x46>
   26e52:	bf00      	nop
   26e54:	20002064 	.word	0x20002064
   26e58:	20002040 	.word	0x20002040
   26e5c:	00037d68 	.word	0x00037d68
   26e60:	00037d0e 	.word	0x00037d0e
   26e64:	00032486 	.word	0x00032486
   26e68:	00036e1f 	.word	0x00036e1f

00026e6c <move_thread_to_end_of_prio_q>:
{
   26e6c:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   26e6e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   26e72:	7b43      	ldrb	r3, [r0, #13]
   26e74:	2a00      	cmp	r2, #0
{
   26e76:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   26e78:	da06      	bge.n	26e88 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26e7e:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26e80:	4601      	mov	r1, r0
   26e82:	481f      	ldr	r0, [pc, #124]	; (26f00 <move_thread_to_end_of_prio_q+0x94>)
   26e84:	f7ff ff2a 	bl	26cdc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   26e88:	7b63      	ldrb	r3, [r4, #13]
   26e8a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   26e8e:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   26e90:	4b1c      	ldr	r3, [pc, #112]	; (26f04 <move_thread_to_end_of_prio_q+0x98>)
   26e92:	429c      	cmp	r4, r3
   26e94:	d109      	bne.n	26eaa <move_thread_to_end_of_prio_q+0x3e>
   26e96:	491c      	ldr	r1, [pc, #112]	; (26f08 <move_thread_to_end_of_prio_q+0x9c>)
   26e98:	481c      	ldr	r0, [pc, #112]	; (26f0c <move_thread_to_end_of_prio_q+0xa0>)
   26e9a:	4a1d      	ldr	r2, [pc, #116]	; (26f10 <move_thread_to_end_of_prio_q+0xa4>)
   26e9c:	23ba      	movs	r3, #186	; 0xba
   26e9e:	f005 fb7c 	bl	2c59a <printk>
   26ea2:	481b      	ldr	r0, [pc, #108]	; (26f10 <move_thread_to_end_of_prio_q+0xa4>)
   26ea4:	21ba      	movs	r1, #186	; 0xba
   26ea6:	f005 fdb9 	bl	2ca1c <assert_post_action>
	return list->head == list;
   26eaa:	4a1a      	ldr	r2, [pc, #104]	; (26f14 <move_thread_to_end_of_prio_q+0xa8>)
   26eac:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26eae:	6a95      	ldr	r5, [r2, #40]	; 0x28
	return list->head == list;
   26eb0:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26eb4:	428b      	cmp	r3, r1
   26eb6:	bf08      	it	eq
   26eb8:	2300      	moveq	r3, #0
   26eba:	2b00      	cmp	r3, #0
   26ebc:	bf38      	it	cc
   26ebe:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26ec0:	b1cb      	cbz	r3, 26ef6 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
   26ec2:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26ec6:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   26eca:	4286      	cmp	r6, r0
   26ecc:	d00f      	beq.n	26eee <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
   26ece:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   26ed0:	2800      	cmp	r0, #0
   26ed2:	dd0c      	ble.n	26eee <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   26ed4:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   26ed6:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   26eda:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   26edc:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   26ede:	6890      	ldr	r0, [r2, #8]
   26ee0:	1b03      	subs	r3, r0, r4
   26ee2:	4258      	negs	r0, r3
}
   26ee4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   26ee8:	4158      	adcs	r0, r3
   26eea:	f7ff bf87 	b.w	26dfc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   26eee:	42ab      	cmp	r3, r5
   26ef0:	d001      	beq.n	26ef6 <move_thread_to_end_of_prio_q+0x8a>
   26ef2:	681b      	ldr	r3, [r3, #0]
   26ef4:	e7e4      	b.n	26ec0 <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
   26ef6:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   26efa:	602c      	str	r4, [r5, #0]
	list->tail = node;
   26efc:	6294      	str	r4, [r2, #40]	; 0x28
}
   26efe:	e7ee      	b.n	26ede <move_thread_to_end_of_prio_q+0x72>
   26f00:	20002064 	.word	0x20002064
   26f04:	20002080 	.word	0x20002080
   26f08:	00037d30 	.word	0x00037d30
   26f0c:	00032486 	.word	0x00032486
   26f10:	00037d0e 	.word	0x00037d0e
   26f14:	20002040 	.word	0x20002040

00026f18 <z_time_slice>:
{
   26f18:	b570      	push	{r4, r5, r6, lr}
   26f1a:	4604      	mov	r4, r0
	__asm__ volatile(
   26f1c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26f20:	f3ef 8511 	mrs	r5, BASEPRI
   26f24:	f383 8812 	msr	BASEPRI_MAX, r3
   26f28:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26f2c:	482a      	ldr	r0, [pc, #168]	; (26fd8 <z_time_slice+0xc0>)
   26f2e:	f7fd ffbd 	bl	24eac <z_spin_lock_valid>
   26f32:	b968      	cbnz	r0, 26f50 <z_time_slice+0x38>
   26f34:	4a29      	ldr	r2, [pc, #164]	; (26fdc <z_time_slice+0xc4>)
   26f36:	492a      	ldr	r1, [pc, #168]	; (26fe0 <z_time_slice+0xc8>)
   26f38:	482a      	ldr	r0, [pc, #168]	; (26fe4 <z_time_slice+0xcc>)
   26f3a:	2381      	movs	r3, #129	; 0x81
   26f3c:	f005 fb2d 	bl	2c59a <printk>
   26f40:	4925      	ldr	r1, [pc, #148]	; (26fd8 <z_time_slice+0xc0>)
   26f42:	4829      	ldr	r0, [pc, #164]	; (26fe8 <z_time_slice+0xd0>)
   26f44:	f005 fb29 	bl	2c59a <printk>
   26f48:	4824      	ldr	r0, [pc, #144]	; (26fdc <z_time_slice+0xc4>)
   26f4a:	2181      	movs	r1, #129	; 0x81
   26f4c:	f005 fd66 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   26f50:	4821      	ldr	r0, [pc, #132]	; (26fd8 <z_time_slice+0xc0>)
   26f52:	f7fd ffc9 	bl	24ee8 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   26f56:	4b25      	ldr	r3, [pc, #148]	; (26fec <z_time_slice+0xd4>)
   26f58:	4a25      	ldr	r2, [pc, #148]	; (26ff0 <z_time_slice+0xd8>)
   26f5a:	6898      	ldr	r0, [r3, #8]
   26f5c:	6811      	ldr	r1, [r2, #0]
   26f5e:	4288      	cmp	r0, r1
   26f60:	4619      	mov	r1, r3
   26f62:	d118      	bne.n	26f96 <z_time_slice+0x7e>
			z_reset_time_slice();
   26f64:	f7ff fd3e 	bl	269e4 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26f68:	481b      	ldr	r0, [pc, #108]	; (26fd8 <z_time_slice+0xc0>)
   26f6a:	f7fd ffad 	bl	24ec8 <z_spin_unlock_valid>
   26f6e:	b968      	cbnz	r0, 26f8c <z_time_slice+0x74>
   26f70:	4a1a      	ldr	r2, [pc, #104]	; (26fdc <z_time_slice+0xc4>)
   26f72:	4920      	ldr	r1, [pc, #128]	; (26ff4 <z_time_slice+0xdc>)
   26f74:	481b      	ldr	r0, [pc, #108]	; (26fe4 <z_time_slice+0xcc>)
   26f76:	23ac      	movs	r3, #172	; 0xac
   26f78:	f005 fb0f 	bl	2c59a <printk>
   26f7c:	4916      	ldr	r1, [pc, #88]	; (26fd8 <z_time_slice+0xc0>)
   26f7e:	481e      	ldr	r0, [pc, #120]	; (26ff8 <z_time_slice+0xe0>)
   26f80:	f005 fb0b 	bl	2c59a <printk>
   26f84:	4815      	ldr	r0, [pc, #84]	; (26fdc <z_time_slice+0xc4>)
   26f86:	21ac      	movs	r1, #172	; 0xac
   26f88:	f005 fd48 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   26f8c:	f385 8811 	msr	BASEPRI, r5
   26f90:	f3bf 8f6f 	isb	sy
}
   26f94:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   26f96:	2600      	movs	r6, #0
   26f98:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   26f9a:	4a18      	ldr	r2, [pc, #96]	; (26ffc <z_time_slice+0xe4>)
   26f9c:	6812      	ldr	r2, [r2, #0]
   26f9e:	b1ba      	cbz	r2, 26fd0 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   26fa0:	89c2      	ldrh	r2, [r0, #14]
   26fa2:	2a7f      	cmp	r2, #127	; 0x7f
   26fa4:	d814      	bhi.n	26fd0 <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   26fa6:	7b42      	ldrb	r2, [r0, #13]
   26fa8:	06d2      	lsls	r2, r2, #27
   26faa:	d111      	bne.n	26fd0 <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   26fac:	4a14      	ldr	r2, [pc, #80]	; (27000 <z_time_slice+0xe8>)
   26fae:	f990 600e 	ldrsb.w	r6, [r0, #14]
   26fb2:	6812      	ldr	r2, [r2, #0]
   26fb4:	4296      	cmp	r6, r2
   26fb6:	db0b      	blt.n	26fd0 <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   26fb8:	4a12      	ldr	r2, [pc, #72]	; (27004 <z_time_slice+0xec>)
   26fba:	4290      	cmp	r0, r2
   26fbc:	d008      	beq.n	26fd0 <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   26fbe:	691a      	ldr	r2, [r3, #16]
   26fc0:	42a2      	cmp	r2, r4
   26fc2:	dc02      	bgt.n	26fca <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   26fc4:	f7ff ff52 	bl	26e6c <move_thread_to_end_of_prio_q>
   26fc8:	e7cc      	b.n	26f64 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   26fca:	1b12      	subs	r2, r2, r4
   26fcc:	611a      	str	r2, [r3, #16]
   26fce:	e7cb      	b.n	26f68 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   26fd0:	2300      	movs	r3, #0
   26fd2:	610b      	str	r3, [r1, #16]
   26fd4:	e7c8      	b.n	26f68 <z_time_slice+0x50>
   26fd6:	bf00      	nop
   26fd8:	20002f04 	.word	0x20002f04
   26fdc:	00032546 	.word	0x00032546
   26fe0:	00032598 	.word	0x00032598
   26fe4:	00032486 	.word	0x00032486
   26fe8:	000325ad 	.word	0x000325ad
   26fec:	20002040 	.word	0x20002040
   26ff0:	20002f00 	.word	0x20002f00
   26ff4:	0003256c 	.word	0x0003256c
   26ff8:	00032583 	.word	0x00032583
   26ffc:	20002f0c 	.word	0x20002f0c
   27000:	20002f08 	.word	0x20002f08
   27004:	20002080 	.word	0x20002080

00027008 <ready_thread>:
{
   27008:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   2700a:	f990 200d 	ldrsb.w	r2, [r0, #13]
   2700e:	7b43      	ldrb	r3, [r0, #13]
   27010:	2a00      	cmp	r2, #0
{
   27012:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   27014:	db3e      	blt.n	27094 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27016:	06da      	lsls	r2, r3, #27
   27018:	d13c      	bne.n	27094 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
   2701a:	6985      	ldr	r5, [r0, #24]
   2701c:	2d00      	cmp	r5, #0
   2701e:	d139      	bne.n	27094 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
   27020:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27024:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27026:	4b1c      	ldr	r3, [pc, #112]	; (27098 <ready_thread+0x90>)
   27028:	4298      	cmp	r0, r3
   2702a:	d109      	bne.n	27040 <ready_thread+0x38>
   2702c:	491b      	ldr	r1, [pc, #108]	; (2709c <ready_thread+0x94>)
   2702e:	481c      	ldr	r0, [pc, #112]	; (270a0 <ready_thread+0x98>)
   27030:	4a1c      	ldr	r2, [pc, #112]	; (270a4 <ready_thread+0x9c>)
   27032:	23ba      	movs	r3, #186	; 0xba
   27034:	f005 fab1 	bl	2c59a <printk>
   27038:	481a      	ldr	r0, [pc, #104]	; (270a4 <ready_thread+0x9c>)
   2703a:	21ba      	movs	r1, #186	; 0xba
   2703c:	f005 fcee 	bl	2ca1c <assert_post_action>
	return list->head == list;
   27040:	4919      	ldr	r1, [pc, #100]	; (270a8 <ready_thread+0xa0>)
   27042:	460b      	mov	r3, r1
   27044:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27048:	4298      	cmp	r0, r3
   2704a:	bf18      	it	ne
   2704c:	4605      	movne	r5, r0
   2704e:	2d00      	cmp	r5, #0
   27050:	461a      	mov	r2, r3
   27052:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27054:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   27056:	bf38      	it	cc
   27058:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2705a:	b1b3      	cbz	r3, 2708a <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
   2705c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   27060:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   27064:	4286      	cmp	r6, r0
   27066:	d00c      	beq.n	27082 <ready_thread+0x7a>
		return b2 - b1;
   27068:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2706a:	2800      	cmp	r0, #0
   2706c:	dd09      	ble.n	27082 <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
   2706e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27070:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27074:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27076:	605c      	str	r4, [r3, #4]
}
   27078:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   2707c:	2000      	movs	r0, #0
   2707e:	f7ff bebd 	b.w	26dfc <update_cache>
	return (node == list->tail) ? NULL : node->next;
   27082:	42ab      	cmp	r3, r5
   27084:	d001      	beq.n	2708a <ready_thread+0x82>
   27086:	681b      	ldr	r3, [r3, #0]
   27088:	e7e7      	b.n	2705a <ready_thread+0x52>
	node->prev = tail;
   2708a:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   2708e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   27090:	628c      	str	r4, [r1, #40]	; 0x28
}
   27092:	e7f1      	b.n	27078 <ready_thread+0x70>
}
   27094:	bd70      	pop	{r4, r5, r6, pc}
   27096:	bf00      	nop
   27098:	20002080 	.word	0x20002080
   2709c:	00037d30 	.word	0x00037d30
   270a0:	00032486 	.word	0x00032486
   270a4:	00037d0e 	.word	0x00037d0e
   270a8:	20002040 	.word	0x20002040

000270ac <z_ready_thread>:
{
   270ac:	b538      	push	{r3, r4, r5, lr}
   270ae:	4604      	mov	r4, r0
	__asm__ volatile(
   270b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   270b4:	f3ef 8511 	mrs	r5, BASEPRI
   270b8:	f383 8812 	msr	BASEPRI_MAX, r3
   270bc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   270c0:	4817      	ldr	r0, [pc, #92]	; (27120 <z_ready_thread+0x74>)
   270c2:	f7fd fef3 	bl	24eac <z_spin_lock_valid>
   270c6:	b968      	cbnz	r0, 270e4 <z_ready_thread+0x38>
   270c8:	4a16      	ldr	r2, [pc, #88]	; (27124 <z_ready_thread+0x78>)
   270ca:	4917      	ldr	r1, [pc, #92]	; (27128 <z_ready_thread+0x7c>)
   270cc:	4817      	ldr	r0, [pc, #92]	; (2712c <z_ready_thread+0x80>)
   270ce:	2381      	movs	r3, #129	; 0x81
   270d0:	f005 fa63 	bl	2c59a <printk>
   270d4:	4912      	ldr	r1, [pc, #72]	; (27120 <z_ready_thread+0x74>)
   270d6:	4816      	ldr	r0, [pc, #88]	; (27130 <z_ready_thread+0x84>)
   270d8:	f005 fa5f 	bl	2c59a <printk>
   270dc:	4811      	ldr	r0, [pc, #68]	; (27124 <z_ready_thread+0x78>)
   270de:	2181      	movs	r1, #129	; 0x81
   270e0:	f005 fc9c 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   270e4:	480e      	ldr	r0, [pc, #56]	; (27120 <z_ready_thread+0x74>)
   270e6:	f7fd feff 	bl	24ee8 <z_spin_lock_set_owner>
			ready_thread(thread);
   270ea:	4620      	mov	r0, r4
   270ec:	f7ff ff8c 	bl	27008 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   270f0:	480b      	ldr	r0, [pc, #44]	; (27120 <z_ready_thread+0x74>)
   270f2:	f7fd fee9 	bl	24ec8 <z_spin_unlock_valid>
   270f6:	b968      	cbnz	r0, 27114 <z_ready_thread+0x68>
   270f8:	4a0a      	ldr	r2, [pc, #40]	; (27124 <z_ready_thread+0x78>)
   270fa:	490e      	ldr	r1, [pc, #56]	; (27134 <z_ready_thread+0x88>)
   270fc:	480b      	ldr	r0, [pc, #44]	; (2712c <z_ready_thread+0x80>)
   270fe:	23ac      	movs	r3, #172	; 0xac
   27100:	f005 fa4b 	bl	2c59a <printk>
   27104:	4906      	ldr	r1, [pc, #24]	; (27120 <z_ready_thread+0x74>)
   27106:	480c      	ldr	r0, [pc, #48]	; (27138 <z_ready_thread+0x8c>)
   27108:	f005 fa47 	bl	2c59a <printk>
   2710c:	4805      	ldr	r0, [pc, #20]	; (27124 <z_ready_thread+0x78>)
   2710e:	21ac      	movs	r1, #172	; 0xac
   27110:	f005 fc84 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   27114:	f385 8811 	msr	BASEPRI, r5
   27118:	f3bf 8f6f 	isb	sy
}
   2711c:	bd38      	pop	{r3, r4, r5, pc}
   2711e:	bf00      	nop
   27120:	20002f04 	.word	0x20002f04
   27124:	00032546 	.word	0x00032546
   27128:	00032598 	.word	0x00032598
   2712c:	00032486 	.word	0x00032486
   27130:	000325ad 	.word	0x000325ad
   27134:	0003256c 	.word	0x0003256c
   27138:	00032583 	.word	0x00032583

0002713c <z_sched_start>:
{
   2713c:	b538      	push	{r3, r4, r5, lr}
   2713e:	4604      	mov	r4, r0
	__asm__ volatile(
   27140:	f04f 0340 	mov.w	r3, #64	; 0x40
   27144:	f3ef 8511 	mrs	r5, BASEPRI
   27148:	f383 8812 	msr	BASEPRI_MAX, r3
   2714c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27150:	481d      	ldr	r0, [pc, #116]	; (271c8 <z_sched_start+0x8c>)
   27152:	f7fd feab 	bl	24eac <z_spin_lock_valid>
   27156:	b968      	cbnz	r0, 27174 <z_sched_start+0x38>
   27158:	4a1c      	ldr	r2, [pc, #112]	; (271cc <z_sched_start+0x90>)
   2715a:	491d      	ldr	r1, [pc, #116]	; (271d0 <z_sched_start+0x94>)
   2715c:	481d      	ldr	r0, [pc, #116]	; (271d4 <z_sched_start+0x98>)
   2715e:	2381      	movs	r3, #129	; 0x81
   27160:	f005 fa1b 	bl	2c59a <printk>
   27164:	4918      	ldr	r1, [pc, #96]	; (271c8 <z_sched_start+0x8c>)
   27166:	481c      	ldr	r0, [pc, #112]	; (271d8 <z_sched_start+0x9c>)
   27168:	f005 fa17 	bl	2c59a <printk>
   2716c:	4817      	ldr	r0, [pc, #92]	; (271cc <z_sched_start+0x90>)
   2716e:	2181      	movs	r1, #129	; 0x81
   27170:	f005 fc54 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   27174:	4814      	ldr	r0, [pc, #80]	; (271c8 <z_sched_start+0x8c>)
   27176:	f7fd feb7 	bl	24ee8 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   2717a:	7b63      	ldrb	r3, [r4, #13]
   2717c:	075a      	lsls	r2, r3, #29
   2717e:	d416      	bmi.n	271ae <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27180:	4811      	ldr	r0, [pc, #68]	; (271c8 <z_sched_start+0x8c>)
   27182:	f7fd fea1 	bl	24ec8 <z_spin_unlock_valid>
   27186:	b968      	cbnz	r0, 271a4 <z_sched_start+0x68>
   27188:	4a10      	ldr	r2, [pc, #64]	; (271cc <z_sched_start+0x90>)
   2718a:	4914      	ldr	r1, [pc, #80]	; (271dc <z_sched_start+0xa0>)
   2718c:	4811      	ldr	r0, [pc, #68]	; (271d4 <z_sched_start+0x98>)
   2718e:	23ac      	movs	r3, #172	; 0xac
   27190:	f005 fa03 	bl	2c59a <printk>
   27194:	490c      	ldr	r1, [pc, #48]	; (271c8 <z_sched_start+0x8c>)
   27196:	4812      	ldr	r0, [pc, #72]	; (271e0 <z_sched_start+0xa4>)
   27198:	f005 f9ff 	bl	2c59a <printk>
   2719c:	480b      	ldr	r0, [pc, #44]	; (271cc <z_sched_start+0x90>)
   2719e:	21ac      	movs	r1, #172	; 0xac
   271a0:	f005 fc3c 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   271a4:	f385 8811 	msr	BASEPRI, r5
   271a8:	f3bf 8f6f 	isb	sy
}
   271ac:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   271ae:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   271b2:	4620      	mov	r0, r4
   271b4:	7363      	strb	r3, [r4, #13]
   271b6:	f7ff ff27 	bl	27008 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   271ba:	4629      	mov	r1, r5
   271bc:	4802      	ldr	r0, [pc, #8]	; (271c8 <z_sched_start+0x8c>)
}
   271be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   271c2:	f7ff bcd3 	b.w	26b6c <z_reschedule>
   271c6:	bf00      	nop
   271c8:	20002f04 	.word	0x20002f04
   271cc:	00032546 	.word	0x00032546
   271d0:	00032598 	.word	0x00032598
   271d4:	00032486 	.word	0x00032486
   271d8:	000325ad 	.word	0x000325ad
   271dc:	0003256c 	.word	0x0003256c
   271e0:	00032583 	.word	0x00032583

000271e4 <z_thread_timeout>:
{
   271e4:	b570      	push	{r4, r5, r6, lr}
   271e6:	4604      	mov	r4, r0
	__asm__ volatile(
   271e8:	f04f 0340 	mov.w	r3, #64	; 0x40
   271ec:	f3ef 8611 	mrs	r6, BASEPRI
   271f0:	f383 8812 	msr	BASEPRI_MAX, r3
   271f4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   271f8:	4820      	ldr	r0, [pc, #128]	; (2727c <z_thread_timeout+0x98>)
   271fa:	f7fd fe57 	bl	24eac <z_spin_lock_valid>
   271fe:	b968      	cbnz	r0, 2721c <z_thread_timeout+0x38>
   27200:	4a1f      	ldr	r2, [pc, #124]	; (27280 <z_thread_timeout+0x9c>)
   27202:	4920      	ldr	r1, [pc, #128]	; (27284 <z_thread_timeout+0xa0>)
   27204:	4820      	ldr	r0, [pc, #128]	; (27288 <z_thread_timeout+0xa4>)
   27206:	2381      	movs	r3, #129	; 0x81
   27208:	f005 f9c7 	bl	2c59a <printk>
   2720c:	491b      	ldr	r1, [pc, #108]	; (2727c <z_thread_timeout+0x98>)
   2720e:	481f      	ldr	r0, [pc, #124]	; (2728c <z_thread_timeout+0xa8>)
   27210:	f005 f9c3 	bl	2c59a <printk>
   27214:	481a      	ldr	r0, [pc, #104]	; (27280 <z_thread_timeout+0x9c>)
   27216:	2181      	movs	r1, #129	; 0x81
   27218:	f005 fc00 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   2721c:	4817      	ldr	r0, [pc, #92]	; (2727c <z_thread_timeout+0x98>)
   2721e:	f7fd fe63 	bl	24ee8 <z_spin_lock_set_owner>
		if (!killed) {
   27222:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   27226:	f013 0f28 	tst.w	r3, #40	; 0x28
   2722a:	d110      	bne.n	2724e <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   2722c:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   27230:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   27234:	b113      	cbz	r3, 2723c <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   27236:	4628      	mov	r0, r5
   27238:	f7ff fd72 	bl	26d20 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   2723c:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   27240:	f023 0314 	bic.w	r3, r3, #20
   27244:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   27248:	4628      	mov	r0, r5
   2724a:	f7ff fedd 	bl	27008 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2724e:	480b      	ldr	r0, [pc, #44]	; (2727c <z_thread_timeout+0x98>)
   27250:	f7fd fe3a 	bl	24ec8 <z_spin_unlock_valid>
   27254:	b968      	cbnz	r0, 27272 <z_thread_timeout+0x8e>
   27256:	4a0a      	ldr	r2, [pc, #40]	; (27280 <z_thread_timeout+0x9c>)
   27258:	490d      	ldr	r1, [pc, #52]	; (27290 <z_thread_timeout+0xac>)
   2725a:	480b      	ldr	r0, [pc, #44]	; (27288 <z_thread_timeout+0xa4>)
   2725c:	23ac      	movs	r3, #172	; 0xac
   2725e:	f005 f99c 	bl	2c59a <printk>
   27262:	4906      	ldr	r1, [pc, #24]	; (2727c <z_thread_timeout+0x98>)
   27264:	480b      	ldr	r0, [pc, #44]	; (27294 <z_thread_timeout+0xb0>)
   27266:	f005 f998 	bl	2c59a <printk>
   2726a:	4805      	ldr	r0, [pc, #20]	; (27280 <z_thread_timeout+0x9c>)
   2726c:	21ac      	movs	r1, #172	; 0xac
   2726e:	f005 fbd5 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   27272:	f386 8811 	msr	BASEPRI, r6
   27276:	f3bf 8f6f 	isb	sy
}
   2727a:	bd70      	pop	{r4, r5, r6, pc}
   2727c:	20002f04 	.word	0x20002f04
   27280:	00032546 	.word	0x00032546
   27284:	00032598 	.word	0x00032598
   27288:	00032486 	.word	0x00032486
   2728c:	000325ad 	.word	0x000325ad
   27290:	0003256c 	.word	0x0003256c
   27294:	00032583 	.word	0x00032583

00027298 <unready_thread>:
{
   27298:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   2729a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2729e:	7b43      	ldrb	r3, [r0, #13]
   272a0:	2a00      	cmp	r2, #0
{
   272a2:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   272a4:	da06      	bge.n	272b4 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   272a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   272aa:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   272ac:	4601      	mov	r1, r0
   272ae:	4806      	ldr	r0, [pc, #24]	; (272c8 <unready_thread+0x30>)
   272b0:	f7ff fd14 	bl	26cdc <z_priq_dumb_remove>
	update_cache(thread == _current);
   272b4:	4b05      	ldr	r3, [pc, #20]	; (272cc <unready_thread+0x34>)
   272b6:	6898      	ldr	r0, [r3, #8]
   272b8:	1b03      	subs	r3, r0, r4
   272ba:	4258      	negs	r0, r3
}
   272bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   272c0:	4158      	adcs	r0, r3
   272c2:	f7ff bd9b 	b.w	26dfc <update_cache>
   272c6:	bf00      	nop
   272c8:	20002064 	.word	0x20002064
   272cc:	20002040 	.word	0x20002040

000272d0 <add_to_waitq_locked>:
{
   272d0:	b538      	push	{r3, r4, r5, lr}
   272d2:	4604      	mov	r4, r0
   272d4:	460d      	mov	r5, r1
	unready_thread(thread);
   272d6:	f7ff ffdf 	bl	27298 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   272da:	7b63      	ldrb	r3, [r4, #13]
   272dc:	f043 0302 	orr.w	r3, r3, #2
   272e0:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   272e2:	b31d      	cbz	r5, 2732c <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   272e4:	4b17      	ldr	r3, [pc, #92]	; (27344 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   272e6:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   272e8:	429c      	cmp	r4, r3
   272ea:	d109      	bne.n	27300 <add_to_waitq_locked+0x30>
   272ec:	4916      	ldr	r1, [pc, #88]	; (27348 <add_to_waitq_locked+0x78>)
   272ee:	4817      	ldr	r0, [pc, #92]	; (2734c <add_to_waitq_locked+0x7c>)
   272f0:	4a17      	ldr	r2, [pc, #92]	; (27350 <add_to_waitq_locked+0x80>)
   272f2:	23ba      	movs	r3, #186	; 0xba
   272f4:	f005 f951 	bl	2c59a <printk>
   272f8:	4815      	ldr	r0, [pc, #84]	; (27350 <add_to_waitq_locked+0x80>)
   272fa:	21ba      	movs	r1, #186	; 0xba
   272fc:	f005 fb8e 	bl	2ca1c <assert_post_action>
	return list->head == list;
   27300:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27302:	429d      	cmp	r5, r3
   27304:	bf08      	it	eq
   27306:	2300      	moveq	r3, #0
   27308:	2b00      	cmp	r3, #0
   2730a:	bf38      	it	cc
   2730c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2730e:	b19b      	cbz	r3, 27338 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
   27310:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   27314:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   27318:	4291      	cmp	r1, r2
   2731a:	d008      	beq.n	2732e <add_to_waitq_locked+0x5e>
		return b2 - b1;
   2731c:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2731e:	2a00      	cmp	r2, #0
   27320:	dd05      	ble.n	2732e <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
   27322:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27324:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27328:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2732a:	605c      	str	r4, [r3, #4]
}
   2732c:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2732e:	686a      	ldr	r2, [r5, #4]
   27330:	4293      	cmp	r3, r2
   27332:	d001      	beq.n	27338 <add_to_waitq_locked+0x68>
   27334:	681b      	ldr	r3, [r3, #0]
   27336:	e7ea      	b.n	2730e <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
   27338:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   2733a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2733e:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27340:	606c      	str	r4, [r5, #4]
   27342:	e7f3      	b.n	2732c <add_to_waitq_locked+0x5c>
   27344:	20002080 	.word	0x20002080
   27348:	00037d30 	.word	0x00037d30
   2734c:	00032486 	.word	0x00032486
   27350:	00037d0e 	.word	0x00037d0e

00027354 <pend>:
{
   27354:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27358:	4604      	mov	r4, r0
   2735a:	460d      	mov	r5, r1
   2735c:	4616      	mov	r6, r2
   2735e:	461f      	mov	r7, r3
	__asm__ volatile(
   27360:	f04f 0340 	mov.w	r3, #64	; 0x40
   27364:	f3ef 8811 	mrs	r8, BASEPRI
   27368:	f383 8812 	msr	BASEPRI_MAX, r3
   2736c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27370:	481f      	ldr	r0, [pc, #124]	; (273f0 <pend+0x9c>)
   27372:	f7fd fd9b 	bl	24eac <z_spin_lock_valid>
   27376:	b968      	cbnz	r0, 27394 <pend+0x40>
   27378:	4a1e      	ldr	r2, [pc, #120]	; (273f4 <pend+0xa0>)
   2737a:	491f      	ldr	r1, [pc, #124]	; (273f8 <pend+0xa4>)
   2737c:	481f      	ldr	r0, [pc, #124]	; (273fc <pend+0xa8>)
   2737e:	2381      	movs	r3, #129	; 0x81
   27380:	f005 f90b 	bl	2c59a <printk>
   27384:	491a      	ldr	r1, [pc, #104]	; (273f0 <pend+0x9c>)
   27386:	481e      	ldr	r0, [pc, #120]	; (27400 <pend+0xac>)
   27388:	f005 f907 	bl	2c59a <printk>
   2738c:	4819      	ldr	r0, [pc, #100]	; (273f4 <pend+0xa0>)
   2738e:	2181      	movs	r1, #129	; 0x81
   27390:	f005 fb44 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   27394:	4816      	ldr	r0, [pc, #88]	; (273f0 <pend+0x9c>)
   27396:	f7fd fda7 	bl	24ee8 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   2739a:	4620      	mov	r0, r4
   2739c:	4629      	mov	r1, r5
   2739e:	f7ff ff97 	bl	272d0 <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   273a2:	4813      	ldr	r0, [pc, #76]	; (273f0 <pend+0x9c>)
   273a4:	f7fd fd90 	bl	24ec8 <z_spin_unlock_valid>
   273a8:	b968      	cbnz	r0, 273c6 <pend+0x72>
   273aa:	4a12      	ldr	r2, [pc, #72]	; (273f4 <pend+0xa0>)
   273ac:	4915      	ldr	r1, [pc, #84]	; (27404 <pend+0xb0>)
   273ae:	4813      	ldr	r0, [pc, #76]	; (273fc <pend+0xa8>)
   273b0:	23ac      	movs	r3, #172	; 0xac
   273b2:	f005 f8f2 	bl	2c59a <printk>
   273b6:	490e      	ldr	r1, [pc, #56]	; (273f0 <pend+0x9c>)
   273b8:	4813      	ldr	r0, [pc, #76]	; (27408 <pend+0xb4>)
   273ba:	f005 f8ee 	bl	2c59a <printk>
   273be:	480d      	ldr	r0, [pc, #52]	; (273f4 <pend+0xa0>)
   273c0:	21ac      	movs	r1, #172	; 0xac
   273c2:	f005 fb2b 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   273c6:	f388 8811 	msr	BASEPRI, r8
   273ca:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   273ce:	1c7b      	adds	r3, r7, #1
   273d0:	bf08      	it	eq
   273d2:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   273d6:	d008      	beq.n	273ea <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   273d8:	4632      	mov	r2, r6
   273da:	463b      	mov	r3, r7
   273dc:	f104 0018 	add.w	r0, r4, #24
   273e0:	490a      	ldr	r1, [pc, #40]	; (2740c <pend+0xb8>)
}
   273e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   273e6:	f000 be91 	b.w	2810c <z_add_timeout>
   273ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   273ee:	bf00      	nop
   273f0:	20002f04 	.word	0x20002f04
   273f4:	00032546 	.word	0x00032546
   273f8:	00032598 	.word	0x00032598
   273fc:	00032486 	.word	0x00032486
   27400:	000325ad 	.word	0x000325ad
   27404:	0003256c 	.word	0x0003256c
   27408:	00032583 	.word	0x00032583
   2740c:	000271e5 	.word	0x000271e5

00027410 <z_pend_curr>:
{
   27410:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   27412:	4b11      	ldr	r3, [pc, #68]	; (27458 <z_pend_curr+0x48>)
{
   27414:	4604      	mov	r4, r0
	pending_current = _current;
   27416:	6898      	ldr	r0, [r3, #8]
   27418:	4b10      	ldr	r3, [pc, #64]	; (2745c <z_pend_curr+0x4c>)
{
   2741a:	460d      	mov	r5, r1
	pending_current = _current;
   2741c:	6018      	str	r0, [r3, #0]
{
   2741e:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   27420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   27424:	f7ff ff96 	bl	27354 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27428:	4620      	mov	r0, r4
   2742a:	f7fd fd4d 	bl	24ec8 <z_spin_unlock_valid>
   2742e:	b968      	cbnz	r0, 2744c <z_pend_curr+0x3c>
   27430:	4a0b      	ldr	r2, [pc, #44]	; (27460 <z_pend_curr+0x50>)
   27432:	490c      	ldr	r1, [pc, #48]	; (27464 <z_pend_curr+0x54>)
   27434:	480c      	ldr	r0, [pc, #48]	; (27468 <z_pend_curr+0x58>)
   27436:	23c3      	movs	r3, #195	; 0xc3
   27438:	f005 f8af 	bl	2c59a <printk>
   2743c:	480b      	ldr	r0, [pc, #44]	; (2746c <z_pend_curr+0x5c>)
   2743e:	4621      	mov	r1, r4
   27440:	f005 f8ab 	bl	2c59a <printk>
   27444:	4806      	ldr	r0, [pc, #24]	; (27460 <z_pend_curr+0x50>)
   27446:	21c3      	movs	r1, #195	; 0xc3
   27448:	f005 fae8 	bl	2ca1c <assert_post_action>
   2744c:	4628      	mov	r0, r5
}
   2744e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   27452:	f7ef be31 	b.w	170b8 <arch_swap>
   27456:	bf00      	nop
   27458:	20002040 	.word	0x20002040
   2745c:	20002f00 	.word	0x20002f00
   27460:	00032546 	.word	0x00032546
   27464:	0003256c 	.word	0x0003256c
   27468:	00032486 	.word	0x00032486
   2746c:	00032583 	.word	0x00032583

00027470 <z_set_prio>:
{
   27470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27472:	4604      	mov	r4, r0
   27474:	460e      	mov	r6, r1
	__asm__ volatile(
   27476:	f04f 0340 	mov.w	r3, #64	; 0x40
   2747a:	f3ef 8711 	mrs	r7, BASEPRI
   2747e:	f383 8812 	msr	BASEPRI_MAX, r3
   27482:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27486:	483c      	ldr	r0, [pc, #240]	; (27578 <z_set_prio+0x108>)
   27488:	f7fd fd10 	bl	24eac <z_spin_lock_valid>
   2748c:	b968      	cbnz	r0, 274aa <z_set_prio+0x3a>
   2748e:	4a3b      	ldr	r2, [pc, #236]	; (2757c <z_set_prio+0x10c>)
   27490:	493b      	ldr	r1, [pc, #236]	; (27580 <z_set_prio+0x110>)
   27492:	483c      	ldr	r0, [pc, #240]	; (27584 <z_set_prio+0x114>)
   27494:	2381      	movs	r3, #129	; 0x81
   27496:	f005 f880 	bl	2c59a <printk>
   2749a:	4937      	ldr	r1, [pc, #220]	; (27578 <z_set_prio+0x108>)
   2749c:	483a      	ldr	r0, [pc, #232]	; (27588 <z_set_prio+0x118>)
   2749e:	f005 f87c 	bl	2c59a <printk>
   274a2:	4836      	ldr	r0, [pc, #216]	; (2757c <z_set_prio+0x10c>)
   274a4:	2181      	movs	r1, #129	; 0x81
   274a6:	f005 fab9 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   274aa:	4833      	ldr	r0, [pc, #204]	; (27578 <z_set_prio+0x108>)
   274ac:	f7fd fd1c 	bl	24ee8 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   274b0:	7b63      	ldrb	r3, [r4, #13]
   274b2:	06da      	lsls	r2, r3, #27
   274b4:	b276      	sxtb	r6, r6
   274b6:	d15c      	bne.n	27572 <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
   274b8:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   274ba:	2d00      	cmp	r5, #0
   274bc:	d159      	bne.n	27572 <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   274be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   274c2:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   274c4:	4831      	ldr	r0, [pc, #196]	; (2758c <z_set_prio+0x11c>)
   274c6:	4621      	mov	r1, r4
   274c8:	f7ff fc08 	bl	26cdc <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   274cc:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   274ce:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   274d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   274d4:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   274d6:	4b2e      	ldr	r3, [pc, #184]	; (27590 <z_set_prio+0x120>)
   274d8:	429c      	cmp	r4, r3
   274da:	d109      	bne.n	274f0 <z_set_prio+0x80>
   274dc:	492d      	ldr	r1, [pc, #180]	; (27594 <z_set_prio+0x124>)
   274de:	4829      	ldr	r0, [pc, #164]	; (27584 <z_set_prio+0x114>)
   274e0:	4a2d      	ldr	r2, [pc, #180]	; (27598 <z_set_prio+0x128>)
   274e2:	23ba      	movs	r3, #186	; 0xba
   274e4:	f005 f859 	bl	2c59a <printk>
   274e8:	482b      	ldr	r0, [pc, #172]	; (27598 <z_set_prio+0x128>)
   274ea:	21ba      	movs	r1, #186	; 0xba
   274ec:	f005 fa96 	bl	2ca1c <assert_post_action>
	return list->head == list;
   274f0:	492a      	ldr	r1, [pc, #168]	; (2759c <z_set_prio+0x12c>)
   274f2:	460b      	mov	r3, r1
   274f4:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   274f8:	4298      	cmp	r0, r3
   274fa:	bf18      	it	ne
   274fc:	4605      	movne	r5, r0
   274fe:	2d00      	cmp	r5, #0
   27500:	461a      	mov	r2, r3
   27502:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27504:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   27506:	bf38      	it	cc
   27508:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2750a:	b36b      	cbz	r3, 27568 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
   2750c:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   27510:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   27514:	4286      	cmp	r6, r0
   27516:	d023      	beq.n	27560 <z_set_prio+0xf0>
		return b2 - b1;
   27518:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   2751a:	2800      	cmp	r0, #0
   2751c:	dd20      	ble.n	27560 <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
   2751e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27520:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27524:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27526:	605c      	str	r4, [r3, #4]
			update_cache(1);
   27528:	2001      	movs	r0, #1
   2752a:	f7ff fc67 	bl	26dfc <update_cache>
   2752e:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27530:	4811      	ldr	r0, [pc, #68]	; (27578 <z_set_prio+0x108>)
   27532:	f7fd fcc9 	bl	24ec8 <z_spin_unlock_valid>
   27536:	b968      	cbnz	r0, 27554 <z_set_prio+0xe4>
   27538:	4a10      	ldr	r2, [pc, #64]	; (2757c <z_set_prio+0x10c>)
   2753a:	4919      	ldr	r1, [pc, #100]	; (275a0 <z_set_prio+0x130>)
   2753c:	4811      	ldr	r0, [pc, #68]	; (27584 <z_set_prio+0x114>)
   2753e:	23ac      	movs	r3, #172	; 0xac
   27540:	f005 f82b 	bl	2c59a <printk>
   27544:	490c      	ldr	r1, [pc, #48]	; (27578 <z_set_prio+0x108>)
   27546:	4817      	ldr	r0, [pc, #92]	; (275a4 <z_set_prio+0x134>)
   27548:	f005 f827 	bl	2c59a <printk>
   2754c:	480b      	ldr	r0, [pc, #44]	; (2757c <z_set_prio+0x10c>)
   2754e:	21ac      	movs	r1, #172	; 0xac
   27550:	f005 fa64 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   27554:	f387 8811 	msr	BASEPRI, r7
   27558:	f3bf 8f6f 	isb	sy
}
   2755c:	4620      	mov	r0, r4
   2755e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   27560:	42ab      	cmp	r3, r5
   27562:	d001      	beq.n	27568 <z_set_prio+0xf8>
   27564:	681b      	ldr	r3, [r3, #0]
   27566:	e7d0      	b.n	2750a <z_set_prio+0x9a>
	node->prev = tail;
   27568:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   2756c:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2756e:	628c      	str	r4, [r1, #40]	; 0x28
}
   27570:	e7da      	b.n	27528 <z_set_prio+0xb8>
			thread->base.prio = prio;
   27572:	73a6      	strb	r6, [r4, #14]
   27574:	2400      	movs	r4, #0
   27576:	e7db      	b.n	27530 <z_set_prio+0xc0>
   27578:	20002f04 	.word	0x20002f04
   2757c:	00032546 	.word	0x00032546
   27580:	00032598 	.word	0x00032598
   27584:	00032486 	.word	0x00032486
   27588:	000325ad 	.word	0x000325ad
   2758c:	20002064 	.word	0x20002064
   27590:	20002080 	.word	0x20002080
   27594:	00037d30 	.word	0x00037d30
   27598:	00037d0e 	.word	0x00037d0e
   2759c:	20002040 	.word	0x20002040
   275a0:	0003256c 	.word	0x0003256c
   275a4:	00032583 	.word	0x00032583

000275a8 <z_impl_k_thread_suspend>:
{
   275a8:	b570      	push	{r4, r5, r6, lr}
   275aa:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   275ac:	3018      	adds	r0, #24
   275ae:	f000 fe81 	bl	282b4 <z_abort_timeout>
	__asm__ volatile(
   275b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   275b6:	f3ef 8611 	mrs	r6, BASEPRI
   275ba:	f383 8812 	msr	BASEPRI_MAX, r3
   275be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   275c2:	4825      	ldr	r0, [pc, #148]	; (27658 <z_impl_k_thread_suspend+0xb0>)
   275c4:	f7fd fc72 	bl	24eac <z_spin_lock_valid>
   275c8:	b968      	cbnz	r0, 275e6 <z_impl_k_thread_suspend+0x3e>
   275ca:	4a24      	ldr	r2, [pc, #144]	; (2765c <z_impl_k_thread_suspend+0xb4>)
   275cc:	4924      	ldr	r1, [pc, #144]	; (27660 <z_impl_k_thread_suspend+0xb8>)
   275ce:	4825      	ldr	r0, [pc, #148]	; (27664 <z_impl_k_thread_suspend+0xbc>)
   275d0:	2381      	movs	r3, #129	; 0x81
   275d2:	f004 ffe2 	bl	2c59a <printk>
   275d6:	4920      	ldr	r1, [pc, #128]	; (27658 <z_impl_k_thread_suspend+0xb0>)
   275d8:	4823      	ldr	r0, [pc, #140]	; (27668 <z_impl_k_thread_suspend+0xc0>)
   275da:	f004 ffde 	bl	2c59a <printk>
   275de:	481f      	ldr	r0, [pc, #124]	; (2765c <z_impl_k_thread_suspend+0xb4>)
   275e0:	2181      	movs	r1, #129	; 0x81
   275e2:	f005 fa1b 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   275e6:	481c      	ldr	r0, [pc, #112]	; (27658 <z_impl_k_thread_suspend+0xb0>)
   275e8:	f7fd fc7e 	bl	24ee8 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   275ec:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   275f0:	7b63      	ldrb	r3, [r4, #13]
   275f2:	2a00      	cmp	r2, #0
   275f4:	da06      	bge.n	27604 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   275f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   275fa:	481c      	ldr	r0, [pc, #112]	; (2766c <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   275fc:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   275fe:	4621      	mov	r1, r4
   27600:	f7ff fb6c 	bl	26cdc <z_priq_dumb_remove>
		update_cache(thread == _current);
   27604:	4d1a      	ldr	r5, [pc, #104]	; (27670 <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   27606:	7b63      	ldrb	r3, [r4, #13]
   27608:	68a8      	ldr	r0, [r5, #8]
   2760a:	f043 0310 	orr.w	r3, r3, #16
   2760e:	7363      	strb	r3, [r4, #13]
   27610:	1b03      	subs	r3, r0, r4
   27612:	4258      	negs	r0, r3
   27614:	4158      	adcs	r0, r3
   27616:	f7ff fbf1 	bl	26dfc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2761a:	480f      	ldr	r0, [pc, #60]	; (27658 <z_impl_k_thread_suspend+0xb0>)
   2761c:	f7fd fc54 	bl	24ec8 <z_spin_unlock_valid>
   27620:	b968      	cbnz	r0, 2763e <z_impl_k_thread_suspend+0x96>
   27622:	4a0e      	ldr	r2, [pc, #56]	; (2765c <z_impl_k_thread_suspend+0xb4>)
   27624:	4913      	ldr	r1, [pc, #76]	; (27674 <z_impl_k_thread_suspend+0xcc>)
   27626:	480f      	ldr	r0, [pc, #60]	; (27664 <z_impl_k_thread_suspend+0xbc>)
   27628:	23ac      	movs	r3, #172	; 0xac
   2762a:	f004 ffb6 	bl	2c59a <printk>
   2762e:	490a      	ldr	r1, [pc, #40]	; (27658 <z_impl_k_thread_suspend+0xb0>)
   27630:	4811      	ldr	r0, [pc, #68]	; (27678 <z_impl_k_thread_suspend+0xd0>)
   27632:	f004 ffb2 	bl	2c59a <printk>
   27636:	4809      	ldr	r0, [pc, #36]	; (2765c <z_impl_k_thread_suspend+0xb4>)
   27638:	21ac      	movs	r1, #172	; 0xac
   2763a:	f005 f9ef 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   2763e:	f386 8811 	msr	BASEPRI, r6
   27642:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   27646:	68ab      	ldr	r3, [r5, #8]
   27648:	42a3      	cmp	r3, r4
   2764a:	d103      	bne.n	27654 <z_impl_k_thread_suspend+0xac>
}
   2764c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   27650:	f008 bedc 	b.w	3040c <z_reschedule_unlocked>
}
   27654:	bd70      	pop	{r4, r5, r6, pc}
   27656:	bf00      	nop
   27658:	20002f04 	.word	0x20002f04
   2765c:	00032546 	.word	0x00032546
   27660:	00032598 	.word	0x00032598
   27664:	00032486 	.word	0x00032486
   27668:	000325ad 	.word	0x000325ad
   2766c:	20002064 	.word	0x20002064
   27670:	20002040 	.word	0x20002040
   27674:	0003256c 	.word	0x0003256c
   27678:	00032583 	.word	0x00032583

0002767c <k_sched_unlock>:
{
   2767c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2767e:	f04f 0340 	mov.w	r3, #64	; 0x40
   27682:	f3ef 8511 	mrs	r5, BASEPRI
   27686:	f383 8812 	msr	BASEPRI_MAX, r3
   2768a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2768e:	482d      	ldr	r0, [pc, #180]	; (27744 <k_sched_unlock+0xc8>)
   27690:	f7fd fc0c 	bl	24eac <z_spin_lock_valid>
   27694:	b968      	cbnz	r0, 276b2 <k_sched_unlock+0x36>
   27696:	4a2c      	ldr	r2, [pc, #176]	; (27748 <k_sched_unlock+0xcc>)
   27698:	492c      	ldr	r1, [pc, #176]	; (2774c <k_sched_unlock+0xd0>)
   2769a:	482d      	ldr	r0, [pc, #180]	; (27750 <k_sched_unlock+0xd4>)
   2769c:	2381      	movs	r3, #129	; 0x81
   2769e:	f004 ff7c 	bl	2c59a <printk>
   276a2:	4928      	ldr	r1, [pc, #160]	; (27744 <k_sched_unlock+0xc8>)
   276a4:	482b      	ldr	r0, [pc, #172]	; (27754 <k_sched_unlock+0xd8>)
   276a6:	f004 ff78 	bl	2c59a <printk>
   276aa:	4827      	ldr	r0, [pc, #156]	; (27748 <k_sched_unlock+0xcc>)
   276ac:	2181      	movs	r1, #129	; 0x81
   276ae:	f005 f9b5 	bl	2ca1c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   276b2:	4c29      	ldr	r4, [pc, #164]	; (27758 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   276b4:	4823      	ldr	r0, [pc, #140]	; (27744 <k_sched_unlock+0xc8>)
   276b6:	f7fd fc17 	bl	24ee8 <z_spin_lock_set_owner>
   276ba:	68a2      	ldr	r2, [r4, #8]
   276bc:	7bd2      	ldrb	r2, [r2, #15]
   276be:	b972      	cbnz	r2, 276de <k_sched_unlock+0x62>
   276c0:	4926      	ldr	r1, [pc, #152]	; (2775c <k_sched_unlock+0xe0>)
   276c2:	4a27      	ldr	r2, [pc, #156]	; (27760 <k_sched_unlock+0xe4>)
   276c4:	4822      	ldr	r0, [pc, #136]	; (27750 <k_sched_unlock+0xd4>)
   276c6:	f240 3385 	movw	r3, #901	; 0x385
   276ca:	f004 ff66 	bl	2c59a <printk>
   276ce:	4825      	ldr	r0, [pc, #148]	; (27764 <k_sched_unlock+0xe8>)
   276d0:	f004 ff63 	bl	2c59a <printk>
   276d4:	4822      	ldr	r0, [pc, #136]	; (27760 <k_sched_unlock+0xe4>)
   276d6:	f240 3185 	movw	r1, #901	; 0x385
   276da:	f005 f99f 	bl	2ca1c <assert_post_action>
   276de:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   276e2:	b173      	cbz	r3, 27702 <k_sched_unlock+0x86>
   276e4:	4920      	ldr	r1, [pc, #128]	; (27768 <k_sched_unlock+0xec>)
   276e6:	4a1e      	ldr	r2, [pc, #120]	; (27760 <k_sched_unlock+0xe4>)
   276e8:	4819      	ldr	r0, [pc, #100]	; (27750 <k_sched_unlock+0xd4>)
   276ea:	f240 3386 	movw	r3, #902	; 0x386
   276ee:	f004 ff54 	bl	2c59a <printk>
   276f2:	481c      	ldr	r0, [pc, #112]	; (27764 <k_sched_unlock+0xe8>)
   276f4:	f004 ff51 	bl	2c59a <printk>
   276f8:	4819      	ldr	r0, [pc, #100]	; (27760 <k_sched_unlock+0xe4>)
   276fa:	f240 3186 	movw	r1, #902	; 0x386
   276fe:	f005 f98d 	bl	2ca1c <assert_post_action>
		++_current->base.sched_locked;
   27702:	68a2      	ldr	r2, [r4, #8]
   27704:	7bd3      	ldrb	r3, [r2, #15]
   27706:	3301      	adds	r3, #1
		update_cache(0);
   27708:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   2770a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   2770c:	f7ff fb76 	bl	26dfc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27710:	480c      	ldr	r0, [pc, #48]	; (27744 <k_sched_unlock+0xc8>)
   27712:	f7fd fbd9 	bl	24ec8 <z_spin_unlock_valid>
   27716:	b968      	cbnz	r0, 27734 <k_sched_unlock+0xb8>
   27718:	4a0b      	ldr	r2, [pc, #44]	; (27748 <k_sched_unlock+0xcc>)
   2771a:	4914      	ldr	r1, [pc, #80]	; (2776c <k_sched_unlock+0xf0>)
   2771c:	480c      	ldr	r0, [pc, #48]	; (27750 <k_sched_unlock+0xd4>)
   2771e:	23ac      	movs	r3, #172	; 0xac
   27720:	f004 ff3b 	bl	2c59a <printk>
   27724:	4907      	ldr	r1, [pc, #28]	; (27744 <k_sched_unlock+0xc8>)
   27726:	4812      	ldr	r0, [pc, #72]	; (27770 <k_sched_unlock+0xf4>)
   27728:	f004 ff37 	bl	2c59a <printk>
   2772c:	4806      	ldr	r0, [pc, #24]	; (27748 <k_sched_unlock+0xcc>)
   2772e:	21ac      	movs	r1, #172	; 0xac
   27730:	f005 f974 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   27734:	f385 8811 	msr	BASEPRI, r5
   27738:	f3bf 8f6f 	isb	sy
}
   2773c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   27740:	f008 be64 	b.w	3040c <z_reschedule_unlocked>
   27744:	20002f04 	.word	0x20002f04
   27748:	00032546 	.word	0x00032546
   2774c:	00032598 	.word	0x00032598
   27750:	00032486 	.word	0x00032486
   27754:	000325ad 	.word	0x000325ad
   27758:	20002040 	.word	0x20002040
   2775c:	00037d8f 	.word	0x00037d8f
   27760:	00037d0e 	.word	0x00037d0e
   27764:	00036e1f 	.word	0x00036e1f
   27768:	00037a24 	.word	0x00037a24
   2776c:	0003256c 	.word	0x0003256c
   27770:	00032583 	.word	0x00032583

00027774 <z_unpend1_no_timeout>:
{
   27774:	b538      	push	{r3, r4, r5, lr}
   27776:	4604      	mov	r4, r0
	__asm__ volatile(
   27778:	f04f 0340 	mov.w	r3, #64	; 0x40
   2777c:	f3ef 8511 	mrs	r5, BASEPRI
   27780:	f383 8812 	msr	BASEPRI_MAX, r3
   27784:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27788:	4819      	ldr	r0, [pc, #100]	; (277f0 <z_unpend1_no_timeout+0x7c>)
   2778a:	f7fd fb8f 	bl	24eac <z_spin_lock_valid>
   2778e:	b968      	cbnz	r0, 277ac <z_unpend1_no_timeout+0x38>
   27790:	4a18      	ldr	r2, [pc, #96]	; (277f4 <z_unpend1_no_timeout+0x80>)
   27792:	4919      	ldr	r1, [pc, #100]	; (277f8 <z_unpend1_no_timeout+0x84>)
   27794:	4819      	ldr	r0, [pc, #100]	; (277fc <z_unpend1_no_timeout+0x88>)
   27796:	2381      	movs	r3, #129	; 0x81
   27798:	f004 feff 	bl	2c59a <printk>
   2779c:	4914      	ldr	r1, [pc, #80]	; (277f0 <z_unpend1_no_timeout+0x7c>)
   2779e:	4818      	ldr	r0, [pc, #96]	; (27800 <z_unpend1_no_timeout+0x8c>)
   277a0:	f004 fefb 	bl	2c59a <printk>
   277a4:	4813      	ldr	r0, [pc, #76]	; (277f4 <z_unpend1_no_timeout+0x80>)
   277a6:	2181      	movs	r1, #129	; 0x81
   277a8:	f005 f938 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   277ac:	4810      	ldr	r0, [pc, #64]	; (277f0 <z_unpend1_no_timeout+0x7c>)
   277ae:	f7fd fb9b 	bl	24ee8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   277b2:	4620      	mov	r0, r4
   277b4:	f008 fe34 	bl	30420 <z_priq_dumb_best>
		if (thread != NULL) {
   277b8:	4604      	mov	r4, r0
   277ba:	b108      	cbz	r0, 277c0 <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   277bc:	f7ff fab0 	bl	26d20 <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   277c0:	480b      	ldr	r0, [pc, #44]	; (277f0 <z_unpend1_no_timeout+0x7c>)
   277c2:	f7fd fb81 	bl	24ec8 <z_spin_unlock_valid>
   277c6:	b968      	cbnz	r0, 277e4 <z_unpend1_no_timeout+0x70>
   277c8:	4a0a      	ldr	r2, [pc, #40]	; (277f4 <z_unpend1_no_timeout+0x80>)
   277ca:	490e      	ldr	r1, [pc, #56]	; (27804 <z_unpend1_no_timeout+0x90>)
   277cc:	480b      	ldr	r0, [pc, #44]	; (277fc <z_unpend1_no_timeout+0x88>)
   277ce:	23ac      	movs	r3, #172	; 0xac
   277d0:	f004 fee3 	bl	2c59a <printk>
   277d4:	4906      	ldr	r1, [pc, #24]	; (277f0 <z_unpend1_no_timeout+0x7c>)
   277d6:	480c      	ldr	r0, [pc, #48]	; (27808 <z_unpend1_no_timeout+0x94>)
   277d8:	f004 fedf 	bl	2c59a <printk>
   277dc:	4805      	ldr	r0, [pc, #20]	; (277f4 <z_unpend1_no_timeout+0x80>)
   277de:	21ac      	movs	r1, #172	; 0xac
   277e0:	f005 f91c 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   277e4:	f385 8811 	msr	BASEPRI, r5
   277e8:	f3bf 8f6f 	isb	sy
}
   277ec:	4620      	mov	r0, r4
   277ee:	bd38      	pop	{r3, r4, r5, pc}
   277f0:	20002f04 	.word	0x20002f04
   277f4:	00032546 	.word	0x00032546
   277f8:	00032598 	.word	0x00032598
   277fc:	00032486 	.word	0x00032486
   27800:	000325ad 	.word	0x000325ad
   27804:	0003256c 	.word	0x0003256c
   27808:	00032583 	.word	0x00032583

0002780c <z_unpend_first_thread>:
{
   2780c:	b538      	push	{r3, r4, r5, lr}
   2780e:	4604      	mov	r4, r0
	__asm__ volatile(
   27810:	f04f 0340 	mov.w	r3, #64	; 0x40
   27814:	f3ef 8511 	mrs	r5, BASEPRI
   27818:	f383 8812 	msr	BASEPRI_MAX, r3
   2781c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27820:	481b      	ldr	r0, [pc, #108]	; (27890 <z_unpend_first_thread+0x84>)
   27822:	f7fd fb43 	bl	24eac <z_spin_lock_valid>
   27826:	b968      	cbnz	r0, 27844 <z_unpend_first_thread+0x38>
   27828:	4a1a      	ldr	r2, [pc, #104]	; (27894 <z_unpend_first_thread+0x88>)
   2782a:	491b      	ldr	r1, [pc, #108]	; (27898 <z_unpend_first_thread+0x8c>)
   2782c:	481b      	ldr	r0, [pc, #108]	; (2789c <z_unpend_first_thread+0x90>)
   2782e:	2381      	movs	r3, #129	; 0x81
   27830:	f004 feb3 	bl	2c59a <printk>
   27834:	4916      	ldr	r1, [pc, #88]	; (27890 <z_unpend_first_thread+0x84>)
   27836:	481a      	ldr	r0, [pc, #104]	; (278a0 <z_unpend_first_thread+0x94>)
   27838:	f004 feaf 	bl	2c59a <printk>
   2783c:	4815      	ldr	r0, [pc, #84]	; (27894 <z_unpend_first_thread+0x88>)
   2783e:	2181      	movs	r1, #129	; 0x81
   27840:	f005 f8ec 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   27844:	4812      	ldr	r0, [pc, #72]	; (27890 <z_unpend_first_thread+0x84>)
   27846:	f7fd fb4f 	bl	24ee8 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   2784a:	4620      	mov	r0, r4
   2784c:	f008 fde8 	bl	30420 <z_priq_dumb_best>
		if (thread != NULL) {
   27850:	4604      	mov	r4, r0
   27852:	b128      	cbz	r0, 27860 <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   27854:	f7ff fa64 	bl	26d20 <unpend_thread_no_timeout>
   27858:	f104 0018 	add.w	r0, r4, #24
   2785c:	f000 fd2a 	bl	282b4 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27860:	480b      	ldr	r0, [pc, #44]	; (27890 <z_unpend_first_thread+0x84>)
   27862:	f7fd fb31 	bl	24ec8 <z_spin_unlock_valid>
   27866:	b968      	cbnz	r0, 27884 <z_unpend_first_thread+0x78>
   27868:	4a0a      	ldr	r2, [pc, #40]	; (27894 <z_unpend_first_thread+0x88>)
   2786a:	490e      	ldr	r1, [pc, #56]	; (278a4 <z_unpend_first_thread+0x98>)
   2786c:	480b      	ldr	r0, [pc, #44]	; (2789c <z_unpend_first_thread+0x90>)
   2786e:	23ac      	movs	r3, #172	; 0xac
   27870:	f004 fe93 	bl	2c59a <printk>
   27874:	4906      	ldr	r1, [pc, #24]	; (27890 <z_unpend_first_thread+0x84>)
   27876:	480c      	ldr	r0, [pc, #48]	; (278a8 <z_unpend_first_thread+0x9c>)
   27878:	f004 fe8f 	bl	2c59a <printk>
   2787c:	4805      	ldr	r0, [pc, #20]	; (27894 <z_unpend_first_thread+0x88>)
   2787e:	21ac      	movs	r1, #172	; 0xac
   27880:	f005 f8cc 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   27884:	f385 8811 	msr	BASEPRI, r5
   27888:	f3bf 8f6f 	isb	sy
}
   2788c:	4620      	mov	r0, r4
   2788e:	bd38      	pop	{r3, r4, r5, pc}
   27890:	20002f04 	.word	0x20002f04
   27894:	00032546 	.word	0x00032546
   27898:	00032598 	.word	0x00032598
   2789c:	00032486 	.word	0x00032486
   278a0:	000325ad 	.word	0x000325ad
   278a4:	0003256c 	.word	0x0003256c
   278a8:	00032583 	.word	0x00032583

000278ac <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   278ac:	4b04      	ldr	r3, [pc, #16]	; (278c0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   278ae:	2100      	movs	r1, #0
   278b0:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
   278b4:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
   278b8:	4608      	mov	r0, r1
   278ba:	f7ff b8a9 	b.w	26a10 <k_sched_time_slice_set>
   278be:	bf00      	nop
   278c0:	20002040 	.word	0x20002040

000278c4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   278c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   278c6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   278ca:	b173      	cbz	r3, 278ea <z_impl_k_yield+0x26>
   278cc:	4941      	ldr	r1, [pc, #260]	; (279d4 <z_impl_k_yield+0x110>)
   278ce:	4a42      	ldr	r2, [pc, #264]	; (279d8 <z_impl_k_yield+0x114>)
   278d0:	4842      	ldr	r0, [pc, #264]	; (279dc <z_impl_k_yield+0x118>)
   278d2:	f240 43dc 	movw	r3, #1244	; 0x4dc
   278d6:	f004 fe60 	bl	2c59a <printk>
   278da:	4841      	ldr	r0, [pc, #260]	; (279e0 <z_impl_k_yield+0x11c>)
   278dc:	f004 fe5d 	bl	2c59a <printk>
   278e0:	483d      	ldr	r0, [pc, #244]	; (279d8 <z_impl_k_yield+0x114>)
   278e2:	f240 41dc 	movw	r1, #1244	; 0x4dc
   278e6:	f005 f899 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   278ea:	f04f 0340 	mov.w	r3, #64	; 0x40
   278ee:	f3ef 8611 	mrs	r6, BASEPRI
   278f2:	f383 8812 	msr	BASEPRI_MAX, r3
   278f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   278fa:	483a      	ldr	r0, [pc, #232]	; (279e4 <z_impl_k_yield+0x120>)
   278fc:	f7fd fad6 	bl	24eac <z_spin_lock_valid>
   27900:	b968      	cbnz	r0, 2791e <z_impl_k_yield+0x5a>
   27902:	4a39      	ldr	r2, [pc, #228]	; (279e8 <z_impl_k_yield+0x124>)
   27904:	4939      	ldr	r1, [pc, #228]	; (279ec <z_impl_k_yield+0x128>)
   27906:	4835      	ldr	r0, [pc, #212]	; (279dc <z_impl_k_yield+0x118>)
   27908:	2381      	movs	r3, #129	; 0x81
   2790a:	f004 fe46 	bl	2c59a <printk>
   2790e:	4935      	ldr	r1, [pc, #212]	; (279e4 <z_impl_k_yield+0x120>)
   27910:	4837      	ldr	r0, [pc, #220]	; (279f0 <z_impl_k_yield+0x12c>)
   27912:	f004 fe42 	bl	2c59a <printk>
   27916:	4834      	ldr	r0, [pc, #208]	; (279e8 <z_impl_k_yield+0x124>)
   27918:	2181      	movs	r1, #129	; 0x81
   2791a:	f005 f87f 	bl	2ca1c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2791e:	4d35      	ldr	r5, [pc, #212]	; (279f4 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
   27920:	4830      	ldr	r0, [pc, #192]	; (279e4 <z_impl_k_yield+0x120>)
   27922:	f7fd fae1 	bl	24ee8 <z_spin_lock_set_owner>
   27926:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27928:	7b4b      	ldrb	r3, [r1, #13]
   2792a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2792e:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27930:	f105 0024 	add.w	r0, r5, #36	; 0x24
   27934:	f7ff f9d2 	bl	26cdc <z_priq_dumb_remove>
	}
	queue_thread(_current);
   27938:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   2793a:	7b63      	ldrb	r3, [r4, #13]
   2793c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   27940:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   27942:	4b2d      	ldr	r3, [pc, #180]	; (279f8 <z_impl_k_yield+0x134>)
   27944:	429c      	cmp	r4, r3
   27946:	d109      	bne.n	2795c <z_impl_k_yield+0x98>
   27948:	492c      	ldr	r1, [pc, #176]	; (279fc <z_impl_k_yield+0x138>)
   2794a:	4824      	ldr	r0, [pc, #144]	; (279dc <z_impl_k_yield+0x118>)
   2794c:	4a22      	ldr	r2, [pc, #136]	; (279d8 <z_impl_k_yield+0x114>)
   2794e:	23ba      	movs	r3, #186	; 0xba
   27950:	f004 fe23 	bl	2c59a <printk>
   27954:	4820      	ldr	r0, [pc, #128]	; (279d8 <z_impl_k_yield+0x114>)
   27956:	21ba      	movs	r1, #186	; 0xba
   27958:	f005 f860 	bl	2ca1c <assert_post_action>
	return list->head == list;
   2795c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2795e:	4828      	ldr	r0, [pc, #160]	; (27a00 <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27960:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27962:	4283      	cmp	r3, r0
   27964:	bf08      	it	eq
   27966:	2300      	moveq	r3, #0
   27968:	2b00      	cmp	r3, #0
   2796a:	bf38      	it	cc
   2796c:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2796e:	b35b      	cbz	r3, 279c8 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
   27970:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   27974:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   27978:	4297      	cmp	r7, r2
   2797a:	d021      	beq.n	279c0 <z_impl_k_yield+0xfc>
		return b2 - b1;
   2797c:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   2797e:	2a00      	cmp	r2, #0
   27980:	dd1e      	ble.n	279c0 <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
   27982:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27984:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   27988:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   2798a:	605c      	str	r4, [r3, #4]
	update_cache(1);
   2798c:	2001      	movs	r0, #1
   2798e:	f7ff fa35 	bl	26dfc <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27992:	4814      	ldr	r0, [pc, #80]	; (279e4 <z_impl_k_yield+0x120>)
   27994:	f7fd fa98 	bl	24ec8 <z_spin_unlock_valid>
   27998:	b968      	cbnz	r0, 279b6 <z_impl_k_yield+0xf2>
   2799a:	4a13      	ldr	r2, [pc, #76]	; (279e8 <z_impl_k_yield+0x124>)
   2799c:	4919      	ldr	r1, [pc, #100]	; (27a04 <z_impl_k_yield+0x140>)
   2799e:	480f      	ldr	r0, [pc, #60]	; (279dc <z_impl_k_yield+0x118>)
   279a0:	23c3      	movs	r3, #195	; 0xc3
   279a2:	f004 fdfa 	bl	2c59a <printk>
   279a6:	490f      	ldr	r1, [pc, #60]	; (279e4 <z_impl_k_yield+0x120>)
   279a8:	4817      	ldr	r0, [pc, #92]	; (27a08 <z_impl_k_yield+0x144>)
   279aa:	f004 fdf6 	bl	2c59a <printk>
   279ae:	480e      	ldr	r0, [pc, #56]	; (279e8 <z_impl_k_yield+0x124>)
   279b0:	21c3      	movs	r1, #195	; 0xc3
   279b2:	f005 f833 	bl	2ca1c <assert_post_action>
   279b6:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   279b8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   279bc:	f7ef bb7c 	b.w	170b8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   279c0:	428b      	cmp	r3, r1
   279c2:	d001      	beq.n	279c8 <z_impl_k_yield+0x104>
   279c4:	681b      	ldr	r3, [r3, #0]
   279c6:	e7d2      	b.n	2796e <z_impl_k_yield+0xaa>
	node->prev = tail;
   279c8:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   279cc:	600c      	str	r4, [r1, #0]
	list->tail = node;
   279ce:	62ac      	str	r4, [r5, #40]	; 0x28
}
   279d0:	e7dc      	b.n	2798c <z_impl_k_yield+0xc8>
   279d2:	bf00      	nop
   279d4:	00037a24 	.word	0x00037a24
   279d8:	00037d0e 	.word	0x00037d0e
   279dc:	00032486 	.word	0x00032486
   279e0:	00036e1f 	.word	0x00036e1f
   279e4:	20002f04 	.word	0x20002f04
   279e8:	00032546 	.word	0x00032546
   279ec:	00032598 	.word	0x00032598
   279f0:	000325ad 	.word	0x000325ad
   279f4:	20002040 	.word	0x20002040
   279f8:	20002080 	.word	0x20002080
   279fc:	00037d30 	.word	0x00037d30
   27a00:	20002064 	.word	0x20002064
   27a04:	0003256c 	.word	0x0003256c
   27a08:	00032583 	.word	0x00032583

00027a0c <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   27a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27a10:	4604      	mov	r4, r0
   27a12:	460d      	mov	r5, r1
   27a14:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   27a18:	b173      	cbz	r3, 27a38 <z_tick_sleep+0x2c>
   27a1a:	4945      	ldr	r1, [pc, #276]	; (27b30 <z_tick_sleep+0x124>)
   27a1c:	4a45      	ldr	r2, [pc, #276]	; (27b34 <z_tick_sleep+0x128>)
   27a1e:	4846      	ldr	r0, [pc, #280]	; (27b38 <z_tick_sleep+0x12c>)
   27a20:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
   27a24:	f004 fdb9 	bl	2c59a <printk>
   27a28:	4844      	ldr	r0, [pc, #272]	; (27b3c <z_tick_sleep+0x130>)
   27a2a:	f004 fdb6 	bl	2c59a <printk>
   27a2e:	4841      	ldr	r0, [pc, #260]	; (27b34 <z_tick_sleep+0x128>)
   27a30:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   27a34:	f004 fff2 	bl	2ca1c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   27a38:	ea54 0305 	orrs.w	r3, r4, r5
   27a3c:	d104      	bne.n	27a48 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   27a3e:	f7ff ff41 	bl	278c4 <z_impl_k_yield>
		k_yield();
		return 0;
   27a42:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   27a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   27a48:	f06f 0301 	mvn.w	r3, #1
   27a4c:	1b1e      	subs	r6, r3, r4
   27a4e:	f04f 33ff 	mov.w	r3, #4294967295
   27a52:	eb63 0705 	sbc.w	r7, r3, r5
   27a56:	2e01      	cmp	r6, #1
   27a58:	f177 0300 	sbcs.w	r3, r7, #0
   27a5c:	da64      	bge.n	27b28 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   27a5e:	f008 fcf9 	bl	30454 <sys_clock_tick_get_32>
   27a62:	1906      	adds	r6, r0, r4
   27a64:	f04f 0340 	mov.w	r3, #64	; 0x40
   27a68:	f3ef 8811 	mrs	r8, BASEPRI
   27a6c:	f383 8812 	msr	BASEPRI_MAX, r3
   27a70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27a74:	4832      	ldr	r0, [pc, #200]	; (27b40 <z_tick_sleep+0x134>)
   27a76:	f7fd fa19 	bl	24eac <z_spin_lock_valid>
   27a7a:	b968      	cbnz	r0, 27a98 <z_tick_sleep+0x8c>
   27a7c:	4a31      	ldr	r2, [pc, #196]	; (27b44 <z_tick_sleep+0x138>)
   27a7e:	4932      	ldr	r1, [pc, #200]	; (27b48 <z_tick_sleep+0x13c>)
   27a80:	482d      	ldr	r0, [pc, #180]	; (27b38 <z_tick_sleep+0x12c>)
   27a82:	2381      	movs	r3, #129	; 0x81
   27a84:	f004 fd89 	bl	2c59a <printk>
   27a88:	492d      	ldr	r1, [pc, #180]	; (27b40 <z_tick_sleep+0x134>)
   27a8a:	4830      	ldr	r0, [pc, #192]	; (27b4c <z_tick_sleep+0x140>)
   27a8c:	f004 fd85 	bl	2c59a <printk>
   27a90:	482c      	ldr	r0, [pc, #176]	; (27b44 <z_tick_sleep+0x138>)
   27a92:	2181      	movs	r1, #129	; 0x81
   27a94:	f004 ffc2 	bl	2ca1c <assert_post_action>
	pending_current = _current;
   27a98:	4f2d      	ldr	r7, [pc, #180]	; (27b50 <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   27a9a:	4829      	ldr	r0, [pc, #164]	; (27b40 <z_tick_sleep+0x134>)
   27a9c:	f7fd fa24 	bl	24ee8 <z_spin_lock_set_owner>
   27aa0:	4b2c      	ldr	r3, [pc, #176]	; (27b54 <z_tick_sleep+0x148>)
   27aa2:	68b8      	ldr	r0, [r7, #8]
   27aa4:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   27aa6:	f7ff fbf7 	bl	27298 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   27aaa:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   27aac:	492a      	ldr	r1, [pc, #168]	; (27b58 <z_tick_sleep+0x14c>)
   27aae:	4622      	mov	r2, r4
   27ab0:	462b      	mov	r3, r5
   27ab2:	3018      	adds	r0, #24
   27ab4:	f000 fb2a 	bl	2810c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   27ab8:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27aba:	4821      	ldr	r0, [pc, #132]	; (27b40 <z_tick_sleep+0x134>)
   27abc:	7b53      	ldrb	r3, [r2, #13]
   27abe:	f043 0310 	orr.w	r3, r3, #16
   27ac2:	7353      	strb	r3, [r2, #13]
   27ac4:	f7fd fa00 	bl	24ec8 <z_spin_unlock_valid>
   27ac8:	b968      	cbnz	r0, 27ae6 <z_tick_sleep+0xda>
   27aca:	4a1e      	ldr	r2, [pc, #120]	; (27b44 <z_tick_sleep+0x138>)
   27acc:	4923      	ldr	r1, [pc, #140]	; (27b5c <z_tick_sleep+0x150>)
   27ace:	481a      	ldr	r0, [pc, #104]	; (27b38 <z_tick_sleep+0x12c>)
   27ad0:	23c3      	movs	r3, #195	; 0xc3
   27ad2:	f004 fd62 	bl	2c59a <printk>
   27ad6:	491a      	ldr	r1, [pc, #104]	; (27b40 <z_tick_sleep+0x134>)
   27ad8:	4821      	ldr	r0, [pc, #132]	; (27b60 <z_tick_sleep+0x154>)
   27ada:	f004 fd5e 	bl	2c59a <printk>
   27ade:	4819      	ldr	r0, [pc, #100]	; (27b44 <z_tick_sleep+0x138>)
   27ae0:	21c3      	movs	r1, #195	; 0xc3
   27ae2:	f004 ff9b 	bl	2ca1c <assert_post_action>
   27ae6:	4640      	mov	r0, r8
   27ae8:	f7ef fae6 	bl	170b8 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   27aec:	68bb      	ldr	r3, [r7, #8]
   27aee:	7b5b      	ldrb	r3, [r3, #13]
   27af0:	06db      	lsls	r3, r3, #27
   27af2:	d50e      	bpl.n	27b12 <z_tick_sleep+0x106>
   27af4:	491b      	ldr	r1, [pc, #108]	; (27b64 <z_tick_sleep+0x158>)
   27af6:	4a0f      	ldr	r2, [pc, #60]	; (27b34 <z_tick_sleep+0x128>)
   27af8:	480f      	ldr	r0, [pc, #60]	; (27b38 <z_tick_sleep+0x12c>)
   27afa:	f240 5319 	movw	r3, #1305	; 0x519
   27afe:	f004 fd4c 	bl	2c59a <printk>
   27b02:	480e      	ldr	r0, [pc, #56]	; (27b3c <z_tick_sleep+0x130>)
   27b04:	f004 fd49 	bl	2c59a <printk>
   27b08:	480a      	ldr	r0, [pc, #40]	; (27b34 <z_tick_sleep+0x128>)
   27b0a:	f240 5119 	movw	r1, #1305	; 0x519
   27b0e:	f004 ff85 	bl	2ca1c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   27b12:	f008 fc9f 	bl	30454 <sys_clock_tick_get_32>
   27b16:	1a30      	subs	r0, r6, r0
   27b18:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   27b1c:	2801      	cmp	r0, #1
   27b1e:	f171 0300 	sbcs.w	r3, r1, #0
   27b22:	bfb8      	it	lt
   27b24:	2000      	movlt	r0, #0
   27b26:	e78d      	b.n	27a44 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   27b28:	f06f 0601 	mvn.w	r6, #1
   27b2c:	1b36      	subs	r6, r6, r4
   27b2e:	e799      	b.n	27a64 <z_tick_sleep+0x58>
   27b30:	00037a24 	.word	0x00037a24
   27b34:	00037d0e 	.word	0x00037d0e
   27b38:	00032486 	.word	0x00032486
   27b3c:	00036e1f 	.word	0x00036e1f
   27b40:	20002f04 	.word	0x20002f04
   27b44:	00032546 	.word	0x00032546
   27b48:	00032598 	.word	0x00032598
   27b4c:	000325ad 	.word	0x000325ad
   27b50:	20002040 	.word	0x20002040
   27b54:	20002f00 	.word	0x20002f00
   27b58:	000271e5 	.word	0x000271e5
   27b5c:	0003256c 	.word	0x0003256c
   27b60:	00032583 	.word	0x00032583
   27b64:	00037dc0 	.word	0x00037dc0

00027b68 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   27b68:	b538      	push	{r3, r4, r5, lr}
   27b6a:	4604      	mov	r4, r0
   27b6c:	460d      	mov	r5, r1
   27b6e:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   27b72:	b173      	cbz	r3, 27b92 <z_impl_k_sleep+0x2a>
   27b74:	4913      	ldr	r1, [pc, #76]	; (27bc4 <z_impl_k_sleep+0x5c>)
   27b76:	4a14      	ldr	r2, [pc, #80]	; (27bc8 <z_impl_k_sleep+0x60>)
   27b78:	4814      	ldr	r0, [pc, #80]	; (27bcc <z_impl_k_sleep+0x64>)
   27b7a:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   27b7e:	f004 fd0c 	bl	2c59a <printk>
   27b82:	4813      	ldr	r0, [pc, #76]	; (27bd0 <z_impl_k_sleep+0x68>)
   27b84:	f004 fd09 	bl	2c59a <printk>
   27b88:	480f      	ldr	r0, [pc, #60]	; (27bc8 <z_impl_k_sleep+0x60>)
   27b8a:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   27b8e:	f004 ff45 	bl	2ca1c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27b92:	1c6b      	adds	r3, r5, #1
   27b94:	bf08      	it	eq
   27b96:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   27b9a:	d106      	bne.n	27baa <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   27b9c:	4b0d      	ldr	r3, [pc, #52]	; (27bd4 <z_impl_k_sleep+0x6c>)
   27b9e:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   27ba0:	f7ff fd02 	bl	275a8 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   27ba4:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   27ba8:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   27baa:	4620      	mov	r0, r4
   27bac:	4629      	mov	r1, r5
   27bae:	f7ff ff2d 	bl	27a0c <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   27bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   27bb6:	fb80 3403 	smull	r3, r4, r0, r3
   27bba:	0bd8      	lsrs	r0, r3, #15
   27bbc:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   27bc0:	e7f2      	b.n	27ba8 <z_impl_k_sleep+0x40>
   27bc2:	bf00      	nop
   27bc4:	00037a24 	.word	0x00037a24
   27bc8:	00037d0e 	.word	0x00037d0e
   27bcc:	00032486 	.word	0x00032486
   27bd0:	00036e1f 	.word	0x00036e1f
   27bd4:	20002040 	.word	0x20002040

00027bd8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   27bd8:	4b01      	ldr	r3, [pc, #4]	; (27be0 <z_impl_z_current_get+0x8>)
   27bda:	6898      	ldr	r0, [r3, #8]
   27bdc:	4770      	bx	lr
   27bde:	bf00      	nop
   27be0:	20002040 	.word	0x20002040

00027be4 <z_impl_k_is_preempt_thread>:
   27be4:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   27be8:	b93b      	cbnz	r3, 27bfa <z_impl_k_is_preempt_thread+0x16>
   27bea:	4b05      	ldr	r3, [pc, #20]	; (27c00 <z_impl_k_is_preempt_thread+0x1c>)
   27bec:	689b      	ldr	r3, [r3, #8]
   27bee:	89d8      	ldrh	r0, [r3, #14]
   27bf0:	287f      	cmp	r0, #127	; 0x7f
   27bf2:	bf8c      	ite	hi
   27bf4:	2000      	movhi	r0, #0
   27bf6:	2001      	movls	r0, #1
   27bf8:	4770      	bx	lr
   27bfa:	2000      	movs	r0, #0
}
   27bfc:	4770      	bx	lr
   27bfe:	bf00      	nop
   27c00:	20002040 	.word	0x20002040

00027c04 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   27c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   27c08:	4604      	mov	r4, r0
   27c0a:	f04f 0340 	mov.w	r3, #64	; 0x40
   27c0e:	f3ef 8611 	mrs	r6, BASEPRI
   27c12:	f383 8812 	msr	BASEPRI_MAX, r3
   27c16:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27c1a:	4849      	ldr	r0, [pc, #292]	; (27d40 <z_thread_abort+0x13c>)
   27c1c:	f7fd f946 	bl	24eac <z_spin_lock_valid>
   27c20:	b968      	cbnz	r0, 27c3e <z_thread_abort+0x3a>
   27c22:	4a48      	ldr	r2, [pc, #288]	; (27d44 <z_thread_abort+0x140>)
   27c24:	4948      	ldr	r1, [pc, #288]	; (27d48 <z_thread_abort+0x144>)
   27c26:	4849      	ldr	r0, [pc, #292]	; (27d4c <z_thread_abort+0x148>)
   27c28:	2381      	movs	r3, #129	; 0x81
   27c2a:	f004 fcb6 	bl	2c59a <printk>
   27c2e:	4944      	ldr	r1, [pc, #272]	; (27d40 <z_thread_abort+0x13c>)
   27c30:	4847      	ldr	r0, [pc, #284]	; (27d50 <z_thread_abort+0x14c>)
   27c32:	f004 fcb2 	bl	2c59a <printk>
   27c36:	4843      	ldr	r0, [pc, #268]	; (27d44 <z_thread_abort+0x140>)
   27c38:	2181      	movs	r1, #129	; 0x81
   27c3a:	f004 feef 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   27c3e:	4840      	ldr	r0, [pc, #256]	; (27d40 <z_thread_abort+0x13c>)
   27c40:	f7fd f952 	bl	24ee8 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   27c44:	7b63      	ldrb	r3, [r4, #13]
   27c46:	071a      	lsls	r2, r3, #28
   27c48:	d517      	bpl.n	27c7a <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27c4a:	483d      	ldr	r0, [pc, #244]	; (27d40 <z_thread_abort+0x13c>)
   27c4c:	f7fd f93c 	bl	24ec8 <z_spin_unlock_valid>
   27c50:	b968      	cbnz	r0, 27c6e <z_thread_abort+0x6a>
   27c52:	4a3c      	ldr	r2, [pc, #240]	; (27d44 <z_thread_abort+0x140>)
   27c54:	493f      	ldr	r1, [pc, #252]	; (27d54 <z_thread_abort+0x150>)
   27c56:	483d      	ldr	r0, [pc, #244]	; (27d4c <z_thread_abort+0x148>)
   27c58:	23ac      	movs	r3, #172	; 0xac
   27c5a:	f004 fc9e 	bl	2c59a <printk>
   27c5e:	4938      	ldr	r1, [pc, #224]	; (27d40 <z_thread_abort+0x13c>)
   27c60:	483d      	ldr	r0, [pc, #244]	; (27d58 <z_thread_abort+0x154>)
   27c62:	f004 fc9a 	bl	2c59a <printk>
   27c66:	4837      	ldr	r0, [pc, #220]	; (27d44 <z_thread_abort+0x140>)
   27c68:	21ac      	movs	r1, #172	; 0xac
   27c6a:	f004 fed7 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   27c6e:	f386 8811 	msr	BASEPRI, r6
   27c72:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   27c76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   27c7a:	f023 0220 	bic.w	r2, r3, #32
   27c7e:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   27c82:	09d2      	lsrs	r2, r2, #7
   27c84:	d145      	bne.n	27d12 <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   27c86:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   27c88:	68a3      	ldr	r3, [r4, #8]
   27c8a:	b113      	cbz	r3, 27c92 <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   27c8c:	4620      	mov	r0, r4
   27c8e:	f7ff f847 	bl	26d20 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   27c92:	f104 0018 	add.w	r0, r4, #24
   27c96:	f000 fb0d 	bl	282b4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   27c9a:	f104 0760 	add.w	r7, r4, #96	; 0x60
   27c9e:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   27ca2:	6e25      	ldr	r5, [r4, #96]	; 0x60
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27ca4:	42bd      	cmp	r5, r7
   27ca6:	d001      	beq.n	27cac <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   27ca8:	2d00      	cmp	r5, #0
   27caa:	d13c      	bne.n	27d26 <z_thread_abort+0x122>
		update_cache(1);
   27cac:	2001      	movs	r0, #1
   27cae:	f7ff f8a5 	bl	26dfc <update_cache>
		z_thread_monitor_exit(thread);
   27cb2:	4620      	mov	r0, r4
   27cb4:	f7fd f984 	bl	24fc0 <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
   27cb8:	4b28      	ldr	r3, [pc, #160]	; (27d5c <z_thread_abort+0x158>)
   27cba:	689b      	ldr	r3, [r3, #8]
   27cbc:	42a3      	cmp	r3, r4
   27cbe:	d1c4      	bne.n	27c4a <z_thread_abort+0x46>
   27cc0:	f3ef 8305 	mrs	r3, IPSR
   27cc4:	2b00      	cmp	r3, #0
   27cc6:	d1c0      	bne.n	27c4a <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27cc8:	481d      	ldr	r0, [pc, #116]	; (27d40 <z_thread_abort+0x13c>)
   27cca:	f7fd f8fd 	bl	24ec8 <z_spin_unlock_valid>
   27cce:	b968      	cbnz	r0, 27cec <z_thread_abort+0xe8>
   27cd0:	4a1c      	ldr	r2, [pc, #112]	; (27d44 <z_thread_abort+0x140>)
   27cd2:	4920      	ldr	r1, [pc, #128]	; (27d54 <z_thread_abort+0x150>)
   27cd4:	481d      	ldr	r0, [pc, #116]	; (27d4c <z_thread_abort+0x148>)
   27cd6:	23c3      	movs	r3, #195	; 0xc3
   27cd8:	f004 fc5f 	bl	2c59a <printk>
   27cdc:	4918      	ldr	r1, [pc, #96]	; (27d40 <z_thread_abort+0x13c>)
   27cde:	481e      	ldr	r0, [pc, #120]	; (27d58 <z_thread_abort+0x154>)
   27ce0:	f004 fc5b 	bl	2c59a <printk>
   27ce4:	4817      	ldr	r0, [pc, #92]	; (27d44 <z_thread_abort+0x140>)
   27ce6:	21c3      	movs	r1, #195	; 0xc3
   27ce8:	f004 fe98 	bl	2ca1c <assert_post_action>
   27cec:	4630      	mov	r0, r6
   27cee:	f7ef f9e3 	bl	170b8 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   27cf2:	4a1b      	ldr	r2, [pc, #108]	; (27d60 <z_thread_abort+0x15c>)
   27cf4:	491b      	ldr	r1, [pc, #108]	; (27d64 <z_thread_abort+0x160>)
   27cf6:	4815      	ldr	r0, [pc, #84]	; (27d4c <z_thread_abort+0x148>)
   27cf8:	f240 634b 	movw	r3, #1611	; 0x64b
   27cfc:	f004 fc4d 	bl	2c59a <printk>
   27d00:	4819      	ldr	r0, [pc, #100]	; (27d68 <z_thread_abort+0x164>)
   27d02:	f004 fc4a 	bl	2c59a <printk>
   27d06:	4816      	ldr	r0, [pc, #88]	; (27d60 <z_thread_abort+0x15c>)
   27d08:	f240 614b 	movw	r1, #1611	; 0x64b
   27d0c:	f004 fe86 	bl	2ca1c <assert_post_action>
   27d10:	e79b      	b.n	27c4a <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27d12:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   27d16:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   27d1a:	4814      	ldr	r0, [pc, #80]	; (27d6c <z_thread_abort+0x168>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   27d1c:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   27d1e:	4621      	mov	r1, r4
   27d20:	f7fe ffdc 	bl	26cdc <z_priq_dumb_remove>
}
   27d24:	e7b0      	b.n	27c88 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   27d26:	4628      	mov	r0, r5
   27d28:	f7fe fffa 	bl	26d20 <unpend_thread_no_timeout>
   27d2c:	f105 0018 	add.w	r0, r5, #24
   27d30:	f000 fac0 	bl	282b4 <z_abort_timeout>
   27d34:	f8c5 80b8 	str.w	r8, [r5, #184]	; 0xb8
		ready_thread(thread);
   27d38:	4628      	mov	r0, r5
   27d3a:	f7ff f965 	bl	27008 <ready_thread>
   27d3e:	e7b0      	b.n	27ca2 <z_thread_abort+0x9e>
   27d40:	20002f04 	.word	0x20002f04
   27d44:	00032546 	.word	0x00032546
   27d48:	00032598 	.word	0x00032598
   27d4c:	00032486 	.word	0x00032486
   27d50:	000325ad 	.word	0x000325ad
   27d54:	0003256c 	.word	0x0003256c
   27d58:	00032583 	.word	0x00032583
   27d5c:	20002040 	.word	0x20002040
   27d60:	00037d0e 	.word	0x00037d0e
   27d64:	000380f0 	.word	0x000380f0
   27d68:	00037e00 	.word	0x00037e00
   27d6c:	20002064 	.word	0x20002064

00027d70 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   27d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27d72:	4604      	mov	r4, r0
   27d74:	460e      	mov	r6, r1
   27d76:	4615      	mov	r5, r2
	__asm__ volatile(
   27d78:	f04f 0340 	mov.w	r3, #64	; 0x40
   27d7c:	f3ef 8711 	mrs	r7, BASEPRI
   27d80:	f383 8812 	msr	BASEPRI_MAX, r3
   27d84:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27d88:	481f      	ldr	r0, [pc, #124]	; (27e08 <z_sched_wake+0x98>)
   27d8a:	f7fd f88f 	bl	24eac <z_spin_lock_valid>
   27d8e:	b968      	cbnz	r0, 27dac <z_sched_wake+0x3c>
   27d90:	4a1e      	ldr	r2, [pc, #120]	; (27e0c <z_sched_wake+0x9c>)
   27d92:	491f      	ldr	r1, [pc, #124]	; (27e10 <z_sched_wake+0xa0>)
   27d94:	481f      	ldr	r0, [pc, #124]	; (27e14 <z_sched_wake+0xa4>)
   27d96:	2381      	movs	r3, #129	; 0x81
   27d98:	f004 fbff 	bl	2c59a <printk>
   27d9c:	491a      	ldr	r1, [pc, #104]	; (27e08 <z_sched_wake+0x98>)
   27d9e:	481e      	ldr	r0, [pc, #120]	; (27e18 <z_sched_wake+0xa8>)
   27da0:	f004 fbfb 	bl	2c59a <printk>
   27da4:	4819      	ldr	r0, [pc, #100]	; (27e0c <z_sched_wake+0x9c>)
   27da6:	2181      	movs	r1, #129	; 0x81
   27da8:	f004 fe38 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   27dac:	4816      	ldr	r0, [pc, #88]	; (27e08 <z_sched_wake+0x98>)
   27dae:	f7fd f89b 	bl	24ee8 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   27db2:	4620      	mov	r0, r4
   27db4:	f008 fb34 	bl	30420 <z_priq_dumb_best>

		if (thread != NULL) {
   27db8:	4604      	mov	r4, r0
   27dba:	b160      	cbz	r0, 27dd6 <z_sched_wake+0x66>
   27dbc:	f8c0 60b8 	str.w	r6, [r0, #184]	; 0xb8
   27dc0:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   27dc2:	f7fe ffad 	bl	26d20 <unpend_thread_no_timeout>
   27dc6:	f104 0018 	add.w	r0, r4, #24
   27dca:	f000 fa73 	bl	282b4 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   27dce:	4620      	mov	r0, r4
   27dd0:	f7ff f91a 	bl	27008 <ready_thread>
			ret = true;
   27dd4:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27dd6:	480c      	ldr	r0, [pc, #48]	; (27e08 <z_sched_wake+0x98>)
   27dd8:	f7fd f876 	bl	24ec8 <z_spin_unlock_valid>
   27ddc:	b968      	cbnz	r0, 27dfa <z_sched_wake+0x8a>
   27dde:	4a0b      	ldr	r2, [pc, #44]	; (27e0c <z_sched_wake+0x9c>)
   27de0:	490e      	ldr	r1, [pc, #56]	; (27e1c <z_sched_wake+0xac>)
   27de2:	480c      	ldr	r0, [pc, #48]	; (27e14 <z_sched_wake+0xa4>)
   27de4:	23ac      	movs	r3, #172	; 0xac
   27de6:	f004 fbd8 	bl	2c59a <printk>
   27dea:	4907      	ldr	r1, [pc, #28]	; (27e08 <z_sched_wake+0x98>)
   27dec:	480c      	ldr	r0, [pc, #48]	; (27e20 <z_sched_wake+0xb0>)
   27dee:	f004 fbd4 	bl	2c59a <printk>
   27df2:	4806      	ldr	r0, [pc, #24]	; (27e0c <z_sched_wake+0x9c>)
   27df4:	21ac      	movs	r1, #172	; 0xac
   27df6:	f004 fe11 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   27dfa:	f387 8811 	msr	BASEPRI, r7
   27dfe:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   27e02:	4620      	mov	r0, r4
   27e04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27e06:	bf00      	nop
   27e08:	20002f04 	.word	0x20002f04
   27e0c:	00032546 	.word	0x00032546
   27e10:	00032598 	.word	0x00032598
   27e14:	00032486 	.word	0x00032486
   27e18:	000325ad 	.word	0x000325ad
   27e1c:	0003256c 	.word	0x0003256c
   27e20:	00032583 	.word	0x00032583

00027e24 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   27e24:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27e26:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   27e2a:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   27e2c:	e9cd 6700 	strd	r6, r7, [sp]
   27e30:	f7ff faee 	bl	27410 <z_pend_curr>

	if (data != NULL) {
   27e34:	b11c      	cbz	r4, 27e3e <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   27e36:	4b03      	ldr	r3, [pc, #12]	; (27e44 <z_sched_wait+0x20>)
   27e38:	689b      	ldr	r3, [r3, #8]
   27e3a:	695b      	ldr	r3, [r3, #20]
   27e3c:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   27e3e:	b002      	add	sp, #8
   27e40:	bdd0      	pop	{r4, r6, r7, pc}
   27e42:	bf00      	nop
   27e44:	20002040 	.word	0x20002040

00027e48 <z_sched_usage_start>:
	/* Edge case: we use a zero as a null ("stop() already called") */
	return (now == 0) ? 1 : now;
}

void z_sched_usage_start(struct k_thread *thread)
{
   27e48:	b508      	push	{r3, lr}
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	return board_timing_counter_get();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	return soc_timing_counter_get();
#else
	return arch_timing_counter_get();
   27e4a:	f7ef fe57 	bl	17afc <arch_timing_counter_get>
	/* One write through a volatile pointer doesn't require
	 * synchronization as long as _usage() treats it as volatile
	 * (we can't race with _stop() by design).
	 */
	_current_cpu->usage0 = usage_now();
   27e4e:	4b03      	ldr	r3, [pc, #12]	; (27e5c <z_sched_usage_start+0x14>)
   27e50:	2801      	cmp	r0, #1
   27e52:	bf38      	it	cc
   27e54:	2001      	movcc	r0, #1
   27e56:	6198      	str	r0, [r3, #24]
}
   27e58:	bd08      	pop	{r3, pc}
   27e5a:	bf00      	nop
   27e5c:	20002040 	.word	0x20002040

00027e60 <z_sched_usage_stop>:

void z_sched_usage_stop(void)
{
   27e60:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   27e62:	f04f 0340 	mov.w	r3, #64	; 0x40
   27e66:	f3ef 8511 	mrs	r5, BASEPRI
   27e6a:	f383 8812 	msr	BASEPRI_MAX, r3
   27e6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27e72:	482a      	ldr	r0, [pc, #168]	; (27f1c <z_sched_usage_stop+0xbc>)
   27e74:	f7fd f81a 	bl	24eac <z_spin_lock_valid>
   27e78:	b968      	cbnz	r0, 27e96 <z_sched_usage_stop+0x36>
   27e7a:	4a29      	ldr	r2, [pc, #164]	; (27f20 <z_sched_usage_stop+0xc0>)
   27e7c:	4929      	ldr	r1, [pc, #164]	; (27f24 <z_sched_usage_stop+0xc4>)
   27e7e:	482a      	ldr	r0, [pc, #168]	; (27f28 <z_sched_usage_stop+0xc8>)
   27e80:	2381      	movs	r3, #129	; 0x81
   27e82:	f004 fb8a 	bl	2c59a <printk>
   27e86:	4925      	ldr	r1, [pc, #148]	; (27f1c <z_sched_usage_stop+0xbc>)
   27e88:	4828      	ldr	r0, [pc, #160]	; (27f2c <z_sched_usage_stop+0xcc>)
   27e8a:	f004 fb86 	bl	2c59a <printk>
   27e8e:	4824      	ldr	r0, [pc, #144]	; (27f20 <z_sched_usage_stop+0xc0>)
   27e90:	2181      	movs	r1, #129	; 0x81
   27e92:	f004 fdc3 	bl	2ca1c <assert_post_action>
	k_spinlock_key_t k = k_spin_lock(&usage_lock);
	uint32_t u0 = _current_cpu->usage0;
   27e96:	4c26      	ldr	r4, [pc, #152]	; (27f30 <z_sched_usage_stop+0xd0>)
	z_spin_lock_set_owner(l);
   27e98:	4820      	ldr	r0, [pc, #128]	; (27f1c <z_sched_usage_stop+0xbc>)
   27e9a:	f7fd f825 	bl	24ee8 <z_spin_lock_set_owner>
   27e9e:	69a6      	ldr	r6, [r4, #24]

	if (u0 != 0) {
   27ea0:	b1de      	cbz	r6, 27eda <z_sched_usage_stop+0x7a>
   27ea2:	f7ef fe2b 	bl	17afc <arch_timing_counter_get>
		uint32_t dt = usage_now() - u0;

#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
		if (z_is_idle_thread_object(_current)) {
   27ea6:	68a2      	ldr	r2, [r4, #8]
   27ea8:	4b22      	ldr	r3, [pc, #136]	; (27f34 <z_sched_usage_stop+0xd4>)
		uint32_t dt = usage_now() - u0;
   27eaa:	2801      	cmp	r0, #1
   27eac:	bf2c      	ite	cs
   27eae:	ebc6 0000 	rsbcs	r0, r6, r0
   27eb2:	f1c6 0001 	rsbcc	r0, r6, #1
		if (z_is_idle_thread_object(_current)) {
   27eb6:	429a      	cmp	r2, r3
   27eb8:	f04f 0600 	mov.w	r6, #0
   27ebc:	d126      	bne.n	27f0c <z_sched_usage_stop+0xac>
			_kernel.idle_thread_usage += dt;
   27ebe:	e9d4 310e 	ldrd	r3, r1, [r4, #56]	; 0x38
   27ec2:	181b      	adds	r3, r3, r0
   27ec4:	eb46 0101 	adc.w	r1, r6, r1
   27ec8:	e9c4 310e 	strd	r3, r1, [r4, #56]	; 0x38
		} else {
			_kernel.all_thread_usage += dt;
		}
#endif
		_current->base.usage += dt;
   27ecc:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
   27ed0:	1818      	adds	r0, r3, r0
   27ed2:	eb46 0101 	adc.w	r1, r6, r1
   27ed6:	e9c2 010c 	strd	r0, r1, [r2, #48]	; 0x30
	}

	_current_cpu->usage0 = 0;
   27eda:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27edc:	480f      	ldr	r0, [pc, #60]	; (27f1c <z_sched_usage_stop+0xbc>)
   27ede:	61a3      	str	r3, [r4, #24]
   27ee0:	f7fc fff2 	bl	24ec8 <z_spin_unlock_valid>
   27ee4:	b968      	cbnz	r0, 27f02 <z_sched_usage_stop+0xa2>
   27ee6:	4a0e      	ldr	r2, [pc, #56]	; (27f20 <z_sched_usage_stop+0xc0>)
   27ee8:	4913      	ldr	r1, [pc, #76]	; (27f38 <z_sched_usage_stop+0xd8>)
   27eea:	480f      	ldr	r0, [pc, #60]	; (27f28 <z_sched_usage_stop+0xc8>)
   27eec:	23ac      	movs	r3, #172	; 0xac
   27eee:	f004 fb54 	bl	2c59a <printk>
   27ef2:	490a      	ldr	r1, [pc, #40]	; (27f1c <z_sched_usage_stop+0xbc>)
   27ef4:	4811      	ldr	r0, [pc, #68]	; (27f3c <z_sched_usage_stop+0xdc>)
   27ef6:	f004 fb50 	bl	2c59a <printk>
   27efa:	4809      	ldr	r0, [pc, #36]	; (27f20 <z_sched_usage_stop+0xc0>)
   27efc:	21ac      	movs	r1, #172	; 0xac
   27efe:	f004 fd8d 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   27f02:	f385 8811 	msr	BASEPRI, r5
   27f06:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&usage_lock, k);
}
   27f0a:	bd70      	pop	{r4, r5, r6, pc}
			_kernel.all_thread_usage += dt;
   27f0c:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
   27f10:	181b      	adds	r3, r3, r0
   27f12:	eb46 0101 	adc.w	r1, r6, r1
   27f16:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
   27f1a:	e7d7      	b.n	27ecc <z_sched_usage_stop+0x6c>
   27f1c:	20002f10 	.word	0x20002f10
   27f20:	00032546 	.word	0x00032546
   27f24:	00032598 	.word	0x00032598
   27f28:	00032486 	.word	0x00032486
   27f2c:	000325ad 	.word	0x000325ad
   27f30:	20002040 	.word	0x20002040
   27f34:	20002080 	.word	0x20002080
   27f38:	0003256c 	.word	0x0003256c
   27f3c:	00032583 	.word	0x00032583

00027f40 <z_sched_thread_usage>:

uint64_t z_sched_thread_usage(struct k_thread *thread)
{
   27f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   27f44:	4604      	mov	r4, r0
	__asm__ volatile(
   27f46:	f04f 0340 	mov.w	r3, #64	; 0x40
   27f4a:	f3ef 8a11 	mrs	sl, BASEPRI
   27f4e:	f383 8812 	msr	BASEPRI_MAX, r3
   27f52:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27f56:	482f      	ldr	r0, [pc, #188]	; (28014 <z_sched_thread_usage+0xd4>)
   27f58:	f7fc ffa8 	bl	24eac <z_spin_lock_valid>
   27f5c:	b968      	cbnz	r0, 27f7a <z_sched_thread_usage+0x3a>
   27f5e:	4a2e      	ldr	r2, [pc, #184]	; (28018 <z_sched_thread_usage+0xd8>)
   27f60:	492e      	ldr	r1, [pc, #184]	; (2801c <z_sched_thread_usage+0xdc>)
   27f62:	482f      	ldr	r0, [pc, #188]	; (28020 <z_sched_thread_usage+0xe0>)
   27f64:	2381      	movs	r3, #129	; 0x81
   27f66:	f004 fb18 	bl	2c59a <printk>
   27f6a:	492a      	ldr	r1, [pc, #168]	; (28014 <z_sched_thread_usage+0xd4>)
   27f6c:	482d      	ldr	r0, [pc, #180]	; (28024 <z_sched_thread_usage+0xe4>)
   27f6e:	f004 fb14 	bl	2c59a <printk>
   27f72:	4829      	ldr	r0, [pc, #164]	; (28018 <z_sched_thread_usage+0xd8>)
   27f74:	2181      	movs	r1, #129	; 0x81
   27f76:	f004 fd51 	bl	2ca1c <assert_post_action>
	k_spinlock_key_t k = k_spin_lock(&usage_lock);
	uint32_t u0 = _current_cpu->usage0, now = usage_now();
   27f7a:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 28034 <z_sched_thread_usage+0xf4>
	z_spin_lock_set_owner(l);
   27f7e:	4825      	ldr	r0, [pc, #148]	; (28014 <z_sched_thread_usage+0xd4>)
   27f80:	f7fc ffb2 	bl	24ee8 <z_spin_lock_set_owner>
   27f84:	f8d9 8018 	ldr.w	r8, [r9, #24]
   27f88:	f7ef fdb8 	bl	17afc <arch_timing_counter_get>
	uint64_t ret = thread->base.usage;
   27f8c:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	; 0x30

	if (u0 != 0) {
   27f90:	464b      	mov	r3, r9
   27f92:	f1b8 0f00 	cmp.w	r8, #0
   27f96:	d018      	beq.n	27fca <z_sched_thread_usage+0x8a>
		uint32_t dt = now - u0;

#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
		if (z_is_idle_thread_object(thread)) {
   27f98:	4923      	ldr	r1, [pc, #140]	; (28028 <z_sched_thread_usage+0xe8>)
   27f9a:	2801      	cmp	r0, #1
   27f9c:	bf38      	it	cc
   27f9e:	2001      	movcc	r0, #1
   27fa0:	428c      	cmp	r4, r1
		uint32_t dt = now - u0;
   27fa2:	eba0 0208 	sub.w	r2, r0, r8
   27fa6:	f04f 0c00 	mov.w	ip, #0
		if (z_is_idle_thread_object(thread)) {
   27faa:	d128      	bne.n	27ffe <z_sched_thread_usage+0xbe>
			_kernel.idle_thread_usage += dt;
   27fac:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
   27fb0:	f8d9 703c 	ldr.w	r7, [r9, #60]	; 0x3c
   27fb4:	1889      	adds	r1, r1, r2
   27fb6:	eb47 0e0c 	adc.w	lr, r7, ip
   27fba:	e9c9 1e0e 	strd	r1, lr, [r9, #56]	; 0x38
		} else {
			_kernel.all_thread_usage += dt;
		}
#endif

		ret += dt;
   27fbe:	18ad      	adds	r5, r5, r2
   27fc0:	eb46 060c 	adc.w	r6, r6, ip
		thread->base.usage = ret;
   27fc4:	e9c4 560c 	strd	r5, r6, [r4, #48]	; 0x30
		_current_cpu->usage0 = now;
   27fc8:	6198      	str	r0, [r3, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27fca:	4812      	ldr	r0, [pc, #72]	; (28014 <z_sched_thread_usage+0xd4>)
   27fcc:	f7fc ff7c 	bl	24ec8 <z_spin_unlock_valid>
   27fd0:	b968      	cbnz	r0, 27fee <z_sched_thread_usage+0xae>
   27fd2:	4a11      	ldr	r2, [pc, #68]	; (28018 <z_sched_thread_usage+0xd8>)
   27fd4:	4915      	ldr	r1, [pc, #84]	; (2802c <z_sched_thread_usage+0xec>)
   27fd6:	4812      	ldr	r0, [pc, #72]	; (28020 <z_sched_thread_usage+0xe0>)
   27fd8:	23ac      	movs	r3, #172	; 0xac
   27fda:	f004 fade 	bl	2c59a <printk>
   27fde:	490d      	ldr	r1, [pc, #52]	; (28014 <z_sched_thread_usage+0xd4>)
   27fe0:	4813      	ldr	r0, [pc, #76]	; (28030 <z_sched_thread_usage+0xf0>)
   27fe2:	f004 fada 	bl	2c59a <printk>
   27fe6:	480c      	ldr	r0, [pc, #48]	; (28018 <z_sched_thread_usage+0xd8>)
   27fe8:	21ac      	movs	r1, #172	; 0xac
   27fea:	f004 fd17 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   27fee:	f38a 8811 	msr	BASEPRI, sl
   27ff2:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&usage_lock, k);
	return ret;
}
   27ff6:	4628      	mov	r0, r5
   27ff8:	4631      	mov	r1, r6
   27ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			_kernel.all_thread_usage += dt;
   27ffe:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
   28002:	f8d9 7034 	ldr.w	r7, [r9, #52]	; 0x34
   28006:	1889      	adds	r1, r1, r2
   28008:	eb47 0e0c 	adc.w	lr, r7, ip
   2800c:	e9c9 1e0c 	strd	r1, lr, [r9, #48]	; 0x30
   28010:	e7d5      	b.n	27fbe <z_sched_thread_usage+0x7e>
   28012:	bf00      	nop
   28014:	20002f10 	.word	0x20002f10
   28018:	00032546 	.word	0x00032546
   2801c:	00032598 	.word	0x00032598
   28020:	00032486 	.word	0x00032486
   28024:	000325ad 	.word	0x000325ad
   28028:	20002080 	.word	0x20002080
   2802c:	0003256c 	.word	0x0003256c
   28030:	00032583 	.word	0x00032583
   28034:	20002040 	.word	0x20002040

00028038 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   28038:	b508      	push	{r3, lr}
   2803a:	4806      	ldr	r0, [pc, #24]	; (28054 <z_data_copy+0x1c>)
   2803c:	4a06      	ldr	r2, [pc, #24]	; (28058 <z_data_copy+0x20>)
   2803e:	4907      	ldr	r1, [pc, #28]	; (2805c <z_data_copy+0x24>)
   28040:	1a12      	subs	r2, r2, r0
   28042:	f008 faca 	bl	305da <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   28046:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2804a:	4a05      	ldr	r2, [pc, #20]	; (28060 <z_data_copy+0x28>)
   2804c:	4905      	ldr	r1, [pc, #20]	; (28064 <z_data_copy+0x2c>)
   2804e:	4806      	ldr	r0, [pc, #24]	; (28068 <z_data_copy+0x30>)
   28050:	f008 bac3 	b.w	305da <memcpy>
   28054:	20000000 	.word	0x20000000
   28058:	20000acc 	.word	0x20000acc
   2805c:	00038250 	.word	0x00038250
   28060:	00000000 	.word	0x00000000
   28064:	00038250 	.word	0x00038250
   28068:	20000000 	.word	0x20000000

0002806c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   2806c:	4b03      	ldr	r3, [pc, #12]	; (2807c <elapsed+0x10>)
   2806e:	681b      	ldr	r3, [r3, #0]
   28070:	b90b      	cbnz	r3, 28076 <elapsed+0xa>
   28072:	f7fa be8d 	b.w	22d90 <sys_clock_elapsed>
}
   28076:	2000      	movs	r0, #0
   28078:	4770      	bx	lr
   2807a:	bf00      	nop
   2807c:	20002f14 	.word	0x20002f14

00028080 <next_timeout>:

static int32_t next_timeout(void)
{
   28080:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   28082:	4b13      	ldr	r3, [pc, #76]	; (280d0 <next_timeout+0x50>)
   28084:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28086:	429c      	cmp	r4, r3
   28088:	bf08      	it	eq
   2808a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   2808c:	f7ff ffee 	bl	2806c <elapsed>
   28090:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   28092:	b1bc      	cbz	r4, 280c4 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   28094:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   28098:	1b40      	subs	r0, r0, r5
   2809a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   2809e:	2801      	cmp	r0, #1
   280a0:	f171 0300 	sbcs.w	r3, r1, #0
   280a4:	db11      	blt.n	280ca <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   280a6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   280aa:	2300      	movs	r3, #0
   280ac:	4282      	cmp	r2, r0
   280ae:	eb73 0401 	sbcs.w	r4, r3, r1
   280b2:	da00      	bge.n	280b6 <next_timeout+0x36>
   280b4:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   280b6:	4b07      	ldr	r3, [pc, #28]	; (280d4 <next_timeout+0x54>)
   280b8:	691b      	ldr	r3, [r3, #16]
   280ba:	b113      	cbz	r3, 280c2 <next_timeout+0x42>
   280bc:	4298      	cmp	r0, r3
   280be:	bfa8      	it	ge
   280c0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   280c2:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   280c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   280c8:	e7f5      	b.n	280b6 <next_timeout+0x36>
   280ca:	2000      	movs	r0, #0
   280cc:	e7f3      	b.n	280b6 <next_timeout+0x36>
   280ce:	bf00      	nop
   280d0:	2000065c 	.word	0x2000065c
   280d4:	20002040 	.word	0x20002040

000280d8 <remove_timeout>:
{
   280d8:	b530      	push	{r4, r5, lr}
   280da:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   280dc:	b168      	cbz	r0, 280fa <remove_timeout+0x22>
   280de:	4a0a      	ldr	r2, [pc, #40]	; (28108 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   280e0:	6852      	ldr	r2, [r2, #4]
   280e2:	4290      	cmp	r0, r2
   280e4:	d009      	beq.n	280fa <remove_timeout+0x22>
	if (next(t) != NULL) {
   280e6:	b143      	cbz	r3, 280fa <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   280e8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   280ec:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   280f0:	1912      	adds	r2, r2, r4
   280f2:	eb45 0101 	adc.w	r1, r5, r1
   280f6:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   280fa:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   280fc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   280fe:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28100:	2300      	movs	r3, #0
	node->prev = NULL;
   28102:	e9c0 3300 	strd	r3, r3, [r0]
}
   28106:	bd30      	pop	{r4, r5, pc}
   28108:	2000065c 	.word	0x2000065c

0002810c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   2810c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28110:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   28112:	1c6b      	adds	r3, r5, #1
   28114:	bf08      	it	eq
   28116:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   2811a:	4682      	mov	sl, r0
   2811c:	468b      	mov	fp, r1
   2811e:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   28120:	f000 80aa 	beq.w	28278 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   28124:	6803      	ldr	r3, [r0, #0]
   28126:	b163      	cbz	r3, 28142 <z_add_timeout+0x36>
   28128:	4955      	ldr	r1, [pc, #340]	; (28280 <z_add_timeout+0x174>)
   2812a:	4a56      	ldr	r2, [pc, #344]	; (28284 <z_add_timeout+0x178>)
   2812c:	4856      	ldr	r0, [pc, #344]	; (28288 <z_add_timeout+0x17c>)
   2812e:	235d      	movs	r3, #93	; 0x5d
   28130:	f004 fa33 	bl	2c59a <printk>
   28134:	4855      	ldr	r0, [pc, #340]	; (2828c <z_add_timeout+0x180>)
   28136:	f004 fa30 	bl	2c59a <printk>
   2813a:	4852      	ldr	r0, [pc, #328]	; (28284 <z_add_timeout+0x178>)
   2813c:	215d      	movs	r1, #93	; 0x5d
   2813e:	f004 fc6d 	bl	2ca1c <assert_post_action>
	to->fn = fn;
   28142:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   28146:	f04f 0340 	mov.w	r3, #64	; 0x40
   2814a:	f3ef 8b11 	mrs	fp, BASEPRI
   2814e:	f383 8812 	msr	BASEPRI_MAX, r3
   28152:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28156:	484e      	ldr	r0, [pc, #312]	; (28290 <z_add_timeout+0x184>)
   28158:	f7fc fea8 	bl	24eac <z_spin_lock_valid>
   2815c:	b968      	cbnz	r0, 2817a <z_add_timeout+0x6e>
   2815e:	4a4d      	ldr	r2, [pc, #308]	; (28294 <z_add_timeout+0x188>)
   28160:	494d      	ldr	r1, [pc, #308]	; (28298 <z_add_timeout+0x18c>)
   28162:	4849      	ldr	r0, [pc, #292]	; (28288 <z_add_timeout+0x17c>)
   28164:	2381      	movs	r3, #129	; 0x81
   28166:	f004 fa18 	bl	2c59a <printk>
   2816a:	4949      	ldr	r1, [pc, #292]	; (28290 <z_add_timeout+0x184>)
   2816c:	484b      	ldr	r0, [pc, #300]	; (2829c <z_add_timeout+0x190>)
   2816e:	f004 fa14 	bl	2c59a <printk>
   28172:	4848      	ldr	r0, [pc, #288]	; (28294 <z_add_timeout+0x188>)
   28174:	2181      	movs	r1, #129	; 0x81
   28176:	f004 fc51 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   2817a:	4845      	ldr	r0, [pc, #276]	; (28290 <z_add_timeout+0x184>)
   2817c:	f7fc feb4 	bl	24ee8 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   28180:	f06f 0301 	mvn.w	r3, #1
   28184:	ebb3 0804 	subs.w	r8, r3, r4
   28188:	f04f 32ff 	mov.w	r2, #4294967295
   2818c:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   28190:	f1b8 0f00 	cmp.w	r8, #0
   28194:	f179 0100 	sbcs.w	r1, r9, #0
   28198:	db1c      	blt.n	281d4 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   2819a:	4841      	ldr	r0, [pc, #260]	; (282a0 <z_add_timeout+0x194>)
   2819c:	e9d0 1000 	ldrd	r1, r0, [r0]
   281a0:	1a5b      	subs	r3, r3, r1
   281a2:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   281a6:	1b1e      	subs	r6, r3, r4
   281a8:	eb62 0705 	sbc.w	r7, r2, r5
   281ac:	2e01      	cmp	r6, #1
   281ae:	f177 0300 	sbcs.w	r3, r7, #0
   281b2:	bfbc      	itt	lt
   281b4:	2601      	movlt	r6, #1
   281b6:	2700      	movlt	r7, #0
   281b8:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   281bc:	4a39      	ldr	r2, [pc, #228]	; (282a4 <z_add_timeout+0x198>)
   281be:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   281c2:	4293      	cmp	r3, r2
   281c4:	d11d      	bne.n	28202 <z_add_timeout+0xf6>
	node->prev = tail;
   281c6:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   281ca:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   281ce:	f8c2 a004 	str.w	sl, [r2, #4]
}
   281d2:	e02c      	b.n	2822e <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   281d4:	f7ff ff4a 	bl	2806c <elapsed>
   281d8:	1c63      	adds	r3, r4, #1
   281da:	9300      	str	r3, [sp, #0]
   281dc:	f145 0300 	adc.w	r3, r5, #0
   281e0:	9301      	str	r3, [sp, #4]
   281e2:	e9dd 2300 	ldrd	r2, r3, [sp]
   281e6:	1812      	adds	r2, r2, r0
   281e8:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   281ec:	e9ca 2304 	strd	r2, r3, [sl, #16]
   281f0:	e7e4      	b.n	281bc <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   281f2:	1be0      	subs	r0, r4, r7
   281f4:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   281f8:	42b3      	cmp	r3, r6
   281fa:	e9ca 0104 	strd	r0, r1, [sl, #16]
   281fe:	d0e2      	beq.n	281c6 <z_add_timeout+0xba>
   28200:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   28202:	2b00      	cmp	r3, #0
   28204:	d0df      	beq.n	281c6 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   28206:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   2820a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   2820e:	42bc      	cmp	r4, r7
   28210:	eb75 0108 	sbcs.w	r1, r5, r8
   28214:	daed      	bge.n	281f2 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   28216:	1b38      	subs	r0, r7, r4
   28218:	eb68 0105 	sbc.w	r1, r8, r5
   2821c:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   28220:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   28222:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   28226:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   2822a:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   2822e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28230:	4293      	cmp	r3, r2
   28232:	d00b      	beq.n	2824c <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   28234:	459a      	cmp	sl, r3
   28236:	d109      	bne.n	2824c <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   28238:	f7ff ff22 	bl	28080 <next_timeout>

			if (next_time == 0 ||
   2823c:	b118      	cbz	r0, 28246 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   2823e:	4b1a      	ldr	r3, [pc, #104]	; (282a8 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   28240:	691b      	ldr	r3, [r3, #16]
   28242:	4283      	cmp	r3, r0
   28244:	d002      	beq.n	2824c <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   28246:	2100      	movs	r1, #0
   28248:	f7fa fd72 	bl	22d30 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2824c:	4810      	ldr	r0, [pc, #64]	; (28290 <z_add_timeout+0x184>)
   2824e:	f7fc fe3b 	bl	24ec8 <z_spin_unlock_valid>
   28252:	b968      	cbnz	r0, 28270 <z_add_timeout+0x164>
   28254:	4a0f      	ldr	r2, [pc, #60]	; (28294 <z_add_timeout+0x188>)
   28256:	4915      	ldr	r1, [pc, #84]	; (282ac <z_add_timeout+0x1a0>)
   28258:	480b      	ldr	r0, [pc, #44]	; (28288 <z_add_timeout+0x17c>)
   2825a:	23ac      	movs	r3, #172	; 0xac
   2825c:	f004 f99d 	bl	2c59a <printk>
   28260:	490b      	ldr	r1, [pc, #44]	; (28290 <z_add_timeout+0x184>)
   28262:	4813      	ldr	r0, [pc, #76]	; (282b0 <z_add_timeout+0x1a4>)
   28264:	f004 f999 	bl	2c59a <printk>
   28268:	480a      	ldr	r0, [pc, #40]	; (28294 <z_add_timeout+0x188>)
   2826a:	21ac      	movs	r1, #172	; 0xac
   2826c:	f004 fbd6 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   28270:	f38b 8811 	msr	BASEPRI, fp
   28274:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   28278:	b003      	add	sp, #12
   2827a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2827e:	bf00      	nop
   28280:	00037e46 	.word	0x00037e46
   28284:	00037e22 	.word	0x00037e22
   28288:	00032486 	.word	0x00032486
   2828c:	00036e1f 	.word	0x00036e1f
   28290:	20002f18 	.word	0x20002f18
   28294:	00032546 	.word	0x00032546
   28298:	00032598 	.word	0x00032598
   2829c:	000325ad 	.word	0x000325ad
   282a0:	200022e0 	.word	0x200022e0
   282a4:	2000065c 	.word	0x2000065c
   282a8:	20002040 	.word	0x20002040
   282ac:	0003256c 	.word	0x0003256c
   282b0:	00032583 	.word	0x00032583

000282b4 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   282b4:	b538      	push	{r3, r4, r5, lr}
   282b6:	4604      	mov	r4, r0
	__asm__ volatile(
   282b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   282bc:	f3ef 8511 	mrs	r5, BASEPRI
   282c0:	f383 8812 	msr	BASEPRI_MAX, r3
   282c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   282c8:	481a      	ldr	r0, [pc, #104]	; (28334 <z_abort_timeout+0x80>)
   282ca:	f7fc fdef 	bl	24eac <z_spin_lock_valid>
   282ce:	b968      	cbnz	r0, 282ec <z_abort_timeout+0x38>
   282d0:	4a19      	ldr	r2, [pc, #100]	; (28338 <z_abort_timeout+0x84>)
   282d2:	491a      	ldr	r1, [pc, #104]	; (2833c <z_abort_timeout+0x88>)
   282d4:	481a      	ldr	r0, [pc, #104]	; (28340 <z_abort_timeout+0x8c>)
   282d6:	2381      	movs	r3, #129	; 0x81
   282d8:	f004 f95f 	bl	2c59a <printk>
   282dc:	4915      	ldr	r1, [pc, #84]	; (28334 <z_abort_timeout+0x80>)
   282de:	4819      	ldr	r0, [pc, #100]	; (28344 <z_abort_timeout+0x90>)
   282e0:	f004 f95b 	bl	2c59a <printk>
   282e4:	4814      	ldr	r0, [pc, #80]	; (28338 <z_abort_timeout+0x84>)
   282e6:	2181      	movs	r1, #129	; 0x81
   282e8:	f004 fb98 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   282ec:	4811      	ldr	r0, [pc, #68]	; (28334 <z_abort_timeout+0x80>)
   282ee:	f7fc fdfb 	bl	24ee8 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   282f2:	6823      	ldr	r3, [r4, #0]
   282f4:	b1db      	cbz	r3, 2832e <z_abort_timeout+0x7a>
			remove_timeout(to);
   282f6:	4620      	mov	r0, r4
   282f8:	f7ff feee 	bl	280d8 <remove_timeout>
			ret = 0;
   282fc:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   282fe:	480d      	ldr	r0, [pc, #52]	; (28334 <z_abort_timeout+0x80>)
   28300:	f7fc fde2 	bl	24ec8 <z_spin_unlock_valid>
   28304:	b968      	cbnz	r0, 28322 <z_abort_timeout+0x6e>
   28306:	4a0c      	ldr	r2, [pc, #48]	; (28338 <z_abort_timeout+0x84>)
   28308:	490f      	ldr	r1, [pc, #60]	; (28348 <z_abort_timeout+0x94>)
   2830a:	480d      	ldr	r0, [pc, #52]	; (28340 <z_abort_timeout+0x8c>)
   2830c:	23ac      	movs	r3, #172	; 0xac
   2830e:	f004 f944 	bl	2c59a <printk>
   28312:	4908      	ldr	r1, [pc, #32]	; (28334 <z_abort_timeout+0x80>)
   28314:	480d      	ldr	r0, [pc, #52]	; (2834c <z_abort_timeout+0x98>)
   28316:	f004 f940 	bl	2c59a <printk>
   2831a:	4807      	ldr	r0, [pc, #28]	; (28338 <z_abort_timeout+0x84>)
   2831c:	21ac      	movs	r1, #172	; 0xac
   2831e:	f004 fb7d 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   28322:	f385 8811 	msr	BASEPRI, r5
   28326:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   2832a:	4620      	mov	r0, r4
   2832c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2832e:	f06f 0415 	mvn.w	r4, #21
   28332:	e7e4      	b.n	282fe <z_abort_timeout+0x4a>
   28334:	20002f18 	.word	0x20002f18
   28338:	00032546 	.word	0x00032546
   2833c:	00032598 	.word	0x00032598
   28340:	00032486 	.word	0x00032486
   28344:	000325ad 	.word	0x000325ad
   28348:	0003256c 	.word	0x0003256c
   2834c:	00032583 	.word	0x00032583

00028350 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   28350:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28352:	f04f 0340 	mov.w	r3, #64	; 0x40
   28356:	f3ef 8511 	mrs	r5, BASEPRI
   2835a:	f383 8812 	msr	BASEPRI_MAX, r3
   2835e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28362:	4818      	ldr	r0, [pc, #96]	; (283c4 <z_get_next_timeout_expiry+0x74>)
   28364:	f7fc fda2 	bl	24eac <z_spin_lock_valid>
   28368:	b968      	cbnz	r0, 28386 <z_get_next_timeout_expiry+0x36>
   2836a:	4a17      	ldr	r2, [pc, #92]	; (283c8 <z_get_next_timeout_expiry+0x78>)
   2836c:	4917      	ldr	r1, [pc, #92]	; (283cc <z_get_next_timeout_expiry+0x7c>)
   2836e:	4818      	ldr	r0, [pc, #96]	; (283d0 <z_get_next_timeout_expiry+0x80>)
   28370:	2381      	movs	r3, #129	; 0x81
   28372:	f004 f912 	bl	2c59a <printk>
   28376:	4913      	ldr	r1, [pc, #76]	; (283c4 <z_get_next_timeout_expiry+0x74>)
   28378:	4816      	ldr	r0, [pc, #88]	; (283d4 <z_get_next_timeout_expiry+0x84>)
   2837a:	f004 f90e 	bl	2c59a <printk>
   2837e:	4812      	ldr	r0, [pc, #72]	; (283c8 <z_get_next_timeout_expiry+0x78>)
   28380:	2181      	movs	r1, #129	; 0x81
   28382:	f004 fb4b 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   28386:	480f      	ldr	r0, [pc, #60]	; (283c4 <z_get_next_timeout_expiry+0x74>)
   28388:	f7fc fdae 	bl	24ee8 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   2838c:	f7ff fe78 	bl	28080 <next_timeout>
   28390:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28392:	480c      	ldr	r0, [pc, #48]	; (283c4 <z_get_next_timeout_expiry+0x74>)
   28394:	f7fc fd98 	bl	24ec8 <z_spin_unlock_valid>
   28398:	b968      	cbnz	r0, 283b6 <z_get_next_timeout_expiry+0x66>
   2839a:	4a0b      	ldr	r2, [pc, #44]	; (283c8 <z_get_next_timeout_expiry+0x78>)
   2839c:	490e      	ldr	r1, [pc, #56]	; (283d8 <z_get_next_timeout_expiry+0x88>)
   2839e:	480c      	ldr	r0, [pc, #48]	; (283d0 <z_get_next_timeout_expiry+0x80>)
   283a0:	23ac      	movs	r3, #172	; 0xac
   283a2:	f004 f8fa 	bl	2c59a <printk>
   283a6:	4907      	ldr	r1, [pc, #28]	; (283c4 <z_get_next_timeout_expiry+0x74>)
   283a8:	480c      	ldr	r0, [pc, #48]	; (283dc <z_get_next_timeout_expiry+0x8c>)
   283aa:	f004 f8f6 	bl	2c59a <printk>
   283ae:	4806      	ldr	r0, [pc, #24]	; (283c8 <z_get_next_timeout_expiry+0x78>)
   283b0:	21ac      	movs	r1, #172	; 0xac
   283b2:	f004 fb33 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   283b6:	f385 8811 	msr	BASEPRI, r5
   283ba:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   283be:	4620      	mov	r0, r4
   283c0:	bd38      	pop	{r3, r4, r5, pc}
   283c2:	bf00      	nop
   283c4:	20002f18 	.word	0x20002f18
   283c8:	00032546 	.word	0x00032546
   283cc:	00032598 	.word	0x00032598
   283d0:	00032486 	.word	0x00032486
   283d4:	000325ad 	.word	0x000325ad
   283d8:	0003256c 	.word	0x0003256c
   283dc:	00032583 	.word	0x00032583

000283e0 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   283e0:	b570      	push	{r4, r5, r6, lr}
   283e2:	4604      	mov	r4, r0
   283e4:	460d      	mov	r5, r1
	__asm__ volatile(
   283e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   283ea:	f3ef 8611 	mrs	r6, BASEPRI
   283ee:	f383 8812 	msr	BASEPRI_MAX, r3
   283f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   283f6:	481b      	ldr	r0, [pc, #108]	; (28464 <z_set_timeout_expiry+0x84>)
   283f8:	f7fc fd58 	bl	24eac <z_spin_lock_valid>
   283fc:	b968      	cbnz	r0, 2841a <z_set_timeout_expiry+0x3a>
   283fe:	4a1a      	ldr	r2, [pc, #104]	; (28468 <z_set_timeout_expiry+0x88>)
   28400:	491a      	ldr	r1, [pc, #104]	; (2846c <z_set_timeout_expiry+0x8c>)
   28402:	481b      	ldr	r0, [pc, #108]	; (28470 <z_set_timeout_expiry+0x90>)
   28404:	2381      	movs	r3, #129	; 0x81
   28406:	f004 f8c8 	bl	2c59a <printk>
   2840a:	4916      	ldr	r1, [pc, #88]	; (28464 <z_set_timeout_expiry+0x84>)
   2840c:	4819      	ldr	r0, [pc, #100]	; (28474 <z_set_timeout_expiry+0x94>)
   2840e:	f004 f8c4 	bl	2c59a <printk>
   28412:	4815      	ldr	r0, [pc, #84]	; (28468 <z_set_timeout_expiry+0x88>)
   28414:	2181      	movs	r1, #129	; 0x81
   28416:	f004 fb01 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   2841a:	4812      	ldr	r0, [pc, #72]	; (28464 <z_set_timeout_expiry+0x84>)
   2841c:	f7fc fd64 	bl	24ee8 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   28420:	f7ff fe2e 	bl	28080 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   28424:	2801      	cmp	r0, #1
   28426:	dd05      	ble.n	28434 <z_set_timeout_expiry+0x54>
   28428:	42a0      	cmp	r0, r4
   2842a:	db03      	blt.n	28434 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   2842c:	4629      	mov	r1, r5
   2842e:	4620      	mov	r0, r4
   28430:	f7fa fc7e 	bl	22d30 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28434:	480b      	ldr	r0, [pc, #44]	; (28464 <z_set_timeout_expiry+0x84>)
   28436:	f7fc fd47 	bl	24ec8 <z_spin_unlock_valid>
   2843a:	b968      	cbnz	r0, 28458 <z_set_timeout_expiry+0x78>
   2843c:	4a0a      	ldr	r2, [pc, #40]	; (28468 <z_set_timeout_expiry+0x88>)
   2843e:	490e      	ldr	r1, [pc, #56]	; (28478 <z_set_timeout_expiry+0x98>)
   28440:	480b      	ldr	r0, [pc, #44]	; (28470 <z_set_timeout_expiry+0x90>)
   28442:	23ac      	movs	r3, #172	; 0xac
   28444:	f004 f8a9 	bl	2c59a <printk>
   28448:	4906      	ldr	r1, [pc, #24]	; (28464 <z_set_timeout_expiry+0x84>)
   2844a:	480c      	ldr	r0, [pc, #48]	; (2847c <z_set_timeout_expiry+0x9c>)
   2844c:	f004 f8a5 	bl	2c59a <printk>
   28450:	4805      	ldr	r0, [pc, #20]	; (28468 <z_set_timeout_expiry+0x88>)
   28452:	21ac      	movs	r1, #172	; 0xac
   28454:	f004 fae2 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   28458:	f386 8811 	msr	BASEPRI, r6
   2845c:	f3bf 8f6f 	isb	sy
		}
	}
}
   28460:	bd70      	pop	{r4, r5, r6, pc}
   28462:	bf00      	nop
   28464:	20002f18 	.word	0x20002f18
   28468:	00032546 	.word	0x00032546
   2846c:	00032598 	.word	0x00032598
   28470:	00032486 	.word	0x00032486
   28474:	000325ad 	.word	0x000325ad
   28478:	0003256c 	.word	0x0003256c
   2847c:	00032583 	.word	0x00032583

00028480 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   28480:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28484:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   28486:	f7fe fd47 	bl	26f18 <z_time_slice>
	__asm__ volatile(
   2848a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2848e:	f3ef 8711 	mrs	r7, BASEPRI
   28492:	f383 8812 	msr	BASEPRI_MAX, r3
   28496:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2849a:	4855      	ldr	r0, [pc, #340]	; (285f0 <sys_clock_announce+0x170>)
   2849c:	f7fc fd06 	bl	24eac <z_spin_lock_valid>
   284a0:	b968      	cbnz	r0, 284be <sys_clock_announce+0x3e>
   284a2:	4a54      	ldr	r2, [pc, #336]	; (285f4 <sys_clock_announce+0x174>)
   284a4:	4954      	ldr	r1, [pc, #336]	; (285f8 <sys_clock_announce+0x178>)
   284a6:	4855      	ldr	r0, [pc, #340]	; (285fc <sys_clock_announce+0x17c>)
   284a8:	2381      	movs	r3, #129	; 0x81
   284aa:	f004 f876 	bl	2c59a <printk>
   284ae:	4950      	ldr	r1, [pc, #320]	; (285f0 <sys_clock_announce+0x170>)
   284b0:	4853      	ldr	r0, [pc, #332]	; (28600 <sys_clock_announce+0x180>)
   284b2:	f004 f872 	bl	2c59a <printk>
   284b6:	484f      	ldr	r0, [pc, #316]	; (285f4 <sys_clock_announce+0x174>)
   284b8:	2181      	movs	r1, #129	; 0x81
   284ba:	f004 faaf 	bl	2ca1c <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   284be:	4d51      	ldr	r5, [pc, #324]	; (28604 <sys_clock_announce+0x184>)
   284c0:	4e51      	ldr	r6, [pc, #324]	; (28608 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   284c2:	484b      	ldr	r0, [pc, #300]	; (285f0 <sys_clock_announce+0x170>)
	return list->head == list;
   284c4:	f8df a14c 	ldr.w	sl, [pc, #332]	; 28614 <sys_clock_announce+0x194>
   284c8:	f7fc fd0e 	bl	24ee8 <z_spin_lock_set_owner>
   284cc:	46b3      	mov	fp, r6
   284ce:	602c      	str	r4, [r5, #0]
   284d0:	e9d6 2300 	ldrd	r2, r3, [r6]
   284d4:	f8d5 c000 	ldr.w	ip, [r5]
   284d8:	f8da 4000 	ldr.w	r4, [sl]
   284dc:	e9cd 2300 	strd	r2, r3, [sp]
   284e0:	4662      	mov	r2, ip
   284e2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   284e4:	4554      	cmp	r4, sl
   284e6:	46e0      	mov	r8, ip
   284e8:	4699      	mov	r9, r3
   284ea:	d00c      	beq.n	28506 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   284ec:	b15c      	cbz	r4, 28506 <sys_clock_announce+0x86>
   284ee:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   284f2:	458c      	cmp	ip, r1
   284f4:	eb79 0302 	sbcs.w	r3, r9, r2
   284f8:	da2e      	bge.n	28558 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   284fa:	ebb1 000c 	subs.w	r0, r1, ip
   284fe:	eb62 0109 	sbc.w	r1, r2, r9
   28502:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   28506:	9a00      	ldr	r2, [sp, #0]
   28508:	9901      	ldr	r1, [sp, #4]
   2850a:	eb18 0202 	adds.w	r2, r8, r2
   2850e:	464b      	mov	r3, r9
   28510:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   28514:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   28516:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   2851a:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   2851c:	f7ff fdb0 	bl	28080 <next_timeout>
   28520:	4621      	mov	r1, r4
   28522:	f7fa fc05 	bl	22d30 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28526:	4832      	ldr	r0, [pc, #200]	; (285f0 <sys_clock_announce+0x170>)
   28528:	f7fc fcce 	bl	24ec8 <z_spin_unlock_valid>
   2852c:	b968      	cbnz	r0, 2854a <sys_clock_announce+0xca>
   2852e:	4a31      	ldr	r2, [pc, #196]	; (285f4 <sys_clock_announce+0x174>)
   28530:	4936      	ldr	r1, [pc, #216]	; (2860c <sys_clock_announce+0x18c>)
   28532:	4832      	ldr	r0, [pc, #200]	; (285fc <sys_clock_announce+0x17c>)
   28534:	23ac      	movs	r3, #172	; 0xac
   28536:	f004 f830 	bl	2c59a <printk>
   2853a:	492d      	ldr	r1, [pc, #180]	; (285f0 <sys_clock_announce+0x170>)
   2853c:	4834      	ldr	r0, [pc, #208]	; (28610 <sys_clock_announce+0x190>)
   2853e:	f004 f82c 	bl	2c59a <printk>
   28542:	482c      	ldr	r0, [pc, #176]	; (285f4 <sys_clock_announce+0x174>)
   28544:	21ac      	movs	r1, #172	; 0xac
   28546:	f004 fa69 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   2854a:	f387 8811 	msr	BASEPRI, r7
   2854e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   28552:	b003      	add	sp, #12
   28554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   28558:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   2855c:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   28560:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   28564:	f04f 0200 	mov.w	r2, #0
   28568:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   2856c:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   28570:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   28572:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   28576:	4620      	mov	r0, r4
		curr_tick += dt;
   28578:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   2857c:	f7ff fdac 	bl	280d8 <remove_timeout>
   28580:	481b      	ldr	r0, [pc, #108]	; (285f0 <sys_clock_announce+0x170>)
   28582:	f7fc fca1 	bl	24ec8 <z_spin_unlock_valid>
   28586:	b968      	cbnz	r0, 285a4 <sys_clock_announce+0x124>
   28588:	4a1a      	ldr	r2, [pc, #104]	; (285f4 <sys_clock_announce+0x174>)
   2858a:	4920      	ldr	r1, [pc, #128]	; (2860c <sys_clock_announce+0x18c>)
   2858c:	481b      	ldr	r0, [pc, #108]	; (285fc <sys_clock_announce+0x17c>)
   2858e:	23ac      	movs	r3, #172	; 0xac
   28590:	f004 f803 	bl	2c59a <printk>
   28594:	4916      	ldr	r1, [pc, #88]	; (285f0 <sys_clock_announce+0x170>)
   28596:	481e      	ldr	r0, [pc, #120]	; (28610 <sys_clock_announce+0x190>)
   28598:	f003 ffff 	bl	2c59a <printk>
   2859c:	4815      	ldr	r0, [pc, #84]	; (285f4 <sys_clock_announce+0x174>)
   2859e:	21ac      	movs	r1, #172	; 0xac
   285a0:	f004 fa3c 	bl	2ca1c <assert_post_action>
   285a4:	f387 8811 	msr	BASEPRI, r7
   285a8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   285ac:	68a3      	ldr	r3, [r4, #8]
   285ae:	4620      	mov	r0, r4
   285b0:	4798      	blx	r3
	__asm__ volatile(
   285b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   285b6:	f3ef 8711 	mrs	r7, BASEPRI
   285ba:	f383 8812 	msr	BASEPRI_MAX, r3
   285be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   285c2:	480b      	ldr	r0, [pc, #44]	; (285f0 <sys_clock_announce+0x170>)
   285c4:	f7fc fc72 	bl	24eac <z_spin_lock_valid>
   285c8:	b968      	cbnz	r0, 285e6 <sys_clock_announce+0x166>
   285ca:	4a0a      	ldr	r2, [pc, #40]	; (285f4 <sys_clock_announce+0x174>)
   285cc:	490a      	ldr	r1, [pc, #40]	; (285f8 <sys_clock_announce+0x178>)
   285ce:	480b      	ldr	r0, [pc, #44]	; (285fc <sys_clock_announce+0x17c>)
   285d0:	2381      	movs	r3, #129	; 0x81
   285d2:	f003 ffe2 	bl	2c59a <printk>
   285d6:	4906      	ldr	r1, [pc, #24]	; (285f0 <sys_clock_announce+0x170>)
   285d8:	4809      	ldr	r0, [pc, #36]	; (28600 <sys_clock_announce+0x180>)
   285da:	f003 ffde 	bl	2c59a <printk>
   285de:	4805      	ldr	r0, [pc, #20]	; (285f4 <sys_clock_announce+0x174>)
   285e0:	2181      	movs	r1, #129	; 0x81
   285e2:	f004 fa1b 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   285e6:	4802      	ldr	r0, [pc, #8]	; (285f0 <sys_clock_announce+0x170>)
   285e8:	f7fc fc7e 	bl	24ee8 <z_spin_lock_set_owner>
	return k;
   285ec:	e770      	b.n	284d0 <sys_clock_announce+0x50>
   285ee:	bf00      	nop
   285f0:	20002f18 	.word	0x20002f18
   285f4:	00032546 	.word	0x00032546
   285f8:	00032598 	.word	0x00032598
   285fc:	00032486 	.word	0x00032486
   28600:	000325ad 	.word	0x000325ad
   28604:	20002f14 	.word	0x20002f14
   28608:	200022e0 	.word	0x200022e0
   2860c:	0003256c 	.word	0x0003256c
   28610:	00032583 	.word	0x00032583
   28614:	2000065c 	.word	0x2000065c

00028618 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   28618:	b570      	push	{r4, r5, r6, lr}
   2861a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2861e:	f3ef 8611 	mrs	r6, BASEPRI
   28622:	f383 8812 	msr	BASEPRI_MAX, r3
   28626:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2862a:	481b      	ldr	r0, [pc, #108]	; (28698 <sys_clock_tick_get+0x80>)
   2862c:	f7fc fc3e 	bl	24eac <z_spin_lock_valid>
   28630:	b968      	cbnz	r0, 2864e <sys_clock_tick_get+0x36>
   28632:	4a1a      	ldr	r2, [pc, #104]	; (2869c <sys_clock_tick_get+0x84>)
   28634:	491a      	ldr	r1, [pc, #104]	; (286a0 <sys_clock_tick_get+0x88>)
   28636:	481b      	ldr	r0, [pc, #108]	; (286a4 <sys_clock_tick_get+0x8c>)
   28638:	2381      	movs	r3, #129	; 0x81
   2863a:	f003 ffae 	bl	2c59a <printk>
   2863e:	4916      	ldr	r1, [pc, #88]	; (28698 <sys_clock_tick_get+0x80>)
   28640:	4819      	ldr	r0, [pc, #100]	; (286a8 <sys_clock_tick_get+0x90>)
   28642:	f003 ffaa 	bl	2c59a <printk>
   28646:	4815      	ldr	r0, [pc, #84]	; (2869c <sys_clock_tick_get+0x84>)
   28648:	2181      	movs	r1, #129	; 0x81
   2864a:	f004 f9e7 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   2864e:	4812      	ldr	r0, [pc, #72]	; (28698 <sys_clock_tick_get+0x80>)
   28650:	f7fc fc4a 	bl	24ee8 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   28654:	f7fa fb9c 	bl	22d90 <sys_clock_elapsed>
   28658:	4b14      	ldr	r3, [pc, #80]	; (286ac <sys_clock_tick_get+0x94>)
   2865a:	e9d3 4500 	ldrd	r4, r5, [r3]
   2865e:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28660:	480d      	ldr	r0, [pc, #52]	; (28698 <sys_clock_tick_get+0x80>)
   28662:	f145 0500 	adc.w	r5, r5, #0
   28666:	f7fc fc2f 	bl	24ec8 <z_spin_unlock_valid>
   2866a:	b968      	cbnz	r0, 28688 <sys_clock_tick_get+0x70>
   2866c:	4a0b      	ldr	r2, [pc, #44]	; (2869c <sys_clock_tick_get+0x84>)
   2866e:	4910      	ldr	r1, [pc, #64]	; (286b0 <sys_clock_tick_get+0x98>)
   28670:	480c      	ldr	r0, [pc, #48]	; (286a4 <sys_clock_tick_get+0x8c>)
   28672:	23ac      	movs	r3, #172	; 0xac
   28674:	f003 ff91 	bl	2c59a <printk>
   28678:	4907      	ldr	r1, [pc, #28]	; (28698 <sys_clock_tick_get+0x80>)
   2867a:	480e      	ldr	r0, [pc, #56]	; (286b4 <sys_clock_tick_get+0x9c>)
   2867c:	f003 ff8d 	bl	2c59a <printk>
   28680:	4806      	ldr	r0, [pc, #24]	; (2869c <sys_clock_tick_get+0x84>)
   28682:	21ac      	movs	r1, #172	; 0xac
   28684:	f004 f9ca 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   28688:	f386 8811 	msr	BASEPRI, r6
   2868c:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   28690:	4620      	mov	r0, r4
   28692:	4629      	mov	r1, r5
   28694:	bd70      	pop	{r4, r5, r6, pc}
   28696:	bf00      	nop
   28698:	20002f18 	.word	0x20002f18
   2869c:	00032546 	.word	0x00032546
   286a0:	00032598 	.word	0x00032598
   286a4:	00032486 	.word	0x00032486
   286a8:	000325ad 	.word	0x000325ad
   286ac:	200022e0 	.word	0x200022e0
   286b0:	0003256c 	.word	0x0003256c
   286b4:	00032583 	.word	0x00032583

000286b8 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   286b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   286ba:	4604      	mov	r4, r0
	__asm__ volatile(
   286bc:	f04f 0340 	mov.w	r3, #64	; 0x40
   286c0:	f3ef 8511 	mrs	r5, BASEPRI
   286c4:	f383 8812 	msr	BASEPRI_MAX, r3
   286c8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   286cc:	484d      	ldr	r0, [pc, #308]	; (28804 <z_timer_expiration_handler+0x14c>)
   286ce:	f7fc fbed 	bl	24eac <z_spin_lock_valid>
   286d2:	b968      	cbnz	r0, 286f0 <z_timer_expiration_handler+0x38>
   286d4:	4a4c      	ldr	r2, [pc, #304]	; (28808 <z_timer_expiration_handler+0x150>)
   286d6:	494d      	ldr	r1, [pc, #308]	; (2880c <z_timer_expiration_handler+0x154>)
   286d8:	484d      	ldr	r0, [pc, #308]	; (28810 <z_timer_expiration_handler+0x158>)
   286da:	2381      	movs	r3, #129	; 0x81
   286dc:	f003 ff5d 	bl	2c59a <printk>
   286e0:	4948      	ldr	r1, [pc, #288]	; (28804 <z_timer_expiration_handler+0x14c>)
   286e2:	484c      	ldr	r0, [pc, #304]	; (28814 <z_timer_expiration_handler+0x15c>)
   286e4:	f003 ff59 	bl	2c59a <printk>
   286e8:	4847      	ldr	r0, [pc, #284]	; (28808 <z_timer_expiration_handler+0x150>)
   286ea:	2181      	movs	r1, #129	; 0x81
   286ec:	f004 f996 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   286f0:	4844      	ldr	r0, [pc, #272]	; (28804 <z_timer_expiration_handler+0x14c>)
   286f2:	f7fc fbf9 	bl	24ee8 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   286f6:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   286fa:	1c56      	adds	r6, r2, #1
   286fc:	f143 0700 	adc.w	r7, r3, #0
   28700:	2f00      	cmp	r7, #0
   28702:	bf08      	it	eq
   28704:	2e02      	cmpeq	r6, #2
   28706:	d303      	bcc.n	28710 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   28708:	4943      	ldr	r1, [pc, #268]	; (28818 <z_timer_expiration_handler+0x160>)
   2870a:	4620      	mov	r0, r4
   2870c:	f7ff fcfe 	bl	2810c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   28710:	6b23      	ldr	r3, [r4, #48]	; 0x30
   28712:	3301      	adds	r3, #1
   28714:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   28716:	6a23      	ldr	r3, [r4, #32]
   28718:	2b00      	cmp	r3, #0
   2871a:	d035      	beq.n	28788 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2871c:	4839      	ldr	r0, [pc, #228]	; (28804 <z_timer_expiration_handler+0x14c>)
   2871e:	f7fc fbd3 	bl	24ec8 <z_spin_unlock_valid>
   28722:	b968      	cbnz	r0, 28740 <z_timer_expiration_handler+0x88>
   28724:	4a38      	ldr	r2, [pc, #224]	; (28808 <z_timer_expiration_handler+0x150>)
   28726:	493d      	ldr	r1, [pc, #244]	; (2881c <z_timer_expiration_handler+0x164>)
   28728:	4839      	ldr	r0, [pc, #228]	; (28810 <z_timer_expiration_handler+0x158>)
   2872a:	23ac      	movs	r3, #172	; 0xac
   2872c:	f003 ff35 	bl	2c59a <printk>
   28730:	4934      	ldr	r1, [pc, #208]	; (28804 <z_timer_expiration_handler+0x14c>)
   28732:	483b      	ldr	r0, [pc, #236]	; (28820 <z_timer_expiration_handler+0x168>)
   28734:	f003 ff31 	bl	2c59a <printk>
   28738:	4833      	ldr	r0, [pc, #204]	; (28808 <z_timer_expiration_handler+0x150>)
   2873a:	21ac      	movs	r1, #172	; 0xac
   2873c:	f004 f96e 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   28740:	f385 8811 	msr	BASEPRI, r5
   28744:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   28748:	6a23      	ldr	r3, [r4, #32]
   2874a:	4620      	mov	r0, r4
   2874c:	4798      	blx	r3
	__asm__ volatile(
   2874e:	f04f 0340 	mov.w	r3, #64	; 0x40
   28752:	f3ef 8511 	mrs	r5, BASEPRI
   28756:	f383 8812 	msr	BASEPRI_MAX, r3
   2875a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2875e:	4829      	ldr	r0, [pc, #164]	; (28804 <z_timer_expiration_handler+0x14c>)
   28760:	f7fc fba4 	bl	24eac <z_spin_lock_valid>
   28764:	b968      	cbnz	r0, 28782 <z_timer_expiration_handler+0xca>
   28766:	4a28      	ldr	r2, [pc, #160]	; (28808 <z_timer_expiration_handler+0x150>)
   28768:	4928      	ldr	r1, [pc, #160]	; (2880c <z_timer_expiration_handler+0x154>)
   2876a:	4829      	ldr	r0, [pc, #164]	; (28810 <z_timer_expiration_handler+0x158>)
   2876c:	2381      	movs	r3, #129	; 0x81
   2876e:	f003 ff14 	bl	2c59a <printk>
   28772:	4924      	ldr	r1, [pc, #144]	; (28804 <z_timer_expiration_handler+0x14c>)
   28774:	4827      	ldr	r0, [pc, #156]	; (28814 <z_timer_expiration_handler+0x15c>)
   28776:	f003 ff10 	bl	2c59a <printk>
   2877a:	4823      	ldr	r0, [pc, #140]	; (28808 <z_timer_expiration_handler+0x150>)
   2877c:	2181      	movs	r1, #129	; 0x81
   2877e:	f004 f94d 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   28782:	4820      	ldr	r0, [pc, #128]	; (28804 <z_timer_expiration_handler+0x14c>)
   28784:	f7fc fbb0 	bl	24ee8 <z_spin_lock_set_owner>
	return list->head == list;
   28788:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2878c:	42a6      	cmp	r6, r4
   2878e:	d000      	beq.n	28792 <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   28790:	b9b6      	cbnz	r6, 287c0 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28792:	481c      	ldr	r0, [pc, #112]	; (28804 <z_timer_expiration_handler+0x14c>)
   28794:	f7fc fb98 	bl	24ec8 <z_spin_unlock_valid>
   28798:	b968      	cbnz	r0, 287b6 <z_timer_expiration_handler+0xfe>
   2879a:	4a1b      	ldr	r2, [pc, #108]	; (28808 <z_timer_expiration_handler+0x150>)
   2879c:	491f      	ldr	r1, [pc, #124]	; (2881c <z_timer_expiration_handler+0x164>)
   2879e:	481c      	ldr	r0, [pc, #112]	; (28810 <z_timer_expiration_handler+0x158>)
   287a0:	23ac      	movs	r3, #172	; 0xac
   287a2:	f003 fefa 	bl	2c59a <printk>
   287a6:	4917      	ldr	r1, [pc, #92]	; (28804 <z_timer_expiration_handler+0x14c>)
   287a8:	481d      	ldr	r0, [pc, #116]	; (28820 <z_timer_expiration_handler+0x168>)
   287aa:	f003 fef6 	bl	2c59a <printk>
   287ae:	4816      	ldr	r0, [pc, #88]	; (28808 <z_timer_expiration_handler+0x150>)
   287b0:	21ac      	movs	r1, #172	; 0xac
   287b2:	f004 f933 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   287b6:	f385 8811 	msr	BASEPRI, r5
   287ba:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   287be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   287c0:	4630      	mov	r0, r6
   287c2:	f7fe f98b 	bl	26adc <z_unpend_thread_no_timeout>
   287c6:	2300      	movs	r3, #0
   287c8:	480e      	ldr	r0, [pc, #56]	; (28804 <z_timer_expiration_handler+0x14c>)
   287ca:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
   287ce:	f7fc fb7b 	bl	24ec8 <z_spin_unlock_valid>
   287d2:	b968      	cbnz	r0, 287f0 <z_timer_expiration_handler+0x138>
   287d4:	4a0c      	ldr	r2, [pc, #48]	; (28808 <z_timer_expiration_handler+0x150>)
   287d6:	4911      	ldr	r1, [pc, #68]	; (2881c <z_timer_expiration_handler+0x164>)
   287d8:	480d      	ldr	r0, [pc, #52]	; (28810 <z_timer_expiration_handler+0x158>)
   287da:	23ac      	movs	r3, #172	; 0xac
   287dc:	f003 fedd 	bl	2c59a <printk>
   287e0:	4908      	ldr	r1, [pc, #32]	; (28804 <z_timer_expiration_handler+0x14c>)
   287e2:	480f      	ldr	r0, [pc, #60]	; (28820 <z_timer_expiration_handler+0x168>)
   287e4:	f003 fed9 	bl	2c59a <printk>
   287e8:	4807      	ldr	r0, [pc, #28]	; (28808 <z_timer_expiration_handler+0x150>)
   287ea:	21ac      	movs	r1, #172	; 0xac
   287ec:	f004 f916 	bl	2ca1c <assert_post_action>
   287f0:	f385 8811 	msr	BASEPRI, r5
   287f4:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   287f8:	4630      	mov	r0, r6
}
   287fa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   287fe:	f7fe bc55 	b.w	270ac <z_ready_thread>
   28802:	bf00      	nop
   28804:	20002f1c 	.word	0x20002f1c
   28808:	00032546 	.word	0x00032546
   2880c:	00032598 	.word	0x00032598
   28810:	00032486 	.word	0x00032486
   28814:	000325ad 	.word	0x000325ad
   28818:	000286b9 	.word	0x000286b9
   2881c:	0003256c 	.word	0x0003256c
   28820:	00032583 	.word	0x00032583

00028824 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   28824:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   28828:	4619      	mov	r1, r3
   2882a:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2882c:	1c4c      	adds	r4, r1, #1
{
   2882e:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   28830:	bf08      	it	eq
   28832:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   28836:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   2883a:	4680      	mov	r8, r0
   2883c:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2883e:	d04c      	beq.n	288da <z_impl_k_timer_start+0xb6>
   28840:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   28842:	1c6b      	adds	r3, r5, #1
   28844:	bf08      	it	eq
   28846:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   2884a:	4614      	mov	r4, r2
   2884c:	d019      	beq.n	28882 <z_impl_k_timer_start+0x5e>
   2884e:	ea54 0305 	orrs.w	r3, r4, r5
   28852:	d016      	beq.n	28882 <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   28854:	f06f 0301 	mvn.w	r3, #1
   28858:	ebb3 0a02 	subs.w	sl, r3, r2
   2885c:	f04f 33ff 	mov.w	r3, #4294967295
   28860:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   28864:	f1ba 0f00 	cmp.w	sl, #0
   28868:	f17b 0300 	sbcs.w	r3, fp, #0
   2886c:	da09      	bge.n	28882 <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   2886e:	f112 34ff 	adds.w	r4, r2, #4294967295
   28872:	f145 35ff 	adc.w	r5, r5, #4294967295
   28876:	2c01      	cmp	r4, #1
   28878:	f175 0300 	sbcs.w	r3, r5, #0
   2887c:	bfbc      	itt	lt
   2887e:	2401      	movlt	r4, #1
   28880:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   28882:	f06f 0301 	mvn.w	r3, #1
   28886:	1a1b      	subs	r3, r3, r0
   28888:	9300      	str	r3, [sp, #0]
   2888a:	f04f 33ff 	mov.w	r3, #4294967295
   2888e:	eb63 0301 	sbc.w	r3, r3, r1
   28892:	9301      	str	r3, [sp, #4]
   28894:	e9dd 2300 	ldrd	r2, r3, [sp]
   28898:	2a00      	cmp	r2, #0
   2889a:	f173 0300 	sbcs.w	r3, r3, #0
   2889e:	da0c      	bge.n	288ba <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   288a0:	f110 38ff 	adds.w	r8, r0, #4294967295
   288a4:	f141 39ff 	adc.w	r9, r1, #4294967295
   288a8:	f1b8 0f00 	cmp.w	r8, #0
   288ac:	f179 0300 	sbcs.w	r3, r9, #0
   288b0:	bfbc      	itt	lt
   288b2:	f04f 0800 	movlt.w	r8, #0
   288b6:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   288ba:	4630      	mov	r0, r6
   288bc:	f7ff fcfa 	bl	282b4 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   288c0:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   288c2:	4907      	ldr	r1, [pc, #28]	; (288e0 <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   288c4:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   288c6:	4642      	mov	r2, r8
   288c8:	464b      	mov	r3, r9
   288ca:	4630      	mov	r0, r6
	timer->period = period;
   288cc:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   288d0:	b002      	add	sp, #8
   288d2:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   288d6:	f7ff bc19 	b.w	2810c <z_add_timeout>
}
   288da:	b002      	add	sp, #8
   288dc:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   288e0:	000286b9 	.word	0x000286b9

000288e4 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   288e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   288e8:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   288ea:	4d53      	ldr	r5, [pc, #332]	; (28a38 <clear_event_registrations+0x154>)
   288ec:	f8df 918c 	ldr.w	r9, [pc, #396]	; 28a7c <clear_event_registrations+0x198>
   288f0:	4e52      	ldr	r6, [pc, #328]	; (28a3c <clear_event_registrations+0x158>)
{
   288f2:	4680      	mov	r8, r0
   288f4:	4617      	mov	r7, r2
	while (num_events--) {
   288f6:	fb04 0401 	mla	r4, r4, r1, r0
   288fa:	45a0      	cmp	r8, r4
   288fc:	d101      	bne.n	28902 <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   288fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   28902:	2300      	movs	r3, #0
   28904:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   28908:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   2890c:	f003 031f 	and.w	r3, r3, #31
   28910:	2b08      	cmp	r3, #8
   28912:	d84f      	bhi.n	289b4 <clear_event_registrations+0xd0>
   28914:	e8df f003 	tbb	[pc, r3]
   28918:	4e05305b 	.word	0x4e05305b
   2891c:	4e4e4e21 	.word	0x4e4e4e21
   28920:	3f          	.byte	0x3f
   28921:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   28922:	f854 3c04 	ldr.w	r3, [r4, #-4]
   28926:	b963      	cbnz	r3, 28942 <clear_event_registrations+0x5e>
   28928:	4945      	ldr	r1, [pc, #276]	; (28a40 <clear_event_registrations+0x15c>)
   2892a:	23a9      	movs	r3, #169	; 0xa9
   2892c:	462a      	mov	r2, r5
   2892e:	4630      	mov	r0, r6
   28930:	f003 fe33 	bl	2c59a <printk>
   28934:	4843      	ldr	r0, [pc, #268]	; (28a44 <clear_event_registrations+0x160>)
   28936:	f003 fe30 	bl	2c59a <printk>
   2893a:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   2893c:	4628      	mov	r0, r5
   2893e:	f004 f86d 	bl	2ca1c <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   28942:	f854 3c14 	ldr.w	r3, [r4, #-20]
   28946:	2b00      	cmp	r3, #0
   28948:	d041      	beq.n	289ce <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   2894a:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   2894e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   28950:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   28952:	2300      	movs	r3, #0
	node->prev = NULL;
   28954:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   28958:	e039      	b.n	289ce <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   2895a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2895e:	2b00      	cmp	r3, #0
   28960:	d1ef      	bne.n	28942 <clear_event_registrations+0x5e>
   28962:	4939      	ldr	r1, [pc, #228]	; (28a48 <clear_event_registrations+0x164>)
   28964:	23ad      	movs	r3, #173	; 0xad
   28966:	462a      	mov	r2, r5
   28968:	4630      	mov	r0, r6
   2896a:	f003 fe16 	bl	2c59a <printk>
   2896e:	4837      	ldr	r0, [pc, #220]	; (28a4c <clear_event_registrations+0x168>)
   28970:	f003 fe13 	bl	2c59a <printk>
   28974:	21ad      	movs	r1, #173	; 0xad
   28976:	e7e1      	b.n	2893c <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   28978:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2897c:	2b00      	cmp	r3, #0
   2897e:	d1e0      	bne.n	28942 <clear_event_registrations+0x5e>
   28980:	4933      	ldr	r1, [pc, #204]	; (28a50 <clear_event_registrations+0x16c>)
   28982:	23b1      	movs	r3, #177	; 0xb1
   28984:	462a      	mov	r2, r5
   28986:	4630      	mov	r0, r6
   28988:	f003 fe07 	bl	2c59a <printk>
   2898c:	4831      	ldr	r0, [pc, #196]	; (28a54 <clear_event_registrations+0x170>)
   2898e:	f003 fe04 	bl	2c59a <printk>
   28992:	21b1      	movs	r1, #177	; 0xb1
   28994:	e7d2      	b.n	2893c <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   28996:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2899a:	2b00      	cmp	r3, #0
   2899c:	d1d1      	bne.n	28942 <clear_event_registrations+0x5e>
   2899e:	492e      	ldr	r1, [pc, #184]	; (28a58 <clear_event_registrations+0x174>)
   289a0:	23b5      	movs	r3, #181	; 0xb5
   289a2:	462a      	mov	r2, r5
   289a4:	4630      	mov	r0, r6
   289a6:	f003 fdf8 	bl	2c59a <printk>
   289aa:	482c      	ldr	r0, [pc, #176]	; (28a5c <clear_event_registrations+0x178>)
   289ac:	f003 fdf5 	bl	2c59a <printk>
   289b0:	21b5      	movs	r1, #181	; 0xb5
   289b2:	e7c3      	b.n	2893c <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   289b4:	4649      	mov	r1, r9
   289b6:	23bc      	movs	r3, #188	; 0xbc
   289b8:	462a      	mov	r2, r5
   289ba:	4630      	mov	r0, r6
   289bc:	f003 fded 	bl	2c59a <printk>
   289c0:	4827      	ldr	r0, [pc, #156]	; (28a60 <clear_event_registrations+0x17c>)
   289c2:	f003 fdea 	bl	2c59a <printk>
   289c6:	21bc      	movs	r1, #188	; 0xbc
   289c8:	4628      	mov	r0, r5
   289ca:	f004 f827 	bl	2ca1c <assert_post_action>
   289ce:	4825      	ldr	r0, [pc, #148]	; (28a64 <clear_event_registrations+0x180>)
   289d0:	f7fc fa7a 	bl	24ec8 <z_spin_unlock_valid>
   289d4:	b968      	cbnz	r0, 289f2 <clear_event_registrations+0x10e>
   289d6:	4a24      	ldr	r2, [pc, #144]	; (28a68 <clear_event_registrations+0x184>)
   289d8:	4924      	ldr	r1, [pc, #144]	; (28a6c <clear_event_registrations+0x188>)
   289da:	23ac      	movs	r3, #172	; 0xac
   289dc:	4630      	mov	r0, r6
   289de:	f003 fddc 	bl	2c59a <printk>
   289e2:	4920      	ldr	r1, [pc, #128]	; (28a64 <clear_event_registrations+0x180>)
   289e4:	4822      	ldr	r0, [pc, #136]	; (28a70 <clear_event_registrations+0x18c>)
   289e6:	f003 fdd8 	bl	2c59a <printk>
   289ea:	481f      	ldr	r0, [pc, #124]	; (28a68 <clear_event_registrations+0x184>)
   289ec:	21ac      	movs	r1, #172	; 0xac
   289ee:	f004 f815 	bl	2ca1c <assert_post_action>
   289f2:	f387 8811 	msr	BASEPRI, r7
   289f6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   289fa:	f04f 0340 	mov.w	r3, #64	; 0x40
   289fe:	f3ef 8711 	mrs	r7, BASEPRI
   28a02:	f383 8812 	msr	BASEPRI_MAX, r3
   28a06:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28a0a:	4816      	ldr	r0, [pc, #88]	; (28a64 <clear_event_registrations+0x180>)
   28a0c:	f7fc fa4e 	bl	24eac <z_spin_lock_valid>
   28a10:	b968      	cbnz	r0, 28a2e <clear_event_registrations+0x14a>
   28a12:	4a15      	ldr	r2, [pc, #84]	; (28a68 <clear_event_registrations+0x184>)
   28a14:	4917      	ldr	r1, [pc, #92]	; (28a74 <clear_event_registrations+0x190>)
   28a16:	2381      	movs	r3, #129	; 0x81
   28a18:	4630      	mov	r0, r6
   28a1a:	f003 fdbe 	bl	2c59a <printk>
   28a1e:	4911      	ldr	r1, [pc, #68]	; (28a64 <clear_event_registrations+0x180>)
   28a20:	4815      	ldr	r0, [pc, #84]	; (28a78 <clear_event_registrations+0x194>)
   28a22:	f003 fdba 	bl	2c59a <printk>
   28a26:	4810      	ldr	r0, [pc, #64]	; (28a68 <clear_event_registrations+0x184>)
   28a28:	2181      	movs	r1, #129	; 0x81
   28a2a:	f003 fff7 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   28a2e:	480d      	ldr	r0, [pc, #52]	; (28a64 <clear_event_registrations+0x180>)
   28a30:	f7fc fa5a 	bl	24ee8 <z_spin_lock_set_owner>
	return k;
   28a34:	3c14      	subs	r4, #20
   28a36:	e760      	b.n	288fa <clear_event_registrations+0x16>
   28a38:	00037e66 	.word	0x00037e66
   28a3c:	00032486 	.word	0x00032486
   28a40:	00037e87 	.word	0x00037e87
   28a44:	00037ea1 	.word	0x00037ea1
   28a48:	00037eb6 	.word	0x00037eb6
   28a4c:	00037ed2 	.word	0x00037ed2
   28a50:	00037ee3 	.word	0x00037ee3
   28a54:	00037f00 	.word	0x00037f00
   28a58:	00037f17 	.word	0x00037f17
   28a5c:	00037f32 	.word	0x00037f32
   28a60:	00037f4b 	.word	0x00037f4b
   28a64:	20002f20 	.word	0x20002f20
   28a68:	00032546 	.word	0x00032546
   28a6c:	0003256c 	.word	0x0003256c
   28a70:	00032583 	.word	0x00032583
   28a74:	00032598 	.word	0x00032598
   28a78:	000325ad 	.word	0x000325ad
   28a7c:	000380f0 	.word	0x000380f0

00028a80 <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   28a80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   28a84:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28a86:	4e7c      	ldr	r6, [pc, #496]	; (28c78 <register_events+0x1f8>)
   28a88:	f8df 8230 	ldr.w	r8, [pc, #560]	; 28cbc <register_events+0x23c>
   28a8c:	f8df a230 	ldr.w	sl, [pc, #560]	; 28cc0 <register_events+0x240>
{
   28a90:	9100      	str	r1, [sp, #0]
   28a92:	4615      	mov	r5, r2
   28a94:	9301      	str	r3, [sp, #4]
   28a96:	4604      	mov	r4, r0
	int events_registered = 0;
   28a98:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
   28a9a:	9b00      	ldr	r3, [sp, #0]
   28a9c:	429f      	cmp	r7, r3
   28a9e:	db03      	blt.n	28aa8 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   28aa0:	4648      	mov	r0, r9
   28aa2:	b003      	add	sp, #12
   28aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28aa8:	f04f 0340 	mov.w	r3, #64	; 0x40
   28aac:	f3ef 8b11 	mrs	fp, BASEPRI
   28ab0:	f383 8812 	msr	BASEPRI_MAX, r3
   28ab4:	f3bf 8f6f 	isb	sy
   28ab8:	4630      	mov	r0, r6
   28aba:	f7fc f9f7 	bl	24eac <z_spin_lock_valid>
   28abe:	b968      	cbnz	r0, 28adc <register_events+0x5c>
   28ac0:	486e      	ldr	r0, [pc, #440]	; (28c7c <register_events+0x1fc>)
   28ac2:	2381      	movs	r3, #129	; 0x81
   28ac4:	4642      	mov	r2, r8
   28ac6:	4651      	mov	r1, sl
   28ac8:	f003 fd67 	bl	2c59a <printk>
   28acc:	486c      	ldr	r0, [pc, #432]	; (28c80 <register_events+0x200>)
   28ace:	4631      	mov	r1, r6
   28ad0:	f003 fd63 	bl	2c59a <printk>
   28ad4:	2181      	movs	r1, #129	; 0x81
   28ad6:	4640      	mov	r0, r8
   28ad8:	f003 ffa0 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   28adc:	4630      	mov	r0, r6
   28ade:	f7fc fa03 	bl	24ee8 <z_spin_lock_set_owner>
	switch (event->type) {
   28ae2:	7b63      	ldrb	r3, [r4, #13]
   28ae4:	f003 031f 	and.w	r3, r3, #31
   28ae8:	2b08      	cmp	r3, #8
   28aea:	d84f      	bhi.n	28b8c <register_events+0x10c>
   28aec:	e8df f003 	tbb	[pc, r3]
   28af0:	4e054230 	.word	0x4e054230
   28af4:	4e4e4e2c 	.word	0x4e4e4e2c
   28af8:	48          	.byte	0x48
   28af9:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   28afa:	6923      	ldr	r3, [r4, #16]
   28afc:	689b      	ldr	r3, [r3, #8]
   28afe:	b33b      	cbz	r3, 28b50 <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   28b00:	2302      	movs	r3, #2
	event->state |= state;
   28b02:	68e2      	ldr	r2, [r4, #12]
   28b04:	f3c2 3045 	ubfx	r0, r2, #13, #6
   28b08:	4303      	orrs	r3, r0
	event->poller = NULL;
   28b0a:	2100      	movs	r1, #0
	event->state |= state;
   28b0c:	f363 3252 	bfi	r2, r3, #13, #6
	event->poller = NULL;
   28b10:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   28b12:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   28b14:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28b16:	4630      	mov	r0, r6
   28b18:	f7fc f9d6 	bl	24ec8 <z_spin_unlock_valid>
   28b1c:	b968      	cbnz	r0, 28b3a <register_events+0xba>
   28b1e:	4959      	ldr	r1, [pc, #356]	; (28c84 <register_events+0x204>)
   28b20:	4856      	ldr	r0, [pc, #344]	; (28c7c <register_events+0x1fc>)
   28b22:	23ac      	movs	r3, #172	; 0xac
   28b24:	4642      	mov	r2, r8
   28b26:	f003 fd38 	bl	2c59a <printk>
   28b2a:	4857      	ldr	r0, [pc, #348]	; (28c88 <register_events+0x208>)
   28b2c:	4631      	mov	r1, r6
   28b2e:	f003 fd34 	bl	2c59a <printk>
   28b32:	21ac      	movs	r1, #172	; 0xac
   28b34:	4640      	mov	r0, r8
   28b36:	f003 ff71 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   28b3a:	f38b 8811 	msr	BASEPRI, fp
   28b3e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   28b42:	3701      	adds	r7, #1
   28b44:	3414      	adds	r4, #20
   28b46:	e7a8      	b.n	28a9a <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   28b48:	6923      	ldr	r3, [r4, #16]
   28b4a:	681b      	ldr	r3, [r3, #0]
   28b4c:	2b00      	cmp	r3, #0
   28b4e:	d12e      	bne.n	28bae <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   28b50:	9b01      	ldr	r3, [sp, #4]
   28b52:	2b00      	cmp	r3, #0
   28b54:	d1df      	bne.n	28b16 <register_events+0x96>
   28b56:	782b      	ldrb	r3, [r5, #0]
   28b58:	2b00      	cmp	r3, #0
   28b5a:	d0dc      	beq.n	28b16 <register_events+0x96>
	switch (event->type) {
   28b5c:	7b63      	ldrb	r3, [r4, #13]
   28b5e:	f003 031f 	and.w	r3, r3, #31
   28b62:	2b08      	cmp	r3, #8
   28b64:	d879      	bhi.n	28c5a <register_events+0x1da>
   28b66:	e8df f003 	tbb	[pc, r3]
   28b6a:	5139      	.short	0x5139
   28b6c:	783d7824 	.word	0x783d7824
   28b70:	7878      	.short	0x7878
   28b72:	64          	.byte	0x64
   28b73:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   28b74:	6923      	ldr	r3, [r4, #16]
   28b76:	689b      	ldr	r3, [r3, #8]
   28b78:	2b00      	cmp	r3, #0
   28b7a:	d0e9      	beq.n	28b50 <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   28b7c:	2301      	movs	r3, #1
   28b7e:	e7c0      	b.n	28b02 <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   28b80:	6923      	ldr	r3, [r4, #16]
   28b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   28b84:	2b00      	cmp	r3, #0
   28b86:	d0e3      	beq.n	28b50 <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   28b88:	2310      	movs	r3, #16
   28b8a:	e7ba      	b.n	28b02 <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   28b8c:	4a3f      	ldr	r2, [pc, #252]	; (28c8c <register_events+0x20c>)
   28b8e:	4940      	ldr	r1, [pc, #256]	; (28c90 <register_events+0x210>)
   28b90:	483a      	ldr	r0, [pc, #232]	; (28c7c <register_events+0x1fc>)
   28b92:	235c      	movs	r3, #92	; 0x5c
   28b94:	f003 fd01 	bl	2c59a <printk>
   28b98:	7b61      	ldrb	r1, [r4, #13]
   28b9a:	483e      	ldr	r0, [pc, #248]	; (28c94 <register_events+0x214>)
   28b9c:	f001 011f 	and.w	r1, r1, #31
   28ba0:	f003 fcfb 	bl	2c59a <printk>
   28ba4:	4839      	ldr	r0, [pc, #228]	; (28c8c <register_events+0x20c>)
   28ba6:	215c      	movs	r1, #92	; 0x5c
   28ba8:	f003 ff38 	bl	2ca1c <assert_post_action>
		break;
   28bac:	e7d0      	b.n	28b50 <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   28bae:	2304      	movs	r3, #4
   28bb0:	e7a7      	b.n	28b02 <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   28bb2:	6923      	ldr	r3, [r4, #16]
   28bb4:	b963      	cbnz	r3, 28bd0 <register_events+0x150>
   28bb6:	4938      	ldr	r1, [pc, #224]	; (28c98 <register_events+0x218>)
   28bb8:	4a34      	ldr	r2, [pc, #208]	; (28c8c <register_events+0x20c>)
   28bba:	4830      	ldr	r0, [pc, #192]	; (28c7c <register_events+0x1fc>)
   28bbc:	2386      	movs	r3, #134	; 0x86
   28bbe:	f003 fcec 	bl	2c59a <printk>
   28bc2:	4836      	ldr	r0, [pc, #216]	; (28c9c <register_events+0x21c>)
   28bc4:	f003 fce9 	bl	2c59a <printk>
   28bc8:	4830      	ldr	r0, [pc, #192]	; (28c8c <register_events+0x20c>)
   28bca:	2186      	movs	r1, #134	; 0x86
   28bcc:	f003 ff26 	bl	2ca1c <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   28bd0:	6920      	ldr	r0, [r4, #16]
   28bd2:	462a      	mov	r2, r5
   28bd4:	4621      	mov	r1, r4
   28bd6:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   28bd8:	f007 fc98 	bl	3050c <add_event>
	event->poller = poller;
   28bdc:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   28bde:	f109 0901 	add.w	r9, r9, #1
   28be2:	e798      	b.n	28b16 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   28be4:	6923      	ldr	r3, [r4, #16]
   28be6:	b963      	cbnz	r3, 28c02 <register_events+0x182>
   28be8:	492d      	ldr	r1, [pc, #180]	; (28ca0 <register_events+0x220>)
   28bea:	4a28      	ldr	r2, [pc, #160]	; (28c8c <register_events+0x20c>)
   28bec:	4823      	ldr	r0, [pc, #140]	; (28c7c <register_events+0x1fc>)
   28bee:	238a      	movs	r3, #138	; 0x8a
   28bf0:	f003 fcd3 	bl	2c59a <printk>
   28bf4:	482b      	ldr	r0, [pc, #172]	; (28ca4 <register_events+0x224>)
   28bf6:	f003 fcd0 	bl	2c59a <printk>
   28bfa:	4824      	ldr	r0, [pc, #144]	; (28c8c <register_events+0x20c>)
   28bfc:	218a      	movs	r1, #138	; 0x8a
   28bfe:	f003 ff0d 	bl	2ca1c <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   28c02:	6920      	ldr	r0, [r4, #16]
   28c04:	462a      	mov	r2, r5
   28c06:	4621      	mov	r1, r4
   28c08:	3014      	adds	r0, #20
   28c0a:	e7e5      	b.n	28bd8 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   28c0c:	6923      	ldr	r3, [r4, #16]
   28c0e:	b963      	cbnz	r3, 28c2a <register_events+0x1aa>
   28c10:	4925      	ldr	r1, [pc, #148]	; (28ca8 <register_events+0x228>)
   28c12:	4a1e      	ldr	r2, [pc, #120]	; (28c8c <register_events+0x20c>)
   28c14:	4819      	ldr	r0, [pc, #100]	; (28c7c <register_events+0x1fc>)
   28c16:	238e      	movs	r3, #142	; 0x8e
   28c18:	f003 fcbf 	bl	2c59a <printk>
   28c1c:	4823      	ldr	r0, [pc, #140]	; (28cac <register_events+0x22c>)
   28c1e:	f003 fcbc 	bl	2c59a <printk>
   28c22:	481a      	ldr	r0, [pc, #104]	; (28c8c <register_events+0x20c>)
   28c24:	218e      	movs	r1, #142	; 0x8e
   28c26:	f003 fef9 	bl	2ca1c <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   28c2a:	6920      	ldr	r0, [r4, #16]
   28c2c:	462a      	mov	r2, r5
   28c2e:	4621      	mov	r1, r4
   28c30:	e7d2      	b.n	28bd8 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   28c32:	6923      	ldr	r3, [r4, #16]
   28c34:	b963      	cbnz	r3, 28c50 <register_events+0x1d0>
   28c36:	491e      	ldr	r1, [pc, #120]	; (28cb0 <register_events+0x230>)
   28c38:	4a14      	ldr	r2, [pc, #80]	; (28c8c <register_events+0x20c>)
   28c3a:	4810      	ldr	r0, [pc, #64]	; (28c7c <register_events+0x1fc>)
   28c3c:	2392      	movs	r3, #146	; 0x92
   28c3e:	f003 fcac 	bl	2c59a <printk>
   28c42:	481c      	ldr	r0, [pc, #112]	; (28cb4 <register_events+0x234>)
   28c44:	f003 fca9 	bl	2c59a <printk>
   28c48:	4810      	ldr	r0, [pc, #64]	; (28c8c <register_events+0x20c>)
   28c4a:	2192      	movs	r1, #146	; 0x92
   28c4c:	f003 fee6 	bl	2ca1c <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   28c50:	6920      	ldr	r0, [r4, #16]
   28c52:	462a      	mov	r2, r5
   28c54:	4621      	mov	r1, r4
   28c56:	3028      	adds	r0, #40	; 0x28
   28c58:	e7be      	b.n	28bd8 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   28c5a:	4a0c      	ldr	r2, [pc, #48]	; (28c8c <register_events+0x20c>)
   28c5c:	490c      	ldr	r1, [pc, #48]	; (28c90 <register_events+0x210>)
   28c5e:	4807      	ldr	r0, [pc, #28]	; (28c7c <register_events+0x1fc>)
   28c60:	2399      	movs	r3, #153	; 0x99
   28c62:	f003 fc9a 	bl	2c59a <printk>
   28c66:	4814      	ldr	r0, [pc, #80]	; (28cb8 <register_events+0x238>)
   28c68:	f003 fc97 	bl	2c59a <printk>
   28c6c:	4807      	ldr	r0, [pc, #28]	; (28c8c <register_events+0x20c>)
   28c6e:	2199      	movs	r1, #153	; 0x99
   28c70:	f003 fed4 	bl	2ca1c <assert_post_action>
		break;
   28c74:	e7b2      	b.n	28bdc <register_events+0x15c>
   28c76:	bf00      	nop
   28c78:	20002f20 	.word	0x20002f20
   28c7c:	00032486 	.word	0x00032486
   28c80:	000325ad 	.word	0x000325ad
   28c84:	0003256c 	.word	0x0003256c
   28c88:	00032583 	.word	0x00032583
   28c8c:	00037e66 	.word	0x00037e66
   28c90:	000380f0 	.word	0x000380f0
   28c94:	00037f61 	.word	0x00037f61
   28c98:	00037e87 	.word	0x00037e87
   28c9c:	00037ea1 	.word	0x00037ea1
   28ca0:	00037eb6 	.word	0x00037eb6
   28ca4:	00037ed2 	.word	0x00037ed2
   28ca8:	00037ee3 	.word	0x00037ee3
   28cac:	00037f00 	.word	0x00037f00
   28cb0:	00037f17 	.word	0x00037f17
   28cb4:	00037f32 	.word	0x00037f32
   28cb8:	00037f4b 	.word	0x00037f4b
   28cbc:	00032546 	.word	0x00032546
   28cc0:	00032598 	.word	0x00032598

00028cc4 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   28cc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   28cc8:	6884      	ldr	r4, [r0, #8]
{
   28cca:	4605      	mov	r5, r0
   28ccc:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   28cce:	b1d4      	cbz	r4, 28d06 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   28cd0:	7863      	ldrb	r3, [r4, #1]
   28cd2:	2b01      	cmp	r3, #1
   28cd4:	d14b      	bne.n	28d6e <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   28cd6:	f1b4 0768 	subs.w	r7, r4, #104	; 0x68
   28cda:	d10e      	bne.n	28cfa <signal_poll_event+0x36>
   28cdc:	4a30      	ldr	r2, [pc, #192]	; (28da0 <signal_poll_event+0xdc>)
   28cde:	4931      	ldr	r1, [pc, #196]	; (28da4 <signal_poll_event+0xe0>)
   28ce0:	4831      	ldr	r0, [pc, #196]	; (28da8 <signal_poll_event+0xe4>)
   28ce2:	23f9      	movs	r3, #249	; 0xf9
   28ce4:	f003 fc59 	bl	2c59a <printk>
   28ce8:	4830      	ldr	r0, [pc, #192]	; (28dac <signal_poll_event+0xe8>)
   28cea:	f003 fc56 	bl	2c59a <printk>
   28cee:	482c      	ldr	r0, [pc, #176]	; (28da0 <signal_poll_event+0xdc>)
   28cf0:	21f9      	movs	r1, #249	; 0xf9
   28cf2:	f003 fe93 	bl	2ca1c <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   28cf6:	7b7b      	ldrb	r3, [r7, #13]
   28cf8:	deff      	udf	#255	; 0xff
   28cfa:	f814 3c5b 	ldrb.w	r3, [r4, #-91]
   28cfe:	f013 0302 	ands.w	r3, r3, #2
   28d02:	d10a      	bne.n	28d1a <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   28d04:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   28d06:	68eb      	ldr	r3, [r5, #12]
   28d08:	f3c3 3145 	ubfx	r1, r3, #13, #6
   28d0c:	430e      	orrs	r6, r1
	event->poller = NULL;
   28d0e:	2000      	movs	r0, #0
	event->state |= state;
   28d10:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   28d14:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   28d16:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   28d18:	e00d      	b.n	28d36 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   28d1a:	e954 2310 	ldrd	r2, r3, [r4, #-64]	; 0x40
   28d1e:	f04f 31ff 	mov.w	r1, #4294967295
   28d22:	f06f 0001 	mvn.w	r0, #1
   28d26:	428b      	cmp	r3, r1
   28d28:	bf08      	it	eq
   28d2a:	4282      	cmpeq	r2, r0
   28d2c:	d105      	bne.n	28d3a <signal_poll_event+0x76>
		poller->is_polling = false;
   28d2e:	2300      	movs	r3, #0
   28d30:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   28d32:	f06f 000a 	mvn.w	r0, #10
}
   28d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   28d3a:	4638      	mov	r0, r7
   28d3c:	f7fe f812 	bl	26d64 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   28d40:	2e08      	cmp	r6, #8
   28d42:	bf0c      	ite	eq
   28d44:	f06f 0303 	mvneq.w	r3, #3
   28d48:	2300      	movne	r3, #0
   28d4a:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   28d4c:	f814 3c5b 	ldrb.w	r3, [r4, #-91]
   28d50:	06db      	lsls	r3, r3, #27
   28d52:	d104      	bne.n	28d5e <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   28d54:	f854 8c50 	ldr.w	r8, [r4, #-80]
   28d58:	f1b8 0f00 	cmp.w	r8, #0
   28d5c:	d001      	beq.n	28d62 <signal_poll_event+0x9e>
		poller->is_polling = false;
   28d5e:	2300      	movs	r3, #0
   28d60:	e7d0      	b.n	28d04 <signal_poll_event+0x40>
	z_ready_thread(thread);
   28d62:	4638      	mov	r0, r7
   28d64:	f7fe f9a2 	bl	270ac <z_ready_thread>
		poller->is_polling = false;
   28d68:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   28d6c:	e7cb      	b.n	28d06 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   28d6e:	2b02      	cmp	r3, #2
   28d70:	d1f5      	bne.n	28d5e <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   28d72:	7823      	ldrb	r3, [r4, #0]
   28d74:	2b00      	cmp	r3, #0
   28d76:	d0c6      	beq.n	28d06 <signal_poll_event+0x42>
   28d78:	f854 7c04 	ldr.w	r7, [r4, #-4]
   28d7c:	b177      	cbz	r7, 28d9c <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   28d7e:	f1a4 0914 	sub.w	r9, r4, #20
   28d82:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
   28d86:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   28d8a:	f7ff fa93 	bl	282b4 <z_abort_timeout>
		twork->poll_result = 0;
   28d8e:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   28d92:	4649      	mov	r1, r9
   28d94:	4638      	mov	r0, r7
   28d96:	f7fd fb2b 	bl	263f0 <k_work_submit_to_queue>
   28d9a:	e7e5      	b.n	28d68 <signal_poll_event+0xa4>
		poller->is_polling = false;
   28d9c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   28d9e:	e7b2      	b.n	28d06 <signal_poll_event+0x42>
   28da0:	00037e66 	.word	0x00037e66
   28da4:	00037f7e 	.word	0x00037f7e
   28da8:	00032486 	.word	0x00032486
   28dac:	00037f94 	.word	0x00037f94

00028db0 <k_poll_event_init>:
{
   28db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28db2:	4605      	mov	r5, r0
   28db4:	460f      	mov	r7, r1
   28db6:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   28db8:	4614      	mov	r4, r2
   28dba:	b162      	cbz	r2, 28dd6 <k_poll_event_init+0x26>
   28dbc:	491b      	ldr	r1, [pc, #108]	; (28e2c <k_poll_event_init+0x7c>)
   28dbe:	4a1c      	ldr	r2, [pc, #112]	; (28e30 <k_poll_event_init+0x80>)
   28dc0:	481c      	ldr	r0, [pc, #112]	; (28e34 <k_poll_event_init+0x84>)
   28dc2:	232d      	movs	r3, #45	; 0x2d
   28dc4:	f003 fbe9 	bl	2c59a <printk>
   28dc8:	481b      	ldr	r0, [pc, #108]	; (28e38 <k_poll_event_init+0x88>)
   28dca:	f003 fbe6 	bl	2c59a <printk>
   28dce:	4818      	ldr	r0, [pc, #96]	; (28e30 <k_poll_event_init+0x80>)
   28dd0:	212d      	movs	r1, #45	; 0x2d
   28dd2:	f003 fe23 	bl	2ca1c <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   28dd6:	2f1f      	cmp	r7, #31
   28dd8:	d90c      	bls.n	28df4 <k_poll_event_init+0x44>
   28dda:	4918      	ldr	r1, [pc, #96]	; (28e3c <k_poll_event_init+0x8c>)
   28ddc:	4a14      	ldr	r2, [pc, #80]	; (28e30 <k_poll_event_init+0x80>)
   28dde:	4815      	ldr	r0, [pc, #84]	; (28e34 <k_poll_event_init+0x84>)
   28de0:	232f      	movs	r3, #47	; 0x2f
   28de2:	f003 fbda 	bl	2c59a <printk>
   28de6:	4816      	ldr	r0, [pc, #88]	; (28e40 <k_poll_event_init+0x90>)
   28de8:	f003 fbd7 	bl	2c59a <printk>
   28dec:	4810      	ldr	r0, [pc, #64]	; (28e30 <k_poll_event_init+0x80>)
   28dee:	212f      	movs	r1, #47	; 0x2f
   28df0:	f003 fe14 	bl	2ca1c <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   28df4:	b966      	cbnz	r6, 28e10 <k_poll_event_init+0x60>
   28df6:	4913      	ldr	r1, [pc, #76]	; (28e44 <k_poll_event_init+0x94>)
   28df8:	4a0d      	ldr	r2, [pc, #52]	; (28e30 <k_poll_event_init+0x80>)
   28dfa:	480e      	ldr	r0, [pc, #56]	; (28e34 <k_poll_event_init+0x84>)
   28dfc:	2330      	movs	r3, #48	; 0x30
   28dfe:	f003 fbcc 	bl	2c59a <printk>
   28e02:	4811      	ldr	r0, [pc, #68]	; (28e48 <k_poll_event_init+0x98>)
   28e04:	f003 fbc9 	bl	2c59a <printk>
   28e08:	4809      	ldr	r0, [pc, #36]	; (28e30 <k_poll_event_init+0x80>)
   28e0a:	2130      	movs	r1, #48	; 0x30
   28e0c:	f003 fe06 	bl	2ca1c <assert_post_action>
	event->poller = NULL;
   28e10:	2300      	movs	r3, #0
	event->type = type;
   28e12:	04e4      	lsls	r4, r4, #19
   28e14:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   28e16:	60ab      	str	r3, [r5, #8]
	event->type = type;
   28e18:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   28e1c:	7b2b      	ldrb	r3, [r5, #12]
   28e1e:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   28e22:	433c      	orrs	r4, r7
   28e24:	431c      	orrs	r4, r3
	event->obj = obj;
   28e26:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   28e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28e2c:	00037fb3 	.word	0x00037fb3
   28e30:	00037e66 	.word	0x00037e66
   28e34:	00032486 	.word	0x00032486
   28e38:	00037fd3 	.word	0x00037fd3
   28e3c:	00037ff9 	.word	0x00037ff9
   28e40:	0003801d 	.word	0x0003801d
   28e44:	0003802d 	.word	0x0003802d
   28e48:	00038040 	.word	0x00038040

00028e4c <z_impl_k_poll>:
{
   28e4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   28e50:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   28e52:	4b75      	ldr	r3, [pc, #468]	; (29028 <z_impl_k_poll+0x1dc>)
   28e54:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   28e56:	2301      	movs	r3, #1
{
   28e58:	4604      	mov	r4, r0
   28e5a:	4688      	mov	r8, r1
   28e5c:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   28e5e:	f105 0968 	add.w	r9, r5, #104	; 0x68
	poller->is_polling = true;
   28e62:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
	poller->mode = MODE_POLL;
   28e66:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   28e6a:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   28e6e:	b173      	cbz	r3, 28e8e <z_impl_k_poll+0x42>
   28e70:	496e      	ldr	r1, [pc, #440]	; (2902c <z_impl_k_poll+0x1e0>)
   28e72:	4a6f      	ldr	r2, [pc, #444]	; (29030 <z_impl_k_poll+0x1e4>)
   28e74:	486f      	ldr	r0, [pc, #444]	; (29034 <z_impl_k_poll+0x1e8>)
   28e76:	f44f 738d 	mov.w	r3, #282	; 0x11a
   28e7a:	f003 fb8e 	bl	2c59a <printk>
   28e7e:	486e      	ldr	r0, [pc, #440]	; (29038 <z_impl_k_poll+0x1ec>)
   28e80:	f003 fb8b 	bl	2c59a <printk>
   28e84:	486a      	ldr	r0, [pc, #424]	; (29030 <z_impl_k_poll+0x1e4>)
   28e86:	f44f 718d 	mov.w	r1, #282	; 0x11a
   28e8a:	f003 fdc7 	bl	2ca1c <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   28e8e:	b974      	cbnz	r4, 28eae <z_impl_k_poll+0x62>
   28e90:	496a      	ldr	r1, [pc, #424]	; (2903c <z_impl_k_poll+0x1f0>)
   28e92:	4a67      	ldr	r2, [pc, #412]	; (29030 <z_impl_k_poll+0x1e4>)
   28e94:	4867      	ldr	r0, [pc, #412]	; (29034 <z_impl_k_poll+0x1e8>)
   28e96:	f240 131b 	movw	r3, #283	; 0x11b
   28e9a:	f003 fb7e 	bl	2c59a <printk>
   28e9e:	4868      	ldr	r0, [pc, #416]	; (29040 <z_impl_k_poll+0x1f4>)
   28ea0:	f003 fb7b 	bl	2c59a <printk>
   28ea4:	4862      	ldr	r0, [pc, #392]	; (29030 <z_impl_k_poll+0x1e4>)
   28ea6:	f240 111b 	movw	r1, #283	; 0x11b
   28eaa:	f003 fdb7 	bl	2ca1c <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   28eae:	f1b8 0f00 	cmp.w	r8, #0
   28eb2:	da0e      	bge.n	28ed2 <z_impl_k_poll+0x86>
   28eb4:	4963      	ldr	r1, [pc, #396]	; (29044 <z_impl_k_poll+0x1f8>)
   28eb6:	4a5e      	ldr	r2, [pc, #376]	; (29030 <z_impl_k_poll+0x1e4>)
   28eb8:	485e      	ldr	r0, [pc, #376]	; (29034 <z_impl_k_poll+0x1e8>)
   28eba:	f44f 738e 	mov.w	r3, #284	; 0x11c
   28ebe:	f003 fb6c 	bl	2c59a <printk>
   28ec2:	4861      	ldr	r0, [pc, #388]	; (29048 <z_impl_k_poll+0x1fc>)
   28ec4:	f003 fb69 	bl	2c59a <printk>
   28ec8:	4859      	ldr	r0, [pc, #356]	; (29030 <z_impl_k_poll+0x1e4>)
   28eca:	f44f 718e 	mov.w	r1, #284	; 0x11c
   28ece:	f003 fda5 	bl	2ca1c <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   28ed2:	ea56 0307 	orrs.w	r3, r6, r7
   28ed6:	bf0c      	ite	eq
   28ed8:	2301      	moveq	r3, #1
   28eda:	2300      	movne	r3, #0
   28edc:	4641      	mov	r1, r8
   28ede:	464a      	mov	r2, r9
   28ee0:	4620      	mov	r0, r4
   28ee2:	f7ff fdcd 	bl	28a80 <register_events>
   28ee6:	4680      	mov	r8, r0
	__asm__ volatile(
   28ee8:	f04f 0340 	mov.w	r3, #64	; 0x40
   28eec:	f3ef 8911 	mrs	r9, BASEPRI
   28ef0:	f383 8812 	msr	BASEPRI_MAX, r3
   28ef4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28ef8:	4854      	ldr	r0, [pc, #336]	; (2904c <z_impl_k_poll+0x200>)
   28efa:	f7fb ffd7 	bl	24eac <z_spin_lock_valid>
   28efe:	b968      	cbnz	r0, 28f1c <z_impl_k_poll+0xd0>
   28f00:	4a53      	ldr	r2, [pc, #332]	; (29050 <z_impl_k_poll+0x204>)
   28f02:	4954      	ldr	r1, [pc, #336]	; (29054 <z_impl_k_poll+0x208>)
   28f04:	484b      	ldr	r0, [pc, #300]	; (29034 <z_impl_k_poll+0x1e8>)
   28f06:	2381      	movs	r3, #129	; 0x81
   28f08:	f003 fb47 	bl	2c59a <printk>
   28f0c:	494f      	ldr	r1, [pc, #316]	; (2904c <z_impl_k_poll+0x200>)
   28f0e:	4852      	ldr	r0, [pc, #328]	; (29058 <z_impl_k_poll+0x20c>)
   28f10:	f003 fb43 	bl	2c59a <printk>
   28f14:	484e      	ldr	r0, [pc, #312]	; (29050 <z_impl_k_poll+0x204>)
   28f16:	2181      	movs	r1, #129	; 0x81
   28f18:	f003 fd80 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   28f1c:	484b      	ldr	r0, [pc, #300]	; (2904c <z_impl_k_poll+0x200>)
   28f1e:	f7fb ffe3 	bl	24ee8 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   28f22:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   28f26:	b9fb      	cbnz	r3, 28f68 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   28f28:	4620      	mov	r0, r4
   28f2a:	464a      	mov	r2, r9
   28f2c:	4641      	mov	r1, r8
   28f2e:	f7ff fcd9 	bl	288e4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28f32:	4846      	ldr	r0, [pc, #280]	; (2904c <z_impl_k_poll+0x200>)
   28f34:	f7fb ffc8 	bl	24ec8 <z_spin_unlock_valid>
   28f38:	b968      	cbnz	r0, 28f56 <z_impl_k_poll+0x10a>
   28f3a:	4a45      	ldr	r2, [pc, #276]	; (29050 <z_impl_k_poll+0x204>)
   28f3c:	4947      	ldr	r1, [pc, #284]	; (2905c <z_impl_k_poll+0x210>)
   28f3e:	483d      	ldr	r0, [pc, #244]	; (29034 <z_impl_k_poll+0x1e8>)
   28f40:	23ac      	movs	r3, #172	; 0xac
   28f42:	f003 fb2a 	bl	2c59a <printk>
   28f46:	4941      	ldr	r1, [pc, #260]	; (2904c <z_impl_k_poll+0x200>)
   28f48:	4845      	ldr	r0, [pc, #276]	; (29060 <z_impl_k_poll+0x214>)
   28f4a:	f003 fb26 	bl	2c59a <printk>
   28f4e:	4840      	ldr	r0, [pc, #256]	; (29050 <z_impl_k_poll+0x204>)
   28f50:	21ac      	movs	r1, #172	; 0xac
   28f52:	f003 fd63 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   28f56:	f389 8811 	msr	BASEPRI, r9
   28f5a:	f3bf 8f6f 	isb	sy
		return 0;
   28f5e:	2500      	movs	r5, #0
}
   28f60:	4628      	mov	r0, r5
   28f62:	b003      	add	sp, #12
   28f64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   28f68:	2300      	movs	r3, #0
   28f6a:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   28f6e:	ea56 0307 	orrs.w	r3, r6, r7
   28f72:	d118      	bne.n	28fa6 <z_impl_k_poll+0x15a>
   28f74:	4835      	ldr	r0, [pc, #212]	; (2904c <z_impl_k_poll+0x200>)
   28f76:	f7fb ffa7 	bl	24ec8 <z_spin_unlock_valid>
   28f7a:	b968      	cbnz	r0, 28f98 <z_impl_k_poll+0x14c>
   28f7c:	4a34      	ldr	r2, [pc, #208]	; (29050 <z_impl_k_poll+0x204>)
   28f7e:	4937      	ldr	r1, [pc, #220]	; (2905c <z_impl_k_poll+0x210>)
   28f80:	482c      	ldr	r0, [pc, #176]	; (29034 <z_impl_k_poll+0x1e8>)
   28f82:	23ac      	movs	r3, #172	; 0xac
   28f84:	f003 fb09 	bl	2c59a <printk>
   28f88:	4930      	ldr	r1, [pc, #192]	; (2904c <z_impl_k_poll+0x200>)
   28f8a:	4835      	ldr	r0, [pc, #212]	; (29060 <z_impl_k_poll+0x214>)
   28f8c:	f003 fb05 	bl	2c59a <printk>
   28f90:	482f      	ldr	r0, [pc, #188]	; (29050 <z_impl_k_poll+0x204>)
   28f92:	21ac      	movs	r1, #172	; 0xac
   28f94:	f003 fd42 	bl	2ca1c <assert_post_action>
   28f98:	f389 8811 	msr	BASEPRI, r9
   28f9c:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   28fa0:	f06f 050a 	mvn.w	r5, #10
   28fa4:	e7dc      	b.n	28f60 <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   28fa6:	e9cd 6700 	strd	r6, r7, [sp]
   28faa:	4a2e      	ldr	r2, [pc, #184]	; (29064 <z_impl_k_poll+0x218>)
   28fac:	4827      	ldr	r0, [pc, #156]	; (2904c <z_impl_k_poll+0x200>)
   28fae:	4649      	mov	r1, r9
   28fb0:	f7fe fa2e 	bl	27410 <z_pend_curr>
   28fb4:	4605      	mov	r5, r0
	__asm__ volatile(
   28fb6:	f04f 0340 	mov.w	r3, #64	; 0x40
   28fba:	f3ef 8611 	mrs	r6, BASEPRI
   28fbe:	f383 8812 	msr	BASEPRI_MAX, r3
   28fc2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   28fc6:	4821      	ldr	r0, [pc, #132]	; (2904c <z_impl_k_poll+0x200>)
   28fc8:	f7fb ff70 	bl	24eac <z_spin_lock_valid>
   28fcc:	b968      	cbnz	r0, 28fea <z_impl_k_poll+0x19e>
   28fce:	4a20      	ldr	r2, [pc, #128]	; (29050 <z_impl_k_poll+0x204>)
   28fd0:	4920      	ldr	r1, [pc, #128]	; (29054 <z_impl_k_poll+0x208>)
   28fd2:	4818      	ldr	r0, [pc, #96]	; (29034 <z_impl_k_poll+0x1e8>)
   28fd4:	2381      	movs	r3, #129	; 0x81
   28fd6:	f003 fae0 	bl	2c59a <printk>
   28fda:	491c      	ldr	r1, [pc, #112]	; (2904c <z_impl_k_poll+0x200>)
   28fdc:	481e      	ldr	r0, [pc, #120]	; (29058 <z_impl_k_poll+0x20c>)
   28fde:	f003 fadc 	bl	2c59a <printk>
   28fe2:	481b      	ldr	r0, [pc, #108]	; (29050 <z_impl_k_poll+0x204>)
   28fe4:	2181      	movs	r1, #129	; 0x81
   28fe6:	f003 fd19 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   28fea:	4818      	ldr	r0, [pc, #96]	; (2904c <z_impl_k_poll+0x200>)
   28fec:	f7fb ff7c 	bl	24ee8 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   28ff0:	4620      	mov	r0, r4
   28ff2:	4632      	mov	r2, r6
   28ff4:	4641      	mov	r1, r8
   28ff6:	f7ff fc75 	bl	288e4 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   28ffa:	4814      	ldr	r0, [pc, #80]	; (2904c <z_impl_k_poll+0x200>)
   28ffc:	f7fb ff64 	bl	24ec8 <z_spin_unlock_valid>
   29000:	b968      	cbnz	r0, 2901e <z_impl_k_poll+0x1d2>
   29002:	4a13      	ldr	r2, [pc, #76]	; (29050 <z_impl_k_poll+0x204>)
   29004:	4915      	ldr	r1, [pc, #84]	; (2905c <z_impl_k_poll+0x210>)
   29006:	480b      	ldr	r0, [pc, #44]	; (29034 <z_impl_k_poll+0x1e8>)
   29008:	23ac      	movs	r3, #172	; 0xac
   2900a:	f003 fac6 	bl	2c59a <printk>
   2900e:	490f      	ldr	r1, [pc, #60]	; (2904c <z_impl_k_poll+0x200>)
   29010:	4813      	ldr	r0, [pc, #76]	; (29060 <z_impl_k_poll+0x214>)
   29012:	f003 fac2 	bl	2c59a <printk>
   29016:	480e      	ldr	r0, [pc, #56]	; (29050 <z_impl_k_poll+0x204>)
   29018:	21ac      	movs	r1, #172	; 0xac
   2901a:	f003 fcff 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   2901e:	f386 8811 	msr	BASEPRI, r6
   29022:	f3bf 8f6f 	isb	sy
	return swap_rc;
   29026:	e79b      	b.n	28f60 <z_impl_k_poll+0x114>
   29028:	20002040 	.word	0x20002040
   2902c:	00037a24 	.word	0x00037a24
   29030:	00037e66 	.word	0x00037e66
   29034:	00032486 	.word	0x00032486
   29038:	00036e1f 	.word	0x00036e1f
   2903c:	0003805a 	.word	0x0003805a
   29040:	00038070 	.word	0x00038070
   29044:	0003807f 	.word	0x0003807f
   29048:	0003808f 	.word	0x0003808f
   2904c:	20002f20 	.word	0x20002f20
   29050:	00032546 	.word	0x00032546
   29054:	00032598 	.word	0x00032598
   29058:	000325ad 	.word	0x000325ad
   2905c:	0003256c 	.word	0x0003256c
   29060:	00032583 	.word	0x00032583
   29064:	20000664 	.word	0x20000664

00029068 <z_impl_k_poll_signal_raise>:
{
   29068:	b570      	push	{r4, r5, r6, lr}
   2906a:	4604      	mov	r4, r0
   2906c:	460d      	mov	r5, r1
	__asm__ volatile(
   2906e:	f04f 0340 	mov.w	r3, #64	; 0x40
   29072:	f3ef 8611 	mrs	r6, BASEPRI
   29076:	f383 8812 	msr	BASEPRI_MAX, r3
   2907a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2907e:	4821      	ldr	r0, [pc, #132]	; (29104 <z_impl_k_poll_signal_raise+0x9c>)
   29080:	f7fb ff14 	bl	24eac <z_spin_lock_valid>
   29084:	b968      	cbnz	r0, 290a2 <z_impl_k_poll_signal_raise+0x3a>
   29086:	4a20      	ldr	r2, [pc, #128]	; (29108 <z_impl_k_poll_signal_raise+0xa0>)
   29088:	4920      	ldr	r1, [pc, #128]	; (2910c <z_impl_k_poll_signal_raise+0xa4>)
   2908a:	4821      	ldr	r0, [pc, #132]	; (29110 <z_impl_k_poll_signal_raise+0xa8>)
   2908c:	2381      	movs	r3, #129	; 0x81
   2908e:	f003 fa84 	bl	2c59a <printk>
   29092:	491c      	ldr	r1, [pc, #112]	; (29104 <z_impl_k_poll_signal_raise+0x9c>)
   29094:	481f      	ldr	r0, [pc, #124]	; (29114 <z_impl_k_poll_signal_raise+0xac>)
   29096:	f003 fa80 	bl	2c59a <printk>
   2909a:	481b      	ldr	r0, [pc, #108]	; (29108 <z_impl_k_poll_signal_raise+0xa0>)
   2909c:	2181      	movs	r1, #129	; 0x81
   2909e:	f003 fcbd 	bl	2ca1c <assert_post_action>
	z_spin_lock_set_owner(l);
   290a2:	4818      	ldr	r0, [pc, #96]	; (29104 <z_impl_k_poll_signal_raise+0x9c>)
   290a4:	f7fb ff20 	bl	24ee8 <z_spin_lock_set_owner>
	return list->head == list;
   290a8:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   290aa:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   290ac:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   290ae:	4284      	cmp	r4, r0
   290b0:	60a1      	str	r1, [r4, #8]
   290b2:	d117      	bne.n	290e4 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   290b4:	4813      	ldr	r0, [pc, #76]	; (29104 <z_impl_k_poll_signal_raise+0x9c>)
   290b6:	f7fb ff07 	bl	24ec8 <z_spin_unlock_valid>
   290ba:	b968      	cbnz	r0, 290d8 <z_impl_k_poll_signal_raise+0x70>
   290bc:	4a12      	ldr	r2, [pc, #72]	; (29108 <z_impl_k_poll_signal_raise+0xa0>)
   290be:	4916      	ldr	r1, [pc, #88]	; (29118 <z_impl_k_poll_signal_raise+0xb0>)
   290c0:	4813      	ldr	r0, [pc, #76]	; (29110 <z_impl_k_poll_signal_raise+0xa8>)
   290c2:	23ac      	movs	r3, #172	; 0xac
   290c4:	f003 fa69 	bl	2c59a <printk>
   290c8:	490e      	ldr	r1, [pc, #56]	; (29104 <z_impl_k_poll_signal_raise+0x9c>)
   290ca:	4814      	ldr	r0, [pc, #80]	; (2911c <z_impl_k_poll_signal_raise+0xb4>)
   290cc:	f003 fa65 	bl	2c59a <printk>
   290d0:	480d      	ldr	r0, [pc, #52]	; (29108 <z_impl_k_poll_signal_raise+0xa0>)
   290d2:	21ac      	movs	r1, #172	; 0xac
   290d4:	f003 fca2 	bl	2ca1c <assert_post_action>
	__asm__ volatile(
   290d8:	f386 8811 	msr	BASEPRI, r6
   290dc:	f3bf 8f6f 	isb	sy
		return 0;
   290e0:	2400      	movs	r4, #0
   290e2:	e00d      	b.n	29100 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   290e4:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   290e8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   290ea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   290ec:	2300      	movs	r3, #0
	node->prev = NULL;
   290ee:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   290f2:	f7ff fde7 	bl	28cc4 <signal_poll_event>
	z_reschedule(&lock, key);
   290f6:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   290f8:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   290fa:	4802      	ldr	r0, [pc, #8]	; (29104 <z_impl_k_poll_signal_raise+0x9c>)
   290fc:	f7fd fd36 	bl	26b6c <z_reschedule>
}
   29100:	4620      	mov	r0, r4
   29102:	bd70      	pop	{r4, r5, r6, pc}
   29104:	20002f20 	.word	0x20002f20
   29108:	00032546 	.word	0x00032546
   2910c:	00032598 	.word	0x00032598
   29110:	00032486 	.word	0x00032486
   29114:	000325ad 	.word	0x000325ad
   29118:	0003256c 	.word	0x0003256c
   2911c:	00032583 	.word	0x00032583

00029120 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   29120:	b573      	push	{r0, r1, r4, r5, r6, lr}
   29122:	4606      	mov	r6, r0
   29124:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   29126:	f007 f89d 	bl	30264 <k_is_in_isr>
   2912a:	b988      	cbnz	r0, 29150 <z_thread_aligned_alloc+0x30>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   2912c:	4b15      	ldr	r3, [pc, #84]	; (29184 <z_thread_aligned_alloc+0x64>)
   2912e:	689b      	ldr	r3, [r3, #8]
   29130:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
	}

	if (heap != NULL) {
   29134:	b31c      	cbz	r4, 2917e <z_thread_aligned_alloc+0x5e>
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   29136:	2204      	movs	r2, #4
   29138:	18aa      	adds	r2, r5, r2
   2913a:	d209      	bcs.n	29150 <z_thread_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   2913c:	2000      	movs	r0, #0
   2913e:	2100      	movs	r1, #0
   29140:	e9cd 0100 	strd	r0, r1, [sp]
   29144:	f046 0104 	orr.w	r1, r6, #4
   29148:	4620      	mov	r0, r4
   2914a:	f7fb fc57 	bl	249fc <k_heap_aligned_alloc>
	if (mem == NULL) {
   2914e:	b908      	cbnz	r0, 29154 <z_thread_aligned_alloc+0x34>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   29150:	2400      	movs	r4, #0
	}

	return ret;
   29152:	e014      	b.n	2917e <z_thread_aligned_alloc+0x5e>
	*heap_ref = heap;
   29154:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   29156:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   29158:	b18e      	cbz	r6, 2917e <z_thread_aligned_alloc+0x5e>
   2915a:	1e73      	subs	r3, r6, #1
   2915c:	421c      	tst	r4, r3
   2915e:	d00e      	beq.n	2917e <z_thread_aligned_alloc+0x5e>
   29160:	4a09      	ldr	r2, [pc, #36]	; (29188 <z_thread_aligned_alloc+0x68>)
   29162:	490a      	ldr	r1, [pc, #40]	; (2918c <z_thread_aligned_alloc+0x6c>)
   29164:	480a      	ldr	r0, [pc, #40]	; (29190 <z_thread_aligned_alloc+0x70>)
   29166:	2325      	movs	r3, #37	; 0x25
   29168:	f003 fa17 	bl	2c59a <printk>
   2916c:	4809      	ldr	r0, [pc, #36]	; (29194 <z_thread_aligned_alloc+0x74>)
   2916e:	4621      	mov	r1, r4
   29170:	4632      	mov	r2, r6
   29172:	f003 fa12 	bl	2c59a <printk>
   29176:	4804      	ldr	r0, [pc, #16]	; (29188 <z_thread_aligned_alloc+0x68>)
   29178:	2125      	movs	r1, #37	; 0x25
   2917a:	f003 fc4f 	bl	2ca1c <assert_post_action>
}
   2917e:	4620      	mov	r0, r4
   29180:	b002      	add	sp, #8
   29182:	bd70      	pop	{r4, r5, r6, pc}
   29184:	20002040 	.word	0x20002040
   29188:	0003809c 	.word	0x0003809c
   2918c:	000380c0 	.word	0x000380c0
   29190:	00032486 	.word	0x00032486
   29194:	000380f2 	.word	0x000380f2

00029198 <nrf_cc3xx_platform_init>:
   29198:	b510      	push	{r4, lr}
   2919a:	4c0c      	ldr	r4, [pc, #48]	; (291cc <nrf_cc3xx_platform_init+0x34>)
   2919c:	6823      	ldr	r3, [r4, #0]
   2919e:	b113      	cbz	r3, 291a6 <nrf_cc3xx_platform_init+0xe>
   291a0:	4b0b      	ldr	r3, [pc, #44]	; (291d0 <nrf_cc3xx_platform_init+0x38>)
   291a2:	681b      	ldr	r3, [r3, #0]
   291a4:	b92b      	cbnz	r3, 291b2 <nrf_cc3xx_platform_init+0x1a>
   291a6:	f000 fe73 	bl	29e90 <CC_LibInit>
   291aa:	b930      	cbnz	r0, 291ba <nrf_cc3xx_platform_init+0x22>
   291ac:	4b08      	ldr	r3, [pc, #32]	; (291d0 <nrf_cc3xx_platform_init+0x38>)
   291ae:	2201      	movs	r2, #1
   291b0:	601a      	str	r2, [r3, #0]
   291b2:	2301      	movs	r3, #1
   291b4:	6023      	str	r3, [r4, #0]
   291b6:	2000      	movs	r0, #0
   291b8:	bd10      	pop	{r4, pc}
   291ba:	3801      	subs	r0, #1
   291bc:	2806      	cmp	r0, #6
   291be:	d901      	bls.n	291c4 <nrf_cc3xx_platform_init+0x2c>
   291c0:	4804      	ldr	r0, [pc, #16]	; (291d4 <nrf_cc3xx_platform_init+0x3c>)
   291c2:	bd10      	pop	{r4, pc}
   291c4:	4b04      	ldr	r3, [pc, #16]	; (291d8 <nrf_cc3xx_platform_init+0x40>)
   291c6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
   291ca:	bd10      	pop	{r4, pc}
   291cc:	20002f24 	.word	0x20002f24
   291d0:	20002f28 	.word	0x20002f28
   291d4:	ffff8ffe 	.word	0xffff8ffe
   291d8:	00031ef4 	.word	0x00031ef4

000291dc <nrf_cc3xx_platform_abort>:
   291dc:	f3bf 8f4f 	dsb	sy
   291e0:	4905      	ldr	r1, [pc, #20]	; (291f8 <nrf_cc3xx_platform_abort+0x1c>)
   291e2:	4b06      	ldr	r3, [pc, #24]	; (291fc <nrf_cc3xx_platform_abort+0x20>)
   291e4:	68ca      	ldr	r2, [r1, #12]
   291e6:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   291ea:	4313      	orrs	r3, r2
   291ec:	60cb      	str	r3, [r1, #12]
   291ee:	f3bf 8f4f 	dsb	sy
   291f2:	bf00      	nop
   291f4:	e7fd      	b.n	291f2 <nrf_cc3xx_platform_abort+0x16>
   291f6:	bf00      	nop
   291f8:	e000ed00 	.word	0xe000ed00
   291fc:	05fa0004 	.word	0x05fa0004

00029200 <CC_PalAbort>:
   29200:	b4f0      	push	{r4, r5, r6, r7}
   29202:	4f09      	ldr	r7, [pc, #36]	; (29228 <CC_PalAbort+0x28>)
   29204:	4e09      	ldr	r6, [pc, #36]	; (2922c <CC_PalAbort+0x2c>)
   29206:	4c0a      	ldr	r4, [pc, #40]	; (29230 <CC_PalAbort+0x30>)
   29208:	4a0a      	ldr	r2, [pc, #40]	; (29234 <CC_PalAbort+0x34>)
   2920a:	4d0b      	ldr	r5, [pc, #44]	; (29238 <CC_PalAbort+0x38>)
   2920c:	490b      	ldr	r1, [pc, #44]	; (2923c <CC_PalAbort+0x3c>)
   2920e:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
   29212:	603b      	str	r3, [r7, #0]
   29214:	6852      	ldr	r2, [r2, #4]
   29216:	6033      	str	r3, [r6, #0]
   29218:	6023      	str	r3, [r4, #0]
   2921a:	2400      	movs	r4, #0
   2921c:	602b      	str	r3, [r5, #0]
   2921e:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
   29222:	bcf0      	pop	{r4, r5, r6, r7}
   29224:	4710      	bx	r2
   29226:	bf00      	nop
   29228:	5002b400 	.word	0x5002b400
   2922c:	5002b404 	.word	0x5002b404
   29230:	5002b408 	.word	0x5002b408
   29234:	2000066c 	.word	0x2000066c
   29238:	5002b40c 	.word	0x5002b40c
   2923c:	5002a000 	.word	0x5002a000

00029240 <nrf_cc3xx_platform_set_abort>:
   29240:	e9d0 1200 	ldrd	r1, r2, [r0]
   29244:	4b01      	ldr	r3, [pc, #4]	; (2924c <nrf_cc3xx_platform_set_abort+0xc>)
   29246:	e9c3 1200 	strd	r1, r2, [r3]
   2924a:	4770      	bx	lr
   2924c:	2000066c 	.word	0x2000066c

00029250 <nrf_cc3xx_platform_ctr_drbg_init>:
   29250:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29254:	4c15      	ldr	r4, [pc, #84]	; (292ac <nrf_cc3xx_platform_ctr_drbg_init+0x5c>)
   29256:	f8df 805c 	ldr.w	r8, [pc, #92]	; 292b4 <nrf_cc3xx_platform_ctr_drbg_init+0x64>
   2925a:	2800      	cmp	r0, #0
   2925c:	bf18      	it	ne
   2925e:	4604      	movne	r4, r0
   29260:	b083      	sub	sp, #12
   29262:	6820      	ldr	r0, [r4, #0]
   29264:	4540      	cmp	r0, r8
   29266:	d01d      	beq.n	292a4 <nrf_cc3xx_platform_ctr_drbg_init+0x54>
   29268:	460d      	mov	r5, r1
   2926a:	4620      	mov	r0, r4
   2926c:	f44f 71de 	mov.w	r1, #444	; 0x1bc
   29270:	f104 0904 	add.w	r9, r4, #4
   29274:	4616      	mov	r6, r2
   29276:	f504 778c 	add.w	r7, r4, #280	; 0x118
   2927a:	f000 f8d3 	bl	29424 <mbedtls_platform_zeroize>
   2927e:	4648      	mov	r0, r9
   29280:	f000 fcf2 	bl	29c68 <cc_mbedtls_entropy_init>
   29284:	4638      	mov	r0, r7
   29286:	f000 fb1f 	bl	298c8 <cc_mbedtls_ctr_drbg_init>
   2928a:	4909      	ldr	r1, [pc, #36]	; (292b0 <nrf_cc3xx_platform_ctr_drbg_init+0x60>)
   2928c:	9600      	str	r6, [sp, #0]
   2928e:	464a      	mov	r2, r9
   29290:	4638      	mov	r0, r7
   29292:	462b      	mov	r3, r5
   29294:	f000 fb2e 	bl	298f4 <cc_mbedtls_ctr_drbg_seed>
   29298:	b908      	cbnz	r0, 2929e <nrf_cc3xx_platform_ctr_drbg_init+0x4e>
   2929a:	f8c4 8000 	str.w	r8, [r4]
   2929e:	b003      	add	sp, #12
   292a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   292a4:	2000      	movs	r0, #0
   292a6:	b003      	add	sp, #12
   292a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   292ac:	20004184 	.word	0x20004184
   292b0:	00029ce5 	.word	0x00029ce5
   292b4:	5ac9bca5 	.word	0x5ac9bca5

000292b8 <nrf_cc3xx_platform_ctr_drbg_get>:
   292b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   292ba:	4c0d      	ldr	r4, [pc, #52]	; (292f0 <nrf_cc3xx_platform_ctr_drbg_get+0x38>)
   292bc:	4e0d      	ldr	r6, [pc, #52]	; (292f4 <nrf_cc3xx_platform_ctr_drbg_get+0x3c>)
   292be:	2800      	cmp	r0, #0
   292c0:	bf08      	it	eq
   292c2:	4620      	moveq	r0, r4
   292c4:	b083      	sub	sp, #12
   292c6:	6807      	ldr	r7, [r0, #0]
   292c8:	42b7      	cmp	r7, r6
   292ca:	d10e      	bne.n	292ea <nrf_cc3xx_platform_ctr_drbg_get+0x32>
   292cc:	2600      	movs	r6, #0
   292ce:	461d      	mov	r5, r3
   292d0:	f500 708c 	add.w	r0, r0, #280	; 0x118
   292d4:	9600      	str	r6, [sp, #0]
   292d6:	4633      	mov	r3, r6
   292d8:	4614      	mov	r4, r2
   292da:	f000 fb57 	bl	2998c <cc_mbedtls_ctr_drbg_random_with_add>
   292de:	2800      	cmp	r0, #0
   292e0:	bf18      	it	ne
   292e2:	4634      	movne	r4, r6
   292e4:	602c      	str	r4, [r5, #0]
   292e6:	b003      	add	sp, #12
   292e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   292ea:	4803      	ldr	r0, [pc, #12]	; (292f8 <nrf_cc3xx_platform_ctr_drbg_get+0x40>)
   292ec:	e7fb      	b.n	292e6 <nrf_cc3xx_platform_ctr_drbg_get+0x2e>
   292ee:	bf00      	nop
   292f0:	20004184 	.word	0x20004184
   292f4:	5ac9bca5 	.word	0x5ac9bca5
   292f8:	ffff8fe8 	.word	0xffff8fe8

000292fc <mutex_free>:
   292fc:	b510      	push	{r4, lr}
   292fe:	4604      	mov	r4, r0
   29300:	b130      	cbz	r0, 29310 <mutex_free+0x14>
   29302:	6863      	ldr	r3, [r4, #4]
   29304:	06db      	lsls	r3, r3, #27
   29306:	d502      	bpl.n	2930e <mutex_free+0x12>
   29308:	2300      	movs	r3, #0
   2930a:	6023      	str	r3, [r4, #0]
   2930c:	6063      	str	r3, [r4, #4]
   2930e:	bd10      	pop	{r4, pc}
   29310:	4b02      	ldr	r3, [pc, #8]	; (2931c <mutex_free+0x20>)
   29312:	4803      	ldr	r0, [pc, #12]	; (29320 <mutex_free+0x24>)
   29314:	685b      	ldr	r3, [r3, #4]
   29316:	4798      	blx	r3
   29318:	e7f3      	b.n	29302 <mutex_free+0x6>
   2931a:	bf00      	nop
   2931c:	2000066c 	.word	0x2000066c
   29320:	00031f10 	.word	0x00031f10

00029324 <mutex_unlock>:
   29324:	b168      	cbz	r0, 29342 <mutex_unlock+0x1e>
   29326:	6843      	ldr	r3, [r0, #4]
   29328:	b13b      	cbz	r3, 2933a <mutex_unlock+0x16>
   2932a:	06db      	lsls	r3, r3, #27
   2932c:	d507      	bpl.n	2933e <mutex_unlock+0x1a>
   2932e:	f3bf 8f5f 	dmb	sy
   29332:	2300      	movs	r3, #0
   29334:	6003      	str	r3, [r0, #0]
   29336:	4618      	mov	r0, r3
   29338:	4770      	bx	lr
   2933a:	4803      	ldr	r0, [pc, #12]	; (29348 <mutex_unlock+0x24>)
   2933c:	4770      	bx	lr
   2933e:	4803      	ldr	r0, [pc, #12]	; (2934c <mutex_unlock+0x28>)
   29340:	4770      	bx	lr
   29342:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   29346:	4770      	bx	lr
   29348:	ffff8fea 	.word	0xffff8fea
   2934c:	ffff8fe9 	.word	0xffff8fe9

00029350 <mutex_init>:
   29350:	b510      	push	{r4, lr}
   29352:	4604      	mov	r4, r0
   29354:	b120      	cbz	r0, 29360 <mutex_init+0x10>
   29356:	2200      	movs	r2, #0
   29358:	2311      	movs	r3, #17
   2935a:	6022      	str	r2, [r4, #0]
   2935c:	6063      	str	r3, [r4, #4]
   2935e:	bd10      	pop	{r4, pc}
   29360:	4801      	ldr	r0, [pc, #4]	; (29368 <mutex_init+0x18>)
   29362:	f7ff ff4d 	bl	29200 <CC_PalAbort>
   29366:	e7f6      	b.n	29356 <mutex_init+0x6>
   29368:	00031f38 	.word	0x00031f38

0002936c <mutex_lock>:
   2936c:	b1c0      	cbz	r0, 293a0 <mutex_lock+0x34>
   2936e:	6843      	ldr	r3, [r0, #4]
   29370:	b1a3      	cbz	r3, 2939c <mutex_lock+0x30>
   29372:	06db      	lsls	r3, r3, #27
   29374:	d510      	bpl.n	29398 <mutex_lock+0x2c>
   29376:	2201      	movs	r2, #1
   29378:	f3bf 8f5b 	dmb	ish
   2937c:	e850 3f00 	ldrex	r3, [r0]
   29380:	e840 2100 	strex	r1, r2, [r0]
   29384:	2900      	cmp	r1, #0
   29386:	d1f9      	bne.n	2937c <mutex_lock+0x10>
   29388:	f3bf 8f5b 	dmb	ish
   2938c:	2b01      	cmp	r3, #1
   2938e:	d0f3      	beq.n	29378 <mutex_lock+0xc>
   29390:	f3bf 8f5f 	dmb	sy
   29394:	2000      	movs	r0, #0
   29396:	4770      	bx	lr
   29398:	4803      	ldr	r0, [pc, #12]	; (293a8 <mutex_lock+0x3c>)
   2939a:	4770      	bx	lr
   2939c:	4803      	ldr	r0, [pc, #12]	; (293ac <mutex_lock+0x40>)
   2939e:	4770      	bx	lr
   293a0:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
   293a4:	4770      	bx	lr
   293a6:	bf00      	nop
   293a8:	ffff8fe9 	.word	0xffff8fe9
   293ac:	ffff8fea 	.word	0xffff8fea

000293b0 <nrf_cc3xx_platform_set_mutexes>:
   293b0:	b570      	push	{r4, r5, r6, lr}
   293b2:	e9d0 2300 	ldrd	r2, r3, [r0]
   293b6:	4c13      	ldr	r4, [pc, #76]	; (29404 <nrf_cc3xx_platform_set_mutexes+0x54>)
   293b8:	4d13      	ldr	r5, [pc, #76]	; (29408 <nrf_cc3xx_platform_set_mutexes+0x58>)
   293ba:	e9c4 2300 	strd	r2, r3, [r4]
   293be:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
   293c2:	e9c4 6302 	strd	r6, r3, [r4, #8]
   293c6:	4b11      	ldr	r3, [pc, #68]	; (2940c <nrf_cc3xx_platform_set_mutexes+0x5c>)
   293c8:	6808      	ldr	r0, [r1, #0]
   293ca:	6018      	str	r0, [r3, #0]
   293cc:	6848      	ldr	r0, [r1, #4]
   293ce:	6058      	str	r0, [r3, #4]
   293d0:	6888      	ldr	r0, [r1, #8]
   293d2:	6098      	str	r0, [r3, #8]
   293d4:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
   293d8:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
   293dc:	60de      	str	r6, [r3, #12]
   293de:	6118      	str	r0, [r3, #16]
   293e0:	06cb      	lsls	r3, r1, #27
   293e2:	d50d      	bpl.n	29400 <nrf_cc3xx_platform_set_mutexes+0x50>
   293e4:	2300      	movs	r3, #0
   293e6:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
   293ea:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
   293ee:	f505 7088 	add.w	r0, r5, #272	; 0x110
   293f2:	4790      	blx	r2
   293f4:	6823      	ldr	r3, [r4, #0]
   293f6:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
   293fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   293fe:	4718      	bx	r3
   29400:	bd70      	pop	{r4, r5, r6, pc}
   29402:	bf00      	nop
   29404:	2000067c 	.word	0x2000067c
   29408:	20004184 	.word	0x20004184
   2940c:	2000068c 	.word	0x2000068c

00029410 <mbedtls_zeroize_internal>:
   29410:	b138      	cbz	r0, 29422 <mbedtls_zeroize_internal+0x12>
   29412:	b131      	cbz	r1, 29422 <mbedtls_zeroize_internal+0x12>
   29414:	4401      	add	r1, r0
   29416:	2200      	movs	r2, #0
   29418:	4603      	mov	r3, r0
   2941a:	3001      	adds	r0, #1
   2941c:	4281      	cmp	r1, r0
   2941e:	701a      	strb	r2, [r3, #0]
   29420:	d1fa      	bne.n	29418 <mbedtls_zeroize_internal+0x8>
   29422:	4770      	bx	lr

00029424 <mbedtls_platform_zeroize>:
   29424:	b138      	cbz	r0, 29436 <mbedtls_platform_zeroize+0x12>
   29426:	b131      	cbz	r1, 29436 <mbedtls_platform_zeroize+0x12>
   29428:	4401      	add	r1, r0
   2942a:	2200      	movs	r2, #0
   2942c:	4603      	mov	r3, r0
   2942e:	3001      	adds	r0, #1
   29430:	4288      	cmp	r0, r1
   29432:	701a      	strb	r2, [r3, #0]
   29434:	d1fa      	bne.n	2942c <mbedtls_platform_zeroize+0x8>
   29436:	4770      	bx	lr

00029438 <block_cipher_df>:
   29438:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2943c:	f5b2 7fc0 	cmp.w	r2, #384	; 0x180
   29440:	b0b1      	sub	sp, #196	; 0xc4
   29442:	f200 812e 	bhi.w	296a2 <block_cipher_df+0x26a>
   29446:	f8df 926c 	ldr.w	r9, [pc, #620]	; 296b4 <block_cipher_df+0x27c>
   2944a:	4614      	mov	r4, r2
   2944c:	460d      	mov	r5, r1
   2944e:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
   29452:	2100      	movs	r1, #0
   29454:	4682      	mov	sl, r0
   29456:	4648      	mov	r0, r9
   29458:	f007 f8e7 	bl	3062a <memset>
   2945c:	a813      	add	r0, sp, #76	; 0x4c
   2945e:	f001 f9e5 	bl	2a82c <cc_mbedtls_aes_init>
   29462:	2600      	movs	r6, #0
   29464:	4629      	mov	r1, r5
   29466:	2320      	movs	r3, #32
   29468:	ba65      	rev16	r5, r4
   2946a:	4622      	mov	r2, r4
   2946c:	f109 0018 	add.w	r0, r9, #24
   29470:	f8a9 5012 	strh.w	r5, [r9, #18]
   29474:	f889 3017 	strb.w	r3, [r9, #23]
   29478:	f8a9 6010 	strh.w	r6, [r9, #16]
   2947c:	f007 f8ad 	bl	305da <memcpy>
   29480:	eb09 0304 	add.w	r3, r9, r4
   29484:	2280      	movs	r2, #128	; 0x80
   29486:	4d88      	ldr	r5, [pc, #544]	; (296a8 <block_cipher_df+0x270>)
   29488:	761a      	strb	r2, [r3, #24]
   2948a:	4b88      	ldr	r3, [pc, #544]	; (296ac <block_cipher_df+0x274>)
   2948c:	9503      	str	r5, [sp, #12]
   2948e:	9304      	str	r3, [sp, #16]
   29490:	a813      	add	r0, sp, #76	; 0x4c
   29492:	f103 3308 	add.w	r3, r3, #134744072	; 0x8080808
   29496:	a903      	add	r1, sp, #12
   29498:	f105 3508 	add.w	r5, r5, #134744072	; 0x8080808
   2949c:	e9cd 5305 	strd	r5, r3, [sp, #20]
   294a0:	f001 f9da 	bl	2a858 <cc_mbedtls_aes_setkey_enc>
   294a4:	4680      	mov	r8, r0
   294a6:	2800      	cmp	r0, #0
   294a8:	f040 80da 	bne.w	29660 <block_cipher_df+0x228>
   294ac:	f104 0319 	add.w	r3, r4, #25
   294b0:	9301      	str	r3, [sp, #4]
   294b2:	af07      	add	r7, sp, #28
   294b4:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   294b8:	2210      	movs	r2, #16
   294ba:	2100      	movs	r1, #0
   294bc:	4638      	mov	r0, r7
   294be:	f007 f8b4 	bl	3062a <memset>
   294c2:	4c7b      	ldr	r4, [pc, #492]	; (296b0 <block_cipher_df+0x278>)
   294c4:	9d01      	ldr	r5, [sp, #4]
   294c6:	f89d 601d 	ldrb.w	r6, [sp, #29]
   294ca:	f814 1c0f 	ldrb.w	r1, [r4, #-15]
   294ce:	f89d e01c 	ldrb.w	lr, [sp, #28]
   294d2:	f814 3c10 	ldrb.w	r3, [r4, #-16]
   294d6:	f89d c01f 	ldrb.w	ip, [sp, #31]
   294da:	f89d 001e 	ldrb.w	r0, [sp, #30]
   294de:	f814 2c0e 	ldrb.w	r2, [r4, #-14]
   294e2:	404e      	eors	r6, r1
   294e4:	f814 1c0d 	ldrb.w	r1, [r4, #-13]
   294e8:	f88d 601d 	strb.w	r6, [sp, #29]
   294ec:	ea8e 0303 	eor.w	r3, lr, r3
   294f0:	4050      	eors	r0, r2
   294f2:	ea8c 0101 	eor.w	r1, ip, r1
   294f6:	f89d 2020 	ldrb.w	r2, [sp, #32]
   294fa:	f88d 301c 	strb.w	r3, [sp, #28]
   294fe:	f814 3c0c 	ldrb.w	r3, [r4, #-12]
   29502:	f89d c022 	ldrb.w	ip, [sp, #34]	; 0x22
   29506:	f814 6c0a 	ldrb.w	r6, [r4, #-10]
   2950a:	f88d 001e 	strb.w	r0, [sp, #30]
   2950e:	f88d 101f 	strb.w	r1, [sp, #31]
   29512:	f89d 0023 	ldrb.w	r0, [sp, #35]	; 0x23
   29516:	f814 1c09 	ldrb.w	r1, [r4, #-9]
   2951a:	f89d e021 	ldrb.w	lr, [sp, #33]	; 0x21
   2951e:	405a      	eors	r2, r3
   29520:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   29524:	f88d 2020 	strb.w	r2, [sp, #32]
   29528:	ea8c 0606 	eor.w	r6, ip, r6
   2952c:	4048      	eors	r0, r1
   2952e:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   29532:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   29536:	f89d 2025 	ldrb.w	r2, [sp, #37]	; 0x25
   2953a:	f88d 6022 	strb.w	r6, [sp, #34]	; 0x22
   2953e:	ea8e 0303 	eor.w	r3, lr, r3
   29542:	f814 6c06 	ldrb.w	r6, [r4, #-6]
   29546:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
   2954a:	ea8c 0101 	eor.w	r1, ip, r1
   2954e:	f89d 3026 	ldrb.w	r3, [sp, #38]	; 0x26
   29552:	f814 cc07 	ldrb.w	ip, [r4, #-7]
   29556:	f88d 0023 	strb.w	r0, [sp, #35]	; 0x23
   2955a:	ea82 020c 	eor.w	r2, r2, ip
   2955e:	4073      	eors	r3, r6
   29560:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
   29564:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
   29568:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   2956c:	f89d 0029 	ldrb.w	r0, [sp, #41]	; 0x29
   29570:	f89d e027 	ldrb.w	lr, [sp, #39]	; 0x27
   29574:	f814 2c05 	ldrb.w	r2, [r4, #-5]
   29578:	f814 1c03 	ldrb.w	r1, [r4, #-3]
   2957c:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   29580:	f814 3c04 	ldrb.w	r3, [r4, #-4]
   29584:	f89d c02a 	ldrb.w	ip, [sp, #42]	; 0x2a
   29588:	ea8e 0202 	eor.w	r2, lr, r2
   2958c:	4041      	eors	r1, r0
   2958e:	f814 0c02 	ldrb.w	r0, [r4, #-2]
   29592:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   29596:	4073      	eors	r3, r6
   29598:	f814 2c01 	ldrb.w	r2, [r4, #-1]
   2959c:	f89d 602b 	ldrb.w	r6, [sp, #43]	; 0x2b
   295a0:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
   295a4:	ea8c 0000 	eor.w	r0, ip, r0
   295a8:	4056      	eors	r6, r2
   295aa:	f88d 1029 	strb.w	r1, [sp, #41]	; 0x29
   295ae:	f88d 002a 	strb.w	r0, [sp, #42]	; 0x2a
   295b2:	463b      	mov	r3, r7
   295b4:	463a      	mov	r2, r7
   295b6:	2101      	movs	r1, #1
   295b8:	a813      	add	r0, sp, #76	; 0x4c
   295ba:	f88d 602b 	strb.w	r6, [sp, #43]	; 0x2b
   295be:	f001 f965 	bl	2a88c <cc_mbedtls_aes_crypt_ecb>
   295c2:	2d10      	cmp	r5, #16
   295c4:	bf94      	ite	ls
   295c6:	1b6d      	subls	r5, r5, r5
   295c8:	3d10      	subhi	r5, #16
   295ca:	2800      	cmp	r0, #0
   295cc:	d167      	bne.n	2969e <block_cipher_df+0x266>
   295ce:	3410      	adds	r4, #16
   295d0:	2d00      	cmp	r5, #0
   295d2:	f47f af78 	bne.w	294c6 <block_cipher_df+0x8e>
   295d6:	eb0b 0008 	add.w	r0, fp, r8
   295da:	2210      	movs	r2, #16
   295dc:	4639      	mov	r1, r7
   295de:	f006 fffc 	bl	305da <memcpy>
   295e2:	f899 3003 	ldrb.w	r3, [r9, #3]
   295e6:	f108 0810 	add.w	r8, r8, #16
   295ea:	3301      	adds	r3, #1
   295ec:	f1b8 0f20 	cmp.w	r8, #32
   295f0:	f889 3003 	strb.w	r3, [r9, #3]
   295f4:	f47f af60 	bne.w	294b8 <block_cipher_df+0x80>
   295f8:	2280      	movs	r2, #128	; 0x80
   295fa:	4659      	mov	r1, fp
   295fc:	a813      	add	r0, sp, #76	; 0x4c
   295fe:	f001 f92b 	bl	2a858 <cc_mbedtls_aes_setkey_enc>
   29602:	4680      	mov	r8, r0
   29604:	bb78      	cbnz	r0, 29666 <block_cipher_df+0x22e>
   29606:	f10a 0520 	add.w	r5, sl, #32
   2960a:	4654      	mov	r4, sl
   2960c:	ab0f      	add	r3, sp, #60	; 0x3c
   2960e:	461a      	mov	r2, r3
   29610:	2101      	movs	r1, #1
   29612:	a813      	add	r0, sp, #76	; 0x4c
   29614:	f001 f93a 	bl	2a88c <cc_mbedtls_aes_crypt_ecb>
   29618:	2210      	movs	r2, #16
   2961a:	4680      	mov	r8, r0
   2961c:	a90f      	add	r1, sp, #60	; 0x3c
   2961e:	4620      	mov	r0, r4
   29620:	4414      	add	r4, r2
   29622:	f1b8 0f00 	cmp.w	r8, #0
   29626:	d11e      	bne.n	29666 <block_cipher_df+0x22e>
   29628:	f006 ffd7 	bl	305da <memcpy>
   2962c:	42ac      	cmp	r4, r5
   2962e:	d1ed      	bne.n	2960c <block_cipher_df+0x1d4>
   29630:	a813      	add	r0, sp, #76	; 0x4c
   29632:	f001 f90b 	bl	2a84c <cc_mbedtls_aes_free>
   29636:	481f      	ldr	r0, [pc, #124]	; (296b4 <block_cipher_df+0x27c>)
   29638:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   2963c:	f7ff fef2 	bl	29424 <mbedtls_platform_zeroize>
   29640:	4658      	mov	r0, fp
   29642:	2120      	movs	r1, #32
   29644:	f7ff feee 	bl	29424 <mbedtls_platform_zeroize>
   29648:	a803      	add	r0, sp, #12
   2964a:	2110      	movs	r1, #16
   2964c:	f7ff feea 	bl	29424 <mbedtls_platform_zeroize>
   29650:	4638      	mov	r0, r7
   29652:	2110      	movs	r1, #16
   29654:	f7ff fee6 	bl	29424 <mbedtls_platform_zeroize>
   29658:	4640      	mov	r0, r8
   2965a:	b031      	add	sp, #196	; 0xc4
   2965c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29660:	af07      	add	r7, sp, #28
   29662:	f10d 0b2c 	add.w	fp, sp, #44	; 0x2c
   29666:	a813      	add	r0, sp, #76	; 0x4c
   29668:	f001 f8f0 	bl	2a84c <cc_mbedtls_aes_free>
   2966c:	4811      	ldr	r0, [pc, #68]	; (296b4 <block_cipher_df+0x27c>)
   2966e:	f44f 71d0 	mov.w	r1, #416	; 0x1a0
   29672:	f7ff fed7 	bl	29424 <mbedtls_platform_zeroize>
   29676:	4658      	mov	r0, fp
   29678:	2120      	movs	r1, #32
   2967a:	f7ff fed3 	bl	29424 <mbedtls_platform_zeroize>
   2967e:	a803      	add	r0, sp, #12
   29680:	2110      	movs	r1, #16
   29682:	f7ff fecf 	bl	29424 <mbedtls_platform_zeroize>
   29686:	4638      	mov	r0, r7
   29688:	2110      	movs	r1, #16
   2968a:	f7ff fecb 	bl	29424 <mbedtls_platform_zeroize>
   2968e:	4650      	mov	r0, sl
   29690:	2120      	movs	r1, #32
   29692:	f7ff fec7 	bl	29424 <mbedtls_platform_zeroize>
   29696:	4640      	mov	r0, r8
   29698:	b031      	add	sp, #196	; 0xc4
   2969a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2969e:	4680      	mov	r8, r0
   296a0:	e7e1      	b.n	29666 <block_cipher_df+0x22e>
   296a2:	f06f 0837 	mvn.w	r8, #55	; 0x37
   296a6:	e7f6      	b.n	29696 <block_cipher_df+0x25e>
   296a8:	03020100 	.word	0x03020100
   296ac:	07060504 	.word	0x07060504
   296b0:	20002f4c 	.word	0x20002f4c
   296b4:	20002f3c 	.word	0x20002f3c

000296b8 <ctr_drbg_update_internal>:
   296b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   296bc:	b088      	sub	sp, #32
   296be:	4604      	mov	r4, r0
   296c0:	2220      	movs	r2, #32
   296c2:	460d      	mov	r5, r1
   296c4:	4668      	mov	r0, sp
   296c6:	2100      	movs	r1, #0
   296c8:	eb04 0802 	add.w	r8, r4, r2
   296cc:	f006 ffad 	bl	3062a <memset>
   296d0:	466e      	mov	r6, sp
   296d2:	7be2      	ldrb	r2, [r4, #15]
   296d4:	3201      	adds	r2, #1
   296d6:	b2d2      	uxtb	r2, r2
   296d8:	73e2      	strb	r2, [r4, #15]
   296da:	2a00      	cmp	r2, #0
   296dc:	d14d      	bne.n	2977a <ctr_drbg_update_internal+0xc2>
   296de:	7ba2      	ldrb	r2, [r4, #14]
   296e0:	3201      	adds	r2, #1
   296e2:	b2d2      	uxtb	r2, r2
   296e4:	73a2      	strb	r2, [r4, #14]
   296e6:	2a00      	cmp	r2, #0
   296e8:	d147      	bne.n	2977a <ctr_drbg_update_internal+0xc2>
   296ea:	7b63      	ldrb	r3, [r4, #13]
   296ec:	3301      	adds	r3, #1
   296ee:	b2db      	uxtb	r3, r3
   296f0:	7363      	strb	r3, [r4, #13]
   296f2:	2b00      	cmp	r3, #0
   296f4:	d141      	bne.n	2977a <ctr_drbg_update_internal+0xc2>
   296f6:	7b23      	ldrb	r3, [r4, #12]
   296f8:	3301      	adds	r3, #1
   296fa:	b2db      	uxtb	r3, r3
   296fc:	7323      	strb	r3, [r4, #12]
   296fe:	2b00      	cmp	r3, #0
   29700:	d13b      	bne.n	2977a <ctr_drbg_update_internal+0xc2>
   29702:	7ae3      	ldrb	r3, [r4, #11]
   29704:	3301      	adds	r3, #1
   29706:	b2db      	uxtb	r3, r3
   29708:	72e3      	strb	r3, [r4, #11]
   2970a:	2b00      	cmp	r3, #0
   2970c:	d135      	bne.n	2977a <ctr_drbg_update_internal+0xc2>
   2970e:	7aa3      	ldrb	r3, [r4, #10]
   29710:	3301      	adds	r3, #1
   29712:	b2db      	uxtb	r3, r3
   29714:	72a3      	strb	r3, [r4, #10]
   29716:	2b00      	cmp	r3, #0
   29718:	d12f      	bne.n	2977a <ctr_drbg_update_internal+0xc2>
   2971a:	7a63      	ldrb	r3, [r4, #9]
   2971c:	3301      	adds	r3, #1
   2971e:	b2db      	uxtb	r3, r3
   29720:	7263      	strb	r3, [r4, #9]
   29722:	bb53      	cbnz	r3, 2977a <ctr_drbg_update_internal+0xc2>
   29724:	7a23      	ldrb	r3, [r4, #8]
   29726:	3301      	adds	r3, #1
   29728:	b2db      	uxtb	r3, r3
   2972a:	7223      	strb	r3, [r4, #8]
   2972c:	bb2b      	cbnz	r3, 2977a <ctr_drbg_update_internal+0xc2>
   2972e:	79e3      	ldrb	r3, [r4, #7]
   29730:	3301      	adds	r3, #1
   29732:	b2db      	uxtb	r3, r3
   29734:	71e3      	strb	r3, [r4, #7]
   29736:	bb03      	cbnz	r3, 2977a <ctr_drbg_update_internal+0xc2>
   29738:	79a3      	ldrb	r3, [r4, #6]
   2973a:	3301      	adds	r3, #1
   2973c:	b2db      	uxtb	r3, r3
   2973e:	71a3      	strb	r3, [r4, #6]
   29740:	b9db      	cbnz	r3, 2977a <ctr_drbg_update_internal+0xc2>
   29742:	7963      	ldrb	r3, [r4, #5]
   29744:	3301      	adds	r3, #1
   29746:	b2db      	uxtb	r3, r3
   29748:	7163      	strb	r3, [r4, #5]
   2974a:	b9b3      	cbnz	r3, 2977a <ctr_drbg_update_internal+0xc2>
   2974c:	7923      	ldrb	r3, [r4, #4]
   2974e:	3301      	adds	r3, #1
   29750:	b2db      	uxtb	r3, r3
   29752:	7123      	strb	r3, [r4, #4]
   29754:	b98b      	cbnz	r3, 2977a <ctr_drbg_update_internal+0xc2>
   29756:	78e3      	ldrb	r3, [r4, #3]
   29758:	3301      	adds	r3, #1
   2975a:	b2db      	uxtb	r3, r3
   2975c:	70e3      	strb	r3, [r4, #3]
   2975e:	b963      	cbnz	r3, 2977a <ctr_drbg_update_internal+0xc2>
   29760:	78a3      	ldrb	r3, [r4, #2]
   29762:	3301      	adds	r3, #1
   29764:	b2db      	uxtb	r3, r3
   29766:	70a3      	strb	r3, [r4, #2]
   29768:	b93b      	cbnz	r3, 2977a <ctr_drbg_update_internal+0xc2>
   2976a:	7863      	ldrb	r3, [r4, #1]
   2976c:	3301      	adds	r3, #1
   2976e:	b2db      	uxtb	r3, r3
   29770:	7063      	strb	r3, [r4, #1]
   29772:	b913      	cbnz	r3, 2977a <ctr_drbg_update_internal+0xc2>
   29774:	7823      	ldrb	r3, [r4, #0]
   29776:	3301      	adds	r3, #1
   29778:	7023      	strb	r3, [r4, #0]
   2977a:	4633      	mov	r3, r6
   2977c:	4622      	mov	r2, r4
   2977e:	2101      	movs	r1, #1
   29780:	4640      	mov	r0, r8
   29782:	f001 f883 	bl	2a88c <cc_mbedtls_aes_crypt_ecb>
   29786:	4607      	mov	r7, r0
   29788:	2800      	cmp	r0, #0
   2978a:	d12b      	bne.n	297e4 <ctr_drbg_update_internal+0x12c>
   2978c:	3610      	adds	r6, #16
   2978e:	ab08      	add	r3, sp, #32
   29790:	429e      	cmp	r6, r3
   29792:	d19e      	bne.n	296d2 <ctr_drbg_update_internal+0x1a>
   29794:	9e01      	ldr	r6, [sp, #4]
   29796:	686a      	ldr	r2, [r5, #4]
   29798:	9f00      	ldr	r7, [sp, #0]
   2979a:	6829      	ldr	r1, [r5, #0]
   2979c:	68ab      	ldr	r3, [r5, #8]
   2979e:	4072      	eors	r2, r6
   297a0:	9e02      	ldr	r6, [sp, #8]
   297a2:	9201      	str	r2, [sp, #4]
   297a4:	4079      	eors	r1, r7
   297a6:	4073      	eors	r3, r6
   297a8:	9100      	str	r1, [sp, #0]
   297aa:	9e03      	ldr	r6, [sp, #12]
   297ac:	68e9      	ldr	r1, [r5, #12]
   297ae:	692a      	ldr	r2, [r5, #16]
   297b0:	9302      	str	r3, [sp, #8]
   297b2:	4071      	eors	r1, r6
   297b4:	9e04      	ldr	r6, [sp, #16]
   297b6:	696b      	ldr	r3, [r5, #20]
   297b8:	9103      	str	r1, [sp, #12]
   297ba:	4056      	eors	r6, r2
   297bc:	9a05      	ldr	r2, [sp, #20]
   297be:	9604      	str	r6, [sp, #16]
   297c0:	ea83 0102 	eor.w	r1, r3, r2
   297c4:	e9d5 2306 	ldrd	r2, r3, [r5, #24]
   297c8:	9d06      	ldr	r5, [sp, #24]
   297ca:	9105      	str	r1, [sp, #20]
   297cc:	4055      	eors	r5, r2
   297ce:	9a07      	ldr	r2, [sp, #28]
   297d0:	4640      	mov	r0, r8
   297d2:	4053      	eors	r3, r2
   297d4:	4669      	mov	r1, sp
   297d6:	2280      	movs	r2, #128	; 0x80
   297d8:	e9cd 5306 	strd	r5, r3, [sp, #24]
   297dc:	f001 f83c 	bl	2a858 <cc_mbedtls_aes_setkey_enc>
   297e0:	4607      	mov	r7, r0
   297e2:	b138      	cbz	r0, 297f4 <ctr_drbg_update_internal+0x13c>
   297e4:	4668      	mov	r0, sp
   297e6:	2120      	movs	r1, #32
   297e8:	f7ff fe1c 	bl	29424 <mbedtls_platform_zeroize>
   297ec:	4638      	mov	r0, r7
   297ee:	b008      	add	sp, #32
   297f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   297f4:	2210      	movs	r2, #16
   297f6:	4620      	mov	r0, r4
   297f8:	eb0d 0102 	add.w	r1, sp, r2
   297fc:	f006 feed 	bl	305da <memcpy>
   29800:	e7f0      	b.n	297e4 <ctr_drbg_update_internal+0x12c>
   29802:	bf00      	nop

00029804 <mbedtls_ctr_drbg_reseed_internal>:
   29804:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29808:	4604      	mov	r4, r0
   2980a:	6980      	ldr	r0, [r0, #24]
   2980c:	f5b0 7fc0 	cmp.w	r0, #384	; 0x180
   29810:	d852      	bhi.n	298b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   29812:	461d      	mov	r5, r3
   29814:	f5c0 73c0 	rsb	r3, r0, #384	; 0x180
   29818:	42ab      	cmp	r3, r5
   2981a:	d34d      	bcc.n	298b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   2981c:	f5c5 73c0 	rsb	r3, r5, #384	; 0x180
   29820:	1a18      	subs	r0, r3, r0
   29822:	4290      	cmp	r0, r2
   29824:	4616      	mov	r6, r2
   29826:	d347      	bcc.n	298b8 <mbedtls_ctr_drbg_reseed_internal+0xb4>
   29828:	f8df 9098 	ldr.w	r9, [pc, #152]	; 298c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>
   2982c:	f44f 72c0 	mov.w	r2, #384	; 0x180
   29830:	460f      	mov	r7, r1
   29832:	4648      	mov	r0, r9
   29834:	2100      	movs	r1, #0
   29836:	f006 fef8 	bl	3062a <memset>
   2983a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   2983e:	69a2      	ldr	r2, [r4, #24]
   29840:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
   29844:	4649      	mov	r1, r9
   29846:	4798      	blx	r3
   29848:	2800      	cmp	r0, #0
   2984a:	d138      	bne.n	298be <mbedtls_ctr_drbg_reseed_internal+0xba>
   2984c:	f8d4 8018 	ldr.w	r8, [r4, #24]
   29850:	b13d      	cbz	r5, 29862 <mbedtls_ctr_drbg_reseed_internal+0x5e>
   29852:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   29856:	462a      	mov	r2, r5
   29858:	eb09 0108 	add.w	r1, r9, r8
   2985c:	4798      	blx	r3
   2985e:	bb70      	cbnz	r0, 298be <mbedtls_ctr_drbg_reseed_internal+0xba>
   29860:	44a8      	add	r8, r5
   29862:	b107      	cbz	r7, 29866 <mbedtls_ctr_drbg_reseed_internal+0x62>
   29864:	b9c6      	cbnz	r6, 29898 <mbedtls_ctr_drbg_reseed_internal+0x94>
   29866:	4917      	ldr	r1, [pc, #92]	; (298c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   29868:	4642      	mov	r2, r8
   2986a:	4608      	mov	r0, r1
   2986c:	f7ff fde4 	bl	29438 <block_cipher_df>
   29870:	4605      	mov	r5, r0
   29872:	b138      	cbz	r0, 29884 <mbedtls_ctr_drbg_reseed_internal+0x80>
   29874:	4813      	ldr	r0, [pc, #76]	; (298c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   29876:	f44f 71c0 	mov.w	r1, #384	; 0x180
   2987a:	f7ff fdd3 	bl	29424 <mbedtls_platform_zeroize>
   2987e:	4628      	mov	r0, r5
   29880:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   29884:	490f      	ldr	r1, [pc, #60]	; (298c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   29886:	4620      	mov	r0, r4
   29888:	f7ff ff16 	bl	296b8 <ctr_drbg_update_internal>
   2988c:	4605      	mov	r5, r0
   2988e:	2800      	cmp	r0, #0
   29890:	d1f0      	bne.n	29874 <mbedtls_ctr_drbg_reseed_internal+0x70>
   29892:	2301      	movs	r3, #1
   29894:	6123      	str	r3, [r4, #16]
   29896:	e7ed      	b.n	29874 <mbedtls_ctr_drbg_reseed_internal+0x70>
   29898:	4639      	mov	r1, r7
   2989a:	eb09 0008 	add.w	r0, r9, r8
   2989e:	4632      	mov	r2, r6
   298a0:	f006 fe9b 	bl	305da <memcpy>
   298a4:	4907      	ldr	r1, [pc, #28]	; (298c4 <mbedtls_ctr_drbg_reseed_internal+0xc0>)
   298a6:	44b0      	add	r8, r6
   298a8:	4642      	mov	r2, r8
   298aa:	4608      	mov	r0, r1
   298ac:	f7ff fdc4 	bl	29438 <block_cipher_df>
   298b0:	4605      	mov	r5, r0
   298b2:	2800      	cmp	r0, #0
   298b4:	d1de      	bne.n	29874 <mbedtls_ctr_drbg_reseed_internal+0x70>
   298b6:	e7e5      	b.n	29884 <mbedtls_ctr_drbg_reseed_internal+0x80>
   298b8:	f06f 0537 	mvn.w	r5, #55	; 0x37
   298bc:	e7df      	b.n	2987e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   298be:	f06f 0533 	mvn.w	r5, #51	; 0x33
   298c2:	e7dc      	b.n	2987e <mbedtls_ctr_drbg_reseed_internal+0x7a>
   298c4:	200030dc 	.word	0x200030dc

000298c8 <cc_mbedtls_ctr_drbg_init>:
   298c8:	b510      	push	{r4, lr}
   298ca:	22a4      	movs	r2, #164	; 0xa4
   298cc:	4604      	mov	r4, r0
   298ce:	2100      	movs	r1, #0
   298d0:	f006 feab 	bl	3062a <memset>
   298d4:	4b06      	ldr	r3, [pc, #24]	; (298f0 <cc_mbedtls_ctr_drbg_init+0x28>)
   298d6:	f04f 31ff 	mov.w	r1, #4294967295
   298da:	f64f 72f0 	movw	r2, #65520	; 0xfff0
   298de:	6121      	str	r1, [r4, #16]
   298e0:	61e2      	str	r2, [r4, #28]
   298e2:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   298e6:	681b      	ldr	r3, [r3, #0]
   298e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   298ec:	4718      	bx	r3
   298ee:	bf00      	nop
   298f0:	200006d0 	.word	0x200006d0

000298f4 <cc_mbedtls_ctr_drbg_seed>:
   298f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   298f8:	b085      	sub	sp, #20
   298fa:	4605      	mov	r5, r0
   298fc:	460f      	mov	r7, r1
   298fe:	4616      	mov	r6, r2
   29900:	4668      	mov	r0, sp
   29902:	2210      	movs	r2, #16
   29904:	2100      	movs	r1, #0
   29906:	4699      	mov	r9, r3
   29908:	f006 fe8f 	bl	3062a <memset>
   2990c:	4b1d      	ldr	r3, [pc, #116]	; (29984 <cc_mbedtls_ctr_drbg_seed+0x90>)
   2990e:	f105 089c 	add.w	r8, r5, #156	; 0x9c
   29912:	681b      	ldr	r3, [r3, #0]
   29914:	4640      	mov	r0, r8
   29916:	4798      	blx	r3
   29918:	b120      	cbz	r0, 29924 <cc_mbedtls_ctr_drbg_seed+0x30>
   2991a:	4604      	mov	r4, r0
   2991c:	4620      	mov	r0, r4
   2991e:	b005      	add	sp, #20
   29920:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29924:	f105 0420 	add.w	r4, r5, #32
   29928:	4620      	mov	r0, r4
   2992a:	f000 ff7f 	bl	2a82c <cc_mbedtls_aes_init>
   2992e:	69aa      	ldr	r2, [r5, #24]
   29930:	e9c5 7625 	strd	r7, r6, [r5, #148]	; 0x94
   29934:	692e      	ldr	r6, [r5, #16]
   29936:	b9e2      	cbnz	r2, 29972 <cc_mbedtls_ctr_drbg_seed+0x7e>
   29938:	2220      	movs	r2, #32
   2993a:	2e00      	cmp	r6, #0
   2993c:	61aa      	str	r2, [r5, #24]
   2993e:	db1f      	blt.n	29980 <cc_mbedtls_ctr_drbg_seed+0x8c>
   29940:	4620      	mov	r0, r4
   29942:	4669      	mov	r1, sp
   29944:	2280      	movs	r2, #128	; 0x80
   29946:	f000 ff87 	bl	2a858 <cc_mbedtls_aes_setkey_enc>
   2994a:	4604      	mov	r4, r0
   2994c:	b930      	cbnz	r0, 2995c <cc_mbedtls_ctr_drbg_seed+0x68>
   2994e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   29950:	4633      	mov	r3, r6
   29952:	4649      	mov	r1, r9
   29954:	4628      	mov	r0, r5
   29956:	f7ff ff55 	bl	29804 <mbedtls_ctr_drbg_reseed_internal>
   2995a:	4604      	mov	r4, r0
   2995c:	4b0a      	ldr	r3, [pc, #40]	; (29988 <cc_mbedtls_ctr_drbg_seed+0x94>)
   2995e:	4640      	mov	r0, r8
   29960:	681b      	ldr	r3, [r3, #0]
   29962:	4798      	blx	r3
   29964:	2800      	cmp	r0, #0
   29966:	bf18      	it	ne
   29968:	4604      	movne	r4, r0
   2996a:	4620      	mov	r0, r4
   2996c:	b005      	add	sp, #20
   2996e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29972:	2e00      	cmp	r6, #0
   29974:	dae4      	bge.n	29940 <cc_mbedtls_ctr_drbg_seed+0x4c>
   29976:	2a17      	cmp	r2, #23
   29978:	d802      	bhi.n	29980 <cc_mbedtls_ctr_drbg_seed+0x8c>
   2997a:	1c53      	adds	r3, r2, #1
   2997c:	085e      	lsrs	r6, r3, #1
   2997e:	e7df      	b.n	29940 <cc_mbedtls_ctr_drbg_seed+0x4c>
   29980:	2600      	movs	r6, #0
   29982:	e7dd      	b.n	29940 <cc_mbedtls_ctr_drbg_seed+0x4c>
   29984:	200006d4 	.word	0x200006d4
   29988:	200006d8 	.word	0x200006d8

0002998c <cc_mbedtls_ctr_drbg_random_with_add>:
   2998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29990:	b08d      	sub	sp, #52	; 0x34
   29992:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   29996:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
   2999a:	f200 80e4 	bhi.w	29b66 <cc_mbedtls_ctr_drbg_random_with_add+0x1da>
   2999e:	f5b8 7f80 	cmp.w	r8, #256	; 0x100
   299a2:	f200 80dd 	bhi.w	29b60 <cc_mbedtls_ctr_drbg_random_with_add+0x1d4>
   299a6:	4604      	mov	r4, r0
   299a8:	4615      	mov	r5, r2
   299aa:	460e      	mov	r6, r1
   299ac:	2220      	movs	r2, #32
   299ae:	2100      	movs	r1, #0
   299b0:	a804      	add	r0, sp, #16
   299b2:	461f      	mov	r7, r3
   299b4:	f006 fe39 	bl	3062a <memset>
   299b8:	4b6c      	ldr	r3, [pc, #432]	; (29b6c <cc_mbedtls_ctr_drbg_random_with_add+0x1e0>)
   299ba:	f104 099c 	add.w	r9, r4, #156	; 0x9c
   299be:	681b      	ldr	r3, [r3, #0]
   299c0:	4648      	mov	r0, r9
   299c2:	4798      	blx	r3
   299c4:	4683      	mov	fp, r0
   299c6:	2800      	cmp	r0, #0
   299c8:	f040 8093 	bne.w	29af2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   299cc:	6922      	ldr	r2, [r4, #16]
   299ce:	69e3      	ldr	r3, [r4, #28]
   299d0:	429a      	cmp	r2, r3
   299d2:	f300 8092 	bgt.w	29afa <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   299d6:	6963      	ldr	r3, [r4, #20]
   299d8:	2b00      	cmp	r3, #0
   299da:	f040 808e 	bne.w	29afa <cc_mbedtls_ctr_drbg_random_with_add+0x16e>
   299de:	f1b8 0f00 	cmp.w	r8, #0
   299e2:	f040 80a9 	bne.w	29b38 <cc_mbedtls_ctr_drbg_random_with_add+0x1ac>
   299e6:	f8df a188 	ldr.w	sl, [pc, #392]	; 29b70 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   299ea:	466f      	mov	r7, sp
   299ec:	2d00      	cmp	r5, #0
   299ee:	f000 8098 	beq.w	29b22 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   299f2:	f104 0820 	add.w	r8, r4, #32
   299f6:	466f      	mov	r7, sp
   299f8:	e00e      	b.n	29a18 <cc_mbedtls_ctr_drbg_random_with_add+0x8c>
   299fa:	2d10      	cmp	r5, #16
   299fc:	46ab      	mov	fp, r5
   299fe:	bf28      	it	cs
   29a00:	f04f 0b10 	movcs.w	fp, #16
   29a04:	4630      	mov	r0, r6
   29a06:	465a      	mov	r2, fp
   29a08:	4639      	mov	r1, r7
   29a0a:	f006 fde6 	bl	305da <memcpy>
   29a0e:	ebb5 050b 	subs.w	r5, r5, fp
   29a12:	445e      	add	r6, fp
   29a14:	f000 8085 	beq.w	29b22 <cc_mbedtls_ctr_drbg_random_with_add+0x196>
   29a18:	7be3      	ldrb	r3, [r4, #15]
   29a1a:	3301      	adds	r3, #1
   29a1c:	b2db      	uxtb	r3, r3
   29a1e:	73e3      	strb	r3, [r4, #15]
   29a20:	2b00      	cmp	r3, #0
   29a22:	d14d      	bne.n	29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a24:	7ba3      	ldrb	r3, [r4, #14]
   29a26:	3301      	adds	r3, #1
   29a28:	b2db      	uxtb	r3, r3
   29a2a:	73a3      	strb	r3, [r4, #14]
   29a2c:	2b00      	cmp	r3, #0
   29a2e:	d147      	bne.n	29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a30:	7b63      	ldrb	r3, [r4, #13]
   29a32:	3301      	adds	r3, #1
   29a34:	b2db      	uxtb	r3, r3
   29a36:	7363      	strb	r3, [r4, #13]
   29a38:	2b00      	cmp	r3, #0
   29a3a:	d141      	bne.n	29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a3c:	7b23      	ldrb	r3, [r4, #12]
   29a3e:	3301      	adds	r3, #1
   29a40:	b2db      	uxtb	r3, r3
   29a42:	7323      	strb	r3, [r4, #12]
   29a44:	2b00      	cmp	r3, #0
   29a46:	d13b      	bne.n	29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a48:	7ae3      	ldrb	r3, [r4, #11]
   29a4a:	3301      	adds	r3, #1
   29a4c:	b2db      	uxtb	r3, r3
   29a4e:	72e3      	strb	r3, [r4, #11]
   29a50:	2b00      	cmp	r3, #0
   29a52:	d135      	bne.n	29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a54:	7aa3      	ldrb	r3, [r4, #10]
   29a56:	3301      	adds	r3, #1
   29a58:	b2db      	uxtb	r3, r3
   29a5a:	72a3      	strb	r3, [r4, #10]
   29a5c:	2b00      	cmp	r3, #0
   29a5e:	d12f      	bne.n	29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a60:	7a63      	ldrb	r3, [r4, #9]
   29a62:	3301      	adds	r3, #1
   29a64:	b2db      	uxtb	r3, r3
   29a66:	7263      	strb	r3, [r4, #9]
   29a68:	bb53      	cbnz	r3, 29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a6a:	7a23      	ldrb	r3, [r4, #8]
   29a6c:	3301      	adds	r3, #1
   29a6e:	b2db      	uxtb	r3, r3
   29a70:	7223      	strb	r3, [r4, #8]
   29a72:	bb2b      	cbnz	r3, 29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a74:	79e3      	ldrb	r3, [r4, #7]
   29a76:	3301      	adds	r3, #1
   29a78:	b2db      	uxtb	r3, r3
   29a7a:	71e3      	strb	r3, [r4, #7]
   29a7c:	bb03      	cbnz	r3, 29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a7e:	79a3      	ldrb	r3, [r4, #6]
   29a80:	3301      	adds	r3, #1
   29a82:	b2db      	uxtb	r3, r3
   29a84:	71a3      	strb	r3, [r4, #6]
   29a86:	b9db      	cbnz	r3, 29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a88:	7963      	ldrb	r3, [r4, #5]
   29a8a:	3301      	adds	r3, #1
   29a8c:	b2db      	uxtb	r3, r3
   29a8e:	7163      	strb	r3, [r4, #5]
   29a90:	b9b3      	cbnz	r3, 29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a92:	7923      	ldrb	r3, [r4, #4]
   29a94:	3301      	adds	r3, #1
   29a96:	b2db      	uxtb	r3, r3
   29a98:	7123      	strb	r3, [r4, #4]
   29a9a:	b98b      	cbnz	r3, 29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29a9c:	78e3      	ldrb	r3, [r4, #3]
   29a9e:	3301      	adds	r3, #1
   29aa0:	b2db      	uxtb	r3, r3
   29aa2:	70e3      	strb	r3, [r4, #3]
   29aa4:	b963      	cbnz	r3, 29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29aa6:	78a3      	ldrb	r3, [r4, #2]
   29aa8:	3301      	adds	r3, #1
   29aaa:	b2db      	uxtb	r3, r3
   29aac:	70a3      	strb	r3, [r4, #2]
   29aae:	b93b      	cbnz	r3, 29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29ab0:	7863      	ldrb	r3, [r4, #1]
   29ab2:	3301      	adds	r3, #1
   29ab4:	b2db      	uxtb	r3, r3
   29ab6:	7063      	strb	r3, [r4, #1]
   29ab8:	b913      	cbnz	r3, 29ac0 <cc_mbedtls_ctr_drbg_random_with_add+0x134>
   29aba:	7823      	ldrb	r3, [r4, #0]
   29abc:	3301      	adds	r3, #1
   29abe:	7023      	strb	r3, [r4, #0]
   29ac0:	463b      	mov	r3, r7
   29ac2:	4622      	mov	r2, r4
   29ac4:	2101      	movs	r1, #1
   29ac6:	4640      	mov	r0, r8
   29ac8:	f000 fee0 	bl	2a88c <cc_mbedtls_aes_crypt_ecb>
   29acc:	4683      	mov	fp, r0
   29ace:	2800      	cmp	r0, #0
   29ad0:	d093      	beq.n	299fa <cc_mbedtls_ctr_drbg_random_with_add+0x6e>
   29ad2:	f8da 3000 	ldr.w	r3, [sl]
   29ad6:	4648      	mov	r0, r9
   29ad8:	4798      	blx	r3
   29ada:	2120      	movs	r1, #32
   29adc:	4603      	mov	r3, r0
   29ade:	a804      	add	r0, sp, #16
   29ae0:	2b00      	cmp	r3, #0
   29ae2:	bf18      	it	ne
   29ae4:	469b      	movne	fp, r3
   29ae6:	f7ff fc9d 	bl	29424 <mbedtls_platform_zeroize>
   29aea:	4638      	mov	r0, r7
   29aec:	2110      	movs	r1, #16
   29aee:	f7ff fc99 	bl	29424 <mbedtls_platform_zeroize>
   29af2:	4658      	mov	r0, fp
   29af4:	b00d      	add	sp, #52	; 0x34
   29af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29afa:	4642      	mov	r2, r8
   29afc:	4639      	mov	r1, r7
   29afe:	2300      	movs	r3, #0
   29b00:	4620      	mov	r0, r4
   29b02:	f7ff fe7f 	bl	29804 <mbedtls_ctr_drbg_reseed_internal>
   29b06:	f8df a068 	ldr.w	sl, [pc, #104]	; 29b70 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   29b0a:	2800      	cmp	r0, #0
   29b0c:	f43f af6d 	beq.w	299ea <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   29b10:	f8da 3000 	ldr.w	r3, [sl]
   29b14:	4648      	mov	r0, r9
   29b16:	4798      	blx	r3
   29b18:	4683      	mov	fp, r0
   29b1a:	2800      	cmp	r0, #0
   29b1c:	f43f af65 	beq.w	299ea <cc_mbedtls_ctr_drbg_random_with_add+0x5e>
   29b20:	e7e7      	b.n	29af2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   29b22:	a904      	add	r1, sp, #16
   29b24:	4620      	mov	r0, r4
   29b26:	f7ff fdc7 	bl	296b8 <ctr_drbg_update_internal>
   29b2a:	4683      	mov	fp, r0
   29b2c:	2800      	cmp	r0, #0
   29b2e:	d1d0      	bne.n	29ad2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   29b30:	6923      	ldr	r3, [r4, #16]
   29b32:	3301      	adds	r3, #1
   29b34:	6123      	str	r3, [r4, #16]
   29b36:	e7cc      	b.n	29ad2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   29b38:	4642      	mov	r2, r8
   29b3a:	4639      	mov	r1, r7
   29b3c:	a804      	add	r0, sp, #16
   29b3e:	f7ff fc7b 	bl	29438 <block_cipher_df>
   29b42:	4683      	mov	fp, r0
   29b44:	b118      	cbz	r0, 29b4e <cc_mbedtls_ctr_drbg_random_with_add+0x1c2>
   29b46:	f8df a028 	ldr.w	sl, [pc, #40]	; 29b70 <cc_mbedtls_ctr_drbg_random_with_add+0x1e4>
   29b4a:	466f      	mov	r7, sp
   29b4c:	e7c1      	b.n	29ad2 <cc_mbedtls_ctr_drbg_random_with_add+0x146>
   29b4e:	a904      	add	r1, sp, #16
   29b50:	4620      	mov	r0, r4
   29b52:	f7ff fdb1 	bl	296b8 <ctr_drbg_update_internal>
   29b56:	4683      	mov	fp, r0
   29b58:	2800      	cmp	r0, #0
   29b5a:	f43f af44 	beq.w	299e6 <cc_mbedtls_ctr_drbg_random_with_add+0x5a>
   29b5e:	e7f2      	b.n	29b46 <cc_mbedtls_ctr_drbg_random_with_add+0x1ba>
   29b60:	f06f 0b37 	mvn.w	fp, #55	; 0x37
   29b64:	e7c5      	b.n	29af2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   29b66:	f06f 0b35 	mvn.w	fp, #53	; 0x35
   29b6a:	e7c2      	b.n	29af2 <cc_mbedtls_ctr_drbg_random_with_add+0x166>
   29b6c:	200006d4 	.word	0x200006d4
   29b70:	200006d8 	.word	0x200006d8

00029b74 <entropy_update>:
   29b74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   29b78:	2b20      	cmp	r3, #32
   29b7a:	b08b      	sub	sp, #44	; 0x2c
   29b7c:	461d      	mov	r5, r3
   29b7e:	4606      	mov	r6, r0
   29b80:	4689      	mov	r9, r1
   29b82:	4690      	mov	r8, r2
   29b84:	d826      	bhi.n	29bd4 <entropy_update+0x60>
   29b86:	b2db      	uxtb	r3, r3
   29b88:	af02      	add	r7, sp, #8
   29b8a:	6831      	ldr	r1, [r6, #0]
   29b8c:	f88d 9004 	strb.w	r9, [sp, #4]
   29b90:	f88d 3005 	strb.w	r3, [sp, #5]
   29b94:	f106 0904 	add.w	r9, r6, #4
   29b98:	b921      	cbnz	r1, 29ba4 <entropy_update+0x30>
   29b9a:	4648      	mov	r0, r9
   29b9c:	f000 feba 	bl	2a914 <cc_mbedtls_sha256_starts>
   29ba0:	4604      	mov	r4, r0
   29ba2:	b940      	cbnz	r0, 29bb6 <entropy_update+0x42>
   29ba4:	2301      	movs	r3, #1
   29ba6:	6033      	str	r3, [r6, #0]
   29ba8:	2202      	movs	r2, #2
   29baa:	a901      	add	r1, sp, #4
   29bac:	4648      	mov	r0, r9
   29bae:	f000 fec5 	bl	2a93c <cc_mbedtls_sha256_update>
   29bb2:	4604      	mov	r4, r0
   29bb4:	b138      	cbz	r0, 29bc6 <entropy_update+0x52>
   29bb6:	4638      	mov	r0, r7
   29bb8:	2120      	movs	r1, #32
   29bba:	f7ff fc33 	bl	29424 <mbedtls_platform_zeroize>
   29bbe:	4620      	mov	r0, r4
   29bc0:	b00b      	add	sp, #44	; 0x2c
   29bc2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   29bc6:	462a      	mov	r2, r5
   29bc8:	4641      	mov	r1, r8
   29bca:	4648      	mov	r0, r9
   29bcc:	f000 feb6 	bl	2a93c <cc_mbedtls_sha256_update>
   29bd0:	4604      	mov	r4, r0
   29bd2:	e7f0      	b.n	29bb6 <entropy_update+0x42>
   29bd4:	af02      	add	r7, sp, #8
   29bd6:	4619      	mov	r1, r3
   29bd8:	4610      	mov	r0, r2
   29bda:	2300      	movs	r3, #0
   29bdc:	463a      	mov	r2, r7
   29bde:	f000 ffad 	bl	2ab3c <cc_mbedtls_sha256>
   29be2:	4604      	mov	r4, r0
   29be4:	2800      	cmp	r0, #0
   29be6:	d1e6      	bne.n	29bb6 <entropy_update+0x42>
   29be8:	2320      	movs	r3, #32
   29bea:	461d      	mov	r5, r3
   29bec:	46b8      	mov	r8, r7
   29bee:	e7cc      	b.n	29b8a <entropy_update+0x16>

00029bf0 <entropy_gather_internal.part.0>:
   29bf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   29bf2:	f8d0 30f4 	ldr.w	r3, [r0, #244]	; 0xf4
   29bf6:	b0a7      	sub	sp, #156	; 0x9c
   29bf8:	2b00      	cmp	r3, #0
   29bfa:	bfd8      	it	le
   29bfc:	ae02      	addle	r6, sp, #8
   29bfe:	dd2c      	ble.n	29c5a <entropy_gather_internal.part.0+0x6a>
   29c00:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
   29c04:	4605      	mov	r5, r0
   29c06:	2300      	movs	r3, #0
   29c08:	ae02      	add	r6, sp, #8
   29c0a:	9301      	str	r3, [sp, #4]
   29c0c:	f1a4 0701 	sub.w	r7, r4, #1
   29c10:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
   29c14:	f8d5 40f8 	ldr.w	r4, [r5, #248]	; 0xf8
   29c18:	4631      	mov	r1, r6
   29c1a:	ab01      	add	r3, sp, #4
   29c1c:	2290      	movs	r2, #144	; 0x90
   29c1e:	47a0      	blx	r4
   29c20:	fab7 f787 	clz	r7, r7
   29c24:	097f      	lsrs	r7, r7, #5
   29c26:	4604      	mov	r4, r0
   29c28:	b910      	cbnz	r0, 29c30 <entropy_gather_internal.part.0+0x40>
   29c2a:	9b01      	ldr	r3, [sp, #4]
   29c2c:	b93b      	cbnz	r3, 29c3e <entropy_gather_internal.part.0+0x4e>
   29c2e:	b1a7      	cbz	r7, 29c5a <entropy_gather_internal.part.0+0x6a>
   29c30:	4630      	mov	r0, r6
   29c32:	2190      	movs	r1, #144	; 0x90
   29c34:	f7ff fbf6 	bl	29424 <mbedtls_platform_zeroize>
   29c38:	4620      	mov	r0, r4
   29c3a:	b027      	add	sp, #156	; 0x9c
   29c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29c3e:	4601      	mov	r1, r0
   29c40:	4632      	mov	r2, r6
   29c42:	4628      	mov	r0, r5
   29c44:	f7ff ff96 	bl	29b74 <entropy_update>
   29c48:	b950      	cbnz	r0, 29c60 <entropy_gather_internal.part.0+0x70>
   29c4a:	f8d5 3100 	ldr.w	r3, [r5, #256]	; 0x100
   29c4e:	9a01      	ldr	r2, [sp, #4]
   29c50:	4413      	add	r3, r2
   29c52:	f8c5 3100 	str.w	r3, [r5, #256]	; 0x100
   29c56:	2f00      	cmp	r7, #0
   29c58:	d1ea      	bne.n	29c30 <entropy_gather_internal.part.0+0x40>
   29c5a:	f06f 043c 	mvn.w	r4, #60	; 0x3c
   29c5e:	e7e7      	b.n	29c30 <entropy_gather_internal.part.0+0x40>
   29c60:	4604      	mov	r4, r0
   29c62:	4620      	mov	r0, r4
   29c64:	b027      	add	sp, #156	; 0x9c
   29c66:	bdf0      	pop	{r4, r5, r6, r7, pc}

00029c68 <cc_mbedtls_entropy_init>:
   29c68:	b570      	push	{r4, r5, r6, lr}
   29c6a:	2500      	movs	r5, #0
   29c6c:	4604      	mov	r4, r0
   29c6e:	4629      	mov	r1, r5
   29c70:	2214      	movs	r2, #20
   29c72:	f8c0 50f4 	str.w	r5, [r0, #244]	; 0xf4
   29c76:	30f8      	adds	r0, #248	; 0xf8
   29c78:	f006 fcd7 	bl	3062a <memset>
   29c7c:	4b15      	ldr	r3, [pc, #84]	; (29cd4 <cc_mbedtls_entropy_init+0x6c>)
   29c7e:	f504 7686 	add.w	r6, r4, #268	; 0x10c
   29c82:	681b      	ldr	r3, [r3, #0]
   29c84:	4630      	mov	r0, r6
   29c86:	4798      	blx	r3
   29c88:	4620      	mov	r0, r4
   29c8a:	f840 5b04 	str.w	r5, [r0], #4
   29c8e:	f000 fe27 	bl	2a8e0 <cc_mbedtls_sha256_init>
   29c92:	4b11      	ldr	r3, [pc, #68]	; (29cd8 <cc_mbedtls_entropy_init+0x70>)
   29c94:	4630      	mov	r0, r6
   29c96:	681b      	ldr	r3, [r3, #0]
   29c98:	4798      	blx	r3
   29c9a:	b9c8      	cbnz	r0, 29cd0 <cc_mbedtls_entropy_init+0x68>
   29c9c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   29ca0:	42ab      	cmp	r3, r5
   29ca2:	dc0f      	bgt.n	29cc4 <cc_mbedtls_entropy_init+0x5c>
   29ca4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   29ca8:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   29cac:	490b      	ldr	r1, [pc, #44]	; (29cdc <cc_mbedtls_entropy_init+0x74>)
   29cae:	f8c2 00fc 	str.w	r0, [r2, #252]	; 0xfc
   29cb2:	f8c2 10f8 	str.w	r1, [r2, #248]	; 0xf8
   29cb6:	3301      	adds	r3, #1
   29cb8:	2020      	movs	r0, #32
   29cba:	2101      	movs	r1, #1
   29cbc:	e9c2 0141 	strd	r0, r1, [r2, #260]	; 0x104
   29cc0:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
   29cc4:	4b06      	ldr	r3, [pc, #24]	; (29ce0 <cc_mbedtls_entropy_init+0x78>)
   29cc6:	4630      	mov	r0, r6
   29cc8:	681b      	ldr	r3, [r3, #0]
   29cca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   29cce:	4718      	bx	r3
   29cd0:	bd70      	pop	{r4, r5, r6, pc}
   29cd2:	bf00      	nop
   29cd4:	200006d0 	.word	0x200006d0
   29cd8:	200006d4 	.word	0x200006d4
   29cdc:	0002a731 	.word	0x0002a731
   29ce0:	200006d8 	.word	0x200006d8

00029ce4 <cc_mbedtls_entropy_func>:
   29ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29ce8:	2a20      	cmp	r2, #32
   29cea:	b088      	sub	sp, #32
   29cec:	d876      	bhi.n	29ddc <cc_mbedtls_entropy_func+0xf8>
   29cee:	4b3d      	ldr	r3, [pc, #244]	; (29de4 <cc_mbedtls_entropy_func+0x100>)
   29cf0:	f500 7986 	add.w	r9, r0, #268	; 0x10c
   29cf4:	681b      	ldr	r3, [r3, #0]
   29cf6:	4604      	mov	r4, r0
   29cf8:	4648      	mov	r0, r9
   29cfa:	4617      	mov	r7, r2
   29cfc:	4688      	mov	r8, r1
   29cfe:	4798      	blx	r3
   29d00:	4605      	mov	r5, r0
   29d02:	bba0      	cbnz	r0, 29d6e <cc_mbedtls_entropy_func+0x8a>
   29d04:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   29d08:	f240 1601 	movw	r6, #257	; 0x101
   29d0c:	e001      	b.n	29d12 <cc_mbedtls_entropy_func+0x2e>
   29d0e:	3e01      	subs	r6, #1
   29d10:	d060      	beq.n	29dd4 <cc_mbedtls_entropy_func+0xf0>
   29d12:	4620      	mov	r0, r4
   29d14:	b37b      	cbz	r3, 29d76 <cc_mbedtls_entropy_func+0x92>
   29d16:	f7ff ff6b 	bl	29bf0 <entropy_gather_internal.part.0>
   29d1a:	4605      	mov	r5, r0
   29d1c:	bb68      	cbnz	r0, 29d7a <cc_mbedtls_entropy_func+0x96>
   29d1e:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   29d22:	2b00      	cmp	r3, #0
   29d24:	ddf3      	ble.n	29d0e <cc_mbedtls_entropy_func+0x2a>
   29d26:	e9d4 0240 	ldrd	r0, r2, [r4, #256]	; 0x100
   29d2a:	4290      	cmp	r0, r2
   29d2c:	d3ef      	bcc.n	29d0e <cc_mbedtls_entropy_func+0x2a>
   29d2e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
   29d32:	2a01      	cmp	r2, #1
   29d34:	d1eb      	bne.n	29d0e <cc_mbedtls_entropy_func+0x2a>
   29d36:	281f      	cmp	r0, #31
   29d38:	d9e9      	bls.n	29d0e <cc_mbedtls_entropy_func+0x2a>
   29d3a:	466e      	mov	r6, sp
   29d3c:	4629      	mov	r1, r5
   29d3e:	2220      	movs	r2, #32
   29d40:	4630      	mov	r0, r6
   29d42:	f104 0a04 	add.w	sl, r4, #4
   29d46:	f006 fc70 	bl	3062a <memset>
   29d4a:	4631      	mov	r1, r6
   29d4c:	4650      	mov	r0, sl
   29d4e:	f000 fe1f 	bl	2a990 <cc_mbedtls_sha256_finish>
   29d52:	4605      	mov	r5, r0
   29d54:	b198      	cbz	r0, 29d7e <cc_mbedtls_entropy_func+0x9a>
   29d56:	4630      	mov	r0, r6
   29d58:	2120      	movs	r1, #32
   29d5a:	f7ff fb63 	bl	29424 <mbedtls_platform_zeroize>
   29d5e:	4b22      	ldr	r3, [pc, #136]	; (29de8 <cc_mbedtls_entropy_func+0x104>)
   29d60:	4648      	mov	r0, r9
   29d62:	681b      	ldr	r3, [r3, #0]
   29d64:	4798      	blx	r3
   29d66:	2800      	cmp	r0, #0
   29d68:	bf18      	it	ne
   29d6a:	f06f 051d 	mvnne.w	r5, #29
   29d6e:	4628      	mov	r0, r5
   29d70:	b008      	add	sp, #32
   29d72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   29d76:	f06f 053f 	mvn.w	r5, #63	; 0x3f
   29d7a:	466e      	mov	r6, sp
   29d7c:	e7eb      	b.n	29d56 <cc_mbedtls_entropy_func+0x72>
   29d7e:	4650      	mov	r0, sl
   29d80:	f000 fdc2 	bl	2a908 <cc_mbedtls_sha256_free>
   29d84:	4650      	mov	r0, sl
   29d86:	f000 fdab 	bl	2a8e0 <cc_mbedtls_sha256_init>
   29d8a:	4629      	mov	r1, r5
   29d8c:	4650      	mov	r0, sl
   29d8e:	f000 fdc1 	bl	2a914 <cc_mbedtls_sha256_starts>
   29d92:	4605      	mov	r5, r0
   29d94:	2800      	cmp	r0, #0
   29d96:	d1de      	bne.n	29d56 <cc_mbedtls_entropy_func+0x72>
   29d98:	4650      	mov	r0, sl
   29d9a:	2220      	movs	r2, #32
   29d9c:	4631      	mov	r1, r6
   29d9e:	f000 fdcd 	bl	2a93c <cc_mbedtls_sha256_update>
   29da2:	4605      	mov	r5, r0
   29da4:	2800      	cmp	r0, #0
   29da6:	d1d6      	bne.n	29d56 <cc_mbedtls_entropy_func+0x72>
   29da8:	4603      	mov	r3, r0
   29daa:	4632      	mov	r2, r6
   29dac:	2120      	movs	r1, #32
   29dae:	4630      	mov	r0, r6
   29db0:	f000 fec4 	bl	2ab3c <cc_mbedtls_sha256>
   29db4:	4605      	mov	r5, r0
   29db6:	2800      	cmp	r0, #0
   29db8:	d1cd      	bne.n	29d56 <cc_mbedtls_entropy_func+0x72>
   29dba:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   29dbe:	2b00      	cmp	r3, #0
   29dc0:	bfc4      	itt	gt
   29dc2:	2300      	movgt	r3, #0
   29dc4:	f8c4 3100 	strgt.w	r3, [r4, #256]	; 0x100
   29dc8:	463a      	mov	r2, r7
   29dca:	4640      	mov	r0, r8
   29dcc:	4631      	mov	r1, r6
   29dce:	f006 fc04 	bl	305da <memcpy>
   29dd2:	e7c0      	b.n	29d56 <cc_mbedtls_entropy_func+0x72>
   29dd4:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   29dd8:	466e      	mov	r6, sp
   29dda:	e7bc      	b.n	29d56 <cc_mbedtls_entropy_func+0x72>
   29ddc:	f06f 053b 	mvn.w	r5, #59	; 0x3b
   29de0:	e7c5      	b.n	29d6e <cc_mbedtls_entropy_func+0x8a>
   29de2:	bf00      	nop
   29de4:	200006d4 	.word	0x200006d4
   29de8:	200006d8 	.word	0x200006d8

00029dec <RndStartupTest.constprop.0>:
   29dec:	b530      	push	{r4, r5, lr}
   29dee:	b0c3      	sub	sp, #268	; 0x10c
   29df0:	22dc      	movs	r2, #220	; 0xdc
   29df2:	2100      	movs	r1, #0
   29df4:	a80b      	add	r0, sp, #44	; 0x2c
   29df6:	f006 fc18 	bl	3062a <memset>
   29dfa:	2228      	movs	r2, #40	; 0x28
   29dfc:	2100      	movs	r1, #0
   29dfe:	a801      	add	r0, sp, #4
   29e00:	f006 fc13 	bl	3062a <memset>
   29e04:	a801      	add	r0, sp, #4
   29e06:	f000 fec1 	bl	2ab8c <RNG_PLAT_SetUserRngParameters>
   29e0a:	4604      	mov	r4, r0
   29e0c:	b110      	cbz	r0, 29e14 <RndStartupTest.constprop.0+0x28>
   29e0e:	4620      	mov	r0, r4
   29e10:	b043      	add	sp, #268	; 0x10c
   29e12:	bd30      	pop	{r4, r5, pc}
   29e14:	4d18      	ldr	r5, [pc, #96]	; (29e78 <RndStartupTest.constprop.0+0x8c>)
   29e16:	f04f 31ff 	mov.w	r1, #4294967295
   29e1a:	6828      	ldr	r0, [r5, #0]
   29e1c:	f000 f93c 	bl	2a098 <CC_PalMutexLock>
   29e20:	4604      	mov	r4, r0
   29e22:	b9c0      	cbnz	r0, 29e56 <RndStartupTest.constprop.0+0x6a>
   29e24:	2000      	movs	r0, #0
   29e26:	f000 f967 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   29e2a:	bb00      	cbnz	r0, 29e6e <RndStartupTest.constprop.0+0x82>
   29e2c:	4a13      	ldr	r2, [pc, #76]	; (29e7c <RndStartupTest.constprop.0+0x90>)
   29e2e:	a901      	add	r1, sp, #4
   29e30:	a80b      	add	r0, sp, #44	; 0x2c
   29e32:	f000 fc6f 	bl	2a714 <LLF_RND_RunTrngStartupTest>
   29e36:	4604      	mov	r4, r0
   29e38:	2001      	movs	r0, #1
   29e3a:	f000 f95d 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   29e3e:	b990      	cbnz	r0, 29e66 <RndStartupTest.constprop.0+0x7a>
   29e40:	6828      	ldr	r0, [r5, #0]
   29e42:	f000 f931 	bl	2a0a8 <CC_PalMutexUnlock>
   29e46:	2800      	cmp	r0, #0
   29e48:	d0e1      	beq.n	29e0e <RndStartupTest.constprop.0+0x22>
   29e4a:	480d      	ldr	r0, [pc, #52]	; (29e80 <RndStartupTest.constprop.0+0x94>)
   29e4c:	f7ff f9d8 	bl	29200 <CC_PalAbort>
   29e50:	4620      	mov	r0, r4
   29e52:	b043      	add	sp, #268	; 0x10c
   29e54:	bd30      	pop	{r4, r5, pc}
   29e56:	480b      	ldr	r0, [pc, #44]	; (29e84 <RndStartupTest.constprop.0+0x98>)
   29e58:	f7ff f9d2 	bl	29200 <CC_PalAbort>
   29e5c:	2c01      	cmp	r4, #1
   29e5e:	bf08      	it	eq
   29e60:	2405      	moveq	r4, #5
   29e62:	d0ed      	beq.n	29e40 <RndStartupTest.constprop.0+0x54>
   29e64:	e7de      	b.n	29e24 <RndStartupTest.constprop.0+0x38>
   29e66:	4808      	ldr	r0, [pc, #32]	; (29e88 <RndStartupTest.constprop.0+0x9c>)
   29e68:	f7ff f9ca 	bl	29200 <CC_PalAbort>
   29e6c:	e7e8      	b.n	29e40 <RndStartupTest.constprop.0+0x54>
   29e6e:	4807      	ldr	r0, [pc, #28]	; (29e8c <RndStartupTest.constprop.0+0xa0>)
   29e70:	f7ff f9c6 	bl	29200 <CC_PalAbort>
   29e74:	e7da      	b.n	29e2c <RndStartupTest.constprop.0+0x40>
   29e76:	bf00      	nop
   29e78:	200006cc 	.word	0x200006cc
   29e7c:	200032c4 	.word	0x200032c4
   29e80:	00031fb4 	.word	0x00031fb4
   29e84:	00031f5c 	.word	0x00031f5c
   29e88:	00031f94 	.word	0x00031f94
   29e8c:	00031f74 	.word	0x00031f74

00029e90 <CC_LibInit>:
   29e90:	b510      	push	{r4, lr}
   29e92:	b082      	sub	sp, #8
   29e94:	f000 f854 	bl	29f40 <CC_HalInit>
   29e98:	b128      	cbz	r0, 29ea6 <CC_LibInit+0x16>
   29e9a:	f000 f8a3 	bl	29fe4 <CC_PalTerminate>
   29e9e:	2403      	movs	r4, #3
   29ea0:	4620      	mov	r0, r4
   29ea2:	b002      	add	sp, #8
   29ea4:	bd10      	pop	{r4, pc}
   29ea6:	f000 f86f 	bl	29f88 <CC_PalInit>
   29eaa:	b9d0      	cbnz	r0, 29ee2 <CC_LibInit+0x52>
   29eac:	f000 f924 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   29eb0:	b9d8      	cbnz	r0, 29eea <CC_LibInit+0x5a>
   29eb2:	4b1e      	ldr	r3, [pc, #120]	; (29f2c <CC_LibInit+0x9c>)
   29eb4:	681b      	ldr	r3, [r3, #0]
   29eb6:	0e1b      	lsrs	r3, r3, #24
   29eb8:	2bf0      	cmp	r3, #240	; 0xf0
   29eba:	d10a      	bne.n	29ed2 <CC_LibInit+0x42>
   29ebc:	4a1c      	ldr	r2, [pc, #112]	; (29f30 <CC_LibInit+0xa0>)
   29ebe:	4b1d      	ldr	r3, [pc, #116]	; (29f34 <CC_LibInit+0xa4>)
   29ec0:	6812      	ldr	r2, [r2, #0]
   29ec2:	429a      	cmp	r2, r3
   29ec4:	d029      	beq.n	29f1a <CC_LibInit+0x8a>
   29ec6:	f000 f83d 	bl	29f44 <CC_HalTerminate>
   29eca:	2407      	movs	r4, #7
   29ecc:	f000 f88a 	bl	29fe4 <CC_PalTerminate>
   29ed0:	e7e6      	b.n	29ea0 <CC_LibInit+0x10>
   29ed2:	f000 f837 	bl	29f44 <CC_HalTerminate>
   29ed6:	f000 f885 	bl	29fe4 <CC_PalTerminate>
   29eda:	2406      	movs	r4, #6
   29edc:	4620      	mov	r0, r4
   29ede:	b002      	add	sp, #8
   29ee0:	bd10      	pop	{r4, pc}
   29ee2:	2404      	movs	r4, #4
   29ee4:	4620      	mov	r0, r4
   29ee6:	b002      	add	sp, #8
   29ee8:	bd10      	pop	{r4, pc}
   29eea:	f000 f82b 	bl	29f44 <CC_HalTerminate>
   29eee:	f000 f879 	bl	29fe4 <CC_PalTerminate>
   29ef2:	f7ff ff7b 	bl	29dec <RndStartupTest.constprop.0>
   29ef6:	4604      	mov	r4, r0
   29ef8:	b958      	cbnz	r0, 29f12 <CC_LibInit+0x82>
   29efa:	4602      	mov	r2, r0
   29efc:	4601      	mov	r1, r0
   29efe:	f7ff f9a7 	bl	29250 <nrf_cc3xx_platform_ctr_drbg_init>
   29f02:	b930      	cbnz	r0, 29f12 <CC_LibInit+0x82>
   29f04:	490c      	ldr	r1, [pc, #48]	; (29f38 <CC_LibInit+0xa8>)
   29f06:	ab01      	add	r3, sp, #4
   29f08:	2268      	movs	r2, #104	; 0x68
   29f0a:	f7ff f9d5 	bl	292b8 <nrf_cc3xx_platform_ctr_drbg_get>
   29f0e:	2800      	cmp	r0, #0
   29f10:	d0c6      	beq.n	29ea0 <CC_LibInit+0x10>
   29f12:	2405      	movs	r4, #5
   29f14:	4620      	mov	r0, r4
   29f16:	b002      	add	sp, #8
   29f18:	bd10      	pop	{r4, pc}
   29f1a:	2001      	movs	r0, #1
   29f1c:	f000 f8ec 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   29f20:	2800      	cmp	r0, #0
   29f22:	d1e2      	bne.n	29eea <CC_LibInit+0x5a>
   29f24:	4b05      	ldr	r3, [pc, #20]	; (29f3c <CC_LibInit+0xac>)
   29f26:	6018      	str	r0, [r3, #0]
   29f28:	e7e3      	b.n	29ef2 <CC_LibInit+0x62>
   29f2a:	bf00      	nop
   29f2c:	5002b928 	.word	0x5002b928
   29f30:	5002ba24 	.word	0x5002ba24
   29f34:	20e00000 	.word	0x20e00000
   29f38:	2000325c 	.word	0x2000325c
   29f3c:	5002ba0c 	.word	0x5002ba0c

00029f40 <CC_HalInit>:
   29f40:	2000      	movs	r0, #0
   29f42:	4770      	bx	lr

00029f44 <CC_HalTerminate>:
   29f44:	2000      	movs	r0, #0
   29f46:	4770      	bx	lr

00029f48 <CC_HalClearInterruptBit>:
   29f48:	0543      	lsls	r3, r0, #21
   29f4a:	d503      	bpl.n	29f54 <CC_HalClearInterruptBit+0xc>
   29f4c:	4b03      	ldr	r3, [pc, #12]	; (29f5c <CC_HalClearInterruptBit+0x14>)
   29f4e:	f04f 32ff 	mov.w	r2, #4294967295
   29f52:	601a      	str	r2, [r3, #0]
   29f54:	4b02      	ldr	r3, [pc, #8]	; (29f60 <CC_HalClearInterruptBit+0x18>)
   29f56:	6018      	str	r0, [r3, #0]
   29f58:	4770      	bx	lr
   29f5a:	bf00      	nop
   29f5c:	5002b108 	.word	0x5002b108
   29f60:	5002ba08 	.word	0x5002ba08

00029f64 <CC_HalMaskInterrupt>:
   29f64:	4b01      	ldr	r3, [pc, #4]	; (29f6c <CC_HalMaskInterrupt+0x8>)
   29f66:	6018      	str	r0, [r3, #0]
   29f68:	4770      	bx	lr
   29f6a:	bf00      	nop
   29f6c:	5002ba04 	.word	0x5002ba04

00029f70 <CC_HalWaitInterrupt>:
   29f70:	b108      	cbz	r0, 29f76 <CC_HalWaitInterrupt+0x6>
   29f72:	f000 b86f 	b.w	2a054 <CC_PalWaitInterrupt>
   29f76:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   29f7a:	4770      	bx	lr

00029f7c <CC_HalWaitInterruptRND>:
   29f7c:	b108      	cbz	r0, 29f82 <CC_HalWaitInterruptRND+0x6>
   29f7e:	f000 b84f 	b.w	2a020 <CC_PalWaitInterruptRND>
   29f82:	f44f 0075 	mov.w	r0, #16056320	; 0xf50000
   29f86:	4770      	bx	lr

00029f88 <CC_PalInit>:
   29f88:	b510      	push	{r4, lr}
   29f8a:	4811      	ldr	r0, [pc, #68]	; (29fd0 <CC_PalInit+0x48>)
   29f8c:	f000 f870 	bl	2a070 <CC_PalMutexCreate>
   29f90:	b100      	cbz	r0, 29f94 <CC_PalInit+0xc>
   29f92:	bd10      	pop	{r4, pc}
   29f94:	480f      	ldr	r0, [pc, #60]	; (29fd4 <CC_PalInit+0x4c>)
   29f96:	f000 f86b 	bl	2a070 <CC_PalMutexCreate>
   29f9a:	2800      	cmp	r0, #0
   29f9c:	d1f9      	bne.n	29f92 <CC_PalInit+0xa>
   29f9e:	4c0e      	ldr	r4, [pc, #56]	; (29fd8 <CC_PalInit+0x50>)
   29fa0:	4620      	mov	r0, r4
   29fa2:	f000 f865 	bl	2a070 <CC_PalMutexCreate>
   29fa6:	2800      	cmp	r0, #0
   29fa8:	d1f3      	bne.n	29f92 <CC_PalInit+0xa>
   29faa:	4b0c      	ldr	r3, [pc, #48]	; (29fdc <CC_PalInit+0x54>)
   29fac:	480c      	ldr	r0, [pc, #48]	; (29fe0 <CC_PalInit+0x58>)
   29fae:	601c      	str	r4, [r3, #0]
   29fb0:	f000 f85e 	bl	2a070 <CC_PalMutexCreate>
   29fb4:	4601      	mov	r1, r0
   29fb6:	2800      	cmp	r0, #0
   29fb8:	d1eb      	bne.n	29f92 <CC_PalInit+0xa>
   29fba:	f000 f82d 	bl	2a018 <CC_PalDmaInit>
   29fbe:	4604      	mov	r4, r0
   29fc0:	b108      	cbz	r0, 29fc6 <CC_PalInit+0x3e>
   29fc2:	4620      	mov	r0, r4
   29fc4:	bd10      	pop	{r4, pc}
   29fc6:	f000 f879 	bl	2a0bc <CC_PalPowerSaveModeInit>
   29fca:	4620      	mov	r0, r4
   29fcc:	e7fa      	b.n	29fc4 <CC_PalInit+0x3c>
   29fce:	bf00      	nop
   29fd0:	200006c8 	.word	0x200006c8
   29fd4:	200006bc 	.word	0x200006bc
   29fd8:	200006c4 	.word	0x200006c4
   29fdc:	200006cc 	.word	0x200006cc
   29fe0:	200006c0 	.word	0x200006c0

00029fe4 <CC_PalTerminate>:
   29fe4:	b508      	push	{r3, lr}
   29fe6:	4808      	ldr	r0, [pc, #32]	; (2a008 <CC_PalTerminate+0x24>)
   29fe8:	f000 f84c 	bl	2a084 <CC_PalMutexDestroy>
   29fec:	4807      	ldr	r0, [pc, #28]	; (2a00c <CC_PalTerminate+0x28>)
   29fee:	f000 f849 	bl	2a084 <CC_PalMutexDestroy>
   29ff2:	4807      	ldr	r0, [pc, #28]	; (2a010 <CC_PalTerminate+0x2c>)
   29ff4:	f000 f846 	bl	2a084 <CC_PalMutexDestroy>
   29ff8:	4806      	ldr	r0, [pc, #24]	; (2a014 <CC_PalTerminate+0x30>)
   29ffa:	f000 f843 	bl	2a084 <CC_PalMutexDestroy>
   29ffe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   2a002:	f000 b80b 	b.w	2a01c <CC_PalDmaTerminate>
   2a006:	bf00      	nop
   2a008:	200006c8 	.word	0x200006c8
   2a00c:	200006bc 	.word	0x200006bc
   2a010:	200006c4 	.word	0x200006c4
   2a014:	200006c0 	.word	0x200006c0

0002a018 <CC_PalDmaInit>:
   2a018:	2000      	movs	r0, #0
   2a01a:	4770      	bx	lr

0002a01c <CC_PalDmaTerminate>:
   2a01c:	4770      	bx	lr
   2a01e:	bf00      	nop

0002a020 <CC_PalWaitInterruptRND>:
   2a020:	b410      	push	{r4}
   2a022:	4c08      	ldr	r4, [pc, #32]	; (2a044 <CC_PalWaitInterruptRND+0x24>)
   2a024:	4602      	mov	r2, r0
   2a026:	6823      	ldr	r3, [r4, #0]
   2a028:	4213      	tst	r3, r2
   2a02a:	d0fc      	beq.n	2a026 <CC_PalWaitInterruptRND+0x6>
   2a02c:	b121      	cbz	r1, 2a038 <CC_PalWaitInterruptRND+0x18>
   2a02e:	4b06      	ldr	r3, [pc, #24]	; (2a048 <CC_PalWaitInterruptRND+0x28>)
   2a030:	4806      	ldr	r0, [pc, #24]	; (2a04c <CC_PalWaitInterruptRND+0x2c>)
   2a032:	681b      	ldr	r3, [r3, #0]
   2a034:	600b      	str	r3, [r1, #0]
   2a036:	6003      	str	r3, [r0, #0]
   2a038:	4b05      	ldr	r3, [pc, #20]	; (2a050 <CC_PalWaitInterruptRND+0x30>)
   2a03a:	601a      	str	r2, [r3, #0]
   2a03c:	2000      	movs	r0, #0
   2a03e:	bc10      	pop	{r4}
   2a040:	4770      	bx	lr
   2a042:	bf00      	nop
   2a044:	5002ba00 	.word	0x5002ba00
   2a048:	5002b104 	.word	0x5002b104
   2a04c:	5002b108 	.word	0x5002b108
   2a050:	5002ba08 	.word	0x5002ba08

0002a054 <CC_PalWaitInterrupt>:
   2a054:	4904      	ldr	r1, [pc, #16]	; (2a068 <CC_PalWaitInterrupt+0x14>)
   2a056:	4602      	mov	r2, r0
   2a058:	680b      	ldr	r3, [r1, #0]
   2a05a:	421a      	tst	r2, r3
   2a05c:	d0fc      	beq.n	2a058 <CC_PalWaitInterrupt+0x4>
   2a05e:	4b03      	ldr	r3, [pc, #12]	; (2a06c <CC_PalWaitInterrupt+0x18>)
   2a060:	2000      	movs	r0, #0
   2a062:	601a      	str	r2, [r3, #0]
   2a064:	4770      	bx	lr
   2a066:	bf00      	nop
   2a068:	5002ba00 	.word	0x5002ba00
   2a06c:	5002ba08 	.word	0x5002ba08

0002a070 <CC_PalMutexCreate>:
   2a070:	b508      	push	{r3, lr}
   2a072:	4b03      	ldr	r3, [pc, #12]	; (2a080 <CC_PalMutexCreate+0x10>)
   2a074:	6802      	ldr	r2, [r0, #0]
   2a076:	681b      	ldr	r3, [r3, #0]
   2a078:	6810      	ldr	r0, [r2, #0]
   2a07a:	4798      	blx	r3
   2a07c:	2000      	movs	r0, #0
   2a07e:	bd08      	pop	{r3, pc}
   2a080:	2000067c 	.word	0x2000067c

0002a084 <CC_PalMutexDestroy>:
   2a084:	b508      	push	{r3, lr}
   2a086:	4b03      	ldr	r3, [pc, #12]	; (2a094 <CC_PalMutexDestroy+0x10>)
   2a088:	6802      	ldr	r2, [r0, #0]
   2a08a:	685b      	ldr	r3, [r3, #4]
   2a08c:	6810      	ldr	r0, [r2, #0]
   2a08e:	4798      	blx	r3
   2a090:	2000      	movs	r0, #0
   2a092:	bd08      	pop	{r3, pc}
   2a094:	2000067c 	.word	0x2000067c

0002a098 <CC_PalMutexLock>:
   2a098:	4b02      	ldr	r3, [pc, #8]	; (2a0a4 <CC_PalMutexLock+0xc>)
   2a09a:	6802      	ldr	r2, [r0, #0]
   2a09c:	689b      	ldr	r3, [r3, #8]
   2a09e:	6810      	ldr	r0, [r2, #0]
   2a0a0:	4718      	bx	r3
   2a0a2:	bf00      	nop
   2a0a4:	2000067c 	.word	0x2000067c

0002a0a8 <CC_PalMutexUnlock>:
   2a0a8:	b508      	push	{r3, lr}
   2a0aa:	4b03      	ldr	r3, [pc, #12]	; (2a0b8 <CC_PalMutexUnlock+0x10>)
   2a0ac:	6802      	ldr	r2, [r0, #0]
   2a0ae:	68db      	ldr	r3, [r3, #12]
   2a0b0:	6810      	ldr	r0, [r2, #0]
   2a0b2:	4798      	blx	r3
   2a0b4:	2000      	movs	r0, #0
   2a0b6:	bd08      	pop	{r3, pc}
   2a0b8:	2000067c 	.word	0x2000067c

0002a0bc <CC_PalPowerSaveModeInit>:
   2a0bc:	b570      	push	{r4, r5, r6, lr}
   2a0be:	4c09      	ldr	r4, [pc, #36]	; (2a0e4 <CC_PalPowerSaveModeInit+0x28>)
   2a0c0:	4d09      	ldr	r5, [pc, #36]	; (2a0e8 <CC_PalPowerSaveModeInit+0x2c>)
   2a0c2:	6920      	ldr	r0, [r4, #16]
   2a0c4:	68ab      	ldr	r3, [r5, #8]
   2a0c6:	4798      	blx	r3
   2a0c8:	b118      	cbz	r0, 2a0d2 <CC_PalPowerSaveModeInit+0x16>
   2a0ca:	4b08      	ldr	r3, [pc, #32]	; (2a0ec <CC_PalPowerSaveModeInit+0x30>)
   2a0cc:	4808      	ldr	r0, [pc, #32]	; (2a0f0 <CC_PalPowerSaveModeInit+0x34>)
   2a0ce:	685b      	ldr	r3, [r3, #4]
   2a0d0:	4798      	blx	r3
   2a0d2:	4a08      	ldr	r2, [pc, #32]	; (2a0f4 <CC_PalPowerSaveModeInit+0x38>)
   2a0d4:	68eb      	ldr	r3, [r5, #12]
   2a0d6:	6920      	ldr	r0, [r4, #16]
   2a0d8:	2100      	movs	r1, #0
   2a0da:	6011      	str	r1, [r2, #0]
   2a0dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   2a0e0:	4718      	bx	r3
   2a0e2:	bf00      	nop
   2a0e4:	2000068c 	.word	0x2000068c
   2a0e8:	2000067c 	.word	0x2000067c
   2a0ec:	2000066c 	.word	0x2000066c
   2a0f0:	00031fcc 	.word	0x00031fcc
   2a0f4:	200034e4 	.word	0x200034e4

0002a0f8 <CC_PalPowerSaveModeSelect>:
   2a0f8:	b570      	push	{r4, r5, r6, lr}
   2a0fa:	4d1a      	ldr	r5, [pc, #104]	; (2a164 <CC_PalPowerSaveModeSelect+0x6c>)
   2a0fc:	4e1a      	ldr	r6, [pc, #104]	; (2a168 <CC_PalPowerSaveModeSelect+0x70>)
   2a0fe:	4604      	mov	r4, r0
   2a100:	68b2      	ldr	r2, [r6, #8]
   2a102:	6928      	ldr	r0, [r5, #16]
   2a104:	4790      	blx	r2
   2a106:	b9f0      	cbnz	r0, 2a146 <CC_PalPowerSaveModeSelect+0x4e>
   2a108:	b15c      	cbz	r4, 2a122 <CC_PalPowerSaveModeSelect+0x2a>
   2a10a:	4c18      	ldr	r4, [pc, #96]	; (2a16c <CC_PalPowerSaveModeSelect+0x74>)
   2a10c:	6823      	ldr	r3, [r4, #0]
   2a10e:	b1ab      	cbz	r3, 2a13c <CC_PalPowerSaveModeSelect+0x44>
   2a110:	2b01      	cmp	r3, #1
   2a112:	d01a      	beq.n	2a14a <CC_PalPowerSaveModeSelect+0x52>
   2a114:	3b01      	subs	r3, #1
   2a116:	6023      	str	r3, [r4, #0]
   2a118:	6928      	ldr	r0, [r5, #16]
   2a11a:	68f3      	ldr	r3, [r6, #12]
   2a11c:	4798      	blx	r3
   2a11e:	2000      	movs	r0, #0
   2a120:	bd70      	pop	{r4, r5, r6, pc}
   2a122:	4c12      	ldr	r4, [pc, #72]	; (2a16c <CC_PalPowerSaveModeSelect+0x74>)
   2a124:	6821      	ldr	r1, [r4, #0]
   2a126:	b939      	cbnz	r1, 2a138 <CC_PalPowerSaveModeSelect+0x40>
   2a128:	4b11      	ldr	r3, [pc, #68]	; (2a170 <CC_PalPowerSaveModeSelect+0x78>)
   2a12a:	4a12      	ldr	r2, [pc, #72]	; (2a174 <CC_PalPowerSaveModeSelect+0x7c>)
   2a12c:	2001      	movs	r0, #1
   2a12e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
   2a132:	6813      	ldr	r3, [r2, #0]
   2a134:	2b00      	cmp	r3, #0
   2a136:	d1fc      	bne.n	2a132 <CC_PalPowerSaveModeSelect+0x3a>
   2a138:	3101      	adds	r1, #1
   2a13a:	6021      	str	r1, [r4, #0]
   2a13c:	68f3      	ldr	r3, [r6, #12]
   2a13e:	6928      	ldr	r0, [r5, #16]
   2a140:	4798      	blx	r3
   2a142:	2000      	movs	r0, #0
   2a144:	bd70      	pop	{r4, r5, r6, pc}
   2a146:	480c      	ldr	r0, [pc, #48]	; (2a178 <CC_PalPowerSaveModeSelect+0x80>)
   2a148:	bd70      	pop	{r4, r5, r6, pc}
   2a14a:	4a0a      	ldr	r2, [pc, #40]	; (2a174 <CC_PalPowerSaveModeSelect+0x7c>)
   2a14c:	6813      	ldr	r3, [r2, #0]
   2a14e:	2b00      	cmp	r3, #0
   2a150:	d1fc      	bne.n	2a14c <CC_PalPowerSaveModeSelect+0x54>
   2a152:	4a07      	ldr	r2, [pc, #28]	; (2a170 <CC_PalPowerSaveModeSelect+0x78>)
   2a154:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
   2a158:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
   2a15c:	f7ff ff02 	bl	29f64 <CC_HalMaskInterrupt>
   2a160:	6823      	ldr	r3, [r4, #0]
   2a162:	e7d7      	b.n	2a114 <CC_PalPowerSaveModeSelect+0x1c>
   2a164:	2000068c 	.word	0x2000068c
   2a168:	2000067c 	.word	0x2000067c
   2a16c:	200034e4 	.word	0x200034e4
   2a170:	5002a000 	.word	0x5002a000
   2a174:	5002b910 	.word	0x5002b910
   2a178:	ffff8fe9 	.word	0xffff8fe9

0002a17c <mutex_init>:
   2a17c:	4b01      	ldr	r3, [pc, #4]	; (2a184 <mutex_init+0x8>)
   2a17e:	681b      	ldr	r3, [r3, #0]
   2a180:	4718      	bx	r3
   2a182:	bf00      	nop
   2a184:	2000067c 	.word	0x2000067c

0002a188 <mutex_lock>:
   2a188:	4b01      	ldr	r3, [pc, #4]	; (2a190 <mutex_lock+0x8>)
   2a18a:	689b      	ldr	r3, [r3, #8]
   2a18c:	4718      	bx	r3
   2a18e:	bf00      	nop
   2a190:	2000067c 	.word	0x2000067c

0002a194 <mutex_unlock>:
   2a194:	4b01      	ldr	r3, [pc, #4]	; (2a19c <mutex_unlock+0x8>)
   2a196:	68db      	ldr	r3, [r3, #12]
   2a198:	4718      	bx	r3
   2a19a:	bf00      	nop
   2a19c:	2000067c 	.word	0x2000067c

0002a1a0 <startTrngHW>:
   2a1a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2a1a4:	2800      	cmp	r0, #0
   2a1a6:	d07b      	beq.n	2a2a0 <startTrngHW+0x100>
   2a1a8:	460c      	mov	r4, r1
   2a1aa:	2900      	cmp	r1, #0
   2a1ac:	d078      	beq.n	2a2a0 <startTrngHW+0x100>
   2a1ae:	461d      	mov	r5, r3
   2a1b0:	2b00      	cmp	r3, #0
   2a1b2:	d075      	beq.n	2a2a0 <startTrngHW+0x100>
   2a1b4:	4606      	mov	r6, r0
   2a1b6:	b122      	cbz	r2, 2a1c2 <startTrngHW+0x22>
   2a1b8:	2201      	movs	r2, #1
   2a1ba:	2300      	movs	r3, #0
   2a1bc:	602a      	str	r2, [r5, #0]
   2a1be:	f8c0 30d8 	str.w	r3, [r0, #216]	; 0xd8
   2a1c2:	682b      	ldr	r3, [r5, #0]
   2a1c4:	2b00      	cmp	r3, #0
   2a1c6:	d067      	beq.n	2a298 <startTrngHW+0xf8>
   2a1c8:	4629      	mov	r1, r5
   2a1ca:	4620      	mov	r0, r4
   2a1cc:	f000 fda4 	bl	2ad18 <LLF_RND_GetFastestRosc>
   2a1d0:	4607      	mov	r7, r0
   2a1d2:	2800      	cmp	r0, #0
   2a1d4:	d161      	bne.n	2a29a <startTrngHW+0xfa>
   2a1d6:	6828      	ldr	r0, [r5, #0]
   2a1d8:	4621      	mov	r1, r4
   2a1da:	f000 fd7f 	bl	2acdc <LLF_RND_GetRoscSampleCnt>
   2a1de:	4607      	mov	r7, r0
   2a1e0:	2800      	cmp	r0, #0
   2a1e2:	d15a      	bne.n	2a29a <startTrngHW+0xfa>
   2a1e4:	682b      	ldr	r3, [r5, #0]
   2a1e6:	2b08      	cmp	r3, #8
   2a1e8:	d069      	beq.n	2a2be <startTrngHW+0x11e>
   2a1ea:	2b04      	cmp	r3, #4
   2a1ec:	d06a      	beq.n	2a2c4 <startTrngHW+0x124>
   2a1ee:	f1a3 0802 	sub.w	r8, r3, #2
   2a1f2:	fab8 f888 	clz	r8, r8
   2a1f6:	ea4f 1858 	mov.w	r8, r8, lsr #5
   2a1fa:	4b34      	ldr	r3, [pc, #208]	; (2a2cc <startTrngHW+0x12c>)
   2a1fc:	4934      	ldr	r1, [pc, #208]	; (2a2d0 <startTrngHW+0x130>)
   2a1fe:	4a35      	ldr	r2, [pc, #212]	; (2a2d4 <startTrngHW+0x134>)
   2a200:	2001      	movs	r0, #1
   2a202:	6018      	str	r0, [r3, #0]
   2a204:	469c      	mov	ip, r3
   2a206:	6008      	str	r0, [r1, #0]
   2a208:	f8cc 0000 	str.w	r0, [ip]
   2a20c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a20e:	6013      	str	r3, [r2, #0]
   2a210:	6811      	ldr	r1, [r2, #0]
   2a212:	428b      	cmp	r3, r1
   2a214:	d1f8      	bne.n	2a208 <startTrngHW+0x68>
   2a216:	4b30      	ldr	r3, [pc, #192]	; (2a2d8 <startTrngHW+0x138>)
   2a218:	f04f 0900 	mov.w	r9, #0
   2a21c:	f8c3 9000 	str.w	r9, [r3]
   2a220:	f04f 30ff 	mov.w	r0, #4294967295
   2a224:	f7ff fe90 	bl	29f48 <CC_HalClearInterruptBit>
   2a228:	4b2c      	ldr	r3, [pc, #176]	; (2a2dc <startTrngHW+0x13c>)
   2a22a:	f06f 021b 	mvn.w	r2, #27
   2a22e:	601a      	str	r2, [r3, #0]
   2a230:	4648      	mov	r0, r9
   2a232:	f7ff fe97 	bl	29f64 <CC_HalMaskInterrupt>
   2a236:	4a2a      	ldr	r2, [pc, #168]	; (2a2e0 <startTrngHW+0x140>)
   2a238:	4b2a      	ldr	r3, [pc, #168]	; (2a2e4 <startTrngHW+0x144>)
   2a23a:	f8c2 8000 	str.w	r8, [r2]
   2a23e:	6818      	ldr	r0, [r3, #0]
   2a240:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   2a244:	f7ff fe8e 	bl	29f64 <CC_HalMaskInterrupt>
   2a248:	4b27      	ldr	r3, [pc, #156]	; (2a2e8 <startTrngHW+0x148>)
   2a24a:	220a      	movs	r2, #10
   2a24c:	601a      	str	r2, [r3, #0]
   2a24e:	9908      	ldr	r1, [sp, #32]
   2a250:	6923      	ldr	r3, [r4, #16]
   2a252:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2a254:	2901      	cmp	r1, #1
   2a256:	d027      	beq.n	2a2a8 <startTrngHW+0x108>
   2a258:	4924      	ldr	r1, [pc, #144]	; (2a2ec <startTrngHW+0x14c>)
   2a25a:	fba1 1303 	umull	r1, r3, r1, r3
   2a25e:	091b      	lsrs	r3, r3, #4
   2a260:	fb03 f302 	mul.w	r3, r3, r2
   2a264:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a268:	4921      	ldr	r1, [pc, #132]	; (2a2f0 <startTrngHW+0x150>)
   2a26a:	4a1b      	ldr	r2, [pc, #108]	; (2a2d8 <startTrngHW+0x138>)
   2a26c:	03db      	lsls	r3, r3, #15
   2a26e:	099b      	lsrs	r3, r3, #6
   2a270:	600b      	str	r3, [r1, #0]
   2a272:	2301      	movs	r3, #1
   2a274:	6013      	str	r3, [r2, #0]
   2a276:	f8d6 30d8 	ldr.w	r3, [r6, #216]	; 0xd8
   2a27a:	682a      	ldr	r2, [r5, #0]
   2a27c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2a280:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   2a284:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   2a288:	682a      	ldr	r2, [r5, #0]
   2a28a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2a28e:	f8c6 30d8 	str.w	r3, [r6, #216]	; 0xd8
   2a292:	4638      	mov	r0, r7
   2a294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a298:	4f16      	ldr	r7, [pc, #88]	; (2a2f4 <startTrngHW+0x154>)
   2a29a:	4638      	mov	r0, r7
   2a29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a2a0:	4f15      	ldr	r7, [pc, #84]	; (2a2f8 <startTrngHW+0x158>)
   2a2a2:	4638      	mov	r0, r7
   2a2a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2a2a8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2a2ac:	f8d3 1c0c 	ldr.w	r1, [r3, #3084]	; 0xc0c
   2a2b0:	3101      	adds	r1, #1
   2a2b2:	d002      	beq.n	2a2ba <startTrngHW+0x11a>
   2a2b4:	f8d3 3c0c 	ldr.w	r3, [r3, #3084]	; 0xc0c
   2a2b8:	e7ce      	b.n	2a258 <startTrngHW+0xb8>
   2a2ba:	2316      	movs	r3, #22
   2a2bc:	e7d0      	b.n	2a260 <startTrngHW+0xc0>
   2a2be:	f04f 0803 	mov.w	r8, #3
   2a2c2:	e79a      	b.n	2a1fa <startTrngHW+0x5a>
   2a2c4:	f04f 0802 	mov.w	r8, #2
   2a2c8:	e797      	b.n	2a1fa <startTrngHW+0x5a>
   2a2ca:	bf00      	nop
   2a2cc:	5002b1c4 	.word	0x5002b1c4
   2a2d0:	5002b140 	.word	0x5002b140
   2a2d4:	5002b130 	.word	0x5002b130
   2a2d8:	5002b12c 	.word	0x5002b12c
   2a2dc:	5002b100 	.word	0x5002b100
   2a2e0:	5002b10c 	.word	0x5002b10c
   2a2e4:	5002ba04 	.word	0x5002ba04
   2a2e8:	5002b138 	.word	0x5002b138
   2a2ec:	aaaaaaab 	.word	0xaaaaaaab
   2a2f0:	5002b1d8 	.word	0x5002b1d8
   2a2f4:	00f10c31 	.word	0x00f10c31
   2a2f8:	00f10c35 	.word	0x00f10c35

0002a2fc <LLF_RND_RepetitionCounterTest.part.0>:
   2a2fc:	b4f0      	push	{r4, r5, r6, r7}
   2a2fe:	ea4f 0cc1 	mov.w	ip, r1, lsl #3
   2a302:	2400      	movs	r4, #0
   2a304:	f10c 3cff 	add.w	ip, ip, #4294967295
   2a308:	4626      	mov	r6, r4
   2a30a:	4627      	mov	r7, r4
   2a30c:	e006      	b.n	2a31c <LLF_RND_RepetitionCounterTest.part.0+0x20>
   2a30e:	429f      	cmp	r7, r3
   2a310:	d016      	beq.n	2a340 <LLF_RND_RepetitionCounterTest.part.0+0x44>
   2a312:	2601      	movs	r6, #1
   2a314:	4565      	cmp	r5, ip
   2a316:	d819      	bhi.n	2a34c <LLF_RND_RepetitionCounterTest.part.0+0x50>
   2a318:	462c      	mov	r4, r5
   2a31a:	461f      	mov	r7, r3
   2a31c:	0963      	lsrs	r3, r4, #5
   2a31e:	f004 011f 	and.w	r1, r4, #31
   2a322:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
   2a326:	291f      	cmp	r1, #31
   2a328:	fa23 f301 	lsr.w	r3, r3, r1
   2a32c:	f104 0501 	add.w	r5, r4, #1
   2a330:	bf18      	it	ne
   2a332:	f003 0301 	andne.w	r3, r3, #1
   2a336:	2c00      	cmp	r4, #0
   2a338:	d1e9      	bne.n	2a30e <LLF_RND_RepetitionCounterTest.part.0+0x12>
   2a33a:	2601      	movs	r6, #1
   2a33c:	4635      	mov	r5, r6
   2a33e:	e7eb      	b.n	2a318 <LLF_RND_RepetitionCounterTest.part.0+0x1c>
   2a340:	3601      	adds	r6, #1
   2a342:	4296      	cmp	r6, r2
   2a344:	d1e6      	bne.n	2a314 <LLF_RND_RepetitionCounterTest.part.0+0x18>
   2a346:	4803      	ldr	r0, [pc, #12]	; (2a354 <LLF_RND_RepetitionCounterTest.part.0+0x58>)
   2a348:	bcf0      	pop	{r4, r5, r6, r7}
   2a34a:	4770      	bx	lr
   2a34c:	2000      	movs	r0, #0
   2a34e:	bcf0      	pop	{r4, r5, r6, r7}
   2a350:	4770      	bx	lr
   2a352:	bf00      	nop
   2a354:	00f10c36 	.word	0x00f10c36

0002a358 <LLF_RND_AdaptiveProportionTest>:
   2a358:	2800      	cmp	r0, #0
   2a35a:	d061      	beq.n	2a420 <LLF_RND_AdaptiveProportionTest+0xc8>
   2a35c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a360:	1e4c      	subs	r4, r1, #1
   2a362:	f5b4 7f04 	cmp.w	r4, #528	; 0x210
   2a366:	d227      	bcs.n	2a3b8 <LLF_RND_AdaptiveProportionTest+0x60>
   2a368:	b333      	cbz	r3, 2a3b8 <LLF_RND_AdaptiveProportionTest+0x60>
   2a36a:	b32a      	cbz	r2, 2a3b8 <LLF_RND_AdaptiveProportionTest+0x60>
   2a36c:	00cd      	lsls	r5, r1, #3
   2a36e:	2b01      	cmp	r3, #1
   2a370:	f105 3eff 	add.w	lr, r5, #4294967295
   2a374:	d030      	beq.n	2a3d8 <LLF_RND_AdaptiveProportionTest+0x80>
   2a376:	2100      	movs	r1, #0
   2a378:	468c      	mov	ip, r1
   2a37a:	460f      	mov	r7, r1
   2a37c:	460e      	mov	r6, r1
   2a37e:	f103 38ff 	add.w	r8, r3, #4294967295
   2a382:	094c      	lsrs	r4, r1, #5
   2a384:	f001 051f 	and.w	r5, r1, #31
   2a388:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   2a38c:	2d1f      	cmp	r5, #31
   2a38e:	fa24 f405 	lsr.w	r4, r4, r5
   2a392:	bf18      	it	ne
   2a394:	f004 0401 	andne.w	r4, r4, #1
   2a398:	b921      	cbnz	r1, 2a3a4 <LLF_RND_AdaptiveProportionTest+0x4c>
   2a39a:	2601      	movs	r6, #1
   2a39c:	46b4      	mov	ip, r6
   2a39e:	4631      	mov	r1, r6
   2a3a0:	4627      	mov	r7, r4
   2a3a2:	e7ee      	b.n	2a382 <LLF_RND_AdaptiveProportionTest+0x2a>
   2a3a4:	42b3      	cmp	r3, r6
   2a3a6:	d013      	beq.n	2a3d0 <LLF_RND_AdaptiveProportionTest+0x78>
   2a3a8:	42a7      	cmp	r7, r4
   2a3aa:	d101      	bne.n	2a3b0 <LLF_RND_AdaptiveProportionTest+0x58>
   2a3ac:	f10c 0c01 	add.w	ip, ip, #1
   2a3b0:	4546      	cmp	r6, r8
   2a3b2:	d104      	bne.n	2a3be <LLF_RND_AdaptiveProportionTest+0x66>
   2a3b4:	4562      	cmp	r2, ip
   2a3b6:	d202      	bcs.n	2a3be <LLF_RND_AdaptiveProportionTest+0x66>
   2a3b8:	481a      	ldr	r0, [pc, #104]	; (2a424 <LLF_RND_AdaptiveProportionTest+0xcc>)
   2a3ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a3be:	463c      	mov	r4, r7
   2a3c0:	3101      	adds	r1, #1
   2a3c2:	458e      	cmp	lr, r1
   2a3c4:	f106 0601 	add.w	r6, r6, #1
   2a3c8:	d2ea      	bcs.n	2a3a0 <LLF_RND_AdaptiveProportionTest+0x48>
   2a3ca:	2000      	movs	r0, #0
   2a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2a3d0:	2600      	movs	r6, #0
   2a3d2:	f04f 0c01 	mov.w	ip, #1
   2a3d6:	e7f3      	b.n	2a3c0 <LLF_RND_AdaptiveProportionTest+0x68>
   2a3d8:	2600      	movs	r6, #0
   2a3da:	46b4      	mov	ip, r6
   2a3dc:	4637      	mov	r7, r6
   2a3de:	4634      	mov	r4, r6
   2a3e0:	0961      	lsrs	r1, r4, #5
   2a3e2:	f004 031f 	and.w	r3, r4, #31
   2a3e6:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   2a3ea:	2b1f      	cmp	r3, #31
   2a3ec:	fa21 f103 	lsr.w	r1, r1, r3
   2a3f0:	bf18      	it	ne
   2a3f2:	f001 0101 	andne.w	r1, r1, #1
   2a3f6:	b13c      	cbz	r4, 2a408 <LLF_RND_AdaptiveProportionTest+0xb0>
   2a3f8:	b95f      	cbnz	r7, 2a412 <LLF_RND_AdaptiveProportionTest+0xba>
   2a3fa:	458c      	cmp	ip, r1
   2a3fc:	d001      	beq.n	2a402 <LLF_RND_AdaptiveProportionTest+0xaa>
   2a3fe:	4661      	mov	r1, ip
   2a400:	e008      	b.n	2a414 <LLF_RND_AdaptiveProportionTest+0xbc>
   2a402:	3601      	adds	r6, #1
   2a404:	4661      	mov	r1, ip
   2a406:	e005      	b.n	2a414 <LLF_RND_AdaptiveProportionTest+0xbc>
   2a408:	2601      	movs	r6, #1
   2a40a:	4634      	mov	r4, r6
   2a40c:	468c      	mov	ip, r1
   2a40e:	2701      	movs	r7, #1
   2a410:	e7e6      	b.n	2a3e0 <LLF_RND_AdaptiveProportionTest+0x88>
   2a412:	463e      	mov	r6, r7
   2a414:	42b2      	cmp	r2, r6
   2a416:	d3cf      	bcc.n	2a3b8 <LLF_RND_AdaptiveProportionTest+0x60>
   2a418:	3401      	adds	r4, #1
   2a41a:	42ac      	cmp	r4, r5
   2a41c:	d1f6      	bne.n	2a40c <LLF_RND_AdaptiveProportionTest+0xb4>
   2a41e:	e7d4      	b.n	2a3ca <LLF_RND_AdaptiveProportionTest+0x72>
   2a420:	4800      	ldr	r0, [pc, #0]	; (2a424 <LLF_RND_AdaptiveProportionTest+0xcc>)
   2a422:	4770      	bx	lr
   2a424:	00f10c37 	.word	0x00f10c37

0002a428 <getTrngSource>:
   2a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a42c:	b08d      	sub	sp, #52	; 0x34
   2a42e:	e9dd 6517 	ldrd	r6, r5, [sp, #92]	; 0x5c
   2a432:	4607      	mov	r7, r0
   2a434:	460c      	mov	r4, r1
   2a436:	2d00      	cmp	r5, #0
   2a438:	d14d      	bne.n	2a4d6 <getTrngSource+0xae>
   2a43a:	f8d1 a010 	ldr.w	sl, [r1, #16]
   2a43e:	601e      	str	r6, [r3, #0]
   2a440:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a442:	2100      	movs	r1, #0
   2a444:	6019      	str	r1, [r3, #0]
   2a446:	2a00      	cmp	r2, #0
   2a448:	f000 8120 	beq.w	2a68c <getTrngSource+0x264>
   2a44c:	4a9b      	ldr	r2, [pc, #620]	; (2a6bc <getTrngSource+0x294>)
   2a44e:	4b9c      	ldr	r3, [pc, #624]	; (2a6c0 <getTrngSource+0x298>)
   2a450:	6811      	ldr	r1, [r2, #0]
   2a452:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2a454:	681b      	ldr	r3, [r3, #0]
   2a456:	429a      	cmp	r2, r3
   2a458:	d148      	bne.n	2a4ec <getTrngSource+0xc4>
   2a45a:	290a      	cmp	r1, #10
   2a45c:	d146      	bne.n	2a4ec <getTrngSource+0xc4>
   2a45e:	f897 30db 	ldrb.w	r3, [r7, #219]	; 0xdb
   2a462:	9304      	str	r3, [sp, #16]
   2a464:	4b97      	ldr	r3, [pc, #604]	; (2a6c4 <getTrngSource+0x29c>)
   2a466:	fba3 230a 	umull	r2, r3, r3, sl
   2a46a:	ea4f 0b93 	mov.w	fp, r3, lsr #2
   2a46e:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   2a472:	f106 0208 	add.w	r2, r6, #8
   2a476:	ebaa 0b43 	sub.w	fp, sl, r3, lsl #1
   2a47a:	2304      	movs	r3, #4
   2a47c:	9203      	str	r2, [sp, #12]
   2a47e:	9302      	str	r3, [sp, #8]
   2a480:	46b8      	mov	r8, r7
   2a482:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a484:	f8c3 a000 	str.w	sl, [r3]
   2a488:	f1ba 0f00 	cmp.w	sl, #0
   2a48c:	f000 80c4 	beq.w	2a618 <getTrngSource+0x1f0>
   2a490:	9e03      	ldr	r6, [sp, #12]
   2a492:	4655      	mov	r5, sl
   2a494:	f04f 0900 	mov.w	r9, #0
   2a498:	f000 fc4e 	bl	2ad38 <LLF_RND_TurnOffTrng>
   2a49c:	2300      	movs	r3, #0
   2a49e:	9305      	str	r3, [sp, #20]
   2a4a0:	f1b8 0f00 	cmp.w	r8, #0
   2a4a4:	f000 80e6 	beq.w	2a674 <getTrngSource+0x24c>
   2a4a8:	2c00      	cmp	r4, #0
   2a4aa:	f000 80e3 	beq.w	2a674 <getTrngSource+0x24c>
   2a4ae:	9b04      	ldr	r3, [sp, #16]
   2a4b0:	2b00      	cmp	r3, #0
   2a4b2:	f000 80dd 	beq.w	2a670 <getTrngSource+0x248>
   2a4b6:	a904      	add	r1, sp, #16
   2a4b8:	4620      	mov	r0, r4
   2a4ba:	f000 fc2d 	bl	2ad18 <LLF_RND_GetFastestRosc>
   2a4be:	b1b8      	cbz	r0, 2a4f0 <getTrngSource+0xc8>
   2a4c0:	4b81      	ldr	r3, [pc, #516]	; (2a6c8 <getTrngSource+0x2a0>)
   2a4c2:	4298      	cmp	r0, r3
   2a4c4:	f040 80a8 	bne.w	2a618 <getTrngSource+0x1f0>
   2a4c8:	9002      	str	r0, [sp, #8]
   2a4ca:	f000 fc35 	bl	2ad38 <LLF_RND_TurnOffTrng>
   2a4ce:	9802      	ldr	r0, [sp, #8]
   2a4d0:	b00d      	add	sp, #52	; 0x34
   2a4d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4d6:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   2a4da:	f8d1 0c0c 	ldr.w	r0, [r1, #3084]	; 0xc0c
   2a4de:	3001      	adds	r0, #1
   2a4e0:	bf14      	ite	ne
   2a4e2:	f8d1 ac0c 	ldrne.w	sl, [r1, #3084]	; 0xc0c
   2a4e6:	f44f 7a04 	moveq.w	sl, #528	; 0x210
   2a4ea:	e7a8      	b.n	2a43e <getTrngSource+0x16>
   2a4ec:	4877      	ldr	r0, [pc, #476]	; (2a6cc <getTrngSource+0x2a4>)
   2a4ee:	e7eb      	b.n	2a4c8 <getTrngSource+0xa0>
   2a4f0:	9804      	ldr	r0, [sp, #16]
   2a4f2:	4621      	mov	r1, r4
   2a4f4:	f000 fbf2 	bl	2acdc <LLF_RND_GetRoscSampleCnt>
   2a4f8:	2800      	cmp	r0, #0
   2a4fa:	d1e1      	bne.n	2a4c0 <getTrngSource+0x98>
   2a4fc:	9f04      	ldr	r7, [sp, #16]
   2a4fe:	2f08      	cmp	r7, #8
   2a500:	f000 80ba 	beq.w	2a678 <getTrngSource+0x250>
   2a504:	2f04      	cmp	r7, #4
   2a506:	f000 80b9 	beq.w	2a67c <getTrngSource+0x254>
   2a50a:	f1a7 0702 	sub.w	r7, r7, #2
   2a50e:	fab7 f787 	clz	r7, r7
   2a512:	097f      	lsrs	r7, r7, #5
   2a514:	496e      	ldr	r1, [pc, #440]	; (2a6d0 <getTrngSource+0x2a8>)
   2a516:	2301      	movs	r3, #1
   2a518:	600b      	str	r3, [r1, #0]
   2a51a:	f841 3c84 	str.w	r3, [r1, #-132]
   2a51e:	4619      	mov	r1, r3
   2a520:	4b6b      	ldr	r3, [pc, #428]	; (2a6d0 <getTrngSource+0x2a8>)
   2a522:	4867      	ldr	r0, [pc, #412]	; (2a6c0 <getTrngSource+0x298>)
   2a524:	6019      	str	r1, [r3, #0]
   2a526:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a528:	6003      	str	r3, [r0, #0]
   2a52a:	6800      	ldr	r0, [r0, #0]
   2a52c:	4283      	cmp	r3, r0
   2a52e:	d1f7      	bne.n	2a520 <getTrngSource+0xf8>
   2a530:	4a68      	ldr	r2, [pc, #416]	; (2a6d4 <getTrngSource+0x2ac>)
   2a532:	2300      	movs	r3, #0
   2a534:	6013      	str	r3, [r2, #0]
   2a536:	f04f 30ff 	mov.w	r0, #4294967295
   2a53a:	f7ff fd05 	bl	29f48 <CC_HalClearInterruptBit>
   2a53e:	2300      	movs	r3, #0
   2a540:	4618      	mov	r0, r3
   2a542:	4b65      	ldr	r3, [pc, #404]	; (2a6d8 <getTrngSource+0x2b0>)
   2a544:	f06f 011b 	mvn.w	r1, #27
   2a548:	6019      	str	r1, [r3, #0]
   2a54a:	f7ff fd0b 	bl	29f64 <CC_HalMaskInterrupt>
   2a54e:	4963      	ldr	r1, [pc, #396]	; (2a6dc <getTrngSource+0x2b4>)
   2a550:	4b63      	ldr	r3, [pc, #396]	; (2a6e0 <getTrngSource+0x2b8>)
   2a552:	600f      	str	r7, [r1, #0]
   2a554:	6818      	ldr	r0, [r3, #0]
   2a556:	4f5b      	ldr	r7, [pc, #364]	; (2a6c4 <getTrngSource+0x29c>)
   2a558:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   2a55c:	f7ff fd02 	bl	29f64 <CC_HalMaskInterrupt>
   2a560:	4b56      	ldr	r3, [pc, #344]	; (2a6bc <getTrngSource+0x294>)
   2a562:	4860      	ldr	r0, [pc, #384]	; (2a6e4 <getTrngSource+0x2bc>)
   2a564:	210a      	movs	r1, #10
   2a566:	6019      	str	r1, [r3, #0]
   2a568:	6921      	ldr	r1, [r4, #16]
   2a56a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2a56c:	fba7 c101 	umull	ip, r1, r7, r1
   2a570:	0909      	lsrs	r1, r1, #4
   2a572:	fb03 f301 	mul.w	r3, r3, r1
   2a576:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a57a:	03db      	lsls	r3, r3, #15
   2a57c:	099b      	lsrs	r3, r3, #6
   2a57e:	6003      	str	r3, [r0, #0]
   2a580:	4b54      	ldr	r3, [pc, #336]	; (2a6d4 <getTrngSource+0x2ac>)
   2a582:	2201      	movs	r2, #1
   2a584:	601a      	str	r2, [r3, #0]
   2a586:	9904      	ldr	r1, [sp, #16]
   2a588:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   2a58c:	020b      	lsls	r3, r1, #8
   2a58e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
   2a592:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
   2a596:	4313      	orrs	r3, r2
   2a598:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   2a59c:	a805      	add	r0, sp, #20
   2a59e:	f000 fb8d 	bl	2acbc <LLF_RND_WaitRngInterrupt>
   2a5a2:	9b05      	ldr	r3, [sp, #20]
   2a5a4:	f003 031a 	and.w	r3, r3, #26
   2a5a8:	4303      	orrs	r3, r0
   2a5aa:	d135      	bne.n	2a618 <getTrngSource+0x1f0>
   2a5ac:	4a4e      	ldr	r2, [pc, #312]	; (2a6e8 <getTrngSource+0x2c0>)
   2a5ae:	4b4f      	ldr	r3, [pc, #316]	; (2a6ec <getTrngSource+0x2c4>)
   2a5b0:	6812      	ldr	r2, [r2, #0]
   2a5b2:	9206      	str	r2, [sp, #24]
   2a5b4:	681a      	ldr	r2, [r3, #0]
   2a5b6:	9207      	str	r2, [sp, #28]
   2a5b8:	685a      	ldr	r2, [r3, #4]
   2a5ba:	9208      	str	r2, [sp, #32]
   2a5bc:	689a      	ldr	r2, [r3, #8]
   2a5be:	9209      	str	r2, [sp, #36]	; 0x24
   2a5c0:	68da      	ldr	r2, [r3, #12]
   2a5c2:	920a      	str	r2, [sp, #40]	; 0x28
   2a5c4:	3310      	adds	r3, #16
   2a5c6:	fba7 2705 	umull	r2, r7, r7, r5
   2a5ca:	681b      	ldr	r3, [r3, #0]
   2a5cc:	930b      	str	r3, [sp, #44]	; 0x2c
   2a5ce:	ebb9 0f97 	cmp.w	r9, r7, lsr #2
   2a5d2:	d102      	bne.n	2a5da <getTrngSource+0x1b2>
   2a5d4:	f1bb 0f00 	cmp.w	fp, #0
   2a5d8:	d141      	bne.n	2a65e <getTrngSource+0x236>
   2a5da:	2218      	movs	r2, #24
   2a5dc:	4630      	mov	r0, r6
   2a5de:	eb0d 0102 	add.w	r1, sp, r2
   2a5e2:	f000 fb0f 	bl	2ac04 <CC_PalMemCopyPlat>
   2a5e6:	3d18      	subs	r5, #24
   2a5e8:	3618      	adds	r6, #24
   2a5ea:	f109 0901 	add.w	r9, r9, #1
   2a5ee:	2d00      	cmp	r5, #0
   2a5f0:	f47f af52 	bne.w	2a498 <getTrngSource+0x70>
   2a5f4:	f5ba 7f04 	cmp.w	sl, #528	; 0x210
   2a5f8:	d85d      	bhi.n	2a6b6 <getTrngSource+0x28e>
   2a5fa:	9d03      	ldr	r5, [sp, #12]
   2a5fc:	6962      	ldr	r2, [r4, #20]
   2a5fe:	4651      	mov	r1, sl
   2a600:	4628      	mov	r0, r5
   2a602:	f7ff fe7b 	bl	2a2fc <LLF_RND_RepetitionCounterTest.part.0>
   2a606:	2800      	cmp	r0, #0
   2a608:	d04b      	beq.n	2a6a2 <getTrngSource+0x27a>
   2a60a:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2a60c:	2300      	movs	r3, #0
   2a60e:	6013      	str	r3, [r2, #0]
   2a610:	4b2d      	ldr	r3, [pc, #180]	; (2a6c8 <getTrngSource+0x2a0>)
   2a612:	4298      	cmp	r0, r3
   2a614:	f43f af58 	beq.w	2a4c8 <getTrngSource+0xa0>
   2a618:	9d04      	ldr	r5, [sp, #16]
   2a61a:	2d08      	cmp	r5, #8
   2a61c:	d034      	beq.n	2a688 <getTrngSource+0x260>
   2a61e:	2200      	movs	r2, #0
   2a620:	ab04      	add	r3, sp, #16
   2a622:	006d      	lsls	r5, r5, #1
   2a624:	9200      	str	r2, [sp, #0]
   2a626:	4621      	mov	r1, r4
   2a628:	4640      	mov	r0, r8
   2a62a:	9504      	str	r5, [sp, #16]
   2a62c:	f7ff fdb8 	bl	2a1a0 <startTrngHW>
   2a630:	4b2f      	ldr	r3, [pc, #188]	; (2a6f0 <getTrngSource+0x2c8>)
   2a632:	4298      	cmp	r0, r3
   2a634:	d024      	beq.n	2a680 <getTrngSource+0x258>
   2a636:	2800      	cmp	r0, #0
   2a638:	f47f af46 	bne.w	2a4c8 <getTrngSource+0xa0>
   2a63c:	f8d8 20d8 	ldr.w	r2, [r8, #216]	; 0xd8
   2a640:	0a13      	lsrs	r3, r2, #8
   2a642:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   2a646:	4313      	orrs	r3, r2
   2a648:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   2a64c:	f8c8 30d8 	str.w	r3, [r8, #216]	; 0xd8
   2a650:	9b02      	ldr	r3, [sp, #8]
   2a652:	3b01      	subs	r3, #1
   2a654:	9302      	str	r3, [sp, #8]
   2a656:	f47f af14 	bne.w	2a482 <getTrngSource+0x5a>
   2a65a:	2000      	movs	r0, #0
   2a65c:	e734      	b.n	2a4c8 <getTrngSource+0xa0>
   2a65e:	4630      	mov	r0, r6
   2a660:	465a      	mov	r2, fp
   2a662:	a906      	add	r1, sp, #24
   2a664:	f000 face 	bl	2ac04 <CC_PalMemCopyPlat>
   2a668:	eba5 050b 	sub.w	r5, r5, fp
   2a66c:	445e      	add	r6, fp
   2a66e:	e7bc      	b.n	2a5ea <getTrngSource+0x1c2>
   2a670:	481f      	ldr	r0, [pc, #124]	; (2a6f0 <getTrngSource+0x2c8>)
   2a672:	e725      	b.n	2a4c0 <getTrngSource+0x98>
   2a674:	481f      	ldr	r0, [pc, #124]	; (2a6f4 <getTrngSource+0x2cc>)
   2a676:	e723      	b.n	2a4c0 <getTrngSource+0x98>
   2a678:	2703      	movs	r7, #3
   2a67a:	e74b      	b.n	2a514 <getTrngSource+0xec>
   2a67c:	2702      	movs	r7, #2
   2a67e:	e749      	b.n	2a514 <getTrngSource+0xec>
   2a680:	6a23      	ldr	r3, [r4, #32]
   2a682:	2b00      	cmp	r3, #0
   2a684:	f43f af20 	beq.w	2a4c8 <getTrngSource+0xa0>
   2a688:	481b      	ldr	r0, [pc, #108]	; (2a6f8 <getTrngSource+0x2d0>)
   2a68a:	e71d      	b.n	2a4c8 <getTrngSource+0xa0>
   2a68c:	9500      	str	r5, [sp, #0]
   2a68e:	ab04      	add	r3, sp, #16
   2a690:	2201      	movs	r2, #1
   2a692:	4621      	mov	r1, r4
   2a694:	4638      	mov	r0, r7
   2a696:	f7ff fd83 	bl	2a1a0 <startTrngHW>
   2a69a:	2800      	cmp	r0, #0
   2a69c:	f43f aee2 	beq.w	2a464 <getTrngSource+0x3c>
   2a6a0:	e712      	b.n	2a4c8 <getTrngSource+0xa0>
   2a6a2:	69a2      	ldr	r2, [r4, #24]
   2a6a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
   2a6a8:	4651      	mov	r1, sl
   2a6aa:	4628      	mov	r0, r5
   2a6ac:	f7ff fe54 	bl	2a358 <LLF_RND_AdaptiveProportionTest>
   2a6b0:	2800      	cmp	r0, #0
   2a6b2:	d1aa      	bne.n	2a60a <getTrngSource+0x1e2>
   2a6b4:	e7d1      	b.n	2a65a <getTrngSource+0x232>
   2a6b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
   2a6b8:	601d      	str	r5, [r3, #0]
   2a6ba:	e7ad      	b.n	2a618 <getTrngSource+0x1f0>
   2a6bc:	5002b138 	.word	0x5002b138
   2a6c0:	5002b130 	.word	0x5002b130
   2a6c4:	aaaaaaab 	.word	0xaaaaaaab
   2a6c8:	00f10c02 	.word	0x00f10c02
   2a6cc:	00f10c30 	.word	0x00f10c30
   2a6d0:	5002b1c4 	.word	0x5002b1c4
   2a6d4:	5002b12c 	.word	0x5002b12c
   2a6d8:	5002b100 	.word	0x5002b100
   2a6dc:	5002b10c 	.word	0x5002b10c
   2a6e0:	5002ba04 	.word	0x5002ba04
   2a6e4:	5002b1d8 	.word	0x5002b1d8
   2a6e8:	5002b114 	.word	0x5002b114
   2a6ec:	5002b118 	.word	0x5002b118
   2a6f0:	00f10c31 	.word	0x00f10c31
   2a6f4:	00f10c35 	.word	0x00f10c35
   2a6f8:	00f10c32 	.word	0x00f10c32

0002a6fc <LLF_RND_GetTrngSource>:
   2a6fc:	b430      	push	{r4, r5}
   2a6fe:	e9dd 3402 	ldrd	r3, r4, [sp, #8]
   2a702:	9d04      	ldr	r5, [sp, #16]
   2a704:	9402      	str	r4, [sp, #8]
   2a706:	2400      	movs	r4, #0
   2a708:	e9cd 5403 	strd	r5, r4, [sp, #12]
   2a70c:	bc30      	pop	{r4, r5}
   2a70e:	f7ff be8b 	b.w	2a428 <getTrngSource>
   2a712:	bf00      	nop

0002a714 <LLF_RND_RunTrngStartupTest>:
   2a714:	b510      	push	{r4, lr}
   2a716:	b086      	sub	sp, #24
   2a718:	ab05      	add	r3, sp, #20
   2a71a:	2401      	movs	r4, #1
   2a71c:	e9cd 2401 	strd	r2, r4, [sp, #4]
   2a720:	9300      	str	r3, [sp, #0]
   2a722:	2200      	movs	r2, #0
   2a724:	ab04      	add	r3, sp, #16
   2a726:	f7ff fe7f 	bl	2a428 <getTrngSource>
   2a72a:	b006      	add	sp, #24
   2a72c:	bd10      	pop	{r4, pc}
   2a72e:	bf00      	nop

0002a730 <mbedtls_hardware_poll>:
   2a730:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a732:	b089      	sub	sp, #36	; 0x24
   2a734:	9205      	str	r2, [sp, #20]
   2a736:	2900      	cmp	r1, #0
   2a738:	d064      	beq.n	2a804 <mbedtls_hardware_poll+0xd4>
   2a73a:	461c      	mov	r4, r3
   2a73c:	2b00      	cmp	r3, #0
   2a73e:	d061      	beq.n	2a804 <mbedtls_hardware_poll+0xd4>
   2a740:	4615      	mov	r5, r2
   2a742:	2a00      	cmp	r2, #0
   2a744:	d05e      	beq.n	2a804 <mbedtls_hardware_poll+0xd4>
   2a746:	4f31      	ldr	r7, [pc, #196]	; (2a80c <mbedtls_hardware_poll+0xdc>)
   2a748:	460e      	mov	r6, r1
   2a74a:	6838      	ldr	r0, [r7, #0]
   2a74c:	f04f 31ff 	mov.w	r1, #4294967295
   2a750:	f7ff fca2 	bl	2a098 <CC_PalMutexLock>
   2a754:	2800      	cmp	r0, #0
   2a756:	d14b      	bne.n	2a7f0 <mbedtls_hardware_poll+0xc0>
   2a758:	2000      	movs	r0, #0
   2a75a:	f7ff fccd 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2a75e:	2800      	cmp	r0, #0
   2a760:	d142      	bne.n	2a7e8 <mbedtls_hardware_poll+0xb8>
   2a762:	482b      	ldr	r0, [pc, #172]	; (2a810 <mbedtls_hardware_poll+0xe0>)
   2a764:	f000 fa12 	bl	2ab8c <RNG_PLAT_SetUserRngParameters>
   2a768:	b1d8      	cbz	r0, 2a7a2 <mbedtls_hardware_poll+0x72>
   2a76a:	2001      	movs	r0, #1
   2a76c:	f04f 36ff 	mov.w	r6, #4294967295
   2a770:	f7ff fcc2 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2a774:	2800      	cmp	r0, #0
   2a776:	d133      	bne.n	2a7e0 <mbedtls_hardware_poll+0xb0>
   2a778:	4826      	ldr	r0, [pc, #152]	; (2a814 <mbedtls_hardware_poll+0xe4>)
   2a77a:	f44f 7108 	mov.w	r1, #544	; 0x220
   2a77e:	f7fe fe47 	bl	29410 <mbedtls_zeroize_internal>
   2a782:	4825      	ldr	r0, [pc, #148]	; (2a818 <mbedtls_hardware_poll+0xe8>)
   2a784:	21dc      	movs	r1, #220	; 0xdc
   2a786:	f7fe fe43 	bl	29410 <mbedtls_zeroize_internal>
   2a78a:	4821      	ldr	r0, [pc, #132]	; (2a810 <mbedtls_hardware_poll+0xe0>)
   2a78c:	2128      	movs	r1, #40	; 0x28
   2a78e:	f7fe fe3f 	bl	29410 <mbedtls_zeroize_internal>
   2a792:	6838      	ldr	r0, [r7, #0]
   2a794:	f7ff fc88 	bl	2a0a8 <CC_PalMutexUnlock>
   2a798:	2800      	cmp	r0, #0
   2a79a:	d12d      	bne.n	2a7f8 <mbedtls_hardware_poll+0xc8>
   2a79c:	4630      	mov	r0, r6
   2a79e:	b009      	add	sp, #36	; 0x24
   2a7a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a7a2:	491c      	ldr	r1, [pc, #112]	; (2a814 <mbedtls_hardware_poll+0xe4>)
   2a7a4:	9003      	str	r0, [sp, #12]
   2a7a6:	ab07      	add	r3, sp, #28
   2a7a8:	4602      	mov	r2, r0
   2a7aa:	9102      	str	r1, [sp, #8]
   2a7ac:	9300      	str	r3, [sp, #0]
   2a7ae:	4918      	ldr	r1, [pc, #96]	; (2a810 <mbedtls_hardware_poll+0xe0>)
   2a7b0:	4819      	ldr	r0, [pc, #100]	; (2a818 <mbedtls_hardware_poll+0xe8>)
   2a7b2:	9401      	str	r4, [sp, #4]
   2a7b4:	ab05      	add	r3, sp, #20
   2a7b6:	f7ff ffa1 	bl	2a6fc <LLF_RND_GetTrngSource>
   2a7ba:	4603      	mov	r3, r0
   2a7bc:	2800      	cmp	r0, #0
   2a7be:	d1d4      	bne.n	2a76a <mbedtls_hardware_poll+0x3a>
   2a7c0:	6822      	ldr	r2, [r4, #0]
   2a7c2:	42aa      	cmp	r2, r5
   2a7c4:	d3d1      	bcc.n	2a76a <mbedtls_hardware_poll+0x3a>
   2a7c6:	9907      	ldr	r1, [sp, #28]
   2a7c8:	4630      	mov	r0, r6
   2a7ca:	3108      	adds	r1, #8
   2a7cc:	462a      	mov	r2, r5
   2a7ce:	461e      	mov	r6, r3
   2a7d0:	f000 fa18 	bl	2ac04 <CC_PalMemCopyPlat>
   2a7d4:	6025      	str	r5, [r4, #0]
   2a7d6:	2001      	movs	r0, #1
   2a7d8:	f7ff fc8e 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2a7dc:	2800      	cmp	r0, #0
   2a7de:	d0cb      	beq.n	2a778 <mbedtls_hardware_poll+0x48>
   2a7e0:	480e      	ldr	r0, [pc, #56]	; (2a81c <mbedtls_hardware_poll+0xec>)
   2a7e2:	f7fe fd0d 	bl	29200 <CC_PalAbort>
   2a7e6:	e7c7      	b.n	2a778 <mbedtls_hardware_poll+0x48>
   2a7e8:	480d      	ldr	r0, [pc, #52]	; (2a820 <mbedtls_hardware_poll+0xf0>)
   2a7ea:	f7fe fd09 	bl	29200 <CC_PalAbort>
   2a7ee:	e7b8      	b.n	2a762 <mbedtls_hardware_poll+0x32>
   2a7f0:	480c      	ldr	r0, [pc, #48]	; (2a824 <mbedtls_hardware_poll+0xf4>)
   2a7f2:	f7fe fd05 	bl	29200 <CC_PalAbort>
   2a7f6:	e7af      	b.n	2a758 <mbedtls_hardware_poll+0x28>
   2a7f8:	480b      	ldr	r0, [pc, #44]	; (2a828 <mbedtls_hardware_poll+0xf8>)
   2a7fa:	f7fe fd01 	bl	29200 <CC_PalAbort>
   2a7fe:	4630      	mov	r0, r6
   2a800:	b009      	add	sp, #36	; 0x24
   2a802:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a804:	f04f 36ff 	mov.w	r6, #4294967295
   2a808:	e7c8      	b.n	2a79c <mbedtls_hardware_poll+0x6c>
   2a80a:	bf00      	nop
   2a80c:	200006cc 	.word	0x200006cc
   2a810:	200037e4 	.word	0x200037e4
   2a814:	200035c4 	.word	0x200035c4
   2a818:	200034e8 	.word	0x200034e8
   2a81c:	00031f94 	.word	0x00031f94
   2a820:	00031f74 	.word	0x00031f74
   2a824:	00031f5c 	.word	0x00031f5c
   2a828:	00031fec 	.word	0x00031fec

0002a82c <cc_mbedtls_aes_init>:
   2a82c:	b510      	push	{r4, lr}
   2a82e:	4604      	mov	r4, r0
   2a830:	b130      	cbz	r0, 2a840 <cc_mbedtls_aes_init+0x14>
   2a832:	2200      	movs	r2, #0
   2a834:	2301      	movs	r3, #1
   2a836:	e9c4 2215 	strd	r2, r2, [r4, #84]	; 0x54
   2a83a:	e9c4 3317 	strd	r3, r3, [r4, #92]	; 0x5c
   2a83e:	bd10      	pop	{r4, pc}
   2a840:	4801      	ldr	r0, [pc, #4]	; (2a848 <cc_mbedtls_aes_init+0x1c>)
   2a842:	f7fe fcdd 	bl	29200 <CC_PalAbort>
   2a846:	e7f4      	b.n	2a832 <cc_mbedtls_aes_init+0x6>
   2a848:	00032004 	.word	0x00032004

0002a84c <cc_mbedtls_aes_free>:
   2a84c:	b118      	cbz	r0, 2a856 <cc_mbedtls_aes_free+0xa>
   2a84e:	2274      	movs	r2, #116	; 0x74
   2a850:	2100      	movs	r1, #0
   2a852:	f000 b9d9 	b.w	2ac08 <CC_PalMemSetPlat>
   2a856:	4770      	bx	lr

0002a858 <cc_mbedtls_aes_setkey_enc>:
   2a858:	b190      	cbz	r0, 2a880 <cc_mbedtls_aes_setkey_enc+0x28>
   2a85a:	b1a1      	cbz	r1, 2a886 <cc_mbedtls_aes_setkey_enc+0x2e>
   2a85c:	b510      	push	{r4, lr}
   2a85e:	2a80      	cmp	r2, #128	; 0x80
   2a860:	f04f 0400 	mov.w	r4, #0
   2a864:	6384      	str	r4, [r0, #56]	; 0x38
   2a866:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
   2a86a:	d106      	bne.n	2a87a <cc_mbedtls_aes_setkey_enc+0x22>
   2a86c:	6304      	str	r4, [r0, #48]	; 0x30
   2a86e:	2210      	movs	r2, #16
   2a870:	3010      	adds	r0, #16
   2a872:	f000 f9c7 	bl	2ac04 <CC_PalMemCopyPlat>
   2a876:	4620      	mov	r0, r4
   2a878:	bd10      	pop	{r4, pc}
   2a87a:	f06f 001f 	mvn.w	r0, #31
   2a87e:	bd10      	pop	{r4, pc}
   2a880:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2a884:	4770      	bx	lr
   2a886:	f06f 001f 	mvn.w	r0, #31
   2a88a:	4770      	bx	lr

0002a88c <cc_mbedtls_aes_crypt_ecb>:
   2a88c:	b320      	cbz	r0, 2a8d8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2a88e:	b31a      	cbz	r2, 2a8d8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2a890:	b313      	cbz	r3, 2a8d8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2a892:	2901      	cmp	r1, #1
   2a894:	d820      	bhi.n	2a8d8 <cc_mbedtls_aes_crypt_ecb+0x4c>
   2a896:	b570      	push	{r4, r5, r6, lr}
   2a898:	4604      	mov	r4, r0
   2a89a:	6b81      	ldr	r1, [r0, #56]	; 0x38
   2a89c:	b086      	sub	sp, #24
   2a89e:	d016      	beq.n	2a8ce <cc_mbedtls_aes_crypt_ecb+0x42>
   2a8a0:	2901      	cmp	r1, #1
   2a8a2:	d116      	bne.n	2a8d2 <cc_mbedtls_aes_crypt_ecb+0x46>
   2a8a4:	2100      	movs	r1, #0
   2a8a6:	2510      	movs	r5, #16
   2a8a8:	ae04      	add	r6, sp, #16
   2a8aa:	6361      	str	r1, [r4, #52]	; 0x34
   2a8ac:	4610      	mov	r0, r2
   2a8ae:	e9cd 5600 	strd	r5, r6, [sp]
   2a8b2:	aa02      	add	r2, sp, #8
   2a8b4:	4629      	mov	r1, r5
   2a8b6:	f000 fa4d 	bl	2ad54 <SetDataBuffersInfo>
   2a8ba:	b950      	cbnz	r0, 2a8d2 <cc_mbedtls_aes_crypt_ecb+0x46>
   2a8bc:	462b      	mov	r3, r5
   2a8be:	4632      	mov	r2, r6
   2a8c0:	a902      	add	r1, sp, #8
   2a8c2:	4620      	mov	r0, r4
   2a8c4:	f000 fcda 	bl	2b27c <ProcessAesDrv>
   2a8c8:	b918      	cbnz	r0, 2a8d2 <cc_mbedtls_aes_crypt_ecb+0x46>
   2a8ca:	b006      	add	sp, #24
   2a8cc:	bd70      	pop	{r4, r5, r6, pc}
   2a8ce:	2900      	cmp	r1, #0
   2a8d0:	d0e8      	beq.n	2a8a4 <cc_mbedtls_aes_crypt_ecb+0x18>
   2a8d2:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2a8d6:	e7f8      	b.n	2a8ca <cc_mbedtls_aes_crypt_ecb+0x3e>
   2a8d8:	f06f 0021 	mvn.w	r0, #33	; 0x21
   2a8dc:	4770      	bx	lr
   2a8de:	bf00      	nop

0002a8e0 <cc_mbedtls_sha256_init>:
   2a8e0:	b510      	push	{r4, lr}
   2a8e2:	4604      	mov	r4, r0
   2a8e4:	b128      	cbz	r0, 2a8f2 <cc_mbedtls_sha256_init+0x12>
   2a8e6:	4620      	mov	r0, r4
   2a8e8:	21f0      	movs	r1, #240	; 0xf0
   2a8ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a8ee:	f000 b98d 	b.w	2ac0c <CC_PalMemSetZeroPlat>
   2a8f2:	4804      	ldr	r0, [pc, #16]	; (2a904 <cc_mbedtls_sha256_init+0x24>)
   2a8f4:	f7fe fc84 	bl	29200 <CC_PalAbort>
   2a8f8:	4620      	mov	r0, r4
   2a8fa:	21f0      	movs	r1, #240	; 0xf0
   2a8fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2a900:	f000 b984 	b.w	2ac0c <CC_PalMemSetZeroPlat>
   2a904:	00032018 	.word	0x00032018

0002a908 <cc_mbedtls_sha256_free>:
   2a908:	b110      	cbz	r0, 2a910 <cc_mbedtls_sha256_free+0x8>
   2a90a:	21f0      	movs	r1, #240	; 0xf0
   2a90c:	f7fe bd80 	b.w	29410 <mbedtls_zeroize_internal>
   2a910:	4770      	bx	lr
   2a912:	bf00      	nop

0002a914 <cc_mbedtls_sha256_starts>:
   2a914:	b508      	push	{r3, lr}
   2a916:	b161      	cbz	r1, 2a932 <cc_mbedtls_sha256_starts+0x1e>
   2a918:	2901      	cmp	r1, #1
   2a91a:	d107      	bne.n	2a92c <cc_mbedtls_sha256_starts+0x18>
   2a91c:	2102      	movs	r1, #2
   2a91e:	f000 f85b 	bl	2a9d8 <mbedtls_sha_starts_internal>
   2a922:	2800      	cmp	r0, #0
   2a924:	bf18      	it	ne
   2a926:	f06f 0036 	mvnne.w	r0, #54	; 0x36
   2a92a:	bd08      	pop	{r3, pc}
   2a92c:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2a930:	bd08      	pop	{r3, pc}
   2a932:	2101      	movs	r1, #1
   2a934:	f000 f850 	bl	2a9d8 <mbedtls_sha_starts_internal>
   2a938:	e7f3      	b.n	2a922 <cc_mbedtls_sha256_starts+0xe>
   2a93a:	bf00      	nop

0002a93c <cc_mbedtls_sha256_update>:
   2a93c:	b570      	push	{r4, r5, r6, lr}
   2a93e:	188e      	adds	r6, r1, r2
   2a940:	f5b6 1f80 	cmp.w	r6, #1048576	; 0x100000
   2a944:	b0a0      	sub	sp, #128	; 0x80
   2a946:	460b      	mov	r3, r1
   2a948:	4614      	mov	r4, r2
   2a94a:	4605      	mov	r5, r0
   2a94c:	d801      	bhi.n	2a952 <cc_mbedtls_sha256_update+0x16>
   2a94e:	2a80      	cmp	r2, #128	; 0x80
   2a950:	d90c      	bls.n	2a96c <cc_mbedtls_sha256_update+0x30>
   2a952:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2a956:	d917      	bls.n	2a988 <cc_mbedtls_sha256_update+0x4c>
   2a958:	4622      	mov	r2, r4
   2a95a:	4619      	mov	r1, r3
   2a95c:	4628      	mov	r0, r5
   2a95e:	f000 f87d 	bl	2aa5c <mbedtls_sha_update_internal>
   2a962:	4604      	mov	r4, r0
   2a964:	b984      	cbnz	r4, 2a988 <cc_mbedtls_sha256_update+0x4c>
   2a966:	4620      	mov	r0, r4
   2a968:	b020      	add	sp, #128	; 0x80
   2a96a:	bd70      	pop	{r4, r5, r6, pc}
   2a96c:	4668      	mov	r0, sp
   2a96e:	f000 f949 	bl	2ac04 <CC_PalMemCopyPlat>
   2a972:	4622      	mov	r2, r4
   2a974:	4669      	mov	r1, sp
   2a976:	4628      	mov	r0, r5
   2a978:	f000 f870 	bl	2aa5c <mbedtls_sha_update_internal>
   2a97c:	2180      	movs	r1, #128	; 0x80
   2a97e:	4604      	mov	r4, r0
   2a980:	4668      	mov	r0, sp
   2a982:	f000 f943 	bl	2ac0c <CC_PalMemSetZeroPlat>
   2a986:	e7ed      	b.n	2a964 <cc_mbedtls_sha256_update+0x28>
   2a988:	f06f 0436 	mvn.w	r4, #54	; 0x36
   2a98c:	e7eb      	b.n	2a966 <cc_mbedtls_sha256_update+0x2a>
   2a98e:	bf00      	nop

0002a990 <cc_mbedtls_sha256_finish>:
   2a990:	b570      	push	{r4, r5, r6, lr}
   2a992:	b1e8      	cbz	r0, 2a9d0 <cc_mbedtls_sha256_finish+0x40>
   2a994:	460e      	mov	r6, r1
   2a996:	b1d9      	cbz	r1, 2a9d0 <cc_mbedtls_sha256_finish+0x40>
   2a998:	4604      	mov	r4, r0
   2a99a:	f000 f831 	bl	2aa00 <mbedtls_sha_finish_internal>
   2a99e:	4605      	mov	r5, r0
   2a9a0:	b9b0      	cbnz	r0, 2a9d0 <cc_mbedtls_sha256_finish+0x40>
   2a9a2:	6823      	ldr	r3, [r4, #0]
   2a9a4:	2b01      	cmp	r3, #1
   2a9a6:	d00b      	beq.n	2a9c0 <cc_mbedtls_sha256_finish+0x30>
   2a9a8:	2b02      	cmp	r3, #2
   2a9aa:	d001      	beq.n	2a9b0 <cc_mbedtls_sha256_finish+0x20>
   2a9ac:	4628      	mov	r0, r5
   2a9ae:	bd70      	pop	{r4, r5, r6, pc}
   2a9b0:	f104 0108 	add.w	r1, r4, #8
   2a9b4:	4630      	mov	r0, r6
   2a9b6:	221c      	movs	r2, #28
   2a9b8:	f000 f924 	bl	2ac04 <CC_PalMemCopyPlat>
   2a9bc:	4628      	mov	r0, r5
   2a9be:	bd70      	pop	{r4, r5, r6, pc}
   2a9c0:	f104 0108 	add.w	r1, r4, #8
   2a9c4:	4630      	mov	r0, r6
   2a9c6:	2220      	movs	r2, #32
   2a9c8:	f000 f91c 	bl	2ac04 <CC_PalMemCopyPlat>
   2a9cc:	4628      	mov	r0, r5
   2a9ce:	bd70      	pop	{r4, r5, r6, pc}
   2a9d0:	f06f 0536 	mvn.w	r5, #54	; 0x36
   2a9d4:	e7ea      	b.n	2a9ac <cc_mbedtls_sha256_finish+0x1c>
   2a9d6:	bf00      	nop

0002a9d8 <mbedtls_sha_starts_internal>:
   2a9d8:	b178      	cbz	r0, 2a9fa <mbedtls_sha_starts_internal+0x22>
   2a9da:	b538      	push	{r3, r4, r5, lr}
   2a9dc:	4604      	mov	r4, r0
   2a9de:	460d      	mov	r5, r1
   2a9e0:	21f0      	movs	r1, #240	; 0xf0
   2a9e2:	f000 f913 	bl	2ac0c <CC_PalMemSetZeroPlat>
   2a9e6:	2340      	movs	r3, #64	; 0x40
   2a9e8:	6025      	str	r5, [r4, #0]
   2a9ea:	65e3      	str	r3, [r4, #92]	; 0x5c
   2a9ec:	4620      	mov	r0, r4
   2a9ee:	f000 f9e5 	bl	2adbc <InitHashDrv>
   2a9f2:	3800      	subs	r0, #0
   2a9f4:	bf18      	it	ne
   2a9f6:	2001      	movne	r0, #1
   2a9f8:	bd38      	pop	{r3, r4, r5, pc}
   2a9fa:	2001      	movs	r0, #1
   2a9fc:	4770      	bx	lr
   2a9fe:	bf00      	nop

0002aa00 <mbedtls_sha_finish_internal>:
   2aa00:	b570      	push	{r4, r5, r6, lr}
   2aa02:	6e05      	ldr	r5, [r0, #96]	; 0x60
   2aa04:	b0a4      	sub	sp, #144	; 0x90
   2aa06:	4604      	mov	r4, r0
   2aa08:	ae04      	add	r6, sp, #16
   2aa0a:	b9e5      	cbnz	r5, 2aa46 <mbedtls_sha_finish_internal+0x46>
   2aa0c:	2201      	movs	r2, #1
   2aa0e:	2300      	movs	r3, #0
   2aa10:	6062      	str	r2, [r4, #4]
   2aa12:	4630      	mov	r0, r6
   2aa14:	e9cd 3300 	strd	r3, r3, [sp]
   2aa18:	aa02      	add	r2, sp, #8
   2aa1a:	4629      	mov	r1, r5
   2aa1c:	f000 f99a 	bl	2ad54 <SetDataBuffersInfo>
   2aa20:	b110      	cbz	r0, 2aa28 <mbedtls_sha_finish_internal+0x28>
   2aa22:	2001      	movs	r0, #1
   2aa24:	b024      	add	sp, #144	; 0x90
   2aa26:	bd70      	pop	{r4, r5, r6, pc}
   2aa28:	462a      	mov	r2, r5
   2aa2a:	a902      	add	r1, sp, #8
   2aa2c:	4620      	mov	r0, r4
   2aa2e:	f000 f9ef 	bl	2ae10 <ProcessHashDrv>
   2aa32:	2800      	cmp	r0, #0
   2aa34:	d1f5      	bne.n	2aa22 <mbedtls_sha_finish_internal+0x22>
   2aa36:	4620      	mov	r0, r4
   2aa38:	f000 fb18 	bl	2b06c <FinishHashDrv>
   2aa3c:	2800      	cmp	r0, #0
   2aa3e:	d1f0      	bne.n	2aa22 <mbedtls_sha_finish_internal+0x22>
   2aa40:	6620      	str	r0, [r4, #96]	; 0x60
   2aa42:	b024      	add	sp, #144	; 0x90
   2aa44:	bd70      	pop	{r4, r5, r6, pc}
   2aa46:	2d80      	cmp	r5, #128	; 0x80
   2aa48:	462a      	mov	r2, r5
   2aa4a:	4630      	mov	r0, r6
   2aa4c:	bf28      	it	cs
   2aa4e:	2280      	movcs	r2, #128	; 0x80
   2aa50:	f104 0164 	add.w	r1, r4, #100	; 0x64
   2aa54:	f000 f8d6 	bl	2ac04 <CC_PalMemCopyPlat>
   2aa58:	6e25      	ldr	r5, [r4, #96]	; 0x60
   2aa5a:	e7d7      	b.n	2aa0c <mbedtls_sha_finish_internal+0xc>

0002aa5c <mbedtls_sha_update_internal>:
   2aa5c:	2800      	cmp	r0, #0
   2aa5e:	d054      	beq.n	2ab0a <mbedtls_sha_update_internal+0xae>
   2aa60:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aa62:	4614      	mov	r4, r2
   2aa64:	b0a5      	sub	sp, #148	; 0x94
   2aa66:	b1b2      	cbz	r2, 2aa96 <mbedtls_sha_update_internal+0x3a>
   2aa68:	460e      	mov	r6, r1
   2aa6a:	b351      	cbz	r1, 2aac2 <mbedtls_sha_update_internal+0x66>
   2aa6c:	4605      	mov	r5, r0
   2aa6e:	e9d0 3017 	ldrd	r3, r0, [r0, #92]	; 0x5c
   2aa72:	1a1a      	subs	r2, r3, r0
   2aa74:	fbb2 f7f3 	udiv	r7, r2, r3
   2aa78:	fb03 2717 	mls	r7, r3, r7, r2
   2aa7c:	42a7      	cmp	r7, r4
   2aa7e:	bf28      	it	cs
   2aa80:	4627      	movcs	r7, r4
   2aa82:	2f00      	cmp	r7, #0
   2aa84:	d143      	bne.n	2ab0e <mbedtls_sha_update_internal+0xb2>
   2aa86:	4283      	cmp	r3, r0
   2aa88:	d008      	beq.n	2aa9c <mbedtls_sha_update_internal+0x40>
   2aa8a:	fbb4 f7f3 	udiv	r7, r4, r3
   2aa8e:	fb03 f707 	mul.w	r7, r3, r7
   2aa92:	b9cf      	cbnz	r7, 2aac8 <mbedtls_sha_update_internal+0x6c>
   2aa94:	bb6c      	cbnz	r4, 2aaf2 <mbedtls_sha_update_internal+0x96>
   2aa96:	2000      	movs	r0, #0
   2aa98:	b025      	add	sp, #148	; 0x94
   2aa9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aa9c:	2b80      	cmp	r3, #128	; 0x80
   2aa9e:	bf28      	it	cs
   2aaa0:	2380      	movcs	r3, #128	; 0x80
   2aaa2:	461a      	mov	r2, r3
   2aaa4:	f105 0164 	add.w	r1, r5, #100	; 0x64
   2aaa8:	a804      	add	r0, sp, #16
   2aaaa:	f000 f8ab 	bl	2ac04 <CC_PalMemCopyPlat>
   2aaae:	2300      	movs	r3, #0
   2aab0:	e9cd 3300 	strd	r3, r3, [sp]
   2aab4:	a804      	add	r0, sp, #16
   2aab6:	6de9      	ldr	r1, [r5, #92]	; 0x5c
   2aab8:	aa02      	add	r2, sp, #8
   2aaba:	f000 f94b 	bl	2ad54 <SetDataBuffersInfo>
   2aabe:	2800      	cmp	r0, #0
   2aac0:	d032      	beq.n	2ab28 <mbedtls_sha_update_internal+0xcc>
   2aac2:	2001      	movs	r0, #1
   2aac4:	b025      	add	sp, #148	; 0x94
   2aac6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2aac8:	2300      	movs	r3, #0
   2aaca:	e9cd 3300 	strd	r3, r3, [sp]
   2aace:	aa02      	add	r2, sp, #8
   2aad0:	4639      	mov	r1, r7
   2aad2:	4630      	mov	r0, r6
   2aad4:	f000 f93e 	bl	2ad54 <SetDataBuffersInfo>
   2aad8:	2800      	cmp	r0, #0
   2aada:	d1f2      	bne.n	2aac2 <mbedtls_sha_update_internal+0x66>
   2aadc:	a902      	add	r1, sp, #8
   2aade:	463a      	mov	r2, r7
   2aae0:	4628      	mov	r0, r5
   2aae2:	f000 f995 	bl	2ae10 <ProcessHashDrv>
   2aae6:	2800      	cmp	r0, #0
   2aae8:	d1eb      	bne.n	2aac2 <mbedtls_sha_update_internal+0x66>
   2aaea:	1be4      	subs	r4, r4, r7
   2aaec:	443e      	add	r6, r7
   2aaee:	2c00      	cmp	r4, #0
   2aaf0:	d0d1      	beq.n	2aa96 <mbedtls_sha_update_internal+0x3a>
   2aaf2:	6e28      	ldr	r0, [r5, #96]	; 0x60
   2aaf4:	3019      	adds	r0, #25
   2aaf6:	4622      	mov	r2, r4
   2aaf8:	4631      	mov	r1, r6
   2aafa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
   2aafe:	f000 f881 	bl	2ac04 <CC_PalMemCopyPlat>
   2ab02:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   2ab04:	4422      	add	r2, r4
   2ab06:	662a      	str	r2, [r5, #96]	; 0x60
   2ab08:	e7c5      	b.n	2aa96 <mbedtls_sha_update_internal+0x3a>
   2ab0a:	2001      	movs	r0, #1
   2ab0c:	4770      	bx	lr
   2ab0e:	f105 0364 	add.w	r3, r5, #100	; 0x64
   2ab12:	4418      	add	r0, r3
   2ab14:	463a      	mov	r2, r7
   2ab16:	f000 f875 	bl	2ac04 <CC_PalMemCopyPlat>
   2ab1a:	e9d5 3017 	ldrd	r3, r0, [r5, #92]	; 0x5c
   2ab1e:	4438      	add	r0, r7
   2ab20:	443e      	add	r6, r7
   2ab22:	1be4      	subs	r4, r4, r7
   2ab24:	6628      	str	r0, [r5, #96]	; 0x60
   2ab26:	e7ae      	b.n	2aa86 <mbedtls_sha_update_internal+0x2a>
   2ab28:	6dea      	ldr	r2, [r5, #92]	; 0x5c
   2ab2a:	a902      	add	r1, sp, #8
   2ab2c:	4628      	mov	r0, r5
   2ab2e:	f000 f96f 	bl	2ae10 <ProcessHashDrv>
   2ab32:	2800      	cmp	r0, #0
   2ab34:	d1c5      	bne.n	2aac2 <mbedtls_sha_update_internal+0x66>
   2ab36:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   2ab38:	6628      	str	r0, [r5, #96]	; 0x60
   2ab3a:	e7a6      	b.n	2aa8a <mbedtls_sha_update_internal+0x2e>

0002ab3c <cc_mbedtls_sha256>:
   2ab3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ab3e:	461c      	mov	r4, r3
   2ab40:	4605      	mov	r5, r0
   2ab42:	4811      	ldr	r0, [pc, #68]	; (2ab88 <cc_mbedtls_sha256+0x4c>)
   2ab44:	460e      	mov	r6, r1
   2ab46:	4617      	mov	r7, r2
   2ab48:	f7ff feca 	bl	2a8e0 <cc_mbedtls_sha256_init>
   2ab4c:	4621      	mov	r1, r4
   2ab4e:	480e      	ldr	r0, [pc, #56]	; (2ab88 <cc_mbedtls_sha256+0x4c>)
   2ab50:	f7ff fee0 	bl	2a914 <cc_mbedtls_sha256_starts>
   2ab54:	4604      	mov	r4, r0
   2ab56:	b120      	cbz	r0, 2ab62 <cc_mbedtls_sha256+0x26>
   2ab58:	480b      	ldr	r0, [pc, #44]	; (2ab88 <cc_mbedtls_sha256+0x4c>)
   2ab5a:	f7ff fed5 	bl	2a908 <cc_mbedtls_sha256_free>
   2ab5e:	4620      	mov	r0, r4
   2ab60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ab62:	4809      	ldr	r0, [pc, #36]	; (2ab88 <cc_mbedtls_sha256+0x4c>)
   2ab64:	4632      	mov	r2, r6
   2ab66:	4629      	mov	r1, r5
   2ab68:	f7ff fee8 	bl	2a93c <cc_mbedtls_sha256_update>
   2ab6c:	4604      	mov	r4, r0
   2ab6e:	2800      	cmp	r0, #0
   2ab70:	d1f2      	bne.n	2ab58 <cc_mbedtls_sha256+0x1c>
   2ab72:	4639      	mov	r1, r7
   2ab74:	4804      	ldr	r0, [pc, #16]	; (2ab88 <cc_mbedtls_sha256+0x4c>)
   2ab76:	f7ff ff0b 	bl	2a990 <cc_mbedtls_sha256_finish>
   2ab7a:	4604      	mov	r4, r0
   2ab7c:	4802      	ldr	r0, [pc, #8]	; (2ab88 <cc_mbedtls_sha256+0x4c>)
   2ab7e:	f7ff fec3 	bl	2a908 <cc_mbedtls_sha256_free>
   2ab82:	4620      	mov	r0, r4
   2ab84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2ab86:	bf00      	nop
   2ab88:	2000380c 	.word	0x2000380c

0002ab8c <RNG_PLAT_SetUserRngParameters>:
   2ab8c:	b530      	push	{r4, r5, lr}
   2ab8e:	b083      	sub	sp, #12
   2ab90:	231c      	movs	r3, #28
   2ab92:	a901      	add	r1, sp, #4
   2ab94:	4604      	mov	r4, r0
   2ab96:	9301      	str	r3, [sp, #4]
   2ab98:	f000 f83c 	bl	2ac14 <CC_PalTrngParamGet>
   2ab9c:	4605      	mov	r5, r0
   2ab9e:	b938      	cbnz	r0, 2abb0 <RNG_PLAT_SetUserRngParameters+0x24>
   2aba0:	9b01      	ldr	r3, [sp, #4]
   2aba2:	2b1c      	cmp	r3, #28
   2aba4:	d007      	beq.n	2abb6 <RNG_PLAT_SetUserRngParameters+0x2a>
   2aba6:	4d15      	ldr	r5, [pc, #84]	; (2abfc <RNG_PLAT_SetUserRngParameters+0x70>)
   2aba8:	4620      	mov	r0, r4
   2abaa:	211c      	movs	r1, #28
   2abac:	f000 f82e 	bl	2ac0c <CC_PalMemSetZeroPlat>
   2abb0:	4628      	mov	r0, r5
   2abb2:	b003      	add	sp, #12
   2abb4:	bd30      	pop	{r4, r5, pc}
   2abb6:	e9d4 3200 	ldrd	r3, r2, [r4]
   2abba:	2101      	movs	r1, #1
   2abbc:	3b00      	subs	r3, #0
   2abbe:	bf18      	it	ne
   2abc0:	2301      	movne	r3, #1
   2abc2:	61e1      	str	r1, [r4, #28]
   2abc4:	b10a      	cbz	r2, 2abca <RNG_PLAT_SetUserRngParameters+0x3e>
   2abc6:	f043 0302 	orr.w	r3, r3, #2
   2abca:	68a2      	ldr	r2, [r4, #8]
   2abcc:	b932      	cbnz	r2, 2abdc <RNG_PLAT_SetUserRngParameters+0x50>
   2abce:	68e2      	ldr	r2, [r4, #12]
   2abd0:	b942      	cbnz	r2, 2abe4 <RNG_PLAT_SetUserRngParameters+0x58>
   2abd2:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2abd6:	b97b      	cbnz	r3, 2abf8 <RNG_PLAT_SetUserRngParameters+0x6c>
   2abd8:	4d09      	ldr	r5, [pc, #36]	; (2ac00 <RNG_PLAT_SetUserRngParameters+0x74>)
   2abda:	e7e5      	b.n	2aba8 <RNG_PLAT_SetUserRngParameters+0x1c>
   2abdc:	68e2      	ldr	r2, [r4, #12]
   2abde:	f043 0304 	orr.w	r3, r3, #4
   2abe2:	b13a      	cbz	r2, 2abf4 <RNG_PLAT_SetUserRngParameters+0x68>
   2abe4:	f043 0308 	orr.w	r3, r3, #8
   2abe8:	2200      	movs	r2, #0
   2abea:	4628      	mov	r0, r5
   2abec:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2abf0:	b003      	add	sp, #12
   2abf2:	bd30      	pop	{r4, r5, pc}
   2abf4:	e9c4 3208 	strd	r3, r2, [r4, #32]
   2abf8:	4615      	mov	r5, r2
   2abfa:	e7d9      	b.n	2abb0 <RNG_PLAT_SetUserRngParameters+0x24>
   2abfc:	00f00c37 	.word	0x00f00c37
   2ac00:	00f00c0e 	.word	0x00f00c0e

0002ac04 <CC_PalMemCopyPlat>:
   2ac04:	f005 bcf7 	b.w	305f6 <memmove>

0002ac08 <CC_PalMemSetPlat>:
   2ac08:	f005 bd0f 	b.w	3062a <memset>

0002ac0c <CC_PalMemSetZeroPlat>:
   2ac0c:	460a      	mov	r2, r1
   2ac0e:	2100      	movs	r1, #0
   2ac10:	f005 bd0b 	b.w	3062a <memset>

0002ac14 <CC_PalTrngParamGet>:
   2ac14:	b118      	cbz	r0, 2ac1e <CC_PalTrngParamGet+0xa>
   2ac16:	b111      	cbz	r1, 2ac1e <CC_PalTrngParamGet+0xa>
   2ac18:	680b      	ldr	r3, [r1, #0]
   2ac1a:	2b1c      	cmp	r3, #28
   2ac1c:	d001      	beq.n	2ac22 <CC_PalTrngParamGet+0xe>
   2ac1e:	2001      	movs	r0, #1
   2ac20:	4770      	bx	lr
   2ac22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ac26:	f8d3 2c10 	ldr.w	r2, [r3, #3088]	; 0xc10
   2ac2a:	3201      	adds	r2, #1
   2ac2c:	bf14      	ite	ne
   2ac2e:	f8d3 2c10 	ldrne.w	r2, [r3, #3088]	; 0xc10
   2ac32:	f241 225c 	movweq	r2, #4700	; 0x125c
   2ac36:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ac3a:	6002      	str	r2, [r0, #0]
   2ac3c:	f8d3 2c14 	ldr.w	r2, [r3, #3092]	; 0xc14
   2ac40:	3201      	adds	r2, #1
   2ac42:	bf14      	ite	ne
   2ac44:	f8d3 2c14 	ldrne.w	r2, [r3, #3092]	; 0xc14
   2ac48:	f641 1264 	movweq	r2, #6500	; 0x1964
   2ac4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ac50:	6042      	str	r2, [r0, #4]
   2ac52:	f8d3 2c18 	ldr.w	r2, [r3, #3096]	; 0xc18
   2ac56:	3201      	adds	r2, #1
   2ac58:	bf14      	ite	ne
   2ac5a:	f8d3 2c18 	ldrne.w	r2, [r3, #3096]	; 0xc18
   2ac5e:	f640 62d8 	movweq	r2, #3800	; 0xed8
   2ac62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ac66:	6082      	str	r2, [r0, #8]
   2ac68:	f8d3 2c1c 	ldr.w	r2, [r3, #3100]	; 0xc1c
   2ac6c:	3201      	adds	r2, #1
   2ac6e:	bf14      	ite	ne
   2ac70:	f8d3 2c1c 	ldrne.w	r2, [r3, #3100]	; 0xc1c
   2ac74:	f241 3288 	movweq	r2, #5000	; 0x1388
   2ac78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ac7c:	60c2      	str	r2, [r0, #12]
   2ac7e:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
   2ac82:	3201      	adds	r2, #1
   2ac84:	bf14      	ite	ne
   2ac86:	f8d3 2c00 	ldrne.w	r2, [r3, #3072]	; 0xc00
   2ac8a:	2290      	moveq	r2, #144	; 0x90
   2ac8c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2ac90:	6102      	str	r2, [r0, #16]
   2ac92:	f8d3 2c04 	ldr.w	r2, [r3, #3076]	; 0xc04
   2ac96:	3201      	adds	r2, #1
   2ac98:	bf14      	ite	ne
   2ac9a:	f8d3 2c04 	ldrne.w	r2, [r3, #3076]	; 0xc04
   2ac9e:	2251      	moveq	r2, #81	; 0x51
   2aca0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   2aca4:	6142      	str	r2, [r0, #20]
   2aca6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
   2acaa:	3201      	adds	r2, #1
   2acac:	bf14      	ite	ne
   2acae:	f8d3 3c08 	ldrne.w	r3, [r3, #3080]	; 0xc08
   2acb2:	f240 3337 	movweq	r3, #823	; 0x337
   2acb6:	6183      	str	r3, [r0, #24]
   2acb8:	2000      	movs	r0, #0
   2acba:	4770      	bx	lr

0002acbc <LLF_RND_WaitRngInterrupt>:
   2acbc:	b508      	push	{r3, lr}
   2acbe:	4601      	mov	r1, r0
   2acc0:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2acc4:	f7ff f95a 	bl	29f7c <CC_HalWaitInterruptRND>
   2acc8:	4902      	ldr	r1, [pc, #8]	; (2acd4 <LLF_RND_WaitRngInterrupt+0x18>)
   2acca:	4a03      	ldr	r2, [pc, #12]	; (2acd8 <LLF_RND_WaitRngInterrupt+0x1c>)
   2accc:	2300      	movs	r3, #0
   2acce:	600b      	str	r3, [r1, #0]
   2acd0:	6013      	str	r3, [r2, #0]
   2acd2:	bd08      	pop	{r3, pc}
   2acd4:	5002b1c8 	.word	0x5002b1c8
   2acd8:	5002b12c 	.word	0x5002b12c

0002acdc <LLF_RND_GetRoscSampleCnt>:
   2acdc:	3801      	subs	r0, #1
   2acde:	2807      	cmp	r0, #7
   2ace0:	d805      	bhi.n	2acee <LLF_RND_GetRoscSampleCnt+0x12>
   2ace2:	e8df f000 	tbb	[pc, r0]
   2ace6:	0e0a      	.short	0x0e0a
   2ace8:	04041204 	.word	0x04041204
   2acec:	0604      	.short	0x0604
   2acee:	4809      	ldr	r0, [pc, #36]	; (2ad14 <LLF_RND_GetRoscSampleCnt+0x38>)
   2acf0:	4770      	bx	lr
   2acf2:	68cb      	ldr	r3, [r1, #12]
   2acf4:	624b      	str	r3, [r1, #36]	; 0x24
   2acf6:	2000      	movs	r0, #0
   2acf8:	4770      	bx	lr
   2acfa:	680b      	ldr	r3, [r1, #0]
   2acfc:	624b      	str	r3, [r1, #36]	; 0x24
   2acfe:	2000      	movs	r0, #0
   2ad00:	4770      	bx	lr
   2ad02:	684b      	ldr	r3, [r1, #4]
   2ad04:	624b      	str	r3, [r1, #36]	; 0x24
   2ad06:	2000      	movs	r0, #0
   2ad08:	4770      	bx	lr
   2ad0a:	688b      	ldr	r3, [r1, #8]
   2ad0c:	624b      	str	r3, [r1, #36]	; 0x24
   2ad0e:	2000      	movs	r0, #0
   2ad10:	4770      	bx	lr
   2ad12:	bf00      	nop
   2ad14:	00f10c31 	.word	0x00f10c31

0002ad18 <LLF_RND_GetFastestRosc>:
   2ad18:	680b      	ldr	r3, [r1, #0]
   2ad1a:	e002      	b.n	2ad22 <LLF_RND_GetFastestRosc+0xa>
   2ad1c:	2b08      	cmp	r3, #8
   2ad1e:	600b      	str	r3, [r1, #0]
   2ad20:	d806      	bhi.n	2ad30 <LLF_RND_GetFastestRosc+0x18>
   2ad22:	6a02      	ldr	r2, [r0, #32]
   2ad24:	4213      	tst	r3, r2
   2ad26:	ea4f 0343 	mov.w	r3, r3, lsl #1
   2ad2a:	d0f7      	beq.n	2ad1c <LLF_RND_GetFastestRosc+0x4>
   2ad2c:	2000      	movs	r0, #0
   2ad2e:	4770      	bx	lr
   2ad30:	4800      	ldr	r0, [pc, #0]	; (2ad34 <LLF_RND_GetFastestRosc+0x1c>)
   2ad32:	4770      	bx	lr
   2ad34:	00f10c31 	.word	0x00f10c31

0002ad38 <LLF_RND_TurnOffTrng>:
   2ad38:	4904      	ldr	r1, [pc, #16]	; (2ad4c <LLF_RND_TurnOffTrng+0x14>)
   2ad3a:	4a05      	ldr	r2, [pc, #20]	; (2ad50 <LLF_RND_TurnOffTrng+0x18>)
   2ad3c:	2300      	movs	r3, #0
   2ad3e:	600b      	str	r3, [r1, #0]
   2ad40:	f44f 6080 	mov.w	r0, #1024	; 0x400
   2ad44:	6013      	str	r3, [r2, #0]
   2ad46:	f7ff b8ff 	b.w	29f48 <CC_HalClearInterruptBit>
   2ad4a:	bf00      	nop
   2ad4c:	5002b12c 	.word	0x5002b12c
   2ad50:	5002b1c4 	.word	0x5002b1c4

0002ad54 <SetDataBuffersInfo>:
   2ad54:	b5f0      	push	{r4, r5, r6, r7, lr}
   2ad56:	b083      	sub	sp, #12
   2ad58:	2400      	movs	r4, #0
   2ad5a:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
   2ad5e:	f88d 4007 	strb.w	r4, [sp, #7]
   2ad62:	d325      	bcc.n	2adb0 <SetDataBuffersInfo+0x5c>
   2ad64:	460c      	mov	r4, r1
   2ad66:	4404      	add	r4, r0
   2ad68:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
   2ad6c:	4605      	mov	r5, r0
   2ad6e:	d81f      	bhi.n	2adb0 <SetDataBuffersInfo+0x5c>
   2ad70:	4617      	mov	r7, r2
   2ad72:	461e      	mov	r6, r3
   2ad74:	2201      	movs	r2, #1
   2ad76:	f10d 0307 	add.w	r3, sp, #7
   2ad7a:	f000 fe7f 	bl	2ba7c <CC_PalDataBufferAttrGet>
   2ad7e:	4604      	mov	r4, r0
   2ad80:	b9b0      	cbnz	r0, 2adb0 <SetDataBuffersInfo+0x5c>
   2ad82:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2ad84:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2ad88:	603d      	str	r5, [r7, #0]
   2ad8a:	713b      	strb	r3, [r7, #4]
   2ad8c:	b192      	cbz	r2, 2adb4 <SetDataBuffersInfo+0x60>
   2ad8e:	b14e      	cbz	r6, 2ada4 <SetDataBuffersInfo+0x50>
   2ad90:	4602      	mov	r2, r0
   2ad92:	9908      	ldr	r1, [sp, #32]
   2ad94:	f10d 0307 	add.w	r3, sp, #7
   2ad98:	4630      	mov	r0, r6
   2ad9a:	f000 fe6f 	bl	2ba7c <CC_PalDataBufferAttrGet>
   2ad9e:	b938      	cbnz	r0, 2adb0 <SetDataBuffersInfo+0x5c>
   2ada0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2ada4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2ada6:	4620      	mov	r0, r4
   2ada8:	6016      	str	r6, [r2, #0]
   2adaa:	7113      	strb	r3, [r2, #4]
   2adac:	b003      	add	sp, #12
   2adae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2adb0:	f44f 0475 	mov.w	r4, #16056320	; 0xf50000
   2adb4:	4620      	mov	r0, r4
   2adb6:	b003      	add	sp, #12
   2adb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2adba:	bf00      	nop

0002adbc <InitHashDrv>:
   2adbc:	b1e8      	cbz	r0, 2adfa <InitHashDrv+0x3e>
   2adbe:	b510      	push	{r4, lr}
   2adc0:	6804      	ldr	r4, [r0, #0]
   2adc2:	2c01      	cmp	r4, #1
   2adc4:	d004      	beq.n	2add0 <InitHashDrv+0x14>
   2adc6:	2c02      	cmp	r4, #2
   2adc8:	d010      	beq.n	2adec <InitHashDrv+0x30>
   2adca:	b144      	cbz	r4, 2adde <InitHashDrv+0x22>
   2adcc:	480c      	ldr	r0, [pc, #48]	; (2ae00 <InitHashDrv+0x44>)
   2adce:	bd10      	pop	{r4, pc}
   2add0:	490c      	ldr	r1, [pc, #48]	; (2ae04 <InitHashDrv+0x48>)
   2add2:	2220      	movs	r2, #32
   2add4:	3008      	adds	r0, #8
   2add6:	f7ff ff15 	bl	2ac04 <CC_PalMemCopyPlat>
   2adda:	2000      	movs	r0, #0
   2addc:	bd10      	pop	{r4, pc}
   2adde:	490a      	ldr	r1, [pc, #40]	; (2ae08 <InitHashDrv+0x4c>)
   2ade0:	2214      	movs	r2, #20
   2ade2:	3008      	adds	r0, #8
   2ade4:	f7ff ff0e 	bl	2ac04 <CC_PalMemCopyPlat>
   2ade8:	4620      	mov	r0, r4
   2adea:	bd10      	pop	{r4, pc}
   2adec:	4907      	ldr	r1, [pc, #28]	; (2ae0c <InitHashDrv+0x50>)
   2adee:	2220      	movs	r2, #32
   2adf0:	3008      	adds	r0, #8
   2adf2:	f7ff ff07 	bl	2ac04 <CC_PalMemCopyPlat>
   2adf6:	2000      	movs	r0, #0
   2adf8:	bd10      	pop	{r4, pc}
   2adfa:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2adfe:	4770      	bx	lr
   2ae00:	00f30001 	.word	0x00f30001
   2ae04:	0003205c 	.word	0x0003205c
   2ae08:	00032028 	.word	0x00032028
   2ae0c:	0003203c 	.word	0x0003203c

0002ae10 <ProcessHashDrv>:
   2ae10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae14:	2900      	cmp	r1, #0
   2ae16:	f000 80ef 	beq.w	2aff8 <ProcessHashDrv+0x1e8>
   2ae1a:	4604      	mov	r4, r0
   2ae1c:	2800      	cmp	r0, #0
   2ae1e:	f000 80ef 	beq.w	2b000 <ProcessHashDrv+0x1f0>
   2ae22:	6803      	ldr	r3, [r0, #0]
   2ae24:	4617      	mov	r7, r2
   2ae26:	460e      	mov	r6, r1
   2ae28:	2b00      	cmp	r3, #0
   2ae2a:	f000 80b9 	beq.w	2afa0 <ProcessHashDrv+0x190>
   2ae2e:	3b01      	subs	r3, #1
   2ae30:	2b01      	cmp	r3, #1
   2ae32:	f200 80cd 	bhi.w	2afd0 <ProcessHashDrv+0x1c0>
   2ae36:	4874      	ldr	r0, [pc, #464]	; (2b008 <ProcessHashDrv+0x1f8>)
   2ae38:	f04f 31ff 	mov.w	r1, #4294967295
   2ae3c:	f04f 0802 	mov.w	r8, #2
   2ae40:	f7ff f92a 	bl	2a098 <CC_PalMutexLock>
   2ae44:	2800      	cmp	r0, #0
   2ae46:	f040 80b5 	bne.w	2afb4 <ProcessHashDrv+0x1a4>
   2ae4a:	2000      	movs	r0, #0
   2ae4c:	f7ff f954 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2ae50:	4605      	mov	r5, r0
   2ae52:	2800      	cmp	r0, #0
   2ae54:	f040 80b8 	bne.w	2afc8 <ProcessHashDrv+0x1b8>
   2ae58:	4a6c      	ldr	r2, [pc, #432]	; (2b00c <ProcessHashDrv+0x1fc>)
   2ae5a:	6813      	ldr	r3, [r2, #0]
   2ae5c:	2b00      	cmp	r3, #0
   2ae5e:	d1fc      	bne.n	2ae5a <ProcessHashDrv+0x4a>
   2ae60:	486b      	ldr	r0, [pc, #428]	; (2b010 <ProcessHashDrv+0x200>)
   2ae62:	6803      	ldr	r3, [r0, #0]
   2ae64:	2b00      	cmp	r3, #0
   2ae66:	d1fc      	bne.n	2ae62 <ProcessHashDrv+0x52>
   2ae68:	f04f 30ff 	mov.w	r0, #4294967295
   2ae6c:	f7ff f86c 	bl	29f48 <CC_HalClearInterruptBit>
   2ae70:	4b68      	ldr	r3, [pc, #416]	; (2b014 <ProcessHashDrv+0x204>)
   2ae72:	6818      	ldr	r0, [r3, #0]
   2ae74:	f020 0040 	bic.w	r0, r0, #64	; 0x40
   2ae78:	f7ff f874 	bl	29f64 <CC_HalMaskInterrupt>
   2ae7c:	4866      	ldr	r0, [pc, #408]	; (2b018 <ProcessHashDrv+0x208>)
   2ae7e:	4a67      	ldr	r2, [pc, #412]	; (2b01c <ProcessHashDrv+0x20c>)
   2ae80:	4967      	ldr	r1, [pc, #412]	; (2b020 <ProcessHashDrv+0x210>)
   2ae82:	2301      	movs	r3, #1
   2ae84:	6003      	str	r3, [r0, #0]
   2ae86:	2007      	movs	r0, #7
   2ae88:	6010      	str	r0, [r2, #0]
   2ae8a:	600b      	str	r3, [r1, #0]
   2ae8c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
   2ae90:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   2ae92:	6013      	str	r3, [r2, #0]
   2ae94:	4b63      	ldr	r3, [pc, #396]	; (2b024 <ProcessHashDrv+0x214>)
   2ae96:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   2ae98:	6051      	str	r1, [r2, #4]
   2ae9a:	f8c3 8000 	str.w	r8, [r3]
   2ae9e:	6823      	ldr	r3, [r4, #0]
   2aea0:	b15b      	cbz	r3, 2aeba <ProcessHashDrv+0xaa>
   2aea2:	3b01      	subs	r3, #1
   2aea4:	2b01      	cmp	r3, #1
   2aea6:	d817      	bhi.n	2aed8 <ProcessHashDrv+0xc8>
   2aea8:	4b5f      	ldr	r3, [pc, #380]	; (2b028 <ProcessHashDrv+0x218>)
   2aeaa:	6a62      	ldr	r2, [r4, #36]	; 0x24
   2aeac:	601a      	str	r2, [r3, #0]
   2aeae:	6a22      	ldr	r2, [r4, #32]
   2aeb0:	f843 2c04 	str.w	r2, [r3, #-4]
   2aeb4:	69e2      	ldr	r2, [r4, #28]
   2aeb6:	f843 2c08 	str.w	r2, [r3, #-8]
   2aeba:	4b5c      	ldr	r3, [pc, #368]	; (2b02c <ProcessHashDrv+0x21c>)
   2aebc:	69a2      	ldr	r2, [r4, #24]
   2aebe:	601a      	str	r2, [r3, #0]
   2aec0:	6962      	ldr	r2, [r4, #20]
   2aec2:	f843 2c04 	str.w	r2, [r3, #-4]
   2aec6:	6922      	ldr	r2, [r4, #16]
   2aec8:	f843 2c08 	str.w	r2, [r3, #-8]
   2aecc:	68e2      	ldr	r2, [r4, #12]
   2aece:	f843 2c0c 	str.w	r2, [r3, #-12]
   2aed2:	68a2      	ldr	r2, [r4, #8]
   2aed4:	f843 2c10 	str.w	r2, [r3, #-16]
   2aed8:	4a55      	ldr	r2, [pc, #340]	; (2b030 <ProcessHashDrv+0x220>)
   2aeda:	6813      	ldr	r3, [r2, #0]
   2aedc:	2b00      	cmp	r3, #0
   2aede:	d1fc      	bne.n	2aeda <ProcessHashDrv+0xca>
   2aee0:	2f00      	cmp	r7, #0
   2aee2:	d059      	beq.n	2af98 <ProcessHashDrv+0x188>
   2aee4:	6863      	ldr	r3, [r4, #4]
   2aee6:	2b01      	cmp	r3, #1
   2aee8:	bf04      	itt	eq
   2aeea:	4a52      	ldreq	r2, [pc, #328]	; (2b034 <ProcessHashDrv+0x224>)
   2aeec:	6013      	streq	r3, [r2, #0]
   2aeee:	4a52      	ldr	r2, [pc, #328]	; (2b038 <ProcessHashDrv+0x228>)
   2aef0:	4b52      	ldr	r3, [pc, #328]	; (2b03c <ProcessHashDrv+0x22c>)
   2aef2:	6831      	ldr	r1, [r6, #0]
   2aef4:	6011      	str	r1, [r2, #0]
   2aef6:	2040      	movs	r0, #64	; 0x40
   2aef8:	601f      	str	r7, [r3, #0]
   2aefa:	f7ff f839 	bl	29f70 <CC_HalWaitInterrupt>
   2aefe:	4605      	mov	r5, r0
   2af00:	4a4b      	ldr	r2, [pc, #300]	; (2b030 <ProcessHashDrv+0x220>)
   2af02:	6813      	ldr	r3, [r2, #0]
   2af04:	2b00      	cmp	r3, #0
   2af06:	d1fc      	bne.n	2af02 <ProcessHashDrv+0xf2>
   2af08:	4a41      	ldr	r2, [pc, #260]	; (2b010 <ProcessHashDrv+0x200>)
   2af0a:	6813      	ldr	r3, [r2, #0]
   2af0c:	2b00      	cmp	r3, #0
   2af0e:	d1fc      	bne.n	2af0a <ProcessHashDrv+0xfa>
   2af10:	6823      	ldr	r3, [r4, #0]
   2af12:	b15b      	cbz	r3, 2af2c <ProcessHashDrv+0x11c>
   2af14:	3b01      	subs	r3, #1
   2af16:	2b01      	cmp	r3, #1
   2af18:	d817      	bhi.n	2af4a <ProcessHashDrv+0x13a>
   2af1a:	4a43      	ldr	r2, [pc, #268]	; (2b028 <ProcessHashDrv+0x218>)
   2af1c:	4b48      	ldr	r3, [pc, #288]	; (2b040 <ProcessHashDrv+0x230>)
   2af1e:	6812      	ldr	r2, [r2, #0]
   2af20:	6262      	str	r2, [r4, #36]	; 0x24
   2af22:	681a      	ldr	r2, [r3, #0]
   2af24:	6222      	str	r2, [r4, #32]
   2af26:	3b04      	subs	r3, #4
   2af28:	681b      	ldr	r3, [r3, #0]
   2af2a:	61e3      	str	r3, [r4, #28]
   2af2c:	4a3f      	ldr	r2, [pc, #252]	; (2b02c <ProcessHashDrv+0x21c>)
   2af2e:	4b45      	ldr	r3, [pc, #276]	; (2b044 <ProcessHashDrv+0x234>)
   2af30:	6812      	ldr	r2, [r2, #0]
   2af32:	61a2      	str	r2, [r4, #24]
   2af34:	681a      	ldr	r2, [r3, #0]
   2af36:	6162      	str	r2, [r4, #20]
   2af38:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2af3c:	6122      	str	r2, [r4, #16]
   2af3e:	f853 2c08 	ldr.w	r2, [r3, #-8]
   2af42:	60e2      	str	r2, [r4, #12]
   2af44:	3b0c      	subs	r3, #12
   2af46:	681b      	ldr	r3, [r3, #0]
   2af48:	60a3      	str	r3, [r4, #8]
   2af4a:	4b3f      	ldr	r3, [pc, #252]	; (2b048 <ProcessHashDrv+0x238>)
   2af4c:	4a3f      	ldr	r2, [pc, #252]	; (2b04c <ProcessHashDrv+0x23c>)
   2af4e:	681b      	ldr	r3, [r3, #0]
   2af50:	64a3      	str	r3, [r4, #72]	; 0x48
   2af52:	6812      	ldr	r2, [r2, #0]
   2af54:	4b32      	ldr	r3, [pc, #200]	; (2b020 <ProcessHashDrv+0x210>)
   2af56:	64e2      	str	r2, [r4, #76]	; 0x4c
   2af58:	4836      	ldr	r0, [pc, #216]	; (2b034 <ProcessHashDrv+0x224>)
   2af5a:	493d      	ldr	r1, [pc, #244]	; (2b050 <ProcessHashDrv+0x240>)
   2af5c:	2201      	movs	r2, #1
   2af5e:	601a      	str	r2, [r3, #0]
   2af60:	2300      	movs	r3, #0
   2af62:	4a33      	ldr	r2, [pc, #204]	; (2b030 <ProcessHashDrv+0x220>)
   2af64:	6003      	str	r3, [r0, #0]
   2af66:	600b      	str	r3, [r1, #0]
   2af68:	6813      	ldr	r3, [r2, #0]
   2af6a:	2b00      	cmp	r3, #0
   2af6c:	d1fc      	bne.n	2af68 <ProcessHashDrv+0x158>
   2af6e:	4a2a      	ldr	r2, [pc, #168]	; (2b018 <ProcessHashDrv+0x208>)
   2af70:	6013      	str	r3, [r2, #0]
   2af72:	2d00      	cmp	r5, #0
   2af74:	d13a      	bne.n	2afec <ProcessHashDrv+0x1dc>
   2af76:	4b27      	ldr	r3, [pc, #156]	; (2b014 <ProcessHashDrv+0x204>)
   2af78:	6818      	ldr	r0, [r3, #0]
   2af7a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   2af7e:	f7fe fff1 	bl	29f64 <CC_HalMaskInterrupt>
   2af82:	2001      	movs	r0, #1
   2af84:	f7ff f8b8 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2af88:	bb60      	cbnz	r0, 2afe4 <ProcessHashDrv+0x1d4>
   2af8a:	481f      	ldr	r0, [pc, #124]	; (2b008 <ProcessHashDrv+0x1f8>)
   2af8c:	f7ff f88c 	bl	2a0a8 <CC_PalMutexUnlock>
   2af90:	bb10      	cbnz	r0, 2afd8 <ProcessHashDrv+0x1c8>
   2af92:	4628      	mov	r0, r5
   2af94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2af98:	4b2d      	ldr	r3, [pc, #180]	; (2b050 <ProcessHashDrv+0x240>)
   2af9a:	2204      	movs	r2, #4
   2af9c:	601a      	str	r2, [r3, #0]
   2af9e:	e7af      	b.n	2af00 <ProcessHashDrv+0xf0>
   2afa0:	4819      	ldr	r0, [pc, #100]	; (2b008 <ProcessHashDrv+0x1f8>)
   2afa2:	f04f 31ff 	mov.w	r1, #4294967295
   2afa6:	f04f 0801 	mov.w	r8, #1
   2afaa:	f7ff f875 	bl	2a098 <CC_PalMutexLock>
   2afae:	2800      	cmp	r0, #0
   2afb0:	f43f af4b 	beq.w	2ae4a <ProcessHashDrv+0x3a>
   2afb4:	4827      	ldr	r0, [pc, #156]	; (2b054 <ProcessHashDrv+0x244>)
   2afb6:	f7fe f923 	bl	29200 <CC_PalAbort>
   2afba:	2000      	movs	r0, #0
   2afbc:	f7ff f89c 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2afc0:	4605      	mov	r5, r0
   2afc2:	2800      	cmp	r0, #0
   2afc4:	f43f af48 	beq.w	2ae58 <ProcessHashDrv+0x48>
   2afc8:	4823      	ldr	r0, [pc, #140]	; (2b058 <ProcessHashDrv+0x248>)
   2afca:	f7fe f919 	bl	29200 <CC_PalAbort>
   2afce:	e743      	b.n	2ae58 <ProcessHashDrv+0x48>
   2afd0:	4d22      	ldr	r5, [pc, #136]	; (2b05c <ProcessHashDrv+0x24c>)
   2afd2:	4628      	mov	r0, r5
   2afd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2afd8:	4821      	ldr	r0, [pc, #132]	; (2b060 <ProcessHashDrv+0x250>)
   2afda:	f7fe f911 	bl	29200 <CC_PalAbort>
   2afde:	4628      	mov	r0, r5
   2afe0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2afe4:	481f      	ldr	r0, [pc, #124]	; (2b064 <ProcessHashDrv+0x254>)
   2afe6:	f7fe f90b 	bl	29200 <CC_PalAbort>
   2afea:	e7ce      	b.n	2af8a <ProcessHashDrv+0x17a>
   2afec:	f104 0008 	add.w	r0, r4, #8
   2aff0:	2110      	movs	r1, #16
   2aff2:	f7ff fe0b 	bl	2ac0c <CC_PalMemSetZeroPlat>
   2aff6:	e7be      	b.n	2af76 <ProcessHashDrv+0x166>
   2aff8:	4d1b      	ldr	r5, [pc, #108]	; (2b068 <ProcessHashDrv+0x258>)
   2affa:	4628      	mov	r0, r5
   2affc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b000:	f44f 0573 	mov.w	r5, #15925248	; 0xf30000
   2b004:	e7c5      	b.n	2af92 <ProcessHashDrv+0x182>
   2b006:	bf00      	nop
   2b008:	200006c8 	.word	0x200006c8
   2b00c:	5002b91c 	.word	0x5002b91c
   2b010:	5002bc20 	.word	0x5002bc20
   2b014:	5002ba04 	.word	0x5002ba04
   2b018:	5002b818 	.word	0x5002b818
   2b01c:	5002b900 	.word	0x5002b900
   2b020:	5002b7c4 	.word	0x5002b7c4
   2b024:	5002b7c0 	.word	0x5002b7c0
   2b028:	5002b65c 	.word	0x5002b65c
   2b02c:	5002b650 	.word	0x5002b650
   2b030:	5002b910 	.word	0x5002b910
   2b034:	5002b684 	.word	0x5002b684
   2b038:	5002bc28 	.word	0x5002bc28
   2b03c:	5002bc2c 	.word	0x5002bc2c
   2b040:	5002b658 	.word	0x5002b658
   2b044:	5002b64c 	.word	0x5002b64c
   2b048:	5002b7cc 	.word	0x5002b7cc
   2b04c:	5002b7d0 	.word	0x5002b7d0
   2b050:	5002b7c8 	.word	0x5002b7c8
   2b054:	00031f5c 	.word	0x00031f5c
   2b058:	00031f74 	.word	0x00031f74
   2b05c:	00f30001 	.word	0x00f30001
   2b060:	00031fb4 	.word	0x00031fb4
   2b064:	00031f94 	.word	0x00031f94
   2b068:	00f30003 	.word	0x00f30003

0002b06c <FinishHashDrv>:
   2b06c:	2800      	cmp	r0, #0
   2b06e:	d03b      	beq.n	2b0e8 <FinishHashDrv+0x7c>
   2b070:	b4f0      	push	{r4, r5, r6, r7}
   2b072:	b082      	sub	sp, #8
   2b074:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2b076:	9301      	str	r3, [sp, #4]
   2b078:	6883      	ldr	r3, [r0, #8]
   2b07a:	fa93 fc83 	rev.w	ip, r3
   2b07e:	9b01      	ldr	r3, [sp, #4]
   2b080:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
   2b084:	e9d0 7603 	ldrd	r7, r6, [r0, #12]
   2b088:	e9d0 5405 	ldrd	r5, r4, [r0, #20]
   2b08c:	ba1b      	rev	r3, r3
   2b08e:	6243      	str	r3, [r0, #36]	; 0x24
   2b090:	6c43      	ldr	r3, [r0, #68]	; 0x44
   2b092:	9301      	str	r3, [sp, #4]
   2b094:	ba09      	rev	r1, r1
   2b096:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2b098:	61c1      	str	r1, [r0, #28]
   2b09a:	ba12      	rev	r2, r2
   2b09c:	6202      	str	r2, [r0, #32]
   2b09e:	ba3f      	rev	r7, r7
   2b0a0:	e9d0 120f 	ldrd	r1, r2, [r0, #60]	; 0x3c
   2b0a4:	ba36      	rev	r6, r6
   2b0a6:	ba2d      	rev	r5, r5
   2b0a8:	ba24      	rev	r4, r4
   2b0aa:	e9c0 c702 	strd	ip, r7, [r0, #8]
   2b0ae:	e9c0 6504 	strd	r6, r5, [r0, #16]
   2b0b2:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
   2b0b4:	6b06      	ldr	r6, [r0, #48]	; 0x30
   2b0b6:	6b45      	ldr	r5, [r0, #52]	; 0x34
   2b0b8:	6184      	str	r4, [r0, #24]
   2b0ba:	fa93 fc83 	rev.w	ip, r3
   2b0be:	6b84      	ldr	r4, [r0, #56]	; 0x38
   2b0c0:	9b01      	ldr	r3, [sp, #4]
   2b0c2:	ba3f      	rev	r7, r7
   2b0c4:	ba36      	rev	r6, r6
   2b0c6:	ba2d      	rev	r5, r5
   2b0c8:	ba24      	rev	r4, r4
   2b0ca:	ba09      	rev	r1, r1
   2b0cc:	ba12      	rev	r2, r2
   2b0ce:	ba1b      	rev	r3, r3
   2b0d0:	e9c0 c70a 	strd	ip, r7, [r0, #40]	; 0x28
   2b0d4:	e9c0 650c 	strd	r6, r5, [r0, #48]	; 0x30
   2b0d8:	e9c0 410e 	strd	r4, r1, [r0, #56]	; 0x38
   2b0dc:	e9c0 2310 	strd	r2, r3, [r0, #64]	; 0x40
   2b0e0:	2000      	movs	r0, #0
   2b0e2:	b002      	add	sp, #8
   2b0e4:	bcf0      	pop	{r4, r5, r6, r7}
   2b0e6:	4770      	bx	lr
   2b0e8:	f44f 0073 	mov.w	r0, #15925248	; 0xf30000
   2b0ec:	4770      	bx	lr
   2b0ee:	bf00      	nop

0002b0f0 <LoadAesKey>:
   2b0f0:	2800      	cmp	r0, #0
   2b0f2:	d03b      	beq.n	2b16c <LoadAesKey+0x7c>
   2b0f4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
   2b0f8:	2b00      	cmp	r3, #0
   2b0fa:	d02c      	beq.n	2b156 <LoadAesKey+0x66>
   2b0fc:	2b03      	cmp	r3, #3
   2b0fe:	b510      	push	{r4, lr}
   2b100:	d00f      	beq.n	2b122 <LoadAesKey+0x32>
   2b102:	481c      	ldr	r0, [pc, #112]	; (2b174 <LoadAesKey+0x84>)
   2b104:	4c1c      	ldr	r4, [pc, #112]	; (2b178 <LoadAesKey+0x88>)
   2b106:	6822      	ldr	r2, [r4, #0]
   2b108:	4b1c      	ldr	r3, [pc, #112]	; (2b17c <LoadAesKey+0x8c>)
   2b10a:	6812      	ldr	r2, [r2, #0]
   2b10c:	601a      	str	r2, [r3, #0]
   2b10e:	6822      	ldr	r2, [r4, #0]
   2b110:	6852      	ldr	r2, [r2, #4]
   2b112:	605a      	str	r2, [r3, #4]
   2b114:	6822      	ldr	r2, [r4, #0]
   2b116:	6892      	ldr	r2, [r2, #8]
   2b118:	609a      	str	r2, [r3, #8]
   2b11a:	6822      	ldr	r2, [r4, #0]
   2b11c:	68d2      	ldr	r2, [r2, #12]
   2b11e:	60da      	str	r2, [r3, #12]
   2b120:	bd10      	pop	{r4, pc}
   2b122:	6b01      	ldr	r1, [r0, #48]	; 0x30
   2b124:	6c00      	ldr	r0, [r0, #64]	; 0x40
   2b126:	4c14      	ldr	r4, [pc, #80]	; (2b178 <LoadAesKey+0x88>)
   2b128:	f000 fba4 	bl	2b874 <kmu_validate_kdr_slot_and_size>
   2b12c:	2800      	cmp	r0, #0
   2b12e:	d1ea      	bne.n	2b106 <LoadAesKey+0x16>
   2b130:	6821      	ldr	r1, [r4, #0]
   2b132:	4a12      	ldr	r2, [pc, #72]	; (2b17c <LoadAesKey+0x8c>)
   2b134:	6809      	ldr	r1, [r1, #0]
   2b136:	6011      	str	r1, [r2, #0]
   2b138:	6821      	ldr	r1, [r4, #0]
   2b13a:	4b11      	ldr	r3, [pc, #68]	; (2b180 <LoadAesKey+0x90>)
   2b13c:	6849      	ldr	r1, [r1, #4]
   2b13e:	6019      	str	r1, [r3, #0]
   2b140:	6821      	ldr	r1, [r4, #0]
   2b142:	6889      	ldr	r1, [r1, #8]
   2b144:	6091      	str	r1, [r2, #8]
   2b146:	6822      	ldr	r2, [r4, #0]
   2b148:	68d2      	ldr	r2, [r2, #12]
   2b14a:	609a      	str	r2, [r3, #8]
   2b14c:	f000 fb9e 	bl	2b88c <kmu_use_kdr_key>
   2b150:	2800      	cmp	r0, #0
   2b152:	d1d8      	bne.n	2b106 <LoadAesKey+0x16>
   2b154:	bd10      	pop	{r4, pc}
   2b156:	4a09      	ldr	r2, [pc, #36]	; (2b17c <LoadAesKey+0x8c>)
   2b158:	6901      	ldr	r1, [r0, #16]
   2b15a:	6011      	str	r1, [r2, #0]
   2b15c:	6941      	ldr	r1, [r0, #20]
   2b15e:	6051      	str	r1, [r2, #4]
   2b160:	6981      	ldr	r1, [r0, #24]
   2b162:	6091      	str	r1, [r2, #8]
   2b164:	69c1      	ldr	r1, [r0, #28]
   2b166:	60d1      	str	r1, [r2, #12]
   2b168:	4618      	mov	r0, r3
   2b16a:	4770      	bx	lr
   2b16c:	f44f 0071 	mov.w	r0, #15794176	; 0xf10000
   2b170:	4770      	bx	lr
   2b172:	bf00      	nop
   2b174:	00f10009 	.word	0x00f10009
   2b178:	200006b8 	.word	0x200006b8
   2b17c:	5002b400 	.word	0x5002b400
   2b180:	5002b404 	.word	0x5002b404

0002b184 <InitAes.part.0>:
   2b184:	4a32      	ldr	r2, [pc, #200]	; (2b250 <InitAes.part.0+0xcc>)
   2b186:	b510      	push	{r4, lr}
   2b188:	4604      	mov	r4, r0
   2b18a:	6813      	ldr	r3, [r2, #0]
   2b18c:	2b00      	cmp	r3, #0
   2b18e:	d1fc      	bne.n	2b18a <InitAes.part.0+0x6>
   2b190:	4a30      	ldr	r2, [pc, #192]	; (2b254 <InitAes.part.0+0xd0>)
   2b192:	6813      	ldr	r3, [r2, #0]
   2b194:	2b00      	cmp	r3, #0
   2b196:	d1fc      	bne.n	2b192 <InitAes.part.0+0xe>
   2b198:	4a2f      	ldr	r2, [pc, #188]	; (2b258 <InitAes.part.0+0xd4>)
   2b19a:	6813      	ldr	r3, [r2, #0]
   2b19c:	2b00      	cmp	r3, #0
   2b19e:	d1fc      	bne.n	2b19a <InitAes.part.0+0x16>
   2b1a0:	4a2e      	ldr	r2, [pc, #184]	; (2b25c <InitAes.part.0+0xd8>)
   2b1a2:	6813      	ldr	r3, [r2, #0]
   2b1a4:	2b00      	cmp	r3, #0
   2b1a6:	d1fc      	bne.n	2b1a2 <InitAes.part.0+0x1e>
   2b1a8:	4a2d      	ldr	r2, [pc, #180]	; (2b260 <InitAes.part.0+0xdc>)
   2b1aa:	6813      	ldr	r3, [r2, #0]
   2b1ac:	2b00      	cmp	r3, #0
   2b1ae:	d1fc      	bne.n	2b1aa <InitAes.part.0+0x26>
   2b1b0:	4a2c      	ldr	r2, [pc, #176]	; (2b264 <InitAes.part.0+0xe0>)
   2b1b2:	6813      	ldr	r3, [r2, #0]
   2b1b4:	2b00      	cmp	r3, #0
   2b1b6:	d1fc      	bne.n	2b1b2 <InitAes.part.0+0x2e>
   2b1b8:	f04f 30ff 	mov.w	r0, #4294967295
   2b1bc:	f7fe fec4 	bl	29f48 <CC_HalClearInterruptBit>
   2b1c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b1c2:	f023 0304 	bic.w	r3, r3, #4
   2b1c6:	2b03      	cmp	r3, #3
   2b1c8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b1ca:	d036      	beq.n	2b23a <InitAes.part.0+0xb6>
   2b1cc:	2b01      	cmp	r3, #1
   2b1ce:	4b26      	ldr	r3, [pc, #152]	; (2b268 <InitAes.part.0+0xe4>)
   2b1d0:	6818      	ldr	r0, [r3, #0]
   2b1d2:	bf0c      	ite	eq
   2b1d4:	f020 0080 	biceq.w	r0, r0, #128	; 0x80
   2b1d8:	f020 0020 	bicne.w	r0, r0, #32
   2b1dc:	f7fe fec2 	bl	29f64 <CC_HalMaskInterrupt>
   2b1e0:	4b22      	ldr	r3, [pc, #136]	; (2b26c <InitAes.part.0+0xe8>)
   2b1e2:	4a1b      	ldr	r2, [pc, #108]	; (2b250 <InitAes.part.0+0xcc>)
   2b1e4:	2101      	movs	r1, #1
   2b1e6:	6019      	str	r1, [r3, #0]
   2b1e8:	6813      	ldr	r3, [r2, #0]
   2b1ea:	2b00      	cmp	r3, #0
   2b1ec:	d1fc      	bne.n	2b1e8 <InitAes.part.0+0x64>
   2b1ee:	4a19      	ldr	r2, [pc, #100]	; (2b254 <InitAes.part.0+0xd0>)
   2b1f0:	6813      	ldr	r3, [r2, #0]
   2b1f2:	2b00      	cmp	r3, #0
   2b1f4:	d1fc      	bne.n	2b1f0 <InitAes.part.0+0x6c>
   2b1f6:	491e      	ldr	r1, [pc, #120]	; (2b270 <InitAes.part.0+0xec>)
   2b1f8:	4a15      	ldr	r2, [pc, #84]	; (2b250 <InitAes.part.0+0xcc>)
   2b1fa:	600b      	str	r3, [r1, #0]
   2b1fc:	6813      	ldr	r3, [r2, #0]
   2b1fe:	2b00      	cmp	r3, #0
   2b200:	d1fc      	bne.n	2b1fc <InitAes.part.0+0x78>
   2b202:	4a14      	ldr	r2, [pc, #80]	; (2b254 <InitAes.part.0+0xd0>)
   2b204:	6813      	ldr	r3, [r2, #0]
   2b206:	2b00      	cmp	r3, #0
   2b208:	d1fc      	bne.n	2b204 <InitAes.part.0+0x80>
   2b20a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   2b20c:	f022 0104 	bic.w	r1, r2, #4
   2b210:	2903      	cmp	r1, #3
   2b212:	bf18      	it	ne
   2b214:	6ba3      	ldrne	r3, [r4, #56]	; 0x38
   2b216:	4917      	ldr	r1, [pc, #92]	; (2b274 <InitAes.part.0+0xf0>)
   2b218:	ea4f 0282 	mov.w	r2, r2, lsl #2
   2b21c:	bf18      	it	ne
   2b21e:	f003 0301 	andne.w	r3, r3, #1
   2b222:	f002 021c 	and.w	r2, r2, #28
   2b226:	4313      	orrs	r3, r2
   2b228:	600b      	str	r3, [r1, #0]
   2b22a:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b22c:	2b07      	cmp	r3, #7
   2b22e:	d102      	bne.n	2b236 <InitAes.part.0+0xb2>
   2b230:	4b11      	ldr	r3, [pc, #68]	; (2b278 <InitAes.part.0+0xf4>)
   2b232:	2201      	movs	r2, #1
   2b234:	601a      	str	r2, [r3, #0]
   2b236:	2000      	movs	r0, #0
   2b238:	bd10      	pop	{r4, pc}
   2b23a:	2b01      	cmp	r3, #1
   2b23c:	4b0a      	ldr	r3, [pc, #40]	; (2b268 <InitAes.part.0+0xe4>)
   2b23e:	6818      	ldr	r0, [r3, #0]
   2b240:	bf0c      	ite	eq
   2b242:	f020 0040 	biceq.w	r0, r0, #64	; 0x40
   2b246:	f020 0010 	bicne.w	r0, r0, #16
   2b24a:	f7fe fe8b 	bl	29f64 <CC_HalMaskInterrupt>
   2b24e:	e7c7      	b.n	2b1e0 <InitAes.part.0+0x5c>
   2b250:	5002b910 	.word	0x5002b910
   2b254:	5002b470 	.word	0x5002b470
   2b258:	5002bd20 	.word	0x5002bd20
   2b25c:	5002bc20 	.word	0x5002bc20
   2b260:	5002bd38 	.word	0x5002bd38
   2b264:	5002bc38 	.word	0x5002bc38
   2b268:	5002ba04 	.word	0x5002ba04
   2b26c:	5002b900 	.word	0x5002b900
   2b270:	5002b4bc 	.word	0x5002b4bc
   2b274:	5002b4c0 	.word	0x5002b4c0
   2b278:	5002b47c 	.word	0x5002b47c

0002b27c <ProcessAesDrv>:
   2b27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b280:	b087      	sub	sp, #28
   2b282:	2900      	cmp	r1, #0
   2b284:	f000 80a5 	beq.w	2b3d2 <ProcessAesDrv+0x156>
   2b288:	4616      	mov	r6, r2
   2b28a:	2a00      	cmp	r2, #0
   2b28c:	f000 80a1 	beq.w	2b3d2 <ProcessAesDrv+0x156>
   2b290:	4604      	mov	r4, r0
   2b292:	2800      	cmp	r0, #0
   2b294:	f000 813f 	beq.w	2b516 <ProcessAesDrv+0x29a>
   2b298:	461f      	mov	r7, r3
   2b29a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2b29c:	460d      	mov	r5, r1
   2b29e:	2b00      	cmp	r3, #0
   2b2a0:	d150      	bne.n	2b344 <ProcessAesDrv+0xc8>
   2b2a2:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   2b2a6:	d252      	bcs.n	2b34e <ProcessAesDrv+0xd2>
   2b2a8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
   2b2ac:	2b04      	cmp	r3, #4
   2b2ae:	f000 8109 	beq.w	2b4c4 <ProcessAesDrv+0x248>
   2b2b2:	f04f 0800 	mov.w	r8, #0
   2b2b6:	48aa      	ldr	r0, [pc, #680]	; (2b560 <ProcessAesDrv+0x2e4>)
   2b2b8:	f04f 31ff 	mov.w	r1, #4294967295
   2b2bc:	f7fe feec 	bl	2a098 <CC_PalMutexLock>
   2b2c0:	2800      	cmp	r0, #0
   2b2c2:	f040 80de 	bne.w	2b482 <ProcessAesDrv+0x206>
   2b2c6:	2000      	movs	r0, #0
   2b2c8:	f7fe ff16 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2b2cc:	2800      	cmp	r0, #0
   2b2ce:	f040 80e1 	bne.w	2b494 <ProcessAesDrv+0x218>
   2b2d2:	4ba4      	ldr	r3, [pc, #656]	; (2b564 <ProcessAesDrv+0x2e8>)
   2b2d4:	4aa4      	ldr	r2, [pc, #656]	; (2b568 <ProcessAesDrv+0x2ec>)
   2b2d6:	2101      	movs	r1, #1
   2b2d8:	6019      	str	r1, [r3, #0]
   2b2da:	6813      	ldr	r3, [r2, #0]
   2b2dc:	2b00      	cmp	r3, #0
   2b2de:	d1fc      	bne.n	2b2da <ProcessAesDrv+0x5e>
   2b2e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b2e2:	2b03      	cmp	r3, #3
   2b2e4:	dc39      	bgt.n	2b35a <ProcessAesDrv+0xde>
   2b2e6:	2b00      	cmp	r3, #0
   2b2e8:	da3a      	bge.n	2b360 <ProcessAesDrv+0xe4>
   2b2ea:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 2b5b4 <ProcessAesDrv+0x338>
   2b2ee:	4a9e      	ldr	r2, [pc, #632]	; (2b568 <ProcessAesDrv+0x2ec>)
   2b2f0:	6813      	ldr	r3, [r2, #0]
   2b2f2:	2b00      	cmp	r3, #0
   2b2f4:	d1fc      	bne.n	2b2f0 <ProcessAesDrv+0x74>
   2b2f6:	f1b8 0f00 	cmp.w	r8, #0
   2b2fa:	f040 80da 	bne.w	2b4b2 <ProcessAesDrv+0x236>
   2b2fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b300:	f023 0304 	bic.w	r3, r3, #4
   2b304:	2b03      	cmp	r3, #3
   2b306:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b308:	d058      	beq.n	2b3bc <ProcessAesDrv+0x140>
   2b30a:	2b01      	cmp	r3, #1
   2b30c:	4b97      	ldr	r3, [pc, #604]	; (2b56c <ProcessAesDrv+0x2f0>)
   2b30e:	6818      	ldr	r0, [r3, #0]
   2b310:	bf0c      	ite	eq
   2b312:	f040 0080 	orreq.w	r0, r0, #128	; 0x80
   2b316:	f040 0020 	orrne.w	r0, r0, #32
   2b31a:	f7fe fe23 	bl	29f64 <CC_HalMaskInterrupt>
   2b31e:	4b91      	ldr	r3, [pc, #580]	; (2b564 <ProcessAesDrv+0x2e8>)
   2b320:	2200      	movs	r2, #0
   2b322:	601a      	str	r2, [r3, #0]
   2b324:	2001      	movs	r0, #1
   2b326:	f7fe fee7 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2b32a:	2800      	cmp	r0, #0
   2b32c:	f040 80bd 	bne.w	2b4aa <ProcessAesDrv+0x22e>
   2b330:	488b      	ldr	r0, [pc, #556]	; (2b560 <ProcessAesDrv+0x2e4>)
   2b332:	f7fe feb9 	bl	2a0a8 <CC_PalMutexUnlock>
   2b336:	2800      	cmp	r0, #0
   2b338:	f040 80b0 	bne.w	2b49c <ProcessAesDrv+0x220>
   2b33c:	4648      	mov	r0, r9
   2b33e:	b007      	add	sp, #28
   2b340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b344:	2b01      	cmp	r3, #1
   2b346:	d1af      	bne.n	2b2a8 <ProcessAesDrv+0x2c>
   2b348:	f5b7 3f80 	cmp.w	r7, #65536	; 0x10000
   2b34c:	d3ac      	bcc.n	2b2a8 <ProcessAesDrv+0x2c>
   2b34e:	f8df 9268 	ldr.w	r9, [pc, #616]	; 2b5b8 <ProcessAesDrv+0x33c>
   2b352:	4648      	mov	r0, r9
   2b354:	b007      	add	sp, #28
   2b356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b35a:	3b06      	subs	r3, #6
   2b35c:	2b01      	cmp	r3, #1
   2b35e:	d8c4      	bhi.n	2b2ea <ProcessAesDrv+0x6e>
   2b360:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b362:	2b01      	cmp	r3, #1
   2b364:	f200 80d4 	bhi.w	2b510 <ProcessAesDrv+0x294>
   2b368:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b36a:	2b01      	cmp	r3, #1
   2b36c:	d837      	bhi.n	2b3de <ProcessAesDrv+0x162>
   2b36e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2b370:	2b01      	cmp	r3, #1
   2b372:	f200 8131 	bhi.w	2b5d8 <ProcessAesDrv+0x35c>
   2b376:	4620      	mov	r0, r4
   2b378:	f7ff ff04 	bl	2b184 <InitAes.part.0>
   2b37c:	4681      	mov	r9, r0
   2b37e:	2800      	cmp	r0, #0
   2b380:	d1b5      	bne.n	2b2ee <ProcessAesDrv+0x72>
   2b382:	4620      	mov	r0, r4
   2b384:	f7ff feb4 	bl	2b0f0 <LoadAesKey>
   2b388:	4681      	mov	r9, r0
   2b38a:	2800      	cmp	r0, #0
   2b38c:	d1af      	bne.n	2b2ee <ProcessAesDrv+0x72>
   2b38e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b390:	2b07      	cmp	r3, #7
   2b392:	d8aa      	bhi.n	2b2ea <ProcessAesDrv+0x6e>
   2b394:	a201      	add	r2, pc, #4	; (adr r2, 2b39c <ProcessAesDrv+0x120>)
   2b396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2b39a:	bf00      	nop
   2b39c:	0002b3f9 	.word	0x0002b3f9
   2b3a0:	0002b3e5 	.word	0x0002b3e5
   2b3a4:	0002b555 	.word	0x0002b555
   2b3a8:	0002b3e5 	.word	0x0002b3e5
   2b3ac:	0002b2eb 	.word	0x0002b2eb
   2b3b0:	0002b2eb 	.word	0x0002b2eb
   2b3b4:	0002b555 	.word	0x0002b555
   2b3b8:	0002b3e5 	.word	0x0002b3e5
   2b3bc:	2b01      	cmp	r3, #1
   2b3be:	4b6b      	ldr	r3, [pc, #428]	; (2b56c <ProcessAesDrv+0x2f0>)
   2b3c0:	6818      	ldr	r0, [r3, #0]
   2b3c2:	bf0c      	ite	eq
   2b3c4:	f040 0040 	orreq.w	r0, r0, #64	; 0x40
   2b3c8:	f040 0010 	orrne.w	r0, r0, #16
   2b3cc:	f7fe fdca 	bl	29f64 <CC_HalMaskInterrupt>
   2b3d0:	e7a5      	b.n	2b31e <ProcessAesDrv+0xa2>
   2b3d2:	f8df 91e8 	ldr.w	r9, [pc, #488]	; 2b5bc <ProcessAesDrv+0x340>
   2b3d6:	4648      	mov	r0, r9
   2b3d8:	b007      	add	sp, #28
   2b3da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b3de:	f8df 91e0 	ldr.w	r9, [pc, #480]	; 2b5c0 <ProcessAesDrv+0x344>
   2b3e2:	e784      	b.n	2b2ee <ProcessAesDrv+0x72>
   2b3e4:	4b62      	ldr	r3, [pc, #392]	; (2b570 <ProcessAesDrv+0x2f4>)
   2b3e6:	6822      	ldr	r2, [r4, #0]
   2b3e8:	601a      	str	r2, [r3, #0]
   2b3ea:	6862      	ldr	r2, [r4, #4]
   2b3ec:	605a      	str	r2, [r3, #4]
   2b3ee:	68a2      	ldr	r2, [r4, #8]
   2b3f0:	609a      	str	r2, [r3, #8]
   2b3f2:	68e2      	ldr	r2, [r4, #12]
   2b3f4:	60da      	str	r2, [r3, #12]
   2b3f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b3f8:	682a      	ldr	r2, [r5, #0]
   2b3fa:	f023 0304 	bic.w	r3, r3, #4
   2b3fe:	2b03      	cmp	r3, #3
   2b400:	d009      	beq.n	2b416 <ProcessAesDrv+0x19a>
   2b402:	6e21      	ldr	r1, [r4, #96]	; 0x60
   2b404:	6833      	ldr	r3, [r6, #0]
   2b406:	2901      	cmp	r1, #1
   2b408:	bf07      	ittee	eq
   2b40a:	485a      	ldreq	r0, [pc, #360]	; (2b574 <ProcessAesDrv+0x2f8>)
   2b40c:	495a      	ldreq	r1, [pc, #360]	; (2b578 <ProcessAesDrv+0x2fc>)
   2b40e:	485b      	ldrne	r0, [pc, #364]	; (2b57c <ProcessAesDrv+0x300>)
   2b410:	495b      	ldrne	r1, [pc, #364]	; (2b580 <ProcessAesDrv+0x304>)
   2b412:	6003      	str	r3, [r0, #0]
   2b414:	600f      	str	r7, [r1, #0]
   2b416:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b418:	2b01      	cmp	r3, #1
   2b41a:	bf0b      	itete	eq
   2b41c:	4b59      	ldreq	r3, [pc, #356]	; (2b584 <ProcessAesDrv+0x308>)
   2b41e:	4b5a      	ldrne	r3, [pc, #360]	; (2b588 <ProcessAesDrv+0x30c>)
   2b420:	495a      	ldreq	r1, [pc, #360]	; (2b58c <ProcessAesDrv+0x310>)
   2b422:	495b      	ldrne	r1, [pc, #364]	; (2b590 <ProcessAesDrv+0x314>)
   2b424:	600a      	str	r2, [r1, #0]
   2b426:	601f      	str	r7, [r3, #0]
   2b428:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b42a:	f023 0304 	bic.w	r3, r3, #4
   2b42e:	2b03      	cmp	r3, #3
   2b430:	d074      	beq.n	2b51c <ProcessAesDrv+0x2a0>
   2b432:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2b434:	2b01      	cmp	r3, #1
   2b436:	bf0c      	ite	eq
   2b438:	2080      	moveq	r0, #128	; 0x80
   2b43a:	2020      	movne	r0, #32
   2b43c:	f7fe fd98 	bl	29f70 <CC_HalWaitInterrupt>
   2b440:	4681      	mov	r9, r0
   2b442:	2800      	cmp	r0, #0
   2b444:	f47f af53 	bne.w	2b2ee <ProcessAesDrv+0x72>
   2b448:	4b47      	ldr	r3, [pc, #284]	; (2b568 <ProcessAesDrv+0x2ec>)
   2b44a:	681a      	ldr	r2, [r3, #0]
   2b44c:	2a00      	cmp	r2, #0
   2b44e:	d1fc      	bne.n	2b44a <ProcessAesDrv+0x1ce>
   2b450:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b452:	3b01      	subs	r3, #1
   2b454:	4691      	mov	r9, r2
   2b456:	2b06      	cmp	r3, #6
   2b458:	d810      	bhi.n	2b47c <ProcessAesDrv+0x200>
   2b45a:	e8df f003 	tbb	[pc, r3]
   2b45e:	7d04      	.short	0x7d04
   2b460:	7d0f0f04 	.word	0x7d0f0f04
   2b464:	04          	.byte	0x04
   2b465:	00          	.byte	0x00
   2b466:	4a42      	ldr	r2, [pc, #264]	; (2b570 <ProcessAesDrv+0x2f4>)
   2b468:	4b4a      	ldr	r3, [pc, #296]	; (2b594 <ProcessAesDrv+0x318>)
   2b46a:	6812      	ldr	r2, [r2, #0]
   2b46c:	6022      	str	r2, [r4, #0]
   2b46e:	681a      	ldr	r2, [r3, #0]
   2b470:	6062      	str	r2, [r4, #4]
   2b472:	685a      	ldr	r2, [r3, #4]
   2b474:	60a2      	str	r2, [r4, #8]
   2b476:	3308      	adds	r3, #8
   2b478:	681b      	ldr	r3, [r3, #0]
   2b47a:	60e3      	str	r3, [r4, #12]
   2b47c:	2301      	movs	r3, #1
   2b47e:	65a3      	str	r3, [r4, #88]	; 0x58
   2b480:	e735      	b.n	2b2ee <ProcessAesDrv+0x72>
   2b482:	4845      	ldr	r0, [pc, #276]	; (2b598 <ProcessAesDrv+0x31c>)
   2b484:	f7fd febc 	bl	29200 <CC_PalAbort>
   2b488:	2000      	movs	r0, #0
   2b48a:	f7fe fe35 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2b48e:	2800      	cmp	r0, #0
   2b490:	f43f af1f 	beq.w	2b2d2 <ProcessAesDrv+0x56>
   2b494:	4841      	ldr	r0, [pc, #260]	; (2b59c <ProcessAesDrv+0x320>)
   2b496:	f7fd feb3 	bl	29200 <CC_PalAbort>
   2b49a:	e71a      	b.n	2b2d2 <ProcessAesDrv+0x56>
   2b49c:	4840      	ldr	r0, [pc, #256]	; (2b5a0 <ProcessAesDrv+0x324>)
   2b49e:	f7fd feaf 	bl	29200 <CC_PalAbort>
   2b4a2:	4648      	mov	r0, r9
   2b4a4:	b007      	add	sp, #28
   2b4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b4aa:	483e      	ldr	r0, [pc, #248]	; (2b5a4 <ProcessAesDrv+0x328>)
   2b4ac:	f7fd fea8 	bl	29200 <CC_PalAbort>
   2b4b0:	e73e      	b.n	2b330 <ProcessAesDrv+0xb4>
   2b4b2:	2304      	movs	r3, #4
   2b4b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   2b4b8:	2120      	movs	r1, #32
   2b4ba:	f104 0010 	add.w	r0, r4, #16
   2b4be:	f7ff fba5 	bl	2ac0c <CC_PalMemSetZeroPlat>
   2b4c2:	e71c      	b.n	2b2fe <ProcessAesDrv+0x82>
   2b4c4:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2b4c6:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2b4c8:	f000 f9c8 	bl	2b85c <kmu_validate_slot_and_size>
   2b4cc:	b9e8      	cbnz	r0, 2b50a <ProcessAesDrv+0x28e>
   2b4ce:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2b5c4 <ProcessAesDrv+0x348>
   2b4d2:	f8df b0f4 	ldr.w	fp, [pc, #244]	; 2b5c8 <ProcessAesDrv+0x34c>
   2b4d6:	f8d8 3000 	ldr.w	r3, [r8]
   2b4da:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 2b5cc <ProcessAesDrv+0x350>
   2b4de:	681b      	ldr	r3, [r3, #0]
   2b4e0:	f8cb 3000 	str.w	r3, [fp]
   2b4e4:	f8d8 3000 	ldr.w	r3, [r8]
   2b4e8:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 2b5d0 <ProcessAesDrv+0x354>
   2b4ec:	685b      	ldr	r3, [r3, #4]
   2b4ee:	f8ca 3000 	str.w	r3, [sl]
   2b4f2:	f8d8 3000 	ldr.w	r3, [r8]
   2b4f6:	4a2c      	ldr	r2, [pc, #176]	; (2b5a8 <ProcessAesDrv+0x32c>)
   2b4f8:	689b      	ldr	r3, [r3, #8]
   2b4fa:	f8c9 3000 	str.w	r3, [r9]
   2b4fe:	f8d8 3000 	ldr.w	r3, [r8]
   2b502:	68db      	ldr	r3, [r3, #12]
   2b504:	6013      	str	r3, [r2, #0]
   2b506:	6b21      	ldr	r1, [r4, #48]	; 0x30
   2b508:	b171      	cbz	r1, 2b528 <ProcessAesDrv+0x2ac>
   2b50a:	f04f 0801 	mov.w	r8, #1
   2b50e:	e6d2      	b.n	2b2b6 <ProcessAesDrv+0x3a>
   2b510:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 2b5d4 <ProcessAesDrv+0x358>
   2b514:	e6eb      	b.n	2b2ee <ProcessAesDrv+0x72>
   2b516:	f44f 0971 	mov.w	r9, #15794176	; 0xf10000
   2b51a:	e70f      	b.n	2b33c <ProcessAesDrv+0xc0>
   2b51c:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b51e:	2b01      	cmp	r3, #1
   2b520:	bf0c      	ite	eq
   2b522:	2040      	moveq	r0, #64	; 0x40
   2b524:	2010      	movne	r0, #16
   2b526:	e789      	b.n	2b43c <ProcessAesDrv+0x1c0>
   2b528:	f104 0310 	add.w	r3, r4, #16
   2b52c:	4618      	mov	r0, r3
   2b52e:	9305      	str	r3, [sp, #20]
   2b530:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	; 0x4c
   2b534:	e9cd 3200 	strd	r3, r2, [sp]
   2b538:	9002      	str	r0, [sp, #8]
   2b53a:	2010      	movs	r0, #16
   2b53c:	9003      	str	r0, [sp, #12]
   2b53e:	e9d4 2311 	ldrd	r2, r3, [r4, #68]	; 0x44
   2b542:	6c20      	ldr	r0, [r4, #64]	; 0x40
   2b544:	f000 f9ae 	bl	2b8a4 <kmu_derive_cmac>
   2b548:	2800      	cmp	r0, #0
   2b54a:	d148      	bne.n	2b5de <ProcessAesDrv+0x362>
   2b54c:	2300      	movs	r3, #0
   2b54e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
   2b552:	e7da      	b.n	2b50a <ProcessAesDrv+0x28e>
   2b554:	4b15      	ldr	r3, [pc, #84]	; (2b5ac <ProcessAesDrv+0x330>)
   2b556:	e746      	b.n	2b3e6 <ProcessAesDrv+0x16a>
   2b558:	4a14      	ldr	r2, [pc, #80]	; (2b5ac <ProcessAesDrv+0x330>)
   2b55a:	4b15      	ldr	r3, [pc, #84]	; (2b5b0 <ProcessAesDrv+0x334>)
   2b55c:	e785      	b.n	2b46a <ProcessAesDrv+0x1ee>
   2b55e:	bf00      	nop
   2b560:	200006c8 	.word	0x200006c8
   2b564:	5002b810 	.word	0x5002b810
   2b568:	5002b910 	.word	0x5002b910
   2b56c:	5002ba04 	.word	0x5002ba04
   2b570:	5002b440 	.word	0x5002b440
   2b574:	5002bd28 	.word	0x5002bd28
   2b578:	5002bd2c 	.word	0x5002bd2c
   2b57c:	5002bd30 	.word	0x5002bd30
   2b580:	5002bd34 	.word	0x5002bd34
   2b584:	5002bc2c 	.word	0x5002bc2c
   2b588:	5002bc34 	.word	0x5002bc34
   2b58c:	5002bc28 	.word	0x5002bc28
   2b590:	5002bc30 	.word	0x5002bc30
   2b594:	5002b444 	.word	0x5002b444
   2b598:	00031f5c 	.word	0x00031f5c
   2b59c:	00031f74 	.word	0x00031f74
   2b5a0:	00031fb4 	.word	0x00031fb4
   2b5a4:	00031f94 	.word	0x00031f94
   2b5a8:	5002b40c 	.word	0x5002b40c
   2b5ac:	5002b460 	.word	0x5002b460
   2b5b0:	5002b464 	.word	0x5002b464
   2b5b4:	00f10001 	.word	0x00f10001
   2b5b8:	00f10005 	.word	0x00f10005
   2b5bc:	00f1000b 	.word	0x00f1000b
   2b5c0:	00f10003 	.word	0x00f10003
   2b5c4:	200006b8 	.word	0x200006b8
   2b5c8:	5002b400 	.word	0x5002b400
   2b5cc:	5002b404 	.word	0x5002b404
   2b5d0:	5002b408 	.word	0x5002b408
   2b5d4:	00f10002 	.word	0x00f10002
   2b5d8:	f8df 9038 	ldr.w	r9, [pc, #56]	; 2b614 <ProcessAesDrv+0x398>
   2b5dc:	e687      	b.n	2b2ee <ProcessAesDrv+0x72>
   2b5de:	f8d8 3000 	ldr.w	r3, [r8]
   2b5e2:	4a0b      	ldr	r2, [pc, #44]	; (2b610 <ProcessAesDrv+0x394>)
   2b5e4:	681b      	ldr	r3, [r3, #0]
   2b5e6:	f8cb 3000 	str.w	r3, [fp]
   2b5ea:	f8d8 3000 	ldr.w	r3, [r8]
   2b5ee:	685b      	ldr	r3, [r3, #4]
   2b5f0:	f8ca 3000 	str.w	r3, [sl]
   2b5f4:	f8d8 3000 	ldr.w	r3, [r8]
   2b5f8:	689b      	ldr	r3, [r3, #8]
   2b5fa:	f8c9 3000 	str.w	r3, [r9]
   2b5fe:	f8d8 3000 	ldr.w	r3, [r8]
   2b602:	68db      	ldr	r3, [r3, #12]
   2b604:	6013      	str	r3, [r2, #0]
   2b606:	9805      	ldr	r0, [sp, #20]
   2b608:	2110      	movs	r1, #16
   2b60a:	f7ff faff 	bl	2ac0c <CC_PalMemSetZeroPlat>
   2b60e:	e79d      	b.n	2b54c <ProcessAesDrv+0x2d0>
   2b610:	5002b40c 	.word	0x5002b40c
   2b614:	00f10004 	.word	0x00f10004

0002b618 <FinishAesDrv>:
   2b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b61c:	b301      	cbz	r1, 2b660 <FinishAesDrv+0x48>
   2b61e:	b1fa      	cbz	r2, 2b660 <FinishAesDrv+0x48>
   2b620:	4604      	mov	r4, r0
   2b622:	2800      	cmp	r0, #0
   2b624:	d07a      	beq.n	2b71c <FinishAesDrv+0x104>
   2b626:	461d      	mov	r5, r3
   2b628:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2b62a:	2b07      	cmp	r3, #7
   2b62c:	460e      	mov	r6, r1
   2b62e:	d01b      	beq.n	2b668 <FinishAesDrv+0x50>
   2b630:	b95d      	cbnz	r5, 2b64a <FinishAesDrv+0x32>
   2b632:	2b03      	cmp	r3, #3
   2b634:	d110      	bne.n	2b658 <FinishAesDrv+0x40>
   2b636:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2b638:	b973      	cbnz	r3, 2b658 <FinishAesDrv+0x40>
   2b63a:	f100 0364 	add.w	r3, r0, #100	; 0x64
   2b63e:	e9c0 5519 	strd	r5, r5, [r0, #100]	; 0x64
   2b642:	e9c0 551b 	strd	r5, r5, [r0, #108]	; 0x6c
   2b646:	600b      	str	r3, [r1, #0]
   2b648:	2510      	movs	r5, #16
   2b64a:	462b      	mov	r3, r5
   2b64c:	4631      	mov	r1, r6
   2b64e:	4620      	mov	r0, r4
   2b650:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2b654:	f7ff be12 	b.w	2b27c <ProcessAesDrv>
   2b658:	462f      	mov	r7, r5
   2b65a:	4638      	mov	r0, r7
   2b65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b660:	4f66      	ldr	r7, [pc, #408]	; (2b7fc <FinishAesDrv+0x1e4>)
   2b662:	4638      	mov	r0, r7
   2b664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2b668:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
   2b66a:	2b00      	cmp	r3, #0
   2b66c:	d159      	bne.n	2b722 <FinishAesDrv+0x10a>
   2b66e:	f5b5 5f80 	cmp.w	r5, #4096	; 0x1000
   2b672:	d25b      	bcs.n	2b72c <FinishAesDrv+0x114>
   2b674:	b915      	cbnz	r5, 2b67c <FinishAesDrv+0x64>
   2b676:	6da3      	ldr	r3, [r4, #88]	; 0x58
   2b678:	2b00      	cmp	r3, #0
   2b67a:	d157      	bne.n	2b72c <FinishAesDrv+0x114>
   2b67c:	4860      	ldr	r0, [pc, #384]	; (2b800 <FinishAesDrv+0x1e8>)
   2b67e:	f04f 31ff 	mov.w	r1, #4294967295
   2b682:	f7fe fd09 	bl	2a098 <CC_PalMutexLock>
   2b686:	2800      	cmp	r0, #0
   2b688:	f040 8097 	bne.w	2b7ba <FinishAesDrv+0x1a2>
   2b68c:	2000      	movs	r0, #0
   2b68e:	f7fe fd33 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2b692:	2800      	cmp	r0, #0
   2b694:	f040 808d 	bne.w	2b7b2 <FinishAesDrv+0x19a>
   2b698:	4b5a      	ldr	r3, [pc, #360]	; (2b804 <FinishAesDrv+0x1ec>)
   2b69a:	4a5b      	ldr	r2, [pc, #364]	; (2b808 <FinishAesDrv+0x1f0>)
   2b69c:	2101      	movs	r1, #1
   2b69e:	6019      	str	r1, [r3, #0]
   2b6a0:	6813      	ldr	r3, [r2, #0]
   2b6a2:	2b00      	cmp	r3, #0
   2b6a4:	d1fc      	bne.n	2b6a0 <FinishAesDrv+0x88>
   2b6a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b6a8:	2b03      	cmp	r3, #3
   2b6aa:	dd20      	ble.n	2b6ee <FinishAesDrv+0xd6>
   2b6ac:	3b06      	subs	r3, #6
   2b6ae:	2b01      	cmp	r3, #1
   2b6b0:	d81f      	bhi.n	2b6f2 <FinishAesDrv+0xda>
   2b6b2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2b6b4:	2b01      	cmp	r3, #1
   2b6b6:	d83b      	bhi.n	2b730 <FinishAesDrv+0x118>
   2b6b8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   2b6ba:	2b01      	cmp	r3, #1
   2b6bc:	f200 8085 	bhi.w	2b7ca <FinishAesDrv+0x1b2>
   2b6c0:	6e23      	ldr	r3, [r4, #96]	; 0x60
   2b6c2:	2b01      	cmp	r3, #1
   2b6c4:	f200 8083 	bhi.w	2b7ce <FinishAesDrv+0x1b6>
   2b6c8:	4620      	mov	r0, r4
   2b6ca:	f7ff fd5b 	bl	2b184 <InitAes.part.0>
   2b6ce:	4607      	mov	r7, r0
   2b6d0:	b980      	cbnz	r0, 2b6f4 <FinishAesDrv+0xdc>
   2b6d2:	4620      	mov	r0, r4
   2b6d4:	f7ff fd0c 	bl	2b0f0 <LoadAesKey>
   2b6d8:	4607      	mov	r7, r0
   2b6da:	b958      	cbnz	r0, 2b6f4 <FinishAesDrv+0xdc>
   2b6dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b6de:	2b07      	cmp	r3, #7
   2b6e0:	d807      	bhi.n	2b6f2 <FinishAesDrv+0xda>
   2b6e2:	e8df f003 	tbb	[pc, r3]
   2b6e6:	2730      	.short	0x2730
   2b6e8:	06062755 	.word	0x06062755
   2b6ec:	2755      	.short	0x2755
   2b6ee:	2b00      	cmp	r3, #0
   2b6f0:	dadf      	bge.n	2b6b2 <FinishAesDrv+0x9a>
   2b6f2:	4f46      	ldr	r7, [pc, #280]	; (2b80c <FinishAesDrv+0x1f4>)
   2b6f4:	4a44      	ldr	r2, [pc, #272]	; (2b808 <FinishAesDrv+0x1f0>)
   2b6f6:	6813      	ldr	r3, [r2, #0]
   2b6f8:	2b00      	cmp	r3, #0
   2b6fa:	d1fc      	bne.n	2b6f6 <FinishAesDrv+0xde>
   2b6fc:	4a41      	ldr	r2, [pc, #260]	; (2b804 <FinishAesDrv+0x1ec>)
   2b6fe:	2001      	movs	r0, #1
   2b700:	6013      	str	r3, [r2, #0]
   2b702:	f7fe fcf9 	bl	2a0f8 <CC_PalPowerSaveModeSelect>
   2b706:	2800      	cmp	r0, #0
   2b708:	d15b      	bne.n	2b7c2 <FinishAesDrv+0x1aa>
   2b70a:	483d      	ldr	r0, [pc, #244]	; (2b800 <FinishAesDrv+0x1e8>)
   2b70c:	f7fe fccc 	bl	2a0a8 <CC_PalMutexUnlock>
   2b710:	2800      	cmp	r0, #0
   2b712:	d0a2      	beq.n	2b65a <FinishAesDrv+0x42>
   2b714:	483e      	ldr	r0, [pc, #248]	; (2b810 <FinishAesDrv+0x1f8>)
   2b716:	f7fd fd73 	bl	29200 <CC_PalAbort>
   2b71a:	e79e      	b.n	2b65a <FinishAesDrv+0x42>
   2b71c:	f44f 0771 	mov.w	r7, #15794176	; 0xf10000
   2b720:	e79b      	b.n	2b65a <FinishAesDrv+0x42>
   2b722:	2b01      	cmp	r3, #1
   2b724:	d1a6      	bne.n	2b674 <FinishAesDrv+0x5c>
   2b726:	f5b5 3f80 	cmp.w	r5, #65536	; 0x10000
   2b72a:	d3a3      	bcc.n	2b674 <FinishAesDrv+0x5c>
   2b72c:	4f39      	ldr	r7, [pc, #228]	; (2b814 <FinishAesDrv+0x1fc>)
   2b72e:	e794      	b.n	2b65a <FinishAesDrv+0x42>
   2b730:	4f39      	ldr	r7, [pc, #228]	; (2b818 <FinishAesDrv+0x200>)
   2b732:	e7df      	b.n	2b6f4 <FinishAesDrv+0xdc>
   2b734:	4b39      	ldr	r3, [pc, #228]	; (2b81c <FinishAesDrv+0x204>)
   2b736:	6822      	ldr	r2, [r4, #0]
   2b738:	601a      	str	r2, [r3, #0]
   2b73a:	6862      	ldr	r2, [r4, #4]
   2b73c:	605a      	str	r2, [r3, #4]
   2b73e:	68a2      	ldr	r2, [r4, #8]
   2b740:	609a      	str	r2, [r3, #8]
   2b742:	68e2      	ldr	r2, [r4, #12]
   2b744:	60da      	str	r2, [r3, #12]
   2b746:	4936      	ldr	r1, [pc, #216]	; (2b820 <FinishAesDrv+0x208>)
   2b748:	4a36      	ldr	r2, [pc, #216]	; (2b824 <FinishAesDrv+0x20c>)
   2b74a:	2301      	movs	r3, #1
   2b74c:	600b      	str	r3, [r1, #0]
   2b74e:	6015      	str	r5, [r2, #0]
   2b750:	2d00      	cmp	r5, #0
   2b752:	d13e      	bne.n	2b7d2 <FinishAesDrv+0x1ba>
   2b754:	6da2      	ldr	r2, [r4, #88]	; 0x58
   2b756:	b90a      	cbnz	r2, 2b75c <FinishAesDrv+0x144>
   2b758:	4a33      	ldr	r2, [pc, #204]	; (2b828 <FinishAesDrv+0x210>)
   2b75a:	6013      	str	r3, [r2, #0]
   2b75c:	4b2a      	ldr	r3, [pc, #168]	; (2b808 <FinishAesDrv+0x1f0>)
   2b75e:	681f      	ldr	r7, [r3, #0]
   2b760:	2f00      	cmp	r7, #0
   2b762:	d1fc      	bne.n	2b75e <FinishAesDrv+0x146>
   2b764:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2b766:	3b01      	subs	r3, #1
   2b768:	2b06      	cmp	r3, #6
   2b76a:	d8c3      	bhi.n	2b6f4 <FinishAesDrv+0xdc>
   2b76c:	a201      	add	r2, pc, #4	; (adr r2, 2b774 <FinishAesDrv+0x15c>)
   2b76e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   2b772:	bf00      	nop
   2b774:	0002b795 	.word	0x0002b795
   2b778:	0002b7ad 	.word	0x0002b7ad
   2b77c:	0002b795 	.word	0x0002b795
   2b780:	0002b6f5 	.word	0x0002b6f5
   2b784:	0002b6f5 	.word	0x0002b6f5
   2b788:	0002b7ad 	.word	0x0002b7ad
   2b78c:	0002b795 	.word	0x0002b795
   2b790:	4b26      	ldr	r3, [pc, #152]	; (2b82c <FinishAesDrv+0x214>)
   2b792:	e7d0      	b.n	2b736 <FinishAesDrv+0x11e>
   2b794:	4a21      	ldr	r2, [pc, #132]	; (2b81c <FinishAesDrv+0x204>)
   2b796:	4b26      	ldr	r3, [pc, #152]	; (2b830 <FinishAesDrv+0x218>)
   2b798:	6812      	ldr	r2, [r2, #0]
   2b79a:	6022      	str	r2, [r4, #0]
   2b79c:	681a      	ldr	r2, [r3, #0]
   2b79e:	6062      	str	r2, [r4, #4]
   2b7a0:	685a      	ldr	r2, [r3, #4]
   2b7a2:	60a2      	str	r2, [r4, #8]
   2b7a4:	3308      	adds	r3, #8
   2b7a6:	681b      	ldr	r3, [r3, #0]
   2b7a8:	60e3      	str	r3, [r4, #12]
   2b7aa:	e7a3      	b.n	2b6f4 <FinishAesDrv+0xdc>
   2b7ac:	4a1f      	ldr	r2, [pc, #124]	; (2b82c <FinishAesDrv+0x214>)
   2b7ae:	4b21      	ldr	r3, [pc, #132]	; (2b834 <FinishAesDrv+0x21c>)
   2b7b0:	e7f2      	b.n	2b798 <FinishAesDrv+0x180>
   2b7b2:	4821      	ldr	r0, [pc, #132]	; (2b838 <FinishAesDrv+0x220>)
   2b7b4:	f7fd fd24 	bl	29200 <CC_PalAbort>
   2b7b8:	e76e      	b.n	2b698 <FinishAesDrv+0x80>
   2b7ba:	4820      	ldr	r0, [pc, #128]	; (2b83c <FinishAesDrv+0x224>)
   2b7bc:	f7fd fd20 	bl	29200 <CC_PalAbort>
   2b7c0:	e764      	b.n	2b68c <FinishAesDrv+0x74>
   2b7c2:	481f      	ldr	r0, [pc, #124]	; (2b840 <FinishAesDrv+0x228>)
   2b7c4:	f7fd fd1c 	bl	29200 <CC_PalAbort>
   2b7c8:	e79f      	b.n	2b70a <FinishAesDrv+0xf2>
   2b7ca:	4f1e      	ldr	r7, [pc, #120]	; (2b844 <FinishAesDrv+0x22c>)
   2b7cc:	e792      	b.n	2b6f4 <FinishAesDrv+0xdc>
   2b7ce:	4f1e      	ldr	r7, [pc, #120]	; (2b848 <FinishAesDrv+0x230>)
   2b7d0:	e790      	b.n	2b6f4 <FinishAesDrv+0xdc>
   2b7d2:	6de2      	ldr	r2, [r4, #92]	; 0x5c
   2b7d4:	6833      	ldr	r3, [r6, #0]
   2b7d6:	2a01      	cmp	r2, #1
   2b7d8:	d00a      	beq.n	2b7f0 <FinishAesDrv+0x1d8>
   2b7da:	491c      	ldr	r1, [pc, #112]	; (2b84c <FinishAesDrv+0x234>)
   2b7dc:	4a1c      	ldr	r2, [pc, #112]	; (2b850 <FinishAesDrv+0x238>)
   2b7de:	600b      	str	r3, [r1, #0]
   2b7e0:	2010      	movs	r0, #16
   2b7e2:	6015      	str	r5, [r2, #0]
   2b7e4:	f7fe fbc4 	bl	29f70 <CC_HalWaitInterrupt>
   2b7e8:	4607      	mov	r7, r0
   2b7ea:	2800      	cmp	r0, #0
   2b7ec:	d0b6      	beq.n	2b75c <FinishAesDrv+0x144>
   2b7ee:	e781      	b.n	2b6f4 <FinishAesDrv+0xdc>
   2b7f0:	4918      	ldr	r1, [pc, #96]	; (2b854 <FinishAesDrv+0x23c>)
   2b7f2:	4a19      	ldr	r2, [pc, #100]	; (2b858 <FinishAesDrv+0x240>)
   2b7f4:	600b      	str	r3, [r1, #0]
   2b7f6:	2040      	movs	r0, #64	; 0x40
   2b7f8:	6015      	str	r5, [r2, #0]
   2b7fa:	e7f3      	b.n	2b7e4 <FinishAesDrv+0x1cc>
   2b7fc:	00f1000b 	.word	0x00f1000b
   2b800:	200006c8 	.word	0x200006c8
   2b804:	5002b810 	.word	0x5002b810
   2b808:	5002b910 	.word	0x5002b910
   2b80c:	00f10001 	.word	0x00f10001
   2b810:	00031fb4 	.word	0x00031fb4
   2b814:	00f10005 	.word	0x00f10005
   2b818:	00f10002 	.word	0x00f10002
   2b81c:	5002b440 	.word	0x5002b440
   2b820:	5002b47c 	.word	0x5002b47c
   2b824:	5002b4bc 	.word	0x5002b4bc
   2b828:	5002b524 	.word	0x5002b524
   2b82c:	5002b460 	.word	0x5002b460
   2b830:	5002b444 	.word	0x5002b444
   2b834:	5002b464 	.word	0x5002b464
   2b838:	00031f74 	.word	0x00031f74
   2b83c:	00031f5c 	.word	0x00031f5c
   2b840:	00031f94 	.word	0x00031f94
   2b844:	00f10003 	.word	0x00f10003
   2b848:	00f10004 	.word	0x00f10004
   2b84c:	5002bc30 	.word	0x5002bc30
   2b850:	5002bc34 	.word	0x5002bc34
   2b854:	5002bc28 	.word	0x5002bc28
   2b858:	5002bc2c 	.word	0x5002bc2c

0002b85c <kmu_validate_slot_and_size>:
   2b85c:	b921      	cbnz	r1, 2b868 <kmu_validate_slot_and_size+0xc>
   2b85e:	4b03      	ldr	r3, [pc, #12]	; (2b86c <kmu_validate_slot_and_size+0x10>)
   2b860:	2800      	cmp	r0, #0
   2b862:	bf18      	it	ne
   2b864:	4618      	movne	r0, r3
   2b866:	4770      	bx	lr
   2b868:	4801      	ldr	r0, [pc, #4]	; (2b870 <kmu_validate_slot_and_size+0x14>)
   2b86a:	4770      	bx	lr
   2b86c:	00f70001 	.word	0x00f70001
   2b870:	00f70003 	.word	0x00f70003

0002b874 <kmu_validate_kdr_slot_and_size>:
   2b874:	b921      	cbnz	r1, 2b880 <kmu_validate_kdr_slot_and_size+0xc>
   2b876:	4b03      	ldr	r3, [pc, #12]	; (2b884 <kmu_validate_kdr_slot_and_size+0x10>)
   2b878:	2800      	cmp	r0, #0
   2b87a:	bf18      	it	ne
   2b87c:	4618      	movne	r0, r3
   2b87e:	4770      	bx	lr
   2b880:	4801      	ldr	r0, [pc, #4]	; (2b888 <kmu_validate_kdr_slot_and_size+0x14>)
   2b882:	4770      	bx	lr
   2b884:	00f70001 	.word	0x00f70001
   2b888:	00f70003 	.word	0x00f70003

0002b88c <kmu_use_kdr_key>:
   2b88c:	4903      	ldr	r1, [pc, #12]	; (2b89c <kmu_use_kdr_key+0x10>)
   2b88e:	4b04      	ldr	r3, [pc, #16]	; (2b8a0 <kmu_use_kdr_key+0x14>)
   2b890:	2000      	movs	r0, #0
   2b892:	2201      	movs	r2, #1
   2b894:	6008      	str	r0, [r1, #0]
   2b896:	601a      	str	r2, [r3, #0]
   2b898:	4770      	bx	lr
   2b89a:	bf00      	nop
   2b89c:	5002ba38 	.word	0x5002ba38
   2b8a0:	5002b478 	.word	0x5002b478

0002b8a4 <kmu_derive_cmac>:
   2b8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b8a8:	b0cd      	sub	sp, #308	; 0x134
   2b8aa:	e9dd 8558 	ldrd	r8, r5, [sp, #352]	; 0x160
   2b8ae:	460f      	mov	r7, r1
   2b8b0:	2100      	movs	r1, #0
   2b8b2:	460c      	mov	r4, r1
   2b8b4:	4681      	mov	r9, r0
   2b8b6:	4616      	mov	r6, r2
   2b8b8:	a80e      	add	r0, sp, #56	; 0x38
   2b8ba:	2274      	movs	r2, #116	; 0x74
   2b8bc:	469b      	mov	fp, r3
   2b8be:	f004 feb4 	bl	3062a <memset>
   2b8c2:	4621      	mov	r1, r4
   2b8c4:	2280      	movs	r2, #128	; 0x80
   2b8c6:	a82c      	add	r0, sp, #176	; 0xb0
   2b8c8:	942b      	str	r4, [sp, #172]	; 0xac
   2b8ca:	f004 feae 	bl	3062a <memset>
   2b8ce:	2384      	movs	r3, #132	; 0x84
   2b8d0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2b8d4:	e9cd 440a 	strd	r4, r4, [sp, #40]	; 0x28
   2b8d8:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
   2b8dc:	9305      	str	r3, [sp, #20]
   2b8de:	d860      	bhi.n	2b9a2 <kmu_derive_cmac+0xfe>
   2b8e0:	ab05      	add	r3, sp, #20
   2b8e2:	f10d 0aac 	add.w	sl, sp, #172	; 0xac
   2b8e6:	9301      	str	r3, [sp, #4]
   2b8e8:	9502      	str	r5, [sp, #8]
   2b8ea:	e9dd 2356 	ldrd	r2, r3, [sp, #344]	; 0x158
   2b8ee:	4659      	mov	r1, fp
   2b8f0:	4630      	mov	r0, r6
   2b8f2:	f8cd a000 	str.w	sl, [sp]
   2b8f6:	f000 f865 	bl	2b9c4 <UtilCmacBuildDataForDerivation>
   2b8fa:	2800      	cmp	r0, #0
   2b8fc:	d14c      	bne.n	2b998 <kmu_derive_cmac+0xf4>
   2b8fe:	2303      	movs	r3, #3
   2b900:	f88d 3013 	strb.w	r3, [sp, #19]
   2b904:	f89d 3013 	ldrb.w	r3, [sp, #19]
   2b908:	901c      	str	r0, [sp, #112]	; 0x70
   2b90a:	2200      	movs	r2, #0
   2b90c:	2110      	movs	r1, #16
   2b90e:	a80e      	add	r0, sp, #56	; 0x38
   2b910:	f88d 3074 	strb.w	r3, [sp, #116]	; 0x74
   2b914:	2607      	movs	r6, #7
   2b916:	2301      	movs	r3, #1
   2b918:	2401      	movs	r4, #1
   2b91a:	e9cd 2324 	strd	r2, r3, [sp, #144]	; 0x90
   2b91e:	f8cd 9078 	str.w	r9, [sp, #120]	; 0x78
   2b922:	971a      	str	r7, [sp, #104]	; 0x68
   2b924:	961b      	str	r6, [sp, #108]	; 0x6c
   2b926:	9426      	str	r4, [sp, #152]	; 0x98
   2b928:	f10d 0920 	add.w	r9, sp, #32
   2b92c:	f7ff f96e 	bl	2ac0c <CC_PalMemSetZeroPlat>
   2b930:	2110      	movs	r1, #16
   2b932:	e9cd 1900 	strd	r1, r9, [sp]
   2b936:	ab0a      	add	r3, sp, #40	; 0x28
   2b938:	9905      	ldr	r1, [sp, #20]
   2b93a:	4650      	mov	r0, sl
   2b93c:	aa06      	add	r2, sp, #24
   2b93e:	f7ff fa09 	bl	2ad54 <SetDataBuffersInfo>
   2b942:	4607      	mov	r7, r0
   2b944:	b150      	cbz	r0, 2b95c <kmu_derive_cmac+0xb8>
   2b946:	e01e      	b.n	2b986 <kmu_derive_cmac+0xe2>
   2b948:	f7ff f95c 	bl	2ac04 <CC_PalMemCopyPlat>
   2b94c:	2110      	movs	r1, #16
   2b94e:	a80e      	add	r0, sp, #56	; 0x38
   2b950:	f7ff f95c 	bl	2ac0c <CC_PalMemSetZeroPlat>
   2b954:	3401      	adds	r4, #1
   2b956:	1bad      	subs	r5, r5, r6
   2b958:	b2e4      	uxtb	r4, r4
   2b95a:	d027      	beq.n	2b9ac <kmu_derive_cmac+0x108>
   2b95c:	9b05      	ldr	r3, [sp, #20]
   2b95e:	f88d 40ac 	strb.w	r4, [sp, #172]	; 0xac
   2b962:	2d10      	cmp	r5, #16
   2b964:	464a      	mov	r2, r9
   2b966:	a906      	add	r1, sp, #24
   2b968:	a80e      	add	r0, sp, #56	; 0x38
   2b96a:	462e      	mov	r6, r5
   2b96c:	bf28      	it	cs
   2b96e:	2610      	movcs	r6, #16
   2b970:	f7ff fe52 	bl	2b618 <FinishAesDrv>
   2b974:	4603      	mov	r3, r0
   2b976:	4632      	mov	r2, r6
   2b978:	eb08 0007 	add.w	r0, r8, r7
   2b97c:	a90e      	add	r1, sp, #56	; 0x38
   2b97e:	4437      	add	r7, r6
   2b980:	2b00      	cmp	r3, #0
   2b982:	d0e1      	beq.n	2b948 <kmu_derive_cmac+0xa4>
   2b984:	461f      	mov	r7, r3
   2b986:	a80e      	add	r0, sp, #56	; 0x38
   2b988:	2274      	movs	r2, #116	; 0x74
   2b98a:	2100      	movs	r1, #0
   2b98c:	f7ff f93c 	bl	2ac08 <CC_PalMemSetPlat>
   2b990:	4638      	mov	r0, r7
   2b992:	b04d      	add	sp, #308	; 0x134
   2b994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b998:	4f08      	ldr	r7, [pc, #32]	; (2b9bc <kmu_derive_cmac+0x118>)
   2b99a:	4638      	mov	r0, r7
   2b99c:	b04d      	add	sp, #308	; 0x134
   2b99e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9a2:	4f07      	ldr	r7, [pc, #28]	; (2b9c0 <kmu_derive_cmac+0x11c>)
   2b9a4:	4638      	mov	r0, r7
   2b9a6:	b04d      	add	sp, #308	; 0x134
   2b9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b9ac:	a80e      	add	r0, sp, #56	; 0x38
   2b9ae:	2274      	movs	r2, #116	; 0x74
   2b9b0:	2100      	movs	r1, #0
   2b9b2:	462f      	mov	r7, r5
   2b9b4:	f7ff f928 	bl	2ac08 <CC_PalMemSetPlat>
   2b9b8:	e7ea      	b.n	2b990 <kmu_derive_cmac+0xec>
   2b9ba:	bf00      	nop
   2b9bc:	00f1000e 	.word	0x00f1000e
   2b9c0:	00f1000f 	.word	0x00f1000f

0002b9c4 <UtilCmacBuildDataForDerivation>:
   2b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2b9c8:	b082      	sub	sp, #8
   2b9ca:	2600      	movs	r6, #0
   2b9cc:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2b9ce:	9601      	str	r6, [sp, #4]
   2b9d0:	f5b5 6f7f 	cmp.w	r5, #4080	; 0xff0
   2b9d4:	d83c      	bhi.n	2ba50 <UtilCmacBuildDataForDerivation+0x8c>
   2b9d6:	00ee      	lsls	r6, r5, #3
   2b9d8:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   2b9dc:	f101 35ff 	add.w	r5, r1, #4294967295
   2b9e0:	461f      	mov	r7, r3
   2b9e2:	bf34      	ite	cc
   2b9e4:	2303      	movcc	r3, #3
   2b9e6:	2304      	movcs	r3, #4
   2b9e8:	2d3f      	cmp	r5, #63	; 0x3f
   2b9ea:	460c      	mov	r4, r1
   2b9ec:	9300      	str	r3, [sp, #0]
   2b9ee:	d82f      	bhi.n	2ba50 <UtilCmacBuildDataForDerivation+0x8c>
   2b9f0:	b370      	cbz	r0, 2ba50 <UtilCmacBuildDataForDerivation+0x8c>
   2b9f2:	4690      	mov	r8, r2
   2b9f4:	b117      	cbz	r7, 2b9fc <UtilCmacBuildDataForDerivation+0x38>
   2b9f6:	b35a      	cbz	r2, 2ba50 <UtilCmacBuildDataForDerivation+0x8c>
   2b9f8:	2f40      	cmp	r7, #64	; 0x40
   2b9fa:	d829      	bhi.n	2ba50 <UtilCmacBuildDataForDerivation+0x8c>
   2b9fc:	9a08      	ldr	r2, [sp, #32]
   2b9fe:	b33a      	cbz	r2, 2ba50 <UtilCmacBuildDataForDerivation+0x8c>
   2ba00:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2ba02:	6811      	ldr	r1, [r2, #0]
   2ba04:	b321      	cbz	r1, 2ba50 <UtilCmacBuildDataForDerivation+0x8c>
   2ba06:	19e2      	adds	r2, r4, r7
   2ba08:	4413      	add	r3, r2
   2ba0a:	4299      	cmp	r1, r3
   2ba0c:	d320      	bcc.n	2ba50 <UtilCmacBuildDataForDerivation+0x8c>
   2ba0e:	9b08      	ldr	r3, [sp, #32]
   2ba10:	4622      	mov	r2, r4
   2ba12:	4601      	mov	r1, r0
   2ba14:	1c58      	adds	r0, r3, #1
   2ba16:	f7ff f8f5 	bl	2ac04 <CC_PalMemCopyPlat>
   2ba1a:	9b08      	ldr	r3, [sp, #32]
   2ba1c:	4423      	add	r3, r4
   2ba1e:	2200      	movs	r2, #0
   2ba20:	3402      	adds	r4, #2
   2ba22:	705a      	strb	r2, [r3, #1]
   2ba24:	bb07      	cbnz	r7, 2ba68 <UtilCmacBuildDataForDerivation+0xa4>
   2ba26:	2eff      	cmp	r6, #255	; 0xff
   2ba28:	9600      	str	r6, [sp, #0]
   2ba2a:	d915      	bls.n	2ba58 <UtilCmacBuildDataForDerivation+0x94>
   2ba2c:	9b08      	ldr	r3, [sp, #32]
   2ba2e:	0235      	lsls	r5, r6, #8
   2ba30:	b2ad      	uxth	r5, r5
   2ba32:	1918      	adds	r0, r3, r4
   2ba34:	ea45 2516 	orr.w	r5, r5, r6, lsr #8
   2ba38:	2202      	movs	r2, #2
   2ba3a:	a901      	add	r1, sp, #4
   2ba3c:	9501      	str	r5, [sp, #4]
   2ba3e:	f7ff f8e1 	bl	2ac04 <CC_PalMemCopyPlat>
   2ba42:	3402      	adds	r4, #2
   2ba44:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2ba46:	2000      	movs	r0, #0
   2ba48:	601c      	str	r4, [r3, #0]
   2ba4a:	b002      	add	sp, #8
   2ba4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ba50:	4809      	ldr	r0, [pc, #36]	; (2ba78 <UtilCmacBuildDataForDerivation+0xb4>)
   2ba52:	b002      	add	sp, #8
   2ba54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2ba58:	9b08      	ldr	r3, [sp, #32]
   2ba5a:	2201      	movs	r2, #1
   2ba5c:	1918      	adds	r0, r3, r4
   2ba5e:	4669      	mov	r1, sp
   2ba60:	f7ff f8d0 	bl	2ac04 <CC_PalMemCopyPlat>
   2ba64:	3401      	adds	r4, #1
   2ba66:	e7ed      	b.n	2ba44 <UtilCmacBuildDataForDerivation+0x80>
   2ba68:	9b08      	ldr	r3, [sp, #32]
   2ba6a:	4641      	mov	r1, r8
   2ba6c:	1918      	adds	r0, r3, r4
   2ba6e:	463a      	mov	r2, r7
   2ba70:	f7ff f8c8 	bl	2ac04 <CC_PalMemCopyPlat>
   2ba74:	443c      	add	r4, r7
   2ba76:	e7d6      	b.n	2ba26 <UtilCmacBuildDataForDerivation+0x62>
   2ba78:	80000006 	.word	0x80000006

0002ba7c <CC_PalDataBufferAttrGet>:
   2ba7c:	2000      	movs	r0, #0
   2ba7e:	7018      	strb	r0, [r3, #0]
   2ba80:	4770      	bx	lr
   2ba82:	bf00      	nop

0002ba84 <gmtime_r>:
   2ba84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ba88:	e9d0 6700 	ldrd	r6, r7, [r0]
   2ba8c:	460c      	mov	r4, r1
   2ba8e:	4a51      	ldr	r2, [pc, #324]	; (2bbd4 <gmtime_r+0x150>)
   2ba90:	2300      	movs	r3, #0
   2ba92:	4630      	mov	r0, r6
   2ba94:	4639      	mov	r1, r7
   2ba96:	f7d5 fb83 	bl	11a0 <__aeabi_ldivmod>
   2ba9a:	4639      	mov	r1, r7
   2ba9c:	4605      	mov	r5, r0
   2ba9e:	4a4d      	ldr	r2, [pc, #308]	; (2bbd4 <gmtime_r+0x150>)
   2baa0:	4630      	mov	r0, r6
   2baa2:	2300      	movs	r3, #0
   2baa4:	f7d5 fb7c 	bl	11a0 <__aeabi_ldivmod>
   2baa8:	2a00      	cmp	r2, #0
   2baaa:	bfbc      	itt	lt
   2baac:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   2bab0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   2bab4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   2bab8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   2babc:	fbb2 f3f1 	udiv	r3, r2, r1
   2bac0:	fb01 2213 	mls	r2, r1, r3, r2
   2bac4:	f04f 013c 	mov.w	r1, #60	; 0x3c
   2bac8:	bfac      	ite	ge
   2baca:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   2bace:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   2bad2:	60a3      	str	r3, [r4, #8]
   2bad4:	fbb2 f3f1 	udiv	r3, r2, r1
   2bad8:	fb01 2213 	mls	r2, r1, r3, r2
   2badc:	6063      	str	r3, [r4, #4]
   2bade:	6022      	str	r2, [r4, #0]
   2bae0:	1cc3      	adds	r3, r0, #3
   2bae2:	2207      	movs	r2, #7
   2bae4:	fb93 f2f2 	sdiv	r2, r3, r2
   2bae8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   2baec:	1a9b      	subs	r3, r3, r2
   2baee:	bf48      	it	mi
   2baf0:	3307      	addmi	r3, #7
   2baf2:	2800      	cmp	r0, #0
   2baf4:	61a3      	str	r3, [r4, #24]
   2baf6:	bfb8      	it	lt
   2baf8:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   2bafc:	4936      	ldr	r1, [pc, #216]	; (2bbd8 <gmtime_r+0x154>)
   2bafe:	bfae      	itee	ge
   2bb00:	fb90 f1f1 	sdivge	r1, r0, r1
   2bb04:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   2bb08:	fb93 f1f1 	sdivlt	r1, r3, r1
   2bb0c:	4b33      	ldr	r3, [pc, #204]	; (2bbdc <gmtime_r+0x158>)
   2bb0e:	fb03 0001 	mla	r0, r3, r1, r0
   2bb12:	f648 62ac 	movw	r2, #36524	; 0x8eac
   2bb16:	fbb0 f2f2 	udiv	r2, r0, r2
   2bb1a:	4402      	add	r2, r0
   2bb1c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   2bb20:	fbb0 f3fc 	udiv	r3, r0, ip
   2bb24:	1ad2      	subs	r2, r2, r3
   2bb26:	f240 176d 	movw	r7, #365	; 0x16d
   2bb2a:	4b2d      	ldr	r3, [pc, #180]	; (2bbe0 <gmtime_r+0x15c>)
   2bb2c:	fbb0 f3f3 	udiv	r3, r0, r3
   2bb30:	2664      	movs	r6, #100	; 0x64
   2bb32:	1ad3      	subs	r3, r2, r3
   2bb34:	fbb3 f5f7 	udiv	r5, r3, r7
   2bb38:	fbb3 f3fc 	udiv	r3, r3, ip
   2bb3c:	fbb5 f2f6 	udiv	r2, r5, r6
   2bb40:	1ad3      	subs	r3, r2, r3
   2bb42:	4403      	add	r3, r0
   2bb44:	fb07 3315 	mls	r3, r7, r5, r3
   2bb48:	2099      	movs	r0, #153	; 0x99
   2bb4a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   2bb4e:	f10c 0c02 	add.w	ip, ip, #2
   2bb52:	f103 0e01 	add.w	lr, r3, #1
   2bb56:	fbbc f7f0 	udiv	r7, ip, r0
   2bb5a:	4378      	muls	r0, r7
   2bb5c:	3002      	adds	r0, #2
   2bb5e:	f04f 0805 	mov.w	r8, #5
   2bb62:	fbb0 f0f8 	udiv	r0, r0, r8
   2bb66:	ebae 0000 	sub.w	r0, lr, r0
   2bb6a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   2bb6e:	45f4      	cmp	ip, lr
   2bb70:	bf94      	ite	ls
   2bb72:	f04f 0c02 	movls.w	ip, #2
   2bb76:	f06f 0c09 	mvnhi.w	ip, #9
   2bb7a:	4467      	add	r7, ip
   2bb7c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   2bb80:	fb0c 5101 	mla	r1, ip, r1, r5
   2bb84:	2f01      	cmp	r7, #1
   2bb86:	bf98      	it	ls
   2bb88:	3101      	addls	r1, #1
   2bb8a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   2bb8e:	d30c      	bcc.n	2bbaa <gmtime_r+0x126>
   2bb90:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   2bb94:	61e3      	str	r3, [r4, #28]
   2bb96:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   2bb9a:	2300      	movs	r3, #0
   2bb9c:	60e0      	str	r0, [r4, #12]
   2bb9e:	e9c4 7104 	strd	r7, r1, [r4, #16]
   2bba2:	6223      	str	r3, [r4, #32]
   2bba4:	4620      	mov	r0, r4
   2bba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2bbaa:	f015 0f03 	tst.w	r5, #3
   2bbae:	d102      	bne.n	2bbb6 <gmtime_r+0x132>
   2bbb0:	fb06 5212 	mls	r2, r6, r2, r5
   2bbb4:	b95a      	cbnz	r2, 2bbce <gmtime_r+0x14a>
   2bbb6:	f44f 76c8 	mov.w	r6, #400	; 0x190
   2bbba:	fbb5 f2f6 	udiv	r2, r5, r6
   2bbbe:	fb06 5212 	mls	r2, r6, r2, r5
   2bbc2:	fab2 f282 	clz	r2, r2
   2bbc6:	0952      	lsrs	r2, r2, #5
   2bbc8:	333b      	adds	r3, #59	; 0x3b
   2bbca:	4413      	add	r3, r2
   2bbcc:	e7e2      	b.n	2bb94 <gmtime_r+0x110>
   2bbce:	2201      	movs	r2, #1
   2bbd0:	e7fa      	b.n	2bbc8 <gmtime_r+0x144>
   2bbd2:	bf00      	nop
   2bbd4:	00015180 	.word	0x00015180
   2bbd8:	00023ab1 	.word	0x00023ab1
   2bbdc:	fffdc54f 	.word	0xfffdc54f
   2bbe0:	00023ab0 	.word	0x00023ab0

0002bbe4 <_free_r>:
   2bbe4:	b538      	push	{r3, r4, r5, lr}
   2bbe6:	4605      	mov	r5, r0
   2bbe8:	2900      	cmp	r1, #0
   2bbea:	d045      	beq.n	2bc78 <_free_r+0x94>
   2bbec:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2bbf0:	1f0c      	subs	r4, r1, #4
   2bbf2:	2b00      	cmp	r3, #0
   2bbf4:	bfb8      	it	lt
   2bbf6:	18e4      	addlt	r4, r4, r3
   2bbf8:	f000 f9ea 	bl	2bfd0 <__malloc_lock>
   2bbfc:	4a1f      	ldr	r2, [pc, #124]	; (2bc7c <_free_r+0x98>)
   2bbfe:	6813      	ldr	r3, [r2, #0]
   2bc00:	4610      	mov	r0, r2
   2bc02:	b933      	cbnz	r3, 2bc12 <_free_r+0x2e>
   2bc04:	6063      	str	r3, [r4, #4]
   2bc06:	6014      	str	r4, [r2, #0]
   2bc08:	4628      	mov	r0, r5
   2bc0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2bc0e:	f000 b9e5 	b.w	2bfdc <__malloc_unlock>
   2bc12:	42a3      	cmp	r3, r4
   2bc14:	d90b      	bls.n	2bc2e <_free_r+0x4a>
   2bc16:	6821      	ldr	r1, [r4, #0]
   2bc18:	1862      	adds	r2, r4, r1
   2bc1a:	4293      	cmp	r3, r2
   2bc1c:	bf04      	itt	eq
   2bc1e:	681a      	ldreq	r2, [r3, #0]
   2bc20:	685b      	ldreq	r3, [r3, #4]
   2bc22:	6063      	str	r3, [r4, #4]
   2bc24:	bf04      	itt	eq
   2bc26:	1852      	addeq	r2, r2, r1
   2bc28:	6022      	streq	r2, [r4, #0]
   2bc2a:	6004      	str	r4, [r0, #0]
   2bc2c:	e7ec      	b.n	2bc08 <_free_r+0x24>
   2bc2e:	461a      	mov	r2, r3
   2bc30:	685b      	ldr	r3, [r3, #4]
   2bc32:	b10b      	cbz	r3, 2bc38 <_free_r+0x54>
   2bc34:	42a3      	cmp	r3, r4
   2bc36:	d9fa      	bls.n	2bc2e <_free_r+0x4a>
   2bc38:	6811      	ldr	r1, [r2, #0]
   2bc3a:	1850      	adds	r0, r2, r1
   2bc3c:	42a0      	cmp	r0, r4
   2bc3e:	d10b      	bne.n	2bc58 <_free_r+0x74>
   2bc40:	6820      	ldr	r0, [r4, #0]
   2bc42:	4401      	add	r1, r0
   2bc44:	1850      	adds	r0, r2, r1
   2bc46:	4283      	cmp	r3, r0
   2bc48:	6011      	str	r1, [r2, #0]
   2bc4a:	d1dd      	bne.n	2bc08 <_free_r+0x24>
   2bc4c:	6818      	ldr	r0, [r3, #0]
   2bc4e:	685b      	ldr	r3, [r3, #4]
   2bc50:	6053      	str	r3, [r2, #4]
   2bc52:	4401      	add	r1, r0
   2bc54:	6011      	str	r1, [r2, #0]
   2bc56:	e7d7      	b.n	2bc08 <_free_r+0x24>
   2bc58:	d902      	bls.n	2bc60 <_free_r+0x7c>
   2bc5a:	230c      	movs	r3, #12
   2bc5c:	602b      	str	r3, [r5, #0]
   2bc5e:	e7d3      	b.n	2bc08 <_free_r+0x24>
   2bc60:	6820      	ldr	r0, [r4, #0]
   2bc62:	1821      	adds	r1, r4, r0
   2bc64:	428b      	cmp	r3, r1
   2bc66:	bf04      	itt	eq
   2bc68:	6819      	ldreq	r1, [r3, #0]
   2bc6a:	685b      	ldreq	r3, [r3, #4]
   2bc6c:	6063      	str	r3, [r4, #4]
   2bc6e:	bf04      	itt	eq
   2bc70:	1809      	addeq	r1, r1, r0
   2bc72:	6021      	streq	r1, [r4, #0]
   2bc74:	6054      	str	r4, [r2, #4]
   2bc76:	e7c7      	b.n	2bc08 <_free_r+0x24>
   2bc78:	bd38      	pop	{r3, r4, r5, pc}
   2bc7a:	bf00      	nop
   2bc7c:	200038fc 	.word	0x200038fc

0002bc80 <_malloc_r>:
   2bc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2bc82:	1ccd      	adds	r5, r1, #3
   2bc84:	f025 0503 	bic.w	r5, r5, #3
   2bc88:	3508      	adds	r5, #8
   2bc8a:	2d0c      	cmp	r5, #12
   2bc8c:	bf38      	it	cc
   2bc8e:	250c      	movcc	r5, #12
   2bc90:	2d00      	cmp	r5, #0
   2bc92:	4606      	mov	r6, r0
   2bc94:	db01      	blt.n	2bc9a <_malloc_r+0x1a>
   2bc96:	42a9      	cmp	r1, r5
   2bc98:	d903      	bls.n	2bca2 <_malloc_r+0x22>
   2bc9a:	230c      	movs	r3, #12
   2bc9c:	6033      	str	r3, [r6, #0]
   2bc9e:	2000      	movs	r0, #0
   2bca0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2bca2:	f000 f995 	bl	2bfd0 <__malloc_lock>
   2bca6:	4921      	ldr	r1, [pc, #132]	; (2bd2c <_malloc_r+0xac>)
   2bca8:	680a      	ldr	r2, [r1, #0]
   2bcaa:	4614      	mov	r4, r2
   2bcac:	b99c      	cbnz	r4, 2bcd6 <_malloc_r+0x56>
   2bcae:	4f20      	ldr	r7, [pc, #128]	; (2bd30 <_malloc_r+0xb0>)
   2bcb0:	683b      	ldr	r3, [r7, #0]
   2bcb2:	b923      	cbnz	r3, 2bcbe <_malloc_r+0x3e>
   2bcb4:	4621      	mov	r1, r4
   2bcb6:	4630      	mov	r0, r6
   2bcb8:	f000 f83c 	bl	2bd34 <_sbrk_r>
   2bcbc:	6038      	str	r0, [r7, #0]
   2bcbe:	4629      	mov	r1, r5
   2bcc0:	4630      	mov	r0, r6
   2bcc2:	f000 f837 	bl	2bd34 <_sbrk_r>
   2bcc6:	1c43      	adds	r3, r0, #1
   2bcc8:	d123      	bne.n	2bd12 <_malloc_r+0x92>
   2bcca:	230c      	movs	r3, #12
   2bccc:	6033      	str	r3, [r6, #0]
   2bcce:	4630      	mov	r0, r6
   2bcd0:	f000 f984 	bl	2bfdc <__malloc_unlock>
   2bcd4:	e7e3      	b.n	2bc9e <_malloc_r+0x1e>
   2bcd6:	6823      	ldr	r3, [r4, #0]
   2bcd8:	1b5b      	subs	r3, r3, r5
   2bcda:	d417      	bmi.n	2bd0c <_malloc_r+0x8c>
   2bcdc:	2b0b      	cmp	r3, #11
   2bcde:	d903      	bls.n	2bce8 <_malloc_r+0x68>
   2bce0:	6023      	str	r3, [r4, #0]
   2bce2:	441c      	add	r4, r3
   2bce4:	6025      	str	r5, [r4, #0]
   2bce6:	e004      	b.n	2bcf2 <_malloc_r+0x72>
   2bce8:	6863      	ldr	r3, [r4, #4]
   2bcea:	42a2      	cmp	r2, r4
   2bcec:	bf0c      	ite	eq
   2bcee:	600b      	streq	r3, [r1, #0]
   2bcf0:	6053      	strne	r3, [r2, #4]
   2bcf2:	4630      	mov	r0, r6
   2bcf4:	f000 f972 	bl	2bfdc <__malloc_unlock>
   2bcf8:	f104 000b 	add.w	r0, r4, #11
   2bcfc:	1d23      	adds	r3, r4, #4
   2bcfe:	f020 0007 	bic.w	r0, r0, #7
   2bd02:	1ac2      	subs	r2, r0, r3
   2bd04:	d0cc      	beq.n	2bca0 <_malloc_r+0x20>
   2bd06:	1a1b      	subs	r3, r3, r0
   2bd08:	50a3      	str	r3, [r4, r2]
   2bd0a:	e7c9      	b.n	2bca0 <_malloc_r+0x20>
   2bd0c:	4622      	mov	r2, r4
   2bd0e:	6864      	ldr	r4, [r4, #4]
   2bd10:	e7cc      	b.n	2bcac <_malloc_r+0x2c>
   2bd12:	1cc4      	adds	r4, r0, #3
   2bd14:	f024 0403 	bic.w	r4, r4, #3
   2bd18:	42a0      	cmp	r0, r4
   2bd1a:	d0e3      	beq.n	2bce4 <_malloc_r+0x64>
   2bd1c:	1a21      	subs	r1, r4, r0
   2bd1e:	4630      	mov	r0, r6
   2bd20:	f000 f808 	bl	2bd34 <_sbrk_r>
   2bd24:	3001      	adds	r0, #1
   2bd26:	d1dd      	bne.n	2bce4 <_malloc_r+0x64>
   2bd28:	e7cf      	b.n	2bcca <_malloc_r+0x4a>
   2bd2a:	bf00      	nop
   2bd2c:	200038fc 	.word	0x200038fc
   2bd30:	20003900 	.word	0x20003900

0002bd34 <_sbrk_r>:
   2bd34:	b538      	push	{r3, r4, r5, lr}
   2bd36:	4d06      	ldr	r5, [pc, #24]	; (2bd50 <_sbrk_r+0x1c>)
   2bd38:	2300      	movs	r3, #0
   2bd3a:	4604      	mov	r4, r0
   2bd3c:	4608      	mov	r0, r1
   2bd3e:	602b      	str	r3, [r5, #0]
   2bd40:	f7ec f850 	bl	17de4 <_sbrk>
   2bd44:	1c43      	adds	r3, r0, #1
   2bd46:	d102      	bne.n	2bd4e <_sbrk_r+0x1a>
   2bd48:	682b      	ldr	r3, [r5, #0]
   2bd4a:	b103      	cbz	r3, 2bd4e <_sbrk_r+0x1a>
   2bd4c:	6023      	str	r3, [r4, #0]
   2bd4e:	bd38      	pop	{r3, r4, r5, pc}
   2bd50:	20004340 	.word	0x20004340

0002bd54 <sniprintf>:
   2bd54:	b40c      	push	{r2, r3}
   2bd56:	b530      	push	{r4, r5, lr}
   2bd58:	4b17      	ldr	r3, [pc, #92]	; (2bdb8 <sniprintf+0x64>)
   2bd5a:	1e0c      	subs	r4, r1, #0
   2bd5c:	681d      	ldr	r5, [r3, #0]
   2bd5e:	b09d      	sub	sp, #116	; 0x74
   2bd60:	da08      	bge.n	2bd74 <sniprintf+0x20>
   2bd62:	238b      	movs	r3, #139	; 0x8b
   2bd64:	602b      	str	r3, [r5, #0]
   2bd66:	f04f 30ff 	mov.w	r0, #4294967295
   2bd6a:	b01d      	add	sp, #116	; 0x74
   2bd6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   2bd70:	b002      	add	sp, #8
   2bd72:	4770      	bx	lr
   2bd74:	f44f 7302 	mov.w	r3, #520	; 0x208
   2bd78:	f8ad 3014 	strh.w	r3, [sp, #20]
   2bd7c:	bf14      	ite	ne
   2bd7e:	f104 33ff 	addne.w	r3, r4, #4294967295
   2bd82:	4623      	moveq	r3, r4
   2bd84:	9304      	str	r3, [sp, #16]
   2bd86:	9307      	str	r3, [sp, #28]
   2bd88:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2bd8c:	9002      	str	r0, [sp, #8]
   2bd8e:	9006      	str	r0, [sp, #24]
   2bd90:	f8ad 3016 	strh.w	r3, [sp, #22]
   2bd94:	9a20      	ldr	r2, [sp, #128]	; 0x80
   2bd96:	ab21      	add	r3, sp, #132	; 0x84
   2bd98:	a902      	add	r1, sp, #8
   2bd9a:	4628      	mov	r0, r5
   2bd9c:	9301      	str	r3, [sp, #4]
   2bd9e:	f000 f923 	bl	2bfe8 <_svfiprintf_r>
   2bda2:	1c43      	adds	r3, r0, #1
   2bda4:	bfbc      	itt	lt
   2bda6:	238b      	movlt	r3, #139	; 0x8b
   2bda8:	602b      	strlt	r3, [r5, #0]
   2bdaa:	2c00      	cmp	r4, #0
   2bdac:	d0dd      	beq.n	2bd6a <sniprintf+0x16>
   2bdae:	9b02      	ldr	r3, [sp, #8]
   2bdb0:	2200      	movs	r2, #0
   2bdb2:	701a      	strb	r2, [r3, #0]
   2bdb4:	e7d9      	b.n	2bd6a <sniprintf+0x16>
   2bdb6:	bf00      	nop
   2bdb8:	200006dc 	.word	0x200006dc

0002bdbc <_strtol_l.isra.0>:
   2bdbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bdc0:	4e3a      	ldr	r6, [pc, #232]	; (2beac <_strtol_l.isra.0+0xf0>)
   2bdc2:	4686      	mov	lr, r0
   2bdc4:	468c      	mov	ip, r1
   2bdc6:	4660      	mov	r0, ip
   2bdc8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2bdcc:	5da5      	ldrb	r5, [r4, r6]
   2bdce:	f015 0508 	ands.w	r5, r5, #8
   2bdd2:	d1f8      	bne.n	2bdc6 <_strtol_l.isra.0+0xa>
   2bdd4:	2c2d      	cmp	r4, #45	; 0x2d
   2bdd6:	d133      	bne.n	2be40 <_strtol_l.isra.0+0x84>
   2bdd8:	f89c 4000 	ldrb.w	r4, [ip]
   2bddc:	f04f 0801 	mov.w	r8, #1
   2bde0:	f100 0c02 	add.w	ip, r0, #2
   2bde4:	2b00      	cmp	r3, #0
   2bde6:	d05c      	beq.n	2bea2 <_strtol_l.isra.0+0xe6>
   2bde8:	2b10      	cmp	r3, #16
   2bdea:	d10c      	bne.n	2be06 <_strtol_l.isra.0+0x4a>
   2bdec:	2c30      	cmp	r4, #48	; 0x30
   2bdee:	d10a      	bne.n	2be06 <_strtol_l.isra.0+0x4a>
   2bdf0:	f89c 0000 	ldrb.w	r0, [ip]
   2bdf4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2bdf8:	2858      	cmp	r0, #88	; 0x58
   2bdfa:	d14d      	bne.n	2be98 <_strtol_l.isra.0+0xdc>
   2bdfc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   2be00:	2310      	movs	r3, #16
   2be02:	f10c 0c02 	add.w	ip, ip, #2
   2be06:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   2be0a:	3f01      	subs	r7, #1
   2be0c:	2600      	movs	r6, #0
   2be0e:	fbb7 f9f3 	udiv	r9, r7, r3
   2be12:	4630      	mov	r0, r6
   2be14:	fb03 7a19 	mls	sl, r3, r9, r7
   2be18:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   2be1c:	2d09      	cmp	r5, #9
   2be1e:	d818      	bhi.n	2be52 <_strtol_l.isra.0+0x96>
   2be20:	462c      	mov	r4, r5
   2be22:	42a3      	cmp	r3, r4
   2be24:	dd24      	ble.n	2be70 <_strtol_l.isra.0+0xb4>
   2be26:	1c75      	adds	r5, r6, #1
   2be28:	d007      	beq.n	2be3a <_strtol_l.isra.0+0x7e>
   2be2a:	4581      	cmp	r9, r0
   2be2c:	d31d      	bcc.n	2be6a <_strtol_l.isra.0+0xae>
   2be2e:	d101      	bne.n	2be34 <_strtol_l.isra.0+0x78>
   2be30:	45a2      	cmp	sl, r4
   2be32:	db1a      	blt.n	2be6a <_strtol_l.isra.0+0xae>
   2be34:	fb00 4003 	mla	r0, r0, r3, r4
   2be38:	2601      	movs	r6, #1
   2be3a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2be3e:	e7eb      	b.n	2be18 <_strtol_l.isra.0+0x5c>
   2be40:	2c2b      	cmp	r4, #43	; 0x2b
   2be42:	bf08      	it	eq
   2be44:	f89c 4000 	ldrbeq.w	r4, [ip]
   2be48:	46a8      	mov	r8, r5
   2be4a:	bf08      	it	eq
   2be4c:	f100 0c02 	addeq.w	ip, r0, #2
   2be50:	e7c8      	b.n	2bde4 <_strtol_l.isra.0+0x28>
   2be52:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   2be56:	2d19      	cmp	r5, #25
   2be58:	d801      	bhi.n	2be5e <_strtol_l.isra.0+0xa2>
   2be5a:	3c37      	subs	r4, #55	; 0x37
   2be5c:	e7e1      	b.n	2be22 <_strtol_l.isra.0+0x66>
   2be5e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   2be62:	2d19      	cmp	r5, #25
   2be64:	d804      	bhi.n	2be70 <_strtol_l.isra.0+0xb4>
   2be66:	3c57      	subs	r4, #87	; 0x57
   2be68:	e7db      	b.n	2be22 <_strtol_l.isra.0+0x66>
   2be6a:	f04f 36ff 	mov.w	r6, #4294967295
   2be6e:	e7e4      	b.n	2be3a <_strtol_l.isra.0+0x7e>
   2be70:	1c73      	adds	r3, r6, #1
   2be72:	d106      	bne.n	2be82 <_strtol_l.isra.0+0xc6>
   2be74:	2322      	movs	r3, #34	; 0x22
   2be76:	f8ce 3000 	str.w	r3, [lr]
   2be7a:	4638      	mov	r0, r7
   2be7c:	b942      	cbnz	r2, 2be90 <_strtol_l.isra.0+0xd4>
   2be7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2be82:	f1b8 0f00 	cmp.w	r8, #0
   2be86:	d000      	beq.n	2be8a <_strtol_l.isra.0+0xce>
   2be88:	4240      	negs	r0, r0
   2be8a:	2a00      	cmp	r2, #0
   2be8c:	d0f7      	beq.n	2be7e <_strtol_l.isra.0+0xc2>
   2be8e:	b10e      	cbz	r6, 2be94 <_strtol_l.isra.0+0xd8>
   2be90:	f10c 31ff 	add.w	r1, ip, #4294967295
   2be94:	6011      	str	r1, [r2, #0]
   2be96:	e7f2      	b.n	2be7e <_strtol_l.isra.0+0xc2>
   2be98:	2430      	movs	r4, #48	; 0x30
   2be9a:	2b00      	cmp	r3, #0
   2be9c:	d1b3      	bne.n	2be06 <_strtol_l.isra.0+0x4a>
   2be9e:	2308      	movs	r3, #8
   2bea0:	e7b1      	b.n	2be06 <_strtol_l.isra.0+0x4a>
   2bea2:	2c30      	cmp	r4, #48	; 0x30
   2bea4:	d0a4      	beq.n	2bdf0 <_strtol_l.isra.0+0x34>
   2bea6:	230a      	movs	r3, #10
   2bea8:	e7ad      	b.n	2be06 <_strtol_l.isra.0+0x4a>
   2beaa:	bf00      	nop
   2beac:	0003811b 	.word	0x0003811b

0002beb0 <strtol>:
   2beb0:	4613      	mov	r3, r2
   2beb2:	460a      	mov	r2, r1
   2beb4:	4601      	mov	r1, r0
   2beb6:	4802      	ldr	r0, [pc, #8]	; (2bec0 <strtol+0x10>)
   2beb8:	6800      	ldr	r0, [r0, #0]
   2beba:	f7ff bf7f 	b.w	2bdbc <_strtol_l.isra.0>
   2bebe:	bf00      	nop
   2bec0:	200006dc 	.word	0x200006dc

0002bec4 <_strtoul_l.isra.0>:
   2bec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2bec8:	4e3b      	ldr	r6, [pc, #236]	; (2bfb8 <_strtoul_l.isra.0+0xf4>)
   2beca:	4686      	mov	lr, r0
   2becc:	468c      	mov	ip, r1
   2bece:	4660      	mov	r0, ip
   2bed0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2bed4:	5da5      	ldrb	r5, [r4, r6]
   2bed6:	f015 0508 	ands.w	r5, r5, #8
   2beda:	d1f8      	bne.n	2bece <_strtoul_l.isra.0+0xa>
   2bedc:	2c2d      	cmp	r4, #45	; 0x2d
   2bede:	d134      	bne.n	2bf4a <_strtoul_l.isra.0+0x86>
   2bee0:	f89c 4000 	ldrb.w	r4, [ip]
   2bee4:	f04f 0801 	mov.w	r8, #1
   2bee8:	f100 0c02 	add.w	ip, r0, #2
   2beec:	2b00      	cmp	r3, #0
   2beee:	d05e      	beq.n	2bfae <_strtoul_l.isra.0+0xea>
   2bef0:	2b10      	cmp	r3, #16
   2bef2:	d10c      	bne.n	2bf0e <_strtoul_l.isra.0+0x4a>
   2bef4:	2c30      	cmp	r4, #48	; 0x30
   2bef6:	d10a      	bne.n	2bf0e <_strtoul_l.isra.0+0x4a>
   2bef8:	f89c 0000 	ldrb.w	r0, [ip]
   2befc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   2bf00:	2858      	cmp	r0, #88	; 0x58
   2bf02:	d14f      	bne.n	2bfa4 <_strtoul_l.isra.0+0xe0>
   2bf04:	f89c 4001 	ldrb.w	r4, [ip, #1]
   2bf08:	2310      	movs	r3, #16
   2bf0a:	f10c 0c02 	add.w	ip, ip, #2
   2bf0e:	f04f 37ff 	mov.w	r7, #4294967295
   2bf12:	2500      	movs	r5, #0
   2bf14:	fbb7 f7f3 	udiv	r7, r7, r3
   2bf18:	fb03 f907 	mul.w	r9, r3, r7
   2bf1c:	ea6f 0909 	mvn.w	r9, r9
   2bf20:	4628      	mov	r0, r5
   2bf22:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   2bf26:	2e09      	cmp	r6, #9
   2bf28:	d818      	bhi.n	2bf5c <_strtoul_l.isra.0+0x98>
   2bf2a:	4634      	mov	r4, r6
   2bf2c:	42a3      	cmp	r3, r4
   2bf2e:	dd24      	ble.n	2bf7a <_strtoul_l.isra.0+0xb6>
   2bf30:	2d00      	cmp	r5, #0
   2bf32:	db1f      	blt.n	2bf74 <_strtoul_l.isra.0+0xb0>
   2bf34:	4287      	cmp	r7, r0
   2bf36:	d31d      	bcc.n	2bf74 <_strtoul_l.isra.0+0xb0>
   2bf38:	d101      	bne.n	2bf3e <_strtoul_l.isra.0+0x7a>
   2bf3a:	45a1      	cmp	r9, r4
   2bf3c:	db1a      	blt.n	2bf74 <_strtoul_l.isra.0+0xb0>
   2bf3e:	fb00 4003 	mla	r0, r0, r3, r4
   2bf42:	2501      	movs	r5, #1
   2bf44:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2bf48:	e7eb      	b.n	2bf22 <_strtoul_l.isra.0+0x5e>
   2bf4a:	2c2b      	cmp	r4, #43	; 0x2b
   2bf4c:	bf08      	it	eq
   2bf4e:	f89c 4000 	ldrbeq.w	r4, [ip]
   2bf52:	46a8      	mov	r8, r5
   2bf54:	bf08      	it	eq
   2bf56:	f100 0c02 	addeq.w	ip, r0, #2
   2bf5a:	e7c7      	b.n	2beec <_strtoul_l.isra.0+0x28>
   2bf5c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   2bf60:	2e19      	cmp	r6, #25
   2bf62:	d801      	bhi.n	2bf68 <_strtoul_l.isra.0+0xa4>
   2bf64:	3c37      	subs	r4, #55	; 0x37
   2bf66:	e7e1      	b.n	2bf2c <_strtoul_l.isra.0+0x68>
   2bf68:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2bf6c:	2e19      	cmp	r6, #25
   2bf6e:	d804      	bhi.n	2bf7a <_strtoul_l.isra.0+0xb6>
   2bf70:	3c57      	subs	r4, #87	; 0x57
   2bf72:	e7db      	b.n	2bf2c <_strtoul_l.isra.0+0x68>
   2bf74:	f04f 35ff 	mov.w	r5, #4294967295
   2bf78:	e7e4      	b.n	2bf44 <_strtoul_l.isra.0+0x80>
   2bf7a:	2d00      	cmp	r5, #0
   2bf7c:	da07      	bge.n	2bf8e <_strtoul_l.isra.0+0xca>
   2bf7e:	2322      	movs	r3, #34	; 0x22
   2bf80:	f8ce 3000 	str.w	r3, [lr]
   2bf84:	f04f 30ff 	mov.w	r0, #4294967295
   2bf88:	b942      	cbnz	r2, 2bf9c <_strtoul_l.isra.0+0xd8>
   2bf8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2bf8e:	f1b8 0f00 	cmp.w	r8, #0
   2bf92:	d000      	beq.n	2bf96 <_strtoul_l.isra.0+0xd2>
   2bf94:	4240      	negs	r0, r0
   2bf96:	2a00      	cmp	r2, #0
   2bf98:	d0f7      	beq.n	2bf8a <_strtoul_l.isra.0+0xc6>
   2bf9a:	b10d      	cbz	r5, 2bfa0 <_strtoul_l.isra.0+0xdc>
   2bf9c:	f10c 31ff 	add.w	r1, ip, #4294967295
   2bfa0:	6011      	str	r1, [r2, #0]
   2bfa2:	e7f2      	b.n	2bf8a <_strtoul_l.isra.0+0xc6>
   2bfa4:	2430      	movs	r4, #48	; 0x30
   2bfa6:	2b00      	cmp	r3, #0
   2bfa8:	d1b1      	bne.n	2bf0e <_strtoul_l.isra.0+0x4a>
   2bfaa:	2308      	movs	r3, #8
   2bfac:	e7af      	b.n	2bf0e <_strtoul_l.isra.0+0x4a>
   2bfae:	2c30      	cmp	r4, #48	; 0x30
   2bfb0:	d0a2      	beq.n	2bef8 <_strtoul_l.isra.0+0x34>
   2bfb2:	230a      	movs	r3, #10
   2bfb4:	e7ab      	b.n	2bf0e <_strtoul_l.isra.0+0x4a>
   2bfb6:	bf00      	nop
   2bfb8:	0003811b 	.word	0x0003811b

0002bfbc <strtoul>:
   2bfbc:	4613      	mov	r3, r2
   2bfbe:	460a      	mov	r2, r1
   2bfc0:	4601      	mov	r1, r0
   2bfc2:	4802      	ldr	r0, [pc, #8]	; (2bfcc <strtoul+0x10>)
   2bfc4:	6800      	ldr	r0, [r0, #0]
   2bfc6:	f7ff bf7d 	b.w	2bec4 <_strtoul_l.isra.0>
   2bfca:	bf00      	nop
   2bfcc:	200006dc 	.word	0x200006dc

0002bfd0 <__malloc_lock>:
   2bfd0:	4801      	ldr	r0, [pc, #4]	; (2bfd8 <__malloc_lock+0x8>)
   2bfd2:	f7eb bf1b 	b.w	17e0c <__retarget_lock_acquire_recursive>
   2bfd6:	bf00      	nop
   2bfd8:	20000870 	.word	0x20000870

0002bfdc <__malloc_unlock>:
   2bfdc:	4801      	ldr	r0, [pc, #4]	; (2bfe4 <__malloc_unlock+0x8>)
   2bfde:	f7eb bf33 	b.w	17e48 <__retarget_lock_release_recursive>
   2bfe2:	bf00      	nop
   2bfe4:	20000870 	.word	0x20000870

0002bfe8 <_svfiprintf_r>:
   2bfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bfec:	4698      	mov	r8, r3
   2bfee:	898b      	ldrh	r3, [r1, #12]
   2bff0:	061b      	lsls	r3, r3, #24
   2bff2:	b09d      	sub	sp, #116	; 0x74
   2bff4:	4607      	mov	r7, r0
   2bff6:	460d      	mov	r5, r1
   2bff8:	4614      	mov	r4, r2
   2bffa:	d50e      	bpl.n	2c01a <_svfiprintf_r+0x32>
   2bffc:	690b      	ldr	r3, [r1, #16]
   2bffe:	b963      	cbnz	r3, 2c01a <_svfiprintf_r+0x32>
   2c000:	2140      	movs	r1, #64	; 0x40
   2c002:	f7ff fe3d 	bl	2bc80 <_malloc_r>
   2c006:	6028      	str	r0, [r5, #0]
   2c008:	6128      	str	r0, [r5, #16]
   2c00a:	b920      	cbnz	r0, 2c016 <_svfiprintf_r+0x2e>
   2c00c:	230c      	movs	r3, #12
   2c00e:	603b      	str	r3, [r7, #0]
   2c010:	f04f 30ff 	mov.w	r0, #4294967295
   2c014:	e0d1      	b.n	2c1ba <_svfiprintf_r+0x1d2>
   2c016:	2340      	movs	r3, #64	; 0x40
   2c018:	616b      	str	r3, [r5, #20]
   2c01a:	2300      	movs	r3, #0
   2c01c:	9309      	str	r3, [sp, #36]	; 0x24
   2c01e:	2320      	movs	r3, #32
   2c020:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   2c024:	f8cd 800c 	str.w	r8, [sp, #12]
   2c028:	2330      	movs	r3, #48	; 0x30
   2c02a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 2c1d4 <_svfiprintf_r+0x1ec>
   2c02e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   2c032:	f04f 0901 	mov.w	r9, #1
   2c036:	4623      	mov	r3, r4
   2c038:	469a      	mov	sl, r3
   2c03a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2c03e:	b10a      	cbz	r2, 2c044 <_svfiprintf_r+0x5c>
   2c040:	2a25      	cmp	r2, #37	; 0x25
   2c042:	d1f9      	bne.n	2c038 <_svfiprintf_r+0x50>
   2c044:	ebba 0b04 	subs.w	fp, sl, r4
   2c048:	d00b      	beq.n	2c062 <_svfiprintf_r+0x7a>
   2c04a:	465b      	mov	r3, fp
   2c04c:	4622      	mov	r2, r4
   2c04e:	4629      	mov	r1, r5
   2c050:	4638      	mov	r0, r7
   2c052:	f004 fb76 	bl	30742 <__ssputs_r>
   2c056:	3001      	adds	r0, #1
   2c058:	f000 80aa 	beq.w	2c1b0 <_svfiprintf_r+0x1c8>
   2c05c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2c05e:	445a      	add	r2, fp
   2c060:	9209      	str	r2, [sp, #36]	; 0x24
   2c062:	f89a 3000 	ldrb.w	r3, [sl]
   2c066:	2b00      	cmp	r3, #0
   2c068:	f000 80a2 	beq.w	2c1b0 <_svfiprintf_r+0x1c8>
   2c06c:	2300      	movs	r3, #0
   2c06e:	f04f 32ff 	mov.w	r2, #4294967295
   2c072:	e9cd 2305 	strd	r2, r3, [sp, #20]
   2c076:	f10a 0a01 	add.w	sl, sl, #1
   2c07a:	9304      	str	r3, [sp, #16]
   2c07c:	9307      	str	r3, [sp, #28]
   2c07e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   2c082:	931a      	str	r3, [sp, #104]	; 0x68
   2c084:	4654      	mov	r4, sl
   2c086:	2205      	movs	r2, #5
   2c088:	f814 1b01 	ldrb.w	r1, [r4], #1
   2c08c:	4851      	ldr	r0, [pc, #324]	; (2c1d4 <_svfiprintf_r+0x1ec>)
   2c08e:	f7d5 f837 	bl	1100 <memchr>
   2c092:	9a04      	ldr	r2, [sp, #16]
   2c094:	b9d8      	cbnz	r0, 2c0ce <_svfiprintf_r+0xe6>
   2c096:	06d0      	lsls	r0, r2, #27
   2c098:	bf44      	itt	mi
   2c09a:	2320      	movmi	r3, #32
   2c09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2c0a0:	0711      	lsls	r1, r2, #28
   2c0a2:	bf44      	itt	mi
   2c0a4:	232b      	movmi	r3, #43	; 0x2b
   2c0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   2c0aa:	f89a 3000 	ldrb.w	r3, [sl]
   2c0ae:	2b2a      	cmp	r3, #42	; 0x2a
   2c0b0:	d015      	beq.n	2c0de <_svfiprintf_r+0xf6>
   2c0b2:	9a07      	ldr	r2, [sp, #28]
   2c0b4:	4654      	mov	r4, sl
   2c0b6:	2000      	movs	r0, #0
   2c0b8:	f04f 0c0a 	mov.w	ip, #10
   2c0bc:	4621      	mov	r1, r4
   2c0be:	f811 3b01 	ldrb.w	r3, [r1], #1
   2c0c2:	3b30      	subs	r3, #48	; 0x30
   2c0c4:	2b09      	cmp	r3, #9
   2c0c6:	d94e      	bls.n	2c166 <_svfiprintf_r+0x17e>
   2c0c8:	b1b0      	cbz	r0, 2c0f8 <_svfiprintf_r+0x110>
   2c0ca:	9207      	str	r2, [sp, #28]
   2c0cc:	e014      	b.n	2c0f8 <_svfiprintf_r+0x110>
   2c0ce:	eba0 0308 	sub.w	r3, r0, r8
   2c0d2:	fa09 f303 	lsl.w	r3, r9, r3
   2c0d6:	4313      	orrs	r3, r2
   2c0d8:	9304      	str	r3, [sp, #16]
   2c0da:	46a2      	mov	sl, r4
   2c0dc:	e7d2      	b.n	2c084 <_svfiprintf_r+0x9c>
   2c0de:	9b03      	ldr	r3, [sp, #12]
   2c0e0:	1d19      	adds	r1, r3, #4
   2c0e2:	681b      	ldr	r3, [r3, #0]
   2c0e4:	9103      	str	r1, [sp, #12]
   2c0e6:	2b00      	cmp	r3, #0
   2c0e8:	bfbb      	ittet	lt
   2c0ea:	425b      	neglt	r3, r3
   2c0ec:	f042 0202 	orrlt.w	r2, r2, #2
   2c0f0:	9307      	strge	r3, [sp, #28]
   2c0f2:	9307      	strlt	r3, [sp, #28]
   2c0f4:	bfb8      	it	lt
   2c0f6:	9204      	strlt	r2, [sp, #16]
   2c0f8:	7823      	ldrb	r3, [r4, #0]
   2c0fa:	2b2e      	cmp	r3, #46	; 0x2e
   2c0fc:	d10c      	bne.n	2c118 <_svfiprintf_r+0x130>
   2c0fe:	7863      	ldrb	r3, [r4, #1]
   2c100:	2b2a      	cmp	r3, #42	; 0x2a
   2c102:	d135      	bne.n	2c170 <_svfiprintf_r+0x188>
   2c104:	9b03      	ldr	r3, [sp, #12]
   2c106:	1d1a      	adds	r2, r3, #4
   2c108:	681b      	ldr	r3, [r3, #0]
   2c10a:	9203      	str	r2, [sp, #12]
   2c10c:	2b00      	cmp	r3, #0
   2c10e:	bfb8      	it	lt
   2c110:	f04f 33ff 	movlt.w	r3, #4294967295
   2c114:	3402      	adds	r4, #2
   2c116:	9305      	str	r3, [sp, #20]
   2c118:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 2c1e4 <_svfiprintf_r+0x1fc>
   2c11c:	7821      	ldrb	r1, [r4, #0]
   2c11e:	2203      	movs	r2, #3
   2c120:	4650      	mov	r0, sl
   2c122:	f7d4 ffed 	bl	1100 <memchr>
   2c126:	b140      	cbz	r0, 2c13a <_svfiprintf_r+0x152>
   2c128:	2340      	movs	r3, #64	; 0x40
   2c12a:	eba0 000a 	sub.w	r0, r0, sl
   2c12e:	fa03 f000 	lsl.w	r0, r3, r0
   2c132:	9b04      	ldr	r3, [sp, #16]
   2c134:	4303      	orrs	r3, r0
   2c136:	3401      	adds	r4, #1
   2c138:	9304      	str	r3, [sp, #16]
   2c13a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2c13e:	4826      	ldr	r0, [pc, #152]	; (2c1d8 <_svfiprintf_r+0x1f0>)
   2c140:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   2c144:	2206      	movs	r2, #6
   2c146:	f7d4 ffdb 	bl	1100 <memchr>
   2c14a:	2800      	cmp	r0, #0
   2c14c:	d038      	beq.n	2c1c0 <_svfiprintf_r+0x1d8>
   2c14e:	4b23      	ldr	r3, [pc, #140]	; (2c1dc <_svfiprintf_r+0x1f4>)
   2c150:	bb1b      	cbnz	r3, 2c19a <_svfiprintf_r+0x1b2>
   2c152:	9b03      	ldr	r3, [sp, #12]
   2c154:	3307      	adds	r3, #7
   2c156:	f023 0307 	bic.w	r3, r3, #7
   2c15a:	3308      	adds	r3, #8
   2c15c:	9303      	str	r3, [sp, #12]
   2c15e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2c160:	4433      	add	r3, r6
   2c162:	9309      	str	r3, [sp, #36]	; 0x24
   2c164:	e767      	b.n	2c036 <_svfiprintf_r+0x4e>
   2c166:	fb0c 3202 	mla	r2, ip, r2, r3
   2c16a:	460c      	mov	r4, r1
   2c16c:	2001      	movs	r0, #1
   2c16e:	e7a5      	b.n	2c0bc <_svfiprintf_r+0xd4>
   2c170:	2300      	movs	r3, #0
   2c172:	3401      	adds	r4, #1
   2c174:	9305      	str	r3, [sp, #20]
   2c176:	4619      	mov	r1, r3
   2c178:	f04f 0c0a 	mov.w	ip, #10
   2c17c:	4620      	mov	r0, r4
   2c17e:	f810 2b01 	ldrb.w	r2, [r0], #1
   2c182:	3a30      	subs	r2, #48	; 0x30
   2c184:	2a09      	cmp	r2, #9
   2c186:	d903      	bls.n	2c190 <_svfiprintf_r+0x1a8>
   2c188:	2b00      	cmp	r3, #0
   2c18a:	d0c5      	beq.n	2c118 <_svfiprintf_r+0x130>
   2c18c:	9105      	str	r1, [sp, #20]
   2c18e:	e7c3      	b.n	2c118 <_svfiprintf_r+0x130>
   2c190:	fb0c 2101 	mla	r1, ip, r1, r2
   2c194:	4604      	mov	r4, r0
   2c196:	2301      	movs	r3, #1
   2c198:	e7f0      	b.n	2c17c <_svfiprintf_r+0x194>
   2c19a:	ab03      	add	r3, sp, #12
   2c19c:	9300      	str	r3, [sp, #0]
   2c19e:	462a      	mov	r2, r5
   2c1a0:	4b0f      	ldr	r3, [pc, #60]	; (2c1e0 <_svfiprintf_r+0x1f8>)
   2c1a2:	a904      	add	r1, sp, #16
   2c1a4:	4638      	mov	r0, r7
   2c1a6:	f3af 8000 	nop.w
   2c1aa:	1c42      	adds	r2, r0, #1
   2c1ac:	4606      	mov	r6, r0
   2c1ae:	d1d6      	bne.n	2c15e <_svfiprintf_r+0x176>
   2c1b0:	89ab      	ldrh	r3, [r5, #12]
   2c1b2:	065b      	lsls	r3, r3, #25
   2c1b4:	f53f af2c 	bmi.w	2c010 <_svfiprintf_r+0x28>
   2c1b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   2c1ba:	b01d      	add	sp, #116	; 0x74
   2c1bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c1c0:	ab03      	add	r3, sp, #12
   2c1c2:	9300      	str	r3, [sp, #0]
   2c1c4:	462a      	mov	r2, r5
   2c1c6:	4b06      	ldr	r3, [pc, #24]	; (2c1e0 <_svfiprintf_r+0x1f8>)
   2c1c8:	a904      	add	r1, sp, #16
   2c1ca:	4638      	mov	r0, r7
   2c1cc:	f000 f80c 	bl	2c1e8 <_printf_i>
   2c1d0:	e7eb      	b.n	2c1aa <_svfiprintf_r+0x1c2>
   2c1d2:	bf00      	nop
   2c1d4:	0003821b 	.word	0x0003821b
   2c1d8:	00038225 	.word	0x00038225
   2c1dc:	00000000 	.word	0x00000000
   2c1e0:	00030743 	.word	0x00030743
   2c1e4:	00038221 	.word	0x00038221

0002c1e8 <_printf_i>:
   2c1e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   2c1ec:	460c      	mov	r4, r1
   2c1ee:	4691      	mov	r9, r2
   2c1f0:	7e27      	ldrb	r7, [r4, #24]
   2c1f2:	990c      	ldr	r1, [sp, #48]	; 0x30
   2c1f4:	2f78      	cmp	r7, #120	; 0x78
   2c1f6:	4680      	mov	r8, r0
   2c1f8:	469a      	mov	sl, r3
   2c1fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2c1fe:	d807      	bhi.n	2c210 <_printf_i+0x28>
   2c200:	2f62      	cmp	r7, #98	; 0x62
   2c202:	d80a      	bhi.n	2c21a <_printf_i+0x32>
   2c204:	2f00      	cmp	r7, #0
   2c206:	f000 80d8 	beq.w	2c3ba <_printf_i+0x1d2>
   2c20a:	2f58      	cmp	r7, #88	; 0x58
   2c20c:	f000 80a3 	beq.w	2c356 <_printf_i+0x16e>
   2c210:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2c214:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   2c218:	e03a      	b.n	2c290 <_printf_i+0xa8>
   2c21a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2c21e:	2b15      	cmp	r3, #21
   2c220:	d8f6      	bhi.n	2c210 <_printf_i+0x28>
   2c222:	a001      	add	r0, pc, #4	; (adr r0, 2c228 <_printf_i+0x40>)
   2c224:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   2c228:	0002c281 	.word	0x0002c281
   2c22c:	0002c295 	.word	0x0002c295
   2c230:	0002c211 	.word	0x0002c211
   2c234:	0002c211 	.word	0x0002c211
   2c238:	0002c211 	.word	0x0002c211
   2c23c:	0002c211 	.word	0x0002c211
   2c240:	0002c295 	.word	0x0002c295
   2c244:	0002c211 	.word	0x0002c211
   2c248:	0002c211 	.word	0x0002c211
   2c24c:	0002c211 	.word	0x0002c211
   2c250:	0002c211 	.word	0x0002c211
   2c254:	0002c3a1 	.word	0x0002c3a1
   2c258:	0002c2c5 	.word	0x0002c2c5
   2c25c:	0002c383 	.word	0x0002c383
   2c260:	0002c211 	.word	0x0002c211
   2c264:	0002c211 	.word	0x0002c211
   2c268:	0002c3c3 	.word	0x0002c3c3
   2c26c:	0002c211 	.word	0x0002c211
   2c270:	0002c2c5 	.word	0x0002c2c5
   2c274:	0002c211 	.word	0x0002c211
   2c278:	0002c211 	.word	0x0002c211
   2c27c:	0002c38b 	.word	0x0002c38b
   2c280:	680b      	ldr	r3, [r1, #0]
   2c282:	1d1a      	adds	r2, r3, #4
   2c284:	681b      	ldr	r3, [r3, #0]
   2c286:	600a      	str	r2, [r1, #0]
   2c288:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2c28c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   2c290:	2301      	movs	r3, #1
   2c292:	e0a3      	b.n	2c3dc <_printf_i+0x1f4>
   2c294:	6825      	ldr	r5, [r4, #0]
   2c296:	6808      	ldr	r0, [r1, #0]
   2c298:	062e      	lsls	r6, r5, #24
   2c29a:	f100 0304 	add.w	r3, r0, #4
   2c29e:	d50a      	bpl.n	2c2b6 <_printf_i+0xce>
   2c2a0:	6805      	ldr	r5, [r0, #0]
   2c2a2:	600b      	str	r3, [r1, #0]
   2c2a4:	2d00      	cmp	r5, #0
   2c2a6:	da03      	bge.n	2c2b0 <_printf_i+0xc8>
   2c2a8:	232d      	movs	r3, #45	; 0x2d
   2c2aa:	426d      	negs	r5, r5
   2c2ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2c2b0:	485e      	ldr	r0, [pc, #376]	; (2c42c <_printf_i+0x244>)
   2c2b2:	230a      	movs	r3, #10
   2c2b4:	e019      	b.n	2c2ea <_printf_i+0x102>
   2c2b6:	f015 0f40 	tst.w	r5, #64	; 0x40
   2c2ba:	6805      	ldr	r5, [r0, #0]
   2c2bc:	600b      	str	r3, [r1, #0]
   2c2be:	bf18      	it	ne
   2c2c0:	b22d      	sxthne	r5, r5
   2c2c2:	e7ef      	b.n	2c2a4 <_printf_i+0xbc>
   2c2c4:	680b      	ldr	r3, [r1, #0]
   2c2c6:	6825      	ldr	r5, [r4, #0]
   2c2c8:	1d18      	adds	r0, r3, #4
   2c2ca:	6008      	str	r0, [r1, #0]
   2c2cc:	0628      	lsls	r0, r5, #24
   2c2ce:	d501      	bpl.n	2c2d4 <_printf_i+0xec>
   2c2d0:	681d      	ldr	r5, [r3, #0]
   2c2d2:	e002      	b.n	2c2da <_printf_i+0xf2>
   2c2d4:	0669      	lsls	r1, r5, #25
   2c2d6:	d5fb      	bpl.n	2c2d0 <_printf_i+0xe8>
   2c2d8:	881d      	ldrh	r5, [r3, #0]
   2c2da:	4854      	ldr	r0, [pc, #336]	; (2c42c <_printf_i+0x244>)
   2c2dc:	2f6f      	cmp	r7, #111	; 0x6f
   2c2de:	bf0c      	ite	eq
   2c2e0:	2308      	moveq	r3, #8
   2c2e2:	230a      	movne	r3, #10
   2c2e4:	2100      	movs	r1, #0
   2c2e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   2c2ea:	6866      	ldr	r6, [r4, #4]
   2c2ec:	60a6      	str	r6, [r4, #8]
   2c2ee:	2e00      	cmp	r6, #0
   2c2f0:	bfa2      	ittt	ge
   2c2f2:	6821      	ldrge	r1, [r4, #0]
   2c2f4:	f021 0104 	bicge.w	r1, r1, #4
   2c2f8:	6021      	strge	r1, [r4, #0]
   2c2fa:	b90d      	cbnz	r5, 2c300 <_printf_i+0x118>
   2c2fc:	2e00      	cmp	r6, #0
   2c2fe:	d04d      	beq.n	2c39c <_printf_i+0x1b4>
   2c300:	4616      	mov	r6, r2
   2c302:	fbb5 f1f3 	udiv	r1, r5, r3
   2c306:	fb03 5711 	mls	r7, r3, r1, r5
   2c30a:	5dc7      	ldrb	r7, [r0, r7]
   2c30c:	f806 7d01 	strb.w	r7, [r6, #-1]!
   2c310:	462f      	mov	r7, r5
   2c312:	42bb      	cmp	r3, r7
   2c314:	460d      	mov	r5, r1
   2c316:	d9f4      	bls.n	2c302 <_printf_i+0x11a>
   2c318:	2b08      	cmp	r3, #8
   2c31a:	d10b      	bne.n	2c334 <_printf_i+0x14c>
   2c31c:	6823      	ldr	r3, [r4, #0]
   2c31e:	07df      	lsls	r7, r3, #31
   2c320:	d508      	bpl.n	2c334 <_printf_i+0x14c>
   2c322:	6923      	ldr	r3, [r4, #16]
   2c324:	6861      	ldr	r1, [r4, #4]
   2c326:	4299      	cmp	r1, r3
   2c328:	bfde      	ittt	le
   2c32a:	2330      	movle	r3, #48	; 0x30
   2c32c:	f806 3c01 	strble.w	r3, [r6, #-1]
   2c330:	f106 36ff 	addle.w	r6, r6, #4294967295
   2c334:	1b92      	subs	r2, r2, r6
   2c336:	6122      	str	r2, [r4, #16]
   2c338:	f8cd a000 	str.w	sl, [sp]
   2c33c:	464b      	mov	r3, r9
   2c33e:	aa03      	add	r2, sp, #12
   2c340:	4621      	mov	r1, r4
   2c342:	4640      	mov	r0, r8
   2c344:	f004 fa58 	bl	307f8 <_printf_common>
   2c348:	3001      	adds	r0, #1
   2c34a:	d14c      	bne.n	2c3e6 <_printf_i+0x1fe>
   2c34c:	f04f 30ff 	mov.w	r0, #4294967295
   2c350:	b004      	add	sp, #16
   2c352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2c356:	4835      	ldr	r0, [pc, #212]	; (2c42c <_printf_i+0x244>)
   2c358:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2c35c:	6823      	ldr	r3, [r4, #0]
   2c35e:	680e      	ldr	r6, [r1, #0]
   2c360:	061f      	lsls	r7, r3, #24
   2c362:	f856 5b04 	ldr.w	r5, [r6], #4
   2c366:	600e      	str	r6, [r1, #0]
   2c368:	d514      	bpl.n	2c394 <_printf_i+0x1ac>
   2c36a:	07d9      	lsls	r1, r3, #31
   2c36c:	bf44      	itt	mi
   2c36e:	f043 0320 	orrmi.w	r3, r3, #32
   2c372:	6023      	strmi	r3, [r4, #0]
   2c374:	b91d      	cbnz	r5, 2c37e <_printf_i+0x196>
   2c376:	6823      	ldr	r3, [r4, #0]
   2c378:	f023 0320 	bic.w	r3, r3, #32
   2c37c:	6023      	str	r3, [r4, #0]
   2c37e:	2310      	movs	r3, #16
   2c380:	e7b0      	b.n	2c2e4 <_printf_i+0xfc>
   2c382:	6823      	ldr	r3, [r4, #0]
   2c384:	f043 0320 	orr.w	r3, r3, #32
   2c388:	6023      	str	r3, [r4, #0]
   2c38a:	2378      	movs	r3, #120	; 0x78
   2c38c:	4828      	ldr	r0, [pc, #160]	; (2c430 <_printf_i+0x248>)
   2c38e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   2c392:	e7e3      	b.n	2c35c <_printf_i+0x174>
   2c394:	065e      	lsls	r6, r3, #25
   2c396:	bf48      	it	mi
   2c398:	b2ad      	uxthmi	r5, r5
   2c39a:	e7e6      	b.n	2c36a <_printf_i+0x182>
   2c39c:	4616      	mov	r6, r2
   2c39e:	e7bb      	b.n	2c318 <_printf_i+0x130>
   2c3a0:	680b      	ldr	r3, [r1, #0]
   2c3a2:	6826      	ldr	r6, [r4, #0]
   2c3a4:	6960      	ldr	r0, [r4, #20]
   2c3a6:	1d1d      	adds	r5, r3, #4
   2c3a8:	600d      	str	r5, [r1, #0]
   2c3aa:	0635      	lsls	r5, r6, #24
   2c3ac:	681b      	ldr	r3, [r3, #0]
   2c3ae:	d501      	bpl.n	2c3b4 <_printf_i+0x1cc>
   2c3b0:	6018      	str	r0, [r3, #0]
   2c3b2:	e002      	b.n	2c3ba <_printf_i+0x1d2>
   2c3b4:	0671      	lsls	r1, r6, #25
   2c3b6:	d5fb      	bpl.n	2c3b0 <_printf_i+0x1c8>
   2c3b8:	8018      	strh	r0, [r3, #0]
   2c3ba:	2300      	movs	r3, #0
   2c3bc:	6123      	str	r3, [r4, #16]
   2c3be:	4616      	mov	r6, r2
   2c3c0:	e7ba      	b.n	2c338 <_printf_i+0x150>
   2c3c2:	680b      	ldr	r3, [r1, #0]
   2c3c4:	1d1a      	adds	r2, r3, #4
   2c3c6:	600a      	str	r2, [r1, #0]
   2c3c8:	681e      	ldr	r6, [r3, #0]
   2c3ca:	6862      	ldr	r2, [r4, #4]
   2c3cc:	2100      	movs	r1, #0
   2c3ce:	4630      	mov	r0, r6
   2c3d0:	f7d4 fe96 	bl	1100 <memchr>
   2c3d4:	b108      	cbz	r0, 2c3da <_printf_i+0x1f2>
   2c3d6:	1b80      	subs	r0, r0, r6
   2c3d8:	6060      	str	r0, [r4, #4]
   2c3da:	6863      	ldr	r3, [r4, #4]
   2c3dc:	6123      	str	r3, [r4, #16]
   2c3de:	2300      	movs	r3, #0
   2c3e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   2c3e4:	e7a8      	b.n	2c338 <_printf_i+0x150>
   2c3e6:	6923      	ldr	r3, [r4, #16]
   2c3e8:	4632      	mov	r2, r6
   2c3ea:	4649      	mov	r1, r9
   2c3ec:	4640      	mov	r0, r8
   2c3ee:	47d0      	blx	sl
   2c3f0:	3001      	adds	r0, #1
   2c3f2:	d0ab      	beq.n	2c34c <_printf_i+0x164>
   2c3f4:	6823      	ldr	r3, [r4, #0]
   2c3f6:	079b      	lsls	r3, r3, #30
   2c3f8:	d413      	bmi.n	2c422 <_printf_i+0x23a>
   2c3fa:	68e0      	ldr	r0, [r4, #12]
   2c3fc:	9b03      	ldr	r3, [sp, #12]
   2c3fe:	4298      	cmp	r0, r3
   2c400:	bfb8      	it	lt
   2c402:	4618      	movlt	r0, r3
   2c404:	e7a4      	b.n	2c350 <_printf_i+0x168>
   2c406:	2301      	movs	r3, #1
   2c408:	4632      	mov	r2, r6
   2c40a:	4649      	mov	r1, r9
   2c40c:	4640      	mov	r0, r8
   2c40e:	47d0      	blx	sl
   2c410:	3001      	adds	r0, #1
   2c412:	d09b      	beq.n	2c34c <_printf_i+0x164>
   2c414:	3501      	adds	r5, #1
   2c416:	68e3      	ldr	r3, [r4, #12]
   2c418:	9903      	ldr	r1, [sp, #12]
   2c41a:	1a5b      	subs	r3, r3, r1
   2c41c:	42ab      	cmp	r3, r5
   2c41e:	dcf2      	bgt.n	2c406 <_printf_i+0x21e>
   2c420:	e7eb      	b.n	2c3fa <_printf_i+0x212>
   2c422:	2500      	movs	r5, #0
   2c424:	f104 0619 	add.w	r6, r4, #25
   2c428:	e7f5      	b.n	2c416 <_printf_i+0x22e>
   2c42a:	bf00      	nop
   2c42c:	0003822c 	.word	0x0003822c
   2c430:	0003823d 	.word	0x0003823d

0002c434 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2c434:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   2c438:	b2db      	uxtb	r3, r3
   2c43a:	2b09      	cmp	r3, #9
   2c43c:	d802      	bhi.n	2c444 <char2hex+0x10>
		*x = c - '0';
   2c43e:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   2c440:	2000      	movs	r0, #0
   2c442:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   2c444:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   2c448:	2b05      	cmp	r3, #5
   2c44a:	d802      	bhi.n	2c452 <char2hex+0x1e>
		*x = c - 'a' + 10;
   2c44c:	3857      	subs	r0, #87	; 0x57
   2c44e:	7008      	strb	r0, [r1, #0]
   2c450:	e7f6      	b.n	2c440 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   2c452:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   2c456:	2b05      	cmp	r3, #5
   2c458:	d801      	bhi.n	2c45e <char2hex+0x2a>
		*x = c - 'A' + 10;
   2c45a:	3837      	subs	r0, #55	; 0x37
   2c45c:	e7f7      	b.n	2c44e <char2hex+0x1a>
		return -EINVAL;
   2c45e:	f06f 0015 	mvn.w	r0, #21
}
   2c462:	4770      	bx	lr

0002c464 <hex2char>:

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   2c464:	2809      	cmp	r0, #9
   2c466:	d803      	bhi.n	2c470 <hex2char+0xc>
		*c = x + '0';
   2c468:	3030      	adds	r0, #48	; 0x30
	} else  if (x <= 15) {
		*c = x - 10 + 'a';
   2c46a:	7008      	strb	r0, [r1, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   2c46c:	2000      	movs	r0, #0
   2c46e:	4770      	bx	lr
	} else  if (x <= 15) {
   2c470:	280f      	cmp	r0, #15
   2c472:	d801      	bhi.n	2c478 <hex2char+0x14>
		*c = x - 10 + 'a';
   2c474:	3057      	adds	r0, #87	; 0x57
   2c476:	e7f8      	b.n	2c46a <hex2char+0x6>
		return -EINVAL;
   2c478:	f06f 0015 	mvn.w	r0, #21
}
   2c47c:	4770      	bx	lr

0002c47e <bin2hex>:

size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)
{
	if ((hexlen + 1) < buflen * 2) {
   2c47e:	3301      	adds	r3, #1
   2c480:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
{
   2c484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c488:	460c      	mov	r4, r1
	if ((hexlen + 1) < buflen * 2) {
   2c48a:	ea4f 0641 	mov.w	r6, r1, lsl #1
   2c48e:	d203      	bcs.n	2c498 <bin2hex+0x1a>
		return 0;
   2c490:	2600      	movs	r6, #0
		}
	}

	hex[2 * buflen] = '\0';
	return 2 * buflen;
}
   2c492:	4630      	mov	r0, r6
   2c494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2c498:	4603      	mov	r3, r0
   2c49a:	1c55      	adds	r5, r2, #1
   2c49c:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < buflen; i++) {
   2c49e:	42bb      	cmp	r3, r7
   2c4a0:	d103      	bne.n	2c4aa <bin2hex+0x2c>
	hex[2 * buflen] = '\0';
   2c4a2:	2300      	movs	r3, #0
   2c4a4:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
	return 2 * buflen;
   2c4a8:	e7f3      	b.n	2c492 <bin2hex+0x14>
		if (hex2char(buf[i] >> 4, &hex[2 * i]) < 0) {
   2c4aa:	7818      	ldrb	r0, [r3, #0]
   2c4ac:	1e69      	subs	r1, r5, #1
   2c4ae:	0900      	lsrs	r0, r0, #4
   2c4b0:	4698      	mov	r8, r3
   2c4b2:	f7ff ffd7 	bl	2c464 <hex2char>
   2c4b6:	2800      	cmp	r0, #0
   2c4b8:	dbea      	blt.n	2c490 <bin2hex+0x12>
		if (hex2char(buf[i] & 0xf, &hex[2 * i + 1]) < 0) {
   2c4ba:	f898 0000 	ldrb.w	r0, [r8]
   2c4be:	4629      	mov	r1, r5
   2c4c0:	f000 000f 	and.w	r0, r0, #15
   2c4c4:	3301      	adds	r3, #1
   2c4c6:	f7ff ffcd 	bl	2c464 <hex2char>
   2c4ca:	2800      	cmp	r0, #0
   2c4cc:	f105 0502 	add.w	r5, r5, #2
   2c4d0:	dae5      	bge.n	2c49e <bin2hex+0x20>
   2c4d2:	e7dd      	b.n	2c490 <bin2hex+0x12>

0002c4d4 <hex2bin>:

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   2c4d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2c4d6:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   2c4d8:	f001 0001 	and.w	r0, r1, #1
   2c4dc:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   2c4e0:	429d      	cmp	r5, r3
   2c4e2:	ea4f 0651 	mov.w	r6, r1, lsr #1
   2c4e6:	d903      	bls.n	2c4f0 <hex2bin+0x1c>
		return 0;
   2c4e8:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   2c4ea:	4628      	mov	r0, r5
   2c4ec:	b003      	add	sp, #12
   2c4ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   2c4f0:	b158      	cbz	r0, 2c50a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   2c4f2:	7820      	ldrb	r0, [r4, #0]
   2c4f4:	f10d 0107 	add.w	r1, sp, #7
   2c4f8:	f7ff ff9c 	bl	2c434 <char2hex>
   2c4fc:	2800      	cmp	r0, #0
   2c4fe:	dbf3      	blt.n	2c4e8 <hex2bin+0x14>
		buf[0] = dec;
   2c500:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2c504:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   2c508:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2c50a:	3401      	adds	r4, #1
   2c50c:	4416      	add	r6, r2
   2c50e:	42b2      	cmp	r2, r6
   2c510:	d0eb      	beq.n	2c4ea <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2c512:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2c516:	f10d 0107 	add.w	r1, sp, #7
   2c51a:	f7ff ff8b 	bl	2c434 <char2hex>
   2c51e:	2800      	cmp	r0, #0
   2c520:	dbe2      	blt.n	2c4e8 <hex2bin+0x14>
		buf[i] = dec << 4;
   2c522:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2c526:	011b      	lsls	r3, r3, #4
   2c528:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   2c52a:	f814 0b02 	ldrb.w	r0, [r4], #2
   2c52e:	f10d 0107 	add.w	r1, sp, #7
   2c532:	f7ff ff7f 	bl	2c434 <char2hex>
   2c536:	2800      	cmp	r0, #0
   2c538:	dbd6      	blt.n	2c4e8 <hex2bin+0x14>
		buf[i] += dec;
   2c53a:	7813      	ldrb	r3, [r2, #0]
   2c53c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   2c540:	440b      	add	r3, r1
   2c542:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2c546:	e7e2      	b.n	2c50e <hex2bin+0x3a>

0002c548 <sys_notify_validate>:
	if (notify == NULL) {
   2c548:	4603      	mov	r3, r0
   2c54a:	b140      	cbz	r0, 2c55e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   2c54c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   2c54e:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   2c552:	2a02      	cmp	r2, #2
   2c554:	d006      	beq.n	2c564 <sys_notify_validate+0x1c>
   2c556:	2a03      	cmp	r2, #3
   2c558:	d004      	beq.n	2c564 <sys_notify_validate+0x1c>
   2c55a:	2a01      	cmp	r2, #1
   2c55c:	d005      	beq.n	2c56a <sys_notify_validate+0x22>
		return -EINVAL;
   2c55e:	f06f 0015 	mvn.w	r0, #21
}
   2c562:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   2c564:	681a      	ldr	r2, [r3, #0]
   2c566:	2a00      	cmp	r2, #0
   2c568:	d0f9      	beq.n	2c55e <sys_notify_validate+0x16>
		notify->result = 0;
   2c56a:	2000      	movs	r0, #0
   2c56c:	6098      	str	r0, [r3, #8]
   2c56e:	4770      	bx	lr

0002c570 <arch_printk_char_out>:
}
   2c570:	2000      	movs	r0, #0
   2c572:	4770      	bx	lr

0002c574 <str_out>:
{
   2c574:	b530      	push	{r4, r5, lr}
   2c576:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2c578:	680c      	ldr	r4, [r1, #0]
   2c57a:	1c55      	adds	r5, r2, #1
   2c57c:	b114      	cbz	r4, 2c584 <str_out+0x10>
   2c57e:	684b      	ldr	r3, [r1, #4]
   2c580:	4293      	cmp	r3, r2
   2c582:	dc01      	bgt.n	2c588 <str_out+0x14>
		ctx->count++;
   2c584:	608d      	str	r5, [r1, #8]
}
   2c586:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   2c588:	3b01      	subs	r3, #1
   2c58a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   2c58c:	bf08      	it	eq
   2c58e:	2200      	moveq	r2, #0
   2c590:	608d      	str	r5, [r1, #8]
   2c592:	bf0c      	ite	eq
   2c594:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   2c596:	54a0      	strbne	r0, [r4, r2]
   2c598:	e7f5      	b.n	2c586 <str_out+0x12>

0002c59a <printk>:
{
   2c59a:	b40f      	push	{r0, r1, r2, r3}
   2c59c:	b507      	push	{r0, r1, r2, lr}
   2c59e:	a904      	add	r1, sp, #16
   2c5a0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   2c5a4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   2c5a6:	f7e4 fe29 	bl	111fc <vprintk>
}
   2c5aa:	b003      	add	sp, #12
   2c5ac:	f85d eb04 	ldr.w	lr, [sp], #4
   2c5b0:	b004      	add	sp, #16
   2c5b2:	4770      	bx	lr

0002c5b4 <snprintk>:
{
   2c5b4:	b40c      	push	{r2, r3}
   2c5b6:	b507      	push	{r0, r1, r2, lr}
   2c5b8:	ab04      	add	r3, sp, #16
   2c5ba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   2c5be:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   2c5c0:	f7e4 fe2a 	bl	11218 <vsnprintk>
}
   2c5c4:	b003      	add	sp, #12
   2c5c6:	f85d eb04 	ldr.w	lr, [sp], #4
   2c5ca:	b002      	add	sp, #8
   2c5cc:	4770      	bx	lr

0002c5ce <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   2c5ce:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   2c5d0:	f013 0307 	ands.w	r3, r3, #7
   2c5d4:	d105      	bne.n	2c5e2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   2c5d6:	6803      	ldr	r3, [r0, #0]
   2c5d8:	2b00      	cmp	r3, #0
		evt = EVT_START;
   2c5da:	bf0c      	ite	eq
   2c5dc:	2000      	moveq	r0, #0
   2c5de:	2003      	movne	r0, #3
   2c5e0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   2c5e2:	2b02      	cmp	r3, #2
   2c5e4:	d105      	bne.n	2c5f2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   2c5e6:	8bc3      	ldrh	r3, [r0, #30]
   2c5e8:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   2c5ea:	bf14      	ite	ne
   2c5ec:	2000      	movne	r0, #0
   2c5ee:	2004      	moveq	r0, #4
   2c5f0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   2c5f2:	2b01      	cmp	r3, #1
   2c5f4:	d105      	bne.n	2c602 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   2c5f6:	6803      	ldr	r3, [r0, #0]
   2c5f8:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   2c5fa:	bf0c      	ite	eq
   2c5fc:	2000      	moveq	r0, #0
   2c5fe:	2005      	movne	r0, #5
   2c600:	4770      	bx	lr
	int evt = EVT_NOP;
   2c602:	2000      	movs	r0, #0
}
   2c604:	4770      	bx	lr

0002c606 <notify_one>:
{
   2c606:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c60a:	460d      	mov	r5, r1
   2c60c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c60e:	4619      	mov	r1, r3
   2c610:	1d28      	adds	r0, r5, #4
{
   2c612:	4690      	mov	r8, r2
   2c614:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   2c616:	f7e4 fdb9 	bl	1118c <sys_notify_finalize>
	if (cb) {
   2c61a:	4604      	mov	r4, r0
   2c61c:	b138      	cbz	r0, 2c62e <notify_one+0x28>
		cb(mgr, cli, state, res);
   2c61e:	4633      	mov	r3, r6
   2c620:	4642      	mov	r2, r8
   2c622:	4629      	mov	r1, r5
   2c624:	4638      	mov	r0, r7
   2c626:	46a4      	mov	ip, r4
}
   2c628:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   2c62c:	4760      	bx	ip
}
   2c62e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c632 <validate_args>:
{
   2c632:	b510      	push	{r4, lr}
   2c634:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   2c636:	b140      	cbz	r0, 2c64a <validate_args+0x18>
   2c638:	b139      	cbz	r1, 2c64a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   2c63a:	1d08      	adds	r0, r1, #4
   2c63c:	f7ff ff84 	bl	2c548 <sys_notify_validate>
	if ((rv == 0)
   2c640:	b928      	cbnz	r0, 2c64e <validate_args+0x1c>
	    && ((cli->notify.flags
   2c642:	68a3      	ldr	r3, [r4, #8]
   2c644:	f033 0303 	bics.w	r3, r3, #3
   2c648:	d001      	beq.n	2c64e <validate_args+0x1c>
		rv = -EINVAL;
   2c64a:	f06f 0015 	mvn.w	r0, #21
}
   2c64e:	bd10      	pop	{r4, pc}

0002c650 <onoff_manager_init>:
{
   2c650:	b538      	push	{r3, r4, r5, lr}
   2c652:	460c      	mov	r4, r1
	if ((mgr == NULL)
   2c654:	4605      	mov	r5, r0
   2c656:	b158      	cbz	r0, 2c670 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   2c658:	b151      	cbz	r1, 2c670 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   2c65a:	680b      	ldr	r3, [r1, #0]
   2c65c:	b143      	cbz	r3, 2c670 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   2c65e:	684b      	ldr	r3, [r1, #4]
   2c660:	b133      	cbz	r3, 2c670 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   2c662:	2220      	movs	r2, #32
   2c664:	2100      	movs	r1, #0
   2c666:	f003 ffe0 	bl	3062a <memset>
   2c66a:	612c      	str	r4, [r5, #16]
	return 0;
   2c66c:	2000      	movs	r0, #0
}
   2c66e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2c670:	f06f 0015 	mvn.w	r0, #21
   2c674:	e7fb      	b.n	2c66e <onoff_manager_init+0x1e>

0002c676 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2c676:	4604      	mov	r4, r0
   2c678:	b508      	push	{r3, lr}
   2c67a:	4608      	mov	r0, r1
   2c67c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   2c67e:	461a      	mov	r2, r3
   2c680:	47a0      	blx	r4
	return z_impl_z_current_get();
   2c682:	f7fb faa9 	bl	27bd8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   2c686:	f7eb f9f1 	bl	17a6c <z_impl_k_thread_abort>

0002c68a <timeutil_timegm>:

time_t timeutil_timegm(const struct tm *tm)
{
   2c68a:	b538      	push	{r3, r4, r5, lr}
	int64_t time = timeutil_timegm64(tm);
   2c68c:	f7e5 f89c 	bl	117c8 <timeutil_timegm64>
   2c690:	4605      	mov	r5, r0
   2c692:	460c      	mov	r4, r1
	time_t rv = (time_t)time;

	errno = 0;
   2c694:	f001 fd85 	bl	2e1a2 <__errno>
   2c698:	2300      	movs	r3, #0
   2c69a:	6003      	str	r3, [r0, #0]
		errno = ERANGE;
		rv = -1;
	}

	return rv;
}
   2c69c:	4621      	mov	r1, r4
   2c69e:	4628      	mov	r0, r5
   2c6a0:	bd38      	pop	{r3, r4, r5, pc}

0002c6a2 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   2c6a2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   2c6a6:	8840      	ldrh	r0, [r0, #2]
}
   2c6a8:	0840      	lsrs	r0, r0, #1
   2c6aa:	4770      	bx	lr

0002c6ac <free_list_add>:
{
   2c6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2c6ae:	4603      	mov	r3, r0
   2c6b0:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c6b2:	f7ff fff6 	bl	2c6a2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2c6b6:	fab0 f080 	clz	r0, r0
   2c6ba:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   2c6be:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   2c6c2:	00ca      	lsls	r2, r1, #3
   2c6c4:	f8dc 6010 	ldr.w	r6, [ip, #16]
   2c6c8:	1d17      	adds	r7, r2, #4
   2c6ca:	b28d      	uxth	r5, r1
   2c6cc:	3206      	adds	r2, #6
   2c6ce:	b956      	cbnz	r6, 2c6e6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   2c6d0:	2101      	movs	r1, #1
   2c6d2:	fa01 f000 	lsl.w	r0, r1, r0
   2c6d6:	68d9      	ldr	r1, [r3, #12]
   2c6d8:	4301      	orrs	r1, r0
   2c6da:	60d9      	str	r1, [r3, #12]
		b->next = c;
   2c6dc:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   2c6e0:	53dd      	strh	r5, [r3, r7]
   2c6e2:	529d      	strh	r5, [r3, r2]
}
   2c6e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   2c6e6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   2c6e8:	3104      	adds	r1, #4
   2c6ea:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   2c6ec:	53d8      	strh	r0, [r3, r7]
   2c6ee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   2c6f2:	529e      	strh	r6, [r3, r2]
   2c6f4:	80c5      	strh	r5, [r0, #6]
   2c6f6:	525d      	strh	r5, [r3, r1]
   2c6f8:	e7f4      	b.n	2c6e4 <free_list_add+0x38>

0002c6fa <free_list_remove_bidx>:
{
   2c6fa:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   2c6fc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   2c700:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   2c702:	4299      	cmp	r1, r3
   2c704:	f102 0104 	add.w	r1, r2, #4
   2c708:	d10a      	bne.n	2c720 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   2c70a:	2301      	movs	r3, #1
   2c70c:	fa03 f202 	lsl.w	r2, r3, r2
   2c710:	68c3      	ldr	r3, [r0, #12]
   2c712:	ea23 0302 	bic.w	r3, r3, r2
   2c716:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   2c718:	2300      	movs	r3, #0
   2c71a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   2c71e:	bd10      	pop	{r4, pc}
   2c720:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   2c722:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   2c726:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   2c72a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2c72e:	80cb      	strh	r3, [r1, #6]
   2c730:	8082      	strh	r2, [r0, #4]
}
   2c732:	e7f4      	b.n	2c71e <free_list_remove_bidx+0x24>

0002c734 <free_list_remove>:
{
   2c734:	b510      	push	{r4, lr}
   2c736:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   2c738:	f7ff ffb3 	bl	2c6a2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   2c73c:	fab0 f280 	clz	r2, r0
}
   2c740:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   2c744:	f1c2 021f 	rsb	r2, r2, #31
   2c748:	4618      	mov	r0, r3
   2c74a:	f7ff bfd6 	b.w	2c6fa <free_list_remove_bidx>

0002c74e <alloc_chunk>:
{
   2c74e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2c752:	fab1 f581 	clz	r5, r1
   2c756:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   2c75a:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   2c75e:	4603      	mov	r3, r0
	if (b->next) {
   2c760:	693a      	ldr	r2, [r7, #16]
{
   2c762:	460e      	mov	r6, r1
	if (b->next) {
   2c764:	b1ca      	cbz	r2, 2c79a <alloc_chunk+0x4c>
   2c766:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   2c76a:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   2c76c:	4618      	mov	r0, r3
   2c76e:	4621      	mov	r1, r4
   2c770:	f7ff ff97 	bl	2c6a2 <chunk_size>
   2c774:	42b0      	cmp	r0, r6
   2c776:	d307      	bcc.n	2c788 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   2c778:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   2c77a:	4621      	mov	r1, r4
   2c77c:	4618      	mov	r0, r3
   2c77e:	f7ff ffbc 	bl	2c6fa <free_list_remove_bidx>
}
   2c782:	4620      	mov	r0, r4
   2c784:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   2c788:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   2c78c:	f1b8 0801 	subs.w	r8, r8, #1
   2c790:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   2c792:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   2c794:	d001      	beq.n	2c79a <alloc_chunk+0x4c>
   2c796:	428a      	cmp	r2, r1
   2c798:	d1e7      	bne.n	2c76a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   2c79a:	68d9      	ldr	r1, [r3, #12]
   2c79c:	f1c5 0520 	rsb	r5, r5, #32
   2c7a0:	f04f 34ff 	mov.w	r4, #4294967295
   2c7a4:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   2c7a6:	400c      	ands	r4, r1
   2c7a8:	d0eb      	beq.n	2c782 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   2c7aa:	fa94 f2a4 	rbit	r2, r4
   2c7ae:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   2c7b2:	1d11      	adds	r1, r2, #4
   2c7b4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   2c7b8:	e7df      	b.n	2c77a <alloc_chunk+0x2c>

0002c7ba <merge_chunks>:
{
   2c7ba:	b538      	push	{r3, r4, r5, lr}
   2c7bc:	4603      	mov	r3, r0
   2c7be:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   2c7c0:	f7ff ff6f 	bl	2c6a2 <chunk_size>
   2c7c4:	4611      	mov	r1, r2
   2c7c6:	4604      	mov	r4, r0
   2c7c8:	4618      	mov	r0, r3
   2c7ca:	f7ff ff6a 	bl	2c6a2 <chunk_size>
   2c7ce:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   2c7d0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2c7d4:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   2c7d6:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   2c7d8:	4618      	mov	r0, r3
   2c7da:	4611      	mov	r1, r2
   2c7dc:	f7ff ff61 	bl	2c6a2 <chunk_size>
	void *cmem = &buf[c];
   2c7e0:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   2c7e2:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   2c7e6:	bd38      	pop	{r3, r4, r5, pc}

0002c7e8 <split_chunks>:
{
   2c7e8:	b538      	push	{r3, r4, r5, lr}
   2c7ea:	4603      	mov	r3, r0
   2c7ec:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   2c7ee:	f7ff ff58 	bl	2c6a2 <chunk_size>
	chunksz_t lsz = rc - lc;
   2c7f2:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   2c7f4:	1aa5      	subs	r5, r4, r2
   2c7f6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   2c7fa:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2c7fc:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   2c7fe:	8060      	strh	r0, [r4, #2]
   2c800:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   2c804:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   2c806:	8044      	strh	r4, [r0, #2]
   2c808:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   2c80c:	4618      	mov	r0, r3
   2c80e:	4611      	mov	r1, r2
   2c810:	f7ff ff47 	bl	2c6a2 <chunk_size>
	void *cmem = &buf[c];
   2c814:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   2c816:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   2c81a:	bd38      	pop	{r3, r4, r5, pc}

0002c81c <free_chunk>:
{
   2c81c:	b538      	push	{r3, r4, r5, lr}
   2c81e:	4605      	mov	r5, r0
   2c820:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   2c822:	f7ff ff3e 	bl	2c6a2 <chunk_size>
   2c826:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   2c828:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2c82c:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   2c82e:	07da      	lsls	r2, r3, #31
   2c830:	d40a      	bmi.n	2c848 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   2c832:	4628      	mov	r0, r5
   2c834:	f7ff ff7e 	bl	2c734 <free_list_remove>
	return c + chunk_size(h, c);
   2c838:	4621      	mov	r1, r4
   2c83a:	4628      	mov	r0, r5
   2c83c:	f7ff ff31 	bl	2c6a2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   2c840:	1822      	adds	r2, r4, r0
   2c842:	4628      	mov	r0, r5
   2c844:	f7ff ffb9 	bl	2c7ba <merge_chunks>
		return ((uint16_t *)cmem)[f];
   2c848:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2c84c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   2c84e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2c852:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   2c854:	07db      	lsls	r3, r3, #31
   2c856:	d40c      	bmi.n	2c872 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   2c858:	4628      	mov	r0, r5
   2c85a:	f7ff ff6b 	bl	2c734 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   2c85e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   2c862:	4622      	mov	r2, r4
   2c864:	1a61      	subs	r1, r4, r1
   2c866:	4628      	mov	r0, r5
   2c868:	f7ff ffa7 	bl	2c7ba <merge_chunks>
   2c86c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   2c870:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   2c872:	4621      	mov	r1, r4
   2c874:	4628      	mov	r0, r5
}
   2c876:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   2c87a:	f7ff bf17 	b.w	2c6ac <free_list_add>

0002c87e <sys_heap_alloc>:
{
   2c87e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   2c880:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   2c882:	b909      	cbnz	r1, 2c888 <sys_heap_alloc+0xa>
		return NULL;
   2c884:	2000      	movs	r0, #0
}
   2c886:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   2c888:	68ab      	ldr	r3, [r5, #8]
   2c88a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   2c88e:	d9f9      	bls.n	2c884 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   2c890:	310b      	adds	r1, #11
   2c892:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   2c894:	4621      	mov	r1, r4
   2c896:	4628      	mov	r0, r5
   2c898:	f7ff ff59 	bl	2c74e <alloc_chunk>
	if (c == 0U) {
   2c89c:	4606      	mov	r6, r0
   2c89e:	2800      	cmp	r0, #0
   2c8a0:	d0f0      	beq.n	2c884 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   2c8a2:	4601      	mov	r1, r0
   2c8a4:	4628      	mov	r0, r5
   2c8a6:	f7ff fefc 	bl	2c6a2 <chunk_size>
   2c8aa:	42a0      	cmp	r0, r4
   2c8ac:	d908      	bls.n	2c8c0 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   2c8ae:	4434      	add	r4, r6
   2c8b0:	4628      	mov	r0, r5
   2c8b2:	4622      	mov	r2, r4
   2c8b4:	f7ff ff98 	bl	2c7e8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   2c8b8:	4621      	mov	r1, r4
   2c8ba:	4628      	mov	r0, r5
   2c8bc:	f7ff fef6 	bl	2c6ac <free_list_add>
	void *cmem = &buf[c];
   2c8c0:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   2c8c4:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   2c8c6:	8853      	ldrh	r3, [r2, #2]
   2c8c8:	f043 0301 	orr.w	r3, r3, #1
   2c8cc:	8053      	strh	r3, [r2, #2]
   2c8ce:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   2c8d0:	e7d9      	b.n	2c886 <sys_heap_alloc+0x8>

0002c8d2 <outs>:
{
   2c8d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c8d6:	4607      	mov	r7, r0
   2c8d8:	4688      	mov	r8, r1
   2c8da:	4615      	mov	r5, r2
   2c8dc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   2c8de:	4614      	mov	r4, r2
   2c8e0:	42b4      	cmp	r4, r6
   2c8e2:	eba4 0005 	sub.w	r0, r4, r5
   2c8e6:	d302      	bcc.n	2c8ee <outs+0x1c>
   2c8e8:	b93e      	cbnz	r6, 2c8fa <outs+0x28>
   2c8ea:	7823      	ldrb	r3, [r4, #0]
   2c8ec:	b12b      	cbz	r3, 2c8fa <outs+0x28>
		int rc = out((int)*sp++, ctx);
   2c8ee:	f814 0b01 	ldrb.w	r0, [r4], #1
   2c8f2:	4641      	mov	r1, r8
   2c8f4:	47b8      	blx	r7
		if (rc < 0) {
   2c8f6:	2800      	cmp	r0, #0
   2c8f8:	daf2      	bge.n	2c8e0 <outs+0xe>
}
   2c8fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c8fe <ring_buf_get_rewind_threshold>:
}
   2c8fe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   2c902:	4770      	bx	lr

0002c904 <ring_buf_is_empty>:
{
   2c904:	b570      	push	{r4, r5, r6, lr}
	uint32_t head = buf->head;
   2c906:	e9d0 5400 	ldrd	r5, r4, [r0]
	if (tail < head) {
   2c90a:	42ac      	cmp	r4, r5
   2c90c:	d206      	bcs.n	2c91c <ring_buf_is_empty+0x18>
		tail += get_rewind_value(buf->size,
   2c90e:	6906      	ldr	r6, [r0, #16]
   2c910:	f7ff fff5 	bl	2c8fe <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
   2c914:	fbb0 f0f6 	udiv	r0, r0, r6
		tail += get_rewind_value(buf->size,
   2c918:	fb06 4400 	mla	r4, r6, r0, r4
}
   2c91c:	1b63      	subs	r3, r4, r5
   2c91e:	4258      	negs	r0, r3
   2c920:	4158      	adcs	r0, r3
   2c922:	bd70      	pop	{r4, r5, r6, pc}

0002c924 <ring_buf_put_claim>:
{
   2c924:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2c926:	6985      	ldr	r5, [r0, #24]
	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   2c928:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2c92a:	6907      	ldr	r7, [r0, #16]
{
   2c92c:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2c92e:	b185      	cbz	r5, 2c952 <ring_buf_put_claim+0x2e>
   2c930:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   2c932:	6823      	ldr	r3, [r4, #0]
   2c934:	443b      	add	r3, r7
   2c936:	1b98      	subs	r0, r3, r6
	size = MIN(size, space);
   2c938:	4290      	cmp	r0, r2
   2c93a:	bf28      	it	cs
   2c93c:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
   2c93e:	1b7f      	subs	r7, r7, r5
	*data = &buf->buf.buf8[tmp_trail_mod];
   2c940:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
   2c942:	42b8      	cmp	r0, r7
   2c944:	bf28      	it	cs
   2c946:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   2c948:	441d      	add	r5, r3
		buf->misc.byte_mode.tmp_tail + allocated;
   2c94a:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   2c94c:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   2c94e:	60a6      	str	r6, [r4, #8]
}
   2c950:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2c952:	fbb6 f5f7 	udiv	r5, r6, r7
   2c956:	fb07 6515 	mls	r5, r7, r5, r6
   2c95a:	e7ea      	b.n	2c932 <ring_buf_put_claim+0xe>

0002c95c <ring_buf_put_finish>:
{
   2c95c:	b570      	push	{r4, r5, r6, lr}
   2c95e:	4605      	mov	r5, r0
   2c960:	460c      	mov	r4, r1
	uint32_t threshold = ring_buf_get_rewind_threshold();
   2c962:	f7ff ffcc 	bl	2c8fe <ring_buf_get_rewind_threshold>
	if ((buf->tail + size) > (buf->head + buf->size)) {
   2c966:	686e      	ldr	r6, [r5, #4]
   2c968:	692b      	ldr	r3, [r5, #16]
   2c96a:	682a      	ldr	r2, [r5, #0]
   2c96c:	1931      	adds	r1, r6, r4
   2c96e:	441a      	add	r2, r3
   2c970:	4291      	cmp	r1, r2
   2c972:	d80a      	bhi.n	2c98a <ring_buf_put_finish+0x2e>
	if (buf->tail > threshold) {
   2c974:	4286      	cmp	r6, r0
		rew = 0;
   2c976:	bf92      	itee	ls
   2c978:	2300      	movls	r3, #0
	return buf_size * (threshold / buf_size);
   2c97a:	fbb0 f0f3 	udivhi	r0, r0, r3
   2c97e:	4343      	mulhi	r3, r0
	buf->tail += (size - rew);
   2c980:	1ac9      	subs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   2c982:	e9c5 1101 	strd	r1, r1, [r5, #4]
	return 0;
   2c986:	2000      	movs	r0, #0
}
   2c988:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2c98a:	f06f 0015 	mvn.w	r0, #21
   2c98e:	e7fb      	b.n	2c988 <ring_buf_put_finish+0x2c>

0002c990 <ring_buf_get_claim>:
{
   2c990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tail < buf->misc.byte_mode.tmp_head) {
   2c994:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
   2c996:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   2c998:	42b3      	cmp	r3, r6
{
   2c99a:	4604      	mov	r4, r0
   2c99c:	460f      	mov	r7, r1
   2c99e:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
   2c9a0:	d906      	bls.n	2c9b0 <ring_buf_get_claim+0x20>
   2c9a2:	6905      	ldr	r5, [r0, #16]
		tail += get_rewind_value(buf->size,
   2c9a4:	f7ff ffab 	bl	2c8fe <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
   2c9a8:	fbb0 f0f5 	udiv	r0, r0, r5
		tail += get_rewind_value(buf->size,
   2c9ac:	fb05 6600 	mla	r6, r5, r0, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2c9b0:	69a5      	ldr	r5, [r4, #24]
	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   2c9b2:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2c9b4:	6923      	ldr	r3, [r4, #16]
   2c9b6:	b185      	cbz	r5, 2c9da <ring_buf_get_claim+0x4a>
   2c9b8:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
   2c9ba:	1a70      	subs	r0, r6, r1
	granted_size = MIN(size, space);
   2c9bc:	4540      	cmp	r0, r8
   2c9be:	bf28      	it	cs
   2c9c0:	4640      	movcs	r0, r8
   2c9c2:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
   2c9c4:	1b58      	subs	r0, r3, r5
	granted_size = MIN(trail_size, granted_size);
   2c9c6:	42b0      	cmp	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   2c9c8:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
   2c9ca:	bf28      	it	cs
   2c9cc:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   2c9ce:	441d      	add	r5, r3
	buf->misc.byte_mode.tmp_head += granted_size;
   2c9d0:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   2c9d2:	603d      	str	r5, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   2c9d4:	60e1      	str	r1, [r4, #12]
}
   2c9d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   2c9da:	fbb1 f5f3 	udiv	r5, r1, r3
   2c9de:	fb03 1515 	mls	r5, r3, r5, r1
   2c9e2:	e7ea      	b.n	2c9ba <ring_buf_get_claim+0x2a>

0002c9e4 <ring_buf_get_finish>:
{
   2c9e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
   2c9e6:	6847      	ldr	r7, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   2c9e8:	68c3      	ldr	r3, [r0, #12]
   2c9ea:	42bb      	cmp	r3, r7
{
   2c9ec:	4605      	mov	r5, r0
   2c9ee:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
   2c9f0:	d912      	bls.n	2ca18 <ring_buf_get_finish+0x34>
		rew = get_rewind_value(buf->size,
   2c9f2:	6906      	ldr	r6, [r0, #16]
   2c9f4:	f7ff ff83 	bl	2c8fe <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
   2c9f8:	fbb0 f0f6 	udiv	r0, r0, r6
   2c9fc:	4370      	muls	r0, r6
		tail += rew;
   2c9fe:	4407      	add	r7, r0
	if ((buf->head + size) > tail) {
   2ca00:	6829      	ldr	r1, [r5, #0]
   2ca02:	4421      	add	r1, r4
   2ca04:	42b9      	cmp	r1, r7
	buf->head += (size - rew);
   2ca06:	bf9f      	itttt	ls
   2ca08:	1a09      	subls	r1, r1, r0
   2ca0a:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   2ca0c:	60e9      	strls	r1, [r5, #12]
	return 0;
   2ca0e:	2000      	movls	r0, #0
		return -EINVAL;
   2ca10:	bf88      	it	hi
   2ca12:	f06f 0015 	mvnhi.w	r0, #21
}
   2ca16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
   2ca18:	2000      	movs	r0, #0
   2ca1a:	e7f1      	b.n	2ca00 <ring_buf_get_finish+0x1c>

0002ca1c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2ca1c:	4040      	eors	r0, r0
   2ca1e:	f380 8811 	msr	BASEPRI, r0
   2ca22:	f04f 0004 	mov.w	r0, #4
   2ca26:	df02      	svc	2
}
   2ca28:	4770      	bx	lr

0002ca2a <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   2ca2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ca2e:	b087      	sub	sp, #28
   2ca30:	468a      	mov	sl, r1
   2ca32:	4614      	mov	r4, r2
   2ca34:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   2ca36:	4605      	mov	r5, r0
   2ca38:	b918      	cbnz	r0, 2ca42 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   2ca3a:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   2ca3c:	b007      	add	sp, #28
   2ca3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   2ca42:	2900      	cmp	r1, #0
   2ca44:	d0f9      	beq.n	2ca3a <fnmatchx+0x10>
    if (recursion-- == 0)
   2ca46:	9b02      	ldr	r3, [sp, #8]
   2ca48:	2b00      	cmp	r3, #0
   2ca4a:	f000 811a 	beq.w	2cc82 <fnmatchx+0x258>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   2ca4e:	f004 0304 	and.w	r3, r4, #4
   2ca52:	460a      	mov	r2, r1
   2ca54:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   2ca56:	46a8      	mov	r8, r5
   2ca58:	4621      	mov	r1, r4
   2ca5a:	f818 0b01 	ldrb.w	r0, [r8], #1
   2ca5e:	f7e5 fd11 	bl	12484 <foldcase>
   2ca62:	4603      	mov	r3, r0
   2ca64:	b2c0      	uxtb	r0, r0
   2ca66:	283f      	cmp	r0, #63	; 0x3f
   2ca68:	7817      	ldrb	r7, [r2, #0]
   2ca6a:	4606      	mov	r6, r0
   2ca6c:	d024      	beq.n	2cab8 <fnmatchx+0x8e>
   2ca6e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   2ca72:	d10a      	bne.n	2ca8a <fnmatchx+0x60>
   2ca74:	b1c0      	cbz	r0, 2caa8 <fnmatchx+0x7e>
   2ca76:	282a      	cmp	r0, #42	; 0x2a
   2ca78:	d035      	beq.n	2cae6 <fnmatchx+0xbc>
            if (c != FOLDCASE(*string++, flags))
   2ca7a:	4621      	mov	r1, r4
   2ca7c:	4638      	mov	r0, r7
   2ca7e:	3201      	adds	r2, #1
   2ca80:	f7e5 fd00 	bl	12484 <foldcase>
   2ca84:	4286      	cmp	r6, r0
   2ca86:	d01e      	beq.n	2cac6 <fnmatchx+0x9c>
   2ca88:	e7d7      	b.n	2ca3a <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   2ca8a:	285b      	cmp	r0, #91	; 0x5b
   2ca8c:	d07b      	beq.n	2cb86 <fnmatchx+0x15c>
   2ca8e:	285c      	cmp	r0, #92	; 0x5c
   2ca90:	d1f3      	bne.n	2ca7a <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
   2ca92:	07e3      	lsls	r3, r4, #31
   2ca94:	d4f1      	bmi.n	2ca7a <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   2ca96:	7868      	ldrb	r0, [r5, #1]
   2ca98:	f7e5 fcf4 	bl	12484 <foldcase>
   2ca9c:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   2caa0:	bf18      	it	ne
   2caa2:	f105 0802 	addne.w	r8, r5, #2
   2caa6:	e7e8      	b.n	2ca7a <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   2caa8:	06e4      	lsls	r4, r4, #27
   2caaa:	d501      	bpl.n	2cab0 <fnmatchx+0x86>
   2caac:	2f2f      	cmp	r7, #47	; 0x2f
   2caae:	d0c5      	beq.n	2ca3c <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   2cab0:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
   2cab2:	bf18      	it	ne
   2cab4:	2001      	movne	r0, #1
   2cab6:	e7c1      	b.n	2ca3c <fnmatchx+0x12>
            if (*string == EOS)
   2cab8:	2f00      	cmp	r7, #0
   2caba:	d0be      	beq.n	2ca3a <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   2cabc:	2f2f      	cmp	r7, #47	; 0x2f
   2cabe:	d104      	bne.n	2caca <fnmatchx+0xa0>
   2cac0:	07a1      	lsls	r1, r4, #30
   2cac2:	d4ba      	bmi.n	2ca3a <fnmatchx+0x10>
            ++string;
   2cac4:	3201      	adds	r2, #1
            break;
   2cac6:	4645      	mov	r5, r8
   2cac8:	e7c5      	b.n	2ca56 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   2caca:	2f2e      	cmp	r7, #46	; 0x2e
   2cacc:	d1fa      	bne.n	2cac4 <fnmatchx+0x9a>
   2cace:	9b04      	ldr	r3, [sp, #16]
   2cad0:	2b00      	cmp	r3, #0
   2cad2:	d0f7      	beq.n	2cac4 <fnmatchx+0x9a>
   2cad4:	4552      	cmp	r2, sl
   2cad6:	d0b0      	beq.n	2ca3a <fnmatchx+0x10>
                (string == stringstart ||
   2cad8:	07a3      	lsls	r3, r4, #30
   2cada:	d5f3      	bpl.n	2cac4 <fnmatchx+0x9a>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   2cadc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   2cae0:	2b2f      	cmp	r3, #47	; 0x2f
   2cae2:	d1ef      	bne.n	2cac4 <fnmatchx+0x9a>
   2cae4:	e7a9      	b.n	2ca3a <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   2cae6:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   2cae8:	f7e5 fccc 	bl	12484 <foldcase>
   2caec:	b2c1      	uxtb	r1, r0
            while (c == '*')
   2caee:	292a      	cmp	r1, #42	; 0x2a
   2caf0:	d018      	beq.n	2cb24 <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   2caf2:	2f2e      	cmp	r7, #46	; 0x2e
   2caf4:	d109      	bne.n	2cb0a <fnmatchx+0xe0>
   2caf6:	9b04      	ldr	r3, [sp, #16]
   2caf8:	b13b      	cbz	r3, 2cb0a <fnmatchx+0xe0>
   2cafa:	4552      	cmp	r2, sl
   2cafc:	d09d      	beq.n	2ca3a <fnmatchx+0x10>
                (string == stringstart ||
   2cafe:	07a7      	lsls	r7, r4, #30
   2cb00:	d503      	bpl.n	2cb0a <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   2cb02:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   2cb06:	2b2f      	cmp	r3, #47	; 0x2f
   2cb08:	d097      	beq.n	2ca3a <fnmatchx+0x10>
            if (c == EOS) {
   2cb0a:	b979      	cbnz	r1, 2cb2c <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
   2cb0c:	f014 0002 	ands.w	r0, r4, #2
   2cb10:	d094      	beq.n	2ca3c <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   2cb12:	06e6      	lsls	r6, r4, #27
   2cb14:	f100 80b7 	bmi.w	2cc86 <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
   2cb18:	212f      	movs	r1, #47	; 0x2f
   2cb1a:	4610      	mov	r0, r2
   2cb1c:	f003 fd8d 	bl	3063a <strchr>
                        0 : FNM_NOMATCH;
   2cb20:	3800      	subs	r0, #0
   2cb22:	e7c6      	b.n	2cab2 <fnmatchx+0x88>
                c = FOLDCASE(*++pattern, flags);
   2cb24:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   2cb28:	4621      	mov	r1, r4
   2cb2a:	e7dd      	b.n	2cae8 <fnmatchx+0xbe>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   2cb2c:	292f      	cmp	r1, #47	; 0x2f
   2cb2e:	d021      	beq.n	2cb74 <fnmatchx+0x14a>
    if (recursion-- == 0)
   2cb30:	9b02      	ldr	r3, [sp, #8]
   2cb32:	4616      	mov	r6, r2
   2cb34:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
   2cb36:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
   2cb3a:	f004 0a02 	and.w	sl, r4, #2
   2cb3e:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   2cb40:	4621      	mov	r1, r4
   2cb42:	f89b 0000 	ldrb.w	r0, [fp]
   2cb46:	f7e5 fc9d 	bl	12484 <foldcase>
   2cb4a:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   2cb4e:	f106 0601 	add.w	r6, r6, #1
   2cb52:	f43f af72 	beq.w	2ca3a <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   2cb56:	463b      	mov	r3, r7
   2cb58:	464a      	mov	r2, r9
   2cb5a:	4659      	mov	r1, fp
   2cb5c:	4640      	mov	r0, r8
   2cb5e:	f7ff ff64 	bl	2ca2a <fnmatchx>
   2cb62:	2801      	cmp	r0, #1
   2cb64:	f47f af6a 	bne.w	2ca3c <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   2cb68:	2d2f      	cmp	r5, #47	; 0x2f
   2cb6a:	d1e8      	bne.n	2cb3e <fnmatchx+0x114>
   2cb6c:	f1ba 0f00 	cmp.w	sl, #0
   2cb70:	d0e5      	beq.n	2cb3e <fnmatchx+0x114>
   2cb72:	e762      	b.n	2ca3a <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   2cb74:	07a5      	lsls	r5, r4, #30
   2cb76:	d5db      	bpl.n	2cb30 <fnmatchx+0x106>
                if ((string = strchr(string, '/')) == NULL)
   2cb78:	4610      	mov	r0, r2
   2cb7a:	f003 fd5e 	bl	3063a <strchr>
   2cb7e:	4602      	mov	r2, r0
   2cb80:	2800      	cmp	r0, #0
   2cb82:	d1a0      	bne.n	2cac6 <fnmatchx+0x9c>
   2cb84:	e759      	b.n	2ca3a <fnmatchx+0x10>
            if (*string == EOS)
   2cb86:	2f00      	cmp	r7, #0
   2cb88:	f43f af57 	beq.w	2ca3a <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   2cb8c:	2f2f      	cmp	r7, #47	; 0x2f
   2cb8e:	d102      	bne.n	2cb96 <fnmatchx+0x16c>
   2cb90:	07a0      	lsls	r0, r4, #30
   2cb92:	f53f af52 	bmi.w	2ca3a <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   2cb96:	4621      	mov	r1, r4
   2cb98:	4638      	mov	r0, r7
   2cb9a:	f7e5 fc73 	bl	12484 <foldcase>
   2cb9e:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
   2cba0:	f1b8 0f00 	cmp.w	r8, #0
   2cba4:	f43f af49 	beq.w	2ca3a <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   2cba8:	786b      	ldrb	r3, [r5, #1]
   2cbaa:	2b21      	cmp	r3, #33	; 0x21
   2cbac:	d001      	beq.n	2cbb2 <fnmatchx+0x188>
   2cbae:	2b5e      	cmp	r3, #94	; 0x5e
   2cbb0:	d126      	bne.n	2cc00 <fnmatchx+0x1d6>
        ++pattern;
   2cbb2:	3502      	adds	r5, #2
   2cbb4:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   2cbb6:	9301      	str	r3, [sp, #4]
    need = 1;
   2cbb8:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   2cbba:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   2cbbe:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   2cbc2:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   2cbc4:	462e      	mov	r6, r5
   2cbc6:	4621      	mov	r1, r4
   2cbc8:	f816 0b01 	ldrb.w	r0, [r6], #1
   2cbcc:	9305      	str	r3, [sp, #20]
   2cbce:	f7e5 fc59 	bl	12484 <foldcase>
   2cbd2:	fa5f f980 	uxtb.w	r9, r0
   2cbd6:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   2cbda:	9b05      	ldr	r3, [sp, #20]
   2cbdc:	d113      	bne.n	2cc06 <fnmatchx+0x1dc>
   2cbde:	bb2b      	cbnz	r3, 2cc2c <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
   2cbe0:	9b01      	ldr	r3, [sp, #4]
   2cbe2:	455b      	cmp	r3, fp
   2cbe4:	f43f af29 	beq.w	2ca3a <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   2cbe8:	2e00      	cmp	r6, #0
   2cbea:	f43f af26 	beq.w	2ca3a <fnmatchx+0x10>
            if (r == (void *)-1) {
   2cbee:	1c71      	adds	r1, r6, #1
   2cbf0:	d103      	bne.n	2cbfa <fnmatchx+0x1d0>
                if (*string != '[')
   2cbf2:	2f5b      	cmp	r7, #91	; 0x5b
   2cbf4:	f47f af21 	bne.w	2ca3a <fnmatchx+0x10>
   2cbf8:	4646      	mov	r6, r8
            ++string;
   2cbfa:	3201      	adds	r2, #1
            break;
   2cbfc:	46b0      	mov	r8, r6
   2cbfe:	e762      	b.n	2cac6 <fnmatchx+0x9c>
   2cc00:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   2cc02:	2300      	movs	r3, #0
   2cc04:	e7d7      	b.n	2cbb6 <fnmatchx+0x18c>
        if (c == '/')
   2cc06:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
   2cc0a:	d0f2      	beq.n	2cbf2 <fnmatchx+0x1c8>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   2cc0c:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   2cc10:	d108      	bne.n	2cc24 <fnmatchx+0x1fa>
   2cc12:	9b03      	ldr	r3, [sp, #12]
   2cc14:	b953      	cbnz	r3, 2cc2c <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
   2cc16:	7868      	ldrb	r0, [r5, #1]
   2cc18:	4621      	mov	r1, r4
   2cc1a:	f7e5 fc33 	bl	12484 <foldcase>
   2cc1e:	1cae      	adds	r6, r5, #2
   2cc20:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
   2cc24:	f1b9 0f00 	cmp.w	r9, #0
   2cc28:	f43f af07 	beq.w	2ca3a <fnmatchx+0x10>
        if (*pattern == '-' 
   2cc2c:	7833      	ldrb	r3, [r6, #0]
   2cc2e:	2b2d      	cmp	r3, #45	; 0x2d
   2cc30:	d120      	bne.n	2cc74 <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   2cc32:	7870      	ldrb	r0, [r6, #1]
   2cc34:	4621      	mov	r1, r4
   2cc36:	f7e5 fc25 	bl	12484 <foldcase>
   2cc3a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   2cc3e:	d019      	beq.n	2cc74 <fnmatchx+0x24a>
   2cc40:	285d      	cmp	r0, #93	; 0x5d
   2cc42:	d017      	beq.n	2cc74 <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   2cc44:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   2cc46:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   2cc4a:	d10a      	bne.n	2cc62 <fnmatchx+0x238>
   2cc4c:	9b03      	ldr	r3, [sp, #12]
   2cc4e:	b943      	cbnz	r3, 2cc62 <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
   2cc50:	78b0      	ldrb	r0, [r6, #2]
   2cc52:	f7e5 fc17 	bl	12484 <foldcase>
            if (c2 == EOS)
   2cc56:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   2cc5a:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
   2cc5e:	f43f aeec 	beq.w	2ca3a <fnmatchx+0x10>
            if (c <= test && test <= c2)
   2cc62:	9b00      	ldr	r3, [sp, #0]
   2cc64:	454b      	cmp	r3, r9
   2cc66:	db03      	blt.n	2cc70 <fnmatchx+0x246>
                ok = 1;
   2cc68:	4283      	cmp	r3, r0
   2cc6a:	bfd8      	it	le
   2cc6c:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
   2cc70:	2300      	movs	r3, #0
   2cc72:	e7a7      	b.n	2cbc4 <fnmatchx+0x19a>
        } else if (c == test)
   2cc74:	9b00      	ldr	r3, [sp, #0]
   2cc76:	4635      	mov	r5, r6
   2cc78:	454b      	cmp	r3, r9
   2cc7a:	bf08      	it	eq
   2cc7c:	f04f 0b01 	moveq.w	fp, #1
   2cc80:	e7f6      	b.n	2cc70 <fnmatchx+0x246>
        return FNM_NORES;
   2cc82:	2003      	movs	r0, #3
   2cc84:	e6da      	b.n	2ca3c <fnmatchx+0x12>
                return 0;
   2cc86:	4608      	mov	r0, r1
   2cc88:	e6d8      	b.n	2ca3c <fnmatchx+0x12>

0002cc8a <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   2cc8a:	2340      	movs	r3, #64	; 0x40
   2cc8c:	f7ff becd 	b.w	2ca2a <fnmatchx>

0002cc90 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   2cc90:	4770      	bx	lr

0002cc92 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   2cc92:	2300      	movs	r3, #0
	list->head = NULL;
   2cc94:	e9c0 3300 	strd	r3, r3, [r0]
}
   2cc98:	4770      	bx	lr

0002cc9a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2cc9a:	6803      	ldr	r3, [r0, #0]
   2cc9c:	b923      	cbnz	r3, 2cca8 <log_list_add_tail+0xe>
		list->head = msg;
   2cc9e:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   2cca0:	2300      	movs	r3, #0
	list->tail = msg;
   2cca2:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   2cca4:	600b      	str	r3, [r1, #0]
}
   2cca6:	4770      	bx	lr
		list->tail->next = msg;
   2cca8:	6843      	ldr	r3, [r0, #4]
   2ccaa:	6019      	str	r1, [r3, #0]
   2ccac:	e7f8      	b.n	2cca0 <log_list_add_tail+0x6>

0002ccae <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   2ccae:	6800      	ldr	r0, [r0, #0]
   2ccb0:	4770      	bx	lr

0002ccb2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   2ccb2:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   2ccb4:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   2ccb6:	b108      	cbz	r0, 2ccbc <log_list_head_get+0xa>
		list->head = list->head->next;
   2ccb8:	6802      	ldr	r2, [r0, #0]
   2ccba:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   2ccbc:	4770      	bx	lr

0002ccbe <log_backend_is_active>:
	return backend->cb->active;
   2ccbe:	6843      	ldr	r3, [r0, #4]
}
   2ccc0:	7958      	ldrb	r0, [r3, #5]
   2ccc2:	4770      	bx	lr

0002ccc4 <z_log_msg_std_alloc>:
{
   2ccc4:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   2ccc6:	f7e6 f879 	bl	12dbc <log_msg_chunk_alloc>
	if (msg != NULL) {
   2ccca:	b118      	cbz	r0, 2ccd4 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   2cccc:	2301      	movs	r3, #1
   2ccce:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2ccd0:	2300      	movs	r3, #0
   2ccd2:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   2ccd4:	bd08      	pop	{r3, pc}

0002ccd6 <default_get_timestamp>:
   2ccd6:	f003 b9cf 	b.w	30078 <sys_clock_cycle_get_32>

0002ccda <dummy_timestamp>:
   2ccda:	2000      	movs	r0, #0
   2ccdc:	4770      	bx	lr

0002ccde <log_0>:
{
   2ccde:	b538      	push	{r3, r4, r5, lr}
   2cce0:	4605      	mov	r5, r0
   2cce2:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   2cce4:	f7ff ffee 	bl	2ccc4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2cce8:	b128      	cbz	r0, 2ccf6 <log_0+0x18>
		msg->str = str;
   2ccea:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   2ccec:	4621      	mov	r1, r4
}
   2ccee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   2ccf2:	f7e5 be11 	b.w	12918 <msg_finalize>
}
   2ccf6:	bd38      	pop	{r3, r4, r5, pc}

0002ccf8 <log_1>:
{
   2ccf8:	b570      	push	{r4, r5, r6, lr}
   2ccfa:	4606      	mov	r6, r0
   2ccfc:	460d      	mov	r5, r1
   2ccfe:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2cd00:	f7ff ffe0 	bl	2ccc4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2cd04:	b158      	cbz	r0, 2cd1e <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   2cd06:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   2cd08:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2cd0a:	2101      	movs	r1, #1
   2cd0c:	f361 1207 	bfi	r2, r1, #4, #4
   2cd10:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   2cd12:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   2cd14:	4621      	mov	r1, r4
}
   2cd16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   2cd1a:	f7e5 bdfd 	b.w	12918 <msg_finalize>
}
   2cd1e:	bd70      	pop	{r4, r5, r6, pc}

0002cd20 <log_2>:
{
   2cd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2cd24:	4680      	mov	r8, r0
   2cd26:	460f      	mov	r7, r1
   2cd28:	4616      	mov	r6, r2
   2cd2a:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2cd2c:	f7ff ffca 	bl	2ccc4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2cd30:	b168      	cbz	r0, 2cd4e <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   2cd32:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   2cd34:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   2cd38:	2202      	movs	r2, #2
   2cd3a:	f362 1307 	bfi	r3, r2, #4, #4
   2cd3e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2cd40:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   2cd44:	4629      	mov	r1, r5
}
   2cd46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   2cd4a:	f7e5 bde5 	b.w	12918 <msg_finalize>
}
   2cd4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002cd52 <log_3>:
{
   2cd52:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cd56:	4680      	mov	r8, r0
   2cd58:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   2cd5c:	460f      	mov	r7, r1
   2cd5e:	4616      	mov	r6, r2
   2cd60:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2cd62:	f7ff ffaf 	bl	2ccc4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2cd66:	b170      	cbz	r0, 2cd86 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   2cd68:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   2cd6a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   2cd6e:	2203      	movs	r2, #3
   2cd70:	f362 1307 	bfi	r3, r2, #4, #4
   2cd74:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2cd76:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   2cd7a:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   2cd7c:	4649      	mov	r1, r9
}
   2cd7e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   2cd82:	f7e5 bdc9 	b.w	12918 <msg_finalize>
}
   2cd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002cd8a <log_n>:
{
   2cd8a:	b510      	push	{r4, lr}
   2cd8c:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   2cd8e:	f7e6 f867 	bl	12e60 <log_msg_create_n>
		if (msg == NULL) {
   2cd92:	b120      	cbz	r0, 2cd9e <log_n+0x14>
		msg_finalize(msg, src_level);
   2cd94:	4621      	mov	r1, r4
}
   2cd96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2cd9a:	f7e5 bdbd 	b.w	12918 <msg_finalize>
}
   2cd9e:	bd10      	pop	{r4, pc}

0002cda0 <log_hexdump>:
{
   2cda0:	b510      	push	{r4, lr}
   2cda2:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   2cda4:	f000 f8a3 	bl	2ceee <log_msg_hexdump_create>
		if (msg == NULL) {
   2cda8:	b120      	cbz	r0, 2cdb4 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   2cdaa:	4621      	mov	r1, r4
}
   2cdac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2cdb0:	f7e5 bdb2 	b.w	12918 <msg_finalize>
}
   2cdb4:	bd10      	pop	{r4, pc}

0002cdb6 <z_log_get_tag>:
}
   2cdb6:	2000      	movs	r0, #0
   2cdb8:	4770      	bx	lr

0002cdba <log_msg_hexdump_data_op>:
{
   2cdba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2cdbe:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2cdc0:	8903      	ldrh	r3, [r0, #8]
{
   2cdc2:	f89d 7020 	ldrb.w	r7, [sp, #32]
   2cdc6:	460e      	mov	r6, r1
   2cdc8:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   2cdca:	f3c3 028d 	ubfx	r2, r3, #2, #14
	if (offset >= available_len) {
   2cdce:	42a2      	cmp	r2, r4
   2cdd0:	d803      	bhi.n	2cdda <log_msg_hexdump_data_op+0x20>
		*length = 0;
   2cdd2:	2300      	movs	r3, #0
   2cdd4:	600b      	str	r3, [r1, #0]
}
   2cdd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   2cdda:	680b      	ldr	r3, [r1, #0]
   2cddc:	4423      	add	r3, r4
   2cdde:	4293      	cmp	r3, r2
		*length = available_len - offset;
   2cde0:	bf84      	itt	hi
   2cde2:	1b13      	subhi	r3, r2, r4
   2cde4:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2cde6:	2a0c      	cmp	r2, #12
	req_len = *length;
   2cde8:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2cdec:	d92a      	bls.n	2ce44 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   2cdee:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   2cdf0:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   2cdf4:	d82d      	bhi.n	2ce52 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   2cdf6:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2cdf8:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2cdfa:	454a      	cmp	r2, r9
   2cdfc:	bf28      	it	cs
   2cdfe:	464a      	movcs	r2, r9
   2ce00:	4615      	mov	r5, r2
		if (put_op) {
   2ce02:	4420      	add	r0, r4
   2ce04:	b317      	cbz	r7, 2ce4c <log_msg_hexdump_data_op+0x92>
   2ce06:	4631      	mov	r1, r6
   2ce08:	f003 fbe7 	bl	305da <memcpy>
		req_len -= cpy_len;
   2ce0c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   2ce10:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   2ce12:	f1b9 0f00 	cmp.w	r9, #0
   2ce16:	d0de      	beq.n	2cdd6 <log_msg_hexdump_data_op+0x1c>
   2ce18:	f1b8 0f00 	cmp.w	r8, #0
   2ce1c:	d0db      	beq.n	2cdd6 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   2ce1e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2ce22:	454d      	cmp	r5, r9
   2ce24:	bf28      	it	cs
   2ce26:	464d      	movcs	r5, r9
		if (put_op) {
   2ce28:	1d20      	adds	r0, r4, #4
   2ce2a:	4440      	add	r0, r8
   2ce2c:	462a      	mov	r2, r5
   2ce2e:	b1bf      	cbz	r7, 2ce60 <log_msg_hexdump_data_op+0xa6>
   2ce30:	4631      	mov	r1, r6
   2ce32:	f003 fbd2 	bl	305da <memcpy>
		req_len -= cpy_len;
   2ce36:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   2ce3a:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   2ce3e:	442e      	add	r6, r5
		offset = 0;
   2ce40:	2400      	movs	r4, #0
   2ce42:	e7e6      	b.n	2ce12 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   2ce44:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   2ce46:	f04f 0800 	mov.w	r8, #0
   2ce4a:	e7d6      	b.n	2cdfa <log_msg_hexdump_data_op+0x40>
   2ce4c:	4601      	mov	r1, r0
   2ce4e:	4630      	mov	r0, r6
   2ce50:	e7da      	b.n	2ce08 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   2ce52:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   2ce54:	2c1b      	cmp	r4, #27
   2ce56:	d9dc      	bls.n	2ce12 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   2ce58:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   2ce5c:	3c1c      	subs	r4, #28
   2ce5e:	e7f9      	b.n	2ce54 <log_msg_hexdump_data_op+0x9a>
   2ce60:	4601      	mov	r1, r0
   2ce62:	4630      	mov	r0, r6
   2ce64:	e7e5      	b.n	2ce32 <log_msg_hexdump_data_op+0x78>

0002ce66 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2ce66:	3004      	adds	r0, #4
   2ce68:	f3bf 8f5b 	dmb	ish
   2ce6c:	e850 3f00 	ldrex	r3, [r0]
   2ce70:	3301      	adds	r3, #1
   2ce72:	e840 3200 	strex	r2, r3, [r0]
   2ce76:	2a00      	cmp	r2, #0
   2ce78:	d1f8      	bne.n	2ce6c <log_msg_get+0x6>
   2ce7a:	f3bf 8f5b 	dmb	ish
}
   2ce7e:	4770      	bx	lr

0002ce80 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   2ce80:	7a40      	ldrb	r0, [r0, #9]
}
   2ce82:	0900      	lsrs	r0, r0, #4
   2ce84:	4770      	bx	lr

0002ce86 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   2ce86:	7a43      	ldrb	r3, [r0, #9]
   2ce88:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2ce8c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   2ce90:	d216      	bcs.n	2cec0 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2ce92:	2a03      	cmp	r2, #3
   2ce94:	d803      	bhi.n	2ce9e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   2ce96:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2ce9a:	6948      	ldr	r0, [r1, #20]
   2ce9c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2ce9e:	2901      	cmp	r1, #1
   2cea0:	d803      	bhi.n	2ceaa <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   2cea2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2cea6:	6988      	ldr	r0, [r1, #24]
   2cea8:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2ceaa:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   2ceac:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   2ceae:	2906      	cmp	r1, #6
   2ceb0:	d803      	bhi.n	2ceba <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   2ceb2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2ceb6:	6848      	ldr	r0, [r1, #4]
   2ceb8:	4770      	bx	lr
		cont = cont->next;
   2ceba:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   2cebc:	3907      	subs	r1, #7
		cont = cont->next;
   2cebe:	e7f6      	b.n	2ceae <log_msg_arg_get+0x28>
		return 0;
   2cec0:	2000      	movs	r0, #0
}
   2cec2:	4770      	bx	lr

0002cec4 <log_msg_put>:
{
   2cec4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2cec6:	1d02      	adds	r2, r0, #4
   2cec8:	f3bf 8f5b 	dmb	ish
   2cecc:	e852 1f00 	ldrex	r1, [r2]
   2ced0:	3901      	subs	r1, #1
   2ced2:	e842 1c00 	strex	ip, r1, [r2]
   2ced6:	f1bc 0f00 	cmp.w	ip, #0
   2ceda:	d1f7      	bne.n	2cecc <log_msg_put+0x8>
   2cedc:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   2cee0:	685b      	ldr	r3, [r3, #4]
   2cee2:	b90b      	cbnz	r3, 2cee8 <log_msg_put+0x24>
		msg_free(msg);
   2cee4:	f7e5 bf7e 	b.w	12de4 <msg_free>
}
   2cee8:	4770      	bx	lr

0002ceea <log_msg_str_get>:
}
   2ceea:	6900      	ldr	r0, [r0, #16]
   2ceec:	4770      	bx	lr

0002ceee <log_msg_hexdump_create>:
{
   2ceee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   2cef2:	f643 75ff 	movw	r5, #16383	; 0x3fff
   2cef6:	4295      	cmp	r5, r2
{
   2cef8:	4680      	mov	r8, r0
   2cefa:	460e      	mov	r6, r1
   2cefc:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   2cefe:	bf28      	it	cs
   2cf00:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   2cf02:	f7e5 ff5b 	bl	12dbc <log_msg_chunk_alloc>
	if (msg == NULL) {
   2cf06:	4604      	mov	r4, r0
   2cf08:	b378      	cbz	r0, 2cf6a <log_msg_hexdump_create+0x7c>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   2cf0a:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   2cf0c:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   2cf10:	2301      	movs	r3, #1
   2cf12:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   2cf14:	00ab      	lsls	r3, r5, #2
   2cf16:	f043 0301 	orr.w	r3, r3, #1
   2cf1a:	f002 0202 	and.w	r2, r2, #2
   2cf1e:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2cf20:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   2cf22:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2cf24:	f100 0814 	add.w	r8, r0, #20
   2cf28:	d916      	bls.n	2cf58 <log_msg_hexdump_create+0x6a>
   2cf2a:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   2cf2c:	7a02      	ldrb	r2, [r0, #8]
   2cf2e:	6183      	str	r3, [r0, #24]
   2cf30:	6873      	ldr	r3, [r6, #4]
   2cf32:	61c3      	str	r3, [r0, #28]
   2cf34:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   2cf38:	2300      	movs	r3, #0
   2cf3a:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   2cf3c:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2cf3e:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2cf40:	3d08      	subs	r5, #8
	while (length > 0) {
   2cf42:	4699      	mov	r9, r3
   2cf44:	b18d      	cbz	r5, 2cf6a <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2cf46:	f7e5 ff39 	bl	12dbc <log_msg_chunk_alloc>
		if (cont == NULL) {
   2cf4a:	4607      	mov	r7, r0
   2cf4c:	b980      	cbnz	r0, 2cf70 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   2cf4e:	4620      	mov	r0, r4
   2cf50:	f7e5 ff48 	bl	12de4 <msg_free>
			return NULL;
   2cf54:	463c      	mov	r4, r7
   2cf56:	e008      	b.n	2cf6a <log_msg_hexdump_create+0x7c>
   2cf58:	462a      	mov	r2, r5
   2cf5a:	4631      	mov	r1, r6
   2cf5c:	4640      	mov	r0, r8
   2cf5e:	f003 fb3c 	bl	305da <memcpy>
		msg->hdr.params.generic.ext = 0;
   2cf62:	7a23      	ldrb	r3, [r4, #8]
   2cf64:	f36f 0341 	bfc	r3, #1, #1
   2cf68:	7223      	strb	r3, [r4, #8]
}
   2cf6a:	4620      	mov	r0, r4
   2cf6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   2cf70:	2d1c      	cmp	r5, #28
   2cf72:	462f      	mov	r7, r5
   2cf74:	bf28      	it	cs
   2cf76:	271c      	movcs	r7, #28
		*prev_cont = cont;
   2cf78:	f8c8 0000 	str.w	r0, [r8]
   2cf7c:	4631      	mov	r1, r6
		cont->next = NULL;
   2cf7e:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   2cf82:	4680      	mov	r8, r0
   2cf84:	463a      	mov	r2, r7
   2cf86:	3004      	adds	r0, #4
   2cf88:	f003 fb27 	bl	305da <memcpy>
		data += chunk_length;
   2cf8c:	443e      	add	r6, r7
		length -= chunk_length;
   2cf8e:	1bed      	subs	r5, r5, r7
   2cf90:	e7d8      	b.n	2cf44 <log_msg_hexdump_create+0x56>

0002cf92 <log_msg_hexdump_data_get>:
{
   2cf92:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2cf94:	2400      	movs	r4, #0
   2cf96:	9400      	str	r4, [sp, #0]
   2cf98:	f7ff ff0f 	bl	2cdba <log_msg_hexdump_data_op>
}
   2cf9c:	b002      	add	sp, #8
   2cf9e:	bd10      	pop	{r4, pc}

0002cfa0 <buffer_write>:
{
   2cfa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cfa2:	4606      	mov	r6, r0
   2cfa4:	460d      	mov	r5, r1
   2cfa6:	4614      	mov	r4, r2
   2cfa8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   2cfaa:	4621      	mov	r1, r4
   2cfac:	4628      	mov	r0, r5
   2cfae:	463a      	mov	r2, r7
   2cfb0:	47b0      	blx	r6
	} while (len != 0);
   2cfb2:	1a24      	subs	r4, r4, r0
		buf += processed;
   2cfb4:	4405      	add	r5, r0
	} while (len != 0);
   2cfb6:	d1f8      	bne.n	2cfaa <buffer_write+0xa>
}
   2cfb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002cfba <std_print>:
{
   2cfba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cfbe:	b08e      	sub	sp, #56	; 0x38
   2cfc0:	af0e      	add	r7, sp, #56	; 0x38
   2cfc2:	4680      	mov	r8, r0
   2cfc4:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   2cfc6:	f7ff ff90 	bl	2ceea <log_msg_str_get>
   2cfca:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   2cfcc:	4640      	mov	r0, r8
   2cfce:	f7ff ff57 	bl	2ce80 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2cfd2:	0083      	lsls	r3, r0, #2
   2cfd4:	3307      	adds	r3, #7
   2cfd6:	f023 0307 	bic.w	r3, r3, #7
   2cfda:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   2cfde:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2cfe0:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2cfe2:	f04f 0900 	mov.w	r9, #0
   2cfe6:	45d1      	cmp	r9, sl
   2cfe8:	d116      	bne.n	2d018 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   2cfea:	4640      	mov	r0, r8
   2cfec:	f7ff ff48 	bl	2ce80 <log_msg_nargs_get>
   2cff0:	280f      	cmp	r0, #15
   2cff2:	d81e      	bhi.n	2d032 <std_print+0x78>
   2cff4:	e8df f010 	tbh	[pc, r0, lsl #1]
   2cff8:	00200019 	.word	0x00200019
   2cffc:	002d0026 	.word	0x002d0026
   2d000:	00410036 	.word	0x00410036
   2d004:	005d004e 	.word	0x005d004e
   2d008:	0081006e 	.word	0x0081006e
   2d00c:	00ad0096 	.word	0x00ad0096
   2d010:	00e100c6 	.word	0x00e100c6
   2d014:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   2d018:	4649      	mov	r1, r9
   2d01a:	4640      	mov	r0, r8
   2d01c:	f7ff ff33 	bl	2ce86 <log_msg_arg_get>
   2d020:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   2d024:	f109 0901 	add.w	r9, r9, #1
   2d028:	e7dd      	b.n	2cfe6 <std_print+0x2c>
		print_formatted(output, str);
   2d02a:	4631      	mov	r1, r6
   2d02c:	4628      	mov	r0, r5
   2d02e:	f7e5 ff8d 	bl	12f4c <print_formatted>
}
   2d032:	46bd      	mov	sp, r7
   2d034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   2d038:	6822      	ldr	r2, [r4, #0]
   2d03a:	4631      	mov	r1, r6
   2d03c:	4628      	mov	r0, r5
   2d03e:	f7e5 ff85 	bl	12f4c <print_formatted>
		break;
   2d042:	e7f6      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   2d044:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d048:	4631      	mov	r1, r6
   2d04a:	4628      	mov	r0, r5
   2d04c:	f7e5 ff7e 	bl	12f4c <print_formatted>
		break;
   2d050:	e7ef      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   2d052:	68a3      	ldr	r3, [r4, #8]
   2d054:	9300      	str	r3, [sp, #0]
   2d056:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d05a:	4631      	mov	r1, r6
   2d05c:	4628      	mov	r0, r5
   2d05e:	f7e5 ff75 	bl	12f4c <print_formatted>
		break;
   2d062:	e7e6      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d064:	68e3      	ldr	r3, [r4, #12]
   2d066:	9301      	str	r3, [sp, #4]
   2d068:	68a3      	ldr	r3, [r4, #8]
   2d06a:	9300      	str	r3, [sp, #0]
   2d06c:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d070:	4631      	mov	r1, r6
   2d072:	4628      	mov	r0, r5
   2d074:	f7e5 ff6a 	bl	12f4c <print_formatted>
		break;
   2d078:	e7db      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d07a:	6923      	ldr	r3, [r4, #16]
   2d07c:	9302      	str	r3, [sp, #8]
   2d07e:	68e3      	ldr	r3, [r4, #12]
   2d080:	9301      	str	r3, [sp, #4]
   2d082:	68a3      	ldr	r3, [r4, #8]
   2d084:	9300      	str	r3, [sp, #0]
   2d086:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d08a:	4631      	mov	r1, r6
   2d08c:	4628      	mov	r0, r5
   2d08e:	f7e5 ff5d 	bl	12f4c <print_formatted>
		break;
   2d092:	e7ce      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d094:	6963      	ldr	r3, [r4, #20]
   2d096:	9303      	str	r3, [sp, #12]
   2d098:	6923      	ldr	r3, [r4, #16]
   2d09a:	9302      	str	r3, [sp, #8]
   2d09c:	68e3      	ldr	r3, [r4, #12]
   2d09e:	9301      	str	r3, [sp, #4]
   2d0a0:	68a3      	ldr	r3, [r4, #8]
   2d0a2:	9300      	str	r3, [sp, #0]
   2d0a4:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d0a8:	4631      	mov	r1, r6
   2d0aa:	4628      	mov	r0, r5
   2d0ac:	f7e5 ff4e 	bl	12f4c <print_formatted>
		break;
   2d0b0:	e7bf      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d0b2:	69a3      	ldr	r3, [r4, #24]
   2d0b4:	9304      	str	r3, [sp, #16]
   2d0b6:	6963      	ldr	r3, [r4, #20]
   2d0b8:	9303      	str	r3, [sp, #12]
   2d0ba:	6923      	ldr	r3, [r4, #16]
   2d0bc:	9302      	str	r3, [sp, #8]
   2d0be:	68e3      	ldr	r3, [r4, #12]
   2d0c0:	9301      	str	r3, [sp, #4]
   2d0c2:	68a3      	ldr	r3, [r4, #8]
   2d0c4:	9300      	str	r3, [sp, #0]
   2d0c6:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d0ca:	4631      	mov	r1, r6
   2d0cc:	4628      	mov	r0, r5
   2d0ce:	f7e5 ff3d 	bl	12f4c <print_formatted>
		break;
   2d0d2:	e7ae      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d0d4:	69e3      	ldr	r3, [r4, #28]
   2d0d6:	9305      	str	r3, [sp, #20]
   2d0d8:	69a3      	ldr	r3, [r4, #24]
   2d0da:	9304      	str	r3, [sp, #16]
   2d0dc:	6963      	ldr	r3, [r4, #20]
   2d0de:	9303      	str	r3, [sp, #12]
   2d0e0:	6923      	ldr	r3, [r4, #16]
   2d0e2:	9302      	str	r3, [sp, #8]
   2d0e4:	68e3      	ldr	r3, [r4, #12]
   2d0e6:	9301      	str	r3, [sp, #4]
   2d0e8:	68a3      	ldr	r3, [r4, #8]
   2d0ea:	9300      	str	r3, [sp, #0]
   2d0ec:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d0f0:	4631      	mov	r1, r6
   2d0f2:	4628      	mov	r0, r5
   2d0f4:	f7e5 ff2a 	bl	12f4c <print_formatted>
		break;
   2d0f8:	e79b      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d0fa:	6a23      	ldr	r3, [r4, #32]
   2d0fc:	9306      	str	r3, [sp, #24]
   2d0fe:	69e3      	ldr	r3, [r4, #28]
   2d100:	9305      	str	r3, [sp, #20]
   2d102:	69a3      	ldr	r3, [r4, #24]
   2d104:	9304      	str	r3, [sp, #16]
   2d106:	6963      	ldr	r3, [r4, #20]
   2d108:	9303      	str	r3, [sp, #12]
   2d10a:	6923      	ldr	r3, [r4, #16]
   2d10c:	9302      	str	r3, [sp, #8]
   2d10e:	68e3      	ldr	r3, [r4, #12]
   2d110:	9301      	str	r3, [sp, #4]
   2d112:	68a3      	ldr	r3, [r4, #8]
   2d114:	9300      	str	r3, [sp, #0]
   2d116:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d11a:	4631      	mov	r1, r6
   2d11c:	4628      	mov	r0, r5
   2d11e:	f7e5 ff15 	bl	12f4c <print_formatted>
		break;
   2d122:	e786      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d124:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d126:	9307      	str	r3, [sp, #28]
   2d128:	6a23      	ldr	r3, [r4, #32]
   2d12a:	9306      	str	r3, [sp, #24]
   2d12c:	69e3      	ldr	r3, [r4, #28]
   2d12e:	9305      	str	r3, [sp, #20]
   2d130:	69a3      	ldr	r3, [r4, #24]
   2d132:	9304      	str	r3, [sp, #16]
   2d134:	6963      	ldr	r3, [r4, #20]
   2d136:	9303      	str	r3, [sp, #12]
   2d138:	6923      	ldr	r3, [r4, #16]
   2d13a:	9302      	str	r3, [sp, #8]
   2d13c:	68e3      	ldr	r3, [r4, #12]
   2d13e:	9301      	str	r3, [sp, #4]
   2d140:	68a3      	ldr	r3, [r4, #8]
   2d142:	9300      	str	r3, [sp, #0]
   2d144:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d148:	4631      	mov	r1, r6
   2d14a:	4628      	mov	r0, r5
   2d14c:	f7e5 fefe 	bl	12f4c <print_formatted>
		break;
   2d150:	e76f      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d152:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2d154:	9308      	str	r3, [sp, #32]
   2d156:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d158:	9307      	str	r3, [sp, #28]
   2d15a:	6a23      	ldr	r3, [r4, #32]
   2d15c:	9306      	str	r3, [sp, #24]
   2d15e:	69e3      	ldr	r3, [r4, #28]
   2d160:	9305      	str	r3, [sp, #20]
   2d162:	69a3      	ldr	r3, [r4, #24]
   2d164:	9304      	str	r3, [sp, #16]
   2d166:	6963      	ldr	r3, [r4, #20]
   2d168:	9303      	str	r3, [sp, #12]
   2d16a:	6923      	ldr	r3, [r4, #16]
   2d16c:	9302      	str	r3, [sp, #8]
   2d16e:	68e3      	ldr	r3, [r4, #12]
   2d170:	9301      	str	r3, [sp, #4]
   2d172:	68a3      	ldr	r3, [r4, #8]
   2d174:	9300      	str	r3, [sp, #0]
   2d176:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d17a:	4631      	mov	r1, r6
   2d17c:	4628      	mov	r0, r5
   2d17e:	f7e5 fee5 	bl	12f4c <print_formatted>
		break;
   2d182:	e756      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d184:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2d186:	9309      	str	r3, [sp, #36]	; 0x24
   2d188:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2d18a:	9308      	str	r3, [sp, #32]
   2d18c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d18e:	9307      	str	r3, [sp, #28]
   2d190:	6a23      	ldr	r3, [r4, #32]
   2d192:	9306      	str	r3, [sp, #24]
   2d194:	69e3      	ldr	r3, [r4, #28]
   2d196:	9305      	str	r3, [sp, #20]
   2d198:	69a3      	ldr	r3, [r4, #24]
   2d19a:	9304      	str	r3, [sp, #16]
   2d19c:	6963      	ldr	r3, [r4, #20]
   2d19e:	9303      	str	r3, [sp, #12]
   2d1a0:	6923      	ldr	r3, [r4, #16]
   2d1a2:	9302      	str	r3, [sp, #8]
   2d1a4:	68e3      	ldr	r3, [r4, #12]
   2d1a6:	9301      	str	r3, [sp, #4]
   2d1a8:	68a3      	ldr	r3, [r4, #8]
   2d1aa:	9300      	str	r3, [sp, #0]
   2d1ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d1b0:	4631      	mov	r1, r6
   2d1b2:	4628      	mov	r0, r5
   2d1b4:	f7e5 feca 	bl	12f4c <print_formatted>
		break;
   2d1b8:	e73b      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d1ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2d1bc:	930a      	str	r3, [sp, #40]	; 0x28
   2d1be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2d1c0:	9309      	str	r3, [sp, #36]	; 0x24
   2d1c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2d1c4:	9308      	str	r3, [sp, #32]
   2d1c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d1c8:	9307      	str	r3, [sp, #28]
   2d1ca:	6a23      	ldr	r3, [r4, #32]
   2d1cc:	9306      	str	r3, [sp, #24]
   2d1ce:	69e3      	ldr	r3, [r4, #28]
   2d1d0:	9305      	str	r3, [sp, #20]
   2d1d2:	69a3      	ldr	r3, [r4, #24]
   2d1d4:	9304      	str	r3, [sp, #16]
   2d1d6:	6963      	ldr	r3, [r4, #20]
   2d1d8:	9303      	str	r3, [sp, #12]
   2d1da:	6923      	ldr	r3, [r4, #16]
   2d1dc:	9302      	str	r3, [sp, #8]
   2d1de:	68e3      	ldr	r3, [r4, #12]
   2d1e0:	9301      	str	r3, [sp, #4]
   2d1e2:	68a3      	ldr	r3, [r4, #8]
   2d1e4:	9300      	str	r3, [sp, #0]
   2d1e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d1ea:	4631      	mov	r1, r6
   2d1ec:	4628      	mov	r0, r5
   2d1ee:	f7e5 fead 	bl	12f4c <print_formatted>
		break;
   2d1f2:	e71e      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d1f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2d1f6:	930b      	str	r3, [sp, #44]	; 0x2c
   2d1f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2d1fa:	930a      	str	r3, [sp, #40]	; 0x28
   2d1fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2d1fe:	9309      	str	r3, [sp, #36]	; 0x24
   2d200:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2d202:	9308      	str	r3, [sp, #32]
   2d204:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d206:	9307      	str	r3, [sp, #28]
   2d208:	6a23      	ldr	r3, [r4, #32]
   2d20a:	9306      	str	r3, [sp, #24]
   2d20c:	69e3      	ldr	r3, [r4, #28]
   2d20e:	9305      	str	r3, [sp, #20]
   2d210:	69a3      	ldr	r3, [r4, #24]
   2d212:	9304      	str	r3, [sp, #16]
   2d214:	6963      	ldr	r3, [r4, #20]
   2d216:	9303      	str	r3, [sp, #12]
   2d218:	6923      	ldr	r3, [r4, #16]
   2d21a:	9302      	str	r3, [sp, #8]
   2d21c:	68e3      	ldr	r3, [r4, #12]
   2d21e:	9301      	str	r3, [sp, #4]
   2d220:	68a3      	ldr	r3, [r4, #8]
   2d222:	9300      	str	r3, [sp, #0]
   2d224:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d228:	4631      	mov	r1, r6
   2d22a:	4628      	mov	r0, r5
   2d22c:	f7e5 fe8e 	bl	12f4c <print_formatted>
		break;
   2d230:	e6ff      	b.n	2d032 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2d232:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2d234:	930c      	str	r3, [sp, #48]	; 0x30
   2d236:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2d238:	930b      	str	r3, [sp, #44]	; 0x2c
   2d23a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2d23c:	930a      	str	r3, [sp, #40]	; 0x28
   2d23e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2d240:	9309      	str	r3, [sp, #36]	; 0x24
   2d242:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2d244:	9308      	str	r3, [sp, #32]
   2d246:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2d248:	9307      	str	r3, [sp, #28]
   2d24a:	6a23      	ldr	r3, [r4, #32]
   2d24c:	9306      	str	r3, [sp, #24]
   2d24e:	69e3      	ldr	r3, [r4, #28]
   2d250:	9305      	str	r3, [sp, #20]
   2d252:	69a3      	ldr	r3, [r4, #24]
   2d254:	9304      	str	r3, [sp, #16]
   2d256:	6963      	ldr	r3, [r4, #20]
   2d258:	9303      	str	r3, [sp, #12]
   2d25a:	6923      	ldr	r3, [r4, #16]
   2d25c:	9302      	str	r3, [sp, #8]
   2d25e:	68e3      	ldr	r3, [r4, #12]
   2d260:	9301      	str	r3, [sp, #4]
   2d262:	68a3      	ldr	r3, [r4, #8]
   2d264:	9300      	str	r3, [sp, #0]
   2d266:	e9d4 2300 	ldrd	r2, r3, [r4]
   2d26a:	4631      	mov	r1, r6
   2d26c:	4628      	mov	r0, r5
   2d26e:	f7e5 fe6d 	bl	12f4c <print_formatted>
}
   2d272:	e6de      	b.n	2d032 <std_print+0x78>

0002d274 <log_output_flush>:
		     output->control_block->offset,
   2d274:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   2d276:	6881      	ldr	r1, [r0, #8]
{
   2d278:	b510      	push	{r4, lr}
   2d27a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2d27c:	e9d2 2300 	ldrd	r2, r3, [r2]
   2d280:	6800      	ldr	r0, [r0, #0]
   2d282:	f7ff fe8d 	bl	2cfa0 <buffer_write>
	output->control_block->offset = 0;
   2d286:	6863      	ldr	r3, [r4, #4]
   2d288:	2200      	movs	r2, #0
   2d28a:	601a      	str	r2, [r3, #0]
}
   2d28c:	bd10      	pop	{r4, pc}

0002d28e <log_halt>:
{
   2d28e:	b508      	push	{r3, lr}
	log_backend_deactivate(backend);
   2d290:	4608      	mov	r0, r1
   2d292:	f7e6 f99f 	bl	135d4 <log_backend_deactivate>
}
   2d296:	2000      	movs	r0, #0
   2d298:	bd08      	pop	{r3, pc}

0002d29a <log_go>:
{
   2d29a:	b508      	push	{r3, lr}
	log_backend_activate(backend, backend->cb->ctx);
   2d29c:	684b      	ldr	r3, [r1, #4]
{
   2d29e:	4608      	mov	r0, r1
	log_backend_activate(backend, backend->cb->ctx);
   2d2a0:	6819      	ldr	r1, [r3, #0]
   2d2a2:	f7e6 f9b1 	bl	13608 <log_backend_activate>
}
   2d2a6:	2000      	movs	r0, #0
   2d2a8:	bd08      	pop	{r3, pc}

0002d2aa <cmd_log_self_status>:
{
   2d2aa:	b570      	push	{r4, r5, r6, lr}
   2d2ac:	4604      	mov	r4, r0
   2d2ae:	460d      	mov	r5, r1
   2d2b0:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   2d2b2:	f7e6 fa21 	bl	136f8 <shell_state_precheck>
   2d2b6:	b130      	cbz	r0, 2d2c6 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   2d2b8:	69e1      	ldr	r1, [r4, #28]
   2d2ba:	4633      	mov	r3, r6
   2d2bc:	6809      	ldr	r1, [r1, #0]
   2d2be:	462a      	mov	r2, r5
   2d2c0:	4620      	mov	r0, r4
   2d2c2:	f7e6 f917 	bl	134f4 <log_status>
}
   2d2c6:	2000      	movs	r0, #0
   2d2c8:	bd70      	pop	{r4, r5, r6, pc}

0002d2ca <cmd_log_self_halt>:
{
   2d2ca:	b510      	push	{r4, lr}
   2d2cc:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   2d2ce:	f7e6 fa13 	bl	136f8 <shell_state_precheck>
   2d2d2:	b118      	cbz	r0, 2d2dc <cmd_log_self_halt+0x12>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   2d2d4:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
   2d2d6:	6818      	ldr	r0, [r3, #0]
   2d2d8:	f7e6 f97c 	bl	135d4 <log_backend_deactivate>
}
   2d2dc:	2000      	movs	r0, #0
   2d2de:	bd10      	pop	{r4, pc}

0002d2e0 <cmd_log_self_go>:
{
   2d2e0:	b510      	push	{r4, lr}
   2d2e2:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   2d2e4:	f7e6 fa08 	bl	136f8 <shell_state_precheck>
   2d2e8:	b128      	cbz	r0, 2d2f6 <cmd_log_self_go+0x16>
	return log_go(shell, shell->log_backend->backend, argc, argv);
   2d2ea:	69e3      	ldr	r3, [r4, #28]
   2d2ec:	6818      	ldr	r0, [r3, #0]
	log_backend_activate(backend, backend->cb->ctx);
   2d2ee:	6843      	ldr	r3, [r0, #4]
   2d2f0:	6819      	ldr	r1, [r3, #0]
   2d2f2:	f7e6 f989 	bl	13608 <log_backend_activate>
}
   2d2f6:	2000      	movs	r0, #0
   2d2f8:	bd10      	pop	{r4, pc}

0002d2fa <cmd_log_self_enable>:
{
   2d2fa:	b570      	push	{r4, r5, r6, lr}
   2d2fc:	4604      	mov	r4, r0
   2d2fe:	460d      	mov	r5, r1
   2d300:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   2d302:	f7e6 f9f9 	bl	136f8 <shell_state_precheck>
   2d306:	b140      	cbz	r0, 2d31a <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   2d308:	69e1      	ldr	r1, [r4, #28]
   2d30a:	4633      	mov	r3, r6
   2d30c:	462a      	mov	r2, r5
   2d30e:	4620      	mov	r0, r4
   2d310:	6809      	ldr	r1, [r1, #0]
}
   2d312:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   2d316:	f7e6 ba67 	b.w	137e8 <log_enable>
}
   2d31a:	bd70      	pop	{r4, r5, r6, pc}

0002d31c <log_disable>:
{
   2d31c:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   2d31e:	2400      	movs	r4, #0
   2d320:	9400      	str	r4, [sp, #0]
   2d322:	3304      	adds	r3, #4
   2d324:	3a01      	subs	r2, #1
   2d326:	f7e6 f9f7 	bl	13718 <filters_set>
}
   2d32a:	4620      	mov	r0, r4
   2d32c:	b002      	add	sp, #8
   2d32e:	bd10      	pop	{r4, pc}

0002d330 <cmd_log_self_disable>:
{
   2d330:	b570      	push	{r4, r5, r6, lr}
   2d332:	4604      	mov	r4, r0
   2d334:	460d      	mov	r5, r1
   2d336:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   2d338:	f7e6 f9de 	bl	136f8 <shell_state_precheck>
   2d33c:	b140      	cbz	r0, 2d350 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   2d33e:	69e1      	ldr	r1, [r4, #28]
   2d340:	4633      	mov	r3, r6
   2d342:	462a      	mov	r2, r5
   2d344:	4620      	mov	r0, r4
   2d346:	6809      	ldr	r1, [r1, #0]
}
   2d348:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   2d34c:	f7ff bfe6 	b.w	2d31c <log_disable>
}
   2d350:	bd70      	pop	{r4, r5, r6, pc}

0002d352 <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *shell,
				  size_t argc, char **argv)
{
   2d352:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_WARM);
   2d354:	2000      	movs	r0, #0
   2d356:	f7e5 f881 	bl	1245c <sys_reboot>

0002d35a <cmd_kernel_reboot_cold>:
	return 0;
}

static int cmd_kernel_reboot_cold(const struct shell *shell,
				  size_t argc, char **argv)
{
   2d35a:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_COLD);
   2d35c:	2001      	movs	r0, #1
   2d35e:	f7e5 f87d 	bl	1245c <sys_reboot>

0002d362 <cmd_date_get>:

static int cmd_date_get(const struct shell *shell, size_t argc, char **argv)
{
   2d362:	b510      	push	{r4, lr}
   2d364:	4604      	mov	r4, r0
   2d366:	b08e      	sub	sp, #56	; 0x38
   2d368:	2001      	movs	r0, #1
   2d36a:	4669      	mov	r1, sp
   2d36c:	f7e3 fca0 	bl	10cb0 <z_impl_clock_gettime>
	struct timespec tp;
	struct tm tm;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   2d370:	a905      	add	r1, sp, #20
   2d372:	4668      	mov	r0, sp
   2d374:	f7fe fb86 	bl	2ba84 <gmtime_r>

	date_print(shell, &tm);
   2d378:	4620      	mov	r0, r4
   2d37a:	a905      	add	r1, sp, #20
   2d37c:	f7e6 fc88 	bl	13c90 <date_print>

	return 0;
}
   2d380:	2000      	movs	r0, #0
   2d382:	b00e      	add	sp, #56	; 0x38
   2d384:	bd10      	pop	{r4, pc}

0002d386 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   2d386:	6883      	ldr	r3, [r0, #8]
   2d388:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2d38a:	b103      	cbz	r3, 2d38e <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   2d38c:	4718      	bx	r3
}
   2d38e:	4770      	bx	lr

0002d390 <read>:
{
   2d390:	b510      	push	{r4, lr}
   2d392:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   2d394:	6843      	ldr	r3, [r0, #4]
   2d396:	68d8      	ldr	r0, [r3, #12]
   2d398:	f7e5 f82c 	bl	123f4 <ring_buf_get>
   2d39c:	6020      	str	r0, [r4, #0]
}
   2d39e:	2000      	movs	r0, #0
   2d3a0:	bd10      	pop	{r4, pc}

0002d3a2 <ring_buf_reset>:
	buf->head = 0;
   2d3a2:	2300      	movs	r3, #0
	buf->tail = 0;
   2d3a4:	e9c0 3300 	strd	r3, r3, [r0]
__ssp_bos_icheck3(memset, void *, int)
   2d3a8:	6083      	str	r3, [r0, #8]
   2d3aa:	60c3      	str	r3, [r0, #12]
}
   2d3ac:	4770      	bx	lr

0002d3ae <write>:
{
   2d3ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   2d3b2:	6845      	ldr	r5, [r0, #4]
{
   2d3b4:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   2d3b6:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   2d3b8:	7c1b      	ldrb	r3, [r3, #16]
{
   2d3ba:	460c      	mov	r4, r1
   2d3bc:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   2d3be:	b153      	cbz	r3, 2d3d6 <write+0x28>
   2d3c0:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   2d3c4:	4544      	cmp	r4, r8
   2d3c6:	682b      	ldr	r3, [r5, #0]
   2d3c8:	d120      	bne.n	2d40c <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   2d3ca:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
   2d3ce:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   2d3d0:	2001      	movs	r0, #1
   2d3d2:	4790      	blx	r2
   2d3d4:	e017      	b.n	2d406 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   2d3d6:	68a8      	ldr	r0, [r5, #8]
   2d3d8:	f7e4 ffdc 	bl	12394 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2d3dc:	682b      	ldr	r3, [r5, #0]
   2d3de:	6030      	str	r0, [r6, #0]
   2d3e0:	330c      	adds	r3, #12
   2d3e2:	2101      	movs	r1, #1
   2d3e4:	f3bf 8f5b 	dmb	ish
   2d3e8:	e853 2f00 	ldrex	r2, [r3]
   2d3ec:	e843 1000 	strex	r0, r1, [r3]
   2d3f0:	2800      	cmp	r0, #0
   2d3f2:	d1f9      	bne.n	2d3e8 <write+0x3a>
   2d3f4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   2d3f8:	b92a      	cbnz	r2, 2d406 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   2d3fa:	682b      	ldr	r3, [r5, #0]
   2d3fc:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
   2d3fe:	6883      	ldr	r3, [r0, #8]
   2d400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2d402:	b103      	cbz	r3, 2d406 <write+0x58>
		api->irq_tx_enable(dev);
   2d404:	4798      	blx	r3
}
   2d406:	2000      	movs	r0, #0
   2d408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   2d40c:	6818      	ldr	r0, [r3, #0]
   2d40e:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   2d412:	6883      	ldr	r3, [r0, #8]
   2d414:	69db      	ldr	r3, [r3, #28]
   2d416:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   2d418:	e7d4      	b.n	2d3c4 <write+0x16>

0002d41a <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
   2d41a:	6843      	ldr	r3, [r0, #4]
   2d41c:	681b      	ldr	r3, [r3, #0]
{
   2d41e:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   2d420:	681c      	ldr	r4, [r3, #0]
   2d422:	4620      	mov	r0, r4
   2d424:	f7ff ffaf 	bl	2d386 <z_impl_uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
   2d428:	68a3      	ldr	r3, [r4, #8]
   2d42a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   2d42c:	b10b      	cbz	r3, 2d432 <uninit+0x18>
		api->irq_rx_disable(dev);
   2d42e:	4620      	mov	r0, r4
   2d430:	4798      	blx	r3
}
   2d432:	2000      	movs	r0, #0
   2d434:	bd10      	pop	{r4, pc}

0002d436 <enable>:
{
   2d436:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   2d438:	6843      	ldr	r3, [r0, #4]
   2d43a:	681b      	ldr	r3, [r3, #0]
   2d43c:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   2d43e:	b111      	cbz	r1, 2d446 <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   2d440:	6818      	ldr	r0, [r3, #0]
   2d442:	f7ff ffa0 	bl	2d386 <z_impl_uart_irq_tx_disable>
}
   2d446:	2000      	movs	r0, #0
   2d448:	bd08      	pop	{r3, pc}

0002d44a <atomic_or>:
{
   2d44a:	4603      	mov	r3, r0
}
   2d44c:	f3bf 8f5b 	dmb	ish
   2d450:	e853 0f00 	ldrex	r0, [r3]
   2d454:	ea40 0201 	orr.w	r2, r0, r1
   2d458:	e843 2c00 	strex	ip, r2, [r3]
   2d45c:	f1bc 0f00 	cmp.w	ip, #0
   2d460:	d1f6      	bne.n	2d450 <atomic_or+0x6>
   2d462:	f3bf 8f5b 	dmb	ish
   2d466:	4770      	bx	lr

0002d468 <atomic_and>:
{
   2d468:	4603      	mov	r3, r0
}
   2d46a:	f3bf 8f5b 	dmb	ish
   2d46e:	e853 0f00 	ldrex	r0, [r3]
   2d472:	ea00 0201 	and.w	r2, r0, r1
   2d476:	e843 2c00 	strex	ip, r2, [r3]
   2d47a:	f1bc 0f00 	cmp.w	ip, #0
   2d47e:	d1f6      	bne.n	2d46e <atomic_and+0x6>
   2d480:	f3bf 8f5b 	dmb	ish
   2d484:	4770      	bx	lr

0002d486 <shell_signal_handle>:
{
   2d486:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   2d488:	6885      	ldr	r5, [r0, #8]
   2d48a:	0109      	lsls	r1, r1, #4
   2d48c:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
   2d490:	4604      	mov	r4, r0
   2d492:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   2d494:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
   2d496:	aa01      	add	r2, sp, #4
   2d498:	4669      	mov	r1, sp
   2d49a:	4628      	mov	r0, r5
   2d49c:	f003 f881 	bl	305a2 <z_impl_k_poll_signal_check>
	if (set) {
   2d4a0:	9b00      	ldr	r3, [sp, #0]
   2d4a2:	b123      	cbz	r3, 2d4ae <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
   2d4a4:	4628      	mov	r0, r5
   2d4a6:	f003 f879 	bl	3059c <z_impl_k_poll_signal_reset>
		handler(shell);
   2d4aa:	4620      	mov	r0, r4
   2d4ac:	47b0      	blx	r6
}
   2d4ae:	b002      	add	sp, #8
   2d4b0:	bd70      	pop	{r4, r5, r6, pc}

0002d4b2 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   2d4b2:	f7f8 ba73 	b.w	2599c <z_impl_k_mutex_unlock>

0002d4b6 <z_shell_strlen>:
{
   2d4b6:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   2d4b8:	b110      	cbz	r0, 2d4c0 <z_shell_strlen+0xa>
   2d4ba:	f7df ff7b 	bl	d3b4 <strlen>
   2d4be:	b280      	uxth	r0, r0
}
   2d4c0:	bd08      	pop	{r3, pc}

0002d4c2 <z_shell_raw_fprintf>:
{
   2d4c2:	b40e      	push	{r1, r2, r3}
   2d4c4:	b503      	push	{r0, r1, lr}
   2d4c6:	aa03      	add	r2, sp, #12
   2d4c8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   2d4cc:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2d4ce:	f7e7 ffc5 	bl	1545c <z_shell_fprintf_fmt>
}
   2d4d2:	b002      	add	sp, #8
   2d4d4:	f85d eb04 	ldr.w	lr, [sp], #4
   2d4d8:	b003      	add	sp, #12
   2d4da:	4770      	bx	lr

0002d4dc <z_flag_history_exit_set.isra.0>:
static inline bool z_flag_history_exit_set(const struct shell *sh, bool val)
   2d4dc:	b508      	push	{r3, lr}
   2d4de:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   2d4e0:	f500 7019 	add.w	r0, r0, #612	; 0x264
   2d4e4:	2104      	movs	r1, #4
   2d4e6:	b123      	cbz	r3, 2d4f2 <z_flag_history_exit_set.isra.0+0x16>
   2d4e8:	f7ff ffaf 	bl	2d44a <atomic_or>
}
   2d4ec:	f3c0 0080 	ubfx	r0, r0, #2, #1
   2d4f0:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   2d4f2:	f06f 0104 	mvn.w	r1, #4
   2d4f6:	f7ff ffb7 	bl	2d468 <atomic_and>
   2d4fa:	e7f7      	b.n	2d4ec <z_flag_history_exit_set.isra.0+0x10>

0002d4fc <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
   2d4fc:	b508      	push	{r3, lr}
   2d4fe:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   2d500:	f500 7018 	add.w	r0, r0, #608	; 0x260
   2d504:	2101      	movs	r1, #1
   2d506:	b123      	cbz	r3, 2d512 <z_flag_insert_mode_set.isra.0+0x16>
   2d508:	f7ff ff9f 	bl	2d44a <atomic_or>
}
   2d50c:	f000 0001 	and.w	r0, r0, #1
   2d510:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   2d512:	f06f 0101 	mvn.w	r1, #1
   2d516:	f7ff ffa7 	bl	2d468 <atomic_and>
   2d51a:	e7f7      	b.n	2d50c <z_flag_insert_mode_set.isra.0+0x10>

0002d51c <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   2d51c:	f7f8 b93e 	b.w	2579c <z_impl_k_mutex_lock>

0002d520 <shell_log_process>:
{
   2d520:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
   2d522:	2300      	movs	r3, #0
{
   2d524:	4604      	mov	r4, r0
	int signaled = 0;
   2d526:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
   2d528:	4620      	mov	r0, r4
   2d52a:	f000 f9c2 	bl	2d8b2 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
   2d52e:	69e0      	ldr	r0, [r4, #28]
   2d530:	f000 fab4 	bl	2da9c <z_shell_log_backend_process>
   2d534:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
   2d536:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   2d538:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
   2d53a:	f7e8 fbcb 	bl	15cd4 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   2d53e:	68a3      	ldr	r3, [r4, #8]
   2d540:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
   2d542:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
   2d546:	b123      	cbz	r3, 2d552 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   2d548:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   2d54c:	2100      	movs	r1, #0
   2d54e:	f7fa fb0b 	bl	27b68 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
   2d552:	aa01      	add	r2, sp, #4
   2d554:	4669      	mov	r1, sp
   2d556:	4630      	mov	r0, r6
   2d558:	f003 f823 	bl	305a2 <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   2d55c:	b115      	cbz	r5, 2d564 <shell_log_process+0x44>
   2d55e:	9b00      	ldr	r3, [sp, #0]
   2d560:	2b00      	cmp	r3, #0
   2d562:	d0e1      	beq.n	2d528 <shell_log_process+0x8>
}
   2d564:	b002      	add	sp, #8
   2d566:	bd70      	pop	{r4, r5, r6, pc}

0002d568 <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
   2d568:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   2d56a:	b920      	cbnz	r0, 2d576 <transport_evt_handler+0xe>
   2d56c:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
   2d570:	2100      	movs	r1, #0
   2d572:	f7fb bd79 	b.w	29068 <z_impl_k_poll_signal_raise>
   2d576:	f503 7026 	add.w	r0, r3, #664	; 0x298
   2d57a:	e7f9      	b.n	2d570 <transport_evt_handler+0x8>

0002d57c <shell_fprintf>:
{
   2d57c:	b40c      	push	{r2, r3}
   2d57e:	b507      	push	{r0, r1, r2, lr}
   2d580:	ab04      	add	r3, sp, #16
   2d582:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
   2d586:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   2d588:	f7e7 fe26 	bl	151d8 <shell_vfprintf>
}
   2d58c:	b003      	add	sp, #12
   2d58e:	f85d eb04 	ldr.w	lr, [sp], #4
   2d592:	b002      	add	sp, #8
   2d594:	4770      	bx	lr

0002d596 <shell_hexdump>:
{
   2d596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d59a:	4607      	mov	r7, r0
   2d59c:	460e      	mov	r6, r1
   2d59e:	4614      	mov	r4, r2
	const uint8_t *p = data;
   2d5a0:	460d      	mov	r5, r1
	while (len) {
   2d5a2:	b90c      	cbnz	r4, 2d5a8 <shell_hexdump+0x12>
}
   2d5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
   2d5a8:	2c10      	cmp	r4, #16
   2d5aa:	46a0      	mov	r8, r4
   2d5ac:	bf28      	it	cs
   2d5ae:	f04f 0810 	movcs.w	r8, #16
		shell_hexdump_line(shell, p - data, p, line_len);
   2d5b2:	462a      	mov	r2, r5
   2d5b4:	1ba9      	subs	r1, r5, r6
   2d5b6:	4643      	mov	r3, r8
   2d5b8:	4638      	mov	r0, r7
   2d5ba:	f7e7 fee3 	bl	15384 <shell_hexdump_line>
		len -= line_len;
   2d5be:	eba4 0408 	sub.w	r4, r4, r8
		p += line_len;
   2d5c2:	4445      	add	r5, r8
   2d5c4:	e7ed      	b.n	2d5a2 <shell_hexdump+0xc>

0002d5c6 <shell_help>:
{
   2d5c6:	b510      	push	{r4, lr}
   2d5c8:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   2d5ca:	6880      	ldr	r0, [r0, #8]
   2d5cc:	f04f 32ff 	mov.w	r2, #4294967295
   2d5d0:	f04f 33ff 	mov.w	r3, #4294967295
   2d5d4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   2d5d8:	f7ff ffa0 	bl	2d51c <k_mutex_lock.constprop.0>
	shell_internal_help_print(shell);
   2d5dc:	4620      	mov	r0, r4
   2d5de:	f7e6 fec1 	bl	14364 <shell_internal_help_print>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   2d5e2:	68a0      	ldr	r0, [r4, #8]
}
   2d5e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   2d5e8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   2d5ec:	f7ff bf61 	b.w	2d4b2 <k_mutex_unlock>

0002d5f0 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
   2d5f0:	6883      	ldr	r3, [r0, #8]
   2d5f2:	6399      	str	r1, [r3, #56]	; 0x38
}
   2d5f4:	4770      	bx	lr

0002d5f6 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   2d5f6:	6902      	ldr	r2, [r0, #16]
   2d5f8:	6883      	ldr	r3, [r0, #8]
   2d5fa:	6812      	ldr	r2, [r2, #0]
   2d5fc:	6801      	ldr	r1, [r0, #0]
{
   2d5fe:	b510      	push	{r4, lr}
   2d600:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   2d602:	68c0      	ldr	r0, [r0, #12]
   2d604:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   2d606:	6923      	ldr	r3, [r4, #16]
   2d608:	2200      	movs	r2, #0
   2d60a:	601a      	str	r2, [r3, #0]
}
   2d60c:	bd10      	pop	{r4, pc}

0002d60e <out_func>:
{
   2d60e:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   2d610:	68cb      	ldr	r3, [r1, #12]
   2d612:	7c1b      	ldrb	r3, [r3, #16]
   2d614:	2b02      	cmp	r3, #2
{
   2d616:	4605      	mov	r5, r0
   2d618:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   2d61a:	d104      	bne.n	2d626 <out_func+0x18>
   2d61c:	280a      	cmp	r0, #10
   2d61e:	d102      	bne.n	2d626 <out_func+0x18>
		(void)out_func('\r', ctx);
   2d620:	200d      	movs	r0, #13
   2d622:	f7ff fff4 	bl	2d60e <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   2d626:	6923      	ldr	r3, [r4, #16]
   2d628:	6822      	ldr	r2, [r4, #0]
   2d62a:	681b      	ldr	r3, [r3, #0]
   2d62c:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   2d62e:	6922      	ldr	r2, [r4, #16]
   2d630:	6813      	ldr	r3, [r2, #0]
   2d632:	3301      	adds	r3, #1
   2d634:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   2d636:	6862      	ldr	r2, [r4, #4]
   2d638:	4293      	cmp	r3, r2
   2d63a:	d102      	bne.n	2d642 <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   2d63c:	4620      	mov	r0, r4
   2d63e:	f7ff ffda 	bl	2d5f6 <z_shell_fprintf_buffer_flush>
}
   2d642:	2000      	movs	r0, #0
   2d644:	bd38      	pop	{r3, r4, r5, pc}

0002d646 <z_shell_strlen>:
{
   2d646:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   2d648:	b110      	cbz	r0, 2d650 <z_shell_strlen+0xa>
   2d64a:	f7df feb3 	bl	d3b4 <strlen>
   2d64e:	b280      	uxth	r0, r0
}
   2d650:	bd08      	pop	{r3, pc}

0002d652 <z_column_span_with_buffer_offsets_get>:
{
   2d652:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   2d654:	7b04      	ldrb	r4, [r0, #12]
   2d656:	8943      	ldrh	r3, [r0, #10]
   2d658:	4422      	add	r2, r4
   2d65a:	4421      	add	r1, r4
   2d65c:	fbb2 f0f3 	udiv	r0, r2, r3
   2d660:	fbb1 f4f3 	udiv	r4, r1, r3
   2d664:	fb03 2010 	mls	r0, r3, r0, r2
   2d668:	fb03 1114 	mls	r1, r3, r4, r1
}
   2d66c:	1a40      	subs	r0, r0, r1
   2d66e:	bd10      	pop	{r4, pc}

0002d670 <z_row_span_with_buffer_offsets_get>:
{
   2d670:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   2d672:	7b04      	ldrb	r4, [r0, #12]
   2d674:	8943      	ldrh	r3, [r0, #10]
   2d676:	4421      	add	r1, r4
   2d678:	1910      	adds	r0, r2, r4
   2d67a:	fbb1 f1f3 	udiv	r1, r1, r3
   2d67e:	fbb0 f0f3 	udiv	r0, r0, r3
}
   2d682:	1a40      	subs	r0, r0, r1
   2d684:	bd10      	pop	{r4, pc}

0002d686 <z_shell_multiline_data_calc>:
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   2d686:	7b03      	ldrb	r3, [r0, #12]
{
   2d688:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   2d68a:	8944      	ldrh	r4, [r0, #10]
   2d68c:	4419      	add	r1, r3
   2d68e:	fbb1 f5f4 	udiv	r5, r1, r4
   2d692:	fb04 1115 	mls	r1, r4, r5, r1
   2d696:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   2d698:	441a      	add	r2, r3
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   2d69a:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   2d69c:	fbb2 f3f4 	udiv	r3, r2, r4
   2d6a0:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   2d6a2:	fb04 2313 	mls	r3, r4, r3, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   2d6a6:	3501      	adds	r5, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   2d6a8:	3301      	adds	r3, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   2d6aa:	8085      	strh	r5, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   2d6ac:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   2d6ae:	8043      	strh	r3, [r0, #2]
}
   2d6b0:	bd30      	pop	{r4, r5, pc}

0002d6b2 <z_shell_pattern_remove>:
{
   2d6b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d6b4:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   2d6b6:	4611      	mov	r1, r2
{
   2d6b8:	4615      	mov	r5, r2
   2d6ba:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   2d6bc:	f003 f804 	bl	306c8 <strstr>
   2d6c0:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
   2d6c2:	4628      	mov	r0, r5
   2d6c4:	f7ff ffbf 	bl	2d646 <z_shell_strlen>
   2d6c8:	4605      	mov	r5, r0
	if (!pattern_addr) {
   2d6ca:	b1c4      	cbz	r4, 2d6fe <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   2d6cc:	42a7      	cmp	r7, r4
   2d6ce:	d207      	bcs.n	2d6e0 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   2d6d0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   2d6d4:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   2d6d6:	bf02      	ittt	eq
   2d6d8:	3501      	addeq	r5, #1
   2d6da:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   2d6dc:	f104 34ff 	addeq.w	r4, r4, #4294967295
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   2d6e0:	4620      	mov	r0, r4
   2d6e2:	f7ff ffb0 	bl	2d646 <z_shell_strlen>
	*buff_len -= pattern_len;
   2d6e6:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   2d6e8:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
   2d6ea:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   2d6ec:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
   2d6ee:	8033      	strh	r3, [r6, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
   2d6f0:	1961      	adds	r1, r4, r5
   2d6f2:	4620      	mov	r0, r4
   2d6f4:	b292      	uxth	r2, r2
}
   2d6f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2d6fa:	f002 bf7c 	b.w	305f6 <memmove>
   2d6fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d700 <z_shell_find_cmd>:
{
   2d700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2d704:	460f      	mov	r7, r1
   2d706:	b086      	sub	sp, #24
   2d708:	4616      	mov	r6, r2
	if (parent) {
   2d70a:	4604      	mov	r4, r0
   2d70c:	b170      	cbz	r0, 2d72c <z_shell_find_cmd+0x2c>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
   2d70e:	4603      	mov	r3, r0
   2d710:	ac01      	add	r4, sp, #4
   2d712:	f100 0510 	add.w	r5, r0, #16
   2d716:	6818      	ldr	r0, [r3, #0]
   2d718:	6859      	ldr	r1, [r3, #4]
   2d71a:	4622      	mov	r2, r4
   2d71c:	c203      	stmia	r2!, {r0, r1}
   2d71e:	3308      	adds	r3, #8
   2d720:	42ab      	cmp	r3, r5
   2d722:	4614      	mov	r4, r2
   2d724:	d1f7      	bne.n	2d716 <z_shell_find_cmd+0x16>
   2d726:	6818      	ldr	r0, [r3, #0]
   2d728:	6010      	str	r0, [r2, #0]
		parent = &parent_cpy;
   2d72a:	ac01      	add	r4, sp, #4
   2d72c:	f04f 0800 	mov.w	r8, #0
	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
   2d730:	4641      	mov	r1, r8
   2d732:	4632      	mov	r2, r6
   2d734:	4620      	mov	r0, r4
   2d736:	f7e7 ff6d 	bl	15614 <z_shell_cmd_get>
   2d73a:	f108 0801 	add.w	r8, r8, #1
   2d73e:	4605      	mov	r5, r0
   2d740:	b128      	cbz	r0, 2d74e <z_shell_find_cmd+0x4e>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   2d742:	6829      	ldr	r1, [r5, #0]
   2d744:	4638      	mov	r0, r7
   2d746:	f7df fe2b 	bl	d3a0 <strcmp>
   2d74a:	2800      	cmp	r0, #0
   2d74c:	d1f0      	bne.n	2d730 <z_shell_find_cmd+0x30>
}
   2d74e:	4628      	mov	r0, r5
   2d750:	b006      	add	sp, #24
   2d752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002d756 <z_shell_get_last_command>:
{
   2d756:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2d75a:	461c      	mov	r4, r3
   2d75c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2d760:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   2d764:	2300      	movs	r3, #0
{
   2d766:	460f      	mov	r7, r1
   2d768:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   2d76a:	6023      	str	r3, [r4, #0]
	while (*match_arg < argc) {
   2d76c:	6823      	ldr	r3, [r4, #0]
   2d76e:	42bb      	cmp	r3, r7
				continue;
   2d770:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   2d772:	d21b      	bcs.n	2d7ac <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
   2d774:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   2d778:	f000 fadc 	bl	2dd34 <z_shell_has_wildcard>
   2d77c:	6823      	ldr	r3, [r4, #0]
   2d77e:	4682      	mov	sl, r0
   2d780:	b118      	cbz	r0, 2d78a <z_shell_get_last_command+0x34>
				(*match_arg)++;
   2d782:	3301      	adds	r3, #1
   2d784:	6023      	str	r3, [r4, #0]
				continue;
   2d786:	4628      	mov	r0, r5
   2d788:	e7f0      	b.n	2d76c <z_shell_get_last_command+0x16>
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   2d78a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   2d78e:	4642      	mov	r2, r8
   2d790:	4628      	mov	r0, r5
   2d792:	f7ff ffb5 	bl	2d700 <z_shell_find_cmd>
		if (entry) {
   2d796:	b148      	cbz	r0, 2d7ac <z_shell_get_last_command+0x56>
			(*match_arg)++;
   2d798:	6823      	ldr	r3, [r4, #0]
   2d79a:	1c5a      	adds	r2, r3, #1
   2d79c:	6022      	str	r2, [r4, #0]
		if (only_static && (entry == dloc)) {
   2d79e:	f1b9 0f00 	cmp.w	r9, #0
   2d7a2:	d0e3      	beq.n	2d76c <z_shell_get_last_command+0x16>
   2d7a4:	4580      	cmp	r8, r0
   2d7a6:	d1e1      	bne.n	2d76c <z_shell_get_last_command+0x16>
			(*match_arg)--;
   2d7a8:	6023      	str	r3, [r4, #0]
			return NULL;
   2d7aa:	4655      	mov	r5, sl
}
   2d7ac:	4628      	mov	r0, r5
   2d7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002d7b2 <z_shell_raw_fprintf>:
{
   2d7b2:	b40e      	push	{r1, r2, r3}
   2d7b4:	b503      	push	{r0, r1, lr}
   2d7b6:	aa03      	add	r2, sp, #12
   2d7b8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   2d7bc:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2d7be:	f7e7 fe4d 	bl	1545c <z_shell_fprintf_fmt>
}
   2d7c2:	b002      	add	sp, #8
   2d7c4:	f85d eb04 	ldr.w	lr, [sp], #4
   2d7c8:	b003      	add	sp, #12
   2d7ca:	4770      	bx	lr

0002d7cc <full_line_cmd.isra.0>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   2d7cc:	6802      	ldr	r2, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
   2d7ce:	b538      	push	{r3, r4, r5, lr}
   2d7d0:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   2d7d2:	6810      	ldr	r0, [r2, #0]
   2d7d4:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
   2d7d6:	b110      	cbz	r0, 2d7de <full_line_cmd.isra.0+0x12>
   2d7d8:	f7df fdec 	bl	d3b4 <strlen>
   2d7dc:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2d7de:	6822      	ldr	r2, [r4, #0]
   2d7e0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   2d7e2:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2d7e4:	fbb3 f0f2 	udiv	r0, r3, r2
   2d7e8:	fb02 3010 	mls	r0, r2, r0, r3
}
   2d7ec:	fab0 f080 	clz	r0, r0
   2d7f0:	0940      	lsrs	r0, r0, #5
   2d7f2:	bd38      	pop	{r3, r4, r5, pc}

0002d7f4 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   2d7f4:	6882      	ldr	r2, [r0, #8]
{
   2d7f6:	b538      	push	{r3, r4, r5, lr}
   2d7f8:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   2d7fa:	6810      	ldr	r0, [r2, #0]
   2d7fc:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
   2d7fe:	b110      	cbz	r0, 2d806 <z_shell_cursor_in_empty_line+0x12>
   2d800:	f7df fdd8 	bl	d3b4 <strlen>
   2d804:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2d806:	68a2      	ldr	r2, [r4, #8]
   2d808:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   2d80a:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   2d80c:	fbb3 f0f2 	udiv	r0, r3, r2
   2d810:	fb02 3010 	mls	r0, r2, r0, r3
}
   2d814:	fab0 f080 	clz	r0, r0
   2d818:	0940      	lsrs	r0, r0, #5
   2d81a:	bd38      	pop	{r3, r4, r5, pc}

0002d81c <z_shell_op_cursor_move>:
{
   2d81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d81e:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   2d820:	6880      	ldr	r0, [r0, #8]
{
   2d822:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   2d824:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   2d826:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2d828:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   2d82a:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   2d82c:	f7ff ff2b 	bl	2d686 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
   2d830:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   2d832:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
   2d834:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   2d836:	462a      	mov	r2, r5
   2d838:	3020      	adds	r0, #32
   2d83a:	f7ff ff19 	bl	2d670 <z_row_span_with_buffer_offsets_get>
   2d83e:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
   2d840:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
   2d842:	462a      	mov	r2, r5
   2d844:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   2d846:	3020      	adds	r0, #32
   2d848:	f7ff ff03 	bl	2d652 <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
   2d84c:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
   2d84e:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
   2d850:	4620      	mov	r0, r4
   2d852:	f7e7 ff95 	bl	15780 <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
   2d856:	4631      	mov	r1, r6
   2d858:	4620      	mov	r0, r4
   2d85a:	f7e7 ffa7 	bl	157ac <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   2d85e:	68a3      	ldr	r3, [r4, #8]
   2d860:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
   2d862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002d864 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   2d864:	6883      	ldr	r3, [r0, #8]
   2d866:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
   2d868:	4249      	negs	r1, r1
   2d86a:	b209      	sxth	r1, r1
   2d86c:	f7ff bfd6 	b.w	2d81c <z_shell_op_cursor_move>

0002d870 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   2d870:	6883      	ldr	r3, [r0, #8]
   2d872:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
   2d874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   2d876:	1ac9      	subs	r1, r1, r3
   2d878:	b209      	sxth	r1, r1
   2d87a:	f7ff bfcf 	b.w	2d81c <z_shell_op_cursor_move>

0002d87e <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   2d87e:	6883      	ldr	r3, [r0, #8]
   2d880:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   2d882:	b11b      	cbz	r3, 2d88c <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
   2d884:	f04f 31ff 	mov.w	r1, #4294967295
   2d888:	f7ff bfc8 	b.w	2d81c <z_shell_op_cursor_move>
}
   2d88c:	4770      	bx	lr

0002d88e <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   2d88e:	6883      	ldr	r3, [r0, #8]
   2d890:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   2d892:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   2d894:	429a      	cmp	r2, r3
   2d896:	d202      	bcs.n	2d89e <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
   2d898:	2101      	movs	r1, #1
   2d89a:	f7ff bfbf 	b.w	2d81c <z_shell_op_cursor_move>
}
   2d89e:	4770      	bx	lr

0002d8a0 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   2d8a0:	6883      	ldr	r3, [r0, #8]
   2d8a2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   2d8a4:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   2d8a6:	4413      	add	r3, r2
   2d8a8:	2200      	movs	r2, #0
   2d8aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
   2d8ae:	f7e7 bf5b 	b.w	15768 <z_clear_eos>

0002d8b2 <z_shell_cmd_line_erase>:
{
   2d8b2:	b510      	push	{r4, lr}
   2d8b4:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   2d8b6:	6880      	ldr	r0, [r0, #8]
   2d8b8:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2d8ba:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   2d8bc:	3020      	adds	r0, #32
   2d8be:	f7ff fee2 	bl	2d686 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   2d8c2:	68a3      	ldr	r3, [r4, #8]
   2d8c4:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
   2d8c6:	4620      	mov	r0, r4
   2d8c8:	f1c1 0101 	rsb	r1, r1, #1
   2d8cc:	f7e7 ff6e 	bl	157ac <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   2d8d0:	68a3      	ldr	r3, [r4, #8]
   2d8d2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   2d8d4:	4620      	mov	r0, r4
   2d8d6:	3901      	subs	r1, #1
   2d8d8:	f7e7 ff52 	bl	15780 <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
   2d8dc:	4620      	mov	r0, r4
}
   2d8de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
   2d8e2:	f7e7 bf41 	b.w	15768 <z_clear_eos>

0002d8e6 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
   2d8e6:	f7e7 bff5 	b.w	158d4 <z_shell_write>

0002d8ea <z_shell_vfprintf>:
{
   2d8ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2d8ec:	461e      	mov	r6, r3
	    z_flag_use_colors_get(shell)	  &&
   2d8ee:	6883      	ldr	r3, [r0, #8]
{
   2d8f0:	4615      	mov	r5, r2
	return sh->ctx->cfg.flags.use_colors == 1;
   2d8f2:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   2d8f6:	06d2      	lsls	r2, r2, #27
{
   2d8f8:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   2d8fa:	d513      	bpl.n	2d924 <z_shell_vfprintf+0x3a>
	    z_flag_use_colors_get(shell)	  &&
   2d8fc:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   2d900:	428a      	cmp	r2, r1
   2d902:	d00f      	beq.n	2d924 <z_shell_vfprintf+0x3a>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   2d904:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2d906:	f8ad 3004 	strh.w	r3, [sp, #4]
		z_shell_vt100_color_set(shell, color);
   2d90a:	f7e8 f863 	bl	159d4 <z_shell_vt100_color_set>
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   2d90e:	6960      	ldr	r0, [r4, #20]
   2d910:	4629      	mov	r1, r5
   2d912:	4632      	mov	r2, r6
   2d914:	f7e7 fda2 	bl	1545c <z_shell_fprintf_fmt>
		z_shell_vt100_colors_restore(shell, &col);
   2d918:	a901      	add	r1, sp, #4
   2d91a:	4620      	mov	r0, r4
   2d91c:	f7e8 f87a 	bl	15a14 <z_shell_vt100_colors_restore>
}
   2d920:	b003      	add	sp, #12
   2d922:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   2d924:	6960      	ldr	r0, [r4, #20]
   2d926:	4632      	mov	r2, r6
   2d928:	4629      	mov	r1, r5
   2d92a:	f7e7 fd97 	bl	1545c <z_shell_fprintf_fmt>
}
   2d92e:	e7f7      	b.n	2d920 <z_shell_vfprintf+0x36>

0002d930 <data_insert>:
{
   2d930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2d934:	6886      	ldr	r6, [r0, #8]
   2d936:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   2d938:	18ab      	adds	r3, r5, r2
   2d93a:	2bff      	cmp	r3, #255	; 0xff
{
   2d93c:	4607      	mov	r7, r0
   2d93e:	4688      	mov	r8, r1
   2d940:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   2d942:	dc1f      	bgt.n	2d984 <data_insert+0x54>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2d944:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
   2d946:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   2d948:	3342      	adds	r3, #66	; 0x42
   2d94a:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2d94c:	b2ad      	uxth	r5, r5
   2d94e:	462a      	mov	r2, r5
   2d950:	4631      	mov	r1, r6
   2d952:	1930      	adds	r0, r6, r4
   2d954:	f002 fe4f 	bl	305f6 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2d958:	4622      	mov	r2, r4
   2d95a:	4641      	mov	r1, r8
   2d95c:	4630      	mov	r0, r6
   2d95e:	f002 fe3c 	bl	305da <memcpy>
	shell->ctx->cmd_buff_len += len;
   2d962:	68ba      	ldr	r2, [r7, #8]
   2d964:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
   2d966:	4423      	add	r3, r4
   2d968:	b29b      	uxth	r3, r3
   2d96a:	8793      	strh	r3, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   2d96c:	4413      	add	r3, r2
   2d96e:	2200      	movs	r2, #0
   2d970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	if (!z_flag_echo_get(shell)) {
   2d974:	68bb      	ldr	r3, [r7, #8]
	return sh->ctx->cfg.flags.echo == 1;
   2d976:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
   2d97a:	0789      	lsls	r1, r1, #30
   2d97c:	d404      	bmi.n	2d988 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
   2d97e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   2d980:	4414      	add	r4, r2
   2d982:	87dc      	strh	r4, [r3, #62]	; 0x3e
}
   2d984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   2d988:	4629      	mov	r1, r5
   2d98a:	4638      	mov	r0, r7
}
   2d98c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   2d990:	f7e8 b928 	b.w	15be4 <reprint_from_cursor>

0002d994 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   2d994:	f7ff bfcc 	b.w	2d930 <data_insert>

0002d998 <z_shell_op_char_delete>:
{
   2d998:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2d99a:	6883      	ldr	r3, [r0, #8]
{
   2d99c:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   2d99e:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   2d9a0:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
   2d9a2:	1a24      	subs	r4, r4, r0
   2d9a4:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   2d9a6:	b18c      	cbz	r4, 2d9cc <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   2d9a8:	3042      	adds	r0, #66	; 0x42
   2d9aa:	4418      	add	r0, r3
__ssp_bos_icheck3(memmove, void *, const void *)
   2d9ac:	4622      	mov	r2, r4
   2d9ae:	1c41      	adds	r1, r0, #1
   2d9b0:	f002 fe21 	bl	305f6 <memmove>
	--shell->ctx->cmd_buff_len;
   2d9b4:	68aa      	ldr	r2, [r5, #8]
   2d9b6:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   2d9b8:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   2d9ba:	3b01      	subs	r3, #1
   2d9bc:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   2d9be:	4628      	mov	r0, r5
   2d9c0:	2201      	movs	r2, #1
}
   2d9c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   2d9c6:	b289      	uxth	r1, r1
   2d9c8:	f7e8 b90c 	b.w	15be4 <reprint_from_cursor>
}
   2d9cc:	bd38      	pop	{r3, r4, r5, pc}

0002d9ce <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   2d9ce:	6883      	ldr	r3, [r0, #8]
   2d9d0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
   2d9d2:	b510      	push	{r4, lr}
   2d9d4:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   2d9d6:	b152      	cbz	r2, 2d9ee <z_shell_op_char_backspace+0x20>
   2d9d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   2d9da:	b143      	cbz	r3, 2d9ee <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
   2d9dc:	f04f 31ff 	mov.w	r1, #4294967295
   2d9e0:	f7ff ff1c 	bl	2d81c <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
   2d9e4:	4620      	mov	r0, r4
}
   2d9e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
   2d9ea:	f7ff bfd5 	b.w	2d998 <z_shell_op_char_delete>
}
   2d9ee:	bd10      	pop	{r4, pc}

0002d9f0 <msg_from_fifo.isra.0>:
static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
   2d9f0:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   2d9f2:	2200      	movs	r2, #0
   2d9f4:	2300      	movs	r3, #0
   2d9f6:	4669      	mov	r1, sp
   2d9f8:	f7f7 fdd0 	bl	2559c <z_impl_k_msgq_get>
	return (err == 0) ? msg.msg : NULL;
   2d9fc:	b918      	cbnz	r0, 2da06 <msg_from_fifo.isra.0+0x16>
   2d9fe:	9800      	ldr	r0, [sp, #0]
}
   2da00:	b003      	add	sp, #12
   2da02:	f85d fb04 	ldr.w	pc, [sp], #4
	return (err == 0) ? msg.msg : NULL;
   2da06:	2000      	movs	r0, #0
   2da08:	e7fa      	b.n	2da00 <msg_from_fifo.isra.0+0x10>

0002da0a <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2da0a:	6843      	ldr	r3, [r0, #4]
   2da0c:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2da0e:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   2da12:	f3bf 8f5b 	dmb	ish
   2da16:	e853 0f00 	ldrex	r0, [r3]
   2da1a:	4408      	add	r0, r1
   2da1c:	e843 0c00 	strex	ip, r0, [r3]
   2da20:	f1bc 0f00 	cmp.w	ip, #0
   2da24:	d1f7      	bne.n	2da16 <dropped+0xc>
   2da26:	f3bf 8f5b 	dmb	ish
   2da2a:	68d3      	ldr	r3, [r2, #12]
   2da2c:	f3bf 8f5b 	dmb	ish
   2da30:	e853 2f00 	ldrex	r2, [r3]
   2da34:	440a      	add	r2, r1
   2da36:	e843 2000 	strex	r0, r2, [r3]
   2da3a:	2800      	cmp	r0, #0
   2da3c:	d1f8      	bne.n	2da30 <dropped+0x26>
   2da3e:	f3bf 8f5b 	dmb	ish
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
   2da42:	4770      	bx	lr

0002da44 <z_shell_log_backend_output_func>:
{
   2da44:	b510      	push	{r4, lr}
   2da46:	4613      	mov	r3, r2
   2da48:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
   2da4a:	460a      	mov	r2, r1
   2da4c:	4601      	mov	r1, r0
   2da4e:	4618      	mov	r0, r3
   2da50:	f7ff ff49 	bl	2d8e6 <z_shell_print_stream>
}
   2da54:	4620      	mov	r0, r4
   2da56:	bd10      	pop	{r4, pc}

0002da58 <z_shell_log_backend_enable>:
{
   2da58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2da5a:	4604      	mov	r4, r0
   2da5c:	460e      	mov	r6, r1
   2da5e:	4617      	mov	r7, r2
		while ((msg = msg_from_fifo(backend)) != NULL) {
   2da60:	6860      	ldr	r0, [r4, #4]
   2da62:	f7ff ffc5 	bl	2d9f0 <msg_from_fifo.isra.0>
   2da66:	4605      	mov	r5, r0
   2da68:	b960      	cbnz	r0, 2da84 <z_shell_log_backend_enable+0x2c>
		log_backend_enable(backend->backend, ctx, init_log_level);
   2da6a:	463a      	mov	r2, r7
   2da6c:	6820      	ldr	r0, [r4, #0]
   2da6e:	4631      	mov	r1, r6
   2da70:	f7e5 f93a 	bl	12ce8 <log_backend_enable>
		log_output_ctx_set(backend->log_output, ctx);
   2da74:	68a3      	ldr	r3, [r4, #8]
   2da76:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
   2da78:	605e      	str	r6, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   2da7a:	68e3      	ldr	r3, [r4, #12]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   2da7c:	2201      	movs	r2, #1
   2da7e:	711a      	strb	r2, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   2da80:	601d      	str	r5, [r3, #0]
}
   2da82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_msg_put(msg);
   2da84:	f7ff fa1e 	bl	2cec4 <log_msg_put>
   2da88:	e7ea      	b.n	2da60 <z_shell_log_backend_enable+0x8>

0002da8a <z_shell_log_backend_disable>:
{
   2da8a:	b510      	push	{r4, lr}
   2da8c:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
   2da8e:	6800      	ldr	r0, [r0, #0]
   2da90:	f7e5 f954 	bl	12d3c <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   2da94:	68e3      	ldr	r3, [r4, #12]
   2da96:	2202      	movs	r2, #2
   2da98:	711a      	strb	r2, [r3, #4]
}
   2da9a:	bd10      	pop	{r4, pc}

0002da9c <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
   2da9c:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
   2da9e:	685b      	ldr	r3, [r3, #4]
{
   2daa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
   2daa2:	681e      	ldr	r6, [r3, #0]
			z_flag_use_colors_get(shell);
   2daa4:	68b3      	ldr	r3, [r6, #8]
	return sh->ctx->cfg.flags.use_colors == 1;
   2daa6:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2daaa:	68c3      	ldr	r3, [r0, #12]
   2daac:	f3bf 8f5b 	dmb	ish
{
   2dab0:	4604      	mov	r4, r0
   2dab2:	f3c5 1500 	ubfx	r5, r5, #4, #1
   2dab6:	2200      	movs	r2, #0
   2dab8:	e853 7f00 	ldrex	r7, [r3]
   2dabc:	e843 2100 	strex	r1, r2, [r3]
   2dac0:	2900      	cmp	r1, #0
   2dac2:	d1f9      	bne.n	2dab8 <z_shell_log_backend_process+0x1c>
   2dac4:	f3bf 8f5b 	dmb	ish
	if (dropped) {
   2dac8:	b18f      	cbz	r7, 2daee <z_shell_log_backend_process+0x52>
		if (colors) {
   2daca:	b13d      	cbz	r5, 2dadc <z_shell_log_backend_process+0x40>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   2dacc:	68b3      	ldr	r3, [r6, #8]
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   2dace:	2101      	movs	r1, #1
   2dad0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2dad2:	f8ad 3004 	strh.w	r3, [sp, #4]
   2dad6:	4630      	mov	r0, r6
   2dad8:	f7e7 ff7c 	bl	159d4 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   2dadc:	68a0      	ldr	r0, [r4, #8]
   2dade:	4639      	mov	r1, r7
   2dae0:	f7e5 fc3a 	bl	13358 <log_output_dropped_process>
		if (colors) {
   2dae4:	b11d      	cbz	r5, 2daee <z_shell_log_backend_process+0x52>
			z_shell_vt100_colors_restore(shell, &col);
   2dae6:	a901      	add	r1, sp, #4
   2dae8:	4630      	mov	r0, r6
   2daea:	f7e7 ff93 	bl	15a14 <z_shell_vt100_colors_restore>
	struct log_msg *msg = msg_from_fifo(backend);
   2daee:	6860      	ldr	r0, [r4, #4]
   2daf0:	f7ff ff7e 	bl	2d9f0 <msg_from_fifo.isra.0>
	if (!msg) {
   2daf4:	4604      	mov	r4, r0
   2daf6:	b168      	cbz	r0, 2db14 <z_shell_log_backend_process+0x78>
	msg_process(shell->log_backend->log_output, msg, colors);
   2daf8:	69f3      	ldr	r3, [r6, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   2dafa:	2d00      	cmp	r5, #0
	log_output_msg_process(log_output, msg, flags);
   2dafc:	4601      	mov	r1, r0
   2dafe:	bf08      	it	eq
   2db00:	220e      	moveq	r2, #14
   2db02:	6898      	ldr	r0, [r3, #8]
   2db04:	bf18      	it	ne
   2db06:	220f      	movne	r2, #15
   2db08:	f7e5 fb94 	bl	13234 <log_output_msg_process>
	log_msg_put(msg);
   2db0c:	4620      	mov	r0, r4
   2db0e:	f7ff f9d9 	bl	2cec4 <log_msg_put>
	return true;
   2db12:	2001      	movs	r0, #1
}
   2db14:	b003      	add	sp, #12
   2db16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002db18 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2db18:	6843      	ldr	r3, [r0, #4]
{
   2db1a:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2db1c:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   2db1e:	6860      	ldr	r0, [r4, #4]
   2db20:	6803      	ldr	r3, [r0, #0]
   2db22:	2101      	movs	r1, #1
   2db24:	689b      	ldr	r3, [r3, #8]
   2db26:	4798      	blx	r3
	if (err == 0) {
   2db28:	bb48      	cbnz	r0, 2db7e <panic+0x66>
		shell->log_backend->control_block->state =
   2db2a:	69e3      	ldr	r3, [r4, #28]
   2db2c:	68db      	ldr	r3, [r3, #12]
   2db2e:	2203      	movs	r2, #3
   2db30:	711a      	strb	r2, [r3, #4]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, panic_mode, val, ret);
   2db32:	68a3      	ldr	r3, [r4, #8]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2db34:	f3bf 8f5b 	dmb	ish
   2db38:	f503 7319 	add.w	r3, r3, #612	; 0x264
   2db3c:	e853 2f00 	ldrex	r2, [r3]
   2db40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2db44:	e843 2100 	strex	r1, r2, [r3]
   2db48:	2900      	cmp	r1, #0
   2db4a:	d1f7      	bne.n	2db3c <panic+0x24>
   2db4c:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   2db50:	68a0      	ldr	r0, [r4, #8]
   2db52:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2db54:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   2db56:	3020      	adds	r0, #32
   2db58:	f7ff fd95 	bl	2d686 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
   2db5c:	f04f 31ff 	mov.w	r1, #4294967295
   2db60:	4620      	mov	r0, r4
   2db62:	f7e7 fe0d 	bl	15780 <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   2db66:	68a3      	ldr	r3, [r4, #8]
   2db68:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
   2db6a:	4620      	mov	r0, r4
   2db6c:	4249      	negs	r1, r1
   2db6e:	f7e7 fe1d 	bl	157ac <z_shell_op_cursor_horiz_move>
			while (z_shell_log_backend_process(
   2db72:	69e0      	ldr	r0, [r4, #28]
   2db74:	f7ff ff92 	bl	2da9c <z_shell_log_backend_process>
   2db78:	2800      	cmp	r0, #0
   2db7a:	d1fa      	bne.n	2db72 <panic+0x5a>
}
   2db7c:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
   2db7e:	69e0      	ldr	r0, [r4, #28]
}
   2db80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
   2db84:	f7ff bf81 	b.w	2da8a <z_shell_log_backend_disable>

0002db88 <z_shell_raw_fprintf>:
{
   2db88:	b40e      	push	{r1, r2, r3}
   2db8a:	b503      	push	{r0, r1, lr}
   2db8c:	aa03      	add	r2, sp, #12
   2db8e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   2db92:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2db94:	f7e7 fc62 	bl	1545c <z_shell_fprintf_fmt>
}
   2db98:	b002      	add	sp, #8
   2db9a:	f85d eb04 	ldr.w	lr, [sp], #4
   2db9e:	b003      	add	sp, #12
   2dba0:	4770      	bx	lr

0002dba2 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   2dba2:	6983      	ldr	r3, [r0, #24]
   2dba4:	2000      	movs	r0, #0
   2dba6:	6018      	str	r0, [r3, #0]
}
   2dba8:	4770      	bx	lr

0002dbaa <z_shell_raw_fprintf>:
{
   2dbaa:	b40e      	push	{r1, r2, r3}
   2dbac:	b503      	push	{r0, r1, lr}
   2dbae:	aa03      	add	r2, sp, #12
   2dbb0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   2dbb4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2dbb6:	f7e7 fc51 	bl	1545c <z_shell_fprintf_fmt>
}
   2dbba:	b002      	add	sp, #8
   2dbbc:	f85d eb04 	ldr.w	lr, [sp], #4
   2dbc0:	b003      	add	sp, #12
   2dbc2:	4770      	bx	lr

0002dbc4 <cmd_echo_on>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
   2dbc4:	6883      	ldr	r3, [r0, #8]
   2dbc6:	f3bf 8f5b 	dmb	ish
   2dbca:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2dbce:	e853 2f00 	ldrex	r2, [r3]
   2dbd2:	f042 0202 	orr.w	r2, r2, #2
   2dbd6:	e843 2100 	strex	r1, r2, [r3]
   2dbda:	2900      	cmp	r1, #0
   2dbdc:	d1f7      	bne.n	2dbce <cmd_echo_on+0xa>
   2dbde:	f3bf 8f5b 	dmb	ish
}
   2dbe2:	2000      	movs	r0, #0
   2dbe4:	4770      	bx	lr

0002dbe6 <cmd_bacskpace_mode_backspace>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, mode_delete, val, ret);
   2dbe6:	6883      	ldr	r3, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2dbe8:	f3bf 8f5b 	dmb	ish
   2dbec:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2dbf0:	e853 2f00 	ldrex	r2, [r3]
   2dbf4:	f022 0208 	bic.w	r2, r2, #8
   2dbf8:	e843 2100 	strex	r1, r2, [r3]
   2dbfc:	2900      	cmp	r1, #0
   2dbfe:	d1f7      	bne.n	2dbf0 <cmd_bacskpace_mode_backspace+0xa>
   2dc00:	f3bf 8f5b 	dmb	ish
}
   2dc04:	2000      	movs	r0, #0
   2dc06:	4770      	bx	lr

0002dc08 <cmd_echo_off>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
   2dc08:	6883      	ldr	r3, [r0, #8]
   2dc0a:	f3bf 8f5b 	dmb	ish
   2dc0e:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2dc12:	e853 2f00 	ldrex	r2, [r3]
   2dc16:	f022 0202 	bic.w	r2, r2, #2
   2dc1a:	e843 2100 	strex	r1, r2, [r3]
   2dc1e:	2900      	cmp	r1, #0
   2dc20:	d1f7      	bne.n	2dc12 <cmd_echo_off+0xa>
   2dc22:	f3bf 8f5b 	dmb	ish
}
   2dc26:	2000      	movs	r0, #0
   2dc28:	4770      	bx	lr

0002dc2a <cmd_colors_off>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_colors, val, ret);
   2dc2a:	6883      	ldr	r3, [r0, #8]
   2dc2c:	f3bf 8f5b 	dmb	ish
   2dc30:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2dc34:	e853 2f00 	ldrex	r2, [r3]
   2dc38:	f022 0210 	bic.w	r2, r2, #16
   2dc3c:	e843 2100 	strex	r1, r2, [r3]
   2dc40:	2900      	cmp	r1, #0
   2dc42:	d1f7      	bne.n	2dc34 <cmd_colors_off+0xa>
   2dc44:	f3bf 8f5b 	dmb	ish
}
   2dc48:	2000      	movs	r0, #0
   2dc4a:	4770      	bx	lr

0002dc4c <cmd_bacskpace_mode_delete>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, mode_delete, val, ret);
   2dc4c:	6883      	ldr	r3, [r0, #8]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2dc4e:	f3bf 8f5b 	dmb	ish
   2dc52:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2dc56:	e853 2f00 	ldrex	r2, [r3]
   2dc5a:	f042 0208 	orr.w	r2, r2, #8
   2dc5e:	e843 2100 	strex	r1, r2, [r3]
   2dc62:	2900      	cmp	r1, #0
   2dc64:	d1f7      	bne.n	2dc56 <cmd_bacskpace_mode_delete+0xa>
   2dc66:	f3bf 8f5b 	dmb	ish
}
   2dc6a:	2000      	movs	r0, #0
   2dc6c:	4770      	bx	lr

0002dc6e <cmd_colors_on>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_colors, val, ret);
   2dc6e:	6883      	ldr	r3, [r0, #8]
   2dc70:	f3bf 8f5b 	dmb	ish
   2dc74:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2dc78:	e853 2f00 	ldrex	r2, [r3]
   2dc7c:	f042 0210 	orr.w	r2, r2, #16
   2dc80:	e843 2100 	strex	r1, r2, [r3]
   2dc84:	2900      	cmp	r1, #0
   2dc86:	d1f7      	bne.n	2dc78 <cmd_colors_on+0xa>
   2dc88:	f3bf 8f5b 	dmb	ish
}
   2dc8c:	2000      	movs	r0, #0
   2dc8e:	4770      	bx	lr

0002dc90 <remove_from_tail.part.0>:
static bool remove_from_tail(struct shell_history *history)
   2dc90:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2dc92:	6883      	ldr	r3, [r0, #8]
	ring_buf_get_finish(history->ring_buf, total_len);
   2dc94:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
   2dc96:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
   2dc9a:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   2dc9c:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   2dc9e:	2200      	movs	r2, #0
	node->prev = NULL;
   2dca0:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
   2dca4:	8919      	ldrh	r1, [r3, #8]
   2dca6:	895b      	ldrh	r3, [r3, #10]
   2dca8:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   2dcaa:	310c      	adds	r1, #12
   2dcac:	f7fe fe9a 	bl	2c9e4 <ring_buf_get_finish>
}
   2dcb0:	2001      	movs	r0, #1
   2dcb2:	bd08      	pop	{r3, pc}

0002dcb4 <z_shell_history_mode_exit>:
	history->current = NULL;
   2dcb4:	2300      	movs	r3, #0
   2dcb6:	60c3      	str	r3, [r0, #12]
}
   2dcb8:	4770      	bx	lr

0002dcba <z_shell_history_get>:
{
   2dcba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2dcbc:	461f      	mov	r7, r3
	return list->head == list;
   2dcbe:	4603      	mov	r3, r0
   2dcc0:	4616      	mov	r6, r2
   2dcc2:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
   2dcc6:	429c      	cmp	r4, r3
   2dcc8:	d102      	bne.n	2dcd0 <z_shell_history_get+0x16>
		*len = 0U;
   2dcca:	2000      	movs	r0, #0
   2dccc:	8038      	strh	r0, [r7, #0]
}
   2dcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!up) { /* button down */
   2dcd0:	68c5      	ldr	r5, [r0, #12]
   2dcd2:	b9b1      	cbnz	r1, 2dd02 <z_shell_history_get+0x48>
		if (history->current == NULL) {
   2dcd4:	2d00      	cmp	r5, #0
   2dcd6:	d0f8      	beq.n	2dcca <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   2dcd8:	42a5      	cmp	r5, r4
   2dcda:	d102      	bne.n	2dce2 <z_shell_history_get+0x28>
	history->current = l_item;
   2dcdc:	2300      	movs	r3, #0
   2dcde:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   2dce0:	e7f3      	b.n	2dcca <z_shell_history_get+0x10>
   2dce2:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   2dce4:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   2dce6:	2c00      	cmp	r4, #0
   2dce8:	d0ef      	beq.n	2dcca <z_shell_history_get+0x10>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2dcea:	8922      	ldrh	r2, [r4, #8]
   2dcec:	f104 010c 	add.w	r1, r4, #12
   2dcf0:	4630      	mov	r0, r6
   2dcf2:	f002 fc72 	bl	305da <memcpy>
		*len = h_item->len;
   2dcf6:	8923      	ldrh	r3, [r4, #8]
   2dcf8:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   2dcfa:	2200      	movs	r2, #0
   2dcfc:	54f2      	strb	r2, [r6, r3]
		return true;
   2dcfe:	2001      	movs	r0, #1
   2dd00:	e7e5      	b.n	2dcce <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   2dd02:	2d00      	cmp	r5, #0
   2dd04:	d0ee      	beq.n	2dce4 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   2dd06:	6883      	ldr	r3, [r0, #8]
   2dd08:	429d      	cmp	r5, r3
   2dd0a:	d0e7      	beq.n	2dcdc <z_shell_history_get+0x22>
   2dd0c:	682c      	ldr	r4, [r5, #0]
   2dd0e:	e7e9      	b.n	2dce4 <z_shell_history_get+0x2a>

0002dd10 <z_shell_history_purge>:
{
   2dd10:	b538      	push	{r3, r4, r5, lr}
   2dd12:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   2dd14:	1d05      	adds	r5, r0, #4
   2dd16:	6863      	ldr	r3, [r4, #4]
   2dd18:	42ab      	cmp	r3, r5
   2dd1a:	d004      	beq.n	2dd26 <z_shell_history_purge+0x16>
   2dd1c:	4620      	mov	r0, r4
   2dd1e:	f7ff ffb7 	bl	2dc90 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   2dd22:	2800      	cmp	r0, #0
   2dd24:	d1f7      	bne.n	2dd16 <z_shell_history_purge+0x6>
}
   2dd26:	bd38      	pop	{r3, r4, r5, pc}

0002dd28 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   2dd28:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   2dd2a:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   2dd2e:	2300      	movs	r3, #0
   2dd30:	60c3      	str	r3, [r0, #12]
}
   2dd32:	4770      	bx	lr

0002dd34 <z_shell_has_wildcard>:
{
   2dd34:	b510      	push	{r4, lr}
   2dd36:	4604      	mov	r4, r0
   2dd38:	b908      	cbnz	r0, 2dd3e <z_shell_has_wildcard+0xa>
	return false;
   2dd3a:	2000      	movs	r0, #0
}
   2dd3c:	bd10      	pop	{r4, pc}
   2dd3e:	f7df fb39 	bl	d3b4 <strlen>
	for (size_t i = 0; i < str_len; i++) {
   2dd42:	2300      	movs	r3, #0
   2dd44:	b280      	uxth	r0, r0
   2dd46:	4283      	cmp	r3, r0
   2dd48:	d2f7      	bcs.n	2dd3a <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   2dd4a:	5ce2      	ldrb	r2, [r4, r3]
   2dd4c:	2a3f      	cmp	r2, #63	; 0x3f
   2dd4e:	d003      	beq.n	2dd58 <z_shell_has_wildcard+0x24>
   2dd50:	2a2a      	cmp	r2, #42	; 0x2a
   2dd52:	d001      	beq.n	2dd58 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
   2dd54:	3301      	adds	r3, #1
   2dd56:	e7f6      	b.n	2dd46 <z_shell_has_wildcard+0x12>
			return true;
   2dd58:	2001      	movs	r0, #1
   2dd5a:	e7ef      	b.n	2dd3c <z_shell_has_wildcard+0x8>

0002dd5c <z_shell_wildcard_prepare>:
{
   2dd5c:	b510      	push	{r4, lr}
   2dd5e:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2dd60:	6880      	ldr	r0, [r0, #8]
   2dd62:	f44f 7280 	mov.w	r2, #256	; 0x100
   2dd66:	2100      	movs	r1, #0
   2dd68:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   2dd6c:	f002 fc5d 	bl	3062a <memset>
	memcpy(shell->ctx->temp_buff,
   2dd70:	68a0      	ldr	r0, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2dd72:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2dd74:	f100 0142 	add.w	r1, r0, #66	; 0x42
   2dd78:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   2dd7c:	f002 fc2d 	bl	305da <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
   2dd80:	68a0      	ldr	r0, [r4, #8]
   2dd82:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   2dd86:	f7e7 fc7f 	bl	15688 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
   2dd8a:	68a3      	ldr	r3, [r4, #8]
   2dd8c:	f513 70a1 	adds.w	r0, r3, #322	; 0x142
   2dd90:	d007      	beq.n	2dda2 <z_shell_wildcard_prepare+0x46>
   2dd92:	f7df fb0f 	bl	d3b4 <strlen>
   2dd96:	b283      	uxth	r3, r0
   2dd98:	68a2      	ldr	r2, [r4, #8]
   2dd9a:	3301      	adds	r3, #1
   2dd9c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
   2dda0:	bd10      	pop	{r4, pc}
   2dda2:	4603      	mov	r3, r0
   2dda4:	e7f8      	b.n	2dd98 <z_shell_wildcard_prepare+0x3c>

0002dda6 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
   2dda6:	b510      	push	{r4, lr}
   2dda8:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   2ddaa:	6880      	ldr	r0, [r0, #8]
   2ddac:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
   2ddb0:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   2ddb4:	3042      	adds	r0, #66	; 0x42
   2ddb6:	f002 fc10 	bl	305da <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   2ddba:	68a3      	ldr	r3, [r4, #8]
   2ddbc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   2ddc0:	879a      	strh	r2, [r3, #60]	; 0x3c
}
   2ddc2:	bd10      	pop	{r4, pc}

0002ddc4 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2ddc4:	2200      	movs	r2, #0
   2ddc6:	e9c0 2200 	strd	r2, r2, [r0]
   2ddca:	6082      	str	r2, [r0, #8]
}
   2ddcc:	4770      	bx	lr

0002ddce <bt_scan_stop>:
	return bt_le_scan_stop();
   2ddce:	f7ec bc8b 	b.w	1a6e8 <bt_le_scan_stop>

0002ddd2 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2ddd2:	b538      	push	{r3, r4, r5, lr}
   2ddd4:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2ddd6:	42ab      	cmp	r3, r5
{
   2ddd8:	4611      	mov	r1, r2
   2ddda:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2dddc:	d804      	bhi.n	2dde8 <_copy+0x16>
   2ddde:	461a      	mov	r2, r3
   2dde0:	f002 fbfb 	bl	305da <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2dde4:	4620      	mov	r0, r4
   2dde6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2dde8:	2400      	movs	r4, #0
   2ddea:	e7fb      	b.n	2dde4 <_copy+0x12>

0002ddec <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2ddec:	f002 bc1d 	b.w	3062a <memset>

0002ddf0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2ddf0:	09c3      	lsrs	r3, r0, #7
   2ddf2:	005a      	lsls	r2, r3, #1
   2ddf4:	4413      	add	r3, r2
   2ddf6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2ddfa:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2ddfe:	b2c0      	uxtb	r0, r0
   2de00:	4770      	bx	lr

0002de02 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2de02:	78cb      	ldrb	r3, [r1, #3]
   2de04:	7802      	ldrb	r2, [r0, #0]
   2de06:	4053      	eors	r3, r2
   2de08:	7003      	strb	r3, [r0, #0]
   2de0a:	884b      	ldrh	r3, [r1, #2]
   2de0c:	7842      	ldrb	r2, [r0, #1]
   2de0e:	4053      	eors	r3, r2
   2de10:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2de12:	680a      	ldr	r2, [r1, #0]
   2de14:	7883      	ldrb	r3, [r0, #2]
   2de16:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2de1a:	7083      	strb	r3, [r0, #2]
   2de1c:	680a      	ldr	r2, [r1, #0]
   2de1e:	78c3      	ldrb	r3, [r0, #3]
   2de20:	4053      	eors	r3, r2
   2de22:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2de24:	79cb      	ldrb	r3, [r1, #7]
   2de26:	7902      	ldrb	r2, [r0, #4]
   2de28:	4053      	eors	r3, r2
   2de2a:	7103      	strb	r3, [r0, #4]
   2de2c:	88cb      	ldrh	r3, [r1, #6]
   2de2e:	7942      	ldrb	r2, [r0, #5]
   2de30:	4053      	eors	r3, r2
   2de32:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2de34:	684a      	ldr	r2, [r1, #4]
   2de36:	7983      	ldrb	r3, [r0, #6]
   2de38:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2de3c:	7183      	strb	r3, [r0, #6]
   2de3e:	684a      	ldr	r2, [r1, #4]
   2de40:	79c3      	ldrb	r3, [r0, #7]
   2de42:	4053      	eors	r3, r2
   2de44:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2de46:	7acb      	ldrb	r3, [r1, #11]
   2de48:	7a02      	ldrb	r2, [r0, #8]
   2de4a:	4053      	eors	r3, r2
   2de4c:	7203      	strb	r3, [r0, #8]
   2de4e:	7a42      	ldrb	r2, [r0, #9]
   2de50:	894b      	ldrh	r3, [r1, #10]
   2de52:	4053      	eors	r3, r2
   2de54:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2de56:	688a      	ldr	r2, [r1, #8]
   2de58:	7a83      	ldrb	r3, [r0, #10]
   2de5a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2de5e:	7283      	strb	r3, [r0, #10]
   2de60:	688a      	ldr	r2, [r1, #8]
   2de62:	7ac3      	ldrb	r3, [r0, #11]
   2de64:	4053      	eors	r3, r2
   2de66:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2de68:	7bcb      	ldrb	r3, [r1, #15]
   2de6a:	7b02      	ldrb	r2, [r0, #12]
   2de6c:	4053      	eors	r3, r2
   2de6e:	7303      	strb	r3, [r0, #12]
   2de70:	89cb      	ldrh	r3, [r1, #14]
   2de72:	7b42      	ldrb	r2, [r0, #13]
   2de74:	4053      	eors	r3, r2
   2de76:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2de78:	68ca      	ldr	r2, [r1, #12]
   2de7a:	7b83      	ldrb	r3, [r0, #14]
   2de7c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2de80:	7383      	strb	r3, [r0, #14]
   2de82:	68ca      	ldr	r2, [r1, #12]
   2de84:	7bc3      	ldrb	r3, [r0, #15]
   2de86:	4053      	eors	r3, r2
   2de88:	73c3      	strb	r3, [r0, #15]
}
   2de8a:	4770      	bx	lr

0002de8c <shift_rows>:
{
   2de8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2de8e:	7802      	ldrb	r2, [r0, #0]
   2de90:	f88d 2000 	strb.w	r2, [sp]
   2de94:	7942      	ldrb	r2, [r0, #5]
   2de96:	f88d 2001 	strb.w	r2, [sp, #1]
   2de9a:	7a82      	ldrb	r2, [r0, #10]
   2de9c:	f88d 2002 	strb.w	r2, [sp, #2]
   2dea0:	7bc2      	ldrb	r2, [r0, #15]
   2dea2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2dea6:	7902      	ldrb	r2, [r0, #4]
   2dea8:	f88d 2004 	strb.w	r2, [sp, #4]
   2deac:	7a42      	ldrb	r2, [r0, #9]
   2deae:	f88d 2005 	strb.w	r2, [sp, #5]
   2deb2:	7b82      	ldrb	r2, [r0, #14]
   2deb4:	f88d 2006 	strb.w	r2, [sp, #6]
   2deb8:	78c2      	ldrb	r2, [r0, #3]
   2deba:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2debe:	7a02      	ldrb	r2, [r0, #8]
   2dec0:	f88d 2008 	strb.w	r2, [sp, #8]
   2dec4:	7b42      	ldrb	r2, [r0, #13]
   2dec6:	f88d 2009 	strb.w	r2, [sp, #9]
   2deca:	7882      	ldrb	r2, [r0, #2]
   2decc:	f88d 200a 	strb.w	r2, [sp, #10]
   2ded0:	79c2      	ldrb	r2, [r0, #7]
   2ded2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2ded6:	7b02      	ldrb	r2, [r0, #12]
   2ded8:	f88d 200c 	strb.w	r2, [sp, #12]
   2dedc:	7842      	ldrb	r2, [r0, #1]
   2dede:	7ac3      	ldrb	r3, [r0, #11]
   2dee0:	f88d 200d 	strb.w	r2, [sp, #13]
   2dee4:	7982      	ldrb	r2, [r0, #6]
   2dee6:	f88d 200e 	strb.w	r2, [sp, #14]
   2deea:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2deee:	2310      	movs	r3, #16
   2def0:	466a      	mov	r2, sp
   2def2:	4619      	mov	r1, r3
   2def4:	f7ff ff6d 	bl	2ddd2 <_copy>
}
   2def8:	b005      	add	sp, #20
   2defa:	f85d fb04 	ldr.w	pc, [sp], #4

0002defe <mult_row_column>:
{
   2defe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2df00:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2df02:	7808      	ldrb	r0, [r1, #0]
{
   2df04:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2df06:	f7ff ff73 	bl	2ddf0 <_double_byte>
   2df0a:	4605      	mov	r5, r0
   2df0c:	7860      	ldrb	r0, [r4, #1]
   2df0e:	f7ff ff6f 	bl	2ddf0 <_double_byte>
   2df12:	78a2      	ldrb	r2, [r4, #2]
   2df14:	7863      	ldrb	r3, [r4, #1]
   2df16:	4053      	eors	r3, r2
   2df18:	78e2      	ldrb	r2, [r4, #3]
   2df1a:	4053      	eors	r3, r2
   2df1c:	405d      	eors	r5, r3
   2df1e:	4045      	eors	r5, r0
   2df20:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2df22:	7860      	ldrb	r0, [r4, #1]
   2df24:	7827      	ldrb	r7, [r4, #0]
   2df26:	f7ff ff63 	bl	2ddf0 <_double_byte>
   2df2a:	4605      	mov	r5, r0
   2df2c:	78a0      	ldrb	r0, [r4, #2]
   2df2e:	f7ff ff5f 	bl	2ddf0 <_double_byte>
   2df32:	78a3      	ldrb	r3, [r4, #2]
   2df34:	405f      	eors	r7, r3
   2df36:	78e3      	ldrb	r3, [r4, #3]
   2df38:	405f      	eors	r7, r3
   2df3a:	407d      	eors	r5, r7
   2df3c:	4045      	eors	r5, r0
   2df3e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2df40:	78a0      	ldrb	r0, [r4, #2]
   2df42:	7865      	ldrb	r5, [r4, #1]
   2df44:	7827      	ldrb	r7, [r4, #0]
   2df46:	f7ff ff53 	bl	2ddf0 <_double_byte>
   2df4a:	406f      	eors	r7, r5
   2df4c:	4605      	mov	r5, r0
   2df4e:	78e0      	ldrb	r0, [r4, #3]
   2df50:	f7ff ff4e 	bl	2ddf0 <_double_byte>
   2df54:	78e3      	ldrb	r3, [r4, #3]
   2df56:	405f      	eors	r7, r3
   2df58:	407d      	eors	r5, r7
   2df5a:	4045      	eors	r5, r0
   2df5c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2df5e:	7820      	ldrb	r0, [r4, #0]
   2df60:	f7ff ff46 	bl	2ddf0 <_double_byte>
   2df64:	7863      	ldrb	r3, [r4, #1]
   2df66:	7825      	ldrb	r5, [r4, #0]
   2df68:	405d      	eors	r5, r3
   2df6a:	78a3      	ldrb	r3, [r4, #2]
   2df6c:	405d      	eors	r5, r3
   2df6e:	4045      	eors	r5, r0
   2df70:	78e0      	ldrb	r0, [r4, #3]
   2df72:	f7ff ff3d 	bl	2ddf0 <_double_byte>
   2df76:	b2ed      	uxtb	r5, r5
   2df78:	4045      	eors	r5, r0
   2df7a:	70f5      	strb	r5, [r6, #3]
}
   2df7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002df7e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2df7e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2df80:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2df82:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2df84:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2df88:	2b00      	cmp	r3, #0
   2df8a:	bfb4      	ite	lt
   2df8c:	2387      	movlt	r3, #135	; 0x87
   2df8e:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2df90:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2df94:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2df98:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2df9a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2df9e:	d002      	beq.n	2dfa6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2dfa0:	7813      	ldrb	r3, [r2, #0]
   2dfa2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2dfa4:	e7f4      	b.n	2df90 <gf_double+0x12>
	}
}
   2dfa6:	bd10      	pop	{r4, pc}

0002dfa8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2dfa8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2dfaa:	b120      	cbz	r0, 2dfb6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2dfac:	2258      	movs	r2, #88	; 0x58
   2dfae:	2100      	movs	r1, #0
   2dfb0:	f7ff ff1c 	bl	2ddec <_set>
   2dfb4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2dfb6:	bd08      	pop	{r3, pc}

0002dfb8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2dfb8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2dfba:	4604      	mov	r4, r0
   2dfbc:	b188      	cbz	r0, 2dfe2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2dfbe:	2210      	movs	r2, #16
   2dfc0:	2100      	movs	r1, #0
   2dfc2:	f7ff ff13 	bl	2ddec <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2dfc6:	2210      	movs	r2, #16
   2dfc8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2dfcc:	2100      	movs	r1, #0
   2dfce:	f7ff ff0d 	bl	2ddec <_set>
	s->leftover_offset = 0;
   2dfd2:	2300      	movs	r3, #0
   2dfd4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2dfd6:	2200      	movs	r2, #0
   2dfd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2dfdc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2dfe0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2dfe2:	bd10      	pop	{r4, pc}

0002dfe4 <tc_cmac_setup>:
{
   2dfe4:	b570      	push	{r4, r5, r6, lr}
   2dfe6:	460d      	mov	r5, r1
   2dfe8:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2dfea:	4604      	mov	r4, r0
   2dfec:	b310      	cbz	r0, 2e034 <tc_cmac_setup+0x50>
   2dfee:	b311      	cbz	r1, 2e036 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2dff0:	2258      	movs	r2, #88	; 0x58
   2dff2:	2100      	movs	r1, #0
   2dff4:	f7ff fefa 	bl	2ddec <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2dff8:	4629      	mov	r1, r5
	s->sched = sched;
   2dffa:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2dffc:	4630      	mov	r0, r6
   2dffe:	f7e8 fddb 	bl	16bb8 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2e002:	2210      	movs	r2, #16
   2e004:	2100      	movs	r1, #0
   2e006:	4620      	mov	r0, r4
   2e008:	f7ff fef0 	bl	2ddec <_set>
	gf_double (s->K1, s->iv);
   2e00c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2e010:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2e012:	4621      	mov	r1, r4
   2e014:	4620      	mov	r0, r4
   2e016:	f7e8 fe21 	bl	16c5c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2e01a:	4621      	mov	r1, r4
   2e01c:	4628      	mov	r0, r5
   2e01e:	f7ff ffae 	bl	2df7e <gf_double>
	gf_double (s->K2, s->K1);
   2e022:	4629      	mov	r1, r5
   2e024:	f104 0020 	add.w	r0, r4, #32
   2e028:	f7ff ffa9 	bl	2df7e <gf_double>
	tc_cmac_init(s);
   2e02c:	4620      	mov	r0, r4
   2e02e:	f7ff ffc3 	bl	2dfb8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2e032:	2001      	movs	r0, #1
}
   2e034:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2e036:	4608      	mov	r0, r1
   2e038:	e7fc      	b.n	2e034 <tc_cmac_setup+0x50>

0002e03a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2e03a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e03e:	460d      	mov	r5, r1
   2e040:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2e042:	4604      	mov	r4, r0
   2e044:	2800      	cmp	r0, #0
   2e046:	d062      	beq.n	2e10e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2e048:	b912      	cbnz	r2, 2e050 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2e04a:	2001      	movs	r0, #1
}
   2e04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2e050:	2900      	cmp	r1, #0
   2e052:	d05c      	beq.n	2e10e <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2e054:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2e058:	ea50 0301 	orrs.w	r3, r0, r1
   2e05c:	d057      	beq.n	2e10e <tc_cmac_update+0xd4>
	s->countdown--;
   2e05e:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   2e062:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2e066:	f141 33ff 	adc.w	r3, r1, #4294967295
   2e06a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2e06e:	f1b8 0f00 	cmp.w	r8, #0
   2e072:	d02a      	beq.n	2e0ca <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2e074:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   2e078:	f108 0030 	add.w	r0, r8, #48	; 0x30
   2e07c:	42be      	cmp	r6, r7
   2e07e:	4420      	add	r0, r4
   2e080:	d208      	bcs.n	2e094 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2e082:	462a      	mov	r2, r5
   2e084:	4633      	mov	r3, r6
   2e086:	4631      	mov	r1, r6
   2e088:	f7ff fea3 	bl	2ddd2 <_copy>
			s->leftover_offset += data_length;
   2e08c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2e08e:	4432      	add	r2, r6
   2e090:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2e092:	e7da      	b.n	2e04a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2e094:	463b      	mov	r3, r7
   2e096:	462a      	mov	r2, r5
   2e098:	4639      	mov	r1, r7
   2e09a:	f7ff fe9a 	bl	2ddd2 <_copy>
		data_length -= remaining_space;
   2e09e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2e0a0:	2300      	movs	r3, #0
   2e0a2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2e0a4:	4446      	add	r6, r8
		data += remaining_space;
   2e0a6:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2e0a8:	1e63      	subs	r3, r4, #1
   2e0aa:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2e0ae:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2e0b2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2e0b6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2e0b8:	ea82 0200 	eor.w	r2, r2, r0
   2e0bc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2e0be:	d1f6      	bne.n	2e0ae <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2e0c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2e0c2:	4621      	mov	r1, r4
   2e0c4:	4620      	mov	r0, r4
   2e0c6:	f7e8 fdc9 	bl	16c5c <tc_aes_encrypt>
   2e0ca:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2e0ce:	2e10      	cmp	r6, #16
   2e0d0:	d80a      	bhi.n	2e0e8 <tc_cmac_update+0xae>
	if (data_length > 0) {
   2e0d2:	2e00      	cmp	r6, #0
   2e0d4:	d0b9      	beq.n	2e04a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2e0d6:	4633      	mov	r3, r6
   2e0d8:	462a      	mov	r2, r5
   2e0da:	4631      	mov	r1, r6
   2e0dc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2e0e0:	f7ff fe77 	bl	2ddd2 <_copy>
		s->leftover_offset = data_length;
   2e0e4:	6466      	str	r6, [r4, #68]	; 0x44
   2e0e6:	e7b0      	b.n	2e04a <tc_cmac_update+0x10>
   2e0e8:	1e63      	subs	r3, r4, #1
   2e0ea:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2e0ec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2e0f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2e0f4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2e0f6:	ea82 0200 	eor.w	r2, r2, r0
   2e0fa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2e0fc:	d1f6      	bne.n	2e0ec <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2e0fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2e100:	4621      	mov	r1, r4
   2e102:	4620      	mov	r0, r4
   2e104:	f7e8 fdaa 	bl	16c5c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2e108:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2e10a:	3e10      	subs	r6, #16
   2e10c:	e7df      	b.n	2e0ce <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   2e10e:	2000      	movs	r0, #0
   2e110:	e79c      	b.n	2e04c <tc_cmac_update+0x12>

0002e112 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2e112:	b570      	push	{r4, r5, r6, lr}
   2e114:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2e116:	4605      	mov	r5, r0
   2e118:	b1e8      	cbz	r0, 2e156 <tc_cmac_final+0x44>
   2e11a:	b369      	cbz	r1, 2e178 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2e11c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2e11e:	2a10      	cmp	r2, #16
   2e120:	d11a      	bne.n	2e158 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2e122:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2e124:	1e63      	subs	r3, r4, #1
   2e126:	3901      	subs	r1, #1
   2e128:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2e12c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2e130:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2e134:	4072      	eors	r2, r6
   2e136:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2e13a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2e13c:	ea82 0206 	eor.w	r2, r2, r6
   2e140:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2e142:	d1f3      	bne.n	2e12c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2e144:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2e146:	4621      	mov	r1, r4
   2e148:	4628      	mov	r0, r5
   2e14a:	f7e8 fd87 	bl	16c5c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2e14e:	4620      	mov	r0, r4
   2e150:	f7ff ff2a 	bl	2dfa8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2e154:	2001      	movs	r0, #1
}
   2e156:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2e158:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2e15c:	2100      	movs	r1, #0
   2e15e:	f1c2 0210 	rsb	r2, r2, #16
   2e162:	4420      	add	r0, r4
   2e164:	f7ff fe42 	bl	2ddec <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2e168:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2e16a:	4423      	add	r3, r4
   2e16c:	2280      	movs	r2, #128	; 0x80
   2e16e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2e172:	f104 0120 	add.w	r1, r4, #32
   2e176:	e7d5      	b.n	2e124 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2e178:	4608      	mov	r0, r1
   2e17a:	e7ec      	b.n	2e156 <tc_cmac_final+0x44>

0002e17c <abort_function>:
{
   2e17c:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
   2e17e:	2000      	movs	r0, #0
   2e180:	f7e4 f96c 	bl	1245c <sys_reboot>

0002e184 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2e184:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2e186:	6800      	ldr	r0, [r0, #0]
   2e188:	f7e8 beba 	b.w	16f00 <z_arm_fatal_error>

0002e18c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2e18c:	2100      	movs	r1, #0
   2e18e:	2001      	movs	r0, #1
   2e190:	f7e8 beb6 	b.w	16f00 <z_arm_fatal_error>

0002e194 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2e194:	b508      	push	{r3, lr}
	handler();
   2e196:	f7e8 ff6f 	bl	17078 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2e19a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2e19e:	f7e9 b85f 	b.w	17260 <z_arm_exc_exit>

0002e1a2 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2e1a2:	f7f6 ba99 	b.w	246d8 <z_impl_z_errno>

0002e1a6 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   2e1a6:	b084      	sub	sp, #16
   2e1a8:	ab04      	add	r3, sp, #16
   2e1aa:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   2e1ae:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2e1b2:	2b06      	cmp	r3, #6
   2e1b4:	d108      	bne.n	2e1c8 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2e1b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2e1ba:	2201      	movs	r2, #1
   2e1bc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2e1c0:	f3bf 8f4f 	dsb	sy
        __WFE();
   2e1c4:	bf20      	wfe
    while (true)
   2e1c6:	e7fd      	b.n	2e1c4 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2e1c8:	b004      	add	sp, #16
   2e1ca:	4770      	bx	lr

0002e1cc <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2e1cc:	b084      	sub	sp, #16
   2e1ce:	ab04      	add	r3, sp, #16
   2e1d0:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2e1d4:	2300      	movs	r3, #0
   2e1d6:	f383 8811 	msr	BASEPRI, r3
   2e1da:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2e1de:	b004      	add	sp, #16
   2e1e0:	4770      	bx	lr

0002e1e2 <bt_uuid_cmp>:
{
   2e1e2:	b510      	push	{r4, lr}
   2e1e4:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   2e1e6:	7801      	ldrb	r1, [r0, #0]
   2e1e8:	7822      	ldrb	r2, [r4, #0]
   2e1ea:	428a      	cmp	r2, r1
{
   2e1ec:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2e1ee:	d00e      	beq.n	2e20e <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   2e1f0:	4669      	mov	r1, sp
   2e1f2:	f7e9 ff33 	bl	1805c <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2e1f6:	a905      	add	r1, sp, #20
   2e1f8:	4620      	mov	r0, r4
   2e1fa:	f7e9 ff2f 	bl	1805c <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2e1fe:	2210      	movs	r2, #16
   2e200:	f10d 0115 	add.w	r1, sp, #21
   2e204:	f10d 0001 	add.w	r0, sp, #1
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2e208:	f002 f9d9 	bl	305be <memcmp>
   2e20c:	e007      	b.n	2e21e <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   2e20e:	2a01      	cmp	r2, #1
   2e210:	d007      	beq.n	2e222 <bt_uuid_cmp+0x40>
   2e212:	2a02      	cmp	r2, #2
   2e214:	d008      	beq.n	2e228 <bt_uuid_cmp+0x46>
   2e216:	b95a      	cbnz	r2, 2e230 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2e218:	8840      	ldrh	r0, [r0, #2]
   2e21a:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2e21c:	1ac0      	subs	r0, r0, r3
}
   2e21e:	b00a      	add	sp, #40	; 0x28
   2e220:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2e222:	6840      	ldr	r0, [r0, #4]
   2e224:	6863      	ldr	r3, [r4, #4]
   2e226:	e7f9      	b.n	2e21c <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2e228:	2210      	movs	r2, #16
   2e22a:	1c61      	adds	r1, r4, #1
   2e22c:	3001      	adds	r0, #1
   2e22e:	e7eb      	b.n	2e208 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   2e230:	f06f 0015 	mvn.w	r0, #21
   2e234:	e7f3      	b.n	2e21e <bt_uuid_cmp+0x3c>

0002e236 <bt_uuid_create>:
	switch (data_len) {
   2e236:	2a04      	cmp	r2, #4
{
   2e238:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   2e23a:	d00d      	beq.n	2e258 <bt_uuid_create+0x22>
   2e23c:	2a10      	cmp	r2, #16
   2e23e:	d019      	beq.n	2e274 <bt_uuid_create+0x3e>
   2e240:	2a02      	cmp	r2, #2
   2e242:	f04f 0300 	mov.w	r3, #0
   2e246:	d121      	bne.n	2e28c <bt_uuid_create+0x56>
		uuid->type = BT_UUID_TYPE_16;
   2e248:	7003      	strb	r3, [r0, #0]
   2e24a:	784a      	ldrb	r2, [r1, #1]
   2e24c:	780b      	ldrb	r3, [r1, #0]
   2e24e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2e252:	8043      	strh	r3, [r0, #2]
	return true;
   2e254:	2001      	movs	r0, #1
}
   2e256:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2e258:	2301      	movs	r3, #1
   2e25a:	7003      	strb	r3, [r0, #0]
   2e25c:	788a      	ldrb	r2, [r1, #2]
   2e25e:	78cc      	ldrb	r4, [r1, #3]
   2e260:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2e262:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2e266:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2e268:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   2e26c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2e270:	6042      	str	r2, [r0, #4]
		break;
   2e272:	e7ef      	b.n	2e254 <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   2e274:	2302      	movs	r3, #2
   2e276:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2e27a:	f101 0310 	add.w	r3, r1, #16
   2e27e:	f851 2b04 	ldr.w	r2, [r1], #4
   2e282:	f840 2b04 	str.w	r2, [r0], #4
   2e286:	4299      	cmp	r1, r3
   2e288:	d1f9      	bne.n	2e27e <bt_uuid_create+0x48>
   2e28a:	e7e3      	b.n	2e254 <bt_uuid_create+0x1e>
	switch (data_len) {
   2e28c:	4618      	mov	r0, r3
   2e28e:	e7e2      	b.n	2e256 <bt_uuid_create+0x20>

0002e290 <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   2e290:	2301      	movs	r3, #1
{
   2e292:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2e294:	2106      	movs	r1, #6
{
   2e296:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2e298:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2e29c:	f7f5 fb1c 	bl	238d8 <bt_rand>
	if (err) {
   2e2a0:	b918      	cbnz	r0, 2e2aa <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   2e2a2:	79a3      	ldrb	r3, [r4, #6]
   2e2a4:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2e2a8:	71a3      	strb	r3, [r4, #6]
}
   2e2aa:	bd10      	pop	{r4, pc}

0002e2ac <bt_addr_from_str>:
{
   2e2ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2e2b0:	4604      	mov	r4, r0
   2e2b2:	460e      	mov	r6, r1
	if (strlen(str) != 17U) {
   2e2b4:	f7df f87e 	bl	d3b4 <strlen>
   2e2b8:	2811      	cmp	r0, #17
   2e2ba:	d114      	bne.n	2e2e6 <bt_addr_from_str+0x3a>
   2e2bc:	1e67      	subs	r7, r4, #1
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   2e2be:	2505      	movs	r5, #5
   2e2c0:	f1c4 0402 	rsb	r4, r4, #2
   2e2c4:	f04f 0803 	mov.w	r8, #3
   2e2c8:	19e2      	adds	r2, r4, r7
   2e2ca:	f817 0f01 	ldrb.w	r0, [r7, #1]!
   2e2ce:	b910      	cbnz	r0, 2e2d6 <bt_addr_from_str+0x2a>
}
   2e2d0:	b002      	add	sp, #8
   2e2d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(j % 3) && (*str != ':')) {
   2e2d6:	fb92 f3f8 	sdiv	r3, r2, r8
   2e2da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2e2de:	429a      	cmp	r2, r3
   2e2e0:	d104      	bne.n	2e2ec <bt_addr_from_str+0x40>
   2e2e2:	283a      	cmp	r0, #58	; 0x3a
   2e2e4:	d004      	beq.n	2e2f0 <bt_addr_from_str+0x44>
		return -EINVAL;
   2e2e6:	f06f 0015 	mvn.w	r0, #21
   2e2ea:	e7f1      	b.n	2e2d0 <bt_addr_from_str+0x24>
		} else if (*str == ':') {
   2e2ec:	283a      	cmp	r0, #58	; 0x3a
   2e2ee:	d101      	bne.n	2e2f4 <bt_addr_from_str+0x48>
			i--;
   2e2f0:	3d01      	subs	r5, #1
			continue;
   2e2f2:	e7e9      	b.n	2e2c8 <bt_addr_from_str+0x1c>
		addr->val[i] = addr->val[i] << 4;
   2e2f4:	5d73      	ldrb	r3, [r6, r5]
   2e2f6:	011b      	lsls	r3, r3, #4
   2e2f8:	5573      	strb	r3, [r6, r5]
		if (char2hex(*str, &tmp) < 0) {
   2e2fa:	f10d 0107 	add.w	r1, sp, #7
   2e2fe:	7838      	ldrb	r0, [r7, #0]
   2e300:	f7fe f898 	bl	2c434 <char2hex>
   2e304:	2800      	cmp	r0, #0
   2e306:	dbee      	blt.n	2e2e6 <bt_addr_from_str+0x3a>
		addr->val[i] |= tmp;
   2e308:	5d73      	ldrb	r3, [r6, r5]
   2e30a:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2e30e:	4313      	orrs	r3, r2
   2e310:	5573      	strb	r3, [r6, r5]
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   2e312:	e7d9      	b.n	2e2c8 <bt_addr_from_str+0x1c>

0002e314 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2e314:	280f      	cmp	r0, #15
   2e316:	d806      	bhi.n	2e326 <bt_hci_evt_get_flags+0x12>
   2e318:	280d      	cmp	r0, #13
   2e31a:	d80b      	bhi.n	2e334 <bt_hci_evt_get_flags+0x20>
   2e31c:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2e31e:	bf14      	ite	ne
   2e320:	2002      	movne	r0, #2
   2e322:	2003      	moveq	r0, #3
   2e324:	4770      	bx	lr
	switch (evt) {
   2e326:	2813      	cmp	r0, #19
   2e328:	d004      	beq.n	2e334 <bt_hci_evt_get_flags+0x20>
   2e32a:	281a      	cmp	r0, #26
   2e32c:	bf14      	ite	ne
   2e32e:	2002      	movne	r0, #2
   2e330:	2001      	moveq	r0, #1
   2e332:	4770      	bx	lr
   2e334:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2e336:	4770      	bx	lr

0002e338 <bt_addr_le_copy>:
   2e338:	680b      	ldr	r3, [r1, #0]
   2e33a:	6003      	str	r3, [r0, #0]
   2e33c:	888b      	ldrh	r3, [r1, #4]
   2e33e:	8083      	strh	r3, [r0, #4]
   2e340:	798b      	ldrb	r3, [r1, #6]
   2e342:	7183      	strb	r3, [r0, #6]
}
   2e344:	4770      	bx	lr

0002e346 <bt_addr_copy>:
   2e346:	680b      	ldr	r3, [r1, #0]
   2e348:	6003      	str	r3, [r0, #0]
   2e34a:	888b      	ldrh	r3, [r1, #4]
   2e34c:	8083      	strh	r3, [r0, #4]
}
   2e34e:	4770      	bx	lr

0002e350 <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   2e350:	f7ea be80 	b.w	19054 <bt_le_create_conn_legacy>

0002e354 <bt_hci_disconnect>:
{
   2e354:	b570      	push	{r4, r5, r6, lr}
   2e356:	4606      	mov	r6, r0
   2e358:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2e35a:	f240 4006 	movw	r0, #1030	; 0x406
   2e35e:	2103      	movs	r1, #3
   2e360:	f7ea fb68 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   2e364:	4604      	mov	r4, r0
   2e366:	b168      	cbz	r0, 2e384 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2e368:	2103      	movs	r1, #3
   2e36a:	3008      	adds	r0, #8
   2e36c:	f7f3 f804 	bl	21378 <net_buf_simple_add>
	disconn->reason = reason;
   2e370:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2e372:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2e374:	4621      	mov	r1, r4
   2e376:	2200      	movs	r2, #0
}
   2e378:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2e37c:	f240 4006 	movw	r0, #1030	; 0x406
   2e380:	f7ea bba0 	b.w	18ac4 <bt_hci_cmd_send_sync>
}
   2e384:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e388:	bd70      	pop	{r4, r5, r6, pc}

0002e38a <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2e38a:	8802      	ldrh	r2, [r0, #0]
   2e38c:	8843      	ldrh	r3, [r0, #2]
   2e38e:	429a      	cmp	r2, r3
{
   2e390:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2e392:	d818      	bhi.n	2e3c6 <bt_le_conn_params_valid+0x3c>
   2e394:	2a05      	cmp	r2, #5
   2e396:	d916      	bls.n	2e3c6 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2e398:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2e39c:	d813      	bhi.n	2e3c6 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   2e39e:	8884      	ldrh	r4, [r0, #4]
   2e3a0:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   2e3a4:	d20f      	bcs.n	2e3c6 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2e3a6:	88c1      	ldrh	r1, [r0, #6]
   2e3a8:	f1a1 020a 	sub.w	r2, r1, #10
   2e3ac:	b292      	uxth	r2, r2
   2e3ae:	f640 4076 	movw	r0, #3190	; 0xc76
   2e3b2:	4282      	cmp	r2, r0
   2e3b4:	d807      	bhi.n	2e3c6 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   2e3b6:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2e3ba:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   2e3be:	bf34      	ite	cc
   2e3c0:	2001      	movcc	r0, #1
   2e3c2:	2000      	movcs	r0, #0
}
   2e3c4:	bd10      	pop	{r4, pc}
		return false;
   2e3c6:	2000      	movs	r0, #0
   2e3c8:	e7fc      	b.n	2e3c4 <bt_le_conn_params_valid+0x3a>

0002e3ca <bt_unpair>:
{
   2e3ca:	b570      	push	{r4, r5, r6, lr}
   2e3cc:	460e      	mov	r6, r1
	if (id >= CONFIG_BT_ID_MAX) {
   2e3ce:	4605      	mov	r5, r0
   2e3d0:	b9a0      	cbnz	r0, 2e3fc <bt_unpair+0x32>
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   2e3d2:	f7ec ff0f 	bl	1b1f4 <bt_conn_lookup_addr_le>
	if (conn) {
   2e3d6:	4604      	mov	r4, r0
   2e3d8:	b150      	cbz	r0, 2e3f0 <bt_unpair+0x26>
		if (conn->type == BT_CONN_TYPE_LE) {
   2e3da:	7883      	ldrb	r3, [r0, #2]
   2e3dc:	2b01      	cmp	r3, #1
			conn->le.keys = NULL;
   2e3de:	bf08      	it	eq
   2e3e0:	f8c0 50bc 	streq.w	r5, [r0, #188]	; 0xbc
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2e3e4:	2113      	movs	r1, #19
   2e3e6:	f000 f96a 	bl	2e6be <bt_conn_disconnect>
		bt_conn_unref(conn);
   2e3ea:	4620      	mov	r0, r4
   2e3ec:	f7ec fc70 	bl	1acd0 <bt_conn_unref>
	bt_gatt_clear(id, addr);
   2e3f0:	4631      	mov	r1, r6
   2e3f2:	2000      	movs	r0, #0
   2e3f4:	f7f0 fdb6 	bl	1ef64 <bt_gatt_clear>
	return 0;
   2e3f8:	2000      	movs	r0, #0
}
   2e3fa:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2e3fc:	f06f 0015 	mvn.w	r0, #21
   2e400:	e7fb      	b.n	2e3fa <bt_unpair+0x30>

0002e402 <bt_le_set_data_len>:
{
   2e402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e404:	4607      	mov	r7, r0
   2e406:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2e408:	f242 0022 	movw	r0, #8226	; 0x2022
   2e40c:	2106      	movs	r1, #6
{
   2e40e:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2e410:	f7ea fb10 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   2e414:	4604      	mov	r4, r0
   2e416:	b170      	cbz	r0, 2e436 <bt_le_set_data_len+0x34>
   2e418:	2106      	movs	r1, #6
   2e41a:	3008      	adds	r0, #8
   2e41c:	f7f2 ffac 	bl	21378 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2e420:	883b      	ldrh	r3, [r7, #0]
   2e422:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2e424:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2e426:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2e428:	4621      	mov	r1, r4
   2e42a:	f242 0022 	movw	r0, #8226	; 0x2022
}
   2e42e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2e432:	f7ea be97 	b.w	19164 <bt_hci_cmd_send>
}
   2e436:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e43a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e43c <bt_le_set_phy>:
{
   2e43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e440:	4680      	mov	r8, r0
   2e442:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2e444:	f242 0032 	movw	r0, #8242	; 0x2032
   2e448:	2107      	movs	r1, #7
{
   2e44a:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2e44e:	4616      	mov	r6, r2
   2e450:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2e452:	f7ea faef 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   2e456:	4604      	mov	r4, r0
   2e458:	b190      	cbz	r0, 2e480 <bt_le_set_phy+0x44>
   2e45a:	2107      	movs	r1, #7
   2e45c:	3008      	adds	r0, #8
   2e45e:	f7f2 ff8b 	bl	21378 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2e462:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2e466:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2e468:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2e46a:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2e46c:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2e46e:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2e472:	4621      	mov	r1, r4
   2e474:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2e478:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2e47c:	f7ea be72 	b.w	19164 <bt_hci_cmd_send>
}
   2e480:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e484:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002e488 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2e488:	6880      	ldr	r0, [r0, #8]
   2e48a:	f7ea bf2d 	b.w	192e8 <bt_hci_le_enh_conn_complete>

0002e48e <le_legacy_conn_complete>:
{
   2e48e:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2e490:	6881      	ldr	r1, [r0, #8]
{
   2e492:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   2e494:	780b      	ldrb	r3, [r1, #0]
   2e496:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2e49a:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2e49e:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2e4a2:	78cb      	ldrb	r3, [r1, #3]
   2e4a4:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   2e4a8:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2e4ac:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2e4b0:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2e4b4:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   2e4b8:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2e4bc:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2e4c0:	7c4b      	ldrb	r3, [r1, #17]
   2e4c2:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2e4c6:	a803      	add	r0, sp, #12
   2e4c8:	3104      	adds	r1, #4
   2e4ca:	f7ff ff35 	bl	2e338 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2e4ce:	2200      	movs	r2, #0
   2e4d0:	4669      	mov	r1, sp
   2e4d2:	f10d 0013 	add.w	r0, sp, #19
   2e4d6:	9200      	str	r2, [sp, #0]
   2e4d8:	f8ad 2004 	strh.w	r2, [sp, #4]
   2e4dc:	f7ff ff33 	bl	2e346 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2e4e0:	4669      	mov	r1, sp
   2e4e2:	f10d 0019 	add.w	r0, sp, #25
   2e4e6:	9200      	str	r2, [sp, #0]
   2e4e8:	f8ad 2004 	strh.w	r2, [sp, #4]
   2e4ec:	f7ff ff2b 	bl	2e346 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   2e4f0:	a802      	add	r0, sp, #8
   2e4f2:	f7ea fef9 	bl	192e8 <bt_hci_le_enh_conn_complete>
}
   2e4f6:	b00b      	add	sp, #44	; 0x2c
   2e4f8:	f85d fb04 	ldr.w	pc, [sp], #4

0002e4fc <bt_set_name>:
}
   2e4fc:	f06f 000b 	mvn.w	r0, #11
   2e500:	4770      	bx	lr

0002e502 <bt_addr_le_is_bonded>:
}
   2e502:	2000      	movs	r0, #0
   2e504:	4770      	bx	lr

0002e506 <bt_addr_copy>:
   2e506:	680b      	ldr	r3, [r1, #0]
   2e508:	6003      	str	r3, [r0, #0]
   2e50a:	888b      	ldrh	r3, [r1, #4]
   2e50c:	8083      	strh	r3, [r0, #4]
   2e50e:	4770      	bx	lr

0002e510 <bt_addr_le_copy>:
   2e510:	680b      	ldr	r3, [r1, #0]
   2e512:	6003      	str	r3, [r0, #0]
   2e514:	888b      	ldrh	r3, [r1, #4]
   2e516:	8083      	strh	r3, [r0, #4]
   2e518:	798b      	ldrb	r3, [r1, #6]
   2e51a:	7183      	strb	r3, [r0, #6]
}
   2e51c:	4770      	bx	lr

0002e51e <bt_lookup_id_addr>:
}
   2e51e:	4608      	mov	r0, r1
   2e520:	4770      	bx	lr

0002e522 <bt_id_set_private_addr>:
{
   2e522:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2e524:	2106      	movs	r1, #6
   2e526:	4668      	mov	r0, sp
   2e528:	f7f5 f9d6 	bl	238d8 <bt_rand>
	if (err) {
   2e52c:	b940      	cbnz	r0, 2e540 <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   2e52e:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2e532:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2e534:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2e538:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2e53c:	f7eb fbc2 	bl	19cc4 <set_random_address>
}
   2e540:	b003      	add	sp, #12
   2e542:	f85d fb04 	ldr.w	pc, [sp], #4

0002e546 <bt_id_scan_random_addr_check>:
}
   2e546:	2001      	movs	r0, #1
   2e548:	4770      	bx	lr

0002e54a <atomic_and>:
{
   2e54a:	4603      	mov	r3, r0
}
   2e54c:	f3bf 8f5b 	dmb	ish
   2e550:	e853 0f00 	ldrex	r0, [r3]
   2e554:	ea00 0201 	and.w	r2, r0, r1
   2e558:	e843 2c00 	strex	ip, r2, [r3]
   2e55c:	f1bc 0f00 	cmp.w	ip, #0
   2e560:	d1f6      	bne.n	2e550 <atomic_and+0x6>
   2e562:	f3bf 8f5b 	dmb	ish
   2e566:	4770      	bx	lr

0002e568 <bt_addr_le_copy>:
   2e568:	680b      	ldr	r3, [r1, #0]
   2e56a:	6003      	str	r3, [r0, #0]
   2e56c:	888b      	ldrh	r3, [r1, #4]
   2e56e:	8083      	strh	r3, [r0, #4]
   2e570:	798b      	ldrb	r3, [r1, #6]
   2e572:	7183      	strb	r3, [r0, #6]
   2e574:	4770      	bx	lr

0002e576 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2e576:	f3bf 8f5b 	dmb	ish
   2e57a:	6800      	ldr	r0, [r0, #0]
   2e57c:	f3bf 8f5b 	dmb	ish
}
   2e580:	4770      	bx	lr

0002e582 <bt_addr_le_copy>:
   2e582:	680b      	ldr	r3, [r1, #0]
   2e584:	6003      	str	r3, [r0, #0]
   2e586:	888b      	ldrh	r3, [r1, #4]
   2e588:	8083      	strh	r3, [r0, #4]
   2e58a:	798b      	ldrb	r3, [r1, #6]
   2e58c:	7183      	strb	r3, [r0, #6]
   2e58e:	4770      	bx	lr

0002e590 <tx_notify>:
{
   2e590:	b570      	push	{r4, r5, r6, lr}
   2e592:	4604      	mov	r4, r0
	__asm__ volatile(
   2e594:	f04f 0240 	mov.w	r2, #64	; 0x40
   2e598:	f3ef 8311 	mrs	r3, BASEPRI
   2e59c:	f382 8812 	msr	BASEPRI_MAX, r2
   2e5a0:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2e5a4:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2e5a6:	b920      	cbnz	r0, 2e5b2 <tx_notify+0x22>
	__asm__ volatile(
   2e5a8:	f383 8811 	msr	BASEPRI, r3
   2e5ac:	f3bf 8f6f 	isb	sy
}
   2e5b0:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e5b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2e5b4:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2e5b6:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e5b8:	4288      	cmp	r0, r1
	list->tail = node;
   2e5ba:	bf08      	it	eq
   2e5bc:	6262      	streq	r2, [r4, #36]	; 0x24
   2e5be:	f383 8811 	msr	BASEPRI, r3
   2e5c2:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2e5c6:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2e5ca:	f7ec f8b3 	bl	1a734 <tx_free>
		cb(conn, user_data);
   2e5ce:	4631      	mov	r1, r6
   2e5d0:	4620      	mov	r0, r4
   2e5d2:	47a8      	blx	r5
	while (1) {
   2e5d4:	e7de      	b.n	2e594 <tx_notify+0x4>

0002e5d6 <tx_complete_work>:
	tx_notify(conn);
   2e5d6:	3828      	subs	r0, #40	; 0x28
   2e5d8:	f7ff bfda 	b.w	2e590 <tx_notify>

0002e5dc <bt_conn_reset_rx_state>:
{
   2e5dc:	b510      	push	{r4, lr}
   2e5de:	4604      	mov	r4, r0
	if (!conn->rx) {
   2e5e0:	6900      	ldr	r0, [r0, #16]
   2e5e2:	b118      	cbz	r0, 2e5ec <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2e5e4:	f7f2 fd98 	bl	21118 <net_buf_unref>
	conn->rx = NULL;
   2e5e8:	2300      	movs	r3, #0
   2e5ea:	6123      	str	r3, [r4, #16]
}
   2e5ec:	bd10      	pop	{r4, pc}

0002e5ee <bt_conn_ref>:
{
   2e5ee:	b510      	push	{r4, lr}
   2e5f0:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   2e5f2:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   2e5f6:	4610      	mov	r0, r2
   2e5f8:	f7ff ffbd 	bl	2e576 <atomic_get>
		if (!old) {
   2e5fc:	b180      	cbz	r0, 2e620 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2e5fe:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2e602:	1c41      	adds	r1, r0, #1
   2e604:	e852 4f00 	ldrex	r4, [r2]
   2e608:	4284      	cmp	r4, r0
   2e60a:	d104      	bne.n	2e616 <bt_conn_ref+0x28>
   2e60c:	e842 1c00 	strex	ip, r1, [r2]
   2e610:	f1bc 0f00 	cmp.w	ip, #0
   2e614:	d1f6      	bne.n	2e604 <bt_conn_ref+0x16>
   2e616:	f3bf 8f5b 	dmb	ish
   2e61a:	d1ec      	bne.n	2e5f6 <bt_conn_ref+0x8>
}
   2e61c:	4618      	mov	r0, r3
   2e61e:	bd10      	pop	{r4, pc}
			return NULL;
   2e620:	4603      	mov	r3, r0
   2e622:	e7fb      	b.n	2e61c <bt_conn_ref+0x2e>

0002e624 <conn_lookup_handle>:
{
   2e624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2e628:	4607      	mov	r7, r0
   2e62a:	460e      	mov	r6, r1
   2e62c:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2e62e:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2e630:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2e634:	42b4      	cmp	r4, r6
   2e636:	d103      	bne.n	2e640 <conn_lookup_handle+0x1c>
	return NULL;
   2e638:	2300      	movs	r3, #0
}
   2e63a:	4618      	mov	r0, r3
   2e63c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2e640:	fb09 7004 	mla	r0, r9, r4, r7
   2e644:	f7ff ffd3 	bl	2e5ee <bt_conn_ref>
   2e648:	4603      	mov	r3, r0
		if (!conn) {
   2e64a:	b158      	cbz	r0, 2e664 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2e64c:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2e64e:	2d01      	cmp	r5, #1
   2e650:	d002      	beq.n	2e658 <conn_lookup_handle+0x34>
   2e652:	3d07      	subs	r5, #7
   2e654:	2d01      	cmp	r5, #1
   2e656:	d803      	bhi.n	2e660 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2e658:	881a      	ldrh	r2, [r3, #0]
   2e65a:	4542      	cmp	r2, r8
   2e65c:	d0ed      	beq.n	2e63a <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2e65e:	4618      	mov	r0, r3
   2e660:	f7ec fb36 	bl	1acd0 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2e664:	3401      	adds	r4, #1
   2e666:	e7e5      	b.n	2e634 <conn_lookup_handle+0x10>

0002e668 <bt_conn_connected>:
{
   2e668:	b510      	push	{r4, lr}
   2e66a:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2e66c:	f7ed f954 	bl	1b918 <bt_l2cap_connected>
	notify_connected(conn);
   2e670:	4620      	mov	r0, r4
}
   2e672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2e676:	f7ec b867 	b.w	1a748 <notify_connected>

0002e67a <bt_conn_get_security>:
}
   2e67a:	2001      	movs	r0, #1
   2e67c:	4770      	bx	lr

0002e67e <bt_conn_is_peer_addr_le>:
{
   2e67e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2e680:	7a03      	ldrb	r3, [r0, #8]
   2e682:	428b      	cmp	r3, r1
{
   2e684:	4604      	mov	r4, r0
   2e686:	4615      	mov	r5, r2
	if (id != conn->id) {
   2e688:	d115      	bne.n	2e6b6 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2e68a:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2e68e:	2207      	movs	r2, #7
   2e690:	4628      	mov	r0, r5
   2e692:	f001 ff94 	bl	305be <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2e696:	b180      	cbz	r0, 2e6ba <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2e698:	78e3      	ldrb	r3, [r4, #3]
   2e69a:	2207      	movs	r2, #7
   2e69c:	b943      	cbnz	r3, 2e6b0 <bt_conn_is_peer_addr_le+0x32>
   2e69e:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2e6a2:	4628      	mov	r0, r5
   2e6a4:	f001 ff8b 	bl	305be <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2e6a8:	fab0 f080 	clz	r0, r0
   2e6ac:	0940      	lsrs	r0, r0, #5
}
   2e6ae:	bd38      	pop	{r3, r4, r5, pc}
   2e6b0:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2e6b4:	e7f5      	b.n	2e6a2 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2e6b6:	2000      	movs	r0, #0
   2e6b8:	e7f9      	b.n	2e6ae <bt_conn_is_peer_addr_le+0x30>
		return true;
   2e6ba:	2001      	movs	r0, #1
   2e6bc:	e7f7      	b.n	2e6ae <bt_conn_is_peer_addr_le+0x30>

0002e6be <bt_conn_disconnect>:
{
   2e6be:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e6c0:	7883      	ldrb	r3, [r0, #2]
   2e6c2:	2b01      	cmp	r3, #1
{
   2e6c4:	4604      	mov	r4, r0
   2e6c6:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e6c8:	d103      	bne.n	2e6d2 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   2e6ca:	2100      	movs	r1, #0
   2e6cc:	3090      	adds	r0, #144	; 0x90
   2e6ce:	f7ec feb5 	bl	1b43c <bt_le_set_auto_conn>
	switch (conn->state) {
   2e6d2:	7aa3      	ldrb	r3, [r4, #10]
   2e6d4:	3b02      	subs	r3, #2
   2e6d6:	2b06      	cmp	r3, #6
   2e6d8:	d805      	bhi.n	2e6e6 <bt_conn_disconnect+0x28>
   2e6da:	e8df f003 	tbb	[pc, r3]
   2e6de:	0408      	.short	0x0408
   2e6e0:	1a120404 	.word	0x1a120404
   2e6e4:	10          	.byte	0x10
   2e6e5:	00          	.byte	0x00
   2e6e6:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2e6ea:	4628      	mov	r0, r5
   2e6ec:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2e6ee:	4620      	mov	r0, r4
		conn->err = reason;
   2e6f0:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2e6f2:	2100      	movs	r1, #0
   2e6f4:	f7ec fb22 	bl	1ad3c <bt_conn_set_state>
			bt_le_scan_update(false);
   2e6f8:	2000      	movs	r0, #0
   2e6fa:	f7eb fe35 	bl	1a368 <bt_le_scan_update>
		return 0;
   2e6fe:	2500      	movs	r5, #0
   2e700:	e7f3      	b.n	2e6ea <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   2e702:	f104 0060 	add.w	r0, r4, #96	; 0x60
   2e706:	f7f8 f879 	bl	267fc <k_work_cancel_delayable>
}
   2e70a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   2e70e:	f7ea bcfd 	b.w	1910c <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   2e712:	4629      	mov	r1, r5
   2e714:	8820      	ldrh	r0, [r4, #0]
   2e716:	f7ff fe1d 	bl	2e354 <bt_hci_disconnect>
	if (err) {
   2e71a:	4605      	mov	r5, r0
   2e71c:	2800      	cmp	r0, #0
   2e71e:	d1e4      	bne.n	2e6ea <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   2e720:	7aa3      	ldrb	r3, [r4, #10]
   2e722:	2b07      	cmp	r3, #7
   2e724:	d1e1      	bne.n	2e6ea <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   2e726:	2108      	movs	r1, #8
   2e728:	4620      	mov	r0, r4
   2e72a:	f7ec fb07 	bl	1ad3c <bt_conn_set_state>
   2e72e:	e7dc      	b.n	2e6ea <bt_conn_disconnect+0x2c>

0002e730 <bt_conn_le_conn_update>:
{
   2e730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2e732:	4607      	mov	r7, r0
   2e734:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2e736:	f242 0013 	movw	r0, #8211	; 0x2013
   2e73a:	210e      	movs	r1, #14
   2e73c:	f7ea f97a 	bl	18a34 <bt_hci_cmd_create>
	if (!buf) {
   2e740:	4606      	mov	r6, r0
   2e742:	b1d0      	cbz	r0, 2e77a <bt_conn_le_conn_update+0x4a>
   2e744:	210e      	movs	r1, #14
   2e746:	3008      	adds	r0, #8
   2e748:	f7f2 fe16 	bl	21378 <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   2e74c:	220e      	movs	r2, #14
   2e74e:	4604      	mov	r4, r0
   2e750:	2100      	movs	r1, #0
   2e752:	f001 ff6a 	bl	3062a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2e756:	883b      	ldrh	r3, [r7, #0]
   2e758:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2e75a:	882b      	ldrh	r3, [r5, #0]
   2e75c:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2e75e:	886b      	ldrh	r3, [r5, #2]
   2e760:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2e762:	88ab      	ldrh	r3, [r5, #4]
   2e764:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2e766:	88eb      	ldrh	r3, [r5, #6]
   2e768:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2e76a:	4631      	mov	r1, r6
   2e76c:	2200      	movs	r2, #0
}
   2e76e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2e772:	f242 0013 	movw	r0, #8211	; 0x2013
   2e776:	f7ea b9a5 	b.w	18ac4 <bt_hci_cmd_send_sync>
}
   2e77a:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2e77e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002e780 <bt_conn_le_param_update>:
	if (conn->le.interval >= param->interval_min &&
   2e780:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   2e784:	880a      	ldrh	r2, [r1, #0]
   2e786:	429a      	cmp	r2, r3
   2e788:	d81c      	bhi.n	2e7c4 <bt_conn_le_param_update+0x44>
   2e78a:	884a      	ldrh	r2, [r1, #2]
   2e78c:	429a      	cmp	r2, r3
   2e78e:	d319      	bcc.n	2e7c4 <bt_conn_le_param_update+0x44>
	    conn->le.interval <= param->interval_max &&
   2e790:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
   2e794:	888b      	ldrh	r3, [r1, #4]
   2e796:	429a      	cmp	r2, r3
   2e798:	d114      	bne.n	2e7c4 <bt_conn_le_param_update+0x44>
	    conn->le.latency == param->latency &&
   2e79a:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
   2e79e:	88cb      	ldrh	r3, [r1, #6]
   2e7a0:	429a      	cmp	r2, r3
   2e7a2:	d10f      	bne.n	2e7c4 <bt_conn_le_param_update+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2e7a4:	3004      	adds	r0, #4
   2e7a6:	f3bf 8f5b 	dmb	ish
   2e7aa:	e850 3f00 	ldrex	r3, [r0]
   2e7ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   2e7b2:	e840 3200 	strex	r2, r3, [r0]
   2e7b6:	2a00      	cmp	r2, #0
   2e7b8:	d1f7      	bne.n	2e7aa <bt_conn_le_param_update+0x2a>
   2e7ba:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
   2e7be:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2e7c2:	4770      	bx	lr
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2e7c4:	78c3      	ldrb	r3, [r0, #3]
   2e7c6:	b90b      	cbnz	r3, 2e7cc <bt_conn_le_param_update+0x4c>
		return send_conn_le_param_update(conn, param);
   2e7c8:	f7ec beae 	b.w	1b528 <send_conn_le_param_update>
	return 0;
   2e7cc:	2000      	movs	r0, #0
}
   2e7ce:	4770      	bx	lr

0002e7d0 <l2cap_connected>:
}
   2e7d0:	4770      	bx	lr

0002e7d2 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2e7d2:	3010      	adds	r0, #16
   2e7d4:	f7f8 b812 	b.w	267fc <k_work_cancel_delayable>

0002e7d8 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2e7d8:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2e7da:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2e7dc:	b17b      	cbz	r3, 2e7fe <bt_l2cap_chan_remove+0x26>
   2e7de:	3b08      	subs	r3, #8
   2e7e0:	2200      	movs	r2, #0
   2e7e2:	b163      	cbz	r3, 2e7fe <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   2e7e4:	428b      	cmp	r3, r1
   2e7e6:	f103 0408 	add.w	r4, r3, #8
   2e7ea:	d10f      	bne.n	2e80c <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2e7ec:	688b      	ldr	r3, [r1, #8]
   2e7ee:	b93a      	cbnz	r2, 2e800 <bt_l2cap_chan_remove+0x28>
   2e7f0:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   2e7f2:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2e7f4:	4294      	cmp	r4, r2
   2e7f6:	d100      	bne.n	2e7fa <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   2e7f8:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   2e7fa:	2300      	movs	r3, #0
   2e7fc:	608b      	str	r3, [r1, #8]
}
   2e7fe:	bd10      	pop	{r4, pc}
   2e800:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e802:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2e804:	429c      	cmp	r4, r3
	list->tail = node;
   2e806:	bf08      	it	eq
   2e808:	6582      	streq	r2, [r0, #88]	; 0x58
}
   2e80a:	e7f6      	b.n	2e7fa <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e80c:	2c00      	cmp	r4, #0
   2e80e:	d0f6      	beq.n	2e7fe <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e810:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2e812:	2b00      	cmp	r3, #0
   2e814:	d0f3      	beq.n	2e7fe <bt_l2cap_chan_remove+0x26>
   2e816:	3b08      	subs	r3, #8
   2e818:	4622      	mov	r2, r4
   2e81a:	e7e2      	b.n	2e7e2 <bt_l2cap_chan_remove+0xa>

0002e81c <bt_l2cap_chan_del>:
{
   2e81c:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2e81e:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2e822:	4604      	mov	r4, r0
	if (!chan->conn) {
   2e824:	b123      	cbz	r3, 2e830 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2e826:	686b      	ldr	r3, [r5, #4]
   2e828:	b103      	cbz	r3, 2e82c <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2e82a:	4798      	blx	r3
	chan->conn = NULL;
   2e82c:	2300      	movs	r3, #0
   2e82e:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2e830:	68e3      	ldr	r3, [r4, #12]
   2e832:	b10b      	cbz	r3, 2e838 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2e834:	4620      	mov	r0, r4
   2e836:	4798      	blx	r3
	if (ops->released) {
   2e838:	69eb      	ldr	r3, [r5, #28]
   2e83a:	b11b      	cbz	r3, 2e844 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2e83c:	4620      	mov	r0, r4
}
   2e83e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2e842:	4718      	bx	r3
}
   2e844:	bd70      	pop	{r4, r5, r6, pc}

0002e846 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2e846:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2e848:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2e84a:	b18b      	cbz	r3, 2e870 <bt_l2cap_disconnected+0x2a>
   2e84c:	f1b3 0008 	subs.w	r0, r3, #8
   2e850:	d00e      	beq.n	2e870 <bt_l2cap_disconnected+0x2a>
   2e852:	681c      	ldr	r4, [r3, #0]
   2e854:	b104      	cbz	r4, 2e858 <bt_l2cap_disconnected+0x12>
   2e856:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2e858:	f7ff ffe0 	bl	2e81c <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2e85c:	b144      	cbz	r4, 2e870 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e85e:	f114 0308 	adds.w	r3, r4, #8
   2e862:	d002      	beq.n	2e86a <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e864:	68a3      	ldr	r3, [r4, #8]
   2e866:	b103      	cbz	r3, 2e86a <bt_l2cap_disconnected+0x24>
   2e868:	3b08      	subs	r3, #8
{
   2e86a:	4620      	mov	r0, r4
   2e86c:	461c      	mov	r4, r3
   2e86e:	e7f3      	b.n	2e858 <bt_l2cap_disconnected+0x12>
}
   2e870:	bd10      	pop	{r4, pc}

0002e872 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2e872:	3104      	adds	r1, #4
   2e874:	f7ec bb9c 	b.w	1afb0 <bt_conn_create_pdu_timeout>

0002e878 <bt_l2cap_send_cb>:
{
   2e878:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e87c:	4614      	mov	r4, r2
   2e87e:	4605      	mov	r5, r0
   2e880:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2e882:	f102 0008 	add.w	r0, r2, #8
   2e886:	2104      	movs	r1, #4
   2e888:	461e      	mov	r6, r3
   2e88a:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2e88e:	f7f2 fd0f 	bl	212b0 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2e892:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2e894:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2e896:	3a04      	subs	r2, #4
   2e898:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2e89a:	4643      	mov	r3, r8
   2e89c:	4632      	mov	r2, r6
   2e89e:	4621      	mov	r1, r4
   2e8a0:	4628      	mov	r0, r5
}
   2e8a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2e8a6:	f7ec b967 	b.w	1ab78 <bt_conn_send_cb>

0002e8aa <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   2e8aa:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2e8ac:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2e8ae:	2202      	movs	r2, #2
   2e8b0:	2001      	movs	r0, #1
   2e8b2:	f7ec ffe3 	bl	1b87c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   2e8b6:	4604      	mov	r4, r0
   2e8b8:	b198      	cbz	r0, 2e8e2 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   2e8ba:	2102      	movs	r1, #2
   2e8bc:	3008      	adds	r0, #8
   2e8be:	f7f2 fd5b 	bl	21378 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2e8c2:	2300      	movs	r3, #0
   2e8c4:	7003      	strb	r3, [r0, #0]
   2e8c6:	7043      	strb	r3, [r0, #1]
   2e8c8:	4622      	mov	r2, r4
   2e8ca:	9300      	str	r3, [sp, #0]
   2e8cc:	2105      	movs	r1, #5
   2e8ce:	4628      	mov	r0, r5
   2e8d0:	f7ff ffd2 	bl	2e878 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2e8d4:	b128      	cbz	r0, 2e8e2 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2e8d6:	4620      	mov	r0, r4
}
   2e8d8:	b003      	add	sp, #12
   2e8da:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2e8de:	f7f2 bc1b 	b.w	21118 <net_buf_unref>
}
   2e8e2:	b003      	add	sp, #12
   2e8e4:	bd30      	pop	{r4, r5, pc}

0002e8e6 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2e8e6:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2e8e8:	b160      	cbz	r0, 2e904 <bt_l2cap_le_lookup_tx_cid+0x1e>
   2e8ea:	3808      	subs	r0, #8
   2e8ec:	b900      	cbnz	r0, 2e8f0 <bt_l2cap_le_lookup_tx_cid+0xa>
   2e8ee:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2e8f0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   2e8f4:	428b      	cmp	r3, r1
   2e8f6:	d005      	beq.n	2e904 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e8f8:	f110 0308 	adds.w	r3, r0, #8
   2e8fc:	d001      	beq.n	2e902 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e8fe:	6880      	ldr	r0, [r0, #8]
   2e900:	e7f2      	b.n	2e8e8 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   2e902:	4618      	mov	r0, r3
}
   2e904:	4770      	bx	lr

0002e906 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2e906:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2e908:	b160      	cbz	r0, 2e924 <bt_l2cap_le_lookup_rx_cid+0x1e>
   2e90a:	3808      	subs	r0, #8
   2e90c:	b900      	cbnz	r0, 2e910 <bt_l2cap_le_lookup_rx_cid+0xa>
   2e90e:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2e910:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   2e914:	428b      	cmp	r3, r1
   2e916:	d005      	beq.n	2e924 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2e918:	f110 0308 	adds.w	r3, r0, #8
   2e91c:	d001      	beq.n	2e922 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e91e:	6880      	ldr	r0, [r0, #8]
   2e920:	e7f2      	b.n	2e908 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   2e922:	4618      	mov	r0, r3
}
   2e924:	4770      	bx	lr

0002e926 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2e926:	4770      	bx	lr

0002e928 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2e928:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2e92a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2e92c:	b128      	cbz	r0, 2e93a <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e92e:	6859      	ldr	r1, [r3, #4]
   2e930:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2e932:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2e934:	4288      	cmp	r0, r1
	list->tail = node;
   2e936:	bf08      	it	eq
   2e938:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2e93a:	4770      	bx	lr

0002e93c <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e93c:	4603      	mov	r3, r0
   2e93e:	6800      	ldr	r0, [r0, #0]
   2e940:	2200      	movs	r2, #0
   2e942:	b900      	cbnz	r0, 2e946 <sys_slist_find_and_remove+0xa>
   2e944:	4770      	bx	lr
   2e946:	4288      	cmp	r0, r1
   2e948:	d110      	bne.n	2e96c <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2e94a:	6808      	ldr	r0, [r1, #0]
   2e94c:	b942      	cbnz	r2, 2e960 <sys_slist_find_and_remove+0x24>
   2e94e:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2e950:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e952:	4291      	cmp	r1, r2
   2e954:	d100      	bne.n	2e958 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2e956:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2e958:	2300      	movs	r3, #0
   2e95a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e95c:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2e95e:	4770      	bx	lr
	parent->next = child;
   2e960:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2e962:	6858      	ldr	r0, [r3, #4]
   2e964:	4281      	cmp	r1, r0
	list->tail = node;
   2e966:	bf08      	it	eq
   2e968:	605a      	streq	r2, [r3, #4]
}
   2e96a:	e7f5      	b.n	2e958 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2e96c:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2e96e:	6800      	ldr	r0, [r0, #0]
   2e970:	e7e7      	b.n	2e942 <sys_slist_find_and_remove+0x6>

0002e972 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2e972:	4603      	mov	r3, r0
	size_t bytes = 0;
   2e974:	2000      	movs	r0, #0

	while (buf) {
   2e976:	b903      	cbnz	r3, 2e97a <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2e978:	4770      	bx	lr
		bytes += buf->len;
   2e97a:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2e97c:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2e97e:	4410      	add	r0, r2
		buf = buf->frags;
   2e980:	e7f9      	b.n	2e976 <net_buf_frags_len+0x4>

0002e982 <att_sent>:
	if (chan->ops->sent) {
   2e982:	684b      	ldr	r3, [r1, #4]
   2e984:	695b      	ldr	r3, [r3, #20]
{
   2e986:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2e988:	b103      	cbz	r3, 2e98c <att_sent+0xa>
		chan->ops->sent(chan);
   2e98a:	4718      	bx	r3
}
   2e98c:	4770      	bx	lr

0002e98e <attr_read_type_cb>:
{
   2e98e:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2e990:	68d4      	ldr	r4, [r2, #12]
   2e992:	7823      	ldrb	r3, [r4, #0]
   2e994:	3102      	adds	r1, #2
   2e996:	b913      	cbnz	r3, 2e99e <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2e998:	7021      	strb	r1, [r4, #0]
	return true;
   2e99a:	2001      	movs	r0, #1
   2e99c:	e006      	b.n	2e9ac <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2e99e:	428b      	cmp	r3, r1
   2e9a0:	d0fb      	beq.n	2e99a <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2e9a2:	8983      	ldrh	r3, [r0, #12]
   2e9a4:	3b02      	subs	r3, #2
   2e9a6:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2e9a8:	2000      	movs	r0, #0
   2e9aa:	6110      	str	r0, [r2, #16]
}
   2e9ac:	bd10      	pop	{r4, pc}

0002e9ae <att_prepare_write_req>:
}
   2e9ae:	2006      	movs	r0, #6
   2e9b0:	4770      	bx	lr

0002e9b2 <att_op_get_type>:
	switch (op) {
   2e9b2:	281e      	cmp	r0, #30
   2e9b4:	d816      	bhi.n	2e9e4 <att_op_get_type+0x32>
   2e9b6:	b308      	cbz	r0, 2e9fc <att_op_get_type+0x4a>
   2e9b8:	1e43      	subs	r3, r0, #1
   2e9ba:	2b1d      	cmp	r3, #29
   2e9bc:	d81e      	bhi.n	2e9fc <att_op_get_type+0x4a>
   2e9be:	e8df f003 	tbb	[pc, r3]
   2e9c2:	2317      	.short	0x2317
   2e9c4:	23172317 	.word	0x23172317
   2e9c8:	23172317 	.word	0x23172317
   2e9cc:	23172317 	.word	0x23172317
   2e9d0:	23172317 	.word	0x23172317
   2e9d4:	231d1d17 	.word	0x231d1d17
   2e9d8:	1d172317 	.word	0x1d172317
   2e9dc:	0f1b1d19 	.word	0x0f1b1d19
   2e9e0:	2004      	movs	r0, #4
   2e9e2:	4770      	bx	lr
   2e9e4:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2e9e8:	2b52      	cmp	r3, #82	; 0x52
   2e9ea:	d107      	bne.n	2e9fc <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2e9ec:	2000      	movs	r0, #0
}
   2e9ee:	4770      	bx	lr
		return ATT_RESPONSE;
   2e9f0:	2002      	movs	r0, #2
   2e9f2:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2e9f4:	2003      	movs	r0, #3
   2e9f6:	4770      	bx	lr
		return ATT_INDICATION;
   2e9f8:	2005      	movs	r0, #5
   2e9fa:	4770      	bx	lr
		return ATT_COMMAND;
   2e9fc:	f010 0f40 	tst.w	r0, #64	; 0x40
   2ea00:	bf0c      	ite	eq
   2ea02:	2006      	moveq	r0, #6
   2ea04:	2000      	movne	r0, #0
   2ea06:	4770      	bx	lr
		return ATT_REQUEST;
   2ea08:	2001      	movs	r0, #1
   2ea0a:	4770      	bx	lr

0002ea0c <chan_req_send>:
{
   2ea0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ea0e:	688f      	ldr	r7, [r1, #8]
{
   2ea10:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ea12:	4638      	mov	r0, r7
{
   2ea14:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2ea16:	f7ff ffac 	bl	2e972 <net_buf_frags_len>
   2ea1a:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   2ea1e:	4283      	cmp	r3, r0
   2ea20:	d30d      	bcc.n	2ea3e <chan_req_send+0x32>
	req->buf = NULL;
   2ea22:	2600      	movs	r6, #0
	chan->req = req;
   2ea24:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   2ea28:	4632      	mov	r2, r6
	req->buf = NULL;
   2ea2a:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2ea2c:	4620      	mov	r0, r4
   2ea2e:	4639      	mov	r1, r7
   2ea30:	f7ed f946 	bl	1bcc0 <chan_send>
	if (err) {
   2ea34:	b110      	cbz	r0, 2ea3c <chan_req_send+0x30>
		req->buf = buf;
   2ea36:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   2ea38:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
}
   2ea3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2ea3e:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2ea42:	e7fb      	b.n	2ea3c <chan_req_send+0x30>

0002ea44 <process_queue>:
{
   2ea44:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2ea46:	2200      	movs	r2, #0
{
   2ea48:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2ea4a:	2300      	movs	r3, #0
   2ea4c:	4608      	mov	r0, r1
{
   2ea4e:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2ea50:	f7f2 fad0 	bl	20ff4 <net_buf_get>
	if (buf) {
   2ea54:	4605      	mov	r5, r0
   2ea56:	b160      	cbz	r0, 2ea72 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2ea58:	4601      	mov	r1, r0
   2ea5a:	2200      	movs	r2, #0
   2ea5c:	4620      	mov	r0, r4
   2ea5e:	f7ed f92f 	bl	1bcc0 <chan_send>
		if (err) {
   2ea62:	4604      	mov	r4, r0
   2ea64:	b118      	cbz	r0, 2ea6e <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2ea66:	4629      	mov	r1, r5
   2ea68:	4630      	mov	r0, r6
   2ea6a:	f001 fc58 	bl	3031e <k_queue_prepend>
}
   2ea6e:	4620      	mov	r0, r4
   2ea70:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2ea72:	f06f 0401 	mvn.w	r4, #1
   2ea76:	e7fa      	b.n	2ea6e <process_queue+0x2a>

0002ea78 <att_notify_mult>:
{
   2ea78:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2ea7a:	6803      	ldr	r3, [r0, #0]
   2ea7c:	898a      	ldrh	r2, [r1, #12]
   2ea7e:	6818      	ldr	r0, [r3, #0]
   2ea80:	6889      	ldr	r1, [r1, #8]
   2ea82:	f7f0 f99b 	bl	1edbc <bt_gatt_mult_notification>
}
   2ea86:	2000      	movs	r0, #0
   2ea88:	bd08      	pop	{r3, pc}

0002ea8a <att_notify>:
{
   2ea8a:	b538      	push	{r3, r4, r5, lr}
   2ea8c:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2ea8e:	f101 0008 	add.w	r0, r1, #8
   2ea92:	460c      	mov	r4, r1
   2ea94:	f000 ffdd 	bl	2fa52 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2ea98:	682d      	ldr	r5, [r5, #0]
   2ea9a:	89a3      	ldrh	r3, [r4, #12]
   2ea9c:	68a2      	ldr	r2, [r4, #8]
   2ea9e:	4601      	mov	r1, r0
   2eaa0:	6828      	ldr	r0, [r5, #0]
   2eaa2:	f000 feff 	bl	2f8a4 <bt_gatt_notification>
}
   2eaa6:	2000      	movs	r0, #0
   2eaa8:	bd38      	pop	{r3, r4, r5, pc}

0002eaaa <bt_att_chan_send_rsp>:
{
   2eaaa:	b538      	push	{r3, r4, r5, lr}
   2eaac:	4604      	mov	r4, r0
   2eaae:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   2eab0:	f7ed f906 	bl	1bcc0 <chan_send>
	if (err) {
   2eab4:	b130      	cbz	r0, 2eac4 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2eab6:	4629      	mov	r1, r5
   2eab8:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   2eabc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2eac0:	f7f2 baf6 	b.w	210b0 <net_buf_put>
}
   2eac4:	bd38      	pop	{r3, r4, r5, pc}

0002eac6 <att_chan_mtu_updated>:
{
   2eac6:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2eac8:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2eaca:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   2eacc:	b30a      	cbz	r2, 2eb12 <att_chan_mtu_updated+0x4c>
   2eace:	f5b2 74aa 	subs.w	r4, r2, #340	; 0x154
   2ead2:	d01d      	beq.n	2eb10 <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ead4:	6813      	ldr	r3, [r2, #0]
   2ead6:	b10b      	cbz	r3, 2eadc <att_chan_mtu_updated+0x16>
   2ead8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2eadc:	2200      	movs	r2, #0
   2eade:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   2eae0:	42a0      	cmp	r0, r4
   2eae2:	d009      	beq.n	2eaf8 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2eae4:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2eae8:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2eaec:	42a9      	cmp	r1, r5
   2eaee:	bf38      	it	cc
   2eaf0:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2eaf2:	42a2      	cmp	r2, r4
   2eaf4:	bf38      	it	cc
   2eaf6:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2eaf8:	b163      	cbz	r3, 2eb14 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2eafa:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   2eafe:	d004      	beq.n	2eb0a <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2eb00:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   2eb04:	b10d      	cbz	r5, 2eb0a <att_chan_mtu_updated+0x44>
   2eb06:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
{
   2eb0a:	461c      	mov	r4, r3
   2eb0c:	462b      	mov	r3, r5
   2eb0e:	e7e7      	b.n	2eae0 <att_chan_mtu_updated+0x1a>
   2eb10:	4622      	mov	r2, r4
   2eb12:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2eb14:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2eb18:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   2eb1c:	428b      	cmp	r3, r1
   2eb1e:	d801      	bhi.n	2eb24 <att_chan_mtu_updated+0x5e>
   2eb20:	4290      	cmp	r0, r2
   2eb22:	d909      	bls.n	2eb38 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2eb24:	4282      	cmp	r2, r0
   2eb26:	bf38      	it	cc
   2eb28:	4602      	movcc	r2, r0
   2eb2a:	4299      	cmp	r1, r3
   2eb2c:	6830      	ldr	r0, [r6, #0]
   2eb2e:	bf38      	it	cc
   2eb30:	4619      	movcc	r1, r3
}
   2eb32:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2eb34:	f7f0 b9d6 	b.w	1eee4 <bt_gatt_att_max_mtu_changed>
}
   2eb38:	bc70      	pop	{r4, r5, r6}
   2eb3a:	4770      	bx	lr

0002eb3c <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2eb3c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2eb3e:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2eb42:	2300      	movs	r3, #0
   2eb44:	9300      	str	r3, [sp, #0]
   2eb46:	461a      	mov	r2, r3
   2eb48:	f7ee fd06 	bl	1d558 <bt_gatt_foreach_attr_type>
				  user_data);
}
   2eb4c:	b005      	add	sp, #20
   2eb4e:	f85d fb04 	ldr.w	pc, [sp], #4

0002eb52 <att_chan_read>:
{
   2eb52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2eb56:	4680      	mov	r8, r0
   2eb58:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2eb5a:	4610      	mov	r0, r2
{
   2eb5c:	4699      	mov	r9, r3
   2eb5e:	468b      	mov	fp, r1
   2eb60:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2eb62:	f7ff ff06 	bl	2e972 <net_buf_frags_len>
   2eb66:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2eb6a:	4283      	cmp	r3, r0
   2eb6c:	d97a      	bls.n	2ec64 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2eb6e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2eb72:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2eb74:	4630      	mov	r0, r6
   2eb76:	f7f2 fb2f 	bl	211d8 <net_buf_frag_last>
	size_t len, total = 0;
   2eb7a:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2eb7e:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2eb80:	4630      	mov	r0, r6
   2eb82:	f7ff fef6 	bl	2e972 <net_buf_frags_len>
   2eb86:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2eb8a:	f105 0708 	add.w	r7, r5, #8
   2eb8e:	1a24      	subs	r4, r4, r0
   2eb90:	4638      	mov	r0, r7
   2eb92:	f000 ff6a 	bl	2fa6a <net_buf_simple_tailroom>
   2eb96:	4284      	cmp	r4, r0
   2eb98:	d211      	bcs.n	2ebbe <att_chan_read+0x6c>
   2eb9a:	4630      	mov	r0, r6
   2eb9c:	f7ff fee9 	bl	2e972 <net_buf_frags_len>
   2eba0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2eba4:	1a24      	subs	r4, r4, r0
		if (!len) {
   2eba6:	bb34      	cbnz	r4, 2ebf6 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2eba8:	79b0      	ldrb	r0, [r6, #6]
   2ebaa:	f7f2 f8b3 	bl	20d14 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2ebae:	2200      	movs	r2, #0
   2ebb0:	2300      	movs	r3, #0
   2ebb2:	f000 ff3b 	bl	2fa2c <net_buf_alloc_fixed>
			if (!frag) {
   2ebb6:	4605      	mov	r5, r0
   2ebb8:	b930      	cbnz	r0, 2ebc8 <att_chan_read+0x76>
	return total;
   2ebba:	4657      	mov	r7, sl
   2ebbc:	e02c      	b.n	2ec18 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2ebbe:	4638      	mov	r0, r7
   2ebc0:	f000 ff53 	bl	2fa6a <net_buf_simple_tailroom>
   2ebc4:	4604      	mov	r4, r0
   2ebc6:	e7ee      	b.n	2eba6 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2ebc8:	4601      	mov	r1, r0
   2ebca:	4630      	mov	r0, r6
   2ebcc:	f7f2 fb4c 	bl	21268 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2ebd0:	4630      	mov	r0, r6
   2ebd2:	f7ff fece 	bl	2e972 <net_buf_frags_len>
   2ebd6:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2ebda:	f105 0708 	add.w	r7, r5, #8
   2ebde:	1a24      	subs	r4, r4, r0
   2ebe0:	4638      	mov	r0, r7
   2ebe2:	f000 ff42 	bl	2fa6a <net_buf_simple_tailroom>
   2ebe6:	4284      	cmp	r4, r0
   2ebe8:	d21a      	bcs.n	2ec20 <att_chan_read+0xce>
   2ebea:	4630      	mov	r0, r6
   2ebec:	f7ff fec1 	bl	2e972 <net_buf_frags_len>
   2ebf0:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2ebf4:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2ebf6:	68a9      	ldr	r1, [r5, #8]
   2ebf8:	89aa      	ldrh	r2, [r5, #12]
   2ebfa:	f8db 7004 	ldr.w	r7, [fp, #4]
   2ebfe:	9803      	ldr	r0, [sp, #12]
   2ec00:	f8cd 9000 	str.w	r9, [sp]
   2ec04:	440a      	add	r2, r1
   2ec06:	b2a3      	uxth	r3, r4
   2ec08:	4659      	mov	r1, fp
   2ec0a:	47b8      	blx	r7
		if (read < 0) {
   2ec0c:	1e07      	subs	r7, r0, #0
   2ec0e:	da0c      	bge.n	2ec2a <att_chan_read+0xd8>
				return total;
   2ec10:	f1ba 0f00 	cmp.w	sl, #0
   2ec14:	bf18      	it	ne
   2ec16:	4657      	movne	r7, sl
}
   2ec18:	4638      	mov	r0, r7
   2ec1a:	b005      	add	sp, #20
   2ec1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2ec20:	4638      	mov	r0, r7
   2ec22:	f000 ff22 	bl	2fa6a <net_buf_simple_tailroom>
   2ec26:	4604      	mov	r4, r0
   2ec28:	e7e5      	b.n	2ebf6 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2ec2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ec2c:	b993      	cbnz	r3, 2ec54 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2ec2e:	4639      	mov	r1, r7
   2ec30:	f105 0008 	add.w	r0, r5, #8
   2ec34:	f7f2 fba0 	bl	21378 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2ec38:	4630      	mov	r0, r6
   2ec3a:	f7ff fe9a 	bl	2e972 <net_buf_frags_len>
   2ec3e:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2ec42:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2ec44:	4283      	cmp	r3, r0
		total += read;
   2ec46:	44ba      	add	sl, r7
		offset += read;
   2ec48:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2ec4c:	d9b5      	bls.n	2ebba <att_chan_read+0x68>
   2ec4e:	42a7      	cmp	r7, r4
   2ec50:	d096      	beq.n	2eb80 <att_chan_read+0x2e>
   2ec52:	e7b2      	b.n	2ebba <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2ec54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2ec56:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2ec58:	4639      	mov	r1, r7
   2ec5a:	4628      	mov	r0, r5
   2ec5c:	4798      	blx	r3
   2ec5e:	2800      	cmp	r0, #0
   2ec60:	d1e5      	bne.n	2ec2e <att_chan_read+0xdc>
   2ec62:	e7aa      	b.n	2ebba <att_chan_read+0x68>
		return 0;
   2ec64:	2700      	movs	r7, #0
   2ec66:	e7d7      	b.n	2ec18 <att_chan_read+0xc6>

0002ec68 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2ec68:	68d0      	ldr	r0, [r2, #12]
   2ec6a:	7803      	ldrb	r3, [r0, #0]
   2ec6c:	3104      	adds	r1, #4
   2ec6e:	b913      	cbnz	r3, 2ec76 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2ec70:	7001      	strb	r1, [r0, #0]
	return true;
   2ec72:	2001      	movs	r0, #1
}
   2ec74:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2ec76:	428b      	cmp	r3, r1
   2ec78:	d0fb      	beq.n	2ec72 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2ec7a:	6891      	ldr	r1, [r2, #8]
   2ec7c:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2ec7e:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2ec80:	3b04      	subs	r3, #4
   2ec82:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2ec84:	6110      	str	r0, [r2, #16]
		return false;
   2ec86:	4770      	bx	lr

0002ec88 <chan_req_sent>:
	if (chan->req) {
   2ec88:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2ec8c:	b133      	cbz	r3, 2ec9c <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2ec8e:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2ec92:	2300      	movs	r3, #0
   2ec94:	f500 7090 	add.w	r0, r0, #288	; 0x120
   2ec98:	f7f7 bdaa 	b.w	267f0 <k_work_reschedule>
}
   2ec9c:	4770      	bx	lr

0002ec9e <find_info_cb>:
{
   2ec9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2eca0:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2eca2:	6816      	ldr	r6, [r2, #0]
{
   2eca4:	4605      	mov	r5, r0
   2eca6:	460f      	mov	r7, r1
   2eca8:	4614      	mov	r4, r2
	if (!data->rsp) {
   2ecaa:	b963      	cbnz	r3, 2ecc6 <find_info_cb+0x28>
   2ecac:	6850      	ldr	r0, [r2, #4]
   2ecae:	2101      	movs	r1, #1
   2ecb0:	3008      	adds	r0, #8
   2ecb2:	f7f2 fb61 	bl	21378 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2ecb6:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2ecb8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2ecba:	781b      	ldrb	r3, [r3, #0]
   2ecbc:	2b00      	cmp	r3, #0
   2ecbe:	bf0c      	ite	eq
   2ecc0:	2301      	moveq	r3, #1
   2ecc2:	2302      	movne	r3, #2
   2ecc4:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2ecc6:	68a3      	ldr	r3, [r4, #8]
   2ecc8:	781b      	ldrb	r3, [r3, #0]
   2ecca:	2b01      	cmp	r3, #1
   2eccc:	d003      	beq.n	2ecd6 <find_info_cb+0x38>
   2ecce:	2b02      	cmp	r3, #2
   2ecd0:	d019      	beq.n	2ed06 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2ecd2:	2000      	movs	r0, #0
   2ecd4:	e016      	b.n	2ed04 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2ecd6:	682b      	ldr	r3, [r5, #0]
   2ecd8:	781b      	ldrb	r3, [r3, #0]
   2ecda:	2b00      	cmp	r3, #0
   2ecdc:	d1f9      	bne.n	2ecd2 <find_info_cb+0x34>
   2ecde:	6860      	ldr	r0, [r4, #4]
   2ece0:	2104      	movs	r1, #4
   2ece2:	3008      	adds	r0, #8
   2ece4:	f7f2 fb48 	bl	21378 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2ece8:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2ecea:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2ecec:	885b      	ldrh	r3, [r3, #2]
   2ecee:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2ecf0:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2ecf2:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2ecf4:	899b      	ldrh	r3, [r3, #12]
   2ecf6:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   2ecfa:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2ecfc:	2804      	cmp	r0, #4
   2ecfe:	bf94      	ite	ls
   2ed00:	2000      	movls	r0, #0
   2ed02:	2001      	movhi	r0, #1
}
   2ed04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2ed06:	682b      	ldr	r3, [r5, #0]
   2ed08:	781b      	ldrb	r3, [r3, #0]
   2ed0a:	2b02      	cmp	r3, #2
   2ed0c:	d1e1      	bne.n	2ecd2 <find_info_cb+0x34>
   2ed0e:	6860      	ldr	r0, [r4, #4]
   2ed10:	2112      	movs	r1, #18
   2ed12:	3008      	adds	r0, #8
   2ed14:	f7f2 fb30 	bl	21378 <net_buf_simple_add>
   2ed18:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2ed1a:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2ed1c:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2ed1e:	f823 7b02 	strh.w	r7, [r3], #2
   2ed22:	1c51      	adds	r1, r2, #1
   2ed24:	3211      	adds	r2, #17
   2ed26:	f851 0b04 	ldr.w	r0, [r1], #4
   2ed2a:	f843 0b04 	str.w	r0, [r3], #4
   2ed2e:	4291      	cmp	r1, r2
   2ed30:	d1f9      	bne.n	2ed26 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2ed32:	6863      	ldr	r3, [r4, #4]
   2ed34:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   2ed38:	899b      	ldrh	r3, [r3, #12]
   2ed3a:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2ed3c:	2812      	cmp	r0, #18
   2ed3e:	e7de      	b.n	2ecfe <find_info_cb+0x60>

0002ed40 <att_exec_write_req>:
   2ed40:	2006      	movs	r0, #6
   2ed42:	4770      	bx	lr

0002ed44 <chan_cfm_sent>:
   2ed44:	30f8      	adds	r0, #248	; 0xf8
   2ed46:	f3bf 8f5b 	dmb	ish
   2ed4a:	e850 3f00 	ldrex	r3, [r0]
   2ed4e:	f023 0302 	bic.w	r3, r3, #2
   2ed52:	e840 3200 	strex	r2, r3, [r0]
   2ed56:	2a00      	cmp	r2, #0
   2ed58:	d1f7      	bne.n	2ed4a <chan_cfm_sent+0x6>
   2ed5a:	f3bf 8f5b 	dmb	ish
}
   2ed5e:	4770      	bx	lr

0002ed60 <chan_rsp_sent>:
   2ed60:	30f8      	adds	r0, #248	; 0xf8
   2ed62:	f3bf 8f5b 	dmb	ish
   2ed66:	e850 3f00 	ldrex	r3, [r0]
   2ed6a:	f023 0301 	bic.w	r3, r3, #1
   2ed6e:	e840 3200 	strex	r2, r3, [r0]
   2ed72:	2a00      	cmp	r2, #0
   2ed74:	d1f7      	bne.n	2ed66 <chan_rsp_sent+0x6>
   2ed76:	f3bf 8f5b 	dmb	ish
}
   2ed7a:	4770      	bx	lr

0002ed7c <bt_att_status>:
{
   2ed7c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ed7e:	f3bf 8f5b 	dmb	ish
   2ed82:	680b      	ldr	r3, [r1, #0]
   2ed84:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2ed88:	07db      	lsls	r3, r3, #31
{
   2ed8a:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2ed8c:	d519      	bpl.n	2edc2 <bt_att_status+0x46>
	if (!chan->att) {
   2ed8e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2ed92:	b1b0      	cbz	r0, 2edc2 <bt_att_status+0x46>
	if (chan->req) {
   2ed94:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2ed98:	b99b      	cbnz	r3, 2edc2 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2ed9a:	3004      	adds	r0, #4
   2ed9c:	f7ff fdc4 	bl	2e928 <sys_slist_get>
	if (!node) {
   2eda0:	4604      	mov	r4, r0
   2eda2:	b170      	cbz	r0, 2edc2 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2eda4:	4601      	mov	r1, r0
   2eda6:	f1a5 0008 	sub.w	r0, r5, #8
   2edaa:	f7ec fff9 	bl	1bda0 <bt_att_chan_req_send>
   2edae:	2800      	cmp	r0, #0
   2edb0:	da07      	bge.n	2edc2 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2edb2:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2edb6:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2edb8:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2edba:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2edbc:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2edbe:	b902      	cbnz	r2, 2edc2 <bt_att_status+0x46>
	list->tail = node;
   2edc0:	609c      	str	r4, [r3, #8]
}
   2edc2:	bd38      	pop	{r3, r4, r5, pc}

0002edc4 <att_req_send_process>:
{
   2edc4:	b570      	push	{r4, r5, r6, lr}
   2edc6:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   2edc8:	3004      	adds	r0, #4
   2edca:	f7ff fdad 	bl	2e928 <sys_slist_get>
	if (!node) {
   2edce:	4606      	mov	r6, r0
   2edd0:	b1c0      	cbz	r0, 2ee04 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2edd2:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2edd4:	b153      	cbz	r3, 2edec <att_req_send_process+0x28>
   2edd6:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   2edda:	d007      	beq.n	2edec <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2eddc:	681c      	ldr	r4, [r3, #0]
   2edde:	b10c      	cbz	r4, 2ede4 <att_req_send_process+0x20>
   2ede0:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   2ede4:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2ede8:	b13b      	cbz	r3, 2edfa <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2edea:	b964      	cbnz	r4, 2ee06 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   2edec:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2edee:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2edf0:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   2edf2:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2edf4:	b933      	cbnz	r3, 2ee04 <att_req_send_process+0x40>
	list->tail = node;
   2edf6:	60ae      	str	r6, [r5, #8]
}
   2edf8:	e004      	b.n	2ee04 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2edfa:	4631      	mov	r1, r6
   2edfc:	f7ec ffd0 	bl	1bda0 <bt_att_chan_req_send>
   2ee00:	2800      	cmp	r0, #0
   2ee02:	dbf2      	blt.n	2edea <att_req_send_process+0x26>
}
   2ee04:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   2ee06:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   2ee0a:	d004      	beq.n	2ee16 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ee0c:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ee10:	b10b      	cbz	r3, 2ee16 <att_req_send_process+0x52>
   2ee12:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2ee16:	4620      	mov	r0, r4
   2ee18:	461c      	mov	r4, r3
   2ee1a:	e7e3      	b.n	2ede4 <att_req_send_process+0x20>

0002ee1c <write_cb>:
{
   2ee1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2ee1e:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2ee20:	4601      	mov	r1, r0
{
   2ee22:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2ee24:	222a      	movs	r2, #42	; 0x2a
   2ee26:	6820      	ldr	r0, [r4, #0]
   2ee28:	f000 fcb1 	bl	2f78e <bt_gatt_check_perm>
   2ee2c:	4605      	mov	r5, r0
   2ee2e:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2ee30:	bb20      	cbnz	r0, 2ee7c <write_cb+0x60>
	if (!data->req) {
   2ee32:	7a23      	ldrb	r3, [r4, #8]
   2ee34:	b1ab      	cbz	r3, 2ee62 <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2ee36:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2ee38:	bf14      	ite	ne
   2ee3a:	2300      	movne	r3, #0
   2ee3c:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2ee3e:	9301      	str	r3, [sp, #4]
   2ee40:	8a63      	ldrh	r3, [r4, #18]
   2ee42:	9300      	str	r3, [sp, #0]
   2ee44:	68b7      	ldr	r7, [r6, #8]
   2ee46:	8a23      	ldrh	r3, [r4, #16]
   2ee48:	68e2      	ldr	r2, [r4, #12]
   2ee4a:	6820      	ldr	r0, [r4, #0]
   2ee4c:	4631      	mov	r1, r6
   2ee4e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2ee50:	1e03      	subs	r3, r0, #0
   2ee52:	db08      	blt.n	2ee66 <write_cb+0x4a>
   2ee54:	8a22      	ldrh	r2, [r4, #16]
   2ee56:	4293      	cmp	r3, r2
   2ee58:	d10e      	bne.n	2ee78 <write_cb+0x5c>
	data->err = 0U;
   2ee5a:	2300      	movs	r3, #0
   2ee5c:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2ee5e:	2501      	movs	r5, #1
   2ee60:	e007      	b.n	2ee72 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2ee62:	2302      	movs	r3, #2
   2ee64:	e7eb      	b.n	2ee3e <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   2ee66:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2ee6a:	d305      	bcc.n	2ee78 <write_cb+0x5c>
		return -err;
   2ee6c:	425b      	negs	r3, r3
   2ee6e:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2ee70:	7523      	strb	r3, [r4, #20]
}
   2ee72:	4628      	mov	r0, r5
   2ee74:	b003      	add	sp, #12
   2ee76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2ee78:	230e      	movs	r3, #14
   2ee7a:	e7f9      	b.n	2ee70 <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2ee7c:	2500      	movs	r5, #0
   2ee7e:	e7f8      	b.n	2ee72 <write_cb+0x56>

0002ee80 <bt_att_sent>:
{
   2ee80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2ee82:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
   2ee86:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2ee8a:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2ee8c:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2ee90:	b10b      	cbz	r3, 2ee96 <bt_att_sent+0x16>
		chan->sent(chan);
   2ee92:	4638      	mov	r0, r7
   2ee94:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ee96:	f3bf 8f5b 	dmb	ish
   2ee9a:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   2ee9e:	e853 2f00 	ldrex	r2, [r3]
   2eea2:	f022 0210 	bic.w	r2, r2, #16
   2eea6:	e843 2100 	strex	r1, r2, [r3]
   2eeaa:	2900      	cmp	r1, #0
   2eeac:	d1f7      	bne.n	2ee9e <bt_att_sent+0x1e>
   2eeae:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2eeb2:	b30c      	cbz	r4, 2eef8 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2eeb4:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2eeb8:	b98b      	cbnz	r3, 2eede <bt_att_sent+0x5e>
   2eeba:	6863      	ldr	r3, [r4, #4]
   2eebc:	b17b      	cbz	r3, 2eede <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2eebe:	1d20      	adds	r0, r4, #4
   2eec0:	f7ff fd32 	bl	2e928 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2eec4:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2eec6:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2eec8:	4638      	mov	r0, r7
   2eeca:	f7ff fd9f 	bl	2ea0c <chan_req_send>
   2eece:	2800      	cmp	r0, #0
   2eed0:	da12      	bge.n	2eef8 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   2eed2:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2eed4:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2eed6:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2eed8:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2eeda:	b903      	cbnz	r3, 2eede <bt_att_sent+0x5e>
	list->tail = node;
   2eedc:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2eede:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   2eee2:	4638      	mov	r0, r7
   2eee4:	f7ff fdae 	bl	2ea44 <process_queue>
	if (!err) {
   2eee8:	b130      	cbz	r0, 2eef8 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2eeea:	f104 010c 	add.w	r1, r4, #12
   2eeee:	4638      	mov	r0, r7
}
   2eef0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2eef4:	f7ff bda6 	b.w	2ea44 <process_queue>
}
   2eef8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002eefa <read_cb>:
{
   2eefa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2eefe:	f8d2 8000 	ldr.w	r8, [r2]
{
   2ef02:	4606      	mov	r6, r0
	data->err = 0x00;
   2ef04:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2ef06:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2ef0a:	7317      	strb	r7, [r2, #12]
{
   2ef0c:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2ef0e:	4631      	mov	r1, r6
   2ef10:	2215      	movs	r2, #21
   2ef12:	f000 fc3c 	bl	2f78e <bt_gatt_check_perm>
   2ef16:	4604      	mov	r4, r0
   2ef18:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2ef1a:	b9a0      	cbnz	r0, 2ef46 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2ef1c:	e9cd 0000 	strd	r0, r0, [sp]
   2ef20:	88ab      	ldrh	r3, [r5, #4]
   2ef22:	68aa      	ldr	r2, [r5, #8]
   2ef24:	4631      	mov	r1, r6
   2ef26:	4640      	mov	r0, r8
   2ef28:	f7ff fe13 	bl	2eb52 <att_chan_read>
	if (ret < 0) {
   2ef2c:	1e03      	subs	r3, r0, #0
   2ef2e:	da0c      	bge.n	2ef4a <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2ef30:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2ef34:	bf26      	itte	cs
   2ef36:	425b      	negcs	r3, r3
   2ef38:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2ef3a:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2ef3c:	732b      	strb	r3, [r5, #12]
}
   2ef3e:	4620      	mov	r0, r4
   2ef40:	b002      	add	sp, #8
   2ef42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2ef46:	463c      	mov	r4, r7
   2ef48:	e7f9      	b.n	2ef3e <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2ef4a:	2401      	movs	r4, #1
   2ef4c:	e7f7      	b.n	2ef3e <read_cb+0x44>

0002ef4e <att_read_blob_req>:
{
   2ef4e:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2ef50:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2ef52:	8813      	ldrh	r3, [r2, #0]
   2ef54:	8852      	ldrh	r2, [r2, #2]
   2ef56:	9200      	str	r2, [sp, #0]
   2ef58:	210c      	movs	r1, #12
   2ef5a:	220d      	movs	r2, #13
   2ef5c:	f7ed fcd2 	bl	1c904 <att_read_rsp>
}
   2ef60:	b003      	add	sp, #12
   2ef62:	f85d fb04 	ldr.w	pc, [sp], #4

0002ef66 <att_read_req>:
{
   2ef66:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2ef68:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2ef6a:	2200      	movs	r2, #0
   2ef6c:	881b      	ldrh	r3, [r3, #0]
   2ef6e:	9200      	str	r2, [sp, #0]
   2ef70:	210a      	movs	r1, #10
   2ef72:	220b      	movs	r2, #11
   2ef74:	f7ed fcc6 	bl	1c904 <att_read_rsp>
}
   2ef78:	b003      	add	sp, #12
   2ef7a:	f85d fb04 	ldr.w	pc, [sp], #4

0002ef7e <bt_att_init>:
	bt_gatt_init();
   2ef7e:	f7ee ba31 	b.w	1d3e4 <bt_gatt_init>

0002ef82 <bt_att_get_mtu>:
{
   2ef82:	b508      	push	{r3, lr}
	att = att_get(conn);
   2ef84:	f7ed f8bc 	bl	1c100 <att_get>
	if (!att) {
   2ef88:	b1d8      	cbz	r0, 2efc2 <bt_att_get_mtu+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2ef8a:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2ef8c:	b1c8      	cbz	r0, 2efc2 <bt_att_get_mtu+0x40>
   2ef8e:	f5b0 71aa 	subs.w	r1, r0, #340	; 0x154
   2ef92:	d015      	beq.n	2efc0 <bt_att_get_mtu+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ef94:	6803      	ldr	r3, [r0, #0]
   2ef96:	b10b      	cbz	r3, 2ef9c <bt_att_get_mtu+0x1a>
   2ef98:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2ef9c:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   2ef9e:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   2efa2:	4290      	cmp	r0, r2
   2efa4:	bf38      	it	cc
   2efa6:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2efa8:	b15b      	cbz	r3, 2efc2 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2efaa:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   2efae:	d004      	beq.n	2efba <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2efb0:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   2efb4:	b10a      	cbz	r2, 2efba <bt_att_get_mtu+0x38>
   2efb6:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   2efba:	4619      	mov	r1, r3
   2efbc:	4613      	mov	r3, r2
   2efbe:	e7ee      	b.n	2ef9e <bt_att_get_mtu+0x1c>
		return 0;
   2efc0:	4608      	mov	r0, r1
}
   2efc2:	bd08      	pop	{r3, pc}

0002efc4 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2efc4:	898a      	ldrh	r2, [r1, #12]
   2efc6:	6889      	ldr	r1, [r1, #8]
   2efc8:	2300      	movs	r3, #0
   2efca:	f7ed be51 	b.w	1cc70 <att_handle_rsp>

0002efce <att_handle_find_type_rsp>:
   2efce:	f7ff bff9 	b.w	2efc4 <att_handle_find_info_rsp>

0002efd2 <att_handle_read_type_rsp>:
   2efd2:	f7ff bff7 	b.w	2efc4 <att_handle_find_info_rsp>

0002efd6 <att_handle_read_rsp>:
   2efd6:	f7ff bff5 	b.w	2efc4 <att_handle_find_info_rsp>

0002efda <att_handle_read_blob_rsp>:
   2efda:	f7ff bff3 	b.w	2efc4 <att_handle_find_info_rsp>

0002efde <att_handle_read_mult_rsp>:
   2efde:	f7ff bff1 	b.w	2efc4 <att_handle_find_info_rsp>

0002efe2 <att_handle_read_group_rsp>:
   2efe2:	f7ff bfef 	b.w	2efc4 <att_handle_find_info_rsp>

0002efe6 <att_handle_write_rsp>:
   2efe6:	f7ff bfed 	b.w	2efc4 <att_handle_find_info_rsp>

0002efea <att_handle_prepare_write_rsp>:
   2efea:	f7ff bfeb 	b.w	2efc4 <att_handle_find_info_rsp>

0002efee <att_handle_exec_write_rsp>:
   2efee:	f7ff bfe9 	b.w	2efc4 <att_handle_find_info_rsp>

0002eff2 <att_confirm>:
   2eff2:	f7ff bfe7 	b.w	2efc4 <att_handle_find_info_rsp>

0002eff6 <att_mtu_rsp>:
{
   2eff6:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2eff8:	688e      	ldr	r6, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2effa:	8833      	ldrh	r3, [r6, #0]
   2effc:	2b16      	cmp	r3, #22
{
   2effe:	4604      	mov	r4, r0
   2f000:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2f002:	d806      	bhi.n	2f012 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2f004:	2200      	movs	r2, #0
   2f006:	2304      	movs	r3, #4
   2f008:	4611      	mov	r1, r2
}
   2f00a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2f00e:	f7ed be2f 	b.w	1cc70 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2f012:	2317      	movs	r3, #23
   2f014:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2f018:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2f01c:	f7ff fd53 	bl	2eac6 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2f020:	89aa      	ldrh	r2, [r5, #12]
   2f022:	2300      	movs	r3, #0
   2f024:	4631      	mov	r1, r6
   2f026:	4620      	mov	r0, r4
   2f028:	e7ef      	b.n	2f00a <att_mtu_rsp+0x14>

0002f02a <gatt_ccc_changed>:
{
   2f02a:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2f02c:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2f02e:	895a      	ldrh	r2, [r3, #10]
   2f030:	428a      	cmp	r2, r1
   2f032:	d003      	beq.n	2f03c <gatt_ccc_changed+0x12>
		ccc->value = value;
   2f034:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2f036:	68db      	ldr	r3, [r3, #12]
   2f038:	b103      	cbz	r3, 2f03c <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2f03a:	4718      	bx	r3
}
   2f03c:	4770      	bx	lr

0002f03e <gatt_indicate_rsp>:
{
   2f03e:	b510      	push	{r4, lr}
   2f040:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2f042:	68a3      	ldr	r3, [r4, #8]
{
   2f044:	460a      	mov	r2, r1
	if (params->func) {
   2f046:	b10b      	cbz	r3, 2f04c <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2f048:	4621      	mov	r1, r4
   2f04a:	4798      	blx	r3
	params->_ref--;
   2f04c:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2f04e:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2f050:	3b01      	subs	r3, #1
   2f052:	b2db      	uxtb	r3, r3
   2f054:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2f056:	b122      	cbz	r2, 2f062 <gatt_indicate_rsp+0x24>
   2f058:	b91b      	cbnz	r3, 2f062 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2f05a:	4620      	mov	r0, r4
}
   2f05c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2f060:	4710      	bx	r2
}
   2f062:	bd10      	pop	{r4, pc}

0002f064 <match_uuid>:
	data->attr = attr;
   2f064:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2f066:	8091      	strh	r1, [r2, #4]
}
   2f068:	2000      	movs	r0, #0
   2f06a:	4770      	bx	lr

0002f06c <gatt_mtu_rsp>:
{
   2f06c:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   2f06e:	6813      	ldr	r3, [r2, #0]
   2f070:	4718      	bx	r3

0002f072 <gatt_write_rsp>:
{
   2f072:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   2f074:	6813      	ldr	r3, [r2, #0]
   2f076:	4718      	bx	r3

0002f078 <gen_hash_m>:
{
   2f078:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2f07a:	6807      	ldr	r7, [r0, #0]
   2f07c:	783d      	ldrb	r5, [r7, #0]
{
   2f07e:	b089      	sub	sp, #36	; 0x24
   2f080:	4606      	mov	r6, r0
   2f082:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2f084:	b10d      	cbz	r5, 2f08a <gen_hash_m+0x12>
	switch (u16->val) {
   2f086:	2501      	movs	r5, #1
   2f088:	e014      	b.n	2f0b4 <gen_hash_m+0x3c>
   2f08a:	887b      	ldrh	r3, [r7, #2]
   2f08c:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2f090:	d004      	beq.n	2f09c <gen_hash_m+0x24>
   2f092:	d812      	bhi.n	2f0ba <gen_hash_m+0x42>
   2f094:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2f098:	2b03      	cmp	r3, #3
   2f09a:	d8f4      	bhi.n	2f086 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2f09c:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2f0a0:	2202      	movs	r2, #2
   2f0a2:	f10d 010e 	add.w	r1, sp, #14
   2f0a6:	4620      	mov	r0, r4
   2f0a8:	f7fe ffc7 	bl	2e03a <tc_cmac_update>
   2f0ac:	b9e0      	cbnz	r0, 2f0e8 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2f0ae:	f06f 0315 	mvn.w	r3, #21
   2f0b2:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2f0b4:	4628      	mov	r0, r5
   2f0b6:	b009      	add	sp, #36	; 0x24
   2f0b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2f0ba:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2f0be:	33ff      	adds	r3, #255	; 0xff
   2f0c0:	b29b      	uxth	r3, r3
   2f0c2:	2b04      	cmp	r3, #4
   2f0c4:	d8df      	bhi.n	2f086 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2f0c6:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2f0ca:	2202      	movs	r2, #2
   2f0cc:	f10d 010e 	add.w	r1, sp, #14
   2f0d0:	4620      	mov	r0, r4
   2f0d2:	f7fe ffb2 	bl	2e03a <tc_cmac_update>
   2f0d6:	2800      	cmp	r0, #0
   2f0d8:	d0e9      	beq.n	2f0ae <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2f0da:	887b      	ldrh	r3, [r7, #2]
   2f0dc:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2f0e0:	2202      	movs	r2, #2
   2f0e2:	f10d 010e 	add.w	r1, sp, #14
   2f0e6:	e017      	b.n	2f118 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2f0e8:	887b      	ldrh	r3, [r7, #2]
   2f0ea:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2f0ee:	2202      	movs	r2, #2
   2f0f0:	f10d 010e 	add.w	r1, sp, #14
   2f0f4:	4620      	mov	r0, r4
   2f0f6:	f7fe ffa0 	bl	2e03a <tc_cmac_update>
   2f0fa:	2800      	cmp	r0, #0
   2f0fc:	d0d7      	beq.n	2f0ae <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2f0fe:	2000      	movs	r0, #0
   2f100:	2310      	movs	r3, #16
   2f102:	eb0d 0203 	add.w	r2, sp, r3
   2f106:	6877      	ldr	r7, [r6, #4]
   2f108:	9000      	str	r0, [sp, #0]
   2f10a:	4631      	mov	r1, r6
   2f10c:	47b8      	blx	r7
		if (len < 0) {
   2f10e:	1e02      	subs	r2, r0, #0
   2f110:	da01      	bge.n	2f116 <gen_hash_m+0x9e>
			state->err = len;
   2f112:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2f114:	e7ce      	b.n	2f0b4 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2f116:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2f118:	4620      	mov	r0, r4
   2f11a:	f7fe ff8e 	bl	2e03a <tc_cmac_update>
   2f11e:	2800      	cmp	r0, #0
   2f120:	d1b1      	bne.n	2f086 <gen_hash_m+0xe>
   2f122:	e7c4      	b.n	2f0ae <gen_hash_m+0x36>

0002f124 <bt_addr_le_cmp>:
   2f124:	2207      	movs	r2, #7
   2f126:	f001 ba4a 	b.w	305be <memcmp>

0002f12a <find_ccc_cfg>:
{
   2f12a:	b513      	push	{r0, r1, r4, lr}
   2f12c:	1c4a      	adds	r2, r1, #1
   2f12e:	460c      	mov	r4, r1
		if (conn) {
   2f130:	b140      	cbz	r0, 2f144 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2f132:	7809      	ldrb	r1, [r1, #0]
   2f134:	f7ff faa3 	bl	2e67e <bt_conn_is_peer_addr_le>
   2f138:	2800      	cmp	r0, #0
	return NULL;
   2f13a:	bf08      	it	eq
   2f13c:	2400      	moveq	r4, #0
}
   2f13e:	4620      	mov	r0, r4
   2f140:	b002      	add	sp, #8
   2f142:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2f144:	9000      	str	r0, [sp, #0]
   2f146:	4669      	mov	r1, sp
   2f148:	f8cd 0003 	str.w	r0, [sp, #3]
   2f14c:	4610      	mov	r0, r2
   2f14e:	f7ff ffe9 	bl	2f124 <bt_addr_le_cmp>
   2f152:	2800      	cmp	r0, #0
	return NULL;
   2f154:	bf18      	it	ne
   2f156:	2400      	movne	r4, #0
   2f158:	e7f1      	b.n	2f13e <find_ccc_cfg+0x14>

0002f15a <gatt_exchange_mtu_encode>:
{
   2f15a:	b508      	push	{r3, lr}
   2f15c:	2102      	movs	r1, #2
   2f15e:	3008      	adds	r0, #8
   2f160:	f7f2 f90a 	bl	21378 <net_buf_simple_add>
   2f164:	4603      	mov	r3, r0
	req->mtu = sys_cpu_to_le16(mtu);
   2f166:	2217      	movs	r2, #23
   2f168:	2000      	movs	r0, #0
   2f16a:	701a      	strb	r2, [r3, #0]
   2f16c:	7058      	strb	r0, [r3, #1]
}
   2f16e:	bd08      	pop	{r3, pc}

0002f170 <read_included_uuid_encode>:
{
   2f170:	b510      	push	{r4, lr}
   2f172:	2102      	movs	r1, #2
   2f174:	3008      	adds	r0, #8
   2f176:	4614      	mov	r4, r2
   2f178:	f7f2 f8fe 	bl	21378 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   2f17c:	8963      	ldrh	r3, [r4, #10]
   2f17e:	8003      	strh	r3, [r0, #0]
}
   2f180:	2000      	movs	r0, #0
   2f182:	bd10      	pop	{r4, pc}

0002f184 <gatt_find_info_encode>:
{
   2f184:	b510      	push	{r4, lr}
   2f186:	2104      	movs	r1, #4
   2f188:	3008      	adds	r0, #8
   2f18a:	4614      	mov	r4, r2
   2f18c:	f7f2 f8f4 	bl	21378 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2f190:	8923      	ldrh	r3, [r4, #8]
   2f192:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2f194:	89e3      	ldrh	r3, [r4, #14]
   2f196:	8043      	strh	r3, [r0, #2]
}
   2f198:	2000      	movs	r0, #0
   2f19a:	bd10      	pop	{r4, pc}

0002f19c <gatt_read_encode>:
{
   2f19c:	b510      	push	{r4, lr}
   2f19e:	2102      	movs	r1, #2
   2f1a0:	3008      	adds	r0, #8
   2f1a2:	4614      	mov	r4, r2
   2f1a4:	f7f2 f8e8 	bl	21378 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   2f1a8:	8923      	ldrh	r3, [r4, #8]
   2f1aa:	8003      	strh	r3, [r0, #0]
}
   2f1ac:	2000      	movs	r0, #0
   2f1ae:	bd10      	pop	{r4, pc}

0002f1b0 <gatt_read_blob_encode>:
{
   2f1b0:	b510      	push	{r4, lr}
   2f1b2:	2104      	movs	r1, #4
   2f1b4:	3008      	adds	r0, #8
   2f1b6:	4614      	mov	r4, r2
   2f1b8:	f7f2 f8de 	bl	21378 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   2f1bc:	8923      	ldrh	r3, [r4, #8]
   2f1be:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   2f1c0:	8963      	ldrh	r3, [r4, #10]
   2f1c2:	8043      	strh	r3, [r0, #2]
}
   2f1c4:	2000      	movs	r0, #0
   2f1c6:	bd10      	pop	{r4, pc}

0002f1c8 <gatt_cancel_encode>:
{
   2f1c8:	b508      	push	{r3, lr}
   2f1ca:	2101      	movs	r1, #1
   2f1cc:	3008      	adds	r0, #8
   2f1ce:	f7f2 f8d3 	bl	21378 <net_buf_simple_add>
   2f1d2:	4603      	mov	r3, r0
	req->flags = BT_ATT_FLAG_CANCEL;
   2f1d4:	2000      	movs	r0, #0
   2f1d6:	7018      	strb	r0, [r3, #0]
}
   2f1d8:	bd08      	pop	{r3, pc}

0002f1da <gatt_exec_encode>:
{
   2f1da:	b508      	push	{r3, lr}
   2f1dc:	2101      	movs	r1, #1
   2f1de:	3008      	adds	r0, #8
   2f1e0:	f7f2 f8ca 	bl	21378 <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
   2f1e4:	2301      	movs	r3, #1
   2f1e6:	7003      	strb	r3, [r0, #0]
}
   2f1e8:	2000      	movs	r0, #0
   2f1ea:	bd08      	pop	{r3, pc}

0002f1ec <gatt_read_group_encode>:
{
   2f1ec:	b538      	push	{r3, r4, r5, lr}
   2f1ee:	f100 0408 	add.w	r4, r0, #8
   2f1f2:	2104      	movs	r1, #4
   2f1f4:	4620      	mov	r0, r4
   2f1f6:	4615      	mov	r5, r2
   2f1f8:	f7f2 f8be 	bl	21378 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2f1fc:	892b      	ldrh	r3, [r5, #8]
   2f1fe:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2f200:	89eb      	ldrh	r3, [r5, #14]
   2f202:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2f204:	7c2b      	ldrb	r3, [r5, #16]
   2f206:	b933      	cbnz	r3, 2f216 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2f208:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   2f20c:	4620      	mov	r0, r4
   2f20e:	f000 fc40 	bl	2fa92 <net_buf_simple_add_le16>
}
   2f212:	2000      	movs	r0, #0
   2f214:	bd38      	pop	{r3, r4, r5, pc}
   2f216:	f642 0101 	movw	r1, #10241	; 0x2801
   2f21a:	e7f7      	b.n	2f20c <gatt_read_group_encode+0x20>

0002f21c <gatt_read_type_encode>:
{
   2f21c:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2f21e:	f100 0408 	add.w	r4, r0, #8
   2f222:	2104      	movs	r1, #4
   2f224:	4620      	mov	r0, r4
   2f226:	4615      	mov	r5, r2
   2f228:	f7f2 f8a6 	bl	21378 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2f22c:	892b      	ldrh	r3, [r5, #8]
   2f22e:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2f230:	89eb      	ldrh	r3, [r5, #14]
   2f232:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   2f234:	7c2b      	ldrb	r3, [r5, #16]
   2f236:	2b02      	cmp	r3, #2
   2f238:	d004      	beq.n	2f244 <gatt_read_type_encode+0x28>
   2f23a:	2b03      	cmp	r3, #3
   2f23c:	d009      	beq.n	2f252 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2f23e:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2f240:	8859      	ldrh	r1, [r3, #2]
   2f242:	e001      	b.n	2f248 <gatt_read_type_encode+0x2c>
   2f244:	f642 0102 	movw	r1, #10242	; 0x2802
   2f248:	4620      	mov	r0, r4
   2f24a:	f000 fc22 	bl	2fa92 <net_buf_simple_add_le16>
}
   2f24e:	2000      	movs	r0, #0
   2f250:	bd38      	pop	{r3, r4, r5, pc}
   2f252:	f642 0103 	movw	r1, #10243	; 0x2803
   2f256:	e7f7      	b.n	2f248 <gatt_read_type_encode+0x2c>

0002f258 <gatt_read_mult_encode>:
{
   2f258:	b570      	push	{r4, r5, r6, lr}
   2f25a:	4614      	mov	r4, r2
	for (i = 0U; i < params->handle_count; i++) {
   2f25c:	2500      	movs	r5, #0
   2f25e:	f100 0608 	add.w	r6, r0, #8
   2f262:	6862      	ldr	r2, [r4, #4]
   2f264:	b2eb      	uxtb	r3, r5
   2f266:	429a      	cmp	r2, r3
   2f268:	f105 0501 	add.w	r5, r5, #1
   2f26c:	d801      	bhi.n	2f272 <gatt_read_mult_encode+0x1a>
}
   2f26e:	2000      	movs	r0, #0
   2f270:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_le16(buf, params->multiple.handles[i]);
   2f272:	68a2      	ldr	r2, [r4, #8]
   2f274:	4630      	mov	r0, r6
   2f276:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   2f27a:	f000 fc0a 	bl	2fa92 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   2f27e:	e7f0      	b.n	2f262 <gatt_read_mult_encode+0xa>

0002f280 <gatt_write_encode>:
{
   2f280:	b530      	push	{r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2f282:	2102      	movs	r1, #2
   2f284:	b085      	sub	sp, #20
   2f286:	4605      	mov	r5, r0
   2f288:	3008      	adds	r0, #8
   2f28a:	4614      	mov	r4, r2
   2f28c:	f7f2 f874 	bl	21378 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2f290:	88a3      	ldrh	r3, [r4, #4]
   2f292:	8003      	strh	r3, [r0, #0]
	write = net_buf_append_bytes(buf, params->length, params->data,
   2f294:	2300      	movs	r3, #0
   2f296:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2f29a:	2200      	movs	r2, #0
   2f29c:	2300      	movs	r3, #0
   2f29e:	e9cd 2300 	strd	r2, r3, [sp]
   2f2a2:	89a1      	ldrh	r1, [r4, #12]
   2f2a4:	68a2      	ldr	r2, [r4, #8]
   2f2a6:	4628      	mov	r0, r5
   2f2a8:	f7f2 f888 	bl	213bc <net_buf_append_bytes>
	if (write != params->length) {
   2f2ac:	89a3      	ldrh	r3, [r4, #12]
   2f2ae:	4283      	cmp	r3, r0
}
   2f2b0:	bf14      	ite	ne
   2f2b2:	f06f 000b 	mvnne.w	r0, #11
   2f2b6:	2000      	moveq	r0, #0
   2f2b8:	b005      	add	sp, #20
   2f2ba:	bd30      	pop	{r4, r5, pc}

0002f2bc <gatt_prepare_write_encode>:
{
   2f2bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2f2be:	4606      	mov	r6, r0
   2f2c0:	460c      	mov	r4, r1
   2f2c2:	3008      	adds	r0, #8
   2f2c4:	2104      	movs	r1, #4
   2f2c6:	4615      	mov	r5, r2
   2f2c8:	f7f2 f856 	bl	21378 <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2f2cc:	88ab      	ldrh	r3, [r5, #4]
   2f2ce:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
   2f2d0:	88eb      	ldrh	r3, [r5, #6]
   2f2d2:	8043      	strh	r3, [r0, #2]
	write = net_buf_append_bytes(buf, len - sizeof(*req),
   2f2d4:	2300      	movs	r3, #0
   2f2d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2f2da:	3c04      	subs	r4, #4
   2f2dc:	2300      	movs	r3, #0
   2f2de:	2200      	movs	r2, #0
   2f2e0:	e9cd 2300 	strd	r2, r3, [sp]
   2f2e4:	4621      	mov	r1, r4
   2f2e6:	68aa      	ldr	r2, [r5, #8]
   2f2e8:	4630      	mov	r0, r6
   2f2ea:	f7f2 f867 	bl	213bc <net_buf_append_bytes>
	if (write != (len - sizeof(*req))) {
   2f2ee:	4284      	cmp	r4, r0
}
   2f2f0:	bf14      	ite	ne
   2f2f2:	f06f 000b 	mvnne.w	r0, #11
   2f2f6:	2000      	moveq	r0, #0
   2f2f8:	b004      	add	sp, #16
   2f2fa:	bd70      	pop	{r4, r5, r6, pc}

0002f2fc <gatt_read_mult_rsp>:
{
   2f2fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2f2fe:	9d08      	ldr	r5, [sp, #32]
   2f300:	4606      	mov	r6, r0
   2f302:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   2f304:	460c      	mov	r4, r1
   2f306:	b901      	cbnz	r1, 2f30a <gatt_read_mult_rsp+0xe>
   2f308:	b94b      	cbnz	r3, 2f31e <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   2f30a:	2300      	movs	r3, #0
   2f30c:	9308      	str	r3, [sp, #32]
   2f30e:	462a      	mov	r2, r5
   2f310:	4621      	mov	r1, r4
	params->func(conn, 0, params, NULL, 0);
   2f312:	4630      	mov	r0, r6
   2f314:	46bc      	mov	ip, r7
}
   2f316:	b003      	add	sp, #12
   2f318:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   2f31c:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   2f31e:	9300      	str	r3, [sp, #0]
   2f320:	4613      	mov	r3, r2
   2f322:	462a      	mov	r2, r5
   2f324:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   2f326:	9408      	str	r4, [sp, #32]
   2f328:	682f      	ldr	r7, [r5, #0]
   2f32a:	4623      	mov	r3, r4
   2f32c:	462a      	mov	r2, r5
   2f32e:	4621      	mov	r1, r4
   2f330:	e7ef      	b.n	2f312 <gatt_read_mult_rsp+0x16>

0002f332 <bt_addr_le_copy>:
   2f332:	680b      	ldr	r3, [r1, #0]
   2f334:	6003      	str	r3, [r0, #0]
   2f336:	888b      	ldrh	r3, [r1, #4]
   2f338:	8083      	strh	r3, [r0, #4]
   2f33a:	798b      	ldrb	r3, [r1, #6]
   2f33c:	7183      	strb	r3, [r0, #6]
}
   2f33e:	4770      	bx	lr

0002f340 <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2f340:	2300      	movs	r3, #0
   2f342:	6003      	str	r3, [r0, #0]
   2f344:	6043      	str	r3, [r0, #4]
   2f346:	6083      	str	r3, [r0, #8]
}
   2f348:	4770      	bx	lr

0002f34a <sc_clear>:
{
   2f34a:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2f34c:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   2f350:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2f352:	4629      	mov	r1, r5
   2f354:	7a00      	ldrb	r0, [r0, #8]
   2f356:	f7ff f8d4 	bl	2e502 <bt_addr_le_is_bonded>
   2f35a:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2f35c:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2f35e:	f7ed fe4b 	bl	1cff8 <find_sc_cfg>
		if (cfg) {
   2f362:	b118      	cbz	r0, 2f36c <sc_clear+0x22>
}
   2f364:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   2f368:	f7ff bfea 	b.w	2f340 <clear_sc_cfg>
}
   2f36c:	bd38      	pop	{r3, r4, r5, pc}

0002f36e <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2f36e:	2a02      	cmp	r2, #2
{
   2f370:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2f372:	d108      	bne.n	2f386 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2f374:	2300      	movs	r3, #0
   2f376:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2f37a:	461a      	mov	r2, r3
   2f37c:	7a00      	ldrb	r0, [r0, #8]
   2f37e:	f7ed fef7 	bl	1d170 <sc_save>
}
   2f382:	2002      	movs	r0, #2
   2f384:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2f386:	f7ff ffe0 	bl	2f34a <sc_clear>
   2f38a:	e7fa      	b.n	2f382 <sc_ccc_cfg_write+0x14>

0002f38c <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2f38c:	b538      	push	{r3, r4, r5, lr}
   2f38e:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   2f392:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2f394:	460c      	mov	r4, r1
   2f396:	4611      	mov	r1, r2
	if (offset > value_len) {
   2f398:	d30a      	bcc.n	2f3b0 <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   2f39a:	1aad      	subs	r5, r5, r2
   2f39c:	42a5      	cmp	r5, r4
   2f39e:	bfa8      	it	ge
   2f3a0:	4625      	movge	r5, r4
   2f3a2:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f3a4:	462a      	mov	r2, r5
   2f3a6:	4419      	add	r1, r3
   2f3a8:	f001 f917 	bl	305da <memcpy>
}
   2f3ac:	4628      	mov	r0, r5
   2f3ae:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2f3b0:	f06f 0506 	mvn.w	r5, #6
   2f3b4:	e7fa      	b.n	2f3ac <bt_gatt_attr_read.constprop.0+0x20>

0002f3b6 <bt_gatt_attr_read_ccc>:
{
   2f3b6:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2f3b8:	68c9      	ldr	r1, [r1, #12]
{
   2f3ba:	b085      	sub	sp, #20
   2f3bc:	4614      	mov	r4, r2
   2f3be:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2f3c0:	f7ff feb3 	bl	2f12a <find_ccc_cfg>
	if (cfg) {
   2f3c4:	b100      	cbz	r0, 2f3c8 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2f3c6:	8900      	ldrh	r0, [r0, #8]
   2f3c8:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2f3cc:	2302      	movs	r3, #2
   2f3ce:	9300      	str	r3, [sp, #0]
   2f3d0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2f3d4:	f10d 030e 	add.w	r3, sp, #14
   2f3d8:	4629      	mov	r1, r5
   2f3da:	4620      	mov	r0, r4
   2f3dc:	f7ff ffd6 	bl	2f38c <bt_gatt_attr_read.constprop.0>
}
   2f3e0:	b005      	add	sp, #20
   2f3e2:	bd30      	pop	{r4, r5, pc}

0002f3e4 <bt_gatt_attr_read_service>:
{
   2f3e4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2f3e6:	460c      	mov	r4, r1
   2f3e8:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2f3ea:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2f3ec:	781c      	ldrb	r4, [r3, #0]
{
   2f3ee:	4610      	mov	r0, r2
   2f3f0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2f3f4:	b954      	cbnz	r4, 2f40c <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2f3f6:	885b      	ldrh	r3, [r3, #2]
   2f3f8:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2f3fc:	2302      	movs	r3, #2
   2f3fe:	9300      	str	r3, [sp, #0]
   2f400:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2f404:	f7ff ffc2 	bl	2f38c <bt_gatt_attr_read.constprop.0>
}
   2f408:	b004      	add	sp, #16
   2f40a:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2f40c:	2410      	movs	r4, #16
   2f40e:	9400      	str	r4, [sp, #0]
   2f410:	3301      	adds	r3, #1
   2f412:	e7f7      	b.n	2f404 <bt_gatt_attr_read_service+0x20>

0002f414 <cf_read>:
{
   2f414:	b530      	push	{r4, r5, lr}
   2f416:	b085      	sub	sp, #20
   2f418:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2f41a:	2300      	movs	r3, #0
{
   2f41c:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2f41e:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2f422:	f7ed fdcb 	bl	1cfbc <find_cf_cfg>
	if (cfg) {
   2f426:	b110      	cbz	r0, 2f42e <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2f428:	7a03      	ldrb	r3, [r0, #8]
   2f42a:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2f42e:	2301      	movs	r3, #1
   2f430:	9300      	str	r3, [sp, #0]
   2f432:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2f436:	ab03      	add	r3, sp, #12
   2f438:	4629      	mov	r1, r5
   2f43a:	4620      	mov	r0, r4
   2f43c:	f7ff ffa6 	bl	2f38c <bt_gatt_attr_read.constprop.0>
}
   2f440:	b005      	add	sp, #20
   2f442:	bd30      	pop	{r4, r5, pc}

0002f444 <read_name>:
{
   2f444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f448:	4614      	mov	r4, r2
   2f44a:	461d      	mov	r5, r3
   2f44c:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2f450:	f7ea fba4 	bl	19b9c <bt_get_name>
   2f454:	4606      	mov	r6, r0
				 strlen(name));
   2f456:	f7dd ffad 	bl	d3b4 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2f45a:	b280      	uxth	r0, r0
   2f45c:	9006      	str	r0, [sp, #24]
   2f45e:	4633      	mov	r3, r6
   2f460:	463a      	mov	r2, r7
   2f462:	4629      	mov	r1, r5
   2f464:	4620      	mov	r0, r4
}
   2f466:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2f46a:	f7ff bf8f 	b.w	2f38c <bt_gatt_attr_read.constprop.0>

0002f46e <read_appearance>:
{
   2f46e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2f470:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2f472:	2300      	movs	r3, #0
   2f474:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2f478:	2302      	movs	r3, #2
   2f47a:	9300      	str	r3, [sp, #0]
{
   2f47c:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2f47e:	f10d 030e 	add.w	r3, sp, #14
   2f482:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2f486:	f7ff ff81 	bl	2f38c <bt_gatt_attr_read.constprop.0>
}
   2f48a:	b005      	add	sp, #20
   2f48c:	f85d fb04 	ldr.w	pc, [sp], #4

0002f490 <gatt_find_type_encode>:
{
   2f490:	b538      	push	{r3, r4, r5, lr}
   2f492:	f100 0508 	add.w	r5, r0, #8
   2f496:	2106      	movs	r1, #6
   2f498:	4628      	mov	r0, r5
   2f49a:	4614      	mov	r4, r2
   2f49c:	f7f1 ff6c 	bl	21378 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2f4a0:	8923      	ldrh	r3, [r4, #8]
   2f4a2:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2f4a4:	89e3      	ldrh	r3, [r4, #14]
   2f4a6:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2f4a8:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   2f4aa:	6821      	ldr	r1, [r4, #0]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2f4ac:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
   2f4ae:	f642 0301 	movw	r3, #10241	; 0x2801
   2f4b2:	bf08      	it	eq
   2f4b4:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   2f4b8:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   2f4ba:	780b      	ldrb	r3, [r1, #0]
   2f4bc:	b11b      	cbz	r3, 2f4c6 <gatt_find_type_encode+0x36>
   2f4be:	2b02      	cmp	r3, #2
   2f4c0:	d006      	beq.n	2f4d0 <gatt_find_type_encode+0x40>
}
   2f4c2:	2000      	movs	r0, #0
   2f4c4:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   2f4c6:	8849      	ldrh	r1, [r1, #2]
   2f4c8:	4628      	mov	r0, r5
   2f4ca:	f000 fae2 	bl	2fa92 <net_buf_simple_add_le16>
}
   2f4ce:	e7f8      	b.n	2f4c2 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2f4d0:	2210      	movs	r2, #16
   2f4d2:	3101      	adds	r1, #1
   2f4d4:	4628      	mov	r0, r5
   2f4d6:	f000 fad0 	bl	2fa7a <net_buf_simple_add_mem>
   2f4da:	e7f2      	b.n	2f4c2 <gatt_find_type_encode+0x32>

0002f4dc <clear_cf_cfg>:
{
   2f4dc:	b513      	push	{r0, r1, r4, lr}
   2f4de:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2f4e0:	2400      	movs	r4, #0
   2f4e2:	4669      	mov	r1, sp
   2f4e4:	3001      	adds	r0, #1
   2f4e6:	9400      	str	r4, [sp, #0]
   2f4e8:	f8cd 4003 	str.w	r4, [sp, #3]
   2f4ec:	f7ff ff21 	bl	2f332 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   2f4f0:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2f4f2:	320c      	adds	r2, #12
   2f4f4:	f3bf 8f5b 	dmb	ish
   2f4f8:	e852 3f00 	ldrex	r3, [r2]
   2f4fc:	e842 4100 	strex	r1, r4, [r2]
   2f500:	2900      	cmp	r1, #0
   2f502:	d1f9      	bne.n	2f4f8 <clear_cf_cfg+0x1c>
   2f504:	f3bf 8f5b 	dmb	ish
}
   2f508:	b002      	add	sp, #8
   2f50a:	bd10      	pop	{r4, pc}

0002f50c <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2f50c:	2301      	movs	r3, #1
   2f50e:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2f510:	f3bf 8f5b 	dmb	ish
   2f514:	e850 2f00 	ldrex	r2, [r0]
   2f518:	431a      	orrs	r2, r3
   2f51a:	e840 2100 	strex	r1, r2, [r0]
   2f51e:	2900      	cmp	r1, #0
   2f520:	d1f8      	bne.n	2f514 <atomic_set_bit+0x8>
   2f522:	f3bf 8f5b 	dmb	ish
}
   2f526:	4770      	bx	lr

0002f528 <sc_restore_rsp>:
{
   2f528:	b538      	push	{r3, r4, r5, lr}
   2f52a:	4605      	mov	r5, r0
   2f52c:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   2f52e:	f7ed fd45 	bl	1cfbc <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2f532:	b130      	cbz	r0, 2f542 <sc_restore_rsp+0x1a>
   2f534:	7a03      	ldrb	r3, [r0, #8]
   2f536:	07db      	lsls	r3, r3, #31
   2f538:	d503      	bpl.n	2f542 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2f53a:	2100      	movs	r1, #0
   2f53c:	300c      	adds	r0, #12
   2f53e:	f7ff ffe5 	bl	2f50c <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2f542:	b934      	cbnz	r4, 2f552 <sc_restore_rsp+0x2a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2f544:	7a28      	ldrb	r0, [r5, #8]
   2f546:	f105 0190 	add.w	r1, r5, #144	; 0x90
   2f54a:	f7ed fd55 	bl	1cff8 <find_sc_cfg>
		if (sc_cfg) {
   2f54e:	b100      	cbz	r0, 2f552 <sc_restore_rsp+0x2a>
   2f550:	6084      	str	r4, [r0, #8]
}
   2f552:	bd38      	pop	{r3, r4, r5, pc}

0002f554 <gatt_write_ccc_buf>:
{
   2f554:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2f556:	f100 0508 	add.w	r5, r0, #8
   2f55a:	2102      	movs	r1, #2
   2f55c:	4628      	mov	r0, r5
   2f55e:	4614      	mov	r4, r2
   2f560:	f7f1 ff0a 	bl	21378 <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2f564:	8963      	ldrh	r3, [r4, #10]
	net_buf_simple_add_le16(&buf->b, val);
   2f566:	89a1      	ldrh	r1, [r4, #12]
   2f568:	8003      	strh	r3, [r0, #0]
   2f56a:	3410      	adds	r4, #16
   2f56c:	4628      	mov	r0, r5
   2f56e:	f000 fa90 	bl	2fa92 <net_buf_simple_add_le16>
   2f572:	f3bf 8f5b 	dmb	ish
   2f576:	e854 3f00 	ldrex	r3, [r4]
   2f57a:	f043 0304 	orr.w	r3, r3, #4
   2f57e:	e844 3200 	strex	r2, r3, [r4]
   2f582:	2a00      	cmp	r2, #0
   2f584:	d1f7      	bne.n	2f576 <gatt_write_ccc_buf+0x22>
   2f586:	f3bf 8f5b 	dmb	ish
}
   2f58a:	2000      	movs	r0, #0
   2f58c:	bd38      	pop	{r3, r4, r5, pc}

0002f58e <gatt_read_uuid_encode>:
{
   2f58e:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2f590:	f100 0408 	add.w	r4, r0, #8
   2f594:	2104      	movs	r1, #4
   2f596:	4620      	mov	r0, r4
   2f598:	4615      	mov	r5, r2
   2f59a:	f7f1 feed 	bl	21378 <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   2f59e:	892b      	ldrh	r3, [r5, #8]
   2f5a0:	8003      	strh	r3, [r0, #0]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   2f5a2:	68e9      	ldr	r1, [r5, #12]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   2f5a4:	896b      	ldrh	r3, [r5, #10]
   2f5a6:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   2f5a8:	780b      	ldrb	r3, [r1, #0]
   2f5aa:	b92b      	cbnz	r3, 2f5b8 <gatt_read_uuid_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2f5ac:	8849      	ldrh	r1, [r1, #2]
   2f5ae:	4620      	mov	r0, r4
   2f5b0:	f000 fa6f 	bl	2fa92 <net_buf_simple_add_le16>
}
   2f5b4:	2000      	movs	r0, #0
   2f5b6:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2f5b8:	2210      	movs	r2, #16
   2f5ba:	3101      	adds	r1, #1
   2f5bc:	4620      	mov	r0, r4
   2f5be:	f000 fa5c 	bl	2fa7a <net_buf_simple_add_mem>
   2f5c2:	e7f7      	b.n	2f5b4 <gatt_read_uuid_encode+0x26>

0002f5c4 <gatt_sub_remove>:
{
   2f5c4:	b538      	push	{r3, r4, r5, lr}
   2f5c6:	460c      	mov	r4, r1
	if (params) {
   2f5c8:	4619      	mov	r1, r3
   2f5ca:	b16b      	cbz	r3, 2f5e8 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   2f5cc:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   2f5d0:	695b      	ldr	r3, [r3, #20]
   2f5d2:	b982      	cbnz	r2, 2f5f6 <gatt_sub_remove+0x32>
   2f5d4:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   2f5d6:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   2f5d8:	4295      	cmp	r5, r2
   2f5da:	d100      	bne.n	2f5de <gatt_sub_remove+0x1a>
	list->tail = node;
   2f5dc:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   2f5de:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   2f5e0:	680d      	ldr	r5, [r1, #0]
   2f5e2:	614b      	str	r3, [r1, #20]
   2f5e4:	461a      	mov	r2, r3
   2f5e6:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   2f5e8:	68a3      	ldr	r3, [r4, #8]
   2f5ea:	b953      	cbnz	r3, 2f602 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   2f5ec:	4620      	mov	r0, r4
}
   2f5ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   2f5f2:	f7ed bd9d 	b.w	1d130 <gatt_sub_free>
   2f5f6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2f5f8:	68e3      	ldr	r3, [r4, #12]
   2f5fa:	429d      	cmp	r5, r3
	list->tail = node;
   2f5fc:	bf08      	it	eq
   2f5fe:	60e2      	streq	r2, [r4, #12]
}
   2f600:	e7ed      	b.n	2f5de <gatt_sub_remove+0x1a>
}
   2f602:	bd38      	pop	{r3, r4, r5, pc}

0002f604 <gatt_write_ccc_rsp>:
{
   2f604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2f608:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f60a:	f3bf 8f5b 	dmb	ish
   2f60e:	4606      	mov	r6, r0
   2f610:	460d      	mov	r5, r1
   2f612:	f104 0310 	add.w	r3, r4, #16
   2f616:	e853 2f00 	ldrex	r2, [r3]
   2f61a:	f022 0204 	bic.w	r2, r2, #4
   2f61e:	e843 2100 	strex	r1, r2, [r3]
   2f622:	2900      	cmp	r1, #0
   2f624:	d1f7      	bne.n	2f616 <gatt_write_ccc_rsp+0x12>
   2f626:	f3bf 8f5b 	dmb	ish
	if (err) {
   2f62a:	b1dd      	cbz	r5, 2f664 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   2f62c:	f7ed fcf4 	bl	1d018 <gatt_sub_find>
		if (!sub) {
   2f630:	4601      	mov	r1, r0
   2f632:	b300      	cbz	r0, 2f676 <gatt_write_ccc_rsp+0x72>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   2f634:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   2f636:	b143      	cbz	r3, 2f64a <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2f638:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   2f63a:	f104 0014 	add.w	r0, r4, #20
   2f63e:	4283      	cmp	r3, r0
   2f640:	d10b      	bne.n	2f65a <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   2f642:	4623      	mov	r3, r4
   2f644:	4630      	mov	r0, r6
   2f646:	f7ff ffbd 	bl	2f5c4 <gatt_sub_remove>
	if (params->write) {
   2f64a:	6863      	ldr	r3, [r4, #4]
   2f64c:	b19b      	cbz	r3, 2f676 <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   2f64e:	4629      	mov	r1, r5
   2f650:	4630      	mov	r0, r6
   2f652:	2200      	movs	r2, #0
}
   2f654:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   2f658:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2f65a:	2a00      	cmp	r2, #0
   2f65c:	d0f5      	beq.n	2f64a <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2f65e:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   2f660:	6812      	ldr	r2, [r2, #0]
   2f662:	e7ec      	b.n	2f63e <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   2f664:	89a3      	ldrh	r3, [r4, #12]
   2f666:	2b00      	cmp	r3, #0
   2f668:	d1ef      	bne.n	2f64a <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   2f66a:	6827      	ldr	r7, [r4, #0]
   2f66c:	462b      	mov	r3, r5
   2f66e:	462a      	mov	r2, r5
   2f670:	4621      	mov	r1, r4
   2f672:	47b8      	blx	r7
   2f674:	e7e9      	b.n	2f64a <gatt_write_ccc_rsp+0x46>
}
   2f676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002f67a <gatt_req_send>:
{
   2f67a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2f67e:	4606      	mov	r6, r0
   2f680:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2f682:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2f686:	2100      	movs	r1, #0
{
   2f688:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   2f68c:	4614      	mov	r4, r2
   2f68e:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2f690:	f7ed fac6 	bl	1cc20 <bt_att_req_alloc>
	if (!req) {
   2f694:	4605      	mov	r5, r0
   2f696:	b920      	cbnz	r0, 2f6a2 <gatt_req_send+0x28>
		return -ENOMEM;
   2f698:	f06f 040b 	mvn.w	r4, #11
}
   2f69c:	4620      	mov	r0, r4
   2f69e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   2f6a2:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   2f6a6:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   2f6a8:	f89d 1020 	ldrb.w	r1, [sp, #32]
   2f6ac:	464a      	mov	r2, r9
   2f6ae:	4630      	mov	r0, r6
   2f6b0:	f7ed f818 	bl	1c6e4 <bt_att_create_pdu>
	if (!buf) {
   2f6b4:	b918      	cbnz	r0, 2f6be <gatt_req_send+0x44>
		bt_att_req_free(req);
   2f6b6:	4628      	mov	r0, r5
   2f6b8:	f7ed fac8 	bl	1cc4c <bt_att_req_free>
   2f6bc:	e7ec      	b.n	2f698 <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   2f6be:	4622      	mov	r2, r4
	req->buf = buf;
   2f6c0:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   2f6c2:	4649      	mov	r1, r9
   2f6c4:	47b8      	blx	r7
	if (err) {
   2f6c6:	4604      	mov	r4, r0
   2f6c8:	b118      	cbz	r0, 2f6d2 <gatt_req_send+0x58>
		bt_att_req_free(req);
   2f6ca:	4628      	mov	r0, r5
   2f6cc:	f7ed fabe 	bl	1cc4c <bt_att_req_free>
   2f6d0:	e7e4      	b.n	2f69c <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   2f6d2:	4629      	mov	r1, r5
   2f6d4:	4630      	mov	r0, r6
   2f6d6:	f7ed fc07 	bl	1cee8 <bt_att_req_send>
	if (err) {
   2f6da:	4604      	mov	r4, r0
   2f6dc:	2800      	cmp	r0, #0
   2f6de:	d0dd      	beq.n	2f69c <gatt_req_send+0x22>
   2f6e0:	e7f3      	b.n	2f6ca <gatt_req_send+0x50>

0002f6e2 <bt_gatt_attr_value_handle>:
{
   2f6e2:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2f6e4:	4604      	mov	r4, r0
   2f6e6:	b910      	cbnz	r0, 2f6ee <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2f6e8:	2000      	movs	r0, #0
}
   2f6ea:	b002      	add	sp, #8
   2f6ec:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2f6ee:	2300      	movs	r3, #0
   2f6f0:	f88d 3004 	strb.w	r3, [sp, #4]
   2f6f4:	6800      	ldr	r0, [r0, #0]
   2f6f6:	f642 0303 	movw	r3, #10243	; 0x2803
   2f6fa:	a901      	add	r1, sp, #4
   2f6fc:	f8ad 3006 	strh.w	r3, [sp, #6]
   2f700:	f7fe fd6f 	bl	2e1e2 <bt_uuid_cmp>
   2f704:	2800      	cmp	r0, #0
   2f706:	d1ef      	bne.n	2f6e8 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2f708:	68e3      	ldr	r3, [r4, #12]
   2f70a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2f70c:	2800      	cmp	r0, #0
   2f70e:	d1ec      	bne.n	2f6ea <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2f710:	4620      	mov	r0, r4
   2f712:	f7ed fed5 	bl	1d4c0 <bt_gatt_attr_get_handle>
   2f716:	3001      	adds	r0, #1
   2f718:	b280      	uxth	r0, r0
	return handle;
   2f71a:	e7e6      	b.n	2f6ea <bt_gatt_attr_value_handle+0x8>

0002f71c <bt_gatt_attr_read_chrc>:
{
   2f71c:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2f71e:	68ce      	ldr	r6, [r1, #12]
{
   2f720:	b088      	sub	sp, #32
   2f722:	4608      	mov	r0, r1
   2f724:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   2f726:	79b3      	ldrb	r3, [r6, #6]
   2f728:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2f72c:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2f72e:	f7ff ffd8 	bl	2f6e2 <bt_gatt_attr_value_handle>
   2f732:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2f736:	6830      	ldr	r0, [r6, #0]
   2f738:	7803      	ldrb	r3, [r0, #0]
   2f73a:	b96b      	cbnz	r3, 2f758 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2f73c:	8843      	ldrh	r3, [r0, #2]
   2f73e:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2f742:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2f744:	9300      	str	r3, [sp, #0]
   2f746:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2f74a:	ab03      	add	r3, sp, #12
   2f74c:	4629      	mov	r1, r5
   2f74e:	4620      	mov	r0, r4
   2f750:	f7ff fe1c 	bl	2f38c <bt_gatt_attr_read.constprop.0>
}
   2f754:	b008      	add	sp, #32
   2f756:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2f758:	1c43      	adds	r3, r0, #1
   2f75a:	f10d 020f 	add.w	r2, sp, #15
   2f75e:	3011      	adds	r0, #17
   2f760:	f853 1b04 	ldr.w	r1, [r3], #4
   2f764:	f842 1b04 	str.w	r1, [r2], #4
   2f768:	4283      	cmp	r3, r0
   2f76a:	d1f9      	bne.n	2f760 <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2f76c:	2313      	movs	r3, #19
   2f76e:	e7e9      	b.n	2f744 <bt_gatt_attr_read_chrc+0x28>

0002f770 <bt_gatt_foreach_attr>:
{
   2f770:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2f772:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2f776:	2300      	movs	r3, #0
   2f778:	9300      	str	r3, [sp, #0]
   2f77a:	461a      	mov	r2, r3
   2f77c:	f7ed feec 	bl	1d558 <bt_gatt_foreach_attr_type>
}
   2f780:	b005      	add	sp, #20
   2f782:	f85d fb04 	ldr.w	pc, [sp], #4

0002f786 <db_hash_process>:
	db_hash_gen(true);
   2f786:	f7ed bf5d 	b.w	1d644 <db_hash_gen.isra.0>

0002f78a <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   2f78a:	f7ff bbfa 	b.w	2ef82 <bt_att_get_mtu>

0002f78e <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2f78e:	07d3      	lsls	r3, r2, #31
{
   2f790:	b510      	push	{r4, lr}
   2f792:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2f794:	d504      	bpl.n	2f7a0 <bt_gatt_check_perm+0x12>
   2f796:	f014 0f15 	tst.w	r4, #21
   2f79a:	d017      	beq.n	2f7cc <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2f79c:	684b      	ldr	r3, [r1, #4]
   2f79e:	b1ab      	cbz	r3, 2f7cc <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2f7a0:	0793      	lsls	r3, r2, #30
   2f7a2:	d504      	bpl.n	2f7ae <bt_gatt_check_perm+0x20>
   2f7a4:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   2f7a8:	d012      	beq.n	2f7d0 <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2f7aa:	688b      	ldr	r3, [r1, #8]
   2f7ac:	b183      	cbz	r3, 2f7d0 <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   2f7ae:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2f7b0:	f014 0f30 	tst.w	r4, #48	; 0x30
   2f7b4:	d104      	bne.n	2f7c0 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2f7b6:	f014 000c 	ands.w	r0, r4, #12
   2f7ba:	bf18      	it	ne
   2f7bc:	200f      	movne	r0, #15
}
   2f7be:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2f7c0:	f7fe ff5b 	bl	2e67a <bt_conn_get_security>
   2f7c4:	2802      	cmp	r0, #2
   2f7c6:	d8f6      	bhi.n	2f7b6 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   2f7c8:	2005      	movs	r0, #5
   2f7ca:	e7f8      	b.n	2f7be <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2f7cc:	2002      	movs	r0, #2
   2f7ce:	e7f6      	b.n	2f7be <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2f7d0:	2003      	movs	r0, #3
   2f7d2:	e7f4      	b.n	2f7be <bt_gatt_check_perm+0x30>

0002f7d4 <gatt_discover_next>:
{
   2f7d4:	b570      	push	{r4, r5, r6, lr}
   2f7d6:	4605      	mov	r5, r0
   2f7d8:	4614      	mov	r4, r2
	if (!last_handle)
   2f7da:	b929      	cbnz	r1, 2f7e8 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   2f7dc:	4621      	mov	r1, r4
   2f7de:	4628      	mov	r0, r5
   2f7e0:	f7ee fa8c 	bl	1dcfc <bt_gatt_discover>
   2f7e4:	b928      	cbnz	r0, 2f7f2 <gatt_discover_next+0x1e>
}
   2f7e6:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   2f7e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2f7ec:	4291      	cmp	r1, r2
   2f7ee:	d107      	bne.n	2f800 <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   2f7f0:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   2f7f2:	6863      	ldr	r3, [r4, #4]
   2f7f4:	4622      	mov	r2, r4
   2f7f6:	4628      	mov	r0, r5
   2f7f8:	2100      	movs	r1, #0
}
   2f7fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   2f7fe:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   2f800:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   2f802:	1c4b      	adds	r3, r1, #1
   2f804:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2f806:	429a      	cmp	r2, r3
		params->start_handle++;
   2f808:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2f80a:	d2e7      	bcs.n	2f7dc <gatt_discover_next+0x8>
   2f80c:	e7f1      	b.n	2f7f2 <gatt_discover_next+0x1e>

0002f80e <gatt_find_type_rsp>:
{
   2f80e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f812:	b088      	sub	sp, #32
   2f814:	4607      	mov	r7, r0
   2f816:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2f81a:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   2f81c:	b911      	cbnz	r1, 2f824 <gatt_find_type_rsp+0x16>
   2f81e:	f013 0803 	ands.w	r8, r3, #3
   2f822:	d008      	beq.n	2f836 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   2f824:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2f828:	464a      	mov	r2, r9
   2f82a:	2100      	movs	r1, #0
   2f82c:	4638      	mov	r0, r7
   2f82e:	4798      	blx	r3
}
   2f830:	b008      	add	sp, #32
   2f832:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0U; i < count; i++) {
   2f836:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2f83a:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2f83e:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2f840:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   2f844:	42ac      	cmp	r4, r5
   2f846:	d105      	bne.n	2f854 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   2f848:	464a      	mov	r2, r9
   2f84a:	4641      	mov	r1, r8
   2f84c:	4638      	mov	r0, r7
   2f84e:	f7ff ffc1 	bl	2f7d4 <gatt_discover_next>
	return;
   2f852:	e7ed      	b.n	2f830 <gatt_find_type_rsp+0x22>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2f854:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2f856:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   2f85a:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2f85e:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2f860:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   2f864:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2f868:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   2f86a:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2f86c:	bf0c      	ite	eq
   2f86e:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   2f872:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2f874:	ab01      	add	r3, sp, #4
   2f876:	f8ad 1002 	strh.w	r1, [sp, #2]
   2f87a:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   2f87c:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2f880:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2f884:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2f888:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2f88c:	f8cd d00c 	str.w	sp, [sp, #12]
   2f890:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2f894:	464a      	mov	r2, r9
   2f896:	a903      	add	r1, sp, #12
   2f898:	4638      	mov	r0, r7
   2f89a:	4798      	blx	r3
   2f89c:	3404      	adds	r4, #4
   2f89e:	2800      	cmp	r0, #0
   2f8a0:	d1d0      	bne.n	2f844 <gatt_find_type_rsp+0x36>
   2f8a2:	e7c5      	b.n	2f830 <gatt_find_type_rsp+0x22>

0002f8a4 <bt_gatt_notification>:
{
   2f8a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2f8a8:	4607      	mov	r7, r0
   2f8aa:	4688      	mov	r8, r1
   2f8ac:	4691      	mov	r9, r2
   2f8ae:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2f8b0:	f7ed fbb2 	bl	1d018 <gatt_sub_find>
	if (!sub) {
   2f8b4:	b1f8      	cbz	r0, 2f8f6 <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2f8b6:	6883      	ldr	r3, [r0, #8]
   2f8b8:	b1eb      	cbz	r3, 2f8f6 <bt_gatt_notification+0x52>
   2f8ba:	f1b3 0614 	subs.w	r6, r3, #20
   2f8be:	d01a      	beq.n	2f8f6 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2f8c0:	681c      	ldr	r4, [r3, #0]
   2f8c2:	b104      	cbz	r4, 2f8c6 <bt_gatt_notification+0x22>
   2f8c4:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   2f8c6:	8933      	ldrh	r3, [r6, #8]
   2f8c8:	4543      	cmp	r3, r8
   2f8ca:	d10a      	bne.n	2f8e2 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   2f8cc:	6835      	ldr	r5, [r6, #0]
   2f8ce:	4653      	mov	r3, sl
   2f8d0:	464a      	mov	r2, r9
   2f8d2:	4631      	mov	r1, r6
   2f8d4:	4638      	mov	r0, r7
   2f8d6:	47a8      	blx	r5
   2f8d8:	b918      	cbnz	r0, 2f8e2 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   2f8da:	4631      	mov	r1, r6
   2f8dc:	4638      	mov	r0, r7
   2f8de:	f7ef f9c7 	bl	1ec70 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2f8e2:	b144      	cbz	r4, 2f8f6 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2f8e4:	f114 0514 	adds.w	r5, r4, #20
   2f8e8:	d002      	beq.n	2f8f0 <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2f8ea:	6965      	ldr	r5, [r4, #20]
   2f8ec:	b105      	cbz	r5, 2f8f0 <bt_gatt_notification+0x4c>
   2f8ee:	3d14      	subs	r5, #20
{
   2f8f0:	4626      	mov	r6, r4
   2f8f2:	462c      	mov	r4, r5
   2f8f4:	e7e7      	b.n	2f8c6 <bt_gatt_notification+0x22>
}
   2f8f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002f8fa <bt_gatt_change_aware>:
{
   2f8fa:	b510      	push	{r4, lr}
   2f8fc:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2f8fe:	f7ed fb5d 	bl	1cfbc <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2f902:	4603      	mov	r3, r0
   2f904:	b910      	cbnz	r0, 2f90c <bt_gatt_change_aware+0x12>
		return true;
   2f906:	2401      	movs	r4, #1
}
   2f908:	4620      	mov	r0, r4
   2f90a:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2f90c:	7a02      	ldrb	r2, [r0, #8]
   2f90e:	07d2      	lsls	r2, r2, #31
   2f910:	d5f9      	bpl.n	2f906 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2f912:	f3bf 8f5b 	dmb	ish
   2f916:	68d9      	ldr	r1, [r3, #12]
   2f918:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2f91c:	f011 0101 	ands.w	r1, r1, #1
   2f920:	f100 000c 	add.w	r0, r0, #12
   2f924:	d1ef      	bne.n	2f906 <bt_gatt_change_aware+0xc>
	if (!req) {
   2f926:	2c00      	cmp	r4, #0
   2f928:	d0ee      	beq.n	2f908 <bt_gatt_change_aware+0xe>
   2f92a:	f3bf 8f5b 	dmb	ish
   2f92e:	68db      	ldr	r3, [r3, #12]
   2f930:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2f934:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2f938:	079b      	lsls	r3, r3, #30
   2f93a:	d50e      	bpl.n	2f95a <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2f93c:	f3bf 8f5b 	dmb	ish
   2f940:	e850 3f00 	ldrex	r3, [r0]
   2f944:	f023 0302 	bic.w	r3, r3, #2
   2f948:	e840 3200 	strex	r2, r3, [r0]
   2f94c:	2a00      	cmp	r2, #0
   2f94e:	d1f7      	bne.n	2f940 <bt_gatt_change_aware+0x46>
   2f950:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2f954:	f7ff fdda 	bl	2f50c <atomic_set_bit>
	return false;
   2f958:	e7d6      	b.n	2f908 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2f95a:	2101      	movs	r1, #1
   2f95c:	e7fa      	b.n	2f954 <bt_gatt_change_aware+0x5a>

0002f95e <bt_smp_recv>:
{
   2f95e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2f960:	2100      	movs	r1, #0
   2f962:	f04f 32ff 	mov.w	r2, #4294967295
   2f966:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   2f96a:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2f96c:	4608      	mov	r0, r1
   2f96e:	f7fe ff80 	bl	2e872 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   2f972:	f100 0608 	add.w	r6, r0, #8
   2f976:	4604      	mov	r4, r0
   2f978:	2101      	movs	r1, #1
   2f97a:	4630      	mov	r0, r6
   2f97c:	f7f1 fcfc 	bl	21378 <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2f980:	2505      	movs	r5, #5
   2f982:	7005      	strb	r5, [r0, #0]
   2f984:	2101      	movs	r1, #1
   2f986:	4630      	mov	r0, r6
   2f988:	f7f1 fcf6 	bl	21378 <net_buf_simple_add>
   2f98c:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2f98e:	7005      	strb	r5, [r0, #0]
   2f990:	4622      	mov	r2, r4
   2f992:	9300      	str	r3, [sp, #0]
   2f994:	2106      	movs	r1, #6
   2f996:	4638      	mov	r0, r7
   2f998:	f7fe ff6e 	bl	2e878 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2f99c:	b110      	cbz	r0, 2f9a4 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   2f99e:	4620      	mov	r0, r4
   2f9a0:	f7f1 fbba 	bl	21118 <net_buf_unref>
}
   2f9a4:	2000      	movs	r0, #0
   2f9a6:	b003      	add	sp, #12
   2f9a8:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002f9aa <bt_smp_sign>:
   2f9aa:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2f9ae:	4770      	bx	lr

0002f9b0 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2f9b0:	2000      	movs	r0, #0
   2f9b2:	4770      	bx	lr

0002f9b4 <bt_addr_le_copy>:
{
   2f9b4:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2f9b6:	c903      	ldmia	r1, {r0, r1}
   2f9b8:	8099      	strh	r1, [r3, #4]
   2f9ba:	0c09      	lsrs	r1, r1, #16
   2f9bc:	6018      	str	r0, [r3, #0]
   2f9be:	7199      	strb	r1, [r3, #6]
}
   2f9c0:	4770      	bx	lr

0002f9c2 <data_cb>:
{
   2f9c2:	b508      	push	{r3, lr}
   2f9c4:	4603      	mov	r3, r0
   2f9c6:	4608      	mov	r0, r1
	switch (data->type) {
   2f9c8:	781a      	ldrb	r2, [r3, #0]
   2f9ca:	3a08      	subs	r2, #8
   2f9cc:	2a01      	cmp	r2, #1
   2f9ce:	d808      	bhi.n	2f9e2 <data_cb+0x20>
		memcpy(name, data->data, MIN(data->data_len, NAME_LEN - 1));
   2f9d0:	785a      	ldrb	r2, [r3, #1]
   2f9d2:	6859      	ldr	r1, [r3, #4]
   2f9d4:	2a1d      	cmp	r2, #29
   2f9d6:	bf28      	it	cs
   2f9d8:	221d      	movcs	r2, #29
   2f9da:	f000 fdfe 	bl	305da <memcpy>
   2f9de:	2000      	movs	r0, #0
}
   2f9e0:	bd08      	pop	{r3, pc}
		return true;
   2f9e2:	2001      	movs	r0, #1
   2f9e4:	e7fc      	b.n	2f9e0 <data_cb+0x1e>

0002f9e6 <conn_addr_str>:
{
   2f9e6:	b530      	push	{r4, r5, lr}
   2f9e8:	b089      	sub	sp, #36	; 0x24
   2f9ea:	460c      	mov	r4, r1
	if (bt_conn_get_info(conn, &info) < 0) {
   2f9ec:	a901      	add	r1, sp, #4
{
   2f9ee:	4615      	mov	r5, r2
	if (bt_conn_get_info(conn, &info) < 0) {
   2f9f0:	f7eb fc6a 	bl	1b2c8 <bt_conn_get_info>
   2f9f4:	2800      	cmp	r0, #0
   2f9f6:	da03      	bge.n	2fa00 <conn_addr_str+0x1a>
		addr[0] = '\0';
   2f9f8:	2300      	movs	r3, #0
   2f9fa:	7023      	strb	r3, [r4, #0]
}
   2f9fc:	b009      	add	sp, #36	; 0x24
   2f9fe:	bd30      	pop	{r4, r5, pc}
	switch (info.type) {
   2fa00:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2fa04:	2b01      	cmp	r3, #1
   2fa06:	d1f9      	bne.n	2f9fc <conn_addr_str+0x16>
		bt_addr_le_to_str(info.le.dst, addr, len);
   2fa08:	9803      	ldr	r0, [sp, #12]
   2fa0a:	462a      	mov	r2, r5
   2fa0c:	4621      	mov	r1, r4
   2fa0e:	f7ef fb8b 	bl	1f128 <bt_addr_le_to_str>
		break;
   2fa12:	e7f3      	b.n	2f9fc <conn_addr_str+0x16>

0002fa14 <bt_gatt_foreach_attr>:
{
   2fa14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2fa16:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2fa1a:	2300      	movs	r3, #0
   2fa1c:	9300      	str	r3, [sp, #0]
   2fa1e:	461a      	mov	r2, r3
   2fa20:	f7ed fd9a 	bl	1d558 <bt_gatt_foreach_attr_type>
}
   2fa24:	b005      	add	sp, #20
   2fa26:	f85d fb04 	ldr.w	pc, [sp], #4

0002fa2a <fixed_data_unref>:
}
   2fa2a:	4770      	bx	lr

0002fa2c <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2fa2c:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2fa2e:	6849      	ldr	r1, [r1, #4]
   2fa30:	6809      	ldr	r1, [r1, #0]
   2fa32:	f7f1 b9c9 	b.w	20dc8 <net_buf_alloc_len>

0002fa36 <net_buf_simple_init_with_data>:
	buf->size  = size;
   2fa36:	b292      	uxth	r2, r2
	buf->__buf = data;
   2fa38:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2fa3a:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2fa3c:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2fa3e:	8082      	strh	r2, [r0, #4]
}
   2fa40:	4770      	bx	lr

0002fa42 <net_buf_simple_pull_u8>:
{
   2fa42:	b510      	push	{r4, lr}
	val = buf->data[0];
   2fa44:	6803      	ldr	r3, [r0, #0]
   2fa46:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2fa48:	2101      	movs	r1, #1
   2fa4a:	f7f1 fc53 	bl	212f4 <net_buf_simple_pull>
}
   2fa4e:	4620      	mov	r0, r4
   2fa50:	bd10      	pop	{r4, pc}

0002fa52 <net_buf_simple_pull_le16>:
{
   2fa52:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2fa54:	6803      	ldr	r3, [r0, #0]
   2fa56:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2fa58:	2102      	movs	r1, #2
   2fa5a:	f7f1 fc4b 	bl	212f4 <net_buf_simple_pull>
}
   2fa5e:	4620      	mov	r0, r4
   2fa60:	bd10      	pop	{r4, pc}

0002fa62 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2fa62:	6802      	ldr	r2, [r0, #0]
   2fa64:	6880      	ldr	r0, [r0, #8]
}
   2fa66:	1a10      	subs	r0, r2, r0
   2fa68:	4770      	bx	lr

0002fa6a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2fa6a:	8883      	ldrh	r3, [r0, #4]
   2fa6c:	88c2      	ldrh	r2, [r0, #6]
   2fa6e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2fa70:	6803      	ldr	r3, [r0, #0]
   2fa72:	6880      	ldr	r0, [r0, #8]
   2fa74:	1a18      	subs	r0, r3, r0
}
   2fa76:	1a10      	subs	r0, r2, r0
   2fa78:	4770      	bx	lr

0002fa7a <net_buf_simple_add_mem>:
{
   2fa7a:	b538      	push	{r3, r4, r5, lr}
   2fa7c:	460d      	mov	r5, r1
   2fa7e:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2fa80:	4611      	mov	r1, r2
   2fa82:	f7f1 fc79 	bl	21378 <net_buf_simple_add>
   2fa86:	4622      	mov	r2, r4
   2fa88:	4629      	mov	r1, r5
}
   2fa8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2fa8e:	f000 bda4 	b.w	305da <memcpy>

0002fa92 <net_buf_simple_add_le16>:
{
   2fa92:	b510      	push	{r4, lr}
   2fa94:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2fa96:	2102      	movs	r1, #2
   2fa98:	f7f1 fc6e 	bl	21378 <net_buf_simple_add>
	dst[0] = val;
   2fa9c:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2fa9e:	0a24      	lsrs	r4, r4, #8
   2faa0:	7044      	strb	r4, [r0, #1]
}
   2faa2:	bd10      	pop	{r4, pc}

0002faa4 <set_starting_state>:
{
   2faa4:	b510      	push	{r4, lr}
	__asm__ volatile(
   2faa6:	f04f 0340 	mov.w	r3, #64	; 0x40
   2faaa:	f3ef 8211 	mrs	r2, BASEPRI
   2faae:	f383 8812 	msr	BASEPRI_MAX, r3
   2fab2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2fab6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2fab8:	f003 0407 	and.w	r4, r3, #7
   2fabc:	2c01      	cmp	r4, #1
   2fabe:	d106      	bne.n	2face <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2fac0:	6001      	str	r1, [r0, #0]
	int err = 0;
   2fac2:	2000      	movs	r0, #0
	__asm__ volatile(
   2fac4:	f382 8811 	msr	BASEPRI, r2
   2fac8:	f3bf 8f6f 	isb	sy
}
   2facc:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2face:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2fad2:	428b      	cmp	r3, r1
		err = -EALREADY;
   2fad4:	bf14      	ite	ne
   2fad6:	f04f 30ff 	movne.w	r0, #4294967295
   2fada:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   2fade:	e7f1      	b.n	2fac4 <set_starting_state+0x20>

0002fae0 <set_on_state>:
	__asm__ volatile(
   2fae0:	f04f 0340 	mov.w	r3, #64	; 0x40
   2fae4:	f3ef 8211 	mrs	r2, BASEPRI
   2fae8:	f383 8812 	msr	BASEPRI_MAX, r3
   2faec:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2faf0:	6803      	ldr	r3, [r0, #0]
   2faf2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2faf6:	f043 0302 	orr.w	r3, r3, #2
   2fafa:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2fafc:	f382 8811 	msr	BASEPRI, r2
   2fb00:	f3bf 8f6f 	isb	sy
}
   2fb04:	4770      	bx	lr

0002fb06 <onoff_started_callback>:
	return &data->mgr[type];
   2fb06:	6900      	ldr	r0, [r0, #16]
   2fb08:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2fb0a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2fb0e:	2100      	movs	r1, #0
   2fb10:	4710      	bx	r2

0002fb12 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2fb12:	2000      	movs	r0, #0
   2fb14:	f7f3 bfc0 	b.w	23a98 <nrfx_clock_start>

0002fb18 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2fb18:	2000      	movs	r0, #0
   2fb1a:	f7f3 bfe7 	b.w	23aec <nrfx_clock_stop>

0002fb1e <api_stop>:
	return stop(dev, subsys, CTX_API);
   2fb1e:	2280      	movs	r2, #128	; 0x80
   2fb20:	f7f1 bcee 	b.w	21500 <stop>

0002fb24 <blocking_start_callback>:
{
   2fb24:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2fb26:	f7f6 b967 	b.w	25df8 <z_impl_k_sem_give>

0002fb2a <api_start>:
{
   2fb2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2fb2e:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   2fb30:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2fb32:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   2fb34:	434c      	muls	r4, r1
{
   2fb36:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2fb38:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2fb3c:	2180      	movs	r1, #128	; 0x80
   2fb3e:	4428      	add	r0, r5
{
   2fb40:	4690      	mov	r8, r2
   2fb42:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   2fb44:	f7ff ffae 	bl	2faa4 <set_starting_state>
	if (err < 0) {
   2fb48:	2800      	cmp	r0, #0
   2fb4a:	db06      	blt.n	2fb5a <api_start+0x30>
	subdata->cb = cb;
   2fb4c:	4425      	add	r5, r4
	subdata->user_data = user_data;
   2fb4e:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2fb52:	6873      	ldr	r3, [r6, #4]
   2fb54:	591b      	ldr	r3, [r3, r4]
   2fb56:	4798      	blx	r3
	return 0;
   2fb58:	2000      	movs	r0, #0
}
   2fb5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002fb5e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2fb5e:	6843      	ldr	r3, [r0, #4]
   2fb60:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2fb62:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2fb66:	600b      	str	r3, [r1, #0]
}
   2fb68:	2000      	movs	r0, #0
   2fb6a:	4770      	bx	lr

0002fb6c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2fb6c:	6843      	ldr	r3, [r0, #4]
   2fb6e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2fb70:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2fb74:	4042      	eors	r2, r0
   2fb76:	400a      	ands	r2, r1
   2fb78:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2fb7a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2fb7e:	2000      	movs	r0, #0
   2fb80:	4770      	bx	lr

0002fb82 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2fb82:	6843      	ldr	r3, [r0, #4]
   2fb84:	685b      	ldr	r3, [r3, #4]
}
   2fb86:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2fb88:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2fb8c:	4770      	bx	lr

0002fb8e <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2fb8e:	6843      	ldr	r3, [r0, #4]
   2fb90:	685b      	ldr	r3, [r3, #4]
}
   2fb92:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2fb94:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2fb98:	4770      	bx	lr

0002fb9a <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2fb9a:	6843      	ldr	r3, [r0, #4]
   2fb9c:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2fb9e:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2fba2:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2fba4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2fba8:	2000      	movs	r0, #0
   2fbaa:	4770      	bx	lr

0002fbac <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   2fbac:	6843      	ldr	r3, [r0, #4]
   2fbae:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   2fbb0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2fbb4:	05d1      	lsls	r1, r2, #23
{
   2fbb6:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2fbb8:	d518      	bpl.n	2fbec <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fbba:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2fbbe:	b1aa      	cbz	r2, 2fbec <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   2fbc0:	f04f 0140 	mov.w	r1, #64	; 0x40
   2fbc4:	f3ef 8211 	mrs	r2, BASEPRI
   2fbc8:	f381 8812 	msr	BASEPRI_MAX, r1
   2fbcc:	f3bf 8f6f 	isb	sy
   2fbd0:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2fbd4:	b131      	cbz	r1, 2fbe4 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fbd6:	2100      	movs	r1, #0
   2fbd8:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2fbdc:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fbe0:	2101      	movs	r1, #1
   2fbe2:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2fbe4:	f382 8811 	msr	BASEPRI, r2
   2fbe8:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2fbec:	6842      	ldr	r2, [r0, #4]
   2fbee:	6852      	ldr	r2, [r2, #4]
   2fbf0:	06d2      	lsls	r2, r2, #27
   2fbf2:	d51a      	bpl.n	2fc2a <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   2fbf4:	f04f 0240 	mov.w	r2, #64	; 0x40
   2fbf8:	f3ef 8111 	mrs	r1, BASEPRI
   2fbfc:	f382 8812 	msr	BASEPRI_MAX, r2
   2fc00:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fc04:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2fc08:	b112      	cbz	r2, 2fc10 <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2fc0a:	2200      	movs	r2, #0
   2fc0c:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2fc10:	6902      	ldr	r2, [r0, #16]
   2fc12:	68d2      	ldr	r2, [r2, #12]
   2fc14:	b10a      	cbz	r2, 2fc1a <uarte_nrfx_isr_int+0x6e>
   2fc16:	6912      	ldr	r2, [r2, #16]
   2fc18:	b91a      	cbnz	r2, 2fc22 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   2fc1a:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2fc1e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   2fc22:	f381 8811 	msr	BASEPRI, r1
   2fc26:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   2fc2a:	6902      	ldr	r2, [r0, #16]
   2fc2c:	68d2      	ldr	r2, [r2, #12]
   2fc2e:	b15a      	cbz	r2, 2fc48 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fc30:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2fc34:	b151      	cbz	r1, 2fc4c <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
   2fc36:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   2fc38:	2100      	movs	r1, #0
   2fc3a:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   2fc3c:	b134      	cbz	r4, 2fc4c <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   2fc3e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2fc42:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2fc46:	7391      	strb	r1, [r2, #14]
}
   2fc48:	bc10      	pop	{r4}
   2fc4a:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fc4c:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2fc50:	b121      	cbz	r1, 2fc5c <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fc52:	2100      	movs	r1, #0
   2fc54:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2fc58:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2fc5c:	6813      	ldr	r3, [r2, #0]
   2fc5e:	2b00      	cmp	r3, #0
   2fc60:	d0f2      	beq.n	2fc48 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2fc62:	6851      	ldr	r1, [r2, #4]
}
   2fc64:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2fc66:	4718      	bx	r3

0002fc68 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2fc68:	6902      	ldr	r2, [r0, #16]
{
   2fc6a:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2fc6c:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2fc70:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2fc74:	2000      	movs	r0, #0
   2fc76:	4770      	bx	lr

0002fc78 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2fc78:	6843      	ldr	r3, [r0, #4]
   2fc7a:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2fc7c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2fc80:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2fc84:	4770      	bx	lr

0002fc86 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2fc86:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2fc88:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fc8a:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2fc8e:	b940      	cbnz	r0, 2fca2 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2fc90:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2fc92:	0792      	lsls	r2, r2, #30
   2fc94:	d406      	bmi.n	2fca4 <is_tx_ready+0x1e>
   2fc96:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   2fc9a:	3800      	subs	r0, #0
   2fc9c:	bf18      	it	ne
   2fc9e:	2001      	movne	r0, #1
   2fca0:	4770      	bx	lr
   2fca2:	2001      	movs	r0, #1
}
   2fca4:	4770      	bx	lr

0002fca6 <user_callback>:
	if (data->async->user_callback) {
   2fca6:	6903      	ldr	r3, [r0, #16]
   2fca8:	691a      	ldr	r2, [r3, #16]
   2fcaa:	6813      	ldr	r3, [r2, #0]
   2fcac:	b10b      	cbz	r3, 2fcb2 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2fcae:	6852      	ldr	r2, [r2, #4]
   2fcb0:	4718      	bx	r3
}
   2fcb2:	4770      	bx	lr

0002fcb4 <notify_uart_rx_rdy>:
{
   2fcb4:	b570      	push	{r4, r5, r6, lr}
   2fcb6:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2fcb8:	6906      	ldr	r6, [r0, #16]
{
   2fcba:	4604      	mov	r4, r0
   2fcbc:	460d      	mov	r5, r1
	struct uart_event evt = {
   2fcbe:	2214      	movs	r2, #20
   2fcc0:	2100      	movs	r1, #0
   2fcc2:	a801      	add	r0, sp, #4
   2fcc4:	f000 fcb1 	bl	3062a <memset>
   2fcc8:	2302      	movs	r3, #2
   2fcca:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2fcce:	6933      	ldr	r3, [r6, #16]
	struct uart_event evt = {
   2fcd0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   2fcd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2fcd4:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2fcd6:	a901      	add	r1, sp, #4
   2fcd8:	4620      	mov	r0, r4
	struct uart_event evt = {
   2fcda:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   2fcde:	f7ff ffe2 	bl	2fca6 <user_callback>
}
   2fce2:	b006      	add	sp, #24
   2fce4:	bd70      	pop	{r4, r5, r6, pc}

0002fce6 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   2fce6:	6843      	ldr	r3, [r0, #4]
{
   2fce8:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   2fcea:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2fcec:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   2fcee:	f04f 0040 	mov.w	r0, #64	; 0x40
   2fcf2:	f3ef 8511 	mrs	r5, BASEPRI
   2fcf6:	f380 8812 	msr	BASEPRI_MAX, r0
   2fcfa:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2fcfe:	6924      	ldr	r4, [r4, #16]
   2fd00:	6e20      	ldr	r0, [r4, #96]	; 0x60
   2fd02:	b190      	cbz	r0, 2fd2a <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   2fd04:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   2fd06:	b998      	cbnz	r0, 2fd30 <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   2fd08:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2fd0c:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2fd10:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2fd14:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2fd18:	f042 0220 	orr.w	r2, r2, #32
   2fd1c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2fd20:	f385 8811 	msr	BASEPRI, r5
   2fd24:	f3bf 8f6f 	isb	sy
}
   2fd28:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   2fd2a:	f06f 000c 	mvn.w	r0, #12
   2fd2e:	e7f7      	b.n	2fd20 <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   2fd30:	f06f 000f 	mvn.w	r0, #15
   2fd34:	e7f4      	b.n	2fd20 <uarte_nrfx_rx_buf_rsp+0x3a>

0002fd36 <uarte_nrfx_callback_set>:
	if (!data->async) {
   2fd36:	6903      	ldr	r3, [r0, #16]
   2fd38:	691b      	ldr	r3, [r3, #16]
   2fd3a:	b11b      	cbz	r3, 2fd44 <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
   2fd3c:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   2fd40:	2000      	movs	r0, #0
   2fd42:	4770      	bx	lr
		return -ENOTSUP;
   2fd44:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2fd48:	4770      	bx	lr

0002fd4a <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2fd4a:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2fd4c:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2fd4e:	6910      	ldr	r0, [r2, #16]
	return config->uarte_regs;
   2fd50:	681b      	ldr	r3, [r3, #0]
{
   2fd52:	b510      	push	{r4, lr}
	if (data->async) {
   2fd54:	b958      	cbnz	r0, 2fd6e <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fd56:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2fd5a:	b15c      	cbz	r4, 2fd74 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   2fd5c:	7e52      	ldrb	r2, [r2, #25]
   2fd5e:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fd60:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2fd64:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fd68:	2201      	movs	r2, #1
   2fd6a:	601a      	str	r2, [r3, #0]
}
   2fd6c:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2fd6e:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2fd72:	e7fb      	b.n	2fd6c <uarte_nrfx_poll_in+0x22>
		return -1;
   2fd74:	f04f 30ff 	mov.w	r0, #4294967295
   2fd78:	e7f8      	b.n	2fd6c <uarte_nrfx_poll_in+0x22>

0002fd7a <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2fd7a:	2a00      	cmp	r2, #0
{
   2fd7c:	b510      	push	{r4, lr}
   2fd7e:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2fd80:	dd0f      	ble.n	2fda2 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   2fd82:	6843      	ldr	r3, [r0, #4]
   2fd84:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fd86:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2fd8a:	b148      	cbz	r0, 2fda0 <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2fd8c:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2fd8e:	2000      	movs	r0, #0
   2fd90:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2fd94:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2fd98:	7e52      	ldrb	r2, [r2, #25]
   2fd9a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2fd9c:	2001      	movs	r0, #1
   2fd9e:	6018      	str	r0, [r3, #0]
}
   2fda0:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2fda2:	2000      	movs	r0, #0
   2fda4:	e7fc      	b.n	2fda0 <uarte_nrfx_fifo_read+0x26>

0002fda6 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2fda6:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2fda8:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   2fdaa:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2fdac:	f04f 0040 	mov.w	r0, #64	; 0x40
   2fdb0:	f3ef 8311 	mrs	r3, BASEPRI
   2fdb4:	f380 8812 	msr	BASEPRI_MAX, r0
   2fdb8:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2fdbc:	68c9      	ldr	r1, [r1, #12]
   2fdbe:	2000      	movs	r0, #0
   2fdc0:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2fdc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2fdc6:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2fdca:	f383 8811 	msr	BASEPRI, r3
   2fdce:	f3bf 8f6f 	isb	sy
}
   2fdd2:	4770      	bx	lr

0002fdd4 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2fdd4:	6903      	ldr	r3, [r0, #16]
   2fdd6:	68db      	ldr	r3, [r3, #12]
   2fdd8:	2201      	movs	r2, #1
   2fdda:	739a      	strb	r2, [r3, #14]
}
   2fddc:	4770      	bx	lr

0002fdde <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   2fdde:	6903      	ldr	r3, [r0, #16]
   2fde0:	68db      	ldr	r3, [r3, #12]
   2fde2:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2fde4:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2fde8:	b962      	cbnz	r2, 2fe04 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   2fdea:	6842      	ldr	r2, [r0, #4]
   2fdec:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fdee:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2fdf2:	b140      	cbz	r0, 2fe06 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2fdf4:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   2fdf8:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2fdfc:	d003      	beq.n	2fe06 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   2fdfe:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2fe00:	2001      	movs	r0, #1
   2fe02:	4770      	bx	lr
   2fe04:	2000      	movs	r0, #0
}
   2fe06:	4770      	bx	lr

0002fe08 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2fe08:	6843      	ldr	r3, [r0, #4]
   2fe0a:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2fe0c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2fe10:	3800      	subs	r0, #0
   2fe12:	bf18      	it	ne
   2fe14:	2001      	movne	r0, #1
   2fe16:	4770      	bx	lr

0002fe18 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   2fe18:	6843      	ldr	r3, [r0, #4]
   2fe1a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2fe1c:	2210      	movs	r2, #16
   2fe1e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2fe22:	4770      	bx	lr

0002fe24 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2fe24:	6843      	ldr	r3, [r0, #4]
   2fe26:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2fe28:	2210      	movs	r2, #16
   2fe2a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2fe2e:	4770      	bx	lr

0002fe30 <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   2fe30:	6843      	ldr	r3, [r0, #4]
   2fe32:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2fe34:	f44f 7200 	mov.w	r2, #512	; 0x200
   2fe38:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2fe3c:	4770      	bx	lr

0002fe3e <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   2fe3e:	6843      	ldr	r3, [r0, #4]
   2fe40:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2fe42:	f44f 7200 	mov.w	r2, #512	; 0x200
   2fe46:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2fe4a:	4770      	bx	lr

0002fe4c <uarte_nrfx_irq_update>:
}
   2fe4c:	2001      	movs	r0, #1
   2fe4e:	4770      	bx	lr

0002fe50 <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2fe50:	6903      	ldr	r3, [r0, #16]
   2fe52:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2fe54:	e9c3 1200 	strd	r1, r2, [r3]
}
   2fe58:	4770      	bx	lr

0002fe5a <rx_timeout>:
{
   2fe5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   2fe5c:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2fe5e:	6933      	ldr	r3, [r6, #16]
   2fe60:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
   2fe64:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   2fe68:	bb42      	cbnz	r2, 2febc <rx_timeout+0x62>
	const struct device *dev = data->dev;
   2fe6a:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
   2fe6c:	686a      	ldr	r2, [r5, #4]
   2fe6e:	6812      	ldr	r2, [r2, #0]
   2fe70:	2110      	movs	r1, #16
   2fe72:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2fe76:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
   2fe7a:	6f59      	ldr	r1, [r3, #116]	; 0x74
   2fe7c:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2fe7e:	bf1e      	ittt	ne
   2fe80:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
   2fe82:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
   2fe84:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
   2fe88:	e9d3 421d 	ldrd	r4, r2, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
   2fe8c:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2fe8e:	bf48      	it	mi
   2fe90:	f8c3 20c0 	strmi.w	r2, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2fe94:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
		len = 0;
   2fe98:	bf48      	it	mi
   2fe9a:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2fe9c:	18a0      	adds	r0, r4, r2
   2fe9e:	4288      	cmp	r0, r1
   2fea0:	d90d      	bls.n	2febe <rx_timeout+0x64>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2fea2:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   2fea4:	2c00      	cmp	r4, #0
   2fea6:	dd04      	ble.n	2feb2 <rx_timeout+0x58>
		clipped = true;
   2fea8:	2701      	movs	r7, #1
   2feaa:	e00e      	b.n	2feca <rx_timeout+0x70>
			data->async->rx_timeout_left -=
   2feac:	1a52      	subs	r2, r2, r1
   2feae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
   2feb2:	686b      	ldr	r3, [r5, #4]
   2feb4:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2feb6:	2210      	movs	r2, #16
   2feb8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2febc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   2febe:	2c00      	cmp	r4, #0
   2fec0:	d0f7      	beq.n	2feb2 <rx_timeout+0x58>
				< data->async->rx_timeout_slab)) {
   2fec2:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
   2fec6:	428a      	cmp	r2, r1
   2fec8:	daf0      	bge.n	2feac <rx_timeout+0x52>
			notify_uart_rx_rdy(dev, len);
   2feca:	4621      	mov	r1, r4
   2fecc:	4628      	mov	r0, r5
   2fece:	f7ff fef1 	bl	2fcb4 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2fed2:	6930      	ldr	r0, [r6, #16]
   2fed4:	6e83      	ldr	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   2fed6:	6f81      	ldr	r1, [r0, #120]	; 0x78
			data->async->rx_offset += len;
   2fed8:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   2feda:	4421      	add	r1, r4
			data->async->rx_offset += len;
   2fedc:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   2fede:	6781      	str	r1, [r0, #120]	; 0x78
		if (clipped) {
   2fee0:	2f00      	cmp	r7, #0
   2fee2:	d0e6      	beq.n	2feb2 <rx_timeout+0x58>
	z_impl_k_timer_stop(timer);
   2fee4:	3088      	adds	r0, #136	; 0x88
   2fee6:	f000 faf4 	bl	304d2 <z_impl_k_timer_stop>
}
   2feea:	e7e2      	b.n	2feb2 <rx_timeout+0x58>

0002feec <uarte_nrfx_irq_is_pending>:
{
   2feec:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2feee:	6843      	ldr	r3, [r0, #4]
   2fef0:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2fef2:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2fef6:	025b      	lsls	r3, r3, #9
{
   2fef8:	4604      	mov	r4, r0
		||
   2fefa:	d405      	bmi.n	2ff08 <uarte_nrfx_irq_is_pending+0x1c>
   2fefc:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2ff00:	f010 0010 	ands.w	r0, r0, #16
   2ff04:	d106      	bne.n	2ff14 <uarte_nrfx_irq_is_pending+0x28>
}
   2ff06:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2ff08:	f7ff ff69 	bl	2fdde <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2ff0c:	2800      	cmp	r0, #0
   2ff0e:	d0f5      	beq.n	2fefc <uarte_nrfx_irq_is_pending+0x10>
		||
   2ff10:	2001      	movs	r0, #1
   2ff12:	e7f8      	b.n	2ff06 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2ff14:	4620      	mov	r0, r4
   2ff16:	f7ff ff77 	bl	2fe08 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2ff1a:	3800      	subs	r0, #0
   2ff1c:	bf18      	it	ne
   2ff1e:	2001      	movne	r0, #1
   2ff20:	e7f1      	b.n	2ff06 <uarte_nrfx_irq_is_pending+0x1a>

0002ff22 <uarte_nrfx_tx_abort>:
{
   2ff22:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2ff24:	6843      	ldr	r3, [r0, #4]
   2ff26:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
   2ff28:	6903      	ldr	r3, [r0, #16]
   2ff2a:	6918      	ldr	r0, [r3, #16]
   2ff2c:	6883      	ldr	r3, [r0, #8]
   2ff2e:	b14b      	cbz	r3, 2ff44 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
   2ff30:	2400      	movs	r4, #0
   2ff32:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
   2ff36:	3028      	adds	r0, #40	; 0x28
   2ff38:	f000 facb 	bl	304d2 <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ff3c:	2301      	movs	r3, #1
   2ff3e:	60eb      	str	r3, [r5, #12]
	return 0;
   2ff40:	4620      	mov	r0, r4
}
   2ff42:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2ff44:	f06f 000d 	mvn.w	r0, #13
   2ff48:	e7fb      	b.n	2ff42 <uarte_nrfx_tx_abort+0x20>

0002ff4a <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2ff4a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2ff4c:	6818      	ldr	r0, [r3, #0]
   2ff4e:	f7ff bfe8 	b.w	2ff22 <uarte_nrfx_tx_abort>

0002ff52 <uarte_nrfx_rx_disable>:
{
   2ff52:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2ff54:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2ff56:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   2ff58:	6928      	ldr	r0, [r5, #16]
	return config->uarte_regs;
   2ff5a:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2ff5c:	6e03      	ldr	r3, [r0, #96]	; 0x60
   2ff5e:	b1b3      	cbz	r3, 2ff8e <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   2ff60:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   2ff62:	b153      	cbz	r3, 2ff7a <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2ff64:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2ff68:	f023 0320 	bic.w	r3, r3, #32
   2ff6c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ff70:	2300      	movs	r3, #0
   2ff72:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2ff76:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   2ff7a:	3088      	adds	r0, #136	; 0x88
   2ff7c:	f000 faa9 	bl	304d2 <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2ff80:	692b      	ldr	r3, [r5, #16]
   2ff82:	2000      	movs	r0, #0
   2ff84:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ff88:	2301      	movs	r3, #1
   2ff8a:	6063      	str	r3, [r4, #4]
}
   2ff8c:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2ff8e:	f06f 000d 	mvn.w	r0, #13
   2ff92:	e7fb      	b.n	2ff8c <uarte_nrfx_rx_disable+0x3a>

0002ff94 <tx_start>:
{
   2ff94:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2ff96:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2ff98:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2ff9a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2ff9e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2ffa2:	2200      	movs	r2, #0
   2ffa4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2ffa8:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2ffac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2ffb0:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2ffb4:	6862      	ldr	r2, [r4, #4]
   2ffb6:	06d2      	lsls	r2, r2, #27
   2ffb8:	d50f      	bpl.n	2ffda <tx_start+0x46>
	if (data->async) {
   2ffba:	6902      	ldr	r2, [r0, #16]
   2ffbc:	6912      	ldr	r2, [r2, #16]
   2ffbe:	b12a      	cbz	r2, 2ffcc <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2ffc0:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
   2ffc4:	f041 0101 	orr.w	r1, r1, #1
   2ffc8:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2ffcc:	2208      	movs	r2, #8
   2ffce:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2ffd2:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2ffd6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2ffda:	2201      	movs	r2, #1
   2ffdc:	609a      	str	r2, [r3, #8]
}
   2ffde:	bd10      	pop	{r4, pc}

0002ffe0 <uarte_nrfx_fifo_fill>:
{
   2ffe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2ffe2:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2ffe4:	68f3      	ldr	r3, [r6, #12]
   2ffe6:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2ffe8:	f3bf 8f5b 	dmb	ish
   2ffec:	4294      	cmp	r4, r2
   2ffee:	bfa8      	it	ge
   2fff0:	4614      	movge	r4, r2
{
   2fff2:	4605      	mov	r5, r0
   2fff4:	3310      	adds	r3, #16
   2fff6:	2201      	movs	r2, #1
   2fff8:	e853 0f00 	ldrex	r0, [r3]
   2fffc:	2800      	cmp	r0, #0
   2fffe:	d103      	bne.n	30008 <uarte_nrfx_fifo_fill+0x28>
   30000:	e843 2700 	strex	r7, r2, [r3]
   30004:	2f00      	cmp	r7, #0
   30006:	d1f7      	bne.n	2fff8 <uarte_nrfx_fifo_fill+0x18>
   30008:	f3bf 8f5b 	dmb	ish
   3000c:	bf0c      	ite	eq
   3000e:	4613      	moveq	r3, r2
   30010:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   30012:	d01d      	beq.n	30050 <uarte_nrfx_fifo_fill+0x70>
		return 0;
   30014:	461c      	mov	r4, r3
}
   30016:	4620      	mov	r0, r4
   30018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   3001a:	68f2      	ldr	r2, [r6, #12]
   3001c:	5cc8      	ldrb	r0, [r1, r3]
   3001e:	6892      	ldr	r2, [r2, #8]
   30020:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   30022:	3301      	adds	r3, #1
   30024:	42a3      	cmp	r3, r4
   30026:	dbf8      	blt.n	3001a <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   30028:	f04f 0340 	mov.w	r3, #64	; 0x40
   3002c:	f3ef 8711 	mrs	r7, BASEPRI
   30030:	f383 8812 	msr	BASEPRI_MAX, r3
   30034:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   30038:	4628      	mov	r0, r5
   3003a:	f7ff fe24 	bl	2fc86 <is_tx_ready>
   3003e:	68f3      	ldr	r3, [r6, #12]
   30040:	b940      	cbnz	r0, 30054 <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   30042:	6118      	str	r0, [r3, #16]
		len = 0;
   30044:	4604      	mov	r4, r0
	__asm__ volatile(
   30046:	f387 8811 	msr	BASEPRI, r7
   3004a:	f3bf 8f6f 	isb	sy
	return len;
   3004e:	e7e2      	b.n	30016 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   30050:	2300      	movs	r3, #0
   30052:	e7e7      	b.n	30024 <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   30054:	6899      	ldr	r1, [r3, #8]
   30056:	4622      	mov	r2, r4
   30058:	4628      	mov	r0, r5
   3005a:	f7ff ff9b 	bl	2ff94 <tx_start>
   3005e:	e7f2      	b.n	30046 <uarte_nrfx_fifo_fill+0x66>

00030060 <entropy_cc3xx_rng_init>:
		int ret = 0;

		/* When the given context is NULL, a global internal
		 * ctr_drbg context is being used.
		 */
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   30060:	2200      	movs	r2, #0
{
   30062:	b508      	push	{r3, lr}
		ret = nrf_cc3xx_platform_ctr_drbg_init(NULL, NULL, 0);
   30064:	4611      	mov	r1, r2
   30066:	4610      	mov	r0, r2
   30068:	f7f9 f8f2 	bl	29250 <nrf_cc3xx_platform_ctr_drbg_init>
		if (ret != 0) {
   3006c:	2800      	cmp	r0, #0
			return -EINVAL;
		}
	#endif

	return 0;
}
   3006e:	bf18      	it	ne
   30070:	f06f 0015 	mvnne.w	r0, #21
   30074:	bd08      	pop	{r3, pc}

00030076 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   30076:	4770      	bx	lr

00030078 <sys_clock_cycle_get_32>:
{
   30078:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   3007a:	f7f2 fce7 	bl	22a4c <z_nrf_rtc_timer_read>
}
   3007e:	bd08      	pop	{r3, pc}

00030080 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   30080:	4668      	mov	r0, sp
   30082:	f020 0107 	bic.w	r1, r0, #7
   30086:	468d      	mov	sp, r1
   30088:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   3008a:	f7d3 fca1 	bl	39d0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   3008e:	f7e6 ffe5 	bl	1705c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   30092:	f7e7 f8e5 	bl	17260 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   30096:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   3009a:	4685      	mov	sp, r0
   3009c:	4770      	bx	lr

0003009e <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   3009e:	4668      	mov	r0, sp
   300a0:	f020 0107 	bic.w	r1, r0, #7
   300a4:	468d      	mov	sp, r1
   300a6:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   300a8:	f7d3 fc14 	bl	38d4 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   300ac:	f7e6 ffd6 	bl	1705c <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   300b0:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   300b4:	4685      	mov	sp, r0
   300b6:	4770      	bx	lr

000300b8 <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   300b8:	4668      	mov	r0, sp
   300ba:	f020 0107 	bic.w	r1, r0, #7
   300be:	468d      	mov	sp, r1
   300c0:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   300c2:	f7dd f9ac 	bl	d41e <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   300c6:	f7e6 ffc9 	bl	1705c <_arch_isr_direct_pm>
   300ca:	f7e7 f8c9 	bl	17260 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   300ce:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   300d2:	4685      	mov	sp, r0
   300d4:	4770      	bx	lr

000300d6 <nrfx_clock_enable>:
}
   300d6:	4770      	bx	lr

000300d8 <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   300d8:	f7d4 b8b0 	b.w	423c <MPSL_IRQ_CLOCK_Handler>

000300dc <hw_cc3xx_init_internal>:

	int res;

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
   300dc:	f7f9 b85c 	b.w	29198 <nrf_cc3xx_platform_init>

000300e0 <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
   300e0:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
   300e2:	f7e6 fe25 	bl	16d30 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
   300e6:	f7e6 fed7 	bl	16e98 <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
   300ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init();
   300ee:	f7f9 b853 	b.w	29198 <nrf_cc3xx_platform_init>

000300f2 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   300f2:	4700      	bx	r0

000300f4 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   300f4:	f000 b9b4 	b.w	30460 <z_impl_k_busy_wait>

000300f8 <nrf_gpio_pin_present_check>:
    switch (port)
   300f8:	0943      	lsrs	r3, r0, #5
   300fa:	d00b      	beq.n	30114 <nrf_gpio_pin_present_check+0x1c>
   300fc:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   300fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
   30102:	bf18      	it	ne
   30104:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   30106:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   3010a:	fa23 f000 	lsr.w	r0, r3, r0
}
   3010e:	f000 0001 	and.w	r0, r0, #1
   30112:	4770      	bx	lr
    switch (port)
   30114:	f04f 33ff 	mov.w	r3, #4294967295
   30118:	e7f5      	b.n	30106 <nrf_gpio_pin_present_check+0xe>

0003011a <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   3011a:	0080      	lsls	r0, r0, #2
}
   3011c:	f500 7080 	add.w	r0, r0, #256	; 0x100
   30120:	4770      	bx	lr

00030122 <nrf_gpio_reconfigure>:
{
   30122:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   30126:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30128:	a801      	add	r0, sp, #4
{
   3012a:	460e      	mov	r6, r1
   3012c:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   30130:	4690      	mov	r8, r2
   30132:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   30134:	f7f3 fef6 	bl	23f24 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   30138:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3013a:	f1b8 0f00 	cmp.w	r8, #0
   3013e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   30142:	bf14      	ite	ne
   30144:	2302      	movne	r3, #2
   30146:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   30148:	2e00      	cmp	r6, #0
   3014a:	bf18      	it	ne
   3014c:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   30150:	2d00      	cmp	r5, #0
   30152:	bf14      	ite	ne
   30154:	210c      	movne	r1, #12
   30156:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   30158:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   3015a:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   3015e:	bf14      	ite	ne
   30160:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   30164:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   30166:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   30168:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   3016c:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   30170:	bf14      	ite	ne
   30172:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   30176:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   30178:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   3017a:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   3017e:	b106      	cbz	r6, 30182 <nrf_gpio_reconfigure+0x60>
   30180:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   30182:	f1b8 0f00 	cmp.w	r8, #0
   30186:	d003      	beq.n	30190 <nrf_gpio_reconfigure+0x6e>
   30188:	f898 8000 	ldrb.w	r8, [r8]
   3018c:	ea4f 0848 	mov.w	r8, r8, lsl #1
   30190:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   30192:	b10d      	cbz	r5, 30198 <nrf_gpio_reconfigure+0x76>
   30194:	782d      	ldrb	r5, [r5, #0]
   30196:	00ad      	lsls	r5, r5, #2
   30198:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   3019c:	b10c      	cbz	r4, 301a2 <nrf_gpio_reconfigure+0x80>
   3019e:	7822      	ldrb	r2, [r4, #0]
   301a0:	0214      	lsls	r4, r2, #8
   301a2:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   301a4:	b10f      	cbz	r7, 301aa <nrf_gpio_reconfigure+0x88>
   301a6:	783f      	ldrb	r7, [r7, #0]
   301a8:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   301aa:	432c      	orrs	r4, r5
   301ac:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   301ae:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   301b2:	b002      	add	sp, #8
   301b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000301b8 <nrf_gpio_cfg_sense_set>:
{
   301b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   301ba:	f10d 030f 	add.w	r3, sp, #15
   301be:	9301      	str	r3, [sp, #4]
   301c0:	2300      	movs	r3, #0
{
   301c2:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   301c6:	9300      	str	r3, [sp, #0]
   301c8:	461a      	mov	r2, r3
   301ca:	4619      	mov	r1, r3
   301cc:	f7ff ffa9 	bl	30122 <nrf_gpio_reconfigure>
}
   301d0:	b005      	add	sp, #20
   301d2:	f85d fb04 	ldr.w	pc, [sp], #4

000301d6 <z_device_state_init>:
}
   301d6:	4770      	bx	lr

000301d8 <z_device_ready>:
	if (dev == NULL) {
   301d8:	b138      	cbz	r0, 301ea <z_device_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
   301da:	68c3      	ldr	r3, [r0, #12]
   301dc:	8818      	ldrh	r0, [r3, #0]
   301de:	f3c0 0008 	ubfx	r0, r0, #0, #9
   301e2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   301e6:	4258      	negs	r0, r3
   301e8:	4158      	adcs	r0, r3
}
   301ea:	4770      	bx	lr

000301ec <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
   301ec:	6940      	ldr	r0, [r0, #20]
{
   301ee:	b470      	push	{r4, r5, r6}
   301f0:	4613      	mov	r3, r2
   301f2:	460d      	mov	r5, r1
	if (rv != NULL) {
   301f4:	b960      	cbnz	r0, 30210 <device_required_foreach+0x24>
	size_t handle_count = 0;
   301f6:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
   301f8:	462a      	mov	r2, r5
}
   301fa:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
   301fc:	f7f4 b9e2 	b.w	245c4 <device_visitor>
			++i;
   30200:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   30202:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
   30206:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   30208:	b2a4      	uxth	r4, r4
   3020a:	4294      	cmp	r4, r2
   3020c:	d9f8      	bls.n	30200 <device_required_foreach+0x14>
   3020e:	e7f3      	b.n	301f8 <device_required_foreach+0xc>
		size_t i = 0;
   30210:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   30212:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   30216:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   3021a:	e7f2      	b.n	30202 <device_required_foreach+0x16>

0003021c <k_heap_init>:
{
   3021c:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   3021e:	f100 040c 	add.w	r4, r0, #12
   30222:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   30226:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   30228:	f7e1 bc22 	b.w	11a70 <sys_heap_init>

0003022c <k_mem_slab_init>:
{
   3022c:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   3022e:	2400      	movs	r4, #0
   30230:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   30232:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   30234:	ea41 0402 	orr.w	r4, r1, r2
   30238:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   3023c:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   30240:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   30242:	d10c      	bne.n	3025e <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   30244:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   30246:	42a3      	cmp	r3, r4
   30248:	d103      	bne.n	30252 <k_mem_slab_init+0x26>
   3024a:	e9c0 0000 	strd	r0, r0, [r0]
}
   3024e:	2000      	movs	r0, #0
}
   30250:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   30252:	6985      	ldr	r5, [r0, #24]
   30254:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   30256:	3401      	adds	r4, #1
		slab->free_list = p;
   30258:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   3025a:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   3025c:	e7f3      	b.n	30246 <k_mem_slab_init+0x1a>
		return -EINVAL;
   3025e:	f06f 0015 	mvn.w	r0, #21
	return rc;
   30262:	e7f5      	b.n	30250 <k_mem_slab_init+0x24>

00030264 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   30264:	f3ef 8005 	mrs	r0, IPSR
}
   30268:	3800      	subs	r0, #0
   3026a:	bf18      	it	ne
   3026c:	2001      	movne	r0, #1
   3026e:	4770      	bx	lr

00030270 <k_thread_name_get>:
}
   30270:	3080      	adds	r0, #128	; 0x80
   30272:	4770      	bx	lr

00030274 <z_impl_k_thread_start>:
	z_sched_start(thread);
   30274:	f7f6 bf62 	b.w	2713c <z_sched_start>

00030278 <z_impl_k_thread_stack_space_get>:
{
   30278:	b510      	push	{r4, lr}
	size_t size = thread->stack_info.size;
   3027a:	e9d0 4229 	ldrd	r4, r2, [r0, #164]	; 0xa4
	size_t unused = 0;
   3027e:	2300      	movs	r3, #0
	for (size_t i = 0; i < size; i++) {
   30280:	4293      	cmp	r3, r2
   30282:	d102      	bne.n	3028a <z_impl_k_thread_stack_space_get+0x12>
	*unused_ptr = unused;
   30284:	600b      	str	r3, [r1, #0]
}
   30286:	2000      	movs	r0, #0
   30288:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   3028a:	5ce0      	ldrb	r0, [r4, r3]
   3028c:	28aa      	cmp	r0, #170	; 0xaa
   3028e:	d1f9      	bne.n	30284 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
   30290:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   30292:	e7f5      	b.n	30280 <z_impl_k_thread_stack_space_get+0x8>

00030294 <z_thread_mark_switched_out>:
	z_sched_usage_stop();
   30294:	f7f7 bde4 	b.w	27e60 <z_sched_usage_stop>

00030298 <k_thread_runtime_stats_get>:
{
   30298:	b510      	push	{r4, lr}
   3029a:	460c      	mov	r4, r1
	if ((thread == NULL) || (stats == NULL)) {
   3029c:	b150      	cbz	r0, 302b4 <k_thread_runtime_stats_get+0x1c>
   3029e:	b149      	cbz	r1, 302b4 <k_thread_runtime_stats_get+0x1c>
	*stats = (k_thread_runtime_stats_t) {};
   302a0:	2200      	movs	r2, #0
   302a2:	2300      	movs	r3, #0
   302a4:	e9c1 2300 	strd	r2, r3, [r1]
	stats->execution_cycles = z_sched_thread_usage(thread);
   302a8:	f7f7 fe4a 	bl	27f40 <z_sched_thread_usage>
   302ac:	e9c4 0100 	strd	r0, r1, [r4]
	return 0;
   302b0:	2000      	movs	r0, #0
}
   302b2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   302b4:	f06f 0015 	mvn.w	r0, #21
   302b8:	e7fb      	b.n	302b2 <k_thread_runtime_stats_get+0x1a>

000302ba <z_pm_save_idle_exit>:
{
   302ba:	b508      	push	{r3, lr}
	pm_system_resume();
   302bc:	f7e6 f9ac 	bl	16618 <pm_system_resume>
}
   302c0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   302c4:	f7ff bed7 	b.w	30076 <sys_clock_idle_exit>

000302c8 <z_impl_k_mutex_init>:
{
   302c8:	4603      	mov	r3, r0
	mutex->owner = NULL;
   302ca:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   302cc:	e9c3 0002 	strd	r0, r0, [r3, #8]
   302d0:	e9c3 3300 	strd	r3, r3, [r3]
}
   302d4:	4770      	bx	lr

000302d6 <z_queue_node_peek>:
{
   302d6:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   302d8:	4604      	mov	r4, r0
   302da:	b130      	cbz	r0, 302ea <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   302dc:	6802      	ldr	r2, [r0, #0]
   302de:	0793      	lsls	r3, r2, #30
   302e0:	d003      	beq.n	302ea <z_queue_node_peek+0x14>
		ret = anode->data;
   302e2:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   302e4:	b109      	cbz	r1, 302ea <z_queue_node_peek+0x14>
			k_free(anode);
   302e6:	f000 f961 	bl	305ac <k_free>
}
   302ea:	4620      	mov	r0, r4
   302ec:	bd10      	pop	{r4, pc}

000302ee <z_impl_k_queue_init>:
	list->head = NULL;
   302ee:	2300      	movs	r3, #0
	list->tail = NULL;
   302f0:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   302f4:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   302f6:	f100 030c 	add.w	r3, r0, #12
   302fa:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   302fe:	f100 0314 	add.w	r3, r0, #20
   30302:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   30306:	4770      	bx	lr

00030308 <k_queue_append>:
{
   30308:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   3030a:	2301      	movs	r3, #1
   3030c:	9300      	str	r3, [sp, #0]
   3030e:	2300      	movs	r3, #0
{
   30310:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   30312:	4619      	mov	r1, r3
   30314:	f7f5 fc0a 	bl	25b2c <queue_insert>
}
   30318:	b003      	add	sp, #12
   3031a:	f85d fb04 	ldr.w	pc, [sp], #4

0003031e <k_queue_prepend>:
{
   3031e:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   30320:	2300      	movs	r3, #0
{
   30322:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   30324:	9300      	str	r3, [sp, #0]
   30326:	4619      	mov	r1, r3
   30328:	f7f5 fc00 	bl	25b2c <queue_insert>
}
   3032c:	b003      	add	sp, #12
   3032e:	f85d fb04 	ldr.w	pc, [sp], #4

00030332 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   30332:	b15a      	cbz	r2, 3034c <z_impl_k_sem_init+0x1a>
   30334:	428a      	cmp	r2, r1
   30336:	d309      	bcc.n	3034c <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   30338:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   3033c:	e9c0 1202 	strd	r1, r2, [r0, #8]
   30340:	e9c0 0000 	strd	r0, r0, [r0]
   30344:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   30348:	2000      	movs	r0, #0
   3034a:	4770      	bx	lr
		return -EINVAL;
   3034c:	f06f 0015 	mvn.w	r0, #21
}
   30350:	4770      	bx	lr

00030352 <notify_queue_locked>:
	if (queue != NULL) {
   30352:	b120      	cbz	r0, 3035e <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   30354:	2200      	movs	r2, #0
   30356:	4611      	mov	r1, r2
   30358:	30c8      	adds	r0, #200	; 0xc8
   3035a:	f7f7 bd09 	b.w	27d70 <z_sched_wake>
}
   3035e:	4770      	bx	lr

00030360 <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   30360:	68c3      	ldr	r3, [r0, #12]
{
   30362:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   30364:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   30368:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   3036c:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   3036e:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   30370:	d502      	bpl.n	30378 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   30372:	3010      	adds	r0, #16
   30374:	f7f7 ff9e 	bl	282b4 <z_abort_timeout>
}
   30378:	4620      	mov	r0, r4
   3037a:	bd10      	pop	{r4, pc}

0003037c <cancel_async_locked>:
{
   3037c:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   3037e:	68c0      	ldr	r0, [r0, #12]
{
   30380:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   30382:	0784      	lsls	r4, r0, #30
   30384:	f3c0 0140 	ubfx	r1, r0, #1, #1
   30388:	d416      	bmi.n	303b8 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   3038a:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   3038e:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   30390:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   30392:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   30394:	d510      	bpl.n	303b8 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   30396:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
   3039a:	b168      	cbz	r0, 303b8 <cancel_async_locked+0x3c>
   3039c:	4283      	cmp	r3, r0
   3039e:	d11d      	bne.n	303dc <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   303a0:	6818      	ldr	r0, [r3, #0]
   303a2:	b999      	cbnz	r1, 303cc <cancel_async_locked+0x50>
   303a4:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
	list->head = node;
   303a8:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
Z_GENLIST_REMOVE(slist, snode)
   303ac:	428b      	cmp	r3, r1
   303ae:	d101      	bne.n	303b4 <cancel_async_locked+0x38>
	list->tail = node;
   303b0:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
	parent->next = child;
   303b4:	2200      	movs	r2, #0
   303b6:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   303b8:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   303ba:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   303be:	bf1e      	ittt	ne
   303c0:	f042 0202 	orrne.w	r2, r2, #2
   303c4:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   303c6:	f002 000f 	andne.w	r0, r2, #15
}
   303ca:	bd10      	pop	{r4, pc}
   303cc:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   303ce:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
   303d2:	4283      	cmp	r3, r0
	list->tail = node;
   303d4:	bf08      	it	eq
   303d6:	f8c2 10c4 	streq.w	r1, [r2, #196]	; 0xc4
}
   303da:	e7eb      	b.n	303b4 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   303dc:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   303de:	6800      	ldr	r0, [r0, #0]
   303e0:	e7db      	b.n	3039a <cancel_async_locked+0x1e>

000303e2 <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   303e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   303e6:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   303ea:	4283      	cmp	r3, r0
		return b2 - b1;
   303ec:	bf14      	ite	ne
   303ee:	1ac0      	subne	r0, r0, r3
	return 0;
   303f0:	2000      	moveq	r0, #0
}
   303f2:	4770      	bx	lr

000303f4 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   303f4:	4603      	mov	r3, r0
   303f6:	b920      	cbnz	r0, 30402 <z_reschedule_irqlock+0xe>
   303f8:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   303fc:	b90a      	cbnz	r2, 30402 <z_reschedule_irqlock+0xe>
   303fe:	f7e6 be5b 	b.w	170b8 <arch_swap>
   30402:	f383 8811 	msr	BASEPRI, r3
   30406:	f3bf 8f6f 	isb	sy
}
   3040a:	4770      	bx	lr

0003040c <z_reschedule_unlocked>:
	__asm__ volatile(
   3040c:	f04f 0340 	mov.w	r3, #64	; 0x40
   30410:	f3ef 8011 	mrs	r0, BASEPRI
   30414:	f383 8812 	msr	BASEPRI_MAX, r3
   30418:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   3041c:	f7ff bfea 	b.w	303f4 <z_reschedule_irqlock>

00030420 <z_priq_dumb_best>:
{
   30420:	4603      	mov	r3, r0
	return list->head == list;
   30422:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30424:	4283      	cmp	r3, r0
   30426:	d003      	beq.n	30430 <z_priq_dumb_best+0x10>
	if (n != NULL) {
   30428:	2800      	cmp	r0, #0
   3042a:	bf38      	it	cc
   3042c:	2000      	movcc	r0, #0
   3042e:	4770      	bx	lr
	struct k_thread *thread = NULL;
   30430:	2000      	movs	r0, #0
}
   30432:	4770      	bx	lr

00030434 <z_unpend_all>:
{
   30434:	b538      	push	{r3, r4, r5, lr}
   30436:	4605      	mov	r5, r0
	int need_sched = 0;
   30438:	2000      	movs	r0, #0
	return list->head == list;
   3043a:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   3043c:	42a5      	cmp	r5, r4
   3043e:	d000      	beq.n	30442 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   30440:	b904      	cbnz	r4, 30444 <z_unpend_all+0x10>
}
   30442:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   30444:	4620      	mov	r0, r4
   30446:	f7f6 fc8d 	bl	26d64 <z_unpend_thread>
		z_ready_thread(thread);
   3044a:	4620      	mov	r0, r4
   3044c:	f7f6 fe2e 	bl	270ac <z_ready_thread>
		need_sched = 1;
   30450:	2001      	movs	r0, #1
   30452:	e7f2      	b.n	3043a <z_unpend_all+0x6>

00030454 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   30454:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   30456:	f7f8 f8df 	bl	28618 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   3045a:	bd08      	pop	{r3, pc}

0003045c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   3045c:	f7f8 b8dc 	b.w	28618 <sys_clock_tick_get>

00030460 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   30460:	b108      	cbz	r0, 30466 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   30462:	f7e7 bd53 	b.w	17f0c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   30466:	4770      	bx	lr

00030468 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   30468:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   3046a:	1c4b      	adds	r3, r1, #1
   3046c:	bf08      	it	eq
   3046e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   30472:	4604      	mov	r4, r0
   30474:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   30476:	d013      	beq.n	304a0 <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   30478:	ea54 0105 	orrs.w	r1, r4, r5
   3047c:	d103      	bne.n	30486 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   3047e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   30482:	f7f8 b8c9 	b.w	28618 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   30486:	f06f 0101 	mvn.w	r1, #1
   3048a:	1a0a      	subs	r2, r1, r0
   3048c:	f04f 31ff 	mov.w	r1, #4294967295
   30490:	eb61 0305 	sbc.w	r3, r1, r5
   30494:	2a00      	cmp	r2, #0
   30496:	f173 0100 	sbcs.w	r1, r3, #0
   3049a:	db02      	blt.n	304a2 <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   3049c:	4610      	mov	r0, r2
   3049e:	4619      	mov	r1, r3
}
   304a0:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   304a2:	f7f8 f8b9 	bl	28618 <sys_clock_tick_get>
   304a6:	2c01      	cmp	r4, #1
   304a8:	f175 0300 	sbcs.w	r3, r5, #0
   304ac:	bfbc      	itt	lt
   304ae:	2401      	movlt	r4, #1
   304b0:	2500      	movlt	r5, #0
   304b2:	1820      	adds	r0, r4, r0
   304b4:	eb45 0101 	adc.w	r1, r5, r1
   304b8:	e7f2      	b.n	304a0 <sys_clock_timeout_end_calc+0x38>

000304ba <k_timer_init>:
	timer->status = 0U;
   304ba:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   304bc:	e9c0 1208 	strd	r1, r2, [r0, #32]
   304c0:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   304c4:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   304c8:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   304cc:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   304ce:	6343      	str	r3, [r0, #52]	; 0x34
}
   304d0:	4770      	bx	lr

000304d2 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   304d2:	b510      	push	{r4, lr}
   304d4:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   304d6:	f7f7 feed 	bl	282b4 <z_abort_timeout>

	if (inactive) {
   304da:	b9b0      	cbnz	r0, 3050a <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   304dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
   304de:	b10b      	cbz	r3, 304e4 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   304e0:	4620      	mov	r0, r4
   304e2:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   304e4:	f104 0018 	add.w	r0, r4, #24
   304e8:	f7f7 f944 	bl	27774 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   304ec:	b168      	cbz	r0, 3050a <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   304ee:	f7f6 fddd 	bl	270ac <z_ready_thread>
   304f2:	f04f 0340 	mov.w	r3, #64	; 0x40
   304f6:	f3ef 8011 	mrs	r0, BASEPRI
   304fa:	f383 8812 	msr	BASEPRI_MAX, r3
   304fe:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   30502:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   30506:	f7ff bf75 	b.w	303f4 <z_reschedule_irqlock>
   3050a:	bd10      	pop	{r4, pc}

0003050c <add_event>:
{
   3050c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   3050e:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   30510:	e9d0 2300 	ldrd	r2, r3, [r0]
   30514:	4290      	cmp	r0, r2
   30516:	4604      	mov	r4, r0
   30518:	460d      	mov	r5, r1
   3051a:	d105      	bne.n	30528 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   3051c:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   3051e:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   30522:	601d      	str	r5, [r3, #0]
	list->tail = node;
   30524:	6065      	str	r5, [r4, #4]
}
   30526:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   30528:	2b00      	cmp	r3, #0
   3052a:	d0f7      	beq.n	3051c <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   3052c:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   3052e:	b100      	cbz	r0, 30532 <add_event+0x26>
   30530:	3868      	subs	r0, #104	; 0x68
   30532:	b107      	cbz	r7, 30536 <add_event+0x2a>
   30534:	3f68      	subs	r7, #104	; 0x68
		(z_sched_prio_cmp(poller_thread(pending->poller),
   30536:	4639      	mov	r1, r7
   30538:	f7ff ff53 	bl	303e2 <z_sched_prio_cmp>
	if ((pending == NULL) ||
   3053c:	2800      	cmp	r0, #0
   3053e:	dced      	bgt.n	3051c <add_event+0x10>
	return list->head == list;
   30540:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   30542:	42b4      	cmp	r4, r6
   30544:	d0ea      	beq.n	3051c <add_event+0x10>
   30546:	2e00      	cmp	r6, #0
   30548:	bf38      	it	cc
   3054a:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   3054c:	2e00      	cmp	r6, #0
   3054e:	d0e5      	beq.n	3051c <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   30550:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   30552:	b101      	cbz	r1, 30556 <add_event+0x4a>
   30554:	3968      	subs	r1, #104	; 0x68
		if (z_sched_prio_cmp(poller_thread(poller),
   30556:	4638      	mov	r0, r7
   30558:	f7ff ff43 	bl	303e2 <z_sched_prio_cmp>
   3055c:	2800      	cmp	r0, #0
   3055e:	dd05      	ble.n	3056c <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   30560:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   30562:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   30566:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   30568:	6075      	str	r5, [r6, #4]
			return;
   3056a:	e7dc      	b.n	30526 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   3056c:	6863      	ldr	r3, [r4, #4]
   3056e:	42b3      	cmp	r3, r6
   30570:	d0d4      	beq.n	3051c <add_event+0x10>
   30572:	6836      	ldr	r6, [r6, #0]
   30574:	e7ea      	b.n	3054c <add_event+0x40>

00030576 <z_handle_obj_poll_events>:
{
   30576:	4603      	mov	r3, r0
	return list->head == list;
   30578:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   3057a:	4283      	cmp	r3, r0
   3057c:	d008      	beq.n	30590 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   3057e:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   30582:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   30584:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   30586:	2300      	movs	r3, #0
	node->prev = NULL;
   30588:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   3058c:	f7f8 bb9a 	b.w	28cc4 <signal_poll_event>
}
   30590:	4770      	bx	lr

00030592 <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   30592:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   30594:	e9c0 0000 	strd	r0, r0, [r0]
   30598:	6083      	str	r3, [r0, #8]
}
   3059a:	4770      	bx	lr

0003059c <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   3059c:	2300      	movs	r3, #0
   3059e:	6083      	str	r3, [r0, #8]
}
   305a0:	4770      	bx	lr

000305a2 <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   305a2:	6883      	ldr	r3, [r0, #8]
   305a4:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   305a6:	68c3      	ldr	r3, [r0, #12]
   305a8:	6013      	str	r3, [r2, #0]
}
   305aa:	4770      	bx	lr

000305ac <k_free>:
	if (ptr != NULL) {
   305ac:	b120      	cbz	r0, 305b8 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   305ae:	1f01      	subs	r1, r0, #4
   305b0:	f850 0c04 	ldr.w	r0, [r0, #-4]
   305b4:	f7f4 bad0 	b.w	24b58 <k_heap_free>
}
   305b8:	4770      	bx	lr

000305ba <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   305ba:	4770      	bx	lr

000305bc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   305bc:	4770      	bx	lr

000305be <memcmp>:
   305be:	b530      	push	{r4, r5, lr}
   305c0:	3901      	subs	r1, #1
   305c2:	2400      	movs	r4, #0
   305c4:	42a2      	cmp	r2, r4
   305c6:	d101      	bne.n	305cc <memcmp+0xe>
   305c8:	2000      	movs	r0, #0
   305ca:	e005      	b.n	305d8 <memcmp+0x1a>
   305cc:	5d03      	ldrb	r3, [r0, r4]
   305ce:	3401      	adds	r4, #1
   305d0:	5d0d      	ldrb	r5, [r1, r4]
   305d2:	42ab      	cmp	r3, r5
   305d4:	d0f6      	beq.n	305c4 <memcmp+0x6>
   305d6:	1b58      	subs	r0, r3, r5
   305d8:	bd30      	pop	{r4, r5, pc}

000305da <memcpy>:
   305da:	440a      	add	r2, r1
   305dc:	4291      	cmp	r1, r2
   305de:	f100 33ff 	add.w	r3, r0, #4294967295
   305e2:	d100      	bne.n	305e6 <memcpy+0xc>
   305e4:	4770      	bx	lr
   305e6:	b510      	push	{r4, lr}
   305e8:	f811 4b01 	ldrb.w	r4, [r1], #1
   305ec:	f803 4f01 	strb.w	r4, [r3, #1]!
   305f0:	4291      	cmp	r1, r2
   305f2:	d1f9      	bne.n	305e8 <memcpy+0xe>
   305f4:	bd10      	pop	{r4, pc}

000305f6 <memmove>:
   305f6:	4288      	cmp	r0, r1
   305f8:	b510      	push	{r4, lr}
   305fa:	eb01 0402 	add.w	r4, r1, r2
   305fe:	d902      	bls.n	30606 <memmove+0x10>
   30600:	4284      	cmp	r4, r0
   30602:	4623      	mov	r3, r4
   30604:	d807      	bhi.n	30616 <memmove+0x20>
   30606:	1e43      	subs	r3, r0, #1
   30608:	42a1      	cmp	r1, r4
   3060a:	d008      	beq.n	3061e <memmove+0x28>
   3060c:	f811 2b01 	ldrb.w	r2, [r1], #1
   30610:	f803 2f01 	strb.w	r2, [r3, #1]!
   30614:	e7f8      	b.n	30608 <memmove+0x12>
   30616:	4402      	add	r2, r0
   30618:	4601      	mov	r1, r0
   3061a:	428a      	cmp	r2, r1
   3061c:	d100      	bne.n	30620 <memmove+0x2a>
   3061e:	bd10      	pop	{r4, pc}
   30620:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   30624:	f802 4d01 	strb.w	r4, [r2, #-1]!
   30628:	e7f7      	b.n	3061a <memmove+0x24>

0003062a <memset>:
   3062a:	4402      	add	r2, r0
   3062c:	4603      	mov	r3, r0
   3062e:	4293      	cmp	r3, r2
   30630:	d100      	bne.n	30634 <memset+0xa>
   30632:	4770      	bx	lr
   30634:	f803 1b01 	strb.w	r1, [r3], #1
   30638:	e7f9      	b.n	3062e <memset+0x4>

0003063a <strchr>:
   3063a:	b2c9      	uxtb	r1, r1
   3063c:	4603      	mov	r3, r0
   3063e:	4618      	mov	r0, r3
   30640:	f813 2b01 	ldrb.w	r2, [r3], #1
   30644:	b112      	cbz	r2, 3064c <strchr+0x12>
   30646:	428a      	cmp	r2, r1
   30648:	d1f9      	bne.n	3063e <strchr+0x4>
   3064a:	4770      	bx	lr
   3064c:	2900      	cmp	r1, #0
   3064e:	bf18      	it	ne
   30650:	2000      	movne	r0, #0
   30652:	4770      	bx	lr

00030654 <strcpy>:
   30654:	4603      	mov	r3, r0
   30656:	f811 2b01 	ldrb.w	r2, [r1], #1
   3065a:	f803 2b01 	strb.w	r2, [r3], #1
   3065e:	2a00      	cmp	r2, #0
   30660:	d1f9      	bne.n	30656 <strcpy+0x2>
   30662:	4770      	bx	lr

00030664 <strncmp>:
   30664:	b510      	push	{r4, lr}
   30666:	b16a      	cbz	r2, 30684 <strncmp+0x20>
   30668:	3901      	subs	r1, #1
   3066a:	1884      	adds	r4, r0, r2
   3066c:	f810 3b01 	ldrb.w	r3, [r0], #1
   30670:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   30674:	4293      	cmp	r3, r2
   30676:	d103      	bne.n	30680 <strncmp+0x1c>
   30678:	42a0      	cmp	r0, r4
   3067a:	d001      	beq.n	30680 <strncmp+0x1c>
   3067c:	2b00      	cmp	r3, #0
   3067e:	d1f5      	bne.n	3066c <strncmp+0x8>
   30680:	1a98      	subs	r0, r3, r2
   30682:	bd10      	pop	{r4, pc}
   30684:	4610      	mov	r0, r2
   30686:	e7fc      	b.n	30682 <strncmp+0x1e>

00030688 <strncpy>:
   30688:	b510      	push	{r4, lr}
   3068a:	3901      	subs	r1, #1
   3068c:	4603      	mov	r3, r0
   3068e:	b132      	cbz	r2, 3069e <strncpy+0x16>
   30690:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   30694:	f803 4b01 	strb.w	r4, [r3], #1
   30698:	3a01      	subs	r2, #1
   3069a:	2c00      	cmp	r4, #0
   3069c:	d1f7      	bne.n	3068e <strncpy+0x6>
   3069e:	441a      	add	r2, r3
   306a0:	2100      	movs	r1, #0
   306a2:	4293      	cmp	r3, r2
   306a4:	d100      	bne.n	306a8 <strncpy+0x20>
   306a6:	bd10      	pop	{r4, pc}
   306a8:	f803 1b01 	strb.w	r1, [r3], #1
   306ac:	e7f9      	b.n	306a2 <strncpy+0x1a>

000306ae <strnlen>:
   306ae:	b510      	push	{r4, lr}
   306b0:	4602      	mov	r2, r0
   306b2:	4401      	add	r1, r0
   306b4:	428a      	cmp	r2, r1
   306b6:	4613      	mov	r3, r2
   306b8:	d101      	bne.n	306be <strnlen+0x10>
   306ba:	1a18      	subs	r0, r3, r0
   306bc:	bd10      	pop	{r4, pc}
   306be:	781c      	ldrb	r4, [r3, #0]
   306c0:	3201      	adds	r2, #1
   306c2:	2c00      	cmp	r4, #0
   306c4:	d1f6      	bne.n	306b4 <strnlen+0x6>
   306c6:	e7f8      	b.n	306ba <strnlen+0xc>

000306c8 <strstr>:
   306c8:	b5f0      	push	{r4, r5, r6, r7, lr}
   306ca:	780c      	ldrb	r4, [r1, #0]
   306cc:	b164      	cbz	r4, 306e8 <strstr+0x20>
   306ce:	4603      	mov	r3, r0
   306d0:	781a      	ldrb	r2, [r3, #0]
   306d2:	4618      	mov	r0, r3
   306d4:	1c5e      	adds	r6, r3, #1
   306d6:	b90a      	cbnz	r2, 306dc <strstr+0x14>
   306d8:	4610      	mov	r0, r2
   306da:	e005      	b.n	306e8 <strstr+0x20>
   306dc:	4294      	cmp	r4, r2
   306de:	d108      	bne.n	306f2 <strstr+0x2a>
   306e0:	460d      	mov	r5, r1
   306e2:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   306e6:	b902      	cbnz	r2, 306ea <strstr+0x22>
   306e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   306ea:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   306ee:	4297      	cmp	r7, r2
   306f0:	d0f7      	beq.n	306e2 <strstr+0x1a>
   306f2:	4633      	mov	r3, r6
   306f4:	e7ec      	b.n	306d0 <strstr+0x8>

000306f6 <_realloc_r>:
   306f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   306f8:	4607      	mov	r7, r0
   306fa:	4614      	mov	r4, r2
   306fc:	460e      	mov	r6, r1
   306fe:	b921      	cbnz	r1, 3070a <_realloc_r+0x14>
   30700:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   30704:	4611      	mov	r1, r2
   30706:	f7fb babb 	b.w	2bc80 <_malloc_r>
   3070a:	b922      	cbnz	r2, 30716 <_realloc_r+0x20>
   3070c:	f7fb fa6a 	bl	2bbe4 <_free_r>
   30710:	4625      	mov	r5, r4
   30712:	4628      	mov	r0, r5
   30714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   30716:	f000 f8dc 	bl	308d2 <_malloc_usable_size_r>
   3071a:	42a0      	cmp	r0, r4
   3071c:	d20f      	bcs.n	3073e <_realloc_r+0x48>
   3071e:	4621      	mov	r1, r4
   30720:	4638      	mov	r0, r7
   30722:	f7fb faad 	bl	2bc80 <_malloc_r>
   30726:	4605      	mov	r5, r0
   30728:	2800      	cmp	r0, #0
   3072a:	d0f2      	beq.n	30712 <_realloc_r+0x1c>
   3072c:	4631      	mov	r1, r6
   3072e:	4622      	mov	r2, r4
   30730:	f7ff ff53 	bl	305da <memcpy>
   30734:	4631      	mov	r1, r6
   30736:	4638      	mov	r0, r7
   30738:	f7fb fa54 	bl	2bbe4 <_free_r>
   3073c:	e7e9      	b.n	30712 <_realloc_r+0x1c>
   3073e:	4635      	mov	r5, r6
   30740:	e7e7      	b.n	30712 <_realloc_r+0x1c>

00030742 <__ssputs_r>:
   30742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   30746:	688e      	ldr	r6, [r1, #8]
   30748:	429e      	cmp	r6, r3
   3074a:	4682      	mov	sl, r0
   3074c:	460c      	mov	r4, r1
   3074e:	4690      	mov	r8, r2
   30750:	461f      	mov	r7, r3
   30752:	d838      	bhi.n	307c6 <__ssputs_r+0x84>
   30754:	898a      	ldrh	r2, [r1, #12]
   30756:	f412 6f90 	tst.w	r2, #1152	; 0x480
   3075a:	d032      	beq.n	307c2 <__ssputs_r+0x80>
   3075c:	6825      	ldr	r5, [r4, #0]
   3075e:	6909      	ldr	r1, [r1, #16]
   30760:	eba5 0901 	sub.w	r9, r5, r1
   30764:	6965      	ldr	r5, [r4, #20]
   30766:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   3076a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   3076e:	3301      	adds	r3, #1
   30770:	444b      	add	r3, r9
   30772:	106d      	asrs	r5, r5, #1
   30774:	429d      	cmp	r5, r3
   30776:	bf38      	it	cc
   30778:	461d      	movcc	r5, r3
   3077a:	0553      	lsls	r3, r2, #21
   3077c:	d531      	bpl.n	307e2 <__ssputs_r+0xa0>
   3077e:	4629      	mov	r1, r5
   30780:	f7fb fa7e 	bl	2bc80 <_malloc_r>
   30784:	4606      	mov	r6, r0
   30786:	b950      	cbnz	r0, 3079e <__ssputs_r+0x5c>
   30788:	230c      	movs	r3, #12
   3078a:	f8ca 3000 	str.w	r3, [sl]
   3078e:	89a3      	ldrh	r3, [r4, #12]
   30790:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   30794:	81a3      	strh	r3, [r4, #12]
   30796:	f04f 30ff 	mov.w	r0, #4294967295
   3079a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   3079e:	6921      	ldr	r1, [r4, #16]
   307a0:	464a      	mov	r2, r9
   307a2:	f7ff ff1a 	bl	305da <memcpy>
   307a6:	89a3      	ldrh	r3, [r4, #12]
   307a8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   307ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   307b0:	81a3      	strh	r3, [r4, #12]
   307b2:	6126      	str	r6, [r4, #16]
   307b4:	6165      	str	r5, [r4, #20]
   307b6:	444e      	add	r6, r9
   307b8:	eba5 0509 	sub.w	r5, r5, r9
   307bc:	6026      	str	r6, [r4, #0]
   307be:	60a5      	str	r5, [r4, #8]
   307c0:	463e      	mov	r6, r7
   307c2:	42be      	cmp	r6, r7
   307c4:	d900      	bls.n	307c8 <__ssputs_r+0x86>
   307c6:	463e      	mov	r6, r7
   307c8:	4632      	mov	r2, r6
   307ca:	6820      	ldr	r0, [r4, #0]
   307cc:	4641      	mov	r1, r8
   307ce:	f7ff ff12 	bl	305f6 <memmove>
   307d2:	68a3      	ldr	r3, [r4, #8]
   307d4:	6822      	ldr	r2, [r4, #0]
   307d6:	1b9b      	subs	r3, r3, r6
   307d8:	4432      	add	r2, r6
   307da:	60a3      	str	r3, [r4, #8]
   307dc:	6022      	str	r2, [r4, #0]
   307de:	2000      	movs	r0, #0
   307e0:	e7db      	b.n	3079a <__ssputs_r+0x58>
   307e2:	462a      	mov	r2, r5
   307e4:	f7ff ff87 	bl	306f6 <_realloc_r>
   307e8:	4606      	mov	r6, r0
   307ea:	2800      	cmp	r0, #0
   307ec:	d1e1      	bne.n	307b2 <__ssputs_r+0x70>
   307ee:	6921      	ldr	r1, [r4, #16]
   307f0:	4650      	mov	r0, sl
   307f2:	f7fb f9f7 	bl	2bbe4 <_free_r>
   307f6:	e7c7      	b.n	30788 <__ssputs_r+0x46>

000307f8 <_printf_common>:
   307f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   307fc:	4616      	mov	r6, r2
   307fe:	4699      	mov	r9, r3
   30800:	688a      	ldr	r2, [r1, #8]
   30802:	690b      	ldr	r3, [r1, #16]
   30804:	f8dd 8020 	ldr.w	r8, [sp, #32]
   30808:	4293      	cmp	r3, r2
   3080a:	bfb8      	it	lt
   3080c:	4613      	movlt	r3, r2
   3080e:	6033      	str	r3, [r6, #0]
   30810:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   30814:	4607      	mov	r7, r0
   30816:	460c      	mov	r4, r1
   30818:	b10a      	cbz	r2, 3081e <_printf_common+0x26>
   3081a:	3301      	adds	r3, #1
   3081c:	6033      	str	r3, [r6, #0]
   3081e:	6823      	ldr	r3, [r4, #0]
   30820:	0699      	lsls	r1, r3, #26
   30822:	bf42      	ittt	mi
   30824:	6833      	ldrmi	r3, [r6, #0]
   30826:	3302      	addmi	r3, #2
   30828:	6033      	strmi	r3, [r6, #0]
   3082a:	6825      	ldr	r5, [r4, #0]
   3082c:	f015 0506 	ands.w	r5, r5, #6
   30830:	d106      	bne.n	30840 <_printf_common+0x48>
   30832:	f104 0a19 	add.w	sl, r4, #25
   30836:	68e3      	ldr	r3, [r4, #12]
   30838:	6832      	ldr	r2, [r6, #0]
   3083a:	1a9b      	subs	r3, r3, r2
   3083c:	42ab      	cmp	r3, r5
   3083e:	dc26      	bgt.n	3088e <_printf_common+0x96>
   30840:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   30844:	1e13      	subs	r3, r2, #0
   30846:	6822      	ldr	r2, [r4, #0]
   30848:	bf18      	it	ne
   3084a:	2301      	movne	r3, #1
   3084c:	0692      	lsls	r2, r2, #26
   3084e:	d42b      	bmi.n	308a8 <_printf_common+0xb0>
   30850:	f104 0243 	add.w	r2, r4, #67	; 0x43
   30854:	4649      	mov	r1, r9
   30856:	4638      	mov	r0, r7
   30858:	47c0      	blx	r8
   3085a:	3001      	adds	r0, #1
   3085c:	d01e      	beq.n	3089c <_printf_common+0xa4>
   3085e:	6823      	ldr	r3, [r4, #0]
   30860:	68e5      	ldr	r5, [r4, #12]
   30862:	6832      	ldr	r2, [r6, #0]
   30864:	f003 0306 	and.w	r3, r3, #6
   30868:	2b04      	cmp	r3, #4
   3086a:	bf08      	it	eq
   3086c:	1aad      	subeq	r5, r5, r2
   3086e:	68a3      	ldr	r3, [r4, #8]
   30870:	6922      	ldr	r2, [r4, #16]
   30872:	bf0c      	ite	eq
   30874:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   30878:	2500      	movne	r5, #0
   3087a:	4293      	cmp	r3, r2
   3087c:	bfc4      	itt	gt
   3087e:	1a9b      	subgt	r3, r3, r2
   30880:	18ed      	addgt	r5, r5, r3
   30882:	2600      	movs	r6, #0
   30884:	341a      	adds	r4, #26
   30886:	42b5      	cmp	r5, r6
   30888:	d11a      	bne.n	308c0 <_printf_common+0xc8>
   3088a:	2000      	movs	r0, #0
   3088c:	e008      	b.n	308a0 <_printf_common+0xa8>
   3088e:	2301      	movs	r3, #1
   30890:	4652      	mov	r2, sl
   30892:	4649      	mov	r1, r9
   30894:	4638      	mov	r0, r7
   30896:	47c0      	blx	r8
   30898:	3001      	adds	r0, #1
   3089a:	d103      	bne.n	308a4 <_printf_common+0xac>
   3089c:	f04f 30ff 	mov.w	r0, #4294967295
   308a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   308a4:	3501      	adds	r5, #1
   308a6:	e7c6      	b.n	30836 <_printf_common+0x3e>
   308a8:	18e1      	adds	r1, r4, r3
   308aa:	1c5a      	adds	r2, r3, #1
   308ac:	2030      	movs	r0, #48	; 0x30
   308ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   308b2:	4422      	add	r2, r4
   308b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   308b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   308bc:	3302      	adds	r3, #2
   308be:	e7c7      	b.n	30850 <_printf_common+0x58>
   308c0:	2301      	movs	r3, #1
   308c2:	4622      	mov	r2, r4
   308c4:	4649      	mov	r1, r9
   308c6:	4638      	mov	r0, r7
   308c8:	47c0      	blx	r8
   308ca:	3001      	adds	r0, #1
   308cc:	d0e6      	beq.n	3089c <_printf_common+0xa4>
   308ce:	3601      	adds	r6, #1
   308d0:	e7d9      	b.n	30886 <_printf_common+0x8e>

000308d2 <_malloc_usable_size_r>:
   308d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
   308d6:	1f18      	subs	r0, r3, #4
   308d8:	2b00      	cmp	r3, #0
   308da:	bfbc      	itt	lt
   308dc:	580b      	ldrlt	r3, [r1, r0]
   308de:	18c0      	addlt	r0, r0, r3
   308e0:	4770      	bx	lr
	...

000308e4 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   308e4:	f7f3 b962 	b.w	23bac <SystemInit>
