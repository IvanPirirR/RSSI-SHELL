
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   0:	200058c0 	.word	0x200058c0
   4:	0001690d 	.word	0x0001690d

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   8:	0002a78d 	.word	0x0002a78d
   c:	000168e1 	.word	0x000168e1
	(void)memset(res + 3, 0, 13);
  10:	000168e1 	.word	0x000168e1
  14:	000168e1 	.word	0x000168e1
	memcpy(res, r, 3);
  18:	000168e1 	.word	0x000168e1
	...
__ ## fun ## _ichk(type1 __restrict dst, type2 __restrict src) { \
	return __builtin___ ## fun ## _chk(dst, src, __ssp_bos0(dst)); \
}

__BEGIN_DECLS
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
  2c:	000160e5 	.word	0x000160e5
  30:	000168e1 	.word	0x000168e1
  34:	00000000 	.word	0x00000000
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
  38:	00016079 	.word	0x00016079
  3c:	000168e1 	.word	0x000168e1

00000040 <_irq_vector_table>:
  40:	000161a9 0002c6dd 000161a9 000161a9     .a.......a...a..
  50:	000161a9 000161a9 000161a9 000161a9     .a...a...a...a..
  60:	0002c6a5 000161a9 000161a9 0002c6c3     .....a...a......
  70:	000161a9 000161a9 000161a9 000161a9     .a...a...a...a..
  80:	000161a9 000161a9 000161a9 000161a9     .a...a...a...a..
  90:	000161a9 000161a9 000161a9 000161a9     .a...a...a...a..
  a0:	000161a9 000161a9 000161a9 000161a9     .a...a...a...a..
  b0:	000161a9 000161a9 000161a9 000161a9     .a...a...a...a..
  c0:	000161a9 000161a9 000161a9 000161a9     .a...a...a...a..
  d0:	000161a9 000161a9 000161a9 000161a9     .a...a...a...a..
  e0:	000161a9 000161a9 000161a9 000161a9     .a...a...a...a..
  f0:	000161a9 000161a9 000161a9 000161a9     .a...a...a...a..

Disassembly of section text:

00000100 <memchr>:
     100:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     104:	2a10      	cmp	r2, #16
     106:	db2b      	blt.n	160 <CONFIG_IDLE_STACK_SIZE+0x20>
     108:	f010 0f07 	tst.w	r0, #7
     10c:	d008      	beq.n	120 <memchr+0x20>
     10e:	f810 3b01 	ldrb.w	r3, [r0], #1
     112:	3a01      	subs	r2, #1
     114:	428b      	cmp	r3, r1
     116:	d02d      	beq.n	174 <CONFIG_IDLE_STACK_SIZE+0x34>
     118:	f010 0f07 	tst.w	r0, #7
     11c:	b342      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     11e:	d1f6      	bne.n	10e <memchr+0xe>
     120:	b4f0      	push	{r4, r5, r6, r7}
     122:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     126:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     12a:	f022 0407 	bic.w	r4, r2, #7
     12e:	f07f 0700 	mvns.w	r7, #0
     132:	2300      	movs	r3, #0
     134:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     138:	3c08      	subs	r4, #8
     13a:	ea85 0501 	eor.w	r5, r5, r1
     13e:	ea86 0601 	eor.w	r6, r6, r1
     142:	fa85 f547 	uadd8	r5, r5, r7
     146:	faa3 f587 	sel	r5, r3, r7
     14a:	fa86 f647 	uadd8	r6, r6, r7
     14e:	faa5 f687 	sel	r6, r5, r7
     152:	b98e      	cbnz	r6, 178 <CONFIG_IDLE_STACK_SIZE+0x38>
     154:	d1ee      	bne.n	134 <memchr+0x34>
     156:	bcf0      	pop	{r4, r5, r6, r7}
     158:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     15c:	f002 0207 	and.w	r2, r2, #7
     160:	b132      	cbz	r2, 170 <CONFIG_IDLE_STACK_SIZE+0x30>
     162:	f810 3b01 	ldrb.w	r3, [r0], #1
     166:	3a01      	subs	r2, #1
     168:	ea83 0301 	eor.w	r3, r3, r1
     16c:	b113      	cbz	r3, 174 <CONFIG_IDLE_STACK_SIZE+0x34>
     16e:	d1f8      	bne.n	162 <CONFIG_IDLE_STACK_SIZE+0x22>
     170:	2000      	movs	r0, #0
     172:	4770      	bx	lr
     174:	3801      	subs	r0, #1
     176:	4770      	bx	lr
     178:	2d00      	cmp	r5, #0
     17a:	bf06      	itte	eq
     17c:	4635      	moveq	r5, r6
     17e:	3803      	subeq	r0, #3
     180:	3807      	subne	r0, #7
     182:	f015 0f01 	tst.w	r5, #1
     186:	d107      	bne.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     188:	3001      	adds	r0, #1
     18a:	f415 7f80 	tst.w	r5, #256	; 0x100
     18e:	bf02      	ittt	eq
     190:	3001      	addeq	r0, #1
     192:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     196:	3001      	addeq	r0, #1
     198:	bcf0      	pop	{r4, r5, r6, r7}
     19a:	3801      	subs	r0, #1
     19c:	4770      	bx	lr
     19e:	bf00      	nop

000001a0 <__aeabi_ldivmod>:
     1a0:	b97b      	cbnz	r3, 1c2 <__aeabi_ldivmod+0x22>
     1a2:	b972      	cbnz	r2, 1c2 <__aeabi_ldivmod+0x22>
     1a4:	2900      	cmp	r1, #0
     1a6:	bfbe      	ittt	lt
     1a8:	2000      	movlt	r0, #0
     1aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     1ae:	e006      	blt.n	1be <__aeabi_ldivmod+0x1e>
     1b0:	bf08      	it	eq
     1b2:	2800      	cmpeq	r0, #0
     1b4:	bf1c      	itt	ne
     1b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     1ba:	f04f 30ff 	movne.w	r0, #4294967295
     1be:	f000 b9b7 	b.w	530 <__aeabi_idiv0>
     1c2:	f1ad 0c08 	sub.w	ip, sp, #8
     1c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     1ca:	2900      	cmp	r1, #0
     1cc:	db09      	blt.n	1e2 <__aeabi_ldivmod+0x42>
     1ce:	2b00      	cmp	r3, #0
     1d0:	db1a      	blt.n	208 <CONFIG_FLASH_SIZE+0x8>
     1d2:	f000 f84d 	bl	270 <__udivmoddi4>
     1d6:	f8dd e004 	ldr.w	lr, [sp, #4]
     1da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1de:	b004      	add	sp, #16
     1e0:	4770      	bx	lr
     1e2:	4240      	negs	r0, r0
     1e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     1e8:	2b00      	cmp	r3, #0
     1ea:	db1b      	blt.n	224 <CONFIG_FLASH_SIZE+0x24>
     1ec:	f000 f840 	bl	270 <__udivmoddi4>
     1f0:	f8dd e004 	ldr.w	lr, [sp, #4]
     1f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     1f8:	b004      	add	sp, #16
     1fa:	4240      	negs	r0, r0
     1fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     200:	4252      	negs	r2, r2
     202:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     206:	4770      	bx	lr
     208:	4252      	negs	r2, r2
     20a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     20e:	f000 f82f 	bl	270 <__udivmoddi4>
     212:	f8dd e004 	ldr.w	lr, [sp, #4]
     216:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     21a:	b004      	add	sp, #16
     21c:	4240      	negs	r0, r0
     21e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     222:	4770      	bx	lr
     224:	4252      	negs	r2, r2
     226:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     22a:	f000 f821 	bl	270 <__udivmoddi4>
     22e:	f8dd e004 	ldr.w	lr, [sp, #4]
     232:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     236:	b004      	add	sp, #16
     238:	4252      	negs	r2, r2
     23a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     23e:	4770      	bx	lr

00000240 <__aeabi_uldivmod>:
     240:	b953      	cbnz	r3, 258 <__aeabi_uldivmod+0x18>
     242:	b94a      	cbnz	r2, 258 <__aeabi_uldivmod+0x18>
     244:	2900      	cmp	r1, #0
     246:	bf08      	it	eq
     248:	2800      	cmpeq	r0, #0
     24a:	bf1c      	itt	ne
     24c:	f04f 31ff 	movne.w	r1, #4294967295
     250:	f04f 30ff 	movne.w	r0, #4294967295
     254:	f000 b96c 	b.w	530 <__aeabi_idiv0>
     258:	f1ad 0c08 	sub.w	ip, sp, #8
     25c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     260:	f000 f806 	bl	270 <__udivmoddi4>
     264:	f8dd e004 	ldr.w	lr, [sp, #4]
     268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     26c:	b004      	add	sp, #16
     26e:	4770      	bx	lr

00000270 <__udivmoddi4>:
     270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     274:	9e08      	ldr	r6, [sp, #32]
     276:	460d      	mov	r5, r1
     278:	4604      	mov	r4, r0
     27a:	468e      	mov	lr, r1
     27c:	2b00      	cmp	r3, #0
     27e:	f040 8082 	bne.w	386 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x86>
     282:	428a      	cmp	r2, r1
     284:	4617      	mov	r7, r2
     286:	d946      	bls.n	316 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x16>
     288:	fab2 f282 	clz	r2, r2
     28c:	b14a      	cbz	r2, 2a2 <__udivmoddi4+0x32>
     28e:	f1c2 0120 	rsb	r1, r2, #32
     292:	fa05 f302 	lsl.w	r3, r5, r2
     296:	fa20 f101 	lsr.w	r1, r0, r1
     29a:	4097      	lsls	r7, r2
     29c:	ea41 0e03 	orr.w	lr, r1, r3
     2a0:	4094      	lsls	r4, r2
     2a2:	ea4f 4817 	mov.w	r8, r7, lsr #16
     2a6:	0c23      	lsrs	r3, r4, #16
     2a8:	fbbe fcf8 	udiv	ip, lr, r8
     2ac:	b2b9      	uxth	r1, r7
     2ae:	fb08 ee1c 	mls	lr, r8, ip, lr
     2b2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     2b6:	fb0c f001 	mul.w	r0, ip, r1
     2ba:	4298      	cmp	r0, r3
     2bc:	d90a      	bls.n	2d4 <__udivmoddi4+0x64>
     2be:	18fb      	adds	r3, r7, r3
     2c0:	f10c 35ff 	add.w	r5, ip, #4294967295
     2c4:	f080 8116 	bcs.w	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     2c8:	4298      	cmp	r0, r3
     2ca:	f240 8113 	bls.w	4f4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc>
     2ce:	f1ac 0c02 	sub.w	ip, ip, #2
     2d2:	443b      	add	r3, r7
     2d4:	1a1b      	subs	r3, r3, r0
     2d6:	b2a4      	uxth	r4, r4
     2d8:	fbb3 f0f8 	udiv	r0, r3, r8
     2dc:	fb08 3310 	mls	r3, r8, r0, r3
     2e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     2e4:	fb00 f101 	mul.w	r1, r0, r1
     2e8:	42a1      	cmp	r1, r4
     2ea:	d909      	bls.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     2ec:	193c      	adds	r4, r7, r4
     2ee:	f100 33ff 	add.w	r3, r0, #4294967295
     2f2:	f080 8101 	bcs.w	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     2f6:	42a1      	cmp	r1, r4
     2f8:	f240 80fe 	bls.w	4f8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x10>
     2fc:	3802      	subs	r0, #2
     2fe:	443c      	add	r4, r7
     300:	1a64      	subs	r4, r4, r1
     302:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     306:	2100      	movs	r1, #0
     308:	b11e      	cbz	r6, 312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     30a:	40d4      	lsrs	r4, r2
     30c:	2300      	movs	r3, #0
     30e:	e9c6 4300 	strd	r4, r3, [r6]
     312:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     316:	b902      	cbnz	r2, 31a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1a>
     318:	deff      	udf	#255	; 0xff
     31a:	fab2 f282 	clz	r2, r2
     31e:	2a00      	cmp	r2, #0
     320:	d14f      	bne.n	3c2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc2>
     322:	1bcb      	subs	r3, r1, r7
     324:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     328:	fa1f f887 	uxth.w	r8, r7
     32c:	2101      	movs	r1, #1
     32e:	fbb3 fcfe 	udiv	ip, r3, lr
     332:	0c25      	lsrs	r5, r4, #16
     334:	fb0e 331c 	mls	r3, lr, ip, r3
     338:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     33c:	fb08 f30c 	mul.w	r3, r8, ip
     340:	42ab      	cmp	r3, r5
     342:	d907      	bls.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     344:	197d      	adds	r5, r7, r5
     346:	f10c 30ff 	add.w	r0, ip, #4294967295
     34a:	d202      	bcs.n	352 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x52>
     34c:	42ab      	cmp	r3, r5
     34e:	f200 80e7 	bhi.w	520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>
     352:	4684      	mov	ip, r0
     354:	1aed      	subs	r5, r5, r3
     356:	b2a3      	uxth	r3, r4
     358:	fbb5 f0fe 	udiv	r0, r5, lr
     35c:	fb0e 5510 	mls	r5, lr, r0, r5
     360:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     364:	fb08 f800 	mul.w	r8, r8, r0
     368:	45a0      	cmp	r8, r4
     36a:	d907      	bls.n	37c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7c>
     36c:	193c      	adds	r4, r7, r4
     36e:	f100 33ff 	add.w	r3, r0, #4294967295
     372:	d202      	bcs.n	37a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7a>
     374:	45a0      	cmp	r8, r4
     376:	f200 80d7 	bhi.w	528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>
     37a:	4618      	mov	r0, r3
     37c:	eba4 0408 	sub.w	r4, r4, r8
     380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     384:	e7c0      	b.n	308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>
     386:	428b      	cmp	r3, r1
     388:	d908      	bls.n	39c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x9c>
     38a:	2e00      	cmp	r6, #0
     38c:	f000 80af 	beq.w	4ee <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6>
     390:	2100      	movs	r1, #0
     392:	e9c6 0500 	strd	r0, r5, [r6]
     396:	4608      	mov	r0, r1
     398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     39c:	fab3 f183 	clz	r1, r3
     3a0:	2900      	cmp	r1, #0
     3a2:	d14b      	bne.n	43c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x3c>
     3a4:	42ab      	cmp	r3, r5
     3a6:	d302      	bcc.n	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     3a8:	4282      	cmp	r2, r0
     3aa:	f200 80b7 	bhi.w	51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>
     3ae:	1a84      	subs	r4, r0, r2
     3b0:	eb65 0303 	sbc.w	r3, r5, r3
     3b4:	2001      	movs	r0, #1
     3b6:	469e      	mov	lr, r3
     3b8:	2e00      	cmp	r6, #0
     3ba:	d0aa      	beq.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     3bc:	e9c6 4e00 	strd	r4, lr, [r6]
     3c0:	e7a7      	b.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     3c2:	f1c2 0c20 	rsb	ip, r2, #32
     3c6:	fa01 f302 	lsl.w	r3, r1, r2
     3ca:	4097      	lsls	r7, r2
     3cc:	fa20 f00c 	lsr.w	r0, r0, ip
     3d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     3d4:	fa21 fc0c 	lsr.w	ip, r1, ip
     3d8:	4318      	orrs	r0, r3
     3da:	fbbc f1fe 	udiv	r1, ip, lr
     3de:	0c05      	lsrs	r5, r0, #16
     3e0:	fb0e cc11 	mls	ip, lr, r1, ip
     3e4:	fa1f f887 	uxth.w	r8, r7
     3e8:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     3ec:	fb01 f308 	mul.w	r3, r1, r8
     3f0:	42ab      	cmp	r3, r5
     3f2:	fa04 f402 	lsl.w	r4, r4, r2
     3f6:	d909      	bls.n	40c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xc>
     3f8:	197d      	adds	r5, r7, r5
     3fa:	f101 3cff 	add.w	ip, r1, #4294967295
     3fe:	f080 808b 	bcs.w	518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>
     402:	42ab      	cmp	r3, r5
     404:	f240 8088 	bls.w	518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>
     408:	3902      	subs	r1, #2
     40a:	443d      	add	r5, r7
     40c:	1aeb      	subs	r3, r5, r3
     40e:	b285      	uxth	r5, r0
     410:	fbb3 f0fe 	udiv	r0, r3, lr
     414:	fb0e 3310 	mls	r3, lr, r0, r3
     418:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     41c:	fb00 f308 	mul.w	r3, r0, r8
     420:	42ab      	cmp	r3, r5
     422:	d907      	bls.n	434 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x34>
     424:	197d      	adds	r5, r7, r5
     426:	f100 3cff 	add.w	ip, r0, #4294967295
     42a:	d271      	bcs.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     42c:	42ab      	cmp	r3, r5
     42e:	d96f      	bls.n	510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>
     430:	3802      	subs	r0, #2
     432:	443d      	add	r5, r7
     434:	1aeb      	subs	r3, r5, r3
     436:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     43a:	e778      	b.n	32e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x2e>
     43c:	f1c1 0c20 	rsb	ip, r1, #32
     440:	408b      	lsls	r3, r1
     442:	fa22 f70c 	lsr.w	r7, r2, ip
     446:	431f      	orrs	r7, r3
     448:	fa20 f40c 	lsr.w	r4, r0, ip
     44c:	fa05 f301 	lsl.w	r3, r5, r1
     450:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     454:	fa25 f50c 	lsr.w	r5, r5, ip
     458:	431c      	orrs	r4, r3
     45a:	0c23      	lsrs	r3, r4, #16
     45c:	fbb5 f9fe 	udiv	r9, r5, lr
     460:	fa1f f887 	uxth.w	r8, r7
     464:	fb0e 5519 	mls	r5, lr, r9, r5
     468:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     46c:	fb09 fa08 	mul.w	sl, r9, r8
     470:	45aa      	cmp	sl, r5
     472:	fa02 f201 	lsl.w	r2, r2, r1
     476:	fa00 f301 	lsl.w	r3, r0, r1
     47a:	d908      	bls.n	48e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     47c:	197d      	adds	r5, r7, r5
     47e:	f109 30ff 	add.w	r0, r9, #4294967295
     482:	d247      	bcs.n	514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
     484:	45aa      	cmp	sl, r5
     486:	d945      	bls.n	514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
     488:	f1a9 0902 	sub.w	r9, r9, #2
     48c:	443d      	add	r5, r7
     48e:	eba5 050a 	sub.w	r5, r5, sl
     492:	b2a4      	uxth	r4, r4
     494:	fbb5 f0fe 	udiv	r0, r5, lr
     498:	fb0e 5510 	mls	r5, lr, r0, r5
     49c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     4a0:	fb00 f808 	mul.w	r8, r0, r8
     4a4:	45a0      	cmp	r8, r4
     4a6:	d907      	bls.n	4b8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x44>
     4a8:	193c      	adds	r4, r7, r4
     4aa:	f100 35ff 	add.w	r5, r0, #4294967295
     4ae:	d22d      	bcs.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     4b0:	45a0      	cmp	r8, r4
     4b2:	d92b      	bls.n	50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>
     4b4:	3802      	subs	r0, #2
     4b6:	443c      	add	r4, r7
     4b8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     4bc:	eba4 0408 	sub.w	r4, r4, r8
     4c0:	fba0 8902 	umull	r8, r9, r0, r2
     4c4:	454c      	cmp	r4, r9
     4c6:	46c6      	mov	lr, r8
     4c8:	464d      	mov	r5, r9
     4ca:	d319      	bcc.n	500 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x18>
     4cc:	d016      	beq.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     4ce:	b15e      	cbz	r6, 4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>
     4d0:	ebb3 020e 	subs.w	r2, r3, lr
     4d4:	eb64 0405 	sbc.w	r4, r4, r5
     4d8:	fa04 fc0c 	lsl.w	ip, r4, ip
     4dc:	40ca      	lsrs	r2, r1
     4de:	ea4c 0202 	orr.w	r2, ip, r2
     4e2:	40cc      	lsrs	r4, r1
     4e4:	e9c6 2400 	strd	r2, r4, [r6]
     4e8:	2100      	movs	r1, #0
     4ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     4ee:	4631      	mov	r1, r6
     4f0:	4630      	mov	r0, r6
     4f2:	e70e      	b.n	312 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x12>
     4f4:	46ac      	mov	ip, r5
     4f6:	e6ed      	b.n	2d4 <__udivmoddi4+0x64>
     4f8:	4618      	mov	r0, r3
     4fa:	e701      	b.n	300 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE>
     4fc:	4543      	cmp	r3, r8
     4fe:	d2e6      	bcs.n	4ce <CONFIG_BT_HCI_ECC_STACK_SIZE+0x5a>
     500:	ebb8 0e02 	subs.w	lr, r8, r2
     504:	eb69 0507 	sbc.w	r5, r9, r7
     508:	3801      	subs	r0, #1
     50a:	e7e0      	b.n	4ce <CONFIG_BT_HCI_ECC_STACK_SIZE+0x5a>
     50c:	4628      	mov	r0, r5
     50e:	e7d3      	b.n	4b8 <CONFIG_BT_HCI_ECC_STACK_SIZE+0x44>
     510:	4660      	mov	r0, ip
     512:	e78f      	b.n	434 <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0x34>
     514:	4681      	mov	r9, r0
     516:	e7ba      	b.n	48e <CONFIG_BT_HCI_ECC_STACK_SIZE+0x1a>
     518:	4661      	mov	r1, ip
     51a:	e777      	b.n	40c <CONFIG_BT_CTLR_SDC_RX_STACK_SIZE+0xc>
     51c:	4608      	mov	r0, r1
     51e:	e74b      	b.n	3b8 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb8>
     520:	f1ac 0c02 	sub.w	ip, ip, #2
     524:	443d      	add	r5, r7
     526:	e715      	b.n	354 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x54>
     528:	3802      	subs	r0, #2
     52a:	443c      	add	r4, r7
     52c:	e726      	b.n	37c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7c>
     52e:	bf00      	nop

00000530 <__aeabi_idiv0>:
     530:	4770      	bx	lr
     532:	bf00      	nop

00000534 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>:
     534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     536:	4615      	mov	r5, r2
     538:	4a0a      	ldr	r2, [pc, #40]	; (564 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x30>)
     53a:	461c      	mov	r4, r3
     53c:	6856      	ldr	r6, [r2, #4]
     53e:	b12e      	cbz	r6, 54c <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I+0x18>
     540:	b001      	add	sp, #4
     542:	462a      	mov	r2, r5
     544:	46b4      	mov	ip, r6
     546:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
     54a:	4760      	bx	ip
     54c:	2000      	movs	r0, #0
     54e:	f88d 0000 	strb.w	r0, [sp]
     552:	4668      	mov	r0, sp
     554:	f00b ff36 	bl	c3c4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>
     558:	f89d 0000 	ldrb.w	r0, [sp]
     55c:	1a28      	subs	r0, r5, r0
     55e:	7020      	strb	r0, [r4, #0]
     560:	2000      	movs	r0, #0
     562:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     564:	20000000 	.word	0x20000000

00000568 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>:
     568:	4801      	ldr	r0, [pc, #4]	; (570 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A+0x8>)
     56a:	7800      	ldrb	r0, [r0, #0]
     56c:	4770      	bx	lr
     56e:	0000      	.short	0x0000
     570:	20000008 	.word	0x20000008

00000574 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>:
     574:	4905      	ldr	r1, [pc, #20]	; (58c <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x18>)
     576:	780a      	ldrb	r2, [r1, #0]
     578:	4290      	cmp	r0, r2
     57a:	d301      	bcc.n	580 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0xc>
     57c:	2000      	movs	r0, #0
     57e:	4770      	bx	lr
     580:	6849      	ldr	r1, [r1, #4]
     582:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
     586:	eb01 0080 	add.w	r0, r1, r0, lsl #2
     58a:	4770      	bx	lr
     58c:	20000008 	.word	0x20000008
     590:	b570      	push	{r4, r5, r6, lr}
     592:	4605      	mov	r5, r0
     594:	2a20      	cmp	r2, #32
     596:	d027      	beq.n	5e8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x74>
     598:	4819      	ldr	r0, [pc, #100]	; (600 <CONFIG_BT_HCI_TX_STACK_SIZE>)
     59a:	4c1a      	ldr	r4, [pc, #104]	; (604 <CONFIG_BT_HCI_TX_STACK_SIZE+0x4>)
     59c:	eb00 1c83 	add.w	ip, r0, r3, lsl #6
     5a0:	eb0c 0042 	add.w	r0, ip, r2, lsl #1
     5a4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
     5a8:	2920      	cmp	r1, #32
     5aa:	d022      	beq.n	5f2 <CONFIG_BT_COMPANY_ID+0x1>
     5ac:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
     5b0:	7840      	ldrb	r0, [r0, #1]
     5b2:	784c      	ldrb	r4, [r1, #1]
     5b4:	7048      	strb	r0, [r1, #1]
     5b6:	4620      	mov	r0, r4
     5b8:	4601      	mov	r1, r0
     5ba:	eb0c 0041 	add.w	r0, ip, r1, lsl #1
     5be:	4291      	cmp	r1, r2
     5c0:	7005      	strb	r5, [r0, #0]
     5c2:	7840      	ldrb	r0, [r0, #1]
     5c4:	d1f8      	bne.n	5b8 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x44>
     5c6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
     5ca:	2a20      	cmp	r2, #32
     5cc:	bf1a      	itte	ne
     5ce:	eb0c 0242 	addne.w	r2, ip, r2, lsl #1
     5d2:	7054      	strbne	r4, [r2, #1]
     5d4:	f883 4021 	strbeq.w	r4, [r3, #33]	; 0x21
     5d8:	2220      	movs	r2, #32
     5da:	eb0c 0c41 	add.w	ip, ip, r1, lsl #1
     5de:	f88c 2001 	strb.w	r2, [ip, #1]
     5e2:	f883 1022 	strb.w	r1, [r3, #34]	; 0x22
     5e6:	bd70      	pop	{r4, r5, r6, pc}
     5e8:	f240 217e 	movw	r1, #638	; 0x27e
     5ec:	2070      	movs	r0, #112	; 0x70
     5ee:	f003 f987 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     5f2:	f893 4020 	ldrb.w	r4, [r3, #32]
     5f6:	7840      	ldrb	r0, [r0, #1]
     5f8:	f883 0020 	strb.w	r0, [r3, #32]
     5fc:	e7db      	b.n	5b6 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x42>
     5fe:	0000      	.short	0x0000
     600:	20000e8c 	.word	0x20000e8c
     604:	20000f0c 	.word	0x20000f0c
     608:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     60c:	b085      	sub	sp, #20
     60e:	4615      	mov	r5, r2
     610:	460c      	mov	r4, r1
     612:	f002 f915 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     616:	4428      	add	r0, r5
     618:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     61c:	9002      	str	r0, [sp, #8]
     61e:	6821      	ldr	r1, [r4, #0]
     620:	1a08      	subs	r0, r1, r0
     622:	0200      	lsls	r0, r0, #8
     624:	17c1      	asrs	r1, r0, #31
     626:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     62a:	1200      	asrs	r0, r0, #8
     62c:	2800      	cmp	r0, #0
     62e:	f300 80d5 	bgt.w	7dc <__data_size+0xb4>
     632:	48ac      	ldr	r0, [pc, #688]	; (8e4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe4>)
     634:	9f08      	ldr	r7, [sp, #32]
     636:	4eac      	ldr	r6, [pc, #688]	; (8e8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xe8>)
     638:	eb00 0087 	add.w	r0, r0, r7, lsl #2
     63c:	9003      	str	r0, [sp, #12]
     63e:	f890 5020 	ldrb.w	r5, [r0, #32]
     642:	2020      	movs	r0, #32
     644:	46e9      	mov	r9, sp
     646:	f10d 0804 	add.w	r8, sp, #4
     64a:	f88d 0000 	strb.w	r0, [sp]
     64e:	f506 7a40 	add.w	sl, r6, #768	; 0x300
     652:	2d20      	cmp	r5, #32
     654:	bf18      	it	ne
     656:	eb0a 1b87 	addne.w	fp, sl, r7, lsl #6
     65a:	d025      	beq.n	6a8 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa8>
     65c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     660:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     664:	6822      	ldr	r2, [r4, #0]
     666:	68c1      	ldr	r1, [r0, #12]
     668:	1a51      	subs	r1, r2, r1
     66a:	0209      	lsls	r1, r1, #8
     66c:	17ca      	asrs	r2, r1, #31
     66e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     672:	3008      	adds	r0, #8
     674:	1209      	asrs	r1, r1, #8
     676:	d417      	bmi.n	6a8 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa8>
     678:	8961      	ldrh	r1, [r4, #10]
     67a:	b171      	cbz	r1, 69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     67c:	8941      	ldrh	r1, [r0, #10]
     67e:	b961      	cbnz	r1, 69a <CONFIG_BT_HCI_TX_STACK_SIZE+0x9a>
     680:	f000 fdb4 	bl	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
     684:	f002 f8dc 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     688:	6821      	ldr	r1, [r4, #0]
     68a:	1a08      	subs	r0, r1, r0
     68c:	0200      	lsls	r0, r0, #8
     68e:	17c1      	asrs	r1, r0, #31
     690:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     694:	1200      	asrs	r0, r0, #8
     696:	2833      	cmp	r0, #51	; 0x33
     698:	db06      	blt.n	6a8 <CONFIG_BT_HCI_TX_STACK_SIZE+0xa8>
     69a:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     69e:	f889 5000 	strb.w	r5, [r9]
     6a2:	7845      	ldrb	r5, [r0, #1]
     6a4:	2d20      	cmp	r5, #32
     6a6:	d1d9      	bne.n	65c <CONFIG_BT_HCI_TX_STACK_SIZE+0x5c>
     6a8:	f899 0000 	ldrb.w	r0, [r9]
     6ac:	f888 0000 	strb.w	r0, [r8]
     6b0:	46a1      	mov	r9, r4
     6b2:	2d20      	cmp	r5, #32
     6b4:	bf1c      	itt	ne
     6b6:	488d      	ldrne	r0, [pc, #564]	; (8ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xec>)
     6b8:	eb00 1b87 	addne.w	fp, r0, r7, lsl #6
     6bc:	f000 810e 	beq.w	8dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xdc>
     6c0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     6c4:	eb06 0ac1 	add.w	sl, r6, r1, lsl #3
     6c8:	f8d9 2004 	ldr.w	r2, [r9, #4]
     6cc:	f8da 1008 	ldr.w	r1, [sl, #8]
     6d0:	4648      	mov	r0, r9
     6d2:	1a89      	subs	r1, r1, r2
     6d4:	0209      	lsls	r1, r1, #8
     6d6:	17ca      	asrs	r2, r1, #31
     6d8:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     6dc:	f10a 0708 	add.w	r7, sl, #8
     6e0:	1209      	asrs	r1, r1, #8
     6e2:	d415      	bmi.n	710 <CONFIG_BT_HCI_TX_STACK_SIZE+0x110>
     6e4:	8979      	ldrh	r1, [r7, #10]
     6e6:	2900      	cmp	r1, #0
     6e8:	f000 80f8 	beq.w	8dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xdc>
     6ec:	8941      	ldrh	r1, [r0, #10]
     6ee:	2900      	cmp	r1, #0
     6f0:	f040 80f4 	bne.w	8dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xdc>
     6f4:	f000 fd7a 	bl	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
     6f8:	f002 f8a2 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     6fc:	6839      	ldr	r1, [r7, #0]
     6fe:	1a08      	subs	r0, r1, r0
     700:	0200      	lsls	r0, r0, #8
     702:	17c1      	asrs	r1, r0, #31
     704:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     708:	1200      	asrs	r0, r0, #8
     70a:	2833      	cmp	r0, #51	; 0x33
     70c:	f280 80e6 	bge.w	8dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xdc>
     710:	f888 5000 	strb.w	r5, [r8]
     714:	f89a 1014 	ldrb.w	r1, [sl, #20]
     718:	f899 000c 	ldrb.w	r0, [r9, #12]
     71c:	4281      	cmp	r1, r0
     71e:	d906      	bls.n	72e <__data_size+0x6>
     720:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     724:	7845      	ldrb	r5, [r0, #1]
     726:	2d20      	cmp	r5, #32
     728:	d1ca      	bne.n	6c0 <CONFIG_BT_HCI_TX_STACK_SIZE+0xc0>
     72a:	f000 b8d7 	b.w	8dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xdc>
     72e:	f89d 0004 	ldrb.w	r0, [sp, #4]
     732:	eb00 0040 	add.w	r0, r0, r0, lsl #1
     736:	eb06 05c0 	add.w	r5, r6, r0, lsl #3
     73a:	8a68      	ldrh	r0, [r5, #18]
     73c:	68ef      	ldr	r7, [r5, #12]
     73e:	2800      	cmp	r0, #0
     740:	d143      	bne.n	7ca <__data_size+0xa2>
     742:	8960      	ldrh	r0, [r4, #10]
     744:	b3e8      	cbz	r0, 7c2 <__data_size+0x9a>
     746:	68a8      	ldr	r0, [r5, #8]
     748:	f00b fe5c 	bl	c404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     74c:	8a69      	ldrh	r1, [r5, #18]
     74e:	7c2a      	ldrb	r2, [r5, #16]
     750:	4b67      	ldr	r3, [pc, #412]	; (8f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf0>)
     752:	4411      	add	r1, r2
     754:	1c49      	adds	r1, r1, #1
     756:	1842      	adds	r2, r0, r1
     758:	4298      	cmp	r0, r3
     75a:	d904      	bls.n	766 <__data_size+0x3e>
     75c:	f240 6109 	movw	r1, #1545	; 0x609
     760:	2070      	movs	r0, #112	; 0x70
     762:	f003 f8cd 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     766:	4863      	ldr	r0, [pc, #396]	; (8f4 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf4>)
     768:	4281      	cmp	r1, r0
     76a:	dd04      	ble.n	776 <__data_size+0x4e>
     76c:	f240 610a 	movw	r1, #1546	; 0x60a
     770:	2070      	movs	r0, #112	; 0x70
     772:	f003 f8c5 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     776:	4860      	ldr	r0, [pc, #384]	; (8f8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xf8>)
     778:	4281      	cmp	r1, r0
     77a:	da04      	bge.n	786 <__data_size+0x5e>
     77c:	f240 610b 	movw	r1, #1547	; 0x60b
     780:	2070      	movs	r0, #112	; 0x70
     782:	f003 f8bd 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     786:	485d      	ldr	r0, [pc, #372]	; (8fc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xfc>)
     788:	4290      	cmp	r0, r2
     78a:	bfdc      	itt	le
     78c:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
     790:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
     794:	dd05      	ble.n	7a2 <__data_size+0x7a>
     796:	2a00      	cmp	r2, #0
     798:	bfbc      	itt	lt
     79a:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
     79e:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
     7a2:	4610      	mov	r0, r2
     7a4:	f002 f84c 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     7a8:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     7ac:	1a78      	subs	r0, r7, r1
     7ae:	0200      	lsls	r0, r0, #8
     7b0:	17c2      	asrs	r2, r0, #31
     7b2:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     7b6:	1200      	asrs	r0, r0, #8
     7b8:	2833      	cmp	r0, #51	; 0x33
     7ba:	bfb8      	it	lt
     7bc:	f101 0033 	addlt.w	r0, r1, #51	; 0x33
     7c0:	e000      	b.n	7c4 <__data_size+0x9c>
     7c2:	e002      	b.n	7ca <__data_size+0xa2>
     7c4:	bfb8      	it	lt
     7c6:	f020 477f 	biclt.w	r7, r0, #4278190080	; 0xff000000
     7ca:	9802      	ldr	r0, [sp, #8]
     7cc:	1a38      	subs	r0, r7, r0
     7ce:	0200      	lsls	r0, r0, #8
     7d0:	17c1      	asrs	r1, r0, #31
     7d2:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     7d6:	1200      	asrs	r0, r0, #8
     7d8:	2800      	cmp	r0, #0
     7da:	dd03      	ble.n	7e4 <__data_size+0xbc>
     7dc:	b009      	add	sp, #36	; 0x24
     7de:	2000      	movs	r0, #0
     7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     7e4:	e9d4 1000 	ldrd	r1, r0, [r4]
     7e8:	1a40      	subs	r0, r0, r1
     7ea:	4438      	add	r0, r7
     7ec:	f027 417f 	bic.w	r1, r7, #4278190080	; 0xff000000
     7f0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     7f4:	e9c4 1000 	strd	r1, r0, [r4]
     7f8:	9803      	ldr	r0, [sp, #12]
     7fa:	f8dd 8020 	ldr.w	r8, [sp, #32]
     7fe:	466f      	mov	r7, sp
     800:	f890 5020 	ldrb.w	r5, [r0, #32]
     804:	2020      	movs	r0, #32
     806:	f10d 0a04 	add.w	sl, sp, #4
     80a:	f88d 0000 	strb.w	r0, [sp]
     80e:	2d20      	cmp	r5, #32
     810:	bf1c      	itt	ne
     812:	4836      	ldrne	r0, [pc, #216]	; (8ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xec>)
     814:	eb00 1988 	addne.w	r9, r0, r8, lsl #6
     818:	d025      	beq.n	866 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x66>
     81a:	bf00      	nop
     81c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     820:	eb06 00c0 	add.w	r0, r6, r0, lsl #3
     824:	6822      	ldr	r2, [r4, #0]
     826:	68c1      	ldr	r1, [r0, #12]
     828:	1a51      	subs	r1, r2, r1
     82a:	0209      	lsls	r1, r1, #8
     82c:	17ca      	asrs	r2, r1, #31
     82e:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     832:	3008      	adds	r0, #8
     834:	1209      	asrs	r1, r1, #8
     836:	d416      	bmi.n	866 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x66>
     838:	8961      	ldrh	r1, [r4, #10]
     83a:	b171      	cbz	r1, 85a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5a>
     83c:	8941      	ldrh	r1, [r0, #10]
     83e:	b961      	cbnz	r1, 85a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5a>
     840:	f000 fcd4 	bl	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
     844:	f001 fffc 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     848:	6821      	ldr	r1, [r4, #0]
     84a:	1a08      	subs	r0, r1, r0
     84c:	0200      	lsls	r0, r0, #8
     84e:	17c1      	asrs	r1, r0, #31
     850:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     854:	1200      	asrs	r0, r0, #8
     856:	2833      	cmp	r0, #51	; 0x33
     858:	db05      	blt.n	866 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x66>
     85a:	eb09 0045 	add.w	r0, r9, r5, lsl #1
     85e:	703d      	strb	r5, [r7, #0]
     860:	7845      	ldrb	r5, [r0, #1]
     862:	2d20      	cmp	r5, #32
     864:	d1da      	bne.n	81c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1c>
     866:	7838      	ldrb	r0, [r7, #0]
     868:	f88a 0000 	strb.w	r0, [sl]
     86c:	4627      	mov	r7, r4
     86e:	2d20      	cmp	r5, #32
     870:	bf1c      	itt	ne
     872:	481e      	ldrne	r0, [pc, #120]	; (8ec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xec>)
     874:	eb00 1b88 	addne.w	fp, r0, r8, lsl #6
     878:	d030      	beq.n	8dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xdc>
     87a:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     87e:	eb06 09c1 	add.w	r9, r6, r1, lsl #3
     882:	6879      	ldr	r1, [r7, #4]
     884:	f8d9 2008 	ldr.w	r2, [r9, #8]
     888:	4638      	mov	r0, r7
     88a:	1a51      	subs	r1, r2, r1
     88c:	0209      	lsls	r1, r1, #8
     88e:	17ca      	asrs	r2, r1, #31
     890:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     894:	f109 0808 	add.w	r8, r9, #8
     898:	1209      	asrs	r1, r1, #8
     89a:	d412      	bmi.n	8c2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xc2>
     89c:	f8b8 100a 	ldrh.w	r1, [r8, #10]
     8a0:	b1e1      	cbz	r1, 8dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xdc>
     8a2:	8941      	ldrh	r1, [r0, #10]
     8a4:	b9d1      	cbnz	r1, 8dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xdc>
     8a6:	f000 fca1 	bl	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
     8aa:	f001 ffc9 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     8ae:	f8d8 1000 	ldr.w	r1, [r8]
     8b2:	1a08      	subs	r0, r1, r0
     8b4:	0200      	lsls	r0, r0, #8
     8b6:	17c1      	asrs	r1, r0, #31
     8b8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     8bc:	1200      	asrs	r0, r0, #8
     8be:	2833      	cmp	r0, #51	; 0x33
     8c0:	da0c      	bge.n	8dc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0xdc>
     8c2:	f88a 5000 	strb.w	r5, [sl]
     8c6:	f899 0014 	ldrb.w	r0, [r9, #20]
     8ca:	7b39      	ldrb	r1, [r7, #12]
     8cc:	4288      	cmp	r0, r1
     8ce:	f67f af2e 	bls.w	72e <__data_size+0x6>
     8d2:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     8d6:	7845      	ldrb	r5, [r0, #1]
     8d8:	2d20      	cmp	r5, #32
     8da:	d1ce      	bne.n	87a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7a>
     8dc:	b009      	add	sp, #36	; 0x24
     8de:	2001      	movs	r0, #1
     8e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     8e4:	20000f0c 	.word	0x20000f0c
     8e8:	20000b8c 	.word	0x20000b8c
     8ec:	20000e8c 	.word	0x20000e8c
     8f0:	1e847fff 	.word	0x1e847fff
     8f4:	07a12000 	.word	0x07a12000
     8f8:	f85ee000 	.word	0xf85ee000
     8fc:	1e848000 	.word	0x1e848000
     900:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
     904:	4604      	mov	r4, r0
     906:	483c      	ldr	r0, [pc, #240]	; (9f8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f8>)
     908:	460e      	mov	r6, r1
     90a:	eb00 0086 	add.w	r0, r0, r6, lsl #2
     90e:	4f3b      	ldr	r7, [pc, #236]	; (9fc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1fc>)
     910:	f890 5020 	ldrb.w	r5, [r0, #32]
     914:	2020      	movs	r0, #32
     916:	4698      	mov	r8, r3
     918:	4692      	mov	sl, r2
     91a:	7010      	strb	r0, [r2, #0]
     91c:	f507 7940 	add.w	r9, r7, #768	; 0x300
     920:	2d20      	cmp	r5, #32
     922:	bf18      	it	ne
     924:	eb09 1b86 	addne.w	fp, r9, r6, lsl #6
     928:	d028      	beq.n	97c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x17c>
     92a:	bf00      	nop
     92c:	eb05 0045 	add.w	r0, r5, r5, lsl #1
     930:	eb07 00c0 	add.w	r0, r7, r0, lsl #3
     934:	f100 0108 	add.w	r1, r0, #8
     938:	68c0      	ldr	r0, [r0, #12]
     93a:	6822      	ldr	r2, [r4, #0]
     93c:	1a10      	subs	r0, r2, r0
     93e:	0200      	lsls	r0, r0, #8
     940:	17c2      	asrs	r2, r0, #31
     942:	eb00 6012 	add.w	r0, r0, r2, lsr #24
     946:	1200      	asrs	r0, r0, #8
     948:	d418      	bmi.n	97c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x17c>
     94a:	8960      	ldrh	r0, [r4, #10]
     94c:	b178      	cbz	r0, 96e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16e>
     94e:	8948      	ldrh	r0, [r1, #10]
     950:	b968      	cbnz	r0, 96e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x16e>
     952:	4608      	mov	r0, r1
     954:	f000 fc4a 	bl	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
     958:	f001 ff72 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     95c:	6821      	ldr	r1, [r4, #0]
     95e:	1a08      	subs	r0, r1, r0
     960:	0200      	lsls	r0, r0, #8
     962:	17c1      	asrs	r1, r0, #31
     964:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     968:	1200      	asrs	r0, r0, #8
     96a:	2833      	cmp	r0, #51	; 0x33
     96c:	db06      	blt.n	97c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x17c>
     96e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
     972:	f88a 5000 	strb.w	r5, [sl]
     976:	7845      	ldrb	r5, [r0, #1]
     978:	2d20      	cmp	r5, #32
     97a:	d1d7      	bne.n	92c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x12c>
     97c:	f89a 0000 	ldrb.w	r0, [sl]
     980:	f888 0000 	strb.w	r0, [r8]
     984:	2d20      	cmp	r5, #32
     986:	bf18      	it	ne
     988:	eb09 1a86 	addne.w	sl, r9, r6, lsl #6
     98c:	d030      	beq.n	9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>
     98e:	eb05 0145 	add.w	r1, r5, r5, lsl #1
     992:	eb07 09c1 	add.w	r9, r7, r1, lsl #3
     996:	6861      	ldr	r1, [r4, #4]
     998:	f8d9 2008 	ldr.w	r2, [r9, #8]
     99c:	4620      	mov	r0, r4
     99e:	1a51      	subs	r1, r2, r1
     9a0:	0209      	lsls	r1, r1, #8
     9a2:	17ca      	asrs	r2, r1, #31
     9a4:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     9a8:	f109 0608 	add.w	r6, r9, #8
     9ac:	1209      	asrs	r1, r1, #8
     9ae:	d410      	bmi.n	9d2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1d2>
     9b0:	8971      	ldrh	r1, [r6, #10]
     9b2:	b1e9      	cbz	r1, 9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>
     9b4:	8941      	ldrh	r1, [r0, #10]
     9b6:	b9d9      	cbnz	r1, 9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>
     9b8:	f000 fc18 	bl	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
     9bc:	f001 ff40 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     9c0:	6831      	ldr	r1, [r6, #0]
     9c2:	1a08      	subs	r0, r1, r0
     9c4:	0200      	lsls	r0, r0, #8
     9c6:	17c1      	asrs	r1, r0, #31
     9c8:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     9cc:	1200      	asrs	r0, r0, #8
     9ce:	2833      	cmp	r0, #51	; 0x33
     9d0:	da0e      	bge.n	9f0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1f0>
     9d2:	f888 5000 	strb.w	r5, [r8]
     9d6:	f899 0014 	ldrb.w	r0, [r9, #20]
     9da:	7b21      	ldrb	r1, [r4, #12]
     9dc:	4288      	cmp	r0, r1
     9de:	d802      	bhi.n	9e6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x1e6>
     9e0:	2000      	movs	r0, #0
     9e2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9e6:	eb0a 0045 	add.w	r0, sl, r5, lsl #1
     9ea:	7845      	ldrb	r5, [r0, #1]
     9ec:	2d20      	cmp	r5, #32
     9ee:	d1ce      	bne.n	98e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x18e>
     9f0:	2001      	movs	r0, #1
     9f2:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
     9f6:	0000      	.short	0x0000
     9f8:	20000f0c 	.word	0x20000f0c
     9fc:	20000b8c 	.word	0x20000b8c
     a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a04:	b098      	sub	sp, #96	; 0x60
     a06:	4616      	mov	r6, r2
     a08:	460d      	mov	r5, r1
     a0a:	f04f 0800 	mov.w	r8, #0
     a0e:	f04f 0b01 	mov.w	fp, #1
     a12:	f002 f997 	bl	2d44 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>
     a16:	4604      	mov	r4, r0
     a18:	2d01      	cmp	r5, #1
     a1a:	bf18      	it	ne
     a1c:	2d02      	cmpne	r5, #2
     a1e:	d005      	beq.n	a2c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x22c>
     a20:	f640 1194 	movw	r1, #2452	; 0x994
     a24:	f04f 0070 	mov.w	r0, #112	; 0x70
     a28:	f002 ff6a 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     a2c:	49f9      	ldr	r1, [pc, #996]	; (e14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x614>)
     a2e:	2001      	movs	r0, #1
     a30:	6008      	str	r0, [r1, #0]
     a32:	49f9      	ldr	r1, [pc, #996]	; (e18 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x618>)
     a34:	6889      	ldr	r1, [r1, #8]
     a36:	6008      	str	r0, [r1, #0]
     a38:	2000      	movs	r0, #0
     a3a:	f88d 004e 	strb.w	r0, [sp, #78]	; 0x4e
     a3e:	900c      	str	r0, [sp, #48]	; 0x30
     a40:	1e40      	subs	r0, r0, #1
     a42:	900e      	str	r0, [sp, #56]	; 0x38
     a44:	49f5      	ldr	r1, [pc, #980]	; (e1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x61c>)
     a46:	eb06 0046 	add.w	r0, r6, r6, lsl #1
     a4a:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
     a4e:	3308      	adds	r3, #8
     a50:	af0f      	add	r7, sp, #60	; 0x3c
     a52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
     a54:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
     a58:	a80f      	add	r0, sp, #60	; 0x3c
     a5a:	f000 fbc7 	bl	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
     a5e:	900d      	str	r0, [sp, #52]	; 0x34
     a60:	48ee      	ldr	r0, [pc, #952]	; (e1c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x61c>)
     a62:	f8bd 9046 	ldrh.w	r9, [sp, #70]	; 0x46
     a66:	f8b0 039c 	ldrh.w	r0, [r0, #924]	; 0x39c
     a6a:	f8ad 004c 	strh.w	r0, [sp, #76]	; 0x4c
     a6e:	f1b9 0f00 	cmp.w	r9, #0
     a72:	bf14      	ite	ne
     a74:	f04f 0a01 	movne.w	sl, #1
     a78:	f04f 0a00 	moveq.w	sl, #0
     a7c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     a7e:	9014      	str	r0, [sp, #80]	; 0x50
     a80:	f1ba 0f00 	cmp.w	sl, #0
     a84:	d009      	beq.n	a9a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x29a>
     a86:	48e6      	ldr	r0, [pc, #920]	; (e20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x620>)
     a88:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
     a8c:	b928      	cbnz	r0, a9a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x29a>
     a8e:	f002 febf 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
     a92:	2800      	cmp	r0, #0
     a94:	bf08      	it	eq
     a96:	2701      	moveq	r7, #1
     a98:	d000      	beq.n	a9c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x29c>
     a9a:	2700      	movs	r7, #0
     a9c:	48e1      	ldr	r0, [pc, #900]	; (e24 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x624>)
     a9e:	2200      	movs	r2, #0
     aa0:	9215      	str	r2, [sp, #84]	; 0x54
     aa2:	7800      	ldrb	r0, [r0, #0]
     aa4:	4616      	mov	r6, r2
     aa6:	2801      	cmp	r0, #1
     aa8:	bf18      	it	ne
     aaa:	2803      	cmpne	r0, #3
     aac:	d140      	bne.n	b30 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x330>
     aae:	48dd      	ldr	r0, [pc, #884]	; (e24 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x624>)
     ab0:	f8b0 8002 	ldrh.w	r8, [r0, #2]
     ab4:	eba8 0009 	sub.w	r0, r8, r9
     ab8:	9015      	str	r0, [sp, #84]	; 0x54
     aba:	45c8      	cmp	r8, r9
     abc:	d938      	bls.n	b30 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x330>
     abe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
     ac0:	ea6f 0108 	mvn.w	r1, r8
     ac4:	f8df e360 	ldr.w	lr, [pc, #864]	; e28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x628>
     ac8:	1858      	adds	r0, r3, r1
     aca:	f10d 0c0c 	add.w	ip, sp, #12
     ace:	aa17      	add	r2, sp, #92	; 0x5c
     ad0:	4573      	cmp	r3, lr
     ad2:	d904      	bls.n	ade <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2de>
     ad4:	f240 6109 	movw	r1, #1545	; 0x609
     ad8:	2070      	movs	r0, #112	; 0x70
     ada:	f002 ff11 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ade:	4bd3      	ldr	r3, [pc, #844]	; (e2c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x62c>)
     ae0:	4299      	cmp	r1, r3
     ae2:	dd04      	ble.n	aee <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2ee>
     ae4:	f240 610a 	movw	r1, #1546	; 0x60a
     ae8:	2070      	movs	r0, #112	; 0x70
     aea:	f002 ff09 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     aee:	4bd0      	ldr	r3, [pc, #832]	; (e30 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x630>)
     af0:	4299      	cmp	r1, r3
     af2:	da04      	bge.n	afe <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x2fe>
     af4:	f240 610b 	movw	r1, #1547	; 0x60b
     af8:	2070      	movs	r0, #112	; 0x70
     afa:	f002 ff01 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     afe:	49cd      	ldr	r1, [pc, #820]	; (e34 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x634>)
     b00:	4281      	cmp	r1, r0
     b02:	bfdc      	itt	le
     b04:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     b08:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     b0c:	dd05      	ble.n	b1a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x31a>
     b0e:	2800      	cmp	r0, #0
     b10:	bfbc      	itt	lt
     b12:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     b16:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     b1a:	4661      	mov	r1, ip
     b1c:	f001 feac 	bl	2878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     b20:	9803      	ldr	r0, [sp, #12]
     b22:	990f      	ldr	r1, [sp, #60]	; 0x3c
     b24:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b28:	9003      	str	r0, [sp, #12]
     b2a:	1a08      	subs	r0, r1, r0
     b2c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
     b30:	2f00      	cmp	r7, #0
     b32:	bf18      	it	ne
     b34:	2632      	movne	r6, #50	; 0x32
     b36:	d104      	bne.n	b42 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x342>
     b38:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b3c:	2800      	cmp	r0, #0
     b3e:	bf18      	it	ne
     b40:	2602      	movne	r6, #2
     b42:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     b46:	d008      	beq.n	b5a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x35a>
     b48:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b4a:	1b00      	subs	r0, r0, r4
     b4c:	0200      	lsls	r0, r0, #8
     b4e:	17c1      	asrs	r1, r0, #31
     b50:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     b54:	1200      	asrs	r0, r0, #8
     b56:	2801      	cmp	r0, #1
     b58:	da02      	bge.n	b60 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x360>
     b5a:	2004      	movs	r0, #4
     b5c:	9918      	ldr	r1, [sp, #96]	; 0x60
     b5e:	e00b      	b.n	b78 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x378>
     b60:	b147      	cbz	r7, b74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x374>
     b62:	48af      	ldr	r0, [pc, #700]	; (e20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x620>)
     b64:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     b68:	b120      	cbz	r0, b74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x374>
     b6a:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     b6e:	1c06      	adds	r6, r0, #0
     b70:	bf18      	it	ne
     b72:	2602      	movne	r6, #2
     b74:	4621      	mov	r1, r4
     b76:	2001      	movs	r0, #1
     b78:	f1b9 0f00 	cmp.w	r9, #0
     b7c:	d002      	beq.n	b84 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x384>
     b7e:	9b15      	ldr	r3, [sp, #84]	; 0x54
     b80:	2b1e      	cmp	r3, #30
     b82:	da02      	bge.n	b8a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x38a>
     b84:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
     b88:	b113      	cbz	r3, b90 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x390>
     b8a:	f04f 0b00 	mov.w	fp, #0
     b8e:	1e40      	subs	r0, r0, #1
     b90:	1983      	adds	r3, r0, r6
     b92:	48a4      	ldr	r0, [pc, #656]	; (e24 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x624>)
     b94:	f89d e04d 	ldrb.w	lr, [sp, #77]	; 0x4d
     b98:	7800      	ldrb	r0, [r0, #0]
     b9a:	9015      	str	r0, [sp, #84]	; 0x54
     b9c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     b9e:	1a80      	subs	r0, r0, r2
     ba0:	f020 4c7f 	bic.w	ip, r0, #4278190080	; 0xff000000
     ba4:	ebac 0001 	sub.w	r0, ip, r1
     ba8:	0200      	lsls	r0, r0, #8
     baa:	17c6      	asrs	r6, r0, #31
     bac:	eb00 6016 	add.w	r0, r0, r6, lsr #24
     bb0:	1200      	asrs	r0, r0, #8
     bb2:	4298      	cmp	r0, r3
     bb4:	db18      	blt.n	be8 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x3e8>
     bb6:	2a00      	cmp	r2, #0
     bb8:	bf18      	it	ne
     bba:	f8cd c03c 	strne.w	ip, [sp, #60]	; 0x3c
     bbe:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
     bc0:	9705      	str	r7, [sp, #20]
     bc2:	2700      	movs	r7, #0
     bc4:	f001 ffb6 	bl	2b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
     bc8:	1a30      	subs	r0, r6, r0
     bca:	0200      	lsls	r0, r0, #8
     bcc:	17c1      	asrs	r1, r0, #31
     bce:	eb00 6011 	add.w	r0, r0, r1, lsr #24
     bd2:	1200      	asrs	r0, r0, #8
     bd4:	283e      	cmp	r0, #62	; 0x3e
     bd6:	da3f      	bge.n	c58 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x458>
     bd8:	2d01      	cmp	r5, #1
     bda:	d020      	beq.n	c1e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x41e>
     bdc:	1e70      	subs	r0, r6, #1
     bde:	9905      	ldr	r1, [sp, #20]
     be0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     be4:	b319      	cbz	r1, c2e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x42e>
     be6:	e02d      	b.n	c44 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x444>
     be8:	b182      	cbz	r2, c0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40c>
     bea:	f1be 0f00 	cmp.w	lr, #0
     bee:	bf04      	itt	eq
     bf0:	9815      	ldreq	r0, [sp, #84]	; 0x54
     bf2:	2803      	cmpeq	r0, #3
     bf4:	d00a      	beq.n	c0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x40c>
     bf6:	b927      	cbnz	r7, c02 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x402>
     bf8:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     bfc:	2800      	cmp	r0, #0
     bfe:	bf18      	it	ne
     c00:	1e9b      	subne	r3, r3, #2
     c02:	2200      	movs	r2, #0
     c04:	f88d 204c 	strb.w	r2, [sp, #76]	; 0x4c
     c08:	4690      	mov	r8, r2
     c0a:	e7c7      	b.n	b9c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x39c>
     c0c:	bb07      	cbnz	r7, c50 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x450>
     c0e:	f89d 004c 	ldrb.w	r0, [sp, #76]	; 0x4c
     c12:	b1e8      	cbz	r0, c50 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x450>
     c14:	2000      	movs	r0, #0
     c16:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
     c1a:	1e9b      	subs	r3, r3, #2
     c1c:	e7be      	b.n	b9c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x39c>
     c1e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c22:	d120      	bne.n	c66 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x466>
     c24:	f640 110d 	movw	r1, #2317	; 0x90d
     c28:	2070      	movs	r0, #112	; 0x70
     c2a:	f002 fe69 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     c2e:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c32:	d007      	beq.n	c44 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x444>
     c34:	1a21      	subs	r1, r4, r0
     c36:	0209      	lsls	r1, r1, #8
     c38:	17ca      	asrs	r2, r1, #31
     c3a:	eb01 6112 	add.w	r1, r1, r2, lsr #24
     c3e:	1209      	asrs	r1, r1, #8
     c40:	2904      	cmp	r1, #4
     c42:	dd03      	ble.n	c4c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x44c>
     c44:	4604      	mov	r4, r0
     c46:	f001 ff7b 	bl	2b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c4a:	e00c      	b.n	c66 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x466>
     c4c:	2900      	cmp	r1, #0
     c4e:	dd0a      	ble.n	c66 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x466>
     c50:	b01b      	add	sp, #108	; 0x6c
     c52:	2000      	movs	r0, #0
     c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     c58:	1e70      	subs	r0, r6, #1
     c5a:	f020 447f 	bic.w	r4, r0, #4278190080	; 0xff000000
     c5e:	4620      	mov	r0, r4
     c60:	f001 ff6e 	bl	2b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
     c64:	4657      	mov	r7, sl
     c66:	f1b4 7f80 	cmp.w	r4, #16777216	; 0x1000000
     c6a:	d024      	beq.n	cb6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4b6>
     c6c:	980f      	ldr	r0, [sp, #60]	; 0x3c
     c6e:	9b10      	ldr	r3, [sp, #64]	; 0x40
     c70:	1b00      	subs	r0, r0, r4
     c72:	1b1b      	subs	r3, r3, r4
     c74:	4a70      	ldr	r2, [pc, #448]	; (e38 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x638>)
     c76:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     c7a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     c7e:	4583      	cmp	fp, r0
     c80:	bf98      	it	ls
     c82:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
     c86:	d2e3      	bcs.n	c50 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x450>
     c88:	429a      	cmp	r2, r3
     c8a:	d3e1      	bcc.n	c50 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x450>
     c8c:	4620      	mov	r0, r4
     c8e:	f00b fbb9 	bl	c404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
     c92:	4965      	ldr	r1, [pc, #404]	; (e28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x628>)
     c94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
     c96:	1c4b      	adds	r3, r1, #1
     c98:	1a16      	subs	r6, r2, r0
     c9a:	ebb6 0f93 	cmp.w	r6, r3, lsr #2
     c9e:	bf24      	itt	cs
     ca0:	eba0 0c02 	subcs.w	ip, r0, r2
     ca4:	ebbc 0f93 	cmpcs.w	ip, r3, lsr #2
     ca8:	d310      	bcc.n	ccc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4cc>
     caa:	42b1      	cmp	r1, r6
     cac:	d208      	bcs.n	cc0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4c0>
     cae:	1a08      	subs	r0, r1, r0
     cb0:	4410      	add	r0, r2
     cb2:	1c46      	adds	r6, r0, #1
     cb4:	e00a      	b.n	ccc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4cc>
     cb6:	f640 212d 	movw	r1, #2605	; 0xa2d
     cba:	2070      	movs	r0, #112	; 0x70
     cbc:	f002 fe20 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     cc0:	4561      	cmp	r1, ip
     cc2:	d22c      	bcs.n	d1e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x51e>
     cc4:	1a89      	subs	r1, r1, r2
     cc6:	4408      	add	r0, r1
     cc8:	1c40      	adds	r0, r0, #1
     cca:	4246      	negs	r6, r0
     ccc:	4854      	ldr	r0, [pc, #336]	; (e20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x620>)
     cce:	7f80      	ldrb	r0, [r0, #30]
     cd0:	b350      	cbz	r0, d28 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x528>
     cd2:	4628      	mov	r0, r5
     cd4:	4645      	mov	r5, r8
     cd6:	f04f 0b00 	mov.w	fp, #0
     cda:	46d8      	mov	r8, fp
     cdc:	2801      	cmp	r0, #1
     cde:	d005      	beq.n	cec <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4ec>
     ce0:	2002      	movs	r0, #2
     ce2:	f002 f985 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     ce6:	2001      	movs	r0, #1
     ce8:	f002 f982 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     cec:	45a9      	cmp	r9, r5
     cee:	d227      	bcs.n	d40 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x540>
     cf0:	eba6 0105 	sub.w	r1, r6, r5
     cf4:	f04f 0301 	mov.w	r3, #1
     cf8:	f04f 0203 	mov.w	r2, #3
     cfc:	f04f 0002 	mov.w	r0, #2
     d00:	f002 f8a2 	bl	2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d04:	2800      	cmp	r0, #0
     d06:	bf08      	it	eq
     d08:	f04f 0801 	moveq.w	r8, #1
     d0c:	f1b9 0f00 	cmp.w	r9, #0
     d10:	d030      	beq.n	d74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x574>
     d12:	2301      	movs	r3, #1
     d14:	eba6 0109 	sub.w	r1, r6, r9
     d18:	2203      	movs	r2, #3
     d1a:	4618      	mov	r0, r3
     d1c:	e01e      	b.n	d5c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x55c>
     d1e:	f640 310c 	movw	r1, #2828	; 0xb0c
     d22:	2070      	movs	r0, #112	; 0x70
     d24:	f002 fdec 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d28:	45c1      	cmp	r9, r8
     d2a:	bf34      	ite	cc
     d2c:	4640      	movcc	r0, r8
     d2e:	4648      	movcs	r0, r9
     d30:	4458      	add	r0, fp
     d32:	42b0      	cmp	r0, r6
     d34:	dbcd      	blt.n	cd2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x4d2>
     d36:	f44f 6124 	mov.w	r1, #2624	; 0xa40
     d3a:	2070      	movs	r0, #112	; 0x70
     d3c:	f002 fde0 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d40:	d910      	bls.n	d64 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x564>
     d42:	2301      	movs	r3, #1
     d44:	eba6 0109 	sub.w	r1, r6, r9
     d48:	2203      	movs	r2, #3
     d4a:	4618      	mov	r0, r3
     d4c:	f002 f87c 	bl	2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d50:	b328      	cbz	r0, d9e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x59e>
     d52:	b17d      	cbz	r5, d74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x574>
     d54:	1b71      	subs	r1, r6, r5
     d56:	2301      	movs	r3, #1
     d58:	2203      	movs	r2, #3
     d5a:	2002      	movs	r0, #2
     d5c:	f002 f874 	bl	2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d60:	b1e8      	cbz	r0, d9e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x59e>
     d62:	e007      	b.n	d74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x574>
     d64:	ea55 0009 	orrs.w	r0, r5, r9
     d68:	d004      	beq.n	d74 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x574>
     d6a:	f640 1177 	movw	r1, #2423	; 0x977
     d6e:	2070      	movs	r0, #112	; 0x70
     d70:	f002 fdc6 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     d74:	2301      	movs	r3, #1
     d76:	2203      	movs	r2, #3
     d78:	4631      	mov	r1, r6
     d7a:	2000      	movs	r0, #0
     d7c:	f002 f864 	bl	2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     d80:	b168      	cbz	r0, d9e <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x59e>
     d82:	2501      	movs	r5, #1
     d84:	f1b8 0f00 	cmp.w	r8, #0
     d88:	d003      	beq.n	d92 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x592>
     d8a:	9814      	ldr	r0, [sp, #80]	; 0x50
     d8c:	900f      	str	r0, [sp, #60]	; 0x3c
     d8e:	f88d b04c 	strb.w	fp, [sp, #76]	; 0x4c
     d92:	f8df 80a8 	ldr.w	r8, [pc, #168]	; e3c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x63c>
     d96:	f1ba 0f00 	cmp.w	sl, #0
     d9a:	d10e      	bne.n	dba <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5ba>
     d9c:	e009      	b.n	db2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5b2>
     d9e:	2002      	movs	r0, #2
     da0:	f002 f926 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     da4:	2001      	movs	r0, #1
     da6:	f002 f923 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     daa:	b01b      	add	sp, #108	; 0x6c
     dac:	2000      	movs	r0, #0
     dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     db2:	481b      	ldr	r0, [pc, #108]	; (e20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x620>)
     db4:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
     db8:	b100      	cbz	r0, dbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5bc>
     dba:	b34f      	cbz	r7, e10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x610>
     dbc:	f8df a060 	ldr.w	sl, [pc, #96]	; e20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x620>
     dc0:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     dc4:	b118      	cbz	r0, dce <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5ce>
     dc6:	f002 fbeb 	bl	35a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
     dca:	f88a b02c 	strb.w	fp, [sl, #44]	; 0x2c
     dce:	b307      	cbz	r7, e12 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x612>
     dd0:	f1a4 0032 	sub.w	r0, r4, #50	; 0x32
     dd4:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     dd8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     ddc:	f8c8 0000 	str.w	r0, [r8]
     de0:	2300      	movs	r3, #0
     de2:	2203      	movs	r2, #3
     de4:	2005      	movs	r0, #5
     de6:	f002 f82f 	bl	2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     dea:	b368      	cbz	r0, e48 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x648>
     dec:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
     df0:	2005      	movs	r0, #5
     df2:	f002 f9c9 	bl	3188 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
     df6:	4912      	ldr	r1, [pc, #72]	; (e40 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x640>)
     df8:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
     dfc:	f8c1 4514 	str.w	r4, [r1, #1300]	; 0x514
     e00:	4910      	ldr	r1, [pc, #64]	; (e44 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x644>)
     e02:	12e0      	asrs	r0, r4, #11
     e04:	6008      	str	r0, [r1, #0]
     e06:	4c06      	ldr	r4, [pc, #24]	; (e20 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x620>)
     e08:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e0c:	b3e8      	cbz	r0, e8a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x68a>
     e0e:	e030      	b.n	e72 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x672>
     e10:	e01b      	b.n	e4a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x64a>
     e12:	e01f      	b.n	e54 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x654>
     e14:	40000508 	.word	0x40000508
     e18:	20000010 	.word	0x20000010
     e1c:	20000b8c 	.word	0x20000b8c
     e20:	20000f0c 	.word	0x20000f0c
     e24:	20000012 	.word	0x20000012
     e28:	1e847fff 	.word	0x1e847fff
     e2c:	07a12000 	.word	0x07a12000
     e30:	f85ee000 	.word	0xf85ee000
     e34:	1e848000 	.word	0x1e848000
     e38:	003fffff 	.word	0x003fffff
     e3c:	4001f508 	.word	0x4001f508
     e40:	4001f098 	.word	0x4001f098
     e44:	4001f504 	.word	0x4001f504
     e48:	e025      	b.n	e96 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x696>
     e4a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; f04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x704>
     e4e:	f89a 002c 	ldrb.w	r0, [sl, #44]	; 0x2c
     e52:	b1c8      	cbz	r0, e88 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x688>
     e54:	4c2b      	ldr	r4, [pc, #172]	; (f04 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x704>)
     e56:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
     e5a:	b150      	cbz	r0, e72 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x672>
     e5c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
     e60:	f8c8 0000 	str.w	r0, [r8]
     e64:	2005      	movs	r0, #5
     e66:	f002 f8c3 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
     e6a:	f002 fc01 	bl	3670 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
     e6e:	f884 b02d 	strb.w	fp, [r4, #45]	; 0x2d
     e72:	eba6 0009 	sub.w	r0, r6, r9
     e76:	f1a0 0119 	sub.w	r1, r0, #25
     e7a:	2900      	cmp	r1, #0
     e7c:	dc15      	bgt.n	eaa <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6aa>
     e7e:	f640 2171 	movw	r1, #2673	; 0xa71
     e82:	2070      	movs	r0, #112	; 0x70
     e84:	f002 fd3c 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     e88:	e000      	b.n	e8c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x68c>
     e8a:	e009      	b.n	ea0 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6a0>
     e8c:	f002 fba4 	bl	35d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
     e90:	f88a 502c 	strb.w	r5, [sl, #44]	; 0x2c
     e94:	e79b      	b.n	dce <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x5ce>
     e96:	f240 313e 	movw	r1, #830	; 0x33e
     e9a:	2070      	movs	r0, #112	; 0x70
     e9c:	f002 fd30 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     ea0:	f002 fbd8 	bl	3654 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>
     ea4:	f884 502d 	strb.w	r5, [r4, #45]	; 0x2d
     ea8:	e7e3      	b.n	e72 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x672>
     eaa:	2203      	movs	r2, #3
     eac:	2301      	movs	r3, #1
     eae:	4610      	mov	r0, r2
     eb0:	f001 ffca 	bl	2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
     eb4:	b308      	cbz	r0, efa <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x6fa>
     eb6:	4814      	ldr	r0, [pc, #80]	; (f08 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x708>)
     eb8:	6880      	ldr	r0, [r0, #8]
     eba:	f8c0 b000 	str.w	fp, [r0]
     ebe:	4813      	ldr	r0, [pc, #76]	; (f0c <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x70c>)
     ec0:	f8c0 b000 	str.w	fp, [r0]
     ec4:	ac0c      	add	r4, sp, #48	; 0x30
     ec6:	4812      	ldr	r0, [pc, #72]	; (f10 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x710>)
     ec8:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     ecc:	f8c0 1380 	str.w	r1, [r0, #896]	; 0x380
     ed0:	f8c0 2384 	str.w	r2, [r0, #900]	; 0x384
     ed4:	f8c0 3388 	str.w	r3, [r0, #904]	; 0x388
     ed8:	f8c0 c38c 	str.w	ip, [r0, #908]	; 0x38c
     edc:	ac10      	add	r4, sp, #64	; 0x40
     ede:	e894 100e 	ldmia.w	r4, {r1, r2, r3, ip}
     ee2:	f8c0 1390 	str.w	r1, [r0, #912]	; 0x390
     ee6:	f8c0 2394 	str.w	r2, [r0, #916]	; 0x394
     eea:	f8c0 3398 	str.w	r3, [r0, #920]	; 0x398
     eee:	f8c0 c39c 	str.w	ip, [r0, #924]	; 0x39c
     ef2:	b01b      	add	sp, #108	; 0x6c
     ef4:	2001      	movs	r0, #1
     ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     efa:	f640 2179 	movw	r1, #2681	; 0xa79
     efe:	2070      	movs	r0, #112	; 0x70
     f00:	f002 fcfe 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f04:	20000f0c 	.word	0x20000f0c
     f08:	20000010 	.word	0x20000010
     f0c:	40000508 	.word	0x40000508
     f10:	20000b8c 	.word	0x20000b8c
     f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     f18:	4606      	mov	r6, r0
     f1a:	b083      	sub	sp, #12
     f1c:	7808      	ldrb	r0, [r1, #0]
     f1e:	7390      	strb	r0, [r2, #14]
     f20:	7acf      	ldrb	r7, [r1, #11]
     f22:	7357      	strb	r7, [r2, #13]
     f24:	7a88      	ldrb	r0, [r1, #10]
     f26:	7310      	strb	r0, [r2, #12]
     f28:	8908      	ldrh	r0, [r1, #8]
     f2a:	4614      	mov	r4, r2
     f2c:	8150      	strh	r0, [r2, #10]
     f2e:	460d      	mov	r5, r1
     f30:	780a      	ldrb	r2, [r1, #0]
     f32:	495f      	ldr	r1, [pc, #380]	; (10b0 <CONFIG_FPROTECT_BLOCK_SIZE+0xb0>)
     f34:	4699      	mov	r9, r3
     f36:	ea4f 0c81 	mov.w	ip, r1, lsl #2
     f3a:	424b      	negs	r3, r1
     f3c:	f1ac 0801 	sub.w	r8, ip, #1
     f40:	b15a      	cbz	r2, f5a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x75a>
     f42:	43c0      	mvns	r0, r0
     f44:	f8d5 8004 	ldr.w	r8, [r5, #4]
     f48:	f104 0208 	add.w	r2, r4, #8
     f4c:	4288      	cmp	r0, r1
     f4e:	dd3d      	ble.n	fcc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7cc>
     f50:	f240 610a 	movw	r1, #1546	; 0x60a
     f54:	2070      	movs	r0, #112	; 0x70
     f56:	f002 fcd3 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f5a:	68ee      	ldr	r6, [r5, #12]
     f5c:	686d      	ldr	r5, [r5, #4]
     f5e:	ea6f 0900 	mvn.w	r9, r0
     f62:	f104 0208 	add.w	r2, r4, #8
     f66:	eb06 0009 	add.w	r0, r6, r9
     f6a:	4546      	cmp	r6, r8
     f6c:	d904      	bls.n	f78 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x778>
     f6e:	f240 6109 	movw	r1, #1545	; 0x609
     f72:	2070      	movs	r0, #112	; 0x70
     f74:	f002 fcc4 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     f78:	4589      	cmp	r9, r1
     f7a:	dce9      	bgt.n	f50 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x750>
     f7c:	4599      	cmp	r9, r3
     f7e:	db28      	blt.n	fd2 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7d2>
     f80:	4584      	cmp	ip, r0
     f82:	bfdc      	itt	le
     f84:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
     f88:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
     f8c:	dd05      	ble.n	f9a <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x79a>
     f8e:	2800      	cmp	r0, #0
     f90:	bfbc      	itt	lt
     f92:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
     f96:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
     f9a:	4621      	mov	r1, r4
     f9c:	f001 fc6c 	bl	2878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     fa0:	6820      	ldr	r0, [r4, #0]
     fa2:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
     fa6:	1970      	adds	r0, r6, r5
     fa8:	1c40      	adds	r0, r0, #1
     faa:	6021      	str	r1, [r4, #0]
     fac:	2f00      	cmp	r7, #0
     fae:	bf08      	it	eq
     fb0:	307a      	addeq	r0, #122	; 0x7a
     fb2:	d003      	beq.n	fbc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7bc>
     fb4:	2f01      	cmp	r7, #1
     fb6:	bf08      	it	eq
     fb8:	3048      	addeq	r0, #72	; 0x48
     fba:	d12d      	bne.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
     fbc:	f001 fc40 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
     fc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     fc4:	6060      	str	r0, [r4, #4]
     fc6:	b003      	add	sp, #12
     fc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     fcc:	4601      	mov	r1, r0
     fce:	4298      	cmp	r0, r3
     fd0:	da04      	bge.n	fdc <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7dc>
     fd2:	f240 610b 	movw	r1, #1547	; 0x60b
     fd6:	2070      	movs	r0, #112	; 0x70
     fd8:	f002 fc92 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     fdc:	4584      	cmp	ip, r0
     fde:	bfdc      	itt	le
     fe0:	f1a1 50f4 	suble.w	r0, r1, #511705088	; 0x1e800000
     fe4:	f5a0 2090 	suble.w	r0, r0, #294912	; 0x48000
     fe8:	dd05      	ble.n	ff6 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x7f6>
     fea:	2800      	cmp	r0, #0
     fec:	bfbc      	itt	lt
     fee:	f101 50f4 	addlt.w	r0, r1, #511705088	; 0x1e800000
     ff2:	f500 2090 	addlt.w	r0, r0, #294912	; 0x48000
     ff6:	4621      	mov	r1, r4
     ff8:	f001 fc3e 	bl	2878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
     ffc:	6820      	ldr	r0, [r4, #0]
     ffe:	2f00      	cmp	r7, #0
    1000:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    1004:	f108 0001 	add.w	r0, r8, #1
    1008:	6021      	str	r1, [r4, #0]
    100a:	bf08      	it	eq
    100c:	307a      	addeq	r0, #122	; 0x7a
    100e:	d008      	beq.n	1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
    1010:	2f01      	cmp	r7, #1
    1012:	bf08      	it	eq
    1014:	3048      	addeq	r0, #72	; 0x48
    1016:	d004      	beq.n	1022 <CONFIG_FPROTECT_BLOCK_SIZE+0x22>
    1018:	f240 61b1 	movw	r1, #1713	; 0x6b1
    101c:	2070      	movs	r0, #112	; 0x70
    101e:	f002 fc6f 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1022:	f001 fc0d 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1026:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    102a:	6061      	str	r1, [r4, #4]
    102c:	8960      	ldrh	r0, [r4, #10]
    102e:	aa01      	add	r2, sp, #4
    1030:	4669      	mov	r1, sp
    1032:	f001 fc21 	bl	2878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1036:	481f      	ldr	r0, [pc, #124]	; (10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    1038:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    103c:	2920      	cmp	r1, #32
    103e:	d023      	beq.n	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
    1040:	6900      	ldr	r0, [r0, #16]
    1042:	1d40      	adds	r0, r0, #5
    1044:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1048:	e9d4 2100 	ldrd	r2, r1, [r4]
    104c:	1a89      	subs	r1, r1, r2
    104e:	6020      	str	r0, [r4, #0]
    1050:	4408      	add	r0, r1
    1052:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1056:	6060      	str	r0, [r4, #4]
    1058:	464b      	mov	r3, r9
    105a:	4632      	mov	r2, r6
    105c:	4621      	mov	r1, r4
    105e:	68e8      	ldr	r0, [r5, #12]
    1060:	f7ff fad2 	bl	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
    1064:	2800      	cmp	r0, #0
    1066:	bf1c      	itt	ne
    1068:	b003      	addne	sp, #12
    106a:	e8bd 83f0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    106e:	e9d4 1000 	ldrd	r1, r0, [r4]
    1072:	1a40      	subs	r0, r0, r1
    1074:	4430      	add	r0, r6
    1076:	f026 417f 	bic.w	r1, r6, #4278190080	; 0xff000000
    107a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    107e:	e9c4 1000 	strd	r1, r0, [r4]
    1082:	b003      	add	sp, #12
    1084:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1088:	8960      	ldrh	r0, [r4, #10]
    108a:	f106 0709 	add.w	r7, r6, #9
    108e:	b120      	cbz	r0, 109a <CONFIG_FPROTECT_BLOCK_SIZE+0x9a>
    1090:	f002 fbbe 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1094:	2800      	cmp	r0, #0
    1096:	bf08      	it	eq
    1098:	3732      	addeq	r7, #50	; 0x32
    109a:	4807      	ldr	r0, [pc, #28]	; (10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>)
    109c:	7841      	ldrb	r1, [r0, #1]
    109e:	9800      	ldr	r0, [sp, #0]
    10a0:	4281      	cmp	r1, r0
    10a2:	bf84      	itt	hi
    10a4:	1a08      	subhi	r0, r1, r0
    10a6:	4407      	addhi	r7, r0
    10a8:	f027 407f 	bic.w	r0, r7, #4278190080	; 0xff000000
    10ac:	e7cc      	b.n	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
    10ae:	0000      	.short	0x0000
    10b0:	07a12000 	.word	0x07a12000
    10b4:	20000f0c 	.word	0x20000f0c
    10b8:	20000012 	.word	0x20000012
    10bc:	b510      	push	{r4, lr}
    10be:	4c15      	ldr	r4, [pc, #84]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
    10c0:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    10c4:	2820      	cmp	r0, #32
    10c6:	bf18      	it	ne
    10c8:	bd10      	popne	{r4, pc}
    10ca:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    10ce:	eb04 0082 	add.w	r0, r4, r2, lsl #2
    10d2:	f890 1020 	ldrb.w	r1, [r0, #32]
    10d6:	2920      	cmp	r1, #32
    10d8:	d017      	beq.n	110a <CONFIG_FPROTECT_BLOCK_SIZE+0x10a>
    10da:	f8df c03c 	ldr.w	ip, [pc, #60]	; 1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>
    10de:	eb0c 1382 	add.w	r3, ip, r2, lsl #6
    10e2:	eb03 0341 	add.w	r3, r3, r1, lsl #1
    10e6:	785b      	ldrb	r3, [r3, #1]
    10e8:	f880 3020 	strb.w	r3, [r0, #32]
    10ec:	2301      	movs	r3, #1
    10ee:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
    10f2:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
    10f6:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    10fa:	2002      	movs	r0, #2
    10fc:	f000 f8b0 	bl	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    1100:	2000      	movs	r0, #0
    1102:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    1106:	77a0      	strb	r0, [r4, #30]
    1108:	bd10      	pop	{r4, pc}
    110a:	f240 318b 	movw	r1, #907	; 0x38b
    110e:	2070      	movs	r0, #112	; 0x70
    1110:	f002 fbf6 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1114:	20000f0c 	.word	0x20000f0c
    1118:	20000e8c 	.word	0x20000e8c
    111c:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    1120:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 11dc <CONFIG_FPROTECT_BLOCK_SIZE+0x1dc>
    1124:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    1128:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    112c:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    1130:	2c20      	cmp	r4, #32
    1132:	bf08      	it	eq
    1134:	e8bd 9ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    1138:	f8df b0a4 	ldr.w	fp, [pc, #164]	; 11e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e0>
    113c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
    1140:	f5aa 7940 	sub.w	r9, sl, #768	; 0x300
    1144:	eb0a 1785 	add.w	r7, sl, r5, lsl #6
    1148:	2607      	movs	r6, #7
    114a:	f817 0014 	ldrb.w	r0, [r7, r4, lsl #1]
    114e:	2801      	cmp	r0, #1
    1150:	d00e      	beq.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    1152:	2804      	cmp	r0, #4
    1154:	bf08      	it	eq
    1156:	2602      	moveq	r6, #2
    1158:	d00a      	beq.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    115a:	2805      	cmp	r0, #5
    115c:	bf0c      	ite	eq
    115e:	2603      	moveq	r6, #3
    1160:	2806      	cmpne	r0, #6
    1162:	d005      	beq.n	1170 <CONFIG_FPROTECT_BLOCK_SIZE+0x170>
    1164:	f640 01d9 	movw	r1, #2265	; 0x8d9
    1168:	f04f 0070 	mov.w	r0, #112	; 0x70
    116c:	f002 fbc8 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1170:	f1bb 0f00 	cmp.w	fp, #0
    1174:	bf18      	it	ne
    1176:	f3af 8000 	nopne.w
    117a:	f3ef 8010 	mrs	r0, PRIMASK
    117e:	b672      	cpsid	i
    1180:	eb07 0144 	add.w	r1, r7, r4, lsl #1
    1184:	784a      	ldrb	r2, [r1, #1]
    1186:	eb08 0185 	add.w	r1, r8, r5, lsl #2
    118a:	f881 2021 	strb.w	r2, [r1, #33]	; 0x21
    118e:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    1192:	42a2      	cmp	r2, r4
    1194:	bf04      	itt	eq
    1196:	2220      	moveq	r2, #32
    1198:	f881 2022 	strbeq.w	r2, [r1, #34]	; 0x22
    119c:	b1b8      	cbz	r0, 11ce <CONFIG_FPROTECT_BLOCK_SIZE+0x1ce>
    119e:	462a      	mov	r2, r5
    11a0:	4621      	mov	r1, r4
    11a2:	2001      	movs	r0, #1
    11a4:	f000 f85c 	bl	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    11a8:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    11ac:	eb09 00c1 	add.w	r0, r9, r1, lsl #3
    11b0:	f859 2031 	ldr.w	r2, [r9, r1, lsl #3]
    11b4:	6840      	ldr	r0, [r0, #4]
    11b6:	4631      	mov	r1, r6
    11b8:	4790      	blx	r2
    11ba:	f898 502e 	ldrb.w	r5, [r8, #46]	; 0x2e
    11be:	eb08 0085 	add.w	r0, r8, r5, lsl #2
    11c2:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
    11c6:	2c20      	cmp	r4, #32
    11c8:	d1bc      	bne.n	1144 <CONFIG_FPROTECT_BLOCK_SIZE+0x144>
    11ca:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    11ce:	4806      	ldr	r0, [pc, #24]	; (11e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e8>)
    11d0:	2800      	cmp	r0, #0
    11d2:	bf18      	it	ne
    11d4:	f3af 8000 	nopne.w
    11d8:	b662      	cpsie	i
    11da:	e7e0      	b.n	119e <CONFIG_FPROTECT_BLOCK_SIZE+0x19e>
    11dc:	20000f0c 	.word	0x20000f0c
    11e0:	00000000 	.word	0x00000000
    11e4:	20000e8c 	.word	0x20000e8c
    11e8:	00000000 	.word	0x00000000
    11ec:	b510      	push	{r4, lr}
    11ee:	4604      	mov	r4, r0
    11f0:	6800      	ldr	r0, [r0, #0]
    11f2:	f00b f907 	bl	c404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    11f6:	4602      	mov	r2, r0
    11f8:	8960      	ldrh	r0, [r4, #10]
    11fa:	7a21      	ldrb	r1, [r4, #8]
    11fc:	4b14      	ldr	r3, [pc, #80]	; (1250 <CONFIG_FPROTECT_BLOCK_SIZE+0x250>)
    11fe:	4408      	add	r0, r1
    1200:	1c41      	adds	r1, r0, #1
    1202:	1850      	adds	r0, r2, r1
    1204:	429a      	cmp	r2, r3
    1206:	d904      	bls.n	1212 <CONFIG_FPROTECT_BLOCK_SIZE+0x212>
    1208:	f240 6109 	movw	r1, #1545	; 0x609
    120c:	2070      	movs	r0, #112	; 0x70
    120e:	f002 fb77 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1212:	4a10      	ldr	r2, [pc, #64]	; (1254 <CONFIG_FPROTECT_BLOCK_SIZE+0x254>)
    1214:	4291      	cmp	r1, r2
    1216:	dd04      	ble.n	1222 <CONFIG_FPROTECT_BLOCK_SIZE+0x222>
    1218:	f240 610a 	movw	r1, #1546	; 0x60a
    121c:	2070      	movs	r0, #112	; 0x70
    121e:	f002 fb6f 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1222:	4a0d      	ldr	r2, [pc, #52]	; (1258 <CONFIG_FPROTECT_BLOCK_SIZE+0x258>)
    1224:	4291      	cmp	r1, r2
    1226:	da04      	bge.n	1232 <CONFIG_FPROTECT_BLOCK_SIZE+0x232>
    1228:	f240 610b 	movw	r1, #1547	; 0x60b
    122c:	2070      	movs	r0, #112	; 0x70
    122e:	f002 fb67 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1232:	490a      	ldr	r1, [pc, #40]	; (125c <CONFIG_FPROTECT_BLOCK_SIZE+0x25c>)
    1234:	4281      	cmp	r1, r0
    1236:	bfde      	ittt	le
    1238:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    123c:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    1240:	bd10      	pople	{r4, pc}
    1242:	2800      	cmp	r0, #0
    1244:	bfbc      	itt	lt
    1246:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    124a:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    124e:	bd10      	pop	{r4, pc}
    1250:	1e847fff 	.word	0x1e847fff
    1254:	07a12000 	.word	0x07a12000
    1258:	f85ee000 	.word	0xf85ee000
    125c:	1e848000 	.word	0x1e848000
    1260:	f8df c054 	ldr.w	ip, [pc, #84]	; 12b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b8>
    1264:	b510      	push	{r4, lr}
    1266:	2300      	movs	r3, #0
    1268:	eb0c 1c82 	add.w	ip, ip, r2, lsl #6
    126c:	2807      	cmp	r0, #7
    126e:	d21e      	bcs.n	12ae <CONFIG_FPROTECT_BLOCK_SIZE+0x2ae>
    1270:	e8df f000 	tbb	[pc, r0]
    1274:	05050505 	.word	0x05050505
    1278:	00040404 	.word	0x00040404
    127c:	2301      	movs	r3, #1
    127e:	f80c 0011 	strb.w	r0, [ip, r1, lsl #1]
    1282:	2b00      	cmp	r3, #0
    1284:	bf08      	it	eq
    1286:	bd10      	popeq	{r4, pc}
    1288:	480c      	ldr	r0, [pc, #48]	; (12bc <CONFIG_FPROTECT_BLOCK_SIZE+0x2bc>)
    128a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    128e:	f892 0022 	ldrb.w	r0, [r2, #34]	; 0x22
    1292:	2820      	cmp	r0, #32
    1294:	bf0e      	itee	eq
    1296:	f882 1021 	strbeq.w	r1, [r2, #33]	; 0x21
    129a:	eb0c 0040 	addne.w	r0, ip, r0, lsl #1
    129e:	7041      	strbne	r1, [r0, #1]
    12a0:	2020      	movs	r0, #32
    12a2:	eb0c 0341 	add.w	r3, ip, r1, lsl #1
    12a6:	7058      	strb	r0, [r3, #1]
    12a8:	f882 1022 	strb.w	r1, [r2, #34]	; 0x22
    12ac:	bd10      	pop	{r4, pc}
    12ae:	f44f 7115 	mov.w	r1, #596	; 0x254
    12b2:	2070      	movs	r0, #112	; 0x70
    12b4:	f002 fb24 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12b8:	20000e8c 	.word	0x20000e8c
    12bc:	20000f0c 	.word	0x20000f0c
    12c0:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    12c4:	b083      	sub	sp, #12
    12c6:	485c      	ldr	r0, [pc, #368]	; (1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
    12c8:	9904      	ldr	r1, [sp, #16]
    12ca:	eb00 0081 	add.w	r0, r0, r1, lsl #2
    12ce:	9001      	str	r0, [sp, #4]
    12d0:	f890 4020 	ldrb.w	r4, [r0, #32]
    12d4:	9803      	ldr	r0, [sp, #12]
    12d6:	4625      	mov	r5, r4
    12d8:	2801      	cmp	r0, #1
    12da:	bf18      	it	ne
    12dc:	2802      	cmpne	r0, #2
    12de:	d005      	beq.n	12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>
    12e0:	f44f 612b 	mov.w	r1, #2736	; 0xab0
    12e4:	f04f 0070 	mov.w	r0, #112	; 0x70
    12e8:	f002 fb0a 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    12ec:	2700      	movs	r7, #0
    12ee:	2d20      	cmp	r5, #32
    12f0:	d04a      	beq.n	1388 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT>
    12f2:	4851      	ldr	r0, [pc, #324]	; (1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
    12f4:	9100      	str	r1, [sp, #0]
    12f6:	2600      	movs	r6, #0
    12f8:	7f80      	ldrb	r0, [r0, #30]
    12fa:	2800      	cmp	r0, #0
    12fc:	bf08      	it	eq
    12fe:	2602      	moveq	r6, #2
    1300:	f001 fc18 	bl	2b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1304:	f8df a138 	ldr.w	sl, [pc, #312]	; 1440 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb8>
    1308:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    130c:	eb0a 01c1 	add.w	r1, sl, r1, lsl #3
    1310:	f8df 9128 	ldr.w	r9, [pc, #296]	; 143c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb4>
    1314:	688a      	ldr	r2, [r1, #8]
    1316:	68c9      	ldr	r1, [r1, #12]
    1318:	1a12      	subs	r2, r2, r0
    131a:	1a09      	subs	r1, r1, r0
    131c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    1320:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1324:	4296      	cmp	r6, r2
    1326:	bf98      	it	ls
    1328:	f5b2 0f80 	cmpls.w	r2, #4194304	; 0x400000
    132c:	d201      	bcs.n	1332 <CONFIG_FPROTECT_BLOCK_SIZE+0x332>
    132e:	4589      	cmp	r9, r1
    1330:	d228      	bcs.n	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    1332:	4a44      	ldr	r2, [pc, #272]	; (1444 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xbc>)
    1334:	9900      	ldr	r1, [sp, #0]
    1336:	eb02 1b81 	add.w	fp, r2, r1, lsl #6
    133a:	4622      	mov	r2, r4
    133c:	eb0b 0142 	add.w	r1, fp, r2, lsl #1
    1340:	784c      	ldrb	r4, [r1, #1]
    1342:	2c20      	cmp	r4, #32
    1344:	d016      	beq.n	1374 <CONFIG_FPROTECT_BLOCK_SIZE+0x374>
    1346:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    134a:	eb0a 0cc1 	add.w	ip, sl, r1, lsl #3
    134e:	f8dc 8008 	ldr.w	r8, [ip, #8]
    1352:	f8dc c00c 	ldr.w	ip, [ip, #12]
    1356:	eba8 0800 	sub.w	r8, r8, r0
    135a:	f028 487f 	bic.w	r8, r8, #4278190080	; 0xff000000
    135e:	ebac 0100 	sub.w	r1, ip, r0
    1362:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1366:	4546      	cmp	r6, r8
    1368:	bf98      	it	ls
    136a:	f5b8 0f80 	cmpls.w	r8, #4194304	; 0x400000
    136e:	d2e4      	bcs.n	133a <CONFIG_FPROTECT_BLOCK_SIZE+0x33a>
    1370:	4589      	cmp	r9, r1
    1372:	d3e2      	bcc.n	133a <CONFIG_FPROTECT_BLOCK_SIZE+0x33a>
    1374:	2a20      	cmp	r2, #32
    1376:	d005      	beq.n	1384 <CONFIG_FPROTECT_BLOCK_SIZE+0x384>
    1378:	2120      	movs	r1, #32
    137a:	2004      	movs	r0, #4
    137c:	9b00      	ldr	r3, [sp, #0]
    137e:	f7ff f907 	bl	590 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1382:	4604      	mov	r4, r0
    1384:	42ac      	cmp	r4, r5
    1386:	d115      	bne.n	13b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c>
    1388:	482f      	ldr	r0, [pc, #188]	; (1448 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc0>)
    138a:	2800      	cmp	r0, #0
    138c:	bf18      	it	ne
    138e:	f3af 8000 	nopne.w
    1392:	f001 fbcf 	bl	2b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1396:	4c28      	ldr	r4, [pc, #160]	; (1438 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xb0>)
    1398:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
    139c:	2920      	cmp	r1, #32
    139e:	d00d      	beq.n	13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>
    13a0:	68e1      	ldr	r1, [r4, #12]
    13a2:	1c82      	adds	r2, r0, #2
    13a4:	1a51      	subs	r1, r2, r1
    13a6:	0209      	lsls	r1, r1, #8
    13a8:	17ca      	asrs	r2, r1, #31
    13aa:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    13ae:	1209      	asrs	r1, r1, #8
    13b0:	2900      	cmp	r1, #0
    13b2:	dd03      	ble.n	13bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34>
    13b4:	b005      	add	sp, #20
    13b6:	2000      	movs	r0, #0
    13b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13bc:	2d20      	cmp	r5, #32
    13be:	d00d      	beq.n	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
    13c0:	462a      	mov	r2, r5
    13c2:	9903      	ldr	r1, [sp, #12]
    13c4:	f7ff fb1c 	bl	a00 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x200>
    13c8:	b358      	cbz	r0, 1422 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9a>
    13ca:	9801      	ldr	r0, [sp, #4]
    13cc:	f880 7023 	strb.w	r7, [r0, #35]	; 0x23
    13d0:	f884 5030 	strb.w	r5, [r4, #48]	; 0x30
    13d4:	b005      	add	sp, #20
    13d6:	2001      	movs	r0, #1
    13d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    13dc:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    13e0:	b118      	cbz	r0, 13ea <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x62>
    13e2:	f002 f8dd 	bl	35a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    13e6:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
    13ea:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    13ee:	b150      	cbz	r0, 1406 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x7e>
    13f0:	4916      	ldr	r1, [pc, #88]	; (144c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc4>)
    13f2:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    13f6:	6008      	str	r0, [r1, #0]
    13f8:	2005      	movs	r0, #5
    13fa:	f001 fdf9 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    13fe:	f002 f937 	bl	3670 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    1402:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
    1406:	2004      	movs	r0, #4
    1408:	f001 fdf2 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    140c:	f001 fe5e 	bl	30cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    1410:	2020      	movs	r0, #32
    1412:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    1416:	480e      	ldr	r0, [pc, #56]	; (1450 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc8>)
    1418:	6880      	ldr	r0, [r0, #8]
    141a:	6007      	str	r7, [r0, #0]
    141c:	480d      	ldr	r0, [pc, #52]	; (1454 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xcc>)
    141e:	6007      	str	r7, [r0, #0]
    1420:	e7d8      	b.n	13d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x4c>
    1422:	462a      	mov	r2, r5
    1424:	2120      	movs	r1, #32
    1426:	2004      	movs	r0, #4
    1428:	9b04      	ldr	r3, [sp, #16]
    142a:	f7ff f8b1 	bl	590 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    142e:	b005      	add	sp, #20
    1430:	2000      	movs	r0, #0
    1432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1436:	0000      	.short	0x0000
    1438:	20000f0c 	.word	0x20000f0c
    143c:	003fffff 	.word	0x003fffff
    1440:	20000b8c 	.word	0x20000b8c
    1444:	20000e8c 	.word	0x20000e8c
    1448:	00000000 	.word	0x00000000
    144c:	4001f508 	.word	0x4001f508
    1450:	20000010 	.word	0x20000010
    1454:	40000508 	.word	0x40000508

00001458 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>:
    1458:	4906      	ldr	r1, [pc, #24]	; (1474 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI+0x1c>)
    145a:	b510      	push	{r4, lr}
    145c:	f891 202f 	ldrb.w	r2, [r1, #47]	; 0x2f
    1460:	2a20      	cmp	r2, #32
    1462:	bf1c      	itt	ne
    1464:	7788      	strbne	r0, [r1, #30]
    1466:	bd10      	popne	{r4, pc}
    1468:	f240 31ea 	movw	r1, #1002	; 0x3ea
    146c:	2070      	movs	r0, #112	; 0x70
    146e:	f002 fa47 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1472:	0000      	.short	0x0000
    1474:	20000f0c 	.word	0x20000f0c

00001478 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>:
    1478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    147c:	4e5b      	ldr	r6, [pc, #364]	; (15ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    147e:	4681      	mov	r9, r0
    1480:	b085      	sub	sp, #20
    1482:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1486:	468a      	mov	sl, r1
    1488:	2820      	cmp	r0, #32
    148a:	d04d      	beq.n	1528 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xb0>
    148c:	f896 002f 	ldrb.w	r0, [r6, #47]	; 0x2f
    1490:	f106 040c 	add.w	r4, r6, #12
    1494:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1498:	f5a6 7860 	sub.w	r8, r6, #896	; 0x380
    149c:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    14a0:	2020      	movs	r0, #32
    14a2:	f88d 0000 	strb.w	r0, [sp]
    14a6:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    14aa:	aa03      	add	r2, sp, #12
    14ac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    14b0:	a901      	add	r1, sp, #4
    14b2:	f890 5020 	ldrb.w	r5, [r0, #32]
    14b6:	6930      	ldr	r0, [r6, #16]
    14b8:	9002      	str	r0, [sp, #8]
    14ba:	6830      	ldr	r0, [r6, #0]
    14bc:	4448      	add	r0, r9
    14be:	f001 f9db 	bl	2878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    14c2:	68f8      	ldr	r0, [r7, #12]
    14c4:	9901      	ldr	r1, [sp, #4]
    14c6:	4a4a      	ldr	r2, [pc, #296]	; (15f0 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x178>)
    14c8:	4408      	add	r0, r1
    14ca:	f1a9 0165 	sub.w	r1, r9, #101	; 0x65
    14ce:	4291      	cmp	r1, r2
    14d0:	d82f      	bhi.n	1532 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    14d2:	68b9      	ldr	r1, [r7, #8]
    14d4:	1a41      	subs	r1, r0, r1
    14d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    14da:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    14de:	d228      	bcs.n	1532 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xba>
    14e0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    14e4:	6060      	str	r0, [r4, #4]
    14e6:	4630      	mov	r0, r6
    14e8:	f884 a00c 	strb.w	sl, [r4, #12]
    14ec:	f890 002e 	ldrb.w	r0, [r0, #46]	; 0x2e
    14f0:	46ea      	mov	sl, sp
    14f2:	2d20      	cmp	r5, #32
    14f4:	bf1c      	itt	ne
    14f6:	493f      	ldrne	r1, [pc, #252]	; (15f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    14f8:	eb01 1b80 	addne.w	fp, r1, r0, lsl #6
    14fc:	d03c      	beq.n	1578 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    14fe:	eb05 0045 	add.w	r0, r5, r5, lsl #1
    1502:	eb08 07c0 	add.w	r7, r8, r0, lsl #3
    1506:	6860      	ldr	r0, [r4, #4]
    1508:	68ba      	ldr	r2, [r7, #8]
    150a:	4621      	mov	r1, r4
    150c:	1a10      	subs	r0, r2, r0
    150e:	0200      	lsls	r0, r0, #8
    1510:	17c2      	asrs	r2, r0, #31
    1512:	eb00 6012 	add.w	r0, r0, r2, lsr #24
    1516:	f107 0608 	add.w	r6, r7, #8
    151a:	1200      	asrs	r0, r0, #8
    151c:	d41b      	bmi.n	1556 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xde>
    151e:	8970      	ldrh	r0, [r6, #10]
    1520:	b350      	cbz	r0, 1578 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1522:	8948      	ldrh	r0, [r1, #10]
    1524:	b148      	cbz	r0, 153a <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xc2>
    1526:	e027      	b.n	1578 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1528:	f640 317b 	movw	r1, #2939	; 0xb7b
    152c:	2070      	movs	r0, #112	; 0x70
    152e:	f002 f9e7 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1532:	b005      	add	sp, #20
    1534:	2001      	movs	r0, #1
    1536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    153a:	4620      	mov	r0, r4
    153c:	f7ff fe56 	bl	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
    1540:	f001 f97e 	bl	2840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>
    1544:	6831      	ldr	r1, [r6, #0]
    1546:	1a08      	subs	r0, r1, r0
    1548:	0200      	lsls	r0, r0, #8
    154a:	17c1      	asrs	r1, r0, #31
    154c:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1550:	1200      	asrs	r0, r0, #8
    1552:	2833      	cmp	r0, #51	; 0x33
    1554:	da10      	bge.n	1578 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x100>
    1556:	f88a 5000 	strb.w	r5, [sl]
    155a:	7d39      	ldrb	r1, [r7, #20]
    155c:	7b20      	ldrb	r0, [r4, #12]
    155e:	4281      	cmp	r1, r0
    1560:	d805      	bhi.n	156e <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0xf6>
    1562:	9802      	ldr	r0, [sp, #8]
    1564:	6060      	str	r0, [r4, #4]
    1566:	b005      	add	sp, #20
    1568:	2002      	movs	r0, #2
    156a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    156e:	eb0b 0045 	add.w	r0, fp, r5, lsl #1
    1572:	7845      	ldrb	r5, [r0, #1]
    1574:	2d20      	cmp	r5, #32
    1576:	d1c2      	bne.n	14fe <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x86>
    1578:	2005      	movs	r0, #5
    157a:	f001 fd39 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    157e:	4c1b      	ldr	r4, [pc, #108]	; (15ec <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x174>)
    1580:	f04f 30ff 	mov.w	r0, #4294967295
    1584:	60a0      	str	r0, [r4, #8]
    1586:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
    158a:	f89d 2000 	ldrb.w	r2, [sp]
    158e:	2120      	movs	r1, #32
    1590:	2a20      	cmp	r2, #32
    1592:	bf13      	iteet	ne
    1594:	2005      	movne	r0, #5
    1596:	eb04 0083 	addeq.w	r0, r4, r3, lsl #2
    159a:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    159e:	f7fe fff7 	blne	590 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    15a2:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
    15a6:	4913      	ldr	r1, [pc, #76]	; (15f4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x17c>)
    15a8:	eb01 1182 	add.w	r1, r1, r2, lsl #6
    15ac:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
    15b0:	eb01 0142 	add.w	r1, r1, r2, lsl #1
    15b4:	7048      	strb	r0, [r1, #1]
    15b6:	6820      	ldr	r0, [r4, #0]
    15b8:	4448      	add	r0, r9
    15ba:	6020      	str	r0, [r4, #0]
    15bc:	2001      	movs	r0, #1
    15be:	f884 002b 	strb.w	r0, [r4, #43]	; 0x2b
    15c2:	7e60      	ldrb	r0, [r4, #25]
    15c4:	2801      	cmp	r0, #1
    15c6:	d105      	bne.n	15d4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x15c>
    15c8:	6920      	ldr	r0, [r4, #16]
    15ca:	1e40      	subs	r0, r0, #1
    15cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    15d0:	f001 fb54 	bl	2c7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    15d4:	f89d 0000 	ldrb.w	r0, [sp]
    15d8:	2820      	cmp	r0, #32
    15da:	d003      	beq.n	15e4 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x16c>
    15dc:	4806      	ldr	r0, [pc, #24]	; (15f8 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ+0x180>)
    15de:	7840      	ldrb	r0, [r0, #1]
    15e0:	f002 fa5e 	bl	3aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    15e4:	b005      	add	sp, #20
    15e6:	2000      	movs	r0, #0
    15e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    15ec:	20000f0c 	.word	0x20000f0c
    15f0:	07a11f9b 	.word	0x07a11f9b
    15f4:	20000e8c 	.word	0x20000e8c
    15f8:	20000010 	.word	0x20000010

000015fc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>:
    15fc:	b570      	push	{r4, r5, r6, lr}
    15fe:	4a23      	ldr	r2, [pc, #140]	; (168c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x90>)
    1600:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    1604:	2920      	cmp	r1, #32
    1606:	d039      	beq.n	167c <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x80>
    1608:	f892 102f 	ldrb.w	r1, [r2, #47]	; 0x2f
    160c:	f5a2 7360 	sub.w	r3, r2, #896	; 0x380
    1610:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1614:	eb03 0cc1 	add.w	ip, r3, r1, lsl #3
    1618:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
    161c:	f892 402e 	ldrb.w	r4, [r2, #46]	; 0x2e
    1620:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    1624:	f891 1020 	ldrb.w	r1, [r1, #32]
    1628:	f1a2 0580 	sub.w	r5, r2, #128	; 0x80
    162c:	eb05 1484 	add.w	r4, r5, r4, lsl #6
    1630:	2920      	cmp	r1, #32
    1632:	d028      	beq.n	1686 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x8a>
    1634:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    1638:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    163c:	7d2d      	ldrb	r5, [r5, #20]
    163e:	4285      	cmp	r5, r0
    1640:	bf84      	itt	hi
    1642:	eb04 0141 	addhi.w	r1, r4, r1, lsl #1
    1646:	7849      	ldrbhi	r1, [r1, #1]
    1648:	d8f2      	bhi.n	1630 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x34>
    164a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    164e:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    1652:	f8dc 000c 	ldr.w	r0, [ip, #12]
    1656:	6889      	ldr	r1, [r1, #8]
    1658:	6814      	ldr	r4, [r2, #0]
    165a:	1a08      	subs	r0, r1, r0
    165c:	0200      	lsls	r0, r0, #8
    165e:	17c1      	asrs	r1, r0, #31
    1660:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    1664:	1200      	asrs	r0, r0, #8
    1666:	d407      	bmi.n	1678 <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI+0x7c>
    1668:	f00a fecc 	bl	c404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    166c:	f104 0165 	add.w	r1, r4, #101	; 0x65
    1670:	4288      	cmp	r0, r1
    1672:	bf24      	itt	cs
    1674:	1b00      	subcs	r0, r0, r4
    1676:	bd70      	popcs	{r4, r5, r6, pc}
    1678:	2000      	movs	r0, #0
    167a:	bd70      	pop	{r4, r5, r6, pc}
    167c:	f640 314d 	movw	r1, #2893	; 0xb4d
    1680:	2070      	movs	r0, #112	; 0x70
    1682:	f002 f93d 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1686:	f04f 30ff 	mov.w	r0, #4294967295
    168a:	bd70      	pop	{r4, r5, r6, pc}
    168c:	20000f0c 	.word	0x20000f0c

00001690 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>:
    1690:	4806      	ldr	r0, [pc, #24]	; (16ac <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA+0x1c>)
    1692:	b510      	push	{r4, lr}
    1694:	f890 102f 	ldrb.w	r1, [r0, #47]	; 0x2f
    1698:	2920      	cmp	r1, #32
    169a:	bf1c      	itt	ne
    169c:	7e00      	ldrbne	r0, [r0, #24]
    169e:	bd10      	popne	{r4, pc}
    16a0:	f640 3174 	movw	r1, #2932	; 0xb74
    16a4:	2070      	movs	r0, #112	; 0x70
    16a6:	f002 f92b 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16aa:	0000      	.short	0x0000
    16ac:	20000f0c 	.word	0x20000f0c

000016b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>:
    16b0:	4602      	mov	r2, r0
    16b2:	4b14      	ldr	r3, [pc, #80]	; (1704 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x54>)
    16b4:	b510      	push	{r4, lr}
    16b6:	4408      	add	r0, r1
    16b8:	429a      	cmp	r2, r3
    16ba:	d904      	bls.n	16c6 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x16>
    16bc:	f240 6109 	movw	r1, #1545	; 0x609
    16c0:	2070      	movs	r0, #112	; 0x70
    16c2:	f002 f91d 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16c6:	4a10      	ldr	r2, [pc, #64]	; (1708 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x58>)
    16c8:	4291      	cmp	r1, r2
    16ca:	dd04      	ble.n	16d6 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x26>
    16cc:	f240 610a 	movw	r1, #1546	; 0x60a
    16d0:	2070      	movs	r0, #112	; 0x70
    16d2:	f002 f915 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16d6:	4a0d      	ldr	r2, [pc, #52]	; (170c <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x5c>)
    16d8:	4291      	cmp	r1, r2
    16da:	da04      	bge.n	16e6 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x36>
    16dc:	f240 610b 	movw	r1, #1547	; 0x60b
    16e0:	2070      	movs	r0, #112	; 0x70
    16e2:	f002 f90d 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    16e6:	490a      	ldr	r1, [pc, #40]	; (1710 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q+0x60>)
    16e8:	4281      	cmp	r1, r0
    16ea:	bfde      	ittt	le
    16ec:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    16f0:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    16f4:	bd10      	pople	{r4, pc}
    16f6:	2800      	cmp	r0, #0
    16f8:	bfbc      	itt	lt
    16fa:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    16fe:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    1702:	bd10      	pop	{r4, pc}
    1704:	1e847fff 	.word	0x1e847fff
    1708:	07a12000 	.word	0x07a12000
    170c:	f85ee000 	.word	0xf85ee000
    1710:	1e848000 	.word	0x1e848000

00001714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>:
    1714:	4a10      	ldr	r2, [pc, #64]	; (1758 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x44>)
    1716:	1a0b      	subs	r3, r1, r0
    1718:	f102 0c01 	add.w	ip, r2, #1
    171c:	ebb3 0f9c 	cmp.w	r3, ip, lsr #2
    1720:	bf3c      	itt	cc
    1722:	4618      	movcc	r0, r3
    1724:	4770      	bxcc	lr
    1726:	b510      	push	{r4, lr}
    1728:	1a44      	subs	r4, r0, r1
    172a:	ebb4 0f9c 	cmp.w	r4, ip, lsr #2
    172e:	bf3c      	itt	cc
    1730:	4618      	movcc	r0, r3
    1732:	bd10      	popcc	{r4, pc}
    1734:	429a      	cmp	r2, r3
    1736:	d203      	bcs.n	1740 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x2c>
    1738:	1a10      	subs	r0, r2, r0
    173a:	4408      	add	r0, r1
    173c:	1c40      	adds	r0, r0, #1
    173e:	bd10      	pop	{r4, pc}
    1740:	42a2      	cmp	r2, r4
    1742:	d204      	bcs.n	174e <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY+0x3a>
    1744:	1a51      	subs	r1, r2, r1
    1746:	4408      	add	r0, r1
    1748:	1c40      	adds	r0, r0, #1
    174a:	4240      	negs	r0, r0
    174c:	bd10      	pop	{r4, pc}
    174e:	f640 310c 	movw	r1, #2828	; 0xb0c
    1752:	2070      	movs	r0, #112	; 0x70
    1754:	f002 f8d4 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1758:	1e847fff 	.word	0x1e847fff

0000175c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>:
    175c:	4907      	ldr	r1, [pc, #28]	; (177c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x20>)
    175e:	f891 2030 	ldrb.w	r2, [r1, #48]	; 0x30
    1762:	4282      	cmp	r2, r0
    1764:	bf04      	itt	eq
    1766:	6848      	ldreq	r0, [r1, #4]
    1768:	4770      	bxeq	lr
    176a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    176e:	4904      	ldr	r1, [pc, #16]	; (1780 <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ+0x24>)
    1770:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1774:	3008      	adds	r0, #8
    1776:	f7ff bd39 	b.w	11ec <CONFIG_FPROTECT_BLOCK_SIZE+0x1ec>
    177a:	0000      	.short	0x0000
    177c:	20000f0c 	.word	0x20000f0c
    1780:	20000b8c 	.word	0x20000b8c

00001784 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>:
    1784:	490e      	ldr	r1, [pc, #56]	; (17c0 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x3c>)
    1786:	b510      	push	{r4, lr}
    1788:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    178c:	2820      	cmp	r0, #32
    178e:	d012      	beq.n	17b6 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY+0x32>
    1790:	f891 002f 	ldrb.w	r0, [r1, #47]	; 0x2f
    1794:	f5a1 7260 	sub.w	r2, r1, #896	; 0x380
    1798:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    179c:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
    17a0:	f891 102f 	ldrb.w	r1, [r1, #47]	; 0x2f
    17a4:	6840      	ldr	r0, [r0, #4]
    17a6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    17aa:	f852 2031 	ldr.w	r2, [r2, r1, lsl #3]
    17ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    17b2:	2104      	movs	r1, #4
    17b4:	4710      	bx	r2
    17b6:	f640 01bc 	movw	r1, #2236	; 0x8bc
    17ba:	2070      	movs	r0, #112	; 0x70
    17bc:	f002 f8a0 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    17c0:	20000f0c 	.word	0x20000f0c

000017c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>:
    17c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    17c6:	4d6d      	ldr	r5, [pc, #436]	; (197c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1b8>)
    17c8:	496d      	ldr	r1, [pc, #436]	; (1980 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1bc>)
    17ca:	2601      	movs	r6, #1
    17cc:	f505 7460 	add.w	r4, r5, #896	; 0x380
    17d0:	2808      	cmp	r0, #8
    17d2:	d273      	bcs.n	18bc <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xf8>
    17d4:	e8df f000 	tbb	[pc, r0]
    17d8:	af9d6704 	.word	0xaf9d6704
    17dc:	b9b444cd 	.word	0xb9b444cd
    17e0:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    17e4:	b918      	cbnz	r0, 17ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x2a>
    17e6:	f001 fef7 	bl	35d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    17ea:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    17ee:	8ae0      	ldrh	r0, [r4, #22]
    17f0:	b110      	cbz	r0, 17f8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x34>
    17f2:	f002 f80d 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    17f6:	b188      	cbz	r0, 181c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x58>
    17f8:	f7ff fc60 	bl	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    17fc:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    1800:	68a1      	ldr	r1, [r4, #8]
    1802:	f1b1 3fff 	cmp.w	r1, #4294967295
    1806:	d005      	beq.n	1814 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x50>
    1808:	2301      	movs	r3, #1
    180a:	2203      	movs	r2, #3
    180c:	2005      	movs	r0, #5
    180e:	f001 fb1b 	bl	2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    1812:	b140      	cbz	r0, 1826 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x62>
    1814:	7e60      	ldrb	r0, [r4, #25]
    1816:	2801      	cmp	r0, #1
    1818:	d110      	bne.n	183c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x78>
    181a:	e009      	b.n	1830 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x6c>
    181c:	f44f 6107 	mov.w	r1, #2160	; 0x870
    1820:	2070      	movs	r0, #112	; 0x70
    1822:	f002 f86d 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1826:	f640 0175 	movw	r1, #2165	; 0x875
    182a:	2070      	movs	r0, #112	; 0x70
    182c:	f002 f868 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1830:	6920      	ldr	r0, [r4, #16]
    1832:	1e40      	subs	r0, r0, #1
    1834:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1838:	f001 fa20 	bl	2c7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>
    183c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1840:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1844:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1848:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    184c:	6840      	ldr	r0, [r0, #4]
    184e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1852:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1856:	b001      	add	sp, #4
    1858:	2101      	movs	r1, #1
    185a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    185e:	4710      	bx	r2
    1860:	f7ff fc2c 	bl	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    1864:	f04f 30ff 	mov.w	r0, #4294967295
    1868:	60a0      	str	r0, [r4, #8]
    186a:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    186e:	f88d 0000 	strb.w	r0, [sp]
    1872:	f89d 0000 	ldrb.w	r0, [sp]
    1876:	b188      	cbz	r0, 189c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xd8>
    1878:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    187c:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1880:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    1884:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    1888:	6840      	ldr	r0, [r0, #4]
    188a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    188e:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1892:	b001      	add	sp, #4
    1894:	2106      	movs	r1, #6
    1896:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    189a:	4710      	bx	r2
    189c:	f640 0186 	movw	r1, #2182	; 0x886
    18a0:	2070      	movs	r0, #112	; 0x70
    18a2:	f002 f82d 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18a6:	f7ff fc09 	bl	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    18aa:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    18ae:	f001 ffaf 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    18b2:	b120      	cbz	r0, 18be <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0xfa>
    18b4:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    18b8:	b130      	cbz	r0, 18c8 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x104>
    18ba:	e009      	b.n	18d0 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x10c>
    18bc:	e059      	b.n	1972 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1ae>
    18be:	f640 0196 	movw	r1, #2198	; 0x896
    18c2:	2070      	movs	r0, #112	; 0x70
    18c4:	f002 f81c 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    18c8:	f001 fe86 	bl	35d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    18cc:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    18d0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
    18d4:	b158      	cbz	r0, 18ee <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x12a>
    18d6:	492b      	ldr	r1, [pc, #172]	; (1984 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c0>)
    18d8:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    18dc:	6008      	str	r0, [r1, #0]
    18de:	2005      	movs	r0, #5
    18e0:	f001 fb86 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    18e4:	f001 fec4 	bl	3670 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>
    18e8:	2000      	movs	r0, #0
    18ea:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    18ee:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    18f2:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    18f6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    18fa:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    18fe:	6840      	ldr	r0, [r0, #4]
    1900:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1904:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1908:	b001      	add	sp, #4
    190a:	2100      	movs	r1, #0
    190c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1910:	4710      	bx	r2
    1912:	f001 fc25 	bl	3160 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    1916:	8ae0      	ldrh	r0, [r4, #22]
    1918:	b110      	cbz	r0, 1920 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x15c>
    191a:	f001 ff79 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    191e:	b128      	cbz	r0, 192c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x168>
    1920:	4819      	ldr	r0, [pc, #100]	; (1988 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c4>)
    1922:	7800      	ldrb	r0, [r0, #0]
    1924:	2803      	cmp	r0, #3
    1926:	bf08      	it	eq
    1928:	7766      	strbeq	r6, [r4, #29]
    192a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    192c:	f640 01a1 	movw	r1, #2209	; 0x8a1
    1930:	2070      	movs	r0, #112	; 0x70
    1932:	f001 ffe5 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1936:	4815      	ldr	r0, [pc, #84]	; (198c <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA+0x1c8>)
    1938:	6006      	str	r6, [r0, #0]
    193a:	6888      	ldr	r0, [r1, #8]
    193c:	6006      	str	r6, [r0, #0]
    193e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1940:	7808      	ldrb	r0, [r1, #0]
    1942:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    1946:	f002 b8ab 	b.w	3aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    194a:	f7ff fbb7 	bl	10bc <CONFIG_FPROTECT_BLOCK_SIZE+0xbc>
    194e:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1952:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    1956:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    195a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
    195e:	6840      	ldr	r0, [r0, #4]
    1960:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    1964:	f855 2031 	ldr.w	r2, [r5, r1, lsl #3]
    1968:	b001      	add	sp, #4
    196a:	2105      	movs	r1, #5
    196c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    1970:	4710      	bx	r2
    1972:	f640 01b4 	movw	r1, #2228	; 0x8b4
    1976:	2070      	movs	r0, #112	; 0x70
    1978:	f001 ffc2 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    197c:	20000b8c 	.word	0x20000b8c
    1980:	20000010 	.word	0x20000010
    1984:	4001f508 	.word	0x4001f508
    1988:	20000012 	.word	0x20000012
    198c:	40000508 	.word	0x40000508

00001990 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>:
    1990:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1994:	4682      	mov	sl, r0
    1996:	48dc      	ldr	r0, [pc, #880]	; (1d08 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x378>)
    1998:	b08b      	sub	sp, #44	; 0x2c
    199a:	6800      	ldr	r0, [r0, #0]
    199c:	4ddb      	ldr	r5, [pc, #876]	; (1d0c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x37c>)
    199e:	05c0      	lsls	r0, r0, #23
    19a0:	0dc0      	lsrs	r0, r0, #23
    19a2:	d00e      	beq.n	19c2 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32>
    19a4:	3810      	subs	r0, #16
    19a6:	b240      	sxtb	r0, r0
    19a8:	2800      	cmp	r0, #0
    19aa:	bfb8      	it	lt
    19ac:	f000 000f 	andlt.w	r0, r0, #15
    19b0:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    19b4:	bfac      	ite	ge
    19b6:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    19ba:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    19be:	0940      	lsrs	r0, r0, #5
    19c0:	d00d      	beq.n	19de <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x4e>
    19c2:	980c      	ldr	r0, [sp, #48]	; 0x30
    19c4:	f04f 0b00 	mov.w	fp, #0
    19c8:	7800      	ldrb	r0, [r0, #0]
    19ca:	2800      	cmp	r0, #0
    19cc:	bf18      	it	ne
    19ce:	2801      	cmpne	r0, #1
    19d0:	d018      	beq.n	1a04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    19d2:	f240 714f 	movw	r1, #1871	; 0x74f
    19d6:	f04f 0070 	mov.w	r0, #112	; 0x70
    19da:	f001 ff91 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19de:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    19e2:	f04f 0b01 	mov.w	fp, #1
    19e6:	2820      	cmp	r0, #32
    19e8:	d007      	beq.n	19fa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x6a>
    19ea:	980c      	ldr	r0, [sp, #48]	; 0x30
    19ec:	7800      	ldrb	r0, [r0, #0]
    19ee:	b148      	cbz	r0, 1a04 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x74>
    19f0:	f240 714b 	movw	r1, #1867	; 0x74b
    19f4:	2070      	movs	r0, #112	; 0x70
    19f6:	f001 ff83 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    19fa:	f44f 61e9 	mov.w	r1, #1864	; 0x748
    19fe:	2070      	movs	r0, #112	; 0x70
    1a00:	f001 ff7e 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1a04:	4cc2      	ldr	r4, [pc, #776]	; (1d10 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x380>)
    1a06:	b124      	cbz	r4, 1a12 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x82>
    1a08:	2100      	movs	r1, #0
    1a0a:	f240 7052 	movw	r0, #1874	; 0x752
    1a0e:	f3af 8000 	nop.w
    1a12:	49c0      	ldr	r1, [pc, #768]	; (1d14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x384>)
    1a14:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    1a18:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    1a1c:	f04f 0801 	mov.w	r8, #1
    1a20:	9000      	str	r0, [sp, #0]
    1a22:	b124      	cbz	r4, 1a2e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x9e>
    1a24:	2100      	movs	r1, #0
    1a26:	f240 705a 	movw	r0, #1882	; 0x75a
    1a2a:	f3af 8000 	nop.w
    1a2e:	f1b8 0f00 	cmp.w	r8, #0
    1a32:	d009      	beq.n	1a48 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xb8>
    1a34:	f895 602e 	ldrb.w	r6, [r5, #46]	; 0x2e
    1a38:	f04f 0900 	mov.w	r9, #0
    1a3c:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    1a40:	f1bb 0f00 	cmp.w	fp, #0
    1a44:	d007      	beq.n	1a56 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xc6>
    1a46:	e032      	b.n	1aae <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x11e>
    1a48:	48b3      	ldr	r0, [pc, #716]	; (1d18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1a4a:	2800      	cmp	r0, #0
    1a4c:	bf18      	it	ne
    1a4e:	f3af 8000 	nopne.w
    1a52:	b662      	cpsie	i
    1a54:	e7ee      	b.n	1a34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xa4>
    1a56:	4637      	mov	r7, r6
    1a58:	2001      	movs	r0, #1
    1a5a:	ea20 0607 	bic.w	r6, r0, r7
    1a5e:	48af      	ldr	r0, [pc, #700]	; (1d1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1a60:	2240      	movs	r2, #64	; 0x40
    1a62:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1a66:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1a6a:	f00a fe39 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1a6e:	b124      	cbz	r4, 1a7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0xea>
    1a70:	2100      	movs	r1, #0
    1a72:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1a76:	f3af 8000 	nop.w
    1a7a:	eb05 0187 	add.w	r1, r5, r7, lsl #2
    1a7e:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1a82:	6a09      	ldr	r1, [r1, #32]
    1a84:	6201      	str	r1, [r0, #32]
    1a86:	b124      	cbz	r4, 1a92 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x102>
    1a88:	2100      	movs	r1, #0
    1a8a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1a8e:	f3af 8000 	nop.w
    1a92:	b124      	cbz	r4, 1a9e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x10e>
    1a94:	2100      	movs	r1, #0
    1a96:	f240 7064 	movw	r0, #1892	; 0x764
    1a9a:	f3af 8000 	nop.w
    1a9e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1aa2:	f88d 0004 	strb.w	r0, [sp, #4]
    1aa6:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1aaa:	2800      	cmp	r0, #0
    1aac:	d1b9      	bne.n	1a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1aae:	b124      	cbz	r4, 1aba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x12a>
    1ab0:	2100      	movs	r1, #0
    1ab2:	f240 706e 	movw	r0, #1902	; 0x76e
    1ab6:	f3af 8000 	nop.w
    1aba:	f001 f83b 	bl	2b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1abe:	4680      	mov	r8, r0
    1ac0:	4633      	mov	r3, r6
    1ac2:	aa06      	add	r2, sp, #24
    1ac4:	990c      	ldr	r1, [sp, #48]	; 0x30
    1ac6:	f7ff fa25 	bl	f14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x714>
    1aca:	b124      	cbz	r4, 1ad6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x146>
    1acc:	2100      	movs	r1, #0
    1ace:	f240 7075 	movw	r0, #1909	; 0x775
    1ad2:	f3af 8000 	nop.w
    1ad6:	4991      	ldr	r1, [pc, #580]	; (1d1c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x38c>)
    1ad8:	a806      	add	r0, sp, #24
    1ada:	eb01 1786 	add.w	r7, r1, r6, lsl #6
    1ade:	f817 101a 	ldrb.w	r1, [r7, sl, lsl #1]
    1ae2:	2901      	cmp	r1, #1
    1ae4:	bf18      	it	ne
    1ae6:	2902      	cmpne	r1, #2
    1ae8:	d13c      	bne.n	1b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1aea:	9906      	ldr	r1, [sp, #24]
    1aec:	9b07      	ldr	r3, [sp, #28]
    1aee:	eba1 0108 	sub.w	r1, r1, r8
    1af2:	4a8b      	ldr	r2, [pc, #556]	; (1d20 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x390>)
    1af4:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1af8:	eba3 0308 	sub.w	r3, r3, r8
    1afc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    1b00:	2902      	cmp	r1, #2
    1b02:	d371      	bcc.n	1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1b04:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    1b08:	d26e      	bcs.n	1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1b0a:	429a      	cmp	r2, r3
    1b0c:	d36c      	bcc.n	1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1b0e:	f04f 0901 	mov.w	r9, #1
    1b12:	ab01      	add	r3, sp, #4
    1b14:	aa05      	add	r2, sp, #20
    1b16:	4631      	mov	r1, r6
    1b18:	f7fe fef2 	bl	900 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x100>
    1b1c:	2800      	cmp	r0, #0
    1b1e:	d06b      	beq.n	1bf8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x268>
    1b20:	f89d 1014 	ldrb.w	r1, [sp, #20]
    1b24:	f89d 2004 	ldrb.w	r2, [sp, #4]
    1b28:	4633      	mov	r3, r6
    1b2a:	428a      	cmp	r2, r1
    1b2c:	d068      	beq.n	1c00 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x270>
    1b2e:	2005      	movs	r0, #5
    1b30:	f7fe fd2e 	bl	590 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ+0x1c>
    1b34:	eb07 014a 	add.w	r1, r7, sl, lsl #1
    1b38:	7048      	strb	r0, [r1, #1]
    1b3a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    1b3e:	2820      	cmp	r0, #32
    1b40:	bf03      	ittte	eq
    1b42:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1b46:	f880 a020 	strbeq.w	sl, [r0, #32]
    1b4a:	f880 9023 	strbeq.w	r9, [r0, #35]	; 0x23
    1b4e:	eb07 0040 	addne.w	r0, r7, r0, lsl #1
    1b52:	bf18      	it	ne
    1b54:	f880 a001 	strbne.w	sl, [r0, #1]
    1b58:	4632      	mov	r2, r6
    1b5a:	4651      	mov	r1, sl
    1b5c:	f05f 0003 	movs.w	r0, #3
    1b60:	f7ff fb7e 	bl	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    1b64:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    1b68:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    1b6c:	f88d 0004 	strb.w	r0, [sp, #4]
    1b70:	f89d 7004 	ldrb.w	r7, [sp, #4]
    1b74:	b124      	cbz	r4, 1b80 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1f0>
    1b76:	2100      	movs	r1, #0
    1b78:	f240 707c 	movw	r0, #1916	; 0x77c
    1b7c:	f3af 8000 	nop.w
    1b80:	4868      	ldr	r0, [pc, #416]	; (1d24 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x394>)
    1b82:	2800      	cmp	r0, #0
    1b84:	bf18      	it	ne
    1b86:	f3af 8000 	nopne.w
    1b8a:	f3ef 8810 	mrs	r8, PRIMASK
    1b8e:	b672      	cpsid	i
    1b90:	b124      	cbz	r4, 1b9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x20c>
    1b92:	2100      	movs	r1, #0
    1b94:	f240 7082 	movw	r0, #1922	; 0x782
    1b98:	f3af 8000 	nop.w
    1b9c:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    1ba0:	f88d 0004 	strb.w	r0, [sp, #4]
    1ba4:	f89d 0004 	ldrb.w	r0, [sp, #4]
    1ba8:	2800      	cmp	r0, #0
    1baa:	f47f af3a 	bne.w	1a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1bae:	b124      	cbz	r4, 1bba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x22a>
    1bb0:	2100      	movs	r1, #0
    1bb2:	f240 708a 	movw	r0, #1930	; 0x78a
    1bb6:	f3af 8000 	nop.w
    1bba:	f10d 0e18 	add.w	lr, sp, #24
    1bbe:	9800      	ldr	r0, [sp, #0]
    1bc0:	e89e 100e 	ldmia.w	lr, {r1, r2, r3, ip}
    1bc4:	f100 0008 	add.w	r0, r0, #8
    1bc8:	f1b9 0f00 	cmp.w	r9, #0
    1bcc:	e880 100e 	stmia.w	r0, {r1, r2, r3, ip}
    1bd0:	d044      	beq.n	1c5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1bd2:	b124      	cbz	r4, 1bde <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x24e>
    1bd4:	2100      	movs	r1, #0
    1bd6:	f240 7097 	movw	r0, #1943	; 0x797
    1bda:	f3af 8000 	nop.w
    1bde:	f1bb 0f00 	cmp.w	fp, #0
    1be2:	d12c      	bne.n	1c3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1be4:	e016      	b.n	1c14 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x284>
    1be6:	e7ff      	b.n	1be8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x258>
    1be8:	4632      	mov	r2, r6
    1bea:	4651      	mov	r1, sl
    1bec:	2004      	movs	r0, #4
    1bee:	f7ff fb37 	bl	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    1bf2:	f04f 0901 	mov.w	r9, #1
    1bf6:	e7b5      	b.n	1b64 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d4>
    1bf8:	4632      	mov	r2, r6
    1bfa:	4651      	mov	r1, sl
    1bfc:	2004      	movs	r0, #4
    1bfe:	e7af      	b.n	1b60 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1d0>
    1c00:	2920      	cmp	r1, #32
    1c02:	bf19      	ittee	ne
    1c04:	eb07 0041 	addne.w	r0, r7, r1, lsl #1
    1c08:	7840      	ldrbne	r0, [r0, #1]
    1c0a:	eb05 0086 	addeq.w	r0, r5, r6, lsl #2
    1c0e:	f890 0020 	ldrbeq.w	r0, [r0, #32]
    1c12:	e78f      	b.n	1b34 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x1a4>
    1c14:	b19f      	cbz	r7, 1c3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1c16:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    1c1a:	2820      	cmp	r0, #32
    1c1c:	d10f      	bne.n	1c3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1c1e:	b124      	cbz	r4, 1c2a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x29a>
    1c20:	2100      	movs	r1, #0
    1c22:	f240 709c 	movw	r0, #1948	; 0x79c
    1c26:	f3af 8000 	nop.w
    1c2a:	4631      	mov	r1, r6
    1c2c:	2002      	movs	r0, #2
    1c2e:	f7ff fb47 	bl	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
    1c32:	b920      	cbnz	r0, 1c3e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ae>
    1c34:	980c      	ldr	r0, [sp, #48]	; 0x30
    1c36:	7800      	ldrb	r0, [r0, #0]
    1c38:	b3f0      	cbz	r0, 1cb8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x328>
    1c3a:	2801      	cmp	r0, #1
    1c3c:	d04c      	beq.n	1cd8 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x348>
    1c3e:	b124      	cbz	r4, 1c4a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ba>
    1c40:	2100      	movs	r1, #0
    1c42:	f240 70b9 	movw	r0, #1977	; 0x7b9
    1c46:	f3af 8000 	nop.w
    1c4a:	f1bb 0f00 	cmp.w	fp, #0
    1c4e:	bf18      	it	ne
    1c50:	2001      	movne	r0, #1
    1c52:	d04a      	beq.n	1cea <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x35a>
    1c54:	f885 002b 	strb.w	r0, [r5, #43]	; 0x2b
    1c58:	f04f 0901 	mov.w	r9, #1
    1c5c:	b124      	cbz	r4, 1c68 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2d8>
    1c5e:	2100      	movs	r1, #0
    1c60:	f240 70ca 	movw	r0, #1994	; 0x7ca
    1c64:	f3af 8000 	nop.w
    1c68:	f1b8 0f00 	cmp.w	r8, #0
    1c6c:	d045      	beq.n	1cfa <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x36a>
    1c6e:	b124      	cbz	r4, 1c7a <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2ea>
    1c70:	2100      	movs	r1, #0
    1c72:	f240 70ce 	movw	r0, #1998	; 0x7ce
    1c76:	f3af 8000 	nop.w
    1c7a:	f1b9 0f00 	cmp.w	r9, #0
    1c7e:	d011      	beq.n	1ca4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1c80:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1c84:	eb05 0080 	add.w	r0, r5, r0, lsl #2
    1c88:	f890 0021 	ldrb.w	r0, [r0, #33]	; 0x21
    1c8c:	2820      	cmp	r0, #32
    1c8e:	d009      	beq.n	1ca4 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x314>
    1c90:	b124      	cbz	r4, 1c9c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x30c>
    1c92:	2100      	movs	r1, #0
    1c94:	f240 70d5 	movw	r0, #2005	; 0x7d5
    1c98:	f3af 8000 	nop.w
    1c9c:	4822      	ldr	r0, [pc, #136]	; (1d28 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x398>)
    1c9e:	7840      	ldrb	r0, [r0, #1]
    1ca0:	f001 fefe 	bl	3aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    1ca4:	b124      	cbz	r4, 1cb0 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x320>
    1ca6:	2100      	movs	r1, #0
    1ca8:	f240 70da 	movw	r0, #2010	; 0x7da
    1cac:	f3af 8000 	nop.w
    1cb0:	b00d      	add	sp, #52	; 0x34
    1cb2:	4648      	mov	r0, r9
    1cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1cb8:	e7ff      	b.n	1cba <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x32a>
    1cba:	b124      	cbz	r4, 1cc6 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x336>
    1cbc:	2100      	movs	r1, #0
    1cbe:	f240 70a4 	movw	r0, #1956	; 0x7a4
    1cc2:	f3af 8000 	nop.w
    1cc6:	f895 202e 	ldrb.w	r2, [r5, #46]	; 0x2e
    1cca:	4651      	mov	r1, sl
    1ccc:	2004      	movs	r0, #4
    1cce:	f7ff fac7 	bl	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    1cd2:	f04f 0901 	mov.w	r9, #1
    1cd6:	e7c1      	b.n	1c5c <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2cc>
    1cd8:	2c00      	cmp	r4, #0
    1cda:	f43f aea2 	beq.w	1a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1cde:	2100      	movs	r1, #0
    1ce0:	f240 70af 	movw	r0, #1967	; 0x7af
    1ce4:	f3af 8000 	nop.w
    1ce8:	e69b      	b.n	1a22 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x92>
    1cea:	f895 102e 	ldrb.w	r1, [r5, #46]	; 0x2e
    1cee:	2001      	movs	r0, #1
    1cf0:	ea20 0101 	bic.w	r1, r0, r1
    1cf4:	f885 102e 	strb.w	r1, [r5, #46]	; 0x2e
    1cf8:	e7ac      	b.n	1c54 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2c4>
    1cfa:	4807      	ldr	r0, [pc, #28]	; (1d18 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x388>)
    1cfc:	2800      	cmp	r0, #0
    1cfe:	bf18      	it	ne
    1d00:	f3af 8000 	nopne.w
    1d04:	b662      	cpsie	i
    1d06:	e7b2      	b.n	1c6e <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY+0x2de>
    1d08:	e000ed04 	.word	0xe000ed04
    1d0c:	20000f0c 	.word	0x20000f0c
    1d10:	00000000 	.word	0x00000000
    1d14:	20000b8c 	.word	0x20000b8c
    1d18:	00000000 	.word	0x00000000
    1d1c:	20000e8c 	.word	0x20000e8c
    1d20:	003fffff 	.word	0x003fffff
    1d24:	00000000 	.word	0x00000000
    1d28:	20000010 	.word	0x20000010

00001d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>:
    1d2c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d30:	48a5      	ldr	r0, [pc, #660]	; (1fc8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x27c>)
    1d32:	b08c      	sub	sp, #48	; 0x30
    1d34:	6800      	ldr	r0, [r0, #0]
    1d36:	05c0      	lsls	r0, r0, #23
    1d38:	0dc0      	lsrs	r0, r0, #23
    1d3a:	d011      	beq.n	1d60 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x14>
    1d3c:	3810      	subs	r0, #16
    1d3e:	b240      	sxtb	r0, r0
    1d40:	2800      	cmp	r0, #0
    1d42:	bfb8      	it	lt
    1d44:	f000 000f 	andlt.w	r0, r0, #15
    1d48:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    1d4c:	bfac      	ite	ge
    1d4e:	f890 0400 	ldrbge.w	r0, [r0, #1024]	; 0x400
    1d52:	f890 0d14 	ldrblt.w	r0, [r0, #3348]	; 0xd14
    1d56:	0940      	lsrs	r0, r0, #5
    1d58:	bf08      	it	eq
    1d5a:	f04f 0901 	moveq.w	r9, #1
    1d5e:	d001      	beq.n	1d64 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x18>
    1d60:	f04f 0900 	mov.w	r9, #0
    1d64:	980c      	ldr	r0, [sp, #48]	; 0x30
    1d66:	7800      	ldrb	r0, [r0, #0]
    1d68:	2800      	cmp	r0, #0
    1d6a:	f04f 0000 	mov.w	r0, #0
    1d6e:	bf1c      	itt	ne
    1d70:	b00d      	addne	sp, #52	; 0x34
    1d72:	e8bd 8ff0 	ldmiane.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1d76:	f8df a254 	ldr.w	sl, [pc, #596]	; 1fcc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x280>
    1d7a:	4d95      	ldr	r5, [pc, #596]	; (1fd0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x284>)
    1d7c:	4c95      	ldr	r4, [pc, #596]	; (1fd4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x288>)
    1d7e:	f04f 0b00 	mov.w	fp, #0
    1d82:	900b      	str	r0, [sp, #44]	; 0x2c
    1d84:	b125      	cbz	r5, 1d90 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x44>
    1d86:	2100      	movs	r1, #0
    1d88:	f44f 60cb 	mov.w	r0, #1624	; 0x658
    1d8c:	f3af 8000 	nop.w
    1d90:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
    1d94:	f884 b02b 	strb.w	fp, [r4, #43]	; 0x2b
    1d98:	f04f 0800 	mov.w	r8, #0
    1d9c:	b125      	cbz	r5, 1da8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x5c>
    1d9e:	2100      	movs	r1, #0
    1da0:	f240 605d 	movw	r0, #1629	; 0x65d
    1da4:	f3af 8000 	nop.w
    1da8:	f1b9 0f00 	cmp.w	r9, #0
    1dac:	d11d      	bne.n	1dea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9e>
    1dae:	4637      	mov	r7, r6
    1db0:	2001      	movs	r0, #1
    1db2:	ea20 0607 	bic.w	r6, r0, r7
    1db6:	4888      	ldr	r0, [pc, #544]	; (1fd8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x28c>)
    1db8:	2240      	movs	r2, #64	; 0x40
    1dba:	eb00 1187 	add.w	r1, r0, r7, lsl #6
    1dbe:	eb00 1086 	add.w	r0, r0, r6, lsl #6
    1dc2:	f00a fc8d 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    1dc6:	b125      	cbz	r5, 1dd2 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x86>
    1dc8:	2100      	movs	r1, #0
    1dca:	f240 50cd 	movw	r0, #1485	; 0x5cd
    1dce:	f3af 8000 	nop.w
    1dd2:	eb04 0187 	add.w	r1, r4, r7, lsl #2
    1dd6:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    1dda:	6a09      	ldr	r1, [r1, #32]
    1ddc:	6201      	str	r1, [r0, #32]
    1dde:	b125      	cbz	r5, 1dea <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x9e>
    1de0:	2100      	movs	r1, #0
    1de2:	f240 50d1 	movw	r0, #1489	; 0x5d1
    1de6:	f3af 8000 	nop.w
    1dea:	b125      	cbz	r5, 1df6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xaa>
    1dec:	2100      	movs	r1, #0
    1dee:	f240 6065 	movw	r0, #1637	; 0x665
    1df2:	f3af 8000 	nop.w
    1df6:	f000 fe9d 	bl	2b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    1dfa:	4607      	mov	r7, r0
    1dfc:	4633      	mov	r3, r6
    1dfe:	466a      	mov	r2, sp
    1e00:	990c      	ldr	r1, [sp, #48]	; 0x30
    1e02:	f7ff f887 	bl	f14 <CONFIG_BT_BACKGROUND_SCAN_INTERVAL+0x714>
    1e06:	b125      	cbz	r5, 1e12 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xc6>
    1e08:	2100      	movs	r1, #0
    1e0a:	f240 606b 	movw	r0, #1643	; 0x66b
    1e0e:	f3af 8000 	nop.w
    1e12:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1e16:	2820      	cmp	r0, #32
    1e18:	d014      	beq.n	1e44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e1a:	6920      	ldr	r0, [r4, #16]
    1e1c:	9900      	ldr	r1, [sp, #0]
    1e1e:	1a09      	subs	r1, r1, r0
    1e20:	0209      	lsls	r1, r1, #8
    1e22:	17ca      	asrs	r2, r1, #31
    1e24:	eb01 6112 	add.w	r1, r1, r2, lsr #24
    1e28:	1209      	asrs	r1, r1, #8
    1e2a:	d50b      	bpl.n	1e44 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0xf8>
    1e2c:	e9dd 2100 	ldrd	r2, r1, [sp]
    1e30:	1a89      	subs	r1, r1, r2
    1e32:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
    1e36:	4408      	add	r0, r1
    1e38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e3c:	e9cd 2000 	strd	r2, r0, [sp]
    1e40:	f04f 0801 	mov.w	r8, #1
    1e44:	b14d      	cbz	r5, 1e5a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x10e>
    1e46:	2100      	movs	r1, #0
    1e48:	f240 6075 	movw	r0, #1653	; 0x675
    1e4c:	f3af 8000 	nop.w
    1e50:	2100      	movs	r1, #0
    1e52:	f240 607b 	movw	r0, #1659	; 0x67b
    1e56:	f3af 8000 	nop.w
    1e5a:	9800      	ldr	r0, [sp, #0]
    1e5c:	9901      	ldr	r1, [sp, #4]
    1e5e:	1bc0      	subs	r0, r0, r7
    1e60:	1bc9      	subs	r1, r1, r7
    1e62:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1e66:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1e6a:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    1e6e:	d205      	bcs.n	1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1e70:	458a      	cmp	sl, r1
    1e72:	d303      	bcc.n	1e7c <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x130>
    1e74:	f1b9 0f00 	cmp.w	r9, #0
    1e78:	d10c      	bne.n	1e94 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x148>
    1e7a:	e003      	b.n	1e84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x138>
    1e7c:	f1b9 0f00 	cmp.w	r9, #0
    1e80:	d038      	beq.n	1ef4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1a8>
    1e82:	e094      	b.n	1fae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x262>
    1e84:	4633      	mov	r3, r6
    1e86:	463a      	mov	r2, r7
    1e88:	4669      	mov	r1, sp
    1e8a:	4854      	ldr	r0, [pc, #336]	; (1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>)
    1e8c:	f7fe fbbc 	bl	608 <CONFIG_BT_HCI_TX_STACK_SIZE+0x8>
    1e90:	ea48 0800 	orr.w	r8, r8, r0
    1e94:	f1b8 0f00 	cmp.w	r8, #0
    1e98:	d022      	beq.n	1ee0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x194>
    1e9a:	9800      	ldr	r0, [sp, #0]
    1e9c:	f00a fab2 	bl	c404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1ea0:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1ea4:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1ea8:	4b4d      	ldr	r3, [pc, #308]	; (1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>)
    1eaa:	4411      	add	r1, r2
    1eac:	1c49      	adds	r1, r1, #1
    1eae:	1842      	adds	r2, r0, r1
    1eb0:	4298      	cmp	r0, r3
    1eb2:	d841      	bhi.n	1f38 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1ec>
    1eb4:	4849      	ldr	r0, [pc, #292]	; (1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>)
    1eb6:	4281      	cmp	r1, r0
    1eb8:	dc5a      	bgt.n	1f70 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x224>
    1eba:	4240      	negs	r0, r0
    1ebc:	4281      	cmp	r1, r0
    1ebe:	db5f      	blt.n	1f80 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x234>
    1ec0:	1c58      	adds	r0, r3, #1
    1ec2:	4290      	cmp	r0, r2
    1ec4:	bfdc      	itt	le
    1ec6:	f502 02f7 	addle.w	r2, r2, #8093696	; 0x7b8000
    1eca:	f1a2 52f8 	suble.w	r2, r2, #520093696	; 0x1f000000
    1ece:	dd05      	ble.n	1edc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x190>
    1ed0:	2a00      	cmp	r2, #0
    1ed2:	bfbc      	itt	lt
    1ed4:	f5a2 02f7 	sublt.w	r2, r2, #8093696	; 0x7b8000
    1ed8:	f102 52f8 	addlt.w	r2, r2, #520093696	; 0x1f000000
    1edc:	980c      	ldr	r0, [sp, #48]	; 0x30
    1ede:	60c2      	str	r2, [r0, #12]
    1ee0:	2001      	movs	r0, #1
    1ee2:	900b      	str	r0, [sp, #44]	; 0x2c
    1ee4:	2d00      	cmp	r5, #0
    1ee6:	d062      	beq.n	1fae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x262>
    1ee8:	2100      	movs	r1, #0
    1eea:	f240 608e 	movw	r0, #1678	; 0x68e
    1eee:	f3af 8000 	nop.w
    1ef2:	e05c      	b.n	1fae <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x262>
    1ef4:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1ef8:	aa08      	add	r2, sp, #32
    1efa:	a907      	add	r1, sp, #28
    1efc:	f000 fcbc 	bl	2878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    1f00:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    1f04:	2820      	cmp	r0, #32
    1f06:	d01c      	beq.n	1f42 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1f6>
    1f08:	6920      	ldr	r0, [r4, #16]
    1f0a:	1d40      	adds	r0, r0, #5
    1f0c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1f10:	e9dd 2100 	ldrd	r2, r1, [sp]
    1f14:	1a89      	subs	r1, r1, r2
    1f16:	4401      	add	r1, r0
    1f18:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    1f1c:	e9cd 0100 	strd	r0, r1, [sp]
    1f20:	f00a fa70 	bl	c404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>
    1f24:	f8bd 100a 	ldrh.w	r1, [sp, #10]
    1f28:	f89d 2008 	ldrb.w	r2, [sp, #8]
    1f2c:	4b2c      	ldr	r3, [pc, #176]	; (1fe0 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x294>)
    1f2e:	4411      	add	r1, r2
    1f30:	1c4a      	adds	r2, r1, #1
    1f32:	1881      	adds	r1, r0, r2
    1f34:	4298      	cmp	r0, r3
    1f36:	d918      	bls.n	1f6a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x21e>
    1f38:	f240 6109 	movw	r1, #1545	; 0x609
    1f3c:	2070      	movs	r0, #112	; 0x70
    1f3e:	f001 fcdf 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f42:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    1f46:	f107 0609 	add.w	r6, r7, #9
    1f4a:	b120      	cbz	r0, 1f56 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x20a>
    1f4c:	f001 fc60 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    1f50:	2800      	cmp	r0, #0
    1f52:	bf08      	it	eq
    1f54:	3632      	addeq	r6, #50	; 0x32
    1f56:	4823      	ldr	r0, [pc, #140]	; (1fe4 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x298>)
    1f58:	7841      	ldrb	r1, [r0, #1]
    1f5a:	9807      	ldr	r0, [sp, #28]
    1f5c:	4281      	cmp	r1, r0
    1f5e:	bf84      	itt	hi
    1f60:	1a08      	subhi	r0, r1, r0
    1f62:	4406      	addhi	r6, r0
    1f64:	f026 407f 	bic.w	r0, r6, #4278190080	; 0xff000000
    1f68:	e7d2      	b.n	1f10 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x1c4>
    1f6a:	481c      	ldr	r0, [pc, #112]	; (1fdc <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x290>)
    1f6c:	4282      	cmp	r2, r0
    1f6e:	dd04      	ble.n	1f7a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x22e>
    1f70:	f240 610a 	movw	r1, #1546	; 0x60a
    1f74:	2070      	movs	r0, #112	; 0x70
    1f76:	f001 fcc3 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f7a:	481b      	ldr	r0, [pc, #108]	; (1fe8 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x29c>)
    1f7c:	4282      	cmp	r2, r0
    1f7e:	da04      	bge.n	1f8a <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x23e>
    1f80:	f240 610b 	movw	r1, #1547	; 0x60b
    1f84:	2070      	movs	r0, #112	; 0x70
    1f86:	f001 fcbb 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    1f8a:	4818      	ldr	r0, [pc, #96]	; (1fec <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x2a0>)
    1f8c:	4288      	cmp	r0, r1
    1f8e:	bfdc      	itt	le
    1f90:	f501 01f7 	addle.w	r1, r1, #8093696	; 0x7b8000
    1f94:	f1a1 51f8 	suble.w	r1, r1, #520093696	; 0x1f000000
    1f98:	dd05      	ble.n	1fa6 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x25a>
    1f9a:	2900      	cmp	r1, #0
    1f9c:	bfbc      	itt	lt
    1f9e:	f5a1 01f7 	sublt.w	r1, r1, #8093696	; 0x7b8000
    1fa2:	f101 51f8 	addlt.w	r1, r1, #520093696	; 0x1f000000
    1fa6:	980c      	ldr	r0, [sp, #48]	; 0x30
    1fa8:	60c1      	str	r1, [r0, #12]
    1faa:	2001      	movs	r0, #1
    1fac:	900b      	str	r0, [sp, #44]	; 0x2c
    1fae:	f894 002b 	ldrb.w	r0, [r4, #43]	; 0x2b
    1fb2:	f88d 0010 	strb.w	r0, [sp, #16]
    1fb6:	f89d 0010 	ldrb.w	r0, [sp, #16]
    1fba:	2800      	cmp	r0, #0
    1fbc:	f47f aee2 	bne.w	1d84 <CONFIG_BT_CTLR_SDC_MAX_CONN_EVENT_LEN_DEFAULT+0x38>
    1fc0:	980b      	ldr	r0, [sp, #44]	; 0x2c
    1fc2:	b00d      	add	sp, #52	; 0x34
    1fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1fc8:	e000ed04 	.word	0xe000ed04
    1fcc:	003fffff 	.word	0x003fffff
    1fd0:	00000000 	.word	0x00000000
    1fd4:	20000f0c 	.word	0x20000f0c
    1fd8:	20000e8c 	.word	0x20000e8c
    1fdc:	07a12000 	.word	0x07a12000
    1fe0:	1e847fff 	.word	0x1e847fff
    1fe4:	20000012 	.word	0x20000012
    1fe8:	f85ee000 	.word	0xf85ee000
    1fec:	1e848000 	.word	0x1e848000

00001ff0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>:
    1ff0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1ff4:	4d88      	ldr	r5, [pc, #544]	; (2218 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x228>)
    1ff6:	b08c      	sub	sp, #48	; 0x30
    1ff8:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    1ffc:	2000      	movs	r0, #0
    1ffe:	9009      	str	r0, [sp, #36]	; 0x24
    2000:	2001      	movs	r0, #1
    2002:	4c86      	ldr	r4, [pc, #536]	; (221c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x22c>)
    2004:	f04f 0900 	mov.w	r9, #0
    2008:	f1a5 0780 	sub.w	r7, r5, #128	; 0x80
    200c:	4680      	mov	r8, r0
    200e:	9008      	str	r0, [sp, #32]
    2010:	b124      	cbz	r4, 201c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x2c>
    2012:	2100      	movs	r1, #0
    2014:	f240 70e9 	movw	r0, #2025	; 0x7e9
    2018:	f3af 8000 	nop.w
    201c:	9808      	ldr	r0, [sp, #32]
    201e:	2800      	cmp	r0, #0
    2020:	d037      	beq.n	2092 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xa2>
    2022:	bf00      	nop
    2024:	f885 902b 	strb.w	r9, [r5, #43]	; 0x2b
    2028:	b124      	cbz	r4, 2034 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x44>
    202a:	2100      	movs	r1, #0
    202c:	f240 70ee 	movw	r0, #2030	; 0x7ee
    2030:	f3af 8000 	nop.w
    2034:	f895 a02e 	ldrb.w	sl, [r5, #46]	; 0x2e
    2038:	2240      	movs	r2, #64	; 0x40
    203a:	ea28 060a 	bic.w	r6, r8, sl
    203e:	eb07 1086 	add.w	r0, r7, r6, lsl #6
    2042:	eb07 118a 	add.w	r1, r7, sl, lsl #6
    2046:	4683      	mov	fp, r0
    2048:	f00a fb4a 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    204c:	b124      	cbz	r4, 2058 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x68>
    204e:	2100      	movs	r1, #0
    2050:	f240 50cd 	movw	r0, #1485	; 0x5cd
    2054:	f3af 8000 	nop.w
    2058:	eb05 0086 	add.w	r0, r5, r6, lsl #2
    205c:	eb05 018a 	add.w	r1, r5, sl, lsl #2
    2060:	9000      	str	r0, [sp, #0]
    2062:	6a09      	ldr	r1, [r1, #32]
    2064:	6201      	str	r1, [r0, #32]
    2066:	b124      	cbz	r4, 2072 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x82>
    2068:	2100      	movs	r1, #0
    206a:	f240 50d1 	movw	r0, #1489	; 0x5d1
    206e:	f3af 8000 	nop.w
    2072:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2076:	f88d 0008 	strb.w	r0, [sp, #8]
    207a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    207e:	b178      	cbz	r0, 20a0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xb0>
    2080:	2c00      	cmp	r4, #0
    2082:	bf1c      	itt	ne
    2084:	2100      	movne	r1, #0
    2086:	f240 70f4 	movwne	r0, #2036	; 0x7f4
    208a:	d0c1      	beq.n	2010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    208c:	f3af 8000 	nop.w
    2090:	e7be      	b.n	2010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    2092:	4863      	ldr	r0, [pc, #396]	; (2220 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    2094:	2800      	cmp	r0, #0
    2096:	bf18      	it	ne
    2098:	f3af 8000 	nopne.w
    209c:	b662      	cpsie	i
    209e:	e7c1      	b.n	2024 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x34>
    20a0:	b124      	cbz	r4, 20ac <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xbc>
    20a2:	2100      	movs	r1, #0
    20a4:	f44f 60ff 	mov.w	r0, #2040	; 0x7f8
    20a8:	f3af 8000 	nop.w
    20ac:	980c      	ldr	r0, [sp, #48]	; 0x30
    20ae:	f81b 0010 	ldrb.w	r0, [fp, r0, lsl #1]
    20b2:	2803      	cmp	r0, #3
    20b4:	d172      	bne.n	219c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ac>
    20b6:	f8dd a000 	ldr.w	sl, [sp]
    20ba:	f8cd a018 	str.w	sl, [sp, #24]
    20be:	990c      	ldr	r1, [sp, #48]	; 0x30
    20c0:	f89a 0020 	ldrb.w	r0, [sl, #32]
    20c4:	4288      	cmp	r0, r1
    20c6:	bf14      	ite	ne
    20c8:	f04f 0b00 	movne.w	fp, #0
    20cc:	f04f 0b01 	moveq.w	fp, #1
    20d0:	f10a 0c20 	add.w	ip, sl, #32
    20d4:	4686      	mov	lr, r0
    20d6:	2220      	movs	r2, #32
    20d8:	eb07 1386 	add.w	r3, r7, r6, lsl #6
    20dc:	e003      	b.n	20e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xf6>
    20de:	4602      	mov	r2, r0
    20e0:	eb03 0042 	add.w	r0, r3, r2, lsl #1
    20e4:	7840      	ldrb	r0, [r0, #1]
    20e6:	4288      	cmp	r0, r1
    20e8:	d002      	beq.n	20f0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x100>
    20ea:	2820      	cmp	r0, #32
    20ec:	d00a      	beq.n	2104 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    20ee:	e7f6      	b.n	20de <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0xee>
    20f0:	2820      	cmp	r0, #32
    20f2:	d007      	beq.n	2104 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x114>
    20f4:	4586      	cmp	lr, r0
    20f6:	d107      	bne.n	2108 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x118>
    20f8:	eb03 004e 	add.w	r0, r3, lr, lsl #1
    20fc:	7840      	ldrb	r0, [r0, #1]
    20fe:	f88c 0000 	strb.w	r0, [ip]
    2102:	e007      	b.n	2114 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x124>
    2104:	4648      	mov	r0, r9
    2106:	e00c      	b.n	2122 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x132>
    2108:	eb03 0040 	add.w	r0, r3, r0, lsl #1
    210c:	eb03 0142 	add.w	r1, r3, r2, lsl #1
    2110:	7840      	ldrb	r0, [r0, #1]
    2112:	7048      	strb	r0, [r1, #1]
    2114:	b124      	cbz	r4, 2120 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x130>
    2116:	2100      	movs	r1, #0
    2118:	f240 5037 	movw	r0, #1335	; 0x537
    211c:	f3af 8000 	nop.w
    2120:	4640      	mov	r0, r8
    2122:	ea10 0f0b 	tst.w	r0, fp
    2126:	bf18      	it	ne
    2128:	f88a 8023 	strbne.w	r8, [sl, #35]	; 0x23
    212c:	2800      	cmp	r0, #0
    212e:	d052      	beq.n	21d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    2130:	b124      	cbz	r4, 213c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x14c>
    2132:	2100      	movs	r1, #0
    2134:	f240 70fd 	movw	r0, #2045	; 0x7fd
    2138:	f3af 8000 	nop.w
    213c:	4632      	mov	r2, r6
    213e:	2001      	movs	r0, #1
    2140:	990c      	ldr	r1, [sp, #48]	; 0x30
    2142:	f7ff f88d 	bl	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    2146:	9806      	ldr	r0, [sp, #24]
    2148:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
    214c:	f88d 0008 	strb.w	r0, [sp, #8]
    2150:	f89d a008 	ldrb.w	sl, [sp, #8]
    2154:	b124      	cbz	r4, 2160 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x170>
    2156:	2100      	movs	r1, #0
    2158:	f640 0008 	movw	r0, #2056	; 0x808
    215c:	f3af 8000 	nop.w
    2160:	4830      	ldr	r0, [pc, #192]	; (2224 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x234>)
    2162:	2800      	cmp	r0, #0
    2164:	bf18      	it	ne
    2166:	f3af 8000 	nopne.w
    216a:	f3ef 8010 	mrs	r0, PRIMASK
    216e:	b672      	cpsid	i
    2170:	9008      	str	r0, [sp, #32]
    2172:	b124      	cbz	r4, 217e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x18e>
    2174:	2100      	movs	r1, #0
    2176:	f640 000d 	movw	r0, #2061	; 0x80d
    217a:	f3af 8000 	nop.w
    217e:	f895 002b 	ldrb.w	r0, [r5, #43]	; 0x2b
    2182:	f88d 0008 	strb.w	r0, [sp, #8]
    2186:	f89d 0008 	ldrb.w	r0, [sp, #8]
    218a:	b140      	cbz	r0, 219e <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1ae>
    218c:	2c00      	cmp	r4, #0
    218e:	bf1c      	itt	ne
    2190:	2100      	movne	r1, #0
    2192:	f640 0011 	movwne	r0, #2065	; 0x811
    2196:	f43f af3b 	beq.w	2010 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20>
    219a:	e777      	b.n	208c <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x9c>
    219c:	e01b      	b.n	21d6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e6>
    219e:	f1ba 0f00 	cmp.w	sl, #0
    21a2:	d008      	beq.n	21b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    21a4:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
    21a8:	2820      	cmp	r0, #32
    21aa:	d104      	bne.n	21b6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1c6>
    21ac:	4631      	mov	r1, r6
    21ae:	2002      	movs	r0, #2
    21b0:	f7ff f886 	bl	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
    21b4:	b308      	cbz	r0, 21fa <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x20a>
    21b6:	b124      	cbz	r4, 21c2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1d2>
    21b8:	2100      	movs	r1, #0
    21ba:	f640 0025 	movw	r0, #2085	; 0x825
    21be:	f3af 8000 	nop.w
    21c2:	f895 002e 	ldrb.w	r0, [r5, #46]	; 0x2e
    21c6:	ea28 0000 	bic.w	r0, r8, r0
    21ca:	f885 002e 	strb.w	r0, [r5, #46]	; 0x2e
    21ce:	f885 802b 	strb.w	r8, [r5, #43]	; 0x2b
    21d2:	2001      	movs	r0, #1
    21d4:	9009      	str	r0, [sp, #36]	; 0x24
    21d6:	b124      	cbz	r4, 21e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    21d8:	2100      	movs	r1, #0
    21da:	f640 002e 	movw	r0, #2094	; 0x82e
    21de:	f3af 8000 	nop.w
    21e2:	9808      	ldr	r0, [sp, #32]
    21e4:	b188      	cbz	r0, 220a <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x21a>
    21e6:	b124      	cbz	r4, 21f2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x202>
    21e8:	2100      	movs	r1, #0
    21ea:	f640 0032 	movw	r0, #2098	; 0x832
    21ee:	f3af 8000 	nop.w
    21f2:	9809      	ldr	r0, [sp, #36]	; 0x24
    21f4:	b00d      	add	sp, #52	; 0x34
    21f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    21fa:	2c00      	cmp	r4, #0
    21fc:	d0f1      	beq.n	21e2 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f2>
    21fe:	2100      	movs	r1, #0
    2200:	f44f 6002 	mov.w	r0, #2080	; 0x820
    2204:	f3af 8000 	nop.w
    2208:	e7e6      	b.n	21d8 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1e8>
    220a:	4805      	ldr	r0, [pc, #20]	; (2220 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x230>)
    220c:	2800      	cmp	r0, #0
    220e:	bf18      	it	ne
    2210:	f3af 8000 	nopne.w
    2214:	b662      	cpsie	i
    2216:	e7e6      	b.n	21e6 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY+0x1f6>
    2218:	20000f0c 	.word	0x20000f0c
	...

00002228 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>:
    2228:	b510      	push	{r4, lr}
    222a:	2820      	cmp	r0, #32
    222c:	d211      	bcs.n	2252 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    222e:	490e      	ldr	r1, [pc, #56]	; (2268 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x40>)
    2230:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2234:	f1a1 0280 	sub.w	r2, r1, #128	; 0x80
    2238:	eb02 1c83 	add.w	ip, r2, r3, lsl #6
    223c:	f81c 3010 	ldrb.w	r3, [ip, r0, lsl #1]
    2240:	b13b      	cbz	r3, 2252 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2a>
    2242:	f891 302e 	ldrb.w	r3, [r1, #46]	; 0x2e
    2246:	eb02 1283 	add.w	r2, r2, r3, lsl #6
    224a:	f812 2010 	ldrb.w	r2, [r2, r0, lsl #1]
    224e:	2a01      	cmp	r2, #1
    2250:	d001      	beq.n	2256 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y+0x2e>
    2252:	2000      	movs	r0, #0
    2254:	bd10      	pop	{r4, pc}
    2256:	f891 202e 	ldrb.w	r2, [r1, #46]	; 0x2e
    225a:	4601      	mov	r1, r0
    225c:	2000      	movs	r0, #0
    225e:	f7fe ffff 	bl	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    2262:	2001      	movs	r0, #1
    2264:	bd10      	pop	{r4, pc}
    2266:	0000      	.short	0x0000
    2268:	20000f0c 	.word	0x20000f0c

0000226c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>:
    226c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2270:	4e80      	ldr	r6, [pc, #512]	; (2474 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x208>)
    2272:	4680      	mov	r8, r0
    2274:	f896 002e 	ldrb.w	r0, [r6, #46]	; 0x2e
    2278:	f1a6 0780 	sub.w	r7, r6, #128	; 0x80
    227c:	eb07 1080 	add.w	r0, r7, r0, lsl #6
    2280:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2284:	2800      	cmp	r0, #0
    2286:	d068      	beq.n	235a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xee>
    2288:	f896 902e 	ldrb.w	r9, [r6, #46]	; 0x2e
    228c:	4d7a      	ldr	r5, [pc, #488]	; (2478 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x20c>)
    228e:	b125      	cbz	r5, 229a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x2e>
    2290:	2100      	movs	r1, #0
    2292:	f640 30c1 	movw	r0, #3009	; 0xbc1
    2296:	f3af 8000 	nop.w
    229a:	eb07 1489 	add.w	r4, r7, r9, lsl #6
    229e:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    22a2:	2801      	cmp	r0, #1
    22a4:	d018      	beq.n	22d8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6c>
    22a6:	b2c0      	uxtb	r0, r0
    22a8:	2804      	cmp	r0, #4
    22aa:	bf1c      	itt	ne
    22ac:	2805      	cmpne	r0, #5
    22ae:	2806      	cmpne	r0, #6
    22b0:	d058      	beq.n	2364 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xf8>
    22b2:	b12d      	cbz	r5, 22c0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x54>
    22b4:	f04f 0100 	mov.w	r1, #0
    22b8:	f640 30cd 	movw	r0, #3021	; 0xbcd
    22bc:	f3af 8000 	nop.w
    22c0:	f001 fc44 	bl	3b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    22c4:	b125      	cbz	r5, 22d0 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x64>
    22c6:	2100      	movs	r1, #0
    22c8:	f640 30d1 	movw	r0, #3025	; 0xbd1
    22cc:	f3af 8000 	nop.w
    22d0:	f814 0018 	ldrb.w	r0, [r4, r8, lsl #1]
    22d4:	2801      	cmp	r0, #1
    22d6:	d1e6      	bne.n	22a6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x3a>
    22d8:	2401      	movs	r4, #1
    22da:	b125      	cbz	r5, 22e6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7a>
    22dc:	2100      	movs	r1, #0
    22de:	f640 30d8 	movw	r0, #3032	; 0xbd8
    22e2:	f3af 8000 	nop.w
    22e6:	2c00      	cmp	r4, #0
    22e8:	d042      	beq.n	2370 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x104>
    22ea:	2000      	movs	r0, #0
    22ec:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    22f0:	b125      	cbz	r5, 22fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x90>
    22f2:	2100      	movs	r1, #0
    22f4:	f640 30dd 	movw	r0, #3037	; 0xbdd
    22f8:	f3af 8000 	nop.w
    22fc:	f896 b02e 	ldrb.w	fp, [r6, #46]	; 0x2e
    2300:	2001      	movs	r0, #1
    2302:	ea20 090b 	bic.w	r9, r0, fp
    2306:	eb07 118b 	add.w	r1, r7, fp, lsl #6
    230a:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    230e:	2240      	movs	r2, #64	; 0x40
    2310:	f00a f9e6 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    2314:	b125      	cbz	r5, 2320 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xb4>
    2316:	2100      	movs	r1, #0
    2318:	f240 50cd 	movw	r0, #1485	; 0x5cd
    231c:	f3af 8000 	nop.w
    2320:	eb06 008b 	add.w	r0, r6, fp, lsl #2
    2324:	eb06 0a89 	add.w	sl, r6, r9, lsl #2
    2328:	6a00      	ldr	r0, [r0, #32]
    232a:	f8ca 0020 	str.w	r0, [sl, #32]
    232e:	b125      	cbz	r5, 233a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xce>
    2330:	2100      	movs	r1, #0
    2332:	f240 50d1 	movw	r0, #1489	; 0x5d1
    2336:	f3af 8000 	nop.w
    233a:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    233e:	f88d 0000 	strb.w	r0, [sp]
    2342:	f89d 0000 	ldrb.w	r0, [sp]
    2346:	b1d0      	cbz	r0, 237e <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x112>
    2348:	2d00      	cmp	r5, #0
    234a:	bf1c      	itt	ne
    234c:	2100      	movne	r1, #0
    234e:	f640 30e3 	movwne	r0, #3043	; 0xbe3
    2352:	d0c2      	beq.n	22da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2354:	f3af 8000 	nop.w
    2358:	e7bf      	b.n	22da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    235a:	f640 31b8 	movw	r1, #3000	; 0xbb8
    235e:	2070      	movs	r0, #112	; 0x70
    2360:	f001 face 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2364:	464a      	mov	r2, r9
    2366:	4641      	mov	r1, r8
    2368:	2001      	movs	r0, #1
    236a:	f7fe ff79 	bl	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    236e:	e7a9      	b.n	22c4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x58>
    2370:	4842      	ldr	r0, [pc, #264]	; (247c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2372:	2800      	cmp	r0, #0
    2374:	bf18      	it	ne
    2376:	f3af 8000 	nopne.w
    237a:	b662      	cpsie	i
    237c:	e7b5      	b.n	22ea <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x7e>
    237e:	b125      	cbz	r5, 238a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x11e>
    2380:	2100      	movs	r1, #0
    2382:	f640 30e7 	movw	r0, #3047	; 0xbe7
    2386:	f3af 8000 	nop.w
    238a:	f89a 2021 	ldrb.w	r2, [sl, #33]	; 0x21
    238e:	f10a 0121 	add.w	r1, sl, #33	; 0x21
    2392:	4614      	mov	r4, r2
    2394:	f04f 0b20 	mov.w	fp, #32
    2398:	eb07 1089 	add.w	r0, r7, r9, lsl #6
    239c:	f10a 0a22 	add.w	sl, sl, #34	; 0x22
    23a0:	e003      	b.n	23aa <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x13e>
    23a2:	46a3      	mov	fp, r4
    23a4:	eb00 034b 	add.w	r3, r0, fp, lsl #1
    23a8:	785c      	ldrb	r4, [r3, #1]
    23aa:	4544      	cmp	r4, r8
    23ac:	d002      	beq.n	23b4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x148>
    23ae:	2c20      	cmp	r4, #32
    23b0:	d02b      	beq.n	240a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    23b2:	e7f6      	b.n	23a2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x136>
    23b4:	2c20      	cmp	r4, #32
    23b6:	d028      	beq.n	240a <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x19e>
    23b8:	42a2      	cmp	r2, r4
    23ba:	d104      	bne.n	23c6 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x15a>
    23bc:	eb00 0042 	add.w	r0, r0, r2, lsl #1
    23c0:	7840      	ldrb	r0, [r0, #1]
    23c2:	7008      	strb	r0, [r1, #0]
    23c4:	e005      	b.n	23d2 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x166>
    23c6:	eb00 0144 	add.w	r1, r0, r4, lsl #1
    23ca:	eb00 004b 	add.w	r0, r0, fp, lsl #1
    23ce:	7849      	ldrb	r1, [r1, #1]
    23d0:	7041      	strb	r1, [r0, #1]
    23d2:	f1ba 0f00 	cmp.w	sl, #0
    23d6:	d011      	beq.n	23fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    23d8:	b125      	cbz	r5, 23e4 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x178>
    23da:	2100      	movs	r1, #0
    23dc:	f240 502f 	movw	r0, #1327	; 0x52f
    23e0:	f3af 8000 	nop.w
    23e4:	f89a 0000 	ldrb.w	r0, [sl]
    23e8:	42a0      	cmp	r0, r4
    23ea:	d107      	bne.n	23fc <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x190>
    23ec:	b125      	cbz	r5, 23f8 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x18c>
    23ee:	2100      	movs	r1, #0
    23f0:	f240 5032 	movw	r0, #1330	; 0x532
    23f4:	f3af 8000 	nop.w
    23f8:	f88a b000 	strb.w	fp, [sl]
    23fc:	b15d      	cbz	r5, 2416 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    23fe:	2100      	movs	r1, #0
    2400:	f240 5037 	movw	r0, #1335	; 0x537
    2404:	f3af 8000 	nop.w
    2408:	e000      	b.n	240c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1a0>
    240a:	b125      	cbz	r5, 2416 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1aa>
    240c:	2100      	movs	r1, #0
    240e:	f640 30eb 	movw	r0, #3051	; 0xbeb
    2412:	f3af 8000 	nop.w
    2416:	481a      	ldr	r0, [pc, #104]	; (2480 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x214>)
    2418:	2800      	cmp	r0, #0
    241a:	bf18      	it	ne
    241c:	f3af 8000 	nopne.w
    2420:	f3ef 8410 	mrs	r4, PRIMASK
    2424:	b672      	cpsid	i
    2426:	f896 002b 	ldrb.w	r0, [r6, #43]	; 0x2b
    242a:	f88d 0000 	strb.w	r0, [sp]
    242e:	f89d 0000 	ldrb.w	r0, [sp]
    2432:	b138      	cbz	r0, 2444 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1d8>
    2434:	2d00      	cmp	r5, #0
    2436:	bf1c      	itt	ne
    2438:	2100      	movne	r1, #0
    243a:	f640 30f1 	movwne	r0, #3057	; 0xbf1
    243e:	f43f af4c 	beq.w	22da <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x6e>
    2442:	e787      	b.n	2354 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0xe8>
    2444:	f886 902e 	strb.w	r9, [r6, #46]	; 0x2e
    2448:	2001      	movs	r0, #1
    244a:	f886 002b 	strb.w	r0, [r6, #43]	; 0x2b
    244e:	b154      	cbz	r4, 2466 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1fa>
    2450:	2d00      	cmp	r5, #0
    2452:	bf08      	it	eq
    2454:	e8bd 8ff8 	ldmiaeq.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2458:	2100      	movs	r1, #0
    245a:	f640 30fe 	movw	r0, #3070	; 0xbfe
    245e:	f3af 8000 	nop.w
    2462:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2466:	4805      	ldr	r0, [pc, #20]	; (247c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x210>)
    2468:	2800      	cmp	r0, #0
    246a:	bf18      	it	ne
    246c:	f3af 8000 	nopne.w
    2470:	b662      	cpsie	i
    2472:	e7ed      	b.n	2450 <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI+0x1e4>
    2474:	20000f0c 	.word	0x20000f0c
	...

00002484 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>:
    2484:	b570      	push	{r4, r5, r6, lr}
    2486:	460d      	mov	r5, r1
    2488:	4606      	mov	r6, r0
    248a:	f001 f9af 	bl	37ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    248e:	480f      	ldr	r0, [pc, #60]	; (24cc <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x48>)
    2490:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
    2494:	2400      	movs	r4, #0
    2496:	3880      	subs	r0, #128	; 0x80
    2498:	eb00 1082 	add.w	r0, r0, r2, lsl #6
    249c:	f810 1014 	ldrb.w	r1, [r0, r4, lsl #1]
    24a0:	b129      	cbz	r1, 24ae <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x2a>
    24a2:	1c61      	adds	r1, r4, #1
    24a4:	b2cc      	uxtb	r4, r1
    24a6:	2c20      	cmp	r4, #32
    24a8:	d3f8      	bcc.n	249c <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x18>
    24aa:	2020      	movs	r0, #32
    24ac:	bd70      	pop	{r4, r5, r6, pc}
    24ae:	4808      	ldr	r0, [pc, #32]	; (24d0 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI+0x4c>)
    24b0:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    24b4:	f840 6031 	str.w	r6, [r0, r1, lsl #3]
    24b8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    24bc:	4621      	mov	r1, r4
    24be:	6045      	str	r5, [r0, #4]
    24c0:	2001      	movs	r0, #1
    24c2:	f7fe fecd 	bl	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    24c6:	4620      	mov	r0, r4
    24c8:	bd70      	pop	{r4, r5, r6, pc}
    24ca:	0000      	.short	0x0000
    24cc:	20000f0c 	.word	0x20000f0c
    24d0:	20000b8c 	.word	0x20000b8c

000024d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>:
    24d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    24d8:	b083      	sub	sp, #12
    24da:	f000 fb2b 	bl	2b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    24de:	4605      	mov	r5, r0
    24e0:	f000 fdf4 	bl	30cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>
    24e4:	4c67      	ldr	r4, [pc, #412]	; (2684 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b0>)
    24e6:	68a0      	ldr	r0, [r4, #8]
    24e8:	f1b0 3fff 	cmp.w	r0, #4294967295
    24ec:	bf1c      	itt	ne
    24ee:	f04f 30ff 	movne.w	r0, #4294967295
    24f2:	60a0      	strne	r0, [r4, #8]
    24f4:	7fa0      	ldrb	r0, [r4, #30]
    24f6:	f8df b190 	ldr.w	fp, [pc, #400]	; 2688 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b4>
    24fa:	b9a8      	cbnz	r0, 2528 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x54>
    24fc:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
    2500:	1a08      	subs	r0, r1, r0
    2502:	0200      	lsls	r0, r0, #8
    2504:	17c1      	asrs	r1, r0, #31
    2506:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    250a:	1200      	asrs	r0, r0, #8
    250c:	f44f 710c 	mov.w	r1, #560	; 0x230
    2510:	f009 ffa5 	bl	c45e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>
    2514:	6921      	ldr	r1, [r4, #16]
    2516:	4408      	add	r0, r1
    2518:	1a28      	subs	r0, r5, r0
    251a:	0200      	lsls	r0, r0, #8
    251c:	17c1      	asrs	r1, r0, #31
    251e:	eb00 6011 	add.w	r0, r0, r1, lsr #24
    2522:	1200      	asrs	r0, r0, #8
    2524:	0fc0      	lsrs	r0, r0, #31
    2526:	d013      	beq.n	2550 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x7c>
    2528:	7e60      	ldrb	r0, [r4, #25]
    252a:	b328      	cbz	r0, 2578 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    252c:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2530:	f88d 0000 	strb.w	r0, [sp]
    2534:	f89d 0000 	ldrb.w	r0, [sp]
    2538:	b1f0      	cbz	r0, 2578 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xa4>
    253a:	f000 fc09 	bl	2d50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>
    253e:	bf00      	nop
    2540:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
    2544:	b1f0      	cbz	r0, 2584 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0xb0>
    2546:	f240 4147 	movw	r1, #1095	; 0x447
    254a:	2070      	movs	r0, #112	; 0x70
    254c:	f001 f9d8 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2550:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2554:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    2558:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    255c:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    2560:	6840      	ldr	r0, [r0, #4]
    2562:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    2566:	f85b 2031 	ldr.w	r2, [fp, r1, lsl #3]
    256a:	2108      	movs	r1, #8
    256c:	4790      	blx	r2
    256e:	f44f 6186 	mov.w	r1, #1072	; 0x430
    2572:	2070      	movs	r0, #112	; 0x70
    2574:	f001 f9c4 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2578:	1ce8      	adds	r0, r5, #3
    257a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    257e:	f000 fadf 	bl	2b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2582:	e7dd      	b.n	2540 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x6c>
    2584:	f04f 0a01 	mov.w	sl, #1
    2588:	f884 a02a 	strb.w	sl, [r4, #42]	; 0x2a
    258c:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    2590:	2820      	cmp	r0, #32
    2592:	d024      	beq.n	25de <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x10a>
    2594:	f894 802f 	ldrb.w	r8, [r4, #47]	; 0x2f
    2598:	2020      	movs	r0, #32
    259a:	f884 002f 	strb.w	r0, [r4, #47]	; 0x2f
    259e:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    25a2:	2600      	movs	r6, #0
    25a4:	f884 6028 	strb.w	r6, [r4, #40]	; 0x28
    25a8:	f884 6029 	strb.w	r6, [r4, #41]	; 0x29
    25ac:	4837      	ldr	r0, [pc, #220]	; (268c <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1b8>)
    25ae:	6026      	str	r6, [r4, #0]
    25b0:	7800      	ldrb	r0, [r0, #0]
    25b2:	2802      	cmp	r0, #2
    25b4:	bf16      	itet	ne
    25b6:	2803      	cmpne	r0, #3
    25b8:	2001      	moveq	r0, #1
    25ba:	2000      	movne	r0, #0
    25bc:	7720      	strb	r0, [r4, #28]
    25be:	f894 702e 	ldrb.w	r7, [r4, #46]	; 0x2e
    25c2:	eb04 0987 	add.w	r9, r4, r7, lsl #2
    25c6:	f899 0020 	ldrb.w	r0, [r9, #32]
    25ca:	2820      	cmp	r0, #32
    25cc:	d031      	beq.n	2632 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    25ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    25d2:	eb0b 00c0 	add.w	r0, fp, r0, lsl #3
    25d6:	7d81      	ldrb	r1, [r0, #22]
    25d8:	2901      	cmp	r1, #1
    25da:	d005      	beq.n	25e8 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x114>
    25dc:	e029      	b.n	2632 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    25de:	f240 414a 	movw	r1, #1098	; 0x44a
    25e2:	2070      	movs	r0, #112	; 0x70
    25e4:	f001 f98c 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    25e8:	46ab      	mov	fp, r5
    25ea:	f100 0508 	add.w	r5, r0, #8
    25ee:	8a40      	ldrh	r0, [r0, #18]
    25f0:	aa01      	add	r2, sp, #4
    25f2:	4669      	mov	r1, sp
    25f4:	f000 f940 	bl	2878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    25f8:	f894 002f 	ldrb.w	r0, [r4, #47]	; 0x2f
    25fc:	2820      	cmp	r0, #32
    25fe:	d004      	beq.n	260a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x136>
    2600:	6920      	ldr	r0, [r4, #16]
    2602:	1d40      	adds	r0, r0, #5
    2604:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2608:	e00b      	b.n	2622 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14e>
    260a:	8968      	ldrh	r0, [r5, #10]
    260c:	f10b 0b09 	add.w	fp, fp, #9
    2610:	b128      	cbz	r0, 261e <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x14a>
    2612:	f001 f8fd 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    2616:	2800      	cmp	r0, #0
    2618:	bf08      	it	eq
    261a:	f10b 0b32 	addeq.w	fp, fp, #50	; 0x32
    261e:	f02b 407f 	bic.w	r0, fp, #4278190080	; 0xff000000
    2622:	e9d5 2100 	ldrd	r2, r1, [r5]
    2626:	1a89      	subs	r1, r1, r2
    2628:	6028      	str	r0, [r5, #0]
    262a:	4408      	add	r0, r1
    262c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2630:	6068      	str	r0, [r5, #4]
    2632:	4639      	mov	r1, r7
    2634:	2001      	movs	r0, #1
    2636:	f7fe fe43 	bl	12c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2c0>
    263a:	2800      	cmp	r0, #0
    263c:	d0f9      	beq.n	2632 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x15e>
    263e:	4814      	ldr	r0, [pc, #80]	; (2690 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1bc>)
    2640:	eb00 1087 	add.w	r0, r0, r7, lsl #6
    2644:	f810 0018 	ldrb.w	r0, [r0, r8, lsl #1]
    2648:	2802      	cmp	r0, #2
    264a:	d104      	bne.n	2656 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x182>
    264c:	463a      	mov	r2, r7
    264e:	4641      	mov	r1, r8
    2650:	2006      	movs	r0, #6
    2652:	f7fe fe05 	bl	1260 <CONFIG_FPROTECT_BLOCK_SIZE+0x260>
    2656:	f884 a02b 	strb.w	sl, [r4, #43]	; 0x2b
    265a:	f899 0021 	ldrb.w	r0, [r9, #33]	; 0x21
    265e:	2820      	cmp	r0, #32
    2660:	d003      	beq.n	266a <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x196>
    2662:	480c      	ldr	r0, [pc, #48]	; (2694 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y+0x1c0>)
    2664:	7840      	ldrb	r0, [r0, #1]
    2666:	f001 fa1b 	bl	3aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    266a:	7f20      	ldrb	r0, [r4, #28]
    266c:	2800      	cmp	r0, #0
    266e:	bf04      	itt	eq
    2670:	b003      	addeq	sp, #12
    2672:	e8bd 8ff0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2676:	f000 fd73 	bl	3160 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>
    267a:	7726      	strb	r6, [r4, #28]
    267c:	7766      	strb	r6, [r4, #29]
    267e:	b003      	add	sp, #12
    2680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2684:	20000f0c 	.word	0x20000f0c
    2688:	20000b8c 	.word	0x20000b8c
    268c:	20000012 	.word	0x20000012
    2690:	20000e8c 	.word	0x20000e8c
    2694:	20000010 	.word	0x20000010

00002698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>:
    2698:	b510      	push	{r4, lr}
    269a:	4c32      	ldr	r4, [pc, #200]	; (2764 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xcc>)
    269c:	b082      	sub	sp, #8
    269e:	f894 102f 	ldrb.w	r1, [r4, #47]	; 0x2f
    26a2:	2920      	cmp	r1, #32
    26a4:	d008      	beq.n	26b8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x20>
    26a6:	68a1      	ldr	r1, [r4, #8]
    26a8:	f1b1 3fff 	cmp.w	r1, #4294967295
    26ac:	d009      	beq.n	26c2 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x2a>
    26ae:	f640 21e9 	movw	r1, #2793	; 0xae9
    26b2:	2070      	movs	r0, #112	; 0x70
    26b4:	f001 f924 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26b8:	f640 21e8 	movw	r1, #2792	; 0xae8
    26bc:	2070      	movs	r0, #112	; 0x70
    26be:	f001 f91f 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26c2:	6862      	ldr	r2, [r4, #4]
    26c4:	4601      	mov	r1, r0
    26c6:	4b28      	ldr	r3, [pc, #160]	; (2768 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd0>)
    26c8:	1850      	adds	r0, r2, r1
    26ca:	429a      	cmp	r2, r3
    26cc:	d904      	bls.n	26d8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x40>
    26ce:	f240 6109 	movw	r1, #1545	; 0x609
    26d2:	2070      	movs	r0, #112	; 0x70
    26d4:	f001 f914 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26d8:	4a24      	ldr	r2, [pc, #144]	; (276c <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd4>)
    26da:	4291      	cmp	r1, r2
    26dc:	dd04      	ble.n	26e8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x50>
    26de:	f240 610a 	movw	r1, #1546	; 0x60a
    26e2:	2070      	movs	r0, #112	; 0x70
    26e4:	f001 f90c 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26e8:	4a21      	ldr	r2, [pc, #132]	; (2770 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xd8>)
    26ea:	4291      	cmp	r1, r2
    26ec:	da04      	bge.n	26f8 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x60>
    26ee:	f240 610b 	movw	r1, #1547	; 0x60b
    26f2:	2070      	movs	r0, #112	; 0x70
    26f4:	f001 f904 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    26f8:	491e      	ldr	r1, [pc, #120]	; (2774 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0xdc>)
    26fa:	4281      	cmp	r1, r0
    26fc:	bfdc      	itt	le
    26fe:	f500 00f7 	addle.w	r0, r0, #8093696	; 0x7b8000
    2702:	f1a0 50f8 	suble.w	r0, r0, #520093696	; 0x1f000000
    2706:	dd05      	ble.n	2714 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY+0x7c>
    2708:	2800      	cmp	r0, #0
    270a:	bfbc      	itt	lt
    270c:	f5a0 00f7 	sublt.w	r0, r0, #8093696	; 0x7b8000
    2710:	f100 50f8 	addlt.w	r0, r0, #520093696	; 0x1f000000
    2714:	aa01      	add	r2, sp, #4
    2716:	4669      	mov	r1, sp
    2718:	f000 f8ae 	bl	2878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>
    271c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    2720:	280f      	cmp	r0, #15
    2722:	bf8c      	ite	hi
    2724:	2001      	movhi	r0, #1
    2726:	2000      	movls	r0, #0
    2728:	9900      	ldr	r1, [sp, #0]
    272a:	4408      	add	r0, r1
    272c:	f020 417f 	bic.w	r1, r0, #4278190080	; 0xff000000
    2730:	60a1      	str	r1, [r4, #8]
    2732:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
    2736:	f88d 0000 	strb.w	r0, [sp]
    273a:	f89d 0000 	ldrb.w	r0, [sp]
    273e:	2800      	cmp	r0, #0
    2740:	bf04      	itt	eq
    2742:	b002      	addeq	sp, #8
    2744:	bd10      	popeq	{r4, pc}
    2746:	2301      	movs	r3, #1
    2748:	2203      	movs	r2, #3
    274a:	2005      	movs	r0, #5
    274c:	f000 fb7c 	bl	2e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>
    2750:	2800      	cmp	r0, #0
    2752:	bf1c      	itt	ne
    2754:	b002      	addne	sp, #8
    2756:	bd10      	popne	{r4, pc}
    2758:	f640 21f1 	movw	r1, #2801	; 0xaf1
    275c:	2070      	movs	r0, #112	; 0x70
    275e:	f001 f8cf 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2762:	0000      	.short	0x0000
    2764:	20000f0c 	.word	0x20000f0c
    2768:	1e847fff 	.word	0x1e847fff
    276c:	07a12000 	.word	0x07a12000
    2770:	f85ee000 	.word	0xf85ee000
    2774:	1e848000 	.word	0x1e848000

00002778 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>:
    2778:	b570      	push	{r4, r5, r6, lr}
    277a:	4c1e      	ldr	r4, [pc, #120]	; (27f4 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x7c>)
    277c:	2120      	movs	r1, #32
    277e:	f884 1020 	strb.w	r1, [r4, #32]
    2782:	f884 1021 	strb.w	r1, [r4, #33]	; 0x21
    2786:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
    278a:	2000      	movs	r0, #0
    278c:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    2790:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
    2794:	f884 102f 	strb.w	r1, [r4, #47]	; 0x2f
    2798:	1e42      	subs	r2, r0, #1
    279a:	60a2      	str	r2, [r4, #8]
    279c:	6020      	str	r0, [r4, #0]
    279e:	77a0      	strb	r0, [r4, #30]
    27a0:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
    27a4:	f884 0029 	strb.w	r0, [r4, #41]	; 0x29
    27a8:	7720      	strb	r0, [r4, #28]
    27aa:	7760      	strb	r0, [r4, #29]
    27ac:	f884 1030 	strb.w	r1, [r4, #48]	; 0x30
    27b0:	4911      	ldr	r1, [pc, #68]	; (27f8 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x80>)
    27b2:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    27b6:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
    27ba:	7008      	strb	r0, [r1, #0]
    27bc:	7048      	strb	r0, [r1, #1]
    27be:	8048      	strh	r0, [r1, #2]
    27c0:	f1a4 0182 	sub.w	r1, r4, #130	; 0x82
    27c4:	2210      	movs	r2, #16
    27c6:	7088      	strb	r0, [r1, #2]
    27c8:	f801 0f04 	strb.w	r0, [r1, #4]!
    27cc:	1e52      	subs	r2, r2, #1
    27ce:	d1fa      	bne.n	27c6 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x4e>
    27d0:	4d0a      	ldr	r5, [pc, #40]	; (27fc <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x84>)
    27d2:	2601      	movs	r6, #1
    27d4:	f884 602a 	strb.w	r6, [r4, #42]	; 0x2a
    27d8:	20ff      	movs	r0, #255	; 0xff
    27da:	7028      	strb	r0, [r5, #0]
    27dc:	4808      	ldr	r0, [pc, #32]	; (2800 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY+0x88>)
    27de:	f001 f941 	bl	3a64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    27e2:	7068      	strb	r0, [r5, #1]
    27e4:	f001 f99c 	bl	3b20 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>
    27e8:	60a8      	str	r0, [r5, #8]
    27ea:	f000 fce7 	bl	31bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>
    27ee:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    27f2:	bd70      	pop	{r4, r5, r6, pc}
    27f4:	20000f0c 	.word	0x20000f0c
    27f8:	20000012 	.word	0x20000012
    27fc:	20000010 	.word	0x20000010
    2800:	0000111d 	.word	0x0000111d

00002804 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>:
    2804:	b570      	push	{r4, r5, r6, lr}
    2806:	4605      	mov	r5, r0
    2808:	2001      	movs	r0, #1
    280a:	fa00 f405 	lsl.w	r4, r0, r5
    280e:	460e      	mov	r6, r1
    2810:	2a00      	cmp	r2, #0
    2812:	bf08      	it	eq
    2814:	4808      	ldreq	r0, [pc, #32]	; (2838 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x34>)
    2816:	d00c      	beq.n	2832 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x2e>
    2818:	2000      	movs	r0, #0
    281a:	f000 fcb5 	bl	3188 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>
    281e:	00e9      	lsls	r1, r5, #3
    2820:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    2824:	f501 31f8 	add.w	r1, r1, #126976	; 0x1f000
    2828:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    282c:	f8c1 6514 	str.w	r6, [r1, #1300]	; 0x514
    2830:	4802      	ldr	r0, [pc, #8]	; (283c <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ+0x38>)
    2832:	6004      	str	r4, [r0, #0]
    2834:	bd70      	pop	{r4, r5, r6, pc}
    2836:	0000      	.short	0x0000
    2838:	4001f508 	.word	0x4001f508
    283c:	4001f504 	.word	0x4001f504

00002840 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA>:
    2840:	0b41      	lsrs	r1, r0, #13
    2842:	f248 6237 	movw	r2, #34359	; 0x8637
    2846:	4351      	muls	r1, r2
    2848:	0c0a      	lsrs	r2, r1, #16
    284a:	4b09      	ldr	r3, [pc, #36]	; (2870 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x30>)
    284c:	0251      	lsls	r1, r2, #9
    284e:	fb02 0203 	mla	r2, r2, r3, r0
    2852:	4808      	ldr	r0, [pc, #32]	; (2874 <sym_PITJNQC6YSCEFAH23N5QRORZDKCSKOAUGBUS6GA+0x34>)
    2854:	4350      	muls	r0, r2
    2856:	f500 3086 	add.w	r0, r0, #68608	; 0x10c00
    285a:	306e      	adds	r0, #110	; 0x6e
    285c:	0d40      	lsrs	r0, r0, #21
    285e:	425b      	negs	r3, r3
    2860:	fb10 f303 	smulbb	r3, r0, r3
    2864:	ebb2 2f53 	cmp.w	r2, r3, lsr #9
    2868:	bf88      	it	hi
    286a:	1c49      	addhi	r1, r1, #1
    286c:	4408      	add	r0, r1
    286e:	4770      	bx	lr
    2870:	ffffc2f7 	.word	0xffffc2f7
    2874:	00010c6f 	.word	0x00010c6f

00002878 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI>:
    2878:	0b43      	lsrs	r3, r0, #13
    287a:	f248 6c37 	movw	ip, #34359	; 0x8637
    287e:	fb03 f30c 	mul.w	r3, r3, ip
    2882:	b430      	push	{r4, r5}
    2884:	0c1b      	lsrs	r3, r3, #16
    2886:	f8df c044 	ldr.w	ip, [pc, #68]	; 28cc <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x54>
    288a:	025c      	lsls	r4, r3, #9
    288c:	fb03 030c 	mla	r3, r3, ip, r0
    2890:	480f      	ldr	r0, [pc, #60]	; (28d0 <sym_AOU55ZK756JLPLCLZ5TZSSVKOAWWFUNQZATBXUI+0x58>)
    2892:	4358      	muls	r0, r3
    2894:	ea4f 5c50 	mov.w	ip, r0, lsr #21
    2898:	eb04 000c 	add.w	r0, r4, ip
    289c:	f643 5409 	movw	r4, #15625	; 0x3d09
    28a0:	fb1c f404 	smulbb	r4, ip, r4
    28a4:	f504 7c80 	add.w	ip, r4, #256	; 0x100
    28a8:	f643 5508 	movw	r5, #15624	; 0x3d08
    28ac:	eba3 2c5c 	sub.w	ip, r3, ip, lsr #9
    28b0:	442c      	add	r4, r5
    28b2:	f00c 0cff 	and.w	ip, ip, #255	; 0xff
    28b6:	ebb3 2f54 	cmp.w	r3, r4, lsr #9
    28ba:	bf84      	itt	hi
    28bc:	f04f 0c00 	movhi.w	ip, #0
    28c0:	1c40      	addhi	r0, r0, #1
    28c2:	6008      	str	r0, [r1, #0]
    28c4:	f882 c000 	strb.w	ip, [r2]
    28c8:	bc30      	pop	{r4, r5}
    28ca:	4770      	bx	lr
    28cc:	ffffc2f7 	.word	0xffffc2f7
    28d0:	00010c6f 	.word	0x00010c6f

000028d4 <MPSL_IRQ_RTC0_Handler>:
    28d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    28d8:	4c36      	ldr	r4, [pc, #216]	; (29b4 <MPSL_IRQ_RTC0_Handler+0xe0>)
    28da:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    28de:	f44f 6600 	mov.w	r6, #2048	; 0x800
    28e2:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    28e6:	f04f 27e0 	mov.w	r7, #3758153728	; 0xe000e000
    28ea:	f04f 0500 	mov.w	r5, #0
    28ee:	d019      	beq.n	2924 <MPSL_IRQ_RTC0_Handler+0x50>
    28f0:	4831      	ldr	r0, [pc, #196]	; (29b8 <MPSL_IRQ_RTC0_Handler+0xe4>)
    28f2:	6800      	ldr	r0, [r0, #0]
    28f4:	b1b0      	cbz	r0, 2924 <MPSL_IRQ_RTC0_Handler+0x50>
    28f6:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    28fa:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    28fe:	482f      	ldr	r0, [pc, #188]	; (29bc <MPSL_IRQ_RTC0_Handler+0xe8>)
    2900:	6800      	ldr	r0, [r0, #0]
    2902:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2906:	1a40      	subs	r0, r0, r1
    2908:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    290c:	2802      	cmp	r0, #2
    290e:	d302      	bcc.n	2916 <MPSL_IRQ_RTC0_Handler+0x42>
    2910:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2914:	d306      	bcc.n	2924 <MPSL_IRQ_RTC0_Handler+0x50>
    2916:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    291a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    291e:	2004      	movs	r0, #4
    2920:	f7fe ff50 	bl	17c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2924:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2928:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    292c:	d019      	beq.n	2962 <MPSL_IRQ_RTC0_Handler+0x8e>
    292e:	4824      	ldr	r0, [pc, #144]	; (29c0 <MPSL_IRQ_RTC0_Handler+0xec>)
    2930:	6800      	ldr	r0, [r0, #0]
    2932:	b1b0      	cbz	r0, 2962 <MPSL_IRQ_RTC0_Handler+0x8e>
    2934:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
    2938:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    293c:	4821      	ldr	r0, [pc, #132]	; (29c4 <MPSL_IRQ_RTC0_Handler+0xf0>)
    293e:	6800      	ldr	r0, [r0, #0]
    2940:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    2944:	1a40      	subs	r0, r0, r1
    2946:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    294a:	2802      	cmp	r0, #2
    294c:	d302      	bcc.n	2954 <MPSL_IRQ_RTC0_Handler+0x80>
    294e:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2952:	d306      	bcc.n	2962 <MPSL_IRQ_RTC0_Handler+0x8e>
    2954:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    2958:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    295c:	2005      	movs	r0, #5
    295e:	f7fe ff31 	bl	17c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2962:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2966:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    296a:	bf08      	it	eq
    296c:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2970:	4815      	ldr	r0, [pc, #84]	; (29c8 <MPSL_IRQ_RTC0_Handler+0xf4>)
    2972:	6800      	ldr	r0, [r0, #0]
    2974:	2800      	cmp	r0, #0
    2976:	bf08      	it	eq
    2978:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    297c:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148
    2980:	f8c7 6280 	str.w	r6, [r7, #640]	; 0x280
    2984:	4811      	ldr	r0, [pc, #68]	; (29cc <MPSL_IRQ_RTC0_Handler+0xf8>)
    2986:	6800      	ldr	r0, [r0, #0]
    2988:	f8d4 1504 	ldr.w	r1, [r4, #1284]	; 0x504
    298c:	1a40      	subs	r0, r0, r1
    298e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2992:	2802      	cmp	r0, #2
    2994:	d304      	bcc.n	29a0 <MPSL_IRQ_RTC0_Handler+0xcc>
    2996:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    299a:	bf38      	it	cc
    299c:	e8bd 81f0 	ldmiacc.w	sp!, {r4, r5, r6, r7, r8, pc}
    29a0:	f44f 2080 	mov.w	r0, #262144	; 0x40000
    29a4:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    29a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    29ac:	2006      	movs	r0, #6
    29ae:	f7fe bf09 	b.w	17c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    29b2:	0000      	.short	0x0000
    29b4:	4000b000 	.word	0x4000b000
    29b8:	4000b140 	.word	0x4000b140
    29bc:	4000b540 	.word	0x4000b540
    29c0:	4000b144 	.word	0x4000b144
    29c4:	4000b544 	.word	0x4000b544
    29c8:	4000b148 	.word	0x4000b148
    29cc:	4000b548 	.word	0x4000b548

000029d0 <MPSL_IRQ_TIMER0_Handler>:
    29d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    29d4:	4d38      	ldr	r5, [pc, #224]	; (2ab8 <MPSL_IRQ_TIMER0_Handler+0xe8>)
    29d6:	7828      	ldrb	r0, [r5, #0]
    29d8:	2804      	cmp	r0, #4
    29da:	d068      	beq.n	2aae <MPSL_IRQ_TIMER0_Handler+0xde>
    29dc:	1ce8      	adds	r0, r5, #3
    29de:	2201      	movs	r2, #1
    29e0:	7801      	ldrb	r1, [r0, #0]
    29e2:	b159      	cbz	r1, 29fc <MPSL_IRQ_TIMER0_Handler+0x2c>
    29e4:	2901      	cmp	r1, #1
    29e6:	bf08      	it	eq
    29e8:	706a      	strbeq	r2, [r5, #1]
    29ea:	d002      	beq.n	29f2 <MPSL_IRQ_TIMER0_Handler+0x22>
    29ec:	7869      	ldrb	r1, [r5, #1]
    29ee:	2900      	cmp	r1, #0
    29f0:	d058      	beq.n	2aa4 <MPSL_IRQ_TIMER0_Handler+0xd4>
    29f2:	2102      	movs	r1, #2
    29f4:	7001      	strb	r1, [r0, #0]
    29f6:	7840      	ldrb	r0, [r0, #1]
    29f8:	f000 fafa 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    29fc:	4c2f      	ldr	r4, [pc, #188]	; (2abc <MPSL_IRQ_TIMER0_Handler+0xec>)
    29fe:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2a02:	f04f 0800 	mov.w	r8, #0
    2a06:	f410 2f00 	tst.w	r0, #524288	; 0x80000
    2a0a:	f44f 7780 	mov.w	r7, #256	; 0x100
    2a0e:	f04f 26e0 	mov.w	r6, #3758153728	; 0xe000e000
    2a12:	d00a      	beq.n	2a2a <MPSL_IRQ_TIMER0_Handler+0x5a>
    2a14:	482a      	ldr	r0, [pc, #168]	; (2ac0 <MPSL_IRQ_TIMER0_Handler+0xf0>)
    2a16:	6800      	ldr	r0, [r0, #0]
    2a18:	b138      	cbz	r0, 2a2a <MPSL_IRQ_TIMER0_Handler+0x5a>
    2a1a:	2003      	movs	r0, #3
    2a1c:	f000 fae8 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2a20:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2a24:	2003      	movs	r0, #3
    2a26:	f7fe fecd 	bl	17c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a2a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2a2e:	f410 2f80 	tst.w	r0, #262144	; 0x40000
    2a32:	d00a      	beq.n	2a4a <MPSL_IRQ_TIMER0_Handler+0x7a>
    2a34:	4823      	ldr	r0, [pc, #140]	; (2ac4 <MPSL_IRQ_TIMER0_Handler+0xf4>)
    2a36:	6800      	ldr	r0, [r0, #0]
    2a38:	b138      	cbz	r0, 2a4a <MPSL_IRQ_TIMER0_Handler+0x7a>
    2a3a:	2002      	movs	r0, #2
    2a3c:	f000 fad8 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2a40:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2a44:	2002      	movs	r0, #2
    2a46:	f7fe febd 	bl	17c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a4a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2a4e:	f410 3f00 	tst.w	r0, #131072	; 0x20000
    2a52:	d00a      	beq.n	2a6a <MPSL_IRQ_TIMER0_Handler+0x9a>
    2a54:	481c      	ldr	r0, [pc, #112]	; (2ac8 <MPSL_IRQ_TIMER0_Handler+0xf8>)
    2a56:	6800      	ldr	r0, [r0, #0]
    2a58:	b138      	cbz	r0, 2a6a <MPSL_IRQ_TIMER0_Handler+0x9a>
    2a5a:	2001      	movs	r0, #1
    2a5c:	f000 fac8 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2a60:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2a64:	2001      	movs	r0, #1
    2a66:	f7fe fead 	bl	17c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2a6a:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    2a6e:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    2a72:	bf08      	it	eq
    2a74:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a78:	4814      	ldr	r0, [pc, #80]	; (2acc <MPSL_IRQ_TIMER0_Handler+0xfc>)
    2a7a:	6800      	ldr	r0, [r0, #0]
    2a7c:	2800      	cmp	r0, #0
    2a7e:	bf08      	it	eq
    2a80:	e8bd 81f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, pc}
    2a84:	2000      	movs	r0, #0
    2a86:	f000 fab3 	bl	2ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>
    2a8a:	f8c6 7280 	str.w	r7, [r6, #640]	; 0x280
    2a8e:	2004      	movs	r0, #4
    2a90:	7028      	strb	r0, [r5, #0]
    2a92:	f8c5 8008 	str.w	r8, [r5, #8]
    2a96:	f8c4 8200 	str.w	r8, [r4, #512]	; 0x200
    2a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2a9e:	2000      	movs	r0, #0
    2aa0:	f7fe be90 	b.w	17c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2aa4:	f240 316a 	movw	r1, #874	; 0x36a
    2aa8:	206c      	movs	r0, #108	; 0x6c
    2aaa:	f000 ff29 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2aae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    2ab2:	2007      	movs	r0, #7
    2ab4:	f7fe be86 	b.w	17c4 <sym_J5F7QGRFPKMLWRNSXZXS5YI7BM4DUTISCOASCOA>
    2ab8:	2000001c 	.word	0x2000001c
    2abc:	40008000 	.word	0x40008000
    2ac0:	4000814c 	.word	0x4000814c
    2ac4:	40008148 	.word	0x40008148
    2ac8:	40008144 	.word	0x40008144
    2acc:	40008140 	.word	0x40008140
    2ad0:	2201      	movs	r2, #1
    2ad2:	0211      	lsls	r1, r2, #8
    2ad4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    2ad8:	2000      	movs	r0, #0
    2ada:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
    2ade:	f503 73c0 	add.w	r3, r3, #384	; 0x180
    2ae2:	f3bf 8f4f 	dsb	sy
    2ae6:	f3bf 8f6f 	isb	sy
    2aea:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
    2aee:	490e      	ldr	r1, [pc, #56]	; (2b28 <MPSL_IRQ_TIMER0_Handler+0x158>)
    2af0:	f841 2f04 	str.w	r2, [r1, #4]!
    2af4:	1e43      	subs	r3, r0, #1
    2af6:	f8c1 3304 	str.w	r3, [r1, #772]	; 0x304
    2afa:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    2afe:	f8c1 013c 	str.w	r0, [r1, #316]	; 0x13c
    2b02:	4b0a      	ldr	r3, [pc, #40]	; (2b2c <MPSL_IRQ_TIMER0_Handler+0x15c>)
    2b04:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2b08:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    2b0c:	1d1b      	adds	r3, r3, #4
    2b0e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2b12:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    2b16:	1d1b      	adds	r3, r3, #4
    2b18:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    2b1c:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    2b20:	60ca      	str	r2, [r1, #12]
    2b22:	4903      	ldr	r1, [pc, #12]	; (2b30 <MPSL_IRQ_TIMER0_Handler+0x160>)
    2b24:	7048      	strb	r0, [r1, #1]
    2b26:	4770      	bx	lr
    2b28:	40008000 	.word	0x40008000
    2b2c:	40008004 	.word	0x40008004
    2b30:	2000001c 	.word	0x2000001c

00002b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>:
    2b34:	4801      	ldr	r0, [pc, #4]	; (2b3c <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY+0x8>)
    2b36:	6800      	ldr	r0, [r0, #0]
    2b38:	4770      	bx	lr
    2b3a:	0000      	.short	0x0000
    2b3c:	4000b504 	.word	0x4000b504

00002b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>:
    2b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2b44:	4e47      	ldr	r6, [pc, #284]	; (2c64 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x124>)
    2b46:	4605      	mov	r5, r0
    2b48:	1ef7      	subs	r7, r6, #3
    2b4a:	7832      	ldrb	r2, [r6, #0]
    2b4c:	68f9      	ldr	r1, [r7, #12]
    2b4e:	2a01      	cmp	r2, #1
    2b50:	bf04      	itt	eq
    2b52:	42a9      	cmpeq	r1, r5
    2b54:	e8bd 87f0 	ldmiaeq.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2b58:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    2b5c:	4b42      	ldr	r3, [pc, #264]	; (2c68 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x128>)
    2b5e:	6018      	str	r0, [r3, #0]
    2b60:	4842      	ldr	r0, [pc, #264]	; (2c6c <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x12c>)
    2b62:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    2b66:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2b6a:	f100 0304 	add.w	r3, r0, #4
    2b6e:	f04f 0400 	mov.w	r4, #0
    2b72:	2a00      	cmp	r2, #0
    2b74:	d061      	beq.n	2c3a <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0xfa>
    2b76:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2b7a:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2b7e:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2b82:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2b86:	4b3a      	ldr	r3, [pc, #232]	; (2c70 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x130>)
    2b88:	681b      	ldr	r3, [r3, #0]
    2b8a:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    2b8e:	f04f 0801 	mov.w	r8, #1
    2b92:	2b00      	cmp	r3, #0
    2b94:	bf04      	itt	eq
    2b96:	f44f 6300 	moveq.w	r3, #2048	; 0x800
    2b9a:	f8c9 3280 	streq.w	r3, [r9, #640]	; 0x280
    2b9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2ba2:	f8c0 3308 	str.w	r3, [r0, #776]	; 0x308
    2ba6:	f8c0 3348 	str.w	r3, [r0, #840]	; 0x348
    2baa:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2bae:	f8d0 3504 	ldr.w	r3, [r0, #1284]	; 0x504
    2bb2:	1aeb      	subs	r3, r5, r3
    2bb4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2bb8:	2b02      	cmp	r3, #2
    2bba:	d34b      	bcc.n	2c54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2bbc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2bc0:	d248      	bcs.n	2c54 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x114>
    2bc2:	f8c0 5540 	str.w	r5, [r0, #1344]	; 0x540
    2bc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2bca:	f8c0 3344 	str.w	r3, [r0, #836]	; 0x344
    2bce:	b132      	cbz	r2, 2bde <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x9e>
    2bd0:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    2bd4:	1a8a      	subs	r2, r1, r2
    2bd6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    2bda:	2a02      	cmp	r2, #2
    2bdc:	d3f8      	bcc.n	2bd0 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x90>
    2bde:	f8c7 8008 	str.w	r8, [r7, #8]
    2be2:	703c      	strb	r4, [r7, #0]
    2be4:	f7ff ff74 	bl	2ad0 <MPSL_IRQ_TIMER0_Handler+0x100>
    2be8:	4822      	ldr	r0, [pc, #136]	; (2c74 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x134>)
    2bea:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    2bee:	f364 0101 	bfi	r1, r4, #0, #2
    2bf2:	f8c0 1504 	str.w	r1, [r0, #1284]	; 0x504
    2bf6:	f8d0 2508 	ldr.w	r2, [r0, #1288]	; 0x508
    2bfa:	2102      	movs	r1, #2
    2bfc:	f361 0201 	bfi	r2, r1, #0, #2
    2c00:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2c04:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    2c08:	2104      	movs	r1, #4
    2c0a:	f361 0203 	bfi	r2, r1, #0, #4
    2c0e:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
    2c12:	f8c0 800c 	str.w	r8, [r0, #12]
    2c16:	68b9      	ldr	r1, [r7, #8]
    2c18:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    2c1c:	1580      	asrs	r0, r0, #22
    2c1e:	f8c9 0280 	str.w	r0, [r9, #640]	; 0x280
    2c22:	f8c9 0100 	str.w	r0, [r9, #256]	; 0x100
    2c26:	4914      	ldr	r1, [pc, #80]	; (2c78 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x138>)
    2c28:	05c0      	lsls	r0, r0, #23
    2c2a:	6008      	str	r0, [r1, #0]
    2c2c:	2004      	movs	r0, #4
    2c2e:	60fd      	str	r5, [r7, #12]
    2c30:	7070      	strb	r0, [r6, #1]
    2c32:	f886 8000 	strb.w	r8, [r6]
    2c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c3a:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2c3e:	f8c0 c348 	str.w	ip, [r0, #840]	; 0x348
    2c42:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    2c46:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    2c4a:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
    2c4e:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    2c52:	e798      	b.n	2b86 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ+0x46>
    2c54:	2100      	movs	r1, #0
    2c56:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2c5a:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
    2c5e:	206c      	movs	r0, #108	; 0x6c
    2c60:	f000 fe4e 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2c64:	2000001f 	.word	0x2000001f
    2c68:	4001f508 	.word	0x4001f508
    2c6c:	4000b000 	.word	0x4000b000
    2c70:	4000b148 	.word	0x4000b148
    2c74:	40008000 	.word	0x40008000
    2c78:	4001f504 	.word	0x4001f504

00002c7c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI>:
    2c7c:	b570      	push	{r4, r5, r6, lr}
    2c7e:	4c2c      	ldr	r4, [pc, #176]	; (2d30 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb4>)
    2c80:	68e2      	ldr	r2, [r4, #12]
    2c82:	4282      	cmp	r2, r0
    2c84:	bf14      	ite	ne
    2c86:	2101      	movne	r1, #1
    2c88:	2100      	moveq	r1, #0
    2c8a:	f8df c0a8 	ldr.w	ip, [pc, #168]	; 2d34 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xb8>
    2c8e:	f89c 5000 	ldrb.w	r5, [ip]
    2c92:	2d02      	cmp	r5, #2
    2c94:	d002      	beq.n	2c9c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x20>
    2c96:	2900      	cmp	r1, #0
    2c98:	d037      	beq.n	2d0a <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8e>
    2c9a:	e002      	b.n	2ca2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x26>
    2c9c:	2900      	cmp	r1, #0
    2c9e:	bf08      	it	eq
    2ca0:	bd70      	popeq	{r4, r5, r6, pc}
    2ca2:	7861      	ldrb	r1, [r4, #1]
    2ca4:	b381      	cbz	r1, 2d08 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x8c>
    2ca6:	4b24      	ldr	r3, [pc, #144]	; (2d38 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xbc>)
    2ca8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    2cac:	6019      	str	r1, [r3, #0]
    2cae:	138b      	asrs	r3, r1, #14
    2cb0:	4922      	ldr	r1, [pc, #136]	; (2d3c <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc0>)
    2cb2:	f8c1 3308 	str.w	r3, [r1, #776]	; 0x308
    2cb6:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    2cba:	2300      	movs	r3, #0
    2cbc:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
    2cc0:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2cc4:	1ac3      	subs	r3, r0, r3
    2cc6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2cca:	2b02      	cmp	r3, #2
    2ccc:	d327      	bcc.n	2d1e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2cce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    2cd2:	d224      	bcs.n	2d1e <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xa2>
    2cd4:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2cd8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2cdc:	f8c1 3344 	str.w	r3, [r1, #836]	; 0x344
    2ce0:	b13d      	cbz	r5, 2cf2 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x76>
    2ce2:	bf00      	nop
    2ce4:	f8d1 3504 	ldr.w	r3, [r1, #1284]	; 0x504
    2ce8:	1ad3      	subs	r3, r2, r3
    2cea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    2cee:	2b02      	cmp	r3, #2
    2cf0:	d3f8      	bcc.n	2ce4 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x68>
    2cf2:	4b13      	ldr	r3, [pc, #76]	; (2d40 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0xc4>)
    2cf4:	2102      	movs	r1, #2
    2cf6:	074a      	lsls	r2, r1, #29
    2cf8:	601a      	str	r2, [r3, #0]
    2cfa:	60e0      	str	r0, [r4, #12]
    2cfc:	2004      	movs	r0, #4
    2cfe:	f88c 0001 	strb.w	r0, [ip, #1]
    2d02:	f88c 1000 	strb.w	r1, [ip]
    2d06:	bd70      	pop	{r4, r5, r6, pc}
    2d08:	e004      	b.n	2d14 <sym_UGOJA475OXR5HR5WFINUK27HP5BRGNWCZXQLKDI+0x98>
    2d0a:	f240 2102 	movw	r1, #514	; 0x202
    2d0e:	206c      	movs	r0, #108	; 0x6c
    2d10:	f000 fdf6 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d14:	f240 2106 	movw	r1, #518	; 0x206
    2d18:	206c      	movs	r0, #108	; 0x6c
    2d1a:	f000 fdf1 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d1e:	2000      	movs	r0, #0
    2d20:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    2d24:	f240 2112 	movw	r1, #530	; 0x212
    2d28:	206c      	movs	r0, #108	; 0x6c
    2d2a:	f000 fde9 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2d2e:	0000      	.short	0x0000
    2d30:	2000001c 	.word	0x2000001c
    2d34:	2000001f 	.word	0x2000001f
    2d38:	4001f508 	.word	0x4001f508
    2d3c:	4000b000 	.word	0x4000b000
    2d40:	4001f504 	.word	0x4001f504

00002d44 <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY>:
    2d44:	4801      	ldr	r0, [pc, #4]	; (2d4c <sym_RUQO26WM5KVVEW7O3OHCXPO7LLLXRBDPIPSWIWY+0x8>)
    2d46:	68c0      	ldr	r0, [r0, #12]
    2d48:	4770      	bx	lr
    2d4a:	0000      	.short	0x0000
    2d4c:	2000001c 	.word	0x2000001c

00002d50 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA>:
    2d50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d54:	4936      	ldr	r1, [pc, #216]	; (2e30 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe0>)
    2d56:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    2d5a:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    2d5e:	4d35      	ldr	r5, [pc, #212]	; (2e34 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe4>)
    2d60:	1d0b      	adds	r3, r1, #4
    2d62:	2200      	movs	r2, #0
    2d64:	7828      	ldrb	r0, [r5, #0]
    2d66:	b168      	cbz	r0, 2d84 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x34>
    2d68:	f46f 2ca0 	mvn.w	ip, #327680	; 0x50000
    2d6c:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2d70:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2d74:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2d78:	4b2f      	ldr	r3, [pc, #188]	; (2e38 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xe8>)
    2d7a:	681b      	ldr	r3, [r3, #0]
    2d7c:	f04f 0c01 	mov.w	ip, #1
    2d80:	b99b      	cbnz	r3, 2daa <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x5a>
    2d82:	e00c      	b.n	2d9e <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x4e>
    2d84:	f46f 2c80 	mvn.w	ip, #262144	; 0x40000
    2d88:	f8c1 c348 	str.w	ip, [r1, #840]	; 0x348
    2d8c:	f8c1 2540 	str.w	r2, [r1, #1344]	; 0x540
    2d90:	f8c1 2140 	str.w	r2, [r1, #320]	; 0x140
    2d94:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    2d98:	f8c1 2144 	str.w	r2, [r1, #324]	; 0x144
    2d9c:	e7ec      	b.n	2d78 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x28>
    2d9e:	f04f 24e0 	mov.w	r4, #3758153728	; 0xe000e000
    2da2:	f44f 6300 	mov.w	r3, #2048	; 0x800
    2da6:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
    2daa:	2802      	cmp	r0, #2
    2dac:	d004      	beq.n	2db8 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x68>
    2dae:	f240 211e 	movw	r1, #542	; 0x21e
    2db2:	206c      	movs	r0, #108	; 0x6c
    2db4:	f000 fda4 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2db8:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2dbc:	4c1f      	ldr	r4, [pc, #124]	; (2e3c <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xec>)
    2dbe:	1cc0      	adds	r0, r0, #3
    2dc0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2dc4:	68e3      	ldr	r3, [r4, #12]
    2dc6:	4e1e      	ldr	r6, [pc, #120]	; (2e40 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf0>)
    2dc8:	4298      	cmp	r0, r3
    2dca:	d00c      	beq.n	2de6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2dcc:	f8d1 7504 	ldr.w	r7, [r1, #1284]	; 0x504
    2dd0:	1bdf      	subs	r7, r3, r7
    2dd2:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
    2dd6:	2f04      	cmp	r7, #4
    2dd8:	d305      	bcc.n	2de6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2dda:	f5b7 0f80 	cmp.w	r7, #4194304	; 0x400000
    2dde:	d202      	bcs.n	2de6 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0x96>
    2de0:	f7ff feae 	bl	2b40 <sym_2ZDZA75WOMRNSQ6XL7IZWAQKYFFSRJOGBGKPTIQ>
    2de4:	e01f      	b.n	2e26 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2de6:	f8d1 0504 	ldr.w	r0, [r1, #1284]	; 0x504
    2dea:	1a18      	subs	r0, r3, r0
    2dec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2df0:	2802      	cmp	r0, #2
    2df2:	d315      	bcc.n	2e20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2df4:	f5b0 0f80 	cmp.w	r0, #4194304	; 0x400000
    2df8:	d212      	bcs.n	2e20 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd0>
    2dfa:	4912      	ldr	r1, [pc, #72]	; (2e44 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xf4>)
    2dfc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    2e00:	6008      	str	r0, [r1, #0]
    2e02:	f8c4 c008 	str.w	ip, [r4, #8]
    2e06:	7022      	strb	r2, [r4, #0]
    2e08:	f8c6 c004 	str.w	ip, [r6, #4]
    2e0c:	f8c6 c00c 	str.w	ip, [r6, #12]
    2e10:	0040      	lsls	r0, r0, #1
    2e12:	1f09      	subs	r1, r1, #4
    2e14:	6008      	str	r0, [r1, #0]
    2e16:	2004      	movs	r0, #4
    2e18:	7068      	strb	r0, [r5, #1]
    2e1a:	f885 c000 	strb.w	ip, [r5]
    2e1e:	e002      	b.n	2e26 <sym_QUBGY7RMPG7R5F6DVNURH4AVGDAWMK46YXU4DRA+0xd6>
    2e20:	f8c4 c008 	str.w	ip, [r4, #8]
    2e24:	7022      	strb	r2, [r4, #0]
    2e26:	68a0      	ldr	r0, [r4, #8]
    2e28:	f8c6 0200 	str.w	r0, [r6, #512]	; 0x200
    2e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e30:	4000b000 	.word	0x4000b000
    2e34:	2000001f 	.word	0x2000001f
    2e38:	4000b148 	.word	0x4000b148
    2e3c:	2000001c 	.word	0x2000001c
    2e40:	40008000 	.word	0x40008000
    2e44:	4001f508 	.word	0x4001f508

00002e48 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ>:
    2e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2e4c:	f8df c190 	ldr.w	ip, [pc, #400]	; 2fe0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x198>
    2e50:	2600      	movs	r6, #0
    2e52:	2701      	movs	r7, #1
    2e54:	f89c 4000 	ldrb.w	r4, [ip]
    2e58:	f89c c001 	ldrb.w	ip, [ip, #1]
    2e5c:	f44f 75a0 	mov.w	r5, #320	; 0x140
    2e60:	2807      	cmp	r0, #7
    2e62:	d27b      	bcs.n	2f5c <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x114>
    2e64:	e8df f000 	tbb	[pc, r0]
    2e68:	04040404 	.word	0x04040404
    2e6c:	006c6c6c 	.word	0x006c6c6c
    2e70:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2fe4 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x19c>
    2e74:	f8d8 900c 	ldr.w	r9, [r8, #12]
    2e78:	f1b9 7f80 	cmp.w	r9, #16777216	; 0x1000000
    2e7c:	bf04      	itt	eq
    2e7e:	f898 8001 	ldrbeq.w	r8, [r8, #1]
    2e82:	f1b8 0f00 	cmpeq.w	r8, #0
    2e86:	d002      	beq.n	2e8e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x46>
    2e88:	2c02      	cmp	r4, #2
    2e8a:	d005      	beq.n	2e98 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x50>
    2e8c:	e02c      	b.n	2ee8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xa0>
    2e8e:	f240 2151 	movw	r1, #593	; 0x251
    2e92:	206c      	movs	r0, #108	; 0x6c
    2e94:	f000 fd34 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2e98:	f1ac 0804 	sub.w	r8, ip, #4
    2e9c:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2ea0:	eb05 0588 	add.w	r5, r5, r8, lsl #2
    2ea4:	f105 4880 	add.w	r8, r5, #1073741824	; 0x40000000
    2ea8:	f508 4830 	add.w	r8, r8, #45056	; 0xb000
    2eac:	2500      	movs	r5, #0
    2eae:	2c01      	cmp	r4, #1
    2eb0:	d002      	beq.n	2eb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x70>
    2eb2:	2c02      	cmp	r4, #2
    2eb4:	d00b      	beq.n	2ece <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x86>
    2eb6:	e014      	b.n	2ee2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2eb8:	f1bc 0f04 	cmp.w	ip, #4
    2ebc:	bf24      	itt	cs
    2ebe:	f8d8 9000 	ldrcs.w	r9, [r8]
    2ec2:	f1b9 0f00 	cmpcs.w	r9, #0
    2ec6:	bf08      	it	eq
    2ec8:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
    2ecc:	e009      	b.n	2ee2 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x9a>
    2ece:	f1bc 0f04 	cmp.w	ip, #4
    2ed2:	bf24      	itt	cs
    2ed4:	f8d8 9000 	ldrcs.w	r9, [r8]
    2ed8:	f1b9 0f00 	cmpcs.w	r9, #0
    2edc:	bf08      	it	eq
    2ede:	f045 4580 	orreq.w	r5, r5, #1073741824	; 0x40000000
    2ee2:	f015 4f80 	tst.w	r5, #1073741824	; 0x40000000
    2ee6:	d1e1      	bne.n	2eac <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x64>
    2ee8:	4c3f      	ldr	r4, [pc, #252]	; (2fe8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a0>)
    2eea:	f100 0c10 	add.w	ip, r0, #16
    2eee:	fa07 fc0c 	lsl.w	ip, r7, ip
    2ef2:	f8c4 c308 	str.w	ip, [r4, #776]	; 0x308
    2ef6:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    2efa:	b1c2      	cbz	r2, 2f2e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0xe6>
    2efc:	f04f 0840 	mov.w	r8, #64	; 0x40
    2f00:	eb08 0880 	add.w	r8, r8, r0, lsl #2
    2f04:	f008 08ff 	and.w	r8, r8, #255	; 0xff
    2f08:	44a0      	add	r8, r4
    2f0a:	f8c8 7000 	str.w	r7, [r8]
    2f0e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    2f12:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    2f16:	eba1 0000 	sub.w	r0, r1, r0
    2f1a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2f1e:	4282      	cmp	r2, r0
    2f20:	bf98      	it	ls
    2f22:	f5b0 0f80 	cmpls.w	r0, #4194304	; 0x400000
    2f26:	bf28      	it	cs
    2f28:	f8c5 6540 	strcs.w	r6, [r5, #1344]	; 0x540
    2f2c:	d250      	bcs.n	2fd0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2f2e:	f8c5 1540 	str.w	r1, [r5, #1344]	; 0x540
    2f32:	2b01      	cmp	r3, #1
    2f34:	bf08      	it	eq
    2f36:	f8c4 c304 	streq.w	ip, [r4, #772]	; 0x304
    2f3a:	2001      	movs	r0, #1
    2f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2f40:	b134      	cbz	r4, 2f50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2f42:	4584      	cmp	ip, r0
    2f44:	d104      	bne.n	2f50 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x108>
    2f46:	f44f 711d 	mov.w	r1, #628	; 0x274
    2f4a:	206c      	movs	r0, #108	; 0x6c
    2f4c:	f000 fcd8 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f50:	f1a0 0c04 	sub.w	ip, r0, #4
    2f54:	f00c 04ff 	and.w	r4, ip, #255	; 0xff
    2f58:	2b01      	cmp	r3, #1
    2f5a:	e000      	b.n	2f5e <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x116>
    2f5c:	e03b      	b.n	2fd6 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x18e>
    2f5e:	bf0c      	ite	eq
    2f60:	f04f 0801 	moveq.w	r8, #1
    2f64:	f04f 0800 	movne.w	r8, #0
    2f68:	2c03      	cmp	r4, #3
    2f6a:	d304      	bcc.n	2f76 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x12e>
    2f6c:	f240 114d 	movw	r1, #333	; 0x14d
    2f70:	206c      	movs	r0, #108	; 0x6c
    2f72:	f000 fcc5 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2f76:	f8df c074 	ldr.w	ip, [pc, #116]	; 2fec <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x1a4>
    2f7a:	f104 0310 	add.w	r3, r4, #16
    2f7e:	fa07 f303 	lsl.w	r3, r7, r3
    2f82:	f8cc 3308 	str.w	r3, [ip, #776]	; 0x308
    2f86:	f8cc 3348 	str.w	r3, [ip, #840]	; 0x348
    2f8a:	eb05 0484 	add.w	r4, r5, r4, lsl #2
    2f8e:	f84c 6004 	str.w	r6, [ip, r4]
    2f92:	1f00      	subs	r0, r0, #4
    2f94:	b2c0      	uxtb	r0, r0
    2f96:	eb0c 0080 	add.w	r0, ip, r0, lsl #2
    2f9a:	b16a      	cbz	r2, 2fb8 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x170>
    2f9c:	f8dc 4504 	ldr.w	r4, [ip, #1284]	; 0x504
    2fa0:	1b0c      	subs	r4, r1, r4
    2fa2:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
    2fa6:	42a2      	cmp	r2, r4
    2fa8:	bf98      	it	ls
    2faa:	f5b4 0f80 	cmpls.w	r4, #4194304	; 0x400000
    2fae:	bf24      	itt	cs
    2fb0:	2100      	movcs	r1, #0
    2fb2:	f8c0 1540 	strcs.w	r1, [r0, #1344]	; 0x540
    2fb6:	d20b      	bcs.n	2fd0 <sym_X2K67YH6UCW6TFK6NTLPZZFGWYHTTPZYK5PXHNQ+0x188>
    2fb8:	f8c0 1540 	str.w	r1, [r0, #1344]	; 0x540
    2fbc:	f1b8 0f00 	cmp.w	r8, #0
    2fc0:	bf18      	it	ne
    2fc2:	f8cc 3304 	strne.w	r3, [ip, #772]	; 0x304
    2fc6:	f8cc 3344 	str.w	r3, [ip, #836]	; 0x344
    2fca:	2001      	movs	r0, #1
    2fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2fd0:	2000      	movs	r0, #0
    2fd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2fd6:	f240 2179 	movw	r1, #633	; 0x279
    2fda:	206c      	movs	r0, #108	; 0x6c
    2fdc:	f000 fc90 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    2fe0:	2000001f 	.word	0x2000001f
    2fe4:	2000001c 	.word	0x2000001c
    2fe8:	40008000 	.word	0x40008000
    2fec:	4000b000 	.word	0x4000b000

00002ff0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY>:
    2ff0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2ff4:	2600      	movs	r6, #0
    2ff6:	f44f 77a0 	mov.w	r7, #320	; 0x140
    2ffa:	f04f 0801 	mov.w	r8, #1
    2ffe:	2807      	cmp	r0, #7
    3000:	d251      	bcs.n	30a6 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xb6>
    3002:	e8df f000 	tbb	[pc, r0]
    3006:	0404      	.short	0x0404
    3008:	19190404 	.word	0x19190404
    300c:	0019      	.short	0x0019
    300e:	f100 0110 	add.w	r1, r0, #16
    3012:	fa08 f201 	lsl.w	r2, r8, r1
    3016:	4926      	ldr	r1, [pc, #152]	; (30b0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc0>)
    3018:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    301c:	eb01 0380 	add.w	r3, r1, r0, lsl #2
    3020:	2200      	movs	r2, #0
    3022:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    3026:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    302a:	508e      	str	r6, [r1, r2]
    302c:	4921      	ldr	r1, [pc, #132]	; (30b4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc4>)
    302e:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3032:	9000      	str	r0, [sp, #0]
    3034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    3038:	4d1f      	ldr	r5, [pc, #124]	; (30b8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xc8>)
    303a:	1f01      	subs	r1, r0, #4
    303c:	b2cc      	uxtb	r4, r1
    303e:	7829      	ldrb	r1, [r5, #0]
    3040:	b179      	cbz	r1, 3062 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    3042:	786a      	ldrb	r2, [r5, #1]
    3044:	4282      	cmp	r2, r0
    3046:	d10c      	bne.n	3062 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0x72>
    3048:	4a1c      	ldr	r2, [pc, #112]	; (30bc <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xcc>)
    304a:	f04f 4040 	mov.w	r0, #3221225472	; 0xc0000000
    304e:	6010      	str	r0, [r2, #0]
    3050:	2901      	cmp	r1, #1
    3052:	bf08      	it	eq
    3054:	f7ff fd3c 	bleq	2ad0 <MPSL_IRQ_TIMER0_Handler+0x100>
    3058:	702e      	strb	r6, [r5, #0]
    305a:	4919      	ldr	r1, [pc, #100]	; (30c0 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd0>)
    305c:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
    3060:	60c8      	str	r0, [r1, #12]
    3062:	f104 0010 	add.w	r0, r4, #16
    3066:	fa08 f100 	lsl.w	r1, r8, r0
    306a:	4816      	ldr	r0, [pc, #88]	; (30c4 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd4>)
    306c:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3070:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    3074:	00a1      	lsls	r1, r4, #2
    3076:	4401      	add	r1, r0
    3078:	f8d1 1540 	ldr.w	r1, [r1, #1344]	; 0x540
    307c:	f8d0 2504 	ldr.w	r2, [r0, #1284]	; 0x504
    3080:	1a89      	subs	r1, r1, r2
    3082:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    3086:	2902      	cmp	r1, #2
    3088:	d307      	bcc.n	309a <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xaa>
    308a:	eb00 0284 	add.w	r2, r0, r4, lsl #2
    308e:	2100      	movs	r1, #0
    3090:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
    3094:	eb07 0184 	add.w	r1, r7, r4, lsl #2
    3098:	5046      	str	r6, [r0, r1]
    309a:	480b      	ldr	r0, [pc, #44]	; (30c8 <sym_TSYEIN5CZPQE3YK6VECZD5C2M4LMXKKH6O7LNAY+0xd8>)
    309c:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
    30a0:	9000      	str	r0, [sp, #0]
    30a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    30a6:	f240 21f1 	movw	r1, #753	; 0x2f1
    30aa:	206c      	movs	r0, #108	; 0x6c
    30ac:	f000 fc28 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    30b0:	40008000 	.word	0x40008000
    30b4:	40008140 	.word	0x40008140
    30b8:	2000001f 	.word	0x2000001f
    30bc:	4001f508 	.word	0x4001f508
    30c0:	2000001c 	.word	0x2000001c
    30c4:	4000b000 	.word	0x4000b000
    30c8:	4000b140 	.word	0x4000b140

000030cc <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q>:
    30cc:	4920      	ldr	r1, [pc, #128]	; (3150 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x84>)
    30ce:	f46f 2080 	mvn.w	r0, #262144	; 0x40000
    30d2:	f8c1 0308 	str.w	r0, [r1, #776]	; 0x308
    30d6:	481f      	ldr	r0, [pc, #124]	; (3154 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x88>)
    30d8:	1d0a      	adds	r2, r1, #4
    30da:	7803      	ldrb	r3, [r0, #0]
    30dc:	2000      	movs	r0, #0
    30de:	b15b      	cbz	r3, 30f8 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x2c>
    30e0:	f46f 23a0 	mvn.w	r3, #327680	; 0x50000
    30e4:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    30e8:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    30ec:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    30f0:	4919      	ldr	r1, [pc, #100]	; (3158 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x8c>)
    30f2:	6809      	ldr	r1, [r1, #0]
    30f4:	b999      	cbnz	r1, 311e <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x52>
    30f6:	e00c      	b.n	3112 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x46>
    30f8:	f46f 2380 	mvn.w	r3, #262144	; 0x40000
    30fc:	f8c1 3348 	str.w	r3, [r1, #840]	; 0x348
    3100:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    3104:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3108:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    310c:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    3110:	e7ee      	b.n	30f0 <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x24>
    3112:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    3116:	f44f 6100 	mov.w	r1, #2048	; 0x800
    311a:	f8c2 1280 	str.w	r1, [r2, #640]	; 0x280
    311e:	490f      	ldr	r1, [pc, #60]	; (315c <sym_OLTN5HGCU3P74AJAQRGNYBUXASUKWF3RI2Q3H5Q+0x90>)
    3120:	f04f 32ff 	mov.w	r2, #4294967295
    3124:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
    3128:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    312c:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
    3130:	1d0a      	adds	r2, r1, #4
    3132:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3136:	f8c1 0144 	str.w	r0, [r1, #324]	; 0x144
    313a:	1d12      	adds	r2, r2, #4
    313c:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    3140:	f8c1 0148 	str.w	r0, [r1, #328]	; 0x148
    3144:	1d12      	adds	r2, r2, #4
    3146:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    314a:	f8c1 014c 	str.w	r0, [r1, #332]	; 0x14c
    314e:	4770      	bx	lr
    3150:	4000b000 	.word	0x4000b000
    3154:	2000001f 	.word	0x2000001f
    3158:	4000b148 	.word	0x4000b148
    315c:	40008000 	.word	0x40008000

00003160 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I>:
    3160:	4808      	ldr	r0, [pc, #32]	; (3184 <sym_CPXNCG66C5WXYS4GOKTR2JEIS45ZVRZUCBYX34I+0x24>)
    3162:	f990 0002 	ldrsb.w	r0, [r0, #2]
    3166:	2800      	cmp	r0, #0
    3168:	bfb8      	it	lt
    316a:	4770      	bxlt	lr
    316c:	f000 011f 	and.w	r1, r0, #31
    3170:	2201      	movs	r2, #1
    3172:	fa02 f101 	lsl.w	r1, r2, r1
    3176:	0940      	lsrs	r0, r0, #5
    3178:	0080      	lsls	r0, r0, #2
    317a:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    317e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    3182:	4770      	bx	lr
    3184:	2000001c 	.word	0x2000001c

00003188 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>:
    3188:	b510      	push	{r4, lr}
    318a:	2807      	cmp	r0, #7
    318c:	d20d      	bcs.n	31aa <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x22>
    318e:	e8df f000 	tbb	[pc, r0]
    3192:	0404      	.short	0x0404
    3194:	06060404 	.word	0x06060404
    3198:	0006      	.short	0x0006
    319a:	4906      	ldr	r1, [pc, #24]	; (31b4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x2c>)
    319c:	e002      	b.n	31a4 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x1c>
    319e:	1f00      	subs	r0, r0, #4
    31a0:	4905      	ldr	r1, [pc, #20]	; (31b8 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA+0x30>)
    31a2:	b2c0      	uxtb	r0, r0
    31a4:	eb01 0080 	add.w	r0, r1, r0, lsl #2
    31a8:	bd10      	pop	{r4, pc}
    31aa:	f240 219d 	movw	r1, #669	; 0x29d
    31ae:	206c      	movs	r0, #108	; 0x6c
    31b0:	f000 fba6 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    31b4:	40008140 	.word	0x40008140
    31b8:	4000b140 	.word	0x4000b140

000031bc <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI>:
    31bc:	b510      	push	{r4, lr}
    31be:	481c      	ldr	r0, [pc, #112]	; (3230 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x74>)
    31c0:	2400      	movs	r4, #0
    31c2:	2104      	movs	r1, #4
    31c4:	7004      	strb	r4, [r0, #0]
    31c6:	1ec0      	subs	r0, r0, #3
    31c8:	7001      	strb	r1, [r0, #0]
    31ca:	0589      	lsls	r1, r1, #22
    31cc:	60c1      	str	r1, [r0, #12]
    31ce:	f7ff fc7f 	bl	2ad0 <MPSL_IRQ_TIMER0_Handler+0x100>
    31d2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    31d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
    31da:	f04f 0c01 	mov.w	ip, #1
    31de:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    31e2:	f3bf 8f4f 	dsb	sy
    31e6:	f3bf 8f6f 	isb	sy
    31ea:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
    31ee:	4811      	ldr	r0, [pc, #68]	; (3234 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x78>)
    31f0:	f8c0 c004 	str.w	ip, [r0, #4]
    31f4:	f8c0 c008 	str.w	ip, [r0, #8]
    31f8:	f8d0 1504 	ldr.w	r1, [r0, #1284]	; 0x504
    31fc:	2900      	cmp	r1, #0
    31fe:	d1fb      	bne.n	31f8 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x3c>
    3200:	1e49      	subs	r1, r1, #1
    3202:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    3206:	f8c0 1348 	str.w	r1, [r0, #840]	; 0x348
    320a:	f8c0 4540 	str.w	r4, [r0, #1344]	; 0x540
    320e:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    3212:	4909      	ldr	r1, [pc, #36]	; (3238 <sym_3SK52U5TD4ACVVYKWS6UI6ZPWKSLV6BW5IGCPJI+0x7c>)
    3214:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3218:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    321c:	1d09      	adds	r1, r1, #4
    321e:	f8c1 4540 	str.w	r4, [r1, #1344]	; 0x540
    3222:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    3226:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    322a:	f8c0 c000 	str.w	ip, [r0]
    322e:	bd10      	pop	{r4, pc}
    3230:	2000001f 	.word	0x2000001f
    3234:	4000b000 	.word	0x4000b000
    3238:	4000b004 	.word	0x4000b004

0000323c <MPSL_IRQ_CLOCK_Handler>:
    323c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3240:	4c16      	ldr	r4, [pc, #88]	; (329c <MPSL_IRQ_CLOCK_Handler+0x60>)
    3242:	7a60      	ldrb	r0, [r4, #9]
    3244:	2800      	cmp	r0, #0
    3246:	d027      	beq.n	3298 <MPSL_IRQ_CLOCK_Handler+0x5c>
    3248:	f44f 7180 	mov.w	r1, #256	; 0x100
    324c:	058d      	lsls	r5, r1, #22
    324e:	4628      	mov	r0, r5
    3250:	f009 f929 	bl	c4a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3254:	4680      	mov	r8, r0
    3256:	f44f 7182 	mov.w	r1, #260	; 0x104
    325a:	4628      	mov	r0, r5
    325c:	f009 f923 	bl	c4a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3260:	2600      	movs	r6, #0
    3262:	4607      	mov	r7, r0
    3264:	f1b8 0f00 	cmp.w	r8, #0
    3268:	d009      	beq.n	327e <MPSL_IRQ_CLOCK_Handler+0x42>
    326a:	2001      	movs	r0, #1
    326c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3270:	7920      	ldrb	r0, [r4, #4]
    3272:	b120      	cbz	r0, 327e <MPSL_IRQ_CLOCK_Handler+0x42>
    3274:	7126      	strb	r6, [r4, #4]
    3276:	69e0      	ldr	r0, [r4, #28]
    3278:	b108      	cbz	r0, 327e <MPSL_IRQ_CLOCK_Handler+0x42>
    327a:	4780      	blx	r0
    327c:	61e6      	str	r6, [r4, #28]
    327e:	b137      	cbz	r7, 328e <MPSL_IRQ_CLOCK_Handler+0x52>
    3280:	f8c5 6104 	str.w	r6, [r5, #260]	; 0x104
    3284:	2002      	movs	r0, #2
    3286:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    328a:	f000 fa6d 	bl	3768 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    328e:	4640      	mov	r0, r8
    3290:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3294:	f000 b85a 	b.w	334c <MPSL_IRQ_CLOCK_Handler+0x110>
    3298:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    329c:	2000002c 	.word	0x2000002c
    32a0:	b510      	push	{r4, lr}
    32a2:	f009 f9aa 	bl	c5fa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    32a6:	b930      	cbnz	r0, 32b6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    32a8:	f009 f9c8 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    32ac:	b918      	cbnz	r0, 32b6 <MPSL_IRQ_CLOCK_Handler+0x7a>
    32ae:	f009 f9fb 	bl	c6a8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    32b2:	2800      	cmp	r0, #0
    32b4:	d002      	beq.n	32bc <MPSL_IRQ_CLOCK_Handler+0x80>
    32b6:	4902      	ldr	r1, [pc, #8]	; (32c0 <MPSL_IRQ_CLOCK_Handler+0x84>)
    32b8:	2002      	movs	r0, #2
    32ba:	6008      	str	r0, [r1, #0]
    32bc:	bd10      	pop	{r4, pc}
    32be:	0000      	.short	0x0000
    32c0:	40000c34 	.word	0x40000c34
    32c4:	b570      	push	{r4, r5, r6, lr}
    32c6:	f000 f987 	bl	35d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    32ca:	f000 faa1 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    32ce:	4c09      	ldr	r4, [pc, #36]	; (32f4 <MPSL_IRQ_CLOCK_Handler+0xb8>)
    32d0:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    32d4:	b130      	cbz	r0, 32e4 <MPSL_IRQ_CLOCK_Handler+0xa8>
    32d6:	f7ff ffe3 	bl	32a0 <MPSL_IRQ_CLOCK_Handler+0x64>
    32da:	2001      	movs	r0, #1
    32dc:	6128      	str	r0, [r5, #16]
    32de:	2004      	movs	r0, #4
    32e0:	72a0      	strb	r0, [r4, #10]
    32e2:	e004      	b.n	32ee <MPSL_IRQ_CLOCK_Handler+0xb2>
    32e4:	2003      	movs	r0, #3
    32e6:	72a0      	strb	r0, [r4, #10]
    32e8:	2001      	movs	r0, #1
    32ea:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    32ee:	2000      	movs	r0, #0
    32f0:	71e0      	strb	r0, [r4, #7]
    32f2:	bd70      	pop	{r4, r5, r6, pc}
    32f4:	2000002c 	.word	0x2000002c
    32f8:	b570      	push	{r4, r5, r6, lr}
    32fa:	4c13      	ldr	r4, [pc, #76]	; (3348 <MPSL_IRQ_CLOCK_Handler+0x10c>)
    32fc:	79a0      	ldrb	r0, [r4, #6]
    32fe:	b1f0      	cbz	r0, 333e <MPSL_IRQ_CLOCK_Handler+0x102>
    3300:	2801      	cmp	r0, #1
    3302:	d003      	beq.n	330c <MPSL_IRQ_CLOCK_Handler+0xd0>
    3304:	79e1      	ldrb	r1, [r4, #7]
    3306:	1e40      	subs	r0, r0, #1
    3308:	4281      	cmp	r1, r0
    330a:	da18      	bge.n	333e <MPSL_IRQ_CLOCK_Handler+0x102>
    330c:	f000 fa80 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3310:	4605      	mov	r5, r0
    3312:	f000 fb65 	bl	39e0 <mpsl_temperature_get>
    3316:	79a1      	ldrb	r1, [r4, #6]
    3318:	2901      	cmp	r1, #1
    331a:	d902      	bls.n	3322 <MPSL_IRQ_CLOCK_Handler+0xe6>
    331c:	79e1      	ldrb	r1, [r4, #7]
    331e:	1c49      	adds	r1, r1, #1
    3320:	71e1      	strb	r1, [r4, #7]
    3322:	b10d      	cbz	r5, 3328 <MPSL_IRQ_CLOCK_Handler+0xec>
    3324:	6961      	ldr	r1, [r4, #20]
    3326:	e000      	b.n	332a <MPSL_IRQ_CLOCK_Handler+0xee>
    3328:	6921      	ldr	r1, [r4, #16]
    332a:	1a41      	subs	r1, r0, r1
    332c:	2902      	cmp	r1, #2
    332e:	da02      	bge.n	3336 <MPSL_IRQ_CLOCK_Handler+0xfa>
    3330:	f111 0f02 	cmn.w	r1, #2
    3334:	dc07      	bgt.n	3346 <MPSL_IRQ_CLOCK_Handler+0x10a>
    3336:	b10d      	cbz	r5, 333c <MPSL_IRQ_CLOCK_Handler+0x100>
    3338:	6160      	str	r0, [r4, #20]
    333a:	e000      	b.n	333e <MPSL_IRQ_CLOCK_Handler+0x102>
    333c:	6120      	str	r0, [r4, #16]
    333e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3342:	f7ff bfbf 	b.w	32c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    3346:	bd70      	pop	{r4, r5, r6, pc}
    3348:	2000002c 	.word	0x2000002c
    334c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3350:	4606      	mov	r6, r0
    3352:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    3356:	f44f 7186 	mov.w	r1, #268	; 0x10c
    335a:	4628      	mov	r0, r5
    335c:	f009 f8a3 	bl	c4a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3360:	4680      	mov	r8, r0
    3362:	f44f 7188 	mov.w	r1, #272	; 0x110
    3366:	4628      	mov	r0, r5
    3368:	f009 f89d 	bl	c4a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    336c:	4c27      	ldr	r4, [pc, #156]	; (340c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    336e:	4682      	mov	sl, r0
    3370:	7827      	ldrb	r7, [r4, #0]
    3372:	f104 0008 	add.w	r0, r4, #8
    3376:	f009 f90a 	bl	c58e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    337a:	b110      	cbz	r0, 3382 <MPSL_IRQ_CLOCK_Handler+0x146>
    337c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    3380:	e016      	b.n	33b0 <MPSL_IRQ_CLOCK_Handler+0x174>
    3382:	f04f 0901 	mov.w	r9, #1
    3386:	b146      	cbz	r6, 339a <MPSL_IRQ_CLOCK_Handler+0x15e>
    3388:	7aa0      	ldrb	r0, [r4, #10]
    338a:	2803      	cmp	r0, #3
    338c:	d105      	bne.n	339a <MPSL_IRQ_CLOCK_Handler+0x15e>
    338e:	2004      	movs	r0, #4
    3390:	72a0      	strb	r0, [r4, #10]
    3392:	f7ff ff85 	bl	32a0 <MPSL_IRQ_CLOCK_Handler+0x64>
    3396:	f8c5 9010 	str.w	r9, [r5, #16]
    339a:	2600      	movs	r6, #0
    339c:	f1b8 0f00 	cmp.w	r8, #0
    33a0:	d018      	beq.n	33d4 <MPSL_IRQ_CLOCK_Handler+0x198>
    33a2:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
    33a6:	7aa0      	ldrb	r0, [r4, #10]
    33a8:	2804      	cmp	r0, #4
    33aa:	d004      	beq.n	33b6 <MPSL_IRQ_CLOCK_Handler+0x17a>
    33ac:	f44f 71de 	mov.w	r1, #444	; 0x1bc
    33b0:	206d      	movs	r0, #109	; 0x6d
    33b2:	f000 faa5 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    33b6:	f009 f920 	bl	c5fa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>
    33ba:	b928      	cbnz	r0, 33c8 <MPSL_IRQ_CLOCK_Handler+0x18c>
    33bc:	f009 f93e 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    33c0:	b910      	cbnz	r0, 33c8 <MPSL_IRQ_CLOCK_Handler+0x18c>
    33c2:	f009 f971 	bl	c6a8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    33c6:	b108      	cbz	r0, 33cc <MPSL_IRQ_CLOCK_Handler+0x190>
    33c8:	4811      	ldr	r0, [pc, #68]	; (3410 <MPSL_IRQ_CLOCK_Handler+0x1d4>)
    33ca:	6006      	str	r6, [r0, #0]
    33cc:	2002      	movs	r0, #2
    33ce:	72a0      	strb	r0, [r4, #10]
    33d0:	f000 f8e6 	bl	35a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    33d4:	f1ba 0f00 	cmp.w	sl, #0
    33d8:	d008      	beq.n	33ec <MPSL_IRQ_CLOCK_Handler+0x1b0>
    33da:	f8c5 6110 	str.w	r6, [r5, #272]	; 0x110
    33de:	7aa0      	ldrb	r0, [r4, #10]
    33e0:	2802      	cmp	r0, #2
    33e2:	d101      	bne.n	33e8 <MPSL_IRQ_CLOCK_Handler+0x1ac>
    33e4:	f7ff ff88 	bl	32f8 <MPSL_IRQ_CLOCK_Handler+0xbc>
    33e8:	f8c5 9014 	str.w	r9, [r5, #20]
    33ec:	b13f      	cbz	r7, 33fe <MPSL_IRQ_CLOCK_Handler+0x1c2>
    33ee:	7026      	strb	r6, [r4, #0]
    33f0:	7aa0      	ldrb	r0, [r4, #10]
    33f2:	2802      	cmp	r0, #2
    33f4:	d101      	bne.n	33fa <MPSL_IRQ_CLOCK_Handler+0x1be>
    33f6:	f7ff ff65 	bl	32c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    33fa:	f000 f8d1 	bl	35a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    33fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3402:	4802      	ldr	r0, [pc, #8]	; (340c <MPSL_IRQ_CLOCK_Handler+0x1d0>)
    3404:	3008      	adds	r0, #8
    3406:	f009 b8d9 	b.w	c5bc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    340a:	0000      	.short	0x0000
    340c:	2000002c 	.word	0x2000002c
    3410:	40000c34 	.word	0x40000c34
    3414:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3418:	4c5c      	ldr	r4, [pc, #368]	; (358c <MPSL_IRQ_CLOCK_Handler+0x350>)
    341a:	f04f 0800 	mov.w	r8, #0
    341e:	4606      	mov	r6, r0
    3420:	f8c4 8018 	str.w	r8, [r4, #24]
    3424:	7843      	ldrb	r3, [r0, #1]
    3426:	7882      	ldrb	r2, [r0, #2]
    3428:	7800      	ldrb	r0, [r0, #0]
    342a:	72e0      	strb	r0, [r4, #11]
    342c:	7163      	strb	r3, [r4, #5]
    342e:	2701      	movs	r7, #1
    3430:	71a2      	strb	r2, [r4, #6]
    3432:	07bd      	lsls	r5, r7, #30
    3434:	f884 8007 	strb.w	r8, [r4, #7]
    3438:	2805      	cmp	r0, #5
    343a:	d224      	bcs.n	3486 <MPSL_IRQ_CLOCK_Handler+0x24a>
    343c:	e8df f000 	tbb	[pc, r0]
    3440:	1f05030f 	.word	0x1f05030f
    3444:	0021      	.short	0x0021
    3446:	61a7      	str	r7, [r4, #24]
    3448:	e009      	b.n	345e <MPSL_IRQ_CLOCK_Handler+0x222>
    344a:	f000 f8c5 	bl	35d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    344e:	2101      	movs	r1, #1
    3450:	4628      	mov	r0, r5
    3452:	f009 f82d 	bl	c4b0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3456:	2800      	cmp	r0, #0
    3458:	d0f9      	beq.n	344e <MPSL_IRQ_CLOCK_Handler+0x212>
    345a:	2002      	movs	r0, #2
    345c:	61a0      	str	r0, [r4, #24]
    345e:	f009 f853 	bl	c508 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>
    3462:	b1b0      	cbz	r0, 3492 <MPSL_IRQ_CLOCK_Handler+0x256>
    3464:	f000 f9ee 	bl	3844 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>
    3468:	7e21      	ldrb	r1, [r4, #24]
    346a:	f001 0103 	and.w	r1, r1, #3
    346e:	4288      	cmp	r0, r1
    3470:	d10f      	bne.n	3492 <MPSL_IRQ_CLOCK_Handler+0x256>
    3472:	79b0      	ldrb	r0, [r6, #6]
    3474:	b150      	cbz	r0, 348c <MPSL_IRQ_CLOCK_Handler+0x250>
    3476:	2002      	movs	r0, #2
    3478:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    347c:	e06a      	b.n	3554 <MPSL_IRQ_CLOCK_Handler+0x318>
    347e:	4844      	ldr	r0, [pc, #272]	; (3590 <MPSL_IRQ_CLOCK_Handler+0x354>)
    3480:	e7ec      	b.n	345c <MPSL_IRQ_CLOCK_Handler+0x220>
    3482:	4844      	ldr	r0, [pc, #272]	; (3594 <MPSL_IRQ_CLOCK_Handler+0x358>)
    3484:	e7ea      	b.n	345c <MPSL_IRQ_CLOCK_Handler+0x220>
    3486:	f240 312d 	movw	r1, #813	; 0x32d
    348a:	e049      	b.n	3520 <MPSL_IRQ_CLOCK_Handler+0x2e4>
    348c:	f000 f9ae 	bl	37ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    3490:	e060      	b.n	3554 <MPSL_IRQ_CLOCK_Handler+0x318>
    3492:	60ef      	str	r7, [r5, #12]
    3494:	f44f 7a82 	mov.w	sl, #260	; 0x104
    3498:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    349c:	69a0      	ldr	r0, [r4, #24]
    349e:	f8c5 0518 	str.w	r0, [r5, #1304]	; 0x518
    34a2:	f009 f896 	bl	c5d2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    34a6:	b940      	cbnz	r0, 34ba <MPSL_IRQ_CLOCK_Handler+0x27e>
    34a8:	f009 f89d 	bl	c5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    34ac:	b928      	cbnz	r0, 34ba <MPSL_IRQ_CLOCK_Handler+0x27e>
    34ae:	f009 f8b1 	bl	c614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    34b2:	b910      	cbnz	r0, 34ba <MPSL_IRQ_CLOCK_Handler+0x27e>
    34b4:	f009 f8c2 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    34b8:	b138      	cbz	r0, 34ca <MPSL_IRQ_CLOCK_Handler+0x28e>
    34ba:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
    34be:	4836      	ldr	r0, [pc, #216]	; (3598 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    34c0:	f8d1 1244 	ldr.w	r1, [r1, #580]	; 0x244
    34c4:	f3c1 3142 	ubfx	r1, r1, #13, #3
    34c8:	6001      	str	r1, [r0, #0]
    34ca:	f009 f882 	bl	c5d2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    34ce:	b940      	cbnz	r0, 34e2 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    34d0:	f009 f889 	bl	c5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    34d4:	b928      	cbnz	r0, 34e2 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    34d6:	f009 f89d 	bl	c614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    34da:	b910      	cbnz	r0, 34e2 <MPSL_IRQ_CLOCK_Handler+0x2a6>
    34dc:	f009 f8ae 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    34e0:	b110      	cbz	r0, 34e8 <MPSL_IRQ_CLOCK_Handler+0x2ac>
    34e2:	482d      	ldr	r0, [pc, #180]	; (3598 <MPSL_IRQ_CLOCK_Handler+0x35c>)
    34e4:	3010      	adds	r0, #16
    34e6:	6007      	str	r7, [r0, #0]
    34e8:	60af      	str	r7, [r5, #8]
    34ea:	2002      	movs	r0, #2
    34ec:	f8c5 0304 	str.w	r0, [r5, #772]	; 0x304
    34f0:	79b0      	ldrb	r0, [r6, #6]
    34f2:	bb78      	cbnz	r0, 3554 <MPSL_IRQ_CLOCK_Handler+0x318>
    34f4:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
    34f8:	f010 0f02 	tst.w	r0, #2
    34fc:	d00e      	beq.n	351c <MPSL_IRQ_CLOCK_Handler+0x2e0>
    34fe:	f8df 909c 	ldr.w	r9, [pc, #156]	; 359c <MPSL_IRQ_CLOCK_Handler+0x360>
    3502:	f8d9 1000 	ldr.w	r1, [r9]
    3506:	43c9      	mvns	r1, r1
    3508:	f341 1700 	sbfx	r7, r1, #4, #1
    350c:	f8d9 1000 	ldr.w	r1, [r9]
    3510:	f041 0110 	orr.w	r1, r1, #16
    3514:	f8c9 1000 	str.w	r1, [r9]
    3518:	1c7f      	adds	r7, r7, #1
    351a:	e007      	b.n	352c <MPSL_IRQ_CLOCK_Handler+0x2f0>
    351c:	f240 21ee 	movw	r1, #750	; 0x2ee
    3520:	206d      	movs	r0, #109	; 0x6d
    3522:	f000 f9ed 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3526:	bf00      	nop
    3528:	f000 fb10 	bl	3b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    352c:	4651      	mov	r1, sl
    352e:	4628      	mov	r0, r5
    3530:	f008 ffb9 	bl	c4a6 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x48>
    3534:	2800      	cmp	r0, #0
    3536:	d0f7      	beq.n	3528 <MPSL_IRQ_CLOCK_Handler+0x2ec>
    3538:	f000 f958 	bl	37ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>
    353c:	b92f      	cbnz	r7, 354a <MPSL_IRQ_CLOCK_Handler+0x30e>
    353e:	f8d9 1000 	ldr.w	r1, [r9]
    3542:	f021 0110 	bic.w	r1, r1, #16
    3546:	f8c9 1000 	str.w	r1, [r9]
    354a:	2002      	movs	r0, #2
    354c:	f8c5 0308 	str.w	r0, [r5, #776]	; 0x308
    3550:	f8c5 8104 	str.w	r8, [r5, #260]	; 0x104
    3554:	79a0      	ldrb	r0, [r4, #6]
    3556:	b170      	cbz	r0, 3576 <MPSL_IRQ_CLOCK_Handler+0x33a>
    3558:	7830      	ldrb	r0, [r6, #0]
    355a:	b960      	cbnz	r0, 3576 <MPSL_IRQ_CLOCK_Handler+0x33a>
    355c:	f000 f958 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3560:	4606      	mov	r6, r0
    3562:	f000 fa3d 	bl	39e0 <mpsl_temperature_get>
    3566:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    356a:	b116      	cbz	r6, 3572 <MPSL_IRQ_CLOCK_Handler+0x336>
    356c:	e9c4 2004 	strd	r2, r0, [r4, #16]
    3570:	e001      	b.n	3576 <MPSL_IRQ_CLOCK_Handler+0x33a>
    3572:	e9c4 0204 	strd	r0, r2, [r4, #16]
    3576:	2101      	movs	r1, #1
    3578:	4628      	mov	r0, r5
    357a:	f008 ff99 	bl	c4b0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    357e:	b108      	cbz	r0, 3584 <MPSL_IRQ_CLOCK_Handler+0x348>
    3580:	f000 f940 	bl	3804 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3584:	f884 800a 	strb.w	r8, [r4, #10]
    3588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    358c:	2000002c 	.word	0x2000002c
    3590:	00020001 	.word	0x00020001
    3594:	00030001 	.word	0x00030001
    3598:	4000053c 	.word	0x4000053c
    359c:	e000ed10 	.word	0xe000ed10

000035a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>:
    35a0:	b510      	push	{r4, lr}
    35a2:	f3ef 8410 	mrs	r4, PRIMASK
    35a6:	b672      	cpsid	i
    35a8:	480a      	ldr	r0, [pc, #40]	; (35d4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x34>)
    35aa:	7841      	ldrb	r1, [r0, #1]
    35ac:	b129      	cbz	r1, 35ba <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x1a>
    35ae:	7841      	ldrb	r1, [r0, #1]
    35b0:	1e49      	subs	r1, r1, #1
    35b2:	7041      	strb	r1, [r0, #1]
    35b4:	7841      	ldrb	r1, [r0, #1]
    35b6:	b129      	cbz	r1, 35c4 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x24>
    35b8:	e008      	b.n	35cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    35ba:	f240 110d 	movw	r1, #269	; 0x10d
    35be:	206d      	movs	r0, #109	; 0x6d
    35c0:	f000 f99e 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    35c4:	7880      	ldrb	r0, [r0, #2]
    35c6:	b908      	cbnz	r0, 35cc <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x2c>
    35c8:	f000 f930 	bl	382c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    35cc:	2c00      	cmp	r4, #0
    35ce:	d100      	bne.n	35d2 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ+0x32>
    35d0:	b662      	cpsie	i
    35d2:	bd10      	pop	{r4, pc}
    35d4:	2000002c 	.word	0x2000002c

000035d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>:
    35d8:	b510      	push	{r4, lr}
    35da:	f3ef 8410 	mrs	r4, PRIMASK
    35de:	b672      	cpsid	i
    35e0:	4806      	ldr	r0, [pc, #24]	; (35fc <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x24>)
    35e2:	7841      	ldrb	r1, [r0, #1]
    35e4:	1c49      	adds	r1, r1, #1
    35e6:	7041      	strb	r1, [r0, #1]
    35e8:	7840      	ldrb	r0, [r0, #1]
    35ea:	2801      	cmp	r0, #1
    35ec:	d101      	bne.n	35f2 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x1a>
    35ee:	f008 ff76 	bl	c4de <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>
    35f2:	2c00      	cmp	r4, #0
    35f4:	d100      	bne.n	35f8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ+0x20>
    35f6:	b662      	cpsie	i
    35f8:	bd10      	pop	{r4, pc}
    35fa:	0000      	.short	0x0000
    35fc:	2000002c 	.word	0x2000002c

00003600 <mpsl_clock_hfclk_release>:
    3600:	4805      	ldr	r0, [pc, #20]	; (3618 <mpsl_clock_hfclk_release+0x18>)
    3602:	b510      	push	{r4, lr}
    3604:	78c1      	ldrb	r1, [r0, #3]
    3606:	b121      	cbz	r1, 3612 <mpsl_clock_hfclk_release+0x12>
    3608:	2100      	movs	r1, #0
    360a:	7101      	strb	r1, [r0, #4]
    360c:	70c1      	strb	r1, [r0, #3]
    360e:	f7ff ffc7 	bl	35a0 <sym_AF5XKA2WT4DMFZTLKHOBWE7E2EZAMLDDFPQGGTQ>
    3612:	2000      	movs	r0, #0
    3614:	bd10      	pop	{r4, pc}
    3616:	0000      	.short	0x0000
    3618:	2000002c 	.word	0x2000002c

0000361c <mpsl_clock_hfclk_request>:
    361c:	b570      	push	{r4, r5, r6, lr}
    361e:	4c0c      	ldr	r4, [pc, #48]	; (3650 <mpsl_clock_hfclk_request+0x34>)
    3620:	78e1      	ldrb	r1, [r4, #3]
    3622:	b961      	cbnz	r1, 363e <mpsl_clock_hfclk_request+0x22>
    3624:	2501      	movs	r5, #1
    3626:	70e5      	strb	r5, [r4, #3]
    3628:	61e0      	str	r0, [r4, #28]
    362a:	f7ff ffd5 	bl	35d8 <sym_PEUB6CZG5CWXXD4M2S6OVBXZGDFOG4XII7USUDQ>
    362e:	f000 f8ef 	bl	3810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>
    3632:	b130      	cbz	r0, 3642 <mpsl_clock_hfclk_request+0x26>
    3634:	69e0      	ldr	r0, [r4, #28]
    3636:	b110      	cbz	r0, 363e <mpsl_clock_hfclk_request+0x22>
    3638:	4780      	blx	r0
    363a:	2000      	movs	r0, #0
    363c:	61e0      	str	r0, [r4, #28]
    363e:	2000      	movs	r0, #0
    3640:	bd70      	pop	{r4, r5, r6, pc}
    3642:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3646:	7125      	strb	r5, [r4, #4]
    3648:	f8c0 5304 	str.w	r5, [r0, #772]	; 0x304
    364c:	e7f7      	b.n	363e <mpsl_clock_hfclk_request+0x22>
    364e:	0000      	.short	0x0000
    3650:	2000002c 	.word	0x2000002c

00003654 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y>:
    3654:	f3ef 8010 	mrs	r0, PRIMASK
    3658:	b672      	cpsid	i
    365a:	4904      	ldr	r1, [pc, #16]	; (366c <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x18>)
    365c:	788a      	ldrb	r2, [r1, #2]
    365e:	1c52      	adds	r2, r2, #1
    3660:	708a      	strb	r2, [r1, #2]
    3662:	2800      	cmp	r0, #0
    3664:	d100      	bne.n	3668 <sym_MXEZOAVPP5LXUOZ6LJGDWJ57JEG5BZ5YB7LCG7Y+0x14>
    3666:	b662      	cpsie	i
    3668:	4770      	bx	lr
    366a:	0000      	.short	0x0000
    366c:	2000002c 	.word	0x2000002c

00003670 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A>:
    3670:	b510      	push	{r4, lr}
    3672:	f3ef 8410 	mrs	r4, PRIMASK
    3676:	b672      	cpsid	i
    3678:	480a      	ldr	r0, [pc, #40]	; (36a4 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x34>)
    367a:	7881      	ldrb	r1, [r0, #2]
    367c:	b129      	cbz	r1, 368a <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x1a>
    367e:	7881      	ldrb	r1, [r0, #2]
    3680:	1e49      	subs	r1, r1, #1
    3682:	7081      	strb	r1, [r0, #2]
    3684:	7841      	ldrb	r1, [r0, #1]
    3686:	b129      	cbz	r1, 3694 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x24>
    3688:	e008      	b.n	369c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    368a:	f240 1125 	movw	r1, #293	; 0x125
    368e:	206d      	movs	r0, #109	; 0x6d
    3690:	f000 f936 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3694:	7880      	ldrb	r0, [r0, #2]
    3696:	b908      	cbnz	r0, 369c <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x2c>
    3698:	f000 f8c8 	bl	382c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>
    369c:	2c00      	cmp	r4, #0
    369e:	d100      	bne.n	36a2 <sym_UZOVMIXHY2SDZSVAWFRK4RKQPHXNS37P2CLQ57A+0x32>
    36a0:	b662      	cpsie	i
    36a2:	bd10      	pop	{r4, pc}
    36a4:	2000002c 	.word	0x2000002c

000036a8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>:
    36a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    36ac:	0004      	movs	r4, r0
    36ae:	f06f 0015 	mvn.w	r0, #21
    36b2:	d03c      	beq.n	372e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36b4:	7821      	ldrb	r1, [r4, #0]
    36b6:	2904      	cmp	r1, #4
    36b8:	d839      	bhi.n	372e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36ba:	2900      	cmp	r1, #0
    36bc:	7861      	ldrb	r1, [r4, #1]
    36be:	d038      	beq.n	3732 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x8a>
    36c0:	2900      	cmp	r1, #0
    36c2:	d134      	bne.n	372e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36c4:	78a1      	ldrb	r1, [r4, #2]
    36c6:	2900      	cmp	r1, #0
    36c8:	d131      	bne.n	372e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    36ca:	2000      	movs	r0, #0
    36cc:	f008 feb6 	bl	c43c <MPSL_IRQ_RADIO_Handler+0x1e>
    36d0:	2000      	movs	r0, #0
    36d2:	f008 fea6 	bl	c422 <MPSL_IRQ_RADIO_Handler+0x4>
    36d6:	f04f 4880 	mov.w	r8, #1073741824	; 0x40000000
    36da:	f04f 31ff 	mov.w	r1, #4294967295
    36de:	f8c8 1308 	str.w	r1, [r8, #776]	; 0x308
    36e2:	2600      	movs	r6, #0
    36e4:	f8c8 6100 	str.w	r6, [r8, #256]	; 0x100
    36e8:	f8c8 6104 	str.w	r6, [r8, #260]	; 0x104
    36ec:	f8c8 610c 	str.w	r6, [r8, #268]	; 0x10c
    36f0:	f8c8 6110 	str.w	r6, [r8, #272]	; 0x110
    36f4:	4f14      	ldr	r7, [pc, #80]	; (3748 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0xa0>)
    36f6:	707e      	strb	r6, [r7, #1]
    36f8:	88a0      	ldrh	r0, [r4, #4]
    36fa:	81b8      	strh	r0, [r7, #12]
    36fc:	f008 fee6 	bl	c4cc <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>
    3700:	2501      	movs	r5, #1
    3702:	b108      	cbz	r0, 3708 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x60>
    3704:	70fd      	strb	r5, [r7, #3]
    3706:	707d      	strb	r5, [r7, #1]
    3708:	2101      	movs	r1, #1
    370a:	4640      	mov	r0, r8
    370c:	f008 fed0 	bl	c4b0 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x52>
    3710:	b108      	cbz	r0, 3716 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x6e>
    3712:	f000 f877 	bl	3804 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>
    3716:	4620      	mov	r0, r4
    3718:	f7ff fe7c 	bl	3414 <MPSL_IRQ_CLOCK_Handler+0x1d8>
    371c:	727d      	strb	r5, [r7, #9]
    371e:	2000      	movs	r0, #0
    3720:	f008 fe7f 	bl	c422 <MPSL_IRQ_RADIO_Handler+0x4>
    3724:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    3728:	4630      	mov	r0, r6
    372a:	f8c1 5100 	str.w	r5, [r1, #256]	; 0x100
    372e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3732:	2900      	cmp	r1, #0
    3734:	d0fb      	beq.n	372e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3736:	2920      	cmp	r1, #32
    3738:	d8f9      	bhi.n	372e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    373a:	78a1      	ldrb	r1, [r4, #2]
    373c:	2921      	cmp	r1, #33	; 0x21
    373e:	d8f6      	bhi.n	372e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3740:	2901      	cmp	r1, #1
    3742:	d1c2      	bne.n	36ca <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x22>
    3744:	e7f3      	b.n	372e <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I+0x86>
    3746:	0000      	.short	0x0000
    3748:	2000002c 	.word	0x2000002c

0000374c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>:
    374c:	4801      	ldr	r0, [pc, #4]	; (3754 <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY+0x8>)
    374e:	8980      	ldrh	r0, [r0, #12]
    3750:	4770      	bx	lr
    3752:	0000      	.short	0x0000
    3754:	2000002c 	.word	0x2000002c

00003758 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>:
    3758:	4802      	ldr	r0, [pc, #8]	; (3764 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xc>)
    375a:	7a80      	ldrb	r0, [r0, #10]
    375c:	2800      	cmp	r0, #0
    375e:	d000      	beq.n	3762 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY+0xa>
    3760:	2001      	movs	r0, #1
    3762:	4770      	bx	lr
    3764:	2000002c 	.word	0x2000002c

00003768 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>:
    3768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    376a:	4d1f      	ldr	r5, [pc, #124]	; (37e8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    376c:	7ae8      	ldrb	r0, [r5, #11]
    376e:	2800      	cmp	r0, #0
    3770:	d10f      	bne.n	3792 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3772:	7e28      	ldrb	r0, [r5, #24]
    3774:	f000 0003 	and.w	r0, r0, #3
    3778:	f008 feb6 	bl	c4e8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    377c:	2800      	cmp	r0, #0
    377e:	d008      	beq.n	3792 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3780:	f3ef 8110 	mrs	r1, PRIMASK
    3784:	b672      	cpsid	i
    3786:	f7ff ffe7 	bl	3758 <sym_4CZSFTTT34WDYFZKE2NSCSVSYLPHLZYN7QUTGHY>
    378a:	b118      	cbz	r0, 3794 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2c>
    378c:	2900      	cmp	r1, #0
    378e:	d100      	bne.n	3792 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x2a>
    3790:	b662      	cpsie	i
    3792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3794:	2601      	movs	r6, #1
    3796:	72ae      	strb	r6, [r5, #10]
    3798:	b901      	cbnz	r1, 379c <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x34>
    379a:	b662      	cpsie	i
    379c:	2018      	movs	r0, #24
    379e:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    37a2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    37a6:	61a6      	str	r6, [r4, #24]
    37a8:	f44f 7020 	mov.w	r0, #640	; 0x280
    37ac:	f8ad 0000 	strh.w	r0, [sp]
    37b0:	f8bd 0000 	ldrh.w	r0, [sp]
    37b4:	1e41      	subs	r1, r0, #1
    37b6:	f8ad 1000 	strh.w	r1, [sp]
    37ba:	d2f9      	bcs.n	37b0 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x48>
    37bc:	2700      	movs	r7, #0
    37be:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
    37c2:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
    37c6:	4808      	ldr	r0, [pc, #32]	; (37e8 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q+0x80>)
    37c8:	3008      	adds	r0, #8
    37ca:	f008 fef3 	bl	c5b4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    37ce:	702f      	strb	r7, [r5, #0]
    37d0:	f7ff fd78 	bl	32c4 <MPSL_IRQ_CLOCK_Handler+0x88>
    37d4:	6166      	str	r6, [r4, #20]
    37d6:	7968      	ldrb	r0, [r5, #5]
    37d8:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    37dc:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    37e0:	2018      	movs	r0, #24
    37e2:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    37e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    37e8:	2000002c 	.word	0x2000002c

000037ec <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q>:
    37ec:	b510      	push	{r4, lr}
    37ee:	4c04      	ldr	r4, [pc, #16]	; (3800 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x14>)
    37f0:	7e20      	ldrb	r0, [r4, #24]
    37f2:	f000 0003 	and.w	r0, r0, #3
    37f6:	f008 fe77 	bl	c4e8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>
    37fa:	2800      	cmp	r0, #0
    37fc:	d0f8      	beq.n	37f0 <sym_4PX37LW4KIUYQZ73JWLPH5GAGIRWAKTV3E6F62Q+0x4>
    37fe:	bd10      	pop	{r4, pc}
    3800:	2000002c 	.word	0x2000002c

00003804 <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA>:
    3804:	4901      	ldr	r1, [pc, #4]	; (380c <sym_PIRI3CTIHOPR5MPDQRHBJRRZEA2NVOD4J3GXGOA+0x8>)
    3806:	2001      	movs	r0, #1
    3808:	7008      	strb	r0, [r1, #0]
    380a:	4770      	bx	lr
    380c:	20000284 	.word	0x20000284

00003810 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY>:
    3810:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3814:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    3818:	b918      	cbnz	r0, 3822 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x12>
    381a:	4803      	ldr	r0, [pc, #12]	; (3828 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x18>)
    381c:	7800      	ldrb	r0, [r0, #0]
    381e:	2800      	cmp	r0, #0
    3820:	d000      	beq.n	3824 <sym_LIY23QT3GHIV7NCGJ6ZW6LB2ZUSI56CIFCL6HUY+0x14>
    3822:	2001      	movs	r0, #1
    3824:	4770      	bx	lr
    3826:	0000      	.short	0x0000
    3828:	20000284 	.word	0x20000284

0000382c <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ>:
    382c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    3830:	2101      	movs	r1, #1
    3832:	6041      	str	r1, [r0, #4]
    3834:	2100      	movs	r1, #0
    3836:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    383a:	4801      	ldr	r0, [pc, #4]	; (3840 <sym_XK3TMLCZALCYYWGULGHQIRSOBMPIIPJ7HEMOZIQ+0x14>)
    383c:	7001      	strb	r1, [r0, #0]
    383e:	4770      	bx	lr
    3840:	20000284 	.word	0x20000284

00003844 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI>:
    3844:	4802      	ldr	r0, [pc, #8]	; (3850 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0xc>)
    3846:	6800      	ldr	r0, [r0, #0]
    3848:	f000 0003 	and.w	r0, r0, #3
    384c:	4770      	bx	lr
    384e:	0000      	.short	0x0000
    3850:	4000041c 	.word	0x4000041c
    3854:	b510      	push	{r4, lr}
    3856:	b131      	cbz	r1, 3866 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x22>
    3858:	2901      	cmp	r1, #1
    385a:	d007      	beq.n	386c <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x28>
    385c:	f240 3102 	movw	r1, #770	; 0x302
    3860:	a005      	add	r0, pc, #20	; (adr r0, 3878 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x34>)
    3862:	f000 f821 	bl	38a8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>
    3866:	f8d0 0414 	ldr.w	r0, [r0, #1044]	; 0x414
    386a:	e001      	b.n	3870 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x2c>
    386c:	f8d0 0408 	ldr.w	r0, [r0, #1032]	; 0x408
    3870:	f000 0001 	and.w	r0, r0, #1
    3874:	bd10      	pop	{r4, pc}
    3876:	0000      	.short	0x0000
    3878:	5f66726e 	.word	0x5f66726e
    387c:	636f6c63 	.word	0x636f6c63
    3880:	00682e6b 	.word	0x00682e6b
    3884:	f3bf 8f4f 	dsb	sy
    3888:	4805      	ldr	r0, [pc, #20]	; (38a0 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x5c>)
    388a:	6801      	ldr	r1, [r0, #0]
    388c:	4a05      	ldr	r2, [pc, #20]	; (38a4 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x60>)
    388e:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3892:	4311      	orrs	r1, r2
    3894:	6001      	str	r1, [r0, #0]
    3896:	f3bf 8f4f 	dsb	sy
    389a:	bf00      	nop
    389c:	e7fd      	b.n	389a <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x56>
    389e:	0000      	.short	0x0000
    38a0:	e000ed0c 	.word	0xe000ed0c
    38a4:	05fa0004 	.word	0x05fa0004

000038a8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI>:
    38a8:	b672      	cpsid	i
    38aa:	4a03      	ldr	r2, [pc, #12]	; (38b8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x10>)
    38ac:	6852      	ldr	r2, [r2, #4]
    38ae:	b102      	cbz	r2, 38b2 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0xa>
    38b0:	4790      	blx	r2
    38b2:	f7ff ffe7 	bl	3884 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    38b6:	0000      	.short	0x0000
    38b8:	2000004c 	.word	0x2000004c
    38bc:	4806      	ldr	r0, [pc, #24]	; (38d8 <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x30>)
    38be:	b510      	push	{r4, lr}
    38c0:	2100      	movs	r1, #0
    38c2:	6001      	str	r1, [r0, #0]
    38c4:	2101      	movs	r1, #1
    38c6:	6001      	str	r1, [r0, #0]
    38c8:	4608      	mov	r0, r1
    38ca:	f008 fe34 	bl	c536 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    38ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38d2:	2001      	movs	r0, #1
    38d4:	f008 be22 	b.w	c51c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38d8:	40001ffc 	.word	0x40001ffc
    38dc:	4807      	ldr	r0, [pc, #28]	; (38fc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x54>)
    38de:	b510      	push	{r4, lr}
    38e0:	2101      	movs	r1, #1
    38e2:	6041      	str	r1, [r0, #4]
    38e4:	1e89      	subs	r1, r1, #2
    38e6:	f8c0 1308 	str.w	r1, [r0, #776]	; 0x308
    38ea:	200c      	movs	r0, #12
    38ec:	f008 fe23 	bl	c536 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2e>
    38f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    38f4:	200c      	movs	r0, #12
    38f6:	f008 be11 	b.w	c51c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    38fa:	0000      	.short	0x0000
    38fc:	4000c000 	.word	0x4000c000

00003900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
    3900:	b50e      	push	{r1, r2, r3, lr}
    3902:	b672      	cpsid	i
    3904:	4a0f      	ldr	r2, [pc, #60]	; (3944 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
    3906:	6855      	ldr	r5, [r2, #4]
    3908:	b1d5      	cbz	r5, 3940 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
    390a:	2200      	movs	r2, #0
    390c:	4603      	mov	r3, r0
    390e:	466e      	mov	r6, sp
    3910:	240a      	movs	r4, #10
    3912:	e003      	b.n	391c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
    3914:	fbb0 f0f4 	udiv	r0, r0, r4
    3918:	1c52      	adds	r2, r2, #1
    391a:	b2d2      	uxtb	r2, r2
    391c:	2800      	cmp	r0, #0
    391e:	d1f9      	bne.n	3914 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
    3920:	54b0      	strb	r0, [r6, r2]
    3922:	e009      	b.n	3938 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
    3924:	fbb3 f0f4 	udiv	r0, r3, r4
    3928:	fb04 3010 	mls	r0, r4, r0, r3
    392c:	fbb3 f3f4 	udiv	r3, r3, r4
    3930:	1e52      	subs	r2, r2, #1
    3932:	b2d2      	uxtb	r2, r2
    3934:	3030      	adds	r0, #48	; 0x30
    3936:	54b0      	strb	r0, [r6, r2]
    3938:	2a00      	cmp	r2, #0
    393a:	d1f3      	bne.n	3924 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
    393c:	4630      	mov	r0, r6
    393e:	47a8      	blx	r5
    3940:	f7ff ffa0 	bl	3884 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x40>
    3944:	2000004c 	.word	0x2000004c

00003948 <mpsl_init>:
    3948:	b570      	push	{r4, r5, r6, lr}
    394a:	4c17      	ldr	r4, [pc, #92]	; (39a8 <mpsl_init+0x60>)
    394c:	4606      	mov	r6, r0
    394e:	460d      	mov	r5, r1
    3950:	7860      	ldrb	r0, [r4, #1]
    3952:	b110      	cbz	r0, 395a <mpsl_init+0x12>
    3954:	f04f 30ff 	mov.w	r0, #4294967295
    3958:	bd70      	pop	{r4, r5, r6, pc}
    395a:	b906      	cbnz	r6, 395e <mpsl_init+0x16>
    395c:	4e13      	ldr	r6, [pc, #76]	; (39ac <mpsl_init+0x64>)
    395e:	6062      	str	r2, [r4, #4]
    3960:	7025      	strb	r5, [r4, #0]
    3962:	f7ff ffab 	bl	38bc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x14>
    3966:	f7ff ffb9 	bl	38dc <sym_4JLKMM32SOXCP6XBYAWZDUIMUJIYXLKKDBOFLHI+0x34>
    396a:	4630      	mov	r0, r6
    396c:	f7ff fe9c 	bl	36a8 <sym_FYHKZOVAJN6VDDHY43FT7PF4YLRDHWRTEWHFG6I>
    3970:	0006      	movs	r6, r0
    3972:	d1f1      	bne.n	3958 <mpsl_init+0x10>
    3974:	f7fe ff00 	bl	2778 <sym_ZC6NJBPUISWILQK6OTOBMJVVUT63JRIDGH5WNCY>
    3978:	f7ff fef6 	bl	3768 <sym_A4JUKJUCTJV55V2WD6TXU63VO5GAMB4XA4EE56Q>
    397c:	f008 fd28 	bl	c3d0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>
    3980:	4628      	mov	r0, r5
    3982:	f008 fdcb 	bl	c51c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x14>
    3986:	2001      	movs	r0, #1
    3988:	2d00      	cmp	r5, #0
    398a:	db09      	blt.n	39a0 <mpsl_init+0x58>
    398c:	f005 011f 	and.w	r1, r5, #31
    3990:	fa00 f101 	lsl.w	r1, r0, r1
    3994:	096a      	lsrs	r2, r5, #5
    3996:	0092      	lsls	r2, r2, #2
    3998:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    399c:	f8c2 1100 	str.w	r1, [r2, #256]	; 0x100
    39a0:	7060      	strb	r0, [r4, #1]
    39a2:	4630      	mov	r0, r6
    39a4:	bd70      	pop	{r4, r5, r6, pc}
    39a6:	0000      	.short	0x0000
    39a8:	2000004c 	.word	0x2000004c
    39ac:	0000c558 	.word	0x0000c558

000039b0 <mpsl_is_initialized>:
    39b0:	4801      	ldr	r0, [pc, #4]	; (39b8 <mpsl_is_initialized+0x8>)
    39b2:	7840      	ldrb	r0, [r0, #1]
    39b4:	4770      	bx	lr
    39b6:	0000      	.short	0x0000
    39b8:	2000004c 	.word	0x2000004c

000039bc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>:
    39bc:	4807      	ldr	r0, [pc, #28]	; (39dc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x20>)
    39be:	f990 0000 	ldrsb.w	r0, [r0]
    39c2:	2800      	cmp	r0, #0
    39c4:	db09      	blt.n	39da <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ+0x1e>
    39c6:	f000 021f 	and.w	r2, r0, #31
    39ca:	2101      	movs	r1, #1
    39cc:	4091      	lsls	r1, r2
    39ce:	0940      	lsrs	r0, r0, #5
    39d0:	0080      	lsls	r0, r0, #2
    39d2:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    39d6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    39da:	4770      	bx	lr
    39dc:	2000004c 	.word	0x2000004c

000039e0 <mpsl_temperature_get>:
    39e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    39e4:	2601      	movs	r6, #1
    39e6:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
    39ea:	0331      	lsls	r1, r6, #12
    39ec:	f04f 0800 	mov.w	r8, #0
    39f0:	4640      	mov	r0, r8
    39f2:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
    39f6:	f3bf 8f4f 	dsb	sy
    39fa:	f3bf 8f6f 	isb	sy
    39fe:	4c16      	ldr	r4, [pc, #88]	; (3a58 <mpsl_temperature_get+0x78>)
    3a00:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    3a04:	200c      	movs	r0, #12
    3a06:	f008 fdb5 	bl	c574 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3a0a:	4d14      	ldr	r5, [pc, #80]	; (3a5c <mpsl_temperature_get+0x7c>)
    3a0c:	6828      	ldr	r0, [r5, #0]
    3a0e:	43c0      	mvns	r0, r0
    3a10:	f340 1700 	sbfx	r7, r0, #4, #1
    3a14:	6828      	ldr	r0, [r5, #0]
    3a16:	f040 0010 	orr.w	r0, r0, #16
    3a1a:	6028      	str	r0, [r5, #0]
    3a1c:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    3a20:	6026      	str	r6, [r4, #0]
    3a22:	1c7f      	adds	r7, r7, #1
    3a24:	e002      	b.n	3a2c <mpsl_temperature_get+0x4c>
    3a26:	bf00      	nop
    3a28:	f000 f890 	bl	3b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    3a2c:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
    3a30:	2800      	cmp	r0, #0
    3a32:	d0f9      	beq.n	3a28 <mpsl_temperature_get+0x48>
    3a34:	b91f      	cbnz	r7, 3a3e <mpsl_temperature_get+0x5e>
    3a36:	6828      	ldr	r0, [r5, #0]
    3a38:	f020 0010 	bic.w	r0, r0, #16
    3a3c:	6028      	str	r0, [r5, #0]
    3a3e:	4808      	ldr	r0, [pc, #32]	; (3a60 <mpsl_temperature_get+0x80>)
    3a40:	6805      	ldr	r5, [r0, #0]
    3a42:	6066      	str	r6, [r4, #4]
    3a44:	f8c4 6308 	str.w	r6, [r4, #776]	; 0x308
    3a48:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    3a4c:	200c      	movs	r0, #12
    3a4e:	f008 fd91 	bl	c574 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x6c>
    3a52:	4628      	mov	r0, r5
    3a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a58:	4000c000 	.word	0x4000c000
    3a5c:	e000ed10 	.word	0xe000ed10
    3a60:	4000c508 	.word	0x4000c508

00003a64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>:
    3a64:	b510      	push	{r4, lr}
    3a66:	4602      	mov	r2, r0
    3a68:	2005      	movs	r0, #5
    3a6a:	490c      	ldr	r1, [pc, #48]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a6c:	e004      	b.n	3a78 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x14>
    3a6e:	bf00      	nop
    3a70:	eb01 03c0 	add.w	r3, r1, r0, lsl #3
    3a74:	791b      	ldrb	r3, [r3, #4]
    3a76:	b133      	cbz	r3, 3a86 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0x22>
    3a78:	1e40      	subs	r0, r0, #1
    3a7a:	b2c0      	uxtb	r0, r0
    3a7c:	d2f8      	bcs.n	3a70 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA+0xc>
    3a7e:	2148      	movs	r1, #72	; 0x48
    3a80:	2069      	movs	r0, #105	; 0x69
    3a82:	f7ff ff3d 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3a86:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
    3a8a:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    3a8e:	2200      	movs	r2, #0
    3a90:	714a      	strb	r2, [r1, #5]
    3a92:	718a      	strb	r2, [r1, #6]
    3a94:	2201      	movs	r2, #1
    3a96:	710a      	strb	r2, [r1, #4]
    3a98:	bd10      	pop	{r4, pc}
    3a9a:	0000      	.short	0x0000
    3a9c:	20000f40 	.word	0x20000f40

00003aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>:
    3aa0:	b510      	push	{r4, lr}
    3aa2:	2805      	cmp	r0, #5
    3aa4:	d301      	bcc.n	3aaa <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0xa>
    3aa6:	2158      	movs	r1, #88	; 0x58
    3aa8:	e006      	b.n	3ab8 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x18>
    3aaa:	490a      	ldr	r1, [pc, #40]	; (3ad4 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x34>)
    3aac:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    3ab0:	7901      	ldrb	r1, [r0, #4]
    3ab2:	2901      	cmp	r1, #1
    3ab4:	d003      	beq.n	3abe <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x1e>
    3ab6:	2159      	movs	r1, #89	; 0x59
    3ab8:	2069      	movs	r0, #105	; 0x69
    3aba:	f7ff ff21 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    3abe:	7941      	ldrb	r1, [r0, #5]
    3ac0:	7982      	ldrb	r2, [r0, #6]
    3ac2:	1c49      	adds	r1, r1, #1
    3ac4:	b2c9      	uxtb	r1, r1
    3ac6:	428a      	cmp	r2, r1
    3ac8:	d000      	beq.n	3acc <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q+0x2c>
    3aca:	7141      	strb	r1, [r0, #5]
    3acc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ad0:	f7ff bf74 	b.w	39bc <sym_XR32KBBIVYD5OVRJM2RBQ57EGCCM2C3F5IY6OHQ>
    3ad4:	20000f40 	.word	0x20000f40

00003ad8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>:
    3ad8:	b570      	push	{r4, r5, r6, lr}
    3ada:	2505      	movs	r5, #5
    3adc:	4e0e      	ldr	r6, [pc, #56]	; (3b18 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x40>)
    3ade:	4c0f      	ldr	r4, [pc, #60]	; (3b1c <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x44>)
    3ae0:	e016      	b.n	3b10 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3ae2:	7821      	ldrb	r1, [r4, #0]
    3ae4:	eb06 00c1 	add.w	r0, r6, r1, lsl #3
    3ae8:	7902      	ldrb	r2, [r0, #4]
    3aea:	2a01      	cmp	r2, #1
    3aec:	d108      	bne.n	3b00 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3aee:	7942      	ldrb	r2, [r0, #5]
    3af0:	7983      	ldrb	r3, [r0, #6]
    3af2:	429a      	cmp	r2, r3
    3af4:	d004      	beq.n	3b00 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x28>
    3af6:	7942      	ldrb	r2, [r0, #5]
    3af8:	7182      	strb	r2, [r0, #6]
    3afa:	f856 0031 	ldr.w	r0, [r6, r1, lsl #3]
    3afe:	4780      	blx	r0
    3b00:	7820      	ldrb	r0, [r4, #0]
    3b02:	1c40      	adds	r0, r0, #1
    3b04:	b2c0      	uxtb	r0, r0
    3b06:	7020      	strb	r0, [r4, #0]
    3b08:	2805      	cmp	r0, #5
    3b0a:	d301      	bcc.n	3b10 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0x38>
    3b0c:	2000      	movs	r0, #0
    3b0e:	7020      	strb	r0, [r4, #0]
    3b10:	1e6d      	subs	r5, r5, #1
    3b12:	b2ed      	uxtb	r5, r5
    3b14:	d2e5      	bcs.n	3ae2 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ+0xa>
    3b16:	bd70      	pop	{r4, r5, r6, pc}
    3b18:	20000f40 	.word	0x20000f40
    3b1c:	20000285 	.word	0x20000285

00003b20 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY>:
    3b20:	b500      	push	{lr}
    3b22:	f008 fd56 	bl	c5d2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    3b26:	b940      	cbnz	r0, 3b3a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b28:	f008 fd5d 	bl	c5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    3b2c:	b928      	cbnz	r0, 3b3a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b2e:	f008 fd71 	bl	c614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    3b32:	b910      	cbnz	r0, 3b3a <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1a>
    3b34:	f008 fd82 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b38:	b108      	cbz	r0, 3b3e <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x1e>
    3b3a:	4802      	ldr	r0, [pc, #8]	; (3b44 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x24>)
    3b3c:	bd00      	pop	{pc}
    3b3e:	4802      	ldr	r0, [pc, #8]	; (3b48 <sym_4WL3TG4Q7RCTFEMPQ2CQTOL4PAKUULDPJUM5DTY+0x28>)
    3b40:	bd00      	pop	{pc}
    3b42:	0000      	.short	0x0000
    3b44:	4000050c 	.word	0x4000050c
    3b48:	4001e700 	.word	0x4001e700

00003b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>:
    3b4c:	b510      	push	{r4, lr}
    3b4e:	f008 fd75 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    3b52:	b330      	cbz	r0, 3ba2 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x56>
    3b54:	f3ef 8010 	mrs	r0, PRIMASK
    3b58:	b1c8      	cbz	r0, 3b8e <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x42>
    3b5a:	2100      	movs	r1, #0
    3b5c:	b672      	cpsid	i
    3b5e:	4812      	ldr	r0, [pc, #72]	; (3ba8 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x5c>)
    3b60:	6802      	ldr	r2, [r0, #0]
    3b62:	6803      	ldr	r3, [r0, #0]
    3b64:	f3c2 1200 	ubfx	r2, r2, #4, #1
    3b68:	f043 0310 	orr.w	r3, r3, #16
    3b6c:	6003      	str	r3, [r0, #0]
    3b6e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    3b72:	f8d3 4200 	ldr.w	r4, [r3, #512]	; 0x200
    3b76:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
    3b7a:	431c      	orrs	r4, r3
    3b7c:	d000      	beq.n	3b80 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x34>
    3b7e:	bf40      	sev
    3b80:	bf20      	wfe
    3b82:	bf00      	nop
    3b84:	bf00      	nop
    3b86:	bf00      	nop
    3b88:	bf00      	nop
    3b8a:	b112      	cbz	r2, 3b92 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x46>
    3b8c:	e005      	b.n	3b9a <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x4e>
    3b8e:	2101      	movs	r1, #1
    3b90:	e7e4      	b.n	3b5c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x10>
    3b92:	6802      	ldr	r2, [r0, #0]
    3b94:	f022 0210 	bic.w	r2, r2, #16
    3b98:	6002      	str	r2, [r0, #0]
    3b9a:	2900      	cmp	r1, #0
    3b9c:	d000      	beq.n	3ba0 <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA+0x54>
    3b9e:	b662      	cpsie	i
    3ba0:	bd10      	pop	{r4, pc}
    3ba2:	bf20      	wfe
    3ba4:	bd10      	pop	{r4, pc}
    3ba6:	0000      	.short	0x0000
    3ba8:	e000ed10 	.word	0xe000ed10

00003bac <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
    3bac:	0000c8ad 0000c8c9 0000c8b7 0000c8c3     ................
    3bbc:	0000c8b1 0000c8ab 0000c8a9 0000c8cf     ................
    3bcc:	0000c8bd 0000c8a3 0000c89b 0000c89f     ................
    3bdc:	0000c895                                ....

00003be0 <mpsl_fem_disable>:
    3be0:	4801      	ldr	r0, [pc, #4]	; (3be8 <mpsl_fem_disable+0x8>)
    3be2:	6800      	ldr	r0, [r0, #0]
    3be4:	6800      	ldr	r0, [r0, #0]
    3be6:	4700      	bx	r0
    3be8:	20000054 	.word	0x20000054

00003bec <mpsl_fem_lna_configuration_clear>:
    3bec:	4801      	ldr	r0, [pc, #4]	; (3bf4 <mpsl_fem_lna_configuration_clear+0x8>)
    3bee:	6800      	ldr	r0, [r0, #0]
    3bf0:	6900      	ldr	r0, [r0, #16]
    3bf2:	4700      	bx	r0
    3bf4:	20000054 	.word	0x20000054

00003bf8 <mpsl_fem_lna_configuration_set>:
    3bf8:	4a01      	ldr	r2, [pc, #4]	; (3c00 <mpsl_fem_lna_configuration_set+0x8>)
    3bfa:	6812      	ldr	r2, [r2, #0]
    3bfc:	6892      	ldr	r2, [r2, #8]
    3bfe:	4710      	bx	r2
    3c00:	20000054 	.word	0x20000054

00003c04 <mpsl_fem_pa_configuration_clear>:
    3c04:	4801      	ldr	r0, [pc, #4]	; (3c0c <mpsl_fem_pa_configuration_clear+0x8>)
    3c06:	6800      	ldr	r0, [r0, #0]
    3c08:	68c0      	ldr	r0, [r0, #12]
    3c0a:	4700      	bx	r0
    3c0c:	20000054 	.word	0x20000054

00003c10 <mpsl_fem_pa_configuration_set>:
    3c10:	4a01      	ldr	r2, [pc, #4]	; (3c18 <mpsl_fem_pa_configuration_set+0x8>)
    3c12:	6812      	ldr	r2, [r2, #0]
    3c14:	6852      	ldr	r2, [r2, #4]
    3c16:	4710      	bx	r2
    3c18:	20000054 	.word	0x20000054

00003c1c <mpsl_fem_pa_is_configured>:
    3c1c:	4901      	ldr	r1, [pc, #4]	; (3c24 <mpsl_fem_pa_is_configured+0x8>)
    3c1e:	6809      	ldr	r1, [r1, #0]
    3c20:	6a09      	ldr	r1, [r1, #32]
    3c22:	4708      	bx	r1
    3c24:	20000054 	.word	0x20000054

00003c28 <mpsl_fem_device_config_254_apply_get>:
    3c28:	4801      	ldr	r0, [pc, #4]	; (3c30 <mpsl_fem_device_config_254_apply_get+0x8>)
    3c2a:	7800      	ldrb	r0, [r0, #0]
    3c2c:	4770      	bx	lr
    3c2e:	0000      	.short	0x0000
    3c30:	20000286 	.word	0x20000286
    3c34:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    3c36:	4c17      	ldr	r4, [pc, #92]	; (3c94 <mpsl_fem_device_config_254_apply_get+0x6c>)
    3c38:	7a20      	ldrb	r0, [r4, #8]
    3c3a:	2802      	cmp	r0, #2
    3c3c:	d200      	bcs.n	3c40 <mpsl_fem_device_config_254_apply_get+0x18>
    3c3e:	2002      	movs	r0, #2
    3c40:	f88d 0001 	strb.w	r0, [sp, #1]
    3c44:	79e0      	ldrb	r0, [r4, #7]
    3c46:	2803      	cmp	r0, #3
    3c48:	d200      	bcs.n	3c4c <mpsl_fem_device_config_254_apply_get+0x24>
    3c4a:	2003      	movs	r0, #3
    3c4c:	f88d 0000 	strb.w	r0, [sp]
    3c50:	79a0      	ldrb	r0, [r4, #6]
    3c52:	f8ad 0004 	strh.w	r0, [sp, #4]
    3c56:	7960      	ldrb	r0, [r4, #5]
    3c58:	f8ad 0002 	strh.w	r0, [sp, #2]
    3c5c:	4668      	mov	r0, sp
    3c5e:	f006 ffeb 	bl	ac38 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>
    3c62:	b108      	cbz	r0, 3c68 <mpsl_fem_device_config_254_apply_get+0x40>
    3c64:	2184      	movs	r1, #132	; 0x84
    3c66:	e010      	b.n	3c8a <mpsl_fem_device_config_254_apply_get+0x62>
    3c68:	68e0      	ldr	r0, [r4, #12]
    3c6a:	9002      	str	r0, [sp, #8]
    3c6c:	a802      	add	r0, sp, #8
    3c6e:	f006 fff9 	bl	ac64 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>
    3c72:	b108      	cbz	r0, 3c78 <mpsl_fem_device_config_254_apply_get+0x50>
    3c74:	2188      	movs	r1, #136	; 0x88
    3c76:	e008      	b.n	3c8a <mpsl_fem_device_config_254_apply_get+0x62>
    3c78:	4807      	ldr	r0, [pc, #28]	; (3c98 <mpsl_fem_device_config_254_apply_get+0x70>)
    3c7a:	6800      	ldr	r0, [r0, #0]
    3c7c:	9003      	str	r0, [sp, #12]
    3c7e:	a803      	add	r0, sp, #12
    3c80:	f00b facb 	bl	f21a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    3c84:	2800      	cmp	r0, #0
    3c86:	d003      	beq.n	3c90 <mpsl_fem_device_config_254_apply_get+0x68>
    3c88:	218c      	movs	r1, #140	; 0x8c
    3c8a:	2003      	movs	r0, #3
    3c8c:	f000 f918 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3c90:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    3c92:	0000      	.short	0x0000
    3c94:	20000f68 	.word	0x20000f68
    3c98:	00003fac 	.word	0x00003fac
    3c9c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    3c9e:	4604      	mov	r4, r0
    3ca0:	460e      	mov	r6, r1
    3ca2:	f100 0003 	add.w	r0, r0, #3
    3ca6:	f020 0003 	bic.w	r0, r0, #3
    3caa:	f04f 0100 	mov.w	r1, #0
    3cae:	e9cd 0100 	strd	r0, r1, [sp]
    3cb2:	7831      	ldrb	r1, [r6, #0]
    3cb4:	0015      	movs	r5, r2
    3cb6:	f88d 1005 	strb.w	r1, [sp, #5]
    3cba:	d000      	beq.n	3cbe <mpsl_fem_device_config_254_apply_get+0x96>
    3cbc:	2000      	movs	r0, #0
    3cbe:	a901      	add	r1, sp, #4
    3cc0:	f000 faee 	bl	42a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>
    3cc4:	9900      	ldr	r1, [sp, #0]
    3cc6:	4408      	add	r0, r1
    3cc8:	490c      	ldr	r1, [pc, #48]	; (3cfc <mpsl_fem_device_config_254_apply_get+0xd4>)
    3cca:	9000      	str	r0, [sp, #0]
    3ccc:	78c9      	ldrb	r1, [r1, #3]
    3cce:	b149      	cbz	r1, 3ce4 <mpsl_fem_device_config_254_apply_get+0xbc>
    3cd0:	7c31      	ldrb	r1, [r6, #16]
    3cd2:	b139      	cbz	r1, 3ce4 <mpsl_fem_device_config_254_apply_get+0xbc>
    3cd4:	2225      	movs	r2, #37	; 0x25
    3cd6:	b105      	cbz	r5, 3cda <mpsl_fem_device_config_254_apply_get+0xb2>
    3cd8:	2000      	movs	r0, #0
    3cda:	f000 fd29 	bl	4730 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    3cde:	9900      	ldr	r1, [sp, #0]
    3ce0:	4408      	add	r0, r1
    3ce2:	9000      	str	r0, [sp, #0]
    3ce4:	462a      	mov	r2, r5
    3ce6:	4631      	mov	r1, r6
    3ce8:	4668      	mov	r0, sp
    3cea:	f008 fdf2 	bl	c8d2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xfe>
    3cee:	9800      	ldr	r0, [sp, #0]
    3cf0:	1dc0      	adds	r0, r0, #7
    3cf2:	f020 0007 	bic.w	r0, r0, #7
    3cf6:	9000      	str	r0, [sp, #0]
    3cf8:	1b00      	subs	r0, r0, r4
    3cfa:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    3cfc:	20000058 	.word	0x20000058

00003d00 <sdc_build_revision_get>:
    3d00:	b510      	push	{r4, lr}
    3d02:	b128      	cbz	r0, 3d10 <sdc_build_revision_get+0x10>
    3d04:	2214      	movs	r2, #20
    3d06:	4904      	ldr	r1, [pc, #16]	; (3d18 <sdc_build_revision_get+0x18>)
    3d08:	f008 fcea 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3d0c:	2000      	movs	r0, #0
    3d0e:	bd10      	pop	{r4, pc}
    3d10:	f06f 0015 	mvn.w	r0, #21
    3d14:	bd10      	pop	{r4, pc}
    3d16:	0000      	.short	0x0000
    3d18:	00003fc8 	.word	0x00003fc8

00003d1c <sdc_cfg_set>:
    3d1c:	b570      	push	{r4, r5, r6, lr}
    3d1e:	0003      	movs	r3, r0
    3d20:	f06f 002c 	mvn.w	r0, #44	; 0x2c
    3d24:	d103      	bne.n	3d2e <sdc_cfg_set+0x12>
    3d26:	4c2a      	ldr	r4, [pc, #168]	; (3dd0 <sdc_cfg_set+0xb4>)
    3d28:	7863      	ldrb	r3, [r4, #1]
    3d2a:	b10b      	cbz	r3, 3d30 <sdc_cfg_set+0x14>
    3d2c:	1180      	asrs	r0, r0, #6
    3d2e:	bd70      	pop	{r4, r5, r6, pc}
    3d30:	b319      	cbz	r1, 3d7a <sdc_cfg_set+0x5e>
    3d32:	f06f 0515 	mvn.w	r5, #21
    3d36:	b38a      	cbz	r2, 3d9c <sdc_cfg_set+0x80>
    3d38:	4b26      	ldr	r3, [pc, #152]	; (3dd4 <sdc_cfg_set+0xb8>)
    3d3a:	290c      	cmp	r1, #12
    3d3c:	d243      	bcs.n	3dc6 <sdc_cfg_set+0xaa>
    3d3e:	e8df f001 	tbb	[pc, r1]
    3d42:	0642      	.short	0x0642
    3d44:	13100c09 	.word	0x13100c09
    3d48:	2818251d 	.word	0x2818251d
    3d4c:	332e      	.short	0x332e
    3d4e:	7810      	ldrb	r0, [r2, #0]
    3d50:	7018      	strb	r0, [r3, #0]
    3d52:	e02d      	b.n	3db0 <sdc_cfg_set+0x94>
    3d54:	7810      	ldrb	r0, [r2, #0]
    3d56:	7058      	strb	r0, [r3, #1]
    3d58:	e02a      	b.n	3db0 <sdc_cfg_set+0x94>
    3d5a:	6810      	ldr	r0, [r2, #0]
    3d5c:	f8c3 0005 	str.w	r0, [r3, #5]
    3d60:	e026      	b.n	3db0 <sdc_cfg_set+0x94>
    3d62:	6810      	ldr	r0, [r2, #0]
    3d64:	60d8      	str	r0, [r3, #12]
    3d66:	e023      	b.n	3db0 <sdc_cfg_set+0x94>
    3d68:	7811      	ldrb	r1, [r2, #0]
    3d6a:	2900      	cmp	r1, #0
    3d6c:	d1df      	bne.n	3d2e <sdc_cfg_set+0x12>
    3d6e:	7099      	strb	r1, [r3, #2]
    3d70:	e01e      	b.n	3db0 <sdc_cfg_set+0x94>
    3d72:	7811      	ldrb	r1, [r2, #0]
    3d74:	2900      	cmp	r1, #0
    3d76:	d1da      	bne.n	3d2e <sdc_cfg_set+0x12>
    3d78:	70d9      	strb	r1, [r3, #3]
    3d7a:	e019      	b.n	3db0 <sdc_cfg_set+0x94>
    3d7c:	78e0      	ldrb	r0, [r4, #3]
    3d7e:	b110      	cbz	r0, 3d86 <sdc_cfg_set+0x6a>
    3d80:	7810      	ldrb	r0, [r2, #0]
    3d82:	2802      	cmp	r0, #2
    3d84:	d31f      	bcc.n	3dc6 <sdc_cfg_set+0xaa>
    3d86:	7810      	ldrb	r0, [r2, #0]
    3d88:	7418      	strb	r0, [r3, #16]
    3d8a:	e011      	b.n	3db0 <sdc_cfg_set+0x94>
    3d8c:	8810      	ldrh	r0, [r2, #0]
    3d8e:	8258      	strh	r0, [r3, #18]
    3d90:	e00e      	b.n	3db0 <sdc_cfg_set+0x94>
    3d92:	7811      	ldrb	r1, [r2, #0]
    3d94:	2900      	cmp	r1, #0
    3d96:	d1ca      	bne.n	3d2e <sdc_cfg_set+0x12>
    3d98:	7119      	strb	r1, [r3, #4]
    3d9a:	e009      	b.n	3db0 <sdc_cfg_set+0x94>
    3d9c:	e013      	b.n	3dc6 <sdc_cfg_set+0xaa>
    3d9e:	7810      	ldrb	r0, [r2, #0]
    3da0:	2802      	cmp	r0, #2
    3da2:	d310      	bcc.n	3dc6 <sdc_cfg_set+0xaa>
    3da4:	7518      	strb	r0, [r3, #20]
    3da6:	e003      	b.n	3db0 <sdc_cfg_set+0x94>
    3da8:	7811      	ldrb	r1, [r2, #0]
    3daa:	2900      	cmp	r1, #0
    3dac:	d1bf      	bne.n	3d2e <sdc_cfg_set+0x12>
    3dae:	7559      	strb	r1, [r3, #21]
    3db0:	2201      	movs	r2, #1
    3db2:	4908      	ldr	r1, [pc, #32]	; (3dd4 <sdc_cfg_set+0xb8>)
    3db4:	2000      	movs	r0, #0
    3db6:	f7ff ff71 	bl	3c9c <mpsl_fem_device_config_254_apply_get+0x74>
    3dba:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    3dbe:	db04      	blt.n	3dca <sdc_cfg_set+0xae>
    3dc0:	f06f 000b 	mvn.w	r0, #11
    3dc4:	bd70      	pop	{r4, r5, r6, pc}
    3dc6:	4628      	mov	r0, r5
    3dc8:	bd70      	pop	{r4, r5, r6, pc}
    3dca:	2101      	movs	r1, #1
    3dcc:	70a1      	strb	r1, [r4, #2]
    3dce:	bd70      	pop	{r4, r5, r6, pc}
    3dd0:	20000058 	.word	0x20000058
    3dd4:	20000f68 	.word	0x20000f68

00003dd8 <sdc_enable>:
    3dd8:	b570      	push	{r4, r5, r6, lr}
    3dda:	460c      	mov	r4, r1
    3ddc:	0005      	movs	r5, r0
    3dde:	d019      	beq.n	3e14 <sdc_enable+0x3c>
    3de0:	b1c4      	cbz	r4, 3e14 <sdc_enable+0x3c>
    3de2:	f000 f925 	bl	4030 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>
    3de6:	b1c0      	cbz	r0, 3e1a <sdc_enable+0x42>
    3de8:	4628      	mov	r0, r5
    3dea:	f7ff fe3b 	bl	3a64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    3dee:	4d0c      	ldr	r5, [pc, #48]	; (3e20 <sdc_enable+0x48>)
    3df0:	2200      	movs	r2, #0
    3df2:	490c      	ldr	r1, [pc, #48]	; (3e24 <sdc_enable+0x4c>)
    3df4:	7028      	strb	r0, [r5, #0]
    3df6:	4620      	mov	r0, r4
    3df8:	f7ff ff50 	bl	3c9c <mpsl_fem_device_config_254_apply_get+0x74>
    3dfc:	f00b fe0e 	bl	fa1c <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>
    3e00:	2100      	movs	r1, #0
    3e02:	7828      	ldrb	r0, [r5, #0]
    3e04:	f007 f912 	bl	b02c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>
    3e08:	f7ff ff14 	bl	3c34 <mpsl_fem_device_config_254_apply_get+0xc>
    3e0c:	2001      	movs	r0, #1
    3e0e:	7068      	strb	r0, [r5, #1]
    3e10:	2000      	movs	r0, #0
    3e12:	bd70      	pop	{r4, r5, r6, pc}
    3e14:	f06f 0015 	mvn.w	r0, #21
    3e18:	bd70      	pop	{r4, r5, r6, pc}
    3e1a:	f04f 30ff 	mov.w	r0, #4294967295
    3e1e:	bd70      	pop	{r4, r5, r6, pc}
    3e20:	20000058 	.word	0x20000058
    3e24:	20000f68 	.word	0x20000f68

00003e28 <sdc_init>:
    3e28:	b530      	push	{r4, r5, lr}
    3e2a:	b087      	sub	sp, #28
    3e2c:	0005      	movs	r5, r0
    3e2e:	d00c      	beq.n	3e4a <sdc_init+0x22>
    3e30:	f7ff fdbe 	bl	39b0 <mpsl_is_initialized>
    3e34:	f04f 34ff 	mov.w	r4, #4294967295
    3e38:	b120      	cbz	r0, 3e44 <sdc_init+0x1c>
    3e3a:	f7ff fc87 	bl	374c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    3e3e:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
    3e42:	d905      	bls.n	3e50 <sdc_init+0x28>
    3e44:	4620      	mov	r0, r4
    3e46:	b007      	add	sp, #28
    3e48:	bd30      	pop	{r4, r5, pc}
    3e4a:	f06f 0015 	mvn.w	r0, #21
    3e4e:	e7fa      	b.n	3e46 <sdc_init+0x1e>
    3e50:	4c15      	ldr	r4, [pc, #84]	; (3ea8 <sdc_init+0x80>)
    3e52:	4816      	ldr	r0, [pc, #88]	; (3eac <sdc_init+0x84>)
    3e54:	6065      	str	r5, [r4, #4]
    3e56:	f000 f9e5 	bl	4224 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>
    3e5a:	2000      	movs	r0, #0
    3e5c:	7060      	strb	r0, [r4, #1]
    3e5e:	70a0      	strb	r0, [r4, #2]
    3e60:	70e0      	strb	r0, [r4, #3]
    3e62:	4601      	mov	r1, r0
    3e64:	2218      	movs	r2, #24
    3e66:	4668      	mov	r0, sp
    3e68:	f008 fcb4 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    3e6c:	2218      	movs	r2, #24
    3e6e:	4910      	ldr	r1, [pc, #64]	; (3eb0 <sdc_init+0x88>)
    3e70:	4668      	mov	r0, sp
    3e72:	f008 fc35 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3e76:	2218      	movs	r2, #24
    3e78:	4669      	mov	r1, sp
    3e7a:	480e      	ldr	r0, [pc, #56]	; (3eb4 <sdc_init+0x8c>)
    3e7c:	f008 fc30 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    3e80:	f3ef 8410 	mrs	r4, PRIMASK
    3e84:	b672      	cpsid	i
    3e86:	480c      	ldr	r0, [pc, #48]	; (3eb8 <sdc_init+0x90>)
    3e88:	f06f 010c 	mvn.w	r1, #12
    3e8c:	f000 fcf2 	bl	4874 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>
    3e90:	480a      	ldr	r0, [pc, #40]	; (3ebc <sdc_init+0x94>)
    3e92:	f000 fdbf 	bl	4a14 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>
    3e96:	b118      	cbz	r0, 3ea0 <sdc_init+0x78>
    3e98:	219a      	movs	r1, #154	; 0x9a
    3e9a:	2003      	movs	r0, #3
    3e9c:	f000 f810 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ea0:	b904      	cbnz	r4, 3ea4 <sdc_init+0x7c>
    3ea2:	b662      	cpsie	i
    3ea4:	2000      	movs	r0, #0
    3ea6:	e7ce      	b.n	3e46 <sdc_init+0x1e>
    3ea8:	20000058 	.word	0x20000058
    3eac:	00003c35 	.word	0x00003c35
    3eb0:	00003fb0 	.word	0x00003fb0
    3eb4:	20000f68 	.word	0x20000f68
    3eb8:	4000c000 	.word	0x4000c000
    3ebc:	0000405d 	.word	0x0000405d

00003ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>:
    3ec0:	b50e      	push	{r1, r2, r3, lr}
    3ec2:	b672      	cpsid	i
    3ec4:	4a15      	ldr	r2, [pc, #84]	; (3f1c <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x5c>)
    3ec6:	6855      	ldr	r5, [r2, #4]
    3ec8:	b1d5      	cbz	r5, 3f00 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x40>
    3eca:	2200      	movs	r2, #0
    3ecc:	4603      	mov	r3, r0
    3ece:	466e      	mov	r6, sp
    3ed0:	240a      	movs	r4, #10
    3ed2:	e003      	b.n	3edc <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x1c>
    3ed4:	fbb0 f0f4 	udiv	r0, r0, r4
    3ed8:	1c52      	adds	r2, r2, #1
    3eda:	b2d2      	uxtb	r2, r2
    3edc:	2800      	cmp	r0, #0
    3ede:	d1f9      	bne.n	3ed4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x14>
    3ee0:	54b0      	strb	r0, [r6, r2]
    3ee2:	e009      	b.n	3ef8 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x38>
    3ee4:	fbb3 f0f4 	udiv	r0, r3, r4
    3ee8:	fb04 3010 	mls	r0, r4, r0, r3
    3eec:	fbb3 f3f4 	udiv	r3, r3, r4
    3ef0:	1e52      	subs	r2, r2, #1
    3ef2:	b2d2      	uxtb	r2, r2
    3ef4:	3030      	adds	r0, #48	; 0x30
    3ef6:	54b0      	strb	r0, [r6, r2]
    3ef8:	2a00      	cmp	r2, #0
    3efa:	d1f3      	bne.n	3ee4 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x24>
    3efc:	4630      	mov	r0, r6
    3efe:	47a8      	blx	r5
    3f00:	f3bf 8f4f 	dsb	sy
    3f04:	4806      	ldr	r0, [pc, #24]	; (3f20 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x60>)
    3f06:	6801      	ldr	r1, [r0, #0]
    3f08:	4a06      	ldr	r2, [pc, #24]	; (3f24 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x64>)
    3f0a:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
    3f0e:	4311      	orrs	r1, r2
    3f10:	6001      	str	r1, [r0, #0]
    3f12:	f3bf 8f4f 	dsb	sy
    3f16:	bf00      	nop
    3f18:	e7fd      	b.n	3f16 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI+0x56>
    3f1a:	0000      	.short	0x0000
    3f1c:	20000058 	.word	0x20000058
    3f20:	e000ed0c 	.word	0xe000ed0c
    3f24:	05fa0004 	.word	0x05fa0004

00003f28 <sdc_support_dle>:
    3f28:	4806      	ldr	r0, [pc, #24]	; (3f44 <sdc_support_dle+0x1c>)
    3f2a:	b510      	push	{r4, lr}
    3f2c:	7881      	ldrb	r1, [r0, #2]
    3f2e:	7840      	ldrb	r0, [r0, #1]
    3f30:	4301      	orrs	r1, r0
    3f32:	d002      	beq.n	3f3a <sdc_support_dle+0x12>
    3f34:	f04f 30ff 	mov.w	r0, #4294967295
    3f38:	bd10      	pop	{r4, pc}
    3f3a:	f006 fee9 	bl	ad10 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>
    3f3e:	2000      	movs	r0, #0
    3f40:	bd10      	pop	{r4, pc}
    3f42:	0000      	.short	0x0000
    3f44:	20000058 	.word	0x20000058

00003f48 <sdc_support_le_2m_phy>:
    3f48:	4806      	ldr	r0, [pc, #24]	; (3f64 <sdc_support_le_2m_phy+0x1c>)
    3f4a:	b510      	push	{r4, lr}
    3f4c:	7881      	ldrb	r1, [r0, #2]
    3f4e:	7840      	ldrb	r0, [r0, #1]
    3f50:	4301      	orrs	r1, r0
    3f52:	d002      	beq.n	3f5a <sdc_support_le_2m_phy+0x12>
    3f54:	f04f 30ff 	mov.w	r0, #4294967295
    3f58:	bd10      	pop	{r4, pc}
    3f5a:	f00b fa0b 	bl	f374 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>
    3f5e:	2000      	movs	r0, #0
    3f60:	bd10      	pop	{r4, pc}
    3f62:	0000      	.short	0x0000
    3f64:	20000058 	.word	0x20000058

00003f68 <sdc_support_master>:
    3f68:	4806      	ldr	r0, [pc, #24]	; (3f84 <sdc_support_master+0x1c>)
    3f6a:	b510      	push	{r4, lr}
    3f6c:	7881      	ldrb	r1, [r0, #2]
    3f6e:	7840      	ldrb	r0, [r0, #1]
    3f70:	4301      	orrs	r1, r0
    3f72:	d002      	beq.n	3f7a <sdc_support_master+0x12>
    3f74:	f04f 30ff 	mov.w	r0, #4294967295
    3f78:	bd10      	pop	{r4, pc}
    3f7a:	f007 f88d 	bl	b098 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>
    3f7e:	2000      	movs	r0, #0
    3f80:	bd10      	pop	{r4, pc}
    3f82:	0000      	.short	0x0000
    3f84:	20000058 	.word	0x20000058

00003f88 <sdc_support_scan>:
    3f88:	4807      	ldr	r0, [pc, #28]	; (3fa8 <sdc_support_scan+0x20>)
    3f8a:	b510      	push	{r4, lr}
    3f8c:	7881      	ldrb	r1, [r0, #2]
    3f8e:	7842      	ldrb	r2, [r0, #1]
    3f90:	4311      	orrs	r1, r2
    3f92:	d002      	beq.n	3f9a <sdc_support_scan+0x12>
    3f94:	f04f 30ff 	mov.w	r0, #4294967295
    3f98:	bd10      	pop	{r4, pc}
    3f9a:	2101      	movs	r1, #1
    3f9c:	70c1      	strb	r1, [r0, #3]
    3f9e:	f007 f869 	bl	b074 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>
    3fa2:	2000      	movs	r0, #0
    3fa4:	bd10      	pop	{r4, pc}
    3fa6:	0000      	.short	0x0000
    3fa8:	20000058 	.word	0x20000058
    3fac:	00000001 	.word	0x00000001
    3fb0:	00010101 	.word	0x00010101
    3fb4:	031b1b00 	.word	0x031b1b00
    3fb8:	00000002 	.word	0x00000002
    3fbc:	00001d4c 	.word	0x00001d4c
    3fc0:	001f0003 	.word	0x001f0003
    3fc4:	00000000 	.word	0x00000000
    3fc8:	66c5e70e 	.word	0x66c5e70e
    3fcc:	ac3c1867 	.word	0xac3c1867
    3fd0:	81ccd2b3 	.word	0x81ccd2b3
    3fd4:	c0f1dca3 	.word	0xc0f1dca3
    3fd8:	220236c0 	.word	0x220236c0

00003fdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>:
    3fdc:	4a05      	ldr	r2, [pc, #20]	; (3ff4 <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0x18>)
    3fde:	b510      	push	{r4, lr}
    3fe0:	6852      	ldr	r2, [r2, #4]
    3fe2:	b112      	cbz	r2, 3fea <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA+0xe>
    3fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3fe8:	4710      	bx	r2
    3fea:	2183      	movs	r1, #131	; 0x83
    3fec:	2004      	movs	r0, #4
    3fee:	f7ff ff67 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    3ff2:	0000      	.short	0x0000
    3ff4:	20000f80 	.word	0x20000f80

00003ff8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>:
    3ff8:	4a05      	ldr	r2, [pc, #20]	; (4010 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0x18>)
    3ffa:	b510      	push	{r4, lr}
    3ffc:	6812      	ldr	r2, [r2, #0]
    3ffe:	b112      	cbz	r2, 4006 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A+0xe>
    4000:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4004:	4710      	bx	r2
    4006:	217d      	movs	r1, #125	; 0x7d
    4008:	2004      	movs	r0, #4
    400a:	f7ff ff59 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    400e:	0000      	.short	0x0000
    4010:	20000f80 	.word	0x20000f80

00004014 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>:
    4014:	4a05      	ldr	r2, [pc, #20]	; (402c <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0x18>)
    4016:	b510      	push	{r4, lr}
    4018:	6892      	ldr	r2, [r2, #8]
    401a:	b112      	cbz	r2, 4022 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA+0xe>
    401c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4020:	4710      	bx	r2
    4022:	2189      	movs	r1, #137	; 0x89
    4024:	2004      	movs	r0, #4
    4026:	f7ff ff4b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    402a:	0000      	.short	0x0000
    402c:	20000f80 	.word	0x20000f80

00004030 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ>:
    4030:	4805      	ldr	r0, [pc, #20]	; (4048 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x18>)
    4032:	6801      	ldr	r1, [r0, #0]
    4034:	b129      	cbz	r1, 4042 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    4036:	6841      	ldr	r1, [r0, #4]
    4038:	b119      	cbz	r1, 4042 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    403a:	6880      	ldr	r0, [r0, #8]
    403c:	b108      	cbz	r0, 4042 <sym_EZ7BAEZZMYJFIJAONX254JF3WPGEXUT4NMP2WJQ+0x12>
    403e:	2001      	movs	r0, #1
    4040:	4770      	bx	lr
    4042:	2000      	movs	r0, #0
    4044:	4770      	bx	lr
    4046:	0000      	.short	0x0000
    4048:	20000f80 	.word	0x20000f80

0000404c <sdc_rand_source_register>:
    404c:	4902      	ldr	r1, [pc, #8]	; (4058 <sdc_rand_source_register+0xc>)
    404e:	c80d      	ldmia	r0, {r0, r2, r3}
    4050:	e881 000d 	stmia.w	r1, {r0, r2, r3}
    4054:	2000      	movs	r0, #0
    4056:	4770      	bx	lr
    4058:	20000f80 	.word	0x20000f80

0000405c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI>:
    405c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    405e:	4c12      	ldr	r4, [pc, #72]	; (40a8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x4c>)
    4060:	2600      	movs	r6, #0
    4062:	6825      	ldr	r5, [r4, #0]
    4064:	e011      	b.n	408a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4066:	9800      	ldr	r0, [sp, #0]
    4068:	2802      	cmp	r0, #2
    406a:	d002      	beq.n	4072 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x16>
    406c:	2803      	cmp	r0, #3
    406e:	d10c      	bne.n	408a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2e>
    4070:	e006      	b.n	4080 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x24>
    4072:	6820      	ldr	r0, [r4, #0]
    4074:	b110      	cbz	r0, 407c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x20>
    4076:	2000      	movs	r0, #0
    4078:	6026      	str	r6, [r4, #0]
    407a:	e005      	b.n	4088 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x2c>
    407c:	2128      	movs	r1, #40	; 0x28
    407e:	e00c      	b.n	409a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    4080:	6820      	ldr	r0, [r4, #0]
    4082:	b168      	cbz	r0, 40a0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x44>
    4084:	2001      	movs	r0, #1
    4086:	6026      	str	r6, [r4, #0]
    4088:	47a8      	blx	r5
    408a:	4668      	mov	r0, sp
    408c:	f000 fc94 	bl	49b8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>
    4090:	2800      	cmp	r0, #0
    4092:	d0e8      	beq.n	4066 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa>
    4094:	2805      	cmp	r0, #5
    4096:	d005      	beq.n	40a4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x48>
    4098:	2135      	movs	r1, #53	; 0x35
    409a:	2004      	movs	r0, #4
    409c:	f7ff ff10 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    40a0:	212d      	movs	r1, #45	; 0x2d
    40a2:	e7fa      	b.n	409a <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x3e>
    40a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    40a6:	0000      	.short	0x0000
    40a8:	20000060 	.word	0x20000060
    40ac:	b570      	push	{r4, r5, r6, lr}
    40ae:	4c14      	ldr	r4, [pc, #80]	; (4100 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa4>)
    40b0:	4605      	mov	r5, r0
    40b2:	7820      	ldrb	r0, [r4, #0]
    40b4:	b140      	cbz	r0, 40c8 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x6c>
    40b6:	78a2      	ldrb	r2, [r4, #2]
    40b8:	1c61      	adds	r1, r4, #1
    40ba:	4628      	mov	r0, r5
    40bc:	1c92      	adds	r2, r2, #2
    40be:	f008 fb0f 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    40c2:	2000      	movs	r0, #0
    40c4:	7020      	strb	r0, [r4, #0]
    40c6:	e013      	b.n	40f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    40c8:	480e      	ldr	r0, [pc, #56]	; (4104 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    40ca:	f001 ffc9 	bl	6060 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>
    40ce:	2800      	cmp	r0, #0
    40d0:	d00f      	beq.n	40f2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    40d2:	480c      	ldr	r0, [pc, #48]	; (4104 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    40d4:	7800      	ldrb	r0, [r0, #0]
    40d6:	2814      	cmp	r0, #20
    40d8:	d104      	bne.n	40e4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x88>
    40da:	210a      	movs	r1, #10
    40dc:	203e      	movs	r0, #62	; 0x3e
    40de:	f008 fc50 	bl	c982 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    40e2:	b138      	cbz	r0, 40f4 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x98>
    40e4:	4907      	ldr	r1, [pc, #28]	; (4104 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    40e6:	4628      	mov	r0, r5
    40e8:	f008 fca9 	bl	ca3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>
    40ec:	2800      	cmp	r0, #0
    40ee:	d000      	beq.n	40f2 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x96>
    40f0:	2001      	movs	r0, #1
    40f2:	bd70      	pop	{r4, r5, r6, pc}
    40f4:	4903      	ldr	r1, [pc, #12]	; (4104 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xa8>)
    40f6:	4628      	mov	r0, r5
    40f8:	f008 fede 	bl	ceb8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>
    40fc:	e7f8      	b.n	40f0 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x94>
    40fe:	0000      	.short	0x0000
    4100:	20001094 	.word	0x20001094
    4104:	20000f8c 	.word	0x20000f8c
    4108:	b570      	push	{r4, r5, r6, lr}
    410a:	780a      	ldrb	r2, [r1, #0]
    410c:	7082      	strb	r2, [r0, #2]
    410e:	b33a      	cbz	r2, 4160 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4110:	2a01      	cmp	r2, #1
    4112:	d825      	bhi.n	4160 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x104>
    4114:	2313      	movs	r3, #19
    4116:	7003      	strb	r3, [r0, #0]
    4118:	2300      	movs	r3, #0
    411a:	e00a      	b.n	4132 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xd6>
    411c:	eb01 0443 	add.w	r4, r1, r3, lsl #1
    4120:	eb00 0543 	add.w	r5, r0, r3, lsl #1
    4124:	78a6      	ldrb	r6, [r4, #2]
    4126:	70ee      	strb	r6, [r5, #3]
    4128:	8864      	ldrh	r4, [r4, #2]
    412a:	0a24      	lsrs	r4, r4, #8
    412c:	1c5b      	adds	r3, r3, #1
    412e:	712c      	strb	r4, [r5, #4]
    4130:	b2db      	uxtb	r3, r3
    4132:	4293      	cmp	r3, r2
    4134:	d3f2      	bcc.n	411c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xc0>
    4136:	2300      	movs	r3, #0
    4138:	e00b      	b.n	4152 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xf6>
    413a:	bf00      	nop
    413c:	eb01 0543 	add.w	r5, r1, r3, lsl #1
    4140:	eb00 0443 	add.w	r4, r0, r3, lsl #1
    4144:	792e      	ldrb	r6, [r5, #4]
    4146:	7166      	strb	r6, [r4, #5]
    4148:	88ad      	ldrh	r5, [r5, #4]
    414a:	0a2d      	lsrs	r5, r5, #8
    414c:	1c5b      	adds	r3, r3, #1
    414e:	71a5      	strb	r5, [r4, #6]
    4150:	b2db      	uxtb	r3, r3
    4152:	4293      	cmp	r3, r2
    4154:	d3f2      	bcc.n	413c <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xe0>
    4156:	2101      	movs	r1, #1
    4158:	eb01 0082 	add.w	r0, r1, r2, lsl #2
    415c:	b2c0      	uxtb	r0, r0
    415e:	bd70      	pop	{r4, r5, r6, pc}
    4160:	2000      	movs	r0, #0
    4162:	bd70      	pop	{r4, r5, r6, pc}

00004164 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>:
    4164:	2101      	movs	r1, #1
    4166:	4a0c      	ldr	r2, [pc, #48]	; (4198 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x34>)
    4168:	2840      	cmp	r0, #64	; 0x40
    416a:	d20c      	bcs.n	4186 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x22>
    416c:	2820      	cmp	r0, #32
    416e:	d803      	bhi.n	4178 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x14>
    4170:	1e40      	subs	r0, r0, #1
    4172:	4081      	lsls	r1, r0
    4174:	6810      	ldr	r0, [r2, #0]
    4176:	e002      	b.n	417e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4178:	3821      	subs	r0, #33	; 0x21
    417a:	4081      	lsls	r1, r0
    417c:	6850      	ldr	r0, [r2, #4]
    417e:	4201      	tst	r1, r0
    4180:	d107      	bne.n	4192 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    4182:	2000      	movs	r0, #0
    4184:	4770      	bx	lr
    4186:	28ff      	cmp	r0, #255	; 0xff
    4188:	d003      	beq.n	4192 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x2e>
    418a:	3840      	subs	r0, #64	; 0x40
    418c:	4081      	lsls	r1, r0
    418e:	6890      	ldr	r0, [r2, #8]
    4190:	e7f5      	b.n	417e <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY+0x1a>
    4192:	2001      	movs	r0, #1
    4194:	4770      	bx	lr
    4196:	0000      	.short	0x0000
    4198:	20000064 	.word	0x20000064

0000419c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>:
    419c:	2101      	movs	r1, #1
    419e:	1e40      	subs	r0, r0, #1
    41a0:	4081      	lsls	r1, r0
    41a2:	4804      	ldr	r0, [pc, #16]	; (41b4 <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x18>)
    41a4:	68c0      	ldr	r0, [r0, #12]
    41a6:	4201      	tst	r1, r0
    41a8:	d001      	beq.n	41ae <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ+0x12>
    41aa:	2001      	movs	r0, #1
    41ac:	4770      	bx	lr
    41ae:	2000      	movs	r0, #0
    41b0:	4770      	bx	lr
    41b2:	0000      	.short	0x0000
    41b4:	20000064 	.word	0x20000064

000041b8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>:
    41b8:	4901      	ldr	r1, [pc, #4]	; (41c0 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ+0x8>)
    41ba:	6800      	ldr	r0, [r0, #0]
    41bc:	60c8      	str	r0, [r1, #12]
    41be:	4770      	bx	lr
    41c0:	20000064 	.word	0x20000064

000041c4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>:
    41c4:	4904      	ldr	r1, [pc, #16]	; (41d8 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x14>)
    41c6:	6802      	ldr	r2, [r0, #0]
    41c8:	6840      	ldr	r0, [r0, #4]
    41ca:	f442 228c 	orr.w	r2, r2, #286720	; 0x46000
    41ce:	600a      	str	r2, [r1, #0]
    41d0:	4a02      	ldr	r2, [pc, #8]	; (41dc <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ+0x18>)
    41d2:	4310      	orrs	r0, r2
    41d4:	6048      	str	r0, [r1, #4]
    41d6:	4770      	bx	lr
    41d8:	20000064 	.word	0x20000064
    41dc:	024007f8 	.word	0x024007f8

000041e0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>:
    41e0:	4901      	ldr	r1, [pc, #4]	; (41e8 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA+0x8>)
    41e2:	6800      	ldr	r0, [r0, #0]
    41e4:	6088      	str	r0, [r1, #8]
    41e6:	4770      	bx	lr
    41e8:	20000064 	.word	0x20000064

000041ec <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>:
    41ec:	4805      	ldr	r0, [pc, #20]	; (4204 <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ+0x18>)
    41ee:	f04f 31ff 	mov.w	r1, #4294967295
    41f2:	6001      	str	r1, [r0, #0]
    41f4:	0cc9      	lsrs	r1, r1, #19
    41f6:	6041      	str	r1, [r0, #4]
    41f8:	2100      	movs	r1, #0
    41fa:	6081      	str	r1, [r0, #8]
    41fc:	211f      	movs	r1, #31
    41fe:	60c1      	str	r1, [r0, #12]
    4200:	4770      	bx	lr
    4202:	0000      	.short	0x0000
    4204:	20000064 	.word	0x20000064

00004208 <sdc_hci_cmd_cb_reset>:
    4208:	b510      	push	{r4, lr}
    420a:	f7ff ffef 	bl	41ec <sym_TG7NSIC2UKHCUBZWZ4K4EMD5QRI2QVSKVKV6CFQ>
    420e:	f00b f88a 	bl	f326 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>
    4212:	4604      	mov	r4, r0
    4214:	4802      	ldr	r0, [pc, #8]	; (4220 <sdc_hci_cmd_cb_reset+0x18>)
    4216:	6800      	ldr	r0, [r0, #0]
    4218:	b100      	cbz	r0, 421c <sdc_hci_cmd_cb_reset+0x14>
    421a:	4780      	blx	r0
    421c:	4620      	mov	r0, r4
    421e:	bd10      	pop	{r4, pc}
    4220:	20000074 	.word	0x20000074

00004224 <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ>:
    4224:	4901      	ldr	r1, [pc, #4]	; (422c <sym_G3KVRHCJDVHL7HV53526V3YI3DTK2IW2CADUWZQ+0x8>)
    4226:	6008      	str	r0, [r1, #0]
    4228:	4770      	bx	lr
    422a:	0000      	.short	0x0000
    422c:	20000074 	.word	0x20000074

00004230 <sdc_hci_cmd_vs_zephyr_read_version_info>:
    4230:	2102      	movs	r1, #2
    4232:	8001      	strh	r1, [r0, #0]
    4234:	8041      	strh	r1, [r0, #2]
    4236:	2100      	movs	r1, #0
    4238:	7101      	strb	r1, [r0, #4]
    423a:	210e      	movs	r1, #14
    423c:	7141      	strb	r1, [r0, #5]
    423e:	f24c 51e7 	movw	r1, #50663	; 0xc5e7
    4242:	80c1      	strh	r1, [r0, #6]
    4244:	4901      	ldr	r1, [pc, #4]	; (424c <sdc_hci_cmd_vs_zephyr_read_version_info+0x1c>)
    4246:	6081      	str	r1, [r0, #8]
    4248:	2000      	movs	r0, #0
    424a:	4770      	bx	lr
    424c:	3c186766 	.word	0x3c186766

00004250 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>:
    4250:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    4252:	4604      	mov	r4, r0
    4254:	4669      	mov	r1, sp
    4256:	f009 faed 	bl	d834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    425a:	b170      	cbz	r0, 427a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    425c:	f240 215a 	movw	r1, #602	; 0x25a
    4260:	e008      	b.n	4274 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x24>
    4262:	bf00      	nop
    4264:	f8bd 0004 	ldrh.w	r0, [sp, #4]
    4268:	4621      	mov	r1, r4
    426a:	f000 f8a7 	bl	43bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    426e:	b120      	cbz	r0, 427a <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x2a>
    4270:	f240 215f 	movw	r1, #607	; 0x25f
    4274:	2017      	movs	r0, #23
    4276:	f7ff fe23 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    427a:	4668      	mov	r0, sp
    427c:	f000 f850 	bl	4320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    4280:	2800      	cmp	r0, #0
    4282:	d0ef      	beq.n	4264 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A+0x14>
    4284:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
	...

00004288 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>:
    4288:	b510      	push	{r4, lr}
    428a:	b120      	cbz	r0, 4296 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0xe>
    428c:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
    4290:	2017      	movs	r0, #23
    4292:	f7ff fe15 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4296:	4801      	ldr	r0, [pc, #4]	; (429c <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI+0x14>)
    4298:	7800      	ldrb	r0, [r0, #0]
    429a:	bd10      	pop	{r4, pc}
    429c:	20001198 	.word	0x20001198

000042a0 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA>:
    42a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    42a2:	4605      	mov	r5, r0
    42a4:	7808      	ldrb	r0, [r1, #0]
    42a6:	784a      	ldrb	r2, [r1, #1]
    42a8:	4290      	cmp	r0, r2
    42aa:	d902      	bls.n	42b2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x12>
    42ac:	f240 1163 	movw	r1, #355	; 0x163
    42b0:	e00a      	b.n	42c8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x28>
    42b2:	9500      	str	r5, [sp, #0]
    42b4:	b15d      	cbz	r5, 42ce <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x2e>
    42b6:	2600      	movs	r6, #0
    42b8:	1ce8      	adds	r0, r5, #3
    42ba:	784c      	ldrb	r4, [r1, #1]
    42bc:	f020 0003 	bic.w	r0, r0, #3
    42c0:	42a8      	cmp	r0, r5
    42c2:	d006      	beq.n	42d2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x32>
    42c4:	f240 1179 	movw	r1, #377	; 0x179
    42c8:	2017      	movs	r0, #23
    42ca:	f7ff fdf9 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    42ce:	2601      	movs	r6, #1
    42d0:	e7f2      	b.n	42b8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x18>
    42d2:	4f12      	ldr	r7, [pc, #72]	; (431c <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x7c>)
    42d4:	4631      	mov	r1, r6
    42d6:	4668      	mov	r0, sp
    42d8:	703c      	strb	r4, [r7, #0]
    42da:	f000 f8e1 	bl	44a0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe4>
    42de:	2000      	movs	r0, #0
    42e0:	4603      	mov	r3, r0
    42e2:	9900      	ldr	r1, [sp, #0]
    42e4:	1cc9      	adds	r1, r1, #3
    42e6:	f021 0103 	bic.w	r1, r1, #3
    42ea:	9100      	str	r1, [sp, #0]
    42ec:	b966      	cbnz	r6, 4308 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x68>
    42ee:	eb07 0280 	add.w	r2, r7, r0, lsl #2
    42f2:	6091      	str	r1, [r2, #8]
    42f4:	2100      	movs	r1, #0
    42f6:	e005      	b.n	4304 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x64>
    42f8:	f8d2 c008 	ldr.w	ip, [r2, #8]
    42fc:	f84c 3021 	str.w	r3, [ip, r1, lsl #2]
    4300:	1c49      	adds	r1, r1, #1
    4302:	b2c9      	uxtb	r1, r1
    4304:	42a1      	cmp	r1, r4
    4306:	d3f7      	bcc.n	42f8 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x58>
    4308:	9900      	ldr	r1, [sp, #0]
    430a:	1c40      	adds	r0, r0, #1
    430c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
    4310:	9100      	str	r1, [sp, #0]
    4312:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
    4316:	d0e4      	beq.n	42e2 <sym_EQ53CEL7EDVHMFMHMFPRRQU46C5YKKFEBAACFOA+0x42>
    4318:	1b48      	subs	r0, r1, r5
    431a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    431c:	20001198 	.word	0x20001198

00004320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>:
    4320:	b570      	push	{r4, r5, r6, lr}
    4322:	4604      	mov	r4, r0
    4324:	f009 fae0 	bl	d8e8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    4328:	b108      	cbz	r0, 432e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0xe>
    432a:	2010      	movs	r0, #16
    432c:	bd70      	pop	{r4, r5, r6, pc}
    432e:	7825      	ldrb	r5, [r4, #0]
    4330:	f000 f8f2 	bl	4518 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    4334:	4602      	mov	r2, r0
    4336:	480c      	ldr	r0, [pc, #48]	; (4368 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x48>)
    4338:	8861      	ldrh	r1, [r4, #2]
    433a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    433e:	e00e      	b.n	435e <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3e>
    4340:	6883      	ldr	r3, [r0, #8]
    4342:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    4346:	b143      	cbz	r3, 435a <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x3a>
    4348:	1c4a      	adds	r2, r1, #1
    434a:	8062      	strh	r2, [r4, #2]
    434c:	80a1      	strh	r1, [r4, #4]
    434e:	6880      	ldr	r0, [r0, #8]
    4350:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    4354:	60a0      	str	r0, [r4, #8]
    4356:	2000      	movs	r0, #0
    4358:	bd70      	pop	{r4, r5, r6, pc}
    435a:	1c49      	adds	r1, r1, #1
    435c:	b289      	uxth	r1, r1
    435e:	4291      	cmp	r1, r2
    4360:	d3ee      	bcc.n	4340 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA+0x20>
    4362:	8061      	strh	r1, [r4, #2]
    4364:	2005      	movs	r0, #5
    4366:	bd70      	pop	{r4, r5, r6, pc}
    4368:	20001198 	.word	0x20001198

0000436c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>:
    436c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4370:	b949      	cbnz	r1, 4386 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    4372:	4c11      	ldr	r4, [pc, #68]	; (43b8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x4c>)
    4374:	2700      	movs	r7, #0
    4376:	463b      	mov	r3, r7
    4378:	f64f 76ff 	movw	r6, #65535	; 0xffff
    437c:	eb04 0581 	add.w	r5, r4, r1, lsl #2
    4380:	f814 c001 	ldrb.w	ip, [r4, r1]
    4384:	e00d      	b.n	43a2 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x36>
    4386:	2000      	movs	r0, #0
    4388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    438c:	19dc      	adds	r4, r3, r7
    438e:	f8d5 e008 	ldr.w	lr, [r5, #8]
    4392:	b2a4      	uxth	r4, r4
    4394:	f85e e024 	ldr.w	lr, [lr, r4, lsl #2]
    4398:	f1be 0f00 	cmp.w	lr, #0
    439c:	d004      	beq.n	43a8 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x3c>
    439e:	1c5b      	adds	r3, r3, #1
    43a0:	b29b      	uxth	r3, r3
    43a2:	459c      	cmp	ip, r3
    43a4:	d8f2      	bhi.n	438c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x20>
    43a6:	4634      	mov	r4, r6
    43a8:	8004      	strh	r4, [r0, #0]
    43aa:	4620      	mov	r0, r4
    43ac:	42b4      	cmp	r4, r6
    43ae:	d0ea      	beq.n	4386 <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ+0x1a>
    43b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    43b4:	f000 b82c 	b.w	4410 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x54>
    43b8:	20001198 	.word	0x20001198

000043bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>:
    43bc:	b570      	push	{r4, r5, r6, lr}
    43be:	4606      	mov	r6, r0
    43c0:	f5a0 407f 	sub.w	r0, r0, #65280	; 0xff00
    43c4:	f243 0502 	movw	r5, #12290	; 0x3002
    43c8:	38ff      	subs	r0, #255	; 0xff
    43ca:	d01a      	beq.n	4402 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    43cc:	b109      	cbz	r1, 43d2 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x16>
    43ce:	2007      	movs	r0, #7
    43d0:	bd70      	pop	{r4, r5, r6, pc}
    43d2:	4630      	mov	r0, r6
    43d4:	f000 f854 	bl	4480 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>
    43d8:	0004      	movs	r4, r0
    43da:	d012      	beq.n	4402 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x46>
    43dc:	480a      	ldr	r0, [pc, #40]	; (4408 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x4c>)
    43de:	4621      	mov	r1, r4
    43e0:	6802      	ldr	r2, [r0, #0]
    43e2:	4630      	mov	r0, r6
    43e4:	4790      	blx	r2
    43e6:	4d09      	ldr	r5, [pc, #36]	; (440c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x50>)
    43e8:	2000      	movs	r0, #0
    43ea:	68a9      	ldr	r1, [r5, #8]
    43ec:	f841 0026 	str.w	r0, [r1, r6, lsl #2]
    43f0:	f000 f888 	bl	4504 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    43f4:	4602      	mov	r2, r0
    43f6:	4621      	mov	r1, r4
    43f8:	6868      	ldr	r0, [r5, #4]
    43fa:	f009 fa05 	bl	d808 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    43fe:	2000      	movs	r0, #0
    4400:	bd70      	pop	{r4, r5, r6, pc}
    4402:	4628      	mov	r0, r5
    4404:	bd70      	pop	{r4, r5, r6, pc}
    4406:	0000      	.short	0x0000
    4408:	0000452c 	.word	0x0000452c
    440c:	20001198 	.word	0x20001198
    4410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4414:	4690      	mov	r8, r2
    4416:	460e      	mov	r6, r1
    4418:	4607      	mov	r7, r0
    441a:	f009 fa1b 	bl	d854 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    441e:	b148      	cbz	r0, 4434 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x78>
    4420:	4815      	ldr	r0, [pc, #84]	; (4478 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xbc>)
    4422:	eb00 0586 	add.w	r5, r0, r6, lsl #2
    4426:	68a8      	ldr	r0, [r5, #8]
    4428:	f850 0027 	ldr.w	r0, [r0, r7, lsl #2]
    442c:	b128      	cbz	r0, 443a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x7e>
    442e:	f44f 719d 	mov.w	r1, #314	; 0x13a
    4432:	e014      	b.n	445e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    4434:	f240 1139 	movw	r1, #313	; 0x139
    4438:	e011      	b.n	445e <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa2>
    443a:	6868      	ldr	r0, [r5, #4]
    443c:	2800      	cmp	r0, #0
    443e:	d018      	beq.n	4472 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb6>
    4440:	4630      	mov	r0, r6
    4442:	f000 f85f 	bl	4504 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    4446:	4601      	mov	r1, r0
    4448:	6868      	ldr	r0, [r5, #4]
    444a:	f009 f98f 	bl	d76c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    444e:	0004      	movs	r4, r0
    4450:	d00e      	beq.n	4470 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xb4>
    4452:	68a8      	ldr	r0, [r5, #8]
    4454:	f840 4027 	str.w	r4, [r0, r7, lsl #2]
    4458:	b126      	cbz	r6, 4464 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xa8>
    445a:	f240 1145 	movw	r1, #325	; 0x145
    445e:	2017      	movs	r0, #23
    4460:	f7ff fd2e 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4464:	4805      	ldr	r0, [pc, #20]	; (447c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc0>)
    4466:	4642      	mov	r2, r8
    4468:	4621      	mov	r1, r4
    446a:	6803      	ldr	r3, [r0, #0]
    446c:	4638      	mov	r0, r7
    446e:	4798      	blx	r3
    4470:	4620      	mov	r0, r4
    4472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4476:	0000      	.short	0x0000
    4478:	20001198 	.word	0x20001198
    447c:	00004528 	.word	0x00004528
    4480:	b570      	push	{r4, r5, r6, lr}
    4482:	460c      	mov	r4, r1
    4484:	4605      	mov	r5, r0
    4486:	f009 f9e5 	bl	d854 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x20>
    448a:	2800      	cmp	r0, #0
    448c:	d005      	beq.n	449a <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xde>
    448e:	4803      	ldr	r0, [pc, #12]	; (449c <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xe0>)
    4490:	eb00 0084 	add.w	r0, r0, r4, lsl #2
    4494:	6880      	ldr	r0, [r0, #8]
    4496:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    449a:	bd70      	pop	{r4, r5, r6, pc}
    449c:	20001198 	.word	0x20001198
    44a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    44a4:	4e16      	ldr	r6, [pc, #88]	; (4500 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x144>)
    44a6:	4688      	mov	r8, r1
    44a8:	4605      	mov	r5, r0
    44aa:	2400      	movs	r4, #0
    44ac:	6828      	ldr	r0, [r5, #0]
    44ae:	1cc0      	adds	r0, r0, #3
    44b0:	f020 0003 	bic.w	r0, r0, #3
    44b4:	6028      	str	r0, [r5, #0]
    44b6:	4620      	mov	r0, r4
    44b8:	f000 f824 	bl	4504 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x148>
    44bc:	5d31      	ldrb	r1, [r6, r4]
    44be:	4348      	muls	r0, r1
    44c0:	f1b8 0f00 	cmp.w	r8, #0
    44c4:	d001      	beq.n	44ca <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x10e>
    44c6:	2200      	movs	r2, #0
    44c8:	e000      	b.n	44cc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x110>
    44ca:	682a      	ldr	r2, [r5, #0]
    44cc:	4601      	mov	r1, r0
    44ce:	9200      	str	r2, [sp, #0]
    44d0:	b132      	cbz	r2, 44e0 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x124>
    44d2:	2700      	movs	r7, #0
    44d4:	ea4f 000d 	mov.w	r0, sp
    44d8:	f009 f975 	bl	d7c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    44dc:	b11f      	cbz	r7, 44e6 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x12a>
    44de:	e006      	b.n	44ee <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x132>
    44e0:	2701      	movs	r7, #1
    44e2:	2000      	movs	r0, #0
    44e4:	e7f8      	b.n	44d8 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x11c>
    44e6:	eb06 0184 	add.w	r1, r6, r4, lsl #2
    44ea:	9a00      	ldr	r2, [sp, #0]
    44ec:	604a      	str	r2, [r1, #4]
    44ee:	6829      	ldr	r1, [r5, #0]
    44f0:	1c64      	adds	r4, r4, #1
    44f2:	4408      	add	r0, r1
    44f4:	6028      	str	r0, [r5, #0]
    44f6:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    44fa:	d0d7      	beq.n	44ac <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xf0>
    44fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4500:	20001198 	.word	0x20001198
    4504:	4903      	ldr	r1, [pc, #12]	; (4514 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x158>)
    4506:	f831 0010 	ldrh.w	r0, [r1, r0, lsl #1]
    450a:	f64f 71fc 	movw	r1, #65532	; 0xfffc
    450e:	1cc0      	adds	r0, r0, #3
    4510:	4008      	ands	r0, r1
    4512:	4770      	bx	lr
    4514:	00004524 	.word	0x00004524
    4518:	4801      	ldr	r0, [pc, #4]	; (4520 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x164>)
    451a:	7800      	ldrb	r0, [r0, #0]
    451c:	4770      	bx	lr
    451e:	0000      	.short	0x0000
    4520:	20001198 	.word	0x20001198
    4524:	000001e0 	.word	0x000001e0
    4528:	0000d869 	.word	0x0000d869
    452c:	0000ea01 	.word	0x0000ea01

00004530 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>:
    4530:	e92d 4fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4534:	4c26      	ldr	r4, [pc, #152]	; (45d0 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0xa0>)
    4536:	4680      	mov	r8, r0
    4538:	b081      	sub	sp, #4
    453a:	6820      	ldr	r0, [r4, #0]
    453c:	469a      	mov	sl, r3
    453e:	4693      	mov	fp, r2
    4540:	b158      	cbz	r0, 455a <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x2a>
    4542:	7a02      	ldrb	r2, [r0, #8]
    4544:	4542      	cmp	r2, r8
    4546:	d903      	bls.n	4550 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x20>
    4548:	6841      	ldr	r1, [r0, #4]
    454a:	f851 0028 	ldr.w	r0, [r1, r8, lsl #2]
    454e:	b140      	cbz	r0, 4562 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x32>
    4550:	f243 0002 	movw	r0, #12290	; 0x3002
    4554:	b005      	add	sp, #20
    4556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    455a:	21a5      	movs	r1, #165	; 0xa5
    455c:	2018      	movs	r0, #24
    455e:	f7ff fcaf 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4562:	4619      	mov	r1, r3
    4564:	9802      	ldr	r0, [sp, #8]
    4566:	f009 f997 	bl	d898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    456a:	b286      	uxth	r6, r0
    456c:	4658      	mov	r0, fp
    456e:	990e      	ldr	r1, [sp, #56]	; 0x38
    4570:	f009 f989 	bl	d886 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    4574:	b285      	uxth	r5, r0
    4576:	1970      	adds	r0, r6, r5
    4578:	1d00      	adds	r0, r0, #4
    457a:	b287      	uxth	r7, r0
    457c:	6820      	ldr	r0, [r4, #0]
    457e:	46a1      	mov	r9, r4
    4580:	4639      	mov	r1, r7
    4582:	6800      	ldr	r0, [r0, #0]
    4584:	f009 f8f2 	bl	d76c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>
    4588:	0004      	movs	r4, r0
    458a:	d01f      	beq.n	45cc <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x9c>
    458c:	8067      	strh	r7, [r4, #2]
    458e:	8025      	strh	r5, [r4, #0]
    4590:	4629      	mov	r1, r5
    4592:	1d20      	adds	r0, r4, #4
    4594:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    4596:	4607      	mov	r7, r0
    4598:	465a      	mov	r2, fp
    459a:	2301      	movs	r3, #1
    459c:	9500      	str	r5, [sp, #0]
    459e:	f009 f845 	bl	d62c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    45a2:	8820      	ldrh	r0, [r4, #0]
    45a4:	4631      	mov	r1, r6
    45a6:	4438      	add	r0, r7
    45a8:	2301      	movs	r3, #1
    45aa:	9a02      	ldr	r2, [sp, #8]
    45ac:	f8cd a000 	str.w	sl, [sp]
    45b0:	f009 f83c 	bl	d62c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    45b4:	8820      	ldrh	r0, [r4, #0]
    45b6:	19c1      	adds	r1, r0, r7
    45b8:	4638      	mov	r0, r7
    45ba:	f009 f868 	bl	d68e <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>
    45be:	f8d9 0000 	ldr.w	r0, [r9]
    45c2:	6841      	ldr	r1, [r0, #4]
    45c4:	2000      	movs	r0, #0
    45c6:	f841 4028 	str.w	r4, [r1, r8, lsl #2]
    45ca:	e7c3      	b.n	4554 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    45cc:	2004      	movs	r0, #4
    45ce:	e7c1      	b.n	4554 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA+0x24>
    45d0:	20000078 	.word	0x20000078

000045d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>:
    45d4:	b570      	push	{r4, r5, r6, lr}
    45d6:	4c14      	ldr	r4, [pc, #80]	; (4628 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x54>)
    45d8:	6823      	ldr	r3, [r4, #0]
    45da:	b18b      	cbz	r3, 4600 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x2c>
    45dc:	7a19      	ldrb	r1, [r3, #8]
    45de:	4281      	cmp	r1, r0
    45e0:	d912      	bls.n	4608 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    45e2:	685a      	ldr	r2, [r3, #4]
    45e4:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
    45e8:	b171      	cbz	r1, 4608 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x34>
    45ea:	2500      	movs	r5, #0
    45ec:	f842 5020 	str.w	r5, [r2, r0, lsl #2]
    45f0:	884a      	ldrh	r2, [r1, #2]
    45f2:	6818      	ldr	r0, [r3, #0]
    45f4:	f009 f908 	bl	d808 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>
    45f8:	6821      	ldr	r1, [r4, #0]
    45fa:	2000      	movs	r0, #0
    45fc:	7a0a      	ldrb	r2, [r1, #8]
    45fe:	e00c      	b.n	461a <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x46>
    4600:	21c8      	movs	r1, #200	; 0xc8
    4602:	2018      	movs	r0, #24
    4604:	f7ff fc5c 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4608:	f243 0002 	movw	r0, #12290	; 0x3002
    460c:	bd70      	pop	{r4, r5, r6, pc}
    460e:	684b      	ldr	r3, [r1, #4]
    4610:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
    4614:	b933      	cbnz	r3, 4624 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x50>
    4616:	1c40      	adds	r0, r0, #1
    4618:	b2c0      	uxtb	r0, r0
    461a:	4282      	cmp	r2, r0
    461c:	d8f7      	bhi.n	460e <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ+0x3a>
    461e:	6808      	ldr	r0, [r1, #0]
    4620:	f009 f8e7 	bl	d7f2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>
    4624:	2000      	movs	r0, #0
    4626:	bd70      	pop	{r4, r5, r6, pc}
    4628:	20000078 	.word	0x20000078

0000462c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>:
    462c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4630:	460d      	mov	r5, r1
    4632:	0004      	movs	r4, r0
    4634:	4690      	mov	r8, r2
    4636:	f04f 0600 	mov.w	r6, #0
    463a:	d009      	beq.n	4650 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x24>
    463c:	2700      	movs	r7, #0
    463e:	1ce0      	adds	r0, r4, #3
    4640:	f020 0003 	bic.w	r0, r0, #3
    4644:	42a0      	cmp	r0, r4
    4646:	d005      	beq.n	4654 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x28>
    4648:	2186      	movs	r1, #134	; 0x86
    464a:	2018      	movs	r0, #24
    464c:	f7ff fc38 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4650:	2701      	movs	r7, #1
    4652:	e7f4      	b.n	463e <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x12>
    4654:	b1cd      	cbz	r5, 468a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4656:	4611      	mov	r1, r2
    4658:	2000      	movs	r0, #0
    465a:	f009 f8b4 	bl	d7c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    465e:	300c      	adds	r0, #12
    4660:	eb00 0685 	add.w	r6, r0, r5, lsl #2
    4664:	b98f      	cbnz	r7, 468a <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x5e>
    4666:	4f0a      	ldr	r7, [pc, #40]	; (4690 <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA+0x64>)
    4668:	f104 000c 	add.w	r0, r4, #12
    466c:	00aa      	lsls	r2, r5, #2
    466e:	603c      	str	r4, [r7, #0]
    4670:	7225      	strb	r5, [r4, #8]
    4672:	6060      	str	r0, [r4, #4]
    4674:	eb00 0085 	add.w	r0, r0, r5, lsl #2
    4678:	6020      	str	r0, [r4, #0]
    467a:	2100      	movs	r1, #0
    467c:	6860      	ldr	r0, [r4, #4]
    467e:	f008 f8a9 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    4682:	4641      	mov	r1, r8
    4684:	6838      	ldr	r0, [r7, #0]
    4686:	f009 f89e 	bl	d7c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>
    468a:	4630      	mov	r0, r6
    468c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    4690:	20000078 	.word	0x20000078

00004694 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>:
    4694:	b570      	push	{r4, r5, r6, lr}
    4696:	4d08      	ldr	r5, [pc, #32]	; (46b8 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x24>)
    4698:	6828      	ldr	r0, [r5, #0]
    469a:	2800      	cmp	r0, #0
    469c:	d00a      	beq.n	46b4 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x20>
    469e:	2400      	movs	r4, #0
    46a0:	e004      	b.n	46ac <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0x18>
    46a2:	4620      	mov	r0, r4
    46a4:	f7ff ff96 	bl	45d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>
    46a8:	1c64      	adds	r4, r4, #1
    46aa:	b2e4      	uxtb	r4, r4
    46ac:	6828      	ldr	r0, [r5, #0]
    46ae:	7a00      	ldrb	r0, [r0, #8]
    46b0:	42a0      	cmp	r0, r4
    46b2:	d8f6      	bhi.n	46a2 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA+0xe>
    46b4:	bd70      	pop	{r4, r5, r6, pc}
    46b6:	0000      	.short	0x0000
    46b8:	20000078 	.word	0x20000078

000046bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>:
    46bc:	4909      	ldr	r1, [pc, #36]	; (46e4 <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x28>)
    46be:	b510      	push	{r4, lr}
    46c0:	4602      	mov	r2, r0
    46c2:	6809      	ldr	r1, [r1, #0]
    46c4:	2000      	movs	r0, #0
    46c6:	b149      	cbz	r1, 46dc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x20>
    46c8:	7a0b      	ldrb	r3, [r1, #8]
    46ca:	4293      	cmp	r3, r2
    46cc:	d905      	bls.n	46da <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    46ce:	6849      	ldr	r1, [r1, #4]
    46d0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    46d4:	2900      	cmp	r1, #0
    46d6:	d000      	beq.n	46da <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ+0x1e>
    46d8:	1d08      	adds	r0, r1, #4
    46da:	bd10      	pop	{r4, pc}
    46dc:	21ee      	movs	r1, #238	; 0xee
    46de:	2018      	movs	r0, #24
    46e0:	f7ff fbee 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    46e4:	20000078 	.word	0x20000078

000046e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>:
    46e8:	490a      	ldr	r1, [pc, #40]	; (4714 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x2c>)
    46ea:	b510      	push	{r4, lr}
    46ec:	4602      	mov	r2, r0
    46ee:	6809      	ldr	r1, [r1, #0]
    46f0:	2000      	movs	r0, #0
    46f2:	b159      	cbz	r1, 470c <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x24>
    46f4:	7a0b      	ldrb	r3, [r1, #8]
    46f6:	4293      	cmp	r3, r2
    46f8:	d907      	bls.n	470a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    46fa:	6849      	ldr	r1, [r1, #4]
    46fc:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
    4700:	2900      	cmp	r1, #0
    4702:	d002      	beq.n	470a <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA+0x22>
    4704:	f831 0b04 	ldrh.w	r0, [r1], #4
    4708:	4408      	add	r0, r1
    470a:	bd10      	pop	{r4, pc}
    470c:	21fc      	movs	r1, #252	; 0xfc
    470e:	2018      	movs	r0, #24
    4710:	f7ff fbd6 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4714:	20000078 	.word	0x20000078

00004718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>:
    4718:	4801      	ldr	r0, [pc, #4]	; (4720 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA+0x8>)
    471a:	7840      	ldrb	r0, [r0, #1]
    471c:	4770      	bx	lr
    471e:	0000      	.short	0x0000
    4720:	2000007c 	.word	0x2000007c

00004724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>:
    4724:	4801      	ldr	r0, [pc, #4]	; (472c <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q+0x8>)
    4726:	6840      	ldr	r0, [r0, #4]
    4728:	4770      	bx	lr
    472a:	0000      	.short	0x0000
    472c:	2000007c 	.word	0x2000007c

00004730 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>:
    4730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4734:	460c      	mov	r4, r1
    4736:	4607      	mov	r7, r0
    4738:	4616      	mov	r6, r2
    473a:	211c      	movs	r1, #28
    473c:	4610      	mov	r0, r2
    473e:	460d      	mov	r5, r1
    4740:	4622      	mov	r2, r4
    4742:	f008 ffce 	bl	d6e2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    4746:	4680      	mov	r8, r0
    4748:	b157      	cbz	r7, 4760 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x30>
    474a:	4638      	mov	r0, r7
    474c:	4641      	mov	r1, r8
    474e:	4632      	mov	r2, r6
    4750:	462b      	mov	r3, r5
    4752:	9400      	str	r4, [sp, #0]
    4754:	f008 ff6a 	bl	d62c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>
    4758:	4803      	ldr	r0, [pc, #12]	; (4768 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA+0x38>)
    475a:	6047      	str	r7, [r0, #4]
    475c:	7004      	strb	r4, [r0, #0]
    475e:	7046      	strb	r6, [r0, #1]
    4760:	4640      	mov	r0, r8
    4762:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    4766:	0000      	.short	0x0000
    4768:	2000007c 	.word	0x2000007c

0000476c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>:
    476c:	4802      	ldr	r0, [pc, #8]	; (4778 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xc>)
    476e:	7842      	ldrb	r2, [r0, #1]
    4770:	7801      	ldrb	r1, [r0, #0]
    4772:	6840      	ldr	r0, [r0, #4]
    4774:	f7ff bfdc 	b.w	4730 <sym_JKTUFSDBLEJK3JCIOVWBB4AVHFNXLCVLU47RLVA>
    4778:	2000007c 	.word	0x2000007c
    477c:	4909      	ldr	r1, [pc, #36]	; (47a4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x38>)
    477e:	b510      	push	{r4, lr}
    4780:	4807      	ldr	r0, [pc, #28]	; (47a0 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x34>)
    4782:	6008      	str	r0, [r1, #0]
    4784:	4b08      	ldr	r3, [pc, #32]	; (47a8 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x3c>)
    4786:	2011      	movs	r0, #17
    4788:	eb03 04c0 	add.w	r4, r3, r0, lsl #3
    478c:	2200      	movs	r2, #0
    478e:	f8c4 2510 	str.w	r2, [r4, #1296]	; 0x510
    4792:	f8c4 2514 	str.w	r2, [r4, #1300]	; 0x514
    4796:	1c40      	adds	r0, r0, #1
    4798:	b2c0      	uxtb	r0, r0
    479a:	2814      	cmp	r0, #20
    479c:	d3f4      	bcc.n	4788 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x1c>
    479e:	bd10      	pop	{r4, pc}
    47a0:	fffe0000 	.word	0xfffe0000
    47a4:	4001f508 	.word	0x4001f508
    47a8:	4001f000 	.word	0x4001f000
    47ac:	b570      	push	{r4, r5, r6, lr}
    47ae:	2420      	movs	r4, #32
    47b0:	2100      	movs	r1, #0
    47b2:	2301      	movs	r3, #1
    47b4:	fa20 f201 	lsr.w	r2, r0, r1
    47b8:	07d2      	lsls	r2, r2, #31
    47ba:	d020      	beq.n	47fe <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    47bc:	b24a      	sxtb	r2, r1
    47be:	2a00      	cmp	r2, #0
    47c0:	db10      	blt.n	47e4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x78>
    47c2:	bf00      	nop
    47c4:	ea4f 1652 	mov.w	r6, r2, lsr #5
    47c8:	ea4f 0686 	mov.w	r6, r6, lsl #2
    47cc:	f002 051f 	and.w	r5, r2, #31
    47d0:	f106 26e0 	add.w	r6, r6, #3758153728	; 0xe000e000
    47d4:	fa03 f505 	lsl.w	r5, r3, r5
    47d8:	f8c6 5180 	str.w	r5, [r6, #384]	; 0x180
    47dc:	f3bf 8f4f 	dsb	sy
    47e0:	f3bf 8f6f 	isb	sy
    47e4:	db0b      	blt.n	47fe <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x92>
    47e6:	f002 051f 	and.w	r5, r2, #31
    47ea:	ea4f 1252 	mov.w	r2, r2, lsr #5
    47ee:	ea4f 0282 	mov.w	r2, r2, lsl #2
    47f2:	f102 22e0 	add.w	r2, r2, #3758153728	; 0xe000e000
    47f6:	fa03 f505 	lsl.w	r5, r3, r5
    47fa:	f8c2 5280 	str.w	r5, [r2, #640]	; 0x280
    47fe:	f101 0101 	add.w	r1, r1, #1
    4802:	42a1      	cmp	r1, r4
    4804:	d3d6      	bcc.n	47b4 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x48>
    4806:	bd70      	pop	{r4, r5, r6, pc}
    4808:	b570      	push	{r4, r5, r6, lr}
    480a:	0042      	lsls	r2, r0, #1
    480c:	f04f 0100 	mov.w	r1, #0
    4810:	d501      	bpl.n	4816 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xaa>
    4812:	4a14      	ldr	r2, [pc, #80]	; (4864 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xf8>)
    4814:	6011      	str	r1, [r2, #0]
    4816:	f3c0 3280 	ubfx	r2, r0, #14, #1
    481a:	f3c0 33c0 	ubfx	r3, r0, #15, #1
    481e:	429a      	cmp	r2, r3
    4820:	d003      	beq.n	482a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xbe>
    4822:	2169      	movs	r1, #105	; 0x69
    4824:	201b      	movs	r0, #27
    4826:	f7ff fb4b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    482a:	f410 4f40 	tst.w	r0, #49152	; 0xc000
    482e:	d014      	beq.n	485a <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xee>
    4830:	4a0d      	ldr	r2, [pc, #52]	; (4868 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0xfc>)
    4832:	2001      	movs	r0, #1
    4834:	6050      	str	r0, [r2, #4]
    4836:	1e83      	subs	r3, r0, #2
    4838:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    483c:	4a0b      	ldr	r2, [pc, #44]	; (486c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x100>)
    483e:	6090      	str	r0, [r2, #8]
    4840:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
    4844:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4848:	4c09      	ldr	r4, [pc, #36]	; (4870 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x104>)
    484a:	6021      	str	r1, [r4, #0]
    484c:	1d25      	adds	r5, r4, #4
    484e:	6028      	str	r0, [r5, #0]
    4850:	6090      	str	r0, [r2, #8]
    4852:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    4856:	6021      	str	r1, [r4, #0]
    4858:	6028      	str	r0, [r5, #0]
    485a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    485e:	f7ff bf8d 	b.w	477c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    4862:	0000      	.short	0x0000
    4864:	4001e504 	.word	0x4001e504
    4868:	4000e000 	.word	0x4000e000
    486c:	4000f000 	.word	0x4000f000
    4870:	4000f500 	.word	0x4000f500

00004874 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ>:
    4874:	b570      	push	{r4, r5, r6, lr}
    4876:	4c0a      	ldr	r4, [pc, #40]	; (48a0 <sym_E5WZNPP2DINHF6K4PHXLYLX5AXTYBQYGQESRSGQ+0x2c>)
    4878:	460d      	mov	r5, r1
    487a:	6020      	str	r0, [r4, #0]
    487c:	f7ff ffc4 	bl	4808 <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x9c>
    4880:	6820      	ldr	r0, [r4, #0]
    4882:	f7ff ff93 	bl	47ac <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x40>
    4886:	f000 f883 	bl	4990 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>
    488a:	f7ff ff77 	bl	477c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ+0x10>
    488e:	f009 f820 	bl	d8d2 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>
    4892:	4628      	mov	r0, r5
    4894:	f000 f8b6 	bl	4a04 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>
    4898:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    489c:	f000 b8ce 	b.w	4a3c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>
    48a0:	20000084 	.word	0x20000084

000048a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>:
    48a4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    48a8:	4c36      	ldr	r4, [pc, #216]	; (4984 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe0>)
    48aa:	b082      	sub	sp, #8
    48ac:	f8d4 b504 	ldr.w	fp, [r4, #1284]	; 0x504
    48b0:	2601      	movs	r6, #1
    48b2:	4835      	ldr	r0, [pc, #212]	; (4988 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    48b4:	f007 fe6b 	bl	c58e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    48b8:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 4988 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>
    48bc:	b920      	cbnz	r0, 48c8 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x24>
    48be:	2600      	movs	r6, #0
    48c0:	f109 0001 	add.w	r0, r9, #1
    48c4:	f007 fe7a 	bl	c5bc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    48c8:	f44f 7580 	mov.w	r5, #256	; 0x100
    48cc:	f04f 0800 	mov.w	r8, #0
    48d0:	1d2f      	adds	r7, r5, #4
    48d2:	2101      	movs	r1, #1
    48d4:	6061      	str	r1, [r4, #4]
    48d6:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    48da:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    48de:	9802      	ldr	r0, [sp, #8]
    48e0:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
    48e4:	6021      	str	r1, [r4, #0]
    48e6:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 498c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe8>
    48ea:	e01c      	b.n	4926 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    48ec:	f8da 0000 	ldr.w	r0, [sl]
    48f0:	06c0      	lsls	r0, r0, #27
    48f2:	d518      	bpl.n	4926 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    48f4:	200e      	movs	r0, #14
    48f6:	f008 ffd8 	bl	d8aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    48fa:	f3ef 8010 	mrs	r0, PRIMASK
    48fe:	9000      	str	r0, [sp, #0]
    4900:	b672      	cpsid	i
    4902:	2103      	movs	r1, #3
    4904:	4620      	mov	r0, r4
    4906:	f8c4 1304 	str.w	r1, [r4, #772]	; 0x304
    490a:	4629      	mov	r1, r5
    490c:	f008 ffda 	bl	d8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4910:	b930      	cbnz	r0, 4920 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    4912:	4639      	mov	r1, r7
    4914:	4620      	mov	r0, r4
    4916:	f008 ffd5 	bl	d8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    491a:	b908      	cbnz	r0, 4920 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x7c>
    491c:	f7ff f916 	bl	3b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    4920:	9800      	ldr	r0, [sp, #0]
    4922:	b900      	cbnz	r0, 4926 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x82>
    4924:	b662      	cpsie	i
    4926:	4629      	mov	r1, r5
    4928:	4620      	mov	r0, r4
    492a:	f008 ffcb 	bl	d8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    492e:	b928      	cbnz	r0, 493c <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x98>
    4930:	4639      	mov	r1, r7
    4932:	4620      	mov	r0, r4
    4934:	f008 ffc6 	bl	d8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4938:	2800      	cmp	r0, #0
    493a:	d0d7      	beq.n	48ec <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x48>
    493c:	4639      	mov	r1, r7
    493e:	4620      	mov	r0, r4
    4940:	f008 ffc0 	bl	d8c4 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x5a>
    4944:	2800      	cmp	r0, #0
    4946:	d1c4      	bne.n	48d2 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x2e>
    4948:	b136      	cbz	r6, 4958 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xb4>
    494a:	f8c4 b504 	str.w	fp, [r4, #1284]	; 0x504
    494e:	f109 0001 	add.w	r0, r9, #1
    4952:	f007 fe1c 	bl	c58e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4956:	e012      	b.n	497e <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xda>
    4958:	f109 0001 	add.w	r0, r9, #1
    495c:	f007 fe17 	bl	c58e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>
    4960:	2800      	cmp	r0, #0
    4962:	d1ad      	bne.n	48c0 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0x1c>
    4964:	2003      	movs	r0, #3
    4966:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    496a:	f8c4 8104 	str.w	r8, [r4, #260]	; 0x104
    496e:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
    4972:	200e      	movs	r0, #14
    4974:	f008 ff99 	bl	d8aa <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x40>
    4978:	4803      	ldr	r0, [pc, #12]	; (4988 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI+0xe4>)
    497a:	f007 fe1f 	bl	c5bc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>
    497e:	2000      	movs	r0, #0
    4980:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4984:	4000e000 	.word	0x4000e000
    4988:	20000287 	.word	0x20000287
    498c:	e000ed10 	.word	0xe000ed10

00004990 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA>:
    4990:	b510      	push	{r4, lr}
    4992:	4808      	ldr	r0, [pc, #32]	; (49b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    4994:	f007 fe0e 	bl	c5b4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    4998:	b108      	cbz	r0, 499e <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0xe>
    499a:	2125      	movs	r1, #37	; 0x25
    499c:	e006      	b.n	49ac <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x1c>
    499e:	4805      	ldr	r0, [pc, #20]	; (49b4 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x24>)
    49a0:	1c40      	adds	r0, r0, #1
    49a2:	f007 fe07 	bl	c5b4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>
    49a6:	2800      	cmp	r0, #0
    49a8:	d003      	beq.n	49b2 <sym_RZ4KEX57U2ASIFFSRQDHBCB7WVJNTOCZSYKJFSA+0x22>
    49aa:	2129      	movs	r1, #41	; 0x29
    49ac:	201d      	movs	r0, #29
    49ae:	f7ff fa87 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    49b2:	bd10      	pop	{r4, pc}
    49b4:	20000287 	.word	0x20000287

000049b8 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI>:
    49b8:	b570      	push	{r4, r5, r6, lr}
    49ba:	4911      	ldr	r1, [pc, #68]	; (4a00 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x48>)
    49bc:	680a      	ldr	r2, [r1, #0]
    49be:	b1ea      	cbz	r2, 49fc <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x44>
    49c0:	2300      	movs	r3, #0
    49c2:	461d      	mov	r5, r3
    49c4:	2401      	movs	r4, #1
    49c6:	684a      	ldr	r2, [r1, #4]
    49c8:	1c52      	adds	r2, r2, #1
    49ca:	604a      	str	r2, [r1, #4]
    49cc:	2a0c      	cmp	r2, #12
    49ce:	d300      	bcc.n	49d2 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x1a>
    49d0:	604d      	str	r5, [r1, #4]
    49d2:	790e      	ldrb	r6, [r1, #4]
    49d4:	fa04 f206 	lsl.w	r2, r4, r6
    49d8:	680e      	ldr	r6, [r1, #0]
    49da:	4216      	tst	r6, r2
    49dc:	d00b      	beq.n	49f6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x3e>
    49de:	f3ef 8310 	mrs	r3, PRIMASK
    49e2:	b672      	cpsid	i
    49e4:	680c      	ldr	r4, [r1, #0]
    49e6:	4394      	bics	r4, r2
    49e8:	600c      	str	r4, [r1, #0]
    49ea:	b903      	cbnz	r3, 49ee <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0x36>
    49ec:	b662      	cpsie	i
    49ee:	6849      	ldr	r1, [r1, #4]
    49f0:	6001      	str	r1, [r0, #0]
    49f2:	2000      	movs	r0, #0
    49f4:	bd70      	pop	{r4, r5, r6, pc}
    49f6:	1c5b      	adds	r3, r3, #1
    49f8:	2b0c      	cmp	r3, #12
    49fa:	d3e4      	bcc.n	49c6 <sym_YRXVGCYVFXOSIQO43AC5UEELHEXP2A4UAFUQRPI+0xe>
    49fc:	2005      	movs	r0, #5
    49fe:	bd70      	pop	{r4, r5, r6, pc}
    4a00:	20000088 	.word	0x20000088

00004a04 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI>:
    4a04:	4802      	ldr	r0, [pc, #8]	; (4a10 <sym_7YLXP6BHTAWWWMXLB5XOZU3Q27WEPTH5PONOKOI+0xc>)
    4a06:	2100      	movs	r1, #0
    4a08:	6001      	str	r1, [r0, #0]
    4a0a:	6041      	str	r1, [r0, #4]
    4a0c:	4770      	bx	lr
    4a0e:	0000      	.short	0x0000
    4a10:	20000088 	.word	0x20000088

00004a14 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY>:
    4a14:	b510      	push	{r4, lr}
    4a16:	4c08      	ldr	r4, [pc, #32]	; (4a38 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x24>)
    4a18:	7861      	ldrb	r1, [r4, #1]
    4a1a:	b109      	cbz	r1, 4a20 <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0xc>
    4a1c:	200f      	movs	r0, #15
    4a1e:	bd10      	pop	{r4, pc}
    4a20:	f7ff f820 	bl	3a64 <sym_W7ROFHNOSDKPIRUKDGIZZ5YR3MC3DAM2YLJOUIA>
    4a24:	7020      	strb	r0, [r4, #0]
    4a26:	28ff      	cmp	r0, #255	; 0xff
    4a28:	d001      	beq.n	4a2e <sym_QFSP7NEBRUPCXI7KU3RYDOWD7SSPVNXVSULPYYY+0x1a>
    4a2a:	2000      	movs	r0, #0
    4a2c:	bd10      	pop	{r4, pc}
    4a2e:	2176      	movs	r1, #118	; 0x76
    4a30:	201f      	movs	r0, #31
    4a32:	f7ff fa45 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4a36:	0000      	.short	0x0000
    4a38:	20000090 	.word	0x20000090

00004a3c <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI>:
    4a3c:	4901      	ldr	r1, [pc, #4]	; (4a44 <sym_O2AFZAWKVBYRIBDK67CHKRSMY4WR2S6V2VOPETI+0x8>)
    4a3e:	2000      	movs	r0, #0
    4a40:	7048      	strb	r0, [r1, #1]
    4a42:	4770      	bx	lr
    4a44:	20000090 	.word	0x20000090

00004a48 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>:
    4a48:	4806      	ldr	r0, [pc, #24]	; (4a64 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x1c>)
    4a4a:	4a07      	ldr	r2, [pc, #28]	; (4a68 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x20>)
    4a4c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4a4e:	8852      	ldrh	r2, [r2, #2]
    4a50:	4291      	cmp	r1, r2
    4a52:	d104      	bne.n	4a5e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4a54:	f890 0022 	ldrb.w	r0, [r0, #34]	; 0x22
    4a58:	b108      	cbz	r0, 4a5e <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY+0x16>
    4a5a:	2000      	movs	r0, #0
    4a5c:	4770      	bx	lr
    4a5e:	2001      	movs	r0, #1
    4a60:	4770      	bx	lr
    4a62:	0000      	.short	0x0000
    4a64:	2000131c 	.word	0x2000131c
    4a68:	2000026c 	.word	0x2000026c

00004a6c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>:
    4a6c:	4901      	ldr	r1, [pc, #4]	; (4a74 <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I+0x8>)
    4a6e:	8048      	strh	r0, [r1, #2]
    4a70:	4770      	bx	lr
    4a72:	0000      	.short	0x0000
    4a74:	2000026c 	.word	0x2000026c

00004a78 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>:
    4a78:	4808      	ldr	r0, [pc, #32]	; (4a9c <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x24>)
    4a7a:	4a09      	ldr	r2, [pc, #36]	; (4aa0 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x28>)
    4a7c:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    4a7e:	8852      	ldrh	r2, [r2, #2]
    4a80:	4291      	cmp	r1, r2
    4a82:	d109      	bne.n	4a98 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4a84:	f64f 71ff 	movw	r1, #65535	; 0xffff
    4a88:	8481      	strh	r1, [r0, #36]	; 0x24
    4a8a:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4a8e:	b119      	cbz	r1, 4a98 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y+0x20>
    4a90:	2100      	movs	r1, #0
    4a92:	7001      	strb	r1, [r0, #0]
    4a94:	2001      	movs	r0, #1
    4a96:	4770      	bx	lr
    4a98:	2000      	movs	r0, #0
    4a9a:	4770      	bx	lr
    4a9c:	2000131c 	.word	0x2000131c
    4aa0:	2000026c 	.word	0x2000026c

00004aa4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>:
    4aa4:	4807      	ldr	r0, [pc, #28]	; (4ac4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4aa6:	f810 1f22 	ldrb.w	r1, [r0, #34]!
    4aaa:	2901      	cmp	r1, #1
    4aac:	d007      	beq.n	4abe <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x1a>
    4aae:	2101      	movs	r1, #1
    4ab0:	7001      	strb	r1, [r0, #0]
    4ab2:	4805      	ldr	r0, [pc, #20]	; (4ac8 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x24>)
    4ab4:	4903      	ldr	r1, [pc, #12]	; (4ac4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA+0x20>)
    4ab6:	8800      	ldrh	r0, [r0, #0]
    4ab8:	8488      	strh	r0, [r1, #36]	; 0x24
    4aba:	2001      	movs	r0, #1
    4abc:	4770      	bx	lr
    4abe:	2000      	movs	r0, #0
    4ac0:	4770      	bx	lr
    4ac2:	0000      	.short	0x0000
    4ac4:	2000131c 	.word	0x2000131c
    4ac8:	2000026c 	.word	0x2000026c

00004acc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>:
    4acc:	4906      	ldr	r1, [pc, #24]	; (4ae8 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x1c>)
    4ace:	4b07      	ldr	r3, [pc, #28]	; (4aec <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x20>)
    4ad0:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4ad2:	885b      	ldrh	r3, [r3, #2]
    4ad4:	429a      	cmp	r2, r3
    4ad6:	d105      	bne.n	4ae4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4ad8:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4adc:	b112      	cbz	r2, 4ae4 <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI+0x18>
    4ade:	6001      	str	r1, [r0, #0]
    4ae0:	2001      	movs	r0, #1
    4ae2:	4770      	bx	lr
    4ae4:	2000      	movs	r0, #0
    4ae6:	4770      	bx	lr
    4ae8:	2000131c 	.word	0x2000131c
    4aec:	2000026c 	.word	0x2000026c

00004af0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>:
    4af0:	4909      	ldr	r1, [pc, #36]	; (4b18 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4af2:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4af4:	f5a2 437f 	sub.w	r3, r2, #65280	; 0xff00
    4af8:	3bff      	subs	r3, #255	; 0xff
    4afa:	d002      	beq.n	4b02 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x12>
    4afc:	2100      	movs	r1, #0
    4afe:	6001      	str	r1, [r0, #0]
    4b00:	e007      	b.n	4b12 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4b02:	f891 2022 	ldrb.w	r2, [r1, #34]	; 0x22
    4b06:	4904      	ldr	r1, [pc, #16]	; (4b18 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x28>)
    4b08:	2a01      	cmp	r2, #1
    4b0a:	d002      	beq.n	4b12 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI+0x22>
    4b0c:	6001      	str	r1, [r0, #0]
    4b0e:	2001      	movs	r0, #1
    4b10:	4770      	bx	lr
    4b12:	2000      	movs	r0, #0
    4b14:	4770      	bx	lr
    4b16:	0000      	.short	0x0000
    4b18:	2000131c 	.word	0x2000131c

00004b1c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>:
    4b1c:	4901      	ldr	r1, [pc, #4]	; (4b24 <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY+0x8>)
    4b1e:	8008      	strh	r0, [r1, #0]
    4b20:	4770      	bx	lr
    4b22:	0000      	.short	0x0000
    4b24:	2000026c 	.word	0x2000026c

00004b28 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>:
    4b28:	4905      	ldr	r1, [pc, #20]	; (4b40 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x18>)
    4b2a:	2000      	movs	r0, #0
    4b2c:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4b30:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4b34:	8488      	strh	r0, [r1, #36]	; 0x24
    4b36:	4903      	ldr	r1, [pc, #12]	; (4b44 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x1c>)
    4b38:	8008      	strh	r0, [r1, #0]
    4b3a:	8048      	strh	r0, [r1, #2]
    4b3c:	4770      	bx	lr
    4b3e:	0000      	.short	0x0000
    4b40:	2000131c 	.word	0x2000131c
    4b44:	2000026c 	.word	0x2000026c
    4b48:	4905      	ldr	r1, [pc, #20]	; (4b60 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x38>)
    4b4a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    4b4c:	4282      	cmp	r2, r0
    4b4e:	d105      	bne.n	4b5c <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x34>
    4b50:	2000      	movs	r0, #0
    4b52:	f881 0022 	strb.w	r0, [r1, #34]	; 0x22
    4b56:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4b5a:	8488      	strh	r0, [r1, #36]	; 0x24
    4b5c:	4770      	bx	lr
    4b5e:	0000      	.short	0x0000
    4b60:	2000131c 	.word	0x2000131c

00004b64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>:
    4b64:	4a0a      	ldr	r2, [pc, #40]	; (4b90 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x2c>)
    4b66:	b110      	cbz	r0, 4b6e <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0xa>
    4b68:	2801      	cmp	r0, #1
    4b6a:	d007      	beq.n	4b7c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x18>
    4b6c:	e00e      	b.n	4b8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4b6e:	7850      	ldrb	r0, [r2, #1]
    4b70:	b160      	cbz	r0, 4b8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4b72:	f8d2 0002 	ldr.w	r0, [r2, #2]
    4b76:	6008      	str	r0, [r1, #0]
    4b78:	88d0      	ldrh	r0, [r2, #6]
    4b7a:	e004      	b.n	4b86 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x22>
    4b7c:	7810      	ldrb	r0, [r2, #0]
    4b7e:	b128      	cbz	r0, 4b8c <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI+0x28>
    4b80:	6890      	ldr	r0, [r2, #8]
    4b82:	6008      	str	r0, [r1, #0]
    4b84:	8990      	ldrh	r0, [r2, #12]
    4b86:	8088      	strh	r0, [r1, #4]
    4b88:	2001      	movs	r0, #1
    4b8a:	4770      	bx	lr
    4b8c:	2000      	movs	r0, #0
    4b8e:	4770      	bx	lr
    4b90:	20000289 	.word	0x20000289

00004b94 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>:
    4b94:	4a08      	ldr	r2, [pc, #32]	; (4bb8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x24>)
    4b96:	2301      	movs	r3, #1
    4b98:	b138      	cbz	r0, 4baa <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x16>
    4b9a:	2801      	cmp	r0, #1
    4b9c:	d104      	bne.n	4ba8 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q+0x14>
    4b9e:	7013      	strb	r3, [r2, #0]
    4ba0:	6808      	ldr	r0, [r1, #0]
    4ba2:	6090      	str	r0, [r2, #8]
    4ba4:	8888      	ldrh	r0, [r1, #4]
    4ba6:	8190      	strh	r0, [r2, #12]
    4ba8:	4770      	bx	lr
    4baa:	7053      	strb	r3, [r2, #1]
    4bac:	6808      	ldr	r0, [r1, #0]
    4bae:	f8c2 0002 	str.w	r0, [r2, #2]
    4bb2:	8888      	ldrh	r0, [r1, #4]
    4bb4:	80d0      	strh	r0, [r2, #6]
    4bb6:	4770      	bx	lr
    4bb8:	20000289 	.word	0x20000289

00004bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>:
    4bbc:	4906      	ldr	r1, [pc, #24]	; (4bd8 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x1c>)
    4bbe:	b110      	cbz	r0, 4bc6 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xa>
    4bc0:	2801      	cmp	r0, #1
    4bc2:	d002      	beq.n	4bca <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0xe>
    4bc4:	e005      	b.n	4bd2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4bc6:	7848      	ldrb	r0, [r1, #1]
    4bc8:	e000      	b.n	4bcc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x10>
    4bca:	7808      	ldrb	r0, [r1, #0]
    4bcc:	b108      	cbz	r0, 4bd2 <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A+0x16>
    4bce:	2001      	movs	r0, #1
    4bd0:	4770      	bx	lr
    4bd2:	2000      	movs	r0, #0
    4bd4:	4770      	bx	lr
    4bd6:	0000      	.short	0x0000
    4bd8:	20000289 	.word	0x20000289

00004bdc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>:
    4bdc:	4901      	ldr	r1, [pc, #4]	; (4be4 <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I+0x8>)
    4bde:	7448      	strb	r0, [r1, #17]
    4be0:	4770      	bx	lr
    4be2:	0000      	.short	0x0000
    4be4:	20000b7a 	.word	0x20000b7a

00004be8 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I>:
    4be8:	b578      	push	{r3, r4, r5, r6, lr}
    4bea:	4913      	ldr	r1, [pc, #76]	; (4c38 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x50>)
    4bec:	7c4a      	ldrb	r2, [r1, #17]
    4bee:	b30a      	cbz	r2, 4c34 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4bf0:	7c0a      	ldrb	r2, [r1, #16]
    4bf2:	f88d 2000 	strb.w	r2, [sp]
    4bf6:	9a00      	ldr	r2, [sp, #0]
    4bf8:	9200      	str	r2, [sp, #0]
    4bfa:	f89d 2000 	ldrb.w	r2, [sp]
    4bfe:	b1ca      	cbz	r2, 4c34 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x4c>
    4c00:	2300      	movs	r3, #0
    4c02:	f101 0210 	add.w	r2, r1, #16
    4c06:	241f      	movs	r4, #31
    4c08:	f1a1 0552 	sub.w	r5, r1, #82	; 0x52
    4c0c:	7c0e      	ldrb	r6, [r1, #16]
    4c0e:	f88d 6000 	strb.w	r6, [sp]
    4c12:	9e00      	ldr	r6, [sp, #0]
    4c14:	9600      	str	r6, [sp, #0]
    4c16:	f89d 6000 	ldrb.w	r6, [sp]
    4c1a:	b14e      	cbz	r6, 4c30 <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x48>
    4c1c:	7013      	strb	r3, [r2, #0]
    4c1e:	7043      	strb	r3, [r0, #1]
    4c20:	7004      	strb	r4, [r0, #0]
    4c22:	f8d5 605a 	ldr.w	r6, [r5, #90]	; 0x5a
    4c26:	6046      	str	r6, [r0, #4]
    4c28:	f8d5 605e 	ldr.w	r6, [r5, #94]	; 0x5e
    4c2c:	6086      	str	r6, [r0, #8]
    4c2e:	e7ed      	b.n	4c0c <sym_Y7AVZMA56ZL7YUO4EH7QCTNH6P3ZXX2D4F33L2I+0x24>
    4c30:	2001      	movs	r0, #1
    4c32:	bd78      	pop	{r3, r4, r5, r6, pc}
    4c34:	2000      	movs	r0, #0
    4c36:	bd78      	pop	{r3, r4, r5, r6, pc}
    4c38:	20000b7a 	.word	0x20000b7a

00004c3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>:
    4c3c:	b510      	push	{r4, lr}
    4c3e:	4604      	mov	r4, r0
    4c40:	f000 f95c 	bl	4efc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    4c44:	b118      	cbz	r0, 4c4e <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x12>
    4c46:	21bd      	movs	r1, #189	; 0xbd
    4c48:	2027      	movs	r0, #39	; 0x27
    4c4a:	f7ff f939 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4c4e:	4803      	ldr	r0, [pc, #12]	; (4c5c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x20>)
    4c50:	2101      	movs	r1, #1
    4c52:	f009 fa30 	bl	e0b6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    4c56:	4802      	ldr	r0, [pc, #8]	; (4c60 <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA+0x24>)
    4c58:	62c4      	str	r4, [r0, #44]	; 0x2c
    4c5a:	bd10      	pop	{r4, pc}
    4c5c:	20000b58 	.word	0x20000b58
    4c60:	200000ac 	.word	0x200000ac

00004c64 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>:
    4c64:	4901      	ldr	r1, [pc, #4]	; (4c6c <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA+0x8>)
    4c66:	2001      	movs	r0, #1
    4c68:	7188      	strb	r0, [r1, #6]
    4c6a:	4770      	bx	lr
    4c6c:	200000ac 	.word	0x200000ac

00004c70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>:
    4c70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4c74:	4d66      	ldr	r5, [pc, #408]	; (4e10 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a0>)
    4c76:	9c0a      	ldr	r4, [sp, #40]	; 0x28
    4c78:	782e      	ldrb	r6, [r5, #0]
    4c7a:	bbee      	cbnz	r6, 4cf8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4c7c:	b3e2      	cbz	r2, 4cf8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4c7e:	b3db      	cbz	r3, 4cf8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4c80:	b3d4      	cbz	r4, 4cf8 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x88>
    4c82:	f105 0614 	add.w	r6, r5, #20
    4c86:	e9c5 010e 	strd	r0, r1, [r5, #56]	; 0x38
    4c8a:	e886 001c 	stmia.w	r6, {r2, r3, r4}
    4c8e:	2700      	movs	r7, #0
    4c90:	71af      	strb	r7, [r5, #6]
    4c92:	716f      	strb	r7, [r5, #5]
    4c94:	70ef      	strb	r7, [r5, #3]
    4c96:	70af      	strb	r7, [r5, #2]
    4c98:	712f      	strb	r7, [r5, #4]
    4c9a:	81af      	strh	r7, [r5, #12]
    4c9c:	81ef      	strh	r7, [r5, #14]
    4c9e:	f000 f971 	bl	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4ca2:	4606      	mov	r6, r0
    4ca4:	f000 f968 	bl	4f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4ca8:	4604      	mov	r4, r0
    4caa:	f006 fe91 	bl	b9d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    4cae:	f006 fb75 	bl	b39c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    4cb2:	f994 006e 	ldrsb.w	r0, [r4, #110]	; 0x6e
    4cb6:	f006 ff11 	bl	badc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    4cba:	f104 0018 	add.w	r0, r4, #24
    4cbe:	f006 ffeb 	bl	bc98 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    4cc2:	6920      	ldr	r0, [r4, #16]
    4cc4:	f006 ffde 	bl	bc84 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    4cc8:	f896 0023 	ldrb.w	r0, [r6, #35]	; 0x23
    4ccc:	f007 f802 	bl	bcd4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    4cd0:	f04f 0b01 	mov.w	fp, #1
    4cd4:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    4cd8:	2000      	movs	r0, #0
    4cda:	f006 fd3d 	bl	b758 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    4cde:	2800      	cmp	r0, #0
    4ce0:	d07e      	beq.n	4de0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x170>
    4ce2:	484c      	ldr	r0, [pc, #304]	; (4e14 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a4>)
    4ce4:	f006 fdac 	bl	b840 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    4ce8:	8820      	ldrh	r0, [r4, #0]
    4cea:	f7ff fcfd 	bl	46e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    4cee:	6328      	str	r0, [r5, #48]	; 0x30
    4cf0:	8820      	ldrh	r0, [r4, #0]
    4cf2:	f7ff fce3 	bl	46bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    4cf6:	e000      	b.n	4cfa <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x8a>
    4cf8:	e00a      	b.n	4d10 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa0>
    4cfa:	6368      	str	r0, [r5, #52]	; 0x34
    4cfc:	f894 0077 	ldrb.w	r0, [r4, #119]	; 0x77
    4d00:	f88d 0000 	strb.w	r0, [sp]
    4d04:	9800      	ldr	r0, [sp, #0]
    4d06:	9000      	str	r0, [sp, #0]
    4d08:	f89d 0000 	ldrb.w	r0, [sp]
    4d0c:	b118      	cbz	r0, 4d16 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xa6>
    4d0e:	e012      	b.n	4d36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4d10:	f44f 718a 	mov.w	r1, #276	; 0x114
    4d14:	e079      	b.n	4e0a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x19a>
    4d16:	6f20      	ldr	r0, [r4, #112]	; 0x70
    4d18:	b168      	cbz	r0, 4d36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4d1a:	8e70      	ldrh	r0, [r6, #50]	; 0x32
    4d1c:	88b1      	ldrh	r1, [r6, #4]
    4d1e:	4288      	cmp	r0, r1
    4d20:	d109      	bne.n	4d36 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xc6>
    4d22:	f8b4 1074 	ldrh.w	r1, [r4, #116]	; 0x74
    4d26:	2201      	movs	r2, #1
    4d28:	4408      	add	r0, r1
    4d2a:	8670      	strh	r0, [r6, #50]	; 0x32
    4d2c:	f894 0076 	ldrb.w	r0, [r4, #118]	; 0x76
    4d30:	6f21      	ldr	r1, [r4, #112]	; 0x70
    4d32:	f7fd fd67 	bl	2804 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4d36:	f106 0168 	add.w	r1, r6, #104	; 0x68
    4d3a:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 4e18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>
    4d3e:	e891 100e 	ldmia.w	r1, {r1, r2, r3, ip}
    4d42:	f109 0808 	add.w	r8, r9, #8
    4d46:	e888 100e 	stmia.w	r8, {r1, r2, r3, ip}
    4d4a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
    4d4c:	f8c9 1021 	str.w	r1, [r9, #33]	; 0x21
    4d50:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
    4d52:	f8c9 1025 	str.w	r1, [r9, #37]	; 0x25
    4d56:	f000 f983 	bl	5060 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x148>
    4d5a:	4601      	mov	r1, r0
    4d5c:	8f20      	ldrh	r0, [r4, #56]	; 0x38
    4d5e:	46ba      	mov	sl, r7
    4d60:	f008 ff94 	bl	dc8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4d64:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
    4d66:	4281      	cmp	r1, r0
    4d68:	d200      	bcs.n	4d6c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0xfc>
    4d6a:	4608      	mov	r0, r1
    4d6c:	7228      	strb	r0, [r5, #8]
    4d6e:	46a8      	mov	r8, r5
    4d70:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    4d74:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    4d76:	7cf7      	ldrb	r7, [r6, #19]
    4d78:	8fa5      	ldrh	r5, [r4, #60]	; 0x3c
    4d7a:	2908      	cmp	r1, #8
    4d7c:	d100      	bne.n	4d80 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x110>
    4d7e:	2104      	movs	r1, #4
    4d80:	f008 ff84 	bl	dc8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    4d84:	b90f      	cbnz	r7, 4d8a <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x11a>
    4d86:	1d00      	adds	r0, r0, #4
    4d88:	b280      	uxth	r0, r0
    4d8a:	4285      	cmp	r5, r0
    4d8c:	d200      	bcs.n	4d90 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x120>
    4d8e:	4628      	mov	r0, r5
    4d90:	b2c0      	uxtb	r0, r0
    4d92:	f888 0009 	strb.w	r0, [r8, #9]
    4d96:	7cf2      	ldrb	r2, [r6, #19]
    4d98:	b102      	cbz	r2, 4d9c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x12c>
    4d9a:	2204      	movs	r2, #4
    4d9c:	4410      	add	r0, r2
    4d9e:	f888 0007 	strb.w	r0, [r8, #7]
    4da2:	7cb1      	ldrb	r1, [r6, #18]
    4da4:	b1a1      	cbz	r1, 4dd0 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x160>
    4da6:	491c      	ldr	r1, [pc, #112]	; (4e18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4da8:	3108      	adds	r1, #8
    4daa:	f881 b018 	strb.w	fp, [r1, #24]
    4dae:	e9d6 0216 	ldrd	r0, r2, [r6, #88]	; 0x58
    4db2:	e9c1 0204 	strd	r0, r2, [r1, #16]
    4db6:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    4dba:	f008 fe14 	bl	d9e6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    4dbe:	4916      	ldr	r1, [pc, #88]	; (4e18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4dc0:	4603      	mov	r3, r0
    4dc2:	22fb      	movs	r2, #251	; 0xfb
    4dc4:	3108      	adds	r1, #8
    4dc6:	2000      	movs	r0, #0
    4dc8:	f006 fb32 	bl	b430 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    4dcc:	f006 fb66 	bl	b49c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    4dd0:	2001      	movs	r0, #1
    4dd2:	f000 fb95 	bl	5500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    4dd6:	4811      	ldr	r0, [pc, #68]	; (4e1c <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1ac>)
    4dd8:	6800      	ldr	r0, [r0, #0]
    4dda:	2803      	cmp	r0, #3
    4ddc:	d013      	beq.n	4e06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    4dde:	e000      	b.n	4de2 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x172>
    4de0:	e00f      	b.n	4e02 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x192>
    4de2:	280b      	cmp	r0, #11
    4de4:	d00f      	beq.n	4e06 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x196>
    4de6:	4648      	mov	r0, r9
    4de8:	f840 af52 	str.w	sl, [r0, #82]!
    4dec:	f8c0 a004 	str.w	sl, [r0, #4]
    4df0:	4809      	ldr	r0, [pc, #36]	; (4e18 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q+0x1a8>)
    4df2:	88b1      	ldrh	r1, [r6, #4]
    4df4:	3052      	adds	r0, #82	; 0x52
    4df6:	8041      	strh	r1, [r0, #2]
    4df8:	8821      	ldrh	r1, [r4, #0]
    4dfa:	8001      	strh	r1, [r0, #0]
    4dfc:	f896 1023 	ldrb.w	r1, [r6, #35]	; 0x23
    4e00:	7101      	strb	r1, [r0, #4]
    4e02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4e06:	f240 11c1 	movw	r1, #449	; 0x1c1
    4e0a:	2027      	movs	r0, #39	; 0x27
    4e0c:	f7ff f858 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e10:	200000ac 	.word	0x200000ac
    4e14:	00005684 	.word	0x00005684
    4e18:	20000b28 	.word	0x20000b28
    4e1c:	40001550 	.word	0x40001550

00004e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>:
    4e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e24:	4605      	mov	r5, r0
    4e26:	f000 f8ad 	bl	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4e2a:	4e33      	ldr	r6, [pc, #204]	; (4ef8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xd8>)
    4e2c:	4604      	mov	r4, r0
    4e2e:	6a70      	ldr	r0, [r6, #36]	; 0x24
    4e30:	7847      	ldrb	r7, [r0, #1]
    4e32:	b10d      	cbz	r5, 4e38 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x18>
    4e34:	2d01      	cmp	r5, #1
    4e36:	d103      	bne.n	4e40 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x20>
    4e38:	6b71      	ldr	r1, [r6, #52]	; 0x34
    4e3a:	f007 fd7a 	bl	c932 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>
    4e3e:	7070      	strb	r0, [r6, #1]
    4e40:	7870      	ldrb	r0, [r6, #1]
    4e42:	f04f 0800 	mov.w	r8, #0
    4e46:	f04f 0901 	mov.w	r9, #1
    4e4a:	b150      	cbz	r0, 4e62 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x42>
    4e4c:	2801      	cmp	r0, #1
    4e4e:	d01a      	beq.n	4e86 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x66>
    4e50:	2802      	cmp	r0, #2
    4e52:	d034      	beq.n	4ebe <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x9e>
    4e54:	2803      	cmp	r0, #3
    4e56:	d048      	beq.n	4eea <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xca>
    4e58:	f240 4115 	movw	r1, #1045	; 0x415
    4e5c:	2027      	movs	r0, #39	; 0x27
    4e5e:	f7ff f82f 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4e62:	2d01      	cmp	r5, #1
    4e64:	d032      	beq.n	4ecc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4e66:	f000 f8e7 	bl	5038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4e6a:	4639      	mov	r1, r7
    4e6c:	2201      	movs	r2, #1
    4e6e:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4e70:	f008 fa3d 	bl	d2ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4e74:	e028      	b.n	4ec8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xa8>
    4e76:	bf00      	nop
    4e78:	f884 8008 	strb.w	r8, [r4, #8]
    4e7c:	e031      	b.n	4ee2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4e7e:	bf00      	nop
    4e80:	f884 9008 	strb.w	r9, [r4, #8]
    4e84:	e02d      	b.n	4ee2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4e86:	2d01      	cmp	r5, #1
    4e88:	d008      	beq.n	4e9c <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x7c>
    4e8a:	f000 f8d5 	bl	5038 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x120>
    4e8e:	4639      	mov	r1, r7
    4e90:	2200      	movs	r2, #0
    4e92:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4e94:	f008 fa2b 	bl	d2ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>
    4e98:	2d02      	cmp	r5, #2
    4e9a:	d00b      	beq.n	4eb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4e9c:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4ea0:	1c40      	adds	r0, r0, #1
    4ea2:	f141 0100 	adc.w	r1, r1, #0
    4ea6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4eaa:	7a20      	ldrb	r0, [r4, #8]
    4eac:	2801      	cmp	r0, #1
    4eae:	d003      	beq.n	4eb8 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x98>
    4eb0:	f884 9008 	strb.w	r9, [r4, #8]
    4eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4eb8:	f884 8008 	strb.w	r8, [r4, #8]
    4ebc:	e7fa      	b.n	4eb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4ebe:	2d01      	cmp	r5, #1
    4ec0:	d004      	beq.n	4ecc <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xac>
    4ec2:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4ec4:	f008 fc4d 	bl	d762 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4ec8:	2d02      	cmp	r5, #2
    4eca:	d0f3      	beq.n	4eb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4ecc:	e9d4 0118 	ldrd	r0, r1, [r4, #96]	; 0x60
    4ed0:	1c40      	adds	r0, r0, #1
    4ed2:	f141 0100 	adc.w	r1, r1, #0
    4ed6:	e9c4 0118 	strd	r0, r1, [r4, #96]	; 0x60
    4eda:	7a20      	ldrb	r0, [r4, #8]
    4edc:	2801      	cmp	r0, #1
    4ede:	d1cf      	bne.n	4e80 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x60>
    4ee0:	e7ca      	b.n	4e78 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x58>
    4ee2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4ee6:	f001 b92b 	b.w	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4eea:	2d01      	cmp	r5, #1
    4eec:	d0e2      	beq.n	4eb4 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0x94>
    4eee:	6b70      	ldr	r0, [r6, #52]	; 0x34
    4ef0:	f008 fc37 	bl	d762 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>
    4ef4:	e7f5      	b.n	4ee2 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ+0xc2>
    4ef6:	0000      	.short	0x0000
    4ef8:	200000ac 	.word	0x200000ac

00004efc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>:
    4efc:	4804      	ldr	r0, [pc, #16]	; (4f10 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x14>)
    4efe:	7800      	ldrb	r0, [r0, #0]
    4f00:	b108      	cbz	r0, 4f06 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0xa>
    4f02:	200c      	movs	r0, #12
    4f04:	4770      	bx	lr
    4f06:	4903      	ldr	r1, [pc, #12]	; (4f14 <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA+0x18>)
    4f08:	2000      	movs	r0, #0
    4f0a:	7448      	strb	r0, [r1, #17]
    4f0c:	4770      	bx	lr
    4f0e:	0000      	.short	0x0000
    4f10:	200000ac 	.word	0x200000ac
    4f14:	20000b7a 	.word	0x20000b7a

00004f18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>:
    4f18:	4812      	ldr	r0, [pc, #72]	; (4f64 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c>)
    4f1a:	b508      	push	{r3, lr}
    4f1c:	7801      	ldrb	r1, [r0, #0]
    4f1e:	b139      	cbz	r1, 4f30 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x18>
    4f20:	7800      	ldrb	r0, [r0, #0]
    4f22:	2801      	cmp	r0, #1
    4f24:	d006      	beq.n	4f34 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1c>
    4f26:	f240 11d9 	movw	r1, #473	; 0x1d9
    4f2a:	2027      	movs	r0, #39	; 0x27
    4f2c:	f7fe ffc8 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    4f30:	f000 f9ce 	bl	52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    4f34:	f000 f820 	bl	4f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4f38:	f890 1077 	ldrb.w	r1, [r0, #119]	; 0x77
    4f3c:	f88d 1000 	strb.w	r1, [sp]
    4f40:	9900      	ldr	r1, [sp, #0]
    4f42:	9100      	str	r1, [sp, #0]
    4f44:	f89d 1000 	ldrb.w	r1, [sp]
    4f48:	2900      	cmp	r1, #0
    4f4a:	d10a      	bne.n	4f62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4f4c:	6f01      	ldr	r1, [r0, #112]	; 0x70
    4f4e:	2900      	cmp	r1, #0
    4f50:	d007      	beq.n	4f62 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4a>
    4f52:	f890 0076 	ldrb.w	r0, [r0, #118]	; 0x76
    4f56:	2200      	movs	r2, #0
    4f58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4f5c:	4611      	mov	r1, r2
    4f5e:	f7fd bc51 	b.w	2804 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    4f62:	bd08      	pop	{r3, pc}
    4f64:	200000ac 	.word	0x200000ac
    4f68:	4a02      	ldr	r2, [pc, #8]	; (4f74 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c>)
    4f6a:	8993      	ldrh	r3, [r2, #12]
    4f6c:	4303      	orrs	r3, r0
    4f6e:	8193      	strh	r3, [r2, #12]
    4f70:	6952      	ldr	r2, [r2, #20]
    4f72:	4710      	bx	r2
    4f74:	200000ac 	.word	0x200000ac
    4f78:	4801      	ldr	r0, [pc, #4]	; (4f80 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x68>)
    4f7a:	6840      	ldr	r0, [r0, #4]
    4f7c:	4770      	bx	lr
    4f7e:	0000      	.short	0x0000
    4f80:	200000e4 	.word	0x200000e4
    4f84:	4801      	ldr	r0, [pc, #4]	; (4f8c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x74>)
    4f86:	6840      	ldr	r0, [r0, #4]
    4f88:	3078      	adds	r0, #120	; 0x78
    4f8a:	4770      	bx	lr
    4f8c:	200000e4 	.word	0x200000e4
    4f90:	4a01      	ldr	r2, [pc, #4]	; (4f98 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x80>)
    4f92:	2100      	movs	r1, #0
    4f94:	6952      	ldr	r2, [r2, #20]
    4f96:	4710      	bx	r2
    4f98:	200000ac 	.word	0x200000ac
    4f9c:	b570      	push	{r4, r5, r6, lr}
    4f9e:	f7ff fff1 	bl	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    4fa2:	4604      	mov	r4, r0
    4fa4:	f7ff ffe8 	bl	4f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    4fa8:	4605      	mov	r5, r0
    4faa:	4621      	mov	r1, r4
    4fac:	f008 ff36 	bl	de1c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>
    4fb0:	f895 1026 	ldrb.w	r1, [r5, #38]	; 0x26
    4fb4:	2901      	cmp	r1, #1
    4fb6:	d114      	bne.n	4fe2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4fb8:	2800      	cmp	r0, #0
    4fba:	d012      	beq.n	4fe2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xca>
    4fbc:	4909      	ldr	r1, [pc, #36]	; (4fe4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xcc>)
    4fbe:	2001      	movs	r0, #1
    4fc0:	684a      	ldr	r2, [r1, #4]
    4fc2:	8829      	ldrh	r1, [r5, #0]
    4fc4:	f8a2 118a 	strh.w	r1, [r2, #394]	; 0x18a
    4fc8:	7a61      	ldrb	r1, [r4, #9]
    4fca:	f882 118c 	strb.w	r1, [r2, #396]	; 0x18c
    4fce:	7aa1      	ldrb	r1, [r4, #10]
    4fd0:	f882 118d 	strb.w	r1, [r2, #397]	; 0x18d
    4fd4:	f502 72c4 	add.w	r2, r2, #392	; 0x188
    4fd8:	7010      	strb	r0, [r2, #0]
    4fda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4fde:	f001 b8af 	b.w	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    4fe2:	bd70      	pop	{r4, r5, r6, pc}
    4fe4:	200000e4 	.word	0x200000e4
    4fe8:	b570      	push	{r4, r5, r6, lr}
    4fea:	4605      	mov	r5, r0
    4fec:	2901      	cmp	r1, #1
    4fee:	d81c      	bhi.n	502a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4ff0:	4c10      	ldr	r4, [pc, #64]	; (5034 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x11c>)
    4ff2:	69a1      	ldr	r1, [r4, #24]
    4ff4:	4788      	blx	r1
    4ff6:	b1c0      	cbz	r0, 502a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4ff8:	7960      	ldrb	r0, [r4, #5]
    4ffa:	b9b0      	cbnz	r0, 502a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    4ffc:	2d01      	cmp	r5, #1
    4ffe:	d116      	bne.n	502e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    5000:	f104 0010 	add.w	r0, r4, #16
    5004:	7800      	ldrb	r0, [r0, #0]
    5006:	06c1      	lsls	r1, r0, #27
    5008:	d405      	bmi.n	5016 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    500a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    500c:	7809      	ldrb	r1, [r1, #0]
    500e:	06c9      	lsls	r1, r1, #27
    5010:	d401      	bmi.n	5016 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xfe>
    5012:	2101      	movs	r1, #1
    5014:	e000      	b.n	5018 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x100>
    5016:	2100      	movs	r1, #0
    5018:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    501a:	b91a      	cbnz	r2, 5024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    501c:	8962      	ldrh	r2, [r4, #10]
    501e:	b10a      	cbz	r2, 5024 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x10c>
    5020:	06c0      	lsls	r0, r0, #27
    5022:	d502      	bpl.n	502a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x112>
    5024:	89a0      	ldrh	r0, [r4, #12]
    5026:	4301      	orrs	r1, r0
    5028:	d001      	beq.n	502e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x116>
    502a:	2001      	movs	r0, #1
    502c:	bd70      	pop	{r4, r5, r6, pc}
    502e:	2000      	movs	r0, #0
    5030:	bd70      	pop	{r4, r5, r6, pc}
    5032:	0000      	.short	0x0000
    5034:	200000ac 	.word	0x200000ac
    5038:	b510      	push	{r4, lr}
    503a:	4c08      	ldr	r4, [pc, #32]	; (505c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x144>)
    503c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    503e:	b138      	cbz	r0, 5050 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x138>
    5040:	8962      	ldrh	r2, [r4, #10]
    5042:	6a61      	ldr	r1, [r4, #36]	; 0x24
    5044:	1cd2      	adds	r2, r2, #3
    5046:	f007 fb4b 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    504a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    504c:	6260      	str	r0, [r4, #36]	; 0x24
    504e:	bd10      	pop	{r4, pc}
    5050:	f240 415b 	movw	r1, #1115	; 0x45b
    5054:	2027      	movs	r0, #39	; 0x27
    5056:	f7fe ff33 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    505a:	0000      	.short	0x0000
    505c:	200000ac 	.word	0x200000ac
    5060:	b510      	push	{r4, lr}
    5062:	f7ff ff89 	bl	4f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5066:	4604      	mov	r4, r0
    5068:	f7ff ff8c 	bl	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    506c:	7b41      	ldrb	r1, [r0, #13]
    506e:	4a0a      	ldr	r2, [pc, #40]	; (5098 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x180>)
    5070:	2924      	cmp	r1, #36	; 0x24
    5072:	d008      	beq.n	5086 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    5074:	7b80      	ldrb	r0, [r0, #14]
    5076:	2824      	cmp	r0, #36	; 0x24
    5078:	d005      	beq.n	5086 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16e>
    507a:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    507e:	2804      	cmp	r0, #4
    5080:	d100      	bne.n	5084 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x16c>
    5082:	2008      	movs	r0, #8
    5084:	bd10      	pop	{r4, pc}
    5086:	6850      	ldr	r0, [r2, #4]
    5088:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    508c:	f894 006a 	ldrb.w	r0, [r4, #106]	; 0x6a
    5090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5094:	f008 bcb5 	b.w	da02 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x20>
    5098:	200000e4 	.word	0x200000e4
    509c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    50a0:	4689      	mov	r9, r1
    50a2:	4606      	mov	r6, r0
    50a4:	f7ff ff6e 	bl	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    50a8:	4c58      	ldr	r4, [pc, #352]	; (520c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f4>)
    50aa:	2700      	movs	r7, #0
    50ac:	4605      	mov	r5, r0
    50ae:	f88d 7000 	strb.w	r7, [sp]
    50b2:	7820      	ldrb	r0, [r4, #0]
    50b4:	2802      	cmp	r0, #2
    50b6:	d004      	beq.n	50c2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1aa>
    50b8:	f240 41ba 	movw	r1, #1210	; 0x4ba
    50bc:	2027      	movs	r0, #39	; 0x27
    50be:	f7fe feff 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    50c2:	7ba0      	ldrb	r0, [r4, #14]
    50c4:	0640      	lsls	r0, r0, #25
    50c6:	d406      	bmi.n	50d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1be>
    50c8:	2040      	movs	r0, #64	; 0x40
    50ca:	f7ff ff61 	bl	4f90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    50ce:	89e0      	ldrh	r0, [r4, #14]
    50d0:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    50d4:	81e0      	strh	r0, [r4, #14]
    50d6:	7ce8      	ldrb	r0, [r5, #19]
    50d8:	f04f 0801 	mov.w	r8, #1
    50dc:	b3c6      	cbz	r6, 5150 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x238>
    50de:	f006 fa0d 	bl	b4fc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>
    50e2:	f006 f9f1 	bl	b4c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>
    50e6:	b968      	cbnz	r0, 5104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    50e8:	7ce8      	ldrb	r0, [r5, #19]
    50ea:	b158      	cbz	r0, 5104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    50ec:	6a60      	ldr	r0, [r4, #36]	; 0x24
    50ee:	7841      	ldrb	r1, [r0, #1]
    50f0:	b141      	cbz	r1, 5104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    50f2:	7800      	ldrb	r0, [r0, #0]
    50f4:	7a29      	ldrb	r1, [r5, #8]
    50f6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    50fa:	4288      	cmp	r0, r1
    50fc:	d102      	bne.n	5104 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1ec>
    50fe:	f884 8002 	strb.w	r8, [r4, #2]
    5102:	e064      	b.n	51ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    5104:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5106:	7841      	ldrb	r1, [r0, #1]
    5108:	8161      	strh	r1, [r4, #10]
    510a:	b121      	cbz	r1, 5116 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x1fe>
    510c:	6b60      	ldr	r0, [r4, #52]	; 0x34
    510e:	f008 faf5 	bl	d6fc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>
    5112:	62a0      	str	r0, [r4, #40]	; 0x28
    5114:	e000      	b.n	5118 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x200>
    5116:	62a7      	str	r7, [r4, #40]	; 0x28
    5118:	89e0      	ldrh	r0, [r4, #14]
    511a:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    511e:	81e0      	strh	r0, [r4, #14]
    5120:	6a60      	ldr	r0, [r4, #36]	; 0x24
    5122:	79e9      	ldrb	r1, [r5, #7]
    5124:	7800      	ldrb	r0, [r0, #0]
    5126:	f3c0 0080 	ubfx	r0, r0, #2, #1
    512a:	4288      	cmp	r0, r1
    512c:	d005      	beq.n	513a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x222>
    512e:	f000 f963 	bl	53f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4e0>
    5132:	89e0      	ldrh	r0, [r4, #14]
    5134:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    5138:	81e0      	strh	r0, [r4, #14]
    513a:	6a60      	ldr	r0, [r4, #36]	; 0x24
    513c:	7a29      	ldrb	r1, [r5, #8]
    513e:	7800      	ldrb	r0, [r0, #0]
    5140:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    5144:	4288      	cmp	r0, r1
    5146:	d10e      	bne.n	5166 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5148:	4668      	mov	r0, sp
    514a:	f000 f917 	bl	537c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x464>
    514e:	e00a      	b.n	5166 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x24e>
    5150:	e7ff      	b.n	5152 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x23a>
    5152:	b108      	cbz	r0, 5158 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x240>
    5154:	f006 f9cc 	bl	b4f0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>
    5158:	78e0      	ldrb	r0, [r4, #3]
    515a:	1c40      	adds	r0, r0, #1
    515c:	70e0      	strb	r0, [r4, #3]
    515e:	89e0      	ldrh	r0, [r4, #14]
    5160:	f440 7000 	orr.w	r0, r0, #512	; 0x200
    5164:	81e0      	strh	r0, [r4, #14]
    5166:	7ca8      	ldrb	r0, [r5, #18]
    5168:	b1a0      	cbz	r0, 5194 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x27c>
    516a:	f7ff ff05 	bl	4f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    516e:	4928      	ldr	r1, [pc, #160]	; (5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5170:	f881 8018 	strb.w	r8, [r1, #24]
    5174:	e9d5 2316 	ldrd	r2, r3, [r5, #88]	; 0x58
    5178:	e9c1 2304 	strd	r2, r3, [r1, #16]
    517c:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    5180:	f008 fc31 	bl	d9e6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5184:	4603      	mov	r3, r0
    5186:	22fb      	movs	r2, #251	; 0xfb
    5188:	4921      	ldr	r1, [pc, #132]	; (5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    518a:	2000      	movs	r0, #0
    518c:	f006 f950 	bl	b430 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    5190:	f006 f984 	bl	b49c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    5194:	4d1e      	ldr	r5, [pc, #120]	; (5210 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2f8>)
    5196:	354a      	adds	r5, #74	; 0x4a
    5198:	f1b9 0f00 	cmp.w	r9, #0
    519c:	d104      	bne.n	51a8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x290>
    519e:	78e1      	ldrb	r1, [r4, #3]
    51a0:	2001      	movs	r0, #1
    51a2:	f7ff ff21 	bl	4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    51a6:	b1b0      	cbz	r0, 51d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2be>
    51a8:	f006 fd48 	bl	bc3c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>
    51ac:	f89d 0000 	ldrb.w	r0, [sp]
    51b0:	b110      	cbz	r0, 51b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2a0>
    51b2:	2000      	movs	r0, #0
    51b4:	f7ff fe34 	bl	4e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    51b8:	b136      	cbz	r6, 51c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b0>
    51ba:	70e7      	strb	r7, [r4, #3]
    51bc:	7968      	ldrb	r0, [r5, #5]
    51be:	1c40      	adds	r0, r0, #1
    51c0:	7168      	strb	r0, [r5, #5]
    51c2:	f7ff feeb 	bl	4f9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    51c6:	e002      	b.n	51ce <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2b6>
    51c8:	79a8      	ldrb	r0, [r5, #6]
    51ca:	1c40      	adds	r0, r0, #1
    51cc:	71a8      	strb	r0, [r5, #6]
    51ce:	f000 f87f 	bl	52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    51d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    51d6:	f89d 0000 	ldrb.w	r0, [sp]
    51da:	b110      	cbz	r0, 51e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ca>
    51dc:	2001      	movs	r0, #1
    51de:	f7ff fe1f 	bl	4e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    51e2:	2000      	movs	r0, #0
    51e4:	f000 f98c 	bl	5500 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e8>
    51e8:	f89d 0000 	ldrb.w	r0, [sp]
    51ec:	b110      	cbz	r0, 51f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2dc>
    51ee:	2002      	movs	r0, #2
    51f0:	f7ff fe16 	bl	4e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    51f4:	b136      	cbz	r6, 5204 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ec>
    51f6:	70e7      	strb	r7, [r4, #3]
    51f8:	7968      	ldrb	r0, [r5, #5]
    51fa:	1c40      	adds	r0, r0, #1
    51fc:	7168      	strb	r0, [r5, #5]
    51fe:	f7ff fecd 	bl	4f9c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x84>
    5202:	e7e6      	b.n	51d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    5204:	79a8      	ldrb	r0, [r5, #6]
    5206:	1c40      	adds	r0, r0, #1
    5208:	71a8      	strb	r0, [r5, #6]
    520a:	e7e2      	b.n	51d2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x2ba>
    520c:	200000ac 	.word	0x200000ac
    5210:	20000b30 	.word	0x20000b30
    5214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5218:	4688      	mov	r8, r1
    521a:	4681      	mov	r9, r0
    521c:	f7ff feb2 	bl	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5220:	4d29      	ldr	r5, [pc, #164]	; (52c8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b0>)
    5222:	4604      	mov	r4, r0
    5224:	7828      	ldrb	r0, [r5, #0]
    5226:	2801      	cmp	r0, #1
    5228:	d004      	beq.n	5234 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x31c>
    522a:	f240 416a 	movw	r1, #1130	; 0x46a
    522e:	2027      	movs	r0, #39	; 0x27
    5230:	f7fe fe46 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5234:	7860      	ldrb	r0, [r4, #1]
    5236:	2600      	movs	r6, #0
    5238:	2701      	movs	r7, #1
    523a:	b120      	cbz	r0, 5246 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x32e>
    523c:	7066      	strb	r6, [r4, #1]
    523e:	2100      	movs	r1, #0
    5240:	2004      	movs	r0, #4
    5242:	f7ff fe91 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5246:	6a29      	ldr	r1, [r5, #32]
    5248:	7808      	ldrb	r0, [r1, #0]
    524a:	43c0      	mvns	r0, r0
    524c:	0780      	lsls	r0, r0, #30
    524e:	d109      	bne.n	5264 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x34c>
    5250:	79a0      	ldrb	r0, [r4, #6]
    5252:	bb88      	cbnz	r0, 52b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5254:	2002      	movs	r0, #2
    5256:	f7ff fe87 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    525a:	6a28      	ldr	r0, [r5, #32]
    525c:	7800      	ldrb	r0, [r0, #0]
    525e:	43c0      	mvns	r0, r0
    5260:	0780      	lsls	r0, r0, #30
    5262:	d029      	beq.n	52b8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a0>
    5264:	6a28      	ldr	r0, [r5, #32]
    5266:	7840      	ldrb	r0, [r0, #1]
    5268:	b110      	cbz	r0, 5270 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x358>
    526a:	2002      	movs	r0, #2
    526c:	71a0      	strb	r0, [r4, #6]
    526e:	e000      	b.n	5272 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x35a>
    5270:	71a7      	strb	r7, [r4, #6]
    5272:	7ce0      	ldrb	r0, [r4, #19]
    5274:	b1a0      	cbz	r0, 52a0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x388>
    5276:	f7ff fe7f 	bl	4f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    527a:	4914      	ldr	r1, [pc, #80]	; (52cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    527c:	7a6d      	ldrb	r5, [r5, #9]
    527e:	760e      	strb	r6, [r1, #24]
    5280:	e9d4 2318 	ldrd	r2, r3, [r4, #96]	; 0x60
    5284:	e9c1 2304 	strd	r2, r3, [r1, #16]
    5288:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    528c:	f008 fbab 	bl	d9e6 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x4>
    5290:	4603      	mov	r3, r0
    5292:	462a      	mov	r2, r5
    5294:	490d      	ldr	r1, [pc, #52]	; (52cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b4>)
    5296:	2001      	movs	r0, #1
    5298:	f006 f8ca 	bl	b430 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>
    529c:	f006 f8fe 	bl	b49c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>
    52a0:	ea38 0009 	bics.w	r0, r8, r9
    52a4:	d004      	beq.n	52b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x398>
    52a6:	2100      	movs	r1, #0
    52a8:	4608      	mov	r0, r1
    52aa:	f7ff fe9d 	bl	4fe8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0xd0>
    52ae:	b128      	cbz	r0, 52bc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3a4>
    52b0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52b4:	f000 b80c 	b.w	52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    52b8:	2003      	movs	r0, #3
    52ba:	e7d7      	b.n	526c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x354>
    52bc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    52c0:	2000      	movs	r0, #0
    52c2:	f000 b8df 	b.w	5484 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x56c>
    52c6:	0000      	.short	0x0000
    52c8:	200000ac 	.word	0x200000ac
    52cc:	20000b30 	.word	0x20000b30
    52d0:	b510      	push	{r4, lr}
    52d2:	f006 f9a5 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    52d6:	f006 f861 	bl	b39c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    52da:	4c0d      	ldr	r4, [pc, #52]	; (5310 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f8>)
    52dc:	89e0      	ldrh	r0, [r4, #14]
    52de:	f7ff fe57 	bl	4f90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    52e2:	69e2      	ldr	r2, [r4, #28]
    52e4:	7961      	ldrb	r1, [r4, #5]
    52e6:	78a0      	ldrb	r0, [r4, #2]
    52e8:	4790      	blx	r2
    52ea:	480a      	ldr	r0, [pc, #40]	; (5314 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    52ec:	7c40      	ldrb	r0, [r0, #17]
    52ee:	b158      	cbz	r0, 5308 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3f0>
    52f0:	4808      	ldr	r0, [pc, #32]	; (5314 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    52f2:	3852      	subs	r0, #82	; 0x52
    52f4:	f850 1f52 	ldr.w	r1, [r0, #82]!
    52f8:	6081      	str	r1, [r0, #8]
    52fa:	6841      	ldr	r1, [r0, #4]
    52fc:	60c1      	str	r1, [r0, #12]
    52fe:	4805      	ldr	r0, [pc, #20]	; (5314 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3fc>)
    5300:	2101      	movs	r1, #1
    5302:	7401      	strb	r1, [r0, #16]
    5304:	f000 ff1c 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5308:	2000      	movs	r0, #0
    530a:	7020      	strb	r0, [r4, #0]
    530c:	bd10      	pop	{r4, pc}
    530e:	0000      	.short	0x0000
    5310:	200000ac 	.word	0x200000ac
    5314:	20000b7a 	.word	0x20000b7a
    5318:	4808      	ldr	r0, [pc, #32]	; (533c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x424>)
    531a:	b510      	push	{r4, lr}
    531c:	7800      	ldrb	r0, [r0, #0]
    531e:	2802      	cmp	r0, #2
    5320:	d004      	beq.n	532c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x414>
    5322:	f240 2111 	movw	r1, #529	; 0x211
    5326:	2027      	movs	r0, #39	; 0x27
    5328:	f7fe fdca 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    532c:	4904      	ldr	r1, [pc, #16]	; (5340 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x428>)
    532e:	2001      	movs	r0, #1
    5330:	71c8      	strb	r0, [r1, #7]
    5332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5336:	f7ff bfcb 	b.w	52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    533a:	0000      	.short	0x0000
    533c:	200000ac 	.word	0x200000ac
    5340:	20000b7a 	.word	0x20000b7a
    5344:	b430      	push	{r4, r5}
    5346:	4b0c      	ldr	r3, [pc, #48]	; (5378 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x460>)
    5348:	b942      	cbnz	r2, 535c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    534a:	79da      	ldrb	r2, [r3, #7]
    534c:	2aff      	cmp	r2, #255	; 0xff
    534e:	d105      	bne.n	535c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x444>
    5350:	f890 206b 	ldrb.w	r2, [r0, #107]	; 0x6b
    5354:	f890 406a 	ldrb.w	r4, [r0, #106]	; 0x6a
    5358:	42a2      	cmp	r2, r4
    535a:	d00b      	beq.n	5374 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x45c>
    535c:	b131      	cbz	r1, 536c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x454>
    535e:	79da      	ldrb	r2, [r3, #7]
    5360:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    5364:	bc30      	pop	{r4, r5}
    5366:	4610      	mov	r0, r2
    5368:	f006 bca0 	b.w	bcac <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>
    536c:	22ff      	movs	r2, #255	; 0xff
    536e:	f890 106a 	ldrb.w	r1, [r0, #106]	; 0x6a
    5372:	e7f7      	b.n	5364 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x44c>
    5374:	bc30      	pop	{r4, r5}
    5376:	4770      	bx	lr
    5378:	200000ac 	.word	0x200000ac
    537c:	b570      	push	{r4, r5, r6, lr}
    537e:	4606      	mov	r6, r0
    5380:	f7ff fe00 	bl	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5384:	4a1b      	ldr	r2, [pc, #108]	; (53f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4dc>)
    5386:	4604      	mov	r4, r0
    5388:	2501      	movs	r5, #1
    538a:	6a51      	ldr	r1, [r2, #36]	; 0x24
    538c:	7808      	ldrb	r0, [r1, #0]
    538e:	f000 0003 	and.w	r0, r0, #3
    5392:	2801      	cmp	r0, #1
    5394:	d00c      	beq.n	53b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    5396:	2802      	cmp	r0, #2
    5398:	d00a      	beq.n	53b0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x498>
    539a:	2803      	cmp	r0, #3
    539c:	d121      	bne.n	53e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    539e:	7065      	strb	r5, [r4, #1]
    53a0:	89d0      	ldrh	r0, [r2, #14]
    53a2:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
    53a6:	81d0      	strh	r0, [r2, #14]
    53a8:	2001      	movs	r0, #1
    53aa:	f7ff fddd 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    53ae:	e018      	b.n	53e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    53b0:	7848      	ldrb	r0, [r1, #1]
    53b2:	b1b0      	cbz	r0, 53e2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4ca>
    53b4:	89d1      	ldrh	r1, [r2, #14]
    53b6:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
    53ba:	81d1      	strh	r1, [r2, #14]
    53bc:	6a91      	ldr	r1, [r2, #40]	; 0x28
    53be:	2900      	cmp	r1, #0
    53c0:	d009      	beq.n	53d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4be>
    53c2:	28fb      	cmp	r0, #251	; 0xfb
    53c4:	d808      	bhi.n	53d8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4c0>
    53c6:	7990      	ldrb	r0, [r2, #6]
    53c8:	b120      	cbz	r0, 53d4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4bc>
    53ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    53ce:	2020      	movs	r0, #32
    53d0:	f7ff bdde 	b.w	4f90 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x78>
    53d4:	7035      	strb	r5, [r6, #0]
    53d6:	bd70      	pop	{r4, r5, r6, pc}
    53d8:	7950      	ldrb	r0, [r2, #5]
    53da:	f040 0010 	orr.w	r0, r0, #16
    53de:	7150      	strb	r0, [r2, #5]
    53e0:	bd70      	pop	{r4, r5, r6, pc}
    53e2:	7a20      	ldrb	r0, [r4, #8]
    53e4:	2801      	cmp	r0, #1
    53e6:	d001      	beq.n	53ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x4d4>
    53e8:	7225      	strb	r5, [r4, #8]
    53ea:	bd70      	pop	{r4, r5, r6, pc}
    53ec:	2000      	movs	r0, #0
    53ee:	7220      	strb	r0, [r4, #8]
    53f0:	bd70      	pop	{r4, r5, r6, pc}
    53f2:	0000      	.short	0x0000
    53f4:	200000ac 	.word	0x200000ac
    53f8:	b570      	push	{r4, r5, r6, lr}
    53fa:	f7ff fdc3 	bl	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    53fe:	4604      	mov	r4, r0
    5400:	7980      	ldrb	r0, [r0, #6]
    5402:	2800      	cmp	r0, #0
    5404:	d027      	beq.n	5456 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x53e>
    5406:	2802      	cmp	r0, #2
    5408:	d10d      	bne.n	5426 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50e>
    540a:	4818      	ldr	r0, [pc, #96]	; (546c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x554>)
    540c:	6b00      	ldr	r0, [r0, #48]	; 0x30
    540e:	f007 ff47 	bl	d2a0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>
    5412:	b308      	cbz	r0, 5458 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x540>
    5414:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5418:	1c40      	adds	r0, r0, #1
    541a:	f141 0100 	adc.w	r1, r1, #0
    541e:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    5422:	f000 fe8d 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    5426:	2500      	movs	r5, #0
    5428:	71a5      	strb	r5, [r4, #6]
    542a:	78a0      	ldrb	r0, [r4, #2]
    542c:	2601      	movs	r6, #1
    542e:	b170      	cbz	r0, 544e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x536>
    5430:	70a5      	strb	r5, [r4, #2]
    5432:	f7ff fb21 	bl	4a78 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    5436:	b190      	cbz	r0, 545e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x546>
    5438:	2100      	movs	r1, #0
    543a:	2008      	movs	r0, #8
    543c:	f7ff fd94 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5440:	e9d4 0116 	ldrd	r0, r1, [r4, #88]	; 0x58
    5444:	1c40      	adds	r0, r0, #1
    5446:	f141 0100 	adc.w	r1, r1, #0
    544a:	e9c4 0116 	strd	r0, r1, [r4, #88]	; 0x58
    544e:	79e0      	ldrb	r0, [r4, #7]
    5450:	2801      	cmp	r0, #1
    5452:	d009      	beq.n	5468 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x550>
    5454:	71e6      	strb	r6, [r4, #7]
    5456:	bd70      	pop	{r4, r5, r6, pc}
    5458:	f44f 716c 	mov.w	r1, #944	; 0x3b0
    545c:	e001      	b.n	5462 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x54a>
    545e:	f44f 7172 	mov.w	r1, #968	; 0x3c8
    5462:	2027      	movs	r0, #39	; 0x27
    5464:	f7fe fd2c 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5468:	71e5      	strb	r5, [r4, #7]
    546a:	bd70      	pop	{r4, r5, r6, pc}
    546c:	200000ac 	.word	0x200000ac
    5470:	4803      	ldr	r0, [pc, #12]	; (5480 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x568>)
    5472:	7800      	ldrb	r0, [r0, #0]
    5474:	2800      	cmp	r0, #0
    5476:	d001      	beq.n	547c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x564>
    5478:	f7ff bf2a 	b.w	52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    547c:	4770      	bx	lr
    547e:	0000      	.short	0x0000
    5480:	200000ac 	.word	0x200000ac
    5484:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5488:	4607      	mov	r7, r0
    548a:	f7ff fd75 	bl	4f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    548e:	4680      	mov	r8, r0
    5490:	f7ff fd78 	bl	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    5494:	4c17      	ldr	r4, [pc, #92]	; (54f4 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5dc>)
    5496:	4605      	mov	r5, r0
    5498:	463a      	mov	r2, r7
    549a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    549c:	6260      	str	r0, [r4, #36]	; 0x24
    549e:	2101      	movs	r1, #1
    54a0:	4640      	mov	r0, r8
    54a2:	f7ff ff4f 	bl	5344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    54a6:	7ce8      	ldrb	r0, [r5, #19]
    54a8:	2600      	movs	r6, #0
    54aa:	b178      	cbz	r0, 54cc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5b4>
    54ac:	4812      	ldr	r0, [pc, #72]	; (54f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    54ae:	f006 fb1b 	bl	bae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54b2:	4812      	ldr	r0, [pc, #72]	; (54fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e4>)
    54b4:	7606      	strb	r6, [r0, #24]
    54b6:	e9d5 1218 	ldrd	r1, r2, [r5, #96]	; 0x60
    54ba:	e9c0 1204 	strd	r1, r2, [r0, #16]
    54be:	490e      	ldr	r1, [pc, #56]	; (54f8 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5e0>)
    54c0:	6a60      	ldr	r0, [r4, #36]	; 0x24
    54c2:	f005 ff3d 	bl	b340 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    54c6:	f005 ff4f 	bl	b368 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>
    54ca:	e004      	b.n	54d6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5be>
    54cc:	6a60      	ldr	r0, [r4, #36]	; 0x24
    54ce:	f006 fb0b 	bl	bae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    54d2:	f005 ff63 	bl	b39c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    54d6:	b917      	cbnz	r7, 54de <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x5c6>
    54d8:	4630      	mov	r0, r6
    54da:	f006 f9b9 	bl	b850 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    54de:	2100      	movs	r1, #0
    54e0:	f898 206a 	ldrb.w	r2, [r8, #106]	; 0x6a
    54e4:	4608      	mov	r0, r1
    54e6:	f006 fb8b 	bl	bc00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    54ea:	2002      	movs	r0, #2
    54ec:	7020      	strb	r0, [r4, #0]
    54ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    54f2:	0000      	.short	0x0000
    54f4:	200000ac 	.word	0x200000ac
    54f8:	20000a28 	.word	0x20000a28
    54fc:	20000b30 	.word	0x20000b30
    5500:	e92d 47fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5504:	4604      	mov	r4, r0
    5506:	f7ff fd3d 	bl	4f84 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6c>
    550a:	4605      	mov	r5, r0
    550c:	f7ff fd34 	bl	4f78 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x60>
    5510:	4606      	mov	r6, r0
    5512:	f8df 9164 	ldr.w	r9, [pc, #356]	; 5678 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x760>
    5516:	4622      	mov	r2, r4
    5518:	2100      	movs	r1, #0
    551a:	f7ff ff13 	bl	5344 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x42c>
    551e:	79a8      	ldrb	r0, [r5, #6]
    5520:	f04f 0800 	mov.w	r8, #0
    5524:	2701      	movs	r7, #1
    5526:	f1a9 0420 	sub.w	r4, r9, #32
    552a:	b140      	cbz	r0, 553e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x626>
    552c:	2801      	cmp	r0, #1
    552e:	d01f      	beq.n	5570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    5530:	2802      	cmp	r0, #2
    5532:	d030      	beq.n	5596 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x67e>
    5534:	2803      	cmp	r0, #3
    5536:	d03c      	beq.n	55b2 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x69a>
    5538:	f240 21ae 	movw	r1, #686	; 0x2ae
    553c:	e058      	b.n	55f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    553e:	7a20      	ldrb	r0, [r4, #8]
    5540:	2150      	movs	r1, #80	; 0x50
    5542:	f8ad 0004 	strh.w	r0, [sp, #4]
    5546:	5388      	strh	r0, [r1, r6]
    5548:	4648      	mov	r0, r9
    554a:	f7ff fabf 	bl	4acc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    554e:	b128      	cbz	r0, 555c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x644>
    5550:	2080      	movs	r0, #128	; 0x80
    5552:	6a21      	ldr	r1, [r4, #32]
    5554:	f7ff fd08 	bl	4f68 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x50>
    5558:	70af      	strb	r7, [r5, #2]
    555a:	e02e      	b.n	55ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    555c:	466a      	mov	r2, sp
    555e:	a901      	add	r1, sp, #4
    5560:	6b20      	ldr	r0, [r4, #48]	; 0x30
    5562:	f008 fa58 	bl	da16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    5566:	6220      	str	r0, [r4, #32]
    5568:	b110      	cbz	r0, 5570 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x658>
    556a:	f895 1045 	ldrb.w	r1, [r5, #69]	; 0x45
    556e:	b111      	cbz	r1, 5576 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x65e>
    5570:	4842      	ldr	r0, [pc, #264]	; (567c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5572:	6220      	str	r0, [r4, #32]
    5574:	e021      	b.n	55ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5576:	f89d 1000 	ldrb.w	r1, [sp]
    557a:	b931      	cbnz	r1, 558a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x672>
    557c:	f8a0 8000 	strh.w	r8, [r0]
    5580:	f880 8002 	strb.w	r8, [r0, #2]
    5584:	2101      	movs	r1, #1
    5586:	f008 fd96 	bl	e0b6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    558a:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    558e:	6a20      	ldr	r0, [r4, #32]
    5590:	f008 fd4b 	bl	e02a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>
    5594:	e011      	b.n	55ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    5596:	f8b6 0050 	ldrh.w	r0, [r6, #80]	; 0x50
    559a:	f8ad 0004 	strh.w	r0, [sp, #4]
    559e:	466a      	mov	r2, sp
    55a0:	a901      	add	r1, sp, #4
    55a2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    55a4:	f008 fa37 	bl	da16 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x34>
    55a8:	6220      	str	r0, [r4, #32]
    55aa:	b930      	cbnz	r0, 55ba <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6a2>
    55ac:	f240 219f 	movw	r1, #671	; 0x29f
    55b0:	e01e      	b.n	55f0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d8>
    55b2:	4648      	mov	r0, r9
    55b4:	f7ff fa8a 	bl	4acc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    55b8:	b1c0      	cbz	r0, 55ec <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6d4>
    55ba:	6a20      	ldr	r0, [r4, #32]
    55bc:	2308      	movs	r3, #8
    55be:	7801      	ldrb	r1, [r0, #0]
    55c0:	f021 0108 	bic.w	r1, r1, #8
    55c4:	7001      	strb	r1, [r0, #0]
    55c6:	79ea      	ldrb	r2, [r5, #7]
    55c8:	ea03 02c2 	and.w	r2, r3, r2, lsl #3
    55cc:	4311      	orrs	r1, r2
    55ce:	f021 0104 	bic.w	r1, r1, #4
    55d2:	7001      	strb	r1, [r0, #0]
    55d4:	7a2a      	ldrb	r2, [r5, #8]
    55d6:	2304      	movs	r3, #4
    55d8:	ea03 0282 	and.w	r2, r3, r2, lsl #2
    55dc:	4311      	orrs	r1, r2
    55de:	f021 0110 	bic.w	r1, r1, #16
    55e2:	7001      	strb	r1, [r0, #0]
    55e4:	43c9      	mvns	r1, r1
    55e6:	0789      	lsls	r1, r1, #30
    55e8:	d005      	beq.n	55f6 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6de>
    55ea:	e007      	b.n	55fc <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6e4>
    55ec:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    55f0:	2027      	movs	r0, #39	; 0x27
    55f2:	f7fe fc65 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    55f6:	78c0      	ldrb	r0, [r0, #3]
    55f8:	2802      	cmp	r0, #2
    55fa:	d00f      	beq.n	561c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    55fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
    55fe:	f007 ffa0 	bl	d542 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>
    5602:	b108      	cbz	r0, 5608 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x6f0>
    5604:	2101      	movs	r1, #1
    5606:	e00a      	b.n	561e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    5608:	6a20      	ldr	r0, [r4, #32]
    560a:	7800      	ldrb	r0, [r0, #0]
    560c:	43c0      	mvns	r0, r0
    560e:	0780      	lsls	r0, r0, #30
    5610:	d004      	beq.n	561c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x704>
    5612:	f7ff fa19 	bl	4a48 <sym_V7MOOXL5SOLISKFFGWJC7M3XDITU574WBQOXGWY>
    5616:	f080 0101 	eor.w	r1, r0, #1
    561a:	e000      	b.n	561e <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x706>
    561c:	2100      	movs	r1, #0
    561e:	6a20      	ldr	r0, [r4, #32]
    5620:	7802      	ldrb	r2, [r0, #0]
    5622:	ea42 1101 	orr.w	r1, r2, r1, lsl #4
    5626:	7001      	strb	r1, [r0, #0]
    5628:	7ca9      	ldrb	r1, [r5, #18]
    562a:	b191      	cbz	r1, 5652 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    562c:	7841      	ldrb	r1, [r0, #1]
    562e:	b181      	cbz	r1, 5652 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x73a>
    5630:	4813      	ldr	r0, [pc, #76]	; (5680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5632:	f006 fa59 	bl	bae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5636:	4811      	ldr	r0, [pc, #68]	; (567c <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x764>)
    5638:	3828      	subs	r0, #40	; 0x28
    563a:	7607      	strb	r7, [r0, #24]
    563c:	e9d5 1216 	ldrd	r1, r2, [r5, #88]	; 0x58
    5640:	e9c0 1204 	strd	r1, r2, [r0, #16]
    5644:	480e      	ldr	r0, [pc, #56]	; (5680 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x768>)
    5646:	6a21      	ldr	r1, [r4, #32]
    5648:	f005 fe7a 	bl	b340 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>
    564c:	f005 fec4 	bl	b3d8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>
    5650:	e003      	b.n	565a <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x742>
    5652:	f006 fa49 	bl	bae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    5656:	f005 fea1 	bl	b39c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>
    565a:	f896 206b 	ldrb.w	r2, [r6, #107]	; 0x6b
    565e:	2101      	movs	r1, #1
    5660:	2000      	movs	r0, #0
    5662:	f006 facd 	bl	bc00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    5666:	7127      	strb	r7, [r4, #4]
    5668:	6a20      	ldr	r0, [r4, #32]
    566a:	8801      	ldrh	r1, [r0, #0]
    566c:	8221      	strh	r1, [r4, #16]
    566e:	7880      	ldrb	r0, [r0, #2]
    5670:	74a0      	strb	r0, [r4, #18]
    5672:	7027      	strb	r7, [r4, #0]
    5674:	e8bd 87fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, r9, sl, pc}
    5678:	200000cc 	.word	0x200000cc
    567c:	20000b58 	.word	0x20000b58
    5680:	20000a28 	.word	0x20000a28
    5684:	00005319 	.word	0x00005319
    5688:	0000509d 	.word	0x0000509d
    568c:	00005215 	.word	0x00005215
    5690:	00005471 	.word	0x00005471

00005694 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>:
    5694:	4800      	ldr	r0, [pc, #0]	; (5698 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI+0x4>)
    5696:	4770      	bx	lr
    5698:	20001515 	.word	0x20001515

0000569c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>:
    569c:	b570      	push	{r4, r5, r6, lr}
    569e:	2600      	movs	r6, #0
    56a0:	4635      	mov	r5, r6
    56a2:	4c0f      	ldr	r4, [pc, #60]	; (56e0 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x44>)
    56a4:	e018      	b.n	56d8 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x3c>
    56a6:	1960      	adds	r0, r4, r5
    56a8:	f890 213b 	ldrb.w	r2, [r0, #315]	; 0x13b
    56ac:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    56b0:	2a01      	cmp	r2, #1
    56b2:	d002      	beq.n	56ba <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x1e>
    56b4:	f890 014b 	ldrb.w	r0, [r0, #331]	; 0x14b
    56b8:	b160      	cbz	r0, 56d4 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x38>
    56ba:	480a      	ldr	r0, [pc, #40]	; (56e4 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0x48>)
    56bc:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    56c0:	1c73      	adds	r3, r6, #1
    56c2:	5585      	strb	r5, [r0, r6]
    56c4:	f891 2153 	ldrb.w	r2, [r1, #339]	; 0x153
    56c8:	4630      	mov	r0, r6
    56ca:	b2de      	uxtb	r6, r3
    56cc:	f501 71aa 	add.w	r1, r1, #340	; 0x154
    56d0:	f006 fbbe 	bl	be50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    56d4:	1c6d      	adds	r5, r5, #1
    56d6:	b2ed      	uxtb	r5, r5
    56d8:	78a0      	ldrb	r0, [r4, #2]
    56da:	42a8      	cmp	r0, r5
    56dc:	d8e3      	bhi.n	56a6 <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ+0xa>
    56de:	bd70      	pop	{r4, r5, r6, pc}
    56e0:	20001342 	.word	0x20001342
    56e4:	20000274 	.word	0x20000274

000056e8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>:
    56e8:	4904      	ldr	r1, [pc, #16]	; (56fc <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x14>)
    56ea:	788a      	ldrb	r2, [r1, #2]
    56ec:	4282      	cmp	r2, r0
    56ee:	d903      	bls.n	56f8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ+0x10>
    56f0:	4408      	add	r0, r1
    56f2:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    56f6:	4770      	bx	lr
    56f8:	2000      	movs	r0, #0
    56fa:	4770      	bx	lr
    56fc:	20001342 	.word	0x20001342

00005700 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>:
    5700:	4904      	ldr	r1, [pc, #16]	; (5714 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x14>)
    5702:	788a      	ldrb	r2, [r1, #2]
    5704:	4282      	cmp	r2, r0
    5706:	d903      	bls.n	5710 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA+0x10>
    5708:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    570c:	3083      	adds	r0, #131	; 0x83
    570e:	4770      	bx	lr
    5710:	2000      	movs	r0, #0
    5712:	4770      	bx	lr
    5714:	20001342 	.word	0x20001342

00005718 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>:
    5718:	4a05      	ldr	r2, [pc, #20]	; (5730 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA+0x18>)
    571a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    571e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
    5722:	6802      	ldr	r2, [r0, #0]
    5724:	f8c1 210b 	str.w	r2, [r1, #267]	; 0x10b
    5728:	8880      	ldrh	r0, [r0, #4]
    572a:	f8a1 010f 	strh.w	r0, [r1, #271]	; 0x10f
    572e:	4770      	bx	lr
    5730:	20001342 	.word	0x20001342

00005734 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>:
    5734:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5738:	4607      	mov	r7, r0
    573a:	2400      	movs	r4, #0
    573c:	4d10      	ldr	r5, [pc, #64]	; (5780 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x4c>)
    573e:	e019      	b.n	5774 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x40>
    5740:	4620      	mov	r0, r4
    5742:	f7ff ffdd 	bl	5700 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    5746:	0003      	movs	r3, r0
    5748:	d012      	beq.n	5770 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    574a:	1928      	adds	r0, r5, r4
    574c:	f890 0143 	ldrb.w	r0, [r0, #323]	; 0x143
    5750:	b970      	cbnz	r0, 5770 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0x3c>
    5752:	eb04 0044 	add.w	r0, r4, r4, lsl #1
    5756:	eb05 0640 	add.w	r6, r5, r0, lsl #1
    575a:	f206 160b 	addw	r6, r6, #267	; 0x10b
    575e:	463a      	mov	r2, r7
    5760:	4631      	mov	r1, r6
    5762:	4618      	mov	r0, r3
    5764:	f008 f8da 	bl	d91c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    5768:	4630      	mov	r0, r6
    576a:	4621      	mov	r1, r4
    576c:	f7ff ffd4 	bl	5718 <sym_GV7ZEDU63KACGR6K3NXW7W7XARTADNTCQ3P2HLA>
    5770:	1c64      	adds	r4, r4, #1
    5772:	b2e4      	uxtb	r4, r4
    5774:	78a8      	ldrb	r0, [r5, #2]
    5776:	42a0      	cmp	r0, r4
    5778:	d8e2      	bhi.n	5740 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY+0xc>
    577a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    577e:	0000      	.short	0x0000
    5780:	20001342 	.word	0x20001342

00005784 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>:
    5784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5788:	460e      	mov	r6, r1
    578a:	4607      	mov	r7, r0
    578c:	4615      	mov	r5, r2
    578e:	2106      	movs	r1, #6
    5790:	4630      	mov	r0, r6
    5792:	f008 fb93 	bl	debc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5796:	4c0d      	ldr	r4, [pc, #52]	; (57cc <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x48>)
    5798:	b160      	cbz	r0, 57b4 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x30>
    579a:	2000      	movs	r0, #0
    579c:	e004      	b.n	57a8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x24>
    579e:	1821      	adds	r1, r4, r0
    57a0:	1c40      	adds	r0, r0, #1
    57a2:	f881 513b 	strb.w	r5, [r1, #315]	; 0x13b
    57a6:	b2c0      	uxtb	r0, r0
    57a8:	78a1      	ldrb	r1, [r4, #2]
    57aa:	4281      	cmp	r1, r0
    57ac:	d8f7      	bhi.n	579e <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x1a>
    57ae:	2001      	movs	r0, #1
    57b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    57b4:	4631      	mov	r1, r6
    57b6:	4638      	mov	r0, r7
    57b8:	f008 f93c 	bl	da34 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    57bc:	2808      	cmp	r0, #8
    57be:	d003      	beq.n	57c8 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x44>
    57c0:	4420      	add	r0, r4
    57c2:	f880 513b 	strb.w	r5, [r0, #315]	; 0x13b
    57c6:	e7f2      	b.n	57ae <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2a>
    57c8:	2000      	movs	r0, #0
    57ca:	e7f1      	b.n	57b0 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY+0x2c>
    57cc:	20001342 	.word	0x20001342

000057d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>:
    57d0:	4904      	ldr	r1, [pc, #16]	; (57e4 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x14>)
    57d2:	788a      	ldrb	r2, [r1, #2]
    57d4:	4282      	cmp	r2, r0
    57d6:	d903      	bls.n	57e0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA+0x10>
    57d8:	eb01 1000 	add.w	r0, r1, r0, lsl #4
    57dc:	1cc0      	adds	r0, r0, #3
    57de:	4770      	bx	lr
    57e0:	2000      	movs	r0, #0
    57e2:	4770      	bx	lr
    57e4:	20001342 	.word	0x20001342

000057e8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>:
    57e8:	4908      	ldr	r1, [pc, #32]	; (580c <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x24>)
    57ea:	788a      	ldrb	r2, [r1, #2]
    57ec:	4282      	cmp	r2, r0
    57ee:	d903      	bls.n	57f8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x10>
    57f0:	180a      	adds	r2, r1, r0
    57f2:	f892 2143 	ldrb.w	r2, [r2, #323]	; 0x143
    57f6:	b10a      	cbz	r2, 57fc <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA+0x14>
    57f8:	2000      	movs	r0, #0
    57fa:	4770      	bx	lr
    57fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
    5800:	eb01 0040 	add.w	r0, r1, r0, lsl #1
    5804:	f200 100b 	addw	r0, r0, #267	; 0x10b
    5808:	4770      	bx	lr
    580a:	0000      	.short	0x0000
    580c:	20001342 	.word	0x20001342

00005810 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>:
    5810:	b510      	push	{r4, lr}
    5812:	f240 12d3 	movw	r2, #467	; 0x1d3
    5816:	2100      	movs	r1, #0
    5818:	4808      	ldr	r0, [pc, #32]	; (583c <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x2c>)
    581a:	f006 ffdb 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    581e:	2208      	movs	r2, #8
    5820:	21ff      	movs	r1, #255	; 0xff
    5822:	4807      	ldr	r0, [pc, #28]	; (5840 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    5824:	f006 ffd6 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5828:	4805      	ldr	r0, [pc, #20]	; (5840 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY+0x30>)
    582a:	2100      	movs	r1, #0
    582c:	1f00      	subs	r0, r0, #4
    582e:	7001      	strb	r1, [r0, #0]
    5830:	7041      	strb	r1, [r0, #1]
    5832:	f44f 7161 	mov.w	r1, #900	; 0x384
    5836:	8041      	strh	r1, [r0, #2]
    5838:	bd10      	pop	{r4, pc}
    583a:	0000      	.short	0x0000
    583c:	20001342 	.word	0x20001342
    5840:	20000274 	.word	0x20000274

00005844 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>:
    5844:	4901      	ldr	r1, [pc, #4]	; (584c <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA+0x8>)
    5846:	7008      	strb	r0, [r1, #0]
    5848:	4770      	bx	lr
    584a:	0000      	.short	0x0000
    584c:	20000270 	.word	0x20000270

00005850 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>:
    5850:	4801      	ldr	r0, [pc, #4]	; (5858 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY+0x8>)
    5852:	7800      	ldrb	r0, [r0, #0]
    5854:	4770      	bx	lr
    5856:	0000      	.short	0x0000
    5858:	20000270 	.word	0x20000270

0000585c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>:
    585c:	4b0b      	ldr	r3, [pc, #44]	; (588c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x30>)
    585e:	b510      	push	{r4, lr}
    5860:	789c      	ldrb	r4, [r3, #2]
    5862:	4284      	cmp	r4, r0
    5864:	d90f      	bls.n	5886 <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA+0x2a>
    5866:	4418      	add	r0, r3
    5868:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    586c:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    5870:	f890 3153 	ldrb.w	r3, [r0, #339]	; 0x153
    5874:	700b      	strb	r3, [r1, #0]
    5876:	f8d0 1154 	ldr.w	r1, [r0, #340]	; 0x154
    587a:	6011      	str	r1, [r2, #0]
    587c:	f8b0 0158 	ldrh.w	r0, [r0, #344]	; 0x158
    5880:	8090      	strh	r0, [r2, #4]
    5882:	2001      	movs	r0, #1
    5884:	bd10      	pop	{r4, pc}
    5886:	2000      	movs	r0, #0
    5888:	bd10      	pop	{r4, pc}
    588a:	0000      	.short	0x0000
    588c:	20001342 	.word	0x20001342

00005890 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>:
    5890:	4907      	ldr	r1, [pc, #28]	; (58b0 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x20>)
    5892:	788a      	ldrb	r2, [r1, #2]
    5894:	4282      	cmp	r2, r0
    5896:	d909      	bls.n	58ac <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI+0x1c>
    5898:	4408      	add	r0, r1
    589a:	f890 0103 	ldrb.w	r0, [r0, #259]	; 0x103
    589e:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
    58a2:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    58a6:	f000 0001 	and.w	r0, r0, #1
    58aa:	4770      	bx	lr
    58ac:	2000      	movs	r0, #0
    58ae:	4770      	bx	lr
    58b0:	20001342 	.word	0x20001342

000058b4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>:
    58b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    58b8:	4698      	mov	r8, r3
    58ba:	4691      	mov	r9, r2
    58bc:	460c      	mov	r4, r1
    58be:	4605      	mov	r5, r0
    58c0:	f000 f962 	bl	5b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    58c4:	4606      	mov	r6, r0
    58c6:	2810      	cmp	r0, #16
    58c8:	d006      	beq.n	58d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    58ca:	f000 f92d 	bl	5b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    58ce:	2810      	cmp	r0, #16
    58d0:	d002      	beq.n	58d8 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x24>
    58d2:	2012      	movs	r0, #18
    58d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    58d8:	4f18      	ldr	r7, [pc, #96]	; (593c <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x88>)
    58da:	78b8      	ldrb	r0, [r7, #2]
    58dc:	2808      	cmp	r0, #8
    58de:	d22a      	bcs.n	5936 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x82>
    58e0:	2e10      	cmp	r6, #16
    58e2:	d105      	bne.n	58f0 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x3c>
    58e4:	2200      	movs	r2, #0
    58e6:	4621      	mov	r1, r4
    58e8:	4628      	mov	r0, r5
    58ea:	f000 f931 	bl	5b50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    58ee:	4606      	mov	r6, r0
    58f0:	78bc      	ldrb	r4, [r7, #2]
    58f2:	2210      	movs	r2, #16
    58f4:	1c60      	adds	r0, r4, #1
    58f6:	70b8      	strb	r0, [r7, #2]
    58f8:	eb07 1504 	add.w	r5, r7, r4, lsl #4
    58fc:	1ce8      	adds	r0, r5, #3
    58fe:	4649      	mov	r1, r9
    5900:	f008 fa7f 	bl	de02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5904:	f105 0083 	add.w	r0, r5, #131	; 0x83
    5908:	2210      	movs	r2, #16
    590a:	4641      	mov	r1, r8
    590c:	f008 fa79 	bl	de02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    5910:	2110      	movs	r1, #16
    5912:	4640      	mov	r0, r8
    5914:	f008 fad2 	bl	debc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    5918:	443c      	add	r4, r7
    591a:	2110      	movs	r1, #16
    591c:	f884 0143 	strb.w	r0, [r4, #323]	; 0x143
    5920:	4648      	mov	r0, r9
    5922:	f504 7496 	add.w	r4, r4, #300	; 0x12c
    5926:	f008 fac9 	bl	debc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>
    592a:	77e0      	strb	r0, [r4, #31]
    592c:	f804 6c29 	strb.w	r6, [r4, #-41]
    5930:	2000      	movs	r0, #0
    5932:	73e0      	strb	r0, [r4, #15]
    5934:	e7ce      	b.n	58d4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    5936:	2007      	movs	r0, #7
    5938:	e7cc      	b.n	58d4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ+0x20>
    593a:	0000      	.short	0x0000
    593c:	20001342 	.word	0x20001342

00005940 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>:
    5940:	4806      	ldr	r0, [pc, #24]	; (595c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x1c>)
    5942:	b510      	push	{r4, lr}
    5944:	7880      	ldrb	r0, [r0, #2]
    5946:	1e40      	subs	r0, r0, #1
    5948:	b244      	sxtb	r4, r0
    594a:	e004      	b.n	5956 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0x16>
    594c:	b2e0      	uxtb	r0, r4
    594e:	f000 f963 	bl	5c18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    5952:	1e64      	subs	r4, r4, #1
    5954:	b264      	sxtb	r4, r4
    5956:	2c00      	cmp	r4, #0
    5958:	daf8      	bge.n	594c <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A+0xc>
    595a:	bd10      	pop	{r4, pc}
    595c:	20001342 	.word	0x20001342

00005960 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>:
    5960:	4801      	ldr	r0, [pc, #4]	; (5968 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY+0x8>)
    5962:	8840      	ldrh	r0, [r0, #2]
    5964:	4770      	bx	lr
    5966:	0000      	.short	0x0000
    5968:	20000270 	.word	0x20000270

0000596c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>:
    596c:	b138      	cbz	r0, 597e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    596e:	f24a 11b8 	movw	r1, #41400	; 0xa1b8
    5972:	4288      	cmp	r0, r1
    5974:	d803      	bhi.n	597e <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x12>
    5976:	4903      	ldr	r1, [pc, #12]	; (5984 <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I+0x18>)
    5978:	8048      	strh	r0, [r1, #2]
    597a:	2001      	movs	r0, #1
    597c:	4770      	bx	lr
    597e:	2000      	movs	r0, #0
    5980:	4770      	bx	lr
    5982:	0000      	.short	0x0000
    5984:	20000270 	.word	0x20000270

00005988 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>:
    5988:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    598c:	4614      	mov	r4, r2
    598e:	2501      	movs	r5, #1
    5990:	2200      	movs	r2, #0
    5992:	461f      	mov	r7, r3
    5994:	462e      	mov	r6, r5
    5996:	7022      	strb	r2, [r4, #0]
    5998:	f000 f8f6 	bl	5b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    599c:	2810      	cmp	r0, #16
    599e:	d024      	beq.n	59ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    59a0:	f8df 8054 	ldr.w	r8, [pc, #84]	; 59f8 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x70>
    59a4:	eb08 01c0 	add.w	r1, r8, r0, lsl #3
    59a8:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    59ac:	f001 0101 	and.w	r1, r1, #1
    59b0:	7021      	strb	r1, [r4, #0]
    59b2:	f000 f8b9 	bl	5b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    59b6:	4604      	mov	r4, r0
    59b8:	2810      	cmp	r0, #16
    59ba:	d016      	beq.n	59ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    59bc:	b107      	cbz	r7, 59c0 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x38>
    59be:	703c      	strb	r4, [r7, #0]
    59c0:	4620      	mov	r0, r4
    59c2:	f7ff ff05 	bl	57d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    59c6:	b180      	cbz	r0, 59ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    59c8:	f898 1002 	ldrb.w	r1, [r8, #2]
    59cc:	4640      	mov	r0, r8
    59ce:	42a1      	cmp	r1, r4
    59d0:	d903      	bls.n	59da <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x52>
    59d2:	1901      	adds	r1, r0, r4
    59d4:	f891 614b 	ldrb.w	r6, [r1, #331]	; 0x14b
    59d8:	e000      	b.n	59dc <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x54>
    59da:	2600      	movs	r6, #0
    59dc:	eb08 0004 	add.w	r0, r8, r4
    59e0:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    59e4:	2801      	cmp	r0, #1
    59e6:	d004      	beq.n	59f2 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x6a>
    59e8:	2500      	movs	r5, #0
    59ea:	ea45 0006 	orr.w	r0, r5, r6
    59ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    59f2:	2501      	movs	r5, #1
    59f4:	e7f9      	b.n	59ea <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A+0x62>
    59f6:	0000      	.short	0x0000
    59f8:	20001342 	.word	0x20001342

000059fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>:
    59fc:	b570      	push	{r4, r5, r6, lr}
    59fe:	460d      	mov	r5, r1
    5a00:	4606      	mov	r6, r0
    5a02:	f000 f8c1 	bl	5b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    5a06:	4c10      	ldr	r4, [pc, #64]	; (5a48 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x4c>)
    5a08:	2810      	cmp	r0, #16
    5a0a:	d007      	beq.n	5a1c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5a0c:	eb04 01c0 	add.w	r1, r4, r0, lsl #3
    5a10:	f891 115a 	ldrb.w	r1, [r1, #346]	; 0x15a
    5a14:	07c9      	lsls	r1, r1, #31
    5a16:	d001      	beq.n	5a1c <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x20>
    5a18:	2001      	movs	r0, #1
    5a1a:	bd70      	pop	{r4, r5, r6, pc}
    5a1c:	7861      	ldrb	r1, [r4, #1]
    5a1e:	2908      	cmp	r1, #8
    5a20:	d210      	bcs.n	5a44 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x48>
    5a22:	2810      	cmp	r0, #16
    5a24:	d008      	beq.n	5a38 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x3c>
    5a26:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    5a2a:	2101      	movs	r1, #1
    5a2c:	f880 115a 	strb.w	r1, [r0, #346]	; 0x15a
    5a30:	7860      	ldrb	r0, [r4, #1]
    5a32:	1c40      	adds	r0, r0, #1
    5a34:	7060      	strb	r0, [r4, #1]
    5a36:	e7ef      	b.n	5a18 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x1c>
    5a38:	2201      	movs	r2, #1
    5a3a:	4629      	mov	r1, r5
    5a3c:	4630      	mov	r0, r6
    5a3e:	f000 f887 	bl	5b50 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xcc>
    5a42:	e7f5      	b.n	5a30 <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ+0x34>
    5a44:	2000      	movs	r0, #0
    5a46:	bd70      	pop	{r4, r5, r6, pc}
    5a48:	20001342 	.word	0x20001342

00005a4c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>:
    5a4c:	b570      	push	{r4, r5, r6, lr}
    5a4e:	4d0b      	ldr	r5, [pc, #44]	; (5a7c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x30>)
    5a50:	7828      	ldrb	r0, [r5, #0]
    5a52:	1e40      	subs	r0, r0, #1
    5a54:	b244      	sxtb	r4, r0
    5a56:	e00a      	b.n	5a6e <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x22>
    5a58:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5a5c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5a60:	07c0      	lsls	r0, r0, #31
    5a62:	d002      	beq.n	5a6a <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x1e>
    5a64:	b2e0      	uxtb	r0, r4
    5a66:	f000 f91f 	bl	5ca8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    5a6a:	1e64      	subs	r4, r4, #1
    5a6c:	b264      	sxtb	r4, r4
    5a6e:	2c00      	cmp	r4, #0
    5a70:	daf2      	bge.n	5a58 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0xc>
    5a72:	4903      	ldr	r1, [pc, #12]	; (5a80 <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY+0x34>)
    5a74:	2000      	movs	r0, #0
    5a76:	7048      	strb	r0, [r1, #1]
    5a78:	bd70      	pop	{r4, r5, r6, pc}
    5a7a:	0000      	.short	0x0000
    5a7c:	20001342 	.word	0x20001342
    5a80:	20000270 	.word	0x20000270

00005a84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>:
    5a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5a88:	2400      	movs	r4, #0
    5a8a:	4625      	mov	r5, r4
    5a8c:	4e18      	ldr	r6, [pc, #96]	; (5af0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x6c>)
    5a8e:	e029      	b.n	5ae4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x60>
    5a90:	eb06 07c5 	add.w	r7, r6, r5, lsl #3
    5a94:	f897 015a 	ldrb.w	r0, [r7, #346]	; 0x15a
    5a98:	07c0      	lsls	r0, r0, #31
    5a9a:	d021      	beq.n	5ae0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5a9c:	4628      	mov	r0, r5
    5a9e:	f000 f843 	bl	5b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5aa2:	4603      	mov	r3, r0
    5aa4:	f7ff fe94 	bl	57d0 <sym_PLOW4TMGVQT52FP2ERNRL6S5EELE2YO563WRPJA>
    5aa8:	4601      	mov	r1, r0
    5aaa:	2000      	movs	r0, #0
    5aac:	2b10      	cmp	r3, #16
    5aae:	d009      	beq.n	5ac4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5ab0:	18f2      	adds	r2, r6, r3
    5ab2:	f892 c13b 	ldrb.w	ip, [r2, #315]	; 0x13b
    5ab6:	f1bc 0f01 	cmp.w	ip, #1
    5aba:	d002      	beq.n	5ac2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x3e>
    5abc:	f892 214b 	ldrb.w	r2, [r2, #331]	; 0x14b
    5ac0:	b102      	cbz	r2, 5ac4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x40>
    5ac2:	2001      	movs	r0, #1
    5ac4:	1e40      	subs	r0, r0, #1
    5ac6:	4201      	tst	r1, r0
    5ac8:	d10a      	bne.n	5ae0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x5c>
    5aca:	480a      	ldr	r0, [pc, #40]	; (5af4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x70>)
    5acc:	f507 71aa 	add.w	r1, r7, #340	; 0x154
    5ad0:	5503      	strb	r3, [r0, r4]
    5ad2:	4620      	mov	r0, r4
    5ad4:	1c64      	adds	r4, r4, #1
    5ad6:	f897 2153 	ldrb.w	r2, [r7, #339]	; 0x153
    5ada:	b2e4      	uxtb	r4, r4
    5adc:	f006 f9b8 	bl	be50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>
    5ae0:	1c6d      	adds	r5, r5, #1
    5ae2:	b2ed      	uxtb	r5, r5
    5ae4:	7830      	ldrb	r0, [r6, #0]
    5ae6:	42a8      	cmp	r0, r5
    5ae8:	d8d2      	bhi.n	5a90 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc>
    5aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5aee:	0000      	.short	0x0000
    5af0:	20001342 	.word	0x20001342
    5af4:	20000274 	.word	0x20000274
    5af8:	4602      	mov	r2, r0
    5afa:	4809      	ldr	r0, [pc, #36]	; (5b20 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x9c>)
    5afc:	b510      	push	{r4, lr}
    5afe:	7800      	ldrb	r0, [r0, #0]
    5b00:	460b      	mov	r3, r1
    5b02:	b158      	cbz	r0, 5b1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5b04:	4807      	ldr	r0, [pc, #28]	; (5b24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5b06:	7881      	ldrb	r1, [r0, #2]
    5b08:	b141      	cbz	r1, 5b1c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x98>
    5b0a:	b10b      	cbz	r3, 5b10 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x8c>
    5b0c:	1cc0      	adds	r0, r0, #3
    5b0e:	e001      	b.n	5b14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x90>
    5b10:	4804      	ldr	r0, [pc, #16]	; (5b24 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa0>)
    5b12:	3083      	adds	r0, #131	; 0x83
    5b14:	f005 fb36 	bl	b184 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>
    5b18:	2001      	movs	r0, #1
    5b1a:	bd10      	pop	{r4, pc}
    5b1c:	2000      	movs	r0, #0
    5b1e:	bd10      	pop	{r4, pc}
    5b20:	20000270 	.word	0x20000270
    5b24:	20001342 	.word	0x20001342
    5b28:	4908      	ldr	r1, [pc, #32]	; (5b4c <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc8>)
    5b2a:	b510      	push	{r4, lr}
    5b2c:	4603      	mov	r3, r0
    5b2e:	2000      	movs	r0, #0
    5b30:	788a      	ldrb	r2, [r1, #2]
    5b32:	e006      	b.n	5b42 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xbe>
    5b34:	180c      	adds	r4, r1, r0
    5b36:	f894 4103 	ldrb.w	r4, [r4, #259]	; 0x103
    5b3a:	429c      	cmp	r4, r3
    5b3c:	d004      	beq.n	5b48 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xc4>
    5b3e:	1c40      	adds	r0, r0, #1
    5b40:	b2c0      	uxtb	r0, r0
    5b42:	4282      	cmp	r2, r0
    5b44:	d8f6      	bhi.n	5b34 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xb0>
    5b46:	2010      	movs	r0, #16
    5b48:	bd10      	pop	{r4, pc}
    5b4a:	0000      	.short	0x0000
    5b4c:	20001342 	.word	0x20001342
    5b50:	b570      	push	{r4, r5, r6, lr}
    5b52:	4b0c      	ldr	r3, [pc, #48]	; (5b84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x100>)
    5b54:	4604      	mov	r4, r0
    5b56:	7818      	ldrb	r0, [r3, #0]
    5b58:	1c45      	adds	r5, r0, #1
    5b5a:	701d      	strb	r5, [r3, #0]
    5b5c:	2810      	cmp	r0, #16
    5b5e:	d303      	bcc.n	5b68 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xe4>
    5b60:	2146      	movs	r1, #70	; 0x46
    5b62:	2028      	movs	r0, #40	; 0x28
    5b64:	f7fe f9ac 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5b68:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
    5b6c:	680d      	ldr	r5, [r1, #0]
    5b6e:	f8c3 5154 	str.w	r5, [r3, #340]	; 0x154
    5b72:	8889      	ldrh	r1, [r1, #4]
    5b74:	f8a3 1158 	strh.w	r1, [r3, #344]	; 0x158
    5b78:	f883 4153 	strb.w	r4, [r3, #339]	; 0x153
    5b7c:	f883 215a 	strb.w	r2, [r3, #346]	; 0x15a
    5b80:	bd70      	pop	{r4, r5, r6, pc}
    5b82:	0000      	.short	0x0000
    5b84:	20001342 	.word	0x20001342
    5b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b8c:	460f      	mov	r7, r1
    5b8e:	4606      	mov	r6, r0
    5b90:	2400      	movs	r4, #0
    5b92:	4d0d      	ldr	r5, [pc, #52]	; (5bc8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x144>)
    5b94:	e00f      	b.n	5bb6 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x132>
    5b96:	bf00      	nop
    5b98:	eb05 00c4 	add.w	r0, r5, r4, lsl #3
    5b9c:	f890 1153 	ldrb.w	r1, [r0, #339]	; 0x153
    5ba0:	42b1      	cmp	r1, r6
    5ba2:	d106      	bne.n	5bb2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x12e>
    5ba4:	2206      	movs	r2, #6
    5ba6:	4639      	mov	r1, r7
    5ba8:	f500 70aa 	add.w	r0, r0, #340	; 0x154
    5bac:	f006 fd86 	bl	c6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    5bb0:	b138      	cbz	r0, 5bc2 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13e>
    5bb2:	1c64      	adds	r4, r4, #1
    5bb4:	b2e4      	uxtb	r4, r4
    5bb6:	7828      	ldrb	r0, [r5, #0]
    5bb8:	42a0      	cmp	r0, r4
    5bba:	d8ed      	bhi.n	5b98 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x114>
    5bbc:	2010      	movs	r0, #16
    5bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bc2:	4620      	mov	r0, r4
    5bc4:	e7fb      	b.n	5bbe <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x13a>
    5bc6:	0000      	.short	0x0000
    5bc8:	20001342 	.word	0x20001342
    5bcc:	b570      	push	{r4, r5, r6, lr}
    5bce:	4605      	mov	r5, r0
    5bd0:	f7ff ffaa 	bl	5b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5bd4:	2810      	cmp	r0, #16
    5bd6:	d11c      	bne.n	5c12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5bd8:	4c0e      	ldr	r4, [pc, #56]	; (5c14 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x190>)
    5bda:	7820      	ldrb	r0, [r4, #0]
    5bdc:	1e40      	subs	r0, r0, #1
    5bde:	b2c0      	uxtb	r0, r0
    5be0:	7020      	strb	r0, [r4, #0]
    5be2:	42a8      	cmp	r0, r5
    5be4:	d015      	beq.n	5c12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5be6:	eb04 02c0 	add.w	r2, r4, r0, lsl #3
    5bea:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
    5bee:	f502 7080 	add.w	r0, r2, #256	; 0x100
    5bf2:	f8d2 2153 	ldr.w	r2, [r2, #339]	; 0x153
    5bf6:	f8c1 2153 	str.w	r2, [r1, #339]	; 0x153
    5bfa:	f8d0 0057 	ldr.w	r0, [r0, #87]	; 0x57
    5bfe:	f8c1 0157 	str.w	r0, [r1, #343]	; 0x157
    5c02:	7820      	ldrb	r0, [r4, #0]
    5c04:	f7ff ff90 	bl	5b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    5c08:	2810      	cmp	r0, #16
    5c0a:	d002      	beq.n	5c12 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x18e>
    5c0c:	4420      	add	r0, r4
    5c0e:	f880 5103 	strb.w	r5, [r0, #259]	; 0x103
    5c12:	bd70      	pop	{r4, r5, r6, pc}
    5c14:	20001342 	.word	0x20001342
    5c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c1c:	4c21      	ldr	r4, [pc, #132]	; (5ca4 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x220>)
    5c1e:	4606      	mov	r6, r0
    5c20:	19a7      	adds	r7, r4, r6
    5c22:	78a0      	ldrb	r0, [r4, #2]
    5c24:	1e40      	subs	r0, r0, #1
    5c26:	b2c5      	uxtb	r5, r0
    5c28:	70a5      	strb	r5, [r4, #2]
    5c2a:	f897 8103 	ldrb.w	r8, [r7, #259]	; 0x103
    5c2e:	42ae      	cmp	r6, r5
    5c30:	d02a      	beq.n	5c88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x204>
    5c32:	eb04 1a05 	add.w	sl, r4, r5, lsl #4
    5c36:	eb04 1906 	add.w	r9, r4, r6, lsl #4
    5c3a:	f10a 0103 	add.w	r1, sl, #3
    5c3e:	f109 0003 	add.w	r0, r9, #3
    5c42:	2210      	movs	r2, #16
    5c44:	f006 fd4c 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c48:	f10a 0183 	add.w	r1, sl, #131	; 0x83
    5c4c:	f109 0083 	add.w	r0, r9, #131	; 0x83
    5c50:	2210      	movs	r2, #16
    5c52:	f006 fd45 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    5c56:	1960      	adds	r0, r4, r5
    5c58:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    5c5c:	f890 1103 	ldrb.w	r1, [r0, #259]	; 0x103
    5c60:	f887 1103 	strb.w	r1, [r7, #259]	; 0x103
    5c64:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    5c68:	eb04 0242 	add.w	r2, r4, r2, lsl #1
    5c6c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
    5c70:	f8d2 310b 	ldr.w	r3, [r2, #267]	; 0x10b
    5c74:	f8c1 310b 	str.w	r3, [r1, #267]	; 0x10b
    5c78:	f8b2 210f 	ldrh.w	r2, [r2, #271]	; 0x10f
    5c7c:	f8a1 210f 	strh.w	r2, [r1, #271]	; 0x10f
    5c80:	f890 013b 	ldrb.w	r0, [r0, #315]	; 0x13b
    5c84:	f887 013b 	strb.w	r0, [r7, #315]	; 0x13b
    5c88:	eb04 00c8 	add.w	r0, r4, r8, lsl #3
    5c8c:	f890 015a 	ldrb.w	r0, [r0, #346]	; 0x15a
    5c90:	07c0      	lsls	r0, r0, #31
    5c92:	d104      	bne.n	5c9e <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x21a>
    5c94:	4640      	mov	r0, r8
    5c96:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5c9a:	f7ff bf97 	b.w	5bcc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ca2:	0000      	.short	0x0000
    5ca4:	20001342 	.word	0x20001342
    5ca8:	4905      	ldr	r1, [pc, #20]	; (5cc0 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x23c>)
    5caa:	784a      	ldrb	r2, [r1, #1]
    5cac:	1e52      	subs	r2, r2, #1
    5cae:	704a      	strb	r2, [r1, #1]
    5cb0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
    5cb4:	2200      	movs	r2, #0
    5cb6:	f881 215a 	strb.w	r2, [r1, #346]	; 0x15a
    5cba:	f7ff bf87 	b.w	5bcc <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x148>
    5cbe:	0000      	.short	0x0000
    5cc0:	20001342 	.word	0x20001342

00005cc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>:
    5cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5cc8:	4604      	mov	r4, r0
    5cca:	f100 0778 	add.w	r7, r0, #120	; 0x78
    5cce:	b171      	cbz	r1, 5cee <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x2a>
    5cd0:	f104 068e 	add.w	r6, r4, #142	; 0x8e
    5cd4:	1e75      	subs	r5, r6, #1
    5cd6:	2901      	cmp	r1, #1
    5cd8:	d016      	beq.n	5d08 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x44>
    5cda:	2902      	cmp	r1, #2
    5cdc:	d025      	beq.n	5d2a <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x66>
    5cde:	2903      	cmp	r1, #3
    5ce0:	d110      	bne.n	5d04 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x40>
    5ce2:	4631      	mov	r1, r6
    5ce4:	4628      	mov	r0, r5
    5ce6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5cea:	f008 b939 	b.w	df60 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>
    5cee:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5cf2:	2100      	movs	r1, #0
    5cf4:	f006 fd6e 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    5cf8:	4638      	mov	r0, r7
    5cfa:	f008 f8ee 	bl	deda <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1e>
    5cfe:	2020      	movs	r0, #32
    5d00:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    5d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5d08:	68e1      	ldr	r1, [r4, #12]
    5d0a:	480d      	ldr	r0, [pc, #52]	; (5d40 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x7c>)
    5d0c:	460a      	mov	r2, r1
    5d0e:	4408      	add	r0, r1
    5d10:	fbb0 f0f1 	udiv	r0, r0, r1
    5d14:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
    5d18:	f640 30b8 	movw	r0, #3000	; 0xbb8
    5d1c:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    5d20:	8ae3      	ldrh	r3, [r4, #22]
    5d22:	4638      	mov	r0, r7
    5d24:	f000 f80e 	bl	5d44 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5d28:	e7db      	b.n	5ce2 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x1e>
    5d2a:	68c1      	ldr	r1, [r0, #12]
    5d2c:	f8b4 3156 	ldrh.w	r3, [r4, #342]	; 0x156
    5d30:	f8d4 2150 	ldr.w	r2, [r4, #336]	; 0x150
    5d34:	4638      	mov	r0, r7
    5d36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5d3a:	f000 b803 	b.w	5d44 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0x80>
    5d3e:	0000      	.short	0x0000
    5d40:	01c9c37f 	.word	0x01c9c37f
    5d44:	b530      	push	{r4, r5, lr}
    5d46:	2400      	movs	r4, #0
    5d48:	86c4      	strh	r4, [r0, #54]	; 0x36
    5d4a:	8f44      	ldrh	r4, [r0, #58]	; 0x3a
    5d4c:	4d13      	ldr	r5, [pc, #76]	; (5d9c <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xd8>)
    5d4e:	434c      	muls	r4, r1
    5d50:	fbb4 f4f2 	udiv	r4, r4, r2
    5d54:	8744      	strh	r4, [r0, #58]	; 0x3a
    5d56:	f242 7410 	movw	r4, #10000	; 0x2710
    5d5a:	4363      	muls	r3, r4
    5d5c:	fbb3 f3f2 	udiv	r3, r3, r2
    5d60:	1c5b      	adds	r3, r3, #1
    5d62:	b29b      	uxth	r3, r3
    5d64:	fb03 f402 	mul.w	r4, r3, r2
    5d68:	8703      	strh	r3, [r0, #56]	; 0x38
    5d6a:	42ac      	cmp	r4, r5
    5d6c:	d901      	bls.n	5d72 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xae>
    5d6e:	1e5b      	subs	r3, r3, #1
    5d70:	8703      	strh	r3, [r0, #56]	; 0x38
    5d72:	4b0b      	ldr	r3, [pc, #44]	; (5da0 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ+0xdc>)
    5d74:	f240 2471 	movw	r4, #625	; 0x271
    5d78:	fbb3 f3f2 	udiv	r3, r3, r2
    5d7c:	1c5b      	adds	r3, r3, #1
    5d7e:	87c3      	strh	r3, [r0, #62]	; 0x3e
    5d80:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    5d82:	4363      	muls	r3, r4
    5d84:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    5d88:	1e5b      	subs	r3, r3, #1
    5d8a:	fbb3 f3f2 	udiv	r3, r3, r2
    5d8e:	62c3      	str	r3, [r0, #44]	; 0x2c
    5d90:	6a83      	ldr	r3, [r0, #40]	; 0x28
    5d92:	434b      	muls	r3, r1
    5d94:	fbb3 f1f2 	udiv	r1, r3, r2
    5d98:	6281      	str	r1, [r0, #40]	; 0x28
    5d9a:	bd30      	pop	{r4, r5, pc}
    5d9c:	01e84800 	.word	0x01e84800
    5da0:	02625a00 	.word	0x02625a00

00005da4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>:
    5da4:	4909      	ldr	r1, [pc, #36]	; (5dcc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5da6:	b508      	push	{r3, lr}
    5da8:	7809      	ldrb	r1, [r1, #0]
    5daa:	f88d 1000 	strb.w	r1, [sp]
    5dae:	9900      	ldr	r1, [sp, #0]
    5db0:	9100      	str	r1, [sp, #0]
    5db2:	f89d 1000 	ldrb.w	r1, [sp]
    5db6:	b109      	cbz	r1, 5dbc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x18>
    5db8:	2000      	movs	r0, #0
    5dba:	bd08      	pop	{r3, pc}
    5dbc:	4903      	ldr	r1, [pc, #12]	; (5dcc <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ+0x28>)
    5dbe:	f8d1 2001 	ldr.w	r2, [r1, #1]
    5dc2:	6002      	str	r2, [r0, #0]
    5dc4:	7949      	ldrb	r1, [r1, #5]
    5dc6:	7101      	strb	r1, [r0, #4]
    5dc8:	2001      	movs	r0, #1
    5dca:	bd08      	pop	{r3, pc}
    5dcc:	20000297 	.word	0x20000297

00005dd0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>:
    5dd0:	4905      	ldr	r1, [pc, #20]	; (5de8 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ+0x18>)
    5dd2:	2201      	movs	r2, #1
    5dd4:	700a      	strb	r2, [r1, #0]
    5dd6:	460a      	mov	r2, r1
    5dd8:	6803      	ldr	r3, [r0, #0]
    5dda:	f8c2 3001 	str.w	r3, [r2, #1]
    5dde:	7900      	ldrb	r0, [r0, #4]
    5de0:	7150      	strb	r0, [r2, #5]
    5de2:	2000      	movs	r0, #0
    5de4:	7008      	strb	r0, [r1, #0]
    5de6:	4770      	bx	lr
    5de8:	20000297 	.word	0x20000297

00005dec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>:
    5dec:	b570      	push	{r4, r5, r6, lr}
    5dee:	ea81 4111 	eor.w	r1, r1, r1, lsr #16
    5df2:	b28b      	uxth	r3, r1
    5df4:	7ac5      	ldrb	r5, [r0, #11]
    5df6:	ea83 0102 	eor.w	r1, r3, r2
    5dfa:	2200      	movs	r2, #0
    5dfc:	b2cc      	uxtb	r4, r1
    5dfe:	0a09      	lsrs	r1, r1, #8
    5e00:	fa94 f4a4 	rbit	r4, r4
    5e04:	fa91 f1a1 	rbit	r1, r1
    5e08:	0e24      	lsrs	r4, r4, #24
    5e0a:	0e09      	lsrs	r1, r1, #24
    5e0c:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    5e10:	eb01 1101 	add.w	r1, r1, r1, lsl #4
    5e14:	1c52      	adds	r2, r2, #1
    5e16:	4419      	add	r1, r3
    5e18:	b2d2      	uxtb	r2, r2
    5e1a:	b289      	uxth	r1, r1
    5e1c:	2a03      	cmp	r2, #3
    5e1e:	d3ed      	bcc.n	5dfc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10>
    5e20:	4059      	eors	r1, r3
    5e22:	2225      	movs	r2, #37	; 0x25
    5e24:	fbb1 f3f2 	udiv	r3, r1, r2
    5e28:	fb02 1213 	mls	r2, r2, r3, r1
    5e2c:	eb00 03d2 	add.w	r3, r0, r2, lsr #3
    5e30:	f002 0607 	and.w	r6, r2, #7
    5e34:	785b      	ldrb	r3, [r3, #1]
    5e36:	2401      	movs	r4, #1
    5e38:	fa04 f606 	lsl.w	r6, r4, r6
    5e3c:	4233      	tst	r3, r6
    5e3e:	d001      	beq.n	5e44 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x58>
    5e40:	4610      	mov	r0, r2
    5e42:	bd70      	pop	{r4, r5, r6, pc}
    5e44:	434d      	muls	r5, r1
    5e46:	0c29      	lsrs	r1, r5, #16
    5e48:	1c49      	adds	r1, r1, #1
    5e4a:	b2c9      	uxtb	r1, r1
    5e4c:	2200      	movs	r2, #0
    5e4e:	1885      	adds	r5, r0, r2
    5e50:	79ab      	ldrb	r3, [r5, #6]
    5e52:	428b      	cmp	r3, r1
    5e54:	d312      	bcc.n	5e7c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x90>
    5e56:	f895 5001 	ldrb.w	r5, [r5, #1]
    5e5a:	2300      	movs	r3, #0
    5e5c:	fa04 f603 	lsl.w	r6, r4, r3
    5e60:	4235      	tst	r5, r6
    5e62:	d001      	beq.n	5e68 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x7c>
    5e64:	1e49      	subs	r1, r1, #1
    5e66:	b2c9      	uxtb	r1, r1
    5e68:	b121      	cbz	r1, 5e74 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x88>
    5e6a:	1c5b      	adds	r3, r3, #1
    5e6c:	b2db      	uxtb	r3, r3
    5e6e:	2b08      	cmp	r3, #8
    5e70:	d3f4      	bcc.n	5e5c <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x70>
    5e72:	e005      	b.n	5e80 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x94>
    5e74:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
    5e78:	b2c0      	uxtb	r0, r0
    5e7a:	bd70      	pop	{r4, r5, r6, pc}
    5e7c:	1ac9      	subs	r1, r1, r3
    5e7e:	b2c9      	uxtb	r1, r1
    5e80:	1c52      	adds	r2, r2, #1
    5e82:	b2d2      	uxtb	r2, r2
    5e84:	2a05      	cmp	r2, #5
    5e86:	d3e2      	bcc.n	5e4e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x62>
    5e88:	f240 110d 	movw	r1, #269	; 0x10d
    5e8c:	2046      	movs	r0, #70	; 0x46
    5e8e:	f7fe f817 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5e92:	0000      	movs	r0, r0
    5e94:	b570      	push	{r4, r5, r6, lr}
    5e96:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
    5e9a:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
    5e9e:	2401      	movs	r4, #1
    5ea0:	fb03 2101 	mla	r1, r3, r1, r2
    5ea4:	2225      	movs	r2, #37	; 0x25
    5ea6:	fbb1 f3f2 	udiv	r3, r1, r2
    5eaa:	fb02 1113 	mls	r1, r2, r3, r1
    5eae:	eb00 02d1 	add.w	r2, r0, r1, lsr #3
    5eb2:	f880 1022 	strb.w	r1, [r0, #34]	; 0x22
    5eb6:	f001 0307 	and.w	r3, r1, #7
    5eba:	7d92      	ldrb	r2, [r2, #22]
    5ebc:	fa04 f303 	lsl.w	r3, r4, r3
    5ec0:	421a      	tst	r2, r3
    5ec2:	d003      	beq.n	5ecc <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xe0>
    5ec4:	f880 1023 	strb.w	r1, [r0, #35]	; 0x23
    5ec8:	2000      	movs	r0, #0
    5eca:	bd70      	pop	{r4, r5, r6, pc}
    5ecc:	f890 2020 	ldrb.w	r2, [r0, #32]
    5ed0:	fbb1 f3f2 	udiv	r3, r1, r2
    5ed4:	fb02 1113 	mls	r1, r2, r3, r1
    5ed8:	1c49      	adds	r1, r1, #1
    5eda:	b2c9      	uxtb	r1, r1
    5edc:	2300      	movs	r3, #0
    5ede:	18c5      	adds	r5, r0, r3
    5ee0:	7eea      	ldrb	r2, [r5, #27]
    5ee2:	428a      	cmp	r2, r1
    5ee4:	d311      	bcc.n	5f0a <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x11e>
    5ee6:	f895 5016 	ldrb.w	r5, [r5, #22]
    5eea:	2200      	movs	r2, #0
    5eec:	fa04 f602 	lsl.w	r6, r4, r2
    5ef0:	4235      	tst	r5, r6
    5ef2:	d001      	beq.n	5ef8 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x10c>
    5ef4:	1e49      	subs	r1, r1, #1
    5ef6:	b2c9      	uxtb	r1, r1
    5ef8:	b121      	cbz	r1, 5f04 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x118>
    5efa:	1c52      	adds	r2, r2, #1
    5efc:	b2d2      	uxtb	r2, r2
    5efe:	2a08      	cmp	r2, #8
    5f00:	d3f4      	bcc.n	5eec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x100>
    5f02:	e004      	b.n	5f0e <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0x122>
    5f04:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
    5f08:	e7dc      	b.n	5ec4 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xd8>
    5f0a:	1a89      	subs	r1, r1, r2
    5f0c:	b2c9      	uxtb	r1, r1
    5f0e:	1c5b      	adds	r3, r3, #1
    5f10:	b2db      	uxtb	r3, r3
    5f12:	2b05      	cmp	r3, #5
    5f14:	d3e3      	bcc.n	5ede <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xf2>
    5f16:	201f      	movs	r0, #31
    5f18:	bd70      	pop	{r4, r5, r6, pc}
	...

00005f1c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>:
    5f1c:	7841      	ldrb	r1, [r0, #1]
    5f1e:	b141      	cbz	r1, 5f32 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5f20:	78c0      	ldrb	r0, [r0, #3]
    5f22:	2819      	cmp	r0, #25
    5f24:	d203      	bcs.n	5f2e <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x12>
    5f26:	4a04      	ldr	r2, [pc, #16]	; (5f38 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x1c>)
    5f28:	5c10      	ldrb	r0, [r2, r0]
    5f2a:	4288      	cmp	r0, r1
    5f2c:	d101      	bne.n	5f32 <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA+0x16>
    5f2e:	2001      	movs	r0, #1
    5f30:	4770      	bx	lr
    5f32:	2000      	movs	r0, #0
    5f34:	4770      	bx	lr
    5f36:	0000      	.short	0x0000
    5f38:	0000fc8a 	.word	0x0000fc8a

00005f3c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>:
    5f3c:	b510      	push	{r4, lr}
    5f3e:	2201      	movs	r2, #1
    5f40:	70c1      	strb	r1, [r0, #3]
    5f42:	2919      	cmp	r1, #25
    5f44:	d202      	bcs.n	5f4c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x10>
    5f46:	4a06      	ldr	r2, [pc, #24]	; (5f60 <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x24>)
    5f48:	5c52      	ldrb	r2, [r2, r1]
    5f4a:	e006      	b.n	5f5a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f4c:	29ff      	cmp	r1, #255	; 0xff
    5f4e:	d004      	beq.n	5f5a <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY+0x1e>
    5f50:	f240 31d5 	movw	r1, #981	; 0x3d5
    5f54:	202a      	movs	r0, #42	; 0x2a
    5f56:	f7fd ffb3 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    5f5a:	7042      	strb	r2, [r0, #1]
    5f5c:	bd10      	pop	{r4, pc}
    5f5e:	0000      	.short	0x0000
    5f60:	0000fc8a 	.word	0x0000fc8a

00005f64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>:
    5f64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5f68:	4c12      	ldr	r4, [pc, #72]	; (5fb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5f6a:	4607      	mov	r7, r0
    5f6c:	460e      	mov	r6, r1
    5f6e:	7da0      	ldrb	r0, [r4, #22]
    5f70:	b110      	cbz	r0, 5f78 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x14>
    5f72:	8b20      	ldrh	r0, [r4, #24]
    5f74:	2800      	cmp	r0, #0
    5f76:	d012      	beq.n	5f9e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5f78:	480e      	ldr	r0, [pc, #56]	; (5fb4 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x50>)
    5f7a:	3014      	adds	r0, #20
    5f7c:	4680      	mov	r8, r0
    5f7e:	f008 f920 	bl	e1c2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5f82:	b9a8      	cbnz	r0, 5fb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5f84:	8aa5      	ldrh	r5, [r4, #20]
    5f86:	8aa0      	ldrh	r0, [r4, #20]
    5f88:	4632      	mov	r2, r6
    5f8a:	4639      	mov	r1, r7
    5f8c:	f008 f951 	bl	e232 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2e>
    5f90:	b138      	cbz	r0, 5fa2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3e>
    5f92:	7da0      	ldrb	r0, [r4, #22]
    5f94:	b110      	cbz	r0, 5f9c <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x38>
    5f96:	8b20      	ldrh	r0, [r4, #24]
    5f98:	1e40      	subs	r0, r0, #1
    5f9a:	8320      	strh	r0, [r4, #24]
    5f9c:	2001      	movs	r0, #1
    5f9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fa2:	4640      	mov	r0, r8
    5fa4:	f008 f90d 	bl	e1c2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>
    5fa8:	b910      	cbnz	r0, 5fb0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x4c>
    5faa:	8aa0      	ldrh	r0, [r4, #20]
    5fac:	42a8      	cmp	r0, r5
    5fae:	d1ea      	bne.n	5f86 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x22>
    5fb0:	2000      	movs	r0, #0
    5fb2:	e7f4      	b.n	5f9e <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x3a>
    5fb4:	200011a4 	.word	0x200011a4
    5fb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    5fbc:	468a      	mov	sl, r1
    5fbe:	4699      	mov	r9, r3
    5fc0:	4615      	mov	r5, r2
    5fc2:	4604      	mov	r4, r0
    5fc4:	a901      	add	r1, sp, #4
    5fc6:	f007 fd96 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    5fca:	bbd8      	cbnz	r0, 6044 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    5fcc:	9f02      	ldr	r7, [sp, #8]
    5fce:	2001      	movs	r0, #1
    5fd0:	3778      	adds	r7, #120	; 0x78
    5fd2:	b18d      	cbz	r5, 5ff8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x94>
    5fd4:	4620      	mov	r0, r4
    5fd6:	f7fe fb87 	bl	46e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    5fda:	0004      	movs	r4, r0
    5fdc:	d00e      	beq.n	5ffc <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x98>
    5fde:	4629      	mov	r1, r5
    5fe0:	f007 fa81 	bl	d4e6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>
    5fe4:	0006      	movs	r6, r0
    5fe6:	d003      	beq.n	5ff0 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8c>
    5fe8:	4819      	ldr	r0, [pc, #100]	; (6050 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xec>)
    5fea:	8840      	ldrh	r0, [r0, #2]
    5fec:	42a8      	cmp	r0, r5
    5fee:	d207      	bcs.n	6000 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x9c>
    5ff0:	2000      	movs	r0, #0
    5ff2:	b004      	add	sp, #16
    5ff4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5ff8:	7538      	strb	r0, [r7, #20]
    5ffa:	e023      	b.n	6044 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe0>
    5ffc:	216e      	movs	r1, #110	; 0x6e
    5ffe:	e024      	b.n	604a <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe6>
    6000:	4620      	mov	r0, r4
    6002:	4631      	mov	r1, r6
    6004:	aa03      	add	r2, sp, #12
    6006:	f007 fa67 	bl	d4d8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    600a:	9803      	ldr	r0, [sp, #12]
    600c:	f04f 0800 	mov.w	r8, #0
    6010:	f8a0 8000 	strh.w	r8, [r0]
    6014:	f880 8002 	strb.w	r8, [r0, #2]
    6018:	7d39      	ldrb	r1, [r7, #20]
    601a:	b109      	cbz	r1, 6020 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xbc>
    601c:	f04f 0a02 	mov.w	sl, #2
    6020:	4651      	mov	r1, sl
    6022:	f008 f848 	bl	e0b6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    6026:	4631      	mov	r1, r6
    6028:	2603      	movs	r6, #3
    602a:	4620      	mov	r0, r4
    602c:	464a      	mov	r2, r9
    602e:	462b      	mov	r3, r5
    6030:	9600      	str	r6, [sp, #0]
    6032:	f007 f90e 	bl	d252 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>
    6036:	4620      	mov	r0, r4
    6038:	4629      	mov	r1, r5
    603a:	f007 f9e3 	bl	d404 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>
    603e:	b118      	cbz	r0, 6048 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0xe4>
    6040:	f887 8014 	strb.w	r8, [r7, #20]
    6044:	2001      	movs	r0, #1
    6046:	e7d4      	b.n	5ff2 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x8e>
    6048:	2184      	movs	r1, #132	; 0x84
    604a:	202b      	movs	r0, #43	; 0x2b
    604c:	f7fd ff38 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6050:	200011a4 	.word	0x200011a4

00006054 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>:
    6054:	4901      	ldr	r1, [pc, #4]	; (605c <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q+0x8>)
    6056:	2001      	movs	r0, #1
    6058:	7008      	strb	r0, [r1, #0]
    605a:	4770      	bx	lr
    605c:	2000027d 	.word	0x2000027d

00006060 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q>:
    6060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6064:	0006      	movs	r6, r0
    6066:	d00a      	beq.n	607e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x1e>
    6068:	4926      	ldr	r1, [pc, #152]	; (6104 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    606a:	2201      	movs	r2, #1
    606c:	7808      	ldrb	r0, [r1, #0]
    606e:	b148      	cbz	r0, 6084 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x24>
    6070:	2000      	movs	r0, #0
    6072:	7070      	strb	r0, [r6, #1]
    6074:	2303      	movs	r3, #3
    6076:	7033      	strb	r3, [r6, #0]
    6078:	7132      	strb	r2, [r6, #4]
    607a:	7008      	strb	r0, [r1, #0]
    607c:	e03c      	b.n	60f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    607e:	f240 21da 	movw	r1, #730	; 0x2da
    6082:	e009      	b.n	6098 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x38>
    6084:	4c1f      	ldr	r4, [pc, #124]	; (6104 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa4>)
    6086:	1ce4      	adds	r4, r4, #3
    6088:	7820      	ldrb	r0, [r4, #0]
    608a:	b940      	cbnz	r0, 609e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    608c:	1ca0      	adds	r0, r4, #2
    608e:	f008 f919 	bl	e2c4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    6092:	b120      	cbz	r0, 609e <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x3e>
    6094:	f240 21e9 	movw	r1, #745	; 0x2e9
    6098:	2010      	movs	r0, #16
    609a:	f7fd ff11 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    609e:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    60a2:	2000      	movs	r0, #0
    60a4:	f7fe f8f0 	bl	4288 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    60a8:	4f17      	ldr	r7, [pc, #92]	; (6108 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xa8>)
    60aa:	f8df 9060 	ldr.w	r9, [pc, #96]	; 610c <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xac>
    60ae:	4605      	mov	r5, r0
    60b0:	6838      	ldr	r0, [r7, #0]
    60b2:	b130      	cbz	r0, 60c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    60b4:	8860      	ldrh	r0, [r4, #2]
    60b6:	42a8      	cmp	r0, r5
    60b8:	d103      	bne.n	60c2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x62>
    60ba:	4630      	mov	r0, r6
    60bc:	f000 f9d2 	bl	6464 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f8>
    60c0:	e006      	b.n	60d0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x70>
    60c2:	f8d9 0000 	ldr.w	r0, [r9]
    60c6:	b120      	cbz	r0, 60d2 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x72>
    60c8:	8860      	ldrh	r0, [r4, #2]
    60ca:	4631      	mov	r1, r6
    60cc:	f000 f920 	bl	6310 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a4>
    60d0:	b990      	cbnz	r0, 60f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    60d2:	1ca0      	adds	r0, r4, #2
    60d4:	f008 f8f6 	bl	e2c4 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4>
    60d8:	b910      	cbnz	r0, 60e0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x80>
    60da:	8861      	ldrh	r1, [r4, #2]
    60dc:	4541      	cmp	r1, r8
    60de:	d1e7      	bne.n	60b0 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x50>
    60e0:	480b      	ldr	r0, [pc, #44]	; (6110 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb0>)
    60e2:	6801      	ldr	r1, [r0, #0]
    60e4:	b111      	cbz	r1, 60ec <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x8c>
    60e6:	4630      	mov	r0, r6
    60e8:	4788      	blx	r1
    60ea:	b928      	cbnz	r0, 60f8 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x98>
    60ec:	4809      	ldr	r0, [pc, #36]	; (6114 <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0xb4>)
    60ee:	6801      	ldr	r1, [r0, #0]
    60f0:	b129      	cbz	r1, 60fe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    60f2:	4630      	mov	r0, r6
    60f4:	4788      	blx	r1
    60f6:	b110      	cbz	r0, 60fe <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9e>
    60f8:	2001      	movs	r0, #1
    60fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60fe:	2000      	movs	r0, #0
    6100:	e7fb      	b.n	60fa <sym_XOOTGCSEAKA3PUKZW3QYB4DCVC2FKUP2TS5AZ5Q+0x9a>
    6102:	0000      	.short	0x0000
    6104:	2000027d 	.word	0x2000027d
    6108:	200000f4 	.word	0x200000f4
    610c:	200000f0 	.word	0x200000f0
    6110:	200000f8 	.word	0x200000f8
    6114:	200000ec 	.word	0x200000ec

00006118 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>:
    6118:	4901      	ldr	r1, [pc, #4]	; (6120 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA+0x8>)
    611a:	7008      	strb	r0, [r1, #0]
    611c:	f000 b996 	b.w	644c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    6120:	2000027c 	.word	0x2000027c

00006124 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>:
    6124:	4902      	ldr	r1, [pc, #8]	; (6130 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA+0xc>)
    6126:	2001      	movs	r0, #1
    6128:	7048      	strb	r0, [r1, #1]
    612a:	f000 b809 	b.w	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    612e:	0000      	.short	0x0000
    6130:	2000027d 	.word	0x2000027d

00006134 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>:
    6134:	4801      	ldr	r0, [pc, #4]	; (613c <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY+0x8>)
    6136:	7840      	ldrb	r0, [r0, #1]
    6138:	4770      	bx	lr
    613a:	0000      	.short	0x0000
    613c:	2000027d 	.word	0x2000027d

00006140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>:
    6140:	4801      	ldr	r0, [pc, #4]	; (6148 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI+0x8>)
    6142:	7800      	ldrb	r0, [r0, #0]
    6144:	f7fd bcac 	b.w	3aa0 <sym_GURZ3AH6X65RGSKYMYNWZVP6HM56LA5MRAQWT6Q>
    6148:	2000027c 	.word	0x2000027c

0000614c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>:
    614c:	4904      	ldr	r1, [pc, #16]	; (6160 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x14>)
    614e:	4803      	ldr	r0, [pc, #12]	; (615c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x10>)
    6150:	6008      	str	r0, [r1, #0]
    6152:	4905      	ldr	r1, [pc, #20]	; (6168 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x1c>)
    6154:	4803      	ldr	r0, [pc, #12]	; (6164 <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY+0x18>)
    6156:	6008      	str	r0, [r1, #0]
    6158:	4770      	bx	lr
    615a:	0000      	.short	0x0000
    615c:	000089dd 	.word	0x000089dd
    6160:	200000f0 	.word	0x200000f0
    6164:	00004be9 	.word	0x00004be9
    6168:	200000f8 	.word	0x200000f8

0000616c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>:
    616c:	4902      	ldr	r1, [pc, #8]	; (6178 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc>)
    616e:	4801      	ldr	r0, [pc, #4]	; (6174 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x8>)
    6170:	6008      	str	r0, [r1, #0]
    6172:	4770      	bx	lr
    6174:	000066d1 	.word	0x000066d1
    6178:	200000f4 	.word	0x200000f4
    617c:	b570      	push	{r4, r5, r6, lr}
    617e:	4604      	mov	r4, r0
    6180:	7800      	ldrb	r0, [r0, #0]
    6182:	2805      	cmp	r0, #5
    6184:	d001      	beq.n	618a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e>
    6186:	216d      	movs	r1, #109	; 0x6d
    6188:	e056      	b.n	6238 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    618a:	7ba0      	ldrb	r0, [r4, #14]
    618c:	06c0      	lsls	r0, r0, #27
    618e:	d401      	bmi.n	6194 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x28>
    6190:	216e      	movs	r1, #110	; 0x6e
    6192:	e051      	b.n	6238 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6194:	221c      	movs	r2, #28
    6196:	1d21      	adds	r1, r4, #4
    6198:	482d      	ldr	r0, [pc, #180]	; (6250 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    619a:	f006 faa1 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    619e:	482c      	ldr	r0, [pc, #176]	; (6250 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    61a0:	7b22      	ldrb	r2, [r4, #12]
    61a2:	f104 0120 	add.w	r1, r4, #32
    61a6:	301c      	adds	r0, #28
    61a8:	f006 fa9a 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    61ac:	4828      	ldr	r0, [pc, #160]	; (6250 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    61ae:	f04f 0201 	mov.w	r2, #1
    61b2:	7a81      	ldrb	r1, [r0, #10]
    61b4:	0749      	lsls	r1, r1, #29
    61b6:	d502      	bpl.n	61be <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x52>
    61b8:	7cc1      	ldrb	r1, [r0, #19]
    61ba:	29fe      	cmp	r1, #254	; 0xfe
    61bc:	d00c      	beq.n	61d8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x6c>
    61be:	2304      	movs	r3, #4
    61c0:	7023      	strb	r3, [r4, #0]
    61c2:	6801      	ldr	r1, [r0, #0]
    61c4:	6061      	str	r1, [r4, #4]
    61c6:	6841      	ldr	r1, [r0, #4]
    61c8:	60a1      	str	r1, [r4, #8]
    61ca:	8901      	ldrh	r1, [r0, #8]
    61cc:	81a1      	strh	r1, [r4, #12]
    61ce:	7a81      	ldrb	r1, [r0, #10]
    61d0:	070d      	lsls	r5, r1, #28
    61d2:	d519      	bpl.n	6208 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x9c>
    61d4:	73a3      	strb	r3, [r4, #14]
    61d6:	e02b      	b.n	6230 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    61d8:	2113      	movs	r1, #19
    61da:	7021      	strb	r1, [r4, #0]
    61dc:	7801      	ldrb	r1, [r0, #0]
    61de:	7121      	strb	r1, [r4, #4]
    61e0:	7162      	strb	r2, [r4, #5]
    61e2:	7841      	ldrb	r1, [r0, #1]
    61e4:	71a1      	strb	r1, [r4, #6]
    61e6:	f8d0 1002 	ldr.w	r1, [r0, #2]
    61ea:	f8c4 1007 	str.w	r1, [r4, #7]
    61ee:	88c1      	ldrh	r1, [r0, #6]
    61f0:	f8a4 100b 	strh.w	r1, [r4, #11]
    61f4:	21fe      	movs	r1, #254	; 0xfe
    61f6:	7361      	strb	r1, [r4, #13]
    61f8:	6941      	ldr	r1, [r0, #20]
    61fa:	f8c4 100e 	str.w	r1, [r4, #14]
    61fe:	8b01      	ldrh	r1, [r0, #24]
    6200:	8261      	strh	r1, [r4, #18]
    6202:	7a40      	ldrb	r0, [r0, #9]
    6204:	7520      	strb	r0, [r4, #20]
    6206:	bd70      	pop	{r4, r5, r6, pc}
    6208:	07cb      	lsls	r3, r1, #31
    620a:	d003      	beq.n	6214 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    620c:	078b      	lsls	r3, r1, #30
    620e:	d501      	bpl.n	6214 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xa8>
    6210:	2100      	movs	r1, #0
    6212:	e00c      	b.n	622e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    6214:	074b      	lsls	r3, r1, #29
    6216:	d501      	bpl.n	621c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb0>
    6218:	73a2      	strb	r2, [r4, #14]
    621a:	e009      	b.n	6230 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc4>
    621c:	07ca      	lsls	r2, r1, #31
    621e:	d001      	beq.n	6224 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xb8>
    6220:	21b5      	movs	r1, #181	; 0xb5
    6222:	e009      	b.n	6238 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xcc>
    6224:	0789      	lsls	r1, r1, #30
    6226:	d501      	bpl.n	622c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc0>
    6228:	2102      	movs	r1, #2
    622a:	e000      	b.n	622e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xc2>
    622c:	2103      	movs	r1, #3
    622e:	73a1      	strb	r1, [r4, #14]
    6230:	7a02      	ldrb	r2, [r0, #8]
    6232:	2a1f      	cmp	r2, #31
    6234:	d903      	bls.n	623e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xd2>
    6236:	21b8      	movs	r1, #184	; 0xb8
    6238:	2010      	movs	r0, #16
    623a:	f7fd fe41 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    623e:	f104 000f 	add.w	r0, r4, #15
    6242:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6246:	4902      	ldr	r1, [pc, #8]	; (6250 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe4>)
    6248:	311c      	adds	r1, #28
    624a:	f006 ba49 	b.w	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    624e:	0000      	.short	0x0000
    6250:	200011c0 	.word	0x200011c0
    6254:	b510      	push	{r4, lr}
    6256:	492d      	ldr	r1, [pc, #180]	; (630c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1a0>)
    6258:	b086      	sub	sp, #24
    625a:	7c8a      	ldrb	r2, [r1, #18]
    625c:	7801      	ldrb	r1, [r0, #0]
    625e:	07d3      	lsls	r3, r2, #31
    6260:	d101      	bne.n	6266 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xfa>
    6262:	291d      	cmp	r1, #29
    6264:	d004      	beq.n	6270 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x104>
    6266:	291c      	cmp	r1, #28
    6268:	d01f      	beq.n	62aa <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x13e>
    626a:	2915      	cmp	r1, #21
    626c:	d046      	beq.n	62fc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x190>
    626e:	e04a      	b.n	6306 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    6270:	8880      	ldrh	r0, [r0, #4]
    6272:	f8ad 0000 	strh.w	r0, [sp]
    6276:	a902      	add	r1, sp, #8
    6278:	f007 fc3d 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    627c:	b110      	cbz	r0, 6284 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x118>
    627e:	f44f 71c4 	mov.w	r1, #392	; 0x188
    6282:	e035      	b.n	62f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    6284:	9803      	ldr	r0, [sp, #12]
    6286:	f810 1f66 	ldrb.w	r1, [r0, #102]!
    628a:	f88d 1002 	strb.w	r1, [sp, #2]
    628e:	7841      	ldrb	r1, [r0, #1]
    6290:	f88d 1003 	strb.w	r1, [sp, #3]
    6294:	8840      	ldrh	r0, [r0, #2]
    6296:	f8ad 0004 	strh.w	r0, [sp, #4]
    629a:	2102      	movs	r1, #2
    629c:	4668      	mov	r0, sp
    629e:	f004 fd45 	bl	ad2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    62a2:	b340      	cbz	r0, 62f6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    62a4:	f44f 71cf 	mov.w	r1, #414	; 0x19e
    62a8:	e022      	b.n	62f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    62aa:	0791      	lsls	r1, r2, #30
    62ac:	d42b      	bmi.n	6306 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    62ae:	8884      	ldrh	r4, [r0, #4]
    62b0:	a903      	add	r1, sp, #12
    62b2:	4620      	mov	r0, r4
    62b4:	f008 ff8e 	bl	f1d4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>
    62b8:	b110      	cbz	r0, 62c0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x154>
    62ba:	f240 11a5 	movw	r1, #421	; 0x1a5
    62be:	e017      	b.n	62f0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x184>
    62c0:	f8ad 4000 	strh.w	r4, [sp]
    62c4:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    62c8:	f8ad 0002 	strh.w	r0, [sp, #2]
    62cc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    62d0:	f8ad 0004 	strh.w	r0, [sp, #4]
    62d4:	f8bd 000e 	ldrh.w	r0, [sp, #14]
    62d8:	f8ad 0006 	strh.w	r0, [sp, #6]
    62dc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
    62e0:	f8ad 0008 	strh.w	r0, [sp, #8]
    62e4:	4668      	mov	r0, sp
    62e6:	f008 ffa0 	bl	f22a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>
    62ea:	b120      	cbz	r0, 62f6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    62ec:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
    62f0:	2010      	movs	r0, #16
    62f2:	f7fd fde5 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    62f6:	2001      	movs	r0, #1
    62f8:	b006      	add	sp, #24
    62fa:	bd10      	pop	{r4, pc}
    62fc:	0751      	lsls	r1, r2, #29
    62fe:	d402      	bmi.n	6306 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x19a>
    6300:	7b80      	ldrb	r0, [r0, #14]
    6302:	07c0      	lsls	r0, r0, #31
    6304:	d0f7      	beq.n	62f6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18a>
    6306:	2000      	movs	r0, #0
    6308:	e7f6      	b.n	62f8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x18c>
    630a:	0000      	.short	0x0000
    630c:	200011a4 	.word	0x200011a4
    6310:	e92d 4ff3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6314:	b087      	sub	sp, #28
    6316:	460c      	mov	r4, r1
    6318:	a902      	add	r1, sp, #8
    631a:	9807      	ldr	r0, [sp, #28]
    631c:	f007 fbeb 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    6320:	2800      	cmp	r0, #0
    6322:	d17d      	bne.n	6420 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    6324:	f8df 9120 	ldr.w	r9, [pc, #288]	; 6448 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2dc>
    6328:	f04f 0801 	mov.w	r8, #1
    632c:	4682      	mov	sl, r0
    632e:	9803      	ldr	r0, [sp, #12]
    6330:	f890 0078 	ldrb.w	r0, [r0, #120]	; 0x78
    6334:	2800      	cmp	r0, #0
    6336:	d00c      	beq.n	6352 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    6338:	f8d9 2000 	ldr.w	r2, [r9]
    633c:	b162      	cbz	r2, 6358 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    633e:	4621      	mov	r1, r4
    6340:	9807      	ldr	r0, [sp, #28]
    6342:	4790      	blx	r2
    6344:	b140      	cbz	r0, 6358 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1ec>
    6346:	4620      	mov	r0, r4
    6348:	f7ff ff84 	bl	6254 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0xe8>
    634c:	2800      	cmp	r0, #0
    634e:	d1ee      	bne.n	632e <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1c2>
    6350:	2001      	movs	r0, #1
    6352:	b009      	add	sp, #36	; 0x24
    6354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6358:	9d03      	ldr	r5, [sp, #12]
    635a:	f895 0120 	ldrb.w	r0, [r5, #288]	; 0x120
    635e:	3578      	adds	r5, #120	; 0x78
    6360:	b950      	cbnz	r0, 6378 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    6362:	f895 0024 	ldrb.w	r0, [r5, #36]	; 0x24
    6366:	f88d 0004 	strb.w	r0, [sp, #4]
    636a:	9801      	ldr	r0, [sp, #4]
    636c:	9001      	str	r0, [sp, #4]
    636e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    6372:	b108      	cbz	r0, 6378 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20c>
    6374:	2001      	movs	r0, #1
    6376:	e000      	b.n	637a <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x20e>
    6378:	2000      	movs	r0, #0
    637a:	4683      	mov	fp, r0
    637c:	f895 0047 	ldrb.w	r0, [r5, #71]	; 0x47
    6380:	b1c0      	cbz	r0, 63b4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    6382:	f895 0048 	ldrb.w	r0, [r5, #72]	; 0x48
    6386:	0780      	lsls	r0, r0, #30
    6388:	d514      	bpl.n	63b4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x248>
    638a:	f884 a001 	strb.w	sl, [r4, #1]
    638e:	f884 8000 	strb.w	r8, [r4]
    6392:	f884 a004 	strb.w	sl, [r4, #4]
    6396:	9907      	ldr	r1, [sp, #28]
    6398:	f8a4 1005 	strh.w	r1, [r4, #5]
    639c:	f895 1049 	ldrb.w	r1, [r5, #73]	; 0x49
    63a0:	71e1      	strb	r1, [r4, #7]
    63a2:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    63a6:	8121      	strh	r1, [r4, #8]
    63a8:	f8b5 104c 	ldrh.w	r1, [r5, #76]	; 0x4c
    63ac:	8161      	strh	r1, [r4, #10]
    63ae:	f885 a047 	strb.w	sl, [r5, #71]	; 0x47
    63b2:	e7c8      	b.n	6346 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    63b4:	9807      	ldr	r0, [sp, #28]
    63b6:	f7fe f997 	bl	46e8 <sym_35ZAQW4ABRMBYES2ZHPK63BHZAFFFC4WMGEJ6NA>
    63ba:	0007      	movs	r7, r0
    63bc:	d00d      	beq.n	63da <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x26e>
    63be:	f007 f845 	bl	d44c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>
    63c2:	0006      	movs	r6, r0
    63c4:	d015      	beq.n	63f2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x286>
    63c6:	f884 a001 	strb.w	sl, [r4, #1]
    63ca:	200f      	movs	r0, #15
    63cc:	7020      	strb	r0, [r4, #0]
    63ce:	9807      	ldr	r0, [sp, #28]
    63d0:	80e0      	strh	r0, [r4, #6]
    63d2:	8126      	strh	r6, [r4, #8]
    63d4:	f884 8004 	strb.w	r8, [r4, #4]
    63d8:	e007      	b.n	63ea <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x27e>
    63da:	f240 2133 	movw	r1, #563	; 0x233
    63de:	e02d      	b.n	643c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d0>
    63e0:	2100      	movs	r1, #0
    63e2:	4638      	mov	r0, r7
    63e4:	460a      	mov	r2, r1
    63e6:	f007 f955 	bl	d694 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    63ea:	1e76      	subs	r6, r6, #1
    63ec:	b2b6      	uxth	r6, r6
    63ee:	d2f7      	bcs.n	63e0 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x274>
    63f0:	e7a9      	b.n	6346 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    63f2:	9807      	ldr	r0, [sp, #28]
    63f4:	f7fe f962 	bl	46bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    63f8:	b1f0      	cbz	r0, 6438 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2cc>
    63fa:	f1bb 0f00 	cmp.w	fp, #0
    63fe:	d020      	beq.n	6442 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    6400:	f006 ff3e 	bl	d280 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>
    6404:	b160      	cbz	r0, 6420 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b4>
    6406:	9807      	ldr	r0, [sp, #28]
    6408:	f007 fa73 	bl	d8f2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    640c:	2100      	movs	r1, #0
    640e:	9807      	ldr	r0, [sp, #28]
    6410:	f7fd ffd4 	bl	43bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    6414:	f884 a001 	strb.w	sl, [r4, #1]
    6418:	210c      	movs	r1, #12
    641a:	4650      	mov	r0, sl
    641c:	7021      	strb	r1, [r4, #0]
    641e:	e000      	b.n	6422 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2b6>
    6420:	e00f      	b.n	6442 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2d6>
    6422:	f884 a004 	strb.w	sl, [r4, #4]
    6426:	9907      	ldr	r1, [sp, #28]
    6428:	f8a4 1005 	strh.w	r1, [r4, #5]
    642c:	f895 1025 	ldrb.w	r1, [r5, #37]	; 0x25
    6430:	71e1      	strb	r1, [r4, #7]
    6432:	3524      	adds	r5, #36	; 0x24
    6434:	7028      	strb	r0, [r5, #0]
    6436:	e786      	b.n	6346 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1da>
    6438:	f240 2151 	movw	r1, #593	; 0x251
    643c:	2010      	movs	r0, #16
    643e:	f7fd fd3f 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6442:	2000      	movs	r0, #0
    6444:	e785      	b.n	6352 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x1e6>
    6446:	0000      	.short	0x0000
    6448:	200000f0 	.word	0x200000f0
    644c:	4804      	ldr	r0, [pc, #16]	; (6460 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2f4>)
    644e:	2100      	movs	r1, #0
    6450:	f64f 72ff 	movw	r2, #65535	; 0xffff
    6454:	7001      	strb	r1, [r0, #0]
    6456:	8042      	strh	r2, [r0, #2]
    6458:	1f00      	subs	r0, r0, #4
    645a:	f8a0 1001 	strh.w	r1, [r0, #1]
    645e:	4770      	bx	lr
    6460:	20000280 	.word	0x20000280
    6464:	b570      	push	{r4, r5, r6, lr}
    6466:	4604      	mov	r4, r0
    6468:	481b      	ldr	r0, [pc, #108]	; (64d8 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x36c>)
    646a:	6801      	ldr	r1, [r0, #0]
    646c:	b319      	cbz	r1, 64b6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    646e:	4620      	mov	r0, r4
    6470:	4788      	blx	r1
    6472:	b300      	cbz	r0, 64b6 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x34a>
    6474:	7820      	ldrb	r0, [r4, #0]
    6476:	2818      	cmp	r0, #24
    6478:	d002      	beq.n	6480 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x314>
    647a:	2805      	cmp	r0, #5
    647c:	d016      	beq.n	64ac <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x340>
    647e:	e018      	b.n	64b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6480:	7920      	ldrb	r0, [r4, #4]
    6482:	2801      	cmp	r0, #1
    6484:	d115      	bne.n	64b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6486:	88e0      	ldrh	r0, [r4, #6]
    6488:	2100      	movs	r1, #0
    648a:	f007 f9ca 	bl	d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    648e:	0004      	movs	r4, r0
    6490:	d00f      	beq.n	64b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    6492:	8820      	ldrh	r0, [r4, #0]
    6494:	f007 fa2d 	bl	d8f2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    6498:	8820      	ldrh	r0, [r4, #0]
    649a:	2100      	movs	r1, #0
    649c:	f7fd ff8e 	bl	43bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    64a0:	b138      	cbz	r0, 64b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    64a2:	f44f 7185 	mov.w	r1, #266	; 0x10a
    64a6:	2010      	movs	r0, #16
    64a8:	f7fd fd0a 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    64ac:	4620      	mov	r0, r4
    64ae:	f7ff fe65 	bl	617c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x10>
    64b2:	2001      	movs	r0, #1
    64b4:	bd70      	pop	{r4, r5, r6, pc}
    64b6:	4d09      	ldr	r5, [pc, #36]	; (64dc <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x370>)
    64b8:	7868      	ldrb	r0, [r5, #1]
    64ba:	2800      	cmp	r0, #0
    64bc:	d0fa      	beq.n	64b4 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x348>
    64be:	2600      	movs	r6, #0
    64c0:	7066      	strb	r6, [r4, #1]
    64c2:	2014      	movs	r0, #20
    64c4:	7020      	strb	r0, [r4, #0]
    64c6:	2220      	movs	r2, #32
    64c8:	4631      	mov	r1, r6
    64ca:	1d20      	adds	r0, r4, #4
    64cc:	f006 f982 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    64d0:	2002      	movs	r0, #2
    64d2:	7120      	strb	r0, [r4, #4]
    64d4:	706e      	strb	r6, [r5, #1]
    64d6:	e7ec      	b.n	64b2 <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x346>
    64d8:	200000f4 	.word	0x200000f4
    64dc:	2000027d 	.word	0x2000027d

000064e0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>:
    64e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    64e2:	f06f 021f 	mvn.w	r2, #31
    64e6:	0c01      	lsrs	r1, r0, #16
    64e8:	ea02 2690 	and.w	r6, r2, r0, lsr #10
    64ec:	251f      	movs	r5, #31
    64ee:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    64f2:	3854      	subs	r0, #84	; 0x54
    64f4:	d00d      	beq.n	6512 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    64f6:	f5a1 40aa 	sub.w	r0, r1, #21760	; 0x5500
    64fa:	3855      	subs	r0, #85	; 0x55
    64fc:	d009      	beq.n	6512 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    64fe:	f5a1 5028 	sub.w	r0, r1, #10752	; 0x2a00
    6502:	38aa      	subs	r0, #170	; 0xaa
    6504:	d005      	beq.n	6512 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    6506:	f5a1 402a 	sub.w	r0, r1, #43520	; 0xaa00
    650a:	38aa      	subs	r0, #170	; 0xaa
    650c:	d001      	beq.n	6512 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x32>
    650e:	2001      	movs	r0, #1
    6510:	e000      	b.n	6514 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x34>
    6512:	2000      	movs	r0, #0
    6514:	2200      	movs	r2, #0
    6516:	4613      	mov	r3, r2
    6518:	ea4f 0402 	mov.w	r4, r2
    651c:	ea82 0701 	eor.w	r7, r2, r1
    6520:	43ff      	mvns	r7, r7
    6522:	431f      	orrs	r7, r3
    6524:	1c7f      	adds	r7, r7, #1
    6526:	d00f      	beq.n	6548 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x68>
    6528:	f006 0701 	and.w	r7, r6, #1
    652c:	0852      	lsrs	r2, r2, #1
    652e:	ea42 32c7 	orr.w	r2, r2, r7, lsl #15
    6532:	f005 0701 	and.w	r7, r5, #1
    6536:	085b      	lsrs	r3, r3, #1
    6538:	0876      	lsrs	r6, r6, #1
    653a:	086d      	lsrs	r5, r5, #1
    653c:	1c64      	adds	r4, r4, #1
    653e:	ea43 33c7 	orr.w	r3, r3, r7, lsl #15
    6542:	2c16      	cmp	r4, #22
    6544:	d3ea      	bcc.n	651c <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY+0x3c>
    6546:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6548:	2000      	movs	r0, #0
    654a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000654c <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>:
    654c:	4801      	ldr	r0, [pc, #4]	; (6554 <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA+0x8>)
    654e:	f008 b846 	b.w	e5de <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>
    6552:	0000      	.short	0x0000
    6554:	200000fc 	.word	0x200000fc

00006558 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>:
    6558:	b510      	push	{r4, lr}
    655a:	4604      	mov	r4, r0
    655c:	f008 f82e 	bl	e5bc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    6560:	b310      	cbz	r0, 65a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6562:	43e0      	mvns	r0, r4
    6564:	f008 f82a 	bl	e5bc <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x52>
    6568:	b1f0      	cbz	r0, 65a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    656a:	16a0      	asrs	r0, r4, #26
    656c:	ea80 0060 	eor.w	r0, r0, r0, asr #1
    6570:	1e41      	subs	r1, r0, #1
    6572:	4208      	tst	r0, r1
    6574:	d018      	beq.n	65a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6576:	ea84 0064 	eor.w	r0, r4, r4, asr #1
    657a:	f007 fae5 	bl	db48 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>
    657e:	2818      	cmp	r0, #24
    6580:	d812      	bhi.n	65a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    6582:	b2a0      	uxth	r0, r4
    6584:	ebb0 4f14 	cmp.w	r0, r4, lsr #16
    6588:	d107      	bne.n	659a <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x42>
    658a:	f04f 11ff 	mov.w	r1, #16711935	; 0xff00ff
    658e:	ea01 2114 	and.w	r1, r1, r4, lsr #8
    6592:	f004 10ff 	and.w	r0, r4, #16711935	; 0xff00ff
    6596:	4281      	cmp	r1, r0
    6598:	d006      	beq.n	65a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    659a:	4804      	ldr	r0, [pc, #16]	; (65ac <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x54>)
    659c:	4044      	eors	r4, r0
    659e:	1e60      	subs	r0, r4, #1
    65a0:	4204      	tst	r4, r0
    65a2:	d001      	beq.n	65a8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x50>
    65a4:	2001      	movs	r0, #1
    65a6:	bd10      	pop	{r4, pc}
    65a8:	2000      	movs	r0, #0
    65aa:	bd10      	pop	{r4, pc}
    65ac:	8e89bed6 	.word	0x8e89bed6
    65b0:	4801      	ldr	r0, [pc, #4]	; (65b8 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x60>)
    65b2:	f000 b803 	b.w	65bc <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>
    65b6:	0000      	.short	0x0000
    65b8:	200000fc 	.word	0x200000fc

000065bc <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY>:
    65bc:	b510      	push	{r4, lr}
    65be:	e9d0 2100 	ldrd	r2, r1, [r0]
    65c2:	4b09      	ldr	r3, [pc, #36]	; (65e8 <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x2c>)
    65c4:	4c09      	ldr	r4, [pc, #36]	; (65ec <sym_FHCPQPCVKCAARE2UXX76LUS47LWUSEX2HACFXDY+0x30>)
    65c6:	4353      	muls	r3, r2
    65c8:	4354      	muls	r4, r2
    65ca:	4051      	eors	r1, r2
    65cc:	ea81 12b2 	eor.w	r2, r1, r2, ror #6
    65d0:	ea82 2241 	eor.w	r2, r2, r1, lsl #9
    65d4:	ea4f 41f1 	mov.w	r1, r1, ror #19
    65d8:	e9c0 2100 	strd	r2, r1, [r0]
    65dc:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
    65e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    65e4:	4618      	mov	r0, r3
    65e6:	bd10      	pop	{r4, pc}
    65e8:	c6ef3760 	.word	0xc6ef3760
    65ec:	9e3779bb 	.word	0x9e3779bb

000065f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>:
    65f0:	4801      	ldr	r0, [pc, #4]	; (65f8 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY+0x8>)
    65f2:	6840      	ldr	r0, [r0, #4]
    65f4:	3080      	adds	r0, #128	; 0x80
    65f6:	4770      	bx	lr
    65f8:	20000104 	.word	0x20000104

000065fc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>:
    65fc:	b510      	push	{r4, lr}
    65fe:	4c1f      	ldr	r4, [pc, #124]	; (667c <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x80>)
    6600:	6860      	ldr	r0, [r4, #4]
    6602:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    6606:	f008 f80b 	bl	e620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    660a:	6861      	ldr	r1, [r4, #4]
    660c:	f881 0031 	strb.w	r0, [r1, #49]	; 0x31
    6610:	3132      	adds	r1, #50	; 0x32
    6612:	f7fe faa7 	bl	4b64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    6616:	6860      	ldr	r0, [r4, #4]
    6618:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    661c:	f008 f807 	bl	e62e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    6620:	6861      	ldr	r1, [r4, #4]
    6622:	f881 0069 	strb.w	r0, [r1, #105]	; 0x69
    6626:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    662a:	3132      	adds	r1, #50	; 0x32
    662c:	f007 ffe4 	bl	e5f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6630:	b930      	cbnz	r0, 6640 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x44>
    6632:	6861      	ldr	r1, [r4, #4]
    6634:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    6638:	3132      	adds	r1, #50	; 0x32
    663a:	f007 ffe6 	bl	e60a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    663e:	b108      	cbz	r0, 6644 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x48>
    6640:	2101      	movs	r1, #1
    6642:	e000      	b.n	6646 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x4a>
    6644:	2100      	movs	r1, #0
    6646:	6860      	ldr	r0, [r4, #4]
    6648:	f880 1049 	strb.w	r1, [r0, #73]	; 0x49
    664c:	b919      	cbnz	r1, 6656 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x5a>
    664e:	f890 1069 	ldrb.w	r1, [r0, #105]	; 0x69
    6652:	2900      	cmp	r1, #0
    6654:	d010      	beq.n	6678 <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x7c>
    6656:	2100      	movs	r1, #0
    6658:	6781      	str	r1, [r0, #120]	; 0x78
    665a:	f005 fecc 	bl	c3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    665e:	6861      	ldr	r1, [r4, #4]
    6660:	6448      	str	r0, [r1, #68]	; 0x44
    6662:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    6666:	b110      	cbz	r0, 666e <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ+0x72>
    6668:	2000      	movs	r0, #0
    666a:	f7ff f863 	bl	5734 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    666e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6672:	2000      	movs	r0, #0
    6674:	f000 bdfa 	b.w	726c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>
    6678:	bd10      	pop	{r4, pc}
    667a:	0000      	.short	0x0000
    667c:	20000104 	.word	0x20000104

00006680 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>:
    6680:	b510      	push	{r4, lr}
    6682:	4c09      	ldr	r4, [pc, #36]	; (66a8 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x28>)
    6684:	2803      	cmp	r0, #3
    6686:	6864      	ldr	r4, [r4, #4]
    6688:	d109      	bne.n	669e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    668a:	63e1      	str	r1, [r4, #60]	; 0x3c
    668c:	b13b      	cbz	r3, 669e <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY+0x1e>
    668e:	f884 204c 	strb.w	r2, [r4, #76]	; 0x4c
    6692:	6819      	ldr	r1, [r3, #0]
    6694:	f8c4 104d 	str.w	r1, [r4, #77]	; 0x4d
    6698:	8899      	ldrh	r1, [r3, #4]
    669a:	f8a4 1051 	strh.w	r1, [r4, #81]	; 0x51
    669e:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    66a2:	2000      	movs	r0, #0
    66a4:	bd10      	pop	{r4, pc}
    66a6:	0000      	.short	0x0000
    66a8:	20000104 	.word	0x20000104

000066ac <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>:
    66ac:	4807      	ldr	r0, [pc, #28]	; (66cc <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x20>)
    66ae:	b508      	push	{r3, lr}
    66b0:	6840      	ldr	r0, [r0, #4]
    66b2:	7801      	ldrb	r1, [r0, #0]
    66b4:	f88d 1000 	strb.w	r1, [sp]
    66b8:	9900      	ldr	r1, [sp, #0]
    66ba:	9100      	str	r1, [sp, #0]
    66bc:	f89d 1000 	ldrb.w	r1, [sp]
    66c0:	b109      	cbz	r1, 66c6 <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY+0x1a>
    66c2:	8880      	ldrh	r0, [r0, #4]
    66c4:	bd08      	pop	{r3, pc}
    66c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
    66ca:	bd08      	pop	{r3, pc}
    66cc:	20000104 	.word	0x20000104

000066d0 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q>:
    66d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    66d2:	4604      	mov	r4, r0
    66d4:	f007 fff3 	bl	e6be <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>
    66d8:	bb48      	cbnz	r0, 672e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    66da:	4e17      	ldr	r6, [pc, #92]	; (6738 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x68>)
    66dc:	6870      	ldr	r0, [r6, #4]
    66de:	f890 1022 	ldrb.w	r1, [r0, #34]	; 0x22
    66e2:	f88d 1000 	strb.w	r1, [sp]
    66e6:	9900      	ldr	r1, [sp, #0]
    66e8:	9100      	str	r1, [sp, #0]
    66ea:	f89d 1000 	ldrb.w	r1, [sp]
    66ee:	2500      	movs	r5, #0
    66f0:	b139      	cbz	r1, 6702 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x32>
    66f2:	7065      	strb	r5, [r4, #1]
    66f4:	2107      	movs	r1, #7
    66f6:	7021      	strb	r1, [r4, #0]
    66f8:	6a41      	ldr	r1, [r0, #36]	; 0x24
    66fa:	6061      	str	r1, [r4, #4]
    66fc:	f880 5022 	strb.w	r5, [r0, #34]	; 0x22
    6700:	e015      	b.n	672e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    6702:	4620      	mov	r0, r4
    6704:	f000 f9d0 	bl	6aa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xb0>
    6708:	b988      	cbnz	r0, 672e <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x5e>
    670a:	6870      	ldr	r0, [r6, #4]
    670c:	f890 1028 	ldrb.w	r1, [r0, #40]	; 0x28
    6710:	f88d 1000 	strb.w	r1, [sp]
    6714:	9900      	ldr	r1, [sp, #0]
    6716:	9100      	str	r1, [sp, #0]
    6718:	f89d 1000 	ldrb.w	r1, [sp]
    671c:	b149      	cbz	r1, 6732 <sym_QHGHSVTF7L437YVLUCKKPDATAJPGFRYC4WKEE3Q+0x62>
    671e:	7065      	strb	r5, [r4, #1]
    6720:	2118      	movs	r1, #24
    6722:	7021      	strb	r1, [r4, #0]
    6724:	f8d0 102a 	ldr.w	r1, [r0, #42]	; 0x2a
    6728:	6061      	str	r1, [r4, #4]
    672a:	300a      	adds	r0, #10
    672c:	7785      	strb	r5, [r0, #30]
    672e:	2001      	movs	r0, #1
    6730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6732:	2000      	movs	r0, #0
    6734:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6736:	0000      	.short	0x0000
    6738:	20000104 	.word	0x20000104

0000673c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>:
    673c:	4902      	ldr	r1, [pc, #8]	; (6748 <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ+0xc>)
    673e:	6849      	ldr	r1, [r1, #4]
    6740:	f881 006a 	strb.w	r0, [r1, #106]	; 0x6a
    6744:	2000      	movs	r0, #0
    6746:	4770      	bx	lr
    6748:	20000104 	.word	0x20000104

0000674c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>:
    674c:	4809      	ldr	r0, [pc, #36]	; (6774 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x28>)
    674e:	6841      	ldr	r1, [r0, #4]
    6750:	6d48      	ldr	r0, [r1, #84]	; 0x54
    6752:	b168      	cbz	r0, 6770 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x24>
    6754:	f101 0059 	add.w	r0, r1, #89	; 0x59
    6758:	2201      	movs	r2, #1
    675a:	7002      	strb	r2, [r0, #0]
    675c:	2300      	movs	r3, #0
    675e:	654b      	str	r3, [r1, #84]	; 0x54
    6760:	7003      	strb	r3, [r0, #0]
    6762:	f891 0058 	ldrb.w	r0, [r1, #88]	; 0x58
    6766:	4082      	lsls	r2, r0
    6768:	4803      	ldr	r0, [pc, #12]	; (6778 <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI+0x2c>)
    676a:	6002      	str	r2, [r0, #0]
    676c:	2000      	movs	r0, #0
    676e:	4770      	bx	lr
    6770:	200c      	movs	r0, #12
    6772:	4770      	bx	lr
    6774:	20000104 	.word	0x20000104
    6778:	4001f508 	.word	0x4001f508

0000677c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>:
    677c:	4909      	ldr	r1, [pc, #36]	; (67a4 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x28>)
    677e:	b510      	push	{r4, lr}
    6780:	6088      	str	r0, [r1, #8]
    6782:	68c8      	ldr	r0, [r1, #12]
    6784:	b150      	cbz	r0, 679c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x20>
    6786:	f000 ff73 	bl	7670 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x670>
    678a:	f000 f885 	bl	6898 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    678e:	2800      	cmp	r0, #0
    6790:	d007      	beq.n	67a2 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x26>
    6792:	f640 01f9 	movw	r1, #2297	; 0x8f9
    6796:	2032      	movs	r0, #50	; 0x32
    6798:	f7fd fb92 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    679c:	f640 01f5 	movw	r1, #2293	; 0x8f5
    67a0:	e7f9      	b.n	6796 <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY+0x1a>
    67a2:	bd10      	pop	{r4, pc}
    67a4:	20000104 	.word	0x20000104

000067a8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>:
    67a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    67ac:	4c0f      	ldr	r4, [pc, #60]	; (67ec <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x44>)
    67ae:	4605      	mov	r5, r0
    67b0:	4616      	mov	r6, r2
    67b2:	6860      	ldr	r0, [r4, #4]
    67b4:	460f      	mov	r7, r1
    67b6:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    67ba:	f007 ff38 	bl	e62e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    67be:	b158      	cbz	r0, 67d8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    67c0:	b955      	cbnz	r5, 67d8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    67c2:	4638      	mov	r0, r7
    67c4:	f007 ff2c 	bl	e620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    67c8:	4631      	mov	r1, r6
    67ca:	f007 f933 	bl	da34 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    67ce:	2808      	cmp	r0, #8
    67d0:	d002      	beq.n	67d8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI+0x30>
    67d2:	2001      	movs	r0, #1
    67d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    67d8:	6860      	ldr	r0, [r4, #4]
    67da:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    67de:	f007 ff1f 	bl	e620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    67e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    67e6:	f7fe b9e9 	b.w	4bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    67ea:	0000      	.short	0x0000
    67ec:	20000104 	.word	0x20000104

000067f0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>:
    67f0:	b570      	push	{r4, r5, r6, lr}
    67f2:	4c13      	ldr	r4, [pc, #76]	; (6840 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x50>)
    67f4:	4615      	mov	r5, r2
    67f6:	460e      	mov	r6, r1
    67f8:	2800      	cmp	r0, #0
    67fa:	d016      	beq.n	682a <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x3a>
    67fc:	f04f 0200 	mov.w	r2, #0
    6800:	6861      	ldr	r1, [r4, #4]
    6802:	f801 2f39 	strb.w	r2, [r1, #57]!
    6806:	7248      	strb	r0, [r1, #9]
    6808:	f04f 0008 	mov.w	r0, #8
    680c:	f881 002e 	strb.w	r0, [r1, #46]	; 0x2e
    6810:	d114      	bne.n	683c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6812:	4630      	mov	r0, r6
    6814:	f007 ff04 	bl	e620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6818:	4629      	mov	r1, r5
    681a:	f007 f90b 	bl	da34 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>
    681e:	6861      	ldr	r1, [r4, #4]
    6820:	2808      	cmp	r0, #8
    6822:	f881 0067 	strb.w	r0, [r1, #103]	; 0x67
    6826:	d003      	beq.n	6830 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x40>
    6828:	e008      	b.n	683c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    682a:	f04f 0201 	mov.w	r2, #1
    682e:	e7e7      	b.n	6800 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x10>
    6830:	4630      	mov	r0, r6
    6832:	f007 fefc 	bl	e62e <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x50>
    6836:	b108      	cbz	r0, 683c <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY+0x4c>
    6838:	2012      	movs	r0, #18
    683a:	bd70      	pop	{r4, r5, r6, pc}
    683c:	2000      	movs	r0, #0
    683e:	bd70      	pop	{r4, r5, r6, pc}
    6840:	20000104 	.word	0x20000104

00006844 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>:
    6844:	4902      	ldr	r1, [pc, #8]	; (6850 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0xc>)
    6846:	4801      	ldr	r0, [pc, #4]	; (684c <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ+0x8>)
    6848:	60c8      	str	r0, [r1, #12]
    684a:	4770      	bx	lr
    684c:	000078b8 	.word	0x000078b8
    6850:	20000104 	.word	0x20000104

00006854 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>:
    6854:	4902      	ldr	r1, [pc, #8]	; (6860 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA+0xc>)
    6856:	6849      	ldr	r1, [r1, #4]
    6858:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    685c:	4770      	bx	lr
    685e:	0000      	.short	0x0000
    6860:	20000104 	.word	0x20000104

00006864 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>:
    6864:	b570      	push	{r4, r5, r6, lr}
    6866:	4605      	mov	r5, r0
    6868:	f7fd ff56 	bl	4718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    686c:	4604      	mov	r4, r0
    686e:	f7fd ff59 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    6872:	4621      	mov	r1, r4
    6874:	f007 ff21 	bl	e6ba <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    6878:	0001      	movs	r1, r0
    687a:	d006      	beq.n	688a <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x26>
    687c:	4805      	ldr	r0, [pc, #20]	; (6894 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY+0x30>)
    687e:	68c0      	ldr	r0, [r0, #12]
    6880:	6802      	ldr	r2, [r0, #0]
    6882:	4628      	mov	r0, r5
    6884:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6888:	4710      	bx	r2
    688a:	f640 11f2 	movw	r1, #2546	; 0x9f2
    688e:	2032      	movs	r0, #50	; 0x32
    6890:	f7fd fb16 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6894:	20000104 	.word	0x20000104

00006898 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>:
    6898:	b570      	push	{r4, r5, r6, lr}
    689a:	4d19      	ldr	r5, [pc, #100]	; (6900 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x68>)
    689c:	6868      	ldr	r0, [r5, #4]
    689e:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    68a2:	2901      	cmp	r1, #1
    68a4:	d004      	beq.n	68b0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    68a6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    68aa:	b108      	cbz	r0, 68b0 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY+0x18>
    68ac:	200c      	movs	r0, #12
    68ae:	bd70      	pop	{r4, r5, r6, pc}
    68b0:	f7fd ff5c 	bl	476c <sym_2KMY2O5SI5PPAQCNJOFFAGVJQKWBRKEGNZW2ZHQ>
    68b4:	f007 ff67 	bl	e786 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>
    68b8:	6868      	ldr	r0, [r5, #4]
    68ba:	2400      	movs	r4, #0
    68bc:	7004      	strb	r4, [r0, #0]
    68be:	f100 0122 	add.w	r1, r0, #34	; 0x22
    68c2:	700c      	strb	r4, [r1, #0]
    68c4:	f880 4028 	strb.w	r4, [r0, #40]	; 0x28
    68c8:	f000 f8b4 	bl	6a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    68cc:	6868      	ldr	r0, [r5, #4]
    68ce:	2201      	movs	r2, #1
    68d0:	2107      	movs	r1, #7
    68d2:	f880 404a 	strb.w	r4, [r0, #74]	; 0x4a
    68d6:	f880 2039 	strb.w	r2, [r0, #57]	; 0x39
    68da:	f880 4040 	strb.w	r4, [r0, #64]	; 0x40
    68de:	f880 4066 	strb.w	r4, [r0, #102]	; 0x66
    68e2:	f880 404b 	strb.w	r4, [r0, #75]	; 0x4b
    68e6:	f880 407c 	strb.w	r4, [r0, #124]	; 0x7c
    68ea:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    68ee:	f100 0159 	add.w	r1, r0, #89	; 0x59
    68f2:	700a      	strb	r2, [r1, #0]
    68f4:	f880 4058 	strb.w	r4, [r0, #88]	; 0x58
    68f8:	6544      	str	r4, [r0, #84]	; 0x54
    68fa:	700c      	strb	r4, [r1, #0]
    68fc:	2000      	movs	r0, #0
    68fe:	bd70      	pop	{r4, r5, r6, pc}
    6900:	20000104 	.word	0x20000104

00006904 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>:
    6904:	4805      	ldr	r0, [pc, #20]	; (691c <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ+0x18>)
    6906:	b510      	push	{r4, lr}
    6908:	6840      	ldr	r0, [r0, #4]
    690a:	f890 0030 	ldrb.w	r0, [r0, #48]	; 0x30
    690e:	f007 fe87 	bl	e620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6912:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6916:	f7fe b951 	b.w	4bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    691a:	0000      	.short	0x0000
    691c:	20000104 	.word	0x20000104

00006920 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>:
    6920:	b140      	cbz	r0, 6934 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6922:	2802      	cmp	r0, #2
    6924:	d006      	beq.n	6934 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x14>
    6926:	2200      	movs	r2, #0
    6928:	4903      	ldr	r1, [pc, #12]	; (6938 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x18>)
    692a:	6849      	ldr	r1, [r1, #4]
    692c:	f801 2f39 	strb.w	r2, [r1, #57]!
    6930:	7208      	strb	r0, [r1, #8]
    6932:	4770      	bx	lr
    6934:	2201      	movs	r2, #1
    6936:	e7f7      	b.n	6928 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q+0x8>
    6938:	20000104 	.word	0x20000104

0000693c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>:
    693c:	4902      	ldr	r1, [pc, #8]	; (6948 <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A+0xc>)
    693e:	6849      	ldr	r1, [r1, #4]
    6940:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    6944:	4770      	bx	lr
    6946:	0000      	.short	0x0000
    6948:	20000104 	.word	0x20000104

0000694c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>:
    694c:	b510      	push	{r4, lr}
    694e:	4604      	mov	r4, r0
    6950:	7800      	ldrb	r0, [r0, #0]
    6952:	07c0      	lsls	r0, r0, #31
    6954:	d007      	beq.n	6966 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x1a>
    6956:	2300      	movs	r3, #0
    6958:	7860      	ldrb	r0, [r4, #1]
    695a:	461a      	mov	r2, r3
    695c:	4619      	mov	r1, r3
    695e:	f7ff fe8f 	bl	6680 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    6962:	2800      	cmp	r0, #0
    6964:	d10c      	bne.n	6980 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x34>
    6966:	4b07      	ldr	r3, [pc, #28]	; (6984 <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY+0x38>)
    6968:	78a0      	ldrb	r0, [r4, #2]
    696a:	6859      	ldr	r1, [r3, #4]
    696c:	f881 0030 	strb.w	r0, [r1, #48]	; 0x30
    6970:	78e0      	ldrb	r0, [r4, #3]
    6972:	f7ff ffd5 	bl	6920 <sym_HTKBM4AXPDDAEAMJNV3SEGKNDOKHE4XGMB7II5Q>
    6976:	6859      	ldr	r1, [r3, #4]
    6978:	7920      	ldrb	r0, [r4, #4]
    697a:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
    697e:	2000      	movs	r0, #0
    6980:	bd10      	pop	{r4, pc}
    6982:	0000      	.short	0x0000
    6984:	20000104 	.word	0x20000104

00006988 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>:
    6988:	4801      	ldr	r0, [pc, #4]	; (6990 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY+0x8>)
    698a:	68c0      	ldr	r0, [r0, #12]
    698c:	6840      	ldr	r0, [r0, #4]
    698e:	4700      	bx	r0
    6990:	20000104 	.word	0x20000104

00006994 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>:
    6994:	b510      	push	{r4, lr}
    6996:	2000      	movs	r0, #0
    6998:	f000 fc8e 	bl	72b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b8>
    699c:	f000 f84a 	bl	6a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    69a0:	f000 fe66 	bl	7670 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x670>
    69a4:	4803      	ldr	r0, [pc, #12]	; (69b4 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I+0x20>)
    69a6:	6840      	ldr	r0, [r0, #4]
    69a8:	2100      	movs	r1, #0
    69aa:	f880 1028 	strb.w	r1, [r0, #40]	; 0x28
    69ae:	4608      	mov	r0, r1
    69b0:	bd10      	pop	{r4, pc}
    69b2:	0000      	.short	0x0000
    69b4:	20000104 	.word	0x20000104

000069b8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>:
    69b8:	b510      	push	{r4, lr}
    69ba:	f000 f941 	bl	6c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    69be:	4909      	ldr	r1, [pc, #36]	; (69e4 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x2c>)
    69c0:	2201      	movs	r2, #1
    69c2:	b130      	cbz	r0, 69d2 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x1a>
    69c4:	6848      	ldr	r0, [r1, #4]
    69c6:	f880 202a 	strb.w	r2, [r0, #42]	; 0x2a
    69ca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    69cc:	881b      	ldrh	r3, [r3, #0]
    69ce:	8583      	strh	r3, [r0, #44]	; 0x2c
    69d0:	e004      	b.n	69dc <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y+0x24>
    69d2:	684b      	ldr	r3, [r1, #4]
    69d4:	2000      	movs	r0, #0
    69d6:	f883 002a 	strb.w	r0, [r3, #42]	; 0x2a
    69da:	8598      	strh	r0, [r3, #44]	; 0x2c
    69dc:	6848      	ldr	r0, [r1, #4]
    69de:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
    69e2:	bd10      	pop	{r4, pc}
    69e4:	20000104 	.word	0x20000104

000069e8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>:
    69e8:	4802      	ldr	r0, [pc, #8]	; (69f4 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q+0xc>)
    69ea:	6840      	ldr	r0, [r0, #4]
    69ec:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    69f0:	4770      	bx	lr
    69f2:	0000      	.short	0x0000
    69f4:	20000104 	.word	0x20000104

000069f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>:
    69f8:	b510      	push	{r4, lr}
    69fa:	f000 f921 	bl	6c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    69fe:	490c      	ldr	r1, [pc, #48]	; (6a30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x38>)
    6a00:	b128      	cbz	r0, 6a0e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16>
    6a02:	6848      	ldr	r0, [r1, #4]
    6a04:	f890 0042 	ldrb.w	r0, [r0, #66]	; 0x42
    6a08:	2801      	cmp	r0, #1
    6a0a:	d00e      	beq.n	6a2a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x32>
    6a0c:	e00c      	b.n	6a28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    6a0e:	6849      	ldr	r1, [r1, #4]
    6a10:	f891 0040 	ldrb.w	r0, [r1, #64]	; 0x40
    6a14:	2801      	cmp	r0, #1
    6a16:	d001      	beq.n	6a1c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x24>
    6a18:	2802      	cmp	r0, #2
    6a1a:	d105      	bne.n	6a28 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x30>
    6a1c:	f891 0041 	ldrb.w	r0, [r1, #65]	; 0x41
    6a20:	2801      	cmp	r0, #1
    6a22:	d003      	beq.n	6a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6a24:	2803      	cmp	r0, #3
    6a26:	d001      	beq.n	6a2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x34>
    6a28:	2000      	movs	r0, #0
    6a2a:	bd10      	pop	{r4, pc}
    6a2c:	2001      	movs	r0, #1
    6a2e:	bd10      	pop	{r4, pc}
    6a30:	20000104 	.word	0x20000104
    6a34:	b510      	push	{r4, lr}
    6a36:	4c07      	ldr	r4, [pc, #28]	; (6a54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c>)
    6a38:	6860      	ldr	r0, [r4, #4]
    6a3a:	f890 0068 	ldrb.w	r0, [r0, #104]	; 0x68
    6a3e:	2800      	cmp	r0, #0
    6a40:	d007      	beq.n	6a52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5a>
    6a42:	f004 fdd3 	bl	b5ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    6a46:	f004 fbb5 	bl	b1b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    6a4a:	6861      	ldr	r1, [r4, #4]
    6a4c:	2000      	movs	r0, #0
    6a4e:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    6a52:	bd10      	pop	{r4, pc}
    6a54:	20000104 	.word	0x20000104
    6a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a5c:	4d10      	ldr	r5, [pc, #64]	; (6aa0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa8>)
    6a5e:	4606      	mov	r6, r0
    6a60:	460f      	mov	r7, r1
    6a62:	6868      	ldr	r0, [r5, #4]
    6a64:	490f      	ldr	r1, [pc, #60]	; (6aa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xac>)
    6a66:	f890 0066 	ldrb.w	r0, [r0, #102]	; 0x66
    6a6a:	5c0c      	ldrb	r4, [r1, r0]
    6a6c:	4620      	mov	r0, r4
    6a6e:	f005 f931 	bl	bcd4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>
    6a72:	6868      	ldr	r0, [r5, #4]
    6a74:	2101      	movs	r1, #1
    6a76:	f880 4074 	strb.w	r4, [r0, #116]	; 0x74
    6a7a:	2025      	movs	r0, #37	; 0x25
    6a7c:	f009 f86b 	bl	fb56 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>
    6a80:	4638      	mov	r0, r7
    6a82:	f005 f831 	bl	bae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6a86:	f04f 0101 	mov.w	r1, #1
    6a8a:	4608      	mov	r0, r1
    6a8c:	b126      	cbz	r6, 6a98 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa0>
    6a8e:	f004 fe63 	bl	b758 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>
    6a92:	b918      	cbnz	r0, 6a9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0xa4>
    6a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a98:	f004 fe12 	bl	b6c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>
    6a9c:	2001      	movs	r0, #1
    6a9e:	e7f9      	b.n	6a94 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x9c>
    6aa0:	20000104 	.word	0x20000104
    6aa4:	0000fca6 	.word	0x0000fca6
    6aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6aaa:	4e20      	ldr	r6, [pc, #128]	; (6b2c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x134>)
    6aac:	4604      	mov	r4, r0
    6aae:	6870      	ldr	r0, [r6, #4]
    6ab0:	7801      	ldrb	r1, [r0, #0]
    6ab2:	f88d 1000 	strb.w	r1, [sp]
    6ab6:	9900      	ldr	r1, [sp, #0]
    6ab8:	9100      	str	r1, [sp, #0]
    6aba:	f89d 1000 	ldrb.w	r1, [sp]
    6abe:	b389      	cbz	r1, 6b24 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12c>
    6ac0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6ac2:	6882      	ldr	r2, [r0, #8]
    6ac4:	f841 2f03 	str.w	r2, [r1, #3]!
    6ac8:	8982      	ldrh	r2, [r0, #12]
    6aca:	808a      	strh	r2, [r1, #4]
    6acc:	79c0      	ldrb	r0, [r0, #7]
    6ace:	f007 fda7 	bl	e620 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x42>
    6ad2:	6871      	ldr	r1, [r6, #4]
    6ad4:	2500      	movs	r5, #0
    6ad6:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    6ad8:	1c89      	adds	r1, r1, #2
    6ada:	7090      	strb	r0, [r2, #2]
    6adc:	7065      	strb	r5, [r4, #1]
    6ade:	2014      	movs	r0, #20
    6ae0:	7020      	strb	r0, [r4, #0]
    6ae2:	2220      	movs	r2, #32
    6ae4:	1d20      	adds	r0, r4, #4
    6ae6:	f005 fdfb 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    6aea:	4a11      	ldr	r2, [pc, #68]	; (6b30 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x138>)
    6aec:	7225      	strb	r5, [r4, #8]
    6aee:	2301      	movs	r3, #1
    6af0:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    6af2:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    6af6:	6871      	ldr	r1, [r6, #4]
    6af8:	700d      	strb	r5, [r1, #0]
    6afa:	f101 0028 	add.w	r0, r1, #40	; 0x28
    6afe:	7005      	strb	r5, [r0, #0]
    6b00:	88e0      	ldrh	r0, [r4, #6]
    6b02:	8490      	strh	r0, [r2, #36]	; 0x24
    6b04:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    6b06:	f890 008d 	ldrb.w	r0, [r0, #141]	; 0x8d
    6b0a:	f882 0026 	strb.w	r0, [r2, #38]	; 0x26
    6b0e:	4610      	mov	r0, r2
    6b10:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    6b14:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6b16:	8800      	ldrh	r0, [r0, #0]
    6b18:	f7fd fdd0 	bl	46bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6b1c:	f006 fd6c 	bl	d5f8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    6b20:	2001      	movs	r0, #1
    6b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b24:	e7ff      	b.n	6b26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12e>
    6b26:	2000      	movs	r0, #0
    6b28:	e7fb      	b.n	6b22 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x12a>
    6b2a:	0000      	.short	0x0000
    6b2c:	20000104 	.word	0x20000104
    6b30:	200011fc 	.word	0x200011fc
    6b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b36:	2600      	movs	r6, #0
    6b38:	460f      	mov	r7, r1
    6b3a:	4605      	mov	r5, r0
    6b3c:	f88d 6000 	strb.w	r6, [sp]
    6b40:	466b      	mov	r3, sp
    6b42:	f000 f89d 	bl	6c80 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x288>
    6b46:	0001      	movs	r1, r0
    6b48:	4810      	ldr	r0, [pc, #64]	; (6b8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x194>)
    6b4a:	d003      	beq.n	6b54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15c>
    6b4c:	6840      	ldr	r0, [r0, #4]
    6b4e:	f880 606d 	strb.w	r6, [r0, #109]	; 0x6d
    6b52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b54:	6840      	ldr	r0, [r0, #4]
    6b56:	f89d 1000 	ldrb.w	r1, [sp]
    6b5a:	2f07      	cmp	r7, #7
    6b5c:	f890 4039 	ldrb.w	r4, [r0, #57]	; 0x39
    6b60:	d301      	bcc.n	6b66 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x16e>
    6b62:	4634      	mov	r4, r6
    6b64:	e002      	b.n	6b6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6b66:	0022      	movs	r2, r4
    6b68:	d100      	bne.n	6b6c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x174>
    6b6a:	460c      	mov	r4, r1
    6b6c:	f880 406d 	strb.w	r4, [r0, #109]	; 0x6d
    6b70:	6869      	ldr	r1, [r5, #4]
    6b72:	2900      	cmp	r1, #0
    6b74:	d0ed      	beq.n	6b52 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x15a>
    6b76:	7c69      	ldrb	r1, [r5, #17]
    6b78:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75
    6b7c:	6869      	ldr	r1, [r5, #4]
    6b7e:	680a      	ldr	r2, [r1, #0]
    6b80:	f840 2f6e 	str.w	r2, [r0, #110]!
    6b84:	8889      	ldrh	r1, [r1, #4]
    6b86:	8081      	strh	r1, [r0, #4]
    6b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b8a:	0000      	.short	0x0000
    6b8c:	20000104 	.word	0x20000104
    6b90:	b510      	push	{r4, lr}
    6b92:	4915      	ldr	r1, [pc, #84]	; (6be8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1f0>)
    6b94:	6842      	ldr	r2, [r0, #4]
    6b96:	6849      	ldr	r1, [r1, #4]
    6b98:	7813      	ldrb	r3, [r2, #0]
    6b9a:	f891 406e 	ldrb.w	r4, [r1, #110]	; 0x6e
    6b9e:	42a3      	cmp	r3, r4
    6ba0:	d11f      	bne.n	6be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6ba2:	7853      	ldrb	r3, [r2, #1]
    6ba4:	f891 406f 	ldrb.w	r4, [r1, #111]	; 0x6f
    6ba8:	42a3      	cmp	r3, r4
    6baa:	d11a      	bne.n	6be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bac:	7893      	ldrb	r3, [r2, #2]
    6bae:	f891 4070 	ldrb.w	r4, [r1, #112]	; 0x70
    6bb2:	42a3      	cmp	r3, r4
    6bb4:	d115      	bne.n	6be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bb6:	78d3      	ldrb	r3, [r2, #3]
    6bb8:	f891 4071 	ldrb.w	r4, [r1, #113]	; 0x71
    6bbc:	42a3      	cmp	r3, r4
    6bbe:	d110      	bne.n	6be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bc0:	7913      	ldrb	r3, [r2, #4]
    6bc2:	f891 4072 	ldrb.w	r4, [r1, #114]	; 0x72
    6bc6:	42a3      	cmp	r3, r4
    6bc8:	d10b      	bne.n	6be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bca:	7952      	ldrb	r2, [r2, #5]
    6bcc:	f891 3073 	ldrb.w	r3, [r1, #115]	; 0x73
    6bd0:	429a      	cmp	r2, r3
    6bd2:	d106      	bne.n	6be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bd4:	7c40      	ldrb	r0, [r0, #17]
    6bd6:	f891 1075 	ldrb.w	r1, [r1, #117]	; 0x75
    6bda:	4288      	cmp	r0, r1
    6bdc:	d101      	bne.n	6be2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x1ea>
    6bde:	2001      	movs	r0, #1
    6be0:	bd10      	pop	{r4, pc}
    6be2:	2000      	movs	r0, #0
    6be4:	bd10      	pop	{r4, pc}
    6be6:	0000      	.short	0x0000
    6be8:	20000104 	.word	0x20000104
    6bec:	b530      	push	{r4, r5, lr}
    6bee:	7801      	ldrb	r1, [r0, #0]
    6bf0:	b08b      	sub	sp, #44	; 0x2c
    6bf2:	f001 040f 	and.w	r4, r1, #15
    6bf6:	4622      	mov	r2, r4
    6bf8:	a901      	add	r1, sp, #4
    6bfa:	f000 fee9 	bl	79d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    6bfe:	a801      	add	r0, sp, #4
    6c00:	f7ff ffc6 	bl	6b90 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x198>
    6c04:	4605      	mov	r5, r0
    6c06:	f004 fd0b 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6c0a:	f000 fb6f 	bl	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    6c0e:	2c04      	cmp	r4, #4
    6c10:	d111      	bne.n	6c36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6c12:	b185      	cbz	r5, 6c36 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x23e>
    6c14:	a80a      	add	r0, sp, #40	; 0x28
    6c16:	f000 fb75 	bl	7304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    6c1a:	f99d 0028 	ldrsb.w	r0, [sp, #40]	; 0x28
    6c1e:	9000      	str	r0, [sp, #0]
    6c20:	4806      	ldr	r0, [pc, #24]	; (6c3c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x244>)
    6c22:	6840      	ldr	r0, [r0, #4]
    6c24:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
    6c28:	f890 207c 	ldrb.w	r2, [r0, #124]	; 0x7c
    6c2c:	f890 1065 	ldrb.w	r1, [r0, #101]	; 0x65
    6c30:	a801      	add	r0, sp, #4
    6c32:	f007 fdaa 	bl	e78a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>
    6c36:	b00b      	add	sp, #44	; 0x2c
    6c38:	2005      	movs	r0, #5
    6c3a:	bd30      	pop	{r4, r5, pc}
    6c3c:	20000104 	.word	0x20000104
    6c40:	4804      	ldr	r0, [pc, #16]	; (6c54 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x25c>)
    6c42:	6840      	ldr	r0, [r0, #4]
    6c44:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    6c48:	2803      	cmp	r0, #3
    6c4a:	d001      	beq.n	6c50 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x258>
    6c4c:	2000      	movs	r0, #0
    6c4e:	4770      	bx	lr
    6c50:	2001      	movs	r0, #1
    6c52:	4770      	bx	lr
    6c54:	20000104 	.word	0x20000104
    6c58:	4908      	ldr	r1, [pc, #32]	; (6c7c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x284>)
    6c5a:	b510      	push	{r4, lr}
    6c5c:	6849      	ldr	r1, [r1, #4]
    6c5e:	7c83      	ldrb	r3, [r0, #18]
    6c60:	f891 2031 	ldrb.w	r2, [r1, #49]	; 0x31
    6c64:	429a      	cmp	r2, r3
    6c66:	d105      	bne.n	6c74 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x27c>
    6c68:	6880      	ldr	r0, [r0, #8]
    6c6a:	2206      	movs	r2, #6
    6c6c:	3132      	adds	r1, #50	; 0x32
    6c6e:	f005 fd25 	bl	c6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    6c72:	b108      	cbz	r0, 6c78 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x280>
    6c74:	2000      	movs	r0, #0
    6c76:	bd10      	pop	{r4, pc}
    6c78:	2001      	movs	r0, #1
    6c7a:	bd10      	pop	{r4, pc}
    6c7c:	20000104 	.word	0x20000104
    6c80:	b570      	push	{r4, r5, r6, lr}
    6c82:	6841      	ldr	r1, [r0, #4]
    6c84:	461e      	mov	r6, r3
    6c86:	4604      	mov	r4, r0
    6c88:	b1c1      	cbz	r1, 6cbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c4>
    6c8a:	7c60      	ldrb	r0, [r4, #17]
    6c8c:	f007 fcbd 	bl	e60a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6c90:	4d10      	ldr	r5, [pc, #64]	; (6cd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2dc>)
    6c92:	6869      	ldr	r1, [r5, #4]
    6c94:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    6c98:	b141      	cbz	r1, 6cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6c9a:	b138      	cbz	r0, 6cac <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2b4>
    6c9c:	f006 fec0 	bl	da20 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>
    6ca0:	6869      	ldr	r1, [r5, #4]
    6ca2:	f801 0f64 	strb.w	r0, [r1, #100]!
    6ca6:	7048      	strb	r0, [r1, #1]
    6ca8:	2001      	movs	r0, #1
    6caa:	71c8      	strb	r0, [r1, #7]
    6cac:	686b      	ldr	r3, [r5, #4]
    6cae:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
    6cb2:	28ff      	cmp	r0, #255	; 0xff
    6cb4:	d004      	beq.n	6cc0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2c8>
    6cb6:	f7fe fdeb 	bl	5890 <sym_IJTA37LCLZMYZVQ3I74HRUK4JDZEZR23VU3JFJI>
    6cba:	7030      	strb	r0, [r6, #0]
    6cbc:	2000      	movs	r0, #0
    6cbe:	bd70      	pop	{r4, r5, r6, pc}
    6cc0:	7c60      	ldrb	r0, [r4, #17]
    6cc2:	4632      	mov	r2, r6
    6cc4:	3364      	adds	r3, #100	; 0x64
    6cc6:	6861      	ldr	r1, [r4, #4]
    6cc8:	f7fe fe5e 	bl	5988 <sym_AH5PFWTC7OGNFGHZO3OGQJX75M4BUE2VWXVZZ5A>
    6ccc:	f080 0001 	eor.w	r0, r0, #1
    6cd0:	bd70      	pop	{r4, r5, r6, pc}
    6cd2:	0000      	.short	0x0000
    6cd4:	20000104 	.word	0x20000104
    6cd8:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    6cda:	4c3d      	ldr	r4, [pc, #244]	; (6dd0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3d8>)
    6cdc:	466f      	mov	r7, sp
    6cde:	6860      	ldr	r0, [r4, #4]
    6ce0:	7801      	ldrb	r1, [r0, #0]
    6ce2:	f88d 1008 	strb.w	r1, [sp, #8]
    6ce6:	9902      	ldr	r1, [sp, #8]
    6ce8:	9102      	str	r1, [sp, #8]
    6cea:	f89d 1008 	ldrb.w	r1, [sp, #8]
    6cee:	b111      	cbz	r1, 6cf6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2fe>
    6cf0:	f241 41b1 	movw	r1, #5297	; 0x14b1
    6cf4:	e04f      	b.n	6d96 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39e>
    6cf6:	2500      	movs	r5, #0
    6cf8:	7085      	strb	r5, [r0, #2]
    6cfa:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6cfc:	880a      	ldrh	r2, [r1, #0]
    6cfe:	8082      	strh	r2, [r0, #4]
    6d00:	68c8      	ldr	r0, [r1, #12]
    6d02:	f006 ff08 	bl	db16 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6d06:	6861      	ldr	r1, [r4, #4]
    6d08:	8348      	strh	r0, [r1, #26]
    6d0a:	6bc8      	ldr	r0, [r1, #60]	; 0x3c
    6d0c:	8a82      	ldrh	r2, [r0, #20]
    6d0e:	838a      	strh	r2, [r1, #28]
    6d10:	8ac0      	ldrh	r0, [r0, #22]
    6d12:	83c8      	strh	r0, [r1, #30]
    6d14:	f881 5020 	strb.w	r5, [r1, #32]
    6d18:	4669      	mov	r1, sp
    6d1a:	68a0      	ldr	r0, [r4, #8]
    6d1c:	f007 fa03 	bl	e126 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>
    6d20:	68a0      	ldr	r0, [r4, #8]
    6d22:	7800      	ldrb	r0, [r0, #0]
    6d24:	f3c0 1680 	ubfx	r6, r0, #6, #1
    6d28:	6860      	ldr	r0, [r4, #4]
    6d2a:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6d2e:	b120      	cbz	r0, 6d3a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x342>
    6d30:	4639      	mov	r1, r7
    6d32:	4630      	mov	r0, r6
    6d34:	f007 fc69 	bl	e60a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6d38:	b940      	cbnz	r0, 6d4c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x354>
    6d3a:	6860      	ldr	r0, [r4, #4]
    6d3c:	f890 004a 	ldrb.w	r0, [r0, #74]	; 0x4a
    6d40:	b160      	cbz	r0, 6d5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6d42:	4639      	mov	r1, r7
    6d44:	4630      	mov	r0, r6
    6d46:	f007 fc57 	bl	e5f8 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x1a>
    6d4a:	b138      	cbz	r0, 6d5c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x364>
    6d4c:	6860      	ldr	r0, [r4, #4]
    6d4e:	9900      	ldr	r1, [sp, #0]
    6d50:	f8c0 100e 	str.w	r1, [r0, #14]
    6d54:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    6d58:	8241      	strh	r1, [r0, #18]
    6d5a:	e003      	b.n	6d64 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x36c>
    6d5c:	6860      	ldr	r0, [r4, #4]
    6d5e:	f8c0 500e 	str.w	r5, [r0, #14]
    6d62:	8245      	strh	r5, [r0, #18]
    6d64:	6861      	ldr	r1, [r4, #4]
    6d66:	f891 0065 	ldrb.w	r0, [r1, #101]	; 0x65
    6d6a:	28ff      	cmp	r0, #255	; 0xff
    6d6c:	d016      	beq.n	6d9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3a4>
    6d6e:	f101 0208 	add.w	r2, r1, #8
    6d72:	1dc9      	adds	r1, r1, #7
    6d74:	f7fe fd72 	bl	585c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    6d78:	b158      	cbz	r0, 6d92 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x39a>
    6d7a:	6860      	ldr	r0, [r4, #4]
    6d7c:	79c1      	ldrb	r1, [r0, #7]
    6d7e:	f041 0102 	orr.w	r1, r1, #2
    6d82:	71c1      	strb	r1, [r0, #7]
    6d84:	f8d0 106e 	ldr.w	r1, [r0, #110]	; 0x6e
    6d88:	6141      	str	r1, [r0, #20]
    6d8a:	f8b0 1072 	ldrh.w	r1, [r0, #114]	; 0x72
    6d8e:	8301      	strh	r1, [r0, #24]
    6d90:	e00f      	b.n	6db2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3ba>
    6d92:	f241 41dc 	movw	r1, #5340	; 0x14dc
    6d96:	2032      	movs	r0, #50	; 0x32
    6d98:	f7fd f892 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    6d9c:	f891 0075 	ldrb.w	r0, [r1, #117]	; 0x75
    6da0:	71c8      	strb	r0, [r1, #7]
    6da2:	f8d1 006e 	ldr.w	r0, [r1, #110]	; 0x6e
    6da6:	6088      	str	r0, [r1, #8]
    6da8:	f8b1 0072 	ldrh.w	r0, [r1, #114]	; 0x72
    6dac:	8188      	strh	r0, [r1, #12]
    6dae:	614d      	str	r5, [r1, #20]
    6db0:	830d      	strh	r5, [r1, #24]
    6db2:	6860      	ldr	r0, [r4, #4]
    6db4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    6db6:	f890 104b 	ldrb.w	r1, [r0, #75]	; 0x4b
    6dba:	f882 106e 	strb.w	r1, [r2, #110]	; 0x6e
    6dbe:	2101      	movs	r1, #1
    6dc0:	7001      	strb	r1, [r0, #0]
    6dc2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6dc4:	8800      	ldrh	r0, [r0, #0]
    6dc6:	f7fd fc79 	bl	46bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    6dca:	f006 fc1b 	bl	d604 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    6dce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    6dd0:	20000104 	.word	0x20000104
    6dd4:	b570      	push	{r4, r5, r6, lr}
    6dd6:	4d39      	ldr	r5, [pc, #228]	; (6ebc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c4>)
    6dd8:	4601      	mov	r1, r0
    6dda:	2200      	movs	r2, #0
    6ddc:	e9d5 6001 	ldrd	r6, r0, [r5, #4]
    6de0:	365c      	adds	r6, #92	; 0x5c
    6de2:	8002      	strh	r2, [r0, #0]
    6de4:	2903      	cmp	r1, #3
    6de6:	d002      	beq.n	6dee <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3f6>
    6de8:	2905      	cmp	r1, #5
    6dea:	d004      	beq.n	6df6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3fe>
    6dec:	e056      	b.n	6e9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6dee:	2103      	movs	r1, #3
    6df0:	f007 f9b0 	bl	e154 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6df4:	e052      	b.n	6e9c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4a4>
    6df6:	2105      	movs	r1, #5
    6df8:	f007 f9ac 	bl	e154 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>
    6dfc:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e00:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e02:	6909      	ldr	r1, [r1, #16]
    6e04:	f844 1f0f 	str.w	r1, [r4, #15]!
    6e08:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e0a:	8b0a      	ldrh	r2, [r1, #24]
    6e0c:	80a2      	strh	r2, [r4, #4]
    6e0e:	7e89      	ldrb	r1, [r1, #26]
    6e10:	71a1      	strb	r1, [r4, #6]
    6e12:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e14:	68c1      	ldr	r1, [r0, #12]
    6e16:	8b80      	ldrh	r0, [r0, #28]
    6e18:	f007 f84a 	bl	deb0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    6e1c:	71e0      	strb	r0, [r4, #7]
    6e1e:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e22:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e24:	68c1      	ldr	r1, [r0, #12]
    6e26:	6a00      	ldr	r0, [r0, #32]
    6e28:	f007 f837 	bl	de9a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    6e2c:	75e0      	strb	r0, [r4, #23]
    6e2e:	0a00      	lsrs	r0, r0, #8
    6e30:	7620      	strb	r0, [r4, #24]
    6e32:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e36:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e38:	68c0      	ldr	r0, [r0, #12]
    6e3a:	f006 fe6c 	bl	db16 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    6e3e:	7660      	strb	r0, [r4, #25]
    6e40:	0a00      	lsrs	r0, r0, #8
    6e42:	76a0      	strb	r0, [r4, #26]
    6e44:	e9d5 0401 	ldrd	r0, r4, [r5, #4]
    6e48:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e4a:	8a89      	ldrh	r1, [r1, #20]
    6e4c:	76e1      	strb	r1, [r4, #27]
    6e4e:	0a09      	lsrs	r1, r1, #8
    6e50:	7721      	strb	r1, [r4, #28]
    6e52:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e54:	8ac9      	ldrh	r1, [r1, #22]
    6e56:	7761      	strb	r1, [r4, #29]
    6e58:	0a09      	lsrs	r1, r1, #8
    6e5a:	77a1      	strb	r1, [r4, #30]
    6e5c:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
    6e5e:	f851 2f8e 	ldr.w	r2, [r1, #142]!
    6e62:	f8c4 201f 	str.w	r2, [r4, #31]
    6e66:	7909      	ldrb	r1, [r1, #4]
    6e68:	f884 1023 	strb.w	r1, [r4, #35]	; 0x23
    6e6c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    6e6e:	f890 1099 	ldrb.w	r1, [r0, #153]	; 0x99
    6e72:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    6e76:	f001 011f 	and.w	r1, r1, #31
    6e7a:	f020 001f 	bic.w	r0, r0, #31
    6e7e:	4308      	orrs	r0, r1
    6e80:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    6e84:	f004 f978 	bl	b178 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>
    6e88:	2807      	cmp	r0, #7
    6e8a:	d900      	bls.n	6e8e <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x496>
    6e8c:	2007      	movs	r0, #7
    6e8e:	f814 1f24 	ldrb.w	r1, [r4, #36]!
    6e92:	f021 01e0 	bic.w	r1, r1, #224	; 0xe0
    6e96:	ea41 1140 	orr.w	r1, r1, r0, lsl #5
    6e9a:	7021      	strb	r1, [r4, #0]
    6e9c:	f106 0112 	add.w	r1, r6, #18
    6ea0:	68a8      	ldr	r0, [r5, #8]
    6ea2:	f007 f972 	bl	e18a <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>
    6ea6:	7e71      	ldrb	r1, [r6, #25]
    6ea8:	68a8      	ldr	r0, [r5, #8]
    6eaa:	f007 f974 	bl	e196 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>
    6eae:	f000 fba7 	bl	7600 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x600>
    6eb2:	68a8      	ldr	r0, [r5, #8]
    6eb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6eb8:	f004 be16 	b.w	bae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    6ebc:	20000104 	.word	0x20000104
    6ec0:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    6ec4:	4f65      	ldr	r7, [pc, #404]	; (705c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c>)
    6ec6:	4604      	mov	r4, r0
    6ec8:	6878      	ldr	r0, [r7, #4]
    6eca:	f890 806d 	ldrb.w	r8, [r0, #109]	; 0x6d
    6ece:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    6ed2:	b180      	cbz	r0, 6ef6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4fe>
    6ed4:	2600      	movs	r6, #0
    6ed6:	2500      	movs	r5, #0
    6ed8:	7ca0      	ldrb	r0, [r4, #18]
    6eda:	68a1      	ldr	r1, [r4, #8]
    6edc:	f007 fb95 	bl	e60a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    6ee0:	4682      	mov	sl, r0
    6ee2:	f7ff fead 	bl	6c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6ee6:	b140      	cbz	r0, 6efa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6ee8:	6878      	ldr	r0, [r7, #4]
    6eea:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    6eee:	b121      	cbz	r1, 6efa <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x502>
    6ef0:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    6ef4:	e004      	b.n	6f00 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x508>
    6ef6:	2601      	movs	r6, #1
    6ef8:	e7ed      	b.n	6ed6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4de>
    6efa:	6878      	ldr	r0, [r7, #4]
    6efc:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    6f00:	4683      	mov	fp, r0
    6f02:	f7fe fbfd 	bl	5700 <sym_F2LWAH27IT4H2IA7TZWGNABUCWINGT6MWXH2WIA>
    6f06:	ea5f 0900 	movs.w	r9, r0
    6f0a:	d00c      	beq.n	6f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6f0c:	4658      	mov	r0, fp
    6f0e:	f7fe fbeb 	bl	56e8 <sym_BAUTABQSJLBAZ6GNH7KOF4MJMAA6NF7CDAZNOEQ>
    6f12:	b100      	cbz	r0, 6f16 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x51e>
    6f14:	2601      	movs	r6, #1
    6f16:	f1ba 0f00 	cmp.w	sl, #0
    6f1a:	d004      	beq.n	6f26 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x52e>
    6f1c:	4648      	mov	r0, r9
    6f1e:	68a1      	ldr	r1, [r4, #8]
    6f20:	f006 fd31 	bl	d986 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>
    6f24:	4605      	mov	r5, r0
    6f26:	6878      	ldr	r0, [r7, #4]
    6f28:	46b9      	mov	r9, r7
    6f2a:	f890 7031 	ldrb.w	r7, [r0, #49]	; 0x31
    6f2e:	b10d      	cbz	r5, 6f34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x53c>
    6f30:	f047 0702 	orr.w	r7, r7, #2
    6f34:	f7ff fe84 	bl	6c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    6f38:	b3a0      	cbz	r0, 6fa4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ac>
    6f3a:	6860      	ldr	r0, [r4, #4]
    6f3c:	f8d9 1004 	ldr.w	r1, [r9, #4]
    6f40:	7802      	ldrb	r2, [r0, #0]
    6f42:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    6f46:	429a      	cmp	r2, r3
    6f48:	d11f      	bne.n	6f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f4a:	7842      	ldrb	r2, [r0, #1]
    6f4c:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    6f50:	429a      	cmp	r2, r3
    6f52:	d11a      	bne.n	6f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f54:	7882      	ldrb	r2, [r0, #2]
    6f56:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    6f5a:	429a      	cmp	r2, r3
    6f5c:	d115      	bne.n	6f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f5e:	78c2      	ldrb	r2, [r0, #3]
    6f60:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    6f64:	429a      	cmp	r2, r3
    6f66:	d110      	bne.n	6f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f68:	7902      	ldrb	r2, [r0, #4]
    6f6a:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    6f6e:	429a      	cmp	r2, r3
    6f70:	d10b      	bne.n	6f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f72:	7940      	ldrb	r0, [r0, #5]
    6f74:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    6f78:	4290      	cmp	r0, r2
    6f7a:	d106      	bne.n	6f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f7c:	7c60      	ldrb	r0, [r4, #17]
    6f7e:	f891 104c 	ldrb.w	r1, [r1, #76]	; 0x4c
    6f82:	4288      	cmp	r0, r1
    6f84:	d101      	bne.n	6f8a <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x592>
    6f86:	2001      	movs	r0, #1
    6f88:	e000      	b.n	6f8c <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x594>
    6f8a:	2000      	movs	r0, #0
    6f8c:	4f34      	ldr	r7, [pc, #208]	; (7060 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x60>)
    6f8e:	4682      	mov	sl, r0
    6f90:	f897 0064 	ldrb.w	r0, [r7, #100]	; 0x64
    6f94:	2808      	cmp	r0, #8
    6f96:	d006      	beq.n	6fa6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6f98:	f897 1067 	ldrb.w	r1, [r7, #103]	; 0x67
    6f9c:	4288      	cmp	r0, r1
    6f9e:	d102      	bne.n	6fa6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ae>
    6fa0:	2001      	movs	r0, #1
    6fa2:	e001      	b.n	6fa8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5b0>
    6fa4:	e021      	b.n	6fea <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5f2>
    6fa6:	2000      	movs	r0, #0
    6fa8:	4681      	mov	r9, r0
    6faa:	b925      	cbnz	r5, 6fb6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5be>
    6fac:	b12e      	cbz	r6, 6fba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    6fae:	4620      	mov	r0, r4
    6fb0:	f7ff fe52 	bl	6c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    6fb4:	b108      	cbz	r0, 6fba <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c2>
    6fb6:	2001      	movs	r0, #1
    6fb8:	e000      	b.n	6fbc <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5c4>
    6fba:	2000      	movs	r0, #0
    6fbc:	f1b8 0f00 	cmp.w	r8, #0
    6fc0:	d009      	beq.n	6fd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6fc2:	f897 1042 	ldrb.w	r1, [r7, #66]	; 0x42
    6fc6:	2901      	cmp	r1, #1
    6fc8:	d003      	beq.n	6fd2 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5da>
    6fca:	b921      	cbnz	r1, 6fd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6fcc:	ea5a 0109 	orrs.w	r1, sl, r9
    6fd0:	d001      	beq.n	6fd6 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5de>
    6fd2:	2101      	movs	r1, #1
    6fd4:	e000      	b.n	6fd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e0>
    6fd6:	2100      	movs	r1, #0
    6fd8:	4208      	tst	r0, r1
    6fda:	d003      	beq.n	6fe4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5ec>
    6fdc:	200c      	movs	r0, #12
    6fde:	b004      	add	sp, #16
    6fe0:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    6fe4:	f004 fb1c 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fe8:	e036      	b.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    6fea:	f004 fb19 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    6fee:	f1b8 0f00 	cmp.w	r8, #0
    6ff2:	d031      	beq.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    6ff4:	4620      	mov	r0, r4
    6ff6:	f7ff fe2f 	bl	6c58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x260>
    6ffa:	b900      	cbnz	r0, 6ffe <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x606>
    6ffc:	b175      	cbz	r5, 701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>
    6ffe:	a803      	add	r0, sp, #12
    7000:	f000 f980 	bl	7304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    7004:	f8d9 2004 	ldr.w	r2, [r9, #4]
    7008:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    700c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7010:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7014:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7018:	463b      	mov	r3, r7
    701a:	e018      	b.n	704e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
    701c:	f8d9 0004 	ldr.w	r0, [r9, #4]
    7020:	464d      	mov	r5, r9
    7022:	f890 0041 	ldrb.w	r0, [r0, #65]	; 0x41
    7026:	2803      	cmp	r0, #3
    7028:	d001      	beq.n	702e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e>
    702a:	2802      	cmp	r0, #2
    702c:	d114      	bne.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    702e:	f1ba 0f00 	cmp.w	sl, #0
    7032:	d011      	beq.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
    7034:	a803      	add	r0, sp, #12
    7036:	f000 f965 	bl	7304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    703a:	686a      	ldr	r2, [r5, #4]
    703c:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7040:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7044:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7048:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    704c:	23fe      	movs	r3, #254	; 0xfe
    704e:	2101      	movs	r1, #1
    7050:	4620      	mov	r0, r4
    7052:	3232      	adds	r2, #50	; 0x32
    7054:	f000 fc46 	bl	78e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7058:	2005      	movs	r0, #5
    705a:	e7c0      	b.n	6fde <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x5e6>
    705c:	20000104 	.word	0x20000104
    7060:	200011fc 	.word	0x200011fc
    7064:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7066:	4c3f      	ldr	r4, [pc, #252]	; (7164 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x164>)
    7068:	4605      	mov	r5, r0
    706a:	6860      	ldr	r0, [r4, #4]
    706c:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7070:	2900      	cmp	r1, #0
    7072:	d06c      	beq.n	714e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    7074:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7078:	2802      	cmp	r0, #2
    707a:	d02c      	beq.n	70d6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xd6>
    707c:	2801      	cmp	r0, #1
    707e:	d043      	beq.n	7108 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x108>
    7080:	f7ff fdde 	bl	6c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7084:	2800      	cmp	r0, #0
    7086:	d067      	beq.n	7158 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x158>
    7088:	686a      	ldr	r2, [r5, #4]
    708a:	6861      	ldr	r1, [r4, #4]
    708c:	7810      	ldrb	r0, [r2, #0]
    708e:	f891 304d 	ldrb.w	r3, [r1, #77]	; 0x4d
    7092:	4298      	cmp	r0, r3
    7094:	d14c      	bne.n	7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    7096:	7850      	ldrb	r0, [r2, #1]
    7098:	f891 304e 	ldrb.w	r3, [r1, #78]	; 0x4e
    709c:	4298      	cmp	r0, r3
    709e:	d147      	bne.n	7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    70a0:	7890      	ldrb	r0, [r2, #2]
    70a2:	f891 304f 	ldrb.w	r3, [r1, #79]	; 0x4f
    70a6:	4298      	cmp	r0, r3
    70a8:	d142      	bne.n	7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    70aa:	78d0      	ldrb	r0, [r2, #3]
    70ac:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
    70b0:	4298      	cmp	r0, r3
    70b2:	d13d      	bne.n	7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    70b4:	7910      	ldrb	r0, [r2, #4]
    70b6:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
    70ba:	4298      	cmp	r0, r3
    70bc:	d138      	bne.n	7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    70be:	7950      	ldrb	r0, [r2, #5]
    70c0:	f891 2052 	ldrb.w	r2, [r1, #82]	; 0x52
    70c4:	4290      	cmp	r0, r2
    70c6:	d133      	bne.n	7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    70c8:	7c68      	ldrb	r0, [r5, #17]
    70ca:	f891 204c 	ldrb.w	r2, [r1, #76]	; 0x4c
    70ce:	4290      	cmp	r0, r2
    70d0:	d12e      	bne.n	7130 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x130>
    70d2:	2001      	movs	r0, #1
    70d4:	e02d      	b.n	7132 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x132>
    70d6:	a803      	add	r0, sp, #12
    70d8:	f000 f914 	bl	7304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    70dc:	6862      	ldr	r2, [r4, #4]
    70de:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    70e2:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    70e6:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    70ea:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    70ee:	23ff      	movs	r3, #255	; 0xff
    70f0:	2100      	movs	r1, #0
    70f2:	4628      	mov	r0, r5
    70f4:	3232      	adds	r2, #50	; 0x32
    70f6:	f000 fbf5 	bl	78e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    70fa:	6861      	ldr	r1, [r4, #4]
    70fc:	2001      	movs	r0, #1
    70fe:	f881 007c 	strb.w	r0, [r1, #124]	; 0x7c
    7102:	200b      	movs	r0, #11
    7104:	b004      	add	sp, #16
    7106:	bd70      	pop	{r4, r5, r6, pc}
    7108:	a803      	add	r0, sp, #12
    710a:	f000 f8fb 	bl	7304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    710e:	6862      	ldr	r2, [r4, #4]
    7110:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7114:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7118:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    711c:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7120:	23ff      	movs	r3, #255	; 0xff
    7122:	2100      	movs	r1, #0
    7124:	4628      	mov	r0, r5
    7126:	3232      	adds	r2, #50	; 0x32
    7128:	f000 fbdc 	bl	78e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    712c:	2005      	movs	r0, #5
    712e:	e7e9      	b.n	7104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>
    7130:	2000      	movs	r0, #0
    7132:	f891 1042 	ldrb.w	r1, [r1, #66]	; 0x42
    7136:	2901      	cmp	r1, #1
    7138:	d00c      	beq.n	7154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    713a:	b958      	cbnz	r0, 7154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    713c:	490a      	ldr	r1, [pc, #40]	; (7168 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x168>)
    713e:	f891 0067 	ldrb.w	r0, [r1, #103]	; 0x67
    7142:	2808      	cmp	r0, #8
    7144:	d003      	beq.n	714e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14e>
    7146:	f891 1064 	ldrb.w	r1, [r1, #100]	; 0x64
    714a:	4281      	cmp	r1, r0
    714c:	d002      	beq.n	7154 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x154>
    714e:	f004 fa67 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7152:	e7eb      	b.n	712c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12c>
    7154:	200c      	movs	r0, #12
    7156:	e7d5      	b.n	7104 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x104>
    7158:	f640 6158 	movw	r1, #3672	; 0xe58
    715c:	2032      	movs	r0, #50	; 0x32
    715e:	f7fc feaf 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7162:	0000      	.short	0x0000
    7164:	20000104 	.word	0x20000104
    7168:	200011fc 	.word	0x200011fc
    716c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    716e:	4c1e      	ldr	r4, [pc, #120]	; (71e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e8>)
    7170:	4605      	mov	r5, r0
    7172:	6860      	ldr	r0, [r4, #4]
    7174:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7178:	b129      	cbz	r1, 7186 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x186>
    717a:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    717e:	2802      	cmp	r0, #2
    7180:	d004      	beq.n	718c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18c>
    7182:	2801      	cmp	r0, #1
    7184:	d01b      	beq.n	71be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1be>
    7186:	f004 fa4b 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    718a:	e02a      	b.n	71e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1e2>
    718c:	a803      	add	r0, sp, #12
    718e:	f000 f8b9 	bl	7304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    7192:	6862      	ldr	r2, [r4, #4]
    7194:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    7198:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    719c:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    71a0:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    71a4:	23ff      	movs	r3, #255	; 0xff
    71a6:	2106      	movs	r1, #6
    71a8:	4628      	mov	r0, r5
    71aa:	3232      	adds	r2, #50	; 0x32
    71ac:	f000 fb9a 	bl	78e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    71b0:	6862      	ldr	r2, [r4, #4]
    71b2:	200b      	movs	r0, #11
    71b4:	2100      	movs	r1, #0
    71b6:	f882 107c 	strb.w	r1, [r2, #124]	; 0x7c
    71ba:	b004      	add	sp, #16
    71bc:	bd70      	pop	{r4, r5, r6, pc}
    71be:	a803      	add	r0, sp, #12
    71c0:	f000 f8a0 	bl	7304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    71c4:	6862      	ldr	r2, [r4, #4]
    71c6:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    71ca:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    71ce:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    71d2:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    71d6:	23ff      	movs	r3, #255	; 0xff
    71d8:	2106      	movs	r1, #6
    71da:	4628      	mov	r0, r5
    71dc:	3232      	adds	r2, #50	; 0x32
    71de:	f000 fb81 	bl	78e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    71e2:	2005      	movs	r0, #5
    71e4:	e7e9      	b.n	71ba <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ba>
    71e6:	0000      	.short	0x0000
    71e8:	20000104 	.word	0x20000104
    71ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    71ee:	b389      	cbz	r1, 7254 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x254>
    71f0:	2901      	cmp	r1, #1
    71f2:	d034      	beq.n	725e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x25e>
    71f4:	2505      	movs	r5, #5
    71f6:	2902      	cmp	r1, #2
    71f8:	d004      	beq.n	7204 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x204>
    71fa:	2906      	cmp	r1, #6
    71fc:	d025      	beq.n	724a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24a>
    71fe:	f004 fa0f 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    7202:	e01f      	b.n	7244 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x244>
    7204:	4606      	mov	r6, r0
    7206:	f004 fa0b 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    720a:	4c17      	ldr	r4, [pc, #92]	; (7268 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x268>)
    720c:	6860      	ldr	r0, [r4, #4]
    720e:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
    7212:	b1b9      	cbz	r1, 7244 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x244>
    7214:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    7218:	2801      	cmp	r0, #1
    721a:	d001      	beq.n	7220 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x220>
    721c:	2802      	cmp	r0, #2
    721e:	d111      	bne.n	7244 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x244>
    7220:	a803      	add	r0, sp, #12
    7222:	f000 f86f 	bl	7304 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x304>
    7226:	6862      	ldr	r2, [r4, #4]
    7228:	f99d 300c 	ldrsb.w	r3, [sp, #12]
    722c:	f892 0065 	ldrb.w	r0, [r2, #101]	; 0x65
    7230:	f892 1074 	ldrb.w	r1, [r2, #116]	; 0x74
    7234:	e88d 000b 	stmia.w	sp, {r0, r1, r3}
    7238:	23ff      	movs	r3, #255	; 0xff
    723a:	2102      	movs	r1, #2
    723c:	4630      	mov	r0, r6
    723e:	3232      	adds	r2, #50	; 0x32
    7240:	f000 fb50 	bl	78e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>
    7244:	b004      	add	sp, #16
    7246:	4628      	mov	r0, r5
    7248:	bd70      	pop	{r4, r5, r6, pc}
    724a:	b004      	add	sp, #16
    724c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7250:	f7ff bf8c 	b.w	716c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16c>
    7254:	b004      	add	sp, #16
    7256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    725a:	f7ff bf03 	b.w	7064 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64>
    725e:	b004      	add	sp, #16
    7260:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7264:	f7ff be2c 	b.w	6ec0 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x4c8>
    7268:	20000104 	.word	0x20000104
    726c:	b570      	push	{r4, r5, r6, lr}
    726e:	4c11      	ldr	r4, [pc, #68]	; (72b4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b4>)
    7270:	4605      	mov	r5, r0
    7272:	6861      	ldr	r1, [r4, #4]
    7274:	f891 004a 	ldrb.w	r0, [r1, #74]	; 0x4a
    7278:	2800      	cmp	r0, #0
    727a:	d019      	beq.n	72b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>
    727c:	f891 0049 	ldrb.w	r0, [r1, #73]	; 0x49
    7280:	2800      	cmp	r0, #0
    7282:	d015      	beq.n	72b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b0>
    7284:	f891 0031 	ldrb.w	r0, [r1, #49]	; 0x31
    7288:	3132      	adds	r1, #50	; 0x32
    728a:	f007 f9be 	bl	e60a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x2c>
    728e:	b140      	cbz	r0, 72a2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2a2>
    7290:	f7fe fa00 	bl	5694 <sym_3Q2UQ65DVTXA3EZPN34QXGGEFSEA6HOSHLFXCMI>
    7294:	6861      	ldr	r1, [r4, #4]
    7296:	462a      	mov	r2, r5
    7298:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    729c:	3132      	adds	r1, #50	; 0x32
    729e:	f006 bb3d 	b.w	d91c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>
    72a2:	6860      	ldr	r0, [r4, #4]
    72a4:	4629      	mov	r1, r5
    72a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    72aa:	3032      	adds	r0, #50	; 0x32
    72ac:	f006 bb25 	b.w	d8fa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>
    72b0:	bd70      	pop	{r4, r5, r6, pc}
    72b2:	0000      	.short	0x0000
    72b4:	20000104 	.word	0x20000104
    72b8:	4602      	mov	r2, r0
    72ba:	480b      	ldr	r0, [pc, #44]	; (72e8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e8>)
    72bc:	b082      	sub	sp, #8
    72be:	6840      	ldr	r0, [r0, #4]
    72c0:	f890 1059 	ldrb.w	r1, [r0, #89]	; 0x59
    72c4:	f88d 1000 	strb.w	r1, [sp]
    72c8:	9900      	ldr	r1, [sp, #0]
    72ca:	9100      	str	r1, [sp, #0]
    72cc:	f89d 1000 	ldrb.w	r1, [sp]
    72d0:	2900      	cmp	r1, #0
    72d2:	d107      	bne.n	72e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    72d4:	6d41      	ldr	r1, [r0, #84]	; 0x54
    72d6:	2900      	cmp	r1, #0
    72d8:	d004      	beq.n	72e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2e4>
    72da:	f890 0058 	ldrb.w	r0, [r0, #88]	; 0x58
    72de:	b002      	add	sp, #8
    72e0:	f7fb ba90 	b.w	2804 <sym_4FXF7BZT2IZ3YRYSE3Z2XCICKWZPGDZTXL2ECZQ>
    72e4:	b002      	add	sp, #8
    72e6:	4770      	bx	lr
    72e8:	20000104 	.word	0x20000104
    72ec:	b510      	push	{r4, lr}
    72ee:	4804      	ldr	r0, [pc, #16]	; (7300 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x300>)
    72f0:	f004 fcac 	bl	bc4c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    72f4:	2800      	cmp	r0, #0
    72f6:	d102      	bne.n	72fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2fe>
    72f8:	4901      	ldr	r1, [pc, #4]	; (7300 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x300>)
    72fa:	207f      	movs	r0, #127	; 0x7f
    72fc:	7008      	strb	r0, [r1, #0]
    72fe:	bd10      	pop	{r4, pc}
    7300:	20000104 	.word	0x20000104
    7304:	4a07      	ldr	r2, [pc, #28]	; (7324 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x324>)
    7306:	b510      	push	{r4, lr}
    7308:	f992 1000 	ldrsb.w	r1, [r2]
    730c:	297f      	cmp	r1, #127	; 0x7f
    730e:	d003      	beq.n	7318 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x318>
    7310:	7001      	strb	r1, [r0, #0]
    7312:	207f      	movs	r0, #127	; 0x7f
    7314:	7010      	strb	r0, [r2, #0]
    7316:	bd10      	pop	{r4, pc}
    7318:	f240 319f 	movw	r1, #927	; 0x39f
    731c:	2032      	movs	r0, #50	; 0x32
    731e:	f7fc fdcf 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7322:	0000      	.short	0x0000
    7324:	20000104 	.word	0x20000104
    7328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    732c:	4607      	mov	r7, r0
    732e:	f7fd f9f3 	bl	4718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7332:	4604      	mov	r4, r0
    7334:	f7fd f9f6 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7338:	4621      	mov	r1, r4
    733a:	f007 f9be 	bl	e6ba <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    733e:	0005      	movs	r5, r0
    7340:	d012      	beq.n	7368 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x368>
    7342:	4c2d      	ldr	r4, [pc, #180]	; (73f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3f8>)
    7344:	6860      	ldr	r0, [r4, #4]
    7346:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    734a:	2801      	cmp	r0, #1
    734c:	d004      	beq.n	7358 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x358>
    734e:	2802      	cmp	r0, #2
    7350:	d002      	beq.n	7358 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x358>
    7352:	f7ff fc75 	bl	6c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7356:	b150      	cbz	r0, 736e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36e>
    7358:	f06f 0613 	mvn.w	r6, #19
    735c:	b33f      	cbz	r7, 73ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ae>
    735e:	4628      	mov	r0, r5
    7360:	f006 fec9 	bl	e0f6 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>
    7364:	b950      	cbnz	r0, 737c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x37c>
    7366:	e005      	b.n	7374 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x374>
    7368:	f241 4181 	movw	r1, #5249	; 0x1481
    736c:	e03a      	b.n	73e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    736e:	f241 4187 	movw	r1, #5255	; 0x1487
    7372:	e037      	b.n	73e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    7374:	4628      	mov	r0, r5
    7376:	f006 fee0 	bl	e13a <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>
    737a:	b1c0      	cbz	r0, 73ae <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ae>
    737c:	6861      	ldr	r1, [r4, #4]
    737e:	4628      	mov	r0, r5
    7380:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7384:	2a05      	cmp	r2, #5
    7386:	d202      	bcs.n	738e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38e>
    7388:	f241 410b 	movw	r1, #5131	; 0x140b
    738c:	e02a      	b.n	73e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    738e:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7392:	2a0b      	cmp	r2, #11
    7394:	d302      	bcc.n	739c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x39c>
    7396:	f241 410c 	movw	r1, #5132	; 0x140c
    739a:	e023      	b.n	73e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    739c:	68e2      	ldr	r2, [r4, #12]
    739e:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    73a2:	6952      	ldr	r2, [r2, #20]
    73a4:	eb06 0181 	add.w	r1, r6, r1, lsl #2
    73a8:	5851      	ldr	r1, [r2, r1]
    73aa:	4788      	blx	r1
    73ac:	e016      	b.n	73dc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3dc>
    73ae:	6860      	ldr	r0, [r4, #4]
    73b0:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    73b4:	2905      	cmp	r1, #5
    73b6:	d202      	bcs.n	73be <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3be>
    73b8:	f241 4177 	movw	r1, #5239	; 0x1477
    73bc:	e012      	b.n	73e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    73be:	f890 105c 	ldrb.w	r1, [r0, #92]	; 0x5c
    73c2:	290b      	cmp	r1, #11
    73c4:	d302      	bcc.n	73cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3cc>
    73c6:	f241 4178 	movw	r1, #5240	; 0x1478
    73ca:	e00b      	b.n	73e4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3e4>
    73cc:	68e1      	ldr	r1, [r4, #12]
    73ce:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    73d2:	6989      	ldr	r1, [r1, #24]
    73d4:	eb06 0080 	add.w	r0, r6, r0, lsl #2
    73d8:	5808      	ldr	r0, [r1, r0]
    73da:	4780      	blx	r0
    73dc:	280f      	cmp	r0, #15
    73de:	d304      	bcc.n	73ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3ea>
    73e0:	f241 419c 	movw	r1, #5276	; 0x149c
    73e4:	2032      	movs	r0, #50	; 0x32
    73e6:	f7fc fd6b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    73ea:	68e1      	ldr	r1, [r4, #12]
    73ec:	6909      	ldr	r1, [r1, #16]
    73ee:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    73f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    73f6:	4700      	bx	r0
    73f8:	20000104 	.word	0x20000104
    73fc:	b510      	push	{r4, lr}
    73fe:	b118      	cbz	r0, 7408 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x408>
    7400:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7404:	f000 b924 	b.w	7650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    7408:	2900      	cmp	r1, #0
    740a:	d01d      	beq.n	7448 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x448>
    740c:	480f      	ldr	r0, [pc, #60]	; (744c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x44c>)
    740e:	6841      	ldr	r1, [r0, #4]
    7410:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7414:	2a0b      	cmp	r2, #11
    7416:	d202      	bcs.n	741e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x41e>
    7418:	f241 5143 	movw	r1, #5443	; 0x1543
    741c:	e005      	b.n	742a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x42a>
    741e:	f891 205c 	ldrb.w	r2, [r1, #92]	; 0x5c
    7422:	2a0f      	cmp	r2, #15
    7424:	d304      	bcc.n	7430 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x430>
    7426:	f241 5144 	movw	r1, #5444	; 0x1544
    742a:	2032      	movs	r0, #50	; 0x32
    742c:	f7fc fd48 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7430:	68c0      	ldr	r0, [r0, #12]
    7432:	f891 105c 	ldrb.w	r1, [r1, #92]	; 0x5c
    7436:	6880      	ldr	r0, [r0, #8]
    7438:	f06f 022b 	mvn.w	r2, #43	; 0x2b
    743c:	eb02 0181 	add.w	r1, r2, r1, lsl #2
    7440:	5840      	ldr	r0, [r0, r1]
    7442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7446:	4700      	bx	r0
    7448:	bd10      	pop	{r4, pc}
    744a:	0000      	.short	0x0000
    744c:	20000104 	.word	0x20000104
    7450:	b510      	push	{r4, lr}
    7452:	f7ff faef 	bl	6a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    7456:	f000 f90b 	bl	7670 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x670>
    745a:	4805      	ldr	r0, [pc, #20]	; (7470 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x470>)
    745c:	6881      	ldr	r1, [r0, #8]
    745e:	2000      	movs	r0, #0
    7460:	f7ff fc3a 	bl	6cd8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x2e0>
    7464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7468:	2003      	movs	r0, #3
    746a:	f000 bb79 	b.w	7b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    746e:	0000      	.short	0x0000
    7470:	20000104 	.word	0x20000104
    7474:	b510      	push	{r4, lr}
    7476:	f7fd f94f 	bl	4718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    747a:	4604      	mov	r4, r0
    747c:	f7fd f952 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    7480:	4621      	mov	r1, r4
    7482:	f007 f91a 	bl	e6ba <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7486:	b150      	cbz	r0, 749e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x49e>
    7488:	f004 fb2e 	bl	bae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    748c:	2000      	movs	r0, #0
    748e:	f004 f9df 	bl	b850 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>
    7492:	4905      	ldr	r1, [pc, #20]	; (74a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4a8>)
    7494:	2006      	movs	r0, #6
    7496:	6849      	ldr	r1, [r1, #4]
    7498:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    749c:	bd10      	pop	{r4, pc}
    749e:	f240 5184 	movw	r1, #1412	; 0x584
    74a2:	2032      	movs	r0, #50	; 0x32
    74a4:	f7fc fd0c 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74a8:	20000104 	.word	0x20000104
    74ac:	490f      	ldr	r1, [pc, #60]	; (74ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4ec>)
    74ae:	b510      	push	{r4, lr}
    74b0:	6848      	ldr	r0, [r1, #4]
    74b2:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    74b6:	2a06      	cmp	r2, #6
    74b8:	d202      	bcs.n	74c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4c0>
    74ba:	f241 5171 	movw	r1, #5489	; 0x1571
    74be:	e005      	b.n	74cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4cc>
    74c0:	f890 205c 	ldrb.w	r2, [r0, #92]	; 0x5c
    74c4:	2a0b      	cmp	r2, #11
    74c6:	d304      	bcc.n	74d2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4d2>
    74c8:	f241 5172 	movw	r1, #5490	; 0x1572
    74cc:	2032      	movs	r0, #50	; 0x32
    74ce:	f7fc fcf7 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    74d2:	68c9      	ldr	r1, [r1, #12]
    74d4:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    74d8:	68c9      	ldr	r1, [r1, #12]
    74da:	f06f 0213 	mvn.w	r2, #19
    74de:	eb02 0080 	add.w	r0, r2, r0, lsl #2
    74e2:	5808      	ldr	r0, [r1, r0]
    74e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    74e8:	4700      	bx	r0
    74ea:	0000      	.short	0x0000
    74ec:	20000104 	.word	0x20000104
    74f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    74f4:	4c31      	ldr	r4, [pc, #196]	; (75bc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5bc>)
    74f6:	4605      	mov	r5, r0
    74f8:	460e      	mov	r6, r1
    74fa:	6860      	ldr	r0, [r4, #4]
    74fc:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    7500:	b120      	cbz	r0, 750c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50c>
    7502:	2801      	cmp	r0, #1
    7504:	d002      	beq.n	750c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x50c>
    7506:	200c      	movs	r0, #12
    7508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    750c:	f004 fa60 	bl	b9d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>
    7510:	f004 f86c 	bl	b5ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>
    7514:	f003 fe4e 	bl	b1b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>
    7518:	f004 fcc8 	bl	beac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>
    751c:	4828      	ldr	r0, [pc, #160]	; (75c0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c0>)
    751e:	f004 f98f 	bl	b840 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>
    7522:	4828      	ldr	r0, [pc, #160]	; (75c4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c4>)
    7524:	f004 fbb8 	bl	bc98 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>
    7528:	4827      	ldr	r0, [pc, #156]	; (75c8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5c8>)
    752a:	f004 fbab 	bl	bc84 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>
    752e:	4630      	mov	r0, r6
    7530:	f004 fada 	bl	bae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>
    7534:	7968      	ldrb	r0, [r5, #5]
    7536:	b110      	cbz	r0, 753e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x53e>
    7538:	2001      	movs	r0, #1
    753a:	f7ff febd 	bl	72b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b8>
    753e:	7928      	ldrb	r0, [r5, #4]
    7540:	2803      	cmp	r0, #3
    7542:	d001      	beq.n	7548 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x548>
    7544:	b118      	cbz	r0, 754e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x54e>
    7546:	e018      	b.n	757a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x57a>
    7548:	f640 1188 	movw	r1, #2440	; 0x988
    754c:	e033      	b.n	75b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b6>
    754e:	6861      	ldr	r1, [r4, #4]
    7550:	2000      	movs	r0, #0
    7552:	2503      	movs	r5, #3
    7554:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
    7558:	f891 2066 	ldrb.w	r2, [r1, #102]	; 0x66
    755c:	1c52      	adds	r2, r2, #1
    755e:	fbb2 f7f5 	udiv	r7, r2, r5
    7562:	fb05 2217 	mls	r2, r5, r7, r2
    7566:	f881 2066 	strb.w	r2, [r1, #102]	; 0x66
    756a:	fa23 f202 	lsr.w	r2, r3, r2
    756e:	07d2      	lsls	r2, r2, #31
    7570:	d103      	bne.n	757a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x57a>
    7572:	1c40      	adds	r0, r0, #1
    7574:	b2c0      	uxtb	r0, r0
    7576:	2803      	cmp	r0, #3
    7578:	d3ee      	bcc.n	7558 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x558>
    757a:	6860      	ldr	r0, [r4, #4]
    757c:	f990 004b 	ldrsb.w	r0, [r0, #75]	; 0x4b
    7580:	f004 faac 	bl	badc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>
    7584:	4631      	mov	r1, r6
    7586:	2001      	movs	r0, #1
    7588:	f7ff fa66 	bl	6a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    758c:	2800      	cmp	r0, #0
    758e:	d0bb      	beq.n	7508 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x508>
    7590:	f000 f922 	bl	77d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d8>
    7594:	6860      	ldr	r0, [r4, #4]
    7596:	f890 0039 	ldrb.w	r0, [r0, #57]	; 0x39
    759a:	b138      	cbz	r0, 75ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ac>
    759c:	f7fe f87e 	bl	569c <sym_ZTNYVYBM2UM3CH2NF2DF4CYN3OTLVACDURSUDOQ>
    75a0:	480a      	ldr	r0, [pc, #40]	; (75cc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5cc>)
    75a2:	6800      	ldr	r0, [r0, #0]
    75a4:	2803      	cmp	r0, #3
    75a6:	d004      	beq.n	75b2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5b2>
    75a8:	2000      	movs	r0, #0
    75aa:	e7ad      	b.n	7508 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x508>
    75ac:	f7fe fa6a 	bl	5a84 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY>
    75b0:	e7f6      	b.n	75a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5a0>
    75b2:	f640 119a 	movw	r1, #2458	; 0x99a
    75b6:	2032      	movs	r0, #50	; 0x32
    75b8:	f7fc fc82 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    75bc:	20000104 	.word	0x20000104
    75c0:	000078d4 	.word	0x000078d4
    75c4:	0000fca3 	.word	0x0000fca3
    75c8:	8e89bed6 	.word	0x8e89bed6
    75cc:	40001550 	.word	0x40001550
    75d0:	b510      	push	{r4, lr}
    75d2:	2000      	movs	r0, #0
    75d4:	f7ff fe70 	bl	72b8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2b8>
    75d8:	4808      	ldr	r0, [pc, #32]	; (75fc <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5fc>)
    75da:	6840      	ldr	r0, [r0, #4]
    75dc:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    75e0:	b128      	cbz	r0, 75ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ee>
    75e2:	2801      	cmp	r0, #1
    75e4:	d003      	beq.n	75ee <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5ee>
    75e6:	2802      	cmp	r0, #2
    75e8:	d004      	beq.n	75f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f4>
    75ea:	200c      	movs	r0, #12
    75ec:	bd10      	pop	{r4, pc}
    75ee:	f000 f82f 	bl	7650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    75f2:	e001      	b.n	75f8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x5f8>
    75f4:	f000 f844 	bl	7680 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x680>
    75f8:	2000      	movs	r0, #0
    75fa:	bd10      	pop	{r4, pc}
    75fc:	20000104 	.word	0x20000104
    7600:	b570      	push	{r4, r5, r6, lr}
    7602:	4c12      	ldr	r4, [pc, #72]	; (764c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x64c>)
    7604:	6860      	ldr	r0, [r4, #4]
    7606:	f100 0532 	add.w	r5, r0, #50	; 0x32
    760a:	f890 6031 	ldrb.w	r6, [r0, #49]	; 0x31
    760e:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    7612:	b188      	cbz	r0, 7638 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x638>
    7614:	f7ff fb14 	bl	6c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    7618:	b130      	cbz	r0, 7628 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x628>
    761a:	6860      	ldr	r0, [r4, #4]
    761c:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
    7620:	b111      	cbz	r1, 7628 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x628>
    7622:	f890 0067 	ldrb.w	r0, [r0, #103]	; 0x67
    7626:	e002      	b.n	762e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62e>
    7628:	6860      	ldr	r0, [r4, #4]
    762a:	f890 0064 	ldrb.w	r0, [r0, #100]	; 0x64
    762e:	f7fe f8db 	bl	57e8 <sym_DHR6XELGSD2MHYS7JWGEPSKXD43VLKKJDN33HMA>
    7632:	b108      	cbz	r0, 7638 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x638>
    7634:	2601      	movs	r6, #1
    7636:	4605      	mov	r5, r0
    7638:	4629      	mov	r1, r5
    763a:	68a0      	ldr	r0, [r4, #8]
    763c:	f006 fdb2 	bl	e1a4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>
    7640:	4631      	mov	r1, r6
    7642:	68a0      	ldr	r0, [r4, #8]
    7644:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7648:	f006 bdb2 	b.w	e1b0 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>
    764c:	20000104 	.word	0x20000104
    7650:	b510      	push	{r4, lr}
    7652:	f7ff f9ef 	bl	6a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    7656:	4905      	ldr	r1, [pc, #20]	; (766c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x66c>)
    7658:	2001      	movs	r0, #1
    765a:	6849      	ldr	r1, [r1, #4]
    765c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7660:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7664:	2000      	movs	r0, #0
    7666:	f000 ba7b 	b.w	7b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    766a:	0000      	.short	0x0000
    766c:	20000104 	.word	0x20000104
    7670:	4902      	ldr	r1, [pc, #8]	; (767c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x67c>)
    7672:	2000      	movs	r0, #0
    7674:	6849      	ldr	r1, [r1, #4]
    7676:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    767a:	4770      	bx	lr
    767c:	20000104 	.word	0x20000104
    7680:	b570      	push	{r4, r5, r6, lr}
    7682:	f7fd f849 	bl	4718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7686:	4604      	mov	r4, r0
    7688:	f7fd f84c 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    768c:	4621      	mov	r1, r4
    768e:	f007 f814 	bl	e6ba <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7692:	0004      	movs	r4, r0
    7694:	d020      	beq.n	76d8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d8>
    7696:	f007 f860 	bl	e75a <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>
    769a:	2000      	movs	r0, #0
    769c:	f000 fa2a 	bl	7af4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    76a0:	b1f8      	cbz	r0, 76e2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6e2>
    76a2:	4d1e      	ldr	r5, [pc, #120]	; (771c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x71c>)
    76a4:	6868      	ldr	r0, [r5, #4]
    76a6:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
    76aa:	2802      	cmp	r0, #2
    76ac:	d003      	beq.n	76b6 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6b6>
    76ae:	4621      	mov	r1, r4
    76b0:	2000      	movs	r0, #0
    76b2:	f7ff f9d1 	bl	6a58 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x60>
    76b6:	1ce0      	adds	r0, r4, #3
    76b8:	f006 f9af 	bl	da1a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>
    76bc:	6869      	ldr	r1, [r5, #4]
    76be:	f881 0068 	strb.w	r0, [r1, #104]	; 0x68
    76c2:	b128      	cbz	r0, 76d0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6d0>
    76c4:	2440      	movs	r4, #64	; 0x40
    76c6:	f003 fd95 	bl	b1f4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>
    76ca:	4620      	mov	r0, r4
    76cc:	f003 ff9c 	bl	b608 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>
    76d0:	f7ff fab6 	bl	6c40 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x248>
    76d4:	b970      	cbnz	r0, 76f4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6f4>
    76d6:	e008      	b.n	76ea <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6ea>
    76d8:	f240 4177 	movw	r1, #1143	; 0x477
    76dc:	2032      	movs	r0, #50	; 0x32
    76de:	f7fc fbef 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    76e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    76e6:	f7ff bfb3 	b.w	7650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    76ea:	6868      	ldr	r0, [r5, #4]
    76ec:	f890 0040 	ldrb.w	r0, [r0, #64]	; 0x40
    76f0:	2802      	cmp	r0, #2
    76f2:	d104      	bne.n	76fe <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x6fe>
    76f4:	2100      	movs	r1, #0
    76f6:	2201      	movs	r2, #1
    76f8:	4608      	mov	r0, r1
    76fa:	f004 fa81 	bl	bc00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    76fe:	6868      	ldr	r0, [r5, #4]
    7700:	21ff      	movs	r1, #255	; 0xff
    7702:	f800 1f64 	strb.w	r1, [r0, #100]!
    7706:	7041      	strb	r1, [r0, #1]
    7708:	2100      	movs	r1, #0
    770a:	7201      	strb	r1, [r0, #8]
    770c:	71c1      	strb	r1, [r0, #7]
    770e:	7241      	strb	r1, [r0, #9]
    7710:	7601      	strb	r1, [r0, #24]
    7712:	2105      	movs	r1, #5
    7714:	f800 1c08 	strb.w	r1, [r0, #-8]
    7718:	bd70      	pop	{r4, r5, r6, pc}
    771a:	0000      	.short	0x0000
    771c:	20000104 	.word	0x20000104
    7720:	b570      	push	{r4, r5, r6, lr}
    7722:	f7fc fff9 	bl	4718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    7726:	4604      	mov	r4, r0
    7728:	f7fc fffc 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    772c:	4621      	mov	r1, r4
    772e:	f006 ffc4 	bl	e6ba <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A+0x7c>
    7732:	0005      	movs	r5, r0
    7734:	d028      	beq.n	7788 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x788>
    7736:	4e19      	ldr	r6, [pc, #100]	; (779c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x79c>)
    7738:	2004      	movs	r0, #4
    773a:	6874      	ldr	r4, [r6, #4]
    773c:	345c      	adds	r4, #92	; 0x5c
    773e:	f000 f9d9 	bl	7af4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    7742:	b330      	cbz	r0, 7792 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x792>
    7744:	200c      	movs	r0, #12
    7746:	7020      	strb	r0, [r4, #0]
    7748:	2001      	movs	r0, #1
    774a:	f000 fa09 	bl	7b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    774e:	7828      	ldrb	r0, [r5, #0]
    7750:	6871      	ldr	r1, [r6, #4]
    7752:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7756:	f881 0076 	strb.w	r0, [r1, #118]	; 0x76
    775a:	2005      	movs	r0, #5
    775c:	f7ff fb3a 	bl	6dd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    7760:	4a0f      	ldr	r2, [pc, #60]	; (77a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7a0>)
    7762:	68b1      	ldr	r1, [r6, #8]
    7764:	2520      	movs	r5, #32
    7766:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    7768:	f890 308d 	ldrb.w	r3, [r0, #141]	; 0x8d
    776c:	7808      	ldrb	r0, [r1, #0]
    776e:	ea05 1343 	and.w	r3, r5, r3, lsl #5
    7772:	f020 0020 	bic.w	r0, r0, #32
    7776:	4318      	orrs	r0, r3
    7778:	7008      	strb	r0, [r1, #0]
    777a:	6bd0      	ldr	r0, [r2, #60]	; 0x3c
    777c:	7ea2      	ldrb	r2, [r4, #26]
    777e:	f810 1f8d 	ldrb.w	r1, [r0, #141]!
    7782:	4011      	ands	r1, r2
    7784:	7001      	strb	r1, [r0, #0]
    7786:	bd70      	pop	{r4, r5, r6, pc}
    7788:	f240 51ef 	movw	r1, #1519	; 0x5ef
    778c:	2032      	movs	r0, #50	; 0x32
    778e:	f7fc fb97 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7792:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7796:	f7ff bf5b 	b.w	7650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    779a:	0000      	.short	0x0000
    779c:	20000104 	.word	0x20000104
    77a0:	200011fc 	.word	0x200011fc
    77a4:	b510      	push	{r4, lr}
    77a6:	2003      	movs	r0, #3
    77a8:	f000 f9a4 	bl	7af4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>
    77ac:	b168      	cbz	r0, 77ca <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7ca>
    77ae:	2003      	movs	r0, #3
    77b0:	f7ff fb10 	bl	6dd4 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3dc>
    77b4:	2201      	movs	r2, #1
    77b6:	4611      	mov	r1, r2
    77b8:	2000      	movs	r0, #0
    77ba:	f004 fa21 	bl	bc00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>
    77be:	4905      	ldr	r1, [pc, #20]	; (77d4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7d4>)
    77c0:	200b      	movs	r0, #11
    77c2:	6849      	ldr	r1, [r1, #4]
    77c4:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    77c8:	bd10      	pop	{r4, pc}
    77ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    77ce:	f7ff bf3f 	b.w	7650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    77d2:	0000      	.short	0x0000
    77d4:	20000104 	.word	0x20000104
    77d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    77dc:	4c1d      	ldr	r4, [pc, #116]	; (7854 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x854>)
    77de:	2600      	movs	r6, #0
    77e0:	6860      	ldr	r0, [r4, #4]
    77e2:	f880 607c 	strb.w	r6, [r0, #124]	; 0x7c
    77e6:	f890 1049 	ldrb.w	r1, [r0, #73]	; 0x49
    77ea:	b911      	cbnz	r1, 77f2 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x7f2>
    77ec:	f890 0069 	ldrb.w	r0, [r0, #105]	; 0x69
    77f0:	b350      	cbz	r0, 7848 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x848>
    77f2:	f004 fe00 	bl	c3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    77f6:	4680      	mov	r8, r0
    77f8:	6860      	ldr	r0, [r4, #4]
    77fa:	4641      	mov	r1, r8
    77fc:	6c40      	ldr	r0, [r0, #68]	; 0x44
    77fe:	f7f9 ff89 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7802:	4f15      	ldr	r7, [pc, #84]	; (7858 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x858>)
    7804:	4605      	mov	r5, r0
    7806:	fb90 f0f7 	sdiv	r0, r0, r7
    780a:	fb07 5010 	mls	r0, r7, r0, r5
    780e:	4241      	negs	r1, r0
    7810:	4640      	mov	r0, r8
    7812:	f7f9 ff4d 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    7816:	6861      	ldr	r1, [r4, #4]
    7818:	6448      	str	r0, [r1, #68]	; 0x44
    781a:	fb95 f0f7 	sdiv	r0, r5, r7
    781e:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    7820:	4410      	add	r0, r2
    7822:	6788      	str	r0, [r1, #120]	; 0x78
    7824:	f7fe f89c 	bl	5960 <sym_RHRHCWPUPZHCOID576WBS7QZ2KAUT2GASS2T3QY>
    7828:	6861      	ldr	r1, [r4, #4]
    782a:	6f8a      	ldr	r2, [r1, #120]	; 0x78
    782c:	4290      	cmp	r0, r2
    782e:	d80b      	bhi.n	7848 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x848>
    7830:	f8c1 8044 	str.w	r8, [r1, #68]	; 0x44
    7834:	678e      	str	r6, [r1, #120]	; 0x78
    7836:	f891 0069 	ldrb.w	r0, [r1, #105]	; 0x69
    783a:	b110      	cbz	r0, 7842 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x842>
    783c:	2001      	movs	r0, #1
    783e:	f7fd ff79 	bl	5734 <sym_EV54ITVX6ZJNRIULZTHEWNSCWW5GNYKPCEWELSY>
    7842:	2001      	movs	r0, #1
    7844:	f7ff fd12 	bl	726c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x26c>
    7848:	6861      	ldr	r1, [r4, #4]
    784a:	2002      	movs	r0, #2
    784c:	f881 005c 	strb.w	r0, [r1, #92]	; 0x5c
    7850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7854:	20000104 	.word	0x20000104
    7858:	000f4240 	.word	0x000f4240
    785c:	00007671 	.word	0x00007671
    7860:	00007651 	.word	0x00007651
    7864:	0000e69b 	.word	0x0000e69b
    7868:	0000e69b 	.word	0x0000e69b
    786c:	0000e69b 	.word	0x0000e69b
    7870:	00007681 	.word	0x00007681
    7874:	0000e69b 	.word	0x0000e69b
    7878:	0000e69b 	.word	0x0000e69b
    787c:	0000e69b 	.word	0x0000e69b
    7880:	0000e69b 	.word	0x0000e69b
    7884:	0000e69b 	.word	0x0000e69b
    7888:	000077a5 	.word	0x000077a5
    788c:	00007721 	.word	0x00007721
    7890:	0000e69b 	.word	0x0000e69b
    7894:	0000e69b 	.word	0x0000e69b
    7898:	00007475 	.word	0x00007475
    789c:	00007451 	.word	0x00007451
    78a0:	00000000 	.word	0x00000000
    78a4:	0000e6a5 	.word	0x0000e6a5
    78a8:	0000e643 	.word	0x0000e643
    78ac:	0000e655 	.word	0x0000e655
    78b0:	0000e663 	.word	0x0000e663
    78b4:	00006bed 	.word	0x00006bed
    78b8:	000074f1 	.word	0x000074f1
    78bc:	000075d1 	.word	0x000075d1
    78c0:	00007898 	.word	0x00007898
    78c4:	000078a0 	.word	0x000078a0
    78c8:	0000785c 	.word	0x0000785c
    78cc:	000078b0 	.word	0x000078b0
    78d0:	000078a8 	.word	0x000078a8
    78d4:	000074ad 	.word	0x000074ad
    78d8:	00007329 	.word	0x00007329
    78dc:	000073fd 	.word	0x000073fd
    78e0:	0000e6b7 	.word	0x0000e6b7

000078e4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI>:
    78e4:	e92d 5ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    78e8:	461d      	mov	r5, r3
    78ea:	e9dd ba0b 	ldrd	fp, sl, [sp, #44]	; 0x2c
    78ee:	4616      	mov	r6, r2
    78f0:	4688      	mov	r8, r1
    78f2:	4681      	mov	r9, r0
    78f4:	f7fc ff16 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    78f8:	4604      	mov	r4, r0
    78fa:	f005 fd52 	bl	d3a2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    78fe:	2801      	cmp	r0, #1
    7900:	d063      	beq.n	79ca <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe6>
    7902:	4620      	mov	r0, r4
    7904:	f006 ffa2 	bl	e84c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    7908:	4604      	mov	r4, r0
    790a:	221c      	movs	r2, #28
    790c:	2100      	movs	r1, #0
    790e:	f004 ff61 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7912:	2701      	movs	r7, #1
    7914:	7027      	strb	r7, [r4, #0]
    7916:	ea5f 0008 	movs.w	r0, r8
    791a:	d009      	beq.n	7930 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x4c>
    791c:	2801      	cmp	r0, #1
    791e:	d00b      	beq.n	7938 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x54>
    7920:	2802      	cmp	r0, #2
    7922:	d02d      	beq.n	7980 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x9c>
    7924:	f1b8 0f06 	cmp.w	r8, #6
    7928:	d02c      	beq.n	7984 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa0>
    792a:	f240 217d 	movw	r1, #637	; 0x27d
    792e:	e049      	b.n	79c4 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xe0>
    7930:	7aa0      	ldrb	r0, [r4, #10]
    7932:	f040 0001 	orr.w	r0, r0, #1
    7936:	e026      	b.n	7986 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa2>
    7938:	7aa0      	ldrb	r0, [r4, #10]
    793a:	f040 0005 	orr.w	r0, r0, #5
    793e:	bf00      	nop
    7940:	f040 0010 	orr.w	r0, r0, #16
    7944:	72a0      	strb	r0, [r4, #10]
    7946:	1c63      	adds	r3, r4, #1
    7948:	1ca2      	adds	r2, r4, #2
    794a:	4648      	mov	r0, r9
    794c:	990a      	ldr	r1, [sp, #40]	; 0x28
    794e:	f006 ff62 	bl	e816 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    7952:	f884 a009 	strb.w	sl, [r4, #9]
    7956:	7327      	strb	r7, [r4, #12]
    7958:	2000      	movs	r0, #0
    795a:	7360      	strb	r0, [r4, #13]
    795c:	20ff      	movs	r0, #255	; 0xff
    795e:	73a0      	strb	r0, [r4, #14]
    7960:	7aa1      	ldrb	r1, [r4, #10]
    7962:	0749      	lsls	r1, r1, #29
    7964:	d518      	bpl.n	7998 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb4>
    7966:	f104 0014 	add.w	r0, r4, #20
    796a:	1e41      	subs	r1, r0, #1
    796c:	2d02      	cmp	r5, #2
    796e:	d00d      	beq.n	798c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7970:	2d03      	cmp	r5, #3
    7972:	d00b      	beq.n	798c <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xa8>
    7974:	f8d9 2008 	ldr.w	r2, [r9, #8]
    7978:	6813      	ldr	r3, [r2, #0]
    797a:	6003      	str	r3, [r0, #0]
    797c:	8892      	ldrh	r2, [r2, #4]
    797e:	e008      	b.n	7992 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xae>
    7980:	7aa0      	ldrb	r0, [r4, #10]
    7982:	e7dd      	b.n	7940 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    7984:	7aa0      	ldrb	r0, [r4, #10]
    7986:	f040 0002 	orr.w	r0, r0, #2
    798a:	e7d9      	b.n	7940 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0x5c>
    798c:	6832      	ldr	r2, [r6, #0]
    798e:	6002      	str	r2, [r0, #0]
    7990:	88b2      	ldrh	r2, [r6, #4]
    7992:	8082      	strh	r2, [r0, #4]
    7994:	700d      	strb	r5, [r1, #0]
    7996:	e000      	b.n	799a <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xb6>
    7998:	74e0      	strb	r0, [r4, #19]
    799a:	207f      	movs	r0, #127	; 0x7f
    799c:	76a0      	strb	r0, [r4, #26]
    799e:	f884 b01b 	strb.w	fp, [r4, #27]
    79a2:	f7fc feb9 	bl	4718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    79a6:	4604      	mov	r4, r0
    79a8:	f7fc febc 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    79ac:	2201      	movs	r2, #1
    79ae:	4621      	mov	r1, r4
    79b0:	f006 ff55 	bl	e85e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    79b4:	b120      	cbz	r0, 79c0 <sym_APQBQYVRLINLVCFXLBBEITGXGOI22AKEZA4TBXI+0xdc>
    79b6:	e8bd 5ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    79ba:	2005      	movs	r0, #5
    79bc:	f000 b8d0 	b.w	7b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    79c0:	f240 219d 	movw	r1, #669	; 0x29d
    79c4:	2033      	movs	r0, #51	; 0x33
    79c6:	f7fc fa7b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    79ca:	e8bd 9ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
	...

000079d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>:
    79d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    79d4:	4616      	mov	r6, r2
    79d6:	460c      	mov	r4, r1
    79d8:	4605      	mov	r5, r0
    79da:	f006 fbaa 	bl	e132 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>
    79de:	7460      	strb	r0, [r4, #17]
    79e0:	4628      	mov	r0, r5
    79e2:	f006 fb9d 	bl	e120 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>
    79e6:	74a0      	strb	r0, [r4, #18]
    79e8:	1cea      	adds	r2, r5, #3
    79ea:	4b14      	ldr	r3, [pc, #80]	; (7a3c <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x6c>)
    79ec:	1d90      	adds	r0, r2, #6
    79ee:	2100      	movs	r1, #0
    79f0:	2e07      	cmp	r6, #7
    79f2:	d21f      	bcs.n	7a34 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x64>
    79f4:	e8df f006 	tbb	[pc, r6]
    79f8:	1e110b04 	.word	0x1e110b04
    79fc:	00041e13 	.word	0x00041e13
    7a00:	781b      	ldrb	r3, [r3, #0]
    7a02:	e00d      	b.n	7a20 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    7a04:	60e0      	str	r0, [r4, #12]
    7a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7a0a:	60e1      	str	r1, [r4, #12]
    7a0c:	e7fb      	b.n	7a06 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x36>
    7a0e:	785b      	ldrb	r3, [r3, #1]
    7a10:	7063      	strb	r3, [r4, #1]
    7a12:	e9c4 2001 	strd	r2, r0, [r4, #4]
    7a16:	7421      	strb	r1, [r4, #16]
    7a18:	e7f7      	b.n	7a0a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    7a1a:	789b      	ldrb	r3, [r3, #2]
    7a1c:	e000      	b.n	7a20 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x50>
    7a1e:	78db      	ldrb	r3, [r3, #3]
    7a20:	7063      	strb	r3, [r4, #1]
    7a22:	e9c4 2101 	strd	r2, r1, [r4, #4]
    7a26:	786a      	ldrb	r2, [r5, #1]
    7a28:	1f92      	subs	r2, r2, #6
    7a2a:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
    7a2e:	7422      	strb	r2, [r4, #16]
    7a30:	d0eb      	beq.n	7a0a <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x3a>
    7a32:	e7e7      	b.n	7a04 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x34>
    7a34:	7061      	strb	r1, [r4, #1]
    7a36:	6061      	str	r1, [r4, #4]
    7a38:	60a1      	str	r1, [r4, #8]
    7a3a:	e7ec      	b.n	7a16 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I+0x46>
    7a3c:	0000fca9 	.word	0x0000fca9

00007a40 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>:
    7a40:	b570      	push	{r4, r5, r6, lr}
    7a42:	f003 ff5d 	bl	b900 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    7a46:	4c0e      	ldr	r4, [pc, #56]	; (7a80 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x40>)
    7a48:	4606      	mov	r6, r0
    7a4a:	7860      	ldrb	r0, [r4, #1]
    7a4c:	b170      	cbz	r0, 7a6c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7a4e:	e9d4 5101 	ldrd	r5, r1, [r4, #4]
    7a52:	4632      	mov	r2, r6
    7a54:	4628      	mov	r0, r5
    7a56:	f006 f864 	bl	db22 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>
    7a5a:	6060      	str	r0, [r4, #4]
    7a5c:	42a8      	cmp	r0, r5
    7a5e:	d005      	beq.n	7a6c <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x2c>
    7a60:	68e1      	ldr	r1, [r4, #12]
    7a62:	1b40      	subs	r0, r0, r5
    7a64:	4408      	add	r0, r1
    7a66:	60e0      	str	r0, [r4, #12]
    7a68:	f7fa fe16 	bl	2698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7a6c:	6860      	ldr	r0, [r4, #4]
    7a6e:	42b0      	cmp	r0, r6
    7a70:	d301      	bcc.n	7a76 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x36>
    7a72:	7820      	ldrb	r0, [r4, #0]
    7a74:	b108      	cbz	r0, 7a7a <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI+0x3a>
    7a76:	2000      	movs	r0, #0
    7a78:	bd70      	pop	{r4, r5, r6, pc}
    7a7a:	2001      	movs	r0, #1
    7a7c:	bd70      	pop	{r4, r5, r6, pc}
    7a7e:	0000      	.short	0x0000
    7a80:	20001280 	.word	0x20001280

00007a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>:
    7a84:	b510      	push	{r4, lr}
    7a86:	2905      	cmp	r1, #5
    7a88:	d22d      	bcs.n	7ae6 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x62>
    7a8a:	e8df f001 	tbb	[pc, r1]
    7a8e:	0a05      	.short	0x0a05
    7a90:	00280e03 	.word	0x00280e03
    7a94:	2100      	movs	r1, #0
    7a96:	e000      	b.n	7a9a <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x16>
    7a98:	2101      	movs	r1, #1
    7a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7a9e:	f000 babb 	b.w	8018 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18>
    7aa2:	2103      	movs	r1, #3
    7aa4:	f880 1120 	strb.w	r1, [r0, #288]	; 0x120
    7aa8:	bd10      	pop	{r4, pc}
    7aaa:	4911      	ldr	r1, [pc, #68]	; (7af0 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI+0x6c>)
    7aac:	4604      	mov	r4, r0
    7aae:	68c0      	ldr	r0, [r0, #12]
    7ab0:	6008      	str	r0, [r1, #0]
    7ab2:	f8d4 014c 	ldr.w	r0, [r4, #332]	; 0x14c
    7ab6:	6220      	str	r0, [r4, #32]
    7ab8:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    7abc:	83a0      	strh	r0, [r4, #28]
    7abe:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    7ac2:	60e0      	str	r0, [r4, #12]
    7ac4:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    7ac8:	82a0      	strh	r0, [r4, #20]
    7aca:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    7ace:	82e0      	strh	r0, [r4, #22]
    7ad0:	4620      	mov	r0, r4
    7ad2:	f006 fefe 	bl	e8d2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    7ad6:	2002      	movs	r0, #2
    7ad8:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    7adc:	bd10      	pop	{r4, pc}
    7ade:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ae2:	f006 bef6 	b.w	e8d2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    7ae6:	f640 3158 	movw	r1, #2904	; 0xb58
    7aea:	2035      	movs	r0, #53	; 0x35
    7aec:	f7fc f9e8 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7af0:	20000114 	.word	0x20000114

00007af4 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI>:
    7af4:	b570      	push	{r4, r5, r6, lr}
    7af6:	4606      	mov	r6, r0
    7af8:	f004 fc7d 	bl	c3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    7afc:	4c17      	ldr	r4, [pc, #92]	; (7b5c <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x68>)
    7afe:	4601      	mov	r1, r0
    7b00:	6920      	ldr	r0, [r4, #16]
    7b02:	f7f9 fe07 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7b06:	4605      	mov	r5, r0
    7b08:	b156      	cbz	r6, 7b20 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x2c>
    7b0a:	2e03      	cmp	r6, #3
    7b0c:	d00d      	beq.n	7b2a <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x36>
    7b0e:	2e04      	cmp	r6, #4
    7b10:	d00e      	beq.n	7b30 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x3c>
    7b12:	2e06      	cmp	r6, #6
    7b14:	d01d      	beq.n	7b52 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5e>
    7b16:	f44f 61b2 	mov.w	r1, #1424	; 0x590
    7b1a:	2035      	movs	r0, #53	; 0x35
    7b1c:	f7fc f9d0 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7b20:	2001      	movs	r0, #1
    7b22:	f006 feba 	bl	e89a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    7b26:	3098      	adds	r0, #152	; 0x98
    7b28:	e004      	b.n	7b34 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    7b2a:	f44f 7057 	mov.w	r0, #860	; 0x35c
    7b2e:	e001      	b.n	7b34 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x40>
    7b30:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    7b34:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7b36:	4405      	add	r5, r0
    7b38:	39f1      	subs	r1, #241	; 0xf1
    7b3a:	428d      	cmp	r5, r1
    7b3c:	d307      	bcc.n	7b4e <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x5a>
    7b3e:	2600      	movs	r6, #0
    7b40:	f000 fd36 	bl	85b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b0>
    7b44:	b140      	cbz	r0, 7b58 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    7b46:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7b48:	38f1      	subs	r0, #241	; 0xf1
    7b4a:	4285      	cmp	r5, r0
    7b4c:	d203      	bcs.n	7b56 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x62>
    7b4e:	2601      	movs	r6, #1
    7b50:	e002      	b.n	7b58 <sym_FWBDPDM7VY7WBRWZ3WP5JROXJKUZAWVORDIS6GI+0x64>
    7b52:	2001      	movs	r0, #1
    7b54:	bd70      	pop	{r4, r5, r6, pc}
    7b56:	2600      	movs	r6, #0
    7b58:	4630      	mov	r0, r6
    7b5a:	bd70      	pop	{r4, r5, r6, pc}
    7b5c:	20001290 	.word	0x20001290

00007b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>:
    7b60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7b62:	2501      	movs	r5, #1
    7b64:	4c24      	ldr	r4, [pc, #144]	; (7bf8 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x98>)
    7b66:	2806      	cmp	r0, #6
    7b68:	d243      	bcs.n	7bf2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x92>
    7b6a:	e8df f000 	tbb	[pc, r0]
    7b6e:	1903      	.short	0x1903
    7b70:	3e232319 	.word	0x3e232319
    7b74:	f7fe fae4 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7b78:	7860      	ldrb	r0, [r4, #1]
    7b7a:	bb88      	cbnz	r0, 7be0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7b7c:	2200      	movs	r2, #0
    7b7e:	4611      	mov	r1, r2
    7b80:	4668      	mov	r0, sp
    7b82:	f000 fd5f 	bl	8644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x644>
    7b86:	b148      	cbz	r0, 7b9c <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x3c>
    7b88:	f7fe fd32 	bl	65f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7b8c:	7800      	ldrb	r0, [r0, #0]
    7b8e:	4669      	mov	r1, sp
    7b90:	f006 feb1 	bl	e8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7b94:	bb20      	cbnz	r0, 7be0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7b96:	f640 2163 	movw	r1, #2659	; 0xa63
    7b9a:	e01c      	b.n	7bd6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7b9c:	70e5      	strb	r5, [r4, #3]
    7b9e:	e020      	b.n	7be2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7ba0:	2802      	cmp	r0, #2
    7ba2:	d005      	beq.n	7bb0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x50>
    7ba4:	2000      	movs	r0, #0
    7ba6:	b004      	add	sp, #16
    7ba8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7bac:	f000 ba50 	b.w	8050 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50>
    7bb0:	2001      	movs	r0, #1
    7bb2:	e7f8      	b.n	7ba6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x46>
    7bb4:	2804      	cmp	r0, #4
    7bb6:	d011      	beq.n	7bdc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x7c>
    7bb8:	f05f 0600 	movs.w	r6, #0
    7bbc:	f7fe fac0 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7bc0:	7725      	strb	r5, [r4, #28]
    7bc2:	7766      	strb	r6, [r4, #29]
    7bc4:	69a1      	ldr	r1, [r4, #24]
    7bc6:	2000      	movs	r0, #0
    7bc8:	f881 0120 	strb.w	r0, [r1, #288]	; 0x120
    7bcc:	f000 faca 	bl	8164 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x164>
    7bd0:	b130      	cbz	r0, 7be0 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x80>
    7bd2:	f640 3118 	movw	r1, #2840	; 0xb18
    7bd6:	2035      	movs	r0, #53	; 0x35
    7bd8:	f7fc f972 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7bdc:	2601      	movs	r6, #1
    7bde:	e7ed      	b.n	7bbc <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x5c>
    7be0:	e7ff      	b.n	7be2 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x82>
    7be2:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7be6:	f000 baad 	b.w	8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
    7bea:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7bee:	f7fe baa7 	b.w	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    7bf2:	f640 31d4 	movw	r1, #3028	; 0xbd4
    7bf6:	e7ee      	b.n	7bd6 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q+0x76>
    7bf8:	20001290 	.word	0x20001290

00007bfc <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>:
    7bfc:	b508      	push	{r3, lr}
    7bfe:	2244      	movs	r2, #68	; 0x44
    7c00:	2100      	movs	r1, #0
    7c02:	480c      	ldr	r0, [pc, #48]	; (7c34 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7c04:	f004 fde6 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    7c08:	f7fe fcf2 	bl	65f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7c0c:	2120      	movs	r1, #32
    7c0e:	7001      	strb	r1, [r0, #0]
    7c10:	4808      	ldr	r0, [pc, #32]	; (7c34 <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI+0x38>)
    7c12:	3810      	subs	r0, #16
    7c14:	2100      	movs	r1, #0
    7c16:	6001      	str	r1, [r0, #0]
    7c18:	6041      	str	r1, [r0, #4]
    7c1a:	6081      	str	r1, [r0, #8]
    7c1c:	60c1      	str	r1, [r0, #12]
    7c1e:	f000 f80b 	bl	7c38 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    7c22:	f242 7010 	movw	r0, #10000	; 0x2710
    7c26:	9000      	str	r0, [sp, #0]
    7c28:	2201      	movs	r2, #1
    7c2a:	4669      	mov	r1, sp
    7c2c:	1080      	asrs	r0, r0, #2
    7c2e:	f000 fad7 	bl	81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
    7c32:	bd08      	pop	{r3, pc}
    7c34:	20001290 	.word	0x20001290

00007c38 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>:
    7c38:	4804      	ldr	r0, [pc, #16]	; (7c4c <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0x14>)
    7c3a:	b510      	push	{r4, lr}
    7c3c:	7800      	ldrb	r0, [r0, #0]
    7c3e:	b108      	cbz	r0, 7c44 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY+0xc>
    7c40:	f000 f8a8 	bl	7d94 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    7c44:	f000 f8fe 	bl	7e44 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x38>
    7c48:	2000      	movs	r0, #0
    7c4a:	bd10      	pop	{r4, pc}
    7c4c:	20001290 	.word	0x20001290

00007c50 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>:
    7c50:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    7c54:	4c1e      	ldr	r4, [pc, #120]	; (7cd0 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x80>)
    7c56:	4607      	mov	r7, r0
    7c58:	460e      	mov	r6, r1
    7c5a:	7820      	ldrb	r0, [r4, #0]
    7c5c:	b118      	cbz	r0, 7c66 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x16>
    7c5e:	200c      	movs	r0, #12
    7c60:	b004      	add	sp, #16
    7c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7c66:	f7fe fcc3 	bl	65f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7c6a:	4605      	mov	r5, r0
    7c6c:	61a7      	str	r7, [r4, #24]
    7c6e:	f897 0120 	ldrb.w	r0, [r7, #288]	; 0x120
    7c72:	b110      	cbz	r0, 7c7a <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x2a>
    7c74:	f44f 6184 	mov.w	r1, #1056	; 0x420
    7c78:	e026      	b.n	7cc8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7c7a:	2005      	movs	r0, #5
    7c7c:	7020      	strb	r0, [r4, #0]
    7c7e:	2000      	movs	r0, #0
    7c80:	7060      	strb	r0, [r4, #1]
    7c82:	7720      	strb	r0, [r4, #28]
    7c84:	4630      	mov	r0, r6
    7c86:	f000 f911 	bl	7eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    7c8a:	f000 fc41 	bl	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
    7c8e:	6320      	str	r0, [r4, #48]	; 0x30
    7c90:	2100      	movs	r1, #0
    7c92:	4810      	ldr	r0, [pc, #64]	; (7cd4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x84>)
    7c94:	f7fa fbf6 	bl	2484 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7c98:	7028      	strb	r0, [r5, #0]
    7c9a:	2820      	cmp	r0, #32
    7c9c:	d00c      	beq.n	7cb8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x68>
    7c9e:	2200      	movs	r2, #0
    7ca0:	2101      	movs	r1, #1
    7ca2:	4668      	mov	r0, sp
    7ca4:	f000 fcce 	bl	8644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x644>
    7ca8:	b148      	cbz	r0, 7cbe <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x6e>
    7caa:	7828      	ldrb	r0, [r5, #0]
    7cac:	4669      	mov	r1, sp
    7cae:	f006 fe22 	bl	e8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7cb2:	b138      	cbz	r0, 7cc4 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x74>
    7cb4:	2000      	movs	r0, #0
    7cb6:	e7d3      	b.n	7c60 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x10>
    7cb8:	f240 412f 	movw	r1, #1071	; 0x42f
    7cbc:	e004      	b.n	7cc8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7cbe:	f240 4132 	movw	r1, #1074	; 0x432
    7cc2:	e001      	b.n	7cc8 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI+0x78>
    7cc4:	f240 4133 	movw	r1, #1075	; 0x433
    7cc8:	2035      	movs	r0, #53	; 0x35
    7cca:	f7fc f8f9 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7cce:	0000      	.short	0x0000
    7cd0:	20001290 	.word	0x20001290
    7cd4:	00007ecd 	.word	0x00007ecd

00007cd8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>:
    7cd8:	4902      	ldr	r1, [pc, #8]	; (7ce4 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI+0xc>)
    7cda:	6989      	ldr	r1, [r1, #24]
    7cdc:	6001      	str	r1, [r0, #0]
    7cde:	f000 b859 	b.w	7d94 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    7ce2:	0000      	.short	0x0000
    7ce4:	20001290 	.word	0x20001290

00007ce8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>:
    7ce8:	4901      	ldr	r1, [pc, #4]	; (7cf0 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI+0x8>)
    7cea:	7048      	strb	r0, [r1, #1]
    7cec:	4770      	bx	lr
    7cee:	0000      	.short	0x0000
    7cf0:	20001280 	.word	0x20001280

00007cf4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>:
    7cf4:	b570      	push	{r4, r5, r6, lr}
    7cf6:	4605      	mov	r5, r0
    7cf8:	4907      	ldr	r1, [pc, #28]	; (7d18 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI+0x24>)
    7cfa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    7cfe:	fbb1 f4f0 	udiv	r4, r1, r0
    7d02:	f006 fe48 	bl	e996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    7d06:	1901      	adds	r1, r0, r4
    7d08:	4628      	mov	r0, r5
    7d0a:	f201 1137 	addw	r1, r1, #311	; 0x137
    7d0e:	f006 fbc6 	bl	e49e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>
    7d12:	b280      	uxth	r0, r0
    7d14:	bd70      	pop	{r4, r5, r6, pc}
    7d16:	0000      	.short	0x0000
    7d18:	00012105 	.word	0x00012105

00007d1c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>:
    7d1c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7d1e:	4606      	mov	r6, r0
    7d20:	b111      	cbz	r1, 7d28 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0xc>
    7d22:	2011      	movs	r0, #17
    7d24:	b004      	add	sp, #16
    7d26:	bd70      	pop	{r4, r5, r6, pc}
    7d28:	4c18      	ldr	r4, [pc, #96]	; (7d8c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x70>)
    7d2a:	7820      	ldrb	r0, [r4, #0]
    7d2c:	b108      	cbz	r0, 7d32 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x16>
    7d2e:	200c      	movs	r0, #12
    7d30:	e7f8      	b.n	7d24 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7d32:	f7fe fc5d 	bl	65f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7d36:	4605      	mov	r5, r0
    7d38:	2000      	movs	r0, #0
    7d3a:	7060      	strb	r0, [r4, #1]
    7d3c:	2004      	movs	r0, #4
    7d3e:	7020      	strb	r0, [r4, #0]
    7d40:	4630      	mov	r0, r6
    7d42:	f000 f8b3 	bl	7eac <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xa0>
    7d46:	f000 fbe3 	bl	8510 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x510>
    7d4a:	6320      	str	r0, [r4, #48]	; 0x30
    7d4c:	2100      	movs	r1, #0
    7d4e:	4810      	ldr	r0, [pc, #64]	; (7d90 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x74>)
    7d50:	f7fa fb98 	bl	2484 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    7d54:	7028      	strb	r0, [r5, #0]
    7d56:	2820      	cmp	r0, #32
    7d58:	d00c      	beq.n	7d74 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x58>
    7d5a:	2200      	movs	r2, #0
    7d5c:	2101      	movs	r1, #1
    7d5e:	4668      	mov	r0, sp
    7d60:	f000 fc70 	bl	8644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x644>
    7d64:	b148      	cbz	r0, 7d7a <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x5e>
    7d66:	7828      	ldrb	r0, [r5, #0]
    7d68:	4669      	mov	r1, sp
    7d6a:	f006 fdc4 	bl	e8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7d6e:	b138      	cbz	r0, 7d80 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x64>
    7d70:	2000      	movs	r0, #0
    7d72:	e7d7      	b.n	7d24 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x8>
    7d74:	f240 4196 	movw	r1, #1174	; 0x496
    7d78:	e004      	b.n	7d84 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7d7a:	f44f 6193 	mov.w	r1, #1176	; 0x498
    7d7e:	e001      	b.n	7d84 <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA+0x68>
    7d80:	f240 4199 	movw	r1, #1177	; 0x499
    7d84:	2035      	movs	r0, #53	; 0x35
    7d86:	f7fc f89b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7d8a:	0000      	.short	0x0000
    7d8c:	20001290 	.word	0x20001290
    7d90:	00007ecd 	.word	0x00007ecd

00007d94 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>:
    7d94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7d98:	2700      	movs	r7, #0
    7d9a:	f7fe fc29 	bl	65f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7d9e:	4c17      	ldr	r4, [pc, #92]	; (7dfc <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x68>)
    7da0:	4605      	mov	r5, r0
    7da2:	7820      	ldrb	r0, [r4, #0]
    7da4:	2804      	cmp	r0, #4
    7da6:	d005      	beq.n	7db4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7da8:	7820      	ldrb	r0, [r4, #0]
    7daa:	2805      	cmp	r0, #5
    7dac:	d002      	beq.n	7db4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x20>
    7dae:	200c      	movs	r0, #12
    7db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7db4:	2001      	movs	r0, #1
    7db6:	7060      	strb	r0, [r4, #1]
    7db8:	7b20      	ldrb	r0, [r4, #12]
    7dba:	b160      	cbz	r0, 7dd6 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x42>
    7dbc:	f3ef 8610 	mrs	r6, PRIMASK
    7dc0:	b672      	cpsid	i
    7dc2:	7b20      	ldrb	r0, [r4, #12]
    7dc4:	b128      	cbz	r0, 7dd2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7dc6:	7b60      	ldrb	r0, [r4, #13]
    7dc8:	b118      	cbz	r0, 7dd2 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x3e>
    7dca:	f7fe fde3 	bl	6994 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7dce:	f000 f9b9 	bl	8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
    7dd2:	b126      	cbz	r6, 7dde <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4a>
    7dd4:	e004      	b.n	7de0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7dd6:	7828      	ldrb	r0, [r5, #0]
    7dd8:	f7fa f90a 	bl	1ff0 <sym_R4Y3KWNYX4PGGLE5X2L7DXMWMJUY3DOXD7LSUKY>
    7ddc:	e000      	b.n	7de0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x4c>
    7dde:	b662      	cpsie	i
    7de0:	7828      	ldrb	r0, [r5, #0]
    7de2:	f7fa fa43 	bl	226c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7de6:	f000 fd5d 	bl	88a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a4>
    7dea:	2000      	movs	r0, #0
    7dec:	7060      	strb	r0, [r4, #1]
    7dee:	7f20      	ldrb	r0, [r4, #28]
    7df0:	b100      	cbz	r0, 7df4 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x60>
    7df2:	270c      	movs	r7, #12
    7df4:	f000 fd80 	bl	88f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8f8>
    7df8:	4638      	mov	r0, r7
    7dfa:	e7d9      	b.n	7db0 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ+0x1c>
    7dfc:	20001290 	.word	0x20001290

00007e00 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>:
    7e00:	4801      	ldr	r0, [pc, #4]	; (7e08 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ+0x8>)
    7e02:	7800      	ldrb	r0, [r0, #0]
    7e04:	4770      	bx	lr
    7e06:	0000      	.short	0x0000
    7e08:	20001290 	.word	0x20001290

00007e0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>:
    7e0c:	490c      	ldr	r1, [pc, #48]	; (7e40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x34>)
    7e0e:	b508      	push	{r3, lr}
    7e10:	7809      	ldrb	r1, [r1, #0]
    7e12:	b121      	cbz	r1, 7e1e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x12>
    7e14:	f240 414f 	movw	r1, #1103	; 0x44f
    7e18:	2035      	movs	r0, #53	; 0x35
    7e1a:	f7fc f851 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e1e:	2300      	movs	r3, #0
    7e20:	9300      	str	r3, [sp, #0]
    7e22:	7801      	ldrb	r1, [r0, #0]
    7e24:	461a      	mov	r2, r3
    7e26:	07c9      	lsls	r1, r1, #31
    7e28:	d003      	beq.n	7e32 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x26>
    7e2a:	e9d0 3001 	ldrd	r3, r0, [r0, #4]
    7e2e:	2201      	movs	r2, #1
    7e30:	9000      	str	r0, [sp, #0]
    7e32:	4669      	mov	r1, sp
    7e34:	4618      	mov	r0, r3
    7e36:	f000 f9d3 	bl	81e0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1e0>
    7e3a:	2000      	movs	r0, #0
    7e3c:	bd08      	pop	{r3, pc}
    7e3e:	0000      	.short	0x0000
    7e40:	20001290 	.word	0x20001290
    7e44:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    7e46:	4c18      	ldr	r4, [pc, #96]	; (7ea8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x9c>)
    7e48:	2001      	movs	r0, #1
    7e4a:	7020      	strb	r0, [r4, #0]
    7e4c:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7e50:	e00b      	b.n	7e6a <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x5e>
    7e52:	2100      	movs	r1, #0
    7e54:	f005 fce5 	bl	d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    7e58:	0006      	movs	r6, r0
    7e5a:	d010      	beq.n	7e7e <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x72>
    7e5c:	f896 0121 	ldrb.w	r0, [r6, #289]	; 0x121
    7e60:	f7fa fa04 	bl	226c <sym_DQFOGVCNU4NTOMWSL3IYDNCMIXT2LT7SZHL5IHI>
    7e64:	4630      	mov	r0, r6
    7e66:	f006 fd5e 	bl	e926 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    7e6a:	4669      	mov	r1, sp
    7e6c:	2000      	movs	r0, #0
    7e6e:	f005 fce1 	bl	d834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    7e72:	b180      	cbz	r0, 7e96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e74:	f44f 710f 	mov.w	r1, #572	; 0x23c
    7e78:	2035      	movs	r0, #53	; 0x35
    7e7a:	f7fc f821 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7e7e:	f240 5141 	movw	r1, #1345	; 0x541
    7e82:	e7f9      	b.n	7e78 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x6c>
    7e84:	9802      	ldr	r0, [sp, #8]
    7e86:	b130      	cbz	r0, 7e96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e88:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    7e8c:	b119      	cbz	r1, 7e96 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x8a>
    7e8e:	8800      	ldrh	r0, [r0, #0]
    7e90:	42a8      	cmp	r0, r5
    7e92:	d1de      	bne.n	7e52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x46>
    7e94:	e004      	b.n	7ea0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x94>
    7e96:	4668      	mov	r0, sp
    7e98:	f7fc fa42 	bl	4320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    7e9c:	2800      	cmp	r0, #0
    7e9e:	d0f1      	beq.n	7e84 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x78>
    7ea0:	2000      	movs	r0, #0
    7ea2:	7020      	strb	r0, [r4, #0]
    7ea4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    7ea6:	0000      	.short	0x0000
    7ea8:	20001280 	.word	0x20001280
    7eac:	4906      	ldr	r1, [pc, #24]	; (7ec8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xbc>)
    7eae:	b140      	cbz	r0, 7ec2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xb6>
    7eb0:	2201      	movs	r2, #1
    7eb2:	708a      	strb	r2, [r1, #2]
    7eb4:	f242 7210 	movw	r2, #10000	; 0x2710
    7eb8:	4350      	muls	r0, r2
    7eba:	684a      	ldr	r2, [r1, #4]
    7ebc:	4410      	add	r0, r2
    7ebe:	6208      	str	r0, [r1, #32]
    7ec0:	4770      	bx	lr
    7ec2:	2000      	movs	r0, #0
    7ec4:	7088      	strb	r0, [r1, #2]
    7ec6:	4770      	bx	lr
    7ec8:	20001290 	.word	0x20001290
    7ecc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    7ece:	460d      	mov	r5, r1
    7ed0:	2001      	movs	r0, #1
    7ed2:	f006 fccb 	bl	e86c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7ed6:	b2c4      	uxtb	r4, r0
    7ed8:	200b      	movs	r0, #11
    7eda:	f006 fcc7 	bl	e86c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    7ede:	b2c0      	uxtb	r0, r0
    7ee0:	4284      	cmp	r4, r0
    7ee2:	d002      	beq.n	7eea <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0xde>
    7ee4:	f240 21c5 	movw	r1, #709	; 0x2c5
    7ee8:	e073      	b.n	7fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7eea:	f7fe fb81 	bl	65f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    7eee:	2601      	movs	r6, #1
    7ef0:	4c3b      	ldr	r4, [pc, #236]	; (7fe0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7ef2:	2d09      	cmp	r5, #9
    7ef4:	d270      	bcs.n	7fd8 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1cc>
    7ef6:	e8df f005 	tbb	[pc, r5]
    7efa:	3605      	.short	0x3605
    7efc:	6f464a4a 	.word	0x6f464a4a
    7f00:	006a665e 	.word	0x006a665e
    7f04:	7326      	strb	r6, [r4, #12]
    7f06:	7861      	ldrb	r1, [r4, #1]
    7f08:	2900      	cmp	r1, #0
    7f0a:	d12b      	bne.n	7f64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7f0c:	7800      	ldrb	r0, [r0, #0]
    7f0e:	f7f9 fc25 	bl	175c <sym_W447CEMR6K6QRW3N63PRPIR7NK6ENOSBFXLCPRQ>
    7f12:	4605      	mov	r5, r0
    7f14:	6120      	str	r0, [r4, #16]
    7f16:	f000 fd09 	bl	892c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92c>
    7f1a:	b118      	cbz	r0, 7f24 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x118>
    7f1c:	2000      	movs	r0, #0
    7f1e:	f88d 0004 	strb.w	r0, [sp, #4]
    7f22:	e001      	b.n	7f28 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x11c>
    7f24:	f88d 6004 	strb.w	r6, [sp, #4]
    7f28:	4629      	mov	r1, r5
    7f2a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7f2c:	f7f9 fbf2 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    7f30:	6861      	ldr	r1, [r4, #4]
    7f32:	fbb0 f2f1 	udiv	r2, r0, r1
    7f36:	fb01 0012 	mls	r0, r1, r2, r0
    7f3a:	b150      	cbz	r0, 7f52 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x146>
    7f3c:	f05f 0000 	movs.w	r0, #0
    7f40:	f88d 0005 	strb.w	r0, [sp, #5]
    7f44:	4668      	mov	r0, sp
    7f46:	f7fe fc8d 	bl	6864 <sym_MVPTAXVMKKJKZSZY7URPZXTLDWW3HFU23KIS2JY>
    7f4a:	b120      	cbz	r0, 7f56 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x14a>
    7f4c:	f240 21ff 	movw	r1, #767	; 0x2ff
    7f50:	e03f      	b.n	7fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f52:	2001      	movs	r0, #1
    7f54:	e7f4      	b.n	7f40 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x134>
    7f56:	4922      	ldr	r1, [pc, #136]	; (7fe0 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d4>)
    7f58:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7f5a:	3910      	subs	r1, #16
    7f5c:	38e0      	subs	r0, #224	; 0xe0
    7f5e:	60c8      	str	r0, [r1, #12]
    7f60:	f7fa fb9a 	bl	2698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    7f64:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7f66:	7860      	ldrb	r0, [r4, #1]
    7f68:	b128      	cbz	r0, 7f76 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x16a>
    7f6a:	f7fe fd13 	bl	6994 <sym_MTC4J2MZE6VAAPCSLUXPAJHBAOGCFLQEYGARL6I>
    7f6e:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f72:	f000 b8e7 	b.w	8144 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x144>
    7f76:	7366      	strb	r6, [r4, #13]
    7f78:	f7fe fd06 	bl	6988 <sym_KTO2H4NDIYSSQUUKE3NMMN4YAJAKAHZE3TQVHOY>
    7f7c:	2800      	cmp	r0, #0
    7f7e:	d0f1      	beq.n	7f64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7f80:	f240 3112 	movw	r1, #786	; 0x312
    7f84:	e025      	b.n	7fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7f86:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7f8a:	f003 bea9 	b.w	bce0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    7f8e:	7805      	ldrb	r5, [r0, #0]
    7f90:	2201      	movs	r2, #1
    7f92:	2100      	movs	r1, #0
    7f94:	4668      	mov	r0, sp
    7f96:	f000 fb55 	bl	8644 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x644>
    7f9a:	b140      	cbz	r0, 7fae <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a2>
    7f9c:	4669      	mov	r1, sp
    7f9e:	4628      	mov	r0, r5
    7fa0:	f006 fca9 	bl	e8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    7fa4:	2800      	cmp	r0, #0
    7fa6:	d1dd      	bne.n	7f64 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x158>
    7fa8:	f640 217f 	movw	r1, #2687	; 0xa7f
    7fac:	e011      	b.n	7fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7fae:	70e6      	strb	r6, [r4, #3]
    7fb0:	f000 f818 	bl	7fe4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7fb4:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
    7fb6:	f000 fafb 	bl	85b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5b0>
    7fba:	2800      	cmp	r0, #0
    7fbc:	d1fa      	bne.n	7fb4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1a8>
    7fbe:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7fc2:	f006 bb3c 	b.w	e63e <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>
    7fc6:	e8bd 407f 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, lr}
    7fca:	f000 b80b 	b.w	7fe4 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1d8>
    7fce:	f240 3136 	movw	r1, #822	; 0x336
    7fd2:	2035      	movs	r0, #53	; 0x35
    7fd4:	f7fb ff74 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    7fd8:	f240 313a 	movw	r1, #826	; 0x33a
    7fdc:	e7f9      	b.n	7fd2 <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1c6>
    7fde:	0000      	.short	0x0000
    7fe0:	20001290 	.word	0x20001290
    7fe4:	b510      	push	{r4, lr}
    7fe6:	4c0b      	ldr	r4, [pc, #44]	; (8014 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x14>)
    7fe8:	7820      	ldrb	r0, [r4, #0]
    7fea:	b130      	cbz	r0, 7ffa <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ+0x1ee>
    7fec:	f000 fc5a 	bl	88a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a4>
    7ff0:	78e0      	ldrb	r0, [r4, #3]
    7ff2:	b158      	cbz	r0, 800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7ff4:	7f20      	ldrb	r0, [r4, #28]
    7ff6:	b128      	cbz	r0, 8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
    7ff8:	e008      	b.n	800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>
    7ffa:	f240 21b1 	movw	r1, #689	; 0x2b1
    7ffe:	2035      	movs	r0, #53	; 0x35
    8000:	f7fb ff5e 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8004:	f7fe fcd8 	bl	69b8 <sym_SPOA75Q2J6LVU6OSBDIHNSVXF4UIA7YYLMJNW6Y>
    8008:	f7fe f89a 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    800c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8010:	f000 bc72 	b.w	88f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8f8>
    8014:	20001290 	.word	0x20001290
    8018:	b510      	push	{r4, lr}
    801a:	4604      	mov	r4, r0
    801c:	2901      	cmp	r1, #1
    801e:	d102      	bne.n	8026 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x26>
    8020:	480a      	ldr	r0, [pc, #40]	; (804c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4c>)
    8022:	7800      	ldrb	r0, [r0, #0]
    8024:	b140      	cbz	r0, 8038 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38>
    8026:	2004      	movs	r0, #4
    8028:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    802c:	f003 fca4 	bl	b978 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8030:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8034:	f7fa ba4e 	b.w	24d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8038:	2200      	movs	r2, #0
    803a:	2101      	movs	r1, #1
    803c:	4620      	mov	r0, r4
    803e:	f006 fc8a 	bl	e956 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    8042:	f834 0f7c 	ldrh.w	r0, [r4, #124]!
    8046:	1c40      	adds	r0, r0, #1
    8048:	8020      	strh	r0, [r4, #0]
    804a:	e7ef      	b.n	802c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c>
    804c:	20001280 	.word	0x20001280
    8050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8054:	4c39      	ldr	r4, [pc, #228]	; (813c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x13c>)
    8056:	4682      	mov	sl, r0
    8058:	6926      	ldr	r6, [r4, #16]
    805a:	f003 fc51 	bl	b900 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>
    805e:	4605      	mov	r5, r0
    8060:	69a0      	ldr	r0, [r4, #24]
    8062:	2201      	movs	r2, #1
    8064:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    8068:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
    806c:	3062      	adds	r0, #98	; 0x62
    806e:	2101      	movs	r1, #1
    8070:	7281      	strb	r1, [r0, #10]
    8072:	69a0      	ldr	r0, [r4, #24]
    8074:	2100      	movs	r1, #0
    8076:	302c      	adds	r0, #44	; 0x2c
    8078:	f006 f9f8 	bl	e46c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>
    807c:	2101      	movs	r1, #1
    807e:	2000      	movs	r0, #0
    8080:	f006 fc95 	bl	e9ae <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    8084:	69a7      	ldr	r7, [r4, #24]
    8086:	1971      	adds	r1, r6, r5
    8088:	4408      	add	r0, r1
    808a:	f200 49af 	addw	r9, r0, #1199	; 0x4af
    808e:	f8d7 800c 	ldr.w	r8, [r7, #12]
    8092:	f002 fb67 	bl	a764 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>
    8096:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    809a:	4288      	cmp	r0, r1
    809c:	d00a      	beq.n	80b4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb4>
    809e:	464a      	mov	r2, r9
    80a0:	4641      	mov	r1, r8
    80a2:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    80a6:	f006 fdb0 	bl	ec0a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    80aa:	4540      	cmp	r0, r8
    80ac:	d903      	bls.n	80b6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xb6>
    80ae:	f240 51f6 	movw	r1, #1526	; 0x5f6
    80b2:	e022      	b.n	80fa <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xfa>
    80b4:	2000      	movs	r0, #0
    80b6:	4922      	ldr	r1, [pc, #136]	; (8140 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x140>)
    80b8:	4607      	mov	r7, r0
    80ba:	6849      	ldr	r1, [r1, #4]
    80bc:	4288      	cmp	r0, r1
    80be:	69a0      	ldr	r0, [r4, #24]
    80c0:	68c1      	ldr	r1, [r0, #12]
    80c2:	d202      	bcs.n	80ca <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xca>
    80c4:	440f      	add	r7, r1
    80c6:	6201      	str	r1, [r0, #32]
    80c8:	e008      	b.n	80dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xdc>
    80ca:	4638      	mov	r0, r7
    80cc:	f005 fee5 	bl	de9a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    80d0:	69a1      	ldr	r1, [r4, #24]
    80d2:	68c9      	ldr	r1, [r1, #12]
    80d4:	f005 fedd 	bl	de92 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>
    80d8:	69a1      	ldr	r1, [r4, #24]
    80da:	6208      	str	r0, [r1, #32]
    80dc:	69a0      	ldr	r0, [r4, #24]
    80de:	68c1      	ldr	r1, [r0, #12]
    80e0:	2005      	movs	r0, #5
    80e2:	f005 fee0 	bl	dea6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    80e6:	69a1      	ldr	r1, [r4, #24]
    80e8:	b280      	uxth	r0, r0
    80ea:	8388      	strh	r0, [r1, #28]
    80ec:	69a1      	ldr	r1, [r4, #24]
    80ee:	6a09      	ldr	r1, [r1, #32]
    80f0:	1a79      	subs	r1, r7, r1
    80f2:	4288      	cmp	r0, r1
    80f4:	d804      	bhi.n	8100 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x100>
    80f6:	f640 21ee 	movw	r1, #2798	; 0xaee
    80fa:	2035      	movs	r0, #53	; 0x35
    80fc:	f7fb fee0 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8100:	2101      	movs	r1, #1
    8102:	4650      	mov	r0, sl
    8104:	f006 fc53 	bl	e9ae <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x11a>
    8108:	4428      	add	r0, r5
    810a:	19c5      	adds	r5, r0, r7
    810c:	2101      	movs	r1, #1
    810e:	4650      	mov	r0, sl
    8110:	f005 fdf5 	bl	dcfe <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>
    8114:	4405      	add	r5, r0
    8116:	2001      	movs	r0, #1
    8118:	f007 fd0d 	bl	fb36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    811c:	f64a 2113 	movw	r1, #43539	; 0xaa13
    8120:	4408      	add	r0, r1
    8122:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    8126:	fbb0 f0f1 	udiv	r0, r0, r1
    812a:	1a29      	subs	r1, r5, r0
    812c:	4630      	mov	r0, r6
    812e:	f7f9 fabf 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8132:	69a1      	ldr	r1, [r4, #24]
    8134:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    8138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    813c:	20001290 	.word	0x20001290
    8140:	20000114 	.word	0x20000114
    8144:	b510      	push	{r4, lr}
    8146:	4c06      	ldr	r4, [pc, #24]	; (8160 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x160>)
    8148:	7b20      	ldrb	r0, [r4, #12]
    814a:	2800      	cmp	r0, #0
    814c:	d006      	beq.n	815c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x15c>
    814e:	f003 fc13 	bl	b978 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>
    8152:	f7fa f9bf 	bl	24d4 <sym_SFR5TVV24PZRIRC5QGOHL2X436PUHKRY2QWKP5Y>
    8156:	2000      	movs	r0, #0
    8158:	7320      	strb	r0, [r4, #12]
    815a:	7360      	strb	r0, [r4, #13]
    815c:	bd10      	pop	{r4, pc}
    815e:	0000      	.short	0x0000
    8160:	20001290 	.word	0x20001290
    8164:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    8166:	4c1c      	ldr	r4, [pc, #112]	; (81d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d8>)
    8168:	7820      	ldrb	r0, [r4, #0]
    816a:	2805      	cmp	r0, #5
    816c:	d002      	beq.n	8174 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x174>
    816e:	200c      	movs	r0, #12
    8170:	b004      	add	sp, #16
    8172:	bd10      	pop	{r4, pc}
    8174:	69a1      	ldr	r1, [r4, #24]
    8176:	b129      	cbz	r1, 8184 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x184>
    8178:	f891 0120 	ldrb.w	r0, [r1, #288]	; 0x120
    817c:	b128      	cbz	r0, 818a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x18a>
    817e:	f240 41fa 	movw	r1, #1274	; 0x4fa
    8182:	e025      	b.n	81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>
    8184:	f240 41f9 	movw	r1, #1273	; 0x4f9
    8188:	e022      	b.n	81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>
    818a:	f891 0121 	ldrb.w	r0, [r1, #289]	; 0x121
    818e:	2820      	cmp	r0, #32
    8190:	d002      	beq.n	8198 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x198>
    8192:	f240 41fc 	movw	r1, #1276	; 0x4fc
    8196:	e01b      	b.n	81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>
    8198:	4810      	ldr	r0, [pc, #64]	; (81dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1dc>)
    819a:	f7fa f973 	bl	2484 <sym_RPHL2J7CVNKM6GKLDIFI4NVAPZE2FHTYW4VJSJI>
    819e:	69a1      	ldr	r1, [r4, #24]
    81a0:	2820      	cmp	r0, #32
    81a2:	f881 0121 	strb.w	r0, [r1, #289]	; 0x121
    81a6:	d00e      	beq.n	81c6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1c6>
    81a8:	2300      	movs	r3, #0
    81aa:	2201      	movs	r2, #1
    81ac:	4668      	mov	r0, sp
    81ae:	f000 f8bd 	bl	832c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32c>
    81b2:	69a0      	ldr	r0, [r4, #24]
    81b4:	4669      	mov	r1, sp
    81b6:	f890 0121 	ldrb.w	r0, [r0, #289]	; 0x121
    81ba:	f006 fb9c 	bl	e8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    81be:	b128      	cbz	r0, 81cc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1cc>
    81c0:	2000      	movs	r0, #0
    81c2:	61a0      	str	r0, [r4, #24]
    81c4:	e7d4      	b.n	8170 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x170>
    81c6:	f44f 61a0 	mov.w	r1, #1280	; 0x500
    81ca:	e001      	b.n	81d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1d0>
    81cc:	f240 5103 	movw	r1, #1283	; 0x503
    81d0:	2035      	movs	r0, #53	; 0x35
    81d2:	f7fb fe75 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    81d6:	0000      	.short	0x0000
    81d8:	20001290 	.word	0x20001290
    81dc:	00008235 	.word	0x00008235
    81e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    81e4:	4d11      	ldr	r5, [pc, #68]	; (822c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x22c>)
    81e6:	4616      	mov	r6, r2
    81e8:	460f      	mov	r7, r1
    81ea:	2400      	movs	r4, #0
    81ec:	6068      	str	r0, [r5, #4]
    81ee:	f006 fbd2 	bl	e996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    81f2:	f8df c03c 	ldr.w	ip, [pc, #60]	; 8230 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x230>
    81f6:	2100      	movs	r1, #0
    81f8:	f81c 2001 	ldrb.w	r2, [ip, r1]
    81fc:	4232      	tst	r2, r6
    81fe:	d007      	beq.n	8210 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x210>
    8200:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
    8204:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    8208:	1a1b      	subs	r3, r3, r0
    820a:	1c64      	adds	r4, r4, #1
    820c:	b2e4      	uxtb	r4, r4
    820e:	6093      	str	r3, [r2, #8]
    8210:	1c49      	adds	r1, r1, #1
    8212:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    8216:	d0ef      	beq.n	81f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1f8>
    8218:	f016 0f0e 	tst.w	r6, #14
    821c:	d004      	beq.n	8228 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x228>
    821e:	f640 11b6 	movw	r1, #2486	; 0x9b6
    8222:	2035      	movs	r0, #53	; 0x35
    8224:	f7fb fe4c 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    822c:	20001290 	.word	0x20001290
    8230:	0000fcad 	.word	0x0000fcad
    8234:	b570      	push	{r4, r5, r6, lr}
    8236:	460d      	mov	r5, r1
    8238:	0004      	movs	r4, r0
    823a:	d00c      	beq.n	8256 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x256>
    823c:	2001      	movs	r0, #1
    823e:	f006 fb15 	bl	e86c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    8242:	b2c6      	uxtb	r6, r0
    8244:	200b      	movs	r0, #11
    8246:	f006 fb11 	bl	e86c <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0xa>
    824a:	b2c0      	uxtb	r0, r0
    824c:	4286      	cmp	r6, r0
    824e:	d005      	beq.n	825c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x25c>
    8250:	f240 215f 	movw	r1, #607	; 0x25f
    8254:	e061      	b.n	831a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31a>
    8256:	f44f 7117 	mov.w	r1, #604	; 0x25c
    825a:	e05e      	b.n	831a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31a>
    825c:	2d09      	cmp	r5, #9
    825e:	d25f      	bcs.n	8320 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x320>
    8260:	e8df f005 	tbb	[pc, r5]
    8264:	3d3d3505 	.word	0x3d3d3505
    8268:	4b445e39 	.word	0x4b445e39
    826c:	0059      	.short	0x0059
    826e:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8272:	b348      	cbz	r0, 82c8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2c8>
    8274:	4620      	mov	r0, r4
    8276:	f000 fd69 	bl	8d4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>
    827a:	f006 fb8c 	bl	e996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    827e:	f500 709c 	add.w	r0, r0, #312	; 0x138
    8282:	b285      	uxth	r5, r0
    8284:	f894 006b 	ldrb.w	r0, [r4, #107]	; 0x6b
    8288:	2128      	movs	r1, #40	; 0x28
    828a:	f006 fb20 	bl	e8ce <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3a>
    828e:	182e      	adds	r6, r5, r0
    8290:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
    8292:	68e0      	ldr	r0, [r4, #12]
    8294:	4288      	cmp	r0, r1
    8296:	d200      	bcs.n	829a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x29a>
    8298:	4601      	mov	r1, r0
    829a:	4632      	mov	r2, r6
    829c:	4620      	mov	r0, r4
    829e:	f006 f86e 	bl	e37e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    82a2:	4d21      	ldr	r5, [pc, #132]	; (8328 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x328>)
    82a4:	4632      	mov	r2, r6
    82a6:	6068      	str	r0, [r5, #4]
    82a8:	4620      	mov	r0, r4
    82aa:	68e1      	ldr	r1, [r4, #12]
    82ac:	f006 f867 	bl	e37e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>
    82b0:	60a8      	str	r0, [r5, #8]
    82b2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    82b6:	f006 f8c3 	bl	e440 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    82ba:	f2a0 1027 	subw	r0, r0, #295	; 0x127
    82be:	60e8      	str	r0, [r5, #12]
    82c0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82c4:	f7fa b9e8 	b.w	2698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    82c8:	f240 2165 	movw	r1, #613	; 0x265
    82cc:	e025      	b.n	831a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31a>
    82ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82d2:	f006 bbf2 	b.w	eaba <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>
    82d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82da:	f003 bd01 	b.w	bce0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>
    82de:	4620      	mov	r0, r4
    82e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82e4:	2201      	movs	r2, #1
    82e6:	2100      	movs	r1, #0
    82e8:	f006 bb35 	b.w	e956 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xc2>
    82ec:	2001      	movs	r0, #1
    82ee:	f7f9 f8b3 	bl	1458 <sym_RWBLK2534FJMTER76IYUPZQ3YF74JEALZ2OBIDI>
    82f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    82f6:	f005 bb74 	b.w	d9e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>
    82fa:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    82fe:	2804      	cmp	r0, #4
    8300:	d002      	beq.n	8308 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x308>
    8302:	f240 2199 	movw	r1, #665	; 0x299
    8306:	e008      	b.n	831a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31a>
    8308:	4620      	mov	r0, r4
    830a:	f006 fb0c 	bl	e926 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x92>
    830e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8312:	f7fd bf15 	b.w	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    8316:	f44f 7129 	mov.w	r1, #676	; 0x2a4
    831a:	2035      	movs	r0, #53	; 0x35
    831c:	f7fb fdd0 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8320:	f44f 712a 	mov.w	r1, #680	; 0x2a8
    8324:	e7f9      	b.n	831a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x31a>
    8326:	0000      	.short	0x0000
    8328:	20001280 	.word	0x20001280
    832c:	e92d 5fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, lr}
    8330:	4605      	mov	r5, r0
    8332:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    8336:	2600      	movs	r6, #0
    8338:	f8d1 b020 	ldr.w	fp, [r1, #32]
    833c:	469a      	mov	sl, r3
    833e:	460c      	mov	r4, r1
    8340:	280d      	cmp	r0, #13
    8342:	d020      	beq.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    8344:	280c      	cmp	r0, #12
    8346:	d01e      	beq.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    8348:	2824      	cmp	r0, #36	; 0x24
    834a:	d01c      	beq.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    834c:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
    8350:	2824      	cmp	r0, #36	; 0x24
    8352:	d018      	beq.n	8386 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x386>
    8354:	2000      	movs	r0, #0
    8356:	4680      	mov	r8, r0
    8358:	f006 fb12 	bl	e980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    835c:	4681      	mov	r9, r0
    835e:	f1ba 0f00 	cmp.w	sl, #0
    8362:	d003      	beq.n	836c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36c>
    8364:	2101      	movs	r1, #1
    8366:	4620      	mov	r0, r4
    8368:	f006 fb4e 	bl	ea08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    836c:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    8370:	2701      	movs	r7, #1
    8372:	b150      	cbz	r0, 838a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x38a>
    8374:	2801      	cmp	r0, #1
    8376:	d01b      	beq.n	83b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b0>
    8378:	2802      	cmp	r0, #2
    837a:	d011      	beq.n	83a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3a0>
    837c:	2803      	cmp	r0, #3
    837e:	d017      	beq.n	83b0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b0>
    8380:	f640 1139 	movw	r1, #2361	; 0x939
    8384:	e07b      	b.n	847e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47e>
    8386:	2001      	movs	r0, #1
    8388:	e7e5      	b.n	8356 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x356>
    838a:	9802      	ldr	r0, [sp, #8]
    838c:	b128      	cbz	r0, 839a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x39a>
    838e:	f884 7120 	strb.w	r7, [r4, #288]	; 0x120
    8392:	4620      	mov	r0, r4
    8394:	f006 fa9d 	bl	e8d2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x3e>
    8398:	e00b      	b.n	83b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b2>
    839a:	f640 01ff 	movw	r1, #2303	; 0x8ff
    839e:	e06e      	b.n	847e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47e>
    83a0:	4838      	ldr	r0, [pc, #224]	; (8484 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x484>)
    83a2:	6801      	ldr	r1, [r0, #0]
    83a4:	2003      	movs	r0, #3
    83a6:	eb01 060b 	add.w	r6, r1, fp
    83aa:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    83ae:	e000      	b.n	83b2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3b2>
    83b0:	68e6      	ldr	r6, [r4, #12]
    83b2:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    83b6:	4631      	mov	r1, r6
    83b8:	f7f9 f97a 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    83bc:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    83c0:	60e8      	str	r0, [r5, #12]
    83c2:	2000      	movs	r0, #0
    83c4:	7028      	strb	r0, [r5, #0]
    83c6:	f8a5 9008 	strh.w	r9, [r5, #8]
    83ca:	4620      	mov	r0, r4
    83cc:	f000 fc0c 	bl	8be8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    83d0:	f1a8 0101 	sub.w	r1, r8, #1
    83d4:	4208      	tst	r0, r1
    83d6:	d101      	bne.n	83dc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3dc>
    83d8:	72af      	strb	r7, [r5, #10]
    83da:	e005      	b.n	83e8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e8>
    83dc:	f894 0120 	ldrb.w	r0, [r4, #288]	; 0x120
    83e0:	2801      	cmp	r0, #1
    83e2:	d017      	beq.n	8414 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x414>
    83e4:	2003      	movs	r0, #3
    83e6:	72a8      	strb	r0, [r5, #10]
    83e8:	46b9      	mov	r9, r7
    83ea:	72ef      	strb	r7, [r5, #11]
    83ec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    83f0:	f006 f826 	bl	e440 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    83f4:	6068      	str	r0, [r5, #4]
    83f6:	f1ba 0f00 	cmp.w	sl, #0
    83fa:	d03c      	beq.n	8476 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x476>
    83fc:	4631      	mov	r1, r6
    83fe:	4628      	mov	r0, r5
    8400:	f005 fcdc 	bl	ddbc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8404:	b287      	uxth	r7, r0
    8406:	4620      	mov	r0, r4
    8408:	f000 fbee 	bl	8be8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>
    840c:	f1b8 0f00 	cmp.w	r8, #0
    8410:	d002      	beq.n	8418 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x418>
    8412:	e014      	b.n	843e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x43e>
    8414:	2002      	movs	r0, #2
    8416:	e7e6      	b.n	83e6 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3e6>
    8418:	42b8      	cmp	r0, r7
    841a:	d810      	bhi.n	843e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x43e>
    841c:	4607      	mov	r7, r0
    841e:	f885 900a 	strb.w	r9, [r5, #10]
    8422:	fb06 f107 	mul.w	r1, r6, r7
    8426:	f8d4 0108 	ldr.w	r0, [r4, #264]	; 0x108
    842a:	f7f9 f941 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    842e:	60e8      	str	r0, [r5, #12]
    8430:	b31e      	cbz	r6, 847a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x47a>
    8432:	4631      	mov	r1, r6
    8434:	4628      	mov	r0, r5
    8436:	f005 fcc1 	bl	ddbc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    843a:	4438      	add	r0, r7
    843c:	b287      	uxth	r7, r0
    843e:	4639      	mov	r1, r7
    8440:	4620      	mov	r0, r4
    8442:	f006 fae1 	bl	ea08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>
    8446:	68e8      	ldr	r0, [r5, #12]
    8448:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108
    844c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    844e:	2800      	cmp	r0, #0
    8450:	d011      	beq.n	8476 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x476>
    8452:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    8456:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
    845a:	1a40      	subs	r0, r0, r1
    845c:	b202      	sxth	r2, r0
    845e:	2a00      	cmp	r2, #0
    8460:	dd09      	ble.n	8476 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x476>
    8462:	f834 0f74 	ldrh.w	r0, [r4, #116]!
    8466:	4402      	add	r2, r0
    8468:	1e52      	subs	r2, r2, #1
    846a:	fb92 f2f0 	sdiv	r2, r2, r0
    846e:	b292      	uxth	r2, r2
    8470:	fb02 1000 	mla	r0, r2, r0, r1
    8474:	86e0      	strh	r0, [r4, #54]	; 0x36
    8476:	e8bd 9fff 	ldmia.w	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip, pc}
    847a:	f640 1174 	movw	r1, #2420	; 0x974
    847e:	2035      	movs	r0, #53	; 0x35
    8480:	f7fb fd1e 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8484:	20000114 	.word	0x20000114
    8488:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    848c:	460d      	mov	r5, r1
    848e:	4607      	mov	r7, r0
    8490:	f000 fa58 	bl	8944 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x944>
    8494:	4c1d      	ldr	r4, [pc, #116]	; (850c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x50c>)
    8496:	6861      	ldr	r1, [r4, #4]
    8498:	f7f9 f90a 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    849c:	4606      	mov	r6, r0
    849e:	4601      	mov	r1, r0
    84a0:	4638      	mov	r0, r7
    84a2:	f7f9 f937 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    84a6:	4607      	mov	r7, r0
    84a8:	f006 fa7b 	bl	e9a2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    84ac:	4287      	cmp	r7, r0
    84ae:	da10      	bge.n	84d2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4d2>
    84b0:	6960      	ldr	r0, [r4, #20]
    84b2:	f000 fa47 	bl	8944 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x944>
    84b6:	4631      	mov	r1, r6
    84b8:	f7f9 f92c 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    84bc:	6861      	ldr	r1, [r4, #4]
    84be:	fbb0 f0f1 	udiv	r0, r0, r1
    84c2:	6028      	str	r0, [r5, #0]
    84c4:	6861      	ldr	r1, [r4, #4]
    84c6:	b004      	add	sp, #16
    84c8:	4630      	mov	r0, r6
    84ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    84ce:	f7f9 b8ef 	b.w	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    84d2:	2000      	movs	r0, #0
    84d4:	f88d 0000 	strb.w	r0, [sp]
    84d8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    84da:	9001      	str	r0, [sp, #4]
    84dc:	f006 fa50 	bl	e980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    84e0:	f8ad 0008 	strh.w	r0, [sp, #8]
    84e4:	2001      	movs	r0, #1
    84e6:	f88d 000b 	strb.w	r0, [sp, #11]
    84ea:	6960      	ldr	r0, [r4, #20]
    84ec:	f000 fa2a 	bl	8944 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x944>
    84f0:	9003      	str	r0, [sp, #12]
    84f2:	f000 f9c1 	bl	8878 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x878>
    84f6:	f88d 000a 	strb.w	r0, [sp, #10]
    84fa:	4668      	mov	r0, sp
    84fc:	6861      	ldr	r1, [r4, #4]
    84fe:	f005 fc5d 	bl	ddbc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>
    8502:	6028      	str	r0, [r5, #0]
    8504:	9803      	ldr	r0, [sp, #12]
    8506:	b004      	add	sp, #16
    8508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    850c:	20001290 	.word	0x20001290
    8510:	b510      	push	{r4, lr}
    8512:	2400      	movs	r4, #0
    8514:	f006 fa3f 	bl	e996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    8518:	4a06      	ldr	r2, [pc, #24]	; (8534 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x534>)
    851a:	2100      	movs	r1, #0
    851c:	eb02 0381 	add.w	r3, r2, r1, lsl #2
    8520:	4404      	add	r4, r0
    8522:	689b      	ldr	r3, [r3, #8]
    8524:	1c49      	adds	r1, r1, #1
    8526:	441c      	add	r4, r3
    8528:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    852c:	d0f6      	beq.n	851c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x51c>
    852e:	4620      	mov	r0, r4
    8530:	bd10      	pop	{r4, pc}
    8532:	0000      	.short	0x0000
    8534:	20001290 	.word	0x20001290
    8538:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    853a:	4c1b      	ldr	r4, [pc, #108]	; (85a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a8>)
    853c:	4606      	mov	r6, r0
    853e:	460d      	mov	r5, r1
    8540:	78a0      	ldrb	r0, [r4, #2]
    8542:	b360      	cbz	r0, 859e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59e>
    8544:	4919      	ldr	r1, [pc, #100]	; (85ac <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5ac>)
    8546:	6a20      	ldr	r0, [r4, #32]
    8548:	4288      	cmp	r0, r1
    854a:	d828      	bhi.n	859e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x59e>
    854c:	2000      	movs	r0, #0
    854e:	f88d 0000 	strb.w	r0, [sp]
    8552:	9501      	str	r5, [sp, #4]
    8554:	f006 fa14 	bl	e980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    8558:	f8ad 0008 	strh.w	r0, [sp, #8]
    855c:	2001      	movs	r0, #1
    855e:	f88d 000b 	strb.w	r0, [sp, #11]
    8562:	f006 fa1e 	bl	e9a2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x10e>
    8566:	4601      	mov	r1, r0
    8568:	4630      	mov	r0, r6
    856a:	f7f9 f8a1 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    856e:	9003      	str	r0, [sp, #12]
    8570:	2003      	movs	r0, #3
    8572:	f88d 000a 	strb.w	r0, [sp, #10]
    8576:	4668      	mov	r0, sp
    8578:	f7f9 fbd8 	bl	1d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    857c:	4606      	mov	r6, r0
    857e:	4629      	mov	r1, r5
    8580:	9803      	ldr	r0, [sp, #12]
    8582:	f7f9 f895 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8586:	4605      	mov	r5, r0
    8588:	6a21      	ldr	r1, [r4, #32]
    858a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    858c:	f7f9 f890 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8590:	4601      	mov	r1, r0
    8592:	b13e      	cbz	r6, 85a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a4>
    8594:	4628      	mov	r0, r5
    8596:	f7f9 f8bd 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    859a:	2800      	cmp	r0, #0
    859c:	db02      	blt.n	85a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a4>
    859e:	2001      	movs	r0, #1
    85a0:	b004      	add	sp, #16
    85a2:	bd70      	pop	{r4, r5, r6, pc}
    85a4:	2000      	movs	r0, #0
    85a6:	e7fb      	b.n	85a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5a0>
    85a8:	20001290 	.word	0x20001290
    85ac:	07a12000 	.word	0x07a12000
    85b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85b4:	f003 ff1f 	bl	c3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    85b8:	4c21      	ldr	r4, [pc, #132]	; (8640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x640>)
    85ba:	4607      	mov	r7, r0
    85bc:	6920      	ldr	r0, [r4, #16]
    85be:	f000 f95b 	bl	8878 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x878>
    85c2:	4606      	mov	r6, r0
    85c4:	f7f9 f81a 	bl	15fc <sym_FWJGAV6HUABGKXBT6K4XJ76WZDWHK3EOQOQRNOI>
    85c8:	4605      	mov	r5, r0
    85ca:	2865      	cmp	r0, #101	; 0x65
    85cc:	d326      	bcc.n	861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>
    85ce:	1c68      	adds	r0, r5, #1
    85d0:	d027      	beq.n	8622 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x622>
    85d2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    85d6:	1948      	adds	r0, r1, r5
    85d8:	4282      	cmp	r2, r0
    85da:	d800      	bhi.n	85de <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5de>
    85dc:	1a55      	subs	r5, r2, r1
    85de:	f06f 0139 	mvn.w	r1, #57	; 0x39
    85e2:	4638      	mov	r0, r7
    85e4:	f7f9 f864 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    85e8:	4629      	mov	r1, r5
    85ea:	f000 f9bd 	bl	8968 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x968>
    85ee:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85f0:	4408      	add	r0, r1
    85f2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    85f4:	1a45      	subs	r5, r0, r1
    85f6:	f241 3088 	movw	r0, #5000	; 0x1388
    85fa:	4285      	cmp	r5, r0
    85fc:	d900      	bls.n	8600 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x600>
    85fe:	4605      	mov	r5, r0
    8600:	f003 fef9 	bl	c3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8604:	4601      	mov	r1, r0
    8606:	4638      	mov	r0, r7
    8608:	f7f9 f884 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    860c:	309d      	adds	r0, #157	; 0x9d
    860e:	4285      	cmp	r5, r0
    8610:	d304      	bcc.n	861c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61c>
    8612:	4631      	mov	r1, r6
    8614:	4628      	mov	r0, r5
    8616:	f7f8 ff2f 	bl	1478 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    861a:	b120      	cbz	r0, 8626 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x626>
    861c:	2000      	movs	r0, #0
    861e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8622:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    8624:	e7e5      	b.n	85f2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x5f2>
    8626:	6a60      	ldr	r0, [r4, #36]	; 0x24
    8628:	4905      	ldr	r1, [pc, #20]	; (8640 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x640>)
    862a:	4428      	add	r0, r5
    862c:	3910      	subs	r1, #16
    862e:	6260      	str	r0, [r4, #36]	; 0x24
    8630:	68c8      	ldr	r0, [r1, #12]
    8632:	4428      	add	r0, r5
    8634:	60c8      	str	r0, [r1, #12]
    8636:	f7fa f82f 	bl	2698 <sym_URFU24FFGR2HYB6CCPIPKPNZNMTWHKDYOATUJNY>
    863a:	2001      	movs	r0, #1
    863c:	e7ef      	b.n	861e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x61e>
    863e:	0000      	.short	0x0000
    8640:	20001290 	.word	0x20001290
    8644:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8648:	b08c      	sub	sp, #48	; 0x30
    864a:	4616      	mov	r6, r2
    864c:	4607      	mov	r7, r0
    864e:	f003 fed2 	bl	c3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>
    8652:	4c87      	ldr	r4, [pc, #540]	; (8870 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x870>)
    8654:	9002      	str	r0, [sp, #8]
    8656:	2500      	movs	r5, #0
    8658:	f8d4 a008 	ldr.w	sl, [r4, #8]
    865c:	f006 f99b 	bl	e996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    8660:	68a1      	ldr	r1, [r4, #8]
    8662:	4408      	add	r0, r1
    8664:	6861      	ldr	r1, [r4, #4]
    8666:	4288      	cmp	r0, r1
    8668:	d101      	bne.n	866e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x66e>
    866a:	2001      	movs	r0, #1
    866c:	e000      	b.n	8670 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x670>
    866e:	2000      	movs	r0, #0
    8670:	4683      	mov	fp, r0
    8672:	980d      	ldr	r0, [sp, #52]	; 0x34
    8674:	ea06 090b 	and.w	r9, r6, fp
    8678:	2800      	cmp	r0, #0
    867a:	d065      	beq.n	8748 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x748>
    867c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
    8680:	9802      	ldr	r0, [sp, #8]
    8682:	f7f9 f815 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8686:	9000      	str	r0, [sp, #0]
    8688:	f002 f872 	bl	a770 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>
    868c:	4680      	mov	r8, r0
    868e:	4878      	ldr	r0, [pc, #480]	; (8870 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x870>)
    8690:	7800      	ldrb	r0, [r0, #0]
    8692:	4e77      	ldr	r6, [pc, #476]	; (8870 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x870>)
    8694:	362c      	adds	r6, #44	; 0x2c
    8696:	2805      	cmp	r0, #5
    8698:	d12e      	bne.n	86f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f8>
    869a:	4875      	ldr	r0, [pc, #468]	; (8870 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x870>)
    869c:	6980      	ldr	r0, [r0, #24]
    869e:	f8d0 010c 	ldr.w	r0, [r0, #268]	; 0x10c
    86a2:	f002 f845 	bl	a730 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>
    86a6:	4604      	mov	r4, r0
    86a8:	4540      	cmp	r0, r8
    86aa:	d009      	beq.n	86c0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6c0>
    86ac:	4870      	ldr	r0, [pc, #448]	; (8870 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x870>)
    86ae:	4621      	mov	r1, r4
    86b0:	6980      	ldr	r0, [r0, #24]
    86b2:	f500 7084 	add.w	r0, r0, #264	; 0x108
    86b6:	f001 ffff 	bl	a6b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    86ba:	2000      	movs	r0, #0
    86bc:	6170      	str	r0, [r6, #20]
    86be:	e00c      	b.n	86da <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6da>
    86c0:	496b      	ldr	r1, [pc, #428]	; (8870 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x870>)
    86c2:	6988      	ldr	r0, [r1, #24]
    86c4:	f500 7084 	add.w	r0, r0, #264	; 0x108
    86c8:	6170      	str	r0, [r6, #20]
    86ca:	698a      	ldr	r2, [r1, #24]
    86cc:	6b08      	ldr	r0, [r1, #48]	; 0x30
    86ce:	f8d2 210c 	ldr.w	r2, [r2, #268]	; 0x10c
    86d2:	4290      	cmp	r0, r2
    86d4:	d200      	bcs.n	86d8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6d8>
    86d6:	4610      	mov	r0, r2
    86d8:	6308      	str	r0, [r1, #48]	; 0x30
    86da:	4865      	ldr	r0, [pc, #404]	; (8870 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x870>)
    86dc:	6980      	ldr	r0, [r0, #24]
    86de:	b130      	cbz	r0, 86ee <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6ee>
    86e0:	b144      	cbz	r4, 86f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f4>
    86e2:	e9d4 1200 	ldrd	r1, r2, [r4]
    86e6:	4411      	add	r1, r2
    86e8:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    86ec:	e004      	b.n	86f8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6f8>
    86ee:	f240 51c5 	movw	r1, #1477	; 0x5c5
    86f2:	e017      	b.n	8724 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x724>
    86f4:	f8c0 5108 	str.w	r5, [r0, #264]	; 0x108
    86f8:	4641      	mov	r1, r8
    86fa:	4630      	mov	r0, r6
    86fc:	f001 ffdc 	bl	a6b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>
    8700:	ea5f 0008 	movs.w	r0, r8
    8704:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8870 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x870>
    8708:	9a00      	ldr	r2, [sp, #0]
    870a:	f8d8 4004 	ldr.w	r4, [r8, #4]
    870e:	d00c      	beq.n	872a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72a>
    8710:	e9d0 1000 	ldrd	r1, r0, [r0]
    8714:	4408      	add	r0, r1
    8716:	4621      	mov	r1, r4
    8718:	f006 fa77 	bl	ec0a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>
    871c:	42a0      	cmp	r0, r4
    871e:	d904      	bls.n	872a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x72a>
    8720:	f240 51e3 	movw	r1, #1507	; 0x5e3
    8724:	2035      	movs	r0, #53	; 0x35
    8726:	f7fb fbcb 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    872a:	4601      	mov	r1, r0
    872c:	9800      	ldr	r0, [sp, #0]
    872e:	f7f8 ffbf 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8732:	4606      	mov	r6, r0
    8734:	f8d8 0004 	ldr.w	r0, [r8, #4]
    8738:	4644      	mov	r4, r8
    873a:	4241      	negs	r1, r0
    873c:	4630      	mov	r0, r6
    873e:	f7f8 ffb7 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8742:	62e0      	str	r0, [r4, #44]	; 0x2c
    8744:	2001      	movs	r0, #1
    8746:	e042      	b.n	87ce <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ce>
    8748:	f1b9 0f00 	cmp.w	r9, #0
    874c:	d018      	beq.n	8780 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x780>
    874e:	2001      	movs	r0, #1
    8750:	f006 f8a3 	bl	e89a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    8754:	4604      	mov	r4, r0
    8756:	2001      	movs	r0, #1
    8758:	f007 f9ed 	bl	fb36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    875c:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    8760:	4401      	add	r1, r0
    8762:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    8766:	fbb1 f0f0 	udiv	r0, r1, r0
    876a:	1821      	adds	r1, r4, r0
    876c:	31f1      	adds	r1, #241	; 0xf1
    876e:	9802      	ldr	r0, [sp, #8]
    8770:	f7ff fee2 	bl	8538 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x538>
    8774:	b908      	cbnz	r0, 877a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x77a>
    8776:	f04f 0a00 	mov.w	sl, #0
    877a:	9e02      	ldr	r6, [sp, #8]
    877c:	9508      	str	r5, [sp, #32]
    877e:	e027      	b.n	87d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7d0>
    8780:	b12e      	cbz	r6, 878e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x78e>
    8782:	a908      	add	r1, sp, #32
    8784:	9802      	ldr	r0, [sp, #8]
    8786:	f7ff fe7f 	bl	8488 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x488>
    878a:	4606      	mov	r6, r0
    878c:	e020      	b.n	87d0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7d0>
    878e:	9802      	ldr	r0, [sp, #8]
    8790:	f000 f8d8 	bl	8944 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x944>
    8794:	4c36      	ldr	r4, [pc, #216]	; (8870 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x870>)
    8796:	e9d4 1a01 	ldrd	r1, sl, [r4, #4]
    879a:	f7f8 ff89 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    879e:	4606      	mov	r6, r0
    87a0:	6920      	ldr	r0, [r4, #16]
    87a2:	f000 f8c3 	bl	892c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92c>
    87a6:	6861      	ldr	r1, [r4, #4]
    87a8:	4348      	muls	r0, r1
    87aa:	78a1      	ldrb	r1, [r4, #2]
    87ac:	b131      	cbz	r1, 87bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7bc>
    87ae:	6a21      	ldr	r1, [r4, #32]
    87b0:	4281      	cmp	r1, r0
    87b2:	d302      	bcc.n	87ba <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7ba>
    87b4:	1a09      	subs	r1, r1, r0
    87b6:	6221      	str	r1, [r4, #32]
    87b8:	e000      	b.n	87bc <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x7bc>
    87ba:	6225      	str	r5, [r4, #32]
    87bc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    87be:	4601      	mov	r1, r0
    87c0:	4610      	mov	r0, r2
    87c2:	f7f8 ff75 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    87c6:	62e0      	str	r0, [r4, #44]	; 0x2c
    87c8:	4630      	mov	r0, r6
    87ca:	f000 f8af 	bl	892c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x92c>
    87ce:	9008      	str	r0, [sp, #32]
    87d0:	2001      	movs	r0, #1
    87d2:	f006 f862 	bl	e89a <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x6>
    87d6:	4604      	mov	r4, r0
    87d8:	2001      	movs	r0, #1
    87da:	f007 f9ac 	bl	fb36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    87de:	f24a 31a1 	movw	r1, #41889	; 0xa3a1
    87e2:	4401      	add	r1, r0
    87e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    87e8:	fbb1 f0f0 	udiv	r0, r1, r0
    87ec:	4404      	add	r4, r0
    87ee:	4651      	mov	r1, sl
    87f0:	4630      	mov	r0, r6
    87f2:	34f1      	adds	r4, #241	; 0xf1
    87f4:	f000 f8b8 	bl	8968 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x968>
    87f8:	491d      	ldr	r1, [pc, #116]	; (8870 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x870>)
    87fa:	eb01 0285 	add.w	r2, r1, r5, lsl #2
    87fe:	6892      	ldr	r2, [r2, #8]
    8800:	4282      	cmp	r2, r0
    8802:	d800      	bhi.n	8806 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x806>
    8804:	4610      	mov	r0, r2
    8806:	6288      	str	r0, [r1, #40]	; 0x28
    8808:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    880a:	b102      	cbz	r2, 880e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x80e>
    880c:	610e      	str	r6, [r1, #16]
    880e:	4688      	mov	r8, r1
    8810:	614e      	str	r6, [r1, #20]
    8812:	f1bb 0f00 	cmp.w	fp, #0
    8816:	d002      	beq.n	881e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x81e>
    8818:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
    881c:	e001      	b.n	8822 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x822>
    881e:	f8c8 0024 	str.w	r0, [r8, #36]	; 0x24
    8822:	f04f 0a01 	mov.w	sl, #1
    8826:	f887 a00b 	strb.w	sl, [r7, #11]
    882a:	f006 f8a9 	bl	e980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    882e:	8138      	strh	r0, [r7, #8]
    8830:	4630      	mov	r0, r6
    8832:	f000 f821 	bl	8878 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x878>
    8836:	72b8      	strb	r0, [r7, #10]
    8838:	f8d8 0024 	ldr.w	r0, [r8, #36]	; 0x24
    883c:	6078      	str	r0, [r7, #4]
    883e:	f1b9 0f00 	cmp.w	r9, #0
    8842:	d008      	beq.n	8856 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x856>
    8844:	f887 a000 	strb.w	sl, [r7]
    8848:	490a      	ldr	r1, [pc, #40]	; (8874 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x874>)
    884a:	9802      	ldr	r0, [sp, #8]
    884c:	f000 f88c 	bl	8968 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x968>
    8850:	1b00      	subs	r0, r0, r4
    8852:	60f8      	str	r0, [r7, #12]
    8854:	e001      	b.n	885a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x85a>
    8856:	703d      	strb	r5, [r7, #0]
    8858:	60fe      	str	r6, [r7, #12]
    885a:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
    885e:	42a0      	cmp	r0, r4
    8860:	d303      	bcc.n	886a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x86a>
    8862:	2001      	movs	r0, #1
    8864:	b00f      	add	sp, #60	; 0x3c
    8866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    886a:	2000      	movs	r0, #0
    886c:	e7fa      	b.n	8864 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x864>
    886e:	0000      	.short	0x0000
    8870:	20001290 	.word	0x20001290
    8874:	07a12000 	.word	0x07a12000
    8878:	4a09      	ldr	r2, [pc, #36]	; (88a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8a0>)
    887a:	b510      	push	{r4, lr}
    887c:	7811      	ldrb	r1, [r2, #0]
    887e:	2904      	cmp	r1, #4
    8880:	d10c      	bne.n	889c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x89c>
    8882:	6851      	ldr	r1, [r2, #4]
    8884:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
    8886:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    888a:	004c      	lsls	r4, r1, #1
    888c:	4601      	mov	r1, r0
    888e:	4610      	mov	r0, r2
    8890:	f7f8 ff40 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8894:	42a0      	cmp	r0, r4
    8896:	d201      	bcs.n	889c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x89c>
    8898:	2003      	movs	r0, #3
    889a:	bd10      	pop	{r4, pc}
    889c:	2002      	movs	r0, #2
    889e:	bd10      	pop	{r4, pc}
    88a0:	20001290 	.word	0x20001290
    88a4:	b570      	push	{r4, r5, r6, lr}
    88a6:	4d13      	ldr	r5, [pc, #76]	; (88f4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8f4>)
    88a8:	7f28      	ldrb	r0, [r5, #28]
    88aa:	f105 042c 	add.w	r4, r5, #44	; 0x2c
    88ae:	2800      	cmp	r0, #0
    88b0:	7828      	ldrb	r0, [r5, #0]
    88b2:	d00f      	beq.n	88d4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8d4>
    88b4:	2805      	cmp	r0, #5
    88b6:	d004      	beq.n	88c2 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8c2>
    88b8:	f240 318f 	movw	r1, #911	; 0x38f
    88bc:	2035      	movs	r0, #53	; 0x35
    88be:	f7fb faff 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    88c2:	4620      	mov	r0, r4
    88c4:	f005 ffe1 	bl	e88a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    88c8:	b178      	cbz	r0, 88ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ea>
    88ca:	4620      	mov	r0, r4
    88cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    88d0:	f001 bed0 	b.w	a674 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>
    88d4:	2805      	cmp	r0, #5
    88d6:	d108      	bne.n	88ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ea>
    88d8:	4620      	mov	r0, r4
    88da:	f005 ffd6 	bl	e88a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x28>
    88de:	b920      	cbnz	r0, 88ea <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8ea>
    88e0:	69a8      	ldr	r0, [r5, #24]
    88e2:	f500 7084 	add.w	r0, r0, #264	; 0x108
    88e6:	f001 ff07 	bl	a6f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    88ea:	4620      	mov	r0, r4
    88ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    88f0:	f001 bf02 	b.w	a6f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    88f4:	20001290 	.word	0x20001290
    88f8:	b510      	push	{r4, lr}
    88fa:	f7fd ff27 	bl	674c <sym_E2CRP72QBQBK56N4JLXHAC3TVB4DCKBR4JCPWZI>
    88fe:	490a      	ldr	r1, [pc, #40]	; (8928 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x928>)
    8900:	2000      	movs	r0, #0
    8902:	70c8      	strb	r0, [r1, #3]
    8904:	7708      	strb	r0, [r1, #28]
    8906:	6188      	str	r0, [r1, #24]
    8908:	7008      	strb	r0, [r1, #0]
    890a:	f7fd fe71 	bl	65f0 <sym_LSVSDRPU6I3TDCLLOUEM2V2AVGSQ7RX4GJRYLGY>
    890e:	4604      	mov	r4, r0
    8910:	7800      	ldrb	r0, [r0, #0]
    8912:	f7f9 fc89 	bl	2228 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    8916:	b110      	cbz	r0, 891e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x91e>
    8918:	2020      	movs	r0, #32
    891a:	7020      	strb	r0, [r4, #0]
    891c:	bd10      	pop	{r4, pc}
    891e:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    8922:	2035      	movs	r0, #53	; 0x35
    8924:	f7fb facc 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8928:	20001290 	.word	0x20001290
    892c:	b510      	push	{r4, lr}
    892e:	4c04      	ldr	r4, [pc, #16]	; (8940 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x940>)
    8930:	4601      	mov	r1, r0
    8932:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8934:	f7f8 feee 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8938:	6861      	ldr	r1, [r4, #4]
    893a:	fbb0 f0f1 	udiv	r0, r0, r1
    893e:	bd10      	pop	{r4, pc}
    8940:	20001290 	.word	0x20001290
    8944:	b510      	push	{r4, lr}
    8946:	4c07      	ldr	r4, [pc, #28]	; (8964 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x964>)
    8948:	4601      	mov	r1, r0
    894a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    894c:	f7f8 fee2 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8950:	6861      	ldr	r1, [r4, #4]
    8952:	fbb0 f2f1 	udiv	r2, r0, r1
    8956:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    8958:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    895c:	4351      	muls	r1, r2
    895e:	f7f8 bea7 	b.w	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8962:	0000      	.short	0x0000
    8964:	20001290 	.word	0x20001290
    8968:	b570      	push	{r4, r5, r6, lr}
    896a:	4605      	mov	r5, r0
    896c:	480d      	ldr	r0, [pc, #52]	; (89a4 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a4>)
    896e:	460c      	mov	r4, r1
    8970:	7881      	ldrb	r1, [r0, #2]
    8972:	b1a9      	cbz	r1, 89a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a0>
    8974:	4a0c      	ldr	r2, [pc, #48]	; (89a8 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a8>)
    8976:	6a01      	ldr	r1, [r0, #32]
    8978:	4291      	cmp	r1, r2
    897a:	d211      	bcs.n	89a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a0>
    897c:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    897e:	f7f8 fe97 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    8982:	4606      	mov	r6, r0
    8984:	4621      	mov	r1, r4
    8986:	4628      	mov	r0, r5
    8988:	f7f8 fe92 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    898c:	4601      	mov	r1, r0
    898e:	4630      	mov	r0, r6
    8990:	f7f8 fec0 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    8994:	2800      	cmp	r0, #0
    8996:	dd03      	ble.n	89a0 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x9a0>
    8998:	1a20      	subs	r0, r4, r0
    899a:	d500      	bpl.n	899e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x99e>
    899c:	2000      	movs	r0, #0
    899e:	bd70      	pop	{r4, r5, r6, pc}
    89a0:	4620      	mov	r0, r4
    89a2:	bd70      	pop	{r4, r5, r6, pc}
    89a4:	20001290 	.word	0x20001290
    89a8:	07a12000 	.word	0x07a12000

000089ac <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>:
    89ac:	4806      	ldr	r0, [pc, #24]	; (89c8 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x1c>)
    89ae:	4905      	ldr	r1, [pc, #20]	; (89c4 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x18>)
    89b0:	6501      	str	r1, [r0, #80]	; 0x50
    89b2:	4906      	ldr	r1, [pc, #24]	; (89cc <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x20>)
    89b4:	6541      	str	r1, [r0, #84]	; 0x54
    89b6:	4807      	ldr	r0, [pc, #28]	; (89d4 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x28>)
    89b8:	4905      	ldr	r1, [pc, #20]	; (89d0 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x24>)
    89ba:	6501      	str	r1, [r0, #80]	; 0x50
    89bc:	4906      	ldr	r1, [pc, #24]	; (89d8 <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ+0x2c>)
    89be:	6541      	str	r1, [r0, #84]	; 0x54
    89c0:	4770      	bx	lr
    89c2:	0000      	.short	0x0000
    89c4:	00009b09 	.word	0x00009b09
    89c8:	2000012c 	.word	0x2000012c
    89cc:	00009bd5 	.word	0x00009bd5
    89d0:	0000a205 	.word	0x0000a205
    89d4:	20000190 	.word	0x20000190
    89d8:	0000a235 	.word	0x0000a235

000089dc <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI>:
    89dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    89de:	460d      	mov	r5, r1
    89e0:	4607      	mov	r7, r0
    89e2:	2100      	movs	r1, #0
    89e4:	f004 ff1d 	bl	d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    89e8:	1e04      	subs	r4, r0, #0
    89ea:	d051      	beq.n	8a90 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    89ec:	f894 0078 	ldrb.w	r0, [r4, #120]	; 0x78
    89f0:	2800      	cmp	r0, #0
    89f2:	d04d      	beq.n	8a90 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    89f4:	f894 01c6 	ldrb.w	r0, [r4, #454]	; 0x1c6
    89f8:	f88d 0000 	strb.w	r0, [sp]
    89fc:	9800      	ldr	r0, [sp, #0]
    89fe:	9000      	str	r0, [sp, #0]
    8a00:	f89d 0000 	ldrb.w	r0, [sp]
    8a04:	2600      	movs	r6, #0
    8a06:	b158      	cbz	r0, 8a20 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x44>
    8a08:	706e      	strb	r6, [r5, #1]
    8a0a:	2009      	movs	r0, #9
    8a0c:	7028      	strb	r0, [r5, #0]
    8a0e:	220a      	movs	r2, #10
    8a10:	f504 71e4 	add.w	r1, r4, #456	; 0x1c8
    8a14:	1d28      	adds	r0, r5, #4
    8a16:	f003 fe63 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8a1a:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    8a1e:	e0e1      	b.n	8be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8a20:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    8a24:	280e      	cmp	r0, #14
    8a26:	d01d      	beq.n	8a64 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x88>
    8a28:	f894 01d2 	ldrb.w	r0, [r4, #466]	; 0x1d2
    8a2c:	280d      	cmp	r0, #13
    8a2e:	d027      	beq.n	8a80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xa4>
    8a30:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
    8a34:	f88d 0000 	strb.w	r0, [sp]
    8a38:	9800      	ldr	r0, [sp, #0]
    8a3a:	9000      	str	r0, [sp, #0]
    8a3c:	f89d 0000 	ldrb.w	r0, [sp]
    8a40:	b3b0      	cbz	r0, 8ab0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd4>
    8a42:	706e      	strb	r6, [r5, #1]
    8a44:	2008      	movs	r0, #8
    8a46:	7028      	strb	r0, [r5, #0]
    8a48:	f8d4 01ba 	ldr.w	r0, [r4, #442]	; 0x1ba
    8a4c:	6068      	str	r0, [r5, #4]
    8a4e:	f8d4 01be 	ldr.w	r0, [r4, #446]	; 0x1be
    8a52:	60a8      	str	r0, [r5, #8]
    8a54:	f8d4 01c2 	ldr.w	r0, [r4, #450]	; 0x1c2
    8a58:	60e8      	str	r0, [r5, #12]
    8a5a:	f504 74dd 	add.w	r4, r4, #442	; 0x1ba
    8a5e:	f804 6c02 	strb.w	r6, [r4, #-2]
    8a62:	e0bf      	b.n	8be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8a64:	8820      	ldrh	r0, [r4, #0]
    8a66:	f7fb fe29 	bl	46bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8a6a:	4607      	mov	r7, r0
    8a6c:	f004 fda9 	bl	d5c2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8a70:	b968      	cbnz	r0, 8a8e <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb2>
    8a72:	706e      	strb	r6, [r5, #1]
    8a74:	200e      	movs	r0, #14
    8a76:	7028      	strb	r0, [r5, #0]
    8a78:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8a7c:	6068      	str	r0, [r5, #4]
    8a7e:	e011      	b.n	8aa4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xc8>
    8a80:	8820      	ldrh	r0, [r4, #0]
    8a82:	f7fb fe1b 	bl	46bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    8a86:	4607      	mov	r7, r0
    8a88:	f004 fd9b 	bl	d5c2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>
    8a8c:	b108      	cbz	r0, 8a92 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb6>
    8a8e:	2000      	movs	r0, #0
    8a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a92:	706e      	strb	r6, [r5, #1]
    8a94:	200d      	movs	r0, #13
    8a96:	7028      	strb	r0, [r5, #0]
    8a98:	f8d4 01d4 	ldr.w	r0, [r4, #468]	; 0x1d4
    8a9c:	6068      	str	r0, [r5, #4]
    8a9e:	f8b4 01d8 	ldrh.w	r0, [r4, #472]	; 0x1d8
    8aa2:	8128      	strh	r0, [r5, #8]
    8aa4:	f884 61d2 	strb.w	r6, [r4, #466]	; 0x1d2
    8aa8:	4638      	mov	r0, r7
    8aaa:	f004 fda5 	bl	d5f8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>
    8aae:	e099      	b.n	8be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8ab0:	e7ff      	b.n	8ab2 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xd6>
    8ab2:	f894 018e 	ldrb.w	r0, [r4, #398]	; 0x18e
    8ab6:	f88d 0000 	strb.w	r0, [sp]
    8aba:	9800      	ldr	r0, [sp, #0]
    8abc:	9000      	str	r0, [sp, #0]
    8abe:	f89d 0000 	ldrb.w	r0, [sp]
    8ac2:	b130      	cbz	r0, 8ad2 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xf6>
    8ac4:	706e      	strb	r6, [r5, #1]
    8ac6:	2010      	movs	r0, #16
    8ac8:	7028      	strb	r0, [r5, #0]
    8aca:	80af      	strh	r7, [r5, #4]
    8acc:	f884 618e 	strb.w	r6, [r4, #398]	; 0x18e
    8ad0:	e088      	b.n	8be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8ad2:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    8ad6:	f88d 0000 	strb.w	r0, [sp]
    8ada:	9800      	ldr	r0, [sp, #0]
    8adc:	9000      	str	r0, [sp, #0]
    8ade:	f89d 0000 	ldrb.w	r0, [sp]
    8ae2:	b1c8      	cbz	r0, 8b18 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x13c>
    8ae4:	706e      	strb	r6, [r5, #1]
    8ae6:	2015      	movs	r0, #21
    8ae8:	7028      	strb	r0, [r5, #0]
    8aea:	e00a      	b.n	8b02 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x126>
    8aec:	f884 6190 	strb.w	r6, [r4, #400]	; 0x190
    8af0:	f8d4 0192 	ldr.w	r0, [r4, #402]	; 0x192
    8af4:	6068      	str	r0, [r5, #4]
    8af6:	f8d4 0196 	ldr.w	r0, [r4, #406]	; 0x196
    8afa:	60a8      	str	r0, [r5, #8]
    8afc:	f8d4 019a 	ldr.w	r0, [r4, #410]	; 0x19a
    8b00:	60e8      	str	r0, [r5, #12]
    8b02:	f894 0190 	ldrb.w	r0, [r4, #400]	; 0x190
    8b06:	f88d 0000 	strb.w	r0, [sp]
    8b0a:	9800      	ldr	r0, [sp, #0]
    8b0c:	9000      	str	r0, [sp, #0]
    8b0e:	f89d 0000 	ldrb.w	r0, [sp]
    8b12:	2800      	cmp	r0, #0
    8b14:	d1ea      	bne.n	8aec <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x110>
    8b16:	e065      	b.n	8be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8b18:	f894 019e 	ldrb.w	r0, [r4, #414]	; 0x19e
    8b1c:	f88d 0000 	strb.w	r0, [sp]
    8b20:	9800      	ldr	r0, [sp, #0]
    8b22:	9000      	str	r0, [sp, #0]
    8b24:	f89d 0000 	ldrb.w	r0, [sp]
    8b28:	b158      	cbz	r0, 8b42 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x166>
    8b2a:	706e      	strb	r6, [r5, #1]
    8b2c:	201c      	movs	r0, #28
    8b2e:	7028      	strb	r0, [r5, #0]
    8b30:	220a      	movs	r2, #10
    8b32:	f504 71d0 	add.w	r1, r4, #416	; 0x1a0
    8b36:	1d28      	adds	r0, r5, #4
    8b38:	f003 fdd2 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    8b3c:	f884 619e 	strb.w	r6, [r4, #414]	; 0x19e
    8b40:	e050      	b.n	8be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8b42:	f894 01aa 	ldrb.w	r0, [r4, #426]	; 0x1aa
    8b46:	f88d 0000 	strb.w	r0, [sp]
    8b4a:	9800      	ldr	r0, [sp, #0]
    8b4c:	9000      	str	r0, [sp, #0]
    8b4e:	f89d 0000 	ldrb.w	r0, [sp]
    8b52:	b140      	cbz	r0, 8b66 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x18a>
    8b54:	706e      	strb	r6, [r5, #1]
    8b56:	201d      	movs	r0, #29
    8b58:	7028      	strb	r0, [r5, #0]
    8b5a:	f8d4 01ac 	ldr.w	r0, [r4, #428]	; 0x1ac
    8b5e:	6068      	str	r0, [r5, #4]
    8b60:	f884 61aa 	strb.w	r6, [r4, #426]	; 0x1aa
    8b64:	e03e      	b.n	8be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8b66:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8b6a:	f88d 0000 	strb.w	r0, [sp]
    8b6e:	9800      	ldr	r0, [sp, #0]
    8b70:	9000      	str	r0, [sp, #0]
    8b72:	f89d 0000 	ldrb.w	r0, [sp]
    8b76:	b198      	cbz	r0, 8ba0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1c4>
    8b78:	706e      	strb	r6, [r5, #1]
    8b7a:	201a      	movs	r0, #26
    8b7c:	7028      	strb	r0, [r5, #0]
    8b7e:	e004      	b.n	8b8a <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1ae>
    8b80:	f884 6188 	strb.w	r6, [r4, #392]	; 0x188
    8b84:	f8d4 018a 	ldr.w	r0, [r4, #394]	; 0x18a
    8b88:	6068      	str	r0, [r5, #4]
    8b8a:	f894 0188 	ldrb.w	r0, [r4, #392]	; 0x188
    8b8e:	f88d 0000 	strb.w	r0, [sp]
    8b92:	9800      	ldr	r0, [sp, #0]
    8b94:	9000      	str	r0, [sp, #0]
    8b96:	f89d 0000 	ldrb.w	r0, [sp]
    8b9a:	2800      	cmp	r0, #0
    8b9c:	d1f0      	bne.n	8b80 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1a4>
    8b9e:	e021      	b.n	8be4 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x208>
    8ba0:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8ba4:	f88d 0000 	strb.w	r0, [sp]
    8ba8:	9800      	ldr	r0, [sp, #0]
    8baa:	9000      	str	r0, [sp, #0]
    8bac:	f89d 0000 	ldrb.w	r0, [sp]
    8bb0:	2800      	cmp	r0, #0
    8bb2:	f43f af6d 	beq.w	8a90 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0xb4>
    8bb6:	706e      	strb	r6, [r5, #1]
    8bb8:	2016      	movs	r0, #22
    8bba:	7028      	strb	r0, [r5, #0]
    8bbc:	e008      	b.n	8bd0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1f4>
    8bbe:	bf00      	nop
    8bc0:	f884 61b0 	strb.w	r6, [r4, #432]	; 0x1b0
    8bc4:	f8d4 01b2 	ldr.w	r0, [r4, #434]	; 0x1b2
    8bc8:	6068      	str	r0, [r5, #4]
    8bca:	f8b4 01b6 	ldrh.w	r0, [r4, #438]	; 0x1b6
    8bce:	8128      	strh	r0, [r5, #8]
    8bd0:	f894 01b0 	ldrb.w	r0, [r4, #432]	; 0x1b0
    8bd4:	f88d 0000 	strb.w	r0, [sp]
    8bd8:	9800      	ldr	r0, [sp, #0]
    8bda:	9000      	str	r0, [sp, #0]
    8bdc:	f89d 0000 	ldrb.w	r0, [sp]
    8be0:	2800      	cmp	r0, #0
    8be2:	d1ed      	bne.n	8bc0 <sym_7O4TUQ5M7Q3KRCIQ2SPFGVQDIFYV727FSNLFGKI+0x1e4>
    8be4:	2001      	movs	r0, #1
    8be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008be8 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA>:
    8be8:	b570      	push	{r4, r5, r6, lr}
    8bea:	4605      	mov	r5, r0
    8bec:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    8bf0:	f895 1089 	ldrb.w	r1, [r5, #137]	; 0x89
    8bf4:	b1c9      	cbz	r1, 8c2a <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x42>
    8bf6:	f8b5 10b0 	ldrh.w	r1, [r5, #176]	; 0xb0
    8bfa:	1a0c      	subs	r4, r1, r0
    8bfc:	f1b4 0404 	subs.w	r4, r4, #4
    8c00:	f895 00ac 	ldrb.w	r0, [r5, #172]	; 0xac
    8c04:	b140      	cbz	r0, 8c18 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x30>
    8c06:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    8c0a:	2300      	movs	r3, #0
    8c0c:	2109      	movs	r1, #9
    8c0e:	f105 0078 	add.w	r0, r5, #120	; 0x78
    8c12:	f004 ffca 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8c16:	b160      	cbz	r0, 8c32 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8c18:	4628      	mov	r0, r5
    8c1a:	f005 ffe7 	bl	ebec <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    8c1e:	b138      	cbz	r0, 8c30 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x48>
    8c20:	e9d5 1028 	ldrd	r1, r0, [r5, #160]	; 0xa0
    8c24:	1a40      	subs	r0, r0, r1
    8c26:	1f00      	subs	r0, r0, #4
    8c28:	e003      	b.n	8c32 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x4a>
    8c2a:	f1c0 0402 	rsb	r4, r0, #2
    8c2e:	e7e7      	b.n	8c00 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x18>
    8c30:	4620      	mov	r0, r4
    8c32:	42a0      	cmp	r0, r4
    8c34:	da00      	bge.n	8c38 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x50>
    8c36:	4604      	mov	r4, r0
    8c38:	2c00      	cmp	r4, #0
    8c3a:	dc01      	bgt.n	8c40 <sym_XMSQSHOMUQJNNSSEXDAX4NHMQIFY5G5ZMQIBDRA+0x58>
    8c3c:	2000      	movs	r0, #0
    8c3e:	bd70      	pop	{r4, r5, r6, pc}
    8c40:	b2a0      	uxth	r0, r4
    8c42:	bd70      	pop	{r4, r5, r6, pc}

00008c44 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>:
    8c44:	481b      	ldr	r0, [pc, #108]	; (8cb4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x70>)
    8c46:	491a      	ldr	r1, [pc, #104]	; (8cb0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x6c>)
    8c48:	6081      	str	r1, [r0, #8]
    8c4a:	491b      	ldr	r1, [pc, #108]	; (8cb8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x74>)
    8c4c:	61c1      	str	r1, [r0, #28]
    8c4e:	491b      	ldr	r1, [pc, #108]	; (8cbc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x78>)
    8c50:	62c1      	str	r1, [r0, #44]	; 0x2c
    8c52:	491b      	ldr	r1, [pc, #108]	; (8cc0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x7c>)
    8c54:	6101      	str	r1, [r0, #16]
    8c56:	491b      	ldr	r1, [pc, #108]	; (8cc4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x80>)
    8c58:	6141      	str	r1, [r0, #20]
    8c5a:	491b      	ldr	r1, [pc, #108]	; (8cc8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x84>)
    8c5c:	6441      	str	r1, [r0, #68]	; 0x44
    8c5e:	491b      	ldr	r1, [pc, #108]	; (8ccc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x88>)
    8c60:	6181      	str	r1, [r0, #24]
    8c62:	491b      	ldr	r1, [pc, #108]	; (8cd0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x8c>)
    8c64:	6301      	str	r1, [r0, #48]	; 0x30
    8c66:	491b      	ldr	r1, [pc, #108]	; (8cd4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x90>)
    8c68:	6241      	str	r1, [r0, #36]	; 0x24
    8c6a:	491b      	ldr	r1, [pc, #108]	; (8cd8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x94>)
    8c6c:	64c1      	str	r1, [r0, #76]	; 0x4c
    8c6e:	491b      	ldr	r1, [pc, #108]	; (8cdc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x98>)
    8c70:	6481      	str	r1, [r0, #72]	; 0x48
    8c72:	491b      	ldr	r1, [pc, #108]	; (8ce0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0x9c>)
    8c74:	6341      	str	r1, [r0, #52]	; 0x34
    8c76:	481c      	ldr	r0, [pc, #112]	; (8ce8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa4>)
    8c78:	491a      	ldr	r1, [pc, #104]	; (8ce4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa0>)
    8c7a:	6081      	str	r1, [r0, #8]
    8c7c:	491b      	ldr	r1, [pc, #108]	; (8cec <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xa8>)
    8c7e:	61c1      	str	r1, [r0, #28]
    8c80:	491b      	ldr	r1, [pc, #108]	; (8cf0 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xac>)
    8c82:	6201      	str	r1, [r0, #32]
    8c84:	491b      	ldr	r1, [pc, #108]	; (8cf4 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb0>)
    8c86:	6041      	str	r1, [r0, #4]
    8c88:	491b      	ldr	r1, [pc, #108]	; (8cf8 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb4>)
    8c8a:	6001      	str	r1, [r0, #0]
    8c8c:	491b      	ldr	r1, [pc, #108]	; (8cfc <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xb8>)
    8c8e:	6281      	str	r1, [r0, #40]	; 0x28
    8c90:	491b      	ldr	r1, [pc, #108]	; (8d00 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xbc>)
    8c92:	62c1      	str	r1, [r0, #44]	; 0x2c
    8c94:	491b      	ldr	r1, [pc, #108]	; (8d04 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc0>)
    8c96:	60c1      	str	r1, [r0, #12]
    8c98:	491b      	ldr	r1, [pc, #108]	; (8d08 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc4>)
    8c9a:	6181      	str	r1, [r0, #24]
    8c9c:	491b      	ldr	r1, [pc, #108]	; (8d0c <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xc8>)
    8c9e:	6301      	str	r1, [r0, #48]	; 0x30
    8ca0:	491b      	ldr	r1, [pc, #108]	; (8d10 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xcc>)
    8ca2:	6481      	str	r1, [r0, #72]	; 0x48
    8ca4:	491b      	ldr	r1, [pc, #108]	; (8d14 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd0>)
    8ca6:	64c1      	str	r1, [r0, #76]	; 0x4c
    8ca8:	491b      	ldr	r1, [pc, #108]	; (8d18 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY+0xd4>)
    8caa:	6441      	str	r1, [r0, #68]	; 0x44
    8cac:	4770      	bx	lr
    8cae:	0000      	.short	0x0000
    8cb0:	00009f91 	.word	0x00009f91
    8cb4:	2000012c 	.word	0x2000012c
    8cb8:	00009fcd 	.word	0x00009fcd
    8cbc:	00009ca5 	.word	0x00009ca5
    8cc0:	000099e5 	.word	0x000099e5
    8cc4:	00009edd 	.word	0x00009edd
    8cc8:	00009e41 	.word	0x00009e41
    8ccc:	00009f1d 	.word	0x00009f1d
    8cd0:	0000a069 	.word	0x0000a069
    8cd4:	00009a1d 	.word	0x00009a1d
    8cd8:	00009c79 	.word	0x00009c79
    8cdc:	00009c45 	.word	0x00009c45
    8ce0:	00009ecd 	.word	0x00009ecd
    8ce4:	0000a3e9 	.word	0x0000a3e9
    8ce8:	20000190 	.word	0x20000190
    8cec:	0000a419 	.word	0x0000a419
    8cf0:	0000a1d5 	.word	0x0000a1d5
    8cf4:	0000a139 	.word	0x0000a139
    8cf8:	0000a169 	.word	0x0000a169
    8cfc:	0000a2a5 	.word	0x0000a2a5
    8d00:	0000a2d9 	.word	0x0000a2d9
    8d04:	0000a199 	.word	0x0000a199
    8d08:	0000a3c5 	.word	0x0000a3c5
    8d0c:	0000a459 	.word	0x0000a459
    8d10:	0000a265 	.word	0x0000a265
    8d14:	0000a295 	.word	0x0000a295
    8d18:	0000a3b1 	.word	0x0000a3b1

00008d1c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>:
    8d1c:	4806      	ldr	r0, [pc, #24]	; (8d38 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x1c>)
    8d1e:	4905      	ldr	r1, [pc, #20]	; (8d34 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x18>)
    8d20:	6581      	str	r1, [r0, #88]	; 0x58
    8d22:	4906      	ldr	r1, [pc, #24]	; (8d3c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x20>)
    8d24:	65c1      	str	r1, [r0, #92]	; 0x5c
    8d26:	4807      	ldr	r0, [pc, #28]	; (8d44 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x28>)
    8d28:	4905      	ldr	r1, [pc, #20]	; (8d40 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x24>)
    8d2a:	6581      	str	r1, [r0, #88]	; 0x58
    8d2c:	4906      	ldr	r1, [pc, #24]	; (8d48 <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY+0x2c>)
    8d2e:	6601      	str	r1, [r0, #96]	; 0x60
    8d30:	4770      	bx	lr
    8d32:	0000      	.short	0x0000
    8d34:	00009cc9 	.word	0x00009cc9
    8d38:	2000012c 	.word	0x2000012c
    8d3c:	00009dd9 	.word	0x00009dd9
    8d40:	0000a305 	.word	0x0000a305
    8d44:	20000190 	.word	0x20000190
    8d48:	0000a335 	.word	0x0000a335

00008d4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA>:
    8d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8d4e:	4d36      	ldr	r5, [pc, #216]	; (8e28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdc>)
    8d50:	2600      	movs	r6, #0
    8d52:	4604      	mov	r4, r0
    8d54:	6068      	str	r0, [r5, #4]
    8d56:	806e      	strh	r6, [r5, #2]
    8d58:	706e      	strb	r6, [r5, #1]
    8d5a:	702e      	strb	r6, [r5, #0]
    8d5c:	8800      	ldrh	r0, [r0, #0]
    8d5e:	f7fb fedd 	bl	4b1c <sym_NKFCLZ5HTE6KVHDV5DGZ6TJP4KSZI43SYBECPRY>
    8d62:	6868      	ldr	r0, [r5, #4]
    8d64:	8800      	ldrh	r0, [r0, #0]
    8d66:	f7fb fe81 	bl	4a6c <sym_IXGTNRGKILIZPWG2NJIZ2ALUPW2IM3XFVCGJW2I>
    8d6a:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    8d6e:	6869      	ldr	r1, [r5, #4]
    8d70:	1c40      	adds	r0, r0, #1
    8d72:	b282      	uxth	r2, r0
    8d74:	f101 0078 	add.w	r0, r1, #120	; 0x78
    8d78:	f005 f8d1 	bl	df1e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>
    8d7c:	b120      	cbz	r0, 8d88 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c>
    8d7e:	f44f 71ac 	mov.w	r1, #344	; 0x158
    8d82:	2036      	movs	r0, #54	; 0x36
    8d84:	f7fb f89c 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    8d88:	f8a4 6122 	strh.w	r6, [r4, #290]	; 0x122
    8d8c:	f894 1086 	ldrb.w	r1, [r4, #134]	; 0x86
    8d90:	4630      	mov	r0, r6
    8d92:	2924      	cmp	r1, #36	; 0x24
    8d94:	d10a      	bne.n	8dac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8d96:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8d9a:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8d9e:	1a51      	subs	r1, r2, r1
    8da0:	b209      	sxth	r1, r1
    8da2:	2900      	cmp	r1, #0
    8da4:	db02      	blt.n	8dac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x60>
    8da6:	f884 0086 	strb.w	r0, [r4, #134]	; 0x86
    8daa:	e00f      	b.n	8dcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x80>
    8dac:	f894 1085 	ldrb.w	r1, [r4, #133]	; 0x85
    8db0:	2924      	cmp	r1, #36	; 0x24
    8db2:	d001      	beq.n	8db8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x6c>
    8db4:	2925      	cmp	r1, #37	; 0x25
    8db6:	d10c      	bne.n	8dd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8db8:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
    8dbc:	f8b4 1124 	ldrh.w	r1, [r4, #292]	; 0x124
    8dc0:	1a51      	subs	r1, r2, r1
    8dc2:	b209      	sxth	r1, r1
    8dc4:	2900      	cmp	r1, #0
    8dc6:	db04      	blt.n	8dd2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x86>
    8dc8:	f884 0085 	strb.w	r0, [r4, #133]	; 0x85
    8dcc:	f000 fd5a 	bl	9884 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb38>
    8dd0:	b318      	cbz	r0, 8e1a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xce>
    8dd2:	f000 fbfd 	bl	95d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    8dd6:	2800      	cmp	r0, #0
    8dd8:	d125      	bne.n	8e26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8dda:	6868      	ldr	r0, [r5, #4]
    8ddc:	3078      	adds	r0, #120	; 0x78
    8dde:	f005 fe7a 	bl	ead6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8de2:	b120      	cbz	r0, 8dee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2>
    8de4:	6868      	ldr	r0, [r5, #4]
    8de6:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    8dea:	f000 faad 	bl	9348 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5fc>
    8dee:	480f      	ldr	r0, [pc, #60]	; (8e2c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe0>)
    8df0:	9000      	str	r0, [sp, #0]
    8df2:	4b0f      	ldr	r3, [pc, #60]	; (8e30 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe4>)
    8df4:	4a0f      	ldr	r2, [pc, #60]	; (8e34 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe8>)
    8df6:	4621      	mov	r1, r4
    8df8:	4630      	mov	r0, r6
    8dfa:	f7fb ff39 	bl	4c70 <sym_SQINY6V2VHFAHM5HL3H753H3QE3VQ7FWHCIJ57Q>
    8dfe:	6868      	ldr	r0, [r5, #4]
    8e00:	2300      	movs	r3, #0
    8e02:	2105      	movs	r1, #5
    8e04:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8e08:	3078      	adds	r0, #120	; 0x78
    8e0a:	f004 fece 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8e0e:	2800      	cmp	r0, #0
    8e10:	d009      	beq.n	8e26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xda>
    8e12:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8e16:	f7fb bf25 	b.w	4c64 <sym_4OWM6DBJ6JLAWH2MVU52MKC56VOOJLN34T33LQA>
    8e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    8e1e:	2100      	movs	r1, #0
    8e20:	4608      	mov	r0, r1
    8e22:	f000 bb81 	b.w	9528 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    8e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e28:	2000011c 	.word	0x2000011c
    8e2c:	00009529 	.word	0x00009529
    8e30:	00008f59 	.word	0x00008f59
    8e34:	000097fd 	.word	0x000097fd
    8e38:	4411      	add	r1, r2
    8e3a:	78c2      	ldrb	r2, [r0, #3]
    8e3c:	480c      	ldr	r0, [pc, #48]	; (8e70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x124>)
    8e3e:	1d89      	adds	r1, r1, #6
    8e40:	b289      	uxth	r1, r1
    8e42:	6840      	ldr	r0, [r0, #4]
    8e44:	2a01      	cmp	r2, #1
    8e46:	d006      	beq.n	8e56 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10a>
    8e48:	b142      	cbz	r2, 8e5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x110>
    8e4a:	2a18      	cmp	r2, #24
    8e4c:	d105      	bne.n	8e5a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10e>
    8e4e:	f890 2126 	ldrb.w	r2, [r0, #294]	; 0x126
    8e52:	b132      	cbz	r2, 8e62 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x116>
    8e54:	e009      	b.n	8e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8e56:	f8a0 1130 	strh.w	r1, [r0, #304]	; 0x130
    8e5a:	4770      	bx	lr
    8e5c:	f8a0 1146 	strh.w	r1, [r0, #326]	; 0x146
    8e60:	4770      	bx	lr
    8e62:	f890 2127 	ldrb.w	r2, [r0, #295]	; 0x127
    8e66:	b902      	cbnz	r2, 8e6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e>
    8e68:	2100      	movs	r1, #0
    8e6a:	f8a0 1124 	strh.w	r1, [r0, #292]	; 0x124
    8e6e:	4770      	bx	lr
    8e70:	2000011c 	.word	0x2000011c
    8e74:	490b      	ldr	r1, [pc, #44]	; (8ea4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x158>)
    8e76:	78c2      	ldrb	r2, [r0, #3]
    8e78:	6849      	ldr	r1, [r1, #4]
    8e7a:	2a01      	cmp	r2, #1
    8e7c:	d006      	beq.n	8e8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140>
    8e7e:	b15a      	cbz	r2, 8e98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14c>
    8e80:	2a18      	cmp	r2, #24
    8e82:	d108      	bne.n	8e96 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a>
    8e84:	f8b1 1124 	ldrh.w	r1, [r1, #292]	; 0x124
    8e88:	f005 b92f 	b.w	e0ea <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>
    8e8c:	f8b1 1130 	ldrh.w	r1, [r1, #304]	; 0x130
    8e90:	7241      	strb	r1, [r0, #9]
    8e92:	0a09      	lsrs	r1, r1, #8
    8e94:	7281      	strb	r1, [r0, #10]
    8e96:	4770      	bx	lr
    8e98:	f8b1 1146 	ldrh.w	r1, [r1, #326]	; 0x146
    8e9c:	7341      	strb	r1, [r0, #13]
    8e9e:	0a09      	lsrs	r1, r1, #8
    8ea0:	7381      	strb	r1, [r0, #14]
    8ea2:	4770      	bx	lr
    8ea4:	2000011c 	.word	0x2000011c
    8ea8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    8eaa:	4c2a      	ldr	r4, [pc, #168]	; (8f54 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x208>)
    8eac:	2300      	movs	r3, #0
    8eae:	4619      	mov	r1, r3
    8eb0:	6860      	ldr	r0, [r4, #4]
    8eb2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8eb6:	3078      	adds	r0, #120	; 0x78
    8eb8:	f004 fe77 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8ebc:	2800      	cmp	r0, #0
    8ebe:	d048      	beq.n	8f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8ec0:	6860      	ldr	r0, [r4, #4]
    8ec2:	f890 112e 	ldrb.w	r1, [r0, #302]	; 0x12e
    8ec6:	f88d 1000 	strb.w	r1, [sp]
    8eca:	9900      	ldr	r1, [sp, #0]
    8ecc:	9100      	str	r1, [sp, #0]
    8ece:	f89d 1000 	ldrb.w	r1, [sp]
    8ed2:	2900      	cmp	r1, #0
    8ed4:	d03d      	beq.n	8f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8ed6:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    8eda:	f004 febf 	bl	dc5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    8ede:	2800      	cmp	r0, #0
    8ee0:	d137      	bne.n	8f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8ee2:	6860      	ldr	r0, [r4, #4]
    8ee4:	f8b0 007c 	ldrh.w	r0, [r0, #124]	; 0x7c
    8ee8:	280a      	cmp	r0, #10
    8eea:	d932      	bls.n	8f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8eec:	4668      	mov	r0, sp
    8eee:	f7fc ff59 	bl	5da4 <sym_RQLOJUGFCKCS5YSXHMF5LIHXPBLO5AO63KQE3GQ>
    8ef2:	2800      	cmp	r0, #0
    8ef4:	d02d      	beq.n	8f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8ef6:	6861      	ldr	r1, [r4, #4]
    8ef8:	2205      	movs	r2, #5
    8efa:	4668      	mov	r0, sp
    8efc:	318e      	adds	r1, #142	; 0x8e
    8efe:	f003 fbdd 	bl	c6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8f02:	2500      	movs	r5, #0
    8f04:	b310      	cbz	r0, 8f4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x200>
    8f06:	6860      	ldr	r0, [r4, #4]
    8f08:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8f0c:	7808      	ldrb	r0, [r1, #0]
    8f0e:	b158      	cbz	r0, 8f28 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1dc>
    8f10:	2205      	movs	r2, #5
    8f12:	4668      	mov	r0, sp
    8f14:	1c49      	adds	r1, r1, #1
    8f16:	f003 fbd1 	bl	c6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    8f1a:	2800      	cmp	r0, #0
    8f1c:	d119      	bne.n	8f52 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x206>
    8f1e:	6860      	ldr	r0, [r4, #4]
    8f20:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8f24:	7800      	ldrb	r0, [r0, #0]
    8f26:	b940      	cbnz	r0, 8f3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1ee>
    8f28:	6860      	ldr	r0, [r4, #4]
    8f2a:	9900      	ldr	r1, [sp, #0]
    8f2c:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    8f30:	f8c0 1001 	str.w	r1, [r0, #1]
    8f34:	f89d 1004 	ldrb.w	r1, [sp, #4]
    8f38:	7141      	strb	r1, [r0, #5]
    8f3a:	6860      	ldr	r0, [r4, #4]
    8f3c:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    8f40:	7808      	ldrb	r0, [r1, #0]
    8f42:	1c40      	adds	r0, r0, #1
    8f44:	7008      	strb	r0, [r1, #0]
    8f46:	2001      	movs	r0, #1
    8f48:	f000 fd04 	bl	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    8f4c:	6860      	ldr	r0, [r4, #4]
    8f4e:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
    8f52:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    8f54:	2000011c 	.word	0x2000011c
    8f58:	4a0c      	ldr	r2, [pc, #48]	; (8f8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x240>)
    8f5a:	7851      	ldrb	r1, [r2, #1]
    8f5c:	b999      	cbnz	r1, 8f86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8f5e:	4611      	mov	r1, r2
    8f60:	2801      	cmp	r0, #1
    8f62:	6849      	ldr	r1, [r1, #4]
    8f64:	d008      	beq.n	8f78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x22c>
    8f66:	7890      	ldrb	r0, [r2, #2]
    8f68:	0740      	lsls	r0, r0, #29
    8f6a:	d503      	bpl.n	8f74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x228>
    8f6c:	f891 0088 	ldrb.w	r0, [r1, #136]	; 0x88
    8f70:	2807      	cmp	r0, #7
    8f72:	d008      	beq.n	8f86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8f74:	2001      	movs	r0, #1
    8f76:	4770      	bx	lr
    8f78:	f8b1 0050 	ldrh.w	r0, [r1, #80]	; 0x50
    8f7c:	8e89      	ldrh	r1, [r1, #52]	; 0x34
    8f7e:	4288      	cmp	r0, r1
    8f80:	d801      	bhi.n	8f86 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x23a>
    8f82:	f7fe bd5d 	b.w	7a40 <sym_SVA6DLBGPY6XV2V2F4HOMHWDPSDIRD722L2FDEI>
    8f86:	2000      	movs	r0, #0
    8f88:	4770      	bx	lr
    8f8a:	0000      	.short	0x0000
    8f8c:	2000011c 	.word	0x2000011c
    8f90:	b538      	push	{r3, r4, r5, lr}
    8f92:	4c87      	ldr	r4, [pc, #540]	; (91b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x464>)
    8f94:	6860      	ldr	r0, [r4, #4]
    8f96:	3078      	adds	r0, #120	; 0x78
    8f98:	f005 fd9d 	bl	ead6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    8f9c:	2800      	cmp	r0, #0
    8f9e:	d15b      	bne.n	9058 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8fa0:	6860      	ldr	r0, [r4, #4]
    8fa2:	2300      	movs	r3, #0
    8fa4:	2101      	movs	r1, #1
    8fa6:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    8faa:	3078      	adds	r0, #120	; 0x78
    8fac:	f004 fdfd 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fb0:	2800      	cmp	r0, #0
    8fb2:	d151      	bne.n	9058 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    8fb4:	6860      	ldr	r0, [r4, #4]
    8fb6:	f890 113c 	ldrb.w	r1, [r0, #316]	; 0x13c
    8fba:	f88d 1000 	strb.w	r1, [sp]
    8fbe:	9900      	ldr	r1, [sp, #0]
    8fc0:	9100      	str	r1, [sp, #0]
    8fc2:	f89d 1000 	ldrb.w	r1, [sp]
    8fc6:	b109      	cbz	r1, 8fcc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x280>
    8fc8:	2002      	movs	r0, #2
    8fca:	e038      	b.n	903e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8fcc:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8fd0:	2300      	movs	r3, #0
    8fd2:	4619      	mov	r1, r3
    8fd4:	3078      	adds	r0, #120	; 0x78
    8fd6:	f004 fde8 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    8fda:	b128      	cbz	r0, 8fe8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8fdc:	6860      	ldr	r0, [r4, #4]
    8fde:	f890 00ac 	ldrb.w	r0, [r0, #172]	; 0xac
    8fe2:	b108      	cbz	r0, 8fe8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x29c>
    8fe4:	2012      	movs	r0, #18
    8fe6:	e02a      	b.n	903e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    8fe8:	6860      	ldr	r0, [r4, #4]
    8fea:	2500      	movs	r5, #0
    8fec:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    8ff0:	2a12      	cmp	r2, #18
    8ff2:	d01d      	beq.n	9030 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e4>
    8ff4:	dc04      	bgt.n	9000 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2b4>
    8ff6:	2a03      	cmp	r2, #3
    8ff8:	d025      	beq.n	9046 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2fa>
    8ffa:	2a11      	cmp	r2, #17
    8ffc:	d104      	bne.n	9008 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2bc>
    8ffe:	e019      	b.n	9034 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2e8>
    9000:	2a18      	cmp	r2, #24
    9002:	d01b      	beq.n	903c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f0>
    9004:	2a23      	cmp	r2, #35	; 0x23
    9006:	d028      	beq.n	905a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30e>
    9008:	2300      	movs	r3, #0
    900a:	2104      	movs	r1, #4
    900c:	3078      	adds	r0, #120	; 0x78
    900e:	f004 fdcc 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9012:	2800      	cmp	r0, #0
    9014:	d120      	bne.n	9058 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x30c>
    9016:	6860      	ldr	r0, [r4, #4]
    9018:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    901c:	2919      	cmp	r1, #25
    901e:	d07c      	beq.n	911a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3ce>
    9020:	dc22      	bgt.n	9068 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31c>
    9022:	2901      	cmp	r1, #1
    9024:	d02c      	beq.n	9080 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x334>
    9026:	2902      	cmp	r1, #2
    9028:	d037      	beq.n	909a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34e>
    902a:	2903      	cmp	r1, #3
    902c:	d134      	bne.n	9098 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x34c>
    902e:	e022      	b.n	9076 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x32a>
    9030:	200b      	movs	r0, #11
    9032:	e004      	b.n	903e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x2f2>
    9034:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9038:	f000 bba0 	b.w	977c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    903c:	2006      	movs	r0, #6
    903e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9042:	f000 bc87 	b.w	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9046:	f810 1ffa 	ldrb.w	r1, [r0, #250]!
    904a:	7101      	strb	r1, [r0, #4]
    904c:	2007      	movs	r0, #7
    904e:	f000 fc81 	bl	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9052:	6860      	ldr	r0, [r4, #4]
    9054:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9058:	bd38      	pop	{r3, r4, r5, pc}
    905a:	2018      	movs	r0, #24
    905c:	f000 fc7a 	bl	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9060:	6860      	ldr	r0, [r4, #4]
    9062:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    9066:	bd38      	pop	{r3, r4, r5, pc}
    9068:	291d      	cmp	r1, #29
    906a:	d018      	beq.n	909e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    906c:	291e      	cmp	r1, #30
    906e:	d016      	beq.n	909e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x352>
    9070:	2921      	cmp	r1, #33	; 0x21
    9072:	d176      	bne.n	9162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9074:	e056      	b.n	9124 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d8>
    9076:	f810 1ff9 	ldrb.w	r1, [r0, #249]!
    907a:	7141      	strb	r1, [r0, #5]
    907c:	2007      	movs	r0, #7
    907e:	e07e      	b.n	917e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x432>
    9080:	200c      	movs	r0, #12
    9082:	f000 fc67 	bl	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9086:	6860      	ldr	r0, [r4, #4]
    9088:	f820 5fba 	strh.w	r5, [r0, #186]!
    908c:	7981      	ldrb	r1, [r0, #6]
    908e:	f041 0101 	orr.w	r1, r1, #1
    9092:	7181      	strb	r1, [r0, #6]
    9094:	f800 5c34 	strb.w	r5, [r0, #-52]
    9098:	e063      	b.n	9162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    909a:	2013      	movs	r0, #19
    909c:	e037      	b.n	910e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3c2>
    909e:	f890 2133 	ldrb.w	r2, [r0, #307]	; 0x133
    90a2:	f88d 2000 	strb.w	r2, [sp]
    90a6:	9a00      	ldr	r2, [sp, #0]
    90a8:	9200      	str	r2, [sp, #0]
    90aa:	f89d 2000 	ldrb.w	r2, [sp]
    90ae:	bbaa      	cbnz	r2, 911c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d0>
    90b0:	f890 2132 	ldrb.w	r2, [r0, #306]	; 0x132
    90b4:	f88d 2000 	strb.w	r2, [sp]
    90b8:	9a00      	ldr	r2, [sp, #0]
    90ba:	9200      	str	r2, [sp, #0]
    90bc:	f89d 2000 	ldrb.w	r2, [sp]
    90c0:	b1aa      	cbz	r2, 90ee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a2>
    90c2:	2924      	cmp	r1, #36	; 0x24
    90c4:	d011      	beq.n	90ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    90c6:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    90ca:	2924      	cmp	r1, #36	; 0x24
    90cc:	d00d      	beq.n	90ea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x39e>
    90ce:	2300      	movs	r3, #0
    90d0:	f500 7293 	add.w	r2, r0, #294	; 0x126
    90d4:	f500 7199 	add.w	r1, r0, #306	; 0x132
    90d8:	f005 f943 	bl	e362 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    90dc:	6860      	ldr	r0, [r4, #4]
    90de:	211e      	movs	r1, #30
    90e0:	f880 1086 	strb.w	r1, [r0, #134]	; 0x86
    90e4:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    90e8:	e003      	b.n	90f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3a6>
    90ea:	2301      	movs	r3, #1
    90ec:	e7f0      	b.n	90d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x384>
    90ee:	291e      	cmp	r1, #30
    90f0:	d137      	bne.n	9162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    90f2:	6860      	ldr	r0, [r4, #4]
    90f4:	f005 f950 	bl	e398 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    90f8:	f000 f85c 	bl	91b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    90fc:	6861      	ldr	r1, [r4, #4]
    90fe:	f101 002c 	add.w	r0, r1, #44	; 0x2c
    9102:	8bc2      	ldrh	r2, [r0, #30]
    9104:	f821 2ffe 	strh.w	r2, [r1, #254]!
    9108:	8c40      	ldrh	r0, [r0, #34]	; 0x22
    910a:	8048      	strh	r0, [r1, #2]
    910c:	2015      	movs	r0, #21
    910e:	f000 fc21 	bl	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9112:	6860      	ldr	r0, [r4, #4]
    9114:	f8a0 50ba 	strh.w	r5, [r0, #186]	; 0xba
    9118:	e001      	b.n	911e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3d2>
    911a:	e02f      	b.n	917c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x430>
    911c:	e021      	b.n	9162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    911e:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    9122:	e01e      	b.n	9162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9124:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9128:	2901      	cmp	r1, #1
    912a:	d108      	bne.n	913e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3f2>
    912c:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    9130:	f88d 1000 	strb.w	r1, [sp]
    9134:	9900      	ldr	r1, [sp, #0]
    9136:	9100      	str	r1, [sp, #0]
    9138:	f89d 1000 	ldrb.w	r1, [sp]
    913c:	b121      	cbz	r1, 9148 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3fc>
    913e:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    9142:	2902      	cmp	r1, #2
    9144:	d005      	beq.n	9152 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x406>
    9146:	e00c      	b.n	9162 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x416>
    9148:	f8d0 1062 	ldr.w	r1, [r0, #98]	; 0x62
    914c:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9150:	e002      	b.n	9158 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x40c>
    9152:	f850 1f62 	ldr.w	r1, [r0, #98]!
    9156:	6840      	ldr	r0, [r0, #4]
    9158:	f000 fc1e 	bl	9998 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    915c:	2018      	movs	r0, #24
    915e:	f000 fbf9 	bl	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9162:	6860      	ldr	r0, [r4, #4]
    9164:	3078      	adds	r0, #120	; 0x78
    9166:	f005 fcb6 	bl	ead6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    916a:	2800      	cmp	r0, #0
    916c:	f47f af7b 	bne.w	9066 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x31a>
    9170:	6860      	ldr	r0, [r4, #4]
    9172:	3078      	adds	r0, #120	; 0x78
    9174:	f005 fcaf 	bl	ead6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    9178:	b128      	cbz	r0, 9186 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x43a>
    917a:	e00f      	b.n	919c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    917c:	2011      	movs	r0, #17
    917e:	f000 fbe9 	bl	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9182:	6860      	ldr	r0, [r4, #4]
    9184:	e7c8      	b.n	9118 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x3cc>
    9186:	6860      	ldr	r0, [r4, #4]
    9188:	2300      	movs	r3, #0
    918a:	4619      	mov	r1, r3
    918c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9190:	3078      	adds	r0, #120	; 0x78
    9192:	f004 fd0a 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9196:	b108      	cbz	r0, 919c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x450>
    9198:	f000 fa44 	bl	9624 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d8>
    919c:	6860      	ldr	r0, [r4, #4]
    919e:	3078      	adds	r0, #120	; 0x78
    91a0:	f005 fc99 	bl	ead6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    91a4:	2800      	cmp	r0, #0
    91a6:	d1e1      	bne.n	916c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x420>
    91a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    91ac:	f7ff be7c 	b.w	8ea8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15c>
    91b0:	2000011c 	.word	0x2000011c
    91b4:	480a      	ldr	r0, [pc, #40]	; (91e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x494>)
    91b6:	b510      	push	{r4, lr}
    91b8:	6841      	ldr	r1, [r0, #4]
    91ba:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    91be:	2801      	cmp	r0, #1
    91c0:	d009      	beq.n	91d6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x48a>
    91c2:	8808      	ldrh	r0, [r1, #0]
    91c4:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    91c8:	312c      	adds	r1, #44	; 0x2c
    91ca:	f005 f8a6 	bl	e31a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    91ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    91d2:	f7fc bfb5 	b.w	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    91d6:	2002      	movs	r0, #2
    91d8:	f881 0060 	strb.w	r0, [r1, #96]	; 0x60
    91dc:	bd10      	pop	{r4, pc}
    91de:	0000      	.short	0x0000
    91e0:	2000011c 	.word	0x2000011c
    91e4:	b570      	push	{r4, r5, r6, lr}
    91e6:	4c22      	ldr	r4, [pc, #136]	; (9270 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x524>)
    91e8:	f04f 0500 	mov.w	r5, #0
    91ec:	8861      	ldrh	r1, [r4, #2]
    91ee:	0748      	lsls	r0, r1, #29
    91f0:	d510      	bpl.n	9214 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    91f2:	6860      	ldr	r0, [r4, #4]
    91f4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    91f8:	2a03      	cmp	r2, #3
    91fa:	d004      	beq.n	9206 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4ba>
    91fc:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9200:	2a07      	cmp	r2, #7
    9202:	d107      	bne.n	9214 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c8>
    9204:	e002      	b.n	920c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4c0>
    9206:	f44f 61b7 	mov.w	r1, #1464	; 0x5b8
    920a:	e026      	b.n	925a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50e>
    920c:	2201      	movs	r2, #1
    920e:	7022      	strb	r2, [r4, #0]
    9210:	f880 5088 	strb.w	r5, [r0, #136]	; 0x88
    9214:	0788      	lsls	r0, r1, #30
    9216:	d508      	bpl.n	922a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x4de>
    9218:	68a0      	ldr	r0, [r4, #8]
    921a:	78c0      	ldrb	r0, [r0, #3]
    921c:	2819      	cmp	r0, #25
    921e:	d21a      	bcs.n	9256 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    9220:	4914      	ldr	r1, [pc, #80]	; (9274 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x528>)
    9222:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    9226:	b1b0      	cbz	r0, 9256 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x50a>
    9228:	4780      	blx	r0
    922a:	f000 f867 	bl	92fc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5b0>
    922e:	f000 f823 	bl	9278 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x52c>
    9232:	4606      	mov	r6, r0
    9234:	7860      	ldrb	r0, [r4, #1]
    9236:	0700      	lsls	r0, r0, #28
    9238:	d515      	bpl.n	9266 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    923a:	6860      	ldr	r0, [r4, #4]
    923c:	2300      	movs	r3, #0
    923e:	2105      	movs	r1, #5
    9240:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9244:	3078      	adds	r0, #120	; 0x78
    9246:	f004 fcb0 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    924a:	b148      	cbz	r0, 9260 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x514>
    924c:	6860      	ldr	r0, [r4, #4]
    924e:	2608      	movs	r6, #8
    9250:	f880 51d2 	strb.w	r5, [r0, #466]	; 0x1d2
    9254:	e007      	b.n	9266 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x51a>
    9256:	f240 61b1 	movw	r1, #1713	; 0x6b1
    925a:	2036      	movs	r0, #54	; 0x36
    925c:	f7fa fe30 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9260:	2000      	movs	r0, #0
    9262:	f7fb fddd 	bl	4e20 <sym_P6ESEOOF3E3ZRYNBCJWJZXMT4EPJJMHF472YBMQ>
    9266:	6860      	ldr	r0, [r4, #4]
    9268:	f005 fc65 	bl	eb36 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    926c:	4630      	mov	r0, r6
    926e:	bd70      	pop	{r4, r5, r6, pc}
    9270:	2000011c 	.word	0x2000011c
    9274:	20000190 	.word	0x20000190
    9278:	b570      	push	{r4, r5, r6, lr}
    927a:	4c1e      	ldr	r4, [pc, #120]	; (92f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5a8>)
    927c:	2000      	movs	r0, #0
    927e:	78a1      	ldrb	r1, [r4, #2]
    9280:	07c9      	lsls	r1, r1, #31
    9282:	d01b      	beq.n	92bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x570>
    9284:	68e0      	ldr	r0, [r4, #12]
    9286:	2300      	movs	r3, #0
    9288:	2105      	movs	r1, #5
    928a:	78c5      	ldrb	r5, [r0, #3]
    928c:	6860      	ldr	r0, [r4, #4]
    928e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9292:	3078      	adds	r0, #120	; 0x78
    9294:	f004 fc89 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9298:	b188      	cbz	r0, 92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    929a:	2d06      	cmp	r5, #6
    929c:	d00f      	beq.n	92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    929e:	dc06      	bgt.n	92ae <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x562>
    92a0:	2d02      	cmp	r5, #2
    92a2:	d00c      	beq.n	92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    92a4:	2d04      	cmp	r5, #4
    92a6:	d00a      	beq.n	92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    92a8:	2d05      	cmp	r5, #5
    92aa:	d106      	bne.n	92ba <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x56e>
    92ac:	e007      	b.n	92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    92ae:	2d0b      	cmp	r5, #11
    92b0:	d005      	beq.n	92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    92b2:	2d0d      	cmp	r5, #13
    92b4:	d003      	beq.n	92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    92b6:	2d11      	cmp	r5, #17
    92b8:	d001      	beq.n	92be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x572>
    92ba:	2008      	movs	r0, #8
    92bc:	bd70      	pop	{r4, r5, r6, pc}
    92be:	68e0      	ldr	r0, [r4, #12]
    92c0:	f7fc fe2c 	bl	5f1c <sym_AQNKAYNIT4GTGTVAKOZJZSWZBN4I6FFKO6L5AXA>
    92c4:	b148      	cbz	r0, 92da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    92c6:	68e0      	ldr	r0, [r4, #12]
    92c8:	78c0      	ldrb	r0, [r0, #3]
    92ca:	2819      	cmp	r0, #25
    92cc:	d205      	bcs.n	92da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    92ce:	490a      	ldr	r1, [pc, #40]	; (92f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ac>)
    92d0:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    92d4:	b108      	cbz	r0, 92da <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x58e>
    92d6:	4780      	blx	r0
    92d8:	e002      	b.n	92e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x594>
    92da:	2000      	movs	r0, #0
    92dc:	f000 fbdc 	bl	9a98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    92e0:	6861      	ldr	r1, [r4, #4]
    92e2:	e9f1 2336 	ldrd	r2, r3, [r1, #216]!	; 0xd8
    92e6:	1c52      	adds	r2, r2, #1
    92e8:	f143 0300 	adc.w	r3, r3, #0
    92ec:	e9c1 2300 	strd	r2, r3, [r1]
    92f0:	bd70      	pop	{r4, r5, r6, pc}
    92f2:	0000      	.short	0x0000
    92f4:	2000011c 	.word	0x2000011c
    92f8:	2000012c 	.word	0x2000012c
    92fc:	b510      	push	{r4, lr}
    92fe:	4c11      	ldr	r4, [pc, #68]	; (9344 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5f8>)
    9300:	78a0      	ldrb	r0, [r4, #2]
    9302:	0700      	lsls	r0, r0, #28
    9304:	d517      	bpl.n	9336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    9306:	6860      	ldr	r0, [r4, #4]
    9308:	2100      	movs	r1, #0
    930a:	f890 00fc 	ldrb.w	r0, [r0, #252]	; 0xfc
    930e:	f001 f97b 	bl	a608 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    9312:	6860      	ldr	r0, [r4, #4]
    9314:	3078      	adds	r0, #120	; 0x78
    9316:	f005 fbde 	bl	ead6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x1c>
    931a:	b168      	cbz	r0, 9338 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ec>
    931c:	6860      	ldr	r0, [r4, #4]
    931e:	21fe      	movs	r1, #254	; 0xfe
    9320:	f880 10fc 	strb.w	r1, [r0, #252]	; 0xfc
    9324:	f890 1088 	ldrb.w	r1, [r0, #136]	; 0x88
    9328:	2908      	cmp	r1, #8
    932a:	d104      	bne.n	9336 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x5ea>
    932c:	2102      	movs	r1, #2
    932e:	7021      	strb	r1, [r4, #0]
    9330:	2100      	movs	r1, #0
    9332:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    9336:	bd10      	pop	{r4, pc}
    9338:	f240 61bd 	movw	r1, #1725	; 0x6bd
    933c:	2036      	movs	r0, #54	; 0x36
    933e:	f7fa fdbf 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9342:	0000      	.short	0x0000
    9344:	2000011c 	.word	0x2000011c
    9348:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    934a:	4605      	mov	r5, r0
    934c:	4668      	mov	r0, sp
    934e:	f7fb fbcf 	bl	4af0 <sym_65LA7GM3MU7DDFQKTB75BYTZMPMROSWKS3VXCNI>
    9352:	b318      	cbz	r0, 939c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x650>
    9354:	2222      	movs	r2, #34	; 0x22
    9356:	2100      	movs	r1, #0
    9358:	9800      	ldr	r0, [sp, #0]
    935a:	f003 fa3b 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    935e:	2103      	movs	r1, #3
    9360:	9800      	ldr	r0, [sp, #0]
    9362:	f004 fea8 	bl	e0b6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>
    9366:	9800      	ldr	r0, [sp, #0]
    9368:	7801      	ldrb	r1, [r0, #0]
    936a:	f021 0110 	bic.w	r1, r1, #16
    936e:	7001      	strb	r1, [r0, #0]
    9370:	4629      	mov	r1, r5
    9372:	f7fc fde3 	bl	5f3c <sym_ASSU5HSD7LU7BXC2C2QNNVLB6AOHO4SQ3KK3OJY>
    9376:	2100      	movs	r1, #0
    9378:	4c6a      	ldr	r4, [pc, #424]	; (9524 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d8>)
    937a:	2d19      	cmp	r5, #25
    937c:	d270      	bcs.n	9460 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x714>
    937e:	e8df f005 	tbb	[pc, r5]
    9382:	1c24      	.short	0x1c24
    9384:	c9c94c10 	.word	0xc9c94c10
    9388:	c97016c2 	.word	0xc97016c2
    938c:	c964c2c2 	.word	0xc964c2c2
    9390:	b6c9c9c9 	.word	0xb6c9c9c9
    9394:	8181c2c2 	.word	0x8181c2c2
    9398:	00a3c99a 	.word	0x00a3c99a
    939c:	f640 014f 	movw	r1, #2127	; 0x84f
    93a0:	e0bd      	b.n	951e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    93a2:	6860      	ldr	r0, [r4, #4]
    93a4:	9900      	ldr	r1, [sp, #0]
    93a6:	f890 013d 	ldrb.w	r0, [r0, #317]	; 0x13d
    93aa:	7108      	strb	r0, [r1, #4]
    93ac:	e0ab      	b.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    93ae:	6861      	ldr	r1, [r4, #4]
    93b0:	9800      	ldr	r0, [sp, #0]
    93b2:	f891 10fe 	ldrb.w	r1, [r1, #254]	; 0xfe
    93b6:	7101      	strb	r1, [r0, #4]
    93b8:	e0a5      	b.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    93ba:	6860      	ldr	r0, [r4, #4]
    93bc:	f8d0 1128 	ldr.w	r1, [r0, #296]	; 0x128
    93c0:	9800      	ldr	r0, [sp, #0]
    93c2:	1c49      	adds	r1, r1, #1
    93c4:	f004 fe57 	bl	e076 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>
    93c8:	e09d      	b.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    93ca:	6860      	ldr	r0, [r4, #4]
    93cc:	9d00      	ldr	r5, [sp, #0]
    93ce:	f8d0 1150 	ldr.w	r1, [r0, #336]	; 0x150
    93d2:	f8b0 0148 	ldrh.w	r0, [r0, #328]	; 0x148
    93d6:	f004 fd6b 	bl	deb0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>
    93da:	7128      	strb	r0, [r5, #4]
    93dc:	6860      	ldr	r0, [r4, #4]
    93de:	9d00      	ldr	r5, [sp, #0]
    93e0:	f500 70a6 	add.w	r0, r0, #332	; 0x14c
    93e4:	c803      	ldmia	r0, {r0, r1}
    93e6:	f004 fd58 	bl	de9a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>
    93ea:	7168      	strb	r0, [r5, #5]
    93ec:	0a00      	lsrs	r0, r0, #8
    93ee:	71a8      	strb	r0, [r5, #6]
    93f0:	6860      	ldr	r0, [r4, #4]
    93f2:	9d00      	ldr	r5, [sp, #0]
    93f4:	f8d0 0150 	ldr.w	r0, [r0, #336]	; 0x150
    93f8:	f004 fb8d 	bl	db16 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    93fc:	71e8      	strb	r0, [r5, #7]
    93fe:	0a00      	lsrs	r0, r0, #8
    9400:	7228      	strb	r0, [r5, #8]
    9402:	6862      	ldr	r2, [r4, #4]
    9404:	9800      	ldr	r0, [sp, #0]
    9406:	f8b2 1154 	ldrh.w	r1, [r2, #340]	; 0x154
    940a:	7241      	strb	r1, [r0, #9]
    940c:	0a09      	lsrs	r1, r1, #8
    940e:	7281      	strb	r1, [r0, #10]
    9410:	f8b2 1156 	ldrh.w	r1, [r2, #342]	; 0x156
    9414:	f004 fe34 	bl	e080 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>
    9418:	e075      	b.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    941a:	6861      	ldr	r1, [r4, #4]
    941c:	9800      	ldr	r0, [sp, #0]
    941e:	f201 115b 	addw	r1, r1, #347	; 0x15b
    9422:	f004 fe38 	bl	e096 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>
    9426:	6861      	ldr	r1, [r4, #4]
    9428:	9800      	ldr	r0, [sp, #0]
    942a:	f201 1163 	addw	r1, r1, #355	; 0x163
    942e:	f004 fe2b 	bl	e088 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>
    9432:	6861      	ldr	r1, [r4, #4]
    9434:	9800      	ldr	r0, [sp, #0]
    9436:	f201 1175 	addw	r1, r1, #373	; 0x175
    943a:	f004 fe31 	bl	e0a0 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>
    943e:	6861      	ldr	r1, [r4, #4]
    9440:	9800      	ldr	r0, [sp, #0]
    9442:	31f0      	adds	r1, #240	; 0xf0
    9444:	f004 fe23 	bl	e08e <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>
    9448:	e05d      	b.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    944a:	9800      	ldr	r0, [sp, #0]
    944c:	220b      	movs	r2, #11
    944e:	7102      	strb	r2, [r0, #4]
    9450:	2259      	movs	r2, #89	; 0x59
    9452:	7142      	strb	r2, [r0, #5]
    9454:	7181      	strb	r1, [r0, #6]
    9456:	21fe      	movs	r1, #254	; 0xfe
    9458:	71c1      	strb	r1, [r0, #7]
    945a:	2112      	movs	r1, #18
    945c:	7201      	strb	r1, [r0, #8]
    945e:	e052      	b.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9460:	e058      	b.n	9514 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7c8>
    9462:	9101      	str	r1, [sp, #4]
    9464:	9102      	str	r1, [sp, #8]
    9466:	f001 fe5d 	bl	b124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    946a:	f644 112f 	movw	r1, #18735	; 0x492f
    946e:	4008      	ands	r0, r1
    9470:	f88d 0004 	strb.w	r0, [sp, #4]
    9474:	0a00      	lsrs	r0, r0, #8
    9476:	f88d 0005 	strb.w	r0, [sp, #5]
    947a:	a901      	add	r1, sp, #4
    947c:	9800      	ldr	r0, [sp, #0]
    947e:	f004 fe15 	bl	e0ac <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>
    9482:	e040      	b.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    9484:	6860      	ldr	r0, [r4, #4]
    9486:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
    948a:	9800      	ldr	r0, [sp, #0]
    948c:	f004 fe25 	bl	e0da <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>
    9490:	6860      	ldr	r0, [r4, #4]
    9492:	f8b0 10fe 	ldrh.w	r1, [r0, #254]	; 0xfe
    9496:	9800      	ldr	r0, [sp, #0]
    9498:	f004 fe23 	bl	e0e2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>
    949c:	6860      	ldr	r0, [r4, #4]
    949e:	f8b0 104c 	ldrh.w	r1, [r0, #76]	; 0x4c
    94a2:	9800      	ldr	r0, [sp, #0]
    94a4:	f004 fe11 	bl	e0ca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>
    94a8:	6860      	ldr	r0, [r4, #4]
    94aa:	f8b0 1100 	ldrh.w	r1, [r0, #256]	; 0x100
    94ae:	9800      	ldr	r0, [sp, #0]
    94b0:	f004 fe0f 	bl	e0d2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>
    94b4:	e027      	b.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    94b6:	6861      	ldr	r1, [r4, #4]
    94b8:	9800      	ldr	r0, [sp, #0]
    94ba:	f891 2140 	ldrb.w	r2, [r1, #320]	; 0x140
    94be:	7102      	strb	r2, [r0, #4]
    94c0:	f891 1141 	ldrb.w	r1, [r1, #321]	; 0x141
    94c4:	7141      	strb	r1, [r0, #5]
    94c6:	e01e      	b.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    94c8:	6860      	ldr	r0, [r4, #4]
    94ca:	f890 0127 	ldrb.w	r0, [r0, #295]	; 0x127
    94ce:	f004 fc10 	bl	dcf2 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    94d2:	4601      	mov	r1, r0
    94d4:	9800      	ldr	r0, [sp, #0]
    94d6:	f004 fe0c 	bl	e0f2 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>
    94da:	6860      	ldr	r0, [r4, #4]
    94dc:	f890 0126 	ldrb.w	r0, [r0, #294]	; 0x126
    94e0:	f004 fc07 	bl	dcf2 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>
    94e4:	4601      	mov	r1, r0
    94e6:	9800      	ldr	r0, [sp, #0]
    94e8:	f004 fded 	bl	e0c6 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>
    94ec:	e00b      	b.n	9506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ba>
    94ee:	6860      	ldr	r0, [r4, #4]
    94f0:	f890 10fe 	ldrb.w	r1, [r0, #254]	; 0xfe
    94f4:	9800      	ldr	r0, [sp, #0]
    94f6:	f004 fdba 	bl	e06e <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>
    94fa:	6860      	ldr	r0, [r4, #4]
    94fc:	f890 10ff 	ldrb.w	r1, [r0, #255]	; 0xff
    9500:	9800      	ldr	r0, [sp, #0]
    9502:	f004 fdb6 	bl	e072 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>
    9506:	f7fb facd 	bl	4aa4 <sym_AGWGY6I3YKHHV6TMAWL24HN4IKGOB7PZYXPWBRA>
    950a:	b130      	cbz	r0, 951a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7ce>
    950c:	9800      	ldr	r0, [sp, #0]
    950e:	f7ff fcb1 	bl	8e74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    9512:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    9514:	f640 01db 	movw	r1, #2267	; 0x8db
    9518:	e001      	b.n	951e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7d2>
    951a:	f640 01e1 	movw	r1, #2273	; 0x8e1
    951e:	2036      	movs	r0, #54	; 0x36
    9520:	f7fa fcce 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9524:	2000011c 	.word	0x2000011c
    9528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    952c:	4c27      	ldr	r4, [pc, #156]	; (95cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x880>)
    952e:	4680      	mov	r8, r0
    9530:	460d      	mov	r5, r1
    9532:	8860      	ldrh	r0, [r4, #2]
    9534:	f04f 0600 	mov.w	r6, #0
    9538:	05c1      	lsls	r1, r0, #23
    953a:	4620      	mov	r0, r4
    953c:	6840      	ldr	r0, [r0, #4]
    953e:	d502      	bpl.n	9546 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7fa>
    9540:	f8a0 60ae 	strh.w	r6, [r0, #174]	; 0xae
    9544:	e004      	b.n	9550 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x804>
    9546:	f8b0 10ae 	ldrh.w	r1, [r0, #174]	; 0xae
    954a:	1c49      	adds	r1, r1, #1
    954c:	f8a0 10ae 	strh.w	r1, [r0, #174]	; 0xae
    9550:	f005 fb4c 	bl	ebec <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    9554:	2701      	movs	r7, #1
    9556:	b1e0      	cbz	r0, 9592 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9558:	8860      	ldrh	r0, [r4, #2]
    955a:	0500      	lsls	r0, r0, #20
    955c:	d506      	bpl.n	956c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    955e:	6860      	ldr	r0, [r4, #4]
    9560:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    9564:	b111      	cbz	r1, 956c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x820>
    9566:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    956a:	e012      	b.n	9592 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    956c:	6860      	ldr	r0, [r4, #4]
    956e:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    9572:	1c49      	adds	r1, r1, #1
    9574:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
    9578:	f005 face 	bl	eb18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    957c:	6860      	ldr	r0, [r4, #4]
    957e:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    9582:	4291      	cmp	r1, r2
    9584:	d305      	bcc.n	9592 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x846>
    9586:	f8c0 60a0 	str.w	r6, [r0, #160]	; 0xa0
    958a:	f880 718e 	strb.w	r7, [r0, #398]	; 0x18e
    958e:	f7fc fdd7 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9592:	8860      	ldrh	r0, [r4, #2]
    9594:	f410 7f40 	tst.w	r0, #768	; 0x300
    9598:	d008      	beq.n	95ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    959a:	6860      	ldr	r0, [r4, #4]
    959c:	f890 1089 	ldrb.w	r1, [r0, #137]	; 0x89
    95a0:	b921      	cbnz	r1, 95ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x860>
    95a2:	f880 7089 	strb.w	r7, [r0, #137]	; 0x89
    95a6:	2101      	movs	r1, #1
    95a8:	f7fe fa6c 	bl	7a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    95ac:	ea58 0005 	orrs.w	r0, r8, r5
    95b0:	d104      	bne.n	95bc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x870>
    95b2:	f7ff fe17 	bl	91e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x498>
    95b6:	4605      	mov	r5, r0
    95b8:	f7ff fcea 	bl	8f90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x244>
    95bc:	4629      	mov	r1, r5
    95be:	4640      	mov	r0, r8
    95c0:	f000 ff7a 	bl	a4b8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x176c>
    95c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    95c8:	f7fb ba56 	b.w	4a78 <sym_54CHYGRI3UHSVLN5ZOGJESXNRISJW5CS4IYBN7Y>
    95cc:	2000011c 	.word	0x2000011c
    95d0:	4813      	ldr	r0, [pc, #76]	; (9620 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8d4>)
    95d2:	6840      	ldr	r0, [r0, #4]
    95d4:	f890 10b8 	ldrb.w	r1, [r0, #184]	; 0xb8
    95d8:	b129      	cbz	r1, 95e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x89a>
    95da:	f8b0 10b4 	ldrh.w	r1, [r0, #180]	; 0xb4
    95de:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    95e2:	4291      	cmp	r1, r2
    95e4:	d215      	bcs.n	9612 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    95e6:	f890 10bc 	ldrb.w	r1, [r0, #188]	; 0xbc
    95ea:	b129      	cbz	r1, 95f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ac>
    95ec:	f8b0 10ba 	ldrh.w	r1, [r0, #186]	; 0xba
    95f0:	f8b0 20b6 	ldrh.w	r2, [r0, #182]	; 0xb6
    95f4:	4291      	cmp	r1, r2
    95f6:	d20c      	bcs.n	9612 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    95f8:	f8b0 20b2 	ldrh.w	r2, [r0, #178]	; 0xb2
    95fc:	f8b0 10b0 	ldrh.w	r1, [r0, #176]	; 0xb0
    9600:	428a      	cmp	r2, r1
    9602:	d206      	bcs.n	9612 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    9604:	f890 2089 	ldrb.w	r2, [r0, #137]	; 0x89
    9608:	f8b0 00ae 	ldrh.w	r0, [r0, #174]	; 0xae
    960c:	b11a      	cbz	r2, 9616 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ca>
    960e:	4288      	cmp	r0, r1
    9610:	d303      	bcc.n	961a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8ce>
    9612:	2001      	movs	r0, #1
    9614:	4770      	bx	lr
    9616:	2806      	cmp	r0, #6
    9618:	d2fb      	bcs.n	9612 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8c6>
    961a:	2000      	movs	r0, #0
    961c:	4770      	bx	lr
    961e:	0000      	.short	0x0000
    9620:	2000011c 	.word	0x2000011c
    9624:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9626:	4c54      	ldr	r4, [pc, #336]	; (9778 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa2c>)
    9628:	6860      	ldr	r0, [r4, #4]
    962a:	f890 1144 	ldrb.w	r1, [r0, #324]	; 0x144
    962e:	f88d 1000 	strb.w	r1, [sp]
    9632:	9900      	ldr	r1, [sp, #0]
    9634:	9100      	str	r1, [sp, #0]
    9636:	f89d 1000 	ldrb.w	r1, [sp]
    963a:	b129      	cbz	r1, 9648 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x8fc>
    963c:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    9640:	f004 fb0c 	bl	dc5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    9644:	2800      	cmp	r0, #0
    9646:	d00a      	beq.n	965e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x912>
    9648:	6860      	ldr	r0, [r4, #4]
    964a:	f890 115a 	ldrb.w	r1, [r0, #346]	; 0x15a
    964e:	b181      	cbz	r1, 9672 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x926>
    9650:	f890 108a 	ldrb.w	r1, [r0, #138]	; 0x8a
    9654:	b149      	cbz	r1, 966a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x91e>
    9656:	f890 008b 	ldrb.w	r0, [r0, #139]	; 0x8b
    965a:	b108      	cbz	r0, 9660 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x914>
    965c:	200a      	movs	r0, #10
    965e:	e087      	b.n	9770 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    9660:	f44f 61e7 	mov.w	r1, #1848	; 0x738
    9664:	2036      	movs	r0, #54	; 0x36
    9666:	f7fa fc2b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    966a:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    966e:	f000 b885 	b.w	977c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa30>
    9672:	f890 1159 	ldrb.w	r1, [r0, #345]	; 0x159
    9676:	b109      	cbz	r1, 967c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x930>
    9678:	2008      	movs	r0, #8
    967a:	e079      	b.n	9770 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    967c:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    9680:	2500      	movs	r5, #0
    9682:	b181      	cbz	r1, 96a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x95a>
    9684:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    9688:	0780      	lsls	r0, r0, #30
    968a:	d10b      	bne.n	96a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    968c:	200c      	movs	r0, #12
    968e:	f000 f961 	bl	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9692:	6860      	ldr	r0, [r4, #4]
    9694:	2101      	movs	r1, #1
    9696:	f820 5fb4 	strh.w	r5, [r0, #180]!
    969a:	7101      	strb	r1, [r0, #4]
    969c:	7b01      	ldrb	r1, [r0, #12]
    969e:	f041 0101 	orr.w	r1, r1, #1
    96a2:	7301      	strb	r1, [r0, #12]
    96a4:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    96a6:	f890 1132 	ldrb.w	r1, [r0, #306]	; 0x132
    96aa:	f88d 1004 	strb.w	r1, [sp, #4]
    96ae:	9901      	ldr	r1, [sp, #4]
    96b0:	9101      	str	r1, [sp, #4]
    96b2:	f89d 1004 	ldrb.w	r1, [sp, #4]
    96b6:	b141      	cbz	r1, 96ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x97e>
    96b8:	f890 1133 	ldrb.w	r1, [r0, #307]	; 0x133
    96bc:	f88d 1000 	strb.w	r1, [sp]
    96c0:	9900      	ldr	r1, [sp, #0]
    96c2:	9100      	str	r1, [sp, #0]
    96c4:	f89d 1000 	ldrb.w	r1, [sp]
    96c8:	b391      	cbz	r1, 9730 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9e4>
    96ca:	f890 113e 	ldrb.w	r1, [r0, #318]	; 0x13e
    96ce:	2901      	cmp	r1, #1
    96d0:	d1e8      	bne.n	96a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    96d2:	f890 113f 	ldrb.w	r1, [r0, #319]	; 0x13f
    96d6:	f88d 1000 	strb.w	r1, [sp]
    96da:	9900      	ldr	r1, [sp, #0]
    96dc:	9100      	str	r1, [sp, #0]
    96de:	f89d 1000 	ldrb.w	r1, [sp]
    96e2:	2900      	cmp	r1, #0
    96e4:	d1de      	bne.n	96a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    96e6:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    96ea:	f004 fab7 	bl	dc5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>
    96ee:	2800      	cmp	r0, #0
    96f0:	d1d8      	bne.n	96a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x958>
    96f2:	6860      	ldr	r0, [r4, #4]
    96f4:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    96f8:	f005 f9f5 	bl	eae6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    96fc:	4605      	mov	r5, r0
    96fe:	6860      	ldr	r0, [r4, #4]
    9700:	f890 006b 	ldrb.w	r0, [r0, #107]	; 0x6b
    9704:	f005 f9ef 	bl	eae6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9708:	4606      	mov	r6, r0
    970a:	6860      	ldr	r0, [r4, #4]
    970c:	f890 1140 	ldrb.w	r1, [r0, #320]	; 0x140
    9710:	4628      	mov	r0, r5
    9712:	f005 f9f3 	bl	eafc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9716:	b350      	cbz	r0, 976e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    9718:	6860      	ldr	r0, [r4, #4]
    971a:	f890 1141 	ldrb.w	r1, [r0, #321]	; 0x141
    971e:	4630      	mov	r0, r6
    9720:	f005 f9ec 	bl	eafc <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x42>
    9724:	b318      	cbz	r0, 976e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa22>
    9726:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    972a:	2000      	movs	r0, #0
    972c:	f000 b8ee 	b.w	990c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9730:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    9734:	2924      	cmp	r1, #36	; 0x24
    9736:	d018      	beq.n	976a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    9738:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    973c:	2924      	cmp	r1, #36	; 0x24
    973e:	d014      	beq.n	976a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa1e>
    9740:	f05f 0300 	movs.w	r3, #0
    9744:	f500 7293 	add.w	r2, r0, #294	; 0x126
    9748:	f500 7199 	add.w	r1, r0, #306	; 0x132
    974c:	f004 fe09 	bl	e362 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>
    9750:	6860      	ldr	r0, [r4, #4]
    9752:	4602      	mov	r2, r0
    9754:	f880 5132 	strb.w	r5, [r0, #306]	; 0x132
    9758:	f102 012c 	add.w	r1, r2, #44	; 0x2c
    975c:	8bc8      	ldrh	r0, [r1, #30]
    975e:	f822 0ffe 	strh.w	r0, [r2, #254]!
    9762:	8c48      	ldrh	r0, [r1, #34]	; 0x22
    9764:	8050      	strh	r0, [r2, #2]
    9766:	2014      	movs	r0, #20
    9768:	e002      	b.n	9770 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa24>
    976a:	2301      	movs	r3, #1
    976c:	e7ea      	b.n	9744 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x9f8>
    976e:	2016      	movs	r0, #22
    9770:	e8bd 407c 	ldmia.w	sp!, {r2, r3, r4, r5, r6, lr}
    9774:	f000 b8ee 	b.w	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    9778:	2000011c 	.word	0x2000011c
    977c:	b510      	push	{r4, lr}
    977e:	4c1e      	ldr	r4, [pc, #120]	; (97f8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaac>)
    9780:	6862      	ldr	r2, [r4, #4]
    9782:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    9786:	2808      	cmp	r0, #8
    9788:	d20d      	bcs.n	97a6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa5a>
    978a:	f1c0 0108 	rsb	r1, r0, #8
    978e:	4410      	add	r0, r2
    9790:	b2c9      	uxtb	r1, r1
    9792:	f200 1075 	addw	r0, r0, #373	; 0x175
    9796:	f7fa fc21 	bl	3fdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    979a:	6861      	ldr	r1, [r4, #4]
    979c:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    97a0:	4410      	add	r0, r2
    97a2:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    97a6:	6862      	ldr	r2, [r4, #4]
    97a8:	f892 0102 	ldrb.w	r0, [r2, #258]	; 0x102
    97ac:	3808      	subs	r0, #8
    97ae:	2804      	cmp	r0, #4
    97b0:	d20c      	bcs.n	97cc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa80>
    97b2:	f1c0 0104 	rsb	r1, r0, #4
    97b6:	4410      	add	r0, r2
    97b8:	b2c9      	uxtb	r1, r1
    97ba:	30f0      	adds	r0, #240	; 0xf0
    97bc:	f7fa fc0e 	bl	3fdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    97c0:	6861      	ldr	r1, [r4, #4]
    97c2:	f891 2102 	ldrb.w	r2, [r1, #258]	; 0x102
    97c6:	4410      	add	r0, r2
    97c8:	f881 0102 	strb.w	r0, [r1, #258]	; 0x102
    97cc:	6860      	ldr	r0, [r4, #4]
    97ce:	f890 1102 	ldrb.w	r1, [r0, #258]	; 0x102
    97d2:	290c      	cmp	r1, #12
    97d4:	d30e      	bcc.n	97f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaa8>
    97d6:	d005      	beq.n	97e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xa98>
    97d8:	f640 1131 	movw	r1, #2353	; 0x931
    97dc:	f04f 0036 	mov.w	r0, #54	; 0x36
    97e0:	f7fa fb6e 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    97e4:	2100      	movs	r1, #0
    97e6:	f880 1102 	strb.w	r1, [r0, #258]	; 0x102
    97ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    97ee:	2003      	movs	r0, #3
    97f0:	f000 b8b0 	b.w	9954 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc08>
    97f4:	bd10      	pop	{r4, pc}
    97f6:	0000      	.short	0x0000
    97f8:	2000011c 	.word	0x2000011c
    97fc:	b570      	push	{r4, r5, r6, lr}
    97fe:	4b20      	ldr	r3, [pc, #128]	; (9880 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb34>)
    9800:	4602      	mov	r2, r0
    9802:	460c      	mov	r4, r1
    9804:	8858      	ldrh	r0, [r3, #2]
    9806:	4310      	orrs	r0, r2
    9808:	8058      	strh	r0, [r3, #2]
    980a:	4618      	mov	r0, r3
    980c:	0791      	lsls	r1, r2, #30
    980e:	6840      	ldr	r0, [r0, #4]
    9810:	ea4f 71c2 	mov.w	r1, r2, lsl #31
    9814:	d507      	bpl.n	9826 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xada>
    9816:	b121      	cbz	r1, 9822 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xad6>
    9818:	f640 21c5 	movw	r1, #2757	; 0xac5
    981c:	2036      	movs	r0, #54	; 0x36
    981e:	f7fa fb4f 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9822:	609c      	str	r4, [r3, #8]
    9824:	e003      	b.n	982e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xae2>
    9826:	b101      	cbz	r1, 982a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xade>
    9828:	60dc      	str	r4, [r3, #12]
    982a:	0791      	lsls	r1, r2, #30
    982c:	d515      	bpl.n	985a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    982e:	78e1      	ldrb	r1, [r4, #3]
    9830:	2906      	cmp	r1, #6
    9832:	d002      	beq.n	983a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xaee>
    9834:	290b      	cmp	r1, #11
    9836:	d110      	bne.n	985a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9838:	e008      	b.n	984c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb00>
    983a:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    983e:	2918      	cmp	r1, #24
    9840:	d10b      	bne.n	985a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9842:	2100      	movs	r1, #0
    9844:	e9c0 1136 	strd	r1, r1, [r0, #216]	; 0xd8
    9848:	2101      	movs	r1, #1
    984a:	e004      	b.n	9856 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0a>
    984c:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9850:	2912      	cmp	r1, #18
    9852:	d102      	bne.n	985a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb0e>
    9854:	2100      	movs	r1, #0
    9856:	f880 108b 	strb.w	r1, [r0, #139]	; 0x8b
    985a:	0691      	lsls	r1, r2, #26
    985c:	d501      	bpl.n	9862 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb16>
    985e:	2108      	movs	r1, #8
    9860:	7059      	strb	r1, [r3, #1]
    9862:	0611      	lsls	r1, r2, #24
    9864:	d50a      	bpl.n	987c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb30>
    9866:	8a82      	ldrh	r2, [r0, #20]
    9868:	f8b0 107c 	ldrh.w	r1, [r0, #124]	; 0x7c
    986c:	4620      	mov	r0, r4
    986e:	f7ff fae3 	bl	8e38 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xec>
    9872:	4620      	mov	r0, r4
    9874:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9878:	f7ff bafc 	b.w	8e74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x128>
    987c:	bd70      	pop	{r4, r5, r6, pc}
    987e:	0000      	.short	0x0000
    9880:	2000011c 	.word	0x2000011c
    9884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9888:	4c1f      	ldr	r4, [pc, #124]	; (9908 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbbc>)
    988a:	2501      	movs	r5, #1
    988c:	6862      	ldr	r2, [r4, #4]
    988e:	f892 0126 	ldrb.w	r0, [r2, #294]	; 0x126
    9892:	b908      	cbnz	r0, 9898 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb4c>
    9894:	f892 006a 	ldrb.w	r0, [r2, #106]	; 0x6a
    9898:	f892 1127 	ldrb.w	r1, [r2, #295]	; 0x127
    989c:	b909      	cbnz	r1, 98a2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xb56>
    989e:	f892 106b 	ldrb.w	r1, [r2, #107]	; 0x6b
    98a2:	f882 006a 	strb.w	r0, [r2, #106]	; 0x6a
    98a6:	f882 106b 	strb.w	r1, [r2, #107]	; 0x6b
    98aa:	3262      	adds	r2, #98	; 0x62
    98ac:	2001      	movs	r0, #1
    98ae:	7290      	strb	r0, [r2, #10]
    98b0:	2000      	movs	r0, #0
    98b2:	f000 f82b 	bl	990c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    98b6:	6860      	ldr	r0, [r4, #4]
    98b8:	302c      	adds	r0, #44	; 0x2c
    98ba:	f004 fdc1 	bl	e440 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    98be:	4606      	mov	r6, r0
    98c0:	6860      	ldr	r0, [r4, #4]
    98c2:	f004 fd69 	bl	e398 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    98c6:	b1c0      	cbz	r0, 98fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    98c8:	6860      	ldr	r0, [r4, #4]
    98ca:	302c      	adds	r0, #44	; 0x2c
    98cc:	f004 fdb8 	bl	e440 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>
    98d0:	6861      	ldr	r1, [r4, #4]
    98d2:	4607      	mov	r7, r0
    98d4:	f501 72c8 	add.w	r2, r1, #400	; 0x190
    98d8:	8808      	ldrh	r0, [r1, #0]
    98da:	312c      	adds	r1, #44	; 0x2c
    98dc:	f004 fd1d 	bl	e31a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>
    98e0:	42be      	cmp	r6, r7
    98e2:	d20a      	bcs.n	98fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    98e4:	f7f7 fed4 	bl	1690 <sym_HVFGTYCGAECGUJHOFSPMGUV2G4PTWWUYTJVAPNA>
    98e8:	4601      	mov	r1, r0
    98ea:	1bb8      	subs	r0, r7, r6
    98ec:	2865      	cmp	r0, #101	; 0x65
    98ee:	d200      	bcs.n	98f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xba6>
    98f0:	2065      	movs	r0, #101	; 0x65
    98f2:	f7f7 fdc1 	bl	1478 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    98f6:	b100      	cbz	r0, 98fa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbae>
    98f8:	2500      	movs	r5, #0
    98fa:	2104      	movs	r1, #4
    98fc:	6860      	ldr	r0, [r4, #4]
    98fe:	f7fe f8c1 	bl	7a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    9902:	4628      	mov	r0, r5
    9904:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9908:	2000011c 	.word	0x2000011c
    990c:	b510      	push	{r4, lr}
    990e:	4c10      	ldr	r4, [pc, #64]	; (9950 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc04>)
    9910:	6861      	ldr	r1, [r4, #4]
    9912:	880a      	ldrh	r2, [r1, #0]
    9914:	f8a1 21b4 	strh.w	r2, [r1, #436]	; 0x1b4
    9918:	f881 01b2 	strb.w	r0, [r1, #434]	; 0x1b2
    991c:	f891 006a 	ldrb.w	r0, [r1, #106]	; 0x6a
    9920:	f005 f8e1 	bl	eae6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9924:	6861      	ldr	r1, [r4, #4]
    9926:	f881 01b6 	strb.w	r0, [r1, #438]	; 0x1b6
    992a:	f891 006b 	ldrb.w	r0, [r1, #107]	; 0x6b
    992e:	f005 f8da 	bl	eae6 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x2c>
    9932:	6862      	ldr	r2, [r4, #4]
    9934:	f502 71d8 	add.w	r1, r2, #432	; 0x1b0
    9938:	f882 01b7 	strb.w	r0, [r2, #439]	; 0x1b7
    993c:	2001      	movs	r0, #1
    993e:	7008      	strb	r0, [r1, #0]
    9940:	2000      	movs	r0, #0
    9942:	f882 013e 	strb.w	r0, [r2, #318]	; 0x13e
    9946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    994a:	f7fc bbf9 	b.w	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    994e:	0000      	.short	0x0000
    9950:	2000011c 	.word	0x2000011c
    9954:	490f      	ldr	r1, [pc, #60]	; (9994 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc48>)
    9956:	280c      	cmp	r0, #12
    9958:	6849      	ldr	r1, [r1, #4]
    995a:	f881 00fc 	strb.w	r0, [r1, #252]	; 0xfc
    995e:	d014      	beq.n	998a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9960:	2813      	cmp	r0, #19
    9962:	d012      	beq.n	998a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9964:	2818      	cmp	r0, #24
    9966:	d010      	beq.n	998a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9968:	2200      	movs	r2, #0
    996a:	2811      	cmp	r0, #17
    996c:	d00e      	beq.n	998c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    996e:	2807      	cmp	r0, #7
    9970:	d00b      	beq.n	998a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9972:	2815      	cmp	r0, #21
    9974:	d00a      	beq.n	998c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc40>
    9976:	2801      	cmp	r0, #1
    9978:	d007      	beq.n	998a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    997a:	2800      	cmp	r0, #0
    997c:	d005      	beq.n	998a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    997e:	2802      	cmp	r0, #2
    9980:	d003      	beq.n	998a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc3e>
    9982:	f821 2fb4 	strh.w	r2, [r1, #180]!
    9986:	2001      	movs	r0, #1
    9988:	7108      	strb	r0, [r1, #4]
    998a:	4770      	bx	lr
    998c:	f8a1 20ba 	strh.w	r2, [r1, #186]	; 0xba
    9990:	4770      	bx	lr
    9992:	0000      	.short	0x0000
    9994:	2000011c 	.word	0x2000011c
    9998:	b538      	push	{r3, r4, r5, lr}
    999a:	4c11      	ldr	r4, [pc, #68]	; (99e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc94>)
    999c:	6862      	ldr	r2, [r4, #4]
    999e:	f8b2 206a 	ldrh.w	r2, [r2, #106]	; 0x6a
    99a2:	f8ad 2000 	strh.w	r2, [sp]
    99a6:	f004 f9d9 	bl	dd5c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>
    99aa:	f89d 3000 	ldrb.w	r3, [sp]
    99ae:	b2c2      	uxtb	r2, r0
    99b0:	2100      	movs	r1, #0
    99b2:	4293      	cmp	r3, r2
    99b4:	d003      	beq.n	99be <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc72>
    99b6:	6863      	ldr	r3, [r4, #4]
    99b8:	f883 2126 	strb.w	r2, [r3, #294]	; 0x126
    99bc:	e002      	b.n	99c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc78>
    99be:	6862      	ldr	r2, [r4, #4]
    99c0:	f882 1126 	strb.w	r1, [r2, #294]	; 0x126
    99c4:	f89d 2001 	ldrb.w	r2, [sp, #1]
    99c8:	f3c0 2007 	ubfx	r0, r0, #8, #8
    99cc:	4282      	cmp	r2, r0
    99ce:	d003      	beq.n	99d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc8c>
    99d0:	6861      	ldr	r1, [r4, #4]
    99d2:	f881 0127 	strb.w	r0, [r1, #295]	; 0x127
    99d6:	bd38      	pop	{r3, r4, r5, pc}
    99d8:	6860      	ldr	r0, [r4, #4]
    99da:	f880 1127 	strb.w	r1, [r0, #295]	; 0x127
    99de:	bd38      	pop	{r3, r4, r5, pc}
    99e0:	2000011c 	.word	0x2000011c
    99e4:	b510      	push	{r4, lr}
    99e6:	4c0c      	ldr	r4, [pc, #48]	; (9a18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xccc>)
    99e8:	6861      	ldr	r1, [r4, #4]
    99ea:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    99ee:	2813      	cmp	r0, #19
    99f0:	d001      	beq.n	99f6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xcaa>
    99f2:	2002      	movs	r0, #2
    99f4:	bd10      	pop	{r4, pc}
    99f6:	f201 117d 	addw	r1, r1, #381	; 0x17d
    99fa:	68e0      	ldr	r0, [r4, #12]
    99fc:	f004 fae9 	bl	dfd2 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>
    9a00:	6861      	ldr	r1, [r4, #4]
    9a02:	68e0      	ldr	r0, [r4, #12]
    9a04:	31f4      	adds	r1, #244	; 0xf4
    9a06:	f004 fae1 	bl	dfcc <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>
    9a0a:	6861      	ldr	r1, [r4, #4]
    9a0c:	2016      	movs	r0, #22
    9a0e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9a12:	2000      	movs	r0, #0
    9a14:	bd10      	pop	{r4, pc}
    9a16:	0000      	.short	0x0000
    9a18:	2000011c 	.word	0x2000011c
    9a1c:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    9a1e:	4c1d      	ldr	r4, [pc, #116]	; (9a94 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd48>)
    9a20:	2300      	movs	r3, #0
    9a22:	2107      	movs	r1, #7
    9a24:	6860      	ldr	r0, [r4, #4]
    9a26:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9a2a:	3078      	adds	r0, #120	; 0x78
    9a2c:	f004 f8bd 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9a30:	b370      	cbz	r0, 9a90 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd44>
    9a32:	4669      	mov	r1, sp
    9a34:	68e0      	ldr	r0, [r4, #12]
    9a36:	f004 fad1 	bl	dfdc <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>
    9a3a:	f001 fb73 	bl	b124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    9a3e:	f644 112f 	movw	r1, #18735	; 0x492f
    9a42:	4008      	ands	r0, r1
    9a44:	f89d 2000 	ldrb.w	r2, [sp]
    9a48:	6861      	ldr	r1, [r4, #4]
    9a4a:	4002      	ands	r2, r0
    9a4c:	2500      	movs	r5, #0
    9a4e:	f881 20c6 	strb.w	r2, [r1, #198]	; 0xc6
    9a52:	f89d 2001 	ldrb.w	r2, [sp, #1]
    9a56:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    9a5a:	f881 00c7 	strb.w	r0, [r1, #199]	; 0xc7
    9a5e:	f881 50b8 	strb.w	r5, [r1, #184]	; 0xb8
    9a62:	f881 5159 	strb.w	r5, [r1, #345]	; 0x159
    9a66:	8808      	ldrh	r0, [r1, #0]
    9a68:	f8a1 01bc 	strh.w	r0, [r1, #444]	; 0x1bc
    9a6c:	f881 51ba 	strb.w	r5, [r1, #442]	; 0x1ba
    9a70:	9a00      	ldr	r2, [sp, #0]
    9a72:	f8c1 21be 	str.w	r2, [r1, #446]	; 0x1be
    9a76:	9a01      	ldr	r2, [sp, #4]
    9a78:	f8c1 21c2 	str.w	r2, [r1, #450]	; 0x1c2
    9a7c:	2001      	movs	r0, #1
    9a7e:	f881 01b8 	strb.w	r0, [r1, #440]	; 0x1b8
    9a82:	f7fc fb5d 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9a86:	6860      	ldr	r0, [r4, #4]
    9a88:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    9a8c:	2000      	movs	r0, #0
    9a8e:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9a90:	2001      	movs	r0, #1
    9a92:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    9a94:	2000011c 	.word	0x2000011c
    9a98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a9c:	4c19      	ldr	r4, [pc, #100]	; (9b04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb8>)
    9a9e:	2600      	movs	r6, #0
    9aa0:	2703      	movs	r7, #3
    9aa2:	f8d4 c004 	ldr.w	ip, [r4, #4]
    9aa6:	2501      	movs	r5, #1
    9aa8:	b1a0      	cbz	r0, 9ad4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd88>
    9aaa:	68e0      	ldr	r0, [r4, #12]
    9aac:	78c0      	ldrb	r0, [r0, #3]
    9aae:	f88c 00fa 	strb.w	r0, [ip, #250]	; 0xfa
    9ab2:	fa05 f000 	lsl.w	r0, r5, r0
    9ab6:	f3c0 50c0 	ubfx	r0, r0, #23, #1
    9aba:	b130      	cbz	r0, 9aca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd7e>
    9abc:	f88c 7085 	strb.w	r7, [ip, #133]	; 0x85
    9ac0:	f8ac 60b4 	strh.w	r6, [ip, #180]	; 0xb4
    9ac4:	f88c 50b8 	strb.w	r5, [ip, #184]	; 0xb8
    9ac8:	e017      	b.n	9afa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdae>
    9aca:	f240 5143 	movw	r1, #1347	; 0x543
    9ace:	2036      	movs	r0, #54	; 0x36
    9ad0:	f7fa f9f6 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9ad4:	2300      	movs	r3, #0
    9ad6:	f89c 2086 	ldrb.w	r2, [ip, #134]	; 0x86
    9ada:	4619      	mov	r1, r3
    9adc:	f10c 0078 	add.w	r0, ip, #120	; 0x78
    9ae0:	f004 f863 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ae4:	b160      	cbz	r0, 9b00 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb4>
    9ae6:	68e0      	ldr	r0, [r4, #12]
    9ae8:	78c1      	ldrb	r1, [r0, #3]
    9aea:	6860      	ldr	r0, [r4, #4]
    9aec:	f880 10f9 	strb.w	r1, [r0, #249]	; 0xf9
    9af0:	f800 7f86 	strb.w	r7, [r0, #134]!
    9af4:	8686      	strh	r6, [r0, #52]	; 0x34
    9af6:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9afa:	2000      	movs	r0, #0
    9afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b00:	2001      	movs	r0, #1
    9b02:	e7fb      	b.n	9afc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xdb0>
    9b04:	2000011c 	.word	0x2000011c
    9b08:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9b0c:	4c30      	ldr	r4, [pc, #192]	; (9bd0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe84>)
    9b0e:	2300      	movs	r3, #0
    9b10:	4619      	mov	r1, r3
    9b12:	6860      	ldr	r0, [r4, #4]
    9b14:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9b18:	3078      	adds	r0, #120	; 0x78
    9b1a:	f004 f846 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9b1e:	b308      	cbz	r0, 9b64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe18>
    9b20:	68e0      	ldr	r0, [r4, #12]
    9b22:	f004 fa70 	bl	e006 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9b26:	b300      	cbz	r0, 9b6a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1e>
    9b28:	68e0      	ldr	r0, [r4, #12]
    9b2a:	f004 fa62 	bl	dff2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9b2e:	4607      	mov	r7, r0
    9b30:	68e0      	ldr	r0, [r4, #12]
    9b32:	f004 fa62 	bl	dffa <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9b36:	4606      	mov	r6, r0
    9b38:	68e0      	ldr	r0, [r4, #12]
    9b3a:	f004 fa58 	bl	dfee <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9b3e:	4605      	mov	r5, r0
    9b40:	68e0      	ldr	r0, [r4, #12]
    9b42:	f004 fa58 	bl	dff6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9b46:	4601      	mov	r1, r0
    9b48:	9700      	str	r7, [sp, #0]
    9b4a:	6860      	ldr	r0, [r4, #4]
    9b4c:	4633      	mov	r3, r6
    9b4e:	462a      	mov	r2, r5
    9b50:	302c      	adds	r0, #44	; 0x2c
    9b52:	f004 fcaf 	bl	e4b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9b56:	6861      	ldr	r1, [r4, #4]
    9b58:	2501      	movs	r5, #1
    9b5a:	f891 0085 	ldrb.w	r0, [r1, #133]	; 0x85
    9b5e:	281c      	cmp	r0, #28
    9b60:	d008      	beq.n	9b74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe28>
    9b62:	e009      	b.n	9b78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe2c>
    9b64:	2001      	movs	r0, #1
    9b66:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    9b6a:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    9b6e:	2000      	movs	r0, #0
    9b70:	f7ff bf92 	b.w	9a98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9b74:	f881 5060 	strb.w	r5, [r1, #96]	; 0x60
    9b78:	f891 0060 	ldrb.w	r0, [r1, #96]	; 0x60
    9b7c:	2801      	cmp	r0, #1
    9b7e:	d011      	beq.n	9ba4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    9b80:	f891 0133 	ldrb.w	r0, [r1, #307]	; 0x133
    9b84:	f88d 0004 	strb.w	r0, [sp, #4]
    9b88:	9801      	ldr	r0, [sp, #4]
    9b8a:	9001      	str	r0, [sp, #4]
    9b8c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    9b90:	b940      	cbnz	r0, 9ba4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe58>
    9b92:	f891 0132 	ldrb.w	r0, [r1, #306]	; 0x132
    9b96:	f88d 0000 	strb.w	r0, [sp]
    9b9a:	9800      	ldr	r0, [sp, #0]
    9b9c:	9000      	str	r0, [sp, #0]
    9b9e:	f89d 0000 	ldrb.w	r0, [sp]
    9ba2:	b118      	cbz	r0, 9bac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe60>
    9ba4:	201e      	movs	r0, #30
    9ba6:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9baa:	e00a      	b.n	9bc2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe76>
    9bac:	201d      	movs	r0, #29
    9bae:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    9bb2:	f501 72cf 	add.w	r2, r1, #414	; 0x19e
    9bb6:	f831 0b2c 	ldrh.w	r0, [r1], #44
    9bba:	f004 fc82 	bl	e4c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>
    9bbe:	f7fc fabf 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9bc2:	6860      	ldr	r0, [r4, #4]
    9bc4:	2100      	movs	r1, #0
    9bc6:	f820 1fba 	strh.w	r1, [r0, #186]!
    9bca:	7085      	strb	r5, [r0, #2]
    9bcc:	4608      	mov	r0, r1
    9bce:	e7ca      	b.n	9b66 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xe1a>
    9bd0:	2000011c 	.word	0x2000011c
    9bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9bd6:	4c1a      	ldr	r4, [pc, #104]	; (9c40 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xef4>)
    9bd8:	2300      	movs	r3, #0
    9bda:	210a      	movs	r1, #10
    9bdc:	6860      	ldr	r0, [r4, #4]
    9bde:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9be2:	3078      	adds	r0, #120	; 0x78
    9be4:	f003 ffe1 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9be8:	b338      	cbz	r0, 9c3a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeee>
    9bea:	68e0      	ldr	r0, [r4, #12]
    9bec:	f004 fa0b 	bl	e006 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>
    9bf0:	b1c8      	cbz	r0, 9c26 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xeda>
    9bf2:	68e0      	ldr	r0, [r4, #12]
    9bf4:	f004 f9fd 	bl	dff2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>
    9bf8:	4607      	mov	r7, r0
    9bfa:	68e0      	ldr	r0, [r4, #12]
    9bfc:	f004 f9fd 	bl	dffa <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>
    9c00:	4606      	mov	r6, r0
    9c02:	68e0      	ldr	r0, [r4, #12]
    9c04:	f004 f9f3 	bl	dfee <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>
    9c08:	4605      	mov	r5, r0
    9c0a:	68e0      	ldr	r0, [r4, #12]
    9c0c:	f004 f9f3 	bl	dff6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>
    9c10:	4601      	mov	r1, r0
    9c12:	9700      	str	r7, [sp, #0]
    9c14:	6860      	ldr	r0, [r4, #4]
    9c16:	4633      	mov	r3, r6
    9c18:	462a      	mov	r2, r5
    9c1a:	302c      	adds	r0, #44	; 0x2c
    9c1c:	f004 fc4a 	bl	e4b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>
    9c20:	6860      	ldr	r0, [r4, #4]
    9c22:	f004 fbb9 	bl	e398 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>
    9c26:	6861      	ldr	r1, [r4, #4]
    9c28:	2000      	movs	r0, #0
    9c2a:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9c2e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    9c32:	f7ff fabf 	bl	91b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    9c36:	2000      	movs	r0, #0
    9c38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c3a:	2001      	movs	r0, #1
    9c3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9c3e:	0000      	.short	0x0000
    9c40:	2000011c 	.word	0x2000011c
    9c44:	b510      	push	{r4, lr}
    9c46:	4c0b      	ldr	r4, [pc, #44]	; (9c74 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf28>)
    9c48:	2300      	movs	r3, #0
    9c4a:	4619      	mov	r1, r3
    9c4c:	6860      	ldr	r0, [r4, #4]
    9c4e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9c52:	3078      	adds	r0, #120	; 0x78
    9c54:	f003 ffa9 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c58:	b150      	cbz	r0, 9c70 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf24>
    9c5a:	6860      	ldr	r0, [r4, #4]
    9c5c:	2100      	movs	r1, #0
    9c5e:	f820 1fba 	strh.w	r1, [r0, #186]!
    9c62:	2101      	movs	r1, #1
    9c64:	7081      	strb	r1, [r0, #2]
    9c66:	2102      	movs	r1, #2
    9c68:	f800 1c34 	strb.w	r1, [r0, #-52]
    9c6c:	2000      	movs	r0, #0
    9c6e:	bd10      	pop	{r4, pc}
    9c70:	2001      	movs	r0, #1
    9c72:	bd10      	pop	{r4, pc}
    9c74:	2000011c 	.word	0x2000011c
    9c78:	b510      	push	{r4, lr}
    9c7a:	4c09      	ldr	r4, [pc, #36]	; (9ca0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf54>)
    9c7c:	2300      	movs	r3, #0
    9c7e:	2109      	movs	r1, #9
    9c80:	6860      	ldr	r0, [r4, #4]
    9c82:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9c86:	3078      	adds	r0, #120	; 0x78
    9c88:	f003 ff8f 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9c8c:	2800      	cmp	r0, #0
    9c8e:	d006      	beq.n	9c9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf52>
    9c90:	6861      	ldr	r1, [r4, #4]
    9c92:	2000      	movs	r0, #0
    9c94:	f801 0fac 	strb.w	r0, [r1, #172]!
    9c98:	7308      	strb	r0, [r1, #12]
    9c9a:	f801 0c27 	strb.w	r0, [r1, #-39]
    9c9e:	bd10      	pop	{r4, pc}
    9ca0:	2000011c 	.word	0x2000011c
    9ca4:	4807      	ldr	r0, [pc, #28]	; (9cc4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf78>)
    9ca6:	6840      	ldr	r0, [r0, #4]
    9ca8:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9cac:	290f      	cmp	r1, #15
    9cae:	d001      	beq.n	9cb4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf68>
    9cb0:	2002      	movs	r0, #2
    9cb2:	4770      	bx	lr
    9cb4:	2100      	movs	r1, #0
    9cb6:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9cba:	2112      	movs	r1, #18
    9cbc:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9cc0:	2000      	movs	r0, #0
    9cc2:	4770      	bx	lr
    9cc4:	2000011c 	.word	0x2000011c
    9cc8:	b5f0      	push	{r4, r5, r6, r7, lr}
    9cca:	4c42      	ldr	r4, [pc, #264]	; (9dd4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1088>)
    9ccc:	2600      	movs	r6, #0
    9cce:	b087      	sub	sp, #28
    9cd0:	6860      	ldr	r0, [r4, #4]
    9cd2:	4633      	mov	r3, r6
    9cd4:	4631      	mov	r1, r6
    9cd6:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    9cda:	3078      	adds	r0, #120	; 0x78
    9cdc:	f003 ff65 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ce0:	b180      	cbz	r0, 9d04 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfb8>
    9ce2:	6860      	ldr	r0, [r4, #4]
    9ce4:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9ce8:	2823      	cmp	r0, #35	; 0x23
    9cea:	d00e      	beq.n	9d0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9cec:	2824      	cmp	r0, #36	; 0x24
    9cee:	d00c      	beq.n	9d0a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfbe>
    9cf0:	4668      	mov	r0, sp
    9cf2:	f7fa feeb 	bl	4acc <sym_JHXS4T25BAYOMDDZMWPX3HMPENRV73GSV2RYHAI>
    9cf6:	b150      	cbz	r0, 9d0e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc2>
    9cf8:	9800      	ldr	r0, [sp, #0]
    9cfa:	a901      	add	r1, sp, #4
    9cfc:	78c0      	ldrb	r0, [r0, #3]
    9cfe:	f88d 0004 	strb.w	r0, [sp, #4]
    9d02:	e005      	b.n	9d10 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfc4>
    9d04:	2001      	movs	r0, #1
    9d06:	b007      	add	sp, #28
    9d08:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9d0a:	2020      	movs	r0, #32
    9d0c:	e7fb      	b.n	9d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9d0e:	2100      	movs	r1, #0
    9d10:	6860      	ldr	r0, [r4, #4]
    9d12:	ab04      	add	r3, sp, #16
    9d14:	2216      	movs	r2, #22
    9d16:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9d1a:	f004 f802 	bl	dd22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>
    9d1e:	2700      	movs	r7, #0
    9d20:	2501      	movs	r5, #1
    9d22:	b178      	cbz	r0, 9d44 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xff8>
    9d24:	6860      	ldr	r0, [r4, #4]
    9d26:	f89d 1010 	ldrb.w	r1, [sp, #16]
    9d2a:	2216      	movs	r2, #22
    9d2c:	f880 10ff 	strb.w	r1, [r0, #255]	; 0xff
    9d30:	f880 20fe 	strb.w	r2, [r0, #254]	; 0xfe
    9d34:	2119      	movs	r1, #25
    9d36:	f800 1f86 	strb.w	r1, [r0, #134]!
    9d3a:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9d3e:	8687      	strh	r7, [r0, #52]	; 0x34
    9d40:	2000      	movs	r0, #0
    9d42:	e7e0      	b.n	9d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9d44:	68e0      	ldr	r0, [r4, #12]
    9d46:	f004 f97a 	bl	e03e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>
    9d4a:	b1a8      	cbz	r0, 9d78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x102c>
    9d4c:	68e1      	ldr	r1, [r4, #12]
    9d4e:	7908      	ldrb	r0, [r1, #4]
    9d50:	f000 0207 	and.w	r2, r0, #7
    9d54:	6860      	ldr	r0, [r4, #4]
    9d56:	f880 2062 	strb.w	r2, [r0, #98]	; 0x62
    9d5a:	7949      	ldrb	r1, [r1, #5]
    9d5c:	f001 0107 	and.w	r1, r1, #7
    9d60:	f880 1063 	strb.w	r1, [r0, #99]	; 0x63
    9d64:	f890 313f 	ldrb.w	r3, [r0, #319]	; 0x13f
    9d68:	f88d 3018 	strb.w	r3, [sp, #24]
    9d6c:	9b06      	ldr	r3, [sp, #24]
    9d6e:	9301      	str	r3, [sp, #4]
    9d70:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9d74:	bb23      	cbnz	r3, 9dc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9d76:	e004      	b.n	9d82 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1036>
    9d78:	2000      	movs	r0, #0
    9d7a:	f7ff fe8d 	bl	9a98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9d7e:	4606      	mov	r6, r0
    9d80:	e025      	b.n	9dce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1082>
    9d82:	f890 313e 	ldrb.w	r3, [r0, #318]	; 0x13e
    9d86:	2b01      	cmp	r3, #1
    9d88:	d01a      	beq.n	9dc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9d8a:	f890 c06b 	ldrb.w	ip, [r0, #107]	; 0x6b
    9d8e:	f100 036a 	add.w	r3, r0, #106	; 0x6a
    9d92:	4594      	cmp	ip, r2
    9d94:	d106      	bne.n	9da4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9d96:	781a      	ldrb	r2, [r3, #0]
    9d98:	428a      	cmp	r2, r1
    9d9a:	d103      	bne.n	9da4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1058>
    9d9c:	2102      	movs	r1, #2
    9d9e:	f880 113e 	strb.w	r1, [r0, #318]	; 0x13e
    9da2:	e00d      	b.n	9dc0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1074>
    9da4:	f500 71d6 	add.w	r1, r0, #428	; 0x1ac
    9da8:	8802      	ldrh	r2, [r0, #0]
    9daa:	f821 2902 	strh.w	r2, [r1], #-2
    9dae:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
    9db2:	710a      	strb	r2, [r1, #4]
    9db4:	f890 0063 	ldrb.w	r0, [r0, #99]	; 0x63
    9db8:	7148      	strb	r0, [r1, #5]
    9dba:	700d      	strb	r5, [r1, #0]
    9dbc:	f7fc f9c0 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9dc0:	6860      	ldr	r0, [r4, #4]
    9dc2:	2121      	movs	r1, #33	; 0x21
    9dc4:	f800 1f86 	strb.w	r1, [r0, #134]!
    9dc8:	f880 5036 	strb.w	r5, [r0, #54]	; 0x36
    9dcc:	8687      	strh	r7, [r0, #52]	; 0x34
    9dce:	4630      	mov	r0, r6
    9dd0:	e799      	b.n	9d06 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xfba>
    9dd2:	0000      	.short	0x0000
    9dd4:	2000011c 	.word	0x2000011c
    9dd8:	b570      	push	{r4, r5, r6, lr}
    9dda:	4c18      	ldr	r4, [pc, #96]	; (9e3c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10f0>)
    9ddc:	6860      	ldr	r0, [r4, #4]
    9dde:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    9de2:	281f      	cmp	r0, #31
    9de4:	d001      	beq.n	9dea <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x109e>
    9de6:	2001      	movs	r0, #1
    9de8:	bd70      	pop	{r4, r5, r6, pc}
    9dea:	68e0      	ldr	r0, [r4, #12]
    9dec:	f004 f931 	bl	e052 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>
    9df0:	b1d8      	cbz	r0, 9e2a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x10de>
    9df2:	68e0      	ldr	r0, [r4, #12]
    9df4:	2201      	movs	r2, #1
    9df6:	7901      	ldrb	r1, [r0, #4]
    9df8:	7940      	ldrb	r0, [r0, #5]
    9dfa:	f001 0107 	and.w	r1, r1, #7
    9dfe:	f361 0507 	bfi	r5, r1, #0, #8
    9e02:	4629      	mov	r1, r5
    9e04:	f000 0007 	and.w	r0, r0, #7
    9e08:	f360 210f 	bfi	r1, r0, #8, #8
    9e0c:	6860      	ldr	r0, [r4, #4]
    9e0e:	f880 20b8 	strb.w	r2, [r0, #184]	; 0xb8
    9e12:	2200      	movs	r2, #0
    9e14:	f8a0 20b4 	strh.w	r2, [r0, #180]	; 0xb4
    9e18:	2223      	movs	r2, #35	; 0x23
    9e1a:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    9e1e:	f8d0 0140 	ldr.w	r0, [r0, #320]	; 0x140
    9e22:	f7ff fdb9 	bl	9998 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xc4c>
    9e26:	2000      	movs	r0, #0
    9e28:	bd70      	pop	{r4, r5, r6, pc}
    9e2a:	2001      	movs	r0, #1
    9e2c:	f7ff fe34 	bl	9a98 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xd4c>
    9e30:	4604      	mov	r4, r0
    9e32:	201e      	movs	r0, #30
    9e34:	f7ff fd6a 	bl	990c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    9e38:	4620      	mov	r0, r4
    9e3a:	bd70      	pop	{r4, r5, r6, pc}
    9e3c:	2000011c 	.word	0x2000011c
    9e40:	b570      	push	{r4, r5, r6, lr}
    9e42:	4d07      	ldr	r5, [pc, #28]	; (9e60 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1114>)
    9e44:	2400      	movs	r4, #0
    9e46:	68e8      	ldr	r0, [r5, #12]
    9e48:	f004 f90d 	bl	e066 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>
    9e4c:	2803      	cmp	r0, #3
    9e4e:	d105      	bne.n	9e5c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1110>
    9e50:	68e8      	ldr	r0, [r5, #12]
    9e52:	f004 f90a 	bl	e06a <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>
    9e56:	f000 f805 	bl	9e64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9e5a:	4604      	mov	r4, r0
    9e5c:	4620      	mov	r0, r4
    9e5e:	bd70      	pop	{r4, r5, r6, pc}
    9e60:	2000011c 	.word	0x2000011c
    9e64:	b570      	push	{r4, r5, r6, lr}
    9e66:	4d18      	ldr	r5, [pc, #96]	; (9ec8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x117c>)
    9e68:	6869      	ldr	r1, [r5, #4]
    9e6a:	f891 2085 	ldrb.w	r2, [r1, #133]	; 0x85
    9e6e:	2a16      	cmp	r2, #22
    9e70:	d001      	beq.n	9e76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x112a>
    9e72:	2a13      	cmp	r2, #19
    9e74:	d102      	bne.n	9e7c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1130>
    9e76:	f891 20be 	ldrb.w	r2, [r1, #190]	; 0xbe
    9e7a:	b10a      	cbz	r2, 9e80 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1134>
    9e7c:	2002      	movs	r0, #2
    9e7e:	bd70      	pop	{r4, r5, r6, pc}
    9e80:	f881 00f8 	strb.w	r0, [r1, #248]	; 0xf8
    9e84:	2400      	movs	r4, #0
    9e86:	f881 40bd 	strb.w	r4, [r1, #189]	; 0xbd
    9e8a:	f881 40b8 	strb.w	r4, [r1, #184]	; 0xb8
    9e8e:	f891 21d2 	ldrb.w	r2, [r1, #466]	; 0x1d2
    9e92:	b122      	cbz	r2, 9e9e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1152>
    9e94:	f240 21eb 	movw	r1, #747	; 0x2eb
    9e98:	2036      	movs	r0, #54	; 0x36
    9e9a:	f7fa f811 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9e9e:	880a      	ldrh	r2, [r1, #0]
    9ea0:	f8a1 21d6 	strh.w	r2, [r1, #470]	; 0x1d6
    9ea4:	f881 01d4 	strb.w	r0, [r1, #468]	; 0x1d4
    9ea8:	f881 41d8 	strb.w	r4, [r1, #472]	; 0x1d8
    9eac:	200d      	movs	r0, #13
    9eae:	f881 01d2 	strb.w	r0, [r1, #466]	; 0x1d2
    9eb2:	f881 415a 	strb.w	r4, [r1, #346]	; 0x15a
    9eb6:	f000 fb9b 	bl	a5f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9eba:	f7fc f941 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9ebe:	6868      	ldr	r0, [r5, #4]
    9ec0:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9ec4:	2000      	movs	r0, #0
    9ec6:	bd70      	pop	{r4, r5, r6, pc}
    9ec8:	2000011c 	.word	0x2000011c
    9ecc:	4802      	ldr	r0, [pc, #8]	; (9ed8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x118c>)
    9ece:	68c0      	ldr	r0, [r0, #12]
    9ed0:	7900      	ldrb	r0, [r0, #4]
    9ed2:	f7ff bfc7 	b.w	9e64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1118>
    9ed6:	0000      	.short	0x0000
    9ed8:	2000011c 	.word	0x2000011c
    9edc:	b510      	push	{r4, lr}
    9ede:	4c0e      	ldr	r4, [pc, #56]	; (9f18 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11cc>)
    9ee0:	6860      	ldr	r0, [r4, #4]
    9ee2:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9ee6:	2916      	cmp	r1, #22
    9ee8:	d001      	beq.n	9eee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11a2>
    9eea:	2002      	movs	r0, #2
    9eec:	bd10      	pop	{r4, pc}
    9eee:	f100 03e0 	add.w	r3, r0, #224	; 0xe0
    9ef2:	f200 1175 	addw	r1, r0, #373	; 0x175
    9ef6:	2200      	movs	r2, #0
    9ef8:	f200 1065 	addw	r0, r0, #357	; 0x165
    9efc:	f003 fdbf 	bl	da7e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    9f00:	6860      	ldr	r0, [r4, #4]
    9f02:	2100      	movs	r1, #0
    9f04:	e9c0 1134 	strd	r1, r1, [r0, #208]	; 0xd0
    9f08:	2101      	movs	r1, #1
    9f0a:	f880 108a 	strb.w	r1, [r0, #138]	; 0x8a
    9f0e:	2118      	movs	r1, #24
    9f10:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    9f14:	2000      	movs	r0, #0
    9f16:	bd10      	pop	{r4, pc}
    9f18:	2000011c 	.word	0x2000011c
    9f1c:	b570      	push	{r4, r5, r6, lr}
    9f1e:	4d1b      	ldr	r5, [pc, #108]	; (9f8c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1240>)
    9f20:	6868      	ldr	r0, [r5, #4]
    9f22:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    9f26:	291a      	cmp	r1, #26
    9f28:	d001      	beq.n	9f2e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x11e2>
    9f2a:	2002      	movs	r0, #2
    9f2c:	bd70      	pop	{r4, r5, r6, pc}
    9f2e:	2400      	movs	r4, #0
    9f30:	f880 40bd 	strb.w	r4, [r0, #189]	; 0xbd
    9f34:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    9f38:	f880 415a 	strb.w	r4, [r0, #346]	; 0x15a
    9f3c:	f890 11d2 	ldrb.w	r1, [r0, #466]	; 0x1d2
    9f40:	b121      	cbz	r1, 9f4c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1200>
    9f42:	f240 3113 	movw	r1, #787	; 0x313
    9f46:	2036      	movs	r0, #54	; 0x36
    9f48:	f7f9 ffba 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    9f4c:	f890 10be 	ldrb.w	r1, [r0, #190]	; 0xbe
    9f50:	b141      	cbz	r1, 9f64 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1218>
    9f52:	f880 40be 	strb.w	r4, [r0, #190]	; 0xbe
    9f56:	8801      	ldrh	r1, [r0, #0]
    9f58:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9f5c:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9f60:	210e      	movs	r1, #14
    9f62:	e008      	b.n	9f76 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x122a>
    9f64:	8801      	ldrh	r1, [r0, #0]
    9f66:	f8a0 11d6 	strh.w	r1, [r0, #470]	; 0x1d6
    9f6a:	f880 41d4 	strb.w	r4, [r0, #468]	; 0x1d4
    9f6e:	2101      	movs	r1, #1
    9f70:	f880 11d8 	strb.w	r1, [r0, #472]	; 0x1d8
    9f74:	210d      	movs	r1, #13
    9f76:	f880 11d2 	strb.w	r1, [r0, #466]	; 0x1d2
    9f7a:	f000 fb39 	bl	a5f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a4>
    9f7e:	f7fc f8df 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    9f82:	6868      	ldr	r0, [r5, #4]
    9f84:	f880 4085 	strb.w	r4, [r0, #133]	; 0x85
    9f88:	2000      	movs	r0, #0
    9f8a:	bd70      	pop	{r4, r5, r6, pc}
    9f8c:	2000011c 	.word	0x2000011c
    9f90:	b510      	push	{r4, lr}
    9f92:	4c0d      	ldr	r4, [pc, #52]	; (9fc8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x127c>)
    9f94:	2300      	movs	r3, #0
    9f96:	2101      	movs	r1, #1
    9f98:	6860      	ldr	r0, [r4, #4]
    9f9a:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    9f9e:	3078      	adds	r0, #120	; 0x78
    9fa0:	f003 fe03 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fa4:	b108      	cbz	r0, 9faa <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125e>
    9fa6:	2000      	movs	r0, #0
    9fa8:	bd10      	pop	{r4, pc}
    9faa:	68e0      	ldr	r0, [r4, #12]
    9fac:	f004 f827 	bl	dffe <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>
    9fb0:	6861      	ldr	r1, [r4, #4]
    9fb2:	f881 012c 	strb.w	r0, [r1, #300]	; 0x12c
    9fb6:	2007      	movs	r0, #7
    9fb8:	f881 0088 	strb.w	r0, [r1, #136]	; 0x88
    9fbc:	2000      	movs	r0, #0
    9fbe:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    9fc2:	f881 00b8 	strb.w	r0, [r1, #184]	; 0xb8
    9fc6:	e7ee      	b.n	9fa6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x125a>
    9fc8:	2000011c 	.word	0x2000011c
    9fcc:	b570      	push	{r4, r5, r6, lr}
    9fce:	4c25      	ldr	r4, [pc, #148]	; (a064 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1318>)
    9fd0:	2600      	movs	r6, #0
    9fd2:	2109      	movs	r1, #9
    9fd4:	6860      	ldr	r0, [r4, #4]
    9fd6:	4633      	mov	r3, r6
    9fd8:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9fdc:	3078      	adds	r0, #120	; 0x78
    9fde:	f003 fde4 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9fe2:	2500      	movs	r5, #0
    9fe4:	b118      	cbz	r0, 9fee <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12a2>
    9fe6:	68e0      	ldr	r0, [r4, #12]
    9fe8:	7900      	ldrb	r0, [r0, #4]
    9fea:	2812      	cmp	r0, #18
    9fec:	d011      	beq.n	a012 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12c6>
    9fee:	6860      	ldr	r0, [r4, #4]
    9ff0:	210a      	movs	r1, #10
    9ff2:	2300      	movs	r3, #0
    9ff4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    9ff8:	3078      	adds	r0, #120	; 0x78
    9ffa:	f003 fdd6 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    9ffe:	b118      	cbz	r0, a008 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12bc>
    a000:	68e0      	ldr	r0, [r4, #12]
    a002:	7900      	ldrb	r0, [r0, #4]
    a004:	2814      	cmp	r0, #20
    a006:	d008      	beq.n	a01a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ce>
    a008:	68e0      	ldr	r0, [r4, #12]
    a00a:	7900      	ldrb	r0, [r0, #4]
    a00c:	2816      	cmp	r0, #22
    a00e:	d012      	beq.n	a036 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x12ea>
    a010:	e026      	b.n	a060 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    a012:	f7ff fe31 	bl	9c78 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xf2c>
    a016:	4606      	mov	r6, r0
    a018:	e022      	b.n	a060 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    a01a:	6860      	ldr	r0, [r4, #4]
    a01c:	2105      	movs	r1, #5
    a01e:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a022:	f8a0 50b4 	strh.w	r5, [r0, #180]	; 0xb4
    a026:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a02a:	30c6      	adds	r0, #198	; 0xc6
    a02c:	f004 fcde 	bl	e9ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    a030:	f7ff f8c0 	bl	91b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x468>
    a034:	e014      	b.n	a060 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    a036:	6860      	ldr	r0, [r4, #4]
    a038:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a03c:	291f      	cmp	r1, #31
    a03e:	d10f      	bne.n	a060 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1314>
    a040:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a044:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a048:	2108      	movs	r1, #8
    a04a:	30c6      	adds	r0, #198	; 0xc6
    a04c:	f004 fcce 	bl	e9ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    a050:	6860      	ldr	r0, [r4, #4]
    a052:	210b      	movs	r1, #11
    a054:	30c6      	adds	r0, #198	; 0xc6
    a056:	f004 fcc9 	bl	e9ec <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x158>
    a05a:	201a      	movs	r0, #26
    a05c:	f7ff fc56 	bl	990c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a060:	4630      	mov	r0, r6
    a062:	bd70      	pop	{r4, r5, r6, pc}
    a064:	2000011c 	.word	0x2000011c
    a068:	b570      	push	{r4, r5, r6, lr}
    a06a:	4c32      	ldr	r4, [pc, #200]	; (a134 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e8>)
    a06c:	2300      	movs	r3, #0
    a06e:	4619      	mov	r1, r3
    a070:	6860      	ldr	r0, [r4, #4]
    a072:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a076:	3078      	adds	r0, #120	; 0x78
    a078:	f003 fd97 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a07c:	b940      	cbnz	r0, a090 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1344>
    a07e:	6860      	ldr	r0, [r4, #4]
    a080:	2300      	movs	r3, #0
    a082:	2108      	movs	r1, #8
    a084:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a088:	3078      	adds	r0, #120	; 0x78
    a08a:	f003 fd8e 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a08e:	b1f8      	cbz	r0, a0d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1384>
    a090:	6860      	ldr	r0, [r4, #4]
    a092:	f890 00c0 	ldrb.w	r0, [r0, #192]	; 0xc0
    a096:	0780      	lsls	r0, r0, #30
    a098:	d412      	bmi.n	a0c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1374>
    a09a:	68e0      	ldr	r0, [r4, #12]
    a09c:	f003 ffb1 	bl	e002 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>
    a0a0:	6861      	ldr	r1, [r4, #4]
    a0a2:	f881 00c1 	strb.w	r0, [r1, #193]	; 0xc1
    a0a6:	68e0      	ldr	r0, [r4, #12]
    a0a8:	f830 2f05 	ldrh.w	r2, [r0, #5]!
    a0ac:	f8a1 20c2 	strh.w	r2, [r1, #194]	; 0xc2
    a0b0:	8840      	ldrh	r0, [r0, #2]
    a0b2:	f8a1 00c4 	strh.w	r0, [r1, #196]	; 0xc4
    a0b6:	f811 0fc0 	ldrb.w	r0, [r1, #192]!
    a0ba:	f040 0002 	orr.w	r0, r0, #2
    a0be:	7008      	strb	r0, [r1, #0]
    a0c0:	6860      	ldr	r0, [r4, #4]
    a0c2:	f04f 0500 	mov.w	r5, #0
    a0c6:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a0ca:	07c9      	lsls	r1, r1, #31
    a0cc:	d002      	beq.n	a0d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1388>
    a0ce:	e010      	b.n	a0f2 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13a6>
    a0d0:	2001      	movs	r0, #1
    a0d2:	bd70      	pop	{r4, r5, r6, pc}
    a0d4:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a0d8:	2300      	movs	r3, #0
    a0da:	4619      	mov	r1, r3
    a0dc:	3078      	adds	r0, #120	; 0x78
    a0de:	f003 fd64 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a0e2:	b160      	cbz	r0, a0fe <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13b2>
    a0e4:	6860      	ldr	r0, [r4, #4]
    a0e6:	2101      	movs	r1, #1
    a0e8:	f800 1f86 	strb.w	r1, [r0, #134]!
    a0ec:	f880 1036 	strb.w	r1, [r0, #54]	; 0x36
    a0f0:	8685      	strh	r5, [r0, #52]	; 0x34
    a0f2:	6860      	ldr	r0, [r4, #4]
    a0f4:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a0f8:	2901      	cmp	r1, #1
    a0fa:	d005      	beq.n	a108 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13bc>
    a0fc:	e00a      	b.n	a114 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13c8>
    a0fe:	f240 314e 	movw	r1, #846	; 0x34e
    a102:	2036      	movs	r0, #54	; 0x36
    a104:	f7f9 fedc 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a108:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a10c:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a110:	f7fc f816 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a114:	6860      	ldr	r0, [r4, #4]
    a116:	f890 1158 	ldrb.w	r1, [r0, #344]	; 0x158
    a11a:	b149      	cbz	r1, a130 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    a11c:	f880 5158 	strb.w	r5, [r0, #344]	; 0x158
    a120:	f7fc f80e 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a124:	6860      	ldr	r0, [r4, #4]
    a126:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a12a:	b909      	cbnz	r1, a130 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x13e4>
    a12c:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a130:	2000      	movs	r0, #0
    a132:	bd70      	pop	{r4, r5, r6, pc}
    a134:	2000011c 	.word	0x2000011c
    a138:	b510      	push	{r4, lr}
    a13a:	4c0a      	ldr	r4, [pc, #40]	; (a164 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1418>)
    a13c:	2300      	movs	r3, #0
    a13e:	4619      	mov	r1, r3
    a140:	6860      	ldr	r0, [r4, #4]
    a142:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a146:	3078      	adds	r0, #120	; 0x78
    a148:	f003 fd2f 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a14c:	b120      	cbz	r0, a158 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x140c>
    a14e:	6861      	ldr	r1, [r4, #4]
    a150:	200c      	movs	r0, #12
    a152:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a156:	bd10      	pop	{r4, pc}
    a158:	f240 51fa 	movw	r1, #1530	; 0x5fa
    a15c:	2036      	movs	r0, #54	; 0x36
    a15e:	f7f9 feaf 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a162:	0000      	.short	0x0000
    a164:	2000011c 	.word	0x2000011c
    a168:	b510      	push	{r4, lr}
    a16a:	4c0a      	ldr	r4, [pc, #40]	; (a194 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1448>)
    a16c:	2300      	movs	r3, #0
    a16e:	4619      	mov	r1, r3
    a170:	6860      	ldr	r0, [r4, #4]
    a172:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a176:	3078      	adds	r0, #120	; 0x78
    a178:	f003 fd17 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a17c:	b120      	cbz	r0, a188 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x143c>
    a17e:	6861      	ldr	r1, [r4, #4]
    a180:	200d      	movs	r0, #13
    a182:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a186:	bd10      	pop	{r4, pc}
    a188:	f44f 61c0 	mov.w	r1, #1536	; 0x600
    a18c:	2036      	movs	r0, #54	; 0x36
    a18e:	f7f9 fe97 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a192:	0000      	.short	0x0000
    a194:	2000011c 	.word	0x2000011c
    a198:	b510      	push	{r4, lr}
    a19a:	4c0d      	ldr	r4, [pc, #52]	; (a1d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1484>)
    a19c:	2300      	movs	r3, #0
    a19e:	4619      	mov	r1, r3
    a1a0:	6860      	ldr	r0, [r4, #4]
    a1a2:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a1a6:	3078      	adds	r0, #120	; 0x78
    a1a8:	f003 fcff 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1ac:	b918      	cbnz	r0, a1b6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x146a>
    a1ae:	6860      	ldr	r0, [r4, #4]
    a1b0:	f890 00be 	ldrb.w	r0, [r0, #190]	; 0xbe
    a1b4:	b138      	cbz	r0, a1c6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x147a>
    a1b6:	6860      	ldr	r0, [r4, #4]
    a1b8:	2101      	movs	r1, #1
    a1ba:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a1be:	2113      	movs	r1, #19
    a1c0:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a1c4:	bd10      	pop	{r4, pc}
    a1c6:	f240 6115 	movw	r1, #1557	; 0x615
    a1ca:	2036      	movs	r0, #54	; 0x36
    a1cc:	f7f9 fe78 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1d0:	2000011c 	.word	0x2000011c
    a1d4:	b510      	push	{r4, lr}
    a1d6:	4c0a      	ldr	r4, [pc, #40]	; (a200 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14b4>)
    a1d8:	2300      	movs	r3, #0
    a1da:	4619      	mov	r1, r3
    a1dc:	6860      	ldr	r0, [r4, #4]
    a1de:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a1e2:	3078      	adds	r0, #120	; 0x78
    a1e4:	f003 fce1 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a1e8:	b120      	cbz	r0, a1f4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14a8>
    a1ea:	6861      	ldr	r1, [r4, #4]
    a1ec:	2004      	movs	r0, #4
    a1ee:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a1f2:	bd10      	pop	{r4, pc}
    a1f4:	f240 51f4 	movw	r1, #1524	; 0x5f4
    a1f8:	2036      	movs	r0, #54	; 0x36
    a1fa:	f7f9 fe61 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a1fe:	0000      	.short	0x0000
    a200:	2000011c 	.word	0x2000011c
    a204:	b510      	push	{r4, lr}
    a206:	4c0a      	ldr	r4, [pc, #40]	; (a230 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14e4>)
    a208:	2300      	movs	r3, #0
    a20a:	4619      	mov	r1, r3
    a20c:	6860      	ldr	r0, [r4, #4]
    a20e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a212:	3078      	adds	r0, #120	; 0x78
    a214:	f003 fcc9 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a218:	b120      	cbz	r0, a224 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x14d8>
    a21a:	6861      	ldr	r1, [r4, #4]
    a21c:	201c      	movs	r0, #28
    a21e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a222:	bd10      	pop	{r4, pc}
    a224:	f240 614c 	movw	r1, #1612	; 0x64c
    a228:	2036      	movs	r0, #54	; 0x36
    a22a:	f7f9 fe49 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a22e:	0000      	.short	0x0000
    a230:	2000011c 	.word	0x2000011c
    a234:	b510      	push	{r4, lr}
    a236:	4c0a      	ldr	r4, [pc, #40]	; (a260 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1514>)
    a238:	2300      	movs	r3, #0
    a23a:	4619      	mov	r1, r3
    a23c:	6860      	ldr	r0, [r4, #4]
    a23e:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a242:	3078      	adds	r0, #120	; 0x78
    a244:	f003 fcb1 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a248:	b120      	cbz	r0, a254 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1508>
    a24a:	6861      	ldr	r1, [r4, #4]
    a24c:	2000      	movs	r0, #0
    a24e:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a252:	bd10      	pop	{r4, pc}
    a254:	f240 6153 	movw	r1, #1619	; 0x653
    a258:	2036      	movs	r0, #54	; 0x36
    a25a:	f7f9 fe31 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a25e:	0000      	.short	0x0000
    a260:	2000011c 	.word	0x2000011c
    a264:	b510      	push	{r4, lr}
    a266:	4c0a      	ldr	r4, [pc, #40]	; (a290 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1544>)
    a268:	2300      	movs	r3, #0
    a26a:	4619      	mov	r1, r3
    a26c:	6860      	ldr	r0, [r4, #4]
    a26e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a272:	3078      	adds	r0, #120	; 0x78
    a274:	f003 fc99 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a278:	b120      	cbz	r0, a284 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1538>
    a27a:	6861      	ldr	r1, [r4, #4]
    a27c:	2005      	movs	r0, #5
    a27e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a282:	bd10      	pop	{r4, pc}
    a284:	f240 613f 	movw	r1, #1599	; 0x63f
    a288:	2036      	movs	r0, #54	; 0x36
    a28a:	f7f9 fe19 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a28e:	0000      	.short	0x0000
    a290:	2000011c 	.word	0x2000011c
    a294:	4902      	ldr	r1, [pc, #8]	; (a2a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1554>)
    a296:	2000      	movs	r0, #0
    a298:	6849      	ldr	r1, [r1, #4]
    a29a:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a29e:	4770      	bx	lr
    a2a0:	2000011c 	.word	0x2000011c
    a2a4:	b510      	push	{r4, lr}
    a2a6:	4c0b      	ldr	r4, [pc, #44]	; (a2d4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1588>)
    a2a8:	2300      	movs	r3, #0
    a2aa:	4619      	mov	r1, r3
    a2ac:	6860      	ldr	r0, [r4, #4]
    a2ae:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a2b2:	3078      	adds	r0, #120	; 0x78
    a2b4:	f003 fc79 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a2b8:	b138      	cbz	r0, a2ca <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x157e>
    a2ba:	6860      	ldr	r0, [r4, #4]
    a2bc:	2101      	movs	r1, #1
    a2be:	f880 10bd 	strb.w	r1, [r0, #189]	; 0xbd
    a2c2:	210f      	movs	r1, #15
    a2c4:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a2c8:	bd10      	pop	{r4, pc}
    a2ca:	f240 6106 	movw	r1, #1542	; 0x606
    a2ce:	2036      	movs	r0, #54	; 0x36
    a2d0:	f7f9 fdf6 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2d4:	2000011c 	.word	0x2000011c
    a2d8:	4809      	ldr	r0, [pc, #36]	; (a300 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15b4>)
    a2da:	b510      	push	{r4, lr}
    a2dc:	6840      	ldr	r0, [r0, #4]
    a2de:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a2e2:	2912      	cmp	r1, #18
    a2e4:	d004      	beq.n	a2f0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15a4>
    a2e6:	f240 610e 	movw	r1, #1550	; 0x60e
    a2ea:	2036      	movs	r0, #54	; 0x36
    a2ec:	f7f9 fde8 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a2f0:	2101      	movs	r1, #1
    a2f2:	f880 10be 	strb.w	r1, [r0, #190]	; 0xbe
    a2f6:	2111      	movs	r1, #17
    a2f8:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a2fc:	bd10      	pop	{r4, pc}
    a2fe:	0000      	.short	0x0000
    a300:	2000011c 	.word	0x2000011c
    a304:	b510      	push	{r4, lr}
    a306:	4c0a      	ldr	r4, [pc, #40]	; (a330 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15e4>)
    a308:	2300      	movs	r3, #0
    a30a:	4619      	mov	r1, r3
    a30c:	6860      	ldr	r0, [r4, #4]
    a30e:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a312:	3078      	adds	r0, #120	; 0x78
    a314:	f003 fc49 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a318:	b120      	cbz	r0, a324 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15d8>
    a31a:	6861      	ldr	r1, [r4, #4]
    a31c:	201f      	movs	r0, #31
    a31e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a322:	bd10      	pop	{r4, pc}
    a324:	f240 615c 	movw	r1, #1628	; 0x65c
    a328:	2036      	movs	r0, #54	; 0x36
    a32a:	f7f9 fdc9 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a32e:	0000      	.short	0x0000
    a330:	2000011c 	.word	0x2000011c
    a334:	b570      	push	{r4, r5, r6, lr}
    a336:	4c1d      	ldr	r4, [pc, #116]	; (a3ac <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1660>)
    a338:	6860      	ldr	r0, [r4, #4]
    a33a:	f890 1126 	ldrb.w	r1, [r0, #294]	; 0x126
    a33e:	b911      	cbnz	r1, a346 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fa>
    a340:	f890 1127 	ldrb.w	r1, [r0, #295]	; 0x127
    a344:	b179      	cbz	r1, a366 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161a>
    a346:	2100      	movs	r1, #0
    a348:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
    a34c:	2224      	movs	r2, #36	; 0x24
    a34e:	2500      	movs	r5, #0
    a350:	2b21      	cmp	r3, #33	; 0x21
    a352:	d00a      	beq.n	a36a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x161e>
    a354:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
    a358:	2b23      	cmp	r3, #35	; 0x23
    a35a:	d01a      	beq.n	a392 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1646>
    a35c:	f44f 61d1 	mov.w	r1, #1672	; 0x688
    a360:	2036      	movs	r0, #54	; 0x36
    a362:	f7f9 fdad 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a366:	2101      	movs	r1, #1
    a368:	e7ee      	b.n	a348 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x15fc>
    a36a:	b161      	cbz	r1, a386 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163a>
    a36c:	f880 5086 	strb.w	r5, [r0, #134]	; 0x86
    a370:	f890 013e 	ldrb.w	r0, [r0, #318]	; 0x13e
    a374:	2801      	cmp	r0, #1
    a376:	d102      	bne.n	a37e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1632>
    a378:	2000      	movs	r0, #0
    a37a:	f7ff fac7 	bl	990c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a37e:	6860      	ldr	r0, [r4, #4]
    a380:	f880 513e 	strb.w	r5, [r0, #318]	; 0x13e
    a384:	e001      	b.n	a38a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x163e>
    a386:	f880 2086 	strb.w	r2, [r0, #134]	; 0x86
    a38a:	6860      	ldr	r0, [r4, #4]
    a38c:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a390:	bd70      	pop	{r4, r5, r6, pc}
    a392:	b129      	cbz	r1, a3a0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1654>
    a394:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
    a398:	2000      	movs	r0, #0
    a39a:	f7ff fab7 	bl	990c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0xbc0>
    a39e:	e001      	b.n	a3a4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1658>
    a3a0:	f880 2085 	strb.w	r2, [r0, #133]	; 0x85
    a3a4:	6860      	ldr	r0, [r4, #4]
    a3a6:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a3aa:	bd70      	pop	{r4, r5, r6, pc}
    a3ac:	2000011c 	.word	0x2000011c
    a3b0:	4903      	ldr	r1, [pc, #12]	; (a3c0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1674>)
    a3b2:	2000      	movs	r0, #0
    a3b4:	6849      	ldr	r1, [r1, #4]
    a3b6:	f881 0086 	strb.w	r0, [r1, #134]	; 0x86
    a3ba:	f881 00bc 	strb.w	r0, [r1, #188]	; 0xbc
    a3be:	4770      	bx	lr
    a3c0:	2000011c 	.word	0x2000011c
    a3c4:	4807      	ldr	r0, [pc, #28]	; (a3e4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1698>)
    a3c6:	b510      	push	{r4, lr}
    a3c8:	6840      	ldr	r0, [r0, #4]
    a3ca:	f890 1085 	ldrb.w	r1, [r0, #133]	; 0x85
    a3ce:	2918      	cmp	r1, #24
    a3d0:	d004      	beq.n	a3dc <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1690>
    a3d2:	f240 611e 	movw	r1, #1566	; 0x61e
    a3d6:	2036      	movs	r0, #54	; 0x36
    a3d8:	f7f9 fd72 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a3dc:	211a      	movs	r1, #26
    a3de:	f880 1085 	strb.w	r1, [r0, #133]	; 0x85
    a3e2:	bd10      	pop	{r4, pc}
    a3e4:	2000011c 	.word	0x2000011c
    a3e8:	b510      	push	{r4, lr}
    a3ea:	4c0a      	ldr	r4, [pc, #40]	; (a414 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c8>)
    a3ec:	2300      	movs	r3, #0
    a3ee:	2101      	movs	r1, #1
    a3f0:	6860      	ldr	r0, [r4, #4]
    a3f2:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
    a3f6:	3078      	adds	r0, #120	; 0x78
    a3f8:	f003 fbd7 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a3fc:	2800      	cmp	r0, #0
    a3fe:	d108      	bne.n	a412 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16c6>
    a400:	6860      	ldr	r0, [r4, #4]
    a402:	2108      	movs	r1, #8
    a404:	f880 1088 	strb.w	r1, [r0, #136]	; 0x88
    a408:	2100      	movs	r1, #0
    a40a:	f880 10b8 	strb.w	r1, [r0, #184]	; 0xb8
    a40e:	f880 10bc 	strb.w	r1, [r0, #188]	; 0xbc
    a412:	bd10      	pop	{r4, pc}
    a414:	2000011c 	.word	0x2000011c
    a418:	b570      	push	{r4, r5, r6, lr}
    a41a:	4c0e      	ldr	r4, [pc, #56]	; (a454 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1708>)
    a41c:	2300      	movs	r3, #0
    a41e:	4619      	mov	r1, r3
    a420:	6860      	ldr	r0, [r4, #4]
    a422:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a426:	3078      	adds	r0, #120	; 0x78
    a428:	f003 fbbf 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a42c:	2500      	movs	r5, #0
    a42e:	b110      	cbz	r0, a436 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x16ea>
    a430:	6860      	ldr	r0, [r4, #4]
    a432:	f880 50bc 	strb.w	r5, [r0, #188]	; 0xbc
    a436:	6860      	ldr	r0, [r4, #4]
    a438:	2300      	movs	r3, #0
    a43a:	4619      	mov	r1, r3
    a43c:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a440:	3078      	adds	r0, #120	; 0x78
    a442:	f003 fbb2 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a446:	2800      	cmp	r0, #0
    a448:	d002      	beq.n	a450 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1704>
    a44a:	6860      	ldr	r0, [r4, #4]
    a44c:	f880 50b8 	strb.w	r5, [r0, #184]	; 0xb8
    a450:	bd70      	pop	{r4, r5, r6, pc}
    a452:	0000      	.short	0x0000
    a454:	2000011c 	.word	0x2000011c
    a458:	b570      	push	{r4, r5, r6, lr}
    a45a:	4d16      	ldr	r5, [pc, #88]	; (a4b4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1768>)
    a45c:	f04f 0400 	mov.w	r4, #0
    a460:	6868      	ldr	r0, [r5, #4]
    a462:	f890 10c0 	ldrb.w	r1, [r0, #192]	; 0xc0
    a466:	0789      	lsls	r1, r1, #30
    a468:	d411      	bmi.n	a48e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1742>
    a46a:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    a46e:	2300      	movs	r3, #0
    a470:	4619      	mov	r1, r3
    a472:	3078      	adds	r0, #120	; 0x78
    a474:	f003 fb99 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a478:	b120      	cbz	r0, a484 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1738>
    a47a:	6869      	ldr	r1, [r5, #4]
    a47c:	2001      	movs	r0, #1
    a47e:	f881 0085 	strb.w	r0, [r1, #133]	; 0x85
    a482:	e008      	b.n	a496 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x174a>
    a484:	f240 612b 	movw	r1, #1579	; 0x62b
    a488:	2036      	movs	r0, #54	; 0x36
    a48a:	f7f9 fd19 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a48e:	f880 40b8 	strb.w	r4, [r0, #184]	; 0xb8
    a492:	f880 4158 	strb.w	r4, [r0, #344]	; 0x158
    a496:	6868      	ldr	r0, [r5, #4]
    a498:	2300      	movs	r3, #0
    a49a:	4619      	mov	r1, r3
    a49c:	f890 2086 	ldrb.w	r2, [r0, #134]	; 0x86
    a4a0:	3078      	adds	r0, #120	; 0x78
    a4a2:	f003 fb82 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4a6:	2800      	cmp	r0, #0
    a4a8:	d002      	beq.n	a4b0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1764>
    a4aa:	6868      	ldr	r0, [r5, #4]
    a4ac:	f880 40bc 	strb.w	r4, [r0, #188]	; 0xbc
    a4b0:	bd70      	pop	{r4, r5, r6, pc}
    a4b2:	0000      	.short	0x0000
    a4b4:	2000011c 	.word	0x2000011c
    a4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a4ba:	4d4c      	ldr	r5, [pc, #304]	; (a5ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18a0>)
    a4bc:	4607      	mov	r7, r0
    a4be:	460e      	mov	r6, r1
    a4c0:	6868      	ldr	r0, [r5, #4]
    a4c2:	f100 0478 	add.w	r4, r0, #120	; 0x78
    a4c6:	f890 013c 	ldrb.w	r0, [r0, #316]	; 0x13c
    a4ca:	f88d 0000 	strb.w	r0, [sp]
    a4ce:	9800      	ldr	r0, [sp, #0]
    a4d0:	9000      	str	r0, [sp, #0]
    a4d2:	f89d 0000 	ldrb.w	r0, [sp]
    a4d6:	b930      	cbnz	r0, a4e6 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x179a>
    a4d8:	7c22      	ldrb	r2, [r4, #16]
    a4da:	2300      	movs	r3, #0
    a4dc:	2101      	movs	r1, #1
    a4de:	4620      	mov	r0, r4
    a4e0:	f003 fb63 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    a4e4:	b110      	cbz	r0, a4ec <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17a0>
    a4e6:	8f60      	ldrh	r0, [r4, #58]	; 0x3a
    a4e8:	1c40      	adds	r0, r0, #1
    a4ea:	8760      	strh	r0, [r4, #58]	; 0x3a
    a4ec:	2001      	movs	r0, #1
    a4ee:	213d      	movs	r1, #61	; 0x3d
    a4f0:	bbf7      	cbnz	r7, a570 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1824>
    a4f2:	782a      	ldrb	r2, [r5, #0]
    a4f4:	2a02      	cmp	r2, #2
    a4f6:	d006      	beq.n	a506 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17ba>
    a4f8:	2a01      	cmp	r2, #1
    a4fa:	d006      	beq.n	a50a <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17be>
    a4fc:	b1c6      	cbz	r6, a530 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e4>
    a4fe:	06f2      	lsls	r2, r6, #27
    a500:	d507      	bpl.n	a512 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17c6>
    a502:	211e      	movs	r1, #30
    a504:	e043      	b.n	a58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a506:	2116      	movs	r1, #22
    a508:	e041      	b.n	a58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a50a:	6869      	ldr	r1, [r5, #4]
    a50c:	f891 112c 	ldrb.w	r1, [r1, #300]	; 0x12c
    a510:	e03d      	b.n	a58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a512:	0732      	lsls	r2, r6, #28
    a514:	d43b      	bmi.n	a58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a516:	07b1      	lsls	r1, r6, #30
    a518:	d001      	beq.n	a51e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17d2>
    a51a:	212a      	movs	r1, #42	; 0x2a
    a51c:	e037      	b.n	a58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a51e:	06b1      	lsls	r1, r6, #26
    a520:	d404      	bmi.n	a52c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17e0>
    a522:	f44f 6135 	mov.w	r1, #2896	; 0xb50
    a526:	2036      	movs	r0, #54	; 0x36
    a528:	f7f9 fcca 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a52c:	2123      	movs	r1, #35	; 0x23
    a52e:	e02e      	b.n	a58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a530:	f894 1040 	ldrb.w	r1, [r4, #64]	; 0x40
    a534:	b129      	cbz	r1, a542 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x17f6>
    a536:	8fa1      	ldrh	r1, [r4, #60]	; 0x3c
    a538:	1c4a      	adds	r2, r1, #1
    a53a:	87a2      	strh	r2, [r4, #60]	; 0x3c
    a53c:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a53e:	4291      	cmp	r1, r2
    a540:	d21d      	bcs.n	a57e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a542:	f894 1044 	ldrb.w	r1, [r4, #68]	; 0x44
    a546:	b139      	cbz	r1, a558 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x180c>
    a548:	f8b4 1042 	ldrh.w	r1, [r4, #66]	; 0x42
    a54c:	1c4a      	adds	r2, r1, #1
    a54e:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
    a552:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
    a554:	4291      	cmp	r1, r2
    a556:	d212      	bcs.n	a57e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a558:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    a55a:	8f21      	ldrh	r1, [r4, #56]	; 0x38
    a55c:	428a      	cmp	r2, r1
    a55e:	d30b      	bcc.n	a578 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x182c>
    a560:	686b      	ldr	r3, [r5, #4]
    a562:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
    a566:	f88d 3000 	strb.w	r3, [sp]
    a56a:	9b00      	ldr	r3, [sp, #0]
    a56c:	9300      	str	r3, [sp, #0]
    a56e:	e000      	b.n	a572 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1826>
    a570:	e00d      	b.n	a58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a572:	f89d 3000 	ldrb.w	r3, [sp]
    a576:	b913      	cbnz	r3, a57e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1832>
    a578:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    a57a:	429a      	cmp	r2, r3
    a57c:	d301      	bcc.n	a582 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1836>
    a57e:	2122      	movs	r1, #34	; 0x22
    a580:	e005      	b.n	a58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a582:	7c62      	ldrb	r2, [r4, #17]
    a584:	b1f2      	cbz	r2, a5c4 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1878>
    a586:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    a588:	428a      	cmp	r2, r1
    a58a:	d304      	bcc.n	a596 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a58c:	2108      	movs	r1, #8
    a58e:	f884 1025 	strb.w	r1, [r4, #37]	; 0x25
    a592:	f884 0024 	strb.w	r0, [r4, #36]	; 0x24
    a596:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
    a59a:	f88d 0000 	strb.w	r0, [sp]
    a59e:	9800      	ldr	r0, [sp, #0]
    a5a0:	9000      	str	r0, [sp, #0]
    a5a2:	f89d 0000 	ldrb.w	r0, [sp]
    a5a6:	b1d8      	cbz	r0, a5e0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1894>
    a5a8:	2000      	movs	r0, #0
    a5aa:	7360      	strb	r0, [r4, #13]
    a5ac:	73a0      	strb	r0, [r4, #14]
    a5ae:	7460      	strb	r0, [r4, #17]
    a5b0:	2102      	movs	r1, #2
    a5b2:	6868      	ldr	r0, [r5, #4]
    a5b4:	f7fd fa66 	bl	7a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a5b8:	6868      	ldr	r0, [r5, #4]
    a5ba:	f890 10fc 	ldrb.w	r1, [r0, #252]	; 0xfc
    a5be:	2901      	cmp	r1, #1
    a5c0:	d005      	beq.n	a5ce <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1882>
    a5c2:	e009      	b.n	a5d8 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x188c>
    a5c4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
    a5c6:	2906      	cmp	r1, #6
    a5c8:	d3e5      	bcc.n	a596 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x184a>
    a5ca:	213e      	movs	r1, #62	; 0x3e
    a5cc:	e7df      	b.n	a58e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1842>
    a5ce:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
    a5d2:	7801      	ldrb	r1, [r0, #0]
    a5d4:	1e49      	subs	r1, r1, #1
    a5d6:	7001      	strb	r1, [r0, #0]
    a5d8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a5dc:	f7fb bdb0 	b.w	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    a5e0:	6868      	ldr	r0, [r5, #4]
    a5e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a5e6:	2100      	movs	r1, #0
    a5e8:	f7fd ba4c 	b.w	7a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    a5ec:	2000011c 	.word	0x2000011c
    a5f0:	4804      	ldr	r0, [pc, #16]	; (a604 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18b8>)
    a5f2:	b510      	push	{r4, lr}
    a5f4:	6840      	ldr	r0, [r0, #4]
    a5f6:	8800      	ldrh	r0, [r0, #0]
    a5f8:	f7fa f860 	bl	46bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    a5fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    a600:	f003 b800 	b.w	d604 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>
    a604:	2000011c 	.word	0x2000011c
    a608:	4a19      	ldr	r2, [pc, #100]	; (a670 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1924>)
    a60a:	2901      	cmp	r1, #1
    a60c:	6852      	ldr	r2, [r2, #4]
    a60e:	d010      	beq.n	a632 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e6>
    a610:	2100      	movs	r1, #0
    a612:	b1c8      	cbz	r0, a648 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fc>
    a614:	2801      	cmp	r0, #1
    a616:	d022      	beq.n	a65e <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x1912>
    a618:	2803      	cmp	r0, #3
    a61a:	d109      	bne.n	a630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a61c:	f892 0085 	ldrb.w	r0, [r2, #133]	; 0x85
    a620:	2813      	cmp	r0, #19
    a622:	d005      	beq.n	a630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a624:	2816      	cmp	r0, #22
    a626:	d003      	beq.n	a630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a628:	2818      	cmp	r0, #24
    a62a:	d001      	beq.n	a630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a62c:	f882 115a 	strb.w	r1, [r2, #346]	; 0x15a
    a630:	4770      	bx	lr
    a632:	f892 00fc 	ldrb.w	r0, [r2, #252]	; 0xfc
    a636:	2801      	cmp	r0, #1
    a638:	d0fa      	beq.n	a630 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18e4>
    a63a:	bf00      	nop
    a63c:	f8d2 0128 	ldr.w	r0, [r2, #296]	; 0x128
    a640:	7801      	ldrb	r1, [r0, #0]
    a642:	1e49      	subs	r1, r1, #1
    a644:	7001      	strb	r1, [r0, #0]
    a646:	4770      	bx	lr
    a648:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a64c:	f8b2 3146 	ldrh.w	r3, [r2, #326]	; 0x146
    a650:	1ac0      	subs	r0, r0, r3
    a652:	b200      	sxth	r0, r0
    a654:	2800      	cmp	r0, #0
    a656:	dbf6      	blt.n	a646 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18fa>
    a658:	f882 1144 	strb.w	r1, [r2, #324]	; 0x144
    a65c:	4770      	bx	lr
    a65e:	f8b2 007c 	ldrh.w	r0, [r2, #124]	; 0x7c
    a662:	f8b2 1130 	ldrh.w	r1, [r2, #304]	; 0x130
    a666:	1a40      	subs	r0, r0, r1
    a668:	b200      	sxth	r0, r0
    a66a:	2800      	cmp	r0, #0
    a66c:	dae6      	bge.n	a63c <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18f0>
    a66e:	4770      	bx	lr
    a670:	2000011c 	.word	0x2000011c

0000a674 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ>:
    a674:	b510      	push	{r4, lr}
    a676:	6941      	ldr	r1, [r0, #20]
    a678:	b119      	cbz	r1, a682 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0xe>
    a67a:	6842      	ldr	r2, [r0, #4]
    a67c:	684b      	ldr	r3, [r1, #4]
    a67e:	429a      	cmp	r2, r3
    a680:	d203      	bcs.n	a68a <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x16>
    a682:	21c1      	movs	r1, #193	; 0xc1
    a684:	2037      	movs	r0, #55	; 0x37
    a686:	f7f9 fc1b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a68a:	6902      	ldr	r2, [r0, #16]
    a68c:	610a      	str	r2, [r1, #16]
    a68e:	68c3      	ldr	r3, [r0, #12]
    a690:	60cb      	str	r3, [r1, #12]
    a692:	b10a      	cbz	r2, a698 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x24>
    a694:	60d1      	str	r1, [r2, #12]
    a696:	e001      	b.n	a69c <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x28>
    a698:	4a06      	ldr	r2, [pc, #24]	; (a6b4 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x40>)
    a69a:	6011      	str	r1, [r2, #0]
    a69c:	68ca      	ldr	r2, [r1, #12]
    a69e:	b132      	cbz	r2, a6ae <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3a>
    a6a0:	6111      	str	r1, [r2, #16]
    a6a2:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
    a6a6:	4410      	add	r0, r2
    a6a8:	684a      	ldr	r2, [r1, #4]
    a6aa:	1a80      	subs	r0, r0, r2
    a6ac:	e000      	b.n	a6b0 <sym_LFMV7ZPMP2MCCNFNC4U7QQJ547VTI3Z5P2EL4WQ+0x3c>
    a6ae:	2000      	movs	r0, #0
    a6b0:	6088      	str	r0, [r1, #8]
    a6b2:	bd10      	pop	{r4, pc}
    a6b4:	200001f4 	.word	0x200001f4

0000a6b8 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ>:
    a6b8:	b510      	push	{r4, lr}
    a6ba:	2200      	movs	r2, #0
    a6bc:	6101      	str	r1, [r0, #16]
    a6be:	b189      	cbz	r1, a6e4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x2c>
    a6c0:	68cb      	ldr	r3, [r1, #12]
    a6c2:	60c8      	str	r0, [r1, #12]
    a6c4:	60c3      	str	r3, [r0, #12]
    a6c6:	b103      	cbz	r3, a6ca <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a6c8:	6118      	str	r0, [r3, #16]
    a6ca:	6901      	ldr	r1, [r0, #16]
    a6cc:	6082      	str	r2, [r0, #8]
    a6ce:	2900      	cmp	r1, #0
    a6d0:	d00f      	beq.n	a6f2 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3a>
    a6d2:	688b      	ldr	r3, [r1, #8]
    a6d4:	b163      	cbz	r3, a6f0 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x38>
    a6d6:	6844      	ldr	r4, [r0, #4]
    a6d8:	42a3      	cmp	r3, r4
    a6da:	d207      	bcs.n	a6ec <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x34>
    a6dc:	212a      	movs	r1, #42	; 0x2a
    a6de:	2037      	movs	r0, #55	; 0x37
    a6e0:	f7f9 fbee 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    a6e4:	4903      	ldr	r1, [pc, #12]	; (a6f4 <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x3c>)
    a6e6:	60c2      	str	r2, [r0, #12]
    a6e8:	6008      	str	r0, [r1, #0]
    a6ea:	e7ee      	b.n	a6ca <sym_3QEKOULNRE2XVMZIJROHRAN4JTXHHQD2DJIFKJQ+0x12>
    a6ec:	1b1b      	subs	r3, r3, r4
    a6ee:	6083      	str	r3, [r0, #8]
    a6f0:	608a      	str	r2, [r1, #8]
    a6f2:	bd10      	pop	{r4, pc}
    a6f4:	200001f4 	.word	0x200001f4

0000a6f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>:
    a6f8:	6901      	ldr	r1, [r0, #16]
    a6fa:	b149      	cbz	r1, a710 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x18>
    a6fc:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    a700:	441a      	add	r2, r3
    a702:	688b      	ldr	r3, [r1, #8]
    a704:	441a      	add	r2, r3
    a706:	608a      	str	r2, [r1, #8]
    a708:	e9d0 1203 	ldrd	r1, r2, [r0, #12]
    a70c:	60d1      	str	r1, [r2, #12]
    a70e:	e002      	b.n	a716 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x1e>
    a710:	4a06      	ldr	r2, [pc, #24]	; (a72c <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x34>)
    a712:	68c1      	ldr	r1, [r0, #12]
    a714:	6011      	str	r1, [r2, #0]
    a716:	e9d0 1003 	ldrd	r1, r0, [r0, #12]
    a71a:	b109      	cbz	r1, a720 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x28>
    a71c:	6108      	str	r0, [r1, #16]
    a71e:	4770      	bx	lr
    a720:	2800      	cmp	r0, #0
    a722:	d0fc      	beq.n	a71e <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY+0x26>
    a724:	2100      	movs	r1, #0
    a726:	6081      	str	r1, [r0, #8]
    a728:	4770      	bx	lr
    a72a:	0000      	.short	0x0000
    a72c:	200001f4 	.word	0x200001f4

0000a730 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI>:
    a730:	b510      	push	{r4, lr}
    a732:	4604      	mov	r4, r0
    a734:	490a      	ldr	r1, [pc, #40]	; (a760 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x30>)
    a736:	2000      	movs	r0, #0
    a738:	4602      	mov	r2, r0
    a73a:	6809      	ldr	r1, [r1, #0]
    a73c:	1e43      	subs	r3, r0, #1
    a73e:	e008      	b.n	a752 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x22>
    a740:	688a      	ldr	r2, [r1, #8]
    a742:	42a2      	cmp	r2, r4
    a744:	d303      	bcc.n	a74e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a746:	429a      	cmp	r2, r3
    a748:	d201      	bcs.n	a74e <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x1e>
    a74a:	4613      	mov	r3, r2
    a74c:	4608      	mov	r0, r1
    a74e:	460a      	mov	r2, r1
    a750:	68c9      	ldr	r1, [r1, #12]
    a752:	2900      	cmp	r1, #0
    a754:	d1f4      	bne.n	a740 <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x10>
    a756:	2800      	cmp	r0, #0
    a758:	d100      	bne.n	a75c <sym_JEWVWUVPPBKFY6NTG3STLQ3KWMWEBIH34A75HKI+0x2c>
    a75a:	4610      	mov	r0, r2
    a75c:	bd10      	pop	{r4, pc}
    a75e:	0000      	.short	0x0000
    a760:	200001f4 	.word	0x200001f4

0000a764 <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I>:
    a764:	4801      	ldr	r0, [pc, #4]	; (a76c <sym_KN3K6STNQWQWR2LORBLVX4RFT5RXJO5L5JNKV4I+0x8>)
    a766:	6800      	ldr	r0, [r0, #0]
    a768:	4770      	bx	lr
    a76a:	0000      	.short	0x0000
    a76c:	200001f4 	.word	0x200001f4

0000a770 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ>:
    a770:	4804      	ldr	r0, [pc, #16]	; (a784 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x14>)
    a772:	6801      	ldr	r1, [r0, #0]
    a774:	2000      	movs	r0, #0
    a776:	e001      	b.n	a77c <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0xc>
    a778:	4608      	mov	r0, r1
    a77a:	68c9      	ldr	r1, [r1, #12]
    a77c:	2900      	cmp	r1, #0
    a77e:	d1fb      	bne.n	a778 <sym_WVUR7FIOL24MFCJHZIBLTPA7O44X57VSRLSLAPQ+0x8>
    a780:	4770      	bx	lr
    a782:	0000      	.short	0x0000
    a784:	200001f4 	.word	0x200001f4

0000a788 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>:
    a788:	4801      	ldr	r0, [pc, #4]	; (a790 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA+0x8>)
    a78a:	2100      	movs	r1, #0
    a78c:	6001      	str	r1, [r0, #0]
    a78e:	4770      	bx	lr
    a790:	200001f4 	.word	0x200001f4

0000a794 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>:
    a794:	4903      	ldr	r1, [pc, #12]	; (a7a4 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0x10>)
    a796:	2000      	movs	r0, #0
    a798:	6809      	ldr	r1, [r1, #0]
    a79a:	2900      	cmp	r1, #0
    a79c:	d000      	beq.n	a7a0 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ+0xc>
    a79e:	200c      	movs	r0, #12
    a7a0:	4770      	bx	lr
    a7a2:	0000      	.short	0x0000
    a7a4:	200001f4 	.word	0x200001f4

0000a7a8 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>:
    a7a8:	b500      	push	{lr}
    a7aa:	7941      	ldrb	r1, [r0, #5]
    a7ac:	b095      	sub	sp, #84	; 0x54
    a7ae:	b141      	cbz	r1, a7c2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a7b0:	2901      	cmp	r1, #1
    a7b2:	d006      	beq.n	a7c2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a7b4:	2902      	cmp	r1, #2
    a7b6:	d004      	beq.n	a7c2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a7b8:	2903      	cmp	r1, #3
    a7ba:	d002      	beq.n	a7c2 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x1a>
    a7bc:	2012      	movs	r0, #18
    a7be:	b015      	add	sp, #84	; 0x54
    a7c0:	bd00      	pop	{pc}
    a7c2:	7901      	ldrb	r1, [r0, #4]
    a7c4:	f88d 1000 	strb.w	r1, [sp]
    a7c8:	7b01      	ldrb	r1, [r0, #12]
    a7ca:	f88d 1001 	strb.w	r1, [sp, #1]
    a7ce:	7942      	ldrb	r2, [r0, #5]
    a7d0:	2100      	movs	r1, #0
    a7d2:	2301      	movs	r3, #1
    a7d4:	b3e2      	cbz	r2, a850 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xa8>
    a7d6:	2a02      	cmp	r2, #2
    a7d8:	d03b      	beq.n	a852 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a7da:	f88d 3002 	strb.w	r3, [sp, #2]
    a7de:	bf00      	nop
    a7e0:	f8d0 2006 	ldr.w	r2, [r0, #6]
    a7e4:	f8cd 2003 	str.w	r2, [sp, #3]
    a7e8:	8942      	ldrh	r2, [r0, #10]
    a7ea:	f8ad 2007 	strh.w	r2, [sp, #7]
    a7ee:	f88d 3009 	strb.w	r3, [sp, #9]
    a7f2:	f830 2b01 	ldrh.w	r2, [r0], #1
    a7f6:	f240 2371 	movw	r3, #625	; 0x271
    a7fa:	435a      	muls	r2, r3
    a7fc:	9203      	str	r2, [sp, #12]
    a7fe:	f8b0 2001 	ldrh.w	r2, [r0, #1]
    a802:	435a      	muls	r2, r3
    a804:	9206      	str	r2, [sp, #24]
    a806:	8982      	ldrh	r2, [r0, #12]
    a808:	f8ad 2024 	strh.w	r2, [sp, #36]	; 0x24
    a80c:	89c2      	ldrh	r2, [r0, #14]
    a80e:	f8ad 202a 	strh.w	r2, [sp, #42]	; 0x2a
    a812:	8a02      	ldrh	r2, [r0, #16]
    a814:	f8ad 2030 	strh.w	r2, [sp, #48]	; 0x30
    a818:	8a42      	ldrh	r2, [r0, #18]
    a81a:	f8ad 2036 	strh.w	r2, [sp, #54]	; 0x36
    a81e:	8a82      	ldrh	r2, [r0, #20]
    a820:	f8ad 203c 	strh.w	r2, [sp, #60]	; 0x3c
    a824:	8ac0      	ldrh	r0, [r0, #22]
    a826:	f8ad 0042 	strh.w	r0, [sp, #66]	; 0x42
    a82a:	2007      	movs	r0, #7
    a82c:	f88d 1048 	strb.w	r1, [sp, #72]	; 0x48
    a830:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
    a834:	f8ad 104a 	strh.w	r1, [sp, #74]	; 0x4a
    a838:	9806      	ldr	r0, [sp, #24]
    a83a:	f000 fb95 	bl	af68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    a83e:	b158      	cbz	r0, a858 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a840:	9803      	ldr	r0, [sp, #12]
    a842:	f000 fb85 	bl	af50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    a846:	b138      	cbz	r0, a858 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xb0>
    a848:	4668      	mov	r0, sp
    a84a:	f000 f89f 	bl	a98c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>
    a84e:	e7b6      	b.n	a7be <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>
    a850:	e7ff      	b.n	a852 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0xaa>
    a852:	f88d 1002 	strb.w	r1, [sp, #2]
    a856:	e7c3      	b.n	a7e0 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x38>
    a858:	2030      	movs	r0, #48	; 0x30
    a85a:	e7b0      	b.n	a7be <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA+0x16>

0000a85c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>:
    a85c:	4903      	ldr	r1, [pc, #12]	; (a86c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA+0x10>)
    a85e:	884a      	ldrh	r2, [r1, #2]
    a860:	8002      	strh	r2, [r0, #0]
    a862:	7809      	ldrb	r1, [r1, #0]
    a864:	7081      	strb	r1, [r0, #2]
    a866:	2000      	movs	r0, #0
    a868:	4770      	bx	lr
    a86a:	0000      	.short	0x0000
    a86c:	200011a4 	.word	0x200011a4

0000a870 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>:
    a870:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a872:	460c      	mov	r4, r1
    a874:	4605      	mov	r5, r0
    a876:	8800      	ldrh	r0, [r0, #0]
    a878:	4669      	mov	r1, sp
    a87a:	f003 f93c 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a87e:	0001      	movs	r1, r0
    a880:	f04f 0000 	mov.w	r0, #0
    a884:	d005      	beq.n	a892 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x22>
    a886:	f8c4 0002 	str.w	r0, [r4, #2]
    a88a:	71a0      	strb	r0, [r4, #6]
    a88c:	8020      	strh	r0, [r4, #0]
    a88e:	2002      	movs	r0, #2
    a890:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a892:	9901      	ldr	r1, [sp, #4]
    a894:	f111 0178 	adds.w	r1, r1, #120	; 0x78
    a898:	f881 0050 	strb.w	r0, [r1, #80]	; 0x50
    a89c:	f8d1 2016 	ldr.w	r2, [r1, #22]
    a8a0:	f8c4 2002 	str.w	r2, [r4, #2]
    a8a4:	7e8a      	ldrb	r2, [r1, #26]
    a8a6:	71a2      	strb	r2, [r4, #6]
    a8a8:	882a      	ldrh	r2, [r5, #0]
    a8aa:	8022      	strh	r2, [r4, #0]
    a8ac:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
    a8b0:	f88d 2008 	strb.w	r2, [sp, #8]
    a8b4:	9a02      	ldr	r2, [sp, #8]
    a8b6:	9202      	str	r2, [sp, #8]
    a8b8:	f89d 2008 	ldrb.w	r2, [sp, #8]
    a8bc:	2a00      	cmp	r2, #0
    a8be:	d1eb      	bne.n	a898 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY+0x28>
    a8c0:	2000      	movs	r0, #0
    a8c2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000a8c4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>:
    a8c4:	b51c      	push	{r2, r3, r4, lr}
    a8c6:	8800      	ldrh	r0, [r0, #0]
    a8c8:	4669      	mov	r1, sp
    a8ca:	f003 f914 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    a8ce:	2800      	cmp	r0, #0
    a8d0:	d106      	bne.n	a8e0 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1c>
    a8d2:	f89d 0000 	ldrb.w	r0, [sp]
    a8d6:	b120      	cbz	r0, a8e2 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1e>
    a8d8:	480b      	ldr	r0, [pc, #44]	; (a908 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x44>)
    a8da:	7800      	ldrb	r0, [r0, #0]
    a8dc:	b190      	cbz	r0, a904 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x40>
    a8de:	2002      	movs	r0, #2
    a8e0:	bd1c      	pop	{r2, r3, r4, pc}
    a8e2:	9801      	ldr	r0, [sp, #4]
    a8e4:	f004 ff79 	bl	f7da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    a8e8:	2800      	cmp	r0, #0
    a8ea:	d0f8      	beq.n	a8de <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x1a>
    a8ec:	9801      	ldr	r0, [sp, #4]
    a8ee:	f890 0159 	ldrb.w	r0, [r0, #345]	; 0x159
    a8f2:	b108      	cbz	r0, a8f8 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI+0x34>
    a8f4:	203a      	movs	r0, #58	; 0x3a
    a8f6:	bd1c      	pop	{r2, r3, r4, pc}
    a8f8:	9901      	ldr	r1, [sp, #4]
    a8fa:	2001      	movs	r0, #1
    a8fc:	f881 0159 	strb.w	r0, [r1, #345]	; 0x159
    a900:	2000      	movs	r0, #0
    a902:	bd1c      	pop	{r2, r3, r4, pc}
    a904:	2011      	movs	r0, #17
    a906:	bd1c      	pop	{r2, r3, r4, pc}
    a908:	200001f8 	.word	0x200001f8

0000a90c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>:
    a90c:	b510      	push	{r4, lr}
    a90e:	4604      	mov	r4, r0
    a910:	f004 ff5a 	bl	f7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    a914:	b130      	cbz	r0, a924 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x18>
    a916:	4804      	ldr	r0, [pc, #16]	; (a928 <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q+0x1c>)
    a918:	8881      	ldrh	r1, [r0, #4]
    a91a:	8021      	strh	r1, [r4, #0]
    a91c:	88c0      	ldrh	r0, [r0, #6]
    a91e:	8060      	strh	r0, [r4, #2]
    a920:	2000      	movs	r0, #0
    a922:	bd10      	pop	{r4, pc}
    a924:	2001      	movs	r0, #1
    a926:	bd10      	pop	{r4, pc}
    a928:	20000206 	.word	0x20000206

0000a92c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>:
    a92c:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    a92e:	4605      	mov	r5, r0
    a930:	f000 fbf8 	bl	b124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    a934:	f3c0 2000 	ubfx	r0, r0, #8, #1
    a938:	b310      	cbz	r0, a980 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x54>
    a93a:	2400      	movs	r4, #0
    a93c:	a802      	add	r0, sp, #8
    a93e:	f88d 4004 	strb.w	r4, [sp, #4]
    a942:	f88d 4008 	strb.w	r4, [sp, #8]
    a946:	9000      	str	r0, [sp, #0]
    a948:	78aa      	ldrb	r2, [r5, #2]
    a94a:	7869      	ldrb	r1, [r5, #1]
    a94c:	7828      	ldrb	r0, [r5, #0]
    a94e:	ab01      	add	r3, sp, #4
    a950:	f004 ffe7 	bl	f922 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    a954:	2800      	cmp	r0, #0
    a956:	d112      	bne.n	a97e <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x52>
    a958:	f89d 0004 	ldrb.w	r0, [sp, #4]
    a95c:	f004 fd5e 	bl	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a960:	b180      	cbz	r0, a984 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a962:	f89d 0008 	ldrb.w	r0, [sp, #8]
    a966:	f004 fd59 	bl	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    a96a:	b158      	cbz	r0, a984 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x58>
    a96c:	4806      	ldr	r0, [pc, #24]	; (a988 <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA+0x5c>)
    a96e:	f89d 1004 	ldrb.w	r1, [sp, #4]
    a972:	7381      	strb	r1, [r0, #14]
    a974:	f89d 1008 	ldrb.w	r1, [sp, #8]
    a978:	73c1      	strb	r1, [r0, #15]
    a97a:	8204      	strh	r4, [r0, #16]
    a97c:	2000      	movs	r0, #0
    a97e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a980:	2001      	movs	r0, #1
    a982:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a984:	2011      	movs	r0, #17
    a986:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    a988:	200011a4 	.word	0x200011a4

0000a98c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A>:
    a98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a990:	a1a4      	add	r1, pc, #656	; (adr r1, ac24 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x298>)
    a992:	4605      	mov	r5, r0
    a994:	e9d1 8700 	ldrd	r8, r7, [r1]
    a998:	7a40      	ldrb	r0, [r0, #9]
    a99a:	b08d      	sub	sp, #52	; 0x34
    a99c:	0781      	lsls	r1, r0, #30
    a99e:	d502      	bpl.n	a9a6 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1a>
    a9a0:	f040 0001 	orr.w	r0, r0, #1
    a9a4:	7268      	strb	r0, [r5, #9]
    a9a6:	4628      	mov	r0, r5
    a9a8:	f004 fd97 	bl	f4da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x156>
    a9ac:	2800      	cmp	r0, #0
    a9ae:	d10c      	bne.n	a9ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    a9b0:	f004 ff2e 	bl	f810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    a9b4:	b940      	cbnz	r0, a9c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a9b6:	f7fb fbbd 	bl	6134 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    a9ba:	b928      	cbnz	r0, a9c8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3c>
    a9bc:	f7fb fe76 	bl	66ac <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    a9c0:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    a9c4:	39ff      	subs	r1, #255	; 0xff
    a9c6:	d003      	beq.n	a9d0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x44>
    a9c8:	200c      	movs	r0, #12
    a9ca:	b00d      	add	sp, #52	; 0x34
    a9cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9d0:	7828      	ldrb	r0, [r5, #0]
    a9d2:	f04f 0b00 	mov.w	fp, #0
    a9d6:	f04f 0a01 	mov.w	sl, #1
    a9da:	b9e0      	cbnz	r0, aa16 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x8a>
    a9dc:	f895 9002 	ldrb.w	r9, [r5, #2]
    a9e0:	1cee      	adds	r6, r5, #3
    a9e2:	a909      	add	r1, sp, #36	; 0x24
    a9e4:	2000      	movs	r0, #0
    a9e6:	f002 ff25 	bl	d834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    a9ea:	b178      	cbz	r0, aa0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    a9ec:	f240 2109 	movw	r1, #521	; 0x209
    a9f0:	e112      	b.n	ac18 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    a9f2:	4648      	mov	r0, r9
    a9f4:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
    a9f6:	f004 f926 	bl	ec46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    a9fa:	78a1      	ldrb	r1, [r4, #2]
    a9fc:	4288      	cmp	r0, r1
    a9fe:	d105      	bne.n	aa0c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x80>
    aa00:	2206      	movs	r2, #6
    aa02:	4631      	mov	r1, r6
    aa04:	1ce0      	adds	r0, r4, #3
    aa06:	f001 fe59 	bl	c6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>
    aa0a:	b328      	cbz	r0, aa58 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xcc>
    aa0c:	a809      	add	r0, sp, #36	; 0x24
    aa0e:	f7f9 fc87 	bl	4320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    aa12:	2800      	cmp	r0, #0
    aa14:	d0ed      	beq.n	a9f2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x66>
    aa16:	2103      	movs	r1, #3
    aa18:	f105 0018 	add.w	r0, r5, #24
    aa1c:	f000 fab0 	bl	af80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    aa20:	2200      	movs	r2, #0
    aa22:	4611      	mov	r1, r2
    aa24:	a802      	add	r0, sp, #8
    aa26:	f7f9 fca1 	bl	436c <sym_DMJHGENWVWA7ILXIIOOHU6SYMMXUDCUFUUBACLQ>
    aa2a:	0004      	movs	r4, r0
    aa2c:	d016      	beq.n	aa5c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd0>
    aa2e:	2100      	movs	r1, #0
    aa30:	f7fb f948 	bl	5cc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    aa34:	f8bd 0008 	ldrh.w	r0, [sp, #8]
    aa38:	8020      	strh	r0, [r4, #0]
    aa3a:	487c      	ldr	r0, [pc, #496]	; (ac2c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    aa3c:	f8c4 0128 	str.w	r0, [r4, #296]	; 0x128
    aa40:	f004 fec2 	bl	f7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    aa44:	497a      	ldr	r1, [pc, #488]	; (ac30 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a4>)
    aa46:	2800      	cmp	r0, #0
    aa48:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    aa4c:	d008      	beq.n	aa60 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xd4>
    aa4e:	884b      	ldrh	r3, [r1, #2]
    aa50:	888a      	ldrh	r2, [r1, #4]
    aa52:	84c3      	strh	r3, [r0, #38]	; 0x26
    aa54:	8502      	strh	r2, [r0, #40]	; 0x28
    aa56:	e006      	b.n	aa66 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xda>
    aa58:	200b      	movs	r0, #11
    aa5a:	e7b6      	b.n	a9ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    aa5c:	2009      	movs	r0, #9
    aa5e:	e7b4      	b.n	a9ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    aa60:	221b      	movs	r2, #27
    aa62:	84c2      	strh	r2, [r0, #38]	; 0x26
    aa64:	8502      	strh	r2, [r0, #40]	; 0x28
    aa66:	4689      	mov	r9, r1
    aa68:	4608      	mov	r0, r1
    aa6a:	7849      	ldrb	r1, [r1, #1]
    aa6c:	9100      	str	r1, [sp, #0]
    aa6e:	7803      	ldrb	r3, [r0, #0]
    aa70:	8882      	ldrh	r2, [r0, #4]
    aa72:	f8b9 1002 	ldrh.w	r1, [r9, #2]
    aa76:	8820      	ldrh	r0, [r4, #0]
    aa78:	f7f9 fd5a 	bl	4530 <sym_24NU2MJKHN4R2Z7HXHMPDWTTDYSB32VL6HEQPZA>
    aa7c:	b110      	cbz	r0, aa84 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0xf8>
    aa7e:	f640 6199 	movw	r1, #3737	; 0xe99
    aa82:	e0c9      	b.n	ac18 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x28c>
    aa84:	f003 fd71 	bl	e56a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>
    aa88:	6120      	str	r0, [r4, #16]
    aa8a:	a06a      	add	r0, pc, #424	; (adr r0, ac34 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a8>)
    aa8c:	f104 0618 	add.w	r6, r4, #24
    aa90:	6800      	ldr	r0, [r0, #0]
    aa92:	9000      	str	r0, [sp, #0]
    aa94:	2103      	movs	r1, #3
    aa96:	4668      	mov	r0, sp
    aa98:	f7f9 faae 	bl	3ff8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    aa9c:	2000      	movs	r0, #0
    aa9e:	4669      	mov	r1, sp
    aaa0:	5c0a      	ldrb	r2, [r1, r0]
    aaa2:	5432      	strb	r2, [r6, r0]
    aaa4:	1c40      	adds	r0, r0, #1
    aaa6:	b2c0      	uxtb	r0, r0
    aaa8:	2803      	cmp	r0, #3
    aaaa:	d3f9      	bcc.n	aaa0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x114>
    aaac:	8d68      	ldrh	r0, [r5, #42]	; 0x2a
    aaae:	f003 f82e 	bl	db0e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    aab2:	60e0      	str	r0, [r4, #12]
    aab4:	8e28      	ldrh	r0, [r5, #48]	; 0x30
    aab6:	82a0      	strh	r0, [r4, #20]
    aab8:	8ee8      	ldrh	r0, [r5, #54]	; 0x36
    aaba:	82e0      	strh	r0, [r4, #22]
    aabc:	7a68      	ldrb	r0, [r5, #9]
    aabe:	f004 fc8c 	bl	f3da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    aac2:	f8d9 1008 	ldr.w	r1, [r9, #8]
    aac6:	464e      	mov	r6, r9
    aac8:	4620      	mov	r0, r4
    aaca:	62e1      	str	r1, [r4, #44]	; 0x2c
    aacc:	f003 fee2 	bl	e894 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>
    aad0:	f8c4 808e 	str.w	r8, [r4, #142]	; 0x8e
    aad4:	46d1      	mov	r9, sl
    aad6:	4650      	mov	r0, sl
    aad8:	f884 7092 	strb.w	r7, [r4, #146]	; 0x92
    aadc:	f884 012e 	strb.w	r0, [r4, #302]	; 0x12e
    aae0:	4852      	ldr	r0, [pc, #328]	; (ac2c <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x2a0>)
    aae2:	3808      	subs	r0, #8
    aae4:	6843      	ldr	r3, [r0, #4]
    aae6:	b123      	cbz	r3, aaf2 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x166>
    aae8:	2201      	movs	r2, #1
    aaea:	f504 7199 	add.w	r1, r4, #306	; 0x132
    aaee:	4620      	mov	r0, r4
    aaf0:	4798      	blx	r3
    aaf2:	8821      	ldrh	r1, [r4, #0]
    aaf4:	f8ad 1014 	strh.w	r1, [sp, #20]
    aaf8:	7bb1      	ldrb	r1, [r6, #14]
    aafa:	f88d 1016 	strb.w	r1, [sp, #22]
    aafe:	7bf1      	ldrb	r1, [r6, #15]
    ab00:	f88d 1017 	strb.w	r1, [sp, #23]
    ab04:	8a31      	ldrh	r1, [r6, #16]
    ab06:	f8ad 1018 	strh.w	r1, [sp, #24]
    ab0a:	a908      	add	r1, sp, #32
    ab0c:	9100      	str	r1, [sp, #0]
    ab0e:	2000      	movs	r0, #0
    ab10:	ab07      	add	r3, sp, #28
    ab12:	aa05      	add	r2, sp, #20
    ab14:	4621      	mov	r1, r4
    ab16:	f004 fe18 	bl	f74a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ab1a:	0006      	movs	r6, r0
    ab1c:	d10f      	bne.n	ab3e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1b2>
    ab1e:	f89d 001c 	ldrb.w	r0, [sp, #28]
    ab22:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    ab26:	f89d 0020 	ldrb.w	r0, [sp, #32]
    ab2a:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    ab2e:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    ab32:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
    ab36:	a909      	add	r1, sp, #36	; 0x24
    ab38:	4620      	mov	r0, r4
    ab3a:	f003 f8d6 	bl	dcea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    ab3e:	46d8      	mov	r8, fp
    ab40:	f88d b00c 	strb.w	fp, [sp, #12]
    ab44:	2101      	movs	r1, #1
    ab46:	a803      	add	r0, sp, #12
    ab48:	f7f9 fa56 	bl	3ff8 <sym_RC3WH4TL55HJBAU6BTOKWYOXZCF7BBTLBHIRO6A>
    ab4c:	f89d 000c 	ldrb.w	r0, [sp, #12]
    ab50:	f000 0107 	and.w	r1, r0, #7
    ab54:	f3c0 02c1 	ubfx	r2, r0, #3, #2
    ab58:	4411      	add	r1, r2
    ab5a:	f3c0 1040 	ubfx	r0, r0, #5, #1
    ab5e:	4408      	add	r0, r1
    ab60:	f88d 000c 	strb.w	r0, [sp, #12]
    ab64:	1d40      	adds	r0, r0, #5
    ab66:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    ab6a:	2809      	cmp	r0, #9
    ab6c:	d202      	bcs.n	ab74 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x1e8>
    ab6e:	3008      	adds	r0, #8
    ab70:	f884 0099 	strb.w	r0, [r4, #153]	; 0x99
    ab74:	2101      	movs	r1, #1
    ab76:	4620      	mov	r0, r4
    ab78:	f7fb f8a4 	bl	5cc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    ab7c:	7868      	ldrb	r0, [r5, #1]
    ab7e:	f7fb fe69 	bl	6854 <sym_WYXBJE6NWBKILRWDCM2MMYJSSQVAUS4Y4CIL3JA>
    ab82:	bbee      	cbnz	r6, ac00 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    ab84:	78a9      	ldrb	r1, [r5, #2]
    ab86:	7828      	ldrb	r0, [r5, #0]
    ab88:	1cea      	adds	r2, r5, #3
    ab8a:	f7fb fe0d 	bl	67a8 <sym_CWCJBYNEE73YTWZDQ2FWMB5MOYKQIAA5AHOKAEI>
    ab8e:	b148      	cbz	r0, aba4 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x218>
    ab90:	f7fb fd34 	bl	65fc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    ab94:	78a9      	ldrb	r1, [r5, #2]
    ab96:	7828      	ldrb	r0, [r5, #0]
    ab98:	1cea      	adds	r2, r5, #3
    ab9a:	f7fb fe29 	bl	67f0 <sym_DKYSP3NMOGW5WL2AN37B2ETSQMQQZYB63CFPVXY>
    ab9e:	0006      	movs	r6, r0
    aba0:	d002      	beq.n	aba8 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x21c>
    aba2:	e02f      	b.n	ac04 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aba4:	2612      	movs	r6, #18
    aba6:	e02d      	b.n	ac04 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    aba8:	78a8      	ldrb	r0, [r5, #2]
    abaa:	f004 f84c 	bl	ec46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    abae:	4602      	mov	r2, r0
    abb0:	1ceb      	adds	r3, r5, #3
    abb2:	4621      	mov	r1, r4
    abb4:	2003      	movs	r0, #3
    abb6:	f7fb fd63 	bl	6680 <sym_UNILPC3WRTR35RH7UOHDW2CBEPUWSJ7EITIV3ZY>
    abba:	0006      	movs	r6, r0
    abbc:	d122      	bne.n	ac04 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    abbe:	464f      	mov	r7, r9
    abc0:	4648      	mov	r0, r9
    abc2:	f7fb fdbb 	bl	673c <sym_VK3LYWW654ZNWB44W7VFNFGOUDPRKIGF72NOIJQ>
    abc6:	0006      	movs	r6, r0
    abc8:	d11c      	bne.n	ac04 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    abca:	f88d 800c 	strb.w	r8, [sp, #12]
    abce:	7a68      	ldrb	r0, [r5, #9]
    abd0:	07c0      	lsls	r0, r0, #31
    abd2:	d005      	beq.n	abe0 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x254>
    abd4:	68e8      	ldr	r0, [r5, #12]
    abd6:	9004      	str	r0, [sp, #16]
    abd8:	69a8      	ldr	r0, [r5, #24]
    abda:	9005      	str	r0, [sp, #20]
    abdc:	f88d 700c 	strb.w	r7, [sp, #12]
    abe0:	a803      	add	r0, sp, #12
    abe2:	f7fd f913 	bl	7e0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    abe6:	4606      	mov	r6, r0
    abe8:	f895 004c 	ldrb.w	r0, [r5, #76]	; 0x4c
    abec:	f7fb fea6 	bl	693c <sym_2QCSOYKJNF32ZBJORU6CJN7O5NDB7M3GD4LTM7A>
    abf0:	b936      	cbnz	r6, ac00 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x274>
    abf2:	f8b5 104a 	ldrh.w	r1, [r5, #74]	; 0x4a
    abf6:	4620      	mov	r0, r4
    abf8:	f7fd f82a 	bl	7c50 <sym_FOQ3QPGOR6JQQMW2UGNYKWNNYYOKZLMCFF3HUQI>
    abfc:	0006      	movs	r6, r0
    abfe:	e000      	b.n	ac02 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x276>
    ac00:	e000      	b.n	ac04 <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x278>
    ac02:	d00c      	beq.n	ac1e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    ac04:	8820      	ldrh	r0, [r4, #0]
    ac06:	f002 fe74 	bl	d8f2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ac0a:	8820      	ldrh	r0, [r4, #0]
    ac0c:	2100      	movs	r1, #0
    ac0e:	f7f9 fbd5 	bl	43bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ac12:	b120      	cbz	r0, ac1e <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x292>
    ac14:	f640 715f 	movw	r1, #3935	; 0xf5f
    ac18:	2039      	movs	r0, #57	; 0x39
    ac1a:	f7f9 f951 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ac1e:	4630      	mov	r0, r6
    ac20:	e6d3      	b.n	a9ca <sym_WOLK7J5ES7P57ZMVXNQUWAYV6XJ7AZYSV3TL56A+0x3e>
    ac22:	0000      	.short	0x0000
    ac24:	ffffffff 	.word	0xffffffff
    ac28:	0000001f 	.word	0x0000001f
    ac2c:	20000200 	.word	0x20000200
    ac30:	200011a4 	.word	0x200011a4
    ac34:	00332211 	.word	0x00332211

0000ac38 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI>:
    ac38:	7801      	ldrb	r1, [r0, #0]
    ac3a:	b171      	cbz	r1, ac5a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac3c:	7841      	ldrb	r1, [r0, #1]
    ac3e:	b161      	cbz	r1, ac5a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac40:	8841      	ldrh	r1, [r0, #2]
    ac42:	291b      	cmp	r1, #27
    ac44:	d309      	bcc.n	ac5a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac46:	8881      	ldrh	r1, [r0, #4]
    ac48:	291b      	cmp	r1, #27
    ac4a:	d306      	bcc.n	ac5a <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x22>
    ac4c:	4904      	ldr	r1, [pc, #16]	; (ac60 <sym_XQWU4MX22DPQIRRYTXBNWTH2DBYK7MH33FME7FI+0x28>)
    ac4e:	6802      	ldr	r2, [r0, #0]
    ac50:	600a      	str	r2, [r1, #0]
    ac52:	8880      	ldrh	r0, [r0, #4]
    ac54:	8088      	strh	r0, [r1, #4]
    ac56:	2000      	movs	r0, #0
    ac58:	4770      	bx	lr
    ac5a:	2012      	movs	r0, #18
    ac5c:	4770      	bx	lr
    ac5e:	0000      	.short	0x0000
    ac60:	200011a4 	.word	0x200011a4

0000ac64 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>:
    ac64:	6800      	ldr	r0, [r0, #0]
    ac66:	f240 41e2 	movw	r1, #1250	; 0x4e2
    ac6a:	4288      	cmp	r0, r1
    ac6c:	d303      	bcc.n	ac76 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x12>
    ac6e:	4903      	ldr	r1, [pc, #12]	; (ac7c <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA+0x18>)
    ac70:	6088      	str	r0, [r1, #8]
    ac72:	2000      	movs	r0, #0
    ac74:	4770      	bx	lr
    ac76:	2012      	movs	r0, #18
    ac78:	4770      	bx	lr
    ac7a:	0000      	.short	0x0000
    ac7c:	200011a4 	.word	0x200011a4

0000ac80 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>:
    ac80:	b510      	push	{r4, lr}
    ac82:	b086      	sub	sp, #24
    ac84:	4604      	mov	r4, r0
    ac86:	f004 fc9f 	bl	f5c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x244>
    ac8a:	2800      	cmp	r0, #0
    ac8c:	d103      	bne.n	ac96 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    ac8e:	f004 fdbf 	bl	f810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    ac92:	b110      	cbz	r0, ac9a <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x1a>
    ac94:	200c      	movs	r0, #12
    ac96:	b006      	add	sp, #24
    ac98:	bd10      	pop	{r4, pc}
    ac9a:	2102      	movs	r1, #2
    ac9c:	f104 0010 	add.w	r0, r4, #16
    aca0:	f000 f96e 	bl	af80 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x188>
    aca4:	78a0      	ldrb	r0, [r4, #2]
    aca6:	f88d 0008 	strb.w	r0, [sp, #8]
    acaa:	78a0      	ldrb	r0, [r4, #2]
    acac:	f88d 0000 	strb.w	r0, [sp]
    acb0:	7860      	ldrb	r0, [r4, #1]
    acb2:	f88d 0003 	strb.w	r0, [sp, #3]
    acb6:	7820      	ldrb	r0, [r4, #0]
    acb8:	f88d 0002 	strb.w	r0, [sp, #2]
    acbc:	7e20      	ldrb	r0, [r4, #24]
    acbe:	f88d 0004 	strb.w	r0, [sp, #4]
    acc2:	78a0      	ldrb	r0, [r4, #2]
    acc4:	07c0      	lsls	r0, r0, #31
    acc6:	d00b      	beq.n	ace0 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x60>
    acc8:	78e0      	ldrb	r0, [r4, #3]
    acca:	2801      	cmp	r0, #1
    accc:	d011      	beq.n	acf2 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x72>
    acce:	b190      	cbz	r0, acf6 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x76>
    acd0:	f05f 0000 	movs.w	r0, #0
    acd4:	f88d 0001 	strb.w	r0, [sp, #1]
    acd8:	68a0      	ldr	r0, [r4, #8]
    acda:	9003      	str	r0, [sp, #12]
    acdc:	6920      	ldr	r0, [r4, #16]
    acde:	9004      	str	r0, [sp, #16]
    ace0:	a802      	add	r0, sp, #8
    ace2:	f7fd f893 	bl	7e0c <sym_55O3MNUIQHFB3ZIFUNFWN7FWVNGYLI4M2WMX5NQ>
    ace6:	2800      	cmp	r0, #0
    ace8:	d1d5      	bne.n	ac96 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    acea:	4668      	mov	r0, sp
    acec:	f7fb fe2e 	bl	694c <sym_Y3LLBAILR6W7PLNIFAS76NKLAMZYWOKXIQMSIJY>
    acf0:	e7d1      	b.n	ac96 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x16>
    acf2:	2002      	movs	r0, #2
    acf4:	e7ee      	b.n	acd4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
    acf6:	2001      	movs	r0, #1
    acf8:	e7ec      	b.n	acd4 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA+0x54>
	...

0000acfc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>:
    acfc:	4a03      	ldr	r2, [pc, #12]	; (ad0c <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY+0x10>)
    acfe:	e9d2 1200 	ldrd	r1, r2, [r2]
    ad02:	6001      	str	r1, [r0, #0]
    ad04:	6042      	str	r2, [r0, #4]
    ad06:	2000      	movs	r0, #0
    ad08:	4770      	bx	lr
    ad0a:	0000      	.short	0x0000
    ad0c:	0000b00c 	.word	0x0000b00c

0000ad10 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q>:
    ad10:	b510      	push	{r4, lr}
    ad12:	2005      	movs	r0, #5
    ad14:	f000 f9fc 	bl	b110 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    ad18:	f7fd fe48 	bl	89ac <sym_MGQDGNJ74VJJHVTKWJOWJH5EBSV45Q2XONQQ5WQ>
    ad1c:	4902      	ldr	r1, [pc, #8]	; (ad28 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x18>)
    ad1e:	4801      	ldr	r0, [pc, #4]	; (ad24 <sym_2J7Z7KW3DU67BQ5MXN4KH26NTEF6NAEYXIDNT6Q+0x14>)
    ad20:	6048      	str	r0, [r1, #4]
    ad22:	bd10      	pop	{r4, pc}
    ad24:	0000ae55 	.word	0x0000ae55
    ad28:	200001f8 	.word	0x200001f8

0000ad2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>:
    ad2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ad30:	b086      	sub	sp, #24
    ad32:	468a      	mov	sl, r1
    ad34:	4606      	mov	r6, r0
    ad36:	8800      	ldrh	r0, [r0, #0]
    ad38:	a901      	add	r1, sp, #4
    ad3a:	f002 fedc 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ad3e:	2800      	cmp	r0, #0
    ad40:	d139      	bne.n	adb6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    ad42:	9802      	ldr	r0, [sp, #8]
    ad44:	f04f 0801 	mov.w	r8, #1
    ad48:	4601      	mov	r1, r0
    ad4a:	4689      	mov	r9, r1
    ad4c:	f890 11aa 	ldrb.w	r1, [r0, #426]	; 0x1aa
    ad50:	f88d 1000 	strb.w	r1, [sp]
    ad54:	9900      	ldr	r1, [sp, #0]
    ad56:	9100      	str	r1, [sp, #0]
    ad58:	f89d 5000 	ldrb.w	r5, [sp]
    ad5c:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    ad60:	3078      	adds	r0, #120	; 0x78
    ad62:	2921      	cmp	r1, #33	; 0x21
    ad64:	d100      	bne.n	ad68 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3c>
    ad66:	b13d      	cbz	r5, ad78 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x4c>
    ad68:	2400      	movs	r4, #0
    ad6a:	304e      	adds	r0, #78	; 0x4e
    ad6c:	2108      	movs	r1, #8
    ad6e:	4607      	mov	r7, r0
    ad70:	f003 ff5f 	bl	ec32 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ad74:	b110      	cbz	r0, ad7c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x50>
    ad76:	e007      	b.n	ad88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ad78:	2401      	movs	r4, #1
    ad7a:	e7f6      	b.n	ad6a <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x3e>
    ad7c:	210b      	movs	r1, #11
    ad7e:	4638      	mov	r0, r7
    ad80:	f003 ff57 	bl	ec32 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    ad84:	b900      	cbnz	r0, ad88 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x5c>
    ad86:	b1ac      	cbz	r4, adb4 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x88>
    ad88:	a804      	add	r0, sp, #16
    ad8a:	9000      	str	r0, [sp, #0]
    ad8c:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ad90:	ab03      	add	r3, sp, #12
    ad92:	4632      	mov	r2, r6
    ad94:	4649      	mov	r1, r9
    ad96:	f004 fcd8 	bl	f74a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c6>
    ad9a:	0007      	movs	r7, r0
    ad9c:	d10b      	bne.n	adb6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>
    ad9e:	f89d 0004 	ldrb.w	r0, [sp, #4]
    ada2:	9c02      	ldr	r4, [sp, #8]
    ada4:	b150      	cbz	r0, adbc <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x90>
    ada6:	f504 74df 	add.w	r4, r4, #446	; 0x1be
    adaa:	bf00      	nop
    adac:	f884 8001 	strb.w	r8, [r4, #1]
    adb0:	b94d      	cbnz	r5, adc6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9a>
    adb2:	e006      	b.n	adc2 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x96>
    adb4:	201a      	movs	r0, #26
    adb6:	b006      	add	sp, #24
    adb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    adbc:	f504 749f 	add.w	r4, r4, #318	; 0x13e
    adc0:	e7f4      	b.n	adac <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x80>
    adc2:	7820      	ldrb	r0, [r4, #0]
    adc4:	b108      	cbz	r0, adca <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x9e>
    adc6:	273a      	movs	r7, #58	; 0x3a
    adc8:	e012      	b.n	adf0 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0xc4>
    adca:	f884 a000 	strb.w	sl, [r4]
    adce:	f89d 000c 	ldrb.w	r0, [sp, #12]
    add2:	70a0      	strb	r0, [r4, #2]
    add4:	f89d 1010 	ldrb.w	r1, [sp, #16]
    add8:	70e1      	strb	r1, [r4, #3]
    adda:	f88d 0000 	strb.w	r0, [sp]
    adde:	f88d 1001 	strb.w	r1, [sp, #1]
    ade2:	88b0      	ldrh	r0, [r6, #4]
    ade4:	f8ad 0002 	strh.w	r0, [sp, #2]
    ade8:	4669      	mov	r1, sp
    adea:	4648      	mov	r0, r9
    adec:	f002 ff7d 	bl	dcea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>
    adf0:	2000      	movs	r0, #0
    adf2:	7060      	strb	r0, [r4, #1]
    adf4:	4638      	mov	r0, r7
    adf6:	e7de      	b.n	adb6 <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ+0x8a>

0000adf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>:
    adf8:	b510      	push	{r4, lr}
    adfa:	f002 fd8e 	bl	d91a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    adfe:	f7fa fd07 	bl	5810 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    ae02:	f000 f99f 	bl	b144 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>
    ae06:	f003 fa5b 	bl	e2c0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>
    ae0a:	4810      	ldr	r0, [pc, #64]	; (ae4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x54>)
    ae0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ae10:	4b0f      	ldr	r3, [pc, #60]	; (ae50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    ae12:	8281      	strh	r1, [r0, #20]
    ae14:	2100      	movs	r1, #0
    ae16:	7581      	strb	r1, [r0, #22]
    ae18:	8301      	strh	r1, [r0, #24]
    ae1a:	221b      	movs	r2, #27
    ae1c:	801a      	strh	r2, [r3, #0]
    ae1e:	f44f 74a4 	mov.w	r4, #328	; 0x148
    ae22:	805c      	strh	r4, [r3, #2]
    ae24:	809a      	strh	r2, [r3, #4]
    ae26:	80dc      	strh	r4, [r3, #6]
    ae28:	7381      	strb	r1, [r0, #14]
    ae2a:	73c1      	strb	r1, [r0, #15]
    ae2c:	2303      	movs	r3, #3
    ae2e:	7003      	strb	r3, [r0, #0]
    ae30:	2302      	movs	r3, #2
    ae32:	7043      	strb	r3, [r0, #1]
    ae34:	8042      	strh	r2, [r0, #2]
    ae36:	8082      	strh	r2, [r0, #4]
    ae38:	f640 62a6 	movw	r2, #3750	; 0xea6
    ae3c:	6082      	str	r2, [r0, #8]
    ae3e:	4a04      	ldr	r2, [pc, #16]	; (ae50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x58>)
    ae40:	1f92      	subs	r2, r2, #6
    ae42:	7011      	strb	r1, [r2, #0]
    ae44:	7481      	strb	r1, [r0, #18]
    ae46:	7301      	strb	r1, [r0, #12]
    ae48:	bd10      	pop	{r4, pc}
    ae4a:	0000      	.short	0x0000
    ae4c:	200011a4 	.word	0x200011a4
    ae50:	20000206 	.word	0x20000206
    ae54:	e92d 4ffe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ae58:	4692      	mov	sl, r2
    ae5a:	460f      	mov	r7, r1
    ae5c:	4681      	mov	r9, r0
    ae5e:	f004 fcb3 	bl	f7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ae62:	2800      	cmp	r0, #0
    ae64:	d063      	beq.n	af2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    ae66:	4933      	ldr	r1, [pc, #204]	; (af34 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x13c>)
    ae68:	f8b9 2054 	ldrh.w	r2, [r9, #84]	; 0x54
    ae6c:	f8b9 6052 	ldrh.w	r6, [r9, #82]	; 0x52
    ae70:	8808      	ldrh	r0, [r1, #0]
    ae72:	4290      	cmp	r0, r2
    ae74:	d300      	bcc.n	ae78 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x80>
    ae76:	4610      	mov	r0, r2
    ae78:	4680      	mov	r8, r0
    ae7a:	8888      	ldrh	r0, [r1, #4]
    ae7c:	42b0      	cmp	r0, r6
    ae7e:	d200      	bcs.n	ae82 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x8a>
    ae80:	4606      	mov	r6, r0
    ae82:	884c      	ldrh	r4, [r1, #2]
    ae84:	f640 0048 	movw	r0, #2120	; 0x848
    ae88:	4284      	cmp	r4, r0
    ae8a:	d300      	bcc.n	ae8e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x96>
    ae8c:	4604      	mov	r4, r0
    ae8e:	88cd      	ldrh	r5, [r1, #6]
    ae90:	4285      	cmp	r5, r0
    ae92:	d300      	bcc.n	ae96 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x9e>
    ae94:	4605      	mov	r5, r0
    ae96:	4284      	cmp	r4, r0
    ae98:	d300      	bcc.n	ae9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xa4>
    ae9a:	4604      	mov	r4, r0
    ae9c:	f44f 71a4 	mov.w	r1, #328	; 0x148
    aea0:	2e1b      	cmp	r6, #27
    aea2:	d001      	beq.n	aea8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xb0>
    aea4:	428d      	cmp	r5, r1
    aea6:	d104      	bne.n	aeb2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xba>
    aea8:	f1b8 0f1b 	cmp.w	r8, #27
    aeac:	d03f      	beq.n	af2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    aeae:	428c      	cmp	r4, r1
    aeb0:	d03d      	beq.n	af2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    aeb2:	466a      	mov	r2, sp
    aeb4:	4651      	mov	r1, sl
    aeb6:	4648      	mov	r0, r9
    aeb8:	f004 fc11 	bl	f6de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    aebc:	f8bd 0006 	ldrh.w	r0, [sp, #6]
    aec0:	4641      	mov	r1, r8
    aec2:	4540      	cmp	r0, r8
    aec4:	d900      	bls.n	aec8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xd0>
    aec6:	4608      	mov	r0, r1
    aec8:	80f8      	strh	r0, [r7, #6]
    aeca:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    aece:	42a1      	cmp	r1, r4
    aed0:	d800      	bhi.n	aed4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xdc>
    aed2:	460c      	mov	r4, r1
    aed4:	813c      	strh	r4, [r7, #8]
    aed6:	f8bd 1002 	ldrh.w	r1, [sp, #2]
    aeda:	42b1      	cmp	r1, r6
    aedc:	d800      	bhi.n	aee0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xe8>
    aede:	460e      	mov	r6, r1
    aee0:	807e      	strh	r6, [r7, #2]
    aee2:	f8bd 1004 	ldrh.w	r1, [sp, #4]
    aee6:	42a9      	cmp	r1, r5
    aee8:	d900      	bls.n	aeec <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0xf4>
    aeea:	4629      	mov	r1, r5
    aeec:	80b9      	strh	r1, [r7, #4]
    aeee:	2201      	movs	r2, #1
    aef0:	703a      	strb	r2, [r7, #0]
    aef2:	381b      	subs	r0, #27
    aef4:	28e0      	cmp	r0, #224	; 0xe0
    aef6:	d902      	bls.n	aefe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x106>
    aef8:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    aefc:	e014      	b.n	af28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    aefe:	3e1b      	subs	r6, #27
    af00:	2ee0      	cmp	r6, #224	; 0xe0
    af02:	d902      	bls.n	af0a <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x112>
    af04:	f640 4182 	movw	r1, #3202	; 0xc82
    af08:	e00e      	b.n	af28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    af0a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
    af0e:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
    af12:	4284      	cmp	r4, r0
    af14:	d902      	bls.n	af1c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x124>
    af16:	f640 4184 	movw	r1, #3204	; 0xc84
    af1a:	e005      	b.n	af28 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x130>
    af1c:	f5a1 71a4 	sub.w	r1, r1, #328	; 0x148
    af20:	4281      	cmp	r1, r0
    af22:	d904      	bls.n	af2e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x136>
    af24:	f640 4186 	movw	r1, #3206	; 0xc86
    af28:	2039      	movs	r0, #57	; 0x39
    af2a:	f7f8 ffc9 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    af2e:	e8bd 8ffe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    af32:	0000      	.short	0x0000
    af34:	20000206 	.word	0x20000206
    af38:	4904      	ldr	r1, [pc, #16]	; (af4c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x154>)
    af3a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    af3e:	4288      	cmp	r0, r1
    af40:	d301      	bcc.n	af46 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x14e>
    af42:	2000      	movs	r0, #0
    af44:	4770      	bx	lr
    af46:	2001      	movs	r0, #1
    af48:	4770      	bx	lr
    af4a:	0000      	.short	0x0000
    af4c:	0270f3cc 	.word	0x0270f3cc
    af50:	4904      	ldr	r1, [pc, #16]	; (af64 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x16c>)
    af52:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    af56:	4288      	cmp	r0, r1
    af58:	d301      	bcc.n	af5e <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x166>
    af5a:	2000      	movs	r0, #0
    af5c:	4770      	bx	lr
    af5e:	2001      	movs	r0, #1
    af60:	4770      	bx	lr
    af62:	0000      	.short	0x0000
    af64:	009c363d 	.word	0x009c363d
    af68:	4904      	ldr	r1, [pc, #16]	; (af7c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x184>)
    af6a:	f6a0 10c4 	subw	r0, r0, #2500	; 0x9c4
    af6e:	4288      	cmp	r0, r1
    af70:	d301      	bcc.n	af76 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x17e>
    af72:	2000      	movs	r0, #0
    af74:	4770      	bx	lr
    af76:	2001      	movs	r0, #1
    af78:	4770      	bx	lr
    af7a:	0000      	.short	0x0000
    af7c:	009c363d 	.word	0x009c363d
    af80:	b530      	push	{r4, r5, lr}
    af82:	2200      	movs	r2, #0
    af84:	4d07      	ldr	r5, [pc, #28]	; (afa4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ac>)
    af86:	e009      	b.n	af9c <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1a4>
    af88:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
    af8c:	462b      	mov	r3, r5
    af8e:	429c      	cmp	r4, r3
    af90:	d800      	bhi.n	af94 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x19c>
    af92:	4623      	mov	r3, r4
    af94:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
    af98:	1c52      	adds	r2, r2, #1
    af9a:	b2d2      	uxtb	r2, r2
    af9c:	428a      	cmp	r2, r1
    af9e:	d3f3      	bcc.n	af88 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x190>
    afa0:	bd30      	pop	{r4, r5, pc}
    afa2:	0000      	.short	0x0000
    afa4:	00f42400 	.word	0x00f42400
    afa8:	4a09      	ldr	r2, [pc, #36]	; (afd0 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d8>)
    afaa:	4290      	cmp	r0, r2
    afac:	d80b      	bhi.n	afc6 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ce>
    afae:	2901      	cmp	r1, #1
    afb0:	d002      	beq.n	afb8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c0>
    afb2:	2904      	cmp	r1, #4
    afb4:	d003      	beq.n	afbe <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1c6>
    afb6:	e008      	b.n	afca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    afb8:	f240 7153 	movw	r1, #1875	; 0x753
    afbc:	e001      	b.n	afc2 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1ca>
    afbe:	f640 11c4 	movw	r1, #2500	; 0x9c4
    afc2:	4288      	cmp	r0, r1
    afc4:	d201      	bcs.n	afca <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1d2>
    afc6:	2000      	movs	r0, #0
    afc8:	4770      	bx	lr
    afca:	2001      	movs	r0, #1
    afcc:	4770      	bx	lr
    afce:	0000      	.short	0x0000
    afd0:	0270fd8f 	.word	0x0270fd8f
    afd4:	b510      	push	{r4, lr}
    afd6:	4604      	mov	r4, r0
    afd8:	88c1      	ldrh	r1, [r0, #6]
    afda:	8880      	ldrh	r0, [r0, #4]
    afdc:	f004 fa33 	bl	f446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    afe0:	2800      	cmp	r0, #0
    afe2:	d10f      	bne.n	b004 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    afe4:	8861      	ldrh	r1, [r4, #2]
    afe6:	8820      	ldrh	r0, [r4, #0]
    afe8:	f004 fa2d 	bl	f446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    afec:	2800      	cmp	r0, #0
    afee:	d109      	bne.n	b004 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x20c>
    aff0:	4805      	ldr	r0, [pc, #20]	; (b008 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x210>)
    aff2:	88a1      	ldrh	r1, [r4, #4]
    aff4:	8081      	strh	r1, [r0, #4]
    aff6:	8821      	ldrh	r1, [r4, #0]
    aff8:	8001      	strh	r1, [r0, #0]
    affa:	88e1      	ldrh	r1, [r4, #6]
    affc:	80c1      	strh	r1, [r0, #6]
    affe:	8861      	ldrh	r1, [r4, #2]
    b000:	8041      	strh	r1, [r0, #2]
    b002:	2000      	movs	r0, #0
    b004:	bd10      	pop	{r4, pc}
    b006:	0000      	.short	0x0000
    b008:	20000206 	.word	0x20000206
    b00c:	0b12fe0b 	.word	0x0b12fe0b
    b010:	12fe0059 	.word	0x12fe0059
    b014:	05060708 	.word	0x05060708
    b018:	00020304 	.word	0x00020304
    b01c:	f0f4f8fc 	.word	0xf0f4f8fc
    b020:	0304d8ec 	.word	0x0304d8ec
    b024:	f4f8fc00 	.word	0xf4f8fc00
    b028:	00d8ecf0 	.word	0x00d8ecf0

0000b02c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ>:
    b02c:	b510      	push	{r4, lr}
    b02e:	460c      	mov	r4, r1
    b030:	f7fb f872 	bl	6118 <sym_VKBDHCW5KWYFAEZJJBKQNHH4JDURIHHEJCK4SOA>
    b034:	4805      	ldr	r0, [pc, #20]	; (b04c <sym_G4TIIR7KO3GHFF45HCHTIL3RIPRK2LVDQADUYJQ+0x20>)
    b036:	6004      	str	r4, [r0, #0]
    b038:	6840      	ldr	r0, [r0, #4]
    b03a:	f004 fca1 	bl	f980 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    b03e:	f004 f997 	bl	f370 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>
    b042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b046:	f7fb ba81 	b.w	654c <sym_OB2UWEVFEL4GKPILZJ4SCJU6C7A636A3X66ZULA>
    b04a:	0000      	.short	0x0000
    b04c:	20000210 	.word	0x20000210

0000b050 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>:
    b050:	b510      	push	{r4, lr}
    b052:	4c07      	ldr	r4, [pc, #28]	; (b070 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA+0x20>)
    b054:	68a0      	ldr	r0, [r4, #8]
    b056:	f004 fc93 	bl	f980 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    b05a:	68e0      	ldr	r0, [r4, #12]
    b05c:	f004 fc90 	bl	f980 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x1a>
    b060:	f002 fc5b 	bl	d91a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>
    b064:	f7fa fbd4 	bl	5810 <sym_62DUXM4M5AM4URNPP7IKDX3NCPAODBT4BMADGAY>
    b068:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b06c:	f7ff bec4 	b.w	adf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>
    b070:	20000210 	.word	0x20000210

0000b074 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI>:
    b074:	b500      	push	{lr}
    b076:	4905      	ldr	r1, [pc, #20]	; (b08c <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x18>)
    b078:	4805      	ldr	r0, [pc, #20]	; (b090 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    b07a:	f004 fc74 	bl	f966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b07e:	4804      	ldr	r0, [pc, #16]	; (b090 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x1c>)
    b080:	4904      	ldr	r1, [pc, #16]	; (b094 <sym_YN5M7BXD6GK7QA4RXHXET7I4MPU7MIX3FXW62UI+0x20>)
    b082:	1d00      	adds	r0, r0, #4
    b084:	f85d eb04 	ldr.w	lr, [sp], #4
    b088:	f004 bc6d 	b.w	f966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b08c:	20000238 	.word	0x20000238
    b090:	20000214 	.word	0x20000214
    b094:	20000240 	.word	0x20000240

0000b098 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI>:
    b098:	b500      	push	{lr}
    b09a:	4908      	ldr	r1, [pc, #32]	; (b0bc <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x24>)
    b09c:	4808      	ldr	r0, [pc, #32]	; (b0c0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b09e:	f004 fc62 	bl	f966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b0a2:	4807      	ldr	r0, [pc, #28]	; (b0c0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b0a4:	4907      	ldr	r1, [pc, #28]	; (b0c4 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x2c>)
    b0a6:	1d00      	adds	r0, r0, #4
    b0a8:	f004 fc5d 	bl	f966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b0ac:	4804      	ldr	r0, [pc, #16]	; (b0c0 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x28>)
    b0ae:	4906      	ldr	r1, [pc, #24]	; (b0c8 <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x30>)
    b0b0:	3008      	adds	r0, #8
    b0b2:	f85d eb04 	ldr.w	lr, [sp], #4
    b0b6:	f004 bc56 	b.w	f966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>
    b0ba:	0000      	.short	0x0000
    b0bc:	20000228 	.word	0x20000228
    b0c0:	20000214 	.word	0x20000214
    b0c4:	20000230 	.word	0x20000230
    b0c8:	20000220 	.word	0x20000220
    b0cc:	b510      	push	{r4, lr}
    b0ce:	f002 fc12 	bl	d8f6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>
    b0d2:	4806      	ldr	r0, [pc, #24]	; (b0ec <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x54>)
    b0d4:	f7f9 fdb2 	bl	4c3c <sym_ULQ236TSMK6UJATLJCXSX5JBKSVB4ZM2NNU74PA>
    b0d8:	2000      	movs	r0, #0
    b0da:	f7f9 f8b9 	bl	4250 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    b0de:	f7fd fdb1 	bl	8c44 <sym_JMIQO3ILZD7SKROBEXXUMUGX2B5S6MSFF2CM3XY>
    b0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b0e6:	f7fb b831 	b.w	614c <sym_BXRWRIA3M3K52MZ3ABK6S37OOTXMFTRBOBYS7TY>
    b0ea:	0000      	.short	0x0000
    b0ec:	20001525 	.word	0x20001525
    b0f0:	b510      	push	{r4, lr}
    b0f2:	f7fb fba7 	bl	6844 <sym_NMZIVYO7OGKV6EPWB3U2ZSNCJRLWT2HQRLXCNFQ>
    b0f6:	f7ff fb47 	bl	a788 <sym_P52EVHQKGJ5EMXHU27BFVEFSO6ZMLSI4P52LQDA>
    b0fa:	f7fc fd7f 	bl	7bfc <sym_R2R62GLIY7S3OCJMRDPIB4TBZFUG2AN7TI7ERPI>
    b0fe:	4803      	ldr	r0, [pc, #12]	; (b10c <sym_XUBYH6XGZLLFFVYC6KQVA5MFJUUESCU2IF7KXFI+0x74>)
    b100:	f7fb fb3c 	bl	677c <sym_NN7F2AFPNY6STZCCSXFBV5372QVP4U2ULKNO6YY>
    b104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b108:	f7fb b830 	b.w	616c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q>
    b10c:	20001525 	.word	0x20001525

0000b110 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>:
    b110:	2101      	movs	r1, #1
    b112:	4081      	lsls	r1, r0
    b114:	4802      	ldr	r0, [pc, #8]	; (b120 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY+0x10>)
    b116:	6802      	ldr	r2, [r0, #0]
    b118:	4311      	orrs	r1, r2
    b11a:	6001      	str	r1, [r0, #0]
    b11c:	4770      	bx	lr
    b11e:	0000      	.short	0x0000
    b120:	20000248 	.word	0x20000248

0000b124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>:
    b124:	4801      	ldr	r0, [pc, #4]	; (b12c <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ+0x8>)
    b126:	6800      	ldr	r0, [r0, #0]
    b128:	4770      	bx	lr
    b12a:	0000      	.short	0x0000
    b12c:	20000248 	.word	0x20000248

0000b130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>:
    b130:	4803      	ldr	r0, [pc, #12]	; (b140 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ+0x10>)
    b132:	8800      	ldrh	r0, [r0, #0]
    b134:	f3c0 2000 	ubfx	r0, r0, #8, #1
    b138:	0040      	lsls	r0, r0, #1
    b13a:	1c40      	adds	r0, r0, #1
    b13c:	4770      	bx	lr
    b13e:	0000      	.short	0x0000
    b140:	20000248 	.word	0x20000248

0000b144 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA>:
    b144:	b510      	push	{r4, lr}
    b146:	f7f8 fb01 	bl	374c <sym_ETIE3PCEXQYLK2GIVZENQ6V7PLBRV57MB7BDMNY>
    b14a:	2200      	movs	r2, #0
    b14c:	4b08      	ldr	r3, [pc, #32]	; (b170 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x2c>)
    b14e:	4611      	mov	r1, r2
    b150:	f833 4021 	ldrh.w	r4, [r3, r1, lsl #2]
    b154:	4284      	cmp	r4, r0
    b156:	d303      	bcc.n	b160 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x1c>
    b158:	eb03 0081 	add.w	r0, r3, r1, lsl #2
    b15c:	7882      	ldrb	r2, [r0, #2]
    b15e:	e003      	b.n	b168 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x24>
    b160:	1c49      	adds	r1, r1, #1
    b162:	b2c9      	uxtb	r1, r1
    b164:	290c      	cmp	r1, #12
    b166:	d3f3      	bcc.n	b150 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0xc>
    b168:	4802      	ldr	r0, [pc, #8]	; (b174 <sym_MJMICEV3AHUJUDNI6JLXYNXCJNL4PTPUQLXISYA+0x30>)
    b16a:	7002      	strb	r2, [r0, #0]
    b16c:	bd10      	pop	{r4, pc}
    b16e:	0000      	.short	0x0000
    b170:	0000f9ec 	.word	0x0000f9ec
    b174:	2000029d 	.word	0x2000029d

0000b178 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY>:
    b178:	4801      	ldr	r0, [pc, #4]	; (b180 <sym_W6QCODUONZ7VOOA5DU2R7RKAJUNWNTC3INZ7OGY+0x8>)
    b17a:	7800      	ldrb	r0, [r0, #0]
    b17c:	4770      	bx	lr
    b17e:	0000      	.short	0x0000
    b180:	2000029d 	.word	0x2000029d

0000b184 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI>:
    b184:	b570      	push	{r4, r5, r6, lr}
    b186:	4605      	mov	r5, r0
    b188:	4616      	mov	r6, r2
    b18a:	460c      	mov	r4, r1
    b18c:	2002      	movs	r0, #2
    b18e:	f000 f9f9 	bl	b584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b192:	4906      	ldr	r1, [pc, #24]	; (b1ac <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x28>)
    b194:	2001      	movs	r0, #1
    b196:	1ef6      	subs	r6, r6, #3
    b198:	7008      	strb	r0, [r1, #0]
    b19a:	4805      	ldr	r0, [pc, #20]	; (b1b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b19c:	6006      	str	r6, [r0, #0]
    b19e:	4804      	ldr	r0, [pc, #16]	; (b1b0 <sym_MDF364N4PQDEA5ZGP5CB3ZDZVZM5Q32KSEZZ5HI+0x2c>)
    b1a0:	3808      	subs	r0, #8
    b1a2:	6005      	str	r5, [r0, #0]
    b1a4:	1f00      	subs	r0, r0, #4
    b1a6:	6004      	str	r4, [r0, #0]
    b1a8:	bd70      	pop	{r4, r5, r6, pc}
    b1aa:	0000      	.short	0x0000
    b1ac:	2000029e 	.word	0x2000029e
    b1b0:	4000f510 	.word	0x4000f510

0000b1b4 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI>:
    b1b4:	b510      	push	{r4, lr}
    b1b6:	4c0c      	ldr	r4, [pc, #48]	; (b1e8 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x34>)
    b1b8:	7820      	ldrb	r0, [r4, #0]
    b1ba:	b180      	cbz	r0, b1de <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x2a>
    b1bc:	490b      	ldr	r1, [pc, #44]	; (b1ec <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x38>)
    b1be:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b1c2:	6008      	str	r0, [r1, #0]
    b1c4:	f000 f86a 	bl	b29c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b1c8:	2100      	movs	r1, #0
    b1ca:	b120      	cbz	r0, b1d6 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x22>
    b1cc:	2001      	movs	r0, #1
    b1ce:	7060      	strb	r0, [r4, #1]
    b1d0:	4807      	ldr	r0, [pc, #28]	; (b1f0 <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x3c>)
    b1d2:	6800      	ldr	r0, [r0, #0]
    b1d4:	e001      	b.n	b1da <sym_5DEPI2OGSPXE5OVFBPVFPSPYPRYUQ54QVVXIKNI+0x26>
    b1d6:	7061      	strb	r1, [r4, #1]
    b1d8:	2010      	movs	r0, #16
    b1da:	70a0      	strb	r0, [r4, #2]
    b1dc:	7021      	strb	r1, [r4, #0]
    b1de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b1e2:	2000      	movs	r0, #0
    b1e4:	f000 b9ce 	b.w	b584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b1e8:	2000029e 	.word	0x2000029e
    b1ec:	4001f508 	.word	0x4001f508
    b1f0:	4000f400 	.word	0x4000f400

0000b1f4 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y>:
    b1f4:	b510      	push	{r4, lr}
    b1f6:	2002      	movs	r0, #2
    b1f8:	f000 f9c4 	bl	b584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b1fc:	4904      	ldr	r1, [pc, #16]	; (b210 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x1c>)
    b1fe:	2001      	movs	r0, #1
    b200:	7008      	strb	r0, [r1, #0]
    b202:	f000 f859 	bl	b2b8 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x64>
    b206:	4903      	ldr	r1, [pc, #12]	; (b214 <sym_XCEN5K7VEI2CAO42XW7S3FKM3HKMOCDCUFDX25Y+0x20>)
    b208:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b20c:	6008      	str	r0, [r1, #0]
    b20e:	bd10      	pop	{r4, pc}
    b210:	2000029e 	.word	0x2000029e
    b214:	4001f504 	.word	0x4001f504

0000b218 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>:
    b218:	4803      	ldr	r0, [pc, #12]	; (b228 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA+0x10>)
    b21a:	2100      	movs	r1, #0
    b21c:	7001      	strb	r1, [r0, #0]
    b21e:	7041      	strb	r1, [r0, #1]
    b220:	2110      	movs	r1, #16
    b222:	7081      	strb	r1, [r0, #2]
    b224:	4770      	bx	lr
    b226:	0000      	.short	0x0000
    b228:	2000029e 	.word	0x2000029e

0000b22c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>:
    b22c:	4807      	ldr	r0, [pc, #28]	; (b24c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x20>)
    b22e:	b510      	push	{r4, lr}
    b230:	7801      	ldrb	r1, [r0, #0]
    b232:	b141      	cbz	r1, b246 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x1a>
    b234:	f000 f832 	bl	b29c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x48>
    b238:	b118      	cbz	r0, b242 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x16>
    b23a:	4805      	ldr	r0, [pc, #20]	; (b250 <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y+0x24>)
    b23c:	6800      	ldr	r0, [r0, #0]
    b23e:	b2c0      	uxtb	r0, r0
    b240:	bd10      	pop	{r4, pc}
    b242:	2010      	movs	r0, #16
    b244:	bd10      	pop	{r4, pc}
    b246:	7880      	ldrb	r0, [r0, #2]
    b248:	bd10      	pop	{r4, pc}
    b24a:	0000      	.short	0x0000
    b24c:	2000029e 	.word	0x2000029e
    b250:	4000f400 	.word	0x4000f400

0000b254 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>:
    b254:	4808      	ldr	r0, [pc, #32]	; (b278 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x24>)
    b256:	b510      	push	{r4, lr}
    b258:	7801      	ldrb	r1, [r0, #0]
    b25a:	b159      	cbz	r1, b274 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x20>
    b25c:	4807      	ldr	r0, [pc, #28]	; (b27c <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x28>)
    b25e:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b262:	b128      	cbz	r0, b270 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1c>
    b264:	f000 f80c 	bl	b280 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b268:	2800      	cmp	r0, #0
    b26a:	d000      	beq.n	b26e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x1a>
    b26c:	2001      	movs	r0, #1
    b26e:	bd10      	pop	{r4, pc}
    b270:	2002      	movs	r0, #2
    b272:	bd10      	pop	{r4, pc}
    b274:	7840      	ldrb	r0, [r0, #1]
    b276:	bd10      	pop	{r4, pc}
    b278:	2000029e 	.word	0x2000029e
    b27c:	4000f000 	.word	0x4000f000
    b280:	4805      	ldr	r0, [pc, #20]	; (b298 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x44>)
    b282:	f8d0 1104 	ldr.w	r1, [r0, #260]	; 0x104
    b286:	b111      	cbz	r1, b28e <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3a>
    b288:	f8d0 0108 	ldr.w	r0, [r0, #264]	; 0x108
    b28c:	b108      	cbz	r0, b292 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x3e>
    b28e:	2000      	movs	r0, #0
    b290:	4770      	bx	lr
    b292:	2001      	movs	r0, #1
    b294:	4770      	bx	lr
    b296:	0000      	.short	0x0000
    b298:	4000f000 	.word	0x4000f000
    b29c:	4805      	ldr	r0, [pc, #20]	; (b2b4 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x60>)
    b29e:	b510      	push	{r4, lr}
    b2a0:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
    b2a4:	b120      	cbz	r0, b2b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b2a6:	f7ff ffeb 	bl	b280 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x2c>
    b2aa:	b108      	cbz	r0, b2b0 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x5c>
    b2ac:	2001      	movs	r0, #1
    b2ae:	bd10      	pop	{r4, pc}
    b2b0:	2000      	movs	r0, #0
    b2b2:	bd10      	pop	{r4, pc}
    b2b4:	4000f000 	.word	0x4000f000
    b2b8:	4804      	ldr	r0, [pc, #16]	; (b2cc <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ+0x78>)
    b2ba:	2100      	movs	r1, #0
    b2bc:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    b2c0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    b2c4:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    b2c8:	4770      	bx	lr
    b2ca:	0000      	.short	0x0000
    b2cc:	4000f000 	.word	0x4000f000

0000b2d0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>:
    b2d0:	4a08      	ldr	r2, [pc, #32]	; (b2f4 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x24>)
    b2d2:	b510      	push	{r4, lr}
    b2d4:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b2d8:	4907      	ldr	r1, [pc, #28]	; (b2f8 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x28>)
    b2da:	4610      	mov	r0, r2
    b2dc:	f7f8 fc8c 	bl	3bf8 <mpsl_fem_lna_configuration_set>
    b2e0:	2800      	cmp	r0, #0
    b2e2:	d005      	beq.n	b2f0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b2e4:	1c40      	adds	r0, r0, #1
    b2e6:	d003      	beq.n	b2f0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ+0x20>
    b2e8:	217d      	movs	r1, #125	; 0x7d
    b2ea:	2040      	movs	r0, #64	; 0x40
    b2ec:	f7f8 fde8 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b2f0:	bd10      	pop	{r4, pc}
    b2f2:	0000      	.short	0x0000
    b2f4:	2000024c 	.word	0x2000024c
    b2f8:	0000b328 	.word	0x0000b328

0000b2fc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>:
    b2fc:	4a08      	ldr	r2, [pc, #32]	; (b320 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x24>)
    b2fe:	b510      	push	{r4, lr}
    b300:	e9c2 0102 	strd	r0, r1, [r2, #8]
    b304:	4907      	ldr	r1, [pc, #28]	; (b324 <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x28>)
    b306:	4610      	mov	r0, r2
    b308:	f7f8 fc82 	bl	3c10 <mpsl_fem_pa_configuration_set>
    b30c:	2800      	cmp	r0, #0
    b30e:	d005      	beq.n	b31c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b310:	1c40      	adds	r0, r0, #1
    b312:	d003      	beq.n	b31c <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA+0x20>
    b314:	2172      	movs	r1, #114	; 0x72
    b316:	2040      	movs	r0, #64	; 0x40
    b318:	f7f8 fdd2 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b31c:	bd10      	pop	{r4, pc}
    b31e:	0000      	.short	0x0000
    b320:	2000024c 	.word	0x2000024c
    b324:	0000b328 	.word	0x0000b328
    b328:	00000001 	.word	0x00000001
    b32c:	40001110 	.word	0x40001110
	...

0000b340 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA>:
    b340:	4a07      	ldr	r2, [pc, #28]	; (b360 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x20>)
    b342:	b510      	push	{r4, lr}
    b344:	7853      	ldrb	r3, [r2, #1]
    b346:	b133      	cbz	r3, b356 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x16>
    b348:	4b06      	ldr	r3, [pc, #24]	; (b364 <sym_22JCIW4C6LSZ3V42YCFUILVJXIYNO6LT32CM3KA+0x24>)
    b34a:	6019      	str	r1, [r3, #0]
    b34c:	1d19      	adds	r1, r3, #4
    b34e:	6008      	str	r0, [r1, #0]
    b350:	2001      	movs	r0, #1
    b352:	7090      	strb	r0, [r2, #2]
    b354:	bd10      	pop	{r4, pc}
    b356:	21ba      	movs	r1, #186	; 0xba
    b358:	203c      	movs	r0, #60	; 0x3c
    b35a:	f7f8 fdb1 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b35e:	0000      	.short	0x0000
    b360:	200002a1 	.word	0x200002a1
    b364:	4000f50c 	.word	0x4000f50c

0000b368 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY>:
    b368:	4809      	ldr	r0, [pc, #36]	; (b390 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x28>)
    b36a:	b510      	push	{r4, lr}
    b36c:	7801      	ldrb	r1, [r0, #0]
    b36e:	b151      	cbz	r1, b386 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b370:	7880      	ldrb	r0, [r0, #2]
    b372:	b140      	cbz	r0, b386 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x1e>
    b374:	4907      	ldr	r1, [pc, #28]	; (b394 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x2c>)
    b376:	2000      	movs	r0, #0
    b378:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b37c:	4906      	ldr	r1, [pc, #24]	; (b398 <sym_4I2C6AYYQEX2MYPQ34VVID6NN2QN3BJ3ZHVD6VY+0x30>)
    b37e:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
    b382:	6008      	str	r0, [r1, #0]
    b384:	bd10      	pop	{r4, pc}
    b386:	21e1      	movs	r1, #225	; 0xe1
    b388:	203c      	movs	r0, #60	; 0x3c
    b38a:	f7f8 fd99 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b38e:	0000      	.short	0x0000
    b390:	200002a1 	.word	0x200002a1
    b394:	4000f000 	.word	0x4000f000
    b398:	4001f504 	.word	0x4001f504

0000b39c <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ>:
    b39c:	b570      	push	{r4, r5, r6, lr}
    b39e:	4c0b      	ldr	r4, [pc, #44]	; (b3cc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x30>)
    b3a0:	2500      	movs	r5, #0
    b3a2:	7820      	ldrb	r0, [r4, #0]
    b3a4:	b158      	cbz	r0, b3be <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x22>
    b3a6:	f000 f8e5 	bl	b574 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b3aa:	4809      	ldr	r0, [pc, #36]	; (b3d0 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x34>)
    b3ac:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b3b0:	b118      	cbz	r0, b3ba <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x1e>
    b3b2:	4808      	ldr	r0, [pc, #32]	; (b3d4 <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x38>)
    b3b4:	6800      	ldr	r0, [r0, #0]
    b3b6:	70e0      	strb	r0, [r4, #3]
    b3b8:	e000      	b.n	b3bc <sym_VIDE7XVSTT4HHX2MQJX6VUVABAKVNGIPRTLRLEQ+0x20>
    b3ba:	70e5      	strb	r5, [r4, #3]
    b3bc:	7025      	strb	r5, [r4, #0]
    b3be:	2000      	movs	r0, #0
    b3c0:	f000 f8e0 	bl	b584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b3c4:	7065      	strb	r5, [r4, #1]
    b3c6:	70a5      	strb	r5, [r4, #2]
    b3c8:	bd70      	pop	{r4, r5, r6, pc}
    b3ca:	0000      	.short	0x0000
    b3cc:	200002a1 	.word	0x200002a1
    b3d0:	4000f000 	.word	0x4000f000
    b3d4:	4000f400 	.word	0x4000f400

0000b3d8 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI>:
    b3d8:	480d      	ldr	r0, [pc, #52]	; (b410 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x38>)
    b3da:	b510      	push	{r4, lr}
    b3dc:	7801      	ldrb	r1, [r0, #0]
    b3de:	b191      	cbz	r1, b406 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b3e0:	7880      	ldrb	r0, [r0, #2]
    b3e2:	b180      	cbz	r0, b406 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2e>
    b3e4:	490b      	ldr	r1, [pc, #44]	; (b414 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x3c>)
    b3e6:	2000      	movs	r0, #0
    b3e8:	f8c1 0104 	str.w	r0, [r1, #260]	; 0x104
    b3ec:	4a0a      	ldr	r2, [pc, #40]	; (b418 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b3ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
    b3f2:	6010      	str	r0, [r2, #0]
    b3f4:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    b3f8:	2a01      	cmp	r2, #1
    b3fa:	d103      	bne.n	b404 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x2c>
    b3fc:	604a      	str	r2, [r1, #4]
    b3fe:	4906      	ldr	r1, [pc, #24]	; (b418 <sym_DIQ77CQKBNLT2RKVUGPP4YVKDKLZF55UNZMI3OI+0x40>)
    b400:	1d09      	adds	r1, r1, #4
    b402:	6008      	str	r0, [r1, #0]
    b404:	bd10      	pop	{r4, pc}
    b406:	21d1      	movs	r1, #209	; 0xd1
    b408:	203c      	movs	r0, #60	; 0x3c
    b40a:	f7f8 fd59 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b40e:	0000      	.short	0x0000
    b410:	200002a1 	.word	0x200002a1
    b414:	4000f000 	.word	0x4000f000
    b418:	4001f504 	.word	0x4001f504

0000b41c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>:
    b41c:	4803      	ldr	r0, [pc, #12]	; (b42c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY+0x10>)
    b41e:	2100      	movs	r1, #0
    b420:	7001      	strb	r1, [r0, #0]
    b422:	7041      	strb	r1, [r0, #1]
    b424:	7081      	strb	r1, [r0, #2]
    b426:	70c1      	strb	r1, [r0, #3]
    b428:	4770      	bx	lr
    b42a:	0000      	.short	0x0000
    b42c:	200002a1 	.word	0x200002a1

0000b430 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I>:
    b430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b434:	4605      	mov	r5, r0
    b436:	461c      	mov	r4, r3
    b438:	4690      	mov	r8, r2
    b43a:	460f      	mov	r7, r1
    b43c:	2001      	movs	r0, #1
    b43e:	f000 f8a1 	bl	b584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>
    b442:	4e12      	ldr	r6, [pc, #72]	; (b48c <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x5c>)
    b444:	4812      	ldr	r0, [pc, #72]	; (b490 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b446:	7134      	strb	r4, [r6, #4]
    b448:	6007      	str	r7, [r0, #0]
    b44a:	4911      	ldr	r1, [pc, #68]	; (b490 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b44c:	ea45 4004 	orr.w	r0, r5, r4, lsl #16
    b450:	1f09      	subs	r1, r1, #4
    b452:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
    b456:	6008      	str	r0, [r1, #0]
    b458:	f001 f8f0 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b45c:	b938      	cbnz	r0, b46e <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x3e>
    b45e:	480c      	ldr	r0, [pc, #48]	; (b490 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x60>)
    b460:	3010      	adds	r0, #16
    b462:	6801      	ldr	r1, [r0, #0]
    b464:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    b468:	ea41 0108 	orr.w	r1, r1, r8
    b46c:	6001      	str	r1, [r0, #0]
    b46e:	f000 f881 	bl	b574 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x78>
    b472:	b93d      	cbnz	r5, b484 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x54>
    b474:	4808      	ldr	r0, [pc, #32]	; (b498 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x68>)
    b476:	4a07      	ldr	r2, [pc, #28]	; (b494 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b478:	4906      	ldr	r1, [pc, #24]	; (b494 <sym_MUKS2K4XHEO5KLGXCUFTXLVFMPPIE6EHDYEDH6I+0x64>)
    b47a:	3afc      	subs	r2, #252	; 0xfc
    b47c:	f8c0 1510 	str.w	r1, [r0, #1296]	; 0x510
    b480:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
    b484:	2001      	movs	r0, #1
    b486:	7070      	strb	r0, [r6, #1]
    b488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b48c:	200002a1 	.word	0x200002a1
    b490:	4000f508 	.word	0x4000f508
    b494:	4000f100 	.word	0x4000f100
    b498:	4001f088 	.word	0x4001f088

0000b49c <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI>:
    b49c:	4808      	ldr	r0, [pc, #32]	; (b4c0 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x24>)
    b49e:	b510      	push	{r4, lr}
    b4a0:	7841      	ldrb	r1, [r0, #1]
    b4a2:	b149      	cbz	r1, b4b8 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x1c>
    b4a4:	2101      	movs	r1, #1
    b4a6:	7001      	strb	r1, [r0, #0]
    b4a8:	4806      	ldr	r0, [pc, #24]	; (b4c4 <sym_VIFUXGNF7FG74OI2LAA4BDNI2IEW34DKB3GJ6TI+0x28>)
    b4aa:	2200      	movs	r2, #0
    b4ac:	f8c0 2100 	str.w	r2, [r0, #256]	; 0x100
    b4b0:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    b4b4:	6001      	str	r1, [r0, #0]
    b4b6:	bd10      	pop	{r4, pc}
    b4b8:	21c5      	movs	r1, #197	; 0xc5
    b4ba:	203c      	movs	r0, #60	; 0x3c
    b4bc:	f7f8 fd00 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b4c0:	200002a1 	.word	0x200002a1
    b4c4:	4000f000 	.word	0x4000f000

0000b4c8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA>:
    b4c8:	4806      	ldr	r0, [pc, #24]	; (b4e4 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x1c>)
    b4ca:	7801      	ldrb	r1, [r0, #0]
    b4cc:	b141      	cbz	r1, b4e0 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x18>
    b4ce:	4806      	ldr	r0, [pc, #24]	; (b4e8 <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x20>)
    b4d0:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    b4d4:	2800      	cmp	r0, #0
    b4d6:	d002      	beq.n	b4de <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x16>
    b4d8:	4804      	ldr	r0, [pc, #16]	; (b4ec <sym_3CD5EC6VYR6RXXLO3FXSZQ37BOYSM63APF5D5BA+0x24>)
    b4da:	6800      	ldr	r0, [r0, #0]
    b4dc:	b2c0      	uxtb	r0, r0
    b4de:	4770      	bx	lr
    b4e0:	78c0      	ldrb	r0, [r0, #3]
    b4e2:	4770      	bx	lr
    b4e4:	200002a1 	.word	0x200002a1
    b4e8:	4000f000 	.word	0x4000f000
    b4ec:	4000f400 	.word	0x4000f400

0000b4f0 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA>:
    b4f0:	4901      	ldr	r1, [pc, #4]	; (b4f8 <sym_QQVHHHKNBN5TJBK4NCDSUYAMXMOEHFSL7HE7RRA+0x8>)
    b4f2:	2001      	movs	r0, #1
    b4f4:	6088      	str	r0, [r1, #8]
    b4f6:	4770      	bx	lr
    b4f8:	4000f000 	.word	0x4000f000

0000b4fc <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI>:
    b4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b500:	2800      	cmp	r0, #0
    b502:	d02e      	beq.n	b562 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b504:	4818      	ldr	r0, [pc, #96]	; (b568 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x6c>)
    b506:	7800      	ldrb	r0, [r0, #0]
    b508:	b1b0      	cbz	r0, b538 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x3c>
    b50a:	4d18      	ldr	r5, [pc, #96]	; (b56c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x70>)
    b50c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b510:	2800      	cmp	r0, #0
    b512:	d126      	bne.n	b562 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x66>
    b514:	2702      	movs	r7, #2
    b516:	f8c5 7304 	str.w	r7, [r5, #772]	; 0x304
    b51a:	4c15      	ldr	r4, [pc, #84]	; (b570 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x74>)
    b51c:	6820      	ldr	r0, [r4, #0]
    b51e:	43c0      	mvns	r0, r0
    b520:	f340 1600 	sbfx	r6, r0, #4, #1
    b524:	6820      	ldr	r0, [r4, #0]
    b526:	f040 0010 	orr.w	r0, r0, #16
    b52a:	6020      	str	r0, [r4, #0]
    b52c:	f44f 4800 	mov.w	r8, #32768	; 0x8000
    b530:	f04f 29e0 	mov.w	r9, #3758153728	; 0xe000e000
    b534:	1c76      	adds	r6, r6, #1
    b536:	e009      	b.n	b54c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x50>
    b538:	f240 1153 	movw	r1, #339	; 0x153
    b53c:	203c      	movs	r0, #60	; 0x3c
    b53e:	f7f8 fcbf 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b542:	bf00      	nop
    b544:	f8c9 8280 	str.w	r8, [r9, #640]	; 0x280
    b548:	f7f8 fb00 	bl	3b4c <sym_PAD7XREQQORPXRJMXMW2EYVS4S43S42A5D43SBA>
    b54c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
    b550:	2800      	cmp	r0, #0
    b552:	d0f7      	beq.n	b544 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x48>
    b554:	b91e      	cbnz	r6, b55e <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x62>
    b556:	6820      	ldr	r0, [r4, #0]
    b558:	f020 0010 	bic.w	r0, r0, #16
    b55c:	6020      	str	r0, [r4, #0]
    b55e:	f8c5 7308 	str.w	r7, [r5, #776]	; 0x308
    b562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b566:	0000      	.short	0x0000
    b568:	200002a1 	.word	0x200002a1
    b56c:	4000f000 	.word	0x4000f000
    b570:	e000ed10 	.word	0xe000ed10
    b574:	4902      	ldr	r1, [pc, #8]	; (b580 <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x84>)
    b576:	4801      	ldr	r0, [pc, #4]	; (b57c <sym_FYMYD324TMLKJZE62CZN4WTXFSPL6FPU2SZH6CI+0x80>)
    b578:	6008      	str	r0, [r1, #0]
    b57a:	4770      	bx	lr
    b57c:	02020000 	.word	0x02020000
    b580:	4001f508 	.word	0x4001f508

0000b584 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI>:
    b584:	b510      	push	{r4, lr}
    b586:	4604      	mov	r4, r0
    b588:	f000 f822 	bl	b5d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    b58c:	2c00      	cmp	r4, #0
    b58e:	d017      	beq.n	b5c0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3c>
    b590:	4a0c      	ldr	r2, [pc, #48]	; (b5c4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b592:	480c      	ldr	r0, [pc, #48]	; (b5c4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x40>)
    b594:	490c      	ldr	r1, [pc, #48]	; (b5c8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x44>)
    b596:	3214      	adds	r2, #20
    b598:	4b0c      	ldr	r3, [pc, #48]	; (b5cc <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x48>)
    b59a:	2c01      	cmp	r4, #1
    b59c:	d005      	beq.n	b5aa <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x26>
    b59e:	2c02      	cmp	r4, #2
    b5a0:	d008      	beq.n	b5b4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x30>
    b5a2:	2183      	movs	r1, #131	; 0x83
    b5a4:	203d      	movs	r0, #61	; 0x3d
    b5a6:	f7f8 fc8b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b5aa:	2402      	movs	r4, #2
    b5ac:	6004      	str	r4, [r0, #0]
    b5ae:	6011      	str	r1, [r2, #0]
    b5b0:	0620      	lsls	r0, r4, #24
    b5b2:	e004      	b.n	b5be <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x3a>
    b5b4:	2403      	movs	r4, #3
    b5b6:	6004      	str	r4, [r0, #0]
    b5b8:	6011      	str	r1, [r2, #0]
    b5ba:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
    b5be:	6018      	str	r0, [r3, #0]
    b5c0:	bd10      	pop	{r4, pc}
    b5c2:	0000      	.short	0x0000
    b5c4:	4000f500 	.word	0x4000f500
    b5c8:	20001627 	.word	0x20001627
    b5cc:	4001f504 	.word	0x4001f504
    b5d0:	4804      	ldr	r0, [pc, #16]	; (b5e4 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x60>)
    b5d2:	2100      	movs	r1, #0
    b5d4:	6001      	str	r1, [r0, #0]
    b5d6:	6001      	str	r1, [r0, #0]
    b5d8:	4903      	ldr	r1, [pc, #12]	; (b5e8 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x64>)
    b5da:	f04f 7020 	mov.w	r0, #41943040	; 0x2800000
    b5de:	6008      	str	r0, [r1, #0]
    b5e0:	4770      	bx	lr
    b5e2:	0000      	.short	0x0000
    b5e4:	4000f500 	.word	0x4000f500
    b5e8:	4001f508 	.word	0x4001f508

0000b5ec <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y>:
    b5ec:	4805      	ldr	r0, [pc, #20]	; (b604 <sym_PCLF3MATC3G3MYGRPG4ATMGCS6N4B7M5CSF2C2Y+0x18>)
    b5ee:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    b5f2:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    b5f6:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    b5fa:	2100      	movs	r1, #0
    b5fc:	f8c0 1560 	str.w	r1, [r0, #1376]	; 0x560
    b600:	4770      	bx	lr
    b602:	0000      	.short	0x0000
    b604:	40001000 	.word	0x40001000

0000b608 <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY>:
    b608:	4904      	ldr	r1, [pc, #16]	; (b61c <sym_RXYEX777ZXB2E2DXJWDBCV7AAHWTCHNTLOSENBY+0x14>)
    b60a:	f8c1 0560 	str.w	r0, [r1, #1376]	; 0x560
    b60e:	f8d1 0200 	ldr.w	r0, [r1, #512]	; 0x200
    b612:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    b616:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
    b61a:	4770      	bx	lr
    b61c:	40001000 	.word	0x40001000

0000b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>:
    b620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b622:	4c23      	ldr	r4, [pc, #140]	; (b6b0 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x90>)
    b624:	f8d4 0304 	ldr.w	r0, [r4, #772]	; 0x304
    b628:	f010 0f10 	tst.w	r0, #16
    b62c:	d001      	beq.n	b632 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x12>
    b62e:	2701      	movs	r7, #1
    b630:	e000      	b.n	b634 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x14>
    b632:	2700      	movs	r7, #0
    b634:	2010      	movs	r0, #16
    b636:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    b63a:	2002      	movs	r0, #2
    b63c:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    b640:	481c      	ldr	r0, [pc, #112]	; (b6b4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x94>)
    b642:	2500      	movs	r5, #0
    b644:	491d      	ldr	r1, [pc, #116]	; (b6bc <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x9c>)
    b646:	f880 502c 	strb.w	r5, [r0, #44]	; 0x2c
    b64a:	481b      	ldr	r0, [pc, #108]	; (b6b8 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x98>)
    b64c:	6008      	str	r0, [r1, #0]
    b64e:	f8d4 0550 	ldr.w	r0, [r4, #1360]	; 0x550
    b652:	f44f 7688 	mov.w	r6, #272	; 0x110
    b656:	f010 0fff 	tst.w	r0, #255	; 0xff
    b65a:	d018      	beq.n	b68e <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x6e>
    b65c:	20ff      	movs	r0, #255	; 0xff
    b65e:	f88d 0000 	strb.w	r0, [sp]
    b662:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b666:	2001      	movs	r0, #1
    b668:	6120      	str	r0, [r4, #16]
    b66a:	e004      	b.n	b676 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x56>
    b66c:	f89d 0000 	ldrb.w	r0, [sp]
    b670:	1e40      	subs	r0, r0, #1
    b672:	f88d 0000 	strb.w	r0, [sp]
    b676:	f89d 0000 	ldrb.w	r0, [sp]
    b67a:	b128      	cbz	r0, b688 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x68>
    b67c:	4631      	mov	r1, r6
    b67e:	4620      	mov	r0, r4
    b680:	f004 fa83 	bl	fb8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    b684:	2800      	cmp	r0, #0
    b686:	d0f1      	beq.n	b66c <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x4c>
    b688:	f89d 0000 	ldrb.w	r0, [sp]
    b68c:	b158      	cbz	r0, b6a6 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x86>
    b68e:	f000 fc91 	bl	bfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    b692:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    b696:	f000 fe0d 	bl	c2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b69a:	2f00      	cmp	r7, #0
    b69c:	d002      	beq.n	b6a4 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y+0x84>
    b69e:	2010      	movs	r0, #16
    b6a0:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    b6a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b6a6:	f240 718f 	movw	r1, #1935	; 0x78f
    b6aa:	203e      	movs	r0, #62	; 0x3e
    b6ac:	f7f8 fc08 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b6b0:	40001000 	.word	0x40001000
    b6b4:	200012e4 	.word	0x200012e4
    b6b8:	0c0e0000 	.word	0x0c0e0000
    b6bc:	4001f508 	.word	0x4001f508

0000b6c0 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI>:
    b6c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b6c4:	4d20      	ldr	r5, [pc, #128]	; (b748 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x88>)
    b6c6:	4607      	mov	r7, r0
    b6c8:	4688      	mov	r8, r1
    b6ca:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    b6ce:	07c1      	lsls	r1, r0, #31
    b6d0:	d018      	beq.n	b704 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x44>
    b6d2:	4a1e      	ldr	r2, [pc, #120]	; (b74c <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x8c>)
    b6d4:	f04f 6140 	mov.w	r1, #201326592	; 0xc000000
    b6d8:	6011      	str	r1, [r2, #0]
    b6da:	4c1d      	ldr	r4, [pc, #116]	; (b750 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x90>)
    b6dc:	f8d4 1200 	ldr.w	r1, [r4, #512]	; 0x200
    b6e0:	f041 0101 	orr.w	r1, r1, #1
    b6e4:	f8c4 1200 	str.w	r1, [r4, #512]	; 0x200
    b6e8:	f040 0002 	orr.w	r0, r0, #2
    b6ec:	f885 002c 	strb.w	r0, [r5, #44]	; 0x2c
    b6f0:	4640      	mov	r0, r8
    b6f2:	f000 fe43 	bl	c37c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b6f6:	f000 fbfb 	bl	bef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b6fa:	2601      	movs	r6, #1
    b6fc:	b13f      	cbz	r7, b70e <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x4e>
    b6fe:	2f01      	cmp	r7, #1
    b700:	d00e      	beq.n	b720 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x60>
    b702:	e016      	b.n	b732 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b704:	f240 611a 	movw	r1, #1562	; 0x61a
    b708:	203e      	movs	r0, #62	; 0x3e
    b70a:	f7f8 fbd9 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b70e:	4640      	mov	r0, r8
    b710:	f000 fc1e 	bl	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b714:	4640      	mov	r0, r8
    b716:	f000 fbcf 	bl	beb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b71a:	726e      	strb	r6, [r5, #9]
    b71c:	6026      	str	r6, [r4, #0]
    b71e:	e008      	b.n	b732 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x72>
    b720:	f000 fc3e 	bl	bfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b724:	f000 fd8c 	bl	c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b728:	2002      	movs	r0, #2
    b72a:	7268      	strb	r0, [r5, #9]
    b72c:	f000 fcb0 	bl	c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b730:	6066      	str	r6, [r4, #4]
    b732:	4808      	ldr	r0, [pc, #32]	; (b754 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b734:	64c6      	str	r6, [r0, #76]	; 0x4c
    b736:	4807      	ldr	r0, [pc, #28]	; (b754 <sym_6PPYXQQOLTVZ6DHASA45P4Y6MOJ5US37OHECCGI+0x94>)
    b738:	300c      	adds	r0, #12
    b73a:	f8d0 1540 	ldr.w	r1, [r0, #1344]	; 0x540
    b73e:	4638      	mov	r0, r7
    b740:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    b744:	f004 ba09 	b.w	fb5a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b748:	200012e4 	.word	0x200012e4
    b74c:	4001f504 	.word	0x4001f504
    b750:	40001000 	.word	0x40001000
    b754:	40008000 	.word	0x40008000

0000b758 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I>:
    b758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b75c:	4d35      	ldr	r5, [pc, #212]	; (b834 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xdc>)
    b75e:	4606      	mov	r6, r0
    b760:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    b764:	4689      	mov	r9, r1
    b766:	6028      	str	r0, [r5, #0]
    b768:	4c33      	ldr	r4, [pc, #204]	; (b838 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe0>)
    b76a:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
    b76e:	f040 0002 	orr.w	r0, r0, #2
    b772:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    b776:	4608      	mov	r0, r1
    b778:	f000 fe00 	bl	c37c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    b77c:	f000 fbb8 	bl	bef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    b780:	f8df 80b8 	ldr.w	r8, [pc, #184]	; b83c <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xe4>
    b784:	2700      	movs	r7, #0
    b786:	b116      	cbz	r6, b78e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x36>
    b788:	2e01      	cmp	r6, #1
    b78a:	d027      	beq.n	b7dc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x84>
    b78c:	e03f      	b.n	b80e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b78e:	4648      	mov	r0, r9
    b790:	f000 fbde 	bl	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    b794:	79e0      	ldrb	r0, [r4, #7]
    b796:	2801      	cmp	r0, #1
    b798:	d105      	bne.n	b7a6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x4e>
    b79a:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b79e:	f041 0108 	orr.w	r1, r1, #8
    b7a2:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b7a6:	4648      	mov	r0, r9
    b7a8:	f000 fb86 	bl	beb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    b7ac:	2001      	movs	r0, #1
    b7ae:	7260      	strb	r0, [r4, #9]
    b7b0:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b7b2:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
    b7b6:	62a0      	str	r0, [r4, #40]	; 0x28
    b7b8:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
    b7bc:	6028      	str	r0, [r5, #0]
    b7be:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    b7c2:	f1b9 0f02 	cmp.w	r9, #2
    b7c6:	d007      	beq.n	b7d8 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x80>
    b7c8:	f640 0034 	movw	r0, #2100	; 0x834
    b7cc:	f649 72ec 	movw	r2, #40940	; 0x9fec
    b7d0:	4410      	add	r0, r2
    b7d2:	fbb0 f7f1 	udiv	r7, r0, r1
    b7d6:	e01a      	b.n	b80e <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xb6>
    b7d8:	4608      	mov	r0, r1
    b7da:	e7f7      	b.n	b7cc <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x74>
    b7dc:	f000 fbe0 	bl	bfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    b7e0:	f000 fd2e 	bl	c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    b7e4:	79e0      	ldrb	r0, [r4, #7]
    b7e6:	2801      	cmp	r0, #1
    b7e8:	d105      	bne.n	b7f6 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0x9e>
    b7ea:	f8d8 1200 	ldr.w	r1, [r8, #512]	; 0x200
    b7ee:	f041 0104 	orr.w	r1, r1, #4
    b7f2:	f8c8 1200 	str.w	r1, [r8, #512]	; 0x200
    b7f6:	2002      	movs	r0, #2
    b7f8:	7260      	strb	r0, [r4, #9]
    b7fa:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    b7fc:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
    b800:	62a0      	str	r0, [r4, #40]	; 0x28
    b802:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
    b806:	6028      	str	r0, [r5, #0]
    b808:	2729      	movs	r7, #41	; 0x29
    b80a:	f000 fc41 	bl	c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    b80e:	f000 fc2b 	bl	c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    b812:	f000 fded 	bl	c3f0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>
    b816:	6800      	ldr	r0, [r0, #0]
    b818:	2801      	cmp	r0, #1
    b81a:	d006      	beq.n	b82a <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xd2>
    b81c:	2100      	movs	r1, #0
    b81e:	4630      	mov	r0, r6
    b820:	f004 f99b 	bl	fb5a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    b824:	4638      	mov	r0, r7
    b826:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b82a:	f7ff fef9 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b82e:	2000      	movs	r0, #0
    b830:	e7f9      	b.n	b826 <sym_WJZCKVDJU3WW5NVNH77DPRGYVZQLD372GLDYO6I+0xce>
    b832:	0000      	.short	0x0000
    b834:	4001f504 	.word	0x4001f504
    b838:	200012e4 	.word	0x200012e4
    b83c:	40001000 	.word	0x40001000

0000b840 <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI>:
    b840:	b510      	push	{r4, lr}
    b842:	c81d      	ldmia	r0, {r0, r2, r3, r4}
    b844:	4901      	ldr	r1, [pc, #4]	; (b84c <sym_YG4UROEKVB7ZBE5TWHLNJHYKSFBTXGBYAX3RXRI+0xc>)
    b846:	e881 001d 	stmia.w	r1, {r0, r2, r3, r4}
    b84a:	bd10      	pop	{r4, pc}
    b84c:	200012d4 	.word	0x200012d4

0000b850 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY>:
    b850:	b570      	push	{r4, r5, r6, lr}
    b852:	4c11      	ldr	r4, [pc, #68]	; (b898 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x48>)
    b854:	4606      	mov	r6, r0
    b856:	2002      	movs	r0, #2
    b858:	7320      	strb	r0, [r4, #12]
    b85a:	2596      	movs	r5, #150	; 0x96
    b85c:	f000 f85e 	bl	b91c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    b860:	4602      	mov	r2, r0
    b862:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
    b866:	f894 1020 	ldrb.w	r1, [r4, #32]
    b86a:	2801      	cmp	r0, #1
    b86c:	d00f      	beq.n	b88e <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x3e>
    b86e:	4628      	mov	r0, r5
    b870:	f004 f995 	bl	fb9e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>
    b874:	6120      	str	r0, [r4, #16]
    b876:	4809      	ldr	r0, [pc, #36]	; (b89c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b878:	2100      	movs	r1, #0
    b87a:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
    b87e:	6921      	ldr	r1, [r4, #16]
    b880:	69e0      	ldr	r0, [r4, #28]
    b882:	4408      	add	r0, r1
    b884:	4905      	ldr	r1, [pc, #20]	; (b89c <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x4c>)
    b886:	1d09      	adds	r1, r1, #4
    b888:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    b88c:	bd70      	pop	{r4, r5, r6, pc}
    b88e:	4633      	mov	r3, r6
    b890:	4628      	mov	r0, r5
    b892:	f004 f9a0 	bl	fbd6 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>
    b896:	e7ed      	b.n	b874 <sym_Y6HXZQJARJ7FDWKGPREPQGRRGDOQMXHDALUK6KY+0x24>
    b898:	200012e4 	.word	0x200012e4
    b89c:	40008000 	.word	0x40008000

0000b8a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>:
    b8a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b8a4:	2238      	movs	r2, #56	; 0x38
    b8a6:	2100      	movs	r1, #0
    b8a8:	4813      	ldr	r0, [pc, #76]	; (b8f8 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x58>)
    b8aa:	f000 ff93 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b8ae:	f000 fd01 	bl	c2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    b8b2:	f000 fe98 	bl	c5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    b8b6:	4d11      	ldr	r5, [pc, #68]	; (b8fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b8b8:	4e10      	ldr	r6, [pc, #64]	; (b8fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b8ba:	2400      	movs	r4, #0
    b8bc:	4f0f      	ldr	r7, [pc, #60]	; (b8fc <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x5c>)
    b8be:	3508      	adds	r5, #8
    b8c0:	3610      	adds	r6, #16
    b8c2:	b928      	cbnz	r0, b8d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b8c4:	f000 fea6 	bl	c614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    b8c8:	b910      	cbnz	r0, b8d0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x30>
    b8ca:	f000 fead 	bl	c628 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    b8ce:	b108      	cbz	r0, b8d4 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x34>
    b8d0:	2224      	movs	r2, #36	; 0x24
    b8d2:	e006      	b.n	b8e2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b8d4:	f000 fee8 	bl	c6a8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    b8d8:	b910      	cbnz	r0, b8e0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x40>
    b8da:	f000 fedb 	bl	c694 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    b8de:	b140      	cbz	r0, b8f2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x52>
    b8e0:	2240      	movs	r2, #64	; 0x40
    b8e2:	21ff      	movs	r1, #255	; 0xff
    b8e4:	4638      	mov	r0, r7
    b8e6:	f000 ff75 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    b8ea:	602c      	str	r4, [r5, #0]
    b8ec:	6034      	str	r4, [r6, #0]
    b8ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b8f2:	2238      	movs	r2, #56	; 0x38
    b8f4:	e7f5      	b.n	b8e2 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A+0x42>
    b8f6:	0000      	.short	0x0000
    b8f8:	200012e4 	.word	0x200012e4
    b8fc:	40000e00 	.word	0x40000e00

0000b900 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA>:
    b900:	4805      	ldr	r0, [pc, #20]	; (b918 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x18>)
    b902:	b510      	push	{r4, lr}
    b904:	69c0      	ldr	r0, [r0, #28]
    b906:	2800      	cmp	r0, #0
    b908:	d104      	bne.n	b914 <sym_GI7KSEEMTJQ7HR2XTQJ6A3EAB54YYLMWKNL2RBA+0x14>
    b90a:	f240 11fb 	movw	r1, #507	; 0x1fb
    b90e:	203e      	movs	r0, #62	; 0x3e
    b910:	f7f8 fad6 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b914:	bd10      	pop	{r4, pc}
    b916:	0000      	.short	0x0000
    b918:	200012e4 	.word	0x200012e4

0000b91c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>:
    b91c:	4814      	ldr	r0, [pc, #80]	; (b970 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x54>)
    b91e:	b510      	push	{r4, lr}
    b920:	f890 1021 	ldrb.w	r1, [r0, #33]	; 0x21
    b924:	7a40      	ldrb	r0, [r0, #9]
    b926:	b141      	cbz	r1, b93a <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x1e>
    b928:	2902      	cmp	r1, #2
    b92a:	d00b      	beq.n	b944 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b92c:	2802      	cmp	r0, #2
    b92e:	d009      	beq.n	b944 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x28>
    b930:	2901      	cmp	r1, #1
    b932:	d00b      	beq.n	b94c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b934:	2801      	cmp	r0, #1
    b936:	d009      	beq.n	b94c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x30>
    b938:	e016      	b.n	b968 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b93a:	2800      	cmp	r0, #0
    b93c:	d1f6      	bne.n	b92c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x10>
    b93e:	f240 117d 	movw	r1, #381	; 0x17d
    b942:	e00e      	b.n	b962 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x46>
    b944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b948:	f000 bc2a 	b.w	c1a0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f4>
    b94c:	4809      	ldr	r0, [pc, #36]	; (b974 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x58>)
    b94e:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    b952:	f000 000f 	and.w	r0, r0, #15
    b956:	2803      	cmp	r0, #3
    b958:	d006      	beq.n	b968 <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x4c>
    b95a:	2804      	cmp	r0, #4
    b95c:	d006      	beq.n	b96c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ+0x50>
    b95e:	f44f 71d9 	mov.w	r1, #434	; 0x1b2
    b962:	203e      	movs	r0, #62	; 0x3e
    b964:	f7f8 faac 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    b968:	2001      	movs	r0, #1
    b96a:	bd10      	pop	{r4, pc}
    b96c:	2002      	movs	r0, #2
    b96e:	bd10      	pop	{r4, pc}
    b970:	200012e4 	.word	0x200012e4
    b974:	40001000 	.word	0x40001000

0000b978 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY>:
    b978:	b510      	push	{r4, lr}
    b97a:	f000 fc7d 	bl	c278 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b97e:	f7ff fe4f 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    b982:	f004 f880 	bl	fa86 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>
    b986:	480f      	ldr	r0, [pc, #60]	; (b9c4 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x4c>)
    b988:	4a0f      	ldr	r2, [pc, #60]	; (b9c8 <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x50>)
    b98a:	6a81      	ldr	r1, [r0, #40]	; 0x28
    b98c:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    b990:	6011      	str	r1, [r2, #0]
    b992:	2400      	movs	r4, #0
    b994:	6284      	str	r4, [r0, #40]	; 0x28
    b996:	7304      	strb	r4, [r0, #12]
    b998:	61c4      	str	r4, [r0, #28]
    b99a:	6184      	str	r4, [r0, #24]
    b99c:	f000 fc6c 	bl	c278 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3cc>
    b9a0:	480a      	ldr	r0, [pc, #40]	; (b9cc <sym_2YSDS7VWGMSD5CN64D2VGQIYXBV3A6NJCHWFZEY+0x54>)
    b9a2:	f8c0 4148 	str.w	r4, [r0, #328]	; 0x148
    b9a6:	f8c0 4144 	str.w	r4, [r0, #324]	; 0x144
    b9aa:	f8c0 4140 	str.w	r4, [r0, #320]	; 0x140
    b9ae:	f8c0 414c 	str.w	r4, [r0, #332]	; 0x14c
    b9b2:	2001      	movs	r0, #1
    b9b4:	f004 f8a0 	bl	faf8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b9b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b9bc:	2001      	movs	r0, #1
    b9be:	f004 b88e 	b.w	fade <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    b9c2:	0000      	.short	0x0000
    b9c4:	200012e4 	.word	0x200012e4
    b9c8:	4001f508 	.word	0x4001f508
    b9cc:	40008000 	.word	0x40008000

0000b9d0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI>:
    b9d0:	b570      	push	{r4, r5, r6, lr}
    b9d2:	2001      	movs	r0, #1
    b9d4:	f004 f890 	bl	faf8 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x32>
    b9d8:	4c37      	ldr	r4, [pc, #220]	; (bab8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe8>)
    b9da:	2000      	movs	r0, #0
    b9dc:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b9e0:	2001      	movs	r0, #1
    b9e2:	f8c4 0ffc 	str.w	r0, [r4, #4092]	; 0xffc
    b9e6:	f000 fe35 	bl	c654 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    b9ea:	4d34      	ldr	r5, [pc, #208]	; (babc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    b9ec:	b118      	cbz	r0, b9f6 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x26>
    b9ee:	6828      	ldr	r0, [r5, #0]
    b9f0:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
    b9f4:	6028      	str	r0, [r5, #0]
    b9f6:	f000 fe21 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    b9fa:	b128      	cbz	r0, ba08 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x38>
    b9fc:	6828      	ldr	r0, [r5, #0]
    b9fe:	4930      	ldr	r1, [pc, #192]	; (bac0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf0>)
    ba00:	f020 0069 	bic.w	r0, r0, #105	; 0x69
    ba04:	4308      	orrs	r0, r1
    ba06:	6028      	str	r0, [r5, #0]
    ba08:	f000 fe34 	bl	c674 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    ba0c:	b138      	cbz	r0, ba1e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x4e>
    ba0e:	482b      	ldr	r0, [pc, #172]	; (babc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba10:	1d00      	adds	r0, r0, #4
    ba12:	6801      	ldr	r1, [r0, #0]
    ba14:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
    ba18:	f441 51b0 	orr.w	r1, r1, #5632	; 0x1600
    ba1c:	6001      	str	r1, [r0, #0]
    ba1e:	4927      	ldr	r1, [pc, #156]	; (babc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba20:	4828      	ldr	r0, [pc, #160]	; (bac4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf4>)
    ba22:	313c      	adds	r1, #60	; 0x3c
    ba24:	6008      	str	r0, [r1, #0]
    ba26:	f7f8 f8ff 	bl	3c28 <mpsl_fem_device_config_254_apply_get>
    ba2a:	b140      	cbz	r0, ba3e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ba2c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    ba30:	f8d0 0330 	ldr.w	r0, [r0, #816]	; 0x330
    ba34:	1c41      	adds	r1, r0, #1
    ba36:	d002      	beq.n	ba3e <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x6e>
    ba38:	4920      	ldr	r1, [pc, #128]	; (babc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xec>)
    ba3a:	3110      	adds	r1, #16
    ba3c:	6008      	str	r0, [r1, #0]
    ba3e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    ba42:	6e00      	ldr	r0, [r0, #96]	; 0x60
    ba44:	1c41      	adds	r1, r0, #1
    ba46:	d004      	beq.n	ba52 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x82>
    ba48:	491f      	ldr	r1, [pc, #124]	; (bac8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xf8>)
    ba4a:	680a      	ldr	r2, [r1, #0]
    ba4c:	f360 4217 	bfi	r2, r0, #16, #8
    ba50:	600a      	str	r2, [r1, #0]
    ba52:	f240 1103 	movw	r1, #259	; 0x103
    ba56:	f240 605b 	movw	r0, #1627	; 0x65b
    ba5a:	f8c4 1534 	str.w	r1, [r4, #1332]	; 0x534
    ba5e:	f8c4 0538 	str.w	r0, [r4, #1336]	; 0x538
    ba62:	2001      	movs	r0, #1
    ba64:	f8c4 0530 	str.w	r0, [r4, #1328]	; 0x530
    ba68:	f000 fc88 	bl	c37c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    ba6c:	f240 1001 	movw	r0, #257	; 0x101
    ba70:	f8c4 0650 	str.w	r0, [r4, #1616]	; 0x650
    ba74:	2002      	movs	r0, #2
    ba76:	f8c4 0200 	str.w	r0, [r4, #512]	; 0x200
    ba7a:	4915      	ldr	r1, [pc, #84]	; (bad0 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x100>)
    ba7c:	4813      	ldr	r0, [pc, #76]	; (bacc <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xfc>)
    ba7e:	6008      	str	r0, [r1, #0]
    ba80:	4914      	ldr	r1, [pc, #80]	; (bad4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x104>)
    ba82:	2000      	movs	r0, #0
    ba84:	4d14      	ldr	r5, [pc, #80]	; (bad8 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0x108>)
    ba86:	8608      	strh	r0, [r1, #48]	; 0x30
    ba88:	3110      	adds	r1, #16
    ba8a:	61c8      	str	r0, [r1, #28]
    ba8c:	f881 002c 	strb.w	r0, [r1, #44]	; 0x2c
    ba90:	7028      	strb	r0, [r5, #0]
    ba92:	2001      	movs	r0, #1
    ba94:	f004 f823 	bl	fade <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x18>
    ba98:	2010      	movs	r0, #16
    ba9a:	f8c4 0304 	str.w	r0, [r4, #772]	; 0x304
    ba9e:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    baa2:	2002      	movs	r0, #2
    baa4:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    baa8:	6868      	ldr	r0, [r5, #4]
    baaa:	2800      	cmp	r0, #0
    baac:	d002      	beq.n	bab4 <sym_JQ5GTNCJKXERB3SSKQRXLQOKWJQVRNEOVZZZVXI+0xe4>
    baae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bab2:	4700      	bx	r0
    bab4:	bd70      	pop	{r4, r5, r6, pc}
    bab6:	0000      	.short	0x0000
    bab8:	40001000 	.word	0x40001000
    babc:	4000173c 	.word	0x4000173c
    bac0:	80000096 	.word	0x80000096
    bac4:	8900002c 	.word	0x8900002c
    bac8:	4000158c 	.word	0x4000158c
    bacc:	0c0e0000 	.word	0x0c0e0000
    bad0:	4001f508 	.word	0x4001f508
    bad4:	200012d4 	.word	0x200012d4
    bad8:	20000264 	.word	0x20000264

0000badc <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA>:
    badc:	4901      	ldr	r1, [pc, #4]	; (bae4 <sym_HE5JGYEZFIITGQL7PMATDHSORSCK7HJIY5UXOZA+0x8>)
    bade:	7508      	strb	r0, [r1, #20]
    bae0:	4770      	bx	lr
    bae2:	0000      	.short	0x0000
    bae4:	200012e4 	.word	0x200012e4

0000bae8 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I>:
    bae8:	4905      	ldr	r1, [pc, #20]	; (bb00 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x18>)
    baea:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
    baee:	4805      	ldr	r0, [pc, #20]	; (bb04 <sym_LPFN6QJEOHBT4AP2K7MEYWDZW35U5VHIHXOA54I+0x1c>)
    baf0:	f810 1f2c 	ldrb.w	r1, [r0, #44]!
    baf4:	f041 0101 	orr.w	r1, r1, #1
    baf8:	7001      	strb	r1, [r0, #0]
    bafa:	f000 ba7b 	b.w	bff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    bafe:	0000      	.short	0x0000
    bb00:	40001000 	.word	0x40001000
    bb04:	200012e4 	.word	0x200012e4

0000bb08 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>:
    bb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bb0c:	4e36      	ldr	r6, [pc, #216]	; (bbe8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe0>)
    bb0e:	4607      	mov	r7, r0
    bb10:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    bb14:	4689      	mov	r9, r1
    bb16:	4614      	mov	r4, r2
    bb18:	6030      	str	r0, [r6, #0]
    bb1a:	4610      	mov	r0, r2
    bb1c:	f000 fc2e 	bl	c37c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>
    bb20:	f000 f9e6 	bl	bef0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x44>
    bb24:	f8df a0c4 	ldr.w	sl, [pc, #196]	; bbec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>
    bb28:	4d31      	ldr	r5, [pc, #196]	; (bbf0 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe8>)
    bb2a:	f04f 0801 	mov.w	r8, #1
    bb2e:	b127      	cbz	r7, bb3a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x32>
    bb30:	2f01      	cmp	r7, #1
    bb32:	d01d      	beq.n	bb70 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x68>
    bb34:	f240 710f 	movw	r1, #1807	; 0x70f
    bb38:	e04c      	b.n	bbd4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xcc>
    bb3a:	4620      	mov	r0, r4
    bb3c:	f000 fa08 	bl	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bb40:	4620      	mov	r0, r4
    bb42:	f000 f9b9 	bl	beb8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc>
    bb46:	2c02      	cmp	r4, #2
    bb48:	d00f      	beq.n	bb6a <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x62>
    bb4a:	f640 0034 	movw	r0, #2100	; 0x834
    bb4e:	bf00      	nop
    bb50:	f649 51f8 	movw	r1, #40440	; 0x9df8
    bb54:	4401      	add	r1, r0
    bb56:	4648      	mov	r0, r9
    bb58:	f000 fbb4 	bl	c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    bb5c:	4604      	mov	r4, r0
    bb5e:	4650      	mov	r0, sl
    bb60:	f000 fb9c 	bl	c29c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    bb64:	f885 8009 	strb.w	r8, [r5, #9]
    bb68:	e014      	b.n	bb94 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x8c>
    bb6a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    bb6e:	e7ef      	b.n	bb50 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0x48>
    bb70:	f000 fa16 	bl	bfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bb74:	f000 fb64 	bl	c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    bb78:	f000 fa8a 	bl	c090 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e4>
    bb7c:	f649 71ba 	movw	r1, #40890	; 0x9fba
    bb80:	4648      	mov	r0, r9
    bb82:	f000 fb9f 	bl	c2c4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x418>
    bb86:	4604      	mov	r4, r0
    bb88:	4818      	ldr	r0, [pc, #96]	; (bbec <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xe4>)
    bb8a:	1d00      	adds	r0, r0, #4
    bb8c:	f000 fb86 	bl	c29c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3f0>
    bb90:	2002      	movs	r0, #2
    bb92:	7268      	strb	r0, [r5, #9]
    bb94:	f8df 905c 	ldr.w	r9, [pc, #92]	; bbf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>
    bb98:	f8c9 4540 	str.w	r4, [r9, #1344]	; 0x540
    bb9c:	4917      	ldr	r1, [pc, #92]	; (bbfc <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf4>)
    bb9e:	4816      	ldr	r0, [pc, #88]	; (bbf8 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xf0>)
    bba0:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
    bba4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    bba6:	f440 2000 	orr.w	r0, r0, #524288	; 0x80000
    bbaa:	62a8      	str	r0, [r5, #40]	; 0x28
    bbac:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
    bbb0:	6030      	str	r0, [r6, #0]
    bbb2:	2010      	movs	r0, #16
    bbb4:	f8ca 0304 	str.w	r0, [sl, #772]	; 0x304
    bbb8:	03c0      	lsls	r0, r0, #15
    bbba:	6030      	str	r0, [r6, #0]
    bbbc:	f000 fa54 	bl	c068 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1bc>
    bbc0:	f8c9 804c 	str.w	r8, [r9, #76]	; 0x4c
    bbc4:	480b      	ldr	r0, [pc, #44]	; (bbf4 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xec>)
    bbc6:	300c      	adds	r0, #12
    bbc8:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bbcc:	42a0      	cmp	r0, r4
    bbce:	d304      	bcc.n	bbda <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA+0xd2>
    bbd0:	f240 7136 	movw	r1, #1846	; 0x736
    bbd4:	203e      	movs	r0, #62	; 0x3e
    bbd6:	f7f8 f973 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bbda:	4621      	mov	r1, r4
    bbdc:	4638      	mov	r0, r7
    bbde:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bbe2:	f003 bfba 	b.w	fb5a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x4>
    bbe6:	0000      	.short	0x0000
    bbe8:	4001f504 	.word	0x4001f504
    bbec:	40001000 	.word	0x40001000
    bbf0:	200012e4 	.word	0x200012e4
    bbf4:	40008000 	.word	0x40008000
    bbf8:	40008140 	.word	0x40008140
    bbfc:	4001f098 	.word	0x4001f098

0000bc00 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q>:
    bc00:	4b0d      	ldr	r3, [pc, #52]	; (bc38 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x38>)
    bc02:	b510      	push	{r4, lr}
    bc04:	71d8      	strb	r0, [r3, #7]
    bc06:	729a      	strb	r2, [r3, #10]
    bc08:	b151      	cbz	r1, bc20 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x20>
    bc0a:	2002      	movs	r0, #2
    bc0c:	7218      	strb	r0, [r3, #8]
    bc0e:	2801      	cmp	r0, #1
    bc10:	d008      	beq.n	bc24 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x24>
    bc12:	2802      	cmp	r0, #2
    bc14:	d00f      	beq.n	bc36 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bc16:	f640 1112 	movw	r1, #2322	; 0x912
    bc1a:	203e      	movs	r0, #62	; 0x3e
    bc1c:	f7f8 f950 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bc20:	2001      	movs	r0, #1
    bc22:	e7f3      	b.n	bc0c <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0xc>
    bc24:	7a58      	ldrb	r0, [r3, #9]
    bc26:	2802      	cmp	r0, #2
    bc28:	d105      	bne.n	bc36 <sym_MBOR6QO7CTIMBTL5BVPURKFTQFZYFCUOAZ3M43Q+0x36>
    bc2a:	f000 f9b9 	bl	bfa0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf4>
    bc2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    bc32:	f000 bb05 	b.w	c240 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x394>
    bc36:	bd10      	pop	{r4, pc}
    bc38:	200012e4 	.word	0x200012e4

0000bc3c <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ>:
    bc3c:	4902      	ldr	r1, [pc, #8]	; (bc48 <sym_VEC44ISWPJAJ32J57NYIBEMC7Q6QEP7J6SVR4BQ+0xc>)
    bc3e:	2000      	movs	r0, #0
    bc40:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    bc44:	4770      	bx	lr
    bc46:	0000      	.short	0x0000
    bc48:	40008000 	.word	0x40008000

0000bc4c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>:
    bc4c:	b538      	push	{r3, r4, r5, lr}
    bc4e:	4c0b      	ldr	r4, [pc, #44]	; (bc7c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x30>)
    bc50:	4605      	mov	r5, r0
    bc52:	f44f 718e 	mov.w	r1, #284	; 0x11c
    bc56:	4620      	mov	r0, r4
    bc58:	f003 ff97 	bl	fb8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    bc5c:	2800      	cmp	r0, #0
    bc5e:	d00c      	beq.n	bc7a <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x2e>
    bc60:	f8d4 0548 	ldr.w	r0, [r4, #1352]	; 0x548
    bc64:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    bc68:	4240      	negs	r0, r0
    bc6a:	7028      	strb	r0, [r5, #0]
    bc6c:	2000      	movs	r0, #0
    bc6e:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
    bc72:	4803      	ldr	r0, [pc, #12]	; (bc80 <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI+0x34>)
    bc74:	6800      	ldr	r0, [r0, #0]
    bc76:	9000      	str	r0, [sp, #0]
    bc78:	2001      	movs	r0, #1
    bc7a:	bd38      	pop	{r3, r4, r5, pc}
    bc7c:	40001000 	.word	0x40001000
    bc80:	4000111c 	.word	0x4000111c

0000bc84 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA>:
    bc84:	4903      	ldr	r1, [pc, #12]	; (bc94 <sym_YLRTPBVG5ROXKOW4KXUYITRUY3FD2MVZW5LF7ZA+0x10>)
    bc86:	0e02      	lsrs	r2, r0, #24
    bc88:	f8c1 2524 	str.w	r2, [r1, #1316]	; 0x524
    bc8c:	0200      	lsls	r0, r0, #8
    bc8e:	f8c1 051c 	str.w	r0, [r1, #1308]	; 0x51c
    bc92:	4770      	bx	lr
    bc94:	40001000 	.word	0x40001000

0000bc98 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A>:
    bc98:	6800      	ldr	r0, [r0, #0]
    bc9a:	4903      	ldr	r1, [pc, #12]	; (bca8 <sym_XD56LJG2JTRU4Q2V7WCY72EI3VTZICA3O4ERV2A+0x10>)
    bc9c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bca0:	f8c1 053c 	str.w	r0, [r1, #1340]	; 0x53c
    bca4:	4770      	bx	lr
    bca6:	0000      	.short	0x0000
    bca8:	40001000 	.word	0x40001000

0000bcac <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY>:
    bcac:	b510      	push	{r4, lr}
    bcae:	f000 fb41 	bl	c334 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    bcb2:	4807      	ldr	r0, [pc, #28]	; (bcd0 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x24>)
    bcb4:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    bcb8:	b2c0      	uxtb	r0, r0
    bcba:	2803      	cmp	r0, #3
    bcbc:	d001      	beq.n	bcc2 <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x16>
    bcbe:	280b      	cmp	r0, #11
    bcc0:	d104      	bne.n	bccc <sym_EP3VAQLFLMU6UK5OW5A7IAQVZXTY4K6PQMSEVLY+0x20>
    bcc2:	f44f 7121 	mov.w	r1, #644	; 0x284
    bcc6:	203e      	movs	r0, #62	; 0x3e
    bcc8:	f7f8 f8fa 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bccc:	bd10      	pop	{r4, pc}
    bcce:	0000      	.short	0x0000
    bcd0:	40001000 	.word	0x40001000

0000bcd4 <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI>:
    bcd4:	4901      	ldr	r1, [pc, #4]	; (bcdc <sym_ZQE76VUU7S5U7DETTZA65E75LHFWL5PGRN4JPHI+0x8>)
    bcd6:	7548      	strb	r0, [r1, #21]
    bcd8:	4770      	bx	lr
    bcda:	0000      	.short	0x0000
    bcdc:	200012e4 	.word	0x200012e4

0000bce0 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ>:
    bce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bce4:	4853      	ldr	r0, [pc, #332]	; (be34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bce6:	f04f 0a01 	mov.w	sl, #1
    bcea:	f8c0 a04c 	str.w	sl, [r0, #76]	; 0x4c
    bcee:	4851      	ldr	r0, [pc, #324]	; (be34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bcf0:	300c      	adds	r0, #12
    bcf2:	f8d0 7540 	ldr.w	r7, [r0, #1344]	; 0x540
    bcf6:	4850      	ldr	r0, [pc, #320]	; (be38 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x158>)
    bcf8:	f8d0 0504 	ldr.w	r0, [r0, #1284]	; 0x504
    bcfc:	4c4f      	ldr	r4, [pc, #316]	; (be3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bcfe:	e9c4 070c 	strd	r0, r7, [r4, #48]	; 0x30
    bd02:	f000 f957 	bl	bfb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x108>
    bd06:	494e      	ldr	r1, [pc, #312]	; (be40 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x160>)
    bd08:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    bd0a:	6008      	str	r0, [r1, #0]
    bd0c:	f8df 9134 	ldr.w	r9, [pc, #308]	; be44 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x164>
    bd10:	2600      	movs	r6, #0
    bd12:	62a6      	str	r6, [r4, #40]	; 0x28
    bd14:	f8d9 1200 	ldr.w	r1, [r9, #512]	; 0x200
    bd18:	f240 121d 	movw	r2, #285	; 0x11d
    bd1c:	4391      	bics	r1, r2
    bd1e:	f8c9 1200 	str.w	r1, [r9, #512]	; 0x200
    bd22:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
    bd26:	f000 f9c5 	bl	c0b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x208>
    bd2a:	4605      	mov	r5, r0
    bd2c:	4841      	ldr	r0, [pc, #260]	; (be34 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x154>)
    bd2e:	3008      	adds	r0, #8
    bd30:	f8d0 0540 	ldr.w	r0, [r0, #1344]	; 0x540
    bd34:	61e0      	str	r0, [r4, #28]
    bd36:	f7ff fdf1 	bl	b91c <sym_ARLNRKQ66P65CL63VENK3NR6NFAZLWPJOOVV7RQ>
    bd3a:	f884 0020 	strb.w	r0, [r4, #32]
    bd3e:	7a60      	ldrb	r0, [r4, #9]
    bd40:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
    bd44:	61a6      	str	r6, [r4, #24]
    bd46:	4e40      	ldr	r6, [pc, #256]	; (be48 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x168>)
    bd48:	07a8      	lsls	r0, r5, #30
    bd4a:	d502      	bpl.n	bd52 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x72>
    bd4c:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bd50:	61a0      	str	r0, [r4, #24]
    bd52:	0728      	lsls	r0, r5, #28
    bd54:	d502      	bpl.n	bd5c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x7c>
    bd56:	f8d6 0540 	ldr.w	r0, [r6, #1344]	; 0x540
    bd5a:	61a0      	str	r0, [r4, #24]
    bd5c:	f04f 0800 	mov.w	r8, #0
    bd60:	4639      	mov	r1, r7
    bd62:	4628      	mov	r0, r5
    bd64:	f000 fa32 	bl	c1cc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x320>
    bd68:	b918      	cbnz	r0, bd72 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x92>
    bd6a:	f8c9 a010 	str.w	sl, [r9, #16]
    bd6e:	f04f 0801 	mov.w	r8, #1
    bd72:	4f32      	ldr	r7, [pc, #200]	; (be3c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x15c>)
    bd74:	07e8      	lsls	r0, r5, #31
    bd76:	f1a7 0710 	sub.w	r7, r7, #16
    bd7a:	d002      	beq.n	bd82 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xa2>
    bd7c:	6838      	ldr	r0, [r7, #0]
    bd7e:	4780      	blx	r0
    bd80:	e031      	b.n	bde6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bd82:	07a8      	lsls	r0, r5, #30
    bd84:	d526      	bpl.n	bdd4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xf4>
    bd86:	0768      	lsls	r0, r5, #29
    bd88:	d41e      	bmi.n	bdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bd8a:	f000 fc73 	bl	c674 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bd8e:	b9d8      	cbnz	r0, bdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bd90:	f000 fc60 	bl	c654 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    bd94:	b9c0      	cbnz	r0, bdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bd96:	482d      	ldr	r0, [pc, #180]	; (be4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bd98:	6800      	ldr	r0, [r0, #0]
    bd9a:	f3c0 5c42 	ubfx	ip, r0, #21, #3
    bd9e:	f3c0 6100 	ubfx	r1, r0, #24, #1
    bda2:	f000 030f 	and.w	r3, r0, #15
    bda6:	f3c0 1203 	ubfx	r2, r0, #4, #4
    bdaa:	f3c0 2003 	ubfx	r0, r0, #8, #4
    bdae:	b159      	cbz	r1, bdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bdb0:	b10b      	cbz	r3, bdb6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bdb2:	b102      	cbz	r2, bdb6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xd6>
    bdb4:	b940      	cbnz	r0, bdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bdb6:	4825      	ldr	r0, [pc, #148]	; (be4c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x16c>)
    bdb8:	1d00      	adds	r0, r0, #4
    bdba:	6800      	ldr	r0, [r0, #0]
    bdbc:	b120      	cbz	r0, bdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bdbe:	f1bc 0f03 	cmp.w	ip, #3
    bdc2:	d201      	bcs.n	bdc8 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0xe8>
    bdc4:	f045 0504 	orr.w	r5, r5, #4
    bdc8:	f345 0080 	sbfx	r0, r5, #2, #1
    bdcc:	4641      	mov	r1, r8
    bdce:	1c40      	adds	r0, r0, #1
    bdd0:	687a      	ldr	r2, [r7, #4]
    bdd2:	e007      	b.n	bde4 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x104>
    bdd4:	f015 0f28 	tst.w	r5, #40	; 0x28
    bdd8:	d005      	beq.n	bde6 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x106>
    bdda:	f345 1140 	sbfx	r1, r5, #5, #1
    bdde:	68ba      	ldr	r2, [r7, #8]
    bde0:	4640      	mov	r0, r8
    bde2:	1c49      	adds	r1, r1, #1
    bde4:	4790      	blx	r2
    bde6:	06e8      	lsls	r0, r5, #27
    bde8:	d501      	bpl.n	bdee <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x10e>
    bdea:	68f8      	ldr	r0, [r7, #12]
    bdec:	4780      	blx	r0
    bdee:	7a60      	ldrb	r0, [r4, #9]
    bdf0:	2802      	cmp	r0, #2
    bdf2:	d11c      	bne.n	be2e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    bdf4:	7b20      	ldrb	r0, [r4, #12]
    bdf6:	2800      	cmp	r0, #0
    bdf8:	d019      	beq.n	be2e <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x14e>
    bdfa:	2802      	cmp	r0, #2
    bdfc:	d004      	beq.n	be08 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x128>
    bdfe:	2801      	cmp	r0, #1
    be00:	d006      	beq.n	be10 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x130>
    be02:	f640 21e1 	movw	r1, #2785	; 0xae1
    be06:	e009      	b.n	be1c <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x13c>
    be08:	6921      	ldr	r1, [r4, #16]
    be0a:	69e0      	ldr	r0, [r4, #28]
    be0c:	4408      	add	r0, r1
    be0e:	e008      	b.n	be22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    be10:	69e1      	ldr	r1, [r4, #28]
    be12:	6920      	ldr	r0, [r4, #16]
    be14:	4288      	cmp	r0, r1
    be16:	d804      	bhi.n	be22 <sym_EMR2H7KEGRFFKS6A4P3ZPPGOJSTVXLGRI25MEYQ+0x142>
    be18:	f640 21e2 	movw	r1, #2786	; 0xae2
    be1c:	203e      	movs	r0, #62	; 0x3e
    be1e:	f7f8 f84f 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be22:	f8c6 0540 	str.w	r0, [r6, #1344]	; 0x540
    be26:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    be2a:	f000 ba17 	b.w	c25c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3b0>
    be2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    be32:	0000      	.short	0x0000
    be34:	40008000 	.word	0x40008000
    be38:	4000b000 	.word	0x4000b000
    be3c:	200012e4 	.word	0x200012e4
    be40:	4001f508 	.word	0x4001f508
    be44:	40001000 	.word	0x40001000
    be48:	40008004 	.word	0x40008004
    be4c:	40001450 	.word	0x40001450

0000be50 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY>:
    be50:	b570      	push	{r4, r5, r6, lr}
    be52:	4b15      	ldr	r3, [pc, #84]	; (bea8 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x58>)
    be54:	888c      	ldrh	r4, [r1, #4]
    be56:	eb03 0580 	add.w	r5, r3, r0, lsl #2
    be5a:	f8c5 4620 	str.w	r4, [r5, #1568]	; 0x620
    be5e:	780c      	ldrb	r4, [r1, #0]
    be60:	f8d1 1001 	ldr.w	r1, [r1, #1]
    be64:	ea44 2101 	orr.w	r1, r4, r1, lsl #8
    be68:	f8c5 1600 	str.w	r1, [r5, #1536]	; 0x600
    be6c:	f8d3 4640 	ldr.w	r4, [r3, #1600]	; 0x640
    be70:	2101      	movs	r1, #1
    be72:	4081      	lsls	r1, r0
    be74:	430c      	orrs	r4, r1
    be76:	b2e4      	uxtb	r4, r4
    be78:	b132      	cbz	r2, be88 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x38>
    be7a:	2a01      	cmp	r2, #1
    be7c:	d00a      	beq.n	be94 <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x44>
    be7e:	f240 41ac 	movw	r1, #1196	; 0x4ac
    be82:	203e      	movs	r0, #62	; 0x3e
    be84:	f7f8 f81c 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    be88:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    be8c:	f3c0 2007 	ubfx	r0, r0, #8, #8
    be90:	4388      	bics	r0, r1
    be92:	e004      	b.n	be9e <sym_53FPWJRYQVPJEOZPLNZO6VOSTP72TYV5A36KFIY+0x4e>
    be94:	f8d3 0640 	ldr.w	r0, [r3, #1600]	; 0x640
    be98:	ea41 2010 	orr.w	r0, r1, r0, lsr #8
    be9c:	b2c0      	uxtb	r0, r0
    be9e:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
    bea2:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
    bea6:	bd70      	pop	{r4, r5, r6, pc}
    bea8:	40001000 	.word	0x40001000

0000beac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY>:
    beac:	4901      	ldr	r1, [pc, #4]	; (beb4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8>)
    beae:	2001      	movs	r0, #1
    beb0:	7008      	strb	r0, [r1, #0]
    beb2:	4770      	bx	lr
    beb4:	20000264 	.word	0x20000264
    beb8:	b510      	push	{r4, lr}
    beba:	4604      	mov	r4, r0
    bebc:	f000 fbda 	bl	c674 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    bec0:	2800      	cmp	r0, #0
    bec2:	d00e      	beq.n	bee2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x36>
    bec4:	4a09      	ldr	r2, [pc, #36]	; (beec <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x40>)
    bec6:	6811      	ldr	r1, [r2, #0]
    bec8:	0650      	lsls	r0, r2, #25
    beca:	2c02      	cmp	r4, #2
    becc:	f8d0 0320 	ldr.w	r0, [r0, #800]	; 0x320
    bed0:	d008      	beq.n	bee4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38>
    bed2:	f3c0 2006 	ubfx	r0, r0, #8, #7
    bed6:	bf00      	nop
    bed8:	f421 41fe 	bic.w	r1, r1, #32512	; 0x7f00
    bedc:	ea41 2000 	orr.w	r0, r1, r0, lsl #8
    bee0:	6010      	str	r0, [r2, #0]
    bee2:	bd10      	pop	{r4, pc}
    bee4:	f3c0 6006 	ubfx	r0, r0, #24, #7
    bee8:	e7f6      	b.n	bed8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c>
    beea:	0000      	.short	0x0000
    beec:	40001588 	.word	0x40001588
    bef0:	4815      	ldr	r0, [pc, #84]	; (bf48 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x9c>)
    bef2:	7d41      	ldrb	r1, [r0, #21]
    bef4:	2925      	cmp	r1, #37	; 0x25
    bef6:	d00a      	beq.n	bf0e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x62>
    bef8:	2926      	cmp	r1, #38	; 0x26
    befa:	d00b      	beq.n	bf14 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x68>
    befc:	2927      	cmp	r1, #39	; 0x27
    befe:	d00c      	beq.n	bf1a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x6e>
    bf00:	7d40      	ldrb	r0, [r0, #21]
    bf02:	0040      	lsls	r0, r0, #1
    bf04:	290a      	cmp	r1, #10
    bf06:	d80b      	bhi.n	bf20 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x74>
    bf08:	f600 1064 	addw	r0, r0, #2404	; 0x964
    bf0c:	e00a      	b.n	bf24 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x78>
    bf0e:	f640 1062 	movw	r0, #2402	; 0x962
    bf12:	e00f      	b.n	bf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bf14:	f640 107a 	movw	r0, #2426	; 0x97a
    bf18:	e00c      	b.n	bf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bf1a:	f44f 601b 	mov.w	r0, #2480	; 0x9b0
    bf1e:	e009      	b.n	bf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bf20:	f600 1066 	addw	r0, r0, #2406	; 0x966
    bf24:	f5b0 6f16 	cmp.w	r0, #2400	; 0x960
    bf28:	d204      	bcs.n	bf34 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x88>
    bf2a:	f6a0 1038 	subw	r0, r0, #2360	; 0x938
    bf2e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    bf32:	e001      	b.n	bf38 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x8c>
    bf34:	f5a0 6016 	sub.w	r0, r0, #2400	; 0x960
    bf38:	4a04      	ldr	r2, [pc, #16]	; (bf4c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa0>)
    bf3a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    bf3e:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    bf42:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
    bf46:	4770      	bx	lr
    bf48:	200012e4 	.word	0x200012e4
    bf4c:	40001000 	.word	0x40001000
    bf50:	4912      	ldr	r1, [pc, #72]	; (bf9c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xf0>)
    bf52:	b508      	push	{r3, lr}
    bf54:	f991 2014 	ldrsb.w	r2, [r1, #20]
    bf58:	7d49      	ldrb	r1, [r1, #21]
    bf5a:	2801      	cmp	r0, #1
    bf5c:	d00a      	beq.n	bf74 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc8>
    bf5e:	2802      	cmp	r0, #2
    bf60:	d00a      	beq.n	bf78 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xcc>
    bf62:	2804      	cmp	r0, #4
    bf64:	d00a      	beq.n	bf7c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd0>
    bf66:	2808      	cmp	r0, #8
    bf68:	d00a      	beq.n	bf80 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd4>
    bf6a:	f240 31ed 	movw	r1, #1005	; 0x3ed
    bf6e:	2006      	movs	r0, #6
    bf70:	f7f7 ffa6 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    bf74:	2000      	movs	r0, #0
    bf76:	e004      	b.n	bf82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bf78:	2001      	movs	r0, #1
    bf7a:	e002      	b.n	bf82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bf7c:	2003      	movs	r0, #3
    bf7e:	e000      	b.n	bf82 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xd6>
    bf80:	2002      	movs	r0, #2
    bf82:	466b      	mov	r3, sp
    bf84:	f7f4 fad6 	bl	534 <sym_QV6CME4HLWJA6KQZ7HE7ECNT7UGKOYHKNHH6E7I>
    bf88:	b118      	cbz	r0, bf92 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xe6>
    bf8a:	f240 41de 	movw	r1, #1246	; 0x4de
    bf8e:	203e      	movs	r0, #62	; 0x3e
    bf90:	e7ee      	b.n	bf70 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xc4>
    bf92:	f99d 0000 	ldrsb.w	r0, [sp]
    bf96:	f000 f9eb 	bl	c370 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>
    bf9a:	bd08      	pop	{r3, pc}
    bf9c:	200012e4 	.word	0x200012e4
    bfa0:	4803      	ldr	r0, [pc, #12]	; (bfb0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x104>)
    bfa2:	7a01      	ldrb	r1, [r0, #8]
    bfa4:	2901      	cmp	r1, #1
    bfa6:	d102      	bne.n	bfae <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x102>
    bfa8:	7a80      	ldrb	r0, [r0, #10]
    bfaa:	f7ff bfd1 	b.w	bf50 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0xa4>
    bfae:	4770      	bx	lr
    bfb0:	200012e4 	.word	0x200012e4
    bfb4:	4805      	ldr	r0, [pc, #20]	; (bfcc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x120>)
    bfb6:	7a40      	ldrb	r0, [r0, #9]
    bfb8:	2801      	cmp	r0, #1
    bfba:	d003      	beq.n	bfc4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x118>
    bfbc:	2802      	cmp	r0, #2
    bfbe:	d103      	bne.n	bfc8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x11c>
    bfc0:	f003 bd49 	b.w	fa56 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>
    bfc4:	f003 bd53 	b.w	fa6e <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>
    bfc8:	4770      	bx	lr
    bfca:	0000      	.short	0x0000
    bfcc:	200012e4 	.word	0x200012e4
    bfd0:	4807      	ldr	r0, [pc, #28]	; (bff0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x144>)
    bfd2:	2100      	movs	r1, #0
    bfd4:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
    bfd8:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    bfdc:	f8c0 1110 	str.w	r1, [r0, #272]	; 0x110
    bfe0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    bfe4:	f8c0 1114 	str.w	r1, [r0, #276]	; 0x114
    bfe8:	f8c0 1118 	str.w	r1, [r0, #280]	; 0x118
    bfec:	4770      	bx	lr
    bfee:	0000      	.short	0x0000
    bff0:	40001000 	.word	0x40001000
    bff4:	4818      	ldr	r0, [pc, #96]	; (c058 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ac>)
    bff6:	b510      	push	{r4, lr}
    bff8:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
    bffc:	07c1      	lsls	r1, r0, #31
    bffe:	d029      	beq.n	c054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c000:	0781      	lsls	r1, r0, #30
    c002:	d514      	bpl.n	c02e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x182>
    c004:	4815      	ldr	r0, [pc, #84]	; (c05c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    c006:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c00a:	f041 0101 	orr.w	r1, r1, #1
    c00e:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c012:	f8d0 0550 	ldr.w	r0, [r0, #1360]	; 0x550
    c016:	b2c0      	uxtb	r0, r0
    c018:	280b      	cmp	r0, #11
    c01a:	d005      	beq.n	c028 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c01c:	280a      	cmp	r0, #10
    c01e:	d003      	beq.n	c028 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c020:	2803      	cmp	r0, #3
    c022:	d001      	beq.n	c028 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x17c>
    c024:	2802      	cmp	r0, #2
    c026:	d115      	bne.n	c054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c028:	f240 510f 	movw	r1, #1295	; 0x50f
    c02c:	e00f      	b.n	c04e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a2>
    c02e:	0740      	lsls	r0, r0, #29
    c030:	d510      	bpl.n	c054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c032:	480a      	ldr	r0, [pc, #40]	; (c05c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b0>)
    c034:	490a      	ldr	r1, [pc, #40]	; (c060 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b4>)
    c036:	3008      	adds	r0, #8
    c038:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c03c:	f44f 71a0 	mov.w	r1, #320	; 0x140
    c040:	4808      	ldr	r0, [pc, #32]	; (c064 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1b8>)
    c042:	f003 fda7 	bl	fb94 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    c046:	2800      	cmp	r0, #0
    c048:	d004      	beq.n	c054 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1a8>
    c04a:	f240 5117 	movw	r1, #1303	; 0x517
    c04e:	203e      	movs	r0, #62	; 0x3e
    c050:	f7f7 ff36 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c054:	bd10      	pop	{r4, pc}
    c056:	0000      	.short	0x0000
    c058:	200012e4 	.word	0x200012e4
    c05c:	40001000 	.word	0x40001000
    c060:	4001f098 	.word	0x4001f098
    c064:	40008000 	.word	0x40008000
    c068:	4808      	ldr	r0, [pc, #32]	; (c08c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1e0>)
    c06a:	4601      	mov	r1, r0
    c06c:	79c2      	ldrb	r2, [r0, #7]
    c06e:	f891 102c 	ldrb.w	r1, [r1, #44]	; 0x2c
    c072:	b112      	cbz	r2, c07a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1ce>
    c074:	2a01      	cmp	r2, #1
    c076:	d003      	beq.n	c080 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d4>
    c078:	e006      	b.n	c088 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1dc>
    c07a:	f041 0102 	orr.w	r1, r1, #2
    c07e:	e001      	b.n	c084 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x1d8>
    c080:	f041 0104 	orr.w	r1, r1, #4
    c084:	f880 102c 	strb.w	r1, [r0, #44]	; 0x2c
    c088:	f7ff bfb4 	b.w	bff4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x148>
    c08c:	200012e4 	.word	0x200012e4
    c090:	b510      	push	{r4, lr}
    c092:	f000 faef 	bl	c674 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>
    c096:	2800      	cmp	r0, #0
    c098:	d108      	bne.n	c0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    c09a:	f000 fadb 	bl	c654 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>
    c09e:	2800      	cmp	r0, #0
    c0a0:	d104      	bne.n	c0ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x200>
    c0a2:	4803      	ldr	r0, [pc, #12]	; (c0b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x204>)
    c0a4:	6801      	ldr	r1, [r0, #0]
    c0a6:	f441 21c0 	orr.w	r1, r1, #393216	; 0x60000
    c0aa:	6001      	str	r1, [r0, #0]
    c0ac:	bd10      	pop	{r4, pc}
    c0ae:	0000      	.short	0x0000
    c0b0:	40001568 	.word	0x40001568
    c0b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c0b8:	4d35      	ldr	r5, [pc, #212]	; (c190 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e4>)
    c0ba:	2400      	movs	r4, #0
    c0bc:	7b28      	ldrb	r0, [r5, #12]
    c0be:	b138      	cbz	r0, c0d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c0c0:	f44f 71a2 	mov.w	r1, #324	; 0x144
    c0c4:	4833      	ldr	r0, [pc, #204]	; (c194 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2e8>)
    c0c6:	f003 fd65 	bl	fb94 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3e>
    c0ca:	b108      	cbz	r0, c0d0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x224>
    c0cc:	2601      	movs	r6, #1
    c0ce:	e000      	b.n	c0d2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x226>
    c0d0:	2600      	movs	r6, #0
    c0d2:	7a68      	ldrb	r0, [r5, #9]
    c0d4:	4f30      	ldr	r7, [pc, #192]	; (c198 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ec>)
    c0d6:	f44f 7186 	mov.w	r1, #268	; 0x10c
    c0da:	2801      	cmp	r0, #1
    c0dc:	d002      	beq.n	c0e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x238>
    c0de:	2802      	cmp	r0, #2
    c0e0:	d008      	beq.n	c0f4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x248>
    c0e2:	e018      	b.n	c116 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c0e4:	4638      	mov	r0, r7
    c0e6:	f003 fd50 	bl	fb8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c0ea:	b108      	cbz	r0, c0f0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x244>
    c0ec:	2408      	movs	r4, #8
    c0ee:	e012      	b.n	c116 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c0f0:	2400      	movs	r4, #0
    c0f2:	e010      	b.n	c116 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x26a>
    c0f4:	4638      	mov	r0, r7
    c0f6:	f003 fd48 	bl	fb8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c0fa:	b100      	cbz	r0, c0fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x252>
    c0fc:	2002      	movs	r0, #2
    c0fe:	f8d7 1400 	ldr.w	r1, [r7, #1024]	; 0x400
    c102:	43c9      	mvns	r1, r1
    c104:	f341 0100 	sbfx	r1, r1, #0, #1
    c108:	1c49      	adds	r1, r1, #1
    c10a:	d001      	beq.n	c110 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x264>
    c10c:	2400      	movs	r4, #0
    c10e:	e000      	b.n	c112 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x266>
    c110:	2404      	movs	r4, #4
    c112:	4304      	orrs	r4, r0
    c114:	4334      	orrs	r4, r6
    c116:	f014 0f0b 	tst.w	r4, #11
    c11a:	d107      	bne.n	c12c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x280>
    c11c:	f44f 7188 	mov.w	r1, #272	; 0x110
    c120:	4638      	mov	r0, r7
    c122:	f003 fd32 	bl	fb8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c126:	b100      	cbz	r0, c12a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x27e>
    c128:	2010      	movs	r0, #16
    c12a:	4304      	orrs	r4, r0
    c12c:	481b      	ldr	r0, [pc, #108]	; (c19c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2f0>)
    c12e:	7800      	ldrb	r0, [r0, #0]
    c130:	b1f8      	cbz	r0, c172 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2c6>
    c132:	f8d7 0640 	ldr.w	r0, [r7, #1600]	; 0x640
    c136:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
    c13a:	d007      	beq.n	c14c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c13c:	f44f 718a 	mov.w	r1, #276	; 0x114
    c140:	4638      	mov	r0, r7
    c142:	f003 fd22 	bl	fb8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c146:	b108      	cbz	r0, c14c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a0>
    c148:	2001      	movs	r0, #1
    c14a:	e000      	b.n	c14e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2a2>
    c14c:	2000      	movs	r0, #0
    c14e:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
    c152:	b13e      	cbz	r6, c164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c154:	f44f 718c 	mov.w	r1, #280	; 0x118
    c158:	4638      	mov	r0, r7
    c15a:	f003 fd16 	bl	fb8a <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x34>
    c15e:	b108      	cbz	r0, c164 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2b8>
    c160:	2001      	movs	r0, #1
    c162:	e000      	b.n	c166 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2ba>
    c164:	2000      	movs	r0, #0
    c166:	f885 0023 	strb.w	r0, [r5, #35]	; 0x23
    c16a:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
    c16e:	f885 0024 	strb.w	r0, [r5, #36]	; 0x24
    c172:	f7ff ff2d 	bl	bfd0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x124>
    c176:	06e0      	lsls	r0, r4, #27
    c178:	d506      	bpl.n	c188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c17a:	0720      	lsls	r0, r4, #28
    c17c:	d404      	bmi.n	c188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c17e:	7a68      	ldrb	r0, [r5, #9]
    c180:	2801      	cmp	r0, #1
    c182:	d101      	bne.n	c188 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x2dc>
    c184:	f044 0420 	orr.w	r4, r4, #32
    c188:	4620      	mov	r0, r4
    c18a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c18e:	0000      	.short	0x0000
    c190:	200012e4 	.word	0x200012e4
    c194:	40008000 	.word	0x40008000
    c198:	40001000 	.word	0x40001000
    c19c:	20000264 	.word	0x20000264
    c1a0:	4809      	ldr	r0, [pc, #36]	; (c1c8 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x31c>)
    c1a2:	b510      	push	{r4, lr}
    c1a4:	f8d0 0510 	ldr.w	r0, [r0, #1296]	; 0x510
    c1a8:	f000 000f 	and.w	r0, r0, #15
    c1ac:	2803      	cmp	r0, #3
    c1ae:	d006      	beq.n	c1be <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x312>
    c1b0:	2804      	cmp	r0, #4
    c1b2:	d006      	beq.n	c1c2 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x316>
    c1b4:	f240 11dd 	movw	r1, #477	; 0x1dd
    c1b8:	203e      	movs	r0, #62	; 0x3e
    c1ba:	f7f7 fe81 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c1be:	2001      	movs	r0, #1
    c1c0:	bd10      	pop	{r4, pc}
    c1c2:	2002      	movs	r0, #2
    c1c4:	bd10      	pop	{r4, pc}
    c1c6:	0000      	.short	0x0000
    c1c8:	40001000 	.word	0x40001000
    c1cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c1d0:	4c19      	ldr	r4, [pc, #100]	; (c238 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x38c>)
    c1d2:	460d      	mov	r5, r1
    c1d4:	7a21      	ldrb	r1, [r4, #8]
    c1d6:	b129      	cbz	r1, c1e4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x338>
    c1d8:	f010 0f11 	tst.w	r0, #17
    c1dc:	d00b      	beq.n	c1f6 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x34a>
    c1de:	f7ff fa1f 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    c1e2:	e027      	b.n	c234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c1e4:	4915      	ldr	r1, [pc, #84]	; (c23c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x390>)
    c1e6:	f04f 6040 	mov.w	r0, #201326592	; 0xc000000
    c1ea:	6008      	str	r0, [r1, #0]
    c1ec:	f000 f862 	bl	c2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c1f0:	2000      	movs	r0, #0
    c1f2:	7320      	strb	r0, [r4, #12]
    c1f4:	e01e      	b.n	c234 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x388>
    c1f6:	2901      	cmp	r1, #1
    c1f8:	d001      	beq.n	c1fe <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x352>
    c1fa:	2601      	movs	r6, #1
    c1fc:	e000      	b.n	c200 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x354>
    c1fe:	2600      	movs	r6, #0
    c200:	79e0      	ldrb	r0, [r4, #7]
    c202:	2801      	cmp	r0, #1
    c204:	d00e      	beq.n	c224 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x378>
    c206:	2700      	movs	r7, #0
    c208:	f000 f854 	bl	c2b4 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x408>
    c20c:	2196      	movs	r1, #150	; 0x96
    c20e:	4630      	mov	r0, r6
    c210:	f000 f866 	bl	c2e0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x434>
    c214:	4601      	mov	r1, r0
    c216:	b14f      	cbz	r7, c22c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x380>
    c218:	353b      	adds	r5, #59	; 0x3b
    c21a:	428d      	cmp	r5, r1
    c21c:	d904      	bls.n	c228 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x37c>
    c21e:	2000      	movs	r0, #0
    c220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c224:	2701      	movs	r7, #1
    c226:	e7ef      	b.n	c208 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x35c>
    c228:	2001      	movs	r0, #1
    c22a:	71e0      	strb	r0, [r4, #7]
    c22c:	7aa2      	ldrb	r2, [r4, #10]
    c22e:	4630      	mov	r0, r6
    c230:	f7ff fc6a 	bl	bb08 <sym_E7IS652W2J5N5UTHP752WOA4YNSR7E5S5H4J2AA>
    c234:	2001      	movs	r0, #1
    c236:	e7f3      	b.n	c220 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x374>
    c238:	200012e4 	.word	0x200012e4
    c23c:	4001f508 	.word	0x4001f508
    c240:	4805      	ldr	r0, [pc, #20]	; (c258 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ac>)
    c242:	2100      	movs	r1, #0
    c244:	f8c0 111c 	str.w	r1, [r0, #284]	; 0x11c
    c248:	f8d0 1200 	ldr.w	r1, [r0, #512]	; 0x200
    c24c:	f441 7188 	orr.w	r1, r1, #272	; 0x110
    c250:	f8c0 1200 	str.w	r1, [r0, #512]	; 0x200
    c254:	4770      	bx	lr
    c256:	0000      	.short	0x0000
    c258:	40001000 	.word	0x40001000
    c25c:	4804      	ldr	r0, [pc, #16]	; (c270 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c4>)
    c25e:	6a81      	ldr	r1, [r0, #40]	; 0x28
    c260:	f441 0180 	orr.w	r1, r1, #4194304	; 0x400000
    c264:	6281      	str	r1, [r0, #40]	; 0x28
    c266:	4903      	ldr	r1, [pc, #12]	; (c274 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3c8>)
    c268:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
    c26c:	6008      	str	r0, [r1, #0]
    c26e:	4770      	bx	lr
    c270:	200012e4 	.word	0x200012e4
    c274:	4001f504 	.word	0x4001f504
    c278:	4a07      	ldr	r2, [pc, #28]	; (c298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c27a:	2000      	movs	r0, #0
    c27c:	3208      	adds	r2, #8
    c27e:	4906      	ldr	r1, [pc, #24]	; (c298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c280:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c284:	1d0a      	adds	r2, r1, #4
    c286:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
    c28a:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c28e:	4902      	ldr	r1, [pc, #8]	; (c298 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3ec>)
    c290:	310c      	adds	r1, #12
    c292:	f8c1 0540 	str.w	r0, [r1, #1344]	; 0x540
    c296:	4770      	bx	lr
    c298:	40008000 	.word	0x40008000
    c29c:	4903      	ldr	r1, [pc, #12]	; (c2ac <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x400>)
    c29e:	79c9      	ldrb	r1, [r1, #7]
    c2a0:	2900      	cmp	r1, #0
    c2a2:	d102      	bne.n	c2aa <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x3fe>
    c2a4:	4902      	ldr	r1, [pc, #8]	; (c2b0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x404>)
    c2a6:	f8c1 0514 	str.w	r0, [r1, #1300]	; 0x514
    c2aa:	4770      	bx	lr
    c2ac:	200012e4 	.word	0x200012e4
    c2b0:	4001f098 	.word	0x4001f098
    c2b4:	4802      	ldr	r0, [pc, #8]	; (c2c0 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x414>)
    c2b6:	2100      	movs	r1, #0
    c2b8:	71c1      	strb	r1, [r0, #7]
    c2ba:	7201      	strb	r1, [r0, #8]
    c2bc:	7241      	strb	r1, [r0, #9]
    c2be:	4770      	bx	lr
    c2c0:	200012e4 	.word	0x200012e4
    c2c4:	4a05      	ldr	r2, [pc, #20]	; (c2dc <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x430>)
    c2c6:	79d2      	ldrb	r2, [r2, #7]
    c2c8:	2a01      	cmp	r2, #1
    c2ca:	d006      	beq.n	c2da <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x42e>
    c2cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    c2d0:	f501 71fa 	add.w	r1, r1, #500	; 0x1f4
    c2d4:	fbb1 f1f2 	udiv	r1, r1, r2
    c2d8:	1a40      	subs	r0, r0, r1
    c2da:	4770      	bx	lr
    c2dc:	200012e4 	.word	0x200012e4
    c2e0:	b570      	push	{r4, r5, r6, lr}
    c2e2:	4c13      	ldr	r4, [pc, #76]	; (c330 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x484>)
    c2e4:	4603      	mov	r3, r0
    c2e6:	460d      	mov	r5, r1
    c2e8:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
    c2ec:	2000      	movs	r0, #0
    c2ee:	b15a      	cbz	r2, c308 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x45c>
    c2f0:	4621      	mov	r1, r4
    c2f2:	f891 1020 	ldrb.w	r1, [r1, #32]
    c2f6:	b163      	cbz	r3, c312 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x466>
    c2f8:	2b01      	cmp	r3, #1
    c2fa:	d111      	bne.n	c320 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x474>
    c2fc:	2a01      	cmp	r2, #1
    c2fe:	4628      	mov	r0, r5
    c300:	d012      	beq.n	c328 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x47c>
    c302:	f003 fc8c 	bl	fc1e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>
    c306:	e009      	b.n	c31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c308:	f240 7152 	movw	r1, #1874	; 0x752
    c30c:	203e      	movs	r0, #62	; 0x3e
    c30e:	f7f7 fdd7 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c312:	2a01      	cmp	r2, #1
    c314:	4628      	mov	r0, r5
    c316:	d004      	beq.n	c322 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x476>
    c318:	f003 fc8f 	bl	fc3a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>
    c31c:	69e1      	ldr	r1, [r4, #28]
    c31e:	4408      	add	r0, r1
    c320:	bd70      	pop	{r4, r5, r6, pc}
    c322:	f003 fca4 	bl	fc6e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>
    c326:	e7f9      	b.n	c31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c328:	f003 fc92 	bl	fc50 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>
    c32c:	e7f6      	b.n	c31c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x470>
    c32e:	0000      	.short	0x0000
    c330:	200012e4 	.word	0x200012e4
    c334:	b510      	push	{r4, lr}
    c336:	2200      	movs	r2, #0
    c338:	2901      	cmp	r1, #1
    c33a:	d008      	beq.n	c34e <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4a2>
    c33c:	2902      	cmp	r1, #2
    c33e:	d004      	beq.n	c34a <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x49e>
    c340:	f240 2163 	movw	r1, #611	; 0x263
    c344:	203e      	movs	r0, #62	; 0x3e
    c346:	f7f7 fdbb 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c34a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    c34e:	4905      	ldr	r1, [pc, #20]	; (c364 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4b8>)
    c350:	430a      	orrs	r2, r1
    c352:	4905      	ldr	r1, [pc, #20]	; (c368 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c354:	600a      	str	r2, [r1, #0]
    c356:	4905      	ldr	r1, [pc, #20]	; (c36c <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4c0>)
    c358:	4308      	orrs	r0, r1
    c35a:	4903      	ldr	r1, [pc, #12]	; (c368 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x4bc>)
    c35c:	1d09      	adds	r1, r1, #4
    c35e:	6008      	str	r0, [r1, #0]
    c360:	bd10      	pop	{r4, pc}
    c362:	0000      	.short	0x0000
    c364:	00100108 	.word	0x00100108
    c368:	40001514 	.word	0x40001514
    c36c:	02030000 	.word	0x02030000

0000c370 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA>:
    c370:	4901      	ldr	r1, [pc, #4]	; (c378 <sym_L4JTLGMK2AWYAAPRB3O77773SG36X2NTZJ3FAHA+0x8>)
    c372:	b2c0      	uxtb	r0, r0
    c374:	6008      	str	r0, [r1, #0]
    c376:	4770      	bx	lr
    c378:	4000150c 	.word	0x4000150c

0000c37c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y>:
    c37c:	b510      	push	{r4, lr}
    c37e:	4907      	ldr	r1, [pc, #28]	; (c39c <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x20>)
    c380:	2801      	cmp	r0, #1
    c382:	d005      	beq.n	c390 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x14>
    c384:	2802      	cmp	r0, #2
    c386:	d005      	beq.n	c394 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x18>
    c388:	218b      	movs	r1, #139	; 0x8b
    c38a:	203f      	movs	r0, #63	; 0x3f
    c38c:	f7f7 fd98 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    c390:	2003      	movs	r0, #3
    c392:	e000      	b.n	c396 <sym_BAE5AID2574UQHWOKHY55745PJT6HXY2EXKBH7Y+0x1a>
    c394:	2004      	movs	r0, #4
    c396:	6008      	str	r0, [r1, #0]
    c398:	bd10      	pop	{r4, pc}
    c39a:	0000      	.short	0x0000
    c39c:	40001510 	.word	0x40001510

0000c3a0 <strcmp>:
    c3a0:	f810 2b01 	ldrb.w	r2, [r0], #1
    c3a4:	f811 3b01 	ldrb.w	r3, [r1], #1
    c3a8:	2a01      	cmp	r2, #1
    c3aa:	bf28      	it	cs
    c3ac:	429a      	cmpcs	r2, r3
    c3ae:	d0f7      	beq.n	c3a0 <strcmp>
    c3b0:	1ad0      	subs	r0, r2, r3
    c3b2:	4770      	bx	lr

0000c3b4 <strlen>:
    c3b4:	4603      	mov	r3, r0
    c3b6:	f813 2b01 	ldrb.w	r2, [r3], #1
    c3ba:	2a00      	cmp	r2, #0
    c3bc:	d1fb      	bne.n	c3b6 <strlen+0x2>
    c3be:	1a18      	subs	r0, r3, r0
    c3c0:	3801      	subs	r0, #1
    c3c2:	4770      	bx	lr

0000c3c4 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY>:
    c3c4:	4770      	bx	lr
    c3c6:	2100      	movs	r1, #0
    c3c8:	7081      	strb	r1, [r0, #2]
    c3ca:	7001      	strb	r1, [r0, #0]
    c3cc:	7041      	strb	r1, [r0, #1]
    c3ce:	4770      	bx	lr

0000c3d0 <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY>:
    c3d0:	b570      	push	{r4, r5, r6, lr}
    c3d2:	f7f4 f8c9 	bl	568 <sym_SKFSQME5SGNPYLL7B75KY7PHXFYWSRI2HSTT45A>
    c3d6:	4605      	mov	r5, r0
    c3d8:	2400      	movs	r4, #0
    c3da:	e006      	b.n	c3ea <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0x1a>
    c3dc:	4620      	mov	r0, r4
    c3de:	f7f4 f8c9 	bl	574 <sym_4RNEPYYQOFM4LAOGLN2TB27X7L3XBISTGAWYOHQ>
    c3e2:	f7ff fff0 	bl	c3c6 <sym_GOBFCYOOXGGHCGCZKQ3FVSI5A765LRERAGT3CSY+0x2>
    c3e6:	1c64      	adds	r4, r4, #1
    c3e8:	b2e4      	uxtb	r4, r4
    c3ea:	42ac      	cmp	r4, r5
    c3ec:	d3f6      	bcc.n	c3dc <sym_47MBMNER75N2M6YIZRIF4DAHSAATJOMK3LAIDCY+0xc>
    c3ee:	bd70      	pop	{r4, r5, r6, pc}

0000c3f0 <sym_AQI4OLZLNAFMKTQHPKXO3EVYHTLAOB676ZYU7WY>:
    c3f0:	2000      	movs	r0, #0
    c3f2:	f7f6 bec9 	b.w	3188 <sym_CQWZ455IMTLTPY5LEEZHXHRRNX223B3HTDD45HA>

0000c3f6 <sym_KN3Y3AMHXOHKS2EMALWM5VNLRDL2MPKHIP6XPDA>:
    c3f6:	b510      	push	{r4, lr}
    c3f8:	f7f6 fb9c 	bl	2b34 <sym_M4DIQOXJAE3BNHQBIUCZXAABSM24CWUEJOCU7DY>
    c3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c400:	f000 b800 	b.w	c404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>

0000c404 <sym_XYQTP7YX2XFVREW5KFDH2NNPGRIPEHKIO2RURYI>:
    c404:	0a41      	lsrs	r1, r0, #9
    c406:	f643 5209 	movw	r2, #15625	; 0x3d09
    c40a:	4351      	muls	r1, r2
    c40c:	f3c0 0008 	ubfx	r0, r0, #0, #9
    c410:	fb10 f002 	smulbb	r0, r0, r2
    c414:	f500 7080 	add.w	r0, r0, #256	; 0x100
    c418:	eb01 2050 	add.w	r0, r1, r0, lsr #9
    c41c:	4770      	bx	lr

0000c41e <MPSL_IRQ_RADIO_Handler>:
    c41e:	f7f5 b9b1 	b.w	1784 <sym_UY2NI5OOASY6266A2A7GY3XEUA5M2CDE2WTVEIY>
    c422:	2800      	cmp	r0, #0
    c424:	db09      	blt.n	c43a <MPSL_IRQ_RADIO_Handler+0x1c>
    c426:	f000 021f 	and.w	r2, r0, #31
    c42a:	2101      	movs	r1, #1
    c42c:	4091      	lsls	r1, r2
    c42e:	0940      	lsrs	r0, r0, #5
    c430:	0080      	lsls	r0, r0, #2
    c432:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c436:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c43a:	4770      	bx	lr
    c43c:	2800      	cmp	r0, #0
    c43e:	db0d      	blt.n	c45c <MPSL_IRQ_RADIO_Handler+0x3e>
    c440:	f000 021f 	and.w	r2, r0, #31
    c444:	2101      	movs	r1, #1
    c446:	4091      	lsls	r1, r2
    c448:	0940      	lsrs	r0, r0, #5
    c44a:	0080      	lsls	r0, r0, #2
    c44c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c450:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c454:	f3bf 8f4f 	dsb	sy
    c458:	f3bf 8f6f 	isb	sy
    c45c:	4770      	bx	lr

0000c45e <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI>:
    c45e:	b570      	push	{r4, r5, r6, lr}
    c460:	4602      	mov	r2, r0
    c462:	2000      	movs	r0, #0
    c464:	2900      	cmp	r1, #0
    c466:	d01d      	beq.n	c4a4 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x46>
    c468:	fba2 0101 	umull	r0, r1, r2, r1
    c46c:	0a40      	lsrs	r0, r0, #9
    c46e:	ea40 50c1 	orr.w	r0, r0, r1, lsl #23
    c472:	0a49      	lsrs	r1, r1, #9
    c474:	1c40      	adds	r0, r0, #1
    c476:	f141 0100 	adc.w	r1, r1, #0
    c47a:	f240 72a1 	movw	r2, #1953	; 0x7a1
    c47e:	1883      	adds	r3, r0, r2
    c480:	f141 0100 	adc.w	r1, r1, #0
    c484:	1c5b      	adds	r3, r3, #1
    c486:	f141 0400 	adc.w	r4, r1, #0
    c48a:	2100      	movs	r1, #0
    c48c:	f1d3 33ff 	rsbs	r3, r3, #4294967295
    c490:	41a1      	sbcs	r1, r4
    c492:	d203      	bcs.n	c49c <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x3e>
    c494:	2171      	movs	r1, #113	; 0x71
    c496:	206d      	movs	r0, #109	; 0x6d
    c498:	f7f7 fa32 	bl	3900 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
    c49c:	f500 60f4 	add.w	r0, r0, #1952	; 0x7a0
    c4a0:	fbb0 f0f2 	udiv	r0, r0, r2
    c4a4:	bd70      	pop	{r4, r5, r6, pc}
    c4a6:	5840      	ldr	r0, [r0, r1]
    c4a8:	2800      	cmp	r0, #0
    c4aa:	d000      	beq.n	c4ae <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x50>
    c4ac:	2001      	movs	r0, #1
    c4ae:	4770      	bx	lr
    c4b0:	f8d0 240c 	ldr.w	r2, [r0, #1036]	; 0x40c
    c4b4:	f8d0 040c 	ldr.w	r0, [r0, #1036]	; 0x40c
    c4b8:	f002 0201 	and.w	r2, r2, #1
    c4bc:	03c0      	lsls	r0, r0, #15
    c4be:	d503      	bpl.n	c4c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c4c0:	428a      	cmp	r2, r1
    c4c2:	d101      	bne.n	c4c8 <sym_XEJLNUQGS5P4R5IXDJFF6NE6C2FZWRZYDQOGMPI+0x6a>
    c4c4:	2001      	movs	r0, #1
    c4c6:	4770      	bx	lr
    c4c8:	2000      	movs	r0, #0
    c4ca:	4770      	bx	lr

0000c4cc <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI>:
    c4cc:	b510      	push	{r4, lr}
    c4ce:	2101      	movs	r1, #1
    c4d0:	0788      	lsls	r0, r1, #30
    c4d2:	f7f7 f9bf 	bl	3854 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c4d6:	2800      	cmp	r0, #0
    c4d8:	d000      	beq.n	c4dc <sym_TIWHB6UQGI33JQCQDL7C2BRAEXCRAFYENVN6QEI+0x10>
    c4da:	2001      	movs	r0, #1
    c4dc:	bd10      	pop	{r4, pc}

0000c4de <sym_IFJHPQV3B4EIN6OIUP3LZSPJBF5HLX2VYD323GA>:
    c4de:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c4e2:	2101      	movs	r1, #1
    c4e4:	6001      	str	r1, [r0, #0]
    c4e6:	4770      	bx	lr

0000c4e8 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA>:
    c4e8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    c4ec:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
    c4f0:	f8d1 1418 	ldr.w	r1, [r1, #1048]	; 0x418
    c4f4:	f002 0203 	and.w	r2, r2, #3
    c4f8:	03c9      	lsls	r1, r1, #15
    c4fa:	d503      	bpl.n	c504 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c4fc:	4282      	cmp	r2, r0
    c4fe:	d101      	bne.n	c504 <sym_LZEJCP3HZIBKMJQC47UQXAHGCQ52QF47EXOH2WA+0x1c>
    c500:	2001      	movs	r0, #1
    c502:	4770      	bx	lr
    c504:	2000      	movs	r0, #0
    c506:	4770      	bx	lr

0000c508 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA>:
    c508:	b510      	push	{r4, lr}
    c50a:	2100      	movs	r1, #0
    c50c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
    c510:	f7f7 f9a0 	bl	3854 <sym_7BUNPUBNWNFVXXIMNFFNK765OVON5LBIUZ66QRI+0x10>
    c514:	2800      	cmp	r0, #0
    c516:	d000      	beq.n	c51a <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x12>
    c518:	2001      	movs	r0, #1
    c51a:	bd10      	pop	{r4, pc}
    c51c:	2800      	cmp	r0, #0
    c51e:	db09      	blt.n	c534 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x2c>
    c520:	f000 021f 	and.w	r2, r0, #31
    c524:	2101      	movs	r1, #1
    c526:	4091      	lsls	r1, r2
    c528:	0940      	lsrs	r0, r0, #5
    c52a:	0080      	lsls	r0, r0, #2
    c52c:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c530:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c534:	4770      	bx	lr
    c536:	2800      	cmp	r0, #0
    c538:	db0d      	blt.n	c556 <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x4e>
    c53a:	f000 021f 	and.w	r2, r0, #31
    c53e:	2101      	movs	r1, #1
    c540:	4091      	lsls	r1, r2
    c542:	0940      	lsrs	r0, r0, #5
    c544:	0080      	lsls	r0, r0, #2
    c546:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c54a:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    c54e:	f3bf 8f4f 	dsb	sy
    c552:	f3bf 8f6f 	isb	sy
    c556:	4770      	bx	lr
    c558:	00021000 	.word	0x00021000
    c55c:	000000fa 	.word	0x000000fa
    c560:	24625723 	.word	0x24625723
    c564:	578f3123 	.word	0x578f3123
    c568:	2fd1ee74 	.word	0x2fd1ee74
    c56c:	4594c088 	.word	0x4594c088
    c570:	36f9a2f7 	.word	0x36f9a2f7
    c574:	2800      	cmp	r0, #0
    c576:	db09      	blt.n	c58c <sym_AL7FCNVVCF72BNYCTLA5UGAWCQFXFPGE2ULTWOA+0x84>
    c578:	f000 021f 	and.w	r2, r0, #31
    c57c:	2101      	movs	r1, #1
    c57e:	4091      	lsls	r1, r2
    c580:	0940      	lsrs	r0, r0, #5
    c582:	0080      	lsls	r0, r0, #2
    c584:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    c588:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    c58c:	4770      	bx	lr

0000c58e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA>:
    c58e:	f3ef 8110 	mrs	r1, PRIMASK
    c592:	b672      	cpsid	i
    c594:	7802      	ldrb	r2, [r0, #0]
    c596:	2a01      	cmp	r2, #1
    c598:	d001      	beq.n	c59e <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x10>
    c59a:	2201      	movs	r2, #1
    c59c:	e000      	b.n	c5a0 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x12>
    c59e:	2200      	movs	r2, #0
    c5a0:	2301      	movs	r3, #1
    c5a2:	7003      	strb	r3, [r0, #0]
    c5a4:	b901      	cbnz	r1, c5a8 <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x1a>
    c5a6:	b662      	cpsie	i
    c5a8:	b10a      	cbz	r2, c5ae <sym_AR22FPVUFSZMVYMQBBXG7EEZNA2HPS2RLAKRPBA+0x20>
    c5aa:	2000      	movs	r0, #0
    c5ac:	4770      	bx	lr
    c5ae:	f06f 0022 	mvn.w	r0, #34	; 0x22
    c5b2:	4770      	bx	lr

0000c5b4 <sym_YS3AHD7GWBHZEQHPIQANPGALEXB4QGY5O2DQKRY>:
    c5b4:	2100      	movs	r1, #0
    c5b6:	7001      	strb	r1, [r0, #0]
    c5b8:	4608      	mov	r0, r1
    c5ba:	4770      	bx	lr

0000c5bc <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q>:
    c5bc:	f3ef 8110 	mrs	r1, PRIMASK
    c5c0:	b672      	cpsid	i
    c5c2:	2200      	movs	r2, #0
    c5c4:	7002      	strb	r2, [r0, #0]
    c5c6:	b901      	cbnz	r1, c5ca <sym_OWJYSTADR5I36MIHWNPICVB7CMCWNSFIZPFXQ2Q+0xe>
    c5c8:	b662      	cpsie	i
    c5ca:	2000      	movs	r0, #0
    c5cc:	4770      	bx	lr

0000c5ce <mpsl_low_priority_process>:
    c5ce:	f7f7 ba83 	b.w	3ad8 <sym_VWGRUQT3LYZHLYS5KJ7UOCJEHLDJTWH4RVJBGKQ>

0000c5d2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
    c5d2:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c5d6:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c5da:	280f      	cmp	r0, #15
    c5dc:	d001      	beq.n	c5e2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
    c5de:	2000      	movs	r0, #0
    c5e0:	4770      	bx	lr
    c5e2:	2001      	movs	r0, #1
    c5e4:	4770      	bx	lr

0000c5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
    c5e6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c5ea:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c5ee:	280a      	cmp	r0, #10
    c5f0:	d001      	beq.n	c5f6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
    c5f2:	2000      	movs	r0, #0
    c5f4:	4770      	bx	lr
    c5f6:	2001      	movs	r0, #1
    c5f8:	4770      	bx	lr

0000c5fa <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA>:
    c5fa:	b500      	push	{lr}
    c5fc:	f7ff fff3 	bl	c5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    c600:	b120      	cbz	r0, c60c <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x12>
    c602:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c606:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c60a:	b108      	cbz	r0, c610 <sym_NQG4U7UYIQILZLC5ENYCA4NQMQM6PBAZC345PPA+0x16>
    c60c:	2000      	movs	r0, #0
    c60e:	bd00      	pop	{pc}
    c610:	2001      	movs	r0, #1
    c612:	bd00      	pop	{pc}

0000c614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
    c614:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c618:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c61c:	280e      	cmp	r0, #14
    c61e:	d001      	beq.n	c624 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
    c620:	2000      	movs	r0, #0
    c622:	4770      	bx	lr
    c624:	2001      	movs	r0, #1
    c626:	4770      	bx	lr

0000c628 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
    c628:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c62c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c630:	2810      	cmp	r0, #16
    c632:	d001      	beq.n	c638 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
    c634:	2000      	movs	r0, #0
    c636:	4770      	bx	lr
    c638:	2001      	movs	r0, #1
    c63a:	4770      	bx	lr

0000c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
    c63c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c640:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c644:	2806      	cmp	r0, #6
    c646:	d003      	beq.n	c650 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c648:	1c40      	adds	r0, r0, #1
    c64a:	d001      	beq.n	c650 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
    c64c:	2000      	movs	r0, #0
    c64e:	4770      	bx	lr
    c650:	2001      	movs	r0, #1
    c652:	4770      	bx	lr

0000c654 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ>:
    c654:	b500      	push	{lr}
    c656:	f7ff fff1 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c65a:	b148      	cbz	r0, c670 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c65c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c660:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c664:	2806      	cmp	r0, #6
    c666:	d303      	bcc.n	c670 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c668:	1c40      	adds	r0, r0, #1
    c66a:	d001      	beq.n	c670 <sym_6AONFMPWPBAZBMQ4KY5PX7QPX2FM4UPZQRFPZSQ+0x1c>
    c66c:	2001      	movs	r0, #1
    c66e:	bd00      	pop	{pc}
    c670:	2000      	movs	r0, #0
    c672:	bd00      	pop	{pc}

0000c674 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ>:
    c674:	b500      	push	{lr}
    c676:	f7ff ffe1 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    c67a:	b138      	cbz	r0, c68c <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x18>
    c67c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c680:	f8d0 0134 	ldr.w	r0, [r0, #308]	; 0x134
    c684:	2806      	cmp	r0, #6
    c686:	d303      	bcc.n	c690 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c688:	1c40      	adds	r0, r0, #1
    c68a:	d001      	beq.n	c690 <sym_YNH6KDZL2GMJ2KPUX5DEER63BRE7IOGBY3KCQAQ+0x1c>
    c68c:	2000      	movs	r0, #0
    c68e:	bd00      	pop	{pc}
    c690:	2001      	movs	r0, #1
    c692:	bd00      	pop	{pc}

0000c694 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
    c694:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c698:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c69c:	280d      	cmp	r0, #13
    c69e:	d001      	beq.n	c6a4 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
    c6a0:	2000      	movs	r0, #0
    c6a2:	4770      	bx	lr
    c6a4:	2001      	movs	r0, #1
    c6a6:	4770      	bx	lr

0000c6a8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
    c6a8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    c6ac:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
    c6b0:	2808      	cmp	r0, #8
    c6b2:	d001      	beq.n	c6b8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
    c6b4:	2000      	movs	r0, #0
    c6b6:	4770      	bx	lr
    c6b8:	2001      	movs	r0, #1
    c6ba:	4770      	bx	lr

0000c6bc <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ>:
    c6bc:	2a00      	cmp	r2, #0
    c6be:	bf04      	itt	eq
    c6c0:	2000      	moveq	r0, #0
    c6c2:	4770      	bxeq	lr
    c6c4:	1e52      	subs	r2, r2, #1
    c6c6:	d007      	beq.n	c6d8 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x1c>
    c6c8:	7803      	ldrb	r3, [r0, #0]
    c6ca:	f891 c000 	ldrb.w	ip, [r1]
    c6ce:	4563      	cmp	r3, ip
    c6d0:	bf04      	itt	eq
    c6d2:	1c40      	addeq	r0, r0, #1
    c6d4:	1c49      	addeq	r1, r1, #1
    c6d6:	d0f5      	beq.n	c6c4 <sym_K65IFLJONCLHPD5IQ4ENBWGA3PVI55UHZKOIVDQ+0x8>
    c6d8:	7800      	ldrb	r0, [r0, #0]
    c6da:	7809      	ldrb	r1, [r1, #0]
    c6dc:	1a40      	subs	r0, r0, r1
    c6de:	4770      	bx	lr

0000c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>:
    c6e0:	b4f0      	push	{r4, r5, r6, r7}
    c6e2:	ea80 0c01 	eor.w	ip, r0, r1
    c6e6:	4603      	mov	r3, r0
    c6e8:	f01c 0f03 	tst.w	ip, #3
    c6ec:	d13c      	bne.n	c768 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c6ee:	f013 0f03 	tst.w	r3, #3
    c6f2:	d00b      	beq.n	c70c <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x2c>
    c6f4:	2a00      	cmp	r2, #0
    c6f6:	bf04      	itt	eq
    c6f8:	bcf0      	popeq	{r4, r5, r6, r7}
    c6fa:	4770      	bxeq	lr
    c6fc:	f811 cb01 	ldrb.w	ip, [r1], #1
    c700:	f803 cb01 	strb.w	ip, [r3], #1
    c704:	1e52      	subs	r2, r2, #1
    c706:	f013 0f03 	tst.w	r3, #3
    c70a:	d1f3      	bne.n	c6f4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x14>
    c70c:	2a03      	cmp	r2, #3
    c70e:	d94f      	bls.n	c7b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c710:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c714:	d24c      	bcs.n	c7b0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd0>
    c716:	f1c2 0c00 	rsb	ip, r2, #0
    c71a:	ea4f 74ec 	mov.w	r4, ip, asr #31
    c71e:	eb0c 7c94 	add.w	ip, ip, r4, lsr #30
    c722:	ea4f 0cac 	mov.w	ip, ip, asr #2
    c726:	f1cc 0c00 	rsb	ip, ip, #0
    c72a:	f1bc 0f00 	cmp.w	ip, #0
    c72e:	dd1b      	ble.n	c768 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c730:	1f0d      	subs	r5, r1, #4
    c732:	1f1c      	subs	r4, r3, #4
    c734:	f01c 0f01 	tst.w	ip, #1
    c738:	d003      	beq.n	c742 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x62>
    c73a:	f855 6f04 	ldr.w	r6, [r5, #4]!
    c73e:	f844 6f04 	str.w	r6, [r4, #4]!
    c742:	ea5f 066c 	movs.w	r6, ip, asr #1
    c746:	d007      	beq.n	c758 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x78>
    c748:	686f      	ldr	r7, [r5, #4]
    c74a:	6067      	str	r7, [r4, #4]
    c74c:	f855 7f08 	ldr.w	r7, [r5, #8]!
    c750:	f844 7f08 	str.w	r7, [r4, #8]!
    c754:	1e76      	subs	r6, r6, #1
    c756:	d1f7      	bne.n	c748 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x68>
    c758:	eb01 018c 	add.w	r1, r1, ip, lsl #2
    c75c:	eb03 038c 	add.w	r3, r3, ip, lsl #2
    c760:	f1cc 0c00 	rsb	ip, ip, #0
    c764:	eb02 028c 	add.w	r2, r2, ip, lsl #2
    c768:	2a00      	cmp	r2, #0
    c76a:	bf04      	itt	eq
    c76c:	bcf0      	popeq	{r4, r5, r6, r7}
    c76e:	4770      	bxeq	lr
    c770:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c774:	d226      	bcs.n	c7c4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c776:	2a00      	cmp	r2, #0
    c778:	bfdc      	itt	le
    c77a:	bcf0      	pople	{r4, r5, r6, r7}
    c77c:	4770      	bxle	lr
    c77e:	1e49      	subs	r1, r1, #1
    c780:	1e5b      	subs	r3, r3, #1
    c782:	f012 0f01 	tst.w	r2, #1
    c786:	d003      	beq.n	c790 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb0>
    c788:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    c78c:	f803 cf01 	strb.w	ip, [r3, #1]!
    c790:	1052      	asrs	r2, r2, #1
    c792:	bf04      	itt	eq
    c794:	bcf0      	popeq	{r4, r5, r6, r7}
    c796:	4770      	bxeq	lr
    c798:	f891 c001 	ldrb.w	ip, [r1, #1]
    c79c:	f883 c001 	strb.w	ip, [r3, #1]
    c7a0:	f811 cf02 	ldrb.w	ip, [r1, #2]!
    c7a4:	f803 cf02 	strb.w	ip, [r3, #2]!
    c7a8:	1e52      	subs	r2, r2, #1
    c7aa:	d1f5      	bne.n	c798 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xb8>
    c7ac:	bcf0      	pop	{r4, r5, r6, r7}
    c7ae:	4770      	bx	lr
    c7b0:	2a04      	cmp	r2, #4
    c7b2:	d3d9      	bcc.n	c768 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c7b4:	f851 cb04 	ldr.w	ip, [r1], #4
    c7b8:	1f12      	subs	r2, r2, #4
    c7ba:	f843 cb04 	str.w	ip, [r3], #4
    c7be:	2a04      	cmp	r2, #4
    c7c0:	d2f8      	bcs.n	c7b4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xd4>
    c7c2:	e7d1      	b.n	c768 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0x88>
    c7c4:	f811 cb01 	ldrb.w	ip, [r1], #1
    c7c8:	f803 cb01 	strb.w	ip, [r3], #1
    c7cc:	1e52      	subs	r2, r2, #1
    c7ce:	d1f9      	bne.n	c7c4 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A+0xe4>
    c7d0:	bcf0      	pop	{r4, r5, r6, r7}
    c7d2:	4770      	bx	lr

0000c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>:
    c7d4:	b470      	push	{r4, r5, r6}
    c7d6:	4603      	mov	r3, r0
    c7d8:	f001 0cff 	and.w	ip, r1, #255	; 0xff
    c7dc:	f010 0f03 	tst.w	r0, #3
    c7e0:	d009      	beq.n	c7f6 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x22>
    c7e2:	2a00      	cmp	r2, #0
    c7e4:	bf04      	itt	eq
    c7e6:	bc70      	popeq	{r4, r5, r6}
    c7e8:	4770      	bxeq	lr
    c7ea:	f803 cb01 	strb.w	ip, [r3], #1
    c7ee:	1e52      	subs	r2, r2, #1
    c7f0:	f013 0f03 	tst.w	r3, #3
    c7f4:	d1f5      	bne.n	c7e2 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xe>
    c7f6:	b2c9      	uxtb	r1, r1
    c7f8:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    c7fc:	ea41 4501 	orr.w	r5, r1, r1, lsl #16
    c800:	2a03      	cmp	r2, #3
    c802:	d939      	bls.n	c878 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c808:	d236      	bcs.n	c878 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa4>
    c80a:	4251      	negs	r1, r2
    c80c:	17cc      	asrs	r4, r1, #31
    c80e:	eb01 7194 	add.w	r1, r1, r4, lsr #30
    c812:	1089      	asrs	r1, r1, #2
    c814:	424e      	negs	r6, r1
    c816:	2e00      	cmp	r6, #0
    c818:	dd11      	ble.n	c83e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c81a:	1f19      	subs	r1, r3, #4
    c81c:	f016 0f01 	tst.w	r6, #1
    c820:	bf18      	it	ne
    c822:	f841 5f04 	strne.w	r5, [r1, #4]!
    c826:	1074      	asrs	r4, r6, #1
    c828:	d004      	beq.n	c834 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x60>
    c82a:	604d      	str	r5, [r1, #4]
    c82c:	f841 5f08 	str.w	r5, [r1, #8]!
    c830:	1e64      	subs	r4, r4, #1
    c832:	d1fa      	bne.n	c82a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x56>
    c834:	4271      	negs	r1, r6
    c836:	eb03 0386 	add.w	r3, r3, r6, lsl #2
    c83a:	eb02 0281 	add.w	r2, r2, r1, lsl #2
    c83e:	2a00      	cmp	r2, #0
    c840:	bf04      	itt	eq
    c842:	bc70      	popeq	{r4, r5, r6}
    c844:	4770      	bxeq	lr
    c846:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    c84a:	d21d      	bcs.n	c888 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c84c:	2a00      	cmp	r2, #0
    c84e:	bfdc      	itt	le
    c850:	bc70      	pople	{r4, r5, r6}
    c852:	4770      	bxle	lr
    c854:	1e59      	subs	r1, r3, #1
    c856:	f012 0f01 	tst.w	r2, #1
    c85a:	bf18      	it	ne
    c85c:	f801 cf01 	strbne.w	ip, [r1, #1]!
    c860:	1052      	asrs	r2, r2, #1
    c862:	bf04      	itt	eq
    c864:	bc70      	popeq	{r4, r5, r6}
    c866:	4770      	bxeq	lr
    c868:	f881 c001 	strb.w	ip, [r1, #1]
    c86c:	f801 cf02 	strb.w	ip, [r1, #2]!
    c870:	1e52      	subs	r2, r2, #1
    c872:	d1f9      	bne.n	c868 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x94>
    c874:	bc70      	pop	{r4, r5, r6}
    c876:	4770      	bx	lr
    c878:	2a04      	cmp	r2, #4
    c87a:	d3e0      	bcc.n	c83e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c87c:	1f12      	subs	r2, r2, #4
    c87e:	f843 5b04 	str.w	r5, [r3], #4
    c882:	2a04      	cmp	r2, #4
    c884:	d2fa      	bcs.n	c87c <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xa8>
    c886:	e7da      	b.n	c83e <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x6a>
    c888:	f803 cb01 	strb.w	ip, [r3], #1
    c88c:	1e52      	subs	r2, r2, #1
    c88e:	d1fb      	bne.n	c888 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0xb4>
    c890:	bc70      	pop	{r4, r5, r6}
    c892:	4770      	bx	lr
    c894:	f04f 30ff 	mov.w	r0, #4294967295
    c898:	4770      	bx	lr
    c89a:	2000      	movs	r0, #0
    c89c:	4770      	bx	lr
    c89e:	2000      	movs	r0, #0
    c8a0:	4770      	bx	lr
    c8a2:	f04f 30ff 	mov.w	r0, #4294967295
    c8a6:	4770      	bx	lr
    c8a8:	4770      	bx	lr
    c8aa:	4770      	bx	lr
    c8ac:	2000      	movs	r0, #0
    c8ae:	4770      	bx	lr
    c8b0:	f04f 30ff 	mov.w	r0, #4294967295
    c8b4:	4770      	bx	lr
    c8b6:	f04f 30ff 	mov.w	r0, #4294967295
    c8ba:	4770      	bx	lr
    c8bc:	2100      	movs	r1, #0
    c8be:	7001      	strb	r1, [r0, #0]
    c8c0:	4770      	bx	lr
    c8c2:	f04f 30ff 	mov.w	r0, #4294967295
    c8c6:	4770      	bx	lr
    c8c8:	f04f 30ff 	mov.w	r0, #4294967295
    c8cc:	4770      	bx	lr
    c8ce:	2000      	movs	r0, #0
    c8d0:	4770      	bx	lr
    c8d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c8d6:	4606      	mov	r6, r0
    c8d8:	460c      	mov	r4, r1
    c8da:	7808      	ldrb	r0, [r1, #0]
    c8dc:	7849      	ldrb	r1, [r1, #1]
    c8de:	2700      	movs	r7, #0
    c8e0:	4408      	add	r0, r1
    c8e2:	4691      	mov	r9, r2
    c8e4:	f000 08ff 	and.w	r8, r0, #255	; 0xff
    c8e8:	463d      	mov	r5, r7
    c8ea:	e00e      	b.n	c90a <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x136>
    c8ec:	7a23      	ldrb	r3, [r4, #8]
    c8ee:	2b02      	cmp	r3, #2
    c8f0:	d200      	bcs.n	c8f4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x120>
    c8f2:	2302      	movs	r3, #2
    c8f4:	79e2      	ldrb	r2, [r4, #7]
    c8f6:	2a03      	cmp	r2, #3
    c8f8:	d200      	bcs.n	c8fc <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x128>
    c8fa:	2203      	movs	r2, #3
    c8fc:	79a1      	ldrb	r1, [r4, #6]
    c8fe:	7960      	ldrb	r0, [r4, #5]
    c900:	f000 ffb3 	bl	d86a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>
    c904:	1c6d      	adds	r5, r5, #1
    c906:	4407      	add	r7, r0
    c908:	b2ed      	uxtb	r5, r5
    c90a:	4545      	cmp	r5, r8
    c90c:	d3ee      	bcc.n	c8ec <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x118>
    c90e:	6830      	ldr	r0, [r6, #0]
    c910:	1cc0      	adds	r0, r0, #3
    c912:	f020 0003 	bic.w	r0, r0, #3
    c916:	6030      	str	r0, [r6, #0]
    c918:	f1b9 0f00 	cmp.w	r9, #0
    c91c:	d000      	beq.n	c920 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA+0x14c>
    c91e:	2000      	movs	r0, #0
    c920:	463a      	mov	r2, r7
    c922:	4641      	mov	r1, r8
    c924:	f7f7 fe82 	bl	462c <sym_6DYG6C6ROXZA67GZINNB2XIQHL3KE2RCKK4QFXA>
    c928:	6831      	ldr	r1, [r6, #0]
    c92a:	4408      	add	r0, r1
    c92c:	6030      	str	r0, [r6, #0]
    c92e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c932 <sym_4IISVSOLVFJB5JBTYDAEGXSTM4YG5MOTRTRY33A>:
    c932:	2000      	movs	r0, #0
    c934:	4770      	bx	lr

0000c936 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>:
    c936:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    c938:	4604      	mov	r4, r0
    c93a:	1d01      	adds	r1, r0, #4
    c93c:	4668      	mov	r0, sp
    c93e:	f7f9 fb11 	bl	5f64 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA>
    c942:	2800      	cmp	r0, #0
    c944:	d004      	beq.n	c950 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I+0x1a>
    c946:	4669      	mov	r1, sp
    c948:	4620      	mov	r0, r4
    c94a:	f000 f848 	bl	c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>
    c94e:	2001      	movs	r0, #1
    c950:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000c952 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>:
    c952:	b50e      	push	{r1, r2, r3, lr}
    c954:	4601      	mov	r1, r0
    c956:	4668      	mov	r0, sp
    c958:	f000 f827 	bl	c9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>
    c95c:	4668      	mov	r0, sp
    c95e:	f001 fc51 	bl	e204 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>
    c962:	bd0e      	pop	{r1, r2, r3, pc}

0000c964 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>:
    c964:	b510      	push	{r4, lr}
    c966:	4604      	mov	r4, r0
    c968:	4620      	mov	r0, r4
    c96a:	f7f7 fb9f 	bl	40ac <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0x50>
    c96e:	2800      	cmp	r0, #0
    c970:	d006      	beq.n	c980 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1c>
    c972:	78a1      	ldrb	r1, [r4, #2]
    c974:	7820      	ldrb	r0, [r4, #0]
    c976:	f000 f804 	bl	c982 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x1e>
    c97a:	2800      	cmp	r0, #0
    c97c:	d0f4      	beq.n	c968 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x4>
    c97e:	2001      	movs	r0, #1
    c980:	bd10      	pop	{r4, pc}
    c982:	b570      	push	{r4, r5, r6, lr}
    c984:	460c      	mov	r4, r1
    c986:	4605      	mov	r5, r0
    c988:	f7f7 fbec 	bl	4164 <sym_Z7NJGBYWCKFTEHRYWAIDKWPEUN45273QSWUA5CY>
    c98c:	2800      	cmp	r0, #0
    c98e:	d002      	beq.n	c996 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x32>
    c990:	2d3e      	cmp	r5, #62	; 0x3e
    c992:	d001      	beq.n	c998 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x34>
    c994:	2001      	movs	r0, #1
    c996:	bd70      	pop	{r4, r5, r6, pc}
    c998:	2c12      	cmp	r4, #18
    c99a:	d004      	beq.n	c9a6 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ+0x42>
    c99c:	4620      	mov	r0, r4
    c99e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    c9a2:	f7f7 bbfb 	b.w	419c <sym_CEENVC5DZRUT7MGF5LABXKT4NV7YUL5F6EX6TEQ>
    c9a6:	2000      	movs	r0, #0
    c9a8:	bd70      	pop	{r4, r5, r6, pc}

0000c9aa <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI>:
    c9aa:	880a      	ldrh	r2, [r1, #0]
    c9ac:	f3c2 020b 	ubfx	r2, r2, #0, #12
    c9b0:	8002      	strh	r2, [r0, #0]
    c9b2:	884a      	ldrh	r2, [r1, #2]
    c9b4:	8042      	strh	r2, [r0, #2]
    c9b6:	784a      	ldrb	r2, [r1, #1]
    c9b8:	0993      	lsrs	r3, r2, #6
    c9ba:	2200      	movs	r2, #0
    c9bc:	7142      	strb	r2, [r0, #5]
    c9be:	784b      	ldrb	r3, [r1, #1]
    c9c0:	f3c3 1301 	ubfx	r3, r3, #4, #2
    c9c4:	b11b      	cbz	r3, c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c9c6:	2b01      	cmp	r3, #1
    c9c8:	d005      	beq.n	c9d6 <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x2c>
    c9ca:	2b02      	cmp	r3, #2
    c9cc:	d005      	beq.n	c9da <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x30>
    c9ce:	7102      	strb	r2, [r0, #4]
    c9d0:	1d09      	adds	r1, r1, #4
    c9d2:	6081      	str	r1, [r0, #8]
    c9d4:	4770      	bx	lr
    c9d6:	2201      	movs	r2, #1
    c9d8:	e7f9      	b.n	c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>
    c9da:	2202      	movs	r2, #2
    c9dc:	e7f7      	b.n	c9ce <sym_BR3ZWQHTEOP3TTXZR25GQZOEPSGL2XNSEOFSTEI+0x24>

0000c9de <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I>:
    c9de:	b510      	push	{r4, lr}
    c9e0:	460c      	mov	r4, r1
    c9e2:	7809      	ldrb	r1, [r1, #0]
    c9e4:	7001      	strb	r1, [r0, #0]
    c9e6:	7841      	ldrb	r1, [r0, #1]
    c9e8:	f021 010f 	bic.w	r1, r1, #15
    c9ec:	7041      	strb	r1, [r0, #1]
    c9ee:	8822      	ldrh	r2, [r4, #0]
    c9f0:	f3c2 2203 	ubfx	r2, r2, #8, #4
    c9f4:	4311      	orrs	r1, r2
    c9f6:	7041      	strb	r1, [r0, #1]
    c9f8:	78a2      	ldrb	r2, [r4, #2]
    c9fa:	7082      	strb	r2, [r0, #2]
    c9fc:	8862      	ldrh	r2, [r4, #2]
    c9fe:	f021 0130 	bic.w	r1, r1, #48	; 0x30
    ca02:	0a12      	lsrs	r2, r2, #8
    ca04:	70c2      	strb	r2, [r0, #3]
    ca06:	7041      	strb	r1, [r0, #1]
    ca08:	7922      	ldrb	r2, [r4, #4]
    ca0a:	f002 0203 	and.w	r2, r2, #3
    ca0e:	ea41 1102 	orr.w	r1, r1, r2, lsl #4
    ca12:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
    ca16:	7041      	strb	r1, [r0, #1]
    ca18:	7962      	ldrb	r2, [r4, #5]
    ca1a:	ea41 1182 	orr.w	r1, r1, r2, lsl #6
    ca1e:	7041      	strb	r1, [r0, #1]
    ca20:	68a1      	ldr	r1, [r4, #8]
    ca22:	1d02      	adds	r2, r0, #4
    ca24:	4291      	cmp	r1, r2
    ca26:	d006      	beq.n	ca36 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x58>
    ca28:	8862      	ldrh	r2, [r4, #2]
    ca2a:	2afb      	cmp	r2, #251	; 0xfb
    ca2c:	d300      	bcc.n	ca30 <sym_CNH7SD2WCGFAHI2ANQOF3HHV2F3WYQDABEB6D2I+0x52>
    ca2e:	22fb      	movs	r2, #251	; 0xfb
    ca30:	1d00      	adds	r0, r0, #4
    ca32:	f7ff fe55 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    ca36:	78a0      	ldrb	r0, [r4, #2]
    ca38:	1d00      	adds	r0, r0, #4
    ca3a:	b2c0      	uxtb	r0, r0
    ca3c:	bd10      	pop	{r4, pc}

0000ca3e <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI>:
    ca3e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca42:	4604      	mov	r4, r0
    ca44:	f891 c000 	ldrb.w	ip, [r1]
    ca48:	2000      	movs	r0, #0
    ca4a:	270c      	movs	r7, #12
    ca4c:	223e      	movs	r2, #62	; 0x3e
    ca4e:	2612      	movs	r6, #18
    ca50:	25ff      	movs	r5, #255	; 0xff
    ca52:	f04f 0b14 	mov.w	fp, #20
    ca56:	f04f 0e13 	mov.w	lr, #19
    ca5a:	f04f 0a05 	mov.w	sl, #5
    ca5e:	f104 030d 	add.w	r3, r4, #13
    ca62:	f04f 0911 	mov.w	r9, #17
    ca66:	f1bc 0f20 	cmp.w	ip, #32
    ca6a:	d272      	bcs.n	cb52 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x114>
    ca6c:	e8df f00c 	tbb	[pc, ip]
    ca70:	29271071 	.word	0x29271071
    ca74:	a46dfc2e 	.word	0xa46dfc2e
    ca78:	fbdac0ae 	.word	0xfbdac0ae
    ca7c:	f7f8f9fa 	.word	0xf7f8f9fa
    ca80:	507171f6 	.word	0x507171f6
    ca84:	f3f4f572 	.word	0xf3f4f572
    ca88:	eff0f1f2 	.word	0xeff0f1f2
    ca8c:	ec71edee 	.word	0xec71edee
    ca90:	7027      	strb	r7, [r4, #0]
    ca92:	7908      	ldrb	r0, [r1, #4]
    ca94:	70a0      	strb	r0, [r4, #2]
    ca96:	7948      	ldrb	r0, [r1, #5]
    ca98:	70e0      	strb	r0, [r4, #3]
    ca9a:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    ca9e:	0a00      	lsrs	r0, r0, #8
    caa0:	7120      	strb	r0, [r4, #4]
    caa2:	79c8      	ldrb	r0, [r1, #7]
    caa4:	7160      	strb	r0, [r4, #5]
    caa6:	7a08      	ldrb	r0, [r1, #8]
    caa8:	71a0      	strb	r0, [r4, #6]
    caaa:	8908      	ldrh	r0, [r1, #8]
    caac:	0a00      	lsrs	r0, r0, #8
    caae:	71e0      	strb	r0, [r4, #7]
    cab0:	7a88      	ldrb	r0, [r1, #10]
    cab2:	7220      	strb	r0, [r4, #8]
    cab4:	8948      	ldrh	r0, [r1, #10]
    cab6:	0a00      	lsrs	r0, r0, #8
    cab8:	7260      	strb	r0, [r4, #9]
    caba:	2008      	movs	r0, #8
    cabc:	e154      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cabe:	2010      	movs	r0, #16
    cac0:	e000      	b.n	cac4 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x86>
    cac2:	201a      	movs	r0, #26
    cac4:	7020      	strb	r0, [r4, #0]
    cac6:	7908      	ldrb	r0, [r1, #4]
    cac8:	70a0      	strb	r0, [r4, #2]
    caca:	e154      	b.n	cd76 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x338>
    cacc:	7022      	strb	r2, [r4, #0]
    cace:	2002      	movs	r0, #2
    cad0:	70a0      	strb	r0, [r4, #2]
    cad2:	7908      	ldrb	r0, [r1, #4]
    cad4:	70e0      	strb	r0, [r4, #3]
    cad6:	7b88      	ldrb	r0, [r1, #14]
    cad8:	7120      	strb	r0, [r4, #4]
    cada:	7948      	ldrb	r0, [r1, #5]
    cadc:	7160      	strb	r0, [r4, #5]
    cade:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cae2:	f8c4 0006 	str.w	r0, [r4, #6]
    cae6:	8948      	ldrh	r0, [r1, #10]
    cae8:	8160      	strh	r0, [r4, #10]
    caea:	7b08      	ldrb	r0, [r1, #12]
    caec:	7320      	strb	r0, [r4, #12]
    caee:	7b0e      	ldrb	r6, [r1, #12]
    caf0:	1d0d      	adds	r5, r1, #4
    caf2:	2e1f      	cmp	r6, #31
    caf4:	d300      	bcc.n	caf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0xba>
    caf6:	261f      	movs	r6, #31
    caf8:	4618      	mov	r0, r3
    cafa:	4632      	mov	r2, r6
    cafc:	f105 010b 	add.w	r1, r5, #11
    cb00:	f7ff fdee 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cb04:	360d      	adds	r6, #13
    cb06:	7a69      	ldrb	r1, [r5, #9]
    cb08:	55a1      	strb	r1, [r4, r6]
    cb0a:	1e76      	subs	r6, r6, #1
    cb0c:	b2f0      	uxtb	r0, r6
    cb0e:	e129      	b.n	cd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    cb10:	7022      	strb	r2, [r4, #0]
    cb12:	200b      	movs	r0, #11
    cb14:	70a0      	strb	r0, [r4, #2]
    cb16:	7908      	ldrb	r0, [r1, #4]
    cb18:	70e0      	strb	r0, [r4, #3]
    cb1a:	7948      	ldrb	r0, [r1, #5]
    cb1c:	7120      	strb	r0, [r4, #4]
    cb1e:	7988      	ldrb	r0, [r1, #6]
    cb20:	7160      	strb	r0, [r4, #5]
    cb22:	f8d1 0007 	ldr.w	r0, [r1, #7]
    cb26:	f8c4 0006 	str.w	r0, [r4, #6]
    cb2a:	f8b1 000b 	ldrh.w	r0, [r1, #11]
    cb2e:	8160      	strh	r0, [r4, #10]
    cb30:	7b48      	ldrb	r0, [r1, #13]
    cb32:	7320      	strb	r0, [r4, #12]
    cb34:	f8d1 000e 	ldr.w	r0, [r1, #14]
    cb38:	f8c4 000d 	str.w	r0, [r4, #13]
    cb3c:	8a48      	ldrh	r0, [r1, #18]
    cb3e:	f8a4 0011 	strh.w	r0, [r4, #17]
    cb42:	7d08      	ldrb	r0, [r1, #20]
    cb44:	74e0      	strb	r0, [r4, #19]
    cb46:	4630      	mov	r0, r6
    cb48:	e10e      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cb4a:	4620      	mov	r0, r4
    cb4c:	f000 f98d 	bl	ce6a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>
    cb50:	e108      	b.n	cd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    cb52:	e10b      	b.n	cd6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    cb54:	7022      	strb	r2, [r4, #0]
    cb56:	200a      	movs	r0, #10
    cb58:	70a0      	strb	r0, [r4, #2]
    cb5a:	f811 0f04 	ldrb.w	r0, [r1, #4]!
    cb5e:	70e0      	strb	r0, [r4, #3]
    cb60:	7888      	ldrb	r0, [r1, #2]
    cb62:	7120      	strb	r0, [r4, #4]
    cb64:	8848      	ldrh	r0, [r1, #2]
    cb66:	0a00      	lsrs	r0, r0, #8
    cb68:	7160      	strb	r0, [r4, #5]
    cb6a:	7908      	ldrb	r0, [r1, #4]
    cb6c:	71a0      	strb	r0, [r4, #6]
    cb6e:	7948      	ldrb	r0, [r1, #5]
    cb70:	71e0      	strb	r0, [r4, #7]
    cb72:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cb76:	60a0      	str	r0, [r4, #8]
    cb78:	8948      	ldrh	r0, [r1, #10]
    cb7a:	81a0      	strh	r0, [r4, #12]
    cb7c:	68c8      	ldr	r0, [r1, #12]
    cb7e:	f8c4 000e 	str.w	r0, [r4, #14]
    cb82:	8a08      	ldrh	r0, [r1, #16]
    cb84:	8260      	strh	r0, [r4, #18]
    cb86:	f8d1 0012 	ldr.w	r0, [r1, #18]
    cb8a:	6160      	str	r0, [r4, #20]
    cb8c:	8ac8      	ldrh	r0, [r1, #22]
    cb8e:	8320      	strh	r0, [r4, #24]
    cb90:	7e08      	ldrb	r0, [r1, #24]
    cb92:	76a0      	strb	r0, [r4, #26]
    cb94:	8b08      	ldrh	r0, [r1, #24]
    cb96:	0a00      	lsrs	r0, r0, #8
    cb98:	76e0      	strb	r0, [r4, #27]
    cb9a:	7e88      	ldrb	r0, [r1, #26]
    cb9c:	7720      	strb	r0, [r4, #28]
    cb9e:	8b48      	ldrh	r0, [r1, #26]
    cba0:	0a00      	lsrs	r0, r0, #8
    cba2:	7760      	strb	r0, [r4, #29]
    cba4:	7f08      	ldrb	r0, [r1, #28]
    cba6:	77a0      	strb	r0, [r4, #30]
    cba8:	8b88      	ldrh	r0, [r1, #28]
    cbaa:	0a00      	lsrs	r0, r0, #8
    cbac:	77e0      	strb	r0, [r4, #31]
    cbae:	7f88      	ldrb	r0, [r1, #30]
    cbb0:	f884 0020 	strb.w	r0, [r4, #32]
    cbb4:	201f      	movs	r0, #31
    cbb6:	e0d7      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cbb8:	7022      	strb	r2, [r4, #0]
    cbba:	f884 b002 	strb.w	fp, [r4, #2]
    cbbe:	7908      	ldrb	r0, [r1, #4]
    cbc0:	70e0      	strb	r0, [r4, #3]
    cbc2:	8888      	ldrh	r0, [r1, #4]
    cbc4:	0a00      	lsrs	r0, r0, #8
    cbc6:	7120      	strb	r0, [r4, #4]
    cbc8:	7988      	ldrb	r0, [r1, #6]
    cbca:	e0ed      	b.n	cda8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cbcc:	7022      	strb	r2, [r4, #0]
    cbce:	2004      	movs	r0, #4
    cbd0:	70a0      	strb	r0, [r4, #2]
    cbd2:	7908      	ldrb	r0, [r1, #4]
    cbd4:	70e0      	strb	r0, [r4, #3]
    cbd6:	7988      	ldrb	r0, [r1, #6]
    cbd8:	7120      	strb	r0, [r4, #4]
    cbda:	88c8      	ldrh	r0, [r1, #6]
    cbdc:	0a00      	lsrs	r0, r0, #8
    cbde:	7160      	strb	r0, [r4, #5]
    cbe0:	6888      	ldr	r0, [r1, #8]
    cbe2:	f8c4 0006 	str.w	r0, [r4, #6]
    cbe6:	68c8      	ldr	r0, [r1, #12]
    cbe8:	f8c4 000a 	str.w	r0, [r4, #10]
    cbec:	200c      	movs	r0, #12
    cbee:	e0bb      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cbf0:	7022      	strb	r2, [r4, #0]
    cbf2:	2003      	movs	r0, #3
    cbf4:	70a0      	strb	r0, [r4, #2]
    cbf6:	7908      	ldrb	r0, [r1, #4]
    cbf8:	70e0      	strb	r0, [r4, #3]
    cbfa:	7988      	ldrb	r0, [r1, #6]
    cbfc:	7120      	strb	r0, [r4, #4]
    cbfe:	88c8      	ldrh	r0, [r1, #6]
    cc00:	0a00      	lsrs	r0, r0, #8
    cc02:	7160      	strb	r0, [r4, #5]
    cc04:	7a08      	ldrb	r0, [r1, #8]
    cc06:	71a0      	strb	r0, [r4, #6]
    cc08:	8908      	ldrh	r0, [r1, #8]
    cc0a:	0a00      	lsrs	r0, r0, #8
    cc0c:	71e0      	strb	r0, [r4, #7]
    cc0e:	7a88      	ldrb	r0, [r1, #10]
    cc10:	7220      	strb	r0, [r4, #8]
    cc12:	8948      	ldrh	r0, [r1, #10]
    cc14:	0a00      	lsrs	r0, r0, #8
    cc16:	7260      	strb	r0, [r4, #9]
    cc18:	7b08      	ldrb	r0, [r1, #12]
    cc1a:	72a0      	strb	r0, [r4, #10]
    cc1c:	8988      	ldrh	r0, [r1, #12]
    cc1e:	0a00      	lsrs	r0, r0, #8
    cc20:	72e0      	strb	r0, [r4, #11]
    cc22:	e120      	b.n	ce66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    cc24:	7022      	strb	r2, [r4, #0]
    cc26:	f884 a002 	strb.w	sl, [r4, #2]
    cc2a:	7908      	ldrb	r0, [r1, #4]
    cc2c:	70e0      	strb	r0, [r4, #3]
    cc2e:	8888      	ldrh	r0, [r1, #4]
    cc30:	0a00      	lsrs	r0, r0, #8
    cc32:	7120      	strb	r0, [r4, #4]
    cc34:	f8d1 0006 	ldr.w	r0, [r1, #6]
    cc38:	f8c4 0005 	str.w	r0, [r4, #5]
    cc3c:	f8d1 000a 	ldr.w	r0, [r1, #10]
    cc40:	f8c4 0009 	str.w	r0, [r4, #9]
    cc44:	89c8      	ldrh	r0, [r1, #14]
    cc46:	e010      	b.n	cc6a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x22c>
    cc48:	e0fa      	b.n	ce40 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x402>
    cc4a:	e0ce      	b.n	cdea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3ac>
    cc4c:	e0af      	b.n	cdae <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x370>
    cc4e:	e0da      	b.n	ce06 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3c8>
    cc50:	e0e8      	b.n	ce24 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x3e6>
    cc52:	e0a1      	b.n	cd98 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x35a>
    cc54:	e08c      	b.n	cd70 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x332>
    cc56:	e090      	b.n	cd7a <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x33c>
    cc58:	e033      	b.n	ccc2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x284>
    cc5a:	e02f      	b.n	ccbc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x27e>
    cc5c:	e043      	b.n	cce6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2a8>
    cc5e:	e03d      	b.n	ccdc <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x29e>
    cc60:	e021      	b.n	cca6 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x268>
    cc62:	e015      	b.n	cc90 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x252>
    cc64:	e008      	b.n	cc78 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x23a>
    cc66:	e004      	b.n	cc72 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x234>
    cc68:	e046      	b.n	ccf8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ba>
    cc6a:	f8a4 000d 	strh.w	r0, [r4, #13]
    cc6e:	200d      	movs	r0, #13
    cc70:	e07a      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cc72:	f884 9000 	strb.w	r9, [r4]
    cc76:	e038      	b.n	ccea <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x2ac>
    cc78:	f884 a000 	strb.w	sl, [r4]
    cc7c:	7908      	ldrb	r0, [r1, #4]
    cc7e:	70a0      	strb	r0, [r4, #2]
    cc80:	7948      	ldrb	r0, [r1, #5]
    cc82:	70e0      	strb	r0, [r4, #3]
    cc84:	f8b1 0005 	ldrh.w	r0, [r1, #5]
    cc88:	0a00      	lsrs	r0, r0, #8
    cc8a:	7120      	strb	r0, [r4, #4]
    cc8c:	79c8      	ldrb	r0, [r1, #7]
    cc8e:	e08b      	b.n	cda8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cc90:	2008      	movs	r0, #8
    cc92:	7020      	strb	r0, [r4, #0]
    cc94:	7908      	ldrb	r0, [r1, #4]
    cc96:	70a0      	strb	r0, [r4, #2]
    cc98:	7988      	ldrb	r0, [r1, #6]
    cc9a:	70e0      	strb	r0, [r4, #3]
    cc9c:	88c8      	ldrh	r0, [r1, #6]
    cc9e:	0a00      	lsrs	r0, r0, #8
    cca0:	7120      	strb	r0, [r4, #4]
    cca2:	7a08      	ldrb	r0, [r1, #8]
    cca4:	e080      	b.n	cda8 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x36a>
    cca6:	2030      	movs	r0, #48	; 0x30
    cca8:	7020      	strb	r0, [r4, #0]
    ccaa:	7908      	ldrb	r0, [r1, #4]
    ccac:	70a0      	strb	r0, [r4, #2]
    ccae:	7988      	ldrb	r0, [r1, #6]
    ccb0:	70e0      	strb	r0, [r4, #3]
    ccb2:	88c8      	ldrh	r0, [r1, #6]
    ccb4:	0a00      	lsrs	r0, r0, #8
    ccb6:	7120      	strb	r0, [r4, #4]
    ccb8:	2003      	movs	r0, #3
    ccba:	e055      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ccbc:	7022      	strb	r2, [r4, #0]
    ccbe:	2007      	movs	r0, #7
    ccc0:	e077      	b.n	cdb2 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x374>
    ccc2:	7022      	strb	r2, [r4, #0]
    ccc4:	70a7      	strb	r7, [r4, #2]
    ccc6:	7908      	ldrb	r0, [r1, #4]
    ccc8:	70e0      	strb	r0, [r4, #3]
    ccca:	7988      	ldrb	r0, [r1, #6]
    cccc:	7120      	strb	r0, [r4, #4]
    ccce:	88c8      	ldrh	r0, [r1, #6]
    ccd0:	0a00      	lsrs	r0, r0, #8
    ccd2:	7160      	strb	r0, [r4, #5]
    ccd4:	7a08      	ldrb	r0, [r1, #8]
    ccd6:	71a0      	strb	r0, [r4, #6]
    ccd8:	7a48      	ldrb	r0, [r1, #9]
    ccda:	e05a      	b.n	cd92 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x354>
    ccdc:	4620      	mov	r0, r4
    ccde:	1d09      	adds	r1, r1, #4
    cce0:	f7f7 fa12 	bl	4108 <sym_MEYOCD6AYGN6BYYH5M35H6GLLMHM6TYBBTCW2LI+0xac>
    cce4:	e03e      	b.n	cd64 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x326>
    cce6:	2057      	movs	r0, #87	; 0x57
    cce8:	7020      	strb	r0, [r4, #0]
    ccea:	7908      	ldrb	r0, [r1, #4]
    ccec:	70a0      	strb	r0, [r4, #2]
    ccee:	8888      	ldrh	r0, [r1, #4]
    ccf0:	0a00      	lsrs	r0, r0, #8
    ccf2:	70e0      	strb	r0, [r4, #3]
    ccf4:	2002      	movs	r0, #2
    ccf6:	e037      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ccf8:	7022      	strb	r2, [r4, #0]
    ccfa:	220d      	movs	r2, #13
    ccfc:	70a2      	strb	r2, [r4, #2]
    ccfe:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cd02:	70e2      	strb	r2, [r4, #3]
    cd04:	894a      	ldrh	r2, [r1, #10]
    cd06:	80a2      	strh	r2, [r4, #4]
    cd08:	784a      	ldrb	r2, [r1, #1]
    cd0a:	71a2      	strb	r2, [r4, #6]
    cd0c:	f8d1 2002 	ldr.w	r2, [r1, #2]
    cd10:	f8c4 2007 	str.w	r2, [r4, #7]
    cd14:	88ca      	ldrh	r2, [r1, #6]
    cd16:	f8a4 200b 	strh.w	r2, [r4, #11]
    cd1a:	7b0a      	ldrb	r2, [r1, #12]
    cd1c:	4620      	mov	r0, r4
    cd1e:	7362      	strb	r2, [r4, #13]
    cd20:	7b4a      	ldrb	r2, [r1, #13]
    cd22:	7382      	strb	r2, [r0, #14]
    cd24:	7b8a      	ldrb	r2, [r1, #14]
    cd26:	73c2      	strb	r2, [r0, #15]
    cd28:	7e8a      	ldrb	r2, [r1, #26]
    cd2a:	7402      	strb	r2, [r0, #16]
    cd2c:	7a4a      	ldrb	r2, [r1, #9]
    cd2e:	7442      	strb	r2, [r0, #17]
    cd30:	f8b1 2011 	ldrh.w	r2, [r1, #17]
    cd34:	f8ad 2000 	strh.w	r2, [sp]
    cd38:	8242      	strh	r2, [r0, #18]
    cd3a:	7cca      	ldrb	r2, [r1, #19]
    cd3c:	7502      	strb	r2, [r0, #20]
    cd3e:	694a      	ldr	r2, [r1, #20]
    cd40:	f8c0 2015 	str.w	r2, [r0, #21]
    cd44:	8b0a      	ldrh	r2, [r1, #24]
    cd46:	f8a0 2019 	strh.w	r2, [r0, #25]
    cd4a:	7a0a      	ldrb	r2, [r1, #8]
    cd4c:	76c2      	strb	r2, [r0, #27]
    cd4e:	7a0d      	ldrb	r5, [r1, #8]
    cd50:	2de5      	cmp	r5, #229	; 0xe5
    cd52:	d300      	bcc.n	cd56 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x318>
    cd54:	25e5      	movs	r5, #229	; 0xe5
    cd56:	462a      	mov	r2, r5
    cd58:	301c      	adds	r0, #28
    cd5a:	311c      	adds	r1, #28
    cd5c:	f7ff fcc0 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    cd60:	351a      	adds	r5, #26
    cd62:	b2e8      	uxtb	r0, r5
    cd64:	2800      	cmp	r0, #0
    cd66:	d001      	beq.n	cd6c <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32e>
    cd68:	7060      	strb	r0, [r4, #1]
    cd6a:	1c80      	adds	r0, r0, #2
    cd6c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    cd70:	7022      	strb	r2, [r4, #0]
    cd72:	f884 9002 	strb.w	r9, [r4, #2]
    cd76:	2001      	movs	r0, #1
    cd78:	e7f6      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cd7a:	7022      	strb	r2, [r4, #0]
    cd7c:	70a6      	strb	r6, [r4, #2]
    cd7e:	7908      	ldrb	r0, [r1, #4]
    cd80:	70e0      	strb	r0, [r4, #3]
    cd82:	7948      	ldrb	r0, [r1, #5]
    cd84:	7120      	strb	r0, [r4, #4]
    cd86:	7988      	ldrb	r0, [r1, #6]
    cd88:	7160      	strb	r0, [r4, #5]
    cd8a:	88c8      	ldrh	r0, [r1, #6]
    cd8c:	0a00      	lsrs	r0, r0, #8
    cd8e:	71a0      	strb	r0, [r4, #6]
    cd90:	7a08      	ldrb	r0, [r1, #8]
    cd92:	71e0      	strb	r0, [r4, #7]
    cd94:	2006      	movs	r0, #6
    cd96:	e7e7      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cd98:	7025      	strb	r5, [r4, #0]
    cd9a:	20a1      	movs	r0, #161	; 0xa1
    cd9c:	70a0      	strb	r0, [r4, #2]
    cd9e:	7908      	ldrb	r0, [r1, #4]
    cda0:	70e0      	strb	r0, [r4, #3]
    cda2:	7948      	ldrb	r0, [r1, #5]
    cda4:	7120      	strb	r0, [r4, #4]
    cda6:	2000      	movs	r0, #0
    cda8:	7160      	strb	r0, [r4, #5]
    cdaa:	2004      	movs	r0, #4
    cdac:	e7dc      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cdae:	7025      	strb	r5, [r4, #0]
    cdb0:	20a2      	movs	r0, #162	; 0xa2
    cdb2:	70a0      	strb	r0, [r4, #2]
    cdb4:	7908      	ldrb	r0, [r1, #4]
    cdb6:	70e0      	strb	r0, [r4, #3]
    cdb8:	8888      	ldrh	r0, [r1, #4]
    cdba:	0a00      	lsrs	r0, r0, #8
    cdbc:	7120      	strb	r0, [r4, #4]
    cdbe:	7988      	ldrb	r0, [r1, #6]
    cdc0:	7160      	strb	r0, [r4, #5]
    cdc2:	88c8      	ldrh	r0, [r1, #6]
    cdc4:	0a00      	lsrs	r0, r0, #8
    cdc6:	71a0      	strb	r0, [r4, #6]
    cdc8:	7a08      	ldrb	r0, [r1, #8]
    cdca:	71e0      	strb	r0, [r4, #7]
    cdcc:	8908      	ldrh	r0, [r1, #8]
    cdce:	0a00      	lsrs	r0, r0, #8
    cdd0:	7220      	strb	r0, [r4, #8]
    cdd2:	7a88      	ldrb	r0, [r1, #10]
    cdd4:	7260      	strb	r0, [r4, #9]
    cdd6:	8948      	ldrh	r0, [r1, #10]
    cdd8:	0a00      	lsrs	r0, r0, #8
    cdda:	72a0      	strb	r0, [r4, #10]
    cddc:	7b08      	ldrb	r0, [r1, #12]
    cdde:	72e0      	strb	r0, [r4, #11]
    cde0:	8988      	ldrh	r0, [r1, #12]
    cde2:	0a00      	lsrs	r0, r0, #8
    cde4:	7320      	strb	r0, [r4, #12]
    cde6:	200b      	movs	r0, #11
    cde8:	e7be      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    cdea:	7025      	strb	r5, [r4, #0]
    cdec:	20a3      	movs	r0, #163	; 0xa3
    cdee:	70a0      	strb	r0, [r4, #2]
    cdf0:	7908      	ldrb	r0, [r1, #4]
    cdf2:	70e0      	strb	r0, [r4, #3]
    cdf4:	8888      	ldrh	r0, [r1, #4]
    cdf6:	0a00      	lsrs	r0, r0, #8
    cdf8:	7120      	strb	r0, [r4, #4]
    cdfa:	7988      	ldrb	r0, [r1, #6]
    cdfc:	7160      	strb	r0, [r4, #5]
    cdfe:	79c8      	ldrb	r0, [r1, #7]
    ce00:	71a0      	strb	r0, [r4, #6]
    ce02:	2005      	movs	r0, #5
    ce04:	e7b0      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ce06:	7022      	strb	r2, [r4, #0]
    ce08:	f884 e002 	strb.w	lr, [r4, #2]
    ce0c:	7908      	ldrb	r0, [r1, #4]
    ce0e:	70e0      	strb	r0, [r4, #3]
    ce10:	7948      	ldrb	r0, [r1, #5]
    ce12:	7120      	strb	r0, [r4, #4]
    ce14:	f8d1 0006 	ldr.w	r0, [r1, #6]
    ce18:	f8c4 0005 	str.w	r0, [r4, #5]
    ce1c:	8948      	ldrh	r0, [r1, #10]
    ce1e:	f8a4 0009 	strh.w	r0, [r4, #9]
    ce22:	e020      	b.n	ce66 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x428>
    ce24:	7025      	strb	r5, [r4, #0]
    ce26:	20a4      	movs	r0, #164	; 0xa4
    ce28:	70a0      	strb	r0, [r4, #2]
    ce2a:	7908      	ldrb	r0, [r1, #4]
    ce2c:	70e0      	strb	r0, [r4, #3]
    ce2e:	8888      	ldrh	r0, [r1, #4]
    ce30:	0a00      	lsrs	r0, r0, #8
    ce32:	7120      	strb	r0, [r4, #4]
    ce34:	7988      	ldrb	r0, [r1, #6]
    ce36:	7160      	strb	r0, [r4, #5]
    ce38:	79c8      	ldrb	r0, [r1, #7]
    ce3a:	71a0      	strb	r0, [r4, #6]
    ce3c:	2007      	movs	r0, #7
    ce3e:	e793      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>
    ce40:	7025      	strb	r5, [r4, #0]
    ce42:	2080      	movs	r0, #128	; 0x80
    ce44:	70a0      	strb	r0, [r4, #2]
    ce46:	888a      	ldrh	r2, [r1, #4]
    ce48:	f8a4 2003 	strh.w	r2, [r4, #3]
    ce4c:	88ca      	ldrh	r2, [r1, #6]
    ce4e:	f8a4 2005 	strh.w	r2, [r4, #5]
    ce52:	7a0a      	ldrb	r2, [r1, #8]
    ce54:	71e2      	strb	r2, [r4, #7]
    ce56:	7a4a      	ldrb	r2, [r1, #9]
    ce58:	8122      	strh	r2, [r4, #8]
    ce5a:	7a8a      	ldrb	r2, [r1, #10]
    ce5c:	72a2      	strb	r2, [r4, #10]
    ce5e:	7ac9      	ldrb	r1, [r1, #11]
    ce60:	f001 0101 	and.w	r1, r1, #1
    ce64:	72e1      	strb	r1, [r4, #11]
    ce66:	200a      	movs	r0, #10
    ce68:	e77e      	b.n	cd68 <sym_XMQQMVD4MD6DRWNW2DWSCGOMJHFY3IX7NXUHTGI+0x32a>

0000ce6a <sym_QMF6WGBSHHRI7BTYKZGNY3YBGTOTAZDDWYJFVQQ>:
    ce6a:	223e      	movs	r2, #62	; 0x3e
    ce6c:	7002      	strb	r2, [r0, #0]
    ce6e:	2201      	movs	r2, #1
    ce70:	7082      	strb	r2, [r0, #2]
    ce72:	790a      	ldrb	r2, [r1, #4]
    ce74:	70c2      	strb	r2, [r0, #3]
    ce76:	798a      	ldrb	r2, [r1, #6]
    ce78:	7102      	strb	r2, [r0, #4]
    ce7a:	88ca      	ldrh	r2, [r1, #6]
    ce7c:	0a12      	lsrs	r2, r2, #8
    ce7e:	7142      	strb	r2, [r0, #5]
    ce80:	7a0a      	ldrb	r2, [r1, #8]
    ce82:	7182      	strb	r2, [r0, #6]
    ce84:	7a4a      	ldrb	r2, [r1, #9]
    ce86:	71c2      	strb	r2, [r0, #7]
    ce88:	f8d1 200a 	ldr.w	r2, [r1, #10]
    ce8c:	6082      	str	r2, [r0, #8]
    ce8e:	89ca      	ldrh	r2, [r1, #14]
    ce90:	8182      	strh	r2, [r0, #12]
    ce92:	7c0a      	ldrb	r2, [r1, #16]
    ce94:	7382      	strb	r2, [r0, #14]
    ce96:	8a0a      	ldrh	r2, [r1, #16]
    ce98:	0a12      	lsrs	r2, r2, #8
    ce9a:	73c2      	strb	r2, [r0, #15]
    ce9c:	7c8a      	ldrb	r2, [r1, #18]
    ce9e:	7402      	strb	r2, [r0, #16]
    cea0:	8a4a      	ldrh	r2, [r1, #18]
    cea2:	0a12      	lsrs	r2, r2, #8
    cea4:	7442      	strb	r2, [r0, #17]
    cea6:	7d0a      	ldrb	r2, [r1, #20]
    cea8:	7482      	strb	r2, [r0, #18]
    ceaa:	8a8a      	ldrh	r2, [r1, #20]
    ceac:	0a12      	lsrs	r2, r2, #8
    ceae:	74c2      	strb	r2, [r0, #19]
    ceb0:	7d89      	ldrb	r1, [r1, #22]
    ceb2:	7501      	strb	r1, [r0, #20]
    ceb4:	2013      	movs	r0, #19
    ceb6:	4770      	bx	lr

0000ceb8 <sym_3TBFCFZXCYDY6GUKVOWTISOQWWIRT2CJTYIBX5Y>:
    ceb8:	223e      	movs	r2, #62	; 0x3e
    ceba:	7002      	strb	r2, [r0, #0]
    cebc:	2201      	movs	r2, #1
    cebe:	7082      	strb	r2, [r0, #2]
    cec0:	f811 2f04 	ldrb.w	r2, [r1, #4]!
    cec4:	70c2      	strb	r2, [r0, #3]
    cec6:	788a      	ldrb	r2, [r1, #2]
    cec8:	7102      	strb	r2, [r0, #4]
    ceca:	884a      	ldrh	r2, [r1, #2]
    cecc:	0a12      	lsrs	r2, r2, #8
    cece:	7142      	strb	r2, [r0, #5]
    ced0:	790a      	ldrb	r2, [r1, #4]
    ced2:	7182      	strb	r2, [r0, #6]
    ced4:	794a      	ldrb	r2, [r1, #5]
    ced6:	71c2      	strb	r2, [r0, #7]
    ced8:	f8d1 2006 	ldr.w	r2, [r1, #6]
    cedc:	6082      	str	r2, [r0, #8]
    cede:	894a      	ldrh	r2, [r1, #10]
    cee0:	8182      	strh	r2, [r0, #12]
    cee2:	7e0a      	ldrb	r2, [r1, #24]
    cee4:	7382      	strb	r2, [r0, #14]
    cee6:	8b0a      	ldrh	r2, [r1, #24]
    cee8:	0a12      	lsrs	r2, r2, #8
    ceea:	73c2      	strb	r2, [r0, #15]
    ceec:	7e8a      	ldrb	r2, [r1, #26]
    ceee:	7402      	strb	r2, [r0, #16]
    cef0:	8b4a      	ldrh	r2, [r1, #26]
    cef2:	0a12      	lsrs	r2, r2, #8
    cef4:	7442      	strb	r2, [r0, #17]
    cef6:	7f0a      	ldrb	r2, [r1, #28]
    cef8:	7482      	strb	r2, [r0, #18]
    cefa:	8b8a      	ldrh	r2, [r1, #28]
    cefc:	0a12      	lsrs	r2, r2, #8
    cefe:	74c2      	strb	r2, [r0, #19]
    cf00:	7f89      	ldrb	r1, [r1, #30]
    cf02:	7501      	strb	r1, [r0, #20]
    cf04:	2113      	movs	r1, #19
    cf06:	7041      	strb	r1, [r0, #1]
    cf08:	4608      	mov	r0, r1
    cf0a:	4770      	bx	lr

0000cf0c <sdc_hci_data_get>:
    cf0c:	b510      	push	{r4, lr}
    cf0e:	b120      	cbz	r0, cf1a <sdc_hci_data_get+0xe>
    cf10:	f7ff fd11 	bl	c936 <sym_J4YPB5V427LGVECR3WQM2YMQSYACGT77QKJSI3I>
    cf14:	b120      	cbz	r0, cf20 <sdc_hci_data_get+0x14>
    cf16:	2000      	movs	r0, #0
    cf18:	bd10      	pop	{r4, pc}
    cf1a:	f06f 0015 	mvn.w	r0, #21
    cf1e:	bd10      	pop	{r4, pc}
    cf20:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cf24:	bd10      	pop	{r4, pc}

0000cf26 <sdc_hci_data_put>:
    cf26:	b510      	push	{r4, lr}
    cf28:	f06f 0415 	mvn.w	r4, #21
    cf2c:	b120      	cbz	r0, cf38 <sdc_hci_data_put+0x12>
    cf2e:	f7ff fd10 	bl	c952 <sym_PVKZWZJ5CJJGE5FITE5FOMMY5J4BUV2COWMQKSY>
    cf32:	b108      	cbz	r0, cf38 <sdc_hci_data_put+0x12>
    cf34:	2000      	movs	r0, #0
    cf36:	bd10      	pop	{r4, pc}
    cf38:	4620      	mov	r0, r4
    cf3a:	bd10      	pop	{r4, pc}

0000cf3c <sdc_hci_evt_get>:
    cf3c:	b510      	push	{r4, lr}
    cf3e:	b120      	cbz	r0, cf4a <sdc_hci_evt_get+0xe>
    cf40:	f7ff fd10 	bl	c964 <sym_DUIEI4YTK3TJQ2V3W7PLOGVTWVPNDBBG4WJWTAQ>
    cf44:	b120      	cbz	r0, cf50 <sdc_hci_evt_get+0x14>
    cf46:	2000      	movs	r0, #0
    cf48:	bd10      	pop	{r4, pc}
    cf4a:	f06f 0015 	mvn.w	r0, #21
    cf4e:	bd10      	pop	{r4, pc}
    cf50:	f06f 0022 	mvn.w	r0, #34	; 0x22
    cf54:	bd10      	pop	{r4, pc}

0000cf56 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>:
    cf56:	f002 b98e 	b.w	f276 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>

0000cf5a <sdc_hci_cmd_cb_read_transmit_power_level>:
    cf5a:	f002 b9cd 	b.w	f2f8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>

0000cf5e <sdc_hci_cmd_cb_set_event_mask>:
    cf5e:	b510      	push	{r4, lr}
    cf60:	f7f7 f930 	bl	41c4 <sym_TU2SMBIUC7JL6C3K2XB6727DQLBLV5LEGIMZAFQ>
    cf64:	2000      	movs	r0, #0
    cf66:	bd10      	pop	{r4, pc}

0000cf68 <sdc_hci_cmd_cb_set_event_mask_page_2>:
    cf68:	b510      	push	{r4, lr}
    cf6a:	f7f7 f939 	bl	41e0 <sym_CIVMWIRGIOQ374UFFPIFNN4ZGKYK2FRKTT6YRYA>
    cf6e:	2000      	movs	r0, #0
    cf70:	bd10      	pop	{r4, pc}

0000cf72 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>:
    cf72:	f002 b9dd 	b.w	f330 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>

0000cf76 <sdc_hci_cmd_vs_conn_event_extend>:
    cf76:	b508      	push	{r3, lr}
    cf78:	7800      	ldrb	r0, [r0, #0]
    cf7a:	f88d 0000 	strb.w	r0, [sp]
    cf7e:	4668      	mov	r0, sp
    cf80:	f002 f94b 	bl	f21a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>
    cf84:	bd08      	pop	{r3, pc}

0000cf86 <sdc_hci_cmd_vs_conn_update>:
    cf86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    cf88:	2100      	movs	r1, #0
    cf8a:	9100      	str	r1, [sp, #0]
    cf8c:	9101      	str	r1, [sp, #4]
    cf8e:	9102      	str	r1, [sp, #8]
    cf90:	9103      	str	r1, [sp, #12]
    cf92:	f8d0 1002 	ldr.w	r1, [r0, #2]
    cf96:	f641 524c 	movw	r2, #7500	; 0x1d4c
    cf9a:	4291      	cmp	r1, r2
    cf9c:	d304      	bcc.n	cfa8 <sdc_hci_cmd_vs_conn_update+0x22>
    cf9e:	f240 42e2 	movw	r2, #1250	; 0x4e2
    cfa2:	fbb1 f1f2 	udiv	r1, r1, r2
    cfa6:	e005      	b.n	cfb4 <sdc_hci_cmd_vs_conn_update+0x2e>
    cfa8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    cfac:	fbb1 f1f2 	udiv	r1, r1, r2
    cfb0:	f501 6150 	add.w	r1, r1, #3328	; 0xd00
    cfb4:	8802      	ldrh	r2, [r0, #0]
    cfb6:	b289      	uxth	r1, r1
    cfb8:	f8ad 2000 	strh.w	r2, [sp]
    cfbc:	f8ad 1002 	strh.w	r1, [sp, #2]
    cfc0:	f8ad 1004 	strh.w	r1, [sp, #4]
    cfc4:	88c1      	ldrh	r1, [r0, #6]
    cfc6:	f8ad 1006 	strh.w	r1, [sp, #6]
    cfca:	8900      	ldrh	r0, [r0, #8]
    cfcc:	f8ad 0008 	strh.w	r0, [sp, #8]
    cfd0:	4668      	mov	r0, sp
    cfd2:	f001 fed9 	bl	ed88 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>
    cfd6:	b004      	add	sp, #16
    cfd8:	bd10      	pop	{r4, pc}

0000cfda <sdc_hci_cmd_vs_event_length_set>:
    cfda:	f7fd be43 	b.w	ac64 <sym_DVVOECRRYK6EAGDREB2UKKQZT5MAOOUK66XNPTA>

0000cfde <sdc_hci_cmd_vs_llpm_mode_set>:
    cfde:	2001      	movs	r0, #1
    cfe0:	4770      	bx	lr

0000cfe2 <sdc_hci_cmd_vs_qos_conn_event_report_enable>:
    cfe2:	7800      	ldrb	r0, [r0, #0]
    cfe4:	b100      	cbz	r0, cfe8 <sdc_hci_cmd_vs_qos_conn_event_report_enable+0x6>
    cfe6:	2001      	movs	r0, #1
    cfe8:	f002 b8ef 	b.w	f1ca <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>

0000cfec <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>:
    cfec:	b570      	push	{r4, r5, r6, lr}
    cfee:	4605      	mov	r5, r0
    cff0:	2210      	movs	r2, #16
    cff2:	2100      	movs	r1, #0
    cff4:	f7ff fbee 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    cff8:	2210      	movs	r2, #16
    cffa:	2100      	movs	r1, #0
    cffc:	f105 0010 	add.w	r0, r5, #16
    d000:	f7ff fbe8 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d004:	f04f 5480 	mov.w	r4, #268435456	; 0x10000000
    d008:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
    d00c:	1c40      	adds	r0, r0, #1
    d00e:	d10b      	bne.n	d028 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d010:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d014:	1c40      	adds	r0, r0, #1
    d016:	d107      	bne.n	d028 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d018:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
    d01c:	1c40      	adds	r0, r0, #1
    d01e:	d103      	bne.n	d028 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x3c>
    d020:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
    d024:	1c40      	adds	r0, r0, #1
    d026:	d00b      	beq.n	d040 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x54>
    d028:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
    d02c:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
    d030:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
    d034:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
    d038:	612a      	str	r2, [r5, #16]
    d03a:	6168      	str	r0, [r5, #20]
    d03c:	61a9      	str	r1, [r5, #24]
    d03e:	61eb      	str	r3, [r5, #28]
    d040:	2000      	movs	r0, #0
    d042:	f7f7 fdbb 	bl	4bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d046:	b918      	cbnz	r0, d050 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x64>
    d048:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    d04c:	07c0      	lsls	r0, r0, #31
    d04e:	d118      	bne.n	d082 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d050:	f8d4 0090 	ldr.w	r0, [r4, #144]	; 0x90
    d054:	1c40      	adds	r0, r0, #1
    d056:	d10b      	bne.n	d070 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d058:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    d05c:	1c40      	adds	r0, r0, #1
    d05e:	d107      	bne.n	d070 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d060:	f8d4 0098 	ldr.w	r0, [r4, #152]	; 0x98
    d064:	1c40      	adds	r0, r0, #1
    d066:	d103      	bne.n	d070 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x84>
    d068:	f8d4 009c 	ldr.w	r0, [r4, #156]	; 0x9c
    d06c:	1c40      	adds	r0, r0, #1
    d06e:	d008      	beq.n	d082 <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots+0x96>
    d070:	f854 0f90 	ldr.w	r0, [r4, #144]!
    d074:	6861      	ldr	r1, [r4, #4]
    d076:	68a2      	ldr	r2, [r4, #8]
    d078:	68e3      	ldr	r3, [r4, #12]
    d07a:	6028      	str	r0, [r5, #0]
    d07c:	6069      	str	r1, [r5, #4]
    d07e:	60aa      	str	r2, [r5, #8]
    d080:	60eb      	str	r3, [r5, #12]
    d082:	2000      	movs	r0, #0
    d084:	bd70      	pop	{r4, r5, r6, pc}

0000d086 <sdc_hci_cmd_vs_zephyr_read_static_addresses>:
    d086:	b538      	push	{r3, r4, r5, lr}
    d088:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    d08c:	4604      	mov	r4, r0
    d08e:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d092:	1c40      	adds	r0, r0, #1
    d094:	d105      	bne.n	d0a2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x1c>
    d096:	f8d5 00a8 	ldr.w	r0, [r5, #168]	; 0xa8
    d09a:	43c0      	mvns	r0, r0
    d09c:	0400      	lsls	r0, r0, #16
    d09e:	0c00      	lsrs	r0, r0, #16
    d0a0:	d03e      	beq.n	d120 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d0a2:	f8d5 00a0 	ldr.w	r0, [r5, #160]	; 0xa0
    d0a6:	07c0      	lsls	r0, r0, #31
    d0a8:	d03a      	beq.n	d120 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x9a>
    d0aa:	f8d5 00a4 	ldr.w	r0, [r5, #164]	; 0xa4
    d0ae:	f8d5 10a8 	ldr.w	r1, [r5, #168]	; 0xa8
    d0b2:	f8ad 1000 	strh.w	r1, [sp]
    d0b6:	f8c4 0001 	str.w	r0, [r4, #1]
    d0ba:	f8bd 0000 	ldrh.w	r0, [sp]
    d0be:	f8a4 0005 	strh.w	r0, [r4, #5]
    d0c2:	79a0      	ldrb	r0, [r4, #6]
    d0c4:	f040 00c0 	orr.w	r0, r0, #192	; 0xc0
    d0c8:	71a0      	strb	r0, [r4, #6]
    d0ca:	f8d5 0090 	ldr.w	r0, [r5, #144]	; 0x90
    d0ce:	1c40      	adds	r0, r0, #1
    d0d0:	d00f      	beq.n	d0f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d0d2:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    d0d6:	1c40      	adds	r0, r0, #1
    d0d8:	d00b      	beq.n	d0f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d0da:	f8d5 0098 	ldr.w	r0, [r5, #152]	; 0x98
    d0de:	1c40      	adds	r0, r0, #1
    d0e0:	d007      	beq.n	d0f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d0e2:	f8d5 009c 	ldr.w	r0, [r5, #156]	; 0x9c
    d0e6:	1c40      	adds	r0, r0, #1
    d0e8:	d003      	beq.n	d0f2 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x6c>
    d0ea:	2000      	movs	r0, #0
    d0ec:	f7f7 fd66 	bl	4bbc <sym_AO3U45UEGFLUPMT565ZR5UWUQUONF5AKILLCT3A>
    d0f0:	b140      	cbz	r0, d104 <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x7e>
    d0f2:	2210      	movs	r2, #16
    d0f4:	2100      	movs	r1, #0
    d0f6:	1de0      	adds	r0, r4, #7
    d0f8:	f7ff fb6c 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d0fc:	2001      	movs	r0, #1
    d0fe:	7020      	strb	r0, [r4, #0]
    d100:	2000      	movs	r0, #0
    d102:	bd38      	pop	{r3, r4, r5, pc}
    d104:	f855 2f90 	ldr.w	r2, [r5, #144]!
    d108:	6869      	ldr	r1, [r5, #4]
    d10a:	68a8      	ldr	r0, [r5, #8]
    d10c:	68eb      	ldr	r3, [r5, #12]
    d10e:	f8c4 2007 	str.w	r2, [r4, #7]
    d112:	f8c4 100b 	str.w	r1, [r4, #11]
    d116:	f8c4 000f 	str.w	r0, [r4, #15]
    d11a:	f8c4 3013 	str.w	r3, [r4, #19]
    d11e:	e7ed      	b.n	d0fc <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x76>
    d120:	2000      	movs	r0, #0
    d122:	e7ec      	b.n	d0fe <sdc_hci_cmd_vs_zephyr_read_static_addresses+0x78>

0000d124 <sdc_hci_cmd_vs_zephyr_write_bd_addr>:
    d124:	f002 b86b 	b.w	f1fe <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>

0000d128 <sdc_hci_cmd_ip_read_bd_addr>:
    d128:	f002 b8b6 	b.w	f298 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>

0000d12c <sdc_hci_cmd_ip_read_local_version_information>:
    d12c:	f7fd bde6 	b.w	acfc <sym_VBKW2EEGTD4JJSNUU73GLQHLYR7TWOGYRMQYZEY>

0000d130 <sdc_hci_cmd_le_add_device_to_resolving_list>:
    d130:	f001 bde1 	b.w	ecf6 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>

0000d134 <sdc_hci_cmd_le_add_device_to_white_list>:
    d134:	f001 bdfa 	b.w	ed2c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>

0000d138 <sdc_hci_cmd_le_clear_resolving_list>:
    d138:	f001 be0f 	b.w	ed5a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>

0000d13c <sdc_hci_cmd_le_clear_white_list>:
    d13c:	f001 be1a 	b.w	ed74 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>

0000d140 <sdc_hci_cmd_le_conn_update>:
    d140:	f001 be22 	b.w	ed88 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>

0000d144 <sdc_hci_cmd_le_create_conn>:
    d144:	f7fd bb30 	b.w	a7a8 <sym_OVTAYAIM2HXXC4KB536GUWKDN6XBONTMDU2FIEA>

0000d148 <sdc_hci_cmd_le_create_conn_cancel>:
    d148:	f001 be60 	b.w	ee0c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>

0000d14c <sdc_hci_cmd_le_enable_encryption>:
    d14c:	f001 bff4 	b.w	f138 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>

0000d150 <sdc_hci_cmd_le_encrypt>:
    d150:	f001 be84 	b.w	ee5c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>

0000d154 <sdc_hci_cmd_le_rand>:
    d154:	f001 be8b 	b.w	ee6e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>

0000d158 <sdc_hci_cmd_le_read_buffer_size>:
    d158:	f7fd bb80 	b.w	a85c <sym_Y5RIWFUVP4FHJFYC7FBZKM2MV7INK43TLWQ5URA>

0000d15c <sdc_hci_cmd_le_read_channel_map>:
    d15c:	f7fd bb88 	b.w	a870 <sym_PAQFQMAKUCMOA6SUTJ7CAX3DYCWNAJLJQFJCDNY>

0000d160 <sdc_hci_cmd_le_read_max_data_length>:
    d160:	f001 be8b 	b.w	ee7a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>

0000d164 <sdc_hci_cmd_le_read_phy>:
    d164:	f001 be99 	b.w	ee9a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>

0000d168 <sdc_hci_cmd_le_read_remote_features>:
    d168:	f7fd bbac 	b.w	a8c4 <sym_CT735EXQUXWPD7TNRP2WWTA3LGLYUEOZMPS7RMI>

0000d16c <sdc_hci_cmd_le_read_resolving_list_size>:
    d16c:	f001 bec0 	b.w	eef0 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>

0000d170 <sdc_hci_cmd_le_read_suggested_default_data_length>:
    d170:	f7fd bbcc 	b.w	a90c <sym_THL6EKGE7AKTO5JDGU45MV33YSIXORBRMDECS2Q>

0000d174 <sdc_hci_cmd_le_read_transmit_power>:
    d174:	f001 bec0 	b.w	eef8 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>

0000d178 <sdc_hci_cmd_le_read_white_list_size>:
    d178:	f001 bec7 	b.w	ef0a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>

0000d17c <sdc_hci_cmd_le_remove_device_from_resolving_list>:
    d17c:	f001 bec9 	b.w	ef12 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>

0000d180 <sdc_hci_cmd_le_remove_device_from_white_list>:
    d180:	f001 bee0 	b.w	ef44 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>

0000d184 <sdc_hci_cmd_le_set_address_resolution_enable>:
    d184:	f001 bef3 	b.w	ef6e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>

0000d188 <sdc_hci_cmd_le_set_data_length>:
    d188:	f001 beff 	b.w	ef8a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>

0000d18c <sdc_hci_cmd_le_set_default_phy>:
    d18c:	f7fd bbce 	b.w	a92c <sym_4POEZKL66A5T3356722OWKNB5CNFKPMV6JI3HEA>

0000d190 <sdc_hci_cmd_le_set_event_mask>:
    d190:	b510      	push	{r4, lr}
    d192:	f7f7 f811 	bl	41b8 <sym_PPT6FEOF2T6DRALMCRRTUI7CHLEPBAN25HYV3KQ>
    d196:	2000      	movs	r0, #0
    d198:	bd10      	pop	{r4, pc}

0000d19a <sdc_hci_cmd_le_set_host_channel_classification>:
    d19a:	f001 bf1d 	b.w	efd8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>

0000d19e <sdc_hci_cmd_le_set_phy>:
    d19e:	f001 bf3b 	b.w	f018 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>

0000d1a2 <sdc_hci_cmd_le_set_privacy_mode>:
    d1a2:	f001 bf59 	b.w	f058 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>

0000d1a6 <sdc_hci_cmd_le_set_random_address>:
    d1a6:	f001 bf6d 	b.w	f084 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>

0000d1aa <sdc_hci_cmd_le_set_resolvable_private_address_timeout>:
    d1aa:	f001 bf79 	b.w	f0a0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>

0000d1ae <sdc_hci_cmd_le_set_scan_enable>:
    d1ae:	f001 bf80 	b.w	f0b2 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>

0000d1b2 <sdc_hci_cmd_le_set_scan_params>:
    d1b2:	f001 bf94 	b.w	f0de <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>

0000d1b6 <sdc_hci_cmd_le_write_suggested_default_data_length>:
    d1b6:	f001 bff1 	b.w	f19c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>

0000d1ba <sdc_hci_cmd_lc_disconnect>:
    d1ba:	f001 bd4b 	b.w	ec54 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>

0000d1be <sdc_hci_cmd_lc_read_remote_version_information>:
    d1be:	f002 b877 	b.w	f2b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>
    d1c2:	b570      	push	{r4, r5, r6, lr}
    d1c4:	880b      	ldrh	r3, [r1, #0]
    d1c6:	7f04      	ldrb	r4, [r0, #28]
    d1c8:	f100 0524 	add.w	r5, r0, #36	; 0x24
    d1cc:	f423 4600 	bic.w	r6, r3, #32768	; 0x8000
    d1d0:	8802      	ldrh	r2, [r0, #0]
    d1d2:	4435      	add	r5, r6
    d1d4:	1da4      	adds	r4, r4, #6
    d1d6:	882d      	ldrh	r5, [r5, #0]
    d1d8:	4422      	add	r2, r4
    d1da:	b292      	uxth	r2, r2
    d1dc:	4425      	add	r5, r4
    d1de:	1e54      	subs	r4, r2, #1
    d1e0:	442c      	add	r4, r5
    d1e2:	fb94 f4f2 	sdiv	r4, r4, r2
    d1e6:	fb02 6204 	mla	r2, r2, r4, r6
    d1ea:	8840      	ldrh	r0, [r0, #2]
    d1ec:	b292      	uxth	r2, r2
    d1ee:	4290      	cmp	r0, r2
    d1f0:	d903      	bls.n	d1fa <sdc_hci_cmd_lc_read_remote_version_information+0x3c>
    d1f2:	f403 4000 	and.w	r0, r3, #32768	; 0x8000
    d1f6:	4310      	orrs	r0, r2
    d1f8:	e002      	b.n	d200 <sdc_hci_cmd_lc_read_remote_version_information+0x42>
    d1fa:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    d1fe:	4398      	bics	r0, r3
    d200:	8008      	strh	r0, [r1, #0]
    d202:	bd70      	pop	{r4, r5, r6, pc}
    d204:	f420 4200 	bic.w	r2, r0, #32768	; 0x8000
    d208:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d20c:	429a      	cmp	r2, r3
    d20e:	d107      	bne.n	d220 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d210:	f400 4000 	and.w	r0, r0, #32768	; 0x8000
    d214:	f401 4100 	and.w	r1, r1, #32768	; 0x8000
    d218:	4288      	cmp	r0, r1
    d21a:	d001      	beq.n	d220 <sdc_hci_cmd_lc_read_remote_version_information+0x62>
    d21c:	2001      	movs	r0, #1
    d21e:	4770      	bx	lr
    d220:	2000      	movs	r0, #0
    d222:	4770      	bx	lr

0000d224 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>:
    d224:	b570      	push	{r4, r5, r6, lr}
    d226:	7f00      	ldrb	r0, [r0, #28]
    d228:	461c      	mov	r4, r3
    d22a:	1d80      	adds	r0, r0, #6
    d22c:	4408      	add	r0, r1
    d22e:	4613      	mov	r3, r2
    d230:	8809      	ldrh	r1, [r1, #0]
    d232:	9a04      	ldr	r2, [sp, #16]
    d234:	1cc9      	adds	r1, r1, #3
    d236:	b289      	uxth	r1, r1
    d238:	1915      	adds	r5, r2, r4
    d23a:	1ec0      	subs	r0, r0, #3
    d23c:	428d      	cmp	r5, r1
    d23e:	d805      	bhi.n	d24c <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x28>
    d240:	1881      	adds	r1, r0, r2
    d242:	4622      	mov	r2, r4
    d244:	4618      	mov	r0, r3
    d246:	f7ff fa4b 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d24a:	e000      	b.n	d24e <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q+0x2a>
    d24c:	2400      	movs	r4, #0
    d24e:	4620      	mov	r0, r4
    d250:	bd70      	pop	{r4, r5, r6, pc}

0000d252 <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q>:
    d252:	b570      	push	{r4, r5, r6, lr}
    d254:	7f00      	ldrb	r0, [r0, #28]
    d256:	461c      	mov	r4, r3
    d258:	1d80      	adds	r0, r0, #6
    d25a:	4408      	add	r0, r1
    d25c:	4613      	mov	r3, r2
    d25e:	8809      	ldrh	r1, [r1, #0]
    d260:	9a04      	ldr	r2, [sp, #16]
    d262:	1cc9      	adds	r1, r1, #3
    d264:	b289      	uxth	r1, r1
    d266:	1915      	adds	r5, r2, r4
    d268:	1ec0      	subs	r0, r0, #3
    d26a:	428d      	cmp	r5, r1
    d26c:	d805      	bhi.n	d27a <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x28>
    d26e:	4410      	add	r0, r2
    d270:	4622      	mov	r2, r4
    d272:	4619      	mov	r1, r3
    d274:	f7ff fa34 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d278:	e000      	b.n	d27c <sym_KYAZRCYN475PHPCZD6L3YCVO72SQVA3SBOAY44Q+0x2a>
    d27a:	2400      	movs	r4, #0
    d27c:	4620      	mov	r0, r4
    d27e:	bd70      	pop	{r4, r5, r6, pc}

0000d280 <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI>:
    d280:	8881      	ldrh	r1, [r0, #4]
    d282:	88c0      	ldrh	r0, [r0, #6]
    d284:	4288      	cmp	r0, r1
    d286:	d101      	bne.n	d28c <sym_B62EJKCCJ4JFC5I4BFTUJG7GNOKGWQ4KKFBS6RI+0xc>
    d288:	2001      	movs	r0, #1
    d28a:	4770      	bx	lr
    d28c:	2000      	movs	r0, #0
    d28e:	4770      	bx	lr

0000d290 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>:
    d290:	8881      	ldrh	r1, [r0, #4]
    d292:	8900      	ldrh	r0, [r0, #8]
    d294:	4288      	cmp	r0, r1
    d296:	d101      	bne.n	d29c <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI+0xc>
    d298:	2001      	movs	r0, #1
    d29a:	4770      	bx	lr
    d29c:	2000      	movs	r0, #0
    d29e:	4770      	bx	lr

0000d2a0 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA>:
    d2a0:	b570      	push	{r4, r5, r6, lr}
    d2a2:	4604      	mov	r4, r0
    d2a4:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d2a8:	8880      	ldrh	r0, [r0, #4]
    d2aa:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d2ae:	4401      	add	r1, r0
    d2b0:	8a20      	ldrh	r0, [r4, #16]
    d2b2:	2800      	cmp	r0, #0
    d2b4:	d01a      	beq.n	d2ec <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x4c>
    d2b6:	89a2      	ldrh	r2, [r4, #12]
    d2b8:	2500      	movs	r5, #0
    d2ba:	4410      	add	r0, r2
    d2bc:	b280      	uxth	r0, r0
    d2be:	81a0      	strh	r0, [r4, #12]
    d2c0:	880a      	ldrh	r2, [r1, #0]
    d2c2:	4290      	cmp	r0, r2
    d2c4:	d905      	bls.n	d2d2 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x32>
    d2c6:	f240 1163 	movw	r1, #355	; 0x163
    d2ca:	f04f 0014 	mov.w	r0, #20
    d2ce:	f7f6 fdf7 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d2d2:	d109      	bne.n	d2e8 <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x48>
    d2d4:	69a0      	ldr	r0, [r4, #24]
    d2d6:	b108      	cbz	r0, d2dc <sym_UOYZDE3MDLGPDL5S5WKUFLPYH4DJIMF3BJSBDYA+0x3c>
    d2d8:	7f40      	ldrb	r0, [r0, #29]
    d2da:	7088      	strb	r0, [r1, #2]
    d2dc:	f104 0104 	add.w	r1, r4, #4
    d2e0:	4620      	mov	r0, r4
    d2e2:	f7ff ff6e 	bl	d1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d2e6:	81a5      	strh	r5, [r4, #12]
    d2e8:	8225      	strh	r5, [r4, #16]
    d2ea:	2001      	movs	r0, #1
    d2ec:	bd70      	pop	{r4, r5, r6, pc}

0000d2ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>:
    d2ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d2f0:	4604      	mov	r4, r0
    d2f2:	f100 0324 	add.w	r3, r0, #36	; 0x24
    d2f6:	88c0      	ldrh	r0, [r0, #6]
    d2f8:	460e      	mov	r6, r1
    d2fa:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d2fe:	8a60      	ldrh	r0, [r4, #18]
    d300:	19d9      	adds	r1, r3, r7
    d302:	b108      	cbz	r0, d308 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1a>
    d304:	42b0      	cmp	r0, r6
    d306:	d201      	bcs.n	d30c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x1e>
    d308:	2000      	movs	r0, #0
    d30a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d30c:	89e0      	ldrh	r0, [r4, #14]
    d30e:	2500      	movs	r5, #0
    d310:	b140      	cbz	r0, d324 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x36>
    d312:	f8b1 c000 	ldrh.w	ip, [r1]
    d316:	4560      	cmp	r0, ip
    d318:	d008      	beq.n	d32c <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x3e>
    d31a:	f240 214b 	movw	r1, #587	; 0x24b
    d31e:	2014      	movs	r0, #20
    d320:	f7f6 fdce 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d324:	7f60      	ldrb	r0, [r4, #29]
    d326:	7088      	strb	r0, [r1, #2]
    d328:	800d      	strh	r5, [r1, #0]
    d32a:	e00e      	b.n	d34a <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x5c>
    d32c:	f894 c01c 	ldrb.w	ip, [r4, #28]
    d330:	4418      	add	r0, r3
    d332:	f10c 0c06 	add.w	ip, ip, #6
    d336:	44bc      	add	ip, r7
    d338:	4460      	add	r0, ip
    d33a:	f8b4 c01e 	ldrh.w	ip, [r4, #30]
    d33e:	f820 cc03 	strh.w	ip, [r0, #-3]
    d342:	f894 c020 	ldrb.w	ip, [r4, #32]
    d346:	f800 cc01 	strb.w	ip, [r0, #-1]
    d34a:	89e0      	ldrh	r0, [r4, #14]
    d34c:	4430      	add	r0, r6
    d34e:	81e0      	strh	r0, [r4, #14]
    d350:	8808      	ldrh	r0, [r1, #0]
    d352:	4430      	add	r0, r6
    d354:	8008      	strh	r0, [r1, #0]
    d356:	b19a      	cbz	r2, d380 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0x92>
    d358:	1da1      	adds	r1, r4, #6
    d35a:	4620      	mov	r0, r4
    d35c:	f7ff ff31 	bl	d1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d360:	81e5      	strh	r5, [r4, #14]
    d362:	7f60      	ldrb	r0, [r4, #29]
    d364:	1c40      	adds	r0, r0, #1
    d366:	7760      	strb	r0, [r4, #29]
    d368:	7da0      	ldrb	r0, [r4, #22]
    d36a:	f88d 0000 	strb.w	r0, [sp]
    d36e:	9800      	ldr	r0, [sp, #0]
    d370:	9000      	str	r0, [sp, #0]
    d372:	f89d 0000 	ldrb.w	r0, [sp]
    d376:	b178      	cbz	r0, d398 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d378:	88e0      	ldrh	r0, [r4, #6]
    d37a:	82a0      	strh	r0, [r4, #20]
    d37c:	75a5      	strb	r5, [r4, #22]
    d37e:	e00b      	b.n	d398 <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y+0xaa>
    d380:	7f20      	ldrb	r0, [r4, #28]
    d382:	89e1      	ldrh	r1, [r4, #14]
    d384:	1d80      	adds	r0, r0, #6
    d386:	4438      	add	r0, r7
    d388:	4419      	add	r1, r3
    d38a:	4408      	add	r0, r1
    d38c:	f830 1d03 	ldrh.w	r1, [r0, #-3]!
    d390:	83e1      	strh	r1, [r4, #30]
    d392:	7880      	ldrb	r0, [r0, #2]
    d394:	f884 0020 	strb.w	r0, [r4, #32]
    d398:	8265      	strh	r5, [r4, #18]
    d39a:	2001      	movs	r0, #1
    d39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d39e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>:
    d39e:	1cc0      	adds	r0, r0, #3
    d3a0:	4770      	bx	lr

0000d3a2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>:
    d3a2:	b510      	push	{r4, lr}
    d3a4:	88c2      	ldrh	r2, [r0, #6]
    d3a6:	8943      	ldrh	r3, [r0, #10]
    d3a8:	f422 4100 	bic.w	r1, r2, #32768	; 0x8000
    d3ac:	f423 4400 	bic.w	r4, r3, #32768	; 0x8000
    d3b0:	1a61      	subs	r1, r4, r1
    d3b2:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
    d3b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    d3ba:	429a      	cmp	r2, r3
    d3bc:	d101      	bne.n	d3c2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY+0x20>
    d3be:	8842      	ldrh	r2, [r0, #2]
    d3c0:	4411      	add	r1, r2
    d3c2:	7f02      	ldrb	r2, [r0, #28]
    d3c4:	8800      	ldrh	r0, [r0, #0]
    d3c6:	4410      	add	r0, r2
    d3c8:	1d80      	adds	r0, r0, #6
    d3ca:	b280      	uxth	r0, r0
    d3cc:	fb91 f0f0 	sdiv	r0, r1, r0
    d3d0:	b280      	uxth	r0, r0
    d3d2:	bd10      	pop	{r4, pc}

0000d3d4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>:
    d3d4:	b510      	push	{r4, lr}
    d3d6:	4604      	mov	r4, r0
    d3d8:	88c0      	ldrh	r0, [r0, #6]
    d3da:	88a1      	ldrh	r1, [r4, #4]
    d3dc:	4281      	cmp	r1, r0
    d3de:	d007      	beq.n	d3f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d3e0:	89a0      	ldrh	r0, [r4, #12]
    d3e2:	b928      	cbnz	r0, d3f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d3e4:	8a20      	ldrh	r0, [r4, #16]
    d3e6:	b918      	cbnz	r0, d3f0 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x1c>
    d3e8:	88a0      	ldrh	r0, [r4, #4]
    d3ea:	8aa1      	ldrh	r1, [r4, #20]
    d3ec:	4288      	cmp	r0, r1
    d3ee:	d101      	bne.n	d3f4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ+0x20>
    d3f0:	2000      	movs	r0, #0
    d3f2:	bd10      	pop	{r4, pc}
    d3f4:	1d21      	adds	r1, r4, #4
    d3f6:	4620      	mov	r0, r4
    d3f8:	f7ff fee3 	bl	d1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d3fc:	2000      	movs	r0, #0
    d3fe:	8220      	strh	r0, [r4, #16]
    d400:	2001      	movs	r0, #1
    d402:	bd10      	pop	{r4, pc}

0000d404 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ>:
    d404:	b510      	push	{r4, lr}
    d406:	4604      	mov	r4, r0
    d408:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d40c:	88c0      	ldrh	r0, [r0, #6]
    d40e:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d412:	4402      	add	r2, r0
    d414:	8820      	ldrh	r0, [r4, #0]
    d416:	2845      	cmp	r0, #69	; 0x45
    d418:	d200      	bcs.n	d41c <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x18>
    d41a:	2045      	movs	r0, #69	; 0x45
    d41c:	4288      	cmp	r0, r1
    d41e:	d204      	bcs.n	d42a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x26>
    d420:	f240 1119 	movw	r1, #281	; 0x119
    d424:	2014      	movs	r0, #20
    d426:	f7f6 fd4b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d42a:	7de0      	ldrb	r0, [r4, #23]
    d42c:	2800      	cmp	r0, #0
    d42e:	d003      	beq.n	d438 <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x34>
    d430:	8810      	ldrh	r0, [r2, #0]
    d432:	4288      	cmp	r0, r1
    d434:	d201      	bcs.n	d43a <sym_TDLIKQLE652KPCFAMYL33G6BKGPHRLYLWNEOTHQ+0x36>
    d436:	2000      	movs	r0, #0
    d438:	bd10      	pop	{r4, pc}
    d43a:	8011      	strh	r1, [r2, #0]
    d43c:	1da1      	adds	r1, r4, #6
    d43e:	4620      	mov	r0, r4
    d440:	f7ff febf 	bl	d1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d444:	2000      	movs	r0, #0
    d446:	75e0      	strb	r0, [r4, #23]
    d448:	2001      	movs	r0, #1
    d44a:	bd10      	pop	{r4, pc}

0000d44c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI>:
    d44c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d450:	8941      	ldrh	r1, [r0, #10]
    d452:	8886      	ldrh	r6, [r0, #4]
    d454:	4604      	mov	r4, r0
    d456:	2500      	movs	r5, #0
    d458:	f100 070a 	add.w	r7, r0, #10
    d45c:	e006      	b.n	d46c <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x20>
    d45e:	4639      	mov	r1, r7
    d460:	4620      	mov	r0, r4
    d462:	f7ff feae 	bl	d1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d466:	1c6d      	adds	r5, r5, #1
    d468:	8961      	ldrh	r1, [r4, #10]
    d46a:	b2ad      	uxth	r5, r5
    d46c:	42b1      	cmp	r1, r6
    d46e:	d1f6      	bne.n	d45e <sym_AGKH6DJXHZN325DC6K3C4NU6N7PERJHJNP4AFDI+0x12>
    d470:	4628      	mov	r0, r5
    d472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d476 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>:
    d476:	b530      	push	{r4, r5, lr}
    d478:	88c4      	ldrh	r4, [r0, #6]
    d47a:	8881      	ldrh	r1, [r0, #4]
    d47c:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d480:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d484:	4413      	add	r3, r2
    d486:	8882      	ldrh	r2, [r0, #4]
    d488:	8a85      	ldrh	r5, [r0, #20]
    d48a:	42aa      	cmp	r2, r5
    d48c:	d012      	beq.n	d4b4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d48e:	42a1      	cmp	r1, r4
    d490:	d010      	beq.n	d4b4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d492:	8981      	ldrh	r1, [r0, #12]
    d494:	b971      	cbnz	r1, d4b4 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x3e>
    d496:	6982      	ldr	r2, [r0, #24]
    d498:	b172      	cbz	r2, d4b8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d49a:	4610      	mov	r0, r2
    d49c:	f7ff fef8 	bl	d290 <sym_WHJLTAWCA7L5AI7ZKZA7BNI7MYWDHIXTL45XGEI>
    d4a0:	b950      	cbnz	r0, d4b8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d4a2:	8910      	ldrh	r0, [r2, #8]
    d4a4:	3224      	adds	r2, #36	; 0x24
    d4a6:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
    d4aa:	4410      	add	r0, r2
    d4ac:	7899      	ldrb	r1, [r3, #2]
    d4ae:	7880      	ldrb	r0, [r0, #2]
    d4b0:	4288      	cmp	r0, r1
    d4b2:	d101      	bne.n	d4b8 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I+0x42>
    d4b4:	2000      	movs	r0, #0
    d4b6:	bd30      	pop	{r4, r5, pc}
    d4b8:	4618      	mov	r0, r3
    d4ba:	bd30      	pop	{r4, r5, pc}

0000d4bc <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>:
    d4bc:	8803      	ldrh	r3, [r0, #0]
    d4be:	2b45      	cmp	r3, #69	; 0x45
    d4c0:	d200      	bcs.n	d4c4 <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA+0x8>
    d4c2:	2345      	movs	r3, #69	; 0x45
    d4c4:	8013      	strh	r3, [r2, #0]
    d4c6:	88c2      	ldrh	r2, [r0, #6]
    d4c8:	f422 4300 	bic.w	r3, r2, #32768	; 0x8000
    d4cc:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d4d0:	441a      	add	r2, r3
    d4d2:	600a      	str	r2, [r1, #0]
    d4d4:	89c0      	ldrh	r0, [r0, #14]
    d4d6:	4770      	bx	lr

0000d4d8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>:
    d4d8:	7f00      	ldrb	r0, [r0, #28]
    d4da:	1d80      	adds	r0, r0, #6
    d4dc:	4408      	add	r0, r1
    d4de:	1ec0      	subs	r0, r0, #3
    d4e0:	6010      	str	r0, [r2, #0]
    d4e2:	8808      	ldrh	r0, [r1, #0]
    d4e4:	4770      	bx	lr

0000d4e6 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY>:
    d4e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d4ea:	460e      	mov	r6, r1
    d4ec:	88c1      	ldrh	r1, [r0, #6]
    d4ee:	8902      	ldrh	r2, [r0, #8]
    d4f0:	4604      	mov	r4, r0
    d4f2:	f100 0824 	add.w	r8, r0, #36	; 0x24
    d4f6:	8800      	ldrh	r0, [r0, #0]
    d4f8:	f421 4500 	bic.w	r5, r1, #32768	; 0x8000
    d4fc:	f422 4700 	bic.w	r7, r2, #32768	; 0x8000
    d500:	2845      	cmp	r0, #69	; 0x45
    d502:	d200      	bcs.n	d506 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x20>
    d504:	2045      	movs	r0, #69	; 0x45
    d506:	42b0      	cmp	r0, r6
    d508:	d203      	bcs.n	d512 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x2c>
    d50a:	21db      	movs	r1, #219	; 0xdb
    d50c:	2014      	movs	r0, #20
    d50e:	f7f6 fcd7 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d512:	4610      	mov	r0, r2
    d514:	f7ff fe76 	bl	d204 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d518:	b110      	cbz	r0, d520 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x3a>
    d51a:	2000      	movs	r0, #0
    d51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d520:	42af      	cmp	r7, r5
    d522:	d908      	bls.n	d536 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d524:	7f21      	ldrb	r1, [r4, #28]
    d526:	1b78      	subs	r0, r7, r5
    d528:	1a40      	subs	r0, r0, r1
    d52a:	1f80      	subs	r0, r0, #6
    d52c:	4286      	cmp	r6, r0
    d52e:	dd02      	ble.n	d536 <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x50>
    d530:	2000      	movs	r0, #0
    d532:	75e0      	strb	r0, [r4, #23]
    d534:	e7f1      	b.n	d51a <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x34>
    d536:	eb08 0005 	add.w	r0, r8, r5
    d53a:	2101      	movs	r1, #1
    d53c:	8006      	strh	r6, [r0, #0]
    d53e:	75e1      	strb	r1, [r4, #23]
    d540:	e7ec      	b.n	d51c <sym_XCF2HHS4DO2JW2ILCF4RJW66HXXYOROBK7NUPMY+0x36>

0000d542 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY>:
    d542:	b538      	push	{r3, r4, r5, lr}
    d544:	88c4      	ldrh	r4, [r0, #6]
    d546:	8881      	ldrh	r1, [r0, #4]
    d548:	f100 0224 	add.w	r2, r0, #36	; 0x24
    d54c:	f421 4300 	bic.w	r3, r1, #32768	; 0x8000
    d550:	441a      	add	r2, r3
    d552:	42a1      	cmp	r1, r4
    d554:	d010      	beq.n	d578 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d556:	8983      	ldrh	r3, [r0, #12]
    d558:	8a05      	ldrh	r5, [r0, #16]
    d55a:	8812      	ldrh	r2, [r2, #0]
    d55c:	442b      	add	r3, r5
    d55e:	4293      	cmp	r3, r2
    d560:	d308      	bcc.n	d574 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x32>
    d562:	f8ad 1000 	strh.w	r1, [sp]
    d566:	4669      	mov	r1, sp
    d568:	f7ff fe2b 	bl	d1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d56c:	f8bd 0000 	ldrh.w	r0, [sp]
    d570:	42a0      	cmp	r0, r4
    d572:	d001      	beq.n	d578 <sym_4WKKRRMMNLQOCTRGC2MVIREG5QOCFUEL67TBUQY+0x36>
    d574:	2001      	movs	r0, #1
    d576:	bd38      	pop	{r3, r4, r5, pc}
    d578:	2000      	movs	r0, #0
    d57a:	bd38      	pop	{r3, r4, r5, pc}

0000d57c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>:
    d57c:	b570      	push	{r4, r5, r6, lr}
    d57e:	88c6      	ldrh	r6, [r0, #6]
    d580:	8885      	ldrh	r5, [r0, #4]
    d582:	4603      	mov	r3, r0
    d584:	f100 0424 	add.w	r4, r0, #36	; 0x24
    d588:	f425 4000 	bic.w	r0, r5, #32768	; 0x8000
    d58c:	4420      	add	r0, r4
    d58e:	42b5      	cmp	r5, r6
    d590:	d102      	bne.n	d598 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x1c>
    d592:	2000      	movs	r0, #0
    d594:	8218      	strh	r0, [r3, #16]
    d596:	bd70      	pop	{r4, r5, r6, pc}
    d598:	8804      	ldrh	r4, [r0, #0]
    d59a:	899d      	ldrh	r5, [r3, #12]
    d59c:	7f1e      	ldrb	r6, [r3, #28]
    d59e:	1b64      	subs	r4, r4, r5
    d5a0:	4435      	add	r5, r6
    d5a2:	4428      	add	r0, r5
    d5a4:	880d      	ldrh	r5, [r1, #0]
    d5a6:	b2a4      	uxth	r4, r4
    d5a8:	1cc0      	adds	r0, r0, #3
    d5aa:	42a5      	cmp	r5, r4
    d5ac:	d900      	bls.n	d5b0 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x34>
    d5ae:	800c      	strh	r4, [r1, #0]
    d5b0:	899c      	ldrh	r4, [r3, #12]
    d5b2:	b124      	cbz	r4, d5be <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x42>
    d5b4:	2400      	movs	r4, #0
    d5b6:	7014      	strb	r4, [r2, #0]
    d5b8:	8809      	ldrh	r1, [r1, #0]
    d5ba:	8219      	strh	r1, [r3, #16]
    d5bc:	bd70      	pop	{r4, r5, r6, pc}
    d5be:	2401      	movs	r4, #1
    d5c0:	e7f9      	b.n	d5b6 <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI+0x3a>

0000d5c2 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY>:
    d5c2:	b508      	push	{r3, lr}
    d5c4:	8a81      	ldrh	r1, [r0, #20]
    d5c6:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d5ca:	3aff      	subs	r2, #255	; 0xff
    d5cc:	d008      	beq.n	d5e0 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x1e>
    d5ce:	7d82      	ldrb	r2, [r0, #22]
    d5d0:	f88d 2000 	strb.w	r2, [sp]
    d5d4:	9a00      	ldr	r2, [sp, #0]
    d5d6:	9200      	str	r2, [sp, #0]
    d5d8:	f89d 2000 	ldrb.w	r2, [sp]
    d5dc:	b952      	cbnz	r2, d5f4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d5de:	e004      	b.n	d5ea <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x28>
    d5e0:	f44f 7162 	mov.w	r1, #904	; 0x388
    d5e4:	2014      	movs	r0, #20
    d5e6:	f7f6 fc6b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d5ea:	8880      	ldrh	r0, [r0, #4]
    d5ec:	4281      	cmp	r1, r0
    d5ee:	d101      	bne.n	d5f4 <sym_ZOHQLKBCZOR3A7YQVK6MVD6IEOARIBONHUTW4FY+0x32>
    d5f0:	2000      	movs	r0, #0
    d5f2:	bd08      	pop	{r3, pc}
    d5f4:	2001      	movs	r0, #1
    d5f6:	bd08      	pop	{r3, pc}

0000d5f8 <sym_4Z7443SGSMJBRM7TLEVRIFXZXBZ34MHB7IK5ETY>:
    d5f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    d5fc:	8281      	strh	r1, [r0, #20]
    d5fe:	2100      	movs	r1, #0
    d600:	7581      	strb	r1, [r0, #22]
    d602:	4770      	bx	lr

0000d604 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ>:
    d604:	b510      	push	{r4, lr}
    d606:	8a81      	ldrh	r1, [r0, #20]
    d608:	f5a1 427f 	sub.w	r2, r1, #65280	; 0xff00
    d60c:	3aff      	subs	r2, #255	; 0xff
    d60e:	d004      	beq.n	d61a <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x16>
    d610:	f44f 7159 	mov.w	r1, #868	; 0x364
    d614:	2014      	movs	r0, #20
    d616:	f7f6 fc53 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d61a:	88c1      	ldrh	r1, [r0, #6]
    d61c:	8281      	strh	r1, [r0, #20]
    d61e:	89c1      	ldrh	r1, [r0, #14]
    d620:	b109      	cbz	r1, d626 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x22>
    d622:	2101      	movs	r1, #1
    d624:	e000      	b.n	d628 <sym_56BVXVVSYPZZTDFBHBV4MJAFTYIS7HMITNWUEZQ+0x24>
    d626:	2100      	movs	r1, #0
    d628:	7581      	strb	r1, [r0, #22]
    d62a:	bd10      	pop	{r4, pc}

0000d62c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ>:
    d62c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d630:	461d      	mov	r5, r3
    d632:	4616      	mov	r6, r2
    d634:	9f06      	ldr	r7, [sp, #24]
    d636:	460b      	mov	r3, r1
    d638:	4604      	mov	r4, r0
    d63a:	463a      	mov	r2, r7
    d63c:	4629      	mov	r1, r5
    d63e:	4630      	mov	r0, r6
    d640:	f000 f84f 	bl	d6e2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d644:	4283      	cmp	r3, r0
    d646:	d201      	bcs.n	d64c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x20>
    d648:	21a8      	movs	r1, #168	; 0xa8
    d64a:	e018      	b.n	d67e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d64c:	1ce0      	adds	r0, r4, #3
    d64e:	f020 0103 	bic.w	r1, r0, #3
    d652:	4620      	mov	r0, r4
    d654:	42a1      	cmp	r1, r4
    d656:	d001      	beq.n	d65c <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x30>
    d658:	21a9      	movs	r1, #169	; 0xa9
    d65a:	e010      	b.n	d67e <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x52>
    d65c:	2224      	movs	r2, #36	; 0x24
    d65e:	2100      	movs	r1, #0
    d660:	f7ff f8b8 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d664:	f64f 70ff 	movw	r0, #65535	; 0xffff
    d668:	82a0      	strh	r0, [r4, #20]
    d66a:	19a8      	adds	r0, r5, r6
    d66c:	1d80      	adds	r0, r0, #6
    d66e:	4378      	muls	r0, r7
    d670:	b280      	uxth	r0, r0
    d672:	7725      	strb	r5, [r4, #28]
    d674:	8060      	strh	r0, [r4, #2]
    d676:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
    d67a:	d903      	bls.n	d684 <sym_A7PVZLRTORLFMETW3GOBE4DG32WTH46LP2SW5QQ+0x58>
    d67c:	21af      	movs	r1, #175	; 0xaf
    d67e:	2014      	movs	r0, #20
    d680:	f7f6 fc1e 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d684:	8026      	strh	r6, [r4, #0]
    d686:	2000      	movs	r0, #0
    d688:	7760      	strb	r0, [r4, #29]
    d68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000d68e <sym_SSKIYGWPVDNEN7KR2D37H7PSUNCWATTS2JUNCZI>:
    d68e:	6181      	str	r1, [r0, #24]
    d690:	6188      	str	r0, [r1, #24]
    d692:	4770      	bx	lr

0000d694 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>:
    d694:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d698:	460b      	mov	r3, r1
    d69a:	4604      	mov	r4, r0
    d69c:	f100 0124 	add.w	r1, r0, #36	; 0x24
    d6a0:	8905      	ldrh	r5, [r0, #8]
    d6a2:	8946      	ldrh	r6, [r0, #10]
    d6a4:	8880      	ldrh	r0, [r0, #4]
    d6a6:	f425 4700 	bic.w	r7, r5, #32768	; 0x8000
    d6aa:	4439      	add	r1, r7
    d6ac:	460f      	mov	r7, r1
    d6ae:	4285      	cmp	r5, r0
    d6b0:	d102      	bne.n	d6b8 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x24>
    d6b2:	2000      	movs	r0, #0
    d6b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    d6b8:	b10a      	cbz	r2, d6be <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x2a>
    d6ba:	1cc8      	adds	r0, r1, #3
    d6bc:	6010      	str	r0, [r2, #0]
    d6be:	b123      	cbz	r3, d6ca <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x36>
    d6c0:	7f22      	ldrb	r2, [r4, #28]
    d6c2:	1cf9      	adds	r1, r7, #3
    d6c4:	4618      	mov	r0, r3
    d6c6:	f7ff f80b 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d6ca:	883f      	ldrh	r7, [r7, #0]
    d6cc:	f104 0108 	add.w	r1, r4, #8
    d6d0:	4620      	mov	r0, r4
    d6d2:	f7ff fd76 	bl	d1c2 <sdc_hci_cmd_lc_read_remote_version_information+0x4>
    d6d6:	42b5      	cmp	r5, r6
    d6d8:	d101      	bne.n	d6de <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x4a>
    d6da:	8920      	ldrh	r0, [r4, #8]
    d6dc:	8160      	strh	r0, [r4, #10]
    d6de:	4638      	mov	r0, r7
    d6e0:	e7e8      	b.n	d6b4 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II+0x20>

0000d6e2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>:
    d6e2:	4401      	add	r1, r0
    d6e4:	1d89      	adds	r1, r1, #6
    d6e6:	4351      	muls	r1, r2
    d6e8:	b28a      	uxth	r2, r1
    d6ea:	2100      	movs	r1, #0
    d6ec:	2845      	cmp	r0, #69	; 0x45
    d6ee:	d201      	bcs.n	d6f4 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY+0x12>
    d6f0:	f1c0 0145 	rsb	r1, r0, #69	; 0x45
    d6f4:	3224      	adds	r2, #36	; 0x24
    d6f6:	1850      	adds	r0, r2, r1
    d6f8:	b280      	uxth	r0, r0
    d6fa:	4770      	bx	lr

0000d6fc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>:
    d6fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d700:	4688      	mov	r8, r1
    d702:	88c1      	ldrh	r1, [r0, #6]
    d704:	4604      	mov	r4, r0
    d706:	8900      	ldrh	r0, [r0, #8]
    d708:	f421 4600 	bic.w	r6, r1, #32768	; 0x8000
    d70c:	f104 0524 	add.w	r5, r4, #36	; 0x24
    d710:	f420 4700 	bic.w	r7, r0, #32768	; 0x8000
    d714:	eb05 0906 	add.w	r9, r5, r6
    d718:	f7ff fd74 	bl	d204 <sdc_hci_cmd_lc_read_remote_version_information+0x46>
    d71c:	2200      	movs	r2, #0
    d71e:	b998      	cbnz	r0, d748 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x4c>
    d720:	8820      	ldrh	r0, [r4, #0]
    d722:	2845      	cmp	r0, #69	; 0x45
    d724:	d200      	bcs.n	d728 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x2c>
    d726:	2045      	movs	r0, #69	; 0x45
    d728:	42b7      	cmp	r7, r6
    d72a:	d906      	bls.n	d73a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d72c:	7f23      	ldrb	r3, [r4, #28]
    d72e:	1bb9      	subs	r1, r7, r6
    d730:	1ac9      	subs	r1, r1, r3
    d732:	1f89      	subs	r1, r1, #6
    d734:	4281      	cmp	r1, r0
    d736:	da00      	bge.n	d73a <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x3e>
    d738:	4608      	mov	r0, r1
    d73a:	89e1      	ldrh	r1, [r4, #14]
    d73c:	b111      	cbz	r1, d744 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x48>
    d73e:	f8b9 3000 	ldrh.w	r3, [r9]
    d742:	1ac0      	subs	r0, r0, r3
    d744:	4540      	cmp	r0, r8
    d746:	da03      	bge.n	d750 <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x54>
    d748:	8262      	strh	r2, [r4, #18]
    d74a:	2000      	movs	r0, #0
    d74c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d750:	7f20      	ldrb	r0, [r4, #28]
    d752:	4429      	add	r1, r5
    d754:	1d80      	adds	r0, r0, #6
    d756:	4430      	add	r0, r6
    d758:	4408      	add	r0, r1
    d75a:	f8a4 8012 	strh.w	r8, [r4, #18]
    d75e:	1ec0      	subs	r0, r0, #3
    d760:	e7f4      	b.n	d74c <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI+0x50>

0000d762 <sym_W4P456NK4DQPUF5QVP3W7JSFZJTVGAOKAMSTNSQ>:
    d762:	2100      	movs	r1, #0
    d764:	81c1      	strh	r1, [r0, #14]
    d766:	8241      	strh	r1, [r0, #18]
    d768:	7581      	strb	r1, [r0, #22]
    d76a:	4770      	bx	lr

0000d76c <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ>:
    d76c:	b570      	push	{r4, r5, r6, lr}
    d76e:	2300      	movs	r3, #0
    d770:	2908      	cmp	r1, #8
    d772:	d204      	bcs.n	d77e <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x12>
    d774:	f240 11cb 	movw	r1, #459	; 0x1cb
    d778:	2015      	movs	r0, #21
    d77a:	f7f6 fba1 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d77e:	6802      	ldr	r2, [r0, #0]
    d780:	b90a      	cbnz	r2, d786 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x1a>
    d782:	e01e      	b.n	d7c2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d784:	4610      	mov	r0, r2
    d786:	6802      	ldr	r2, [r0, #0]
    d788:	8893      	ldrh	r3, [r2, #4]
    d78a:	428b      	cmp	r3, r1
    d78c:	d002      	beq.n	d794 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x28>
    d78e:	6813      	ldr	r3, [r2, #0]
    d790:	2b00      	cmp	r3, #0
    d792:	d1f7      	bne.n	d784 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x18>
    d794:	8894      	ldrh	r4, [r2, #4]
    d796:	4613      	mov	r3, r2
    d798:	428c      	cmp	r4, r1
    d79a:	d101      	bne.n	d7a0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x34>
    d79c:	6811      	ldr	r1, [r2, #0]
    d79e:	e00d      	b.n	d7bc <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x50>
    d7a0:	f101 0508 	add.w	r5, r1, #8
    d7a4:	b2ae      	uxth	r6, r5
    d7a6:	2500      	movs	r5, #0
    d7a8:	42b4      	cmp	r4, r6
    d7aa:	d309      	bcc.n	d7c0 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x54>
    d7ac:	1a64      	subs	r4, r4, r1
    d7ae:	4411      	add	r1, r2
    d7b0:	600d      	str	r5, [r1, #0]
    d7b2:	808c      	strh	r4, [r1, #4]
    d7b4:	6802      	ldr	r2, [r0, #0]
    d7b6:	6812      	ldr	r2, [r2, #0]
    d7b8:	6002      	str	r2, [r0, #0]
    d7ba:	600a      	str	r2, [r1, #0]
    d7bc:	6001      	str	r1, [r0, #0]
    d7be:	e000      	b.n	d7c2 <sym_JTNP7UFMKYWSFCHJEA5IASO3QVW3HK4YV6YOJYQ+0x56>
    d7c0:	2300      	movs	r3, #0
    d7c2:	4618      	mov	r0, r3
    d7c4:	bd70      	pop	{r4, r5, r6, pc}

0000d7c6 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY>:
    d7c6:	b510      	push	{r4, lr}
    d7c8:	000c      	movs	r4, r1
    d7ca:	d006      	beq.n	d7da <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x14>
    d7cc:	2c08      	cmp	r4, #8
    d7ce:	d209      	bcs.n	d7e4 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1e>
    d7d0:	f240 1195 	movw	r1, #405	; 0x195
    d7d4:	2015      	movs	r0, #21
    d7d6:	f7f6 fb73 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d7da:	b108      	cbz	r0, d7e0 <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x1a>
    d7dc:	2100      	movs	r1, #0
    d7de:	6001      	str	r1, [r0, #0]
    d7e0:	2000      	movs	r0, #0
    d7e2:	bd10      	pop	{r4, pc}
    d7e4:	b118      	cbz	r0, d7ee <sym_T2KVJXUKBW7E6DZMIXB2ENUQYG6P2TBYLXO3PAY+0x28>
    d7e6:	b2a1      	uxth	r1, r4
    d7e8:	6800      	ldr	r0, [r0, #0]
    d7ea:	f000 f814 	bl	d816 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>
    d7ee:	1d20      	adds	r0, r4, #4
    d7f0:	bd10      	pop	{r4, pc}

0000d7f2 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY>:
    d7f2:	2100      	movs	r1, #0
    d7f4:	6802      	ldr	r2, [r0, #0]
    d7f6:	e003      	b.n	d800 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0xe>
    d7f8:	8893      	ldrh	r3, [r2, #4]
    d7fa:	6812      	ldr	r2, [r2, #0]
    d7fc:	4419      	add	r1, r3
    d7fe:	b289      	uxth	r1, r1
    d800:	2a00      	cmp	r2, #0
    d802:	d1f9      	bne.n	d7f8 <sym_4FRIF7JGOVTE7JZ3KYQVPKX5PKSXGKCIHE6GQDY+0x6>
    d804:	f000 b807 	b.w	d816 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A+0xe>

0000d808 <sym_B627VJPECYREV5OY4VJ652ISBA4XGPKVOUJ747A>:
    d808:	2300      	movs	r3, #0
    d80a:	600b      	str	r3, [r1, #0]
    d80c:	808a      	strh	r2, [r1, #4]
    d80e:	6802      	ldr	r2, [r0, #0]
    d810:	600a      	str	r2, [r1, #0]
    d812:	6001      	str	r1, [r0, #0]
    d814:	4770      	bx	lr
    d816:	2300      	movs	r3, #0
    d818:	6043      	str	r3, [r0, #4]
    d81a:	1d02      	adds	r2, r0, #4
    d81c:	8101      	strh	r1, [r0, #8]
    d81e:	6002      	str	r2, [r0, #0]
    d820:	4770      	bx	lr

0000d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>:
    d822:	f5a0 427f 	sub.w	r2, r0, #65280	; 0xff00
    d826:	3aff      	subs	r2, #255	; 0xff
    d828:	d000      	beq.n	d82c <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xa>
    d82a:	b109      	cbz	r1, d830 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI+0xe>
    d82c:	2000      	movs	r0, #0
    d82e:	4770      	bx	lr
    d830:	f7f6 be26 	b.w	4480 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0xc4>

0000d834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>:
    d834:	b570      	push	{r4, r5, r6, lr}
    d836:	4605      	mov	r5, r0
    d838:	460c      	mov	r4, r1
    d83a:	4608      	mov	r0, r1
    d83c:	f000 f854 	bl	d8e8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>
    d840:	b108      	cbz	r0, d846 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x12>
    d842:	2010      	movs	r0, #16
    d844:	bd70      	pop	{r4, r5, r6, pc}
    d846:	b10d      	cbz	r5, d84c <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x18>
    d848:	2007      	movs	r0, #7
    d84a:	bd70      	pop	{r4, r5, r6, pc}
    d84c:	7025      	strb	r5, [r4, #0]
    d84e:	2000      	movs	r0, #0
    d850:	8060      	strh	r0, [r4, #2]
    d852:	bd70      	pop	{r4, r5, r6, pc}
    d854:	b510      	push	{r4, lr}
    d856:	4604      	mov	r4, r0
    d858:	f7f6 fe5e 	bl	4518 <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY+0x15c>
    d85c:	42a0      	cmp	r0, r4
    d85e:	d901      	bls.n	d864 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY+0x30>
    d860:	2001      	movs	r0, #1
    d862:	bd10      	pop	{r4, pc}
    d864:	2000      	movs	r0, #0
    d866:	bd10      	pop	{r4, pc}
    d868:	4770      	bx	lr

0000d86a <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY>:
    d86a:	b570      	push	{r4, r5, r6, lr}
    d86c:	460e      	mov	r6, r1
    d86e:	461d      	mov	r5, r3
    d870:	4611      	mov	r1, r2
    d872:	f000 f811 	bl	d898 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x2e>
    d876:	4604      	mov	r4, r0
    d878:	4629      	mov	r1, r5
    d87a:	4630      	mov	r0, r6
    d87c:	f000 f803 	bl	d886 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x1c>
    d880:	4420      	add	r0, r4
    d882:	1d00      	adds	r0, r0, #4
    d884:	bd70      	pop	{r4, r5, r6, pc}
    d886:	b510      	push	{r4, lr}
    d888:	460a      	mov	r2, r1
    d88a:	2101      	movs	r1, #1
    d88c:	f7ff ff29 	bl	d6e2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d890:	1cc0      	adds	r0, r0, #3
    d892:	f020 0003 	bic.w	r0, r0, #3
    d896:	bd10      	pop	{r4, pc}
    d898:	b510      	push	{r4, lr}
    d89a:	460a      	mov	r2, r1
    d89c:	2101      	movs	r1, #1
    d89e:	f7ff ff20 	bl	d6e2 <sym_E56LW5YVGUG6HP2OML5URHI7K2KCWX5ULQKQOKY>
    d8a2:	1cc0      	adds	r0, r0, #3
    d8a4:	f020 0003 	bic.w	r0, r0, #3
    d8a8:	bd10      	pop	{r4, pc}
    d8aa:	2800      	cmp	r0, #0
    d8ac:	db09      	blt.n	d8c2 <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x58>
    d8ae:	f000 021f 	and.w	r2, r0, #31
    d8b2:	2101      	movs	r1, #1
    d8b4:	4091      	lsls	r1, r2
    d8b6:	0940      	lsrs	r0, r0, #5
    d8b8:	0080      	lsls	r0, r0, #2
    d8ba:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    d8be:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    d8c2:	4770      	bx	lr
    d8c4:	5840      	ldr	r0, [r0, r1]
    d8c6:	2800      	cmp	r0, #0
    d8c8:	d000      	beq.n	d8cc <sym_WDNTHBFS7DQM3AR7WDCR7ZEICFH5ZM5PJ35BRPY+0x62>
    d8ca:	2001      	movs	r0, #1
    d8cc:	4770      	bx	lr

0000d8ce <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>:
    d8ce:	f7f6 bfe9 	b.w	48a4 <sym_2ZCOT6ZEUU54S36NE627GOZVLBS26AFIUJKNLBI>

0000d8d2 <sym_TEFIALEYGDWZNVCI6J2TWNGI7MKU467ZDEG2H4A>:
    d8d2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    d8d6:	2000      	movs	r0, #0
    d8d8:	f8c1 0108 	str.w	r0, [r1, #264]	; 0x108
    d8dc:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    d8e0:	2001      	movs	r0, #1
    d8e2:	f8c1 0100 	str.w	r0, [r1, #256]	; 0x100
    d8e6:	4770      	bx	lr

0000d8e8 <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI>:
    d8e8:	b108      	cbz	r0, d8ee <sym_RFDF52I45CER5LUFD5R474FWGPTOSAHNLW6EPTI+0x6>
    d8ea:	2000      	movs	r0, #0
    d8ec:	4770      	bx	lr
    d8ee:	2001      	movs	r0, #1
    d8f0:	4770      	bx	lr

0000d8f2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>:
    d8f2:	f7f7 b929 	b.w	4b48 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY+0x20>

0000d8f6 <sym_QXKT3PVMDTZRAAU2QNTWO5VOUEZ4NW6TWISREXY>:
    d8f6:	f7f7 b917 	b.w	4b28 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>

0000d8fa <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y>:
    d8fa:	b510      	push	{r4, lr}
    d8fc:	2900      	cmp	r1, #0
    d8fe:	4604      	mov	r4, r0
    d900:	f04f 0106 	mov.w	r1, #6
    d904:	d002      	beq.n	d90c <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x12>
    d906:	f7f6 fb69 	bl	3fdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d90a:	e001      	b.n	d910 <sym_FEGTISSRZOTQRK4SD4MRDIWBV3TTZYGCCKXTY4Y+0x16>
    d90c:	f7f6 fb82 	bl	4014 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d910:	7960      	ldrb	r0, [r4, #5]
    d912:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d916:	7160      	strb	r0, [r4, #5]
    d918:	bd10      	pop	{r4, pc}

0000d91a <sym_BGPX36PUCNVPV3544HQ5RQFY5WG7CJAFVVBI7AY>:
    d91a:	4770      	bx	lr

0000d91c <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY>:
    d91c:	b530      	push	{r4, r5, lr}
    d91e:	460c      	mov	r4, r1
    d920:	4605      	mov	r5, r0
    d922:	b08d      	sub	sp, #52	; 0x34
    d924:	f04f 0103 	mov.w	r1, #3
    d928:	f104 0003 	add.w	r0, r4, #3
    d92c:	b112      	cbz	r2, d934 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x18>
    d92e:	f7f6 fb55 	bl	3fdc <sym_4BGPQMJJRBR2ET4K6M3CH3OLXQGTP2TS7FVXINA>
    d932:	e001      	b.n	d938 <sym_BLMJ5IIKWMCUMGRAJC47JTAD5DUGOY4TIBII5HY+0x1c>
    d934:	f7f6 fb6e 	bl	4014 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    d938:	7960      	ldrb	r0, [r4, #5]
    d93a:	220d      	movs	r2, #13
    d93c:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
    d940:	f040 0040 	orr.w	r0, r0, #64	; 0x40
    d944:	7160      	strb	r0, [r4, #5]
    d946:	2100      	movs	r1, #0
    d948:	a804      	add	r0, sp, #16
    d94a:	f7fe ff43 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d94e:	78e0      	ldrb	r0, [r4, #3]
    d950:	f88d 001f 	strb.w	r0, [sp, #31]
    d954:	7920      	ldrb	r0, [r4, #4]
    d956:	f88d 001e 	strb.w	r0, [sp, #30]
    d95a:	7960      	ldrb	r0, [r4, #5]
    d95c:	f88d 001d 	strb.w	r0, [sp, #29]
    d960:	2210      	movs	r2, #16
    d962:	4629      	mov	r1, r5
    d964:	4668      	mov	r0, sp
    d966:	f7fe febb 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d96a:	4668      	mov	r0, sp
    d96c:	f7ff ffaf 	bl	d8ce <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d970:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
    d974:	7020      	strb	r0, [r4, #0]
    d976:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
    d97a:	7060      	strb	r0, [r4, #1]
    d97c:	f89d 002d 	ldrb.w	r0, [sp, #45]	; 0x2d
    d980:	70a0      	strb	r0, [r4, #2]
    d982:	b00d      	add	sp, #52	; 0x34
    d984:	bd30      	pop	{r4, r5, pc}

0000d986 <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ>:
    d986:	b530      	push	{r4, r5, lr}
    d988:	b08d      	sub	sp, #52	; 0x34
    d98a:	460c      	mov	r4, r1
    d98c:	4605      	mov	r5, r0
    d98e:	220d      	movs	r2, #13
    d990:	2100      	movs	r1, #0
    d992:	a804      	add	r0, sp, #16
    d994:	f7fe ff1e 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    d998:	78e0      	ldrb	r0, [r4, #3]
    d99a:	f88d 001f 	strb.w	r0, [sp, #31]
    d99e:	7920      	ldrb	r0, [r4, #4]
    d9a0:	f88d 001e 	strb.w	r0, [sp, #30]
    d9a4:	7960      	ldrb	r0, [r4, #5]
    d9a6:	f88d 001d 	strb.w	r0, [sp, #29]
    d9aa:	2210      	movs	r2, #16
    d9ac:	4629      	mov	r1, r5
    d9ae:	4668      	mov	r0, sp
    d9b0:	f7fe fe96 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    d9b4:	4668      	mov	r0, sp
    d9b6:	f7ff ff8a 	bl	d8ce <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    d9ba:	7820      	ldrb	r0, [r4, #0]
    d9bc:	f89d 102f 	ldrb.w	r1, [sp, #47]	; 0x2f
    d9c0:	4288      	cmp	r0, r1
    d9c2:	d10c      	bne.n	d9de <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9c4:	7860      	ldrb	r0, [r4, #1]
    d9c6:	f89d 102e 	ldrb.w	r1, [sp, #46]	; 0x2e
    d9ca:	4288      	cmp	r0, r1
    d9cc:	d107      	bne.n	d9de <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9ce:	78a0      	ldrb	r0, [r4, #2]
    d9d0:	f89d 102d 	ldrb.w	r1, [sp, #45]	; 0x2d
    d9d4:	4288      	cmp	r0, r1
    d9d6:	d102      	bne.n	d9de <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x58>
    d9d8:	2001      	movs	r0, #1
    d9da:	b00d      	add	sp, #52	; 0x34
    d9dc:	bd30      	pop	{r4, r5, pc}
    d9de:	2000      	movs	r0, #0
    d9e0:	e7fb      	b.n	d9da <sym_SKMZWIM7P4M3RGOEIN3DTVMYPDZXQTMHZI7K3AQ+0x54>

0000d9e2 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q>:
    d9e2:	f7f7 bc75 	b.w	52d0 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ+0x3b8>
    d9e6:	b510      	push	{r4, lr}
    d9e8:	2801      	cmp	r0, #1
    d9ea:	d008      	beq.n	d9fe <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x1c>
    d9ec:	2802      	cmp	r0, #2
    d9ee:	d004      	beq.n	d9fa <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x18>
    d9f0:	f240 31ad 	movw	r1, #941	; 0x3ad
    d9f4:	2006      	movs	r0, #6
    d9f6:	f7f6 fa63 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    d9fa:	2001      	movs	r0, #1
    d9fc:	bd10      	pop	{r4, pc}
    d9fe:	2000      	movs	r0, #0
    da00:	bd10      	pop	{r4, pc}
    da02:	2900      	cmp	r1, #0
    da04:	d004      	beq.n	da10 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x2e>
    da06:	2801      	cmp	r0, #1
    da08:	d003      	beq.n	da12 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    da0a:	2901      	cmp	r1, #1
    da0c:	d001      	beq.n	da12 <sym_DQHYQ3HZODNGY32MUV2QBXEWNH7ASP5VOSVL45Q+0x30>
    da0e:	2002      	movs	r0, #2
    da10:	4770      	bx	lr
    da12:	2001      	movs	r0, #1
    da14:	4770      	bx	lr
    da16:	f7ff bdb1 	b.w	d57c <sym_47GVMLF7NXDJBYC2TPU2ES3ZL6CP4GIPWKYYWBI>

0000da1a <sym_2X6ZBBHQKFJV27I6OQZLD4IRAL5JANEGA5N34WA>:
    da1a:	2101      	movs	r1, #1
    da1c:	f7f8 b86c 	b.w	5af8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x74>

0000da20 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA>:
    da20:	b510      	push	{r4, lr}
    da22:	f002 f806 	bl	fa32 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>
    da26:	b118      	cbz	r0, da30 <sym_GKUVQYGVTZ7DKWBNC3M5TXN4XZ4Q6TUJFSFOWBA+0x10>
    da28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da2c:	f7fd bbfe 	b.w	b22c <sym_ZQHB3ANU2DANFLJZLZL5U4SPQ2ZDVUAHI35744Y>
    da30:	20ff      	movs	r0, #255	; 0xff
    da32:	bd10      	pop	{r4, pc}

0000da34 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA>:
    da34:	b510      	push	{r4, lr}
    da36:	f7f8 f8a7 	bl	5b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da3a:	2810      	cmp	r0, #16
    da3c:	d003      	beq.n	da46 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x12>
    da3e:	f7f8 f873 	bl	5b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    da42:	2810      	cmp	r0, #16
    da44:	d100      	bne.n	da48 <sym_QW6JOH7RCJIC2YFNJEURX5QNB5EIQT646EHIWEA+0x14>
    da46:	2008      	movs	r0, #8
    da48:	bd10      	pop	{r4, pc}

0000da4a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>:
    da4a:	b510      	push	{r4, lr}
    da4c:	f7f8 f89c 	bl	5b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da50:	2810      	cmp	r0, #16
    da52:	d007      	beq.n	da64 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    da54:	f7f8 f868 	bl	5b28 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0xa4>
    da58:	2810      	cmp	r0, #16
    da5a:	d003      	beq.n	da64 <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI+0x1a>
    da5c:	f7f8 f8dc 	bl	5c18 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x194>
    da60:	2001      	movs	r0, #1
    da62:	bd10      	pop	{r4, pc}
    da64:	2000      	movs	r0, #0
    da66:	bd10      	pop	{r4, pc}

0000da68 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>:
    da68:	b510      	push	{r4, lr}
    da6a:	f7f8 f88d 	bl	5b88 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x104>
    da6e:	2810      	cmp	r0, #16
    da70:	d003      	beq.n	da7a <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY+0x12>
    da72:	f7f8 f919 	bl	5ca8 <sym_NCQ5WTBCV7DGPK3QI3SSY5XGKOI2SE3XFCTKQKY+0x224>
    da76:	2001      	movs	r0, #1
    da78:	bd10      	pop	{r4, pc}
    da7a:	2000      	movs	r0, #0
    da7c:	bd10      	pop	{r4, pc}

0000da7e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>:
    da7e:	b570      	push	{r4, r5, r6, lr}
    da80:	460e      	mov	r6, r1
    da82:	b08c      	sub	sp, #48	; 0x30
    da84:	4614      	mov	r4, r2
    da86:	4601      	mov	r1, r0
    da88:	461d      	mov	r5, r3
    da8a:	2210      	movs	r2, #16
    da8c:	4668      	mov	r0, sp
    da8e:	f000 f9b8 	bl	de02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da92:	2210      	movs	r2, #16
    da94:	4631      	mov	r1, r6
    da96:	a804      	add	r0, sp, #16
    da98:	f000 f9b3 	bl	de02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    da9c:	4668      	mov	r0, sp
    da9e:	f7ff ff16 	bl	d8ce <sym_GZE6QJRFTCG2MERGOKENHWFRYSCC5S3WEXUU47A>
    daa2:	a908      	add	r1, sp, #32
    daa4:	f04f 0210 	mov.w	r2, #16
    daa8:	4628      	mov	r0, r5
    daaa:	b11c      	cbz	r4, dab4 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x36>
    daac:	f000 f9a9 	bl	de02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>
    dab0:	b00c      	add	sp, #48	; 0x30
    dab2:	bd70      	pop	{r4, r5, r6, pc}
    dab4:	f7fe fe14 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    dab8:	e7fa      	b.n	dab0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x32>
    daba:	0781      	lsls	r1, r0, #30
    dabc:	d501      	bpl.n	dac2 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x44>
    dabe:	2002      	movs	r0, #2
    dac0:	4770      	bx	lr
    dac2:	07c0      	lsls	r0, r0, #31
    dac4:	d0fc      	beq.n	dac0 <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x42>
    dac6:	2001      	movs	r0, #1
    dac8:	4770      	bx	lr

0000daca <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>:
    daca:	b530      	push	{r4, r5, lr}
    dacc:	4605      	mov	r5, r0
    dace:	7900      	ldrb	r0, [r0, #4]
    dad0:	0940      	lsrs	r0, r0, #5
    dad2:	d10e      	bne.n	daf2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    dad4:	2400      	movs	r4, #0
    dad6:	4623      	mov	r3, r4
    dad8:	5ce8      	ldrb	r0, [r5, r3]
    dada:	f000 f855 	bl	db88 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>
    dade:	1c5b      	adds	r3, r3, #1
    dae0:	4420      	add	r0, r4
    dae2:	b2db      	uxtb	r3, r3
    dae4:	b2c4      	uxtb	r4, r0
    dae6:	2b05      	cmp	r3, #5
    dae8:	d3f6      	bcc.n	dad8 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0xe>
    daea:	2c01      	cmp	r4, #1
    daec:	d901      	bls.n	daf2 <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY+0x28>
    daee:	2001      	movs	r0, #1
    daf0:	bd30      	pop	{r4, r5, pc}
    daf2:	2000      	movs	r0, #0
    daf4:	bd30      	pop	{r4, r5, pc}

0000daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>:
    daf6:	b510      	push	{r4, lr}
    daf8:	460c      	mov	r4, r1
    dafa:	2100      	movs	r1, #0
    dafc:	f7ff fe91 	bl	d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    db00:	6060      	str	r0, [r4, #4]
    db02:	b110      	cbz	r0, db0a <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA+0x14>
    db04:	2000      	movs	r0, #0
    db06:	7020      	strb	r0, [r4, #0]
    db08:	bd10      	pop	{r4, pc}
    db0a:	2002      	movs	r0, #2
    db0c:	bd10      	pop	{r4, pc}

0000db0e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>:
    db0e:	f240 41e2 	movw	r1, #1250	; 0x4e2
    db12:	4348      	muls	r0, r1
    db14:	4770      	bx	lr

0000db16 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>:
    db16:	f240 41e2 	movw	r1, #1250	; 0x4e2
    db1a:	fbb0 f0f1 	udiv	r0, r0, r1
    db1e:	b280      	uxth	r0, r0
    db20:	4770      	bx	lr

0000db22 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ>:
    db22:	b570      	push	{r4, r5, r6, lr}
    db24:	4604      	mov	r4, r0
    db26:	4290      	cmp	r0, r2
    db28:	d20b      	bcs.n	db42 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x20>
    db2a:	1b10      	subs	r0, r2, r4
    db2c:	2865      	cmp	r0, #101	; 0x65
    db2e:	d200      	bcs.n	db32 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x10>
    db30:	2065      	movs	r0, #101	; 0x65
    db32:	1825      	adds	r5, r4, r0
    db34:	428d      	cmp	r5, r1
    db36:	d803      	bhi.n	db40 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x1e>
    db38:	2104      	movs	r1, #4
    db3a:	f7f3 fc9d 	bl	1478 <sym_QWOE5H22ZADGJX5JSROW7BOI32Z6PPEEJCISNOQ>
    db3e:	b108      	cbz	r0, db44 <sym_75VOI5ZNFW3OXMHUCY2QF6IZX2BBZSQKA7XVCPQ+0x22>
    db40:	4620      	mov	r0, r4
    db42:	bd70      	pop	{r4, r5, r6, pc}
    db44:	4628      	mov	r0, r5
    db46:	bd70      	pop	{r4, r5, r6, pc}

0000db48 <sym_GYGF5D6AIJ7H7OKIHC3CN5ZKO53JXIO7G3W4UPQ>:
    db48:	f000 3155 	and.w	r1, r0, #1431655765	; 0x55555555
    db4c:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
    db50:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    db54:	4408      	add	r0, r1
    db56:	f000 3133 	and.w	r1, r0, #858993459	; 0x33333333
    db5a:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
    db5e:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    db62:	4408      	add	r0, r1
    db64:	f000 310f 	and.w	r1, r0, #252645135	; 0xf0f0f0f
    db68:	f04f 320f 	mov.w	r2, #252645135	; 0xf0f0f0f
    db6c:	ea02 1010 	and.w	r0, r2, r0, lsr #4
    db70:	4408      	add	r0, r1
    db72:	f000 11ff 	and.w	r1, r0, #16711935	; 0xff00ff
    db76:	f04f 12ff 	mov.w	r2, #16711935	; 0xff00ff
    db7a:	ea02 2010 	and.w	r0, r2, r0, lsr #8
    db7e:	4408      	add	r0, r1
    db80:	b281      	uxth	r1, r0
    db82:	eb01 4010 	add.w	r0, r1, r0, lsr #16
    db86:	4770      	bx	lr

0000db88 <sym_TVQ52UL2BTPMYHVZ54PCMYQBSDBT5KZ4Z4A63DQ>:
    db88:	f000 0155 	and.w	r1, r0, #85	; 0x55
    db8c:	2255      	movs	r2, #85	; 0x55
    db8e:	ea02 0050 	and.w	r0, r2, r0, lsr #1
    db92:	4408      	add	r0, r1
    db94:	f000 0133 	and.w	r1, r0, #51	; 0x33
    db98:	2233      	movs	r2, #51	; 0x33
    db9a:	ea02 0090 	and.w	r0, r2, r0, lsr #2
    db9e:	4408      	add	r0, r1
    dba0:	f000 010f 	and.w	r1, r0, #15
    dba4:	eb01 1010 	add.w	r0, r1, r0, lsr #4
    dba8:	4770      	bx	lr

0000dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>:
    dbaa:	b510      	push	{r4, lr}
    dbac:	f1a2 030f 	sub.w	r3, r2, #15
    dbb0:	290c      	cmp	r1, #12
    dbb2:	d24f      	bcs.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dbb4:	e8df f001 	tbb	[pc, r1]
    dbb8:	120d0806 	.word	0x120d0806
    dbbc:	2f271815 	.word	0x2f271815
    dbc0:	3d354c32 	.word	0x3d354c32
    dbc4:	b3a2      	cbz	r2, dc30 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x86>
    dbc6:	e045      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dbc8:	2a07      	cmp	r2, #7
    dbca:	d045      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dbcc:	2a08      	cmp	r2, #8
    dbce:	d043      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dbd0:	e040      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dbd2:	2a0c      	cmp	r2, #12
    dbd4:	d040      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dbd6:	2a0b      	cmp	r2, #11
    dbd8:	d03e      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dbda:	e03b      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dbdc:	2a0d      	cmp	r2, #13
    dbde:	d03b      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dbe0:	e038      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dbe2:	2b0c      	cmp	r3, #12
    dbe4:	d938      	bls.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dbe6:	e035      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dbe8:	2a12      	cmp	r2, #18
    dbea:	d035      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dbec:	2a11      	cmp	r2, #17
    dbee:	d033      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dbf0:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    dbf4:	b120      	cbz	r0, dc00 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x56>
    dbf6:	2a12      	cmp	r2, #18
    dbf8:	d32c      	bcc.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dbfa:	2a1a      	cmp	r2, #26
    dbfc:	d92c      	bls.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dbfe:	e029      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dc00:	2a16      	cmp	r2, #22
    dc02:	d2fa      	bcs.n	dbfa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0x50>
    dc04:	e026      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dc06:	2b03      	cmp	r3, #3
    dc08:	d926      	bls.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc0a:	f890 0046 	ldrb.w	r0, [r0, #70]	; 0x46
    dc0e:	b308      	cbz	r0, dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dc10:	2a1b      	cmp	r2, #27
    dc12:	d921      	bls.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc14:	e01e      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dc16:	2a04      	cmp	r2, #4
    dc18:	d01e      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc1a:	e01b      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dc1c:	2a01      	cmp	r2, #1
    dc1e:	d01b      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc20:	e018      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dc22:	2a1c      	cmp	r2, #28
    dc24:	d018      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc26:	2a1d      	cmp	r2, #29
    dc28:	d016      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc2a:	2a1e      	cmp	r2, #30
    dc2c:	d014      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc2e:	e011      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dc30:	e012      	b.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc32:	2a1f      	cmp	r2, #31
    dc34:	d010      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc36:	2a20      	cmp	r2, #32
    dc38:	d00e      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc3a:	2a21      	cmp	r2, #33	; 0x21
    dc3c:	d00c      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc3e:	2a22      	cmp	r2, #34	; 0x22
    dc40:	d00a      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc42:	2a23      	cmp	r2, #35	; 0x23
    dc44:	d008      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc46:	2a24      	cmp	r2, #36	; 0x24
    dc48:	d006      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc4a:	2a26      	cmp	r2, #38	; 0x26
    dc4c:	d004      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc4e:	e001      	b.n	dc54 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xaa>
    dc50:	2a05      	cmp	r2, #5
    dc52:	d001      	beq.n	dc58 <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I+0xae>
    dc54:	2000      	movs	r0, #0
    dc56:	bd10      	pop	{r4, pc}
    dc58:	2001      	movs	r0, #1
    dc5a:	bd10      	pop	{r4, pc}

0000dc5c <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI>:
    dc5c:	280c      	cmp	r0, #12
    dc5e:	d013      	beq.n	dc88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc60:	280b      	cmp	r0, #11
    dc62:	d011      	beq.n	dc88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc64:	280d      	cmp	r0, #13
    dc66:	d00f      	beq.n	dc88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc68:	281f      	cmp	r0, #31
    dc6a:	d00d      	beq.n	dc88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc6c:	2820      	cmp	r0, #32
    dc6e:	d00b      	beq.n	dc88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc70:	2821      	cmp	r0, #33	; 0x21
    dc72:	d009      	beq.n	dc88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc74:	2822      	cmp	r0, #34	; 0x22
    dc76:	d007      	beq.n	dc88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc78:	2823      	cmp	r0, #35	; 0x23
    dc7a:	d005      	beq.n	dc88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc7c:	2824      	cmp	r0, #36	; 0x24
    dc7e:	d003      	beq.n	dc88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc80:	2826      	cmp	r0, #38	; 0x26
    dc82:	d001      	beq.n	dc88 <sym_J22YCCWNUNOSXHAJQUUQAO7YZP2SNXLIWISZVHI+0x2c>
    dc84:	2000      	movs	r0, #0
    dc86:	4770      	bx	lr
    dc88:	2001      	movs	r0, #1
    dc8a:	4770      	bx	lr

0000dc8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>:
    dc8c:	f011 0f0c 	tst.w	r1, #12
    dc90:	d016      	beq.n	dcc0 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x34>
    dc92:	074a      	lsls	r2, r1, #29
    dc94:	f44f 7116 	mov.w	r1, #600	; 0x258
    dc98:	2a00      	cmp	r2, #0
    dc9a:	da02      	bge.n	dca2 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x16>
    dc9c:	f04f 0210 	mov.w	r2, #16
    dca0:	e001      	b.n	dca6 <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x1a>
    dca2:	f04f 0240 	mov.w	r2, #64	; 0x40
    dca6:	da01      	bge.n	dcac <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x20>
    dca8:	f04f 0196 	mov.w	r1, #150	; 0x96
    dcac:	f501 71bc 	add.w	r1, r1, #376	; 0x178
    dcb0:	eba0 0301 	sub.w	r3, r0, r1
    dcb4:	4288      	cmp	r0, r1
    dcb6:	d910      	bls.n	dcda <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dcb8:	fb93 f0f2 	sdiv	r0, r3, r2
    dcbc:	b280      	uxth	r0, r0
    dcbe:	4770      	bx	lr
    dcc0:	2902      	cmp	r1, #2
    dcc2:	d002      	beq.n	dcca <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x3e>
    dcc4:	2870      	cmp	r0, #112	; 0x70
    dcc6:	d80a      	bhi.n	dcde <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x52>
    dcc8:	e007      	b.n	dcda <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dcca:	283c      	cmp	r0, #60	; 0x3c
    dccc:	d905      	bls.n	dcda <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x4e>
    dcce:	383c      	subs	r0, #60	; 0x3c
    dcd0:	17c1      	asrs	r1, r0, #31
    dcd2:	eb00 7091 	add.w	r0, r0, r1, lsr #30
    dcd6:	1080      	asrs	r0, r0, #2
    dcd8:	e7f0      	b.n	dcbc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    dcda:	2000      	movs	r0, #0
    dcdc:	e7ee      	b.n	dcbc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>
    dcde:	3870      	subs	r0, #112	; 0x70
    dce0:	17c1      	asrs	r1, r0, #31
    dce2:	eb00 7051 	add.w	r0, r0, r1, lsr #29
    dce6:	10c0      	asrs	r0, r0, #3
    dce8:	e7e8      	b.n	dcbc <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y+0x30>

0000dcea <sym_6NROXJNXJONASXBRH4ZGPEEQ42PSH3YLRTC74GQ>:
    dcea:	6809      	ldr	r1, [r1, #0]
    dcec:	f8c0 1066 	str.w	r1, [r0, #102]	; 0x66
    dcf0:	4770      	bx	lr

0000dcf2 <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ>:
    dcf2:	2801      	cmp	r0, #1
    dcf4:	d002      	beq.n	dcfc <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dcf6:	2802      	cmp	r0, #2
    dcf8:	d000      	beq.n	dcfc <sym_N7ZC3LBWUJOAILVKSQ7VVQPJVGTFQ2IN2TKPVHQ+0xa>
    dcfa:	2000      	movs	r0, #0
    dcfc:	4770      	bx	lr

0000dcfe <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA>:
    dcfe:	b510      	push	{r4, lr}
    dd00:	f640 12c4 	movw	r2, #2500	; 0x9c4
    dd04:	2901      	cmp	r1, #1
    dd06:	d006      	beq.n	dd16 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x18>
    dd08:	2902      	cmp	r1, #2
    dd0a:	d005      	beq.n	dd18 <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1a>
    dd0c:	f240 31b1 	movw	r1, #945	; 0x3b1
    dd10:	2029      	movs	r0, #41	; 0x29
    dd12:	f7f6 f8d5 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    dd16:	b108      	cbz	r0, dd1c <sym_QOK2KYWK62QNZBQRPK2GPAU2IEJXSELK32IAUUA+0x1e>
    dd18:	4610      	mov	r0, r2
    dd1a:	bd10      	pop	{r4, pc}
    dd1c:	f240 40e2 	movw	r0, #1250	; 0x4e2
    dd20:	bd10      	pop	{r4, pc}

0000dd22 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI>:
    dd22:	b530      	push	{r4, r5, lr}
    dd24:	242a      	movs	r4, #42	; 0x2a
    dd26:	2523      	movs	r5, #35	; 0x23
    dd28:	2a16      	cmp	r2, #22
    dd2a:	d105      	bne.n	dd38 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x16>
    dd2c:	280c      	cmp	r0, #12
    dd2e:	d007      	beq.n	dd40 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dd30:	280d      	cmp	r0, #13
    dd32:	d005      	beq.n	dd40 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dd34:	281f      	cmp	r0, #31
    dd36:	d005      	beq.n	dd44 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    dd38:	b171      	cbz	r1, dd58 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    dd3a:	2a16      	cmp	r2, #22
    dd3c:	d10c      	bne.n	dd58 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x36>
    dd3e:	e004      	b.n	dd4a <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x28>
    dd40:	701c      	strb	r4, [r3, #0]
    dd42:	e000      	b.n	dd46 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x24>
    dd44:	701d      	strb	r5, [r3, #0]
    dd46:	2001      	movs	r0, #1
    dd48:	bd30      	pop	{r4, r5, pc}
    dd4a:	7808      	ldrb	r0, [r1, #0]
    dd4c:	2801      	cmp	r0, #1
    dd4e:	d0f7      	beq.n	dd40 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dd50:	2800      	cmp	r0, #0
    dd52:	d0f5      	beq.n	dd40 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x1e>
    dd54:	2816      	cmp	r0, #22
    dd56:	d0f5      	beq.n	dd44 <sym_F34BIG3DAVATN4IHLYJVG2XLJOWOK44SMOC6AUI+0x22>
    dd58:	2000      	movs	r0, #0
    dd5a:	bd30      	pop	{r4, r5, pc}

0000dd5c <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ>:
    dd5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    dd5e:	b2cf      	uxtb	r7, r1
    dd60:	4606      	mov	r6, r0
    dd62:	f3c1 2407 	ubfx	r4, r1, #8, #8
    dd66:	4621      	mov	r1, r4
    dd68:	4638      	mov	r0, r7
    dd6a:	f000 f8ca 	bl	df02 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    dd6e:	b2f5      	uxtb	r5, r6
    dd70:	f3c6 2607 	ubfx	r6, r6, #8, #8
    dd74:	b920      	cbnz	r0, dd80 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x24>
    dd76:	4631      	mov	r1, r6
    dd78:	4628      	mov	r0, r5
    dd7a:	f000 f8c2 	bl	df02 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x46>
    dd7e:	b140      	cbz	r0, dd92 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x36>
    dd80:	4027      	ands	r7, r4
    dd82:	4035      	ands	r5, r6
    dd84:	403d      	ands	r5, r7
    dd86:	4644      	mov	r4, r8
    dd88:	f365 0407 	bfi	r4, r5, #0, #8
    dd8c:	f365 240f 	bfi	r4, r5, #8, #8
    dd90:	e006      	b.n	dda0 <sym_HFTBXB6EEVTEA6UN46QA3JCUQXJQH6HCG5AJGRQ+0x44>
    dd92:	4025      	ands	r5, r4
    dd94:	4644      	mov	r4, r8
    dd96:	f365 0407 	bfi	r4, r5, #0, #8
    dd9a:	403e      	ands	r6, r7
    dd9c:	f366 240f 	bfi	r4, r6, #8, #8
    dda0:	b2e0      	uxtb	r0, r4
    dda2:	f7ff fe8a 	bl	daba <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    dda6:	f88d 0000 	strb.w	r0, [sp]
    ddaa:	f3c4 2007 	ubfx	r0, r4, #8, #8
    ddae:	f7ff fe84 	bl	daba <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY+0x3c>
    ddb2:	f88d 0001 	strb.w	r0, [sp, #1]
    ddb6:	f8bd 0000 	ldrh.w	r0, [sp]
    ddba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ddbc <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY>:
    ddbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ddc0:	460c      	mov	r4, r1
    ddc2:	4605      	mov	r5, r0
    ddc4:	68c6      	ldr	r6, [r0, #12]
    ddc6:	f7f3 ffb1 	bl	1d2c <sym_CVH6S6LMSFPC2RM6I6LYWFRVOJUD3A6OCMG7AAI>
    ddca:	b198      	cbz	r0, ddf4 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x38>
    ddcc:	b1bc      	cbz	r4, ddfe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ddce:	4630      	mov	r0, r6
    ddd0:	68e9      	ldr	r1, [r5, #12]
    ddd2:	f7f3 fc9f 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ddd6:	2800      	cmp	r0, #0
    ddd8:	dd11      	ble.n	ddfe <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x42>
    ddda:	4420      	add	r0, r4
    dddc:	1e40      	subs	r0, r0, #1
    ddde:	fbb0 f7f4 	udiv	r7, r0, r4
    dde2:	fb07 f104 	mul.w	r1, r7, r4
    dde6:	4630      	mov	r0, r6
    dde8:	f7f3 fc62 	bl	16b0 <sym_2O2USXABBLL6KC7E5NJFOHR6JLZMSV4AU5ZYH3Q>
    ddec:	60e8      	str	r0, [r5, #12]
    ddee:	4638      	mov	r0, r7
    ddf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ddf4:	f240 2136 	movw	r1, #566	; 0x236
    ddf8:	2029      	movs	r0, #41	; 0x29
    ddfa:	f7f6 f861 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ddfe:	2000      	movs	r0, #0
    de00:	e7f6      	b.n	ddf0 <sym_K4XFYUFHWSS4WLYRDTKOJ7STOPYHBKAJBCXHBBY+0x34>

0000de02 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI>:
    de02:	b530      	push	{r4, r5, lr}
    de04:	4613      	mov	r3, r2
    de06:	e006      	b.n	de16 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x14>
    de08:	18cc      	adds	r4, r1, r3
    de0a:	1ad5      	subs	r5, r2, r3
    de0c:	f814 4c01 	ldrb.w	r4, [r4, #-1]
    de10:	1e5b      	subs	r3, r3, #1
    de12:	5544      	strb	r4, [r0, r5]
    de14:	b2db      	uxtb	r3, r3
    de16:	2b00      	cmp	r3, #0
    de18:	d1f6      	bne.n	de08 <sym_C5MZWIO7BXLJIO65K7CGSHP3SLST2VORSHVBOVI+0x6>
    de1a:	bd30      	pop	{r4, r5, pc}

0000de1c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II>:
    de1c:	b538      	push	{r3, r4, r5, lr}
    de1e:	4605      	mov	r5, r0
    de20:	460c      	mov	r4, r1
    de22:	4668      	mov	r0, sp
    de24:	f7fd ff12 	bl	bc4c <sym_EZCFQXKGAFHY5HQVJOXWDLO45XWMEJQY5WUGZNI>
    de28:	b310      	cbz	r0, de70 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x54>
    de2a:	f99d 0000 	ldrsb.w	r0, [sp]
    de2e:	7260      	strb	r0, [r4, #9]
    de30:	f894 1023 	ldrb.w	r1, [r4, #35]	; 0x23
    de34:	72a1      	strb	r1, [r4, #10]
    de36:	f994 100b 	ldrsb.w	r1, [r4, #11]
    de3a:	2200      	movs	r2, #0
    de3c:	1a41      	subs	r1, r0, r1
    de3e:	d500      	bpl.n	de42 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x26>
    de40:	4249      	negs	r1, r1
    de42:	f895 3027 	ldrb.w	r3, [r5, #39]	; 0x27
    de46:	428b      	cmp	r3, r1
    de48:	dc10      	bgt.n	de6c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    de4a:	2bff      	cmp	r3, #255	; 0xff
    de4c:	d00e      	beq.n	de6c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    de4e:	7b21      	ldrb	r1, [r4, #12]
    de50:	1c49      	adds	r1, r1, #1
    de52:	b2c9      	uxtb	r1, r1
    de54:	7321      	strb	r1, [r4, #12]
    de56:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
    de5a:	4299      	cmp	r1, r3
    de5c:	d802      	bhi.n	de64 <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x48>
    de5e:	7ae1      	ldrb	r1, [r4, #11]
    de60:	297f      	cmp	r1, #127	; 0x7f
    de62:	d103      	bne.n	de6c <sym_ATHPLOWBGAIKG7V5SSPNEEN27AC3OGL2HEWE4II+0x50>
    de64:	72e0      	strb	r0, [r4, #11]
    de66:	2000      	movs	r0, #0
    de68:	7320      	strb	r0, [r4, #12]
    de6a:	2201      	movs	r2, #1
    de6c:	4610      	mov	r0, r2
    de6e:	bd38      	pop	{r3, r4, r5, pc}
    de70:	207f      	movs	r0, #127	; 0x7f
    de72:	7260      	strb	r0, [r4, #9]
    de74:	2000      	movs	r0, #0
    de76:	bd38      	pop	{r3, r4, r5, pc}

0000de78 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>:
    de78:	2300      	movs	r3, #0
    de7a:	6283      	str	r3, [r0, #40]	; 0x28
    de7c:	8602      	strh	r2, [r0, #48]	; 0x30
    de7e:	f240 2371 	movw	r3, #625	; 0x271
    de82:	435a      	muls	r2, r3
    de84:	eb01 1202 	add.w	r2, r1, r2, lsl #4
    de88:	1e52      	subs	r2, r2, #1
    de8a:	fbb2 f1f1 	udiv	r1, r2, r1
    de8e:	62c1      	str	r1, [r0, #44]	; 0x2c
    de90:	4770      	bx	lr

0000de92 <sym_5SQGEOI2QIBONU3LMZVAMW3SSGU24TVE57VDLBA>:
    de92:	f240 41e2 	movw	r1, #1250	; 0x4e2
    de96:	4348      	muls	r0, r1
    de98:	4770      	bx	lr

0000de9a <sym_MKMKL77LAUBQ4JEH6ZOP4C62SMTD4ERFZLWH4JI>:
    de9a:	f240 41e2 	movw	r1, #1250	; 0x4e2
    de9e:	fbb0 f0f1 	udiv	r0, r0, r1
    dea2:	b280      	uxth	r0, r0
    dea4:	4770      	bx	lr

0000dea6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>:
    dea6:	f240 41e2 	movw	r1, #1250	; 0x4e2
    deaa:	fb10 f001 	smulbb	r0, r0, r1
    deae:	4770      	bx	lr

0000deb0 <sym_XDZ2OHWEUBVVDKEXHUYEULKMIZVRQ77QI2ENP4A>:
    deb0:	f240 41e2 	movw	r1, #1250	; 0x4e2
    deb4:	fbb0 f0f1 	udiv	r0, r0, r1
    deb8:	b2c0      	uxtb	r0, r0
    deba:	4770      	bx	lr

0000debc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ>:
    debc:	b510      	push	{r4, lr}
    debe:	2300      	movs	r3, #0
    dec0:	461a      	mov	r2, r3
    dec2:	e003      	b.n	decc <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x10>
    dec4:	5c84      	ldrb	r4, [r0, r2]
    dec6:	4323      	orrs	r3, r4
    dec8:	1c52      	adds	r2, r2, #1
    deca:	b2d2      	uxtb	r2, r2
    decc:	428a      	cmp	r2, r1
    dece:	d3f9      	bcc.n	dec4 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x8>
    ded0:	b10b      	cbz	r3, ded6 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x1a>
    ded2:	2000      	movs	r0, #0
    ded4:	bd10      	pop	{r4, pc}
    ded6:	2001      	movs	r0, #1
    ded8:	bd10      	pop	{r4, pc}
    deda:	b510      	push	{r4, lr}
    dedc:	4604      	mov	r4, r0
    dede:	f7fd f921 	bl	b124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    dee2:	f644 112b 	movw	r1, #18731	; 0x492b
    dee6:	4008      	ands	r0, r1
    dee8:	2101      	movs	r1, #1
    deea:	7561      	strb	r1, [r4, #21]
    deec:	f884 004e 	strb.w	r0, [r4, #78]	; 0x4e
    def0:	0a00      	lsrs	r0, r0, #8
    def2:	f884 004f 	strb.w	r0, [r4, #79]	; 0x4f
    def6:	20fe      	movs	r0, #254	; 0xfe
    def8:	f884 0084 	strb.w	r0, [r4, #132]	; 0x84
    defc:	207f      	movs	r0, #127	; 0x7f
    defe:	7260      	strb	r0, [r4, #9]
    df00:	bd10      	pop	{r4, pc}
    df02:	2801      	cmp	r0, #1
    df04:	d002      	beq.n	df0c <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x50>
    df06:	2802      	cmp	r0, #2
    df08:	d003      	beq.n	df12 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x56>
    df0a:	e004      	b.n	df16 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    df0c:	2901      	cmp	r1, #1
    df0e:	d004      	beq.n	df1a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    df10:	e001      	b.n	df16 <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5a>
    df12:	2902      	cmp	r1, #2
    df14:	d001      	beq.n	df1a <sym_35JWAFJL2IEYRDNORVIQ7BBAS7FQNUVOFCLQNSQ+0x5e>
    df16:	2000      	movs	r0, #0
    df18:	4770      	bx	lr
    df1a:	2001      	movs	r0, #1
    df1c:	4770      	bx	lr

0000df1e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA>:
    df1e:	b510      	push	{r4, lr}
    df20:	4604      	mov	r4, r0
    df22:	f890 0020 	ldrb.w	r0, [r0, #32]
    df26:	b108      	cbz	r0, df2c <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0xe>
    df28:	2825      	cmp	r0, #37	; 0x25
    df2a:	d901      	bls.n	df30 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x12>
    df2c:	2012      	movs	r0, #18
    df2e:	bd10      	pop	{r4, pc}
    df30:	b12a      	cbz	r2, df3e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>
    df32:	7d60      	ldrb	r0, [r4, #21]
    df34:	b128      	cbz	r0, df42 <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x24>
    df36:	2801      	cmp	r0, #1
    df38:	d009      	beq.n	df4e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x30>
    df3a:	201f      	movs	r0, #31
    df3c:	bd10      	pop	{r4, pc}
    df3e:	2000      	movs	r0, #0
    df40:	bd10      	pop	{r4, pc}
    df42:	4620      	mov	r0, r4
    df44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df48:	4611      	mov	r1, r2
    df4a:	f7f7 bfa3 	b.w	5e94 <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ+0xa8>
    df4e:	88a2      	ldrh	r2, [r4, #4]
    df50:	6909      	ldr	r1, [r1, #16]
    df52:	f104 0015 	add.w	r0, r4, #21
    df56:	f7f7 ff49 	bl	5dec <sym_KHCOV3Y476ESNIVYZPGAZMIYAIZNR3YMGCWNDEQ>
    df5a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
    df5e:	e7ee      	b.n	df3e <sym_EMRT7PRPOJDVU5Z5ET5VJFU2CWFE2OMTIKS35RA+0x20>

0000df60 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I>:
    df60:	b530      	push	{r4, r5, lr}
    df62:	1c42      	adds	r2, r0, #1
    df64:	428a      	cmp	r2, r1
    df66:	d004      	beq.n	df72 <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x12>
    df68:	680a      	ldr	r2, [r1, #0]
    df6a:	f8c0 2001 	str.w	r2, [r0, #1]
    df6e:	7909      	ldrb	r1, [r1, #4]
    df70:	7141      	strb	r1, [r0, #5]
    df72:	7941      	ldrb	r1, [r0, #5]
    df74:	f001 011f 	and.w	r1, r1, #31
    df78:	7141      	strb	r1, [r0, #5]
    df7a:	2100      	movs	r1, #0
    df7c:	72c1      	strb	r1, [r0, #11]
    df7e:	1843      	adds	r3, r0, r1
    df80:	1c49      	adds	r1, r1, #1
    df82:	785c      	ldrb	r4, [r3, #1]
    df84:	b2c9      	uxtb	r1, r1
    df86:	f004 0201 	and.w	r2, r4, #1
    df8a:	0864      	lsrs	r4, r4, #1
    df8c:	f004 0501 	and.w	r5, r4, #1
    df90:	4415      	add	r5, r2
    df92:	0862      	lsrs	r2, r4, #1
    df94:	f002 0401 	and.w	r4, r2, #1
    df98:	442c      	add	r4, r5
    df9a:	0852      	lsrs	r2, r2, #1
    df9c:	f002 0501 	and.w	r5, r2, #1
    dfa0:	442c      	add	r4, r5
    dfa2:	0852      	lsrs	r2, r2, #1
    dfa4:	f002 0501 	and.w	r5, r2, #1
    dfa8:	442c      	add	r4, r5
    dfaa:	0852      	lsrs	r2, r2, #1
    dfac:	f002 0501 	and.w	r5, r2, #1
    dfb0:	442c      	add	r4, r5
    dfb2:	0852      	lsrs	r2, r2, #1
    dfb4:	f002 0501 	and.w	r5, r2, #1
    dfb8:	442c      	add	r4, r5
    dfba:	eb04 0252 	add.w	r2, r4, r2, lsr #1
    dfbe:	719a      	strb	r2, [r3, #6]
    dfc0:	7ac3      	ldrb	r3, [r0, #11]
    dfc2:	2905      	cmp	r1, #5
    dfc4:	441a      	add	r2, r3
    dfc6:	72c2      	strb	r2, [r0, #11]
    dfc8:	d3d9      	bcc.n	df7e <sym_DGQRK6XVXAAPQDRCJOVOHOTQ47PE7QQ4MNBOW5I+0x1e>
    dfca:	bd30      	pop	{r4, r5, pc}

0000dfcc <sym_54XCFVWGQWJGZMAGPXTD5V6OZSR66PP5XEOYE4Y>:
    dfcc:	68c0      	ldr	r0, [r0, #12]
    dfce:	6008      	str	r0, [r1, #0]
    dfd0:	4770      	bx	lr

0000dfd2 <sym_HLH4KBER4ZQ33ZCWKFMAS4GXCD63YBGX6LUM4WI>:
    dfd2:	6842      	ldr	r2, [r0, #4]
    dfd4:	600a      	str	r2, [r1, #0]
    dfd6:	6880      	ldr	r0, [r0, #8]
    dfd8:	6048      	str	r0, [r1, #4]
    dfda:	4770      	bx	lr

0000dfdc <sym_KIWKQDEBPWXHISYFTEC7I32RP3MHD6CJEPVDW6I>:
    dfdc:	6842      	ldr	r2, [r0, #4]
    dfde:	600a      	str	r2, [r1, #0]
    dfe0:	6880      	ldr	r0, [r0, #8]
    dfe2:	6048      	str	r0, [r1, #4]
    dfe4:	4770      	bx	lr

0000dfe6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>:
    dfe6:	7800      	ldrb	r0, [r0, #0]
    dfe8:	f000 0003 	and.w	r0, r0, #3
    dfec:	4770      	bx	lr

0000dfee <sym_AWXBPGMPTTTWF7DPZL5Q2JQ4QSDFRJFHKF3BIIQ>:
    dfee:	8880      	ldrh	r0, [r0, #4]
    dff0:	4770      	bx	lr

0000dff2 <sym_GPYTTEK2KDNR73G6ZAXHATMSQZASIEW24RTZFJA>:
    dff2:	88c0      	ldrh	r0, [r0, #6]
    dff4:	4770      	bx	lr

0000dff6 <sym_IR77N76GC2RMGAYGDAEPSAGD4DPXFGWMASI3OGY>:
    dff6:	8900      	ldrh	r0, [r0, #8]
    dff8:	4770      	bx	lr

0000dffa <sym_WC6UZSDJDS7GHVUUG36QUD3XWMICRFA5JJX42VA>:
    dffa:	8940      	ldrh	r0, [r0, #10]
    dffc:	4770      	bx	lr

0000dffe <sym_WRY64WR3RHFREREX3ZB66OLRGKHGDAUZMHJMBCI>:
    dffe:	7900      	ldrb	r0, [r0, #4]
    e000:	4770      	bx	lr

0000e002 <sym_FES4SNLGDB2HCH3XYZK52SHDPFDGL5NN3ARGNTY>:
    e002:	7900      	ldrb	r0, [r0, #4]
    e004:	4770      	bx	lr

0000e006 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI>:
    e006:	8901      	ldrh	r1, [r0, #8]
    e008:	291b      	cmp	r1, #27
    e00a:	d30c      	bcc.n	e026 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e00c:	8941      	ldrh	r1, [r0, #10]
    e00e:	f44f 72a4 	mov.w	r2, #328	; 0x148
    e012:	4291      	cmp	r1, r2
    e014:	d307      	bcc.n	e026 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e016:	8881      	ldrh	r1, [r0, #4]
    e018:	291b      	cmp	r1, #27
    e01a:	d304      	bcc.n	e026 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e01c:	88c0      	ldrh	r0, [r0, #6]
    e01e:	4290      	cmp	r0, r2
    e020:	d301      	bcc.n	e026 <sym_XNOKOPU7R2ZL4VYDMQPD5QQ2YM2WYINLYLRQ4TI+0x20>
    e022:	2001      	movs	r0, #1
    e024:	4770      	bx	lr
    e026:	2000      	movs	r0, #0
    e028:	4770      	bx	lr

0000e02a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA>:
    e02a:	b510      	push	{r4, lr}
    e02c:	29fb      	cmp	r1, #251	; 0xfb
    e02e:	d904      	bls.n	e03a <sym_Z7V4WMT2JDSQSNPCH2UEJH6H44L3L7UHMRIWAOA+0x10>
    e030:	f44f 61af 	mov.w	r1, #1400	; 0x578
    e034:	202a      	movs	r0, #42	; 0x2a
    e036:	f7f5 ff43 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e03a:	7041      	strb	r1, [r0, #1]
    e03c:	bd10      	pop	{r4, pc}

0000e03e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA>:
    e03e:	7901      	ldrb	r1, [r0, #4]
    e040:	0749      	lsls	r1, r1, #29
    e042:	d004      	beq.n	e04e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e044:	7940      	ldrb	r0, [r0, #5]
    e046:	0740      	lsls	r0, r0, #29
    e048:	d001      	beq.n	e04e <sym_RPQNXSNTPADDKXP5RSAMGT6PEA6HJ6WJSJ5DQUA+0x10>
    e04a:	2001      	movs	r0, #1
    e04c:	4770      	bx	lr
    e04e:	2000      	movs	r0, #0
    e050:	4770      	bx	lr

0000e052 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA>:
    e052:	7901      	ldrb	r1, [r0, #4]
    e054:	0749      	lsls	r1, r1, #29
    e056:	d004      	beq.n	e062 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    e058:	7940      	ldrb	r0, [r0, #5]
    e05a:	0740      	lsls	r0, r0, #29
    e05c:	d001      	beq.n	e062 <sym_6W4RP5FPB5JCJO3Z5DC4X4Z32EKMYTMZXAB3SJA+0x10>
    e05e:	2001      	movs	r0, #1
    e060:	4770      	bx	lr
    e062:	2000      	movs	r0, #0
    e064:	4770      	bx	lr

0000e066 <sym_V37KOABA26BNKOPPXCRMHM2FBYFAD7NU4IA7EIQ>:
    e066:	7900      	ldrb	r0, [r0, #4]
    e068:	4770      	bx	lr

0000e06a <sym_I6A5ME4L4BDSYALCIKK2V6NRQKRM5QI7WNBE2CA>:
    e06a:	7940      	ldrb	r0, [r0, #5]
    e06c:	4770      	bx	lr

0000e06e <sym_2AEWUZQ66QOZRZKHF7IFSSSWOGAXMPPQQH7267Y>:
    e06e:	7101      	strb	r1, [r0, #4]
    e070:	4770      	bx	lr

0000e072 <sym_AG7JDKFTDFANNIOBH4HEQO2XNU7V2OR3R525SOY>:
    e072:	7141      	strb	r1, [r0, #5]
    e074:	4770      	bx	lr

0000e076 <sym_47DI4XEWQVELMHMLOG3QAORXTXBJNEQQCHBWGXA>:
    e076:	680a      	ldr	r2, [r1, #0]
    e078:	6042      	str	r2, [r0, #4]
    e07a:	7909      	ldrb	r1, [r1, #4]
    e07c:	7201      	strb	r1, [r0, #8]
    e07e:	4770      	bx	lr

0000e080 <sym_6EFQIFZR7CWLGBOQEIRVR6K5AC52XVCYTE4XHAY>:
    e080:	72c1      	strb	r1, [r0, #11]
    e082:	0a09      	lsrs	r1, r1, #8
    e084:	7301      	strb	r1, [r0, #12]
    e086:	4770      	bx	lr

0000e088 <sym_5AB6G7P3OU7ZCZERFQQ76H5BVT7C7GOOIDMBNLI>:
    e088:	8809      	ldrh	r1, [r1, #0]
    e08a:	8181      	strh	r1, [r0, #12]
    e08c:	4770      	bx	lr

0000e08e <sym_5QKH3OGOQJ554S7QC42VJ26GHXIZTOVH7N4IVXI>:
    e08e:	6809      	ldr	r1, [r1, #0]
    e090:	f8c0 1016 	str.w	r1, [r0, #22]
    e094:	4770      	bx	lr

0000e096 <sym_4JD2S6UEQ3QU45WT6P4HQLI6XCMF5KD55A47NOY>:
    e096:	680a      	ldr	r2, [r1, #0]
    e098:	6042      	str	r2, [r0, #4]
    e09a:	6849      	ldr	r1, [r1, #4]
    e09c:	6081      	str	r1, [r0, #8]
    e09e:	4770      	bx	lr

0000e0a0 <sym_LUKCLDHCNTYPIERXKRT6RV5FM4MXDAYATWAIXQY>:
    e0a0:	680a      	ldr	r2, [r1, #0]
    e0a2:	f840 2f0e 	str.w	r2, [r0, #14]!
    e0a6:	6849      	ldr	r1, [r1, #4]
    e0a8:	6041      	str	r1, [r0, #4]
    e0aa:	4770      	bx	lr

0000e0ac <sym_ALFHFCPCHQINI4F6NU6LJJP26B4M2FERQPHDBAI>:
    e0ac:	680a      	ldr	r2, [r1, #0]
    e0ae:	6042      	str	r2, [r0, #4]
    e0b0:	6849      	ldr	r1, [r1, #4]
    e0b2:	6081      	str	r1, [r0, #8]
    e0b4:	4770      	bx	lr

0000e0b6 <sym_KWWW3Q4Z6LMHA6EXR6CMFCOS3QXXZ636XUAHVBY>:
    e0b6:	7802      	ldrb	r2, [r0, #0]
    e0b8:	f001 0103 	and.w	r1, r1, #3
    e0bc:	f022 0203 	bic.w	r2, r2, #3
    e0c0:	430a      	orrs	r2, r1
    e0c2:	7002      	strb	r2, [r0, #0]
    e0c4:	4770      	bx	lr

0000e0c6 <sym_UFYK3MJMYTFXIMHFKFU3DLI2D3SWWQG22T3SKXY>:
    e0c6:	7101      	strb	r1, [r0, #4]
    e0c8:	4770      	bx	lr

0000e0ca <sym_5WASOMRPEYEGPJYIYCZL3MI6RFVOLW4PF3WQWXQ>:
    e0ca:	7101      	strb	r1, [r0, #4]
    e0cc:	0a09      	lsrs	r1, r1, #8
    e0ce:	7141      	strb	r1, [r0, #5]
    e0d0:	4770      	bx	lr

0000e0d2 <sym_65OGIL725U6FQPGLZMGDICIUHB5S2P2UG7UZGMY>:
    e0d2:	7181      	strb	r1, [r0, #6]
    e0d4:	0a09      	lsrs	r1, r1, #8
    e0d6:	71c1      	strb	r1, [r0, #7]
    e0d8:	4770      	bx	lr

0000e0da <sym_DPBBMGOHRJRJWIFBTEHPLVVPOEIMHXK2HYFFW2A>:
    e0da:	7201      	strb	r1, [r0, #8]
    e0dc:	0a09      	lsrs	r1, r1, #8
    e0de:	7241      	strb	r1, [r0, #9]
    e0e0:	4770      	bx	lr

0000e0e2 <sym_F72ACBYKMJPI25JMH6PCTUEZPH6HMPJHM2HMJDY>:
    e0e2:	7281      	strb	r1, [r0, #10]
    e0e4:	0a09      	lsrs	r1, r1, #8
    e0e6:	72c1      	strb	r1, [r0, #11]
    e0e8:	4770      	bx	lr

0000e0ea <sym_TBET44R4FJLPNUXA63JUSKM5XFPHAMK3HNPAA4Q>:
    e0ea:	7181      	strb	r1, [r0, #6]
    e0ec:	0a09      	lsrs	r1, r1, #8
    e0ee:	71c1      	strb	r1, [r0, #7]
    e0f0:	4770      	bx	lr

0000e0f2 <sym_TW74WOC4KXCLZWAAKHVQNK3WZF2RUZYPAI2JBCY>:
    e0f2:	7141      	strb	r1, [r0, #5]
    e0f4:	4770      	bx	lr

0000e0f6 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ>:
    e0f6:	7841      	ldrb	r1, [r0, #1]
    e0f8:	7800      	ldrb	r0, [r0, #0]
    e0fa:	f010 000f 	ands.w	r0, r0, #15
    e0fe:	d005      	beq.n	e10c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    e100:	2801      	cmp	r0, #1
    e102:	d007      	beq.n	e114 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x1e>
    e104:	2802      	cmp	r0, #2
    e106:	d001      	beq.n	e10c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x16>
    e108:	2806      	cmp	r0, #6
    e10a:	d105      	bne.n	e118 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    e10c:	1f89      	subs	r1, r1, #6
    e10e:	291f      	cmp	r1, #31
    e110:	d904      	bls.n	e11c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    e112:	e001      	b.n	e118 <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x22>
    e114:	290c      	cmp	r1, #12
    e116:	d001      	beq.n	e11c <sym_QK3E4NZKHCNMFGX3DNNKIGCLY2REMKD2JBKOWZQ+0x26>
    e118:	2000      	movs	r0, #0
    e11a:	4770      	bx	lr
    e11c:	2001      	movs	r0, #1
    e11e:	4770      	bx	lr

0000e120 <sym_S6OULKDJTKEX22F3J634D4SCLUGD4PGWJKJE25Y>:
    e120:	7800      	ldrb	r0, [r0, #0]
    e122:	09c0      	lsrs	r0, r0, #7
    e124:	4770      	bx	lr

0000e126 <sym_CCESLIOCGU3VBJATTC6PPH4SR5FFTYRDAD3D4QI>:
    e126:	f850 2f03 	ldr.w	r2, [r0, #3]!
    e12a:	600a      	str	r2, [r1, #0]
    e12c:	8880      	ldrh	r0, [r0, #4]
    e12e:	8088      	strh	r0, [r1, #4]
    e130:	4770      	bx	lr

0000e132 <sym_6DB5RCXOJPQOKFFU6NVPIKFFBDKKQHZ2G3RH4MY>:
    e132:	7800      	ldrb	r0, [r0, #0]
    e134:	f3c0 1080 	ubfx	r0, r0, #6, #1
    e138:	4770      	bx	lr

0000e13a <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI>:
    e13a:	7801      	ldrb	r1, [r0, #0]
    e13c:	f001 010f 	and.w	r1, r1, #15
    e140:	2904      	cmp	r1, #4
    e142:	d105      	bne.n	e150 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    e144:	7840      	ldrb	r0, [r0, #1]
    e146:	1f80      	subs	r0, r0, #6
    e148:	281f      	cmp	r0, #31
    e14a:	d801      	bhi.n	e150 <sym_Y33RLJYQRL6DT5FLCUJE4QFV5XO3CHTWHCBVOEI+0x16>
    e14c:	2001      	movs	r0, #1
    e14e:	4770      	bx	lr
    e150:	2000      	movs	r0, #0
    e152:	4770      	bx	lr

0000e154 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY>:
    e154:	b510      	push	{r4, lr}
    e156:	7802      	ldrb	r2, [r0, #0]
    e158:	f001 030f 	and.w	r3, r1, #15
    e15c:	f022 020f 	bic.w	r2, r2, #15
    e160:	431a      	orrs	r2, r3
    e162:	7002      	strb	r2, [r0, #0]
    e164:	2907      	cmp	r1, #7
    e166:	d20c      	bcs.n	e182 <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2e>
    e168:	e8df f001 	tbb	[pc, r1]
    e16c:	06040604 	.word	0x06040604
    e170:	00040804 	.word	0x00040804
    e174:	2106      	movs	r1, #6
    e176:	e002      	b.n	e17e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e178:	210c      	movs	r1, #12
    e17a:	e000      	b.n	e17e <sym_ZJ2REXSOGBKJNHWVNXMDASZYI7CQBWWO2RMVAVY+0x2a>
    e17c:	2122      	movs	r1, #34	; 0x22
    e17e:	7041      	strb	r1, [r0, #1]
    e180:	bd10      	pop	{r4, pc}
    e182:	216e      	movs	r1, #110	; 0x6e
    e184:	202a      	movs	r0, #42	; 0x2a
    e186:	f7f5 fe9b 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e18a <sym_6GC7CC2BUFLCMQVOZDACHKZEET4WUCXSLEMHSCY>:
    e18a:	680a      	ldr	r2, [r1, #0]
    e18c:	f840 2f09 	str.w	r2, [r0, #9]!
    e190:	8889      	ldrh	r1, [r1, #4]
    e192:	8081      	strh	r1, [r0, #4]
    e194:	4770      	bx	lr

0000e196 <sym_6FJEZEEBKMCAKI6FMPGNQ7TUXYDPYPEPSNJFOMQ>:
    e196:	7802      	ldrb	r2, [r0, #0]
    e198:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    e19c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
    e1a0:	7002      	strb	r2, [r0, #0]
    e1a2:	4770      	bx	lr

0000e1a4 <sym_5JID42ESVW3PB7AVBNALO6R7DLTBIV3DUQMUPQY>:
    e1a4:	680a      	ldr	r2, [r1, #0]
    e1a6:	f840 2f03 	str.w	r2, [r0, #3]!
    e1aa:	8889      	ldrh	r1, [r1, #4]
    e1ac:	8081      	strh	r1, [r0, #4]
    e1ae:	4770      	bx	lr

0000e1b0 <sym_K5Q3WMSYKQOD5SDB35E6WH2TTH6JWICUFV7AXJA>:
    e1b0:	7802      	ldrb	r2, [r0, #0]
    e1b2:	2340      	movs	r3, #64	; 0x40
    e1b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    e1b8:	ea03 1181 	and.w	r1, r3, r1, lsl #6
    e1bc:	430a      	orrs	r2, r1
    e1be:	7002      	strb	r2, [r0, #0]
    e1c0:	4770      	bx	lr

0000e1c2 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I>:
    e1c2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e1c6:	4604      	mov	r4, r0
    e1c8:	2000      	movs	r0, #0
    e1ca:	f7f6 f85d 	bl	4288 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e1ce:	2600      	movs	r6, #0
    e1d0:	4605      	mov	r5, r0
    e1d2:	4637      	mov	r7, r6
    e1d4:	e00e      	b.n	e1f4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x32>
    e1d6:	8820      	ldrh	r0, [r4, #0]
    e1d8:	1c40      	adds	r0, r0, #1
    e1da:	b280      	uxth	r0, r0
    e1dc:	8020      	strh	r0, [r4, #0]
    e1de:	42a8      	cmp	r0, r5
    e1e0:	d300      	bcc.n	e1e4 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x22>
    e1e2:	8027      	strh	r7, [r4, #0]
    e1e4:	8820      	ldrh	r0, [r4, #0]
    e1e6:	4669      	mov	r1, sp
    e1e8:	f7ff fc85 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e1ec:	2800      	cmp	r0, #0
    e1ee:	d007      	beq.n	e200 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x3e>
    e1f0:	1c76      	adds	r6, r6, #1
    e1f2:	b2f6      	uxtb	r6, r6
    e1f4:	42ae      	cmp	r6, r5
    e1f6:	d3ee      	bcc.n	e1d6 <sym_G7K5H2CRWCUUAX5LJNXCL36PP3OLK3XX7TBLE3I+0x14>
    e1f8:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e1fc:	8020      	strh	r0, [r4, #0]
    e1fe:	2012      	movs	r0, #18
    e200:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}

0000e204 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA>:
    e204:	b510      	push	{r4, lr}
    e206:	7901      	ldrb	r1, [r0, #4]
    e208:	b119      	cbz	r1, e212 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xe>
    e20a:	2901      	cmp	r1, #1
    e20c:	d006      	beq.n	e21c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x18>
    e20e:	2000      	movs	r0, #0
    e210:	bd10      	pop	{r4, pc}
    e212:	8842      	ldrh	r2, [r0, #2]
    e214:	6883      	ldr	r3, [r0, #8]
    e216:	8800      	ldrh	r0, [r0, #0]
    e218:	2102      	movs	r1, #2
    e21a:	e003      	b.n	e224 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x20>
    e21c:	8842      	ldrh	r2, [r0, #2]
    e21e:	6883      	ldr	r3, [r0, #8]
    e220:	8800      	ldrh	r0, [r0, #0]
    e222:	2101      	movs	r1, #1
    e224:	f7f7 fec8 	bl	5fb8 <sym_BBCGHL23UJV466BYW2SHQ2OBUQH4NLFTPMY4GQA+0x54>
    e228:	b908      	cbnz	r0, e22e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x2a>
    e22a:	f7f7 ff13 	bl	6054 <sym_HHT5YV37VWRBGUMO4AOJUKOJARZKAH2OUWPZF7Q>
    e22e:	2001      	movs	r0, #1
    e230:	bd10      	pop	{r4, pc}
    e232:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e236:	460e      	mov	r6, r1
    e238:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    e23c:	4617      	mov	r7, r2
    e23e:	39ff      	subs	r1, #255	; 0xff
    e240:	d014      	beq.n	e26c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e242:	8030      	strh	r0, [r6, #0]
    e244:	2100      	movs	r1, #0
    e246:	7171      	strb	r1, [r6, #5]
    e248:	f7f6 fa38 	bl	46bc <sym_YNBBHT54WKEGUNVC6TSBMRGLF67VFWBOYEMKGTQ>
    e24c:	4604      	mov	r4, r0
    e24e:	f7ff f912 	bl	d476 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e252:	0005      	movs	r5, r0
    e254:	d00a      	beq.n	e26c <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x68>
    e256:	4620      	mov	r0, r4
    e258:	4629      	mov	r1, r5
    e25a:	aa01      	add	r2, sp, #4
    e25c:	f7ff f93c 	bl	d4d8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e260:	8070      	strh	r0, [r6, #2]
    e262:	b130      	cbz	r0, e272 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6e>
    e264:	28fb      	cmp	r0, #251	; 0xfb
    e266:	d906      	bls.n	e276 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x72>
    e268:	21ae      	movs	r1, #174	; 0xae
    e26a:	e026      	b.n	e2ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e26c:	2000      	movs	r0, #0
    e26e:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e272:	21ad      	movs	r1, #173	; 0xad
    e274:	e021      	b.n	e2ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e276:	9801      	ldr	r0, [sp, #4]
    e278:	f7ff feb5 	bl	dfe6 <sym_66SPI42RVSYPTJAEZPQR5PX32WQ6ZUXVEH3D2OI>
    e27c:	2801      	cmp	r0, #1
    e27e:	d003      	beq.n	e288 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e280:	2802      	cmp	r0, #2
    e282:	d001      	beq.n	e288 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x84>
    e284:	21bd      	movs	r1, #189	; 0xbd
    e286:	e018      	b.n	e2ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e288:	7130      	strb	r0, [r6, #4]
    e28a:	4629      	mov	r1, r5
    e28c:	8873      	ldrh	r3, [r6, #2]
    e28e:	2503      	movs	r5, #3
    e290:	4620      	mov	r0, r4
    e292:	463a      	mov	r2, r7
    e294:	9500      	str	r5, [sp, #0]
    e296:	f7fe ffc5 	bl	d224 <sym_BZ7Z4RQ3DCP67RU5HKR6L76AI2EU62TP34WUI5Q>
    e29a:	4620      	mov	r0, r4
    e29c:	60b7      	str	r7, [r6, #8]
    e29e:	f7ff f899 	bl	d3d4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e2a2:	b138      	cbz	r0, e2b4 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb0>
    e2a4:	2100      	movs	r1, #0
    e2a6:	4620      	mov	r0, r4
    e2a8:	460a      	mov	r2, r1
    e2aa:	f7ff f9f3 	bl	d694 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e2ae:	b118      	cbz	r0, e2b8 <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb4>
    e2b0:	2001      	movs	r0, #1
    e2b2:	e7dc      	b.n	e26e <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0x6a>
    e2b4:	21cd      	movs	r1, #205	; 0xcd
    e2b6:	e000      	b.n	e2ba <sym_ZUFGUNQKQRINYDDQ2AFT3BJLR3IFVV6WJFPT3PA+0xb6>
    e2b8:	21d2      	movs	r1, #210	; 0xd2
    e2ba:	202b      	movs	r0, #43	; 0x2b
    e2bc:	f7f5 fe00 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e2c0 <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ>:
    e2c0:	f7f8 b8c4 	b.w	644c <sym_BCSH7PD4Q4QIK5BWG4INRF5QVCQGG4KDPBAQS5Q+0x2e0>
    e2c4:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    e2c8:	4604      	mov	r4, r0
    e2ca:	2000      	movs	r0, #0
    e2cc:	f7f5 ffdc 	bl	4288 <sym_XHE47EZYHONCPR22HUAZULMCALDJINMYREOFDEI>
    e2d0:	4605      	mov	r5, r0
    e2d2:	1c40      	adds	r0, r0, #1
    e2d4:	2600      	movs	r6, #0
    e2d6:	b2c7      	uxtb	r7, r0
    e2d8:	46b0      	mov	r8, r6
    e2da:	e017      	b.n	e30c <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x4c>
    e2dc:	8820      	ldrh	r0, [r4, #0]
    e2de:	1c40      	adds	r0, r0, #1
    e2e0:	b280      	uxth	r0, r0
    e2e2:	8020      	strh	r0, [r4, #0]
    e2e4:	42b8      	cmp	r0, r7
    e2e6:	d302      	bcc.n	e2ee <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x2e>
    e2e8:	4640      	mov	r0, r8
    e2ea:	f8a4 8000 	strh.w	r8, [r4]
    e2ee:	b280      	uxth	r0, r0
    e2f0:	42a8      	cmp	r0, r5
    e2f2:	d304      	bcc.n	e2fe <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    e2f4:	42b8      	cmp	r0, r7
    e2f6:	d202      	bcs.n	e2fe <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3e>
    e2f8:	2000      	movs	r0, #0
    e2fa:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    e2fe:	4669      	mov	r1, sp
    e300:	f7ff fbf9 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    e304:	2800      	cmp	r0, #0
    e306:	d0f8      	beq.n	e2fa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>
    e308:	1c76      	adds	r6, r6, #1
    e30a:	b2f6      	uxtb	r6, r6
    e30c:	42be      	cmp	r6, r7
    e30e:	d3e5      	bcc.n	e2dc <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x1c>
    e310:	f64f 70ff 	movw	r0, #65535	; 0xffff
    e314:	8020      	strh	r0, [r4, #0]
    e316:	2012      	movs	r0, #18
    e318:	e7ef      	b.n	e2fa <sym_5G7NLKZS4L5IIOBRUSBNVX2FPWE5MWDV7ZI2IXQ+0x3a>

0000e31a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY>:
    e31a:	b570      	push	{r4, r5, r6, lr}
    e31c:	8050      	strh	r0, [r2, #2]
    e31e:	890c      	ldrh	r4, [r1, #8]
    e320:	8094      	strh	r4, [r2, #4]
    e322:	898b      	ldrh	r3, [r1, #12]
    e324:	80d3      	strh	r3, [r2, #6]
    e326:	8948      	ldrh	r0, [r1, #10]
    e328:	8110      	strh	r0, [r2, #8]
    e32a:	89cd      	ldrh	r5, [r1, #14]
    e32c:	8155      	strh	r5, [r2, #10]
    e32e:	8dce      	ldrh	r6, [r1, #46]	; 0x2e
    e330:	42ae      	cmp	r6, r5
    e332:	d108      	bne.n	e346 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e334:	8d4d      	ldrh	r5, [r1, #42]	; 0x2a
    e336:	4285      	cmp	r5, r0
    e338:	d105      	bne.n	e346 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e33a:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
    e33c:	429d      	cmp	r5, r3
    e33e:	d102      	bne.n	e346 <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x2c>
    e340:	8d8b      	ldrh	r3, [r1, #44]	; 0x2c
    e342:	42a3      	cmp	r3, r4
    e344:	d001      	beq.n	e34a <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x30>
    e346:	2301      	movs	r3, #1
    e348:	e000      	b.n	e34c <sym_KQELUVJKUXDWI537IIFYFUVTNDSZOYYQ6RIVVLY+0x32>
    e34a:	2300      	movs	r3, #0
    e34c:	7313      	strb	r3, [r2, #12]
    e34e:	8548      	strh	r0, [r1, #42]	; 0x2a
    e350:	8950      	ldrh	r0, [r2, #10]
    e352:	85c8      	strh	r0, [r1, #46]	; 0x2e
    e354:	8890      	ldrh	r0, [r2, #4]
    e356:	8588      	strh	r0, [r1, #44]	; 0x2c
    e358:	88d0      	ldrh	r0, [r2, #6]
    e35a:	8608      	strh	r0, [r1, #48]	; 0x30
    e35c:	2001      	movs	r0, #1
    e35e:	7010      	strb	r0, [r2, #0]
    e360:	bd70      	pop	{r4, r5, r6, pc}

0000e362 <sym_436OKKOGR27QX7FMSZKYSEYLCMU4ZXR5RN4XUBY>:
    e362:	b510      	push	{r4, lr}
    e364:	888c      	ldrh	r4, [r1, #4]
    e366:	890a      	ldrh	r2, [r1, #8]
    e368:	884b      	ldrh	r3, [r1, #2]
    e36a:	88c9      	ldrh	r1, [r1, #6]
    e36c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
    e370:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
    e374:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
    e378:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
    e37c:	bd10      	pop	{r4, pc}

0000e37e <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI>:
    e37e:	b570      	push	{r4, r5, r6, lr}
    e380:	4615      	mov	r5, r2
    e382:	460c      	mov	r4, r1
    e384:	f000 f8c7 	bl	e516 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e388:	3096      	adds	r0, #150	; 0x96
    e38a:	4428      	add	r0, r5
    e38c:	42a0      	cmp	r0, r4
    e38e:	d801      	bhi.n	e394 <sym_XRSFUVJVALTQXGE7INRI3M6HEEON3PEMDM73SDI+0x16>
    e390:	1a20      	subs	r0, r4, r0
    e392:	bd70      	pop	{r4, r5, r6, pc}
    e394:	2000      	movs	r0, #0
    e396:	bd70      	pop	{r4, r5, r6, pc}

0000e398 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q>:
    e398:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e39c:	4604      	mov	r4, r0
    e39e:	8ec7      	ldrh	r7, [r0, #54]	; 0x36
    e3a0:	8f46      	ldrh	r6, [r0, #58]	; 0x3a
    e3a2:	f8b0 504c 	ldrh.w	r5, [r0, #76]	; 0x4c
    e3a6:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
    e3aa:	4285      	cmp	r5, r0
    e3ac:	d300      	bcc.n	e3b0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x18>
    e3ae:	4605      	mov	r5, r0
    e3b0:	4620      	mov	r0, r4
    e3b2:	f894 106b 	ldrb.w	r1, [r4, #107]	; 0x6b
    e3b6:	f000 f89e 	bl	e4f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e3ba:	4601      	mov	r1, r0
    e3bc:	86e5      	strh	r5, [r4, #54]	; 0x36
    e3be:	8761      	strh	r1, [r4, #58]	; 0x3a
    e3c0:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
    e3c2:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    e3c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
    e3c8:	4680      	mov	r8, r0
    e3ca:	42aa      	cmp	r2, r5
    e3cc:	d200      	bcs.n	e3d0 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x38>
    e3ce:	462a      	mov	r2, r5
    e3d0:	428b      	cmp	r3, r1
    e3d2:	d200      	bcs.n	e3d6 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x3e>
    e3d4:	460b      	mov	r3, r1
    e3d6:	8202      	strh	r2, [r0, #16]
    e3d8:	f8a8 3012 	strh.w	r3, [r8, #18]
    e3dc:	42bd      	cmp	r5, r7
    e3de:	d101      	bne.n	e3e4 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x4c>
    e3e0:	42b1      	cmp	r1, r6
    e3e2:	d001      	beq.n	e3e8 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x50>
    e3e4:	2001      	movs	r0, #1
    e3e6:	e000      	b.n	e3ea <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x52>
    e3e8:	2000      	movs	r0, #0
    e3ea:	4681      	mov	r9, r0
    e3ec:	f8b4 5048 	ldrh.w	r5, [r4, #72]	; 0x48
    e3f0:	f8b4 0042 	ldrh.w	r0, [r4, #66]	; 0x42
    e3f4:	8ea7      	ldrh	r7, [r4, #52]	; 0x34
    e3f6:	8f26      	ldrh	r6, [r4, #56]	; 0x38
    e3f8:	4285      	cmp	r5, r0
    e3fa:	d300      	bcc.n	e3fe <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x66>
    e3fc:	4605      	mov	r5, r0
    e3fe:	f894 106a 	ldrb.w	r1, [r4, #106]	; 0x6a
    e402:	4620      	mov	r0, r4
    e404:	f000 f87f 	bl	e506 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e408:	f894 1060 	ldrb.w	r1, [r4, #96]	; 0x60
    e40c:	2902      	cmp	r1, #2
    e40e:	d108      	bne.n	e422 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x8a>
    e410:	42af      	cmp	r7, r5
    e412:	d200      	bcs.n	e416 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x7e>
    e414:	463d      	mov	r5, r7
    e416:	4286      	cmp	r6, r0
    e418:	d200      	bcs.n	e41c <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x84>
    e41a:	4630      	mov	r0, r6
    e41c:	2100      	movs	r1, #0
    e41e:	f884 1060 	strb.w	r1, [r4, #96]	; 0x60
    e422:	f8a8 5008 	strh.w	r5, [r8, #8]
    e426:	f8a8 000c 	strh.w	r0, [r8, #12]
    e42a:	42bd      	cmp	r5, r7
    e42c:	d101      	bne.n	e432 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9a>
    e42e:	42b0      	cmp	r0, r6
    e430:	d001      	beq.n	e436 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0x9e>
    e432:	2001      	movs	r0, #1
    e434:	e000      	b.n	e438 <sym_IPYDOGNKVSD5CNASNRZPFKSG4XKU4ZG4SVERI7Q+0xa0>
    e436:	2000      	movs	r0, #0
    e438:	ea40 0009 	orr.w	r0, r0, r9
    e43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000e440 <sym_2T6ENJKRE7MWBMC42J5L6S3EMUNPYUXCPAHD23A>:
    e440:	6840      	ldr	r0, [r0, #4]
    e442:	4770      	bx	lr

0000e444 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>:
    e444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e448:	4616      	mov	r6, r2
    e44a:	460f      	mov	r7, r1
    e44c:	4604      	mov	r4, r0
    e44e:	f000 f862 	bl	e516 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x54>
    e452:	4605      	mov	r5, r0
    e454:	463a      	mov	r2, r7
    e456:	68e1      	ldr	r1, [r4, #12]
    e458:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    e45a:	f000 f847 	bl	e4ec <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x2a>
    e45e:	19a9      	adds	r1, r5, r6
    e460:	4281      	cmp	r1, r0
    e462:	d300      	bcc.n	e466 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY+0x22>
    e464:	4608      	mov	r0, r1
    e466:	6320      	str	r0, [r4, #48]	; 0x30
    e468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e46c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ>:
    e46c:	221b      	movs	r2, #27
    e46e:	8402      	strh	r2, [r0, #32]
    e470:	8382      	strh	r2, [r0, #28]
    e472:	82c2      	strh	r2, [r0, #22]
    e474:	8282      	strh	r2, [r0, #20]
    e476:	8142      	strh	r2, [r0, #10]
    e478:	8202      	strh	r2, [r0, #16]
    e47a:	8102      	strh	r2, [r0, #8]
    e47c:	8542      	strh	r2, [r0, #42]	; 0x2a
    e47e:	8582      	strh	r2, [r0, #44]	; 0x2c
    e480:	8482      	strh	r2, [r0, #36]	; 0x24
    e482:	2900      	cmp	r1, #0
    e484:	d10a      	bne.n	e49c <sym_43VAZS4NQXUMOPHD7W7SYFZ3WJ6KGQYQH6UOYPQ+0x30>
    e486:	f44f 71a4 	mov.w	r1, #328	; 0x148
    e48a:	8441      	strh	r1, [r0, #34]	; 0x22
    e48c:	83c1      	strh	r1, [r0, #30]
    e48e:	8341      	strh	r1, [r0, #26]
    e490:	8301      	strh	r1, [r0, #24]
    e492:	81c1      	strh	r1, [r0, #14]
    e494:	8241      	strh	r1, [r0, #18]
    e496:	8181      	strh	r1, [r0, #12]
    e498:	85c1      	strh	r1, [r0, #46]	; 0x2e
    e49a:	8601      	strh	r1, [r0, #48]	; 0x30
    e49c:	4770      	bx	lr

0000e49e <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A>:
    e49e:	6800      	ldr	r0, [r0, #0]
    e4a0:	f101 029c 	add.w	r2, r1, #156	; 0x9c
    e4a4:	4290      	cmp	r0, r2
    e4a6:	d903      	bls.n	e4b0 <sym_NEHMDBQBGZXV6OFKIS4NBQDVMDAPMSPSGUQZB7A+0x12>
    e4a8:	1a40      	subs	r0, r0, r1
    e4aa:	389c      	subs	r0, #156	; 0x9c
    e4ac:	0840      	lsrs	r0, r0, #1
    e4ae:	4770      	bx	lr
    e4b0:	2000      	movs	r0, #0
    e4b2:	4770      	bx	lr

0000e4b4 <sym_ONVPV2DV6OK6HG537JAHRS5B7G22RD24D2QGM5A>:
    e4b4:	b510      	push	{r4, lr}
    e4b6:	9c02      	ldr	r4, [sp, #8]
    e4b8:	8281      	strh	r1, [r0, #20]
    e4ba:	82c2      	strh	r2, [r0, #22]
    e4bc:	8303      	strh	r3, [r0, #24]
    e4be:	8344      	strh	r4, [r0, #26]
    e4c0:	bd10      	pop	{r4, pc}

0000e4c2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I>:
    e4c2:	8050      	strh	r0, [r2, #2]
    e4c4:	8a88      	ldrh	r0, [r1, #20]
    e4c6:	8090      	strh	r0, [r2, #4]
    e4c8:	8ac8      	ldrh	r0, [r1, #22]
    e4ca:	80d0      	strh	r0, [r2, #6]
    e4cc:	8b08      	ldrh	r0, [r1, #24]
    e4ce:	8110      	strh	r0, [r2, #8]
    e4d0:	8b48      	ldrh	r0, [r1, #26]
    e4d2:	8150      	strh	r0, [r2, #10]
    e4d4:	2001      	movs	r0, #1
    e4d6:	7010      	strb	r0, [r2, #0]
    e4d8:	4770      	bx	lr
    e4da:	2902      	cmp	r1, #2
    e4dc:	d003      	beq.n	e4e6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x24>
    e4de:	00c0      	lsls	r0, r0, #3
    e4e0:	3070      	adds	r0, #112	; 0x70
    e4e2:	b280      	uxth	r0, r0
    e4e4:	4770      	bx	lr
    e4e6:	0080      	lsls	r0, r0, #2
    e4e8:	303c      	adds	r0, #60	; 0x3c
    e4ea:	e7fa      	b.n	e4e2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x20>
    e4ec:	4288      	cmp	r0, r1
    e4ee:	d300      	bcc.n	e4f2 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x30>
    e4f0:	4608      	mov	r0, r1
    e4f2:	1a80      	subs	r0, r0, r2
    e4f4:	4770      	bx	lr
    e4f6:	f8b0 104e 	ldrh.w	r1, [r0, #78]	; 0x4e
    e4fa:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
    e4fe:	4281      	cmp	r1, r0
    e500:	d200      	bcs.n	e504 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x42>
    e502:	4608      	mov	r0, r1
    e504:	4770      	bx	lr
    e506:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
    e50a:	f8b0 0046 	ldrh.w	r0, [r0, #70]	; 0x46
    e50e:	4281      	cmp	r1, r0
    e510:	d200      	bcs.n	e514 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x52>
    e512:	4608      	mov	r0, r1
    e514:	4770      	bx	lr
    e516:	2196      	movs	r1, #150	; 0x96
    e518:	f890 306b 	ldrb.w	r3, [r0, #107]	; 0x6b
    e51c:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
    e520:	f000 b800 	b.w	e524 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x62>
    e524:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e528:	460d      	mov	r5, r1
    e52a:	4606      	mov	r6, r0
    e52c:	4698      	mov	r8, r3
    e52e:	4617      	mov	r7, r2
    e530:	8e80      	ldrh	r0, [r0, #52]	; 0x34
    e532:	4611      	mov	r1, r2
    e534:	f7ff ffd1 	bl	e4da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e538:	4604      	mov	r4, r0
    e53a:	4639      	mov	r1, r7
    e53c:	4630      	mov	r0, r6
    e53e:	f7ff ffe2 	bl	e506 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x44>
    e542:	42a0      	cmp	r0, r4
    e544:	d200      	bcs.n	e548 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x86>
    e546:	4604      	mov	r4, r0
    e548:	8fb0      	ldrh	r0, [r6, #60]	; 0x3c
    e54a:	4641      	mov	r1, r8
    e54c:	f7ff ffc5 	bl	e4da <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x18>
    e550:	4607      	mov	r7, r0
    e552:	4641      	mov	r1, r8
    e554:	4630      	mov	r0, r6
    e556:	f7ff ffce 	bl	e4f6 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x34>
    e55a:	42b8      	cmp	r0, r7
    e55c:	d300      	bcc.n	e560 <sym_FKGRLSJGPWDG44KYHTBA74A2ZDKPDUWGXHS3E2I+0x9e>
    e55e:	4638      	mov	r0, r7
    e560:	4420      	add	r0, r4
    e562:	4428      	add	r0, r5
    e564:	1d80      	adds	r0, r0, #6
    e566:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000e56a <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q>:
    e56a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    e56c:	2700      	movs	r7, #0
    e56e:	463d      	mov	r5, r7
    e570:	2623      	movs	r6, #35	; 0x23
    e572:	f7f8 f81d 	bl	65b0 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA+0x58>
    e576:	4604      	mov	r4, r0
    e578:	f7f7 ffee 	bl	6558 <sym_DOABKABWEXEJSA2H5Z2UO6MFQES34UYN7XL6GMA>
    e57c:	b190      	cbz	r0, e5a4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    e57e:	4669      	mov	r1, sp
    e580:	2000      	movs	r0, #0
    e582:	f7ff f957 	bl	d834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    e586:	e003      	b.n	e590 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x26>
    e588:	9802      	ldr	r0, [sp, #8]
    e58a:	6901      	ldr	r1, [r0, #16]
    e58c:	42a1      	cmp	r1, r4
    e58e:	d009      	beq.n	e5a4 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x3a>
    e590:	4668      	mov	r0, sp
    e592:	f7f5 fec5 	bl	4320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    e596:	2800      	cmp	r0, #0
    e598:	d0f6      	beq.n	e588 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x1e>
    e59a:	4625      	mov	r5, r4
    e59c:	4620      	mov	r0, r4
    e59e:	f7f7 ff9f 	bl	64e0 <sym_HRCF6LWSDWPWEZA7S5YQFCNRDXXCJA6WGOZECRY>
    e5a2:	4607      	mov	r7, r0
    e5a4:	1e76      	subs	r6, r6, #1
    e5a6:	d001      	beq.n	e5ac <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x42>
    e5a8:	2f00      	cmp	r7, #0
    e5aa:	d0e2      	beq.n	e572 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x8>
    e5ac:	b10d      	cbz	r5, e5b2 <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x48>
    e5ae:	4628      	mov	r0, r5
    e5b0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    e5b2:	f240 1177 	movw	r1, #375	; 0x177
    e5b6:	200f      	movs	r0, #15
    e5b8:	f7f5 fc82 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e5bc:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e5c0:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e5c4:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e5c8:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e5cc:	ea00 0040 	and.w	r0, r0, r0, lsl #1
    e5d0:	ea10 0f40 	tst.w	r0, r0, lsl #1
    e5d4:	d001      	beq.n	e5da <sym_DP474BSWQ6W7M27XE2M7XMGWSDEQ3KL66B2SR5Q+0x70>
    e5d6:	2000      	movs	r0, #0
    e5d8:	4770      	bx	lr
    e5da:	2001      	movs	r0, #1
    e5dc:	4770      	bx	lr

0000e5de <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI>:
    e5de:	b510      	push	{r4, lr}
    e5e0:	4604      	mov	r4, r0
    e5e2:	2108      	movs	r1, #8
    e5e4:	4620      	mov	r0, r4
    e5e6:	f7f5 fd15 	bl	4014 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    e5ea:	6820      	ldr	r0, [r4, #0]
    e5ec:	2800      	cmp	r0, #0
    e5ee:	d102      	bne.n	e5f6 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x18>
    e5f0:	6860      	ldr	r0, [r4, #4]
    e5f2:	2800      	cmp	r0, #0
    e5f4:	d0f5      	beq.n	e5e2 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4>
    e5f6:	bd10      	pop	{r4, pc}
    e5f8:	2801      	cmp	r0, #1
    e5fa:	d102      	bne.n	e602 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x24>
    e5fc:	7948      	ldrb	r0, [r1, #5]
    e5fe:	0980      	lsrs	r0, r0, #6
    e600:	d001      	beq.n	e606 <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x28>
    e602:	2000      	movs	r0, #0
    e604:	4770      	bx	lr
    e606:	2001      	movs	r0, #1
    e608:	4770      	bx	lr
    e60a:	2801      	cmp	r0, #1
    e60c:	d106      	bne.n	e61c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e60e:	7948      	ldrb	r0, [r1, #5]
    e610:	2101      	movs	r1, #1
    e612:	ebb1 1f90 	cmp.w	r1, r0, lsr #6
    e616:	d101      	bne.n	e61c <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x3e>
    e618:	2001      	movs	r0, #1
    e61a:	4770      	bx	lr
    e61c:	2000      	movs	r0, #0
    e61e:	4770      	bx	lr
    e620:	b118      	cbz	r0, e62a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    e622:	2802      	cmp	r0, #2
    e624:	d001      	beq.n	e62a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x4c>
    e626:	2001      	movs	r0, #1
    e628:	4770      	bx	lr
    e62a:	2000      	movs	r0, #0
    e62c:	4770      	bx	lr
    e62e:	2802      	cmp	r0, #2
    e630:	d003      	beq.n	e63a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    e632:	2803      	cmp	r0, #3
    e634:	d001      	beq.n	e63a <sym_77ICNIHY2R2L3JRP4ZLMOWZSS3UZRKJXJOBWTWI+0x5c>
    e636:	2000      	movs	r0, #0
    e638:	4770      	bx	lr
    e63a:	2001      	movs	r0, #1
    e63c:	4770      	bx	lr

0000e63e <sym_5SX7ENFQDOZAYBYWRHFJ26FURZRMVA3A5KG2A6A>:
    e63e:	f7f9 b807 	b.w	7650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    e642:	b510      	push	{r4, lr}
    e644:	f7f8 fe52 	bl	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    e648:	f7f8 f9f4 	bl	6a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e64c:	f7fc ffe8 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e650:	2005      	movs	r0, #5
    e652:	bd10      	pop	{r4, pc}
    e654:	b510      	push	{r4, lr}
    e656:	f7f8 fe49 	bl	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    e65a:	f7fc ffe1 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e65e:	2005      	movs	r0, #5
    e660:	bd10      	pop	{r4, pc}
    e662:	b530      	push	{r4, r5, lr}
    e664:	b089      	sub	sp, #36	; 0x24
    e666:	4605      	mov	r5, r0
    e668:	f7f8 fe40 	bl	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    e66c:	7828      	ldrb	r0, [r5, #0]
    e66e:	4669      	mov	r1, sp
    e670:	f000 040f 	and.w	r4, r0, #15
    e674:	4622      	mov	r2, r4
    e676:	4628      	mov	r0, r5
    e678:	f7f9 f9aa 	bl	79d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e67c:	2200      	movs	r2, #0
    e67e:	4621      	mov	r1, r4
    e680:	4668      	mov	r0, sp
    e682:	f7f8 fa57 	bl	6b34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x13c>
    e686:	4621      	mov	r1, r4
    e688:	4668      	mov	r0, sp
    e68a:	f7f8 fdaf 	bl	71ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1ec>
    e68e:	4604      	mov	r4, r0
    e690:	f7f8 f9d0 	bl	6a34 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA+0x3c>
    e694:	b009      	add	sp, #36	; 0x24
    e696:	4620      	mov	r0, r4
    e698:	bd30      	pop	{r4, r5, pc}
    e69a:	f240 21f2 	movw	r1, #754	; 0x2f2
    e69e:	2032      	movs	r0, #50	; 0x32
    e6a0:	f7f5 fc0e 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e6a4:	b510      	push	{r4, lr}
    e6a6:	f7f8 fe21 	bl	72ec <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2ec>
    e6aa:	f7fc ffb9 	bl	b620 <sym_A5S3P57NWYYY5XJWBYERU6H4QSVP5TCTU7HKA5Y>
    e6ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6b2:	f7f8 bfe5 	b.w	7680 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x680>
    e6b6:	f7f8 bfcb 	b.w	7650 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x650>
    e6ba:	f7ff b81f 	b.w	d6fc <sym_4DUZAAZKVNAL6VUHN4XAFX35FQKJS4D7DISLHDI>

0000e6be <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY>:
    e6be:	b5f0      	push	{r4, r5, r6, r7, lr}
    e6c0:	b08b      	sub	sp, #44	; 0x2c
    e6c2:	4607      	mov	r7, r0
    e6c4:	f7f6 f82e 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e6c8:	4604      	mov	r4, r0
    e6ca:	f7fe fed4 	bl	d476 <sym_RZ3AO5KZJYCPFG5YW4CBZQF5SRGN3BPTEGBY47I>
    e6ce:	0005      	movs	r5, r0
    e6d0:	d00c      	beq.n	e6ec <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x2e>
    e6d2:	4620      	mov	r0, r4
    e6d4:	4629      	mov	r1, r5
    e6d6:	466a      	mov	r2, sp
    e6d8:	f7fe fefe 	bl	d4d8 <sym_DY52YMZFQPMDNFDSVZDQLPFIWKOSXIQIEKUVZNY>
    e6dc:	4606      	mov	r6, r0
    e6de:	f7f6 f81b 	bl	4718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e6e2:	42b0      	cmp	r0, r6
    e6e4:	d005      	beq.n	e6f2 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x34>
    e6e6:	f44f 7198 	mov.w	r1, #304	; 0x130
    e6ea:	e033      	b.n	e754 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x96>
    e6ec:	2000      	movs	r0, #0
    e6ee:	b00b      	add	sp, #44	; 0x2c
    e6f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e6f2:	a901      	add	r1, sp, #4
    e6f4:	9800      	ldr	r0, [sp, #0]
    e6f6:	f000 f8b4 	bl	e862 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>
    e6fa:	1d3e      	adds	r6, r7, #4
    e6fc:	4628      	mov	r0, r5
    e6fe:	f7fe fe4e 	bl	d39e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e702:	4605      	mov	r5, r0
    e704:	4601      	mov	r1, r0
    e706:	221c      	movs	r2, #28
    e708:	4630      	mov	r0, r6
    e70a:	f7fd ffe9 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e70e:	7aa8      	ldrb	r0, [r5, #10]
    e710:	f04f 0500 	mov.w	r5, #0
    e714:	06c1      	lsls	r1, r0, #27
    e716:	d50d      	bpl.n	e734 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e718:	0740      	lsls	r0, r0, #29
    e71a:	d40a      	bmi.n	e732 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x74>
    e71c:	f89d 2014 	ldrb.w	r2, [sp, #20]
    e720:	f106 001c 	add.w	r0, r6, #28
    e724:	9904      	ldr	r1, [sp, #16]
    e726:	f7fd ffdb 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    e72a:	f89d 0014 	ldrb.w	r0, [sp, #20]
    e72e:	7230      	strb	r0, [r6, #8]
    e730:	e000      	b.n	e734 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x76>
    e732:	7235      	strb	r5, [r6, #8]
    e734:	707d      	strb	r5, [r7, #1]
    e736:	2005      	movs	r0, #5
    e738:	7038      	strb	r0, [r7, #0]
    e73a:	4620      	mov	r0, r4
    e73c:	f7fe fe4a 	bl	d3d4 <sym_Q4EW623JZHY67RB7U4Z2L2SMI5ENWIDFL23JZHQ>
    e740:	b130      	cbz	r0, e750 <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x92>
    e742:	2100      	movs	r1, #0
    e744:	4620      	mov	r0, r4
    e746:	460a      	mov	r2, r1
    e748:	f7fe ffa4 	bl	d694 <sym_PTZ4EWNTFK5S5TZGCBNFETDF37P4DBX7VGM33II>
    e74c:	2001      	movs	r0, #1
    e74e:	e7ce      	b.n	e6ee <sym_SWPEAXAKUAMV34R7OIS3KZZ6NA7XHQ5XSGDVJZY+0x30>
    e750:	f240 1173 	movw	r1, #371	; 0x173
    e754:	2033      	movs	r0, #51	; 0x33
    e756:	f7f5 fbb3 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000e75a <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>:
    e75a:	b510      	push	{r4, lr}
    e75c:	f7f5 ffe2 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e760:	f000 f874 	bl	e84c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e764:	4604      	mov	r4, r0
    e766:	221c      	movs	r2, #28
    e768:	2100      	movs	r1, #0
    e76a:	f7fe f833 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e76e:	207f      	movs	r0, #127	; 0x7f
    e770:	76a0      	strb	r0, [r4, #26]
    e772:	21ff      	movs	r1, #255	; 0xff
    e774:	73a1      	strb	r1, [r4, #14]
    e776:	7061      	strb	r1, [r4, #1]
    e778:	74e1      	strb	r1, [r4, #19]
    e77a:	7aa0      	ldrb	r0, [r4, #10]
    e77c:	f020 0060 	bic.w	r0, r0, #96	; 0x60
    e780:	3020      	adds	r0, #32
    e782:	72a0      	strb	r0, [r4, #10]
    e784:	bd10      	pop	{r4, pc}

0000e786 <sym_MZZ5CJE5YKBRI3UNENSSXM3SF3FKPPVI2OL74NY>:
    e786:	f7ff bfe8 	b.w	e75a <sym_WRKW4ZRDCQZD7WP3UVLUYVLF6IJ66HL4Q2J3IFY>

0000e78a <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI>:
    e78a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e78e:	461e      	mov	r6, r3
    e790:	4617      	mov	r7, r2
    e792:	4689      	mov	r9, r1
    e794:	4682      	mov	sl, r0
    e796:	f8dd 8020 	ldr.w	r8, [sp, #32]
    e79a:	f7f5 ffc3 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e79e:	4604      	mov	r4, r0
    e7a0:	f7fe fdff 	bl	d3a2 <sym_75KMT5PJCT2CPYG74YP2V776XLQZ7MMXYP3KBVY>
    e7a4:	2801      	cmp	r0, #1
    e7a6:	d034      	beq.n	e812 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x88>
    e7a8:	4620      	mov	r0, r4
    e7aa:	f000 f84f 	bl	e84c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xc2>
    e7ae:	4604      	mov	r4, r0
    e7b0:	221c      	movs	r2, #28
    e7b2:	2100      	movs	r1, #0
    e7b4:	f7fe f80e 	bl	c7d4 <sym_VSILKYHVQ5DVF6LG5MG267DQVA3A2XZQ6FSCLXA>
    e7b8:	2501      	movs	r5, #1
    e7ba:	7025      	strb	r5, [r4, #0]
    e7bc:	1c63      	adds	r3, r4, #1
    e7be:	1ca2      	adds	r2, r4, #2
    e7c0:	4649      	mov	r1, r9
    e7c2:	4650      	mov	r0, sl
    e7c4:	f000 f827 	bl	e816 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x8c>
    e7c8:	f884 8009 	strb.w	r8, [r4, #9]
    e7cc:	7aa0      	ldrb	r0, [r4, #10]
    e7ce:	21ff      	movs	r1, #255	; 0xff
    e7d0:	f367 0000 	bfi	r0, r7, #0, #1
    e7d4:	f040 001a 	orr.w	r0, r0, #26
    e7d8:	72a0      	strb	r0, [r4, #10]
    e7da:	7325      	strb	r5, [r4, #12]
    e7dc:	2000      	movs	r0, #0
    e7de:	7360      	strb	r0, [r4, #13]
    e7e0:	73a1      	strb	r1, [r4, #14]
    e7e2:	74e1      	strb	r1, [r4, #19]
    e7e4:	207f      	movs	r0, #127	; 0x7f
    e7e6:	76a0      	strb	r0, [r4, #26]
    e7e8:	76e6      	strb	r6, [r4, #27]
    e7ea:	f7f5 ff95 	bl	4718 <sym_T2QNNWUTM65WBDBLEARH7OL5MCXHDWSFLTDJXPA>
    e7ee:	4604      	mov	r4, r0
    e7f0:	f7f5 ff98 	bl	4724 <sym_GWOETDUP4AGSQI2MSVZQXBAMRLSGTNS7KFHSH6Q>
    e7f4:	2201      	movs	r2, #1
    e7f6:	4621      	mov	r1, r4
    e7f8:	f000 f831 	bl	e85e <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xd4>
    e7fc:	b120      	cbz	r0, e808 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0x7e>
    e7fe:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e802:	2005      	movs	r0, #5
    e804:	f7f9 b9ac 	b.w	7b60 <sym_DZTS4L2RU3BVZZFRH3V4WKNMY7L544NVD52YT6Q>
    e808:	f240 21c9 	movw	r1, #713	; 0x2c9
    e80c:	2033      	movs	r0, #51	; 0x33
    e80e:	f7f5 fb57 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e816:	b510      	push	{r4, lr}
    e818:	461c      	mov	r4, r3
    e81a:	460b      	mov	r3, r1
    e81c:	29ff      	cmp	r1, #255	; 0xff
    e81e:	d00d      	beq.n	e83c <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xb2>
    e820:	4621      	mov	r1, r4
    e822:	4618      	mov	r0, r3
    e824:	f7f7 f81a 	bl	585c <sym_YAOI5BW7G2C6EUUY2B4S7A3CWX63A6MP2T3O5KA>
    e828:	b120      	cbz	r0, e834 <sym_O5OKVEPVXGQWULJQT7IB7WKP5SOAFRRRLE3UUPI+0xaa>
    e82a:	7820      	ldrb	r0, [r4, #0]
    e82c:	f040 0002 	orr.w	r0, r0, #2
    e830:	7020      	strb	r0, [r4, #0]
    e832:	bd10      	pop	{r4, pc}
    e834:	2150      	movs	r1, #80	; 0x50
    e836:	2033      	movs	r0, #51	; 0x33
    e838:	f7f5 fb42 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e83c:	7c41      	ldrb	r1, [r0, #17]
    e83e:	7021      	strb	r1, [r4, #0]
    e840:	6840      	ldr	r0, [r0, #4]
    e842:	6801      	ldr	r1, [r0, #0]
    e844:	6011      	str	r1, [r2, #0]
    e846:	8880      	ldrh	r0, [r0, #4]
    e848:	8090      	strh	r0, [r2, #4]
    e84a:	bd10      	pop	{r4, pc}
    e84c:	b51c      	push	{r2, r3, r4, lr}
    e84e:	4669      	mov	r1, sp
    e850:	aa01      	add	r2, sp, #4
    e852:	f7fe fe33 	bl	d4bc <sym_LIYGXI2UGDXBB3WZBJYHTKFR7X66AHBTSGA7ZTA>
    e856:	9800      	ldr	r0, [sp, #0]
    e858:	f7fe fda1 	bl	d39e <sym_UPAEGKLCM3QW7VHROMMVD5MIRBTM2NGCYENWSLI>
    e85c:	bd1c      	pop	{r2, r3, r4, pc}
    e85e:	f7fe bd46 	b.w	d2ee <sym_3LZ364FVGUVSOSH6XGIFMW5SY36X7BQXDOES46Y>

0000e862 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI>:
    e862:	7802      	ldrb	r2, [r0, #0]
    e864:	f002 020f 	and.w	r2, r2, #15
    e868:	f7f9 b8b2 	b.w	79d0 <sym_H6SJIQXHKN7VVG6C62ASOS3CUN62ZMELS5YDO4I>
    e86c:	2800      	cmp	r0, #0
    e86e:	db04      	blt.n	e87a <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x18>
    e870:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e874:	f890 0400 	ldrb.w	r0, [r0, #1024]	; 0x400
    e878:	e005      	b.n	e886 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x24>
    e87a:	f000 000f 	and.w	r0, r0, #15
    e87e:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    e882:	f890 0d14 	ldrb.w	r0, [r0, #3348]	; 0xd14
    e886:	0940      	lsrs	r0, r0, #5
    e888:	4770      	bx	lr
    e88a:	6940      	ldr	r0, [r0, #20]
    e88c:	2800      	cmp	r0, #0
    e88e:	d000      	beq.n	e892 <sym_TGI4XR2SIZYZ634WEPOQE72CWFTQNRKDW5F5MZI+0x30>
    e890:	2001      	movs	r0, #1
    e892:	4770      	bx	lr

0000e894 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY>:
    e894:	f8c0 110c 	str.w	r1, [r0, #268]	; 0x10c
    e898:	4770      	bx	lr
    e89a:	b510      	push	{r4, lr}
    e89c:	2808      	cmp	r0, #8
    e89e:	d00a      	beq.n	e8b6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x22>
    e8a0:	2804      	cmp	r0, #4
    e8a2:	d00a      	beq.n	e8ba <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x26>
    e8a4:	2802      	cmp	r0, #2
    e8a6:	d00a      	beq.n	e8be <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2a>
    e8a8:	2108      	movs	r1, #8
    e8aa:	2801      	cmp	r0, #1
    e8ac:	d009      	beq.n	e8c2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x2e>
    e8ae:	21d9      	movs	r1, #217	; 0xd9
    e8b0:	2005      	movs	r0, #5
    e8b2:	f7f5 fb05 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e8b6:	2140      	movs	r1, #64	; 0x40
    e8b8:	e7f7      	b.n	e8aa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    e8ba:	2110      	movs	r1, #16
    e8bc:	e7f5      	b.n	e8aa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    e8be:	2104      	movs	r1, #4
    e8c0:	e7f3      	b.n	e8aa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x16>
    e8c2:	222a      	movs	r2, #42	; 0x2a
    e8c4:	2028      	movs	r0, #40	; 0x28
    e8c6:	fb11 0002 	smlabb	r0, r1, r2, r0
    e8ca:	b280      	uxth	r0, r0
    e8cc:	bd10      	pop	{r4, pc}
    e8ce:	2000      	movs	r0, #0
    e8d0:	4770      	bx	lr
    e8d2:	b570      	push	{r4, r5, r6, lr}
    e8d4:	4604      	mov	r4, r0
    e8d6:	f890 106b 	ldrb.w	r1, [r0, #107]	; 0x6b
    e8da:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
    e8de:	f000 f80c 	bl	e8fa <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x66>
    e8e2:	4605      	mov	r5, r0
    e8e4:	f000 f857 	bl	e996 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x102>
    e8e8:	4601      	mov	r1, r0
    e8ea:	462a      	mov	r2, r5
    e8ec:	4620      	mov	r0, r4
    e8ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    e8f2:	f7ff bda7 	b.w	e444 <sym_EO2RG5OKHPJZIBYGTP56VVOSGXFYZ4DGV24KLDY>
    e8f6:	f7f3 b84b 	b.w	1990 <sym_NFDFVOR5BUFND4TNTGYIYR4ARXJRXWSQ4PVFUKY>
    e8fa:	b510      	push	{r4, lr}
    e8fc:	4604      	mov	r4, r0
    e8fe:	4608      	mov	r0, r1
    e900:	f001 f919 	bl	fb36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    e904:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    e908:	2c02      	cmp	r4, #2
    e90a:	d00a      	beq.n	e922 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x8e>
    e90c:	f640 0234 	movw	r2, #2100	; 0x834
    e910:	4410      	add	r0, r2
    e912:	f24a 5295 	movw	r2, #42389	; 0xa595
    e916:	4410      	add	r0, r2
    e918:	fbb0 f0f1 	udiv	r0, r0, r1
    e91c:	f200 1037 	addw	r0, r0, #311	; 0x137
    e920:	bd10      	pop	{r4, pc}
    e922:	460a      	mov	r2, r1
    e924:	e7f4      	b.n	e910 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x7c>
    e926:	b510      	push	{r4, lr}
    e928:	4604      	mov	r4, r0
    e92a:	2000      	movs	r0, #0
    e92c:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
    e930:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e934:	f7f3 fc78 	bl	2228 <sym_CFZK3G6ZC4ONUAYO2UALWQ4CBO7A6ADNAS2FS7Y>
    e938:	b140      	cbz	r0, e94c <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xb8>
    e93a:	2020      	movs	r0, #32
    e93c:	f884 0121 	strb.w	r0, [r4, #289]	; 0x121
    e940:	f504 7084 	add.w	r0, r4, #264	; 0x108
    e944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e948:	f7fb bed6 	b.w	a6f8 <sym_ZKPLK624IRELGER42R2ZHKGWJUXMU6RHHHTNAQY>
    e94c:	f44f 61a6 	mov.w	r1, #1328	; 0x530
    e950:	2035      	movs	r0, #53	; 0x35
    e952:	f7f5 fab5 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e956:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    e958:	4613      	mov	r3, r2
    e95a:	460a      	mov	r2, r1
    e95c:	4604      	mov	r4, r0
    e95e:	4601      	mov	r1, r0
    e960:	4668      	mov	r0, sp
    e962:	f7f9 fce3 	bl	832c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x32c>
    e966:	f894 0121 	ldrb.w	r0, [r4, #289]	; 0x121
    e96a:	4669      	mov	r1, sp
    e96c:	f7ff ffc3 	bl	e8f6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x62>
    e970:	2800      	cmp	r0, #0
    e972:	d104      	bne.n	e97e <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xea>
    e974:	f640 2139 	movw	r1, #2617	; 0xa39
    e978:	2035      	movs	r0, #53	; 0x35
    e97a:	f7f5 faa1 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    e97e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}
    e980:	b510      	push	{r4, lr}
    e982:	245b      	movs	r4, #91	; 0x5b
    e984:	f001 f895 	bl	fab2 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>
    e988:	b910      	cbnz	r0, e990 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfc>
    e98a:	f001 f888 	bl	fa9e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>
    e98e:	b100      	cbz	r0, e992 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xfe>
    e990:	2462      	movs	r4, #98	; 0x62
    e992:	4620      	mov	r0, r4
    e994:	bd10      	pop	{r4, pc}
    e996:	b510      	push	{r4, lr}
    e998:	f7ff fff2 	bl	e980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    e99c:	3069      	adds	r0, #105	; 0x69
    e99e:	b280      	uxth	r0, r0
    e9a0:	bd10      	pop	{r4, pc}
    e9a2:	b510      	push	{r4, lr}
    e9a4:	f7ff ffec 	bl	e980 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0xec>
    e9a8:	30ff      	adds	r0, #255	; 0xff
    e9aa:	b280      	uxth	r0, r0
    e9ac:	bd10      	pop	{r4, pc}
    e9ae:	b1d0      	cbz	r0, e9e6 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x152>
    e9b0:	2908      	cmp	r1, #8
    e9b2:	d011      	beq.n	e9d8 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x144>
    e9b4:	2904      	cmp	r1, #4
    e9b6:	d00b      	beq.n	e9d0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x13c>
    e9b8:	2000      	movs	r0, #0
    e9ba:	2902      	cmp	r1, #2
    e9bc:	d010      	beq.n	e9e0 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x14c>
    e9be:	2108      	movs	r1, #8
    e9c0:	3028      	adds	r0, #40	; 0x28
    e9c2:	ebc1 02c1 	rsb	r2, r1, r1, lsl #3
    e9c6:	eb02 1141 	add.w	r1, r2, r1, lsl #5
    e9ca:	4408      	add	r0, r1
    e9cc:	3098      	adds	r0, #152	; 0x98
    e9ce:	4770      	bx	lr
    e9d0:	f44f 70bf 	mov.w	r0, #382	; 0x17e
    e9d4:	2110      	movs	r1, #16
    e9d6:	e7f4      	b.n	e9c2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    e9d8:	f44f 70c8 	mov.w	r0, #400	; 0x190
    e9dc:	2140      	movs	r1, #64	; 0x40
    e9de:	e7f0      	b.n	e9c2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    e9e0:	2104      	movs	r1, #4
    e9e2:	3018      	adds	r0, #24
    e9e4:	e7ed      	b.n	e9c2 <sym_YE7I37LHQCQAD4BK6Z7IM36Q2F6U6N5UTM73DOY+0x12e>
    e9e6:	f44f 70fc 	mov.w	r0, #504	; 0x1f8
    e9ea:	4770      	bx	lr
    e9ec:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    e9f0:	f001 0307 	and.w	r3, r1, #7
    e9f4:	7802      	ldrb	r2, [r0, #0]
    e9f6:	2101      	movs	r1, #1
    e9f8:	4099      	lsls	r1, r3
    e9fa:	438a      	bics	r2, r1
    e9fc:	7002      	strb	r2, [r0, #0]
    e9fe:	4770      	bx	lr

0000ea00 <sym_3AP322LX5PIMI4GVZ7JO5VXSHDSDLPGKXAH2IAI>:
    ea00:	f7f5 bde8 	b.w	45d4 <sym_3QFBRH4ZSIA64QP2I3K547Y5WIALGQTCBP5Y5SQ>

0000ea04 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>:
    ea04:	2000      	movs	r0, #0
    ea06:	4770      	bx	lr

0000ea08 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI>:
    ea08:	b538      	push	{r3, r4, r5, lr}
    ea0a:	460d      	mov	r5, r1
    ea0c:	4604      	mov	r4, r0
    ea0e:	e050      	b.n	eab2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0xaa>
    ea10:	f8b4 0122 	ldrh.w	r0, [r4, #290]	; 0x122
    ea14:	1c40      	adds	r0, r0, #1
    ea16:	f8a4 0122 	strh.w	r0, [r4, #290]	; 0x122
    ea1a:	f8b4 00ae 	ldrh.w	r0, [r4, #174]	; 0xae
    ea1e:	1c40      	adds	r0, r0, #1
    ea20:	f8a4 00ae 	strh.w	r0, [r4, #174]	; 0xae
    ea24:	4620      	mov	r0, r4
    ea26:	f000 f8e1 	bl	ebec <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x132>
    ea2a:	b198      	cbz	r0, ea54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    ea2c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    ea30:	1c40      	adds	r0, r0, #1
    ea32:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    ea36:	4620      	mov	r0, r4
    ea38:	f000 f86e 	bl	eb18 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5e>
    ea3c:	e9d4 0128 	ldrd	r0, r1, [r4, #160]	; 0xa0
    ea40:	4288      	cmp	r0, r1
    ea42:	d307      	bcc.n	ea54 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x4c>
    ea44:	2000      	movs	r0, #0
    ea46:	f8c4 00a0 	str.w	r0, [r4, #160]	; 0xa0
    ea4a:	2001      	movs	r0, #1
    ea4c:	f884 018e 	strb.w	r0, [r4, #398]	; 0x18e
    ea50:	f7f7 fb76 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    ea54:	f894 00b8 	ldrb.w	r0, [r4, #184]	; 0xb8
    ea58:	b120      	cbz	r0, ea64 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x5c>
    ea5a:	f8b4 00b4 	ldrh.w	r0, [r4, #180]	; 0xb4
    ea5e:	1c40      	adds	r0, r0, #1
    ea60:	f8a4 00b4 	strh.w	r0, [r4, #180]	; 0xb4
    ea64:	f894 00bc 	ldrb.w	r0, [r4, #188]	; 0xbc
    ea68:	b120      	cbz	r0, ea74 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x6c>
    ea6a:	f8b4 00ba 	ldrh.w	r0, [r4, #186]	; 0xba
    ea6e:	1c40      	adds	r0, r0, #1
    ea70:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    ea74:	f894 013c 	ldrb.w	r0, [r4, #316]	; 0x13c
    ea78:	f88d 0000 	strb.w	r0, [sp]
    ea7c:	9800      	ldr	r0, [sp, #0]
    ea7e:	9000      	str	r0, [sp, #0]
    ea80:	f89d 0000 	ldrb.w	r0, [sp]
    ea84:	b940      	cbnz	r0, ea98 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x90>
    ea86:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
    ea8a:	2300      	movs	r3, #0
    ea8c:	2101      	movs	r1, #1
    ea8e:	f104 0078 	add.w	r0, r4, #120	; 0x78
    ea92:	f7ff f88a 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ea96:	b120      	cbz	r0, eaa2 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x9a>
    ea98:	f8b4 00b2 	ldrh.w	r0, [r4, #178]	; 0xb2
    ea9c:	1c40      	adds	r0, r0, #1
    ea9e:	f8a4 00b2 	strh.w	r0, [r4, #178]	; 0xb2
    eaa2:	4620      	mov	r0, r4
    eaa4:	f000 f847 	bl	eb36 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7c>
    eaa8:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    eaac:	1c40      	adds	r0, r0, #1
    eaae:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    eab2:	1e6d      	subs	r5, r5, #1
    eab4:	b2ad      	uxth	r5, r5
    eab6:	d2ab      	bcs.n	ea10 <sym_ELB4EXXRKBATZ6KCANX37LXPZBQQJSOFPSAT7UI+0x8>
    eab8:	bd38      	pop	{r3, r4, r5, pc}

0000eaba <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ>:
    eaba:	b510      	push	{r4, lr}
    eabc:	f7fa fd88 	bl	95d0 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x884>
    eac0:	b128      	cbz	r0, eace <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14>
    eac2:	2000      	movs	r0, #0
    eac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    eac8:	4601      	mov	r1, r0
    eaca:	f7fa bd2d 	b.w	9528 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x7dc>
    eace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ead2:	f7f6 ba21 	b.w	4f18 <sym_WCN6C6ROB2XGQKTGXN5OMY5TLRX5IYOWNO7A6PQ>
    ead6:	f890 0084 	ldrb.w	r0, [r0, #132]	; 0x84
    eada:	28fe      	cmp	r0, #254	; 0xfe
    eadc:	d001      	beq.n	eae2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x28>
    eade:	2001      	movs	r0, #1
    eae0:	4770      	bx	lr
    eae2:	2000      	movs	r0, #0
    eae4:	4770      	bx	lr
    eae6:	b510      	push	{r4, lr}
    eae8:	2801      	cmp	r0, #1
    eaea:	d006      	beq.n	eafa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    eaec:	2802      	cmp	r0, #2
    eaee:	d004      	beq.n	eafa <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x40>
    eaf0:	f240 2163 	movw	r1, #611	; 0x263
    eaf4:	2006      	movs	r0, #6
    eaf6:	f7f5 f9e3 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    eafa:	bd10      	pop	{r4, pc}
    eafc:	2801      	cmp	r0, #1
    eafe:	d002      	beq.n	eb06 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x4c>
    eb00:	2802      	cmp	r0, #2
    eb02:	d105      	bne.n	eb10 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    eb04:	e002      	b.n	eb0c <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x52>
    eb06:	2901      	cmp	r1, #1
    eb08:	d004      	beq.n	eb14 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    eb0a:	e001      	b.n	eb10 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x56>
    eb0c:	2902      	cmp	r1, #2
    eb0e:	d001      	beq.n	eb14 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x5a>
    eb10:	2000      	movs	r0, #0
    eb12:	4770      	bx	lr
    eb14:	2001      	movs	r0, #1
    eb16:	4770      	bx	lr
    eb18:	e9d0 1228 	ldrd	r1, r2, [r0, #160]	; 0xa0
    eb1c:	428a      	cmp	r2, r1
    eb1e:	d301      	bcc.n	eb24 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6a>
    eb20:	1a51      	subs	r1, r2, r1
    eb22:	e000      	b.n	eb26 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x6c>
    eb24:	2100      	movs	r1, #0
    eb26:	8a82      	ldrh	r2, [r0, #20]
    eb28:	1d52      	adds	r2, r2, #5
    eb2a:	428a      	cmp	r2, r1
    eb2c:	d302      	bcc.n	eb34 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x7a>
    eb2e:	2101      	movs	r1, #1
    eb30:	f880 10ac 	strb.w	r1, [r0, #172]	; 0xac
    eb34:	4770      	bx	lr
    eb36:	b570      	push	{r4, r5, r6, lr}
    eb38:	4604      	mov	r4, r0
    eb3a:	f890 0085 	ldrb.w	r0, [r0, #133]	; 0x85
    eb3e:	2500      	movs	r5, #0
    eb40:	2601      	movs	r6, #1
    eb42:	280c      	cmp	r0, #12
    eb44:	d02c      	beq.n	eba0 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe6>
    eb46:	280d      	cmp	r0, #13
    eb48:	d129      	bne.n	eb9e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    eb4a:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    eb4e:	f8b4 1146 	ldrh.w	r1, [r4, #326]	; 0x146
    eb52:	1c40      	adds	r0, r0, #1
    eb54:	4288      	cmp	r0, r1
    eb56:	d122      	bne.n	eb9e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    eb58:	8820      	ldrh	r0, [r4, #0]
    eb5a:	f8a4 01ca 	strh.w	r0, [r4, #458]	; 0x1ca
    eb5e:	f8d4 0150 	ldr.w	r0, [r4, #336]	; 0x150
    eb62:	f7fe ffd8 	bl	db16 <sym_DSAIJDVMFSSNYDQYP4G3W4ZBYTG4PAWPSVOBJ2Y>
    eb66:	f8a4 01cc 	strh.w	r0, [r4, #460]	; 0x1cc
    eb6a:	f8b4 0154 	ldrh.w	r0, [r4, #340]	; 0x154
    eb6e:	f8a4 01ce 	strh.w	r0, [r4, #462]	; 0x1ce
    eb72:	f8b4 0156 	ldrh.w	r0, [r4, #342]	; 0x156
    eb76:	f8a4 01d0 	strh.w	r0, [r4, #464]	; 0x1d0
    eb7a:	f884 51c8 	strb.w	r5, [r4, #456]	; 0x1c8
    eb7e:	f884 61c6 	strb.w	r6, [r4, #454]	; 0x1c6
    eb82:	f884 5144 	strb.w	r5, [r4, #324]	; 0x144
    eb86:	2102      	movs	r1, #2
    eb88:	4620      	mov	r0, r4
    eb8a:	f7f7 f89b 	bl	5cc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    eb8e:	f7f7 fad7 	bl	6140 <sym_ZGH42ABHAQFX3NKIMGIK7DGGJ5XWXU2KDVYEOMI>
    eb92:	2103      	movs	r1, #3
    eb94:	4620      	mov	r0, r4
    eb96:	f7f8 ff75 	bl	7a84 <sym_75TAEO5RFHKNVZFZHMOMYUKRALUIDEKJ3QZBZUI>
    eb9a:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    eb9e:	bd70      	pop	{r4, r5, r6, pc}
    eba0:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    eba4:	f8b4 1130 	ldrh.w	r1, [r4, #304]	; 0x130
    eba8:	1c40      	adds	r0, r0, #1
    ebaa:	4288      	cmp	r0, r1
    ebac:	d1f7      	bne.n	eb9e <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0xe4>
    ebae:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    ebb2:	f8d0 1001 	ldr.w	r1, [r0, #1]
    ebb6:	f8c4 108e 	str.w	r1, [r4, #142]	; 0x8e
    ebba:	7940      	ldrb	r0, [r0, #5]
    ebbc:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
    ebc0:	2103      	movs	r1, #3
    ebc2:	4620      	mov	r0, r4
    ebc4:	f7f7 f87e 	bl	5cc4 <sym_I6CP23ODGJWRR4E4LKGCN5RJCVBTXYTDYCCXNSQ>
    ebc8:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    ebcc:	7800      	ldrb	r0, [r0, #0]
    ebce:	b140      	cbz	r0, ebe2 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x128>
    ebd0:	2101      	movs	r1, #1
    ebd2:	20fe      	movs	r0, #254	; 0xfe
    ebd4:	f7fb fd18 	bl	a608 <sym_C4R73COZU7NKK6UAUGTJ6HNWDG7QPVROF5RMZMA+0x18bc>
    ebd8:	f884 5085 	strb.w	r5, [r4, #133]	; 0x85
    ebdc:	f884 60c8 	strb.w	r6, [r4, #200]	; 0xc8
    ebe0:	bd70      	pop	{r4, r5, r6, pc}
    ebe2:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
    ebe6:	2036      	movs	r0, #54	; 0x36
    ebe8:	f7f5 f96a 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ebec:	b510      	push	{r4, lr}
    ebee:	f890 108b 	ldrb.w	r1, [r0, #139]	; 0x8b
    ebf2:	b941      	cbnz	r1, ec06 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14c>
    ebf4:	f890 2085 	ldrb.w	r2, [r0, #133]	; 0x85
    ebf8:	2300      	movs	r3, #0
    ebfa:	2106      	movs	r1, #6
    ebfc:	3078      	adds	r0, #120	; 0x78
    ebfe:	f7fe ffd4 	bl	dbaa <sym_76SF2THVWBBVUHDFLIXMTXOYE2LFAIMVFAFT26I>
    ec02:	2800      	cmp	r0, #0
    ec04:	d000      	beq.n	ec08 <sym_RBN5ILBGHTLTMFBU6S3PJPLXZR54T4XJYV7F4GQ+0x14e>
    ec06:	2001      	movs	r0, #1
    ec08:	bd10      	pop	{r4, pc}

0000ec0a <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I>:
    ec0a:	b510      	push	{r4, lr}
    ec0c:	460c      	mov	r4, r1
    ec0e:	4601      	mov	r1, r0
    ec10:	4610      	mov	r0, r2
    ec12:	f7f2 fd7f 	bl	1714 <sym_VDVM4QLBTRUPEGCBUXIK25LH2KVQWBZXHRBYEFY>
    ec16:	2800      	cmp	r0, #0
    ec18:	da06      	bge.n	ec28 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x1e>
    ec1a:	1a21      	subs	r1, r4, r0
    ec1c:	1e49      	subs	r1, r1, #1
    ec1e:	fbb1 f1f4 	udiv	r1, r1, r4
    ec22:	fb01 0004 	mla	r0, r1, r4, r0
    ec26:	bd10      	pop	{r4, pc}
    ec28:	fb90 f1f4 	sdiv	r1, r0, r4
    ec2c:	fb01 0014 	mls	r0, r1, r4, r0
    ec30:	bd10      	pop	{r4, pc}
    ec32:	eb00 00d1 	add.w	r0, r0, r1, lsr #3
    ec36:	f001 0107 	and.w	r1, r1, #7
    ec3a:	7800      	ldrb	r0, [r0, #0]
    ec3c:	2201      	movs	r2, #1
    ec3e:	408a      	lsls	r2, r1
    ec40:	4010      	ands	r0, r2
    ec42:	40c8      	lsrs	r0, r1
    ec44:	4770      	bx	lr
    ec46:	b118      	cbz	r0, ec50 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    ec48:	2802      	cmp	r0, #2
    ec4a:	d001      	beq.n	ec50 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x46>
    ec4c:	2001      	movs	r0, #1
    ec4e:	4770      	bx	lr
    ec50:	2000      	movs	r0, #0
    ec52:	4770      	bx	lr

0000ec54 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ>:
    ec54:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ec56:	7881      	ldrb	r1, [r0, #2]
    ec58:	4604      	mov	r4, r0
    ec5a:	291a      	cmp	r1, #26
    ec5c:	d025      	beq.n	ecaa <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x56>
    ec5e:	dc0e      	bgt.n	ec7e <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x2a>
    ec60:	2916      	cmp	r1, #22
    ec62:	d22d      	bcs.n	ecc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec64:	e8df f001 	tbb	[pc, r1]
    ec68:	2c2c2c2c 	.word	0x2c2c2c2c
    ec6c:	2c2c212c 	.word	0x2c2c212c
    ec70:	2c2c2c2c 	.word	0x2c2c2c2c
    ec74:	2c2c2c2c 	.word	0x2c2c2c2c
    ec78:	212c2c2c 	.word	0x212c2c2c
    ec7c:	2121      	.short	0x2121
    ec7e:	292a      	cmp	r1, #42	; 0x2a
    ec80:	d01e      	beq.n	ecc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec82:	dc0b      	bgt.n	ec9c <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x48>
    ec84:	f1a1 011e 	sub.w	r1, r1, #30
    ec88:	290c      	cmp	r1, #12
    ec8a:	d219      	bcs.n	ecc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ec8c:	e8df f001 	tbb	[pc, r1]
    ec90:	18181818 	.word	0x18181818
    ec94:	18181818 	.word	0x18181818
    ec98:	0d181818 	.word	0x0d181818
    ec9c:	393a      	subs	r1, #58	; 0x3a
    ec9e:	2904      	cmp	r1, #4
    eca0:	d20e      	bcs.n	ecc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    eca2:	e8df f001 	tbb	[pc, r1]
    eca6:	020d      	.short	0x020d
    eca8:	020d      	.short	0x020d
    ecaa:	8820      	ldrh	r0, [r4, #0]
    ecac:	f5b0 6f70 	cmp.w	r0, #3840	; 0xf00
    ecb0:	d206      	bcs.n	ecc0 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x6c>
    ecb2:	2701      	movs	r7, #1
    ecb4:	4669      	mov	r1, sp
    ecb6:	f7fe ff1e 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    ecba:	b118      	cbz	r0, ecc4 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x70>
    ecbc:	2002      	movs	r0, #2
    ecbe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ecc0:	2012      	movs	r0, #18
    ecc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ecc4:	9d01      	ldr	r5, [sp, #4]
    ecc6:	4668      	mov	r0, sp
    ecc8:	462e      	mov	r6, r5
    ecca:	f505 759e 	add.w	r5, r5, #316	; 0x13c
    ecce:	f206 163d 	addw	r6, r6, #317	; 0x13d
    ecd2:	f000 fd7f 	bl	f7d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    ecd6:	b138      	cbz	r0, ece8 <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x94>
    ecd8:	7828      	ldrb	r0, [r5, #0]
    ecda:	f88d 0008 	strb.w	r0, [sp, #8]
    ecde:	9802      	ldr	r0, [sp, #8]
    ece0:	9002      	str	r0, [sp, #8]
    ece2:	f89d 0008 	ldrb.w	r0, [sp, #8]
    ece6:	b108      	cbz	r0, ecec <sym_CY3FVUNSUUR4I46K644NW3FXSFSLG3ETQWBRBHQ+0x98>
    ece8:	200c      	movs	r0, #12
    ecea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    ecec:	702f      	strb	r7, [r5, #0]
    ecee:	78a0      	ldrb	r0, [r4, #2]
    ecf0:	7030      	strb	r0, [r6, #0]
    ecf2:	2000      	movs	r0, #0
    ecf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000ecf6 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA>:
    ecf6:	b510      	push	{r4, lr}
    ecf8:	4604      	mov	r4, r0
    ecfa:	7800      	ldrb	r0, [r0, #0]
    ecfc:	b118      	cbz	r0, ed06 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ecfe:	2801      	cmp	r0, #1
    ed00:	d001      	beq.n	ed06 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x10>
    ed02:	2012      	movs	r0, #18
    ed04:	bd10      	pop	{r4, pc}
    ed06:	f000 fd7c 	bl	f802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ed0a:	b120      	cbz	r0, ed16 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ed0c:	f7f6 fda0 	bl	5850 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ed10:	b108      	cbz	r0, ed16 <sym_E3GR2VF26UUA2VWZ2Y3HIYXNU3SITAZBGOK2GXA+0x20>
    ed12:	200c      	movs	r0, #12
    ed14:	bd10      	pop	{r4, pc}
    ed16:	7820      	ldrb	r0, [r4, #0]
    ed18:	f7ff ff95 	bl	ec46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ed1c:	1de2      	adds	r2, r4, #7
    ed1e:	f104 0317 	add.w	r3, r4, #23
    ed22:	1c61      	adds	r1, r4, #1
    ed24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ed28:	f7f6 bdc4 	b.w	58b4 <sym_Z3745JZ5MC4MMBP2LFCOSP7OKPPVFDOPIURJWVQ>

0000ed2c <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI>:
    ed2c:	b510      	push	{r4, lr}
    ed2e:	4604      	mov	r4, r0
    ed30:	f000 fe0e 	bl	f950 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ed34:	b108      	cbz	r0, ed3a <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0xe>
    ed36:	200c      	movs	r0, #12
    ed38:	bd10      	pop	{r4, pc}
    ed3a:	7820      	ldrb	r0, [r4, #0]
    ed3c:	b118      	cbz	r0, ed46 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ed3e:	2801      	cmp	r0, #1
    ed40:	d001      	beq.n	ed46 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x1a>
    ed42:	2012      	movs	r0, #18
    ed44:	bd10      	pop	{r4, pc}
    ed46:	f7ff ff7e 	bl	ec46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ed4a:	1c61      	adds	r1, r4, #1
    ed4c:	f7f6 fe56 	bl	59fc <sym_GHVM34OXBYILMDKR3F5DVNCQCBMJUJL5PW2RQYQ>
    ed50:	b108      	cbz	r0, ed56 <sym_JNP3XPG2S47QWEENF5PX2JQ36HNB7C2PPNDBQRI+0x2a>
    ed52:	2000      	movs	r0, #0
    ed54:	bd10      	pop	{r4, pc}
    ed56:	2007      	movs	r0, #7
    ed58:	bd10      	pop	{r4, pc}

0000ed5a <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA>:
    ed5a:	b510      	push	{r4, lr}
    ed5c:	f000 fd51 	bl	f802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ed60:	b120      	cbz	r0, ed6c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ed62:	f7f6 fd75 	bl	5850 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ed66:	b108      	cbz	r0, ed6c <sym_OH2GYDTNQL2GOMT5N64M2LRDK6O2PDY6H2CP6VA+0x12>
    ed68:	200c      	movs	r0, #12
    ed6a:	bd10      	pop	{r4, pc}
    ed6c:	f7f6 fde8 	bl	5940 <sym_FLX2PIIVHO3CLB5CJ7E7YSNFE2YWATNH27BL53A>
    ed70:	2000      	movs	r0, #0
    ed72:	bd10      	pop	{r4, pc}

0000ed74 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI>:
    ed74:	b510      	push	{r4, lr}
    ed76:	f000 fdeb 	bl	f950 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ed7a:	b108      	cbz	r0, ed80 <sym_UL6TXQTTOV34QCAIQPVPFYEQSUUJPIEN42CTITI+0xc>
    ed7c:	200c      	movs	r0, #12
    ed7e:	bd10      	pop	{r4, pc}
    ed80:	f7f6 fe64 	bl	5a4c <sym_KO3VCNGABVWM4325342CFFPZBSXFKFARUCMURAY>
    ed84:	2000      	movs	r0, #0
    ed86:	bd10      	pop	{r4, pc}

0000ed88 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q>:
    ed88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ed8a:	4605      	mov	r5, r0
    ed8c:	f000 fafa 	bl	f384 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>
    ed90:	2800      	cmp	r0, #0
    ed92:	d112      	bne.n	edba <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x32>
    ed94:	8828      	ldrh	r0, [r5, #0]
    ed96:	2100      	movs	r1, #0
    ed98:	f7fe fd43 	bl	d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    ed9c:	0004      	movs	r4, r0
    ed9e:	d00d      	beq.n	edbc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    eda0:	f000 fd1b 	bl	f7da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    eda4:	b150      	cbz	r0, edbc <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x34>
    eda6:	f894 0144 	ldrb.w	r0, [r4, #324]	; 0x144
    edaa:	f88d 0000 	strb.w	r0, [sp]
    edae:	9800      	ldr	r0, [sp, #0]
    edb0:	9000      	str	r0, [sp, #0]
    edb2:	f89d 0000 	ldrb.w	r0, [sp]
    edb6:	b118      	cbz	r0, edc0 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x38>
    edb8:	203a      	movs	r0, #58	; 0x3a
    edba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edbc:	2002      	movs	r0, #2
    edbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    edc0:	88a8      	ldrh	r0, [r5, #4]
    edc2:	f7fe fea4 	bl	db0e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    edc6:	4606      	mov	r6, r0
    edc8:	4601      	mov	r1, r0
    edca:	2008      	movs	r0, #8
    edcc:	f7ff f86b 	bl	dea6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    edd0:	4601      	mov	r1, r0
    edd2:	f8b4 0148 	ldrh.w	r0, [r4, #328]	; 0x148
    edd6:	4281      	cmp	r1, r0
    edd8:	d301      	bcc.n	edde <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x56>
    edda:	42b0      	cmp	r0, r6
    eddc:	d301      	bcc.n	ede2 <sym_2OOGNLSSB5K32U3GJ2RMG36COQDU6VSPMHTF72Q+0x5a>
    edde:	2012      	movs	r0, #18
    ede0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ede2:	4631      	mov	r1, r6
    ede4:	2005      	movs	r0, #5
    ede6:	f7ff f85e 	bl	dea6 <sym_NREHYZNNGMA6T4VUMP47EJMM5IU7BRHAZURXRLQ>
    edea:	f8a4 0148 	strh.w	r0, [r4, #328]	; 0x148
    edee:	2000      	movs	r0, #0
    edf0:	e9c4 0653 	strd	r0, r6, [r4, #332]	; 0x14c
    edf4:	88e8      	ldrh	r0, [r5, #6]
    edf6:	f8a4 0154 	strh.w	r0, [r4, #340]	; 0x154
    edfa:	8928      	ldrh	r0, [r5, #8]
    edfc:	f8a4 0156 	strh.w	r0, [r4, #342]	; 0x156
    ee00:	f504 74a2 	add.w	r4, r4, #324	; 0x144
    ee04:	2001      	movs	r0, #1
    ee06:	7020      	strb	r0, [r4, #0]
    ee08:	2000      	movs	r0, #0
    ee0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000ee0c <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y>:
    ee0c:	b508      	push	{r3, lr}
    ee0e:	f7f7 f991 	bl	6134 <sym_7OXEUBEH2ZYHSALN3UOPU7MFQL7MGNYUFEA5ISY>
    ee12:	b970      	cbnz	r0, ee32 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    ee14:	f7f8 fff4 	bl	7e00 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    ee18:	2805      	cmp	r0, #5
    ee1a:	d005      	beq.n	ee28 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x1c>
    ee1c:	f7f7 fc46 	bl	66ac <sym_BWOW7IRAHQYZVS3PPGHEV5NC5WFIEH4A4RVZSCY>
    ee20:	f5a0 417f 	sub.w	r1, r0, #65280	; 0xff00
    ee24:	39ff      	subs	r1, #255	; 0xff
    ee26:	d004      	beq.n	ee32 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x26>
    ee28:	4668      	mov	r0, sp
    ee2a:	f7f8 ff55 	bl	7cd8 <sym_GM7QU7LP6UH4DZPOIR7WHUEKZSOPEOATHYRRTQI>
    ee2e:	b110      	cbz	r0, ee36 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x2a>
    ee30:	e012      	b.n	ee58 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x4c>
    ee32:	200c      	movs	r0, #12
    ee34:	bd08      	pop	{r3, pc}
    ee36:	9800      	ldr	r0, [sp, #0]
    ee38:	8800      	ldrh	r0, [r0, #0]
    ee3a:	f7fe fd5a 	bl	d8f2 <sym_REO6MG4FRJTNQQ56RDJDYGEWFEO5TFVYGRW6OLI>
    ee3e:	9800      	ldr	r0, [sp, #0]
    ee40:	2100      	movs	r1, #0
    ee42:	8800      	ldrh	r0, [r0, #0]
    ee44:	f7f5 faba 	bl	43bc <sym_4AWF7EXI3MMHUULTY73E756U3IY5DEXOZ265MZY>
    ee48:	b120      	cbz	r0, ee54 <sym_7SW25XKRUPEFRFPCXK7QR35MHFXEZCDXN225F5Y+0x48>
    ee4a:	f640 717f 	movw	r1, #3967	; 0xf7f
    ee4e:	2039      	movs	r0, #57	; 0x39
    ee50:	f7f5 f836 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    ee54:	f7f7 f966 	bl	6124 <sym_QG7T3WZZ6IR4SNPFZNDFKFWZROS2N7DDO6SYZAA>
    ee58:	2000      	movs	r0, #0
    ee5a:	bd08      	pop	{r3, pc}

0000ee5c <sym_V4G4DUSXVGCZMSYXHZZWQMKMNZCZVEEIBVCQ7EQ>:
    ee5c:	b510      	push	{r4, lr}
    ee5e:	460b      	mov	r3, r1
    ee60:	2201      	movs	r2, #1
    ee62:	f100 0110 	add.w	r1, r0, #16
    ee66:	f7fe fe0a 	bl	da7e <sym_L64WJ6W52HQBFQCTPO5LHELOWQEJNMIWLQKG6JY>
    ee6a:	2000      	movs	r0, #0
    ee6c:	bd10      	pop	{r4, pc}

0000ee6e <sym_PMB4FUQR4IQVAL4FOP3PPQDDXYDFQIUYDVZ6DGY>:
    ee6e:	b510      	push	{r4, lr}
    ee70:	2108      	movs	r1, #8
    ee72:	f7f5 f8cf 	bl	4014 <sym_CVMXQJYKHZVHIOMGOYEICPLVAIQNUBL6USVNZSA>
    ee76:	2000      	movs	r0, #0
    ee78:	bd10      	pop	{r4, pc}

0000ee7a <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A>:
    ee7a:	b510      	push	{r4, lr}
    ee7c:	4604      	mov	r4, r0
    ee7e:	f000 fca3 	bl	f7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ee82:	b140      	cbz	r0, ee96 <sym_IS5N626FV5MT54PZIWSKFZUUH6WWJWJ46G6YN3A+0x1c>
    ee84:	20fb      	movs	r0, #251	; 0xfb
    ee86:	8020      	strh	r0, [r4, #0]
    ee88:	f640 0148 	movw	r1, #2120	; 0x848
    ee8c:	8061      	strh	r1, [r4, #2]
    ee8e:	80a0      	strh	r0, [r4, #4]
    ee90:	80e1      	strh	r1, [r4, #6]
    ee92:	2000      	movs	r0, #0
    ee94:	bd10      	pop	{r4, pc}
    ee96:	2001      	movs	r0, #1
    ee98:	bd10      	pop	{r4, pc}

0000ee9a <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A>:
    ee9a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
    ee9c:	460d      	mov	r5, r1
    ee9e:	4606      	mov	r6, r0
    eea0:	f7fc f940 	bl	b124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    eea4:	f3c0 2000 	ubfx	r0, r0, #8, #1
    eea8:	b300      	cbz	r0, eeec <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x52>
    eeaa:	8830      	ldrh	r0, [r6, #0]
    eeac:	4669      	mov	r1, sp
    eeae:	f7fe fe22 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    eeb2:	2800      	cmp	r0, #0
    eeb4:	d119      	bne.n	eeea <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x50>
    eeb6:	9c01      	ldr	r4, [sp, #4]
    eeb8:	2700      	movs	r7, #0
    eeba:	f884 706c 	strb.w	r7, [r4, #108]	; 0x6c
    eebe:	f814 0f6a 	ldrb.w	r0, [r4, #106]!
    eec2:	f000 fa94 	bl	f3ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    eec6:	70a8      	strb	r0, [r5, #2]
    eec8:	7860      	ldrb	r0, [r4, #1]
    eeca:	f000 fa90 	bl	f3ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x6a>
    eece:	70e8      	strb	r0, [r5, #3]
    eed0:	78a0      	ldrb	r0, [r4, #2]
    eed2:	f88d 0008 	strb.w	r0, [sp, #8]
    eed6:	9802      	ldr	r0, [sp, #8]
    eed8:	9002      	str	r0, [sp, #8]
    eeda:	f89d 0008 	ldrb.w	r0, [sp, #8]
    eede:	3c6a      	subs	r4, #106	; 0x6a
    eee0:	2800      	cmp	r0, #0
    eee2:	d1ea      	bne.n	eeba <sym_VT6ZFFM2E7JNVAG5YLSPAZYR4HOPL3X5GX3IH7A+0x20>
    eee4:	8830      	ldrh	r0, [r6, #0]
    eee6:	8028      	strh	r0, [r5, #0]
    eee8:	2000      	movs	r0, #0
    eeea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    eeec:	2001      	movs	r0, #1
    eeee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

0000eef0 <sym_JLDLLKBNDO6T4E6HHXX2AI4IG5EDEVR7ET3G3HY>:
    eef0:	2108      	movs	r1, #8
    eef2:	7001      	strb	r1, [r0, #0]
    eef4:	2000      	movs	r0, #0
    eef6:	4770      	bx	lr

0000eef8 <sym_KQ364TAUBSTGBVLC6BUZ6LU5UQACEISDV2KKO5I>:
    eef8:	b510      	push	{r4, lr}
    eefa:	4604      	mov	r4, r0
    eefc:	20d8      	movs	r0, #216	; 0xd8
    eefe:	7020      	strb	r0, [r4, #0]
    ef00:	f000 fc43 	bl	f78a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    ef04:	7060      	strb	r0, [r4, #1]
    ef06:	2000      	movs	r0, #0
    ef08:	bd10      	pop	{r4, pc}

0000ef0a <sym_5OKDNHIYSDG2NFFB242VCRESG3W37YENBGQLRBA>:
    ef0a:	2108      	movs	r1, #8
    ef0c:	7001      	strb	r1, [r0, #0]
    ef0e:	2000      	movs	r0, #0
    ef10:	4770      	bx	lr

0000ef12 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ>:
    ef12:	b510      	push	{r4, lr}
    ef14:	4604      	mov	r4, r0
    ef16:	7800      	ldrb	r0, [r0, #0]
    ef18:	b108      	cbz	r0, ef1e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0xc>
    ef1a:	2801      	cmp	r0, #1
    ef1c:	d110      	bne.n	ef40 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ef1e:	f000 fc70 	bl	f802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ef22:	b120      	cbz	r0, ef2e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ef24:	f7f6 fc94 	bl	5850 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    ef28:	b108      	cbz	r0, ef2e <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x1c>
    ef2a:	200c      	movs	r0, #12
    ef2c:	bd10      	pop	{r4, pc}
    ef2e:	7820      	ldrb	r0, [r4, #0]
    ef30:	f7ff fe89 	bl	ec46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ef34:	1c61      	adds	r1, r4, #1
    ef36:	f7fe fd88 	bl	da4a <sym_G6YVAU2J75AOT237PVQAC5AEQMWPZ6OKE6ASZAI>
    ef3a:	b108      	cbz	r0, ef40 <sym_2DIQZNL4PQ4LJGTNCUPMO2N2CADFMWHJOSUVSUQ+0x2e>
    ef3c:	2000      	movs	r0, #0
    ef3e:	bd10      	pop	{r4, pc}
    ef40:	2012      	movs	r0, #18
    ef42:	bd10      	pop	{r4, pc}

0000ef44 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA>:
    ef44:	b510      	push	{r4, lr}
    ef46:	4604      	mov	r4, r0
    ef48:	f000 fd02 	bl	f950 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5cc>
    ef4c:	b108      	cbz	r0, ef52 <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0xe>
    ef4e:	200c      	movs	r0, #12
    ef50:	bd10      	pop	{r4, pc}
    ef52:	7820      	ldrb	r0, [r4, #0]
    ef54:	b108      	cbz	r0, ef5a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x16>
    ef56:	2801      	cmp	r0, #1
    ef58:	d107      	bne.n	ef6a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ef5a:	f7ff fe74 	bl	ec46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    ef5e:	1c61      	adds	r1, r4, #1
    ef60:	f7fe fd82 	bl	da68 <sym_JAE5CJ34QIQM34DAKQFWDERFAUN5NXFJM57HRLY>
    ef64:	b108      	cbz	r0, ef6a <sym_FQNF6KMIBMQDKYS2BJP6ZB7BLEET53WUIWQK6FA+0x26>
    ef66:	2000      	movs	r0, #0
    ef68:	bd10      	pop	{r4, pc}
    ef6a:	2012      	movs	r0, #18
    ef6c:	bd10      	pop	{r4, pc}

0000ef6e <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q>:
    ef6e:	b510      	push	{r4, lr}
    ef70:	4604      	mov	r4, r0
    ef72:	f000 fc46 	bl	f802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    ef76:	b108      	cbz	r0, ef7c <sym_Z6SWMDBE3FHPASES2GEZRCNTNJKSKBQXPSTEH5Q+0xe>
    ef78:	200c      	movs	r0, #12
    ef7a:	bd10      	pop	{r4, pc}
    ef7c:	7820      	ldrb	r0, [r4, #0]
    ef7e:	f000 0001 	and.w	r0, r0, #1
    ef82:	f7f6 fc5f 	bl	5844 <sym_R5RFYNEZN3LQHKUKJDN3JLSNHLY4DPKXW3KZMYA>
    ef86:	2000      	movs	r0, #0
    ef88:	bd10      	pop	{r4, pc}

0000ef8a <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA>:
    ef8a:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    ef8c:	460d      	mov	r5, r1
    ef8e:	4604      	mov	r4, r0
    ef90:	f000 fc1a 	bl	f7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    ef94:	b130      	cbz	r0, efa4 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1a>
    ef96:	88a2      	ldrh	r2, [r4, #4]
    ef98:	f244 2090 	movw	r0, #17040	; 0x4290
    ef9c:	4282      	cmp	r2, r0
    ef9e:	d903      	bls.n	efa8 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x1e>
    efa0:	2012      	movs	r0, #18
    efa2:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    efa4:	2001      	movs	r0, #1
    efa6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    efa8:	f640 0048 	movw	r0, #2120	; 0x848
    efac:	4282      	cmp	r2, r0
    efae:	d300      	bcc.n	efb2 <sym_Q5GJELDUJDXPR5M7PG33JSPACOMZ32BYQV2DESA+0x28>
    efb0:	4602      	mov	r2, r0
    efb2:	8820      	ldrh	r0, [r4, #0]
    efb4:	f8ad 0000 	strh.w	r0, [sp]
    efb8:	8860      	ldrh	r0, [r4, #2]
    efba:	f8ad 0002 	strh.w	r0, [sp, #2]
    efbe:	f8ad 2004 	strh.w	r2, [sp, #4]
    efc2:	8860      	ldrh	r0, [r4, #2]
    efc4:	f8ad 0006 	strh.w	r0, [sp, #6]
    efc8:	f8ad 2008 	strh.w	r2, [sp, #8]
    efcc:	8820      	ldrh	r0, [r4, #0]
    efce:	8028      	strh	r0, [r5, #0]
    efd0:	4668      	mov	r0, sp
    efd2:	f000 fc28 	bl	f826 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    efd6:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000efd8 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI>:
    efd8:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    efda:	4604      	mov	r4, r0
    efdc:	f7fe fd75 	bl	daca <sym_J5GU2YSZI45UA3YHIJMMX6SWAYPKQ5HXJLXKPXY>
    efe0:	b160      	cbz	r0, effc <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x24>
    efe2:	4620      	mov	r0, r4
    efe4:	f7f6 fef4 	bl	5dd0 <sym_MAOKHHVPGVT23KVRN33B7KPEJU6F55EB66KOGDQ>
    efe8:	4669      	mov	r1, sp
    efea:	2000      	movs	r0, #0
    efec:	f7fe fc22 	bl	d834 <sym_3SKPFA625PNDCAQQU2M5BY77GYLRCXEEFZ5JBTY>
    eff0:	b150      	cbz	r0, f008 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x30>
    eff2:	f241 0104 	movw	r1, #4100	; 0x1004
    eff6:	2039      	movs	r0, #57	; 0x39
    eff8:	f7f4 ff62 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    effc:	2012      	movs	r0, #18
    effe:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f000:	9802      	ldr	r0, [sp, #8]
    f002:	f880 412e 	strb.w	r4, [r0, #302]	; 0x12e
    f006:	e000      	b.n	f00a <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x32>
    f008:	2401      	movs	r4, #1
    f00a:	4668      	mov	r0, sp
    f00c:	f7f5 f988 	bl	4320 <sym_6I4XEOIW7LI2E3Z53L54ZHQQHYICXR4H4JQWXLA>
    f010:	2800      	cmp	r0, #0
    f012:	d0f5      	beq.n	f000 <sym_THCISJNP2ER2HFLUHGJZXHIPWIUIL2ZENNEO5RI+0x28>
    f014:	2000      	movs	r0, #0
    f016:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f018 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI>:
    f018:	b53e      	push	{r1, r2, r3, r4, r5, lr}
    f01a:	4604      	mov	r4, r0
    f01c:	f7fc f882 	bl	b124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f020:	f3c0 2000 	ubfx	r0, r0, #8, #1
    f024:	b1b0      	cbz	r0, f054 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3c>
    f026:	f10d 0007 	add.w	r0, sp, #7
    f02a:	9000      	str	r0, [sp, #0]
    f02c:	7922      	ldrb	r2, [r4, #4]
    f02e:	78e1      	ldrb	r1, [r4, #3]
    f030:	78a0      	ldrb	r0, [r4, #2]
    f032:	f10d 0306 	add.w	r3, sp, #6
    f036:	f000 fc74 	bl	f922 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x59e>
    f03a:	2800      	cmp	r0, #0
    f03c:	d109      	bne.n	f052 <sym_MBHLAUPQK3H6ERLQXCLUB2AQHB6N7MDDZSUQGSI+0x3a>
    f03e:	8820      	ldrh	r0, [r4, #0]
    f040:	f8ad 0004 	strh.w	r0, [sp, #4]
    f044:	f8b4 0005 	ldrh.w	r0, [r4, #5]
    f048:	f8ad 0008 	strh.w	r0, [sp, #8]
    f04c:	a801      	add	r0, sp, #4
    f04e:	f000 f8f8 	bl	f242 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>
    f052:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
    f054:	2001      	movs	r0, #1
    f056:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

0000f058 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA>:
    f058:	b510      	push	{r4, lr}
    f05a:	4604      	mov	r4, r0
    f05c:	f000 fbd1 	bl	f802 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47e>
    f060:	b120      	cbz	r0, f06c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f062:	f7f6 fbf5 	bl	5850 <sym_WHSZ4VQHSDNZTVWJWAYGMNU7AWSUZKLKTBUNDPY>
    f066:	b108      	cbz	r0, f06c <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x14>
    f068:	200c      	movs	r0, #12
    f06a:	bd10      	pop	{r4, pc}
    f06c:	7820      	ldrb	r0, [r4, #0]
    f06e:	f7ff fdea 	bl	ec46 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x3c>
    f072:	79e2      	ldrb	r2, [r4, #7]
    f074:	1c61      	adds	r1, r4, #1
    f076:	f7f6 fb85 	bl	5784 <sym_3DXBFDJKO3IQEXOOHBMVXVTLDDG5FSS3TKAZNFY>
    f07a:	b108      	cbz	r0, f080 <sym_HKQ7V7ZRT4GLUXECWBIODAWUF4IIDSU455UZJBA+0x28>
    f07c:	2000      	movs	r0, #0
    f07e:	bd10      	pop	{r4, pc}
    f080:	2002      	movs	r0, #2
    f082:	bd10      	pop	{r4, pc}

0000f084 <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA>:
    f084:	b510      	push	{r4, lr}
    f086:	4604      	mov	r4, r0
    f088:	2001      	movs	r0, #1
    f08a:	f000 f9bb 	bl	f404 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    f08e:	b128      	cbz	r0, f09c <sym_NITRJIWYGM7PLEIQEII3QZID3O3DS62GXB3UYIA+0x18>
    f090:	4621      	mov	r1, r4
    f092:	2001      	movs	r0, #1
    f094:	f7f5 fd7e 	bl	4b94 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f098:	2000      	movs	r0, #0
    f09a:	bd10      	pop	{r4, pc}
    f09c:	200c      	movs	r0, #12
    f09e:	bd10      	pop	{r4, pc}

0000f0a0 <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI>:
    f0a0:	b510      	push	{r4, lr}
    f0a2:	8800      	ldrh	r0, [r0, #0]
    f0a4:	f7f6 fc62 	bl	596c <sym_62B4NCI2CQZLPPINCQVCHO6SYLZVDAWVVCHWS3I>
    f0a8:	b108      	cbz	r0, f0ae <sym_4J2T42QEEBU4YII5BYQOO72J6O3T642SRZXZNQI+0xe>
    f0aa:	2000      	movs	r0, #0
    f0ac:	bd10      	pop	{r4, pc}
    f0ae:	2030      	movs	r0, #48	; 0x30
    f0b0:	bd10      	pop	{r4, pc}

0000f0b2 <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ>:
    f0b2:	b51c      	push	{r2, r3, r4, lr}
    f0b4:	7801      	ldrb	r1, [r0, #0]
    f0b6:	f88d 1000 	strb.w	r1, [sp]
    f0ba:	7840      	ldrb	r0, [r0, #1]
    f0bc:	f88d 0001 	strb.w	r0, [sp, #1]
    f0c0:	2000      	movs	r0, #0
    f0c2:	f8ad 0002 	strh.w	r0, [sp, #2]
    f0c6:	f8ad 0004 	strh.w	r0, [sp, #4]
    f0ca:	4601      	mov	r1, r0
    f0cc:	4668      	mov	r0, sp
    f0ce:	f000 f9e4 	bl	f49a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x116>
    f0d2:	2800      	cmp	r0, #0
    f0d4:	d102      	bne.n	f0dc <sym_5BMMTK2FX4MC6OHQ4NUB3RWLF3SEIIGIKV66JFQ+0x2a>
    f0d6:	4668      	mov	r0, sp
    f0d8:	f000 f9c3 	bl	f462 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xde>
    f0dc:	bd1c      	pop	{r2, r3, r4, pc}

0000f0de <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA>:
    f0de:	b500      	push	{lr}
    f0e0:	b087      	sub	sp, #28
    f0e2:	7941      	ldrb	r1, [r0, #5]
    f0e4:	f88d 1000 	strb.w	r1, [sp]
    f0e8:	7981      	ldrb	r1, [r0, #6]
    f0ea:	f88d 1001 	strb.w	r1, [sp, #1]
    f0ee:	2101      	movs	r1, #1
    f0f0:	f88d 1002 	strb.w	r1, [sp, #2]
    f0f4:	7801      	ldrb	r1, [r0, #0]
    f0f6:	f88d 1003 	strb.w	r1, [sp, #3]
    f0fa:	f8b0 1001 	ldrh.w	r1, [r0, #1]
    f0fe:	f240 2271 	movw	r2, #625	; 0x271
    f102:	4351      	muls	r1, r2
    f104:	9102      	str	r1, [sp, #8]
    f106:	f8b0 0003 	ldrh.w	r0, [r0, #3]
    f10a:	4350      	muls	r0, r2
    f10c:	9004      	str	r0, [sp, #16]
    f10e:	2007      	movs	r0, #7
    f110:	f88d 0018 	strb.w	r0, [sp, #24]
    f114:	2000      	movs	r0, #0
    f116:	f88d 0019 	strb.w	r0, [sp, #25]
    f11a:	9804      	ldr	r0, [sp, #16]
    f11c:	f7fb ff24 	bl	af68 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x170>
    f120:	b140      	cbz	r0, f134 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f122:	9802      	ldr	r0, [sp, #8]
    f124:	f7fb ff14 	bl	af50 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x158>
    f128:	b120      	cbz	r0, f134 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x56>
    f12a:	4668      	mov	r0, sp
    f12c:	f7fb fda8 	bl	ac80 <sym_CNVWBND3CKNA7X75YYI34DQVJHIIO67GC5L2TOA>
    f130:	b007      	add	sp, #28
    f132:	bd00      	pop	{pc}
    f134:	2030      	movs	r0, #48	; 0x30
    f136:	e7fb      	b.n	f130 <sym_B53ULTNRMKMM2752DLWCII2MNWMNLLOI2TCFUOA+0x52>

0000f138 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ>:
    f138:	b570      	push	{r4, r5, r6, lr}
    f13a:	4605      	mov	r5, r0
    f13c:	8800      	ldrh	r0, [r0, #0]
    f13e:	2100      	movs	r1, #0
    f140:	f7fe fb6f 	bl	d822 <sym_5X75WALYYBUWN4XT5LYOZBIGSZHVNFKF5J4CSQI>
    f144:	0004      	movs	r4, r0
    f146:	d007      	beq.n	f158 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f148:	f000 fb47 	bl	f7da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    f14c:	b120      	cbz	r0, f158 <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x20>
    f14e:	f894 015a 	ldrb.w	r0, [r4, #346]	; 0x15a
    f152:	b118      	cbz	r0, f15c <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x24>
    f154:	203a      	movs	r0, #58	; 0x3a
    f156:	bd70      	pop	{r4, r5, r6, pc}
    f158:	2002      	movs	r0, #2
    f15a:	bd70      	pop	{r4, r5, r6, pc}
    f15c:	2100      	movs	r1, #0
    f15e:	f104 00c6 	add.w	r0, r4, #198	; 0xc6
    f162:	f7ff fd66 	bl	ec32 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f166:	2801      	cmp	r0, #1
    f168:	d001      	beq.n	f16e <sym_CMMCSEDLHUSIB2QLUASKN6Q4ZQHCDFYB6OJTBQQ+0x36>
    f16a:	201a      	movs	r0, #26
    f16c:	bd70      	pop	{r4, r5, r6, pc}
    f16e:	f8d5 1002 	ldr.w	r1, [r5, #2]
    f172:	f8c4 115b 	str.w	r1, [r4, #347]	; 0x15b
    f176:	f8d5 1006 	ldr.w	r1, [r5, #6]
    f17a:	f8c4 115f 	str.w	r1, [r4, #351]	; 0x15f
    f17e:	8969      	ldrh	r1, [r5, #10]
    f180:	f8a4 1163 	strh.w	r1, [r4, #355]	; 0x163
    f184:	2210      	movs	r2, #16
    f186:	f105 010c 	add.w	r1, r5, #12
    f18a:	f204 1065 	addw	r0, r4, #357	; 0x165
    f18e:	f7fd faa7 	bl	c6e0 <sym_DQONLUECJTIEYFOFJXXAPJO4POIAJKJNKBGVN5A>
    f192:	2001      	movs	r0, #1
    f194:	f884 015a 	strb.w	r0, [r4, #346]	; 0x15a
    f198:	2000      	movs	r0, #0
    f19a:	bd70      	pop	{r4, r5, r6, pc}

0000f19c <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y>:
    f19c:	b51c      	push	{r2, r3, r4, lr}
    f19e:	4604      	mov	r4, r0
    f1a0:	f000 fb12 	bl	f7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f1a4:	b178      	cbz	r0, f1c6 <sym_JYVNTINWWHBNIBW6ZPFJYFKZBQTI25EUE75U36Y+0x2a>
    f1a6:	8820      	ldrh	r0, [r4, #0]
    f1a8:	f8ad 0000 	strh.w	r0, [sp]
    f1ac:	8860      	ldrh	r0, [r4, #2]
    f1ae:	f8ad 0002 	strh.w	r0, [sp, #2]
    f1b2:	8820      	ldrh	r0, [r4, #0]
    f1b4:	f8ad 0004 	strh.w	r0, [sp, #4]
    f1b8:	8860      	ldrh	r0, [r4, #2]
    f1ba:	f8ad 0006 	strh.w	r0, [sp, #6]
    f1be:	4668      	mov	r0, sp
    f1c0:	f7fb ff08 	bl	afd4 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1dc>
    f1c4:	bd1c      	pop	{r2, r3, r4, pc}
    f1c6:	2001      	movs	r0, #1
    f1c8:	bd1c      	pop	{r2, r3, r4, pc}

0000f1ca <sym_2USEL6R2GGJMMFO4XRNC6NIEFTFUU2HPLL2Z6FQ>:
    f1ca:	b510      	push	{r4, lr}
    f1cc:	f7f5 fd06 	bl	4bdc <sym_4UMPVHCMNEM5ENBBHCLGXZREGEKKHKHZOKNMH2I>
    f1d0:	2000      	movs	r0, #0
    f1d2:	bd10      	pop	{r4, pc}

0000f1d4 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA>:
    f1d4:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f1d6:	460c      	mov	r4, r1
    f1d8:	4605      	mov	r5, r0
    f1da:	f000 faf5 	bl	f7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f1de:	b160      	cbz	r0, f1fa <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x26>
    f1e0:	4669      	mov	r1, sp
    f1e2:	4628      	mov	r0, r5
    f1e4:	f7fe fc87 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f1e8:	2800      	cmp	r0, #0
    f1ea:	d105      	bne.n	f1f8 <sym_4DOGMDZGTALJPSDK26RDOFYJAUF2WWYUQSK5XNA+0x24>
    f1ec:	2101      	movs	r1, #1
    f1ee:	4622      	mov	r2, r4
    f1f0:	9801      	ldr	r0, [sp, #4]
    f1f2:	f000 fa74 	bl	f6de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f1f6:	2000      	movs	r0, #0
    f1f8:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f1fa:	2001      	movs	r0, #1
    f1fc:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f1fe <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ>:
    f1fe:	b510      	push	{r4, lr}
    f200:	4604      	mov	r4, r0
    f202:	2000      	movs	r0, #0
    f204:	f000 f8fe 	bl	f404 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x80>
    f208:	b128      	cbz	r0, f216 <sym_4JSL5B25NNB5WWK7I5BGUTCTKEZ4HYLOODANEEQ+0x18>
    f20a:	4621      	mov	r1, r4
    f20c:	2000      	movs	r0, #0
    f20e:	f7f5 fcc1 	bl	4b94 <sym_QKSVBALUN2V4XT4OCC56LE75IAYLDFRRIVLBZ2Q>
    f212:	2000      	movs	r0, #0
    f214:	bd10      	pop	{r4, pc}
    f216:	200c      	movs	r0, #12
    f218:	bd10      	pop	{r4, pc}

0000f21a <sym_J2SUO2NMPPNDQZAGB2FE5TAXJFMJ5FZXKAPNVFQ>:
    f21a:	b510      	push	{r4, lr}
    f21c:	7800      	ldrb	r0, [r0, #0]
    f21e:	f000 0001 	and.w	r0, r0, #1
    f222:	f7f8 fd61 	bl	7ce8 <sym_O5ZKMVYIIKH3EAJRECXZFOUFXDW4MCMBS67KZZI>
    f226:	2000      	movs	r0, #0
    f228:	bd10      	pop	{r4, pc}

0000f22a <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I>:
    f22a:	b510      	push	{r4, lr}
    f22c:	4604      	mov	r4, r0
    f22e:	f000 facb 	bl	f7c8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x444>
    f232:	b120      	cbz	r0, f23e <sym_M6MZU5PVUKHQMWMMC4UT23L7SRBW44JZLP26X4I+0x14>
    f234:	4620      	mov	r0, r4
    f236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f23a:	f000 baf4 	b.w	f826 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4a2>
    f23e:	2001      	movs	r0, #1
    f240:	bd10      	pop	{r4, pc}

0000f242 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ>:
    f242:	b510      	push	{r4, lr}
    f244:	4604      	mov	r4, r0
    f246:	8880      	ldrh	r0, [r0, #4]
    f248:	b128      	cbz	r0, f256 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f24a:	2801      	cmp	r0, #1
    f24c:	d003      	beq.n	f256 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f24e:	2802      	cmp	r0, #2
    f250:	d001      	beq.n	f256 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x14>
    f252:	2012      	movs	r0, #18
    f254:	bd10      	pop	{r4, pc}
    f256:	78e0      	ldrb	r0, [r4, #3]
    f258:	f000 f8e0 	bl	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    f25c:	b148      	cbz	r0, f272 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f25e:	78a0      	ldrb	r0, [r4, #2]
    f260:	f000 f8dc 	bl	f41c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x98>
    f264:	b128      	cbz	r0, f272 <sym_TWSXGABZDFOR6GMTPL43NA2Q7GCJDL7RARUHBMQ+0x30>
    f266:	4620      	mov	r0, r4
    f268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f26c:	2101      	movs	r1, #1
    f26e:	f7fb bd5d 	b.w	ad2c <sym_TTWYMXRKLVLI7DIZYVTKGZHSGKFWB63OVH3AYYQ>
    f272:	2011      	movs	r0, #17
    f274:	bd10      	pop	{r4, pc}

0000f276 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y>:
    f276:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f278:	460c      	mov	r4, r1
    f27a:	4605      	mov	r5, r0
    f27c:	8800      	ldrh	r0, [r0, #0]
    f27e:	4669      	mov	r1, sp
    f280:	f7fe fc39 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f284:	2800      	cmp	r0, #0
    f286:	d106      	bne.n	f296 <sym_AB3LPEZLZTHWVJYT4X3CSIX3UJONE76BJDZFP2Y+0x20>
    f288:	9801      	ldr	r0, [sp, #4]
    f28a:	8829      	ldrh	r1, [r5, #0]
    f28c:	8021      	strh	r1, [r4, #0]
    f28e:	f8b0 00a8 	ldrh.w	r0, [r0, #168]	; 0xa8
    f292:	8060      	strh	r0, [r4, #2]
    f294:	2000      	movs	r0, #0
    f296:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}

0000f298 <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ>:
    f298:	b510      	push	{r4, lr}
    f29a:	4604      	mov	r4, r0
    f29c:	4601      	mov	r1, r0
    f29e:	2000      	movs	r0, #0
    f2a0:	f7f5 fc60 	bl	4b64 <sym_WCOWXKSKBH7DOKKKINFZAPWXKW4NYAUCJWTUKBI>
    f2a4:	b910      	cbnz	r0, f2ac <sym_5KZ3ESY4NUZKM5COQRZJAL6CXWIG2JSPGHV3RPQ+0x14>
    f2a6:	2000      	movs	r0, #0
    f2a8:	6020      	str	r0, [r4, #0]
    f2aa:	80a0      	strh	r0, [r4, #4]
    f2ac:	2000      	movs	r0, #0
    f2ae:	bd10      	pop	{r4, pc}

0000f2b0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY>:
    f2b0:	b51c      	push	{r2, r3, r4, lr}
    f2b2:	8800      	ldrh	r0, [r0, #0]
    f2b4:	4669      	mov	r1, sp
    f2b6:	f7fe fc1e 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f2ba:	b968      	cbnz	r0, f2d8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f2bc:	4668      	mov	r0, sp
    f2be:	f000 fa89 	bl	f7d4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x450>
    f2c2:	b148      	cbz	r0, f2d8 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x28>
    f2c4:	9801      	ldr	r0, [sp, #4]
    f2c6:	2201      	movs	r2, #1
    f2c8:	4601      	mov	r1, r0
    f2ca:	f890 3158 	ldrb.w	r3, [r0, #344]	; 0x158
    f2ce:	3078      	adds	r0, #120	; 0x78
    f2d0:	f501 71ac 	add.w	r1, r1, #344	; 0x158
    f2d4:	b92b      	cbnz	r3, f2e2 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x32>
    f2d6:	e001      	b.n	f2dc <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x2c>
    f2d8:	2002      	movs	r0, #2
    f2da:	bd1c      	pop	{r2, r3, r4, pc}
    f2dc:	f890 3047 	ldrb.w	r3, [r0, #71]	; 0x47
    f2e0:	b10b      	cbz	r3, f2e6 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x36>
    f2e2:	203a      	movs	r0, #58	; 0x3a
    f2e4:	bd1c      	pop	{r2, r3, r4, pc}
    f2e6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
    f2ea:	079b      	lsls	r3, r3, #30
    f2ec:	d100      	bne.n	f2f0 <sym_IP3LLUNJTDBIIPB3UG65MJFJZABGVNT2GN3EQPY+0x40>
    f2ee:	700a      	strb	r2, [r1, #0]
    f2f0:	f880 2047 	strb.w	r2, [r0, #71]	; 0x47
    f2f4:	2000      	movs	r0, #0
    f2f6:	bd1c      	pop	{r2, r3, r4, pc}

0000f2f8 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ>:
    f2f8:	b57c      	push	{r2, r3, r4, r5, r6, lr}
    f2fa:	460c      	mov	r4, r1
    f2fc:	4605      	mov	r5, r0
    f2fe:	8800      	ldrh	r0, [r0, #0]
    f300:	4669      	mov	r1, sp
    f302:	f7fe fbf8 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f306:	b108      	cbz	r0, f30c <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x14>
    f308:	2002      	movs	r0, #2
    f30a:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f30c:	78a8      	ldrb	r0, [r5, #2]
    f30e:	b130      	cbz	r0, f31e <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x26>
    f310:	f000 fa3b 	bl	f78a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x406>
    f314:	70a0      	strb	r0, [r4, #2]
    f316:	8828      	ldrh	r0, [r5, #0]
    f318:	8020      	strh	r0, [r4, #0]
    f31a:	2000      	movs	r0, #0
    f31c:	bd7c      	pop	{r2, r3, r4, r5, r6, pc}
    f31e:	9801      	ldr	r0, [sp, #4]
    f320:	f890 006e 	ldrb.w	r0, [r0, #110]	; 0x6e
    f324:	e7f6      	b.n	f314 <sym_Q3C2XSZVED7JHVMCJN53G6AXVXF3ZOUR7A37OEQ+0x1c>

0000f326 <sym_QA2HTUWXDQAGJZ32BSTQMVSMKKNETZBUHL37LYA>:
    f326:	b510      	push	{r4, lr}
    f328:	f7fb fe92 	bl	b050 <sym_4W26TPGCKOCVVRKXQDBKGXGC2Y5LMZXNKS2QITA>
    f32c:	2000      	movs	r0, #0
    f32e:	bd10      	pop	{r4, pc}

0000f330 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY>:
    f330:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
    f334:	4604      	mov	r4, r0
    f336:	8840      	ldrh	r0, [r0, #2]
    f338:	460d      	mov	r5, r1
    f33a:	b1b8      	cbz	r0, f36c <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x3c>
    f33c:	8820      	ldrh	r0, [r4, #0]
    f33e:	4669      	mov	r1, sp
    f340:	f7fe fbd9 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f344:	2800      	cmp	r0, #0
    f346:	d10f      	bne.n	f368 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>
    f348:	8820      	ldrh	r0, [r4, #0]
    f34a:	8028      	strh	r0, [r5, #0]
    f34c:	9e01      	ldr	r6, [sp, #4]
    f34e:	f106 050c 	add.w	r5, r6, #12
    f352:	3678      	adds	r6, #120	; 0x78
    f354:	682f      	ldr	r7, [r5, #0]
    f356:	8862      	ldrh	r2, [r4, #2]
    f358:	4639      	mov	r1, r7
    f35a:	4630      	mov	r0, r6
    f35c:	f7fe fd8c 	bl	de78 <sym_3LQGLF52CJLOKQOJSNFVLTD3CW6GGPJMARVGQNQ>
    f360:	6828      	ldr	r0, [r5, #0]
    f362:	42b8      	cmp	r0, r7
    f364:	d1f6      	bne.n	f354 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x24>
    f366:	2000      	movs	r0, #0
    f368:	e8bd 81fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, pc}
    f36c:	2012      	movs	r0, #18
    f36e:	e7fb      	b.n	f368 <sym_ULWM63O6UPJLQWAHX3MM6KEQT4NBSDWNEO3LSBY+0x38>

0000f370 <sym_5EMU3BEOS6JCQEXTZ5M5LP72YGJNCV3W3R43AOI>:
    f370:	f7fb bd42 	b.w	adf8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA>

0000f374 <sym_266BMVQDBLXULMLATXWWN2P23YFP57RBL2ZNQ7A>:
    f374:	b510      	push	{r4, lr}
    f376:	2008      	movs	r0, #8
    f378:	f7fb feca 	bl	b110 <sym_N6TOG3AODPPFNS6LXFKKIADNGIMUMBS5BXPEFOY>
    f37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f380:	f7f9 bccc 	b.w	8d1c <sym_MEJ7N2FHYOI6WKBF6QPZGKUNC3JXLY6XDOIDFTY>

0000f384 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA>:
    f384:	b510      	push	{r4, lr}
    f386:	4604      	mov	r4, r0
    f388:	2000      	movs	r0, #0
    f38a:	8822      	ldrh	r2, [r4, #0]
    f38c:	b086      	sub	sp, #24
    f38e:	f5a2 417f 	sub.w	r1, r2, #65280	; 0xff00
    f392:	39ff      	subs	r1, #255	; 0xff
    f394:	d008      	beq.n	f3a8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x24>
    f396:	a903      	add	r1, sp, #12
    f398:	4610      	mov	r0, r2
    f39a:	f7fe fbac 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f39e:	b110      	cbz	r0, f3a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x22>
    f3a0:	2002      	movs	r0, #2
    f3a2:	b006      	add	sp, #24
    f3a4:	bd10      	pop	{r4, pc}
    f3a6:	9804      	ldr	r0, [sp, #16]
    f3a8:	8921      	ldrh	r1, [r4, #8]
    f3aa:	89a3      	ldrh	r3, [r4, #12]
    f3ac:	8962      	ldrh	r2, [r4, #10]
    f3ae:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f3b2:	88e3      	ldrh	r3, [r4, #6]
    f3b4:	88a2      	ldrh	r2, [r4, #4]
    f3b6:	8861      	ldrh	r1, [r4, #2]
    f3b8:	f000 f966 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f3bc:	b108      	cbz	r0, f3c2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e>
    f3be:	2000      	movs	r0, #0
    f3c0:	e7ef      	b.n	f3a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f3c2:	2030      	movs	r0, #48	; 0x30
    f3c4:	e7ed      	b.n	f3a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1e>
    f3c6:	f44f 71a4 	mov.w	r1, #328	; 0x148
    f3ca:	4288      	cmp	r0, r1
    f3cc:	d303      	bcc.n	f3d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x52>
    f3ce:	f640 0148 	movw	r1, #2120	; 0x848
    f3d2:	4288      	cmp	r0, r1
    f3d4:	d300      	bcc.n	f3d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x54>
    f3d6:	4608      	mov	r0, r1
    f3d8:	4770      	bx	lr
    f3da:	07c1      	lsls	r1, r0, #31
    f3dc:	d001      	beq.n	f3e2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5e>
    f3de:	2001      	movs	r0, #1
    f3e0:	4770      	bx	lr
    f3e2:	0780      	lsls	r0, r0, #30
    f3e4:	d501      	bpl.n	f3ea <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x66>
    f3e6:	2002      	movs	r0, #2
    f3e8:	4770      	bx	lr
    f3ea:	2000      	movs	r0, #0
    f3ec:	4770      	bx	lr
    f3ee:	b510      	push	{r4, lr}
    f3f0:	2801      	cmp	r0, #1
    f3f2:	d006      	beq.n	f402 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f3f4:	2802      	cmp	r0, #2
    f3f6:	d004      	beq.n	f402 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x7e>
    f3f8:	f240 2163 	movw	r1, #611	; 0x263
    f3fc:	2006      	movs	r0, #6
    f3fe:	f7f4 fd5f 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f402:	bd10      	pop	{r4, pc}
    f404:	b510      	push	{r4, lr}
    f406:	f000 fa03 	bl	f810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f40a:	b128      	cbz	r0, f418 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f40c:	f7f7 faec 	bl	69e8 <sym_C6DXC74AFTZZCXMRWBEAHQAQL3FVDNYSC45JP5Q>
    f410:	2801      	cmp	r0, #1
    f412:	d001      	beq.n	f418 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x94>
    f414:	2000      	movs	r0, #0
    f416:	bd10      	pop	{r4, pc}
    f418:	2001      	movs	r0, #1
    f41a:	bd10      	pop	{r4, pc}
    f41c:	b510      	push	{r4, lr}
    f41e:	0004      	movs	r4, r0
    f420:	d005      	beq.n	f42e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f422:	f7fb fe85 	bl	b130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f426:	4384      	bics	r4, r0
    f428:	d001      	beq.n	f42e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xaa>
    f42a:	2000      	movs	r0, #0
    f42c:	bd10      	pop	{r4, pc}
    f42e:	2001      	movs	r0, #1
    f430:	bd10      	pop	{r4, pc}
    f432:	28fb      	cmp	r0, #251	; 0xfb
    f434:	d803      	bhi.n	f43e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xba>
    f436:	f640 0048 	movw	r0, #2120	; 0x848
    f43a:	4281      	cmp	r1, r0
    f43c:	d901      	bls.n	f442 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xbe>
    f43e:	2011      	movs	r0, #17
    f440:	4770      	bx	lr
    f442:	2000      	movs	r0, #0
    f444:	4770      	bx	lr
    f446:	381b      	subs	r0, #27
    f448:	28e1      	cmp	r0, #225	; 0xe1
    f44a:	d206      	bcs.n	f45a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f44c:	f5b1 7fa4 	cmp.w	r1, #328	; 0x148
    f450:	d303      	bcc.n	f45a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xd6>
    f452:	f244 2090 	movw	r0, #17040	; 0x4290
    f456:	4281      	cmp	r1, r0
    f458:	d901      	bls.n	f45e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xda>
    f45a:	2012      	movs	r0, #18
    f45c:	4770      	bx	lr
    f45e:	2000      	movs	r0, #0
    f460:	4770      	bx	lr
    f462:	b510      	push	{r4, lr}
    f464:	4604      	mov	r4, r0
    f466:	7800      	ldrb	r0, [r0, #0]
    f468:	2801      	cmp	r0, #1
    f46a:	d009      	beq.n	f480 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfc>
    f46c:	f7f8 fcc8 	bl	7e00 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f470:	2805      	cmp	r0, #5
    f472:	d003      	beq.n	f47c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xf8>
    f474:	f7f8 fc8e 	bl	7d94 <sym_Q2F2U6CZWIZT5YZN73XVBXN5RQLCGTRVRP74TUQ>
    f478:	2800      	cmp	r0, #0
    f47a:	d000      	beq.n	f47e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xfa>
    f47c:	200c      	movs	r0, #12
    f47e:	bd10      	pop	{r4, pc}
    f480:	f7f7 fa40 	bl	6904 <sym_MWLD7ADI4DKLCCAP7TV4Z4ALM2E7XBXHCX6LARQ>
    f484:	b138      	cbz	r0, f496 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x112>
    f486:	f7f7 f8b9 	bl	65fc <sym_CAWX7VFIWXNZLGUALKXHPOWKG5OUKQTCDAWDIJQ>
    f48a:	88a1      	ldrh	r1, [r4, #4]
    f48c:	8860      	ldrh	r0, [r4, #2]
    f48e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f492:	f7f8 bc43 	b.w	7d1c <sym_4SBBLL64WWP4ZG5OZI4AZRNE5QSDGST5WG4LTOA>
    f496:	2012      	movs	r0, #18
    f498:	bd10      	pop	{r4, pc}
    f49a:	7802      	ldrb	r2, [r0, #0]
    f49c:	2a01      	cmp	r2, #1
    f49e:	d001      	beq.n	f4a4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x120>
    f4a0:	b1ba      	cbz	r2, f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f4a2:	e018      	b.n	f4d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f4a4:	7842      	ldrb	r2, [r0, #1]
    f4a6:	b13a      	cbz	r2, f4b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f4a8:	2a01      	cmp	r2, #1
    f4aa:	d005      	beq.n	f4b8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x134>
    f4ac:	2a02      	cmp	r2, #2
    f4ae:	d112      	bne.n	f4d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f4b0:	b189      	cbz	r1, f4d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f4b2:	8881      	ldrh	r1, [r0, #4]
    f4b4:	b179      	cbz	r1, f4d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f4b6:	e000      	b.n	f4ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x136>
    f4b8:	b159      	cbz	r1, f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f4ba:	8841      	ldrh	r1, [r0, #2]
    f4bc:	b149      	cbz	r1, f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f4be:	8880      	ldrh	r0, [r0, #4]
    f4c0:	b138      	cbz	r0, f4d2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x14e>
    f4c2:	eb01 0181 	add.w	r1, r1, r1, lsl #2
    f4c6:	0049      	lsls	r1, r1, #1
    f4c8:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    f4cc:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
    f4d0:	d201      	bcs.n	f4d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x152>
    f4d2:	2000      	movs	r0, #0
    f4d4:	4770      	bx	lr
    f4d6:	2012      	movs	r0, #18
    f4d8:	4770      	bx	lr
    f4da:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
    f4de:	7a45      	ldrb	r5, [r0, #9]
    f4e0:	4604      	mov	r4, r0
    f4e2:	0768      	lsls	r0, r5, #29
    f4e4:	d06c      	beq.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f4e6:	08e8      	lsrs	r0, r5, #3
    f4e8:	d16a      	bne.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f4ea:	2d02      	cmp	r5, #2
    f4ec:	d068      	beq.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f4ee:	f7fb fe1f 	bl	b130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f4f2:	ea25 0000 	bic.w	r0, r5, r0
    f4f6:	0740      	lsls	r0, r0, #29
    f4f8:	d102      	bne.n	f500 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17c>
    f4fa:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
    f4fe:	b110      	cbz	r0, f506 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x182>
    f500:	2011      	movs	r0, #17
    f502:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
    f506:	2d01      	cmp	r5, #1
    f508:	d15a      	bne.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f50a:	27ff      	movs	r7, #255	; 0xff
    f50c:	2101      	movs	r1, #1
    f50e:	69a0      	ldr	r0, [r4, #24]
    f510:	f7fb fd4a 	bl	afa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
    f514:	b3e8      	cbz	r0, f592 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f516:	46a8      	mov	r8, r5
    f518:	2600      	movs	r6, #0
    f51a:	4635      	mov	r5, r6
    f51c:	42bd      	cmp	r5, r7
    f51e:	d02f      	beq.n	f580 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f520:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    f524:	6988      	ldr	r0, [r1, #24]
    f526:	68c9      	ldr	r1, [r1, #12]
    f528:	4288      	cmp	r0, r1
    f52a:	d849      	bhi.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f52c:	4406      	add	r6, r0
    f52e:	eb04 0045 	add.w	r0, r4, r5, lsl #1
    f532:	4681      	mov	r9, r0
    f534:	8ec1      	ldrh	r1, [r0, #54]	; 0x36
    f536:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    f53a:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
    f53c:	e88d 000e 	stmia.w	sp, {r1, r2, r3}
    f540:	8e03      	ldrh	r3, [r0, #48]	; 0x30
    f542:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
    f544:	8c81      	ldrh	r1, [r0, #36]	; 0x24
    f546:	2000      	movs	r0, #0
    f548:	f000 f89e 	bl	f688 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x304>
    f54c:	b308      	cbz	r0, f592 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x20e>
    f54e:	b1bd      	cbz	r5, f580 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x1fc>
    f550:	f8b9 1024 	ldrh.w	r1, [r9, #36]	; 0x24
    f554:	f8b9 0022 	ldrh.w	r0, [r9, #34]	; 0x22
    f558:	4281      	cmp	r1, r0
    f55a:	d131      	bne.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f55c:	f8b9 102a 	ldrh.w	r1, [r9, #42]	; 0x2a
    f560:	f8b9 0028 	ldrh.w	r0, [r9, #40]	; 0x28
    f564:	4281      	cmp	r1, r0
    f566:	d12b      	bne.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f568:	f8b9 1030 	ldrh.w	r1, [r9, #48]	; 0x30
    f56c:	f8b9 002e 	ldrh.w	r0, [r9, #46]	; 0x2e
    f570:	4281      	cmp	r1, r0
    f572:	d125      	bne.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f574:	f8b9 1036 	ldrh.w	r1, [r9, #54]	; 0x36
    f578:	f8b9 0034 	ldrh.w	r0, [r9, #52]	; 0x34
    f57c:	4281      	cmp	r1, r0
    f57e:	d11f      	bne.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f580:	1c6d      	adds	r5, r5, #1
    f582:	b2ed      	uxtb	r5, r5
    f584:	4545      	cmp	r5, r8
    f586:	d3c9      	bcc.n	f51c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x198>
    f588:	68e0      	ldr	r0, [r4, #12]
    f58a:	42b0      	cmp	r0, r6
    f58c:	d318      	bcc.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f58e:	7820      	ldrb	r0, [r4, #0]
    f590:	e000      	b.n	f594 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x210>
    f592:	e003      	b.n	f59c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x218>
    f594:	b120      	cbz	r0, f5a0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x21c>
    f596:	2801      	cmp	r0, #1
    f598:	d112      	bne.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f59a:	e004      	b.n	f5a6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x222>
    f59c:	2030      	movs	r0, #48	; 0x30
    f59e:	e7b0      	b.n	f502 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f5a0:	78a0      	ldrb	r0, [r4, #2]
    f5a2:	2800      	cmp	r0, #0
    f5a4:	d1f7      	bne.n	f596 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x212>
    f5a6:	7860      	ldrb	r0, [r4, #1]
    f5a8:	b128      	cbz	r0, f5b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f5aa:	2801      	cmp	r0, #1
    f5ac:	d003      	beq.n	f5b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f5ae:	2802      	cmp	r0, #2
    f5b0:	d001      	beq.n	f5b6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x232>
    f5b2:	2803      	cmp	r0, #3
    f5b4:	d104      	bne.n	f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f5b6:	f894 004c 	ldrb.w	r0, [r4, #76]	; 0x4c
    f5ba:	b108      	cbz	r0, f5c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x23c>
    f5bc:	2807      	cmp	r0, #7
    f5be:	d901      	bls.n	f5c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x240>
    f5c0:	2012      	movs	r0, #18
    f5c2:	e79e      	b.n	f502 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f5c4:	2000      	movs	r0, #0
    f5c6:	e79c      	b.n	f502 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x17e>
    f5c8:	b570      	push	{r4, r5, r6, lr}
    f5ca:	4604      	mov	r4, r0
    f5cc:	7800      	ldrb	r0, [r0, #0]
    f5ce:	2500      	movs	r5, #0
    f5d0:	2801      	cmp	r0, #1
    f5d2:	d004      	beq.n	f5de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f5d4:	b118      	cbz	r0, f5de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f5d6:	2802      	cmp	r0, #2
    f5d8:	d001      	beq.n	f5de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x25a>
    f5da:	2803      	cmp	r0, #3
    f5dc:	d139      	bne.n	f652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f5de:	7860      	ldrb	r0, [r4, #1]
    f5e0:	b128      	cbz	r0, f5ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f5e2:	2801      	cmp	r0, #1
    f5e4:	d003      	beq.n	f5ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f5e6:	2802      	cmp	r0, #2
    f5e8:	d001      	beq.n	f5ee <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x26a>
    f5ea:	2803      	cmp	r0, #3
    f5ec:	d131      	bne.n	f652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f5ee:	7e60      	ldrb	r0, [r4, #25]
    f5f0:	b948      	cbnz	r0, f606 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x282>
    f5f2:	78a0      	ldrb	r0, [r4, #2]
    f5f4:	2801      	cmp	r0, #1
    f5f6:	d12c      	bne.n	f652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f5f8:	f7fb fd9a 	bl	b130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f5fc:	4601      	mov	r1, r0
    f5fe:	78a0      	ldrb	r0, [r4, #2]
    f600:	ea30 0101 	bics.w	r1, r0, r1
    f604:	d001      	beq.n	f60a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x286>
    f606:	2011      	movs	r0, #17
    f608:	bd70      	pop	{r4, r5, r6, pc}
    f60a:	07c0      	lsls	r0, r0, #31
    f60c:	d006      	beq.n	f61c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x298>
    f60e:	78e0      	ldrb	r0, [r4, #3]
    f610:	2301      	movs	r3, #1
    f612:	6922      	ldr	r2, [r4, #16]
    f614:	68a1      	ldr	r1, [r4, #8]
    f616:	f000 f820 	bl	f65a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f61a:	4605      	mov	r5, r0
    f61c:	78a0      	ldrb	r0, [r4, #2]
    f61e:	0780      	lsls	r0, r0, #30
    f620:	d506      	bpl.n	f630 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ac>
    f622:	78e0      	ldrb	r0, [r4, #3]
    f624:	2302      	movs	r3, #2
    f626:	6922      	ldr	r2, [r4, #16]
    f628:	68a1      	ldr	r1, [r4, #8]
    f62a:	f000 f816 	bl	f65a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f62e:	4305      	orrs	r5, r0
    f630:	78a0      	ldrb	r0, [r4, #2]
    f632:	0740      	lsls	r0, r0, #29
    f634:	d506      	bpl.n	f644 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c0>
    f636:	78e0      	ldrb	r0, [r4, #3]
    f638:	2304      	movs	r3, #4
    f63a:	6922      	ldr	r2, [r4, #16]
    f63c:	68a1      	ldr	r1, [r4, #8]
    f63e:	f000 f80c 	bl	f65a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d6>
    f642:	4305      	orrs	r5, r0
    f644:	b10d      	cbz	r5, f64a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2c6>
    f646:	4628      	mov	r0, r5
    f648:	bd70      	pop	{r4, r5, r6, pc}
    f64a:	7e20      	ldrb	r0, [r4, #24]
    f64c:	b108      	cbz	r0, f652 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2ce>
    f64e:	2807      	cmp	r0, #7
    f650:	d901      	bls.n	f656 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2d2>
    f652:	2012      	movs	r0, #18
    f654:	bd70      	pop	{r4, r5, r6, pc}
    f656:	2000      	movs	r0, #0
    f658:	bd70      	pop	{r4, r5, r6, pc}
    f65a:	b570      	push	{r4, r5, r6, lr}
    f65c:	4614      	mov	r4, r2
    f65e:	460d      	mov	r5, r1
    f660:	b108      	cbz	r0, f666 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2e2>
    f662:	2801      	cmp	r0, #1
    f664:	d10a      	bne.n	f67c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2f8>
    f666:	4619      	mov	r1, r3
    f668:	4610      	mov	r0, r2
    f66a:	f7fb fc9d 	bl	afa8 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x1b0>
    f66e:	b138      	cbz	r0, f680 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f670:	4628      	mov	r0, r5
    f672:	f7fb fc61 	bl	af38 <sym_RGKYP5TXYS27EGT6ZHZS5EDDAZK5QGTWLBOBJEA+0x140>
    f676:	b118      	cbz	r0, f680 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x2fc>
    f678:	42ac      	cmp	r4, r5
    f67a:	d903      	bls.n	f684 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x300>
    f67c:	2012      	movs	r0, #18
    f67e:	bd70      	pop	{r4, r5, r6, pc}
    f680:	2030      	movs	r0, #48	; 0x30
    f682:	bd70      	pop	{r4, r5, r6, pc}
    f684:	2000      	movs	r0, #0
    f686:	bd70      	pop	{r4, r5, r6, pc}
    f688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f68c:	461d      	mov	r5, r3
    f68e:	4610      	mov	r0, r2
    f690:	e9dd 4706 	ldrd	r4, r7, [sp, #24]
    f694:	1f8b      	subs	r3, r1, #6
    f696:	f640 427a 	movw	r2, #3194	; 0xc7a
    f69a:	9e08      	ldr	r6, [sp, #32]
    f69c:	4293      	cmp	r3, r2
    f69e:	d81c      	bhi.n	f6da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f6a0:	1f83      	subs	r3, r0, #6
    f6a2:	4293      	cmp	r3, r2
    f6a4:	d819      	bhi.n	f6da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f6a6:	4281      	cmp	r1, r0
    f6a8:	d817      	bhi.n	f6da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f6aa:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
    f6ae:	d214      	bcs.n	f6da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f6b0:	f1a4 010a 	sub.w	r1, r4, #10
    f6b4:	1f12      	subs	r2, r2, #4
    f6b6:	4291      	cmp	r1, r2
    f6b8:	d80f      	bhi.n	f6da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f6ba:	f7fe fa28 	bl	db0e <sym_3GY4TYJRRJL4WNFV6XN3ATYT4MIF4FYTN3S33RI>
    f6be:	1c6d      	adds	r5, r5, #1
    f6c0:	4368      	muls	r0, r5
    f6c2:	f240 2171 	movw	r1, #625	; 0x271
    f6c6:	0040      	lsls	r0, r0, #1
    f6c8:	434c      	muls	r4, r1
    f6ca:	ebb0 1f04 	cmp.w	r0, r4, lsl #4
    f6ce:	d204      	bcs.n	f6da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f6d0:	42b7      	cmp	r7, r6
    f6d2:	d802      	bhi.n	f6da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x356>
    f6d4:	2001      	movs	r0, #1
    f6d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f6da:	2000      	movs	r0, #0
    f6dc:	e7fb      	b.n	f6d6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x352>
    f6de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6e2:	4606      	mov	r6, r0
    f6e4:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
    f6e8:	f8b0 4054 	ldrh.w	r4, [r0, #84]	; 0x54
    f6ec:	4615      	mov	r5, r2
    f6ee:	302c      	adds	r0, #44	; 0x2c
    f6f0:	f7f8 fb00 	bl	7cf4 <sym_O7FTLHSXUHTIGFFOSF4LH5PJ5IHCQIFPCODTDKI>
    f6f4:	4680      	mov	r8, r0
    f6f6:	2102      	movs	r1, #2
    f6f8:	f7fe fac8 	bl	dc8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f6fc:	4287      	cmp	r7, r0
    f6fe:	d200      	bcs.n	f702 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x37e>
    f700:	4638      	mov	r0, r7
    f702:	4607      	mov	r7, r0
    f704:	2102      	movs	r1, #2
    f706:	4640      	mov	r0, r8
    f708:	f7fe fac0 	bl	dc8c <sym_CMGYAOMYUJOSH7VMLD3ENK3VLSIPR3DVYN2F44Y>
    f70c:	4284      	cmp	r4, r0
    f70e:	d200      	bcs.n	f712 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x38e>
    f710:	4620      	mov	r0, r4
    f712:	8831      	ldrh	r1, [r6, #0]
    f714:	8029      	strh	r1, [r5, #0]
    f716:	2f1b      	cmp	r7, #27
    f718:	d913      	bls.n	f742 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3be>
    f71a:	2ffb      	cmp	r7, #251	; 0xfb
    f71c:	d300      	bcc.n	f720 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f71e:	27fb      	movs	r7, #251	; 0xfb
    f720:	806f      	strh	r7, [r5, #2]
    f722:	281b      	cmp	r0, #27
    f724:	d90f      	bls.n	f746 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3c2>
    f726:	28fb      	cmp	r0, #251	; 0xfb
    f728:	d300      	bcc.n	f72c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f72a:	20fb      	movs	r0, #251	; 0xfb
    f72c:	80e8      	strh	r0, [r5, #6]
    f72e:	4640      	mov	r0, r8
    f730:	f7ff fe49 	bl	f3c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f734:	80a8      	strh	r0, [r5, #4]
    f736:	4640      	mov	r0, r8
    f738:	f7ff fe45 	bl	f3c6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x42>
    f73c:	8128      	strh	r0, [r5, #8]
    f73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f742:	271b      	movs	r7, #27
    f744:	e7ec      	b.n	f720 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x39c>
    f746:	201b      	movs	r0, #27
    f748:	e7f0      	b.n	f72c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3a8>
    f74a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f74e:	7890      	ldrb	r0, [r2, #2]
    f750:	9e06      	ldr	r6, [sp, #24]
    f752:	461d      	mov	r5, r3
    f754:	4614      	mov	r4, r2
    f756:	b908      	cbnz	r0, f75c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3d8>
    f758:	f7fb fcea 	bl	b130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f75c:	78e4      	ldrb	r4, [r4, #3]
    f75e:	4607      	mov	r7, r0
    f760:	b914      	cbnz	r4, f768 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3e4>
    f762:	f7fb fce5 	bl	b130 <sym_HA7EOSELAQYVMG5UXMJGQLLFEIRQPB7MNOSYOXQ>
    f766:	4604      	mov	r4, r0
    f768:	b16f      	cbz	r7, f786 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f76a:	b164      	cbz	r4, f786 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f76c:	4638      	mov	r0, r7
    f76e:	f7ff fe34 	bl	f3da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f772:	4620      	mov	r0, r4
    f774:	f7ff fe31 	bl	f3da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x56>
    f778:	b12f      	cbz	r7, f786 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f77a:	b124      	cbz	r4, f786 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x402>
    f77c:	702f      	strb	r7, [r5, #0]
    f77e:	7034      	strb	r4, [r6, #0]
    f780:	2000      	movs	r0, #0
    f782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f786:	2009      	movs	r0, #9
    f788:	e7fb      	b.n	f782 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x3fe>
    f78a:	b510      	push	{r4, lr}
    f78c:	f7fc ff4c 	bl	c628 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
    f790:	b928      	cbnz	r0, f79e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    f792:	f7fc ff7f 	bl	c694 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
    f796:	b910      	cbnz	r0, f79e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41a>
    f798:	f7fc ff86 	bl	c6a8 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
    f79c:	b108      	cbz	r0, f7a2 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x41e>
    f79e:	2008      	movs	r0, #8
    f7a0:	bd10      	pop	{r4, pc}
    f7a2:	f7fc ff16 	bl	c5d2 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
    f7a6:	b940      	cbnz	r0, f7ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    f7a8:	f7fc ff1d 	bl	c5e6 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
    f7ac:	b928      	cbnz	r0, f7ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    f7ae:	f7fc ff31 	bl	c614 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
    f7b2:	b910      	cbnz	r0, f7ba <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x436>
    f7b4:	f7fc ff42 	bl	c63c <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
    f7b8:	b108      	cbz	r0, f7be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x43a>
    f7ba:	2004      	movs	r0, #4
    f7bc:	bd10      	pop	{r4, pc}
    f7be:	f240 519c 	movw	r1, #1436	; 0x59c
    f7c2:	2039      	movs	r0, #57	; 0x39
    f7c4:	f7f4 fb7c 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f7c8:	b510      	push	{r4, lr}
    f7ca:	f7fb fcab 	bl	b124 <sym_PBZPB3PSJJYSQQW7TH2XDGNLD2UYSZR6YJ4ZZNQ>
    f7ce:	f3c0 1040 	ubfx	r0, r0, #5, #1
    f7d2:	bd10      	pop	{r4, pc}
    f7d4:	6840      	ldr	r0, [r0, #4]
    f7d6:	f000 b800 	b.w	f7da <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x456>
    f7da:	b508      	push	{r3, lr}
    f7dc:	f890 1120 	ldrb.w	r1, [r0, #288]	; 0x120
    f7e0:	f890 009c 	ldrb.w	r0, [r0, #156]	; 0x9c
    f7e4:	f88d 0000 	strb.w	r0, [sp]
    f7e8:	9800      	ldr	r0, [sp, #0]
    f7ea:	9000      	str	r0, [sp, #0]
    f7ec:	f89d 0000 	ldrb.w	r0, [sp]
    f7f0:	1e40      	subs	r0, r0, #1
    f7f2:	4208      	tst	r0, r1
    f7f4:	d003      	beq.n	f7fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
    f7f6:	2904      	cmp	r1, #4
    f7f8:	d001      	beq.n	f7fe <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x47a>
    f7fa:	2001      	movs	r0, #1
    f7fc:	bd08      	pop	{r3, pc}
    f7fe:	2000      	movs	r0, #0
    f800:	bd08      	pop	{r3, pc}
    f802:	b510      	push	{r4, lr}
    f804:	f000 f804 	bl	f810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f808:	2800      	cmp	r0, #0
    f80a:	d000      	beq.n	f80e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48a>
    f80c:	2001      	movs	r0, #1
    f80e:	bd10      	pop	{r4, pc}
    f810:	b510      	push	{r4, lr}
    f812:	f7f8 faf5 	bl	7e00 <sym_6A56LMFOW5CXUIKYPP4TFUBTCQL6RLVLTWUNNWQ>
    f816:	2804      	cmp	r0, #4
    f818:	d003      	beq.n	f822 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f81a:	2805      	cmp	r0, #5
    f81c:	d001      	beq.n	f822 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x49e>
    f81e:	2000      	movs	r0, #0
    f820:	bd10      	pop	{r4, pc}
    f822:	2001      	movs	r0, #1
    f824:	bd10      	pop	{r4, pc}
    f826:	b5f0      	push	{r4, r5, r6, r7, lr}
    f828:	b089      	sub	sp, #36	; 0x24
    f82a:	4604      	mov	r4, r0
    f82c:	8800      	ldrh	r0, [r0, #0]
    f82e:	a906      	add	r1, sp, #24
    f830:	f7fe f961 	bl	daf6 <sym_UHWWEFDYCEMO6BV2Q3GVLMFC37EIDJEWGQC2XUA>
    f834:	2800      	cmp	r0, #0
    f836:	d143      	bne.n	f8c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f838:	9807      	ldr	r0, [sp, #28]
    f83a:	2601      	movs	r6, #1
    f83c:	f890 119e 	ldrb.w	r1, [r0, #414]	; 0x19e
    f840:	f88d 1008 	strb.w	r1, [sp, #8]
    f844:	9902      	ldr	r1, [sp, #8]
    f846:	9102      	str	r1, [sp, #8]
    f848:	f89d 1008 	ldrb.w	r1, [sp, #8]
    f84c:	f88d 100c 	strb.w	r1, [sp, #12]
    f850:	f890 1086 	ldrb.w	r1, [r0, #134]	; 0x86
    f854:	3078      	adds	r0, #120	; 0x78
    f856:	291d      	cmp	r1, #29
    f858:	d102      	bne.n	f860 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4dc>
    f85a:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f85e:	b141      	cbz	r1, f872 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4ee>
    f860:	2100      	movs	r1, #0
    f862:	f88d 1004 	strb.w	r1, [sp, #4]
    f866:	2105      	movs	r1, #5
    f868:	304e      	adds	r0, #78	; 0x4e
    f86a:	f7ff f9e2 	bl	ec32 <sym_A3ADY4J2FQCM6IVTTK5E6RCDPADI2QXOETLS64I+0x28>
    f86e:	b110      	cbz	r0, f876 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f2>
    f870:	e004      	b.n	f87c <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4f8>
    f872:	2101      	movs	r1, #1
    f874:	e7f5      	b.n	f862 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x4de>
    f876:	f89d 0004 	ldrb.w	r0, [sp, #4]
    f87a:	b300      	cbz	r0, f8be <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53a>
    f87c:	8921      	ldrh	r1, [r4, #8]
    f87e:	88e0      	ldrh	r0, [r4, #6]
    f880:	f7ff fde1 	bl	f446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f884:	2800      	cmp	r0, #0
    f886:	d11b      	bne.n	f8c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f888:	88a1      	ldrh	r1, [r4, #4]
    f88a:	8860      	ldrh	r0, [r4, #2]
    f88c:	f7ff fddb 	bl	f446 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xc2>
    f890:	2800      	cmp	r0, #0
    f892:	d115      	bne.n	f8c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f894:	8921      	ldrh	r1, [r4, #8]
    f896:	88e0      	ldrh	r0, [r4, #6]
    f898:	f7ff fdcb 	bl	f432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f89c:	2800      	cmp	r0, #0
    f89e:	d10f      	bne.n	f8c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f8a0:	88a1      	ldrh	r1, [r4, #4]
    f8a2:	8860      	ldrh	r0, [r4, #2]
    f8a4:	f7ff fdc5 	bl	f432 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0xae>
    f8a8:	0007      	movs	r7, r0
    f8aa:	d109      	bne.n	f8c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f8ac:	9807      	ldr	r0, [sp, #28]
    f8ae:	f500 7599 	add.w	r5, r0, #306	; 0x132
    f8b2:	706e      	strb	r6, [r5, #1]
    f8b4:	f89d 100c 	ldrb.w	r1, [sp, #12]
    f8b8:	b121      	cbz	r1, f8c4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x540>
    f8ba:	273a      	movs	r7, #58	; 0x3a
    f8bc:	e02d      	b.n	f91a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x596>
    f8be:	201a      	movs	r0, #26
    f8c0:	b009      	add	sp, #36	; 0x24
    f8c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    f8c4:	4631      	mov	r1, r6
    f8c6:	aa03      	add	r2, sp, #12
    f8c8:	f7ff ff09 	bl	f6de <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x35a>
    f8cc:	8861      	ldrh	r1, [r4, #2]
    f8ce:	f8bd 0012 	ldrh.w	r0, [sp, #18]
    f8d2:	4281      	cmp	r1, r0
    f8d4:	d200      	bcs.n	f8d8 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x554>
    f8d6:	4608      	mov	r0, r1
    f8d8:	80e8      	strh	r0, [r5, #6]
    f8da:	88a1      	ldrh	r1, [r4, #4]
    f8dc:	f8bd 0014 	ldrh.w	r0, [sp, #20]
    f8e0:	4281      	cmp	r1, r0
    f8e2:	d200      	bcs.n	f8e6 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x562>
    f8e4:	4608      	mov	r0, r1
    f8e6:	8128      	strh	r0, [r5, #8]
    f8e8:	88e2      	ldrh	r2, [r4, #6]
    f8ea:	f8bd 100e 	ldrh.w	r1, [sp, #14]
    f8ee:	428a      	cmp	r2, r1
    f8f0:	d200      	bcs.n	f8f4 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x570>
    f8f2:	4611      	mov	r1, r2
    f8f4:	8069      	strh	r1, [r5, #2]
    f8f6:	8922      	ldrh	r2, [r4, #8]
    f8f8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
    f8fc:	428a      	cmp	r2, r1
    f8fe:	d200      	bcs.n	f902 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x57e>
    f900:	4611      	mov	r1, r2
    f902:	f640 0248 	movw	r2, #2120	; 0x848
    f906:	80a9      	strh	r1, [r5, #4]
    f908:	4291      	cmp	r1, r2
    f90a:	d300      	bcc.n	f90e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x58a>
    f90c:	4611      	mov	r1, r2
    f90e:	80a9      	strh	r1, [r5, #4]
    f910:	4290      	cmp	r0, r2
    f912:	d200      	bcs.n	f916 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x592>
    f914:	4602      	mov	r2, r0
    f916:	812a      	strh	r2, [r5, #8]
    f918:	702e      	strb	r6, [r5, #0]
    f91a:	2000      	movs	r0, #0
    f91c:	7068      	strb	r0, [r5, #1]
    f91e:	4638      	mov	r0, r7
    f920:	e7ce      	b.n	f8c0 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x53c>
    f922:	b530      	push	{r4, r5, lr}
    f924:	f340 0400 	sbfx	r4, r0, #0, #1
    f928:	f340 0040 	sbfx	r0, r0, #1, #1
    f92c:	1c40      	adds	r0, r0, #1
    f92e:	9d03      	ldr	r5, [sp, #12]
    f930:	1c64      	adds	r4, r4, #1
    f932:	d000      	beq.n	f936 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b2>
    f934:	b119      	cbz	r1, f93e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    f936:	b100      	cbz	r0, f93a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5b6>
    f938:	b10a      	cbz	r2, f93e <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5ba>
    f93a:	b91c      	cbnz	r4, f944 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c0>
    f93c:	e001      	b.n	f942 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5be>
    f93e:	2011      	movs	r0, #17
    f940:	bd30      	pop	{r4, r5, pc}
    f942:	2100      	movs	r1, #0
    f944:	7019      	strb	r1, [r3, #0]
    f946:	b900      	cbnz	r0, f94a <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5c6>
    f948:	2200      	movs	r2, #0
    f94a:	702a      	strb	r2, [r5, #0]
    f94c:	2000      	movs	r0, #0
    f94e:	bd30      	pop	{r4, r5, pc}
    f950:	b510      	push	{r4, lr}
    f952:	f7ff ff5d 	bl	f810 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x48c>
    f956:	b120      	cbz	r0, f962 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    f958:	f7f7 f84e 	bl	69f8 <sym_2P3U35PVPGI22WKCAIMTRDZZMPBUUYDSHVM74OA>
    f95c:	b108      	cbz	r0, f962 <sym_B6ZAB6SSXJM6TA2WDBDJONLPNSGZQHMWKKULUDA+0x5de>
    f95e:	2001      	movs	r0, #1
    f960:	bd10      	pop	{r4, pc}
    f962:	2000      	movs	r0, #0
    f964:	bd10      	pop	{r4, pc}

0000f966 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ>:
    f966:	6802      	ldr	r2, [r0, #0]
    f968:	b912      	cbnz	r2, f970 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0xa>
    f96a:	6001      	str	r1, [r0, #0]
    f96c:	4770      	bx	lr
    f96e:	4602      	mov	r2, r0
    f970:	6850      	ldr	r0, [r2, #4]
    f972:	b108      	cbz	r0, f978 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x12>
    f974:	428a      	cmp	r2, r1
    f976:	d1fa      	bne.n	f96e <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x8>
    f978:	428a      	cmp	r2, r1
    f97a:	d0f7      	beq.n	f96c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x6>
    f97c:	6051      	str	r1, [r2, #4]
    f97e:	4770      	bx	lr
    f980:	b510      	push	{r4, lr}
    f982:	4604      	mov	r4, r0
    f984:	e002      	b.n	f98c <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x26>
    f986:	6820      	ldr	r0, [r4, #0]
    f988:	4780      	blx	r0
    f98a:	6864      	ldr	r4, [r4, #4]
    f98c:	2c00      	cmp	r4, #0
    f98e:	d1fa      	bne.n	f986 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x20>
    f990:	bd10      	pop	{r4, pc}
    f992:	b510      	push	{r4, lr}
    f994:	2000      	movs	r0, #0
    f996:	f7f4 fc5b 	bl	4250 <sym_HNCDHITBYWLO4GMOSPKCO7YXRRWIUQ2IKIZ4C5A>
    f99a:	f7f4 fe7b 	bl	4694 <sym_NOQRMQ5IH6SQFJEPI5A3UBMITO54HG4WO4DTTXA>
    f99e:	f7f5 f8c3 	bl	4b28 <sym_MJCF2WRL4I323V23HKVENOJWV5IXH54R5X6LJRY>
    f9a2:	f7f5 faab 	bl	4efc <sym_CZFK26FRDZ53FUV75DOIMFWVD4RTHYB6I22U4LA>
    f9a6:	2800      	cmp	r0, #0
    f9a8:	d003      	beq.n	f9b2 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x4c>
    f9aa:	21b8      	movs	r1, #184	; 0xb8
    f9ac:	2001      	movs	r0, #1
    f9ae:	f7f4 fa87 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9b2:	bd10      	pop	{r4, pc}
    f9b4:	b510      	push	{r4, lr}
    f9b6:	f000 f80a 	bl	f9ce <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x68>
    f9ba:	f7ff f823 	bl	ea04 <sym_VJEPN3SDR5AQAFQ3NEQBRQ5LOSN3JDHOXS2M77A>
    f9be:	2800      	cmp	r0, #0
    f9c0:	d004      	beq.n	f9cc <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x66>
    f9c2:	f240 1135 	movw	r1, #309	; 0x135
    f9c6:	2001      	movs	r0, #1
    f9c8:	f7f4 fa7a 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9cc:	bd10      	pop	{r4, pc}
    f9ce:	b510      	push	{r4, lr}
    f9d0:	f7f8 f932 	bl	7c38 <sym_C2OROK7MMAFVDZS534TELVVJ2FCCBKQAERGDZHY>
    f9d4:	b120      	cbz	r0, f9e0 <sym_UIICDNWE37K7Q6PWKEUSWDTQBQP3XQZ5WN3TYNQ+0x7a>
    f9d6:	f240 111d 	movw	r1, #285	; 0x11d
    f9da:	2001      	movs	r0, #1
    f9dc:	f7f4 fa70 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    f9e0:	f7f6 ff5a 	bl	6898 <sym_DT76CGJPKTZTBYTJ74CI3APDNUWUPZSXP2BUGWY>
    f9e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    f9e8:	f7fa bed4 	b.w	a794 <sym_GWAYX66NWSVNQ3OHE5BQRMOI6IRTYM6NL6TBSRQ>
    f9ec:	000b0001 	.word	0x000b0001
    f9f0:	000a0002 	.word	0x000a0002
    f9f4:	00090005 	.word	0x00090005
    f9f8:	0008000a 	.word	0x0008000a
    f9fc:	00070014 	.word	0x00070014
    fa00:	0006001e 	.word	0x0006001e
    fa04:	00050032 	.word	0x00050032
    fa08:	0004004b 	.word	0x0004004b
    fa0c:	00030064 	.word	0x00030064
    fa10:	00020096 	.word	0x00020096
    fa14:	000100fa 	.word	0x000100fa
    fa18:	000001f4 	.word	0x000001f4

0000fa1c <sym_BIDMG7YHRFQNLIKRFVSOGOT6IXZCQ6UEJKN52VI>:
    fa1c:	b510      	push	{r4, lr}
    fa1e:	f7fb ff3f 	bl	b8a0 <sym_RUQBFILZ5CHV2AAL6C3D2J5Y33TCCAPZTHBGZ3A>
    fa22:	f000 f850 	bl	fac6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>
    fa26:	f7fb fbf7 	bl	b218 <sym_LOTFHGQTFUFWGX7HOTL4Q2XATGIJRVIMCMOYRMA>
    fa2a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fa2e:	f7fb bcf5 	b.w	b41c <sym_TRMXENGHOH4VBQQZPIN222FLCEFU3Z3CD5C47DY>

0000fa32 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ>:
    fa32:	b510      	push	{r4, lr}
    fa34:	24c8      	movs	r4, #200	; 0xc8
    fa36:	1e64      	subs	r4, r4, #1
    fa38:	b2e4      	uxtb	r4, r4
    fa3a:	f7fb fc0b 	bl	b254 <sym_KZ5CVONZGMGIGNMI7YD6HLN3FXAAJK6OMEJW6BQ>
    fa3e:	2802      	cmp	r0, #2
    fa40:	d003      	beq.n	fa4a <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x18>
    fa42:	2801      	cmp	r0, #1
    fa44:	d000      	beq.n	fa48 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x16>
    fa46:	2000      	movs	r0, #0
    fa48:	bd10      	pop	{r4, pc}
    fa4a:	2c00      	cmp	r4, #0
    fa4c:	d1f3      	bne.n	fa36 <sym_ZG4AW57AAT4BVE2J2CU4KMCCWK46ENDRPKBYXEQ+0x4>
    fa4e:	2193      	movs	r1, #147	; 0x93
    fa50:	203b      	movs	r0, #59	; 0x3b
    fa52:	f7f4 fa35 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>

0000fa56 <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ>:
    fa56:	b510      	push	{r4, lr}
    fa58:	f7f4 f8c8 	bl	3bec <mpsl_fem_lna_configuration_clear>
    fa5c:	2800      	cmp	r0, #0
    fa5e:	d005      	beq.n	fa6c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fa60:	1c40      	adds	r0, r0, #1
    fa62:	d003      	beq.n	fa6c <sym_PKZI2LNJRQFOGPY3Z6D7ENZHA2LDIAEYXBTZBJQ+0x16>
    fa64:	2150      	movs	r1, #80	; 0x50
    fa66:	2040      	movs	r0, #64	; 0x40
    fa68:	f7f4 fa2a 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa6c:	bd10      	pop	{r4, pc}

0000fa6e <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ>:
    fa6e:	b510      	push	{r4, lr}
    fa70:	f7f4 f8c8 	bl	3c04 <mpsl_fem_pa_configuration_clear>
    fa74:	2800      	cmp	r0, #0
    fa76:	d005      	beq.n	fa84 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fa78:	1c40      	adds	r0, r0, #1
    fa7a:	d003      	beq.n	fa84 <sym_N6LF7X4QYONFKAWQRSSHARQMQTFUHJR6FXUMIWQ+0x16>
    fa7c:	2149      	movs	r1, #73	; 0x49
    fa7e:	2040      	movs	r0, #64	; 0x40
    fa80:	f7f4 fa1e 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa84:	bd10      	pop	{r4, pc}

0000fa86 <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI>:
    fa86:	b510      	push	{r4, lr}
    fa88:	f7f4 f8aa 	bl	3be0 <mpsl_fem_disable>
    fa8c:	2800      	cmp	r0, #0
    fa8e:	d005      	beq.n	fa9c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fa90:	1c40      	adds	r0, r0, #1
    fa92:	d003      	beq.n	fa9c <sym_DSSXRKAIB7ZUK7R2G3EQLOMJRLX6MVTLTDBXFXI+0x16>
    fa94:	2157      	movs	r1, #87	; 0x57
    fa96:	2040      	movs	r0, #64	; 0x40
    fa98:	f7f4 fa12 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fa9c:	bd10      	pop	{r4, pc}

0000fa9e <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA>:
    fa9e:	b510      	push	{r4, lr}
    faa0:	2100      	movs	r1, #0
    faa2:	4608      	mov	r0, r1
    faa4:	f7f4 f8a8 	bl	3bf8 <mpsl_fem_lna_configuration_set>
    faa8:	b108      	cbz	r0, faae <sym_WFMAMHLWHE7QJLGLEMKA2L5X3GX23U2AG4FLMAA+0x10>
    faaa:	2000      	movs	r0, #0
    faac:	bd10      	pop	{r4, pc}
    faae:	2001      	movs	r0, #1
    fab0:	bd10      	pop	{r4, pc}

0000fab2 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I>:
    fab2:	b508      	push	{r3, lr}
    fab4:	4668      	mov	r0, sp
    fab6:	f7f4 f8b1 	bl	3c1c <mpsl_fem_pa_is_configured>
    faba:	f89d 0000 	ldrb.w	r0, [sp]
    fabe:	2800      	cmp	r0, #0
    fac0:	d000      	beq.n	fac4 <sym_5IC6CLAWUNEEDICBRGJBLMKHCLXAQK6XSBR2I2I+0x12>
    fac2:	2001      	movs	r0, #1
    fac4:	bd08      	pop	{r3, pc}

0000fac6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA>:
    fac6:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    faca:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    face:	f8c1 0180 	str.w	r0, [r1, #384]	; 0x180
    fad2:	f3bf 8f4f 	dsb	sy
    fad6:	f3bf 8f6f 	isb	sy
    fada:	f7fb bd79 	b.w	b5d0 <sym_6Q45YYTUN2KDQ5V5UGE3T2LTI5FNGX6WIJYLIDI+0x4c>
    fade:	2800      	cmp	r0, #0
    fae0:	db09      	blt.n	faf6 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x30>
    fae2:	f000 021f 	and.w	r2, r0, #31
    fae6:	2101      	movs	r1, #1
    fae8:	4091      	lsls	r1, r2
    faea:	0940      	lsrs	r0, r0, #5
    faec:	0080      	lsls	r0, r0, #2
    faee:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    faf2:	f8c0 1280 	str.w	r1, [r0, #640]	; 0x280
    faf6:	4770      	bx	lr
    faf8:	2800      	cmp	r0, #0
    fafa:	db0d      	blt.n	fb18 <sym_XPKSFPKFBNSTZZU4FUMGC3XRHAVS24BBL53HRMA+0x52>
    fafc:	f000 021f 	and.w	r2, r0, #31
    fb00:	2101      	movs	r1, #1
    fb02:	4091      	lsls	r1, r2
    fb04:	0940      	lsrs	r0, r0, #5
    fb06:	0080      	lsls	r0, r0, #2
    fb08:	f100 20e0 	add.w	r0, r0, #3758153728	; 0xe000e000
    fb0c:	f8c0 1180 	str.w	r1, [r0, #384]	; 0x180
    fb10:	f3bf 8f4f 	dsb	sy
    fb14:	f3bf 8f6f 	isb	sy
    fb18:	4770      	bx	lr

0000fb1a <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>:
    fb1a:	b510      	push	{r4, lr}
    fb1c:	2801      	cmp	r0, #1
    fb1e:	d006      	beq.n	fb2e <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x14>
    fb20:	2802      	cmp	r0, #2
    fb22:	d006      	beq.n	fb32 <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY+0x18>
    fb24:	f640 3141 	movw	r1, #2881	; 0xb41
    fb28:	203e      	movs	r0, #62	; 0x3e
    fb2a:	f7f4 f9c9 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb2e:	2028      	movs	r0, #40	; 0x28
    fb30:	bd10      	pop	{r4, pc}
    fb32:	2018      	movs	r0, #24
    fb34:	bd10      	pop	{r4, pc}

0000fb36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>:
    fb36:	b510      	push	{r4, lr}
    fb38:	2801      	cmp	r0, #1
    fb3a:	d006      	beq.n	fb4a <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x14>
    fb3c:	2802      	cmp	r0, #2
    fb3e:	d007      	beq.n	fb50 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY+0x1a>
    fb40:	f640 3155 	movw	r1, #2901	; 0xb55
    fb44:	203e      	movs	r0, #62	; 0x3e
    fb46:	f7f4 f9bb 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb4a:	f641 6014 	movw	r0, #7700	; 0x1e14
    fb4e:	bd10      	pop	{r4, pc}
    fb50:	f241 1030 	movw	r0, #4400	; 0x1130
    fb54:	bd10      	pop	{r4, pc}

0000fb56 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY>:
    fb56:	f7fc bbed 	b.w	c334 <sym_G3LKQQIKLUPALYXV2H43IC7H4PYU6B6QFLQBXZY+0x488>
    fb5a:	b510      	push	{r4, lr}
    fb5c:	460a      	mov	r2, r1
    fb5e:	b130      	cbz	r0, fb6e <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x18>
    fb60:	2801      	cmp	r0, #1
    fb62:	d00b      	beq.n	fb7c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x26>
    fb64:	f240 6114 	movw	r1, #1556	; 0x614
    fb68:	203e      	movs	r0, #62	; 0x3e
    fb6a:	f7f4 f9a9 	bl	3ec0 <sym_476LRB5XNUARAHCHHC7ZAIGPFC5VZ4W2N4467LI>
    fb6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb72:	f102 0128 	add.w	r1, r2, #40	; 0x28
    fb76:	4610      	mov	r0, r2
    fb78:	f7fb bbc0 	b.w	b2fc <sym_WDGETGVBCYUKUDGN6Q77INXYI367WBVME2GNBIA>
    fb7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fb80:	f102 0129 	add.w	r1, r2, #41	; 0x29
    fb84:	4610      	mov	r0, r2
    fb86:	f7fb bba3 	b.w	b2d0 <sym_VD2RNA2VIHLNDCPSVYBEMTIWUZPQSJTQESN32OQ>
    fb8a:	5840      	ldr	r0, [r0, r1]
    fb8c:	2800      	cmp	r0, #0
    fb8e:	d000      	beq.n	fb92 <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x3c>
    fb90:	2001      	movs	r0, #1
    fb92:	4770      	bx	lr
    fb94:	5840      	ldr	r0, [r0, r1]
    fb96:	2800      	cmp	r0, #0
    fb98:	d000      	beq.n	fb9c <sym_K7DVDHTWL3F7TVQBJD7AJF4MCRCM54IIDUOJLTY+0x46>
    fb9a:	2001      	movs	r0, #1
    fb9c:	4770      	bx	lr

0000fb9e <sym_55XNA7W2CQFJPCH62ZAKHLPISYHJ7KMNREEN6EA>:
    fb9e:	b570      	push	{r4, r5, r6, lr}
    fba0:	4605      	mov	r5, r0
    fba2:	4614      	mov	r4, r2
    fba4:	4608      	mov	r0, r1
    fba6:	f7ff ffc6 	bl	fb36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fbaa:	eb05 0145 	add.w	r1, r5, r5, lsl #1
    fbae:	ebc1 11c5 	rsb	r1, r1, r5, lsl #7
    fbb2:	ebc0 05c1 	rsb	r5, r0, r1, lsl #3
    fbb6:	4620      	mov	r0, r4
    fbb8:	f7ff ffbd 	bl	fb36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fbbc:	4428      	add	r0, r5
    fbbe:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fbc2:	f600 30b7 	addw	r0, r0, #2999	; 0xbb7
    fbc6:	fbb0 f5f1 	udiv	r5, r0, r1
    fbca:	4620      	mov	r0, r4
    fbcc:	f7ff ffa5 	bl	fb1a <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fbd0:	4428      	add	r0, r5
    fbd2:	1d40      	adds	r0, r0, #5
    fbd4:	bd70      	pop	{r4, r5, r6, pc}

0000fbd6 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA>:
    fbd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fbda:	4607      	mov	r7, r0
    fbdc:	461d      	mov	r5, r3
    fbde:	460e      	mov	r6, r1
    fbe0:	4614      	mov	r4, r2
    fbe2:	4610      	mov	r0, r2
    fbe4:	f7ff ffa7 	bl	fb36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fbe8:	eb07 0147 	add.w	r1, r7, r7, lsl #1
    fbec:	ebc1 11c7 	rsb	r1, r1, r7, lsl #7
    fbf0:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
    fbf4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    fbf8:	2e02      	cmp	r6, #2
    fbfa:	d00e      	beq.n	fc1a <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x44>
    fbfc:	f240 52dc 	movw	r2, #1500	; 0x5dc
    fc00:	4411      	add	r1, r2
    fc02:	f601 31b7 	addw	r1, r1, #2999	; 0xbb7
    fc06:	fbb1 f6f0 	udiv	r6, r1, r0
    fc0a:	4620      	mov	r0, r4
    fc0c:	f7ff ff85 	bl	fb1a <sym_V67AIMSO57NYVNGXZF2PDQSJQJLITHU4KD4CKAY>
    fc10:	4430      	add	r0, r6
    fc12:	4428      	add	r0, r5
    fc14:	1d40      	adds	r0, r0, #5
    fc16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fc1a:	4602      	mov	r2, r0
    fc1c:	e7f0      	b.n	fc00 <sym_7VLVVPDI26BVJ64XQBSGXOQYGQA4VH5APIPDGYA+0x2a>

0000fc1e <sym_2EA2WBXQOKCTPMK7YNDR6QM6MTGHJCDTPZEXNNA>:
    fc1e:	b510      	push	{r4, lr}
    fc20:	4604      	mov	r4, r0
    fc22:	4608      	mov	r0, r1
    fc24:	f7ff ff87 	bl	fb36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fc28:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fc2c:	f200 30e7 	addw	r0, r0, #999	; 0x3e7
    fc30:	fbb0 f0f1 	udiv	r0, r0, r1
    fc34:	1a20      	subs	r0, r4, r0
    fc36:	1e80      	subs	r0, r0, #2
    fc38:	bd10      	pop	{r4, pc}

0000fc3a <sym_KM5SKFVNZKDXUQ7BDD3RZ5UCA5E3ZDVNWYJVR3Y>:
    fc3a:	b510      	push	{r4, lr}
    fc3c:	4604      	mov	r4, r0
    fc3e:	4608      	mov	r0, r1
    fc40:	f7ff ff79 	bl	fb36 <sym_UX6VBOIQ7ULLMX3I6UDFOFZ6IT2DVZKKVIEVRMY>
    fc44:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    fc48:	fbb0 f0f1 	udiv	r0, r0, r1
    fc4c:	1a20      	subs	r0, r4, r0
    fc4e:	bd10      	pop	{r4, pc}

0000fc50 <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA>:
    fc50:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc54:	2902      	cmp	r1, #2
    fc56:	d008      	beq.n	fc6a <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0x1a>
    fc58:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fc5c:	f201 31e7 	addw	r1, r1, #999	; 0x3e7
    fc60:	fbb1 f1f2 	udiv	r1, r1, r2
    fc64:	4408      	add	r0, r1
    fc66:	1e80      	subs	r0, r0, #2
    fc68:	4770      	bx	lr
    fc6a:	4611      	mov	r1, r2
    fc6c:	e7f6      	b.n	fc5c <sym_WD6EQ3FQVKOAARDWHQJJC5SVKHQS7A2MF5YDCPA+0xc>

0000fc6e <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI>:
    fc6e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    fc72:	2902      	cmp	r1, #2
    fc74:	d007      	beq.n	fc86 <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0x18>
    fc76:	f240 51dc 	movw	r1, #1500	; 0x5dc
    fc7a:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
    fc7e:	fbb1 f1f2 	udiv	r1, r1, r2
    fc82:	4408      	add	r0, r1
    fc84:	4770      	bx	lr
    fc86:	4611      	mov	r1, r2
    fc88:	e7f7      	b.n	fc7a <sym_WGW6HZ6PNLYQSUJALICWZO27AY5UJWYCU6B6ACI+0xc>
    fc8a:	080c      	.short	0x080c
    fc8c:	010d1702 	.word	0x010d1702
    fc90:	09090201 	.word	0x09090201
    fc94:	02060101 	.word	0x02060101
    fc98:	03181809 	.word	0x03181809
    fc9c:	09090101 	.word	0x09090101
    fca0:	0303      	.short	0x0303
    fca2:	05          	.byte	0x05
    fca3:	55          	.byte	0x55
    fca4:	26255555 	.word	0x26255555
    fca8:	27          	.byte	0x27
    fca9:	01          	.byte	0x01
    fcaa:	0103      	.short	0x0103
    fcac:	01          	.byte	0x01
    fcad:	01          	.byte	0x01
	...

0000fcb0 <z_impl_clock_gettime>:
{
	uint64_t elapsed_nsecs;
	struct timespec base;
	k_spinlock_key_t key;

	switch (clock_id) {
    fcb0:	2801      	cmp	r0, #1
{
    fcb2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fcb6:	460d      	mov	r5, r1
	switch (clock_id) {
    fcb8:	d009      	beq.n	fcce <z_impl_clock_gettime+0x1e>
    fcba:	2804      	cmp	r0, #4
    fcbc:	d06d      	beq.n	fd9a <z_impl_clock_gettime+0xea>
		base = rt_clock_base;
		k_spin_unlock(&rt_clock_base_lock, key);
		break;

	default:
		errno = EINVAL;
    fcbe:	f01a fd6f 	bl	2a7a0 <__errno>
    fcc2:	2316      	movs	r3, #22
    fcc4:	6003      	str	r3, [r0, #0]
		return -1;
    fcc6:	f04f 30ff 	mov.w	r0, #4294967295
		ts->tv_sec++;
		ts->tv_nsec -= NSEC_PER_SEC;
	}

	return 0;
}
    fcca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
    fcce:	f04f 0340 	mov.w	r3, #64	; 0x40
    fcd2:	f3ef 8711 	mrs	r7, BASEPRI
    fcd6:	f383 8812 	msr	BASEPRI_MAX, r3
    fcda:	f3bf 8f6f 	isb	sy
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();

#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fcde:	4834      	ldr	r0, [pc, #208]	; (fdb0 <z_impl_clock_gettime+0x100>)
    fce0:	f014 f85a 	bl	23d98 <z_spin_lock_valid>
    fce4:	b968      	cbnz	r0, fd02 <z_impl_clock_gettime+0x52>
    fce6:	4a33      	ldr	r2, [pc, #204]	; (fdb4 <z_impl_clock_gettime+0x104>)
    fce8:	4933      	ldr	r1, [pc, #204]	; (fdb8 <z_impl_clock_gettime+0x108>)
    fcea:	4834      	ldr	r0, [pc, #208]	; (fdbc <z_impl_clock_gettime+0x10c>)
    fcec:	2381      	movs	r3, #129	; 0x81
    fcee:	f018 ff54 	bl	28b9a <printk>
    fcf2:	492f      	ldr	r1, [pc, #188]	; (fdb0 <z_impl_clock_gettime+0x100>)
    fcf4:	4832      	ldr	r0, [pc, #200]	; (fdc0 <z_impl_clock_gettime+0x110>)
    fcf6:	f018 ff50 	bl	28b9a <printk>
    fcfa:	482e      	ldr	r0, [pc, #184]	; (fdb4 <z_impl_clock_gettime+0x104>)
    fcfc:	2181      	movs	r1, #129	; 0x81
    fcfe:	f019 f98d 	bl	2901c <assert_post_action>
	while (!atomic_cas(&l->locked, 0, 1)) {
	}
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
    fd02:	482b      	ldr	r0, [pc, #172]	; (fdb0 <z_impl_clock_gettime+0x100>)
    fd04:	f014 f866 	bl	23dd4 <z_spin_lock_set_owner>
		base = rt_clock_base;
    fd08:	4b2e      	ldr	r3, [pc, #184]	; (fdc4 <z_impl_clock_gettime+0x114>)
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fd0a:	4829      	ldr	r0, [pc, #164]	; (fdb0 <z_impl_clock_gettime+0x100>)
    fd0c:	689e      	ldr	r6, [r3, #8]
    fd0e:	e9d3 4800 	ldrd	r4, r8, [r3]
    fd12:	f014 f84f 	bl	23db4 <z_spin_unlock_valid>
    fd16:	b968      	cbnz	r0, fd34 <z_impl_clock_gettime+0x84>
    fd18:	4a26      	ldr	r2, [pc, #152]	; (fdb4 <z_impl_clock_gettime+0x104>)
    fd1a:	492b      	ldr	r1, [pc, #172]	; (fdc8 <z_impl_clock_gettime+0x118>)
    fd1c:	4827      	ldr	r0, [pc, #156]	; (fdbc <z_impl_clock_gettime+0x10c>)
    fd1e:	23ac      	movs	r3, #172	; 0xac
    fd20:	f018 ff3b 	bl	28b9a <printk>
    fd24:	4922      	ldr	r1, [pc, #136]	; (fdb0 <z_impl_clock_gettime+0x100>)
    fd26:	4829      	ldr	r0, [pc, #164]	; (fdcc <z_impl_clock_gettime+0x11c>)
    fd28:	f018 ff37 	bl	28b9a <printk>
    fd2c:	4821      	ldr	r0, [pc, #132]	; (fdb4 <z_impl_clock_gettime+0x104>)
    fd2e:	21ac      	movs	r1, #172	; 0xac
    fd30:	f019 f974 	bl	2901c <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    fd34:	f387 8811 	msr	BASEPRI, r7
    fd38:	f3bf 8f6f 	isb	sy
		(void)arch_syscall_invoke1((uintptr_t)&ret64, K_SYSCALL_K_UPTIME_TICKS);
		return (int64_t)ret64;
	}
#endif
	compiler_barrier();
	return z_impl_k_uptime_ticks();
    fd3c:	f01c fe9c 	bl	2ca78 <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    fd40:	4f23      	ldr	r7, [pc, #140]	; (fdd0 <z_impl_clock_gettime+0x120>)
    fd42:	460b      	mov	r3, r1
    fd44:	fba0 0107 	umull	r0, r1, r0, r7
    fd48:	fb07 1103 	mla	r1, r7, r3, r1
    fd4c:	ea4f 39d0 	mov.w	r9, r0, lsr #15
    fd50:	ea49 4941 	orr.w	r9, r9, r1, lsl #17
    fd54:	ea4f 3ad1 	mov.w	sl, r1, lsr #15
	ts->tv_sec = (int32_t) (elapsed_nsecs / NSEC_PER_SEC);
    fd58:	a313      	add	r3, pc, #76	; (adr r3, fda8 <z_impl_clock_gettime+0xf8>)
    fd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
    fd5e:	4648      	mov	r0, r9
    fd60:	4651      	mov	r1, sl
    fd62:	f7f0 fa6d 	bl	240 <__aeabi_uldivmod>
	ts->tv_sec += base.tv_sec;
    fd66:	1904      	adds	r4, r0, r4
    fd68:	eb41 0808 	adc.w	r8, r1, r8
    fd6c:	e9c5 4800 	strd	r4, r8, [r5]
	ts->tv_nsec = (int32_t) (elapsed_nsecs % NSEC_PER_SEC);
    fd70:	a30d      	add	r3, pc, #52	; (adr r3, fda8 <z_impl_clock_gettime+0xf8>)
    fd72:	e9d3 2300 	ldrd	r2, r3, [r3]
    fd76:	4648      	mov	r0, r9
    fd78:	4651      	mov	r1, sl
    fd7a:	f7f0 fa61 	bl	240 <__aeabi_uldivmod>
	if (ts->tv_nsec >= NSEC_PER_SEC) {
    fd7e:	4b15      	ldr	r3, [pc, #84]	; (fdd4 <z_impl_clock_gettime+0x124>)
	ts->tv_nsec += base.tv_nsec;
    fd80:	4432      	add	r2, r6
	if (ts->tv_nsec >= NSEC_PER_SEC) {
    fd82:	429a      	cmp	r2, r3
	ts->tv_nsec += base.tv_nsec;
    fd84:	60aa      	str	r2, [r5, #8]
	if (ts->tv_nsec >= NSEC_PER_SEC) {
    fd86:	d906      	bls.n	fd96 <z_impl_clock_gettime+0xe6>
		ts->tv_sec++;
    fd88:	3401      	adds	r4, #1
    fd8a:	f148 0100 	adc.w	r1, r8, #0
    fd8e:	e9c5 4100 	strd	r4, r1, [r5]
		ts->tv_nsec -= NSEC_PER_SEC;
    fd92:	1bd2      	subs	r2, r2, r7
    fd94:	60aa      	str	r2, [r5, #8]
	return 0;
    fd96:	2000      	movs	r0, #0
    fd98:	e797      	b.n	fcca <z_impl_clock_gettime+0x1a>
	switch (clock_id) {
    fd9a:	2600      	movs	r6, #0
    fd9c:	4634      	mov	r4, r6
    fd9e:	46b0      	mov	r8, r6
    fda0:	e7cc      	b.n	fd3c <z_impl_clock_gettime+0x8c>
    fda2:	bf00      	nop
    fda4:	f3af 8000 	nop.w
    fda8:	3b9aca00 	.word	0x3b9aca00
    fdac:	00000000 	.word	0x00000000
    fdb0:	20002714 	.word	0x20002714
    fdb4:	0002e9fe 	.word	0x0002e9fe
    fdb8:	0002ea50 	.word	0x0002ea50
    fdbc:	0002e93e 	.word	0x0002e93e
    fdc0:	0002ea65 	.word	0x0002ea65
    fdc4:	200018f0 	.word	0x200018f0
    fdc8:	0002ea24 	.word	0x0002ea24
    fdcc:	0002ea3b 	.word	0x0002ea3b
    fdd0:	3b9aca00 	.word	0x3b9aca00
    fdd4:	3b9ac9ff 	.word	0x3b9ac9ff

0000fdd8 <clock_settime>:
int clock_settime(clockid_t clock_id, const struct timespec *tp)
{
	struct timespec base;
	k_spinlock_key_t key;

	if (clock_id != CLOCK_REALTIME) {
    fdd8:	2801      	cmp	r0, #1
{
    fdda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fddc:	460c      	mov	r4, r1
	if (clock_id != CLOCK_REALTIME) {
    fdde:	d006      	beq.n	fdee <clock_settime+0x16>
		errno = EINVAL;
    fde0:	f01a fcde 	bl	2a7a0 <__errno>
    fde4:	2316      	movs	r3, #22
    fde6:	6003      	str	r3, [r0, #0]
		return -1;
    fde8:	f04f 30ff 	mov.w	r0, #4294967295
	key = k_spin_lock(&rt_clock_base_lock);
	rt_clock_base = base;
	k_spin_unlock(&rt_clock_base_lock, key);

	return 0;
}
    fdec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    fdee:	f01c fe43 	bl	2ca78 <z_impl_k_uptime_ticks>
	int64_t delta = (int64_t)NSEC_PER_SEC * tp->tv_sec + tp->tv_nsec
    fdf2:	4d33      	ldr	r5, [pc, #204]	; (fec0 <clock_settime+0xe8>)
    fdf4:	6822      	ldr	r2, [r4, #0]
    fdf6:	460e      	mov	r6, r1
    fdf8:	6861      	ldr	r1, [r4, #4]
    fdfa:	fba2 2305 	umull	r2, r3, r2, r5
    fdfe:	fb05 3301 	mla	r3, r5, r1, r3
    fe02:	68a1      	ldr	r1, [r4, #8]
    fe04:	1852      	adds	r2, r2, r1
    fe06:	eb43 73e1 	adc.w	r3, r3, r1, asr #31
    fe0a:	fba0 0105 	umull	r0, r1, r0, r5
    fe0e:	fb05 1106 	mla	r1, r5, r6, r1
    fe12:	0bc4      	lsrs	r4, r0, #15
    fe14:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
		- elapsed_nsecs;
    fe18:	1b14      	subs	r4, r2, r4
    fe1a:	ea4f 35d1 	mov.w	r5, r1, lsr #15
    fe1e:	eb63 0505 	sbc.w	r5, r3, r5
	base.tv_sec = delta / NSEC_PER_SEC;
    fe22:	4620      	mov	r0, r4
    fe24:	a324      	add	r3, pc, #144	; (adr r3, feb8 <clock_settime+0xe0>)
    fe26:	e9d3 2300 	ldrd	r2, r3, [r3]
    fe2a:	4629      	mov	r1, r5
    fe2c:	f7f0 f9b8 	bl	1a0 <__aeabi_ldivmod>
	base.tv_nsec = delta % NSEC_PER_SEC;
    fe30:	a321      	add	r3, pc, #132	; (adr r3, feb8 <clock_settime+0xe0>)
    fe32:	e9d3 2300 	ldrd	r2, r3, [r3]
	base.tv_sec = delta / NSEC_PER_SEC;
    fe36:	4607      	mov	r7, r0
    fe38:	460e      	mov	r6, r1
	base.tv_nsec = delta % NSEC_PER_SEC;
    fe3a:	4620      	mov	r0, r4
    fe3c:	4629      	mov	r1, r5
    fe3e:	f7f0 f9af 	bl	1a0 <__aeabi_ldivmod>
    fe42:	4614      	mov	r4, r2
	__asm__ volatile(
    fe44:	f04f 0340 	mov.w	r3, #64	; 0x40
    fe48:	f3ef 8511 	mrs	r5, BASEPRI
    fe4c:	f383 8812 	msr	BASEPRI_MAX, r3
    fe50:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    fe54:	481b      	ldr	r0, [pc, #108]	; (fec4 <clock_settime+0xec>)
    fe56:	f013 ff9f 	bl	23d98 <z_spin_lock_valid>
    fe5a:	b968      	cbnz	r0, fe78 <clock_settime+0xa0>
    fe5c:	4a1a      	ldr	r2, [pc, #104]	; (fec8 <clock_settime+0xf0>)
    fe5e:	491b      	ldr	r1, [pc, #108]	; (fecc <clock_settime+0xf4>)
    fe60:	481b      	ldr	r0, [pc, #108]	; (fed0 <clock_settime+0xf8>)
    fe62:	2381      	movs	r3, #129	; 0x81
    fe64:	f018 fe99 	bl	28b9a <printk>
    fe68:	4916      	ldr	r1, [pc, #88]	; (fec4 <clock_settime+0xec>)
    fe6a:	481a      	ldr	r0, [pc, #104]	; (fed4 <clock_settime+0xfc>)
    fe6c:	f018 fe95 	bl	28b9a <printk>
    fe70:	4815      	ldr	r0, [pc, #84]	; (fec8 <clock_settime+0xf0>)
    fe72:	2181      	movs	r1, #129	; 0x81
    fe74:	f019 f8d2 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
    fe78:	4812      	ldr	r0, [pc, #72]	; (fec4 <clock_settime+0xec>)
    fe7a:	f013 ffab 	bl	23dd4 <z_spin_lock_set_owner>
	rt_clock_base = base;
    fe7e:	4b16      	ldr	r3, [pc, #88]	; (fed8 <clock_settime+0x100>)
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    fe80:	4810      	ldr	r0, [pc, #64]	; (fec4 <clock_settime+0xec>)
    fe82:	609c      	str	r4, [r3, #8]
    fe84:	e9c3 7600 	strd	r7, r6, [r3]
    fe88:	f013 ff94 	bl	23db4 <z_spin_unlock_valid>
    fe8c:	b968      	cbnz	r0, feaa <clock_settime+0xd2>
    fe8e:	4a0e      	ldr	r2, [pc, #56]	; (fec8 <clock_settime+0xf0>)
    fe90:	4912      	ldr	r1, [pc, #72]	; (fedc <clock_settime+0x104>)
    fe92:	480f      	ldr	r0, [pc, #60]	; (fed0 <clock_settime+0xf8>)
    fe94:	23ac      	movs	r3, #172	; 0xac
    fe96:	f018 fe80 	bl	28b9a <printk>
    fe9a:	490a      	ldr	r1, [pc, #40]	; (fec4 <clock_settime+0xec>)
    fe9c:	4810      	ldr	r0, [pc, #64]	; (fee0 <clock_settime+0x108>)
    fe9e:	f018 fe7c 	bl	28b9a <printk>
    fea2:	4809      	ldr	r0, [pc, #36]	; (fec8 <clock_settime+0xf0>)
    fea4:	21ac      	movs	r1, #172	; 0xac
    fea6:	f019 f8b9 	bl	2901c <assert_post_action>
	__asm__ volatile(
    feaa:	f385 8811 	msr	BASEPRI, r5
    feae:	f3bf 8f6f 	isb	sy
	return 0;
    feb2:	2000      	movs	r0, #0
    feb4:	e79a      	b.n	fdec <clock_settime+0x14>
    feb6:	bf00      	nop
    feb8:	3b9aca00 	.word	0x3b9aca00
    febc:	00000000 	.word	0x00000000
    fec0:	3b9aca00 	.word	0x3b9aca00
    fec4:	20002714 	.word	0x20002714
    fec8:	0002e9fe 	.word	0x0002e9fe
    fecc:	0002ea50 	.word	0x0002ea50
    fed0:	0002e93e 	.word	0x0002e93e
    fed4:	0002ea65 	.word	0x0002ea65
    fed8:	200018f0 	.word	0x200018f0
    fedc:	0002ea24 	.word	0x0002ea24
    fee0:	0002ea3b 	.word	0x0002ea3b

0000fee4 <scan_filter_match>:

//Callback function for a matching name
void scan_filter_match(struct bt_scan_device_info *device_info,
		       struct bt_scan_filter_match *filter_match,
		       bool connectable)
{
    fee4:	b510      	push	{r4, lr}

	//Get the rssi
	rssiVal=device_info->recv_info->rssi;

	if (active_print == 1){
    fee6:	490e      	ldr	r1, [pc, #56]	; (ff20 <scan_filter_match+0x3c>)
	rssiVal=device_info->recv_info->rssi;
    fee8:	6803      	ldr	r3, [r0, #0]
	if (active_print == 1){
    feea:	6809      	ldr	r1, [r1, #0]
	rssiVal=device_info->recv_info->rssi;
    feec:	4c0d      	ldr	r4, [pc, #52]	; (ff24 <scan_filter_match+0x40>)
    feee:	f993 3005 	ldrsb.w	r3, [r3, #5]
    fef2:	6023      	str	r3, [r4, #0]
	if (active_print == 1){
    fef4:	2901      	cmp	r1, #1
    fef6:	d105      	bne.n	ff04 <scan_filter_match+0x20>
		shell_print(main_shell,"rssi: %i",rssiVal);
    fef8:	480b      	ldr	r0, [pc, #44]	; (ff28 <scan_filter_match+0x44>)
    fefa:	4a0c      	ldr	r2, [pc, #48]	; (ff2c <scan_filter_match+0x48>)
    fefc:	6800      	ldr	r0, [r0, #0]
    fefe:	2108      	movs	r1, #8
    ff00:	f019 fe3c 	bl	29b7c <shell_fprintf>
	}

	if (rssi_number == 20){
    ff04:	4b0a      	ldr	r3, [pc, #40]	; (ff30 <scan_filter_match+0x4c>)
		rssi_number = 0;
	}
	average_rssi[rssi_number] = rssiVal;
    ff06:	490b      	ldr	r1, [pc, #44]	; (ff34 <scan_filter_match+0x50>)
	if (rssi_number == 20){
    ff08:	681a      	ldr	r2, [r3, #0]
	average_rssi[rssi_number] = rssiVal;
    ff0a:	6820      	ldr	r0, [r4, #0]
	if (rssi_number == 20){
    ff0c:	2a14      	cmp	r2, #20
		rssi_number = 0;
    ff0e:	bf04      	itt	eq
    ff10:	2200      	moveq	r2, #0
    ff12:	601a      	streq	r2, [r3, #0]
	average_rssi[rssi_number] = rssiVal;
    ff14:	681a      	ldr	r2, [r3, #0]
    ff16:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	rssi_number++;
    ff1a:	3201      	adds	r2, #1
    ff1c:	601a      	str	r2, [r3, #0]
}
    ff1e:	bd10      	pop	{r4, pc}
    ff20:	20002240 	.word	0x20002240
    ff24:	20002298 	.word	0x20002298
    ff28:	20002294 	.word	0x20002294
    ff2c:	0002e57f 	.word	0x0002e57f
    ff30:	2000229c 	.word	0x2000229c
    ff34:	20002244 	.word	0x20002244

0000ff38 <cmd_print_stop>:
	return 0;
}

static int cmd_print_stop(const struct shell *shell, size_t argc,
				    char **argv, void *data)
{
    ff38:	b510      	push	{r4, lr}
	active_print =0;
    ff3a:	4b04      	ldr	r3, [pc, #16]	; (ff4c <cmd_print_stop+0x14>)
	shell_print(shell,"Active rssi print off");
    ff3c:	4a04      	ldr	r2, [pc, #16]	; (ff50 <cmd_print_stop+0x18>)
	active_print =0;
    ff3e:	2400      	movs	r4, #0
	shell_print(shell,"Active rssi print off");
    ff40:	2108      	movs	r1, #8
	active_print =0;
    ff42:	601c      	str	r4, [r3, #0]
	shell_print(shell,"Active rssi print off");
    ff44:	f019 fe1a 	bl	29b7c <shell_fprintf>
	return 0;
}
    ff48:	4620      	mov	r0, r4
    ff4a:	bd10      	pop	{r4, pc}
    ff4c:	20002240 	.word	0x20002240
    ff50:	0002e534 	.word	0x0002e534

0000ff54 <cmd_print_start>:
{
    ff54:	b508      	push	{r3, lr}
	active_print = 1;
    ff56:	4b05      	ldr	r3, [pc, #20]	; (ff6c <cmd_print_start+0x18>)
    ff58:	2201      	movs	r2, #1
    ff5a:	601a      	str	r2, [r3, #0]
	main_shell = shell;
    ff5c:	4b04      	ldr	r3, [pc, #16]	; (ff70 <cmd_print_start+0x1c>)
	shell_print(shell,"Active rssi print on");
    ff5e:	4a05      	ldr	r2, [pc, #20]	; (ff74 <cmd_print_start+0x20>)
	main_shell = shell;
    ff60:	6018      	str	r0, [r3, #0]
	shell_print(shell,"Active rssi print on");
    ff62:	2108      	movs	r1, #8
    ff64:	f019 fe0a 	bl	29b7c <shell_fprintf>
}
    ff68:	2000      	movs	r0, #0
    ff6a:	bd08      	pop	{r3, pc}
    ff6c:	20002240 	.word	0x20002240
    ff70:	20002294 	.word	0x20002294
    ff74:	0002e54b 	.word	0x0002e54b

0000ff78 <cmd_average_rssi>:
	return 0;
}

static int cmd_average_rssi(const struct shell *shell, size_t argc,
				    char **argv)
{
    ff78:	b510      	push	{r4, lr}
	int tot = 0;
	int values = 20; 
	for (int i =0; i<20 ;i++)
    ff7a:	2300      	movs	r3, #0
    ff7c:	4c08      	ldr	r4, [pc, #32]	; (ffa0 <cmd_average_rssi+0x28>)
	int tot = 0;
    ff7e:	461a      	mov	r2, r3
	{
		if (average_rssi[i] == 0){
    ff80:	f854 1b04 	ldr.w	r1, [r4], #4
    ff84:	3301      	adds	r3, #1
    ff86:	b111      	cbz	r1, ff8e <cmd_average_rssi+0x16>
	for (int i =0; i<20 ;i++)
    ff88:	2b14      	cmp	r3, #20
			values = i+1;
			break;
		}
		tot += average_rssi[i];
    ff8a:	440a      	add	r2, r1
	for (int i =0; i<20 ;i++)
    ff8c:	d1f8      	bne.n	ff80 <cmd_average_rssi+0x8>
	}
	tot = tot/values;
	
	shell_print(shell,"average rssi value %i",tot);
    ff8e:	fb92 f3f3 	sdiv	r3, r2, r3
    ff92:	2108      	movs	r1, #8
    ff94:	4a03      	ldr	r2, [pc, #12]	; (ffa4 <cmd_average_rssi+0x2c>)
    ff96:	f019 fdf1 	bl	29b7c <shell_fprintf>
	return 0;
}
    ff9a:	2000      	movs	r0, #0
    ff9c:	bd10      	pop	{r4, pc}
    ff9e:	bf00      	nop
    ffa0:	20002244 	.word	0x20002244
    ffa4:	0002e561 	.word	0x0002e561

0000ffa8 <cmd_rssi_signal>:
{
    ffa8:	b508      	push	{r3, lr}
	shell_print(shell,"Latest rssi: %i",rssiVal);
    ffaa:	4b04      	ldr	r3, [pc, #16]	; (ffbc <cmd_rssi_signal+0x14>)
    ffac:	4a04      	ldr	r2, [pc, #16]	; (ffc0 <cmd_rssi_signal+0x18>)
    ffae:	681b      	ldr	r3, [r3, #0]
    ffb0:	2108      	movs	r1, #8
    ffb2:	f019 fde3 	bl	29b7c <shell_fprintf>
}
    ffb6:	2000      	movs	r0, #0
    ffb8:	bd08      	pop	{r3, pc}
    ffba:	bf00      	nop
    ffbc:	20002298 	.word	0x20002298
    ffc0:	0002e578 	.word	0x0002e578

0000ffc4 <scan_connecting_error>:
	printk("Connection to peer failed!\n");
    ffc4:	4801      	ldr	r0, [pc, #4]	; (ffcc <scan_connecting_error+0x8>)
    ffc6:	f018 bde8 	b.w	28b9a <printk>
    ffca:	bf00      	nop
    ffcc:	0002e589 	.word	0x0002e589

0000ffd0 <ble_ready>:
	printk("Bluetooth ready\n");
    ffd0:	4801      	ldr	r0, [pc, #4]	; (ffd8 <ble_ready+0x8>)
    ffd2:	f018 bde2 	b.w	28b9a <printk>
    ffd6:	bf00      	nop
    ffd8:	0002e5a5 	.word	0x0002e5a5

0000ffdc <cmd_change_name>:
	return 0;
}

static int cmd_change_name(const struct shell *shell, size_t argc,
				    char **argv)
{
    ffdc:	b538      	push	{r3, r4, r5, lr}
    ffde:	4615      	mov	r5, r2
    ffe0:	4604      	mov	r4, r0
	bt_scan_filter_remove_all();
    ffe2:	f005 fd1f 	bl	15a24 <bt_scan_filter_remove_all>
	int err;

	// Add the target name to the filter
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, argv[1]);
    ffe6:	6869      	ldr	r1, [r5, #4]
    ffe8:	2000      	movs	r0, #0
    ffea:	f005 fccd 	bl	15988 <bt_scan_filter_add>
	if (err) {
    ffee:	b120      	cbz	r0, fffa <cmd_change_name+0x1e>
		shell_print(shell,"Scanning filters cannot be set\n");
    fff0:	4a06      	ldr	r2, [pc, #24]	; (1000c <cmd_change_name+0x30>)
    fff2:	2108      	movs	r1, #8
    fff4:	4620      	mov	r0, r4
    fff6:	f019 fdc1 	bl	29b7c <shell_fprintf>
	}

	shell_print(shell,"The name was set to: %s",argv[1]);
    fffa:	4620      	mov	r0, r4
    fffc:	686b      	ldr	r3, [r5, #4]
    fffe:	4a04      	ldr	r2, [pc, #16]	; (10010 <cmd_change_name+0x34>)
   10000:	2108      	movs	r1, #8
   10002:	f019 fdbb 	bl	29b7c <shell_fprintf>

	return 0;
}
   10006:	2000      	movs	r0, #0
   10008:	bd38      	pop	{r3, r4, r5, pc}
   1000a:	bf00      	nop
   1000c:	0002e5b6 	.word	0x0002e5b6
   10010:	0002e5d7 	.word	0x0002e5d7

00010014 <cmd_stop_scan>:
{
   10014:	b508      	push	{r3, lr}
	err = bt_scan_stop();
   10016:	f01a f9da 	bl	2a3ce <bt_scan_stop>
	if (err == -EALREADY) {
   1001a:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_scan_stop();
   1001e:	4601      	mov	r1, r0
	if (err == -EALREADY) {
   10020:	d107      	bne.n	10032 <cmd_stop_scan+0x1e>
		printk("Scanning is not on \n");
   10022:	4807      	ldr	r0, [pc, #28]	; (10040 <cmd_stop_scan+0x2c>)
   10024:	f018 fdb9 	bl	28b9a <printk>
	printk("Scanning has stopped \n");
   10028:	4806      	ldr	r0, [pc, #24]	; (10044 <cmd_stop_scan+0x30>)
   1002a:	f018 fdb6 	bl	28b9a <printk>
}
   1002e:	2000      	movs	r0, #0
   10030:	bd08      	pop	{r3, pc}
	else if (err){
   10032:	2800      	cmp	r0, #0
   10034:	d0f8      	beq.n	10028 <cmd_stop_scan+0x14>
		printk("Scanning failed to stop, err %d\n", err);
   10036:	4804      	ldr	r0, [pc, #16]	; (10048 <cmd_stop_scan+0x34>)
   10038:	f018 fdaf 	bl	28b9a <printk>
   1003c:	e7f4      	b.n	10028 <cmd_stop_scan+0x14>
   1003e:	bf00      	nop
   10040:	0002e5f0 	.word	0x0002e5f0
   10044:	0002e626 	.word	0x0002e626
   10048:	0002e605 	.word	0x0002e605

0001004c <cmd_active_start>:
{
   1004c:	b510      	push	{r4, lr}
   1004e:	4604      	mov	r4, r0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   10050:	2001      	movs	r0, #1
   10052:	f005 fe2d 	bl	15cb0 <bt_scan_start>
			if (err == -EALREADY)
   10056:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_ACTIVE);
   1005a:	4603      	mov	r3, r0
			if (err == -EALREADY)
   1005c:	d10b      	bne.n	10076 <cmd_active_start+0x2a>
				shell_print(shell,"Scanning already enable \n");
   1005e:	4a0a      	ldr	r2, [pc, #40]	; (10088 <cmd_active_start+0x3c>)
   10060:	2108      	movs	r1, #8
   10062:	4620      	mov	r0, r4
   10064:	f019 fd8a 	bl	29b7c <shell_fprintf>
	shell_print(shell,"Active scanning on");
   10068:	4620      	mov	r0, r4
   1006a:	4a08      	ldr	r2, [pc, #32]	; (1008c <cmd_active_start+0x40>)
   1006c:	2108      	movs	r1, #8
   1006e:	f019 fd85 	bl	29b7c <shell_fprintf>
}
   10072:	2000      	movs	r0, #0
   10074:	bd10      	pop	{r4, pc}
			else if (err) {
   10076:	2800      	cmp	r0, #0
   10078:	d0f6      	beq.n	10068 <cmd_active_start+0x1c>
				shell_print(shell,"Scanning failed to start, err %d\n", err);
   1007a:	4a05      	ldr	r2, [pc, #20]	; (10090 <cmd_active_start+0x44>)
   1007c:	2108      	movs	r1, #8
   1007e:	4620      	mov	r0, r4
   10080:	f019 fd7c 	bl	29b7c <shell_fprintf>
   10084:	e7f0      	b.n	10068 <cmd_active_start+0x1c>
   10086:	bf00      	nop
   10088:	0002e63d 	.word	0x0002e63d
   1008c:	0002e67b 	.word	0x0002e67b
   10090:	0002e658 	.word	0x0002e658

00010094 <cmd_passive_start>:
{
   10094:	b510      	push	{r4, lr}
   10096:	4604      	mov	r4, r0
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_PASSIVE);
   10098:	2000      	movs	r0, #0
   1009a:	f005 fe09 	bl	15cb0 <bt_scan_start>
			if (err == -EALREADY)
   1009e:	f110 0f78 	cmn.w	r0, #120	; 0x78
	err = bt_scan_start(BT_SCAN_TYPE_SCAN_PASSIVE);
   100a2:	4603      	mov	r3, r0
			if (err == -EALREADY)
   100a4:	d10b      	bne.n	100be <cmd_passive_start+0x2a>
				shell_print(shell,"Scanning already enable \n");
   100a6:	4a0a      	ldr	r2, [pc, #40]	; (100d0 <cmd_passive_start+0x3c>)
   100a8:	2108      	movs	r1, #8
   100aa:	4620      	mov	r0, r4
   100ac:	f019 fd66 	bl	29b7c <shell_fprintf>
	shell_print(shell,"Passive scanning on");
   100b0:	4620      	mov	r0, r4
   100b2:	4a08      	ldr	r2, [pc, #32]	; (100d4 <cmd_passive_start+0x40>)
   100b4:	2108      	movs	r1, #8
   100b6:	f019 fd61 	bl	29b7c <shell_fprintf>
}
   100ba:	2000      	movs	r0, #0
   100bc:	bd10      	pop	{r4, pc}
			else if (err) {
   100be:	2800      	cmp	r0, #0
   100c0:	d0f6      	beq.n	100b0 <cmd_passive_start+0x1c>
				shell_print(shell,"Scanning failed to start, err %d\n", err);
   100c2:	4a05      	ldr	r2, [pc, #20]	; (100d8 <cmd_passive_start+0x44>)
   100c4:	2108      	movs	r1, #8
   100c6:	4620      	mov	r0, r4
   100c8:	f019 fd58 	bl	29b7c <shell_fprintf>
   100cc:	e7f0      	b.n	100b0 <cmd_passive_start+0x1c>
   100ce:	bf00      	nop
   100d0:	0002e63d 	.word	0x0002e63d
   100d4:	0002e68f 	.word	0x0002e68f
   100d8:	0002e658 	.word	0x0002e658

000100dc <cmd_enable_scan>:
{
   100dc:	b570      	push	{r4, r5, r6, lr}
   100de:	b08a      	sub	sp, #40	; 0x28
	struct bt_le_scan_param scan_param = {
   100e0:	ab05      	add	r3, sp, #20
   100e2:	2214      	movs	r2, #20
   100e4:	2100      	movs	r1, #0
{
   100e6:	4604      	mov	r4, r0
	struct bt_le_scan_param scan_param = {
   100e8:	4618      	mov	r0, r3
   100ea:	f01c fdac 	bl	2cc46 <memset>
   100ee:	2501      	movs	r5, #1
   100f0:	f04f 1210 	mov.w	r2, #1048592	; 0x100010
   100f4:	e9cd 5206 	strd	r5, r2, [sp, #24]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
   100f8:	4a14      	ldr	r2, [pc, #80]	; (1014c <cmd_enable_scan+0x70>)
	struct bt_scan_init_param scan_init = {
   100fa:	9002      	str	r0, [sp, #8]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
   100fc:	6851      	ldr	r1, [r2, #4]
   100fe:	6810      	ldr	r0, [r2, #0]
	struct bt_scan_init_param scan_init = {
   10100:	f8cd d010 	str.w	sp, [sp, #16]
		.conn_param = BT_LE_CONN_PARAM_DEFAULT,
   10104:	466b      	mov	r3, sp
   10106:	c303      	stmia	r3!, {r0, r1}
	struct bt_scan_init_param scan_init = {
   10108:	2600      	movs	r6, #0
	bt_scan_init(&scan_init);
   1010a:	4618      	mov	r0, r3
	struct bt_scan_init_param scan_init = {
   1010c:	f88d 600c 	strb.w	r6, [sp, #12]
	bt_scan_init(&scan_init);
   10110:	f005 fd94 	bl	15c3c <bt_scan_init>
	bt_scan_cb_register(&scan_cb);
   10114:	480e      	ldr	r0, [pc, #56]	; (10150 <cmd_enable_scan+0x74>)
   10116:	f005 fc27 	bl	15968 <bt_scan_cb_register>
	err = bt_scan_filter_add(BT_SCAN_FILTER_TYPE_NAME, target);
   1011a:	4b0e      	ldr	r3, [pc, #56]	; (10154 <cmd_enable_scan+0x78>)
   1011c:	4630      	mov	r0, r6
   1011e:	6819      	ldr	r1, [r3, #0]
   10120:	f005 fc32 	bl	15988 <bt_scan_filter_add>
	if (err) {
   10124:	4601      	mov	r1, r0
   10126:	b150      	cbz	r0, 1013e <cmd_enable_scan+0x62>
		printk("Scanning filters cannot be set\n");
   10128:	480b      	ldr	r0, [pc, #44]	; (10158 <cmd_enable_scan+0x7c>)
		printk("Filters cannot be turned on\n");
   1012a:	f018 fd36 	bl	28b9a <printk>
	shell_print(shell,"Scanning module enable \n");
   1012e:	4620      	mov	r0, r4
   10130:	4a0a      	ldr	r2, [pc, #40]	; (1015c <cmd_enable_scan+0x80>)
   10132:	2108      	movs	r1, #8
   10134:	f019 fd22 	bl	29b7c <shell_fprintf>
}
   10138:	2000      	movs	r0, #0
   1013a:	b00a      	add	sp, #40	; 0x28
   1013c:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_scan_filter_enable(BT_SCAN_NAME_FILTER, false);
   1013e:	4628      	mov	r0, r5
   10140:	f005 fca2 	bl	15a88 <bt_scan_filter_enable>
	if (err) {
   10144:	2800      	cmp	r0, #0
   10146:	d0f2      	beq.n	1012e <cmd_enable_scan+0x52>
		printk("Filters cannot be turned on\n");
   10148:	4805      	ldr	r0, [pc, #20]	; (10160 <cmd_enable_scan+0x84>)
   1014a:	e7ee      	b.n	1012a <cmd_enable_scan+0x4e>
   1014c:	0002d3fc 	.word	0x0002d3fc
   10150:	20000418 	.word	0x20000418
   10154:	20000420 	.word	0x20000420
   10158:	0002e6a4 	.word	0x0002e6a4
   1015c:	0002e6e1 	.word	0x0002e6e1
   10160:	0002e6c4 	.word	0x0002e6c4

00010164 <main>:

SHELL_CMD_REGISTER(bt_scan, &bt_scan, "Enable options for passive and active scanning", NULL);

//Main
void main(void)
{
   10164:	b508      	push	{r3, lr}
	int err;

	//Initializing Bluetooth
	err = bt_enable(ble_ready);
   10166:	4806      	ldr	r0, [pc, #24]	; (10180 <main+0x1c>)
   10168:	f008 fbe8 	bl	1893c <bt_enable>
		if (err) {
   1016c:	b110      	cbz	r0, 10174 <main+0x10>
			printk("Cold not enable Bluetooth\n");
   1016e:	4805      	ldr	r0, [pc, #20]	; (10184 <main+0x20>)
   10170:	f018 fd13 	bl	28b9a <printk>
		uart_line_ctrl_get(dev, UART_LINE_CTRL_DTR, &dtr);
		k_sleep(K_MSEC(100));
	}
	#endif

}
   10174:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("Bluetooth initialized\n");
   10178:	4803      	ldr	r0, [pc, #12]	; (10188 <main+0x24>)
   1017a:	f018 bd0e 	b.w	28b9a <printk>
   1017e:	bf00      	nop
   10180:	0000ffd1 	.word	0x0000ffd1
   10184:	0002e6fb 	.word	0x0002e6fb
   10188:	0002e716 	.word	0x0002e716

0001018c <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   1018c:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
   1018e:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   10192:	2b02      	cmp	r3, #2
{
   10194:	b570      	push	{r4, r5, r6, lr}
   10196:	4604      	mov	r4, r0
   10198:	460e      	mov	r6, r1
	notify->result = res;
   1019a:	6081      	str	r1, [r0, #8]
	switch (method) {
   1019c:	d010      	beq.n	101c0 <sys_notify_finalize+0x34>
   1019e:	2b03      	cmp	r3, #3
   101a0:	d004      	beq.n	101ac <sys_notify_finalize+0x20>
   101a2:	2b01      	cmp	r3, #1
   101a4:	d10f      	bne.n	101c6 <sys_notify_finalize+0x3a>
   101a6:	2500      	movs	r5, #0
   101a8:	4628      	mov	r0, r5
   101aa:	e001      	b.n	101b0 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   101ac:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
   101ae:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   101b0:	2300      	movs	r3, #0
   101b2:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   101b4:	b110      	cbz	r0, 101bc <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
   101b6:	4631      	mov	r1, r6
   101b8:	f017 fecc 	bl	27f54 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   101bc:	4628      	mov	r0, r5
   101be:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
   101c0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
   101c2:	2500      	movs	r5, #0
		break;
   101c4:	e7f4      	b.n	101b0 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
   101c6:	4a06      	ldr	r2, [pc, #24]	; (101e0 <sys_notify_finalize+0x54>)
   101c8:	4906      	ldr	r1, [pc, #24]	; (101e4 <sys_notify_finalize+0x58>)
   101ca:	4807      	ldr	r0, [pc, #28]	; (101e8 <sys_notify_finalize+0x5c>)
   101cc:	2345      	movs	r3, #69	; 0x45
   101ce:	f018 fce4 	bl	28b9a <printk>
   101d2:	4803      	ldr	r0, [pc, #12]	; (101e0 <sys_notify_finalize+0x54>)
   101d4:	2145      	movs	r1, #69	; 0x45
   101d6:	f018 ff21 	bl	2901c <assert_post_action>
	sys_notify_generic_callback rv = NULL;
   101da:	2500      	movs	r5, #0
   101dc:	e7e7      	b.n	101ae <sys_notify_finalize+0x22>
   101de:	bf00      	nop
   101e0:	0002e91b 	.word	0x0002e91b
   101e4:	00034515 	.word	0x00034515
   101e8:	0002e93e 	.word	0x0002e93e

000101ec <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
   101ec:	680b      	ldr	r3, [r1, #0]
   101ee:	3301      	adds	r3, #1
   101f0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
   101f2:	4b01      	ldr	r3, [pc, #4]	; (101f8 <char_out+0xc>)
   101f4:	681b      	ldr	r3, [r3, #0]
   101f6:	4718      	bx	r3
   101f8:	20000424 	.word	0x20000424

000101fc <__printk_hook_install>:
	_char_out = fn;
   101fc:	4b01      	ldr	r3, [pc, #4]	; (10204 <__printk_hook_install+0x8>)
   101fe:	6018      	str	r0, [r3, #0]
}
   10200:	4770      	bx	lr
   10202:	bf00      	nop
   10204:	20000424 	.word	0x20000424

00010208 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
   10208:	b507      	push	{r0, r1, r2, lr}
   1020a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
   1020c:	2100      	movs	r1, #0
{
   1020e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
   10210:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
   10212:	4803      	ldr	r0, [pc, #12]	; (10220 <vprintk+0x18>)
   10214:	a901      	add	r1, sp, #4
   10216:	f000 fd2b 	bl	10c70 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
   1021a:	b003      	add	sp, #12
   1021c:	f85d fb04 	ldr.w	pc, [sp], #4
   10220:	000101ed 	.word	0x000101ed

00010224 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
   10224:	b530      	push	{r4, r5, lr}
   10226:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
   10228:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
   1022c:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
   1022e:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
   10230:	a901      	add	r1, sp, #4
   10232:	4805      	ldr	r0, [pc, #20]	; (10248 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
   10234:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
   10236:	f000 fd1b 	bl	10c70 <cbvprintf>

	if (ctx.count < ctx.max) {
   1023a:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
   1023e:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
   10240:	bfb8      	it	lt
   10242:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
   10244:	b005      	add	sp, #20
   10246:	bd30      	pop	{r4, r5, pc}
   10248:	00028b75 	.word	0x00028b75

0001024c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
   1024c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   10250:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
   10254:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
   10256:	f019 0f08 	tst.w	r9, #8
{
   1025a:	4604      	mov	r4, r0
   1025c:	9203      	str	r2, [sp, #12]
	if (processing) {
   1025e:	d022      	beq.n	102a6 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
   10260:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
   10262:	bf0c      	ite	eq
   10264:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
   10268:	f049 0920 	orrne.w	r9, r9, #32
   1026c:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
   10270:	3414      	adds	r4, #20
   10272:	4620      	mov	r0, r4
   10274:	f013 fd9e 	bl	23db4 <z_spin_unlock_valid>
   10278:	b968      	cbnz	r0, 10296 <process_event+0x4a>
   1027a:	4a9f      	ldr	r2, [pc, #636]	; (104f8 <process_event+0x2ac>)
   1027c:	499f      	ldr	r1, [pc, #636]	; (104fc <process_event+0x2b0>)
   1027e:	48a0      	ldr	r0, [pc, #640]	; (10500 <process_event+0x2b4>)
   10280:	23ac      	movs	r3, #172	; 0xac
   10282:	f018 fc8a 	bl	28b9a <printk>
   10286:	489f      	ldr	r0, [pc, #636]	; (10504 <process_event+0x2b8>)
   10288:	4621      	mov	r1, r4
   1028a:	f018 fc86 	bl	28b9a <printk>
   1028e:	489a      	ldr	r0, [pc, #616]	; (104f8 <process_event+0x2ac>)
   10290:	21ac      	movs	r1, #172	; 0xac
   10292:	f018 fec3 	bl	2901c <assert_post_action>
   10296:	9b03      	ldr	r3, [sp, #12]
   10298:	f383 8811 	msr	BASEPRI, r3
   1029c:	f3bf 8f6f 	isb	sy
}
   102a0:	b005      	add	sp, #20
   102a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
   102a6:	4f98      	ldr	r7, [pc, #608]	; (10508 <process_event+0x2bc>)
   102a8:	f8df 8254 	ldr.w	r8, [pc, #596]	; 10500 <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   102ac:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
   102b0:	2902      	cmp	r1, #2
   102b2:	d106      	bne.n	102c2 <process_event+0x76>
			evt = process_recheck(mgr);
   102b4:	4620      	mov	r0, r4
   102b6:	f018 fc8a 	bl	28bce <process_recheck>
		if (evt == EVT_NOP) {
   102ba:	2800      	cmp	r0, #0
   102bc:	d0d8      	beq.n	10270 <process_event+0x24>
		if (evt == EVT_COMPLETE) {
   102be:	2801      	cmp	r0, #1
   102c0:	d168      	bne.n	10394 <process_event+0x148>
			res = mgr->last_res;
   102c2:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   102c6:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
   102c8:	f1bb 0f00 	cmp.w	fp, #0
   102cc:	da0a      	bge.n	102e4 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
   102ce:	2600      	movs	r6, #0
		*clients = mgr->clients;
   102d0:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   102d2:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
   102d6:	e9c4 6600 	strd	r6, r6, [r4]
   102da:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
   102de:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   102e0:	9601      	str	r6, [sp, #4]
   102e2:	e027      	b.n	10334 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   102e4:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
   102e8:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
   102ea:	2901      	cmp	r1, #1
   102ec:	d834      	bhi.n	10358 <process_event+0x10c>
	list->head = NULL;
   102ee:	2100      	movs	r1, #0
   102f0:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
   102f4:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
   102f6:	6825      	ldr	r5, [r4, #0]
   102f8:	b29b      	uxth	r3, r3
	list->tail = NULL;
   102fa:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
   102fe:	d10c      	bne.n	1031a <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
   10300:	428d      	cmp	r5, r1
   10302:	462a      	mov	r2, r5
   10304:	bf38      	it	cc
   10306:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10308:	b12a      	cbz	r2, 10316 <process_event+0xca>
				mgr->refs += 1U;
   1030a:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1030c:	6812      	ldr	r2, [r2, #0]
   1030e:	3101      	adds	r1, #1
   10310:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
   10312:	2a00      	cmp	r2, #0
   10314:	d1f8      	bne.n	10308 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10316:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
   1031a:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   1031c:	4620      	mov	r0, r4
   1031e:	f018 fc56 	bl	28bce <process_recheck>
   10322:	4606      	mov	r6, r0
   10324:	2800      	cmp	r0, #0
   10326:	d0db      	beq.n	102e0 <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   10328:	8ba3      	ldrh	r3, [r4, #28]
   1032a:	f043 0320 	orr.w	r3, r3, #32
   1032e:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
   10330:	2300      	movs	r3, #0
   10332:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   10334:	8ba3      	ldrh	r3, [r4, #28]
   10336:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
   1033a:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
   1033c:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
   1033e:	d003      	beq.n	10348 <process_event+0xfc>
		if (do_monitors
   10340:	68a2      	ldr	r2, [r4, #8]
   10342:	2a00      	cmp	r2, #0
   10344:	f040 80f0 	bne.w	10528 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
   10348:	b91d      	cbnz	r5, 10352 <process_event+0x106>
		    || (transit != NULL)) {
   1034a:	9a01      	ldr	r2, [sp, #4]
   1034c:	2a00      	cmp	r2, #0
   1034e:	f000 8136 	beq.w	105be <process_event+0x372>
   10352:	f04f 0900 	mov.w	r9, #0
   10356:	e0e9      	b.n	1052c <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
   10358:	2a04      	cmp	r2, #4
   1035a:	d10e      	bne.n	1037a <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   1035c:	f023 0307 	bic.w	r3, r3, #7
   10360:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
   10362:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
   10364:	4620      	mov	r0, r4
   10366:	f018 fc32 	bl	28bce <process_recheck>
   1036a:	4605      	mov	r5, r0
   1036c:	b118      	cbz	r0, 10376 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
   1036e:	f042 0220 	orr.w	r2, r2, #32
   10372:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
   10374:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
   10376:	9501      	str	r5, [sp, #4]
   10378:	e7dc      	b.n	10334 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
   1037a:	4640      	mov	r0, r8
   1037c:	4963      	ldr	r1, [pc, #396]	; (1050c <process_event+0x2c0>)
   1037e:	f240 131b 	movw	r3, #283	; 0x11b
   10382:	463a      	mov	r2, r7
   10384:	f018 fc09 	bl	28b9a <printk>
   10388:	f240 111b 	movw	r1, #283	; 0x11b
   1038c:	4638      	mov	r0, r7
   1038e:	f018 fe45 	bl	2901c <assert_post_action>
   10392:	e7ef      	b.n	10374 <process_event+0x128>
		} else if (evt == EVT_START) {
   10394:	2803      	cmp	r0, #3
   10396:	d135      	bne.n	10404 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
   10398:	f1b9 0f00 	cmp.w	r9, #0
   1039c:	d00b      	beq.n	103b6 <process_event+0x16a>
   1039e:	495c      	ldr	r1, [pc, #368]	; (10510 <process_event+0x2c4>)
   103a0:	4640      	mov	r0, r8
   103a2:	f44f 73ab 	mov.w	r3, #342	; 0x156
   103a6:	463a      	mov	r2, r7
   103a8:	f018 fbf7 	bl	28b9a <printk>
   103ac:	f44f 71ab 	mov.w	r1, #342	; 0x156
   103b0:	4638      	mov	r0, r7
   103b2:	f018 fe33 	bl	2901c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   103b6:	6823      	ldr	r3, [r4, #0]
   103b8:	b95b      	cbnz	r3, 103d2 <process_event+0x186>
   103ba:	4956      	ldr	r1, [pc, #344]	; (10514 <process_event+0x2c8>)
   103bc:	4640      	mov	r0, r8
   103be:	f240 1357 	movw	r3, #343	; 0x157
   103c2:	463a      	mov	r2, r7
   103c4:	f018 fbe9 	bl	28b9a <printk>
   103c8:	f240 1157 	movw	r1, #343	; 0x157
   103cc:	4638      	mov	r0, r7
   103ce:	f018 fe25 	bl	2901c <assert_post_action>
			transit = mgr->transitions->start;
   103d2:	6923      	ldr	r3, [r4, #16]
   103d4:	681b      	ldr	r3, [r3, #0]
   103d6:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   103d8:	b95b      	cbnz	r3, 103f2 <process_event+0x1a6>
   103da:	494f      	ldr	r1, [pc, #316]	; (10518 <process_event+0x2cc>)
   103dc:	4640      	mov	r0, r8
   103de:	f44f 73ad 	mov.w	r3, #346	; 0x15a
   103e2:	463a      	mov	r2, r7
   103e4:	f018 fbd9 	bl	28b9a <printk>
   103e8:	f44f 71ad 	mov.w	r1, #346	; 0x15a
   103ec:	4638      	mov	r0, r7
   103ee:	f018 fe15 	bl	2901c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   103f2:	8ba3      	ldrh	r3, [r4, #28]
   103f4:	f023 0307 	bic.w	r3, r3, #7
   103f8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
   103fc:	83a3      	strh	r3, [r4, #28]
}
   103fe:	2500      	movs	r5, #0
		res = 0;
   10400:	46ab      	mov	fp, r5
}
   10402:	e797      	b.n	10334 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
   10404:	2804      	cmp	r0, #4
   10406:	d132      	bne.n	1046e <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
   10408:	f1b9 0f02 	cmp.w	r9, #2
   1040c:	d00b      	beq.n	10426 <process_event+0x1da>
   1040e:	4943      	ldr	r1, [pc, #268]	; (1051c <process_event+0x2d0>)
   10410:	4640      	mov	r0, r8
   10412:	f240 135d 	movw	r3, #349	; 0x15d
   10416:	463a      	mov	r2, r7
   10418:	f018 fbbf 	bl	28b9a <printk>
   1041c:	f240 115d 	movw	r1, #349	; 0x15d
   10420:	4638      	mov	r0, r7
   10422:	f018 fdfb 	bl	2901c <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
   10426:	8be3      	ldrh	r3, [r4, #30]
   10428:	b15b      	cbz	r3, 10442 <process_event+0x1f6>
   1042a:	493d      	ldr	r1, [pc, #244]	; (10520 <process_event+0x2d4>)
   1042c:	4640      	mov	r0, r8
   1042e:	f44f 73af 	mov.w	r3, #350	; 0x15e
   10432:	463a      	mov	r2, r7
   10434:	f018 fbb1 	bl	28b9a <printk>
   10438:	f44f 71af 	mov.w	r1, #350	; 0x15e
   1043c:	4638      	mov	r0, r7
   1043e:	f018 fded 	bl	2901c <assert_post_action>
			transit = mgr->transitions->stop;
   10442:	6923      	ldr	r3, [r4, #16]
   10444:	685b      	ldr	r3, [r3, #4]
   10446:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   10448:	b95b      	cbnz	r3, 10462 <process_event+0x216>
   1044a:	4933      	ldr	r1, [pc, #204]	; (10518 <process_event+0x2cc>)
   1044c:	4640      	mov	r0, r8
   1044e:	f240 1361 	movw	r3, #353	; 0x161
   10452:	463a      	mov	r2, r7
   10454:	f018 fba1 	bl	28b9a <printk>
   10458:	f240 1161 	movw	r1, #353	; 0x161
   1045c:	4638      	mov	r0, r7
   1045e:	f018 fddd 	bl	2901c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   10462:	8ba3      	ldrh	r3, [r4, #28]
   10464:	f023 0307 	bic.w	r3, r3, #7
   10468:	f043 0304 	orr.w	r3, r3, #4
   1046c:	e7c6      	b.n	103fc <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
   1046e:	2805      	cmp	r0, #5
   10470:	d132      	bne.n	104d8 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   10472:	f1b9 0f01 	cmp.w	r9, #1
   10476:	d00b      	beq.n	10490 <process_event+0x244>
   10478:	492a      	ldr	r1, [pc, #168]	; (10524 <process_event+0x2d8>)
   1047a:	4640      	mov	r0, r8
   1047c:	f44f 73b2 	mov.w	r3, #356	; 0x164
   10480:	463a      	mov	r2, r7
   10482:	f018 fb8a 	bl	28b9a <printk>
   10486:	f44f 71b2 	mov.w	r1, #356	; 0x164
   1048a:	4638      	mov	r0, r7
   1048c:	f018 fdc6 	bl	2901c <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
   10490:	6823      	ldr	r3, [r4, #0]
   10492:	b95b      	cbnz	r3, 104ac <process_event+0x260>
   10494:	491f      	ldr	r1, [pc, #124]	; (10514 <process_event+0x2c8>)
   10496:	4640      	mov	r0, r8
   10498:	f240 1365 	movw	r3, #357	; 0x165
   1049c:	463a      	mov	r2, r7
   1049e:	f018 fb7c 	bl	28b9a <printk>
   104a2:	f240 1165 	movw	r1, #357	; 0x165
   104a6:	4638      	mov	r0, r7
   104a8:	f018 fdb8 	bl	2901c <assert_post_action>
			transit = mgr->transitions->reset;
   104ac:	6923      	ldr	r3, [r4, #16]
   104ae:	689b      	ldr	r3, [r3, #8]
   104b0:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
   104b2:	b95b      	cbnz	r3, 104cc <process_event+0x280>
   104b4:	4918      	ldr	r1, [pc, #96]	; (10518 <process_event+0x2cc>)
   104b6:	4640      	mov	r0, r8
   104b8:	f44f 73b4 	mov.w	r3, #360	; 0x168
   104bc:	463a      	mov	r2, r7
   104be:	f018 fb6c 	bl	28b9a <printk>
   104c2:	f44f 71b4 	mov.w	r1, #360	; 0x168
   104c6:	4638      	mov	r0, r7
   104c8:	f018 fda8 	bl	2901c <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
   104cc:	8ba3      	ldrh	r3, [r4, #28]
   104ce:	f023 0307 	bic.w	r3, r3, #7
   104d2:	f043 0305 	orr.w	r3, r3, #5
   104d6:	e791      	b.n	103fc <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
   104d8:	490c      	ldr	r1, [pc, #48]	; (1050c <process_event+0x2c0>)
   104da:	f240 136b 	movw	r3, #363	; 0x16b
   104de:	463a      	mov	r2, r7
   104e0:	4640      	mov	r0, r8
   104e2:	f018 fb5a 	bl	28b9a <printk>
   104e6:	2500      	movs	r5, #0
   104e8:	f240 116b 	movw	r1, #363	; 0x16b
   104ec:	4638      	mov	r0, r7
   104ee:	f018 fd95 	bl	2901c <assert_post_action>
		onoff_transition_fn transit = NULL;
   104f2:	9501      	str	r5, [sp, #4]
   104f4:	e784      	b.n	10400 <process_event+0x1b4>
   104f6:	bf00      	nop
   104f8:	0002e9fe 	.word	0x0002e9fe
   104fc:	0002ea24 	.word	0x0002ea24
   10500:	0002e93e 	.word	0x0002e93e
   10504:	0002ea3b 	.word	0x0002ea3b
   10508:	0002e95b 	.word	0x0002e95b
   1050c:	00034515 	.word	0x00034515
   10510:	0002e97d 	.word	0x0002e97d
   10514:	0002e989 	.word	0x0002e989
   10518:	0002e9ac 	.word	0x0002e9ac
   1051c:	0002e9c3 	.word	0x0002e9c3
   10520:	0002e9d9 	.word	0x0002e9d9
   10524:	0002e9e8 	.word	0x0002e9e8
				   && !sys_slist_is_empty(&mgr->monitors);
   10528:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
   1052c:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
   10530:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
   10534:	83a3      	strh	r3, [r4, #28]
   10536:	4650      	mov	r0, sl
   10538:	f013 fc3c 	bl	23db4 <z_spin_unlock_valid>
   1053c:	b968      	cbnz	r0, 1055a <process_event+0x30e>
   1053e:	4a3a      	ldr	r2, [pc, #232]	; (10628 <process_event+0x3dc>)
   10540:	493a      	ldr	r1, [pc, #232]	; (1062c <process_event+0x3e0>)
   10542:	23ac      	movs	r3, #172	; 0xac
   10544:	4640      	mov	r0, r8
   10546:	f018 fb28 	bl	28b9a <printk>
   1054a:	4839      	ldr	r0, [pc, #228]	; (10630 <process_event+0x3e4>)
   1054c:	4651      	mov	r1, sl
   1054e:	f018 fb24 	bl	28b9a <printk>
   10552:	4835      	ldr	r0, [pc, #212]	; (10628 <process_event+0x3dc>)
   10554:	21ac      	movs	r1, #172	; 0xac
   10556:	f018 fd61 	bl	2901c <assert_post_action>
   1055a:	9b03      	ldr	r3, [sp, #12]
   1055c:	f383 8811 	msr	BASEPRI, r3
   10560:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
   10564:	f1b9 0f00 	cmp.w	r9, #0
   10568:	d138      	bne.n	105dc <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
   1056a:	2d00      	cmp	r5, #0
   1056c:	d14b      	bne.n	10606 <process_event+0x3ba>
			if (transit != NULL) {
   1056e:	9b01      	ldr	r3, [sp, #4]
   10570:	b113      	cbz	r3, 10578 <process_event+0x32c>
				transit(mgr, transition_complete);
   10572:	4930      	ldr	r1, [pc, #192]	; (10634 <process_event+0x3e8>)
   10574:	4620      	mov	r0, r4
   10576:	4798      	blx	r3
	__asm__ volatile(
   10578:	f04f 0340 	mov.w	r3, #64	; 0x40
   1057c:	f3ef 8b11 	mrs	fp, BASEPRI
   10580:	f383 8812 	msr	BASEPRI_MAX, r3
   10584:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   10588:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
   1058a:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1058e:	f013 fc03 	bl	23d98 <z_spin_lock_valid>
   10592:	b968      	cbnz	r0, 105b0 <process_event+0x364>
   10594:	4a24      	ldr	r2, [pc, #144]	; (10628 <process_event+0x3dc>)
   10596:	4928      	ldr	r1, [pc, #160]	; (10638 <process_event+0x3ec>)
   10598:	2381      	movs	r3, #129	; 0x81
   1059a:	4640      	mov	r0, r8
   1059c:	f018 fafd 	bl	28b9a <printk>
   105a0:	4826      	ldr	r0, [pc, #152]	; (1063c <process_event+0x3f0>)
   105a2:	4651      	mov	r1, sl
   105a4:	f018 faf9 	bl	28b9a <printk>
   105a8:	481f      	ldr	r0, [pc, #124]	; (10628 <process_event+0x3dc>)
   105aa:	2181      	movs	r1, #129	; 0x81
   105ac:	f018 fd36 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   105b0:	4650      	mov	r0, sl
   105b2:	f013 fc0f 	bl	23dd4 <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
   105b6:	8ba3      	ldrh	r3, [r4, #28]
   105b8:	f023 0308 	bic.w	r3, r3, #8
   105bc:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
   105be:	8ba3      	ldrh	r3, [r4, #28]
   105c0:	06da      	lsls	r2, r3, #27
   105c2:	d528      	bpl.n	10616 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
   105c4:	f023 0310 	bic.w	r3, r3, #16
   105c8:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
   105ca:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
   105cc:	f8b4 901c 	ldrh.w	r9, [r4, #28]
   105d0:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
   105d4:	2900      	cmp	r1, #0
   105d6:	f47f ae6b 	bne.w	102b0 <process_event+0x64>
out:
   105da:	e649      	b.n	10270 <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   105dc:	68a1      	ldr	r1, [r4, #8]
   105de:	2900      	cmp	r1, #0
   105e0:	d0c3      	beq.n	1056a <process_event+0x31e>
	return node->next;
   105e2:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
   105e4:	9a02      	ldr	r2, [sp, #8]
   105e6:	2b00      	cmp	r3, #0
   105e8:	bf38      	it	cc
   105ea:	2300      	movcc	r3, #0
   105ec:	4699      	mov	r9, r3
   105ee:	684b      	ldr	r3, [r1, #4]
   105f0:	4620      	mov	r0, r4
   105f2:	461e      	mov	r6, r3
   105f4:	465b      	mov	r3, fp
   105f6:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
   105f8:	f1b9 0f00 	cmp.w	r9, #0
   105fc:	d0b5      	beq.n	1056a <process_event+0x31e>
   105fe:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   10602:	4649      	mov	r1, r9
   10604:	e7ee      	b.n	105e4 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   10606:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
   10608:	9a02      	ldr	r2, [sp, #8]
   1060a:	682d      	ldr	r5, [r5, #0]
   1060c:	465b      	mov	r3, fp
   1060e:	4620      	mov	r0, r4
   10610:	f018 faf9 	bl	28c06 <notify_one>
   10614:	e7a9      	b.n	1056a <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
   10616:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
   1061a:	bf1e      	ittt	ne
   1061c:	f023 0320 	bicne.w	r3, r3, #32
   10620:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
   10622:	2102      	movne	r1, #2
   10624:	e7d2      	b.n	105cc <process_event+0x380>
   10626:	bf00      	nop
   10628:	0002e9fe 	.word	0x0002e9fe
   1062c:	0002ea24 	.word	0x0002ea24
   10630:	0002ea3b 	.word	0x0002ea3b
   10634:	00010641 	.word	0x00010641
   10638:	0002ea50 	.word	0x0002ea50
   1063c:	0002ea65 	.word	0x0002ea65

00010640 <transition_complete>:
{
   10640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10642:	4604      	mov	r4, r0
   10644:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   10646:	f100 0614 	add.w	r6, r0, #20
   1064a:	f04f 0340 	mov.w	r3, #64	; 0x40
   1064e:	f3ef 8711 	mrs	r7, BASEPRI
   10652:	f383 8812 	msr	BASEPRI_MAX, r3
   10656:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1065a:	4630      	mov	r0, r6
   1065c:	f013 fb9c 	bl	23d98 <z_spin_lock_valid>
   10660:	b968      	cbnz	r0, 1067e <transition_complete+0x3e>
   10662:	4a0c      	ldr	r2, [pc, #48]	; (10694 <transition_complete+0x54>)
   10664:	490c      	ldr	r1, [pc, #48]	; (10698 <transition_complete+0x58>)
   10666:	480d      	ldr	r0, [pc, #52]	; (1069c <transition_complete+0x5c>)
   10668:	2381      	movs	r3, #129	; 0x81
   1066a:	f018 fa96 	bl	28b9a <printk>
   1066e:	480c      	ldr	r0, [pc, #48]	; (106a0 <transition_complete+0x60>)
   10670:	4631      	mov	r1, r6
   10672:	f018 fa92 	bl	28b9a <printk>
   10676:	4807      	ldr	r0, [pc, #28]	; (10694 <transition_complete+0x54>)
   10678:	2181      	movs	r1, #129	; 0x81
   1067a:	f018 fccf 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   1067e:	4630      	mov	r0, r6
   10680:	f013 fba8 	bl	23dd4 <z_spin_lock_set_owner>
	mgr->last_res = res;
   10684:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
   10686:	463a      	mov	r2, r7
   10688:	4620      	mov	r0, r4
   1068a:	2101      	movs	r1, #1
}
   1068c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
   10690:	f7ff bddc 	b.w	1024c <process_event>
   10694:	0002e9fe 	.word	0x0002e9fe
   10698:	0002ea50 	.word	0x0002ea50
   1069c:	0002e93e 	.word	0x0002e93e
   106a0:	0002ea65 	.word	0x0002ea65

000106a4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   106a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   106a8:	4604      	mov	r4, r0
   106aa:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   106ac:	f018 fac1 	bl	28c32 <validate_args>

	if (rv < 0) {
   106b0:	1e05      	subs	r5, r0, #0
   106b2:	db5e      	blt.n	10772 <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
   106b4:	f104 0914 	add.w	r9, r4, #20
   106b8:	f04f 0340 	mov.w	r3, #64	; 0x40
   106bc:	f3ef 8a11 	mrs	sl, BASEPRI
   106c0:	f383 8812 	msr	BASEPRI_MAX, r3
   106c4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   106c8:	4648      	mov	r0, r9
   106ca:	f013 fb65 	bl	23d98 <z_spin_lock_valid>
   106ce:	b968      	cbnz	r0, 106ec <onoff_request+0x48>
   106d0:	4a38      	ldr	r2, [pc, #224]	; (107b4 <onoff_request+0x110>)
   106d2:	4939      	ldr	r1, [pc, #228]	; (107b8 <onoff_request+0x114>)
   106d4:	4839      	ldr	r0, [pc, #228]	; (107bc <onoff_request+0x118>)
   106d6:	2381      	movs	r3, #129	; 0x81
   106d8:	f018 fa5f 	bl	28b9a <printk>
   106dc:	4838      	ldr	r0, [pc, #224]	; (107c0 <onoff_request+0x11c>)
   106de:	4649      	mov	r1, r9
   106e0:	f018 fa5b 	bl	28b9a <printk>
   106e4:	4833      	ldr	r0, [pc, #204]	; (107b4 <onoff_request+0x110>)
   106e6:	2181      	movs	r1, #129	; 0x81
   106e8:	f018 fc98 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   106ec:	4648      	mov	r0, r9
   106ee:	f013 fb71 	bl	23dd4 <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   106f2:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   106f4:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
   106f6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   106fa:	428b      	cmp	r3, r1
   106fc:	f002 0607 	and.w	r6, r2, #7
   10700:	d050      	beq.n	107a4 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   10702:	2e02      	cmp	r6, #2
   10704:	d124      	bne.n	10750 <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   10706:	3301      	adds	r3, #1
   10708:	83e3      	strh	r3, [r4, #30]
	rv = state;
   1070a:	4635      	mov	r5, r6
		notify = true;
   1070c:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   10710:	4648      	mov	r0, r9
   10712:	f013 fb4f 	bl	23db4 <z_spin_unlock_valid>
   10716:	b968      	cbnz	r0, 10734 <onoff_request+0x90>
   10718:	4a26      	ldr	r2, [pc, #152]	; (107b4 <onoff_request+0x110>)
   1071a:	492a      	ldr	r1, [pc, #168]	; (107c4 <onoff_request+0x120>)
   1071c:	4827      	ldr	r0, [pc, #156]	; (107bc <onoff_request+0x118>)
   1071e:	23ac      	movs	r3, #172	; 0xac
   10720:	f018 fa3b 	bl	28b9a <printk>
   10724:	4828      	ldr	r0, [pc, #160]	; (107c8 <onoff_request+0x124>)
   10726:	4649      	mov	r1, r9
   10728:	f018 fa37 	bl	28b9a <printk>
   1072c:	4821      	ldr	r0, [pc, #132]	; (107b4 <onoff_request+0x110>)
   1072e:	21ac      	movs	r1, #172	; 0xac
   10730:	f018 fc74 	bl	2901c <assert_post_action>
	__asm__ volatile(
   10734:	f38a 8811 	msr	BASEPRI, sl
   10738:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   1073c:	f1b8 0f00 	cmp.w	r8, #0
   10740:	d017      	beq.n	10772 <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
   10742:	2300      	movs	r3, #0
   10744:	4632      	mov	r2, r6
   10746:	4639      	mov	r1, r7
   10748:	4620      	mov	r0, r4
   1074a:	f018 fa5c 	bl	28c06 <notify_one>
   1074e:	e010      	b.n	10772 <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
   10750:	0793      	lsls	r3, r2, #30
   10752:	d001      	beq.n	10758 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
   10754:	2e06      	cmp	r6, #6
   10756:	d10f      	bne.n	10778 <onoff_request+0xd4>
	parent->next = child;
   10758:	2300      	movs	r3, #0
   1075a:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
   1075c:	6863      	ldr	r3, [r4, #4]
   1075e:	b9f3      	cbnz	r3, 1079e <onoff_request+0xfa>
	list->head = node;
   10760:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
   10764:	4635      	mov	r5, r6
   10766:	b9fe      	cbnz	r6, 107a8 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
   10768:	4652      	mov	r2, sl
   1076a:	2102      	movs	r1, #2
   1076c:	4620      	mov	r0, r4
   1076e:	f7ff fd6d 	bl	1024c <process_event>
		}
	}

	return rv;
}
   10772:	4628      	mov	r0, r5
   10774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
   10778:	2e05      	cmp	r6, #5
   1077a:	d018      	beq.n	107ae <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
   1077c:	2e01      	cmp	r6, #1
   1077e:	d00b      	beq.n	10798 <onoff_request+0xf4>
   10780:	4912      	ldr	r1, [pc, #72]	; (107cc <onoff_request+0x128>)
   10782:	480e      	ldr	r0, [pc, #56]	; (107bc <onoff_request+0x118>)
   10784:	4a12      	ldr	r2, [pc, #72]	; (107d0 <onoff_request+0x12c>)
   10786:	f240 13c9 	movw	r3, #457	; 0x1c9
   1078a:	f018 fa06 	bl	28b9a <printk>
   1078e:	4810      	ldr	r0, [pc, #64]	; (107d0 <onoff_request+0x12c>)
   10790:	f240 11c9 	movw	r1, #457	; 0x1c9
   10794:	f018 fc42 	bl	2901c <assert_post_action>
		rv = -EIO;
   10798:	f06f 0504 	mvn.w	r5, #4
   1079c:	e004      	b.n	107a8 <onoff_request+0x104>
	parent->next = child;
   1079e:	601f      	str	r7, [r3, #0]
	list->tail = node;
   107a0:	6067      	str	r7, [r4, #4]
}
   107a2:	e7df      	b.n	10764 <onoff_request+0xc0>
		rv = -EAGAIN;
   107a4:	f06f 050a 	mvn.w	r5, #10
   107a8:	f04f 0800 	mov.w	r8, #0
   107ac:	e7b0      	b.n	10710 <onoff_request+0x6c>
		rv = -ENOTSUP;
   107ae:	f06f 0585 	mvn.w	r5, #133	; 0x85
   107b2:	e7f9      	b.n	107a8 <onoff_request+0x104>
   107b4:	0002e9fe 	.word	0x0002e9fe
   107b8:	0002ea50 	.word	0x0002ea50
   107bc:	0002e93e 	.word	0x0002e93e
   107c0:	0002ea65 	.word	0x0002ea65
   107c4:	0002ea24 	.word	0x0002ea24
   107c8:	0002ea3b 	.word	0x0002ea3b
   107cc:	0002e9e8 	.word	0x0002e9e8
   107d0:	0002e95b 	.word	0x0002e95b

000107d4 <timeutil_timegm64>:

	return era * 146097 + (time_t)doe - 719468;
}

int64_t timeutil_timegm64(const struct tm *tm)
{
   107d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int64_t y = 1900 + (int64_t)tm->tm_year;
	unsigned int m = tm->tm_mon + 1;
   107d8:	6903      	ldr	r3, [r0, #16]
	unsigned int d = tm->tm_mday - 1;
   107da:	68c4      	ldr	r4, [r0, #12]
	unsigned int m = tm->tm_mon + 1;
   107dc:	f103 0901 	add.w	r9, r3, #1
	unsigned int d = tm->tm_mday - 1;
   107e0:	1e63      	subs	r3, r4, #1
   107e2:	9301      	str	r3, [sp, #4]
	int64_t y = 1900 + (int64_t)tm->tm_year;
   107e4:	6943      	ldr	r3, [r0, #20]
   107e6:	f240 746c 	movw	r4, #1900	; 0x76c
   107ea:	18e4      	adds	r4, r4, r3
   107ec:	f04f 0500 	mov.w	r5, #0
   107f0:	eb45 75e3 	adc.w	r5, r5, r3, asr #31
	y -= m <= 2;
   107f4:	f1b9 0f02 	cmp.w	r9, #2
   107f8:	bf8c      	ite	hi
   107fa:	2300      	movhi	r3, #0
   107fc:	2301      	movls	r3, #1
   107fe:	1ae4      	subs	r4, r4, r3
   10800:	f165 0500 	sbc.w	r5, r5, #0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   10804:	2c00      	cmp	r4, #0
   10806:	f175 0300 	sbcs.w	r3, r5, #0
{
   1080a:	4680      	mov	r8, r0
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   1080c:	da58      	bge.n	108c0 <timeutil_timegm64+0xec>
   1080e:	f46f 70c7 	mvn.w	r0, #398	; 0x18e
   10812:	1820      	adds	r0, r4, r0
   10814:	f44f 72c8 	mov.w	r2, #400	; 0x190
   10818:	f04f 0300 	mov.w	r3, #0
   1081c:	f145 31ff 	adc.w	r1, r5, #4294967295
   10820:	f7ef fcbe 	bl	1a0 <__aeabi_ldivmod>
	unsigned int yoe = y - era * 400;
   10824:	4b29      	ldr	r3, [pc, #164]	; (108cc <timeutil_timegm64+0xf8>)
   10826:	fb03 4400 	mla	r4, r3, r0, r4
	int64_t ndays = time_days_from_civil(y, m, d);
	int64_t time = tm->tm_sec;

	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   1082a:	e9d8 5300 	ldrd	r5, r3, [r8]
   1082e:	469a      	mov	sl, r3
   10830:	ea4f 7be3 	mov.w	fp, r3, asr #31
   10834:	f8d8 3008 	ldr.w	r3, [r8, #8]
   10838:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   1083c:	fbcc ab03 	smlal	sl, fp, ip, r3
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   10840:	f1b9 0f02 	cmp.w	r9, #2
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   10844:	fbaa 230c 	umull	r2, r3, sl, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   10848:	bf8c      	ite	hi
   1084a:	f06f 0e02 	mvnhi.w	lr, #2
   1084e:	f04f 0e09 	movls.w	lr, #9
	time += 60LL * (tm->tm_min + 60LL * tm->tm_hour);
   10852:	fb0c 330b 	mla	r3, ip, fp, r3
   10856:	1952      	adds	r2, r2, r5
   10858:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1085c:	ea4f 0c94 	mov.w	ip, r4, lsr #2
   10860:	f240 156d 	movw	r5, #365	; 0x16d
   10864:	fb05 cc04 	mla	ip, r5, r4, ip
   10868:	9d01      	ldr	r5, [sp, #4]
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1086a:	44f1      	add	r9, lr
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1086c:	4465      	add	r5, ip
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   1086e:	f04f 0e99 	mov.w	lr, #153	; 0x99
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   10872:	f04f 0c64 	mov.w	ip, #100	; 0x64
   10876:	fbb4 f4fc 	udiv	r4, r4, ip
	return era * 146097 + (time_t)doe - 719468;
   1087a:	f8df c05c 	ldr.w	ip, [pc, #92]	; 108d8 <timeutil_timegm64+0x104>
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   1087e:	1b2c      	subs	r4, r5, r4
	unsigned int doy = (153U * (m + (m > 2 ? -3 : 9)) + 2U) / 5U + d;
   10880:	fb0e fe09 	mul.w	lr, lr, r9
   10884:	f10e 0e02 	add.w	lr, lr, #2
   10888:	f04f 0905 	mov.w	r9, #5
   1088c:	fbbe fef9 	udiv	lr, lr, r9
	unsigned int doe = yoe * 365U + yoe / 4U - yoe / 100U + doy;
   10890:	44a6      	add	lr, r4
	return era * 146097 + (time_t)doe - 719468;
   10892:	fba0 450c 	umull	r4, r5, r0, ip
   10896:	fb0c 5501 	mla	r5, ip, r1, r5
   1089a:	490d      	ldr	r1, [pc, #52]	; (108d0 <timeutil_timegm64+0xfc>)
   1089c:	1866      	adds	r6, r4, r1
	time += 86400LL * ndays;
   1089e:	490d      	ldr	r1, [pc, #52]	; (108d4 <timeutil_timegm64+0x100>)
	return era * 146097 + (time_t)doe - 719468;
   108a0:	f145 37ff 	adc.w	r7, r5, #4294967295
   108a4:	eb16 060e 	adds.w	r6, r6, lr
	time += 86400LL * ndays;
   108a8:	fba6 4501 	umull	r4, r5, r6, r1
	return era * 146097 + (time_t)doe - 719468;
   108ac:	f147 0700 	adc.w	r7, r7, #0
	time += 86400LL * ndays;
   108b0:	fb01 5507 	mla	r5, r1, r7, r5

	return time;
}
   108b4:	18a0      	adds	r0, r4, r2
   108b6:	eb45 0103 	adc.w	r1, r5, r3
   108ba:	b003      	add	sp, #12
   108bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	int64_t era = (y >= 0 ? y : y - 399) / 400;
   108c0:	f44f 72c8 	mov.w	r2, #400	; 0x190
   108c4:	2300      	movs	r3, #0
   108c6:	4620      	mov	r0, r4
   108c8:	4629      	mov	r1, r5
   108ca:	e7a9      	b.n	10820 <timeutil_timegm64+0x4c>
   108cc:	fffffe70 	.word	0xfffffe70
   108d0:	fff50594 	.word	0xfff50594
   108d4:	00015180 	.word	0x00015180
   108d8:	00023ab1 	.word	0x00023ab1

000108dc <sys_heap_free>:
	uint8_t *mem = p, *base = (uint8_t *)chunk_buf(h);
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
}

void sys_heap_free(struct sys_heap *heap, void *mem)
{
   108dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   108de:	460d      	mov	r5, r1
   108e0:	2900      	cmp	r1, #0
   108e2:	d039      	beq.n	10958 <sys_heap_free+0x7c>
		return; /* ISO C free() semantics */
	}
	struct z_heap *h = heap->heap;
   108e4:	6806      	ldr	r6, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   108e6:	1f0c      	subs	r4, r1, #4
   108e8:	1ba4      	subs	r4, r4, r6
   108ea:	08e7      	lsrs	r7, r4, #3

static inline chunkid_t chunk_field(struct z_heap *h, chunkid_t c,
				    enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   108ec:	f024 0407 	bic.w	r4, r4, #7

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
   108f0:	4434      	add	r4, r6
	}
}

static inline bool chunk_used(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   108f2:	78a3      	ldrb	r3, [r4, #2]

	/*
	 * This should catch many double-free cases.
	 * This is cheap enough so let's do it all the time.
	 */
	__ASSERT(chunk_used(h, c),
   108f4:	07db      	lsls	r3, r3, #31
   108f6:	d40d      	bmi.n	10914 <sys_heap_free+0x38>
   108f8:	4a18      	ldr	r2, [pc, #96]	; (1095c <sys_heap_free+0x80>)
   108fa:	4919      	ldr	r1, [pc, #100]	; (10960 <sys_heap_free+0x84>)
   108fc:	4819      	ldr	r0, [pc, #100]	; (10964 <sys_heap_free+0x88>)
   108fe:	23a3      	movs	r3, #163	; 0xa3
   10900:	f018 f94b 	bl	28b9a <printk>
   10904:	4818      	ldr	r0, [pc, #96]	; (10968 <sys_heap_free+0x8c>)
   10906:	4629      	mov	r1, r5
   10908:	f018 f947 	bl	28b9a <printk>
   1090c:	4813      	ldr	r0, [pc, #76]	; (1095c <sys_heap_free+0x80>)
   1090e:	21a3      	movs	r1, #163	; 0xa3
   10910:	f018 fb84 	bl	2901c <assert_post_action>
	return c - chunk_field(h, c, LEFT_SIZE);
}

static inline chunkid_t right_chunk(struct z_heap *h, chunkid_t c)
{
	return c + chunk_size(h, c);
   10914:	4639      	mov	r1, r7
   10916:	4630      	mov	r0, r6
   10918:	f018 f9c3 	bl	28ca2 <chunk_size>
   1091c:	4438      	add	r0, r7
		return ((uint16_t *)cmem)[f];
   1091e:	f836 3030 	ldrh.w	r3, [r6, r0, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   10922:	1ac0      	subs	r0, r0, r3
	/*
	 * It is easy to catch many common memory overflow cases with
	 * a quick check on this and next chunk header fields that are
	 * immediately before and after the freed memory.
	 */
	__ASSERT(left_chunk(h, right_chunk(h, c)) == c,
   10924:	4287      	cmp	r7, r0
   10926:	d00d      	beq.n	10944 <sys_heap_free+0x68>
   10928:	4a0c      	ldr	r2, [pc, #48]	; (1095c <sys_heap_free+0x80>)
   1092a:	4910      	ldr	r1, [pc, #64]	; (1096c <sys_heap_free+0x90>)
   1092c:	480d      	ldr	r0, [pc, #52]	; (10964 <sys_heap_free+0x88>)
   1092e:	23ab      	movs	r3, #171	; 0xab
   10930:	f018 f933 	bl	28b9a <printk>
   10934:	480e      	ldr	r0, [pc, #56]	; (10970 <sys_heap_free+0x94>)
   10936:	4629      	mov	r1, r5
   10938:	f018 f92f 	bl	28b9a <printk>
   1093c:	4807      	ldr	r0, [pc, #28]	; (1095c <sys_heap_free+0x80>)
   1093e:	21ab      	movs	r1, #171	; 0xab
   10940:	f018 fb6c 	bl	2901c <assert_post_action>
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   10944:	8863      	ldrh	r3, [r4, #2]
   10946:	f023 0301 	bic.w	r3, r3, #1
   1094a:	8063      	strh	r3, [r4, #2]

	set_chunk_used(h, c, false);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes -= chunksz_to_bytes(h, chunk_size(h, c));
#endif
	free_chunk(h, c);
   1094c:	4639      	mov	r1, r7
   1094e:	4630      	mov	r0, r6
}
   10950:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_chunk(h, c);
   10954:	f018 ba62 	b.w	28e1c <free_chunk>
}
   10958:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1095a:	bf00      	nop
   1095c:	0002ea7d 	.word	0x0002ea7d
   10960:	0002ea9e 	.word	0x0002ea9e
   10964:	0002e93e 	.word	0x0002e93e
   10968:	0002eaaf 	.word	0x0002eaaf
   1096c:	0002eae7 	.word	0x0002eae7
   10970:	0002eb0d 	.word	0x0002eb0d

00010974 <sys_heap_aligned_alloc>:
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
   10974:	424b      	negs	r3, r1
{
   10976:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rew = align & -align;
   1097a:	ea03 0701 	and.w	r7, r3, r1
	if (align != rew) {
   1097e:	ea31 0303 	bics.w	r3, r1, r3
	struct z_heap *h = heap->heap;
   10982:	6806      	ldr	r6, [r0, #0]
{
   10984:	4614      	mov	r4, r2
	if (align != rew) {
   10986:	d01f      	beq.n	109c8 <sys_heap_aligned_alloc+0x54>
		return false;
   10988:	2f04      	cmp	r7, #4
   1098a:	463d      	mov	r5, r7
   1098c:	46b9      	mov	r9, r7
   1098e:	bf28      	it	cs
   10990:	2504      	movcs	r5, #4
		align -= rew;
   10992:	1bcf      	subs	r7, r1, r7
			return sys_heap_alloc(heap, bytes);
		}
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");
   10994:	f107 3aff 	add.w	sl, r7, #4294967295
   10998:	ea1a 0f07 	tst.w	sl, r7
   1099c:	d00e      	beq.n	109bc <sys_heap_aligned_alloc+0x48>
   1099e:	4933      	ldr	r1, [pc, #204]	; (10a6c <sys_heap_aligned_alloc+0xf8>)
   109a0:	4a33      	ldr	r2, [pc, #204]	; (10a70 <sys_heap_aligned_alloc+0xfc>)
   109a2:	4834      	ldr	r0, [pc, #208]	; (10a74 <sys_heap_aligned_alloc+0x100>)
   109a4:	f240 1327 	movw	r3, #295	; 0x127
   109a8:	f018 f8f7 	bl	28b9a <printk>
   109ac:	4832      	ldr	r0, [pc, #200]	; (10a78 <sys_heap_aligned_alloc+0x104>)
   109ae:	f018 f8f4 	bl	28b9a <printk>
   109b2:	482f      	ldr	r0, [pc, #188]	; (10a70 <sys_heap_aligned_alloc+0xfc>)
   109b4:	f240 1127 	movw	r1, #295	; 0x127
   109b8:	f018 fb30 	bl	2901c <assert_post_action>

	if (bytes == 0 || size_too_big(h, bytes)) {
   109bc:	b97c      	cbnz	r4, 109de <sys_heap_aligned_alloc+0x6a>
		return NULL;
   109be:	f04f 0900 	mov.w	r9, #0
	set_chunk_used(h, c, true);
#ifdef CONFIG_SYS_HEAP_RUNTIME_STATS
	h->allocated_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
	return mem;
}
   109c2:	4648      	mov	r0, r9
   109c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (align <= chunk_header_bytes(h)) {
   109c8:	2904      	cmp	r1, #4
   109ca:	d804      	bhi.n	109d6 <sys_heap_aligned_alloc+0x62>
}
   109cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return sys_heap_alloc(heap, bytes);
   109d0:	4611      	mov	r1, r2
   109d2:	f018 ba54 	b.w	28e7e <sys_heap_alloc>
		rew = 0;
   109d6:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
   109da:	2504      	movs	r5, #4
   109dc:	e7da      	b.n	10994 <sys_heap_aligned_alloc+0x20>
	if (bytes == 0 || size_too_big(h, bytes)) {
   109de:	68b3      	ldr	r3, [r6, #8]
   109e0:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
   109e4:	d9eb      	bls.n	109be <sys_heap_aligned_alloc+0x4a>
	return big_heap_bytes(size) ? 8 : 4;
}

static inline chunksz_t chunksz(size_t bytes)
{
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   109e6:	f104 010b 	add.w	r1, r4, #11
   109ea:	4439      	add	r1, r7
   109ec:	1b49      	subs	r1, r1, r5
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   109ee:	08c9      	lsrs	r1, r1, #3
   109f0:	4630      	mov	r0, r6
   109f2:	f018 f9ac 	bl	28d4e <alloc_chunk>
	if (c0 == 0) {
   109f6:	4680      	mov	r8, r0
   109f8:	2800      	cmp	r0, #0
   109fa:	d0e0      	beq.n	109be <sys_heap_aligned_alloc+0x4a>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
   109fc:	f109 0504 	add.w	r5, r9, #4
   10a00:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   10a04:	4435      	add	r5, r6
   10a06:	4455      	add	r5, sl
   10a08:	427f      	negs	r7, r7
   10a0a:	402f      	ands	r7, r5
   10a0c:	eba7 0909 	sub.w	r9, r7, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10a10:	444c      	add	r4, r9
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10a12:	f1a9 0304 	sub.w	r3, r9, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10a16:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10a18:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   10a1a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   10a1e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   10a20:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   10a24:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   10a28:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   10a2c:	d208      	bcs.n	10a40 <sys_heap_aligned_alloc+0xcc>
		split_chunks(h, c0, c);
   10a2e:	4601      	mov	r1, r0
   10a30:	463a      	mov	r2, r7
   10a32:	4630      	mov	r0, r6
   10a34:	f018 f9d8 	bl	28de8 <split_chunks>
		free_list_add(h, c0);
   10a38:	4641      	mov	r1, r8
   10a3a:	4630      	mov	r0, r6
   10a3c:	f018 f936 	bl	28cac <free_list_add>
	return c + chunk_size(h, c);
   10a40:	4639      	mov	r1, r7
   10a42:	4630      	mov	r0, r6
   10a44:	f018 f92d 	bl	28ca2 <chunk_size>
   10a48:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   10a4a:	4284      	cmp	r4, r0
   10a4c:	d207      	bcs.n	10a5e <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   10a4e:	4630      	mov	r0, r6
   10a50:	4622      	mov	r2, r4
   10a52:	f018 f9c9 	bl	28de8 <split_chunks>
		free_list_add(h, c_end);
   10a56:	4621      	mov	r1, r4
   10a58:	4630      	mov	r0, r6
   10a5a:	f018 f927 	bl	28cac <free_list_add>
	void *cmem = &buf[c];
   10a5e:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10a62:	8873      	ldrh	r3, [r6, #2]
   10a64:	f043 0301 	orr.w	r3, r3, #1
   10a68:	8073      	strh	r3, [r6, #2]
   10a6a:	e7aa      	b.n	109c2 <sys_heap_aligned_alloc+0x4e>
   10a6c:	0002eb49 	.word	0x0002eb49
   10a70:	0002ea7d 	.word	0x0002ea7d
   10a74:	0002e93e 	.word	0x0002e93e
   10a78:	0002eb64 	.word	0x0002eb64

00010a7c <sys_heap_init>:

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
	if (IS_ENABLED(CONFIG_SYS_HEAP_SMALL_ONLY)) {
		/* Must fit in a 15 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   10a7c:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
{
   10a80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10a84:	4606      	mov	r6, r0
   10a86:	460d      	mov	r5, r1
   10a88:	4617      	mov	r7, r2
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffU, "heap size is too big");
   10a8a:	d369      	bcc.n	10b60 <sys_heap_init+0xe4>
   10a8c:	493d      	ldr	r1, [pc, #244]	; (10b84 <sys_heap_init+0x108>)
   10a8e:	4a3e      	ldr	r2, [pc, #248]	; (10b88 <sys_heap_init+0x10c>)
   10a90:	483e      	ldr	r0, [pc, #248]	; (10b8c <sys_heap_init+0x110>)
   10a92:	f240 13a5 	movw	r3, #421	; 0x1a5
   10a96:	f018 f880 	bl	28b9a <printk>
   10a9a:	483d      	ldr	r0, [pc, #244]	; (10b90 <sys_heap_init+0x114>)
   10a9c:	f018 f87d 	bl	28b9a <printk>
   10aa0:	f240 11a5 	movw	r1, #421	; 0x1a5
		/* Must fit in a 31 bit count of HUNK_UNIT */
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   10aa4:	4838      	ldr	r0, [pc, #224]	; (10b88 <sys_heap_init+0x10c>)
   10aa6:	f018 fab9 	bl	2901c <assert_post_action>
	bytes -= heap_footer_bytes(bytes);
   10aaa:	3f04      	subs	r7, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10aac:	1dec      	adds	r4, r5, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10aae:	443d      	add	r5, r7
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   10ab0:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   10ab4:	f025 0507 	bic.w	r5, r5, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   10ab8:	1b2d      	subs	r5, r5, r4

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   10aba:	2d17      	cmp	r5, #23
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
   10abc:	ea4f 07d5 	mov.w	r7, r5, lsr #3
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");
   10ac0:	d80e      	bhi.n	10ae0 <sys_heap_init+0x64>
   10ac2:	4934      	ldr	r1, [pc, #208]	; (10b94 <sys_heap_init+0x118>)
   10ac4:	4a30      	ldr	r2, [pc, #192]	; (10b88 <sys_heap_init+0x10c>)
   10ac6:	4831      	ldr	r0, [pc, #196]	; (10b8c <sys_heap_init+0x110>)
   10ac8:	f240 13b5 	movw	r3, #437	; 0x1b5
   10acc:	f018 f865 	bl	28b9a <printk>
   10ad0:	4831      	ldr	r0, [pc, #196]	; (10b98 <sys_heap_init+0x11c>)
   10ad2:	f018 f862 	bl	28b9a <printk>
   10ad6:	482c      	ldr	r0, [pc, #176]	; (10b88 <sys_heap_init+0x10c>)
   10ad8:	f240 11b5 	movw	r1, #437	; 0x1b5
   10adc:	f018 fa9e 	bl	2901c <assert_post_action>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
   10ae0:	fab7 f887 	clz	r8, r7
	h->free_bytes = 0;
	h->allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
   10ae4:	f1c8 0824 	rsb	r8, r8, #36	; 0x24
   10ae8:	ea4f 0888 	mov.w	r8, r8, lsl #2
	heap->heap = h;
   10aec:	6034      	str	r4, [r6, #0]
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   10aee:	f108 0607 	add.w	r6, r8, #7
	h->avail_buckets = 0;
   10af2:	2300      	movs	r3, #0
   10af4:	08f6      	lsrs	r6, r6, #3
   10af6:	60e3      	str	r3, [r4, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   10af8:	1c73      	adds	r3, r6, #1
   10afa:	42bb      	cmp	r3, r7
	h->end_chunk = heap_sz;
   10afc:	60a7      	str	r7, [r4, #8]
	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");
   10afe:	d90e      	bls.n	10b1e <sys_heap_init+0xa2>
   10b00:	4926      	ldr	r1, [pc, #152]	; (10b9c <sys_heap_init+0x120>)
   10b02:	4a21      	ldr	r2, [pc, #132]	; (10b88 <sys_heap_init+0x10c>)
   10b04:	4821      	ldr	r0, [pc, #132]	; (10b8c <sys_heap_init+0x110>)
   10b06:	f240 13c5 	movw	r3, #453	; 0x1c5
   10b0a:	f018 f846 	bl	28b9a <printk>
   10b0e:	4822      	ldr	r0, [pc, #136]	; (10b98 <sys_heap_init+0x11c>)
   10b10:	f018 f843 	bl	28b9a <printk>
   10b14:	481c      	ldr	r0, [pc, #112]	; (10b88 <sys_heap_init+0x10c>)
   10b16:	f240 11c5 	movw	r1, #453	; 0x1c5
   10b1a:	f018 fa7f 	bl	2901c <assert_post_action>
   10b1e:	f104 0210 	add.w	r2, r4, #16
   10b22:	44a0      	add	r8, r4
   10b24:	2300      	movs	r3, #0

	for (int i = 0; i < nb_buckets; i++) {
   10b26:	4590      	cmp	r8, r2
   10b28:	d129      	bne.n	10b7e <sys_heap_init+0x102>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10b2a:	0072      	lsls	r2, r6, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10b2c:	f042 0201 	orr.w	r2, r2, #1
   10b30:	8062      	strh	r2, [r4, #2]
		((uint16_t *)cmem)[f] = val;
   10b32:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
   10b36:	1bba      	subs	r2, r7, r6
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   10b38:	0050      	lsls	r0, r2, #1
		((uint16_t *)cmem)[f] = val;
   10b3a:	8023      	strh	r3, [r4, #0]
   10b3c:	8048      	strh	r0, [r1, #2]
   10b3e:	1961      	adds	r1, r4, r5
   10b40:	f824 6036 	strh.w	r6, [r4, r6, lsl #3]
	void *cmem = &buf[c];
   10b44:	eb04 07c7 	add.w	r7, r4, r7, lsl #3
		((uint16_t *)cmem)[f] = val;
   10b48:	804b      	strh	r3, [r1, #2]
   10b4a:	5362      	strh	r2, [r4, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   10b4c:	887b      	ldrh	r3, [r7, #2]
   10b4e:	f043 0301 	orr.w	r3, r3, #1
   10b52:	807b      	strh	r3, [r7, #2]
	/* the end marker chunk */
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
   10b54:	4631      	mov	r1, r6
   10b56:	4620      	mov	r0, r4
}
   10b58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	free_list_add(h, chunk0_size);
   10b5c:	f018 b8a6 	b.w	28cac <free_list_add>
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
   10b60:	2a04      	cmp	r2, #4
   10b62:	d8a2      	bhi.n	10aaa <sys_heap_init+0x2e>
   10b64:	490e      	ldr	r1, [pc, #56]	; (10ba0 <sys_heap_init+0x124>)
   10b66:	4a08      	ldr	r2, [pc, #32]	; (10b88 <sys_heap_init+0x10c>)
   10b68:	4808      	ldr	r0, [pc, #32]	; (10b8c <sys_heap_init+0x110>)
   10b6a:	f44f 73d6 	mov.w	r3, #428	; 0x1ac
   10b6e:	f018 f814 	bl	28b9a <printk>
   10b72:	4809      	ldr	r0, [pc, #36]	; (10b98 <sys_heap_init+0x11c>)
   10b74:	f018 f811 	bl	28b9a <printk>
   10b78:	f44f 71d6 	mov.w	r1, #428	; 0x1ac
   10b7c:	e792      	b.n	10aa4 <sys_heap_init+0x28>
		h->buckets[i].next = 0;
   10b7e:	f842 3b04 	str.w	r3, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   10b82:	e7d0      	b.n	10b26 <sys_heap_init+0xaa>
   10b84:	0002eb81 	.word	0x0002eb81
   10b88:	0002ea7d 	.word	0x0002ea7d
   10b8c:	0002e93e 	.word	0x0002e93e
   10b90:	0002eb97 	.word	0x0002eb97
   10b94:	0002ebe8 	.word	0x0002ebe8
   10b98:	0002ebcf 	.word	0x0002ebcf
   10b9c:	0002ec11 	.word	0x0002ec11
   10ba0:	0002ebae 	.word	0x0002ebae

00010ba4 <extract_decimal>:
 * the referenced text.
 *
 * @return the decoded integer value.
 */
static size_t extract_decimal(const char **str)
{
   10ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const char *sp = *str;
	size_t val = 0;

	while (isdigit((int)(unsigned char)*sp)) {
   10ba6:	4e09      	ldr	r6, [pc, #36]	; (10bcc <extract_decimal+0x28>)
   10ba8:	6801      	ldr	r1, [r0, #0]
{
   10baa:	4602      	mov	r2, r0
		val = 10U * val + *sp++ - '0';
   10bac:	270a      	movs	r7, #10
	size_t val = 0;
   10bae:	2000      	movs	r0, #0
   10bb0:	460c      	mov	r4, r1
	while (isdigit((int)(unsigned char)*sp)) {
   10bb2:	3101      	adds	r1, #1
   10bb4:	7823      	ldrb	r3, [r4, #0]
   10bb6:	5d9d      	ldrb	r5, [r3, r6]
   10bb8:	076d      	lsls	r5, r5, #29
   10bba:	d401      	bmi.n	10bc0 <extract_decimal+0x1c>
	}
	*str = sp;
   10bbc:	6014      	str	r4, [r2, #0]
	return val;
}
   10bbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
		val = 10U * val + *sp++ - '0';
   10bc0:	fb07 3300 	mla	r3, r7, r0, r3
   10bc4:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   10bc8:	e7f2      	b.n	10bb0 <extract_decimal+0xc>
   10bca:	bf00      	nop
   10bcc:	00034540 	.word	0x00034540

00010bd0 <encode_uint>:
 */
static char *encode_uint(uint_value_type value,
			 struct conversion *conv,
			 char *bps,
			 const char *bpe)
{
   10bd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10bd4:	4614      	mov	r4, r2
   10bd6:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
   10bd8:	78d3      	ldrb	r3, [r2, #3]
   10bda:	4a24      	ldr	r2, [pc, #144]	; (10c6c <encode_uint+0x9c>)
   10bdc:	f813 a002 	ldrb.w	sl, [r3, r2]
	switch (specifier) {
   10be0:	2b6f      	cmp	r3, #111	; 0x6f
   10be2:	f00a 0203 	and.w	r2, sl, #3
{
   10be6:	4606      	mov	r6, r0
   10be8:	460f      	mov	r7, r1
   10bea:	9201      	str	r2, [sp, #4]
	switch (specifier) {
   10bec:	d02d      	beq.n	10c4a <encode_uint+0x7a>
   10bee:	d828      	bhi.n	10c42 <encode_uint+0x72>
		return 16;
   10bf0:	2b58      	cmp	r3, #88	; 0x58
   10bf2:	bf14      	ite	ne
   10bf4:	250a      	movne	r5, #10
   10bf6:	2510      	moveq	r5, #16
	const unsigned int radix = conversion_radix(conv->specifier);
	char *bp = bps + (bpe - bps);
   10bf8:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30

	do {
		unsigned int lsv = (unsigned int)(value % radix);
   10bfc:	46aa      	mov	sl, r5
   10bfe:	f04f 0b00 	mov.w	fp, #0
   10c02:	4652      	mov	r2, sl
   10c04:	465b      	mov	r3, fp
   10c06:	4630      	mov	r0, r6
   10c08:	4639      	mov	r1, r7
   10c0a:	f7ef fb19 	bl	240 <__aeabi_uldivmod>

		*--bp = (lsv <= 9) ? ('0' + lsv)
   10c0e:	2a09      	cmp	r2, #9
   10c10:	b2d3      	uxtb	r3, r2
   10c12:	d81f      	bhi.n	10c54 <encode_uint+0x84>
   10c14:	3330      	adds	r3, #48	; 0x30
			: upcase ? ('A' + lsv - 10) : ('a' + lsv - 10);
		value /= radix;
	} while ((value != 0) && (bps < bp));
   10c16:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10c18:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
   10c1a:	bf08      	it	eq
   10c1c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10c1e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
   10c22:	d301      	bcc.n	10c28 <encode_uint+0x58>
   10c24:	45c8      	cmp	r8, r9
   10c26:	d812      	bhi.n	10c4e <encode_uint+0x7e>

	/* Record required alternate forms.  This can be determined
	 * from the radix without re-checking specifier.
	 */
	if (conv->flag_hash) {
   10c28:	7823      	ldrb	r3, [r4, #0]
   10c2a:	069b      	lsls	r3, r3, #26
   10c2c:	d505      	bpl.n	10c3a <encode_uint+0x6a>
		if (radix == 8) {
   10c2e:	2d08      	cmp	r5, #8
   10c30:	d116      	bne.n	10c60 <encode_uint+0x90>
			conv->altform_0 = true;
   10c32:	78a3      	ldrb	r3, [r4, #2]
   10c34:	f043 0308 	orr.w	r3, r3, #8
		} else if (radix == 16) {
			conv->altform_0c = true;
   10c38:	70a3      	strb	r3, [r4, #2]
			;
		}
	}

	return bp;
}
   10c3a:	4640      	mov	r0, r8
   10c3c:	b003      	add	sp, #12
   10c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   10c42:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   10c46:	2b70      	cmp	r3, #112	; 0x70
   10c48:	e7d3      	b.n	10bf2 <encode_uint+0x22>
	switch (specifier) {
   10c4a:	2508      	movs	r5, #8
   10c4c:	e7d4      	b.n	10bf8 <encode_uint+0x28>
		value /= radix;
   10c4e:	4606      	mov	r6, r0
   10c50:	460f      	mov	r7, r1
   10c52:	e7d6      	b.n	10c02 <encode_uint+0x32>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   10c54:	9a01      	ldr	r2, [sp, #4]
   10c56:	2a01      	cmp	r2, #1
   10c58:	bf0c      	ite	eq
   10c5a:	3337      	addeq	r3, #55	; 0x37
   10c5c:	3357      	addne	r3, #87	; 0x57
   10c5e:	e7da      	b.n	10c16 <encode_uint+0x46>
		} else if (radix == 16) {
   10c60:	2d10      	cmp	r5, #16
   10c62:	d1ea      	bne.n	10c3a <encode_uint+0x6a>
			conv->altform_0c = true;
   10c64:	78a3      	ldrb	r3, [r4, #2]
   10c66:	f043 0310 	orr.w	r3, r3, #16
   10c6a:	e7e5      	b.n	10c38 <encode_uint+0x68>
   10c6c:	00034540 	.word	0x00034540

00010c70 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
   10c70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c74:	4682      	mov	sl, r0
   10c76:	b093      	sub	sp, #76	; 0x4c
   10c78:	468b      	mov	fp, r1
   10c7a:	4691      	mov	r9, r2
   10c7c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
   10c7e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
   10c80:	f899 0000 	ldrb.w	r0, [r9]
   10c84:	b908      	cbnz	r0, 10c8a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
   10c86:	4628      	mov	r0, r5
   10c88:	e33a      	b.n	11300 <cbvprintf+0x690>
		if (*fp != '%') {
   10c8a:	f109 0301 	add.w	r3, r9, #1
   10c8e:	2825      	cmp	r0, #37	; 0x25
   10c90:	9302      	str	r3, [sp, #8]
   10c92:	d006      	beq.n	10ca2 <cbvprintf+0x32>
			OUTC('%');
   10c94:	4659      	mov	r1, fp
   10c96:	47d0      	blx	sl
   10c98:	2800      	cmp	r0, #0
   10c9a:	f2c0 8331 	blt.w	11300 <cbvprintf+0x690>
   10c9e:	3501      	adds	r5, #1
			break;
   10ca0:	e1f1      	b.n	11086 <cbvprintf+0x416>
		} state = {
   10ca2:	2218      	movs	r2, #24
   10ca4:	2100      	movs	r1, #0
   10ca6:	a80c      	add	r0, sp, #48	; 0x30
   10ca8:	f01b ffcd 	bl	2cc46 <memset>
	if (*sp == '%') {
   10cac:	f899 3001 	ldrb.w	r3, [r9, #1]
   10cb0:	2b25      	cmp	r3, #37	; 0x25
   10cb2:	d059      	beq.n	10d68 <cbvprintf+0xf8>
   10cb4:	9a02      	ldr	r2, [sp, #8]
   10cb6:	4616      	mov	r6, r2
		switch (*sp) {
   10cb8:	f812 3b01 	ldrb.w	r3, [r2], #1
   10cbc:	2b2b      	cmp	r3, #43	; 0x2b
   10cbe:	f000 808b 	beq.w	10dd8 <cbvprintf+0x168>
   10cc2:	d879      	bhi.n	10db8 <cbvprintf+0x148>
   10cc4:	2b20      	cmp	r3, #32
   10cc6:	f000 808c 	beq.w	10de2 <cbvprintf+0x172>
   10cca:	2b23      	cmp	r3, #35	; 0x23
   10ccc:	f000 808e 	beq.w	10dec <cbvprintf+0x17c>
	if (conv->flag_zero && conv->flag_dash) {
   10cd0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10cd4:	f003 0244 	and.w	r2, r3, #68	; 0x44
   10cd8:	2a44      	cmp	r2, #68	; 0x44
   10cda:	d103      	bne.n	10ce4 <cbvprintf+0x74>
		conv->flag_zero = false;
   10cdc:	f36f 1386 	bfc	r3, #6, #1
   10ce0:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	conv->width_present = true;
   10ce4:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10ce8:	9605      	str	r6, [sp, #20]
   10cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   10cee:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	if (*sp == '*') {
   10cf2:	7833      	ldrb	r3, [r6, #0]
   10cf4:	2b2a      	cmp	r3, #42	; 0x2a
   10cf6:	d17e      	bne.n	10df6 <cbvprintf+0x186>
		conv->width_star = true;
   10cf8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   10cfc:	f043 0301 	orr.w	r3, r3, #1
   10d00:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		return ++sp;
   10d04:	1c73      	adds	r3, r6, #1
	sp = extract_prec(conv, sp);
   10d06:	9305      	str	r3, [sp, #20]
	conv->prec_present = (*sp == '.');
   10d08:	781a      	ldrb	r2, [r3, #0]
   10d0a:	2a2e      	cmp	r2, #46	; 0x2e
   10d0c:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10d10:	bf0c      	ite	eq
   10d12:	2101      	moveq	r1, #1
   10d14:	2100      	movne	r1, #0
   10d16:	f361 0241 	bfi	r2, r1, #1, #1
   10d1a:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
   10d1e:	d10b      	bne.n	10d38 <cbvprintf+0xc8>
	++sp;
   10d20:	1c5a      	adds	r2, r3, #1
   10d22:	9205      	str	r2, [sp, #20]
	if (*sp == '*') {
   10d24:	785a      	ldrb	r2, [r3, #1]
   10d26:	2a2a      	cmp	r2, #42	; 0x2a
   10d28:	d17b      	bne.n	10e22 <cbvprintf+0x1b2>
		conv->prec_star = true;
   10d2a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10d2e:	f042 0204 	orr.w	r2, r2, #4
   10d32:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
   10d36:	3302      	adds	r3, #2
	switch (*sp) {
   10d38:	4619      	mov	r1, r3
   10d3a:	f811 0b01 	ldrb.w	r0, [r1], #1
   10d3e:	286c      	cmp	r0, #108	; 0x6c
   10d40:	f000 80b6 	beq.w	10eb0 <cbvprintf+0x240>
   10d44:	d87d      	bhi.n	10e42 <cbvprintf+0x1d2>
   10d46:	2868      	cmp	r0, #104	; 0x68
   10d48:	f000 8084 	beq.w	10e54 <cbvprintf+0x1e4>
   10d4c:	286a      	cmp	r0, #106	; 0x6a
   10d4e:	f000 80b9 	beq.w	10ec4 <cbvprintf+0x254>
   10d52:	284c      	cmp	r0, #76	; 0x4c
   10d54:	f000 80bd 	beq.w	10ed2 <cbvprintf+0x262>
		conv->length_mod = LENGTH_NONE;
   10d58:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10d5c:	f36f 02c6 	bfc	r2, #3, #4
   10d60:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		break;
   10d64:	4619      	mov	r1, r3
   10d66:	e080      	b.n	10e6a <cbvprintf+0x1fa>
		conv->specifier = *sp++;
   10d68:	f109 0202 	add.w	r2, r9, #2
   10d6c:	9202      	str	r2, [sp, #8]
   10d6e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
   10d72:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   10d76:	07d9      	lsls	r1, r3, #31
   10d78:	f140 8149 	bpl.w	1100e <cbvprintf+0x39e>
			width = va_arg(ap, int);
   10d7c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
   10d80:	f1b8 0f00 	cmp.w	r8, #0
   10d84:	da07      	bge.n	10d96 <cbvprintf+0x126>
				conv->flag_dash = true;
   10d86:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   10d8a:	f042 0204 	orr.w	r2, r2, #4
   10d8e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
   10d92:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
   10d96:	075a      	lsls	r2, r3, #29
   10d98:	f140 8142 	bpl.w	11020 <cbvprintf+0x3b0>
			int arg = va_arg(ap, int);
   10d9c:	f854 7b04 	ldr.w	r7, [r4], #4
			if (arg < 0) {
   10da0:	2f00      	cmp	r7, #0
   10da2:	f280 8141 	bge.w	11028 <cbvprintf+0x3b8>
				conv->prec_present = false;
   10da6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   10daa:	f36f 0341 	bfc	r3, #1, #1
   10dae:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
   10db2:	f04f 37ff 	mov.w	r7, #4294967295
   10db6:	e137      	b.n	11028 <cbvprintf+0x3b8>
		switch (*sp) {
   10db8:	2b2d      	cmp	r3, #45	; 0x2d
   10dba:	d006      	beq.n	10dca <cbvprintf+0x15a>
   10dbc:	2b30      	cmp	r3, #48	; 0x30
   10dbe:	d187      	bne.n	10cd0 <cbvprintf+0x60>
			conv->flag_zero = true;
   10dc0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   10dc8:	e003      	b.n	10dd2 <cbvprintf+0x162>
			conv->flag_dash = true;
   10dca:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10dce:	f043 0304 	orr.w	r3, r3, #4
			conv->flag_zero = true;
   10dd2:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
			break;
   10dd6:	e76e      	b.n	10cb6 <cbvprintf+0x46>
			conv->flag_plus = true;
   10dd8:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10ddc:	f043 0308 	orr.w	r3, r3, #8
   10de0:	e7f7      	b.n	10dd2 <cbvprintf+0x162>
			conv->flag_space = true;
   10de2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10de6:	f043 0310 	orr.w	r3, r3, #16
   10dea:	e7f2      	b.n	10dd2 <cbvprintf+0x162>
			conv->flag_hash = true;
   10dec:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   10df0:	f043 0320 	orr.w	r3, r3, #32
   10df4:	e7ed      	b.n	10dd2 <cbvprintf+0x162>
	size_t width = extract_decimal(&sp);
   10df6:	a805      	add	r0, sp, #20
   10df8:	f7ff fed4 	bl	10ba4 <extract_decimal>
	if (sp != wp) {
   10dfc:	9b05      	ldr	r3, [sp, #20]
   10dfe:	42b3      	cmp	r3, r6
   10e00:	d081      	beq.n	10d06 <cbvprintf+0x96>
		conv->unsupported |= ((conv->width_value < 0)
   10e02:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
   10e06:	900f      	str	r0, [sp, #60]	; 0x3c
		conv->unsupported |= ((conv->width_value < 0)
   10e08:	f3c1 0240 	ubfx	r2, r1, #1, #1
   10e0c:	ea42 72d0 	orr.w	r2, r2, r0, lsr #31
   10e10:	0052      	lsls	r2, r2, #1
   10e12:	f062 027f 	orn	r2, r2, #127	; 0x7f
   10e16:	f001 017d 	and.w	r1, r1, #125	; 0x7d
   10e1a:	430a      	orrs	r2, r1
   10e1c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
   10e20:	e771      	b.n	10d06 <cbvprintf+0x96>
	size_t prec = extract_decimal(&sp);
   10e22:	a805      	add	r0, sp, #20
   10e24:	f7ff febe 	bl	10ba4 <extract_decimal>
	conv->unsupported |= ((conv->prec_value < 0)
   10e28:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
	conv->prec_value = prec;
   10e2c:	9010      	str	r0, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
   10e2e:	f3c3 0240 	ubfx	r2, r3, #1, #1
   10e32:	ea42 70d0 	orr.w	r0, r2, r0, lsr #31
   10e36:	f360 0341 	bfi	r3, r0, #1, #1
   10e3a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	return sp;
   10e3e:	9b05      	ldr	r3, [sp, #20]
   10e40:	e77a      	b.n	10d38 <cbvprintf+0xc8>
	switch (*sp) {
   10e42:	2874      	cmp	r0, #116	; 0x74
   10e44:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10e48:	d040      	beq.n	10ecc <cbvprintf+0x25c>
   10e4a:	287a      	cmp	r0, #122	; 0x7a
   10e4c:	d184      	bne.n	10d58 <cbvprintf+0xe8>
		conv->length_mod = LENGTH_Z;
   10e4e:	4613      	mov	r3, r2
   10e50:	2206      	movs	r2, #6
   10e52:	e028      	b.n	10ea6 <cbvprintf+0x236>
		if (*++sp == 'h') {
   10e54:	785a      	ldrb	r2, [r3, #1]
   10e56:	2a68      	cmp	r2, #104	; 0x68
   10e58:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10e5c:	d121      	bne.n	10ea2 <cbvprintf+0x232>
			conv->length_mod = LENGTH_HH;
   10e5e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
   10e60:	f361 02c6 	bfi	r2, r1, #3, #4
   10e64:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
   10e68:	1c99      	adds	r1, r3, #2
	conv->specifier = *sp++;
   10e6a:	460b      	mov	r3, r1
   10e6c:	f813 2b01 	ldrb.w	r2, [r3], #1
   10e70:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
   10e72:	2a78      	cmp	r2, #120	; 0x78
   10e74:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
	conv->specifier = *sp++;
   10e78:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
   10e7c:	f200 80bf 	bhi.w	10ffe <cbvprintf+0x38e>
   10e80:	2a57      	cmp	r2, #87	; 0x57
   10e82:	d833      	bhi.n	10eec <cbvprintf+0x27c>
   10e84:	2a41      	cmp	r2, #65	; 0x41
   10e86:	d003      	beq.n	10e90 <cbvprintf+0x220>
   10e88:	3a45      	subs	r2, #69	; 0x45
   10e8a:	2a02      	cmp	r2, #2
   10e8c:	f200 80b7 	bhi.w	10ffe <cbvprintf+0x38e>
		conv->specifier_cat = SPECIFIER_FP;
   10e90:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   10e94:	2204      	movs	r2, #4
   10e96:	f362 0302 	bfi	r3, r2, #0, #3
   10e9a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			unsupported = true;
   10e9e:	2301      	movs	r3, #1
			break;
   10ea0:	e084      	b.n	10fac <cbvprintf+0x33c>
			conv->length_mod = LENGTH_H;
   10ea2:	4613      	mov	r3, r2
   10ea4:	2202      	movs	r2, #2
			conv->length_mod = LENGTH_L;
   10ea6:	f362 03c6 	bfi	r3, r2, #3, #4
   10eaa:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
   10eae:	e7dc      	b.n	10e6a <cbvprintf+0x1fa>
		if (*++sp == 'l') {
   10eb0:	785a      	ldrb	r2, [r3, #1]
   10eb2:	2a6c      	cmp	r2, #108	; 0x6c
   10eb4:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
   10eb8:	d101      	bne.n	10ebe <cbvprintf+0x24e>
			conv->length_mod = LENGTH_LL;
   10eba:	2104      	movs	r1, #4
   10ebc:	e7d0      	b.n	10e60 <cbvprintf+0x1f0>
			conv->length_mod = LENGTH_L;
   10ebe:	4613      	mov	r3, r2
   10ec0:	2203      	movs	r2, #3
   10ec2:	e7f0      	b.n	10ea6 <cbvprintf+0x236>
		conv->length_mod = LENGTH_J;
   10ec4:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
   10ec8:	2205      	movs	r2, #5
   10eca:	e7ec      	b.n	10ea6 <cbvprintf+0x236>
		conv->length_mod = LENGTH_T;
   10ecc:	4613      	mov	r3, r2
   10ece:	2207      	movs	r2, #7
   10ed0:	e7e9      	b.n	10ea6 <cbvprintf+0x236>
		conv->unsupported = true;
   10ed2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   10ed6:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
   10eda:	f023 0302 	bic.w	r3, r3, #2
   10ede:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
   10ee2:	f043 0302 	orr.w	r3, r3, #2
   10ee6:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
   10eea:	e7be      	b.n	10e6a <cbvprintf+0x1fa>
   10eec:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
   10ef0:	2920      	cmp	r1, #32
   10ef2:	f200 8084 	bhi.w	10ffe <cbvprintf+0x38e>
   10ef6:	a001      	add	r0, pc, #4	; (adr r0, 10efc <cbvprintf+0x28c>)
   10ef8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
   10efc:	00010fc1 	.word	0x00010fc1
   10f00:	00010fff 	.word	0x00010fff
   10f04:	00010fff 	.word	0x00010fff
   10f08:	00010fff 	.word	0x00010fff
   10f0c:	00010fff 	.word	0x00010fff
   10f10:	00010fff 	.word	0x00010fff
   10f14:	00010fff 	.word	0x00010fff
   10f18:	00010fff 	.word	0x00010fff
   10f1c:	00010fff 	.word	0x00010fff
   10f20:	00010e91 	.word	0x00010e91
   10f24:	00010fff 	.word	0x00010fff
   10f28:	00010fc1 	.word	0x00010fc1
   10f2c:	00010f81 	.word	0x00010f81
   10f30:	00010e91 	.word	0x00010e91
   10f34:	00010e91 	.word	0x00010e91
   10f38:	00010e91 	.word	0x00010e91
   10f3c:	00010fff 	.word	0x00010fff
   10f40:	00010f81 	.word	0x00010f81
   10f44:	00010fff 	.word	0x00010fff
   10f48:	00010fff 	.word	0x00010fff
   10f4c:	00010fff 	.word	0x00010fff
   10f50:	00010fff 	.word	0x00010fff
   10f54:	00010fc9 	.word	0x00010fc9
   10f58:	00010fc1 	.word	0x00010fc1
   10f5c:	00010fe5 	.word	0x00010fe5
   10f60:	00010fff 	.word	0x00010fff
   10f64:	00010fff 	.word	0x00010fff
   10f68:	00010fe5 	.word	0x00010fe5
   10f6c:	00010fff 	.word	0x00010fff
   10f70:	00010fc1 	.word	0x00010fc1
   10f74:	00010fff 	.word	0x00010fff
   10f78:	00010fff 	.word	0x00010fff
   10f7c:	00010fc1 	.word	0x00010fc1
		conv->specifier_cat = SPECIFIER_SINT;
   10f80:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   10f84:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
   10f86:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
   10f8a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10f8e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
   10f90:	f88d 103a 	strb.w	r1, [sp, #58]	; 0x3a
			conv->invalid = true;
   10f94:	bf02      	ittt	eq
   10f96:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
   10f9a:	f041 0101 	orreq.w	r1, r1, #1
   10f9e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
   10fa2:	2a63      	cmp	r2, #99	; 0x63
   10fa4:	d131      	bne.n	1100a <cbvprintf+0x39a>
			unsupported = (conv->length_mod != LENGTH_NONE);
   10fa6:	3b00      	subs	r3, #0
   10fa8:	bf18      	it	ne
   10faa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
   10fac:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   10fb0:	f3c2 0140 	ubfx	r1, r2, #1, #1
   10fb4:	430b      	orrs	r3, r1
   10fb6:	f363 0241 	bfi	r2, r3, #1, #1
   10fba:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
   10fbe:	e6d8      	b.n	10d72 <cbvprintf+0x102>
		conv->specifier_cat = SPECIFIER_UINT;
   10fc0:	f89d 103a 	ldrb.w	r1, [sp, #58]	; 0x3a
   10fc4:	2002      	movs	r0, #2
   10fc6:	e7de      	b.n	10f86 <cbvprintf+0x316>
		conv->specifier_cat = SPECIFIER_PTR;
   10fc8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   10fcc:	f003 0378 	and.w	r3, r3, #120	; 0x78
   10fd0:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
   10fd4:	2103      	movs	r1, #3
   10fd6:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
   10fda:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
   10fdc:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
   10fe0:	4143      	adcs	r3, r0
   10fe2:	e7e3      	b.n	10fac <cbvprintf+0x33c>
		conv->specifier_cat = SPECIFIER_PTR;
   10fe4:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   10fe8:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
   10fea:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
   10fee:	f361 0202 	bfi	r2, r1, #0, #3
   10ff2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
   10ff6:	bf14      	ite	ne
   10ff8:	2301      	movne	r3, #1
   10ffa:	2300      	moveq	r3, #0
   10ffc:	e7d6      	b.n	10fac <cbvprintf+0x33c>
		conv->invalid = true;
   10ffe:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   11002:	f043 0301 	orr.w	r3, r3, #1
   11006:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
	bool unsupported = false;
   1100a:	2300      	movs	r3, #0
   1100c:	e7ce      	b.n	10fac <cbvprintf+0x33c>
		} else if (conv->width_present) {
   1100e:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
   11012:	2a00      	cmp	r2, #0
			width = conv->width_value;
   11014:	bfb4      	ite	lt
   11016:	f8dd 803c 	ldrlt.w	r8, [sp, #60]	; 0x3c
		int width = -1;
   1101a:	f04f 38ff 	movge.w	r8, #4294967295
   1101e:	e6ba      	b.n	10d96 <cbvprintf+0x126>
		} else if (conv->prec_present) {
   11020:	079f      	lsls	r7, r3, #30
   11022:	f57f aec6 	bpl.w	10db2 <cbvprintf+0x142>
			precision = conv->prec_value;
   11026:	9f10      	ldr	r7, [sp, #64]	; 0x40
			= (enum length_mod_enum)conv->length_mod;
   11028:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->pad0_value = 0;
   1102c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
   1102e:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
			= (enum specifier_cat_enum)conv->specifier_cat;
   11032:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		enum specifier_cat_enum specifier_cat
   11036:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
   1103a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
   1103c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
   11040:	d137      	bne.n	110b2 <cbvprintf+0x442>
			switch (length_mod) {
   11042:	1ecb      	subs	r3, r1, #3
   11044:	2b04      	cmp	r3, #4
   11046:	d821      	bhi.n	1108c <cbvprintf+0x41c>
   11048:	e8df f003 	tbb	[pc, r3]
   1104c:	20070703 	.word	0x20070703
   11050:	20          	.byte	0x20
   11051:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
   11052:	f854 2b04 	ldr.w	r2, [r4], #4
				value->sint = (short)value->sint;
   11056:	17d3      	asrs	r3, r2, #31
   11058:	e004      	b.n	11064 <cbvprintf+0x3f4>
					(sint_value_type)va_arg(ap, intmax_t);
   1105a:	3407      	adds	r4, #7
   1105c:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
   11060:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->sint = (short)value->sint;
   11064:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
   11068:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
   1106c:	f013 0603 	ands.w	r6, r3, #3
   11070:	d055      	beq.n	1111e <cbvprintf+0x4ae>
			OUTS(sp, fp);
   11072:	9b02      	ldr	r3, [sp, #8]
   11074:	464a      	mov	r2, r9
   11076:	4659      	mov	r1, fp
   11078:	4650      	mov	r0, sl
   1107a:	f017 ff2a 	bl	28ed2 <outs>
   1107e:	2800      	cmp	r0, #0
   11080:	f2c0 813e 	blt.w	11300 <cbvprintf+0x690>
   11084:	4405      	add	r5, r0
			OUTS(bps, bpe);
   11086:	f8dd 9008 	ldr.w	r9, [sp, #8]
   1108a:	e5f9      	b.n	10c80 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
   1108c:	f854 2b04 	ldr.w	r2, [r4], #4
			if (length_mod == LENGTH_HH) {
   11090:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
   11092:	ea4f 73e2 	mov.w	r3, r2, asr #31
   11096:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   1109a:	d105      	bne.n	110a8 <cbvprintf+0x438>
				value->uint = (unsigned char)value->uint;
   1109c:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
   110a0:	930c      	str	r3, [sp, #48]	; 0x30
   110a2:	2300      	movs	r3, #0
   110a4:	930d      	str	r3, [sp, #52]	; 0x34
   110a6:	e7df      	b.n	11068 <cbvprintf+0x3f8>
			} else if (length_mod == LENGTH_H) {
   110a8:	2902      	cmp	r1, #2
   110aa:	d1dd      	bne.n	11068 <cbvprintf+0x3f8>
				value->sint = (short)value->sint;
   110ac:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	; 0x30
   110b0:	e7d1      	b.n	11056 <cbvprintf+0x3e6>
		} else if (specifier_cat == SPECIFIER_UINT) {
   110b2:	2b02      	cmp	r3, #2
   110b4:	d123      	bne.n	110fe <cbvprintf+0x48e>
			switch (length_mod) {
   110b6:	1ecb      	subs	r3, r1, #3
   110b8:	2b04      	cmp	r3, #4
   110ba:	d813      	bhi.n	110e4 <cbvprintf+0x474>
   110bc:	e8df f003 	tbb	[pc, r3]
   110c0:	120a0a03 	.word	0x120a0a03
   110c4:	12          	.byte	0x12
   110c5:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
   110c6:	6822      	ldr	r2, [r4, #0]
   110c8:	920c      	str	r2, [sp, #48]	; 0x30
   110ca:	2300      	movs	r3, #0
   110cc:	1d20      	adds	r0, r4, #4
   110ce:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
   110d0:	4604      	mov	r4, r0
   110d2:	e7c9      	b.n	11068 <cbvprintf+0x3f8>
					(uint_value_type)va_arg(ap,
   110d4:	3407      	adds	r4, #7
   110d6:	f024 0007 	bic.w	r0, r4, #7
				value->uint =
   110da:	e8f0 2302 	ldrd	r2, r3, [r0], #8
   110de:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
   110e2:	e7f5      	b.n	110d0 <cbvprintf+0x460>
					(uint_value_type)va_arg(ap, size_t);
   110e4:	f854 3b04 	ldr.w	r3, [r4], #4
   110e8:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
   110ea:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
   110ec:	f04f 0300 	mov.w	r3, #0
   110f0:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
   110f2:	d0d3      	beq.n	1109c <cbvprintf+0x42c>
			} else if (length_mod == LENGTH_H) {
   110f4:	2902      	cmp	r1, #2
   110f6:	d1b7      	bne.n	11068 <cbvprintf+0x3f8>
				value->uint = (unsigned short)value->uint;
   110f8:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
   110fc:	e7d0      	b.n	110a0 <cbvprintf+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
   110fe:	2b04      	cmp	r3, #4
   11100:	d107      	bne.n	11112 <cbvprintf+0x4a2>
			if (length_mod == LENGTH_UPPER_L) {
   11102:	3407      	adds	r4, #7
   11104:	f024 0407 	bic.w	r4, r4, #7
   11108:	e8f4 2302 	ldrd	r2, r3, [r4], #8
				value->ldbl = va_arg(ap, long double);
   1110c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
   11110:	e7aa      	b.n	11068 <cbvprintf+0x3f8>
		} else if (specifier_cat == SPECIFIER_PTR) {
   11112:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
   11114:	bf04      	itt	eq
   11116:	f854 3b04 	ldreq.w	r3, [r4], #4
   1111a:	930c      	streq	r3, [sp, #48]	; 0x30
   1111c:	e7a4      	b.n	11068 <cbvprintf+0x3f8>
		switch (conv->specifier) {
   1111e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   11122:	2878      	cmp	r0, #120	; 0x78
   11124:	d8af      	bhi.n	11086 <cbvprintf+0x416>
   11126:	2862      	cmp	r0, #98	; 0x62
   11128:	d820      	bhi.n	1116c <cbvprintf+0x4fc>
   1112a:	2825      	cmp	r0, #37	; 0x25
   1112c:	f43f adb2 	beq.w	10c94 <cbvprintf+0x24>
   11130:	2858      	cmp	r0, #88	; 0x58
   11132:	d1a8      	bne.n	11086 <cbvprintf+0x416>
			bps = encode_uint(value->uint, conv, buf, bpe);
   11134:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   11138:	9300      	str	r3, [sp, #0]
   1113a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
   1113e:	ab06      	add	r3, sp, #24
   11140:	aa0e      	add	r2, sp, #56	; 0x38
   11142:	f7ff fd45 	bl	10bd0 <encode_uint>
   11146:	4681      	mov	r9, r0
			if (precision >= 0) {
   11148:	2f00      	cmp	r7, #0
   1114a:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1114e:	db0b      	blt.n	11168 <cbvprintf+0x4f8>
				conv->flag_zero = false;
   11150:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
				size_t len = bpe - bps;
   11154:	eba0 0309 	sub.w	r3, r0, r9
				conv->flag_zero = false;
   11158:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
   1115c:	429f      	cmp	r7, r3
				conv->flag_zero = false;
   1115e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
   11162:	d901      	bls.n	11168 <cbvprintf+0x4f8>
					conv->pad0_value = precision - (int)len;
   11164:	1aff      	subs	r7, r7, r3
   11166:	970f      	str	r7, [sp, #60]	; 0x3c
		const char *bpe = buf + sizeof(buf);
   11168:	4607      	mov	r7, r0
   1116a:	e03c      	b.n	111e6 <cbvprintf+0x576>
   1116c:	3863      	subs	r0, #99	; 0x63
   1116e:	2815      	cmp	r0, #21
   11170:	d889      	bhi.n	11086 <cbvprintf+0x416>
   11172:	a201      	add	r2, pc, #4	; (adr r2, 11178 <cbvprintf+0x508>)
   11174:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
   11178:	000111f7 	.word	0x000111f7
   1117c:	00011259 	.word	0x00011259
   11180:	00011087 	.word	0x00011087
   11184:	00011087 	.word	0x00011087
   11188:	00011087 	.word	0x00011087
   1118c:	00011087 	.word	0x00011087
   11190:	00011259 	.word	0x00011259
   11194:	00011087 	.word	0x00011087
   11198:	00011087 	.word	0x00011087
   1119c:	00011087 	.word	0x00011087
   111a0:	00011087 	.word	0x00011087
   111a4:	000112b7 	.word	0x000112b7
   111a8:	00011285 	.word	0x00011285
   111ac:	00011289 	.word	0x00011289
   111b0:	00011087 	.word	0x00011087
   111b4:	00011087 	.word	0x00011087
   111b8:	000111d1 	.word	0x000111d1
   111bc:	00011087 	.word	0x00011087
   111c0:	00011285 	.word	0x00011285
   111c4:	00011087 	.word	0x00011087
   111c8:	00011087 	.word	0x00011087
   111cc:	00011285 	.word	0x00011285
			if (precision >= 0) {
   111d0:	2f00      	cmp	r7, #0
			bps = (const char *)value->ptr;
   111d2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
			if (precision >= 0) {
   111d6:	db0a      	blt.n	111ee <cbvprintf+0x57e>
				len = strnlen(bps, precision);
   111d8:	4639      	mov	r1, r7
   111da:	4648      	mov	r0, r9
   111dc:	f01b fd75 	bl	2ccca <strnlen>
			bpe = bps + len;
   111e0:	eb09 0700 	add.w	r7, r9, r0
		char sign = 0;
   111e4:	2600      	movs	r6, #0
		if (bps == NULL) {
   111e6:	f1b9 0f00 	cmp.w	r9, #0
   111ea:	d10c      	bne.n	11206 <cbvprintf+0x596>
   111ec:	e74b      	b.n	11086 <cbvprintf+0x416>
				len = strlen(bps);
   111ee:	4648      	mov	r0, r9
   111f0:	f7fb f8e0 	bl	c3b4 <strlen>
   111f4:	e7f4      	b.n	111e0 <cbvprintf+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
   111f6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   111f8:	f88d 3018 	strb.w	r3, [sp, #24]
			break;
   111fc:	2600      	movs	r6, #0
			bpe = buf + 1;
   111fe:	f10d 0719 	add.w	r7, sp, #25
			bps = buf;
   11202:	f10d 0918 	add.w	r9, sp, #24
		size_t nj_len = (bpe - bps);
   11206:	eba7 0309 	sub.w	r3, r7, r9
		if (sign != 0) {
   1120a:	b106      	cbz	r6, 1120e <cbvprintf+0x59e>
			nj_len += 1U;
   1120c:	3301      	adds	r3, #1
		if (conv->altform_0c) {
   1120e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
   11212:	06d0      	lsls	r0, r2, #27
   11214:	d569      	bpl.n	112ea <cbvprintf+0x67a>
			nj_len += 2U;
   11216:	3302      	adds	r3, #2
		if (conv->pad_fp) {
   11218:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
   1121a:	990f      	ldr	r1, [sp, #60]	; 0x3c
			nj_len += conv->pad0_pre_exp;
   1121c:	bf48      	it	mi
   1121e:	9a10      	ldrmi	r2, [sp, #64]	; 0x40
		nj_len += conv->pad0_value;
   11220:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
   11222:	bf48      	it	mi
   11224:	189b      	addmi	r3, r3, r2
		if (width > 0) {
   11226:	f1b8 0f00 	cmp.w	r8, #0
   1122a:	dd76      	ble.n	1131a <cbvprintf+0x6aa>
			if (!conv->flag_dash) {
   1122c:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
			width -= (int)nj_len;
   11230:	eba8 0803 	sub.w	r8, r8, r3
			if (!conv->flag_dash) {
   11234:	f3c2 0380 	ubfx	r3, r2, #2, #1
   11238:	9303      	str	r3, [sp, #12]
   1123a:	0753      	lsls	r3, r2, #29
   1123c:	d46d      	bmi.n	1131a <cbvprintf+0x6aa>
				if (conv->flag_zero) {
   1123e:	0650      	lsls	r0, r2, #25
   11240:	d561      	bpl.n	11306 <cbvprintf+0x696>
					if (sign != 0) {
   11242:	b13e      	cbz	r6, 11254 <cbvprintf+0x5e4>
						OUTC(sign);
   11244:	4659      	mov	r1, fp
   11246:	4630      	mov	r0, r6
   11248:	47d0      	blx	sl
   1124a:	2800      	cmp	r0, #0
   1124c:	db58      	blt.n	11300 <cbvprintf+0x690>
						sign = 0;
   1124e:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
   11250:	3501      	adds	r5, #1
						sign = 0;
   11252:	461e      	mov	r6, r3
					pad = '0';
   11254:	2330      	movs	r3, #48	; 0x30
   11256:	e057      	b.n	11308 <cbvprintf+0x698>
			if (conv->flag_plus) {
   11258:	071e      	lsls	r6, r3, #28
   1125a:	d411      	bmi.n	11280 <cbvprintf+0x610>
				sign = ' ';
   1125c:	f013 0610 	ands.w	r6, r3, #16
   11260:	bf18      	it	ne
   11262:	2620      	movne	r6, #32
			sint = value->sint;
   11264:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
   11268:	2a00      	cmp	r2, #0
   1126a:	f173 0100 	sbcs.w	r1, r3, #0
   1126e:	f6bf af61 	bge.w	11134 <cbvprintf+0x4c4>
				value->uint = (uint_value_type)-sint;
   11272:	4252      	negs	r2, r2
   11274:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   11278:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
   1127c:	262d      	movs	r6, #45	; 0x2d
   1127e:	e759      	b.n	11134 <cbvprintf+0x4c4>
				sign = '+';
   11280:	262b      	movs	r6, #43	; 0x2b
   11282:	e7ef      	b.n	11264 <cbvprintf+0x5f4>
		switch (conv->specifier) {
   11284:	2600      	movs	r6, #0
   11286:	e755      	b.n	11134 <cbvprintf+0x4c4>
			if (value->ptr != NULL) {
   11288:	980c      	ldr	r0, [sp, #48]	; 0x30
   1128a:	b348      	cbz	r0, 112e0 <cbvprintf+0x670>
				bps = encode_uint((uintptr_t)value->ptr, conv,
   1128c:	f10d 032e 	add.w	r3, sp, #46	; 0x2e
   11290:	9300      	str	r3, [sp, #0]
   11292:	aa0e      	add	r2, sp, #56	; 0x38
   11294:	ab06      	add	r3, sp, #24
   11296:	2100      	movs	r1, #0
   11298:	f7ff fc9a 	bl	10bd0 <encode_uint>
				conv->altform_0c = true;
   1129c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
   112a0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
   112a4:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
   112a8:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
   112ac:	4681      	mov	r9, r0
				conv->altform_0c = true;
   112ae:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
   112b2:	2600      	movs	r6, #0
				goto prec_int_pad0;
   112b4:	e748      	b.n	11148 <cbvprintf+0x4d8>
				store_count(conv, value->ptr, count);
   112b6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
   112b8:	2907      	cmp	r1, #7
   112ba:	f63f aee4 	bhi.w	11086 <cbvprintf+0x416>
   112be:	e8df f001 	tbb	[pc, r1]
   112c2:	040d      	.short	0x040d
   112c4:	08080d06 	.word	0x08080d06
   112c8:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
   112ca:	701d      	strb	r5, [r3, #0]
		break;
   112cc:	e6db      	b.n	11086 <cbvprintf+0x416>
		*(short *)dp = (short)count;
   112ce:	801d      	strh	r5, [r3, #0]
		break;
   112d0:	e6d9      	b.n	11086 <cbvprintf+0x416>
		*(intmax_t *)dp = (intmax_t)count;
   112d2:	4628      	mov	r0, r5
   112d4:	17e9      	asrs	r1, r5, #31
   112d6:	e9c3 0100 	strd	r0, r1, [r3]
		break;
   112da:	e6d4      	b.n	11086 <cbvprintf+0x416>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
   112dc:	601d      	str	r5, [r3, #0]
		break;
   112de:	e6d2      	b.n	11086 <cbvprintf+0x416>
			bpe = bps + 5;
   112e0:	4f2e      	ldr	r7, [pc, #184]	; (1139c <cbvprintf+0x72c>)
   112e2:	4606      	mov	r6, r0
			bps = "(nil)";
   112e4:	f1a7 0905 	sub.w	r9, r7, #5
   112e8:	e78d      	b.n	11206 <cbvprintf+0x596>
		} else if (conv->altform_0) {
   112ea:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
   112ec:	bf48      	it	mi
   112ee:	3301      	addmi	r3, #1
   112f0:	e792      	b.n	11218 <cbvprintf+0x5a8>
					OUTC(pad);
   112f2:	4618      	mov	r0, r3
   112f4:	4659      	mov	r1, fp
   112f6:	9303      	str	r3, [sp, #12]
   112f8:	47d0      	blx	sl
   112fa:	2800      	cmp	r0, #0
   112fc:	9b03      	ldr	r3, [sp, #12]
   112fe:	da04      	bge.n	1130a <cbvprintf+0x69a>
#undef OUTS
#undef OUTC
}
   11300:	b013      	add	sp, #76	; 0x4c
   11302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
   11306:	2320      	movs	r3, #32
   11308:	4445      	add	r5, r8
   1130a:	4642      	mov	r2, r8
				while (width-- > 0) {
   1130c:	2a00      	cmp	r2, #0
   1130e:	eba5 0108 	sub.w	r1, r5, r8
   11312:	f108 38ff 	add.w	r8, r8, #4294967295
   11316:	dcec      	bgt.n	112f2 <cbvprintf+0x682>
   11318:	460d      	mov	r5, r1
		if (sign != 0) {
   1131a:	b12e      	cbz	r6, 11328 <cbvprintf+0x6b8>
			OUTC(sign);
   1131c:	4659      	mov	r1, fp
   1131e:	4630      	mov	r0, r6
   11320:	47d0      	blx	sl
   11322:	2800      	cmp	r0, #0
   11324:	dbec      	blt.n	11300 <cbvprintf+0x690>
   11326:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
   11328:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   1132c:	06d9      	lsls	r1, r3, #27
   1132e:	d401      	bmi.n	11334 <cbvprintf+0x6c4>
   11330:	071a      	lsls	r2, r3, #28
   11332:	d505      	bpl.n	11340 <cbvprintf+0x6d0>
				OUTC('0');
   11334:	4659      	mov	r1, fp
   11336:	2030      	movs	r0, #48	; 0x30
   11338:	47d0      	blx	sl
   1133a:	2800      	cmp	r0, #0
   1133c:	dbe0      	blt.n	11300 <cbvprintf+0x690>
   1133e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
   11340:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
   11344:	06db      	lsls	r3, r3, #27
   11346:	d506      	bpl.n	11356 <cbvprintf+0x6e6>
				OUTC(conv->specifier);
   11348:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
   1134c:	4659      	mov	r1, fp
   1134e:	47d0      	blx	sl
   11350:	2800      	cmp	r0, #0
   11352:	dbd5      	blt.n	11300 <cbvprintf+0x690>
   11354:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
   11356:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   11358:	442e      	add	r6, r5
   1135a:	1b73      	subs	r3, r6, r5
   1135c:	2b00      	cmp	r3, #0
   1135e:	dc15      	bgt.n	1138c <cbvprintf+0x71c>
			OUTS(bps, bpe);
   11360:	463b      	mov	r3, r7
   11362:	464a      	mov	r2, r9
   11364:	4659      	mov	r1, fp
   11366:	4650      	mov	r0, sl
   11368:	f017 fdb3 	bl	28ed2 <outs>
   1136c:	2800      	cmp	r0, #0
   1136e:	dbc7      	blt.n	11300 <cbvprintf+0x690>
   11370:	4405      	add	r5, r0
		while (width > 0) {
   11372:	44a8      	add	r8, r5
   11374:	eba8 0305 	sub.w	r3, r8, r5
   11378:	2b00      	cmp	r3, #0
   1137a:	f77f ae84 	ble.w	11086 <cbvprintf+0x416>
			OUTC(' ');
   1137e:	4659      	mov	r1, fp
   11380:	2020      	movs	r0, #32
   11382:	47d0      	blx	sl
   11384:	2800      	cmp	r0, #0
   11386:	dbbb      	blt.n	11300 <cbvprintf+0x690>
   11388:	3501      	adds	r5, #1
			--width;
   1138a:	e7f3      	b.n	11374 <cbvprintf+0x704>
				OUTC('0');
   1138c:	4659      	mov	r1, fp
   1138e:	2030      	movs	r0, #48	; 0x30
   11390:	47d0      	blx	sl
   11392:	2800      	cmp	r0, #0
   11394:	dbb4      	blt.n	11300 <cbvprintf+0x690>
   11396:	3501      	adds	r5, #1
   11398:	e7df      	b.n	1135a <cbvprintf+0x6ea>
   1139a:	bf00      	nop
   1139c:	0002ec41 	.word	0x0002ec41

000113a0 <ring_buf_put>:

	return 0;
}

uint32_t ring_buf_put(struct ring_buf *buf, const uint8_t *data, uint32_t size)
{
   113a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   113a4:	4680      	mov	r8, r0
   113a6:	460e      	mov	r6, r1
   113a8:	4615      	mov	r5, r2
	uint8_t *dst;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   113aa:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_put_claim(buf, &dst, size);
   113ac:	462a      	mov	r2, r5
   113ae:	a901      	add	r1, sp, #4
   113b0:	4640      	mov	r0, r8
   113b2:	f017 fdb7 	bl	28f24 <ring_buf_put_claim>
   113b6:	4631      	mov	r1, r6
   113b8:	4604      	mov	r4, r0
   113ba:	4602      	mov	r2, r0
   113bc:	9801      	ldr	r0, [sp, #4]
   113be:	f01b fc1a 	bl	2cbf6 <memcpy>
		memcpy(dst, data, partial_size);
		total_size += partial_size;
		size -= partial_size;
		data += partial_size;
	} while (size && partial_size);
   113c2:	1b2d      	subs	r5, r5, r4
		total_size += partial_size;
   113c4:	4427      	add	r7, r4
		data += partial_size;
   113c6:	4426      	add	r6, r4
	} while (size && partial_size);
   113c8:	d001      	beq.n	113ce <ring_buf_put+0x2e>
   113ca:	2c00      	cmp	r4, #0
   113cc:	d1ee      	bne.n	113ac <ring_buf_put+0xc>

	err = ring_buf_put_finish(buf, total_size);
   113ce:	4639      	mov	r1, r7
   113d0:	4640      	mov	r0, r8
   113d2:	f017 fdc3 	bl	28f5c <ring_buf_put_finish>
	__ASSERT_NO_MSG(err == 0);
   113d6:	b148      	cbz	r0, 113ec <ring_buf_put+0x4c>
   113d8:	4906      	ldr	r1, [pc, #24]	; (113f4 <ring_buf_put+0x54>)
   113da:	4807      	ldr	r0, [pc, #28]	; (113f8 <ring_buf_put+0x58>)
   113dc:	4a07      	ldr	r2, [pc, #28]	; (113fc <ring_buf_put+0x5c>)
   113de:	23e8      	movs	r3, #232	; 0xe8
   113e0:	f017 fbdb 	bl	28b9a <printk>
   113e4:	4805      	ldr	r0, [pc, #20]	; (113fc <ring_buf_put+0x5c>)
   113e6:	21e8      	movs	r1, #232	; 0xe8
   113e8:	f017 fe18 	bl	2901c <assert_post_action>

	return total_size;
}
   113ec:	4638      	mov	r0, r7
   113ee:	b002      	add	sp, #8
   113f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   113f4:	0002ec6a 	.word	0x0002ec6a
   113f8:	0002e93e 	.word	0x0002e93e
   113fc:	0002ec42 	.word	0x0002ec42

00011400 <ring_buf_get>:

	return 0;
}

uint32_t ring_buf_get(struct ring_buf *buf, uint8_t *data, uint32_t size)
{
   11400:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   11404:	4680      	mov	r8, r0
   11406:	460d      	mov	r5, r1
   11408:	4616      	mov	r6, r2
	uint8_t *src;
	uint32_t partial_size;
	uint32_t total_size = 0U;
   1140a:	2700      	movs	r7, #0
	int err;

	do {
		partial_size = ring_buf_get_claim(buf, &src, size);
   1140c:	4632      	mov	r2, r6
   1140e:	a901      	add	r1, sp, #4
   11410:	4640      	mov	r0, r8
   11412:	f017 fdbd 	bl	28f90 <ring_buf_get_claim>
   11416:	4604      	mov	r4, r0
		if (data) {
   11418:	b12d      	cbz	r5, 11426 <ring_buf_get+0x26>
   1141a:	4602      	mov	r2, r0
   1141c:	9901      	ldr	r1, [sp, #4]
   1141e:	4628      	mov	r0, r5
   11420:	f01b fbe9 	bl	2cbf6 <memcpy>
			memcpy(data, src, partial_size);
			data += partial_size;
   11424:	4425      	add	r5, r4
		}
		total_size += partial_size;
		size -= partial_size;
	} while (size && partial_size);
   11426:	1b36      	subs	r6, r6, r4
		total_size += partial_size;
   11428:	4427      	add	r7, r4
	} while (size && partial_size);
   1142a:	d001      	beq.n	11430 <ring_buf_get+0x30>
   1142c:	2c00      	cmp	r4, #0
   1142e:	d1ed      	bne.n	1140c <ring_buf_get+0xc>

	err = ring_buf_get_finish(buf, total_size);
   11430:	4639      	mov	r1, r7
   11432:	4640      	mov	r0, r8
   11434:	f017 fdd6 	bl	28fe4 <ring_buf_get_finish>
	__ASSERT_NO_MSG(err == 0);
   11438:	b158      	cbz	r0, 11452 <ring_buf_get+0x52>
   1143a:	4908      	ldr	r1, [pc, #32]	; (1145c <ring_buf_get+0x5c>)
   1143c:	4808      	ldr	r0, [pc, #32]	; (11460 <ring_buf_get+0x60>)
   1143e:	4a09      	ldr	r2, [pc, #36]	; (11464 <ring_buf_get+0x64>)
   11440:	f240 1335 	movw	r3, #309	; 0x135
   11444:	f017 fba9 	bl	28b9a <printk>
   11448:	4806      	ldr	r0, [pc, #24]	; (11464 <ring_buf_get+0x64>)
   1144a:	f240 1135 	movw	r1, #309	; 0x135
   1144e:	f017 fde5 	bl	2901c <assert_post_action>

	return total_size;
}
   11452:	4638      	mov	r0, r7
   11454:	b002      	add	sp, #8
   11456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1145a:	bf00      	nop
   1145c:	0002ec6a 	.word	0x0002ec6a
   11460:	0002e93e 	.word	0x0002e93e
   11464:	0002ec42 	.word	0x0002ec42

00011468 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
   11468:	b508      	push	{r3, lr}
	__asm__ volatile(
   1146a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1146e:	f3ef 8311 	mrs	r3, BASEPRI
   11472:	f382 8812 	msr	BASEPRI_MAX, r2
   11476:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
   1147a:	f005 fce1 	bl	16e40 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
   1147e:	4803      	ldr	r0, [pc, #12]	; (1148c <sys_reboot+0x24>)
   11480:	f017 fb8b 	bl	28b9a <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
   11484:	f004 fce8 	bl	15e58 <arch_cpu_idle>
   11488:	e7fc      	b.n	11484 <sys_reboot+0x1c>
   1148a:	bf00      	nop
   1148c:	0002ec73 	.word	0x0002ec73

00011490 <foldcase>:
#define EOS    '\0'

static inline int foldcase(int ch, int flags)
{

    if ((flags & FNM_CASEFOLD) != 0 && isupper(ch))
   11490:	070b      	lsls	r3, r1, #28
   11492:	d506      	bpl.n	114a2 <foldcase+0x12>
   11494:	4b03      	ldr	r3, [pc, #12]	; (114a4 <foldcase+0x14>)
   11496:	5cc3      	ldrb	r3, [r0, r3]
   11498:	f003 0303 	and.w	r3, r3, #3
   1149c:	2b01      	cmp	r3, #1
        return tolower(ch);
   1149e:	bf08      	it	eq
   114a0:	3020      	addeq	r0, #32
    return ch;
}
   114a2:	4770      	bx	lr
   114a4:	00034540 	.word	0x00034540

000114a8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
   114a8:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
   114aa:	4910      	ldr	r1, [pc, #64]	; (114ec <enable_logger+0x44>)
   114ac:	4810      	ldr	r0, [pc, #64]	; (114f0 <enable_logger+0x48>)
{
   114ae:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
   114b0:	2200      	movs	r2, #0
   114b2:	f01b fb10 	bl	2cad6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   114b6:	4d0f      	ldr	r5, [pc, #60]	; (114f4 <enable_logger+0x4c>)
   114b8:	490f      	ldr	r1, [pc, #60]	; (114f8 <enable_logger+0x50>)
   114ba:	2200      	movs	r2, #0
   114bc:	2300      	movs	r3, #0
   114be:	e9cd 2306 	strd	r2, r3, [sp, #24]
   114c2:	2400      	movs	r4, #0
   114c4:	230e      	movs	r3, #14
   114c6:	e9cd 3403 	strd	r3, r4, [sp, #12]
   114ca:	e9cd 4401 	strd	r4, r4, [sp, #4]
   114ce:	4b0b      	ldr	r3, [pc, #44]	; (114fc <enable_logger+0x54>)
   114d0:	9400      	str	r4, [sp, #0]
   114d2:	f44f 7240 	mov.w	r2, #768	; 0x300
   114d6:	4628      	mov	r0, r5
   114d8:	f012 fe06 	bl	240e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   114dc:	4908      	ldr	r1, [pc, #32]	; (11500 <enable_logger+0x58>)
   114de:	4628      	mov	r0, r5
   114e0:	f012 fc10 	bl	23d04 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
   114e4:	4620      	mov	r0, r4
   114e6:	b009      	add	sp, #36	; 0x24
   114e8:	bd30      	pop	{r4, r5, pc}
   114ea:	bf00      	nop
   114ec:	00011505 	.word	0x00011505
   114f0:	20001738 	.word	0x20001738
   114f4:	20001770 	.word	0x20001770
   114f8:	20003700 	.word	0x20003700
   114fc:	000119e5 	.word	0x000119e5
   11500:	0002f250 	.word	0x0002f250

00011504 <log_process_thread_timer_expiry_fn>:
	z_impl_k_sem_give(sem);
   11504:	4801      	ldr	r0, [pc, #4]	; (1150c <log_process_thread_timer_expiry_fn+0x8>)
   11506:	f013 bbed 	b.w	24ce4 <z_impl_k_sem_give>
   1150a:	bf00      	nop
   1150c:	2000088c 	.word	0x2000088c

00011510 <z_log_get_s_mask>:
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   11510:	2920      	cmp	r1, #32
{
   11512:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11514:	4605      	mov	r5, r0
   11516:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(nargs <= 8*sizeof(mask));
   11518:	d909      	bls.n	1152e <z_log_get_s_mask+0x1e>
   1151a:	4914      	ldr	r1, [pc, #80]	; (1156c <z_log_get_s_mask+0x5c>)
   1151c:	4814      	ldr	r0, [pc, #80]	; (11570 <z_log_get_s_mask+0x60>)
   1151e:	4a15      	ldr	r2, [pc, #84]	; (11574 <z_log_get_s_mask+0x64>)
   11520:	2387      	movs	r3, #135	; 0x87
   11522:	f017 fb3a 	bl	28b9a <printk>
   11526:	4813      	ldr	r0, [pc, #76]	; (11574 <z_log_get_s_mask+0x64>)
   11528:	2187      	movs	r1, #135	; 0x87
   1152a:	f017 fd77 	bl	2901c <assert_post_action>
			arm = false;
   1152e:	2000      	movs	r0, #0
		} else if (arm && isalpha((int)curr)) {
   11530:	4e11      	ldr	r6, [pc, #68]	; (11578 <z_log_get_s_mask+0x68>)
			arm = false;
   11532:	4603      	mov	r3, r0
   11534:	4602      	mov	r2, r0
				mask |= BIT(arg);
   11536:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   11538:	f815 1b01 	ldrb.w	r1, [r5], #1
   1153c:	b109      	cbz	r1, 11542 <z_log_get_s_mask+0x32>
   1153e:	42a3      	cmp	r3, r4
   11540:	d300      	bcc.n	11544 <z_log_get_s_mask+0x34>
}
   11542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (curr == '%') {
   11544:	2925      	cmp	r1, #37	; 0x25
   11546:	d102      	bne.n	1154e <z_log_get_s_mask+0x3e>
			arm = !arm;
   11548:	f082 0201 	eor.w	r2, r2, #1
   1154c:	e7f4      	b.n	11538 <z_log_get_s_mask+0x28>
		} else if (arm && isalpha((int)curr)) {
   1154e:	2a00      	cmp	r2, #0
   11550:	d0f2      	beq.n	11538 <z_log_get_s_mask+0x28>
   11552:	f811 c006 	ldrb.w	ip, [r1, r6]
   11556:	f01c 0f03 	tst.w	ip, #3
   1155a:	d0ed      	beq.n	11538 <z_log_get_s_mask+0x28>
			if (curr == 's') {
   1155c:	2973      	cmp	r1, #115	; 0x73
				mask |= BIT(arg);
   1155e:	bf04      	itt	eq
   11560:	fa07 f203 	lsleq.w	r2, r7, r3
   11564:	4310      	orreq	r0, r2
			arg++;
   11566:	3301      	adds	r3, #1
			arm = false;
   11568:	2200      	movs	r2, #0
   1156a:	e7e5      	b.n	11538 <z_log_get_s_mask+0x28>
   1156c:	0002ecc9 	.word	0x0002ecc9
   11570:	0002e93e 	.word	0x0002e93e
   11574:	0002ec9c 	.word	0x0002ec9c
   11578:	00034540 	.word	0x00034540

0001157c <log_core_init>:
	panic_mode = false;
   1157c:	4a0d      	ldr	r2, [pc, #52]	; (115b4 <log_core_init+0x38>)
{
   1157e:	b508      	push	{r3, lr}
	panic_mode = false;
   11580:	2300      	movs	r3, #0
   11582:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
   11584:	4a0c      	ldr	r2, [pc, #48]	; (115b8 <log_core_init+0x3c>)
   11586:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
   11588:	4b0c      	ldr	r3, [pc, #48]	; (115bc <log_core_init+0x40>)
   1158a:	4a0d      	ldr	r2, [pc, #52]	; (115c0 <log_core_init+0x44>)
   1158c:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
   1158e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   11592:	f000 ff13 	bl	123bc <log_output_timestamp_freq_set>
		log_msg_pool_init();
   11596:	f000 fbf5 	bl	11d84 <log_msg_pool_init>
		log_list_init(&list);
   1159a:	480a      	ldr	r0, [pc, #40]	; (115c4 <log_core_init+0x48>)
   1159c:	f017 fe79 	bl	29292 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
   115a0:	2308      	movs	r3, #8
   115a2:	4909      	ldr	r1, [pc, #36]	; (115c8 <log_core_init+0x4c>)
   115a4:	4809      	ldr	r0, [pc, #36]	; (115cc <log_core_init+0x50>)
   115a6:	2248      	movs	r2, #72	; 0x48
   115a8:	f01b f94e 	bl	2c848 <k_mem_slab_init>
}
   115ac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_runtime_filters_init();
   115b0:	f000 baac 	b.w	11b0c <z_log_runtime_filters_init>
   115b4:	20002a41 	.word	0x20002a41
   115b8:	200022a4 	.word	0x200022a4
   115bc:	20000428 	.word	0x20000428
   115c0:	000292d7 	.word	0x000292d7
   115c4:	200022ac 	.word	0x200022ac
   115c8:	20006bd8 	.word	0x20006bd8
   115cc:	200022b4 	.word	0x200022b4

000115d0 <log_init>:
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
   115d0:	4b1a      	ldr	r3, [pc, #104]	; (1163c <log_init+0x6c>)
   115d2:	4a1b      	ldr	r2, [pc, #108]	; (11640 <log_init+0x70>)
   115d4:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   115d6:	2b9f      	cmp	r3, #159	; 0x9f
{
   115d8:	b570      	push	{r4, r5, r6, lr}
   115da:	ea4f 1623 	mov.w	r6, r3, asr #4
	__ASSERT_NO_MSG(log_backend_count_get() < LOG_FILTERS_NUM_OF_SLOTS);
   115de:	d90b      	bls.n	115f8 <log_init+0x28>
   115e0:	4918      	ldr	r1, [pc, #96]	; (11644 <log_init+0x74>)
   115e2:	4819      	ldr	r0, [pc, #100]	; (11648 <log_init+0x78>)
   115e4:	4a19      	ldr	r2, [pc, #100]	; (1164c <log_init+0x7c>)
   115e6:	f240 234a 	movw	r3, #586	; 0x24a
   115ea:	f017 fad6 	bl	28b9a <printk>
   115ee:	4817      	ldr	r0, [pc, #92]	; (1164c <log_init+0x7c>)
   115f0:	f240 214a 	movw	r1, #586	; 0x24a
   115f4:	f017 fd12 	bl	2901c <assert_post_action>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   115f8:	f3bf 8f5b 	dmb	ish
   115fc:	4b14      	ldr	r3, [pc, #80]	; (11650 <log_init+0x80>)
   115fe:	e853 5f00 	ldrex	r5, [r3]
   11602:	1c6a      	adds	r2, r5, #1
   11604:	e843 2100 	strex	r1, r2, [r3]
   11608:	2900      	cmp	r1, #0
   1160a:	d1f8      	bne.n	115fe <log_init+0x2e>
   1160c:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
   11610:	b915      	cbnz	r5, 11618 <log_init+0x48>
   11612:	4c0b      	ldr	r4, [pc, #44]	; (11640 <log_init+0x70>)
	for (i = 0; i < log_backend_count_get(); i++) {
   11614:	42b5      	cmp	r5, r6
   11616:	db00      	blt.n	1161a <log_init+0x4a>
}
   11618:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
   1161a:	7b23      	ldrb	r3, [r4, #12]
   1161c:	b153      	cbz	r3, 11634 <log_init+0x64>
			if (backend->api->init != NULL) {
   1161e:	6823      	ldr	r3, [r4, #0]
   11620:	699b      	ldr	r3, [r3, #24]
   11622:	b10b      	cbz	r3, 11628 <log_init+0x58>
				backend->api->init(backend);
   11624:	4620      	mov	r0, r4
   11626:	4798      	blx	r3
			log_backend_enable(backend,
   11628:	6863      	ldr	r3, [r4, #4]
   1162a:	2204      	movs	r2, #4
   1162c:	6819      	ldr	r1, [r3, #0]
   1162e:	4620      	mov	r0, r4
   11630:	f000 fb60 	bl	11cf4 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
   11634:	3501      	adds	r5, #1
   11636:	3410      	adds	r4, #16
   11638:	e7ec      	b.n	11614 <log_init+0x44>
   1163a:	bf00      	nop
   1163c:	0002d2d8 	.word	0x0002d2d8
   11640:	0002d2b8 	.word	0x0002d2b8
   11644:	0002ece1 	.word	0x0002ece1
   11648:	0002e93e 	.word	0x0002e93e
   1164c:	0002ec9c 	.word	0x0002ec9c
   11650:	200022a8 	.word	0x200022a8

00011654 <get_msg>:
{
   11654:	b510      	push	{r4, lr}
   11656:	f04f 0340 	mov.w	r3, #64	; 0x40
   1165a:	f3ef 8411 	mrs	r4, BASEPRI
   1165e:	f383 8812 	msr	BASEPRI_MAX, r3
   11662:	f3bf 8f6f 	isb	sy
	msg.msg = log_list_head_get(&list);
   11666:	4804      	ldr	r0, [pc, #16]	; (11678 <get_msg+0x24>)
   11668:	f017 fe23 	bl	292b2 <log_list_head_get>
	__asm__ volatile(
   1166c:	f384 8811 	msr	BASEPRI, r4
   11670:	f3bf 8f6f 	isb	sy
}
   11674:	bd10      	pop	{r4, pc}
   11676:	bf00      	nop
   11678:	200022ac 	.word	0x200022ac

0001167c <z_log_notify_backend_enabled>:
{
   1167c:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
   1167e:	4c04      	ldr	r4, [pc, #16]	; (11690 <z_log_notify_backend_enabled+0x14>)
   11680:	7822      	ldrb	r2, [r4, #0]
   11682:	b912      	cbnz	r2, 1168a <z_log_notify_backend_enabled+0xe>
   11684:	4803      	ldr	r0, [pc, #12]	; (11694 <z_log_notify_backend_enabled+0x18>)
   11686:	f013 fb2d 	bl	24ce4 <z_impl_k_sem_give>
	backend_attached = true;
   1168a:	2301      	movs	r3, #1
   1168c:	7023      	strb	r3, [r4, #0]
}
   1168e:	bd10      	pop	{r4, pc}
   11690:	20002a40 	.word	0x20002a40
   11694:	2000088c 	.word	0x2000088c

00011698 <z_log_dropped>:
   11698:	4b0c      	ldr	r3, [pc, #48]	; (116cc <z_log_dropped+0x34>)
   1169a:	f3bf 8f5b 	dmb	ish
   1169e:	e853 2f00 	ldrex	r2, [r3]
   116a2:	3201      	adds	r2, #1
   116a4:	e843 2100 	strex	r1, r2, [r3]
   116a8:	2900      	cmp	r1, #0
   116aa:	d1f8      	bne.n	1169e <z_log_dropped+0x6>
   116ac:	f3bf 8f5b 	dmb	ish
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   116b0:	f3bf 8f5b 	dmb	ish
   116b4:	4b06      	ldr	r3, [pc, #24]	; (116d0 <z_log_dropped+0x38>)
   116b6:	e853 2f00 	ldrex	r2, [r3]
   116ba:	3a01      	subs	r2, #1
   116bc:	e843 2100 	strex	r1, r2, [r3]
   116c0:	2900      	cmp	r1, #0
   116c2:	d1f8      	bne.n	116b6 <z_log_dropped+0x1e>
   116c4:	f3bf 8f5b 	dmb	ish
}
   116c8:	4770      	bx	lr
   116ca:	bf00      	nop
   116cc:	200022a4 	.word	0x200022a4
   116d0:	200022a0 	.word	0x200022a0

000116d4 <z_log_dropped_read_and_clear>:
}
   116d4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   116d6:	4b06      	ldr	r3, [pc, #24]	; (116f0 <z_log_dropped_read_and_clear+0x1c>)
   116d8:	f3bf 8f5b 	dmb	ish
   116dc:	4602      	mov	r2, r0
   116de:	e853 0f00 	ldrex	r0, [r3]
   116e2:	e843 2100 	strex	r1, r2, [r3]
   116e6:	2900      	cmp	r1, #0
   116e8:	d1f9      	bne.n	116de <z_log_dropped_read_and_clear+0xa>
   116ea:	f3bf 8f5b 	dmb	ish
   116ee:	4770      	bx	lr
   116f0:	200022a4 	.word	0x200022a4

000116f4 <dropped_notify>:
{
   116f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
   116f6:	f7ff ffed 	bl	116d4 <z_log_dropped_read_and_clear>
   116fa:	4c0b      	ldr	r4, [pc, #44]	; (11728 <dropped_notify+0x34>)
   116fc:	4d0b      	ldr	r5, [pc, #44]	; (1172c <dropped_notify+0x38>)
   116fe:	1b2d      	subs	r5, r5, r4
   11700:	4607      	mov	r7, r0
   11702:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   11704:	2600      	movs	r6, #0
   11706:	42ae      	cmp	r6, r5
   11708:	db00      	blt.n	1170c <dropped_notify+0x18>
}
   1170a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   1170c:	4620      	mov	r0, r4
   1170e:	f017 fdd6 	bl	292be <log_backend_is_active>
   11712:	b128      	cbz	r0, 11720 <dropped_notify+0x2c>
	if (backend->api->dropped != NULL) {
   11714:	6823      	ldr	r3, [r4, #0]
   11716:	691b      	ldr	r3, [r3, #16]
   11718:	b113      	cbz	r3, 11720 <dropped_notify+0x2c>
		backend->api->dropped(backend, cnt);
   1171a:	4639      	mov	r1, r7
   1171c:	4620      	mov	r0, r4
   1171e:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   11720:	3601      	adds	r6, #1
   11722:	3410      	adds	r4, #16
   11724:	e7ef      	b.n	11706 <dropped_notify+0x12>
   11726:	bf00      	nop
   11728:	0002d2b8 	.word	0x0002d2b8
   1172c:	0002d2d8 	.word	0x0002d2d8

00011730 <z_log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
   11730:	4b17      	ldr	r3, [pc, #92]	; (11790 <z_log_strdup+0x60>)
   11732:	4298      	cmp	r0, r3
{
   11734:	b573      	push	{r0, r1, r4, r5, r6, lr}
   11736:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   11738:	d302      	bcc.n	11740 <z_log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
   1173a:	4b16      	ldr	r3, [pc, #88]	; (11794 <z_log_strdup+0x64>)
   1173c:	4298      	cmp	r0, r3
   1173e:	d321      	bcc.n	11784 <z_log_strdup+0x54>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
   11740:	4815      	ldr	r0, [pc, #84]	; (11798 <z_log_strdup+0x68>)
   11742:	2200      	movs	r2, #0
   11744:	2300      	movs	r3, #0
   11746:	a901      	add	r1, sp, #4
   11748:	f012 fa0c 	bl	23b64 <k_mem_slab_alloc>
	if (err != 0) {
   1174c:	4605      	mov	r5, r0
   1174e:	b9e0      	cbnz	r0, 1178a <z_log_strdup+0x5a>
   11750:	2201      	movs	r2, #1
   11752:	9b01      	ldr	r3, [sp, #4]
   11754:	f3bf 8f5b 	dmb	ish
   11758:	e853 1f00 	ldrex	r1, [r3]
   1175c:	e843 2000 	strex	r0, r2, [r3]
   11760:	2800      	cmp	r0, #0
   11762:	d1f9      	bne.n	11758 <z_log_strdup+0x28>
   11764:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
   11768:	9e01      	ldr	r6, [sp, #4]
   1176a:	1d33      	adds	r3, r6, #4
#if __GNUC_PREREQ__(4,8) || defined(__clang__)
__ssp_bos_icheck3_restrict(stpncpy, char *, const char *)
#endif
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
__ssp_bos_icheck2_restrict(strcat, char *, const char *)
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   1176c:	2241      	movs	r2, #65	; 0x41
   1176e:	4618      	mov	r0, r3
   11770:	4621      	mov	r1, r4
   11772:	f01b fa97 	bl	2cca4 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
   11776:	227e      	movs	r2, #126	; 0x7e
   11778:	4603      	mov	r3, r0
   1177a:	f886 2045 	strb.w	r2, [r6, #69]	; 0x45
	dup->buf[sizeof(dup->buf) - 1] = '\0';
   1177e:	f886 5046 	strb.w	r5, [r6, #70]	; 0x46
	return dup->buf;
   11782:	461c      	mov	r4, r3
}
   11784:	4620      	mov	r0, r4
   11786:	b002      	add	sp, #8
   11788:	bd70      	pop	{r4, r5, r6, pc}
		return (char *)log_strdup_fail_msg;
   1178a:	4b04      	ldr	r3, [pc, #16]	; (1179c <z_log_strdup+0x6c>)
   1178c:	e7f9      	b.n	11782 <z_log_strdup+0x52>
   1178e:	bf00      	nop
   11790:	0002cf0c 	.word	0x0002cf0c
   11794:	00034674 	.word	0x00034674
   11798:	200022b4 	.word	0x200022b4
   1179c:	0002ed05 	.word	0x0002ed05

000117a0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
   117a0:	b150      	cbz	r0, 117b8 <log_is_strdup+0x18>
   117a2:	4b06      	ldr	r3, [pc, #24]	; (117bc <log_is_strdup+0x1c>)
   117a4:	4298      	cmp	r0, r3
   117a6:	d306      	bcc.n	117b6 <log_is_strdup+0x16>
   117a8:	f503 7310 	add.w	r3, r3, #576	; 0x240
   117ac:	4298      	cmp	r0, r3
   117ae:	bf2c      	ite	cs
   117b0:	2000      	movcs	r0, #0
   117b2:	2001      	movcc	r0, #1
   117b4:	4770      	bx	lr
   117b6:	2000      	movs	r0, #0
}
   117b8:	4770      	bx	lr
   117ba:	bf00      	nop
   117bc:	20006bd8 	.word	0x20006bd8

000117c0 <z_impl_log_process>:
{
   117c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
   117c4:	4b49      	ldr	r3, [pc, #292]	; (118ec <z_impl_log_process+0x12c>)
   117c6:	781b      	ldrb	r3, [r3, #0]
{
   117c8:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
   117ca:	b903      	cbnz	r3, 117ce <z_impl_log_process+0xe>
   117cc:	b1a0      	cbz	r0, 117f8 <z_impl_log_process+0x38>
	msg = get_msg();
   117ce:	f7ff ff41 	bl	11654 <get_msg>
	if (msg.msg) {
   117d2:	4604      	mov	r4, r0
   117d4:	b118      	cbz	r0, 117de <z_impl_log_process+0x1e>
		if (!bypass) {
   117d6:	b195      	cbz	r5, 117fe <z_impl_log_process+0x3e>
			log_msg_put(msg.msg);
   117d8:	4620      	mov	r0, r4
   117da:	f017 fe73 	bl	294c4 <log_msg_put>
	if (!bypass && z_log_dropped_pending()) {
   117de:	b92d      	cbnz	r5, 117ec <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
   117e0:	4b43      	ldr	r3, [pc, #268]	; (118f0 <z_impl_log_process+0x130>)
	if (!bypass && z_log_dropped_pending()) {
   117e2:	681b      	ldr	r3, [r3, #0]
   117e4:	2b00      	cmp	r3, #0
   117e6:	dd01      	ble.n	117ec <z_impl_log_process+0x2c>
		dropped_notify();
   117e8:	f7ff ff84 	bl	116f4 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
   117ec:	4841      	ldr	r0, [pc, #260]	; (118f4 <z_impl_log_process+0x134>)
   117ee:	f017 fd5e 	bl	292ae <log_list_head_peek>
   117f2:	1e05      	subs	r5, r0, #0
   117f4:	bf18      	it	ne
   117f6:	2501      	movne	r5, #1
}
   117f8:	4628      	mov	r0, r5
   117fa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   117fe:	4b3e      	ldr	r3, [pc, #248]	; (118f8 <z_impl_log_process+0x138>)
   11800:	f3bf 8f5b 	dmb	ish
   11804:	e853 2f00 	ldrex	r2, [r3]
   11808:	3a01      	subs	r2, #1
   1180a:	e843 2100 	strex	r1, r2, [r3]
   1180e:	2900      	cmp	r1, #0
   11810:	d1f8      	bne.n	11804 <z_impl_log_process+0x44>
   11812:	f3bf 8f5b 	dmb	ish
		    !panic_mode) {
   11816:	4b39      	ldr	r3, [pc, #228]	; (118fc <z_impl_log_process+0x13c>)
		if (!IS_ENABLED(CONFIG_LOG2) &&
   11818:	781b      	ldrb	r3, [r3, #0]
   1181a:	b993      	cbnz	r3, 11842 <z_impl_log_process+0x82>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1181c:	7a23      	ldrb	r3, [r4, #8]
	if (!log_msg_is_std(msg)) {
   1181e:	07db      	lsls	r3, r3, #31
   11820:	d40f      	bmi.n	11842 <z_impl_log_process+0x82>
	msg_str = log_msg_str_get(msg);
   11822:	f017 fe62 	bl	294ea <log_msg_str_get>
   11826:	4680      	mov	r8, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   11828:	4620      	mov	r0, r4
   1182a:	f017 fe29 	bl	29480 <log_msg_nargs_get>
   1182e:	4601      	mov	r1, r0
   11830:	4640      	mov	r0, r8
   11832:	f7ff fe6d 	bl	11510 <z_log_get_s_mask>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   11836:	f8df b0e4 	ldr.w	fp, [pc, #228]	; 1191c <z_impl_log_process+0x15c>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   1183a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 11920 <z_impl_log_process+0x160>
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
   1183e:	4606      	mov	r6, r0
	while (mask) {
   11840:	b936      	cbnz	r6, 11850 <z_impl_log_process+0x90>
	return __log_backends_end - __log_backends_start;
   11842:	4e2f      	ldr	r6, [pc, #188]	; (11900 <z_impl_log_process+0x140>)
   11844:	4b2f      	ldr	r3, [pc, #188]	; (11904 <z_impl_log_process+0x144>)
   11846:	1b9b      	subs	r3, r3, r6
   11848:	ea4f 1823 	mov.w	r8, r3, asr #4
   1184c:	2700      	movs	r7, #0
   1184e:	e049      	b.n	118e4 <z_impl_log_process+0x124>
		idx = 31 - __builtin_clz(mask);
   11850:	fab6 f786 	clz	r7, r6
   11854:	f1c7 071f 	rsb	r7, r7, #31
		str = (const char *)log_msg_arg_get(msg, idx);
   11858:	4639      	mov	r1, r7
   1185a:	4620      	mov	r0, r4
   1185c:	f017 fe13 	bl	29486 <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
   11860:	4b29      	ldr	r3, [pc, #164]	; (11908 <z_impl_log_process+0x148>)
   11862:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
   11864:	4602      	mov	r2, r0
	return (((const char *)addr >= (const char *)RO_START) &&
   11866:	d302      	bcc.n	1186e <z_impl_log_process+0xae>
		if (!is_rodata(str) && !log_is_strdup(str) &&
   11868:	4b28      	ldr	r3, [pc, #160]	; (1190c <z_impl_log_process+0x14c>)
   1186a:	4298      	cmp	r0, r3
   1186c:	d31b      	bcc.n	118a6 <z_impl_log_process+0xe6>
   1186e:	4610      	mov	r0, r2
   11870:	f7ff ff96 	bl	117a0 <log_is_strdup>
   11874:	b9b8      	cbnz	r0, 118a6 <z_impl_log_process+0xe6>
   11876:	455a      	cmp	r2, fp
   11878:	d015      	beq.n	118a6 <z_impl_log_process+0xe6>
	return msg->hdr.ids.source_id;
   1187a:	8961      	ldrh	r1, [r4, #10]
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   1187c:	f3c1 1189 	ubfx	r1, r1, #6, #10
   11880:	f000 f962 	bl	11b48 <log_source_name_get>
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   11884:	4922      	ldr	r1, [pc, #136]	; (11910 <z_impl_log_process+0x150>)
				log_source_name_get(CONFIG_LOG_DOMAIN_ID,
   11886:	4681      	mov	r9, r0
				__ASSERT(0, ERR_MSG, idx, src_name, msg_str);
   11888:	23d8      	movs	r3, #216	; 0xd8
   1188a:	4822      	ldr	r0, [pc, #136]	; (11914 <z_impl_log_process+0x154>)
   1188c:	4652      	mov	r2, sl
   1188e:	f017 f984 	bl	28b9a <printk>
   11892:	4821      	ldr	r0, [pc, #132]	; (11918 <z_impl_log_process+0x158>)
   11894:	4639      	mov	r1, r7
   11896:	4643      	mov	r3, r8
   11898:	464a      	mov	r2, r9
   1189a:	f017 f97e 	bl	28b9a <printk>
   1189e:	21d8      	movs	r1, #216	; 0xd8
   118a0:	4650      	mov	r0, sl
   118a2:	f017 fbbb 	bl	2901c <assert_post_action>
		mask &= ~BIT(idx);
   118a6:	2301      	movs	r3, #1
   118a8:	fa03 f707 	lsl.w	r7, r3, r7
   118ac:	ea26 0607 	bic.w	r6, r6, r7
   118b0:	e7c6      	b.n	11840 <z_impl_log_process+0x80>
			if (log_backend_is_active(backend) &&
   118b2:	4630      	mov	r0, r6
   118b4:	f017 fd03 	bl	292be <log_backend_is_active>
   118b8:	b190      	cbz	r0, 118e0 <z_impl_log_process+0x120>
	return msg->hdr.ids.level;
   118ba:	7aa1      	ldrb	r1, [r4, #10]
	return msg->hdr.ids.source_id;
   118bc:	8962      	ldrh	r2, [r4, #10]
	return msg->hdr.ids.level;
   118be:	f001 0907 	and.w	r9, r1, #7
	backend_level = log_filter_get(backend, domain_id,
   118c2:	2301      	movs	r3, #1
   118c4:	f3c2 1289 	ubfx	r2, r2, #6, #10
   118c8:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   118cc:	4630      	mov	r0, r6
   118ce:	f000 f949 	bl	11b64 <log_filter_get>
			if (log_backend_is_active(backend) &&
   118d2:	4581      	cmp	r9, r0
   118d4:	d804      	bhi.n	118e0 <z_impl_log_process+0x120>
	backend->api->put(backend, msg);
   118d6:	6833      	ldr	r3, [r6, #0]
   118d8:	4621      	mov	r1, r4
   118da:	685b      	ldr	r3, [r3, #4]
   118dc:	4630      	mov	r0, r6
   118de:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
   118e0:	3701      	adds	r7, #1
   118e2:	3610      	adds	r6, #16
   118e4:	4547      	cmp	r7, r8
   118e6:	dbe4      	blt.n	118b2 <z_impl_log_process+0xf2>
   118e8:	e776      	b.n	117d8 <z_impl_log_process+0x18>
   118ea:	bf00      	nop
   118ec:	20002a40 	.word	0x20002a40
   118f0:	200022a4 	.word	0x200022a4
   118f4:	200022ac 	.word	0x200022ac
   118f8:	200022a0 	.word	0x200022a0
   118fc:	20002a41 	.word	0x20002a41
   11900:	0002d2b8 	.word	0x0002d2b8
   11904:	0002d2d8 	.word	0x0002d2d8
   11908:	0002cf0c 	.word	0x0002cf0c
   1190c:	00034674 	.word	0x00034674
   11910:	00034515 	.word	0x00034515
   11914:	0002e93e 	.word	0x0002e93e
   11918:	0002ed1f 	.word	0x0002ed1f
   1191c:	0002ed05 	.word	0x0002ed05
   11920:	0002ec9c 	.word	0x0002ec9c

00011924 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
   11924:	4b28      	ldr	r3, [pc, #160]	; (119c8 <msg_finalize+0xa4>)
{
   11926:	b537      	push	{r0, r1, r2, r4, r5, lr}
	msg->hdr.timestamp = timestamp_func();
   11928:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
   1192a:	8141      	strh	r1, [r0, #10]
{
   1192c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
   1192e:	4798      	blx	r3
   11930:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   11932:	f04f 0340 	mov.w	r3, #64	; 0x40
   11936:	f3ef 8511 	mrs	r5, BASEPRI
   1193a:	f383 8812 	msr	BASEPRI_MAX, r3
   1193e:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
   11942:	4822      	ldr	r0, [pc, #136]	; (119cc <msg_finalize+0xa8>)
   11944:	4621      	mov	r1, r4
   11946:	f017 fca8 	bl	2929a <log_list_add_tail>
	__asm__ volatile(
   1194a:	f385 8811 	msr	BASEPRI, r5
   1194e:	f3bf 8f6f 	isb	sy
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   11952:	f3bf 8f5b 	dmb	ish
   11956:	4b1e      	ldr	r3, [pc, #120]	; (119d0 <msg_finalize+0xac>)
   11958:	e853 2f00 	ldrex	r2, [r3]
   1195c:	1c51      	adds	r1, r2, #1
   1195e:	e843 1000 	strex	r0, r1, [r3]
   11962:	2800      	cmp	r0, #0
   11964:	d1f8      	bne.n	11958 <msg_finalize+0x34>
   11966:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
   1196a:	4b1a      	ldr	r3, [pc, #104]	; (119d4 <msg_finalize+0xb0>)
   1196c:	781b      	ldrb	r3, [r3, #0]
   1196e:	b183      	cbz	r3, 11992 <msg_finalize+0x6e>
	__asm__ volatile(
   11970:	f04f 0340 	mov.w	r3, #64	; 0x40
   11974:	f3ef 8411 	mrs	r4, BASEPRI
   11978:	f383 8812 	msr	BASEPRI_MAX, r3
   1197c:	f3bf 8f6f 	isb	sy
		/* coverity[OVERRUN] */
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
   11980:	2000      	movs	r0, #0
   11982:	f7ff ff1d 	bl	117c0 <z_impl_log_process>
	__asm__ volatile(
   11986:	f384 8811 	msr	BASEPRI, r4
   1198a:	f3bf 8f6f 	isb	sy
}
   1198e:	b003      	add	sp, #12
   11990:	bd30      	pop	{r4, r5, pc}
	} else if (proc_tid != NULL && cnt == 0) {
   11992:	4b11      	ldr	r3, [pc, #68]	; (119d8 <msg_finalize+0xb4>)
   11994:	681b      	ldr	r3, [r3, #0]
   11996:	2b00      	cmp	r3, #0
   11998:	d0f9      	beq.n	1198e <msg_finalize+0x6a>
   1199a:	b952      	cbnz	r2, 119b2 <msg_finalize+0x8e>
	z_impl_k_timer_start(timer, duration, period);
   1199c:	2200      	movs	r2, #0
   1199e:	2300      	movs	r3, #0
   119a0:	e9cd 2300 	strd	r2, r3, [sp]
   119a4:	480d      	ldr	r0, [pc, #52]	; (119dc <msg_finalize+0xb8>)
   119a6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   119aa:	2300      	movs	r3, #0
   119ac:	f015 feb0 	bl	27710 <z_impl_k_timer_start>
   119b0:	e7ed      	b.n	1198e <msg_finalize+0x6a>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
   119b2:	2a0a      	cmp	r2, #10
   119b4:	d1eb      	bne.n	1198e <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
   119b6:	4809      	ldr	r0, [pc, #36]	; (119dc <msg_finalize+0xb8>)
   119b8:	f01b f899 	bl	2caee <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   119bc:	4808      	ldr	r0, [pc, #32]	; (119e0 <msg_finalize+0xbc>)
}
   119be:	b003      	add	sp, #12
   119c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   119c4:	f013 b98e 	b.w	24ce4 <z_impl_k_sem_give>
   119c8:	20000428 	.word	0x20000428
   119cc:	200022ac 	.word	0x200022ac
   119d0:	200022a0 	.word	0x200022a0
   119d4:	20002a41 	.word	0x20002a41
   119d8:	200022d4 	.word	0x200022d4
   119dc:	20001738 	.word	0x20001738
   119e0:	2000088c 	.word	0x2000088c

000119e4 <log_process_thread_func>:
	return __log_backends_end - __log_backends_start;
   119e4:	4b16      	ldr	r3, [pc, #88]	; (11a40 <log_process_thread_func+0x5c>)
   119e6:	4a17      	ldr	r2, [pc, #92]	; (11a44 <log_process_thread_func+0x60>)
   119e8:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   119ea:	2b00      	cmp	r3, #0
{
   119ec:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(log_backend_count_get() > 0);
   119ee:	dc0b      	bgt.n	11a08 <log_process_thread_func+0x24>
   119f0:	4915      	ldr	r1, [pc, #84]	; (11a48 <log_process_thread_func+0x64>)
   119f2:	4816      	ldr	r0, [pc, #88]	; (11a4c <log_process_thread_func+0x68>)
   119f4:	4a16      	ldr	r2, [pc, #88]	; (11a50 <log_process_thread_func+0x6c>)
   119f6:	f240 43f1 	movw	r3, #1265	; 0x4f1
   119fa:	f017 f8ce 	bl	28b9a <printk>
   119fe:	4814      	ldr	r0, [pc, #80]	; (11a50 <log_process_thread_func+0x6c>)
   11a00:	f240 41f1 	movw	r1, #1265	; 0x4f1
   11a04:	f017 fb0a 	bl	2901c <assert_post_action>
	log_init();
   11a08:	f7ff fde2 	bl	115d0 <log_init>
	return z_impl_z_current_get();
   11a0c:	f015 f85a 	bl	26ac4 <z_impl_z_current_get>
	proc_tid = process_tid;
   11a10:	4b10      	ldr	r3, [pc, #64]	; (11a54 <log_process_thread_func+0x70>)
   11a12:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
   11a14:	b130      	cbz	r0, 11a24 <log_process_thread_func+0x40>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
   11a16:	4b10      	ldr	r3, [pc, #64]	; (11a58 <log_process_thread_func+0x74>)
	    process_tid &&
   11a18:	681b      	ldr	r3, [r3, #0]
   11a1a:	2b09      	cmp	r3, #9
   11a1c:	dd02      	ble.n	11a24 <log_process_thread_func+0x40>
	z_impl_k_sem_give(sem);
   11a1e:	480f      	ldr	r0, [pc, #60]	; (11a5c <log_process_thread_func+0x78>)
   11a20:	f013 f960 	bl	24ce4 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
   11a24:	4c0d      	ldr	r4, [pc, #52]	; (11a5c <log_process_thread_func+0x78>)
   11a26:	2000      	movs	r0, #0
   11a28:	f7ff feca 	bl	117c0 <z_impl_log_process>
		if (log_process(false) == false) {
   11a2c:	2800      	cmp	r0, #0
   11a2e:	d1fa      	bne.n	11a26 <log_process_thread_func+0x42>
   11a30:	f04f 32ff 	mov.w	r2, #4294967295
   11a34:	f04f 33ff 	mov.w	r3, #4294967295
   11a38:	4620      	mov	r0, r4
   11a3a:	f013 f997 	bl	24d6c <z_impl_k_sem_take>
   11a3e:	e7f2      	b.n	11a26 <log_process_thread_func+0x42>
   11a40:	0002d2d8 	.word	0x0002d2d8
   11a44:	0002d2b8 	.word	0x0002d2b8
   11a48:	0002ed61 	.word	0x0002ed61
   11a4c:	0002e93e 	.word	0x0002e93e
   11a50:	0002ec9c 	.word	0x0002ec9c
   11a54:	200022d4 	.word	0x200022d4
   11a58:	200022a0 	.word	0x200022a0
   11a5c:	2000088c 	.word	0x2000088c

00011a60 <z_impl_log_panic>:
{
   11a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
   11a62:	4f0f      	ldr	r7, [pc, #60]	; (11aa0 <z_impl_log_panic+0x40>)
   11a64:	783d      	ldrb	r5, [r7, #0]
   11a66:	b975      	cbnz	r5, 11a86 <z_impl_log_panic+0x26>
   11a68:	4c0e      	ldr	r4, [pc, #56]	; (11aa4 <z_impl_log_panic+0x44>)
   11a6a:	4e0f      	ldr	r6, [pc, #60]	; (11aa8 <z_impl_log_panic+0x48>)
	log_init();
   11a6c:	f7ff fdb0 	bl	115d0 <log_init>
   11a70:	1b36      	subs	r6, r6, r4
   11a72:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   11a74:	42b5      	cmp	r5, r6
   11a76:	db07      	blt.n	11a88 <z_impl_log_panic+0x28>
   11a78:	2000      	movs	r0, #0
   11a7a:	f7ff fea1 	bl	117c0 <z_impl_log_process>
		while (log_process(false) == true) {
   11a7e:	2800      	cmp	r0, #0
   11a80:	d1fa      	bne.n	11a78 <z_impl_log_panic+0x18>
	panic_mode = true;
   11a82:	2301      	movs	r3, #1
   11a84:	703b      	strb	r3, [r7, #0]
}
   11a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (log_backend_is_active(backend)) {
   11a88:	4620      	mov	r0, r4
   11a8a:	f017 fc18 	bl	292be <log_backend_is_active>
   11a8e:	b118      	cbz	r0, 11a98 <z_impl_log_panic+0x38>
	backend->api->panic(backend);
   11a90:	6823      	ldr	r3, [r4, #0]
   11a92:	4620      	mov	r0, r4
   11a94:	695b      	ldr	r3, [r3, #20]
   11a96:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
   11a98:	3501      	adds	r5, #1
   11a9a:	3410      	adds	r4, #16
   11a9c:	e7ea      	b.n	11a74 <z_impl_log_panic+0x14>
   11a9e:	bf00      	nop
   11aa0:	20002a41 	.word	0x20002a41
   11aa4:	0002d2b8 	.word	0x0002d2b8
   11aa8:	0002d2d8 	.word	0x0002d2d8

00011aac <z_log_free>:
{
   11aac:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
   11aae:	3804      	subs	r0, #4
   11ab0:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   11ab2:	f3bf 8f5b 	dmb	ish
   11ab6:	e850 3f00 	ldrex	r3, [r0]
   11aba:	1e5a      	subs	r2, r3, #1
   11abc:	e840 2100 	strex	r1, r2, [r0]
   11ac0:	2900      	cmp	r1, #0
   11ac2:	d1f8      	bne.n	11ab6 <z_log_free+0xa>
   11ac4:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
   11ac8:	2b01      	cmp	r3, #1
   11aca:	d103      	bne.n	11ad4 <z_log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
   11acc:	4803      	ldr	r0, [pc, #12]	; (11adc <z_log_free+0x30>)
   11ace:	a901      	add	r1, sp, #4
   11ad0:	f012 f8b4 	bl	23c3c <k_mem_slab_free>
}
   11ad4:	b003      	add	sp, #12
   11ad6:	f85d fb04 	ldr.w	pc, [sp], #4
   11ada:	bf00      	nop
   11adc:	200022b4 	.word	0x200022b4

00011ae0 <log_backend_id_get>:
{
   11ae0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   11ae2:	4604      	mov	r4, r0
   11ae4:	b948      	cbnz	r0, 11afa <log_backend_id_get+0x1a>
   11ae6:	4906      	ldr	r1, [pc, #24]	; (11b00 <log_backend_id_get+0x20>)
   11ae8:	4806      	ldr	r0, [pc, #24]	; (11b04 <log_backend_id_get+0x24>)
   11aea:	4a07      	ldr	r2, [pc, #28]	; (11b08 <log_backend_id_get+0x28>)
   11aec:	23df      	movs	r3, #223	; 0xdf
   11aee:	f017 f854 	bl	28b9a <printk>
   11af2:	4805      	ldr	r0, [pc, #20]	; (11b08 <log_backend_id_get+0x28>)
   11af4:	21df      	movs	r1, #223	; 0xdf
   11af6:	f017 fa91 	bl	2901c <assert_post_action>
	return backend->cb->id;
   11afa:	6863      	ldr	r3, [r4, #4]
}
   11afc:	7918      	ldrb	r0, [r3, #4]
   11afe:	bd10      	pop	{r4, pc}
   11b00:	0002edb2 	.word	0x0002edb2
   11b04:	0002e93e 	.word	0x0002e93e
   11b08:	0002ed81 	.word	0x0002ed81

00011b0c <z_log_runtime_filters_init>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
   11b0c:	480b      	ldr	r0, [pc, #44]	; (11b3c <z_log_runtime_filters_init+0x30>)
   11b0e:	4b0c      	ldr	r3, [pc, #48]	; (11b40 <z_log_runtime_filters_init+0x34>)
{
	return __log_const_start[source_id].level;
}

void z_log_runtime_filters_init(void)
{
   11b10:	b530      	push	{r4, r5, lr}
   11b12:	1a1b      	subs	r3, r3, r0
   11b14:	4c0b      	ldr	r4, [pc, #44]	; (11b44 <z_log_runtime_filters_init+0x38>)
   11b16:	08db      	lsrs	r3, r3, #3
	 *
	 * Each log source's aggregated runtime level is set to match its
	 * compile-time level. When backends are attached later on in
	 * log_init(), they'll be initialized to the same value.
	 */
	for (int i = 0; i < z_log_sources_count(); i++) {
   11b18:	2100      	movs	r1, #0
	return __log_const_start[source_id].level;
   11b1a:	3004      	adds	r0, #4
	for (int i = 0; i < z_log_sources_count(); i++) {
   11b1c:	4299      	cmp	r1, r3
   11b1e:	d100      	bne.n	11b22 <z_log_runtime_filters_init+0x16>

		LOG_FILTER_SLOT_SET(filters,
				    LOG_FILTER_AGGR_SLOT_IDX,
				    level);
	}
}
   11b20:	bd30      	pop	{r4, r5, pc}
		LOG_FILTER_SLOT_SET(filters,
   11b22:	f810 2031 	ldrb.w	r2, [r0, r1, lsl #3]
   11b26:	6825      	ldr	r5, [r4, #0]
   11b28:	f002 0207 	and.w	r2, r2, #7
   11b2c:	f025 0507 	bic.w	r5, r5, #7
   11b30:	432a      	orrs	r2, r5
   11b32:	f844 2b04 	str.w	r2, [r4], #4
	for (int i = 0; i < z_log_sources_count(); i++) {
   11b36:	3101      	adds	r1, #1
   11b38:	e7f0      	b.n	11b1c <z_log_runtime_filters_init+0x10>
   11b3a:	bf00      	nop
   11b3c:	0002d1e8 	.word	0x0002d1e8
   11b40:	0002d2b8 	.word	0x0002d2b8
   11b44:	20000740 	.word	0x20000740

00011b48 <log_source_name_get>:
   11b48:	4a04      	ldr	r2, [pc, #16]	; (11b5c <log_source_name_get+0x14>)
   11b4a:	4b05      	ldr	r3, [pc, #20]	; (11b60 <log_source_name_get+0x18>)
   11b4c:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   11b4e:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
   11b52:	bf34      	ite	cc
   11b54:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
   11b58:	2000      	movcs	r0, #0
}
   11b5a:	4770      	bx	lr
   11b5c:	0002d1e8 	.word	0x0002d1e8
   11b60:	0002d2b8 	.word	0x0002d2b8

00011b64 <log_filter_get>:
	backend_filter_set(backend, LOG_LEVEL_NONE);
}

uint32_t log_filter_get(struct log_backend const *const backend,
			uint32_t domain_id, int16_t source_id, bool runtime)
{
   11b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b66:	4615      	mov	r5, r2
   11b68:	4c14      	ldr	r4, [pc, #80]	; (11bbc <log_filter_get+0x58>)
   11b6a:	4a15      	ldr	r2, [pc, #84]	; (11bc0 <log_filter_get+0x5c>)
   11b6c:	1b12      	subs	r2, r2, r4
	__ASSERT_NO_MSG(source_id < (int16_t)z_log_sources_count());
   11b6e:	f342 02cf 	sbfx	r2, r2, #3, #16
   11b72:	42aa      	cmp	r2, r5
{
   11b74:	4606      	mov	r6, r0
   11b76:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(source_id < (int16_t)z_log_sources_count());
   11b78:	dc09      	bgt.n	11b8e <log_filter_get+0x2a>
   11b7a:	4912      	ldr	r1, [pc, #72]	; (11bc4 <log_filter_get+0x60>)
   11b7c:	4812      	ldr	r0, [pc, #72]	; (11bc8 <log_filter_get+0x64>)
   11b7e:	4a13      	ldr	r2, [pc, #76]	; (11bcc <log_filter_get+0x68>)
   11b80:	23bc      	movs	r3, #188	; 0xbc
   11b82:	f017 f80a 	bl	28b9a <printk>
   11b86:	4811      	ldr	r0, [pc, #68]	; (11bcc <log_filter_get+0x68>)
   11b88:	21bc      	movs	r1, #188	; 0xbc
   11b8a:	f017 fa47 	bl	2901c <assert_post_action>

	if (IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) && runtime) {
   11b8e:	b17f      	cbz	r7, 11bb0 <log_filter_get+0x4c>
		if (source_id < 0) {
   11b90:	2d00      	cmp	r5, #0
   11b92:	db11      	blt.n	11bb8 <log_filter_get+0x54>
			return LOG_LEVEL_DBG;
		}

		uint32_t *filters = z_log_dynamic_filters_get(source_id);

		return LOG_FILTER_SLOT_GET(filters,
   11b94:	4b0e      	ldr	r3, [pc, #56]	; (11bd0 <log_filter_get+0x6c>)
   11b96:	4630      	mov	r0, r6
   11b98:	f853 4025 	ldr.w	r4, [r3, r5, lsl #2]
   11b9c:	f7ff ffa0 	bl	11ae0 <log_backend_id_get>
   11ba0:	b200      	sxth	r0, r0
   11ba2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11ba6:	fa24 f000 	lsr.w	r0, r4, r0
   11baa:	f000 0007 	and.w	r0, r0, #7
					   log_backend_id_get(backend));
	}

	return log_compiled_level_get(source_id);
}
   11bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __log_const_start[source_id].level;
   11bb0:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
	return log_compiled_level_get(source_id);
   11bb4:	7908      	ldrb	r0, [r1, #4]
   11bb6:	e7fa      	b.n	11bae <log_filter_get+0x4a>
			return LOG_LEVEL_DBG;
   11bb8:	2004      	movs	r0, #4
   11bba:	e7f8      	b.n	11bae <log_filter_get+0x4a>
   11bbc:	0002d1e8 	.word	0x0002d1e8
   11bc0:	0002d2b8 	.word	0x0002d2b8
   11bc4:	0002edf6 	.word	0x0002edf6
   11bc8:	0002e93e 	.word	0x0002e93e
   11bcc:	0002edc9 	.word	0x0002edc9
   11bd0:	20000740 	.word	0x20000740

00011bd4 <z_impl_log_filter_set>:
{
   11bd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11bd8:	4615      	mov	r5, r2
   11bda:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(source_id < (int16_t)z_log_sources_count());
   11bdc:	4a31      	ldr	r2, [pc, #196]	; (11ca4 <z_impl_log_filter_set+0xd0>)
   11bde:	4b32      	ldr	r3, [pc, #200]	; (11ca8 <z_impl_log_filter_set+0xd4>)
   11be0:	1ad2      	subs	r2, r2, r3
   11be2:	f342 02cf 	sbfx	r2, r2, #3, #16
   11be6:	42aa      	cmp	r2, r5
{
   11be8:	4604      	mov	r4, r0
   11bea:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(source_id < (int16_t)z_log_sources_count());
   11bec:	dc09      	bgt.n	11c02 <z_impl_log_filter_set+0x2e>
   11bee:	492f      	ldr	r1, [pc, #188]	; (11cac <z_impl_log_filter_set+0xd8>)
   11bf0:	482f      	ldr	r0, [pc, #188]	; (11cb0 <z_impl_log_filter_set+0xdc>)
   11bf2:	4a30      	ldr	r2, [pc, #192]	; (11cb4 <z_impl_log_filter_set+0xe0>)
   11bf4:	2357      	movs	r3, #87	; 0x57
   11bf6:	f016 ffd0 	bl	28b9a <printk>
   11bfa:	482e      	ldr	r0, [pc, #184]	; (11cb4 <z_impl_log_filter_set+0xe0>)
   11bfc:	2157      	movs	r1, #87	; 0x57
   11bfe:	f017 fa0d 	bl	2901c <assert_post_action>
		if (backend == NULL) {
   11c02:	b9b4      	cbnz	r4, 11c32 <z_impl_log_filter_set+0x5e>
	return __log_backends_end - __log_backends_start;
   11c04:	4b2c      	ldr	r3, [pc, #176]	; (11cb8 <z_impl_log_filter_set+0xe4>)
   11c06:	4f2d      	ldr	r7, [pc, #180]	; (11cbc <z_impl_log_filter_set+0xe8>)
   11c08:	1aff      	subs	r7, r7, r3
   11c0a:	113f      	asrs	r7, r7, #4
			uint32_t max = 0U;
   11c0c:	4626      	mov	r6, r4
   11c0e:	469a      	mov	sl, r3
			for (int i = 0; i < log_backend_count_get(); i++) {
   11c10:	42bc      	cmp	r4, r7
   11c12:	db02      	blt.n	11c1a <z_impl_log_filter_set+0x46>
}
   11c14:	4630      	mov	r0, r6
   11c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		/* coverity[OVERRUN] */
		return (uint32_t) arch_syscall_invoke4(*(uintptr_t *)&backend, *(uintptr_t *)&domain_id, *(uintptr_t *)&source_id, *(uintptr_t *)&level, K_SYSCALL_LOG_FILTER_SET);
	}
#endif
	compiler_barrier();
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   11c1a:	eb0a 1004 	add.w	r0, sl, r4, lsl #4
   11c1e:	4643      	mov	r3, r8
   11c20:	462a      	mov	r2, r5
   11c22:	4649      	mov	r1, r9
   11c24:	f7ff ffd6 	bl	11bd4 <z_impl_log_filter_set>
				max = MAX(current, max);
   11c28:	4286      	cmp	r6, r0
   11c2a:	bf38      	it	cc
   11c2c:	4606      	movcc	r6, r0
			for (int i = 0; i < log_backend_count_get(); i++) {
   11c2e:	3401      	adds	r4, #1
   11c30:	e7ee      	b.n	11c10 <z_impl_log_filter_set+0x3c>
			uint32_t max = log_filter_get(backend, domain_id,
   11c32:	462a      	mov	r2, r5
   11c34:	4649      	mov	r1, r9
   11c36:	2300      	movs	r3, #0
   11c38:	4620      	mov	r0, r4
   11c3a:	f7ff ff93 	bl	11b64 <log_filter_get>
			level = MIN(level, max);
   11c3e:	4540      	cmp	r0, r8
   11c40:	bf28      	it	cs
   11c42:	4640      	movcs	r0, r8
   11c44:	4606      	mov	r6, r0
			LOG_FILTER_SLOT_SET(filters,
   11c46:	4620      	mov	r0, r4
   11c48:	f7ff ff4a 	bl	11ae0 <log_backend_id_get>
   11c4c:	4f1c      	ldr	r7, [pc, #112]	; (11cc0 <z_impl_log_filter_set+0xec>)
   11c4e:	b200      	sxth	r0, r0
   11c50:	2307      	movs	r3, #7
   11c52:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11c56:	fa03 f000 	lsl.w	r0, r3, r0
   11c5a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
   11c5e:	ea23 0300 	bic.w	r3, r3, r0
   11c62:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
   11c66:	4620      	mov	r0, r4
   11c68:	f7ff ff3a 	bl	11ae0 <log_backend_id_get>
   11c6c:	b200      	sxth	r0, r0
   11c6e:	f857 2025 	ldr.w	r2, [r7, r5, lsl #2]
   11c72:	f006 0307 	and.w	r3, r6, #7
   11c76:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11c7a:	4083      	lsls	r3, r0
   11c7c:	4313      	orrs	r3, r2
	uint32_t max_filter = LOG_LEVEL_NONE;
   11c7e:	2100      	movs	r1, #0
			LOG_FILTER_SLOT_SET(filters,
   11c80:	2203      	movs	r2, #3
		uint32_t tmp_filter = LOG_FILTER_SLOT_GET(&filters, i);
   11c82:	fa23 f002 	lsr.w	r0, r3, r2
   11c86:	f000 0007 	and.w	r0, r0, #7
   11c8a:	4281      	cmp	r1, r0
   11c8c:	f102 0203 	add.w	r2, r2, #3
   11c90:	bf38      	it	cc
   11c92:	4601      	movcc	r1, r0
	for (i = first_slot; i < LOG_FILTERS_NUM_OF_SLOTS; i++) {
   11c94:	2a1e      	cmp	r2, #30
   11c96:	d1f4      	bne.n	11c82 <z_impl_log_filter_set+0xae>
			LOG_FILTER_SLOT_SET(filters,
   11c98:	f023 0307 	bic.w	r3, r3, #7
   11c9c:	430b      	orrs	r3, r1
   11c9e:	f847 3025 	str.w	r3, [r7, r5, lsl #2]
	return level;
   11ca2:	e7b7      	b.n	11c14 <z_impl_log_filter_set+0x40>
   11ca4:	0002d2b8 	.word	0x0002d2b8
   11ca8:	0002d1e8 	.word	0x0002d1e8
   11cac:	0002edf6 	.word	0x0002edf6
   11cb0:	0002e93e 	.word	0x0002e93e
   11cb4:	0002edc9 	.word	0x0002edc9
   11cb8:	0002d2b8 	.word	0x0002d2b8
   11cbc:	0002d2d8 	.word	0x0002d2d8
   11cc0:	20000740 	.word	0x20000740

00011cc4 <backend_filter_set>:
{
   11cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cc6:	4c09      	ldr	r4, [pc, #36]	; (11cec <backend_filter_set+0x28>)
   11cc8:	4b09      	ldr	r3, [pc, #36]	; (11cf0 <backend_filter_set+0x2c>)
   11cca:	1ae4      	subs	r4, r4, r3
   11ccc:	4606      	mov	r6, r0
   11cce:	460f      	mov	r7, r1
   11cd0:	08e4      	lsrs	r4, r4, #3
		for (int i = 0; i < z_log_sources_count(); i++) {
   11cd2:	2500      	movs	r5, #0
   11cd4:	42a5      	cmp	r5, r4
   11cd6:	d100      	bne.n	11cda <backend_filter_set+0x16>
}
   11cd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11cda:	2100      	movs	r1, #0
   11cdc:	b22a      	sxth	r2, r5
   11cde:	463b      	mov	r3, r7
   11ce0:	4630      	mov	r0, r6
   11ce2:	f7ff ff77 	bl	11bd4 <z_impl_log_filter_set>
		for (int i = 0; i < z_log_sources_count(); i++) {
   11ce6:	3501      	adds	r5, #1
   11ce8:	e7f4      	b.n	11cd4 <backend_filter_set+0x10>
   11cea:	bf00      	nop
   11cec:	0002d2b8 	.word	0x0002d2b8
   11cf0:	0002d1e8 	.word	0x0002d1e8

00011cf4 <log_backend_enable>:
{
   11cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	id += backend - log_backend_get(0);
   11cf6:	4c10      	ldr	r4, [pc, #64]	; (11d38 <log_backend_enable+0x44>)
   11cf8:	1b04      	subs	r4, r0, r4
   11cfa:	1124      	asrs	r4, r4, #4
   11cfc:	3401      	adds	r4, #1
{
   11cfe:	4605      	mov	r5, r0
   11d00:	460e      	mov	r6, r1
   11d02:	4617      	mov	r7, r2
	log_backend_id_set(backend, id);
   11d04:	b2e4      	uxtb	r4, r4
	__ASSERT_NO_MSG(backend != NULL);
   11d06:	b948      	cbnz	r0, 11d1c <log_backend_enable+0x28>
   11d08:	490c      	ldr	r1, [pc, #48]	; (11d3c <log_backend_enable+0x48>)
   11d0a:	480d      	ldr	r0, [pc, #52]	; (11d40 <log_backend_enable+0x4c>)
   11d0c:	4a0d      	ldr	r2, [pc, #52]	; (11d44 <log_backend_enable+0x50>)
   11d0e:	23d1      	movs	r3, #209	; 0xd1
   11d10:	f016 ff43 	bl	28b9a <printk>
   11d14:	480b      	ldr	r0, [pc, #44]	; (11d44 <log_backend_enable+0x50>)
   11d16:	21d1      	movs	r1, #209	; 0xd1
   11d18:	f017 f980 	bl	2901c <assert_post_action>
	backend->cb->id = id;
   11d1c:	686b      	ldr	r3, [r5, #4]
	backend_filter_set(backend, level);
   11d1e:	4639      	mov	r1, r7
   11d20:	711c      	strb	r4, [r3, #4]
   11d22:	4628      	mov	r0, r5
   11d24:	f7ff ffce 	bl	11cc4 <backend_filter_set>
 */
static inline void log_backend_activate(const struct log_backend *const backend,
					void *ctx)
{
	__ASSERT_NO_MSG(backend != NULL);
	backend->cb->ctx = ctx;
   11d28:	686b      	ldr	r3, [r5, #4]
	backend->cb->active = true;
   11d2a:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   11d2c:	601e      	str	r6, [r3, #0]
	backend->cb->active = true;
   11d2e:	715a      	strb	r2, [r3, #5]
}
   11d30:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_log_notify_backend_enabled();
   11d34:	f7ff bca2 	b.w	1167c <z_log_notify_backend_enabled>
   11d38:	0002d2b8 	.word	0x0002d2b8
   11d3c:	0002edb2 	.word	0x0002edb2
   11d40:	0002e93e 	.word	0x0002e93e
   11d44:	0002ed81 	.word	0x0002ed81

00011d48 <log_backend_disable>:
{
   11d48:	b510      	push	{r4, lr}
 * @param[in] backend  Pointer to the backend instance.
 */
static inline void log_backend_deactivate(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   11d4a:	4604      	mov	r4, r0
   11d4c:	b958      	cbnz	r0, 11d66 <log_backend_disable+0x1e>
   11d4e:	490a      	ldr	r1, [pc, #40]	; (11d78 <log_backend_disable+0x30>)
   11d50:	480a      	ldr	r0, [pc, #40]	; (11d7c <log_backend_disable+0x34>)
   11d52:	4a0b      	ldr	r2, [pc, #44]	; (11d80 <log_backend_disable+0x38>)
   11d54:	f240 130f 	movw	r3, #271	; 0x10f
   11d58:	f016 ff1f 	bl	28b9a <printk>
   11d5c:	4808      	ldr	r0, [pc, #32]	; (11d80 <log_backend_disable+0x38>)
   11d5e:	f240 110f 	movw	r1, #271	; 0x10f
   11d62:	f017 f95b 	bl	2901c <assert_post_action>
	backend->cb->active = false;
   11d66:	6863      	ldr	r3, [r4, #4]
   11d68:	2100      	movs	r1, #0
	backend_filter_set(backend, LOG_LEVEL_NONE);
   11d6a:	4620      	mov	r0, r4
   11d6c:	7159      	strb	r1, [r3, #5]
}
   11d6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	backend_filter_set(backend, LOG_LEVEL_NONE);
   11d72:	f7ff bfa7 	b.w	11cc4 <backend_filter_set>
   11d76:	bf00      	nop
   11d78:	0002edb2 	.word	0x0002edb2
   11d7c:	0002e93e 	.word	0x0002e93e
   11d80:	0002ed81 	.word	0x0002ed81

00011d84 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
   11d84:	2320      	movs	r3, #32
   11d86:	4902      	ldr	r1, [pc, #8]	; (11d90 <log_msg_pool_init+0xc>)
   11d88:	4802      	ldr	r0, [pc, #8]	; (11d94 <log_msg_pool_init+0x10>)
   11d8a:	461a      	mov	r2, r3
   11d8c:	f01a bd5c 	b.w	2c848 <k_mem_slab_init>
   11d90:	20006e18 	.word	0x20006e18
   11d94:	200022d8 	.word	0x200022d8

00011d98 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
   11d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
   11d9a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			z_log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
   11d9c:	4d09      	ldr	r5, [pc, #36]	; (11dc4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
   11d9e:	9301      	str	r3, [sp, #4]
	return z_impl_log_process(bypass);
   11da0:	2001      	movs	r0, #1
   11da2:	f7ff fd0d 	bl	117c0 <z_impl_log_process>
   11da6:	4604      	mov	r4, r0
			z_log_dropped();
   11da8:	f7ff fc76 	bl	11698 <z_log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
   11dac:	2200      	movs	r2, #0
   11dae:	2300      	movs	r3, #0
   11db0:	a901      	add	r1, sp, #4
   11db2:	4628      	mov	r0, r5
   11db4:	f011 fed6 	bl	23b64 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
   11db8:	b108      	cbz	r0, 11dbe <log_msg_no_space_handle+0x26>
   11dba:	2c00      	cmp	r4, #0
   11dbc:	d1f0      	bne.n	11da0 <log_msg_no_space_handle+0x8>
	} else {
		z_log_dropped();
	}
	return msg;

}
   11dbe:	9801      	ldr	r0, [sp, #4]
   11dc0:	b003      	add	sp, #12
   11dc2:	bd30      	pop	{r4, r5, pc}
   11dc4:	200022d8 	.word	0x200022d8

00011dc8 <log_msg_chunk_alloc>:
{
   11dc8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
   11dca:	2300      	movs	r3, #0
   11dcc:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
   11dce:	4807      	ldr	r0, [pc, #28]	; (11dec <log_msg_chunk_alloc+0x24>)
   11dd0:	2200      	movs	r2, #0
   11dd2:	2300      	movs	r3, #0
   11dd4:	a901      	add	r1, sp, #4
   11dd6:	f011 fec5 	bl	23b64 <k_mem_slab_alloc>
	if (err != 0) {
   11dda:	b110      	cbz	r0, 11de2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
   11ddc:	f7ff ffdc 	bl	11d98 <log_msg_no_space_handle>
   11de0:	9001      	str	r0, [sp, #4]
}
   11de2:	9801      	ldr	r0, [sp, #4]
   11de4:	b003      	add	sp, #12
   11de6:	f85d fb04 	ldr.w	pc, [sp], #4
   11dea:	bf00      	nop
   11dec:	200022d8 	.word	0x200022d8

00011df0 <msg_free>:
{
   11df0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   11df2:	7a03      	ldrb	r3, [r0, #8]
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
   11df4:	7a45      	ldrb	r5, [r0, #9]
{
   11df6:	b085      	sub	sp, #20
	return msg->hdr.params.std.nargs;
   11df8:	092d      	lsrs	r5, r5, #4
{
   11dfa:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
   11dfc:	07d8      	lsls	r0, r3, #31
   11dfe:	d41c      	bmi.n	11e3a <msg_free+0x4a>
   11e00:	b1dd      	cbz	r5, 11e3a <msg_free+0x4a>
		uint32_t smask = 0U;
   11e02:	2400      	movs	r4, #0
		for (i = 0U; i < nargs; i++) {
   11e04:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
   11e06:	9801      	ldr	r0, [sp, #4]
   11e08:	4631      	mov	r1, r6
   11e0a:	f017 fb3c 	bl	29486 <log_msg_arg_get>
   11e0e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
   11e10:	f7ff fcc6 	bl	117a0 <log_is_strdup>
   11e14:	b170      	cbz	r0, 11e34 <msg_free+0x44>
				if (smask == 0U) {
   11e16:	b934      	cbnz	r4, 11e26 <msg_free+0x36>
					smask = z_log_get_s_mask(
   11e18:	9b01      	ldr	r3, [sp, #4]
   11e1a:	4629      	mov	r1, r5
   11e1c:	6918      	ldr	r0, [r3, #16]
   11e1e:	f7ff fb77 	bl	11510 <z_log_get_s_mask>
					if (smask == 0U) {
   11e22:	4604      	mov	r4, r0
   11e24:	b148      	cbz	r0, 11e3a <msg_free+0x4a>
				if (smask & BIT(i)) {
   11e26:	fa24 f306 	lsr.w	r3, r4, r6
   11e2a:	07d9      	lsls	r1, r3, #31
   11e2c:	d502      	bpl.n	11e34 <msg_free+0x44>
					z_log_free(buf);
   11e2e:	4638      	mov	r0, r7
   11e30:	f7ff fe3c 	bl	11aac <z_log_free>
		for (i = 0U; i < nargs; i++) {
   11e34:	3601      	adds	r6, #1
   11e36:	42ae      	cmp	r6, r5
   11e38:	d3e5      	bcc.n	11e06 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
   11e3a:	9b01      	ldr	r3, [sp, #4]
   11e3c:	7a1a      	ldrb	r2, [r3, #8]
   11e3e:	0792      	lsls	r2, r2, #30
   11e40:	d504      	bpl.n	11e4c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
   11e42:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   11e44:	4c08      	ldr	r4, [pc, #32]	; (11e68 <msg_free+0x78>)
   11e46:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
   11e48:	9b03      	ldr	r3, [sp, #12]
   11e4a:	b92b      	cbnz	r3, 11e58 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
   11e4c:	4806      	ldr	r0, [pc, #24]	; (11e68 <msg_free+0x78>)
   11e4e:	a901      	add	r1, sp, #4
   11e50:	f011 fef4 	bl	23c3c <k_mem_slab_free>
}
   11e54:	b005      	add	sp, #20
   11e56:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
   11e58:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
   11e5a:	a903      	add	r1, sp, #12
   11e5c:	4620      	mov	r0, r4
   11e5e:	f011 feed 	bl	23c3c <k_mem_slab_free>
		cont = next;
   11e62:	9503      	str	r5, [sp, #12]
   11e64:	e7f0      	b.n	11e48 <msg_free+0x58>
   11e66:	bf00      	nop
   11e68:	200022d8 	.word	0x200022d8

00011e6c <log_msg_create_n>:
	}
}

struct log_msg *log_msg_create_n(const char *str, log_arg_t *args, uint32_t nargs)
{
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   11e6c:	2a0e      	cmp	r2, #14
{
   11e6e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11e72:	4681      	mov	r9, r0
   11e74:	4688      	mov	r8, r1
   11e76:	4615      	mov	r5, r2
	__ASSERT_NO_MSG(nargs < LOG_MAX_NARGS);
   11e78:	d90b      	bls.n	11e92 <log_msg_create_n+0x26>
   11e7a:	492d      	ldr	r1, [pc, #180]	; (11f30 <log_msg_create_n+0xc4>)
   11e7c:	482d      	ldr	r0, [pc, #180]	; (11f34 <log_msg_create_n+0xc8>)
   11e7e:	4a2e      	ldr	r2, [pc, #184]	; (11f38 <log_msg_create_n+0xcc>)
   11e80:	f240 133b 	movw	r3, #315	; 0x13b
   11e84:	f016 fe89 	bl	28b9a <printk>
   11e88:	482b      	ldr	r0, [pc, #172]	; (11f38 <log_msg_create_n+0xcc>)
   11e8a:	f240 113b 	movw	r1, #315	; 0x13b
   11e8e:	f017 f8c5 	bl	2901c <assert_post_action>
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   11e92:	f7ff ff99 	bl	11dc8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   11e96:	4604      	mov	r4, r0
   11e98:	b330      	cbz	r0, 11ee8 <log_msg_create_n+0x7c>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   11e9a:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   11e9c:	2700      	movs	r7, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   11e9e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   11ea0:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   11ea2:	8107      	strh	r7, [r0, #8]
   11ea4:	d909      	bls.n	11eba <log_msg_create_n+0x4e>
	msg->hdr.params.generic.ext = 1;
   11ea6:	2202      	movs	r2, #2
   11ea8:	8102      	strh	r2, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   11eaa:	f1a5 0a02 	sub.w	sl, r5, #2
	next = &msg->payload.ext.next;
   11eae:	f100 0b14 	add.w	fp, r0, #20
	*next = NULL;
   11eb2:	6147      	str	r7, [r0, #20]
	while (n > 0) {
   11eb4:	f1ba 0f00 	cmp.w	sl, #0
   11eb8:	dc0e      	bgt.n	11ed8 <log_msg_create_n+0x6c>

	msg = msg_alloc(nargs);

	if (msg != NULL) {
		msg->str = str;
		msg->hdr.params.std.nargs = nargs;
   11eba:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   11ebc:	f8c4 9010 	str.w	r9, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   11ec0:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   11ec4:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   11ec6:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   11ec8:	d818      	bhi.n	11efc <log_msg_create_n+0x90>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   11eca:	00aa      	lsls	r2, r5, #2
   11ecc:	4641      	mov	r1, r8
   11ece:	f104 0014 	add.w	r0, r4, #20
   11ed2:	f01a fe90 	bl	2cbf6 <memcpy>
	while (nargs != 0U) {
   11ed6:	e007      	b.n	11ee8 <log_msg_create_n+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   11ed8:	f7ff ff76 	bl	11dc8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   11edc:	4606      	mov	r6, r0
   11ede:	b930      	cbnz	r0, 11eee <log_msg_create_n+0x82>
			msg_free(msg);
   11ee0:	4620      	mov	r0, r4
   11ee2:	f7ff ff85 	bl	11df0 <msg_free>
			return NULL;
   11ee6:	4634      	mov	r4, r6
		copy_args_to_msg(msg, args, nargs);
	}

	return msg;
}
   11ee8:	4620      	mov	r0, r4
   11eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   11eee:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   11ef2:	f1aa 0a07 	sub.w	sl, sl, #7
   11ef6:	6007      	str	r7, [r0, #0]
		next = &cont->next;
   11ef8:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   11efa:	e7db      	b.n	11eb4 <log_msg_create_n+0x48>
   11efc:	f8d8 3000 	ldr.w	r3, [r8]
   11f00:	61a3      	str	r3, [r4, #24]
   11f02:	f8d8 3004 	ldr.w	r3, [r8, #4]
	struct log_msg_cont *cont = msg->payload.ext.next;
   11f06:	6967      	ldr	r7, [r4, #20]
   11f08:	61e3      	str	r3, [r4, #28]
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   11f0a:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   11f0c:	f108 0808 	add.w	r8, r8, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   11f10:	2d07      	cmp	r5, #7
   11f12:	462e      	mov	r6, r5
   11f14:	bf28      	it	cs
   11f16:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   11f18:	ea4f 0986 	mov.w	r9, r6, lsl #2
   11f1c:	4641      	mov	r1, r8
   11f1e:	1d38      	adds	r0, r7, #4
   11f20:	464a      	mov	r2, r9
   11f22:	f01a fe68 	bl	2cbf6 <memcpy>
	while (nargs != 0U) {
   11f26:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   11f28:	683f      	ldr	r7, [r7, #0]
		args += cpy_args;
   11f2a:	44c8      	add	r8, r9
	while (nargs != 0U) {
   11f2c:	d1f0      	bne.n	11f10 <log_msg_create_n+0xa4>
   11f2e:	e7db      	b.n	11ee8 <log_msg_create_n+0x7c>
   11f30:	0002ee4d 	.word	0x0002ee4d
   11f34:	0002e93e 	.word	0x0002e93e
   11f38:	0002ee21 	.word	0x0002ee21

00011f3c <log_msg_mem_get_free>:
	return slab->num_blocks - slab->num_used;
   11f3c:	4b02      	ldr	r3, [pc, #8]	; (11f48 <log_msg_mem_get_free+0xc>)
   11f3e:	68d8      	ldr	r0, [r3, #12]
   11f40:	69db      	ldr	r3, [r3, #28]
}

uint32_t log_msg_mem_get_free(void)
{
	return k_mem_slab_num_free_get(&log_msg_pool);
}
   11f42:	1ac0      	subs	r0, r0, r3
   11f44:	4770      	bx	lr
   11f46:	bf00      	nop
   11f48:	200022d8 	.word	0x200022d8

00011f4c <log_msg_mem_get_used>:

uint32_t log_msg_mem_get_used(void)
{
	return k_mem_slab_num_used_get(&log_msg_pool);
}
   11f4c:	4b01      	ldr	r3, [pc, #4]	; (11f54 <log_msg_mem_get_used+0x8>)
   11f4e:	69d8      	ldr	r0, [r3, #28]
   11f50:	4770      	bx	lr
   11f52:	bf00      	nop
   11f54:	200022d8 	.word	0x200022d8

00011f58 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
   11f58:	b40e      	push	{r1, r2, r3}
   11f5a:	b503      	push	{r0, r1, lr}
   11f5c:	ab03      	add	r3, sp, #12
   11f5e:	4601      	mov	r1, r0
   11f60:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
   11f64:	4804      	ldr	r0, [pc, #16]	; (11f78 <print_formatted+0x20>)
	va_start(args, fmt);
   11f66:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
   11f68:	f7fe fe82 	bl	10c70 <cbvprintf>
	va_end(args);

	return length;
}
   11f6c:	b002      	add	sp, #8
   11f6e:	f85d eb04 	ldr.w	lr, [sp], #4
   11f72:	b003      	add	sp, #12
   11f74:	4770      	bx	lr
   11f76:	bf00      	nop
   11f78:	000121e1 	.word	0x000121e1

00011f7c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
   11f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11f80:	b087      	sub	sp, #28
   11f82:	461f      	mov	r7, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   11f84:	f001 0301 	and.w	r3, r1, #1
{
   11f88:	9205      	str	r2, [sp, #20]
   11f8a:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
   11f8e:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
   11f92:	9304      	str	r3, [sp, #16]
{
   11f94:	4606      	mov	r6, r0
   11f96:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
   11f98:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
   11f9c:	f001 0508 	and.w	r5, r1, #8
	const char *tag = z_log_get_tag();
   11fa0:	f017 fa09 	bl	293b6 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
   11fa4:	4602      	mov	r2, r0
   11fa6:	2800      	cmp	r0, #0
   11fa8:	d044      	beq.n	12034 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
   11faa:	4939      	ldr	r1, [pc, #228]	; (12090 <prefix_print+0x114>)
   11fac:	4630      	mov	r0, r6
   11fae:	f7ff ffd3 	bl	11f58 <print_formatted>
   11fb2:	4604      	mov	r4, r0
	}

	if (stamp) {
   11fb4:	f1bb 0f00 	cmp.w	fp, #0
   11fb8:	d008      	beq.n	11fcc <prefix_print+0x50>
	if (!format) {
   11fba:	f018 0f44 	tst.w	r8, #68	; 0x44
   11fbe:	d13b      	bne.n	12038 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
   11fc0:	4934      	ldr	r1, [pc, #208]	; (12094 <prefix_print+0x118>)
   11fc2:	463a      	mov	r2, r7
   11fc4:	4630      	mov	r0, r6
   11fc6:	f7ff ffc7 	bl	11f58 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
   11fca:	4404      	add	r4, r0
	if (color) {
   11fcc:	9b04      	ldr	r3, [sp, #16]
   11fce:	b153      	cbz	r3, 11fe6 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
   11fd0:	4b31      	ldr	r3, [pc, #196]	; (12098 <prefix_print+0x11c>)
		print_formatted(output, "%s", log_color);
   11fd2:	4932      	ldr	r1, [pc, #200]	; (1209c <prefix_print+0x120>)
		const char *log_color = start && (colors[level] != NULL) ?
   11fd4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
   11fd8:	4b31      	ldr	r3, [pc, #196]	; (120a0 <prefix_print+0x124>)
   11fda:	4630      	mov	r0, r6
   11fdc:	2a00      	cmp	r2, #0
   11fde:	bf08      	it	eq
   11fe0:	461a      	moveq	r2, r3
   11fe2:	f7ff ffb9 	bl	11f58 <print_formatted>
	if (level_on) {
   11fe6:	b13d      	cbz	r5, 11ff8 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
   11fe8:	4b2e      	ldr	r3, [pc, #184]	; (120a4 <prefix_print+0x128>)
   11fea:	492f      	ldr	r1, [pc, #188]	; (120a8 <prefix_print+0x12c>)
   11fec:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
   11ff0:	4630      	mov	r0, r6
   11ff2:	f7ff ffb1 	bl	11f58 <print_formatted>
   11ff6:	4605      	mov	r5, r0
	if (source_id >= 0) {
   11ff8:	f1ba 0f00 	cmp.w	sl, #0
   11ffc:	db16      	blt.n	1202c <prefix_print+0xb0>
		total += print_formatted(output,
   11ffe:	9b05      	ldr	r3, [sp, #20]
   12000:	2b00      	cmp	r3, #0
   12002:	d043      	beq.n	1208c <prefix_print+0x110>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
   12004:	2301      	movs	r3, #1
   12006:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
   1200a:	4b28      	ldr	r3, [pc, #160]	; (120ac <prefix_print+0x130>)
   1200c:	4f28      	ldr	r7, [pc, #160]	; (120b0 <prefix_print+0x134>)
   1200e:	f019 0f10 	tst.w	r9, #16
   12012:	bf18      	it	ne
   12014:	461f      	movne	r7, r3
   12016:	4651      	mov	r1, sl
   12018:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
   1201c:	f7ff fd94 	bl	11b48 <log_source_name_get>
   12020:	4639      	mov	r1, r7
   12022:	4602      	mov	r2, r0
   12024:	4630      	mov	r0, r6
   12026:	f7ff ff97 	bl	11f58 <print_formatted>
   1202a:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
   1202c:	1928      	adds	r0, r5, r4
   1202e:	b007      	add	sp, #28
   12030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
   12034:	4604      	mov	r4, r0
   12036:	e7bd      	b.n	11fb4 <prefix_print+0x38>
	} else if (freq != 0U) {
   12038:	4b1e      	ldr	r3, [pc, #120]	; (120b4 <prefix_print+0x138>)
   1203a:	6818      	ldr	r0, [r3, #0]
   1203c:	2800      	cmp	r0, #0
   1203e:	d0c4      	beq.n	11fca <prefix_print+0x4e>
		timestamp /= timestamp_div;
   12040:	4b1d      	ldr	r3, [pc, #116]	; (120b8 <prefix_print+0x13c>)
   12042:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
   12046:	6819      	ldr	r1, [r3, #0]
   12048:	fbb7 f7f1 	udiv	r7, r7, r1
		total_seconds = timestamp / freq;
   1204c:	fbb7 f1f0 	udiv	r1, r7, r0
		remainder = timestamp % freq;
   12050:	fb00 7711 	mls	r7, r0, r1, r7
   12054:	fbb1 f2fc 	udiv	r2, r1, ip
   12058:	fb0c 1c12 	mls	ip, ip, r2, r1
		ms = (remainder * 1000U) / freq;
   1205c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   12060:	434f      	muls	r7, r1
		mins = seconds / 60U;
   12062:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12066:	fbb7 f8f0 	udiv	r8, r7, r0
   1206a:	fb00 7718 	mls	r7, r0, r8, r7
   1206e:	434f      	muls	r7, r1
		mins = seconds / 60U;
   12070:	fbbc f3fe 	udiv	r3, ip, lr
			length = print_formatted(output,
   12074:	fb0e c113 	mls	r1, lr, r3, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
   12078:	fbb7 f0f0 	udiv	r0, r7, r0
			length = print_formatted(output,
   1207c:	9100      	str	r1, [sp, #0]
   1207e:	e9cd 8001 	strd	r8, r0, [sp, #4]
   12082:	490e      	ldr	r1, [pc, #56]	; (120bc <prefix_print+0x140>)
   12084:	4630      	mov	r0, r6
   12086:	f7ff ff67 	bl	11f58 <print_formatted>
   1208a:	e79e      	b.n	11fca <prefix_print+0x4e>
		total += print_formatted(output,
   1208c:	4f08      	ldr	r7, [pc, #32]	; (120b0 <prefix_print+0x134>)
   1208e:	e7c2      	b.n	12016 <prefix_print+0x9a>
   12090:	0002ee66 	.word	0x0002ee66
   12094:	0002ee6a 	.word	0x0002ee6a
   12098:	0002d5dc 	.word	0x0002d5dc
   1209c:	0002f5ab 	.word	0x0002f5ab
   120a0:	0002ee58 	.word	0x0002ee58
   120a4:	0002d5f0 	.word	0x0002d5f0
   120a8:	0002ee8f 	.word	0x0002ee8f
   120ac:	0002ee62 	.word	0x0002ee62
   120b0:	0002ee5d 	.word	0x0002ee5d
   120b4:	200022f8 	.word	0x200022f8
   120b8:	200022fc 	.word	0x200022fc
   120bc:	0002ee73 	.word	0x0002ee73

000120c0 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
   120c0:	b538      	push	{r3, r4, r5, lr}
   120c2:	460c      	mov	r4, r1
	if (color) {
   120c4:	07e1      	lsls	r1, r4, #31
{
   120c6:	4605      	mov	r5, r0
	if (color) {
   120c8:	d503      	bpl.n	120d2 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
   120ca:	4a08      	ldr	r2, [pc, #32]	; (120ec <postfix_print+0x2c>)
   120cc:	4908      	ldr	r1, [pc, #32]	; (120f0 <postfix_print+0x30>)
   120ce:	f7ff ff43 	bl	11f58 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   120d2:	06e2      	lsls	r2, r4, #27
   120d4:	d408      	bmi.n	120e8 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   120d6:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
   120d8:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
   120da:	bf4c      	ite	mi
   120dc:	4905      	ldrmi	r1, [pc, #20]	; (120f4 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
   120de:	4906      	ldrpl	r1, [pc, #24]	; (120f8 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
   120e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
   120e4:	f7ff bf38 	b.w	11f58 <print_formatted>
}
   120e8:	bd38      	pop	{r3, r4, r5, pc}
   120ea:	bf00      	nop
   120ec:	0002ee58 	.word	0x0002ee58
   120f0:	0002f5ab 	.word	0x0002f5ab
   120f4:	0003329a 	.word	0x0003329a
   120f8:	0002eff4 	.word	0x0002eff4

000120fc <hexdump_line_print>:
{
   120fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12100:	461d      	mov	r5, r3
   12102:	9b08      	ldr	r3, [sp, #32]
   12104:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   12106:	06da      	lsls	r2, r3, #27
{
   12108:	4604      	mov	r4, r0
   1210a:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
   1210c:	d405      	bmi.n	1211a <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
   1210e:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
   12110:	bf4c      	ite	mi
   12112:	492b      	ldrmi	r1, [pc, #172]	; (121c0 <hexdump_line_print+0xc4>)
		print_formatted(ctx, "\r\n");
   12114:	492b      	ldrpl	r1, [pc, #172]	; (121c4 <hexdump_line_print+0xc8>)
   12116:	f7ff ff1f 	bl	11f58 <print_formatted>
		print_formatted(output, " ");
   1211a:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 121cc <hexdump_line_print+0xd0>
{
   1211e:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
   12122:	45a8      	cmp	r8, r5
   12124:	db2d      	blt.n	12182 <hexdump_line_print+0x86>
			print_formatted(output, "   ");
   12126:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 121d0 <hexdump_line_print+0xd4>
			print_formatted(output, "%02x ", data[i]);
   1212a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 121d4 <hexdump_line_print+0xd8>
			print_formatted(output, " ");
   1212e:	f8df a09c 	ldr.w	sl, [pc, #156]	; 121cc <hexdump_line_print+0xd0>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12132:	2500      	movs	r5, #0
		if (i < length) {
   12134:	42bd      	cmp	r5, r7
   12136:	d232      	bcs.n	1219e <hexdump_line_print+0xa2>
			print_formatted(output, "%02x ", data[i]);
   12138:	5d72      	ldrb	r2, [r6, r5]
   1213a:	4649      	mov	r1, r9
   1213c:	4620      	mov	r0, r4
   1213e:	f7ff ff0b 	bl	11f58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12142:	3501      	adds	r5, #1
   12144:	2d10      	cmp	r5, #16
   12146:	d123      	bne.n	12190 <hexdump_line_print+0x94>
	print_formatted(output, "|");
   12148:	491f      	ldr	r1, [pc, #124]	; (121c8 <hexdump_line_print+0xcc>)
			print_formatted(output, " ");
   1214a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 121cc <hexdump_line_print+0xd0>
			      isprint((int)c) ? c : '.');
   1214e:	f8df 9088 	ldr.w	r9, [pc, #136]	; 121d8 <hexdump_line_print+0xdc>
			print_formatted(output, "%c",
   12152:	f8df a088 	ldr.w	sl, [pc, #136]	; 121dc <hexdump_line_print+0xe0>
	print_formatted(output, "|");
   12156:	4620      	mov	r0, r4
   12158:	f7ff fefe 	bl	11f58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   1215c:	2500      	movs	r5, #0
		if (i < length) {
   1215e:	42af      	cmp	r7, r5
   12160:	d929      	bls.n	121b6 <hexdump_line_print+0xba>
			char c = (char)data[i];
   12162:	5d72      	ldrb	r2, [r6, r5]
			print_formatted(output, "%c",
   12164:	f812 3009 	ldrb.w	r3, [r2, r9]
   12168:	f013 0f97 	tst.w	r3, #151	; 0x97
   1216c:	bf08      	it	eq
   1216e:	222e      	moveq	r2, #46	; 0x2e
   12170:	4651      	mov	r1, sl
   12172:	4620      	mov	r0, r4
   12174:	f7ff fef0 	bl	11f58 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
   12178:	3501      	adds	r5, #1
   1217a:	2d10      	cmp	r5, #16
   1217c:	d114      	bne.n	121a8 <hexdump_line_print+0xac>
}
   1217e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
   12182:	4649      	mov	r1, r9
   12184:	4620      	mov	r0, r4
   12186:	f7ff fee7 	bl	11f58 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
   1218a:	f108 0801 	add.w	r8, r8, #1
   1218e:	e7c8      	b.n	12122 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
   12190:	076a      	lsls	r2, r5, #29
   12192:	d1cf      	bne.n	12134 <hexdump_line_print+0x38>
			print_formatted(output, " ");
   12194:	4651      	mov	r1, sl
   12196:	4620      	mov	r0, r4
   12198:	f7ff fede 	bl	11f58 <print_formatted>
   1219c:	e7ca      	b.n	12134 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
   1219e:	4641      	mov	r1, r8
   121a0:	4620      	mov	r0, r4
   121a2:	f7ff fed9 	bl	11f58 <print_formatted>
   121a6:	e7cc      	b.n	12142 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
   121a8:	076b      	lsls	r3, r5, #29
   121aa:	d1d8      	bne.n	1215e <hexdump_line_print+0x62>
			print_formatted(output, " ");
   121ac:	4641      	mov	r1, r8
   121ae:	4620      	mov	r0, r4
   121b0:	f7ff fed2 	bl	11f58 <print_formatted>
   121b4:	e7d3      	b.n	1215e <hexdump_line_print+0x62>
			print_formatted(output, " ");
   121b6:	4641      	mov	r1, r8
   121b8:	4620      	mov	r0, r4
   121ba:	f7ff fecd 	bl	11f58 <print_formatted>
   121be:	e7db      	b.n	12178 <hexdump_line_print+0x7c>
   121c0:	0003329a 	.word	0x0003329a
   121c4:	0002eff4 	.word	0x0002eff4
   121c8:	0002ee9f 	.word	0x0002ee9f
   121cc:	0002ee9d 	.word	0x0002ee9d
   121d0:	0002ee9b 	.word	0x0002ee9b
   121d4:	0002ee95 	.word	0x0002ee95
   121d8:	00034540 	.word	0x00034540
   121dc:	0002fd9e 	.word	0x0002fd9e

000121e0 <out_func>:
{
   121e0:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   121e2:	684b      	ldr	r3, [r1, #4]
   121e4:	681a      	ldr	r2, [r3, #0]
   121e6:	68cb      	ldr	r3, [r1, #12]
   121e8:	429a      	cmp	r2, r3
{
   121ea:	4605      	mov	r5, r0
   121ec:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   121ee:	d102      	bne.n	121f6 <out_func+0x16>
		log_output_flush(out_ctx);
   121f0:	4608      	mov	r0, r1
   121f2:	f017 fb3f 	bl	29874 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   121f6:	6863      	ldr	r3, [r4, #4]
   121f8:	f3bf 8f5b 	dmb	ish
   121fc:	e853 2f00 	ldrex	r2, [r3]
   12200:	1c51      	adds	r1, r2, #1
   12202:	e843 1000 	strex	r0, r1, [r3]
   12206:	2800      	cmp	r0, #0
   12208:	d1f8      	bne.n	121fc <out_func+0x1c>
   1220a:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   1220e:	68a3      	ldr	r3, [r4, #8]
   12210:	549d      	strb	r5, [r3, r2]
	__ASSERT_NO_MSG(out_ctx->control_block->offset <= out_ctx->size);
   12212:	6863      	ldr	r3, [r4, #4]
   12214:	681a      	ldr	r2, [r3, #0]
   12216:	68e3      	ldr	r3, [r4, #12]
   12218:	429a      	cmp	r2, r3
   1221a:	d909      	bls.n	12230 <out_func+0x50>
   1221c:	4905      	ldr	r1, [pc, #20]	; (12234 <out_func+0x54>)
   1221e:	4806      	ldr	r0, [pc, #24]	; (12238 <out_func+0x58>)
   12220:	4a06      	ldr	r2, [pc, #24]	; (1223c <out_func+0x5c>)
   12222:	2374      	movs	r3, #116	; 0x74
   12224:	f016 fcb9 	bl	28b9a <printk>
   12228:	4804      	ldr	r0, [pc, #16]	; (1223c <out_func+0x5c>)
   1222a:	2174      	movs	r1, #116	; 0x74
   1222c:	f016 fef6 	bl	2901c <assert_post_action>
}
   12230:	2000      	movs	r0, #0
   12232:	bd38      	pop	{r3, r4, r5, pc}
   12234:	0002eed0 	.word	0x0002eed0
   12238:	0002e93e 	.word	0x0002e93e
   1223c:	0002eea1 	.word	0x0002eea1

00012240 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg,
			    uint32_t flags)
{
   12240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
   12244:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(output, flags, std_msg, timestamp,
   12246:	f013 0707 	ands.w	r7, r3, #7
{
   1224a:	4616      	mov	r6, r2
   1224c:	b08a      	sub	sp, #40	; 0x28
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   1224e:	7a0a      	ldrb	r2, [r1, #8]
   12250:	4604      	mov	r4, r0
   12252:	460d      	mov	r5, r1
			0 : prefix_print(output, flags, std_msg, timestamp,
   12254:	d020      	beq.n	12298 <log_output_msg_process+0x58>
	return msg->hdr.ids.source_id;
   12256:	8949      	ldrh	r1, [r1, #10]
   12258:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1225c:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
   12260:	43d2      	mvns	r2, r2
   12262:	e9cd 7300 	strd	r7, r3, [sp]
   12266:	9102      	str	r1, [sp, #8]
   12268:	68eb      	ldr	r3, [r5, #12]
   1226a:	f002 0201 	and.w	r2, r2, #1
   1226e:	4631      	mov	r1, r6
   12270:	f7ff fe84 	bl	11f7c <prefix_print>
   12274:	4681      	mov	r9, r0
   12276:	7a2b      	ldrb	r3, [r5, #8]
   12278:	43db      	mvns	r3, r3
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
   1227a:	f013 0801 	ands.w	r8, r3, #1
   1227e:	d00d      	beq.n	1229c <log_output_msg_process+0x5c>
		std_print(msg, output);
   12280:	4621      	mov	r1, r4
   12282:	4628      	mov	r0, r5
   12284:	f017 f999 	bl	295ba <std_print>
		raw_string_print(msg, output);
	} else {
		hexdump_print(msg, output, prefix_offset, flags);
	}

	if (!raw_string) {
   12288:	2f00      	cmp	r7, #0
   1228a:	d03c      	beq.n	12306 <log_output_msg_process+0xc6>
		postfix_print(output, flags, level);
   1228c:	463a      	mov	r2, r7
   1228e:	4631      	mov	r1, r6
   12290:	4620      	mov	r0, r4
   12292:	f7ff ff15 	bl	120c0 <postfix_print>
   12296:	e036      	b.n	12306 <log_output_msg_process+0xc6>
			0 : prefix_print(output, flags, std_msg, timestamp,
   12298:	46b9      	mov	r9, r7
   1229a:	e7ec      	b.n	12276 <log_output_msg_process+0x36>
	} else if (raw_string) {
   1229c:	2f00      	cmp	r7, #0
   1229e:	d138      	bne.n	12312 <log_output_msg_process+0xd2>
	__ASSERT_NO_MSG(output->size);
   122a0:	68e3      	ldr	r3, [r4, #12]
   122a2:	b95b      	cbnz	r3, 122bc <log_output_msg_process+0x7c>
   122a4:	492a      	ldr	r1, [pc, #168]	; (12350 <log_output_msg_process+0x110>)
   122a6:	482b      	ldr	r0, [pc, #172]	; (12354 <log_output_msg_process+0x114>)
   122a8:	4a2b      	ldr	r2, [pc, #172]	; (12358 <log_output_msg_process+0x118>)
   122aa:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   122ae:	f016 fc74 	bl	28b9a <printk>
   122b2:	4829      	ldr	r0, [pc, #164]	; (12358 <log_output_msg_process+0x118>)
   122b4:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   122b8:	f016 feb0 	bl	2901c <assert_post_action>
			0 : prefix_print(output, flags, std_msg, timestamp,
   122bc:	2600      	movs	r6, #0
		length = output->size;
   122be:	68e3      	ldr	r3, [r4, #12]
   122c0:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, output->buf, &length, offset);
   122c2:	aa06      	add	r2, sp, #24
   122c4:	4633      	mov	r3, r6
   122c6:	68a1      	ldr	r1, [r4, #8]
   122c8:	4628      	mov	r0, r5
   122ca:	f017 f962 	bl	29592 <log_msg_hexdump_data_get>
		output->control_block->offset = length;
   122ce:	9a06      	ldr	r2, [sp, #24]
   122d0:	6863      	ldr	r3, [r4, #4]
   122d2:	601a      	str	r2, [r3, #0]
		if (length != 0) {
   122d4:	b14a      	cbz	r2, 122ea <log_output_msg_process+0xaa>
			eol = (output->buf[length - 1] == '\n');
   122d6:	68a3      	ldr	r3, [r4, #8]
   122d8:	4413      	add	r3, r2
   122da:	f813 8c01 	ldrb.w	r8, [r3, #-1]
   122de:	f1a8 030a 	sub.w	r3, r8, #10
   122e2:	f1d3 0800 	rsbs	r8, r3, #0
   122e6:	eb48 0803 	adc.w	r8, r8, r3
		log_output_flush(output);
   122ea:	4620      	mov	r0, r4
   122ec:	f017 fac2 	bl	29874 <log_output_flush>
		offset += length;
   122f0:	9b06      	ldr	r3, [sp, #24]
   122f2:	441e      	add	r6, r3
	} while (length > 0);
   122f4:	2b00      	cmp	r3, #0
   122f6:	d1e2      	bne.n	122be <log_output_msg_process+0x7e>
	if (eol) {
   122f8:	f1b8 0f00 	cmp.w	r8, #0
   122fc:	d003      	beq.n	12306 <log_output_msg_process+0xc6>
		print_formatted(output, "\r");
   122fe:	4917      	ldr	r1, [pc, #92]	; (1235c <log_output_msg_process+0x11c>)
   12300:	4620      	mov	r0, r4
   12302:	f7ff fe29 	bl	11f58 <print_formatted>
	}

	log_output_flush(output);
   12306:	4620      	mov	r0, r4
   12308:	f017 fab4 	bl	29874 <log_output_flush>
}
   1230c:	b00a      	add	sp, #40	; 0x28
   1230e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	print_formatted(output, "%s", log_msg_str_get(msg));
   12312:	4628      	mov	r0, r5
   12314:	f017 f8e9 	bl	294ea <log_msg_str_get>
   12318:	4911      	ldr	r1, [pc, #68]	; (12360 <log_output_msg_process+0x120>)
   1231a:	4602      	mov	r2, r0
   1231c:	4620      	mov	r0, r4
   1231e:	f7ff fe1b 	bl	11f58 <print_formatted>
		length = sizeof(buf);
   12322:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12326:	aa05      	add	r2, sp, #20
   12328:	4643      	mov	r3, r8
   1232a:	a906      	add	r1, sp, #24
   1232c:	4628      	mov	r0, r5
		length = sizeof(buf);
   1232e:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
   12332:	f017 f92e 	bl	29592 <log_msg_hexdump_data_get>
		if (length) {
   12336:	9a05      	ldr	r2, [sp, #20]
   12338:	2a00      	cmp	r2, #0
   1233a:	d0a7      	beq.n	1228c <log_output_msg_process+0x4c>
			hexdump_line_print(output, buf, length,
   1233c:	464b      	mov	r3, r9
   1233e:	9600      	str	r6, [sp, #0]
   12340:	a906      	add	r1, sp, #24
   12342:	4620      	mov	r0, r4
   12344:	f7ff feda 	bl	120fc <hexdump_line_print>
			offset += length;
   12348:	9b05      	ldr	r3, [sp, #20]
   1234a:	4498      	add	r8, r3
		length = sizeof(buf);
   1234c:	e7eb      	b.n	12326 <log_output_msg_process+0xe6>
   1234e:	bf00      	nop
   12350:	0002ef00 	.word	0x0002ef00
   12354:	0002e93e 	.word	0x0002e93e
   12358:	0002eea1 	.word	0x0002eea1
   1235c:	0002ef0d 	.word	0x0002ef0d
   12360:	0002f5ab 	.word	0x0002f5ab

00012364 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
   12364:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12366:	f242 730f 	movw	r3, #9999	; 0x270f
   1236a:	428b      	cmp	r3, r1
   1236c:	bf28      	it	cs
   1236e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
   12370:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12372:	4a0f      	ldr	r2, [pc, #60]	; (123b0 <log_output_dropped_process+0x4c>)
{
   12374:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12376:	2105      	movs	r1, #5
   12378:	4668      	mov	r0, sp
   1237a:	f016 fc1b 	bl	28bb4 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   1237e:	6863      	ldr	r3, [r4, #4]
   12380:	490c      	ldr	r1, [pc, #48]	; (123b4 <log_output_dropped_process+0x50>)
   12382:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
   12384:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
   12386:	220b      	movs	r2, #11
   12388:	4628      	mov	r0, r5
   1238a:	f017 f909 	bl	295a0 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
   1238e:	6863      	ldr	r3, [r4, #4]
   12390:	4632      	mov	r2, r6
   12392:	4669      	mov	r1, sp
   12394:	4628      	mov	r0, r5
   12396:	685b      	ldr	r3, [r3, #4]
   12398:	f017 f902 	bl	295a0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
   1239c:	6863      	ldr	r3, [r4, #4]
   1239e:	4906      	ldr	r1, [pc, #24]	; (123b8 <log_output_dropped_process+0x54>)
   123a0:	685b      	ldr	r3, [r3, #4]
   123a2:	221b      	movs	r2, #27
   123a4:	4628      	mov	r0, r5
   123a6:	f017 f8fb 	bl	295a0 <buffer_write>
		     output->control_block->ctx);
}
   123aa:	b002      	add	sp, #8
   123ac:	bd70      	pop	{r4, r5, r6, pc}
   123ae:	bf00      	nop
   123b0:	000339b2 	.word	0x000339b2
   123b4:	0002ef4b 	.word	0x0002ef4b
   123b8:	0002ef2f 	.word	0x0002ef2f

000123bc <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
   123bc:	4a08      	ldr	r2, [pc, #32]	; (123e0 <log_output_timestamp_freq_set+0x24>)
{
   123be:	b510      	push	{r4, lr}
	timestamp_div = 1U;
   123c0:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
   123c2:	4c08      	ldr	r4, [pc, #32]	; (123e4 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
   123c4:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
   123c6:	2100      	movs	r1, #0
   123c8:	42a0      	cmp	r0, r4
   123ca:	d804      	bhi.n	123d6 <log_output_timestamp_freq_set+0x1a>
   123cc:	b101      	cbz	r1, 123d0 <log_output_timestamp_freq_set+0x14>
   123ce:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
   123d0:	4b05      	ldr	r3, [pc, #20]	; (123e8 <log_output_timestamp_freq_set+0x2c>)
   123d2:	6018      	str	r0, [r3, #0]
}
   123d4:	bd10      	pop	{r4, pc}
		frequency /= 2U;
   123d6:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
   123d8:	005b      	lsls	r3, r3, #1
   123da:	2101      	movs	r1, #1
   123dc:	e7f4      	b.n	123c8 <log_output_timestamp_freq_set+0xc>
   123de:	bf00      	nop
   123e0:	200022fc 	.word	0x200022fc
   123e4:	000f4240 	.word	0x000f4240
   123e8:	200022f8 	.word	0x200022f8

000123ec <severity_lvl_get>:
}


static void severity_lvl_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   123ec:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &dsub_module_name;
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
					severity_lvls_sorted[idx] : NULL;
   123ee:	2804      	cmp	r0, #4
	entry->handler = NULL;
   123f0:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   123f2:	604b      	str	r3, [r1, #4]
					severity_lvls_sorted[idx] : NULL;
   123f4:	bf98      	it	ls
   123f6:	4b04      	ldrls	r3, [pc, #16]	; (12408 <severity_lvl_get+0x1c>)
	entry->subcmd = &dsub_module_name;
   123f8:	4a04      	ldr	r2, [pc, #16]	; (1240c <severity_lvl_get+0x20>)
					severity_lvls_sorted[idx] : NULL;
   123fa:	bf98      	it	ls
   123fc:	f853 3020 	ldrls.w	r3, [r3, r0, lsl #2]
	entry->subcmd = &dsub_module_name;
   12400:	608a      	str	r2, [r1, #8]
	entry->syntax = (idx < ARRAY_SIZE(severity_lvls_sorted)) ?
   12402:	600b      	str	r3, [r1, #0]
}
   12404:	4770      	bx	lr
   12406:	bf00      	nop
   12408:	0002d644 	.word	0x0002d644
   1240c:	0002d620 	.word	0x0002d620

00012410 <backend_name_get>:
	SHELL_SUBCMD_SET_END
);

static void backend_name_get(size_t idx, struct shell_static_entry *entry)
{
	entry->handler = NULL;
   12410:	2300      	movs	r3, #0
	entry->help  = NULL;
	entry->subcmd = &sub_log_backend;
   12412:	4a08      	ldr	r2, [pc, #32]	; (12434 <backend_name_get+0x24>)
	entry->syntax  = NULL;
   12414:	600b      	str	r3, [r1, #0]
	entry->handler = NULL;
   12416:	60cb      	str	r3, [r1, #12]
	entry->help  = NULL;
   12418:	604b      	str	r3, [r1, #4]
	entry->subcmd = &sub_log_backend;
   1241a:	608a      	str	r2, [r1, #8]
	return __log_backends_end - __log_backends_start;
   1241c:	4b06      	ldr	r3, [pc, #24]	; (12438 <backend_name_get+0x28>)
   1241e:	4a07      	ldr	r2, [pc, #28]	; (1243c <backend_name_get+0x2c>)
   12420:	1ad2      	subs	r2, r2, r3

	if (idx < log_backend_count_get()) {
   12422:	ebb0 1f22 	cmp.w	r0, r2, asr #4
		const struct log_backend *backend = log_backend_get(idx);

		entry->syntax = backend->name;
   12426:	bf3e      	ittt	cc
   12428:	eb03 1300 	addcc.w	r3, r3, r0, lsl #4
   1242c:	689b      	ldrcc	r3, [r3, #8]
   1242e:	600b      	strcc	r3, [r1, #0]
	}
}
   12430:	4770      	bx	lr
   12432:	bf00      	nop
   12434:	0002d798 	.word	0x0002d798
   12438:	0002d2b8 	.word	0x0002d2b8
   1243c:	0002d2d8 	.word	0x0002d2d8

00012440 <cmd_log_memory_slabs>:
{
   12440:	b538      	push	{r3, r4, r5, lr}
   12442:	4604      	mov	r4, r0
	slabs_free = log_msg_mem_get_free();
   12444:	f7ff fd7a 	bl	11f3c <log_msg_mem_get_free>
   12448:	4605      	mov	r5, r0
	used = log_msg_mem_get_used();
   1244a:	f7ff fd7f 	bl	11f4c <log_msg_mem_get_used>
	shell_print(sh, "Blocks used:\t%d", used);
   1244e:	4a09      	ldr	r2, [pc, #36]	; (12474 <cmd_log_memory_slabs+0x34>)
	used = log_msg_mem_get_used();
   12450:	4603      	mov	r3, r0
	shell_print(sh, "Blocks used:\t%d", used);
   12452:	2108      	movs	r1, #8
   12454:	4620      	mov	r0, r4
   12456:	f017 fb91 	bl	29b7c <shell_fprintf>
	shell_print(sh, "Blocks free:\t%d", slabs_free);
   1245a:	462b      	mov	r3, r5
   1245c:	4620      	mov	r0, r4
   1245e:	4a06      	ldr	r2, [pc, #24]	; (12478 <cmd_log_memory_slabs+0x38>)
   12460:	2108      	movs	r1, #8
   12462:	f017 fb8b 	bl	29b7c <shell_fprintf>
		shell_print(
   12466:	4620      	mov	r0, r4
   12468:	4a04      	ldr	r2, [pc, #16]	; (1247c <cmd_log_memory_slabs+0x3c>)
   1246a:	2108      	movs	r1, #8
   1246c:	f017 fb86 	bl	29b7c <shell_fprintf>
}
   12470:	2000      	movs	r0, #0
   12472:	bd38      	pop	{r3, r4, r5, pc}
   12474:	0002ef57 	.word	0x0002ef57
   12478:	0002ef68 	.word	0x0002ef68
   1247c:	0002ef79 	.word	0x0002ef79

00012480 <cmd_log_backends_list>:
{
   12480:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   12484:	4c11      	ldr	r4, [pc, #68]	; (124cc <cmd_log_backends_list+0x4c>)
   12486:	4d12      	ldr	r5, [pc, #72]	; (124d0 <cmd_log_backends_list+0x50>)
		shell_fprintf(shell, SHELL_NORMAL,
   12488:	f8df 8048 	ldr.w	r8, [pc, #72]	; 124d4 <cmd_log_backends_list+0x54>
   1248c:	f8df 9048 	ldr.w	r9, [pc, #72]	; 124d8 <cmd_log_backends_list+0x58>
   12490:	f8df a048 	ldr.w	sl, [pc, #72]	; 124dc <cmd_log_backends_list+0x5c>
   12494:	1b2d      	subs	r5, r5, r4
{
   12496:	4607      	mov	r7, r0
   12498:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < backend_count; i++) {
   1249a:	2600      	movs	r6, #0
   1249c:	42ae      	cmp	r6, r5
   1249e:	db03      	blt.n	124a8 <cmd_log_backends_list+0x28>
}
   124a0:	2000      	movs	r0, #0
   124a2:	b002      	add	sp, #8
   124a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			      backend->cb->active ? "enabled" : "disabled",
   124a8:	6862      	ldr	r2, [r4, #4]
		shell_fprintf(shell, SHELL_NORMAL,
   124aa:	7953      	ldrb	r3, [r2, #5]
   124ac:	7912      	ldrb	r2, [r2, #4]
   124ae:	2b00      	cmp	r3, #0
   124b0:	bf14      	ite	ne
   124b2:	4643      	movne	r3, r8
   124b4:	464b      	moveq	r3, r9
   124b6:	e9cd 3200 	strd	r3, r2, [sp]
   124ba:	2108      	movs	r1, #8
   124bc:	68a3      	ldr	r3, [r4, #8]
   124be:	4652      	mov	r2, sl
   124c0:	4638      	mov	r0, r7
   124c2:	f017 fb5b 	bl	29b7c <shell_fprintf>
	for (int i = 0; i < backend_count; i++) {
   124c6:	3601      	adds	r6, #1
   124c8:	3410      	adds	r4, #16
   124ca:	e7e7      	b.n	1249c <cmd_log_backends_list+0x1c>
   124cc:	0002d2b8 	.word	0x0002d2b8
   124d0:	0002d2d8 	.word	0x0002d2d8
   124d4:	0002efc5 	.word	0x0002efc5
   124d8:	0002efcd 	.word	0x0002efcd
   124dc:	0002efd6 	.word	0x0002efd6

000124e0 <module_name_get>:
{
   124e0:	b510      	push	{r4, lr}
	entry->handler = NULL;
   124e2:	2300      	movs	r3, #0
	entry->subcmd = &dsub_module_name;
   124e4:	4a05      	ldr	r2, [pc, #20]	; (124fc <module_name_get+0x1c>)
	entry->handler = NULL;
   124e6:	60cb      	str	r3, [r1, #12]
{
   124e8:	460c      	mov	r4, r1
	entry->help  = NULL;
   124ea:	604b      	str	r3, [r1, #4]
	entry->subcmd = &dsub_module_name;
   124ec:	608a      	str	r2, [r1, #8]
	entry->syntax = log_source_name_get(CONFIG_LOG_DOMAIN_ID, idx);
   124ee:	4601      	mov	r1, r0
   124f0:	4618      	mov	r0, r3
   124f2:	f7ff fb29 	bl	11b48 <log_source_name_get>
   124f6:	6020      	str	r0, [r4, #0]
}
   124f8:	bd10      	pop	{r4, pc}
   124fa:	bf00      	nop
   124fc:	0002d620 	.word	0x0002d620

00012500 <log_status>:
{
   12500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12504:	4b2b      	ldr	r3, [pc, #172]	; (125b4 <log_status+0xb4>)
   12506:	4e2c      	ldr	r6, [pc, #176]	; (125b8 <log_status+0xb8>)
   12508:	1af6      	subs	r6, r6, r3
   1250a:	b085      	sub	sp, #20
   1250c:	4604      	mov	r4, r0
   1250e:	08f6      	lsrs	r6, r6, #3
 * @return True if backend is active, false otherwise.
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
   12510:	460d      	mov	r5, r1
   12512:	b959      	cbnz	r1, 1252c <log_status+0x2c>
   12514:	4929      	ldr	r1, [pc, #164]	; (125bc <log_status+0xbc>)
   12516:	482a      	ldr	r0, [pc, #168]	; (125c0 <log_status+0xc0>)
   12518:	4a2a      	ldr	r2, [pc, #168]	; (125c4 <log_status+0xc4>)
   1251a:	f240 131d 	movw	r3, #285	; 0x11d
   1251e:	f016 fb3c 	bl	28b9a <printk>
   12522:	4828      	ldr	r0, [pc, #160]	; (125c4 <log_status+0xc4>)
   12524:	f240 111d 	movw	r1, #285	; 0x11d
   12528:	f016 fd78 	bl	2901c <assert_post_action>
	return backend->cb->active;
   1252c:	686b      	ldr	r3, [r5, #4]
	if (!log_backend_is_active(backend)) {
   1252e:	795b      	ldrb	r3, [r3, #5]
   12530:	b923      	cbnz	r3, 1253c <log_status+0x3c>
		shell_warn(shell, "Logs are halted!");
   12532:	4a25      	ldr	r2, [pc, #148]	; (125c8 <log_status+0xc8>)
   12534:	2103      	movs	r1, #3
   12536:	4620      	mov	r0, r4
   12538:	f017 fb20 	bl	29b7c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   1253c:	4b23      	ldr	r3, [pc, #140]	; (125cc <log_status+0xcc>)
   1253e:	4a24      	ldr	r2, [pc, #144]	; (125d0 <log_status+0xd0>)
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   12540:	f8df a094 	ldr.w	sl, [pc, #148]	; 125d8 <log_status+0xd8>
   12544:	f8df b094 	ldr.w	fp, [pc, #148]	; 125dc <log_status+0xdc>
	shell_fprintf(shell, SHELL_NORMAL, "%-40s | current | built-in \r\n",
   12548:	2108      	movs	r1, #8
   1254a:	4620      	mov	r0, r4
   1254c:	f017 fb16 	bl	29b7c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL,
   12550:	4a20      	ldr	r2, [pc, #128]	; (125d4 <log_status+0xd4>)
   12552:	2108      	movs	r1, #8
   12554:	4620      	mov	r0, r4
   12556:	f017 fb11 	bl	29b7c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
   1255a:	f04f 0800 	mov.w	r8, #0
   1255e:	fa0f f788 	sxth.w	r7, r8
   12562:	42b7      	cmp	r7, r6
   12564:	f108 0801 	add.w	r8, r8, #1
   12568:	d303      	bcc.n	12572 <log_status+0x72>
}
   1256a:	2000      	movs	r0, #0
   1256c:	b005      	add	sp, #20
   1256e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   12572:	463a      	mov	r2, r7
   12574:	2301      	movs	r3, #1
   12576:	2100      	movs	r1, #0
   12578:	4628      	mov	r0, r5
   1257a:	f7ff faf3 	bl	11b64 <log_filter_get>
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1257e:	2300      	movs	r3, #0
   12580:	463a      	mov	r2, r7
   12582:	4619      	mov	r1, r3
		dynamic_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   12584:	4681      	mov	r9, r0
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   12586:	4628      	mov	r0, r5
   12588:	f7ff faec 	bl	11b64 <log_filter_get>
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   1258c:	4639      	mov	r1, r7
		compiled_lvl = log_filter_get(backend, CONFIG_LOG_DOMAIN_ID,
   1258e:	9003      	str	r0, [sp, #12]
		shell_fprintf(shell, SHELL_NORMAL, "%-40s | %-7s | %s\r\n",
   12590:	2000      	movs	r0, #0
   12592:	f7ff fad9 	bl	11b48 <log_source_name_get>
   12596:	9a03      	ldr	r2, [sp, #12]
   12598:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
   1259c:	9201      	str	r2, [sp, #4]
   1259e:	f85a 2029 	ldr.w	r2, [sl, r9, lsl #2]
   125a2:	9200      	str	r2, [sp, #0]
   125a4:	4603      	mov	r3, r0
   125a6:	465a      	mov	r2, fp
   125a8:	2108      	movs	r1, #8
   125aa:	4620      	mov	r0, r4
   125ac:	f017 fae6 	bl	29b7c <shell_fprintf>
	for (int16_t i = 0U; i < modules_cnt; i++) {
   125b0:	e7d5      	b.n	1255e <log_status+0x5e>
   125b2:	bf00      	nop
   125b4:	0002d1e8 	.word	0x0002d1e8
   125b8:	0002d2b8 	.word	0x0002d2b8
   125bc:	0002edb2 	.word	0x0002edb2
   125c0:	0002e93e 	.word	0x0002e93e
   125c4:	0002ed81 	.word	0x0002ed81
   125c8:	0002eff7 	.word	0x0002eff7
   125cc:	0002f009 	.word	0x0002f009
   125d0:	0002f015 	.word	0x0002f015
   125d4:	0002f033 	.word	0x0002f033
   125d8:	0002d630 	.word	0x0002d630
   125dc:	0002f070 	.word	0x0002f070

000125e0 <log_backend_deactivate>:
{
   125e0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(backend != NULL);
   125e2:	4604      	mov	r4, r0
   125e4:	b958      	cbnz	r0, 125fe <log_backend_deactivate+0x1e>
   125e6:	4908      	ldr	r1, [pc, #32]	; (12608 <log_backend_deactivate+0x28>)
   125e8:	4808      	ldr	r0, [pc, #32]	; (1260c <log_backend_deactivate+0x2c>)
   125ea:	4a09      	ldr	r2, [pc, #36]	; (12610 <log_backend_deactivate+0x30>)
   125ec:	f240 130f 	movw	r3, #271	; 0x10f
   125f0:	f016 fad3 	bl	28b9a <printk>
   125f4:	4806      	ldr	r0, [pc, #24]	; (12610 <log_backend_deactivate+0x30>)
   125f6:	f240 110f 	movw	r1, #271	; 0x10f
   125fa:	f016 fd0f 	bl	2901c <assert_post_action>
	backend->cb->active = false;
   125fe:	6863      	ldr	r3, [r4, #4]
   12600:	2200      	movs	r2, #0
   12602:	715a      	strb	r2, [r3, #5]
}
   12604:	bd10      	pop	{r4, pc}
   12606:	bf00      	nop
   12608:	0002edb2 	.word	0x0002edb2
   1260c:	0002e93e 	.word	0x0002e93e
   12610:	0002ed81 	.word	0x0002ed81

00012614 <log_backend_activate>:
{
   12614:	b538      	push	{r3, r4, r5, lr}
   12616:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(backend != NULL);
   12618:	4604      	mov	r4, r0
   1261a:	b958      	cbnz	r0, 12634 <log_backend_activate+0x20>
   1261c:	4908      	ldr	r1, [pc, #32]	; (12640 <log_backend_activate+0x2c>)
   1261e:	4809      	ldr	r0, [pc, #36]	; (12644 <log_backend_activate+0x30>)
   12620:	4a09      	ldr	r2, [pc, #36]	; (12648 <log_backend_activate+0x34>)
   12622:	f44f 7381 	mov.w	r3, #258	; 0x102
   12626:	f016 fab8 	bl	28b9a <printk>
   1262a:	4807      	ldr	r0, [pc, #28]	; (12648 <log_backend_activate+0x34>)
   1262c:	f44f 7181 	mov.w	r1, #258	; 0x102
   12630:	f016 fcf4 	bl	2901c <assert_post_action>
	backend->cb->ctx = ctx;
   12634:	6863      	ldr	r3, [r4, #4]
	backend->cb->active = true;
   12636:	2201      	movs	r2, #1
	backend->cb->ctx = ctx;
   12638:	601d      	str	r5, [r3, #0]
	backend->cb->active = true;
   1263a:	715a      	strb	r2, [r3, #5]
}
   1263c:	bd38      	pop	{r3, r4, r5, pc}
   1263e:	bf00      	nop
   12640:	0002edb2 	.word	0x0002edb2
   12644:	0002e93e 	.word	0x0002e93e
   12648:	0002ed81 	.word	0x0002ed81

0001264c <shell_backend_cmd_execute>:
{
   1264c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char const *name = argv[-1];
   12650:	f852 bc04 	ldr.w	fp, [r2, #-4]
	return __log_backends_end - __log_backends_start;
   12654:	4c18      	ldr	r4, [pc, #96]	; (126b8 <shell_backend_cmd_execute+0x6c>)
   12656:	4e19      	ldr	r6, [pc, #100]	; (126bc <shell_backend_cmd_execute+0x70>)
{
   12658:	9300      	str	r3, [sp, #0]
   1265a:	4607      	mov	r7, r0
	size_t slen = strlen(name);
   1265c:	4658      	mov	r0, fp
{
   1265e:	4691      	mov	r9, r2
   12660:	468a      	mov	sl, r1
	size_t slen = strlen(name);
   12662:	f7f9 fea7 	bl	c3b4 <strlen>
   12666:	1b36      	subs	r6, r6, r4
   12668:	4602      	mov	r2, r0
   1266a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
   1266c:	f04f 0800 	mov.w	r8, #0
   12670:	45b0      	cmp	r8, r6
   12672:	db08      	blt.n	12686 <shell_backend_cmd_execute+0x3a>
		shell_error(shell, "Invalid backend: %s", name);
   12674:	4a12      	ldr	r2, [pc, #72]	; (126c0 <shell_backend_cmd_execute+0x74>)
   12676:	465b      	mov	r3, fp
   12678:	2101      	movs	r1, #1
   1267a:	4638      	mov	r0, r7
   1267c:	f017 fa7e 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   12680:	f06f 0507 	mvn.w	r5, #7
   12684:	e013      	b.n	126ae <shell_backend_cmd_execute+0x62>
		if (strncmp(name, backend->name, slen) == 0) {
   12686:	68a1      	ldr	r1, [r4, #8]
   12688:	9201      	str	r2, [sp, #4]
   1268a:	4658      	mov	r0, fp
   1268c:	f01a faf8 	bl	2cc80 <strncmp>
   12690:	3410      	adds	r4, #16
   12692:	4605      	mov	r5, r0
   12694:	b118      	cbz	r0, 1269e <shell_backend_cmd_execute+0x52>
	for (int i = 0; i < log_backend_count_get(); i++) {
   12696:	9a01      	ldr	r2, [sp, #4]
   12698:	f108 0801 	add.w	r8, r8, #1
   1269c:	e7e8      	b.n	12670 <shell_backend_cmd_execute+0x24>
		func(shell, backend, argc, argv);
   1269e:	4906      	ldr	r1, [pc, #24]	; (126b8 <shell_backend_cmd_execute+0x6c>)
   126a0:	9c00      	ldr	r4, [sp, #0]
   126a2:	464b      	mov	r3, r9
   126a4:	4652      	mov	r2, sl
   126a6:	eb01 1108 	add.w	r1, r1, r8, lsl #4
   126aa:	4638      	mov	r0, r7
   126ac:	47a0      	blx	r4
}
   126ae:	4628      	mov	r0, r5
   126b0:	b003      	add	sp, #12
   126b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126b6:	bf00      	nop
   126b8:	0002d2b8 	.word	0x0002d2b8
   126bc:	0002d2d8 	.word	0x0002d2d8
   126c0:	0002f084 	.word	0x0002f084

000126c4 <cmd_log_backend_status>:
{
   126c4:	b508      	push	{r3, lr}
	shell_backend_cmd_execute(shell, argc, argv, log_status);
   126c6:	4b02      	ldr	r3, [pc, #8]	; (126d0 <cmd_log_backend_status+0xc>)
   126c8:	f7ff ffc0 	bl	1264c <shell_backend_cmd_execute>
}
   126cc:	2000      	movs	r0, #0
   126ce:	bd08      	pop	{r3, pc}
   126d0:	00012501 	.word	0x00012501

000126d4 <cmd_log_backend_halt>:
	return shell_backend_cmd_execute(shell, argc, argv, log_halt);
   126d4:	4b01      	ldr	r3, [pc, #4]	; (126dc <cmd_log_backend_halt+0x8>)
   126d6:	f7ff bfb9 	b.w	1264c <shell_backend_cmd_execute>
   126da:	bf00      	nop
   126dc:	0002988f 	.word	0x0002988f

000126e0 <cmd_log_backend_go>:
	return shell_backend_cmd_execute(shell, argc, argv, log_go);
   126e0:	4b01      	ldr	r3, [pc, #4]	; (126e8 <cmd_log_backend_go+0x8>)
   126e2:	f7ff bfb3 	b.w	1264c <shell_backend_cmd_execute>
   126e6:	bf00      	nop
   126e8:	0002989b 	.word	0x0002989b

000126ec <cmd_log_backend_enable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_enable);
   126ec:	4b01      	ldr	r3, [pc, #4]	; (126f4 <cmd_log_backend_enable+0x8>)
   126ee:	f7ff bfad 	b.w	1264c <shell_backend_cmd_execute>
   126f2:	bf00      	nop
   126f4:	000127f5 	.word	0x000127f5

000126f8 <cmd_log_backend_disable>:
	return shell_backend_cmd_execute(shell, argc, argv, log_disable);
   126f8:	4b01      	ldr	r3, [pc, #4]	; (12700 <cmd_log_backend_disable+0x8>)
   126fa:	f7ff bfa7 	b.w	1264c <shell_backend_cmd_execute>
   126fe:	bf00      	nop
   12700:	0002991d 	.word	0x0002991d

00012704 <shell_state_precheck>:
{
   12704:	b510      	push	{r4, lr}
	if (shell->log_backend->control_block->state
   12706:	69c3      	ldr	r3, [r0, #28]
   12708:	68db      	ldr	r3, [r3, #12]
   1270a:	791c      	ldrb	r4, [r3, #4]
   1270c:	b92c      	cbnz	r4, 1271a <shell_state_precheck+0x16>
		shell_error(shell, "Shell log backend not initialized.");
   1270e:	4a04      	ldr	r2, [pc, #16]	; (12720 <shell_state_precheck+0x1c>)
   12710:	2101      	movs	r1, #1
   12712:	f017 fa33 	bl	29b7c <shell_fprintf>
   12716:	4620      	mov	r0, r4
}
   12718:	bd10      	pop	{r4, pc}
	return true;
   1271a:	2001      	movs	r0, #1
   1271c:	e7fc      	b.n	12718 <shell_state_precheck+0x14>
   1271e:	bf00      	nop
   12720:	0002f099 	.word	0x0002f099

00012724 <filters_set>:
{
   12724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12728:	4e2c      	ldr	r6, [pc, #176]	; (127dc <filters_set+0xb8>)
   1272a:	461f      	mov	r7, r3
   1272c:	4b2c      	ldr	r3, [pc, #176]	; (127e0 <filters_set+0xbc>)
   1272e:	1af6      	subs	r6, r6, r3
	int cnt = all ? z_log_sources_count() : argc;
   12730:	1e15      	subs	r5, r2, #0
{
   12732:	b085      	sub	sp, #20
   12734:	ea4f 06d6 	mov.w	r6, r6, lsr #3
	int cnt = all ? z_log_sources_count() : argc;
   12738:	bf14      	ite	ne
   1273a:	462b      	movne	r3, r5
   1273c:	4633      	moveq	r3, r6
   1273e:	9302      	str	r3, [sp, #8]
	if (!backend->cb->active) {
   12740:	684b      	ldr	r3, [r1, #4]
   12742:	795b      	ldrb	r3, [r3, #5]
{
   12744:	4680      	mov	r8, r0
   12746:	4689      	mov	r9, r1
	if (!backend->cb->active) {
   12748:	b91b      	cbnz	r3, 12752 <filters_set+0x2e>
		shell_warn(shell, "Backend not active.");
   1274a:	4a26      	ldr	r2, [pc, #152]	; (127e4 <filters_set+0xc0>)
   1274c:	2103      	movs	r1, #3
   1274e:	f017 fa15 	bl	29b7c <shell_fprintf>
				shell_warn(shell, "%s: level set to %s.",
   12752:	f8df a09c 	ldr.w	sl, [pc, #156]	; 127f0 <filters_set+0xcc>
	for (i = 0U; i < modules_cnt; i++) {
   12756:	2400      	movs	r4, #0
	for (i = 0; i < cnt; i++) {
   12758:	9b02      	ldr	r3, [sp, #8]
   1275a:	429c      	cmp	r4, r3
   1275c:	db02      	blt.n	12764 <filters_set+0x40>
}
   1275e:	b005      	add	sp, #20
   12760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		id = all ? i : module_id_get(argv[i]);
   12764:	b3bd      	cbz	r5, 127d6 <filters_set+0xb2>
   12766:	f857 b024 	ldr.w	fp, [r7, r4, lsl #2]
	for (i = 0U; i < modules_cnt; i++) {
   1276a:	2300      	movs	r3, #0
   1276c:	429e      	cmp	r6, r3
   1276e:	d107      	bne.n	12780 <filters_set+0x5c>
			shell_error(shell, "%s: unknown source name.", argv[i]);
   12770:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   12774:	4a1c      	ldr	r2, [pc, #112]	; (127e8 <filters_set+0xc4>)
   12776:	2101      	movs	r1, #1
   12778:	4640      	mov	r0, r8
   1277a:	f017 f9ff 	bl	29b7c <shell_fprintf>
   1277e:	e023      	b.n	127c8 <filters_set+0xa4>
		tmp_name = log_source_name_get(CONFIG_LOG_DOMAIN_ID, i);
   12780:	4619      	mov	r1, r3
   12782:	2000      	movs	r0, #0
   12784:	9303      	str	r3, [sp, #12]
   12786:	f7ff f9df 	bl	11b48 <log_source_name_get>
		if (strncmp(tmp_name, name, 64) == 0) {
   1278a:	2240      	movs	r2, #64	; 0x40
   1278c:	4659      	mov	r1, fp
   1278e:	f01a fa77 	bl	2cc80 <strncmp>
   12792:	9b03      	ldr	r3, [sp, #12]
   12794:	b9d0      	cbnz	r0, 127cc <filters_set+0xa8>
			return i;
   12796:	461a      	mov	r2, r3
	return z_impl_log_filter_set(backend, domain_id, source_id, level);
   12798:	2100      	movs	r1, #0
   1279a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1279c:	b212      	sxth	r2, r2
   1279e:	4648      	mov	r0, r9
   127a0:	f7ff fa18 	bl	11bd4 <z_impl_log_filter_set>
			if (set_lvl != level) {
   127a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   127a6:	4283      	cmp	r3, r0
   127a8:	4683      	mov	fp, r0
   127aa:	d00d      	beq.n	127c8 <filters_set+0xa4>
						CONFIG_LOG_DOMAIN_ID, i) :
   127ac:	b985      	cbnz	r5, 127d0 <filters_set+0xac>
					log_source_name_get(
   127ae:	4621      	mov	r1, r4
   127b0:	4628      	mov	r0, r5
   127b2:	f7ff f9c9 	bl	11b48 <log_source_name_get>
   127b6:	4603      	mov	r3, r0
				shell_warn(shell, "%s: level set to %s.",
   127b8:	f85a 202b 	ldr.w	r2, [sl, fp, lsl #2]
   127bc:	9200      	str	r2, [sp, #0]
   127be:	2103      	movs	r1, #3
   127c0:	4a0a      	ldr	r2, [pc, #40]	; (127ec <filters_set+0xc8>)
   127c2:	4640      	mov	r0, r8
   127c4:	f017 f9da 	bl	29b7c <shell_fprintf>
	for (i = 0; i < cnt; i++) {
   127c8:	3401      	adds	r4, #1
   127ca:	e7c5      	b.n	12758 <filters_set+0x34>
	for (i = 0U; i < modules_cnt; i++) {
   127cc:	3301      	adds	r3, #1
   127ce:	e7cd      	b.n	1276c <filters_set+0x48>
						CONFIG_LOG_DOMAIN_ID, i) :
   127d0:	f857 3024 	ldr.w	r3, [r7, r4, lsl #2]
   127d4:	e7f0      	b.n	127b8 <filters_set+0x94>
   127d6:	4622      	mov	r2, r4
   127d8:	e7de      	b.n	12798 <filters_set+0x74>
   127da:	bf00      	nop
   127dc:	0002d2b8 	.word	0x0002d2b8
   127e0:	0002d1e8 	.word	0x0002d1e8
   127e4:	0002f0bd 	.word	0x0002f0bd
   127e8:	0002f0e8 	.word	0x0002f0e8
   127ec:	0002f0d2 	.word	0x0002f0d2
   127f0:	0002d630 	.word	0x0002d630

000127f4 <log_enable>:
{
   127f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	severity_level = severity_level_get(argv[1]);
   127f8:	f8d3 b004 	ldr.w	fp, [r3, #4]
   127fc:	f8df a050 	ldr.w	sl, [pc, #80]	; 12850 <log_enable+0x5c>
{
   12800:	4606      	mov	r6, r0
   12802:	4688      	mov	r8, r1
   12804:	4691      	mov	r9, r2
   12806:	461d      	mov	r5, r3
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   12808:	2700      	movs	r7, #0
		if (strncmp(str, severity_lvls[i], 4) == 0) {
   1280a:	f85a 1b04 	ldr.w	r1, [sl], #4
   1280e:	2204      	movs	r2, #4
   12810:	4658      	mov	r0, fp
   12812:	f01a fa35 	bl	2cc80 <strncmp>
   12816:	4604      	mov	r4, r0
   12818:	b170      	cbz	r0, 12838 <log_enable+0x44>
	for (i = 0; i < ARRAY_SIZE(severity_lvls); i++) {
   1281a:	3701      	adds	r7, #1
   1281c:	2f05      	cmp	r7, #5
   1281e:	d1f4      	bne.n	1280a <log_enable+0x16>
		shell_error(shell, "Invalid severity: %s", argv[1]);
   12820:	686b      	ldr	r3, [r5, #4]
   12822:	4a0a      	ldr	r2, [pc, #40]	; (1284c <log_enable+0x58>)
   12824:	2101      	movs	r1, #1
   12826:	4630      	mov	r0, r6
   12828:	f017 f9a8 	bl	29b7c <shell_fprintf>
   1282c:	f06f 0407 	mvn.w	r4, #7
}
   12830:	4620      	mov	r0, r4
   12832:	b003      	add	sp, #12
   12834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	filters_set(shell, backend, argc - 2, &argv[2], severity_level);
   12838:	9700      	str	r7, [sp, #0]
   1283a:	f105 0308 	add.w	r3, r5, #8
   1283e:	f1a9 0202 	sub.w	r2, r9, #2
   12842:	4641      	mov	r1, r8
   12844:	4630      	mov	r0, r6
   12846:	f7ff ff6d 	bl	12724 <filters_set>
	return 0;
   1284a:	e7f1      	b.n	12830 <log_enable+0x3c>
   1284c:	0002f102 	.word	0x0002f102
   12850:	0002d630 	.word	0x0002d630

00012854 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
   12854:	4b01      	ldr	r3, [pc, #4]	; (1285c <log_backend_rtt_init+0x8>)
   12856:	2201      	movs	r2, #1
   12858:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
   1285a:	4770      	bx	lr
   1285c:	20002a52 	.word	0x20002a52

00012860 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
   12860:	4b02      	ldr	r3, [pc, #8]	; (1286c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
   12862:	4803      	ldr	r0, [pc, #12]	; (12870 <panic+0x10>)
   12864:	2201      	movs	r2, #1
   12866:	701a      	strb	r2, [r3, #0]
   12868:	f017 b804 	b.w	29874 <log_output_flush>
   1286c:	20002a53 	.word	0x20002a53
   12870:	0002d7c4 	.word	0x0002d7c4

00012874 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
   12874:	4801      	ldr	r0, [pc, #4]	; (1287c <dropped+0x8>)
   12876:	f7ff bd75 	b.w	12364 <log_output_dropped_process>
   1287a:	bf00      	nop
   1287c:	0002d7c4 	.word	0x0002d7c4

00012880 <put>:
{
   12880:	b510      	push	{r4, lr}
	log_msg_get(msg);
   12882:	4608      	mov	r0, r1
   12884:	460c      	mov	r4, r1
   12886:	f016 fdee 	bl	29466 <log_msg_get>
	log_output_msg_process(output, msg, flags);
   1288a:	4805      	ldr	r0, [pc, #20]	; (128a0 <put+0x20>)
   1288c:	4621      	mov	r1, r4
   1288e:	220f      	movs	r2, #15
   12890:	f7ff fcd6 	bl	12240 <log_output_msg_process>
	log_msg_put(msg);
   12894:	4620      	mov	r0, r4
}
   12896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1289a:	f016 be13 	b.w	294c4 <log_msg_put>
   1289e:	bf00      	nop
   128a0:	0002d7c4 	.word	0x0002d7c4

000128a4 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   128a4:	4b05      	ldr	r3, [pc, #20]	; (128bc <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
   128a6:	781b      	ldrb	r3, [r3, #0]
   128a8:	b11b      	cbz	r3, 128b2 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
   128aa:	f241 3088 	movw	r0, #5000	; 0x1388
   128ae:	f01a b8e5 	b.w	2ca7c <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
   128b2:	20a4      	movs	r0, #164	; 0xa4
   128b4:	2100      	movs	r1, #0
   128b6:	f014 b8cd 	b.w	26a54 <z_impl_k_sleep>
   128ba:	bf00      	nop
   128bc:	20002a53 	.word	0x20002a53

000128c0 <data_out_block_mode>:
{
   128c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
   128c4:	f8df 9094 	ldr.w	r9, [pc, #148]	; 1295c <data_out_block_mode+0x9c>
	return z_impl_k_mutex_lock(mutex, timeout);
   128c8:	f8df a094 	ldr.w	sl, [pc, #148]	; 12960 <data_out_block_mode+0xa0>
{
   128cc:	4680      	mov	r8, r0
   128ce:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
   128d0:	2404      	movs	r4, #4
   128d2:	46cb      	mov	fp, r9
		if (!is_sync_mode()) {
   128d4:	f899 5000 	ldrb.w	r5, [r9]
   128d8:	b9cd      	cbnz	r5, 1290e <data_out_block_mode+0x4e>
   128da:	f04f 33ff 	mov.w	r3, #4294967295
   128de:	f04f 32ff 	mov.w	r2, #4294967295
   128e2:	4650      	mov	r0, sl
   128e4:	f011 fed0 	bl	24688 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   128e8:	463a      	mov	r2, r7
   128ea:	4641      	mov	r1, r8
   128ec:	4628      	mov	r0, r5
   128ee:	f010 fd89 	bl	23404 <SEGGER_RTT_WriteSkipNoLock>
   128f2:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
   128f4:	4650      	mov	r0, sl
   128f6:	f011 ffc7 	bl	24888 <z_impl_k_mutex_unlock>
		if (ret) {
   128fa:	4d17      	ldr	r5, [pc, #92]	; (12958 <data_out_block_mode+0x98>)
   128fc:	b1fe      	cbz	r6, 1293e <data_out_block_mode+0x7e>
	host_present = true;
   128fe:	2301      	movs	r3, #1
   12900:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
   12902:	f89b 3000 	ldrb.w	r3, [fp]
   12906:	b96b      	cbnz	r3, 12924 <data_out_block_mode+0x64>
}
   12908:	4638      	mov	r0, r7
   1290a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
   1290e:	463a      	mov	r2, r7
   12910:	4641      	mov	r1, r8
   12912:	2000      	movs	r0, #0
   12914:	f010 fd76 	bl	23404 <SEGGER_RTT_WriteSkipNoLock>
   12918:	4606      	mov	r6, r0
   1291a:	e7ee      	b.n	128fa <data_out_block_mode+0x3a>
	if (retry_cnt == 0) {
   1291c:	b95c      	cbnz	r4, 12936 <data_out_block_mode+0x76>
		host_present = false;
   1291e:	702c      	strb	r4, [r5, #0]
   12920:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
   12924:	2000      	movs	r0, #0
   12926:	f010 fdb9 	bl	2349c <SEGGER_RTT_HasDataUp>
   1292a:	2800      	cmp	r0, #0
   1292c:	d0ec      	beq.n	12908 <data_out_block_mode+0x48>
   1292e:	782b      	ldrb	r3, [r5, #0]
   12930:	2b00      	cmp	r3, #0
   12932:	d1f3      	bne.n	1291c <data_out_block_mode+0x5c>
   12934:	e7e8      	b.n	12908 <data_out_block_mode+0x48>
			on_failed_write(retry_cnt--);
   12936:	3c01      	subs	r4, #1
   12938:	f7ff ffb4 	bl	128a4 <on_failed_write.part.0>
   1293c:	e7f2      	b.n	12924 <data_out_block_mode+0x64>
		} else if (host_present) {
   1293e:	782b      	ldrb	r3, [r5, #0]
   12940:	b113      	cbz	r3, 12948 <data_out_block_mode+0x88>
	if (retry_cnt == 0) {
   12942:	3c01      	subs	r4, #1
   12944:	d104      	bne.n	12950 <data_out_block_mode+0x90>
		host_present = false;
   12946:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
   12948:	782b      	ldrb	r3, [r5, #0]
   1294a:	2b00      	cmp	r3, #0
   1294c:	d1c2      	bne.n	128d4 <data_out_block_mode+0x14>
   1294e:	e7db      	b.n	12908 <data_out_block_mode+0x48>
   12950:	f7ff ffa8 	bl	128a4 <on_failed_write.part.0>
   12954:	e7f8      	b.n	12948 <data_out_block_mode+0x88>
   12956:	bf00      	nop
   12958:	20002a52 	.word	0x20002a52
   1295c:	20002a53 	.word	0x20002a53
   12960:	20000830 	.word	0x20000830

00012964 <cmd_kernel_version>:
#include <drivers/timer/system_timer.h>
#include <kernel.h>

static int cmd_kernel_version(const struct shell *shell,
			      size_t argc, char **argv)
{
   12964:	b513      	push	{r0, r1, r4, lr}
   12966:	4604      	mov	r4, r0
	uint32_t version = sys_kernel_version_get();
   12968:	f011 fcb6 	bl	242d8 <sys_kernel_version_get>

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Zephyr version %d.%d.%d",
   1296c:	f3c0 2307 	ubfx	r3, r0, #8, #8
   12970:	9301      	str	r3, [sp, #4]
   12972:	f3c0 4307 	ubfx	r3, r0, #16, #8
   12976:	9300      	str	r3, [sp, #0]
   12978:	4a04      	ldr	r2, [pc, #16]	; (1298c <cmd_kernel_version+0x28>)
   1297a:	0e03      	lsrs	r3, r0, #24
   1297c:	2108      	movs	r1, #8
   1297e:	4620      	mov	r0, r4
   12980:	f017 f8fc 	bl	29b7c <shell_fprintf>
		      SYS_KERNEL_VER_MAJOR(version),
		      SYS_KERNEL_VER_MINOR(version),
		      SYS_KERNEL_VER_PATCHLEVEL(version));
	return 0;
}
   12984:	2000      	movs	r0, #0
   12986:	b002      	add	sp, #8
   12988:	bd10      	pop	{r4, pc}
   1298a:	bf00      	nop
   1298c:	0002f2c6 	.word	0x0002f2c6

00012990 <cmd_kernel_uptime>:

static int cmd_kernel_uptime(const struct shell *shell,
			     size_t argc, char **argv)
{
   12990:	e92d 4830 	stmdb	sp!, {r4, r5, fp, lr}
   12994:	4604      	mov	r4, r0
	return z_impl_k_uptime_ticks();
   12996:	f01a f86f 	bl	2ca78 <z_impl_k_uptime_ticks>
   1299a:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
   1299e:	fba0 bc05 	umull	fp, ip, r0, r5
   129a2:	fb05 cc01 	mla	ip, r5, r1, ip
   129a6:	ea4f 32db 	mov.w	r2, fp, lsr #15
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Uptime: %u ms", k_uptime_get_32());
   129aa:	ea42 434c 	orr.w	r3, r2, ip, lsl #17
   129ae:	4620      	mov	r0, r4
   129b0:	4a03      	ldr	r2, [pc, #12]	; (129c0 <cmd_kernel_uptime+0x30>)
   129b2:	2108      	movs	r1, #8
   129b4:	f017 f8e2 	bl	29b7c <shell_fprintf>
	return 0;
}
   129b8:	2000      	movs	r0, #0
   129ba:	e8bd 8830 	ldmia.w	sp!, {r4, r5, fp, pc}
   129be:	bf00      	nop
   129c0:	0002f2df 	.word	0x0002f2df

000129c4 <cmd_kernel_threads>:

}

static int cmd_kernel_threads(const struct shell *shell,
			      size_t argc, char **argv)
{
   129c4:	b510      	push	{r4, lr}
   129c6:	4604      	mov	r4, r0
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_print(shell, "Scheduler: %u since last call", sys_clock_elapsed());
   129c8:	f00f f944 	bl	21c54 <sys_clock_elapsed>
   129cc:	4a08      	ldr	r2, [pc, #32]	; (129f0 <cmd_kernel_threads+0x2c>)
   129ce:	4603      	mov	r3, r0
   129d0:	2108      	movs	r1, #8
   129d2:	4620      	mov	r0, r4
   129d4:	f017 f8d2 	bl	29b7c <shell_fprintf>
	shell_print(shell, "Threads:");
   129d8:	4a06      	ldr	r2, [pc, #24]	; (129f4 <cmd_kernel_threads+0x30>)
   129da:	4620      	mov	r0, r4
   129dc:	2108      	movs	r1, #8
   129de:	f017 f8cd 	bl	29b7c <shell_fprintf>
	k_thread_foreach(shell_tdata_dump, (void *)shell);
   129e2:	4805      	ldr	r0, [pc, #20]	; (129f8 <cmd_kernel_threads+0x34>)
   129e4:	4621      	mov	r1, r4
   129e6:	f011 f9fd 	bl	23de4 <k_thread_foreach>
	return 0;
}
   129ea:	2000      	movs	r0, #0
   129ec:	bd10      	pop	{r4, pc}
   129ee:	bf00      	nop
   129f0:	0002f2ee 	.word	0x0002f2ee
   129f4:	0002f30d 	.word	0x0002f30d
   129f8:	00012a5d 	.word	0x00012a5d

000129fc <cmd_kernel_stacks>:
extern K_KERNEL_STACK_ARRAY_DEFINE(z_interrupt_stacks, CONFIG_MP_NUM_CPUS,
				   CONFIG_ISR_STACK_SIZE);

static int cmd_kernel_stacks(const struct shell *shell,
			     size_t argc, char **argv)
{
   129fc:	b530      	push	{r4, r5, lr}
	uint8_t *buf;
	size_t size, unused;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
	k_thread_foreach(shell_stack_dump, (void *)shell);
   129fe:	4601      	mov	r1, r0
{
   12a00:	b087      	sub	sp, #28
   12a02:	4604      	mov	r4, r0
	k_thread_foreach(shell_stack_dump, (void *)shell);
   12a04:	4811      	ldr	r0, [pc, #68]	; (12a4c <cmd_kernel_stacks+0x50>)
   12a06:	f011 f9ed 	bl	23de4 <k_thread_foreach>
	for (int i = 0; i < CONFIG_MP_NUM_CPUS; i++) {
		buf = Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[i]);
		size = K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[i]);

		unused = 0;
		for (size_t i = 0; i < size; i++) {
   12a0a:	4a11      	ldr	r2, [pc, #68]	; (12a50 <cmd_kernel_stacks+0x54>)
		unused = 0;
   12a0c:	2300      	movs	r3, #0
			if (buf[i] == 0xAAU) {
   12a0e:	f812 1b01 	ldrb.w	r1, [r2], #1
   12a12:	29aa      	cmp	r1, #170	; 0xaa
   12a14:	d103      	bne.n	12a1e <cmd_kernel_stacks+0x22>
				unused++;
   12a16:	3301      	adds	r3, #1
		for (size_t i = 0; i < size; i++) {
   12a18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   12a1c:	d1f7      	bne.n	12a0e <cmd_kernel_stacks+0x12>
			} else {
				break;
			}
		}

		shell_print(shell,
   12a1e:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   12a22:	2264      	movs	r2, #100	; 0x64
   12a24:	434a      	muls	r2, r1
   12a26:	0ad2      	lsrs	r2, r2, #11
   12a28:	9205      	str	r2, [sp, #20]
   12a2a:	2500      	movs	r5, #0
   12a2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
   12a30:	e9cd 1203 	strd	r1, r2, [sp, #12]
   12a34:	e9cd 2301 	strd	r2, r3, [sp, #4]
   12a38:	4620      	mov	r0, r4
   12a3a:	4b06      	ldr	r3, [pc, #24]	; (12a54 <cmd_kernel_stacks+0x58>)
   12a3c:	4a06      	ldr	r2, [pc, #24]	; (12a58 <cmd_kernel_stacks+0x5c>)
   12a3e:	9500      	str	r5, [sp, #0]
   12a40:	2108      	movs	r1, #8
   12a42:	f017 f89b 	bl	29b7c <shell_fprintf>
			      size - unused, size,
			      ((size - unused) * 100U) / size);
	}

	return 0;
}
   12a46:	4628      	mov	r0, r5
   12a48:	b007      	add	sp, #28
   12a4a:	bd30      	pop	{r4, r5, pc}
   12a4c:	00012b89 	.word	0x00012b89
   12a50:	20005a60 	.word	0x20005a60
   12a54:	20005a40 	.word	0x20005a40
   12a58:	0002f317 	.word	0x0002f317

00012a5c <shell_tdata_dump>:
{
   12a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
   12a5e:	b08b      	sub	sp, #44	; 0x2c
	size_t size = thread->stack_info.size;
   12a60:	f8d0 70a8 	ldr.w	r7, [r0, #168]	; 0xa8
{
   12a64:	4604      	mov	r4, r0
   12a66:	460d      	mov	r5, r1
	tname = k_thread_name_get(thread);
   12a68:	f019 ff10 	bl	2c88c <k_thread_name_get>
   12a6c:	4606      	mov	r6, r0
	return z_impl_z_current_get();
   12a6e:	f014 f829 	bl	26ac4 <z_impl_z_current_get>
	shell_print(shell, "%s%p %-10s",
   12a72:	4b34      	ldr	r3, [pc, #208]	; (12b44 <shell_tdata_dump+0xe8>)
   12a74:	4a34      	ldr	r2, [pc, #208]	; (12b48 <shell_tdata_dump+0xec>)
   12a76:	2e00      	cmp	r6, #0
   12a78:	bf08      	it	eq
   12a7a:	461e      	moveq	r6, r3
   12a7c:	4b33      	ldr	r3, [pc, #204]	; (12b4c <shell_tdata_dump+0xf0>)
   12a7e:	e9cd 4600 	strd	r4, r6, [sp]
   12a82:	4284      	cmp	r4, r0
   12a84:	bf18      	it	ne
   12a86:	4613      	movne	r3, r2
   12a88:	2108      	movs	r1, #8
   12a8a:	4a31      	ldr	r2, [pc, #196]	; (12b50 <shell_tdata_dump+0xf4>)
   12a8c:	4628      	mov	r0, r5
   12a8e:	f017 f875 	bl	29b7c <shell_fprintf>
	shell_print(shell, "\toptions: 0x%x, priority: %d timeout: %" PRId64,
   12a92:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   12a96:	e9cd 2302 	strd	r2, r3, [sp, #8]
   12a9a:	f994 300e 	ldrsb.w	r3, [r4, #14]
   12a9e:	4a2d      	ldr	r2, [pc, #180]	; (12b54 <shell_tdata_dump+0xf8>)
   12aa0:	9300      	str	r3, [sp, #0]
   12aa2:	2108      	movs	r1, #8
   12aa4:	7b23      	ldrb	r3, [r4, #12]
   12aa6:	4628      	mov	r0, r5
   12aa8:	f017 f868 	bl	29b7c <shell_fprintf>
	shell_print(shell, "\tstate: %s, entry: %p", k_thread_state_str(thread),
   12aac:	4620      	mov	r0, r4
   12aae:	f011 f939 	bl	23d24 <k_thread_state_str>
   12ab2:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   12ab4:	9200      	str	r2, [sp, #0]
   12ab6:	4603      	mov	r3, r0
   12ab8:	4a27      	ldr	r2, [pc, #156]	; (12b58 <shell_tdata_dump+0xfc>)
   12aba:	2108      	movs	r1, #8
   12abc:	4628      	mov	r0, r5
   12abe:	f017 f85d 	bl	29b7c <shell_fprintf>
	if (k_thread_runtime_stats_get(thread, &rt_stats_thread) != 0) {
   12ac2:	a906      	add	r1, sp, #24
   12ac4:	4620      	mov	r0, r4
   12ac6:	f019 fef5 	bl	2c8b4 <k_thread_runtime_stats_get>
   12aca:	4606      	mov	r6, r0
	if (k_thread_runtime_stats_all_get(&rt_stats_all) != 0) {
   12acc:	a808      	add	r0, sp, #32
   12ace:	f011 fbef 	bl	242b0 <k_thread_runtime_stats_all_get>
   12ad2:	ea56 0300 	orrs.w	r3, r6, r0
   12ad6:	d11e      	bne.n	12b16 <shell_tdata_dump+0xba>
		pcnt = (rt_stats_thread.execution_cycles * 100U) /
   12ad8:	9e06      	ldr	r6, [sp, #24]
   12ada:	9a07      	ldr	r2, [sp, #28]
   12adc:	2364      	movs	r3, #100	; 0x64
   12ade:	fba6 0103 	umull	r0, r1, r6, r3
   12ae2:	fb03 1102 	mla	r1, r3, r2, r1
   12ae6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
   12aea:	f7ed fba9 	bl	240 <__aeabi_uldivmod>
		shell_print(shell, "\tTotal execution cycles: %u (%u %%)",
   12aee:	4a1b      	ldr	r2, [pc, #108]	; (12b5c <shell_tdata_dump+0x100>)
		pcnt = (rt_stats_thread.execution_cycles * 100U) /
   12af0:	9000      	str	r0, [sp, #0]
		shell_print(shell, "\tTotal execution cycles: %u (%u %%)",
   12af2:	4633      	mov	r3, r6
   12af4:	2108      	movs	r1, #8
   12af6:	4628      	mov	r0, r5
   12af8:	f017 f840 	bl	29b7c <shell_fprintf>
	return z_impl_k_thread_stack_space_get(thread, unused_ptr);
   12afc:	a905      	add	r1, sp, #20
   12afe:	4620      	mov	r0, r4
   12b00:	f019 fec8 	bl	2c894 <z_impl_k_thread_stack_space_get>
	if (ret) {
   12b04:	4603      	mov	r3, r0
   12b06:	b160      	cbz	r0, 12b22 <shell_tdata_dump+0xc6>
		shell_print(shell,
   12b08:	4a15      	ldr	r2, [pc, #84]	; (12b60 <shell_tdata_dump+0x104>)
   12b0a:	2108      	movs	r1, #8
   12b0c:	4628      	mov	r0, r5
   12b0e:	f017 f835 	bl	29b7c <shell_fprintf>
}
   12b12:	b00b      	add	sp, #44	; 0x2c
   12b14:	bdf0      	pop	{r4, r5, r6, r7, pc}
		shell_print(shell, "\tTotal execution cycles: ? (? %%)");
   12b16:	4a13      	ldr	r2, [pc, #76]	; (12b64 <shell_tdata_dump+0x108>)
   12b18:	2108      	movs	r1, #8
   12b1a:	4628      	mov	r0, r5
   12b1c:	f017 f82e 	bl	29b7c <shell_fprintf>
   12b20:	e7ec      	b.n	12afc <shell_tdata_dump+0xa0>
		pcnt = ((size - unused) * 100U) / size;
   12b22:	9a05      	ldr	r2, [sp, #20]
   12b24:	2364      	movs	r3, #100	; 0x64
   12b26:	1ab9      	subs	r1, r7, r2
		shell_print(shell,
   12b28:	e9cd 2100 	strd	r2, r1, [sp]
		pcnt = ((size - unused) * 100U) / size;
   12b2c:	434b      	muls	r3, r1
		shell_print(shell,
   12b2e:	4a0e      	ldr	r2, [pc, #56]	; (12b68 <shell_tdata_dump+0x10c>)
		pcnt = ((size - unused) * 100U) / size;
   12b30:	fbb3 f3f7 	udiv	r3, r3, r7
		shell_print(shell,
   12b34:	2108      	movs	r1, #8
   12b36:	e9cd 7302 	strd	r7, r3, [sp, #8]
   12b3a:	4628      	mov	r0, r5
   12b3c:	463b      	mov	r3, r7
   12b3e:	f017 f81d 	bl	29b7c <shell_fprintf>
}
   12b42:	e7e6      	b.n	12b12 <shell_tdata_dump+0xb6>
   12b44:	0002f35d 	.word	0x0002f35d
   12b48:	0002ee9d 	.word	0x0002ee9d
   12b4c:	00030a16 	.word	0x00030a16
   12b50:	0002f360 	.word	0x0002f360
   12b54:	0002f36c 	.word	0x0002f36c
   12b58:	0002f398 	.word	0x0002f398
   12b5c:	0002f3af 	.word	0x0002f3af
   12b60:	0002f3f7 	.word	0x0002f3f7
   12b64:	0002f3d4 	.word	0x0002f3d4
   12b68:	0002f424 	.word	0x0002f424

00012b6c <cmd_kernel_cycles>:
{
   12b6c:	b510      	push	{r4, lr}
   12b6e:	4604      	mov	r4, r0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
   12b70:	f019 fd94 	bl	2c69c <sys_clock_cycle_get_32>
	shell_print(shell, "cycles: %u hw cycles", k_cycle_get_32());
   12b74:	4a03      	ldr	r2, [pc, #12]	; (12b84 <cmd_kernel_cycles+0x18>)
   12b76:	4603      	mov	r3, r0
   12b78:	2108      	movs	r1, #8
   12b7a:	4620      	mov	r0, r4
   12b7c:	f016 fffe 	bl	29b7c <shell_fprintf>
}
   12b80:	2000      	movs	r0, #0
   12b82:	bd10      	pop	{r4, pc}
   12b84:	0002f45b 	.word	0x0002f45b

00012b88 <shell_stack_dump>:
{
   12b88:	b5f0      	push	{r4, r5, r6, r7, lr}
	size_t size = thread->stack_info.size;
   12b8a:	f8d0 60a8 	ldr.w	r6, [r0, #168]	; 0xa8
{
   12b8e:	b089      	sub	sp, #36	; 0x24
   12b90:	4604      	mov	r4, r0
   12b92:	460d      	mov	r5, r1
   12b94:	a907      	add	r1, sp, #28
   12b96:	f019 fe7d 	bl	2c894 <z_impl_k_thread_stack_space_get>
	if (ret) {
   12b9a:	4603      	mov	r3, r0
   12b9c:	b130      	cbz	r0, 12bac <shell_stack_dump+0x24>
		shell_print(shell,
   12b9e:	4a10      	ldr	r2, [pc, #64]	; (12be0 <shell_stack_dump+0x58>)
   12ba0:	2108      	movs	r1, #8
   12ba2:	4628      	mov	r0, r5
   12ba4:	f016 ffea 	bl	29b7c <shell_fprintf>
}
   12ba8:	b009      	add	sp, #36	; 0x24
   12baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	tname = k_thread_name_get((struct k_thread *)thread);
   12bac:	4620      	mov	r0, r4
   12bae:	f019 fe6d 	bl	2c88c <k_thread_name_get>
	shell_print((const struct shell *)user_data,
   12bb2:	4f0c      	ldr	r7, [pc, #48]	; (12be4 <shell_stack_dump+0x5c>)
	pcnt = ((size - unused) * 100U) / size;
   12bb4:	9a07      	ldr	r2, [sp, #28]
	shell_print((const struct shell *)user_data,
   12bb6:	2800      	cmp	r0, #0
   12bb8:	bf08      	it	eq
   12bba:	4638      	moveq	r0, r7
	pcnt = ((size - unused) * 100U) / size;
   12bbc:	1ab1      	subs	r1, r6, r2
   12bbe:	2364      	movs	r3, #100	; 0x64
	shell_print((const struct shell *)user_data,
   12bc0:	e9cd 2102 	strd	r2, r1, [sp, #8]
   12bc4:	e9cd 0600 	strd	r0, r6, [sp]
	pcnt = ((size - unused) * 100U) / size;
   12bc8:	434b      	muls	r3, r1
	shell_print((const struct shell *)user_data,
   12bca:	4a07      	ldr	r2, [pc, #28]	; (12be8 <shell_stack_dump+0x60>)
	pcnt = ((size - unused) * 100U) / size;
   12bcc:	fbb3 f3f6 	udiv	r3, r3, r6
	shell_print((const struct shell *)user_data,
   12bd0:	2108      	movs	r1, #8
   12bd2:	e9cd 6304 	strd	r6, r3, [sp, #16]
   12bd6:	4628      	mov	r0, r5
   12bd8:	4623      	mov	r3, r4
   12bda:	f016 ffcf 	bl	29b7c <shell_fprintf>
   12bde:	e7e3      	b.n	12ba8 <shell_stack_dump+0x20>
   12be0:	0002f3f7 	.word	0x0002f3f7
   12be4:	0002f35d 	.word	0x0002f35d
   12be8:	0002f471 	.word	0x0002f471

00012bec <get_device_name>:
};

static const char *get_device_name(const struct device *dev,
				   char *buf,
				   size_t len)
{
   12bec:	4603      	mov	r3, r0
	const char *name = dev->name;
   12bee:	6800      	ldr	r0, [r0, #0]
{
   12bf0:	b510      	push	{r4, lr}
   12bf2:	460c      	mov	r4, r1
   12bf4:	4611      	mov	r1, r2

	if ((name == NULL) || (name[0] == 0)) {
   12bf6:	b108      	cbz	r0, 12bfc <get_device_name+0x10>
   12bf8:	7802      	ldrb	r2, [r0, #0]
   12bfa:	b922      	cbnz	r2, 12c06 <get_device_name+0x1a>
		snprintf(buf, len, "[%p]", dev);
   12bfc:	4a02      	ldr	r2, [pc, #8]	; (12c08 <get_device_name+0x1c>)
   12bfe:	4620      	mov	r0, r4
   12c00:	f015 fba8 	bl	28354 <sniprintf>
   12c04:	4620      	mov	r0, r4
		name = buf;
	}

	return name;
}
   12c06:	bd10      	pop	{r4, pc}
   12c08:	0002f57b 	.word	0x0002f57b

00012c0c <cmd_device_list_visitor>:
	size_t buf_size;
};

static int cmd_device_list_visitor(const struct device *dev,
				   void *context)
{
   12c0c:	b510      	push	{r4, lr}
	const struct cmd_device_list_visitor_context *ctx = context;

	shell_fprintf(ctx->shell, SHELL_NORMAL, "  requires: %s\n",
   12c0e:	680c      	ldr	r4, [r1, #0]
   12c10:	e9d1 1201 	ldrd	r1, r2, [r1, #4]
   12c14:	f7ff ffea 	bl	12bec <get_device_name>
   12c18:	4a03      	ldr	r2, [pc, #12]	; (12c28 <cmd_device_list_visitor+0x1c>)
   12c1a:	4603      	mov	r3, r0
   12c1c:	2108      	movs	r1, #8
   12c1e:	4620      	mov	r0, r4
   12c20:	f016 ffac 	bl	29b7c <shell_fprintf>
		      get_device_name(dev, ctx->buf, ctx->buf_size));

	return 0;
}
   12c24:	2000      	movs	r0, #0
   12c26:	bd10      	pop	{r4, pc}
   12c28:	0002f580 	.word	0x0002f580

00012c2c <cmd_device_list>:

static int cmd_device_list(const struct shell *shell,
			   size_t argc, char **argv)
{
   12c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   12c30:	b08a      	sub	sp, #40	; 0x28
   12c32:	4605      	mov	r5, r0
	const struct device *devlist;
	size_t devcnt = z_device_get_all_static(&devlist);
   12c34:	a801      	add	r0, sp, #4
   12c36:	f010 fc8b 	bl	23550 <z_device_get_all_static>
	const struct device *devlist_end = devlist + devcnt;
   12c3a:	9b01      	ldr	r3, [sp, #4]
	const struct device *dev;
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   12c3c:	4a1b      	ldr	r2, [pc, #108]	; (12cac <cmd_device_list+0x80>)
	for (dev = devlist; dev < devlist_end; dev++) {
		char buf[20];
		const char *name = get_device_name(dev, buf, sizeof(buf));
		const char *state = "READY";

		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   12c3e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 12cb8 <cmd_device_list+0x8c>
		if (!device_is_ready(dev)) {
			state = "DISABLED";
   12c42:	f8df 9078 	ldr.w	r9, [pc, #120]	; 12cbc <cmd_device_list+0x90>
   12c46:	f8df a078 	ldr.w	sl, [pc, #120]	; 12cc0 <cmd_device_list+0x94>
	const struct device *devlist_end = devlist + devcnt;
   12c4a:	2618      	movs	r6, #24
   12c4c:	fb06 3600 	mla	r6, r6, r0, r3
	shell_fprintf(shell, SHELL_NORMAL, "devices:\n");
   12c50:	2108      	movs	r1, #8
   12c52:	4628      	mov	r0, r5
   12c54:	f016 ff92 	bl	29b7c <shell_fprintf>
	for (dev = devlist; dev < devlist_end; dev++) {
   12c58:	9c01      	ldr	r4, [sp, #4]
   12c5a:	42b4      	cmp	r4, r6
   12c5c:	d303      	bcc.n	12c66 <cmd_device_list+0x3a>
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
		}
	}

	return 0;
}
   12c5e:	2000      	movs	r0, #0
   12c60:	b00a      	add	sp, #40	; 0x28
   12c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const char *name = get_device_name(dev, buf, sizeof(buf));
   12c66:	af05      	add	r7, sp, #20
   12c68:	4639      	mov	r1, r7
   12c6a:	2214      	movs	r2, #20
   12c6c:	4620      	mov	r0, r4
   12c6e:	f7ff ffbd 	bl	12bec <get_device_name>
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   12c72:	4642      	mov	r2, r8
		const char *name = get_device_name(dev, buf, sizeof(buf));
   12c74:	4603      	mov	r3, r0
		shell_fprintf(shell, SHELL_NORMAL, "- %s", name);
   12c76:	2108      	movs	r1, #8
   12c78:	4628      	mov	r0, r5
   12c7a:	f016 ff7f 	bl	29b7c <shell_fprintf>
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
   12c7e:	4620      	mov	r0, r4
   12c80:	f019 fdb8 	bl	2c7f4 <z_device_ready>
		shell_fprintf(shell, SHELL_NORMAL, " (%s)\n", state);
   12c84:	4a0a      	ldr	r2, [pc, #40]	; (12cb0 <cmd_device_list+0x84>)
   12c86:	2800      	cmp	r0, #0
   12c88:	bf14      	ite	ne
   12c8a:	464b      	movne	r3, r9
   12c8c:	4653      	moveq	r3, sl
   12c8e:	2108      	movs	r1, #8
   12c90:	4628      	mov	r0, r5
   12c92:	f016 ff73 	bl	29b7c <shell_fprintf>
			struct cmd_device_list_visitor_context ctx = {
   12c96:	2314      	movs	r3, #20
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   12c98:	4620      	mov	r0, r4
   12c9a:	4906      	ldr	r1, [pc, #24]	; (12cb4 <cmd_device_list+0x88>)
			struct cmd_device_list_visitor_context ctx = {
   12c9c:	9304      	str	r3, [sp, #16]
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   12c9e:	aa02      	add	r2, sp, #8
			struct cmd_device_list_visitor_context ctx = {
   12ca0:	e9cd 5702 	strd	r5, r7, [sp, #8]
	for (dev = devlist; dev < devlist_end; dev++) {
   12ca4:	3418      	adds	r4, #24
			(void)device_required_foreach(dev, cmd_device_list_visitor, &ctx);
   12ca6:	f019 fdaf 	bl	2c808 <device_required_foreach>
	for (dev = devlist; dev < devlist_end; dev++) {
   12caa:	e7d6      	b.n	12c5a <cmd_device_list+0x2e>
   12cac:	0002f59f 	.word	0x0002f59f
   12cb0:	00032194 	.word	0x00032194
   12cb4:	00012c0d 	.word	0x00012c0d
   12cb8:	0002f5a9 	.word	0x0002f5a9
   12cbc:	0002f590 	.word	0x0002f590
   12cc0:	0002f596 	.word	0x0002f596

00012cc4 <device_get_config_level>:
{
   12cc4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   12cc8:	4b11      	ldr	r3, [pc, #68]	; (12d10 <device_get_config_level+0x4c>)
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
   12cca:	f8df 9048 	ldr.w	r9, [pc, #72]	; 12d14 <device_get_config_level+0x50>
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   12cce:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   12cd2:	3101      	adds	r1, #1
{
   12cd4:	b087      	sub	sp, #28
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   12cd6:	f853 8021 	ldr.w	r8, [r3, r1, lsl #2]
{
   12cda:	4606      	mov	r6, r0
	bool devices = false;
   12cdc:	2700      	movs	r7, #0
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   12cde:	45a0      	cmp	r8, r4
   12ce0:	d803      	bhi.n	12cea <device_get_config_level+0x26>
}
   12ce2:	4638      	mov	r0, r7
   12ce4:	b007      	add	sp, #28
   12ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   12cea:	4620      	mov	r0, r4
   12cec:	f019 fd82 	bl	2c7f4 <z_device_ready>
   12cf0:	4605      	mov	r5, r0
   12cf2:	b158      	cbz	r0, 12d0c <device_get_config_level+0x48>
			shell_fprintf(shell, SHELL_NORMAL, "- %s\n",
   12cf4:	2214      	movs	r2, #20
   12cf6:	a901      	add	r1, sp, #4
   12cf8:	4620      	mov	r0, r4
   12cfa:	f7ff ff77 	bl	12bec <get_device_name>
   12cfe:	464a      	mov	r2, r9
   12d00:	4603      	mov	r3, r0
   12d02:	2108      	movs	r1, #8
   12d04:	4630      	mov	r0, r6
   12d06:	f016 ff39 	bl	29b7c <shell_fprintf>
			devices = true;
   12d0a:	462f      	mov	r7, r5
	for (dev = levels[level]; dev < levels[level+1]; dev++) {
   12d0c:	3418      	adds	r4, #24
   12d0e:	e7e6      	b.n	12cde <device_get_config_level+0x1a>
   12d10:	0002d8d4 	.word	0x0002d8d4
   12d14:	0002f5ae 	.word	0x0002f5ae

00012d18 <cmd_device_levels>:
{
   12d18:	b510      	push	{r4, lr}
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
   12d1a:	2108      	movs	r1, #8
{
   12d1c:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 1:\n");
   12d1e:	4a1e      	ldr	r2, [pc, #120]	; (12d98 <cmd_device_levels+0x80>)
   12d20:	f016 ff2c 	bl	29b7c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_1);
   12d24:	2100      	movs	r1, #0
   12d26:	4620      	mov	r0, r4
   12d28:	f7ff ffcc 	bl	12cc4 <device_get_config_level>
	if (ret == false) {
   12d2c:	b920      	cbnz	r0, 12d38 <cmd_device_levels+0x20>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   12d2e:	4a1b      	ldr	r2, [pc, #108]	; (12d9c <cmd_device_levels+0x84>)
   12d30:	2108      	movs	r1, #8
   12d32:	4620      	mov	r0, r4
   12d34:	f016 ff22 	bl	29b7c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "PRE KERNEL 2:\n");
   12d38:	2108      	movs	r1, #8
   12d3a:	4620      	mov	r0, r4
   12d3c:	4a18      	ldr	r2, [pc, #96]	; (12da0 <cmd_device_levels+0x88>)
   12d3e:	f016 ff1d 	bl	29b7c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_PRE_KERNEL_2);
   12d42:	2101      	movs	r1, #1
   12d44:	4620      	mov	r0, r4
   12d46:	f7ff ffbd 	bl	12cc4 <device_get_config_level>
	if (ret == false) {
   12d4a:	b920      	cbnz	r0, 12d56 <cmd_device_levels+0x3e>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   12d4c:	4a13      	ldr	r2, [pc, #76]	; (12d9c <cmd_device_levels+0x84>)
   12d4e:	2108      	movs	r1, #8
   12d50:	4620      	mov	r0, r4
   12d52:	f016 ff13 	bl	29b7c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "POST_KERNEL:\n");
   12d56:	2108      	movs	r1, #8
   12d58:	4620      	mov	r0, r4
   12d5a:	4a12      	ldr	r2, [pc, #72]	; (12da4 <cmd_device_levels+0x8c>)
   12d5c:	f016 ff0e 	bl	29b7c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_POST_KERNEL);
   12d60:	2102      	movs	r1, #2
   12d62:	4620      	mov	r0, r4
   12d64:	f7ff ffae 	bl	12cc4 <device_get_config_level>
	if (ret == false) {
   12d68:	b920      	cbnz	r0, 12d74 <cmd_device_levels+0x5c>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   12d6a:	4a0c      	ldr	r2, [pc, #48]	; (12d9c <cmd_device_levels+0x84>)
   12d6c:	2108      	movs	r1, #8
   12d6e:	4620      	mov	r0, r4
   12d70:	f016 ff04 	bl	29b7c <shell_fprintf>
	shell_fprintf(shell, SHELL_NORMAL, "APPLICATION:\n");
   12d74:	2108      	movs	r1, #8
   12d76:	4620      	mov	r0, r4
   12d78:	4a0b      	ldr	r2, [pc, #44]	; (12da8 <cmd_device_levels+0x90>)
   12d7a:	f016 feff 	bl	29b7c <shell_fprintf>
	ret = device_get_config_level(shell, _SYS_INIT_LEVEL_APPLICATION);
   12d7e:	2103      	movs	r1, #3
   12d80:	4620      	mov	r0, r4
   12d82:	f7ff ff9f 	bl	12cc4 <device_get_config_level>
	if (ret == false) {
   12d86:	b920      	cbnz	r0, 12d92 <cmd_device_levels+0x7a>
		shell_fprintf(shell, SHELL_NORMAL, "- None\n");
   12d88:	4a04      	ldr	r2, [pc, #16]	; (12d9c <cmd_device_levels+0x84>)
   12d8a:	2108      	movs	r1, #8
   12d8c:	4620      	mov	r0, r4
   12d8e:	f016 fef5 	bl	29b7c <shell_fprintf>
}
   12d92:	2000      	movs	r0, #0
   12d94:	bd10      	pop	{r4, pc}
   12d96:	bf00      	nop
   12d98:	0002f5b4 	.word	0x0002f5b4
   12d9c:	0002f5c3 	.word	0x0002f5c3
   12da0:	0002f5cb 	.word	0x0002f5cb
   12da4:	0002f5da 	.word	0x0002f5da
   12da8:	0002f5e8 	.word	0x0002f5e8

00012dac <date_print>:

#define HELP_NONE      "[none]"
#define HELP_DATE_SET  "[Y-m-d] <H:M:S>"

static void date_print(const struct shell *shell, struct tm *tm)
{
   12dac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	shell_print(shell,
   12dae:	680a      	ldr	r2, [r1, #0]
   12db0:	694b      	ldr	r3, [r1, #20]
   12db2:	9204      	str	r2, [sp, #16]
   12db4:	684a      	ldr	r2, [r1, #4]
   12db6:	9203      	str	r2, [sp, #12]
   12db8:	688a      	ldr	r2, [r1, #8]
   12dba:	9202      	str	r2, [sp, #8]
   12dbc:	68ca      	ldr	r2, [r1, #12]
   12dbe:	9201      	str	r2, [sp, #4]
   12dc0:	690a      	ldr	r2, [r1, #16]
   12dc2:	3201      	adds	r2, #1
   12dc4:	9200      	str	r2, [sp, #0]
   12dc6:	f203 736c 	addw	r3, r3, #1900	; 0x76c
   12dca:	4a03      	ldr	r2, [pc, #12]	; (12dd8 <date_print+0x2c>)
   12dcc:	2108      	movs	r1, #8
   12dce:	f016 fed5 	bl	29b7c <shell_fprintf>
		    tm->tm_mon + 1,
		    tm->tm_mday,
		    tm->tm_hour,
		    tm->tm_min,
		    tm->tm_sec);
}
   12dd2:	b007      	add	sp, #28
   12dd4:	f85d fb04 	ldr.w	pc, [sp], #4
   12dd8:	0002f64c 	.word	0x0002f64c

00012ddc <get_h_m_s>:
 * For user convenience of small adjustments to time the time argument will
 * accept H:M:S, :M:S or ::S where the missing field(s) will be filled in by
 * the previous time state.
 */
static int get_h_m_s(const struct shell *shell, struct tm *tm, char *time_str)
{
   12ddc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	char *endptr;

	if (*time_str == ':') {
   12dde:	7813      	ldrb	r3, [r2, #0]
   12de0:	2b3a      	cmp	r3, #58	; 0x3a
{
   12de2:	4606      	mov	r6, r0
   12de4:	460f      	mov	r7, r1
   12de6:	4615      	mov	r5, r2
	if (*time_str == ':') {
   12de8:	d116      	bne.n	12e18 <get_h_m_s+0x3c>
		time_str++;
   12dea:	1c54      	adds	r4, r2, #1
		} else {
			return -EINVAL;
		}
	}

	if (*time_str == ':') {
   12dec:	7823      	ldrb	r3, [r4, #0]
   12dee:	2b3a      	cmp	r3, #58	; 0x3a
   12df0:	d12e      	bne.n	12e50 <get_h_m_s+0x74>
		time_str++;
   12df2:	3401      	adds	r4, #1
		} else {
			return -EINVAL;
		}
	}

	endptr = NULL;
   12df4:	2300      	movs	r3, #0
	tm->tm_sec = strtol(time_str, &endptr, 10);
   12df6:	220a      	movs	r2, #10
   12df8:	a901      	add	r1, sp, #4
   12dfa:	4620      	mov	r0, r4
	endptr = NULL;
   12dfc:	9301      	str	r3, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   12dfe:	f015 fb57 	bl	284b0 <strtol>
	if ((endptr == time_str) || (*endptr != '\0')) {
   12e02:	9a01      	ldr	r2, [sp, #4]
	tm->tm_sec = strtol(time_str, &endptr, 10);
   12e04:	6038      	str	r0, [r7, #0]
	if ((endptr == time_str) || (*endptr != '\0')) {
   12e06:	42a2      	cmp	r2, r4
	tm->tm_sec = strtol(time_str, &endptr, 10);
   12e08:	4603      	mov	r3, r0
	if ((endptr == time_str) || (*endptr != '\0')) {
   12e0a:	d010      	beq.n	12e2e <get_h_m_s+0x52>
   12e0c:	7810      	ldrb	r0, [r2, #0]
   12e0e:	b970      	cbnz	r0, 12e2e <get_h_m_s+0x52>
		return -EINVAL;
	}

	/* Note range allows for a leap second */
	if ((tm->tm_sec < 0) || (tm->tm_sec > 60)) {
   12e10:	2b3c      	cmp	r3, #60	; 0x3c
   12e12:	d90e      	bls.n	12e32 <get_h_m_s+0x56>
		shell_error(shell, "Invalid second");
   12e14:	4a18      	ldr	r2, [pc, #96]	; (12e78 <get_h_m_s+0x9c>)
   12e16:	e014      	b.n	12e42 <get_h_m_s+0x66>
		endptr = NULL;
   12e18:	2300      	movs	r3, #0
		tm->tm_hour = strtol(time_str, &endptr, 10);
   12e1a:	220a      	movs	r2, #10
   12e1c:	a901      	add	r1, sp, #4
   12e1e:	4628      	mov	r0, r5
		endptr = NULL;
   12e20:	9301      	str	r3, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   12e22:	f015 fb45 	bl	284b0 <strtol>
		if (endptr == time_str) {
   12e26:	9c01      	ldr	r4, [sp, #4]
		tm->tm_hour = strtol(time_str, &endptr, 10);
   12e28:	60b8      	str	r0, [r7, #8]
		if (endptr == time_str) {
   12e2a:	42ac      	cmp	r4, r5
   12e2c:	d103      	bne.n	12e36 <get_h_m_s+0x5a>
		return -EINVAL;
   12e2e:	f06f 0015 	mvn.w	r0, #21
	}

	return 0;
}
   12e32:	b003      	add	sp, #12
   12e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (*endptr == ':') {
   12e36:	7823      	ldrb	r3, [r4, #0]
   12e38:	2b3a      	cmp	r3, #58	; 0x3a
   12e3a:	d1f8      	bne.n	12e2e <get_h_m_s+0x52>
			if ((tm->tm_hour < 0) || (tm->tm_hour > 23)) {
   12e3c:	2817      	cmp	r0, #23
   12e3e:	d905      	bls.n	12e4c <get_h_m_s+0x70>
				shell_error(shell, "Invalid hour");
   12e40:	4a0e      	ldr	r2, [pc, #56]	; (12e7c <get_h_m_s+0xa0>)
		shell_error(shell, "Invalid second");
   12e42:	2101      	movs	r1, #1
   12e44:	4630      	mov	r0, r6
   12e46:	f016 fe99 	bl	29b7c <shell_fprintf>
   12e4a:	e7f0      	b.n	12e2e <get_h_m_s+0x52>
			time_str = endptr + 1;
   12e4c:	3401      	adds	r4, #1
   12e4e:	e7cd      	b.n	12dec <get_h_m_s+0x10>
		endptr = NULL;
   12e50:	2300      	movs	r3, #0
		tm->tm_min = strtol(time_str, &endptr, 10);
   12e52:	220a      	movs	r2, #10
   12e54:	a901      	add	r1, sp, #4
   12e56:	4620      	mov	r0, r4
		endptr = NULL;
   12e58:	9301      	str	r3, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   12e5a:	f015 fb29 	bl	284b0 <strtol>
		if (endptr == time_str) {
   12e5e:	9a01      	ldr	r2, [sp, #4]
		tm->tm_min = strtol(time_str, &endptr, 10);
   12e60:	6078      	str	r0, [r7, #4]
		if (endptr == time_str) {
   12e62:	42a2      	cmp	r2, r4
   12e64:	d0e3      	beq.n	12e2e <get_h_m_s+0x52>
		} else if (*endptr == ':') {
   12e66:	7813      	ldrb	r3, [r2, #0]
   12e68:	2b3a      	cmp	r3, #58	; 0x3a
   12e6a:	d1e0      	bne.n	12e2e <get_h_m_s+0x52>
			if ((tm->tm_min < 0) || (tm->tm_min > 59)) {
   12e6c:	283b      	cmp	r0, #59	; 0x3b
   12e6e:	d901      	bls.n	12e74 <get_h_m_s+0x98>
				shell_error(shell, "Invalid minute");
   12e70:	4a03      	ldr	r2, [pc, #12]	; (12e80 <get_h_m_s+0xa4>)
   12e72:	e7e6      	b.n	12e42 <get_h_m_s+0x66>
			time_str = endptr + 1;
   12e74:	1c54      	adds	r4, r2, #1
   12e76:	e7bd      	b.n	12df4 <get_h_m_s+0x18>
   12e78:	0002f68b 	.word	0x0002f68b
   12e7c:	0002f66d 	.word	0x0002f66d
   12e80:	0002f67b 	.word	0x0002f67b

00012e84 <cmd_date_set>:

static int cmd_date_set(const struct shell *shell, size_t argc, char **argv)
{
   12e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12e88:	4604      	mov	r4, r0
   12e8a:	b091      	sub	sp, #68	; 0x44
   12e8c:	460d      	mov	r5, r1
   12e8e:	4617      	mov	r7, r2
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&clock_id, *(uintptr_t *)&ts, K_SYSCALL_CLOCK_GETTIME);
	}
#endif
	compiler_barrier();
	return z_impl_clock_gettime(clock_id, ts);
   12e90:	2001      	movs	r0, #1
   12e92:	a902      	add	r1, sp, #8
   12e94:	f7fc ff0c 	bl	fcb0 <z_impl_clock_gettime>
	struct tm tm;
	int ret;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   12e98:	a907      	add	r1, sp, #28
   12e9a:	a802      	add	r0, sp, #8
   12e9c:	f015 f8f2 	bl	28084 <gmtime_r>

	if (argc == 3) {
   12ea0:	2d03      	cmp	r5, #3
   12ea2:	d160      	bne.n	12f66 <cmd_date_set+0xe2>
		ret = get_y_m_d(shell, &tm, argv[1]);
   12ea4:	687d      	ldr	r5, [r7, #4]
	endptr = NULL;
   12ea6:	f04f 0900 	mov.w	r9, #0
	year = strtol(date_str, &endptr, 10);
   12eaa:	220a      	movs	r2, #10
   12eac:	a901      	add	r1, sp, #4
   12eae:	4628      	mov	r0, r5
	endptr = NULL;
   12eb0:	f8cd 9004 	str.w	r9, [sp, #4]
	year = strtol(date_str, &endptr, 10);
   12eb4:	f015 fafc 	bl	284b0 <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   12eb8:	9e01      	ldr	r6, [sp, #4]
   12eba:	42b5      	cmp	r5, r6
	year = strtol(date_str, &endptr, 10);
   12ebc:	4680      	mov	r8, r0
	if ((endptr == date_str) || (*endptr != '-')) {
   12ebe:	d018      	beq.n	12ef2 <cmd_date_set+0x6e>
   12ec0:	7832      	ldrb	r2, [r6, #0]
   12ec2:	2a2d      	cmp	r2, #45	; 0x2d
   12ec4:	d115      	bne.n	12ef2 <cmd_date_set+0x6e>
	date_str = endptr + 1;
   12ec6:	3601      	adds	r6, #1
	month = strtol(date_str, &endptr, 10);
   12ec8:	220a      	movs	r2, #10
   12eca:	a901      	add	r1, sp, #4
   12ecc:	4630      	mov	r0, r6
	endptr = NULL;
   12ece:	f8cd 9004 	str.w	r9, [sp, #4]
	month = strtol(date_str, &endptr, 10);
   12ed2:	f015 faed 	bl	284b0 <strtol>
	if ((endptr == date_str) || (*endptr != '-')) {
   12ed6:	9b01      	ldr	r3, [sp, #4]
   12ed8:	429e      	cmp	r6, r3
   12eda:	d00a      	beq.n	12ef2 <cmd_date_set+0x6e>
   12edc:	781a      	ldrb	r2, [r3, #0]
   12ede:	2a2d      	cmp	r2, #45	; 0x2d
   12ee0:	d107      	bne.n	12ef2 <cmd_date_set+0x6e>
	if ((month < 1) || (month > 12)) {
   12ee2:	1e45      	subs	r5, r0, #1
   12ee4:	2d0b      	cmp	r5, #11
   12ee6:	d90d      	bls.n	12f04 <cmd_date_set+0x80>
		shell_error(shell, "Invalid month");
   12ee8:	4a2b      	ldr	r2, [pc, #172]	; (12f98 <cmd_date_set+0x114>)
		shell_error(shell, "Invalid day");
   12eea:	2101      	movs	r1, #1
   12eec:	4620      	mov	r0, r4
   12eee:	f016 fe45 	bl	29b7c <shell_fprintf>
		if (ret != 0) {
			shell_help(shell);
   12ef2:	4620      	mov	r0, r4
   12ef4:	f016 fe67 	bl	29bc6 <shell_help>
	tp.tv_nsec = 0;

	ret = clock_settime(CLOCK_REALTIME, &tp);
	if (ret != 0) {
		shell_error(shell, "Could not set date %d", ret);
		return -EINVAL;
   12ef8:	f06f 0515 	mvn.w	r5, #21
	}

	date_print(shell, &tm);

	return 0;
}
   12efc:	4628      	mov	r0, r5
   12efe:	b011      	add	sp, #68	; 0x44
   12f00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	date_str = endptr + 1;
   12f04:	1c5e      	adds	r6, r3, #1
	day = strtol(date_str, &endptr, 10);
   12f06:	220a      	movs	r2, #10
   12f08:	a901      	add	r1, sp, #4
   12f0a:	4630      	mov	r0, r6
	endptr = NULL;
   12f0c:	f8cd 9004 	str.w	r9, [sp, #4]
	day = strtol(date_str, &endptr, 10);
   12f10:	f015 face 	bl	284b0 <strtol>
	if ((endptr == date_str) || (*endptr != '\0')) {
   12f14:	9b01      	ldr	r3, [sp, #4]
   12f16:	429e      	cmp	r6, r3
   12f18:	d0eb      	beq.n	12ef2 <cmd_date_set+0x6e>
   12f1a:	781b      	ldrb	r3, [r3, #0]
   12f1c:	2b00      	cmp	r3, #0
   12f1e:	d1e8      	bne.n	12ef2 <cmd_date_set+0x6e>
	if ((day < 1) || (day > 31)) {
   12f20:	1e43      	subs	r3, r0, #1
   12f22:	2b1e      	cmp	r3, #30
   12f24:	d901      	bls.n	12f2a <cmd_date_set+0xa6>
		shell_error(shell, "Invalid day");
   12f26:	4a1d      	ldr	r2, [pc, #116]	; (12f9c <cmd_date_set+0x118>)
   12f28:	e7df      	b.n	12eea <cmd_date_set+0x66>
	tm->tm_year = year - 1900;
   12f2a:	f2a8 736c 	subw	r3, r8, #1900	; 0x76c
	tm->tm_mon = month - 1;
   12f2e:	e9cd 530b 	strd	r5, r3, [sp, #44]	; 0x2c
		ret = get_h_m_s(shell, &tm, argv[2]);
   12f32:	68ba      	ldr	r2, [r7, #8]
	tm->tm_mday = day;
   12f34:	900a      	str	r0, [sp, #40]	; 0x28
		ret = get_h_m_s(shell, &tm, argv[2]);
   12f36:	a907      	add	r1, sp, #28
   12f38:	4620      	mov	r0, r4
   12f3a:	f7ff ff4f 	bl	12ddc <get_h_m_s>
		if (ret != 0) {
   12f3e:	2800      	cmp	r0, #0
   12f40:	d1d7      	bne.n	12ef2 <cmd_date_set+0x6e>
	tp.tv_sec = timeutil_timegm(&tm);
   12f42:	a807      	add	r0, sp, #28
   12f44:	f015 fea1 	bl	28c8a <timeutil_timegm>
   12f48:	460b      	mov	r3, r1
   12f4a:	4602      	mov	r2, r0
   12f4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
	if (tp.tv_sec == -1) {
   12f50:	3301      	adds	r3, #1
   12f52:	bf08      	it	eq
   12f54:	f1b0 3fff 	cmpeq.w	r0, #4294967295
   12f58:	d109      	bne.n	12f6e <cmd_date_set+0xea>
		shell_error(shell, "Failed to calculate seconds since Epoch");
   12f5a:	4a11      	ldr	r2, [pc, #68]	; (12fa0 <cmd_date_set+0x11c>)
   12f5c:	2101      	movs	r1, #1
   12f5e:	4620      	mov	r0, r4
   12f60:	f016 fe0c 	bl	29b7c <shell_fprintf>
		return -EINVAL;
   12f64:	e7c8      	b.n	12ef8 <cmd_date_set+0x74>
	} else if (argc == 2) {
   12f66:	2d02      	cmp	r5, #2
   12f68:	d1c3      	bne.n	12ef2 <cmd_date_set+0x6e>
		ret = get_h_m_s(shell, &tm, argv[1]);
   12f6a:	687a      	ldr	r2, [r7, #4]
   12f6c:	e7e3      	b.n	12f36 <cmd_date_set+0xb2>
	tp.tv_nsec = 0;
   12f6e:	2300      	movs	r3, #0
	ret = clock_settime(CLOCK_REALTIME, &tp);
   12f70:	a902      	add	r1, sp, #8
   12f72:	2001      	movs	r0, #1
	tp.tv_nsec = 0;
   12f74:	9304      	str	r3, [sp, #16]
	ret = clock_settime(CLOCK_REALTIME, &tp);
   12f76:	f7fc ff2f 	bl	fdd8 <clock_settime>
	if (ret != 0) {
   12f7a:	4605      	mov	r5, r0
   12f7c:	b130      	cbz	r0, 12f8c <cmd_date_set+0x108>
		shell_error(shell, "Could not set date %d", ret);
   12f7e:	4603      	mov	r3, r0
   12f80:	4a08      	ldr	r2, [pc, #32]	; (12fa4 <cmd_date_set+0x120>)
   12f82:	2101      	movs	r1, #1
   12f84:	4620      	mov	r0, r4
   12f86:	f016 fdf9 	bl	29b7c <shell_fprintf>
   12f8a:	e7b5      	b.n	12ef8 <cmd_date_set+0x74>
	date_print(shell, &tm);
   12f8c:	a907      	add	r1, sp, #28
   12f8e:	4620      	mov	r0, r4
   12f90:	f7ff ff0c 	bl	12dac <date_print>
	return 0;
   12f94:	e7b2      	b.n	12efc <cmd_date_set+0x78>
   12f96:	bf00      	nop
   12f98:	0002f69b 	.word	0x0002f69b
   12f9c:	0002f6aa 	.word	0x0002f6aa
   12fa0:	0002f6b7 	.word	0x0002f6b7
   12fa4:	0002f6e0 	.word	0x0002f6e0

00012fa8 <cmd_devmem>:
{
	mem_addr_t phys_addr, addr;
	uint32_t value = 0;
	uint8_t width;

	if (argc < 2 || argc > 4) {
   12fa8:	1e8b      	subs	r3, r1, #2
   12faa:	2b02      	cmp	r3, #2
{
   12fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12fb0:	4607      	mov	r7, r0
   12fb2:	4688      	mov	r8, r1
   12fb4:	4614      	mov	r4, r2
	if (argc < 2 || argc > 4) {
   12fb6:	d833      	bhi.n	13020 <cmd_devmem+0x78>
		return -EINVAL;
	}

	phys_addr = strtoul(argv[1], NULL, 16);
   12fb8:	6860      	ldr	r0, [r4, #4]
   12fba:	2210      	movs	r2, #16
   12fbc:	2100      	movs	r1, #0
   12fbe:	f015 fafd 	bl	285bc <strtoul>
	shell_print(sh, "Mapped 0x%lx to 0x%lx\n", phys_addr, addr);
#else
	addr = phys_addr;
#endif /* defined(CONFIG_MMU) || defined(CONFIG_PCIE) */

	if (argc < 3) {
   12fc2:	f1b8 0f02 	cmp.w	r8, #2
	phys_addr = strtoul(argv[1], NULL, 16);
   12fc6:	4606      	mov	r6, r0
	if (argc < 3) {
   12fc8:	d01e      	beq.n	13008 <cmd_devmem+0x60>
		width = 32;
	} else {
		width = strtoul(argv[2], NULL, 10);
   12fca:	68a0      	ldr	r0, [r4, #8]
   12fcc:	220a      	movs	r2, #10
   12fce:	2100      	movs	r1, #0
   12fd0:	f015 faf4 	bl	285bc <strtoul>
   12fd4:	b2c5      	uxtb	r5, r0
	}

	shell_fprintf(sh, SHELL_NORMAL, "Using data width %d\n", width);
   12fd6:	4a21      	ldr	r2, [pc, #132]	; (1305c <cmd_devmem+0xb4>)
   12fd8:	462b      	mov	r3, r5
   12fda:	2108      	movs	r1, #8
   12fdc:	4638      	mov	r0, r7
   12fde:	f016 fdcd 	bl	29b7c <shell_fprintf>

	if (argc <= 3) {
   12fe2:	f1b8 0f04 	cmp.w	r8, #4
   12fe6:	d01e      	beq.n	13026 <cmd_devmem+0x7e>
	switch (width) {
   12fe8:	2d10      	cmp	r5, #16
   12fea:	d00f      	beq.n	1300c <cmd_devmem+0x64>
   12fec:	2d20      	cmp	r5, #32
   12fee:	d010      	beq.n	13012 <cmd_devmem+0x6a>
   12ff0:	2d08      	cmp	r5, #8
   12ff2:	d110      	bne.n	13016 <cmd_devmem+0x6e>
extern "C" {
#endif

static ALWAYS_INLINE uint8_t sys_read8(mem_addr_t addr)
{
	return *(volatile uint8_t *)addr;
   12ff4:	7833      	ldrb	r3, [r6, #0]
   12ff6:	b2db      	uxtb	r3, r3
		shell_fprintf(sh, SHELL_NORMAL, "Read value 0x%x\n", value);
   12ff8:	4a19      	ldr	r2, [pc, #100]	; (13060 <cmd_devmem+0xb8>)
   12ffa:	2108      	movs	r1, #8
   12ffc:	4638      	mov	r0, r7
   12ffe:	f016 fdbd 	bl	29b7c <shell_fprintf>
	int err = 0;
   13002:	2000      	movs	r0, #0
	value = strtoul(argv[3], NULL, 16);

	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);

	return memory_write(sh, addr, width, value);
}
   13004:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		width = 32;
   13008:	2520      	movs	r5, #32
   1300a:	e7e4      	b.n	12fd6 <cmd_devmem+0x2e>
	*(volatile uint8_t *)addr = data;
}

static ALWAYS_INLINE uint16_t sys_read16(mem_addr_t addr)
{
	return *(volatile uint16_t *)addr;
   1300c:	8833      	ldrh	r3, [r6, #0]
   1300e:	b29b      	uxth	r3, r3
	if (err == 0) {
   13010:	e7f2      	b.n	12ff8 <cmd_devmem+0x50>
	*(volatile uint16_t *)addr = data;
}

static ALWAYS_INLINE uint32_t sys_read32(mem_addr_t addr)
{
	return *(volatile uint32_t *)addr;
   13012:	6833      	ldr	r3, [r6, #0]
   13014:	e7f0      	b.n	12ff8 <cmd_devmem+0x50>
		shell_fprintf(sh, SHELL_NORMAL, "Incorrect data width\n");
   13016:	4a13      	ldr	r2, [pc, #76]	; (13064 <cmd_devmem+0xbc>)
   13018:	2108      	movs	r1, #8
   1301a:	4638      	mov	r0, r7
   1301c:	f016 fdae 	bl	29b7c <shell_fprintf>
		return -EINVAL;
   13020:	f06f 0015 	mvn.w	r0, #21
   13024:	e7ee      	b.n	13004 <cmd_devmem+0x5c>
	value = strtoul(argv[3], NULL, 16);
   13026:	68e0      	ldr	r0, [r4, #12]
   13028:	2210      	movs	r2, #16
   1302a:	2100      	movs	r1, #0
   1302c:	f015 fac6 	bl	285bc <strtoul>
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
   13030:	4a0d      	ldr	r2, [pc, #52]	; (13068 <cmd_devmem+0xc0>)
   13032:	4603      	mov	r3, r0
	value = strtoul(argv[3], NULL, 16);
   13034:	4604      	mov	r4, r0
	shell_fprintf(sh, SHELL_NORMAL, "Writing value 0x%x\n", value);
   13036:	2108      	movs	r1, #8
   13038:	4638      	mov	r0, r7
   1303a:	f016 fd9f 	bl	29b7c <shell_fprintf>
	switch (width) {
   1303e:	2d10      	cmp	r5, #16
   13040:	d006      	beq.n	13050 <cmd_devmem+0xa8>
   13042:	2d20      	cmp	r5, #32
   13044:	d007      	beq.n	13056 <cmd_devmem+0xae>
   13046:	2d08      	cmp	r5, #8
   13048:	d1e5      	bne.n	13016 <cmd_devmem+0x6e>
		sys_write8(value, addr);
   1304a:	b2e4      	uxtb	r4, r4
	*(volatile uint8_t *)addr = data;
   1304c:	7034      	strb	r4, [r6, #0]
   1304e:	e7d8      	b.n	13002 <cmd_devmem+0x5a>
		sys_write16(value, addr);
   13050:	b2a4      	uxth	r4, r4
	*(volatile uint16_t *)addr = data;
   13052:	8034      	strh	r4, [r6, #0]
   13054:	e7d5      	b.n	13002 <cmd_devmem+0x5a>
}

static ALWAYS_INLINE void sys_write32(uint32_t data, mem_addr_t addr)
{
	*(volatile uint32_t *)addr = data;
   13056:	6034      	str	r4, [r6, #0]
   13058:	e7d3      	b.n	13002 <cmd_devmem+0x5a>
   1305a:	bf00      	nop
   1305c:	0002f720 	.word	0x0002f720
   13060:	0002f74b 	.word	0x0002f74b
   13064:	0002f735 	.word	0x0002f735
   13068:	0002f75c 	.word	0x0002f75c

0001306c <set_bypass>:
{
   1306c:	b570      	push	{r4, r5, r6, lr}
   1306e:	4c0f      	ldr	r4, [pc, #60]	; (130ac <set_bypass+0x40>)
   13070:	4605      	mov	r5, r0
	if (bypass && in_use) {
   13072:	7823      	ldrb	r3, [r4, #0]
   13074:	460e      	mov	r6, r1
   13076:	b139      	cbz	r1, 13088 <set_bypass+0x1c>
   13078:	b133      	cbz	r3, 13088 <set_bypass+0x1c>
		shell_error(sh, "devmem load supports setting bypass on a single instance.");
   1307a:	4a0d      	ldr	r2, [pc, #52]	; (130b0 <set_bypass+0x44>)
   1307c:	2101      	movs	r1, #1
   1307e:	f016 fd7d 	bl	29b7c <shell_fprintf>
   13082:	f06f 000f 	mvn.w	r0, #15
}
   13086:	bd70      	pop	{r4, r5, r6, pc}
	in_use = !in_use;
   13088:	f083 0301 	eor.w	r3, r3, #1
   1308c:	7023      	strb	r3, [r4, #0]
	if (in_use) {
   1308e:	b133      	cbz	r3, 1309e <set_bypass+0x32>
		shell_print(sh, "Loading...\npress ctrl-x ctrl-q to escape");
   13090:	4a08      	ldr	r2, [pc, #32]	; (130b4 <set_bypass+0x48>)
   13092:	2108      	movs	r1, #8
   13094:	4628      	mov	r0, r5
   13096:	f016 fd71 	bl	29b7c <shell_fprintf>
		in_use = true;
   1309a:	2301      	movs	r3, #1
   1309c:	7023      	strb	r3, [r4, #0]
	shell_set_bypass(sh, bypass);
   1309e:	4628      	mov	r0, r5
   130a0:	4631      	mov	r1, r6
   130a2:	f016 fda5 	bl	29bf0 <shell_set_bypass>
	return 0;
   130a6:	2000      	movs	r0, #0
   130a8:	e7ed      	b.n	13086 <set_bypass+0x1a>
   130aa:	bf00      	nop
   130ac:	20002a56 	.word	0x20002a56
   130b0:	0002f770 	.word	0x0002f770
   130b4:	0002f7ab 	.word	0x0002f7ab

000130b8 <cmd_load>:
{
   130b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130bc:	4606      	mov	r6, r0
	chunk_element = 0;
   130be:	482e      	ldr	r0, [pc, #184]	; (13178 <cmd_load+0xc0>)
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
   130c0:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 13190 <cmd_load+0xd8>
		if (!strncmp(arg, "-e", 2)) {
   130c4:	f8df a0cc 	ldr.w	sl, [pc, #204]	; 13194 <cmd_load+0xdc>
			shell_print(sh, "Unknown option \"%s\"", arg);
   130c8:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 13198 <cmd_load+0xe0>
	littleendian = false;
   130cc:	2300      	movs	r3, #0
	chunk_element = 0;
   130ce:	6003      	str	r3, [r0, #0]
{
   130d0:	460d      	mov	r5, r1
	sum = 0;
   130d2:	482a      	ldr	r0, [pc, #168]	; (1317c <cmd_load+0xc4>)
	littleendian = false;
   130d4:	492a      	ldr	r1, [pc, #168]	; (13180 <cmd_load+0xc8>)
	sum = 0;
   130d6:	6003      	str	r3, [r0, #0]
	littleendian = false;
   130d8:	700b      	strb	r3, [r1, #0]
	while (argc >= 2) {
   130da:	4614      	mov	r4, r2
   130dc:	9100      	str	r1, [sp, #0]
   130de:	2d01      	cmp	r5, #1
   130e0:	4627      	mov	r7, r4
   130e2:	f854 3f04 	ldr.w	r3, [r4, #4]!
   130e6:	d921      	bls.n	1312c <cmd_load+0x74>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
   130e8:	4618      	mov	r0, r3
   130ea:	2202      	movs	r2, #2
   130ec:	4649      	mov	r1, r9
   130ee:	9301      	str	r3, [sp, #4]
   130f0:	f019 fdc6 	bl	2cc80 <strncmp>
   130f4:	9b01      	ldr	r3, [sp, #4]
   130f6:	b988      	cbnz	r0, 1311c <cmd_load+0x64>
   130f8:	6822      	ldr	r2, [r4, #0]
   130fa:	7892      	ldrb	r2, [r2, #2]
   130fc:	3a00      	subs	r2, #0
   130fe:	bf18      	it	ne
   13100:	2201      	movne	r2, #1
   13102:	eb03 0802 	add.w	r8, r3, r2
		if (!strncmp(arg, "-e", 2)) {
   13106:	4651      	mov	r1, sl
   13108:	2202      	movs	r2, #2
   1310a:	4640      	mov	r0, r8
   1310c:	f019 fdb8 	bl	2cc80 <strncmp>
   13110:	b930      	cbnz	r0, 13120 <cmd_load+0x68>
			littleendian = true;
   13112:	9a00      	ldr	r2, [sp, #0]
   13114:	2301      	movs	r3, #1
   13116:	7013      	strb	r3, [r2, #0]
		argc--;
   13118:	3d01      	subs	r5, #1
   1311a:	e7e0      	b.n	130de <cmd_load+0x26>
		arg = argv[1] + (!strncmp(argv[1], "--", 2) && argv[1][2]);
   1311c:	2200      	movs	r2, #0
   1311e:	e7f0      	b.n	13102 <cmd_load+0x4a>
		} else if (!strcmp(arg, "--")) {
   13120:	4649      	mov	r1, r9
   13122:	4640      	mov	r0, r8
   13124:	f7f9 f93c 	bl	c3a0 <strcmp>
   13128:	b9b0      	cbnz	r0, 13158 <cmd_load+0xa0>
			argv++;
   1312a:	3704      	adds	r7, #4
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
   1312c:	2200      	movs	r2, #0
   1312e:	4611      	mov	r1, r2
   13130:	6878      	ldr	r0, [r7, #4]
   13132:	f015 f9bd 	bl	284b0 <strtol>
   13136:	4b13      	ldr	r3, [pc, #76]	; (13184 <cmd_load+0xcc>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
   13138:	2200      	movs	r2, #0
   1313a:	4611      	mov	r1, r2
	bytes = (unsigned char *)strtol(argv[1], NULL, 0);
   1313c:	6018      	str	r0, [r3, #0]
	data = (uint32_t *)strtol(argv[1], NULL, 0);
   1313e:	6878      	ldr	r0, [r7, #4]
   13140:	f015 f9b6 	bl	284b0 <strtol>
   13144:	4b10      	ldr	r3, [pc, #64]	; (13188 <cmd_load+0xd0>)
	set_bypass(sh, bypass_cb);
   13146:	4911      	ldr	r1, [pc, #68]	; (1318c <cmd_load+0xd4>)
	data = (uint32_t *)strtol(argv[1], NULL, 0);
   13148:	6018      	str	r0, [r3, #0]
	set_bypass(sh, bypass_cb);
   1314a:	4630      	mov	r0, r6
   1314c:	f7ff ff8e 	bl	1306c <set_bypass>
}
   13150:	2000      	movs	r0, #0
   13152:	b003      	add	sp, #12
   13154:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if (arg[0] == '-' && arg[1]) {
   13158:	f898 2000 	ldrb.w	r2, [r8]
   1315c:	2a2d      	cmp	r2, #45	; 0x2d
   1315e:	d1e5      	bne.n	1312c <cmd_load+0x74>
   13160:	f898 2001 	ldrb.w	r2, [r8, #1]
   13164:	2a00      	cmp	r2, #0
   13166:	d0e1      	beq.n	1312c <cmd_load+0x74>
			shell_print(sh, "Unknown option \"%s\"", arg);
   13168:	4643      	mov	r3, r8
   1316a:	465a      	mov	r2, fp
   1316c:	2108      	movs	r1, #8
   1316e:	4630      	mov	r0, r6
   13170:	f016 fd04 	bl	29b7c <shell_fprintf>
   13174:	e7d0      	b.n	13118 <cmd_load+0x60>
   13176:	bf00      	nop
   13178:	20002318 	.word	0x20002318
   1317c:	20002320 	.word	0x20002320
   13180:	20002a57 	.word	0x20002a57
   13184:	20002314 	.word	0x20002314
   13188:	2000231c 	.word	0x2000231c
   1318c:	0001319d 	.word	0x0001319d
   13190:	0002f7d5 	.word	0x0002f7d5
   13194:	0002f7d8 	.word	0x0002f7d8
   13198:	0002f7db 	.word	0x0002f7db

0001319c <bypass_cb>:
{
   1319c:	b570      	push	{r4, r5, r6, lr}
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
   1319e:	4b3e      	ldr	r3, [pc, #248]	; (13298 <bypass_cb+0xfc>)
{
   131a0:	4605      	mov	r5, r0
	if (tail == CHAR_CAN && recv[0] == CHAR_DC1) {
   131a2:	7818      	ldrb	r0, [r3, #0]
   131a4:	2818      	cmp	r0, #24
   131a6:	d102      	bne.n	131ae <bypass_cb+0x12>
   131a8:	7808      	ldrb	r0, [r1, #0]
   131aa:	2811      	cmp	r0, #17
   131ac:	d031      	beq.n	13212 <bypass_cb+0x76>
   131ae:	3a01      	subs	r2, #1
   131b0:	4608      	mov	r0, r1
   131b2:	1854      	adds	r4, r2, r1
		for (int i = 0; i < (len - 1); i++) {
   131b4:	4284      	cmp	r4, r0
   131b6:	d125      	bne.n	13204 <bypass_cb+0x68>
	tail = recv[len - 1];
   131b8:	5c8a      	ldrb	r2, [r1, r2]
   131ba:	701a      	strb	r2, [r3, #0]
	if (is_ascii(*recv)) {
   131bc:	780a      	ldrb	r2, [r1, #0]
	return (data >= 0x30 && data <= 0x39) || (data >= 0x61 && data <= 0x66) ||
   131be:	4c37      	ldr	r4, [pc, #220]	; (1329c <bypass_cb+0x100>)
   131c0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
   131c4:	2b09      	cmp	r3, #9
   131c6:	d904      	bls.n	131d2 <bypass_cb+0x36>
	if (is_ascii(*recv)) {
   131c8:	f022 0320 	bic.w	r3, r2, #32
   131cc:	3b41      	subs	r3, #65	; 0x41
   131ce:	2b05      	cmp	r3, #5
   131d0:	d804      	bhi.n	131dc <bypass_cb+0x40>
		chunk[chunk_element] = *recv;
   131d2:	6823      	ldr	r3, [r4, #0]
   131d4:	4932      	ldr	r1, [pc, #200]	; (132a0 <bypass_cb+0x104>)
   131d6:	54ca      	strb	r2, [r1, r3]
		chunk_element++;
   131d8:	3301      	adds	r3, #1
   131da:	6023      	str	r3, [r4, #0]
	if (chunk_element == 2) {
   131dc:	6823      	ldr	r3, [r4, #0]
   131de:	2b02      	cmp	r3, #2
   131e0:	d134      	bne.n	1324c <bypass_cb+0xb0>
		byte = (uint8_t)strtoul(chunk, NULL, 16);
   131e2:	2210      	movs	r2, #16
   131e4:	482e      	ldr	r0, [pc, #184]	; (132a0 <bypass_cb+0x104>)
   131e6:	2100      	movs	r1, #0
   131e8:	f015 f9e8 	bl	285bc <strtoul>
		*bytes = byte;
   131ec:	4a2d      	ldr	r2, [pc, #180]	; (132a4 <bypass_cb+0x108>)
		byte = (uint8_t)strtoul(chunk, NULL, 16);
   131ee:	6813      	ldr	r3, [r2, #0]
   131f0:	f803 0b01 	strb.w	r0, [r3], #1
		bytes++;
   131f4:	6013      	str	r3, [r2, #0]
		sum++;
   131f6:	4a2c      	ldr	r2, [pc, #176]	; (132a8 <bypass_cb+0x10c>)
   131f8:	6813      	ldr	r3, [r2, #0]
   131fa:	3301      	adds	r3, #1
   131fc:	6013      	str	r3, [r2, #0]
		chunk_element = 0;
   131fe:	2300      	movs	r3, #0
   13200:	6023      	str	r3, [r4, #0]
   13202:	e023      	b.n	1324c <bypass_cb+0xb0>
			if (recv[i] == CHAR_CAN && recv[i + 1] == CHAR_DC1) {
   13204:	f810 6b01 	ldrb.w	r6, [r0], #1
   13208:	2e18      	cmp	r6, #24
   1320a:	d1d3      	bne.n	131b4 <bypass_cb+0x18>
   1320c:	7806      	ldrb	r6, [r0, #0]
   1320e:	2e11      	cmp	r6, #17
   13210:	d1d0      	bne.n	131b4 <bypass_cb+0x18>
		shell_print(sh, "Number of bytes read: %d", sum);
   13212:	4c25      	ldr	r4, [pc, #148]	; (132a8 <bypass_cb+0x10c>)
   13214:	4a25      	ldr	r2, [pc, #148]	; (132ac <bypass_cb+0x110>)
   13216:	6823      	ldr	r3, [r4, #0]
   13218:	2108      	movs	r1, #8
   1321a:	4628      	mov	r0, r5
   1321c:	f016 fcae 	bl	29b7c <shell_fprintf>
		set_bypass(sh, NULL);
   13220:	2100      	movs	r1, #0
   13222:	4628      	mov	r0, r5
   13224:	f7ff ff22 	bl	1306c <set_bypass>
		if (!littleendian) {
   13228:	4b21      	ldr	r3, [pc, #132]	; (132b0 <bypass_cb+0x114>)
   1322a:	7818      	ldrb	r0, [r3, #0]
   1322c:	b970      	cbnz	r0, 1324c <bypass_cb+0xb0>
   1322e:	4a21      	ldr	r2, [pc, #132]	; (132b4 <bypass_cb+0x118>)
   13230:	6823      	ldr	r3, [r4, #0]
   13232:	6811      	ldr	r1, [r2, #0]
			while (sum > 4) {
   13234:	2b04      	cmp	r3, #4
   13236:	dc0a      	bgt.n	1324e <bypass_cb+0xb2>
   13238:	b108      	cbz	r0, 1323e <bypass_cb+0xa2>
   1323a:	6011      	str	r1, [r2, #0]
   1323c:	6023      	str	r3, [r4, #0]
			if (sum % 4 == 0) {
   1323e:	f013 0103 	ands.w	r1, r3, #3
   13242:	d10b      	bne.n	1325c <bypass_cb+0xc0>
				*data = __bswap_32(*data);
   13244:	6812      	ldr	r2, [r2, #0]
   13246:	6813      	ldr	r3, [r2, #0]
   13248:	ba1b      	rev	r3, r3
				*data = __bswap_16(*data);
   1324a:	6013      	str	r3, [r2, #0]
}
   1324c:	bd70      	pop	{r4, r5, r6, pc}
				*data = __bswap_32(*data);
   1324e:	6808      	ldr	r0, [r1, #0]
   13250:	ba00      	rev	r0, r0
   13252:	f841 0b04 	str.w	r0, [r1], #4
				sum = sum - 4;
   13256:	3b04      	subs	r3, #4
				data++;
   13258:	2001      	movs	r0, #1
   1325a:	e7eb      	b.n	13234 <bypass_cb+0x98>
			} else if (sum % 4 == 2) {
   1325c:	425b      	negs	r3, r3
   1325e:	f003 0303 	and.w	r3, r3, #3
   13262:	bf58      	it	pl
   13264:	4259      	negpl	r1, r3
   13266:	2902      	cmp	r1, #2
   13268:	d107      	bne.n	1327a <bypass_cb+0xde>
				*data = __bswap_16(*data);
   1326a:	6812      	ldr	r2, [r2, #0]
   1326c:	6811      	ldr	r1, [r2, #0]
   1326e:	f3c1 2307 	ubfx	r3, r1, #8, #8
   13272:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   13276:	b29b      	uxth	r3, r3
   13278:	e7e7      	b.n	1324a <bypass_cb+0xae>
			} else if (sum % 4 == 3) {
   1327a:	2903      	cmp	r1, #3
   1327c:	d1e6      	bne.n	1324c <bypass_cb+0xb0>
				*data = __bswap_24(*data);
   1327e:	6810      	ldr	r0, [r2, #0]
   13280:	6802      	ldr	r2, [r0, #0]
   13282:	0411      	lsls	r1, r2, #16
   13284:	f3c2 4307 	ubfx	r3, r2, #16, #8
   13288:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1328c:	430b      	orrs	r3, r1
   1328e:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
   13292:	4313      	orrs	r3, r2
   13294:	6003      	str	r3, [r0, #0]
   13296:	e7d9      	b.n	1324c <bypass_cb+0xb0>
   13298:	20002a58 	.word	0x20002a58
   1329c:	20002318 	.word	0x20002318
   132a0:	20002a54 	.word	0x20002a54
   132a4:	20002314 	.word	0x20002314
   132a8:	20002320 	.word	0x20002320
   132ac:	0002f7f0 	.word	0x0002f7f0
   132b0:	20002a57 	.word	0x20002a57
   132b4:	2000231c 	.word	0x2000231c

000132b8 <init>:

static int init(const struct shell_transport *transport,
		const void *config,
		shell_transport_handler_t evt_handler,
		void *context)
{
   132b8:	b538      	push	{r3, r4, r5, lr}
   132ba:	4615      	mov	r5, r2
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   132bc:	6842      	ldr	r2, [r0, #4]
{
   132be:	460c      	mov	r4, r1

	sh_uart->ctrl_blk->dev = (const struct device *)config;
   132c0:	6811      	ldr	r1, [r2, #0]
	ring_buf_reset(sh_uart->tx_ringbuf);
   132c2:	6890      	ldr	r0, [r2, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
	sh_uart->ctrl_blk->context = context;
   132c4:	608b      	str	r3, [r1, #8]
	sh_uart->ctrl_blk->handler = evt_handler;
   132c6:	e9c1 4500 	strd	r4, r5, [r1]
	ring_buf_reset(sh_uart->tx_ringbuf);
   132ca:	f016 fb6a 	bl	299a2 <ring_buf_reset>
	ring_buf_reset(sh_uart->rx_ringbuf);
   132ce:	68d0      	ldr	r0, [r2, #12]
   132d0:	f016 fb67 	bl	299a2 <ring_buf_reset>
	sh_uart->ctrl_blk->tx_busy = 0;
   132d4:	6813      	ldr	r3, [r2, #0]
   132d6:	2100      	movs	r1, #0
   132d8:	60d9      	str	r1, [r3, #12]
static inline void uart_irq_callback_user_data_set(const struct device *dev,
						   uart_irq_callback_user_data_t cb,
						   void *user_data)
{
#ifdef CONFIG_UART_INTERRUPT_DRIVEN
	const struct uart_driver_api *api =
   132da:	68a3      	ldr	r3, [r4, #8]
		(const struct uart_driver_api *)dev->api;

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
   132dc:	b123      	cbz	r3, 132e8 <init+0x30>
   132de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
   132e0:	b113      	cbz	r3, 132e8 <init+0x30>
		api->irq_callback_set(dev, cb, user_data);
   132e2:	4905      	ldr	r1, [pc, #20]	; (132f8 <init+0x40>)
   132e4:	4620      	mov	r0, r4
   132e6:	4798      	blx	r3
	if (api->irq_rx_enable != NULL) {
   132e8:	68a3      	ldr	r3, [r4, #8]
   132ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   132ec:	b10b      	cbz	r3, 132f2 <init+0x3a>
		api->irq_rx_enable(dev);
   132ee:	4620      	mov	r0, r4
   132f0:	4798      	blx	r3
		k_timer_user_data_set(sh_uart->timer, (void *)sh_uart);
		k_timer_start(sh_uart->timer, RX_POLL_PERIOD, RX_POLL_PERIOD);
	}

	return 0;
}
   132f2:	2000      	movs	r0, #0
   132f4:	bd38      	pop	{r3, r4, r5, pc}
   132f6:	bf00      	nop
   132f8:	00013335 	.word	0x00013335

000132fc <enable_shell_uart>:
	.update = update,
#endif /* CONFIG_MCUMGR_SMP_SHELL */
};

static int enable_shell_uart(const struct device *arg)
{
   132fc:	b507      	push	{r0, r1, r2, lr}
   132fe:	480a      	ldr	r0, [pc, #40]	; (13328 <enable_shell_uart+0x2c>)
   13300:	f019 fa78 	bl	2c7f4 <z_device_ready>
   13304:	b160      	cbz	r0, 13320 <enable_shell_uart+0x24>

	if (IS_ENABLED(CONFIG_MCUMGR_SMP_SHELL)) {
		smp_shell_init();
	}

	shell_init(&shell_uart, dev, cfg_flags, log_backend, level);
   13306:	4a09      	ldr	r2, [pc, #36]	; (1332c <enable_shell_uart+0x30>)
   13308:	4907      	ldr	r1, [pc, #28]	; (13328 <enable_shell_uart+0x2c>)
   1330a:	6812      	ldr	r2, [r2, #0]
   1330c:	4808      	ldr	r0, [pc, #32]	; (13330 <enable_shell_uart+0x34>)
   1330e:	2304      	movs	r3, #4
   13310:	9300      	str	r3, [sp, #0]
   13312:	2301      	movs	r3, #1
   13314:	f000 fe8c 	bl	14030 <shell_init>

	return 0;
   13318:	2000      	movs	r0, #0
}
   1331a:	b003      	add	sp, #12
   1331c:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENODEV;
   13320:	f06f 0012 	mvn.w	r0, #18
   13324:	e7f9      	b.n	1331a <enable_shell_uart+0x1e>
   13326:	bf00      	nop
   13328:	0002d01c 	.word	0x0002d01c
   1332c:	0002d9c8 	.word	0x0002d9c8
   13330:	0002d2d8 	.word	0x0002d2d8

00013334 <uart_callback>:
{
   13334:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13338:	4605      	mov	r5, r0
   1333a:	460e      	mov	r6, r1
	if (api->irq_update == NULL) {
   1333c:	6883      	ldr	r3, [r0, #8]
   1333e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   13340:	b103      	cbz	r3, 13344 <uart_callback+0x10>
	return api->irq_update(dev);
   13342:	4798      	blx	r3
	if (api->irq_rx_ready == NULL) {
   13344:	68ab      	ldr	r3, [r5, #8]
   13346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   13348:	2b00      	cmp	r3, #0
   1334a:	d13a      	bne.n	133c2 <uart_callback+0x8e>
 *
 * @return Source ID.
 */
static inline uint32_t log_dynamic_source_id(struct log_source_dynamic_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_dynamic_start)/
   1334c:	4b46      	ldr	r3, [pc, #280]	; (13468 <uart_callback+0x134>)
   1334e:	4f47      	ldr	r7, [pc, #284]	; (1346c <uart_callback+0x138>)
			LOG_WRN("RX ring buffer full.");
   13350:	f8df b128 	ldr.w	fp, [pc, #296]	; 1347c <uart_callback+0x148>
   13354:	1bdf      	subs	r7, r3, r7
   13356:	08bf      	lsrs	r7, r7, #2
   13358:	01bf      	lsls	r7, r7, #6
   1335a:	f04f 0900 	mov.w	r9, #0
   1335e:	4698      	mov	r8, r3
   13360:	f047 0702 	orr.w	r7, r7, #2
		len = ring_buf_put_claim(sh_uart->rx_ringbuf, &data,
   13364:	68f0      	ldr	r0, [r6, #12]
   13366:	a901      	add	r1, sp, #4
   13368:	6902      	ldr	r2, [r0, #16]
   1336a:	f015 fddb 	bl	28f24 <ring_buf_put_claim>
		if (len > 0) {
   1336e:	4682      	mov	sl, r0
   13370:	2800      	cmp	r0, #0
   13372:	d03d      	beq.n	133f0 <uart_callback+0xbc>
	if (api->fifo_read == NULL) {
   13374:	68ab      	ldr	r3, [r5, #8]
			rd_len = uart_fifo_read(dev, data, len);
   13376:	9901      	ldr	r1, [sp, #4]
   13378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   1337a:	2b00      	cmp	r3, #0
   1337c:	d035      	beq.n	133ea <uart_callback+0xb6>
	return api->fifo_read(dev, rx_data, size);
   1337e:	4602      	mov	r2, r0
   13380:	4628      	mov	r0, r5
   13382:	4798      	blx	r3
				new_data = true;
   13384:	1e04      	subs	r4, r0, #0
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   13386:	4621      	mov	r1, r4
   13388:	68f0      	ldr	r0, [r6, #12]
				new_data = true;
   1338a:	bf18      	it	ne
   1338c:	f04f 0901 	movne.w	r9, #1
			int err = ring_buf_put_finish(sh_uart->rx_ringbuf,
   13390:	f015 fde4 	bl	28f5c <ring_buf_put_finish>
			__ASSERT_NO_MSG(err == 0);
   13394:	b148      	cbz	r0, 133aa <uart_callback+0x76>
   13396:	4936      	ldr	r1, [pc, #216]	; (13470 <uart_callback+0x13c>)
   13398:	4836      	ldr	r0, [pc, #216]	; (13474 <uart_callback+0x140>)
   1339a:	4a37      	ldr	r2, [pc, #220]	; (13478 <uart_callback+0x144>)
   1339c:	234e      	movs	r3, #78	; 0x4e
   1339e:	f015 fbfc 	bl	28b9a <printk>
   133a2:	4835      	ldr	r0, [pc, #212]	; (13478 <uart_callback+0x144>)
   133a4:	214e      	movs	r1, #78	; 0x4e
   133a6:	f015 fe39 	bl	2901c <assert_post_action>
	} while (rd_len && (rd_len == len));
   133aa:	b10c      	cbz	r4, 133b0 <uart_callback+0x7c>
   133ac:	45a2      	cmp	sl, r4
   133ae:	d0d9      	beq.n	13364 <uart_callback+0x30>
	if (new_data) {
   133b0:	f1b9 0f00 	cmp.w	r9, #0
   133b4:	d009      	beq.n	133ca <uart_callback+0x96>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_RX_RDY,
   133b6:	6833      	ldr	r3, [r6, #0]
   133b8:	2000      	movs	r0, #0
   133ba:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   133be:	4790      	blx	r2
}
   133c0:	e003      	b.n	133ca <uart_callback+0x96>
	return api->irq_rx_ready(dev);
   133c2:	4628      	mov	r0, r5
   133c4:	4798      	blx	r3
	if (uart_irq_rx_ready(dev)) {
   133c6:	2800      	cmp	r0, #0
   133c8:	d1c0      	bne.n	1334c <uart_callback+0x18>
	if (api->irq_tx_ready == NULL) {
   133ca:	68ab      	ldr	r3, [r5, #8]
   133cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   133ce:	bb2b      	cbnz	r3, 1341c <uart_callback+0xe8>
	len = ring_buf_get_claim(sh_uart->tx_ringbuf, (uint8_t **)&data,
   133d0:	68b0      	ldr	r0, [r6, #8]
   133d2:	a901      	add	r1, sp, #4
   133d4:	6902      	ldr	r2, [r0, #16]
   133d6:	f015 fddb 	bl	28f90 <ring_buf_get_claim>
	if (len) {
   133da:	4604      	mov	r4, r0
   133dc:	bb28      	cbnz	r0, 1342a <uart_callback+0xf6>
		arch_syscall_invoke1(*(uintptr_t *)&dev, K_SYSCALL_UART_IRQ_TX_DISABLE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_uart_irq_tx_disable(dev);
   133de:	4628      	mov	r0, r5
   133e0:	f016 fad1 	bl	29986 <z_impl_uart_irq_tx_disable>
		sh_uart->ctrl_blk->tx_busy = 0;
   133e4:	6833      	ldr	r3, [r6, #0]
   133e6:	60dc      	str	r4, [r3, #12]
   133e8:	e035      	b.n	13456 <uart_callback+0x122>
		return -ENOSYS;
   133ea:	f06f 0057 	mvn.w	r0, #87	; 0x57
   133ee:	e7c9      	b.n	13384 <uart_callback+0x50>
			LOG_WRN("RX ring buffer full.");
   133f0:	f8d8 3000 	ldr.w	r3, [r8]
   133f4:	f013 0f06 	tst.w	r3, #6
   133f8:	d003      	beq.n	13402 <uart_callback+0xce>
   133fa:	4639      	mov	r1, r7
   133fc:	4658      	mov	r0, fp
   133fe:	f015 ff6e 	bl	292de <log_0>
	if (api->fifo_read == NULL) {
   13402:	68ab      	ldr	r3, [r5, #8]
   13404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   13406:	b133      	cbz	r3, 13416 <uart_callback+0xe2>
	return api->fifo_read(dev, rx_data, size);
   13408:	2201      	movs	r2, #1
   1340a:	f10d 0103 	add.w	r1, sp, #3
   1340e:	4628      	mov	r0, r5
   13410:	4798      	blx	r3
   13412:	4604      	mov	r4, r0
   13414:	e7c9      	b.n	133aa <uart_callback+0x76>
		return -ENOSYS;
   13416:	f06f 0457 	mvn.w	r4, #87	; 0x57
   1341a:	e7c6      	b.n	133aa <uart_callback+0x76>
	return api->irq_tx_ready(dev);
   1341c:	4628      	mov	r0, r5
   1341e:	4798      	blx	r3
	if (uart_irq_tx_ready(dev)) {
   13420:	2800      	cmp	r0, #0
   13422:	d1d5      	bne.n	133d0 <uart_callback+0x9c>
}
   13424:	b003      	add	sp, #12
   13426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (api->fifo_fill == NULL) {
   1342a:	68ab      	ldr	r3, [r5, #8]
		len = uart_fifo_fill(dev, data, len);
   1342c:	9901      	ldr	r1, [sp, #4]
   1342e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   13430:	b1bb      	cbz	r3, 13462 <uart_callback+0x12e>
	return api->fifo_fill(dev, tx_data, size);
   13432:	4602      	mov	r2, r0
   13434:	4628      	mov	r0, r5
   13436:	4798      	blx	r3
   13438:	4601      	mov	r1, r0
		err = ring_buf_get_finish(sh_uart->tx_ringbuf, len);
   1343a:	68b0      	ldr	r0, [r6, #8]
   1343c:	f015 fdd2 	bl	28fe4 <ring_buf_get_finish>
		__ASSERT_NO_MSG(err == 0);
   13440:	b148      	cbz	r0, 13456 <uart_callback+0x122>
   13442:	490b      	ldr	r1, [pc, #44]	; (13470 <uart_callback+0x13c>)
   13444:	480b      	ldr	r0, [pc, #44]	; (13474 <uart_callback+0x140>)
   13446:	4a0c      	ldr	r2, [pc, #48]	; (13478 <uart_callback+0x144>)
   13448:	2389      	movs	r3, #137	; 0x89
   1344a:	f015 fba6 	bl	28b9a <printk>
   1344e:	480a      	ldr	r0, [pc, #40]	; (13478 <uart_callback+0x144>)
   13450:	2189      	movs	r1, #137	; 0x89
   13452:	f015 fde3 	bl	2901c <assert_post_action>
	sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   13456:	6833      	ldr	r3, [r6, #0]
   13458:	2001      	movs	r0, #1
   1345a:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
   1345e:	4790      	blx	r2
}
   13460:	e7e0      	b.n	13424 <uart_callback+0xf0>
		return -ENOSYS;
   13462:	f06f 0157 	mvn.w	r1, #87	; 0x57
   13466:	e7e8      	b.n	1343a <uart_callback+0x106>
   13468:	2000079c 	.word	0x2000079c
   1346c:	20000740 	.word	0x20000740
   13470:	0002ec6a 	.word	0x0002ec6a
   13474:	0002e93e 	.word	0x0002e93e
   13478:	0002f892 	.word	0x0002f892
   1347c:	0002f8c8 	.word	0x0002f8c8

00013480 <shell_internal_help_print>:
	shell->ctx->cmd_buff_pos = 0;
	shell->ctx->cmd_buff_len = 0;
}

static void shell_internal_help_print(const struct shell *shell)
{
   13480:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP)) {
		return;
	}

	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
   13482:	6881      	ldr	r1, [r0, #8]
{
   13484:	4604      	mov	r4, r0
	z_shell_help_cmd_print(shell, &shell->ctx->active_cmd);
   13486:	3108      	adds	r1, #8
   13488:	f001 fe5e 	bl	15148 <z_shell_help_cmd_print>
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   1348c:	68a1      	ldr	r1, [r4, #8]
   1348e:	4a03      	ldr	r2, [pc, #12]	; (1349c <shell_internal_help_print+0x1c>)
   13490:	4620      	mov	r0, r4
   13492:	3108      	adds	r1, #8
				  "Subcommands:\n");
}
   13494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_help_subcmd_print(shell, &shell->ctx->active_cmd,
   13498:	f001 bddc 	b.w	15054 <z_shell_help_subcmd_print>
   1349c:	0002f90a 	.word	0x0002f90a

000134a0 <kill_handler>:
		handler(shell);
	}
}

static void kill_handler(const struct shell *shell)
{
   134a0:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(shell);
   134a2:	4604      	mov	r4, r0
   134a4:	b958      	cbnz	r0, 134be <kill_handler+0x1e>
   134a6:	4921      	ldr	r1, [pc, #132]	; (1352c <kill_handler+0x8c>)
   134a8:	4821      	ldr	r0, [pc, #132]	; (13530 <kill_handler+0x90>)
   134aa:	4a22      	ldr	r2, [pc, #136]	; (13534 <kill_handler+0x94>)
   134ac:	f240 43d6 	movw	r3, #1238	; 0x4d6
   134b0:	f015 fb73 	bl	28b9a <printk>
   134b4:	481f      	ldr	r0, [pc, #124]	; (13534 <kill_handler+0x94>)
   134b6:	f240 41d6 	movw	r1, #1238	; 0x4d6
   134ba:	f015 fdaf 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx && shell->iface);
   134be:	68a3      	ldr	r3, [r4, #8]
   134c0:	b10b      	cbz	r3, 134c6 <kill_handler+0x26>
   134c2:	6863      	ldr	r3, [r4, #4]
   134c4:	b95b      	cbnz	r3, 134de <kill_handler+0x3e>
   134c6:	491c      	ldr	r1, [pc, #112]	; (13538 <kill_handler+0x98>)
   134c8:	4819      	ldr	r0, [pc, #100]	; (13530 <kill_handler+0x90>)
   134ca:	4a1a      	ldr	r2, [pc, #104]	; (13534 <kill_handler+0x94>)
   134cc:	f240 43d7 	movw	r3, #1239	; 0x4d7
   134d0:	f015 fb63 	bl	28b9a <printk>
   134d4:	4817      	ldr	r0, [pc, #92]	; (13534 <kill_handler+0x94>)
   134d6:	f240 41d7 	movw	r1, #1239	; 0x4d7
   134da:	f015 fd9f 	bl	2901c <assert_post_action>
	if (z_flag_processing_get(shell)) {
   134de:	68a3      	ldr	r3, [r4, #8]
	return ret;
}

static inline bool z_flag_processing_get(const struct shell *sh)
{
	return sh->ctx->ctx.flags.processing == 1;
   134e0:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
   134e4:	07db      	lsls	r3, r3, #31
   134e6:	d41d      	bmi.n	13524 <kill_handler+0x84>
		z_shell_log_backend_disable(shell->log_backend);
   134e8:	69e0      	ldr	r0, [r4, #28]
   134ea:	f016 fdce 	bl	2a08a <z_shell_log_backend_disable>
	err = shell->iface->api->uninit(shell->iface);
   134ee:	6860      	ldr	r0, [r4, #4]
   134f0:	6803      	ldr	r3, [r0, #0]
   134f2:	685b      	ldr	r3, [r3, #4]
   134f4:	4798      	blx	r3
	if (err != 0) {
   134f6:	4605      	mov	r5, r0
   134f8:	b920      	cbnz	r0, 13504 <kill_handler+0x64>
	z_shell_history_purge(shell->history);
   134fa:	68e0      	ldr	r0, [r4, #12]
   134fc:	f016 ff08 	bl	2a310 <z_shell_history_purge>
	shell->ctx->state = state;
   13500:	68a3      	ldr	r3, [r4, #8]
   13502:	711d      	strb	r5, [r3, #4]
	int err = instance_uninit(shell);

	if (shell->ctx->uninit_cb) {
   13504:	68a3      	ldr	r3, [r4, #8]
   13506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   13508:	b113      	cbz	r3, 13510 <kill_handler+0x70>
		shell->ctx->uninit_cb(shell, err);
   1350a:	4629      	mov	r1, r5
   1350c:	4620      	mov	r0, r4
   1350e:	4798      	blx	r3
	}

	shell->ctx->tid = NULL;
   13510:	68a3      	ldr	r3, [r4, #8]
   13512:	2200      	movs	r2, #0
   13514:	f8c3 230c 	str.w	r2, [r3, #780]	; 0x30c
	return z_impl_z_current_get();
   13518:	f013 fad4 	bl	26ac4 <z_impl_z_current_get>
	k_thread_abort(k_current_get());
}
   1351c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_thread_abort(thread);
   13520:	f003 ba68 	b.w	169f4 <z_impl_k_thread_abort>
		return -EBUSY;
   13524:	f06f 050f 	mvn.w	r5, #15
   13528:	e7ec      	b.n	13504 <kill_handler+0x64>
   1352a:	bf00      	nop
   1352c:	0002f940 	.word	0x0002f940
   13530:	0002e93e 	.word	0x0002e93e
   13534:	0002f918 	.word	0x0002f918
   13538:	0002f946 	.word	0x0002f946

0001353c <history_handle>:
{
   1353c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1353e:	4604      	mov	r4, r0
	if (z_flag_history_exit_get(shell)) {
   13540:	6880      	ldr	r0, [r0, #8]
	return ret;
}

static inline bool z_flag_history_exit_get(const struct shell *sh)
{
	return sh->ctx->ctx.flags.history_exit == 1;
   13542:	f8d0 3264 	ldr.w	r3, [r0, #612]	; 0x264
   13546:	075a      	lsls	r2, r3, #29
{
   13548:	460d      	mov	r5, r1
	if (z_flag_history_exit_get(shell)) {
   1354a:	d505      	bpl.n	13558 <history_handle+0x1c>
		z_flag_history_exit_set(shell, false);
   1354c:	2100      	movs	r1, #0
   1354e:	f016 fac5 	bl	29adc <z_flag_history_exit_set.isra.0>
		z_shell_history_mode_exit(shell->history);
   13552:	68e0      	ldr	r0, [r4, #12]
   13554:	f016 feae 	bl	2a2b4 <z_shell_history_mode_exit>
	if (!z_shell_history_active(shell->history)) {
   13558:	68e3      	ldr	r3, [r4, #12]
   1355a:	68db      	ldr	r3, [r3, #12]
   1355c:	b96b      	cbnz	r3, 1357a <history_handle+0x3e>
		if (up) {
   1355e:	2d00      	cmp	r5, #0
   13560:	d037      	beq.n	135d2 <history_handle+0x96>
			uint16_t cmd_len = z_shell_strlen(shell->ctx->cmd_buff);
   13562:	68a0      	ldr	r0, [r4, #8]
   13564:	3042      	adds	r0, #66	; 0x42
   13566:	f016 faa6 	bl	29ab6 <z_shell_strlen>
			if (cmd_len) {
   1356a:	68a3      	ldr	r3, [r4, #8]
   1356c:	b398      	cbz	r0, 135d6 <history_handle+0x9a>
__ssp_bos_icheck2_restrict(strcpy, char *, const char *)
   1356e:	f103 0142 	add.w	r1, r3, #66	; 0x42
   13572:	f503 70a1 	add.w	r0, r3, #322	; 0x142
   13576:	f019 fb7b 	bl	2cc70 <strcpy>
					   shell->ctx->cmd_buff, &len);
   1357a:	68a2      	ldr	r2, [r4, #8]
	history_mode = z_shell_history_get(shell->history, up,
   1357c:	68e0      	ldr	r0, [r4, #12]
   1357e:	f10d 0306 	add.w	r3, sp, #6
   13582:	3242      	adds	r2, #66	; 0x42
   13584:	4629      	mov	r1, r5
   13586:	f016 fe98 	bl	2a2ba <z_shell_history_get>
	if (!history_mode) {
   1358a:	b958      	cbnz	r0, 135a4 <history_handle+0x68>
		strcpy(shell->ctx->cmd_buff, shell->ctx->temp_buff);
   1358c:	68a0      	ldr	r0, [r4, #8]
   1358e:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   13592:	3042      	adds	r0, #66	; 0x42
   13594:	f019 fb6c 	bl	2cc70 <strcpy>
		len = z_shell_strlen(shell->ctx->cmd_buff);
   13598:	68a0      	ldr	r0, [r4, #8]
   1359a:	3042      	adds	r0, #66	; 0x42
   1359c:	f016 fa8b 	bl	29ab6 <z_shell_strlen>
   135a0:	f8ad 0006 	strh.w	r0, [sp, #6]
	z_shell_op_cursor_home_move(shell);
   135a4:	4620      	mov	r0, r4
   135a6:	f016 fc5d 	bl	29e64 <z_shell_op_cursor_home_move>
/* Function sends VT100 command to clear the screen from cursor position to
 * end of the screen.
 */
static inline void z_clear_eos(const struct shell *sh)
{
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   135aa:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   135ac:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   135b0:	069b      	lsls	r3, r3, #26
   135b2:	d503      	bpl.n	135bc <history_handle+0x80>
   135b4:	4909      	ldr	r1, [pc, #36]	; (135dc <history_handle+0xa0>)
   135b6:	6960      	ldr	r0, [r4, #20]
   135b8:	f016 fa83 	bl	29ac2 <z_shell_raw_fprintf>
	z_shell_print_cmd(shell);
   135bc:	4620      	mov	r0, r4
   135be:	f001 fa0f 	bl	149e0 <z_shell_print_cmd>
	shell->ctx->cmd_buff_pos = len;
   135c2:	68a3      	ldr	r3, [r4, #8]
   135c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   135c8:	87da      	strh	r2, [r3, #62]	; 0x3e
	shell->ctx->cmd_buff_len = len;
   135ca:	879a      	strh	r2, [r3, #60]	; 0x3c
	z_shell_op_cond_next_line(shell);
   135cc:	4620      	mov	r0, r4
   135ce:	f001 f991 	bl	148f4 <z_shell_op_cond_next_line>
}
   135d2:	b003      	add	sp, #12
   135d4:	bd30      	pop	{r4, r5, pc}
				shell->ctx->temp_buff[0] = '\0';
   135d6:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
   135da:	e7ce      	b.n	1357a <history_handle+0x3e>
   135dc:	0002d40c 	.word	0x0002d40c

000135e0 <state_set.constprop.0>:
	shell->ctx->state = state;
   135e0:	6883      	ldr	r3, [r0, #8]
   135e2:	2202      	movs	r2, #2
static inline void state_set(const struct shell *shell, enum shell_state state)
   135e4:	b510      	push	{r4, lr}
	shell->ctx->state = state;
   135e6:	711a      	strb	r2, [r3, #4]
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
   135e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
static inline void state_set(const struct shell *shell, enum shell_state state)
   135ea:	4604      	mov	r4, r0
	if (state == SHELL_STATE_ACTIVE && !shell->ctx->bypass) {
   135ec:	b9cb      	cbnz	r3, 13622 <state_set.constprop.0+0x42>
		cmd_buffer_clear(shell);
   135ee:	6882      	ldr	r2, [r0, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   135f0:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
   135f4:	63d3      	str	r3, [r2, #60]	; 0x3c
		if (z_flag_print_noinit_get(shell)) {
   135f6:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->ctx.flags.print_noinit == 1;
   135f8:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
   135fc:	04db      	lsls	r3, r3, #19
   135fe:	d50b      	bpl.n	13618 <state_set.constprop.0+0x38>
			z_shell_fprintf(shell, SHELL_WARNING, "%s",
   13600:	2103      	movs	r1, #3
   13602:	4b08      	ldr	r3, [pc, #32]	; (13624 <state_set.constprop.0+0x44>)
   13604:	4a08      	ldr	r2, [pc, #32]	; (13628 <state_set.constprop.0+0x48>)
   13606:	f001 fab1 	bl	14b6c <z_shell_fprintf>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   1360a:	68a0      	ldr	r0, [r4, #8]
   1360c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
   13610:	f500 7019 	add.w	r0, r0, #612	; 0x264
   13614:	f016 fa28 	bl	29a68 <atomic_and>
		z_shell_print_prompt_and_cmd(shell);
   13618:	4620      	mov	r0, r4
}
   1361a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_print_prompt_and_cmd(shell);
   1361e:	f001 bbe7 	b.w	14df0 <z_shell_print_prompt_and_cmd>
}
   13622:	bd10      	pop	{r4, pc}
   13624:	0002f961 	.word	0x0002f961
   13628:	0002f5ab 	.word	0x0002f5ab

0001362c <execute>:
{
   1362c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t cmd_lvl = 0;
   13630:	2300      	movs	r3, #0
{
   13632:	b09f      	sub	sp, #124	; 0x7c
	size_t argc = 0, args_left = SIZE_MAX;
   13634:	e9cd 3305 	strd	r3, r3, [sp, #20]
	char *cmd_buf = shell->ctx->cmd_buff;
   13638:	6883      	ldr	r3, [r0, #8]
{
   1363a:	4604      	mov	r4, r0
	char *cmd_buf = shell->ctx->cmd_buff;
   1363c:	3342      	adds	r3, #66	; 0x42
   1363e:	9303      	str	r3, [sp, #12]
	z_shell_op_cursor_end_move(shell);
   13640:	f016 fc16 	bl	29e70 <z_shell_op_cursor_end_move>
	if (!z_shell_cursor_in_empty_line(shell)) {
   13644:	4620      	mov	r0, r4
   13646:	f016 fbd5 	bl	29df4 <z_shell_cursor_in_empty_line>
   1364a:	b918      	cbnz	r0, 13654 <execute+0x28>
/* Function forcing new line - cannot be replaced with function
 * cursor_down_move.
 */
static inline void z_cursor_next_line_move(const struct shell *sh)
{
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   1364c:	499f      	ldr	r1, [pc, #636]	; (138cc <execute+0x2a0>)
   1364e:	6960      	ldr	r0, [r4, #20]
   13650:	f016 fa37 	bl	29ac2 <z_shell_raw_fprintf>
__ssp_bos_icheck3(memset, void *, int)
   13654:	68a0      	ldr	r0, [r4, #8]
   13656:	2214      	movs	r2, #20
   13658:	2100      	movs	r1, #0
   1365a:	3008      	adds	r0, #8
   1365c:	f019 faf3 	bl	2cc46 <memset>
		z_shell_cmd_trim(shell);
   13660:	4620      	mov	r0, r4
   13662:	f001 f8d9 	bl	14818 <z_shell_cmd_trim>
		history_put(shell, shell->ctx->cmd_buff,
   13666:	68a1      	ldr	r1, [r4, #8]
	z_shell_history_put(shell->history, line, length);
   13668:	68e0      	ldr	r0, [r4, #12]
   1366a:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
   1366c:	3142      	adds	r1, #66	; 0x42
		help_entry.help = NULL;
   1366e:	2600      	movs	r6, #0
	z_shell_history_put(shell->history, line, length);
   13670:	f001 feee 	bl	15450 <z_shell_history_put>
		z_shell_wildcard_prepare(shell);
   13674:	4620      	mov	r0, r4
   13676:	f016 fe71 	bl	2a35c <z_shell_wildcard_prepare>
	size_t argc = 0, args_left = SIZE_MAX;
   1367a:	f04f 38ff 	mov.w	r8, #4294967295
	size_t cmd_with_handler_lvl = 0;
   1367e:	46b1      	mov	r9, r6
		z_shell_wildcard_prepare(shell);
   13680:	46b2      	mov	sl, r6
   13682:	af11      	add	r7, sp, #68	; 0x44
   13684:	9602      	str	r6, [sp, #8]
   13686:	4635      	mov	r5, r6
   13688:	46b3      	mov	fp, r6
	while ((argc != 1) && (cmd_lvl < CONFIG_SHELL_ARGC_MAX)
   1368a:	e9dd 3205 	ldrd	r3, r2, [sp, #20]
   1368e:	2a01      	cmp	r2, #1
   13690:	f000 80d7 	beq.w	13842 <execute+0x216>
   13694:	2b0b      	cmp	r3, #11
   13696:	f240 80af 	bls.w	137f8 <execute+0x1cc>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   1369a:	9b06      	ldr	r3, [sp, #24]
   1369c:	2b02      	cmp	r3, #2
   1369e:	f040 80af 	bne.w	13800 <execute+0x1d4>
		z_shell_fprintf(shell, SHELL_ERROR, "%s\n",
   136a2:	4b8b      	ldr	r3, [pc, #556]	; (138d0 <execute+0x2a4>)
   136a4:	4a8b      	ldr	r2, [pc, #556]	; (138d4 <execute+0x2a8>)
   136a6:	2101      	movs	r1, #1
   136a8:	e014      	b.n	136d4 <execute+0xa8>
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
   136aa:	9a03      	ldr	r2, [sp, #12]
   136ac:	2302      	movs	r3, #2
   136ae:	4639      	mov	r1, r7
   136b0:	a806      	add	r0, sp, #24
   136b2:	f000 ff75 	bl	145a0 <z_shell_make_argv>
		if (argc == 0) {
   136b6:	9906      	ldr	r1, [sp, #24]
		cmd_buf = (char *)argvp[1];
   136b8:	687a      	ldr	r2, [r7, #4]
   136ba:	9203      	str	r2, [sp, #12]
		quote = z_shell_make_argv(&argc, argvp, cmd_buf, 2);
   136bc:	4603      	mov	r3, r0
		if (argc == 0) {
   136be:	b929      	cbnz	r1, 136cc <execute+0xa0>
			return -ENOEXEC;
   136c0:	f06f 0507 	mvn.w	r5, #7
}
   136c4:	4628      	mov	r0, r5
   136c6:	b01f      	add	sp, #124	; 0x7c
   136c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		} else if ((argc == 1) && (quote != 0)) {
   136cc:	2901      	cmp	r1, #1
   136ce:	d105      	bne.n	136dc <execute+0xb0>
   136d0:	b120      	cbz	r0, 136dc <execute+0xb0>
			z_shell_fprintf(shell, SHELL_ERROR,
   136d2:	4a81      	ldr	r2, [pc, #516]	; (138d8 <execute+0x2ac>)
   136d4:	4620      	mov	r0, r4
   136d6:	f001 fa49 	bl	14b6c <z_shell_fprintf>
   136da:	e7f1      	b.n	136c0 <execute+0x94>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   136dc:	9b05      	ldr	r3, [sp, #20]
   136de:	b34b      	cbz	r3, 13734 <execute+0x108>
		    z_shell_help_request(argvp[0])) {
   136e0:	6838      	ldr	r0, [r7, #0]
   136e2:	f001 fd55 	bl	15190 <z_shell_help_request>
		if (IS_ENABLED(CONFIG_SHELL_HELP) && (cmd_lvl > 0) &&
   136e6:	b198      	cbz	r0, 13710 <execute+0xe4>
			if (help_entry.help) {
   136e8:	b166      	cbz	r6, 13704 <execute+0xd8>
				shell->ctx->active_cmd = help_entry;
   136ea:	68a5      	ldr	r5, [r4, #8]
   136ec:	960d      	str	r6, [sp, #52]	; 0x34
   136ee:	3508      	adds	r5, #8
				shell->ctx->active_cmd = *help_entry;
   136f0:	ae0c      	add	r6, sp, #48	; 0x30
   136f2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   136f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   136f6:	6833      	ldr	r3, [r6, #0]
   136f8:	602b      	str	r3, [r5, #0]
			shell_internal_help_print(shell);
   136fa:	4620      	mov	r0, r4
   136fc:	f7ff fec0 	bl	13480 <shell_internal_help_print>
			return SHELL_CMD_HELP_PRINTED;
   13700:	2501      	movs	r5, #1
   13702:	e7df      	b.n	136c4 <execute+0x98>
			z_shell_fprintf(shell, SHELL_ERROR,
   13704:	4a75      	ldr	r2, [pc, #468]	; (138dc <execute+0x2b0>)
		z_shell_fprintf(shell, SHELL_ERROR,
   13706:	2101      	movs	r1, #1
   13708:	4620      	mov	r0, r4
   1370a:	f001 fa2f 	bl	14b6c <z_shell_fprintf>
		return false;
   1370e:	e7d7      	b.n	136c0 <execute+0x94>
		if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && (cmd_lvl > 0)) {
   13710:	9b05      	ldr	r3, [sp, #20]
   13712:	b17b      	cbz	r3, 13734 <execute+0x108>
			status = z_shell_wildcard_process(shell, entry,
   13714:	683a      	ldr	r2, [r7, #0]
   13716:	4629      	mov	r1, r5
   13718:	4620      	mov	r0, r4
   1371a:	f001 ff15 	bl	15548 <z_shell_wildcard_process>
			if (status == SHELL_WILDCARD_CMD_NO_MATCH_FOUND) {
   1371e:	2802      	cmp	r0, #2
   13720:	f000 808f 	beq.w	13842 <execute+0x216>
			if (status != SHELL_WILDCARD_NOT_FOUND) {
   13724:	2803      	cmp	r0, #3
   13726:	d005      	beq.n	13734 <execute+0x108>
				++cmd_lvl;
   13728:	9b05      	ldr	r3, [sp, #20]
   1372a:	3301      	adds	r3, #1
   1372c:	9305      	str	r3, [sp, #20]
				wildcard_found = true;
   1372e:	2301      	movs	r3, #1
   13730:	9302      	str	r3, [sp, #8]
				continue;
   13732:	e7aa      	b.n	1368a <execute+0x5e>
		if (has_last_handler == false) {
   13734:	f1ba 0f00 	cmp.w	sl, #0
   13738:	d105      	bne.n	13746 <execute+0x11a>
			entry = z_shell_find_cmd(parent, argvp[0], &dloc);
   1373a:	6839      	ldr	r1, [r7, #0]
   1373c:	aa07      	add	r2, sp, #28
   1373e:	4658      	mov	r0, fp
   13740:	f016 fade 	bl	29d00 <z_shell_find_cmd>
   13744:	4605      	mov	r5, r0
		argvp++;
   13746:	3704      	adds	r7, #4
		args_left--;
   13748:	f108 38ff 	add.w	r8, r8, #4294967295
		if (entry) {
   1374c:	2d00      	cmp	r5, #0
   1374e:	d041      	beq.n	137d4 <execute+0x1a8>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && found && entry->handler) {
   13750:	9b02      	ldr	r3, [sp, #8]
   13752:	b14b      	cbz	r3, 13768 <execute+0x13c>
   13754:	68eb      	ldr	r3, [r5, #12]
   13756:	b13b      	cbz	r3, 13768 <execute+0x13c>
		z_shell_op_cursor_end_move(shell);
   13758:	4620      	mov	r0, r4
   1375a:	f016 fb89 	bl	29e70 <z_shell_op_cursor_end_move>
		z_shell_op_cond_next_line(shell);
   1375e:	4620      	mov	r0, r4
   13760:	f001 f8c8 	bl	148f4 <z_shell_op_cond_next_line>
		z_shell_fprintf(shell, SHELL_ERROR,
   13764:	4a5e      	ldr	r2, [pc, #376]	; (138e0 <execute+0x2b4>)
   13766:	e7ce      	b.n	13706 <execute+0xda>
	if (entry->handler) {
   13768:	68eb      	ldr	r3, [r5, #12]
   1376a:	b1cb      	cbz	r3, 137a0 <execute+0x174>
		*active_cmd = *entry;
   1376c:	68a3      	ldr	r3, [r4, #8]
   1376e:	f8dd 9014 	ldr.w	r9, [sp, #20]
   13772:	46ae      	mov	lr, r5
   13774:	f103 0c08 	add.w	ip, r3, #8
   13778:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   1377c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   13780:	f8de 3000 	ldr.w	r3, [lr]
   13784:	f8cc 3000 	str.w	r3, [ip]
		if ((entry->subcmd == NULL)
   13788:	68ab      	ldr	r3, [r5, #8]
   1378a:	b94b      	cbnz	r3, 137a0 <execute+0x174>
		    && entry->args.optional == SHELL_OPT_ARG_RAW) {
   1378c:	7c6b      	ldrb	r3, [r5, #17]
   1378e:	2bfe      	cmp	r3, #254	; 0xfe
			*args_left = entry->args.mandatory - 1;
   13790:	bf01      	itttt	eq
   13792:	f895 8010 	ldrbeq.w	r8, [r5, #16]
			*lvl = *lvl + 1;
   13796:	f109 0301 	addeq.w	r3, r9, #1
			*args_left = entry->args.mandatory - 1;
   1379a:	f108 38ff 	addeq.w	r8, r8, #4294967295
			*lvl = *lvl + 1;
   1379e:	9305      	streq	r3, [sp, #20]
	if (entry->help) {
   137a0:	f8d5 c004 	ldr.w	ip, [r5, #4]
   137a4:	f1bc 0f00 	cmp.w	ip, #0
   137a8:	d008      	beq.n	137bc <execute+0x190>
		*help_entry = *entry;
   137aa:	46ae      	mov	lr, r5
   137ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   137b0:	ae0c      	add	r6, sp, #48	; 0x30
   137b2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   137b4:	f8de 3000 	ldr.w	r3, [lr]
   137b8:	6033      	str	r3, [r6, #0]
   137ba:	4666      	mov	r6, ip
   137bc:	46ab      	mov	fp, r5
		if (args_left || (argc == 2)) {
   137be:	f1b8 0f00 	cmp.w	r8, #0
   137c2:	d103      	bne.n	137cc <execute+0x1a0>
   137c4:	9b06      	ldr	r3, [sp, #24]
   137c6:	2b02      	cmp	r3, #2
   137c8:	f47f af5f 	bne.w	1368a <execute+0x5e>
			cmd_lvl++;
   137cc:	9b05      	ldr	r3, [sp, #20]
   137ce:	3301      	adds	r3, #1
   137d0:	9305      	str	r3, [sp, #20]
   137d2:	e75a      	b.n	1368a <execute+0x5e>
			if (cmd_lvl == 0 &&
   137d4:	9b05      	ldr	r3, [sp, #20]
   137d6:	b963      	cbnz	r3, 137f2 <execute+0x1c6>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
}

static inline bool z_shell_in_select_mode(const struct shell *shell)
{
	return shell->ctx->selected_cmd == NULL ? false : true;
   137d8:	68a3      	ldr	r3, [r4, #8]
   137da:	69db      	ldr	r3, [r3, #28]
   137dc:	b10b      	cbz	r3, 137e2 <execute+0x1b6>
				(!z_shell_in_select_mode(shell) ||
   137de:	68db      	ldr	r3, [r3, #12]
   137e0:	b93b      	cbnz	r3, 137f2 <execute+0x1c6>
				z_shell_fprintf(shell, SHELL_ERROR,
   137e2:	4b40      	ldr	r3, [pc, #256]	; (138e4 <execute+0x2b8>)
   137e4:	9300      	str	r3, [sp, #0]
   137e6:	4a40      	ldr	r2, [pc, #256]	; (138e8 <execute+0x2bc>)
   137e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   137ea:	2101      	movs	r1, #1
   137ec:	4620      	mov	r0, r4
   137ee:	f001 f9bd 	bl	14b6c <z_shell_fprintf>
			has_last_handler = true;
   137f2:	f04f 0a01 	mov.w	sl, #1
   137f6:	e7e2      	b.n	137be <execute+0x192>
		&& args_left > 0) {
   137f8:	f1b8 0f00 	cmp.w	r8, #0
   137fc:	f47f af55 	bne.w	136aa <execute+0x7e>
	if (IS_ENABLED(CONFIG_SHELL_WILDCARD) && wildcard_found) {
   13800:	9b02      	ldr	r3, [sp, #8]
   13802:	b14b      	cbz	r3, 13818 <execute+0x1ec>
		z_shell_wildcard_finalize(shell);
   13804:	4620      	mov	r0, r4
   13806:	f016 fdce 	bl	2a3a6 <z_shell_wildcard_finalize>
					shell->ctx->cmd_buff,
   1380a:	68a2      	ldr	r2, [r4, #8]
		(void)z_shell_make_argv(&cmd_lvl,
   1380c:	230c      	movs	r3, #12
   1380e:	3242      	adds	r2, #66	; 0x42
   13810:	a911      	add	r1, sp, #68	; 0x44
   13812:	a805      	add	r0, sp, #20
   13814:	f000 fec4 	bl	145a0 <z_shell_make_argv>
	argv[cmd_lvl] = NULL;
   13818:	9d05      	ldr	r5, [sp, #20]
	if (shell->ctx->active_cmd.handler == NULL) {
   1381a:	68a0      	ldr	r0, [r4, #8]
	argv[cmd_lvl] = NULL;
   1381c:	ab1e      	add	r3, sp, #120	; 0x78
   1381e:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   13822:	2200      	movs	r2, #0
   13824:	f843 2c34 	str.w	r2, [r3, #-52]
	if (shell->ctx->active_cmd.handler == NULL) {
   13828:	6943      	ldr	r3, [r0, #20]
   1382a:	b973      	cbnz	r3, 1384a <execute+0x21e>
			if (help_entry->help == NULL) {
   1382c:	2e00      	cmp	r6, #0
   1382e:	f43f af47 	beq.w	136c0 <execute+0x94>
			if (help_entry->help != shell->ctx->active_cmd.help) {
   13832:	68c3      	ldr	r3, [r0, #12]
   13834:	42b3      	cmp	r3, r6
   13836:	f43f af60 	beq.w	136fa <execute+0xce>
				shell->ctx->active_cmd = *help_entry;
   1383a:	960d      	str	r6, [sp, #52]	; 0x34
   1383c:	f100 0508 	add.w	r5, r0, #8
   13840:	e756      	b.n	136f0 <execute+0xc4>
	if ((cmd_lvl >= CONFIG_SHELL_ARGC_MAX) && (argc == 2)) {
   13842:	9b05      	ldr	r3, [sp, #20]
   13844:	2b0b      	cmp	r3, #11
   13846:	d9db      	bls.n	13800 <execute+0x1d4>
   13848:	e727      	b.n	1369a <execute+0x6e>
	if (shell->ctx->active_cmd.args.mandatory) {
   1384a:	7e03      	ldrb	r3, [r0, #24]
	return exec_cmd(shell, cmd_lvl - cmd_with_handler_lvl,
   1384c:	eba5 0509 	sub.w	r5, r5, r9
	if (shell->ctx->active_cmd.args.mandatory) {
   13850:	b1b3      	cbz	r3, 13880 <execute+0x254>
		uint8_t opt8 = shell->ctx->active_cmd.args.optional;
   13852:	7e42      	ldrb	r2, [r0, #25]
				UINT16_MAX : opt8;
   13854:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13858:	2aff      	cmp	r2, #255	; 0xff
   1385a:	bf08      	it	eq
   1385c:	460a      	moveq	r2, r1
		bool in_range = (argc >= mand) && (argc <= (mand + opt));
   1385e:	429d      	cmp	r5, r3
   13860:	d302      	bcc.n	13868 <execute+0x23c>
   13862:	4413      	add	r3, r2
	if (!arg_cnt_ok) {
   13864:	429d      	cmp	r5, r3
   13866:	d90b      	bls.n	13880 <execute+0x254>
		z_shell_fprintf(shell, SHELL_ERROR,
   13868:	6883      	ldr	r3, [r0, #8]
   1386a:	4a20      	ldr	r2, [pc, #128]	; (138ec <execute+0x2c0>)
   1386c:	2101      	movs	r1, #1
   1386e:	4620      	mov	r0, r4
   13870:	f001 f97c 	bl	14b6c <z_shell_fprintf>
			shell_internal_help_print(shell);
   13874:	4620      	mov	r0, r4
   13876:	f7ff fe03 	bl	13480 <shell_internal_help_print>
		return -EINVAL;
   1387a:	f06f 0515 	mvn.w	r5, #21
   1387e:	e721      	b.n	136c4 <execute+0x98>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, cmd_ctx, val, ret);
   13880:	f44f 6100 	mov.w	r1, #2048	; 0x800
   13884:	f500 7019 	add.w	r0, r0, #612	; 0x264
   13888:	f016 f8df 	bl	29a4a <atomic_or>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   1388c:	68a0      	ldr	r0, [r4, #8]
   1388e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   13892:	f016 f90e 	bl	29ab2 <k_mutex_unlock>
		ret_val = shell->ctx->active_cmd.handler(shell, argc,
   13896:	68a3      	ldr	r3, [r4, #8]
   13898:	aa11      	add	r2, sp, #68	; 0x44
   1389a:	4629      	mov	r1, r5
   1389c:	eb02 0289 	add.w	r2, r2, r9, lsl #2
   138a0:	695b      	ldr	r3, [r3, #20]
   138a2:	4620      	mov	r0, r4
   138a4:	4798      	blx	r3
   138a6:	4605      	mov	r5, r0
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   138a8:	68a0      	ldr	r0, [r4, #8]
   138aa:	f04f 32ff 	mov.w	r2, #4294967295
   138ae:	f04f 33ff 	mov.w	r3, #4294967295
   138b2:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   138b6:	f016 f931 	bl	29b1c <k_mutex_lock.constprop.0>
   138ba:	68a0      	ldr	r0, [r4, #8]
   138bc:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   138c0:	f500 7019 	add.w	r0, r0, #612	; 0x264
   138c4:	f016 f8d0 	bl	29a68 <atomic_and>
	return ret;
   138c8:	e6fc      	b.n	136c4 <execute+0x98>
   138ca:	bf00      	nop
   138cc:	0003329a 	.word	0x0003329a
   138d0:	0002fa1a 	.word	0x0002fa1a
   138d4:	0002f5b0 	.word	0x0002f5b0
   138d8:	0002f9a5 	.word	0x0002f9a5
   138dc:	0002f9b9 	.word	0x0002f9b9
   138e0:	0002f9d7 	.word	0x0002f9d7
   138e4:	0002fa06 	.word	0x0002fa06
   138e8:	0002fe95 	.word	0x0002fe95
   138ec:	0002fa3e 	.word	0x0002fa3e

000138f0 <shell_process>:

	return 0;
}

void shell_process(const struct shell *shell)
{
   138f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT_NO_MSG(shell);
   138f4:	4604      	mov	r4, r0
{
   138f6:	b0a9      	sub	sp, #164	; 0xa4
	__ASSERT_NO_MSG(shell);
   138f8:	b958      	cbnz	r0, 13912 <shell_process+0x22>
   138fa:	49ac      	ldr	r1, [pc, #688]	; (13bac <shell_process+0x2bc>)
   138fc:	48ac      	ldr	r0, [pc, #688]	; (13bb0 <shell_process+0x2c0>)
   138fe:	4aad      	ldr	r2, [pc, #692]	; (13bb4 <shell_process+0x2c4>)
   13900:	f240 53a3 	movw	r3, #1443	; 0x5a3
   13904:	f015 f949 	bl	28b9a <printk>
   13908:	48aa      	ldr	r0, [pc, #680]	; (13bb4 <shell_process+0x2c4>)
   1390a:	f240 51a3 	movw	r1, #1443	; 0x5a3
   1390e:	f015 fb85 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx);
   13912:	68a3      	ldr	r3, [r4, #8]
   13914:	b95b      	cbnz	r3, 1392e <shell_process+0x3e>
   13916:	49a8      	ldr	r1, [pc, #672]	; (13bb8 <shell_process+0x2c8>)
   13918:	48a5      	ldr	r0, [pc, #660]	; (13bb0 <shell_process+0x2c0>)
   1391a:	4aa6      	ldr	r2, [pc, #664]	; (13bb4 <shell_process+0x2c4>)
   1391c:	f240 53a4 	movw	r3, #1444	; 0x5a4
   13920:	f015 f93b 	bl	28b9a <printk>
   13924:	48a3      	ldr	r0, [pc, #652]	; (13bb4 <shell_process+0x2c4>)
   13926:	f240 51a4 	movw	r1, #1444	; 0x5a4
   1392a:	f015 fb77 	bl	2901c <assert_post_action>
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, processing, val, ret);
   1392e:	68a0      	ldr	r0, [r4, #8]
   13930:	2101      	movs	r1, #1
   13932:	f500 7019 	add.w	r0, r0, #612	; 0x264
   13936:	f016 f888 	bl	29a4a <atomic_or>

	/* atomically set the processing flag */
	z_flag_processing_set(shell, true);

	switch (shell->ctx->state) {
   1393a:	68a3      	ldr	r3, [r4, #8]
   1393c:	791b      	ldrb	r3, [r3, #4]
   1393e:	2b02      	cmp	r3, #2
   13940:	d117      	bne.n	13972 <shell_process+0x82>
	size_t count = 0;
   13942:	2300      	movs	r3, #0
   13944:	9309      	str	r3, [sp, #36]	; 0x24
		shell_bypass_cb_t bypass = shell->ctx->bypass;
   13946:	68a3      	ldr	r3, [r4, #8]
   13948:	6860      	ldr	r0, [r4, #4]
   1394a:	6b9e      	ldr	r6, [r3, #56]	; 0x38
		if (bypass) {
   1394c:	6803      	ldr	r3, [r0, #0]
   1394e:	691d      	ldr	r5, [r3, #16]
			(void)shell->iface->api->read(shell->iface, buf,
   13950:	ab09      	add	r3, sp, #36	; 0x24
		if (bypass) {
   13952:	b1c6      	cbz	r6, 13986 <shell_process+0x96>
			(void)shell->iface->api->read(shell->iface, buf,
   13954:	2210      	movs	r2, #16
   13956:	a91b      	add	r1, sp, #108	; 0x6c
   13958:	47a8      	blx	r5
			if (count) {
   1395a:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1395c:	b14a      	cbz	r2, 13972 <shell_process+0x82>
				bypass(shell, buf, count);
   1395e:	a91b      	add	r1, sp, #108	; 0x6c
   13960:	4620      	mov	r0, r4
   13962:	47b0      	blx	r6
				if (!(volatile shell_bypass_cb_t *)shell->ctx->bypass) {
   13964:	68a3      	ldr	r3, [r4, #8]
   13966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   13968:	2b00      	cmp	r3, #0
   1396a:	d1ec      	bne.n	13946 <shell_process+0x56>
					state_set(shell, SHELL_STATE_ACTIVE);
   1396c:	4620      	mov	r0, r4
   1396e:	f7ff fe37 	bl	135e0 <state_set.constprop.0>
   13972:	68a0      	ldr	r0, [r4, #8]
   13974:	f06f 0101 	mvn.w	r1, #1
   13978:	f500 7019 	add.w	r0, r0, #612	; 0x264
   1397c:	f016 f874 	bl	29a68 <atomic_and>
		break;
	}

	/* atomically clear the processing flag */
	z_flag_processing_set(shell, false);
}
   13980:	b029      	add	sp, #164	; 0xa4
   13982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(void)shell->iface->api->read(shell->iface, &data,
   13986:	2201      	movs	r2, #1
   13988:	f10d 0123 	add.w	r1, sp, #35	; 0x23
   1398c:	47a8      	blx	r5
		if (count == 0) {
   1398e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   13990:	2b00      	cmp	r3, #0
   13992:	d0ee      	beq.n	13972 <shell_process+0x82>
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   13994:	f99d 2023 	ldrsb.w	r2, [sp, #35]	; 0x23
		if (ascii_filter(data) != 0) {
   13998:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
	return (uint8_t) data > SHELL_ASCII_MAX_CHAR ? -EINVAL : 0;
   1399c:	68a0      	ldr	r0, [r4, #8]
   1399e:	2a00      	cmp	r2, #0
   139a0:	dbd1      	blt.n	13946 <shell_process+0x56>
		switch (shell->ctx->receive_state) {
   139a2:	7942      	ldrb	r2, [r0, #5]
   139a4:	2a03      	cmp	r2, #3
   139a6:	f200 8340 	bhi.w	1402a <shell_process+0x73a>
   139aa:	e8df f012 	tbh	[pc, r2, lsl #1]
   139ae:	0004      	.short	0x0004
   139b0:	02d702aa 	.word	0x02d702aa
   139b4:	033e      	.short	0x033e
	if ((data != '\r') && (data != '\n')) {
   139b6:	2b0d      	cmp	r3, #13
   139b8:	d01b      	beq.n	139f2 <shell_process+0x102>
   139ba:	2b0a      	cmp	r3, #10
   139bc:	d019      	beq.n	139f2 <shell_process+0x102>
	sh->ctx->ctx.flags.last_nl = val;
   139be:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
   139c2:	f36f 02ca 	bfc	r2, #3, #8
   139c6:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
			switch (data) {
   139ca:	2b09      	cmp	r3, #9
   139cc:	d04e      	beq.n	13a6c <shell_process+0x17c>
   139ce:	d834      	bhi.n	13a3a <shell_process+0x14a>
   139d0:	2b00      	cmp	r3, #0
   139d2:	d0b8      	beq.n	13946 <shell_process+0x56>
   139d4:	2b08      	cmp	r3, #8
   139d6:	f000 81f6 	beq.w	13dc6 <shell_process+0x4d6>
				if (isprint((int) data)) {
   139da:	4a78      	ldr	r2, [pc, #480]	; (13bbc <shell_process+0x2cc>)
   139dc:	5c9a      	ldrb	r2, [r3, r2]
   139de:	f012 0f97 	tst.w	r2, #151	; 0x97
   139e2:	f000 81fc 	beq.w	13dde <shell_process+0x4ee>
					z_flag_history_exit_set(shell, true);
   139e6:	2101      	movs	r1, #1
   139e8:	f016 f878 	bl	29adc <z_flag_history_exit_set.isra.0>
					z_shell_op_char_insert(shell, data);
   139ec:	f89d 1023 	ldrb.w	r1, [sp, #35]	; 0x23
   139f0:	e102      	b.n	13bf8 <shell_process+0x308>
	return sh->ctx->ctx.flags.last_nl;
   139f2:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
   139f6:	f3c2 02c7 	ubfx	r2, r2, #3, #8
	if ((z_flag_last_nl_get(shell) == 0U) ||
   139fa:	b12a      	cbz	r2, 13a08 <shell_process+0x118>
   139fc:	f8d0 2264 	ldr.w	r2, [r0, #612]	; 0x264
   13a00:	f3c2 02c7 	ubfx	r2, r2, #3, #8
   13a04:	4293      	cmp	r3, r2
   13a06:	d1e0      	bne.n	139ca <shell_process+0xda>
	sh->ctx->ctx.flags.last_nl = val;
   13a08:	f8b0 2264 	ldrh.w	r2, [r0, #612]	; 0x264
				if (!shell->ctx->cmd_buff_len) {
   13a0c:	8f81      	ldrh	r1, [r0, #60]	; 0x3c
   13a0e:	f363 02ca 	bfi	r2, r3, #3, #8
   13a12:	f8a0 2264 	strh.w	r2, [r0, #612]	; 0x264
   13a16:	b961      	cbnz	r1, 13a32 <shell_process+0x142>
	z_flag_history_exit_set(shell, false);
   13a18:	f016 f860 	bl	29adc <z_flag_history_exit_set.isra.0>
	z_shell_history_mode_exit(shell->history);
   13a1c:	68e0      	ldr	r0, [r4, #12]
   13a1e:	f016 fc49 	bl	2a2b4 <z_shell_history_mode_exit>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   13a22:	4967      	ldr	r1, [pc, #412]	; (13bc0 <shell_process+0x2d0>)
   13a24:	6960      	ldr	r0, [r4, #20]
   13a26:	f016 f84c 	bl	29ac2 <z_shell_raw_fprintf>
		state_set(shell, SHELL_STATE_ACTIVE);
   13a2a:	4620      	mov	r0, r4
   13a2c:	f7ff fdd8 	bl	135e0 <state_set.constprop.0>
		break;
   13a30:	e789      	b.n	13946 <shell_process+0x56>
					(void)execute(shell);
   13a32:	4620      	mov	r0, r4
   13a34:	f7ff fdfa 	bl	1362c <execute>
				state_set(shell, SHELL_STATE_ACTIVE);
   13a38:	e7f7      	b.n	13a2a <shell_process+0x13a>
   13a3a:	2b1b      	cmp	r3, #27
   13a3c:	d013      	beq.n	13a66 <shell_process+0x176>
   13a3e:	2b7f      	cmp	r3, #127	; 0x7f
   13a40:	d1cb      	bne.n	139da <shell_process+0xea>
	return sh->ctx->cfg.flags.echo == 1;
   13a42:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
   13a46:	079d      	lsls	r5, r3, #30
   13a48:	f57f af7d 	bpl.w	13946 <shell_process+0x56>
					z_flag_history_exit_set(shell, true);
   13a4c:	2101      	movs	r1, #1
   13a4e:	f016 f845 	bl	29adc <z_flag_history_exit_set.isra.0>
					if (z_flag_mode_delete_get(shell)) {
   13a52:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.mode_delete == 1;
   13a54:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   13a58:	0719      	lsls	r1, r3, #28
   13a5a:	f100 81bc 	bmi.w	13dd6 <shell_process+0x4e6>
		z_shell_op_char_delete(shell);
   13a5e:	4620      	mov	r0, r4
   13a60:	f016 fa9a 	bl	29f98 <z_shell_op_char_delete>
		break;
   13a64:	e76f      	b.n	13946 <shell_process+0x56>
	shell->ctx->receive_state = state;
   13a66:	2301      	movs	r3, #1
   13a68:	7143      	strb	r3, [r0, #5]
}
   13a6a:	e76c      	b.n	13946 <shell_process+0x56>
	return sh->ctx->cfg.flags.echo == 1;
   13a6c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell) &&
   13a70:	079a      	lsls	r2, r3, #30
   13a72:	f57f af68 	bpl.w	13946 <shell_process+0x56>
					z_flag_history_exit_set(shell, true);
   13a76:	2101      	movs	r1, #1
   13a78:	f016 f830 	bl	29adc <z_flag_history_exit_set.isra.0>
	uint16_t compl_space = completion_space_get(shell);
   13a7c:	68a0      	ldr	r0, [r4, #8]
	if (compl_space == 0U) {
   13a7e:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
   13a80:	2bff      	cmp	r3, #255	; 0xff
   13a82:	f43f af60 	beq.w	13946 <shell_process+0x56>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   13a86:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
   13a88:	f100 0142 	add.w	r1, r0, #66	; 0x42
   13a8c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   13a90:	f019 f8b1 	bl	2cbf6 <memcpy>
	shell->ctx->temp_buff[shell->ctx->cmd_buff_pos] = '\0';
   13a94:	68a2      	ldr	r2, [r4, #8]
   13a96:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
   13a98:	4413      	add	r3, r2
   13a9a:	2500      	movs	r5, #0
   13a9c:	f883 5142 	strb.w	r5, [r3, #322]	; 0x142
	(void)z_shell_make_argv(argc, *argv, shell->ctx->temp_buff,
   13aa0:	a91b      	add	r1, sp, #108	; 0x6c
   13aa2:	230c      	movs	r3, #12
   13aa4:	f502 72a1 	add.w	r2, r2, #322	; 0x142
   13aa8:	a80b      	add	r0, sp, #44	; 0x2c
   13aaa:	f000 fd79 	bl	145a0 <z_shell_make_argv>
	if (*argc > CONFIG_SHELL_ARGC_MAX) {
   13aae:	990b      	ldr	r1, [sp, #44]	; 0x2c
   13ab0:	290c      	cmp	r1, #12
   13ab2:	f63f af48 	bhi.w	13946 <shell_process+0x56>
	(*argv)[*argc] = NULL;
   13ab6:	ab28      	add	r3, sp, #160	; 0xa0
   13ab8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   13abc:	f843 5c34 	str.w	r5, [r3, #-52]
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   13ac0:	b151      	cbz	r1, 13ad8 <shell_process+0x1e8>
	int space = isspace((int)shell->ctx->cmd_buff[
   13ac2:	68a3      	ldr	r3, [r4, #8]
   13ac4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   13ac6:	4413      	add	r3, r2
   13ac8:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
   13acc:	4b3b      	ldr	r3, [pc, #236]	; (13bbc <shell_process+0x2cc>)
	if ((*argc == 0) || ((space == 0) && (*argc == 1))) {
   13ace:	5cd3      	ldrb	r3, [r2, r3]
   13ad0:	071b      	lsls	r3, r3, #28
   13ad2:	d45e      	bmi.n	13b92 <shell_process+0x2a2>
   13ad4:	2901      	cmp	r1, #1
   13ad6:	d15b      	bne.n	13b90 <shell_process+0x2a0>
		*complete_arg_idx = Z_SHELL_CMD_ROOT_LVL;
   13ad8:	2500      	movs	r5, #0
   13ada:	950a      	str	r5, [sp, #40]	; 0x28
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   13adc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13ade:	aa28      	add	r2, sp, #160	; 0xa0
   13ae0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	*cnt = 0;
   13ae4:	2600      	movs	r6, #0
	find_completion_candidates(shell, cmd, argv[arg_idx], &first, &cnt,
   13ae6:	f853 ac34 	ldr.w	sl, [r3, #-52]
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
   13aea:	4650      	mov	r0, sl
   13aec:	f015 ffe3 	bl	29ab6 <z_shell_strlen>
	size_t first = 0;
   13af0:	46b0      	mov	r8, r6
	incompl_cmd_len = z_shell_strlen(incompl_cmd);
   13af2:	4681      	mov	r9, r0
	*longest = 0U;
   13af4:	9602      	str	r6, [sp, #8]
	size_t idx = 0;
   13af6:	4637      	mov	r7, r6
	while ((candidate = z_shell_cmd_get(cmd, idx, &dloc)) != NULL) {
   13af8:	aa16      	add	r2, sp, #88	; 0x58
   13afa:	4639      	mov	r1, r7
   13afc:	4628      	mov	r0, r5
   13afe:	f000 fe17 	bl	14730 <z_shell_cmd_get>
   13b02:	4683      	mov	fp, r0
   13b04:	2800      	cmp	r0, #0
   13b06:	d15f      	bne.n	13bc8 <shell_process+0x2d8>
	if (cnt == 1) {
   13b08:	2e01      	cmp	r6, #1
   13b0a:	d17e      	bne.n	13c0a <shell_process+0x31a>
		autocomplete(shell, cmd, argv[arg_idx], first);
   13b0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13b0e:	aa28      	add	r2, sp, #160	; 0xa0
   13b10:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	uint16_t arg_len = z_shell_strlen(arg);
   13b14:	f853 0c34 	ldr.w	r0, [r3, #-52]
   13b18:	f015 ffcd 	bl	29ab6 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   13b1c:	68a2      	ldr	r2, [r4, #8]
	uint16_t arg_len = z_shell_strlen(arg);
   13b1e:	4606      	mov	r6, r0
	match = z_shell_cmd_get(cmd, subcmd_idx, &shell->ctx->active_cmd);
   13b20:	3208      	adds	r2, #8
   13b22:	4628      	mov	r0, r5
   13b24:	4641      	mov	r1, r8
   13b26:	f000 fe03 	bl	14730 <z_shell_cmd_get>
	__ASSERT_NO_MSG(match != NULL);
   13b2a:	4605      	mov	r5, r0
   13b2c:	b958      	cbnz	r0, 13b46 <shell_process+0x256>
   13b2e:	4925      	ldr	r1, [pc, #148]	; (13bc4 <shell_process+0x2d4>)
   13b30:	481f      	ldr	r0, [pc, #124]	; (13bb0 <shell_process+0x2c0>)
   13b32:	4a20      	ldr	r2, [pc, #128]	; (13bb4 <shell_process+0x2c4>)
   13b34:	f240 136f 	movw	r3, #367	; 0x16f
   13b38:	f015 f82f 	bl	28b9a <printk>
   13b3c:	481d      	ldr	r0, [pc, #116]	; (13bb4 <shell_process+0x2c4>)
   13b3e:	f240 116f 	movw	r1, #367	; 0x16f
   13b42:	f015 fa6b 	bl	2901c <assert_post_action>
	cmd_len = z_shell_strlen(match->syntax);
   13b46:	6828      	ldr	r0, [r5, #0]
   13b48:	f015 ffb5 	bl	29ab6 <z_shell_strlen>
	if (cmd_len != arg_len) {
   13b4c:	4286      	cmp	r6, r0
   13b4e:	d006      	beq.n	13b5e <shell_process+0x26e>
		z_shell_op_completion_insert(shell,
   13b50:	6829      	ldr	r1, [r5, #0]
   13b52:	1b82      	subs	r2, r0, r6
   13b54:	b292      	uxth	r2, r2
   13b56:	4431      	add	r1, r6
   13b58:	4620      	mov	r0, r4
   13b5a:	f016 fa1b 	bl	29f94 <z_shell_op_completion_insert>
	if (!isspace((int) shell->ctx->cmd_buff[
   13b5e:	68a0      	ldr	r0, [r4, #8]
   13b60:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
   13b62:	4403      	add	r3, r0
   13b64:	f893 2042 	ldrb.w	r2, [r3, #66]	; 0x42
   13b68:	4b14      	ldr	r3, [pc, #80]	; (13bbc <shell_process+0x2cc>)
   13b6a:	5cd1      	ldrb	r1, [r2, r3]
   13b6c:	f011 0108 	ands.w	r1, r1, #8
   13b70:	d146      	bne.n	13c00 <shell_process+0x310>
	return sh->ctx->cfg.flags.insert_mode == 1;
   13b72:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		if (z_flag_insert_mode_get(shell)) {
   13b76:	07df      	lsls	r7, r3, #31
   13b78:	d53d      	bpl.n	13bf6 <shell_process+0x306>
			z_flag_insert_mode_set(shell, false);
   13b7a:	f015 ffbf 	bl	29afc <z_flag_insert_mode_set.isra.0>
			z_shell_op_char_insert(shell, ' ');
   13b7e:	2120      	movs	r1, #32
   13b80:	4620      	mov	r0, r4
   13b82:	f001 f8fd 	bl	14d80 <z_shell_op_char_insert>
			z_flag_insert_mode_set(shell, true);
   13b86:	68a0      	ldr	r0, [r4, #8]
   13b88:	2101      	movs	r1, #1
				z_flag_insert_mode_set(shell, !status);
   13b8a:	f015 ffb7 	bl	29afc <z_flag_insert_mode_set.isra.0>
				break;
   13b8e:	e6da      	b.n	13946 <shell_process+0x56>
	search_argc = space ? *argc : *argc - 1;
   13b90:	3901      	subs	r1, #1
	*cmd = z_shell_get_last_command(selected_cmd_get(shell), search_argc,
   13b92:	2000      	movs	r0, #0
   13b94:	ab0c      	add	r3, sp, #48	; 0x30
   13b96:	9300      	str	r3, [sp, #0]
   13b98:	9001      	str	r0, [sp, #4]
   13b9a:	ab0a      	add	r3, sp, #40	; 0x28
   13b9c:	aa1b      	add	r2, sp, #108	; 0x6c
   13b9e:	f016 f8da 	bl	29d56 <z_shell_get_last_command>
	if ((*cmd == NULL) && (search_argc != 0)) {
   13ba2:	4605      	mov	r5, r0
   13ba4:	2800      	cmp	r0, #0
   13ba6:	d199      	bne.n	13adc <shell_process+0x1ec>
   13ba8:	e6cd      	b.n	13946 <shell_process+0x56>
   13baa:	bf00      	nop
   13bac:	0002f940 	.word	0x0002f940
   13bb0:	0002e93e 	.word	0x0002e93e
   13bb4:	0002f918 	.word	0x0002f918
   13bb8:	0002fa59 	.word	0x0002fa59
   13bbc:	00034540 	.word	0x00034540
   13bc0:	0003329a 	.word	0x0003329a
   13bc4:	0002fa64 	.word	0x0002fa64
	return (strncmp(candidate, str, len) == 0) ? true : false;
   13bc8:	f8db 0000 	ldr.w	r0, [fp]
   13bcc:	464a      	mov	r2, r9
   13bce:	4651      	mov	r1, sl
   13bd0:	f019 f856 	bl	2cc80 <strncmp>
		if (is_candidate) {
   13bd4:	b968      	cbnz	r0, 13bf2 <shell_process+0x302>
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   13bd6:	f8db 0000 	ldr.w	r0, [fp]
   13bda:	f7f8 fbeb 	bl	c3b4 <strlen>
   13bde:	9b02      	ldr	r3, [sp, #8]
   13be0:	4283      	cmp	r3, r0
   13be2:	bf38      	it	cc
   13be4:	4603      	movcc	r3, r0
   13be6:	b29b      	uxth	r3, r3
				*first_idx = idx;
   13be8:	2e00      	cmp	r6, #0
   13bea:	bf08      	it	eq
   13bec:	46b8      	moveq	r8, r7
			*longest = Z_MAX(strlen(candidate->syntax), *longest);
   13bee:	9302      	str	r3, [sp, #8]
			(*cnt)++;
   13bf0:	3601      	adds	r6, #1
		idx++;
   13bf2:	3701      	adds	r7, #1
   13bf4:	e780      	b.n	13af8 <shell_process+0x208>
			z_shell_op_char_insert(shell, ' ');
   13bf6:	2120      	movs	r1, #32
					z_shell_op_char_insert(shell, data);
   13bf8:	4620      	mov	r0, r4
   13bfa:	f001 f8c1 	bl	14d80 <z_shell_op_char_insert>
   13bfe:	e6a2      	b.n	13946 <shell_process+0x56>
		z_shell_op_cursor_move(shell, 1);
   13c00:	2101      	movs	r1, #1
   13c02:	4620      	mov	r0, r4
   13c04:	f016 f90a 	bl	29e1c <z_shell_op_cursor_move>
   13c08:	e69d      	b.n	13946 <shell_process+0x56>
	} else if (cnt > 1) {
   13c0a:	f67f ae9c 	bls.w	13946 <shell_process+0x56>
		tab_options_print(shell, cmd, argv[arg_idx], first, cnt,
   13c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c10:	aa28      	add	r2, sp, #160	; 0xa0
   13c12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   13c16:	f853 ac34 	ldr.w	sl, [r3, #-52]
	size_t str_len = z_shell_strlen(str);
   13c1a:	4650      	mov	r0, sl
   13c1c:	f015 ff4b 	bl	29ab6 <z_shell_strlen>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   13c20:	68a3      	ldr	r3, [r4, #8]
	size_t str_len = z_shell_strlen(str);
   13c22:	9004      	str	r0, [sp, #16]
		shell->ctx->vt100_ctx.printed_cmd = 0;
   13c24:	f8a3 b030 	strh.w	fp, [r3, #48]	; 0x30
   13c28:	9603      	str	r6, [sp, #12]
   13c2a:	46c3      	mov	fp, r8
		match = z_shell_cmd_get(cmd, idx, &shell->ctx->active_cmd);
   13c2c:	68a2      	ldr	r2, [r4, #8]
   13c2e:	4659      	mov	r1, fp
   13c30:	3208      	adds	r2, #8
   13c32:	4628      	mov	r0, r5
   13c34:	f000 fd7c 	bl	14730 <z_shell_cmd_get>
		__ASSERT_NO_MSG(match != NULL);
   13c38:	4607      	mov	r7, r0
   13c3a:	b958      	cbnz	r0, 13c54 <shell_process+0x364>
   13c3c:	49bc      	ldr	r1, [pc, #752]	; (13f30 <shell_process+0x640>)
   13c3e:	48bd      	ldr	r0, [pc, #756]	; (13f34 <shell_process+0x644>)
   13c40:	4abd      	ldr	r2, [pc, #756]	; (13f38 <shell_process+0x648>)
   13c42:	f44f 73dc 	mov.w	r3, #440	; 0x1b8
   13c46:	f014 ffa8 	bl	28b9a <printk>
   13c4a:	48bb      	ldr	r0, [pc, #748]	; (13f38 <shell_process+0x648>)
   13c4c:	f44f 71dc 	mov.w	r1, #440	; 0x1b8
   13c50:	f015 f9e4 	bl	2901c <assert_post_action>
		idx++;
   13c54:	6838      	ldr	r0, [r7, #0]
   13c56:	f10b 0b01 	add.w	fp, fp, #1
		if (str && match->syntax &&
   13c5a:	f1ba 0f00 	cmp.w	sl, #0
   13c5e:	d160      	bne.n	13d22 <shell_process+0x432>
		tab_item_print(shell, match->syntax, longest);
   13c60:	683b      	ldr	r3, [r7, #0]
	if (option == NULL) {
   13c62:	2b00      	cmp	r3, #0
   13c64:	d166      	bne.n	13d34 <shell_process+0x444>
		shell->ctx->vt100_ctx.printed_cmd = 0;
   13c66:	68a2      	ldr	r2, [r4, #8]
   13c68:	8613      	strh	r3, [r2, #48]	; 0x30
	while (cnt) {
   13c6a:	9b03      	ldr	r3, [sp, #12]
   13c6c:	3b01      	subs	r3, #1
   13c6e:	9303      	str	r3, [sp, #12]
   13c70:	d1dc      	bne.n	13c2c <shell_process+0x33c>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   13c72:	49b2      	ldr	r1, [pc, #712]	; (13f3c <shell_process+0x64c>)
   13c74:	6960      	ldr	r0, [r4, #20]
   13c76:	f015 ff24 	bl	29ac2 <z_shell_raw_fprintf>
	z_shell_print_prompt_and_cmd(shell);
   13c7a:	4620      	mov	r0, r4
   13c7c:	f001 f8b8 	bl	14df0 <z_shell_print_prompt_and_cmd>
		partial_autocomplete(shell, cmd, argv[arg_idx], first, cnt);
   13c80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   13c82:	aa28      	add	r2, sp, #160	; 0xa0
   13c84:	eb02 0383 	add.w	r3, r2, r3, lsl #2
	size_t idx = first + 1;
   13c88:	f108 0901 	add.w	r9, r8, #1
	uint16_t arg_len = z_shell_strlen(arg);
   13c8c:	f853 0c34 	ldr.w	r0, [r3, #-52]
   13c90:	f015 ff11 	bl	29ab6 <z_shell_strlen>
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   13c94:	4641      	mov	r1, r8
	uint16_t arg_len = z_shell_strlen(arg);
   13c96:	4607      	mov	r7, r0
	match = z_shell_cmd_get(cmd, first, &dynamic_entry);
   13c98:	aa11      	add	r2, sp, #68	; 0x44
   13c9a:	4628      	mov	r0, r5
   13c9c:	f000 fd48 	bl	14730 <z_shell_cmd_get>
	__ASSERT_NO_MSG(match);
   13ca0:	4680      	mov	r8, r0
   13ca2:	b958      	cbnz	r0, 13cbc <shell_process+0x3cc>
   13ca4:	49a6      	ldr	r1, [pc, #664]	; (13f40 <shell_process+0x650>)
   13ca6:	48a3      	ldr	r0, [pc, #652]	; (13f34 <shell_process+0x644>)
   13ca8:	4aa3      	ldr	r2, [pc, #652]	; (13f38 <shell_process+0x648>)
   13caa:	f44f 73ea 	mov.w	r3, #468	; 0x1d4
   13cae:	f014 ff74 	bl	28b9a <printk>
   13cb2:	48a1      	ldr	r0, [pc, #644]	; (13f38 <shell_process+0x648>)
   13cb4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   13cb8:	f015 f9b0 	bl	2901c <assert_post_action>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   13cbc:	68a0      	ldr	r0, [r4, #8]
   13cbe:	f8d8 1000 	ldr.w	r1, [r8]
   13cc2:	22ff      	movs	r2, #255	; 0xff
   13cc4:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   13cc8:	f018 ffec 	bl	2cca4 <strncpy>
	*str = match->syntax;
   13ccc:	f8d8 a000 	ldr.w	sl, [r8]
	uint16_t common = UINT16_MAX;
   13cd0:	f64f 78ff 	movw	r8, #65535	; 0xffff
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   13cd4:	aa16      	add	r2, sp, #88	; 0x58
   13cd6:	4649      	mov	r1, r9
   13cd8:	4628      	mov	r0, r5
   13cda:	f109 0b01 	add.w	fp, r9, #1
   13cde:	f000 fd27 	bl	14730 <z_shell_cmd_get>
		if (match2 == NULL) {
   13ce2:	2800      	cmp	r0, #0
   13ce4:	d062      	beq.n	13dac <shell_process+0x4bc>
		curr_common = str_common(shell->ctx->temp_buff, match2->syntax,
   13ce6:	68a3      	ldr	r3, [r4, #8]
   13ce8:	6800      	ldr	r0, [r0, #0]
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   13cea:	f503 73a1 	add.w	r3, r3, #322	; 0x142
	size_t common = 0;
   13cee:	2200      	movs	r2, #0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   13cf0:	f813 cb01 	ldrb.w	ip, [r3], #1
   13cf4:	5c81      	ldrb	r1, [r0, r2]
   13cf6:	4561      	cmp	r1, ip
   13cf8:	d105      	bne.n	13d06 <shell_process+0x416>
   13cfa:	b121      	cbz	r1, 13d06 <shell_process+0x416>
		common++;
   13cfc:	3201      	adds	r2, #1
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   13cfe:	f64f 71ff 	movw	r1, #65535	; 0xffff
   13d02:	428a      	cmp	r2, r1
   13d04:	d1f4      	bne.n	13cf0 <shell_process+0x400>
		if ((arg_len == 0U) || (curr_common >= arg_len)) {
   13d06:	b10f      	cbz	r7, 13d0c <shell_process+0x41c>
   13d08:	42ba      	cmp	r2, r7
   13d0a:	db08      	blt.n	13d1e <shell_process+0x42e>
			common = (curr_common < common) ? curr_common : common;
   13d0c:	4590      	cmp	r8, r2
			--cnt;
   13d0e:	f106 36ff 	add.w	r6, r6, #4294967295
			common = (curr_common < common) ? curr_common : common;
   13d12:	bfa8      	it	ge
   13d14:	4690      	movge	r8, r2
	while (cnt > 1) {
   13d16:	2e01      	cmp	r6, #1
			common = (curr_common < common) ? curr_common : common;
   13d18:	fa1f f888 	uxth.w	r8, r8
	while (cnt > 1) {
   13d1c:	d046      	beq.n	13dac <shell_process+0x4bc>
		match2 = z_shell_cmd_get(cmd, idx++, &dynamic_entry2);
   13d1e:	46d9      	mov	r9, fp
   13d20:	e7d8      	b.n	13cd4 <shell_process+0x3e4>
		if (str && match->syntax &&
   13d22:	2800      	cmp	r0, #0
   13d24:	d09c      	beq.n	13c60 <shell_process+0x370>
	return (strncmp(candidate, str, len) == 0) ? true : false;
   13d26:	9a04      	ldr	r2, [sp, #16]
   13d28:	4651      	mov	r1, sl
   13d2a:	f018 ffa9 	bl	2cc80 <strncmp>
		if (str && match->syntax &&
   13d2e:	2800      	cmp	r0, #0
   13d30:	d096      	beq.n	13c60 <shell_process+0x370>
   13d32:	e77b      	b.n	13c2c <shell_process+0x33c>
	longest_option += z_shell_strlen(tab);
   13d34:	4883      	ldr	r0, [pc, #524]	; (13f44 <shell_process+0x654>)
   13d36:	9305      	str	r3, [sp, #20]
   13d38:	f015 febd 	bl	29ab6 <z_shell_strlen>
   13d3c:	9b02      	ldr	r3, [sp, #8]
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   13d3e:	68a1      	ldr	r1, [r4, #8]
	longest_option += z_shell_strlen(tab);
   13d40:	18c2      	adds	r2, r0, r3
   13d42:	b292      	uxth	r2, r2
			- z_shell_strlen(tab)) / longest_option;
   13d44:	487f      	ldr	r0, [pc, #508]	; (13f44 <shell_process+0x654>)
	columns = (shell->ctx->vt100_ctx.cons.terminal_wid
   13d46:	8d4f      	ldrh	r7, [r1, #42]	; 0x2a
	longest_option += z_shell_strlen(tab);
   13d48:	9207      	str	r2, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
   13d4a:	f015 feb4 	bl	29ab6 <z_shell_strlen>
	diff = longest_option - z_shell_strlen(option);
   13d4e:	9b05      	ldr	r3, [sp, #20]
			- z_shell_strlen(tab)) / longest_option;
   13d50:	9006      	str	r0, [sp, #24]
	diff = longest_option - z_shell_strlen(option);
   13d52:	4618      	mov	r0, r3
   13d54:	f015 feaf 	bl	29ab6 <z_shell_strlen>
   13d58:	9a07      	ldr	r2, [sp, #28]
			- z_shell_strlen(tab)) / longest_option;
   13d5a:	9906      	ldr	r1, [sp, #24]
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   13d5c:	9b05      	ldr	r3, [sp, #20]
	diff = longest_option - z_shell_strlen(option);
   13d5e:	eba2 0900 	sub.w	r9, r2, r0
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   13d62:	68a0      	ldr	r0, [r4, #8]
   13d64:	f8b0 c030 	ldrh.w	ip, [r0, #48]	; 0x30
			- z_shell_strlen(tab)) / longest_option;
   13d68:	1a7f      	subs	r7, r7, r1
   13d6a:	fb97 f2f2 	sdiv	r2, r7, r2
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   13d6e:	b292      	uxth	r2, r2
   13d70:	fbbc f1f2 	udiv	r1, ip, r2
   13d74:	fb02 c211 	mls	r2, r2, r1, ip
   13d78:	f10c 0e01 	add.w	lr, ip, #1
   13d7c:	b292      	uxth	r2, r2
	diff = longest_option - z_shell_strlen(option);
   13d7e:	fa1f f989 	uxth.w	r9, r9
	if (shell->ctx->vt100_ctx.printed_cmd++ % columns == 0U) {
   13d82:	f8a0 e030 	strh.w	lr, [r0, #48]	; 0x30
   13d86:	b95a      	cbnz	r2, 13da0 <shell_process+0x4b0>
		z_shell_fprintf(shell, SHELL_OPTION, "\n%s%s", tab, option);
   13d88:	9300      	str	r3, [sp, #0]
   13d8a:	4a6f      	ldr	r2, [pc, #444]	; (13f48 <shell_process+0x658>)
   13d8c:	4b6d      	ldr	r3, [pc, #436]	; (13f44 <shell_process+0x654>)
   13d8e:	2106      	movs	r1, #6
   13d90:	4620      	mov	r0, r4
   13d92:	f000 feeb 	bl	14b6c <z_shell_fprintf>
	z_shell_op_cursor_horiz_move(shell, diff);
   13d96:	4649      	mov	r1, r9
   13d98:	4620      	mov	r0, r4
   13d9a:	f000 fd95 	bl	148c8 <z_shell_op_cursor_horiz_move>
   13d9e:	e764      	b.n	13c6a <shell_process+0x37a>
		z_shell_fprintf(shell, SHELL_OPTION, "%s", option);
   13da0:	4a6a      	ldr	r2, [pc, #424]	; (13f4c <shell_process+0x65c>)
   13da2:	2106      	movs	r1, #6
   13da4:	4620      	mov	r0, r4
   13da6:	f000 fee1 	bl	14b6c <z_shell_fprintf>
   13daa:	e7f4      	b.n	13d96 <shell_process+0x4a6>
	if (common) {
   13dac:	f1b8 0f00 	cmp.w	r8, #0
   13db0:	f43f adc9 	beq.w	13946 <shell_process+0x56>
		z_shell_op_completion_insert(shell, &completion[arg_len],
   13db4:	eba8 0207 	sub.w	r2, r8, r7
   13db8:	b292      	uxth	r2, r2
   13dba:	eb0a 0107 	add.w	r1, sl, r7
   13dbe:	4620      	mov	r0, r4
   13dc0:	f016 f8e8 	bl	29f94 <z_shell_op_completion_insert>
   13dc4:	e5bf      	b.n	13946 <shell_process+0x56>
	return sh->ctx->cfg.flags.echo == 1;
   13dc6:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
				if (z_flag_echo_get(shell)) {
   13dca:	079e      	lsls	r6, r3, #30
   13dcc:	f57f adbb 	bpl.w	13946 <shell_process+0x56>
					z_flag_history_exit_set(shell, true);
   13dd0:	2101      	movs	r1, #1
   13dd2:	f015 fe83 	bl	29adc <z_flag_history_exit_set.isra.0>
						z_shell_op_char_backspace(shell);
   13dd6:	4620      	mov	r0, r4
   13dd8:	f016 f8f9 	bl	29fce <z_shell_op_char_backspace>
   13ddc:	e5b3      	b.n	13946 <shell_process+0x56>
   13dde:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
				} else if (z_flag_echo_get(shell)) {
   13de2:	0792      	lsls	r2, r2, #30
   13de4:	f57f adaf 	bpl.w	13946 <shell_process+0x56>
	switch (data) {
   13de8:	3b01      	subs	r3, #1
   13dea:	2b16      	cmp	r3, #22
   13dec:	f63f adab 	bhi.w	13946 <shell_process+0x56>
   13df0:	a201      	add	r2, pc, #4	; (adr r2, 13df8 <shell_process+0x508>)
   13df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   13df6:	bf00      	nop
   13df8:	00013ffd 	.word	0x00013ffd
   13dfc:	00013e55 	.word	0x00013e55
   13e00:	00013e5d 	.word	0x00013e5d
   13e04:	00013a5f 	.word	0x00013a5f
   13e08:	00013ff1 	.word	0x00013ff1
   13e0c:	00013e7d 	.word	0x00013e7d
   13e10:	00013947 	.word	0x00013947
   13e14:	00013947 	.word	0x00013947
   13e18:	00013947 	.word	0x00013947
   13e1c:	00013947 	.word	0x00013947
   13e20:	00013e85 	.word	0x00013e85
   13e24:	00013e8d 	.word	0x00013e8d
   13e28:	00013947 	.word	0x00013947
   13e2c:	00013eb7 	.word	0x00013eb7
   13e30:	00013947 	.word	0x00013947
   13e34:	00013ec1 	.word	0x00013ec1
   13e38:	00013947 	.word	0x00013947
   13e3c:	00013947 	.word	0x00013947
   13e40:	00013947 	.word	0x00013947
   13e44:	00013947 	.word	0x00013947
   13e48:	00013ec5 	.word	0x00013ec5
   13e4c:	00013947 	.word	0x00013947
   13e50:	00013ef3 	.word	0x00013ef3
		z_shell_op_left_arrow(shell);
   13e54:	4620      	mov	r0, r4
   13e56:	f016 f812 	bl	29e7e <z_shell_op_left_arrow>
		break;
   13e5a:	e574      	b.n	13946 <shell_process+0x56>
		z_shell_op_cursor_end_move(shell);
   13e5c:	4620      	mov	r0, r4
   13e5e:	f016 f807 	bl	29e70 <z_shell_op_cursor_end_move>
		if (!z_shell_cursor_in_empty_line(shell)) {
   13e62:	4620      	mov	r0, r4
   13e64:	f015 ffc6 	bl	29df4 <z_shell_cursor_in_empty_line>
   13e68:	b918      	cbnz	r0, 13e72 <shell_process+0x582>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   13e6a:	4934      	ldr	r1, [pc, #208]	; (13f3c <shell_process+0x64c>)
   13e6c:	6960      	ldr	r0, [r4, #20]
   13e6e:	f015 fe28 	bl	29ac2 <z_shell_raw_fprintf>
		z_flag_history_exit_set(shell, true);
   13e72:	68a0      	ldr	r0, [r4, #8]
   13e74:	2101      	movs	r1, #1
   13e76:	f015 fe31 	bl	29adc <z_flag_history_exit_set.isra.0>
   13e7a:	e5d6      	b.n	13a2a <shell_process+0x13a>
		z_shell_op_right_arrow(shell);
   13e7c:	4620      	mov	r0, r4
   13e7e:	f016 f806 	bl	29e8e <z_shell_op_right_arrow>
		break;
   13e82:	e560      	b.n	13946 <shell_process+0x56>
		z_shell_op_delete_from_cursor(shell);
   13e84:	4620      	mov	r0, r4
   13e86:	f016 f80b 	bl	29ea0 <z_shell_op_delete_from_cursor>
		break;
   13e8a:	e55c      	b.n	13946 <shell_process+0x56>
	return sh->ctx->cfg.flags.use_vt100 == 1;
   13e8c:	f8d0 3260 	ldr.w	r3, [r0, #608]	; 0x260
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   13e90:	069f      	lsls	r7, r3, #26
   13e92:	d503      	bpl.n	13e9c <shell_process+0x5ac>
   13e94:	492e      	ldr	r1, [pc, #184]	; (13f50 <shell_process+0x660>)
   13e96:	6960      	ldr	r0, [r4, #20]
   13e98:	f015 fe13 	bl	29ac2 <z_shell_raw_fprintf>
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   13e9c:	68a3      	ldr	r3, [r4, #8]
   13e9e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   13ea2:	069e      	lsls	r6, r3, #26
   13ea4:	d503      	bpl.n	13eae <shell_process+0x5be>
   13ea6:	492b      	ldr	r1, [pc, #172]	; (13f54 <shell_process+0x664>)
   13ea8:	6960      	ldr	r0, [r4, #20]
   13eaa:	f015 fe0a 	bl	29ac2 <z_shell_raw_fprintf>
		z_shell_print_prompt_and_cmd(shell);
   13eae:	4620      	mov	r0, r4
   13eb0:	f000 ff9e 	bl	14df0 <z_shell_print_prompt_and_cmd>
		break;
   13eb4:	e547      	b.n	13946 <shell_process+0x56>
		history_handle(shell, false);
   13eb6:	2100      	movs	r1, #0
		history_handle(shell, true);
   13eb8:	4620      	mov	r0, r4
   13eba:	f7ff fb3f 	bl	1353c <history_handle>
		break;
   13ebe:	e542      	b.n	13946 <shell_process+0x56>
		history_handle(shell, true);
   13ec0:	2101      	movs	r1, #1
   13ec2:	e7f9      	b.n	13eb8 <shell_process+0x5c8>
		z_shell_op_cursor_home_move(shell);
   13ec4:	4620      	mov	r0, r4
   13ec6:	f015 ffcd 	bl	29e64 <z_shell_op_cursor_home_move>
		cmd_buffer_clear(shell);
   13eca:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->cmd_buff[0] = '\0'; /* clear command buffer */
   13ecc:	2200      	movs	r2, #0
   13ece:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	shell->ctx->cmd_buff_len = 0;
   13ed2:	63da      	str	r2, [r3, #60]	; 0x3c
		z_flag_history_exit_set(shell, true);
   13ed4:	68a0      	ldr	r0, [r4, #8]
   13ed6:	2101      	movs	r1, #1
   13ed8:	f015 fe00 	bl	29adc <z_flag_history_exit_set.isra.0>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   13edc:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   13ede:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   13ee2:	069d      	lsls	r5, r3, #26
   13ee4:	f57f ad2f 	bpl.w	13946 <shell_process+0x56>
   13ee8:	491b      	ldr	r1, [pc, #108]	; (13f58 <shell_process+0x668>)
   13eea:	6960      	ldr	r0, [r4, #20]
   13eec:	f015 fde9 	bl	29ac2 <z_shell_raw_fprintf>
}
   13ef0:	e529      	b.n	13946 <shell_process+0x56>
		z_shell_op_word_remove(shell);
   13ef2:	4620      	mov	r0, r4
   13ef4:	f000 fea8 	bl	14c48 <z_shell_op_word_remove>
		z_flag_history_exit_set(shell, true);
   13ef8:	68a0      	ldr	r0, [r4, #8]
   13efa:	2101      	movs	r1, #1
   13efc:	f015 fdee 	bl	29adc <z_flag_history_exit_set.isra.0>
		break;
   13f00:	e521      	b.n	13946 <shell_process+0x56>
			if (data == '[') {
   13f02:	2b5b      	cmp	r3, #91	; 0x5b
   13f04:	d101      	bne.n	13f0a <shell_process+0x61a>
	shell->ctx->receive_state = state;
   13f06:	2302      	movs	r3, #2
   13f08:	e5ae      	b.n	13a68 <shell_process+0x178>
	return sh->ctx->cfg.flags.echo == 1;
   13f0a:	f8d0 2260 	ldr.w	r2, [r0, #608]	; 0x260
			} else if (z_flag_echo_get(shell)) {
   13f0e:	0790      	lsls	r0, r2, #30
   13f10:	d506      	bpl.n	13f20 <shell_process+0x630>
	if (data == SHELL_VT100_ASCII_ALT_B) {
   13f12:	2b62      	cmp	r3, #98	; 0x62
   13f14:	d108      	bne.n	13f28 <shell_process+0x638>
		z_shell_op_cursor_word_move(shell, -1);
   13f16:	f04f 31ff 	mov.w	r1, #4294967295
		z_shell_op_cursor_word_move(shell, 1);
   13f1a:	4620      	mov	r0, r4
   13f1c:	f000 fd28 	bl	14970 <z_shell_op_cursor_word_move>
			receive_state_change(shell, SHELL_RECEIVE_DEFAULT);
   13f20:	68a3      	ldr	r3, [r4, #8]
	shell->ctx->receive_state = state;
   13f22:	2200      	movs	r2, #0
   13f24:	715a      	strb	r2, [r3, #5]
}
   13f26:	e50e      	b.n	13946 <shell_process+0x56>
	} else if (data == SHELL_VT100_ASCII_ALT_F) {
   13f28:	2b66      	cmp	r3, #102	; 0x66
   13f2a:	d1f9      	bne.n	13f20 <shell_process+0x630>
		z_shell_op_cursor_word_move(shell, 1);
   13f2c:	2101      	movs	r1, #1
   13f2e:	e7f4      	b.n	13f1a <shell_process+0x62a>
   13f30:	0002fa64 	.word	0x0002fa64
   13f34:	0002e93e 	.word	0x0002e93e
   13f38:	0002f918 	.word	0x0002f918
   13f3c:	0003329a 	.word	0x0003329a
   13f40:	000310cd 	.word	0x000310cd
   13f44:	0002ee9c 	.word	0x0002ee9c
   13f48:	0002fa79 	.word	0x0002fa79
   13f4c:	0002f5ab 	.word	0x0002f5ab
   13f50:	0002d411 	.word	0x0002d411
   13f54:	0002d416 	.word	0x0002d416
   13f58:	0002d40c 	.word	0x0002d40c
	shell->ctx->receive_state = state;
   13f5c:	2200      	movs	r2, #0
   13f5e:	7142      	strb	r2, [r0, #5]
			if (!z_flag_echo_get(shell)) {
   13f60:	68a2      	ldr	r2, [r4, #8]
   13f62:	f8d2 1260 	ldr.w	r1, [r2, #608]	; 0x260
   13f66:	0789      	lsls	r1, r1, #30
   13f68:	f57f aced 	bpl.w	13946 <shell_process+0x56>
			switch (data) {
   13f6c:	3b31      	subs	r3, #49	; 0x31
   13f6e:	2b1b      	cmp	r3, #27
   13f70:	f63f ace9 	bhi.w	13946 <shell_process+0x56>
   13f74:	a101      	add	r1, pc, #4	; (adr r1, 13f7c <shell_process+0x68c>)
   13f76:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   13f7a:	bf00      	nop
   13f7c:	00013ff9 	.word	0x00013ff9
   13f80:	00014005 	.word	0x00014005
   13f84:	00014019 	.word	0x00014019
   13f88:	00013fed 	.word	0x00013fed
   13f8c:	00013947 	.word	0x00013947
   13f90:	00013947 	.word	0x00013947
   13f94:	00013947 	.word	0x00013947
   13f98:	00013947 	.word	0x00013947
   13f9c:	00013947 	.word	0x00013947
   13fa0:	00013947 	.word	0x00013947
   13fa4:	00013947 	.word	0x00013947
   13fa8:	00013947 	.word	0x00013947
   13fac:	00013947 	.word	0x00013947
   13fb0:	00013947 	.word	0x00013947
   13fb4:	00013947 	.word	0x00013947
   13fb8:	00013947 	.word	0x00013947
   13fbc:	00013ec1 	.word	0x00013ec1
   13fc0:	00013eb7 	.word	0x00013eb7
   13fc4:	00013e7d 	.word	0x00013e7d
   13fc8:	00013e55 	.word	0x00013e55
   13fcc:	00013947 	.word	0x00013947
   13fd0:	00013ff1 	.word	0x00013ff1
   13fd4:	00013947 	.word	0x00013947
   13fd8:	00013ffd 	.word	0x00013ffd
   13fdc:	00013947 	.word	0x00013947
   13fe0:	00013947 	.word	0x00013947
   13fe4:	00013947 	.word	0x00013947
   13fe8:	00014009 	.word	0x00014009
	shell->ctx->receive_state = state;
   13fec:	2303      	movs	r3, #3
   13fee:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_end_move(shell);
   13ff0:	4620      	mov	r0, r4
   13ff2:	f015 ff3d 	bl	29e70 <z_shell_op_cursor_end_move>
		break;
   13ff6:	e4a6      	b.n	13946 <shell_process+0x56>
	shell->ctx->receive_state = state;
   13ff8:	2303      	movs	r3, #3
   13ffa:	7153      	strb	r3, [r2, #5]
		z_shell_op_cursor_home_move(shell);
   13ffc:	4620      	mov	r0, r4
   13ffe:	f015 ff31 	bl	29e64 <z_shell_op_cursor_home_move>
		break;
   14002:	e4a0      	b.n	13946 <shell_process+0x56>
	shell->ctx->receive_state = state;
   14004:	2303      	movs	r3, #3
   14006:	7153      	strb	r3, [r2, #5]
				bool status = z_flag_insert_mode_get(shell);
   14008:	68a0      	ldr	r0, [r4, #8]
	return sh->ctx->cfg.flags.insert_mode == 1;
   1400a:	f8d0 1260 	ldr.w	r1, [r0, #608]	; 0x260
   1400e:	f001 0101 	and.w	r1, r1, #1
				z_flag_insert_mode_set(shell, !status);
   14012:	f081 0101 	eor.w	r1, r1, #1
   14016:	e5b8      	b.n	13b8a <shell_process+0x29a>
	shell->ctx->receive_state = state;
   14018:	2303      	movs	r3, #3
   1401a:	7153      	strb	r3, [r2, #5]
				if (z_flag_echo_get(shell)) {
   1401c:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
   1401e:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   14022:	079b      	lsls	r3, r3, #30
   14024:	f57f ac8f 	bpl.w	13946 <shell_process+0x56>
   14028:	e519      	b.n	13a5e <shell_process+0x16e>
	shell->ctx->receive_state = state;
   1402a:	2300      	movs	r3, #0
   1402c:	e51c      	b.n	13a68 <shell_process+0x178>
   1402e:	bf00      	nop

00014030 <shell_init>:
{
   14030:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14034:	4688      	mov	r8, r1
   14036:	b089      	sub	sp, #36	; 0x24
   14038:	4615      	mov	r5, r2
   1403a:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(shell);
   1403c:	4604      	mov	r4, r0
   1403e:	b958      	cbnz	r0, 14058 <shell_init+0x28>
   14040:	494c      	ldr	r1, [pc, #304]	; (14174 <shell_init+0x144>)
   14042:	484d      	ldr	r0, [pc, #308]	; (14178 <shell_init+0x148>)
   14044:	4a4d      	ldr	r2, [pc, #308]	; (1417c <shell_init+0x14c>)
   14046:	f44f 63a9 	mov.w	r3, #1352	; 0x548
   1404a:	f014 fda6 	bl	28b9a <printk>
   1404e:	484b      	ldr	r0, [pc, #300]	; (1417c <shell_init+0x14c>)
   14050:	f44f 61a9 	mov.w	r1, #1352	; 0x548
   14054:	f014 ffe2 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx && shell->iface && shell->default_prompt);
   14058:	68a3      	ldr	r3, [r4, #8]
   1405a:	b11b      	cbz	r3, 14064 <shell_init+0x34>
   1405c:	6863      	ldr	r3, [r4, #4]
   1405e:	b10b      	cbz	r3, 14064 <shell_init+0x34>
   14060:	6823      	ldr	r3, [r4, #0]
   14062:	b95b      	cbnz	r3, 1407c <shell_init+0x4c>
   14064:	4946      	ldr	r1, [pc, #280]	; (14180 <shell_init+0x150>)
   14066:	4844      	ldr	r0, [pc, #272]	; (14178 <shell_init+0x148>)
   14068:	4a44      	ldr	r2, [pc, #272]	; (1417c <shell_init+0x14c>)
   1406a:	f240 5349 	movw	r3, #1353	; 0x549
   1406e:	f014 fd94 	bl	28b9a <printk>
   14072:	4842      	ldr	r0, [pc, #264]	; (1417c <shell_init+0x14c>)
   14074:	f240 5149 	movw	r1, #1353	; 0x549
   14078:	f014 ffd0 	bl	2901c <assert_post_action>
	if (shell->ctx->tid) {
   1407c:	68a3      	ldr	r3, [r4, #8]
   1407e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
   14082:	2b00      	cmp	r3, #0
   14084:	d173      	bne.n	1416e <shell_init+0x13e>
	__ASSERT_NO_MSG((sh->shell_flag == SHELL_FLAG_CRLF_DEFAULT) ||
   14086:	7c23      	ldrb	r3, [r4, #16]
   14088:	3b01      	subs	r3, #1
   1408a:	2b01      	cmp	r3, #1
   1408c:	d90b      	bls.n	140a6 <shell_init+0x76>
   1408e:	493d      	ldr	r1, [pc, #244]	; (14184 <shell_init+0x154>)
   14090:	4839      	ldr	r0, [pc, #228]	; (14178 <shell_init+0x148>)
   14092:	4a3a      	ldr	r2, [pc, #232]	; (1417c <shell_init+0x14c>)
   14094:	f240 439f 	movw	r3, #1183	; 0x49f
   14098:	f014 fd7f 	bl	28b9a <printk>
   1409c:	4837      	ldr	r0, [pc, #220]	; (1417c <shell_init+0x14c>)
   1409e:	f240 419f 	movw	r1, #1183	; 0x49f
   140a2:	f014 ffbb 	bl	2901c <assert_post_action>
__ssp_bos_icheck3(memset, void *, int)
   140a6:	2100      	movs	r1, #0
   140a8:	68a0      	ldr	r0, [r4, #8]
   140aa:	f44f 7244 	mov.w	r2, #784	; 0x310
   140ae:	f018 fdca 	bl	2cc46 <memset>
	sh->ctx->prompt = sh->default_prompt;
   140b2:	68a3      	ldr	r3, [r4, #8]
   140b4:	6822      	ldr	r2, [r4, #0]
	z_shell_history_init(shell->history);
   140b6:	68e0      	ldr	r0, [r4, #12]
	sh->ctx->prompt = sh->default_prompt;
   140b8:	601a      	str	r2, [r3, #0]
	z_shell_history_init(shell->history);
   140ba:	f016 f935 	bl	2a328 <z_shell_history_init>
	k_mutex_init(&sh->ctx->wr_mtx);
   140be:	68a0      	ldr	r0, [r4, #8]
   140c0:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
	return z_impl_k_mutex_init(mutex);
   140c4:	f018 fc0e 	bl	2c8e4 <z_impl_k_mutex_init>
   140c8:	f44f 792a 	mov.w	r9, #680	; 0x2a8
   140cc:	f44f 761a 	mov.w	r6, #616	; 0x268
		k_poll_signal_init(&sh->ctx->signals[i]);
   140d0:	68a0      	ldr	r0, [r4, #8]
   140d2:	4430      	add	r0, r6
	z_impl_k_poll_signal_init(sig);
   140d4:	f018 fd6b 	bl	2cbae <z_impl_k_poll_signal_init>
		k_poll_event_init(&sh->ctx->events[i],
   140d8:	68a0      	ldr	r0, [r4, #8]
   140da:	2200      	movs	r2, #0
   140dc:	1983      	adds	r3, r0, r6
   140de:	2101      	movs	r1, #1
   140e0:	4448      	add	r0, r9
   140e2:	3610      	adds	r6, #16
   140e4:	f013 fdda 	bl	27c9c <k_poll_event_init>
	for (int i = 0; i < SHELL_SIGNALS; i++) {
   140e8:	f5b6 7f2a 	cmp.w	r6, #680	; 0x2a8
   140ec:	f109 0914 	add.w	r9, r9, #20
   140f0:	d1ee      	bne.n	140d0 <shell_init+0xa0>
		sh->stats->log_lost_cnt = 0;
   140f2:	69a3      	ldr	r3, [r4, #24]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, tx_rdy, val, ret);
   140f4:	68a0      	ldr	r0, [r4, #8]
   140f6:	2600      	movs	r6, #0
   140f8:	2102      	movs	r1, #2
   140fa:	601e      	str	r6, [r3, #0]
   140fc:	f500 7019 	add.w	r0, r0, #612	; 0x264
   14100:	f015 fca3 	bl	29a4a <atomic_or>
	sh->ctx->vt100_ctx.cons.terminal_wid =
   14104:	68a3      	ldr	r3, [r4, #8]
	sh->ctx->vt100_ctx.cons.terminal_hei =
   14106:	4a20      	ldr	r2, [pc, #128]	; (14188 <shell_init+0x158>)
   14108:	629a      	str	r2, [r3, #40]	; 0x28
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
   1410a:	6818      	ldr	r0, [r3, #0]
   1410c:	f015 fcd3 	bl	29ab6 <z_shell_strlen>
   14110:	68a3      	ldr	r3, [r4, #8]
	int ret = sh->iface->api->init(sh->iface, transport_config,
   14112:	4a1e      	ldr	r2, [pc, #120]	; (1418c <shell_init+0x15c>)
	sh->ctx->vt100_ctx.cons.name_len = z_shell_strlen(sh->ctx->prompt);
   14114:	f883 002c 	strb.w	r0, [r3, #44]	; 0x2c
	int ret = sh->iface->api->init(sh->iface, transport_config,
   14118:	6860      	ldr	r0, [r4, #4]
	sh->ctx->cfg.flags = cfg_flags;
   1411a:	f366 0582 	bfi	r5, r6, #2, #1
   1411e:	f8c3 5260 	str.w	r5, [r3, #608]	; 0x260
	int ret = sh->iface->api->init(sh->iface, transport_config,
   14122:	6803      	ldr	r3, [r0, #0]
   14124:	4641      	mov	r1, r8
   14126:	681d      	ldr	r5, [r3, #0]
   14128:	4623      	mov	r3, r4
   1412a:	47a8      	blx	r5
	if (ret == 0) {
   1412c:	4605      	mov	r5, r0
   1412e:	b9d0      	cbnz	r0, 14166 <shell_init+0x136>
	shell->ctx->state = state;
   14130:	68a3      	ldr	r3, [r4, #8]
   14132:	2201      	movs	r2, #1
   14134:	711a      	strb	r2, [r3, #4]
	k_tid_t tid = k_thread_create(shell->thread,
   14136:	e9d4 010a 	ldrd	r0, r1, [r4, #40]	; 0x28
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1413a:	2200      	movs	r2, #0
   1413c:	2300      	movs	r3, #0
   1413e:	e9cd 2306 	strd	r2, r3, [sp, #24]
   14142:	230e      	movs	r3, #14
   14144:	9303      	str	r3, [sp, #12]
   14146:	9b10      	ldr	r3, [sp, #64]	; 0x40
   14148:	9504      	str	r5, [sp, #16]
   1414a:	e9cd 7301 	strd	r7, r3, [sp, #4]
   1414e:	9400      	str	r4, [sp, #0]
   14150:	4b0f      	ldr	r3, [pc, #60]	; (14190 <shell_init+0x160>)
   14152:	f44f 6200 	mov.w	r2, #2048	; 0x800
   14156:	f00f ffc7 	bl	240e8 <z_impl_k_thread_create>
	shell->ctx->tid = tid;
   1415a:	68a3      	ldr	r3, [r4, #8]
	k_thread_name_set(tid, shell->thread_name);
   1415c:	6a61      	ldr	r1, [r4, #36]	; 0x24
	shell->ctx->tid = tid;
   1415e:	f8c3 030c 	str.w	r0, [r3, #780]	; 0x30c
	return z_impl_k_thread_name_set(thread, str);
   14162:	f00f fdcf 	bl	23d04 <z_impl_k_thread_name_set>
}
   14166:	4628      	mov	r0, r5
   14168:	b009      	add	sp, #36	; 0x24
   1416a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EALREADY;
   1416e:	f06f 0577 	mvn.w	r5, #119	; 0x77
   14172:	e7f8      	b.n	14166 <shell_init+0x136>
   14174:	0002f940 	.word	0x0002f940
   14178:	0002e93e 	.word	0x0002e93e
   1417c:	0002f918 	.word	0x0002f918
   14180:	0002fa7f 	.word	0x0002fa7f
   14184:	0002fab3 	.word	0x0002fab3
   14188:	00500018 	.word	0x00500018
   1418c:	00029b69 	.word	0x00029b69
   14190:	0001422d 	.word	0x0001422d

00014194 <shell_start>:
{
   14194:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(shell);
   14196:	4604      	mov	r4, r0
   14198:	b958      	cbnz	r0, 141b2 <shell_start+0x1e>
   1419a:	491f      	ldr	r1, [pc, #124]	; (14218 <shell_start+0x84>)
   1419c:	481f      	ldr	r0, [pc, #124]	; (1421c <shell_start+0x88>)
   1419e:	4a20      	ldr	r2, [pc, #128]	; (14220 <shell_start+0x8c>)
   141a0:	f240 537b 	movw	r3, #1403	; 0x57b
   141a4:	f014 fcf9 	bl	28b9a <printk>
   141a8:	481d      	ldr	r0, [pc, #116]	; (14220 <shell_start+0x8c>)
   141aa:	f240 517b 	movw	r1, #1403	; 0x57b
   141ae:	f014 ff35 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(shell->ctx && shell->iface && shell->default_prompt);
   141b2:	68a3      	ldr	r3, [r4, #8]
   141b4:	b11b      	cbz	r3, 141be <shell_start+0x2a>
   141b6:	6863      	ldr	r3, [r4, #4]
   141b8:	b10b      	cbz	r3, 141be <shell_start+0x2a>
   141ba:	6823      	ldr	r3, [r4, #0]
   141bc:	b95b      	cbnz	r3, 141d6 <shell_start+0x42>
   141be:	4919      	ldr	r1, [pc, #100]	; (14224 <shell_start+0x90>)
   141c0:	4816      	ldr	r0, [pc, #88]	; (1421c <shell_start+0x88>)
   141c2:	4a17      	ldr	r2, [pc, #92]	; (14220 <shell_start+0x8c>)
   141c4:	f240 537c 	movw	r3, #1404	; 0x57c
   141c8:	f014 fce7 	bl	28b9a <printk>
   141cc:	4814      	ldr	r0, [pc, #80]	; (14220 <shell_start+0x8c>)
   141ce:	f240 517c 	movw	r1, #1404	; 0x57c
   141d2:	f014 ff23 	bl	2901c <assert_post_action>
	if (state_get(shell) != SHELL_STATE_INITIALIZED) {
   141d6:	68a0      	ldr	r0, [r4, #8]
   141d8:	7903      	ldrb	r3, [r0, #4]
   141da:	2b01      	cmp	r3, #1
   141dc:	d119      	bne.n	14212 <shell_start+0x7e>
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   141de:	f04f 32ff 	mov.w	r2, #4294967295
   141e2:	f04f 33ff 	mov.w	r3, #4294967295
   141e6:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   141ea:	f015 fc97 	bl	29b1c <k_mutex_lock.constprop.0>
		z_shell_vt100_color_set(shell, SHELL_NORMAL);
   141ee:	2108      	movs	r1, #8
   141f0:	4620      	mov	r0, r4
   141f2:	f000 fc7d 	bl	14af0 <z_shell_vt100_color_set>
	z_shell_raw_fprintf(shell->fprintf_ctx, "\n\n");
   141f6:	490c      	ldr	r1, [pc, #48]	; (14228 <shell_start+0x94>)
   141f8:	6960      	ldr	r0, [r4, #20]
   141fa:	f015 fc62 	bl	29ac2 <z_shell_raw_fprintf>
	state_set(shell, SHELL_STATE_ACTIVE);
   141fe:	4620      	mov	r0, r4
   14200:	f7ff f9ee 	bl	135e0 <state_set.constprop.0>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   14204:	68a0      	ldr	r0, [r4, #8]
   14206:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   1420a:	f015 fc52 	bl	29ab2 <k_mutex_unlock>
	return 0;
   1420e:	2000      	movs	r0, #0
}
   14210:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   14212:	f06f 0085 	mvn.w	r0, #133	; 0x85
   14216:	e7fb      	b.n	14210 <shell_start+0x7c>
   14218:	0002f940 	.word	0x0002f940
   1421c:	0002e93e 	.word	0x0002e93e
   14220:	0002f918 	.word	0x0002f918
   14224:	0002fa7f 	.word	0x0002fa7f
   14228:	0002e6f8 	.word	0x0002e6f8

0001422c <shell_thread>:
{
   1422c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14230:	4604      	mov	r4, r0
	err = shell->iface->api->enable(shell->iface, false);
   14232:	6840      	ldr	r0, [r0, #4]
   14234:	6803      	ldr	r3, [r0, #0]
{
   14236:	460e      	mov	r6, r1
	err = shell->iface->api->enable(shell->iface, false);
   14238:	689b      	ldr	r3, [r3, #8]
   1423a:	2100      	movs	r1, #0
{
   1423c:	4615      	mov	r5, r2
	err = shell->iface->api->enable(shell->iface, false);
   1423e:	4798      	blx	r3
	if (err != 0) {
   14240:	2800      	cmp	r0, #0
   14242:	d14c      	bne.n	142de <shell_thread+0xb2>
	if (IS_ENABLED(CONFIG_SHELL_LOG_BACKEND) && log_backend
   14244:	b126      	cbz	r6, 14250 <shell_thread+0x24>
		z_shell_log_backend_enable(shell->log_backend, (void *)shell,
   14246:	69e0      	ldr	r0, [r4, #28]
   14248:	462a      	mov	r2, r5
   1424a:	4621      	mov	r1, r4
   1424c:	f015 ff04 	bl	2a058 <z_shell_log_backend_enable>
	err = shell_start(shell);
   14250:	4620      	mov	r0, r4
   14252:	f7ff ff9f 	bl	14194 <shell_start>
	if (err != 0) {
   14256:	2800      	cmp	r0, #0
   14258:	d141      	bne.n	142de <shell_thread+0xb2>
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   1425a:	f8df 8094 	ldr.w	r8, [pc, #148]	; 142f0 <shell_thread+0xc4>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   1425e:	4f21      	ldr	r7, [pc, #132]	; (142e4 <shell_thread+0xb8>)
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   14260:	4e21      	ldr	r6, [pc, #132]	; (142e8 <shell_thread+0xbc>)
		err = k_poll(shell->ctx->events, SHELL_SIGNAL_TXDONE,
   14262:	68a0      	ldr	r0, [r4, #8]
   14264:	f500 702a 	add.w	r0, r0, #680	; 0x2a8
	return z_impl_k_poll(events, num_events, timeout);
   14268:	f04f 32ff 	mov.w	r2, #4294967295
   1426c:	f04f 33ff 	mov.w	r3, #4294967295
   14270:	2103      	movs	r1, #3
   14272:	f013 fd61 	bl	27d38 <z_impl_k_poll>
		if (err != 0) {
   14276:	4605      	mov	r5, r0
   14278:	68a0      	ldr	r0, [r4, #8]
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   1427a:	f04f 32ff 	mov.w	r2, #4294967295
   1427e:	f04f 33ff 	mov.w	r3, #4294967295
   14282:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
		if (err != 0) {
   14286:	b175      	cbz	r5, 142a6 <shell_thread+0x7a>
			k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   14288:	f015 fc48 	bl	29b1c <k_mutex_lock.constprop.0>
			z_shell_fprintf(shell, SHELL_ERROR,
   1428c:	4620      	mov	r0, r4
   1428e:	462b      	mov	r3, r5
   14290:	4a16      	ldr	r2, [pc, #88]	; (142ec <shell_thread+0xc0>)
   14292:	2101      	movs	r1, #1
   14294:	f000 fc6a 	bl	14b6c <z_shell_fprintf>
			k_mutex_unlock(&shell->ctx->wr_mtx);
   14298:	68a0      	ldr	r0, [r4, #8]
}
   1429a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_mutex_unlock(&shell->ctx->wr_mtx);
   1429e:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   142a2:	f015 bc06 	b.w	29ab2 <k_mutex_unlock>
		k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   142a6:	f015 fc39 	bl	29b1c <k_mutex_lock.constprop.0>
		if (shell->iface->api->update) {
   142aa:	6860      	ldr	r0, [r4, #4]
   142ac:	6803      	ldr	r3, [r0, #0]
   142ae:	695b      	ldr	r3, [r3, #20]
   142b0:	b103      	cbz	r3, 142b4 <shell_thread+0x88>
			shell->iface->api->update(shell->iface);
   142b2:	4798      	blx	r3
		shell_signal_handle(shell, SHELL_SIGNAL_KILL, kill_handler);
   142b4:	4642      	mov	r2, r8
   142b6:	4620      	mov	r0, r4
   142b8:	2102      	movs	r1, #2
   142ba:	f015 fbe4 	bl	29a86 <shell_signal_handle>
		shell_signal_handle(shell, SHELL_SIGNAL_RXRDY, shell_process);
   142be:	463a      	mov	r2, r7
   142c0:	4620      	mov	r0, r4
   142c2:	2100      	movs	r1, #0
   142c4:	f015 fbdf 	bl	29a86 <shell_signal_handle>
			shell_signal_handle(shell, SHELL_SIGNAL_LOG_MSG,
   142c8:	4620      	mov	r0, r4
   142ca:	4632      	mov	r2, r6
   142cc:	2101      	movs	r1, #1
   142ce:	f015 fbda 	bl	29a86 <shell_signal_handle>
		k_mutex_unlock(&shell->ctx->wr_mtx);
   142d2:	68a0      	ldr	r0, [r4, #8]
   142d4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   142d8:	f015 fbeb 	bl	29ab2 <k_mutex_unlock>
   142dc:	e7c1      	b.n	14262 <shell_thread+0x36>
}
   142de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   142e2:	bf00      	nop
   142e4:	000138f1 	.word	0x000138f1
   142e8:	00029b21 	.word	0x00029b21
   142ec:	0002fb0a 	.word	0x0002fb0a
   142f0:	000134a1 	.word	0x000134a1

000142f4 <shell_vfprintf>:
/* This function mustn't be used from shell context to avoid deadlock.
 * However it can be used in shell command handlers.
 */
void shell_vfprintf(const struct shell *sh, enum shell_vt100_color color,
		   const char *fmt, va_list args)
{
   142f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   142f8:	460e      	mov	r6, r1
   142fa:	4615      	mov	r5, r2
   142fc:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(sh);
   142fe:	4604      	mov	r4, r0
   14300:	b958      	cbnz	r0, 1431a <shell_vfprintf+0x26>
   14302:	494b      	ldr	r1, [pc, #300]	; (14430 <shell_vfprintf+0x13c>)
   14304:	484b      	ldr	r0, [pc, #300]	; (14434 <shell_vfprintf+0x140>)
   14306:	4a4c      	ldr	r2, [pc, #304]	; (14438 <shell_vfprintf+0x144>)
   14308:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
   1430c:	f014 fc45 	bl	28b9a <printk>
   14310:	4849      	ldr	r0, [pc, #292]	; (14438 <shell_vfprintf+0x144>)
   14312:	f44f 61b8 	mov.w	r1, #1472	; 0x5c0
   14316:	f014 fe81 	bl	2901c <assert_post_action>
	__ASSERT(!k_is_in_isr(), "Thread context required.");
   1431a:	f018 fab1 	bl	2c880 <k_is_in_isr>
   1431e:	b170      	cbz	r0, 1433e <shell_vfprintf+0x4a>
   14320:	4946      	ldr	r1, [pc, #280]	; (1443c <shell_vfprintf+0x148>)
   14322:	4a45      	ldr	r2, [pc, #276]	; (14438 <shell_vfprintf+0x144>)
   14324:	4843      	ldr	r0, [pc, #268]	; (14434 <shell_vfprintf+0x140>)
   14326:	f240 53c1 	movw	r3, #1473	; 0x5c1
   1432a:	f014 fc36 	bl	28b9a <printk>
   1432e:	4844      	ldr	r0, [pc, #272]	; (14440 <shell_vfprintf+0x14c>)
   14330:	f014 fc33 	bl	28b9a <printk>
   14334:	4840      	ldr	r0, [pc, #256]	; (14438 <shell_vfprintf+0x144>)
   14336:	f240 51c1 	movw	r1, #1473	; 0x5c1
   1433a:	f014 fe6f 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(sh->ctx);
   1433e:	68a3      	ldr	r3, [r4, #8]
   14340:	b95b      	cbnz	r3, 1435a <shell_vfprintf+0x66>
   14342:	4940      	ldr	r1, [pc, #256]	; (14444 <shell_vfprintf+0x150>)
   14344:	483b      	ldr	r0, [pc, #236]	; (14434 <shell_vfprintf+0x140>)
   14346:	4a3c      	ldr	r2, [pc, #240]	; (14438 <shell_vfprintf+0x144>)
   14348:	f240 53c2 	movw	r3, #1474	; 0x5c2
   1434c:	f014 fc25 	bl	28b9a <printk>
   14350:	4839      	ldr	r0, [pc, #228]	; (14438 <shell_vfprintf+0x144>)
   14352:	f240 51c2 	movw	r1, #1474	; 0x5c2
   14356:	f014 fe61 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(z_flag_cmd_ctx_get(sh) ||
   1435a:	f8d4 8008 	ldr.w	r8, [r4, #8]
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   1435e:	f8d8 3264 	ldr.w	r3, [r8, #612]	; 0x264
   14362:	0518      	lsls	r0, r3, #20
   14364:	d411      	bmi.n	1438a <shell_vfprintf+0x96>
	return z_impl_z_current_get();
   14366:	f012 fbad 	bl	26ac4 <z_impl_z_current_get>
   1436a:	f8d8 330c 	ldr.w	r3, [r8, #780]	; 0x30c
   1436e:	4283      	cmp	r3, r0
   14370:	d10b      	bne.n	1438a <shell_vfprintf+0x96>
   14372:	4935      	ldr	r1, [pc, #212]	; (14448 <shell_vfprintf+0x154>)
   14374:	482f      	ldr	r0, [pc, #188]	; (14434 <shell_vfprintf+0x140>)
   14376:	4a30      	ldr	r2, [pc, #192]	; (14438 <shell_vfprintf+0x144>)
   14378:	f240 53c3 	movw	r3, #1475	; 0x5c3
   1437c:	f014 fc0d 	bl	28b9a <printk>
   14380:	482d      	ldr	r0, [pc, #180]	; (14438 <shell_vfprintf+0x144>)
   14382:	f240 51c3 	movw	r1, #1475	; 0x5c3
   14386:	f014 fe49 	bl	2901c <assert_post_action>
			(k_current_get() != sh->ctx->tid));
	__ASSERT_NO_MSG(sh->fprintf_ctx);
   1438a:	6963      	ldr	r3, [r4, #20]
   1438c:	b95b      	cbnz	r3, 143a6 <shell_vfprintf+0xb2>
   1438e:	492f      	ldr	r1, [pc, #188]	; (1444c <shell_vfprintf+0x158>)
   14390:	4828      	ldr	r0, [pc, #160]	; (14434 <shell_vfprintf+0x140>)
   14392:	4a29      	ldr	r2, [pc, #164]	; (14438 <shell_vfprintf+0x144>)
   14394:	f240 53c5 	movw	r3, #1477	; 0x5c5
   14398:	f014 fbff 	bl	28b9a <printk>
   1439c:	4826      	ldr	r0, [pc, #152]	; (14438 <shell_vfprintf+0x144>)
   1439e:	f240 51c5 	movw	r1, #1477	; 0x5c5
   143a2:	f014 fe3b 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(fmt);
   143a6:	b95d      	cbnz	r5, 143c0 <shell_vfprintf+0xcc>
   143a8:	4929      	ldr	r1, [pc, #164]	; (14450 <shell_vfprintf+0x15c>)
   143aa:	4822      	ldr	r0, [pc, #136]	; (14434 <shell_vfprintf+0x140>)
   143ac:	4a22      	ldr	r2, [pc, #136]	; (14438 <shell_vfprintf+0x144>)
   143ae:	f240 53c6 	movw	r3, #1478	; 0x5c6
   143b2:	f014 fbf2 	bl	28b9a <printk>
   143b6:	4820      	ldr	r0, [pc, #128]	; (14438 <shell_vfprintf+0x144>)
   143b8:	f240 51c6 	movw	r1, #1478	; 0x5c6
   143bc:	f014 fe2e 	bl	2901c <assert_post_action>

	/* Sending a message to a non-active shell leads to a dead lock. */
	if (state_get(sh) != SHELL_STATE_ACTIVE) {
   143c0:	68a0      	ldr	r0, [r4, #8]
   143c2:	7903      	ldrb	r3, [r0, #4]
   143c4:	2b02      	cmp	r3, #2
   143c6:	d007      	beq.n	143d8 <shell_vfprintf+0xe4>
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
		z_shell_print_prompt_and_cmd(sh);
	}
	z_transport_buffer_flush(sh);
	k_mutex_unlock(&sh->ctx->wr_mtx);
}
   143c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, print_noinit, val, ret);
   143cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   143d0:	f500 7019 	add.w	r0, r0, #612	; 0x264
   143d4:	f015 bb39 	b.w	29a4a <atomic_or>
	k_mutex_lock(&sh->ctx->wr_mtx, K_FOREVER);
   143d8:	f04f 32ff 	mov.w	r2, #4294967295
   143dc:	f04f 33ff 	mov.w	r3, #4294967295
   143e0:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   143e4:	f015 fb9a 	bl	29b1c <k_mutex_lock.constprop.0>
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   143e8:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->ctx.flags.cmd_ctx == 1;
   143ea:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
   143ee:	0511      	lsls	r1, r2, #20
   143f0:	d404      	bmi.n	143fc <shell_vfprintf+0x108>
   143f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   143f4:	b913      	cbnz	r3, 143fc <shell_vfprintf+0x108>
		z_shell_cmd_line_erase(sh);
   143f6:	4620      	mov	r0, r4
   143f8:	f015 fd5b 	bl	29eb2 <z_shell_cmd_line_erase>
	z_shell_vfprintf(sh, color, fmt, args);
   143fc:	463b      	mov	r3, r7
   143fe:	462a      	mov	r2, r5
   14400:	4631      	mov	r1, r6
   14402:	4620      	mov	r0, r4
   14404:	f015 fd71 	bl	29eea <z_shell_vfprintf>
	if (!z_flag_cmd_ctx_get(sh) && !sh->ctx->bypass) {
   14408:	68a3      	ldr	r3, [r4, #8]
   1440a:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
   1440e:	0512      	lsls	r2, r2, #20
   14410:	d404      	bmi.n	1441c <shell_vfprintf+0x128>
   14412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   14414:	b913      	cbnz	r3, 1441c <shell_vfprintf+0x128>
		z_shell_print_prompt_and_cmd(sh);
   14416:	4620      	mov	r0, r4
   14418:	f000 fcea 	bl	14df0 <z_shell_print_prompt_and_cmd>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   1441c:	6960      	ldr	r0, [r4, #20]
   1441e:	f015 fbea 	bl	29bf6 <z_shell_fprintf_buffer_flush>
	k_mutex_unlock(&sh->ctx->wr_mtx);
   14422:	68a0      	ldr	r0, [r4, #8]
}
   14424:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	k_mutex_unlock(&sh->ctx->wr_mtx);
   14428:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   1442c:	f015 bb41 	b.w	29ab2 <k_mutex_unlock>
   14430:	00031e3a 	.word	0x00031e3a
   14434:	0002e93e 	.word	0x0002e93e
   14438:	0002f918 	.word	0x0002f918
   1443c:	0002fe1c 	.word	0x0002fe1c
   14440:	0002fb21 	.word	0x0002fb21
   14444:	0002fb3c 	.word	0x0002fb3c
   14448:	0002fb44 	.word	0x0002fb44
   1444c:	0002fb80 	.word	0x0002fb80
   14450:	0002fb90 	.word	0x0002fb90

00014454 <cmd_help>:
{
	sh->ctx->bypass = bypass;
}

static int cmd_help(const struct shell *shell, size_t argc, char **argv)
{
   14454:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

#if defined(CONFIG_SHELL_TAB)
	shell_print(shell, "Please press the <Tab> button to see all available "
   14456:	4a0d      	ldr	r2, [pc, #52]	; (1448c <cmd_help+0x38>)
{
   14458:	4604      	mov	r4, r0
	shell_print(shell, "Please press the <Tab> button to see all available "
   1445a:	2108      	movs	r1, #8
   1445c:	f015 fb8e 	bl	29b7c <shell_fprintf>
			   "commands.");
#endif

#if defined(CONFIG_SHELL_TAB_AUTOCOMPLETION)
	shell_print(shell,
   14460:	4620      	mov	r0, r4
   14462:	4a0b      	ldr	r2, [pc, #44]	; (14490 <cmd_help+0x3c>)
   14464:	2108      	movs	r1, #8
   14466:	f015 fb89 	bl	29b7c <shell_fprintf>
		"You can also use the <Tab> button to prompt or auto-complete"
		" all commands or its subcommands.");
#endif

#if defined(CONFIG_SHELL_HELP)
	shell_print(shell,
   1446a:	4620      	mov	r0, r4
   1446c:	4a09      	ldr	r2, [pc, #36]	; (14494 <cmd_help+0x40>)
   1446e:	2108      	movs	r1, #8
   14470:	f015 fb84 	bl	29b7c <shell_fprintf>
		"You can try to call commands with <-h> or <--help> parameter"
		" for more information.");
#endif

#if defined(CONFIG_SHELL_METAKEYS)
	shell_print(shell,
   14474:	4620      	mov	r0, r4
   14476:	4a08      	ldr	r2, [pc, #32]	; (14498 <cmd_help+0x44>)
   14478:	2108      	movs	r1, #8
   1447a:	f015 fb7f 	bl	29b7c <shell_fprintf>
		"Please refer to shell documentation for more details.");
#endif

	if (IS_ENABLED(CONFIG_SHELL_HELP)) {
		/* For NULL argument function will print all root commands */
		z_shell_help_subcmd_print(shell, NULL,
   1447e:	4620      	mov	r0, r4
   14480:	4a06      	ldr	r2, [pc, #24]	; (1449c <cmd_help+0x48>)
   14482:	2100      	movs	r1, #0
   14484:	f000 fde6 	bl	15054 <z_shell_help_subcmd_print>
			shell_print(shell, "  %s", entry->syntax);
		}
	}

	return 0;
}
   14488:	2000      	movs	r0, #0
   1448a:	bd10      	pop	{r4, pc}
   1448c:	0002fb94 	.word	0x0002fb94
   14490:	0002fbd2 	.word	0x0002fbd2
   14494:	0002fc31 	.word	0x0002fc31
   14498:	0002fc85 	.word	0x0002fc85
   1449c:	0002fd1f 	.word	0x0002fd1f

000144a0 <shell_hexdump_line>:
{
   144a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   144a4:	4616      	mov	r6, r2
   144a6:	461f      	mov	r7, r3
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
   144a8:	4a2b      	ldr	r2, [pc, #172]	; (14558 <shell_hexdump_line+0xb8>)
			shell_fprintf(shell, SHELL_NORMAL, "   ");
   144aa:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 14564 <shell_hexdump_line+0xc4>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
   144ae:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 14568 <shell_hexdump_line+0xc8>
			shell_fprintf(shell, SHELL_NORMAL, " ");
   144b2:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 1456c <shell_hexdump_line+0xcc>
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
   144b6:	460b      	mov	r3, r1
   144b8:	2108      	movs	r1, #8
{
   144ba:	4604      	mov	r4, r0
	shell_fprintf(shell, SHELL_NORMAL, "%08X: ", offset);
   144bc:	f015 fb5e 	bl	29b7c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
   144c0:	2500      	movs	r5, #0
		if (i < len) {
   144c2:	42af      	cmp	r7, r5
   144c4:	d934      	bls.n	14530 <shell_hexdump_line+0x90>
			shell_fprintf(shell, SHELL_NORMAL, "%02x ",
   144c6:	5d73      	ldrb	r3, [r6, r5]
   144c8:	464a      	mov	r2, r9
   144ca:	2108      	movs	r1, #8
   144cc:	4620      	mov	r0, r4
   144ce:	f015 fb55 	bl	29b7c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
   144d2:	3501      	adds	r5, #1
   144d4:	2d10      	cmp	r5, #16
   144d6:	d123      	bne.n	14520 <shell_hexdump_line+0x80>
	shell_fprintf(shell, SHELL_NORMAL, "|");
   144d8:	4a20      	ldr	r2, [pc, #128]	; (1455c <shell_hexdump_line+0xbc>)
			shell_fprintf(shell, SHELL_NORMAL, " ");
   144da:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1456c <shell_hexdump_line+0xcc>
				      isprint((int)c) ? c : '.');
   144de:	f8df 9090 	ldr.w	r9, [pc, #144]	; 14570 <shell_hexdump_line+0xd0>
			shell_fprintf(shell, SHELL_NORMAL, "%c",
   144e2:	f8df a090 	ldr.w	sl, [pc, #144]	; 14574 <shell_hexdump_line+0xd4>
	shell_fprintf(shell, SHELL_NORMAL, "|");
   144e6:	2108      	movs	r1, #8
   144e8:	4620      	mov	r0, r4
   144ea:	f015 fb47 	bl	29b7c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
   144ee:	2500      	movs	r5, #0
		if (i < len) {
   144f0:	42af      	cmp	r7, r5
   144f2:	d92b      	bls.n	1454c <shell_hexdump_line+0xac>
			char c = data[i];
   144f4:	5d73      	ldrb	r3, [r6, r5]
			shell_fprintf(shell, SHELL_NORMAL, "%c",
   144f6:	f813 2009 	ldrb.w	r2, [r3, r9]
   144fa:	f012 0f97 	tst.w	r2, #151	; 0x97
   144fe:	bf08      	it	eq
   14500:	232e      	moveq	r3, #46	; 0x2e
   14502:	4652      	mov	r2, sl
   14504:	2108      	movs	r1, #8
   14506:	4620      	mov	r0, r4
   14508:	f015 fb38 	bl	29b7c <shell_fprintf>
	for (i = 0; i < SHELL_HEXDUMP_BYTES_IN_LINE; i++) {
   1450c:	3501      	adds	r5, #1
   1450e:	2d10      	cmp	r5, #16
   14510:	d114      	bne.n	1453c <shell_hexdump_line+0x9c>
	shell_print(shell, "|");
   14512:	4620      	mov	r0, r4
   14514:	4a12      	ldr	r2, [pc, #72]	; (14560 <shell_hexdump_line+0xc0>)
}
   14516:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	shell_print(shell, "|");
   1451a:	2108      	movs	r1, #8
   1451c:	f015 bb2e 	b.w	29b7c <shell_fprintf>
		if (i > 0 && !(i % 8)) {
   14520:	076a      	lsls	r2, r5, #29
   14522:	d1ce      	bne.n	144c2 <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, " ");
   14524:	4652      	mov	r2, sl
   14526:	2108      	movs	r1, #8
   14528:	4620      	mov	r0, r4
   1452a:	f015 fb27 	bl	29b7c <shell_fprintf>
   1452e:	e7c8      	b.n	144c2 <shell_hexdump_line+0x22>
			shell_fprintf(shell, SHELL_NORMAL, "   ");
   14530:	4642      	mov	r2, r8
   14532:	2108      	movs	r1, #8
   14534:	4620      	mov	r0, r4
   14536:	f015 fb21 	bl	29b7c <shell_fprintf>
   1453a:	e7ca      	b.n	144d2 <shell_hexdump_line+0x32>
		if (i > 0 && !(i % 8)) {
   1453c:	076b      	lsls	r3, r5, #29
   1453e:	d1d7      	bne.n	144f0 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
   14540:	4642      	mov	r2, r8
   14542:	2108      	movs	r1, #8
   14544:	4620      	mov	r0, r4
   14546:	f015 fb19 	bl	29b7c <shell_fprintf>
   1454a:	e7d1      	b.n	144f0 <shell_hexdump_line+0x50>
			shell_fprintf(shell, SHELL_NORMAL, " ");
   1454c:	4642      	mov	r2, r8
   1454e:	2108      	movs	r1, #8
   14550:	4620      	mov	r0, r4
   14552:	f015 fb13 	bl	29b7c <shell_fprintf>
   14556:	e7d9      	b.n	1450c <shell_hexdump_line+0x6c>
   14558:	0002fd35 	.word	0x0002fd35
   1455c:	0002ee9f 	.word	0x0002ee9f
   14560:	0002fd3c 	.word	0x0002fd3c
   14564:	0002ee9b 	.word	0x0002ee9b
   14568:	0002ee95 	.word	0x0002ee95
   1456c:	0002ee9d 	.word	0x0002ee9d
   14570:	00034540 	.word	0x00034540
   14574:	0002fd9e 	.word	0x0002fd9e

00014578 <z_shell_fprintf_fmt>:
	return 0;
}

void z_shell_fprintf_fmt(const struct shell_fprintf *sh_fprintf,
			 const char *fmt, va_list args)
{
   14578:	b510      	push	{r4, lr}
   1457a:	4604      	mov	r4, r0
   1457c:	4613      	mov	r3, r2
	(void)cbvprintf(out_func, (void *)sh_fprintf, fmt, args);
   1457e:	460a      	mov	r2, r1
   14580:	4601      	mov	r1, r0
   14582:	4806      	ldr	r0, [pc, #24]	; (1459c <z_shell_fprintf_fmt+0x24>)
   14584:	f7fc fb74 	bl	10c70 <cbvprintf>

	if (sh_fprintf->ctrl_blk->autoflush) {
   14588:	6923      	ldr	r3, [r4, #16]
   1458a:	791b      	ldrb	r3, [r3, #4]
   1458c:	b123      	cbz	r3, 14598 <z_shell_fprintf_fmt+0x20>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   1458e:	4620      	mov	r0, r4
	}
}
   14590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_fprintf_buffer_flush(sh_fprintf);
   14594:	f015 bb2f 	b.w	29bf6 <z_shell_fprintf_buffer_flush>
}
   14598:	bd10      	pop	{r4, pc}
   1459a:	bf00      	nop
   1459c:	00029c0f 	.word	0x00029c0f

000145a0 <z_shell_make_argv>:
}


char z_shell_make_argv(size_t *argc, const char **argv, char *cmd,
		       uint8_t max_argc)
{
   145a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145a4:	461f      	mov	r7, r3
		c = *cmd;
		if (c == '\0') {
			break;
		}

		if (isspace((int) c)) {
   145a6:	f8df 8184 	ldr.w	r8, [pc, #388]	; 1472c <z_shell_make_argv+0x18c>
	*argc = 0;
   145aa:	2300      	movs	r3, #0
{
   145ac:	4605      	mov	r5, r0
   145ae:	460e      	mov	r6, r1
   145b0:	4614      	mov	r4, r2
	*argc = 0;
   145b2:	6003      	str	r3, [r0, #0]
	char quote = 0;
   145b4:	469a      	mov	sl, r3
	char quote = 0;
   145b6:	4699      	mov	r9, r3
		c = *cmd;
   145b8:	7823      	ldrb	r3, [r4, #0]
		if (c == '\0') {
   145ba:	2b00      	cmp	r3, #0
   145bc:	f000 80b1 	beq.w	14722 <z_shell_make_argv+0x182>
		if (isspace((int) c)) {
   145c0:	f813 3008 	ldrb.w	r3, [r3, r8]
   145c4:	f013 0308 	ands.w	r3, r3, #8
   145c8:	d002      	beq.n	145d0 <z_shell_make_argv+0x30>
			*cmd++ = '\0';
   145ca:	f804 9b01 	strb.w	r9, [r4], #1
			continue;
   145ce:	e7f3      	b.n	145b8 <z_shell_make_argv+0x18>
		}

		argv[(*argc)++] = cmd;
   145d0:	6829      	ldr	r1, [r5, #0]
   145d2:	1c4a      	adds	r2, r1, #1
		if (*argc == max_argc) {
   145d4:	42ba      	cmp	r2, r7
		argv[(*argc)++] = cmd;
   145d6:	602a      	str	r2, [r5, #0]
   145d8:	f846 4021 	str.w	r4, [r6, r1, lsl #2]
		if (*argc == max_argc) {
   145dc:	f000 80a1 	beq.w	14722 <z_shell_make_argv+0x182>
	char quote = 0;
   145e0:	469a      	mov	sl, r3
		c = *cmd;
   145e2:	f894 b000 	ldrb.w	fp, [r4]
		if (c == '\0') {
   145e6:	f1bb 0f00 	cmp.w	fp, #0
   145ea:	d0e5      	beq.n	145b8 <z_shell_make_argv+0x18>
		if (!quote) {
   145ec:	f1ba 0f00 	cmp.w	sl, #0
   145f0:	f040 8083 	bne.w	146fa <z_shell_make_argv+0x15a>
			switch (c) {
   145f4:	f1bb 0f27 	cmp.w	fp, #39	; 0x27
   145f8:	d006      	beq.n	14608 <z_shell_make_argv+0x68>
   145fa:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
   145fe:	f000 8084 	beq.w	1470a <z_shell_make_argv+0x16a>
   14602:	f1bb 0f22 	cmp.w	fp, #34	; 0x22
   14606:	d171      	bne.n	146ec <z_shell_make_argv+0x14c>
				memmove(cmd, cmd + 1,
   14608:	4620      	mov	r0, r4
   1460a:	f015 fb1c 	bl	29c46 <z_shell_strlen>
__ssp_bos_icheck3(memmove, void *, const void *)
   1460e:	1c61      	adds	r1, r4, #1
   14610:	4602      	mov	r2, r0
   14612:	4620      	mov	r0, r4
   14614:	f018 fafd 	bl	2cc12 <memmove>
				continue;
   14618:	46da      	mov	sl, fp
   1461a:	e7e2      	b.n	145e2 <z_shell_make_argv+0x42>
			memmove(cmd, cmd + 1, z_shell_strlen(cmd));
   1461c:	4620      	mov	r0, r4
   1461e:	f015 fb12 	bl	29c46 <z_shell_strlen>
   14622:	1c61      	adds	r1, r4, #1
   14624:	4602      	mov	r2, r0
   14626:	4620      	mov	r0, r4
   14628:	f018 faf3 	bl	2cc12 <memmove>
			quote = 0;
   1462c:	f04f 0a00 	mov.w	sl, #0
			continue;
   14630:	e7d7      	b.n	145e2 <z_shell_make_argv+0x42>
			if (t == '0') {
   14632:	2930      	cmp	r1, #48	; 0x30
   14634:	d126      	bne.n	14684 <z_shell_make_argv+0xe4>
				uint8_t v = 0U;
   14636:	f04f 0b00 	mov.w	fp, #0
   1463a:	2302      	movs	r3, #2
					t = *(cmd + i);
   1463c:	5ce1      	ldrb	r1, [r4, r3]
					if (t >= '0' && t <= '7') {
   1463e:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
   14642:	fa5f fc80 	uxtb.w	ip, r0
   14646:	f1bc 0f07 	cmp.w	ip, #7
   1464a:	b2da      	uxtb	r2, r3
   1464c:	d818      	bhi.n	14680 <z_shell_make_argv+0xe0>
						v = (v << 3) | (t - '0');
   1464e:	3301      	adds	r3, #1
   14650:	ea40 0bcb 	orr.w	fp, r0, fp, lsl #3
				for (i = 2U; i < (2 + 3); i++) {
   14654:	2b05      	cmp	r3, #5
						v = (v << 3) | (t - '0');
   14656:	fa5f fb8b 	uxtb.w	fp, fp
				for (i = 2U; i < (2 + 3); i++) {
   1465a:	d1ef      	bne.n	1463c <z_shell_make_argv+0x9c>
   1465c:	461a      	mov	r2, r3
					memmove(cmd, cmd + (i - 1),
   1465e:	1e51      	subs	r1, r2, #1
   14660:	4421      	add	r1, r4
   14662:	4620      	mov	r0, r4
   14664:	9201      	str	r2, [sp, #4]
   14666:	9100      	str	r1, [sp, #0]
   14668:	f015 faed 	bl	29c46 <z_shell_strlen>
   1466c:	9a01      	ldr	r2, [sp, #4]
   1466e:	3002      	adds	r0, #2
   14670:	1a82      	subs	r2, r0, r2
   14672:	4620      	mov	r0, r4
   14674:	9900      	ldr	r1, [sp, #0]
   14676:	f018 facc 	bl	2cc12 <memmove>
					*cmd++ = v;
   1467a:	f804 bb01 	strb.w	fp, [r4], #1
					continue;
   1467e:	e7b0      	b.n	145e2 <z_shell_make_argv+0x42>
				if (i > 2) {
   14680:	2a02      	cmp	r2, #2
   14682:	d1ec      	bne.n	1465e <z_shell_make_argv+0xbe>
			if (t == 'x') {
   14684:	2978      	cmp	r1, #120	; 0x78
   14686:	d136      	bne.n	146f6 <z_shell_make_argv+0x156>
				uint8_t v = 0U;
   14688:	f04f 0b00 	mov.w	fp, #0
   1468c:	2302      	movs	r3, #2
					t = *(cmd + i);
   1468e:	5ce2      	ldrb	r2, [r4, r3]
					if (t >= '0' && t <= '9') {
   14690:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
   14694:	fa5f fc81 	uxtb.w	ip, r1
   14698:	f1bc 0f09 	cmp.w	ip, #9
   1469c:	b2d8      	uxtb	r0, r3
   1469e:	d813      	bhi.n	146c8 <z_shell_make_argv+0x128>
						v = (v << 4) | (t - '0');
   146a0:	ea41 120b 	orr.w	r2, r1, fp, lsl #4
				for (i = 2U; i < (2 + 2); i++) {
   146a4:	2b03      	cmp	r3, #3
						v = (v << 4) | (t - 'A' + 10);
   146a6:	fa5f fb82 	uxtb.w	fp, r2
				for (i = 2U; i < (2 + 2); i++) {
   146aa:	d10b      	bne.n	146c4 <z_shell_make_argv+0x124>
   146ac:	2304      	movs	r3, #4
					memmove(cmd, cmd + (i - 1),
   146ae:	1e59      	subs	r1, r3, #1
   146b0:	4421      	add	r1, r4
   146b2:	4620      	mov	r0, r4
   146b4:	9301      	str	r3, [sp, #4]
   146b6:	9100      	str	r1, [sp, #0]
   146b8:	f015 fac5 	bl	29c46 <z_shell_strlen>
   146bc:	9b01      	ldr	r3, [sp, #4]
   146be:	1c82      	adds	r2, r0, #2
   146c0:	1ad2      	subs	r2, r2, r3
   146c2:	e7d6      	b.n	14672 <z_shell_make_argv+0xd2>
   146c4:	2303      	movs	r3, #3
   146c6:	e7e2      	b.n	1468e <z_shell_make_argv+0xee>
					} else if ((t >= 'a') &&
   146c8:	f1a2 0161 	sub.w	r1, r2, #97	; 0x61
   146cc:	2905      	cmp	r1, #5
   146ce:	d803      	bhi.n	146d8 <z_shell_make_argv+0x138>
						v = (v << 4) | (t - 'a' + 10);
   146d0:	3a57      	subs	r2, #87	; 0x57
						v = (v << 4) | (t - 'A' + 10);
   146d2:	ea42 120b 	orr.w	r2, r2, fp, lsl #4
   146d6:	e7e5      	b.n	146a4 <z_shell_make_argv+0x104>
					} else if ((t >= 'A') && (t <= 'F')) {
   146d8:	f1a2 0141 	sub.w	r1, r2, #65	; 0x41
   146dc:	2905      	cmp	r1, #5
   146de:	d801      	bhi.n	146e4 <z_shell_make_argv+0x144>
						v = (v << 4) | (t - 'A' + 10);
   146e0:	3a37      	subs	r2, #55	; 0x37
   146e2:	e7f6      	b.n	146d2 <z_shell_make_argv+0x132>
				if (i > 2) {
   146e4:	2802      	cmp	r0, #2
   146e6:	d006      	beq.n	146f6 <z_shell_make_argv+0x156>
   146e8:	2303      	movs	r3, #3
   146ea:	e7e0      	b.n	146ae <z_shell_make_argv+0x10e>
		if (!quote && isspace((int) c)) {
   146ec:	f818 300b 	ldrb.w	r3, [r8, fp]
   146f0:	071b      	lsls	r3, r3, #28
   146f2:	f53f af61 	bmi.w	145b8 <z_shell_make_argv+0x18>
		cmd += 1;
   146f6:	3401      	adds	r4, #1
   146f8:	e773      	b.n	145e2 <z_shell_make_argv+0x42>
		if (quote == c) {
   146fa:	45d3      	cmp	fp, sl
   146fc:	d08e      	beq.n	1461c <z_shell_make_argv+0x7c>
		if (quote && c == '\\') {
   146fe:	f1bb 0f5c 	cmp.w	fp, #92	; 0x5c
   14702:	d1f8      	bne.n	146f6 <z_shell_make_argv+0x156>
   14704:	7861      	ldrb	r1, [r4, #1]
			if (t == quote) {
   14706:	458a      	cmp	sl, r1
   14708:	d193      	bne.n	14632 <z_shell_make_argv+0x92>
				memmove(cmd, cmd + 1,
   1470a:	4620      	mov	r0, r4
   1470c:	f015 fa9b 	bl	29c46 <z_shell_strlen>
   14710:	f104 0b01 	add.w	fp, r4, #1
   14714:	4602      	mov	r2, r0
   14716:	4659      	mov	r1, fp
   14718:	4620      	mov	r0, r4
   1471a:	f018 fa7a 	bl	2cc12 <memmove>
				continue;
   1471e:	465c      	mov	r4, fp
   14720:	e75f      	b.n	145e2 <z_shell_make_argv+0x42>
		}
		quote = make_argv(&cmd, c);
	} while (true);

	return quote;
}
   14722:	4650      	mov	r0, sl
   14724:	b003      	add	sp, #12
   14726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1472a:	bf00      	nop
   1472c:	00034540 	.word	0x00034540

00014730 <z_shell_cmd_get>:

const struct shell_static_entry *z_shell_cmd_get(
					const struct shell_static_entry *parent,
					size_t idx,
					struct shell_static_entry *dloc)
{
   14730:	b570      	push	{r4, r5, r6, lr}
   14732:	460d      	mov	r5, r1
   14734:	4614      	mov	r4, r2
	const struct shell_static_entry *res = NULL;

	if (parent == NULL) {
   14736:	4606      	mov	r6, r0
   14738:	b950      	cbnz	r0, 14750 <z_shell_cmd_get+0x20>
	return ((uint8_t *)__shell_root_cmds_end -
   1473a:	4915      	ldr	r1, [pc, #84]	; (14790 <z_shell_cmd_get+0x60>)
   1473c:	4b15      	ldr	r3, [pc, #84]	; (14794 <z_shell_cmd_get+0x64>)
   1473e:	1a5b      	subs	r3, r3, r1
		return  (idx < shell_root_cmd_count()) ?
				shell_root_cmd_get(idx)->u.entry : NULL;
   14740:	ebb5 0fd3 	cmp.w	r5, r3, lsr #3
   14744:	d21c      	bcs.n	14780 <z_shell_cmd_get+0x50>
   14746:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   1474a:	684c      	ldr	r4, [r1, #4]
			}
		}
	}

	return res;
}
   1474c:	4620      	mov	r0, r4
   1474e:	bd70      	pop	{r4, r5, r6, pc}
	__ASSERT_NO_MSG(dloc != NULL);
   14750:	b95a      	cbnz	r2, 1476a <z_shell_cmd_get+0x3a>
   14752:	4911      	ldr	r1, [pc, #68]	; (14798 <z_shell_cmd_get+0x68>)
   14754:	4811      	ldr	r0, [pc, #68]	; (1479c <z_shell_cmd_get+0x6c>)
   14756:	4a12      	ldr	r2, [pc, #72]	; (147a0 <z_shell_cmd_get+0x70>)
   14758:	f240 1303 	movw	r3, #259	; 0x103
   1475c:	f014 fa1d 	bl	28b9a <printk>
   14760:	480f      	ldr	r0, [pc, #60]	; (147a0 <z_shell_cmd_get+0x70>)
   14762:	f240 1103 	movw	r1, #259	; 0x103
   14766:	f014 fc59 	bl	2901c <assert_post_action>
	if (parent->subcmd) {
   1476a:	68b2      	ldr	r2, [r6, #8]
   1476c:	b142      	cbz	r2, 14780 <z_shell_cmd_get+0x50>
		if (parent->subcmd->is_dynamic) {
   1476e:	6853      	ldr	r3, [r2, #4]
   14770:	7812      	ldrb	r2, [r2, #0]
   14772:	b13a      	cbz	r2, 14784 <z_shell_cmd_get+0x54>
			parent->subcmd->u.dynamic_get(idx, dloc);
   14774:	4621      	mov	r1, r4
   14776:	4628      	mov	r0, r5
   14778:	4798      	blx	r3
			if (dloc->syntax != NULL) {
   1477a:	6823      	ldr	r3, [r4, #0]
   1477c:	2b00      	cmp	r3, #0
   1477e:	d1e5      	bne.n	1474c <z_shell_cmd_get+0x1c>
	const struct shell_static_entry *res = NULL;
   14780:	2400      	movs	r4, #0
   14782:	e7e3      	b.n	1474c <z_shell_cmd_get+0x1c>
			if (parent->subcmd->u.entry[idx].syntax != NULL) {
   14784:	2114      	movs	r1, #20
   14786:	434d      	muls	r5, r1
   14788:	195c      	adds	r4, r3, r5
   1478a:	595b      	ldr	r3, [r3, r5]
   1478c:	e7f6      	b.n	1477c <z_shell_cmd_get+0x4c>
   1478e:	bf00      	nop
   14790:	0002d308 	.word	0x0002d308
   14794:	0002d378 	.word	0x0002d378
   14798:	0002fd86 	.word	0x0002fd86
   1479c:	0002e93e 	.word	0x0002e93e
   147a0:	0002fd58 	.word	0x0002fd58

000147a4 <z_shell_spaces_trim>:




void z_shell_spaces_trim(char *str)
{
   147a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   147a8:	4606      	mov	r6, r0
	uint16_t len = z_shell_strlen(str);
   147aa:	f015 fa4c 	bl	29c46 <z_shell_strlen>
   147ae:	4605      	mov	r5, r0
	uint16_t shift = 0U;

	if (!str) {
   147b0:	bb56      	cbnz	r6, 14808 <z_shell_spaces_trim+0x64>

				break;
			}
		}
	}
}
   147b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				if (shift > 0) {
   147b6:	b14c      	cbz	r4, 147cc <z_shell_spaces_trim+0x28>
					memmove(&str[i + 1],
   147b8:	1c6a      	adds	r2, r5, #1
   147ba:	b29b      	uxth	r3, r3
   147bc:	3001      	adds	r0, #1
   147be:	1ad2      	subs	r2, r2, r3
   147c0:	4430      	add	r0, r6
   147c2:	f018 fa26 	bl	2cc12 <memmove>
					len -= shift;
   147c6:	1b2d      	subs	r5, r5, r4
   147c8:	b2ad      	uxth	r5, r5
					shift = 0U;
   147ca:	464c      	mov	r4, r9
	for (uint16_t i = 0; i < len - 1; i++) {
   147cc:	3701      	adds	r7, #1
   147ce:	b2bb      	uxth	r3, r7
   147d0:	1e6a      	subs	r2, r5, #1
   147d2:	4293      	cmp	r3, r2
   147d4:	4618      	mov	r0, r3
   147d6:	daec      	bge.n	147b2 <z_shell_spaces_trim+0xe>
		if (isspace((int)str[i])) {
   147d8:	5c32      	ldrb	r2, [r6, r0]
   147da:	f812 2008 	ldrb.w	r2, [r2, r8]
   147de:	0712      	lsls	r2, r2, #28
   147e0:	d5f4      	bpl.n	147cc <z_shell_spaces_trim+0x28>
			for (uint16_t j = i + 1; j < len; j++) {
   147e2:	3301      	adds	r3, #1
   147e4:	b29b      	uxth	r3, r3
   147e6:	b29a      	uxth	r2, r3
   147e8:	4295      	cmp	r5, r2
   147ea:	d9ef      	bls.n	147cc <z_shell_spaces_trim+0x28>
				if (isspace((int)str[j])) {
   147ec:	5cf2      	ldrb	r2, [r6, r3]
   147ee:	f818 2002 	ldrb.w	r2, [r8, r2]
   147f2:	f012 0908 	ands.w	r9, r2, #8
   147f6:	eb06 0103 	add.w	r1, r6, r3
   147fa:	f103 0c01 	add.w	ip, r3, #1
   147fe:	d0da      	beq.n	147b6 <z_shell_spaces_trim+0x12>
					shift++;
   14800:	3401      	adds	r4, #1
   14802:	b2a4      	uxth	r4, r4
   14804:	4663      	mov	r3, ip
   14806:	e7ee      	b.n	147e6 <z_shell_spaces_trim+0x42>
   14808:	2700      	movs	r7, #0
		if (isspace((int)str[i])) {
   1480a:	f8df 8008 	ldr.w	r8, [pc, #8]	; 14814 <z_shell_spaces_trim+0x70>
	uint16_t shift = 0U;
   1480e:	463c      	mov	r4, r7
   14810:	e7dd      	b.n	147ce <z_shell_spaces_trim+0x2a>
   14812:	bf00      	nop
   14814:	00034540 	.word	0x00034540

00014818 <z_shell_cmd_trim>:
		*buff_len = *buff_len - i;
	}
}

void z_shell_cmd_trim(const struct shell *shell)
{
   14818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   1481a:	6884      	ldr	r4, [r0, #8]
	if (buff[0] == '\0') {
   1481c:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
{
   14820:	4605      	mov	r5, r0
	if (buff[0] == '\0') {
   14822:	b953      	cbnz	r3, 1483a <z_shell_cmd_trim+0x22>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   14824:	68ab      	ldr	r3, [r5, #8]
   14826:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   14828:	87da      	strh	r2, [r3, #62]	; 0x3e
}
   1482a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		*buff_len -= 1U;
   1482c:	3a01      	subs	r2, #1
   1482e:	b292      	uxth	r2, r2
   14830:	87a2      	strh	r2, [r4, #60]	; 0x3c
		if (*buff_len == 0U) {
   14832:	b932      	cbnz	r2, 14842 <z_shell_cmd_trim+0x2a>
			buff[0] = '\0';
   14834:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
			return;
   14838:	e7f4      	b.n	14824 <z_shell_cmd_trim+0xc>
	while (isspace((int) buff[*buff_len - 1U])) {
   1483a:	4911      	ldr	r1, [pc, #68]	; (14880 <z_shell_cmd_trim+0x68>)
	buffer_trim(shell->ctx->cmd_buff, &shell->ctx->cmd_buff_len);
   1483c:	f104 0042 	add.w	r0, r4, #66	; 0x42
   14840:	460e      	mov	r6, r1
	while (isspace((int) buff[*buff_len - 1U])) {
   14842:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   14844:	1883      	adds	r3, r0, r2
   14846:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   1484a:	5c5b      	ldrb	r3, [r3, r1]
   1484c:	f013 0308 	ands.w	r3, r3, #8
   14850:	d1ec      	bne.n	1482c <z_shell_cmd_trim+0x14>
	buff[*buff_len] = '\0';
   14852:	5483      	strb	r3, [r0, r2]
	while (isspace((int) buff[i++])) {
   14854:	b29f      	uxth	r7, r3
   14856:	fa10 f183 	uxtah	r1, r0, r3
   1485a:	f810 c007 	ldrb.w	ip, [r0, r7]
   1485e:	f816 c00c 	ldrb.w	ip, [r6, ip]
   14862:	f01c 0f08 	tst.w	ip, #8
   14866:	f103 0301 	add.w	r3, r3, #1
   1486a:	d1f3      	bne.n	14854 <z_shell_cmd_trim+0x3c>
	if (--i > 0) {
   1486c:	2f00      	cmp	r7, #0
   1486e:	d0d9      	beq.n	14824 <z_shell_cmd_trim+0xc>
		memmove(buff, buff + i, (*buff_len + 1U) - i); /* +1 for '\0' */
   14870:	8fa6      	ldrh	r6, [r4, #60]	; 0x3c
   14872:	1c73      	adds	r3, r6, #1
   14874:	1bda      	subs	r2, r3, r7
		*buff_len = *buff_len - i;
   14876:	1bf6      	subs	r6, r6, r7
   14878:	f018 f9cb 	bl	2cc12 <memmove>
   1487c:	87a6      	strh	r6, [r4, #60]	; 0x3c
   1487e:	e7d1      	b.n	14824 <z_shell_cmd_trim+0xc>
   14880:	00034540 	.word	0x00034540

00014884 <z_clear_eos>:
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   14884:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   14886:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_CLEAREOS);
   1488a:	069b      	lsls	r3, r3, #26
   1488c:	d503      	bpl.n	14896 <z_clear_eos+0x12>
   1488e:	4902      	ldr	r1, [pc, #8]	; (14898 <z_clear_eos+0x14>)
   14890:	6940      	ldr	r0, [r0, #20]
   14892:	f015 ba8e 	b.w	29db2 <z_shell_raw_fprintf>
}
   14896:	4770      	bx	lr
   14898:	0002d41c 	.word	0x0002d41c

0001489c <z_shell_op_cursor_vert_move>:
#include "shell_ops.h"

#define CMD_CURSOR_LEN 8
void z_shell_op_cursor_vert_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'A' : 'B';
   1489c:	1e0a      	subs	r2, r1, #0
   1489e:	dc0d      	bgt.n	148bc <z_shell_op_cursor_vert_move+0x20>

	if (delta == 0) {
   148a0:	d00e      	beq.n	148c0 <z_shell_op_cursor_vert_move+0x24>
	char dir = delta > 0 ? 'A' : 'B';
   148a2:	2342      	movs	r3, #66	; 0x42

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
   148a4:	6881      	ldr	r1, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   148a6:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
   148aa:	0689      	lsls	r1, r1, #26
   148ac:	d508      	bpl.n	148c0 <z_shell_op_cursor_vert_move+0x24>
   148ae:	2a00      	cmp	r2, #0
   148b0:	4904      	ldr	r1, [pc, #16]	; (148c4 <z_shell_op_cursor_vert_move+0x28>)
   148b2:	6940      	ldr	r0, [r0, #20]
   148b4:	bfb8      	it	lt
   148b6:	4252      	neglt	r2, r2
   148b8:	f015 ba7b 	b.w	29db2 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'A' : 'B';
   148bc:	2341      	movs	r3, #65	; 0x41
   148be:	e7f1      	b.n	148a4 <z_shell_op_cursor_vert_move+0x8>
}
   148c0:	4770      	bx	lr
   148c2:	bf00      	nop
   148c4:	0002fd9a 	.word	0x0002fd9a

000148c8 <z_shell_op_cursor_horiz_move>:

void z_shell_op_cursor_horiz_move(const struct shell *shell, int32_t delta)
{
	char dir = delta > 0 ? 'C' : 'D';
   148c8:	1e0a      	subs	r2, r1, #0
   148ca:	dc0d      	bgt.n	148e8 <z_shell_op_cursor_horiz_move+0x20>

	if (delta == 0) {
   148cc:	d00e      	beq.n	148ec <z_shell_op_cursor_horiz_move+0x24>
	char dir = delta > 0 ? 'C' : 'D';
   148ce:	2344      	movs	r3, #68	; 0x44

	if (delta < 0) {
		delta = -delta;
	}

	Z_SHELL_VT100_CMD(shell, "\e[%d%c", delta, dir);
   148d0:	6881      	ldr	r1, [r0, #8]
   148d2:	f8d1 1260 	ldr.w	r1, [r1, #608]	; 0x260
   148d6:	0689      	lsls	r1, r1, #26
   148d8:	d508      	bpl.n	148ec <z_shell_op_cursor_horiz_move+0x24>
   148da:	2a00      	cmp	r2, #0
   148dc:	4904      	ldr	r1, [pc, #16]	; (148f0 <z_shell_op_cursor_horiz_move+0x28>)
   148de:	6940      	ldr	r0, [r0, #20]
   148e0:	bfb8      	it	lt
   148e2:	4252      	neglt	r2, r2
   148e4:	f015 ba65 	b.w	29db2 <z_shell_raw_fprintf>
	char dir = delta > 0 ? 'C' : 'D';
   148e8:	2343      	movs	r3, #67	; 0x43
   148ea:	e7f1      	b.n	148d0 <z_shell_op_cursor_horiz_move+0x8>
}
   148ec:	4770      	bx	lr
   148ee:	bf00      	nop
   148f0:	0002fd9a 	.word	0x0002fd9a

000148f4 <z_shell_op_cond_next_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
}

void z_shell_op_cond_next_line(const struct shell *shell)
{
   148f4:	b510      	push	{r4, lr}
   148f6:	4604      	mov	r4, r0
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   148f8:	f015 fa7c 	bl	29df4 <z_shell_cursor_in_empty_line>
   148fc:	b128      	cbz	r0, 1490a <z_shell_op_cond_next_line+0x16>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   148fe:	6960      	ldr	r0, [r4, #20]
   14900:	4905      	ldr	r1, [pc, #20]	; (14918 <z_shell_op_cond_next_line+0x24>)
		z_cursor_next_line_move(shell);
	}
}
   14902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14906:	f015 ba54 	b.w	29db2 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell) || full_line_cmd(shell)) {
   1490a:	f104 0008 	add.w	r0, r4, #8
   1490e:	f015 fa5d 	bl	29dcc <full_line_cmd.isra.0>
   14912:	2800      	cmp	r0, #0
   14914:	d1f3      	bne.n	148fe <z_shell_op_cond_next_line+0xa>
}
   14916:	bd10      	pop	{r4, pc}
   14918:	0003329a 	.word	0x0003329a

0001491c <z_shell_op_cursor_position_synchronize>:

void z_shell_op_cursor_position_synchronize(const struct shell *shell)
{
   1491c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   14920:	4606      	mov	r6, r0
{
   14922:	4605      	mov	r5, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   14924:	f856 4f08 	ldr.w	r4, [r6, #8]!
	bool last_line;

	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   14928:	f104 0020 	add.w	r0, r4, #32
   1492c:	8fa2      	ldrh	r2, [r4, #60]	; 0x3c
   1492e:	8fe1      	ldrh	r1, [r4, #62]	; 0x3e
   14930:	f015 f9a9 	bl	29c86 <z_shell_multiline_data_calc>
	last_line = (cons->cur_y == cons->cur_y_end);

	/* In case cursor reaches the bottom line of a terminal, it will
	 * be moved to the next line.
	 */
	if (full_line_cmd(shell)) {
   14934:	4630      	mov	r0, r6
	last_line = (cons->cur_y == cons->cur_y_end);
   14936:	f8b4 8024 	ldrh.w	r8, [r4, #36]	; 0x24
   1493a:	8ce7      	ldrh	r7, [r4, #38]	; 0x26
	if (full_line_cmd(shell)) {
   1493c:	f015 fa46 	bl	29dcc <full_line_cmd.isra.0>
   14940:	b118      	cbz	r0, 1494a <z_shell_op_cursor_position_synchronize+0x2e>
   14942:	490a      	ldr	r1, [pc, #40]	; (1496c <z_shell_op_cursor_position_synchronize+0x50>)
   14944:	6968      	ldr	r0, [r5, #20]
   14946:	f015 fa34 	bl	29db2 <z_shell_raw_fprintf>
		z_cursor_next_line_move(shell);
	}

	if (last_line) {
   1494a:	45b8      	cmp	r8, r7
   1494c:	d107      	bne.n	1495e <z_shell_op_cursor_position_synchronize+0x42>
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
							       cons->cur_x_end);
	} else {
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   1494e:	8c21      	ldrh	r1, [r4, #32]
							       cons->cur_x_end);
   14950:	8c63      	ldrh	r3, [r4, #34]	; 0x22
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   14952:	4628      	mov	r0, r5
   14954:	1ac9      	subs	r1, r1, r3
	}
}
   14956:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		z_shell_op_cursor_horiz_move(shell, cons->cur_x -
   1495a:	f7ff bfb5 	b.w	148c8 <z_shell_op_cursor_horiz_move>
		z_shell_op_cursor_vert_move(shell, cons->cur_y_end - cons->cur_y);
   1495e:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
   14960:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   14962:	4628      	mov	r0, r5
   14964:	1ac9      	subs	r1, r1, r3
   14966:	f7ff ff99 	bl	1489c <z_shell_op_cursor_vert_move>
   1496a:	e7f0      	b.n	1494e <z_shell_op_cursor_position_synchronize+0x32>
   1496c:	0003329a 	.word	0x0003329a

00014970 <z_shell_op_cursor_word_move>:

	return ret;
}

void z_shell_op_cursor_word_move(const struct shell *shell, int16_t val)
{
   14970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	int16_t shift;
	int16_t sign;

	if (val < 0) {
   14974:	1e0c      	subs	r4, r1, #0
{
   14976:	4606      	mov	r6, r0
	if (val < 0) {
   14978:	da2e      	bge.n	149d8 <z_shell_op_cursor_word_move+0x68>
		val = -val;
   1497a:	4264      	negs	r4, r4
   1497c:	b224      	sxth	r4, r4
		sign = -1;
   1497e:	f04f 35ff 	mov.w	r5, #4294967295
		if (isalnum((int)str[idx]) != 0) {
   14982:	f8df 8058 	ldr.w	r8, [pc, #88]	; 149dc <z_shell_op_cursor_word_move+0x6c>
   14986:	b2af      	uxth	r7, r5
   14988:	e01c      	b.n	149c4 <z_shell_op_cursor_word_move+0x54>
	} else {
		sign = 1;
	}

	while (val--) {
		shift = shift_calc(shell->ctx->cmd_buff,
   1498a:	68b3      	ldr	r3, [r6, #8]
   1498c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   1498e:	f8b3 e03c 	ldrh.w	lr, [r3, #60]	; 0x3c
   14992:	f103 0c42 	add.w	ip, r3, #66	; 0x42
	bool found = false;
   14996:	2000      	movs	r0, #0
		shift = shift_calc(shell->ctx->cmd_buff,
   14998:	4613      	mov	r3, r2
		idx = pos + ret * sign;
   1499a:	1a99      	subs	r1, r3, r2
   1499c:	b209      	sxth	r1, r1
		if (((idx == 0U) && (sign < 0)) ||
   1499e:	b913      	cbnz	r3, 149a6 <z_shell_op_cursor_word_move+0x36>
   149a0:	f1b5 3fff 	cmp.w	r5, #4294967295
   149a4:	d00b      	beq.n	149be <z_shell_op_cursor_word_move+0x4e>
   149a6:	459e      	cmp	lr, r3
   149a8:	d101      	bne.n	149ae <z_shell_op_cursor_word_move+0x3e>
		    ((idx == len) && (sign > 0))) {
   149aa:	2d01      	cmp	r5, #1
   149ac:	d007      	beq.n	149be <z_shell_op_cursor_word_move+0x4e>
		if (isalnum((int)str[idx]) != 0) {
   149ae:	f81c 9003 	ldrb.w	r9, [ip, r3]
   149b2:	f819 9008 	ldrb.w	r9, [r9, r8]
   149b6:	f019 0f07 	tst.w	r9, #7
   149ba:	d109      	bne.n	149d0 <z_shell_op_cursor_word_move+0x60>
			if (found) {
   149bc:	b148      	cbz	r0, 149d2 <z_shell_op_cursor_word_move+0x62>
				   shell->ctx->cmd_buff_pos,
				   shell->ctx->cmd_buff_len, sign);
		z_shell_op_cursor_move(shell, sign * shift);
   149be:	4630      	mov	r0, r6
   149c0:	f015 fa2c 	bl	29e1c <z_shell_op_cursor_move>
	while (val--) {
   149c4:	3c01      	subs	r4, #1
   149c6:	b224      	sxth	r4, r4
   149c8:	1c63      	adds	r3, r4, #1
   149ca:	d1de      	bne.n	1498a <z_shell_op_cursor_word_move+0x1a>
	}
}
   149cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			found = true;
   149d0:	2001      	movs	r0, #1
	while (1) {
   149d2:	443b      	add	r3, r7
   149d4:	b29b      	uxth	r3, r3
		idx = pos + ret * sign;
   149d6:	e7e0      	b.n	1499a <z_shell_op_cursor_word_move+0x2a>
		sign = 1;
   149d8:	2501      	movs	r5, #1
   149da:	e7d2      	b.n	14982 <z_shell_op_cursor_word_move+0x12>
   149dc:	00034540 	.word	0x00034540

000149e0 <z_shell_print_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
}

void z_shell_print_cmd(const struct shell *shell)
{
	z_shell_raw_fprintf(shell->fprintf_ctx, "%s", shell->ctx->cmd_buff);
   149e0:	6882      	ldr	r2, [r0, #8]
   149e2:	4902      	ldr	r1, [pc, #8]	; (149ec <z_shell_print_cmd+0xc>)
   149e4:	6940      	ldr	r0, [r0, #20]
   149e6:	3242      	adds	r2, #66	; 0x42
   149e8:	f015 b9e3 	b.w	29db2 <z_shell_raw_fprintf>
   149ec:	0002f5ab 	.word	0x0002f5ab

000149f0 <z_shell_write>:
	}
}

void z_shell_write(const struct shell *shell, const void *data,
		 size_t length)
{
   149f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149f4:	460e      	mov	r6, r1
   149f6:	b087      	sub	sp, #28
   149f8:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(shell && data);
   149fa:	4605      	mov	r5, r0
   149fc:	b100      	cbz	r0, 14a00 <z_shell_write+0x10>
   149fe:	b959      	cbnz	r1, 14a18 <z_shell_write+0x28>
   14a00:	4936      	ldr	r1, [pc, #216]	; (14adc <z_shell_write+0xec>)
   14a02:	4837      	ldr	r0, [pc, #220]	; (14ae0 <z_shell_write+0xf0>)
   14a04:	4a37      	ldr	r2, [pc, #220]	; (14ae4 <z_shell_write+0xf4>)
   14a06:	f44f 73ca 	mov.w	r3, #404	; 0x194
   14a0a:	f014 f8c6 	bl	28b9a <printk>
   14a0e:	4835      	ldr	r0, [pc, #212]	; (14ae4 <z_shell_write+0xf4>)
   14a10:	f44f 71ca 	mov.w	r1, #404	; 0x194
   14a14:	f014 fb02 	bl	2901c <assert_post_action>
	while (length) {
		int err = shell->iface->api->write(shell->iface,
				&((const uint8_t *) data)[offset], length,
				&tmp_cnt);
		(void)err;
		__ASSERT_NO_MSG(err == 0);
   14a18:	4f32      	ldr	r7, [pc, #200]	; (14ae4 <z_shell_write+0xf4>)
   14a1a:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 14aec <z_shell_write+0xfc>
   14a1e:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 14ae0 <z_shell_write+0xf0>
{
   14a22:	f04f 0800 	mov.w	r8, #0
	while (length) {
   14a26:	b914      	cbnz	r4, 14a2e <z_shell_write+0x3e>
		if (tmp_cnt == 0 &&
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
			shell_pend_on_txdone(shell);
		}
	}
}
   14a28:	b007      	add	sp, #28
   14a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		int err = shell->iface->api->write(shell->iface,
   14a2e:	6868      	ldr	r0, [r5, #4]
   14a30:	6803      	ldr	r3, [r0, #0]
   14a32:	4622      	mov	r2, r4
   14a34:	f8d3 b00c 	ldr.w	fp, [r3, #12]
   14a38:	eb06 0108 	add.w	r1, r6, r8
   14a3c:	466b      	mov	r3, sp
   14a3e:	47d8      	blx	fp
		__ASSERT_NO_MSG(err == 0);
   14a40:	b158      	cbz	r0, 14a5a <z_shell_write+0x6a>
   14a42:	4651      	mov	r1, sl
   14a44:	4648      	mov	r0, r9
   14a46:	f44f 73cf 	mov.w	r3, #414	; 0x19e
   14a4a:	463a      	mov	r2, r7
   14a4c:	f014 f8a5 	bl	28b9a <printk>
   14a50:	f44f 71cf 	mov.w	r1, #414	; 0x19e
   14a54:	4638      	mov	r0, r7
   14a56:	f014 fae1 	bl	2901c <assert_post_action>
		__ASSERT_NO_MSG(length >= tmp_cnt);
   14a5a:	9b00      	ldr	r3, [sp, #0]
   14a5c:	42a3      	cmp	r3, r4
   14a5e:	d90b      	bls.n	14a78 <z_shell_write+0x88>
   14a60:	4921      	ldr	r1, [pc, #132]	; (14ae8 <z_shell_write+0xf8>)
   14a62:	4648      	mov	r0, r9
   14a64:	f240 139f 	movw	r3, #415	; 0x19f
   14a68:	463a      	mov	r2, r7
   14a6a:	f014 f896 	bl	28b9a <printk>
   14a6e:	f240 119f 	movw	r1, #415	; 0x19f
   14a72:	4638      	mov	r0, r7
   14a74:	f014 fad2 	bl	2901c <assert_post_action>
		offset += tmp_cnt;
   14a78:	9a00      	ldr	r2, [sp, #0]
   14a7a:	4490      	add	r8, r2
		length -= tmp_cnt;
   14a7c:	1aa4      	subs	r4, r4, r2
		if (tmp_cnt == 0 &&
   14a7e:	2a00      	cmp	r2, #0
   14a80:	d1d1      	bne.n	14a26 <z_shell_write+0x36>
		    (shell->ctx->state != SHELL_STATE_PANIC_MODE_ACTIVE)) {
   14a82:	68ab      	ldr	r3, [r5, #8]
   14a84:	7919      	ldrb	r1, [r3, #4]
		if (tmp_cnt == 0 &&
   14a86:	2903      	cmp	r1, #3
   14a88:	d0cd      	beq.n	14a26 <z_shell_write+0x36>
	if (IS_ENABLED(CONFIG_MULTITHREADING) &&
   14a8a:	2902      	cmp	r1, #2
   14a8c:	d813      	bhi.n	14ab6 <z_shell_write+0xc6>
		k_poll_event_init(&event,
   14a8e:	f503 7326 	add.w	r3, r3, #664	; 0x298
   14a92:	2101      	movs	r1, #1
   14a94:	a801      	add	r0, sp, #4
   14a96:	f013 f901 	bl	27c9c <k_poll_event_init>
	return z_impl_k_poll(events, num_events, timeout);
   14a9a:	f04f 32ff 	mov.w	r2, #4294967295
   14a9e:	f04f 33ff 	mov.w	r3, #4294967295
   14aa2:	2101      	movs	r1, #1
   14aa4:	a801      	add	r0, sp, #4
   14aa6:	f013 f947 	bl	27d38 <z_impl_k_poll>
		k_poll_signal_reset(&shell->ctx->signals[SHELL_SIGNAL_TXDONE]);
   14aaa:	68a8      	ldr	r0, [r5, #8]
   14aac:	f500 7026 	add.w	r0, r0, #664	; 0x298
	z_impl_k_poll_signal_reset(sig);
   14ab0:	f018 f882 	bl	2cbb8 <z_impl_k_poll_signal_reset>
   14ab4:	e7b7      	b.n	14a26 <z_shell_write+0x36>
	return sh->ctx->ctx.flags.tx_rdy == 1;
   14ab6:	f8d3 2264 	ldr.w	r2, [r3, #612]	; 0x264
		while (!z_flag_tx_rdy_get(shell)) {
   14aba:	0792      	lsls	r2, r2, #30
   14abc:	d5fb      	bpl.n	14ab6 <z_shell_write+0xc6>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   14abe:	f3bf 8f5b 	dmb	ish
   14ac2:	f503 7319 	add.w	r3, r3, #612	; 0x264
   14ac6:	e853 2f00 	ldrex	r2, [r3]
   14aca:	f022 0202 	bic.w	r2, r2, #2
   14ace:	e843 2100 	strex	r1, r2, [r3]
   14ad2:	2900      	cmp	r1, #0
   14ad4:	d1f7      	bne.n	14ac6 <z_shell_write+0xd6>
   14ad6:	f3bf 8f5b 	dmb	ish
	return ret;
   14ada:	e7a4      	b.n	14a26 <z_shell_write+0x36>
   14adc:	0002fdcd 	.word	0x0002fdcd
   14ae0:	0002e93e 	.word	0x0002e93e
   14ae4:	0002fda1 	.word	0x0002fda1
   14ae8:	0002fddb 	.word	0x0002fddb
   14aec:	0002ec6a 	.word	0x0002ec6a

00014af0 <z_shell_vt100_color_set>:
{
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	if (color >= VT100_COLOR_END) {
   14af0:	2908      	cmp	r1, #8
{
   14af2:	460a      	mov	r2, r1
	if (color >= VT100_COLOR_END) {
   14af4:	d817      	bhi.n	14b26 <z_shell_vt100_color_set+0x36>
		return;
	}

	if (shell->ctx->vt100_ctx.col.col == color) {
   14af6:	6883      	ldr	r3, [r0, #8]
   14af8:	f893 102e 	ldrb.w	r1, [r3, #46]	; 0x2e
   14afc:	4291      	cmp	r1, r2
   14afe:	d012      	beq.n	14b26 <z_shell_vt100_color_set+0x36>
		return;
	}

	shell->ctx->vt100_ctx.col.col = color;
   14b00:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e

	if (color != SHELL_NORMAL) {
   14b04:	6883      	ldr	r3, [r0, #8]
   14b06:	2a08      	cmp	r2, #8
	return sh->ctx->cfg.flags.use_vt100 == 1;
   14b08:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   14b0c:	d005      	beq.n	14b1a <z_shell_vt100_color_set+0x2a>
		Z_SHELL_VT100_CMD(shell, "\e[1;3%dm", color);
   14b0e:	0699      	lsls	r1, r3, #26
   14b10:	d509      	bpl.n	14b26 <z_shell_vt100_color_set+0x36>
   14b12:	4905      	ldr	r1, [pc, #20]	; (14b28 <z_shell_vt100_color_set+0x38>)
   14b14:	6940      	ldr	r0, [r0, #20]
   14b16:	f015 b94c 	b.w	29db2 <z_shell_raw_fprintf>
	} else {
		Z_SHELL_VT100_CMD(shell, SHELL_VT100_MODESOFF);
   14b1a:	069b      	lsls	r3, r3, #26
   14b1c:	d503      	bpl.n	14b26 <z_shell_vt100_color_set+0x36>
   14b1e:	4903      	ldr	r1, [pc, #12]	; (14b2c <z_shell_vt100_color_set+0x3c>)
   14b20:	6940      	ldr	r0, [r0, #20]
   14b22:	f015 b946 	b.w	29db2 <z_shell_raw_fprintf>
	}
}
   14b26:	4770      	bx	lr
   14b28:	0002fded 	.word	0x0002fded
   14b2c:	0002d421 	.word	0x0002d421

00014b30 <z_shell_vt100_colors_restore>:

void z_shell_vt100_colors_restore(const struct shell *shell,
				  const struct shell_vt100_colors *color)
{
   14b30:	b538      	push	{r3, r4, r5, lr}
   14b32:	460d      	mov	r5, r1
	if (!IS_ENABLED(CONFIG_SHELL_VT100_COLORS)) {
		return;
	}

	z_shell_vt100_color_set(shell, color->col);
   14b34:	7809      	ldrb	r1, [r1, #0]
{
   14b36:	4604      	mov	r4, r0
	z_shell_vt100_color_set(shell, color->col);
   14b38:	f7ff ffda 	bl	14af0 <z_shell_vt100_color_set>
	vt100_bgcolor_set(shell, color->bgcol);
   14b3c:	786a      	ldrb	r2, [r5, #1]
	if ((bgcolor == SHELL_NORMAL) ||
   14b3e:	2a07      	cmp	r2, #7
   14b40:	d811      	bhi.n	14b66 <z_shell_vt100_colors_restore+0x36>
	    (shell->ctx->vt100_ctx.col.bgcol == bgcolor)) {
   14b42:	68a3      	ldr	r3, [r4, #8]
	if ((bgcolor == SHELL_NORMAL) ||
   14b44:	f893 102f 	ldrb.w	r1, [r3, #47]	; 0x2f
   14b48:	4291      	cmp	r1, r2
   14b4a:	d00c      	beq.n	14b66 <z_shell_vt100_colors_restore+0x36>
	shell->ctx->vt100_ctx.col.bgcol = bgcolor;
   14b4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
   14b50:	68a3      	ldr	r3, [r4, #8]
   14b52:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   14b56:	069b      	lsls	r3, r3, #26
   14b58:	d505      	bpl.n	14b66 <z_shell_vt100_colors_restore+0x36>
   14b5a:	6960      	ldr	r0, [r4, #20]
   14b5c:	4902      	ldr	r1, [pc, #8]	; (14b68 <z_shell_vt100_colors_restore+0x38>)
}
   14b5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	Z_SHELL_VT100_CMD(shell, "\e[403%dm", bgcolor);
   14b62:	f015 b926 	b.w	29db2 <z_shell_raw_fprintf>
}
   14b66:	bd38      	pop	{r3, r4, r5, pc}
   14b68:	0002fdf6 	.word	0x0002fdf6

00014b6c <z_shell_fprintf>:
}

void z_shell_fprintf(const struct shell *sh,
		     enum shell_vt100_color color,
		     const char *fmt, ...)
{
   14b6c:	b40c      	push	{r2, r3}
   14b6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
   14b70:	9e06      	ldr	r6, [sp, #24]
   14b72:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(sh);
   14b74:	4604      	mov	r4, r0
   14b76:	b958      	cbnz	r0, 14b90 <z_shell_fprintf+0x24>
   14b78:	492b      	ldr	r1, [pc, #172]	; (14c28 <z_shell_fprintf+0xbc>)
   14b7a:	482c      	ldr	r0, [pc, #176]	; (14c2c <z_shell_fprintf+0xc0>)
   14b7c:	4a2c      	ldr	r2, [pc, #176]	; (14c30 <z_shell_fprintf+0xc4>)
   14b7e:	f240 13fd 	movw	r3, #509	; 0x1fd
   14b82:	f014 f80a 	bl	28b9a <printk>
   14b86:	482a      	ldr	r0, [pc, #168]	; (14c30 <z_shell_fprintf+0xc4>)
   14b88:	f240 11fd 	movw	r1, #509	; 0x1fd
   14b8c:	f014 fa46 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(sh->ctx);
   14b90:	68a3      	ldr	r3, [r4, #8]
   14b92:	b95b      	cbnz	r3, 14bac <z_shell_fprintf+0x40>
   14b94:	4927      	ldr	r1, [pc, #156]	; (14c34 <z_shell_fprintf+0xc8>)
   14b96:	4825      	ldr	r0, [pc, #148]	; (14c2c <z_shell_fprintf+0xc0>)
   14b98:	4a25      	ldr	r2, [pc, #148]	; (14c30 <z_shell_fprintf+0xc4>)
   14b9a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
   14b9e:	f013 fffc 	bl	28b9a <printk>
   14ba2:	4823      	ldr	r0, [pc, #140]	; (14c30 <z_shell_fprintf+0xc4>)
   14ba4:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
   14ba8:	f014 fa38 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(sh->fprintf_ctx);
   14bac:	6963      	ldr	r3, [r4, #20]
   14bae:	b95b      	cbnz	r3, 14bc8 <z_shell_fprintf+0x5c>
   14bb0:	4921      	ldr	r1, [pc, #132]	; (14c38 <z_shell_fprintf+0xcc>)
   14bb2:	481e      	ldr	r0, [pc, #120]	; (14c2c <z_shell_fprintf+0xc0>)
   14bb4:	4a1e      	ldr	r2, [pc, #120]	; (14c30 <z_shell_fprintf+0xc4>)
   14bb6:	f240 13ff 	movw	r3, #511	; 0x1ff
   14bba:	f013 ffee 	bl	28b9a <printk>
   14bbe:	481c      	ldr	r0, [pc, #112]	; (14c30 <z_shell_fprintf+0xc4>)
   14bc0:	f240 11ff 	movw	r1, #511	; 0x1ff
   14bc4:	f014 fa2a 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(fmt);
   14bc8:	b95e      	cbnz	r6, 14be2 <z_shell_fprintf+0x76>
   14bca:	491c      	ldr	r1, [pc, #112]	; (14c3c <z_shell_fprintf+0xd0>)
   14bcc:	4817      	ldr	r0, [pc, #92]	; (14c2c <z_shell_fprintf+0xc0>)
   14bce:	4a18      	ldr	r2, [pc, #96]	; (14c30 <z_shell_fprintf+0xc4>)
   14bd0:	f44f 7300 	mov.w	r3, #512	; 0x200
   14bd4:	f013 ffe1 	bl	28b9a <printk>
   14bd8:	4815      	ldr	r0, [pc, #84]	; (14c30 <z_shell_fprintf+0xc4>)
   14bda:	f44f 7100 	mov.w	r1, #512	; 0x200
   14bde:	f014 fa1d 	bl	2901c <assert_post_action>
	__ASSERT(z_flag_panic_mode_get(sh) || !k_is_in_isr(),
   14be2:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->ctx.flags.panic_mode == 1;
   14be4:	f8d3 3264 	ldr.w	r3, [r3, #612]	; 0x264
   14be8:	049b      	lsls	r3, r3, #18
   14bea:	d411      	bmi.n	14c10 <z_shell_fprintf+0xa4>
   14bec:	f017 fe48 	bl	2c880 <k_is_in_isr>
   14bf0:	b170      	cbz	r0, 14c10 <z_shell_fprintf+0xa4>
   14bf2:	4913      	ldr	r1, [pc, #76]	; (14c40 <z_shell_fprintf+0xd4>)
   14bf4:	4a0e      	ldr	r2, [pc, #56]	; (14c30 <z_shell_fprintf+0xc4>)
   14bf6:	480d      	ldr	r0, [pc, #52]	; (14c2c <z_shell_fprintf+0xc0>)
   14bf8:	f240 2301 	movw	r3, #513	; 0x201
   14bfc:	f013 ffcd 	bl	28b9a <printk>
   14c00:	4810      	ldr	r0, [pc, #64]	; (14c44 <z_shell_fprintf+0xd8>)
   14c02:	f013 ffca 	bl	28b9a <printk>
   14c06:	480a      	ldr	r0, [pc, #40]	; (14c30 <z_shell_fprintf+0xc4>)
   14c08:	f240 2101 	movw	r1, #513	; 0x201
   14c0c:	f014 fa06 	bl	2901c <assert_post_action>
		 "Thread context required.");

	va_list args;

	va_start(args, fmt);
   14c10:	ab07      	add	r3, sp, #28
	z_shell_vfprintf(sh, color, fmt, args);
   14c12:	4632      	mov	r2, r6
   14c14:	4629      	mov	r1, r5
   14c16:	4620      	mov	r0, r4
	va_start(args, fmt);
   14c18:	9301      	str	r3, [sp, #4]
	z_shell_vfprintf(sh, color, fmt, args);
   14c1a:	f015 f966 	bl	29eea <z_shell_vfprintf>
	va_end(args);
}
   14c1e:	b002      	add	sp, #8
   14c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   14c24:	b002      	add	sp, #8
   14c26:	4770      	bx	lr
   14c28:	00031e3a 	.word	0x00031e3a
   14c2c:	0002e93e 	.word	0x0002e93e
   14c30:	0002fda1 	.word	0x0002fda1
   14c34:	0002fb3c 	.word	0x0002fb3c
   14c38:	0002fb80 	.word	0x0002fb80
   14c3c:	0002fb90 	.word	0x0002fb90
   14c40:	0002fdff 	.word	0x0002fdff
   14c44:	0002fb21 	.word	0x0002fb21

00014c48 <z_shell_op_word_remove>:
{
   14c48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   14c4a:	6883      	ldr	r3, [r0, #8]
	if ((shell->ctx->cmd_buff_len == 0) ||
   14c4c:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
   14c4e:	4605      	mov	r5, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   14c50:	2a00      	cmp	r2, #0
   14c52:	d04e      	beq.n	14cf2 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   14c54:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
	if ((shell->ctx->cmd_buff_len == 0) ||
   14c56:	2800      	cmp	r0, #0
   14c58:	d04b      	beq.n	14cf2 <z_shell_op_word_remove+0xaa>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos - 1];
   14c5a:	3041      	adds	r0, #65	; 0x41
   14c5c:	4418      	add	r0, r3
	char *str_start = &shell->ctx->cmd_buff[0];
   14c5e:	f103 0642 	add.w	r6, r3, #66	; 0x42
   14c62:	4603      	mov	r3, r0
   14c64:	1ac4      	subs	r4, r0, r3
	while ((str >= str_start) && (*str == ' ')) {
   14c66:	42b3      	cmp	r3, r6
   14c68:	b2a4      	uxth	r4, r4
   14c6a:	4619      	mov	r1, r3
   14c6c:	d30d      	bcc.n	14c8a <z_shell_op_word_remove+0x42>
   14c6e:	f811 7901 	ldrb.w	r7, [r1], #-1
   14c72:	2f20      	cmp	r7, #32
   14c74:	d03b      	beq.n	14cee <z_shell_op_word_remove+0xa6>
   14c76:	4619      	mov	r1, r3
   14c78:	3b01      	subs	r3, #1
	while ((str >= str_start) && (*str != ' ')) {
   14c7a:	7808      	ldrb	r0, [r1, #0]
   14c7c:	2820      	cmp	r0, #32
   14c7e:	d004      	beq.n	14c8a <z_shell_op_word_remove+0x42>
		++chars_to_delete;
   14c80:	3401      	adds	r4, #1
	while ((str >= str_start) && (*str != ' ')) {
   14c82:	429e      	cmp	r6, r3
		++chars_to_delete;
   14c84:	b2a4      	uxth	r4, r4
		--str;
   14c86:	4619      	mov	r1, r3
	while ((str >= str_start) && (*str != ' ')) {
   14c88:	d9f5      	bls.n	14c76 <z_shell_op_word_remove+0x2e>
	memmove(str + 1, str + 1 + chars_to_delete,
   14c8a:	1c63      	adds	r3, r4, #1
   14c8c:	1c4e      	adds	r6, r1, #1
   14c8e:	1b12      	subs	r2, r2, r4
   14c90:	4419      	add	r1, r3
   14c92:	4630      	mov	r0, r6
   14c94:	f017 ffbd 	bl	2cc12 <memmove>
	shell->ctx->cmd_buff_len -= chars_to_delete;
   14c98:	68a9      	ldr	r1, [r5, #8]
   14c9a:	8f8a      	ldrh	r2, [r1, #60]	; 0x3c
   14c9c:	1b12      	subs	r2, r2, r4
   14c9e:	b292      	uxth	r2, r2
   14ca0:	878a      	strh	r2, [r1, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   14ca2:	440a      	add	r2, r1
   14ca4:	2300      	movs	r3, #0
	z_shell_op_cursor_move(shell, -chars_to_delete);
   14ca6:	4261      	negs	r1, r4
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   14ca8:	f882 3042 	strb.w	r3, [r2, #66]	; 0x42
	z_shell_op_cursor_move(shell, -chars_to_delete);
   14cac:	b209      	sxth	r1, r1
   14cae:	4628      	mov	r0, r5
   14cb0:	f015 f8b4 	bl	29e1c <z_shell_op_cursor_move>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   14cb4:	68ab      	ldr	r3, [r5, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   14cb6:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   14cba:	069a      	lsls	r2, r3, #26
   14cbc:	d503      	bpl.n	14cc6 <z_shell_op_word_remove+0x7e>
   14cbe:	490d      	ldr	r1, [pc, #52]	; (14cf4 <z_shell_op_word_remove+0xac>)
   14cc0:	6968      	ldr	r0, [r5, #20]
   14cc2:	f015 f876 	bl	29db2 <z_shell_raw_fprintf>
	z_shell_fprintf(shell, SHELL_NORMAL, "%s", str + 1);
   14cc6:	4633      	mov	r3, r6
   14cc8:	4a0b      	ldr	r2, [pc, #44]	; (14cf8 <z_shell_op_word_remove+0xb0>)
   14cca:	2108      	movs	r1, #8
   14ccc:	4628      	mov	r0, r5
   14cce:	f7ff ff4d 	bl	14b6c <z_shell_fprintf>
	z_clear_eos(shell);
   14cd2:	4628      	mov	r0, r5
   14cd4:	f7ff fdd6 	bl	14884 <z_clear_eos>
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   14cd8:	68ab      	ldr	r3, [r5, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   14cda:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   14cde:	069b      	lsls	r3, r3, #26
   14ce0:	d507      	bpl.n	14cf2 <z_shell_op_word_remove+0xaa>
   14ce2:	6968      	ldr	r0, [r5, #20]
   14ce4:	4905      	ldr	r1, [pc, #20]	; (14cfc <z_shell_op_word_remove+0xb4>)
}
   14ce6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   14cea:	f015 b862 	b.w	29db2 <z_shell_raw_fprintf>
   14cee:	460b      	mov	r3, r1
   14cf0:	e7b8      	b.n	14c64 <z_shell_op_word_remove+0x1c>
   14cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   14cf4:	0002d426 	.word	0x0002d426
   14cf8:	0002f5ab 	.word	0x0002f5ab
   14cfc:	0002d42a 	.word	0x0002d42a

00014d00 <reprint_from_cursor>:
{
   14d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14d04:	4604      	mov	r4, r0
   14d06:	460d      	mov	r5, r1
	if (data_removed) {
   14d08:	4617      	mov	r7, r2
   14d0a:	b10a      	cbz	r2, 14d10 <reprint_from_cursor+0x10>
		z_clear_eos(shell);
   14d0c:	f7ff fdba 	bl	14884 <z_clear_eos>
	if (z_flag_obscure_get(shell)) {
   14d10:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.obscure == 1;
   14d12:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
   14d16:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
   14d18:	0752      	lsls	r2, r2, #29
   14d1a:	f100 0042 	add.w	r0, r0, #66	; 0x42
   14d1e:	4403      	add	r3, r0
   14d20:	d521      	bpl.n	14d66 <reprint_from_cursor+0x66>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   14d22:	4618      	mov	r0, r3
   14d24:	f7f7 fb46 	bl	c3b4 <strlen>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
   14d28:	f8df 8050 	ldr.w	r8, [pc, #80]	; 14d7c <reprint_from_cursor+0x7c>
		int len = strlen(&shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos]);
   14d2c:	4606      	mov	r6, r0
		while (len--) {
   14d2e:	3e01      	subs	r6, #1
   14d30:	d214      	bcs.n	14d5c <reprint_from_cursor+0x5c>
	shell->ctx->cmd_buff_pos = shell->ctx->cmd_buff_len;
   14d32:	4620      	mov	r0, r4
   14d34:	f850 3f08 	ldr.w	r3, [r0, #8]!
   14d38:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   14d3a:	87da      	strh	r2, [r3, #62]	; 0x3e
	if (full_line_cmd(shell)) {
   14d3c:	f015 f846 	bl	29dcc <full_line_cmd.isra.0>
   14d40:	b128      	cbz	r0, 14d4e <reprint_from_cursor+0x4e>
		if (((data_removed) && (diff > 0)) || (!data_removed)) {
   14d42:	b107      	cbz	r7, 14d46 <reprint_from_cursor+0x46>
   14d44:	b11d      	cbz	r5, 14d4e <reprint_from_cursor+0x4e>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   14d46:	490b      	ldr	r1, [pc, #44]	; (14d74 <reprint_from_cursor+0x74>)
   14d48:	6960      	ldr	r0, [r4, #20]
   14d4a:	f015 f832 	bl	29db2 <z_shell_raw_fprintf>
	z_shell_op_cursor_move(shell, -diff);
   14d4e:	4269      	negs	r1, r5
   14d50:	4620      	mov	r0, r4
   14d52:	b209      	sxth	r1, r1
}
   14d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_shell_op_cursor_move(shell, -diff);
   14d58:	f015 b860 	b.w	29e1c <z_shell_op_cursor_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, "*");
   14d5c:	6960      	ldr	r0, [r4, #20]
   14d5e:	4641      	mov	r1, r8
   14d60:	f015 f827 	bl	29db2 <z_shell_raw_fprintf>
   14d64:	e7e3      	b.n	14d2e <reprint_from_cursor+0x2e>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s",
   14d66:	4a04      	ldr	r2, [pc, #16]	; (14d78 <reprint_from_cursor+0x78>)
   14d68:	2108      	movs	r1, #8
   14d6a:	4620      	mov	r0, r4
   14d6c:	f7ff fefe 	bl	14b6c <z_shell_fprintf>
   14d70:	e7df      	b.n	14d32 <reprint_from_cursor+0x32>
   14d72:	bf00      	nop
   14d74:	0003329a 	.word	0x0003329a
   14d78:	0002f5ab 	.word	0x0002f5ab
   14d7c:	00030a16 	.word	0x00030a16

00014d80 <z_shell_op_char_insert>:
{
   14d80:	b513      	push	{r0, r1, r4, lr}
	if (z_flag_insert_mode_get(shell) &&
   14d82:	6883      	ldr	r3, [r0, #8]
{
   14d84:	f88d 1007 	strb.w	r1, [sp, #7]
	return sh->ctx->cfg.flags.insert_mode == 1;
   14d88:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
   14d8c:	4604      	mov	r4, r0
	if (z_flag_insert_mode_get(shell) &&
   14d8e:	07d0      	lsls	r0, r2, #31
   14d90:	d523      	bpl.n	14dda <z_shell_op_char_insert+0x5a>
	    (shell->ctx->cmd_buff_len != shell->ctx->cmd_buff_pos)) {
   14d92:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
	if (z_flag_insert_mode_get(shell) &&
   14d94:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
   14d96:	428a      	cmp	r2, r1
   14d98:	d01f      	beq.n	14dda <z_shell_op_char_insert+0x5a>
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   14d9a:	1c48      	adds	r0, r1, #1
   14d9c:	87d8      	strh	r0, [r3, #62]	; 0x3e
   14d9e:	440b      	add	r3, r1
		char_replace(shell, data);
   14da0:	f89d 2007 	ldrb.w	r2, [sp, #7]
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos++] = data;
   14da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	if (!z_flag_echo_get(shell)) {
   14da8:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
   14daa:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
   14dae:	0789      	lsls	r1, r1, #30
   14db0:	d511      	bpl.n	14dd6 <z_shell_op_char_insert+0x56>
	return sh->ctx->cfg.flags.obscure == 1;
   14db2:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   14db6:	6960      	ldr	r0, [r4, #20]
   14db8:	490b      	ldr	r1, [pc, #44]	; (14de8 <z_shell_op_char_insert+0x68>)
		data = '*';
   14dba:	f013 0f04 	tst.w	r3, #4
	z_shell_raw_fprintf(shell->fprintf_ctx, "%c", data);
   14dbe:	bf18      	it	ne
   14dc0:	222a      	movne	r2, #42	; 0x2a
   14dc2:	f014 fff6 	bl	29db2 <z_shell_raw_fprintf>
	if (z_shell_cursor_in_empty_line(shell)) {
   14dc6:	4620      	mov	r0, r4
   14dc8:	f015 f814 	bl	29df4 <z_shell_cursor_in_empty_line>
   14dcc:	b118      	cbz	r0, 14dd6 <z_shell_op_char_insert+0x56>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   14dce:	4907      	ldr	r1, [pc, #28]	; (14dec <z_shell_op_char_insert+0x6c>)
   14dd0:	6960      	ldr	r0, [r4, #20]
   14dd2:	f014 ffee 	bl	29db2 <z_shell_raw_fprintf>
}
   14dd6:	b002      	add	sp, #8
   14dd8:	bd10      	pop	{r4, pc}
		data_insert(shell, &data, 1);
   14dda:	2201      	movs	r2, #1
   14ddc:	f10d 0107 	add.w	r1, sp, #7
   14de0:	4620      	mov	r0, r4
   14de2:	f015 f8a5 	bl	29f30 <data_insert>
}
   14de6:	e7f6      	b.n	14dd6 <z_shell_op_char_insert+0x56>
   14de8:	0002fd9e 	.word	0x0002fd9e
   14dec:	0003329a 	.word	0x0003329a

00014df0 <z_shell_print_prompt_and_cmd>:
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   14df0:	6883      	ldr	r3, [r0, #8]
   14df2:	4a0a      	ldr	r2, [pc, #40]	; (14e1c <z_shell_print_prompt_and_cmd+0x2c>)
   14df4:	681b      	ldr	r3, [r3, #0]
{
   14df6:	b510      	push	{r4, lr}
   14df8:	4604      	mov	r4, r0
	z_shell_fprintf(shell, SHELL_INFO, "%s", shell->ctx->prompt);
   14dfa:	2102      	movs	r1, #2
   14dfc:	f7ff feb6 	bl	14b6c <z_shell_fprintf>
	if (z_flag_echo_get(shell)) {
   14e00:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.echo == 1;
   14e02:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   14e06:	079b      	lsls	r3, r3, #30
   14e08:	d507      	bpl.n	14e1a <z_shell_print_prompt_and_cmd+0x2a>
		z_shell_print_cmd(shell);
   14e0a:	4620      	mov	r0, r4
   14e0c:	f7ff fde8 	bl	149e0 <z_shell_print_cmd>
		z_shell_op_cursor_position_synchronize(shell);
   14e10:	4620      	mov	r0, r4
}
   14e12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_op_cursor_position_synchronize(shell);
   14e16:	f7ff bd81 	b.w	1491c <z_shell_op_cursor_position_synchronize>
}
   14e1a:	bd10      	pop	{r4, pc}
   14e1c:	0002f5ab 	.word	0x0002f5ab

00014e20 <put>:

	return true;
}

static void put(const struct log_backend *const backend, struct log_msg *msg)
{
   14e20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   14e24:	6843      	ldr	r3, [r0, #4]
   14e26:	681c      	ldr	r4, [r3, #0]
	bool colors = IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
			z_flag_use_colors_get(shell);
   14e28:	68a3      	ldr	r3, [r4, #8]
	struct k_poll_signal *signal;

	log_msg_get(msg);
   14e2a:	4608      	mov	r0, r1
	return sh->ctx->cfg.flags.use_colors == 1;
   14e2c:	f8d3 6260 	ldr.w	r6, [r3, #608]	; 0x260
{
   14e30:	460d      	mov	r5, r1
	log_msg_get(msg);
   14e32:	f014 fb18 	bl	29466 <log_msg_get>

	switch (shell->log_backend->control_block->state) {
   14e36:	69e3      	ldr	r3, [r4, #28]
   14e38:	68db      	ldr	r3, [r3, #12]
   14e3a:	791b      	ldrb	r3, [r3, #4]
   14e3c:	2b01      	cmp	r3, #1
   14e3e:	f3c6 1600 	ubfx	r6, r6, #4, #1
   14e42:	d005      	beq.n	14e50 <put+0x30>
   14e44:	2b03      	cmp	r3, #3
   14e46:	d078      	beq.n	14f3a <put+0x11a>

	case SHELL_LOG_BACKEND_DISABLED:
		__fallthrough;
	default:
		/* Discard message. */
		log_msg_put(msg);
   14e48:	4628      	mov	r0, r5
   14e4a:	f014 fb3b 	bl	294c4 <log_msg_put>
	}
}
   14e4e:	e071      	b.n	14f34 <put+0x114>
	struct shell_log_backend_msg t_msg = {
   14e50:	9500      	str	r5, [sp, #0]
	return z_impl_k_uptime_ticks();
   14e52:	f017 fe11 	bl	2ca78 <z_impl_k_uptime_ticks>
   14e56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14e5a:	460a      	mov	r2, r1
   14e5c:	fba0 0103 	umull	r0, r1, r0, r3
   14e60:	fb03 1102 	mla	r1, r3, r2, r1
   14e64:	0bc3      	lsrs	r3, r0, #15
   14e66:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
	return (uint32_t)k_uptime_get();
   14e6a:	9301      	str	r3, [sp, #4]
   14e6c:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   14e70:	f240 36e7 	movw	r6, #999	; 0x3e7
   14e74:	2700      	movs	r7, #0
		err = k_msgq_put(shell->log_backend->msgq, &t_msg,
   14e76:	69e3      	ldr	r3, [r4, #28]
   14e78:	6919      	ldr	r1, [r3, #16]
   14e7a:	f8d3 8004 	ldr.w	r8, [r3, #4]
   14e7e:	46b1      	mov	r9, r6
   14e80:	46ba      	mov	sl, r7
   14e82:	fbe5 9a01 	umlal	r9, sl, r5, r1
   14e86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14e8a:	2300      	movs	r3, #0
   14e8c:	4648      	mov	r0, r9
   14e8e:	4651      	mov	r1, sl
   14e90:	f7eb f9d6 	bl	240 <__aeabi_uldivmod>
   14e94:	4602      	mov	r2, r0
   14e96:	460b      	mov	r3, r1
	return z_impl_k_msgq_put(msgq, data, timeout);
   14e98:	4669      	mov	r1, sp
   14e9a:	4640      	mov	r0, r8
   14e9c:	f00f fa4c 	bl	24338 <z_impl_k_msgq_put>
		switch (err) {
   14ea0:	f110 0f0b 	cmn.w	r0, #11
   14ea4:	d003      	beq.n	14eae <put+0x8e>
   14ea6:	2800      	cmp	r0, #0
   14ea8:	d03e      	beq.n	14f28 <put+0x108>
   14eaa:	3023      	adds	r0, #35	; 0x23
   14eac:	d132      	bne.n	14f14 <put+0xf4>
	struct k_msgq *msgq = shell->log_backend->msgq;
   14eae:	69e3      	ldr	r3, [r4, #28]
   14eb0:	f8d3 8004 	ldr.w	r8, [r3, #4]
	uint32_t timeout = shell->log_backend->timeout;
   14eb4:	f8d3 9010 	ldr.w	r9, [r3, #16]
	return z_impl_k_uptime_ticks();
   14eb8:	f017 fdde 	bl	2ca78 <z_impl_k_uptime_ticks>
   14ebc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   14ec0:	460a      	mov	r2, r1
   14ec2:	fba0 0103 	umull	r0, r1, r0, r3
   14ec6:	fb03 1102 	mla	r1, r3, r2, r1
   14eca:	ea4f 3ad0 	mov.w	sl, r0, lsr #15
   14ece:	ea4a 4a41 	orr.w	sl, sl, r1, lsl #17
	return z_impl_k_msgq_peek(msgq, data);
   14ed2:	a902      	add	r1, sp, #8
   14ed4:	4640      	mov	r0, r8
   14ed6:	f00f fb85 	bl	245e4 <z_impl_k_msgq_peek>
		if (err == 0 && ((now - msg.timestamp) > timeout)) {
   14eda:	2800      	cmp	r0, #0
   14edc:	d1cb      	bne.n	14e76 <put+0x56>
   14ede:	9b03      	ldr	r3, [sp, #12]
   14ee0:	ebaa 0303 	sub.w	r3, sl, r3
   14ee4:	4599      	cmp	r9, r3
   14ee6:	d2c6      	bcs.n	14e76 <put+0x56>
	return z_impl_k_msgq_get(msgq, data, timeout);
   14ee8:	2300      	movs	r3, #0
   14eea:	2200      	movs	r2, #0
   14eec:	a902      	add	r1, sp, #8
   14eee:	4640      	mov	r0, r8
   14ef0:	f00f faca 	bl	24488 <z_impl_k_msgq_get>
			log_msg_put(msg.msg);
   14ef4:	9802      	ldr	r0, [sp, #8]
   14ef6:	f014 fae5 	bl	294c4 <log_msg_put>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14efa:	69a3      	ldr	r3, [r4, #24]
   14efc:	f3bf 8f5b 	dmb	ish
   14f00:	e853 2f00 	ldrex	r2, [r3]
   14f04:	3201      	adds	r2, #1
   14f06:	e843 2100 	strex	r1, r2, [r3]
   14f0a:	2900      	cmp	r1, #0
   14f0c:	d1f8      	bne.n	14f00 <put+0xe0>
   14f0e:	f3bf 8f5b 	dmb	ish
		err = k_msgq_peek(msgq, &msg);
   14f12:	e7de      	b.n	14ed2 <put+0xb2>
			__ASSERT_NO_MSG(0);
   14f14:	490f      	ldr	r1, [pc, #60]	; (14f54 <put+0x134>)
   14f16:	4810      	ldr	r0, [pc, #64]	; (14f58 <put+0x138>)
   14f18:	4a10      	ldr	r2, [pc, #64]	; (14f5c <put+0x13c>)
   14f1a:	237f      	movs	r3, #127	; 0x7f
   14f1c:	f013 fe3d 	bl	28b9a <printk>
   14f20:	480e      	ldr	r0, [pc, #56]	; (14f5c <put+0x13c>)
   14f22:	217f      	movs	r1, #127	; 0x7f
   14f24:	f014 f87a 	bl	2901c <assert_post_action>
			signal = &shell->ctx->signals[SHELL_SIGNAL_LOG_MSG];
   14f28:	68a0      	ldr	r0, [r4, #8]
   14f2a:	f500 701e 	add.w	r0, r0, #632	; 0x278
	return z_impl_k_poll_signal_raise(sig, result);
   14f2e:	2100      	movs	r1, #0
   14f30:	f013 f810 	bl	27f54 <z_impl_k_poll_signal_raise>
}
   14f34:	b004      	add	sp, #16
   14f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		z_shell_cmd_line_erase(shell);
   14f3a:	4620      	mov	r0, r4
   14f3c:	f014 ffb9 	bl	29eb2 <z_shell_cmd_line_erase>
		msg_process(shell->log_backend->log_output, msg, colors);
   14f40:	69e3      	ldr	r3, [r4, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   14f42:	2e00      	cmp	r6, #0
	log_output_msg_process(log_output, msg, flags);
   14f44:	6898      	ldr	r0, [r3, #8]
   14f46:	bf0c      	ite	eq
   14f48:	220e      	moveq	r2, #14
   14f4a:	220f      	movne	r2, #15
   14f4c:	4629      	mov	r1, r5
   14f4e:	f7fd f977 	bl	12240 <log_output_msg_process>
	log_msg_put(msg);
   14f52:	e779      	b.n	14e48 <put+0x28>
   14f54:	00034515 	.word	0x00034515
   14f58:	0002e93e 	.word	0x0002e93e
   14f5c:	0002fe2b 	.word	0x0002fe2b

00014f60 <formatted_text_print.constprop.0>:
 *   shell		Pointer to shell instance.
 *   p_str		Pointer to string to be printed.
 *   terminal_offset	Requested left margin.
 *   offset_first_line	Add margin to the first printed line.
 */
static void formatted_text_print(const struct shell *shell, const char *str,
   14f60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14f64:	4604      	mov	r4, r0
   14f66:	4690      	mov	r8, r2
				 size_t terminal_offset, bool offset_first_line)
{
	size_t offset = 0;
	size_t length;

	if (str == NULL) {
   14f68:	460e      	mov	r6, r1
   14f6a:	2900      	cmp	r1, #0
   14f6c:	d06b      	beq.n	15046 <formatted_text_print.constprop.0+0xe6>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
	}


	/* Skipping whitespace. */
	while (isspace((int) *(str + offset))) {
   14f6e:	4b37      	ldr	r3, [pc, #220]	; (1504c <formatted_text_print.constprop.0+0xec>)
   14f70:	2500      	movs	r5, #0
   14f72:	4699      	mov	r9, r3
   14f74:	5d72      	ldrb	r2, [r6, r5]
   14f76:	5cd2      	ldrb	r2, [r2, r3]
   14f78:	0712      	lsls	r2, r2, #28
   14f7a:	d420      	bmi.n	14fbe <formatted_text_print.constprop.0+0x5e>
	z_shell_raw_fprintf(sh->fprintf_ctx, "\n");
   14f7c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 15050 <formatted_text_print.constprop.0+0xf0>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   14f80:	4630      	mov	r0, r6
   14f82:	f7f7 fa17 	bl	c3b4 <strlen>
		size_t idx = 0;

		length = z_shell_strlen(str) - offset;

		if (length <=
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   14f86:	68a3      	ldr	r3, [r4, #8]
   14f88:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
		length = z_shell_strlen(str) - offset;
   14f8a:	b280      	uxth	r0, r0
   14f8c:	1b40      	subs	r0, r0, r5
		    shell->ctx->vt100_ctx.cons.terminal_wid - terminal_offset) {
   14f8e:	eba2 0308 	sub.w	r3, r2, r8
		if (length <=
   14f92:	4298      	cmp	r0, r3
   14f94:	eb06 0b05 	add.w	fp, r6, r5
   14f98:	d913      	bls.n	14fc2 <formatted_text_print.constprop.0+0x62>
   14f9a:	4659      	mov	r1, fp
		size_t idx = 0;
   14f9c:	2700      	movs	r7, #0
		length = shell->ctx->vt100_ctx.cons.terminal_wid
				- terminal_offset;

		while (true) {
			/* Determining line break. */
			if (isspace((int) (*(str + offset + idx)))) {
   14f9e:	f811 0b01 	ldrb.w	r0, [r1], #1
   14fa2:	f819 c000 	ldrb.w	ip, [r9, r0]
   14fa6:	f01c 0f08 	tst.w	ip, #8
   14faa:	d002      	beq.n	14fb2 <formatted_text_print.constprop.0+0x52>
				length = idx;
				if (*(str + offset + idx) == '\n') {
   14fac:	280a      	cmp	r0, #10
   14fae:	d031      	beq.n	15014 <formatted_text_print.constprop.0+0xb4>
   14fb0:	463b      	mov	r3, r7
					break;
				}
			}

			if ((idx + terminal_offset) >=
   14fb2:	eb08 0007 	add.w	r0, r8, r7
   14fb6:	4282      	cmp	r2, r0
   14fb8:	d92b      	bls.n	15012 <formatted_text_print.constprop.0+0xb2>
			    shell->ctx->vt100_ctx.cons.terminal_wid) {
				/* End of line reached. */
				break;
			}

			++idx;
   14fba:	3701      	adds	r7, #1
			if (isspace((int) (*(str + offset + idx)))) {
   14fbc:	e7ef      	b.n	14f9e <formatted_text_print.constprop.0+0x3e>
		++offset;
   14fbe:	3501      	adds	r5, #1
   14fc0:	e7d8      	b.n	14f74 <formatted_text_print.constprop.0+0x14>
   14fc2:	465b      	mov	r3, fp
			for (idx = 0; idx < length; idx++) {
   14fc4:	2700      	movs	r7, #0
   14fc6:	42b8      	cmp	r0, r7
   14fc8:	d017      	beq.n	14ffa <formatted_text_print.constprop.0+0x9a>
				if (*(str + offset + idx) == '\n') {
   14fca:	f813 2b01 	ldrb.w	r2, [r3], #1
   14fce:	2a0a      	cmp	r2, #10
   14fd0:	eb05 0907 	add.w	r9, r5, r7
   14fd4:	d11b      	bne.n	1500e <formatted_text_print.constprop.0+0xae>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   14fd6:	6960      	ldr	r0, [r4, #20]
   14fd8:	f014 fe0d 	bl	29bf6 <z_shell_fprintf_buffer_flush>
					z_shell_write(shell, str + offset, idx);
   14fdc:	463a      	mov	r2, r7
   14fde:	4659      	mov	r1, fp
   14fe0:	4620      	mov	r0, r4
   14fe2:	f7ff fd05 	bl	149f0 <z_shell_write>
   14fe6:	491a      	ldr	r1, [pc, #104]	; (15050 <formatted_text_print.constprop.0+0xf0>)
   14fe8:	6960      	ldr	r0, [r4, #20]
   14fea:	f015 f8cd 	bl	2a188 <z_shell_raw_fprintf>
					z_shell_op_cursor_horiz_move(shell,
   14fee:	4641      	mov	r1, r8
   14ff0:	4620      	mov	r0, r4
					offset += idx + 1;
   14ff2:	f109 0501 	add.w	r5, r9, #1
					z_shell_op_cursor_horiz_move(shell,
   14ff6:	f7ff fc67 	bl	148c8 <z_shell_op_cursor_horiz_move>
			z_shell_raw_fprintf(shell->fprintf_ctx, str + offset);
   14ffa:	6960      	ldr	r0, [r4, #20]
   14ffc:	1971      	adds	r1, r6, r5
   14ffe:	f015 f8c3 	bl	2a188 <z_shell_raw_fprintf>
   15002:	6960      	ldr	r0, [r4, #20]
   15004:	4912      	ldr	r1, [pc, #72]	; (15050 <formatted_text_print.constprop.0+0xf0>)
		z_cursor_next_line_move(shell);
		z_shell_op_cursor_horiz_move(shell, terminal_offset);

	}
	z_cursor_next_line_move(shell);
}
   15006:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1500a:	f015 b8bd 	b.w	2a188 <z_shell_raw_fprintf>
			for (idx = 0; idx < length; idx++) {
   1500e:	3701      	adds	r7, #1
   15010:	e7d9      	b.n	14fc6 <formatted_text_print.constprop.0+0x66>
   15012:	461f      	mov	r7, r3
   15014:	6960      	ldr	r0, [r4, #20]
   15016:	f014 fdee 	bl	29bf6 <z_shell_fprintf_buffer_flush>
		z_shell_write(shell, str + offset, length);
   1501a:	463a      	mov	r2, r7
   1501c:	4659      	mov	r1, fp
   1501e:	4620      	mov	r0, r4
   15020:	f7ff fce6 	bl	149f0 <z_shell_write>
		offset += length;
   15024:	443d      	add	r5, r7
		while (isspace((int) (*(str + offset)))) {
   15026:	5d73      	ldrb	r3, [r6, r5]
   15028:	f819 3003 	ldrb.w	r3, [r9, r3]
   1502c:	071b      	lsls	r3, r3, #28
   1502e:	d408      	bmi.n	15042 <formatted_text_print.constprop.0+0xe2>
   15030:	6960      	ldr	r0, [r4, #20]
   15032:	4651      	mov	r1, sl
   15034:	f015 f8a8 	bl	2a188 <z_shell_raw_fprintf>
		z_shell_op_cursor_horiz_move(shell, terminal_offset);
   15038:	4641      	mov	r1, r8
   1503a:	4620      	mov	r0, r4
   1503c:	f7ff fc44 	bl	148c8 <z_shell_op_cursor_horiz_move>
	while (true) {
   15040:	e79e      	b.n	14f80 <formatted_text_print.constprop.0+0x20>
			++offset;
   15042:	3501      	adds	r5, #1
   15044:	e7ef      	b.n	15026 <formatted_text_print.constprop.0+0xc6>
}
   15046:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1504a:	bf00      	nop
   1504c:	00034540 	.word	0x00034540
   15050:	0003329a 	.word	0x0003329a

00015054 <z_shell_help_subcmd_print>:
 * help string
 */
void z_shell_help_subcmd_print(const struct shell *shell,
			       const struct shell_static_entry *parent,
			       const char *description)
{
   15054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15058:	460f      	mov	r7, r1
	const struct shell_static_entry *entry = NULL;
	struct shell_static_entry dloc;
	uint16_t longest = 0U;
	size_t idx = 0;
   1505a:	2100      	movs	r1, #0
{
   1505c:	b08d      	sub	sp, #52	; 0x34
   1505e:	4604      	mov	r4, r0
   15060:	4616      	mov	r6, r2
	uint16_t longest = 0U;
   15062:	460d      	mov	r5, r1

	/* Searching for the longest subcommand to print. */
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   15064:	aa07      	add	r2, sp, #28
   15066:	4638      	mov	r0, r7
   15068:	f101 0801 	add.w	r8, r1, #1
   1506c:	f7ff fb60 	bl	14730 <z_shell_cmd_get>
   15070:	b9a8      	cbnz	r0, 1509e <z_shell_help_subcmd_print+0x4a>
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
	}

	/* No help to print */
	if (longest == 0) {
   15072:	b18d      	cbz	r5, 15098 <z_shell_help_subcmd_print+0x44>
		return;
	}

	if (description != NULL) {
   15074:	b126      	cbz	r6, 15080 <z_shell_help_subcmd_print+0x2c>
		z_shell_fprintf(shell, SHELL_NORMAL, description);
   15076:	4632      	mov	r2, r6
   15078:	2108      	movs	r1, #8
   1507a:	4620      	mov	r0, r4
   1507c:	f7ff fd76 	bl	14b6c <z_shell_fprintf>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   15080:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 15140 <z_shell_help_subcmd_print+0xec>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
   15084:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 15144 <z_shell_help_subcmd_print+0xf0>
		for (uint16_t i = 0; i < tmp; i++) {
   15088:	2100      	movs	r1, #0
	}

	/* Printing subcommands and help string (if exists). */
	idx = 0;

	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   1508a:	1c4b      	adds	r3, r1, #1
   1508c:	aa07      	add	r2, sp, #28
   1508e:	4638      	mov	r0, r7
   15090:	9303      	str	r3, [sp, #12]
   15092:	f7ff fb4d 	bl	14730 <z_shell_cmd_get>
   15096:	b960      	cbnz	r0, 150b2 <z_shell_help_subcmd_print+0x5e>
		help_item_print(shell, entry->syntax, longest, entry->help);
	}
}
   15098:	b00d      	add	sp, #52	; 0x34
   1509a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		longest = Z_MAX(longest, z_shell_strlen(entry->syntax));
   1509e:	6800      	ldr	r0, [r0, #0]
	return str == NULL ? 0U : (uint16_t)strlen(str);
   150a0:	b110      	cbz	r0, 150a8 <z_shell_help_subcmd_print+0x54>
   150a2:	f7f7 f987 	bl	c3b4 <strlen>
   150a6:	b280      	uxth	r0, r0
   150a8:	4285      	cmp	r5, r0
   150aa:	bf38      	it	cc
   150ac:	4605      	movcc	r5, r0
	while ((entry = z_shell_cmd_get(parent, idx++, &dloc)) != NULL) {
   150ae:	4641      	mov	r1, r8
   150b0:	e7d8      	b.n	15064 <z_shell_help_subcmd_print+0x10>
		help_item_print(shell, entry->syntax, longest, entry->help);
   150b2:	e9d0 a900 	ldrd	sl, r9, [r0]
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   150b6:	4640      	mov	r0, r8
   150b8:	f7f7 f97c 	bl	c3b4 <strlen>
   150bc:	9004      	str	r0, [sp, #16]
	if ((item_name == NULL) || (item_name[0] == '\0')) {
   150be:	f1ba 0f00 	cmp.w	sl, #0
   150c2:	d023      	beq.n	1510c <z_shell_help_subcmd_print+0xb8>
   150c4:	f89a 2000 	ldrb.w	r2, [sl]
   150c8:	b302      	cbz	r2, 1510c <z_shell_help_subcmd_print+0xb8>
		uint16_t tmp = item_name_width - strlen(item_name);
   150ca:	4650      	mov	r0, sl
   150cc:	f7f7 f972 	bl	c3b4 <strlen>
		char space = ' ';
   150d0:	2220      	movs	r2, #32
		uint16_t tmp = item_name_width - strlen(item_name);
   150d2:	1a2e      	subs	r6, r5, r0
		char space = ' ';
   150d4:	f88d 201b 	strb.w	r2, [sp, #27]
		z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", tabulator,
   150d8:	4643      	mov	r3, r8
   150da:	4a17      	ldr	r2, [pc, #92]	; (15138 <z_shell_help_subcmd_print+0xe4>)
   150dc:	f8cd a000 	str.w	sl, [sp]
   150e0:	2108      	movs	r1, #8
   150e2:	4620      	mov	r0, r4
   150e4:	f7ff fd42 	bl	14b6c <z_shell_fprintf>
		uint16_t tmp = item_name_width - strlen(item_name);
   150e8:	b2b6      	uxth	r6, r6
		for (uint16_t i = 0; i < tmp; i++) {
   150ea:	2300      	movs	r3, #0
   150ec:	b29a      	uxth	r2, r3
   150ee:	42b2      	cmp	r2, r6
   150f0:	d30e      	bcc.n	15110 <z_shell_help_subcmd_print+0xbc>
		z_shell_fprintf(shell, SHELL_NORMAL, "%s:", tabulator);
   150f2:	4643      	mov	r3, r8
   150f4:	465a      	mov	r2, fp
   150f6:	2108      	movs	r1, #8
   150f8:	4620      	mov	r0, r4
   150fa:	f7ff fd37 	bl	14b6c <z_shell_fprintf>
	if (item_help == NULL) {
   150fe:	f1b9 0f00 	cmp.w	r9, #0
   15102:	d10f      	bne.n	15124 <z_shell_help_subcmd_print+0xd0>
   15104:	490d      	ldr	r1, [pc, #52]	; (1513c <z_shell_help_subcmd_print+0xe8>)
   15106:	6960      	ldr	r0, [r4, #20]
   15108:	f015 f83e 	bl	2a188 <z_shell_raw_fprintf>
		for (uint16_t i = 0; i < tmp; i++) {
   1510c:	9903      	ldr	r1, [sp, #12]
   1510e:	e7bc      	b.n	1508a <z_shell_help_subcmd_print+0x36>
			z_shell_write(shell, &space, 1);
   15110:	2201      	movs	r2, #1
   15112:	f10d 011b 	add.w	r1, sp, #27
   15116:	4620      	mov	r0, r4
   15118:	9305      	str	r3, [sp, #20]
   1511a:	f7ff fc69 	bl	149f0 <z_shell_write>
		for (uint16_t i = 0; i < tmp; i++) {
   1511e:	9b05      	ldr	r3, [sp, #20]
   15120:	3301      	adds	r3, #1
   15122:	e7e3      	b.n	150ec <z_shell_help_subcmd_print+0x98>
	const uint16_t offset = 2 * strlen(tabulator) + item_name_width + 1;
   15124:	9b04      	ldr	r3, [sp, #16]
   15126:	1c6a      	adds	r2, r5, #1
   15128:	eb02 0243 	add.w	r2, r2, r3, lsl #1
	formatted_text_print(shell, item_help, offset, false);
   1512c:	b292      	uxth	r2, r2
   1512e:	4649      	mov	r1, r9
   15130:	4620      	mov	r0, r4
   15132:	f7ff ff15 	bl	14f60 <formatted_text_print.constprop.0>
   15136:	e7e9      	b.n	1510c <z_shell_help_subcmd_print+0xb8>
   15138:	0002fa7a 	.word	0x0002fa7a
   1513c:	0003329a 	.word	0x0003329a
   15140:	0002fe71 	.word	0x0002fe71
   15144:	0002fe5f 	.word	0x0002fe5f

00015148 <z_shell_help_cmd_print>:

void z_shell_help_cmd_print(const struct shell *shell,
			    const struct shell_static_entry *cmd)
{
   15148:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1514a:	4606      	mov	r6, r0
	static const char cmd_sep[] = " - "; /* commands separator */
	uint16_t field_width;

	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   1514c:	6808      	ldr	r0, [r1, #0]
{
   1514e:	460d      	mov	r5, r1
   15150:	b1b8      	cbz	r0, 15182 <z_shell_help_cmd_print+0x3a>
   15152:	f7f7 f92f 	bl	c3b4 <strlen>
   15156:	b284      	uxth	r4, r0
   15158:	4f0b      	ldr	r7, [pc, #44]	; (15188 <z_shell_help_cmd_print+0x40>)
   1515a:	4638      	mov	r0, r7
   1515c:	f7f7 f92a 	bl	c3b4 <strlen>

	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
   15160:	682b      	ldr	r3, [r5, #0]
   15162:	4a0a      	ldr	r2, [pc, #40]	; (1518c <z_shell_help_cmd_print+0x44>)
   15164:	9700      	str	r7, [sp, #0]
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   15166:	4404      	add	r4, r0
	z_shell_fprintf(shell, SHELL_NORMAL, "%s%s", cmd->syntax, cmd_sep);
   15168:	2108      	movs	r1, #8
   1516a:	4630      	mov	r0, r6
   1516c:	f7ff fcfe 	bl	14b6c <z_shell_fprintf>
	field_width = z_shell_strlen(cmd->syntax) + z_shell_strlen(cmd_sep);
   15170:	b2a4      	uxth	r4, r4

	formatted_text_print(shell, cmd->help, field_width, false);
   15172:	6869      	ldr	r1, [r5, #4]
   15174:	4622      	mov	r2, r4
   15176:	4630      	mov	r0, r6
}
   15178:	b003      	add	sp, #12
   1517a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	formatted_text_print(shell, cmd->help, field_width, false);
   1517e:	f7ff beef 	b.w	14f60 <formatted_text_print.constprop.0>
   15182:	4604      	mov	r4, r0
   15184:	e7e8      	b.n	15158 <z_shell_help_cmd_print+0x10>
   15186:	bf00      	nop
   15188:	0002fe6d 	.word	0x0002fe6d
   1518c:	0002fa7a 	.word	0x0002fa7a

00015190 <z_shell_help_request>:

bool z_shell_help_request(const char *str)
{
   15190:	b510      	push	{r4, lr}
	if (!IS_ENABLED(CONFIG_SHELL_HELP_OPT_PARSE)) {
		return false;
	}

	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
   15192:	4907      	ldr	r1, [pc, #28]	; (151b0 <z_shell_help_request+0x20>)
{
   15194:	4604      	mov	r4, r0
	if (!strcmp(str, "-h") || !strcmp(str, "--help")) {
   15196:	f7f7 f903 	bl	c3a0 <strcmp>
   1519a:	b138      	cbz	r0, 151ac <z_shell_help_request+0x1c>
   1519c:	4905      	ldr	r1, [pc, #20]	; (151b4 <z_shell_help_request+0x24>)
   1519e:	4620      	mov	r0, r4
   151a0:	f7f7 f8fe 	bl	c3a0 <strcmp>
   151a4:	fab0 f080 	clz	r0, r0
   151a8:	0940      	lsrs	r0, r0, #5
		return true;
	}

	return false;
}
   151aa:	bd10      	pop	{r4, pc}
		return true;
   151ac:	2001      	movs	r0, #1
   151ae:	e7fc      	b.n	151aa <z_shell_help_request+0x1a>
   151b0:	0002fe63 	.word	0x0002fe63
   151b4:	0002fe66 	.word	0x0002fe66

000151b8 <cmd_resize_default>:
	return 0;
}

static int cmd_resize_default(const struct shell *shell,
			      size_t argc, char **argv)
{
   151b8:	b510      	push	{r4, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   151ba:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   151bc:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   151c0:	069b      	lsls	r3, r3, #26
{
   151c2:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_SETCOL_80);
   151c4:	d503      	bpl.n	151ce <cmd_resize_default+0x16>
   151c6:	4904      	ldr	r1, [pc, #16]	; (151d8 <cmd_resize_default+0x20>)
   151c8:	6940      	ldr	r0, [r0, #20]
   151ca:	f014 ffee 	bl	2a1aa <z_shell_raw_fprintf>
	shell->ctx->vt100_ctx.cons.terminal_wid = SHELL_DEFAULT_TERMINAL_WIDTH;
	shell->ctx->vt100_ctx.cons.terminal_hei = SHELL_DEFAULT_TERMINAL_HEIGHT;
   151ce:	68a3      	ldr	r3, [r4, #8]
   151d0:	4a02      	ldr	r2, [pc, #8]	; (151dc <cmd_resize_default+0x24>)
   151d2:	629a      	str	r2, [r3, #40]	; 0x28

	return 0;
}
   151d4:	2000      	movs	r0, #0
   151d6:	bd10      	pop	{r4, pc}
   151d8:	0002d42e 	.word	0x0002d42e
   151dc:	00500018 	.word	0x00500018

000151e0 <cmd_shell_stats_show>:
{
   151e0:	b508      	push	{r3, lr}
	shell_print(shell, "Lost logs: %lu", shell->stats->log_lost_cnt);
   151e2:	6983      	ldr	r3, [r0, #24]
   151e4:	4a03      	ldr	r2, [pc, #12]	; (151f4 <cmd_shell_stats_show+0x14>)
   151e6:	681b      	ldr	r3, [r3, #0]
   151e8:	2108      	movs	r1, #8
   151ea:	f014 fcc7 	bl	29b7c <shell_fprintf>
}
   151ee:	2000      	movs	r0, #0
   151f0:	bd08      	pop	{r3, pc}
   151f2:	bf00      	nop
   151f4:	0002fe74 	.word	0x0002fe74

000151f8 <cmd_history>:
{
   151f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
			shell_print(shell, "[%3d] %s",
   151fa:	4e0f      	ldr	r6, [pc, #60]	; (15238 <cmd_history+0x40>)
{
   151fc:	4604      	mov	r4, r0
   151fe:	2500      	movs	r5, #0
				    shell->ctx->temp_buff, &len);
   15200:	68a2      	ldr	r2, [r4, #8]
		z_shell_history_get(shell->history, true,
   15202:	68e0      	ldr	r0, [r4, #12]
   15204:	f10d 030e 	add.w	r3, sp, #14
   15208:	f502 72a1 	add.w	r2, r2, #322	; 0x142
   1520c:	2101      	movs	r1, #1
   1520e:	f015 f854 	bl	2a2ba <z_shell_history_get>
		if (len) {
   15212:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   15216:	68a3      	ldr	r3, [r4, #8]
   15218:	b150      	cbz	r0, 15230 <cmd_history+0x38>
			shell_print(shell, "[%3d] %s",
   1521a:	f503 73a1 	add.w	r3, r3, #322	; 0x142
   1521e:	9300      	str	r3, [sp, #0]
   15220:	4632      	mov	r2, r6
   15222:	462b      	mov	r3, r5
   15224:	2108      	movs	r1, #8
   15226:	4620      	mov	r0, r4
   15228:	f014 fca8 	bl	29b7c <shell_fprintf>
	while (1) {
   1522c:	3501      	adds	r5, #1
		z_shell_history_get(shell->history, true,
   1522e:	e7e7      	b.n	15200 <cmd_history+0x8>
	shell->ctx->temp_buff[0] = '\0';
   15230:	f883 0142 	strb.w	r0, [r3, #322]	; 0x142
}
   15234:	b004      	add	sp, #16
   15236:	bd70      	pop	{r4, r5, r6, pc}
   15238:	0002fe84 	.word	0x0002fe84

0001523c <cmd_clear>:
{
   1523c:	b510      	push	{r4, lr}
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   1523e:	6883      	ldr	r3, [r0, #8]
   15240:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   15244:	069a      	lsls	r2, r3, #26
{
   15246:	4604      	mov	r4, r0
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CURSORHOME);
   15248:	d503      	bpl.n	15252 <cmd_clear+0x16>
   1524a:	4907      	ldr	r1, [pc, #28]	; (15268 <cmd_clear+0x2c>)
   1524c:	6940      	ldr	r0, [r0, #20]
   1524e:	f014 ffac 	bl	2a1aa <z_shell_raw_fprintf>
	Z_SHELL_VT100_CMD(shell, SHELL_VT100_CLEARSCREEN);
   15252:	68a3      	ldr	r3, [r4, #8]
   15254:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   15258:	069b      	lsls	r3, r3, #26
   1525a:	d503      	bpl.n	15264 <cmd_clear+0x28>
   1525c:	4903      	ldr	r1, [pc, #12]	; (1526c <cmd_clear+0x30>)
   1525e:	6960      	ldr	r0, [r4, #20]
   15260:	f014 ffa3 	bl	2a1aa <z_shell_raw_fprintf>
}
   15264:	2000      	movs	r0, #0
   15266:	bd10      	pop	{r4, pc}
   15268:	0002d435 	.word	0x0002d435
   1526c:	0002d43a 	.word	0x0002d43a

00015270 <cmd_echo>:
	if (argc == 2) {
   15270:	2902      	cmp	r1, #2
{
   15272:	b507      	push	{r0, r1, r2, lr}
	if (argc == 2) {
   15274:	d10d      	bne.n	15292 <cmd_echo+0x22>
		shell_error(shell, "%s:%s%s", argv[0],
   15276:	6853      	ldr	r3, [r2, #4]
   15278:	9301      	str	r3, [sp, #4]
   1527a:	4b0e      	ldr	r3, [pc, #56]	; (152b4 <cmd_echo+0x44>)
   1527c:	9300      	str	r3, [sp, #0]
   1527e:	6813      	ldr	r3, [r2, #0]
   15280:	4a0d      	ldr	r2, [pc, #52]	; (152b8 <cmd_echo+0x48>)
   15282:	2101      	movs	r1, #1
   15284:	f014 fc7a 	bl	29b7c <shell_fprintf>
   15288:	f06f 0015 	mvn.w	r0, #21
}
   1528c:	b003      	add	sp, #12
   1528e:	f85d fb04 	ldr.w	pc, [sp], #4
	shell_print(shell, "Echo status: %s",
   15292:	6883      	ldr	r3, [r0, #8]
   15294:	4a09      	ldr	r2, [pc, #36]	; (152bc <cmd_echo+0x4c>)
	return sh->ctx->cfg.flags.echo == 1;
   15296:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
   1529a:	f013 0f02 	tst.w	r3, #2
   1529e:	f04f 0108 	mov.w	r1, #8
   152a2:	4b07      	ldr	r3, [pc, #28]	; (152c0 <cmd_echo+0x50>)
   152a4:	bf18      	it	ne
   152a6:	4613      	movne	r3, r2
   152a8:	4a06      	ldr	r2, [pc, #24]	; (152c4 <cmd_echo+0x54>)
   152aa:	f014 fc67 	bl	29b7c <shell_fprintf>
	return 0;
   152ae:	2000      	movs	r0, #0
   152b0:	e7ec      	b.n	1528c <cmd_echo+0x1c>
   152b2:	bf00      	nop
   152b4:	0002fe9b 	.word	0x0002fe9b
   152b8:	0002fe92 	.word	0x0002fe92
   152bc:	0003418a 	.word	0x0003418a
   152c0:	0002fe8e 	.word	0x0002fe8e
   152c4:	0002feb0 	.word	0x0002feb0

000152c8 <cmd_resize>:

static int cmd_resize(const struct shell *shell, size_t argc, char **argv)
{
   152c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	if (argc != 1) {
   152ca:	2901      	cmp	r1, #1
{
   152cc:	b085      	sub	sp, #20
   152ce:	4604      	mov	r4, r0
	if (argc != 1) {
   152d0:	d00d      	beq.n	152ee <cmd_resize+0x26>
		shell_error(shell, "%s:%s%s", argv[0],
   152d2:	6853      	ldr	r3, [r2, #4]
   152d4:	9301      	str	r3, [sp, #4]
   152d6:	4b57      	ldr	r3, [pc, #348]	; (15434 <cmd_resize+0x16c>)
   152d8:	9300      	str	r3, [sp, #0]
   152da:	6813      	ldr	r3, [r2, #0]
   152dc:	4a56      	ldr	r2, [pc, #344]	; (15438 <cmd_resize+0x170>)
   152de:	2101      	movs	r1, #1
   152e0:	f014 fc4c 	bl	29b7c <shell_fprintf>
			    SHELL_MSG_UNKNOWN_PARAMETER, argv[1]);
		return -EINVAL;
   152e4:	f06f 0515 	mvn.w	r5, #21
			   " screen size");
		return -ENOEXEC;
	}

	return 0;
}
   152e8:	4628      	mov	r0, r5
   152ea:	b005      	add	sp, #20
   152ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   152ee:	6883      	ldr	r3, [r0, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   152f0:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_SAVECURSOR);
   152f4:	069a      	lsls	r2, r3, #26
   152f6:	d503      	bpl.n	15300 <cmd_resize+0x38>
   152f8:	4950      	ldr	r1, [pc, #320]	; (1543c <cmd_resize+0x174>)
   152fa:	6940      	ldr	r0, [r0, #20]
   152fc:	f014 ff55 	bl	2a1aa <z_shell_raw_fprintf>
	z_shell_op_cursor_vert_move(shell, -SHELL_MAX_TERMINAL_SIZE);
   15300:	f06f 01f9 	mvn.w	r1, #249	; 0xf9
   15304:	4620      	mov	r0, r4
   15306:	f7ff fac9 	bl	1489c <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, SHELL_MAX_TERMINAL_SIZE);
   1530a:	21fa      	movs	r1, #250	; 0xfa
   1530c:	4620      	mov	r0, r4
   1530e:	f7ff fadb 	bl	148c8 <z_shell_op_cursor_horiz_move>
__ssp_bos_icheck3(memset, void *, int)
   15312:	68a0      	ldr	r0, [r4, #8]
	char c = 0;
   15314:	2500      	movs	r5, #0
   15316:	f44f 7280 	mov.w	r2, #256	; 0x100
   1531a:	4629      	mov	r1, r5
   1531c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   15320:	f88d 500b 	strb.w	r5, [sp, #11]
   15324:	f017 fc8f 	bl	2cc46 <memset>
	z_shell_raw_fprintf(shell->fprintf_ctx, cmd_get_terminal_size);
   15328:	4945      	ldr	r1, [pc, #276]	; (15440 <cmd_resize+0x178>)
   1532a:	6960      	ldr	r0, [r4, #20]
   1532c:	f014 ff3d 	bl	2a1aa <z_shell_raw_fprintf>
	z_shell_fprintf_buffer_flush(shell->fprintf_ctx);
   15330:	6960      	ldr	r0, [r4, #20]
   15332:	f014 fc60 	bl	29bf6 <z_shell_fprintf_buffer_flush>
   15336:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
			(void)shell->iface->api->read(shell->iface, &c,
   1533a:	6860      	ldr	r0, [r4, #4]
   1533c:	6803      	ldr	r3, [r0, #0]
   1533e:	2201      	movs	r2, #1
   15340:	691f      	ldr	r7, [r3, #16]
   15342:	f10d 010b 	add.w	r1, sp, #11
   15346:	ab03      	add	r3, sp, #12
   15348:	47b8      	blx	r7
			if (cnt == 0) {
   1534a:	9b03      	ldr	r3, [sp, #12]
   1534c:	b953      	cbnz	r3, 15364 <cmd_resize+0x9c>
	z_impl_k_busy_wait(usec_to_wait);
   1534e:	3e01      	subs	r6, #1
   15350:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   15354:	b2b6      	uxth	r6, r6
   15356:	f017 fb91 	bl	2ca7c <z_impl_k_busy_wait>
	for (uint16_t i = 0; i < 1000; i++) {
   1535a:	2e00      	cmp	r6, #0
   1535c:	d1ed      	bne.n	1533a <cmd_resize+0x72>
		ret_val = -ENOTSUP;
   1535e:	f06f 0585 	mvn.w	r5, #133	; 0x85
   15362:	e031      	b.n	153c8 <cmd_resize+0x100>
			if ((c != SHELL_VT100_ASCII_ESC) &&
   15364:	f89d 300b 	ldrb.w	r3, [sp, #11]
   15368:	68a2      	ldr	r2, [r4, #8]
   1536a:	2b1b      	cmp	r3, #27
   1536c:	d057      	beq.n	1541e <cmd_resize+0x156>
   1536e:	f892 1142 	ldrb.w	r1, [r2, #322]	; 0x142
   15372:	291b      	cmp	r1, #27
   15374:	d1e1      	bne.n	1533a <cmd_resize+0x72>
			if (c == 'R') { /* End of response from the terminal. */
   15376:	2b52      	cmp	r3, #82	; 0x52
   15378:	d151      	bne.n	1541e <cmd_resize+0x156>
				shell->ctx->temp_buff[buff_idx] = '\0';
   1537a:	4415      	add	r5, r2
   1537c:	2300      	movs	r3, #0
   1537e:	f885 3142 	strb.w	r3, [r5, #322]	; 0x142
				if (shell->ctx->temp_buff[1] != '[') {
   15382:	f892 1143 	ldrb.w	r1, [r2, #323]	; 0x143
   15386:	295b      	cmp	r1, #91	; 0x5b
   15388:	d151      	bne.n	1542e <cmd_resize+0x166>
   1538a:	f502 70a2 	add.w	r0, r2, #324	; 0x144
	*y = 0U;
   1538e:	461f      	mov	r7, r3
				buff_idx = 2U;
   15390:	2602      	movs	r6, #2
				while (shell->ctx->temp_buff[buff_idx] != ';') {
   15392:	f810 1b01 	ldrb.w	r1, [r0], #1
   15396:	3601      	adds	r6, #1
   15398:	293b      	cmp	r1, #59	; 0x3b
   1539a:	b2b6      	uxth	r6, r6
   1539c:	d12a      	bne.n	153f4 <cmd_resize+0x12c>
				if (++buff_idx >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   1539e:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
   153a2:	d0dc      	beq.n	1535e <cmd_resize+0x96>
   153a4:	f506 70a1 	add.w	r0, r6, #322	; 0x142
   153a8:	4410      	add	r0, r2
	*x = 0U;
   153aa:	2300      	movs	r3, #0
				while (shell->ctx->temp_buff[buff_idx]
   153ac:	f810 5b01 	ldrb.w	r5, [r0], #1
   153b0:	bb55      	cbnz	r5, 15408 <cmd_resize+0x140>
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   153b2:	2bfa      	cmp	r3, #250	; 0xfa
   153b4:	bf28      	it	cs
   153b6:	23fa      	movcs	r3, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   153b8:	2ffa      	cmp	r7, #250	; 0xfa
		shell->ctx->vt100_ctx.cons.terminal_wid = x;
   153ba:	8553      	strh	r3, [r2, #42]	; 0x2a
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   153bc:	463b      	mov	r3, r7
   153be:	bf28      	it	cs
   153c0:	23fa      	movcs	r3, #250	; 0xfa
				shell->ctx->temp_buff[0] = 0;
   153c2:	f882 5142 	strb.w	r5, [r2, #322]	; 0x142
		shell->ctx->vt100_ctx.cons.terminal_hei = y;
   153c6:	8513      	strh	r3, [r2, #40]	; 0x28
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   153c8:	68a3      	ldr	r3, [r4, #8]
	return sh->ctx->cfg.flags.use_vt100 == 1;
   153ca:	f8d3 3260 	ldr.w	r3, [r3, #608]	; 0x260
	Z_SHELL_VT100_CMD(sh, SHELL_VT100_RESTORECURSOR);
   153ce:	069b      	lsls	r3, r3, #26
   153d0:	d503      	bpl.n	153da <cmd_resize+0x112>
   153d2:	491c      	ldr	r1, [pc, #112]	; (15444 <cmd_resize+0x17c>)
   153d4:	6960      	ldr	r0, [r4, #20]
   153d6:	f014 fee8 	bl	2a1aa <z_shell_raw_fprintf>
	if (err != 0) {
   153da:	2d00      	cmp	r5, #0
   153dc:	d084      	beq.n	152e8 <cmd_resize+0x20>
		shell->ctx->vt100_ctx.cons.terminal_hei =
   153de:	68a3      	ldr	r3, [r4, #8]
   153e0:	4a19      	ldr	r2, [pc, #100]	; (15448 <cmd_resize+0x180>)
   153e2:	629a      	str	r2, [r3, #40]	; 0x28
		shell_warn(shell, "No response from the terminal, assumed 80x24"
   153e4:	2103      	movs	r1, #3
   153e6:	4a19      	ldr	r2, [pc, #100]	; (1544c <cmd_resize+0x184>)
   153e8:	4620      	mov	r0, r4
   153ea:	f014 fbc7 	bl	29b7c <shell_fprintf>
   153ee:	f06f 0507 	mvn.w	r5, #7
   153f2:	e779      	b.n	152e8 <cmd_resize+0x20>
					*y = *y * 10U +
   153f4:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   153f8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   153fc:	3b30      	subs	r3, #48	; 0x30
					if (buff_idx >=
   153fe:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
					*y = *y * 10U +
   15402:	b29f      	uxth	r7, r3
					if (buff_idx >=
   15404:	d1c5      	bne.n	15392 <cmd_resize+0xca>
   15406:	e7aa      	b.n	1535e <cmd_resize+0x96>
					*x = *x * 10U +
   15408:	eb03 0383 	add.w	r3, r3, r3, lsl #2
					(shell->ctx->temp_buff[buff_idx++] -
   1540c:	3601      	adds	r6, #1
					*x = *x * 10U +
   1540e:	eb05 0543 	add.w	r5, r5, r3, lsl #1
					(shell->ctx->temp_buff[buff_idx++] -
   15412:	b2b6      	uxth	r6, r6
					*x = *x * 10U +
   15414:	3d30      	subs	r5, #48	; 0x30
					if (buff_idx >=
   15416:	2eff      	cmp	r6, #255	; 0xff
					*x = *x * 10U +
   15418:	b2ab      	uxth	r3, r5
					if (buff_idx >=
   1541a:	d9c7      	bls.n	153ac <cmd_resize+0xe4>
   1541c:	e79f      	b.n	1535e <cmd_resize+0x96>
			shell->ctx->temp_buff[buff_idx] = c;
   1541e:	1951      	adds	r1, r2, r5
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   15420:	3501      	adds	r5, #1
   15422:	b2ad      	uxth	r5, r5
   15424:	2d09      	cmp	r5, #9
			shell->ctx->temp_buff[buff_idx] = c;
   15426:	f881 3142 	strb.w	r3, [r1, #322]	; 0x142
			if (++buff_idx > SHELL_CURSOR_POSITION_BUFFER - 1) {
   1542a:	d986      	bls.n	1533a <cmd_resize+0x72>
				shell->ctx->temp_buff[0] = 0;
   1542c:	2300      	movs	r3, #0
   1542e:	f882 3142 	strb.w	r3, [r2, #322]	; 0x142
				return -ENOMEM;
   15432:	e794      	b.n	1535e <cmd_resize+0x96>
   15434:	0002fe9b 	.word	0x0002fe9b
   15438:	0002fe92 	.word	0x0002fe92
   1543c:	0002d440 	.word	0x0002d440
   15440:	000302a7 	.word	0x000302a7
   15444:	0002d444 	.word	0x0002d444
   15448:	00500018 	.word	0x00500018
   1544c:	0002fec1 	.word	0x0002fec1

00015450 <z_shell_history_put>:
	}
}

void z_shell_history_put(struct shell_history *history, uint8_t *line,
			 size_t len)
{
   15450:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);

	/* align to word. */
	total_len += padding;

	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   15454:	6803      	ldr	r3, [r0, #0]
	uint32_t total_len = len + offsetof(struct shell_history_item, data);
   15456:	f102 050c 	add.w	r5, r2, #12
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   1545a:	426f      	negs	r7, r5
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   1545c:	691b      	ldr	r3, [r3, #16]
	uint16_t padding = (~total_len + 1) & (sizeof(void *) - 1);
   1545e:	f007 0703 	and.w	r7, r7, #3
	total_len += padding;
   15462:	443d      	add	r5, r7
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   15464:	429d      	cmp	r5, r3
{
   15466:	4604      	mov	r4, r0
   15468:	4689      	mov	r9, r1
   1546a:	4616      	mov	r6, r2
	if (total_len > ring_buf_capacity_get(history->ring_buf)) {
   1546c:	d83f      	bhi.n	154ee <z_shell_history_put+0x9e>
	history->current = NULL;
   1546e:	2300      	movs	r3, #0
   15470:	60c3      	str	r3, [r0, #12]
		return;
	}

	z_shell_history_mode_exit(history);

	if (len == 0) {
   15472:	2a00      	cmp	r2, #0
   15474:	d03b      	beq.n	154ee <z_shell_history_put+0x9e>
		return;
	}

	l_item = sys_dlist_peek_head(&history->list);
   15476:	f100 0804 	add.w	r8, r0, #4
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1547a:	6840      	ldr	r0, [r0, #4]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1547c:	4580      	cmp	r8, r0
   1547e:	d12b      	bne.n	154d8 <z_shell_history_put+0x88>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   15480:	9301      	str	r3, [sp, #4]
			break;
		}

		ring_buf_put_finish(history->ring_buf, 0);
		if (remove_from_tail(history) == false) {
			__ASSERT_NO_MSG(ring_buf_is_empty(history->ring_buf));
   15482:	f8df a0c0 	ldr.w	sl, [pc, #192]	; 15544 <z_shell_history_put+0xf4>
		claim_len = ring_buf_put_claim(history->ring_buf,
   15486:	6820      	ldr	r0, [r4, #0]
   15488:	462a      	mov	r2, r5
   1548a:	a901      	add	r1, sp, #4
   1548c:	f013 fd4a 	bl	28f24 <ring_buf_put_claim>
		if (claim_len < total_len) {
   15490:	4285      	cmp	r5, r0
		claim_len = ring_buf_put_claim(history->ring_buf,
   15492:	4683      	mov	fp, r0
		if (claim_len < total_len) {
   15494:	d92e      	bls.n	154f4 <z_shell_history_put+0xa4>
				ring_buf_put_claim(history->ring_buf,
   15496:	6820      	ldr	r0, [r4, #0]
   15498:	462a      	mov	r2, r5
   1549a:	a901      	add	r1, sp, #4
   1549c:	f013 fd42 	bl	28f24 <ring_buf_put_claim>
			if (claim2_len == total_len) {
   154a0:	4285      	cmp	r5, r0
   154a2:	d128      	bne.n	154f6 <z_shell_history_put+0xa6>
				ring_buf_put_finish(history->ring_buf,
   154a4:	4659      	mov	r1, fp
   154a6:	6820      	ldr	r0, [r4, #0]
   154a8:	f013 fd58 	bl	28f5c <ring_buf_put_finish>
				padding += claim_len;
   154ac:	445f      	add	r7, fp
   154ae:	b2bf      	uxth	r7, r7
   154b0:	46ab      	mov	fp, r5
			add_to_head(history, h_item, line, len, padding);
   154b2:	9d01      	ldr	r5, [sp, #4]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   154b4:	4632      	mov	r2, r6
   154b6:	4649      	mov	r1, r9
	item->len = len;
   154b8:	812e      	strh	r6, [r5, #8]
	item->padding = padding;
   154ba:	816f      	strh	r7, [r5, #10]
   154bc:	f105 000c 	add.w	r0, r5, #12
   154c0:	f017 fb99 	bl	2cbf6 <memcpy>
 * @return N/A
 */

static inline void sys_dlist_prepend(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const head = list->head;
   154c4:	6862      	ldr	r2, [r4, #4]
			ring_buf_put_finish(history->ring_buf, claim_len);
   154c6:	6820      	ldr	r0, [r4, #0]

	node->next = head;
	node->prev = list;
   154c8:	e9c5 2800 	strd	r2, r8, [r5]
   154cc:	4659      	mov	r1, fp

	head->prev = node;
   154ce:	6055      	str	r5, [r2, #4]
	list->head = node;
   154d0:	6065      	str	r5, [r4, #4]
   154d2:	f013 fd43 	bl	28f5c <ring_buf_put_finish>
			break;
   154d6:	e00a      	b.n	154ee <z_shell_history_put+0x9e>
	h_item = CONTAINER_OF(l_item, struct shell_history_item, dnode);
   154d8:	9001      	str	r0, [sp, #4]
	if (l_item &&
   154da:	2800      	cmp	r0, #0
   154dc:	d0d1      	beq.n	15482 <z_shell_history_put+0x32>
	   (h_item->len == len) &&
   154de:	8903      	ldrh	r3, [r0, #8]
	if (l_item &&
   154e0:	4293      	cmp	r3, r2
   154e2:	d1ce      	bne.n	15482 <z_shell_history_put+0x32>
	   (memcmp(h_item->data, line, len) == 0)) {
   154e4:	300c      	adds	r0, #12
   154e6:	f017 fb78 	bl	2cbda <memcmp>
	   (h_item->len == len) &&
   154ea:	2800      	cmp	r0, #0
   154ec:	d1c9      	bne.n	15482 <z_shell_history_put+0x32>
			 * of ring buffer capacity length.
			 */
			ring_buf_reset(history->ring_buf);
		}
	} while (1);
}
   154ee:	b003      	add	sp, #12
   154f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (claim_len == total_len) {
   154f4:	d0dd      	beq.n	154b2 <z_shell_history_put+0x62>
		ring_buf_put_finish(history->ring_buf, 0);
   154f6:	6820      	ldr	r0, [r4, #0]
   154f8:	2100      	movs	r1, #0
   154fa:	f013 fd2f 	bl	28f5c <ring_buf_put_finish>
	if (sys_dlist_is_empty(&history->list)) {
   154fe:	6863      	ldr	r3, [r4, #4]
   15500:	4598      	cmp	r8, r3
   15502:	d114      	bne.n	1552e <z_shell_history_put+0xde>
			__ASSERT_NO_MSG(ring_buf_is_empty(history->ring_buf));
   15504:	6820      	ldr	r0, [r4, #0]
   15506:	f013 fcfd 	bl	28f04 <ring_buf_is_empty>
   1550a:	b948      	cbnz	r0, 15520 <z_shell_history_put+0xd0>
   1550c:	490b      	ldr	r1, [pc, #44]	; (1553c <z_shell_history_put+0xec>)
   1550e:	480c      	ldr	r0, [pc, #48]	; (15540 <z_shell_history_put+0xf0>)
   15510:	23bd      	movs	r3, #189	; 0xbd
   15512:	4652      	mov	r2, sl
   15514:	f013 fb41 	bl	28b9a <printk>
   15518:	21bd      	movs	r1, #189	; 0xbd
   1551a:	4650      	mov	r0, sl
   1551c:	f013 fd7e 	bl	2901c <assert_post_action>
			ring_buf_reset(history->ring_buf);
   15520:	6823      	ldr	r3, [r4, #0]
 *
 * @param buf Address of ring buffer.
 */
static inline void ring_buf_reset(struct ring_buf *buf)
{
	buf->head = 0;
   15522:	2200      	movs	r2, #0
	buf->tail = 0;
   15524:	e9c3 2200 	strd	r2, r2, [r3]
__ssp_bos_icheck3(memset, void *, int)
   15528:	609a      	str	r2, [r3, #8]
   1552a:	60da      	str	r2, [r3, #12]
	memset(&buf->misc, 0, sizeof(buf->misc));
}
   1552c:	e7ab      	b.n	15486 <z_shell_history_put+0x36>
   1552e:	4620      	mov	r0, r4
   15530:	f014 feae 	bl	2a290 <remove_from_tail.part.0>
		if (remove_from_tail(history) == false) {
   15534:	2800      	cmp	r0, #0
   15536:	d1a6      	bne.n	15486 <z_shell_history_put+0x36>
   15538:	e7e4      	b.n	15504 <z_shell_history_put+0xb4>
   1553a:	bf00      	nop
   1553c:	000302dc 	.word	0x000302dc
   15540:	0002e93e 	.word	0x0002e93e
   15544:	000302ac 	.word	0x000302ac

00015548 <z_shell_wildcard_process>:


enum shell_wildcard_status z_shell_wildcard_process(const struct shell *shell,
					const struct shell_static_entry *cmd,
					const char *pattern)
{
   15548:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1554c:	4607      	mov	r7, r0
   1554e:	b089      	sub	sp, #36	; 0x24
   15550:	4615      	mov	r5, r2
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_NOT_FOUND;

	if (cmd == NULL) {
   15552:	4689      	mov	r9, r1
   15554:	b921      	cbnz	r1, 15560 <z_shell_wildcard_process+0x18>
		return ret_val;
   15556:	2403      	movs	r4, #3
	 * and it will try to add matching commands.
	 */
	ret_val = commands_expand(shell, cmd, pattern);

	return ret_val;
}
   15558:	4620      	mov	r0, r4
   1555a:	b009      	add	sp, #36	; 0x24
   1555c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!z_shell_has_wildcard(pattern)) {
   15560:	4610      	mov	r0, r2
   15562:	f014 fee7 	bl	2a334 <z_shell_has_wildcard>
   15566:	2800      	cmp	r0, #0
   15568:	d0f5      	beq.n	15556 <z_shell_wildcard_process+0xe>
	size_t cnt = 0;
   1556a:	f04f 0800 	mov.w	r8, #0
	size_t cmd_idx = 0;
   1556e:	4641      	mov	r1, r8
	enum shell_wildcard_status ret_val = SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   15570:	2402      	movs	r4, #2
   15572:	e024      	b.n	155be <z_shell_wildcard_process+0x76>
	return str == NULL ? 0U : (uint16_t)strlen(str);
   15574:	465c      	mov	r4, fp
   15576:	e03c      	b.n	155f2 <z_shell_wildcard_process+0xaa>
	completion_addr = strstr(buff, pattern);
   15578:	4629      	mov	r1, r5
   1557a:	f50a 70a1 	add.w	r0, sl, #322	; 0x142
   1557e:	f017 fbb1 	bl	2cce4 <strstr>
	if (!completion_addr) {
   15582:	4606      	mov	r6, r0
   15584:	2800      	cmp	r0, #0
   15586:	d04e      	beq.n	15626 <z_shell_wildcard_process+0xde>
   15588:	f7f6 ff14 	bl	c3b4 <strlen>
	memmove(completion_addr + cmd_len + 1, completion_addr, shift + 1);
   1558c:	b282      	uxth	r2, r0
   1558e:	1c60      	adds	r0, r4, #1
__ssp_bos_icheck3(memmove, void *, const void *)
   15590:	3201      	adds	r2, #1
   15592:	4631      	mov	r1, r6
   15594:	4430      	add	r0, r6
   15596:	f017 fb3c 	bl	2cc12 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1559a:	4622      	mov	r2, r4
   1559c:	4659      	mov	r1, fp
   1559e:	4630      	mov	r0, r6
   155a0:	f017 fb29 	bl	2cbf6 <memcpy>
	completion_addr[cmd_len] = ' ';
   155a4:	f04f 0320 	mov.w	r3, #32
   155a8:	5533      	strb	r3, [r6, r4]
	*buff_len += cmd_len + 1; /* + 1 for space */
   155aa:	f8ba 0040 	ldrh.w	r0, [sl, #64]	; 0x40
   155ae:	4404      	add	r4, r0
   155b0:	3401      	adds	r4, #1
   155b2:	f8aa 4040 	strh.w	r4, [sl, #64]	; 0x40
			cnt++;
   155b6:	f108 0801 	add.w	r8, r8, #1
			ret_val = command_add(shell->ctx->temp_buff,
   155ba:	2400      	movs	r4, #0
   155bc:	9901      	ldr	r1, [sp, #4]
	while ((entry = z_shell_cmd_get(cmd, cmd_idx++, &dloc)) != NULL) {
   155be:	1c4b      	adds	r3, r1, #1
   155c0:	aa03      	add	r2, sp, #12
   155c2:	4648      	mov	r0, r9
   155c4:	9301      	str	r3, [sp, #4]
   155c6:	f7ff f8b3 	bl	14730 <z_shell_cmd_get>
   155ca:	4606      	mov	r6, r0
   155cc:	b1f8      	cbz	r0, 1560e <z_shell_wildcard_process+0xc6>
		if (fnmatch(pattern, entry->syntax, 0) == 0) {
   155ce:	6831      	ldr	r1, [r6, #0]
   155d0:	2200      	movs	r2, #0
   155d2:	4628      	mov	r0, r5
   155d4:	f013 fe59 	bl	2928a <fnmatch>
   155d8:	2800      	cmp	r0, #0
   155da:	d1ef      	bne.n	155bc <z_shell_wildcard_process+0x74>
			ret_val = command_add(shell->ctx->temp_buff,
   155dc:	f8d6 b000 	ldr.w	fp, [r6]
   155e0:	f8d7 a008 	ldr.w	sl, [r7, #8]
   155e4:	f1bb 0f00 	cmp.w	fp, #0
   155e8:	d0c4      	beq.n	15574 <z_shell_wildcard_process+0x2c>
   155ea:	4658      	mov	r0, fp
   155ec:	f7f6 fee2 	bl	c3b4 <strlen>
   155f0:	b284      	uxth	r4, r0
	if ((*buff_len + cmd_len + 1) > CONFIG_SHELL_CMD_BUFF_SIZE) {
   155f2:	f8ba 2040 	ldrh.w	r2, [sl, #64]	; 0x40
   155f6:	3201      	adds	r2, #1
   155f8:	4422      	add	r2, r4
   155fa:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
   155fe:	ddbb      	ble.n	15578 <z_shell_wildcard_process+0x30>
				z_shell_fprintf(shell, SHELL_WARNING,
   15600:	4a0a      	ldr	r2, [pc, #40]	; (1562c <z_shell_wildcard_process+0xe4>)
   15602:	462b      	mov	r3, r5
   15604:	2103      	movs	r1, #3
   15606:	4638      	mov	r0, r7
   15608:	f7ff fab0 	bl	14b6c <z_shell_fprintf>
			ret_val = command_add(shell->ctx->temp_buff,
   1560c:	2401      	movs	r4, #1
	if (cnt > 0) {
   1560e:	f1b8 0f00 	cmp.w	r8, #0
   15612:	d0a1      	beq.n	15558 <z_shell_wildcard_process+0x10>
		z_shell_pattern_remove(shell->ctx->temp_buff,
   15614:	68b8      	ldr	r0, [r7, #8]
   15616:	462a      	mov	r2, r5
   15618:	f100 0140 	add.w	r1, r0, #64	; 0x40
   1561c:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   15620:	f014 fb47 	bl	29cb2 <z_shell_pattern_remove>
	return ret_val;
   15624:	e798      	b.n	15558 <z_shell_wildcard_process+0x10>
		return SHELL_WILDCARD_CMD_NO_MATCH_FOUND;
   15626:	2402      	movs	r4, #2
   15628:	e7f1      	b.n	1560e <z_shell_wildcard_process+0xc6>
   1562a:	bf00      	nop
   1562c:	00030301 	.word	0x00030301

00015630 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
   15630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15634:	4605      	mov	r5, r0
	__asm__ volatile(
   15636:	f04f 0340 	mov.w	r3, #64	; 0x40
   1563a:	f3ef 8611 	mrs	r6, BASEPRI
   1563e:	f383 8812 	msr	BASEPRI_MAX, r3
   15642:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   15646:	4823      	ldr	r0, [pc, #140]	; (156d4 <pm_state_notify+0xa4>)
   15648:	f00e fba6 	bl	23d98 <z_spin_lock_valid>
   1564c:	b968      	cbnz	r0, 1566a <pm_state_notify+0x3a>
   1564e:	4a22      	ldr	r2, [pc, #136]	; (156d8 <pm_state_notify+0xa8>)
   15650:	4922      	ldr	r1, [pc, #136]	; (156dc <pm_state_notify+0xac>)
   15652:	4823      	ldr	r0, [pc, #140]	; (156e0 <pm_state_notify+0xb0>)
   15654:	2381      	movs	r3, #129	; 0x81
   15656:	f013 faa0 	bl	28b9a <printk>
   1565a:	491e      	ldr	r1, [pc, #120]	; (156d4 <pm_state_notify+0xa4>)
   1565c:	4821      	ldr	r0, [pc, #132]	; (156e4 <pm_state_notify+0xb4>)
   1565e:	f013 fa9c 	bl	28b9a <printk>
   15662:	481d      	ldr	r0, [pc, #116]	; (156d8 <pm_state_notify+0xa8>)
   15664:	2181      	movs	r1, #129	; 0x81
   15666:	f013 fcd9 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   1566a:	481a      	ldr	r0, [pc, #104]	; (156d4 <pm_state_notify+0xa4>)
   1566c:	f00e fbb2 	bl	23dd4 <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   15670:	4b1d      	ldr	r3, [pc, #116]	; (156e8 <pm_state_notify+0xb8>)
   15672:	681c      	ldr	r4, [r3, #0]
   15674:	2c00      	cmp	r4, #0
   15676:	bf38      	it	cc
   15678:	2400      	movcc	r4, #0
   1567a:	b19c      	cbz	r4, 156a4 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
   1567c:	4f1b      	ldr	r7, [pc, #108]	; (156ec <pm_state_notify+0xbc>)
   1567e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 156f8 <pm_state_notify+0xc8>
   15682:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
   15686:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   1568a:	2d00      	cmp	r5, #0
   1568c:	bf08      	it	eq
   1568e:	4613      	moveq	r3, r2
		if (callback) {
   15690:	b12b      	cbz	r3, 1569e <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
   15692:	f898 2014 	ldrb.w	r2, [r8, #20]
   15696:	fb09 f202 	mul.w	r2, r9, r2
   1569a:	5cb8      	ldrb	r0, [r7, r2]
   1569c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1569e:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
   156a0:	2c00      	cmp	r4, #0
   156a2:	d1f0      	bne.n	15686 <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   156a4:	480b      	ldr	r0, [pc, #44]	; (156d4 <pm_state_notify+0xa4>)
   156a6:	f00e fb85 	bl	23db4 <z_spin_unlock_valid>
   156aa:	b968      	cbnz	r0, 156c8 <pm_state_notify+0x98>
   156ac:	4a0a      	ldr	r2, [pc, #40]	; (156d8 <pm_state_notify+0xa8>)
   156ae:	4910      	ldr	r1, [pc, #64]	; (156f0 <pm_state_notify+0xc0>)
   156b0:	480b      	ldr	r0, [pc, #44]	; (156e0 <pm_state_notify+0xb0>)
   156b2:	23ac      	movs	r3, #172	; 0xac
   156b4:	f013 fa71 	bl	28b9a <printk>
   156b8:	4906      	ldr	r1, [pc, #24]	; (156d4 <pm_state_notify+0xa4>)
   156ba:	480e      	ldr	r0, [pc, #56]	; (156f4 <pm_state_notify+0xc4>)
   156bc:	f013 fa6d 	bl	28b9a <printk>
   156c0:	4805      	ldr	r0, [pc, #20]	; (156d8 <pm_state_notify+0xa8>)
   156c2:	21ac      	movs	r1, #172	; 0xac
   156c4:	f013 fcaa 	bl	2901c <assert_post_action>
	__asm__ volatile(
   156c8:	f386 8811 	msr	BASEPRI, r6
   156cc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
   156d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   156d4:	20002668 	.word	0x20002668
   156d8:	0002e9fe 	.word	0x0002e9fe
   156dc:	0002ea50 	.word	0x0002ea50
   156e0:	0002e93e 	.word	0x0002e93e
   156e4:	0002ea65 	.word	0x0002ea65
   156e8:	2000266c 	.word	0x2000266c
   156ec:	20002678 	.word	0x20002678
   156f0:	0002ea24 	.word	0x0002ea24
   156f4:	0002ea3b 	.word	0x0002ea3b
   156f8:	20001f98 	.word	0x20001f98

000156fc <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   156fc:	f000 031f 	and.w	r3, r0, #31
   15700:	2201      	movs	r2, #1
   15702:	409a      	lsls	r2, r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15704:	4b0a      	ldr	r3, [pc, #40]	; (15730 <atomic_test_and_set_bit.constprop.0+0x34>)
   15706:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1570a:	0940      	lsrs	r0, r0, #5
   1570c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   15710:	e850 3f00 	ldrex	r3, [r0]
   15714:	ea43 0102 	orr.w	r1, r3, r2
   15718:	e840 1c00 	strex	ip, r1, [r0]
   1571c:	f1bc 0f00 	cmp.w	ip, #0
   15720:	d1f6      	bne.n	15710 <atomic_test_and_set_bit.constprop.0+0x14>
   15722:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
   15726:	421a      	tst	r2, r3
}
   15728:	bf14      	ite	ne
   1572a:	2001      	movne	r0, #1
   1572c:	2000      	moveq	r0, #0
   1572e:	4770      	bx	lr
   15730:	20002684 	.word	0x20002684

00015734 <pm_system_resume>:

void pm_system_resume(void)
{
   15734:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
   15736:	4b1d      	ldr	r3, [pc, #116]	; (157ac <pm_system_resume+0x78>)
   15738:	7d1d      	ldrb	r5, [r3, #20]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1573a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   1573e:	f005 031f 	and.w	r3, r5, #31
   15742:	2201      	movs	r2, #1
   15744:	409a      	lsls	r2, r3
   15746:	4b1a      	ldr	r3, [pc, #104]	; (157b0 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15748:	0969      	lsrs	r1, r5, #5
{
   1574a:	b085      	sub	sp, #20
   1574c:	43d0      	mvns	r0, r2
   1574e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15752:	e853 1f00 	ldrex	r1, [r3]
   15756:	ea01 0400 	and.w	r4, r1, r0
   1575a:	e843 4c00 	strex	ip, r4, [r3]
   1575e:	f1bc 0f00 	cmp.w	ip, #0
   15762:	d1f6      	bne.n	15752 <pm_system_resume+0x1e>
   15764:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
   15768:	4211      	tst	r1, r2
   1576a:	d017      	beq.n	1579c <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
   1576c:	4c11      	ldr	r4, [pc, #68]	; (157b4 <pm_system_resume+0x80>)
   1576e:	220c      	movs	r2, #12
   15770:	fb02 4205 	mla	r2, r2, r5, r4
   15774:	ca07      	ldmia	r2, {r0, r1, r2}
   15776:	ab01      	add	r3, sp, #4
   15778:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
   1577c:	4a0e      	ldr	r2, [pc, #56]	; (157b8 <pm_system_resume+0x84>)
   1577e:	b17a      	cbz	r2, 157a0 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
   15780:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   15784:	f015 f821 	bl	2a7ca <pm_power_state_exit_post_ops>
		pm_state_notify(false);
   15788:	2000      	movs	r0, #0
   1578a:	f7ff ff51 	bl	15630 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
   1578e:	230c      	movs	r3, #12
   15790:	436b      	muls	r3, r5
   15792:	2200      	movs	r2, #0
   15794:	18e1      	adds	r1, r4, r3
   15796:	50e2      	str	r2, [r4, r3]
   15798:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
   1579c:	b005      	add	sp, #20
   1579e:	bd30      	pop	{r4, r5, pc}
   157a0:	f382 8811 	msr	BASEPRI, r2
   157a4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   157a8:	e7ee      	b.n	15788 <pm_system_resume+0x54>
   157aa:	bf00      	nop
   157ac:	20001f98 	.word	0x20001f98
   157b0:	20002674 	.word	0x20002674
   157b4:	20002678 	.word	0x20002678
   157b8:	0002a7cb 	.word	0x0002a7cb

000157bc <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
   157bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
   157c0:	4b37      	ldr	r3, [pc, #220]	; (158a0 <pm_system_suspend+0xe4>)
   157c2:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 158b8 <pm_system_suspend+0xfc>
   157c6:	7d1c      	ldrb	r4, [r3, #20]
{
   157c8:	b088      	sub	sp, #32
   157ca:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
   157cc:	4620      	mov	r0, r4
   157ce:	f7ff ff95 	bl	156fc <atomic_test_and_set_bit.constprop.0>
   157d2:	b960      	cbnz	r0, 157ee <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
   157d4:	466e      	mov	r6, sp
   157d6:	463a      	mov	r2, r7
   157d8:	4621      	mov	r1, r4
   157da:	4630      	mov	r0, r6
   157dc:	f014 fdf2 	bl	2a3c4 <pm_policy_next_state>
   157e0:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   157e4:	250c      	movs	r5, #12
   157e6:	fb05 8504 	mla	r5, r5, r4, r8
   157ea:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
   157ee:	230c      	movs	r3, #12
   157f0:	4363      	muls	r3, r4
   157f2:	eb08 0203 	add.w	r2, r8, r3
   157f6:	f818 0003 	ldrb.w	r0, [r8, r3]
   157fa:	0965      	lsrs	r5, r4, #5
   157fc:	f004 061f 	and.w	r6, r4, #31
   15800:	b3c8      	cbz	r0, 15876 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
   15802:	1c7b      	adds	r3, r7, #1
   15804:	d00f      	beq.n	15826 <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
   15806:	f8d2 e008 	ldr.w	lr, [r2, #8]
   1580a:	4826      	ldr	r0, [pc, #152]	; (158a4 <pm_system_suspend+0xe8>)
   1580c:	4a26      	ldr	r2, [pc, #152]	; (158a8 <pm_system_suspend+0xec>)
   1580e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
   15812:	2100      	movs	r1, #0
   15814:	2300      	movs	r3, #0
   15816:	fbec 010e 	umlal	r0, r1, ip, lr
   1581a:	f7ea fd11 	bl	240 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
   1581e:	2101      	movs	r1, #1
   15820:	1a38      	subs	r0, r7, r0
   15822:	f011 fd53 	bl	272cc <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
   15826:	f010 f95b 	bl	25ae0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
   1582a:	2001      	movs	r0, #1
   1582c:	f7ff ff00 	bl	15630 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   15830:	f3bf 8f5b 	dmb	ish
   15834:	4b1d      	ldr	r3, [pc, #116]	; (158ac <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   15836:	2201      	movs	r2, #1
   15838:	40b2      	lsls	r2, r6
   1583a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
   1583e:	e853 1f00 	ldrex	r1, [r3]
   15842:	4311      	orrs	r1, r2
   15844:	e843 1000 	strex	r0, r1, [r3]
   15848:	2800      	cmp	r0, #0
   1584a:	d1f8      	bne.n	1583e <pm_system_suspend+0x82>
   1584c:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
   15850:	230c      	movs	r3, #12
   15852:	fb03 8404 	mla	r4, r3, r4, r8
   15856:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
   1585a:	ab05      	add	r3, sp, #20
   1585c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
   15860:	4a13      	ldr	r2, [pc, #76]	; (158b0 <pm_system_suspend+0xf4>)
   15862:	b11a      	cbz	r2, 1586c <pm_system_suspend+0xb0>
		pm_power_state_set(info);
   15864:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   15868:	f014 ff9c 	bl	2a7a4 <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
   1586c:	f7ff ff62 	bl	15734 <pm_system_resume>
	k_sched_unlock();
   15870:	f010 fe7a 	bl	26568 <k_sched_unlock>
	bool ret = true;
   15874:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   15876:	4a0f      	ldr	r2, [pc, #60]	; (158b4 <pm_system_suspend+0xf8>)
   15878:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
   1587c:	2301      	movs	r3, #1
   1587e:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   15880:	43db      	mvns	r3, r3
   15882:	eb02 0585 	add.w	r5, r2, r5, lsl #2
   15886:	e855 2f00 	ldrex	r2, [r5]
   1588a:	401a      	ands	r2, r3
   1588c:	e845 2100 	strex	r1, r2, [r5]
   15890:	2900      	cmp	r1, #0
   15892:	d1f8      	bne.n	15886 <pm_system_suspend+0xca>
   15894:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
   15898:	b008      	add	sp, #32
   1589a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1589e:	bf00      	nop
   158a0:	20001f98 	.word	0x20001f98
   158a4:	000f423f 	.word	0x000f423f
   158a8:	000f4240 	.word	0x000f4240
   158ac:	20002674 	.word	0x20002674
   158b0:	0002a7a5 	.word	0x0002a7a5
   158b4:	20002684 	.word	0x20002684
   158b8:	20002678 	.word	0x20002678

000158bc <scan_default_param_set>:
{
	return (mode & MODE_CHECK) != 0;
}

static void scan_default_param_set(void)
{
   158bc:	b570      	push	{r4, r5, r6, lr}
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   158be:	4d06      	ldr	r5, [pc, #24]	; (158d8 <scan_default_param_set+0x1c>)
   158c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
   158c2:	b086      	sub	sp, #24
	struct bt_le_scan_param *scan_param = BT_LE_SCAN_PASSIVE;
   158c4:	ac01      	add	r4, sp, #4
   158c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	/* Set the default parameters. */
	bt_scan.scan_param = *scan_param;
   158c8:	ae01      	add	r6, sp, #4
   158ca:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   158cc:	4c03      	ldr	r4, [pc, #12]	; (158dc <scan_default_param_set+0x20>)
   158ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   158d0:	682b      	ldr	r3, [r5, #0]
   158d2:	6023      	str	r3, [r4, #0]
}
   158d4:	b006      	add	sp, #24
   158d6:	bd70      	pop	{r4, r5, r6, pc}
   158d8:	0002d3a0 	.word	0x0002d3a0
   158dc:	200026e0 	.word	0x200026e0

000158e0 <adv_data_found>:
		control->filter_cnt++;
	}
}

static bool adv_data_found(struct bt_data *data, void *user_data)
{
   158e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_scan_control *scan_control =
			(struct bt_scan_control *)user_data;

	switch (data->type) {
   158e4:	7803      	ldrb	r3, [r0, #0]
   158e6:	2b09      	cmp	r3, #9
{
   158e8:	4605      	mov	r5, r0
   158ea:	460c      	mov	r4, r1
	switch (data->type) {
   158ec:	d11c      	bne.n	15928 <adv_data_found+0x48>
	return CONFIG_BT_SCAN_NAME_CNT && bt_scan.scan_filters.name.enabled;
   158ee:	4e11      	ldr	r6, [pc, #68]	; (15934 <adv_data_found+0x54>)
	if (is_name_filter_enabled()) {
   158f0:	f896 3041 	ldrb.w	r3, [r6, #65]	; 0x41
   158f4:	b1c3      	cbz	r3, 15928 <adv_data_found+0x48>
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   158f6:	f896 a040 	ldrb.w	sl, [r6, #64]	; 0x40
	uint8_t data_len = data->data_len;
   158fa:	f890 8001 	ldrb.w	r8, [r0, #1]
	for (size_t i = 0; i < counter; i++) {
   158fe:	2700      	movs	r7, #0
   15900:	4557      	cmp	r7, sl
   15902:	d211      	bcs.n	15928 <adv_data_found+0x48>
		if (adv_name_cmp(data->data,
   15904:	eb06 1947 	add.w	r9, r6, r7, lsl #5
	return strncmp(target_name, data, data_len) == 0;
   15908:	6869      	ldr	r1, [r5, #4]
   1590a:	4642      	mov	r2, r8
   1590c:	4648      	mov	r0, r9
   1590e:	f017 f9b7 	bl	2cc80 <strncmp>
		if (adv_name_cmp(data->data,
   15912:	b960      	cbnz	r0, 1592e <adv_data_found+0x4e>
			control->filter_match_cnt++;
   15914:	7863      	ldrb	r3, [r4, #1]
			control->filter_status.name.name =
   15916:	f8c4 9018 	str.w	r9, [r4, #24]
			control->filter_match_cnt++;
   1591a:	3301      	adds	r3, #1
   1591c:	7063      	strb	r3, [r4, #1]
			control->filter_status.name.match = true;
   1591e:	2301      	movs	r3, #1
			control->filter_status.name.len = data_len;
   15920:	f884 801c 	strb.w	r8, [r4, #28]
			control->filter_status.name.match = true;
   15924:	7523      	strb	r3, [r4, #20]
			control->filter_match = true;
   15926:	70a3      	strb	r3, [r4, #2]
	default:
		break;
	}

	return true;
}
   15928:	2001      	movs	r0, #1
   1592a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (size_t i = 0; i < counter; i++) {
   1592e:	3701      	adds	r7, #1
   15930:	e7e6      	b.n	15900 <adv_data_found+0x20>
   15932:	bf00      	nop
   15934:	20002688 	.word	0x20002688

00015938 <notify_filter_matched.constprop.0>:
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   15938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1593a:	4b0a      	ldr	r3, [pc, #40]	; (15964 <notify_filter_matched.constprop.0+0x2c>)
   1593c:	681c      	ldr	r4, [r3, #0]
static void notify_filter_matched(struct bt_scan_device_info *device_info,
   1593e:	4605      	mov	r5, r0
   15940:	460e      	mov	r6, r1
   15942:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15944:	b10c      	cbz	r4, 1594a <notify_filter_matched.constprop.0+0x12>
   15946:	3c04      	subs	r4, #4
   15948:	b904      	cbnz	r4, 1594c <notify_filter_matched.constprop.0+0x14>
}
   1594a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->cb_addr->filter_match) {
   1594c:	6823      	ldr	r3, [r4, #0]
   1594e:	681b      	ldr	r3, [r3, #0]
   15950:	b11b      	cbz	r3, 1595a <notify_filter_matched.constprop.0+0x22>
			cb->cb_addr->filter_match(device_info, filter_match,
   15952:	463a      	mov	r2, r7
   15954:	4631      	mov	r1, r6
   15956:	4628      	mov	r0, r5
   15958:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1595a:	1d23      	adds	r3, r4, #4
   1595c:	d0f5      	beq.n	1594a <notify_filter_matched.constprop.0+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1595e:	6864      	ldr	r4, [r4, #4]
   15960:	e7f0      	b.n	15944 <notify_filter_matched.constprop.0+0xc>
   15962:	bf00      	nop
   15964:	200026fc 	.word	0x200026fc

00015968 <bt_scan_cb_register>:
	if (!cb) {
   15968:	b150      	cbz	r0, 15980 <bt_scan_cb_register+0x18>
	parent->next = child;
   1596a:	2300      	movs	r3, #0
   1596c:	6043      	str	r3, [r0, #4]
Z_GENLIST_APPEND(slist, snode)
   1596e:	4b05      	ldr	r3, [pc, #20]	; (15984 <bt_scan_cb_register+0x1c>)
   15970:	6859      	ldr	r1, [r3, #4]
	sys_slist_append(&callback_list, &cb->node);
   15972:	1d02      	adds	r2, r0, #4
   15974:	b911      	cbnz	r1, 1597c <bt_scan_cb_register+0x14>
	list->head = node;
   15976:	e9c3 2200 	strd	r2, r2, [r3]
}
   1597a:	4770      	bx	lr
	parent->next = child;
   1597c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1597e:	605a      	str	r2, [r3, #4]
}
   15980:	4770      	bx	lr
   15982:	bf00      	nop
   15984:	200026fc 	.word	0x200026fc

00015988 <bt_scan_filter_add>:
{
   15988:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1598c:	4604      	mov	r4, r0
	if (!data) {
   1598e:	460f      	mov	r7, r1
   15990:	2900      	cmp	r1, #0
   15992:	d040      	beq.n	15a16 <bt_scan_filter_add+0x8e>
	return z_impl_k_mutex_lock(mutex, timeout);
   15994:	4821      	ldr	r0, [pc, #132]	; (15a1c <bt_scan_filter_add+0x94>)
   15996:	f04f 32ff 	mov.w	r2, #4294967295
   1599a:	f04f 33ff 	mov.w	r3, #4294967295
   1599e:	f00e fe73 	bl	24688 <z_impl_k_mutex_lock>
	switch (type) {
   159a2:	b164      	cbz	r4, 159be <bt_scan_filter_add+0x36>
   159a4:	3c01      	subs	r4, #1
   159a6:	2c04      	cmp	r4, #4
   159a8:	bf94      	ite	ls
   159aa:	f06f 050b 	mvnls.w	r5, #11
   159ae:	f06f 0515 	mvnhi.w	r5, #21
	return z_impl_k_mutex_unlock(mutex);
   159b2:	481a      	ldr	r0, [pc, #104]	; (15a1c <bt_scan_filter_add+0x94>)
   159b4:	f00e ff68 	bl	24888 <z_impl_k_mutex_unlock>
}
   159b8:	4628      	mov	r0, r5
   159ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint8_t counter = bt_scan.scan_filters.name.cnt;
   159be:	4e18      	ldr	r6, [pc, #96]	; (15a20 <bt_scan_filter_add+0x98>)
   159c0:	f896 9040 	ldrb.w	r9, [r6, #64]	; 0x40
	if (counter >= CONFIG_BT_SCAN_NAME_CNT) {
   159c4:	f1b9 0f01 	cmp.w	r9, #1
   159c8:	d81f      	bhi.n	15a0a <bt_scan_filter_add+0x82>
	name_len = strlen(name);
   159ca:	4638      	mov	r0, r7
   159cc:	f7f6 fcf2 	bl	c3b4 <strlen>
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   159d0:	1e43      	subs	r3, r0, #1
   159d2:	2b1f      	cmp	r3, #31
	name_len = strlen(name);
   159d4:	4680      	mov	r8, r0
	if ((name_len == 0) || (name_len > CONFIG_BT_SCAN_NAME_MAX_LEN)) {
   159d6:	d81b      	bhi.n	15a10 <bt_scan_filter_add+0x88>
		if (!strcmp(bt_scan.scan_filters.name.target_name[i], name)) {
   159d8:	46b2      	mov	sl, r6
	for (size_t i = 0; i < counter; i++) {
   159da:	45a1      	cmp	r9, r4
   159dc:	d80c      	bhi.n	159f8 <bt_scan_filter_add+0x70>
   159de:	4642      	mov	r2, r8
   159e0:	4639      	mov	r1, r7
   159e2:	eb06 1049 	add.w	r0, r6, r9, lsl #5
   159e6:	f017 f906 	bl	2cbf6 <memcpy>
	bt_scan.scan_filters.name.cnt++;
   159ea:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
   159ee:	3301      	adds	r3, #1
   159f0:	f886 3040 	strb.w	r3, [r6, #64]	; 0x40
	return 0;
   159f4:	2500      	movs	r5, #0
   159f6:	e7dc      	b.n	159b2 <bt_scan_filter_add+0x2a>
		if (!strcmp(bt_scan.scan_filters.name.target_name[i], name)) {
   159f8:	4639      	mov	r1, r7
   159fa:	4650      	mov	r0, sl
   159fc:	f7f6 fcd0 	bl	c3a0 <strcmp>
	for (size_t i = 0; i < counter; i++) {
   15a00:	2401      	movs	r4, #1
		if (!strcmp(bt_scan.scan_filters.name.target_name[i], name)) {
   15a02:	4605      	mov	r5, r0
   15a04:	2800      	cmp	r0, #0
   15a06:	d1e8      	bne.n	159da <bt_scan_filter_add+0x52>
   15a08:	e7d3      	b.n	159b2 <bt_scan_filter_add+0x2a>
		return -ENOMEM;
   15a0a:	f06f 050b 	mvn.w	r5, #11
   15a0e:	e7d0      	b.n	159b2 <bt_scan_filter_add+0x2a>
		return -EINVAL;
   15a10:	f06f 0515 	mvn.w	r5, #21
   15a14:	e7cd      	b.n	159b2 <bt_scan_filter_add+0x2a>
		return -EINVAL;
   15a16:	f06f 0515 	mvn.w	r5, #21
   15a1a:	e7cd      	b.n	159b8 <bt_scan_filter_add+0x30>
   15a1c:	20000844 	.word	0x20000844
   15a20:	20002688 	.word	0x20002688

00015a24 <bt_scan_filter_remove_all>:
{
   15a24:	b510      	push	{r4, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
   15a26:	4c0d      	ldr	r4, [pc, #52]	; (15a5c <bt_scan_filter_remove_all+0x38>)
   15a28:	f04f 32ff 	mov.w	r2, #4294967295
   15a2c:	f04f 33ff 	mov.w	r3, #4294967295
   15a30:	4620      	mov	r0, r4
   15a32:	f00e fe29 	bl	24688 <z_impl_k_mutex_lock>
	name_filter->cnt = 0;
   15a36:	4b0a      	ldr	r3, [pc, #40]	; (15a60 <bt_scan_filter_remove_all+0x3c>)
   15a38:	2200      	movs	r2, #0
   15a3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	short_name_filter->cnt = 0;
   15a3e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	addr_filter->cnt = 0;
   15a42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	uuid_filter->cnt = 0;
   15a46:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	appearance_filter->cnt = 0;
   15a4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
	manufacturer_data_filter->cnt = 0;
   15a4e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
	return z_impl_k_mutex_unlock(mutex);
   15a52:	4620      	mov	r0, r4
}
   15a54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   15a58:	f00e bf16 	b.w	24888 <z_impl_k_mutex_unlock>
   15a5c:	20000844 	.word	0x20000844
   15a60:	20002688 	.word	0x20002688

00015a64 <bt_scan_filter_disable>:
	bt_scan.scan_filters.name.enabled = false;
   15a64:	4b07      	ldr	r3, [pc, #28]	; (15a84 <bt_scan_filter_disable+0x20>)
   15a66:	2200      	movs	r2, #0
   15a68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	bt_scan.scan_filters.short_name.enabled = false;
   15a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
	bt_scan.scan_filters.addr.enabled = false;
   15a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	bt_scan.scan_filters.uuid.enabled = false;
   15a74:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	bt_scan.scan_filters.appearance.enabled = false;
   15a78:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	bt_scan.scan_filters.manufacturer_data.enabled = false;
   15a7c:	f883 204f 	strb.w	r2, [r3, #79]	; 0x4f
}
   15a80:	4770      	bx	lr
   15a82:	bf00      	nop
   15a84:	20002688 	.word	0x20002688

00015a88 <bt_scan_filter_enable>:
{
   15a88:	b508      	push	{r3, lr}
	if (!check_filter_mode(mode)) {
   15a8a:	0683      	lsls	r3, r0, #26
   15a8c:	d025      	beq.n	15ada <bt_scan_filter_enable+0x52>
	bt_scan_filter_disable();
   15a8e:	f7ff ffe9 	bl	15a64 <bt_scan_filter_disable>
	if (mode & BT_SCAN_ADDR_FILTER) {
   15a92:	4b13      	ldr	r3, [pc, #76]	; (15ae0 <bt_scan_filter_enable+0x58>)
   15a94:	f010 0f02 	tst.w	r0, #2
		filters->addr.enabled = true;
   15a98:	bf1c      	itt	ne
   15a9a:	2201      	movne	r2, #1
   15a9c:	f883 2045 	strbne.w	r2, [r3, #69]	; 0x45
	if (mode & BT_SCAN_NAME_FILTER) {
   15aa0:	07c2      	lsls	r2, r0, #31
		filters->name.enabled = true;
   15aa2:	bf44      	itt	mi
   15aa4:	2201      	movmi	r2, #1
   15aa6:	f883 2041 	strbmi.w	r2, [r3, #65]	; 0x41
	if (mode & BT_SCAN_SHORT_NAME_FILTER) {
   15aaa:	06c2      	lsls	r2, r0, #27
		filters->short_name.enabled = true;
   15aac:	bf44      	itt	mi
   15aae:	2201      	movmi	r2, #1
   15ab0:	f883 2043 	strbmi.w	r2, [r3, #67]	; 0x43
	if (mode & BT_SCAN_UUID_FILTER) {
   15ab4:	0742      	lsls	r2, r0, #29
		filters->uuid.enabled = true;
   15ab6:	bf44      	itt	mi
   15ab8:	2201      	movmi	r2, #1
   15aba:	f883 2049 	strbmi.w	r2, [r3, #73]	; 0x49
	if (mode & BT_SCAN_APPEARANCE_FILTER) {
   15abe:	0702      	lsls	r2, r0, #28
		filters->appearance.enabled = true;
   15ac0:	bf44      	itt	mi
   15ac2:	2201      	movmi	r2, #1
   15ac4:	f883 204d 	strbmi.w	r2, [r3, #77]	; 0x4d
	if (mode & BT_SCAN_MANUFACTURER_DATA_FILTER) {
   15ac8:	0682      	lsls	r2, r0, #26
		filters->manufacturer_data.enabled = true;
   15aca:	bf44      	itt	mi
   15acc:	2201      	movmi	r2, #1
   15ace:	f883 204f 	strbmi.w	r2, [r3, #79]	; 0x4f
	filters->all_mode = match_all;
   15ad2:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
	return 0;
   15ad6:	2000      	movs	r0, #0
}
   15ad8:	bd08      	pop	{r3, pc}
		return -EINVAL;
   15ada:	f06f 0015 	mvn.w	r0, #21
   15ade:	e7fb      	b.n	15ad8 <bt_scan_filter_enable+0x50>
   15ae0:	20002688 	.word	0x20002688

00015ae4 <scan_connect_with_target.part.0>:
static void scan_connect_with_target(struct bt_scan_control *control,
   15ae4:	b570      	push	{r4, r5, r6, lr}
   15ae6:	b086      	sub	sp, #24
   15ae8:	460e      	mov	r6, r1
   15aea:	4605      	mov	r5, r0
	bt_scan_stop();
   15aec:	f014 fc6f 	bl	2a3ce <bt_scan_stop>
			       BT_CONN_LE_CREATE_CONN,
   15af0:	4b18      	ldr	r3, [pc, #96]	; (15b54 <scan_connect_with_target.part.0+0x70>)
   15af2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   15af4:	ac02      	add	r4, sp, #8
   15af6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	err = bt_conn_le_create(addr,
   15afa:	ab01      	add	r3, sp, #4
   15afc:	4621      	mov	r1, r4
   15afe:	4a16      	ldr	r2, [pc, #88]	; (15b58 <scan_connect_with_target.part.0+0x74>)
   15b00:	4630      	mov	r0, r6
   15b02:	f004 fb7f 	bl	1a204 <bt_conn_le_create>
	if (err) {
   15b06:	4b15      	ldr	r3, [pc, #84]	; (15b5c <scan_connect_with_target.part.0+0x78>)
   15b08:	3508      	adds	r5, #8
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15b0a:	681c      	ldr	r4, [r3, #0]
	if (err) {
   15b0c:	b168      	cbz	r0, 15b2a <scan_connect_with_target.part.0+0x46>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15b0e:	b10c      	cbz	r4, 15b14 <scan_connect_with_target.part.0+0x30>
   15b10:	3c04      	subs	r4, #4
   15b12:	b90c      	cbnz	r4, 15b18 <scan_connect_with_target.part.0+0x34>
}
   15b14:	b006      	add	sp, #24
   15b16:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->cb_addr->connecting_error) {
   15b18:	6823      	ldr	r3, [r4, #0]
   15b1a:	689b      	ldr	r3, [r3, #8]
   15b1c:	b10b      	cbz	r3, 15b22 <scan_connect_with_target.part.0+0x3e>
			cb->cb_addr->connecting_error(device_info);
   15b1e:	4628      	mov	r0, r5
   15b20:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15b22:	1d22      	adds	r2, r4, #4
   15b24:	d0f6      	beq.n	15b14 <scan_connect_with_target.part.0+0x30>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15b26:	6864      	ldr	r4, [r4, #4]
   15b28:	e7f1      	b.n	15b0e <scan_connect_with_target.part.0+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15b2a:	b91c      	cbnz	r4, 15b34 <scan_connect_with_target.part.0+0x50>
		bt_conn_unref(conn);
   15b2c:	9801      	ldr	r0, [sp, #4]
   15b2e:	f004 f841 	bl	19bb4 <bt_conn_unref>
   15b32:	e7ef      	b.n	15b14 <scan_connect_with_target.part.0+0x30>
		notify_connecting(&control->device_info, conn);
   15b34:	9e01      	ldr	r6, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15b36:	3c04      	subs	r4, #4
   15b38:	2c00      	cmp	r4, #0
   15b3a:	d0f7      	beq.n	15b2c <scan_connect_with_target.part.0+0x48>
		if (cb->cb_addr->connecting) {
   15b3c:	6823      	ldr	r3, [r4, #0]
   15b3e:	68db      	ldr	r3, [r3, #12]
   15b40:	b113      	cbz	r3, 15b48 <scan_connect_with_target.part.0+0x64>
			cb->cb_addr->connecting(device_info, conn);
   15b42:	4631      	mov	r1, r6
   15b44:	4628      	mov	r0, r5
   15b46:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15b48:	1d23      	adds	r3, r4, #4
   15b4a:	d0ef      	beq.n	15b2c <scan_connect_with_target.part.0+0x48>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15b4c:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15b4e:	2c00      	cmp	r4, #0
   15b50:	d1f1      	bne.n	15b36 <scan_connect_with_target.part.0+0x52>
   15b52:	e7eb      	b.n	15b2c <scan_connect_with_target.part.0+0x48>
   15b54:	0002d3b4 	.word	0x0002d3b4
   15b58:	200026f4 	.word	0x200026f4
   15b5c:	200026fc 	.word	0x200026fc

00015b60 <scan_recv>:
	}
}

static void scan_recv(const struct bt_le_scan_recv_info *info,
		      struct net_buf_simple *ad)
{
   15b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_scan_control scan_control;
	struct net_buf_simple_state state;

	memset(&scan_control, 0, sizeof(scan_control));

	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   15b64:	4f31      	ldr	r7, [pc, #196]	; (15c2c <scan_recv+0xcc>)
{
   15b66:	b094      	sub	sp, #80	; 0x50
	memset(&scan_control, 0, sizeof(scan_control));
   15b68:	2250      	movs	r2, #80	; 0x50
{
   15b6a:	4605      	mov	r5, r0
   15b6c:	460c      	mov	r4, r1
	memset(&scan_control, 0, sizeof(scan_control));
   15b6e:	4668      	mov	r0, sp
   15b70:	2100      	movs	r1, #0
   15b72:	f017 f868 	bl	2cc46 <memset>
	scan_control.all_mode = bt_scan.scan_filters.all_mode;
   15b76:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
   15b7a:	f88d 2003 	strb.w	r2, [sp, #3]
	control->filter_cnt = 0;
   15b7e:	2200      	movs	r2, #0
   15b80:	f88d 2000 	strb.w	r2, [sp]
	if (is_name_filter_enabled()) {
   15b84:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
   15b88:	b112      	cbz	r2, 15b90 <scan_recv+0x30>
		control->filter_cnt++;
   15b8a:	2301      	movs	r3, #1
   15b8c:	f88d 3000 	strb.w	r3, [sp]

	check_enabled_filters(&scan_control);

	/* Check id device is connectable. */
	scan_control.connectable =
		(info->adv_props & BT_GAP_ADV_PROP_CONNECTABLE) != 0;
   15b90:	7a2b      	ldrb	r3, [r5, #8]
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
   15b92:	4620      	mov	r0, r4
   15b94:	f003 0301 	and.w	r3, r3, #1
   15b98:	f88d 3004 	strb.w	r3, [sp, #4]
   15b9c:	f016 fa60 	bl	2c060 <net_buf_simple_headroom>

	/* Save advertising buffer state to transfer it
	 * data to application if futher processing is needed.
	 */
	net_buf_simple_save(ad, &state);
	bt_data_parse(ad, adv_data_found, (void *)&scan_control);
   15ba0:	4923      	ldr	r1, [pc, #140]	; (15c30 <scan_recv+0xd0>)
	state->len = buf->len;
   15ba2:	f8b4 8004 	ldrh.w	r8, [r4, #4]
	state->offset = net_buf_simple_headroom(buf);
   15ba6:	4606      	mov	r6, r0
   15ba8:	466a      	mov	r2, sp
   15baa:	4620      	mov	r0, r4
   15bac:	f002 ffa8 	bl	18b00 <bt_data_parse>
	net_buf_simple_restore(ad, &state);

	scan_control.device_info.recv_info = info;
	scan_control.device_info.conn_param = &bt_scan.conn_param;
   15bb0:	4b20      	ldr	r3, [pc, #128]	; (15c34 <scan_recv+0xd4>)
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
   15bb2:	68a0      	ldr	r0, [r4, #8]
	buf->len = state->len;
   15bb4:	f8a4 8004 	strh.w	r8, [r4, #4]
	scan_control.device_info.adv_data = ad;
   15bb8:	e9cd 3403 	strd	r3, r4, [sp, #12]
	if (control->all_mode &&
   15bbc:	f89d 3003 	ldrb.w	r3, [sp, #3]
	scan_control.device_info.recv_info = info;
   15bc0:	9502      	str	r5, [sp, #8]
	buf->data = buf->__buf + state->offset;
   15bc2:	fa10 f686 	uxtah	r6, r0, r6
   15bc6:	6026      	str	r6, [r4, #0]

	/* In the multifilter mode, the number of the active filters must equal
	 * the number of the filters matched to generate the notification.
	 * If the event handler is not NULL, notify the main application.
	 */
	filter_state_check(&scan_control, info->addr);
   15bc8:	682c      	ldr	r4, [r5, #0]
	if (control->all_mode &&
   15bca:	b1ab      	cbz	r3, 15bf8 <scan_recv+0x98>
   15bcc:	f89d 2001 	ldrb.w	r2, [sp, #1]
   15bd0:	f89d 3000 	ldrb.w	r3, [sp]
   15bd4:	429a      	cmp	r2, r3
   15bd6:	d113      	bne.n	15c00 <scan_recv+0xa0>
		notify_filter_matched(&control->device_info,
   15bd8:	f89d 2004 	ldrb.w	r2, [sp, #4]
   15bdc:	a905      	add	r1, sp, #20
   15bde:	a802      	add	r0, sp, #8
   15be0:	f7ff feaa 	bl	15938 <notify_filter_matched.constprop.0>
	if (!bt_scan.connect_if_match) {
   15be4:	f897 3054 	ldrb.w	r3, [r7, #84]	; 0x54
   15be8:	b11b      	cbz	r3, 15bf2 <scan_recv+0x92>
   15bea:	4621      	mov	r1, r4
   15bec:	4668      	mov	r0, sp
   15bee:	f7ff ff79 	bl	15ae4 <scan_connect_with_target.part.0>
}
   15bf2:	b014      	add	sp, #80	; 0x50
   15bf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	else if ((!control->all_mode) && control->filter_match) {
   15bf8:	f89d 3002 	ldrb.w	r3, [sp, #2]
   15bfc:	2b00      	cmp	r3, #0
   15bfe:	d1eb      	bne.n	15bd8 <scan_recv+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15c00:	4b0d      	ldr	r3, [pc, #52]	; (15c38 <scan_recv+0xd8>)
   15c02:	681c      	ldr	r4, [r3, #0]
   15c04:	2c00      	cmp	r4, #0
   15c06:	d0f4      	beq.n	15bf2 <scan_recv+0x92>
		notify_filter_no_match(&control->device_info,
   15c08:	f89d 5004 	ldrb.w	r5, [sp, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15c0c:	3c04      	subs	r4, #4
   15c0e:	2c00      	cmp	r4, #0
   15c10:	d0ef      	beq.n	15bf2 <scan_recv+0x92>
		if (cb->cb_addr->filter_no_match) {
   15c12:	6823      	ldr	r3, [r4, #0]
   15c14:	685b      	ldr	r3, [r3, #4]
   15c16:	b113      	cbz	r3, 15c1e <scan_recv+0xbe>
			cb->cb_addr->filter_no_match(device_info, connectable);
   15c18:	4629      	mov	r1, r5
   15c1a:	a802      	add	r0, sp, #8
   15c1c:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   15c1e:	1d23      	adds	r3, r4, #4
   15c20:	d0e7      	beq.n	15bf2 <scan_recv+0x92>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   15c22:	6864      	ldr	r4, [r4, #4]
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   15c24:	2c00      	cmp	r4, #0
   15c26:	d1f1      	bne.n	15c0c <scan_recv+0xac>
   15c28:	e7e3      	b.n	15bf2 <scan_recv+0x92>
   15c2a:	bf00      	nop
   15c2c:	20002688 	.word	0x20002688
   15c30:	000158e1 	.word	0x000158e1
   15c34:	200026f4 	.word	0x200026f4
   15c38:	200026fc 	.word	0x200026fc

00015c3c <bt_scan_init>:
{
   15c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   15c3e:	4c18      	ldr	r4, [pc, #96]	; (15ca0 <bt_scan_init+0x64>)
{
   15c40:	4605      	mov	r5, r0
	bt_le_scan_cb_register(&scan_cb);
   15c42:	4818      	ldr	r0, [pc, #96]	; (15ca4 <bt_scan_init+0x68>)
   15c44:	f003 fcd8 	bl	195f8 <bt_le_scan_cb_register>
	memset(&bt_scan.scan_filters, 0, sizeof(bt_scan.scan_filters));
   15c48:	2254      	movs	r2, #84	; 0x54
   15c4a:	2100      	movs	r1, #0
   15c4c:	4620      	mov	r0, r4
   15c4e:	f016 fffa 	bl	2cc46 <memset>
	if (init) {
   15c52:	4627      	mov	r7, r4
   15c54:	b1d5      	cbz	r5, 15c8c <bt_scan_init+0x50>
		bt_scan.connect_if_match = init->connect_if_match;
   15c56:	792b      	ldrb	r3, [r5, #4]
   15c58:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
		if (init->scan_param) {
   15c5c:	682c      	ldr	r4, [r5, #0]
   15c5e:	b164      	cbz	r4, 15c7a <bt_scan_init+0x3e>
			bt_scan.scan_param = *init->scan_param;
   15c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   15c62:	f107 0658 	add.w	r6, r7, #88	; 0x58
   15c66:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   15c68:	6823      	ldr	r3, [r4, #0]
   15c6a:	6033      	str	r3, [r6, #0]
		if (init->conn_param) {
   15c6c:	68aa      	ldr	r2, [r5, #8]
   15c6e:	b13a      	cbz	r2, 15c80 <bt_scan_init+0x44>
			bt_scan.conn_param = *init->conn_param;
   15c70:	4b0d      	ldr	r3, [pc, #52]	; (15ca8 <bt_scan_init+0x6c>)
   15c72:	6810      	ldr	r0, [r2, #0]
   15c74:	6851      	ldr	r1, [r2, #4]
   15c76:	c303      	stmia	r3!, {r0, r1}
}
   15c78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			scan_default_param_set();
   15c7a:	f7ff fe1f 	bl	158bc <scan_default_param_set>
   15c7e:	e7f5      	b.n	15c6c <bt_scan_init+0x30>
	bt_scan.conn_param = *conn_param;
   15c80:	490a      	ldr	r1, [pc, #40]	; (15cac <bt_scan_init+0x70>)
   15c82:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   15c86:	e9c7 131b 	strd	r1, r3, [r7, #108]	; 0x6c
}
   15c8a:	e7f5      	b.n	15c78 <bt_scan_init+0x3c>
		scan_default_param_set();
   15c8c:	f7ff fe16 	bl	158bc <scan_default_param_set>
	bt_scan.conn_param = *conn_param;
   15c90:	4a06      	ldr	r2, [pc, #24]	; (15cac <bt_scan_init+0x70>)
		bt_scan.connect_if_match = false;
   15c92:	f884 5054 	strb.w	r5, [r4, #84]	; 0x54
	bt_scan.conn_param = *conn_param;
   15c96:	f04f 73c8 	mov.w	r3, #26214400	; 0x1900000
   15c9a:	e9c4 231b 	strd	r2, r3, [r4, #108]	; 0x6c
}
   15c9e:	e7eb      	b.n	15c78 <bt_scan_init+0x3c>
   15ca0:	20002688 	.word	0x20002688
   15ca4:	200004ac 	.word	0x200004ac
   15ca8:	200026f4 	.word	0x200026f4
   15cac:	00280018 	.word	0x00280018

00015cb0 <bt_scan_start>:
	.recv = scan_recv,
};

int bt_scan_start(enum bt_scan_type scan_type)
{
	switch (scan_type) {
   15cb0:	b108      	cbz	r0, 15cb6 <bt_scan_start+0x6>
   15cb2:	2801      	cmp	r0, #1
   15cb4:	d106      	bne.n	15cc4 <bt_scan_start+0x14>
	case BT_SCAN_TYPE_SCAN_ACTIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_ACTIVE;
		break;

	case BT_SCAN_TYPE_SCAN_PASSIVE:
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   15cb6:	4b05      	ldr	r3, [pc, #20]	; (15ccc <bt_scan_start+0x1c>)
	default:
		return -EINVAL;
	}

	/* Start the scanning. */
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   15cb8:	2100      	movs	r1, #0
		bt_scan.scan_param.type = BT_LE_SCAN_TYPE_PASSIVE;
   15cba:	f883 0058 	strb.w	r0, [r3, #88]	; 0x58
	int err = bt_le_scan_start(&bt_scan.scan_param, NULL);
   15cbe:	4804      	ldr	r0, [pc, #16]	; (15cd0 <bt_scan_start+0x20>)
   15cc0:	f003 bc04 	b.w	194cc <bt_le_scan_start>
	if (!err) {
		LOG_DBG("Scanning");
	}

	return err;
}
   15cc4:	f06f 0015 	mvn.w	r0, #21
   15cc8:	4770      	bx	lr
   15cca:	bf00      	nop
   15ccc:	20002688 	.word	0x20002688
   15cd0:	200026e0 	.word	0x200026e0

00015cd4 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
   15cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
   15cd6:	4e26      	ldr	r6, [pc, #152]	; (15d70 <tc_aes128_set_encrypt_key+0x9c>)
{
   15cd8:	4607      	mov	r7, r0
   15cda:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
   15cdc:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
   15cde:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
   15ce0:	ad01      	add	r5, sp, #4
   15ce2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15ce4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   15ce6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   15ce8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
   15cec:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
   15cf0:	4638      	mov	r0, r7
   15cf2:	2f00      	cmp	r7, #0
   15cf4:	d038      	beq.n	15d68 <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
   15cf6:	2c00      	cmp	r4, #0
   15cf8:	d038      	beq.n	15d6c <tc_aes128_set_encrypt_key+0x98>
   15cfa:	1f38      	subs	r0, r7, #4
   15cfc:	4621      	mov	r1, r4
   15cfe:	4602      	mov	r2, r0
   15d00:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15d02:	784b      	ldrb	r3, [r1, #1]
   15d04:	780d      	ldrb	r5, [r1, #0]
   15d06:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
   15d08:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
   15d0c:	78cd      	ldrb	r5, [r1, #3]
   15d0e:	432b      	orrs	r3, r5
   15d10:	788d      	ldrb	r5, [r1, #2]
   15d12:	3104      	adds	r1, #4
   15d14:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
   15d18:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
   15d1a:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
   15d1e:	d1f0      	bne.n	15d02 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
   15d20:	4c14      	ldr	r4, [pc, #80]	; (15d74 <tc_aes128_set_encrypt_key+0xa0>)
   15d22:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
   15d24:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
   15d26:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
   15d28:	d116      	bne.n	15d58 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
   15d2a:	f3c3 4207 	ubfx	r2, r3, #16, #8
   15d2e:	5ca5      	ldrb	r5, [r4, r2]
   15d30:	0e1a      	lsrs	r2, r3, #24
   15d32:	5ca2      	ldrb	r2, [r4, r2]
   15d34:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
   15d38:	f3c3 2507 	ubfx	r5, r3, #8, #8
   15d3c:	b2db      	uxtb	r3, r3
   15d3e:	5d65      	ldrb	r5, [r4, r5]
   15d40:	5ce3      	ldrb	r3, [r4, r3]
   15d42:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
   15d46:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
   15d4a:	ad0c      	add	r5, sp, #48	; 0x30
   15d4c:	f021 0303 	bic.w	r3, r1, #3
   15d50:	442b      	add	r3, r5
   15d52:	f853 3c2c 	ldr.w	r3, [r3, #-44]
   15d56:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
   15d58:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
   15d5c:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
   15d5e:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
   15d60:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
   15d62:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
   15d64:	d1de      	bne.n	15d24 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
   15d66:	2001      	movs	r0, #1
}
   15d68:	b00d      	add	sp, #52	; 0x34
   15d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
   15d6c:	4620      	mov	r0, r4
   15d6e:	e7fb      	b.n	15d68 <tc_aes128_set_encrypt_key+0x94>
   15d70:	0002d3c4 	.word	0x0002d3c4
   15d74:	00030362 	.word	0x00030362

00015d78 <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   15d78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   15d7c:	4615      	mov	r5, r2
   15d7e:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   15d80:	4606      	mov	r6, r0
   15d82:	2800      	cmp	r0, #0
   15d84:	d058      	beq.n	15e38 <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   15d86:	2900      	cmp	r1, #0
   15d88:	d059      	beq.n	15e3e <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   15d8a:	2a00      	cmp	r2, #0
   15d8c:	d059      	beq.n	15e42 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   15d8e:	2310      	movs	r3, #16
   15d90:	460a      	mov	r2, r1
   15d92:	4668      	mov	r0, sp
   15d94:	4619      	mov	r1, r3
   15d96:	f014 fb1c 	bl	2a3d2 <_copy>
	add_round_key(state, s->words);
   15d9a:	4629      	mov	r1, r5
   15d9c:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
   15d9e:	4c2a      	ldr	r4, [pc, #168]	; (15e48 <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
   15da0:	f014 fb2f 	bl	2a402 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   15da4:	f105 0710 	add.w	r7, r5, #16
   15da8:	46a1      	mov	r9, r4
   15daa:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
   15dac:	46e8      	mov	r8, sp
{
   15dae:	466a      	mov	r2, sp
   15db0:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
   15db2:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
   15db4:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
   15db6:	5c61      	ldrb	r1, [r4, r1]
   15db8:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   15dbc:	d1f9      	bne.n	15db2 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
   15dbe:	4668      	mov	r0, sp
   15dc0:	f014 fb64 	bl	2a48c <shift_rows>
	mult_row_column(t, s);
   15dc4:	4669      	mov	r1, sp
   15dc6:	a804      	add	r0, sp, #16
   15dc8:	f014 fb99 	bl	2a4fe <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   15dcc:	a901      	add	r1, sp, #4
   15dce:	a805      	add	r0, sp, #20
   15dd0:	f014 fb95 	bl	2a4fe <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   15dd4:	a902      	add	r1, sp, #8
   15dd6:	a806      	add	r0, sp, #24
   15dd8:	f014 fb91 	bl	2a4fe <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   15ddc:	a903      	add	r1, sp, #12
   15dde:	a807      	add	r0, sp, #28
   15de0:	f014 fb8d 	bl	2a4fe <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   15de4:	2310      	movs	r3, #16
   15de6:	4619      	mov	r1, r3
   15de8:	eb0d 0203 	add.w	r2, sp, r3
   15dec:	4668      	mov	r0, sp
   15dee:	f014 faf0 	bl	2a3d2 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   15df2:	4639      	mov	r1, r7
   15df4:	4668      	mov	r0, sp
   15df6:	3710      	adds	r7, #16
   15df8:	f014 fb03 	bl	2a402 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   15dfc:	42af      	cmp	r7, r5
   15dfe:	d1d5      	bne.n	15dac <tc_aes_encrypt+0x34>
   15e00:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
   15e02:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
   15e06:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
   15e08:	f819 3003 	ldrb.w	r3, [r9, r3]
   15e0c:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
   15e10:	d1f7      	bne.n	15e02 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
   15e12:	4668      	mov	r0, sp
   15e14:	f014 fb3a 	bl	2a48c <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   15e18:	4629      	mov	r1, r5
   15e1a:	4668      	mov	r0, sp
   15e1c:	f014 faf1 	bl	2a402 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   15e20:	2310      	movs	r3, #16
   15e22:	4619      	mov	r1, r3
   15e24:	466a      	mov	r2, sp
   15e26:	4630      	mov	r0, r6
   15e28:	f014 fad3 	bl	2a3d2 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   15e2c:	4668      	mov	r0, sp
   15e2e:	2210      	movs	r2, #16
   15e30:	4621      	mov	r1, r4
   15e32:	f014 fadb 	bl	2a3ec <_set>

	return TC_CRYPTO_SUCCESS;
   15e36:	2001      	movs	r0, #1
}
   15e38:	b009      	add	sp, #36	; 0x24
   15e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
   15e3e:	4608      	mov	r0, r1
   15e40:	e7fa      	b.n	15e38 <tc_aes_encrypt+0xc0>
   15e42:	4610      	mov	r0, r2
   15e44:	e7f8      	b.n	15e38 <tc_aes_encrypt+0xc0>
   15e46:	bf00      	nop
   15e48:	00030362 	.word	0x00030362

00015e4c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
   15e4c:	4901      	ldr	r1, [pc, #4]	; (15e54 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
   15e4e:	2210      	movs	r2, #16
	str	r2, [r1]
   15e50:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
   15e52:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
   15e54:	e000ed10 	.word	0xe000ed10

00015e58 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
   15e58:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
   15e5a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
   15e5c:	f380 8811 	msr	BASEPRI, r0
	isb
   15e60:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
   15e64:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
   15e68:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
   15e6a:	b662      	cpsie	i
	isb
   15e6c:	f3bf 8f6f 	isb	sy

	bx	lr
   15e70:	4770      	bx	lr
   15e72:	bf00      	nop

00015e74 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
   15e74:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
   15e76:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
   15e78:	f381 8811 	msr	BASEPRI, r1

	wfe
   15e7c:	bf20      	wfe

	msr	BASEPRI, r0
   15e7e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
   15e82:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
   15e84:	4770      	bx	lr
   15e86:	bf00      	nop

00015e88 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   15e88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   15e8a:	4607      	mov	r7, r0

	if (esf != NULL) {
   15e8c:	460c      	mov	r4, r1
   15e8e:	b361      	cbz	r1, 15eea <z_arm_fatal_error+0x62>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
   15e90:	4e19      	ldr	r6, [pc, #100]	; (15ef8 <z_arm_fatal_error+0x70>)
   15e92:	6833      	ldr	r3, [r6, #0]
   15e94:	0758      	lsls	r0, r3, #29
   15e96:	d028      	beq.n	15eea <z_arm_fatal_error+0x62>
   15e98:	4d18      	ldr	r5, [pc, #96]	; (15efc <z_arm_fatal_error+0x74>)
   15e9a:	4819      	ldr	r0, [pc, #100]	; (15f00 <z_arm_fatal_error+0x78>)
   15e9c:	1b75      	subs	r5, r6, r5
   15e9e:	08ad      	lsrs	r5, r5, #2
   15ea0:	01ad      	lsls	r5, r5, #6
   15ea2:	f045 0501 	orr.w	r5, r5, #1
   15ea6:	f8ad 5000 	strh.w	r5, [sp]
   15eaa:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
   15eae:	6809      	ldr	r1, [r1, #0]
   15eb0:	f013 fa4f 	bl	29352 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
   15eb4:	6833      	ldr	r3, [r6, #0]
   15eb6:	0759      	lsls	r1, r3, #29
   15eb8:	d017      	beq.n	15eea <z_arm_fatal_error+0x62>
   15eba:	f8ad 5000 	strh.w	r5, [sp]
   15ebe:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   15ec2:	68e1      	ldr	r1, [r4, #12]
   15ec4:	480f      	ldr	r0, [pc, #60]	; (15f04 <z_arm_fatal_error+0x7c>)
   15ec6:	f013 fa44 	bl	29352 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
   15eca:	6833      	ldr	r3, [r6, #0]
   15ecc:	075a      	lsls	r2, r3, #29
   15ece:	d00c      	beq.n	15eea <z_arm_fatal_error+0x62>
   15ed0:	69e1      	ldr	r1, [r4, #28]
   15ed2:	480d      	ldr	r0, [pc, #52]	; (15f08 <z_arm_fatal_error+0x80>)
   15ed4:	462a      	mov	r2, r5
   15ed6:	f013 fa0f 	bl	292f8 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
   15eda:	6833      	ldr	r3, [r6, #0]
   15edc:	075b      	lsls	r3, r3, #29
   15ede:	d004      	beq.n	15eea <z_arm_fatal_error+0x62>
   15ee0:	69a1      	ldr	r1, [r4, #24]
   15ee2:	480a      	ldr	r0, [pc, #40]	; (15f0c <z_arm_fatal_error+0x84>)
   15ee4:	462a      	mov	r2, r5
   15ee6:	f013 fa07 	bl	292f8 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   15eea:	4621      	mov	r1, r4
   15eec:	4638      	mov	r0, r7
}
   15eee:	b003      	add	sp, #12
   15ef0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	z_fatal_error(reason, esf);
   15ef4:	f00d bb6c 	b.w	235d0 <z_fatal_error>
   15ef8:	20000784 	.word	0x20000784
   15efc:	20000740 	.word	0x20000740
   15f00:	00030462 	.word	0x00030462
   15f04:	00030491 	.word	0x00030491
   15f08:	000304c0 	.word	0x000304c0
   15f0c:	000304cf 	.word	0x000304cf

00015f10 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   15f10:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15f12:	2b00      	cmp	r3, #0
   15f14:	db08      	blt.n	15f28 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15f16:	2201      	movs	r2, #1
   15f18:	f000 001f 	and.w	r0, r0, #31
   15f1c:	fa02 f000 	lsl.w	r0, r2, r0
   15f20:	095b      	lsrs	r3, r3, #5
   15f22:	4a02      	ldr	r2, [pc, #8]	; (15f2c <arch_irq_enable+0x1c>)
   15f24:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
   15f28:	4770      	bx	lr
   15f2a:	bf00      	nop
   15f2c:	e000e100 	.word	0xe000e100

00015f30 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   15f30:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
   15f32:	2b00      	cmp	r3, #0
   15f34:	db0d      	blt.n	15f52 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   15f36:	2201      	movs	r2, #1
   15f38:	095b      	lsrs	r3, r3, #5
   15f3a:	f000 001f 	and.w	r0, r0, #31
   15f3e:	fa02 f000 	lsl.w	r0, r2, r0
   15f42:	3320      	adds	r3, #32
   15f44:	4a03      	ldr	r2, [pc, #12]	; (15f54 <arch_irq_disable+0x24>)
   15f46:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   15f4a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   15f4e:	f3bf 8f6f 	isb	sy
}
   15f52:	4770      	bx	lr
   15f54:	e000e100 	.word	0xe000e100

00015f58 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
   15f58:	4b05      	ldr	r3, [pc, #20]	; (15f70 <arch_irq_is_enabled+0x18>)
   15f5a:	0942      	lsrs	r2, r0, #5
   15f5c:	f000 001f 	and.w	r0, r0, #31
   15f60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   15f64:	2301      	movs	r3, #1
   15f66:	fa03 f000 	lsl.w	r0, r3, r0
}
   15f6a:	4010      	ands	r0, r2
   15f6c:	4770      	bx	lr
   15f6e:	bf00      	nop
   15f70:	e000e100 	.word	0xe000e100

00015f74 <z_arm_irq_priority_set>:
	/* If we have zero latency interrupts, those interrupts will
	 * run at a priority level which is not masked by irq_lock().
	 * Our policy is to express priority levels with special properties
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   15f74:	07d3      	lsls	r3, r2, #31
{
   15f76:	b570      	push	{r4, r5, r6, lr}
   15f78:	4605      	mov	r5, r0
   15f7a:	460e      	mov	r6, r1
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
   15f7c:	d425      	bmi.n	15fca <z_arm_irq_priority_set+0x56>
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
   15f7e:	1c8c      	adds	r4, r1, #2
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
   15f80:	2c07      	cmp	r4, #7
   15f82:	d90f      	bls.n	15fa4 <z_arm_irq_priority_set+0x30>
   15f84:	4a12      	ldr	r2, [pc, #72]	; (15fd0 <z_arm_irq_priority_set+0x5c>)
   15f86:	4913      	ldr	r1, [pc, #76]	; (15fd4 <z_arm_irq_priority_set+0x60>)
   15f88:	4813      	ldr	r0, [pc, #76]	; (15fd8 <z_arm_irq_priority_set+0x64>)
   15f8a:	2359      	movs	r3, #89	; 0x59
   15f8c:	f012 fe05 	bl	28b9a <printk>
   15f90:	4812      	ldr	r0, [pc, #72]	; (15fdc <z_arm_irq_priority_set+0x68>)
   15f92:	4631      	mov	r1, r6
   15f94:	2306      	movs	r3, #6
   15f96:	462a      	mov	r2, r5
   15f98:	f012 fdff 	bl	28b9a <printk>
   15f9c:	480c      	ldr	r0, [pc, #48]	; (15fd0 <z_arm_irq_priority_set+0x5c>)
   15f9e:	2159      	movs	r1, #89	; 0x59
   15fa0:	f013 f83c 	bl	2901c <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   15fa4:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
   15fa6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15fa8:	bfac      	ite	ge
   15faa:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15fae:	4b0c      	ldrlt	r3, [pc, #48]	; (15fe0 <z_arm_irq_priority_set+0x6c>)
   15fb0:	ea4f 1444 	mov.w	r4, r4, lsl #5
   15fb4:	bfb8      	it	lt
   15fb6:	f005 050f 	andlt.w	r5, r5, #15
   15fba:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15fbc:	bfaa      	itet	ge
   15fbe:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15fc2:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   15fc4:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
   15fc8:	bd70      	pop	{r4, r5, r6, pc}
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
   15fca:	2400      	movs	r4, #0
   15fcc:	e7ea      	b.n	15fa4 <z_arm_irq_priority_set+0x30>
   15fce:	bf00      	nop
   15fd0:	000304fd 	.word	0x000304fd
   15fd4:	00030533 	.word	0x00030533
   15fd8:	0002e93e 	.word	0x0002e93e
   15fdc:	0003054e 	.word	0x0003054e
   15fe0:	e000ed14 	.word	0xe000ed14

00015fe4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
   15fe4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   15fe6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
   15fe8:	4b04      	ldr	r3, [pc, #16]	; (15ffc <_arch_isr_direct_pm+0x18>)
   15fea:	69da      	ldr	r2, [r3, #28]
   15fec:	b11a      	cbz	r2, 15ff6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
   15fee:	2200      	movs	r2, #0
   15ff0:	61da      	str	r2, [r3, #28]
		z_pm_save_idle_exit();
   15ff2:	f016 fc70 	bl	2c8d6 <z_pm_save_idle_exit>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
   15ff6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
   15ff8:	bd08      	pop	{r3, pc}
   15ffa:	bf00      	nop
   15ffc:	20001f98 	.word	0x20001f98

00016000 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
   16000:	bf30      	wfi
    b z_SysNmiOnReset
   16002:	f7ff bffd 	b.w	16000 <z_SysNmiOnReset>
   16006:	bf00      	nop

00016008 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   16008:	4a0b      	ldr	r2, [pc, #44]	; (16038 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
   1600a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   1600c:	4b0b      	ldr	r3, [pc, #44]	; (1603c <z_arm_prep_c+0x34>)
   1600e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
   16012:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   16014:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16018:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
   1601c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
   16020:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
   16024:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
   16028:	f00d fbae 	bl	23788 <z_bss_zero>
	z_data_copy();
   1602c:	f010 ff7a 	bl	26f24 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
   16030:	f000 fc60 	bl	168f4 <z_arm_interrupt_init>
	z_cstart();
   16034:	f00d fbb2 	bl	2379c <z_cstart>
   16038:	00000000 	.word	0x00000000
   1603c:	e000ed00 	.word	0xe000ed00

00016040 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
   16040:	4a0a      	ldr	r2, [pc, #40]	; (1606c <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
   16042:	490b      	ldr	r1, [pc, #44]	; (16070 <arch_swap+0x30>)
	_current->arch.basepri = key;
   16044:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
   16046:	6809      	ldr	r1, [r1, #0]
   16048:	f8c3 10b8 	str.w	r1, [r3, #184]	; 0xb8

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   1604c:	4909      	ldr	r1, [pc, #36]	; (16074 <arch_swap+0x34>)
	_current->arch.basepri = key;
   1604e:	f8c3 00b4 	str.w	r0, [r3, #180]	; 0xb4
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16052:	684b      	ldr	r3, [r1, #4]
   16054:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   16058:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
   1605a:	2300      	movs	r3, #0
   1605c:	f383 8811 	msr	BASEPRI, r3
   16060:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
   16064:	6893      	ldr	r3, [r2, #8]
}
   16066:	f8d3 00b8 	ldr.w	r0, [r3, #184]	; 0xb8
   1606a:	4770      	bx	lr
   1606c:	20001f98 	.word	0x20001f98
   16070:	0002e51c 	.word	0x0002e51c
   16074:	e000ed00 	.word	0xe000ed00

00016078 <z_arm_pendsv>:

SECTION_FUNC(TEXT, z_arm_pendsv)

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
    /* Register the context switch */
    push {r0, lr}
   16078:	b501      	push	{r0, lr}
    bl z_thread_mark_switched_out
   1607a:	f016 fc19 	bl	2c8b0 <z_thread_mark_switched_out>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
   1607e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   16082:	4916      	ldr	r1, [pc, #88]	; (160dc <z_arm_pendsv+0x64>)
    ldr r2, [r1, #_kernel_offset_to_current]
   16084:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   16086:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
   1608a:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
   1608c:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
   16090:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   16094:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
   16096:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
   1609a:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
   1609e:	4f10      	ldr	r7, [pc, #64]	; (160e0 <z_arm_pendsv+0x68>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   160a0:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
   160a4:	6a0a      	ldr	r2, [r1, #32]

    str r2, [r1, #_kernel_offset_to_current]
   160a6:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
   160a8:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
   160aa:	f8d2 00b4 	ldr.w	r0, [r2, #180]	; 0xb4
    movs r3, #0
   160ae:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   160b0:	f8c2 30b4 	str.w	r3, [r2, #180]	; 0xb4
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   160b4:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
   160b8:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
   160ba:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
   160bc:	f000 fcf4 	bl	16aa8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
   160c0:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   160c4:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
   160c8:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
   160cc:	f38c 8809 	msr	PSP, ip
    pop {r2, lr}
#endif /* CONFIG_BUILTIN_STACK_GUARD */

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
    /* Register the context switch */
    push {r0, lr}
   160d0:	b501      	push	{r0, lr}
    bl z_thread_mark_switched_in
   160d2:	f00e f8e7 	bl	242a4 <z_thread_mark_switched_in>
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    pop {r0, r1}
    mov lr, r1
#else
    pop {r0, lr}
   160d6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
   160da:	4770      	bx	lr
    ldr r1, =_kernel
   160dc:	20001f98 	.word	0x20001f98
    ldr v4, =_SCS_ICSR
   160e0:	e000ed04 	.word	0xe000ed04

000160e4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
   160e4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   160e8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   160ea:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   160ee:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   160f2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
   160f4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
   160f8:	2902      	cmp	r1, #2
    beq _oops
   160fa:	d0ff      	beq.n	160fc <_oops>

000160fc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
   160fc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
   160fe:	f014 fb3d 	bl	2a77c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
   16102:	bd01      	pop	{r0, pc}

00016104 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
   16104:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
   16108:	9b00      	ldr	r3, [sp, #0]
   1610a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
   1610e:	490a      	ldr	r1, [pc, #40]	; (16138 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
   16110:	9b01      	ldr	r3, [sp, #4]
   16112:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
   16116:	9b02      	ldr	r3, [sp, #8]
   16118:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
   1611c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
   16120:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   16124:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
   16128:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
   1612c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
   1612e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
   16130:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
   16132:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
   16136:	4770      	bx	lr
   16138:	00028c77 	.word	0x00028c77

0001613c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
   1613c:	4a0c      	ldr	r2, [pc, #48]	; (16170 <z_check_thread_stack_fail+0x34>)
{
   1613e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
   16140:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
   16142:	b198      	cbz	r0, 1616c <z_check_thread_stack_fail+0x30>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
   16144:	f113 0f16 	cmn.w	r3, #22
   16148:	f8d0 00a4 	ldr.w	r0, [r0, #164]	; 0xa4
   1614c:	d005      	beq.n	1615a <z_check_thread_stack_fail+0x1e>
   1614e:	f1a0 0220 	sub.w	r2, r0, #32
   16152:	429a      	cmp	r2, r3
   16154:	d806      	bhi.n	16164 <z_check_thread_stack_fail+0x28>
   16156:	4283      	cmp	r3, r0
   16158:	d204      	bcs.n	16164 <z_check_thread_stack_fail+0x28>
   1615a:	4281      	cmp	r1, r0
   1615c:	bf2c      	ite	cs
   1615e:	2100      	movcs	r1, #0
   16160:	2101      	movcc	r1, #1
   16162:	e000      	b.n	16166 <z_check_thread_stack_fail+0x2a>
   16164:	2100      	movs	r1, #0
   16166:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
   16168:	bf08      	it	eq
   1616a:	2000      	moveq	r0, #0
}
   1616c:	4770      	bx	lr
   1616e:	bf00      	nop
   16170:	20001f98 	.word	0x20001f98

00016174 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
   16174:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
   16176:	4b0b      	ldr	r3, [pc, #44]	; (161a4 <arch_switch_to_main_thread+0x30>)
{
   16178:	4604      	mov	r4, r0
	_current = main_thread;
   1617a:	6098      	str	r0, [r3, #8]
{
   1617c:	460e      	mov	r6, r1
   1617e:	4615      	mov	r5, r2

	z_arm_tls_ptr = main_thread->tls;
#endif

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
	z_thread_mark_switched_in();
   16180:	f00e f890 	bl	242a4 <z_thread_mark_switched_in>
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
   16184:	4620      	mov	r0, r4
   16186:	f000 fc8f 	bl	16aa8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
   1618a:	4628      	mov	r0, r5
   1618c:	f386 8809 	msr	PSP, r6
   16190:	2100      	movs	r1, #0
   16192:	b663      	cpsie	if
   16194:	f381 8811 	msr	BASEPRI, r1
   16198:	f3bf 8f6f 	isb	sy
   1619c:	2200      	movs	r2, #0
   1619e:	2300      	movs	r3, #0
   161a0:	f012 fd69 	bl	28c76 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
   161a4:	20001f98 	.word	0x20001f98

000161a8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
   161a8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
   161aa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   161ac:	4a0b      	ldr	r2, [pc, #44]	; (161dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   161ae:	69d0      	ldr	r0, [r2, #28]
	cmp r0, #0
   161b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
   161b2:	bf1e      	ittt	ne
	movne	r1, #0
   161b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   161b6:	61d1      	strne	r1, [r2, #28]
		blne	z_pm_save_idle_exit
   161b8:	f016 fb8d 	blne	2c8d6 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   161bc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
   161be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
   161c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   161c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
   161ca:	4905      	ldr	r1, [pc, #20]	; (161e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   161cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   161ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
   161d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
   161d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
   161d6:	4903      	ldr	r1, [pc, #12]	; (161e4 <_isr_wrapper+0x3c>)
	bx r1
   161d8:	4708      	bx	r1
   161da:	0000      	.short	0x0000
	ldr r2, =_kernel
   161dc:	20001f98 	.word	0x20001f98
	ldr r1, =_sw_isr_table
   161e0:	0002d034 	.word	0x0002d034
	ldr r1, =z_arm_int_exit
   161e4:	000161e9 	.word	0x000161e9

000161e8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
   161e8:	4b04      	ldr	r3, [pc, #16]	; (161fc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
   161ea:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
   161ec:	6a18      	ldr	r0, [r3, #32]
	cmp r0, r1
   161ee:	4288      	cmp	r0, r1
	beq _EXIT_EXC
   161f0:	d003      	beq.n	161fa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
   161f2:	4903      	ldr	r1, [pc, #12]	; (16200 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
   161f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
   161f8:	600a      	str	r2, [r1, #0]

000161fa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
   161fa:	4770      	bx	lr
	ldr r3, =_kernel
   161fc:	20001f98 	.word	0x20001f98
	ldr r1, =_SCS_ICSR
   16200:	e000ed04 	.word	0xe000ed04

00016204 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
   16204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");
   16208:	4c59      	ldr	r4, [pc, #356]	; (16370 <mem_manage_fault+0x16c>)
   1620a:	6823      	ldr	r3, [r4, #0]
{
   1620c:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
   1620e:	0759      	lsls	r1, r3, #29
{
   16210:	4607      	mov	r7, r0
   16212:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
   16214:	d008      	beq.n	16228 <mem_manage_fault+0x24>
   16216:	4957      	ldr	r1, [pc, #348]	; (16374 <mem_manage_fault+0x170>)
   16218:	4857      	ldr	r0, [pc, #348]	; (16378 <mem_manage_fault+0x174>)
   1621a:	1a61      	subs	r1, r4, r1
   1621c:	0889      	lsrs	r1, r1, #2
   1621e:	0189      	lsls	r1, r1, #6
   16220:	f041 0101 	orr.w	r1, r1, #1
   16224:	f013 f85b 	bl	292de <log_0>

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
   16228:	4b54      	ldr	r3, [pc, #336]	; (1637c <mem_manage_fault+0x178>)
   1622a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1622c:	06da      	lsls	r2, r3, #27
   1622e:	d50b      	bpl.n	16248 <mem_manage_fault+0x44>
		PR_FAULT_INFO("  Stacking error (context area might be"
   16230:	6823      	ldr	r3, [r4, #0]
   16232:	075b      	lsls	r3, r3, #29
   16234:	d008      	beq.n	16248 <mem_manage_fault+0x44>
   16236:	494f      	ldr	r1, [pc, #316]	; (16374 <mem_manage_fault+0x170>)
   16238:	4851      	ldr	r0, [pc, #324]	; (16380 <mem_manage_fault+0x17c>)
   1623a:	1a61      	subs	r1, r4, r1
   1623c:	0889      	lsrs	r1, r1, #2
   1623e:	0189      	lsls	r1, r1, #6
   16240:	f041 0101 	orr.w	r1, r1, #1
   16244:	f013 f84b 	bl	292de <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
   16248:	4b4c      	ldr	r3, [pc, #304]	; (1637c <mem_manage_fault+0x178>)
   1624a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1624c:	071e      	lsls	r6, r3, #28
   1624e:	d50b      	bpl.n	16268 <mem_manage_fault+0x64>
		PR_FAULT_INFO("  Unstacking error");
   16250:	6823      	ldr	r3, [r4, #0]
   16252:	0758      	lsls	r0, r3, #29
   16254:	d008      	beq.n	16268 <mem_manage_fault+0x64>
   16256:	4947      	ldr	r1, [pc, #284]	; (16374 <mem_manage_fault+0x170>)
   16258:	484a      	ldr	r0, [pc, #296]	; (16384 <mem_manage_fault+0x180>)
   1625a:	1a61      	subs	r1, r4, r1
   1625c:	0889      	lsrs	r1, r1, #2
   1625e:	0189      	lsls	r1, r1, #6
   16260:	f041 0101 	orr.w	r1, r1, #1
   16264:	f013 f83b 	bl	292de <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
   16268:	4b44      	ldr	r3, [pc, #272]	; (1637c <mem_manage_fault+0x178>)
   1626a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   1626c:	0799      	lsls	r1, r3, #30
   1626e:	d435      	bmi.n	162dc <mem_manage_fault+0xd8>
	uint32_t mmfar = -EINVAL;
   16270:	f06f 0615 	mvn.w	r6, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
   16274:	4b41      	ldr	r3, [pc, #260]	; (1637c <mem_manage_fault+0x178>)
   16276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16278:	07d9      	lsls	r1, r3, #31
   1627a:	d50b      	bpl.n	16294 <mem_manage_fault+0x90>
		PR_FAULT_INFO("  Instruction Access Violation");
   1627c:	6823      	ldr	r3, [r4, #0]
   1627e:	075a      	lsls	r2, r3, #29
   16280:	d008      	beq.n	16294 <mem_manage_fault+0x90>
   16282:	493c      	ldr	r1, [pc, #240]	; (16374 <mem_manage_fault+0x170>)
   16284:	4840      	ldr	r0, [pc, #256]	; (16388 <mem_manage_fault+0x184>)
   16286:	1a61      	subs	r1, r4, r1
   16288:	0889      	lsrs	r1, r1, #2
   1628a:	0189      	lsls	r1, r1, #6
   1628c:	f041 0101 	orr.w	r1, r1, #1
   16290:	f013 f825 	bl	292de <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
   16294:	4b39      	ldr	r3, [pc, #228]	; (1637c <mem_manage_fault+0x178>)
   16296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16298:	069b      	lsls	r3, r3, #26
   1629a:	d50b      	bpl.n	162b4 <mem_manage_fault+0xb0>
		PR_FAULT_INFO(
   1629c:	6823      	ldr	r3, [r4, #0]
   1629e:	0758      	lsls	r0, r3, #29
   162a0:	d008      	beq.n	162b4 <mem_manage_fault+0xb0>
   162a2:	4934      	ldr	r1, [pc, #208]	; (16374 <mem_manage_fault+0x170>)
   162a4:	4839      	ldr	r0, [pc, #228]	; (1638c <mem_manage_fault+0x188>)
   162a6:	1a61      	subs	r1, r4, r1
   162a8:	0889      	lsrs	r1, r1, #2
   162aa:	0189      	lsls	r1, r1, #6
   162ac:	f041 0101 	orr.w	r1, r1, #1
   162b0:	f013 f815 	bl	292de <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   162b4:	4b31      	ldr	r3, [pc, #196]	; (1637c <mem_manage_fault+0x178>)
   162b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   162b8:	f012 0f10 	tst.w	r2, #16
   162bc:	4698      	mov	r8, r3
   162be:	d134      	bne.n	1632a <mem_manage_fault+0x126>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
   162c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
   162c2:	0799      	lsls	r1, r3, #30
   162c4:	d431      	bmi.n	1632a <mem_manage_fault+0x126>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   162c6:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
   162c8:	4a2c      	ldr	r2, [pc, #176]	; (1637c <mem_manage_fault+0x178>)
   162ca:	6a93      	ldr	r3, [r2, #40]	; 0x28
   162cc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
   162d0:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
   162d2:	2300      	movs	r3, #0
   162d4:	702b      	strb	r3, [r5, #0]

	return reason;
}
   162d6:	4620      	mov	r0, r4
   162d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		PR_FAULT_INFO("  Data Access Violation");
   162dc:	6823      	ldr	r3, [r4, #0]
   162de:	075a      	lsls	r2, r3, #29
   162e0:	d008      	beq.n	162f4 <mem_manage_fault+0xf0>
   162e2:	4924      	ldr	r1, [pc, #144]	; (16374 <mem_manage_fault+0x170>)
   162e4:	482a      	ldr	r0, [pc, #168]	; (16390 <mem_manage_fault+0x18c>)
   162e6:	1a61      	subs	r1, r4, r1
   162e8:	0889      	lsrs	r1, r1, #2
   162ea:	0189      	lsls	r1, r1, #6
   162ec:	f041 0101 	orr.w	r1, r1, #1
   162f0:	f012 fff5 	bl	292de <log_0>
		uint32_t temp = SCB->MMFAR;
   162f4:	4b21      	ldr	r3, [pc, #132]	; (1637c <mem_manage_fault+0x178>)
   162f6:	6b5e      	ldr	r6, [r3, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
   162f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   162fa:	061b      	lsls	r3, r3, #24
   162fc:	d5b8      	bpl.n	16270 <mem_manage_fault+0x6c>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
   162fe:	6823      	ldr	r3, [r4, #0]
   16300:	0758      	lsls	r0, r3, #29
   16302:	d009      	beq.n	16318 <mem_manage_fault+0x114>
   16304:	4a1b      	ldr	r2, [pc, #108]	; (16374 <mem_manage_fault+0x170>)
   16306:	4823      	ldr	r0, [pc, #140]	; (16394 <mem_manage_fault+0x190>)
   16308:	1aa2      	subs	r2, r4, r2
   1630a:	0892      	lsrs	r2, r2, #2
   1630c:	0192      	lsls	r2, r2, #6
   1630e:	f042 0201 	orr.w	r2, r2, #1
   16312:	4631      	mov	r1, r6
   16314:	f012 fff0 	bl	292f8 <log_1>
			if (from_hard_fault != 0) {
   16318:	f1b8 0f00 	cmp.w	r8, #0
   1631c:	d0aa      	beq.n	16274 <mem_manage_fault+0x70>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
   1631e:	4a17      	ldr	r2, [pc, #92]	; (1637c <mem_manage_fault+0x178>)
   16320:	6a93      	ldr	r3, [r2, #40]	; 0x28
   16322:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   16326:	6293      	str	r3, [r2, #40]	; 0x28
   16328:	e7a4      	b.n	16274 <mem_manage_fault+0x70>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
   1632a:	f8d8 3004 	ldr.w	r3, [r8, #4]
   1632e:	051a      	lsls	r2, r3, #20
   16330:	d5c9      	bpl.n	162c6 <mem_manage_fault+0xc2>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
   16332:	4639      	mov	r1, r7
   16334:	4630      	mov	r0, r6
   16336:	f7ff ff01 	bl	1613c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
   1633a:	4604      	mov	r4, r0
   1633c:	b118      	cbz	r0, 16346 <mem_manage_fault+0x142>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
   1633e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
   16342:	2402      	movs	r4, #2
   16344:	e7c0      	b.n	162c8 <mem_manage_fault+0xc4>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
   16346:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   1634a:	06db      	lsls	r3, r3, #27
   1634c:	d5bb      	bpl.n	162c6 <mem_manage_fault+0xc2>
   1634e:	4a12      	ldr	r2, [pc, #72]	; (16398 <mem_manage_fault+0x194>)
   16350:	4912      	ldr	r1, [pc, #72]	; (1639c <mem_manage_fault+0x198>)
   16352:	4813      	ldr	r0, [pc, #76]	; (163a0 <mem_manage_fault+0x19c>)
   16354:	f240 1349 	movw	r3, #329	; 0x149
   16358:	f012 fc1f 	bl	28b9a <printk>
   1635c:	4811      	ldr	r0, [pc, #68]	; (163a4 <mem_manage_fault+0x1a0>)
   1635e:	f012 fc1c 	bl	28b9a <printk>
   16362:	480d      	ldr	r0, [pc, #52]	; (16398 <mem_manage_fault+0x194>)
   16364:	f240 1149 	movw	r1, #329	; 0x149
   16368:	f012 fe58 	bl	2901c <assert_post_action>
   1636c:	e7ac      	b.n	162c8 <mem_manage_fault+0xc4>
   1636e:	bf00      	nop
   16370:	20000784 	.word	0x20000784
   16374:	20000740 	.word	0x20000740
   16378:	0003058e 	.word	0x0003058e
   1637c:	e000ed00 	.word	0xe000ed00
   16380:	000305a4 	.word	0x000305a4
   16384:	000305d7 	.word	0x000305d7
   16388:	00030618 	.word	0x00030618
   1638c:	00030637 	.word	0x00030637
   16390:	000305ea 	.word	0x000305ea
   16394:	00030602 	.word	0x00030602
   16398:	00030666 	.word	0x00030666
   1639c:	000306a0 	.word	0x000306a0
   163a0:	0002e93e 	.word	0x0002e93e
   163a4:	000306ea 	.word	0x000306ea

000163a8 <usage_fault.isra.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
   163a8:	b510      	push	{r4, lr}
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
   163aa:	4c3b      	ldr	r4, [pc, #236]	; (16498 <usage_fault.isra.0+0xf0>)
   163ac:	6823      	ldr	r3, [r4, #0]
   163ae:	075b      	lsls	r3, r3, #29
   163b0:	d008      	beq.n	163c4 <usage_fault.isra.0+0x1c>
   163b2:	493a      	ldr	r1, [pc, #232]	; (1649c <usage_fault.isra.0+0xf4>)
   163b4:	483a      	ldr	r0, [pc, #232]	; (164a0 <usage_fault.isra.0+0xf8>)
   163b6:	1a61      	subs	r1, r4, r1
   163b8:	0889      	lsrs	r1, r1, #2
   163ba:	0189      	lsls	r1, r1, #6
   163bc:	f041 0101 	orr.w	r1, r1, #1
   163c0:	f012 ff8d 	bl	292de <log_0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
   163c4:	4b37      	ldr	r3, [pc, #220]	; (164a4 <usage_fault.isra.0+0xfc>)
   163c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   163c8:	0198      	lsls	r0, r3, #6
   163ca:	d50b      	bpl.n	163e4 <usage_fault.isra.0+0x3c>
		PR_FAULT_INFO("  Division by zero");
   163cc:	6823      	ldr	r3, [r4, #0]
   163ce:	0759      	lsls	r1, r3, #29
   163d0:	d008      	beq.n	163e4 <usage_fault.isra.0+0x3c>
   163d2:	4932      	ldr	r1, [pc, #200]	; (1649c <usage_fault.isra.0+0xf4>)
   163d4:	4834      	ldr	r0, [pc, #208]	; (164a8 <usage_fault.isra.0+0x100>)
   163d6:	1a61      	subs	r1, r4, r1
   163d8:	0889      	lsrs	r1, r1, #2
   163da:	0189      	lsls	r1, r1, #6
   163dc:	f041 0101 	orr.w	r1, r1, #1
   163e0:	f012 ff7d 	bl	292de <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
   163e4:	4b2f      	ldr	r3, [pc, #188]	; (164a4 <usage_fault.isra.0+0xfc>)
   163e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   163e8:	01da      	lsls	r2, r3, #7
   163ea:	d50b      	bpl.n	16404 <usage_fault.isra.0+0x5c>
		PR_FAULT_INFO("  Unaligned memory access");
   163ec:	6823      	ldr	r3, [r4, #0]
   163ee:	075b      	lsls	r3, r3, #29
   163f0:	d008      	beq.n	16404 <usage_fault.isra.0+0x5c>
   163f2:	492a      	ldr	r1, [pc, #168]	; (1649c <usage_fault.isra.0+0xf4>)
   163f4:	482d      	ldr	r0, [pc, #180]	; (164ac <usage_fault.isra.0+0x104>)
   163f6:	1a61      	subs	r1, r4, r1
   163f8:	0889      	lsrs	r1, r1, #2
   163fa:	0189      	lsls	r1, r1, #6
   163fc:	f041 0101 	orr.w	r1, r1, #1
   16400:	f012 ff6d 	bl	292de <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
   16404:	4b27      	ldr	r3, [pc, #156]	; (164a4 <usage_fault.isra.0+0xfc>)
   16406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16408:	0318      	lsls	r0, r3, #12
   1640a:	d50b      	bpl.n	16424 <usage_fault.isra.0+0x7c>
		PR_FAULT_INFO("  No coprocessor instructions");
   1640c:	6823      	ldr	r3, [r4, #0]
   1640e:	0759      	lsls	r1, r3, #29
   16410:	d008      	beq.n	16424 <usage_fault.isra.0+0x7c>
   16412:	4922      	ldr	r1, [pc, #136]	; (1649c <usage_fault.isra.0+0xf4>)
   16414:	4826      	ldr	r0, [pc, #152]	; (164b0 <usage_fault.isra.0+0x108>)
   16416:	1a61      	subs	r1, r4, r1
   16418:	0889      	lsrs	r1, r1, #2
   1641a:	0189      	lsls	r1, r1, #6
   1641c:	f041 0101 	orr.w	r1, r1, #1
   16420:	f012 ff5d 	bl	292de <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
   16424:	4b1f      	ldr	r3, [pc, #124]	; (164a4 <usage_fault.isra.0+0xfc>)
   16426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16428:	035a      	lsls	r2, r3, #13
   1642a:	d50b      	bpl.n	16444 <usage_fault.isra.0+0x9c>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
   1642c:	6823      	ldr	r3, [r4, #0]
   1642e:	075b      	lsls	r3, r3, #29
   16430:	d008      	beq.n	16444 <usage_fault.isra.0+0x9c>
   16432:	491a      	ldr	r1, [pc, #104]	; (1649c <usage_fault.isra.0+0xf4>)
   16434:	481f      	ldr	r0, [pc, #124]	; (164b4 <usage_fault.isra.0+0x10c>)
   16436:	1a61      	subs	r1, r4, r1
   16438:	0889      	lsrs	r1, r1, #2
   1643a:	0189      	lsls	r1, r1, #6
   1643c:	f041 0101 	orr.w	r1, r1, #1
   16440:	f012 ff4d 	bl	292de <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
   16444:	4b17      	ldr	r3, [pc, #92]	; (164a4 <usage_fault.isra.0+0xfc>)
   16446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16448:	0398      	lsls	r0, r3, #14
   1644a:	d50b      	bpl.n	16464 <usage_fault.isra.0+0xbc>
		PR_FAULT_INFO("  Illegal use of the EPSR");
   1644c:	6823      	ldr	r3, [r4, #0]
   1644e:	0759      	lsls	r1, r3, #29
   16450:	d008      	beq.n	16464 <usage_fault.isra.0+0xbc>
   16452:	4912      	ldr	r1, [pc, #72]	; (1649c <usage_fault.isra.0+0xf4>)
   16454:	4818      	ldr	r0, [pc, #96]	; (164b8 <usage_fault.isra.0+0x110>)
   16456:	1a61      	subs	r1, r4, r1
   16458:	0889      	lsrs	r1, r1, #2
   1645a:	0189      	lsls	r1, r1, #6
   1645c:	f041 0101 	orr.w	r1, r1, #1
   16460:	f012 ff3d 	bl	292de <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
   16464:	4b0f      	ldr	r3, [pc, #60]	; (164a4 <usage_fault.isra.0+0xfc>)
   16466:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16468:	03da      	lsls	r2, r3, #15
   1646a:	d50b      	bpl.n	16484 <usage_fault.isra.0+0xdc>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
   1646c:	6823      	ldr	r3, [r4, #0]
   1646e:	075b      	lsls	r3, r3, #29
   16470:	d008      	beq.n	16484 <usage_fault.isra.0+0xdc>
   16472:	490a      	ldr	r1, [pc, #40]	; (1649c <usage_fault.isra.0+0xf4>)
   16474:	4811      	ldr	r0, [pc, #68]	; (164bc <usage_fault.isra.0+0x114>)
   16476:	1a61      	subs	r1, r4, r1
   16478:	0889      	lsrs	r1, r1, #2
   1647a:	0189      	lsls	r1, r1, #6
   1647c:	f041 0101 	orr.w	r1, r1, #1
   16480:	f012 ff2d 	bl	292de <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   16484:	4a07      	ldr	r2, [pc, #28]	; (164a4 <usage_fault.isra.0+0xfc>)
   16486:	6a93      	ldr	r3, [r2, #40]	; 0x28
   16488:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   1648c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   16490:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
   16492:	2000      	movs	r0, #0
   16494:	bd10      	pop	{r4, pc}
   16496:	bf00      	nop
   16498:	20000784 	.word	0x20000784
   1649c:	20000740 	.word	0x20000740
   164a0:	0003070d 	.word	0x0003070d
   164a4:	e000ed00 	.word	0xe000ed00
   164a8:	00030725 	.word	0x00030725
   164ac:	00030738 	.word	0x00030738
   164b0:	00030752 	.word	0x00030752
   164b4:	00030770 	.word	0x00030770
   164b8:	00030795 	.word	0x00030795
   164bc:	000307af 	.word	0x000307af

000164c0 <bus_fault.isra.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   164c0:	b570      	push	{r4, r5, r6, lr}
	PR_FAULT_INFO("***** BUS FAULT *****");
   164c2:	4c46      	ldr	r4, [pc, #280]	; (165dc <bus_fault.isra.0+0x11c>)
   164c4:	6823      	ldr	r3, [r4, #0]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   164c6:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
   164c8:	0759      	lsls	r1, r3, #29
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
   164ca:	4606      	mov	r6, r0
	PR_FAULT_INFO("***** BUS FAULT *****");
   164cc:	d008      	beq.n	164e0 <bus_fault.isra.0+0x20>
   164ce:	4944      	ldr	r1, [pc, #272]	; (165e0 <bus_fault.isra.0+0x120>)
   164d0:	4844      	ldr	r0, [pc, #272]	; (165e4 <bus_fault.isra.0+0x124>)
   164d2:	1a61      	subs	r1, r4, r1
   164d4:	0889      	lsrs	r1, r1, #2
   164d6:	0189      	lsls	r1, r1, #6
   164d8:	f041 0101 	orr.w	r1, r1, #1
   164dc:	f012 feff 	bl	292de <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
   164e0:	4b41      	ldr	r3, [pc, #260]	; (165e8 <bus_fault.isra.0+0x128>)
   164e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   164e4:	04da      	lsls	r2, r3, #19
   164e6:	d50b      	bpl.n	16500 <bus_fault.isra.0+0x40>
		PR_FAULT_INFO("  Stacking error");
   164e8:	6823      	ldr	r3, [r4, #0]
   164ea:	075b      	lsls	r3, r3, #29
   164ec:	d008      	beq.n	16500 <bus_fault.isra.0+0x40>
   164ee:	493c      	ldr	r1, [pc, #240]	; (165e0 <bus_fault.isra.0+0x120>)
   164f0:	483e      	ldr	r0, [pc, #248]	; (165ec <bus_fault.isra.0+0x12c>)
   164f2:	1a61      	subs	r1, r4, r1
   164f4:	0889      	lsrs	r1, r1, #2
   164f6:	0189      	lsls	r1, r1, #6
   164f8:	f041 0101 	orr.w	r1, r1, #1
   164fc:	f012 feef 	bl	292de <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
   16500:	4b39      	ldr	r3, [pc, #228]	; (165e8 <bus_fault.isra.0+0x128>)
   16502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16504:	0518      	lsls	r0, r3, #20
   16506:	d50b      	bpl.n	16520 <bus_fault.isra.0+0x60>
		PR_FAULT_INFO("  Unstacking error");
   16508:	6823      	ldr	r3, [r4, #0]
   1650a:	0759      	lsls	r1, r3, #29
   1650c:	d008      	beq.n	16520 <bus_fault.isra.0+0x60>
   1650e:	4934      	ldr	r1, [pc, #208]	; (165e0 <bus_fault.isra.0+0x120>)
   16510:	4837      	ldr	r0, [pc, #220]	; (165f0 <bus_fault.isra.0+0x130>)
   16512:	1a61      	subs	r1, r4, r1
   16514:	0889      	lsrs	r1, r1, #2
   16516:	0189      	lsls	r1, r1, #6
   16518:	f041 0101 	orr.w	r1, r1, #1
   1651c:	f012 fedf 	bl	292de <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
   16520:	4b31      	ldr	r3, [pc, #196]	; (165e8 <bus_fault.isra.0+0x128>)
   16522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16524:	059a      	lsls	r2, r3, #22
   16526:	d522      	bpl.n	1656e <bus_fault.isra.0+0xae>
		PR_FAULT_INFO("  Precise data bus error");
   16528:	6823      	ldr	r3, [r4, #0]
   1652a:	075b      	lsls	r3, r3, #29
   1652c:	d008      	beq.n	16540 <bus_fault.isra.0+0x80>
   1652e:	492c      	ldr	r1, [pc, #176]	; (165e0 <bus_fault.isra.0+0x120>)
   16530:	4830      	ldr	r0, [pc, #192]	; (165f4 <bus_fault.isra.0+0x134>)
   16532:	1a61      	subs	r1, r4, r1
   16534:	0889      	lsrs	r1, r1, #2
   16536:	0189      	lsls	r1, r1, #6
   16538:	f041 0101 	orr.w	r1, r1, #1
   1653c:	f012 fecf 	bl	292de <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
   16540:	4b29      	ldr	r3, [pc, #164]	; (165e8 <bus_fault.isra.0+0x128>)
   16542:	6b99      	ldr	r1, [r3, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
   16544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16546:	0418      	lsls	r0, r3, #16
   16548:	d511      	bpl.n	1656e <bus_fault.isra.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
   1654a:	6823      	ldr	r3, [r4, #0]
   1654c:	075a      	lsls	r2, r3, #29
   1654e:	d008      	beq.n	16562 <bus_fault.isra.0+0xa2>
   16550:	4a23      	ldr	r2, [pc, #140]	; (165e0 <bus_fault.isra.0+0x120>)
   16552:	4829      	ldr	r0, [pc, #164]	; (165f8 <bus_fault.isra.0+0x138>)
   16554:	1aa2      	subs	r2, r4, r2
   16556:	0892      	lsrs	r2, r2, #2
   16558:	0192      	lsls	r2, r2, #6
   1655a:	f042 0201 	orr.w	r2, r2, #1
   1655e:	f012 fecb 	bl	292f8 <log_1>
			if (from_hard_fault != 0) {
   16562:	b126      	cbz	r6, 1656e <bus_fault.isra.0+0xae>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
   16564:	4a20      	ldr	r2, [pc, #128]	; (165e8 <bus_fault.isra.0+0x128>)
   16566:	6a93      	ldr	r3, [r2, #40]	; 0x28
   16568:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   1656c:	6293      	str	r3, [r2, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
   1656e:	4b1e      	ldr	r3, [pc, #120]	; (165e8 <bus_fault.isra.0+0x128>)
   16570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   16572:	055b      	lsls	r3, r3, #21
   16574:	d50b      	bpl.n	1658e <bus_fault.isra.0+0xce>
		PR_FAULT_INFO("  Imprecise data bus error");
   16576:	6823      	ldr	r3, [r4, #0]
   16578:	075e      	lsls	r6, r3, #29
   1657a:	d008      	beq.n	1658e <bus_fault.isra.0+0xce>
   1657c:	4918      	ldr	r1, [pc, #96]	; (165e0 <bus_fault.isra.0+0x120>)
   1657e:	481f      	ldr	r0, [pc, #124]	; (165fc <bus_fault.isra.0+0x13c>)
   16580:	1a61      	subs	r1, r4, r1
   16582:	0889      	lsrs	r1, r1, #2
   16584:	0189      	lsls	r1, r1, #6
   16586:	f041 0101 	orr.w	r1, r1, #1
   1658a:	f012 fea8 	bl	292de <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
   1658e:	4b16      	ldr	r3, [pc, #88]	; (165e8 <bus_fault.isra.0+0x128>)
   16590:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   16592:	05d0      	lsls	r0, r2, #23
   16594:	d513      	bpl.n	165be <bus_fault.isra.0+0xfe>
		PR_FAULT_INFO("  Instruction bus error");
   16596:	6823      	ldr	r3, [r4, #0]
   16598:	0759      	lsls	r1, r3, #29
   1659a:	d008      	beq.n	165ae <bus_fault.isra.0+0xee>
   1659c:	4910      	ldr	r1, [pc, #64]	; (165e0 <bus_fault.isra.0+0x120>)
   1659e:	4818      	ldr	r0, [pc, #96]	; (16600 <bus_fault.isra.0+0x140>)
   165a0:	1a64      	subs	r4, r4, r1
   165a2:	08a4      	lsrs	r4, r4, #2
   165a4:	01a4      	lsls	r4, r4, #6
   165a6:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   165aa:	f012 fe98 	bl	292de <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   165ae:	4a0e      	ldr	r2, [pc, #56]	; (165e8 <bus_fault.isra.0+0x128>)
   165b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   165b2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
   165b4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
   165b8:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
   165ba:	7028      	strb	r0, [r5, #0]
}
   165bc:	bd70      	pop	{r4, r5, r6, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
   165be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   165c0:	049a      	lsls	r2, r3, #18
   165c2:	d5f4      	bpl.n	165ae <bus_fault.isra.0+0xee>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
   165c4:	6823      	ldr	r3, [r4, #0]
   165c6:	075b      	lsls	r3, r3, #29
   165c8:	d0f1      	beq.n	165ae <bus_fault.isra.0+0xee>
   165ca:	4905      	ldr	r1, [pc, #20]	; (165e0 <bus_fault.isra.0+0x120>)
   165cc:	480d      	ldr	r0, [pc, #52]	; (16604 <bus_fault.isra.0+0x144>)
   165ce:	1a64      	subs	r4, r4, r1
   165d0:	08a4      	lsrs	r4, r4, #2
   165d2:	01a4      	lsls	r4, r4, #6
   165d4:	f044 0101 	orr.w	r1, r4, #1
   165d8:	e7e7      	b.n	165aa <bus_fault.isra.0+0xea>
   165da:	bf00      	nop
   165dc:	20000784 	.word	0x20000784
   165e0:	20000740 	.word	0x20000740
   165e4:	000307da 	.word	0x000307da
   165e8:	e000ed00 	.word	0xe000ed00
   165ec:	000307f0 	.word	0x000307f0
   165f0:	000305d7 	.word	0x000305d7
   165f4:	00030801 	.word	0x00030801
   165f8:	0003081a 	.word	0x0003081a
   165fc:	0003082f 	.word	0x0003082f
   16600:	0003084a 	.word	0x0003084a
   16604:	00030637 	.word	0x00030637

00016608 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
   16608:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   1660c:	4b9a      	ldr	r3, [pc, #616]	; (16878 <z_arm_fault+0x270>)
   1660e:	685e      	ldr	r6, [r3, #4]
{
   16610:	b08a      	sub	sp, #40	; 0x28
   16612:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   16614:	f3c6 0408 	ubfx	r4, r6, #0, #9
   16618:	2700      	movs	r7, #0
   1661a:	f387 8811 	msr	BASEPRI, r7
   1661e:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
   16622:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
   16626:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   1662a:	d111      	bne.n	16650 <z_arm_fault+0x48>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
   1662c:	f002 030c 	and.w	r3, r2, #12
   16630:	2b08      	cmp	r3, #8
   16632:	d11e      	bne.n	16672 <z_arm_fault+0x6a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
   16634:	4991      	ldr	r1, [pc, #580]	; (1687c <z_arm_fault+0x274>)
   16636:	680b      	ldr	r3, [r1, #0]
   16638:	f013 0307 	ands.w	r3, r3, #7
   1663c:	d032      	beq.n	166a4 <z_arm_fault+0x9c>
   1663e:	4b90      	ldr	r3, [pc, #576]	; (16880 <z_arm_fault+0x278>)
   16640:	4890      	ldr	r0, [pc, #576]	; (16884 <z_arm_fault+0x27c>)
   16642:	1ac9      	subs	r1, r1, r3
   16644:	0889      	lsrs	r1, r1, #2
   16646:	0189      	lsls	r1, r1, #6
   16648:	f041 0101 	orr.w	r1, r1, #1
   1664c:	f012 fe47 	bl	292de <log_0>

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
   16650:	4a8d      	ldr	r2, [pc, #564]	; (16888 <z_arm_fault+0x280>)
   16652:	498e      	ldr	r1, [pc, #568]	; (1688c <z_arm_fault+0x284>)
   16654:	488e      	ldr	r0, [pc, #568]	; (16890 <z_arm_fault+0x288>)
   16656:	f240 33f2 	movw	r3, #1010	; 0x3f2
   1665a:	f012 fa9e 	bl	28b9a <printk>
   1665e:	488d      	ldr	r0, [pc, #564]	; (16894 <z_arm_fault+0x28c>)
   16660:	f012 fa9b 	bl	28b9a <printk>
   16664:	4888      	ldr	r0, [pc, #544]	; (16888 <z_arm_fault+0x280>)
   16666:	f240 31f2 	movw	r1, #1010	; 0x3f2
   1666a:	f012 fcd7 	bl	2901c <assert_post_action>
   1666e:	2500      	movs	r5, #0
   16670:	e005      	b.n	1667e <z_arm_fault+0x76>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
   16672:	0713      	lsls	r3, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
   16674:	bf5c      	itt	pl
   16676:	4605      	movpl	r5, r0
			*nested_exc = true;
   16678:	2701      	movpl	r7, #1
	__ASSERT(esf != NULL,
   1667a:	2d00      	cmp	r5, #0
   1667c:	d0e8      	beq.n	16650 <z_arm_fault+0x48>
	*recoverable = false;
   1667e:	2300      	movs	r3, #0
   16680:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
   16684:	1ee3      	subs	r3, r4, #3
   16686:	2b09      	cmp	r3, #9
   16688:	f200 80d8 	bhi.w	1683c <z_arm_fault+0x234>
   1668c:	e8df f013 	tbh	[pc, r3, lsl #1]
   16690:	00c1000c 	.word	0x00c1000c
   16694:	00a100c5 	.word	0x00a100c5
   16698:	00d600d6 	.word	0x00d600d6
   1669c:	00d600d6 	.word	0x00d600d6
   166a0:	00c900d6 	.word	0x00c900d6
	*nested_exc = false;
   166a4:	461f      	mov	r7, r3
   166a6:	e7d3      	b.n	16650 <z_arm_fault+0x48>
	PR_FAULT_INFO("***** HARD FAULT *****");
   166a8:	4e74      	ldr	r6, [pc, #464]	; (1687c <z_arm_fault+0x274>)
   166aa:	6833      	ldr	r3, [r6, #0]
   166ac:	075c      	lsls	r4, r3, #29
   166ae:	d008      	beq.n	166c2 <z_arm_fault+0xba>
   166b0:	4973      	ldr	r1, [pc, #460]	; (16880 <z_arm_fault+0x278>)
   166b2:	4879      	ldr	r0, [pc, #484]	; (16898 <z_arm_fault+0x290>)
   166b4:	1a71      	subs	r1, r6, r1
   166b6:	0889      	lsrs	r1, r1, #2
   166b8:	0189      	lsls	r1, r1, #6
   166ba:	f041 0101 	orr.w	r1, r1, #1
   166be:	f012 fe0e 	bl	292de <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   166c2:	4b6d      	ldr	r3, [pc, #436]	; (16878 <z_arm_fault+0x270>)
   166c4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
	*recoverable = false;
   166c6:	f04f 0800 	mov.w	r8, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   166ca:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
   166ce:	f88d 8007 	strb.w	r8, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
   166d2:	d00e      	beq.n	166f2 <z_arm_fault+0xea>
		PR_EXC("  Bus fault on vector table read");
   166d4:	6833      	ldr	r3, [r6, #0]
   166d6:	0758      	lsls	r0, r3, #29
   166d8:	d101      	bne.n	166de <z_arm_fault+0xd6>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
   166da:	2400      	movs	r4, #0
   166dc:	e018      	b.n	16710 <z_arm_fault+0x108>
   166de:	4968      	ldr	r1, [pc, #416]	; (16880 <z_arm_fault+0x278>)
		PR_EXC("  Bus fault on vector table read");
   166e0:	486e      	ldr	r0, [pc, #440]	; (1689c <z_arm_fault+0x294>)
   166e2:	1a71      	subs	r1, r6, r1
   166e4:	0889      	lsrs	r1, r1, #2
   166e6:	0189      	lsls	r1, r1, #6
   166e8:	f041 0101 	orr.w	r1, r1, #1
	PR_FAULT_INFO(
   166ec:	f012 fdf7 	bl	292de <log_0>
   166f0:	e7f3      	b.n	166da <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
   166f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
   166f4:	2a00      	cmp	r2, #0
   166f6:	da2c      	bge.n	16752 <z_arm_fault+0x14a>
		PR_EXC("  Debug event");
   166f8:	6833      	ldr	r3, [r6, #0]
   166fa:	0759      	lsls	r1, r3, #29
   166fc:	d0ed      	beq.n	166da <z_arm_fault+0xd2>
   166fe:	4960      	ldr	r1, [pc, #384]	; (16880 <z_arm_fault+0x278>)
   16700:	4867      	ldr	r0, [pc, #412]	; (168a0 <z_arm_fault+0x298>)
   16702:	1a71      	subs	r1, r6, r1
   16704:	0889      	lsrs	r1, r1, #2
   16706:	0189      	lsls	r1, r1, #6
   16708:	f041 0101 	orr.w	r1, r1, #1
   1670c:	f012 fde7 	bl	292de <log_0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
   16710:	f89d 3007 	ldrb.w	r3, [sp, #7]
   16714:	b9d3      	cbnz	r3, 1674c <z_arm_fault+0x144>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
   16716:	aa02      	add	r2, sp, #8
   16718:	f105 0620 	add.w	r6, r5, #32
   1671c:	6828      	ldr	r0, [r5, #0]
   1671e:	6869      	ldr	r1, [r5, #4]
   16720:	4613      	mov	r3, r2
   16722:	c303      	stmia	r3!, {r0, r1}
   16724:	3508      	adds	r5, #8
   16726:	42b5      	cmp	r5, r6
   16728:	461a      	mov	r2, r3
   1672a:	d1f7      	bne.n	1671c <z_arm_fault+0x114>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
   1672c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1672e:	2f00      	cmp	r7, #0
   16730:	f000 809c 	beq.w	1686c <z_arm_fault+0x264>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
   16734:	f3c3 0208 	ubfx	r2, r3, #0, #9
   16738:	b922      	cbnz	r2, 16744 <z_arm_fault+0x13c>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
   1673a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
   1673e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   16742:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
   16744:	a902      	add	r1, sp, #8
   16746:	4620      	mov	r0, r4
   16748:	f7ff fb9e 	bl	15e88 <z_arm_fatal_error>
}
   1674c:	b00a      	add	sp, #40	; 0x28
   1674e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
   16752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   16754:	005a      	lsls	r2, r3, #1
   16756:	d54f      	bpl.n	167f8 <z_arm_fault+0x1f0>
		PR_EXC("  Fault escalation (see below)");
   16758:	6833      	ldr	r3, [r6, #0]
   1675a:	075b      	lsls	r3, r3, #29
   1675c:	d008      	beq.n	16770 <z_arm_fault+0x168>
   1675e:	4948      	ldr	r1, [pc, #288]	; (16880 <z_arm_fault+0x278>)
   16760:	4850      	ldr	r0, [pc, #320]	; (168a4 <z_arm_fault+0x29c>)
   16762:	1a71      	subs	r1, r6, r1
   16764:	0889      	lsrs	r1, r1, #2
   16766:	0189      	lsls	r1, r1, #6
   16768:	f041 0101 	orr.w	r1, r1, #1
   1676c:	f012 fdb7 	bl	292de <log_0>
	uint16_t fault_insn = *(ret_addr - 1);
   16770:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
   16772:	f833 2c02 	ldrh.w	r2, [r3, #-2]
   16776:	f64d 7302 	movw	r3, #57090	; 0xdf02
   1677a:	429a      	cmp	r2, r3
   1677c:	d00d      	beq.n	1679a <z_arm_fault+0x192>
		} else if (SCB_MMFSR != 0) {
   1677e:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   16782:	f603 6326 	addw	r3, r3, #3622	; 0xe26
   16786:	781b      	ldrb	r3, [r3, #0]
   16788:	b1b3      	cbz	r3, 167b8 <z_arm_fault+0x1b0>
			reason = mem_manage_fault(esf, 1, recoverable);
   1678a:	f10d 0207 	add.w	r2, sp, #7
   1678e:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
   16790:	4628      	mov	r0, r5
   16792:	f7ff fd37 	bl	16204 <mem_manage_fault>
   16796:	4604      	mov	r4, r0
		break;
   16798:	e7ba      	b.n	16710 <z_arm_fault+0x108>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
   1679a:	6833      	ldr	r3, [r6, #0]
   1679c:	075c      	lsls	r4, r3, #29
   1679e:	d009      	beq.n	167b4 <z_arm_fault+0x1ac>
   167a0:	4a37      	ldr	r2, [pc, #220]	; (16880 <z_arm_fault+0x278>)
   167a2:	6829      	ldr	r1, [r5, #0]
   167a4:	4840      	ldr	r0, [pc, #256]	; (168a8 <z_arm_fault+0x2a0>)
   167a6:	1ab2      	subs	r2, r6, r2
   167a8:	0892      	lsrs	r2, r2, #2
   167aa:	0192      	lsls	r2, r2, #6
   167ac:	f042 0201 	orr.w	r2, r2, #1
   167b0:	f012 fda2 	bl	292f8 <log_1>
			reason = esf->basic.r0;
   167b4:	682c      	ldr	r4, [r5, #0]
   167b6:	e7ab      	b.n	16710 <z_arm_fault+0x108>
		} else if (SCB_BFSR != 0) {
   167b8:	4b3c      	ldr	r3, [pc, #240]	; (168ac <z_arm_fault+0x2a4>)
   167ba:	781b      	ldrb	r3, [r3, #0]
   167bc:	b12b      	cbz	r3, 167ca <z_arm_fault+0x1c2>
			reason = bus_fault(esf, 1, recoverable);
   167be:	f10d 0107 	add.w	r1, sp, #7
   167c2:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
   167c4:	f7ff fe7c 	bl	164c0 <bus_fault.isra.0>
   167c8:	e7e5      	b.n	16796 <z_arm_fault+0x18e>
		} else if (SCB_UFSR != 0) {
   167ca:	4b39      	ldr	r3, [pc, #228]	; (168b0 <z_arm_fault+0x2a8>)
   167cc:	881b      	ldrh	r3, [r3, #0]
   167ce:	b29b      	uxth	r3, r3
   167d0:	b113      	cbz	r3, 167d8 <z_arm_fault+0x1d0>
		reason = usage_fault(esf);
   167d2:	f7ff fde9 	bl	163a8 <usage_fault.isra.0>
   167d6:	e7de      	b.n	16796 <z_arm_fault+0x18e>
			__ASSERT(0,
   167d8:	4936      	ldr	r1, [pc, #216]	; (168b4 <z_arm_fault+0x2ac>)
   167da:	4a2b      	ldr	r2, [pc, #172]	; (16888 <z_arm_fault+0x280>)
   167dc:	482c      	ldr	r0, [pc, #176]	; (16890 <z_arm_fault+0x288>)
   167de:	f240 23c3 	movw	r3, #707	; 0x2c3
   167e2:	f012 f9da 	bl	28b9a <printk>
   167e6:	4834      	ldr	r0, [pc, #208]	; (168b8 <z_arm_fault+0x2b0>)
   167e8:	f012 f9d7 	bl	28b9a <printk>
   167ec:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
   167f0:	4825      	ldr	r0, [pc, #148]	; (16888 <z_arm_fault+0x280>)
   167f2:	f012 fc13 	bl	2901c <assert_post_action>
   167f6:	e78b      	b.n	16710 <z_arm_fault+0x108>
   167f8:	492e      	ldr	r1, [pc, #184]	; (168b4 <z_arm_fault+0x2ac>)
   167fa:	4a23      	ldr	r2, [pc, #140]	; (16888 <z_arm_fault+0x280>)
   167fc:	4824      	ldr	r0, [pc, #144]	; (16890 <z_arm_fault+0x288>)
   167fe:	f240 23c7 	movw	r3, #711	; 0x2c7
   16802:	f012 f9ca 	bl	28b9a <printk>
   16806:	482d      	ldr	r0, [pc, #180]	; (168bc <z_arm_fault+0x2b4>)
   16808:	f012 f9c7 	bl	28b9a <printk>
   1680c:	f240 21c7 	movw	r1, #711	; 0x2c7
   16810:	e7ee      	b.n	167f0 <z_arm_fault+0x1e8>
		reason = mem_manage_fault(esf, 0, recoverable);
   16812:	f10d 0207 	add.w	r2, sp, #7
   16816:	2100      	movs	r1, #0
   16818:	e7ba      	b.n	16790 <z_arm_fault+0x188>
		reason = bus_fault(esf, 0, recoverable);
   1681a:	f10d 0107 	add.w	r1, sp, #7
   1681e:	2000      	movs	r0, #0
   16820:	e7d0      	b.n	167c4 <z_arm_fault+0x1bc>
	PR_FAULT_INFO(
   16822:	4916      	ldr	r1, [pc, #88]	; (1687c <z_arm_fault+0x274>)
   16824:	680b      	ldr	r3, [r1, #0]
   16826:	0758      	lsls	r0, r3, #29
   16828:	f43f af57 	beq.w	166da <z_arm_fault+0xd2>
   1682c:	4b14      	ldr	r3, [pc, #80]	; (16880 <z_arm_fault+0x278>)
   1682e:	4824      	ldr	r0, [pc, #144]	; (168c0 <z_arm_fault+0x2b8>)
   16830:	1ac9      	subs	r1, r1, r3
   16832:	0889      	lsrs	r1, r1, #2
   16834:	0189      	lsls	r1, r1, #6
   16836:	f041 0101 	orr.w	r1, r1, #1
   1683a:	e757      	b.n	166ec <z_arm_fault+0xe4>
	PR_FAULT_INFO("***** %s %d) *****",
   1683c:	4b0f      	ldr	r3, [pc, #60]	; (1687c <z_arm_fault+0x274>)
   1683e:	681a      	ldr	r2, [r3, #0]
   16840:	0752      	lsls	r2, r2, #29
   16842:	f43f af4a 	beq.w	166da <z_arm_fault+0xd2>
   16846:	4a0e      	ldr	r2, [pc, #56]	; (16880 <z_arm_fault+0x278>)
   16848:	481e      	ldr	r0, [pc, #120]	; (168c4 <z_arm_fault+0x2bc>)
   1684a:	491f      	ldr	r1, [pc, #124]	; (168c8 <z_arm_fault+0x2c0>)
   1684c:	1a9b      	subs	r3, r3, r2
   1684e:	089b      	lsrs	r3, r3, #2
   16850:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
   16854:	ea4f 1383 	mov.w	r3, r3, lsl #6
   16858:	bf18      	it	ne
   1685a:	4601      	movne	r1, r0
   1685c:	f043 0301 	orr.w	r3, r3, #1
   16860:	481a      	ldr	r0, [pc, #104]	; (168cc <z_arm_fault+0x2c4>)
   16862:	f1a4 0210 	sub.w	r2, r4, #16
   16866:	f012 fd5b 	bl	29320 <log_2>
   1686a:	e736      	b.n	166da <z_arm_fault+0xd2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
   1686c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
   16870:	f023 0301 	bic.w	r3, r3, #1
   16874:	e765      	b.n	16742 <z_arm_fault+0x13a>
   16876:	bf00      	nop
   16878:	e000ed00 	.word	0xe000ed00
   1687c:	20000784 	.word	0x20000784
   16880:	20000740 	.word	0x20000740
   16884:	00030862 	.word	0x00030862
   16888:	00030666 	.word	0x00030666
   1688c:	0003088d 	.word	0x0003088d
   16890:	0002e93e 	.word	0x0002e93e
   16894:	000308a0 	.word	0x000308a0
   16898:	000308de 	.word	0x000308de
   1689c:	000308f5 	.word	0x000308f5
   168a0:	00030916 	.word	0x00030916
   168a4:	00030924 	.word	0x00030924
   168a8:	00030943 	.word	0x00030943
   168ac:	e000ed29 	.word	0xe000ed29
   168b0:	e000ed2a 	.word	0xe000ed2a
   168b4:	00034515 	.word	0x00034515
   168b8:	0003095f 	.word	0x0003095f
   168bc:	00030983 	.word	0x00030983
   168c0:	000309b3 	.word	0x000309b3
   168c4:	000309ec 	.word	0x000309ec
   168c8:	000309d7 	.word	0x000309d7
   168cc:	00030a05 	.word	0x00030a05

000168d0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   168d0:	4a02      	ldr	r2, [pc, #8]	; (168dc <z_arm_fault_init+0xc>)
   168d2:	6953      	ldr	r3, [r2, #20]
   168d4:	f043 0310 	orr.w	r3, r3, #16
   168d8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
   168da:	4770      	bx	lr
   168dc:	e000ed00 	.word	0xe000ed00

000168e0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
   168e0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
   168e4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
   168e8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
   168ea:	4672      	mov	r2, lr
	bl z_arm_fault
   168ec:	f7ff fe8c 	bl	16608 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
   168f0:	bd01      	pop	{r0, pc}
   168f2:	bf00      	nop

000168f4 <z_arm_interrupt_init>:
   168f4:	4804      	ldr	r0, [pc, #16]	; (16908 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
   168f6:	2300      	movs	r3, #0
   168f8:	2140      	movs	r1, #64	; 0x40
   168fa:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   168fc:	3301      	adds	r3, #1
   168fe:	2b30      	cmp	r3, #48	; 0x30
   16900:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
   16904:	d1f9      	bne.n	168fa <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
   16906:	4770      	bx	lr
   16908:	e000e100 	.word	0xe000e100

0001690c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
   1690c:	2000      	movs	r0, #0
    msr CONTROL, r0
   1690e:	f380 8814 	msr	CONTROL, r0
    isb
   16912:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
   16916:	f016 faf3 	bl	2cf00 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
   1691a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
   1691c:	4911      	ldr	r1, [pc, #68]	; (16964 <__start+0x58>)
    str r0, [r1]
   1691e:	6008      	str	r0, [r1, #0]
    dsb
   16920:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   16924:	4810      	ldr	r0, [pc, #64]	; (16968 <__start+0x5c>)
    msr msp, r0
   16926:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
   1692a:	f000 f831 	bl	16990 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   1692e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
   16930:	f380 8811 	msr	BASEPRI, r0
 * (may be larger due to rounding up for stack pointer aligning
 * purposes but this is sufficient during initialization).
 */

#ifdef CONFIG_INIT_STACKS
    ldr r0, =z_interrupt_stacks
   16934:	480d      	ldr	r0, [pc, #52]	; (1696c <__start+0x60>)
    ldr r1, =0xaa
   16936:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   1693a:	f44f 6202 	mov.w	r2, #2080	; 0x820
    bl memset
   1693e:	f016 f982 	bl	2cc46 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
   16942:	480a      	ldr	r0, [pc, #40]	; (1696c <__start+0x60>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
   16944:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
   16948:	1840      	adds	r0, r0, r1
    msr PSP, r0
   1694a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
   1694e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
   16952:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
   16954:	4308      	orrs	r0, r1
    msr CONTROL, r0
   16956:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
   1695a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
   1695e:	f7ff fb53 	bl	16008 <z_arm_prep_c>
   16962:	0000      	.short	0x0000
    ldr r1, =_SCS_MPU_CTRL
   16964:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
   16968:	200058c0 	.word	0x200058c0
    ldr r0, =z_interrupt_stacks
   1696c:	20005a40 	.word	0x20005a40

00016970 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
   16970:	4a06      	ldr	r2, [pc, #24]	; (1698c <z_arm_clear_arm_mpu_config+0x1c>)
   16972:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
   16974:	2300      	movs	r3, #0
	int num_regions =
   16976:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
   1697a:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
   1697c:	428b      	cmp	r3, r1
   1697e:	d100      	bne.n	16982 <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
   16980:	4770      	bx	lr
  MPU->RNR = rnr;
   16982:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
   16984:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
   16986:	3301      	adds	r3, #1
   16988:	e7f8      	b.n	1697c <z_arm_clear_arm_mpu_config+0xc>
   1698a:	bf00      	nop
   1698c:	e000ed90 	.word	0xe000ed90

00016990 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
   16990:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
   16992:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
   16994:	2300      	movs	r3, #0
   16996:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
   1699a:	f7ff ffe9 	bl	16970 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
   1699e:	4b14      	ldr	r3, [pc, #80]	; (169f0 <z_arm_init_arch_hw_at_boot+0x60>)
   169a0:	f04f 32ff 	mov.w	r2, #4294967295
   169a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
   169a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
   169ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
   169b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   169b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
   169b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
   169bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
   169c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
   169c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   169c8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   169cc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
   169d0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
   169d4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
   169d8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
   169dc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
   169e0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
   169e4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
   169e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   169ea:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
   169ee:	bd08      	pop	{r3, pc}
   169f0:	e000e100 	.word	0xe000e100

000169f4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
   169f4:	4b06      	ldr	r3, [pc, #24]	; (16a10 <z_impl_k_thread_abort+0x1c>)
   169f6:	689b      	ldr	r3, [r3, #8]
   169f8:	4283      	cmp	r3, r0
   169fa:	d107      	bne.n	16a0c <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   169fc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
   16a00:	b123      	cbz	r3, 16a0c <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   16a02:	4a04      	ldr	r2, [pc, #16]	; (16a14 <z_impl_k_thread_abort+0x20>)
   16a04:	6853      	ldr	r3, [r2, #4]
   16a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   16a0a:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
   16a0c:	f010 b870 	b.w	26af0 <z_thread_abort>
   16a10:	20001f98 	.word	0x20001f98
   16a14:	e000ed00 	.word	0xe000ed00

00016a18 <arch_timing_init>:
 * @return 0
 */
static inline int z_arm_dwt_init(void)
{
	/* Enable tracing */
	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
   16a18:	4a0f      	ldr	r2, [pc, #60]	; (16a58 <arch_timing_init+0x40>)
	return dwt_frequency;
#endif /* CONFIG_SOC_FAMILY_NRF */
}

void arch_timing_init(void)
{
   16a1a:	b508      	push	{r3, lr}
   16a1c:	68d3      	ldr	r3, [r2, #12]
   16a1e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   16a22:	60d3      	str	r3, [r2, #12]
 * @return 0
 */
static inline int z_arm_dwt_init_cycle_counter(void)
{
	/* Clear and enable the cycle counter */
	DWT->CYCCNT = 0;
   16a24:	4b0d      	ldr	r3, [pc, #52]	; (16a5c <arch_timing_init+0x44>)
   16a26:	2200      	movs	r2, #0
   16a28:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   16a2a:	681a      	ldr	r2, [r3, #0]
   16a2c:	f042 0201 	orr.w	r2, r2, #1
   16a30:	601a      	str	r2, [r3, #0]

	/* Assert that the cycle counter is indeed implemented.
	 * The field is called NOCYCCNT. So 1 means there is no cycle counter.
	 */
	__ASSERT((DWT->CTRL & DWT_CTRL_NOCYCCNT_Msk) == 0,
   16a32:	681b      	ldr	r3, [r3, #0]
   16a34:	019b      	lsls	r3, r3, #6
   16a36:	d50e      	bpl.n	16a56 <arch_timing_init+0x3e>
   16a38:	4909      	ldr	r1, [pc, #36]	; (16a60 <arch_timing_init+0x48>)
   16a3a:	4a0a      	ldr	r2, [pc, #40]	; (16a64 <arch_timing_init+0x4c>)
   16a3c:	480a      	ldr	r0, [pc, #40]	; (16a68 <arch_timing_init+0x50>)
   16a3e:	2369      	movs	r3, #105	; 0x69
   16a40:	f012 f8ab 	bl	28b9a <printk>
   16a44:	4809      	ldr	r0, [pc, #36]	; (16a6c <arch_timing_init+0x54>)
   16a46:	f012 f8a8 	bl	28b9a <printk>
	z_arm_dwt_init();
	z_arm_dwt_init_cycle_counter();
}
   16a4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   16a4e:	4805      	ldr	r0, [pc, #20]	; (16a64 <arch_timing_init+0x4c>)
   16a50:	2169      	movs	r1, #105	; 0x69
   16a52:	f012 bae3 	b.w	2901c <assert_post_action>
   16a56:	bd08      	pop	{r3, pc}
   16a58:	e000edf0 	.word	0xe000edf0
   16a5c:	e0001000 	.word	0xe0001000
   16a60:	00030a53 	.word	0x00030a53
   16a64:	00030a18 	.word	0x00030a18
   16a68:	0002e93e 	.word	0x0002e93e
   16a6c:	00030a90 	.word	0x00030a90

00016a70 <arch_timing_start>:
 *
 * @return N/A
 */
static inline void z_arm_dwt_cycle_count_start(void)
{
	DWT->CYCCNT = 0;
   16a70:	4b03      	ldr	r3, [pc, #12]	; (16a80 <arch_timing_start+0x10>)
   16a72:	2200      	movs	r2, #0
   16a74:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
   16a76:	681a      	ldr	r2, [r3, #0]
   16a78:	f042 0201 	orr.w	r2, r2, #1
   16a7c:	601a      	str	r2, [r3, #0]

void arch_timing_start(void)
{
	z_arm_dwt_cycle_count_start();
}
   16a7e:	4770      	bx	lr
   16a80:	e0001000 	.word	0xe0001000

00016a84 <arch_timing_counter_get>:
	return DWT->CYCCNT;
   16a84:	4b01      	ldr	r3, [pc, #4]	; (16a8c <arch_timing_counter_get+0x8>)
}

timing_t arch_timing_counter_get(void)
{
	return (timing_t)z_arm_dwt_get_cycles();
}
   16a86:	2100      	movs	r1, #0
   16a88:	6858      	ldr	r0, [r3, #4]
   16a8a:	4770      	bx	lr
   16a8c:	e0001000 	.word	0xe0001000

00016a90 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
   16a90:	4b02      	ldr	r3, [pc, #8]	; (16a9c <z_arm_configure_static_mpu_regions+0xc>)
   16a92:	4a03      	ldr	r2, [pc, #12]	; (16aa0 <z_arm_configure_static_mpu_regions+0x10>)
   16a94:	4803      	ldr	r0, [pc, #12]	; (16aa4 <z_arm_configure_static_mpu_regions+0x14>)
   16a96:	2101      	movs	r1, #1
   16a98:	f000 b88e 	b.w	16bb8 <arm_core_mpu_configure_static_mpu_regions>
   16a9c:	20020000 	.word	0x20020000
   16aa0:	20000000 	.word	0x20000000
   16aa4:	0002dc60 	.word	0x0002dc60

00016aa8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
   16aa8:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
   16aac:	4b05      	ldr	r3, [pc, #20]	; (16ac4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
		guard_start = thread->stack_info.start - guard_size;
   16aae:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
   16ab0:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
   16ab2:	4a05      	ldr	r2, [pc, #20]	; (16ac8 <z_arm_configure_dynamic_mpu_regions+0x20>)
   16ab4:	2120      	movs	r1, #32
   16ab6:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
   16aba:	4618      	mov	r0, r3
   16abc:	2101      	movs	r1, #1
   16abe:	f000 b8a3 	b.w	16c08 <arm_core_mpu_configure_dynamic_mpu_regions>
   16ac2:	bf00      	nop
   16ac4:	20002704 	.word	0x20002704
   16ac8:	150b0000 	.word	0x150b0000

00016acc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
   16acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
   16ace:	4f2c      	ldr	r7, [pc, #176]	; (16b80 <mpu_configure_regions+0xb4>)
   16ad0:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
   16ad2:	2100      	movs	r1, #0
   16ad4:	42b1      	cmp	r1, r6
   16ad6:	db01      	blt.n	16adc <mpu_configure_regions+0x10>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
   16ad8:	4610      	mov	r0, r2
   16ada:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
   16adc:	6844      	ldr	r4, [r0, #4]
   16ade:	2c00      	cmp	r4, #0
   16ae0:	d04b      	beq.n	16b7a <mpu_configure_regions+0xae>
		if (do_sanity_check &&
   16ae2:	b1c3      	cbz	r3, 16b16 <mpu_configure_regions+0x4a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
   16ae4:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
   16ae8:	ea14 0f0c 	tst.w	r4, ip
   16aec:	d00d      	beq.n	16b0a <mpu_configure_regions+0x3e>
			LOG_ERR("Partition %u: sanity check failed.", i);
   16aee:	4a25      	ldr	r2, [pc, #148]	; (16b84 <mpu_configure_regions+0xb8>)
   16af0:	6813      	ldr	r3, [r2, #0]
   16af2:	0758      	lsls	r0, r3, #29
   16af4:	d026      	beq.n	16b44 <mpu_configure_regions+0x78>
   16af6:	4b24      	ldr	r3, [pc, #144]	; (16b88 <mpu_configure_regions+0xbc>)
   16af8:	4824      	ldr	r0, [pc, #144]	; (16b8c <mpu_configure_regions+0xc0>)
   16afa:	1ad2      	subs	r2, r2, r3
   16afc:	0892      	lsrs	r2, r2, #2
   16afe:	0192      	lsls	r2, r2, #6
   16b00:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16b04:	f012 fbf8 	bl	292f8 <log_1>
		if (reg_index == -EINVAL) {
   16b08:	e01c      	b.n	16b44 <mpu_configure_regions+0x78>
		&&
   16b0a:	2c1f      	cmp	r4, #31
   16b0c:	d9ef      	bls.n	16aee <mpu_configure_regions+0x22>
		((part->start & (part->size - 1U)) == 0U);
   16b0e:	6805      	ldr	r5, [r0, #0]
		&&
   16b10:	ea1c 0f05 	tst.w	ip, r5
   16b14:	d1eb      	bne.n	16aee <mpu_configure_regions+0x22>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
   16b16:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
   16b18:	b2d5      	uxtb	r5, r2
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
   16b1a:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
   16b1e:	6802      	ldr	r2, [r0, #0]
   16b20:	d913      	bls.n	16b4a <mpu_configure_regions+0x7e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
   16b22:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
   16b26:	d812      	bhi.n	16b4e <mpu_configure_regions+0x82>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
   16b28:	3c01      	subs	r4, #1
   16b2a:	fab4 f484 	clz	r4, r4
   16b2e:	f1c4 041f 	rsb	r4, r4, #31
   16b32:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
   16b34:	2d07      	cmp	r5, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
   16b36:	ea4c 0404 	orr.w	r4, ip, r4
   16b3a:	d913      	bls.n	16b64 <mpu_configure_regions+0x98>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16b3c:	4a11      	ldr	r2, [pc, #68]	; (16b84 <mpu_configure_regions+0xb8>)
   16b3e:	6813      	ldr	r3, [r2, #0]
   16b40:	075b      	lsls	r3, r3, #29
   16b42:	d106      	bne.n	16b52 <mpu_configure_regions+0x86>
			return -EINVAL;
   16b44:	f06f 0215 	mvn.w	r2, #21
   16b48:	e7c6      	b.n	16ad8 <mpu_configure_regions+0xc>
		return REGION_32B;
   16b4a:	2408      	movs	r4, #8
   16b4c:	e7f2      	b.n	16b34 <mpu_configure_regions+0x68>
		return REGION_4G;
   16b4e:	243e      	movs	r4, #62	; 0x3e
   16b50:	e7f0      	b.n	16b34 <mpu_configure_regions+0x68>
   16b52:	4b0d      	ldr	r3, [pc, #52]	; (16b88 <mpu_configure_regions+0xbc>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
   16b54:	480e      	ldr	r0, [pc, #56]	; (16b90 <mpu_configure_regions+0xc4>)
   16b56:	1ad2      	subs	r2, r2, r3
   16b58:	0892      	lsrs	r2, r2, #2
   16b5a:	0192      	lsls	r2, r2, #6
   16b5c:	f042 0201 	orr.w	r2, r2, #1
   16b60:	4629      	mov	r1, r5
   16b62:	e7cf      	b.n	16b04 <mpu_configure_regions+0x38>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16b64:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
   16b68:	432a      	orrs	r2, r5
   16b6a:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16b6e:	f044 0401 	orr.w	r4, r4, #1
   16b72:	60bd      	str	r5, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16b74:	60fa      	str	r2, [r7, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16b76:	613c      	str	r4, [r7, #16]
		reg_index++;
   16b78:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
   16b7a:	3101      	adds	r1, #1
   16b7c:	300c      	adds	r0, #12
   16b7e:	e7a9      	b.n	16ad4 <mpu_configure_regions+0x8>
   16b80:	e000ed90 	.word	0xe000ed90
   16b84:	20000778 	.word	0x20000778
   16b88:	20000740 	.word	0x20000740
   16b8c:	00030ada 	.word	0x00030ada
   16b90:	00030afd 	.word	0x00030afd

00016b94 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
   16b94:	4b03      	ldr	r3, [pc, #12]	; (16ba4 <arm_core_mpu_enable+0x10>)
   16b96:	2205      	movs	r2, #5
   16b98:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
   16b9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   16b9e:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
   16ba2:	4770      	bx	lr
   16ba4:	e000ed90 	.word	0xe000ed90

00016ba8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
   16ba8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
   16bac:	4b01      	ldr	r3, [pc, #4]	; (16bb4 <arm_core_mpu_disable+0xc>)
   16bae:	2200      	movs	r2, #0
   16bb0:	605a      	str	r2, [r3, #4]
}
   16bb2:	4770      	bx	lr
   16bb4:	e000ed90 	.word	0xe000ed90

00016bb8 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
   16bb8:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
   16bba:	4d0e      	ldr	r5, [pc, #56]	; (16bf4 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
   16bbc:	2301      	movs	r3, #1
   16bbe:	782a      	ldrb	r2, [r5, #0]
   16bc0:	460c      	mov	r4, r1
   16bc2:	f7ff ff83 	bl	16acc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
   16bc6:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
   16bc8:	3016      	adds	r0, #22
   16bca:	d111      	bne.n	16bf0 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   16bcc:	f240 1311 	movw	r3, #273	; 0x111
   16bd0:	4a09      	ldr	r2, [pc, #36]	; (16bf8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   16bd2:	490a      	ldr	r1, [pc, #40]	; (16bfc <arm_core_mpu_configure_static_mpu_regions+0x44>)
   16bd4:	480a      	ldr	r0, [pc, #40]	; (16c00 <arm_core_mpu_configure_static_mpu_regions+0x48>)
   16bd6:	f011 ffe0 	bl	28b9a <printk>
   16bda:	4621      	mov	r1, r4
   16bdc:	4809      	ldr	r0, [pc, #36]	; (16c04 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
   16bde:	f011 ffdc 	bl	28b9a <printk>
			regions_num);
	}
}
   16be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
   16be6:	4804      	ldr	r0, [pc, #16]	; (16bf8 <arm_core_mpu_configure_static_mpu_regions+0x40>)
   16be8:	f240 1111 	movw	r1, #273	; 0x111
   16bec:	f012 ba16 	b.w	2901c <assert_post_action>
}
   16bf0:	bd38      	pop	{r3, r4, r5, pc}
   16bf2:	bf00      	nop
   16bf4:	20002a77 	.word	0x20002a77
   16bf8:	00030b23 	.word	0x00030b23
   16bfc:	00034515 	.word	0x00034515
   16c00:	0002e93e 	.word	0x0002e93e
   16c04:	00030b5a 	.word	0x00030b5a

00016c08 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
   16c08:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
   16c0a:	4a12      	ldr	r2, [pc, #72]	; (16c54 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
   16c0c:	2300      	movs	r3, #0
   16c0e:	7812      	ldrb	r2, [r2, #0]
   16c10:	460c      	mov	r4, r1
   16c12:	f7ff ff5b 	bl	16acc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
   16c16:	f110 0f16 	cmn.w	r0, #22
   16c1a:	d008      	beq.n	16c2e <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
   16c1c:	4b0e      	ldr	r3, [pc, #56]	; (16c58 <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
   16c1e:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
   16c20:	2807      	cmp	r0, #7
   16c22:	dd00      	ble.n	16c26 <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
   16c24:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
   16c26:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
   16c28:	611a      	str	r2, [r3, #16]
   16c2a:	3001      	adds	r0, #1
   16c2c:	e7f8      	b.n	16c20 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   16c2e:	4a0b      	ldr	r2, [pc, #44]	; (16c5c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   16c30:	490b      	ldr	r1, [pc, #44]	; (16c60 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
   16c32:	480c      	ldr	r0, [pc, #48]	; (16c64 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
   16c34:	f44f 7398 	mov.w	r3, #304	; 0x130
   16c38:	f011 ffaf 	bl	28b9a <printk>
   16c3c:	4621      	mov	r1, r4
   16c3e:	480a      	ldr	r0, [pc, #40]	; (16c68 <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
   16c40:	f011 ffab 	bl	28b9a <printk>
}
   16c44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
   16c48:	4804      	ldr	r0, [pc, #16]	; (16c5c <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
   16c4a:	f44f 7198 	mov.w	r1, #304	; 0x130
   16c4e:	f012 b9e5 	b.w	2901c <assert_post_action>
   16c52:	bf00      	nop
   16c54:	20002a77 	.word	0x20002a77
   16c58:	e000ed90 	.word	0xe000ed90
   16c5c:	00030b23 	.word	0x00030b23
   16c60:	00034515 	.word	0x00034515
   16c64:	0002e93e 	.word	0x0002e93e
   16c68:	00030b86 	.word	0x00030b86

00016c6c <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
   16c6c:	4925      	ldr	r1, [pc, #148]	; (16d04 <z_arm_mpu_init+0x98>)
{
   16c6e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
   16c70:	680c      	ldr	r4, [r1, #0]
   16c72:	2c08      	cmp	r4, #8
   16c74:	d913      	bls.n	16c9e <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
   16c76:	f44f 73a4 	mov.w	r3, #328	; 0x148
   16c7a:	4a23      	ldr	r2, [pc, #140]	; (16d08 <z_arm_mpu_init+0x9c>)
   16c7c:	4923      	ldr	r1, [pc, #140]	; (16d0c <z_arm_mpu_init+0xa0>)
   16c7e:	4824      	ldr	r0, [pc, #144]	; (16d10 <z_arm_mpu_init+0xa4>)
   16c80:	f011 ff8b 	bl	28b9a <printk>
   16c84:	4823      	ldr	r0, [pc, #140]	; (16d14 <z_arm_mpu_init+0xa8>)
   16c86:	2208      	movs	r2, #8
   16c88:	4621      	mov	r1, r4
   16c8a:	f011 ff86 	bl	28b9a <printk>
   16c8e:	481e      	ldr	r0, [pc, #120]	; (16d08 <z_arm_mpu_init+0x9c>)
   16c90:	f44f 71a4 	mov.w	r1, #328	; 0x148
   16c94:	f012 f9c2 	bl	2901c <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
   16c98:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
   16c9c:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
   16c9e:	f7ff ff83 	bl	16ba8 <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16ca2:	6848      	ldr	r0, [r1, #4]
   16ca4:	491c      	ldr	r1, [pc, #112]	; (16d18 <z_arm_mpu_init+0xac>)
   16ca6:	2200      	movs	r2, #0
   16ca8:	4294      	cmp	r4, r2
   16caa:	f100 000c 	add.w	r0, r0, #12
   16cae:	d119      	bne.n	16ce4 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
   16cb0:	4b1a      	ldr	r3, [pc, #104]	; (16d1c <z_arm_mpu_init+0xb0>)
   16cb2:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
   16cb4:	f7ff ff6e 	bl	16b94 <arm_core_mpu_enable>
	__ASSERT(
   16cb8:	680b      	ldr	r3, [r1, #0]
   16cba:	f3c3 2307 	ubfx	r3, r3, #8, #8
   16cbe:	2b08      	cmp	r3, #8
   16cc0:	d00e      	beq.n	16ce0 <z_arm_mpu_init+0x74>
   16cc2:	4917      	ldr	r1, [pc, #92]	; (16d20 <z_arm_mpu_init+0xb4>)
   16cc4:	4a10      	ldr	r2, [pc, #64]	; (16d08 <z_arm_mpu_init+0x9c>)
   16cc6:	4812      	ldr	r0, [pc, #72]	; (16d10 <z_arm_mpu_init+0xa4>)
   16cc8:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
   16ccc:	f011 ff65 	bl	28b9a <printk>
   16cd0:	4814      	ldr	r0, [pc, #80]	; (16d24 <z_arm_mpu_init+0xb8>)
   16cd2:	f011 ff62 	bl	28b9a <printk>
   16cd6:	480c      	ldr	r0, [pc, #48]	; (16d08 <z_arm_mpu_init+0x9c>)
   16cd8:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
   16cdc:	f012 f99e 	bl	2901c <assert_post_action>
	return 0;
   16ce0:	2000      	movs	r0, #0
   16ce2:	e7db      	b.n	16c9c <z_arm_mpu_init+0x30>
   16ce4:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16ce6:	f850 3c0c 	ldr.w	r3, [r0, #-12]
   16cea:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
   16cee:	4313      	orrs	r3, r2
   16cf0:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
   16cf4:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
   16cf6:	f850 3c04 	ldr.w	r3, [r0, #-4]
   16cfa:	f043 0301 	orr.w	r3, r3, #1
   16cfe:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
   16d00:	3201      	adds	r2, #1
   16d02:	e7d1      	b.n	16ca8 <z_arm_mpu_init+0x3c>
   16d04:	0002dc6c 	.word	0x0002dc6c
   16d08:	00030b23 	.word	0x00030b23
   16d0c:	00034515 	.word	0x00034515
   16d10:	0002e93e 	.word	0x0002e93e
   16d14:	00030bb3 	.word	0x00030bb3
   16d18:	e000ed90 	.word	0xe000ed90
   16d1c:	20002a77 	.word	0x20002a77
   16d20:	00030be7 	.word	0x00030be7
   16d24:	00030c37 	.word	0x00030c37

00016d28 <malloc_prepare>:
					 CONFIG_SRAM_BASE_ADDRESS))
	#endif /* CONFIG_XTENSA */
#endif

static int malloc_prepare(const struct device *unused)
{
   16d28:	b508      	push	{r3, lr}

	/*
	 * Validate that the memory space available for the newlib heap is
	 * greater than the minimum required size.
	 */
	__ASSERT(MAX_HEAP_SIZE >= CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE,
   16d2a:	4b0b      	ldr	r3, [pc, #44]	; (16d58 <malloc_prepare+0x30>)
   16d2c:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
   16d30:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
   16d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   16d38:	d20c      	bcs.n	16d54 <malloc_prepare+0x2c>
   16d3a:	4908      	ldr	r1, [pc, #32]	; (16d5c <malloc_prepare+0x34>)
   16d3c:	4a08      	ldr	r2, [pc, #32]	; (16d60 <malloc_prepare+0x38>)
   16d3e:	4809      	ldr	r0, [pc, #36]	; (16d64 <malloc_prepare+0x3c>)
   16d40:	2381      	movs	r3, #129	; 0x81
   16d42:	f011 ff2a 	bl	28b9a <printk>
   16d46:	4808      	ldr	r0, [pc, #32]	; (16d68 <malloc_prepare+0x40>)
   16d48:	f011 ff27 	bl	28b9a <printk>
   16d4c:	4804      	ldr	r0, [pc, #16]	; (16d60 <malloc_prepare+0x38>)
   16d4e:	2181      	movs	r1, #129	; 0x81
   16d50:	f012 f964 	bl	2901c <assert_post_action>
		 "memory space available for newlib heap is less than the "
		 "minimum required size specified by "
		 "CONFIG_NEWLIB_LIBC_MIN_REQUIRED_HEAP_SIZE");

	return 0;
}
   16d54:	2000      	movs	r0, #0
   16d56:	bd08      	pop	{r3, pc}
   16d58:	20007bc1 	.word	0x20007bc1
   16d5c:	00030c88 	.word	0x00030c88
   16d60:	00030c58 	.word	0x00030c58
   16d64:	0002e93e 	.word	0x0002e93e
   16d68:	00030ccf 	.word	0x00030ccf

00016d6c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
   16d6c:	4b01      	ldr	r3, [pc, #4]	; (16d74 <__stdout_hook_install+0x8>)
   16d6e:	6018      	str	r0, [r3, #0]
}
   16d70:	4770      	bx	lr
   16d72:	bf00      	nop
   16d74:	200004b8 	.word	0x200004b8

00016d78 <_sbrk>:
		;
	}
}

void *_sbrk(intptr_t count)
{
   16d78:	b510      	push	{r4, lr}
	void *ret, *ptr;

	ptr = ((char *)HEAP_BASE) + heap_sz;
   16d7a:	4c07      	ldr	r4, [pc, #28]	; (16d98 <_sbrk+0x20>)
   16d7c:	6823      	ldr	r3, [r4, #0]

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
   16d7e:	18c2      	adds	r2, r0, r3
   16d80:	4806      	ldr	r0, [pc, #24]	; (16d9c <_sbrk+0x24>)
   16d82:	f1c0 5100 	rsb	r1, r0, #536870912	; 0x20000000
   16d86:	f501 3100 	add.w	r1, r1, #131072	; 0x20000
   16d8a:	428a      	cmp	r2, r1
	ptr = ((char *)HEAP_BASE) + heap_sz;
   16d8c:	bf3a      	itte	cc
   16d8e:	18c0      	addcc	r0, r0, r3
		heap_sz += count;
   16d90:	6022      	strcc	r2, [r4, #0]

#ifdef CONFIG_NEWLIB_LIBC_HEAP_LISTENER
		heap_listener_notify_resize(HEAP_ID_LIBC, ptr, (char *)ptr + count);
#endif
	} else {
		ret = (void *)-1;
   16d92:	f04f 30ff 	movcs.w	r0, #4294967295
	}

	return ret;
}
   16d96:	bd10      	pop	{r4, pc}
   16d98:	20002710 	.word	0x20002710
   16d9c:	20007bc1 	.word	0x20007bc1

00016da0 <__retarget_lock_acquire_recursive>:
	k_sem_take((struct k_sem *)lock, K_FOREVER);
}

/* Acquiure recursive lock */
void __retarget_lock_acquire_recursive(_LOCK_T lock)
{
   16da0:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   16da2:	4604      	mov	r4, r0
   16da4:	b958      	cbnz	r0, 16dbe <__retarget_lock_acquire_recursive+0x1e>
   16da6:	490a      	ldr	r1, [pc, #40]	; (16dd0 <__retarget_lock_acquire_recursive+0x30>)
   16da8:	480a      	ldr	r0, [pc, #40]	; (16dd4 <__retarget_lock_acquire_recursive+0x34>)
   16daa:	4a0b      	ldr	r2, [pc, #44]	; (16dd8 <__retarget_lock_acquire_recursive+0x38>)
   16dac:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
   16db0:	f011 fef3 	bl	28b9a <printk>
   16db4:	4808      	ldr	r0, [pc, #32]	; (16dd8 <__retarget_lock_acquire_recursive+0x38>)
   16db6:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
   16dba:	f012 f92f 	bl	2901c <assert_post_action>
	return z_impl_k_mutex_lock(mutex, timeout);
   16dbe:	f04f 32ff 	mov.w	r2, #4294967295
   16dc2:	4620      	mov	r0, r4
   16dc4:	f04f 33ff 	mov.w	r3, #4294967295
	k_mutex_lock((struct k_mutex *)lock, K_FOREVER);
}
   16dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16dcc:	f00d bc5c 	b.w	24688 <z_impl_k_mutex_lock>
   16dd0:	00030d57 	.word	0x00030d57
   16dd4:	0002e93e 	.word	0x0002e93e
   16dd8:	00030c58 	.word	0x00030c58

00016ddc <__retarget_lock_release_recursive>:
	k_sem_give((struct k_sem *)lock);
}

/* Release recursive lock */
void __retarget_lock_release_recursive(_LOCK_T lock)
{
   16ddc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(lock != NULL);
   16dde:	4604      	mov	r4, r0
   16de0:	b958      	cbnz	r0, 16dfa <__retarget_lock_release_recursive+0x1e>
   16de2:	4908      	ldr	r1, [pc, #32]	; (16e04 <__retarget_lock_release_recursive+0x28>)
   16de4:	4808      	ldr	r0, [pc, #32]	; (16e08 <__retarget_lock_release_recursive+0x2c>)
   16de6:	4a09      	ldr	r2, [pc, #36]	; (16e0c <__retarget_lock_release_recursive+0x30>)
   16de8:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   16dec:	f011 fed5 	bl	28b9a <printk>
   16df0:	4806      	ldr	r0, [pc, #24]	; (16e0c <__retarget_lock_release_recursive+0x30>)
   16df2:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   16df6:	f012 f911 	bl	2901c <assert_post_action>
	return z_impl_k_mutex_unlock(mutex);
   16dfa:	4620      	mov	r0, r4
	k_mutex_unlock((struct k_mutex *)lock);
}
   16dfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16e00:	f00d bd42 	b.w	24888 <z_impl_k_mutex_unlock>
   16e04:	00030d57 	.word	0x00030d57
   16e08:	0002e93e 	.word	0x0002e93e
   16e0c:	00030c58 	.word	0x00030c58

00016e10 <nordicsemi_nrf52_init>:
	__asm__ volatile(
   16e10:	f04f 0340 	mov.w	r3, #64	; 0x40
   16e14:	f3ef 8211 	mrs	r2, BASEPRI
   16e18:	f383 8812 	msr	BASEPRI_MAX, r3
   16e1c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
   16e20:	4906      	ldr	r1, [pc, #24]	; (16e3c <nordicsemi_nrf52_init+0x2c>)
   16e22:	2301      	movs	r3, #1
   16e24:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
   16e28:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   16e2c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
   16e30:	f382 8811 	msr	BASEPRI, r2
   16e34:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   16e38:	2000      	movs	r0, #0
   16e3a:	4770      	bx	lr
   16e3c:	4001e000 	.word	0x4001e000

00016e40 <sys_arch_reboot>:
    *p_gpregret = val;
   16e40:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   16e44:	b2c0      	uxtb	r0, r0
   16e46:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
   16e4a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   16e4e:	4905      	ldr	r1, [pc, #20]	; (16e64 <sys_arch_reboot+0x24>)
   16e50:	4b05      	ldr	r3, [pc, #20]	; (16e68 <sys_arch_reboot+0x28>)
   16e52:	68ca      	ldr	r2, [r1, #12]
   16e54:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   16e58:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   16e5a:	60cb      	str	r3, [r1, #12]
   16e5c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   16e60:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   16e62:	e7fd      	b.n	16e60 <sys_arch_reboot+0x20>
   16e64:	e000ed00 	.word	0xe000ed00
   16e68:	05fa0004 	.word	0x05fa0004

00016e6c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
   16e6c:	b120      	cbz	r0, 16e78 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
   16e6e:	4b03      	ldr	r3, [pc, #12]	; (16e7c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
   16e70:	0180      	lsls	r0, r0, #6
   16e72:	f043 0301 	orr.w	r3, r3, #1
   16e76:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
   16e78:	4770      	bx	lr
   16e7a:	bf00      	nop
   16e7c:	0002d450 	.word	0x0002d450

00016e80 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
   16e80:	4b0e      	ldr	r3, [pc, #56]	; (16ebc <bt_hex_real+0x3c>)
   16e82:	2940      	cmp	r1, #64	; 0x40
{
   16e84:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
   16e86:	bf28      	it	cs
   16e88:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
   16e8a:	4c0d      	ldr	r4, [pc, #52]	; (16ec0 <bt_hex_real+0x40>)
   16e8c:	1846      	adds	r6, r0, r1
   16e8e:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
   16e90:	42b0      	cmp	r0, r6
   16e92:	f103 0302 	add.w	r3, r3, #2
   16e96:	d104      	bne.n	16ea2 <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
   16e98:	2300      	movs	r3, #0
   16e9a:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
   16e9e:	4807      	ldr	r0, [pc, #28]	; (16ebc <bt_hex_real+0x3c>)
   16ea0:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
   16ea2:	7802      	ldrb	r2, [r0, #0]
   16ea4:	0912      	lsrs	r2, r2, #4
   16ea6:	5ca2      	ldrb	r2, [r4, r2]
   16ea8:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
   16eac:	f810 2b01 	ldrb.w	r2, [r0], #1
   16eb0:	f002 020f 	and.w	r2, r2, #15
   16eb4:	5ca2      	ldrb	r2, [r4, r2]
   16eb6:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
   16eba:	e7e9      	b.n	16e90 <bt_hex_real+0x10>
   16ebc:	20002a78 	.word	0x20002a78
   16ec0:	00030dea 	.word	0x00030dea

00016ec4 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
   16ec4:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
   16ec6:	7803      	ldrb	r3, [r0, #0]
   16ec8:	b08b      	sub	sp, #44	; 0x2c
   16eca:	4604      	mov	r4, r0
   16ecc:	ad07      	add	r5, sp, #28
   16ece:	2b03      	cmp	r3, #3
   16ed0:	d821      	bhi.n	16f16 <bt_addr_le_str_real+0x52>
   16ed2:	e8df f003 	tbb	[pc, r3]
   16ed6:	1a02      	.short	0x1a02
   16ed8:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
   16eda:	4912      	ldr	r1, [pc, #72]	; (16f24 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
   16edc:	4628      	mov	r0, r5
   16ede:	f015 fec7 	bl	2cc70 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   16ee2:	7863      	ldrb	r3, [r4, #1]
   16ee4:	9304      	str	r3, [sp, #16]
   16ee6:	78a3      	ldrb	r3, [r4, #2]
   16ee8:	9303      	str	r3, [sp, #12]
   16eea:	78e3      	ldrb	r3, [r4, #3]
   16eec:	9302      	str	r3, [sp, #8]
   16eee:	7923      	ldrb	r3, [r4, #4]
   16ef0:	9301      	str	r3, [sp, #4]
   16ef2:	7963      	ldrb	r3, [r4, #5]
   16ef4:	9300      	str	r3, [sp, #0]
   16ef6:	4a0c      	ldr	r2, [pc, #48]	; (16f28 <bt_addr_le_str_real+0x64>)
   16ef8:	79a3      	ldrb	r3, [r4, #6]
   16efa:	9505      	str	r5, [sp, #20]
   16efc:	211e      	movs	r1, #30
   16efe:	480b      	ldr	r0, [pc, #44]	; (16f2c <bt_addr_le_str_real+0x68>)
   16f00:	f011 fe58 	bl	28bb4 <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
   16f04:	4809      	ldr	r0, [pc, #36]	; (16f2c <bt_addr_le_str_real+0x68>)
   16f06:	b00b      	add	sp, #44	; 0x2c
   16f08:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
   16f0a:	4909      	ldr	r1, [pc, #36]	; (16f30 <bt_addr_le_str_real+0x6c>)
   16f0c:	e7e6      	b.n	16edc <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
   16f0e:	4909      	ldr	r1, [pc, #36]	; (16f34 <bt_addr_le_str_real+0x70>)
   16f10:	e7e4      	b.n	16edc <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
   16f12:	4909      	ldr	r1, [pc, #36]	; (16f38 <bt_addr_le_str_real+0x74>)
   16f14:	e7e2      	b.n	16edc <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   16f16:	4a09      	ldr	r2, [pc, #36]	; (16f3c <bt_addr_le_str_real+0x78>)
   16f18:	210a      	movs	r1, #10
   16f1a:	4628      	mov	r0, r5
   16f1c:	f011 fe4a 	bl	28bb4 <snprintk>
		break;
   16f20:	e7df      	b.n	16ee2 <bt_addr_le_str_real+0x1e>
   16f22:	bf00      	nop
   16f24:	00030da5 	.word	0x00030da5
   16f28:	00030dc7 	.word	0x00030dc7
   16f2c:	20002af9 	.word	0x20002af9
   16f30:	00030dac 	.word	0x00030dac
   16f34:	00030db3 	.word	0x00030db3
   16f38:	00030dbd 	.word	0x00030dbd
   16f3c:	00031c8a 	.word	0x00031c8a

00016f40 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
   16f40:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f42:	460b      	mov	r3, r1
	switch (src->type) {
   16f44:	7801      	ldrb	r1, [r0, #0]
   16f46:	2901      	cmp	r1, #1
{
   16f48:	4602      	mov	r2, r0
	switch (src->type) {
   16f4a:	d015      	beq.n	16f78 <uuid_to_uuid128+0x38>
   16f4c:	2902      	cmp	r1, #2
   16f4e:	d02b      	beq.n	16fa8 <uuid_to_uuid128+0x68>
   16f50:	b989      	cbnz	r1, 16f76 <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
   16f52:	4c1c      	ldr	r4, [pc, #112]	; (16fc4 <uuid_to_uuid128+0x84>)
   16f54:	461d      	mov	r5, r3
   16f56:	f104 0710 	add.w	r7, r4, #16
   16f5a:	6820      	ldr	r0, [r4, #0]
   16f5c:	6861      	ldr	r1, [r4, #4]
   16f5e:	462e      	mov	r6, r5
   16f60:	c603      	stmia	r6!, {r0, r1}
   16f62:	3408      	adds	r4, #8
   16f64:	42bc      	cmp	r4, r7
   16f66:	4635      	mov	r5, r6
   16f68:	d1f7      	bne.n	16f5a <uuid_to_uuid128+0x1a>
		sys_put_le16(BT_UUID_16(src)->val,
   16f6a:	8852      	ldrh	r2, [r2, #2]
		*dst = uuid128_base;
   16f6c:	7821      	ldrb	r1, [r4, #0]
   16f6e:	7031      	strb	r1, [r6, #0]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
   16f70:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
   16f72:	0a12      	lsrs	r2, r2, #8
   16f74:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
   16f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst = uuid128_base;
   16f78:	4c12      	ldr	r4, [pc, #72]	; (16fc4 <uuid_to_uuid128+0x84>)
   16f7a:	461d      	mov	r5, r3
   16f7c:	f104 0710 	add.w	r7, r4, #16
   16f80:	6820      	ldr	r0, [r4, #0]
   16f82:	6861      	ldr	r1, [r4, #4]
   16f84:	462e      	mov	r6, r5
   16f86:	c603      	stmia	r6!, {r0, r1}
   16f88:	3408      	adds	r4, #8
   16f8a:	42bc      	cmp	r4, r7
   16f8c:	4635      	mov	r5, r6
   16f8e:	d1f7      	bne.n	16f80 <uuid_to_uuid128+0x40>
		sys_put_le32(BT_UUID_32(src)->val,
   16f90:	6852      	ldr	r2, [r2, #4]
		*dst = uuid128_base;
   16f92:	7821      	ldrb	r1, [r4, #0]
   16f94:	7031      	strb	r1, [r6, #0]
   16f96:	f3c2 2107 	ubfx	r1, r2, #8, #8
	dst[0] = val;
   16f9a:	735a      	strb	r2, [r3, #13]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(uint32_t val, uint8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
   16f9c:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
   16f9e:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
   16fa0:	0a12      	lsrs	r2, r2, #8
   16fa2:	7399      	strb	r1, [r3, #14]
   16fa4:	741a      	strb	r2, [r3, #16]
}
   16fa6:	e7e6      	b.n	16f76 <uuid_to_uuid128+0x36>
   16fa8:	f100 0510 	add.w	r5, r0, #16
   16fac:	6810      	ldr	r0, [r2, #0]
   16fae:	6851      	ldr	r1, [r2, #4]
   16fb0:	461c      	mov	r4, r3
   16fb2:	c403      	stmia	r4!, {r0, r1}
   16fb4:	3208      	adds	r2, #8
   16fb6:	42aa      	cmp	r2, r5
   16fb8:	4623      	mov	r3, r4
   16fba:	d1f7      	bne.n	16fac <uuid_to_uuid128+0x6c>
   16fbc:	7812      	ldrb	r2, [r2, #0]
   16fbe:	7022      	strb	r2, [r4, #0]
   16fc0:	e7d9      	b.n	16f76 <uuid_to_uuid128+0x36>
   16fc2:	bf00      	nop
   16fc4:	00030e1f 	.word	0x00030e1f

00016fc8 <bt_uuid_to_str>:
	}
	return true;
}

void bt_uuid_to_str(const struct bt_uuid *uuid, char *str, size_t len)
{
   16fc8:	b510      	push	{r4, lr}
   16fca:	4603      	mov	r3, r0
   16fcc:	b086      	sub	sp, #24
	uint32_t tmp1, tmp5;
	uint16_t tmp0, tmp2, tmp3, tmp4;

	switch (uuid->type) {
   16fce:	781c      	ldrb	r4, [r3, #0]
   16fd0:	2c01      	cmp	r4, #1
{
   16fd2:	4608      	mov	r0, r1
   16fd4:	4611      	mov	r1, r2
	switch (uuid->type) {
   16fd6:	d009      	beq.n	16fec <bt_uuid_to_str+0x24>
   16fd8:	2c02      	cmp	r4, #2
   16fda:	d00a      	beq.n	16ff2 <bt_uuid_to_str+0x2a>
   16fdc:	b9fc      	cbnz	r4, 1701e <bt_uuid_to_str+0x56>
	case BT_UUID_TYPE_16:
		snprintk(str, len, "%04x", BT_UUID_16(uuid)->val);
   16fde:	885b      	ldrh	r3, [r3, #2]
   16fe0:	4a12      	ldr	r2, [pc, #72]	; (1702c <bt_uuid_to_str+0x64>)
		break;
	default:
		(void)memset(str, 0, len);
		return;
	}
}
   16fe2:	b006      	add	sp, #24
   16fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		snprintk(str, len, "%08x", BT_UUID_32(uuid)->val);
   16fe8:	f011 bde4 	b.w	28bb4 <snprintk>
   16fec:	685b      	ldr	r3, [r3, #4]
   16fee:	4a10      	ldr	r2, [pc, #64]	; (17030 <bt_uuid_to_str+0x68>)
   16ff0:	e7f7      	b.n	16fe2 <bt_uuid_to_str+0x1a>
		snprintk(str, len, "%08x-%04x-%04x-%04x-%08x%04x",
   16ff2:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   16ff6:	9204      	str	r2, [sp, #16]
   16ff8:	f8d3 2003 	ldr.w	r2, [r3, #3]
   16ffc:	9203      	str	r2, [sp, #12]
   16ffe:	f8b3 2007 	ldrh.w	r2, [r3, #7]
   17002:	9202      	str	r2, [sp, #8]
   17004:	f8b3 2009 	ldrh.w	r2, [r3, #9]
   17008:	9201      	str	r2, [sp, #4]
   1700a:	f8b3 200b 	ldrh.w	r2, [r3, #11]
   1700e:	9200      	str	r2, [sp, #0]
   17010:	f8d3 300d 	ldr.w	r3, [r3, #13]
   17014:	4a07      	ldr	r2, [pc, #28]	; (17034 <bt_uuid_to_str+0x6c>)
   17016:	f011 fdcd 	bl	28bb4 <snprintk>
}
   1701a:	b006      	add	sp, #24
   1701c:	bd10      	pop	{r4, pc}
__ssp_bos_icheck3(memset, void *, int)
   1701e:	2100      	movs	r1, #0
   17020:	b006      	add	sp, #24
   17022:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17026:	f015 be0e 	b.w	2cc46 <memset>
   1702a:	bf00      	nop
   1702c:	00031ada 	.word	0x00031ada
   17030:	0003048c 	.word	0x0003048c
   17034:	00030e02 	.word	0x00030e02

00017038 <bt_addr_le_from_str>:

	return 0;
}

int bt_addr_le_from_str(const char *str, const char *type, bt_addr_le_t *addr)
{
   17038:	b538      	push	{r3, r4, r5, lr}
   1703a:	460c      	mov	r4, r1
	int err;

	err = bt_addr_from_str(str, &addr->a);
   1703c:	1c51      	adds	r1, r2, #1
{
   1703e:	4615      	mov	r5, r2
	err = bt_addr_from_str(str, &addr->a);
   17040:	f013 fc33 	bl	2a8aa <bt_addr_from_str>
	if (err < 0) {
   17044:	2800      	cmp	r0, #0
   17046:	db06      	blt.n	17056 <bt_addr_le_from_str+0x1e>
		return err;
	}

	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   17048:	491c      	ldr	r1, [pc, #112]	; (170bc <bt_addr_le_from_str+0x84>)
   1704a:	4620      	mov	r0, r4
   1704c:	f7f5 f9a8 	bl	c3a0 <strcmp>
   17050:	b910      	cbnz	r0, 17058 <bt_addr_le_from_str+0x20>
		addr->type = BT_ADDR_LE_PUBLIC;
   17052:	2000      	movs	r0, #0
   17054:	7028      	strb	r0, [r5, #0]
	} else {
		return -EINVAL;
	}

	return 0;
}
   17056:	bd38      	pop	{r3, r4, r5, pc}
	if (!strcmp(type, "public") || !strcmp(type, "(public)")) {
   17058:	4919      	ldr	r1, [pc, #100]	; (170c0 <bt_addr_le_from_str+0x88>)
   1705a:	4620      	mov	r0, r4
   1705c:	f7f5 f9a0 	bl	c3a0 <strcmp>
   17060:	2800      	cmp	r0, #0
   17062:	d0f6      	beq.n	17052 <bt_addr_le_from_str+0x1a>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   17064:	4917      	ldr	r1, [pc, #92]	; (170c4 <bt_addr_le_from_str+0x8c>)
   17066:	4620      	mov	r0, r4
   17068:	f7f5 f99a 	bl	c3a0 <strcmp>
   1706c:	b918      	cbnz	r0, 17076 <bt_addr_le_from_str+0x3e>
		addr->type = BT_ADDR_LE_RANDOM;
   1706e:	2301      	movs	r3, #1
		addr->type = BT_ADDR_LE_RANDOM_ID;
   17070:	702b      	strb	r3, [r5, #0]
	return 0;
   17072:	2000      	movs	r0, #0
		addr->type = BT_ADDR_LE_RANDOM_ID;
   17074:	e7ef      	b.n	17056 <bt_addr_le_from_str+0x1e>
	} else if (!strcmp(type, "random") || !strcmp(type, "(random)")) {
   17076:	4914      	ldr	r1, [pc, #80]	; (170c8 <bt_addr_le_from_str+0x90>)
   17078:	4620      	mov	r0, r4
   1707a:	f7f5 f991 	bl	c3a0 <strcmp>
   1707e:	2800      	cmp	r0, #0
   17080:	d0f5      	beq.n	1706e <bt_addr_le_from_str+0x36>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   17082:	4912      	ldr	r1, [pc, #72]	; (170cc <bt_addr_le_from_str+0x94>)
   17084:	4620      	mov	r0, r4
   17086:	f7f5 f98b 	bl	c3a0 <strcmp>
   1708a:	b908      	cbnz	r0, 17090 <bt_addr_le_from_str+0x58>
		addr->type = BT_ADDR_LE_PUBLIC_ID;
   1708c:	2302      	movs	r3, #2
   1708e:	e7ef      	b.n	17070 <bt_addr_le_from_str+0x38>
	} else if (!strcmp(type, "public-id") || !strcmp(type, "(public-id)")) {
   17090:	490f      	ldr	r1, [pc, #60]	; (170d0 <bt_addr_le_from_str+0x98>)
   17092:	4620      	mov	r0, r4
   17094:	f7f5 f984 	bl	c3a0 <strcmp>
   17098:	2800      	cmp	r0, #0
   1709a:	d0f7      	beq.n	1708c <bt_addr_le_from_str+0x54>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   1709c:	490d      	ldr	r1, [pc, #52]	; (170d4 <bt_addr_le_from_str+0x9c>)
   1709e:	4620      	mov	r0, r4
   170a0:	f7f5 f97e 	bl	c3a0 <strcmp>
   170a4:	b908      	cbnz	r0, 170aa <bt_addr_le_from_str+0x72>
		addr->type = BT_ADDR_LE_RANDOM_ID;
   170a6:	2303      	movs	r3, #3
   170a8:	e7e2      	b.n	17070 <bt_addr_le_from_str+0x38>
	} else if (!strcmp(type, "random-id") || !strcmp(type, "(random-id)")) {
   170aa:	490b      	ldr	r1, [pc, #44]	; (170d8 <bt_addr_le_from_str+0xa0>)
   170ac:	4620      	mov	r0, r4
   170ae:	f7f5 f977 	bl	c3a0 <strcmp>
   170b2:	2800      	cmp	r0, #0
   170b4:	d0f7      	beq.n	170a6 <bt_addr_le_from_str+0x6e>
		return -EINVAL;
   170b6:	f06f 0015 	mvn.w	r0, #21
   170ba:	e7cc      	b.n	17056 <bt_addr_le_from_str+0x1e>
   170bc:	00030da5 	.word	0x00030da5
   170c0:	00030e30 	.word	0x00030e30
   170c4:	00030dac 	.word	0x00030dac
   170c8:	00030e39 	.word	0x00030e39
   170cc:	00030db3 	.word	0x00030db3
   170d0:	00030e42 	.word	0x00030e42
   170d4:	00030dbd 	.word	0x00030dbd
   170d8:	00030e4e 	.word	0x00030e4e

000170dc <bt_buf_get_rx>:
			  BT_BUF_RX_SIZE, 8,
			  NULL);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
   170dc:	b570      	push	{r4, r5, r6, lr}
   170de:	461c      	mov	r4, r3
	struct net_buf *buf;

	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   170e0:	f000 03fd 	and.w	r3, r0, #253	; 0xfd
   170e4:	2b01      	cmp	r3, #1
{
   170e6:	4605      	mov	r5, r0
   170e8:	4616      	mov	r6, r2
	__ASSERT(type == BT_BUF_EVT || type == BT_BUF_ACL_IN ||
   170ea:	d00e      	beq.n	1710a <bt_buf_get_rx+0x2e>
   170ec:	2805      	cmp	r0, #5
   170ee:	d00c      	beq.n	1710a <bt_buf_get_rx+0x2e>
   170f0:	490d      	ldr	r1, [pc, #52]	; (17128 <bt_buf_get_rx+0x4c>)
   170f2:	4a0e      	ldr	r2, [pc, #56]	; (1712c <bt_buf_get_rx+0x50>)
   170f4:	480e      	ldr	r0, [pc, #56]	; (17130 <bt_buf_get_rx+0x54>)
   170f6:	2341      	movs	r3, #65	; 0x41
   170f8:	f011 fd4f 	bl	28b9a <printk>
   170fc:	480d      	ldr	r0, [pc, #52]	; (17134 <bt_buf_get_rx+0x58>)
   170fe:	f011 fd4c 	bl	28b9a <printk>
   17102:	480a      	ldr	r0, [pc, #40]	; (1712c <bt_buf_get_rx+0x50>)
   17104:	2141      	movs	r1, #65	; 0x41
   17106:	f011 ff89 	bl	2901c <assert_post_action>
 * @copydetails net_buf_alloc_fixed
 */
static inline struct net_buf * __must_check net_buf_alloc(struct net_buf_pool *pool,
							  k_timeout_t timeout)
{
	return net_buf_alloc_fixed(pool, timeout);
   1710a:	4623      	mov	r3, r4
   1710c:	480a      	ldr	r0, [pc, #40]	; (17138 <bt_buf_get_rx+0x5c>)
   1710e:	4632      	mov	r2, r6
   17110:	f014 ff8b 	bl	2c02a <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
   17114:	4604      	mov	r4, r0
   17116:	b120      	cbz	r0, 17122 <bt_buf_get_rx+0x46>
 * @param buf Buffer to initialize.
 * @param reserve How much headroom to reserve.
 */
static inline void net_buf_reserve(struct net_buf *buf, size_t reserve)
{
	net_buf_simple_reserve(&buf->b, reserve);
   17118:	2100      	movs	r1, #0
   1711a:	3008      	adds	r0, #8
   1711c:	f008 ff10 	bl	1ff40 <net_buf_simple_reserve>
 *  @param buf   Bluetooth buffer
 *  @param type  The BT_* type to set the buffer to
 */
static inline void bt_buf_set_type(struct net_buf *buf, enum bt_buf_type type)
{
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   17120:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
   17122:	4620      	mov	r0, r4
   17124:	bd70      	pop	{r4, r5, r6, pc}
   17126:	bf00      	nop
   17128:	00030e89 	.word	0x00030e89
   1712c:	00030e5a 	.word	0x00030e5a
   17130:	0002e93e 	.word	0x0002e93e
   17134:	00030ece 	.word	0x00030ece
   17138:	200009c0 	.word	0x200009c0

0001713c <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
   1713c:	460b      	mov	r3, r1
	struct net_buf *buf;

	if (bt_dev.sent_cmd) {
   1713e:	490b      	ldr	r1, [pc, #44]	; (1716c <bt_buf_get_cmd_complete+0x30>)
{
   17140:	4602      	mov	r2, r0
	if (bt_dev.sent_cmd) {
   17142:	f8d1 0130 	ldr.w	r0, [r1, #304]	; 0x130
{
   17146:	b510      	push	{r4, lr}
	if (bt_dev.sent_cmd) {
   17148:	b920      	cbnz	r0, 17154 <bt_buf_get_cmd_complete+0x18>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
   1714a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
   1714e:	2001      	movs	r0, #1
   17150:	f7ff bfc4 	b.w	170dc <bt_buf_get_rx>
		buf = net_buf_ref(bt_dev.sent_cmd);
   17154:	f008 ff98 	bl	20088 <net_buf_ref>
   17158:	2301      	movs	r3, #1
		buf->len = 0U;
   1715a:	2100      	movs	r1, #0
   1715c:	7503      	strb	r3, [r0, #20]
   1715e:	8181      	strh	r1, [r0, #12]
		buf = net_buf_ref(bt_dev.sent_cmd);
   17160:	4604      	mov	r4, r0
   17162:	3008      	adds	r0, #8
   17164:	f008 feec 	bl	1ff40 <net_buf_simple_reserve>
}
   17168:	4620      	mov	r0, r4
   1716a:	bd10      	pop	{r4, pc}
   1716c:	200002a8 	.word	0x200002a8

00017170 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
   17170:	b570      	push	{r4, r5, r6, lr}
   17172:	4604      	mov	r4, r0
	switch (evt) {
   17174:	2c0f      	cmp	r4, #15
{
   17176:	460d      	mov	r5, r1
   17178:	4610      	mov	r0, r2
   1717a:	4619      	mov	r1, r3
	switch (evt) {
   1717c:	d805      	bhi.n	1718a <bt_buf_get_evt+0x1a>
   1717e:	2c0d      	cmp	r4, #13
   17180:	d912      	bls.n	171a8 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_BUF_EVT_DISCARDABLE_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
   17182:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
   17186:	f7ff bfd9 	b.w	1713c <bt_buf_get_cmd_complete>
	switch (evt) {
   1718a:	2c13      	cmp	r4, #19
   1718c:	d10c      	bne.n	171a8 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
   1718e:	480b      	ldr	r0, [pc, #44]	; (171bc <bt_buf_get_evt+0x4c>)
   17190:	f014 ff4b 	bl	2c02a <net_buf_alloc_fixed>
			if (buf) {
   17194:	4604      	mov	r4, r0
   17196:	b128      	cbz	r0, 171a4 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
   17198:	2100      	movs	r1, #0
   1719a:	3008      	adds	r0, #8
   1719c:	f008 fed0 	bl	1ff40 <net_buf_simple_reserve>
   171a0:	2301      	movs	r3, #1
   171a2:	7523      	strb	r3, [r4, #20]
}
   171a4:	4620      	mov	r0, r4
   171a6:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
   171a8:	4602      	mov	r2, r0
   171aa:	460b      	mov	r3, r1
		if (discardable) {
   171ac:	b10d      	cbz	r5, 171b2 <bt_buf_get_evt+0x42>
   171ae:	4804      	ldr	r0, [pc, #16]	; (171c0 <bt_buf_get_evt+0x50>)
   171b0:	e7ee      	b.n	17190 <bt_buf_get_evt+0x20>
}
   171b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
   171b6:	2001      	movs	r0, #1
   171b8:	f7ff bf90 	b.w	170dc <bt_buf_get_rx>
   171bc:	200009f4 	.word	0x200009f4
   171c0:	20000924 	.word	0x20000924

000171c4 <hci_data_buf_overflow>:

static void hci_data_buf_overflow(struct net_buf *buf)
{
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;

	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   171c4:	4a08      	ldr	r2, [pc, #32]	; (171e8 <hci_data_buf_overflow+0x24>)
   171c6:	6813      	ldr	r3, [r2, #0]
   171c8:	f013 0f06 	tst.w	r3, #6
   171cc:	d00a      	beq.n	171e4 <hci_data_buf_overflow+0x20>
   171ce:	4907      	ldr	r1, [pc, #28]	; (171ec <hci_data_buf_overflow+0x28>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
   171d0:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
   171d2:	4807      	ldr	r0, [pc, #28]	; (171f0 <hci_data_buf_overflow+0x2c>)
   171d4:	1a52      	subs	r2, r2, r1
   171d6:	0892      	lsrs	r2, r2, #2
   171d8:	0192      	lsls	r2, r2, #6
   171da:	7819      	ldrb	r1, [r3, #0]
   171dc:	f042 0202 	orr.w	r2, r2, #2
   171e0:	f012 b88a 	b.w	292f8 <log_1>
}
   171e4:	4770      	bx	lr
   171e6:	bf00      	nop
   171e8:	20000750 	.word	0x20000750
   171ec:	20000740 	.word	0x20000740
   171f0:	00030ef5 	.word	0x00030ef5

000171f4 <hci_disconn_complete_prio>:

	return false;
}

static void hci_disconn_complete_prio(struct net_buf *buf)
{
   171f4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   171f6:	6883      	ldr	r3, [r0, #8]
	struct bt_conn *conn;

	BT_DBG("status 0x%02x handle %u reason 0x%02x", evt->status, handle,
	       evt->reason);

	if (evt->status) {
   171f8:	781a      	ldrb	r2, [r3, #0]
   171fa:	b972      	cbnz	r2, 1721a <hci_disconn_complete_prio+0x26>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   171fc:	f8b3 4001 	ldrh.w	r4, [r3, #1]
		return;
	}

	conn = bt_conn_lookup_handle(handle);
   17200:	4620      	mov	r0, r4
   17202:	f002 fd01 	bl	19c08 <bt_conn_lookup_handle>
	if (!conn) {
   17206:	4605      	mov	r5, r0
   17208:	b940      	cbnz	r0, 1721c <hci_disconn_complete_prio+0x28>
		if (!disconnected_handles[i]) {
   1720a:	4b08      	ldr	r3, [pc, #32]	; (1722c <hci_disconn_complete_prio+0x38>)
   1720c:	881a      	ldrh	r2, [r3, #0]
   1720e:	b922      	cbnz	r2, 1721a <hci_disconn_complete_prio+0x26>
			disconnected_handles[i] = ~BT_ACL_HANDLE_MASK | handle;
   17210:	ea6f 5004 	mvn.w	r0, r4, lsl #20
   17214:	ea6f 5010 	mvn.w	r0, r0, lsr #20
   17218:	8018      	strh	r0, [r3, #0]
		return;
	}

	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
	bt_conn_unref(conn);
}
   1721a:	bd38      	pop	{r3, r4, r5, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1721c:	2101      	movs	r1, #1
   1721e:	f002 fcff 	bl	19c20 <bt_conn_set_state>
	bt_conn_unref(conn);
   17222:	4628      	mov	r0, r5
}
   17224:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   17228:	f002 bcc4 	b.w	19bb4 <bt_conn_unref>
   1722c:	20002a24 	.word	0x20002a24

00017230 <le_data_len_change>:

#if defined(CONFIG_BT_DATA_LEN_UPDATE)
static void le_data_len_change(struct net_buf *buf)
{
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17230:	6883      	ldr	r3, [r0, #8]
{
   17232:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   17234:	881c      	ldrh	r4, [r3, #0]
	struct bt_conn *conn;

	conn = bt_conn_lookup_handle(handle);
   17236:	4620      	mov	r0, r4
   17238:	f002 fce6 	bl	19c08 <bt_conn_lookup_handle>
	if (!conn) {
   1723c:	b978      	cbnz	r0, 1725e <le_data_len_change+0x2e>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1723e:	4a0a      	ldr	r2, [pc, #40]	; (17268 <le_data_len_change+0x38>)
   17240:	6813      	ldr	r3, [r2, #0]
   17242:	075b      	lsls	r3, r3, #29
   17244:	d00f      	beq.n	17266 <le_data_len_change+0x36>
   17246:	4b09      	ldr	r3, [pc, #36]	; (1726c <le_data_len_change+0x3c>)
   17248:	4809      	ldr	r0, [pc, #36]	; (17270 <le_data_len_change+0x40>)
   1724a:	1ad2      	subs	r2, r2, r3
   1724c:	0892      	lsrs	r2, r2, #2
   1724e:	0192      	lsls	r2, r2, #6
   17250:	4621      	mov	r1, r4
   17252:	f042 0201 	orr.w	r2, r2, #1
	conn->le.data_len.rx_max_time = max_rx_time;
	notify_le_data_len_updated(conn);
#endif

	bt_conn_unref(conn);
}
   17256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1725a:	f012 b84d 	b.w	292f8 <log_1>
}
   1725e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   17262:	f002 bca7 	b.w	19bb4 <bt_conn_unref>
}
   17266:	bd10      	pop	{r4, pc}
   17268:	20000750 	.word	0x20000750
   1726c:	20000740 	.word	0x20000740
   17270:	00030f1d 	.word	0x00030f1d

00017274 <hci_hardware_error>:
	bt_conn_unref(conn);
}
#endif /* CONFIG_BT_REMOTE_VERSION */

static void hci_hardware_error(struct net_buf *buf)
{
   17274:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
   17276:	2101      	movs	r1, #1
   17278:	3008      	adds	r0, #8
   1727a:	f008 ffcd 	bl	20218 <net_buf_simple_pull_mem>
	struct bt_hci_evt_hardware_error *evt;

	evt = net_buf_pull_mem(buf, sizeof(*evt));

	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   1727e:	4a08      	ldr	r2, [pc, #32]	; (172a0 <hci_hardware_error+0x2c>)
   17280:	6813      	ldr	r3, [r2, #0]
   17282:	075b      	lsls	r3, r3, #29
   17284:	d00b      	beq.n	1729e <hci_hardware_error+0x2a>
   17286:	4b07      	ldr	r3, [pc, #28]	; (172a4 <hci_hardware_error+0x30>)
   17288:	7801      	ldrb	r1, [r0, #0]
   1728a:	4807      	ldr	r0, [pc, #28]	; (172a8 <hci_hardware_error+0x34>)
   1728c:	1ad2      	subs	r2, r2, r3
   1728e:	0892      	lsrs	r2, r2, #2
   17290:	0192      	lsls	r2, r2, #6
}
   17292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
   17296:	f042 0201 	orr.w	r2, r2, #1
   1729a:	f012 b82d 	b.w	292f8 <log_1>
}
   1729e:	bd08      	pop	{r3, pc}
   172a0:	20000750 	.word	0x20000750
   172a4:	20000740 	.word	0x20000740
   172a8:	00030f41 	.word	0x00030f41

000172ac <hci_vendor_event>:
	}
#endif /* CONFIG_BT_HCI_VS_EVT_USER */

	if (IS_ENABLED(CONFIG_BT_HCI_VS_EXT) && !handled) {
		/* do nothing at present time */
		BT_WARN("Unhandled vendor-specific event: %s",
   172ac:	4b0c      	ldr	r3, [pc, #48]	; (172e0 <hci_vendor_event+0x34>)
   172ae:	681a      	ldr	r2, [r3, #0]
   172b0:	f012 0f06 	tst.w	r2, #6
{
   172b4:	b510      	push	{r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   172b6:	d012      	beq.n	172de <hci_vendor_event+0x32>
   172b8:	4c0a      	ldr	r4, [pc, #40]	; (172e4 <hci_vendor_event+0x38>)
   172ba:	8981      	ldrh	r1, [r0, #12]
   172bc:	6880      	ldr	r0, [r0, #8]
   172be:	1b1c      	subs	r4, r3, r4
   172c0:	f7ff fdde 	bl	16e80 <bt_hex_real>
{
	if (IS_ENABLED(CONFIG_LOG_MODE_MINIMAL) || IS_ENABLED(CONFIG_LOG2)) {
		return (char *)str;
	}

	return z_log_strdup(str);
   172c4:	f7fa fa34 	bl	11730 <z_log_strdup>
   172c8:	08a4      	lsrs	r4, r4, #2
   172ca:	01a4      	lsls	r4, r4, #6
   172cc:	f044 0402 	orr.w	r4, r4, #2
   172d0:	4601      	mov	r1, r0
   172d2:	4622      	mov	r2, r4
   172d4:	4804      	ldr	r0, [pc, #16]	; (172e8 <hci_vendor_event+0x3c>)
			bt_hex(buf->data, buf->len));
	}
}
   172d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
   172da:	f012 b80d 	b.w	292f8 <log_1>
}
   172de:	bd10      	pop	{r4, pc}
   172e0:	20000750 	.word	0x20000750
   172e4:	20000740 	.word	0x20000740
   172e8:	00030f63 	.word	0x00030f63

000172ec <handle_event>:
{
   172ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   172ee:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   172f2:	4605      	mov	r5, r0
   172f4:	4608      	mov	r0, r1
		if (handler->event != event) {
   172f6:	7811      	ldrb	r1, [r2, #0]
   172f8:	42a9      	cmp	r1, r5
   172fa:	d01e      	beq.n	1733a <handle_event+0x4e>
	for (i = 0; i < num_handlers; i++) {
   172fc:	3208      	adds	r2, #8
   172fe:	4293      	cmp	r3, r2
   17300:	d1f9      	bne.n	172f6 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
   17302:	4b1b      	ldr	r3, [pc, #108]	; (17370 <handle_event+0x84>)
   17304:	681a      	ldr	r2, [r3, #0]
   17306:	f012 0f06 	tst.w	r2, #6
   1730a:	d014      	beq.n	17336 <handle_event+0x4a>
   1730c:	8986      	ldrh	r6, [r0, #12]
   1730e:	4c19      	ldr	r4, [pc, #100]	; (17374 <handle_event+0x88>)
   17310:	6880      	ldr	r0, [r0, #8]
   17312:	4631      	mov	r1, r6
   17314:	1b1c      	subs	r4, r3, r4
   17316:	f7ff fdb3 	bl	16e80 <bt_hex_real>
   1731a:	f7fa fa09 	bl	11730 <z_log_strdup>
   1731e:	08a4      	lsrs	r4, r4, #2
   17320:	01a4      	lsls	r4, r4, #6
   17322:	f044 0402 	orr.w	r4, r4, #2
   17326:	4603      	mov	r3, r0
   17328:	f8ad 4000 	strh.w	r4, [sp]
   1732c:	4812      	ldr	r0, [pc, #72]	; (17378 <handle_event+0x8c>)
   1732e:	4632      	mov	r2, r6
   17330:	4629      	mov	r1, r5
   17332:	f012 f80e 	bl	29352 <log_3>
}
   17336:	b002      	add	sp, #8
   17338:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
   1733a:	8981      	ldrh	r1, [r0, #12]
   1733c:	7853      	ldrb	r3, [r2, #1]
   1733e:	428b      	cmp	r3, r1
   17340:	d910      	bls.n	17364 <handle_event+0x78>
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17342:	4b0b      	ldr	r3, [pc, #44]	; (17370 <handle_event+0x84>)
   17344:	681a      	ldr	r2, [r3, #0]
   17346:	0752      	lsls	r2, r2, #29
   17348:	d0f5      	beq.n	17336 <handle_event+0x4a>
   1734a:	4a0a      	ldr	r2, [pc, #40]	; (17374 <handle_event+0x88>)
   1734c:	480b      	ldr	r0, [pc, #44]	; (1737c <handle_event+0x90>)
   1734e:	1a9b      	subs	r3, r3, r2
   17350:	089b      	lsrs	r3, r3, #2
   17352:	019b      	lsls	r3, r3, #6
   17354:	f043 0301 	orr.w	r3, r3, #1
   17358:	462a      	mov	r2, r5
}
   1735a:	b002      	add	sp, #8
   1735c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
   17360:	f011 bfde 	b.w	29320 <log_2>
		handler->handler(buf);
   17364:	6853      	ldr	r3, [r2, #4]
}
   17366:	b002      	add	sp, #8
   17368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
   1736c:	4718      	bx	r3
   1736e:	bf00      	nop
   17370:	20000750 	.word	0x20000750
   17374:	20000740 	.word	0x20000740
   17378:	00030fa9 	.word	0x00030fa9
   1737c:	00030f87 	.word	0x00030f87

00017380 <hci_rx_thread>:
	}
}

#if !defined(CONFIG_BT_RECV_IS_RX_THREAD)
static void hci_rx_thread(void)
{
   17380:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17384:	4e4c      	ldr	r6, [pc, #304]	; (174b8 <hci_rx_thread+0x138>)
   17386:	4d4d      	ldr	r5, [pc, #308]	; (174bc <hci_rx_thread+0x13c>)

	BT_DBG("started");

	while (1) {
		BT_DBG("calling fifo_get_wait");
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   17388:	f8df a14c 	ldr.w	sl, [pc, #332]	; 174d8 <hci_rx_thread+0x158>
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   1738c:	f8df b14c 	ldr.w	fp, [pc, #332]	; 174dc <hci_rx_thread+0x15c>
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17390:	f8df 814c 	ldr.w	r8, [pc, #332]	; 174e0 <hci_rx_thread+0x160>
   17394:	1b75      	subs	r5, r6, r5
   17396:	08ad      	lsrs	r5, r5, #2
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   17398:	f04f 32ff 	mov.w	r2, #4294967295
   1739c:	f04f 33ff 	mov.w	r3, #4294967295
   173a0:	4650      	mov	r0, sl
   173a2:	f008 fd99 	bl	1fed8 <net_buf_get>
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   173a6:	7d01      	ldrb	r1, [r0, #20]

		BT_DBG("buf %p type %u len %u", buf, bt_buf_get_type(buf),
		       buf->len);

		switch (bt_buf_get_type(buf)) {
   173a8:	2901      	cmp	r1, #1
		buf = net_buf_get(&bt_dev.rx_queue, K_FOREVER);
   173aa:	4604      	mov	r4, r0
		switch (bt_buf_get_type(buf)) {
   173ac:	d04c      	beq.n	17448 <hci_rx_thread+0xc8>
   173ae:	2903      	cmp	r1, #3
   173b0:	d179      	bne.n	174a6 <hci_rx_thread+0x126>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   173b2:	8983      	ldrh	r3, [r0, #12]
   173b4:	2b03      	cmp	r3, #3
   173b6:	d80c      	bhi.n	173d2 <hci_rx_thread+0x52>
   173b8:	4941      	ldr	r1, [pc, #260]	; (174c0 <hci_rx_thread+0x140>)
   173ba:	4842      	ldr	r0, [pc, #264]	; (174c4 <hci_rx_thread+0x144>)
   173bc:	f240 13b5 	movw	r3, #437	; 0x1b5
   173c0:	4642      	mov	r2, r8
   173c2:	f011 fbea 	bl	28b9a <printk>
   173c6:	4040      	eors	r0, r0
   173c8:	f380 8811 	msr	BASEPRI, r0
   173cc:	f04f 0003 	mov.w	r0, #3
   173d0:	df02      	svc	2
   173d2:	2104      	movs	r1, #4
   173d4:	f104 0008 	add.w	r0, r4, #8
   173d8:	f008 ff1e 	bl	20218 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   173dc:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
   173de:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
   173e0:	f8b0 9000 	ldrh.w	r9, [r0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   173e4:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
   173e6:	f3c9 000b 	ubfx	r0, r9, #0, #12
	if (buf->len != len) {
   173ea:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
   173ec:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
   173ee:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
   173f0:	d00c      	beq.n	1740c <hci_rx_thread+0x8c>
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
   173f2:	6833      	ldr	r3, [r6, #0]
   173f4:	0758      	lsls	r0, r3, #29
   173f6:	d005      	beq.n	17404 <hci_rx_thread+0x84>
   173f8:	01ab      	lsls	r3, r5, #6
   173fa:	4833      	ldr	r0, [pc, #204]	; (174c8 <hci_rx_thread+0x148>)
   173fc:	f043 0301 	orr.w	r3, r3, #1
   17400:	f011 ff8e 	bl	29320 <log_2>
		case BT_BUF_EVT:
			hci_event(buf);
			break;
		default:
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
			net_buf_unref(buf);
   17404:	4620      	mov	r0, r4
   17406:	f008 fdf9 	bl	1fffc <net_buf_unref>
			break;
   1740a:	e01a      	b.n	17442 <hci_rx_thread+0xc2>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
   1740c:	f002 fbfc 	bl	19c08 <bt_conn_lookup_handle>
	if (!conn) {
   17410:	4607      	mov	r7, r0
   17412:	b950      	cbnz	r0, 1742a <hci_rx_thread+0xaa>
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
   17414:	6833      	ldr	r3, [r6, #0]
   17416:	0759      	lsls	r1, r3, #29
   17418:	d0f4      	beq.n	17404 <hci_rx_thread+0x84>
   1741a:	01aa      	lsls	r2, r5, #6
   1741c:	8ae1      	ldrh	r1, [r4, #22]
   1741e:	482b      	ldr	r0, [pc, #172]	; (174cc <hci_rx_thread+0x14c>)
   17420:	f042 0201 	orr.w	r2, r2, #1
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   17424:	f011 ff68 	bl	292f8 <log_1>
   17428:	e7ec      	b.n	17404 <hci_rx_thread+0x84>
	acl(buf)->index = bt_conn_index(conn);
   1742a:	f002 fd0d 	bl	19e48 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
   1742e:	ea4f 3219 	mov.w	r2, r9, lsr #12
	acl(buf)->index = bt_conn_index(conn);
   17432:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
   17434:	4621      	mov	r1, r4
   17436:	4638      	mov	r0, r7
   17438:	f002 fa6e 	bl	19918 <bt_conn_recv>
	bt_conn_unref(conn);
   1743c:	4638      	mov	r0, r7
   1743e:	f002 fbb9 	bl	19bb4 <bt_conn_unref>
	z_impl_k_yield();
   17442:	f00f f9b5 	bl	267b0 <z_impl_k_yield>
	while (1) {
   17446:	e7a7      	b.n	17398 <hci_rx_thread+0x18>
	BT_ASSERT(buf->len >= sizeof(*hdr));
   17448:	8983      	ldrh	r3, [r0, #12]
   1744a:	2b01      	cmp	r3, #1
   1744c:	d80c      	bhi.n	17468 <hci_rx_thread+0xe8>
   1744e:	491c      	ldr	r1, [pc, #112]	; (174c0 <hci_rx_thread+0x140>)
   17450:	481c      	ldr	r0, [pc, #112]	; (174c4 <hci_rx_thread+0x144>)
   17452:	f640 1317 	movw	r3, #2327	; 0x917
   17456:	4642      	mov	r2, r8
   17458:	f011 fb9f 	bl	28b9a <printk>
   1745c:	4040      	eors	r0, r0
   1745e:	f380 8811 	msr	BASEPRI, r0
   17462:	f04f 0003 	mov.w	r0, #3
   17466:	df02      	svc	2
   17468:	2102      	movs	r1, #2
   1746a:	f104 0008 	add.w	r0, r4, #8
   1746e:	f008 fed3 	bl	20218 <net_buf_simple_pull_mem>
   17472:	4607      	mov	r7, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
   17474:	7800      	ldrb	r0, [r0, #0]
   17476:	f013 fa4c 	bl	2a912 <bt_hci_evt_get_flags>
   1747a:	0782      	lsls	r2, r0, #30
   1747c:	d40c      	bmi.n	17498 <hci_rx_thread+0x118>
   1747e:	4914      	ldr	r1, [pc, #80]	; (174d0 <hci_rx_thread+0x150>)
   17480:	4810      	ldr	r0, [pc, #64]	; (174c4 <hci_rx_thread+0x144>)
   17482:	f640 131b 	movw	r3, #2331	; 0x91b
   17486:	4642      	mov	r2, r8
   17488:	f011 fb87 	bl	28b9a <printk>
   1748c:	4040      	eors	r0, r0
   1748e:	f380 8811 	msr	BASEPRI, r0
   17492:	f04f 0003 	mov.w	r0, #3
   17496:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
   17498:	7838      	ldrb	r0, [r7, #0]
   1749a:	2304      	movs	r3, #4
   1749c:	465a      	mov	r2, fp
   1749e:	4621      	mov	r1, r4
   174a0:	f7ff ff24 	bl	172ec <handle_event>
	net_buf_unref(buf);
   174a4:	e7ae      	b.n	17404 <hci_rx_thread+0x84>
			BT_ERR("Unknown buf type %u", bt_buf_get_type(buf));
   174a6:	6833      	ldr	r3, [r6, #0]
   174a8:	075b      	lsls	r3, r3, #29
   174aa:	d0ab      	beq.n	17404 <hci_rx_thread+0x84>
   174ac:	01aa      	lsls	r2, r5, #6
   174ae:	4809      	ldr	r0, [pc, #36]	; (174d4 <hci_rx_thread+0x154>)
   174b0:	f042 0201 	orr.w	r2, r2, #1
   174b4:	e7b6      	b.n	17424 <hci_rx_thread+0xa4>
   174b6:	bf00      	nop
   174b8:	20000750 	.word	0x20000750
   174bc:	20000740 	.word	0x20000740
   174c0:	00030fff 	.word	0x00030fff
   174c4:	0002e93e 	.word	0x0002e93e
   174c8:	00031018 	.word	0x00031018
   174cc:	0003103c 	.word	0x0003103c
   174d0:	0003105e 	.word	0x0003105e
   174d4:	0003108c 	.word	0x0003108c
   174d8:	200003dc 	.word	0x200003dc
   174dc:	0002dd0c 	.word	0x0002dd0c
   174e0:	00030fcb 	.word	0x00030fcb

000174e4 <hci_le_meta_event>:
{
   174e4:	b510      	push	{r4, lr}
   174e6:	2101      	movs	r1, #1
   174e8:	4604      	mov	r4, r0
   174ea:	3008      	adds	r0, #8
   174ec:	f008 fe94 	bl	20218 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   174f0:	4621      	mov	r1, r4
   174f2:	4a03      	ldr	r2, [pc, #12]	; (17500 <hci_le_meta_event+0x1c>)
   174f4:	7800      	ldrb	r0, [r0, #0]
}
   174f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
   174fa:	2308      	movs	r3, #8
   174fc:	f7ff bef6 	b.w	172ec <handle_event>
   17500:	0002dcbc 	.word	0x0002dcbc

00017504 <hci_num_completed_packets>:
{
   17504:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17508:	4e3e      	ldr	r6, [pc, #248]	; (17604 <hci_num_completed_packets+0x100>)
   1750a:	4c3f      	ldr	r4, [pc, #252]	; (17608 <hci_num_completed_packets+0x104>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
   1750c:	f8d0 8008 	ldr.w	r8, [r0, #8]
				BT_ERR("packets count mismatch");
   17510:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 17610 <hci_num_completed_packets+0x10c>
   17514:	1b34      	subs	r4, r6, r4
   17516:	08a3      	lsrs	r3, r4, #2
	for (i = 0; i < evt->num_handles; i++) {
   17518:	2500      	movs	r5, #0
   1751a:	9301      	str	r3, [sp, #4]
			tx->pending_no_cb = 0U;
   1751c:	46a9      	mov	r9, r5
	for (i = 0; i < evt->num_handles; i++) {
   1751e:	f898 3000 	ldrb.w	r3, [r8]
   17522:	429d      	cmp	r5, r3
   17524:	db02      	blt.n	1752c <hci_num_completed_packets+0x28>
}
   17526:	b003      	add	sp, #12
   17528:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
   1752c:	eb08 0385 	add.w	r3, r8, r5, lsl #2
   17530:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
   17534:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
   17538:	4658      	mov	r0, fp
   1753a:	f002 fb65 	bl	19c08 <bt_conn_lookup_handle>
		if (!conn) {
   1753e:	4604      	mov	r4, r0
   17540:	b1d8      	cbz	r0, 1757a <hci_num_completed_packets+0x76>
			k_work_submit(&conn->tx_complete_work);
   17542:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
   17546:	2f00      	cmp	r7, #0
   17548:	d03b      	beq.n	175c2 <hci_num_completed_packets+0xbe>
	__asm__ volatile(
   1754a:	f04f 0240 	mov.w	r2, #64	; 0x40
   1754e:	f3ef 8111 	mrs	r1, BASEPRI
   17552:	f382 8812 	msr	BASEPRI_MAX, r2
   17556:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
   1755a:	69e2      	ldr	r2, [r4, #28]
   1755c:	b1d2      	cbz	r2, 17594 <hci_num_completed_packets+0x90>
				conn->pending_no_cb--;
   1755e:	3a01      	subs	r2, #1
   17560:	61e2      	str	r2, [r4, #28]
	__asm__ volatile(
   17562:	f381 8811 	msr	BASEPRI, r1
   17566:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
   1756a:	4620      	mov	r0, r4
   1756c:	f002 f954 	bl	19818 <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
   17570:	3f01      	subs	r7, #1
   17572:	f00d fbb7 	bl	24ce4 <z_impl_k_sem_give>
   17576:	b2bf      	uxth	r7, r7
   17578:	e7e5      	b.n	17546 <hci_num_completed_packets+0x42>
			BT_ERR("No connection for handle %u", handle);
   1757a:	6833      	ldr	r3, [r6, #0]
   1757c:	075a      	lsls	r2, r3, #29
   1757e:	d007      	beq.n	17590 <hci_num_completed_packets+0x8c>
   17580:	9b01      	ldr	r3, [sp, #4]
   17582:	4822      	ldr	r0, [pc, #136]	; (1760c <hci_num_completed_packets+0x108>)
   17584:	019a      	lsls	r2, r3, #6
   17586:	f042 0201 	orr.w	r2, r2, #1
   1758a:	4659      	mov	r1, fp
   1758c:	f011 feb4 	bl	292f8 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
   17590:	3501      	adds	r5, #1
   17592:	e7c4      	b.n	1751e <hci_num_completed_packets+0x1a>
Z_GENLIST_IS_EMPTY(slist)
   17594:	6962      	ldr	r2, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
   17596:	b12a      	cbz	r2, 175a4 <hci_num_completed_packets+0xa0>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   17598:	69a0      	ldr	r0, [r4, #24]
   1759a:	6813      	ldr	r3, [r2, #0]
	list->head = node;
   1759c:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1759e:	4282      	cmp	r2, r0
	list->tail = node;
   175a0:	bf08      	it	eq
   175a2:	61a3      	streq	r3, [r4, #24]
   175a4:	f381 8811 	msr	BASEPRI, r1
   175a8:	f3bf 8f6f 	isb	sy
			if (!node) {
   175ac:	b96a      	cbnz	r2, 175ca <hci_num_completed_packets+0xc6>
				BT_ERR("packets count mismatch");
   175ae:	6832      	ldr	r2, [r6, #0]
   175b0:	0753      	lsls	r3, r2, #29
   175b2:	d006      	beq.n	175c2 <hci_num_completed_packets+0xbe>
   175b4:	9b01      	ldr	r3, [sp, #4]
   175b6:	0199      	lsls	r1, r3, #6
   175b8:	f041 0101 	orr.w	r1, r1, #1
   175bc:	4650      	mov	r0, sl
   175be:	f011 fe8e 	bl	292de <log_0>
		bt_conn_unref(conn);
   175c2:	4620      	mov	r0, r4
   175c4:	f002 faf6 	bl	19bb4 <bt_conn_unref>
   175c8:	e7e2      	b.n	17590 <hci_num_completed_packets+0x8c>
	__asm__ volatile(
   175ca:	f04f 0140 	mov.w	r1, #64	; 0x40
   175ce:	f3ef 8011 	mrs	r0, BASEPRI
   175d2:	f381 8812 	msr	BASEPRI_MAX, r1
   175d6:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
   175da:	68d1      	ldr	r1, [r2, #12]
   175dc:	61e1      	str	r1, [r4, #28]
	parent->next = child;
   175de:	f8c2 9000 	str.w	r9, [r2]
Z_GENLIST_APPEND(slist, snode)
   175e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
   175e4:	f8c2 900c 	str.w	r9, [r2, #12]
   175e8:	b949      	cbnz	r1, 175fe <hci_num_completed_packets+0xfa>
	list->head = node;
   175ea:	e9c4 2208 	strd	r2, r2, [r4, #32]
	__asm__ volatile(
   175ee:	f380 8811 	msr	BASEPRI, r0
   175f2:	f3bf 8f6f 	isb	sy
			k_work_submit(&conn->tx_complete_work);
   175f6:	4658      	mov	r0, fp
   175f8:	f00d fed4 	bl	253a4 <k_work_submit>
   175fc:	e7b5      	b.n	1756a <hci_num_completed_packets+0x66>
	parent->next = child;
   175fe:	600a      	str	r2, [r1, #0]
	list->tail = node;
   17600:	6262      	str	r2, [r4, #36]	; 0x24
}
   17602:	e7f4      	b.n	175ee <hci_num_completed_packets+0xea>
   17604:	20000750 	.word	0x20000750
   17608:	20000740 	.word	0x20000740
   1760c:	000310a0 	.word	0x000310a0
   17610:	000310bc 	.word	0x000310bc

00017614 <hci_disconn_complete>:
{
   17614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   17616:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   17618:	7835      	ldrb	r5, [r6, #0]
   1761a:	bb95      	cbnz	r5, 17682 <hci_disconn_complete+0x6e>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1761c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
   17620:	4638      	mov	r0, r7
   17622:	f002 faf1 	bl	19c08 <bt_conn_lookup_handle>
	if (!conn) {
   17626:	4604      	mov	r4, r0
   17628:	b978      	cbnz	r0, 1764a <hci_disconn_complete+0x36>
		BT_ERR("Unable to look up conn with handle %u", handle);
   1762a:	4a16      	ldr	r2, [pc, #88]	; (17684 <hci_disconn_complete+0x70>)
   1762c:	6813      	ldr	r3, [r2, #0]
   1762e:	0759      	lsls	r1, r3, #29
   17630:	d027      	beq.n	17682 <hci_disconn_complete+0x6e>
   17632:	4b15      	ldr	r3, [pc, #84]	; (17688 <hci_disconn_complete+0x74>)
   17634:	4815      	ldr	r0, [pc, #84]	; (1768c <hci_disconn_complete+0x78>)
   17636:	1ad2      	subs	r2, r2, r3
   17638:	0892      	lsrs	r2, r2, #2
   1763a:	0192      	lsls	r2, r2, #6
   1763c:	4639      	mov	r1, r7
   1763e:	f042 0201 	orr.w	r2, r2, #1
}
   17642:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
   17646:	f011 be57 	b.w	292f8 <log_1>
	conn->err = evt->reason;
   1764a:	78f3      	ldrb	r3, [r6, #3]
   1764c:	7243      	strb	r3, [r0, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1764e:	4629      	mov	r1, r5
   17650:	f002 fae6 	bl	19c20 <bt_conn_set_state>
	if (conn->type != BT_CONN_TYPE_LE) {
   17654:	78a3      	ldrb	r3, [r4, #2]
   17656:	2b01      	cmp	r3, #1
   17658:	d004      	beq.n	17664 <hci_disconn_complete+0x50>
	bt_conn_unref(conn);
   1765a:	4620      	mov	r0, r4
}
   1765c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
   17660:	f002 baa8 	b.w	19bb4 <bt_conn_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17664:	f3bf 8f5b 	dmb	ish
   17668:	6863      	ldr	r3, [r4, #4]
   1766a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1766e:	07db      	lsls	r3, r3, #31
   17670:	d5f3      	bpl.n	1765a <hci_disconn_complete+0x46>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   17672:	4620      	mov	r0, r4
   17674:	2102      	movs	r1, #2
   17676:	f002 fad3 	bl	19c20 <bt_conn_set_state>
		bt_le_scan_update(false);
   1767a:	4628      	mov	r0, r5
   1767c:	f001 fde6 	bl	1924c <bt_le_scan_update>
   17680:	e7eb      	b.n	1765a <hci_disconn_complete+0x46>
}
   17682:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   17684:	20000750 	.word	0x20000750
   17688:	20000740 	.word	0x20000740
   1768c:	000310d3 	.word	0x000310d3

00017690 <le_conn_update_complete>:
{
   17690:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   17692:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   17694:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   17698:	4630      	mov	r0, r6
   1769a:	f002 fab5 	bl	19c08 <bt_conn_lookup_handle>
	if (!conn) {
   1769e:	4604      	mov	r4, r0
   176a0:	b978      	cbnz	r0, 176c2 <le_conn_update_complete+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   176a2:	4a24      	ldr	r2, [pc, #144]	; (17734 <le_conn_update_complete+0xa4>)
   176a4:	6813      	ldr	r3, [r2, #0]
   176a6:	0759      	lsls	r1, r3, #29
   176a8:	d009      	beq.n	176be <le_conn_update_complete+0x2e>
   176aa:	4b23      	ldr	r3, [pc, #140]	; (17738 <le_conn_update_complete+0xa8>)
   176ac:	4823      	ldr	r0, [pc, #140]	; (1773c <le_conn_update_complete+0xac>)
   176ae:	1ad2      	subs	r2, r2, r3
   176b0:	0892      	lsrs	r2, r2, #2
   176b2:	0192      	lsls	r2, r2, #6
   176b4:	f042 0201 	orr.w	r2, r2, #1
   176b8:	4631      	mov	r1, r6
   176ba:	f011 fe1d 	bl	292f8 <log_1>
}
   176be:	b002      	add	sp, #8
   176c0:	bd70      	pop	{r4, r5, r6, pc}
	if (!evt->status) {
   176c2:	782b      	ldrb	r3, [r5, #0]
   176c4:	b9bb      	cbnz	r3, 176f6 <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   176c6:	792a      	ldrb	r2, [r5, #4]
   176c8:	78eb      	ldrb	r3, [r5, #3]
   176ca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   176ce:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   176d2:	79aa      	ldrb	r2, [r5, #6]
   176d4:	796b      	ldrb	r3, [r5, #5]
   176d6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   176da:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   176de:	79eb      	ldrb	r3, [r5, #7]
   176e0:	7a2a      	ldrb	r2, [r5, #8]
   176e2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   176e6:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
		notify_le_param_updated(conn);
   176ea:	f002 fc15 	bl	19f18 <notify_le_param_updated>
	bt_conn_unref(conn);
   176ee:	4620      	mov	r0, r4
   176f0:	f002 fa60 	bl	19bb4 <bt_conn_unref>
   176f4:	e7e3      	b.n	176be <le_conn_update_complete+0x2e>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   176f6:	2b1a      	cmp	r3, #26
   176f8:	d1f9      	bne.n	176ee <le_conn_update_complete+0x5e>
   176fa:	78c3      	ldrb	r3, [r0, #3]
   176fc:	2b01      	cmp	r3, #1
   176fe:	d1f6      	bne.n	176ee <le_conn_update_complete+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17700:	f3bf 8f5b 	dmb	ish
   17704:	1d03      	adds	r3, r0, #4
   17706:	e853 2f00 	ldrex	r2, [r3]
   1770a:	f442 6180 	orr.w	r1, r2, #1024	; 0x400
   1770e:	e843 1500 	strex	r5, r1, [r3]
   17712:	2d00      	cmp	r5, #0
   17714:	d1f7      	bne.n	17706 <le_conn_update_complete+0x76>
   17716:	f3bf 8f5b 	dmb	ish
		   conn->role == BT_HCI_ROLE_PERIPHERAL &&
   1771a:	0553      	lsls	r3, r2, #21
   1771c:	d4e7      	bmi.n	176ee <le_conn_update_complete+0x5e>
		param.interval_min = conn->le.interval_min;
   1771e:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   17722:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   17724:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   17726:	f8d4 30b0 	ldr.w	r3, [r4, #176]	; 0xb0
   1772a:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1772c:	f003 f9e4 	bl	1aaf8 <bt_l2cap_update_conn_param>
   17730:	e7dd      	b.n	176ee <le_conn_update_complete+0x5e>
   17732:	bf00      	nop
   17734:	20000750 	.word	0x20000750
   17738:	20000740 	.word	0x20000740
   1773c:	00030f1d 	.word	0x00030f1d

00017740 <hci_cmd_done>:
{
   17740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   17744:	4606      	mov	r6, r0
   17746:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   17748:	7990      	ldrb	r0, [r2, #6]
   1774a:	f8df 8144 	ldr.w	r8, [pc, #324]	; 17890 <hci_cmd_done+0x150>
{
   1774e:	460f      	mov	r7, r1
   17750:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
   17752:	f008 fa51 	bl	1fbf8 <net_buf_pool_get>
   17756:	4580      	cmp	r8, r0
   17758:	d01a      	beq.n	17790 <hci_cmd_done+0x50>
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
   1775a:	4b48      	ldr	r3, [pc, #288]	; (1787c <hci_cmd_done+0x13c>)
   1775c:	681a      	ldr	r2, [r3, #0]
   1775e:	f012 0f06 	tst.w	r2, #6
   17762:	d012      	beq.n	1778a <hci_cmd_done+0x4a>
   17764:	4d46      	ldr	r5, [pc, #280]	; (17880 <hci_cmd_done+0x140>)
   17766:	79a0      	ldrb	r0, [r4, #6]
   17768:	9600      	str	r6, [sp, #0]
   1776a:	1b5d      	subs	r5, r3, r5
   1776c:	08ad      	lsrs	r5, r5, #2
   1776e:	9001      	str	r0, [sp, #4]
   17770:	f008 fa42 	bl	1fbf8 <net_buf_pool_get>
   17774:	01ad      	lsls	r5, r5, #6
   17776:	f045 0502 	orr.w	r5, r5, #2
   1777a:	e9cd 0802 	strd	r0, r8, [sp, #8]
   1777e:	462b      	mov	r3, r5
   17780:	4840      	ldr	r0, [pc, #256]	; (17884 <hci_cmd_done+0x144>)
   17782:	2204      	movs	r2, #4
   17784:	4669      	mov	r1, sp
   17786:	f011 fe00 	bl	2938a <log_n>
}
   1778a:	b005      	add	sp, #20
   1778c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
   17790:	4620      	mov	r0, r4
   17792:	f008 fa39 	bl	1fc08 <net_buf_id>
   17796:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 17894 <hci_cmd_done+0x154>
   1779a:	f04f 090c 	mov.w	r9, #12
   1779e:	fb09 8000 	mla	r0, r9, r0, r8
   177a2:	4645      	mov	r5, r8
   177a4:	8843      	ldrh	r3, [r0, #2]
   177a6:	42b3      	cmp	r3, r6
   177a8:	d016      	beq.n	177d8 <hci_cmd_done+0x98>
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
   177aa:	4b34      	ldr	r3, [pc, #208]	; (1787c <hci_cmd_done+0x13c>)
   177ac:	681a      	ldr	r2, [r3, #0]
   177ae:	f012 0f06 	tst.w	r2, #6
   177b2:	d0ea      	beq.n	1778a <hci_cmd_done+0x4a>
   177b4:	4d32      	ldr	r5, [pc, #200]	; (17880 <hci_cmd_done+0x140>)
   177b6:	4620      	mov	r0, r4
   177b8:	1b5d      	subs	r5, r3, r5
   177ba:	f008 fa25 	bl	1fc08 <net_buf_id>
   177be:	08ad      	lsrs	r5, r5, #2
   177c0:	fb09 8000 	mla	r0, r9, r0, r8
   177c4:	01ad      	lsls	r5, r5, #6
   177c6:	f045 0502 	orr.w	r5, r5, #2
   177ca:	8842      	ldrh	r2, [r0, #2]
   177cc:	482e      	ldr	r0, [pc, #184]	; (17888 <hci_cmd_done+0x148>)
   177ce:	462b      	mov	r3, r5
   177d0:	4631      	mov	r1, r6
   177d2:	f011 fda5 	bl	29320 <log_2>
   177d6:	e7d8      	b.n	1778a <hci_cmd_done+0x4a>
	if (bt_dev.sent_cmd) {
   177d8:	4e2c      	ldr	r6, [pc, #176]	; (1788c <hci_cmd_done+0x14c>)
   177da:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   177de:	b120      	cbz	r0, 177ea <hci_cmd_done+0xaa>
		net_buf_unref(bt_dev.sent_cmd);
   177e0:	f008 fc0c 	bl	1fffc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   177e4:	2300      	movs	r3, #0
   177e6:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	if (cmd(buf)->state && !status) {
   177ea:	4620      	mov	r0, r4
   177ec:	f008 fa0c 	bl	1fc08 <net_buf_id>
   177f0:	260c      	movs	r6, #12
   177f2:	fb06 5000 	mla	r0, r6, r0, r5
   177f6:	6843      	ldr	r3, [r0, #4]
   177f8:	b1e3      	cbz	r3, 17834 <hci_cmd_done+0xf4>
   177fa:	b9df      	cbnz	r7, 17834 <hci_cmd_done+0xf4>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
   177fc:	4620      	mov	r0, r4
   177fe:	f008 fa03 	bl	1fc08 <net_buf_id>
   17802:	fb06 5000 	mla	r0, r6, r0, r5
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
   17806:	2201      	movs	r2, #1
   17808:	6840      	ldr	r0, [r0, #4]
   1780a:	e9d0 3100 	ldrd	r3, r1, [r0]

	if (val) {
   1780e:	7a00      	ldrb	r0, [r0, #8]
	atomic_val_t mask = ATOMIC_MASK(bit);
   17810:	f001 061f 	and.w	r6, r1, #31
   17814:	40b2      	lsls	r2, r6
	if (val) {
   17816:	0949      	lsrs	r1, r1, #5
   17818:	b318      	cbz	r0, 17862 <hci_cmd_done+0x122>
   1781a:	f3bf 8f5b 	dmb	ish
   1781e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   17822:	e853 1f00 	ldrex	r1, [r3]
   17826:	4311      	orrs	r1, r2
   17828:	e843 1000 	strex	r0, r1, [r3]
   1782c:	2800      	cmp	r0, #0
   1782e:	d1f8      	bne.n	17822 <hci_cmd_done+0xe2>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17830:	f3bf 8f5b 	dmb	ish
	if (cmd(buf)->sync) {
   17834:	4620      	mov	r0, r4
   17836:	f008 f9e7 	bl	1fc08 <net_buf_id>
   1783a:	260c      	movs	r6, #12
   1783c:	fb06 5000 	mla	r0, r6, r0, r5
   17840:	6883      	ldr	r3, [r0, #8]
   17842:	2b00      	cmp	r3, #0
   17844:	d0a1      	beq.n	1778a <hci_cmd_done+0x4a>
		cmd(buf)->status = status;
   17846:	4620      	mov	r0, r4
   17848:	f008 f9de 	bl	1fc08 <net_buf_id>
   1784c:	4370      	muls	r0, r6
   1784e:	542f      	strb	r7, [r5, r0]
		k_sem_give(cmd(buf)->sync);
   17850:	4620      	mov	r0, r4
   17852:	f008 f9d9 	bl	1fc08 <net_buf_id>
   17856:	fb06 5500 	mla	r5, r6, r0, r5
   1785a:	68a8      	ldr	r0, [r5, #8]
   1785c:	f00d fa42 	bl	24ce4 <z_impl_k_sem_give>
}
   17860:	e793      	b.n	1778a <hci_cmd_done+0x4a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   17862:	43d2      	mvns	r2, r2
   17864:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   17868:	f3bf 8f5b 	dmb	ish
   1786c:	e853 1f00 	ldrex	r1, [r3]
   17870:	4011      	ands	r1, r2
   17872:	e843 1000 	strex	r0, r1, [r3]
   17876:	2800      	cmp	r0, #0
   17878:	d0da      	beq.n	17830 <hci_cmd_done+0xf0>
   1787a:	e7f7      	b.n	1786c <hci_cmd_done+0x12c>
   1787c:	20000750 	.word	0x20000750
   17880:	20000740 	.word	0x20000740
   17884:	000310f9 	.word	0x000310f9
   17888:	0003112e 	.word	0x0003112e
   1788c:	200002a8 	.word	0x200002a8
   17890:	2000098c 	.word	0x2000098c
   17894:	20002718 	.word	0x20002718

00017898 <hci_cmd_status>:
{
   17898:	b538      	push	{r3, r4, r5, lr}
   1789a:	2104      	movs	r1, #4
   1789c:	4604      	mov	r4, r0
   1789e:	3008      	adds	r0, #8
   178a0:	f008 fcba 	bl	20218 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
   178a4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
   178a6:	7801      	ldrb	r1, [r0, #0]
   178a8:	8840      	ldrh	r0, [r0, #2]
   178aa:	4622      	mov	r2, r4
   178ac:	f7ff ff48 	bl	17740 <hci_cmd_done>
	if (ncmd) {
   178b0:	b125      	cbz	r5, 178bc <hci_cmd_status+0x24>
	z_impl_k_sem_give(sem);
   178b2:	4803      	ldr	r0, [pc, #12]	; (178c0 <hci_cmd_status+0x28>)
}
   178b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   178b8:	f00d ba14 	b.w	24ce4 <z_impl_k_sem_give>
   178bc:	bd38      	pop	{r3, r4, r5, pc}
   178be:	bf00      	nop
   178c0:	200003c0 	.word	0x200003c0

000178c4 <hci_cmd_complete>:
{
   178c4:	b538      	push	{r3, r4, r5, lr}
   178c6:	2103      	movs	r1, #3
   178c8:	4604      	mov	r4, r0
   178ca:	3008      	adds	r0, #8
   178cc:	f008 fca4 	bl	20218 <net_buf_simple_pull_mem>
	status = buf->data[0];
   178d0:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
   178d2:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
   178d4:	7819      	ldrb	r1, [r3, #0]
   178d6:	f8b0 0001 	ldrh.w	r0, [r0, #1]
   178da:	4622      	mov	r2, r4
   178dc:	f7ff ff30 	bl	17740 <hci_cmd_done>
	if (ncmd) {
   178e0:	b125      	cbz	r5, 178ec <hci_cmd_complete+0x28>
   178e2:	4803      	ldr	r0, [pc, #12]	; (178f0 <hci_cmd_complete+0x2c>)
}
   178e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   178e8:	f00d b9fc 	b.w	24ce4 <z_impl_k_sem_give>
   178ec:	bd38      	pop	{r3, r4, r5, pc}
   178ee:	bf00      	nop
   178f0:	200003c0 	.word	0x200003c0

000178f4 <bt_hci_cmd_state_set_init>:
{
   178f4:	b510      	push	{r4, lr}
	state->bit = bit;
   178f6:	e9c1 2300 	strd	r2, r3, [r1]
	state->val = val;
   178fa:	f89d 3008 	ldrb.w	r3, [sp, #8]
   178fe:	720b      	strb	r3, [r1, #8]
{
   17900:	460c      	mov	r4, r1
	cmd(buf)->state = state;
   17902:	f008 f981 	bl	1fc08 <net_buf_id>
   17906:	4b03      	ldr	r3, [pc, #12]	; (17914 <bt_hci_cmd_state_set_init+0x20>)
   17908:	220c      	movs	r2, #12
   1790a:	fb02 3000 	mla	r0, r2, r0, r3
   1790e:	6044      	str	r4, [r0, #4]
}
   17910:	bd10      	pop	{r4, pc}
   17912:	bf00      	nop
   17914:	20002718 	.word	0x20002718

00017918 <bt_hci_cmd_create>:
{
   17918:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return net_buf_alloc_fixed(pool, timeout);
   1791c:	f04f 32ff 	mov.w	r2, #4294967295
   17920:	4605      	mov	r5, r0
   17922:	f04f 33ff 	mov.w	r3, #4294967295
   17926:	481b      	ldr	r0, [pc, #108]	; (17994 <bt_hci_cmd_create+0x7c>)
   17928:	460e      	mov	r6, r1
   1792a:	f014 fb7e 	bl	2c02a <net_buf_alloc_fixed>
	__ASSERT_NO_MSG(buf);
   1792e:	4604      	mov	r4, r0
   17930:	b948      	cbnz	r0, 17946 <bt_hci_cmd_create+0x2e>
   17932:	4919      	ldr	r1, [pc, #100]	; (17998 <bt_hci_cmd_create+0x80>)
   17934:	4819      	ldr	r0, [pc, #100]	; (1799c <bt_hci_cmd_create+0x84>)
   17936:	4a1a      	ldr	r2, [pc, #104]	; (179a0 <bt_hci_cmd_create+0x88>)
   17938:	23e9      	movs	r3, #233	; 0xe9
   1793a:	f011 f92e 	bl	28b9a <printk>
   1793e:	4818      	ldr	r0, [pc, #96]	; (179a0 <bt_hci_cmd_create+0x88>)
   17940:	21e9      	movs	r1, #233	; 0xe9
   17942:	f011 fb6b 	bl	2901c <assert_post_action>
	net_buf_simple_reserve(&buf->b, reserve);
   17946:	f104 0b08 	add.w	fp, r4, #8
   1794a:	2100      	movs	r1, #0
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1794c:	2700      	movs	r7, #0
   1794e:	4658      	mov	r0, fp
   17950:	f008 faf6 	bl	1ff40 <net_buf_simple_reserve>
   17954:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
   17956:	4620      	mov	r0, r4
   17958:	f008 f956 	bl	1fc08 <net_buf_id>
   1795c:	f8df 8044 	ldr.w	r8, [pc, #68]	; 179a4 <bt_hci_cmd_create+0x8c>
   17960:	f04f 0a0c 	mov.w	sl, #12
   17964:	fb0a 8000 	mla	r0, sl, r0, r8
   17968:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
   1796a:	4620      	mov	r0, r4
   1796c:	f008 f94c 	bl	1fc08 <net_buf_id>
   17970:	fb0a 8000 	mla	r0, sl, r0, r8
   17974:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
   17976:	4620      	mov	r0, r4
   17978:	f008 f946 	bl	1fc08 <net_buf_id>
   1797c:	fb0a 8000 	mla	r0, sl, r0, r8
	return net_buf_simple_add(&buf->b, len);
   17980:	2103      	movs	r1, #3
   17982:	6047      	str	r7, [r0, #4]
   17984:	4658      	mov	r0, fp
   17986:	f008 fc69 	bl	2025c <net_buf_simple_add>
	hdr->param_len = param_len;
   1798a:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
   1798c:	8005      	strh	r5, [r0, #0]
}
   1798e:	4620      	mov	r0, r4
   17990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17994:	2000098c 	.word	0x2000098c
   17998:	00030ef1 	.word	0x00030ef1
   1799c:	0002e93e 	.word	0x0002e93e
   179a0:	00030fcb 	.word	0x00030fcb
   179a4:	20002718 	.word	0x20002718

000179a8 <bt_hci_cmd_send_sync>:
{
   179a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   179ac:	4607      	mov	r7, r0
   179ae:	b086      	sub	sp, #24
   179b0:	4615      	mov	r5, r2
	if (!buf) {
   179b2:	460c      	mov	r4, r1
   179b4:	b921      	cbnz	r1, 179c0 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
   179b6:	f7ff ffaf 	bl	17918 <bt_hci_cmd_create>
		if (!buf) {
   179ba:	4604      	mov	r4, r0
   179bc:	2800      	cmp	r0, #0
   179be:	d059      	beq.n	17a74 <bt_hci_cmd_send_sync+0xcc>
	return z_impl_k_sem_init(sem, initial_count, limit);
   179c0:	2201      	movs	r2, #1
   179c2:	2100      	movs	r1, #0
   179c4:	4668      	mov	r0, sp
   179c6:	f014 ffc2 	bl	2c94e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
   179ca:	4620      	mov	r0, r4
   179cc:	f008 f91c 	bl	1fc08 <net_buf_id>
   179d0:	4e2a      	ldr	r6, [pc, #168]	; (17a7c <bt_hci_cmd_send_sync+0xd4>)
   179d2:	230c      	movs	r3, #12
   179d4:	fb03 6000 	mla	r0, r3, r0, r6
   179d8:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_put(&bt_dev.cmd_tx_queue, net_buf_ref(buf));
   179dc:	4620      	mov	r0, r4
   179de:	f008 fb53 	bl	20088 <net_buf_ref>
   179e2:	4601      	mov	r1, r0
   179e4:	4826      	ldr	r0, [pc, #152]	; (17a80 <bt_hci_cmd_send_sync+0xd8>)
   179e6:	f008 fad5 	bl	1ff94 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
   179ea:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
   179ee:	2300      	movs	r3, #0
   179f0:	4668      	mov	r0, sp
   179f2:	f00d f9bb 	bl	24d6c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
   179f6:	4680      	mov	r8, r0
   179f8:	b180      	cbz	r0, 17a1c <bt_hci_cmd_send_sync+0x74>
   179fa:	4a22      	ldr	r2, [pc, #136]	; (17a84 <bt_hci_cmd_send_sync+0xdc>)
   179fc:	4922      	ldr	r1, [pc, #136]	; (17a88 <bt_hci_cmd_send_sync+0xe0>)
   179fe:	4823      	ldr	r0, [pc, #140]	; (17a8c <bt_hci_cmd_send_sync+0xe4>)
   17a00:	f240 1331 	movw	r3, #305	; 0x131
   17a04:	f011 f8c9 	bl	28b9a <printk>
   17a08:	4821      	ldr	r0, [pc, #132]	; (17a90 <bt_hci_cmd_send_sync+0xe8>)
   17a0a:	4641      	mov	r1, r8
   17a0c:	f011 f8c5 	bl	28b9a <printk>
   17a10:	4040      	eors	r0, r0
   17a12:	f380 8811 	msr	BASEPRI, r0
   17a16:	f04f 0003 	mov.w	r0, #3
   17a1a:	df02      	svc	2
	status = cmd(buf)->status;
   17a1c:	4620      	mov	r0, r4
   17a1e:	f008 f8f3 	bl	1fc08 <net_buf_id>
   17a22:	230c      	movs	r3, #12
   17a24:	4343      	muls	r3, r0
   17a26:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
   17a28:	b1de      	cbz	r6, 17a62 <bt_hci_cmd_send_sync+0xba>
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
   17a2a:	4b1a      	ldr	r3, [pc, #104]	; (17a94 <bt_hci_cmd_send_sync+0xec>)
   17a2c:	681a      	ldr	r2, [r3, #0]
   17a2e:	f012 0f06 	tst.w	r2, #6
   17a32:	d00a      	beq.n	17a4a <bt_hci_cmd_send_sync+0xa2>
   17a34:	4a18      	ldr	r2, [pc, #96]	; (17a98 <bt_hci_cmd_send_sync+0xf0>)
   17a36:	4819      	ldr	r0, [pc, #100]	; (17a9c <bt_hci_cmd_send_sync+0xf4>)
   17a38:	1a9b      	subs	r3, r3, r2
   17a3a:	089b      	lsrs	r3, r3, #2
   17a3c:	019b      	lsls	r3, r3, #6
   17a3e:	f043 0302 	orr.w	r3, r3, #2
   17a42:	4632      	mov	r2, r6
   17a44:	4639      	mov	r1, r7
   17a46:	f011 fc6b 	bl	29320 <log_2>
		net_buf_unref(buf);
   17a4a:	4620      	mov	r0, r4
   17a4c:	f008 fad6 	bl	1fffc <net_buf_unref>
			return -EIO;
   17a50:	2e09      	cmp	r6, #9
   17a52:	bf0c      	ite	eq
   17a54:	f06f 006e 	mvneq.w	r0, #110	; 0x6e
   17a58:	f06f 0004 	mvnne.w	r0, #4
}
   17a5c:	b006      	add	sp, #24
   17a5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
   17a62:	b115      	cbz	r5, 17a6a <bt_hci_cmd_send_sync+0xc2>
		*rsp = buf;
   17a64:	602c      	str	r4, [r5, #0]
	return 0;
   17a66:	4630      	mov	r0, r6
   17a68:	e7f8      	b.n	17a5c <bt_hci_cmd_send_sync+0xb4>
		net_buf_unref(buf);
   17a6a:	4620      	mov	r0, r4
   17a6c:	f008 fac6 	bl	1fffc <net_buf_unref>
	return 0;
   17a70:	4628      	mov	r0, r5
   17a72:	e7f3      	b.n	17a5c <bt_hci_cmd_send_sync+0xb4>
			return -ENOBUFS;
   17a74:	f06f 0068 	mvn.w	r0, #104	; 0x68
   17a78:	e7f0      	b.n	17a5c <bt_hci_cmd_send_sync+0xb4>
   17a7a:	bf00      	nop
   17a7c:	20002718 	.word	0x20002718
   17a80:	200003f8 	.word	0x200003f8
   17a84:	00030fcb 	.word	0x00030fcb
   17a88:	0002ec6a 	.word	0x0002ec6a
   17a8c:	0002e93e 	.word	0x0002e93e
   17a90:	00031161 	.word	0x00031161
   17a94:	20000750 	.word	0x20000750
   17a98:	20000740 	.word	0x20000740
   17a9c:	00031181 	.word	0x00031181

00017aa0 <hci_le_read_max_data_len>:
{
   17aa0:	b573      	push	{r0, r1, r4, r5, r6, lr}
   17aa2:	4606      	mov	r6, r0
   17aa4:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   17aa6:	aa01      	add	r2, sp, #4
   17aa8:	2100      	movs	r1, #0
   17aaa:	f242 002f 	movw	r0, #8239	; 0x202f
   17aae:	f7ff ff7b 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   17ab2:	4604      	mov	r4, r0
   17ab4:	b178      	cbz	r0, 17ad6 <hci_le_read_max_data_len+0x36>
		BT_ERR("Failed to read DLE max data len");
   17ab6:	490d      	ldr	r1, [pc, #52]	; (17aec <hci_le_read_max_data_len+0x4c>)
   17ab8:	680b      	ldr	r3, [r1, #0]
   17aba:	075b      	lsls	r3, r3, #29
   17abc:	d008      	beq.n	17ad0 <hci_le_read_max_data_len+0x30>
   17abe:	4b0c      	ldr	r3, [pc, #48]	; (17af0 <hci_le_read_max_data_len+0x50>)
   17ac0:	480c      	ldr	r0, [pc, #48]	; (17af4 <hci_le_read_max_data_len+0x54>)
   17ac2:	1ac9      	subs	r1, r1, r3
   17ac4:	0889      	lsrs	r1, r1, #2
   17ac6:	0189      	lsls	r1, r1, #6
   17ac8:	f041 0101 	orr.w	r1, r1, #1
   17acc:	f011 fc07 	bl	292de <log_0>
}
   17ad0:	4620      	mov	r0, r4
   17ad2:	b002      	add	sp, #8
   17ad4:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   17ad6:	9801      	ldr	r0, [sp, #4]
   17ad8:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   17ada:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17ade:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   17ae0:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   17ae4:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   17ae6:	f008 fa89 	bl	1fffc <net_buf_unref>
	return 0;
   17aea:	e7f1      	b.n	17ad0 <hci_le_read_max_data_len+0x30>
   17aec:	20000750 	.word	0x20000750
   17af0:	20000740 	.word	0x20000740
   17af4:	0003119d 	.word	0x0003119d

00017af8 <hci_init>:
{
   17af8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
   17afa:	4d48      	ldr	r5, [pc, #288]	; (17c1c <hci_init+0x124>)
   17afc:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   17b00:	6899      	ldr	r1, [r3, #8]
   17b02:	f011 0101 	ands.w	r1, r1, #1
   17b06:	d123      	bne.n	17b50 <hci_init+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
   17b08:	aa01      	add	r2, sp, #4
   17b0a:	f640 4003 	movw	r0, #3075	; 0xc03
   17b0e:	f7ff ff4b 	bl	179a8 <bt_hci_cmd_send_sync>
		if (err) {
   17b12:	4604      	mov	r4, r0
   17b14:	2800      	cmp	r0, #0
   17b16:	d174      	bne.n	17c02 <hci_init+0x10a>
	uint8_t status = buf->data[0];
   17b18:	9b01      	ldr	r3, [sp, #4]
   17b1a:	689b      	ldr	r3, [r3, #8]
	if (status) {
   17b1c:	781b      	ldrb	r3, [r3, #0]
   17b1e:	b9a3      	cbnz	r3, 17b4a <hci_init+0x52>
		bt_scan_reset();
   17b20:	f001 fb8e 	bl	19240 <bt_scan_reset>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   17b24:	f3bf 8f5b 	dmb	ish
   17b28:	462b      	mov	r3, r5
   17b2a:	f853 2fcc 	ldr.w	r2, [r3, #204]!
   17b2e:	f3bf 8f5b 	dmb	ish
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
   17b32:	f002 0205 	and.w	r2, r2, #5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   17b36:	f3bf 8f5b 	dmb	ish
   17b3a:	e853 1f00 	ldrex	r1, [r3]
   17b3e:	e843 2000 	strex	r0, r2, [r3]
   17b42:	2800      	cmp	r0, #0
   17b44:	d1f9      	bne.n	17b3a <hci_init+0x42>
   17b46:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
   17b4a:	9801      	ldr	r0, [sp, #4]
   17b4c:	f008 fa56 	bl	1fffc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
   17b50:	aa01      	add	r2, sp, #4
   17b52:	2100      	movs	r1, #0
   17b54:	f241 0003 	movw	r0, #4099	; 0x1003
   17b58:	f7ff ff26 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   17b5c:	4604      	mov	r4, r0
   17b5e:	2800      	cmp	r0, #0
   17b60:	d14f      	bne.n	17c02 <hci_init+0x10a>
	read_local_features_complete(rsp);
   17b62:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
   17b64:	4e2e      	ldr	r6, [pc, #184]	; (17c20 <hci_init+0x128>)
   17b66:	6893      	ldr	r3, [r2, #8]
   17b68:	f853 0f01 	ldr.w	r0, [r3, #1]!
   17b6c:	6859      	ldr	r1, [r3, #4]
   17b6e:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   17b70:	4610      	mov	r0, r2
   17b72:	f008 fa43 	bl	1fffc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
   17b76:	4621      	mov	r1, r4
   17b78:	aa01      	add	r2, sp, #4
   17b7a:	f241 0001 	movw	r0, #4097	; 0x1001
   17b7e:	f7ff ff13 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   17b82:	4604      	mov	r4, r0
   17b84:	2800      	cmp	r0, #0
   17b86:	d13c      	bne.n	17c02 <hci_init+0x10a>
	read_local_ver_complete(rsp);
   17b88:	9801      	ldr	r0, [sp, #4]
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
   17b8a:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
   17b8c:	785a      	ldrb	r2, [r3, #1]
   17b8e:	f885 2068 	strb.w	r2, [r5, #104]	; 0x68
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
   17b92:	78d9      	ldrb	r1, [r3, #3]
   17b94:	789a      	ldrb	r2, [r3, #2]
   17b96:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17b9a:	f8a5 206a 	strh.w	r2, [r5, #106]	; 0x6a
	bt_dev.lmp_version = rp->lmp_version;
   17b9e:	791a      	ldrb	r2, [r3, #4]
   17ba0:	f885 2069 	strb.w	r2, [r5, #105]	; 0x69
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
   17ba4:	7a19      	ldrb	r1, [r3, #8]
   17ba6:	79da      	ldrb	r2, [r3, #7]
   17ba8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17bac:	f8a5 206c 	strh.w	r2, [r5, #108]	; 0x6c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
   17bb0:	795a      	ldrb	r2, [r3, #5]
   17bb2:	799b      	ldrb	r3, [r3, #6]
   17bb4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   17bb8:	f8a5 306e 	strh.w	r3, [r5, #110]	; 0x6e
	net_buf_unref(rsp);
   17bbc:	f008 fa1e 	bl	1fffc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
   17bc0:	4621      	mov	r1, r4
   17bc2:	aa01      	add	r2, sp, #4
   17bc4:	f241 0002 	movw	r0, #4098	; 0x1002
   17bc8:	f7ff feee 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   17bcc:	4604      	mov	r4, r0
   17bce:	b9c0      	cbnz	r0, 17c02 <hci_init+0x10a>
	read_supported_commands_complete(rsp);
   17bd0:	9f01      	ldr	r7, [sp, #4]
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
   17bd2:	68ba      	ldr	r2, [r7, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
   17bd4:	1c53      	adds	r3, r2, #1
   17bd6:	3241      	adds	r2, #65	; 0x41
   17bd8:	6818      	ldr	r0, [r3, #0]
   17bda:	6859      	ldr	r1, [r3, #4]
   17bdc:	4634      	mov	r4, r6
   17bde:	c403      	stmia	r4!, {r0, r1}
   17be0:	3308      	adds	r3, #8
   17be2:	4293      	cmp	r3, r2
   17be4:	4626      	mov	r6, r4
   17be6:	d1f7      	bne.n	17bd8 <hci_init+0xe0>
	net_buf_unref(rsp);
   17be8:	4638      	mov	r0, r7
   17bea:	f008 fa07 	bl	1fffc <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
   17bee:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   17bf2:	0659      	lsls	r1, r3, #25
   17bf4:	d41c      	bmi.n	17c30 <hci_init+0x138>
		BT_ERR("Non-LE capable controller detected!");
   17bf6:	490b      	ldr	r1, [pc, #44]	; (17c24 <hci_init+0x12c>)
   17bf8:	680b      	ldr	r3, [r1, #0]
   17bfa:	075a      	lsls	r2, r3, #29
   17bfc:	d104      	bne.n	17c08 <hci_init+0x110>
		return -ENODEV;
   17bfe:	f06f 0412 	mvn.w	r4, #18
}
   17c02:	4620      	mov	r0, r4
   17c04:	b003      	add	sp, #12
   17c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17c08:	4b07      	ldr	r3, [pc, #28]	; (17c28 <hci_init+0x130>)
		BT_ERR("Non-LE capable controller detected!");
   17c0a:	4808      	ldr	r0, [pc, #32]	; (17c2c <hci_init+0x134>)
   17c0c:	1ac9      	subs	r1, r1, r3
   17c0e:	0889      	lsrs	r1, r1, #2
   17c10:	0189      	lsls	r1, r1, #6
   17c12:	f041 0101 	orr.w	r1, r1, #1
   17c16:	f011 fb62 	bl	292de <log_0>
   17c1a:	e7f0      	b.n	17bfe <hci_init+0x106>
   17c1c:	200002a8 	.word	0x200002a8
   17c20:	20000318 	.word	0x20000318
   17c24:	20000750 	.word	0x20000750
   17c28:	20000740 	.word	0x20000740
   17c2c:	000311bd 	.word	0x000311bd
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
   17c30:	aa01      	add	r2, sp, #4
   17c32:	2100      	movs	r1, #0
   17c34:	f242 0003 	movw	r0, #8195	; 0x2003
   17c38:	f7ff feb6 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   17c3c:	4604      	mov	r4, r0
   17c3e:	2800      	cmp	r0, #0
   17c40:	d1df      	bne.n	17c02 <hci_init+0x10a>
	read_le_features_complete(rsp);
   17c42:	9a01      	ldr	r2, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
   17c44:	4eb4      	ldr	r6, [pc, #720]	; (17f18 <hci_init+0x420>)
   17c46:	6893      	ldr	r3, [r2, #8]
   17c48:	f853 0f01 	ldr.w	r0, [r3, #1]!
   17c4c:	6859      	ldr	r1, [r3, #4]
   17c4e:	c603      	stmia	r6!, {r0, r1}
	net_buf_unref(rsp);
   17c50:	4610      	mov	r0, r2
   17c52:	f008 f9d3 	bl	1fffc <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
   17c56:	4621      	mov	r1, r4
   17c58:	aa01      	add	r2, sp, #4
   17c5a:	f242 0002 	movw	r0, #8194	; 0x2002
   17c5e:	f7ff fea3 	bl	179a8 <bt_hci_cmd_send_sync>
		if (err) {
   17c62:	4604      	mov	r4, r0
   17c64:	2800      	cmp	r0, #0
   17c66:	d1cc      	bne.n	17c02 <hci_init+0x10a>
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
   17c68:	9b01      	ldr	r3, [sp, #4]
   17c6a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
   17c6c:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   17c70:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
   17c74:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
   17c76:	b129      	cbz	r1, 17c84 <hci_init+0x18c>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
   17c78:	78da      	ldrb	r2, [r3, #3]
	return z_impl_k_sem_init(sem, initial_count, limit);
   17c7a:	4611      	mov	r1, r2
   17c7c:	f106 0028 	add.w	r0, r6, #40	; 0x28
   17c80:	f014 fe65 	bl	2c94e <z_impl_k_sem_init>
		net_buf_unref(rsp);
   17c84:	9801      	ldr	r0, [sp, #4]
   17c86:	f008 f9b9 	bl	1fffc <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   17c8a:	f895 6074 	ldrb.w	r6, [r5, #116]	; 0x74
   17c8e:	f016 0620 	ands.w	r6, r6, #32
   17c92:	f000 80d2 	beq.w	17e3a <hci_init+0x342>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
   17c96:	f895 3094 	ldrb.w	r3, [r5, #148]	; 0x94
   17c9a:	071b      	lsls	r3, r3, #28
   17c9c:	d511      	bpl.n	17cc2 <hci_init+0x1ca>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
   17c9e:	aa01      	add	r2, sp, #4
   17ca0:	2100      	movs	r1, #0
   17ca2:	f242 001c 	movw	r0, #8220	; 0x201c
   17ca6:	f7ff fe7f 	bl	179a8 <bt_hci_cmd_send_sync>
		if (err) {
   17caa:	4604      	mov	r4, r0
   17cac:	2800      	cmp	r0, #0
   17cae:	d1a8      	bne.n	17c02 <hci_init+0x10a>
		le_read_supp_states_complete(rsp);
   17cb0:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   17cb2:	6883      	ldr	r3, [r0, #8]
   17cb4:	f853 2f01 	ldr.w	r2, [r3, #1]!
   17cb8:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
   17cba:	e9c5 2336 	strd	r2, r3, [r5, #216]	; 0xd8
		net_buf_unref(rsp);
   17cbe:	f008 f99d 	bl	1fffc <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   17cc2:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   17cc6:	069f      	lsls	r7, r3, #26
   17cc8:	d524      	bpl.n	17d14 <hci_init+0x21c>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   17cca:	f10d 0102 	add.w	r1, sp, #2
   17cce:	4668      	mov	r0, sp
   17cd0:	f7ff fee6 	bl	17aa0 <hci_le_read_max_data_len>
		if (err) {
   17cd4:	4604      	mov	r4, r0
   17cd6:	2800      	cmp	r0, #0
   17cd8:	d193      	bne.n	17c02 <hci_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   17cda:	2104      	movs	r1, #4
   17cdc:	f242 0024 	movw	r0, #8228	; 0x2024
   17ce0:	f7ff fe1a 	bl	17918 <bt_hci_cmd_create>
		if (!buf) {
   17ce4:	4606      	mov	r6, r0
   17ce6:	2800      	cmp	r0, #0
   17ce8:	f000 80ae 	beq.w	17e48 <hci_init+0x350>
   17cec:	2104      	movs	r1, #4
   17cee:	3008      	adds	r0, #8
   17cf0:	f008 fab4 	bl	2025c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
   17cf4:	f8bd 3000 	ldrh.w	r3, [sp]
   17cf8:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
   17cfa:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   17cfe:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
   17d00:	4622      	mov	r2, r4
   17d02:	4631      	mov	r1, r6
   17d04:	f242 0024 	movw	r0, #8228	; 0x2024
   17d08:	f7ff fe4e 	bl	179a8 <bt_hci_cmd_send_sync>
		if (err) {
   17d0c:	4604      	mov	r4, r0
   17d0e:	2800      	cmp	r0, #0
   17d10:	f47f af77 	bne.w	17c02 <hci_init+0x10a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
   17d14:	2108      	movs	r1, #8
   17d16:	f242 0001 	movw	r0, #8193	; 0x2001
   17d1a:	f7ff fdfd 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   17d1e:	4604      	mov	r4, r0
   17d20:	2800      	cmp	r0, #0
   17d22:	f000 8091 	beq.w	17e48 <hci_init+0x350>
   17d26:	2108      	movs	r1, #8
   17d28:	4408      	add	r0, r1
   17d2a:	f008 fa97 	bl	2025c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
   17d2e:	f895 20d0 	ldrb.w	r2, [r5, #208]	; 0xd0
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
   17d32:	f012 0f02 	tst.w	r2, #2
   17d36:	bf14      	ite	ne
   17d38:	232f      	movne	r3, #47	; 0x2f
   17d3a:	230f      	moveq	r3, #15
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
   17d3c:	0696      	lsls	r6, r2, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   17d3e:	f895 20d1 	ldrb.w	r2, [r5, #209]	; 0xd1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
   17d42:	bf48      	it	mi
   17d44:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
   17d48:	f012 0f09 	tst.w	r2, #9
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
   17d4c:	bf18      	it	ne
   17d4e:	f443 6300 	orrne.w	r3, r3, #2048	; 0x800
	dst[0] = val;
   17d52:	2200      	movs	r2, #0
   17d54:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   17d56:	f3c3 2307 	ubfx	r3, r3, #8, #8
   17d5a:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   17d5c:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
   17d5e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
   17d60:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   17d62:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   17d64:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   17d66:	71c2      	strb	r2, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
   17d68:	4621      	mov	r1, r4
   17d6a:	f242 0001 	movw	r0, #8193	; 0x2001
   17d6e:	f7ff fe1b 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   17d72:	4604      	mov	r4, r0
   17d74:	2800      	cmp	r0, #0
   17d76:	f47f af44 	bne.w	17c02 <hci_init+0x10a>
	if (BT_FEAT_BREDR(bt_dev.features)) {
   17d7a:	f895 3074 	ldrb.w	r3, [r5, #116]	; 0x74
   17d7e:	f8b5 10fc 	ldrh.w	r1, [r5, #252]	; 0xfc
   17d82:	0698      	lsls	r0, r3, #26
   17d84:	d475      	bmi.n	17e72 <hci_init+0x37a>
	if (bt_dev.le.acl_mtu) {
   17d86:	b9d9      	cbnz	r1, 17dc0 <hci_init+0x2c8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
   17d88:	aa01      	add	r2, sp, #4
   17d8a:	f241 0005 	movw	r0, #4101	; 0x1005
   17d8e:	f7ff fe0b 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   17d92:	4604      	mov	r4, r0
   17d94:	2800      	cmp	r0, #0
   17d96:	f47f af34 	bne.w	17c02 <hci_init+0x10a>
	if (bt_dev.le.acl_mtu) {
   17d9a:	f8b5 30fc 	ldrh.w	r3, [r5, #252]	; 0xfc
   17d9e:	b963      	cbnz	r3, 17dba <hci_init+0x2c2>
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
   17da0:	9b01      	ldr	r3, [sp, #4]
   17da2:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
   17da4:	785a      	ldrb	r2, [r3, #1]
   17da6:	7899      	ldrb	r1, [r3, #2]
   17da8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   17dac:	f8a5 20fc 	strh.w	r2, [r5, #252]	; 0xfc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
   17db0:	889a      	ldrh	r2, [r3, #4]
   17db2:	485a      	ldr	r0, [pc, #360]	; (17f1c <hci_init+0x424>)
   17db4:	4611      	mov	r1, r2
   17db6:	f014 fdca 	bl	2c94e <z_impl_k_sem_init>
	net_buf_unref(rsp);
   17dba:	9801      	ldr	r0, [sp, #4]
   17dbc:	f008 f91e 	bl	1fffc <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
   17dc0:	2108      	movs	r1, #8
   17dc2:	f640 4001 	movw	r0, #3073	; 0xc01
   17dc6:	f7ff fda7 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   17dca:	4604      	mov	r4, r0
   17dcc:	2800      	cmp	r0, #0
   17dce:	d03b      	beq.n	17e48 <hci_init+0x350>
   17dd0:	2108      	movs	r1, #8
   17dd2:	4408      	add	r0, r1
   17dd4:	f008 fa42 	bl	2025c <net_buf_simple_add>
	dst[0] = val;
   17dd8:	2310      	movs	r3, #16
   17dda:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   17ddc:	2388      	movs	r3, #136	; 0x88
   17dde:	7043      	strb	r3, [r0, #1]
   17de0:	2302      	movs	r3, #2
	dst[0] = val;
   17de2:	2200      	movs	r2, #0
	dst[1] = val >> 8;
   17de4:	70c3      	strb	r3, [r0, #3]
   17de6:	2320      	movs	r3, #32
	dst[0] = val;
   17de8:	7082      	strb	r2, [r0, #2]
   17dea:	7102      	strb	r2, [r0, #4]
	dst[1] = val >> 8;
   17dec:	7142      	strb	r2, [r0, #5]
	dst[0] = val;
   17dee:	7182      	strb	r2, [r0, #6]
	dst[1] = val >> 8;
   17df0:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
   17df2:	4621      	mov	r1, r4
   17df4:	f640 4001 	movw	r0, #3073	; 0xc01
   17df8:	f7ff fdd6 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   17dfc:	4604      	mov	r4, r0
   17dfe:	2800      	cmp	r0, #0
   17e00:	f47f aeff 	bne.w	17c02 <hci_init+0x10a>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
   17e04:	4601      	mov	r1, r0
   17e06:	aa01      	add	r2, sp, #4
   17e08:	f64f 4001 	movw	r0, #64513	; 0xfc01
   17e0c:	f7ff fdcc 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   17e10:	4604      	mov	r4, r0
   17e12:	2800      	cmp	r0, #0
   17e14:	d03f      	beq.n	17e96 <hci_init+0x39e>
		BT_WARN("Vendor HCI extensions not available");
   17e16:	4942      	ldr	r1, [pc, #264]	; (17f20 <hci_init+0x428>)
   17e18:	680b      	ldr	r3, [r1, #0]
   17e1a:	f013 0f06 	tst.w	r3, #6
   17e1e:	d008      	beq.n	17e32 <hci_init+0x33a>
   17e20:	4b40      	ldr	r3, [pc, #256]	; (17f24 <hci_init+0x42c>)
   17e22:	4841      	ldr	r0, [pc, #260]	; (17f28 <hci_init+0x430>)
   17e24:	1ac9      	subs	r1, r1, r3
   17e26:	0889      	lsrs	r1, r1, #2
   17e28:	0189      	lsls	r1, r1, #6
   17e2a:	f041 0102 	orr.w	r1, r1, #2
			BT_WARN("Failed to read supported vendor features");
   17e2e:	f011 fa56 	bl	292de <log_0>
	err = bt_id_init();
   17e32:	f001 f93f 	bl	190b4 <bt_id_init>
   17e36:	4604      	mov	r4, r0
	if (err) {
   17e38:	e6e3      	b.n	17c02 <hci_init+0x10a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
   17e3a:	2102      	movs	r1, #2
   17e3c:	f640 406d 	movw	r0, #3181	; 0xc6d
   17e40:	f7ff fd6a 	bl	17918 <bt_hci_cmd_create>
		if (!buf) {
   17e44:	4604      	mov	r4, r0
   17e46:	b910      	cbnz	r0, 17e4e <hci_init+0x356>
		return -ENOBUFS;
   17e48:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17e4c:	e6d9      	b.n	17c02 <hci_init+0x10a>
   17e4e:	2102      	movs	r1, #2
   17e50:	3008      	adds	r0, #8
   17e52:	f008 fa03 	bl	2025c <net_buf_simple_add>
		cp_le->le = 0x01;
   17e56:	2301      	movs	r3, #1
   17e58:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
   17e5a:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
   17e5c:	4621      	mov	r1, r4
   17e5e:	4632      	mov	r2, r6
   17e60:	f640 406d 	movw	r0, #3181	; 0xc6d
   17e64:	f7ff fda0 	bl	179a8 <bt_hci_cmd_send_sync>
		if (err) {
   17e68:	4604      	mov	r4, r0
   17e6a:	2800      	cmp	r0, #0
   17e6c:	f43f af13 	beq.w	17c96 <hci_init+0x19e>
   17e70:	e6c7      	b.n	17c02 <hci_init+0x10a>
	else if (!bt_dev.le.acl_mtu) {
   17e72:	2900      	cmp	r1, #0
   17e74:	d1a4      	bne.n	17dc0 <hci_init+0x2c8>
		BT_ERR("ACL BR/EDR buffers not initialized");
   17e76:	492a      	ldr	r1, [pc, #168]	; (17f20 <hci_init+0x428>)
   17e78:	680b      	ldr	r3, [r1, #0]
   17e7a:	075a      	lsls	r2, r3, #29
   17e7c:	d008      	beq.n	17e90 <hci_init+0x398>
   17e7e:	4b29      	ldr	r3, [pc, #164]	; (17f24 <hci_init+0x42c>)
   17e80:	482a      	ldr	r0, [pc, #168]	; (17f2c <hci_init+0x434>)
   17e82:	1ac9      	subs	r1, r1, r3
   17e84:	0889      	lsrs	r1, r1, #2
   17e86:	0189      	lsls	r1, r1, #6
   17e88:	f041 0101 	orr.w	r1, r1, #1
   17e8c:	f011 fa27 	bl	292de <log_0>
		return -EIO;
   17e90:	f06f 0404 	mvn.w	r4, #4
   17e94:	e6b5      	b.n	17c02 <hci_init+0x10a>
	net_buf_unref(rsp);
   17e96:	9801      	ldr	r0, [sp, #4]
   17e98:	f008 f8b0 	bl	1fffc <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
   17e9c:	4621      	mov	r1, r4
   17e9e:	aa01      	add	r2, sp, #4
   17ea0:	f64f 4002 	movw	r0, #64514	; 0xfc02
   17ea4:	f7ff fd80 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   17ea8:	4604      	mov	r4, r0
   17eaa:	b160      	cbz	r0, 17ec6 <hci_init+0x3ce>
		BT_WARN("Failed to read supported vendor commands");
   17eac:	491c      	ldr	r1, [pc, #112]	; (17f20 <hci_init+0x428>)
   17eae:	680b      	ldr	r3, [r1, #0]
   17eb0:	f013 0f06 	tst.w	r3, #6
   17eb4:	d0bd      	beq.n	17e32 <hci_init+0x33a>
   17eb6:	4b1b      	ldr	r3, [pc, #108]	; (17f24 <hci_init+0x42c>)
   17eb8:	481d      	ldr	r0, [pc, #116]	; (17f30 <hci_init+0x438>)
   17eba:	1ac9      	subs	r1, r1, r3
   17ebc:	0889      	lsrs	r1, r1, #2
   17ebe:	0189      	lsls	r1, r1, #6
   17ec0:	f041 0102 	orr.w	r1, r1, #2
   17ec4:	e7b3      	b.n	17e2e <hci_init+0x336>
	rp.cmds = (void *)rsp->data;
   17ec6:	9801      	ldr	r0, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
   17ec8:	6883      	ldr	r3, [r0, #8]
   17eca:	f8b3 3001 	ldrh.w	r3, [r3, #1]
   17ece:	f8a5 30b9 	strh.w	r3, [r5, #185]	; 0xb9
	net_buf_unref(rsp);
   17ed2:	f008 f893 	bl	1fffc <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
   17ed6:	f895 30b9 	ldrb.w	r3, [r5, #185]	; 0xb9
   17eda:	075b      	lsls	r3, r3, #29
   17edc:	d5a9      	bpl.n	17e32 <hci_init+0x33a>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
   17ede:	aa01      	add	r2, sp, #4
   17ee0:	4621      	mov	r1, r4
   17ee2:	f64f 4003 	movw	r0, #64515	; 0xfc03
   17ee6:	f7ff fd5f 	bl	179a8 <bt_hci_cmd_send_sync>
		if (err) {
   17eea:	b160      	cbz	r0, 17f06 <hci_init+0x40e>
			BT_WARN("Failed to read supported vendor features");
   17eec:	490c      	ldr	r1, [pc, #48]	; (17f20 <hci_init+0x428>)
   17eee:	680b      	ldr	r3, [r1, #0]
   17ef0:	f013 0f06 	tst.w	r3, #6
   17ef4:	d09d      	beq.n	17e32 <hci_init+0x33a>
   17ef6:	4b0b      	ldr	r3, [pc, #44]	; (17f24 <hci_init+0x42c>)
   17ef8:	480e      	ldr	r0, [pc, #56]	; (17f34 <hci_init+0x43c>)
   17efa:	1ac9      	subs	r1, r1, r3
   17efc:	0889      	lsrs	r1, r1, #2
   17efe:	0189      	lsls	r1, r1, #6
   17f00:	f041 0102 	orr.w	r1, r1, #2
   17f04:	e793      	b.n	17e2e <hci_init+0x336>
		rp.feat = (void *)rsp->data;
   17f06:	9801      	ldr	r0, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
   17f08:	6883      	ldr	r3, [r0, #8]
   17f0a:	785b      	ldrb	r3, [r3, #1]
   17f0c:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
		net_buf_unref(rsp);
   17f10:	f008 f874 	bl	1fffc <net_buf_unref>
   17f14:	e78d      	b.n	17e32 <hci_init+0x33a>
   17f16:	bf00      	nop
   17f18:	20000378 	.word	0x20000378
   17f1c:	200003a8 	.word	0x200003a8
   17f20:	20000750 	.word	0x20000750
   17f24:	20000740 	.word	0x20000740
   17f28:	00031204 	.word	0x00031204
   17f2c:	000311e1 	.word	0x000311e1
   17f30:	00031228 	.word	0x00031228
   17f34:	00031251 	.word	0x00031251

00017f38 <bt_le_create_conn_legacy>:
{
   17f38:	b5f0      	push	{r4, r5, r6, r7, lr}
   17f3a:	b085      	sub	sp, #20
   17f3c:	4606      	mov	r6, r0
	err = bt_id_set_create_conn_own_addr(use_filter, &own_addr_type);
   17f3e:	f10d 0103 	add.w	r1, sp, #3
   17f42:	2000      	movs	r0, #0
   17f44:	f001 f87c 	bl	19040 <bt_id_set_create_conn_own_addr>
	if (err) {
   17f48:	4604      	mov	r4, r0
   17f4a:	2800      	cmp	r0, #0
   17f4c:	d145      	bne.n	17fda <bt_le_create_conn_legacy+0xa2>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
   17f4e:	2119      	movs	r1, #25
   17f50:	f242 000d 	movw	r0, #8205	; 0x200d
   17f54:	f7ff fce0 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   17f58:	4607      	mov	r7, r0
   17f5a:	2800      	cmp	r0, #0
   17f5c:	d040      	beq.n	17fe0 <bt_le_create_conn_legacy+0xa8>
   17f5e:	2119      	movs	r1, #25
   17f60:	3008      	adds	r0, #8
   17f62:	f008 f97b 	bl	2025c <net_buf_simple_add>
   17f66:	2219      	movs	r2, #25
   17f68:	4605      	mov	r5, r0
   17f6a:	4621      	mov	r1, r4
   17f6c:	f014 fe6b 	bl	2cc46 <memset>
	cp->own_addr_type = own_addr_type;
   17f70:	f89d 3003 	ldrb.w	r3, [sp, #3]
   17f74:	732b      	strb	r3, [r5, #12]
		bt_addr_le_copy(&cp->peer_addr, peer_addr);
   17f76:	f106 0190 	add.w	r1, r6, #144	; 0x90
   17f7a:	1d68      	adds	r0, r5, #5
   17f7c:	f012 fcdb 	bl	2a936 <bt_addr_le_copy>
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   17f80:	4b19      	ldr	r3, [pc, #100]	; (17fe8 <bt_le_create_conn_legacy+0xb0>)
		cp->filter_policy = BT_HCI_LE_CREATE_CONN_FP_NO_FILTER;
   17f82:	712c      	strb	r4, [r5, #4]
	cp->scan_interval = sys_cpu_to_le16(bt_dev.create_param.interval);
   17f84:	899a      	ldrh	r2, [r3, #12]
   17f86:	802a      	strh	r2, [r5, #0]
	cp->scan_window = sys_cpu_to_le16(bt_dev.create_param.window);
   17f88:	89da      	ldrh	r2, [r3, #14]
   17f8a:	806a      	strh	r2, [r5, #2]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
   17f8c:	f8b6 20a8 	ldrh.w	r2, [r6, #168]	; 0xa8
   17f90:	f8a5 200d 	strh.w	r2, [r5, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
   17f94:	f8b6 20aa 	ldrh.w	r2, [r6, #170]	; 0xaa
   17f98:	f8a5 200f 	strh.w	r2, [r5, #15]
	state->target = target;
   17f9c:	33cc      	adds	r3, #204	; 0xcc
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
   17f9e:	f8b6 20ac 	ldrh.w	r2, [r6, #172]	; 0xac
   17fa2:	f8a5 2011 	strh.w	r2, [r5, #17]
	state->target = target;
   17fa6:	9301      	str	r3, [sp, #4]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
   17fa8:	f8b6 20ae 	ldrh.w	r2, [r6, #174]	; 0xae
   17fac:	f8a5 2013 	strh.w	r2, [r5, #19]
	state->bit = bit;
   17fb0:	230b      	movs	r3, #11
   17fb2:	9302      	str	r3, [sp, #8]
	cmd(buf)->state = state;
   17fb4:	4638      	mov	r0, r7
	state->val = val;
   17fb6:	2301      	movs	r3, #1
   17fb8:	f88d 300c 	strb.w	r3, [sp, #12]
	cmd(buf)->state = state;
   17fbc:	f007 fe24 	bl	1fc08 <net_buf_id>
   17fc0:	4b0a      	ldr	r3, [pc, #40]	; (17fec <bt_le_create_conn_legacy+0xb4>)
   17fc2:	220c      	movs	r2, #12
   17fc4:	fb02 3300 	mla	r3, r2, r0, r3
   17fc8:	aa01      	add	r2, sp, #4
   17fca:	605a      	str	r2, [r3, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
   17fcc:	4639      	mov	r1, r7
   17fce:	4622      	mov	r2, r4
   17fd0:	f242 000d 	movw	r0, #8205	; 0x200d
   17fd4:	f7ff fce8 	bl	179a8 <bt_hci_cmd_send_sync>
   17fd8:	4604      	mov	r4, r0
}
   17fda:	4620      	mov	r0, r4
   17fdc:	b005      	add	sp, #20
   17fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOBUFS;
   17fe0:	f06f 0468 	mvn.w	r4, #104	; 0x68
   17fe4:	e7f9      	b.n	17fda <bt_le_create_conn_legacy+0xa2>
   17fe6:	bf00      	nop
   17fe8:	200002a8 	.word	0x200002a8
   17fec:	20002718 	.word	0x20002718

00017ff0 <bt_le_create_conn_cancel>:
{
   17ff0:	b530      	push	{r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   17ff2:	2100      	movs	r1, #0
{
   17ff4:	b085      	sub	sp, #20
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   17ff6:	f242 000e 	movw	r0, #8206	; 0x200e
   17ffa:	f7ff fc8d 	bl	17918 <bt_hci_cmd_create>
	state->target = target;
   17ffe:	4b0c      	ldr	r3, [pc, #48]	; (18030 <bt_le_create_conn_cancel+0x40>)
   18000:	9301      	str	r3, [sp, #4]
	state->val = val;
   18002:	2500      	movs	r5, #0
	state->bit = bit;
   18004:	230b      	movs	r3, #11
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN_CANCEL, 0);
   18006:	4604      	mov	r4, r0
	state->bit = bit;
   18008:	9302      	str	r3, [sp, #8]
	state->val = val;
   1800a:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = state;
   1800e:	f007 fdfb 	bl	1fc08 <net_buf_id>
   18012:	4b08      	ldr	r3, [pc, #32]	; (18034 <bt_le_create_conn_cancel+0x44>)
   18014:	220c      	movs	r2, #12
   18016:	fb02 3000 	mla	r0, r2, r0, r3
   1801a:	ab01      	add	r3, sp, #4
   1801c:	6043      	str	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN_CANCEL, buf, NULL);
   1801e:	462a      	mov	r2, r5
   18020:	4621      	mov	r1, r4
   18022:	f242 000e 	movw	r0, #8206	; 0x200e
   18026:	f7ff fcbf 	bl	179a8 <bt_hci_cmd_send_sync>
}
   1802a:	b005      	add	sp, #20
   1802c:	bd30      	pop	{r4, r5, pc}
   1802e:	bf00      	nop
   18030:	20000374 	.word	0x20000374
   18034:	20002718 	.word	0x20002718

00018038 <bt_send>:
	return bt_dev.drv->send(buf);
   18038:	4b02      	ldr	r3, [pc, #8]	; (18044 <bt_send+0xc>)
   1803a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   1803e:	691b      	ldr	r3, [r3, #16]
   18040:	4718      	bx	r3
   18042:	bf00      	nop
   18044:	200002a8 	.word	0x200002a8

00018048 <bt_hci_cmd_send>:
{
   18048:	b538      	push	{r3, r4, r5, lr}
   1804a:	4605      	mov	r5, r0
	if (!buf) {
   1804c:	460c      	mov	r4, r1
   1804e:	b919      	cbnz	r1, 18058 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
   18050:	f7ff fc62 	bl	17918 <bt_hci_cmd_create>
		if (!buf) {
   18054:	4604      	mov	r4, r0
   18056:	b308      	cbz	r0, 1809c <bt_hci_cmd_send+0x54>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
   18058:	f640 4335 	movw	r3, #3125	; 0xc35
   1805c:	429d      	cmp	r5, r3
   1805e:	d117      	bne.n	18090 <bt_hci_cmd_send+0x48>
		err = bt_send(buf);
   18060:	4620      	mov	r0, r4
   18062:	f7ff ffe9 	bl	18038 <bt_send>
		if (err) {
   18066:	4605      	mov	r5, r0
   18068:	b180      	cbz	r0, 1808c <bt_hci_cmd_send+0x44>
			BT_ERR("Unable to send to driver (err %d)", err);
   1806a:	4a0e      	ldr	r2, [pc, #56]	; (180a4 <bt_hci_cmd_send+0x5c>)
   1806c:	6813      	ldr	r3, [r2, #0]
   1806e:	075b      	lsls	r3, r3, #29
   18070:	d009      	beq.n	18086 <bt_hci_cmd_send+0x3e>
   18072:	4b0d      	ldr	r3, [pc, #52]	; (180a8 <bt_hci_cmd_send+0x60>)
   18074:	1ad2      	subs	r2, r2, r3
   18076:	0892      	lsrs	r2, r2, #2
   18078:	0192      	lsls	r2, r2, #6
   1807a:	4601      	mov	r1, r0
   1807c:	f042 0201 	orr.w	r2, r2, #1
   18080:	480a      	ldr	r0, [pc, #40]	; (180ac <bt_hci_cmd_send+0x64>)
   18082:	f011 f939 	bl	292f8 <log_1>
			net_buf_unref(buf);
   18086:	4620      	mov	r0, r4
   18088:	f007 ffb8 	bl	1fffc <net_buf_unref>
}
   1808c:	4628      	mov	r0, r5
   1808e:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
   18090:	4807      	ldr	r0, [pc, #28]	; (180b0 <bt_hci_cmd_send+0x68>)
   18092:	4621      	mov	r1, r4
   18094:	f007 ff7e 	bl	1ff94 <net_buf_put>
	return 0;
   18098:	2500      	movs	r5, #0
   1809a:	e7f7      	b.n	1808c <bt_hci_cmd_send+0x44>
			return -ENOBUFS;
   1809c:	f06f 0568 	mvn.w	r5, #104	; 0x68
   180a0:	e7f4      	b.n	1808c <bt_hci_cmd_send+0x44>
   180a2:	bf00      	nop
   180a4:	20000750 	.word	0x20000750
   180a8:	20000740 	.word	0x20000740
   180ac:	0003127a 	.word	0x0003127a
   180b0:	200003f8 	.word	0x200003f8

000180b4 <conn_auto_initiate>:
{
   180b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   180b6:	7a83      	ldrb	r3, [r0, #10]
   180b8:	2b07      	cmp	r3, #7
{
   180ba:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   180bc:	d121      	bne.n	18102 <conn_auto_initiate+0x4e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   180be:	f3bf 8f5b 	dmb	ish
   180c2:	6843      	ldr	r3, [r0, #4]
   180c4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
   180c8:	0499      	lsls	r1, r3, #18
   180ca:	f100 0604 	add.w	r6, r0, #4
   180ce:	d41a      	bmi.n	18106 <conn_auto_initiate+0x52>
   180d0:	78c3      	ldrb	r3, [r0, #3]
   180d2:	b123      	cbz	r3, 180de <conn_auto_initiate+0x2a>
	     BT_FEAT_LE_PER_INIT_FEAT_XCHG(bt_dev.le.features))) {
   180d4:	4b38      	ldr	r3, [pc, #224]	; (181b8 <conn_auto_initiate+0x104>)
	    ((conn->role == BT_HCI_ROLE_CENTRAL) ||
   180d6:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   180da:	071a      	lsls	r2, r3, #28
   180dc:	d513      	bpl.n	18106 <conn_auto_initiate+0x52>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
   180de:	2102      	movs	r1, #2
   180e0:	f242 0016 	movw	r0, #8214	; 0x2016
   180e4:	f7ff fc18 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   180e8:	4605      	mov	r5, r0
   180ea:	b160      	cbz	r0, 18106 <conn_auto_initiate+0x52>
   180ec:	2102      	movs	r1, #2
   180ee:	3008      	adds	r0, #8
   180f0:	f008 f8b4 	bl	2025c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   180f4:	8823      	ldrh	r3, [r4, #0]
   180f6:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
   180f8:	4629      	mov	r1, r5
   180fa:	f242 0016 	movw	r0, #8214	; 0x2016
   180fe:	f7ff ffa3 	bl	18048 <bt_hci_cmd_send>
}
   18102:	b004      	add	sp, #16
   18104:	bd70      	pop	{r4, r5, r6, pc}
   18106:	f3bf 8f5b 	dmb	ish
   1810a:	6863      	ldr	r3, [r4, #4]
   1810c:	4d2a      	ldr	r5, [pc, #168]	; (181b8 <conn_auto_initiate+0x104>)
   1810e:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   18112:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   18116:	f3c3 3100 	ubfx	r1, r3, #12, #1
   1811a:	d125      	bne.n	18168 <conn_auto_initiate+0xb4>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
   1811c:	f895 30d1 	ldrb.w	r3, [r5, #209]	; 0xd1
   18120:	07db      	lsls	r3, r3, #31
   18122:	d521      	bpl.n	18168 <conn_auto_initiate+0xb4>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
   18124:	2302      	movs	r3, #2
   18126:	9100      	str	r1, [sp, #0]
   18128:	461a      	mov	r2, r3
   1812a:	4620      	mov	r0, r4
   1812c:	f012 fc85 	bl	2aa3a <bt_le_set_phy>
		if (!err) {
   18130:	4601      	mov	r1, r0
   18132:	b960      	cbnz	r0, 1814e <conn_auto_initiate+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18134:	f3bf 8f5b 	dmb	ish
   18138:	e856 3f00 	ldrex	r3, [r6]
   1813c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   18140:	e846 3200 	strex	r2, r3, [r6]
   18144:	2a00      	cmp	r2, #0
   18146:	d1f7      	bne.n	18138 <conn_auto_initiate+0x84>
   18148:	f3bf 8f5b 	dmb	ish
			return;
   1814c:	e7d9      	b.n	18102 <conn_auto_initiate+0x4e>
		BT_ERR("Failed to set LE PHY (%d)", err);
   1814e:	4a1b      	ldr	r2, [pc, #108]	; (181bc <conn_auto_initiate+0x108>)
   18150:	6813      	ldr	r3, [r2, #0]
   18152:	0758      	lsls	r0, r3, #29
   18154:	d008      	beq.n	18168 <conn_auto_initiate+0xb4>
   18156:	4b1a      	ldr	r3, [pc, #104]	; (181c0 <conn_auto_initiate+0x10c>)
   18158:	481a      	ldr	r0, [pc, #104]	; (181c4 <conn_auto_initiate+0x110>)
   1815a:	1ad2      	subs	r2, r2, r3
   1815c:	0892      	lsrs	r2, r2, #2
   1815e:	0192      	lsls	r2, r2, #6
   18160:	f042 0201 	orr.w	r2, r2, #1
   18164:	f011 f8c8 	bl	292f8 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
   18168:	f895 30d0 	ldrb.w	r3, [r5, #208]	; 0xd0
   1816c:	0699      	lsls	r1, r3, #26
   1816e:	d5c8      	bpl.n	18102 <conn_auto_initiate+0x4e>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
   18170:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   18174:	689b      	ldr	r3, [r3, #8]
   18176:	079a      	lsls	r2, r3, #30
   18178:	d5c3      	bpl.n	18102 <conn_auto_initiate+0x4e>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
   1817a:	f10d 010e 	add.w	r1, sp, #14
   1817e:	a803      	add	r0, sp, #12
   18180:	f7ff fc8e 	bl	17aa0 <hci_le_read_max_data_len>
			if (!err) {
   18184:	2800      	cmp	r0, #0
   18186:	d1bc      	bne.n	18102 <conn_auto_initiate+0x4e>
				err = bt_le_set_data_len(conn,
   18188:	f8bd 100c 	ldrh.w	r1, [sp, #12]
   1818c:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   18190:	4620      	mov	r0, r4
   18192:	f012 fc35 	bl	2aa00 <bt_le_set_data_len>
				if (err) {
   18196:	4601      	mov	r1, r0
   18198:	2800      	cmp	r0, #0
   1819a:	d0b2      	beq.n	18102 <conn_auto_initiate+0x4e>
					BT_ERR("Failed to set data len (%d)", err);
   1819c:	4a07      	ldr	r2, [pc, #28]	; (181bc <conn_auto_initiate+0x108>)
   1819e:	6813      	ldr	r3, [r2, #0]
   181a0:	075b      	lsls	r3, r3, #29
   181a2:	d0ae      	beq.n	18102 <conn_auto_initiate+0x4e>
   181a4:	4b06      	ldr	r3, [pc, #24]	; (181c0 <conn_auto_initiate+0x10c>)
   181a6:	4808      	ldr	r0, [pc, #32]	; (181c8 <conn_auto_initiate+0x114>)
   181a8:	1ad2      	subs	r2, r2, r3
   181aa:	0892      	lsrs	r2, r2, #2
   181ac:	0192      	lsls	r2, r2, #6
   181ae:	f042 0201 	orr.w	r2, r2, #1
   181b2:	f011 f8a1 	bl	292f8 <log_1>
		}
   181b6:	e7a4      	b.n	18102 <conn_auto_initiate+0x4e>
   181b8:	200002a8 	.word	0x200002a8
   181bc:	20000750 	.word	0x20000750
   181c0:	20000740 	.word	0x20000740
   181c4:	0003129c 	.word	0x0003129c
   181c8:	000312b6 	.word	0x000312b6

000181cc <bt_hci_le_enh_conn_complete>:
{
   181cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   181d0:	f8b0 9001 	ldrh.w	r9, [r0, #1]
		if (disconnected_handles[i] == handle) {
   181d4:	4a7a      	ldr	r2, [pc, #488]	; (183c0 <bt_hci_le_enh_conn_complete+0x1f4>)
	if (evt->status) {
   181d6:	7804      	ldrb	r4, [r0, #0]
		if (disconnected_handles[i] == handle) {
   181d8:	8811      	ldrh	r1, [r2, #0]
	handle |= ~BT_ACL_HANDLE_MASK;
   181da:	ea6f 5309 	mvn.w	r3, r9, lsl #20
   181de:	ea6f 5313 	mvn.w	r3, r3, lsr #20
		if (disconnected_handles[i] == handle) {
   181e2:	b29b      	uxth	r3, r3
   181e4:	4299      	cmp	r1, r3
   181e6:	f04f 0800 	mov.w	r8, #0
			disconnected_handles[i] = 0;
   181ea:	bf08      	it	eq
   181ec:	f8a2 8000 	strheq.w	r8, [r2]
{
   181f0:	b085      	sub	sp, #20
   181f2:	4605      	mov	r5, r0
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   181f4:	fa1f f689 	uxth.w	r6, r9
			return true;
   181f8:	bf08      	it	eq
   181fa:	f04f 0801 	moveq.w	r8, #1
	if (evt->status) {
   181fe:	2c00      	cmp	r4, #0
   18200:	d03e      	beq.n	18280 <bt_hci_le_enh_conn_complete+0xb4>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   18202:	2c02      	cmp	r4, #2
   18204:	d12c      	bne.n	18260 <bt_hci_le_enh_conn_complete+0x94>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   18206:	2100      	movs	r1, #0
   18208:	2206      	movs	r2, #6
   1820a:	4608      	mov	r0, r1
   1820c:	f001 ffac 	bl	1a168 <bt_conn_lookup_state_le>
	if (!conn) {
   18210:	4605      	mov	r5, r0
   18212:	b990      	cbnz	r0, 1823a <bt_hci_le_enh_conn_complete+0x6e>
		BT_ERR("No pending central connection");
   18214:	496b      	ldr	r1, [pc, #428]	; (183c4 <bt_hci_le_enh_conn_complete+0x1f8>)
   18216:	680b      	ldr	r3, [r1, #0]
   18218:	0758      	lsls	r0, r3, #29
   1821a:	d008      	beq.n	1822e <bt_hci_le_enh_conn_complete+0x62>
   1821c:	4b6a      	ldr	r3, [pc, #424]	; (183c8 <bt_hci_le_enh_conn_complete+0x1fc>)
   1821e:	486b      	ldr	r0, [pc, #428]	; (183cc <bt_hci_le_enh_conn_complete+0x200>)
   18220:	1ac9      	subs	r1, r1, r3
   18222:	0889      	lsrs	r1, r1, #2
   18224:	0189      	lsls	r1, r1, #6
   18226:	f041 0101 	orr.w	r1, r1, #1
   1822a:	f011 f858 	bl	292de <log_0>
			bt_le_scan_update(false);
   1822e:	2000      	movs	r0, #0
   18230:	f001 f80c 	bl	1924c <bt_le_scan_update>
}
   18234:	b005      	add	sp, #20
   18236:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1823a:	2100      	movs	r1, #0
	conn->err = BT_HCI_ERR_UNKNOWN_CONN_ID;
   1823c:	7244      	strb	r4, [r0, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1823e:	f001 fcef 	bl	19c20 <bt_conn_set_state>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18242:	f3bf 8f5b 	dmb	ish
   18246:	686b      	ldr	r3, [r5, #4]
   18248:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
   1824c:	07d9      	lsls	r1, r3, #31
   1824e:	d503      	bpl.n	18258 <bt_hci_le_enh_conn_complete+0x8c>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   18250:	4621      	mov	r1, r4
   18252:	4628      	mov	r0, r5
   18254:	f001 fce4 	bl	19c20 <bt_conn_set_state>
	bt_conn_unref(conn);
   18258:	4628      	mov	r0, r5
   1825a:	f001 fcab 	bl	19bb4 <bt_conn_unref>
   1825e:	e7e6      	b.n	1822e <bt_hci_le_enh_conn_complete+0x62>
		BT_WARN("Unexpected status 0x%02x", evt->status);
   18260:	4a58      	ldr	r2, [pc, #352]	; (183c4 <bt_hci_le_enh_conn_complete+0x1f8>)
   18262:	6813      	ldr	r3, [r2, #0]
   18264:	f013 0f06 	tst.w	r3, #6
   18268:	d0e4      	beq.n	18234 <bt_hci_le_enh_conn_complete+0x68>
   1826a:	4b57      	ldr	r3, [pc, #348]	; (183c8 <bt_hci_le_enh_conn_complete+0x1fc>)
   1826c:	4858      	ldr	r0, [pc, #352]	; (183d0 <bt_hci_le_enh_conn_complete+0x204>)
   1826e:	1ad2      	subs	r2, r2, r3
   18270:	0892      	lsrs	r2, r2, #2
   18272:	0192      	lsls	r2, r2, #6
   18274:	f042 0202 	orr.w	r2, r2, #2
   18278:	4621      	mov	r1, r4
   1827a:	f011 f83d 	bl	292f8 <log_1>
   1827e:	e7d9      	b.n	18234 <bt_hci_le_enh_conn_complete+0x68>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
   18280:	7903      	ldrb	r3, [r0, #4]
   18282:	3b02      	subs	r3, #2
   18284:	2b01      	cmp	r3, #1
   18286:	f100 0704 	add.w	r7, r0, #4
   1828a:	d841      	bhi.n	18310 <bt_hci_le_enh_conn_complete+0x144>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
   1828c:	4639      	mov	r1, r7
   1828e:	a802      	add	r0, sp, #8
   18290:	f012 fb51 	bl	2a936 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   18294:	f89d 3008 	ldrb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   18298:	f105 0111 	add.w	r1, r5, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   1829c:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   1829e:	f10d 0001 	add.w	r0, sp, #1
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   182a2:	f88d 3008 	strb.w	r3, [sp, #8]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
   182a6:	f012 fb4d 	bl	2a944 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
   182aa:	2301      	movs	r3, #1
   182ac:	f88d 3000 	strb.w	r3, [sp]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && role == BT_HCI_ROLE_CENTRAL) {
   182b0:	78e8      	ldrb	r0, [r5, #3]
   182b2:	b9a0      	cbnz	r0, 182de <bt_hci_le_enh_conn_complete+0x112>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   182b4:	2206      	movs	r2, #6
   182b6:	a902      	add	r1, sp, #8
   182b8:	f001 ff56 	bl	1a168 <bt_conn_lookup_state_le>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   182bc:	78eb      	ldrb	r3, [r5, #3]
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, peer_addr,
   182be:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   182c0:	b963      	cbnz	r3, 182dc <bt_hci_le_enh_conn_complete+0x110>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   182c2:	f3bf 8f5b 	dmb	ish
   182c6:	4b43      	ldr	r3, [pc, #268]	; (183d4 <bt_hci_le_enh_conn_complete+0x208>)
   182c8:	e853 2f00 	ldrex	r2, [r3]
   182cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   182d0:	e843 2100 	strex	r1, r2, [r3]
   182d4:	2900      	cmp	r1, #0
   182d6:	d1f7      	bne.n	182c8 <bt_hci_le_enh_conn_complete+0xfc>
   182d8:	f3bf 8f5b 	dmb	ish
	if (!conn) {
   182dc:	bb5c      	cbnz	r4, 18336 <bt_hci_le_enh_conn_complete+0x16a>
		BT_ERR("No pending conn for peer %s",
   182de:	4b39      	ldr	r3, [pc, #228]	; (183c4 <bt_hci_le_enh_conn_complete+0x1f8>)
   182e0:	681a      	ldr	r2, [r3, #0]
   182e2:	0752      	lsls	r2, r2, #29
   182e4:	d00f      	beq.n	18306 <bt_hci_le_enh_conn_complete+0x13a>
   182e6:	4c38      	ldr	r4, [pc, #224]	; (183c8 <bt_hci_le_enh_conn_complete+0x1fc>)
   182e8:	4638      	mov	r0, r7
   182ea:	1b1c      	subs	r4, r3, r4
   182ec:	f7fe fdea 	bl	16ec4 <bt_addr_le_str_real>
   182f0:	f7f9 fa1e 	bl	11730 <z_log_strdup>
   182f4:	08a4      	lsrs	r4, r4, #2
   182f6:	01a4      	lsls	r4, r4, #6
   182f8:	f044 0401 	orr.w	r4, r4, #1
   182fc:	4601      	mov	r1, r0
   182fe:	4622      	mov	r2, r4
   18300:	4835      	ldr	r0, [pc, #212]	; (183d8 <bt_hci_le_enh_conn_complete+0x20c>)
   18302:	f010 fff9 	bl	292f8 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
   18306:	211f      	movs	r1, #31
   18308:	4630      	mov	r0, r6
   1830a:	f012 fb22 	bl	2a952 <bt_hci_disconnect>
		return;
   1830e:	e791      	b.n	18234 <bt_hci_le_enh_conn_complete+0x68>
		uint8_t id = evt->role == BT_HCI_ROLE_PERIPHERAL ? bt_dev.adv_conn_id :
   18310:	78c3      	ldrb	r3, [r0, #3]
   18312:	2b01      	cmp	r3, #1
   18314:	bf04      	itt	eq
   18316:	4b31      	ldreq	r3, [pc, #196]	; (183dc <bt_hci_le_enh_conn_complete+0x210>)
   18318:	f893 4067 	ldrbeq.w	r4, [r3, #103]	; 0x67
		bt_addr_le_copy(&id_addr,
   1831c:	4639      	mov	r1, r7
   1831e:	4620      	mov	r0, r4
   18320:	f012 fbfc 	bl	2ab1c <bt_lookup_id_addr>
   18324:	4601      	mov	r1, r0
   18326:	a802      	add	r0, sp, #8
   18328:	f012 fb05 	bl	2a936 <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
   1832c:	4639      	mov	r1, r7
   1832e:	4668      	mov	r0, sp
   18330:	f012 fb01 	bl	2a936 <bt_addr_le_copy>
   18334:	e7bc      	b.n	182b0 <bt_hci_le_enh_conn_complete+0xe4>
	conn->handle = handle;
   18336:	4620      	mov	r0, r4
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   18338:	a902      	add	r1, sp, #8
	conn->handle = handle;
   1833a:	f820 9b90 	strh.w	r9, [r0], #144
	bt_addr_le_copy(&conn->le.dst, &id_addr);
   1833e:	f012 fafa 	bl	2a936 <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
   18342:	7e2a      	ldrb	r2, [r5, #24]
   18344:	7deb      	ldrb	r3, [r5, #23]
   18346:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1834a:	f8a4 30a6 	strh.w	r3, [r4, #166]	; 0xa6
	conn->le.latency = sys_le16_to_cpu(evt->latency);
   1834e:	7eaa      	ldrb	r2, [r5, #26]
   18350:	7e6b      	ldrb	r3, [r5, #25]
   18352:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18356:	f8a4 30ac 	strh.w	r3, [r4, #172]	; 0xac
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1835a:	7f2a      	ldrb	r2, [r5, #28]
   1835c:	7eeb      	ldrb	r3, [r5, #27]
   1835e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   18362:	f8a4 30ae 	strh.w	r3, [r4, #174]	; 0xae
	conn->role = evt->role;
   18366:	78eb      	ldrb	r3, [r5, #3]
   18368:	70e3      	strb	r3, [r4, #3]
	conn->err = 0U;
   1836a:	2200      	movs	r2, #0
   1836c:	7262      	strb	r2, [r4, #9]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1836e:	b96b      	cbnz	r3, 1838c <bt_hci_le_enh_conn_complete+0x1c0>
		bt_addr_le_copy(&conn->le.resp_addr, &peer_addr);
   18370:	4669      	mov	r1, sp
   18372:	f104 009e 	add.w	r0, r4, #158	; 0x9e
   18376:	f012 fade 	bl	2a936 <bt_addr_le_copy>
					&bt_dev.id_addr[conn->id]);
   1837a:	7a21      	ldrb	r1, [r4, #8]
			bt_addr_le_copy(&conn->le.init_addr,
   1837c:	4b17      	ldr	r3, [pc, #92]	; (183dc <bt_hci_le_enh_conn_complete+0x210>)
					&bt_dev.id_addr[conn->id]);
   1837e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
			bt_addr_le_copy(&conn->le.init_addr,
   18382:	4419      	add	r1, r3
   18384:	f104 0097 	add.w	r0, r4, #151	; 0x97
   18388:	f012 fad5 	bl	2a936 <bt_addr_le_copy>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
   1838c:	2107      	movs	r1, #7
   1838e:	4620      	mov	r0, r4
   18390:	f001 fc46 	bl	19c20 <bt_conn_set_state>
	if (is_disconnected) {
   18394:	f1b8 0f00 	cmp.w	r8, #0
   18398:	d003      	beq.n	183a2 <bt_hci_le_enh_conn_complete+0x1d6>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1839a:	2101      	movs	r1, #1
   1839c:	4620      	mov	r0, r4
   1839e:	f001 fc3f 	bl	19c20 <bt_conn_set_state>
	bt_conn_connected(conn);
   183a2:	4620      	mov	r0, r4
   183a4:	f012 fc5f 	bl	2ac66 <bt_conn_connected>
	conn_auto_initiate(conn);
   183a8:	4620      	mov	r0, r4
   183aa:	f7ff fe83 	bl	180b4 <conn_auto_initiate>
	bt_conn_unref(conn);
   183ae:	4620      	mov	r0, r4
   183b0:	f001 fc00 	bl	19bb4 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   183b4:	78e3      	ldrb	r3, [r4, #3]
   183b6:	2b00      	cmp	r3, #0
   183b8:	f47f af3c 	bne.w	18234 <bt_hci_le_enh_conn_complete+0x68>
   183bc:	e737      	b.n	1822e <bt_hci_le_enh_conn_complete+0x62>
   183be:	bf00      	nop
   183c0:	20002a24 	.word	0x20002a24
   183c4:	20000750 	.word	0x20000750
   183c8:	20000740 	.word	0x20000740
   183cc:	000312d2 	.word	0x000312d2
   183d0:	000312f0 	.word	0x000312f0
   183d4:	20000374 	.word	0x20000374
   183d8:	00031309 	.word	0x00031309
   183dc:	200002a8 	.word	0x200002a8

000183e0 <le_phy_update_complete>:
{
   183e0:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   183e2:	6883      	ldr	r3, [r0, #8]
   183e4:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
   183e8:	4628      	mov	r0, r5
   183ea:	f001 fc0d 	bl	19c08 <bt_conn_lookup_handle>
	if (!conn) {
   183ee:	4604      	mov	r4, r0
   183f0:	b978      	cbnz	r0, 18412 <le_phy_update_complete+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   183f2:	4a19      	ldr	r2, [pc, #100]	; (18458 <le_phy_update_complete+0x78>)
   183f4:	6813      	ldr	r3, [r2, #0]
   183f6:	0759      	lsls	r1, r3, #29
   183f8:	d02d      	beq.n	18456 <le_phy_update_complete+0x76>
   183fa:	4b18      	ldr	r3, [pc, #96]	; (1845c <le_phy_update_complete+0x7c>)
   183fc:	4818      	ldr	r0, [pc, #96]	; (18460 <le_phy_update_complete+0x80>)
   183fe:	1ad2      	subs	r2, r2, r3
   18400:	0892      	lsrs	r2, r2, #2
   18402:	0192      	lsls	r2, r2, #6
   18404:	4629      	mov	r1, r5
   18406:	f042 0201 	orr.w	r2, r2, #1
}
   1840a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1840e:	f010 bf73 	b.w	292f8 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   18412:	1d03      	adds	r3, r0, #4
   18414:	f3bf 8f5b 	dmb	ish
   18418:	e853 2f00 	ldrex	r2, [r3]
   1841c:	f022 0180 	bic.w	r1, r2, #128	; 0x80
   18420:	e843 1500 	strex	r5, r1, [r3]
   18424:	2d00      	cmp	r5, #0
   18426:	d1f7      	bne.n	18418 <le_phy_update_complete+0x38>
   18428:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1842c:	0612      	lsls	r2, r2, #24
   1842e:	d50d      	bpl.n	1844c <le_phy_update_complete+0x6c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   18430:	f3bf 8f5b 	dmb	ish
   18434:	e853 2f00 	ldrex	r2, [r3]
   18438:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
   1843c:	e843 2100 	strex	r1, r2, [r3]
   18440:	2900      	cmp	r1, #0
   18442:	d1f7      	bne.n	18434 <le_phy_update_complete+0x54>
   18444:	f3bf 8f5b 	dmb	ish
		conn_auto_initiate(conn);
   18448:	f7ff fe34 	bl	180b4 <conn_auto_initiate>
	bt_conn_unref(conn);
   1844c:	4620      	mov	r0, r4
}
   1844e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   18452:	f001 bbaf 	b.w	19bb4 <bt_conn_unref>
}
   18456:	bd38      	pop	{r3, r4, r5, pc}
   18458:	20000750 	.word	0x20000750
   1845c:	20000740 	.word	0x20000740
   18460:	00030f1d 	.word	0x00030f1d

00018464 <le_remote_feat_complete>:
{
   18464:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   18466:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   18468:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
   1846c:	4630      	mov	r0, r6
   1846e:	f001 fbcb 	bl	19c08 <bt_conn_lookup_handle>
	if (!conn) {
   18472:	4604      	mov	r4, r0
   18474:	b978      	cbnz	r0, 18496 <le_remote_feat_complete+0x32>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18476:	4a17      	ldr	r2, [pc, #92]	; (184d4 <le_remote_feat_complete+0x70>)
   18478:	6813      	ldr	r3, [r2, #0]
   1847a:	075b      	lsls	r3, r3, #29
   1847c:	d029      	beq.n	184d2 <le_remote_feat_complete+0x6e>
   1847e:	4b16      	ldr	r3, [pc, #88]	; (184d8 <le_remote_feat_complete+0x74>)
   18480:	4816      	ldr	r0, [pc, #88]	; (184dc <le_remote_feat_complete+0x78>)
   18482:	1ad2      	subs	r2, r2, r3
   18484:	0892      	lsrs	r2, r2, #2
   18486:	0192      	lsls	r2, r2, #6
   18488:	4631      	mov	r1, r6
   1848a:	f042 0201 	orr.w	r2, r2, #1
}
   1848e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
   18492:	f010 bf31 	b.w	292f8 <log_1>
	if (!evt->status) {
   18496:	782b      	ldrb	r3, [r5, #0]
   18498:	b933      	cbnz	r3, 184a8 <le_remote_feat_complete+0x44>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1849a:	f855 3f03 	ldr.w	r3, [r5, #3]!
   1849e:	f8c0 30b4 	str.w	r3, [r0, #180]	; 0xb4
   184a2:	686b      	ldr	r3, [r5, #4]
   184a4:	f8c0 30b8 	str.w	r3, [r0, #184]	; 0xb8
   184a8:	1d23      	adds	r3, r4, #4
   184aa:	f3bf 8f5b 	dmb	ish
   184ae:	e853 2f00 	ldrex	r2, [r3]
   184b2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   184b6:	e843 2100 	strex	r1, r2, [r3]
   184ba:	2900      	cmp	r1, #0
   184bc:	d1f7      	bne.n	184ae <le_remote_feat_complete+0x4a>
   184be:	f3bf 8f5b 	dmb	ish
	conn_auto_initiate(conn);
   184c2:	4620      	mov	r0, r4
   184c4:	f7ff fdf6 	bl	180b4 <conn_auto_initiate>
	bt_conn_unref(conn);
   184c8:	4620      	mov	r0, r4
}
   184ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   184ce:	f001 bb71 	b.w	19bb4 <bt_conn_unref>
}
   184d2:	bd70      	pop	{r4, r5, r6, pc}
   184d4:	20000750 	.word	0x20000750
   184d8:	20000740 	.word	0x20000740
   184dc:	00030f1d 	.word	0x00030f1d

000184e0 <le_conn_param_neg_reply>:
{
   184e0:	b570      	push	{r4, r5, r6, lr}
   184e2:	4606      	mov	r6, r0
   184e4:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   184e6:	f242 0021 	movw	r0, #8225	; 0x2021
   184ea:	2103      	movs	r1, #3
   184ec:	f7ff fa14 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   184f0:	4604      	mov	r4, r0
   184f2:	b970      	cbnz	r0, 18512 <le_conn_param_neg_reply+0x32>
		BT_ERR("Unable to allocate buffer");
   184f4:	490e      	ldr	r1, [pc, #56]	; (18530 <le_conn_param_neg_reply+0x50>)
   184f6:	680b      	ldr	r3, [r1, #0]
   184f8:	075b      	lsls	r3, r3, #29
   184fa:	d017      	beq.n	1852c <le_conn_param_neg_reply+0x4c>
   184fc:	4b0d      	ldr	r3, [pc, #52]	; (18534 <le_conn_param_neg_reply+0x54>)
   184fe:	480e      	ldr	r0, [pc, #56]	; (18538 <le_conn_param_neg_reply+0x58>)
   18500:	1ac9      	subs	r1, r1, r3
   18502:	0889      	lsrs	r1, r1, #2
   18504:	0189      	lsls	r1, r1, #6
}
   18506:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
   1850a:	f041 0101 	orr.w	r1, r1, #1
   1850e:	f010 bee6 	b.w	292de <log_0>
   18512:	2103      	movs	r1, #3
   18514:	3008      	adds	r0, #8
   18516:	f007 fea1 	bl	2025c <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1851a:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1851c:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1851e:	4621      	mov	r1, r4
   18520:	f242 0021 	movw	r0, #8225	; 0x2021
}
   18524:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   18528:	f7ff bd8e 	b.w	18048 <bt_hci_cmd_send>
}
   1852c:	bd70      	pop	{r4, r5, r6, pc}
   1852e:	bf00      	nop
   18530:	20000750 	.word	0x20000750
   18534:	20000740 	.word	0x20000740
   18538:	00031325 	.word	0x00031325

0001853c <le_conn_param_req>:
{
   1853c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1853e:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   18540:	78d9      	ldrb	r1, [r3, #3]
   18542:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   18544:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   18546:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1854a:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1854e:	7959      	ldrb	r1, [r3, #5]
   18550:	791a      	ldrb	r2, [r3, #4]
   18552:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18556:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1855a:	799a      	ldrb	r2, [r3, #6]
   1855c:	79d9      	ldrb	r1, [r3, #7]
   1855e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   18562:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18566:	7a1a      	ldrb	r2, [r3, #8]
   18568:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1856a:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1856c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   18570:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   18572:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   18576:	f001 fb47 	bl	19c08 <bt_conn_lookup_handle>
	if (!conn) {
   1857a:	4606      	mov	r6, r0
   1857c:	b998      	cbnz	r0, 185a6 <le_conn_param_req+0x6a>
		BT_ERR("Unable to lookup conn for handle %u", handle);
   1857e:	4a22      	ldr	r2, [pc, #136]	; (18608 <le_conn_param_req+0xcc>)
   18580:	6813      	ldr	r3, [r2, #0]
   18582:	075b      	lsls	r3, r3, #29
   18584:	d009      	beq.n	1859a <le_conn_param_req+0x5e>
   18586:	4b21      	ldr	r3, [pc, #132]	; (1860c <le_conn_param_req+0xd0>)
   18588:	4821      	ldr	r0, [pc, #132]	; (18610 <le_conn_param_req+0xd4>)
   1858a:	1ad2      	subs	r2, r2, r3
   1858c:	0892      	lsrs	r2, r2, #2
   1858e:	0192      	lsls	r2, r2, #6
   18590:	f042 0201 	orr.w	r2, r2, #1
   18594:	4621      	mov	r1, r4
   18596:	f010 feaf 	bl	292f8 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1859a:	2102      	movs	r1, #2
   1859c:	4620      	mov	r0, r4
   1859e:	f7ff ff9f 	bl	184e0 <le_conn_param_neg_reply>
}
   185a2:	b003      	add	sp, #12
   185a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   185a6:	4669      	mov	r1, sp
   185a8:	f001 fd1e 	bl	19fe8 <le_param_req>
   185ac:	b938      	cbnz	r0, 185be <le_conn_param_req+0x82>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   185ae:	211e      	movs	r1, #30
   185b0:	4620      	mov	r0, r4
   185b2:	f7ff ff95 	bl	184e0 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   185b6:	4630      	mov	r0, r6
   185b8:	f001 fafc 	bl	19bb4 <bt_conn_unref>
   185bc:	e7f1      	b.n	185a2 <le_conn_param_req+0x66>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   185be:	210e      	movs	r1, #14
   185c0:	f242 0020 	movw	r0, #8224	; 0x2020
   185c4:	f7ff f9a8 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   185c8:	4605      	mov	r5, r0
   185ca:	2800      	cmp	r0, #0
   185cc:	d0f3      	beq.n	185b6 <le_conn_param_req+0x7a>
   185ce:	210e      	movs	r1, #14
   185d0:	3008      	adds	r0, #8
   185d2:	f007 fe43 	bl	2025c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   185d6:	220e      	movs	r2, #14
   185d8:	4604      	mov	r4, r0
   185da:	2100      	movs	r1, #0
   185dc:	f014 fb33 	bl	2cc46 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   185e0:	f8bd 3000 	ldrh.w	r3, [sp]
   185e4:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   185e6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   185ea:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   185ec:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   185f0:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   185f2:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   185f6:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   185f8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   185fa:	4629      	mov	r1, r5
   185fc:	f242 0020 	movw	r0, #8224	; 0x2020
   18600:	f7ff fd22 	bl	18048 <bt_hci_cmd_send>
   18604:	e7d7      	b.n	185b6 <le_conn_param_req+0x7a>
   18606:	bf00      	nop
   18608:	20000750 	.word	0x20000750
   1860c:	20000740 	.word	0x20000740
   18610:	00030f1d 	.word	0x00030f1d

00018614 <hci_tx_thread>:
{
   18614:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18618:	4f57      	ldr	r7, [pc, #348]	; (18778 <hci_tx_thread+0x164>)
   1861a:	4d58      	ldr	r5, [pc, #352]	; (1877c <hci_tx_thread+0x168>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1861c:	f8df a164 	ldr.w	sl, [pc, #356]	; 18784 <hci_tx_thread+0x170>
		BT_ASSERT(err == 0);
   18620:	f8df b18c 	ldr.w	fp, [pc, #396]	; 187b0 <hci_tx_thread+0x19c>
   18624:	1b7d      	subs	r5, r7, r5
   18626:	08ad      	lsrs	r5, r5, #2
		events[0].state = K_POLL_STATE_NOT_READY;
   18628:	f8da 300c 	ldr.w	r3, [sl, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   1862c:	4854      	ldr	r0, [pc, #336]	; (18780 <hci_tx_thread+0x16c>)
		events[0].state = K_POLL_STATE_NOT_READY;
   1862e:	f36f 3352 	bfc	r3, #13, #6
   18632:	f8ca 300c 	str.w	r3, [sl, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
   18636:	f001 fa7f 	bl	19b38 <bt_conn_prepare_events>
   1863a:	f100 0801 	add.w	r8, r0, #1
	return z_impl_k_poll(events, num_events, timeout);
   1863e:	4851      	ldr	r0, [pc, #324]	; (18784 <hci_tx_thread+0x170>)
   18640:	f04f 32ff 	mov.w	r2, #4294967295
   18644:	f04f 33ff 	mov.w	r3, #4294967295
   18648:	4641      	mov	r1, r8
   1864a:	f00f fb75 	bl	27d38 <z_impl_k_poll>
		BT_ASSERT(err == 0);
   1864e:	b160      	cbz	r0, 1866a <hci_tx_thread+0x56>
   18650:	494d      	ldr	r1, [pc, #308]	; (18788 <hci_tx_thread+0x174>)
   18652:	484e      	ldr	r0, [pc, #312]	; (1878c <hci_tx_thread+0x178>)
   18654:	f640 1393 	movw	r3, #2451	; 0x993
   18658:	465a      	mov	r2, fp
   1865a:	f010 fa9e 	bl	28b9a <printk>
   1865e:	4040      	eors	r0, r0
   18660:	f380 8811 	msr	BASEPRI, r0
   18664:	f04f 0003 	mov.w	r0, #3
   18668:	df02      	svc	2
{
   1866a:	f8df 9118 	ldr.w	r9, [pc, #280]	; 18784 <hci_tx_thread+0x170>
	return z_impl_k_sem_take(sem, timeout);
   1866e:	4e48      	ldr	r6, [pc, #288]	; (18790 <hci_tx_thread+0x17c>)
	for (; count; ev++, count--) {
   18670:	f1b8 0f00 	cmp.w	r8, #0
   18674:	d102      	bne.n	1867c <hci_tx_thread+0x68>
	z_impl_k_yield();
   18676:	f00e f89b 	bl	267b0 <z_impl_k_yield>
	while (1) {
   1867a:	e7d5      	b.n	18628 <hci_tx_thread+0x14>
		switch (ev->state) {
   1867c:	f8d9 100c 	ldr.w	r1, [r9, #12]
   18680:	f3c1 3145 	ubfx	r1, r1, #13, #6
   18684:	2901      	cmp	r1, #1
   18686:	d95f      	bls.n	18748 <hci_tx_thread+0x134>
   18688:	2904      	cmp	r1, #4
   1868a:	d16a      	bne.n	18762 <hci_tx_thread+0x14e>
			if (ev->tag == BT_EVENT_CMD_TX) {
   1868c:	f899 300c 	ldrb.w	r3, [r9, #12]
   18690:	2b00      	cmp	r3, #0
   18692:	d15e      	bne.n	18752 <hci_tx_thread+0x13e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
   18694:	483f      	ldr	r0, [pc, #252]	; (18794 <hci_tx_thread+0x180>)
   18696:	2200      	movs	r2, #0
   18698:	2300      	movs	r3, #0
   1869a:	f007 fc1d 	bl	1fed8 <net_buf_get>
	BT_ASSERT(buf);
   1869e:	4604      	mov	r4, r0
   186a0:	b960      	cbnz	r0, 186bc <hci_tx_thread+0xa8>
   186a2:	493d      	ldr	r1, [pc, #244]	; (18798 <hci_tx_thread+0x184>)
   186a4:	4839      	ldr	r0, [pc, #228]	; (1878c <hci_tx_thread+0x178>)
   186a6:	f640 132a 	movw	r3, #2346	; 0x92a
   186aa:	465a      	mov	r2, fp
   186ac:	f010 fa75 	bl	28b9a <printk>
   186b0:	4040      	eors	r0, r0
   186b2:	f380 8811 	msr	BASEPRI, r0
   186b6:	f04f 0003 	mov.w	r0, #3
   186ba:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
   186bc:	f04f 33ff 	mov.w	r3, #4294967295
   186c0:	4836      	ldr	r0, [pc, #216]	; (1879c <hci_tx_thread+0x188>)
   186c2:	f04f 32ff 	mov.w	r2, #4294967295
   186c6:	f00c fb51 	bl	24d6c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
   186ca:	f8d6 3130 	ldr.w	r3, [r6, #304]	; 0x130
   186ce:	b17b      	cbz	r3, 186f0 <hci_tx_thread+0xdc>
		BT_ERR("Uncleared pending sent_cmd");
   186d0:	683b      	ldr	r3, [r7, #0]
   186d2:	075a      	lsls	r2, r3, #29
   186d4:	d005      	beq.n	186e2 <hci_tx_thread+0xce>
   186d6:	01a9      	lsls	r1, r5, #6
   186d8:	4831      	ldr	r0, [pc, #196]	; (187a0 <hci_tx_thread+0x18c>)
   186da:	f041 0101 	orr.w	r1, r1, #1
   186de:	f010 fdfe 	bl	292de <log_0>
		net_buf_unref(bt_dev.sent_cmd);
   186e2:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   186e6:	f007 fc89 	bl	1fffc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   186ea:	2300      	movs	r3, #0
   186ec:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
	bt_dev.sent_cmd = net_buf_ref(buf);
   186f0:	4620      	mov	r0, r4
   186f2:	f007 fcc9 	bl	20088 <net_buf_ref>
   186f6:	f8c6 0130 	str.w	r0, [r6, #304]	; 0x130
	err = bt_send(buf);
   186fa:	4620      	mov	r0, r4
   186fc:	f7ff fc9c 	bl	18038 <bt_send>
	if (err) {
   18700:	4601      	mov	r1, r0
   18702:	b308      	cbz	r0, 18748 <hci_tx_thread+0x134>
		BT_ERR("Unable to send to driver (err %d)", err);
   18704:	683b      	ldr	r3, [r7, #0]
   18706:	075b      	lsls	r3, r3, #29
   18708:	d005      	beq.n	18716 <hci_tx_thread+0x102>
   1870a:	01aa      	lsls	r2, r5, #6
   1870c:	4825      	ldr	r0, [pc, #148]	; (187a4 <hci_tx_thread+0x190>)
   1870e:	f042 0201 	orr.w	r2, r2, #1
   18712:	f010 fdf1 	bl	292f8 <log_1>
	z_impl_k_sem_give(sem);
   18716:	4821      	ldr	r0, [pc, #132]	; (1879c <hci_tx_thread+0x188>)
   18718:	f00c fae4 	bl	24ce4 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
   1871c:	4620      	mov	r0, r4
   1871e:	f007 fa73 	bl	1fc08 <net_buf_id>
   18722:	4b21      	ldr	r3, [pc, #132]	; (187a8 <hci_tx_thread+0x194>)
   18724:	220c      	movs	r2, #12
   18726:	fb02 3000 	mla	r0, r2, r0, r3
   1872a:	211f      	movs	r1, #31
   1872c:	8840      	ldrh	r0, [r0, #2]
   1872e:	4622      	mov	r2, r4
   18730:	f7ff f806 	bl	17740 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
   18734:	f8d6 0130 	ldr.w	r0, [r6, #304]	; 0x130
   18738:	f007 fc60 	bl	1fffc <net_buf_unref>
		bt_dev.sent_cmd = NULL;
   1873c:	2300      	movs	r3, #0
		net_buf_unref(buf);
   1873e:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
   18740:	f8c6 3130 	str.w	r3, [r6, #304]	; 0x130
		net_buf_unref(buf);
   18744:	f007 fc5a 	bl	1fffc <net_buf_unref>
	for (; count; ev++, count--) {
   18748:	f109 0914 	add.w	r9, r9, #20
   1874c:	f108 38ff 	add.w	r8, r8, #4294967295
   18750:	e78e      	b.n	18670 <hci_tx_thread+0x5c>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
   18752:	2b01      	cmp	r3, #1
   18754:	d1f8      	bne.n	18748 <hci_tx_thread+0x134>
					conn = CONTAINER_OF(ev->fifo,
   18756:	f8d9 0010 	ldr.w	r0, [r9, #16]
					bt_conn_process_tx(conn);
   1875a:	3838      	subs	r0, #56	; 0x38
   1875c:	f001 ff40 	bl	1a5e0 <bt_conn_process_tx>
   18760:	e7f2      	b.n	18748 <hci_tx_thread+0x134>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
   18762:	683b      	ldr	r3, [r7, #0]
   18764:	f013 0f06 	tst.w	r3, #6
   18768:	d0ee      	beq.n	18748 <hci_tx_thread+0x134>
   1876a:	01aa      	lsls	r2, r5, #6
   1876c:	480f      	ldr	r0, [pc, #60]	; (187ac <hci_tx_thread+0x198>)
   1876e:	f042 0202 	orr.w	r2, r2, #2
   18772:	f010 fdc1 	bl	292f8 <log_1>
   18776:	e7e7      	b.n	18748 <hci_tx_thread+0x134>
   18778:	20000750 	.word	0x20000750
   1877c:	20000740 	.word	0x20000740
   18780:	200004d0 	.word	0x200004d0
   18784:	200004bc 	.word	0x200004bc
   18788:	0002ec6a 	.word	0x0002ec6a
   1878c:	0002e93e 	.word	0x0002e93e
   18790:	200002a8 	.word	0x200002a8
   18794:	200003f8 	.word	0x200003f8
   18798:	00030ef1 	.word	0x00030ef1
   1879c:	200003c0 	.word	0x200003c0
   187a0:	0003133f 	.word	0x0003133f
   187a4:	0003127a 	.word	0x0003127a
   187a8:	20002718 	.word	0x20002718
   187ac:	0003135a 	.word	0x0003135a
   187b0:	00030fcb 	.word	0x00030fcb

000187b4 <hci_event_prio>:
{
   187b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   187b8:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
   187ba:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
   187be:	4630      	mov	r0, r6
   187c0:	f013 fc4e 	bl	2c060 <net_buf_simple_headroom>
	state->len = buf->len;
   187c4:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
   187c8:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
   187cc:	4605      	mov	r5, r0
   187ce:	d80c      	bhi.n	187ea <hci_event_prio+0x36>
   187d0:	4a1c      	ldr	r2, [pc, #112]	; (18844 <hci_event_prio+0x90>)
   187d2:	491d      	ldr	r1, [pc, #116]	; (18848 <hci_event_prio+0x94>)
   187d4:	481d      	ldr	r0, [pc, #116]	; (1884c <hci_event_prio+0x98>)
   187d6:	f640 5327 	movw	r3, #3367	; 0xd27
   187da:	f010 f9de 	bl	28b9a <printk>
   187de:	4040      	eors	r0, r0
   187e0:	f380 8811 	msr	BASEPRI, r0
   187e4:	f04f 0003 	mov.w	r0, #3
   187e8:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
   187ea:	2102      	movs	r1, #2
   187ec:	4630      	mov	r0, r6
   187ee:	f007 fd13 	bl	20218 <net_buf_simple_pull_mem>
   187f2:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   187f4:	7800      	ldrb	r0, [r0, #0]
   187f6:	f012 f88c 	bl	2a912 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   187fa:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
   187fc:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
   187fe:	d40c      	bmi.n	1881a <hci_event_prio+0x66>
   18800:	4a10      	ldr	r2, [pc, #64]	; (18844 <hci_event_prio+0x90>)
   18802:	4913      	ldr	r1, [pc, #76]	; (18850 <hci_event_prio+0x9c>)
   18804:	4811      	ldr	r0, [pc, #68]	; (1884c <hci_event_prio+0x98>)
   18806:	f640 532b 	movw	r3, #3371	; 0xd2b
   1880a:	f010 f9c6 	bl	28b9a <printk>
   1880e:	4040      	eors	r0, r0
   18810:	f380 8811 	msr	BASEPRI, r0
   18814:	f04f 0003 	mov.w	r0, #3
   18818:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
   1881a:	2305      	movs	r3, #5
   1881c:	4a0d      	ldr	r2, [pc, #52]	; (18854 <hci_event_prio+0xa0>)
   1881e:	7838      	ldrb	r0, [r7, #0]
   18820:	4621      	mov	r1, r4
   18822:	f7fe fd63 	bl	172ec <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   18826:	07b3      	lsls	r3, r6, #30
   18828:	d507      	bpl.n	1883a <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
   1882a:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1882c:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
   18830:	fa10 f585 	uxtah	r5, r0, r5
   18834:	60a5      	str	r5, [r4, #8]
}
   18836:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
   1883a:	4620      	mov	r0, r4
}
   1883c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
   18840:	f007 bbdc 	b.w	1fffc <net_buf_unref>
   18844:	00030fcb 	.word	0x00030fcb
   18848:	00030fff 	.word	0x00030fff
   1884c:	0002e93e 	.word	0x0002e93e
   18850:	0003137b 	.word	0x0003137b
   18854:	0002dd2c 	.word	0x0002dd2c

00018858 <bt_recv>:
{
   18858:	b538      	push	{r3, r4, r5, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   1885a:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
   1885c:	2901      	cmp	r1, #1
{
   1885e:	4605      	mov	r5, r0
	switch (bt_buf_get_type(buf)) {
   18860:	d007      	beq.n	18872 <bt_recv+0x1a>
   18862:	2903      	cmp	r1, #3
   18864:	d113      	bne.n	1888e <bt_recv+0x36>
			net_buf_put(&bt_dev.rx_queue, buf);
   18866:	4813      	ldr	r0, [pc, #76]	; (188b4 <bt_recv+0x5c>)
   18868:	4629      	mov	r1, r5
   1886a:	f007 fb93 	bl	1ff94 <net_buf_put>
		return 0;
   1886e:	2000      	movs	r0, #0
   18870:	e00c      	b.n	1888c <bt_recv+0x34>
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   18872:	6883      	ldr	r3, [r0, #8]
   18874:	7818      	ldrb	r0, [r3, #0]
   18876:	f012 f84c 	bl	2a912 <bt_hci_evt_get_flags>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1887a:	07c2      	lsls	r2, r0, #31
		uint8_t evt_flags = bt_hci_evt_get_flags(hdr->evt);
   1887c:	4604      	mov	r4, r0
		if (evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO) {
   1887e:	d502      	bpl.n	18886 <bt_recv+0x2e>
			hci_event_prio(buf);
   18880:	4628      	mov	r0, r5
   18882:	f7ff ff97 	bl	187b4 <hci_event_prio>
		if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
   18886:	f014 0002 	ands.w	r0, r4, #2
   1888a:	d1ec      	bne.n	18866 <bt_recv+0xe>
}
   1888c:	bd38      	pop	{r3, r4, r5, pc}
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
   1888e:	4a0a      	ldr	r2, [pc, #40]	; (188b8 <bt_recv+0x60>)
   18890:	6813      	ldr	r3, [r2, #0]
   18892:	075b      	lsls	r3, r3, #29
   18894:	d008      	beq.n	188a8 <bt_recv+0x50>
   18896:	4b09      	ldr	r3, [pc, #36]	; (188bc <bt_recv+0x64>)
   18898:	4809      	ldr	r0, [pc, #36]	; (188c0 <bt_recv+0x68>)
   1889a:	1ad2      	subs	r2, r2, r3
   1889c:	0892      	lsrs	r2, r2, #2
   1889e:	0192      	lsls	r2, r2, #6
   188a0:	f042 0201 	orr.w	r2, r2, #1
   188a4:	f010 fd28 	bl	292f8 <log_1>
		net_buf_unref(buf);
   188a8:	4628      	mov	r0, r5
   188aa:	f007 fba7 	bl	1fffc <net_buf_unref>
		return -EINVAL;
   188ae:	f06f 0015 	mvn.w	r0, #21
   188b2:	e7eb      	b.n	1888c <bt_recv+0x34>
   188b4:	200003dc 	.word	0x200003dc
   188b8:	20000750 	.word	0x20000750
   188bc:	20000740 	.word	0x20000740
   188c0:	00031394 	.word	0x00031394

000188c4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
   188c4:	4a08      	ldr	r2, [pc, #32]	; (188e8 <bt_hci_driver_register+0x24>)
{
   188c6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
   188c8:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   188cc:	b930      	cbnz	r0, 188dc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
   188ce:	68d9      	ldr	r1, [r3, #12]
   188d0:	b139      	cbz	r1, 188e2 <bt_hci_driver_register+0x1e>
   188d2:	6919      	ldr	r1, [r3, #16]
   188d4:	b129      	cbz	r1, 188e2 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
   188d6:	f8c2 316c 	str.w	r3, [r2, #364]	; 0x16c
	return 0;
   188da:	4770      	bx	lr
		return -EALREADY;
   188dc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   188e0:	4770      	bx	lr
		return -EINVAL;
   188e2:	f06f 0015 	mvn.w	r0, #21
}
   188e6:	4770      	bx	lr
   188e8:	200002a8 	.word	0x200002a8

000188ec <bt_finalize_init>:
   188ec:	4b07      	ldr	r3, [pc, #28]	; (1890c <bt_finalize_init+0x20>)
   188ee:	f3bf 8f5b 	dmb	ish
   188f2:	e853 2f00 	ldrex	r2, [r3]
   188f6:	f042 0202 	orr.w	r2, r2, #2
   188fa:	e843 2100 	strex	r1, r2, [r3]
   188fe:	2900      	cmp	r1, #0
   18900:	d1f7      	bne.n	188f2 <bt_finalize_init+0x6>
   18902:	f3bf 8f5b 	dmb	ish
		bt_le_scan_update(false);
   18906:	2000      	movs	r0, #0
   18908:	f000 bca0 	b.w	1924c <bt_le_scan_update>
   1890c:	20000374 	.word	0x20000374

00018910 <init_work>:
{
   18910:	b510      	push	{r4, lr}
	err = hci_init();
   18912:	f7ff f8f1 	bl	17af8 <hci_init>
	if (err) {
   18916:	4604      	mov	r4, r0
   18918:	b928      	cbnz	r0, 18926 <init_work+0x16>
		err = bt_conn_init();
   1891a:	f001 fec9 	bl	1a6b0 <bt_conn_init>
		if (err) {
   1891e:	4604      	mov	r4, r0
   18920:	b908      	cbnz	r0, 18926 <init_work+0x16>
	bt_finalize_init();
   18922:	f7ff ffe3 	bl	188ec <bt_finalize_init>
	if (ready_cb) {
   18926:	4b04      	ldr	r3, [pc, #16]	; (18938 <init_work+0x28>)
   18928:	681b      	ldr	r3, [r3, #0]
   1892a:	b11b      	cbz	r3, 18934 <init_work+0x24>
		ready_cb(err);
   1892c:	4620      	mov	r0, r4
}
   1892e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
   18932:	4718      	bx	r3
}
   18934:	bd10      	pop	{r4, pc}
   18936:	bf00      	nop
   18938:	20002730 	.word	0x20002730

0001893c <bt_enable>:
	}
}
#endif /* !CONFIG_BT_RECV_IS_RX_THREAD */

int bt_enable(bt_ready_cb_t cb)
{
   1893c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
	int err;

	if (!bt_dev.drv) {
   18940:	4d41      	ldr	r5, [pc, #260]	; (18a48 <bt_enable+0x10c>)
   18942:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
{
   18946:	b088      	sub	sp, #32
   18948:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
   1894a:	b97b      	cbnz	r3, 1896c <bt_enable+0x30>
		BT_ERR("No HCI driver registered");
   1894c:	493f      	ldr	r1, [pc, #252]	; (18a4c <bt_enable+0x110>)
   1894e:	680b      	ldr	r3, [r1, #0]
   18950:	075a      	lsls	r2, r3, #29
   18952:	d008      	beq.n	18966 <bt_enable+0x2a>
   18954:	4b3e      	ldr	r3, [pc, #248]	; (18a50 <bt_enable+0x114>)
   18956:	483f      	ldr	r0, [pc, #252]	; (18a54 <bt_enable+0x118>)
   18958:	1ac9      	subs	r1, r1, r3
   1895a:	0889      	lsrs	r1, r1, #2
   1895c:	0189      	lsls	r1, r1, #6
   1895e:	f041 0101 	orr.w	r1, r1, #1
   18962:	f010 fcbc 	bl	292de <log_0>
		return -ENODEV;
   18966:	f06f 0412 	mvn.w	r4, #18
   1896a:	e052      	b.n	18a12 <bt_enable+0xd6>
   1896c:	f105 03cc 	add.w	r3, r5, #204	; 0xcc
   18970:	f3bf 8f5b 	dmb	ish
   18974:	e853 4f00 	ldrex	r4, [r3]
   18978:	f044 0201 	orr.w	r2, r4, #1
   1897c:	e843 2100 	strex	r1, r2, [r3]
   18980:	2900      	cmp	r1, #0
   18982:	d1f7      	bne.n	18974 <bt_enable+0x38>
   18984:	f3bf 8f5b 	dmb	ish
	}

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   18988:	f014 0401 	ands.w	r4, r4, #1
   1898c:	d158      	bne.n	18a40 <bt_enable+0x104>
		if (err) {
			BT_WARN("Failed to set device name (%d)", err);
		}
	}

	ready_cb = cb;
   1898e:	4b32      	ldr	r3, [pc, #200]	; (18a58 <bt_enable+0x11c>)
   18990:	f04f 0800 	mov.w	r8, #0
   18994:	601e      	str	r6, [r3, #0]

	/* TX thread */
	k_thread_create(&tx_thread_data, tx_thread_stack,
   18996:	f04f 0900 	mov.w	r9, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1899a:	f06f 0308 	mvn.w	r3, #8
   1899e:	e9cd 4302 	strd	r4, r3, [sp, #8]
   189a2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   189a6:	e9cd 4400 	strd	r4, r4, [sp]
   189aa:	4b2c      	ldr	r3, [pc, #176]	; (18a5c <bt_enable+0x120>)
   189ac:	492c      	ldr	r1, [pc, #176]	; (18a60 <bt_enable+0x124>)
   189ae:	9404      	str	r4, [sp, #16]
   189b0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
   189b4:	482b      	ldr	r0, [pc, #172]	; (18a64 <bt_enable+0x128>)
   189b6:	f00b fb97 	bl	240e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   189ba:	492b      	ldr	r1, [pc, #172]	; (18a68 <bt_enable+0x12c>)
   189bc:	4829      	ldr	r0, [pc, #164]	; (18a64 <bt_enable+0x128>)
   189be:	f00b f9a1 	bl	23d04 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   189c2:	f06f 0307 	mvn.w	r3, #7
   189c6:	e9cd 4302 	strd	r4, r3, [sp, #8]
   189ca:	e9cd 8906 	strd	r8, r9, [sp, #24]
   189ce:	e9cd 4400 	strd	r4, r4, [sp]
   189d2:	4b26      	ldr	r3, [pc, #152]	; (18a6c <bt_enable+0x130>)
   189d4:	4926      	ldr	r1, [pc, #152]	; (18a70 <bt_enable+0x134>)
   189d6:	9404      	str	r4, [sp, #16]
   189d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
   189dc:	4825      	ldr	r0, [pc, #148]	; (18a74 <bt_enable+0x138>)
   189de:	f00b fb83 	bl	240e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   189e2:	4925      	ldr	r1, [pc, #148]	; (18a78 <bt_enable+0x13c>)
   189e4:	4823      	ldr	r0, [pc, #140]	; (18a74 <bt_enable+0x138>)
   189e6:	f00b f98d 	bl	23d04 <z_impl_k_thread_name_set>

	if (IS_ENABLED(CONFIG_BT_TINYCRYPT_ECC)) {
		bt_hci_ecc_init();
	}

	err = bt_dev.drv->open();
   189ea:	f8d5 316c 	ldr.w	r3, [r5, #364]	; 0x16c
   189ee:	68db      	ldr	r3, [r3, #12]
   189f0:	4798      	blx	r3
	if (err) {
   189f2:	4604      	mov	r4, r0
   189f4:	b188      	cbz	r0, 18a1a <bt_enable+0xde>
		BT_ERR("HCI driver open failed (%d)", err);
   189f6:	4a15      	ldr	r2, [pc, #84]	; (18a4c <bt_enable+0x110>)
   189f8:	6813      	ldr	r3, [r2, #0]
   189fa:	075b      	lsls	r3, r3, #29
   189fc:	d009      	beq.n	18a12 <bt_enable+0xd6>
   189fe:	4b14      	ldr	r3, [pc, #80]	; (18a50 <bt_enable+0x114>)
   18a00:	1ad2      	subs	r2, r2, r3
   18a02:	0892      	lsrs	r2, r2, #2
   18a04:	0192      	lsls	r2, r2, #6
   18a06:	4601      	mov	r1, r0
   18a08:	f042 0201 	orr.w	r2, r2, #1
   18a0c:	481b      	ldr	r0, [pc, #108]	; (18a7c <bt_enable+0x140>)
   18a0e:	f010 fc73 	bl	292f8 <log_1>
		return bt_init();
	}

	k_work_submit(&bt_dev.init);
	return 0;
}
   18a12:	4620      	mov	r0, r4
   18a14:	b008      	add	sp, #32
   18a16:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	if (!cb) {
   18a1a:	b966      	cbnz	r6, 18a36 <bt_enable+0xfa>
	err = hci_init();
   18a1c:	f7ff f86c 	bl	17af8 <hci_init>
	if (err) {
   18a20:	4604      	mov	r4, r0
   18a22:	2800      	cmp	r0, #0
   18a24:	d1f5      	bne.n	18a12 <bt_enable+0xd6>
		err = bt_conn_init();
   18a26:	f001 fe43 	bl	1a6b0 <bt_conn_init>
		if (err) {
   18a2a:	4604      	mov	r4, r0
   18a2c:	2800      	cmp	r0, #0
   18a2e:	d1f0      	bne.n	18a12 <bt_enable+0xd6>
	bt_finalize_init();
   18a30:	f7ff ff5c 	bl	188ec <bt_finalize_init>
	return 0;
   18a34:	e7ed      	b.n	18a12 <bt_enable+0xd6>
	k_work_submit(&bt_dev.init);
   18a36:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   18a3a:	f00c fcb3 	bl	253a4 <k_work_submit>
	return 0;
   18a3e:	e7e8      	b.n	18a12 <bt_enable+0xd6>
		return -EALREADY;
   18a40:	f06f 0477 	mvn.w	r4, #119	; 0x77
   18a44:	e7e5      	b.n	18a12 <bt_enable+0xd6>
   18a46:	bf00      	nop
   18a48:	200002a8 	.word	0x200002a8
   18a4c:	20000750 	.word	0x20000750
   18a50:	20000740 	.word	0x20000740
   18a54:	000313a8 	.word	0x000313a8
   18a58:	20002730 	.word	0x20002730
   18a5c:	00018615 	.word	0x00018615
   18a60:	20004660 	.word	0x20004660
   18a64:	200019c0 	.word	0x200019c0
   18a68:	000313c1 	.word	0x000313c1
   18a6c:	00017381 	.word	0x00017381
   18a70:	20004240 	.word	0x20004240
   18a74:	20001900 	.word	0x20001900
   18a78:	000313c7 	.word	0x000313c7
   18a7c:	000313cd 	.word	0x000313cd

00018a80 <bt_get_name>:
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	return bt_dev.name;
#else
	return CONFIG_BT_DEVICE_NAME;
#endif
}
   18a80:	4800      	ldr	r0, [pc, #0]	; (18a84 <bt_get_name+0x4>)
   18a82:	4770      	bx	lr
   18a84:	000313e9 	.word	0x000313e9

00018a88 <bt_le_set_chan_map>:
	return 0;
}
#endif /* defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

int bt_le_set_chan_map(uint8_t chan_map[5])
{
   18a88:	b538      	push	{r3, r4, r5, lr}

	if (!IS_ENABLED(CONFIG_BT_CENTRAL)) {
		return -ENOTSUP;
	}

	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 3)) {
   18a8a:	4b19      	ldr	r3, [pc, #100]	; (18af0 <bt_le_set_chan_map+0x68>)
   18a8c:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   18a90:	071b      	lsls	r3, r3, #28
{
   18a92:	4605      	mov	r5, r0
	if (!BT_CMD_TEST(bt_dev.supported_commands, 27, 3)) {
   18a94:	d410      	bmi.n	18ab8 <bt_le_set_chan_map+0x30>
		BT_WARN("Set Host Channel Classification command is "
   18a96:	4917      	ldr	r1, [pc, #92]	; (18af4 <bt_le_set_chan_map+0x6c>)
   18a98:	680b      	ldr	r3, [r1, #0]
   18a9a:	f013 0f06 	tst.w	r3, #6
   18a9e:	d008      	beq.n	18ab2 <bt_le_set_chan_map+0x2a>
   18aa0:	4b15      	ldr	r3, [pc, #84]	; (18af8 <bt_le_set_chan_map+0x70>)
   18aa2:	4816      	ldr	r0, [pc, #88]	; (18afc <bt_le_set_chan_map+0x74>)
   18aa4:	1ac9      	subs	r1, r1, r3
   18aa6:	0889      	lsrs	r1, r1, #2
   18aa8:	0189      	lsls	r1, r1, #6
   18aaa:	f041 0102 	orr.w	r1, r1, #2
   18aae:	f010 fc16 	bl	292de <log_0>
			"not supported");
		return -ENOTSUP;
   18ab2:	f06f 0085 	mvn.w	r0, #133	; 0x85
	memcpy(&cp->ch_map[0], &chan_map[0], 4);
	cp->ch_map[4] = chan_map[4] & BIT_MASK(5);

	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}
   18ab6:	bd38      	pop	{r3, r4, r5, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
   18ab8:	2105      	movs	r1, #5
   18aba:	f242 0014 	movw	r0, #8212	; 0x2014
   18abe:	f7fe ff2b 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   18ac2:	4604      	mov	r4, r0
   18ac4:	b188      	cbz	r0, 18aea <bt_le_set_chan_map+0x62>
	return net_buf_simple_add(&buf->b, len);
   18ac6:	2105      	movs	r1, #5
   18ac8:	3008      	adds	r0, #8
   18aca:	f007 fbc7 	bl	2025c <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   18ace:	682b      	ldr	r3, [r5, #0]
   18ad0:	6003      	str	r3, [r0, #0]
	cp->ch_map[4] = chan_map[4] & BIT_MASK(5);
   18ad2:	792b      	ldrb	r3, [r5, #4]
   18ad4:	f003 031f 	and.w	r3, r3, #31
   18ad8:	7103      	strb	r3, [r0, #4]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
   18ada:	4621      	mov	r1, r4
   18adc:	2200      	movs	r2, #0
}
   18ade:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
   18ae2:	f242 0014 	movw	r0, #8212	; 0x2014
   18ae6:	f7fe bf5f 	b.w	179a8 <bt_hci_cmd_send_sync>
		return -ENOBUFS;
   18aea:	f06f 0068 	mvn.w	r0, #104	; 0x68
   18aee:	e7e2      	b.n	18ab6 <bt_le_set_chan_map+0x2e>
   18af0:	200002a8 	.word	0x200002a8
   18af4:	20000750 	.word	0x20000750
   18af8:	20000740 	.word	0x20000740
   18afc:	000313f0 	.word	0x000313f0

00018b00 <bt_data_parse>:

void bt_data_parse(struct net_buf_simple *ad,
		   bool (*func)(struct bt_data *data, void *user_data),
		   void *user_data)
{
   18b00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18b02:	4604      	mov	r4, r0
   18b04:	460e      	mov	r6, r1
   18b06:	4617      	mov	r7, r2
	while (ad->len > 1) {
   18b08:	88a3      	ldrh	r3, [r4, #4]
   18b0a:	2b01      	cmp	r3, #1
   18b0c:	d916      	bls.n	18b3c <bt_data_parse+0x3c>
		struct bt_data data;
		uint8_t len;

		len = net_buf_simple_pull_u8(ad);
   18b0e:	4620      	mov	r0, r4
   18b10:	f013 fa96 	bl	2c040 <net_buf_simple_pull_u8>
		if (len == 0U) {
   18b14:	4605      	mov	r5, r0
   18b16:	b188      	cbz	r0, 18b3c <bt_data_parse+0x3c>
			/* Early termination */
			return;
		}

		if (len > ad->len) {
   18b18:	88a2      	ldrh	r2, [r4, #4]
   18b1a:	b283      	uxth	r3, r0
   18b1c:	429a      	cmp	r2, r3
   18b1e:	d20f      	bcs.n	18b40 <bt_data_parse+0x40>
			BT_WARN("Malformed data");
   18b20:	4911      	ldr	r1, [pc, #68]	; (18b68 <bt_data_parse+0x68>)
   18b22:	680b      	ldr	r3, [r1, #0]
   18b24:	f013 0f06 	tst.w	r3, #6
   18b28:	d008      	beq.n	18b3c <bt_data_parse+0x3c>
   18b2a:	4b10      	ldr	r3, [pc, #64]	; (18b6c <bt_data_parse+0x6c>)
   18b2c:	4810      	ldr	r0, [pc, #64]	; (18b70 <bt_data_parse+0x70>)
   18b2e:	1ac9      	subs	r1, r1, r3
   18b30:	0889      	lsrs	r1, r1, #2
   18b32:	0189      	lsls	r1, r1, #6
   18b34:	f041 0102 	orr.w	r1, r1, #2
   18b38:	f010 fbd1 	bl	292de <log_0>
			return;
		}

		net_buf_simple_pull(ad, len - 1);
	}
}
   18b3c:	b003      	add	sp, #12
   18b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data.type = net_buf_simple_pull_u8(ad);
   18b40:	4620      	mov	r0, r4
   18b42:	f013 fa7d 	bl	2c040 <net_buf_simple_pull_u8>
		data.data_len = len - 1;
   18b46:	3d01      	subs	r5, #1
		data.data = ad->data;
   18b48:	6823      	ldr	r3, [r4, #0]
		data.type = net_buf_simple_pull_u8(ad);
   18b4a:	f88d 0000 	strb.w	r0, [sp]
		if (!func(&data, user_data)) {
   18b4e:	4639      	mov	r1, r7
   18b50:	4668      	mov	r0, sp
		data.data_len = len - 1;
   18b52:	f88d 5001 	strb.w	r5, [sp, #1]
		data.data = ad->data;
   18b56:	9301      	str	r3, [sp, #4]
		if (!func(&data, user_data)) {
   18b58:	47b0      	blx	r6
   18b5a:	2800      	cmp	r0, #0
   18b5c:	d0ee      	beq.n	18b3c <bt_data_parse+0x3c>
		net_buf_simple_pull(ad, len - 1);
   18b5e:	4629      	mov	r1, r5
   18b60:	4620      	mov	r0, r4
   18b62:	f007 fb39 	bl	201d8 <net_buf_simple_pull>
   18b66:	e7cf      	b.n	18b08 <bt_data_parse+0x8>
   18b68:	20000750 	.word	0x20000750
   18b6c:	20000740 	.word	0x20000740
   18b70:	00031429 	.word	0x00031429

00018b74 <id_find>:
		*count = bt_dev.id_count;
	}
}

static int id_find(const bt_addr_le_t *addr)
{
   18b74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
   18b76:	4f0b      	ldr	r7, [pc, #44]	; (18ba4 <id_find+0x30>)
{
   18b78:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
   18b7a:	2500      	movs	r5, #0
   18b7c:	79fb      	ldrb	r3, [r7, #7]
   18b7e:	b2ec      	uxtb	r4, r5
   18b80:	42a3      	cmp	r3, r4
   18b82:	d802      	bhi.n	18b8a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
   18b84:	f06f 0401 	mvn.w	r4, #1
   18b88:	e009      	b.n	18b9e <id_find+0x2a>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
   18b8a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
	return memcmp(a, b, sizeof(*a));
   18b8e:	2207      	movs	r2, #7
   18b90:	4439      	add	r1, r7
   18b92:	4630      	mov	r0, r6
   18b94:	f014 f821 	bl	2cbda <memcmp>
   18b98:	3501      	adds	r5, #1
   18b9a:	2800      	cmp	r0, #0
   18b9c:	d1ee      	bne.n	18b7c <id_find+0x8>
}
   18b9e:	4620      	mov	r0, r4
   18ba0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18ba2:	bf00      	nop
   18ba4:	200002a8 	.word	0x200002a8

00018ba8 <set_random_address>:
{
   18ba8:	b538      	push	{r3, r4, r5, lr}
	return memcmp(a, b, sizeof(*a));
   18baa:	2206      	movs	r2, #6
   18bac:	4913      	ldr	r1, [pc, #76]	; (18bfc <set_random_address+0x54>)
   18bae:	4605      	mov	r5, r0
   18bb0:	f014 f813 	bl	2cbda <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
   18bb4:	4602      	mov	r2, r0
   18bb6:	b1d8      	cbz	r0, 18bf0 <set_random_address+0x48>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
   18bb8:	2106      	movs	r1, #6
   18bba:	f242 0005 	movw	r0, #8197	; 0x2005
   18bbe:	f7fe feab 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   18bc2:	4604      	mov	r4, r0
   18bc4:	b1b0      	cbz	r0, 18bf4 <set_random_address+0x4c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   18bc6:	2206      	movs	r2, #6
   18bc8:	4629      	mov	r1, r5
   18bca:	3008      	adds	r0, #8
   18bcc:	f013 fa54 	bl	2c078 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
   18bd0:	2200      	movs	r2, #0
   18bd2:	4621      	mov	r1, r4
   18bd4:	f242 0005 	movw	r0, #8197	; 0x2005
   18bd8:	f7fe fee6 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   18bdc:	4602      	mov	r2, r0
   18bde:	b938      	cbnz	r0, 18bf0 <set_random_address+0x48>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
   18be0:	4629      	mov	r1, r5
   18be2:	4806      	ldr	r0, [pc, #24]	; (18bfc <set_random_address+0x54>)
   18be4:	f011 ff8e 	bl	2ab04 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
   18be8:	4b05      	ldr	r3, [pc, #20]	; (18c00 <set_random_address+0x58>)
   18bea:	2101      	movs	r1, #1
   18bec:	f883 1060 	strb.w	r1, [r3, #96]	; 0x60
}
   18bf0:	4610      	mov	r0, r2
   18bf2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
   18bf4:	f06f 0268 	mvn.w	r2, #104	; 0x68
   18bf8:	e7fa      	b.n	18bf0 <set_random_address+0x48>
   18bfa:	bf00      	nop
   18bfc:	20000309 	.word	0x20000309
   18c00:	200002a8 	.word	0x200002a8

00018c04 <id_create.isra.0>:

static int id_create(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
   18c04:	b530      	push	{r4, r5, lr}
   18c06:	4604      	mov	r4, r0
   18c08:	b085      	sub	sp, #20
{
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18c0a:	460d      	mov	r5, r1
   18c0c:	b199      	cbz	r1, 18c36 <id_create.isra.0+0x32>
   18c0e:	2300      	movs	r3, #0
	return memcmp(a, b, sizeof(*a));
   18c10:	2207      	movs	r2, #7
   18c12:	a902      	add	r1, sp, #8
   18c14:	4628      	mov	r0, r5
   18c16:	9302      	str	r3, [sp, #8]
   18c18:	f8cd 300b 	str.w	r3, [sp, #11]
   18c1c:	f013 ffdd 	bl	2cbda <memcmp>
   18c20:	b148      	cbz	r0, 18c36 <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
   18c22:	4810      	ldr	r0, [pc, #64]	; (18c64 <id_create.isra.0+0x60>)
   18c24:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   18c28:	4629      	mov	r1, r5
   18c2a:	4420      	add	r0, r4
		} while (id_find(&new_addr) >= 0);

		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);

		if (addr) {
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   18c2c:	f011 ff6f 	bl	2ab0e <bt_addr_le_copy>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
   18c30:	2000      	movs	r0, #0
}
   18c32:	b005      	add	sp, #20
   18c34:	bd30      	pop	{r4, r5, pc}
			err = bt_addr_le_create_static(&new_addr);
   18c36:	4668      	mov	r0, sp
   18c38:	f011 fe29 	bl	2a88e <bt_addr_le_create_static>
			if (err) {
   18c3c:	2800      	cmp	r0, #0
   18c3e:	d1f8      	bne.n	18c32 <id_create.isra.0+0x2e>
		} while (id_find(&new_addr) >= 0);
   18c40:	4668      	mov	r0, sp
   18c42:	f7ff ff97 	bl	18b74 <id_find>
   18c46:	2800      	cmp	r0, #0
   18c48:	daf5      	bge.n	18c36 <id_create.isra.0+0x32>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
   18c4a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   18c4e:	4c05      	ldr	r4, [pc, #20]	; (18c64 <id_create.isra.0+0x60>)
   18c50:	4669      	mov	r1, sp
   18c52:	4420      	add	r0, r4
   18c54:	f011 ff5b 	bl	2ab0e <bt_addr_le_copy>
		if (addr) {
   18c58:	2d00      	cmp	r5, #0
   18c5a:	d0e9      	beq.n	18c30 <id_create.isra.0+0x2c>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
   18c5c:	4601      	mov	r1, r0
   18c5e:	4628      	mov	r0, r5
   18c60:	e7e4      	b.n	18c2c <id_create.isra.0+0x28>
   18c62:	bf00      	nop
   18c64:	200002a8 	.word	0x200002a8

00018c68 <bt_id_get>:
{
   18c68:	b538      	push	{r3, r4, r5, lr}
   18c6a:	460d      	mov	r5, r1
   18c6c:	4906      	ldr	r1, [pc, #24]	; (18c88 <bt_id_get+0x20>)
   18c6e:	79cc      	ldrb	r4, [r1, #7]
	if (addrs) {
   18c70:	b138      	cbz	r0, 18c82 <bt_id_get+0x1a>
		size_t to_copy = MIN(*count, bt_dev.id_count);
   18c72:	682b      	ldr	r3, [r5, #0]
   18c74:	429c      	cmp	r4, r3
   18c76:	bf28      	it	cs
   18c78:	461c      	movcs	r4, r3
   18c7a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   18c7e:	f013 ffba 	bl	2cbf6 <memcpy>
		*count = bt_dev.id_count;
   18c82:	602c      	str	r4, [r5, #0]
}
   18c84:	bd38      	pop	{r3, r4, r5, pc}
   18c86:	bf00      	nop
   18c88:	200002a8 	.word	0x200002a8

00018c8c <bt_id_create>:

int bt_id_create(bt_addr_le_t *addr, uint8_t *irk)
{
   18c8c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18c8e:	460e      	mov	r6, r1
	int new_id, err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18c90:	4604      	mov	r4, r0
   18c92:	b918      	cbnz	r0, 18c9c <bt_id_create+0x10>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   18c94:	b35e      	cbz	r6, 18cee <bt_id_create+0x62>
		return -EINVAL;
   18c96:	f06f 0015 	mvn.w	r0, #21
   18c9a:	e026      	b.n	18cea <bt_id_create+0x5e>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18c9c:	2300      	movs	r3, #0
   18c9e:	2207      	movs	r2, #7
   18ca0:	4669      	mov	r1, sp
   18ca2:	9300      	str	r3, [sp, #0]
   18ca4:	f8cd 3003 	str.w	r3, [sp, #3]
   18ca8:	f013 ff97 	bl	2cbda <memcmp>
   18cac:	2800      	cmp	r0, #0
   18cae:	d0f1      	beq.n	18c94 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18cb0:	7823      	ldrb	r3, [r4, #0]
   18cb2:	2b01      	cmp	r3, #1
   18cb4:	d104      	bne.n	18cc0 <bt_id_create+0x34>
   18cb6:	79a3      	ldrb	r3, [r4, #6]
   18cb8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18cbc:	2bc0      	cmp	r3, #192	; 0xc0
   18cbe:	d00d      	beq.n	18cdc <bt_id_create+0x50>
			BT_ERR("Only static random identity address supported");
   18cc0:	491e      	ldr	r1, [pc, #120]	; (18d3c <bt_id_create+0xb0>)
   18cc2:	680b      	ldr	r3, [r1, #0]
   18cc4:	075a      	lsls	r2, r3, #29
   18cc6:	d0e6      	beq.n	18c96 <bt_id_create+0xa>
   18cc8:	4b1d      	ldr	r3, [pc, #116]	; (18d40 <bt_id_create+0xb4>)
   18cca:	481e      	ldr	r0, [pc, #120]	; (18d44 <bt_id_create+0xb8>)
   18ccc:	1ac9      	subs	r1, r1, r3
   18cce:	0889      	lsrs	r1, r1, #2
   18cd0:	0189      	lsls	r1, r1, #6
   18cd2:	f041 0101 	orr.w	r1, r1, #1
   18cd6:	f010 fb02 	bl	292de <log_0>
   18cda:	e7dc      	b.n	18c96 <bt_id_create+0xa>
		if (id_find(addr) >= 0) {
   18cdc:	4620      	mov	r0, r4
   18cde:	f7ff ff49 	bl	18b74 <id_find>
   18ce2:	2800      	cmp	r0, #0
   18ce4:	dbd6      	blt.n	18c94 <bt_id_create+0x8>
			return -EALREADY;
   18ce6:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return new_id;
}
   18cea:	b002      	add	sp, #8
   18cec:	bd70      	pop	{r4, r5, r6, pc}
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
   18cee:	4d16      	ldr	r5, [pc, #88]	; (18d48 <bt_id_create+0xbc>)
   18cf0:	79eb      	ldrb	r3, [r5, #7]
   18cf2:	2b01      	cmp	r3, #1
   18cf4:	d01e      	beq.n	18d34 <bt_id_create+0xa8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   18cf6:	f3bf 8f5b 	dmb	ish
   18cfa:	f8d5 30cc 	ldr.w	r3, [r5, #204]	; 0xcc
   18cfe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
   18d02:	07db      	lsls	r3, r3, #31
   18d04:	d40b      	bmi.n	18d1e <bt_id_create+0x92>
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
   18d06:	2c00      	cmp	r4, #0
   18d08:	d0c5      	beq.n	18c96 <bt_id_create+0xa>
   18d0a:	2207      	movs	r2, #7
   18d0c:	4669      	mov	r1, sp
   18d0e:	4620      	mov	r0, r4
   18d10:	9600      	str	r6, [sp, #0]
   18d12:	f8cd 6003 	str.w	r6, [sp, #3]
   18d16:	f013 ff60 	bl	2cbda <memcmp>
   18d1a:	2800      	cmp	r0, #0
   18d1c:	d0bb      	beq.n	18c96 <bt_id_create+0xa>
	new_id = bt_dev.id_count++;
   18d1e:	79ee      	ldrb	r6, [r5, #7]
	err = id_create(new_id, addr, irk);
   18d20:	4621      	mov	r1, r4
	new_id = bt_dev.id_count++;
   18d22:	1c73      	adds	r3, r6, #1
	err = id_create(new_id, addr, irk);
   18d24:	4630      	mov	r0, r6
	new_id = bt_dev.id_count++;
   18d26:	71eb      	strb	r3, [r5, #7]
	err = id_create(new_id, addr, irk);
   18d28:	f7ff ff6c 	bl	18c04 <id_create.isra.0>
	new_id = bt_dev.id_count++;
   18d2c:	2800      	cmp	r0, #0
   18d2e:	bf08      	it	eq
   18d30:	4630      	moveq	r0, r6
   18d32:	e7da      	b.n	18cea <bt_id_create+0x5e>
		return -ENOMEM;
   18d34:	f06f 000b 	mvn.w	r0, #11
   18d38:	e7d7      	b.n	18cea <bt_id_create+0x5e>
   18d3a:	bf00      	nop
   18d3c:	20000754 	.word	0x20000754
   18d40:	20000740 	.word	0x20000740
   18d44:	00031444 	.word	0x00031444
   18d48:	200002a8 	.word	0x200002a8

00018d4c <bt_id_reset>:

int bt_id_reset(uint8_t id, bt_addr_le_t *addr, uint8_t *irk)
{
   18d4c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   18d4e:	4604      	mov	r4, r0
   18d50:	4616      	mov	r6, r2
	int err;

	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18d52:	460d      	mov	r5, r1
   18d54:	b919      	cbnz	r1, 18d5e <bt_id_reset+0x12>
		if (id_find(addr) >= 0) {
			return -EALREADY;
		}
	}

	if (!IS_ENABLED(CONFIG_BT_PRIVACY) && irk) {
   18d56:	b366      	cbz	r6, 18db2 <bt_id_reset+0x66>
		return -EINVAL;
   18d58:	f06f 0015 	mvn.w	r0, #21
   18d5c:	e027      	b.n	18dae <bt_id_reset+0x62>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
   18d5e:	2300      	movs	r3, #0
   18d60:	2207      	movs	r2, #7
   18d62:	4669      	mov	r1, sp
   18d64:	4628      	mov	r0, r5
   18d66:	9300      	str	r3, [sp, #0]
   18d68:	f8cd 3003 	str.w	r3, [sp, #3]
   18d6c:	f013 ff35 	bl	2cbda <memcmp>
   18d70:	2800      	cmp	r0, #0
   18d72:	d0f0      	beq.n	18d56 <bt_id_reset+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
   18d74:	782b      	ldrb	r3, [r5, #0]
   18d76:	2b01      	cmp	r3, #1
   18d78:	d104      	bne.n	18d84 <bt_id_reset+0x38>
   18d7a:	79ab      	ldrb	r3, [r5, #6]
   18d7c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   18d80:	2bc0      	cmp	r3, #192	; 0xc0
   18d82:	d00d      	beq.n	18da0 <bt_id_reset+0x54>
			BT_ERR("Only static random identity address supported");
   18d84:	491a      	ldr	r1, [pc, #104]	; (18df0 <bt_id_reset+0xa4>)
   18d86:	680b      	ldr	r3, [r1, #0]
   18d88:	075b      	lsls	r3, r3, #29
   18d8a:	d0e5      	beq.n	18d58 <bt_id_reset+0xc>
   18d8c:	4b19      	ldr	r3, [pc, #100]	; (18df4 <bt_id_reset+0xa8>)
   18d8e:	481a      	ldr	r0, [pc, #104]	; (18df8 <bt_id_reset+0xac>)
   18d90:	1ac9      	subs	r1, r1, r3
   18d92:	0889      	lsrs	r1, r1, #2
   18d94:	0189      	lsls	r1, r1, #6
   18d96:	f041 0101 	orr.w	r1, r1, #1
   18d9a:	f010 faa0 	bl	292de <log_0>
   18d9e:	e7db      	b.n	18d58 <bt_id_reset+0xc>
		if (id_find(addr) >= 0) {
   18da0:	4628      	mov	r0, r5
   18da2:	f7ff fee7 	bl	18b74 <id_find>
   18da6:	2800      	cmp	r0, #0
   18da8:	dbd5      	blt.n	18d56 <bt_id_reset+0xa>
			return -EALREADY;
   18daa:	f06f 0077 	mvn.w	r0, #119	; 0x77
	if (err) {
		return err;
	}

	return id;
}
   18dae:	b002      	add	sp, #8
   18db0:	bd70      	pop	{r4, r5, r6, pc}
	if (id == BT_ID_DEFAULT || id >= bt_dev.id_count) {
   18db2:	2c00      	cmp	r4, #0
   18db4:	d0d0      	beq.n	18d58 <bt_id_reset+0xc>
   18db6:	4b11      	ldr	r3, [pc, #68]	; (18dfc <bt_id_reset+0xb0>)
   18db8:	79da      	ldrb	r2, [r3, #7]
   18dba:	42a2      	cmp	r2, r4
   18dbc:	d9cc      	bls.n	18d58 <bt_id_reset+0xc>
	    bt_addr_le_cmp(&bt_dev.id_addr[id], BT_ADDR_LE_ANY)) {
   18dbe:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   18dc2:	2207      	movs	r2, #7
   18dc4:	4669      	mov	r1, sp
   18dc6:	4418      	add	r0, r3
   18dc8:	9600      	str	r6, [sp, #0]
   18dca:	f8cd 6003 	str.w	r6, [sp, #3]
   18dce:	f013 ff04 	bl	2cbda <memcmp>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
   18dd2:	b128      	cbz	r0, 18de0 <bt_id_reset+0x94>
		err = bt_unpair(id, NULL);
   18dd4:	4631      	mov	r1, r6
   18dd6:	4620      	mov	r0, r4
   18dd8:	f011 fdf6 	bl	2a9c8 <bt_unpair>
		if (err) {
   18ddc:	2800      	cmp	r0, #0
   18dde:	d1e6      	bne.n	18dae <bt_id_reset+0x62>
	err = id_create(id, addr, irk);
   18de0:	4629      	mov	r1, r5
   18de2:	4620      	mov	r0, r4
   18de4:	f7ff ff0e 	bl	18c04 <id_create.isra.0>
	if (err) {
   18de8:	2800      	cmp	r0, #0
   18dea:	bf08      	it	eq
   18dec:	4620      	moveq	r0, r4
   18dee:	e7de      	b.n	18dae <bt_id_reset+0x62>
   18df0:	20000754 	.word	0x20000754
   18df4:	20000740 	.word	0x20000740
   18df8:	00031444 	.word	0x00031444
   18dfc:	200002a8 	.word	0x200002a8

00018e00 <bt_id_delete>:

int bt_id_delete(uint8_t id)
{
   18e00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (id == BT_ID_DEFAULT || id >= bt_dev.id_count) {
   18e02:	4604      	mov	r4, r0
   18e04:	b348      	cbz	r0, 18e5a <bt_id_delete+0x5a>
   18e06:	4d16      	ldr	r5, [pc, #88]	; (18e60 <bt_id_delete+0x60>)
   18e08:	79eb      	ldrb	r3, [r5, #7]
   18e0a:	4283      	cmp	r3, r0
   18e0c:	d925      	bls.n	18e5a <bt_id_delete+0x5a>
		return -EINVAL;
	}

	if (!bt_addr_le_cmp(&bt_dev.id_addr[id], BT_ADDR_LE_ANY)) {
   18e0e:	ebc0 06c0 	rsb	r6, r0, r0, lsl #3
   18e12:	442e      	add	r6, r5
   18e14:	2700      	movs	r7, #0
   18e16:	2207      	movs	r2, #7
   18e18:	4669      	mov	r1, sp
   18e1a:	4630      	mov	r0, r6
   18e1c:	9700      	str	r7, [sp, #0]
   18e1e:	f8cd 7003 	str.w	r7, [sp, #3]
   18e22:	f013 feda 	bl	2cbda <memcmp>
   18e26:	b920      	cbnz	r0, 18e32 <bt_id_delete+0x32>
		return -EALREADY;
   18e28:	f06f 0277 	mvn.w	r2, #119	; 0x77
	    atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
		bt_settings_save_id();
	}

	return 0;
}
   18e2c:	4610      	mov	r0, r2
   18e2e:	b003      	add	sp, #12
   18e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_unpair(id, NULL);
   18e32:	4639      	mov	r1, r7
   18e34:	4620      	mov	r0, r4
   18e36:	f011 fdc7 	bl	2a9c8 <bt_unpair>
		if (err) {
   18e3a:	4602      	mov	r2, r0
   18e3c:	2800      	cmp	r0, #0
   18e3e:	d1f5      	bne.n	18e2c <bt_id_delete+0x2c>
	bt_addr_le_copy(&bt_dev.id_addr[id], BT_ADDR_LE_ANY);
   18e40:	9000      	str	r0, [sp, #0]
   18e42:	4669      	mov	r1, sp
   18e44:	f8cd 0003 	str.w	r0, [sp, #3]
   18e48:	4630      	mov	r0, r6
   18e4a:	f011 fe60 	bl	2ab0e <bt_addr_le_copy>
	if (id == bt_dev.id_count - 1) {
   18e4e:	79eb      	ldrb	r3, [r5, #7]
   18e50:	3b01      	subs	r3, #1
   18e52:	429c      	cmp	r4, r3
   18e54:	d1ea      	bne.n	18e2c <bt_id_delete+0x2c>
		bt_dev.id_count--;
   18e56:	71ec      	strb	r4, [r5, #7]
   18e58:	e7e8      	b.n	18e2c <bt_id_delete+0x2c>
		return -EINVAL;
   18e5a:	f06f 0215 	mvn.w	r2, #21
   18e5e:	e7e5      	b.n	18e2c <bt_id_delete+0x2c>
   18e60:	200002a8 	.word	0x200002a8

00018e64 <bt_id_read_public_addr>:
#endif /* defined(CONFIG_BT_HCI_VS_EXT) */
}
#endif /* defined(CONFIG_BT_PRIVACY) */

uint8_t bt_id_read_public_addr(bt_addr_le_t *addr)
{
   18e64:	b570      	push	{r4, r5, r6, lr}
   18e66:	b086      	sub	sp, #24
   18e68:	4606      	mov	r6, r0
	struct bt_hci_rp_read_bd_addr *rp;
	struct net_buf *rsp;
	int err;

	/* Read Bluetooth Address */
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
   18e6a:	aa01      	add	r2, sp, #4
   18e6c:	2100      	movs	r1, #0
   18e6e:	f241 0009 	movw	r0, #4105	; 0x1009
   18e72:	f7fe fd99 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   18e76:	4604      	mov	r4, r0
   18e78:	b180      	cbz	r0, 18e9c <bt_id_read_public_addr+0x38>
		BT_WARN("Failed to read public address");
   18e7a:	491b      	ldr	r1, [pc, #108]	; (18ee8 <bt_id_read_public_addr+0x84>)
   18e7c:	6808      	ldr	r0, [r1, #0]
   18e7e:	f010 0006 	ands.w	r0, r0, #6
   18e82:	d009      	beq.n	18e98 <bt_id_read_public_addr+0x34>
   18e84:	4b19      	ldr	r3, [pc, #100]	; (18eec <bt_id_read_public_addr+0x88>)
   18e86:	481a      	ldr	r0, [pc, #104]	; (18ef0 <bt_id_read_public_addr+0x8c>)
   18e88:	1ac9      	subs	r1, r1, r3
   18e8a:	0889      	lsrs	r1, r1, #2
   18e8c:	0189      	lsls	r1, r1, #6
   18e8e:	f041 0102 	orr.w	r1, r1, #2
   18e92:	f010 fa24 	bl	292de <log_0>

	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
		BT_DBG("Controller has no public address");
		net_buf_unref(rsp);
		return 0U;
   18e96:	2000      	movs	r0, #0
	bt_addr_copy(&addr->a, &rp->bdaddr);
	addr->type = BT_ADDR_LE_PUBLIC;

	net_buf_unref(rsp);
	return 1U;
}
   18e98:	b006      	add	sp, #24
   18e9a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
   18e9c:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18e9e:	9002      	str	r0, [sp, #8]
   18ea0:	689d      	ldr	r5, [r3, #8]
   18ea2:	f8ad 000c 	strh.w	r0, [sp, #12]
   18ea6:	3501      	adds	r5, #1
	return memcmp(a, b, sizeof(*a));
   18ea8:	2206      	movs	r2, #6
   18eaa:	a902      	add	r1, sp, #8
   18eac:	4628      	mov	r0, r5
   18eae:	f013 fe94 	bl	2cbda <memcmp>
   18eb2:	b918      	cbnz	r0, 18ebc <bt_id_read_public_addr+0x58>
		net_buf_unref(rsp);
   18eb4:	9801      	ldr	r0, [sp, #4]
   18eb6:	f007 f8a1 	bl	1fffc <net_buf_unref>
   18eba:	e7ec      	b.n	18e96 <bt_id_read_public_addr+0x32>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
   18ebc:	f04f 33ff 	mov.w	r3, #4294967295
   18ec0:	2206      	movs	r2, #6
   18ec2:	a904      	add	r1, sp, #16
   18ec4:	4628      	mov	r0, r5
   18ec6:	9304      	str	r3, [sp, #16]
   18ec8:	f8ad 3014 	strh.w	r3, [sp, #20]
   18ecc:	f013 fe85 	bl	2cbda <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
   18ed0:	2800      	cmp	r0, #0
   18ed2:	d0ef      	beq.n	18eb4 <bt_id_read_public_addr+0x50>
	bt_addr_copy(&addr->a, &rp->bdaddr);
   18ed4:	4629      	mov	r1, r5
   18ed6:	1c70      	adds	r0, r6, #1
   18ed8:	f011 fe14 	bl	2ab04 <bt_addr_copy>
	net_buf_unref(rsp);
   18edc:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
   18ede:	7034      	strb	r4, [r6, #0]
	net_buf_unref(rsp);
   18ee0:	f007 f88c 	bl	1fffc <net_buf_unref>
	return 1U;
   18ee4:	2001      	movs	r0, #1
   18ee6:	e7d7      	b.n	18e98 <bt_id_read_public_addr+0x34>
   18ee8:	20000754 	.word	0x20000754
   18eec:	20000740 	.word	0x20000740
   18ef0:	00031472 	.word	0x00031472

00018ef4 <bt_setup_public_id_addr>:

int bt_setup_public_id_addr(void)
{
   18ef4:	b507      	push	{r0, r1, r2, lr}
	bt_addr_le_t addr;
	uint8_t *irk = NULL;

	bt_dev.id_count = bt_id_read_public_addr(&addr);
   18ef6:	4668      	mov	r0, sp
   18ef8:	f7ff ffb4 	bl	18e64 <bt_id_read_public_addr>
   18efc:	4b04      	ldr	r3, [pc, #16]	; (18f10 <bt_setup_public_id_addr+0x1c>)
   18efe:	71d8      	strb	r0, [r3, #7]

	if (!bt_dev.id_count) {
   18f00:	b118      	cbz	r0, 18f0a <bt_setup_public_id_addr+0x16>
	} else if (IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}
#endif /* defined(CONFIG_BT_PRIVACY) */

	return id_create(BT_ID_DEFAULT, &addr, irk);
   18f02:	4669      	mov	r1, sp
   18f04:	2000      	movs	r0, #0
   18f06:	f7ff fe7d 	bl	18c04 <id_create.isra.0>
}
   18f0a:	b003      	add	sp, #12
   18f0c:	f85d fb04 	ldr.w	pc, [sp], #4
   18f10:	200002a8 	.word	0x200002a8

00018f14 <bt_read_static_addr>:

#if defined(CONFIG_BT_HCI_VS_EXT)
uint8_t bt_read_static_addr(struct bt_hci_vs_static_addr addrs[], uint8_t size)
{
   18f14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_rp_vs_read_static_addrs *rp;
	struct net_buf *rsp;
	int err, i;
	uint8_t cnt;

	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18f16:	4b2e      	ldr	r3, [pc, #184]	; (18fd0 <bt_read_static_addr+0xbc>)
   18f18:	f893 40ba 	ldrb.w	r4, [r3, #186]	; 0xba
   18f1c:	f014 0401 	ands.w	r4, r4, #1
{
   18f20:	4605      	mov	r5, r0
   18f22:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
   18f24:	d10e      	bne.n	18f44 <bt_read_static_addr+0x30>
		BT_WARN("Read Static Addresses command not available");
   18f26:	492b      	ldr	r1, [pc, #172]	; (18fd4 <bt_read_static_addr+0xc0>)
   18f28:	680b      	ldr	r3, [r1, #0]
   18f2a:	f013 0f06 	tst.w	r3, #6
   18f2e:	d017      	beq.n	18f60 <bt_read_static_addr+0x4c>
   18f30:	4b29      	ldr	r3, [pc, #164]	; (18fd8 <bt_read_static_addr+0xc4>)
   18f32:	482a      	ldr	r0, [pc, #168]	; (18fdc <bt_read_static_addr+0xc8>)
   18f34:	1ac9      	subs	r1, r1, r3
   18f36:	0889      	lsrs	r1, r1, #2
   18f38:	0189      	lsls	r1, r1, #6
   18f3a:	f041 0102 	orr.w	r1, r1, #2
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
	}

	net_buf_unref(rsp);
	if (!cnt) {
		BT_WARN("No static addresses stored in controller");
   18f3e:	f010 f9ce 	bl	292de <log_0>
   18f42:	e00d      	b.n	18f60 <bt_read_static_addr+0x4c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
   18f44:	aa01      	add	r2, sp, #4
   18f46:	2100      	movs	r1, #0
   18f48:	f64f 4009 	movw	r0, #64521	; 0xfc09
   18f4c:	f7fe fd2c 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   18f50:	4603      	mov	r3, r0
   18f52:	b190      	cbz	r0, 18f7a <bt_read_static_addr+0x66>
		BT_WARN("Failed to read static addresses");
   18f54:	491f      	ldr	r1, [pc, #124]	; (18fd4 <bt_read_static_addr+0xc0>)
   18f56:	680b      	ldr	r3, [r1, #0]
   18f58:	f013 0f06 	tst.w	r3, #6
   18f5c:	d103      	bne.n	18f66 <bt_read_static_addr+0x52>
		return 0;
   18f5e:	2400      	movs	r4, #0
	}

	return cnt;
}
   18f60:	4620      	mov	r0, r4
   18f62:	b003      	add	sp, #12
   18f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
   18f66:	4b1c      	ldr	r3, [pc, #112]	; (18fd8 <bt_read_static_addr+0xc4>)
		BT_WARN("Failed to read static addresses");
   18f68:	481d      	ldr	r0, [pc, #116]	; (18fe0 <bt_read_static_addr+0xcc>)
   18f6a:	1ac9      	subs	r1, r1, r3
   18f6c:	0889      	lsrs	r1, r1, #2
   18f6e:	0189      	lsls	r1, r1, #6
   18f70:	f041 0102 	orr.w	r1, r1, #2
   18f74:	f010 f9b3 	bl	292de <log_0>
   18f78:	e7f1      	b.n	18f5e <bt_read_static_addr+0x4a>
	rp = (void *)rsp->data;
   18f7a:	9801      	ldr	r0, [sp, #4]
   18f7c:	6882      	ldr	r2, [r0, #8]
	cnt = MIN(rp->num_addrs, size);
   18f7e:	7854      	ldrb	r4, [r2, #1]
   18f80:	f04f 0c16 	mov.w	ip, #22
   18f84:	42b4      	cmp	r4, r6
   18f86:	bf28      	it	cs
   18f88:	4634      	movcs	r4, r6
   18f8a:	eb02 070c 	add.w	r7, r2, ip
	for (i = 0; i < cnt; i++) {
   18f8e:	42a3      	cmp	r3, r4
   18f90:	db10      	blt.n	18fb4 <bt_read_static_addr+0xa0>
	net_buf_unref(rsp);
   18f92:	f007 f833 	bl	1fffc <net_buf_unref>
	if (!cnt) {
   18f96:	2c00      	cmp	r4, #0
   18f98:	d1e2      	bne.n	18f60 <bt_read_static_addr+0x4c>
		BT_WARN("No static addresses stored in controller");
   18f9a:	490e      	ldr	r1, [pc, #56]	; (18fd4 <bt_read_static_addr+0xc0>)
   18f9c:	680b      	ldr	r3, [r1, #0]
   18f9e:	f013 0f06 	tst.w	r3, #6
   18fa2:	d0dc      	beq.n	18f5e <bt_read_static_addr+0x4a>
   18fa4:	4b0c      	ldr	r3, [pc, #48]	; (18fd8 <bt_read_static_addr+0xc4>)
   18fa6:	480f      	ldr	r0, [pc, #60]	; (18fe4 <bt_read_static_addr+0xd0>)
   18fa8:	1ac9      	subs	r1, r1, r3
   18faa:	0889      	lsrs	r1, r1, #2
   18fac:	0189      	lsls	r1, r1, #6
   18fae:	f041 0102 	orr.w	r1, r1, #2
   18fb2:	e7c4      	b.n	18f3e <bt_read_static_addr+0x2a>
   18fb4:	1c96      	adds	r6, r2, #2
   18fb6:	fb0c 5103 	mla	r1, ip, r3, r5
   18fba:	f856 eb04 	ldr.w	lr, [r6], #4
   18fbe:	f841 eb04 	str.w	lr, [r1], #4
   18fc2:	42be      	cmp	r6, r7
   18fc4:	d1f9      	bne.n	18fba <bt_read_static_addr+0xa6>
   18fc6:	883e      	ldrh	r6, [r7, #0]
   18fc8:	800e      	strh	r6, [r1, #0]
	for (i = 0; i < cnt; i++) {
   18fca:	3301      	adds	r3, #1
   18fcc:	e7df      	b.n	18f8e <bt_read_static_addr+0x7a>
   18fce:	bf00      	nop
   18fd0:	200002a8 	.word	0x200002a8
   18fd4:	20000754 	.word	0x20000754
   18fd8:	20000740 	.word	0x20000740
   18fdc:	00031490 	.word	0x00031490
   18fe0:	000314bc 	.word	0x000314bc
   18fe4:	000314dc 	.word	0x000314dc

00018fe8 <bt_setup_random_id_addr>:
#endif /* CONFIG_BT_HCI_VS_EXT */

int bt_setup_random_id_addr(void)
{
   18fe8:	b570      	push	{r4, r5, r6, lr}
#if defined(CONFIG_BT_HCI_VS_EXT) || defined(CONFIG_BT_CTLR)
	/* Only read the addresses if the user has not already configured one or
	 * more identities (!bt_dev.id_count).
	 */
	if (!bt_dev.id_count) {
   18fea:	4d14      	ldr	r5, [pc, #80]	; (1903c <bt_setup_random_id_addr+0x54>)
   18fec:	79ec      	ldrb	r4, [r5, #7]
{
   18fee:	b088      	sub	sp, #32
	if (!bt_dev.id_count) {
   18ff0:	b92c      	cbnz	r4, 18ffe <bt_setup_random_id_addr+0x16>
		struct bt_hci_vs_static_addr addrs[CONFIG_BT_ID_MAX];

		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
   18ff2:	2101      	movs	r1, #1
   18ff4:	a802      	add	r0, sp, #8
   18ff6:	f7ff ff8d 	bl	18f14 <bt_read_static_addr>
   18ffa:	71e8      	strb	r0, [r5, #7]

		if (bt_dev.id_count) {
   18ffc:	b9b0      	cbnz	r0, 1902c <bt_setup_random_id_addr+0x44>

	if (IS_ENABLED(CONFIG_BT_PRIVACY) && IS_ENABLED(CONFIG_BT_SETTINGS)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_STORE_ID);
	}

	return bt_id_create(NULL, NULL);
   18ffe:	2100      	movs	r1, #0
   19000:	4608      	mov	r0, r1
   19002:	f7ff fe43 	bl	18c8c <bt_id_create>
   19006:	e00f      	b.n	19028 <bt_setup_random_id_addr+0x40>
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   19008:	ab02      	add	r3, sp, #8
   1900a:	fb06 3102 	mla	r1, r6, r2, r3
   1900e:	f10d 0001 	add.w	r0, sp, #1
   19012:	f011 fd77 	bl	2ab04 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
   19016:	2301      	movs	r3, #1
				err = id_create(i, &addr, irk);
   19018:	4669      	mov	r1, sp
   1901a:	4610      	mov	r0, r2
				addr.type = BT_ADDR_LE_RANDOM;
   1901c:	f88d 3000 	strb.w	r3, [sp]
				err = id_create(i, &addr, irk);
   19020:	f7ff fdf0 	bl	18c04 <id_create.isra.0>
				if (err) {
   19024:	3401      	adds	r4, #1
   19026:	b110      	cbz	r0, 1902e <bt_setup_random_id_addr+0x46>
}
   19028:	b008      	add	sp, #32
   1902a:	bd70      	pop	{r4, r5, r6, pc}
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
   1902c:	2616      	movs	r6, #22
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
   1902e:	79eb      	ldrb	r3, [r5, #7]
   19030:	b2e2      	uxtb	r2, r4
   19032:	4293      	cmp	r3, r2
   19034:	d8e8      	bhi.n	19008 <bt_setup_random_id_addr+0x20>
			return 0;
   19036:	2000      	movs	r0, #0
   19038:	e7f6      	b.n	19028 <bt_setup_random_id_addr+0x40>
   1903a:	bf00      	nop
   1903c:	200002a8 	.word	0x200002a8

00019040 <bt_id_set_create_conn_own_addr>:
	return true;
#endif
}

int bt_id_set_create_conn_own_addr(bool use_filter, uint8_t *own_addr_type)
{
   19040:	b538      	push	{r3, r4, r5, lr}

		/* If Static Random address is used as Identity address we
		 * need to restore it before creating connection. Otherwise
		 * NRPA used for active scan could be used for connection.
		 */
		if (addr->type == BT_ADDR_LE_RANDOM) {
   19042:	4c07      	ldr	r4, [pc, #28]	; (19060 <bt_id_set_create_conn_own_addr+0x20>)
   19044:	7823      	ldrb	r3, [r4, #0]
   19046:	2b01      	cmp	r3, #1
{
   19048:	460d      	mov	r5, r1
		if (addr->type == BT_ADDR_LE_RANDOM) {
   1904a:	d003      	beq.n	19054 <bt_id_set_create_conn_own_addr+0x14>
			if (err) {
				return err;
			}
		}

		*own_addr_type = addr->type;
   1904c:	7823      	ldrb	r3, [r4, #0]
   1904e:	702b      	strb	r3, [r5, #0]
	}

	return 0;
   19050:	2000      	movs	r0, #0
}
   19052:	bd38      	pop	{r3, r4, r5, pc}
			err = set_random_address(&addr->a);
   19054:	1c60      	adds	r0, r4, #1
   19056:	f7ff fda7 	bl	18ba8 <set_random_address>
			if (err) {
   1905a:	2800      	cmp	r0, #0
   1905c:	d0f6      	beq.n	1904c <bt_id_set_create_conn_own_addr+0xc>
   1905e:	e7f8      	b.n	19052 <bt_id_set_create_conn_own_addr+0x12>
   19060:	200002a8 	.word	0x200002a8

00019064 <bt_id_set_scan_own_addr>:

	return adv && atomic_test_bit(adv->flags, BT_ADV_ENABLED);
}

int bt_id_set_scan_own_addr(bool active_scan, uint8_t *own_addr_type)
{
   19064:	b510      	push	{r4, lr}
			*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
		} else {
			*own_addr_type = BT_ADDR_LE_RANDOM;
		}
	} else {
		*own_addr_type = bt_dev.id_addr[0].type;
   19066:	4b05      	ldr	r3, [pc, #20]	; (1907c <bt_id_set_scan_own_addr+0x18>)
   19068:	781b      	ldrb	r3, [r3, #0]
   1906a:	700b      	strb	r3, [r1, #0]
		 * (through Kconfig).
		 * Use same RPA as legacy advertiser if advertising.
		 */
		if (!IS_ENABLED(CONFIG_BT_SCAN_WITH_IDENTITY) &&
		    !is_adv_using_rand_addr()) {
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   1906c:	2000      	movs	r0, #0
{
   1906e:	460c      	mov	r4, r1
			err = bt_id_set_private_addr(BT_ID_DEFAULT);
   19070:	f011 fd56 	bl	2ab20 <bt_id_set_private_addr>
			if (err) {
   19074:	b908      	cbnz	r0, 1907a <bt_id_set_scan_own_addr+0x16>

				BT_WARN("Ignoring failure to set address for passive scan (%d)",
					err);
			}

			*own_addr_type = BT_ADDR_LE_RANDOM;
   19076:	2301      	movs	r3, #1
   19078:	7023      	strb	r3, [r4, #0]
			}
		}
	}

	return 0;
}
   1907a:	bd10      	pop	{r4, pc}
   1907c:	200002a8 	.word	0x200002a8

00019080 <bt_le_oob_get_local>:
	return 0;
}
#endif /* CONFIG_BT_BREDR */

int bt_le_oob_get_local(uint8_t id, struct bt_le_oob *oob)
{
   19080:	b508      	push	{r3, lr}
   19082:	4602      	mov	r2, r0
   19084:	4608      	mov	r0, r1
   19086:	490a      	ldr	r1, [pc, #40]	; (190b0 <bt_le_oob_get_local+0x30>)
   19088:	f3bf 8f5b 	dmb	ish
   1908c:	680b      	ldr	r3, [r1, #0]
   1908e:	f3bf 8f5b 	dmb	ish
	struct bt_le_ext_adv *adv = NULL;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   19092:	079b      	lsls	r3, r3, #30
   19094:	d505      	bpl.n	190a2 <bt_le_oob_get_local+0x22>
		return -EAGAIN;
	}

	if (id >= CONFIG_BT_ID_MAX) {
   19096:	b93a      	cbnz	r2, 190a8 <bt_le_oob_get_local+0x28>

		le_force_rpa_timeout();

		bt_addr_le_copy(&oob->addr, &bt_dev.random_addr);
	} else {
		bt_addr_le_copy(&oob->addr, &bt_dev.id_addr[id]);
   19098:	39cc      	subs	r1, #204	; 0xcc
   1909a:	f011 fd38 	bl	2ab0e <bt_addr_le_copy>
		if (err && err != -ENOTSUP) {
			return err;
		}
	}

	return 0;
   1909e:	4610      	mov	r0, r2
}
   190a0:	bd08      	pop	{r3, pc}
		return -EAGAIN;
   190a2:	f06f 000a 	mvn.w	r0, #10
   190a6:	e7fb      	b.n	190a0 <bt_le_oob_get_local+0x20>
		return -EINVAL;
   190a8:	f06f 0015 	mvn.w	r0, #21
   190ac:	e7f8      	b.n	190a0 <bt_le_oob_get_local+0x20>
   190ae:	bf00      	nop
   190b0:	20000374 	.word	0x20000374

000190b4 <bt_id_init>:
}
#endif /* !defined(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY) */
#endif /* defined(CONFIG_BT_SMP) */

int bt_id_init(void)
{
   190b4:	b538      	push	{r3, r4, r5, lr}
	int err;

	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   190b6:	4d19      	ldr	r5, [pc, #100]	; (1911c <bt_id_init+0x68>)
   190b8:	79eb      	ldrb	r3, [r5, #7]
   190ba:	b113      	cbz	r3, 190c2 <bt_id_init+0xe>

#if defined(CONFIG_BT_PRIVACY)
	k_work_init_delayable(&bt_dev.rpa_update, rpa_timeout);
#endif

	return 0;
   190bc:	2400      	movs	r4, #0
}
   190be:	4620      	mov	r0, r4
   190c0:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_setup_public_id_addr();
   190c2:	f7ff ff17 	bl	18ef4 <bt_setup_public_id_addr>
		if (err) {
   190c6:	4604      	mov	r4, r0
   190c8:	b168      	cbz	r0, 190e6 <bt_id_init+0x32>
			BT_ERR("Unable to set identity address");
   190ca:	4915      	ldr	r1, [pc, #84]	; (19120 <bt_id_init+0x6c>)
   190cc:	680b      	ldr	r3, [r1, #0]
   190ce:	075a      	lsls	r2, r3, #29
   190d0:	d0f5      	beq.n	190be <bt_id_init+0xa>
   190d2:	4b14      	ldr	r3, [pc, #80]	; (19124 <bt_id_init+0x70>)
   190d4:	4814      	ldr	r0, [pc, #80]	; (19128 <bt_id_init+0x74>)
   190d6:	1ac9      	subs	r1, r1, r3
   190d8:	0889      	lsrs	r1, r1, #2
   190da:	0189      	lsls	r1, r1, #6
   190dc:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to set random address");
   190e0:	f010 f8fd 	bl	292de <log_0>
   190e4:	e7eb      	b.n	190be <bt_id_init+0xa>
	if (!IS_ENABLED(CONFIG_BT_SETTINGS) && !bt_dev.id_count) {
   190e6:	79eb      	ldrb	r3, [r5, #7]
   190e8:	2b00      	cmp	r3, #0
   190ea:	d1e7      	bne.n	190bc <bt_id_init+0x8>
		err = bt_setup_random_id_addr();
   190ec:	f7ff ff7c 	bl	18fe8 <bt_setup_random_id_addr>
		if (err) {
   190f0:	4604      	mov	r4, r0
   190f2:	2800      	cmp	r0, #0
   190f4:	d1e9      	bne.n	190ca <bt_id_init+0x16>
		err = set_random_address(&bt_dev.id_addr[0].a);
   190f6:	1c68      	adds	r0, r5, #1
   190f8:	f7ff fd56 	bl	18ba8 <set_random_address>
		if (err) {
   190fc:	4604      	mov	r4, r0
   190fe:	2800      	cmp	r0, #0
   19100:	d0dc      	beq.n	190bc <bt_id_init+0x8>
			BT_ERR("Unable to set random address");
   19102:	4907      	ldr	r1, [pc, #28]	; (19120 <bt_id_init+0x6c>)
   19104:	680b      	ldr	r3, [r1, #0]
   19106:	075b      	lsls	r3, r3, #29
   19108:	d0d9      	beq.n	190be <bt_id_init+0xa>
   1910a:	4b06      	ldr	r3, [pc, #24]	; (19124 <bt_id_init+0x70>)
   1910c:	4807      	ldr	r0, [pc, #28]	; (1912c <bt_id_init+0x78>)
   1910e:	1ac9      	subs	r1, r1, r3
   19110:	0889      	lsrs	r1, r1, #2
   19112:	0189      	lsls	r1, r1, #6
   19114:	f041 0101 	orr.w	r1, r1, #1
   19118:	e7e2      	b.n	190e0 <bt_id_init+0x2c>
   1911a:	bf00      	nop
   1911c:	200002a8 	.word	0x200002a8
   19120:	20000754 	.word	0x20000754
   19124:	20000740 	.word	0x20000740
   19128:	00031505 	.word	0x00031505
   1912c:	00031524 	.word	0x00031524

00019130 <atomic_get.constprop.0>:
   19130:	4b03      	ldr	r3, [pc, #12]	; (19140 <atomic_get.constprop.0+0x10>)
   19132:	f3bf 8f5b 	dmb	ish
   19136:	6818      	ldr	r0, [r3, #0]
   19138:	f3bf 8f5b 	dmb	ish
}
   1913c:	4770      	bx	lr
   1913e:	bf00      	nop
   19140:	20000374 	.word	0x20000374

00019144 <bt_le_scan_set_enable_legacy>:

	return 0;
}

static int bt_le_scan_set_enable_legacy(uint8_t enable)
{
   19144:	b530      	push	{r4, r5, lr}
	struct bt_hci_cp_le_set_scan_enable *cp;
	struct bt_hci_cmd_state_set state;
	struct net_buf *buf;
	int err;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   19146:	2102      	movs	r1, #2
{
   19148:	b087      	sub	sp, #28
   1914a:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE, sizeof(*cp));
   1914c:	f242 000c 	movw	r0, #8204	; 0x200c
   19150:	f7fe fbe2 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   19154:	4605      	mov	r5, r0
   19156:	b308      	cbz	r0, 1919c <bt_le_scan_set_enable_legacy+0x58>
	return net_buf_simple_add(&buf->b, len);
   19158:	2102      	movs	r1, #2
   1915a:	3008      	adds	r0, #8
   1915c:	f007 f87e 	bl	2025c <net_buf_simple_add>
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));

	if (enable == BT_HCI_LE_SCAN_ENABLE) {
   19160:	2c01      	cmp	r4, #1
   19162:	4602      	mov	r2, r0
   19164:	d117      	bne.n	19196 <bt_le_scan_set_enable_legacy+0x52>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19166:	f7ff ffe3 	bl	19130 <atomic_get.constprop.0>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1916a:	f3c0 2000 	ubfx	r0, r0, #8, #1
   1916e:	7050      	strb	r0, [r2, #1]
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
	}

	cp->enable = enable;

	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   19170:	1e63      	subs	r3, r4, #1
	cp->enable = enable;
   19172:	7014      	strb	r4, [r2, #0]
	bt_hci_cmd_state_set_init(buf, &state, bt_dev.flags, BT_DEV_SCANNING,
   19174:	425c      	negs	r4, r3
   19176:	415c      	adcs	r4, r3
   19178:	4a0a      	ldr	r2, [pc, #40]	; (191a4 <bt_le_scan_set_enable_legacy+0x60>)
   1917a:	9400      	str	r4, [sp, #0]
   1917c:	a903      	add	r1, sp, #12
   1917e:	4628      	mov	r0, r5
   19180:	2305      	movs	r3, #5
   19182:	f7fe fbb7 	bl	178f4 <bt_hci_cmd_state_set_init>
				  enable == BT_HCI_LE_SCAN_ENABLE);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, NULL);
   19186:	2200      	movs	r2, #0
   19188:	4629      	mov	r1, r5
   1918a:	f242 000c 	movw	r0, #8204	; 0x200c
   1918e:	f7fe fc0b 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
		return err;
	}

	return 0;
}
   19192:	b007      	add	sp, #28
   19194:	bd30      	pop	{r4, r5, pc}
		cp->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
   19196:	2300      	movs	r3, #0
   19198:	7043      	strb	r3, [r0, #1]
   1919a:	e7e9      	b.n	19170 <bt_le_scan_set_enable_legacy+0x2c>
		return -ENOBUFS;
   1919c:	f06f 0068 	mvn.w	r0, #104	; 0x68
   191a0:	e7f7      	b.n	19192 <bt_le_scan_set_enable_legacy+0x4e>
   191a2:	bf00      	nop
   191a4:	20000374 	.word	0x20000374

000191a8 <start_le_scan_legacy>:

	return 0;
}

static int start_le_scan_legacy(uint8_t scan_type, uint16_t interval, uint16_t window)
{
   191a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   191aa:	2300      	movs	r3, #0
   191ac:	f88d 3005 	strb.w	r3, [sp, #5]

	if (IS_ENABLED(CONFIG_BT_FILTER_ACCEPT_LIST) &&
	    atomic_test_bit(bt_dev.flags, BT_DEV_SCAN_FILTERED)) {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_FILTER;
	} else {
		set_param.filter_policy = BT_HCI_LE_SCAN_FP_BASIC_NO_FILTER;
   191b0:	f88d 3006 	strb.w	r3, [sp, #6]
	}

	active_scan = scan_type == BT_HCI_LE_SCAN_ACTIVE;
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   191b4:	1e43      	subs	r3, r0, #1
	set_param.scan_type = scan_type;
   191b6:	f88d 0000 	strb.w	r0, [sp]
{
   191ba:	4605      	mov	r5, r0
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   191bc:	4258      	negs	r0, r3
	set_param.interval = sys_cpu_to_le16(interval);
   191be:	f8ad 1001 	strh.w	r1, [sp, #1]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   191c2:	4158      	adcs	r0, r3
   191c4:	f10d 0105 	add.w	r1, sp, #5
	set_param.window = sys_cpu_to_le16(window);
   191c8:	f8ad 2003 	strh.w	r2, [sp, #3]
	err = bt_id_set_scan_own_addr(active_scan, &set_param.addr_type);
   191cc:	f7ff ff4a 	bl	19064 <bt_id_set_scan_own_addr>
	if (err) {
   191d0:	4604      	mov	r4, r0
   191d2:	bb38      	cbnz	r0, 19224 <start_le_scan_legacy+0x7c>
		return err;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM, sizeof(set_param));
   191d4:	2107      	movs	r1, #7
   191d6:	f242 000b 	movw	r0, #8203	; 0x200b
   191da:	f7fe fb9d 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   191de:	4606      	mov	r6, r0
   191e0:	b348      	cbz	r0, 19236 <start_le_scan_legacy+0x8e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   191e2:	2207      	movs	r2, #7
   191e4:	4669      	mov	r1, sp
   191e6:	3008      	adds	r0, #8
   191e8:	f012 ff46 	bl	2c078 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_PARAM, buf, NULL);
   191ec:	4622      	mov	r2, r4
   191ee:	4631      	mov	r1, r6
   191f0:	f242 000b 	movw	r0, #8203	; 0x200b
   191f4:	f7fe fbd8 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   191f8:	4604      	mov	r4, r0
   191fa:	b998      	cbnz	r0, 19224 <start_le_scan_legacy+0x7c>
	return bt_le_scan_set_enable_legacy(enable);
   191fc:	2001      	movs	r0, #1
   191fe:	f7ff ffa1 	bl	19144 <bt_le_scan_set_enable_legacy>
		return err;
	}

	err = bt_le_scan_set_enable(BT_HCI_LE_SCAN_ENABLE);
	if (err) {
   19202:	4604      	mov	r4, r0
   19204:	b970      	cbnz	r0, 19224 <start_le_scan_legacy+0x7c>
	if (val) {
   19206:	2d01      	cmp	r5, #1
   19208:	d10f      	bne.n	1922a <start_le_scan_legacy+0x82>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1920a:	f3bf 8f5b 	dmb	ish
   1920e:	4b0b      	ldr	r3, [pc, #44]	; (1923c <start_le_scan_legacy+0x94>)
   19210:	e853 2f00 	ldrex	r2, [r3]
   19214:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   19218:	e843 2100 	strex	r1, r2, [r3]
   1921c:	2900      	cmp	r1, #0
   1921e:	d1f7      	bne.n	19210 <start_le_scan_legacy+0x68>
   19220:	f3bf 8f5b 	dmb	ish
	}

	atomic_set_bit_to(bt_dev.flags, BT_DEV_ACTIVE_SCAN, active_scan);

	return 0;
}
   19224:	4620      	mov	r0, r4
   19226:	b002      	add	sp, #8
   19228:	bd70      	pop	{r4, r5, r6, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1922a:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1922e:	4803      	ldr	r0, [pc, #12]	; (1923c <start_le_scan_legacy+0x94>)
   19230:	f011 fc8a 	bl	2ab48 <atomic_and>
   19234:	e7f6      	b.n	19224 <start_le_scan_legacy+0x7c>
		return -ENOBUFS;
   19236:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1923a:	e7f3      	b.n	19224 <start_le_scan_legacy+0x7c>
   1923c:	20000374 	.word	0x20000374

00019240 <bt_scan_reset>:
	scan_dev_found_cb = NULL;
   19240:	4b01      	ldr	r3, [pc, #4]	; (19248 <bt_scan_reset+0x8>)
   19242:	2200      	movs	r2, #0
   19244:	601a      	str	r2, [r3, #0]
}
   19246:	4770      	bx	lr
   19248:	2000273c 	.word	0x2000273c

0001924c <bt_le_scan_update>:

	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
}

int bt_le_scan_update(bool fast_scan)
{
   1924c:	b538      	push	{r3, r4, r5, lr}
   1924e:	4605      	mov	r5, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19250:	f7ff ff6e 	bl	19130 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   19254:	0641      	lsls	r1, r0, #25
   19256:	f3c0 1280 	ubfx	r2, r0, #6, #1
   1925a:	d501      	bpl.n	19260 <bt_le_scan_update+0x14>
		/* don't restart scan if we have pending connection */
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
					       BT_CONN_CONNECT);
		if (conn) {
			bt_conn_unref(conn);
			return 0;
   1925c:	2000      	movs	r0, #0
   1925e:	e031      	b.n	192c4 <bt_le_scan_update+0x78>
   19260:	f7ff ff66 	bl	19130 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   19264:	0683      	lsls	r3, r0, #26
   19266:	d428      	bmi.n	192ba <bt_le_scan_update+0x6e>
		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   19268:	2100      	movs	r1, #0
   1926a:	2206      	movs	r2, #6
   1926c:	4608      	mov	r0, r1
   1926e:	f000 ff7b 	bl	1a168 <bt_conn_lookup_state_le>
		if (conn) {
   19272:	4604      	mov	r4, r0
   19274:	bb38      	cbnz	r0, 192c6 <bt_le_scan_update+0x7a>
		}

		conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL,
   19276:	2202      	movs	r2, #2
   19278:	4601      	mov	r1, r0
   1927a:	f000 ff75 	bl	1a168 <bt_conn_lookup_state_le>
					       BT_CONN_CONNECT_SCAN);
		if (conn) {
   1927e:	2800      	cmp	r0, #0
   19280:	d0ec      	beq.n	1925c <bt_le_scan_update+0x10>
   19282:	f3bf 8f5b 	dmb	ish
   19286:	4b11      	ldr	r3, [pc, #68]	; (192cc <bt_le_scan_update+0x80>)
   19288:	e853 2f00 	ldrex	r2, [r3]
   1928c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
   19290:	e843 2100 	strex	r1, r2, [r3]
   19294:	2900      	cmp	r1, #0
   19296:	d1f7      	bne.n	19288 <bt_le_scan_update+0x3c>
   19298:	f3bf 8f5b 	dmb	ish
			atomic_set_bit(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP);

			bt_conn_unref(conn);
   1929c:	f000 fc8a 	bl	19bb4 <bt_conn_unref>
		window = CONFIG_BT_BACKGROUND_SCAN_WINDOW;
   192a0:	2d00      	cmp	r5, #0
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   192a2:	4620      	mov	r0, r4
   192a4:	bf18      	it	ne
   192a6:	2230      	movne	r2, #48	; 0x30
		return start_passive_scan(fast_scan);
	}
#endif

	return 0;
}
   192a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return start_le_scan_legacy(BT_HCI_LE_SCAN_PASSIVE, interval, window);
   192ac:	bf0a      	itet	eq
   192ae:	2212      	moveq	r2, #18
   192b0:	2160      	movne	r1, #96	; 0x60
   192b2:	f44f 6100 	moveq.w	r1, #2048	; 0x800
   192b6:	f7ff bf77 	b.w	191a8 <start_le_scan_legacy>
	return bt_le_scan_set_enable_legacy(enable);
   192ba:	4610      	mov	r0, r2
   192bc:	f7ff ff42 	bl	19144 <bt_le_scan_set_enable_legacy>
		if (err) {
   192c0:	2800      	cmp	r0, #0
   192c2:	d0d1      	beq.n	19268 <bt_le_scan_update+0x1c>
}
   192c4:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
   192c6:	f000 fc75 	bl	19bb4 <bt_conn_unref>
   192ca:	e7c7      	b.n	1925c <bt_le_scan_update+0x10>
   192cc:	20000374 	.word	0x20000374

000192d0 <bt_hci_le_adv_report>:
#endif /* CONFIG_BT_DF_CONNECTIONLESS_CTE_RX */
#endif /* defined(CONFIG_BT_PER_ADV_SYNC) */
#endif /* defined(CONFIG_BT_EXT_ADV) */

void bt_hci_le_adv_report(struct net_buf *buf)
{
   192d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 *
 * @return The 8-bit removed value
 */
static inline uint8_t net_buf_pull_u8(struct net_buf *buf)
{
	return net_buf_simple_pull_u8(&buf->b);
   192d4:	f100 0808 	add.w	r8, r0, #8
   192d8:	b08d      	sub	sp, #52	; 0x34
   192da:	4604      	mov	r4, r0
   192dc:	4640      	mov	r0, r8
   192de:	f012 feaf 	bl	2c040 <net_buf_simple_pull_u8>
	if (scan_dev_found_cb) {
   192e2:	f8df a1e4 	ldr.w	sl, [pc, #484]	; 194c8 <bt_hci_le_adv_report+0x1f8>
   192e6:	4607      	mov	r7, r0
	uint8_t num_reports = net_buf_pull_u8(buf);
	struct bt_hci_evt_le_advertising_info *evt;

	BT_DBG("Adv number of reports %u",  num_reports);

	while (num_reports--) {
   192e8:	b17f      	cbz	r7, 1930a <bt_hci_le_adv_report+0x3a>
		struct bt_le_scan_recv_info adv_info;

		if (buf->len < sizeof(*evt)) {
   192ea:	89a3      	ldrh	r3, [r4, #12]
   192ec:	2b08      	cmp	r3, #8
   192ee:	d80f      	bhi.n	19310 <bt_hci_le_adv_report+0x40>
			BT_ERR("Unexpected end of buffer");
   192f0:	4970      	ldr	r1, [pc, #448]	; (194b4 <bt_hci_le_adv_report+0x1e4>)
   192f2:	680b      	ldr	r3, [r1, #0]
   192f4:	075e      	lsls	r6, r3, #29
   192f6:	d008      	beq.n	1930a <bt_hci_le_adv_report+0x3a>
   192f8:	4b6f      	ldr	r3, [pc, #444]	; (194b8 <bt_hci_le_adv_report+0x1e8>)
   192fa:	4870      	ldr	r0, [pc, #448]	; (194bc <bt_hci_le_adv_report+0x1ec>)
   192fc:	1ac9      	subs	r1, r1, r3
   192fe:	0889      	lsrs	r1, r1, #2
   19300:	0189      	lsls	r1, r1, #6
   19302:	f041 0101 	orr.w	r1, r1, #1
   19306:	f00f ffea 	bl	292de <log_0>

		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);

		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
	}
}
   1930a:	b00d      	add	sp, #52	; 0x34
   1930c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   19310:	2109      	movs	r1, #9
   19312:	4640      	mov	r0, r8
   19314:	f006 ff80 	bl	20218 <net_buf_simple_pull_mem>
		adv_info.rssi = evt->data[evt->length];
   19318:	7a01      	ldrb	r1, [r0, #8]
		adv_info.tx_power = BT_GAP_TX_POWER_INVALID;
   1931a:	237f      	movs	r3, #127	; 0x7f
   1931c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
		adv_info.rssi = evt->data[evt->length];
   19320:	1843      	adds	r3, r0, r1
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   19322:	2201      	movs	r2, #1
		adv_info.rssi = evt->data[evt->length];
   19324:	7a5b      	ldrb	r3, [r3, #9]
   19326:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
		adv_info.sid = BT_GAP_SID_INVALID;
   1932a:	23ff      	movs	r3, #255	; 0xff
   1932c:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
		adv_info.interval = 0U;
   19330:	2300      	movs	r3, #0
   19332:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
		adv_info.primary_phy = BT_GAP_LE_PHY_1M;
   19336:	f8ad 202c 	strh.w	r2, [sp, #44]	; 0x2c
		adv_info.adv_type = evt->evt_type;
   1933a:	7802      	ldrb	r2, [r0, #0]
   1933c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
   19340:	2a04      	cmp	r2, #4
   19342:	bf9c      	itt	ls
   19344:	4b5e      	ldrls	r3, [pc, #376]	; (194c0 <bt_hci_le_adv_report+0x1f0>)
   19346:	5c9b      	ldrbls	r3, [r3, r2]
		adv_info.adv_props = get_adv_props_legacy(evt->evt_type);
   19348:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
		le_adv_recv(&evt->addr, &adv_info, &buf->b, evt->length);
   1934c:	b28b      	uxth	r3, r1
   1934e:	4606      	mov	r6, r0
   19350:	f100 0901 	add.w	r9, r0, #1
   19354:	9301      	str	r3, [sp, #4]
   19356:	f7ff feeb 	bl	19130 <atomic_get.constprop.0>
	if (!IS_ENABLED(CONFIG_BT_PRIVACY) &&
   1935a:	0645      	lsls	r5, r0, #25
   1935c:	d50b      	bpl.n	19376 <bt_hci_le_adv_report+0xa6>
	    atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN) &&
   1935e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   19362:	0758      	lsls	r0, r3, #29
   19364:	d507      	bpl.n	19376 <bt_hci_le_adv_report+0xa6>
		net_buf_pull(buf, evt->length + sizeof(adv_info.rssi));
   19366:	7a31      	ldrb	r1, [r6, #8]
	return net_buf_simple_pull(&buf->b, len);
   19368:	4640      	mov	r0, r8
   1936a:	3101      	adds	r1, #1
   1936c:	3f01      	subs	r7, #1
   1936e:	f006 ff33 	bl	201d8 <net_buf_simple_pull>
   19372:	b2ff      	uxtb	r7, r7
   19374:	e7b8      	b.n	192e8 <bt_hci_le_adv_report+0x18>
	if (addr->type == BT_ADDR_LE_PUBLIC_ID ||
   19376:	7873      	ldrb	r3, [r6, #1]
   19378:	1e9a      	subs	r2, r3, #2
   1937a:	2a01      	cmp	r2, #1
   1937c:	d84e      	bhi.n	1941c <bt_hci_le_adv_report+0x14c>
		bt_addr_le_copy(&id_addr, addr);
   1937e:	4649      	mov	r1, r9
   19380:	a804      	add	r0, sp, #16
   19382:	f011 fbf0 	bl	2ab66 <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
   19386:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1938a:	3b02      	subs	r3, #2
   1938c:	f88d 3010 	strb.w	r3, [sp, #16]
	info->addr = &id_addr;
   19390:	ab04      	add	r3, sp, #16
   19392:	9308      	str	r3, [sp, #32]
	if (scan_dev_found_cb) {
   19394:	f8da 3000 	ldr.w	r3, [sl]
   19398:	b1b3      	cbz	r3, 193c8 <bt_hci_le_adv_report+0xf8>
	state->offset = net_buf_simple_headroom(buf);
   1939a:	4640      	mov	r0, r8
   1939c:	f012 fe60 	bl	2c060 <net_buf_simple_headroom>
	state->len = buf->len;
   193a0:	89a3      	ldrh	r3, [r4, #12]
   193a2:	9302      	str	r3, [sp, #8]
		buf->len = len;
   193a4:	9b01      	ldr	r3, [sp, #4]
   193a6:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   193a8:	4683      	mov	fp, r0
		scan_dev_found_cb(&id_addr, info->rssi, info->adv_type, buf);
   193aa:	4643      	mov	r3, r8
   193ac:	a804      	add	r0, sp, #16
   193ae:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   193b2:	f99d 1025 	ldrsb.w	r1, [sp, #37]	; 0x25
   193b6:	f8da 5000 	ldr.w	r5, [sl]
   193ba:	47a8      	blx	r5
	buf->data = buf->__buf + state->offset;
   193bc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   193be:	9b02      	ldr	r3, [sp, #8]
   193c0:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   193c2:	fa10 f08b 	uxtah	r0, r0, fp
   193c6:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   193c8:	4b3e      	ldr	r3, [pc, #248]	; (194c4 <bt_hci_le_adv_report+0x1f4>)
   193ca:	681b      	ldr	r3, [r3, #0]
   193cc:	2b00      	cmp	r3, #0
   193ce:	d036      	beq.n	1943e <bt_hci_le_adv_report+0x16e>
   193d0:	f1b3 0208 	subs.w	r2, r3, #8
   193d4:	d033      	beq.n	1943e <bt_hci_le_adv_report+0x16e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   193d6:	681d      	ldr	r5, [r3, #0]
   193d8:	b105      	cbz	r5, 193dc <bt_hci_le_adv_report+0x10c>
   193da:	3d08      	subs	r5, #8
		if (listener->recv) {
   193dc:	6813      	ldr	r3, [r2, #0]
   193de:	9203      	str	r2, [sp, #12]
   193e0:	b193      	cbz	r3, 19408 <bt_hci_le_adv_report+0x138>
	state->offset = net_buf_simple_headroom(buf);
   193e2:	4640      	mov	r0, r8
   193e4:	f012 fe3c 	bl	2c060 <net_buf_simple_headroom>
	state->len = buf->len;
   193e8:	89a3      	ldrh	r3, [r4, #12]
			listener->recv(info, buf);
   193ea:	9a03      	ldr	r2, [sp, #12]
   193ec:	9302      	str	r3, [sp, #8]
			buf->len = len;
   193ee:	9b01      	ldr	r3, [sp, #4]
   193f0:	81a3      	strh	r3, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   193f2:	4683      	mov	fp, r0
			listener->recv(info, buf);
   193f4:	6812      	ldr	r2, [r2, #0]
   193f6:	a808      	add	r0, sp, #32
   193f8:	4641      	mov	r1, r8
   193fa:	4790      	blx	r2
	buf->data = buf->__buf + state->offset;
   193fc:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   193fe:	9b02      	ldr	r3, [sp, #8]
   19400:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf + state->offset;
   19402:	fa10 f08b 	uxtah	r0, r0, fp
   19406:	60a0      	str	r0, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&scan_cbs, listener, next, node) {
   19408:	b1cd      	cbz	r5, 1943e <bt_hci_le_adv_report+0x16e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1940a:	f115 0308 	adds.w	r3, r5, #8
   1940e:	d002      	beq.n	19416 <bt_hci_le_adv_report+0x146>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   19410:	68ab      	ldr	r3, [r5, #8]
   19412:	b103      	cbz	r3, 19416 <bt_hci_le_adv_report+0x146>
   19414:	3b08      	subs	r3, #8
		adv_info.adv_type = evt->evt_type;
   19416:	462a      	mov	r2, r5
   19418:	461d      	mov	r5, r3
   1941a:	e7df      	b.n	193dc <bt_hci_le_adv_report+0x10c>
	} else if (addr->type == BT_HCI_PEER_ADDR_ANONYMOUS) {
   1941c:	2bff      	cmp	r3, #255	; 0xff
   1941e:	d108      	bne.n	19432 <bt_hci_le_adv_report+0x162>
		bt_addr_le_copy(&id_addr, BT_ADDR_LE_ANY);
   19420:	2300      	movs	r3, #0
   19422:	9306      	str	r3, [sp, #24]
   19424:	a906      	add	r1, sp, #24
   19426:	f8cd 301b 	str.w	r3, [sp, #27]
		bt_addr_le_copy(&id_addr,
   1942a:	a804      	add	r0, sp, #16
   1942c:	f011 fb9b 	bl	2ab66 <bt_addr_le_copy>
   19430:	e7ae      	b.n	19390 <bt_hci_le_adv_report+0xc0>
   19432:	4649      	mov	r1, r9
   19434:	2000      	movs	r0, #0
   19436:	f011 fb71 	bl	2ab1c <bt_lookup_id_addr>
   1943a:	4601      	mov	r1, r0
   1943c:	e7f5      	b.n	1942a <bt_hci_le_adv_report+0x15a>
	check_pending_conn(&id_addr, addr, info->adv_props);
   1943e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
   19442:	f7ff fe75 	bl	19130 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   19446:	0641      	lsls	r1, r0, #25
   19448:	f3c0 1580 	ubfx	r5, r0, #6, #1
   1944c:	d48b      	bmi.n	19366 <bt_hci_le_adv_report+0x96>
	if (!(adv_props & BT_HCI_LE_ADV_EVT_TYPE_CONN)) {
   1944e:	07d2      	lsls	r2, r2, #31
   19450:	d589      	bpl.n	19366 <bt_hci_le_adv_report+0x96>
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, id_addr,
   19452:	2202      	movs	r2, #2
   19454:	a904      	add	r1, sp, #16
   19456:	4628      	mov	r0, r5
   19458:	f000 fe86 	bl	1a168 <bt_conn_lookup_state_le>
	if (!conn) {
   1945c:	4683      	mov	fp, r0
   1945e:	2800      	cmp	r0, #0
   19460:	d081      	beq.n	19366 <bt_hci_le_adv_report+0x96>
   19462:	f7ff fe65 	bl	19130 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   19466:	0683      	lsls	r3, r0, #26
   19468:	d410      	bmi.n	1948c <bt_hci_le_adv_report+0x1bc>
	bt_addr_le_copy(&conn->le.resp_addr, addr);
   1946a:	f10b 009e 	add.w	r0, fp, #158	; 0x9e
   1946e:	4649      	mov	r1, r9
   19470:	f011 fb79 	bl	2ab66 <bt_addr_le_copy>
	if (bt_le_create_conn(conn)) {
   19474:	4658      	mov	r0, fp
   19476:	f011 fa6a 	bl	2a94e <bt_le_create_conn>
   1947a:	b960      	cbnz	r0, 19496 <bt_hci_le_adv_report+0x1c6>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1947c:	4658      	mov	r0, fp
   1947e:	2106      	movs	r1, #6
   19480:	f000 fbce 	bl	19c20 <bt_conn_set_state>
	bt_conn_unref(conn);
   19484:	4658      	mov	r0, fp
   19486:	f000 fb95 	bl	19bb4 <bt_conn_unref>
	return;
   1948a:	e76c      	b.n	19366 <bt_hci_le_adv_report+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   1948c:	4628      	mov	r0, r5
   1948e:	f7ff fe59 	bl	19144 <bt_le_scan_set_enable_legacy>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
   19492:	2800      	cmp	r0, #0
   19494:	d0e9      	beq.n	1946a <bt_hci_le_adv_report+0x19a>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
   19496:	231f      	movs	r3, #31
   19498:	f88b 3009 	strb.w	r3, [fp, #9]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1949c:	2100      	movs	r1, #0
   1949e:	4658      	mov	r0, fp
   194a0:	f000 fbbe 	bl	19c20 <bt_conn_set_state>
	bt_conn_unref(conn);
   194a4:	4658      	mov	r0, fp
   194a6:	f000 fb85 	bl	19bb4 <bt_conn_unref>
	bt_le_scan_update(false);
   194aa:	2000      	movs	r0, #0
   194ac:	f7ff fece 	bl	1924c <bt_le_scan_update>
   194b0:	e759      	b.n	19366 <bt_hci_le_adv_report+0x96>
   194b2:	bf00      	nop
   194b4:	20000760 	.word	0x20000760
   194b8:	20000740 	.word	0x20000740
   194bc:	00031547 	.word	0x00031547
   194c0:	00031560 	.word	0x00031560
   194c4:	20002734 	.word	0x20002734
   194c8:	2000273c 	.word	0x2000273c

000194cc <bt_le_scan_start>:

	return true;
}

int bt_le_scan_start(const struct bt_le_scan_param *param, bt_le_scan_cb_t cb)
{
   194cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   194d0:	4605      	mov	r5, r0
   194d2:	460f      	mov	r7, r1
   194d4:	f7ff fe2c 	bl	19130 <atomic_get.constprop.0>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   194d8:	0780      	lsls	r0, r0, #30
   194da:	d56f      	bpl.n	195bc <bt_le_scan_start+0xf0>
	if (param->type != BT_HCI_LE_SCAN_PASSIVE &&
   194dc:	782a      	ldrb	r2, [r5, #0]
   194de:	2a01      	cmp	r2, #1
   194e0:	d904      	bls.n	194ec <bt_le_scan_start+0x20>
		return -EAGAIN;
	}

	/* Check that the parameters have valid values */
	if (!valid_le_scan_param(param)) {
		return -EINVAL;
   194e2:	f06f 0415 	mvn.w	r4, #21
	}

	scan_dev_found_cb = cb;

	return 0;
}
   194e6:	4620      	mov	r0, r4
   194e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (param->options & ~(BT_LE_SCAN_OPT_FILTER_DUPLICATE |
   194ec:	686b      	ldr	r3, [r5, #4]
   194ee:	f033 030f 	bics.w	r3, r3, #15
   194f2:	d1f6      	bne.n	194e2 <bt_le_scan_start+0x16>
	if (param->interval < 0x0004 || param->interval > 0x4000) {
   194f4:	8928      	ldrh	r0, [r5, #8]
   194f6:	1f03      	subs	r3, r0, #4
   194f8:	b29b      	uxth	r3, r3
   194fa:	f643 74fc 	movw	r4, #16380	; 0x3ffc
   194fe:	42a3      	cmp	r3, r4
   19500:	d8ef      	bhi.n	194e2 <bt_le_scan_start+0x16>
	if (param->window < 0x0004 || param->window > 0x4000) {
   19502:	8969      	ldrh	r1, [r5, #10]
   19504:	1f0b      	subs	r3, r1, #4
   19506:	b29b      	uxth	r3, r3
   19508:	42a3      	cmp	r3, r4
   1950a:	d8ea      	bhi.n	194e2 <bt_le_scan_start+0x16>
	if (param->window > param->interval) {
   1950c:	4288      	cmp	r0, r1
   1950e:	d3e8      	bcc.n	194e2 <bt_le_scan_start+0x16>
	if (param->type && !bt_id_scan_random_addr_check()) {
   19510:	b99a      	cbnz	r2, 1953a <bt_le_scan_start+0x6e>
   19512:	f3bf 8f5b 	dmb	ish
   19516:	4e2b      	ldr	r6, [pc, #172]	; (195c4 <bt_le_scan_start+0xf8>)
   19518:	e856 0f00 	ldrex	r0, [r6]
   1951c:	f040 0340 	orr.w	r3, r0, #64	; 0x40
   19520:	e846 3200 	strex	r2, r3, [r6]
   19524:	2a00      	cmp	r2, #0
   19526:	d1f7      	bne.n	19518 <bt_le_scan_start+0x4c>
   19528:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1952c:	f010 0240 	ands.w	r2, r0, #64	; 0x40
   19530:	46b0      	mov	r8, r6
   19532:	d007      	beq.n	19544 <bt_le_scan_start+0x78>
		return -EALREADY;
   19534:	f06f 0477 	mvn.w	r4, #119	; 0x77
   19538:	e7d5      	b.n	194e6 <bt_le_scan_start+0x1a>
	if (param->type && !bt_id_scan_random_addr_check()) {
   1953a:	f011 fb03 	bl	2ab44 <bt_id_scan_random_addr_check>
   1953e:	2800      	cmp	r0, #0
   19540:	d1e7      	bne.n	19512 <bt_le_scan_start+0x46>
   19542:	e7ce      	b.n	194e2 <bt_le_scan_start+0x16>
   19544:	f7ff fdf4 	bl	19130 <atomic_get.constprop.0>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
   19548:	0681      	lsls	r1, r0, #26
   1954a:	d50a      	bpl.n	19562 <bt_le_scan_start+0x96>
	return bt_le_scan_set_enable_legacy(enable);
   1954c:	4610      	mov	r0, r2
   1954e:	f7ff fdf9 	bl	19144 <bt_le_scan_set_enable_legacy>
		if (err) {
   19552:	4604      	mov	r4, r0
   19554:	b128      	cbz	r0, 19562 <bt_le_scan_start+0x96>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19556:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1955a:	4630      	mov	r0, r6
   1955c:	f011 faf4 	bl	2ab48 <atomic_and>
		return err;
   19560:	e7c1      	b.n	194e6 <bt_le_scan_start+0x1a>
	atomic_set_bit_to(bt_dev.flags, BT_DEV_SCAN_FILTER_DUP,
   19562:	686b      	ldr	r3, [r5, #4]
	if (val) {
   19564:	07db      	lsls	r3, r3, #31
   19566:	d515      	bpl.n	19594 <bt_le_scan_start+0xc8>
   19568:	f3bf 8f5b 	dmb	ish
   1956c:	e858 3f00 	ldrex	r3, [r8]
   19570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   19574:	e848 3200 	strex	r2, r3, [r8]
   19578:	2a00      	cmp	r2, #0
   1957a:	d1f7      	bne.n	1956c <bt_le_scan_start+0xa0>
   1957c:	f3bf 8f5b 	dmb	ish
		if (param->timeout) {
   19580:	89ab      	ldrh	r3, [r5, #12]
   19582:	b16b      	cbz	r3, 195a0 <bt_le_scan_start+0xd4>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19584:	480f      	ldr	r0, [pc, #60]	; (195c4 <bt_le_scan_start+0xf8>)
   19586:	f06f 0140 	mvn.w	r1, #64	; 0x40
   1958a:	f011 fadd 	bl	2ab48 <atomic_and>
			return -ENOTSUP;
   1958e:	f06f 0485 	mvn.w	r4, #133	; 0x85
   19592:	e7a8      	b.n	194e6 <bt_le_scan_start+0x1a>
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   19594:	f46f 7180 	mvn.w	r1, #256	; 0x100
   19598:	480a      	ldr	r0, [pc, #40]	; (195c4 <bt_le_scan_start+0xf8>)
   1959a:	f011 fad5 	bl	2ab48 <atomic_and>
   1959e:	e7ef      	b.n	19580 <bt_le_scan_start+0xb4>
		err = start_le_scan_legacy(param->type, param->interval,
   195a0:	896a      	ldrh	r2, [r5, #10]
   195a2:	8929      	ldrh	r1, [r5, #8]
   195a4:	7828      	ldrb	r0, [r5, #0]
   195a6:	f7ff fdff 	bl	191a8 <start_le_scan_legacy>
	if (err) {
   195aa:	4604      	mov	r4, r0
   195ac:	b118      	cbz	r0, 195b6 <bt_le_scan_start+0xea>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   195ae:	4805      	ldr	r0, [pc, #20]	; (195c4 <bt_le_scan_start+0xf8>)
   195b0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   195b4:	e7d2      	b.n	1955c <bt_le_scan_start+0x90>
	scan_dev_found_cb = cb;
   195b6:	4b04      	ldr	r3, [pc, #16]	; (195c8 <bt_le_scan_start+0xfc>)
   195b8:	601f      	str	r7, [r3, #0]
	return 0;
   195ba:	e794      	b.n	194e6 <bt_le_scan_start+0x1a>
		return -EAGAIN;
   195bc:	f06f 040a 	mvn.w	r4, #10
   195c0:	e791      	b.n	194e6 <bt_le_scan_start+0x1a>
   195c2:	bf00      	nop
   195c4:	20000374 	.word	0x20000374
   195c8:	2000273c 	.word	0x2000273c

000195cc <bt_le_scan_stop>:

int bt_le_scan_stop(void)
{
   195cc:	b508      	push	{r3, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   195ce:	4808      	ldr	r0, [pc, #32]	; (195f0 <bt_le_scan_stop+0x24>)
   195d0:	f06f 0140 	mvn.w	r1, #64	; 0x40
   195d4:	f011 fab8 	bl	2ab48 <atomic_and>
	/* Return if active scanning is already disabled */
	if (!atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   195d8:	0643      	lsls	r3, r0, #25
   195da:	d506      	bpl.n	195ea <bt_le_scan_stop+0x1e>
	scan_dev_found_cb = NULL;
   195dc:	4b05      	ldr	r3, [pc, #20]	; (195f4 <bt_le_scan_stop+0x28>)
   195de:	2000      	movs	r0, #0
   195e0:	6018      	str	r0, [r3, #0]
		bt_id_pending_keys_update();
#endif
	}

	return bt_le_scan_update(false);
}
   195e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return bt_le_scan_update(false);
   195e6:	f7ff be31 	b.w	1924c <bt_le_scan_update>
}
   195ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
   195ee:	bd08      	pop	{r3, pc}
   195f0:	20000374 	.word	0x20000374
   195f4:	2000273c 	.word	0x2000273c

000195f8 <bt_le_scan_cb_register>:
	parent->next = child;
   195f8:	2300      	movs	r3, #0
   195fa:	6083      	str	r3, [r0, #8]
Z_GENLIST_APPEND(slist, snode)
   195fc:	4b05      	ldr	r3, [pc, #20]	; (19614 <bt_le_scan_cb_register+0x1c>)
   195fe:	6859      	ldr	r1, [r3, #4]

void bt_le_scan_cb_register(struct bt_le_scan_cb *cb)
{
	sys_slist_append(&scan_cbs, &cb->node);
   19600:	f100 0208 	add.w	r2, r0, #8
   19604:	b911      	cbnz	r1, 1960c <bt_le_scan_cb_register+0x14>
	list->head = node;
   19606:	e9c3 2200 	strd	r2, r2, [r3]
}
   1960a:	4770      	bx	lr
	parent->next = child;
   1960c:	600a      	str	r2, [r1, #0]
	list->tail = node;
   1960e:	605a      	str	r2, [r3, #4]
}
   19610:	4770      	bx	lr
   19612:	bf00      	nop
   19614:	20002734 	.word	0x20002734

00019618 <tx_free>:
	}
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
   19618:	2300      	movs	r3, #0
	tx->user_data = NULL;
   1961a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
   1961e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
   19620:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
   19622:	4801      	ldr	r0, [pc, #4]	; (19628 <tx_free+0x10>)
   19624:	f013 b97e 	b.w	2c924 <k_queue_append>
   19628:	200008d4 	.word	0x200008d4

0001962c <notify_connected>:

static void notify_connected(struct bt_conn *conn)
{
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
   1962c:	4b19      	ldr	r3, [pc, #100]	; (19694 <notify_connected+0x68>)
{
   1962e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
   19632:	681d      	ldr	r5, [r3, #0]
{
   19634:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
   19636:	b9ed      	cbnz	r5, 19674 <notify_connected+0x48>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19638:	4e17      	ldr	r6, [pc, #92]	; (19698 <notify_connected+0x6c>)
   1963a:	4d18      	ldr	r5, [pc, #96]	; (1969c <notify_connected+0x70>)
   1963c:	4f18      	ldr	r7, [pc, #96]	; (196a0 <notify_connected+0x74>)
   1963e:	46b0      	mov	r8, r6
   19640:	42b5      	cmp	r5, r6
   19642:	d90e      	bls.n	19662 <notify_connected+0x36>
   19644:	4917      	ldr	r1, [pc, #92]	; (196a4 <notify_connected+0x78>)
   19646:	4818      	ldr	r0, [pc, #96]	; (196a8 <notify_connected+0x7c>)
   19648:	f240 5311 	movw	r3, #1297	; 0x511
   1964c:	463a      	mov	r2, r7
   1964e:	f00f faa4 	bl	28b9a <printk>
   19652:	4816      	ldr	r0, [pc, #88]	; (196ac <notify_connected+0x80>)
   19654:	f00f faa1 	bl	28b9a <printk>
   19658:	f240 5111 	movw	r1, #1297	; 0x511
   1965c:	4638      	mov	r0, r7
   1965e:	f00f fcdd 	bl	2901c <assert_post_action>
   19662:	4545      	cmp	r5, r8
   19664:	d30d      	bcc.n	19682 <notify_connected+0x56>
		if (cb->connected) {
			cb->connected(conn, conn->err);
		}
	}

	if (!conn->err) {
   19666:	7a63      	ldrb	r3, [r4, #9]
   19668:	b993      	cbnz	r3, 19690 <notify_connected+0x64>
		bt_gatt_connected(conn);
   1966a:	4620      	mov	r0, r4
	}
}
   1966c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_gatt_connected(conn);
   19670:	f004 bb78 	b.w	1dd64 <bt_gatt_connected>
		if (cb->connected) {
   19674:	682b      	ldr	r3, [r5, #0]
   19676:	b113      	cbz	r3, 1967e <notify_connected+0x52>
			cb->connected(conn, conn->err);
   19678:	7a61      	ldrb	r1, [r4, #9]
   1967a:	4620      	mov	r0, r4
   1967c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1967e:	692d      	ldr	r5, [r5, #16]
   19680:	e7d9      	b.n	19636 <notify_connected+0xa>
		if (cb->connected) {
   19682:	682b      	ldr	r3, [r5, #0]
   19684:	b113      	cbz	r3, 1968c <notify_connected+0x60>
			cb->connected(conn, conn->err);
   19686:	7a61      	ldrb	r1, [r4, #9]
   19688:	4620      	mov	r0, r4
   1968a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1968c:	3514      	adds	r5, #20
   1968e:	e7d7      	b.n	19640 <notify_connected+0x14>
}
   19690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19694:	20002740 	.word	0x20002740
   19698:	0002d1d8 	.word	0x0002d1d8
   1969c:	0002d1d8 	.word	0x0002d1d8
   196a0:	00031565 	.word	0x00031565
   196a4:	00031595 	.word	0x00031595
   196a8:	0002e93e 	.word	0x0002e93e
   196ac:	000315b0 	.word	0x000315b0

000196b0 <send_frag>:
{
   196b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
   196b4:	694d      	ldr	r5, [r1, #20]
{
   196b6:	4604      	mov	r4, r0
   196b8:	460e      	mov	r6, r1
   196ba:	4691      	mov	r9, r2
   196bc:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
   196be:	f04f 33ff 	mov.w	r3, #4294967295
   196c2:	484e      	ldr	r0, [pc, #312]	; (197fc <send_frag+0x14c>)
   196c4:	f04f 32ff 	mov.w	r2, #4294967295
   196c8:	f00b fb50 	bl	24d6c <z_impl_k_sem_take>
	if (conn->state != BT_CONN_CONNECTED) {
   196cc:	7aa3      	ldrb	r3, [r4, #10]
   196ce:	2b07      	cmp	r3, #7
   196d0:	d154      	bne.n	1977c <send_frag+0xcc>
	__asm__ volatile(
   196d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   196d6:	f3ef 8211 	mrs	r2, BASEPRI
   196da:	f383 8812 	msr	BASEPRI_MAX, r3
   196de:	f3bf 8f6f 	isb	sy
	if (tx) {
   196e2:	2d00      	cmp	r5, #0
   196e4:	d05c      	beq.n	197a0 <send_frag+0xf0>
	parent->next = child;
   196e6:	2300      	movs	r3, #0
   196e8:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
   196ea:	69a3      	ldr	r3, [r4, #24]
   196ec:	2b00      	cmp	r3, #0
   196ee:	d154      	bne.n	1979a <send_frag+0xea>
	list->head = node;
   196f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
   196f4:	f382 8811 	msr	BASEPRI, r2
   196f8:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
   196fc:	2104      	movs	r1, #4
   196fe:	f106 0008 	add.w	r0, r6, #8
   19702:	f006 fd47 	bl	20194 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   19706:	8823      	ldrh	r3, [r4, #0]
   19708:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
   1970c:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19710:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
   19712:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   19716:	3b04      	subs	r3, #4
   19718:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   1971a:	2302      	movs	r3, #2
   1971c:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
   1971e:	4630      	mov	r0, r6
   19720:	f7fe fc8a 	bl	18038 <bt_send>
	if (err) {
   19724:	4601      	mov	r1, r0
   19726:	2800      	cmp	r0, #0
   19728:	d065      	beq.n	197f6 <send_frag+0x146>
		BT_ERR("Unable to send to driver (err %d)", err);
   1972a:	4a35      	ldr	r2, [pc, #212]	; (19800 <send_frag+0x150>)
   1972c:	6813      	ldr	r3, [r2, #0]
   1972e:	075b      	lsls	r3, r3, #29
   19730:	d008      	beq.n	19744 <send_frag+0x94>
   19732:	4b34      	ldr	r3, [pc, #208]	; (19804 <send_frag+0x154>)
   19734:	4834      	ldr	r0, [pc, #208]	; (19808 <send_frag+0x158>)
   19736:	1ad2      	subs	r2, r2, r3
   19738:	0892      	lsrs	r2, r2, #2
   1973a:	0192      	lsls	r2, r2, #6
   1973c:	f042 0201 	orr.w	r2, r2, #1
   19740:	f00f fdda 	bl	292f8 <log_1>
	__asm__ volatile(
   19744:	f04f 0340 	mov.w	r3, #64	; 0x40
   19748:	f3ef 8911 	mrs	r9, BASEPRI
   1974c:	f383 8812 	msr	BASEPRI_MAX, r3
   19750:	f3bf 8f6f 	isb	sy
		if (tx) {
   19754:	2d00      	cmp	r5, #0
   19756:	d039      	beq.n	197cc <send_frag+0x11c>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   19758:	6963      	ldr	r3, [r4, #20]
   1975a:	2200      	movs	r2, #0
   1975c:	b153      	cbz	r3, 19774 <send_frag+0xc4>
   1975e:	429d      	cmp	r5, r3
   19760:	d131      	bne.n	197c6 <send_frag+0x116>
Z_GENLIST_REMOVE(slist, snode)
   19762:	682b      	ldr	r3, [r5, #0]
   19764:	bb4a      	cbnz	r2, 197ba <send_frag+0x10a>
   19766:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
   19768:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
   1976a:	4295      	cmp	r5, r2
   1976c:	d100      	bne.n	19770 <send_frag+0xc0>
	list->tail = node;
   1976e:	61a3      	str	r3, [r4, #24]
	parent->next = child;
   19770:	2300      	movs	r3, #0
   19772:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
   19774:	f389 8811 	msr	BASEPRI, r9
   19778:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
   1977c:	481f      	ldr	r0, [pc, #124]	; (197fc <send_frag+0x14c>)
   1977e:	f00b fab1 	bl	24ce4 <z_impl_k_sem_give>
	if (tx) {
   19782:	b115      	cbz	r5, 1978a <send_frag+0xda>
		tx_free(tx);
   19784:	4628      	mov	r0, r5
   19786:	f7ff ff47 	bl	19618 <tx_free>
	if (always_consume) {
   1978a:	b11f      	cbz	r7, 19794 <send_frag+0xe4>
		net_buf_unref(buf);
   1978c:	4630      	mov	r0, r6
   1978e:	f006 fc35 	bl	1fffc <net_buf_unref>
	return false;
   19792:	2700      	movs	r7, #0
}
   19794:	4638      	mov	r0, r7
   19796:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1979a:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1979c:	61a5      	str	r5, [r4, #24]
}
   1979e:	e7a9      	b.n	196f4 <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
   197a0:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
   197a2:	b133      	cbz	r3, 197b2 <send_frag+0x102>
			pending_no_cb = &tail_tx->pending_no_cb;
   197a4:	f103 080c 	add.w	r8, r3, #12
   197a8:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
   197aa:	3301      	adds	r3, #1
   197ac:	f8c8 3000 	str.w	r3, [r8]
   197b0:	e7a0      	b.n	196f4 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
   197b2:	69e3      	ldr	r3, [r4, #28]
   197b4:	f104 081c 	add.w	r8, r4, #28
   197b8:	e7f7      	b.n	197aa <send_frag+0xfa>
	parent->next = child;
   197ba:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   197bc:	69a3      	ldr	r3, [r4, #24]
   197be:	429d      	cmp	r5, r3
	list->tail = node;
   197c0:	bf08      	it	eq
   197c2:	61a2      	streq	r2, [r4, #24]
}
   197c4:	e7d4      	b.n	19770 <send_frag+0xc0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   197c6:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   197c8:	681b      	ldr	r3, [r3, #0]
   197ca:	e7c7      	b.n	1975c <send_frag+0xac>
			__ASSERT_NO_MSG(*pending_no_cb > 0);
   197cc:	f8d8 3000 	ldr.w	r3, [r8]
   197d0:	b95b      	cbnz	r3, 197ea <send_frag+0x13a>
   197d2:	490e      	ldr	r1, [pc, #56]	; (1980c <send_frag+0x15c>)
   197d4:	480e      	ldr	r0, [pc, #56]	; (19810 <send_frag+0x160>)
   197d6:	4a0f      	ldr	r2, [pc, #60]	; (19814 <send_frag+0x164>)
   197d8:	f240 230f 	movw	r3, #527	; 0x20f
   197dc:	f00f f9dd 	bl	28b9a <printk>
   197e0:	480c      	ldr	r0, [pc, #48]	; (19814 <send_frag+0x164>)
   197e2:	f240 210f 	movw	r1, #527	; 0x20f
   197e6:	f00f fc19 	bl	2901c <assert_post_action>
			(*pending_no_cb)--;
   197ea:	f8d8 3000 	ldr.w	r3, [r8]
   197ee:	3b01      	subs	r3, #1
   197f0:	f8c8 3000 	str.w	r3, [r8]
   197f4:	e7be      	b.n	19774 <send_frag+0xc4>
	return true;
   197f6:	2701      	movs	r7, #1
   197f8:	e7cc      	b.n	19794 <send_frag+0xe4>
   197fa:	bf00      	nop
   197fc:	200003a8 	.word	0x200003a8
   19800:	20000748 	.word	0x20000748
   19804:	20000740 	.word	0x20000740
   19808:	0003127a 	.word	0x0003127a
   1980c:	000315cf 	.word	0x000315cf
   19810:	0002e93e 	.word	0x0002e93e
   19814:	00031565 	.word	0x00031565

00019818 <bt_conn_get_pkts>:
}
   19818:	4800      	ldr	r0, [pc, #0]	; (1981c <bt_conn_get_pkts+0x4>)
   1981a:	4770      	bx	lr
   1981c:	200003a8 	.word	0x200003a8

00019820 <bt_conn_new>:
{
   19820:	b538      	push	{r3, r4, r5, lr}
   19822:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   19824:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   19826:	2501      	movs	r5, #1
   19828:	428b      	cmp	r3, r1
   1982a:	d102      	bne.n	19832 <bt_conn_new+0x12>
		return NULL;
   1982c:	2400      	movs	r4, #0
}
   1982e:	4620      	mov	r0, r4
   19830:	bd38      	pop	{r3, r4, r5, pc}
   19832:	f104 02c0 	add.w	r2, r4, #192	; 0xc0
   19836:	f3bf 8f5b 	dmb	ish
   1983a:	e852 0f00 	ldrex	r0, [r2]
   1983e:	2800      	cmp	r0, #0
   19840:	d104      	bne.n	1984c <bt_conn_new+0x2c>
   19842:	e842 5c00 	strex	ip, r5, [r2]
   19846:	f1bc 0f00 	cmp.w	ip, #0
   1984a:	d1f6      	bne.n	1983a <bt_conn_new+0x1a>
   1984c:	f3bf 8f5b 	dmb	ish
   19850:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   19854:	d002      	beq.n	1985c <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   19856:	3301      	adds	r3, #1
   19858:	4604      	mov	r4, r0
   1985a:	e7e5      	b.n	19828 <bt_conn_new+0x8>
	if (!conn) {
   1985c:	2c00      	cmp	r4, #0
   1985e:	d0e6      	beq.n	1982e <bt_conn_new+0xe>
__ssp_bos_icheck3(memset, void *, int)
   19860:	22c0      	movs	r2, #192	; 0xc0
   19862:	2100      	movs	r1, #0
   19864:	4620      	mov	r0, r4
   19866:	f013 f9ee 	bl	2cc46 <memset>
	k_work_init_delayable(&conn->deferred_work, deferred_work);
   1986a:	f104 0060 	add.w	r0, r4, #96	; 0x60
   1986e:	4904      	ldr	r1, [pc, #16]	; (19880 <bt_conn_new+0x60>)
   19870:	f00b fe10 	bl	25494 <k_work_init_delayable>
	k_work_init(&conn->tx_complete_work, tx_complete_work);
   19874:	4903      	ldr	r1, [pc, #12]	; (19884 <bt_conn_new+0x64>)
   19876:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1987a:	f00b fd07 	bl	2528c <k_work_init>
	return conn;
   1987e:	e7d6      	b.n	1982e <bt_conn_new+0xe>
   19880:	0001a475 	.word	0x0001a475
   19884:	0002abd5 	.word	0x0002abd5

00019888 <conn_cleanup>:
{
   19888:	b570      	push	{r4, r5, r6, lr}
   1988a:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
   1988c:	f100 0638 	add.w	r6, r0, #56	; 0x38
   19890:	2200      	movs	r2, #0
   19892:	2300      	movs	r3, #0
   19894:	4630      	mov	r0, r6
   19896:	f006 fb1f 	bl	1fed8 <net_buf_get>
   1989a:	4605      	mov	r5, r0
   1989c:	bb48      	cbnz	r0, 198f2 <conn_cleanup+0x6a>
	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
   1989e:	6963      	ldr	r3, [r4, #20]
   198a0:	b173      	cbz	r3, 198c0 <conn_cleanup+0x38>
   198a2:	4918      	ldr	r1, [pc, #96]	; (19904 <conn_cleanup+0x7c>)
   198a4:	4a18      	ldr	r2, [pc, #96]	; (19908 <conn_cleanup+0x80>)
   198a6:	4819      	ldr	r0, [pc, #100]	; (1990c <conn_cleanup+0x84>)
   198a8:	f240 2392 	movw	r3, #658	; 0x292
   198ac:	f00f f975 	bl	28b9a <printk>
   198b0:	4817      	ldr	r0, [pc, #92]	; (19910 <conn_cleanup+0x88>)
   198b2:	f00f f972 	bl	28b9a <printk>
   198b6:	4814      	ldr	r0, [pc, #80]	; (19908 <conn_cleanup+0x80>)
   198b8:	f240 2192 	movw	r1, #658	; 0x292
   198bc:	f00f fbae 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);
   198c0:	69e3      	ldr	r3, [r4, #28]
   198c2:	b15b      	cbz	r3, 198dc <conn_cleanup+0x54>
   198c4:	4913      	ldr	r1, [pc, #76]	; (19914 <conn_cleanup+0x8c>)
   198c6:	4811      	ldr	r0, [pc, #68]	; (1990c <conn_cleanup+0x84>)
   198c8:	4a0f      	ldr	r2, [pc, #60]	; (19908 <conn_cleanup+0x80>)
   198ca:	f240 2393 	movw	r3, #659	; 0x293
   198ce:	f00f f964 	bl	28b9a <printk>
   198d2:	480d      	ldr	r0, [pc, #52]	; (19908 <conn_cleanup+0x80>)
   198d4:	f240 2193 	movw	r1, #659	; 0x293
   198d8:	f00f fba0 	bl	2901c <assert_post_action>
	bt_conn_reset_rx_state(conn);
   198dc:	4620      	mov	r0, r4
   198de:	f011 f97c 	bl	2abda <bt_conn_reset_rx_state>
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   198e2:	f104 0060 	add.w	r0, r4, #96	; 0x60
   198e6:	2200      	movs	r2, #0
}
   198e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_reschedule(&conn->deferred_work, K_NO_WAIT);
   198ec:	2300      	movs	r3, #0
   198ee:	f00b bef5 	b.w	256dc <k_work_reschedule>
		if (tx_data(buf)->tx) {
   198f2:	6968      	ldr	r0, [r5, #20]
   198f4:	b108      	cbz	r0, 198fa <conn_cleanup+0x72>
			tx_free(tx_data(buf)->tx);
   198f6:	f7ff fe8f 	bl	19618 <tx_free>
		net_buf_unref(buf);
   198fa:	4628      	mov	r0, r5
   198fc:	f006 fb7e 	bl	1fffc <net_buf_unref>
   19900:	e7c6      	b.n	19890 <conn_cleanup+0x8>
   19902:	bf00      	nop
   19904:	000315e2 	.word	0x000315e2
   19908:	00031565 	.word	0x00031565
   1990c:	0002e93e 	.word	0x0002e93e
   19910:	00031608 	.word	0x00031608
   19914:	0003161d 	.word	0x0003161d

00019918 <bt_conn_recv>:
{
   19918:	b570      	push	{r4, r5, r6, lr}
   1991a:	4616      	mov	r6, r2
   1991c:	4604      	mov	r4, r0
   1991e:	460d      	mov	r5, r1
	tx_notify(conn);
   19920:	f011 f935 	bl	2ab8e <tx_notify>
	switch (flags) {
   19924:	2e01      	cmp	r6, #1
   19926:	d034      	beq.n	19992 <bt_conn_recv+0x7a>
   19928:	2e02      	cmp	r6, #2
   1992a:	d170      	bne.n	19a0e <bt_conn_recv+0xf6>
		if (conn->rx) {
   1992c:	6923      	ldr	r3, [r4, #16]
   1992e:	b17b      	cbz	r3, 19950 <bt_conn_recv+0x38>
			BT_ERR("Unexpected first L2CAP frame");
   19930:	4943      	ldr	r1, [pc, #268]	; (19a40 <bt_conn_recv+0x128>)
   19932:	680b      	ldr	r3, [r1, #0]
   19934:	075b      	lsls	r3, r3, #29
   19936:	d008      	beq.n	1994a <bt_conn_recv+0x32>
   19938:	4b42      	ldr	r3, [pc, #264]	; (19a44 <bt_conn_recv+0x12c>)
   1993a:	4843      	ldr	r0, [pc, #268]	; (19a48 <bt_conn_recv+0x130>)
   1993c:	1ac9      	subs	r1, r1, r3
   1993e:	0889      	lsrs	r1, r1, #2
   19940:	0189      	lsls	r1, r1, #6
   19942:	f041 0101 	orr.w	r1, r1, #1
   19946:	f00f fcca 	bl	292de <log_0>
			bt_conn_reset_rx_state(conn);
   1994a:	4620      	mov	r0, r4
   1994c:	f011 f945 	bl	2abda <bt_conn_reset_rx_state>
		conn->rx = buf;
   19950:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   19952:	6923      	ldr	r3, [r4, #16]
   19954:	8999      	ldrh	r1, [r3, #12]
   19956:	2901      	cmp	r1, #1
   19958:	d971      	bls.n	19a3e <bt_conn_recv+0x126>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1995a:	6898      	ldr	r0, [r3, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1995c:	7845      	ldrb	r5, [r0, #1]
   1995e:	7802      	ldrb	r2, [r0, #0]
   19960:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   19964:	3204      	adds	r2, #4
   19966:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
   19968:	4291      	cmp	r1, r2
   1996a:	d368      	bcc.n	19a3e <bt_conn_recv+0x126>
	if (conn->rx->len > acl_total_len) {
   1996c:	d95e      	bls.n	19a2c <bt_conn_recv+0x114>
		BT_ERR("ACL len mismatch (%u > %u)",
   1996e:	4b34      	ldr	r3, [pc, #208]	; (19a40 <bt_conn_recv+0x128>)
   19970:	6818      	ldr	r0, [r3, #0]
   19972:	0740      	lsls	r0, r0, #29
   19974:	d008      	beq.n	19988 <bt_conn_recv+0x70>
   19976:	4833      	ldr	r0, [pc, #204]	; (19a44 <bt_conn_recv+0x12c>)
   19978:	1a1b      	subs	r3, r3, r0
   1997a:	089b      	lsrs	r3, r3, #2
   1997c:	019b      	lsls	r3, r3, #6
   1997e:	4833      	ldr	r0, [pc, #204]	; (19a4c <bt_conn_recv+0x134>)
   19980:	f043 0301 	orr.w	r3, r3, #1
   19984:	f00f fccc 	bl	29320 <log_2>
		bt_conn_reset_rx_state(conn);
   19988:	4620      	mov	r0, r4
}
   1998a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1998e:	f011 b924 	b.w	2abda <bt_conn_reset_rx_state>
		if (!conn->rx) {
   19992:	6920      	ldr	r0, [r4, #16]
   19994:	b9a0      	cbnz	r0, 199c0 <bt_conn_recv+0xa8>
			BT_ERR("Unexpected L2CAP continuation");
   19996:	492a      	ldr	r1, [pc, #168]	; (19a40 <bt_conn_recv+0x128>)
   19998:	680b      	ldr	r3, [r1, #0]
   1999a:	075e      	lsls	r6, r3, #29
   1999c:	d008      	beq.n	199b0 <bt_conn_recv+0x98>
   1999e:	4b29      	ldr	r3, [pc, #164]	; (19a44 <bt_conn_recv+0x12c>)
   199a0:	482b      	ldr	r0, [pc, #172]	; (19a50 <bt_conn_recv+0x138>)
   199a2:	1ac9      	subs	r1, r1, r3
   199a4:	0889      	lsrs	r1, r1, #2
   199a6:	0189      	lsls	r1, r1, #6
   199a8:	f041 0101 	orr.w	r1, r1, #1
   199ac:	f00f fc97 	bl	292de <log_0>
			bt_conn_reset_rx_state(conn);
   199b0:	4620      	mov	r0, r4
   199b2:	f011 f912 	bl	2abda <bt_conn_reset_rx_state>
			net_buf_unref(buf);
   199b6:	4628      	mov	r0, r5
}
   199b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
   199bc:	f006 bb1e 	b.w	1fffc <net_buf_unref>
		if (!buf->len) {
   199c0:	89ae      	ldrh	r6, [r5, #12]
   199c2:	2e00      	cmp	r6, #0
   199c4:	d0f7      	beq.n	199b6 <bt_conn_recv+0x9e>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
   199c6:	3008      	adds	r0, #8
   199c8:	f012 fb4e 	bl	2c068 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   199cc:	4286      	cmp	r6, r0
   199ce:	d914      	bls.n	199fa <bt_conn_recv+0xe2>
			BT_ERR("Not enough buffer space for L2CAP data");
   199d0:	491b      	ldr	r1, [pc, #108]	; (19a40 <bt_conn_recv+0x128>)
   199d2:	680b      	ldr	r3, [r1, #0]
   199d4:	0758      	lsls	r0, r3, #29
   199d6:	d008      	beq.n	199ea <bt_conn_recv+0xd2>
   199d8:	4b1a      	ldr	r3, [pc, #104]	; (19a44 <bt_conn_recv+0x12c>)
   199da:	481e      	ldr	r0, [pc, #120]	; (19a54 <bt_conn_recv+0x13c>)
   199dc:	1ac9      	subs	r1, r1, r3
   199de:	0889      	lsrs	r1, r1, #2
   199e0:	0189      	lsls	r1, r1, #6
   199e2:	f041 0101 	orr.w	r1, r1, #1
   199e6:	f00f fc7a 	bl	292de <log_0>
			bt_l2cap_recv(conn, conn->rx, false);
   199ea:	6921      	ldr	r1, [r4, #16]
   199ec:	2200      	movs	r2, #0
   199ee:	4620      	mov	r0, r4
   199f0:	f001 f844 	bl	1aa7c <bt_l2cap_recv>
			conn->rx = NULL;
   199f4:	2300      	movs	r3, #0
   199f6:	6123      	str	r3, [r4, #16]
   199f8:	e7dd      	b.n	199b6 <bt_conn_recv+0x9e>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   199fa:	6920      	ldr	r0, [r4, #16]
   199fc:	89aa      	ldrh	r2, [r5, #12]
   199fe:	68a9      	ldr	r1, [r5, #8]
   19a00:	3008      	adds	r0, #8
   19a02:	f012 fb39 	bl	2c078 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   19a06:	4628      	mov	r0, r5
   19a08:	f006 faf8 	bl	1fffc <net_buf_unref>
		break;
   19a0c:	e7a1      	b.n	19952 <bt_conn_recv+0x3a>
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
   19a0e:	4b0c      	ldr	r3, [pc, #48]	; (19a40 <bt_conn_recv+0x128>)
   19a10:	681a      	ldr	r2, [r3, #0]
   19a12:	0752      	lsls	r2, r2, #29
   19a14:	d0cc      	beq.n	199b0 <bt_conn_recv+0x98>
   19a16:	4a0b      	ldr	r2, [pc, #44]	; (19a44 <bt_conn_recv+0x12c>)
   19a18:	480f      	ldr	r0, [pc, #60]	; (19a58 <bt_conn_recv+0x140>)
   19a1a:	1a9b      	subs	r3, r3, r2
   19a1c:	089b      	lsrs	r3, r3, #2
   19a1e:	019b      	lsls	r3, r3, #6
   19a20:	f043 0201 	orr.w	r2, r3, #1
   19a24:	4631      	mov	r1, r6
   19a26:	f00f fc67 	bl	292f8 <log_1>
   19a2a:	e7c1      	b.n	199b0 <bt_conn_recv+0x98>
	conn->rx = NULL;
   19a2c:	2200      	movs	r2, #0
   19a2e:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf, true);
   19a30:	4620      	mov	r0, r4
   19a32:	2201      	movs	r2, #1
}
   19a34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf, true);
   19a38:	4619      	mov	r1, r3
   19a3a:	f001 b81f 	b.w	1aa7c <bt_l2cap_recv>
}
   19a3e:	bd70      	pop	{r4, r5, r6, pc}
   19a40:	20000748 	.word	0x20000748
   19a44:	20000740 	.word	0x20000740
   19a48:	00031636 	.word	0x00031636
   19a4c:	000316b6 	.word	0x000316b6
   19a50:	00031653 	.word	0x00031653
   19a54:	00031671 	.word	0x00031671
   19a58:	00031698 	.word	0x00031698

00019a5c <bt_conn_send_cb>:
{
   19a5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19a60:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
   19a62:	7a83      	ldrb	r3, [r0, #10]
   19a64:	2b07      	cmp	r3, #7
{
   19a66:	4605      	mov	r5, r0
   19a68:	460e      	mov	r6, r1
   19a6a:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
   19a6c:	d010      	beq.n	19a90 <bt_conn_send_cb+0x34>
		BT_ERR("not connected!");
   19a6e:	492b      	ldr	r1, [pc, #172]	; (19b1c <bt_conn_send_cb+0xc0>)
   19a70:	680b      	ldr	r3, [r1, #0]
   19a72:	075a      	lsls	r2, r3, #29
   19a74:	d008      	beq.n	19a88 <bt_conn_send_cb+0x2c>
   19a76:	4b2a      	ldr	r3, [pc, #168]	; (19b20 <bt_conn_send_cb+0xc4>)
   19a78:	482a      	ldr	r0, [pc, #168]	; (19b24 <bt_conn_send_cb+0xc8>)
   19a7a:	1ac9      	subs	r1, r1, r3
   19a7c:	0889      	lsrs	r1, r1, #2
   19a7e:	0189      	lsls	r1, r1, #6
   19a80:	f041 0101 	orr.w	r1, r1, #1
   19a84:	f00f fc2b 	bl	292de <log_0>
			return -ENOTCONN;
   19a88:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   19a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   19a90:	2a00      	cmp	r2, #0
   19a92:	d040      	beq.n	19b16 <bt_conn_send_cb+0xba>
	return z_impl_z_current_get();
   19a94:	f00d f816 	bl	26ac4 <z_impl_z_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
   19a98:	4b23      	ldr	r3, [pc, #140]	; (19b28 <bt_conn_send_cb+0xcc>)
   19a9a:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
   19a9c:	4823      	ldr	r0, [pc, #140]	; (19b2c <bt_conn_send_cb+0xd0>)
   19a9e:	bf07      	ittee	eq
   19aa0:	2200      	moveq	r2, #0
   19aa2:	2300      	moveq	r3, #0
   19aa4:	f04f 32ff 	movne.w	r2, #4294967295
   19aa8:	f04f 33ff 	movne.w	r3, #4294967295
   19aac:	f00b f8ae 	bl	24c0c <z_impl_k_queue_get>
   19ab0:	4604      	mov	r4, r0
		if (!tx) {
   19ab2:	b978      	cbnz	r0, 19ad4 <bt_conn_send_cb+0x78>
			BT_ERR("Unable to allocate TX context");
   19ab4:	4919      	ldr	r1, [pc, #100]	; (19b1c <bt_conn_send_cb+0xc0>)
   19ab6:	680b      	ldr	r3, [r1, #0]
   19ab8:	075b      	lsls	r3, r3, #29
   19aba:	d008      	beq.n	19ace <bt_conn_send_cb+0x72>
   19abc:	4b18      	ldr	r3, [pc, #96]	; (19b20 <bt_conn_send_cb+0xc4>)
   19abe:	481c      	ldr	r0, [pc, #112]	; (19b30 <bt_conn_send_cb+0xd4>)
   19ac0:	1ac9      	subs	r1, r1, r3
   19ac2:	0889      	lsrs	r1, r1, #2
   19ac4:	0189      	lsls	r1, r1, #6
   19ac6:	f041 0101 	orr.w	r1, r1, #1
   19aca:	f00f fc08 	bl	292de <log_0>
			return -ENOBUFS;
   19ace:	f06f 0068 	mvn.w	r0, #104	; 0x68
   19ad2:	e7db      	b.n	19a8c <bt_conn_send_cb+0x30>
		if (conn->state != BT_CONN_CONNECTED) {
   19ad4:	7aab      	ldrb	r3, [r5, #10]
   19ad6:	2b07      	cmp	r3, #7
   19ad8:	d011      	beq.n	19afe <bt_conn_send_cb+0xa2>
			BT_WARN("Disconnected while allocating context");
   19ada:	4910      	ldr	r1, [pc, #64]	; (19b1c <bt_conn_send_cb+0xc0>)
   19adc:	680b      	ldr	r3, [r1, #0]
   19ade:	f013 0f06 	tst.w	r3, #6
   19ae2:	d008      	beq.n	19af6 <bt_conn_send_cb+0x9a>
   19ae4:	4b0e      	ldr	r3, [pc, #56]	; (19b20 <bt_conn_send_cb+0xc4>)
   19ae6:	4813      	ldr	r0, [pc, #76]	; (19b34 <bt_conn_send_cb+0xd8>)
   19ae8:	1ac9      	subs	r1, r1, r3
   19aea:	0889      	lsrs	r1, r1, #2
   19aec:	0189      	lsls	r1, r1, #6
   19aee:	f041 0102 	orr.w	r1, r1, #2
   19af2:	f00f fbf4 	bl	292de <log_0>
			tx_free(tx);
   19af6:	4620      	mov	r0, r4
   19af8:	f7ff fd8e 	bl	19618 <tx_free>
   19afc:	e7c4      	b.n	19a88 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
   19afe:	2300      	movs	r3, #0
		tx->user_data = user_data;
   19b00:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
   19b04:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
   19b06:	6170      	str	r0, [r6, #20]
	net_buf_put(&conn->tx_queue, buf);
   19b08:	f105 0038 	add.w	r0, r5, #56	; 0x38
   19b0c:	4631      	mov	r1, r6
   19b0e:	f006 fa41 	bl	1ff94 <net_buf_put>
	return 0;
   19b12:	2000      	movs	r0, #0
   19b14:	e7ba      	b.n	19a8c <bt_conn_send_cb+0x30>
		tx_data(buf)->tx = NULL;
   19b16:	614a      	str	r2, [r1, #20]
   19b18:	e7f6      	b.n	19b08 <bt_conn_send_cb+0xac>
   19b1a:	bf00      	nop
   19b1c:	20000748 	.word	0x20000748
   19b20:	20000740 	.word	0x20000740
   19b24:	000316d1 	.word	0x000316d1
   19b28:	20002158 	.word	0x20002158
   19b2c:	200008d4 	.word	0x200008d4
   19b30:	000316e0 	.word	0x000316e0
   19b34:	000316fe 	.word	0x000316fe

00019b38 <bt_conn_prepare_events>:
{
   19b38:	b538      	push	{r3, r4, r5, lr}
	conn_change.signaled = 0U;
   19b3a:	4b1b      	ldr	r3, [pc, #108]	; (19ba8 <bt_conn_prepare_events+0x70>)
   19b3c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   19b3e:	2101      	movs	r1, #1
{
   19b40:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
   19b42:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
   19b44:	f00e f8aa 	bl	27c9c <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
   19b48:	4b18      	ldr	r3, [pc, #96]	; (19bac <bt_conn_prepare_events+0x74>)
   19b4a:	f103 00c0 	add.w	r0, r3, #192	; 0xc0
   19b4e:	f011 f811 	bl	2ab74 <atomic_get>
		if (!conn_prepare_events(conn, &events[ev_count])) {
   19b52:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
   19b56:	4619      	mov	r1, r3
   19b58:	b908      	cbnz	r0, 19b5e <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
   19b5a:	2001      	movs	r0, #1
}
   19b5c:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
   19b5e:	7a9a      	ldrb	r2, [r3, #10]
   19b60:	b99a      	cbnz	r2, 19b8a <bt_conn_prepare_events+0x52>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19b62:	f3bf 8f5b 	dmb	ish
   19b66:	1d1a      	adds	r2, r3, #4
   19b68:	e852 0f00 	ldrex	r0, [r2]
   19b6c:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
   19b70:	e842 ce00 	strex	lr, ip, [r2]
   19b74:	f1be 0f00 	cmp.w	lr, #0
   19b78:	d1f6      	bne.n	19b68 <bt_conn_prepare_events+0x30>
   19b7a:	f3bf 8f5b 	dmb	ish
   19b7e:	0642      	lsls	r2, r0, #25
   19b80:	d503      	bpl.n	19b8a <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
   19b82:	4618      	mov	r0, r3
   19b84:	f7ff fe80 	bl	19888 <conn_cleanup>
   19b88:	e7e7      	b.n	19b5a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
   19b8a:	7a8b      	ldrb	r3, [r1, #10]
   19b8c:	2b07      	cmp	r3, #7
   19b8e:	d1e4      	bne.n	19b5a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
   19b90:	4b07      	ldr	r3, [pc, #28]	; (19bb0 <bt_conn_prepare_events+0x78>)
   19b92:	4628      	mov	r0, r5
   19b94:	2200      	movs	r2, #0
   19b96:	2104      	movs	r1, #4
   19b98:	f00e f880 	bl	27c9c <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
   19b9c:	2301      	movs	r3, #1
   19b9e:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
   19ba2:	2002      	movs	r0, #2
	return ev_count;
   19ba4:	e7da      	b.n	19b5c <bt_conn_prepare_events+0x24>
   19ba6:	bf00      	nop
   19ba8:	200004f8 	.word	0x200004f8
   19bac:	20001a80 	.word	0x20001a80
   19bb0:	20001ab8 	.word	0x20001ab8

00019bb4 <bt_conn_unref>:
{
   19bb4:	b508      	push	{r3, lr}
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   19bb6:	30c0      	adds	r0, #192	; 0xc0
   19bb8:	f3bf 8f5b 	dmb	ish
   19bbc:	e850 3f00 	ldrex	r3, [r0]
   19bc0:	1e5a      	subs	r2, r3, #1
   19bc2:	e840 2100 	strex	r1, r2, [r0]
   19bc6:	2900      	cmp	r1, #0
   19bc8:	d1f8      	bne.n	19bbc <bt_conn_unref+0x8>
   19bca:	f3bf 8f5b 	dmb	ish
	__ASSERT(old > 0, "Conn reference counter is 0");
   19bce:	2b00      	cmp	r3, #0
   19bd0:	dc10      	bgt.n	19bf4 <bt_conn_unref+0x40>
   19bd2:	4909      	ldr	r1, [pc, #36]	; (19bf8 <bt_conn_unref+0x44>)
   19bd4:	4a09      	ldr	r2, [pc, #36]	; (19bfc <bt_conn_unref+0x48>)
   19bd6:	480a      	ldr	r0, [pc, #40]	; (19c00 <bt_conn_unref+0x4c>)
   19bd8:	f240 434e 	movw	r3, #1102	; 0x44e
   19bdc:	f00e ffdd 	bl	28b9a <printk>
   19be0:	4808      	ldr	r0, [pc, #32]	; (19c04 <bt_conn_unref+0x50>)
   19be2:	f00e ffda 	bl	28b9a <printk>
}
   19be6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	__ASSERT(old > 0, "Conn reference counter is 0");
   19bea:	4804      	ldr	r0, [pc, #16]	; (19bfc <bt_conn_unref+0x48>)
   19bec:	f240 414e 	movw	r1, #1102	; 0x44e
   19bf0:	f00f ba14 	b.w	2901c <assert_post_action>
}
   19bf4:	bd08      	pop	{r3, pc}
   19bf6:	bf00      	nop
   19bf8:	00031724 	.word	0x00031724
   19bfc:	00031565 	.word	0x00031565
   19c00:	0002e93e 	.word	0x0002e93e
   19c04:	0003172c 	.word	0x0003172c

00019c08 <bt_conn_lookup_handle>:
{
   19c08:	4602      	mov	r2, r0
   19c0a:	b508      	push	{r3, lr}
	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
   19c0c:	2101      	movs	r1, #1
   19c0e:	4803      	ldr	r0, [pc, #12]	; (19c1c <bt_conn_lookup_handle+0x14>)
   19c10:	f011 f807 	bl	2ac22 <conn_lookup_handle>
}
   19c14:	2800      	cmp	r0, #0
   19c16:	bf38      	it	cc
   19c18:	2000      	movcc	r0, #0
   19c1a:	bd08      	pop	{r3, pc}
   19c1c:	20001a80 	.word	0x20001a80

00019c20 <bt_conn_set_state>:
{
   19c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (conn->state == state) {
   19c24:	7a86      	ldrb	r6, [r0, #10]
   19c26:	428e      	cmp	r6, r1
{
   19c28:	4604      	mov	r4, r0
   19c2a:	460d      	mov	r5, r1
	if (conn->state == state) {
   19c2c:	d116      	bne.n	19c5c <bt_conn_set_state+0x3c>
		BT_WARN("no transition %s", state2str(state));
   19c2e:	4b7c      	ldr	r3, [pc, #496]	; (19e20 <bt_conn_set_state+0x200>)
   19c30:	681a      	ldr	r2, [r3, #0]
   19c32:	f012 0f06 	tst.w	r2, #6
   19c36:	d053      	beq.n	19ce0 <bt_conn_set_state+0xc0>
   19c38:	4a7a      	ldr	r2, [pc, #488]	; (19e24 <bt_conn_set_state+0x204>)
   19c3a:	487b      	ldr	r0, [pc, #492]	; (19e28 <bt_conn_set_state+0x208>)
   19c3c:	2e08      	cmp	r6, #8
   19c3e:	eba3 0202 	sub.w	r2, r3, r2
   19c42:	bf96      	itet	ls
   19c44:	4b79      	ldrls	r3, [pc, #484]	; (19e2c <bt_conn_set_state+0x20c>)
   19c46:	497a      	ldrhi	r1, [pc, #488]	; (19e30 <bt_conn_set_state+0x210>)
   19c48:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
   19c4c:	0892      	lsrs	r2, r2, #2
   19c4e:	0192      	lsls	r2, r2, #6
   19c50:	f042 0202 	orr.w	r2, r2, #2
}
   19c54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("no valid (%u) state was set", state);
   19c58:	f00f bb4e 	b.w	292f8 <log_1>
	conn->state = state;
   19c5c:	7281      	strb	r1, [r0, #10]
	switch (old_state) {
   19c5e:	b166      	cbz	r6, 19c7a <bt_conn_set_state+0x5a>
   19c60:	2e06      	cmp	r6, #6
   19c62:	d010      	beq.n	19c86 <bt_conn_set_state+0x66>
	switch (conn->state) {
   19c64:	7aa3      	ldrb	r3, [r4, #10]
   19c66:	2b08      	cmp	r3, #8
   19c68:	f200 80cb 	bhi.w	19e02 <bt_conn_set_state+0x1e2>
   19c6c:	e8df f003 	tbb	[pc, r3]
   19c70:	3838123a 	.word	0x3838123a
   19c74:	2a8c3838 	.word	0x2a8c3838
   19c78:	38          	.byte	0x38
   19c79:	00          	.byte	0x00
		if (conn->type != BT_CONN_TYPE_ISO) {
   19c7a:	7883      	ldrb	r3, [r0, #2]
   19c7c:	2b08      	cmp	r3, #8
   19c7e:	d0f1      	beq.n	19c64 <bt_conn_set_state+0x44>
			bt_conn_ref(conn);
   19c80:	f010 ffb4 	bl	2abec <bt_conn_ref>
   19c84:	e7ee      	b.n	19c64 <bt_conn_set_state+0x44>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   19c86:	7883      	ldrb	r3, [r0, #2]
   19c88:	2b01      	cmp	r3, #1
   19c8a:	d1eb      	bne.n	19c64 <bt_conn_set_state+0x44>
			k_work_cancel_delayable(&conn->deferred_work);
   19c8c:	3060      	adds	r0, #96	; 0x60
   19c8e:	f00b fd2b 	bl	256e8 <k_work_cancel_delayable>
   19c92:	e7e7      	b.n	19c64 <bt_conn_set_state+0x44>
	z_impl_k_sem_give(sem);
   19c94:	4d67      	ldr	r5, [pc, #412]	; (19e34 <bt_conn_set_state+0x214>)
		tx->pending_no_cb = 0U;
   19c96:	2600      	movs	r6, #0
	__asm__ volatile(
   19c98:	f04f 0340 	mov.w	r3, #64	; 0x40
   19c9c:	f3ef 8211 	mrs	r2, BASEPRI
   19ca0:	f383 8812 	msr	BASEPRI_MAX, r3
   19ca4:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
   19ca8:	69e3      	ldr	r3, [r4, #28]
   19caa:	2b00      	cmp	r3, #0
   19cac:	f000 8089 	beq.w	19dc2 <bt_conn_set_state+0x1a2>
			conn->pending_no_cb--;
   19cb0:	3b01      	subs	r3, #1
   19cb2:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
   19cb4:	f382 8811 	msr	BASEPRI, r2
   19cb8:	f3bf 8f6f 	isb	sy
   19cbc:	4628      	mov	r0, r5
   19cbe:	f00b f811 	bl	24ce4 <z_impl_k_sem_give>
}
   19cc2:	e7e9      	b.n	19c98 <bt_conn_set_state+0x78>
		if (conn->type == BT_CONN_TYPE_SCO) {
   19cc4:	78a3      	ldrb	r3, [r4, #2]
   19cc6:	2b04      	cmp	r3, #4
   19cc8:	d00a      	beq.n	19ce0 <bt_conn_set_state+0xc0>
	z_impl_k_queue_init(queue);
   19cca:	f104 0038 	add.w	r0, r4, #56	; 0x38
   19cce:	f012 fe1c 	bl	2c90a <z_impl_k_queue_init>
	return z_impl_k_poll_signal_raise(sig, result);
   19cd2:	4859      	ldr	r0, [pc, #356]	; (19e38 <bt_conn_set_state+0x218>)
   19cd4:	2100      	movs	r1, #0
   19cd6:	f00e f93d 	bl	27f54 <z_impl_k_poll_signal_raise>
	list->head = NULL;
   19cda:	2300      	movs	r3, #0
	list->tail = NULL;
   19cdc:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
}
   19ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
   19ce4:	78a3      	ldrb	r3, [r4, #2]
   19ce6:	2b04      	cmp	r3, #4
   19ce8:	d104      	bne.n	19cf4 <bt_conn_set_state+0xd4>
			bt_conn_unref(conn);
   19cea:	4620      	mov	r0, r4
}
   19cec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			bt_conn_unref(conn);
   19cf0:	f7ff bf60 	b.w	19bb4 <bt_conn_unref>
		switch (old_state) {
   19cf4:	2e08      	cmp	r6, #8
   19cf6:	d8f3      	bhi.n	19ce0 <bt_conn_set_state+0xc0>
   19cf8:	a301      	add	r3, pc, #4	; (adr r3, 19d00 <bt_conn_set_state+0xe0>)
   19cfa:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   19cfe:	bf00      	nop
   19d00:	00019d6d 	.word	0x00019d6d
   19d04:	00019d25 	.word	0x00019d25
   19d08:	00019d5f 	.word	0x00019d5f
   19d0c:	00019ceb 	.word	0x00019ceb
   19d10:	00019ceb 	.word	0x00019ceb
   19d14:	00019d5f 	.word	0x00019d5f
   19d18:	00019d5f 	.word	0x00019d5f
   19d1c:	00019d6d 	.word	0x00019d6d
   19d20:	00019d6d 	.word	0x00019d6d
			tx_notify(conn);
   19d24:	4620      	mov	r0, r4
   19d26:	f010 ff32 	bl	2ab8e <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
   19d2a:	78a3      	ldrb	r3, [r4, #2]
   19d2c:	2b01      	cmp	r3, #1
   19d2e:	d103      	bne.n	19d38 <bt_conn_set_state+0x118>
				k_work_cancel_delayable(&conn->deferred_work);
   19d30:	f104 0060 	add.w	r0, r4, #96	; 0x60
   19d34:	f00b fcd8 	bl	256e8 <k_work_cancel_delayable>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   19d38:	f3bf 8f5b 	dmb	ish
   19d3c:	3404      	adds	r4, #4
   19d3e:	e854 3f00 	ldrex	r3, [r4]
   19d42:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19d46:	e844 3200 	strex	r2, r3, [r4]
   19d4a:	2a00      	cmp	r2, #0
   19d4c:	d1f7      	bne.n	19d3e <bt_conn_set_state+0x11e>
   19d4e:	f3bf 8f5b 	dmb	ish
   19d52:	4839      	ldr	r0, [pc, #228]	; (19e38 <bt_conn_set_state+0x218>)
}
   19d54:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19d58:	2100      	movs	r1, #0
   19d5a:	f00e b8fb 	b.w	27f54 <z_impl_k_poll_signal_raise>
			if (conn->err) {
   19d5e:	7a63      	ldrb	r3, [r4, #9]
   19d60:	2b00      	cmp	r3, #0
   19d62:	d0c2      	beq.n	19cea <bt_conn_set_state+0xca>
				notify_connected(conn);
   19d64:	4620      	mov	r0, r4
   19d66:	f7ff fc61 	bl	1962c <notify_connected>
   19d6a:	e7be      	b.n	19cea <bt_conn_set_state+0xca>
			BT_WARN("Invalid (%u) old state", state);
   19d6c:	4a2c      	ldr	r2, [pc, #176]	; (19e20 <bt_conn_set_state+0x200>)
   19d6e:	6813      	ldr	r3, [r2, #0]
   19d70:	f013 0f06 	tst.w	r3, #6
   19d74:	d0b4      	beq.n	19ce0 <bt_conn_set_state+0xc0>
   19d76:	4b2b      	ldr	r3, [pc, #172]	; (19e24 <bt_conn_set_state+0x204>)
   19d78:	4830      	ldr	r0, [pc, #192]	; (19e3c <bt_conn_set_state+0x21c>)
   19d7a:	1ad2      	subs	r2, r2, r3
   19d7c:	0892      	lsrs	r2, r2, #2
   19d7e:	0192      	lsls	r2, r2, #6
   19d80:	f042 0202 	orr.w	r2, r2, #2
   19d84:	4629      	mov	r1, r5
   19d86:	e765      	b.n	19c54 <bt_conn_set_state+0x34>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   19d88:	78a3      	ldrb	r3, [r4, #2]
   19d8a:	2b01      	cmp	r3, #1
   19d8c:	d1a8      	bne.n	19ce0 <bt_conn_set_state+0xc0>
					K_MSEC(10 * bt_dev.create_param.timeout));
   19d8e:	4b2c      	ldr	r3, [pc, #176]	; (19e40 <bt_conn_set_state+0x220>)
   19d90:	8a9b      	ldrh	r3, [r3, #20]
   19d92:	210a      	movs	r1, #10
   19d94:	4359      	muls	r1, r3
			return (t * to_hz + off) / from_hz;
   19d96:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   19d9a:	f240 36e7 	movw	r6, #999	; 0x3e7
   19d9e:	2700      	movs	r7, #0
   19da0:	fbc0 6701 	smlal	r6, r7, r0, r1
   19da4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19da8:	2300      	movs	r3, #0
   19daa:	4630      	mov	r0, r6
   19dac:	4639      	mov	r1, r7
   19dae:	f7e6 fa47 	bl	240 <__aeabi_uldivmod>
   19db2:	4602      	mov	r2, r0
   19db4:	460b      	mov	r3, r1
			k_work_schedule(&conn->deferred_work,
   19db6:	f104 0060 	add.w	r0, r4, #96	; 0x60
}
   19dba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			k_work_schedule(&conn->deferred_work,
   19dbe:	f00b bc11 	b.w	255e4 <k_work_schedule>
Z_GENLIST_IS_EMPTY(slist)
   19dc2:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
   19dc4:	b128      	cbz	r0, 19dd2 <bt_conn_set_state+0x1b2>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19dc6:	69a1      	ldr	r1, [r4, #24]
   19dc8:	6803      	ldr	r3, [r0, #0]
	list->head = node;
   19dca:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   19dcc:	4288      	cmp	r0, r1
	list->tail = node;
   19dce:	bf08      	it	eq
   19dd0:	61a3      	streq	r3, [r4, #24]
   19dd2:	f382 8811 	msr	BASEPRI, r2
   19dd6:	f3bf 8f6f 	isb	sy
		if (!node) {
   19dda:	2800      	cmp	r0, #0
   19ddc:	d080      	beq.n	19ce0 <bt_conn_set_state+0xc0>
	__asm__ volatile(
   19dde:	f04f 0240 	mov.w	r2, #64	; 0x40
   19de2:	f3ef 8311 	mrs	r3, BASEPRI
   19de6:	f382 8812 	msr	BASEPRI_MAX, r2
   19dea:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
   19dee:	68c2      	ldr	r2, [r0, #12]
   19df0:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
   19df2:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
   19df4:	f383 8811 	msr	BASEPRI, r3
   19df8:	f3bf 8f6f 	isb	sy
		tx_free(tx);
   19dfc:	f7ff fc0c 	bl	19618 <tx_free>
   19e00:	e75c      	b.n	19cbc <bt_conn_set_state+0x9c>
		BT_WARN("no valid (%u) state was set", state);
   19e02:	4a07      	ldr	r2, [pc, #28]	; (19e20 <bt_conn_set_state+0x200>)
   19e04:	6813      	ldr	r3, [r2, #0]
   19e06:	f013 0f06 	tst.w	r3, #6
   19e0a:	f43f af69 	beq.w	19ce0 <bt_conn_set_state+0xc0>
   19e0e:	4b05      	ldr	r3, [pc, #20]	; (19e24 <bt_conn_set_state+0x204>)
   19e10:	480c      	ldr	r0, [pc, #48]	; (19e44 <bt_conn_set_state+0x224>)
   19e12:	1ad2      	subs	r2, r2, r3
   19e14:	0892      	lsrs	r2, r2, #2
   19e16:	0192      	lsls	r2, r2, #6
   19e18:	f042 0202 	orr.w	r2, r2, #2
   19e1c:	4629      	mov	r1, r5
   19e1e:	e719      	b.n	19c54 <bt_conn_set_state+0x34>
   19e20:	20000748 	.word	0x20000748
   19e24:	20000740 	.word	0x20000740
   19e28:	00031754 	.word	0x00031754
   19e2c:	0002dd54 	.word	0x0002dd54
   19e30:	0003174a 	.word	0x0003174a
   19e34:	200003a8 	.word	0x200003a8
   19e38:	200004f8 	.word	0x200004f8
   19e3c:	00031765 	.word	0x00031765
   19e40:	200002a8 	.word	0x200002a8
   19e44:	0003177c 	.word	0x0003177c

00019e48 <bt_conn_index>:
		index = conn - acl_conns;
   19e48:	4a0c      	ldr	r2, [pc, #48]	; (19e7c <bt_conn_index+0x34>)
{
   19e4a:	b510      	push	{r4, lr}
		index = conn - acl_conns;
   19e4c:	1a84      	subs	r4, r0, r2
   19e4e:	10e3      	asrs	r3, r4, #3
   19e50:	4c0b      	ldr	r4, [pc, #44]	; (19e80 <bt_conn_index+0x38>)
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   19e52:	4290      	cmp	r0, r2
		index = conn - acl_conns;
   19e54:	fb04 f403 	mul.w	r4, r4, r3
		__ASSERT(index >= 0 && index < ARRAY_SIZE(acl_conns),
   19e58:	d00e      	beq.n	19e78 <bt_conn_index+0x30>
   19e5a:	490a      	ldr	r1, [pc, #40]	; (19e84 <bt_conn_index+0x3c>)
   19e5c:	4a0a      	ldr	r2, [pc, #40]	; (19e88 <bt_conn_index+0x40>)
   19e5e:	480b      	ldr	r0, [pc, #44]	; (19e8c <bt_conn_index+0x44>)
   19e60:	f240 436c 	movw	r3, #1132	; 0x46c
   19e64:	f00e fe99 	bl	28b9a <printk>
   19e68:	4809      	ldr	r0, [pc, #36]	; (19e90 <bt_conn_index+0x48>)
   19e6a:	f00e fe96 	bl	28b9a <printk>
   19e6e:	4806      	ldr	r0, [pc, #24]	; (19e88 <bt_conn_index+0x40>)
   19e70:	f240 416c 	movw	r1, #1132	; 0x46c
   19e74:	f00f f8d2 	bl	2901c <assert_post_action>
}
   19e78:	b2e0      	uxtb	r0, r4
   19e7a:	bd10      	pop	{r4, pc}
   19e7c:	20001a80 	.word	0x20001a80
   19e80:	c28f5c29 	.word	0xc28f5c29
   19e84:	00031798 	.word	0x00031798
   19e88:	00031565 	.word	0x00031565
   19e8c:	0002e93e 	.word	0x0002e93e
   19e90:	0003185f 	.word	0x0003185f

00019e94 <bt_conn_create_pdu_timeout>:
{
   19e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19e96:	4604      	mov	r4, r0
   19e98:	460d      	mov	r5, r1
   19e9a:	4617      	mov	r7, r2
   19e9c:	461e      	mov	r6, r3
	__ASSERT_NO_MSG(!k_is_in_isr());
   19e9e:	f012 fcef 	bl	2c880 <k_is_in_isr>
   19ea2:	b158      	cbz	r0, 19ebc <bt_conn_create_pdu_timeout+0x28>
   19ea4:	4915      	ldr	r1, [pc, #84]	; (19efc <bt_conn_create_pdu_timeout+0x68>)
   19ea6:	4816      	ldr	r0, [pc, #88]	; (19f00 <bt_conn_create_pdu_timeout+0x6c>)
   19ea8:	4a16      	ldr	r2, [pc, #88]	; (19f04 <bt_conn_create_pdu_timeout+0x70>)
   19eaa:	f44f 6391 	mov.w	r3, #1160	; 0x488
   19eae:	f00e fe74 	bl	28b9a <printk>
   19eb2:	4814      	ldr	r0, [pc, #80]	; (19f04 <bt_conn_create_pdu_timeout+0x70>)
   19eb4:	f44f 6191 	mov.w	r1, #1160	; 0x488
   19eb8:	f00f f8b0 	bl	2901c <assert_post_action>
	return net_buf_alloc_fixed(pool, timeout);
   19ebc:	4812      	ldr	r0, [pc, #72]	; (19f08 <bt_conn_create_pdu_timeout+0x74>)
   19ebe:	463a      	mov	r2, r7
   19ec0:	2c00      	cmp	r4, #0
   19ec2:	bf18      	it	ne
   19ec4:	4620      	movne	r0, r4
   19ec6:	4633      	mov	r3, r6
   19ec8:	f012 f8af 	bl	2c02a <net_buf_alloc_fixed>
	if (!buf) {
   19ecc:	4604      	mov	r4, r0
   19ece:	b978      	cbnz	r0, 19ef0 <bt_conn_create_pdu_timeout+0x5c>
		BT_WARN("Unable to allocate buffer within timeout");
   19ed0:	490e      	ldr	r1, [pc, #56]	; (19f0c <bt_conn_create_pdu_timeout+0x78>)
   19ed2:	680b      	ldr	r3, [r1, #0]
   19ed4:	f013 0f06 	tst.w	r3, #6
   19ed8:	d008      	beq.n	19eec <bt_conn_create_pdu_timeout+0x58>
   19eda:	4b0d      	ldr	r3, [pc, #52]	; (19f10 <bt_conn_create_pdu_timeout+0x7c>)
   19edc:	480d      	ldr	r0, [pc, #52]	; (19f14 <bt_conn_create_pdu_timeout+0x80>)
   19ede:	1ac9      	subs	r1, r1, r3
   19ee0:	0889      	lsrs	r1, r1, #2
   19ee2:	0189      	lsls	r1, r1, #6
   19ee4:	f041 0102 	orr.w	r1, r1, #2
   19ee8:	f00f f9f9 	bl	292de <log_0>
}
   19eec:	4620      	mov	r0, r4
   19eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	net_buf_simple_reserve(&buf->b, reserve);
   19ef0:	1d29      	adds	r1, r5, #4
   19ef2:	3008      	adds	r0, #8
   19ef4:	f006 f824 	bl	1ff40 <net_buf_simple_reserve>
	return buf;
   19ef8:	e7f8      	b.n	19eec <bt_conn_create_pdu_timeout+0x58>
   19efa:	bf00      	nop
   19efc:	0002fe1c 	.word	0x0002fe1c
   19f00:	0002e93e 	.word	0x0002e93e
   19f04:	00031565 	.word	0x00031565
   19f08:	200008f0 	.word	0x200008f0
   19f0c:	20000748 	.word	0x20000748
   19f10:	20000740 	.word	0x20000740
   19f14:	00031879 	.word	0x00031879

00019f18 <notify_le_param_updated>:
	}
}
#endif /* defined(CONFIG_BT_REMOTE_INFO) */

void notify_le_param_updated(struct bt_conn *conn)
{
   19f18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_cb *cb;

	/* If new connection parameters meet requirement of pending
	 * parameters don't send peripheral conn param request anymore on timeout
	 */
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19f1c:	1d03      	adds	r3, r0, #4
{
   19f1e:	4604      	mov	r4, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   19f20:	4618      	mov	r0, r3
   19f22:	f010 fe27 	bl	2ab74 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19f26:	0582      	lsls	r2, r0, #22
   19f28:	d519      	bpl.n	19f5e <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   19f2a:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	; 0xa6
	if (atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET) &&
   19f2e:	f8b4 10a8 	ldrh.w	r1, [r4, #168]	; 0xa8
   19f32:	4291      	cmp	r1, r2
   19f34:	d813      	bhi.n	19f5e <notify_le_param_updated+0x46>
	    conn->le.interval >= conn->le.interval_min &&
   19f36:	f8b4 10aa 	ldrh.w	r1, [r4, #170]	; 0xaa
   19f3a:	4291      	cmp	r1, r2
   19f3c:	d30f      	bcc.n	19f5e <notify_le_param_updated+0x46>
	    conn->le.interval <= conn->le.interval_max &&
	    conn->le.latency == conn->le.pending_latency &&
   19f3e:	e9d4 122b 	ldrd	r1, r2, [r4, #172]	; 0xac
   19f42:	4291      	cmp	r1, r2
   19f44:	d10b      	bne.n	19f5e <notify_le_param_updated+0x46>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19f46:	f3bf 8f5b 	dmb	ish
   19f4a:	e853 2f00 	ldrex	r2, [r3]
   19f4e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
   19f52:	e843 2100 	strex	r1, r2, [r3]
   19f56:	2900      	cmp	r1, #0
   19f58:	d1f7      	bne.n	19f4a <notify_le_param_updated+0x32>
   19f5a:	f3bf 8f5b 	dmb	ish
	    conn->le.timeout == conn->le.pending_timeout) {
		atomic_clear_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_SET);
	}

	for (cb = callback_list; cb; cb = cb->_next) {
   19f5e:	4b1b      	ldr	r3, [pc, #108]	; (19fcc <notify_le_param_updated+0xb4>)
   19f60:	681d      	ldr	r5, [r3, #0]
   19f62:	b9c5      	cbnz	r5, 19f96 <notify_le_param_updated+0x7e>
					     conn->le.latency,
					     conn->le.timeout);
		}
	}

	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19f64:	4e1a      	ldr	r6, [pc, #104]	; (19fd0 <notify_le_param_updated+0xb8>)
   19f66:	4d1b      	ldr	r5, [pc, #108]	; (19fd4 <notify_le_param_updated+0xbc>)
   19f68:	4f1b      	ldr	r7, [pc, #108]	; (19fd8 <notify_le_param_updated+0xc0>)
   19f6a:	46b1      	mov	r9, r6
   19f6c:	42b5      	cmp	r5, r6
   19f6e:	d90e      	bls.n	19f8e <notify_le_param_updated+0x76>
   19f70:	491a      	ldr	r1, [pc, #104]	; (19fdc <notify_le_param_updated+0xc4>)
   19f72:	481b      	ldr	r0, [pc, #108]	; (19fe0 <notify_le_param_updated+0xc8>)
   19f74:	f240 535f 	movw	r3, #1375	; 0x55f
   19f78:	463a      	mov	r2, r7
   19f7a:	f00e fe0e 	bl	28b9a <printk>
   19f7e:	4819      	ldr	r0, [pc, #100]	; (19fe4 <notify_le_param_updated+0xcc>)
   19f80:	f00e fe0b 	bl	28b9a <printk>
   19f84:	f240 515f 	movw	r1, #1375	; 0x55f
   19f88:	4638      	mov	r0, r7
   19f8a:	f00f f847 	bl	2901c <assert_post_action>
   19f8e:	454d      	cmp	r5, r9
   19f90:	d30d      	bcc.n	19fae <notify_le_param_updated+0x96>
			cb->le_param_updated(conn, conn->le.interval,
					     conn->le.latency,
					     conn->le.timeout);
		}
	}
}
   19f92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (cb->le_param_updated) {
   19f96:	68ee      	ldr	r6, [r5, #12]
   19f98:	b13e      	cbz	r6, 19faa <notify_le_param_updated+0x92>
			cb->le_param_updated(conn, conn->le.interval,
   19f9a:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   19f9e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   19fa2:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   19fa6:	4620      	mov	r0, r4
   19fa8:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
   19faa:	692d      	ldr	r5, [r5, #16]
   19fac:	e7d9      	b.n	19f62 <notify_le_param_updated+0x4a>
		if (cb->le_param_updated) {
   19fae:	f8d5 800c 	ldr.w	r8, [r5, #12]
   19fb2:	f1b8 0f00 	cmp.w	r8, #0
   19fb6:	d007      	beq.n	19fc8 <notify_le_param_updated+0xb0>
			cb->le_param_updated(conn, conn->le.interval,
   19fb8:	f8b4 30ae 	ldrh.w	r3, [r4, #174]	; 0xae
   19fbc:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   19fc0:	f8b4 10a6 	ldrh.w	r1, [r4, #166]	; 0xa6
   19fc4:	4620      	mov	r0, r4
   19fc6:	47c0      	blx	r8
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   19fc8:	3514      	adds	r5, #20
   19fca:	e7cf      	b.n	19f6c <notify_le_param_updated+0x54>
   19fcc:	20002740 	.word	0x20002740
   19fd0:	0002d1d8 	.word	0x0002d1d8
   19fd4:	0002d1d8 	.word	0x0002d1d8
   19fd8:	00031565 	.word	0x00031565
   19fdc:	00031595 	.word	0x00031595
   19fe0:	0002e93e 	.word	0x0002e93e
   19fe4:	000315b0 	.word	0x000315b0

00019fe8 <le_param_req>:
	}
}
#endif

bool le_param_req(struct bt_conn *conn, struct bt_le_conn_param *param)
{
   19fe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19fec:	4607      	mov	r7, r0
	struct bt_conn_cb *cb;

	if (!bt_le_conn_params_valid(param)) {
   19fee:	4608      	mov	r0, r1
{
   19ff0:	460c      	mov	r4, r1
	if (!bt_le_conn_params_valid(param)) {
   19ff2:	f010 fcc9 	bl	2a988 <bt_le_conn_params_valid>
   19ff6:	4605      	mov	r5, r0
   19ff8:	b918      	cbnz	r0, 1a002 <le_param_req+0x1a>
		return false;
   19ffa:	2500      	movs	r5, #0
		}
	}

	/* Default to accepting if there's no app callback */
	return true;
}
   19ffc:	4628      	mov	r0, r5
   19ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
   1a002:	4b1d      	ldr	r3, [pc, #116]	; (1a078 <le_param_req+0x90>)
   1a004:	681e      	ldr	r6, [r3, #0]
   1a006:	b9e6      	cbnz	r6, 1a042 <le_param_req+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a008:	f8df 8080 	ldr.w	r8, [pc, #128]	; 1a08c <le_param_req+0xa4>
   1a00c:	4e1b      	ldr	r6, [pc, #108]	; (1a07c <le_param_req+0x94>)
   1a00e:	f8df 9080 	ldr.w	r9, [pc, #128]	; 1a090 <le_param_req+0xa8>
   1a012:	46c2      	mov	sl, r8
   1a014:	4546      	cmp	r6, r8
   1a016:	d90e      	bls.n	1a036 <le_param_req+0x4e>
   1a018:	4919      	ldr	r1, [pc, #100]	; (1a080 <le_param_req+0x98>)
   1a01a:	481a      	ldr	r0, [pc, #104]	; (1a084 <le_param_req+0x9c>)
   1a01c:	f240 53a7 	movw	r3, #1447	; 0x5a7
   1a020:	464a      	mov	r2, r9
   1a022:	f00e fdba 	bl	28b9a <printk>
   1a026:	4818      	ldr	r0, [pc, #96]	; (1a088 <le_param_req+0xa0>)
   1a028:	f00e fdb7 	bl	28b9a <printk>
   1a02c:	f240 51a7 	movw	r1, #1447	; 0x5a7
   1a030:	4648      	mov	r0, r9
   1a032:	f00e fff3 	bl	2901c <assert_post_action>
   1a036:	4556      	cmp	r6, sl
   1a038:	d2e0      	bcs.n	19ffc <le_param_req+0x14>
		if (!cb->le_param_req) {
   1a03a:	68b3      	ldr	r3, [r6, #8]
   1a03c:	b983      	cbnz	r3, 1a060 <le_param_req+0x78>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a03e:	3614      	adds	r6, #20
   1a040:	e7e8      	b.n	1a014 <le_param_req+0x2c>
		if (!cb->le_param_req) {
   1a042:	68b3      	ldr	r3, [r6, #8]
   1a044:	b90b      	cbnz	r3, 1a04a <le_param_req+0x62>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a046:	6936      	ldr	r6, [r6, #16]
   1a048:	e7dd      	b.n	1a006 <le_param_req+0x1e>
		if (!cb->le_param_req(conn, param)) {
   1a04a:	4621      	mov	r1, r4
   1a04c:	4638      	mov	r0, r7
   1a04e:	4798      	blx	r3
   1a050:	2800      	cmp	r0, #0
   1a052:	d0d2      	beq.n	19ffa <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1a054:	4620      	mov	r0, r4
   1a056:	f010 fc97 	bl	2a988 <bt_le_conn_params_valid>
   1a05a:	2800      	cmp	r0, #0
   1a05c:	d1f3      	bne.n	1a046 <le_param_req+0x5e>
   1a05e:	e7cc      	b.n	19ffa <le_param_req+0x12>
		if (!cb->le_param_req(conn, param)) {
   1a060:	4621      	mov	r1, r4
   1a062:	4638      	mov	r0, r7
   1a064:	4798      	blx	r3
   1a066:	2800      	cmp	r0, #0
   1a068:	d0c7      	beq.n	19ffa <le_param_req+0x12>
		if (!bt_le_conn_params_valid(param)) {
   1a06a:	4620      	mov	r0, r4
   1a06c:	f010 fc8c 	bl	2a988 <bt_le_conn_params_valid>
   1a070:	2800      	cmp	r0, #0
   1a072:	d1e4      	bne.n	1a03e <le_param_req+0x56>
   1a074:	e7c1      	b.n	19ffa <le_param_req+0x12>
   1a076:	bf00      	nop
   1a078:	20002740 	.word	0x20002740
   1a07c:	0002d1d8 	.word	0x0002d1d8
   1a080:	00031595 	.word	0x00031595
   1a084:	0002e93e 	.word	0x0002e93e
   1a088:	000315b0 	.word	0x000315b0
   1a08c:	0002d1d8 	.word	0x0002d1d8
   1a090:	00031565 	.word	0x00031565

0001a094 <bt_conn_cb_register>:
}
#endif /* CONFIG_BT_SMP */

void bt_conn_cb_register(struct bt_conn_cb *cb)
{
	cb->_next = callback_list;
   1a094:	4b02      	ldr	r3, [pc, #8]	; (1a0a0 <bt_conn_cb_register+0xc>)
   1a096:	681a      	ldr	r2, [r3, #0]
   1a098:	6102      	str	r2, [r0, #16]
	callback_list = cb;
   1a09a:	6018      	str	r0, [r3, #0]
}
   1a09c:	4770      	bx	lr
   1a09e:	bf00      	nop
   1a0a0:	20002740 	.word	0x20002740

0001a0a4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
   1a0a4:	b538      	push	{r3, r4, r5, lr}
   1a0a6:	4605      	mov	r5, r0
   1a0a8:	460c      	mov	r4, r1
	return bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
   1a0aa:	4809      	ldr	r0, [pc, #36]	; (1a0d0 <bt_conn_add_le+0x2c>)
   1a0ac:	2101      	movs	r1, #1
   1a0ae:	f7ff fbb7 	bl	19820 <bt_conn_new>
	struct bt_conn *conn = acl_conn_new();

	if (!conn) {
   1a0b2:	4602      	mov	r2, r0
   1a0b4:	b148      	cbz	r0, 1a0ca <bt_conn_add_le+0x26>
		return NULL;
	}

	conn->id = id;
   1a0b6:	7205      	strb	r5, [r0, #8]
	bt_addr_le_copy(&conn->le.dst, peer);
   1a0b8:	4621      	mov	r1, r4
   1a0ba:	3090      	adds	r0, #144	; 0x90
   1a0bc:	f010 fd60 	bl	2ab80 <bt_addr_le_copy>
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
	conn->required_sec_level = BT_SECURITY_L1;
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
   1a0c0:	2301      	movs	r3, #1
   1a0c2:	7093      	strb	r3, [r2, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
   1a0c4:	4b03      	ldr	r3, [pc, #12]	; (1a0d4 <bt_conn_add_le+0x30>)
   1a0c6:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
   1a0ca:	4610      	mov	r0, r2
   1a0cc:	bd38      	pop	{r3, r4, r5, pc}
   1a0ce:	bf00      	nop
   1a0d0:	20001a80 	.word	0x20001a80
   1a0d4:	00280018 	.word	0x00280018

0001a0d8 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
   1a0d8:	b570      	push	{r4, r5, r6, lr}
   1a0da:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a0dc:	480c      	ldr	r0, [pc, #48]	; (1a110 <bt_conn_lookup_addr_le+0x38>)
{
   1a0de:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a0e0:	f010 fd84 	bl	2abec <bt_conn_ref>

		if (!conn) {
   1a0e4:	4604      	mov	r4, r0
   1a0e6:	b128      	cbz	r0, 1a0f4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1a0e8:	7883      	ldrb	r3, [r0, #2]
   1a0ea:	2b01      	cmp	r3, #1
   1a0ec:	d004      	beq.n	1a0f8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
   1a0ee:	f7ff fd61 	bl	19bb4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1a0f2:	2400      	movs	r4, #0
}
   1a0f4:	4620      	mov	r0, r4
   1a0f6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a0f8:	4629      	mov	r1, r5
   1a0fa:	4632      	mov	r2, r6
   1a0fc:	f010 fdbe 	bl	2ac7c <bt_conn_is_peer_addr_le>
   1a100:	4605      	mov	r5, r0
   1a102:	2800      	cmp	r0, #0
   1a104:	d1f6      	bne.n	1a0f4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
   1a106:	4620      	mov	r0, r4
   1a108:	f7ff fd54 	bl	19bb4 <bt_conn_unref>
	return NULL;
   1a10c:	462c      	mov	r4, r5
			continue;
   1a10e:	e7f1      	b.n	1a0f4 <bt_conn_lookup_addr_le+0x1c>
   1a110:	20001a80 	.word	0x20001a80

0001a114 <bt_conn_exists_le>:
{
   1a114:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1a116:	f7ff ffdf 	bl	1a0d8 <bt_conn_lookup_addr_le>
	if (conn) {
   1a11a:	4604      	mov	r4, r0
   1a11c:	b1c0      	cbz	r0, 1a150 <bt_conn_exists_le+0x3c>
		BT_WARN("Found valid connection in %s state",
   1a11e:	4b0d      	ldr	r3, [pc, #52]	; (1a154 <bt_conn_exists_le+0x40>)
   1a120:	681a      	ldr	r2, [r3, #0]
   1a122:	f012 0f06 	tst.w	r2, #6
   1a126:	d00f      	beq.n	1a148 <bt_conn_exists_le+0x34>
   1a128:	4a0b      	ldr	r2, [pc, #44]	; (1a158 <bt_conn_exists_le+0x44>)
   1a12a:	1a9a      	subs	r2, r3, r2
   1a12c:	7a83      	ldrb	r3, [r0, #10]
   1a12e:	480b      	ldr	r0, [pc, #44]	; (1a15c <bt_conn_exists_le+0x48>)
   1a130:	2b08      	cmp	r3, #8
   1a132:	bf96      	itet	ls
   1a134:	490a      	ldrls	r1, [pc, #40]	; (1a160 <bt_conn_exists_le+0x4c>)
   1a136:	490b      	ldrhi	r1, [pc, #44]	; (1a164 <bt_conn_exists_le+0x50>)
   1a138:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
   1a13c:	0892      	lsrs	r2, r2, #2
   1a13e:	0192      	lsls	r2, r2, #6
   1a140:	f042 0202 	orr.w	r2, r2, #2
   1a144:	f00f f8d8 	bl	292f8 <log_1>
		bt_conn_unref(conn);
   1a148:	4620      	mov	r0, r4
   1a14a:	f7ff fd33 	bl	19bb4 <bt_conn_unref>
		return true;
   1a14e:	2001      	movs	r0, #1
}
   1a150:	bd10      	pop	{r4, pc}
   1a152:	bf00      	nop
   1a154:	20000748 	.word	0x20000748
   1a158:	20000740 	.word	0x20000740
   1a15c:	000318a2 	.word	0x000318a2
   1a160:	0002dd54 	.word	0x0002dd54
   1a164:	0003174a 	.word	0x0003174a

0001a168 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
   1a168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a16a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a16c:	480e      	ldr	r0, [pc, #56]	; (1a1a8 <bt_conn_lookup_state_le+0x40>)
{
   1a16e:	460e      	mov	r6, r1
   1a170:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a172:	f010 fd3b 	bl	2abec <bt_conn_ref>

		if (!conn) {
   1a176:	4604      	mov	r4, r0
   1a178:	b1a0      	cbz	r0, 1a1a4 <bt_conn_lookup_state_le+0x3c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
   1a17a:	7883      	ldrb	r3, [r0, #2]
   1a17c:	2b01      	cmp	r3, #1
   1a17e:	d003      	beq.n	1a188 <bt_conn_lookup_state_le+0x20>
			bt_conn_unref(conn);
			continue;
		}

		if (!(conn->state == state && conn->id == id)) {
			bt_conn_unref(conn);
   1a180:	f7ff fd18 	bl	19bb4 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
   1a184:	2400      	movs	r4, #0
			continue;
   1a186:	e00d      	b.n	1a1a4 <bt_conn_lookup_state_le+0x3c>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
   1a188:	b136      	cbz	r6, 1a198 <bt_conn_lookup_state_le+0x30>
   1a18a:	4632      	mov	r2, r6
   1a18c:	4629      	mov	r1, r5
   1a18e:	f010 fd75 	bl	2ac7c <bt_conn_is_peer_addr_le>
   1a192:	b908      	cbnz	r0, 1a198 <bt_conn_lookup_state_le+0x30>
			bt_conn_unref(conn);
   1a194:	4620      	mov	r0, r4
   1a196:	e7f3      	b.n	1a180 <bt_conn_lookup_state_le+0x18>
		if (!(conn->state == state && conn->id == id)) {
   1a198:	7aa3      	ldrb	r3, [r4, #10]
   1a19a:	42bb      	cmp	r3, r7
   1a19c:	d1fa      	bne.n	1a194 <bt_conn_lookup_state_le+0x2c>
   1a19e:	7a23      	ldrb	r3, [r4, #8]
   1a1a0:	42ab      	cmp	r3, r5
   1a1a2:	d1f7      	bne.n	1a194 <bt_conn_lookup_state_le+0x2c>
}
   1a1a4:	4620      	mov	r0, r4
   1a1a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a1a8:	20001a80 	.word	0x20001a80

0001a1ac <bt_conn_get_info>:
{
	return &conn->le.dst;
}

int bt_conn_get_info(const struct bt_conn *conn, struct bt_conn_info *info)
{
   1a1ac:	b510      	push	{r4, lr}
	info->type = conn->type;
   1a1ae:	7882      	ldrb	r2, [r0, #2]
   1a1b0:	700a      	strb	r2, [r1, #0]
	info->role = conn->role;
   1a1b2:	78c4      	ldrb	r4, [r0, #3]
   1a1b4:	704c      	strb	r4, [r1, #1]
	info->id = conn->id;
   1a1b6:	7a03      	ldrb	r3, [r0, #8]
   1a1b8:	708b      	strb	r3, [r1, #2]

	switch (conn->type) {
   1a1ba:	2a01      	cmp	r2, #1
   1a1bc:	d11c      	bne.n	1a1f8 <bt_conn_get_info+0x4c>
	case BT_CONN_TYPE_LE:
		info->le.dst = &conn->le.dst;
   1a1be:	f100 0290 	add.w	r2, r0, #144	; 0x90
   1a1c2:	608a      	str	r2, [r1, #8]
		info->le.src = &bt_dev.id_addr[conn->id];
   1a1c4:	4a0e      	ldr	r2, [pc, #56]	; (1a200 <bt_conn_get_info+0x54>)
   1a1c6:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1a1ca:	4413      	add	r3, r2
   1a1cc:	604b      	str	r3, [r1, #4]
		if (conn->role == BT_HCI_ROLE_CENTRAL) {
   1a1ce:	f100 029e 	add.w	r2, r0, #158	; 0x9e
   1a1d2:	f100 0397 	add.w	r3, r0, #151	; 0x97
   1a1d6:	b964      	cbnz	r4, 1a1f2 <bt_conn_get_info+0x46>
			info->le.local = &conn->le.init_addr;
			info->le.remote = &conn->le.resp_addr;
   1a1d8:	e9c1 3203 	strd	r3, r2, [r1, #12]
		} else {
			info->le.local = &conn->le.resp_addr;
			info->le.remote = &conn->le.init_addr;
		}
		info->le.interval = conn->le.interval;
   1a1dc:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   1a1e0:	828b      	strh	r3, [r1, #20]
		info->le.latency = conn->le.latency;
   1a1e2:	f8b0 30ac 	ldrh.w	r3, [r0, #172]	; 0xac
   1a1e6:	82cb      	strh	r3, [r1, #22]
		info->le.timeout = conn->le.timeout;
   1a1e8:	f8b0 30ae 	ldrh.w	r3, [r0, #174]	; 0xae
   1a1ec:	830b      	strh	r3, [r1, #24]
		info->le.phy = &conn->le.phy;
#endif
#if defined(CONFIG_BT_USER_DATA_LEN_UPDATE)
		info->le.data_len = &conn->le.data_len;
#endif
		return 0;
   1a1ee:	2000      	movs	r0, #0
		return 0;
#endif
	}

	return -EINVAL;
}
   1a1f0:	bd10      	pop	{r4, pc}
			info->le.remote = &conn->le.init_addr;
   1a1f2:	e9c1 2303 	strd	r2, r3, [r1, #12]
   1a1f6:	e7f1      	b.n	1a1dc <bt_conn_get_info+0x30>
	return -EINVAL;
   1a1f8:	f06f 0015 	mvn.w	r0, #21
   1a1fc:	e7f8      	b.n	1a1f0 <bt_conn_get_info+0x44>
   1a1fe:	bf00      	nop
   1a200:	200002a8 	.word	0x200002a8

0001a204 <bt_conn_le_create>:

int bt_conn_le_create(const bt_addr_le_t *peer,
		      const struct bt_conn_le_create_param *create_param,
		      const struct bt_le_conn_param *conn_param,
		      struct bt_conn **ret_conn)
{
   1a204:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1a208:	4604      	mov	r4, r0
   1a20a:	4843      	ldr	r0, [pc, #268]	; (1a318 <bt_conn_le_create+0x114>)
   1a20c:	460e      	mov	r6, r1
   1a20e:	4615      	mov	r5, r2
   1a210:	461f      	mov	r7, r3
   1a212:	f010 fcaf 	bl	2ab74 <atomic_get>
	struct bt_conn *conn;
	bt_addr_le_t dst;
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a216:	0781      	lsls	r1, r0, #30
   1a218:	d405      	bmi.n	1a226 <bt_conn_le_create+0x22>
		return -EAGAIN;
   1a21a:	f06f 050a 	mvn.w	r5, #10
		return err;
	}

	*ret_conn = conn;
	return 0;
}
   1a21e:	4628      	mov	r0, r5
   1a220:	b002      	add	sp, #8
   1a222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!bt_le_conn_params_valid(conn_param)) {
   1a226:	4610      	mov	r0, r2
   1a228:	f010 fbae 	bl	2a988 <bt_le_conn_params_valid>
   1a22c:	b910      	cbnz	r0, 1a234 <bt_conn_le_create+0x30>
		return -EINVAL;
   1a22e:	f06f 0515 	mvn.w	r5, #21
   1a232:	e7f4      	b.n	1a21e <bt_conn_le_create+0x1a>
   1a234:	4838      	ldr	r0, [pc, #224]	; (1a318 <bt_conn_le_create+0x114>)
   1a236:	f010 fc9d 	bl	2ab74 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
   1a23a:	0642      	lsls	r2, r0, #25
   1a23c:	d4ed      	bmi.n	1a21a <bt_conn_le_create+0x16>
   1a23e:	4836      	ldr	r0, [pc, #216]	; (1a318 <bt_conn_le_create+0x114>)
   1a240:	f010 fc98 	bl	2ab74 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_INITIATING)) {
   1a244:	0503      	lsls	r3, r0, #20
   1a246:	f3c0 28c0 	ubfx	r8, r0, #11, #1
   1a24a:	d45e      	bmi.n	1a30a <bt_conn_le_create+0x106>
	if (!bt_id_scan_random_addr_check()) {
   1a24c:	f010 fc7a 	bl	2ab44 <bt_id_scan_random_addr_check>
   1a250:	2800      	cmp	r0, #0
   1a252:	d0ec      	beq.n	1a22e <bt_conn_le_create+0x2a>
	if (bt_conn_exists_le(BT_ID_DEFAULT, peer)) {
   1a254:	4621      	mov	r1, r4
   1a256:	4640      	mov	r0, r8
   1a258:	f7ff ff5c 	bl	1a114 <bt_conn_exists_le>
   1a25c:	2800      	cmp	r0, #0
   1a25e:	d1e6      	bne.n	1a22e <bt_conn_le_create+0x2a>
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   1a260:	7823      	ldrb	r3, [r4, #0]
   1a262:	3b02      	subs	r3, #2
   1a264:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&dst, peer);
   1a266:	4621      	mov	r1, r4
	if (peer->type == BT_ADDR_LE_PUBLIC_ID ||
   1a268:	d846      	bhi.n	1a2f8 <bt_conn_le_create+0xf4>
		bt_addr_le_copy(&dst, peer);
   1a26a:	4668      	mov	r0, sp
   1a26c:	f010 fc88 	bl	2ab80 <bt_addr_le_copy>
		dst.type -= BT_ADDR_LE_PUBLIC_ID;
   1a270:	f89d 3000 	ldrb.w	r3, [sp]
   1a274:	3b02      	subs	r3, #2
   1a276:	f88d 3000 	strb.w	r3, [sp]
	conn = bt_conn_add_le(BT_ID_DEFAULT, &dst);
   1a27a:	4669      	mov	r1, sp
   1a27c:	2000      	movs	r0, #0
   1a27e:	f7ff ff11 	bl	1a0a4 <bt_conn_add_le>
	if (!conn) {
   1a282:	4604      	mov	r4, r0
   1a284:	2800      	cmp	r0, #0
   1a286:	d043      	beq.n	1a310 <bt_conn_le_create+0x10c>
	conn->le.interval_min = param->interval_min;
   1a288:	882b      	ldrh	r3, [r5, #0]
   1a28a:	f8a0 30a8 	strh.w	r3, [r0, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   1a28e:	886b      	ldrh	r3, [r5, #2]
   1a290:	f8a0 30aa 	strh.w	r3, [r0, #170]	; 0xaa
	conn->le.latency = param->latency;
   1a294:	88ab      	ldrh	r3, [r5, #4]
   1a296:	f8a0 30ac 	strh.w	r3, [r0, #172]	; 0xac
	conn->le.timeout = param->timeout;
   1a29a:	88eb      	ldrh	r3, [r5, #6]
   1a29c:	f8a0 30ae 	strh.w	r3, [r0, #174]	; 0xae
	bt_dev.create_param = *param;
   1a2a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1a2a4:	4d1d      	ldr	r5, [pc, #116]	; (1a31c <bt_conn_le_create+0x118>)
   1a2a6:	f105 0c08 	add.w	ip, r5, #8
   1a2aa:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
		(bt_dev.create_param.timeout != 0) ?
   1a2ae:	8aab      	ldrh	r3, [r5, #20]
	bt_dev.create_param.timeout =
   1a2b0:	2b00      	cmp	r3, #0
   1a2b2:	bf08      	it	eq
   1a2b4:	f44f 7396 	moveq.w	r3, #300	; 0x12c
   1a2b8:	82ab      	strh	r3, [r5, #20]
		(bt_dev.create_param.interval_coded != 0) ?
   1a2ba:	8a2b      	ldrh	r3, [r5, #16]
   1a2bc:	462a      	mov	r2, r5
	bt_dev.create_param.interval_coded =
   1a2be:	b903      	cbnz	r3, 1a2c2 <bt_conn_le_create+0xbe>
   1a2c0:	89ab      	ldrh	r3, [r5, #12]
   1a2c2:	8213      	strh	r3, [r2, #16]
		(bt_dev.create_param.window_coded != 0) ?
   1a2c4:	8a53      	ldrh	r3, [r2, #18]
	bt_dev.create_param.window_coded =
   1a2c6:	b903      	cbnz	r3, 1a2ca <bt_conn_le_create+0xc6>
   1a2c8:	89d3      	ldrh	r3, [r2, #14]
   1a2ca:	8253      	strh	r3, [r2, #18]
	bt_conn_set_state(conn, BT_CONN_CONNECT);
   1a2cc:	2106      	movs	r1, #6
   1a2ce:	4620      	mov	r0, r4
   1a2d0:	f7ff fca6 	bl	19c20 <bt_conn_set_state>
	err = bt_le_create_conn(conn);
   1a2d4:	4620      	mov	r0, r4
   1a2d6:	f010 fb3a 	bl	2a94e <bt_le_create_conn>
	if (err) {
   1a2da:	4605      	mov	r5, r0
   1a2dc:	b198      	cbz	r0, 1a306 <bt_conn_le_create+0x102>
		conn->err = 0;
   1a2de:	2600      	movs	r6, #0
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a2e0:	4631      	mov	r1, r6
   1a2e2:	4620      	mov	r0, r4
		conn->err = 0;
   1a2e4:	7266      	strb	r6, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a2e6:	f7ff fc9b 	bl	19c20 <bt_conn_set_state>
		bt_conn_unref(conn);
   1a2ea:	4620      	mov	r0, r4
   1a2ec:	f7ff fc62 	bl	19bb4 <bt_conn_unref>
		bt_le_scan_update(false);
   1a2f0:	4630      	mov	r0, r6
   1a2f2:	f7fe ffab 	bl	1924c <bt_le_scan_update>
		return err;
   1a2f6:	e792      	b.n	1a21e <bt_conn_le_create+0x1a>
		bt_addr_le_copy(&dst, bt_lookup_id_addr(BT_ID_DEFAULT, peer));
   1a2f8:	f010 fc10 	bl	2ab1c <bt_lookup_id_addr>
   1a2fc:	4601      	mov	r1, r0
   1a2fe:	4668      	mov	r0, sp
   1a300:	f010 fc3e 	bl	2ab80 <bt_addr_le_copy>
   1a304:	e7b9      	b.n	1a27a <bt_conn_le_create+0x76>
	*ret_conn = conn;
   1a306:	603c      	str	r4, [r7, #0]
	return 0;
   1a308:	e789      	b.n	1a21e <bt_conn_le_create+0x1a>
		return -EALREADY;
   1a30a:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1a30e:	e786      	b.n	1a21e <bt_conn_le_create+0x1a>
		return -ENOMEM;
   1a310:	f06f 050b 	mvn.w	r5, #11
   1a314:	e783      	b.n	1a21e <bt_conn_le_create+0x1a>
   1a316:	bf00      	nop
   1a318:	20000374 	.word	0x20000374
   1a31c:	200002a8 	.word	0x200002a8

0001a320 <bt_le_set_auto_conn>:

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
int bt_le_set_auto_conn(const bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
   1a320:	b570      	push	{r4, r5, r6, lr}
   1a322:	4606      	mov	r6, r0
   1a324:	4838      	ldr	r0, [pc, #224]	; (1a408 <bt_le_set_auto_conn+0xe8>)
   1a326:	460d      	mov	r5, r1
   1a328:	f010 fc24 	bl	2ab74 <atomic_get>
	struct bt_conn *conn;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1a32c:	0780      	lsls	r0, r0, #30
   1a32e:	d564      	bpl.n	1a3fa <bt_le_set_auto_conn+0xda>
		return -EAGAIN;
	}

	if (param && !bt_le_conn_params_valid(param)) {
   1a330:	b929      	cbnz	r1, 1a33e <bt_le_set_auto_conn+0x1e>
		return -EINVAL;
	}

	if (!bt_id_scan_random_addr_check()) {
   1a332:	f010 fc07 	bl	2ab44 <bt_id_scan_random_addr_check>
   1a336:	b940      	cbnz	r0, 1a34a <bt_le_set_auto_conn+0x2a>
		return -EINVAL;
   1a338:	f06f 0015 	mvn.w	r0, #21
	}

	bt_conn_unref(conn);

	return 0;
}
   1a33c:	bd70      	pop	{r4, r5, r6, pc}
	if (param && !bt_le_conn_params_valid(param)) {
   1a33e:	4608      	mov	r0, r1
   1a340:	f010 fb22 	bl	2a988 <bt_le_conn_params_valid>
   1a344:	2800      	cmp	r0, #0
   1a346:	d1f4      	bne.n	1a332 <bt_le_set_auto_conn+0x12>
   1a348:	e7f6      	b.n	1a338 <bt_le_set_auto_conn+0x18>
	conn = bt_conn_lookup_addr_le(BT_ID_DEFAULT, addr);
   1a34a:	4631      	mov	r1, r6
   1a34c:	2000      	movs	r0, #0
   1a34e:	f7ff fec3 	bl	1a0d8 <bt_conn_lookup_addr_le>
	if (!conn) {
   1a352:	4604      	mov	r4, r0
   1a354:	b928      	cbnz	r0, 1a362 <bt_le_set_auto_conn+0x42>
		conn = bt_conn_add_le(BT_ID_DEFAULT, addr);
   1a356:	4631      	mov	r1, r6
   1a358:	f7ff fea4 	bl	1a0a4 <bt_conn_add_le>
		if (!conn) {
   1a35c:	4604      	mov	r4, r0
   1a35e:	2800      	cmp	r0, #0
   1a360:	d04e      	beq.n	1a400 <bt_le_set_auto_conn+0xe0>
	if (param) {
   1a362:	1d23      	adds	r3, r4, #4
   1a364:	b385      	cbz	r5, 1a3c8 <bt_le_set_auto_conn+0xa8>
	conn->le.interval_min = param->interval_min;
   1a366:	882a      	ldrh	r2, [r5, #0]
   1a368:	f8a4 20a8 	strh.w	r2, [r4, #168]	; 0xa8
	conn->le.interval_max = param->interval_max;
   1a36c:	886a      	ldrh	r2, [r5, #2]
   1a36e:	f8a4 20aa 	strh.w	r2, [r4, #170]	; 0xaa
	conn->le.latency = param->latency;
   1a372:	88aa      	ldrh	r2, [r5, #4]
   1a374:	f8a4 20ac 	strh.w	r2, [r4, #172]	; 0xac
	conn->le.timeout = param->timeout;
   1a378:	88ea      	ldrh	r2, [r5, #6]
   1a37a:	f8a4 20ae 	strh.w	r2, [r4, #174]	; 0xae
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a37e:	f3bf 8f5b 	dmb	ish
   1a382:	e853 2f00 	ldrex	r2, [r3]
   1a386:	f042 0101 	orr.w	r1, r2, #1
   1a38a:	e843 1000 	strex	r0, r1, [r3]
   1a38e:	2800      	cmp	r0, #0
   1a390:	d1f7      	bne.n	1a382 <bt_le_set_auto_conn+0x62>
   1a392:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_and_set_bit(conn->flags,
   1a396:	07d1      	lsls	r1, r2, #31
   1a398:	d402      	bmi.n	1a3a0 <bt_le_set_auto_conn+0x80>
			bt_conn_ref(conn);
   1a39a:	4620      	mov	r0, r4
   1a39c:	f010 fc26 	bl	2abec <bt_conn_ref>
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a3a0:	7aa3      	ldrb	r3, [r4, #10]
   1a3a2:	b963      	cbnz	r3, 1a3be <bt_le_set_auto_conn+0x9e>
   1a3a4:	4818      	ldr	r0, [pc, #96]	; (1a408 <bt_le_set_auto_conn+0xe8>)
   1a3a6:	f010 fbe5 	bl	2ab74 <atomic_get>
   1a3aa:	0783      	lsls	r3, r0, #30
   1a3ac:	d507      	bpl.n	1a3be <bt_le_set_auto_conn+0x9e>
		if (param) {
   1a3ae:	b11d      	cbz	r5, 1a3b8 <bt_le_set_auto_conn+0x98>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1a3b0:	2102      	movs	r1, #2
   1a3b2:	4620      	mov	r0, r4
   1a3b4:	f7ff fc34 	bl	19c20 <bt_conn_set_state>
		bt_le_scan_update(false);
   1a3b8:	2000      	movs	r0, #0
   1a3ba:	f7fe ff47 	bl	1924c <bt_le_scan_update>
	bt_conn_unref(conn);
   1a3be:	4620      	mov	r0, r4
   1a3c0:	f7ff fbf8 	bl	19bb4 <bt_conn_unref>
	return 0;
   1a3c4:	2000      	movs	r0, #0
   1a3c6:	e7b9      	b.n	1a33c <bt_le_set_auto_conn+0x1c>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a3c8:	f3bf 8f5b 	dmb	ish
   1a3cc:	e853 2f00 	ldrex	r2, [r3]
   1a3d0:	f022 0101 	bic.w	r1, r2, #1
   1a3d4:	e843 1000 	strex	r0, r1, [r3]
   1a3d8:	2800      	cmp	r0, #0
   1a3da:	d1f7      	bne.n	1a3cc <bt_le_set_auto_conn+0xac>
   1a3dc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
   1a3e0:	07d2      	lsls	r2, r2, #31
   1a3e2:	d5dd      	bpl.n	1a3a0 <bt_le_set_auto_conn+0x80>
			bt_conn_unref(conn);
   1a3e4:	4620      	mov	r0, r4
   1a3e6:	f7ff fbe5 	bl	19bb4 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
   1a3ea:	7aa3      	ldrb	r3, [r4, #10]
   1a3ec:	2b02      	cmp	r3, #2
   1a3ee:	d1d7      	bne.n	1a3a0 <bt_le_set_auto_conn+0x80>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1a3f0:	4629      	mov	r1, r5
   1a3f2:	4620      	mov	r0, r4
   1a3f4:	f7ff fc14 	bl	19c20 <bt_conn_set_state>
   1a3f8:	e7d2      	b.n	1a3a0 <bt_le_set_auto_conn+0x80>
		return -EAGAIN;
   1a3fa:	f06f 000a 	mvn.w	r0, #10
   1a3fe:	e79d      	b.n	1a33c <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
   1a400:	f06f 000b 	mvn.w	r0, #11
   1a404:	e79a      	b.n	1a33c <bt_le_set_auto_conn+0x1c>
   1a406:	bf00      	nop
   1a408:	20000374 	.word	0x20000374

0001a40c <send_conn_le_param_update>:
{
   1a40c:	b538      	push	{r3, r4, r5, lr}
   1a40e:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
   1a410:	4608      	mov	r0, r1
{
   1a412:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
   1a414:	f010 fab8 	bl	2a988 <bt_le_conn_params_valid>
   1a418:	b338      	cbz	r0, 1a46a <send_conn_le_param_update+0x5e>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a41a:	4b15      	ldr	r3, [pc, #84]	; (1a470 <send_conn_le_param_update+0x64>)
   1a41c:	f893 30d0 	ldrb.w	r3, [r3, #208]	; 0xd0
   1a420:	0799      	lsls	r1, r3, #30
   1a422:	d407      	bmi.n	1a434 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_PERIPHERAL_PARAM_L2CAP)) ||
   1a424:	78e3      	ldrb	r3, [r4, #3]
   1a426:	b173      	cbz	r3, 1a446 <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
   1a428:	4629      	mov	r1, r5
   1a42a:	4620      	mov	r0, r4
}
   1a42c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
   1a430:	f000 bb62 	b.w	1aaf8 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
   1a434:	f894 30b4 	ldrb.w	r3, [r4, #180]	; 0xb4
   1a438:	079a      	lsls	r2, r3, #30
   1a43a:	d5f3      	bpl.n	1a424 <send_conn_le_param_update+0x18>
   1a43c:	1d20      	adds	r0, r4, #4
   1a43e:	f010 fb99 	bl	2ab74 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
   1a442:	0543      	lsls	r3, r0, #21
   1a444:	d4ee      	bmi.n	1a424 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
   1a446:	4629      	mov	r1, r5
   1a448:	4620      	mov	r0, r4
   1a44a:	f010 fc70 	bl	2ad2e <bt_conn_le_conn_update>
		if (rc == 0) {
   1a44e:	b958      	cbnz	r0, 1a468 <send_conn_le_param_update+0x5c>
			conn->le.interval_min = param->interval_min;
   1a450:	882b      	ldrh	r3, [r5, #0]
   1a452:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.interval_max = param->interval_max;
   1a456:	886b      	ldrh	r3, [r5, #2]
   1a458:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
			conn->le.pending_latency = param->latency;
   1a45c:	88ab      	ldrh	r3, [r5, #4]
   1a45e:	f8a4 30b0 	strh.w	r3, [r4, #176]	; 0xb0
			conn->le.pending_timeout = param->timeout;
   1a462:	88eb      	ldrh	r3, [r5, #6]
   1a464:	f8a4 30b2 	strh.w	r3, [r4, #178]	; 0xb2
}
   1a468:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   1a46a:	f06f 0015 	mvn.w	r0, #21
   1a46e:	e7fb      	b.n	1a468 <send_conn_le_param_update+0x5c>
   1a470:	200002a8 	.word	0x200002a8

0001a474 <deferred_work>:
{
   1a474:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a478:	f810 3c56 	ldrb.w	r3, [r0, #-86]
{
   1a47c:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
   1a47e:	f1a0 0660 	sub.w	r6, r0, #96	; 0x60
	if (conn->state == BT_CONN_DISCONNECTED) {
   1a482:	2b00      	cmp	r3, #0
   1a484:	d133      	bne.n	1a4ee <deferred_work+0x7a>
		bt_l2cap_disconnected(conn);
   1a486:	4630      	mov	r0, r6
   1a488:	f010 fcdc 	bl	2ae44 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
   1a48c:	4b2f      	ldr	r3, [pc, #188]	; (1a54c <deferred_work+0xd8>)
   1a48e:	681d      	ldr	r5, [r3, #0]
   1a490:	b9ed      	cbnz	r5, 1a4ce <deferred_work+0x5a>
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a492:	4f2f      	ldr	r7, [pc, #188]	; (1a550 <deferred_work+0xdc>)
   1a494:	4d2f      	ldr	r5, [pc, #188]	; (1a554 <deferred_work+0xe0>)
   1a496:	f8df 80cc 	ldr.w	r8, [pc, #204]	; 1a564 <deferred_work+0xf0>
   1a49a:	46b9      	mov	r9, r7
   1a49c:	42bd      	cmp	r5, r7
   1a49e:	d90e      	bls.n	1a4be <deferred_work+0x4a>
   1a4a0:	492d      	ldr	r1, [pc, #180]	; (1a558 <deferred_work+0xe4>)
   1a4a2:	482e      	ldr	r0, [pc, #184]	; (1a55c <deferred_work+0xe8>)
   1a4a4:	f240 5326 	movw	r3, #1318	; 0x526
   1a4a8:	4642      	mov	r2, r8
   1a4aa:	f00e fb76 	bl	28b9a <printk>
   1a4ae:	482c      	ldr	r0, [pc, #176]	; (1a560 <deferred_work+0xec>)
   1a4b0:	f00e fb73 	bl	28b9a <printk>
   1a4b4:	f240 5126 	movw	r1, #1318	; 0x526
   1a4b8:	4640      	mov	r0, r8
   1a4ba:	f00e fdaf 	bl	2901c <assert_post_action>
   1a4be:	454d      	cmp	r5, r9
   1a4c0:	d30d      	bcc.n	1a4de <deferred_work+0x6a>
		bt_conn_unref(conn);
   1a4c2:	4630      	mov	r0, r6
   1a4c4:	f7ff fb76 	bl	19bb4 <bt_conn_unref>
}
   1a4c8:	b003      	add	sp, #12
   1a4ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (cb->disconnected) {
   1a4ce:	686b      	ldr	r3, [r5, #4]
   1a4d0:	b11b      	cbz	r3, 1a4da <deferred_work+0x66>
			cb->disconnected(conn, conn->err);
   1a4d2:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   1a4d6:	4630      	mov	r0, r6
   1a4d8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
   1a4da:	692d      	ldr	r5, [r5, #16]
   1a4dc:	e7d8      	b.n	1a490 <deferred_work+0x1c>
		if (cb->disconnected) {
   1a4de:	686b      	ldr	r3, [r5, #4]
   1a4e0:	b11b      	cbz	r3, 1a4ea <deferred_work+0x76>
			cb->disconnected(conn, conn->err);
   1a4e2:	f814 1c57 	ldrb.w	r1, [r4, #-87]
   1a4e6:	4630      	mov	r0, r6
   1a4e8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_conn_cb, cb) {
   1a4ea:	3514      	adds	r5, #20
   1a4ec:	e7d6      	b.n	1a49c <deferred_work+0x28>
	if (conn->type != BT_CONN_TYPE_LE) {
   1a4ee:	f810 3c5e 	ldrb.w	r3, [r0, #-94]
   1a4f2:	2b01      	cmp	r3, #1
   1a4f4:	d1e8      	bne.n	1a4c8 <deferred_work+0x54>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   1a4f6:	f810 3c5d 	ldrb.w	r3, [r0, #-93]
   1a4fa:	b913      	cbnz	r3, 1a502 <deferred_work+0x8e>
		bt_le_create_conn_cancel();
   1a4fc:	f7fd fd78 	bl	17ff0 <bt_le_create_conn_cancel>
		return;
   1a500:	e7e2      	b.n	1a4c8 <deferred_work+0x54>
	if (atomic_test_and_clear_bit(conn->flags,
   1a502:	f1a0 055c 	sub.w	r5, r0, #92	; 0x5c
   1a506:	f3bf 8f5b 	dmb	ish
   1a50a:	e855 3f00 	ldrex	r3, [r5]
   1a50e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
   1a512:	e845 2100 	strex	r1, r2, [r5]
   1a516:	2900      	cmp	r1, #0
   1a518:	d1f7      	bne.n	1a50a <deferred_work+0x96>
   1a51a:	f3bf 8f5b 	dmb	ish
   1a51e:	059b      	lsls	r3, r3, #22
   1a520:	d507      	bpl.n	1a532 <deferred_work+0xbe>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a522:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1a524:	9300      	str	r3, [sp, #0]
		send_conn_le_param_update(conn, param);
   1a526:	4669      	mov	r1, sp
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
   1a528:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1a52a:	9301      	str	r3, [sp, #4]
		send_conn_le_param_update(conn, param);
   1a52c:	4630      	mov	r0, r6
   1a52e:	f7ff ff6d 	bl	1a40c <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a532:	f3bf 8f5b 	dmb	ish
   1a536:	e855 3f00 	ldrex	r3, [r5]
   1a53a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   1a53e:	e845 3200 	strex	r2, r3, [r5]
   1a542:	2a00      	cmp	r2, #0
   1a544:	d1f7      	bne.n	1a536 <deferred_work+0xc2>
   1a546:	f3bf 8f5b 	dmb	ish
   1a54a:	e7bd      	b.n	1a4c8 <deferred_work+0x54>
   1a54c:	20002740 	.word	0x20002740
   1a550:	0002d1d8 	.word	0x0002d1d8
   1a554:	0002d1d8 	.word	0x0002d1d8
   1a558:	00031595 	.word	0x00031595
   1a55c:	0002e93e 	.word	0x0002e93e
   1a560:	000315b0 	.word	0x000315b0
   1a564:	00031565 	.word	0x00031565

0001a568 <bt_conn_create_frag_timeout>:
						  k_timeout_t timeout,
						  const char *func, int line)
#else
struct net_buf *bt_conn_create_frag_timeout(size_t reserve, k_timeout_t timeout)
#endif
{
   1a568:	4601      	mov	r1, r0

#if defined(CONFIG_NET_BUF_LOG)
	return bt_conn_create_pdu_timeout_debug(pool, reserve, timeout,
						func, line);
#else
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
   1a56a:	4801      	ldr	r0, [pc, #4]	; (1a570 <bt_conn_create_frag_timeout+0x8>)
   1a56c:	f7ff bc92 	b.w	19e94 <bt_conn_create_pdu_timeout>
   1a570:	20000958 	.word	0x20000958

0001a574 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1a574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a578:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
   1a57a:	f04f 33ff 	mov.w	r3, #4294967295
   1a57e:	f04f 32ff 	mov.w	r2, #4294967295
   1a582:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
   1a584:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
   1a586:	f7ff ffef 	bl	1a568 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
   1a58a:	7833      	ldrb	r3, [r6, #0]
   1a58c:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
   1a58e:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1a590:	f04f 0600 	mov.w	r6, #0
   1a594:	d005      	beq.n	1a5a2 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
   1a596:	f005 fd31 	bl	1fffc <net_buf_unref>
		return NULL;
   1a59a:	4635      	mov	r5, r6
}
   1a59c:	4628      	mov	r0, r5
   1a59e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
   1a5a2:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
   1a5a4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
   1a5a8:	4e0c      	ldr	r6, [pc, #48]	; (1a5dc <create_frag.isra.0+0x68>)
   1a5aa:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1a5ac:	f8b6 80fc 	ldrh.w	r8, [r6, #252]	; 0xfc
   1a5b0:	f011 fd5a 	bl	2c068 <net_buf_simple_tailroom>
   1a5b4:	4580      	cmp	r8, r0
   1a5b6:	d20c      	bcs.n	1a5d2 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
   1a5b8:	f8b6 60fc 	ldrh.w	r6, [r6, #252]	; 0xfc
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1a5bc:	f854 1f08 	ldr.w	r1, [r4, #8]!
   1a5c0:	4632      	mov	r2, r6
   1a5c2:	4638      	mov	r0, r7
   1a5c4:	f011 fd58 	bl	2c078 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
   1a5c8:	4631      	mov	r1, r6
   1a5ca:	4620      	mov	r0, r4
   1a5cc:	f005 fe04 	bl	201d8 <net_buf_simple_pull>
   1a5d0:	e7e4      	b.n	1a59c <create_frag.isra.0+0x28>
	return net_buf_simple_tailroom(&buf->b);
   1a5d2:	4638      	mov	r0, r7
   1a5d4:	f011 fd48 	bl	2c068 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
   1a5d8:	b286      	uxth	r6, r0
   1a5da:	e7ef      	b.n	1a5bc <create_frag.isra.0+0x48>
   1a5dc:	200002a8 	.word	0x200002a8

0001a5e0 <bt_conn_process_tx>:
{
   1a5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a5e2:	7a83      	ldrb	r3, [r0, #10]
{
   1a5e4:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
   1a5e6:	b993      	cbnz	r3, 1a60e <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1a5e8:	f3bf 8f5b 	dmb	ish
   1a5ec:	1d03      	adds	r3, r0, #4
   1a5ee:	e853 2f00 	ldrex	r2, [r3]
   1a5f2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
   1a5f6:	e843 1400 	strex	r4, r1, [r3]
   1a5fa:	2c00      	cmp	r4, #0
   1a5fc:	d1f7      	bne.n	1a5ee <bt_conn_process_tx+0xe>
   1a5fe:	f3bf 8f5b 	dmb	ish
   1a602:	0653      	lsls	r3, r2, #25
   1a604:	d503      	bpl.n	1a60e <bt_conn_process_tx+0x2e>
}
   1a606:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
   1a60a:	f7ff b93d 	b.w	19888 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
   1a60e:	2200      	movs	r2, #0
   1a610:	2300      	movs	r3, #0
   1a612:	f105 0038 	add.w	r0, r5, #56	; 0x38
   1a616:	f005 fc5f 	bl	1fed8 <net_buf_get>
	BT_ASSERT(buf);
   1a61a:	4604      	mov	r4, r0
   1a61c:	b960      	cbnz	r0, 1a638 <bt_conn_process_tx+0x58>
   1a61e:	4a20      	ldr	r2, [pc, #128]	; (1a6a0 <bt_conn_process_tx+0xc0>)
   1a620:	4920      	ldr	r1, [pc, #128]	; (1a6a4 <bt_conn_process_tx+0xc4>)
   1a622:	4821      	ldr	r0, [pc, #132]	; (1a6a8 <bt_conn_process_tx+0xc8>)
   1a624:	f240 23e7 	movw	r3, #743	; 0x2e7
   1a628:	f00e fab7 	bl	28b9a <printk>
   1a62c:	4040      	eors	r0, r0
   1a62e:	f380 8811 	msr	BASEPRI, r0
   1a632:	f04f 0003 	mov.w	r0, #3
   1a636:	df02      	svc	2
	return bt_dev.le.acl_mtu;
   1a638:	4f1c      	ldr	r7, [pc, #112]	; (1a6ac <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
   1a63a:	89a1      	ldrh	r1, [r4, #12]
   1a63c:	f8b7 20fc 	ldrh.w	r2, [r7, #252]	; 0xfc
   1a640:	4291      	cmp	r1, r2
   1a642:	d807      	bhi.n	1a654 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
   1a644:	2300      	movs	r3, #0
   1a646:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
   1a648:	4621      	mov	r1, r4
   1a64a:	4628      	mov	r0, r5
   1a64c:	f7ff f830 	bl	196b0 <send_frag>
	if (!send_buf(conn, buf)) {
   1a650:	b140      	cbz	r0, 1a664 <bt_conn_process_tx+0x84>
}
   1a652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
   1a654:	f105 060a 	add.w	r6, r5, #10
   1a658:	4621      	mov	r1, r4
   1a65a:	4630      	mov	r0, r6
   1a65c:	f7ff ff8a 	bl	1a574 <create_frag.isra.0>
	if (!frag) {
   1a660:	4601      	mov	r1, r0
   1a662:	b920      	cbnz	r0, 1a66e <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
   1a664:	4620      	mov	r0, r4
}
   1a666:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
   1a66a:	f005 bcc7 	b.w	1fffc <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
   1a66e:	2301      	movs	r3, #1
   1a670:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1a672:	4628      	mov	r0, r5
   1a674:	f7ff f81c 	bl	196b0 <send_frag>
   1a678:	2800      	cmp	r0, #0
   1a67a:	d0f3      	beq.n	1a664 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
   1a67c:	89a2      	ldrh	r2, [r4, #12]
   1a67e:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	; 0xfc
   1a682:	429a      	cmp	r2, r3
   1a684:	d802      	bhi.n	1a68c <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
   1a686:	2300      	movs	r3, #0
   1a688:	2203      	movs	r2, #3
   1a68a:	e7dd      	b.n	1a648 <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
   1a68c:	4621      	mov	r1, r4
   1a68e:	4630      	mov	r0, r6
   1a690:	f7ff ff70 	bl	1a574 <create_frag.isra.0>
		if (!frag) {
   1a694:	4601      	mov	r1, r0
   1a696:	2800      	cmp	r0, #0
   1a698:	d0e4      	beq.n	1a664 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
   1a69a:	2301      	movs	r3, #1
   1a69c:	461a      	mov	r2, r3
   1a69e:	e7e8      	b.n	1a672 <bt_conn_process_tx+0x92>
   1a6a0:	00031565 	.word	0x00031565
   1a6a4:	00030ef1 	.word	0x00030ef1
   1a6a8:	0002e93e 	.word	0x0002e93e
   1a6ac:	200002a8 	.word	0x200002a8

0001a6b0 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
   1a6b0:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
   1a6b2:	4914      	ldr	r1, [pc, #80]	; (1a704 <bt_conn_init+0x54>)
   1a6b4:	4814      	ldr	r0, [pc, #80]	; (1a708 <bt_conn_init+0x58>)
   1a6b6:	f012 f935 	bl	2c924 <k_queue_append>
   1a6ba:	4914      	ldr	r1, [pc, #80]	; (1a70c <bt_conn_init+0x5c>)
   1a6bc:	4812      	ldr	r0, [pc, #72]	; (1a708 <bt_conn_init+0x58>)
   1a6be:	f012 f931 	bl	2c924 <k_queue_append>
   1a6c2:	4913      	ldr	r1, [pc, #76]	; (1a710 <bt_conn_init+0x60>)
   1a6c4:	4810      	ldr	r0, [pc, #64]	; (1a708 <bt_conn_init+0x58>)
   1a6c6:	f012 f92d 	bl	2c924 <k_queue_append>
	}

	bt_att_init();
   1a6ca:	f010 ff57 	bl	2b57c <bt_att_init>

	err = bt_smp_init();
   1a6ce:	f011 fc6e 	bl	2bfae <bt_smp_init>
	if (err) {
   1a6d2:	4605      	mov	r5, r0
   1a6d4:	b998      	cbnz	r0, 1a6fe <bt_conn_init+0x4e>
		return err;
	}

	bt_l2cap_init();
   1a6d6:	f010 fc25 	bl	2af24 <bt_l2cap_init>

	/* Initialize background scan */
	if (IS_ENABLED(CONFIG_BT_CENTRAL)) {
		for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
			struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
   1a6da:	480e      	ldr	r0, [pc, #56]	; (1a714 <bt_conn_init+0x64>)
   1a6dc:	f010 fa86 	bl	2abec <bt_conn_ref>

			if (!conn) {
   1a6e0:	4604      	mov	r4, r0
   1a6e2:	b160      	cbz	r0, 1a6fe <bt_conn_init+0x4e>
   1a6e4:	3004      	adds	r0, #4
   1a6e6:	f010 fa45 	bl	2ab74 <atomic_get>
				continue;
			}

#if !defined(CONFIG_BT_FILTER_ACCEPT_LIST)
			if (atomic_test_bit(conn->flags,
   1a6ea:	07c3      	lsls	r3, r0, #31
   1a6ec:	d504      	bpl.n	1a6f8 <bt_conn_init+0x48>
					    BT_CONN_AUTO_CONNECT)) {
				/* Only the default identity is supported */
				conn->id = BT_ID_DEFAULT;
   1a6ee:	7225      	strb	r5, [r4, #8]
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
   1a6f0:	2102      	movs	r1, #2
   1a6f2:	4620      	mov	r0, r4
   1a6f4:	f7ff fa94 	bl	19c20 <bt_conn_set_state>
			}
#endif /* !defined(CONFIG_BT_FILTER_ACCEPT_LIST) */

			bt_conn_unref(conn);
   1a6f8:	4620      	mov	r0, r4
   1a6fa:	f7ff fa5b 	bl	19bb4 <bt_conn_unref>
		}
	}

	return 0;
}
   1a6fe:	4628      	mov	r0, r5
   1a700:	bd38      	pop	{r3, r4, r5, pc}
   1a702:	bf00      	nop
   1a704:	20002744 	.word	0x20002744
   1a708:	200008d4 	.word	0x200008d4
   1a70c:	20002754 	.word	0x20002754
   1a710:	20002764 	.word	0x20002764
   1a714:	20001a80 	.word	0x20001a80

0001a718 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
   1a718:	4a0c      	ldr	r2, [pc, #48]	; (1a74c <l2cap_accept+0x34>)
{
   1a71a:	b508      	push	{r3, lr}
   1a71c:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
   1a71e:	6810      	ldr	r0, [r2, #0]
   1a720:	b918      	cbnz	r0, 1a72a <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
   1a722:	4b0b      	ldr	r3, [pc, #44]	; (1a750 <l2cap_accept+0x38>)
   1a724:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
   1a726:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
   1a728:	bd08      	pop	{r3, pc}
	BT_ERR("No available L2CAP context for conn %p", conn);
   1a72a:	4a0a      	ldr	r2, [pc, #40]	; (1a754 <l2cap_accept+0x3c>)
   1a72c:	6811      	ldr	r1, [r2, #0]
   1a72e:	0749      	lsls	r1, r1, #29
   1a730:	d009      	beq.n	1a746 <l2cap_accept+0x2e>
   1a732:	4909      	ldr	r1, [pc, #36]	; (1a758 <l2cap_accept+0x40>)
   1a734:	4809      	ldr	r0, [pc, #36]	; (1a75c <l2cap_accept+0x44>)
   1a736:	1a52      	subs	r2, r2, r1
   1a738:	0892      	lsrs	r2, r2, #2
   1a73a:	0192      	lsls	r2, r2, #6
   1a73c:	f042 0201 	orr.w	r2, r2, #1
   1a740:	4619      	mov	r1, r3
   1a742:	f00e fdd9 	bl	292f8 <log_1>
   1a746:	f06f 000b 	mvn.w	r0, #11
   1a74a:	e7ed      	b.n	1a728 <l2cap_accept+0x10>
   1a74c:	20001b48 	.word	0x20001b48
   1a750:	0002dd98 	.word	0x0002dd98
   1a754:	20000758 	.word	0x20000758
   1a758:	20000740 	.word	0x20000740
   1a75c:	00031922 	.word	0x00031922

0001a760 <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1a760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a762:	4605      	mov	r5, r0
   1a764:	460f      	mov	r7, r1
   1a766:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
   1a768:	2300      	movs	r3, #0
   1a76a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1a76e:	2104      	movs	r1, #4
   1a770:	2000      	movs	r0, #0
   1a772:	f7ff fb8f 	bl	19e94 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1a776:	4604      	mov	r4, r0
   1a778:	b978      	cbnz	r0, 1a79a <l2cap_create_le_sig_pdu.isra.0+0x3a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
   1a77a:	4a0c      	ldr	r2, [pc, #48]	; (1a7ac <l2cap_create_le_sig_pdu.isra.0+0x4c>)
   1a77c:	6813      	ldr	r3, [r2, #0]
   1a77e:	075b      	lsls	r3, r3, #29
   1a780:	d009      	beq.n	1a796 <l2cap_create_le_sig_pdu.isra.0+0x36>
   1a782:	4b0b      	ldr	r3, [pc, #44]	; (1a7b0 <l2cap_create_le_sig_pdu.isra.0+0x50>)
   1a784:	480b      	ldr	r0, [pc, #44]	; (1a7b4 <l2cap_create_le_sig_pdu.isra.0+0x54>)
   1a786:	1ad2      	subs	r2, r2, r3
   1a788:	0892      	lsrs	r2, r2, #2
   1a78a:	0192      	lsls	r2, r2, #6
   1a78c:	f042 0201 	orr.w	r2, r2, #1
   1a790:	4629      	mov	r1, r5
   1a792:	f00e fdb1 	bl	292f8 <log_1>
}
   1a796:	4620      	mov	r0, r4
   1a798:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
   1a79a:	2104      	movs	r1, #4
   1a79c:	3008      	adds	r0, #8
   1a79e:	f005 fd5d 	bl	2025c <net_buf_simple_add>
	hdr->code = code;
   1a7a2:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
   1a7a4:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1a7a6:	8046      	strh	r6, [r0, #2]
	return buf;
   1a7a8:	e7f5      	b.n	1a796 <l2cap_create_le_sig_pdu.isra.0+0x36>
   1a7aa:	bf00      	nop
   1a7ac:	20000758 	.word	0x20000758
   1a7b0:	20000740 	.word	0x20000740
   1a7b4:	00031949 	.word	0x00031949

0001a7b8 <l2cap_rtx_timeout>:
	BT_ERR("chan %p timeout", chan);
   1a7b8:	4a0d      	ldr	r2, [pc, #52]	; (1a7f0 <l2cap_rtx_timeout+0x38>)
{
   1a7ba:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("chan %p timeout", chan);
   1a7bc:	6813      	ldr	r3, [r2, #0]
	struct bt_conn *conn = chan->chan.conn;
   1a7be:	4604      	mov	r4, r0
	BT_ERR("chan %p timeout", chan);
   1a7c0:	075b      	lsls	r3, r3, #29
	struct bt_conn *conn = chan->chan.conn;
   1a7c2:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
   1a7c6:	d009      	beq.n	1a7dc <l2cap_rtx_timeout+0x24>
   1a7c8:	4b0a      	ldr	r3, [pc, #40]	; (1a7f4 <l2cap_rtx_timeout+0x3c>)
   1a7ca:	480b      	ldr	r0, [pc, #44]	; (1a7f8 <l2cap_rtx_timeout+0x40>)
   1a7cc:	1ad2      	subs	r2, r2, r3
   1a7ce:	0892      	lsrs	r2, r2, #2
   1a7d0:	0192      	lsls	r2, r2, #6
   1a7d2:	f042 0201 	orr.w	r2, r2, #1
   1a7d6:	4621      	mov	r1, r4
   1a7d8:	f00e fd8e 	bl	292f8 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
   1a7dc:	4628      	mov	r0, r5
   1a7de:	4621      	mov	r1, r4
   1a7e0:	f010 faf9 	bl	2add6 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
   1a7e4:	4620      	mov	r0, r4
}
   1a7e6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
   1a7ea:	f010 bb16 	b.w	2ae1a <bt_l2cap_chan_del>
   1a7ee:	bf00      	nop
   1a7f0:	20000758 	.word	0x20000758
   1a7f4:	20000740 	.word	0x20000740
   1a7f8:	00031971 	.word	0x00031971

0001a7fc <bt_l2cap_connected>:
{
   1a7fc:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a800:	4f32      	ldr	r7, [pc, #200]	; (1a8cc <bt_l2cap_connected+0xd0>)
   1a802:	4e33      	ldr	r6, [pc, #204]	; (1a8d0 <bt_l2cap_connected+0xd4>)
   1a804:	f8df 80dc 	ldr.w	r8, [pc, #220]	; 1a8e4 <bt_l2cap_connected+0xe8>
{
   1a808:	4604      	mov	r4, r0
   1a80a:	46b9      	mov	r9, r7
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a80c:	42be      	cmp	r6, r7
   1a80e:	d90e      	bls.n	1a82e <bt_l2cap_connected+0x32>
   1a810:	4930      	ldr	r1, [pc, #192]	; (1a8d4 <bt_l2cap_connected+0xd8>)
   1a812:	4831      	ldr	r0, [pc, #196]	; (1a8d8 <bt_l2cap_connected+0xdc>)
   1a814:	f44f 73b3 	mov.w	r3, #358	; 0x166
   1a818:	4642      	mov	r2, r8
   1a81a:	f00e f9be 	bl	28b9a <printk>
   1a81e:	482f      	ldr	r0, [pc, #188]	; (1a8dc <bt_l2cap_connected+0xe0>)
   1a820:	f00e f9bb 	bl	28b9a <printk>
   1a824:	f44f 71b3 	mov.w	r1, #358	; 0x166
   1a828:	4640      	mov	r0, r8
   1a82a:	f00e fbf7 	bl	2901c <assert_post_action>
   1a82e:	454e      	cmp	r6, r9
   1a830:	d302      	bcc.n	1a838 <bt_l2cap_connected+0x3c>
}
   1a832:	b002      	add	sp, #8
   1a834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (fchan->accept(conn, &chan) < 0) {
   1a838:	6873      	ldr	r3, [r6, #4]
   1a83a:	a901      	add	r1, sp, #4
   1a83c:	4620      	mov	r0, r4
   1a83e:	4798      	blx	r3
   1a840:	2800      	cmp	r0, #0
   1a842:	db3d      	blt.n	1a8c0 <bt_l2cap_connected+0xc4>
		ch = BT_L2CAP_LE_CHAN(chan);
   1a844:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
   1a846:	8833      	ldrh	r3, [r6, #0]
   1a848:	f8a5 3070 	strh.w	r3, [r5, #112]	; 0x70
		ch->tx.cid = fchan->cid;
   1a84c:	f8a5 3080 	strh.w	r3, [r5, #128]	; 0x80
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1a850:	4923      	ldr	r1, [pc, #140]	; (1a8e0 <bt_l2cap_connected+0xe4>)
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
   1a852:	f8d6 a008 	ldr.w	sl, [r6, #8]
	k_work_init_delayable(&chan->rtx_work, l2cap_rtx_timeout);
   1a856:	f105 0010 	add.w	r0, r5, #16
   1a85a:	f00a fe1b 	bl	25494 <k_work_init_delayable>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1a85e:	f3bf 8f5b 	dmb	ish
   1a862:	f105 0368 	add.w	r3, r5, #104	; 0x68
   1a866:	2200      	movs	r2, #0
   1a868:	e853 1f00 	ldrex	r1, [r3]
   1a86c:	e843 2000 	strex	r0, r2, [r3]
   1a870:	2800      	cmp	r0, #0
   1a872:	d1f9      	bne.n	1a868 <bt_l2cap_connected+0x6c>
   1a874:	f3bf 8f5b 	dmb	ish
	parent->next = child;
   1a878:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
   1a87a:	6da2      	ldr	r2, [r4, #88]	; 0x58
	sys_slist_append(&conn->channels, &chan->node);
   1a87c:	f105 0308 	add.w	r3, r5, #8
   1a880:	bb02      	cbnz	r2, 1a8c4 <bt_l2cap_connected+0xc8>
	list->head = node;
   1a882:	e9c4 3315 	strd	r3, r3, [r4, #84]	; 0x54
		if (chan->ops->connected) {
   1a886:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
   1a888:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
   1a88a:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
   1a88c:	f8c5 a00c 	str.w	sl, [r5, #12]
		if (chan->ops->connected) {
   1a890:	681b      	ldr	r3, [r3, #0]
   1a892:	b103      	cbz	r3, 1a896 <bt_l2cap_connected+0x9a>
			chan->ops->connected(chan);
   1a894:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1a896:	9b01      	ldr	r3, [sp, #4]
   1a898:	f3bf 8f5b 	dmb	ish
   1a89c:	3368      	adds	r3, #104	; 0x68
   1a89e:	e853 2f00 	ldrex	r2, [r3]
   1a8a2:	f042 0201 	orr.w	r2, r2, #1
   1a8a6:	e843 2100 	strex	r1, r2, [r3]
   1a8aa:	2900      	cmp	r1, #0
   1a8ac:	d1f7      	bne.n	1a89e <bt_l2cap_connected+0xa2>
   1a8ae:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
   1a8b2:	9801      	ldr	r0, [sp, #4]
   1a8b4:	6843      	ldr	r3, [r0, #4]
   1a8b6:	699b      	ldr	r3, [r3, #24]
   1a8b8:	b113      	cbz	r3, 1a8c0 <bt_l2cap_connected+0xc4>
			chan->ops->status(chan, chan->status);
   1a8ba:	f100 0168 	add.w	r1, r0, #104	; 0x68
   1a8be:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
   1a8c0:	360c      	adds	r6, #12
   1a8c2:	e7a3      	b.n	1a80c <bt_l2cap_connected+0x10>
	parent->next = child;
   1a8c4:	6013      	str	r3, [r2, #0]
	list->tail = node;
   1a8c6:	65a3      	str	r3, [r4, #88]	; 0x58
}
   1a8c8:	e7dd      	b.n	1a886 <bt_l2cap_connected+0x8a>
   1a8ca:	bf00      	nop
   1a8cc:	0002d1d8 	.word	0x0002d1d8
   1a8d0:	0002d1b4 	.word	0x0002d1b4
   1a8d4:	000319b2 	.word	0x000319b2
   1a8d8:	0002e93e 	.word	0x0002e93e
   1a8dc:	000315b0 	.word	0x000315b0
   1a8e0:	0001a7b9 	.word	0x0001a7b9
   1a8e4:	00031981 	.word	0x00031981

0001a8e8 <l2cap_recv>:
{
   1a8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
   1a8ea:	898b      	ldrh	r3, [r1, #12]
   1a8ec:	2b03      	cmp	r3, #3
{
   1a8ee:	b085      	sub	sp, #20
   1a8f0:	4606      	mov	r6, r0
   1a8f2:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
   1a8f4:	d80d      	bhi.n	1a912 <l2cap_recv+0x2a>
		BT_ERR("Too small L2CAP signaling PDU");
   1a8f6:	4959      	ldr	r1, [pc, #356]	; (1aa5c <l2cap_recv+0x174>)
   1a8f8:	680b      	ldr	r3, [r1, #0]
   1a8fa:	075d      	lsls	r5, r3, #29
   1a8fc:	d020      	beq.n	1a940 <l2cap_recv+0x58>
   1a8fe:	4b58      	ldr	r3, [pc, #352]	; (1aa60 <l2cap_recv+0x178>)
   1a900:	4858      	ldr	r0, [pc, #352]	; (1aa64 <l2cap_recv+0x17c>)
   1a902:	1ac9      	subs	r1, r1, r3
   1a904:	0889      	lsrs	r1, r1, #2
   1a906:	0189      	lsls	r1, r1, #6
   1a908:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
   1a90c:	f00e fce7 	bl	292de <log_0>
   1a910:	e016      	b.n	1a940 <l2cap_recv+0x58>
	return net_buf_simple_pull_mem(&buf->b, len);
   1a912:	2104      	movs	r1, #4
   1a914:	f105 0008 	add.w	r0, r5, #8
   1a918:	f005 fc7e 	bl	20218 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1a91c:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
   1a91e:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
   1a920:	428a      	cmp	r2, r1
   1a922:	4604      	mov	r4, r0
   1a924:	d00f      	beq.n	1a946 <l2cap_recv+0x5e>
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
   1a926:	4b4d      	ldr	r3, [pc, #308]	; (1aa5c <l2cap_recv+0x174>)
   1a928:	6818      	ldr	r0, [r3, #0]
   1a92a:	0744      	lsls	r4, r0, #29
   1a92c:	d008      	beq.n	1a940 <l2cap_recv+0x58>
   1a92e:	484c      	ldr	r0, [pc, #304]	; (1aa60 <l2cap_recv+0x178>)
   1a930:	1a1b      	subs	r3, r3, r0
   1a932:	089b      	lsrs	r3, r3, #2
   1a934:	019b      	lsls	r3, r3, #6
   1a936:	484c      	ldr	r0, [pc, #304]	; (1aa68 <l2cap_recv+0x180>)
   1a938:	f043 0301 	orr.w	r3, r3, #1
   1a93c:	f00e fcf0 	bl	29320 <log_2>
}
   1a940:	2000      	movs	r0, #0
   1a942:	b005      	add	sp, #20
   1a944:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!hdr->ident) {
   1a946:	7841      	ldrb	r1, [r0, #1]
   1a948:	b959      	cbnz	r1, 1a962 <l2cap_recv+0x7a>
		BT_ERR("Invalid ident value in L2CAP PDU");
   1a94a:	4944      	ldr	r1, [pc, #272]	; (1aa5c <l2cap_recv+0x174>)
   1a94c:	680b      	ldr	r3, [r1, #0]
   1a94e:	0758      	lsls	r0, r3, #29
   1a950:	d0f6      	beq.n	1a940 <l2cap_recv+0x58>
   1a952:	4b43      	ldr	r3, [pc, #268]	; (1aa60 <l2cap_recv+0x178>)
   1a954:	4845      	ldr	r0, [pc, #276]	; (1aa6c <l2cap_recv+0x184>)
   1a956:	1ac9      	subs	r1, r1, r3
   1a958:	0889      	lsrs	r1, r1, #2
   1a95a:	0189      	lsls	r1, r1, #6
   1a95c:	f041 0101 	orr.w	r1, r1, #1
   1a960:	e7d4      	b.n	1a90c <l2cap_recv+0x24>
	switch (hdr->code) {
   1a962:	7803      	ldrb	r3, [r0, #0]
   1a964:	2b12      	cmp	r3, #18
   1a966:	d023      	beq.n	1a9b0 <l2cap_recv+0xc8>
   1a968:	2b13      	cmp	r3, #19
   1a96a:	d013      	beq.n	1a994 <l2cap_recv+0xac>
   1a96c:	2b01      	cmp	r3, #1
   1a96e:	d0e7      	beq.n	1a940 <l2cap_recv+0x58>
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
   1a970:	4a3a      	ldr	r2, [pc, #232]	; (1aa5c <l2cap_recv+0x174>)
   1a972:	6811      	ldr	r1, [r2, #0]
   1a974:	f011 0f06 	tst.w	r1, #6
   1a978:	d009      	beq.n	1a98e <l2cap_recv+0xa6>
   1a97a:	4939      	ldr	r1, [pc, #228]	; (1aa60 <l2cap_recv+0x178>)
   1a97c:	483c      	ldr	r0, [pc, #240]	; (1aa70 <l2cap_recv+0x188>)
   1a97e:	1a52      	subs	r2, r2, r1
   1a980:	0892      	lsrs	r2, r2, #2
   1a982:	0192      	lsls	r2, r2, #6
   1a984:	f042 0202 	orr.w	r2, r2, #2
   1a988:	4619      	mov	r1, r3
   1a98a:	f00e fcb5 	bl	292f8 <log_1>
		l2cap_send_reject(chan->conn, hdr->ident,
   1a98e:	7861      	ldrb	r1, [r4, #1]
   1a990:	6830      	ldr	r0, [r6, #0]
   1a992:	e01f      	b.n	1a9d4 <l2cap_recv+0xec>
	if (buf->len < sizeof(*rsp)) {
   1a994:	2a01      	cmp	r2, #1
   1a996:	d8d3      	bhi.n	1a940 <l2cap_recv+0x58>
		BT_ERR("Too small LE conn param rsp");
   1a998:	4930      	ldr	r1, [pc, #192]	; (1aa5c <l2cap_recv+0x174>)
   1a99a:	680b      	ldr	r3, [r1, #0]
   1a99c:	075a      	lsls	r2, r3, #29
   1a99e:	d0cf      	beq.n	1a940 <l2cap_recv+0x58>
   1a9a0:	4b2f      	ldr	r3, [pc, #188]	; (1aa60 <l2cap_recv+0x178>)
   1a9a2:	4834      	ldr	r0, [pc, #208]	; (1aa74 <l2cap_recv+0x18c>)
   1a9a4:	1ac9      	subs	r1, r1, r3
   1a9a6:	0889      	lsrs	r1, r1, #2
   1a9a8:	0189      	lsls	r1, r1, #6
   1a9aa:	f041 0101 	orr.w	r1, r1, #1
   1a9ae:	e7ad      	b.n	1a90c <l2cap_recv+0x24>
	if (buf->len < sizeof(*req)) {
   1a9b0:	2a07      	cmp	r2, #7
   1a9b2:	d80b      	bhi.n	1a9cc <l2cap_recv+0xe4>
		BT_ERR("Too small LE conn update param req");
   1a9b4:	4929      	ldr	r1, [pc, #164]	; (1aa5c <l2cap_recv+0x174>)
   1a9b6:	680b      	ldr	r3, [r1, #0]
   1a9b8:	075b      	lsls	r3, r3, #29
   1a9ba:	d0c1      	beq.n	1a940 <l2cap_recv+0x58>
   1a9bc:	4b28      	ldr	r3, [pc, #160]	; (1aa60 <l2cap_recv+0x178>)
   1a9be:	482e      	ldr	r0, [pc, #184]	; (1aa78 <l2cap_recv+0x190>)
   1a9c0:	1ac9      	subs	r1, r1, r3
   1a9c2:	0889      	lsrs	r1, r1, #2
   1a9c4:	0189      	lsls	r1, r1, #6
   1a9c6:	f041 0101 	orr.w	r1, r1, #1
   1a9ca:	e79f      	b.n	1a90c <l2cap_recv+0x24>
			le_conn_param_update_req(l2cap, hdr->ident, buf);
   1a9cc:	6836      	ldr	r6, [r6, #0]
	if (conn->role != BT_HCI_ROLE_CENTRAL) {
   1a9ce:	78f7      	ldrb	r7, [r6, #3]
   1a9d0:	b11f      	cbz	r7, 1a9da <l2cap_recv+0xf2>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
   1a9d2:	4630      	mov	r0, r6
		l2cap_send_reject(chan->conn, hdr->ident,
   1a9d4:	f010 fa68 	bl	2aea8 <l2cap_send_reject.constprop.0>
		break;
   1a9d8:	e7b2      	b.n	1a940 <l2cap_recv+0x58>
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
   1a9da:	68aa      	ldr	r2, [r5, #8]
	param.interval_min = sys_le16_to_cpu(req->min_interval);
   1a9dc:	7850      	ldrb	r0, [r2, #1]
   1a9de:	7813      	ldrb	r3, [r2, #0]
   1a9e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1a9e4:	f8ad 3008 	strh.w	r3, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
   1a9e8:	78d0      	ldrb	r0, [r2, #3]
   1a9ea:	7893      	ldrb	r3, [r2, #2]
   1a9ec:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1a9f0:	f8ad 300a 	strh.w	r3, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
   1a9f4:	7950      	ldrb	r0, [r2, #5]
   1a9f6:	7913      	ldrb	r3, [r2, #4]
   1a9f8:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   1a9fc:	f8ad 300c 	strh.w	r3, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
   1aa00:	7993      	ldrb	r3, [r2, #6]
   1aa02:	79d2      	ldrb	r2, [r2, #7]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1aa04:	2013      	movs	r0, #19
	param.timeout = sys_le16_to_cpu(req->timeout);
   1aa06:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1aa0a:	2202      	movs	r2, #2
	param.timeout = sys_le16_to_cpu(req->timeout);
   1aa0c:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
   1aa10:	f7ff fea6 	bl	1a760 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1aa14:	4604      	mov	r4, r0
   1aa16:	2800      	cmp	r0, #0
   1aa18:	d092      	beq.n	1a940 <l2cap_recv+0x58>
	accepted = le_param_req(conn, &param);
   1aa1a:	a902      	add	r1, sp, #8
   1aa1c:	4630      	mov	r0, r6
   1aa1e:	f7ff fae3 	bl	19fe8 <le_param_req>
	return net_buf_simple_add(&buf->b, len);
   1aa22:	2102      	movs	r1, #2
   1aa24:	4605      	mov	r5, r0
   1aa26:	f104 0008 	add.w	r0, r4, #8
   1aa2a:	f005 fc17 	bl	2025c <net_buf_simple_add>
	if (accepted) {
   1aa2e:	f085 0301 	eor.w	r3, r5, #1
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
   1aa32:	b2db      	uxtb	r3, r3
   1aa34:	8003      	strh	r3, [r0, #0]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline int bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				struct net_buf *buf)
{
	return bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
   1aa36:	4622      	mov	r2, r4
   1aa38:	9700      	str	r7, [sp, #0]
   1aa3a:	463b      	mov	r3, r7
   1aa3c:	2105      	movs	r1, #5
   1aa3e:	4630      	mov	r0, r6
   1aa40:	f010 fa19 	bl	2ae76 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   1aa44:	b110      	cbz	r0, 1aa4c <l2cap_recv+0x164>
		net_buf_unref(buf);
   1aa46:	4620      	mov	r0, r4
   1aa48:	f005 fad8 	bl	1fffc <net_buf_unref>
	if (accepted) {
   1aa4c:	2d00      	cmp	r5, #0
   1aa4e:	f43f af77 	beq.w	1a940 <l2cap_recv+0x58>
		bt_conn_le_conn_update(conn, &param);
   1aa52:	a902      	add	r1, sp, #8
   1aa54:	4630      	mov	r0, r6
   1aa56:	f010 f96a 	bl	2ad2e <bt_conn_le_conn_update>
   1aa5a:	e771      	b.n	1a940 <l2cap_recv+0x58>
   1aa5c:	20000758 	.word	0x20000758
   1aa60:	20000740 	.word	0x20000740
   1aa64:	000319d9 	.word	0x000319d9
   1aa68:	000319f7 	.word	0x000319f7
   1aa6c:	00031a18 	.word	0x00031a18
   1aa70:	00031a78 	.word	0x00031a78
   1aa74:	00031a39 	.word	0x00031a39
   1aa78:	00031a55 	.word	0x00031a55

0001aa7c <bt_l2cap_recv>:
{
   1aa7c:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1aa7e:	898b      	ldrh	r3, [r1, #12]
   1aa80:	2b03      	cmp	r3, #3
{
   1aa82:	4605      	mov	r5, r0
   1aa84:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1aa86:	d811      	bhi.n	1aaac <bt_l2cap_recv+0x30>
		BT_ERR("Too small L2CAP PDU received");
   1aa88:	4b17      	ldr	r3, [pc, #92]	; (1aae8 <bt_l2cap_recv+0x6c>)
   1aa8a:	681a      	ldr	r2, [r3, #0]
   1aa8c:	0752      	lsls	r2, r2, #29
   1aa8e:	d008      	beq.n	1aaa2 <bt_l2cap_recv+0x26>
   1aa90:	4916      	ldr	r1, [pc, #88]	; (1aaec <bt_l2cap_recv+0x70>)
   1aa92:	4817      	ldr	r0, [pc, #92]	; (1aaf0 <bt_l2cap_recv+0x74>)
   1aa94:	1a5b      	subs	r3, r3, r1
   1aa96:	089b      	lsrs	r3, r3, #2
   1aa98:	019b      	lsls	r3, r3, #6
   1aa9a:	f043 0101 	orr.w	r1, r3, #1
   1aa9e:	f00e fc1e 	bl	292de <log_0>
	net_buf_unref(buf);
   1aaa2:	4620      	mov	r0, r4
}
   1aaa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1aaa8:	f005 baa8 	b.w	1fffc <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
   1aaac:	2104      	movs	r1, #4
   1aaae:	f104 0008 	add.w	r0, r4, #8
   1aab2:	f005 fbb1 	bl	20218 <net_buf_simple_pull_mem>
	cid = sys_le16_to_cpu(hdr->cid);
   1aab6:	8841      	ldrh	r1, [r0, #2]
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1aab8:	4628      	mov	r0, r5
   1aaba:	f010 fa23 	bl	2af04 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1aabe:	b970      	cbnz	r0, 1aade <bt_l2cap_recv+0x62>
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
   1aac0:	4a09      	ldr	r2, [pc, #36]	; (1aae8 <bt_l2cap_recv+0x6c>)
   1aac2:	6813      	ldr	r3, [r2, #0]
   1aac4:	f013 0f06 	tst.w	r3, #6
   1aac8:	d0eb      	beq.n	1aaa2 <bt_l2cap_recv+0x26>
   1aaca:	4b08      	ldr	r3, [pc, #32]	; (1aaec <bt_l2cap_recv+0x70>)
   1aacc:	4809      	ldr	r0, [pc, #36]	; (1aaf4 <bt_l2cap_recv+0x78>)
   1aace:	1ad2      	subs	r2, r2, r3
   1aad0:	0892      	lsrs	r2, r2, #2
   1aad2:	0192      	lsls	r2, r2, #6
   1aad4:	f042 0202 	orr.w	r2, r2, #2
   1aad8:	f00e fc0e 	bl	292f8 <log_1>
   1aadc:	e7e1      	b.n	1aaa2 <bt_l2cap_recv+0x26>
	chan->ops->recv(chan, buf);
   1aade:	6843      	ldr	r3, [r0, #4]
   1aae0:	4621      	mov	r1, r4
   1aae2:	691b      	ldr	r3, [r3, #16]
   1aae4:	4798      	blx	r3
   1aae6:	e7dc      	b.n	1aaa2 <bt_l2cap_recv+0x26>
   1aae8:	20000758 	.word	0x20000758
   1aaec:	20000740 	.word	0x20000740
   1aaf0:	00031a96 	.word	0x00031a96
   1aaf4:	00031ab3 	.word	0x00031ab3

0001aaf8 <bt_l2cap_update_conn_param>:
{
   1aaf8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
   1aafa:	4b17      	ldr	r3, [pc, #92]	; (1ab58 <bt_l2cap_update_conn_param+0x60>)
   1aafc:	781a      	ldrb	r2, [r3, #0]
   1aafe:	3201      	adds	r2, #1
	if (!ident) {
   1ab00:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
   1ab04:	bf08      	it	eq
   1ab06:	2201      	moveq	r2, #1
   1ab08:	701a      	strb	r2, [r3, #0]
{
   1ab0a:	4606      	mov	r6, r0
   1ab0c:	460d      	mov	r5, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
   1ab0e:	2208      	movs	r2, #8
   1ab10:	7819      	ldrb	r1, [r3, #0]
   1ab12:	2012      	movs	r0, #18
   1ab14:	f7ff fe24 	bl	1a760 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1ab18:	4604      	mov	r4, r0
   1ab1a:	b1d0      	cbz	r0, 1ab52 <bt_l2cap_update_conn_param+0x5a>
	return net_buf_simple_add(&buf->b, len);
   1ab1c:	2108      	movs	r1, #8
   1ab1e:	4408      	add	r0, r1
   1ab20:	f005 fb9c 	bl	2025c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
   1ab24:	882b      	ldrh	r3, [r5, #0]
   1ab26:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
   1ab28:	886b      	ldrh	r3, [r5, #2]
   1ab2a:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
   1ab2c:	88ab      	ldrh	r3, [r5, #4]
   1ab2e:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
   1ab30:	88eb      	ldrh	r3, [r5, #6]
   1ab32:	80c3      	strh	r3, [r0, #6]
   1ab34:	2300      	movs	r3, #0
   1ab36:	9300      	str	r3, [sp, #0]
   1ab38:	4622      	mov	r2, r4
   1ab3a:	2105      	movs	r1, #5
   1ab3c:	4630      	mov	r0, r6
   1ab3e:	f010 f99a 	bl	2ae76 <bt_l2cap_send_cb>
	if (err) {
   1ab42:	4605      	mov	r5, r0
   1ab44:	b110      	cbz	r0, 1ab4c <bt_l2cap_update_conn_param+0x54>
		net_buf_unref(buf);
   1ab46:	4620      	mov	r0, r4
   1ab48:	f005 fa58 	bl	1fffc <net_buf_unref>
}
   1ab4c:	4628      	mov	r0, r5
   1ab4e:	b002      	add	sp, #8
   1ab50:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
   1ab52:	f06f 050b 	mvn.w	r5, #11
   1ab56:	e7f9      	b.n	1ab4c <bt_l2cap_update_conn_param+0x54>
   1ab58:	20002b17 	.word	0x20002b17

0001ab5c <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
   1ab5c:	4b02      	ldr	r3, [pc, #8]	; (1ab68 <att_cfm_sent+0xc>)
   1ab5e:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1ab62:	f010 ba0d 	b.w	2af80 <att_sent>
   1ab66:	bf00      	nop
   1ab68:	0002b343 	.word	0x0002b343

0001ab6c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
   1ab6c:	4b02      	ldr	r3, [pc, #8]	; (1ab78 <att_rsp_sent+0xc>)
   1ab6e:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1ab72:	f010 ba05 	b.w	2af80 <att_sent>
   1ab76:	bf00      	nop
   1ab78:	0002b35f 	.word	0x0002b35f

0001ab7c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
   1ab7c:	4b02      	ldr	r3, [pc, #8]	; (1ab88 <att_req_sent+0xc>)
   1ab7e:	f8c1 3148 	str.w	r3, [r1, #328]	; 0x148

	att_sent(conn, user_data);
   1ab82:	f010 b9fd 	b.w	2af80 <att_sent>
   1ab86:	bf00      	nop
   1ab88:	0002b287 	.word	0x0002b287

0001ab8c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
   1ab8c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1ab8e:	3808      	subs	r0, #8
   1ab90:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
   1ab92:	a901      	add	r1, sp, #4
   1ab94:	4802      	ldr	r0, [pc, #8]	; (1aba0 <bt_att_released+0x14>)
   1ab96:	f009 f851 	bl	23c3c <k_mem_slab_free>
}
   1ab9a:	b003      	add	sp, #12
   1ab9c:	f85d fb04 	ldr.w	pc, [sp], #4
   1aba0:	200007c8 	.word	0x200007c8

0001aba4 <chan_send>:
{
   1aba4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1aba8:	688b      	ldr	r3, [r1, #8]
   1abaa:	781b      	ldrb	r3, [r3, #0]
   1abac:	2bd2      	cmp	r3, #210	; 0xd2
{
   1abae:	4606      	mov	r6, r0
   1abb0:	460c      	mov	r4, r1
   1abb2:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
   1abb4:	d119      	bne.n	1abea <chan_send+0x46>
		err = bt_smp_sign(chan->att->conn, buf);
   1abb6:	6803      	ldr	r3, [r0, #0]
   1abb8:	6818      	ldr	r0, [r3, #0]
   1abba:	f011 f9f5 	bl	2bfa8 <bt_smp_sign>
		if (err) {
   1abbe:	4605      	mov	r5, r0
   1abc0:	b198      	cbz	r0, 1abea <chan_send+0x46>
			BT_ERR("Error signing data");
   1abc2:	4925      	ldr	r1, [pc, #148]	; (1ac58 <chan_send+0xb4>)
   1abc4:	680b      	ldr	r3, [r1, #0]
   1abc6:	075b      	lsls	r3, r3, #29
   1abc8:	d008      	beq.n	1abdc <chan_send+0x38>
   1abca:	4b24      	ldr	r3, [pc, #144]	; (1ac5c <chan_send+0xb8>)
   1abcc:	4824      	ldr	r0, [pc, #144]	; (1ac60 <chan_send+0xbc>)
   1abce:	1ac9      	subs	r1, r1, r3
   1abd0:	0889      	lsrs	r1, r1, #2
   1abd2:	0189      	lsls	r1, r1, #6
   1abd4:	f041 0101 	orr.w	r1, r1, #1
   1abd8:	f00e fb81 	bl	292de <log_0>
			net_buf_unref(buf);
   1abdc:	4620      	mov	r0, r4
   1abde:	f005 fa0d 	bl	1fffc <net_buf_unref>
}
   1abe2:	4628      	mov	r0, r5
   1abe4:	b003      	add	sp, #12
   1abe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
   1abea:	f104 0008 	add.w	r0, r4, #8
   1abee:	f011 fa37 	bl	2c060 <net_buf_simple_headroom>
	state->len = buf->len;
   1abf2:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
   1abf6:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
   1abf8:	b957      	cbnz	r7, 1ac10 <chan_send+0x6c>
	switch (att_op_get_type(buf->data[0])) {
   1abfa:	68a3      	ldr	r3, [r4, #8]
   1abfc:	7818      	ldrb	r0, [r3, #0]
   1abfe:	f010 f9d7 	bl	2afb0 <att_op_get_type>
   1ac02:	1e43      	subs	r3, r0, #1
   1ac04:	b2db      	uxtb	r3, r3
   1ac06:	2b04      	cmp	r3, #4
   1ac08:	bf9c      	itt	ls
   1ac0a:	4a16      	ldrls	r2, [pc, #88]	; (1ac64 <chan_send+0xc0>)
   1ac0c:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1ac10:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
   1ac12:	f8c6 7150 	str.w	r7, [r6, #336]	; 0x150
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1ac16:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
   1ac18:	4b13      	ldr	r3, [pc, #76]	; (1ac68 <chan_send+0xc4>)
   1ac1a:	429f      	cmp	r7, r3
   1ac1c:	d018      	beq.n	1ac50 <chan_send+0xac>
	} else if (cb == chan_cfm_sent) {
   1ac1e:	4b13      	ldr	r3, [pc, #76]	; (1ac6c <chan_send+0xc8>)
   1ac20:	429f      	cmp	r7, r3
   1ac22:	d017      	beq.n	1ac54 <chan_send+0xb0>
		return att_sent;
   1ac24:	4912      	ldr	r1, [pc, #72]	; (1ac70 <chan_send+0xcc>)
   1ac26:	4b13      	ldr	r3, [pc, #76]	; (1ac74 <chan_send+0xd0>)
   1ac28:	4a13      	ldr	r2, [pc, #76]	; (1ac78 <chan_send+0xd4>)
   1ac2a:	428f      	cmp	r7, r1
   1ac2c:	bf18      	it	ne
   1ac2e:	4613      	movne	r3, r2
			       &chan->chan.chan);
   1ac30:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
   1ac32:	9600      	str	r6, [sp, #0]
   1ac34:	4622      	mov	r2, r4
   1ac36:	2104      	movs	r1, #4
   1ac38:	f010 f91d 	bl	2ae76 <bt_l2cap_send_cb>
	if (err) {
   1ac3c:	4605      	mov	r5, r0
   1ac3e:	2800      	cmp	r0, #0
   1ac40:	d0cf      	beq.n	1abe2 <chan_send+0x3e>
	buf->data = buf->__buf + state->offset;
   1ac42:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
   1ac44:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
   1ac48:	fa10 f088 	uxtah	r0, r0, r8
   1ac4c:	60a0      	str	r0, [r4, #8]
}
   1ac4e:	e7c8      	b.n	1abe2 <chan_send+0x3e>
		return att_rsp_sent;
   1ac50:	4b0a      	ldr	r3, [pc, #40]	; (1ac7c <chan_send+0xd8>)
   1ac52:	e7ed      	b.n	1ac30 <chan_send+0x8c>
		return att_cfm_sent;
   1ac54:	4b0a      	ldr	r3, [pc, #40]	; (1ac80 <chan_send+0xdc>)
   1ac56:	e7eb      	b.n	1ac30 <chan_send+0x8c>
   1ac58:	20000740 	.word	0x20000740
   1ac5c:	20000740 	.word	0x20000740
   1ac60:	00031aef 	.word	0x00031aef
   1ac64:	0002ddbc 	.word	0x0002ddbc
   1ac68:	0002b35f 	.word	0x0002b35f
   1ac6c:	0002b343 	.word	0x0002b343
   1ac70:	0002b287 	.word	0x0002b287
   1ac74:	0001ab7d 	.word	0x0001ab7d
   1ac78:	0002af81 	.word	0x0002af81
   1ac7c:	0001ab6d 	.word	0x0001ab6d
   1ac80:	0001ab5d 	.word	0x0001ab5d

0001ac84 <bt_att_chan_req_send>:
{
   1ac84:	b538      	push	{r3, r4, r5, lr}
   1ac86:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(chan);
   1ac88:	4604      	mov	r4, r0
   1ac8a:	b958      	cbnz	r0, 1aca4 <bt_att_chan_req_send+0x20>
   1ac8c:	491d      	ldr	r1, [pc, #116]	; (1ad04 <bt_att_chan_req_send+0x80>)
   1ac8e:	481e      	ldr	r0, [pc, #120]	; (1ad08 <bt_att_chan_req_send+0x84>)
   1ac90:	4a1e      	ldr	r2, [pc, #120]	; (1ad0c <bt_att_chan_req_send+0x88>)
   1ac92:	f240 2333 	movw	r3, #563	; 0x233
   1ac96:	f00d ff80 	bl	28b9a <printk>
   1ac9a:	481c      	ldr	r0, [pc, #112]	; (1ad0c <bt_att_chan_req_send+0x88>)
   1ac9c:	f240 2133 	movw	r1, #563	; 0x233
   1aca0:	f00e f9bc 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(req);
   1aca4:	b95d      	cbnz	r5, 1acbe <bt_att_chan_req_send+0x3a>
   1aca6:	491a      	ldr	r1, [pc, #104]	; (1ad10 <bt_att_chan_req_send+0x8c>)
   1aca8:	4817      	ldr	r0, [pc, #92]	; (1ad08 <bt_att_chan_req_send+0x84>)
   1acaa:	4a18      	ldr	r2, [pc, #96]	; (1ad0c <bt_att_chan_req_send+0x88>)
   1acac:	f44f 730d 	mov.w	r3, #564	; 0x234
   1acb0:	f00d ff73 	bl	28b9a <printk>
   1acb4:	4815      	ldr	r0, [pc, #84]	; (1ad0c <bt_att_chan_req_send+0x88>)
   1acb6:	f44f 710d 	mov.w	r1, #564	; 0x234
   1acba:	f00e f9af 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(req->func);
   1acbe:	686b      	ldr	r3, [r5, #4]
   1acc0:	b95b      	cbnz	r3, 1acda <bt_att_chan_req_send+0x56>
   1acc2:	4914      	ldr	r1, [pc, #80]	; (1ad14 <bt_att_chan_req_send+0x90>)
   1acc4:	4810      	ldr	r0, [pc, #64]	; (1ad08 <bt_att_chan_req_send+0x84>)
   1acc6:	4a11      	ldr	r2, [pc, #68]	; (1ad0c <bt_att_chan_req_send+0x88>)
   1acc8:	f240 2335 	movw	r3, #565	; 0x235
   1accc:	f00d ff65 	bl	28b9a <printk>
   1acd0:	480e      	ldr	r0, [pc, #56]	; (1ad0c <bt_att_chan_req_send+0x88>)
   1acd2:	f240 2135 	movw	r1, #565	; 0x235
   1acd6:	f00e f9a1 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(!chan->req);
   1acda:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   1acde:	b15b      	cbz	r3, 1acf8 <bt_att_chan_req_send+0x74>
   1ace0:	490d      	ldr	r1, [pc, #52]	; (1ad18 <bt_att_chan_req_send+0x94>)
   1ace2:	4809      	ldr	r0, [pc, #36]	; (1ad08 <bt_att_chan_req_send+0x84>)
   1ace4:	4a09      	ldr	r2, [pc, #36]	; (1ad0c <bt_att_chan_req_send+0x88>)
   1ace6:	f240 2336 	movw	r3, #566	; 0x236
   1acea:	f00d ff56 	bl	28b9a <printk>
   1acee:	4807      	ldr	r0, [pc, #28]	; (1ad0c <bt_att_chan_req_send+0x88>)
   1acf0:	f240 2136 	movw	r1, #566	; 0x236
   1acf4:	f00e f992 	bl	2901c <assert_post_action>
	return chan_req_send(chan, req);
   1acf8:	4629      	mov	r1, r5
   1acfa:	4620      	mov	r0, r4
}
   1acfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return chan_req_send(chan, req);
   1ad00:	f010 b983 	b.w	2b00a <chan_req_send>
   1ad04:	00031b31 	.word	0x00031b31
   1ad08:	0002e93e 	.word	0x0002e93e
   1ad0c:	00031b02 	.word	0x00031b02
   1ad10:	00031a74 	.word	0x00031a74
   1ad14:	00031b36 	.word	0x00031b36
   1ad18:	00031b40 	.word	0x00031b40

0001ad1c <read_group_cb>:
{
   1ad1c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   1ad20:	4606      	mov	r6, r0
   1ad22:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ad24:	f04f 0800 	mov.w	r8, #0
   1ad28:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ad2c:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
   1ad2e:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ad30:	f88d 8008 	strb.w	r8, [sp, #8]
   1ad34:	a902      	add	r1, sp, #8
{
   1ad36:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ad38:	f8ad 300a 	strh.w	r3, [sp, #10]
   1ad3c:	f00f fd50 	bl	2a7e0 <bt_uuid_cmp>
   1ad40:	b1a0      	cbz	r0, 1ad6c <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ad42:	f642 0301 	movw	r3, #10241	; 0x2801
   1ad46:	6830      	ldr	r0, [r6, #0]
   1ad48:	f88d 800c 	strb.w	r8, [sp, #12]
   1ad4c:	a903      	add	r1, sp, #12
   1ad4e:	f8ad 300e 	strh.w	r3, [sp, #14]
   1ad52:	f00f fd45 	bl	2a7e0 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
   1ad56:	b148      	cbz	r0, 1ad6c <read_group_cb+0x50>
		if (data->group &&
   1ad58:	6923      	ldr	r3, [r4, #16]
   1ad5a:	b11b      	cbz	r3, 1ad64 <read_group_cb+0x48>
   1ad5c:	885a      	ldrh	r2, [r3, #2]
   1ad5e:	42aa      	cmp	r2, r5
   1ad60:	d200      	bcs.n	1ad64 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1ad62:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
   1ad64:	2001      	movs	r0, #1
}
   1ad66:	b004      	add	sp, #16
   1ad68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1ad6c:	6861      	ldr	r1, [r4, #4]
   1ad6e:	6830      	ldr	r0, [r6, #0]
   1ad70:	f00f fd36 	bl	2a7e0 <bt_uuid_cmp>
   1ad74:	b110      	cbz	r0, 1ad7c <read_group_cb+0x60>
		data->group = NULL;
   1ad76:	2300      	movs	r3, #0
   1ad78:	6123      	str	r3, [r4, #16]
   1ad7a:	e7f3      	b.n	1ad64 <read_group_cb+0x48>
	if (data->rsp->len &&
   1ad7c:	68e3      	ldr	r3, [r4, #12]
   1ad7e:	68a0      	ldr	r0, [r4, #8]
   1ad80:	781a      	ldrb	r2, [r3, #0]
   1ad82:	b13a      	cbz	r2, 1ad94 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
   1ad84:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
   1ad88:	8981      	ldrh	r1, [r0, #12]
   1ad8a:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
   1ad8c:	4293      	cmp	r3, r2
   1ad8e:	da01      	bge.n	1ad94 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
   1ad90:	2000      	movs	r0, #0
   1ad92:	e7e8      	b.n	1ad66 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
   1ad94:	2104      	movs	r1, #4
   1ad96:	3008      	adds	r0, #8
   1ad98:	f005 fa60 	bl	2025c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1ad9c:	4b09      	ldr	r3, [pc, #36]	; (1adc4 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
   1ad9e:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1ada0:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1ada2:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1ada4:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
   1ada6:	4631      	mov	r1, r6
   1ada8:	9300      	str	r3, [sp, #0]
   1adaa:	9401      	str	r4, [sp, #4]
   1adac:	2300      	movs	r3, #0
   1adae:	4638      	mov	r0, r7
   1adb0:	f010 f9ce 	bl	2b150 <att_chan_read>
	if (read < 0) {
   1adb4:	2800      	cmp	r0, #0
   1adb6:	dbeb      	blt.n	1ad90 <read_group_cb+0x74>
	if (!data->group) {
   1adb8:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
   1adba:	3800      	subs	r0, #0
   1adbc:	bf18      	it	ne
   1adbe:	2001      	movne	r0, #1
   1adc0:	e7d1      	b.n	1ad66 <read_group_cb+0x4a>
   1adc2:	bf00      	nop
   1adc4:	0002b267 	.word	0x0002b267

0001adc8 <read_type_cb>:
{
   1adc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
   1adcc:	f8d2 8000 	ldr.w	r8, [r2]
{
   1add0:	4606      	mov	r6, r0
   1add2:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1add4:	6800      	ldr	r0, [r0, #0]
   1add6:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
   1add8:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
   1addc:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
   1adde:	f00f fcff 	bl	2a7e0 <bt_uuid_cmp>
   1ade2:	4607      	mov	r7, r0
   1ade4:	2800      	cmp	r0, #0
   1ade6:	d13e      	bne.n	1ae66 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ade8:	4628      	mov	r0, r5
   1adea:	2215      	movs	r2, #21
   1adec:	4631      	mov	r1, r6
   1adee:	f010 ffcd 	bl	2bd8c <bt_gatt_check_perm>
   1adf2:	4605      	mov	r5, r0
   1adf4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1adf6:	b148      	cbz	r0, 1ae0c <read_type_cb+0x44>
		if (data->rsp->len) {
   1adf8:	68e3      	ldr	r3, [r4, #12]
   1adfa:	781b      	ldrb	r3, [r3, #0]
   1adfc:	b923      	cbnz	r3, 1ae08 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
   1adfe:	2500      	movs	r5, #0
}
   1ae00:	4628      	mov	r0, r5
   1ae02:	b003      	add	sp, #12
   1ae04:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
   1ae08:	7527      	strb	r7, [r4, #20]
   1ae0a:	e7f8      	b.n	1adfe <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1ae0c:	68a0      	ldr	r0, [r4, #8]
   1ae0e:	f005 f955 	bl	200bc <net_buf_frag_last>
   1ae12:	2102      	movs	r1, #2
   1ae14:	3008      	adds	r0, #8
   1ae16:	f005 fa21 	bl	2025c <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1ae1a:	4b14      	ldr	r3, [pc, #80]	; (1ae6c <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
   1ae1c:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1ae1e:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
   1ae20:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
   1ae24:	4631      	mov	r1, r6
   1ae26:	9300      	str	r3, [sp, #0]
   1ae28:	9401      	str	r4, [sp, #4]
   1ae2a:	462b      	mov	r3, r5
   1ae2c:	4640      	mov	r0, r8
   1ae2e:	f010 f98f 	bl	2b150 <att_chan_read>
	if (read < 0) {
   1ae32:	2800      	cmp	r0, #0
   1ae34:	da07      	bge.n	1ae46 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
   1ae36:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
   1ae3a:	bf26      	itte	cs
   1ae3c:	4240      	negcs	r0, r0
   1ae3e:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
   1ae40:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
   1ae42:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
   1ae44:	e7dc      	b.n	1ae00 <read_type_cb+0x38>
	if (!data->item) {
   1ae46:	6923      	ldr	r3, [r4, #16]
   1ae48:	2b00      	cmp	r3, #0
   1ae4a:	d0d8      	beq.n	1adfe <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1ae4c:	68a0      	ldr	r0, [r4, #8]
   1ae4e:	f010 f88f 	bl	2af70 <net_buf_frags_len>
   1ae52:	f8b8 508a 	ldrh.w	r5, [r8, #138]	; 0x8a
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1ae56:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
   1ae58:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
   1ae5a:	7818      	ldrb	r0, [r3, #0]
   1ae5c:	4285      	cmp	r5, r0
   1ae5e:	bf94      	ite	ls
   1ae60:	2500      	movls	r5, #0
   1ae62:	2501      	movhi	r5, #1
   1ae64:	e7cc      	b.n	1ae00 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
   1ae66:	2501      	movs	r5, #1
   1ae68:	e7ca      	b.n	1ae00 <read_type_cb+0x38>
   1ae6a:	bf00      	nop
   1ae6c:	0002af8d 	.word	0x0002af8d

0001ae70 <find_type_cb>:
{
   1ae70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1ae74:	f8d2 9000 	ldr.w	r9, [r2]
{
   1ae78:	b091      	sub	sp, #68	; 0x44
   1ae7a:	4607      	mov	r7, r0
   1ae7c:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ae7e:	2500      	movs	r5, #0
   1ae80:	f642 0301 	movw	r3, #10241	; 0x2801
   1ae84:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1ae86:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ae8a:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1ae8e:	a90b      	add	r1, sp, #44	; 0x2c
{
   1ae90:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1ae92:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1ae96:	f00f fca3 	bl	2a7e0 <bt_uuid_cmp>
   1ae9a:	2800      	cmp	r0, #0
   1ae9c:	d06a      	beq.n	1af74 <find_type_cb+0x104>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1ae9e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1aea2:	6838      	ldr	r0, [r7, #0]
   1aea4:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
   1aea8:	a90b      	add	r1, sp, #44	; 0x2c
   1aeaa:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1aeae:	f00f fc97 	bl	2a7e0 <bt_uuid_cmp>
   1aeb2:	b138      	cbz	r0, 1aec4 <find_type_cb+0x54>
		if (data->group &&
   1aeb4:	68a3      	ldr	r3, [r4, #8]
   1aeb6:	b11b      	cbz	r3, 1aec0 <find_type_cb+0x50>
   1aeb8:	885a      	ldrh	r2, [r3, #2]
   1aeba:	42b2      	cmp	r2, r6
   1aebc:	d200      	bcs.n	1aec0 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1aebe:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1aec0:	2001      	movs	r0, #1
   1aec2:	e009      	b.n	1aed8 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1aec4:	6861      	ldr	r1, [r4, #4]
   1aec6:	4608      	mov	r0, r1
   1aec8:	f010 f852 	bl	2af70 <net_buf_frags_len>
   1aecc:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1aed0:	1a1b      	subs	r3, r3, r0
   1aed2:	2b03      	cmp	r3, #3
   1aed4:	d803      	bhi.n	1aede <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
   1aed6:	2000      	movs	r0, #0
}
   1aed8:	b011      	add	sp, #68	; 0x44
   1aeda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
   1aede:	4608      	mov	r0, r1
   1aee0:	f005 f8ec 	bl	200bc <net_buf_frag_last>
   1aee4:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1aee6:	6860      	ldr	r0, [r4, #4]
   1aee8:	f010 f842 	bl	2af70 <net_buf_frags_len>
   1aeec:	f8b9 a08a 	ldrh.w	sl, [r9, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   1aef0:	f105 0b08 	add.w	fp, r5, #8
   1aef4:	ebaa 0a00 	sub.w	sl, sl, r0
   1aef8:	4658      	mov	r0, fp
   1aefa:	f011 f8b5 	bl	2c068 <net_buf_simple_tailroom>
   1aefe:	4582      	cmp	sl, r0
   1af00:	d23b      	bcs.n	1af7a <find_type_cb+0x10a>
   1af02:	6860      	ldr	r0, [r4, #4]
   1af04:	f010 f834 	bl	2af70 <net_buf_frags_len>
   1af08:	f8b9 308a 	ldrh.w	r3, [r9, #138]	; 0x8a
   1af0c:	1a18      	subs	r0, r3, r0
	if (!len) {
   1af0e:	b970      	cbnz	r0, 1af2e <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1af10:	6863      	ldr	r3, [r4, #4]
   1af12:	7998      	ldrb	r0, [r3, #6]
   1af14:	f004 fe70 	bl	1fbf8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   1af18:	2200      	movs	r2, #0
   1af1a:	2300      	movs	r3, #0
   1af1c:	f011 f885 	bl	2c02a <net_buf_alloc_fixed>
		if (!frag) {
   1af20:	4605      	mov	r5, r0
   1af22:	2800      	cmp	r0, #0
   1af24:	d0d7      	beq.n	1aed6 <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
   1af26:	4601      	mov	r1, r0
   1af28:	6860      	ldr	r0, [r4, #4]
   1af2a:	f005 f90f 	bl	2014c <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1af2e:	2300      	movs	r3, #0
   1af30:	9300      	str	r3, [sp, #0]
   1af32:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1af36:	4639      	mov	r1, r7
   1af38:	2310      	movs	r3, #16
   1af3a:	aa02      	add	r2, sp, #8
   1af3c:	4640      	mov	r0, r8
   1af3e:	47c8      	blx	r9
	if (read < 0) {
   1af40:	1e07      	subs	r7, r0, #0
   1af42:	db17      	blt.n	1af74 <find_type_cb+0x104>
	if (read != data->value_len) {
   1af44:	7c22      	ldrb	r2, [r4, #16]
   1af46:	68e0      	ldr	r0, [r4, #12]
   1af48:	42ba      	cmp	r2, r7
   1af4a:	d03f      	beq.n	1afcc <find_type_cb+0x15c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1af4c:	4601      	mov	r1, r0
   1af4e:	a80b      	add	r0, sp, #44	; 0x2c
   1af50:	f00f fc70 	bl	2a834 <bt_uuid_create>
   1af54:	b9a8      	cbnz	r0, 1af82 <find_type_cb+0x112>
			BT_WARN("Unable to create UUID: size %u", data->value_len);
   1af56:	4a1f      	ldr	r2, [pc, #124]	; (1afd4 <find_type_cb+0x164>)
   1af58:	6813      	ldr	r3, [r2, #0]
   1af5a:	f013 0f06 	tst.w	r3, #6
   1af5e:	d009      	beq.n	1af74 <find_type_cb+0x104>
   1af60:	4b1d      	ldr	r3, [pc, #116]	; (1afd8 <find_type_cb+0x168>)
   1af62:	7c21      	ldrb	r1, [r4, #16]
   1af64:	481d      	ldr	r0, [pc, #116]	; (1afdc <find_type_cb+0x16c>)
   1af66:	1ad2      	subs	r2, r2, r3
   1af68:	0892      	lsrs	r2, r2, #2
   1af6a:	0192      	lsls	r2, r2, #6
   1af6c:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
   1af70:	f00e f9c2 	bl	292f8 <log_1>
	data->group = NULL;
   1af74:	2300      	movs	r3, #0
   1af76:	60a3      	str	r3, [r4, #8]
   1af78:	e7a2      	b.n	1aec0 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
   1af7a:	4658      	mov	r0, fp
   1af7c:	f011 f874 	bl	2c068 <net_buf_simple_tailroom>
   1af80:	e7c5      	b.n	1af0e <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1af82:	b2fa      	uxtb	r2, r7
   1af84:	a902      	add	r1, sp, #8
   1af86:	a806      	add	r0, sp, #24
   1af88:	f00f fc54 	bl	2a834 <bt_uuid_create>
   1af8c:	b968      	cbnz	r0, 1afaa <find_type_cb+0x13a>
			BT_WARN("Unable to create UUID: size %d", read);
   1af8e:	4a11      	ldr	r2, [pc, #68]	; (1afd4 <find_type_cb+0x164>)
   1af90:	6813      	ldr	r3, [r2, #0]
   1af92:	f013 0f06 	tst.w	r3, #6
   1af96:	d0ed      	beq.n	1af74 <find_type_cb+0x104>
   1af98:	4b0f      	ldr	r3, [pc, #60]	; (1afd8 <find_type_cb+0x168>)
   1af9a:	4811      	ldr	r0, [pc, #68]	; (1afe0 <find_type_cb+0x170>)
   1af9c:	1ad2      	subs	r2, r2, r3
   1af9e:	0892      	lsrs	r2, r2, #2
   1afa0:	0192      	lsls	r2, r2, #6
   1afa2:	f042 0202 	orr.w	r2, r2, #2
   1afa6:	4639      	mov	r1, r7
   1afa8:	e7e2      	b.n	1af70 <find_type_cb+0x100>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1afaa:	a906      	add	r1, sp, #24
   1afac:	a80b      	add	r0, sp, #44	; 0x2c
   1afae:	f00f fc17 	bl	2a7e0 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1afb2:	2800      	cmp	r0, #0
   1afb4:	d1de      	bne.n	1af74 <find_type_cb+0x104>
	data->err = 0x00;
   1afb6:	2300      	movs	r3, #0
   1afb8:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
   1afba:	2104      	movs	r1, #4
   1afbc:	f105 0008 	add.w	r0, r5, #8
   1afc0:	f005 f94c 	bl	2025c <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
   1afc4:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1afc6:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1afc8:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1afca:	e779      	b.n	1aec0 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
   1afcc:	a902      	add	r1, sp, #8
   1afce:	f011 fe04 	bl	2cbda <memcmp>
   1afd2:	e7ee      	b.n	1afb2 <find_type_cb+0x142>
   1afd4:	20000740 	.word	0x20000740
   1afd8:	20000740 	.word	0x20000740
   1afdc:	00031b4b 	.word	0x00031b4b
   1afe0:	00031b6a 	.word	0x00031b6a

0001afe4 <att_get>:
{
   1afe4:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1afe6:	7a83      	ldrb	r3, [r0, #10]
   1afe8:	2b07      	cmp	r3, #7
   1afea:	d011      	beq.n	1b010 <att_get+0x2c>
		BT_WARN("Not connected");
   1afec:	491e      	ldr	r1, [pc, #120]	; (1b068 <att_get+0x84>)
   1afee:	680b      	ldr	r3, [r1, #0]
   1aff0:	f013 0f06 	tst.w	r3, #6
   1aff4:	d102      	bne.n	1affc <att_get+0x18>
		return NULL;
   1aff6:	2400      	movs	r4, #0
}
   1aff8:	4620      	mov	r0, r4
   1affa:	bd10      	pop	{r4, pc}
   1affc:	4b1b      	ldr	r3, [pc, #108]	; (1b06c <att_get+0x88>)
		BT_WARN("Not connected");
   1affe:	481c      	ldr	r0, [pc, #112]	; (1b070 <att_get+0x8c>)
   1b000:	1ac9      	subs	r1, r1, r3
   1b002:	0889      	lsrs	r1, r1, #2
   1b004:	0189      	lsls	r1, r1, #6
   1b006:	f041 0102 	orr.w	r1, r1, #2
   1b00a:	f00e f968 	bl	292de <log_0>
   1b00e:	e7f2      	b.n	1aff6 <att_get+0x12>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1b010:	2104      	movs	r1, #4
   1b012:	f00f ff77 	bl	2af04 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1b016:	4604      	mov	r4, r0
   1b018:	b968      	cbnz	r0, 1b036 <att_get+0x52>
		BT_ERR("Unable to find ATT channel");
   1b01a:	4913      	ldr	r1, [pc, #76]	; (1b068 <att_get+0x84>)
   1b01c:	680b      	ldr	r3, [r1, #0]
   1b01e:	075a      	lsls	r2, r3, #29
   1b020:	d0e9      	beq.n	1aff6 <att_get+0x12>
   1b022:	4b12      	ldr	r3, [pc, #72]	; (1b06c <att_get+0x88>)
   1b024:	4813      	ldr	r0, [pc, #76]	; (1b074 <att_get+0x90>)
   1b026:	1ac9      	subs	r1, r1, r3
   1b028:	0889      	lsrs	r1, r1, #2
   1b02a:	0189      	lsls	r1, r1, #6
   1b02c:	f041 0101 	orr.w	r1, r1, #1
   1b030:	f00e f955 	bl	292de <log_0>
   1b034:	e7e0      	b.n	1aff8 <att_get+0x14>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b036:	f3bf 8f5b 	dmb	ish
   1b03a:	f8d0 30f0 	ldr.w	r3, [r0, #240]	; 0xf0
   1b03e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1b042:	075b      	lsls	r3, r3, #29
   1b044:	d50c      	bpl.n	1b060 <att_get+0x7c>
		BT_WARN("ATT channel flagged as disconnected");
   1b046:	4908      	ldr	r1, [pc, #32]	; (1b068 <att_get+0x84>)
   1b048:	680b      	ldr	r3, [r1, #0]
   1b04a:	f013 0f06 	tst.w	r3, #6
   1b04e:	d0d2      	beq.n	1aff6 <att_get+0x12>
   1b050:	4b06      	ldr	r3, [pc, #24]	; (1b06c <att_get+0x88>)
   1b052:	4809      	ldr	r0, [pc, #36]	; (1b078 <att_get+0x94>)
   1b054:	1ac9      	subs	r1, r1, r3
   1b056:	0889      	lsrs	r1, r1, #2
   1b058:	0189      	lsls	r1, r1, #6
   1b05a:	f041 0102 	orr.w	r1, r1, #2
   1b05e:	e7d4      	b.n	1b00a <att_get+0x26>
	return att_chan->att;
   1b060:	f850 4c08 	ldr.w	r4, [r0, #-8]
   1b064:	e7c8      	b.n	1aff8 <att_get+0x14>
   1b066:	bf00      	nop
   1b068:	20000740 	.word	0x20000740
   1b06c:	20000740 	.word	0x20000740
   1b070:	00031b89 	.word	0x00031b89
   1b074:	00031b97 	.word	0x00031b97
   1b078:	00031bb2 	.word	0x00031bb2

0001b07c <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
   1b07c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1b07e:	2300      	movs	r3, #0
{
   1b080:	4606      	mov	r6, r0
   1b082:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
   1b084:	482c      	ldr	r0, [pc, #176]	; (1b138 <bt_att_accept+0xbc>)
   1b086:	2200      	movs	r2, #0
   1b088:	4669      	mov	r1, sp
   1b08a:	f008 fd6b 	bl	23b64 <k_mem_slab_alloc>
   1b08e:	4604      	mov	r4, r0
   1b090:	b180      	cbz	r0, 1b0b4 <bt_att_accept+0x38>
		BT_ERR("No available ATT context for conn %p", conn);
   1b092:	4a2a      	ldr	r2, [pc, #168]	; (1b13c <bt_att_accept+0xc0>)
   1b094:	6813      	ldr	r3, [r2, #0]
   1b096:	0759      	lsls	r1, r3, #29
   1b098:	d009      	beq.n	1b0ae <bt_att_accept+0x32>
   1b09a:	4b29      	ldr	r3, [pc, #164]	; (1b140 <bt_att_accept+0xc4>)
   1b09c:	4829      	ldr	r0, [pc, #164]	; (1b144 <bt_att_accept+0xc8>)
   1b09e:	1ad2      	subs	r2, r2, r3
   1b0a0:	0892      	lsrs	r2, r2, #2
   1b0a2:	0192      	lsls	r2, r2, #6
   1b0a4:	f042 0201 	orr.w	r2, r2, #1
   1b0a8:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1b0aa:	f00e f925 	bl	292f8 <log_1>
		BT_ERR("No available ATT context for conn %p", conn);
   1b0ae:	f06f 040b 	mvn.w	r4, #11
   1b0b2:	e03d      	b.n	1b130 <bt_att_accept+0xb4>
   1b0b4:	4601      	mov	r1, r0
   1b0b6:	2230      	movs	r2, #48	; 0x30
   1b0b8:	9800      	ldr	r0, [sp, #0]
   1b0ba:	f011 fdc4 	bl	2cc46 <memset>
		return -ENOMEM;
	}

	(void)memset(att, 0, sizeof(*att));
	att->conn = conn;
   1b0be:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1b0c0:	4821      	ldr	r0, [pc, #132]	; (1b148 <bt_att_accept+0xcc>)
	list->tail = NULL;
   1b0c2:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
   1b0c4:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
   1b0c8:	e9c5 440a 	strd	r4, r4, [r5, #40]	; 0x28
   1b0cc:	2200      	movs	r2, #0
   1b0ce:	2300      	movs	r3, #0
   1b0d0:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
   1b0d2:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
   1b0d4:	f008 fd46 	bl	23b64 <k_mem_slab_alloc>
   1b0d8:	4604      	mov	r4, r0
   1b0da:	b160      	cbz	r0, 1b0f6 <bt_att_accept+0x7a>
		BT_ERR("No available ATT channel for conn %p", att->conn);
   1b0dc:	4a17      	ldr	r2, [pc, #92]	; (1b13c <bt_att_accept+0xc0>)
   1b0de:	6813      	ldr	r3, [r2, #0]
   1b0e0:	075b      	lsls	r3, r3, #29
   1b0e2:	d0e4      	beq.n	1b0ae <bt_att_accept+0x32>
   1b0e4:	4b16      	ldr	r3, [pc, #88]	; (1b140 <bt_att_accept+0xc4>)
   1b0e6:	6829      	ldr	r1, [r5, #0]
   1b0e8:	4818      	ldr	r0, [pc, #96]	; (1b14c <bt_att_accept+0xd0>)
   1b0ea:	1ad2      	subs	r2, r2, r3
   1b0ec:	0892      	lsrs	r2, r2, #2
   1b0ee:	0192      	lsls	r2, r2, #6
   1b0f0:	f042 0201 	orr.w	r2, r2, #1
   1b0f4:	e7d9      	b.n	1b0aa <bt_att_accept+0x2e>
   1b0f6:	4601      	mov	r1, r0
   1b0f8:	f44f 72ac 	mov.w	r2, #344	; 0x158
   1b0fc:	9801      	ldr	r0, [sp, #4]
   1b0fe:	f011 fda2 	bl	2cc46 <memset>
	chan->chan.chan.ops = &ops;
   1b102:	9801      	ldr	r0, [sp, #4]
   1b104:	4b12      	ldr	r3, [pc, #72]	; (1b150 <bt_att_accept+0xd4>)
   1b106:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
   1b108:	f500 7080 	add.w	r0, r0, #256	; 0x100
   1b10c:	f011 fbfd 	bl	2c90a <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1b110:	9b01      	ldr	r3, [sp, #4]
   1b112:	f3bf 8f5b 	dmb	ish
   1b116:	33f8      	adds	r3, #248	; 0xf8
   1b118:	e853 2f00 	ldrex	r2, [r3]
   1b11c:	e843 4100 	strex	r1, r4, [r3]
   1b120:	2900      	cmp	r1, #0
   1b122:	d1f9      	bne.n	1b118 <bt_att_accept+0x9c>
   1b124:	f3bf 8f5b 	dmb	ish
	chan->att = att;
   1b128:	9b01      	ldr	r3, [sp, #4]
   1b12a:	f843 5b08 	str.w	r5, [r3], #8
	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
	}

	*ch = &chan->chan.chan;
   1b12e:	603b      	str	r3, [r7, #0]

	return 0;
}
   1b130:	4620      	mov	r0, r4
   1b132:	b003      	add	sp, #12
   1b134:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1b136:	bf00      	nop
   1b138:	200007a8 	.word	0x200007a8
   1b13c:	20000740 	.word	0x20000740
   1b140:	20000740 	.word	0x20000740
   1b144:	00031bd6 	.word	0x00031bd6
   1b148:	200007c8 	.word	0x200007c8
   1b14c:	00031bfb 	.word	0x00031bfb
   1b150:	20000508 	.word	0x20000508

0001b154 <bt_att_connected>:
{
   1b154:	b570      	push	{r4, r5, r6, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1b156:	2104      	movs	r1, #4
{
   1b158:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
   1b15a:	6800      	ldr	r0, [r0, #0]
   1b15c:	f00f fec2 	bl	2aee4 <bt_l2cap_le_lookup_tx_cid>
	__ASSERT(chan, "No ATT channel found");
   1b160:	4605      	mov	r5, r0
   1b162:	b970      	cbnz	r0, 1b182 <bt_att_connected+0x2e>
   1b164:	491c      	ldr	r1, [pc, #112]	; (1b1d8 <bt_att_connected+0x84>)
   1b166:	4a1d      	ldr	r2, [pc, #116]	; (1b1dc <bt_att_connected+0x88>)
   1b168:	481d      	ldr	r0, [pc, #116]	; (1b1e0 <bt_att_connected+0x8c>)
   1b16a:	f640 2381 	movw	r3, #2689	; 0xa81
   1b16e:	f00d fd14 	bl	28b9a <printk>
   1b172:	481c      	ldr	r0, [pc, #112]	; (1b1e4 <bt_att_connected+0x90>)
   1b174:	f00d fd11 	bl	28b9a <printk>
   1b178:	4818      	ldr	r0, [pc, #96]	; (1b1dc <bt_att_connected+0x88>)
   1b17a:	f640 2181 	movw	r1, #2689	; 0xa81
   1b17e:	f00d ff4d 	bl	2901c <assert_post_action>
	struct bt_att *att = att_chan->att;
   1b182:	f855 5c08 	ldr.w	r5, [r5, #-8]
	if (sys_slist_is_empty(&att->chans)) {
   1b186:	6aab      	ldr	r3, [r5, #40]	; 0x28
	att_chan = ATT_CHAN(chan);
   1b188:	f1a4 0608 	sub.w	r6, r4, #8
	if (sys_slist_is_empty(&att->chans)) {
   1b18c:	b91b      	cbnz	r3, 1b196 <bt_att_connected+0x42>
   1b18e:	f105 000c 	add.w	r0, r5, #12
   1b192:	f011 fbba 	bl	2c90a <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
   1b196:	6aaa      	ldr	r2, [r5, #40]	; 0x28
	parent->next = child;
   1b198:	f8c4 214c 	str.w	r2, [r4, #332]	; 0x14c
Z_GENLIST_PREPEND(slist, snode)
   1b19c:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	sys_slist_prepend(&att->chans, &chan->node);
   1b19e:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
	list->head = node;
   1b1a2:	62ab      	str	r3, [r5, #40]	; 0x28
Z_GENLIST_PREPEND(slist, snode)
   1b1a4:	b902      	cbnz	r2, 1b1a8 <bt_att_connected+0x54>
	list->tail = node;
   1b1a6:	62eb      	str	r3, [r5, #44]	; 0x2c
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1b1a8:	f3bf 8f5b 	dmb	ish
   1b1ac:	f8d4 30f0 	ldr.w	r3, [r4, #240]	; 0xf0
   1b1b0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
   1b1b4:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b1b6:	bf58      	it	pl
   1b1b8:	2317      	movpl	r3, #23
	att_chan_mtu_updated(att_chan);
   1b1ba:	4630      	mov	r0, r6
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b1bc:	bf5c      	itt	pl
   1b1be:	f8a4 3082 	strhpl.w	r3, [r4, #130]	; 0x82
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
   1b1c2:	f8a4 3072 	strhpl.w	r3, [r4, #114]	; 0x72
	att_chan_mtu_updated(att_chan);
   1b1c6:	f00f ff7d 	bl	2b0c4 <att_chan_mtu_updated>
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1b1ca:	f504 708c 	add.w	r0, r4, #280	; 0x118
   1b1ce:	4906      	ldr	r1, [pc, #24]	; (1b1e8 <bt_att_connected+0x94>)
}
   1b1d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	k_work_init_delayable(&att_chan->timeout_work, att_timeout);
   1b1d4:	f00a b95e 	b.w	25494 <k_work_init_delayable>
   1b1d8:	00031b31 	.word	0x00031b31
   1b1dc:	00031b02 	.word	0x00031b02
   1b1e0:	0002e93e 	.word	0x0002e93e
   1b1e4:	00031c20 	.word	0x00031c20
   1b1e8:	0001bcb9 	.word	0x0001bcb9

0001b1ec <att_write_cmd>:
{
   1b1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b1ee:	4604      	mov	r4, r0
   1b1f0:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1b1f2:	f101 0008 	add.w	r0, r1, #8
   1b1f6:	460d      	mov	r5, r1
   1b1f8:	f010 ff2a 	bl	2c050 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b1fc:	6823      	ldr	r3, [r4, #0]
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1b1fe:	68af      	ldr	r7, [r5, #8]
   1b200:	89ad      	ldrh	r5, [r5, #12]
   1b202:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b204:	2100      	movs	r1, #0
   1b206:	6818      	ldr	r0, [r3, #0]
   1b208:	f010 fe76 	bl	2bef8 <bt_gatt_change_aware>
   1b20c:	b328      	cbz	r0, 1b25a <att_write_cmd+0x6e>
	if (!handle) {
   1b20e:	b336      	cbz	r6, 1b25e <att_write_cmd+0x72>
	(void)memset(&data, 0, sizeof(data));
   1b210:	2214      	movs	r2, #20
   1b212:	2100      	movs	r1, #0
   1b214:	a801      	add	r0, sp, #4
   1b216:	f011 fd16 	bl	2cc46 <memset>
	data.conn = chan->att->conn;
   1b21a:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b21c:	4a11      	ldr	r2, [pc, #68]	; (1b264 <att_write_cmd+0x78>)
	data.conn = chan->att->conn;
   1b21e:	681b      	ldr	r3, [r3, #0]
   1b220:	9300      	str	r3, [sp, #0]
	data.req = req;
   1b222:	2300      	movs	r3, #0
   1b224:	f88d 3008 	strb.w	r3, [sp, #8]
	data.offset = offset;
   1b228:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b22c:	2301      	movs	r3, #1
   1b22e:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b232:	4631      	mov	r1, r6
   1b234:	466b      	mov	r3, sp
   1b236:	4630      	mov	r0, r6
	data.value = value;
   1b238:	9703      	str	r7, [sp, #12]
	data.len = len;
   1b23a:	f8ad 5010 	strh.w	r5, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b23e:	f00f ff7c 	bl	2b13a <bt_gatt_foreach_attr>
	if (data.err) {
   1b242:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1b246:	b92b      	cbnz	r3, 1b254 <att_write_cmd+0x68>
	if (data.buf) {
   1b248:	9901      	ldr	r1, [sp, #4]
   1b24a:	b119      	cbz	r1, 1b254 <att_write_cmd+0x68>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b24c:	4a06      	ldr	r2, [pc, #24]	; (1b268 <att_write_cmd+0x7c>)
   1b24e:	4620      	mov	r0, r4
   1b250:	f00f ff2a 	bl	2b0a8 <bt_att_chan_send_rsp>
   1b254:	2000      	movs	r0, #0
}
   1b256:	b007      	add	sp, #28
   1b258:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b25a:	2012      	movs	r0, #18
   1b25c:	e7fb      	b.n	1b256 <att_write_cmd+0x6a>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b25e:	2001      	movs	r0, #1
   1b260:	e7f9      	b.n	1b256 <att_write_cmd+0x6a>
   1b262:	bf00      	nop
   1b264:	0002b41b 	.word	0x0002b41b
   1b268:	0002b35f 	.word	0x0002b35f

0001b26c <bt_att_chan_create_pdu>:
{
   1b26c:	b538      	push	{r3, r4, r5, lr}
   1b26e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b270:	f8b0 108a 	ldrh.w	r1, [r0, #138]	; 0x8a
   1b274:	3201      	adds	r2, #1
   1b276:	428a      	cmp	r2, r1
   1b278:	d911      	bls.n	1b29e <bt_att_chan_create_pdu+0x32>
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1b27a:	4b1e      	ldr	r3, [pc, #120]	; (1b2f4 <bt_att_chan_create_pdu+0x88>)
   1b27c:	6818      	ldr	r0, [r3, #0]
   1b27e:	f010 0f06 	tst.w	r0, #6
   1b282:	d102      	bne.n	1b28a <bt_att_chan_create_pdu+0x1e>
		return NULL;
   1b284:	2400      	movs	r4, #0
}
   1b286:	4620      	mov	r0, r4
   1b288:	bd38      	pop	{r3, r4, r5, pc}
   1b28a:	481b      	ldr	r0, [pc, #108]	; (1b2f8 <bt_att_chan_create_pdu+0x8c>)
   1b28c:	1a1b      	subs	r3, r3, r0
   1b28e:	089b      	lsrs	r3, r3, #2
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
   1b290:	019b      	lsls	r3, r3, #6
   1b292:	481a      	ldr	r0, [pc, #104]	; (1b2fc <bt_att_chan_create_pdu+0x90>)
   1b294:	f043 0302 	orr.w	r3, r3, #2
   1b298:	f00e f842 	bl	29320 <log_2>
   1b29c:	e7f2      	b.n	1b284 <bt_att_chan_create_pdu+0x18>
	switch (att_op_get_type(op)) {
   1b29e:	4628      	mov	r0, r5
   1b2a0:	f00f fe86 	bl	2afb0 <att_op_get_type>
   1b2a4:	2802      	cmp	r0, #2
   1b2a6:	d001      	beq.n	1b2ac <bt_att_chan_create_pdu+0x40>
   1b2a8:	2804      	cmp	r0, #4
   1b2aa:	d117      	bne.n	1b2dc <bt_att_chan_create_pdu+0x70>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1b2ac:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1b2b0:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1b2b2:	2100      	movs	r1, #0
   1b2b4:	4608      	mov	r0, r1
   1b2b6:	f00f fddb 	bl	2ae70 <bt_l2cap_create_pdu_timeout>
   1b2ba:	4604      	mov	r4, r0
	if (!buf) {
   1b2bc:	b998      	cbnz	r0, 1b2e6 <bt_att_chan_create_pdu+0x7a>
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
   1b2be:	4a0d      	ldr	r2, [pc, #52]	; (1b2f4 <bt_att_chan_create_pdu+0x88>)
   1b2c0:	6813      	ldr	r3, [r2, #0]
   1b2c2:	075b      	lsls	r3, r3, #29
   1b2c4:	d0de      	beq.n	1b284 <bt_att_chan_create_pdu+0x18>
   1b2c6:	4b0c      	ldr	r3, [pc, #48]	; (1b2f8 <bt_att_chan_create_pdu+0x8c>)
   1b2c8:	480d      	ldr	r0, [pc, #52]	; (1b300 <bt_att_chan_create_pdu+0x94>)
   1b2ca:	1ad2      	subs	r2, r2, r3
   1b2cc:	0892      	lsrs	r2, r2, #2
   1b2ce:	0192      	lsls	r2, r2, #6
   1b2d0:	f042 0201 	orr.w	r2, r2, #1
   1b2d4:	4629      	mov	r1, r5
   1b2d6:	f00e f80f 	bl	292f8 <log_1>
   1b2da:	e7d4      	b.n	1b286 <bt_att_chan_create_pdu+0x1a>
		buf = bt_l2cap_create_pdu(NULL, 0);
   1b2dc:	f04f 32ff 	mov.w	r2, #4294967295
   1b2e0:	f04f 33ff 	mov.w	r3, #4294967295
   1b2e4:	e7e5      	b.n	1b2b2 <bt_att_chan_create_pdu+0x46>
	return net_buf_simple_add(&buf->b, len);
   1b2e6:	2101      	movs	r1, #1
   1b2e8:	3008      	adds	r0, #8
   1b2ea:	f004 ffb7 	bl	2025c <net_buf_simple_add>
	hdr->code = op;
   1b2ee:	7005      	strb	r5, [r0, #0]
	return buf;
   1b2f0:	e7c9      	b.n	1b286 <bt_att_chan_create_pdu+0x1a>
   1b2f2:	bf00      	nop
   1b2f4:	20000740 	.word	0x20000740
   1b2f8:	20000740 	.word	0x20000740
   1b2fc:	00031c37 	.word	0x00031c37
   1b300:	00031949 	.word	0x00031949

0001b304 <att_indicate>:
{
   1b304:	b570      	push	{r4, r5, r6, lr}
   1b306:	4604      	mov	r4, r0
	return net_buf_simple_pull_le16(&buf->b);
   1b308:	f101 0008 	add.w	r0, r1, #8
   1b30c:	460d      	mov	r5, r1
   1b30e:	f010 fe9f 	bl	2c050 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   1b312:	6826      	ldr	r6, [r4, #0]
   1b314:	89ab      	ldrh	r3, [r5, #12]
   1b316:	68aa      	ldr	r2, [r5, #8]
   1b318:	4601      	mov	r1, r0
   1b31a:	6830      	ldr	r0, [r6, #0]
   1b31c:	f010 fdc1 	bl	2bea2 <bt_gatt_notification>
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_CONFIRM, 0);
   1b320:	211e      	movs	r1, #30
   1b322:	2200      	movs	r2, #0
   1b324:	4620      	mov	r0, r4
   1b326:	f7ff ffa1 	bl	1b26c <bt_att_chan_create_pdu>
	if (!buf) {
   1b32a:	4601      	mov	r1, r0
   1b32c:	b118      	cbz	r0, 1b336 <att_indicate+0x32>
	bt_att_chan_send_rsp(chan, buf, chan_cfm_sent);
   1b32e:	4a03      	ldr	r2, [pc, #12]	; (1b33c <att_indicate+0x38>)
   1b330:	4620      	mov	r0, r4
   1b332:	f00f feb9 	bl	2b0a8 <bt_att_chan_send_rsp>
}
   1b336:	2000      	movs	r0, #0
   1b338:	bd70      	pop	{r4, r5, r6, pc}
   1b33a:	bf00      	nop
   1b33c:	0002b343 	.word	0x0002b343

0001b340 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b344:	4688      	mov	r8, r1
   1b346:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b348:	2101      	movs	r1, #1
   1b34a:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   1b34c:	4605      	mov	r5, r0
   1b34e:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   1b350:	f7ff ff8c 	bl	1b26c <bt_att_chan_create_pdu>
	if (!buf) {
   1b354:	4604      	mov	r4, r0
   1b356:	b178      	cbz	r0, 1b378 <send_err_rsp.part.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   1b358:	2104      	movs	r1, #4
   1b35a:	3008      	adds	r0, #8
   1b35c:	f004 ff7e 	bl	2025c <net_buf_simple_add>
	rsp->request = req;
   1b360:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   1b364:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   1b366:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b36a:	4621      	mov	r1, r4
   1b36c:	4628      	mov	r0, r5
   1b36e:	4a03      	ldr	r2, [pc, #12]	; (1b37c <send_err_rsp.part.0+0x3c>)
}
   1b370:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   1b374:	f00f be98 	b.w	2b0a8 <bt_att_chan_send_rsp>
}
   1b378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b37c:	0002b35f 	.word	0x0002b35f

0001b380 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
   1b380:	898b      	ldrh	r3, [r1, #12]
{
   1b382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b386:	4604      	mov	r4, r0
   1b388:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
   1b38a:	b97b      	cbnz	r3, 1b3ac <bt_att_recv+0x2c>
		BT_ERR("Too small ATT PDU received");
   1b38c:	4957      	ldr	r1, [pc, #348]	; (1b4ec <bt_att_recv+0x16c>)
   1b38e:	680b      	ldr	r3, [r1, #0]
   1b390:	075d      	lsls	r5, r3, #29
   1b392:	d008      	beq.n	1b3a6 <bt_att_recv+0x26>
   1b394:	4b56      	ldr	r3, [pc, #344]	; (1b4f0 <bt_att_recv+0x170>)
   1b396:	4857      	ldr	r0, [pc, #348]	; (1b4f4 <bt_att_recv+0x174>)
   1b398:	1ac9      	subs	r1, r1, r3
   1b39a:	0889      	lsrs	r1, r1, #2
   1b39c:	0189      	lsls	r1, r1, #6
   1b39e:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
   1b3a2:	f00d ff9c 	bl	292de <log_0>
}
   1b3a6:	2000      	movs	r0, #0
   1b3a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
   1b3ac:	2101      	movs	r1, #1
   1b3ae:	f108 0008 	add.w	r0, r8, #8
   1b3b2:	f004 ff31 	bl	20218 <net_buf_simple_pull_mem>
	if (!att_chan->att) {
   1b3b6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1b3ba:	4605      	mov	r5, r0
   1b3bc:	2b00      	cmp	r3, #0
   1b3be:	d0f2      	beq.n	1b3a6 <bt_att_recv+0x26>
		if (hdr->code == handlers[i].op) {
   1b3c0:	4a4d      	ldr	r2, [pc, #308]	; (1b4f8 <bt_att_recv+0x178>)
   1b3c2:	7801      	ldrb	r1, [r0, #0]
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   1b3c4:	f1a4 0708 	sub.w	r7, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b3c8:	2300      	movs	r3, #0
   1b3ca:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
   1b3cc:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
   1b3d0:	4288      	cmp	r0, r1
   1b3d2:	d121      	bne.n	1b418 <bt_att_recv+0x98>
		if (handler->type == ATT_REQUEST &&
   1b3d4:	00d8      	lsls	r0, r3, #3
   1b3d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1b3da:	789e      	ldrb	r6, [r3, #2]
   1b3dc:	2e01      	cmp	r6, #1
   1b3de:	d13c      	bne.n	1b45a <bt_att_recv+0xda>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1b3e0:	f3bf 8f5b 	dmb	ish
   1b3e4:	34f0      	adds	r4, #240	; 0xf0
   1b3e6:	e854 3f00 	ldrex	r3, [r4]
   1b3ea:	f043 0201 	orr.w	r2, r3, #1
   1b3ee:	e844 2100 	strex	r1, r2, [r4]
   1b3f2:	2900      	cmp	r1, #0
   1b3f4:	d1f7      	bne.n	1b3e6 <bt_att_recv+0x66>
   1b3f6:	f3bf 8f5b 	dmb	ish
   1b3fa:	07dc      	lsls	r4, r3, #31
   1b3fc:	d54b      	bpl.n	1b496 <bt_att_recv+0x116>
			BT_WARN("Ignoring unexpected request");
   1b3fe:	493b      	ldr	r1, [pc, #236]	; (1b4ec <bt_att_recv+0x16c>)
   1b400:	680b      	ldr	r3, [r1, #0]
   1b402:	f013 0f06 	tst.w	r3, #6
   1b406:	d0ce      	beq.n	1b3a6 <bt_att_recv+0x26>
   1b408:	4b39      	ldr	r3, [pc, #228]	; (1b4f0 <bt_att_recv+0x170>)
   1b40a:	483c      	ldr	r0, [pc, #240]	; (1b4fc <bt_att_recv+0x17c>)
   1b40c:	1ac9      	subs	r1, r1, r3
   1b40e:	0889      	lsrs	r1, r1, #2
   1b410:	0189      	lsls	r1, r1, #6
   1b412:	f041 0102 	orr.w	r1, r1, #2
   1b416:	e7c4      	b.n	1b3a2 <bt_att_recv+0x22>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
   1b418:	3301      	adds	r3, #1
   1b41a:	2b1c      	cmp	r3, #28
   1b41c:	d1d6      	bne.n	1b3cc <bt_att_recv+0x4c>
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
   1b41e:	4a33      	ldr	r2, [pc, #204]	; (1b4ec <bt_att_recv+0x16c>)
   1b420:	6813      	ldr	r3, [r2, #0]
   1b422:	f013 0f06 	tst.w	r3, #6
   1b426:	d008      	beq.n	1b43a <bt_att_recv+0xba>
   1b428:	4b31      	ldr	r3, [pc, #196]	; (1b4f0 <bt_att_recv+0x170>)
   1b42a:	4835      	ldr	r0, [pc, #212]	; (1b500 <bt_att_recv+0x180>)
   1b42c:	1ad2      	subs	r2, r2, r3
   1b42e:	0892      	lsrs	r2, r2, #2
   1b430:	0192      	lsls	r2, r2, #6
   1b432:	f042 0202 	orr.w	r2, r2, #2
   1b436:	f00d ff5f 	bl	292f8 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND &&
   1b43a:	7829      	ldrb	r1, [r5, #0]
   1b43c:	4608      	mov	r0, r1
   1b43e:	f00f fdb7 	bl	2afb0 <att_op_get_type>
   1b442:	2800      	cmp	r0, #0
   1b444:	d0af      	beq.n	1b3a6 <bt_att_recv+0x26>
   1b446:	2805      	cmp	r0, #5
   1b448:	d0ad      	beq.n	1b3a6 <bt_att_recv+0x26>
	if (!req) {
   1b44a:	2900      	cmp	r1, #0
   1b44c:	d0ab      	beq.n	1b3a6 <bt_att_recv+0x26>
   1b44e:	2306      	movs	r3, #6
   1b450:	2200      	movs	r2, #0
   1b452:	4638      	mov	r0, r7
   1b454:	f7ff ff74 	bl	1b340 <send_err_rsp.part.0>
   1b458:	e7a5      	b.n	1b3a6 <bt_att_recv+0x26>
		} else if (handler->type == ATT_INDICATION &&
   1b45a:	2e05      	cmp	r6, #5
   1b45c:	d11b      	bne.n	1b496 <bt_att_recv+0x116>
   1b45e:	f3bf 8f5b 	dmb	ish
   1b462:	34f0      	adds	r4, #240	; 0xf0
   1b464:	e854 3f00 	ldrex	r3, [r4]
   1b468:	f043 0202 	orr.w	r2, r3, #2
   1b46c:	e844 2100 	strex	r1, r2, [r4]
   1b470:	2900      	cmp	r1, #0
   1b472:	d1f7      	bne.n	1b464 <bt_att_recv+0xe4>
   1b474:	f3bf 8f5b 	dmb	ish
   1b478:	0799      	lsls	r1, r3, #30
   1b47a:	d50c      	bpl.n	1b496 <bt_att_recv+0x116>
			BT_WARN("Ignoring unexpected indication");
   1b47c:	491b      	ldr	r1, [pc, #108]	; (1b4ec <bt_att_recv+0x16c>)
   1b47e:	680b      	ldr	r3, [r1, #0]
   1b480:	f013 0f06 	tst.w	r3, #6
   1b484:	d08f      	beq.n	1b3a6 <bt_att_recv+0x26>
   1b486:	4b1a      	ldr	r3, [pc, #104]	; (1b4f0 <bt_att_recv+0x170>)
   1b488:	481e      	ldr	r0, [pc, #120]	; (1b504 <bt_att_recv+0x184>)
   1b48a:	1ac9      	subs	r1, r1, r3
   1b48c:	0889      	lsrs	r1, r1, #2
   1b48e:	0189      	lsls	r1, r1, #6
   1b490:	f041 0102 	orr.w	r1, r1, #2
   1b494:	e785      	b.n	1b3a2 <bt_att_recv+0x22>
	if (buf->len < handler->expect_len) {
   1b496:	eb0c 0300 	add.w	r3, ip, r0
   1b49a:	f8b8 100c 	ldrh.w	r1, [r8, #12]
   1b49e:	785a      	ldrb	r2, [r3, #1]
   1b4a0:	428a      	cmp	r2, r1
   1b4a2:	d912      	bls.n	1b4ca <bt_att_recv+0x14a>
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
   1b4a4:	4b11      	ldr	r3, [pc, #68]	; (1b4ec <bt_att_recv+0x16c>)
   1b4a6:	681a      	ldr	r2, [r3, #0]
   1b4a8:	0752      	lsls	r2, r2, #29
   1b4aa:	d009      	beq.n	1b4c0 <bt_att_recv+0x140>
   1b4ac:	4a10      	ldr	r2, [pc, #64]	; (1b4f0 <bt_att_recv+0x170>)
   1b4ae:	4816      	ldr	r0, [pc, #88]	; (1b508 <bt_att_recv+0x188>)
   1b4b0:	1a9b      	subs	r3, r3, r2
   1b4b2:	089b      	lsrs	r3, r3, #2
   1b4b4:	019b      	lsls	r3, r3, #6
   1b4b6:	782a      	ldrb	r2, [r5, #0]
   1b4b8:	f043 0301 	orr.w	r3, r3, #1
   1b4bc:	f00d ff30 	bl	29320 <log_2>
	if (handler->type == ATT_REQUEST && err) {
   1b4c0:	2e01      	cmp	r6, #1
   1b4c2:	f47f af70 	bne.w	1b3a6 <bt_att_recv+0x26>
   1b4c6:	2304      	movs	r3, #4
   1b4c8:	e00a      	b.n	1b4e0 <bt_att_recv+0x160>
		err = handler->func(att_chan, buf);
   1b4ca:	685b      	ldr	r3, [r3, #4]
   1b4cc:	4641      	mov	r1, r8
   1b4ce:	4638      	mov	r0, r7
   1b4d0:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
   1b4d2:	2e01      	cmp	r6, #1
		err = handler->func(att_chan, buf);
   1b4d4:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
   1b4d6:	f47f af66 	bne.w	1b3a6 <bt_att_recv+0x26>
   1b4da:	2800      	cmp	r0, #0
   1b4dc:	f43f af63 	beq.w	1b3a6 <bt_att_recv+0x26>
		send_err_rsp(att_chan, hdr->code, 0, err);
   1b4e0:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
   1b4e2:	2900      	cmp	r1, #0
   1b4e4:	f43f af5f 	beq.w	1b3a6 <bt_att_recv+0x26>
   1b4e8:	e7b2      	b.n	1b450 <bt_att_recv+0xd0>
   1b4ea:	bf00      	nop
   1b4ec:	20000740 	.word	0x20000740
   1b4f0:	20000740 	.word	0x20000740
   1b4f4:	00031c5c 	.word	0x00031c5c
   1b4f8:	0002ddd0 	.word	0x0002ddd0
   1b4fc:	00031c91 	.word	0x00031c91
   1b500:	00031c77 	.word	0x00031c77
   1b504:	00031cad 	.word	0x00031cad
   1b508:	00031ccc 	.word	0x00031ccc

0001b50c <att_write_req>:
{
   1b50c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b510:	4604      	mov	r4, r0
   1b512:	b087      	sub	sp, #28
	return net_buf_simple_pull_le16(&buf->b);
   1b514:	f101 0008 	add.w	r0, r1, #8
   1b518:	460d      	mov	r5, r1
   1b51a:	f010 fd99 	bl	2c050 <net_buf_simple_pull_le16>
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b51e:	6823      	ldr	r3, [r4, #0]
			     handle, 0, buf->data, buf->len);
   1b520:	f8d5 9008 	ldr.w	r9, [r5, #8]
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1b524:	89ad      	ldrh	r5, [r5, #12]
   1b526:	4606      	mov	r6, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
   1b528:	2101      	movs	r1, #1
   1b52a:	6818      	ldr	r0, [r3, #0]
   1b52c:	f010 fce4 	bl	2bef8 <bt_gatt_change_aware>
   1b530:	2800      	cmp	r0, #0
   1b532:	d040      	beq.n	1b5b6 <att_write_req+0xaa>
	if (!handle) {
   1b534:	2e00      	cmp	r6, #0
   1b536:	d040      	beq.n	1b5ba <att_write_req+0xae>
	(void)memset(&data, 0, sizeof(data));
   1b538:	2218      	movs	r2, #24
   1b53a:	2100      	movs	r1, #0
   1b53c:	4668      	mov	r0, sp
   1b53e:	f011 fb82 	bl	2cc46 <memset>
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
   1b542:	2200      	movs	r2, #0
   1b544:	2113      	movs	r1, #19
   1b546:	4620      	mov	r0, r4
   1b548:	f7ff fe90 	bl	1b26c <bt_att_chan_create_pdu>
   1b54c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
   1b54e:	b380      	cbz	r0, 1b5b2 <att_write_req+0xa6>
	data.conn = chan->att->conn;
   1b550:	6823      	ldr	r3, [r4, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b552:	4a1b      	ldr	r2, [pc, #108]	; (1b5c0 <att_write_req+0xb4>)
	data.conn = chan->att->conn;
   1b554:	681b      	ldr	r3, [r3, #0]
   1b556:	9300      	str	r3, [sp, #0]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b558:	2301      	movs	r3, #1
   1b55a:	f88d 3014 	strb.w	r3, [sp, #20]
	data.req = req;
   1b55e:	f04f 0812 	mov.w	r8, #18
	data.offset = offset;
   1b562:	2700      	movs	r7, #0
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b564:	466b      	mov	r3, sp
   1b566:	4631      	mov	r1, r6
   1b568:	4630      	mov	r0, r6
	data.len = len;
   1b56a:	f8ad 5010 	strh.w	r5, [sp, #16]
	data.req = req;
   1b56e:	f88d 8008 	strb.w	r8, [sp, #8]
	data.offset = offset;
   1b572:	f8ad 7012 	strh.w	r7, [sp, #18]
	data.value = value;
   1b576:	f8cd 900c 	str.w	r9, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
   1b57a:	f00f fdde 	bl	2b13a <bt_gatt_foreach_attr>
	if (data.err) {
   1b57e:	f89d 5014 	ldrb.w	r5, [sp, #20]
   1b582:	b175      	cbz	r5, 1b5a2 <att_write_req+0x96>
			net_buf_unref(data.buf);
   1b584:	9801      	ldr	r0, [sp, #4]
   1b586:	f004 fd39 	bl	1fffc <net_buf_unref>
	if (!req) {
   1b58a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1b58e:	4632      	mov	r2, r6
   1b590:	4641      	mov	r1, r8
   1b592:	4620      	mov	r0, r4
   1b594:	f7ff fed4 	bl	1b340 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
   1b598:	463d      	mov	r5, r7
}
   1b59a:	4628      	mov	r0, r5
   1b59c:	b007      	add	sp, #28
   1b59e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data.buf) {
   1b5a2:	9901      	ldr	r1, [sp, #4]
   1b5a4:	2900      	cmp	r1, #0
   1b5a6:	d0f8      	beq.n	1b59a <att_write_req+0x8e>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b5a8:	4a06      	ldr	r2, [pc, #24]	; (1b5c4 <att_write_req+0xb8>)
   1b5aa:	4620      	mov	r0, r4
   1b5ac:	f00f fd7c 	bl	2b0a8 <bt_att_chan_send_rsp>
   1b5b0:	e7f3      	b.n	1b59a <att_write_req+0x8e>
			return BT_ATT_ERR_UNLIKELY;
   1b5b2:	250e      	movs	r5, #14
   1b5b4:	e7f1      	b.n	1b59a <att_write_req+0x8e>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b5b6:	2512      	movs	r5, #18
   1b5b8:	e7ef      	b.n	1b59a <att_write_req+0x8e>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b5ba:	2501      	movs	r5, #1
   1b5bc:	e7ed      	b.n	1b59a <att_write_req+0x8e>
   1b5be:	bf00      	nop
   1b5c0:	0002b41b 	.word	0x0002b41b
   1b5c4:	0002b35f 	.word	0x0002b35f

0001b5c8 <bt_att_create_pdu>:
{
   1b5c8:	b538      	push	{r3, r4, r5, lr}
   1b5ca:	460d      	mov	r5, r1
   1b5cc:	4614      	mov	r4, r2
	att = att_get(conn);
   1b5ce:	f7ff fd09 	bl	1afe4 <att_get>
	if (!att) {
   1b5d2:	b1e8      	cbz	r0, 1b610 <bt_att_create_pdu+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b5d4:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1b5d6:	b163      	cbz	r3, 1b5f2 <bt_att_create_pdu+0x2a>
   1b5d8:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1b5dc:	d009      	beq.n	1b5f2 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b5de:	681b      	ldr	r3, [r3, #0]
   1b5e0:	b10b      	cbz	r3, 1b5e6 <bt_att_create_pdu+0x1e>
   1b5e2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1b5e6:	1c61      	adds	r1, r4, #1
   1b5e8:	f8b0 208a 	ldrh.w	r2, [r0, #138]	; 0x8a
   1b5ec:	4291      	cmp	r1, r2
   1b5ee:	d911      	bls.n	1b614 <bt_att_create_pdu+0x4c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b5f0:	b9b3      	cbnz	r3, 1b620 <bt_att_create_pdu+0x58>
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
   1b5f2:	4b11      	ldr	r3, [pc, #68]	; (1b638 <bt_att_create_pdu+0x70>)
   1b5f4:	681a      	ldr	r2, [r3, #0]
   1b5f6:	f012 0f06 	tst.w	r2, #6
   1b5fa:	d009      	beq.n	1b610 <bt_att_create_pdu+0x48>
   1b5fc:	4a0f      	ldr	r2, [pc, #60]	; (1b63c <bt_att_create_pdu+0x74>)
   1b5fe:	4810      	ldr	r0, [pc, #64]	; (1b640 <bt_att_create_pdu+0x78>)
   1b600:	1a9b      	subs	r3, r3, r2
   1b602:	089b      	lsrs	r3, r3, #2
   1b604:	019b      	lsls	r3, r3, #6
   1b606:	f043 0202 	orr.w	r2, r3, #2
   1b60a:	1c61      	adds	r1, r4, #1
   1b60c:	f00d fe74 	bl	292f8 <log_1>
}
   1b610:	2000      	movs	r0, #0
   1b612:	bd38      	pop	{r3, r4, r5, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1b614:	4622      	mov	r2, r4
   1b616:	4629      	mov	r1, r5
}
   1b618:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1b61c:	f7ff be26 	b.w	1b26c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1b620:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   1b624:	d004      	beq.n	1b630 <bt_att_create_pdu+0x68>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1b626:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1b62a:	b10a      	cbz	r2, 1b630 <bt_att_create_pdu+0x68>
   1b62c:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   1b630:	4618      	mov	r0, r3
   1b632:	4613      	mov	r3, r2
   1b634:	e7d8      	b.n	1b5e8 <bt_att_create_pdu+0x20>
   1b636:	bf00      	nop
   1b638:	20000740 	.word	0x20000740
   1b63c:	20000740 	.word	0x20000740
   1b640:	00031ceb 	.word	0x00031ceb

0001b644 <att_read_group_req>:
{
   1b644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b648:	7b0c      	ldrb	r4, [r1, #12]
   1b64a:	3c04      	subs	r4, #4
   1b64c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b64e:	2c02      	cmp	r4, #2
{
   1b650:	4605      	mov	r5, r0
   1b652:	b08c      	sub	sp, #48	; 0x30
   1b654:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1b656:	d001      	beq.n	1b65c <att_read_group_req+0x18>
   1b658:	2c10      	cmp	r4, #16
   1b65a:	d16f      	bne.n	1b73c <att_read_group_req+0xf8>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b65c:	2104      	movs	r1, #4
   1b65e:	3008      	adds	r0, #8
   1b660:	f004 fdda 	bl	20218 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b664:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b668:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b66a:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b66c:	1d01      	adds	r1, r0, #4
   1b66e:	4622      	mov	r2, r4
   1b670:	4640      	mov	r0, r8
   1b672:	f00f f8df 	bl	2a834 <bt_uuid_create>
   1b676:	2800      	cmp	r0, #0
   1b678:	d062      	beq.n	1b740 <att_read_group_req+0xfc>
	if (!start || !end) {
   1b67a:	2e00      	cmp	r6, #0
   1b67c:	d03a      	beq.n	1b6f4 <att_read_group_req+0xb0>
   1b67e:	2400      	movs	r4, #0
   1b680:	2f00      	cmp	r7, #0
   1b682:	d036      	beq.n	1b6f2 <att_read_group_req+0xae>
	if (start > end) {
   1b684:	42b7      	cmp	r7, r6
   1b686:	d335      	bcc.n	1b6f4 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b688:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b68c:	a901      	add	r1, sp, #4
   1b68e:	4640      	mov	r0, r8
   1b690:	f88d 4004 	strb.w	r4, [sp, #4]
   1b694:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b698:	f00f f8a2 	bl	2a7e0 <bt_uuid_cmp>
   1b69c:	2800      	cmp	r0, #0
   1b69e:	d134      	bne.n	1b70a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
   1b6a0:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1b6a2:	2214      	movs	r2, #20
   1b6a4:	2100      	movs	r1, #0
   1b6a6:	a807      	add	r0, sp, #28
   1b6a8:	f011 facd 	bl	2cc46 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
   1b6ac:	2201      	movs	r2, #1
   1b6ae:	2111      	movs	r1, #17
   1b6b0:	4620      	mov	r0, r4
   1b6b2:	f7ff ff89 	bl	1b5c8 <bt_att_create_pdu>
   1b6b6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
   1b6b8:	2800      	cmp	r0, #0
   1b6ba:	d041      	beq.n	1b740 <att_read_group_req+0xfc>
	return net_buf_simple_add(&buf->b, len);
   1b6bc:	2101      	movs	r1, #1
   1b6be:	3008      	adds	r0, #8
	data.uuid = uuid;
   1b6c0:	e9cd 5807 	strd	r5, r8, [sp, #28]
   1b6c4:	f004 fdca 	bl	2025c <net_buf_simple_add>
	data.rsp->len = 0U;
   1b6c8:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b6cc:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b6ce:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
   1b6d0:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b6d4:	4a1b      	ldr	r2, [pc, #108]	; (1b744 <att_read_group_req+0x100>)
	data.group = NULL;
   1b6d6:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
   1b6da:	4639      	mov	r1, r7
   1b6dc:	4630      	mov	r0, r6
   1b6de:	f00f fd2c 	bl	2b13a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
   1b6e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1b6e4:	781c      	ldrb	r4, [r3, #0]
   1b6e6:	bb1c      	cbnz	r4, 1b730 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
   1b6e8:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b6ea:	f004 fc87 	bl	1fffc <net_buf_unref>
	if (!req) {
   1b6ee:	230a      	movs	r3, #10
   1b6f0:	e018      	b.n	1b724 <att_read_group_req+0xe0>
			*err = 0U;
   1b6f2:	463e      	mov	r6, r7
	if (!req) {
   1b6f4:	2301      	movs	r3, #1
   1b6f6:	4632      	mov	r2, r6
   1b6f8:	2110      	movs	r1, #16
   1b6fa:	4628      	mov	r0, r5
   1b6fc:	f7ff fe20 	bl	1b340 <send_err_rsp.part.0>
		return 0;
   1b700:	2400      	movs	r4, #0
}
   1b702:	4620      	mov	r0, r4
   1b704:	b00c      	add	sp, #48	; 0x30
   1b706:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
   1b70a:	f642 0301 	movw	r3, #10241	; 0x2801
   1b70e:	a907      	add	r1, sp, #28
   1b710:	4640      	mov	r0, r8
   1b712:	f88d 401c 	strb.w	r4, [sp, #28]
   1b716:	f8ad 301e 	strh.w	r3, [sp, #30]
   1b71a:	f00f f861 	bl	2a7e0 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
   1b71e:	2800      	cmp	r0, #0
   1b720:	d0be      	beq.n	1b6a0 <att_read_group_req+0x5c>
	if (!req) {
   1b722:	2310      	movs	r3, #16
   1b724:	4632      	mov	r2, r6
   1b726:	2110      	movs	r1, #16
   1b728:	4628      	mov	r0, r5
   1b72a:	f7ff fe09 	bl	1b340 <send_err_rsp.part.0>
		return 0;
   1b72e:	e7e8      	b.n	1b702 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b730:	4a05      	ldr	r2, [pc, #20]	; (1b748 <att_read_group_req+0x104>)
   1b732:	9909      	ldr	r1, [sp, #36]	; 0x24
   1b734:	4628      	mov	r0, r5
   1b736:	f00f fcb7 	bl	2b0a8 <bt_att_chan_send_rsp>
	return 0;
   1b73a:	e7e1      	b.n	1b700 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
   1b73c:	2404      	movs	r4, #4
   1b73e:	e7e0      	b.n	1b702 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
   1b740:	240e      	movs	r4, #14
   1b742:	e7de      	b.n	1b702 <att_read_group_req+0xbe>
   1b744:	0001ad1d 	.word	0x0001ad1d
   1b748:	0002b35f 	.word	0x0002b35f

0001b74c <att_read_mult_req>:
{
   1b74c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b750:	6886      	ldr	r6, [r0, #8]
{
   1b752:	b085      	sub	sp, #20
   1b754:	4604      	mov	r4, r0
   1b756:	460d      	mov	r5, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b758:	4630      	mov	r0, r6
   1b75a:	2101      	movs	r1, #1
   1b75c:	f010 fbcc 	bl	2bef8 <bt_gatt_change_aware>
   1b760:	2800      	cmp	r0, #0
   1b762:	d038      	beq.n	1b7d6 <att_read_mult_req+0x8a>
	(void)memset(&data, 0, sizeof(data));
   1b764:	2210      	movs	r2, #16
   1b766:	2100      	movs	r1, #0
   1b768:	4668      	mov	r0, sp
   1b76a:	f011 fa6c 	bl	2cc46 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
   1b76e:	2200      	movs	r2, #0
   1b770:	210f      	movs	r1, #15
   1b772:	4630      	mov	r0, r6
   1b774:	f7ff ff28 	bl	1b5c8 <bt_att_create_pdu>
   1b778:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b77a:	b370      	cbz	r0, 1b7da <att_read_mult_req+0x8e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b77c:	f8df 9064 	ldr.w	r9, [pc, #100]	; 1b7e4 <att_read_mult_req+0x98>
	data.chan = chan;
   1b780:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
   1b782:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b786:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
   1b78a:	89ab      	ldrh	r3, [r5, #12]
   1b78c:	2b01      	cmp	r3, #1
   1b78e:	d805      	bhi.n	1b79c <att_read_mult_req+0x50>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b790:	4a13      	ldr	r2, [pc, #76]	; (1b7e0 <att_read_mult_req+0x94>)
   1b792:	9902      	ldr	r1, [sp, #8]
   1b794:	4620      	mov	r0, r4
   1b796:	f00f fc87 	bl	2b0a8 <bt_att_chan_send_rsp>
   1b79a:	e018      	b.n	1b7ce <att_read_mult_req+0x82>
   1b79c:	4638      	mov	r0, r7
   1b79e:	f010 fc57 	bl	2c050 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b7a2:	466b      	mov	r3, sp
   1b7a4:	464a      	mov	r2, r9
   1b7a6:	4601      	mov	r1, r0
   1b7a8:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b7aa:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b7ae:	f00f fcc4 	bl	2b13a <bt_gatt_foreach_attr>
		if (data.err) {
   1b7b2:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b7b6:	2b00      	cmp	r3, #0
   1b7b8:	d0e7      	beq.n	1b78a <att_read_mult_req+0x3e>
			net_buf_unref(data.buf);
   1b7ba:	9802      	ldr	r0, [sp, #8]
   1b7bc:	f004 fc1e 	bl	1fffc <net_buf_unref>
	if (!req) {
   1b7c0:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b7c4:	4632      	mov	r2, r6
   1b7c6:	210e      	movs	r1, #14
   1b7c8:	4620      	mov	r0, r4
   1b7ca:	f7ff fdb9 	bl	1b340 <send_err_rsp.part.0>
	return 0;
   1b7ce:	2000      	movs	r0, #0
}
   1b7d0:	b005      	add	sp, #20
   1b7d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b7d6:	2012      	movs	r0, #18
   1b7d8:	e7fa      	b.n	1b7d0 <att_read_mult_req+0x84>
		return BT_ATT_ERR_UNLIKELY;
   1b7da:	200e      	movs	r0, #14
   1b7dc:	e7f8      	b.n	1b7d0 <att_read_mult_req+0x84>
   1b7de:	bf00      	nop
   1b7e0:	0002b35f 	.word	0x0002b35f
   1b7e4:	0002b4f9 	.word	0x0002b4f9

0001b7e8 <att_read_rsp>:
{
   1b7e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
   1b7ec:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
   1b7f0:	4605      	mov	r5, r0
   1b7f2:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
   1b7f4:	4640      	mov	r0, r8
   1b7f6:	2101      	movs	r1, #1
{
   1b7f8:	4614      	mov	r4, r2
   1b7fa:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
   1b7fc:	f010 fb7c 	bl	2bef8 <bt_gatt_change_aware>
   1b800:	b390      	cbz	r0, 1b868 <att_read_rsp+0x80>
	if (!handle) {
   1b802:	b39e      	cbz	r6, 1b86c <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
   1b804:	2210      	movs	r2, #16
   1b806:	2100      	movs	r1, #0
   1b808:	4668      	mov	r0, sp
   1b80a:	f011 fa1c 	bl	2cc46 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
   1b80e:	2200      	movs	r2, #0
   1b810:	4621      	mov	r1, r4
   1b812:	4640      	mov	r0, r8
   1b814:	f7ff fed8 	bl	1b5c8 <bt_att_create_pdu>
   1b818:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b81a:	b348      	cbz	r0, 1b870 <att_read_rsp+0x88>
	data.offset = offset;
   1b81c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1b820:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
   1b824:	2301      	movs	r3, #1
   1b826:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b82a:	4a12      	ldr	r2, [pc, #72]	; (1b874 <att_read_rsp+0x8c>)
	data.chan = chan;
   1b82c:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
   1b82e:	466b      	mov	r3, sp
   1b830:	4631      	mov	r1, r6
   1b832:	4630      	mov	r0, r6
   1b834:	f00f fc81 	bl	2b13a <bt_gatt_foreach_attr>
	if (data.err) {
   1b838:	f89d 400c 	ldrb.w	r4, [sp, #12]
   1b83c:	b174      	cbz	r4, 1b85c <att_read_rsp+0x74>
		net_buf_unref(data.buf);
   1b83e:	9802      	ldr	r0, [sp, #8]
   1b840:	f004 fbdc 	bl	1fffc <net_buf_unref>
	if (!req) {
   1b844:	f89d 300c 	ldrb.w	r3, [sp, #12]
   1b848:	4632      	mov	r2, r6
   1b84a:	4639      	mov	r1, r7
   1b84c:	4628      	mov	r0, r5
   1b84e:	f7ff fd77 	bl	1b340 <send_err_rsp.part.0>
		return 0;
   1b852:	2400      	movs	r4, #0
}
   1b854:	4620      	mov	r0, r4
   1b856:	b004      	add	sp, #16
   1b858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b85c:	4a06      	ldr	r2, [pc, #24]	; (1b878 <att_read_rsp+0x90>)
   1b85e:	9902      	ldr	r1, [sp, #8]
   1b860:	4628      	mov	r0, r5
   1b862:	f00f fc21 	bl	2b0a8 <bt_att_chan_send_rsp>
	return 0;
   1b866:	e7f5      	b.n	1b854 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
   1b868:	2412      	movs	r4, #18
   1b86a:	e7f3      	b.n	1b854 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
   1b86c:	2401      	movs	r4, #1
   1b86e:	e7f1      	b.n	1b854 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1b870:	240e      	movs	r4, #14
   1b872:	e7ef      	b.n	1b854 <att_read_rsp+0x6c>
   1b874:	0002b4f9 	.word	0x0002b4f9
   1b878:	0002b35f 	.word	0x0002b35f

0001b87c <att_read_type_req>:
{
   1b87c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
   1b880:	7b0c      	ldrb	r4, [r1, #12]
   1b882:	3c04      	subs	r4, #4
   1b884:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
   1b886:	2c02      	cmp	r4, #2
{
   1b888:	4605      	mov	r5, r0
   1b88a:	b08c      	sub	sp, #48	; 0x30
   1b88c:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
   1b88e:	d001      	beq.n	1b894 <att_read_type_req+0x18>
   1b890:	2c10      	cmp	r4, #16
   1b892:	d150      	bne.n	1b936 <att_read_type_req+0xba>
	return net_buf_simple_pull_mem(&buf->b, len);
   1b894:	2104      	movs	r1, #4
   1b896:	3008      	adds	r0, #8
   1b898:	f004 fcbe 	bl	20218 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b89c:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b8a0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b8a2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
   1b8a4:	1d01      	adds	r1, r0, #4
   1b8a6:	4622      	mov	r2, r4
   1b8a8:	4640      	mov	r0, r8
   1b8aa:	f00e ffc3 	bl	2a834 <bt_uuid_create>
   1b8ae:	b188      	cbz	r0, 1b8d4 <att_read_type_req+0x58>
	if (!start || !end) {
   1b8b0:	b19e      	cbz	r6, 1b8da <att_read_type_req+0x5e>
   1b8b2:	b18f      	cbz	r7, 1b8d8 <att_read_type_req+0x5c>
	if (start > end) {
   1b8b4:	42be      	cmp	r6, r7
   1b8b6:	d810      	bhi.n	1b8da <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
   1b8b8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
   1b8ba:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1b8bc:	2100      	movs	r1, #0
   1b8be:	eb0d 0002 	add.w	r0, sp, r2
   1b8c2:	f011 f9c0 	bl	2cc46 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
   1b8c6:	2201      	movs	r2, #1
   1b8c8:	2109      	movs	r1, #9
   1b8ca:	4620      	mov	r0, r4
   1b8cc:	f7ff fe7c 	bl	1b5c8 <bt_att_create_pdu>
   1b8d0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
   1b8d2:	b968      	cbnz	r0, 1b8f0 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
   1b8d4:	240e      	movs	r4, #14
   1b8d6:	e007      	b.n	1b8e8 <att_read_type_req+0x6c>
			*err = 0U;
   1b8d8:	463e      	mov	r6, r7
	if (!req) {
   1b8da:	2301      	movs	r3, #1
   1b8dc:	4632      	mov	r2, r6
   1b8de:	2108      	movs	r1, #8
   1b8e0:	4628      	mov	r0, r5
   1b8e2:	f7ff fd2d 	bl	1b340 <send_err_rsp.part.0>
		return 0;
   1b8e6:	2400      	movs	r4, #0
}
   1b8e8:	4620      	mov	r0, r4
   1b8ea:	b00c      	add	sp, #48	; 0x30
   1b8ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
   1b8f0:	2101      	movs	r1, #1
   1b8f2:	3008      	adds	r0, #8
	data.uuid = uuid;
   1b8f4:	e9cd 5806 	strd	r5, r8, [sp, #24]
   1b8f8:	f004 fcb0 	bl	2025c <net_buf_simple_add>
	data.rsp->len = 0U;
   1b8fc:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b900:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
   1b902:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b904:	4a0d      	ldr	r2, [pc, #52]	; (1b93c <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
   1b906:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b90a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b90c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
   1b910:	4630      	mov	r0, r6
   1b912:	ab06      	add	r3, sp, #24
   1b914:	f00f fc11 	bl	2b13a <bt_gatt_foreach_attr>
	if (data.err) {
   1b918:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   1b91c:	b12c      	cbz	r4, 1b92a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
   1b91e:	9808      	ldr	r0, [sp, #32]
   1b920:	f004 fb6c 	bl	1fffc <net_buf_unref>
	if (!req) {
   1b924:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
   1b928:	e7d8      	b.n	1b8dc <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1b92a:	4a05      	ldr	r2, [pc, #20]	; (1b940 <att_read_type_req+0xc4>)
   1b92c:	9908      	ldr	r1, [sp, #32]
   1b92e:	4628      	mov	r0, r5
   1b930:	f00f fbba 	bl	2b0a8 <bt_att_chan_send_rsp>
	return 0;
   1b934:	e7d8      	b.n	1b8e8 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
   1b936:	2404      	movs	r4, #4
   1b938:	e7d6      	b.n	1b8e8 <att_read_type_req+0x6c>
   1b93a:	bf00      	nop
   1b93c:	0001adc9 	.word	0x0001adc9
   1b940:	0002b35f 	.word	0x0002b35f

0001b944 <att_find_type_req>:
{
   1b944:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b948:	4688      	mov	r8, r1
   1b94a:	b086      	sub	sp, #24
   1b94c:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
   1b94e:	2106      	movs	r1, #6
   1b950:	f108 0008 	add.w	r0, r8, #8
   1b954:	f004 fc60 	bl	20218 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
   1b958:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
   1b95a:	b317      	cbz	r7, 1b9a2 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1b95c:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
   1b960:	f1b9 0f00 	cmp.w	r9, #0
   1b964:	d01c      	beq.n	1b9a0 <att_find_type_req+0x5c>
	if (start > end) {
   1b966:	45b9      	cmp	r9, r7
   1b968:	d31b      	bcc.n	1b9a2 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
   1b96a:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b96c:	f8ad 3002 	strh.w	r3, [sp, #2]
   1b970:	2400      	movs	r4, #0
   1b972:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1b976:	a901      	add	r1, sp, #4
   1b978:	4668      	mov	r0, sp
	value = buf->data;
   1b97a:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
   1b97e:	f88d 4000 	strb.w	r4, [sp]
   1b982:	f88d 4004 	strb.w	r4, [sp, #4]
   1b986:	f8ad 3006 	strh.w	r3, [sp, #6]
   1b98a:	f00e ff29 	bl	2a7e0 <bt_uuid_cmp>
   1b98e:	4606      	mov	r6, r0
   1b990:	b190      	cbz	r0, 1b9b8 <att_find_type_req+0x74>
	if (!req) {
   1b992:	230a      	movs	r3, #10
   1b994:	463a      	mov	r2, r7
   1b996:	2106      	movs	r1, #6
   1b998:	4628      	mov	r0, r5
   1b99a:	f7ff fcd1 	bl	1b340 <send_err_rsp.part.0>
		return 0;
   1b99e:	e007      	b.n	1b9b0 <att_find_type_req+0x6c>
			*err = 0U;
   1b9a0:	464f      	mov	r7, r9
	if (!req) {
   1b9a2:	2301      	movs	r3, #1
   1b9a4:	463a      	mov	r2, r7
   1b9a6:	2106      	movs	r1, #6
   1b9a8:	4628      	mov	r0, r5
   1b9aa:	f7ff fcc9 	bl	1b340 <send_err_rsp.part.0>
		return 0;
   1b9ae:	2400      	movs	r4, #0
}
   1b9b0:	4620      	mov	r0, r4
   1b9b2:	b006      	add	sp, #24
   1b9b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1b9b8:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
   1b9bc:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
   1b9c0:	4601      	mov	r1, r0
   1b9c2:	2214      	movs	r2, #20
   1b9c4:	a801      	add	r0, sp, #4
   1b9c6:	f011 f93e 	bl	2cc46 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
   1b9ca:	4632      	mov	r2, r6
   1b9cc:	2107      	movs	r1, #7
   1b9ce:	4640      	mov	r0, r8
   1b9d0:	f7ff fdfa 	bl	1b5c8 <bt_att_create_pdu>
   1b9d4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
   1b9d6:	b1e0      	cbz	r0, 1ba12 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
   1b9d8:	230a      	movs	r3, #10
   1b9da:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b9de:	4a0e      	ldr	r2, [pc, #56]	; (1ba18 <att_find_type_req+0xd4>)
	data.value_len = value_len;
   1b9e0:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b9e4:	ab01      	add	r3, sp, #4
   1b9e6:	4649      	mov	r1, r9
   1b9e8:	4638      	mov	r0, r7
	data.value = value;
   1b9ea:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
   1b9ee:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
   1b9f0:	f00f fba3 	bl	2b13a <bt_gatt_foreach_attr>
	if (data.err) {
   1b9f4:	f89d 4015 	ldrb.w	r4, [sp, #21]
   1b9f8:	b12c      	cbz	r4, 1ba06 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
   1b9fa:	9802      	ldr	r0, [sp, #8]
   1b9fc:	f004 fafe 	bl	1fffc <net_buf_unref>
	if (!req) {
   1ba00:	f89d 3015 	ldrb.w	r3, [sp, #21]
   1ba04:	e7ce      	b.n	1b9a4 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1ba06:	4a05      	ldr	r2, [pc, #20]	; (1ba1c <att_find_type_req+0xd8>)
   1ba08:	9902      	ldr	r1, [sp, #8]
   1ba0a:	4628      	mov	r0, r5
   1ba0c:	f00f fb4c 	bl	2b0a8 <bt_att_chan_send_rsp>
	return 0;
   1ba10:	e7ce      	b.n	1b9b0 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
   1ba12:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
   1ba14:	e7cc      	b.n	1b9b0 <att_find_type_req+0x6c>
   1ba16:	bf00      	nop
   1ba18:	0001ae71 	.word	0x0001ae71
   1ba1c:	0002b35f 	.word	0x0002b35f

0001ba20 <att_find_info_req>:
{
   1ba20:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
   1ba22:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
   1ba24:	881e      	ldrh	r6, [r3, #0]
{
   1ba26:	b085      	sub	sp, #20
   1ba28:	4605      	mov	r5, r0
	if (!start || !end) {
   1ba2a:	b19e      	cbz	r6, 1ba54 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
   1ba2c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
   1ba2e:	b184      	cbz	r4, 1ba52 <att_find_info_req+0x32>
	if (start > end) {
   1ba30:	42a6      	cmp	r6, r4
   1ba32:	d80f      	bhi.n	1ba54 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
   1ba34:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
   1ba36:	2210      	movs	r2, #16
   1ba38:	2100      	movs	r1, #0
   1ba3a:	4668      	mov	r0, sp
   1ba3c:	f011 f903 	bl	2cc46 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
   1ba40:	2200      	movs	r2, #0
   1ba42:	2105      	movs	r1, #5
   1ba44:	4638      	mov	r0, r7
   1ba46:	f7ff fdbf 	bl	1b5c8 <bt_att_create_pdu>
   1ba4a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
   1ba4c:	b958      	cbnz	r0, 1ba66 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
   1ba4e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
   1ba50:	e007      	b.n	1ba62 <att_find_info_req+0x42>
			*err = 0U;
   1ba52:	4626      	mov	r6, r4
	if (!req) {
   1ba54:	2301      	movs	r3, #1
   1ba56:	4632      	mov	r2, r6
   1ba58:	2104      	movs	r1, #4
   1ba5a:	4628      	mov	r0, r5
   1ba5c:	f7ff fc70 	bl	1b340 <send_err_rsp.part.0>
	return 0;
   1ba60:	2000      	movs	r0, #0
}
   1ba62:	b005      	add	sp, #20
   1ba64:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1ba66:	4621      	mov	r1, r4
   1ba68:	4a09      	ldr	r2, [pc, #36]	; (1ba90 <att_find_info_req+0x70>)
	data.chan = chan;
   1ba6a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
   1ba6c:	466b      	mov	r3, sp
   1ba6e:	4630      	mov	r0, r6
   1ba70:	f00f fb63 	bl	2b13a <bt_gatt_foreach_attr>
	if (!data.rsp) {
   1ba74:	9c02      	ldr	r4, [sp, #8]
   1ba76:	b924      	cbnz	r4, 1ba82 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
   1ba78:	9801      	ldr	r0, [sp, #4]
   1ba7a:	f004 fabf 	bl	1fffc <net_buf_unref>
	if (!req) {
   1ba7e:	230a      	movs	r3, #10
   1ba80:	e7e9      	b.n	1ba56 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
   1ba82:	4a04      	ldr	r2, [pc, #16]	; (1ba94 <att_find_info_req+0x74>)
   1ba84:	9901      	ldr	r1, [sp, #4]
   1ba86:	4628      	mov	r0, r5
   1ba88:	f00f fb0e 	bl	2b0a8 <bt_att_chan_send_rsp>
   1ba8c:	e7e8      	b.n	1ba60 <att_find_info_req+0x40>
   1ba8e:	bf00      	nop
   1ba90:	0002b29d 	.word	0x0002b29d
   1ba94:	0002b35f 	.word	0x0002b35f

0001ba98 <att_mtu_req>:
{
   1ba98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   1ba9a:	6803      	ldr	r3, [r0, #0]
{
   1ba9c:	4604      	mov	r4, r0
	struct bt_conn *conn = chan->att->conn;
   1ba9e:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1baa0:	f3bf 8f5b 	dmb	ish
   1baa4:	f8d4 30f8 	ldr.w	r3, [r4, #248]	; 0xf8
   1baa8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   1baac:	f3c3 05c0 	ubfx	r5, r3, #3, #1
   1bab0:	071b      	lsls	r3, r3, #28
   1bab2:	d41e      	bmi.n	1baf2 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
   1bab4:	688b      	ldr	r3, [r1, #8]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   1bab6:	881b      	ldrh	r3, [r3, #0]
   1bab8:	2b16      	cmp	r3, #22
   1baba:	d91c      	bls.n	1baf6 <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   1babc:	2202      	movs	r2, #2
   1babe:	2103      	movs	r1, #3
   1bac0:	f7ff fd82 	bl	1b5c8 <bt_att_create_pdu>
	if (!pdu) {
   1bac4:	4606      	mov	r6, r0
   1bac6:	b1c0      	cbz	r0, 1bafa <att_mtu_req+0x62>
	return net_buf_simple_add(&buf->b, len);
   1bac8:	2102      	movs	r1, #2
   1baca:	3008      	adds	r0, #8
   1bacc:	f004 fbc6 	bl	2025c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1bad0:	2717      	movs	r7, #23
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1bad2:	4a0b      	ldr	r2, [pc, #44]	; (1bb00 <att_mtu_req+0x68>)
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   1bad4:	7007      	strb	r7, [r0, #0]
   1bad6:	7045      	strb	r5, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   1bad8:	4631      	mov	r1, r6
   1bada:	4620      	mov	r0, r4
   1badc:	f00f fae4 	bl	2b0a8 <bt_att_chan_send_rsp>
	att_chan_mtu_updated(chan);
   1bae0:	4620      	mov	r0, r4
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   1bae2:	f8a4 707a 	strh.w	r7, [r4, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   1bae6:	f8a4 708a 	strh.w	r7, [r4, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   1baea:	f00f faeb 	bl	2b0c4 <att_chan_mtu_updated>
	return 0;
   1baee:	4628      	mov	r0, r5
}
   1baf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   1baf2:	2006      	movs	r0, #6
   1baf4:	e7fc      	b.n	1baf0 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
   1baf6:	2004      	movs	r0, #4
   1baf8:	e7fa      	b.n	1baf0 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
   1bafa:	200e      	movs	r0, #14
   1bafc:	e7f8      	b.n	1baf0 <att_mtu_req+0x58>
   1bafe:	bf00      	nop
   1bb00:	0002b35f 	.word	0x0002b35f

0001bb04 <bt_att_req_alloc>:
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
	}
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
   1bb04:	b513      	push	{r0, r1, r4, lr}
   1bb06:	4602      	mov	r2, r0
   1bb08:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1bb0a:	4808      	ldr	r0, [pc, #32]	; (1bb2c <bt_att_req_alloc+0x28>)
   1bb0c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
   1bb0e:	2400      	movs	r4, #0
   1bb10:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
   1bb12:	f008 f827 	bl	23b64 <k_mem_slab_alloc>
   1bb16:	4601      	mov	r1, r0
   1bb18:	b930      	cbnz	r0, 1bb28 <bt_att_req_alloc+0x24>
   1bb1a:	9801      	ldr	r0, [sp, #4]
   1bb1c:	2210      	movs	r2, #16
   1bb1e:	f011 f892 	bl	2cc46 <memset>

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));

	return req;
   1bb22:	9801      	ldr	r0, [sp, #4]
}
   1bb24:	b002      	add	sp, #8
   1bb26:	bd10      	pop	{r4, pc}
		return NULL;
   1bb28:	4620      	mov	r0, r4
   1bb2a:	e7fb      	b.n	1bb24 <bt_att_req_alloc+0x20>
   1bb2c:	200007e8 	.word	0x200007e8

0001bb30 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
   1bb30:	b507      	push	{r0, r1, r2, lr}
   1bb32:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
   1bb34:	6880      	ldr	r0, [r0, #8]
   1bb36:	b120      	cbz	r0, 1bb42 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
   1bb38:	f004 fa60 	bl	1fffc <net_buf_unref>
		req->buf = NULL;
   1bb3c:	9b01      	ldr	r3, [sp, #4]
   1bb3e:	2200      	movs	r2, #0
   1bb40:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
   1bb42:	4803      	ldr	r0, [pc, #12]	; (1bb50 <bt_att_req_free+0x20>)
   1bb44:	a901      	add	r1, sp, #4
   1bb46:	f008 f879 	bl	23c3c <k_mem_slab_free>
}
   1bb4a:	b003      	add	sp, #12
   1bb4c:	f85d fb04 	ldr.w	pc, [sp], #4
   1bb50:	200007e8 	.word	0x200007e8

0001bb54 <att_handle_rsp>:
{
   1bb54:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb58:	4605      	mov	r5, r0
	k_work_cancel_delayable(&chan->timeout_work);
   1bb5a:	f500 7090 	add.w	r0, r0, #288	; 0x120
{
   1bb5e:	460f      	mov	r7, r1
   1bb60:	4690      	mov	r8, r2
   1bb62:	461e      	mov	r6, r3
	k_work_cancel_delayable(&chan->timeout_work);
   1bb64:	f009 fdc0 	bl	256e8 <k_work_cancel_delayable>
	if (!chan->req) {
   1bb68:	f8d5 a0fc 	ldr.w	sl, [r5, #252]	; 0xfc
   1bb6c:	f1ba 0f00 	cmp.w	sl, #0
   1bb70:	d11e      	bne.n	1bbb0 <att_handle_rsp+0x5c>
		BT_WARN("No pending ATT request");
   1bb72:	481a      	ldr	r0, [pc, #104]	; (1bbdc <att_handle_rsp+0x88>)
   1bb74:	6804      	ldr	r4, [r0, #0]
   1bb76:	f014 0406 	ands.w	r4, r4, #6
   1bb7a:	d009      	beq.n	1bb90 <att_handle_rsp+0x3c>
   1bb7c:	4918      	ldr	r1, [pc, #96]	; (1bbe0 <att_handle_rsp+0x8c>)
   1bb7e:	1a40      	subs	r0, r0, r1
   1bb80:	0880      	lsrs	r0, r0, #2
   1bb82:	0180      	lsls	r0, r0, #6
   1bb84:	f040 0102 	orr.w	r1, r0, #2
   1bb88:	4816      	ldr	r0, [pc, #88]	; (1bbe4 <att_handle_rsp+0x90>)
   1bb8a:	f00d fba8 	bl	292de <log_0>
	bt_att_func_t func = NULL;
   1bb8e:	4654      	mov	r4, sl
	att_req_send_process(chan->att);
   1bb90:	6828      	ldr	r0, [r5, #0]
   1bb92:	f00f fc16 	bl	2b3c2 <att_req_send_process>
	if (func) {
   1bb96:	b13c      	cbz	r4, 1bba8 <att_handle_rsp+0x54>
		func(chan->att->conn, err, pdu, len, params);
   1bb98:	6828      	ldr	r0, [r5, #0]
   1bb9a:	f8cd 9000 	str.w	r9, [sp]
   1bb9e:	6800      	ldr	r0, [r0, #0]
   1bba0:	4643      	mov	r3, r8
   1bba2:	463a      	mov	r2, r7
   1bba4:	4631      	mov	r1, r6
   1bba6:	47a0      	blx	r4
}
   1bba8:	2000      	movs	r0, #0
   1bbaa:	b003      	add	sp, #12
   1bbac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->req == &cancel) {
   1bbb0:	4b0d      	ldr	r3, [pc, #52]	; (1bbe8 <att_handle_rsp+0x94>)
   1bbb2:	459a      	cmp	sl, r3
   1bbb4:	f04f 0b00 	mov.w	fp, #0
   1bbb8:	d103      	bne.n	1bbc2 <att_handle_rsp+0x6e>
		chan->req = NULL;
   1bbba:	f8c5 b0fc 	str.w	fp, [r5, #252]	; 0xfc
	bt_att_func_t func = NULL;
   1bbbe:	465c      	mov	r4, fp
		goto process;
   1bbc0:	e7e6      	b.n	1bb90 <att_handle_rsp+0x3c>
	func = chan->req->func;
   1bbc2:	f8da 4004 	ldr.w	r4, [sl, #4]
	chan->req->func = NULL;
   1bbc6:	f8ca b004 	str.w	fp, [sl, #4]
	bt_att_req_free(chan->req);
   1bbca:	4650      	mov	r0, sl
	params = chan->req->user_data;
   1bbcc:	f8da 900c 	ldr.w	r9, [sl, #12]
	bt_att_req_free(chan->req);
   1bbd0:	f7ff ffae 	bl	1bb30 <bt_att_req_free>
	chan->req = NULL;
   1bbd4:	f8c5 b0fc 	str.w	fp, [r5, #252]	; 0xfc
   1bbd8:	e7da      	b.n	1bb90 <att_handle_rsp+0x3c>
   1bbda:	bf00      	nop
   1bbdc:	20000740 	.word	0x20000740
   1bbe0:	20000740 	.word	0x20000740
   1bbe4:	00031d06 	.word	0x00031d06
   1bbe8:	20002774 	.word	0x20002774

0001bbec <att_error_rsp>:
	if (!chan->req || chan->req == &cancel) {
   1bbec:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   1bbf0:	b143      	cbz	r3, 1bc04 <att_error_rsp+0x18>
   1bbf2:	4a05      	ldr	r2, [pc, #20]	; (1bc08 <att_error_rsp+0x1c>)
   1bbf4:	4293      	cmp	r3, r2
   1bbf6:	d005      	beq.n	1bc04 <att_error_rsp+0x18>
	err = rsp->error;
   1bbf8:	688b      	ldr	r3, [r1, #8]
   1bbfa:	78db      	ldrb	r3, [r3, #3]
	return att_handle_rsp(chan, NULL, 0, err);
   1bbfc:	2200      	movs	r2, #0
   1bbfe:	4611      	mov	r1, r2
   1bc00:	f7ff bfa8 	b.w	1bb54 <att_handle_rsp>
		err = BT_ATT_ERR_UNLIKELY;
   1bc04:	230e      	movs	r3, #14
   1bc06:	e7f9      	b.n	1bbfc <att_error_rsp+0x10>
   1bc08:	20002774 	.word	0x20002774

0001bc0c <bt_att_disconnected>:
{
   1bc0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
   1bc0e:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1bc12:	b085      	sub	sp, #20
   1bc14:	4604      	mov	r4, r0
	if (!att_chan->att) {
   1bc16:	b38d      	cbz	r5, 1bc7c <bt_att_disconnected+0x70>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1bc18:	f500 71a6 	add.w	r1, r0, #332	; 0x14c
   1bc1c:	f105 0028 	add.w	r0, r5, #40	; 0x28
   1bc20:	f00f f98b 	bl	2af3a <sys_slist_find_and_remove>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1bc24:	f1a4 0608 	sub.w	r6, r4, #8
   1bc28:	f104 07f8 	add.w	r7, r4, #248	; 0xf8
   1bc2c:	2200      	movs	r2, #0
   1bc2e:	2300      	movs	r3, #0
   1bc30:	4638      	mov	r0, r7
   1bc32:	f004 f951 	bl	1fed8 <net_buf_get>
   1bc36:	4602      	mov	r2, r0
   1bc38:	bb10      	cbnz	r0, 1bc80 <bt_att_disconnected+0x74>
	if (chan->req) {
   1bc3a:	f8d4 30f4 	ldr.w	r3, [r4, #244]	; 0xf4
   1bc3e:	b123      	cbz	r3, 1bc4a <bt_att_disconnected+0x3e>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1bc40:	4601      	mov	r1, r0
   1bc42:	230e      	movs	r3, #14
   1bc44:	4630      	mov	r0, r6
   1bc46:	f7ff ff85 	bl	1bb54 <att_handle_rsp>
	chan->att = NULL;
   1bc4a:	2300      	movs	r3, #0
   1bc4c:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
   1bc50:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1bc52:	b99b      	cbnz	r3, 1bc7c <bt_att_disconnected+0x70>
	att_reset(att);
   1bc54:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
   1bc56:	9803      	ldr	r0, [sp, #12]
   1bc58:	2200      	movs	r2, #0
   1bc5a:	2300      	movs	r3, #0
   1bc5c:	300c      	adds	r0, #12
   1bc5e:	f004 f93b 	bl	1fed8 <net_buf_get>
   1bc62:	b980      	cbnz	r0, 1bc86 <bt_att_disconnected+0x7a>
	att->conn = NULL;
   1bc64:	9a03      	ldr	r2, [sp, #12]
   1bc66:	6010      	str	r0, [r2, #0]
	while (!sys_slist_is_empty(&att->reqs)) {
   1bc68:	9b03      	ldr	r3, [sp, #12]
Z_GENLIST_IS_EMPTY(slist)
   1bc6a:	685d      	ldr	r5, [r3, #4]
   1bc6c:	b975      	cbnz	r5, 1bc8c <bt_att_disconnected+0x80>
	k_mem_slab_free(&att_slab, (void **)&att);
   1bc6e:	4811      	ldr	r0, [pc, #68]	; (1bcb4 <bt_att_disconnected+0xa8>)
   1bc70:	a903      	add	r1, sp, #12
   1bc72:	f007 ffe3 	bl	23c3c <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
   1bc76:	6820      	ldr	r0, [r4, #0]
   1bc78:	f002 f938 	bl	1deec <bt_gatt_disconnected>
}
   1bc7c:	b005      	add	sp, #20
   1bc7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(buf);
   1bc80:	f004 f9bc 	bl	1fffc <net_buf_unref>
   1bc84:	e7d2      	b.n	1bc2c <bt_att_disconnected+0x20>
		net_buf_unref(buf);
   1bc86:	f004 f9b9 	bl	1fffc <net_buf_unref>
   1bc8a:	e7e4      	b.n	1bc56 <bt_att_disconnected+0x4a>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bc8c:	6899      	ldr	r1, [r3, #8]
		if (req->func) {
   1bc8e:	686e      	ldr	r6, [r5, #4]
   1bc90:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   1bc92:	605a      	str	r2, [r3, #4]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1bc94:	428d      	cmp	r5, r1
	list->tail = node;
   1bc96:	bf08      	it	eq
   1bc98:	609a      	streq	r2, [r3, #8]
   1bc9a:	b136      	cbz	r6, 1bcaa <bt_att_disconnected+0x9e>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
   1bc9c:	68eb      	ldr	r3, [r5, #12]
   1bc9e:	9300      	str	r3, [sp, #0]
   1bca0:	2300      	movs	r3, #0
   1bca2:	461a      	mov	r2, r3
   1bca4:	210e      	movs	r1, #14
   1bca6:	4618      	mov	r0, r3
   1bca8:	47b0      	blx	r6
		bt_att_req_free(req);
   1bcaa:	4628      	mov	r0, r5
   1bcac:	f7ff ff40 	bl	1bb30 <bt_att_req_free>
   1bcb0:	e7da      	b.n	1bc68 <bt_att_disconnected+0x5c>
   1bcb2:	bf00      	nop
   1bcb4:	200007a8 	.word	0x200007a8

0001bcb8 <att_timeout>:
	BT_ERR("ATT Timeout");
   1bcb8:	490a      	ldr	r1, [pc, #40]	; (1bce4 <att_timeout+0x2c>)
   1bcba:	680b      	ldr	r3, [r1, #0]
   1bcbc:	075b      	lsls	r3, r3, #29
{
   1bcbe:	b510      	push	{r4, lr}
   1bcc0:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
   1bcc2:	d008      	beq.n	1bcd6 <att_timeout+0x1e>
   1bcc4:	4b08      	ldr	r3, [pc, #32]	; (1bce8 <att_timeout+0x30>)
   1bcc6:	4809      	ldr	r0, [pc, #36]	; (1bcec <att_timeout+0x34>)
   1bcc8:	1ac9      	subs	r1, r1, r3
   1bcca:	0889      	lsrs	r1, r1, #2
   1bccc:	0189      	lsls	r1, r1, #6
   1bcce:	f041 0101 	orr.w	r1, r1, #1
   1bcd2:	f00d fb04 	bl	292de <log_0>
	bt_att_disconnected(&chan->chan.chan);
   1bcd6:	f5a4 708c 	sub.w	r0, r4, #280	; 0x118
}
   1bcda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
   1bcde:	f7ff bf95 	b.w	1bc0c <bt_att_disconnected>
   1bce2:	bf00      	nop
   1bce4:	20000740 	.word	0x20000740
   1bce8:	20000740 	.word	0x20000740
   1bcec:	00031d1d 	.word	0x00031d1d

0001bcf0 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1bcf0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1bcf4:	460c      	mov	r4, r1
   1bcf6:	4617      	mov	r7, r2
   1bcf8:	4698      	mov	r8, r3
	struct bt_att *att;

	__ASSERT_NO_MSG(conn);
   1bcfa:	4605      	mov	r5, r0
   1bcfc:	b958      	cbnz	r0, 1bd16 <bt_att_send+0x26>
   1bcfe:	492f      	ldr	r1, [pc, #188]	; (1bdbc <bt_att_send+0xcc>)
   1bd00:	482f      	ldr	r0, [pc, #188]	; (1bdc0 <bt_att_send+0xd0>)
   1bd02:	4a30      	ldr	r2, [pc, #192]	; (1bdc4 <bt_att_send+0xd4>)
   1bd04:	f640 434a 	movw	r3, #3146	; 0xc4a
   1bd08:	f00c ff47 	bl	28b9a <printk>
   1bd0c:	482d      	ldr	r0, [pc, #180]	; (1bdc4 <bt_att_send+0xd4>)
   1bd0e:	f640 414a 	movw	r1, #3146	; 0xc4a
   1bd12:	f00d f983 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1bd16:	b95c      	cbnz	r4, 1bd30 <bt_att_send+0x40>
   1bd18:	492b      	ldr	r1, [pc, #172]	; (1bdc8 <bt_att_send+0xd8>)
   1bd1a:	4829      	ldr	r0, [pc, #164]	; (1bdc0 <bt_att_send+0xd0>)
   1bd1c:	4a29      	ldr	r2, [pc, #164]	; (1bdc4 <bt_att_send+0xd4>)
   1bd1e:	f640 434b 	movw	r3, #3147	; 0xc4b
   1bd22:	f00c ff3a 	bl	28b9a <printk>
   1bd26:	4827      	ldr	r0, [pc, #156]	; (1bdc4 <bt_att_send+0xd4>)
   1bd28:	f640 414b 	movw	r1, #3147	; 0xc4b
   1bd2c:	f00d f976 	bl	2901c <assert_post_action>

	att = att_get(conn);
   1bd30:	4628      	mov	r0, r5
   1bd32:	f7ff f957 	bl	1afe4 <att_get>
	if (!att) {
   1bd36:	4606      	mov	r6, r0
   1bd38:	b938      	cbnz	r0, 1bd4a <bt_att_send+0x5a>
		net_buf_unref(buf);
   1bd3a:	4620      	mov	r0, r4
   1bd3c:	f004 f95e 	bl	1fffc <net_buf_unref>
		return -ENOTCONN;
   1bd40:	f06f 007f 	mvn.w	r0, #127	; 0x7f

	net_buf_put(&att->tx_queue, buf);
	att_send_process(att);

	return 0;
}
   1bd44:	b002      	add	sp, #8
   1bd46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1bd4a:	b147      	cbz	r7, 1bd5e <bt_att_send+0x6e>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1bd4c:	f8cd 8000 	str.w	r8, [sp]
   1bd50:	463b      	mov	r3, r7
   1bd52:	4622      	mov	r2, r4
   1bd54:	2104      	movs	r1, #4
   1bd56:	4628      	mov	r0, r5
   1bd58:	f00f f88d 	bl	2ae76 <bt_l2cap_send_cb>
   1bd5c:	e7f2      	b.n	1bd44 <bt_att_send+0x54>
	net_buf_put(&att->tx_queue, buf);
   1bd5e:	f100 070c 	add.w	r7, r0, #12
   1bd62:	4621      	mov	r1, r4
   1bd64:	4638      	mov	r0, r7
   1bd66:	f004 f915 	bl	1ff94 <net_buf_put>
	buf = net_buf_get(&att->tx_queue, K_NO_WAIT);
   1bd6a:	2200      	movs	r2, #0
   1bd6c:	2300      	movs	r3, #0
   1bd6e:	4638      	mov	r0, r7
   1bd70:	f004 f8b2 	bl	1fed8 <net_buf_get>
	if (!buf) {
   1bd74:	4605      	mov	r5, r0
   1bd76:	b908      	cbnz	r0, 1bd7c <bt_att_send+0x8c>
	return 0;
   1bd78:	2000      	movs	r0, #0
   1bd7a:	e7e3      	b.n	1bd44 <bt_att_send+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bd7c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1bd7e:	b1c3      	cbz	r3, 1bdb2 <bt_att_send+0xc2>
   1bd80:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   1bd84:	d015      	beq.n	1bdb2 <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bd86:	681c      	ldr	r4, [r3, #0]
   1bd88:	b10c      	cbz	r4, 1bd8e <bt_att_send+0x9e>
   1bd8a:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
	return chan_send(chan, buf, cb);
   1bd8e:	2200      	movs	r2, #0
   1bd90:	4629      	mov	r1, r5
   1bd92:	f7fe ff07 	bl	1aba4 <chan_send>
		if (err >= 0) {
   1bd96:	2800      	cmp	r0, #0
   1bd98:	daee      	bge.n	1bd78 <bt_att_send+0x88>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1bd9a:	b154      	cbz	r4, 1bdb2 <bt_att_send+0xc2>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1bd9c:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   1bda0:	d004      	beq.n	1bdac <bt_att_send+0xbc>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1bda2:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
   1bda6:	b10b      	cbz	r3, 1bdac <bt_att_send+0xbc>
   1bda8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   1bdac:	4620      	mov	r0, r4
   1bdae:	461c      	mov	r4, r3
   1bdb0:	e7ed      	b.n	1bd8e <bt_att_send+0x9e>
		k_queue_prepend(&att->tx_queue._queue, buf);
   1bdb2:	4629      	mov	r1, r5
   1bdb4:	4638      	mov	r0, r7
   1bdb6:	f010 fdc0 	bl	2c93a <k_queue_prepend>
   1bdba:	e7dd      	b.n	1bd78 <bt_att_send+0x88>
   1bdbc:	000329ff 	.word	0x000329ff
   1bdc0:	0002e93e 	.word	0x0002e93e
   1bdc4:	00031b02 	.word	0x00031b02
   1bdc8:	00030ef1 	.word	0x00030ef1

0001bdcc <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1bdcc:	b538      	push	{r3, r4, r5, lr}
   1bdce:	460c      	mov	r4, r1
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
   1bdd0:	4605      	mov	r5, r0
   1bdd2:	b958      	cbnz	r0, 1bdec <bt_att_req_send+0x20>
   1bdd4:	4916      	ldr	r1, [pc, #88]	; (1be30 <bt_att_req_send+0x64>)
   1bdd6:	4817      	ldr	r0, [pc, #92]	; (1be34 <bt_att_req_send+0x68>)
   1bdd8:	4a17      	ldr	r2, [pc, #92]	; (1be38 <bt_att_req_send+0x6c>)
   1bdda:	f640 4367 	movw	r3, #3175	; 0xc67
   1bdde:	f00c fedc 	bl	28b9a <printk>
   1bde2:	4815      	ldr	r0, [pc, #84]	; (1be38 <bt_att_req_send+0x6c>)
   1bde4:	f640 4167 	movw	r1, #3175	; 0xc67
   1bde8:	f00d f918 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(req);
   1bdec:	b95c      	cbnz	r4, 1be06 <bt_att_req_send+0x3a>
   1bdee:	4913      	ldr	r1, [pc, #76]	; (1be3c <bt_att_req_send+0x70>)
   1bdf0:	4810      	ldr	r0, [pc, #64]	; (1be34 <bt_att_req_send+0x68>)
   1bdf2:	4a11      	ldr	r2, [pc, #68]	; (1be38 <bt_att_req_send+0x6c>)
   1bdf4:	f640 4368 	movw	r3, #3176	; 0xc68
   1bdf8:	f00c fecf 	bl	28b9a <printk>
   1bdfc:	480e      	ldr	r0, [pc, #56]	; (1be38 <bt_att_req_send+0x6c>)
   1bdfe:	f640 4168 	movw	r1, #3176	; 0xc68
   1be02:	f00d f90b 	bl	2901c <assert_post_action>

	att = att_get(conn);
   1be06:	4628      	mov	r0, r5
   1be08:	f7ff f8ec 	bl	1afe4 <att_get>
	if (!att) {
   1be0c:	b160      	cbz	r0, 1be28 <bt_att_req_send+0x5c>
	parent->next = child;
   1be0e:	2300      	movs	r3, #0
   1be10:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1be12:	6883      	ldr	r3, [r0, #8]
   1be14:	b92b      	cbnz	r3, 1be22 <bt_att_req_send+0x56>
	list->head = node;
   1be16:	e9c0 4401 	strd	r4, r4, [r0, #4]
		return -ENOTCONN;
	}

	sys_slist_append(&att->reqs, &req->node);
	att_req_send_process(att);
   1be1a:	f00f fad2 	bl	2b3c2 <att_req_send_process>

	return 0;
   1be1e:	2000      	movs	r0, #0
}
   1be20:	bd38      	pop	{r3, r4, r5, pc}
	parent->next = child;
   1be22:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1be24:	6084      	str	r4, [r0, #8]
}
   1be26:	e7f8      	b.n	1be1a <bt_att_req_send+0x4e>
		return -ENOTCONN;
   1be28:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1be2c:	e7f8      	b.n	1be20 <bt_att_req_send+0x54>
   1be2e:	bf00      	nop
   1be30:	000329ff 	.word	0x000329ff
   1be34:	0002e93e 	.word	0x0002e93e
   1be38:	00031b02 	.word	0x00031b02
   1be3c:	00031a74 	.word	0x00031a74

0001be40 <bt_att_req_cancel>:

	return true;
}

void bt_att_req_cancel(struct bt_conn *conn, struct bt_att_req *req)
{
   1be40:	b510      	push	{r4, lr}
   1be42:	460c      	mov	r4, r1
	struct bt_att *att;
	struct bt_att_chan *chan, *tmp;

	BT_DBG("req %p", req);

	if (!conn || !req) {
   1be44:	b348      	cbz	r0, 1be9a <bt_att_req_cancel+0x5a>
   1be46:	b341      	cbz	r1, 1be9a <bt_att_req_cancel+0x5a>
		return;
	}

	att = att_get(conn);
   1be48:	f7ff f8cc 	bl	1afe4 <att_get>
	if (!att) {
   1be4c:	b328      	cbz	r0, 1be9a <bt_att_req_cancel+0x5a>
		return;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1be4e:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1be50:	b15b      	cbz	r3, 1be6a <bt_att_req_cancel+0x2a>
   1be52:	f5b3 71aa 	subs.w	r1, r3, #340	; 0x154
   1be56:	d008      	beq.n	1be6a <bt_att_req_cancel+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1be58:	681b      	ldr	r3, [r3, #0]
   1be5a:	b10b      	cbz	r3, 1be60 <bt_att_req_cancel+0x20>
   1be5c:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
	if (chan->req != req) {
   1be60:	f8d1 20fc 	ldr.w	r2, [r1, #252]	; 0xfc
   1be64:	4294      	cmp	r4, r2
   1be66:	d005      	beq.n	1be74 <bt_att_req_cancel+0x34>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1be68:	b963      	cbnz	r3, 1be84 <bt_att_req_cancel+0x44>
			return;
		}
	}

	/* Remove request from the list */
	sys_slist_find_and_remove(&att->reqs, &req->node);
   1be6a:	4621      	mov	r1, r4
   1be6c:	3004      	adds	r0, #4
   1be6e:	f00f f864 	bl	2af3a <sys_slist_find_and_remove>
   1be72:	e002      	b.n	1be7a <bt_att_req_cancel+0x3a>
	chan->req = &cancel;
   1be74:	4b09      	ldr	r3, [pc, #36]	; (1be9c <bt_att_req_cancel+0x5c>)
   1be76:	f8c1 30fc 	str.w	r3, [r1, #252]	; 0xfc

	bt_att_req_free(req);
   1be7a:	4620      	mov	r0, r4
}
   1be7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1be80:	f7ff be56 	b.w	1bb30 <bt_att_req_free>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1be84:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   1be88:	d004      	beq.n	1be94 <bt_att_req_cancel+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1be8a:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1be8e:	b10a      	cbz	r2, 1be94 <bt_att_req_cancel+0x54>
   1be90:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   1be94:	4619      	mov	r1, r3
   1be96:	4613      	mov	r3, r2
   1be98:	e7e2      	b.n	1be60 <bt_att_req_cancel+0x20>
}
   1be9a:	bd10      	pop	{r4, pc}
   1be9c:	20002774 	.word	0x20002774

0001bea0 <find_cf_cfg>:
	atomic_set(cfg->flags, 0);
}

#if defined(CONFIG_BT_GATT_CACHING)
static struct gatt_cf_cfg *find_cf_cfg(struct bt_conn *conn)
{
   1bea0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1bea2:	4d0d      	ldr	r5, [pc, #52]	; (1bed8 <find_cf_cfg+0x38>)
	int i;

	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
		struct gatt_cf_cfg *cfg = &cf_cfg[i];

		if (!conn) {
   1bea4:	4604      	mov	r4, r0
   1bea6:	b960      	cbnz	r0, 1bec2 <find_cf_cfg+0x22>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1bea8:	9000      	str	r0, [sp, #0]
   1beaa:	4669      	mov	r1, sp
   1beac:	f8cd 0003 	str.w	r0, [sp, #3]
   1beb0:	1c68      	adds	r0, r5, #1
   1beb2:	f00f fc36 	bl	2b722 <bt_addr_le_cmp>
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
   1beb6:	2800      	cmp	r0, #0
   1beb8:	bf08      	it	eq
   1beba:	462c      	moveq	r4, r5
			return cfg;
		}
	}

	return NULL;
}
   1bebc:	4620      	mov	r0, r4
   1bebe:	b003      	add	sp, #12
   1bec0:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1bec2:	462a      	mov	r2, r5
   1bec4:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bec8:	f00e fed8 	bl	2ac7c <bt_conn_is_peer_addr_le>
   1becc:	2800      	cmp	r0, #0
	return NULL;
   1bece:	bf14      	ite	ne
   1bed0:	462c      	movne	r4, r5
   1bed2:	2400      	moveq	r4, #0
   1bed4:	e7f2      	b.n	1bebc <find_cf_cfg+0x1c>
   1bed6:	bf00      	nop
   1bed8:	2000278c 	.word	0x2000278c

0001bedc <find_sc_cfg>:
{
   1bedc:	b510      	push	{r4, lr}
		if (id == sc_cfg[i].id &&
   1bede:	4c06      	ldr	r4, [pc, #24]	; (1bef8 <find_sc_cfg+0x1c>)
   1bee0:	7823      	ldrb	r3, [r4, #0]
   1bee2:	4283      	cmp	r3, r0
   1bee4:	d103      	bne.n	1beee <find_sc_cfg+0x12>
		    !bt_addr_le_cmp(&sc_cfg[i].peer, addr)) {
   1bee6:	1c60      	adds	r0, r4, #1
   1bee8:	f00f fc1b 	bl	2b722 <bt_addr_le_cmp>
		if (id == sc_cfg[i].id &&
   1beec:	b108      	cbz	r0, 1bef2 <find_sc_cfg+0x16>
	return NULL;
   1beee:	2000      	movs	r0, #0
}
   1bef0:	bd10      	pop	{r4, pc}
			return &sc_cfg[i];
   1bef2:	4620      	mov	r0, r4
   1bef4:	e7fc      	b.n	1bef0 <find_sc_cfg+0x14>
   1bef6:	bf00      	nop
   1bef8:	20002a28 	.word	0x20002a28

0001befc <gatt_sub_find>:
	}
}

#if defined(CONFIG_BT_GATT_CLIENT)
static struct gatt_sub *gatt_sub_find(struct bt_conn *conn)
{
   1befc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1befe:	4d0d      	ldr	r5, [pc, #52]	; (1bf34 <gatt_sub_find+0x38>)
	for (int i = 0; i < ARRAY_SIZE(subscriptions); i++) {
		struct gatt_sub *sub = &subscriptions[i];

		if (!conn) {
   1bf00:	4604      	mov	r4, r0
   1bf02:	b960      	cbnz	r0, 1bf1e <gatt_sub_find+0x22>
			if (!bt_addr_le_cmp(&sub->peer, BT_ADDR_LE_ANY)) {
   1bf04:	9000      	str	r0, [sp, #0]
   1bf06:	4669      	mov	r1, sp
   1bf08:	f8cd 0003 	str.w	r0, [sp, #3]
   1bf0c:	1c68      	adds	r0, r5, #1
   1bf0e:	f00f fc08 	bl	2b722 <bt_addr_le_cmp>
		struct gatt_sub *sub = &subscriptions[i];
   1bf12:	2800      	cmp	r0, #0
   1bf14:	bf08      	it	eq
   1bf16:	462c      	moveq	r4, r5
			return sub;
		}
	}

	return NULL;
}
   1bf18:	4620      	mov	r0, r4
   1bf1a:	b003      	add	sp, #12
   1bf1c:	bd30      	pop	{r4, r5, pc}
		} else if (bt_conn_is_peer_addr_le(conn, sub->id, &sub->peer)) {
   1bf1e:	462a      	mov	r2, r5
   1bf20:	f812 1b01 	ldrb.w	r1, [r2], #1
   1bf24:	f00e feaa 	bl	2ac7c <bt_conn_is_peer_addr_le>
   1bf28:	2800      	cmp	r0, #0
	return NULL;
   1bf2a:	bf14      	ite	ne
   1bf2c:	462c      	movne	r4, r5
   1bf2e:	2400      	moveq	r4, #0
   1bf30:	e7f2      	b.n	1bf18 <gatt_sub_find+0x1c>
   1bf32:	bf00      	nop
   1bf34:	200027bc 	.word	0x200027bc

0001bf38 <bt_gatt_attr_write_ccc>:
{
   1bf38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1bf3c:	461f      	mov	r7, r3
   1bf3e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1bf42:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1bf46:	4604      	mov	r4, r0
   1bf48:	4688      	mov	r8, r1
	if (offset) {
   1bf4a:	2b00      	cmp	r3, #0
   1bf4c:	d155      	bne.n	1bffa <bt_gatt_attr_write_ccc+0xc2>
	if (!len || len > sizeof(uint16_t)) {
   1bf4e:	1e7b      	subs	r3, r7, #1
   1bf50:	2b01      	cmp	r3, #1
   1bf52:	d855      	bhi.n	1c000 <bt_gatt_attr_write_ccc+0xc8>
	if (len < sizeof(uint16_t)) {
   1bf54:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1bf56:	7816      	ldrb	r6, [r2, #0]
   1bf58:	bf18      	it	ne
   1bf5a:	7852      	ldrbne	r2, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1bf5c:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1bf5e:	bf0c      	ite	eq
   1bf60:	b2b6      	uxtheq	r6, r6
   1bf62:	ea46 2602 	orrne.w	r6, r6, r2, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1bf66:	f00f fbdf 	bl	2b728 <find_ccc_cfg>
	if (!cfg) {
   1bf6a:	4605      	mov	r5, r0
   1bf6c:	bb08      	cbnz	r0, 1bfb2 <bt_gatt_attr_write_ccc+0x7a>
		if (!value) {
   1bf6e:	b91e      	cbnz	r6, 1bf78 <bt_gatt_attr_write_ccc+0x40>
			return len;
   1bf70:	4638      	mov	r0, r7
}
   1bf72:	b003      	add	sp, #12
   1bf74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1bf78:	4649      	mov	r1, r9
   1bf7a:	f00f fbd5 	bl	2b728 <find_ccc_cfg>
		if (!cfg) {
   1bf7e:	4605      	mov	r5, r0
   1bf80:	b980      	cbnz	r0, 1bfa4 <bt_gatt_attr_write_ccc+0x6c>
			BT_WARN("No space to store CCC cfg");
   1bf82:	4921      	ldr	r1, [pc, #132]	; (1c008 <bt_gatt_attr_write_ccc+0xd0>)
   1bf84:	680b      	ldr	r3, [r1, #0]
   1bf86:	f013 0f06 	tst.w	r3, #6
   1bf8a:	d008      	beq.n	1bf9e <bt_gatt_attr_write_ccc+0x66>
   1bf8c:	4b1f      	ldr	r3, [pc, #124]	; (1c00c <bt_gatt_attr_write_ccc+0xd4>)
   1bf8e:	4820      	ldr	r0, [pc, #128]	; (1c010 <bt_gatt_attr_write_ccc+0xd8>)
   1bf90:	1ac9      	subs	r1, r1, r3
   1bf92:	0889      	lsrs	r1, r1, #2
   1bf94:	0189      	lsls	r1, r1, #6
   1bf96:	f041 0102 	orr.w	r1, r1, #2
   1bf9a:	f00d f9a0 	bl	292de <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1bf9e:	f06f 0010 	mvn.w	r0, #16
   1bfa2:	e7e6      	b.n	1bf72 <bt_gatt_attr_write_ccc+0x3a>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1bfa4:	f104 0190 	add.w	r1, r4, #144	; 0x90
   1bfa8:	3001      	adds	r0, #1
   1bfaa:	f00f fcc1 	bl	2b930 <bt_addr_le_copy>
		cfg->id = conn->id;
   1bfae:	7a23      	ldrb	r3, [r4, #8]
   1bfb0:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
   1bfb2:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1bfb6:	b9a3      	cbnz	r3, 1bfe2 <bt_gatt_attr_write_ccc+0xaa>
	if (cfg->value != ccc->value) {
   1bfb8:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1bfbc:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
   1bfbe:	42b3      	cmp	r3, r6
   1bfc0:	d003      	beq.n	1bfca <bt_gatt_attr_write_ccc+0x92>
		gatt_ccc_changed(attr, ccc);
   1bfc2:	4649      	mov	r1, r9
   1bfc4:	4640      	mov	r0, r8
   1bfc6:	f00f fb2f 	bl	2b628 <gatt_ccc_changed>
	if (!value) {
   1bfca:	2e00      	cmp	r6, #0
   1bfcc:	d1d0      	bne.n	1bf70 <bt_gatt_attr_write_ccc+0x38>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1bfce:	4669      	mov	r1, sp
   1bfd0:	1c68      	adds	r0, r5, #1
   1bfd2:	9600      	str	r6, [sp, #0]
   1bfd4:	f8cd 6003 	str.w	r6, [sp, #3]
   1bfd8:	f00f fcaa 	bl	2b930 <bt_addr_le_copy>
	cfg->id = 0U;
   1bfdc:	702e      	strb	r6, [r5, #0]
	cfg->value = 0U;
   1bfde:	812e      	strh	r6, [r5, #8]
}
   1bfe0:	e7c6      	b.n	1bf70 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1bfe2:	4632      	mov	r2, r6
   1bfe4:	4641      	mov	r1, r8
   1bfe6:	4620      	mov	r0, r4
   1bfe8:	4798      	blx	r3
		if (write < 0) {
   1bfea:	2800      	cmp	r0, #0
   1bfec:	dbc1      	blt.n	1bf72 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1bfee:	1e44      	subs	r4, r0, #1
   1bff0:	2c01      	cmp	r4, #1
   1bff2:	d9e1      	bls.n	1bfb8 <bt_gatt_attr_write_ccc+0x80>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1bff4:	f06f 000d 	mvn.w	r0, #13
   1bff8:	e7bb      	b.n	1bf72 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1bffa:	f06f 0006 	mvn.w	r0, #6
   1bffe:	e7b8      	b.n	1bf72 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c000:	f06f 000c 	mvn.w	r0, #12
   1c004:	e7b5      	b.n	1bf72 <bt_gatt_attr_write_ccc+0x3a>
   1c006:	bf00      	nop
   1c008:	2000074c 	.word	0x2000074c
   1c00c:	20000740 	.word	0x20000740
   1c010:	00031d30 	.word	0x00031d30

0001c014 <gatt_sub_free>:
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   1c014:	6883      	ldr	r3, [r0, #8]
{
   1c016:	b513      	push	{r0, r1, r4, lr}
   1c018:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(gatt_sub_is_empty(sub));
   1c01a:	b15b      	cbz	r3, 1c034 <gatt_sub_free+0x20>
   1c01c:	490a      	ldr	r1, [pc, #40]	; (1c048 <gatt_sub_free+0x34>)
   1c01e:	480b      	ldr	r0, [pc, #44]	; (1c04c <gatt_sub_free+0x38>)
   1c020:	4a0b      	ldr	r2, [pc, #44]	; (1c050 <gatt_sub_free+0x3c>)
   1c022:	f640 23b1 	movw	r3, #2737	; 0xab1
   1c026:	f00c fdb8 	bl	28b9a <printk>
   1c02a:	4809      	ldr	r0, [pc, #36]	; (1c050 <gatt_sub_free+0x3c>)
   1c02c:	f640 21b1 	movw	r1, #2737	; 0xab1
   1c030:	f00c fff4 	bl	2901c <assert_post_action>
	bt_addr_le_copy(&sub->peer, BT_ADDR_LE_ANY);
   1c034:	2300      	movs	r3, #0
   1c036:	4669      	mov	r1, sp
   1c038:	1c60      	adds	r0, r4, #1
   1c03a:	9300      	str	r3, [sp, #0]
   1c03c:	f8cd 3003 	str.w	r3, [sp, #3]
   1c040:	f00f fc76 	bl	2b930 <bt_addr_le_copy>
}
   1c044:	b002      	add	sp, #8
   1c046:	bd10      	pop	{r4, pc}
   1c048:	00031d7a 	.word	0x00031d7a
   1c04c:	0002e93e 	.word	0x0002e93e
   1c050:	00031d4a 	.word	0x00031d4a

0001c054 <sc_save>:
{
   1c054:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c058:	4680      	mov	r8, r0
   1c05a:	460f      	mov	r7, r1
   1c05c:	4616      	mov	r6, r2
   1c05e:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1c060:	f7ff ff3c 	bl	1bedc <find_sc_cfg>
	if (!cfg) {
   1c064:	4604      	mov	r4, r0
   1c066:	b9e0      	cbnz	r0, 1c0a2 <sc_save+0x4e>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1c068:	4669      	mov	r1, sp
   1c06a:	9000      	str	r0, [sp, #0]
   1c06c:	f8cd 0003 	str.w	r0, [sp, #3]
   1c070:	f7ff ff34 	bl	1bedc <find_sc_cfg>
		if (!cfg) {
   1c074:	4604      	mov	r4, r0
   1c076:	b978      	cbnz	r0, 1c098 <sc_save+0x44>
			BT_ERR("unable to save SC: no cfg left");
   1c078:	4911      	ldr	r1, [pc, #68]	; (1c0c0 <sc_save+0x6c>)
   1c07a:	680b      	ldr	r3, [r1, #0]
   1c07c:	075b      	lsls	r3, r3, #29
   1c07e:	d008      	beq.n	1c092 <sc_save+0x3e>
   1c080:	4b10      	ldr	r3, [pc, #64]	; (1c0c4 <sc_save+0x70>)
   1c082:	4811      	ldr	r0, [pc, #68]	; (1c0c8 <sc_save+0x74>)
   1c084:	1ac9      	subs	r1, r1, r3
   1c086:	0889      	lsrs	r1, r1, #2
   1c088:	0189      	lsls	r1, r1, #6
   1c08a:	f041 0101 	orr.w	r1, r1, #1
   1c08e:	f00d f926 	bl	292de <log_0>
}
   1c092:	b002      	add	sp, #8
   1c094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
   1c098:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
   1c09c:	4639      	mov	r1, r7
   1c09e:	f00f fc47 	bl	2b930 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
   1c0a2:	8922      	ldrh	r2, [r4, #8]
   1c0a4:	8963      	ldrh	r3, [r4, #10]
   1c0a6:	b91a      	cbnz	r2, 1c0b0 <sc_save+0x5c>
   1c0a8:	b923      	cbnz	r3, 1c0b4 <sc_save+0x60>
		cfg->data.start = start;
   1c0aa:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1c0ac:	8165      	strh	r5, [r4, #10]
   1c0ae:	e7f0      	b.n	1c092 <sc_save+0x3e>
	if (new_start >= *start && new_end <= *end) {
   1c0b0:	4296      	cmp	r6, r2
   1c0b2:	d302      	bcc.n	1c0ba <sc_save+0x66>
   1c0b4:	429d      	cmp	r5, r3
   1c0b6:	d9ec      	bls.n	1c092 <sc_save+0x3e>
   1c0b8:	e7f8      	b.n	1c0ac <sc_save+0x58>
		*start = new_start;
   1c0ba:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1c0bc:	e7fa      	b.n	1c0b4 <sc_save+0x60>
   1c0be:	bf00      	nop
   1c0c0:	2000074c 	.word	0x2000074c
   1c0c4:	20000740 	.word	0x20000740
   1c0c8:	00031d91 	.word	0x00031d91

0001c0cc <remove_peer_from_attr>:
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c0cc:	6881      	ldr	r1, [r0, #8]
   1c0ce:	4b09      	ldr	r3, [pc, #36]	; (1c0f4 <remove_peer_from_attr+0x28>)
   1c0d0:	4299      	cmp	r1, r3
{
   1c0d2:	b510      	push	{r4, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c0d4:	d10c      	bne.n	1c0f0 <remove_peer_from_attr+0x24>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
   1c0d6:	68c4      	ldr	r4, [r0, #12]

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
   1c0d8:	6811      	ldr	r1, [r2, #0]
		if (id == ccc->cfg[i].id &&
   1c0da:	7823      	ldrb	r3, [r4, #0]
   1c0dc:	7912      	ldrb	r2, [r2, #4]
   1c0de:	429a      	cmp	r2, r3
   1c0e0:	d106      	bne.n	1c0f0 <remove_peer_from_attr+0x24>
		    !bt_addr_le_cmp(&ccc->cfg[i].peer, addr)) {
   1c0e2:	1c60      	adds	r0, r4, #1
   1c0e4:	f00f fb1d 	bl	2b722 <bt_addr_le_cmp>
		if (id == ccc->cfg[i].id &&
   1c0e8:	b910      	cbnz	r0, 1c0f0 <remove_peer_from_attr+0x24>
   1c0ea:	6020      	str	r0, [r4, #0]
   1c0ec:	6060      	str	r0, [r4, #4]
   1c0ee:	8120      	strh	r0, [r4, #8]
	if (cfg) {
		memset(cfg, 0, sizeof(*cfg));
	}

	return BT_GATT_ITER_CONTINUE;
}
   1c0f0:	2001      	movs	r0, #1
   1c0f2:	bd10      	pop	{r4, pc}
   1c0f4:	0001bf39 	.word	0x0001bf39

0001c0f8 <cf_write>:
{
   1c0f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c0fc:	4698      	mov	r8, r3
   1c0fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	if (offset > sizeof(cfg->data)) {
   1c102:	2b01      	cmp	r3, #1
{
   1c104:	4606      	mov	r6, r0
   1c106:	4617      	mov	r7, r2
	if (offset > sizeof(cfg->data)) {
   1c108:	d841      	bhi.n	1c18e <cf_write+0x96>
	if (offset + len > sizeof(cfg->data)) {
   1c10a:	4443      	add	r3, r8
   1c10c:	2b01      	cmp	r3, #1
   1c10e:	4645      	mov	r5, r8
   1c110:	dc40      	bgt.n	1c194 <cf_write+0x9c>
	cfg = find_cf_cfg(conn);
   1c112:	f7ff fec5 	bl	1bea0 <find_cf_cfg>
	if (!cfg) {
   1c116:	4604      	mov	r4, r0
   1c118:	b9a0      	cbnz	r0, 1c144 <cf_write+0x4c>
		cfg = find_cf_cfg(NULL);
   1c11a:	f7ff fec1 	bl	1bea0 <find_cf_cfg>
	if (!cfg) {
   1c11e:	4604      	mov	r4, r0
   1c120:	b980      	cbnz	r0, 1c144 <cf_write+0x4c>
		BT_WARN("No space to store Client Supported Features");
   1c122:	491f      	ldr	r1, [pc, #124]	; (1c1a0 <cf_write+0xa8>)
   1c124:	680b      	ldr	r3, [r1, #0]
   1c126:	f013 0f06 	tst.w	r3, #6
   1c12a:	d008      	beq.n	1c13e <cf_write+0x46>
   1c12c:	4b1d      	ldr	r3, [pc, #116]	; (1c1a4 <cf_write+0xac>)
   1c12e:	481e      	ldr	r0, [pc, #120]	; (1c1a8 <cf_write+0xb0>)
   1c130:	1ac9      	subs	r1, r1, r3
   1c132:	0889      	lsrs	r1, r1, #2
   1c134:	0189      	lsls	r1, r1, #6
   1c136:	f041 0102 	orr.w	r1, r1, #2
   1c13a:	f00d f8d0 	bl	292de <log_0>
   1c13e:	f06f 0510 	mvn.w	r5, #16
   1c142:	e00f      	b.n	1c164 <cf_write+0x6c>
{
   1c144:	2100      	movs	r1, #0
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1c146:	f1b8 0f00 	cmp.w	r8, #0
   1c14a:	d10e      	bne.n	1c16a <cf_write+0x72>
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c14c:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1c150:	1c60      	adds	r0, r4, #1
   1c152:	f00f fbed 	bl	2b930 <bt_addr_le_copy>
	cfg->id = conn->id;
   1c156:	4620      	mov	r0, r4
   1c158:	7a33      	ldrb	r3, [r6, #8]
   1c15a:	f800 3b0c 	strb.w	r3, [r0], #12
	atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1c15e:	2100      	movs	r1, #0
   1c160:	f00f fcd3 	bl	2bb0a <atomic_set_bit>
}
   1c164:	4628      	mov	r0, r5
   1c166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1c16a:	7a20      	ldrb	r0, [r4, #8]
   1c16c:	fa20 f301 	lsr.w	r3, r0, r1
   1c170:	07da      	lsls	r2, r3, #31
   1c172:	d503      	bpl.n	1c17c <cf_write+0x84>
		    !(value[i / 8] & BIT(i % 8))) {
   1c174:	783b      	ldrb	r3, [r7, #0]
   1c176:	40cb      	lsrs	r3, r1
		if ((cfg->data[i / 8] & BIT(i % 8)) &&
   1c178:	07db      	lsls	r3, r3, #31
   1c17a:	d50e      	bpl.n	1c19a <cf_write+0xa2>
	for (i = 0U; i <= CF_BIT_LAST && (i / 8) < len; i++) {
   1c17c:	3101      	adds	r1, #1
   1c17e:	2903      	cmp	r1, #3
   1c180:	d1e1      	bne.n	1c146 <cf_write+0x4e>
			cfg->data[i] |= value[i] & BIT_MASK(CF_NUM_BITS % 8);
   1c182:	783b      	ldrb	r3, [r7, #0]
   1c184:	f003 0307 	and.w	r3, r3, #7
   1c188:	4318      	orrs	r0, r3
   1c18a:	7220      	strb	r0, [r4, #8]
	for (i = 0U; i < len && i < CF_NUM_BYTES; i++) {
   1c18c:	e7de      	b.n	1c14c <cf_write+0x54>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1c18e:	f06f 0506 	mvn.w	r5, #6
   1c192:	e7e7      	b.n	1c164 <cf_write+0x6c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1c194:	f06f 050c 	mvn.w	r5, #12
   1c198:	e7e4      	b.n	1c164 <cf_write+0x6c>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
   1c19a:	f06f 0512 	mvn.w	r5, #18
   1c19e:	e7e1      	b.n	1c164 <cf_write+0x6c>
   1c1a0:	2000074c 	.word	0x2000074c
   1c1a4:	20000740 	.word	0x20000740
   1c1a8:	00031db0 	.word	0x00031db0

0001c1ac <sc_indicate_rsp>:
{
   1c1ac:	b510      	push	{r4, lr}
   1c1ae:	4604      	mov	r4, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c1b0:	4814      	ldr	r0, [pc, #80]	; (1c204 <sc_indicate_rsp+0x58>)
   1c1b2:	f3bf 8f5b 	dmb	ish
   1c1b6:	f100 0350 	add.w	r3, r0, #80	; 0x50
   1c1ba:	e853 2f00 	ldrex	r2, [r3]
   1c1be:	f022 0202 	bic.w	r2, r2, #2
   1c1c2:	e843 2100 	strex	r1, r2, [r3]
   1c1c6:	2900      	cmp	r1, #0
   1c1c8:	d1f7      	bne.n	1c1ba <sc_indicate_rsp+0xe>
   1c1ca:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c1ce:	f3bf 8f5b 	dmb	ish
   1c1d2:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1c1d4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
   1c1d8:	07da      	lsls	r2, r3, #31
   1c1da:	d504      	bpl.n	1c1e6 <sc_indicate_rsp+0x3a>
	k_work_reschedule(&gatt_sc.work, timeout);
   1c1dc:	2200      	movs	r2, #0
   1c1de:	2300      	movs	r3, #0
   1c1e0:	3020      	adds	r0, #32
   1c1e2:	f009 fa7b 	bl	256dc <k_work_reschedule>
	cfg = find_cf_cfg(conn);
   1c1e6:	4620      	mov	r0, r4
   1c1e8:	f7ff fe5a 	bl	1bea0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   1c1ec:	b140      	cbz	r0, 1c200 <sc_indicate_rsp+0x54>
   1c1ee:	7a03      	ldrb	r3, [r0, #8]
   1c1f0:	07db      	lsls	r3, r3, #31
   1c1f2:	d505      	bpl.n	1c200 <sc_indicate_rsp+0x54>
}
   1c1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   1c1f8:	2100      	movs	r1, #0
   1c1fa:	300c      	adds	r0, #12
   1c1fc:	f00f bc85 	b.w	2bb0a <atomic_set_bit>
}
   1c200:	bd10      	pop	{r4, pc}
   1c202:	bf00      	nop
   1c204:	20001ca0 	.word	0x20001ca0

0001c208 <gatt_write_ccc>:
{
   1c208:	b507      	push	{r0, r1, r2, lr}
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1c20a:	2312      	movs	r3, #18
{
   1c20c:	460a      	mov	r2, r1
	return gatt_req_send(conn, gatt_write_ccc_rsp, params,
   1c20e:	2104      	movs	r1, #4
   1c210:	e9cd 3100 	strd	r3, r1, [sp]
   1c214:	4b03      	ldr	r3, [pc, #12]	; (1c224 <gatt_write_ccc+0x1c>)
   1c216:	4904      	ldr	r1, [pc, #16]	; (1c228 <gatt_write_ccc+0x20>)
   1c218:	f00f fd2e 	bl	2bc78 <gatt_req_send>
}
   1c21c:	b003      	add	sp, #12
   1c21e:	f85d fb04 	ldr.w	pc, [sp], #4
   1c222:	bf00      	nop
   1c224:	0002bb53 	.word	0x0002bb53
   1c228:	0002bc03 	.word	0x0002bc03

0001c22c <disconnected_cb>:
{
   1c22c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c230:	4b23      	ldr	r3, [pc, #140]	; (1c2c0 <disconnected_cb+0x94>)
{
   1c232:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c234:	6882      	ldr	r2, [r0, #8]
   1c236:	429a      	cmp	r2, r3
{
   1c238:	4607      	mov	r7, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c23a:	d102      	bne.n	1c242 <disconnected_cb+0x16>
	ccc = attr->user_data;
   1c23c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
   1c23e:	8963      	ldrh	r3, [r4, #10]
   1c240:	bb03      	cbnz	r3, 1c284 <disconnected_cb+0x58>
}
   1c242:	2001      	movs	r0, #1
   1c244:	b002      	add	sp, #8
   1c246:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1c24a:	f105 0890 	add.w	r8, r5, #144	; 0x90
   1c24e:	7a28      	ldrb	r0, [r5, #8]
   1c250:	4641      	mov	r1, r8
   1c252:	f00e fc55 	bl	2ab00 <bt_addr_le_is_bonded>
   1c256:	b980      	cbnz	r0, 1c27a <disconnected_cb+0x4e>
				if (ccc == &sc_ccc) {
   1c258:	4b1a      	ldr	r3, [pc, #104]	; (1c2c4 <disconnected_cb+0x98>)
   1c25a:	429c      	cmp	r4, r3
   1c25c:	d102      	bne.n	1c264 <disconnected_cb+0x38>
					sc_clear(conn);
   1c25e:	4628      	mov	r0, r5
   1c260:	f00f fb72 	bl	2b948 <sc_clear>
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1c264:	2200      	movs	r2, #0
   1c266:	4669      	mov	r1, sp
   1c268:	4630      	mov	r0, r6
   1c26a:	9200      	str	r2, [sp, #0]
   1c26c:	f8cd 2003 	str.w	r2, [sp, #3]
   1c270:	f00f fb5e 	bl	2b930 <bt_addr_le_copy>
	cfg->id = 0U;
   1c274:	7022      	strb	r2, [r4, #0]
	cfg->value = 0U;
   1c276:	8122      	strh	r2, [r4, #8]
	if (!value_used) {
   1c278:	e019      	b.n	1c2ae <disconnected_cb+0x82>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1c27a:	4641      	mov	r1, r8
   1c27c:	4630      	mov	r0, r6
   1c27e:	f00f fb57 	bl	2b930 <bt_addr_le_copy>
	if (!value_used) {
   1c282:	e014      	b.n	1c2ae <disconnected_cb+0x82>
		if (!cfg->value) {
   1c284:	8923      	ldrh	r3, [r4, #8]
   1c286:	b193      	cbz	r3, 1c2ae <disconnected_cb+0x82>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1c288:	4626      	mov	r6, r4
   1c28a:	4628      	mov	r0, r5
   1c28c:	f816 1b01 	ldrb.w	r1, [r6], #1
   1c290:	4632      	mov	r2, r6
   1c292:	f00e fcf3 	bl	2ac7c <bt_conn_is_peer_addr_le>
   1c296:	2800      	cmp	r0, #0
   1c298:	d1d7      	bne.n	1c24a <disconnected_cb+0x1e>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c29a:	7820      	ldrb	r0, [r4, #0]
   1c29c:	4631      	mov	r1, r6
   1c29e:	f7fd ff1b 	bl	1a0d8 <bt_conn_lookup_addr_le>
			if (tmp) {
   1c2a2:	b120      	cbz	r0, 1c2ae <disconnected_cb+0x82>
				if (tmp->state == BT_CONN_CONNECTED) {
   1c2a4:	7a85      	ldrb	r5, [r0, #10]
				bt_conn_unref(tmp);
   1c2a6:	f7fd fc85 	bl	19bb4 <bt_conn_unref>
	if (!value_used) {
   1c2aa:	2d07      	cmp	r5, #7
   1c2ac:	d0c9      	beq.n	1c242 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
   1c2ae:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
   1c2b0:	2100      	movs	r1, #0
   1c2b2:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
   1c2b4:	2b00      	cmp	r3, #0
   1c2b6:	d0c4      	beq.n	1c242 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
   1c2b8:	4638      	mov	r0, r7
   1c2ba:	4798      	blx	r3
   1c2bc:	e7c1      	b.n	1c242 <disconnected_cb+0x16>
   1c2be:	bf00      	nop
   1c2c0:	0001bf39 	.word	0x0001bf39
   1c2c4:	20000554 	.word	0x20000554

0001c2c8 <bt_gatt_init>:
{
   1c2c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   1c2ca:	4b28      	ldr	r3, [pc, #160]	; (1c36c <bt_gatt_init+0xa4>)
   1c2cc:	f3bf 8f5b 	dmb	ish
   1c2d0:	2201      	movs	r2, #1
   1c2d2:	e853 1f00 	ldrex	r1, [r3]
   1c2d6:	2900      	cmp	r1, #0
   1c2d8:	d103      	bne.n	1c2e2 <bt_gatt_init+0x1a>
   1c2da:	e843 2000 	strex	r0, r2, [r3]
   1c2de:	2800      	cmp	r0, #0
   1c2e0:	d1f7      	bne.n	1c2d2 <bt_gatt_init+0xa>
   1c2e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
   1c2e6:	d140      	bne.n	1c36a <bt_gatt_init+0xa2>
   1c2e8:	f3bf 8f5b 	dmb	ish
   1c2ec:	4b20      	ldr	r3, [pc, #128]	; (1c370 <bt_gatt_init+0xa8>)
   1c2ee:	e853 1f00 	ldrex	r1, [r3]
   1c2f2:	2900      	cmp	r1, #0
   1c2f4:	d103      	bne.n	1c2fe <bt_gatt_init+0x36>
   1c2f6:	e843 2000 	strex	r0, r2, [r3]
   1c2fa:	2800      	cmp	r0, #0
   1c2fc:	d1f7      	bne.n	1c2ee <bt_gatt_init+0x26>
   1c2fe:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
   1c302:	d02d      	beq.n	1c360 <bt_gatt_init+0x98>
	list->head = NULL;
   1c304:	4b1b      	ldr	r3, [pc, #108]	; (1c374 <bt_gatt_init+0xac>)
	k_work_init_delayable(&db_hash.work, db_hash_process);
   1c306:	491c      	ldr	r1, [pc, #112]	; (1c378 <bt_gatt_init+0xb0>)
   1c308:	481c      	ldr	r0, [pc, #112]	; (1c37c <bt_gatt_init+0xb4>)
   1c30a:	2200      	movs	r2, #0
	list->tail = NULL;
   1c30c:	e9c3 2200 	strd	r2, r2, [r3]
   1c310:	f009 f8c0 	bl	25494 <k_work_init_delayable>
	k_work_schedule(&db_hash.work, DB_HASH_TIMEOUT);
   1c314:	2300      	movs	r3, #0
   1c316:	4819      	ldr	r0, [pc, #100]	; (1c37c <bt_gatt_init+0xb4>)
   1c318:	f44f 72a4 	mov.w	r2, #328	; 0x148
   1c31c:	f009 f962 	bl	255e4 <k_work_schedule>
}
   1c320:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	k_work_init_delayable(&gatt_sc.work, sc_process);
   1c324:	4916      	ldr	r1, [pc, #88]	; (1c380 <bt_gatt_init+0xb8>)
   1c326:	4817      	ldr	r0, [pc, #92]	; (1c384 <bt_gatt_init+0xbc>)
   1c328:	f009 b8b4 	b.w	25494 <k_work_init_delayable>
		last_static_handle += svc->attr_count;
   1c32c:	4a16      	ldr	r2, [pc, #88]	; (1c388 <bt_gatt_init+0xc0>)
   1c32e:	6863      	ldr	r3, [r4, #4]
   1c330:	8811      	ldrh	r1, [r2, #0]
   1c332:	440b      	add	r3, r1
   1c334:	8013      	strh	r3, [r2, #0]
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
   1c336:	3408      	adds	r4, #8
   1c338:	42ac      	cmp	r4, r5
   1c33a:	d90e      	bls.n	1c35a <bt_gatt_init+0x92>
   1c33c:	4913      	ldr	r1, [pc, #76]	; (1c38c <bt_gatt_init+0xc4>)
   1c33e:	4814      	ldr	r0, [pc, #80]	; (1c390 <bt_gatt_init+0xc8>)
   1c340:	f240 4351 	movw	r3, #1105	; 0x451
   1c344:	4632      	mov	r2, r6
   1c346:	f00c fc28 	bl	28b9a <printk>
   1c34a:	4812      	ldr	r0, [pc, #72]	; (1c394 <bt_gatt_init+0xcc>)
   1c34c:	f00c fc25 	bl	28b9a <printk>
   1c350:	f240 4151 	movw	r1, #1105	; 0x451
   1c354:	4630      	mov	r0, r6
   1c356:	f00c fe61 	bl	2901c <assert_post_action>
   1c35a:	42bc      	cmp	r4, r7
   1c35c:	d3e6      	bcc.n	1c32c <bt_gatt_init+0x64>
   1c35e:	e7d1      	b.n	1c304 <bt_gatt_init+0x3c>
   1c360:	4d0d      	ldr	r5, [pc, #52]	; (1c398 <bt_gatt_init+0xd0>)
   1c362:	4c0e      	ldr	r4, [pc, #56]	; (1c39c <bt_gatt_init+0xd4>)
   1c364:	4e0e      	ldr	r6, [pc, #56]	; (1c3a0 <bt_gatt_init+0xd8>)
   1c366:	462f      	mov	r7, r5
   1c368:	e7e6      	b.n	1c338 <bt_gatt_init+0x70>
}
   1c36a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c36c:	2000279c 	.word	0x2000279c
   1c370:	200027b8 	.word	0x200027b8
   1c374:	20002784 	.word	0x20002784
   1c378:	0002bd85 	.word	0x0002bd85
   1c37c:	20001c48 	.word	0x20001c48
   1c380:	0001c80d 	.word	0x0001c80d
   1c384:	20001cc0 	.word	0x20001cc0
   1c388:	20002a26 	.word	0x20002a26
   1c38c:	00031de3 	.word	0x00031de3
   1c390:	0002e93e 	.word	0x0002e93e
   1c394:	000315b0 	.word	0x000315b0
   1c398:	0002d1e8 	.word	0x0002d1e8
   1c39c:	0002d1d8 	.word	0x0002d1d8
   1c3a0:	00031d4a 	.word	0x00031d4a

0001c3a4 <bt_gatt_attr_get_handle>:
{
   1c3a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!attr) {
   1c3a8:	4604      	mov	r4, r0
   1c3aa:	b910      	cbnz	r0, 1c3b2 <bt_gatt_attr_get_handle+0xe>
		return 0;
   1c3ac:	2000      	movs	r0, #0
}
   1c3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (attr->handle) {
   1c3b2:	8a00      	ldrh	r0, [r0, #16]
   1c3b4:	2800      	cmp	r0, #0
   1c3b6:	d1fa      	bne.n	1c3ae <bt_gatt_attr_get_handle+0xa>
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c3b8:	4f1a      	ldr	r7, [pc, #104]	; (1c424 <bt_gatt_attr_get_handle+0x80>)
   1c3ba:	4d1b      	ldr	r5, [pc, #108]	; (1c428 <bt_gatt_attr_get_handle+0x84>)
   1c3bc:	f8df 9078 	ldr.w	r9, [pc, #120]	; 1c438 <bt_gatt_attr_get_handle+0x94>
	uint16_t handle = 1;
   1c3c0:	2601      	movs	r6, #1
   1c3c2:	46b8      	mov	r8, r7
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c3c4:	42bd      	cmp	r5, r7
   1c3c6:	d90e      	bls.n	1c3e6 <bt_gatt_attr_get_handle+0x42>
   1c3c8:	4918      	ldr	r1, [pc, #96]	; (1c42c <bt_gatt_attr_get_handle+0x88>)
   1c3ca:	4819      	ldr	r0, [pc, #100]	; (1c430 <bt_gatt_attr_get_handle+0x8c>)
   1c3cc:	f240 538c 	movw	r3, #1420	; 0x58c
   1c3d0:	464a      	mov	r2, r9
   1c3d2:	f00c fbe2 	bl	28b9a <printk>
   1c3d6:	4817      	ldr	r0, [pc, #92]	; (1c434 <bt_gatt_attr_get_handle+0x90>)
   1c3d8:	f00c fbdf 	bl	28b9a <printk>
   1c3dc:	f240 518c 	movw	r1, #1420	; 0x58c
   1c3e0:	4648      	mov	r0, r9
   1c3e2:	f00c fe1b 	bl	2901c <assert_post_action>
   1c3e6:	4545      	cmp	r5, r8
   1c3e8:	d2e0      	bcs.n	1c3ac <bt_gatt_attr_get_handle+0x8>
		if ((attr < &static_svc->attrs[0]) ||
   1c3ea:	e9d5 ec00 	ldrd	lr, ip, [r5]
   1c3ee:	4574      	cmp	r4, lr
   1c3f0:	d305      	bcc.n	1c3fe <bt_gatt_attr_get_handle+0x5a>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
   1c3f2:	2114      	movs	r1, #20
   1c3f4:	fb01 e30c 	mla	r3, r1, ip, lr
   1c3f8:	3b14      	subs	r3, #20
		if ((attr < &static_svc->attrs[0]) ||
   1c3fa:	429c      	cmp	r4, r3
   1c3fc:	d90f      	bls.n	1c41e <bt_gatt_attr_get_handle+0x7a>
			handle += static_svc->attr_count;
   1c3fe:	eb06 030c 	add.w	r3, r6, ip
   1c402:	b298      	uxth	r0, r3
	STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c404:	3508      	adds	r5, #8
   1c406:	4606      	mov	r6, r0
   1c408:	e7dc      	b.n	1c3c4 <bt_gatt_attr_get_handle+0x20>
			if (attr == &static_svc->attrs[i]) {
   1c40a:	fb01 e302 	mla	r3, r1, r2, lr
   1c40e:	429c      	cmp	r4, r3
   1c410:	d0cd      	beq.n	1c3ae <bt_gatt_attr_get_handle+0xa>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
   1c412:	3201      	adds	r2, #1
   1c414:	18b3      	adds	r3, r6, r2
   1c416:	4562      	cmp	r2, ip
   1c418:	b298      	uxth	r0, r3
   1c41a:	d1f6      	bne.n	1c40a <bt_gatt_attr_get_handle+0x66>
   1c41c:	e7f2      	b.n	1c404 <bt_gatt_attr_get_handle+0x60>
   1c41e:	2200      	movs	r2, #0
   1c420:	e7f8      	b.n	1c414 <bt_gatt_attr_get_handle+0x70>
   1c422:	bf00      	nop
   1c424:	0002d1e8 	.word	0x0002d1e8
   1c428:	0002d1d8 	.word	0x0002d1d8
   1c42c:	00031ddc 	.word	0x00031ddc
   1c430:	0002e93e 	.word	0x0002e93e
   1c434:	000315b0 	.word	0x000315b0
   1c438:	00031d4a 	.word	0x00031d4a

0001c43c <bt_gatt_foreach_attr_type>:
{
   1c43c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c440:	b085      	sub	sp, #20
   1c442:	4607      	mov	r7, r0
   1c444:	f8bd 5038 	ldrh.w	r5, [sp, #56]	; 0x38
   1c448:	9301      	str	r3, [sp, #4]
		num_matches = UINT16_MAX;
   1c44a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c44e:	2d00      	cmp	r5, #0
   1c450:	bf08      	it	eq
   1c452:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
   1c454:	4b2d      	ldr	r3, [pc, #180]	; (1c50c <bt_gatt_foreach_attr_type+0xd0>)
{
   1c456:	9102      	str	r1, [sp, #8]
	if (start_handle <= last_static_handle) {
   1c458:	881b      	ldrh	r3, [r3, #0]
   1c45a:	4283      	cmp	r3, r0
{
   1c45c:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
   1c45e:	d24e      	bcs.n	1c4fe <bt_gatt_foreach_attr_type+0xc2>
}
   1c460:	b005      	add	sp, #20
   1c462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
   1c466:	6873      	ldr	r3, [r6, #4]
   1c468:	4423      	add	r3, r4
   1c46a:	42bb      	cmp	r3, r7
   1c46c:	d244      	bcs.n	1c4f8 <bt_gatt_foreach_attr_type+0xbc>
				handle += static_svc->attr_count;
   1c46e:	b29c      	uxth	r4, r3
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c470:	3608      	adds	r6, #8
   1c472:	4556      	cmp	r6, sl
   1c474:	d90e      	bls.n	1c494 <bt_gatt_foreach_attr_type+0x58>
   1c476:	4926      	ldr	r1, [pc, #152]	; (1c510 <bt_gatt_foreach_attr_type+0xd4>)
   1c478:	4826      	ldr	r0, [pc, #152]	; (1c514 <bt_gatt_foreach_attr_type+0xd8>)
   1c47a:	f44f 63ca 	mov.w	r3, #1616	; 0x650
   1c47e:	465a      	mov	r2, fp
   1c480:	f00c fb8b 	bl	28b9a <printk>
   1c484:	4824      	ldr	r0, [pc, #144]	; (1c518 <bt_gatt_foreach_attr_type+0xdc>)
   1c486:	f00c fb88 	bl	28b9a <printk>
   1c48a:	f44f 61ca 	mov.w	r1, #1616	; 0x650
   1c48e:	4658      	mov	r0, fp
   1c490:	f00c fdc4 	bl	2901c <assert_post_action>
   1c494:	4b21      	ldr	r3, [pc, #132]	; (1c51c <bt_gatt_foreach_attr_type+0xe0>)
   1c496:	429e      	cmp	r6, r3
   1c498:	d3e5      	bcc.n	1c466 <bt_gatt_foreach_attr_type+0x2a>
   1c49a:	e7e1      	b.n	1c460 <bt_gatt_foreach_attr_type+0x24>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c49c:	5889      	ldr	r1, [r1, r2]
   1c49e:	9303      	str	r3, [sp, #12]
   1c4a0:	4640      	mov	r0, r8
   1c4a2:	f00e f99d 	bl	2a7e0 <bt_uuid_cmp>
   1c4a6:	9b03      	ldr	r3, [sp, #12]
   1c4a8:	b198      	cbz	r0, 1c4d2 <bt_gatt_foreach_attr_type+0x96>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c4aa:	3401      	adds	r4, #1
   1c4ac:	f109 0901 	add.w	r9, r9, #1
   1c4b0:	b2a4      	uxth	r4, r4
   1c4b2:	6873      	ldr	r3, [r6, #4]
   1c4b4:	454b      	cmp	r3, r9
   1c4b6:	d9db      	bls.n	1c470 <bt_gatt_foreach_attr_type+0x34>
	if (handle > end_handle) {
   1c4b8:	9b02      	ldr	r3, [sp, #8]
   1c4ba:	429c      	cmp	r4, r3
   1c4bc:	d8d0      	bhi.n	1c460 <bt_gatt_foreach_attr_type+0x24>
	if (handle < start_handle) {
   1c4be:	42bc      	cmp	r4, r7
   1c4c0:	d3f3      	bcc.n	1c4aa <bt_gatt_foreach_attr_type+0x6e>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c4c2:	2314      	movs	r3, #20
   1c4c4:	6831      	ldr	r1, [r6, #0]
   1c4c6:	fb03 f209 	mul.w	r2, r3, r9
   1c4ca:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
   1c4cc:	f1b8 0f00 	cmp.w	r8, #0
   1c4d0:	d1e4      	bne.n	1c49c <bt_gatt_foreach_attr_type+0x60>
	if (attr_data && attr_data != attr->user_data) {
   1c4d2:	9a01      	ldr	r2, [sp, #4]
   1c4d4:	b95a      	cbnz	r2, 1c4ee <bt_gatt_foreach_attr_type+0xb2>
	*num_matches -= 1;
   1c4d6:	3d01      	subs	r5, #1
   1c4d8:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
   1c4da:	4618      	mov	r0, r3
   1c4dc:	9a10      	ldr	r2, [sp, #64]	; 0x40
   1c4de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   1c4e0:	4621      	mov	r1, r4
   1c4e2:	4798      	blx	r3
	if (!*num_matches) {
   1c4e4:	2d00      	cmp	r5, #0
   1c4e6:	d0bb      	beq.n	1c460 <bt_gatt_foreach_attr_type+0x24>
				if (gatt_foreach_iter(&static_svc->attrs[i],
   1c4e8:	2800      	cmp	r0, #0
   1c4ea:	d1de      	bne.n	1c4aa <bt_gatt_foreach_attr_type+0x6e>
   1c4ec:	e7b8      	b.n	1c460 <bt_gatt_foreach_attr_type+0x24>
	if (attr_data && attr_data != attr->user_data) {
   1c4ee:	68da      	ldr	r2, [r3, #12]
   1c4f0:	9901      	ldr	r1, [sp, #4]
   1c4f2:	4291      	cmp	r1, r2
   1c4f4:	d1d9      	bne.n	1c4aa <bt_gatt_foreach_attr_type+0x6e>
   1c4f6:	e7ee      	b.n	1c4d6 <bt_gatt_foreach_attr_type+0x9a>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
   1c4f8:	f04f 0900 	mov.w	r9, #0
   1c4fc:	e7d9      	b.n	1c4b2 <bt_gatt_foreach_attr_type+0x76>
		STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
   1c4fe:	4e08      	ldr	r6, [pc, #32]	; (1c520 <bt_gatt_foreach_attr_type+0xe4>)
   1c500:	f8df a018 	ldr.w	sl, [pc, #24]	; 1c51c <bt_gatt_foreach_attr_type+0xe0>
   1c504:	f8df b01c 	ldr.w	fp, [pc, #28]	; 1c524 <bt_gatt_foreach_attr_type+0xe8>
		uint16_t handle = 1;
   1c508:	2401      	movs	r4, #1
   1c50a:	e7b2      	b.n	1c472 <bt_gatt_foreach_attr_type+0x36>
   1c50c:	20002a26 	.word	0x20002a26
   1c510:	00031ddc 	.word	0x00031ddc
   1c514:	0002e93e 	.word	0x0002e93e
   1c518:	000315b0 	.word	0x000315b0
   1c51c:	0002d1e8 	.word	0x0002d1e8
   1c520:	0002d1d8 	.word	0x0002d1d8
   1c524:	00031d4a 	.word	0x00031d4a

0001c528 <db_hash_gen.isra.0>:
static void db_hash_gen(bool store)
   1c528:	b510      	push	{r4, lr}
   1c52a:	b0c8      	sub	sp, #288	; 0x120
	uint8_t key[16] = {};
   1c52c:	2400      	movs	r4, #0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c52e:	aa1c      	add	r2, sp, #112	; 0x70
   1c530:	4669      	mov	r1, sp
   1c532:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
   1c534:	e9cd 4400 	strd	r4, r4, [sp]
   1c538:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
   1c53c:	f00e f852 	bl	2a5e4 <tc_cmac_setup>
   1c540:	b970      	cbnz	r0, 1c560 <db_hash_gen.isra.0+0x38>
		BT_ERR("Unable to setup AES CMAC");
   1c542:	4920      	ldr	r1, [pc, #128]	; (1c5c4 <db_hash_gen.isra.0+0x9c>)
   1c544:	680b      	ldr	r3, [r1, #0]
   1c546:	075a      	lsls	r2, r3, #29
   1c548:	d008      	beq.n	1c55c <db_hash_gen.isra.0+0x34>
   1c54a:	4b1f      	ldr	r3, [pc, #124]	; (1c5c8 <db_hash_gen.isra.0+0xa0>)
   1c54c:	481f      	ldr	r0, [pc, #124]	; (1c5cc <db_hash_gen.isra.0+0xa4>)
   1c54e:	1ac9      	subs	r1, r1, r3
   1c550:	0889      	lsrs	r1, r1, #2
   1c552:	0189      	lsls	r1, r1, #6
   1c554:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
   1c558:	f00c fec1 	bl	292de <log_0>
}
   1c55c:	b048      	add	sp, #288	; 0x120
   1c55e:	bd10      	pop	{r4, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
   1c560:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1c564:	2001      	movs	r0, #1
   1c566:	4a1a      	ldr	r2, [pc, #104]	; (1c5d0 <db_hash_gen.isra.0+0xa8>)
   1c568:	ab04      	add	r3, sp, #16
   1c56a:	f00f fc00 	bl	2bd6e <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash.hash, &state.state) == TC_CRYPTO_FAIL) {
   1c56e:	4819      	ldr	r0, [pc, #100]	; (1c5d4 <db_hash_gen.isra.0+0xac>)
   1c570:	a904      	add	r1, sp, #16
   1c572:	f00e f8ce 	bl	2a712 <tc_cmac_final>
   1c576:	b958      	cbnz	r0, 1c590 <db_hash_gen.isra.0+0x68>
		BT_ERR("Unable to calculate hash");
   1c578:	4912      	ldr	r1, [pc, #72]	; (1c5c4 <db_hash_gen.isra.0+0x9c>)
   1c57a:	680b      	ldr	r3, [r1, #0]
   1c57c:	075b      	lsls	r3, r3, #29
   1c57e:	d0ed      	beq.n	1c55c <db_hash_gen.isra.0+0x34>
   1c580:	4b11      	ldr	r3, [pc, #68]	; (1c5c8 <db_hash_gen.isra.0+0xa0>)
   1c582:	4815      	ldr	r0, [pc, #84]	; (1c5d8 <db_hash_gen.isra.0+0xb0>)
   1c584:	1ac9      	subs	r1, r1, r3
   1c586:	0889      	lsrs	r1, r1, #2
   1c588:	0189      	lsls	r1, r1, #6
   1c58a:	f041 0101 	orr.w	r1, r1, #1
   1c58e:	e7e3      	b.n	1c558 <db_hash_gen.isra.0+0x30>
   1c590:	4b10      	ldr	r3, [pc, #64]	; (1c5d4 <db_hash_gen.isra.0+0xac>)
   1c592:	f103 020f 	add.w	r2, r3, #15
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
   1c596:	3401      	adds	r4, #1
		uint8_t tmp = ((uint8_t *)buf)[i];
   1c598:	7819      	ldrb	r1, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1c59a:	7810      	ldrb	r0, [r2, #0]
   1c59c:	f803 0b01 	strb.w	r0, [r3], #1
	for (i = 0; i < (length/2); i++) {
   1c5a0:	2c08      	cmp	r4, #8
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1c5a2:	f802 1901 	strb.w	r1, [r2], #-1
	for (i = 0; i < (length/2); i++) {
   1c5a6:	d1f6      	bne.n	1c596 <db_hash_gen.isra.0+0x6e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c5a8:	f3bf 8f5b 	dmb	ish
   1c5ac:	4b0b      	ldr	r3, [pc, #44]	; (1c5dc <db_hash_gen.isra.0+0xb4>)
   1c5ae:	e853 2f00 	ldrex	r2, [r3]
   1c5b2:	f042 0204 	orr.w	r2, r2, #4
   1c5b6:	e843 2100 	strex	r1, r2, [r3]
   1c5ba:	2900      	cmp	r1, #0
   1c5bc:	d1f7      	bne.n	1c5ae <db_hash_gen.isra.0+0x86>
   1c5be:	f3bf 8f5b 	dmb	ish
   1c5c2:	e7cb      	b.n	1c55c <db_hash_gen.isra.0+0x34>
   1c5c4:	2000074c 	.word	0x2000074c
   1c5c8:	20000740 	.word	0x20000740
   1c5cc:	00031e0b 	.word	0x00031e0b
   1c5d0:	0002b677 	.word	0x0002b677
   1c5d4:	20001c38 	.word	0x20001c38
   1c5d8:	00031e24 	.word	0x00031e24
   1c5dc:	20001cf0 	.word	0x20001cf0

0001c5e0 <gatt_indicate>:
{
   1c5e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c5e4:	4615      	mov	r5, r2
   1c5e6:	4689      	mov	r9, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1c5e8:	2214      	movs	r2, #20
   1c5ea:	6869      	ldr	r1, [r5, #4]
{
   1c5ec:	4680      	mov	r8, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1c5ee:	f00f fbcd 	bl	2bd8c <bt_gatt_check_perm>
   1c5f2:	b180      	cbz	r0, 1c616 <gatt_indicate+0x36>
		BT_WARN("Link is not encrypted");
   1c5f4:	492c      	ldr	r1, [pc, #176]	; (1c6a8 <gatt_indicate+0xc8>)
   1c5f6:	680b      	ldr	r3, [r1, #0]
   1c5f8:	f013 0f06 	tst.w	r3, #6
   1c5fc:	d008      	beq.n	1c610 <gatt_indicate+0x30>
   1c5fe:	4b2b      	ldr	r3, [pc, #172]	; (1c6ac <gatt_indicate+0xcc>)
   1c600:	482b      	ldr	r0, [pc, #172]	; (1c6b0 <gatt_indicate+0xd0>)
   1c602:	1ac9      	subs	r1, r1, r3
   1c604:	0889      	lsrs	r1, r1, #2
   1c606:	0189      	lsls	r1, r1, #6
   1c608:	f041 0102 	orr.w	r1, r1, #2
   1c60c:	f00c fe67 	bl	292de <log_0>
		return -EPERM;
   1c610:	f04f 35ff 	mov.w	r5, #4294967295
   1c614:	e00a      	b.n	1c62c <gatt_indicate+0x4c>
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c616:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   1c61a:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
   1c61c:	8aae      	ldrh	r6, [r5, #20]
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   1c61e:	f7ff fa71 	bl	1bb04 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
   1c622:	3602      	adds	r6, #2
	if (!req) {
   1c624:	4604      	mov	r4, r0
   1c626:	b920      	cbnz	r0, 1c632 <gatt_indicate+0x52>
		return -ENOMEM;
   1c628:	f06f 050b 	mvn.w	r5, #11
}
   1c62c:	4628      	mov	r0, r5
   1c62e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->func = func;
   1c632:	4b20      	ldr	r3, [pc, #128]	; (1c6b4 <gatt_indicate+0xd4>)
   1c634:	6043      	str	r3, [r0, #4]
	req->user_data = params;
   1c636:	60c5      	str	r5, [r0, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
   1c638:	4632      	mov	r2, r6
   1c63a:	211d      	movs	r1, #29
   1c63c:	4640      	mov	r0, r8
   1c63e:	f7fe ffc3 	bl	1b5c8 <bt_att_create_pdu>
	if (!buf) {
   1c642:	4606      	mov	r6, r0
   1c644:	b988      	cbnz	r0, 1c66a <gatt_indicate+0x8a>
		BT_WARN("No buffer available to send indication");
   1c646:	4918      	ldr	r1, [pc, #96]	; (1c6a8 <gatt_indicate+0xc8>)
   1c648:	680b      	ldr	r3, [r1, #0]
   1c64a:	f013 0f06 	tst.w	r3, #6
   1c64e:	d008      	beq.n	1c662 <gatt_indicate+0x82>
   1c650:	4b16      	ldr	r3, [pc, #88]	; (1c6ac <gatt_indicate+0xcc>)
   1c652:	4819      	ldr	r0, [pc, #100]	; (1c6b8 <gatt_indicate+0xd8>)
   1c654:	1ac9      	subs	r1, r1, r3
   1c656:	0889      	lsrs	r1, r1, #2
   1c658:	0189      	lsls	r1, r1, #6
   1c65a:	f041 0102 	orr.w	r1, r1, #2
   1c65e:	f00c fe3e 	bl	292de <log_0>
		bt_att_req_free(req);
   1c662:	4620      	mov	r0, r4
   1c664:	f7ff fa64 	bl	1bb30 <bt_att_req_free>
   1c668:	e7de      	b.n	1c628 <gatt_indicate+0x48>
   1c66a:	f100 0a08 	add.w	sl, r0, #8
   1c66e:	2102      	movs	r1, #2
   1c670:	4650      	mov	r0, sl
   1c672:	f003 fdf3 	bl	2025c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
   1c676:	4607      	mov	r7, r0
   1c678:	8aa9      	ldrh	r1, [r5, #20]
   1c67a:	f827 9b02 	strh.w	r9, [r7], #2
   1c67e:	4650      	mov	r0, sl
   1c680:	f003 fdec 	bl	2025c <net_buf_simple_add>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   1c684:	8aaa      	ldrh	r2, [r5, #20]
   1c686:	6929      	ldr	r1, [r5, #16]
   1c688:	4638      	mov	r0, r7
   1c68a:	f010 fab4 	bl	2cbf6 <memcpy>
	req->buf = buf;
   1c68e:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
   1c690:	4621      	mov	r1, r4
   1c692:	4640      	mov	r0, r8
   1c694:	f7ff fb9a 	bl	1bdcc <bt_att_req_send>
	if (err) {
   1c698:	4605      	mov	r5, r0
   1c69a:	2800      	cmp	r0, #0
   1c69c:	d0c6      	beq.n	1c62c <gatt_indicate+0x4c>
		bt_att_req_free(req);
   1c69e:	4620      	mov	r0, r4
   1c6a0:	f7ff fa46 	bl	1bb30 <bt_att_req_free>
   1c6a4:	e7c2      	b.n	1c62c <gatt_indicate+0x4c>
   1c6a6:	bf00      	nop
   1c6a8:	2000074c 	.word	0x2000074c
   1c6ac:	20000740 	.word	0x20000740
   1c6b0:	00031e3d 	.word	0x00031e3d
   1c6b4:	0002b63d 	.word	0x0002b63d
   1c6b8:	00031e53 	.word	0x00031e53

0001c6bc <bt_gatt_indicate>:
{
   1c6bc:	b530      	push	{r4, r5, lr}
   1c6be:	4605      	mov	r5, r0
   1c6c0:	b08b      	sub	sp, #44	; 0x2c
	__ASSERT(params, "invalid parameters\n");
   1c6c2:	460c      	mov	r4, r1
   1c6c4:	b971      	cbnz	r1, 1c6e4 <bt_gatt_indicate+0x28>
   1c6c6:	4949      	ldr	r1, [pc, #292]	; (1c7ec <bt_gatt_indicate+0x130>)
   1c6c8:	4a49      	ldr	r2, [pc, #292]	; (1c7f0 <bt_gatt_indicate+0x134>)
   1c6ca:	484a      	ldr	r0, [pc, #296]	; (1c7f4 <bt_gatt_indicate+0x138>)
   1c6cc:	f640 1348 	movw	r3, #2376	; 0x948
   1c6d0:	f00c fa63 	bl	28b9a <printk>
   1c6d4:	4848      	ldr	r0, [pc, #288]	; (1c7f8 <bt_gatt_indicate+0x13c>)
   1c6d6:	f00c fa60 	bl	28b9a <printk>
   1c6da:	4845      	ldr	r0, [pc, #276]	; (1c7f0 <bt_gatt_indicate+0x134>)
   1c6dc:	f640 1148 	movw	r1, #2376	; 0x948
   1c6e0:	f00c fc9c 	bl	2901c <assert_post_action>
	__ASSERT(params->attr || params->uuid, "invalid parameters\n");
   1c6e4:	6863      	ldr	r3, [r4, #4]
   1c6e6:	b983      	cbnz	r3, 1c70a <bt_gatt_indicate+0x4e>
   1c6e8:	6823      	ldr	r3, [r4, #0]
   1c6ea:	b973      	cbnz	r3, 1c70a <bt_gatt_indicate+0x4e>
   1c6ec:	4943      	ldr	r1, [pc, #268]	; (1c7fc <bt_gatt_indicate+0x140>)
   1c6ee:	4a40      	ldr	r2, [pc, #256]	; (1c7f0 <bt_gatt_indicate+0x134>)
   1c6f0:	4840      	ldr	r0, [pc, #256]	; (1c7f4 <bt_gatt_indicate+0x138>)
   1c6f2:	f640 1349 	movw	r3, #2377	; 0x949
   1c6f6:	f00c fa50 	bl	28b9a <printk>
   1c6fa:	483f      	ldr	r0, [pc, #252]	; (1c7f8 <bt_gatt_indicate+0x13c>)
   1c6fc:	f00c fa4d 	bl	28b9a <printk>
   1c700:	483b      	ldr	r0, [pc, #236]	; (1c7f0 <bt_gatt_indicate+0x134>)
   1c702:	f640 1149 	movw	r1, #2377	; 0x949
   1c706:	f00c fc89 	bl	2901c <assert_post_action>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c70a:	f3bf 8f5b 	dmb	ish
   1c70e:	4b3c      	ldr	r3, [pc, #240]	; (1c800 <bt_gatt_indicate+0x144>)
   1c710:	681b      	ldr	r3, [r3, #0]
   1c712:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
   1c716:	079a      	lsls	r2, r3, #30
   1c718:	d561      	bpl.n	1c7de <bt_gatt_indicate+0x122>
	if (conn && conn->state != BT_CONN_CONNECTED) {
   1c71a:	b115      	cbz	r5, 1c722 <bt_gatt_indicate+0x66>
   1c71c:	7aab      	ldrb	r3, [r5, #10]
   1c71e:	2b07      	cmp	r3, #7
   1c720:	d160      	bne.n	1c7e4 <bt_gatt_indicate+0x128>
	data.attr = params->attr;
   1c722:	6860      	ldr	r0, [r4, #4]
   1c724:	9005      	str	r0, [sp, #20]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c726:	f7ff fe3d 	bl	1c3a4 <bt_gatt_attr_get_handle>
	if (params->uuid) {
   1c72a:	6822      	ldr	r2, [r4, #0]
	data.handle = bt_gatt_attr_get_handle(data.attr);
   1c72c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (params->uuid) {
   1c730:	b33a      	cbz	r2, 1c782 <bt_gatt_indicate+0xc6>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c732:	a905      	add	r1, sp, #20
   1c734:	9102      	str	r1, [sp, #8]
   1c736:	4933      	ldr	r1, [pc, #204]	; (1c804 <bt_gatt_indicate+0x148>)
   1c738:	9101      	str	r1, [sp, #4]
   1c73a:	2101      	movs	r1, #1
	found->attr = NULL;
   1c73c:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c73e:	9100      	str	r1, [sp, #0]
   1c740:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
   1c744:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
   1c746:	f7ff fe79 	bl	1c43c <bt_gatt_foreach_attr_type>
	return found->attr ? true : false;
   1c74a:	9b05      	ldr	r3, [sp, #20]
		if (!gatt_find_by_uuid(&data, params->uuid)) {
   1c74c:	b91b      	cbnz	r3, 1c756 <bt_gatt_indicate+0x9a>
			return -ENOENT;
   1c74e:	f06f 0001 	mvn.w	r0, #1
}
   1c752:	b00b      	add	sp, #44	; 0x2c
   1c754:	bd30      	pop	{r4, r5, pc}
		params->attr = data.attr;
   1c756:	6063      	str	r3, [r4, #4]
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
   1c758:	9b05      	ldr	r3, [sp, #20]
   1c75a:	6818      	ldr	r0, [r3, #0]
   1c75c:	2300      	movs	r3, #0
   1c75e:	f88d 3010 	strb.w	r3, [sp, #16]
   1c762:	a904      	add	r1, sp, #16
   1c764:	f642 0303 	movw	r3, #10243	; 0x2803
   1c768:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c76c:	f00e f838 	bl	2a7e0 <bt_uuid_cmp>
   1c770:	b970      	cbnz	r0, 1c790 <bt_gatt_indicate+0xd4>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
   1c772:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
   1c774:	68c3      	ldr	r3, [r0, #12]
   1c776:	799b      	ldrb	r3, [r3, #6]
   1c778:	069b      	lsls	r3, r3, #26
   1c77a:	d405      	bmi.n	1c788 <bt_gatt_indicate+0xcc>
			return -EINVAL;
   1c77c:	f06f 0015 	mvn.w	r0, #21
   1c780:	e7e7      	b.n	1c752 <bt_gatt_indicate+0x96>
		if (!data.handle) {
   1c782:	2800      	cmp	r0, #0
   1c784:	d1e8      	bne.n	1c758 <bt_gatt_indicate+0x9c>
   1c786:	e7e2      	b.n	1c74e <bt_gatt_indicate+0x92>
		data.handle = bt_gatt_attr_value_handle(data.attr);
   1c788:	f00f faaa 	bl	2bce0 <bt_gatt_attr_value_handle>
   1c78c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (conn) {
   1c790:	f8bd 0018 	ldrh.w	r0, [sp, #24]
   1c794:	b13d      	cbz	r5, 1c7a6 <bt_gatt_indicate+0xea>
		params->_ref = 1;
   1c796:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
   1c798:	4601      	mov	r1, r0
		params->_ref = 1;
   1c79a:	75a3      	strb	r3, [r4, #22]
		return gatt_indicate(conn, data.handle, params);
   1c79c:	4622      	mov	r2, r4
   1c79e:	4628      	mov	r0, r5
   1c7a0:	f7ff ff1e 	bl	1c5e0 <gatt_indicate>
   1c7a4:	e7d5      	b.n	1c752 <bt_gatt_indicate+0x96>
	data.err = -ENOTCONN;
   1c7a6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c7aa:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
   1c7ac:	2302      	movs	r3, #2
   1c7ae:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c7b2:	f642 1302 	movw	r3, #10498	; 0x2902
   1c7b6:	f8ad 3012 	strh.w	r3, [sp, #18]
   1c7ba:	ab05      	add	r3, sp, #20
	params->_ref = 0;
   1c7bc:	75a5      	strb	r5, [r4, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c7be:	9302      	str	r3, [sp, #8]
   1c7c0:	4b11      	ldr	r3, [pc, #68]	; (1c808 <bt_gatt_indicate+0x14c>)
   1c7c2:	9301      	str	r3, [sp, #4]
   1c7c4:	2301      	movs	r3, #1
   1c7c6:	9300      	str	r3, [sp, #0]
   1c7c8:	aa04      	add	r2, sp, #16
   1c7ca:	462b      	mov	r3, r5
   1c7cc:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
   1c7d0:	9409      	str	r4, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
   1c7d2:	f88d 5010 	strb.w	r5, [sp, #16]
   1c7d6:	f7ff fe31 	bl	1c43c <bt_gatt_foreach_attr_type>
	return data.err;
   1c7da:	9807      	ldr	r0, [sp, #28]
   1c7dc:	e7b9      	b.n	1c752 <bt_gatt_indicate+0x96>
		return -EAGAIN;
   1c7de:	f06f 000a 	mvn.w	r0, #10
   1c7e2:	e7b6      	b.n	1c752 <bt_gatt_indicate+0x96>
		return -ENOTCONN;
   1c7e4:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1c7e8:	e7b3      	b.n	1c752 <bt_gatt_indicate+0x96>
   1c7ea:	bf00      	nop
   1c7ec:	00031e7a 	.word	0x00031e7a
   1c7f0:	00031d4a 	.word	0x00031d4a
   1c7f4:	0002e93e 	.word	0x0002e93e
   1c7f8:	00031e81 	.word	0x00031e81
   1c7fc:	00031e97 	.word	0x00031e97
   1c800:	20000374 	.word	0x20000374
   1c804:	0002b663 	.word	0x0002b663
   1c808:	0001c961 	.word	0x0001c961

0001c80c <sc_process>:
{
   1c80c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c80e:	f3bf 8f5b 	dmb	ish
   1c812:	6b03      	ldr	r3, [r0, #48]	; 0x30
   1c814:	f3bf 8f5b 	dmb	ish
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1c818:	079b      	lsls	r3, r3, #30
{
   1c81a:	4604      	mov	r4, r0
	__ASSERT(!atomic_test_bit(sc->flags, SC_INDICATE_PENDING),
   1c81c:	f100 0530 	add.w	r5, r0, #48	; 0x30
   1c820:	d50e      	bpl.n	1c840 <sc_process+0x34>
   1c822:	491d      	ldr	r1, [pc, #116]	; (1c898 <sc_process+0x8c>)
   1c824:	4a1d      	ldr	r2, [pc, #116]	; (1c89c <sc_process+0x90>)
   1c826:	481e      	ldr	r0, [pc, #120]	; (1c8a0 <sc_process+0x94>)
   1c828:	f240 33e7 	movw	r3, #999	; 0x3e7
   1c82c:	f00c f9b5 	bl	28b9a <printk>
   1c830:	481c      	ldr	r0, [pc, #112]	; (1c8a4 <sc_process+0x98>)
   1c832:	f00c f9b2 	bl	28b9a <printk>
   1c836:	4819      	ldr	r0, [pc, #100]	; (1c89c <sc_process+0x90>)
   1c838:	f240 31e7 	movw	r1, #999	; 0x3e7
   1c83c:	f00c fbee 	bl	2901c <assert_post_action>
	sc_range[0] = sys_cpu_to_le16(sc->start);
   1c840:	f854 3c08 	ldr.w	r3, [r4, #-8]
   1c844:	9301      	str	r3, [sp, #4]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c846:	f3bf 8f5b 	dmb	ish
   1c84a:	e855 3f00 	ldrex	r3, [r5]
   1c84e:	f023 0301 	bic.w	r3, r3, #1
   1c852:	e845 3200 	strex	r2, r3, [r5]
   1c856:	2a00      	cmp	r2, #0
   1c858:	d1f7      	bne.n	1c84a <sc_process+0x3e>
   1c85a:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
   1c85e:	4b12      	ldr	r3, [pc, #72]	; (1c8a8 <sc_process+0x9c>)
   1c860:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
   1c864:	4b11      	ldr	r3, [pc, #68]	; (1c8ac <sc_process+0xa0>)
   1c866:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
   1c86a:	ab01      	add	r3, sp, #4
	sc->start = 0U;
   1c86c:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
   1c86e:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
   1c872:	2304      	movs	r3, #4
	sc->start = 0U;
   1c874:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
   1c878:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
   1c87c:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
   1c880:	f1a4 0120 	sub.w	r1, r4, #32
   1c884:	f7ff ff1a 	bl	1c6bc <bt_gatt_indicate>
   1c888:	b918      	cbnz	r0, 1c892 <sc_process+0x86>
	atomic_set_bit(sc->flags, SC_INDICATE_PENDING);
   1c88a:	2101      	movs	r1, #1
   1c88c:	4628      	mov	r0, r5
   1c88e:	f00f f93c 	bl	2bb0a <atomic_set_bit>
}
   1c892:	b003      	add	sp, #12
   1c894:	bd30      	pop	{r4, r5, pc}
   1c896:	bf00      	nop
   1c898:	00031eb4 	.word	0x00031eb4
   1c89c:	00031d4a 	.word	0x00031d4a
   1c8a0:	0002e93e 	.word	0x0002e93e
   1c8a4:	00031ee5 	.word	0x00031ee5
   1c8a8:	0002ded8 	.word	0x0002ded8
   1c8ac:	0001c1ad 	.word	0x0001c1ad

0001c8b0 <gatt_notify>:
{
   1c8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c8b4:	4614      	mov	r4, r2
   1c8b6:	4688      	mov	r8, r1
	if (bt_gatt_check_perm(conn, params->attr,
   1c8b8:	2214      	movs	r2, #20
   1c8ba:	6861      	ldr	r1, [r4, #4]
{
   1c8bc:	4607      	mov	r7, r0
	if (bt_gatt_check_perm(conn, params->attr,
   1c8be:	f00f fa65 	bl	2bd8c <bt_gatt_check_perm>
   1c8c2:	b188      	cbz	r0, 1c8e8 <gatt_notify+0x38>
		BT_WARN("Link is not encrypted");
   1c8c4:	4922      	ldr	r1, [pc, #136]	; (1c950 <gatt_notify+0xa0>)
   1c8c6:	680b      	ldr	r3, [r1, #0]
   1c8c8:	f013 0f06 	tst.w	r3, #6
   1c8cc:	d008      	beq.n	1c8e0 <gatt_notify+0x30>
   1c8ce:	4b21      	ldr	r3, [pc, #132]	; (1c954 <gatt_notify+0xa4>)
   1c8d0:	4821      	ldr	r0, [pc, #132]	; (1c958 <gatt_notify+0xa8>)
   1c8d2:	1ac9      	subs	r1, r1, r3
   1c8d4:	0889      	lsrs	r1, r1, #2
   1c8d6:	0189      	lsls	r1, r1, #6
   1c8d8:	f041 0102 	orr.w	r1, r1, #2
   1c8dc:	f00c fcff 	bl	292de <log_0>
		return -EPERM;
   1c8e0:	f04f 30ff 	mov.w	r0, #4294967295
}
   1c8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				sizeof(*nfy) + params->len);
   1c8e8:	89a2      	ldrh	r2, [r4, #12]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1c8ea:	211b      	movs	r1, #27
   1c8ec:	3202      	adds	r2, #2
   1c8ee:	4638      	mov	r0, r7
   1c8f0:	f7fe fe6a 	bl	1b5c8 <bt_att_create_pdu>
	if (!buf) {
   1c8f4:	4605      	mov	r5, r0
   1c8f6:	b980      	cbnz	r0, 1c91a <gatt_notify+0x6a>
		BT_WARN("No buffer available to send notification");
   1c8f8:	4915      	ldr	r1, [pc, #84]	; (1c950 <gatt_notify+0xa0>)
   1c8fa:	680b      	ldr	r3, [r1, #0]
   1c8fc:	f013 0f06 	tst.w	r3, #6
   1c900:	d008      	beq.n	1c914 <gatt_notify+0x64>
   1c902:	4b14      	ldr	r3, [pc, #80]	; (1c954 <gatt_notify+0xa4>)
   1c904:	4815      	ldr	r0, [pc, #84]	; (1c95c <gatt_notify+0xac>)
   1c906:	1ac9      	subs	r1, r1, r3
   1c908:	0889      	lsrs	r1, r1, #2
   1c90a:	0189      	lsls	r1, r1, #6
   1c90c:	f041 0102 	orr.w	r1, r1, #2
   1c910:	f00c fce5 	bl	292de <log_0>
		return -ENOMEM;
   1c914:	f06f 000b 	mvn.w	r0, #11
   1c918:	e7e4      	b.n	1c8e4 <gatt_notify+0x34>
   1c91a:	f100 0908 	add.w	r9, r0, #8
   1c91e:	2102      	movs	r1, #2
   1c920:	4648      	mov	r0, r9
   1c922:	f003 fc9b 	bl	2025c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1c926:	4606      	mov	r6, r0
   1c928:	89a1      	ldrh	r1, [r4, #12]
   1c92a:	f826 8b02 	strh.w	r8, [r6], #2
   1c92e:	4648      	mov	r0, r9
   1c930:	f003 fc94 	bl	2025c <net_buf_simple_add>
   1c934:	89a2      	ldrh	r2, [r4, #12]
   1c936:	68a1      	ldr	r1, [r4, #8]
   1c938:	4630      	mov	r0, r6
   1c93a:	f010 f95c 	bl	2cbf6 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1c93e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1c942:	4629      	mov	r1, r5
   1c944:	4638      	mov	r0, r7
}
   1c946:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1c94a:	f7ff b9d1 	b.w	1bcf0 <bt_att_send>
   1c94e:	bf00      	nop
   1c950:	2000074c 	.word	0x2000074c
   1c954:	20000740 	.word	0x20000740
   1c958:	00031e3d 	.word	0x00031e3d
   1c95c:	00031f00 	.word	0x00031f00

0001c960 <notify_cb>:
{
   1c960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c962:	4b39      	ldr	r3, [pc, #228]	; (1ca48 <notify_cb+0xe8>)
{
   1c964:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c966:	6882      	ldr	r2, [r0, #8]
   1c968:	429a      	cmp	r2, r3
{
   1c96a:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1c96c:	d12d      	bne.n	1c9ca <notify_cb+0x6a>
	ccc = attr->user_data;
   1c96e:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
   1c970:	4b36      	ldr	r3, [pc, #216]	; (1ca4c <notify_cb+0xec>)
   1c972:	429f      	cmp	r7, r3
   1c974:	d119      	bne.n	1c9aa <notify_cb+0x4a>
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1c976:	4d36      	ldr	r5, [pc, #216]	; (1ca50 <notify_cb+0xf0>)
   1c978:	2300      	movs	r3, #0
   1c97a:	4669      	mov	r1, sp
   1c97c:	1c68      	adds	r0, r5, #1
   1c97e:	9300      	str	r3, [sp, #0]
   1c980:	f8cd 3003 	str.w	r3, [sp, #3]
   1c984:	f00e fecd 	bl	2b722 <bt_addr_le_cmp>
   1c988:	b178      	cbz	r0, 1c9aa <notify_cb+0x4a>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
   1c98a:	4629      	mov	r1, r5
   1c98c:	2207      	movs	r2, #7
   1c98e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c992:	f7fd fbe9 	bl	1a168 <bt_conn_lookup_state_le>
			if (!conn) {
   1c996:	b9e0      	cbnz	r0, 1c9d2 <notify_cb+0x72>
				sc = (struct sc_data *)data->ind_params->data;
   1c998:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
   1c99a:	4629      	mov	r1, r5
				sc = (struct sc_data *)data->ind_params->data;
   1c99c:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
   1c99e:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c9a2:	8853      	ldrh	r3, [r2, #2]
   1c9a4:	8812      	ldrh	r2, [r2, #0]
   1c9a6:	f7ff fb55 	bl	1c054 <sc_save>
		if (cfg->value != data->type) {
   1c9aa:	893a      	ldrh	r2, [r7, #8]
   1c9ac:	89a3      	ldrh	r3, [r4, #12]
   1c9ae:	429a      	cmp	r2, r3
   1c9b0:	d10b      	bne.n	1c9ca <notify_cb+0x6a>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
   1c9b2:	4639      	mov	r1, r7
   1c9b4:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c9b8:	f7fd fb8e 	bl	1a0d8 <bt_conn_lookup_addr_le>
		if (!conn) {
   1c9bc:	4605      	mov	r5, r0
   1c9be:	b120      	cbz	r0, 1c9ca <notify_cb+0x6a>
		if (conn->state != BT_CONN_CONNECTED) {
   1c9c0:	7a83      	ldrb	r3, [r0, #10]
   1c9c2:	2b07      	cmp	r3, #7
   1c9c4:	d008      	beq.n	1c9d8 <notify_cb+0x78>
			bt_conn_unref(conn);
   1c9c6:	f7fd f8f5 	bl	19bb4 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
   1c9ca:	2701      	movs	r7, #1
}
   1c9cc:	4638      	mov	r0, r7
   1c9ce:	b003      	add	sp, #12
   1c9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_conn_unref(conn);
   1c9d2:	f7fd f8ef 	bl	19bb4 <bt_conn_unref>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
   1c9d6:	e7e8      	b.n	1c9aa <notify_cb+0x4a>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
   1c9d8:	697b      	ldr	r3, [r7, #20]
   1c9da:	b123      	cbz	r3, 1c9e6 <notify_cb+0x86>
   1c9dc:	4631      	mov	r1, r6
   1c9de:	4798      	blx	r3
   1c9e0:	b908      	cbnz	r0, 1c9e6 <notify_cb+0x86>
			bt_conn_unref(conn);
   1c9e2:	4628      	mov	r0, r5
   1c9e4:	e7ef      	b.n	1c9c6 <notify_cb+0x66>
		if (bt_gatt_check_perm(conn, attr,
   1c9e6:	2214      	movs	r2, #20
   1c9e8:	4631      	mov	r1, r6
   1c9ea:	4628      	mov	r0, r5
   1c9ec:	f00f f9ce 	bl	2bd8c <bt_gatt_check_perm>
   1c9f0:	4607      	mov	r7, r0
   1c9f2:	b170      	cbz	r0, 1ca12 <notify_cb+0xb2>
			BT_WARN("Link is not encrypted");
   1c9f4:	4917      	ldr	r1, [pc, #92]	; (1ca54 <notify_cb+0xf4>)
   1c9f6:	680b      	ldr	r3, [r1, #0]
   1c9f8:	f013 0f06 	tst.w	r3, #6
   1c9fc:	d0e5      	beq.n	1c9ca <notify_cb+0x6a>
   1c9fe:	4b16      	ldr	r3, [pc, #88]	; (1ca58 <notify_cb+0xf8>)
   1ca00:	4816      	ldr	r0, [pc, #88]	; (1ca5c <notify_cb+0xfc>)
   1ca02:	1ac9      	subs	r1, r1, r3
   1ca04:	0889      	lsrs	r1, r1, #2
   1ca06:	0189      	lsls	r1, r1, #6
   1ca08:	f041 0102 	orr.w	r1, r1, #2
   1ca0c:	f00c fc67 	bl	292de <log_0>
   1ca10:	e7db      	b.n	1c9ca <notify_cb+0x6a>
		if (data->type == BT_GATT_CCC_INDICATE) {
   1ca12:	89a3      	ldrh	r3, [r4, #12]
   1ca14:	88a1      	ldrh	r1, [r4, #4]
   1ca16:	6922      	ldr	r2, [r4, #16]
   1ca18:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
   1ca1a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
   1ca1c:	d10f      	bne.n	1ca3e <notify_cb+0xde>
			err = gatt_indicate(conn, data->handle,
   1ca1e:	f7ff fddf 	bl	1c5e0 <gatt_indicate>
			if (err == 0) {
   1ca22:	4606      	mov	r6, r0
   1ca24:	b918      	cbnz	r0, 1ca2e <notify_cb+0xce>
				data->ind_params->_ref++;
   1ca26:	6922      	ldr	r2, [r4, #16]
   1ca28:	7d93      	ldrb	r3, [r2, #22]
   1ca2a:	3301      	adds	r3, #1
   1ca2c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
   1ca2e:	4628      	mov	r0, r5
   1ca30:	f7fd f8c0 	bl	19bb4 <bt_conn_unref>
		if (err < 0) {
   1ca34:	2e00      	cmp	r6, #0
   1ca36:	dbc9      	blt.n	1c9cc <notify_cb+0x6c>
		data->err = 0;
   1ca38:	2300      	movs	r3, #0
   1ca3a:	60a3      	str	r3, [r4, #8]
   1ca3c:	e7c5      	b.n	1c9ca <notify_cb+0x6a>
			err = gatt_notify(conn, data->handle, data->nfy_params);
   1ca3e:	f7ff ff37 	bl	1c8b0 <gatt_notify>
   1ca42:	4606      	mov	r6, r0
   1ca44:	e7f3      	b.n	1ca2e <notify_cb+0xce>
   1ca46:	bf00      	nop
   1ca48:	0001bf39 	.word	0x0001bf39
   1ca4c:	20000554 	.word	0x20000554
   1ca50:	20002a28 	.word	0x20002a28
   1ca54:	2000074c 	.word	0x2000074c
   1ca58:	20000740 	.word	0x20000740
   1ca5c:	00031e3d 	.word	0x00031e3d

0001ca60 <update_ccc>:
{
   1ca60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ca64:	4b32      	ldr	r3, [pc, #200]	; (1cb30 <update_ccc+0xd0>)
   1ca66:	6881      	ldr	r1, [r0, #8]
   1ca68:	4299      	cmp	r1, r3
{
   1ca6a:	4605      	mov	r5, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
   1ca6c:	d122      	bne.n	1cab4 <update_ccc+0x54>
	ccc = attr->user_data;
   1ca6e:	f8d0 800c 	ldr.w	r8, [r0, #12]
   1ca72:	4f30      	ldr	r7, [pc, #192]	; (1cb34 <update_ccc+0xd4>)
   1ca74:	4c30      	ldr	r4, [pc, #192]	; (1cb38 <update_ccc+0xd8>)
		if (!cfg->value ||
   1ca76:	f8b8 3008 	ldrh.w	r3, [r8, #8]
	struct bt_conn *conn = data->conn;
   1ca7a:	6816      	ldr	r6, [r2, #0]
   1ca7c:	1b3c      	subs	r4, r7, r4
   1ca7e:	08a4      	lsrs	r4, r4, #2
		if (!cfg->value ||
   1ca80:	b1c3      	cbz	r3, 1cab4 <update_ccc+0x54>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
   1ca82:	4642      	mov	r2, r8
   1ca84:	4630      	mov	r0, r6
   1ca86:	f812 1b01 	ldrb.w	r1, [r2], #1
   1ca8a:	f00e f8f7 	bl	2ac7c <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
   1ca8e:	b188      	cbz	r0, 1cab4 <update_ccc+0x54>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
   1ca90:	222a      	movs	r2, #42	; 0x2a
   1ca92:	4629      	mov	r1, r5
   1ca94:	4630      	mov	r0, r6
   1ca96:	f00f f979 	bl	2bd8c <bt_gatt_check_perm>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
   1ca9a:	2803      	cmp	r0, #3
   1ca9c:	d10e      	bne.n	1cabc <update_ccc+0x5c>
				BT_WARN("CCC %p not writable", attr);
   1ca9e:	683b      	ldr	r3, [r7, #0]
   1caa0:	f013 0f06 	tst.w	r3, #6
   1caa4:	d006      	beq.n	1cab4 <update_ccc+0x54>
   1caa6:	01a2      	lsls	r2, r4, #6
   1caa8:	4824      	ldr	r0, [pc, #144]	; (1cb3c <update_ccc+0xdc>)
   1caaa:	f042 0202 	orr.w	r2, r2, #2
   1caae:	4629      	mov	r1, r5
   1cab0:	f00c fc22 	bl	292f8 <log_1>
}
   1cab4:	2001      	movs	r0, #1
   1cab6:	b002      	add	sp, #8
   1cab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gatt_ccc_changed(attr, ccc);
   1cabc:	4641      	mov	r1, r8
   1cabe:	4628      	mov	r0, r5
   1cac0:	f00e fdb2 	bl	2b628 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
   1cac4:	4b1e      	ldr	r3, [pc, #120]	; (1cb40 <update_ccc+0xe0>)
   1cac6:	4598      	cmp	r8, r3
   1cac8:	d1f4      	bne.n	1cab4 <update_ccc+0x54>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1caca:	7a30      	ldrb	r0, [r6, #8]
   1cacc:	f106 0190 	add.w	r1, r6, #144	; 0x90
   1cad0:	f7ff fa04 	bl	1bedc <find_sc_cfg>
	if (!cfg) {
   1cad4:	2800      	cmp	r0, #0
   1cad6:	d0ed      	beq.n	1cab4 <update_ccc+0x54>
	if (!(cfg->data.start || cfg->data.end)) {
   1cad8:	8902      	ldrh	r2, [r0, #8]
   1cada:	8943      	ldrh	r3, [r0, #10]
   1cadc:	ea53 0102 	orrs.w	r1, r3, r2
   1cae0:	d0e8      	beq.n	1cab4 <update_ccc+0x54>
	index = bt_conn_index(conn);
   1cae2:	4630      	mov	r0, r6
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
   1cae4:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
   1cae8:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
   1caec:	f7fd f9ac 	bl	19e48 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1caf0:	4914      	ldr	r1, [pc, #80]	; (1cb44 <update_ccc+0xe4>)
   1caf2:	4a15      	ldr	r2, [pc, #84]	; (1cb48 <update_ccc+0xe8>)
   1caf4:	2318      	movs	r3, #24
   1caf6:	fb03 1300 	mla	r3, r3, r0, r1
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cafa:	b200      	sxth	r0, r0
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
   1cafc:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
   1cafe:	4a13      	ldr	r2, [pc, #76]	; (1cb4c <update_ccc+0xec>)
   1cb00:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
   1cb02:	aa01      	add	r2, sp, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cb04:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	sc_restore_params[index].data = &sc_range[0];
   1cb08:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
   1cb0a:	2204      	movs	r2, #4
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cb0c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
	sc_restore_params[index].len = sizeof(sc_range);
   1cb10:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
   1cb12:	4630      	mov	r0, r6
   1cb14:	f7ff fdd2 	bl	1c6bc <bt_gatt_indicate>
   1cb18:	2800      	cmp	r0, #0
   1cb1a:	d0cb      	beq.n	1cab4 <update_ccc+0x54>
		BT_ERR("SC restore indication failed");
   1cb1c:	683b      	ldr	r3, [r7, #0]
   1cb1e:	075b      	lsls	r3, r3, #29
   1cb20:	d0c8      	beq.n	1cab4 <update_ccc+0x54>
   1cb22:	01a1      	lsls	r1, r4, #6
   1cb24:	480a      	ldr	r0, [pc, #40]	; (1cb50 <update_ccc+0xf0>)
   1cb26:	f041 0101 	orr.w	r1, r1, #1
   1cb2a:	f00c fbd8 	bl	292de <log_0>
   1cb2e:	e7c1      	b.n	1cab4 <update_ccc+0x54>
   1cb30:	0001bf39 	.word	0x0001bf39
   1cb34:	2000074c 	.word	0x2000074c
   1cb38:	20000740 	.word	0x20000740
   1cb3c:	00031f29 	.word	0x00031f29
   1cb40:	20000554 	.word	0x20000554
   1cb44:	200027a0 	.word	0x200027a0
   1cb48:	0002ded8 	.word	0x0002ded8
   1cb4c:	0002bb27 	.word	0x0002bb27
   1cb50:	00031f3d 	.word	0x00031f3d

0001cb54 <bt_gatt_exchange_mtu>:
{
   1cb54:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1cb56:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameter\n");
   1cb58:	4604      	mov	r4, r0
   1cb5a:	b970      	cbnz	r0, 1cb7a <bt_gatt_exchange_mtu+0x26>
   1cb5c:	4918      	ldr	r1, [pc, #96]	; (1cbc0 <bt_gatt_exchange_mtu+0x6c>)
   1cb5e:	4a19      	ldr	r2, [pc, #100]	; (1cbc4 <bt_gatt_exchange_mtu+0x70>)
   1cb60:	4819      	ldr	r0, [pc, #100]	; (1cbc8 <bt_gatt_exchange_mtu+0x74>)
   1cb62:	f640 338f 	movw	r3, #2959	; 0xb8f
   1cb66:	f00c f818 	bl	28b9a <printk>
   1cb6a:	4818      	ldr	r0, [pc, #96]	; (1cbcc <bt_gatt_exchange_mtu+0x78>)
   1cb6c:	f00c f815 	bl	28b9a <printk>
   1cb70:	4814      	ldr	r0, [pc, #80]	; (1cbc4 <bt_gatt_exchange_mtu+0x70>)
   1cb72:	f640 318f 	movw	r1, #2959	; 0xb8f
   1cb76:	f00c fa51 	bl	2901c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1cb7a:	b10d      	cbz	r5, 1cb80 <bt_gatt_exchange_mtu+0x2c>
   1cb7c:	682b      	ldr	r3, [r5, #0]
   1cb7e:	b973      	cbnz	r3, 1cb9e <bt_gatt_exchange_mtu+0x4a>
   1cb80:	4913      	ldr	r1, [pc, #76]	; (1cbd0 <bt_gatt_exchange_mtu+0x7c>)
   1cb82:	4a10      	ldr	r2, [pc, #64]	; (1cbc4 <bt_gatt_exchange_mtu+0x70>)
   1cb84:	4810      	ldr	r0, [pc, #64]	; (1cbc8 <bt_gatt_exchange_mtu+0x74>)
   1cb86:	f44f 6339 	mov.w	r3, #2960	; 0xb90
   1cb8a:	f00c f806 	bl	28b9a <printk>
   1cb8e:	4811      	ldr	r0, [pc, #68]	; (1cbd4 <bt_gatt_exchange_mtu+0x80>)
   1cb90:	f00c f803 	bl	28b9a <printk>
   1cb94:	480b      	ldr	r0, [pc, #44]	; (1cbc4 <bt_gatt_exchange_mtu+0x70>)
   1cb96:	f44f 6139 	mov.w	r1, #2960	; 0xb90
   1cb9a:	f00c fa3f 	bl	2901c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1cb9e:	7aa3      	ldrb	r3, [r4, #10]
   1cba0:	2b07      	cmp	r3, #7
   1cba2:	d10a      	bne.n	1cbba <bt_gatt_exchange_mtu+0x66>
	return gatt_req_send(conn, gatt_mtu_rsp, params,
   1cba4:	2302      	movs	r3, #2
   1cba6:	e9cd 3300 	strd	r3, r3, [sp]
   1cbaa:	490b      	ldr	r1, [pc, #44]	; (1cbd8 <bt_gatt_exchange_mtu+0x84>)
   1cbac:	4b0b      	ldr	r3, [pc, #44]	; (1cbdc <bt_gatt_exchange_mtu+0x88>)
   1cbae:	462a      	mov	r2, r5
   1cbb0:	4620      	mov	r0, r4
   1cbb2:	f00f f861 	bl	2bc78 <gatt_req_send>
}
   1cbb6:	b003      	add	sp, #12
   1cbb8:	bd30      	pop	{r4, r5, pc}
		return -ENOTCONN;
   1cbba:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1cbbe:	e7fa      	b.n	1cbb6 <bt_gatt_exchange_mtu+0x62>
   1cbc0:	000329ff 	.word	0x000329ff
   1cbc4:	00031d4a 	.word	0x00031d4a
   1cbc8:	0002e93e 	.word	0x0002e93e
   1cbcc:	00031f5a 	.word	0x00031f5a
   1cbd0:	00031f74 	.word	0x00031f74
   1cbd4:	00031e81 	.word	0x00031e81
   1cbd8:	0002b66b 	.word	0x0002b66b
   1cbdc:	0002b759 	.word	0x0002b759

0001cbe0 <bt_gatt_discover>:
{
   1cbe0:	b570      	push	{r4, r5, r6, lr}
   1cbe2:	460c      	mov	r4, r1
   1cbe4:	b086      	sub	sp, #24
	__ASSERT(conn, "invalid parameters\n");
   1cbe6:	4605      	mov	r5, r0
   1cbe8:	b970      	cbnz	r0, 1cc08 <bt_gatt_discover+0x28>
   1cbea:	4981      	ldr	r1, [pc, #516]	; (1cdf0 <bt_gatt_discover+0x210>)
   1cbec:	4a81      	ldr	r2, [pc, #516]	; (1cdf4 <bt_gatt_discover+0x214>)
   1cbee:	4882      	ldr	r0, [pc, #520]	; (1cdf8 <bt_gatt_discover+0x218>)
   1cbf0:	f640 63bd 	movw	r3, #3773	; 0xebd
   1cbf4:	f00b ffd1 	bl	28b9a <printk>
   1cbf8:	4880      	ldr	r0, [pc, #512]	; (1cdfc <bt_gatt_discover+0x21c>)
   1cbfa:	f00b ffce 	bl	28b9a <printk>
   1cbfe:	487d      	ldr	r0, [pc, #500]	; (1cdf4 <bt_gatt_discover+0x214>)
   1cc00:	f640 61bd 	movw	r1, #3773	; 0xebd
   1cc04:	f00c fa0a 	bl	2901c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1cc08:	b10c      	cbz	r4, 1cc0e <bt_gatt_discover+0x2e>
   1cc0a:	6863      	ldr	r3, [r4, #4]
   1cc0c:	b973      	cbnz	r3, 1cc2c <bt_gatt_discover+0x4c>
   1cc0e:	497c      	ldr	r1, [pc, #496]	; (1ce00 <bt_gatt_discover+0x220>)
   1cc10:	4a78      	ldr	r2, [pc, #480]	; (1cdf4 <bt_gatt_discover+0x214>)
   1cc12:	4879      	ldr	r0, [pc, #484]	; (1cdf8 <bt_gatt_discover+0x218>)
   1cc14:	f640 63be 	movw	r3, #3774	; 0xebe
   1cc18:	f00b ffbf 	bl	28b9a <printk>
   1cc1c:	4877      	ldr	r0, [pc, #476]	; (1cdfc <bt_gatt_discover+0x21c>)
   1cc1e:	f00b ffbc 	bl	28b9a <printk>
   1cc22:	4874      	ldr	r0, [pc, #464]	; (1cdf4 <bt_gatt_discover+0x214>)
   1cc24:	f640 61be 	movw	r1, #3774	; 0xebe
   1cc28:	f00c f9f8 	bl	2901c <assert_post_action>
	__ASSERT((params->start_handle && params->end_handle),
   1cc2c:	8923      	ldrh	r3, [r4, #8]
   1cc2e:	b10b      	cbz	r3, 1cc34 <bt_gatt_discover+0x54>
   1cc30:	89e3      	ldrh	r3, [r4, #14]
   1cc32:	b973      	cbnz	r3, 1cc52 <bt_gatt_discover+0x72>
   1cc34:	4973      	ldr	r1, [pc, #460]	; (1ce04 <bt_gatt_discover+0x224>)
   1cc36:	4a6f      	ldr	r2, [pc, #444]	; (1cdf4 <bt_gatt_discover+0x214>)
   1cc38:	486f      	ldr	r0, [pc, #444]	; (1cdf8 <bt_gatt_discover+0x218>)
   1cc3a:	f640 63bf 	movw	r3, #3775	; 0xebf
   1cc3e:	f00b ffac 	bl	28b9a <printk>
   1cc42:	486e      	ldr	r0, [pc, #440]	; (1cdfc <bt_gatt_discover+0x21c>)
   1cc44:	f00b ffa9 	bl	28b9a <printk>
   1cc48:	486a      	ldr	r0, [pc, #424]	; (1cdf4 <bt_gatt_discover+0x214>)
   1cc4a:	f640 61bf 	movw	r1, #3775	; 0xebf
   1cc4e:	f00c f9e5 	bl	2901c <assert_post_action>
	__ASSERT((params->start_handle <= params->end_handle),
   1cc52:	8922      	ldrh	r2, [r4, #8]
   1cc54:	89e3      	ldrh	r3, [r4, #14]
   1cc56:	429a      	cmp	r2, r3
   1cc58:	d90e      	bls.n	1cc78 <bt_gatt_discover+0x98>
   1cc5a:	496b      	ldr	r1, [pc, #428]	; (1ce08 <bt_gatt_discover+0x228>)
   1cc5c:	4a65      	ldr	r2, [pc, #404]	; (1cdf4 <bt_gatt_discover+0x214>)
   1cc5e:	4866      	ldr	r0, [pc, #408]	; (1cdf8 <bt_gatt_discover+0x218>)
   1cc60:	f640 63c1 	movw	r3, #3777	; 0xec1
   1cc64:	f00b ff99 	bl	28b9a <printk>
   1cc68:	4864      	ldr	r0, [pc, #400]	; (1cdfc <bt_gatt_discover+0x21c>)
   1cc6a:	f00b ff96 	bl	28b9a <printk>
   1cc6e:	4861      	ldr	r0, [pc, #388]	; (1cdf4 <bt_gatt_discover+0x214>)
   1cc70:	f640 61c1 	movw	r1, #3777	; 0xec1
   1cc74:	f00c f9d2 	bl	2901c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1cc78:	7aab      	ldrb	r3, [r5, #10]
   1cc7a:	2b07      	cmp	r3, #7
   1cc7c:	f040 80b5 	bne.w	1cdea <bt_gatt_discover+0x20a>
	switch (params->type) {
   1cc80:	7c21      	ldrb	r1, [r4, #16]
   1cc82:	2906      	cmp	r1, #6
   1cc84:	f200 80a5 	bhi.w	1cdd2 <bt_gatt_discover+0x1f2>
   1cc88:	e8df f001 	tbb	[pc, r1]
   1cc8c:	62620404 	.word	0x62620404
   1cc90:	9c6a      	.short	0x9c6a
   1cc92:	2e          	.byte	0x2e
   1cc93:	00          	.byte	0x00
		if (params->uuid) {
   1cc94:	6823      	ldr	r3, [r4, #0]
   1cc96:	b1fb      	cbz	r3, 1ccd8 <bt_gatt_discover+0xf8>
	switch (params->uuid->type) {
   1cc98:	7819      	ldrb	r1, [r3, #0]
   1cc9a:	b179      	cbz	r1, 1ccbc <bt_gatt_discover+0xdc>
   1cc9c:	2902      	cmp	r1, #2
   1cc9e:	d019      	beq.n	1ccd4 <bt_gatt_discover+0xf4>
		BT_ERR("Unknown UUID type %u", params->uuid->type);
   1cca0:	4a5a      	ldr	r2, [pc, #360]	; (1ce0c <bt_gatt_discover+0x22c>)
   1cca2:	6813      	ldr	r3, [r2, #0]
   1cca4:	0758      	lsls	r0, r3, #29
   1cca6:	d021      	beq.n	1ccec <bt_gatt_discover+0x10c>
   1cca8:	4b59      	ldr	r3, [pc, #356]	; (1ce10 <bt_gatt_discover+0x230>)
   1ccaa:	485a      	ldr	r0, [pc, #360]	; (1ce14 <bt_gatt_discover+0x234>)
   1ccac:	1ad2      	subs	r2, r2, r3
   1ccae:	0892      	lsrs	r2, r2, #2
   1ccb0:	0192      	lsls	r2, r2, #6
   1ccb2:	f042 0201 	orr.w	r2, r2, #1
		BT_ERR("Invalid discovery type: %u", params->type);
   1ccb6:	f00c fb1f 	bl	292f8 <log_1>
   1ccba:	e017      	b.n	1ccec <bt_gatt_discover+0x10c>
		len += BT_UUID_SIZE_16;
   1ccbc:	2308      	movs	r3, #8
	return gatt_req_send(conn, gatt_find_type_rsp, params,
   1ccbe:	9301      	str	r3, [sp, #4]
   1ccc0:	2306      	movs	r3, #6
   1ccc2:	9300      	str	r3, [sp, #0]
   1ccc4:	4954      	ldr	r1, [pc, #336]	; (1ce18 <bt_gatt_discover+0x238>)
   1ccc6:	4b55      	ldr	r3, [pc, #340]	; (1ce1c <bt_gatt_discover+0x23c>)
   1ccc8:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1ccca:	4628      	mov	r0, r5
   1cccc:	f00e ffd4 	bl	2bc78 <gatt_req_send>
}
   1ccd0:	b006      	add	sp, #24
   1ccd2:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->uuid->type) {
   1ccd4:	2316      	movs	r3, #22
   1ccd6:	e7f2      	b.n	1ccbe <bt_gatt_discover+0xde>
	return gatt_req_send(conn, gatt_read_group_rsp, params,
   1ccd8:	2310      	movs	r3, #16
   1ccda:	2104      	movs	r1, #4
   1ccdc:	e9cd 3100 	strd	r3, r1, [sp]
   1cce0:	4622      	mov	r2, r4
   1cce2:	4b4f      	ldr	r3, [pc, #316]	; (1ce20 <bt_gatt_discover+0x240>)
   1cce4:	494f      	ldr	r1, [pc, #316]	; (1ce24 <bt_gatt_discover+0x244>)
   1cce6:	e7f0      	b.n	1ccca <bt_gatt_discover+0xea>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1cce8:	6820      	ldr	r0, [r4, #0]
   1ccea:	b910      	cbnz	r0, 1ccf2 <bt_gatt_discover+0x112>
		return -EINVAL;
   1ccec:	f06f 0015 	mvn.w	r0, #21
   1ccf0:	e7ee      	b.n	1ccd0 <bt_gatt_discover+0xf0>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1ccf2:	7806      	ldrb	r6, [r0, #0]
   1ccf4:	2e00      	cmp	r6, #0
   1ccf6:	d1f9      	bne.n	1ccec <bt_gatt_discover+0x10c>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1ccf8:	f44f 5324 	mov.w	r3, #10496	; 0x2900
   1ccfc:	a902      	add	r1, sp, #8
   1ccfe:	f88d 6008 	strb.w	r6, [sp, #8]
   1cd02:	f8ad 300a 	strh.w	r3, [sp, #10]
   1cd06:	f00d fd6b 	bl	2a7e0 <bt_uuid_cmp>
		if (!(params->uuid && params->uuid->type == BT_UUID_TYPE_16 &&
   1cd0a:	b308      	cbz	r0, 1cd50 <bt_gatt_discover+0x170>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1cd0c:	f642 1302 	movw	r3, #10498	; 0x2902
   1cd10:	6820      	ldr	r0, [r4, #0]
   1cd12:	f88d 600c 	strb.w	r6, [sp, #12]
   1cd16:	a903      	add	r1, sp, #12
   1cd18:	f8ad 300e 	strh.w	r3, [sp, #14]
   1cd1c:	f00d fd60 	bl	2a7e0 <bt_uuid_cmp>
		      (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_CEP) ||
   1cd20:	b1b0      	cbz	r0, 1cd50 <bt_gatt_discover+0x170>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1cd22:	f642 1303 	movw	r3, #10499	; 0x2903
   1cd26:	6820      	ldr	r0, [r4, #0]
   1cd28:	f88d 6010 	strb.w	r6, [sp, #16]
   1cd2c:	a904      	add	r1, sp, #16
   1cd2e:	f8ad 3012 	strh.w	r3, [sp, #18]
   1cd32:	f00d fd55 	bl	2a7e0 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CCC) ||
   1cd36:	b158      	cbz	r0, 1cd50 <bt_gatt_discover+0x170>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CPF)))) {
   1cd38:	f642 1304 	movw	r3, #10500	; 0x2904
   1cd3c:	6820      	ldr	r0, [r4, #0]
   1cd3e:	f88d 6014 	strb.w	r6, [sp, #20]
   1cd42:	a905      	add	r1, sp, #20
   1cd44:	f8ad 3016 	strh.w	r3, [sp, #22]
   1cd48:	f00d fd4a 	bl	2a7e0 <bt_uuid_cmp>
		       !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SCC) ||
   1cd4c:	2800      	cmp	r0, #0
   1cd4e:	d1cd      	bne.n	1ccec <bt_gatt_discover+0x10c>
	return gatt_req_send(conn, gatt_read_type_rsp, params,
   1cd50:	2308      	movs	r3, #8
   1cd52:	2204      	movs	r2, #4
   1cd54:	e9cd 3200 	strd	r3, r2, [sp]
   1cd58:	4933      	ldr	r1, [pc, #204]	; (1ce28 <bt_gatt_discover+0x248>)
   1cd5a:	4b34      	ldr	r3, [pc, #208]	; (1ce2c <bt_gatt_discover+0x24c>)
   1cd5c:	4622      	mov	r2, r4
   1cd5e:	e7b4      	b.n	1ccca <bt_gatt_discover+0xea>
		if (params->uuid &&
   1cd60:	6820      	ldr	r0, [r4, #0]
   1cd62:	b378      	cbz	r0, 1cdc4 <bt_gatt_discover+0x1e4>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1cd64:	2600      	movs	r6, #0
   1cd66:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1cd6a:	a902      	add	r1, sp, #8
   1cd6c:	f88d 6008 	strb.w	r6, [sp, #8]
   1cd70:	f8ad 300a 	strh.w	r3, [sp, #10]
   1cd74:	f00d fd34 	bl	2a7e0 <bt_uuid_cmp>
		if (params->uuid &&
   1cd78:	2800      	cmp	r0, #0
   1cd7a:	d0b7      	beq.n	1ccec <bt_gatt_discover+0x10c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1cd7c:	f642 0301 	movw	r3, #10241	; 0x2801
   1cd80:	6820      	ldr	r0, [r4, #0]
   1cd82:	f88d 600c 	strb.w	r6, [sp, #12]
   1cd86:	a903      	add	r1, sp, #12
   1cd88:	f8ad 300e 	strh.w	r3, [sp, #14]
   1cd8c:	f00d fd28 	bl	2a7e0 <bt_uuid_cmp>
		    (!bt_uuid_cmp(params->uuid, BT_UUID_GATT_PRIMARY) ||
   1cd90:	2800      	cmp	r0, #0
   1cd92:	d0ab      	beq.n	1ccec <bt_gatt_discover+0x10c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1cd94:	f642 0302 	movw	r3, #10242	; 0x2802
   1cd98:	6820      	ldr	r0, [r4, #0]
   1cd9a:	f88d 6010 	strb.w	r6, [sp, #16]
   1cd9e:	a904      	add	r1, sp, #16
   1cda0:	f8ad 3012 	strh.w	r3, [sp, #18]
   1cda4:	f00d fd1c 	bl	2a7e0 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_SECONDARY) ||
   1cda8:	2800      	cmp	r0, #0
   1cdaa:	d09f      	beq.n	1ccec <bt_gatt_discover+0x10c>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_CHRC))) {
   1cdac:	f642 0303 	movw	r3, #10243	; 0x2803
   1cdb0:	6820      	ldr	r0, [r4, #0]
   1cdb2:	f88d 6014 	strb.w	r6, [sp, #20]
   1cdb6:	a905      	add	r1, sp, #20
   1cdb8:	f8ad 3016 	strh.w	r3, [sp, #22]
   1cdbc:	f00d fd10 	bl	2a7e0 <bt_uuid_cmp>
		     !bt_uuid_cmp(params->uuid, BT_UUID_GATT_INCLUDE) ||
   1cdc0:	2800      	cmp	r0, #0
   1cdc2:	d093      	beq.n	1ccec <bt_gatt_discover+0x10c>
	return gatt_req_send(conn, gatt_find_info_rsp, params,
   1cdc4:	2304      	movs	r3, #4
   1cdc6:	e9cd 3300 	strd	r3, r3, [sp]
   1cdca:	4919      	ldr	r1, [pc, #100]	; (1ce30 <bt_gatt_discover+0x250>)
   1cdcc:	4b19      	ldr	r3, [pc, #100]	; (1ce34 <bt_gatt_discover+0x254>)
   1cdce:	4622      	mov	r2, r4
   1cdd0:	e77b      	b.n	1ccca <bt_gatt_discover+0xea>
		BT_ERR("Invalid discovery type: %u", params->type);
   1cdd2:	4a0e      	ldr	r2, [pc, #56]	; (1ce0c <bt_gatt_discover+0x22c>)
   1cdd4:	6813      	ldr	r3, [r2, #0]
   1cdd6:	075b      	lsls	r3, r3, #29
   1cdd8:	d088      	beq.n	1ccec <bt_gatt_discover+0x10c>
   1cdda:	4b0d      	ldr	r3, [pc, #52]	; (1ce10 <bt_gatt_discover+0x230>)
   1cddc:	4816      	ldr	r0, [pc, #88]	; (1ce38 <bt_gatt_discover+0x258>)
   1cdde:	1ad2      	subs	r2, r2, r3
   1cde0:	0892      	lsrs	r2, r2, #2
   1cde2:	0192      	lsls	r2, r2, #6
   1cde4:	f042 0201 	orr.w	r2, r2, #1
   1cde8:	e765      	b.n	1ccb6 <bt_gatt_discover+0xd6>
		return -ENOTCONN;
   1cdea:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1cdee:	e76f      	b.n	1ccd0 <bt_gatt_discover+0xf0>
   1cdf0:	000329ff 	.word	0x000329ff
   1cdf4:	00031d4a 	.word	0x00031d4a
   1cdf8:	0002e93e 	.word	0x0002e93e
   1cdfc:	00031e81 	.word	0x00031e81
   1ce00:	00031f74 	.word	0x00031f74
   1ce04:	00031f8b 	.word	0x00031f8b
   1ce08:	00031fb8 	.word	0x00031fb8
   1ce0c:	2000074c 	.word	0x2000074c
   1ce10:	20000740 	.word	0x20000740
   1ce14:	00031fe5 	.word	0x00031fe5
   1ce18:	0002be0d 	.word	0x0002be0d
   1ce1c:	0002ba8f 	.word	0x0002ba8f
   1ce20:	0002b7eb 	.word	0x0002b7eb
   1ce24:	0001ce3d 	.word	0x0001ce3d
   1ce28:	0001cf59 	.word	0x0001cf59
   1ce2c:	0002b81b 	.word	0x0002b81b
   1ce30:	0001d2e9 	.word	0x0001d2e9
   1ce34:	0002b783 	.word	0x0002b783
   1ce38:	00031ffa 	.word	0x00031ffa

0001ce3c <gatt_read_group_rsp>:
{
   1ce3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ce40:	b08e      	sub	sp, #56	; 0x38
   1ce42:	4690      	mov	r8, r2
   1ce44:	9f16      	ldr	r7, [sp, #88]	; 0x58
   1ce46:	4606      	mov	r6, r0
	if (err) {
   1ce48:	460a      	mov	r2, r1
   1ce4a:	b131      	cbz	r1, 1ce5a <gatt_read_group_rsp+0x1e>
		params->func(conn, NULL, params);
   1ce4c:	687b      	ldr	r3, [r7, #4]
   1ce4e:	463a      	mov	r2, r7
   1ce50:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   1ce52:	4798      	blx	r3
}
   1ce54:	b00e      	add	sp, #56	; 0x38
   1ce56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (rsp->len) {
   1ce5a:	f898 1000 	ldrb.w	r1, [r8]
   1ce5e:	2906      	cmp	r1, #6
   1ce60:	d014      	beq.n	1ce8c <gatt_read_group_rsp+0x50>
   1ce62:	2914      	cmp	r1, #20
   1ce64:	d011      	beq.n	1ce8a <gatt_read_group_rsp+0x4e>
		BT_ERR("Invalid data len %u", rsp->len);
   1ce66:	4a39      	ldr	r2, [pc, #228]	; (1cf4c <gatt_read_group_rsp+0x110>)
   1ce68:	6813      	ldr	r3, [r2, #0]
   1ce6a:	075b      	lsls	r3, r3, #29
   1ce6c:	d008      	beq.n	1ce80 <gatt_read_group_rsp+0x44>
   1ce6e:	4b38      	ldr	r3, [pc, #224]	; (1cf50 <gatt_read_group_rsp+0x114>)
   1ce70:	4838      	ldr	r0, [pc, #224]	; (1cf54 <gatt_read_group_rsp+0x118>)
   1ce72:	1ad2      	subs	r2, r2, r3
   1ce74:	0892      	lsrs	r2, r2, #2
   1ce76:	0192      	lsls	r2, r2, #6
   1ce78:	f042 0201 	orr.w	r2, r2, #1
   1ce7c:	f00c fa3c 	bl	292f8 <log_1>
	params->func(conn, NULL, params);
   1ce80:	687b      	ldr	r3, [r7, #4]
   1ce82:	463a      	mov	r2, r7
   1ce84:	2100      	movs	r1, #0
   1ce86:	4630      	mov	r0, r6
   1ce88:	e7e3      	b.n	1ce52 <gatt_read_group_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
   1ce8a:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1ce8c:	3b01      	subs	r3, #1
	uint16_t start_handle, end_handle = 0U;
   1ce8e:	2500      	movs	r5, #0
		u.uuid.type = BT_UUID_TYPE_128;
   1ce90:	f88d 2010 	strb.w	r2, [sp, #16]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1ce94:	b29c      	uxth	r4, r3
   1ce96:	f108 0901 	add.w	r9, r8, #1
		struct bt_gatt_attr attr = {};
   1ce9a:	46aa      	mov	sl, r5
	for (length--, pdu = rsp->data; length >= rsp->len;
   1ce9c:	f898 3000 	ldrb.w	r3, [r8]
   1cea0:	42a3      	cmp	r3, r4
   1cea2:	d909      	bls.n	1ceb8 <gatt_read_group_rsp+0x7c>
	if (length == 0U && end_handle) {
   1cea4:	2c00      	cmp	r4, #0
   1cea6:	d1eb      	bne.n	1ce80 <gatt_read_group_rsp+0x44>
   1cea8:	2d00      	cmp	r5, #0
   1ceaa:	d0e9      	beq.n	1ce80 <gatt_read_group_rsp+0x44>
	gatt_discover_next(conn, handle, params);
   1ceac:	463a      	mov	r2, r7
   1ceae:	4629      	mov	r1, r5
   1ceb0:	4630      	mov	r0, r6
   1ceb2:	f00e ff8e 	bl	2bdd2 <gatt_discover_next>
   1ceb6:	e7cd      	b.n	1ce54 <gatt_read_group_rsp+0x18>
		struct bt_gatt_attr attr = {};
   1ceb8:	2214      	movs	r2, #20
   1ceba:	2100      	movs	r1, #0
   1cebc:	a809      	add	r0, sp, #36	; 0x24
   1cebe:	f00f fec2 	bl	2cc46 <memset>
		start_handle = sys_le16_to_cpu(data->start_handle);
   1cec2:	f8b9 2000 	ldrh.w	r2, [r9]
   1cec6:	b293      	uxth	r3, r2
		if (!start_handle) {
   1cec8:	2b00      	cmp	r3, #0
   1ceca:	d0d9      	beq.n	1ce80 <gatt_read_group_rsp+0x44>
		end_handle = sys_le16_to_cpu(data->end_handle);
   1cecc:	f8b9 1002 	ldrh.w	r1, [r9, #2]
   1ced0:	b28d      	uxth	r5, r1
		if (!end_handle || end_handle < start_handle) {
   1ced2:	2d00      	cmp	r5, #0
   1ced4:	d0d4      	beq.n	1ce80 <gatt_read_group_rsp+0x44>
   1ced6:	42ab      	cmp	r3, r5
   1ced8:	d8d2      	bhi.n	1ce80 <gatt_read_group_rsp+0x44>
		switch (u.uuid.type) {
   1ceda:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1cede:	b31b      	cbz	r3, 1cf28 <gatt_read_group_rsp+0xec>
   1cee0:	2b02      	cmp	r3, #2
   1cee2:	d026      	beq.n	1cf32 <gatt_read_group_rsp+0xf6>
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   1cee4:	7c3b      	ldrb	r3, [r7, #16]
		value.end_handle = end_handle;
   1cee6:	f8ad 100c 	strh.w	r1, [sp, #12]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   1ceea:	2b00      	cmp	r3, #0
   1ceec:	f642 0301 	movw	r3, #10241	; 0x2801
   1cef0:	bf08      	it	eq
   1cef2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   1cef6:	f8ad 3006 	strh.w	r3, [sp, #6]
		value.uuid = &u.uuid;
   1cefa:	ab04      	add	r3, sp, #16
   1cefc:	9302      	str	r3, [sp, #8]
		attr.uuid = &uuid_svc.uuid;
   1cefe:	ab01      	add	r3, sp, #4
   1cf00:	9309      	str	r3, [sp, #36]	; 0x24
		attr.user_data = &value;
   1cf02:	ab02      	add	r3, sp, #8
		attr.handle = start_handle;
   1cf04:	f8ad 2034 	strh.w	r2, [sp, #52]	; 0x34
		attr.user_data = &value;
   1cf08:	930c      	str	r3, [sp, #48]	; 0x30
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   1cf0a:	f88d a004 	strb.w	sl, [sp, #4]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1cf0e:	687b      	ldr	r3, [r7, #4]
   1cf10:	463a      	mov	r2, r7
   1cf12:	a909      	add	r1, sp, #36	; 0x24
   1cf14:	4630      	mov	r0, r6
   1cf16:	4798      	blx	r3
   1cf18:	2800      	cmp	r0, #0
   1cf1a:	d09b      	beq.n	1ce54 <gatt_read_group_rsp+0x18>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1cf1c:	f898 2000 	ldrb.w	r2, [r8]
   1cf20:	1aa4      	subs	r4, r4, r2
   1cf22:	b2a4      	uxth	r4, r4
   1cf24:	4491      	add	r9, r2
   1cf26:	e7b9      	b.n	1ce9c <gatt_read_group_rsp+0x60>
			memcpy(&u.u16.val, data->value, sizeof(u.u16.val));
   1cf28:	f8b9 3004 	ldrh.w	r3, [r9, #4]
   1cf2c:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   1cf30:	e7d8      	b.n	1cee4 <gatt_read_group_rsp+0xa8>
			memcpy(u.u128.val, data->value, sizeof(u.u128.val));
   1cf32:	f109 0304 	add.w	r3, r9, #4
   1cf36:	f10d 0011 	add.w	r0, sp, #17
   1cf3a:	f109 0c14 	add.w	ip, r9, #20
   1cf3e:	f853 eb04 	ldr.w	lr, [r3], #4
   1cf42:	f840 eb04 	str.w	lr, [r0], #4
   1cf46:	4563      	cmp	r3, ip
   1cf48:	d1f9      	bne.n	1cf3e <gatt_read_group_rsp+0x102>
   1cf4a:	e7cb      	b.n	1cee4 <gatt_read_group_rsp+0xa8>
   1cf4c:	2000074c 	.word	0x2000074c
   1cf50:	20000740 	.word	0x20000740
   1cf54:	00032015 	.word	0x00032015

0001cf58 <gatt_read_type_rsp>:
{
   1cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cf5c:	b093      	sub	sp, #76	; 0x4c
   1cf5e:	4617      	mov	r7, r2
   1cf60:	9d1c      	ldr	r5, [sp, #112]	; 0x70
   1cf62:	4680      	mov	r8, r0
	if (err) {
   1cf64:	460a      	mov	r2, r1
   1cf66:	b121      	cbz	r1, 1cf72 <gatt_read_type_rsp+0x1a>
		params->func(conn, NULL, params);
   1cf68:	686b      	ldr	r3, [r5, #4]
   1cf6a:	462a      	mov	r2, r5
   1cf6c:	2100      	movs	r1, #0
	params->func(conn, NULL, params);
   1cf6e:	4798      	blx	r3
	if (!handle) {
   1cf70:	e05c      	b.n	1d02c <gatt_read_type_rsp+0xd4>
	if (params->type == BT_GATT_DISCOVER_INCLUDE) {
   1cf72:	7c28      	ldrb	r0, [r5, #16]
   1cf74:	2802      	cmp	r0, #2
   1cf76:	d175      	bne.n	1d064 <gatt_read_type_rsp+0x10c>
	switch (rsp->len) {
   1cf78:	7839      	ldrb	r1, [r7, #0]
   1cf7a:	2906      	cmp	r1, #6
   1cf7c:	d018      	beq.n	1cfb0 <gatt_read_type_rsp+0x58>
   1cf7e:	2908      	cmp	r1, #8
   1cf80:	d177      	bne.n	1d072 <gatt_read_type_rsp+0x11a>
		u.uuid.type = BT_UUID_TYPE_16;
   1cf82:	f88d 2020 	strb.w	r2, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1cf86:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   1cf88:	2600      	movs	r6, #0
	for (length--, pdu = rsp->data; length >= rsp->len;
   1cf8a:	b2a4      	uxth	r4, r4
   1cf8c:	f107 0901 	add.w	r9, r7, #1
			value.uuid = &u.uuid;
   1cf90:	f10d 0a20 	add.w	sl, sp, #32
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1cf94:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   1cf96:	783b      	ldrb	r3, [r7, #0]
   1cf98:	42a3      	cmp	r3, r4
   1cf9a:	d90c      	bls.n	1cfb6 <gatt_read_type_rsp+0x5e>
	if (length == 0U && handle) {
   1cf9c:	2c00      	cmp	r4, #0
   1cf9e:	d175      	bne.n	1d08c <gatt_read_type_rsp+0x134>
   1cfa0:	2e00      	cmp	r6, #0
   1cfa2:	d073      	beq.n	1d08c <gatt_read_type_rsp+0x134>
	gatt_discover_next(conn, handle, params);
   1cfa4:	462a      	mov	r2, r5
   1cfa6:	4631      	mov	r1, r6
   1cfa8:	4640      	mov	r0, r8
   1cfaa:	f00e ff12 	bl	2bdd2 <gatt_discover_next>
   1cfae:	e03d      	b.n	1d02c <gatt_read_type_rsp+0xd4>
		u.uuid.type = BT_UUID_TYPE_128;
   1cfb0:	f88d 0020 	strb.w	r0, [sp, #32]
		break;
   1cfb4:	e7e7      	b.n	1cf86 <gatt_read_type_rsp+0x2e>
		handle = sys_le16_to_cpu(data->handle);
   1cfb6:	f8b9 3000 	ldrh.w	r3, [r9]
   1cfba:	b29e      	uxth	r6, r3
		if (!handle) {
   1cfbc:	2e00      	cmp	r6, #0
   1cfbe:	d065      	beq.n	1d08c <gatt_read_type_rsp+0x134>
		value.start_handle = sys_le16_to_cpu(incl->start_handle);
   1cfc0:	f8b9 2002 	ldrh.w	r2, [r9, #2]
   1cfc4:	f8ad 201c 	strh.w	r2, [sp, #28]
   1cfc8:	b291      	uxth	r1, r2
		value.end_handle = sys_le16_to_cpu(incl->end_handle);
   1cfca:	f8b9 2004 	ldrh.w	r2, [r9, #4]
   1cfce:	f8ad 201e 	strh.w	r2, [sp, #30]
   1cfd2:	b290      	uxth	r0, r2
		switch (u.uuid.type) {
   1cfd4:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1cfd8:	b172      	cbz	r2, 1cff8 <gatt_read_type_rsp+0xa0>
   1cfda:	2a02      	cmp	r2, #2
   1cfdc:	d017      	beq.n	1d00e <gatt_read_type_rsp+0xb6>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1cfde:	6829      	ldr	r1, [r5, #0]
   1cfe0:	b339      	cbz	r1, 1d032 <gatt_read_type_rsp+0xda>
   1cfe2:	4650      	mov	r0, sl
   1cfe4:	9303      	str	r3, [sp, #12]
   1cfe6:	f00d fbfb 	bl	2a7e0 <bt_uuid_cmp>
   1cfea:	9b03      	ldr	r3, [sp, #12]
   1cfec:	b308      	cbz	r0, 1d032 <gatt_read_type_rsp+0xda>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1cfee:	783a      	ldrb	r2, [r7, #0]
   1cff0:	1aa4      	subs	r4, r4, r2
   1cff2:	b2a4      	uxth	r4, r4
   1cff4:	4491      	add	r9, r2
   1cff6:	e7ce      	b.n	1cf96 <gatt_read_type_rsp+0x3e>
			value.uuid = &u.uuid;
   1cff8:	f8cd a018 	str.w	sl, [sp, #24]
			u.u16.val = sys_le16_to_cpu(incl->uuid16);
   1cffc:	f899 2006 	ldrb.w	r2, [r9, #6]
   1d000:	f899 1007 	ldrb.w	r1, [r9, #7]
   1d004:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d008:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   1d00c:	e7e7      	b.n	1cfde <gatt_read_type_rsp+0x86>
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1d00e:	230a      	movs	r3, #10
			params->_included.attr_handle = handle;
   1d010:	812e      	strh	r6, [r5, #8]
			params->_included.start_handle = value.start_handle;
   1d012:	8169      	strh	r1, [r5, #10]
			params->_included.end_handle = value.end_handle;
   1d014:	81a8      	strh	r0, [r5, #12]
	return gatt_req_send(conn, read_included_uuid_cb, params,
   1d016:	4981      	ldr	r1, [pc, #516]	; (1d21c <gatt_read_type_rsp+0x2c4>)
   1d018:	9201      	str	r2, [sp, #4]
   1d01a:	9300      	str	r3, [sp, #0]
   1d01c:	462a      	mov	r2, r5
   1d01e:	4b80      	ldr	r3, [pc, #512]	; (1d220 <gatt_read_type_rsp+0x2c8>)
   1d020:	4640      	mov	r0, r8
   1d022:	f00e fe29 	bl	2bc78 <gatt_req_send>
			return read_included_uuid(conn, params);
   1d026:	b286      	uxth	r6, r0
	if (!handle) {
   1d028:	2e00      	cmp	r6, #0
   1d02a:	d1bb      	bne.n	1cfa4 <gatt_read_type_rsp+0x4c>
}
   1d02c:	b013      	add	sp, #76	; 0x4c
   1d02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d032:	f642 0202 	movw	r2, #10242	; 0x2802
   1d036:	f8ad 2016 	strh.w	r2, [sp, #22]
   1d03a:	aa05      	add	r2, sp, #20
   1d03c:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   1d040:	aa06      	add	r2, sp, #24
   1d042:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   1d044:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d048:	f88d b014 	strb.w	fp, [sp, #20]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d04c:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d04e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   1d052:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d056:	462a      	mov	r2, r5
   1d058:	a90d      	add	r1, sp, #52	; 0x34
   1d05a:	4640      	mov	r0, r8
   1d05c:	4798      	blx	r3
   1d05e:	2800      	cmp	r0, #0
   1d060:	d1c5      	bne.n	1cfee <gatt_read_type_rsp+0x96>
   1d062:	e7e3      	b.n	1d02c <gatt_read_type_rsp+0xd4>
	} else if (params->type == BT_GATT_DISCOVER_CHARACTERISTIC) {
   1d064:	2803      	cmp	r0, #3
   1d066:	d175      	bne.n	1d154 <gatt_read_type_rsp+0x1fc>
	switch (rsp->len) {
   1d068:	7839      	ldrb	r1, [r7, #0]
   1d06a:	2907      	cmp	r1, #7
   1d06c:	d014      	beq.n	1d098 <gatt_read_type_rsp+0x140>
   1d06e:	2915      	cmp	r1, #21
   1d070:	d011      	beq.n	1d096 <gatt_read_type_rsp+0x13e>
		BT_ERR("Invalid data len %u", rsp->len);
   1d072:	4a6c      	ldr	r2, [pc, #432]	; (1d224 <gatt_read_type_rsp+0x2cc>)
   1d074:	6813      	ldr	r3, [r2, #0]
   1d076:	075b      	lsls	r3, r3, #29
   1d078:	d008      	beq.n	1d08c <gatt_read_type_rsp+0x134>
   1d07a:	4b6b      	ldr	r3, [pc, #428]	; (1d228 <gatt_read_type_rsp+0x2d0>)
   1d07c:	486b      	ldr	r0, [pc, #428]	; (1d22c <gatt_read_type_rsp+0x2d4>)
   1d07e:	1ad2      	subs	r2, r2, r3
   1d080:	0892      	lsrs	r2, r2, #2
   1d082:	0192      	lsls	r2, r2, #6
   1d084:	f042 0201 	orr.w	r2, r2, #1
   1d088:	f00c f936 	bl	292f8 <log_1>
	params->func(conn, NULL, params);
   1d08c:	686b      	ldr	r3, [r5, #4]
   1d08e:	462a      	mov	r2, r5
   1d090:	2100      	movs	r1, #0
   1d092:	4640      	mov	r0, r8
   1d094:	e76b      	b.n	1cf6e <gatt_read_type_rsp+0x16>
		u.uuid.type = BT_UUID_TYPE_128;
   1d096:	2202      	movs	r2, #2
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d098:	1e5c      	subs	r4, r3, #1
	uint16_t handle = 0U;
   1d09a:	2600      	movs	r6, #0
		u.uuid.type = BT_UUID_TYPE_128;
   1d09c:	f88d 2020 	strb.w	r2, [sp, #32]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d0a0:	b2a4      	uxth	r4, r4
   1d0a2:	f107 0901 	add.w	r9, r7, #1
   1d0a6:	f10d 0a20 	add.w	sl, sp, #32
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d0aa:	46b3      	mov	fp, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d0ac:	783b      	ldrb	r3, [r7, #0]
   1d0ae:	42a3      	cmp	r3, r4
   1d0b0:	f63f af74 	bhi.w	1cf9c <gatt_read_type_rsp+0x44>
		handle = sys_le16_to_cpu(data->handle);
   1d0b4:	f8b9 3000 	ldrh.w	r3, [r9]
   1d0b8:	b29e      	uxth	r6, r3
		if (!handle) {
   1d0ba:	2e00      	cmp	r6, #0
   1d0bc:	d0e6      	beq.n	1d08c <gatt_read_type_rsp+0x134>
		switch (u.uuid.type) {
   1d0be:	f89d 2020 	ldrb.w	r2, [sp, #32]
   1d0c2:	b172      	cbz	r2, 1d0e2 <gatt_read_type_rsp+0x18a>
   1d0c4:	2a02      	cmp	r2, #2
   1d0c6:	d015      	beq.n	1d0f4 <gatt_read_type_rsp+0x19c>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d0c8:	6829      	ldr	r1, [r5, #0]
   1d0ca:	b301      	cbz	r1, 1d10e <gatt_read_type_rsp+0x1b6>
   1d0cc:	4650      	mov	r0, sl
   1d0ce:	9303      	str	r3, [sp, #12]
   1d0d0:	f00d fb86 	bl	2a7e0 <bt_uuid_cmp>
   1d0d4:	9b03      	ldr	r3, [sp, #12]
   1d0d6:	b1d0      	cbz	r0, 1d10e <gatt_read_type_rsp+0x1b6>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d0d8:	783a      	ldrb	r2, [r7, #0]
   1d0da:	1aa4      	subs	r4, r4, r2
   1d0dc:	b2a4      	uxth	r4, r4
   1d0de:	4491      	add	r9, r2
   1d0e0:	e7e4      	b.n	1d0ac <gatt_read_type_rsp+0x154>
			u.u16.val = sys_le16_to_cpu(chrc->uuid16);
   1d0e2:	f899 2005 	ldrb.w	r2, [r9, #5]
   1d0e6:	f899 1006 	ldrb.w	r1, [r9, #6]
   1d0ea:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1d0ee:	f8ad 2022 	strh.w	r2, [sp, #34]	; 0x22
			break;
   1d0f2:	e7e9      	b.n	1d0c8 <gatt_read_type_rsp+0x170>
			memcpy(u.u128.val, chrc->uuid, sizeof(chrc->uuid));
   1d0f4:	f109 0205 	add.w	r2, r9, #5
   1d0f8:	f10d 0121 	add.w	r1, sp, #33	; 0x21
   1d0fc:	f109 0015 	add.w	r0, r9, #21
   1d100:	f852 cb04 	ldr.w	ip, [r2], #4
   1d104:	f841 cb04 	str.w	ip, [r1], #4
   1d108:	4282      	cmp	r2, r0
   1d10a:	d1f9      	bne.n	1d100 <gatt_read_type_rsp+0x1a8>
   1d10c:	e7dc      	b.n	1d0c8 <gatt_read_type_rsp+0x170>
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1d10e:	f899 2002 	ldrb.w	r2, [r9, #2]
   1d112:	f88d 201e 	strb.w	r2, [sp, #30]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d116:	f642 0203 	movw	r2, #10243	; 0x2803
   1d11a:	f8ad 2016 	strh.w	r2, [sp, #22]
   1d11e:	aa05      	add	r2, sp, #20
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1d120:	f8b9 1003 	ldrh.w	r1, [r9, #3]
   1d124:	f8ad 101c 	strh.w	r1, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d128:	e9cd 2b0d 	strd	r2, fp, [sp, #52]	; 0x34
   1d12c:	aa06      	add	r2, sp, #24
   1d12e:	9210      	str	r2, [sp, #64]	; 0x40
		attr.handle = handle;
   1d130:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
		value = (struct bt_gatt_chrc)BT_GATT_CHRC_INIT(
   1d134:	f8cd a018 	str.w	sl, [sp, #24]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d138:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d13a:	f88d b014 	strb.w	fp, [sp, #20]
   1d13e:	f8cd b03c 	str.w	fp, [sp, #60]	; 0x3c
   1d142:	f88d b046 	strb.w	fp, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d146:	462a      	mov	r2, r5
   1d148:	a90d      	add	r1, sp, #52	; 0x34
   1d14a:	4640      	mov	r0, r8
   1d14c:	4798      	blx	r3
   1d14e:	2800      	cmp	r0, #0
   1d150:	d1c2      	bne.n	1d0d8 <gatt_read_type_rsp+0x180>
   1d152:	e76b      	b.n	1d02c <gatt_read_type_rsp+0xd4>
	if (params->uuid->type != BT_UUID_TYPE_16) {
   1d154:	682a      	ldr	r2, [r5, #0]
   1d156:	7816      	ldrb	r6, [r2, #0]
   1d158:	2e00      	cmp	r6, #0
   1d15a:	d197      	bne.n	1d08c <gatt_read_type_rsp+0x134>
	uuid_val = BT_UUID_16(params->uuid)->val;
   1d15c:	8852      	ldrh	r2, [r2, #2]
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d15e:	1e5c      	subs	r4, r3, #1
   1d160:	b2a4      	uxth	r4, r4
   1d162:	f107 0901 	add.w	r9, r7, #1
   1d166:	f5a2 5b24 	sub.w	fp, r2, #10496	; 0x2900
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d16a:	46b2      	mov	sl, r6
	for (length--, pdu = rsp->data; length >= rsp->len;
   1d16c:	783b      	ldrb	r3, [r7, #0]
   1d16e:	42a3      	cmp	r3, r4
   1d170:	f63f af14 	bhi.w	1cf9c <gatt_read_type_rsp+0x44>
		handle = sys_le16_to_cpu(data->handle);
   1d174:	f8b9 2000 	ldrh.w	r2, [r9]
   1d178:	b296      	uxth	r6, r2
		if (!handle) {
   1d17a:	2e00      	cmp	r6, #0
   1d17c:	d086      	beq.n	1d08c <gatt_read_type_rsp+0x134>
		switch (uuid_val) {
   1d17e:	f1bb 0f04 	cmp.w	fp, #4
   1d182:	d883      	bhi.n	1d08c <gatt_read_type_rsp+0x134>
   1d184:	a301      	add	r3, pc, #4	; (adr r3, 1d18c <gatt_read_type_rsp+0x234>)
   1d186:	f853 f02b 	ldr.w	pc, [r3, fp, lsl #2]
   1d18a:	bf00      	nop
   1d18c:	0001d1a1 	.word	0x0001d1a1
   1d190:	0001d08d 	.word	0x0001d08d
   1d194:	0001d1a1 	.word	0x0001d1a1
   1d198:	0001d1a1 	.word	0x0001d1a1
   1d19c:	0001d1e1 	.word	0x0001d1e1
	return ((uint16_t)src[1] << 8) | src[0];
   1d1a0:	f899 1003 	ldrb.w	r1, [r9, #3]
   1d1a4:	f899 3002 	ldrb.w	r3, [r9, #2]
   1d1a8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			value.scc.flags = sys_get_le16(data->value);
   1d1ac:	f8ad 3020 	strh.w	r3, [sp, #32]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d1b0:	682b      	ldr	r3, [r5, #0]
		attr.handle = handle;
   1d1b2:	f8ad 2044 	strh.w	r2, [sp, #68]	; 0x44
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d1b6:	e9cd 3a0d 	strd	r3, sl, [sp, #52]	; 0x34
   1d1ba:	ab08      	add	r3, sp, #32
   1d1bc:	9310      	str	r3, [sp, #64]	; 0x40
   1d1be:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d1c2:	686b      	ldr	r3, [r5, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d1c4:	f88d a046 	strb.w	sl, [sp, #70]	; 0x46
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d1c8:	462a      	mov	r2, r5
   1d1ca:	a90d      	add	r1, sp, #52	; 0x34
   1d1cc:	4640      	mov	r0, r8
   1d1ce:	4798      	blx	r3
   1d1d0:	2800      	cmp	r0, #0
   1d1d2:	f43f af2b 	beq.w	1d02c <gatt_read_type_rsp+0xd4>
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d1d6:	783a      	ldrb	r2, [r7, #0]
   1d1d8:	1aa4      	subs	r4, r4, r2
   1d1da:	b2a4      	uxth	r4, r4
   1d1dc:	4491      	add	r9, r2
   1d1de:	e7c5      	b.n	1d16c <gatt_read_type_rsp+0x214>
			value.cpf.format = cpf->format;
   1d1e0:	f899 3002 	ldrb.w	r3, [r9, #2]
   1d1e4:	f88d 3020 	strb.w	r3, [sp, #32]
			value.cpf.exponent = cpf->exponent;
   1d1e8:	f899 3003 	ldrb.w	r3, [r9, #3]
   1d1ec:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
			value.cpf.unit = sys_le16_to_cpu(cpf->unit);
   1d1f0:	f899 1005 	ldrb.w	r1, [r9, #5]
   1d1f4:	f899 3004 	ldrb.w	r3, [r9, #4]
   1d1f8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1d1fc:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
			value.cpf.name_space = cpf->name_space;
   1d200:	f899 3006 	ldrb.w	r3, [r9, #6]
   1d204:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
			value.cpf.description = sys_le16_to_cpu(cpf->description);
   1d208:	f899 3007 	ldrb.w	r3, [r9, #7]
   1d20c:	f899 1008 	ldrb.w	r1, [r9, #8]
   1d210:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1d214:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
			break;
   1d218:	e7ca      	b.n	1d1b0 <gatt_read_type_rsp+0x258>
   1d21a:	bf00      	nop
   1d21c:	0001d231 	.word	0x0001d231
   1d220:	0002b76f 	.word	0x0002b76f
   1d224:	2000074c 	.word	0x2000074c
   1d228:	20000740 	.word	0x20000740
   1d22c:	00032015 	.word	0x00032015

0001d230 <read_included_uuid_cb>:
{
   1d230:	b570      	push	{r4, r5, r6, lr}
   1d232:	b08e      	sub	sp, #56	; 0x38
	if (length != 16U) {
   1d234:	2b10      	cmp	r3, #16
{
   1d236:	9c12      	ldr	r4, [sp, #72]	; 0x48
   1d238:	4605      	mov	r5, r0
   1d23a:	4619      	mov	r1, r3
	if (length != 16U) {
   1d23c:	d013      	beq.n	1d266 <read_included_uuid_cb+0x36>
		BT_ERR("Invalid data len %u", length);
   1d23e:	4a27      	ldr	r2, [pc, #156]	; (1d2dc <read_included_uuid_cb+0xac>)
   1d240:	6813      	ldr	r3, [r2, #0]
   1d242:	075b      	lsls	r3, r3, #29
   1d244:	d008      	beq.n	1d258 <read_included_uuid_cb+0x28>
   1d246:	4b26      	ldr	r3, [pc, #152]	; (1d2e0 <read_included_uuid_cb+0xb0>)
   1d248:	4826      	ldr	r0, [pc, #152]	; (1d2e4 <read_included_uuid_cb+0xb4>)
   1d24a:	1ad2      	subs	r2, r2, r3
   1d24c:	0892      	lsrs	r2, r2, #2
   1d24e:	0192      	lsls	r2, r2, #6
   1d250:	f042 0201 	orr.w	r2, r2, #1
   1d254:	f00c f850 	bl	292f8 <log_1>
		params->func(conn, NULL, params);
   1d258:	6863      	ldr	r3, [r4, #4]
   1d25a:	4622      	mov	r2, r4
   1d25c:	2100      	movs	r1, #0
   1d25e:	4628      	mov	r0, r5
   1d260:	4798      	blx	r3
}
   1d262:	b00e      	add	sp, #56	; 0x38
   1d264:	bd70      	pop	{r4, r5, r6, pc}
	value.start_handle = params->_included.start_handle;
   1d266:	8963      	ldrh	r3, [r4, #10]
   1d268:	f8ad 300c 	strh.w	r3, [sp, #12]
	value.end_handle = params->_included.end_handle;
   1d26c:	89a3      	ldrh	r3, [r4, #12]
   1d26e:	f8ad 300e 	strh.w	r3, [sp, #14]
	value.uuid = &u.uuid;
   1d272:	a804      	add	r0, sp, #16
	u.uuid.type = BT_UUID_TYPE_128;
   1d274:	2302      	movs	r3, #2
   1d276:	f88d 3010 	strb.w	r3, [sp, #16]
	value.uuid = &u.uuid;
   1d27a:	9002      	str	r0, [sp, #8]
	memcpy(u.u128.val, pdu, length);
   1d27c:	f10d 0311 	add.w	r3, sp, #17
   1d280:	f102 0110 	add.w	r1, r2, #16
   1d284:	f852 6b04 	ldr.w	r6, [r2], #4
   1d288:	f843 6b04 	str.w	r6, [r3], #4
   1d28c:	428a      	cmp	r2, r1
   1d28e:	d1f9      	bne.n	1d284 <read_included_uuid_cb+0x54>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d290:	6821      	ldr	r1, [r4, #0]
   1d292:	b9f1      	cbnz	r1, 1d2d2 <read_included_uuid_cb+0xa2>
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d294:	f642 0202 	movw	r2, #10242	; 0x2802
   1d298:	2300      	movs	r3, #0
   1d29a:	f8ad 2006 	strh.w	r2, [sp, #6]
   1d29e:	aa01      	add	r2, sp, #4
   1d2a0:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
   1d2a4:	f88d 3004 	strb.w	r3, [sp, #4]
   1d2a8:	aa02      	add	r2, sp, #8
   1d2aa:	930b      	str	r3, [sp, #44]	; 0x2c
   1d2ac:	f88d 3036 	strb.w	r3, [sp, #54]	; 0x36
	attr.handle = params->_included.attr_handle;
   1d2b0:	8923      	ldrh	r3, [r4, #8]
	attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d2b2:	920c      	str	r2, [sp, #48]	; 0x30
	attr.handle = params->_included.attr_handle;
   1d2b4:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d2b8:	4622      	mov	r2, r4
   1d2ba:	6863      	ldr	r3, [r4, #4]
   1d2bc:	a909      	add	r1, sp, #36	; 0x24
   1d2be:	4628      	mov	r0, r5
   1d2c0:	4798      	blx	r3
   1d2c2:	2800      	cmp	r0, #0
   1d2c4:	d0cd      	beq.n	1d262 <read_included_uuid_cb+0x32>
	gatt_discover_next(conn, params->start_handle, params);
   1d2c6:	8921      	ldrh	r1, [r4, #8]
   1d2c8:	4622      	mov	r2, r4
   1d2ca:	4628      	mov	r0, r5
   1d2cc:	f00e fd81 	bl	2bdd2 <gatt_discover_next>
	return;
   1d2d0:	e7c7      	b.n	1d262 <read_included_uuid_cb+0x32>
	if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d2d2:	f00d fa85 	bl	2a7e0 <bt_uuid_cmp>
   1d2d6:	2800      	cmp	r0, #0
   1d2d8:	d0dc      	beq.n	1d294 <read_included_uuid_cb+0x64>
   1d2da:	e7f4      	b.n	1d2c6 <read_included_uuid_cb+0x96>
   1d2dc:	2000074c 	.word	0x2000074c
   1d2e0:	20000740 	.word	0x20000740
   1d2e4:	00032015 	.word	0x00032015

0001d2e8 <gatt_find_info_rsp>:
{
   1d2e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d2ec:	b08f      	sub	sp, #60	; 0x3c
   1d2ee:	4680      	mov	r8, r0
   1d2f0:	9e18      	ldr	r6, [sp, #96]	; 0x60
	if (err) {
   1d2f2:	4608      	mov	r0, r1
   1d2f4:	b989      	cbnz	r1, 1d31a <gatt_find_info_rsp+0x32>
	switch (rsp->format) {
   1d2f6:	7811      	ldrb	r1, [r2, #0]
   1d2f8:	2901      	cmp	r1, #1
   1d2fa:	d014      	beq.n	1d326 <gatt_find_info_rsp+0x3e>
   1d2fc:	2902      	cmp	r1, #2
   1d2fe:	d02b      	beq.n	1d358 <gatt_find_info_rsp+0x70>
		BT_ERR("Invalid format %u", rsp->format);
   1d300:	4a53      	ldr	r2, [pc, #332]	; (1d450 <gatt_find_info_rsp+0x168>)
   1d302:	6813      	ldr	r3, [r2, #0]
   1d304:	075b      	lsls	r3, r3, #29
   1d306:	d008      	beq.n	1d31a <gatt_find_info_rsp+0x32>
   1d308:	4b52      	ldr	r3, [pc, #328]	; (1d454 <gatt_find_info_rsp+0x16c>)
   1d30a:	4853      	ldr	r0, [pc, #332]	; (1d458 <gatt_find_info_rsp+0x170>)
   1d30c:	1ad2      	subs	r2, r2, r3
   1d30e:	0892      	lsrs	r2, r2, #2
   1d310:	0192      	lsls	r2, r2, #6
   1d312:	f042 0201 	orr.w	r2, r2, #1
   1d316:	f00b ffef 	bl	292f8 <log_1>
	params->func(conn, NULL, params);
   1d31a:	6873      	ldr	r3, [r6, #4]
   1d31c:	4632      	mov	r2, r6
   1d31e:	2100      	movs	r1, #0
   1d320:	4640      	mov	r0, r8
   1d322:	4798      	blx	r3
   1d324:	e090      	b.n	1d448 <gatt_find_info_rsp+0x160>
		u.uuid.type = BT_UUID_TYPE_16;
   1d326:	f88d 0010 	strb.w	r0, [sp, #16]
		len = sizeof(*info.i16);
   1d32a:	f04f 0a04 	mov.w	sl, #4
	length--;
   1d32e:	3b01      	subs	r3, #1
   1d330:	b29b      	uxth	r3, r3
	if (length < len) {
   1d332:	4553      	cmp	r3, sl
   1d334:	d3f1      	bcc.n	1d31a <gatt_find_info_rsp+0x32>
	for (i = length / len, pdu = rsp->info; i != 0;
   1d336:	fbb3 f3fa 	udiv	r3, r3, sl
	bool skip = false;
   1d33a:	f04f 0900 	mov.w	r9, #0
	for (i = length / len, pdu = rsp->info; i != 0;
   1d33e:	9300      	str	r3, [sp, #0]
   1d340:	1c54      	adds	r4, r2, #1
	uint16_t handle = 0U;
   1d342:	46cb      	mov	fp, r9
			skip = false;
   1d344:	464d      	mov	r5, r9
   1d346:	af04      	add	r7, sp, #16
	for (i = length / len, pdu = rsp->info; i != 0;
   1d348:	9b00      	ldr	r3, [sp, #0]
   1d34a:	b953      	cbnz	r3, 1d362 <gatt_find_info_rsp+0x7a>
	gatt_discover_next(conn, handle, params);
   1d34c:	4632      	mov	r2, r6
   1d34e:	4659      	mov	r1, fp
   1d350:	4640      	mov	r0, r8
   1d352:	f00e fd3e 	bl	2bdd2 <gatt_discover_next>
	return;
   1d356:	e077      	b.n	1d448 <gatt_find_info_rsp+0x160>
		u.uuid.type = BT_UUID_TYPE_128;
   1d358:	f88d 1010 	strb.w	r1, [sp, #16]
		len = sizeof(*info.i128);
   1d35c:	f04f 0a12 	mov.w	sl, #18
		break;
   1d360:	e7e5      	b.n	1d32e <gatt_find_info_rsp+0x46>
		handle = sys_le16_to_cpu(info.i16->handle);
   1d362:	8823      	ldrh	r3, [r4, #0]
   1d364:	f8ad 3004 	strh.w	r3, [sp, #4]
   1d368:	fa1f fb83 	uxth.w	fp, r3
		if (skip) {
   1d36c:	f1b9 0f00 	cmp.w	r9, #0
   1d370:	d156      	bne.n	1d420 <gatt_find_info_rsp+0x138>
		switch (u.uuid.type) {
   1d372:	f89d 3010 	ldrb.w	r3, [sp, #16]
   1d376:	2b00      	cmp	r3, #0
   1d378:	d03a      	beq.n	1d3f0 <gatt_find_info_rsp+0x108>
   1d37a:	2b02      	cmp	r3, #2
   1d37c:	d03f      	beq.n	1d3fe <gatt_find_info_rsp+0x116>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d37e:	6831      	ldr	r1, [r6, #0]
   1d380:	2900      	cmp	r1, #0
   1d382:	d148      	bne.n	1d416 <gatt_find_info_rsp+0x12e>
		if (params->type == BT_GATT_DISCOVER_DESCRIPTOR) {
   1d384:	7c33      	ldrb	r3, [r6, #16]
   1d386:	2b04      	cmp	r3, #4
   1d388:	d14d      	bne.n	1d426 <gatt_find_info_rsp+0x13e>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1d38a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1d38e:	a902      	add	r1, sp, #8
   1d390:	4638      	mov	r0, r7
   1d392:	f88d 5008 	strb.w	r5, [sp, #8]
   1d396:	f8ad 300a 	strh.w	r3, [sp, #10]
   1d39a:	f00d fa21 	bl	2a7e0 <bt_uuid_cmp>
   1d39e:	b310      	cbz	r0, 1d3e6 <gatt_find_info_rsp+0xfe>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1d3a0:	f642 0301 	movw	r3, #10241	; 0x2801
   1d3a4:	a903      	add	r1, sp, #12
   1d3a6:	4638      	mov	r0, r7
   1d3a8:	f88d 500c 	strb.w	r5, [sp, #12]
   1d3ac:	f8ad 300e 	strh.w	r3, [sp, #14]
   1d3b0:	f00d fa16 	bl	2a7e0 <bt_uuid_cmp>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) ||
   1d3b4:	b1b8      	cbz	r0, 1d3e6 <gatt_find_info_rsp+0xfe>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_INCLUDE)) {
   1d3b6:	f642 0302 	movw	r3, #10242	; 0x2802
   1d3ba:	a909      	add	r1, sp, #36	; 0x24
   1d3bc:	4638      	mov	r0, r7
   1d3be:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   1d3c2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1d3c6:	f00d fa0b 	bl	2a7e0 <bt_uuid_cmp>
			    !bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY) ||
   1d3ca:	b160      	cbz	r0, 1d3e6 <gatt_find_info_rsp+0xfe>
			if (!bt_uuid_cmp(&u.uuid, BT_UUID_GATT_CHRC)) {
   1d3cc:	f642 0303 	movw	r3, #10243	; 0x2803
   1d3d0:	a909      	add	r1, sp, #36	; 0x24
   1d3d2:	4638      	mov	r0, r7
   1d3d4:	f88d 5024 	strb.w	r5, [sp, #36]	; 0x24
   1d3d8:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
   1d3dc:	f00d fa00 	bl	2a7e0 <bt_uuid_cmp>
   1d3e0:	bb08      	cbnz	r0, 1d426 <gatt_find_info_rsp+0x13e>
				skip = true;
   1d3e2:	f04f 0901 	mov.w	r9, #1
	     i--, pdu = (const uint8_t *)pdu + len) {
   1d3e6:	9b00      	ldr	r3, [sp, #0]
   1d3e8:	3b01      	subs	r3, #1
   1d3ea:	9300      	str	r3, [sp, #0]
   1d3ec:	4454      	add	r4, sl
   1d3ee:	e7ab      	b.n	1d348 <gatt_find_info_rsp+0x60>
			u.u16.val = sys_le16_to_cpu(info.i16->uuid);
   1d3f0:	78a3      	ldrb	r3, [r4, #2]
   1d3f2:	78e2      	ldrb	r2, [r4, #3]
   1d3f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d3f8:	f8ad 3012 	strh.w	r3, [sp, #18]
			break;
   1d3fc:	e7bf      	b.n	1d37e <gatt_find_info_rsp+0x96>
			memcpy(u.u128.val, info.i128->uuid, 16);
   1d3fe:	1ca3      	adds	r3, r4, #2
   1d400:	f10d 0211 	add.w	r2, sp, #17
   1d404:	f104 0112 	add.w	r1, r4, #18
   1d408:	f853 0b04 	ldr.w	r0, [r3], #4
   1d40c:	f842 0b04 	str.w	r0, [r2], #4
   1d410:	428b      	cmp	r3, r1
   1d412:	d1f9      	bne.n	1d408 <gatt_find_info_rsp+0x120>
   1d414:	e7b3      	b.n	1d37e <gatt_find_info_rsp+0x96>
		if (params->uuid && bt_uuid_cmp(&u.uuid, params->uuid)) {
   1d416:	4638      	mov	r0, r7
   1d418:	f00d f9e2 	bl	2a7e0 <bt_uuid_cmp>
   1d41c:	2800      	cmp	r0, #0
   1d41e:	d0b1      	beq.n	1d384 <gatt_find_info_rsp+0x9c>
			skip = false;
   1d420:	f04f 0900 	mov.w	r9, #0
   1d424:	e7df      	b.n	1d3e6 <gatt_find_info_rsp+0xfe>
		attr.handle = handle;
   1d426:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1d42a:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d42e:	e9cd 7509 	strd	r7, r5, [sp, #36]	; 0x24
   1d432:	e9cd 550b 	strd	r5, r5, [sp, #44]	; 0x2c
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d436:	6873      	ldr	r3, [r6, #4]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(
   1d438:	f88d 5036 	strb.w	r5, [sp, #54]	; 0x36
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   1d43c:	4632      	mov	r2, r6
   1d43e:	a909      	add	r1, sp, #36	; 0x24
   1d440:	4640      	mov	r0, r8
   1d442:	4798      	blx	r3
   1d444:	2800      	cmp	r0, #0
   1d446:	d1ce      	bne.n	1d3e6 <gatt_find_info_rsp+0xfe>
}
   1d448:	b00f      	add	sp, #60	; 0x3c
   1d44a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d44e:	bf00      	nop
   1d450:	2000074c 	.word	0x2000074c
   1d454:	20000740 	.word	0x20000740
   1d458:	00032029 	.word	0x00032029

0001d45c <bt_gatt_read>:
{
   1d45c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d45e:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1d460:	4605      	mov	r5, r0
   1d462:	b970      	cbnz	r0, 1d482 <bt_gatt_read+0x26>
   1d464:	4928      	ldr	r1, [pc, #160]	; (1d508 <bt_gatt_read+0xac>)
   1d466:	4a29      	ldr	r2, [pc, #164]	; (1d50c <bt_gatt_read+0xb0>)
   1d468:	4829      	ldr	r0, [pc, #164]	; (1d510 <bt_gatt_read+0xb4>)
   1d46a:	f241 030c 	movw	r3, #4108	; 0x100c
   1d46e:	f00b fb94 	bl	28b9a <printk>
   1d472:	4828      	ldr	r0, [pc, #160]	; (1d514 <bt_gatt_read+0xb8>)
   1d474:	f00b fb91 	bl	28b9a <printk>
   1d478:	4824      	ldr	r0, [pc, #144]	; (1d50c <bt_gatt_read+0xb0>)
   1d47a:	f241 010c 	movw	r1, #4108	; 0x100c
   1d47e:	f00b fdcd 	bl	2901c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1d482:	b10c      	cbz	r4, 1d488 <bt_gatt_read+0x2c>
   1d484:	6823      	ldr	r3, [r4, #0]
   1d486:	b973      	cbnz	r3, 1d4a6 <bt_gatt_read+0x4a>
   1d488:	4923      	ldr	r1, [pc, #140]	; (1d518 <bt_gatt_read+0xbc>)
   1d48a:	4a20      	ldr	r2, [pc, #128]	; (1d50c <bt_gatt_read+0xb0>)
   1d48c:	4820      	ldr	r0, [pc, #128]	; (1d510 <bt_gatt_read+0xb4>)
   1d48e:	f241 030d 	movw	r3, #4109	; 0x100d
   1d492:	f00b fb82 	bl	28b9a <printk>
   1d496:	481f      	ldr	r0, [pc, #124]	; (1d514 <bt_gatt_read+0xb8>)
   1d498:	f00b fb7f 	bl	28b9a <printk>
   1d49c:	481b      	ldr	r0, [pc, #108]	; (1d50c <bt_gatt_read+0xb0>)
   1d49e:	f241 010d 	movw	r1, #4109	; 0x100d
   1d4a2:	f00b fdbb 	bl	2901c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1d4a6:	7aab      	ldrb	r3, [r5, #10]
   1d4a8:	2b07      	cmp	r3, #7
   1d4aa:	d127      	bne.n	1d4fc <bt_gatt_read+0xa0>
	if (params->handle_count == 0) {
   1d4ac:	6863      	ldr	r3, [r4, #4]
   1d4ae:	b93b      	cbnz	r3, 1d4c0 <bt_gatt_read+0x64>
	return gatt_req_send(conn, gatt_read_rsp, params,
   1d4b0:	2308      	movs	r3, #8
   1d4b2:	2004      	movs	r0, #4
   1d4b4:	e9cd 3000 	strd	r3, r0, [sp]
   1d4b8:	4b18      	ldr	r3, [pc, #96]	; (1d51c <bt_gatt_read+0xc0>)
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1d4ba:	4919      	ldr	r1, [pc, #100]	; (1d520 <bt_gatt_read+0xc4>)
   1d4bc:	4622      	mov	r2, r4
   1d4be:	e00a      	b.n	1d4d6 <bt_gatt_read+0x7a>
	if (params->handle_count > 1) {
   1d4c0:	2b01      	cmp	r3, #1
   1d4c2:	d90d      	bls.n	1d4e0 <bt_gatt_read+0x84>
		if (params->multiple.variable) {
   1d4c4:	7b22      	ldrb	r2, [r4, #12]
   1d4c6:	b9e2      	cbnz	r2, 1d502 <bt_gatt_read+0xa6>
	return gatt_req_send(conn, gatt_read_mult_rsp, params,
   1d4c8:	005b      	lsls	r3, r3, #1
   1d4ca:	9301      	str	r3, [sp, #4]
   1d4cc:	230e      	movs	r3, #14
   1d4ce:	9300      	str	r3, [sp, #0]
   1d4d0:	4914      	ldr	r1, [pc, #80]	; (1d524 <bt_gatt_read+0xc8>)
   1d4d2:	4b15      	ldr	r3, [pc, #84]	; (1d528 <bt_gatt_read+0xcc>)
   1d4d4:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1d4d6:	4628      	mov	r0, r5
   1d4d8:	f00e fbce 	bl	2bc78 <gatt_req_send>
}
   1d4dc:	b003      	add	sp, #12
   1d4de:	bd30      	pop	{r4, r5, pc}
	if (params->single.offset) {
   1d4e0:	8963      	ldrh	r3, [r4, #10]
   1d4e2:	b12b      	cbz	r3, 1d4f0 <bt_gatt_read+0x94>
	return gatt_req_send(conn, gatt_read_rsp, params,
   1d4e4:	230c      	movs	r3, #12
   1d4e6:	2104      	movs	r1, #4
   1d4e8:	e9cd 3100 	strd	r3, r1, [sp]
   1d4ec:	4b0f      	ldr	r3, [pc, #60]	; (1d52c <bt_gatt_read+0xd0>)
   1d4ee:	e7e4      	b.n	1d4ba <bt_gatt_read+0x5e>
	return gatt_req_send(conn, gatt_read_rsp, params, gatt_read_encode,
   1d4f0:	230a      	movs	r3, #10
   1d4f2:	2202      	movs	r2, #2
   1d4f4:	e9cd 3200 	strd	r3, r2, [sp]
   1d4f8:	4b0d      	ldr	r3, [pc, #52]	; (1d530 <bt_gatt_read+0xd4>)
   1d4fa:	e7de      	b.n	1d4ba <bt_gatt_read+0x5e>
		return -ENOTCONN;
   1d4fc:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d500:	e7ec      	b.n	1d4dc <bt_gatt_read+0x80>
			return gatt_read_mult_vl(conn, params);
   1d502:	f06f 0085 	mvn.w	r0, #133	; 0x85
   1d506:	e7e9      	b.n	1d4dc <bt_gatt_read+0x80>
   1d508:	000329ff 	.word	0x000329ff
   1d50c:	00031d4a 	.word	0x00031d4a
   1d510:	0002e93e 	.word	0x0002e93e
   1d514:	00031e81 	.word	0x00031e81
   1d518:	00031f74 	.word	0x00031f74
   1d51c:	0002bb8d 	.word	0x0002bb8d
   1d520:	0001d535 	.word	0x0001d535
   1d524:	0002b8fb 	.word	0x0002b8fb
   1d528:	0002b857 	.word	0x0002b857
   1d52c:	0002b7af 	.word	0x0002b7af
   1d530:	0002b79b 	.word	0x0002b79b

0001d534 <gatt_read_rsp>:
{
   1d534:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1d538:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   1d53a:	4606      	mov	r6, r0
   1d53c:	4690      	mov	r8, r2
   1d53e:	4699      	mov	r9, r3
	if (err || !length) {
   1d540:	460f      	mov	r7, r1
   1d542:	b901      	cbnz	r1, 1d546 <gatt_read_rsp+0x12>
   1d544:	b953      	cbnz	r3, 1d55c <gatt_read_rsp+0x28>
		params->func(conn, err, params, NULL, 0);
   1d546:	2300      	movs	r3, #0
   1d548:	930a      	str	r3, [sp, #40]	; 0x28
   1d54a:	6825      	ldr	r5, [r4, #0]
   1d54c:	4622      	mov	r2, r4
   1d54e:	4639      	mov	r1, r7
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1d550:	4630      	mov	r0, r6
   1d552:	46ac      	mov	ip, r5
}
   1d554:	b003      	add	sp, #12
   1d556:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1d55a:	4760      	bx	ip
	if (!params->handle_count) {
   1d55c:	6863      	ldr	r3, [r4, #4]
   1d55e:	2b00      	cmp	r3, #0
   1d560:	d14b      	bne.n	1d5fa <gatt_read_rsp+0xc6>
	for (length--, pdu = rsp->data; length;
   1d562:	f109 35ff 	add.w	r5, r9, #4294967295
   1d566:	b2ad      	uxth	r5, r5
   1d568:	f102 0901 	add.w	r9, r2, #1
   1d56c:	b34d      	cbz	r5, 1d5c2 <gatt_read_rsp+0x8e>
		handle = sys_le16_to_cpu(data->handle);
   1d56e:	f8b9 2000 	ldrh.w	r2, [r9]
   1d572:	b293      	uxth	r3, r2
		if (!handle) {
   1d574:	b97b      	cbnz	r3, 1d596 <gatt_read_rsp+0x62>
			BT_ERR("Invalid handle");
   1d576:	4932      	ldr	r1, [pc, #200]	; (1d640 <gatt_read_rsp+0x10c>)
   1d578:	680b      	ldr	r3, [r1, #0]
   1d57a:	075b      	lsls	r3, r3, #29
   1d57c:	d05c      	beq.n	1d638 <gatt_read_rsp+0x104>
   1d57e:	4b31      	ldr	r3, [pc, #196]	; (1d644 <gatt_read_rsp+0x110>)
   1d580:	4831      	ldr	r0, [pc, #196]	; (1d648 <gatt_read_rsp+0x114>)
   1d582:	1ac9      	subs	r1, r1, r3
   1d584:	0889      	lsrs	r1, r1, #2
   1d586:	0189      	lsls	r1, r1, #6
   1d588:	f041 0101 	orr.w	r1, r1, #1
}
   1d58c:	b003      	add	sp, #12
   1d58e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
			BT_ERR("Invalid handle");
   1d592:	f00b bea4 	b.w	292de <log_0>
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1d596:	f898 3000 	ldrb.w	r3, [r8]
		params->by_uuid.start_handle = handle;
   1d59a:	8122      	strh	r2, [r4, #8]
		len = rsp->len > length ? length - 2 : rsp->len - 2;
   1d59c:	42ab      	cmp	r3, r5
   1d59e:	bf8c      	ite	hi
   1d5a0:	1eab      	subhi	r3, r5, #2
   1d5a2:	3b02      	subls	r3, #2
   1d5a4:	b29b      	uxth	r3, r3
		if (params->func(conn, 0, params, data->value, len) ==
   1d5a6:	9300      	str	r3, [sp, #0]
   1d5a8:	6827      	ldr	r7, [r4, #0]
   1d5aa:	f109 0302 	add.w	r3, r9, #2
   1d5ae:	4622      	mov	r2, r4
   1d5b0:	2100      	movs	r1, #0
   1d5b2:	4630      	mov	r0, r6
   1d5b4:	47b8      	blx	r7
   1d5b6:	2800      	cmp	r0, #0
   1d5b8:	d03e      	beq.n	1d638 <gatt_read_rsp+0x104>
		if (rsp->len > length) {
   1d5ba:	f898 1000 	ldrb.w	r1, [r8]
   1d5be:	428d      	cmp	r5, r1
   1d5c0:	d20b      	bcs.n	1d5da <gatt_read_rsp+0xa6>
	if (bt_gatt_read(conn, params) < 0) {
   1d5c2:	4621      	mov	r1, r4
   1d5c4:	4630      	mov	r0, r6
   1d5c6:	f7ff ff49 	bl	1d45c <bt_gatt_read>
   1d5ca:	2800      	cmp	r0, #0
   1d5cc:	da34      	bge.n	1d638 <gatt_read_rsp+0x104>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1d5ce:	2300      	movs	r3, #0
   1d5d0:	930a      	str	r3, [sp, #40]	; 0x28
   1d5d2:	6825      	ldr	r5, [r4, #0]
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1d5d4:	4622      	mov	r2, r4
   1d5d6:	210e      	movs	r1, #14
   1d5d8:	e7ba      	b.n	1d550 <gatt_read_rsp+0x1c>
		if (params->by_uuid.start_handle == params->by_uuid.end_handle) {
   1d5da:	8922      	ldrh	r2, [r4, #8]
   1d5dc:	8960      	ldrh	r0, [r4, #10]
   1d5de:	4290      	cmp	r0, r2
   1d5e0:	d105      	bne.n	1d5ee <gatt_read_rsp+0xba>
			params->func(conn, 0, params, NULL, 0);
   1d5e2:	2300      	movs	r3, #0
   1d5e4:	930a      	str	r3, [sp, #40]	; 0x28
   1d5e6:	6825      	ldr	r5, [r4, #0]
		params->func(conn, 0, params, NULL, 0);
   1d5e8:	4622      	mov	r2, r4
   1d5ea:	4619      	mov	r1, r3
   1d5ec:	e7b0      	b.n	1d550 <gatt_read_rsp+0x1c>
		params->by_uuid.start_handle++;
   1d5ee:	3201      	adds	r2, #1
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d5f0:	1a6d      	subs	r5, r5, r1
		params->by_uuid.start_handle++;
   1d5f2:	8122      	strh	r2, [r4, #8]
	     length -= rsp->len, pdu = (const uint8_t *)pdu + rsp->len) {
   1d5f4:	b2ad      	uxth	r5, r5
   1d5f6:	4489      	add	r9, r1
   1d5f8:	e7b8      	b.n	1d56c <gatt_read_rsp+0x38>
	if (params->func(conn, 0, params, pdu, length) == BT_GATT_ITER_STOP) {
   1d5fa:	f8cd 9000 	str.w	r9, [sp]
   1d5fe:	4613      	mov	r3, r2
   1d600:	6825      	ldr	r5, [r4, #0]
   1d602:	4622      	mov	r2, r4
   1d604:	47a8      	blx	r5
   1d606:	b1b8      	cbz	r0, 1d638 <gatt_read_rsp+0x104>
	if (length < (bt_att_get_mtu(conn) - 1)) {
   1d608:	4630      	mov	r0, r6
   1d60a:	f00d ffb9 	bl	2b580 <bt_att_get_mtu>
   1d60e:	3801      	subs	r0, #1
   1d610:	4581      	cmp	r9, r0
   1d612:	da03      	bge.n	1d61c <gatt_read_rsp+0xe8>
		params->func(conn, 0, params, NULL, 0);
   1d614:	970a      	str	r7, [sp, #40]	; 0x28
   1d616:	6825      	ldr	r5, [r4, #0]
   1d618:	463b      	mov	r3, r7
   1d61a:	e7e5      	b.n	1d5e8 <gatt_read_rsp+0xb4>
	params->single.offset += length;
   1d61c:	8963      	ldrh	r3, [r4, #10]
   1d61e:	eb09 0503 	add.w	r5, r9, r3
   1d622:	8165      	strh	r5, [r4, #10]
	if (bt_gatt_read(conn, params) < 0) {
   1d624:	4621      	mov	r1, r4
   1d626:	4630      	mov	r0, r6
   1d628:	f7ff ff18 	bl	1d45c <bt_gatt_read>
   1d62c:	2800      	cmp	r0, #0
   1d62e:	da03      	bge.n	1d638 <gatt_read_rsp+0x104>
		params->func(conn, BT_ATT_ERR_UNLIKELY, params, NULL, 0);
   1d630:	970a      	str	r7, [sp, #40]	; 0x28
   1d632:	6825      	ldr	r5, [r4, #0]
   1d634:	463b      	mov	r3, r7
   1d636:	e7cd      	b.n	1d5d4 <gatt_read_rsp+0xa0>
}
   1d638:	b003      	add	sp, #12
   1d63a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1d63e:	bf00      	nop
   1d640:	2000074c 	.word	0x2000074c
   1d644:	20000740 	.word	0x20000740
   1d648:	0003203b 	.word	0x0003203b

0001d64c <bt_gatt_write_without_response_cb>:
{
   1d64c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   1d650:	460f      	mov	r7, r1
   1d652:	e9dd 890d 	ldrd	r8, r9, [sp, #52]	; 0x34
   1d656:	f89d 4030 	ldrb.w	r4, [sp, #48]	; 0x30
   1d65a:	4692      	mov	sl, r2
   1d65c:	461e      	mov	r6, r3
	__ASSERT(conn, "invalid parameters\n");
   1d65e:	4605      	mov	r5, r0
   1d660:	b970      	cbnz	r0, 1d680 <bt_gatt_write_without_response_cb+0x34>
   1d662:	4932      	ldr	r1, [pc, #200]	; (1d72c <bt_gatt_write_without_response_cb+0xe0>)
   1d664:	4a32      	ldr	r2, [pc, #200]	; (1d730 <bt_gatt_write_without_response_cb+0xe4>)
   1d666:	4833      	ldr	r0, [pc, #204]	; (1d734 <bt_gatt_write_without_response_cb+0xe8>)
   1d668:	f241 033d 	movw	r3, #4157	; 0x103d
   1d66c:	f00b fa95 	bl	28b9a <printk>
   1d670:	4831      	ldr	r0, [pc, #196]	; (1d738 <bt_gatt_write_without_response_cb+0xec>)
   1d672:	f00b fa92 	bl	28b9a <printk>
   1d676:	482e      	ldr	r0, [pc, #184]	; (1d730 <bt_gatt_write_without_response_cb+0xe4>)
   1d678:	f241 013d 	movw	r1, #4157	; 0x103d
   1d67c:	f00b fcce 	bl	2901c <assert_post_action>
	__ASSERT(handle, "invalid parameters\n");
   1d680:	b977      	cbnz	r7, 1d6a0 <bt_gatt_write_without_response_cb+0x54>
   1d682:	492e      	ldr	r1, [pc, #184]	; (1d73c <bt_gatt_write_without_response_cb+0xf0>)
   1d684:	4a2a      	ldr	r2, [pc, #168]	; (1d730 <bt_gatt_write_without_response_cb+0xe4>)
   1d686:	482b      	ldr	r0, [pc, #172]	; (1d734 <bt_gatt_write_without_response_cb+0xe8>)
   1d688:	f241 033e 	movw	r3, #4158	; 0x103e
   1d68c:	f00b fa85 	bl	28b9a <printk>
   1d690:	4829      	ldr	r0, [pc, #164]	; (1d738 <bt_gatt_write_without_response_cb+0xec>)
   1d692:	f00b fa82 	bl	28b9a <printk>
   1d696:	4826      	ldr	r0, [pc, #152]	; (1d730 <bt_gatt_write_without_response_cb+0xe4>)
   1d698:	f241 013e 	movw	r1, #4158	; 0x103e
   1d69c:	f00b fcbe 	bl	2901c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1d6a0:	7aab      	ldrb	r3, [r5, #10]
   1d6a2:	2b07      	cmp	r3, #7
   1d6a4:	d13d      	bne.n	1d722 <bt_gatt_write_without_response_cb+0xd6>
	if (sign) {
   1d6a6:	b384      	cbz	r4, 1d70a <bt_gatt_write_without_response_cb+0xbe>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_SIGNED_WRITE_CMD,
   1d6a8:	f106 020e 	add.w	r2, r6, #14
   1d6ac:	21d2      	movs	r1, #210	; 0xd2
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   1d6ae:	4628      	mov	r0, r5
   1d6b0:	f7fd ff8a 	bl	1b5c8 <bt_att_create_pdu>
   1d6b4:	4604      	mov	r4, r0
	if (!buf) {
   1d6b6:	b328      	cbz	r0, 1d704 <bt_gatt_write_without_response_cb+0xb8>
   1d6b8:	2102      	movs	r1, #2
   1d6ba:	3008      	adds	r0, #8
   1d6bc:	f002 fdce 	bl	2025c <net_buf_simple_add>
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   1d6c0:	2300      	movs	r3, #0
	cmd->handle = sys_cpu_to_le16(handle);
   1d6c2:	8007      	strh	r7, [r0, #0]
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   1d6c4:	2200      	movs	r2, #0
   1d6c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
   1d6ca:	2300      	movs	r3, #0
   1d6cc:	e9cd 2300 	strd	r2, r3, [sp]
   1d6d0:	4631      	mov	r1, r6
   1d6d2:	4652      	mov	r2, sl
   1d6d4:	4620      	mov	r0, r4
   1d6d6:	f002 fde3 	bl	202a0 <net_buf_append_bytes>
	if (write != length) {
   1d6da:	42b0      	cmp	r0, r6
	write = net_buf_append_bytes(buf, length, data, K_NO_WAIT, NULL, NULL);
   1d6dc:	4602      	mov	r2, r0
	if (write != length) {
   1d6de:	d017      	beq.n	1d710 <bt_gatt_write_without_response_cb+0xc4>
		BT_WARN("Unable to allocate length %u: only %zu written",
   1d6e0:	4917      	ldr	r1, [pc, #92]	; (1d740 <bt_gatt_write_without_response_cb+0xf4>)
   1d6e2:	680b      	ldr	r3, [r1, #0]
   1d6e4:	f013 0f06 	tst.w	r3, #6
   1d6e8:	d009      	beq.n	1d6fe <bt_gatt_write_without_response_cb+0xb2>
   1d6ea:	4b16      	ldr	r3, [pc, #88]	; (1d744 <bt_gatt_write_without_response_cb+0xf8>)
   1d6ec:	4816      	ldr	r0, [pc, #88]	; (1d748 <bt_gatt_write_without_response_cb+0xfc>)
   1d6ee:	1ac9      	subs	r1, r1, r3
   1d6f0:	0889      	lsrs	r1, r1, #2
   1d6f2:	0189      	lsls	r1, r1, #6
   1d6f4:	f041 0302 	orr.w	r3, r1, #2
   1d6f8:	4631      	mov	r1, r6
   1d6fa:	f00b fe11 	bl	29320 <log_2>
		net_buf_unref(buf);
   1d6fe:	4620      	mov	r0, r4
   1d700:	f002 fc7c 	bl	1fffc <net_buf_unref>
		return -ENOMEM;
   1d704:	f06f 000b 	mvn.w	r0, #11
   1d708:	e00d      	b.n	1d726 <bt_gatt_write_without_response_cb+0xda>
		buf = bt_att_create_pdu(conn, BT_ATT_OP_WRITE_CMD,
   1d70a:	1cb2      	adds	r2, r6, #2
   1d70c:	2152      	movs	r1, #82	; 0x52
   1d70e:	e7ce      	b.n	1d6ae <bt_gatt_write_without_response_cb+0x62>
	return bt_att_send(conn, buf, func, user_data);
   1d710:	464b      	mov	r3, r9
   1d712:	4642      	mov	r2, r8
   1d714:	4621      	mov	r1, r4
   1d716:	4628      	mov	r0, r5
}
   1d718:	b004      	add	sp, #16
   1d71a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, func, user_data);
   1d71e:	f7fe bae7 	b.w	1bcf0 <bt_att_send>
		return -ENOTCONN;
   1d722:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
   1d726:	b004      	add	sp, #16
   1d728:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1d72c:	000329ff 	.word	0x000329ff
   1d730:	00031d4a 	.word	0x00031d4a
   1d734:	0002e93e 	.word	0x0002e93e
   1d738:	00031e81 	.word	0x00031e81
   1d73c:	00032043 	.word	0x00032043
   1d740:	2000074c 	.word	0x2000074c
   1d744:	20000740 	.word	0x20000740
   1d748:	0003204a 	.word	0x0003204a

0001d74c <bt_gatt_write>:
{
   1d74c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1d74e:	460c      	mov	r4, r1
	__ASSERT(conn, "invalid parameters\n");
   1d750:	4605      	mov	r5, r0
   1d752:	b970      	cbnz	r0, 1d772 <bt_gatt_write+0x26>
   1d754:	492f      	ldr	r1, [pc, #188]	; (1d814 <bt_gatt_write+0xc8>)
   1d756:	4a30      	ldr	r2, [pc, #192]	; (1d818 <bt_gatt_write+0xcc>)
   1d758:	4830      	ldr	r0, [pc, #192]	; (1d81c <bt_gatt_write+0xd0>)
   1d75a:	f241 1307 	movw	r3, #4359	; 0x1107
   1d75e:	f00b fa1c 	bl	28b9a <printk>
   1d762:	482f      	ldr	r0, [pc, #188]	; (1d820 <bt_gatt_write+0xd4>)
   1d764:	f00b fa19 	bl	28b9a <printk>
   1d768:	482b      	ldr	r0, [pc, #172]	; (1d818 <bt_gatt_write+0xcc>)
   1d76a:	f241 1107 	movw	r1, #4359	; 0x1107
   1d76e:	f00b fc55 	bl	2901c <assert_post_action>
	__ASSERT(params && params->func, "invalid parameters\n");
   1d772:	b10c      	cbz	r4, 1d778 <bt_gatt_write+0x2c>
   1d774:	6823      	ldr	r3, [r4, #0]
   1d776:	b973      	cbnz	r3, 1d796 <bt_gatt_write+0x4a>
   1d778:	492a      	ldr	r1, [pc, #168]	; (1d824 <bt_gatt_write+0xd8>)
   1d77a:	4a27      	ldr	r2, [pc, #156]	; (1d818 <bt_gatt_write+0xcc>)
   1d77c:	4827      	ldr	r0, [pc, #156]	; (1d81c <bt_gatt_write+0xd0>)
   1d77e:	f241 1308 	movw	r3, #4360	; 0x1108
   1d782:	f00b fa0a 	bl	28b9a <printk>
   1d786:	4826      	ldr	r0, [pc, #152]	; (1d820 <bt_gatt_write+0xd4>)
   1d788:	f00b fa07 	bl	28b9a <printk>
   1d78c:	4822      	ldr	r0, [pc, #136]	; (1d818 <bt_gatt_write+0xcc>)
   1d78e:	f241 1108 	movw	r1, #4360	; 0x1108
   1d792:	f00b fc43 	bl	2901c <assert_post_action>
	__ASSERT(params->handle, "invalid parameters\n");
   1d796:	88a3      	ldrh	r3, [r4, #4]
   1d798:	b973      	cbnz	r3, 1d7b8 <bt_gatt_write+0x6c>
   1d79a:	4923      	ldr	r1, [pc, #140]	; (1d828 <bt_gatt_write+0xdc>)
   1d79c:	4a1e      	ldr	r2, [pc, #120]	; (1d818 <bt_gatt_write+0xcc>)
   1d79e:	481f      	ldr	r0, [pc, #124]	; (1d81c <bt_gatt_write+0xd0>)
   1d7a0:	f241 1309 	movw	r3, #4361	; 0x1109
   1d7a4:	f00b f9f9 	bl	28b9a <printk>
   1d7a8:	481d      	ldr	r0, [pc, #116]	; (1d820 <bt_gatt_write+0xd4>)
   1d7aa:	f00b f9f6 	bl	28b9a <printk>
   1d7ae:	481a      	ldr	r0, [pc, #104]	; (1d818 <bt_gatt_write+0xcc>)
   1d7b0:	f241 1109 	movw	r1, #4361	; 0x1109
   1d7b4:	f00b fc32 	bl	2901c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1d7b8:	7aab      	ldrb	r3, [r5, #10]
   1d7ba:	2b07      	cmp	r3, #7
   1d7bc:	d126      	bne.n	1d80c <bt_gatt_write+0xc0>
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1d7be:	88e3      	ldrh	r3, [r4, #6]
   1d7c0:	b1ab      	cbz	r3, 1d7ee <bt_gatt_write+0xa2>
	len = bt_att_get_mtu(conn) - req_len - 1;
   1d7c2:	4628      	mov	r0, r5
   1d7c4:	f00d fedc 	bl	2b580 <bt_att_get_mtu>
   1d7c8:	1f43      	subs	r3, r0, #5
   1d7ca:	b298      	uxth	r0, r3
	len = MIN(params->length, len);
   1d7cc:	89a3      	ldrh	r3, [r4, #12]
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   1d7ce:	4917      	ldr	r1, [pc, #92]	; (1d82c <bt_gatt_write+0xe0>)
	len = MIN(params->length, len);
   1d7d0:	4283      	cmp	r3, r0
   1d7d2:	bf28      	it	cs
   1d7d4:	4603      	movcs	r3, r0
	len += req_len;
   1d7d6:	3304      	adds	r3, #4
	return gatt_req_send(conn, gatt_prepare_write_rsp, params,
   1d7d8:	b29b      	uxth	r3, r3
   1d7da:	9301      	str	r3, [sp, #4]
   1d7dc:	2316      	movs	r3, #22
   1d7de:	9300      	str	r3, [sp, #0]
   1d7e0:	4b13      	ldr	r3, [pc, #76]	; (1d830 <bt_gatt_write+0xe4>)
   1d7e2:	4622      	mov	r2, r4
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   1d7e4:	4628      	mov	r0, r5
   1d7e6:	f00e fa47 	bl	2bc78 <gatt_req_send>
}
   1d7ea:	b002      	add	sp, #8
   1d7ec:	bd70      	pop	{r4, r5, r6, pc}
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1d7ee:	4628      	mov	r0, r5
	len = sizeof(struct bt_att_write_req) + params->length;
   1d7f0:	89a6      	ldrh	r6, [r4, #12]
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1d7f2:	f00d fec5 	bl	2b580 <bt_att_get_mtu>
	len = sizeof(struct bt_att_write_req) + params->length;
   1d7f6:	3602      	adds	r6, #2
	if (params->offset || len > (bt_att_get_mtu(conn) - 1)) {
   1d7f8:	3801      	subs	r0, #1
   1d7fa:	42b0      	cmp	r0, r6
   1d7fc:	d3e1      	bcc.n	1d7c2 <bt_gatt_write+0x76>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_write_encode,
   1d7fe:	2312      	movs	r3, #18
   1d800:	9300      	str	r3, [sp, #0]
   1d802:	490c      	ldr	r1, [pc, #48]	; (1d834 <bt_gatt_write+0xe8>)
   1d804:	4b0c      	ldr	r3, [pc, #48]	; (1d838 <bt_gatt_write+0xec>)
   1d806:	9601      	str	r6, [sp, #4]
   1d808:	4622      	mov	r2, r4
   1d80a:	e7eb      	b.n	1d7e4 <bt_gatt_write+0x98>
		return -ENOTCONN;
   1d80c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1d810:	e7eb      	b.n	1d7ea <bt_gatt_write+0x9e>
   1d812:	bf00      	nop
   1d814:	000329ff 	.word	0x000329ff
   1d818:	00031d4a 	.word	0x00031d4a
   1d81c:	0002e93e 	.word	0x0002e93e
   1d820:	00031e81 	.word	0x00031e81
   1d824:	00031f74 	.word	0x00031f74
   1d828:	00032079 	.word	0x00032079
   1d82c:	0001d83d 	.word	0x0001d83d
   1d830:	0002b8bb 	.word	0x0002b8bb
   1d834:	0002b671 	.word	0x0002b671
   1d838:	0002b87f 	.word	0x0002b87f

0001d83c <gatt_prepare_write_rsp>:
{
   1d83c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d83e:	9c08      	ldr	r4, [sp, #32]
   1d840:	4606      	mov	r6, r0
   1d842:	4617      	mov	r7, r2
	if (err) {
   1d844:	b129      	cbz	r1, 1d852 <gatt_prepare_write_rsp+0x16>
		params->func(conn, err, params);
   1d846:	6823      	ldr	r3, [r4, #0]
   1d848:	4622      	mov	r2, r4
}
   1d84a:	b003      	add	sp, #12
   1d84c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   1d850:	4718      	bx	r3
	len = length - sizeof(*rsp);
   1d852:	1f1d      	subs	r5, r3, #4
	if (len > params->length) {
   1d854:	89a3      	ldrh	r3, [r4, #12]
   1d856:	429d      	cmp	r5, r3
   1d858:	d91c      	bls.n	1d894 <gatt_prepare_write_rsp+0x58>
		BT_ERR("Incorrect length, canceling write");
   1d85a:	4925      	ldr	r1, [pc, #148]	; (1d8f0 <gatt_prepare_write_rsp+0xb4>)
   1d85c:	680b      	ldr	r3, [r1, #0]
   1d85e:	075f      	lsls	r7, r3, #29
   1d860:	d008      	beq.n	1d874 <gatt_prepare_write_rsp+0x38>
   1d862:	4b24      	ldr	r3, [pc, #144]	; (1d8f4 <gatt_prepare_write_rsp+0xb8>)
   1d864:	4824      	ldr	r0, [pc, #144]	; (1d8f8 <gatt_prepare_write_rsp+0xbc>)
   1d866:	1ac9      	subs	r1, r1, r3
   1d868:	0889      	lsrs	r1, r1, #2
   1d86a:	0189      	lsls	r1, r1, #6
   1d86c:	f041 0101 	orr.w	r1, r1, #1
   1d870:	f00b fd35 	bl	292de <log_0>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_cancel_encode,
   1d874:	2318      	movs	r3, #24
   1d876:	2501      	movs	r5, #1
   1d878:	e9cd 3500 	strd	r3, r5, [sp]
   1d87c:	4b1f      	ldr	r3, [pc, #124]	; (1d8fc <gatt_prepare_write_rsp+0xc0>)
   1d87e:	4920      	ldr	r1, [pc, #128]	; (1d900 <gatt_prepare_write_rsp+0xc4>)
   1d880:	4622      	mov	r2, r4
   1d882:	4630      	mov	r0, r6
   1d884:	f00e f9f8 	bl	2bc78 <gatt_req_send>
		if (gatt_cancel_all_writes(conn, params)) {
   1d888:	b380      	cbz	r0, 1d8ec <gatt_prepare_write_rsp+0xb0>
	params->func(conn, BT_ATT_ERR_UNLIKELY, params);
   1d88a:	6823      	ldr	r3, [r4, #0]
   1d88c:	4622      	mov	r2, r4
   1d88e:	210e      	movs	r1, #14
   1d890:	4630      	mov	r0, r6
   1d892:	e7da      	b.n	1d84a <gatt_prepare_write_rsp+0xe>
	data_valid = memcmp(params->data, rsp->value, len) == 0;
   1d894:	462a      	mov	r2, r5
   1d896:	68a0      	ldr	r0, [r4, #8]
   1d898:	1d39      	adds	r1, r7, #4
   1d89a:	f00f f99e 	bl	2cbda <memcmp>
	if (params->offset != rsp->offset || !data_valid) {
   1d89e:	88e2      	ldrh	r2, [r4, #6]
   1d8a0:	887b      	ldrh	r3, [r7, #2]
   1d8a2:	4293      	cmp	r3, r2
   1d8a4:	d100      	bne.n	1d8a8 <gatt_prepare_write_rsp+0x6c>
   1d8a6:	b158      	cbz	r0, 1d8c0 <gatt_prepare_write_rsp+0x84>
		BT_ERR("Incorrect offset or data in response, canceling write");
   1d8a8:	4911      	ldr	r1, [pc, #68]	; (1d8f0 <gatt_prepare_write_rsp+0xb4>)
   1d8aa:	680b      	ldr	r3, [r1, #0]
   1d8ac:	0758      	lsls	r0, r3, #29
   1d8ae:	d0e1      	beq.n	1d874 <gatt_prepare_write_rsp+0x38>
   1d8b0:	4b10      	ldr	r3, [pc, #64]	; (1d8f4 <gatt_prepare_write_rsp+0xb8>)
   1d8b2:	4814      	ldr	r0, [pc, #80]	; (1d904 <gatt_prepare_write_rsp+0xc8>)
   1d8b4:	1ac9      	subs	r1, r1, r3
   1d8b6:	0889      	lsrs	r1, r1, #2
   1d8b8:	0189      	lsls	r1, r1, #6
   1d8ba:	f041 0101 	orr.w	r1, r1, #1
   1d8be:	e7d7      	b.n	1d870 <gatt_prepare_write_rsp+0x34>
	params->offset += len;
   1d8c0:	fa13 f385 	uxtah	r3, r3, r5
	params->length -= len;
   1d8c4:	89a2      	ldrh	r2, [r4, #12]
	params->offset += len;
   1d8c6:	80e3      	strh	r3, [r4, #6]
	params->data = (const uint8_t *)params->data + len;
   1d8c8:	68a3      	ldr	r3, [r4, #8]
   1d8ca:	442b      	add	r3, r5
	params->length -= len;
   1d8cc:	1b55      	subs	r5, r2, r5
   1d8ce:	b2ad      	uxth	r5, r5
	params->data = (const uint8_t *)params->data + len;
   1d8d0:	60a3      	str	r3, [r4, #8]
	params->length -= len;
   1d8d2:	81a5      	strh	r5, [r4, #12]
	if (!params->length) {
   1d8d4:	b92d      	cbnz	r5, 1d8e2 <gatt_prepare_write_rsp+0xa6>
	return gatt_req_send(conn, gatt_write_rsp, params, gatt_exec_encode,
   1d8d6:	2318      	movs	r3, #24
   1d8d8:	2201      	movs	r2, #1
   1d8da:	e9cd 3200 	strd	r3, r2, [sp]
   1d8de:	4b0a      	ldr	r3, [pc, #40]	; (1d908 <gatt_prepare_write_rsp+0xcc>)
   1d8e0:	e7cd      	b.n	1d87e <gatt_prepare_write_rsp+0x42>
	if (!bt_gatt_write(conn, params)) {
   1d8e2:	4621      	mov	r1, r4
   1d8e4:	4630      	mov	r0, r6
   1d8e6:	f7ff ff31 	bl	1d74c <bt_gatt_write>
   1d8ea:	e7cd      	b.n	1d888 <gatt_prepare_write_rsp+0x4c>
}
   1d8ec:	b003      	add	sp, #12
   1d8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d8f0:	2000074c 	.word	0x2000074c
   1d8f4:	20000740 	.word	0x20000740
   1d8f8:	00032088 	.word	0x00032088
   1d8fc:	0002b7c7 	.word	0x0002b7c7
   1d900:	0002b671 	.word	0x0002b671
   1d904:	000320aa 	.word	0x000320aa
   1d908:	0002b7d9 	.word	0x0002b7d9

0001d90c <bt_gatt_subscribe>:
{
   1d90c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1d90e:	460e      	mov	r6, r1
	__ASSERT(conn, "invalid parameters\n");
   1d910:	4605      	mov	r5, r0
   1d912:	b970      	cbnz	r0, 1d932 <bt_gatt_subscribe+0x26>
   1d914:	494b      	ldr	r1, [pc, #300]	; (1da44 <bt_gatt_subscribe+0x138>)
   1d916:	4a4c      	ldr	r2, [pc, #304]	; (1da48 <bt_gatt_subscribe+0x13c>)
   1d918:	484c      	ldr	r0, [pc, #304]	; (1da4c <bt_gatt_subscribe+0x140>)
   1d91a:	f241 1399 	movw	r3, #4505	; 0x1199
   1d91e:	f00b f93c 	bl	28b9a <printk>
   1d922:	484b      	ldr	r0, [pc, #300]	; (1da50 <bt_gatt_subscribe+0x144>)
   1d924:	f00b f939 	bl	28b9a <printk>
   1d928:	4847      	ldr	r0, [pc, #284]	; (1da48 <bt_gatt_subscribe+0x13c>)
   1d92a:	f241 1199 	movw	r1, #4505	; 0x1199
   1d92e:	f00b fb75 	bl	2901c <assert_post_action>
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1d932:	b10e      	cbz	r6, 1d938 <bt_gatt_subscribe+0x2c>
   1d934:	6833      	ldr	r3, [r6, #0]
   1d936:	b973      	cbnz	r3, 1d956 <bt_gatt_subscribe+0x4a>
   1d938:	4946      	ldr	r1, [pc, #280]	; (1da54 <bt_gatt_subscribe+0x148>)
   1d93a:	4a43      	ldr	r2, [pc, #268]	; (1da48 <bt_gatt_subscribe+0x13c>)
   1d93c:	4843      	ldr	r0, [pc, #268]	; (1da4c <bt_gatt_subscribe+0x140>)
   1d93e:	f241 139a 	movw	r3, #4506	; 0x119a
   1d942:	f00b f92a 	bl	28b9a <printk>
   1d946:	4842      	ldr	r0, [pc, #264]	; (1da50 <bt_gatt_subscribe+0x144>)
   1d948:	f00b f927 	bl	28b9a <printk>
   1d94c:	483e      	ldr	r0, [pc, #248]	; (1da48 <bt_gatt_subscribe+0x13c>)
   1d94e:	f241 119a 	movw	r1, #4506	; 0x119a
   1d952:	f00b fb63 	bl	2901c <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   1d956:	89b3      	ldrh	r3, [r6, #12]
   1d958:	b973      	cbnz	r3, 1d978 <bt_gatt_subscribe+0x6c>
   1d95a:	493f      	ldr	r1, [pc, #252]	; (1da58 <bt_gatt_subscribe+0x14c>)
   1d95c:	4a3a      	ldr	r2, [pc, #232]	; (1da48 <bt_gatt_subscribe+0x13c>)
   1d95e:	483b      	ldr	r0, [pc, #236]	; (1da4c <bt_gatt_subscribe+0x140>)
   1d960:	f241 139b 	movw	r3, #4507	; 0x119b
   1d964:	f00b f919 	bl	28b9a <printk>
   1d968:	4839      	ldr	r0, [pc, #228]	; (1da50 <bt_gatt_subscribe+0x144>)
   1d96a:	f00b f916 	bl	28b9a <printk>
   1d96e:	4836      	ldr	r0, [pc, #216]	; (1da48 <bt_gatt_subscribe+0x13c>)
   1d970:	f241 119b 	movw	r1, #4507	; 0x119b
   1d974:	f00b fb52 	bl	2901c <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   1d978:	8973      	ldrh	r3, [r6, #10]
   1d97a:	b973      	cbnz	r3, 1d99a <bt_gatt_subscribe+0x8e>
   1d97c:	4937      	ldr	r1, [pc, #220]	; (1da5c <bt_gatt_subscribe+0x150>)
   1d97e:	4a32      	ldr	r2, [pc, #200]	; (1da48 <bt_gatt_subscribe+0x13c>)
   1d980:	4832      	ldr	r0, [pc, #200]	; (1da4c <bt_gatt_subscribe+0x140>)
   1d982:	f241 13a1 	movw	r3, #4513	; 0x11a1
   1d986:	f00b f908 	bl	28b9a <printk>
   1d98a:	4831      	ldr	r0, [pc, #196]	; (1da50 <bt_gatt_subscribe+0x144>)
   1d98c:	f00b f905 	bl	28b9a <printk>
   1d990:	482d      	ldr	r0, [pc, #180]	; (1da48 <bt_gatt_subscribe+0x13c>)
   1d992:	f241 11a1 	movw	r1, #4513	; 0x11a1
   1d996:	f00b fb41 	bl	2901c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1d99a:	7aab      	ldrb	r3, [r5, #10]
   1d99c:	2b07      	cmp	r3, #7
   1d99e:	d149      	bne.n	1da34 <bt_gatt_subscribe+0x128>
	sub = gatt_sub_find(conn);
   1d9a0:	4628      	mov	r0, r5
   1d9a2:	f7fe faab 	bl	1befc <gatt_sub_find>
	if (!sub) {
   1d9a6:	4604      	mov	r4, r0
   1d9a8:	b958      	cbnz	r0, 1d9c2 <bt_gatt_subscribe+0xb6>
		sub = gatt_sub_find(NULL);
   1d9aa:	f7fe faa7 	bl	1befc <gatt_sub_find>
		if (sub) {
   1d9ae:	4604      	mov	r4, r0
   1d9b0:	2800      	cmp	r0, #0
   1d9b2:	d042      	beq.n	1da3a <bt_gatt_subscribe+0x12e>
			bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1d9b4:	f105 0190 	add.w	r1, r5, #144	; 0x90
   1d9b8:	3001      	adds	r0, #1
   1d9ba:	f00d ffb9 	bl	2b930 <bt_addr_le_copy>
			sub->id = conn->id;
   1d9be:	7a2b      	ldrb	r3, [r5, #8]
   1d9c0:	7023      	strb	r3, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1d9c2:	68a2      	ldr	r2, [r4, #8]
   1d9c4:	b90a      	cbnz	r2, 1d9ca <bt_gatt_subscribe+0xbe>
   1d9c6:	4613      	mov	r3, r2
   1d9c8:	e001      	b.n	1d9ce <bt_gatt_subscribe+0xc2>
   1d9ca:	f1a2 0314 	sub.w	r3, r2, #20
			has_subscription = true;
   1d9ce:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1d9d0:	b96b      	cbnz	r3, 1d9ee <bt_gatt_subscribe+0xe2>
	if (!has_subscription) {
   1d9d2:	bb31      	cbnz	r1, 1da22 <bt_gatt_subscribe+0x116>
		err = gatt_write_ccc(conn, params);
   1d9d4:	4628      	mov	r0, r5
   1d9d6:	4631      	mov	r1, r6
   1d9d8:	f7fe fc16 	bl	1c208 <gatt_write_ccc>
		if (err) {
   1d9dc:	4605      	mov	r5, r0
   1d9de:	b300      	cbz	r0, 1da22 <bt_gatt_subscribe+0x116>
	if (gatt_sub_is_empty(sub)) {
   1d9e0:	68a3      	ldr	r3, [r4, #8]
   1d9e2:	b913      	cbnz	r3, 1d9ea <bt_gatt_subscribe+0xde>
		gatt_sub_free(sub);
   1d9e4:	4620      	mov	r0, r4
   1d9e6:	f7fe fb15 	bl	1c014 <gatt_sub_free>
}
   1d9ea:	4628      	mov	r0, r5
   1d9ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (tmp == params) {
   1d9ee:	42b3      	cmp	r3, r6
   1d9f0:	d106      	bne.n	1da00 <bt_gatt_subscribe+0xf4>
	if (gatt_sub_is_empty(sub)) {
   1d9f2:	b912      	cbnz	r2, 1d9fa <bt_gatt_subscribe+0xee>
		gatt_sub_free(sub);
   1d9f4:	4620      	mov	r0, r4
   1d9f6:	f7fe fb0d 	bl	1c014 <gatt_sub_free>
			return -EALREADY;
   1d9fa:	f06f 0577 	mvn.w	r5, #119	; 0x77
   1d9fe:	e7f4      	b.n	1d9ea <bt_gatt_subscribe+0xde>
		if (tmp->value_handle == params->value_handle &&
   1da00:	891f      	ldrh	r7, [r3, #8]
   1da02:	8930      	ldrh	r0, [r6, #8]
   1da04:	4287      	cmp	r7, r0
   1da06:	d104      	bne.n	1da12 <bt_gatt_subscribe+0x106>
   1da08:	899f      	ldrh	r7, [r3, #12]
   1da0a:	89b0      	ldrh	r0, [r6, #12]
			has_subscription = true;
   1da0c:	4287      	cmp	r7, r0
   1da0e:	bf28      	it	cs
   1da10:	2101      	movcs	r1, #1
Z_GENLIST_PEEK_NEXT(slist, snode)
   1da12:	f113 0f14 	cmn.w	r3, #20
   1da16:	d0dc      	beq.n	1d9d2 <bt_gatt_subscribe+0xc6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1da18:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1da1a:	2b00      	cmp	r3, #0
   1da1c:	d0d9      	beq.n	1d9d2 <bt_gatt_subscribe+0xc6>
   1da1e:	3b14      	subs	r3, #20
   1da20:	e7d6      	b.n	1d9d0 <bt_gatt_subscribe+0xc4>
Z_GENLIST_PREPEND(slist, snode)
   1da22:	68a2      	ldr	r2, [r4, #8]
	parent->next = child;
   1da24:	6172      	str	r2, [r6, #20]
Z_GENLIST_PREPEND(slist, snode)
   1da26:	68e5      	ldr	r5, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   1da28:	f106 0314 	add.w	r3, r6, #20
	list->head = node;
   1da2c:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1da2e:	b93d      	cbnz	r5, 1da40 <bt_gatt_subscribe+0x134>
	list->tail = node;
   1da30:	60e3      	str	r3, [r4, #12]
}
   1da32:	e7da      	b.n	1d9ea <bt_gatt_subscribe+0xde>
		return -ENOTCONN;
   1da34:	f06f 057f 	mvn.w	r5, #127	; 0x7f
   1da38:	e7d7      	b.n	1d9ea <bt_gatt_subscribe+0xde>
		return -ENOMEM;
   1da3a:	f06f 050b 	mvn.w	r5, #11
   1da3e:	e7d4      	b.n	1d9ea <bt_gatt_subscribe+0xde>
	return 0;
   1da40:	2500      	movs	r5, #0
   1da42:	e7d2      	b.n	1d9ea <bt_gatt_subscribe+0xde>
   1da44:	000329ff 	.word	0x000329ff
   1da48:	00031d4a 	.word	0x00031d4a
   1da4c:	0002e93e 	.word	0x0002e93e
   1da50:	00031e81 	.word	0x00031e81
   1da54:	000320e0 	.word	0x000320e0
   1da58:	000320f9 	.word	0x000320f9
   1da5c:	00032107 	.word	0x00032107

0001da60 <bt_gatt_resubscribe>:
{
   1da60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1da62:	4606      	mov	r6, r0
   1da64:	460f      	mov	r7, r1
	__ASSERT(params && params->notify,  "invalid parameters\n");
   1da66:	4615      	mov	r5, r2
   1da68:	b10a      	cbz	r2, 1da6e <bt_gatt_resubscribe+0xe>
   1da6a:	6813      	ldr	r3, [r2, #0]
   1da6c:	b973      	cbnz	r3, 1da8c <bt_gatt_resubscribe+0x2c>
   1da6e:	4932      	ldr	r1, [pc, #200]	; (1db38 <bt_gatt_resubscribe+0xd8>)
   1da70:	4a32      	ldr	r2, [pc, #200]	; (1db3c <bt_gatt_resubscribe+0xdc>)
   1da72:	4833      	ldr	r0, [pc, #204]	; (1db40 <bt_gatt_resubscribe+0xe0>)
   1da74:	f241 13db 	movw	r3, #4571	; 0x11db
   1da78:	f00b f88f 	bl	28b9a <printk>
   1da7c:	4831      	ldr	r0, [pc, #196]	; (1db44 <bt_gatt_resubscribe+0xe4>)
   1da7e:	f00b f88c 	bl	28b9a <printk>
   1da82:	482e      	ldr	r0, [pc, #184]	; (1db3c <bt_gatt_resubscribe+0xdc>)
   1da84:	f241 11db 	movw	r1, #4571	; 0x11db
   1da88:	f00b fac8 	bl	2901c <assert_post_action>
	__ASSERT(params->value, "invalid parameters\n");
   1da8c:	89ab      	ldrh	r3, [r5, #12]
   1da8e:	b973      	cbnz	r3, 1daae <bt_gatt_resubscribe+0x4e>
   1da90:	492d      	ldr	r1, [pc, #180]	; (1db48 <bt_gatt_resubscribe+0xe8>)
   1da92:	4a2a      	ldr	r2, [pc, #168]	; (1db3c <bt_gatt_resubscribe+0xdc>)
   1da94:	482a      	ldr	r0, [pc, #168]	; (1db40 <bt_gatt_resubscribe+0xe0>)
   1da96:	f241 13dc 	movw	r3, #4572	; 0x11dc
   1da9a:	f00b f87e 	bl	28b9a <printk>
   1da9e:	4829      	ldr	r0, [pc, #164]	; (1db44 <bt_gatt_resubscribe+0xe4>)
   1daa0:	f00b f87b 	bl	28b9a <printk>
   1daa4:	4825      	ldr	r0, [pc, #148]	; (1db3c <bt_gatt_resubscribe+0xdc>)
   1daa6:	f241 11dc 	movw	r1, #4572	; 0x11dc
   1daaa:	f00b fab7 	bl	2901c <assert_post_action>
	__ASSERT(params->ccc_handle, "invalid parameters\n");
   1daae:	896b      	ldrh	r3, [r5, #10]
   1dab0:	b973      	cbnz	r3, 1dad0 <bt_gatt_resubscribe+0x70>
   1dab2:	4926      	ldr	r1, [pc, #152]	; (1db4c <bt_gatt_resubscribe+0xec>)
   1dab4:	4a21      	ldr	r2, [pc, #132]	; (1db3c <bt_gatt_resubscribe+0xdc>)
   1dab6:	4822      	ldr	r0, [pc, #136]	; (1db40 <bt_gatt_resubscribe+0xe0>)
   1dab8:	f241 13dd 	movw	r3, #4573	; 0x11dd
   1dabc:	f00b f86d 	bl	28b9a <printk>
   1dac0:	4820      	ldr	r0, [pc, #128]	; (1db44 <bt_gatt_resubscribe+0xe4>)
   1dac2:	f00b f86a 	bl	28b9a <printk>
   1dac6:	481d      	ldr	r0, [pc, #116]	; (1db3c <bt_gatt_resubscribe+0xdc>)
   1dac8:	f241 11dd 	movw	r1, #4573	; 0x11dd
   1dacc:	f00b faa6 	bl	2901c <assert_post_action>
		if (id == sub->id && !bt_addr_le_cmp(&sub->peer, addr)) {
   1dad0:	4c1f      	ldr	r4, [pc, #124]	; (1db50 <bt_gatt_resubscribe+0xf0>)
   1dad2:	7823      	ldrb	r3, [r4, #0]
   1dad4:	42b3      	cmp	r3, r6
   1dad6:	d007      	beq.n	1dae8 <bt_gatt_resubscribe+0x88>
		sub = gatt_sub_find(NULL);
   1dad8:	2000      	movs	r0, #0
   1dada:	f7fe fa0f 	bl	1befc <gatt_sub_find>
		if (sub) {
   1dade:	4604      	mov	r4, r0
   1dae0:	b9a8      	cbnz	r0, 1db0e <bt_gatt_resubscribe+0xae>
		return -ENOMEM;
   1dae2:	f06f 000b 	mvn.w	r0, #11
   1dae6:	e011      	b.n	1db0c <bt_gatt_resubscribe+0xac>
		if (id == sub->id && !bt_addr_le_cmp(&sub->peer, addr)) {
   1dae8:	4639      	mov	r1, r7
   1daea:	1c60      	adds	r0, r4, #1
   1daec:	f00d fe19 	bl	2b722 <bt_addr_le_cmp>
   1daf0:	2800      	cmp	r0, #0
   1daf2:	d1f1      	bne.n	1dad8 <bt_gatt_resubscribe+0x78>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1daf4:	68a2      	ldr	r2, [r4, #8]
   1daf6:	b112      	cbz	r2, 1dafe <bt_gatt_resubscribe+0x9e>
   1daf8:	f1a2 0314 	sub.w	r3, r2, #20
   1dafc:	b96b      	cbnz	r3, 1db1a <bt_gatt_resubscribe+0xba>
	parent->next = child;
   1dafe:	616a      	str	r2, [r5, #20]
Z_GENLIST_PREPEND(slist, snode)
   1db00:	68e0      	ldr	r0, [r4, #12]
	sys_slist_prepend(&sub->list, &params->node);
   1db02:	f105 0314 	add.w	r3, r5, #20
	list->head = node;
   1db06:	60a3      	str	r3, [r4, #8]
Z_GENLIST_PREPEND(slist, snode)
   1db08:	b9a0      	cbnz	r0, 1db34 <bt_gatt_resubscribe+0xd4>
	list->tail = node;
   1db0a:	60e3      	str	r3, [r4, #12]
}
   1db0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			bt_addr_le_copy(&sub->peer, addr);
   1db0e:	4639      	mov	r1, r7
   1db10:	1c60      	adds	r0, r4, #1
   1db12:	f00d ff0d 	bl	2b930 <bt_addr_le_copy>
			sub->id = id;
   1db16:	7026      	strb	r6, [r4, #0]
   1db18:	e7ec      	b.n	1daf4 <bt_gatt_resubscribe+0x94>
		if (tmp == params) {
   1db1a:	42ab      	cmp	r3, r5
   1db1c:	d007      	beq.n	1db2e <bt_gatt_resubscribe+0xce>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1db1e:	f113 0f14 	cmn.w	r3, #20
   1db22:	d0ec      	beq.n	1dafe <bt_gatt_resubscribe+0x9e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1db24:	695b      	ldr	r3, [r3, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, tmp, node) {
   1db26:	2b00      	cmp	r3, #0
   1db28:	d0e9      	beq.n	1dafe <bt_gatt_resubscribe+0x9e>
   1db2a:	3b14      	subs	r3, #20
   1db2c:	e7e6      	b.n	1dafc <bt_gatt_resubscribe+0x9c>
			return -EALREADY;
   1db2e:	f06f 0077 	mvn.w	r0, #119	; 0x77
   1db32:	e7eb      	b.n	1db0c <bt_gatt_resubscribe+0xac>
	return 0;
   1db34:	2000      	movs	r0, #0
   1db36:	e7e9      	b.n	1db0c <bt_gatt_resubscribe+0xac>
   1db38:	000320e0 	.word	0x000320e0
   1db3c:	00031d4a 	.word	0x00031d4a
   1db40:	0002e93e 	.word	0x0002e93e
   1db44:	00031e81 	.word	0x00031e81
   1db48:	000320f9 	.word	0x000320f9
   1db4c:	00032107 	.word	0x00032107
   1db50:	200027bc 	.word	0x200027bc

0001db54 <bt_gatt_unsubscribe>:
{
   1db54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db58:	460d      	mov	r5, r1
	__ASSERT(conn, "invalid parameters\n");
   1db5a:	4607      	mov	r7, r0
   1db5c:	b970      	cbnz	r0, 1db7c <bt_gatt_unsubscribe+0x28>
   1db5e:	494b      	ldr	r1, [pc, #300]	; (1dc8c <bt_gatt_unsubscribe+0x138>)
   1db60:	4a4b      	ldr	r2, [pc, #300]	; (1dc90 <bt_gatt_unsubscribe+0x13c>)
   1db62:	484c      	ldr	r0, [pc, #304]	; (1dc94 <bt_gatt_unsubscribe+0x140>)
   1db64:	f241 13f9 	movw	r3, #4601	; 0x11f9
   1db68:	f00b f817 	bl	28b9a <printk>
   1db6c:	484a      	ldr	r0, [pc, #296]	; (1dc98 <bt_gatt_unsubscribe+0x144>)
   1db6e:	f00b f814 	bl	28b9a <printk>
   1db72:	4847      	ldr	r0, [pc, #284]	; (1dc90 <bt_gatt_unsubscribe+0x13c>)
   1db74:	f241 11f9 	movw	r1, #4601	; 0x11f9
   1db78:	f00b fa50 	bl	2901c <assert_post_action>
	__ASSERT(params, "invalid parameters\n");
   1db7c:	b975      	cbnz	r5, 1db9c <bt_gatt_unsubscribe+0x48>
   1db7e:	4947      	ldr	r1, [pc, #284]	; (1dc9c <bt_gatt_unsubscribe+0x148>)
   1db80:	4a43      	ldr	r2, [pc, #268]	; (1dc90 <bt_gatt_unsubscribe+0x13c>)
   1db82:	4844      	ldr	r0, [pc, #272]	; (1dc94 <bt_gatt_unsubscribe+0x140>)
   1db84:	f241 13fa 	movw	r3, #4602	; 0x11fa
   1db88:	f00b f807 	bl	28b9a <printk>
   1db8c:	4842      	ldr	r0, [pc, #264]	; (1dc98 <bt_gatt_unsubscribe+0x144>)
   1db8e:	f00b f804 	bl	28b9a <printk>
   1db92:	483f      	ldr	r0, [pc, #252]	; (1dc90 <bt_gatt_unsubscribe+0x13c>)
   1db94:	f241 11fa 	movw	r1, #4602	; 0x11fa
   1db98:	f00b fa40 	bl	2901c <assert_post_action>
	if (conn->state != BT_CONN_CONNECTED) {
   1db9c:	7abb      	ldrb	r3, [r7, #10]
   1db9e:	2b07      	cmp	r3, #7
   1dba0:	d170      	bne.n	1dc84 <bt_gatt_unsubscribe+0x130>
	sub = gatt_sub_find(conn);
   1dba2:	4638      	mov	r0, r7
   1dba4:	f7fe f9aa 	bl	1befc <gatt_sub_find>
	if (!sub) {
   1dba8:	4606      	mov	r6, r0
   1dbaa:	b918      	cbnz	r0, 1dbb4 <bt_gatt_unsubscribe+0x60>
		return -EINVAL;
   1dbac:	f06f 0015 	mvn.w	r0, #21
}
   1dbb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1dbb4:	6884      	ldr	r4, [r0, #8]
   1dbb6:	b1f4      	cbz	r4, 1dbf6 <bt_gatt_unsubscribe+0xa2>
   1dbb8:	f1b4 0314 	subs.w	r3, r4, #20
   1dbbc:	d01d      	beq.n	1dbfa <bt_gatt_unsubscribe+0xa6>
   1dbbe:	6824      	ldr	r4, [r4, #0]
   1dbc0:	b104      	cbz	r4, 1dbc4 <bt_gatt_unsubscribe+0x70>
   1dbc2:	3c14      	subs	r4, #20
   1dbc4:	f04f 0800 	mov.w	r8, #0
   1dbc8:	46c2      	mov	sl, r8
   1dbca:	46c1      	mov	r9, r8
	parent->next = child;
   1dbcc:	46c3      	mov	fp, r8
   1dbce:	b9b3      	cbnz	r3, 1dbfe <bt_gatt_unsubscribe+0xaa>
	if (!found) {
   1dbd0:	f1ba 0f00 	cmp.w	sl, #0
   1dbd4:	d0ea      	beq.n	1dbac <bt_gatt_unsubscribe+0x58>
	if (gatt_sub_is_empty(sub)) {
   1dbd6:	68b3      	ldr	r3, [r6, #8]
   1dbd8:	b913      	cbnz	r3, 1dbe0 <bt_gatt_unsubscribe+0x8c>
		gatt_sub_free(sub);
   1dbda:	4630      	mov	r0, r6
   1dbdc:	f7fe fa1a 	bl	1c014 <gatt_sub_free>
	if (has_subscription) {
   1dbe0:	f1b9 0f00 	cmp.w	r9, #0
   1dbe4:	d046      	beq.n	1dc74 <bt_gatt_unsubscribe+0x120>
		params->notify(conn, params, NULL, 0);
   1dbe6:	2300      	movs	r3, #0
   1dbe8:	682c      	ldr	r4, [r5, #0]
   1dbea:	461a      	mov	r2, r3
   1dbec:	4629      	mov	r1, r5
   1dbee:	4638      	mov	r0, r7
   1dbf0:	47a0      	blx	r4
		return 0;
   1dbf2:	2000      	movs	r0, #0
   1dbf4:	e7dc      	b.n	1dbb0 <bt_gatt_unsubscribe+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1dbf6:	4623      	mov	r3, r4
   1dbf8:	e7e4      	b.n	1dbc4 <bt_gatt_unsubscribe+0x70>
   1dbfa:	461c      	mov	r4, r3
   1dbfc:	e7e2      	b.n	1dbc4 <bt_gatt_unsubscribe+0x70>
		if (params == tmp) {
   1dbfe:	42ab      	cmp	r3, r5
   1dc00:	f103 0114 	add.w	r1, r3, #20
   1dc04:	d129      	bne.n	1dc5a <bt_gatt_unsubscribe+0x106>
Z_GENLIST_REMOVE(slist, snode)
   1dc06:	6958      	ldr	r0, [r3, #20]
   1dc08:	f1b8 0f00 	cmp.w	r8, #0
   1dc0c:	d11d      	bne.n	1dc4a <bt_gatt_unsubscribe+0xf6>
   1dc0e:	68f2      	ldr	r2, [r6, #12]
	list->head = node;
   1dc10:	60b0      	str	r0, [r6, #8]
Z_GENLIST_REMOVE(slist, snode)
   1dc12:	4291      	cmp	r1, r2
   1dc14:	d100      	bne.n	1dc18 <bt_gatt_unsubscribe+0xc4>
	list->tail = node;
   1dc16:	60f0      	str	r0, [r6, #12]
	parent->next = child;
   1dc18:	f8c3 b014 	str.w	fp, [r3, #20]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1dc1c:	f3bf 8f5b 	dmb	ish
   1dc20:	692b      	ldr	r3, [r5, #16]
   1dc22:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1dc26:	f3c3 0a80 	ubfx	sl, r3, #2, #1
			if (atomic_test_bit(params->flags,
   1dc2a:	075b      	lsls	r3, r3, #29
   1dc2c:	d51d      	bpl.n	1dc6a <bt_gatt_unsubscribe+0x116>
	bt_att_req_cancel(conn, params);
   1dc2e:	4629      	mov	r1, r5
   1dc30:	4638      	mov	r0, r7
   1dc32:	f7fe f905 	bl	1be40 <bt_att_req_cancel>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1dc36:	b1dc      	cbz	r4, 1dc70 <bt_gatt_unsubscribe+0x11c>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dc38:	f114 0214 	adds.w	r2, r4, #20
   1dc3c:	d002      	beq.n	1dc44 <bt_gatt_unsubscribe+0xf0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dc3e:	6962      	ldr	r2, [r4, #20]
   1dc40:	b102      	cbz	r2, 1dc44 <bt_gatt_unsubscribe+0xf0>
   1dc42:	3a14      	subs	r2, #20
   1dc44:	4623      	mov	r3, r4
   1dc46:	4614      	mov	r4, r2
   1dc48:	e7c1      	b.n	1dbce <bt_gatt_unsubscribe+0x7a>
	parent->next = child;
   1dc4a:	f8c8 0000 	str.w	r0, [r8]
Z_GENLIST_REMOVE(slist, snode)
   1dc4e:	68f2      	ldr	r2, [r6, #12]
   1dc50:	4291      	cmp	r1, r2
	list->tail = node;
   1dc52:	bf08      	it	eq
   1dc54:	f8c6 800c 	streq.w	r8, [r6, #12]
}
   1dc58:	e7de      	b.n	1dc18 <bt_gatt_unsubscribe+0xc4>
		if (tmp->value_handle == params->value_handle) {
   1dc5a:	891a      	ldrh	r2, [r3, #8]
   1dc5c:	892b      	ldrh	r3, [r5, #8]
   1dc5e:	4688      	mov	r8, r1
   1dc60:	429a      	cmp	r2, r3
   1dc62:	bf08      	it	eq
   1dc64:	f04f 0901 	moveq.w	r9, #1
   1dc68:	e7e5      	b.n	1dc36 <bt_gatt_unsubscribe+0xe2>
			found = true;
   1dc6a:	f04f 0a01 	mov.w	sl, #1
   1dc6e:	e7e2      	b.n	1dc36 <bt_gatt_unsubscribe+0xe2>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, tmp, next, node) {
   1dc70:	4622      	mov	r2, r4
   1dc72:	e7e7      	b.n	1dc44 <bt_gatt_unsubscribe+0xf0>
	params->value = 0x0000;
   1dc74:	f8a5 900c 	strh.w	r9, [r5, #12]
	return gatt_write_ccc(conn, params);
   1dc78:	4629      	mov	r1, r5
   1dc7a:	4638      	mov	r0, r7
}
   1dc7c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return gatt_write_ccc(conn, params);
   1dc80:	f7fe bac2 	b.w	1c208 <gatt_write_ccc>
		return -ENOTCONN;
   1dc84:	f06f 007f 	mvn.w	r0, #127	; 0x7f
   1dc88:	e792      	b.n	1dbb0 <bt_gatt_unsubscribe+0x5c>
   1dc8a:	bf00      	nop
   1dc8c:	000329ff 	.word	0x000329ff
   1dc90:	00031d4a 	.word	0x00031d4a
   1dc94:	0002e93e 	.word	0x0002e93e
   1dc98:	00031e81 	.word	0x00031e81
   1dc9c:	00031e7a 	.word	0x00031e7a

0001dca0 <bt_gatt_mult_notification>:
{
   1dca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dca4:	b087      	sub	sp, #28
   1dca6:	4682      	mov	sl, r0
   1dca8:	460c      	mov	r4, r1
   1dcaa:	4616      	mov	r6, r2
	sub = gatt_sub_find(conn);
   1dcac:	f7fe f926 	bl	1befc <gatt_sub_find>
	if (!sub) {
   1dcb0:	4607      	mov	r7, r0
   1dcb2:	b310      	cbz	r0, 1dcfa <bt_gatt_mult_notification+0x5a>
	net_buf_simple_init_with_data(&buf, (void *)data, length);
   1dcb4:	4632      	mov	r2, r6
   1dcb6:	4621      	mov	r1, r4
   1dcb8:	a803      	add	r0, sp, #12
   1dcba:	f00e f9bb 	bl	2c034 <net_buf_simple_init_with_data>
	while (buf.len > sizeof(*nfy)) {
   1dcbe:	f8bd 3010 	ldrh.w	r3, [sp, #16]
   1dcc2:	2b04      	cmp	r3, #4
   1dcc4:	d919      	bls.n	1dcfa <bt_gatt_mult_notification+0x5a>
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1dcc6:	2104      	movs	r1, #4
   1dcc8:	a803      	add	r0, sp, #12
   1dcca:	f002 faa5 	bl	20218 <net_buf_simple_pull_mem>
		if (len > buf.len) {
   1dcce:	f8bd 3010 	ldrh.w	r3, [sp, #16]
		len = sys_cpu_to_le16(nfy->len);
   1dcd2:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		if (len > buf.len) {
   1dcd6:	4543      	cmp	r3, r8
		nfy = net_buf_simple_pull_mem(&buf, sizeof(*nfy));
   1dcd8:	4605      	mov	r5, r0
		if (len > buf.len) {
   1dcda:	d211      	bcs.n	1dd00 <bt_gatt_mult_notification+0x60>
			BT_ERR("Invalid data len %u > %u", len, length);
   1dcdc:	4b1e      	ldr	r3, [pc, #120]	; (1dd58 <bt_gatt_mult_notification+0xb8>)
   1dcde:	681a      	ldr	r2, [r3, #0]
   1dce0:	0752      	lsls	r2, r2, #29
   1dce2:	d00a      	beq.n	1dcfa <bt_gatt_mult_notification+0x5a>
   1dce4:	4a1d      	ldr	r2, [pc, #116]	; (1dd5c <bt_gatt_mult_notification+0xbc>)
   1dce6:	481e      	ldr	r0, [pc, #120]	; (1dd60 <bt_gatt_mult_notification+0xc0>)
   1dce8:	1a9b      	subs	r3, r3, r2
   1dcea:	089b      	lsrs	r3, r3, #2
   1dcec:	019b      	lsls	r3, r3, #6
   1dcee:	f043 0301 	orr.w	r3, r3, #1
   1dcf2:	4632      	mov	r2, r6
   1dcf4:	4641      	mov	r1, r8
   1dcf6:	f00b fb13 	bl	29320 <log_2>
}
   1dcfa:	b007      	add	sp, #28
   1dcfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1dd00:	68bb      	ldr	r3, [r7, #8]
   1dd02:	b31b      	cbz	r3, 1dd4c <bt_gatt_mult_notification+0xac>
   1dd04:	f1b3 0914 	subs.w	r9, r3, #20
   1dd08:	d020      	beq.n	1dd4c <bt_gatt_mult_notification+0xac>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dd0a:	681c      	ldr	r4, [r3, #0]
   1dd0c:	b104      	cbz	r4, 1dd10 <bt_gatt_mult_notification+0x70>
   1dd0e:	3c14      	subs	r4, #20
		handle = sys_cpu_to_le16(nfy->handle);
   1dd10:	462b      	mov	r3, r5
   1dd12:	f833 bb04 	ldrh.w	fp, [r3], #4
   1dd16:	9301      	str	r3, [sp, #4]
			if (handle != params->value_handle) {
   1dd18:	f8b9 3008 	ldrh.w	r3, [r9, #8]
   1dd1c:	455b      	cmp	r3, fp
   1dd1e:	d10b      	bne.n	1dd38 <bt_gatt_mult_notification+0x98>
			if (params->notify(conn, params, nfy->value, len) ==
   1dd20:	9a01      	ldr	r2, [sp, #4]
   1dd22:	f8d9 5000 	ldr.w	r5, [r9]
   1dd26:	4643      	mov	r3, r8
   1dd28:	4649      	mov	r1, r9
   1dd2a:	4650      	mov	r0, sl
   1dd2c:	47a8      	blx	r5
   1dd2e:	b918      	cbnz	r0, 1dd38 <bt_gatt_mult_notification+0x98>
				bt_gatt_unsubscribe(conn, params);
   1dd30:	4649      	mov	r1, r9
   1dd32:	4650      	mov	r0, sl
   1dd34:	f7ff ff0e 	bl	1db54 <bt_gatt_unsubscribe>
		SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1dd38:	b144      	cbz	r4, 1dd4c <bt_gatt_mult_notification+0xac>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dd3a:	f114 0314 	adds.w	r3, r4, #20
   1dd3e:	d002      	beq.n	1dd46 <bt_gatt_mult_notification+0xa6>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1dd40:	6963      	ldr	r3, [r4, #20]
   1dd42:	b103      	cbz	r3, 1dd46 <bt_gatt_mult_notification+0xa6>
   1dd44:	3b14      	subs	r3, #20
{
   1dd46:	46a1      	mov	r9, r4
   1dd48:	461c      	mov	r4, r3
   1dd4a:	e7e5      	b.n	1dd18 <bt_gatt_mult_notification+0x78>
		net_buf_simple_pull_mem(&buf, len);
   1dd4c:	4641      	mov	r1, r8
   1dd4e:	a803      	add	r0, sp, #12
   1dd50:	f002 fa62 	bl	20218 <net_buf_simple_pull_mem>
   1dd54:	e7b3      	b.n	1dcbe <bt_gatt_mult_notification+0x1e>
   1dd56:	bf00      	nop
   1dd58:	2000074c 	.word	0x2000074c
   1dd5c:	20000740 	.word	0x20000740
   1dd60:	0003211a 	.word	0x0003211a

0001dd64 <bt_gatt_connected>:
{
   1dd64:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1dd66:	4a17      	ldr	r2, [pc, #92]	; (1ddc4 <bt_gatt_connected+0x60>)
	data.conn = conn;
   1dd68:	9000      	str	r0, [sp, #0]
{
   1dd6a:	4605      	mov	r5, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1dd6c:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
   1dd6e:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1dd70:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
   1dd74:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
   1dd78:	f00d fff9 	bl	2bd6e <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1dd7c:	4628      	mov	r0, r5
   1dd7e:	f7fe f8bd 	bl	1befc <gatt_sub_find>
	if (!sub) {
   1dd82:	b128      	cbz	r0, 1dd90 <bt_gatt_connected+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1dd84:	6884      	ldr	r4, [r0, #8]
   1dd86:	b11c      	cbz	r4, 1dd90 <bt_gatt_connected+0x2c>
   1dd88:	3c14      	subs	r4, #20
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1dd8a:	f105 0690 	add.w	r6, r5, #144	; 0x90
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1dd8e:	b90c      	cbnz	r4, 1dd94 <bt_gatt_connected+0x30>
}
   1dd90:	b002      	add	sp, #8
   1dd92:	bd70      	pop	{r4, r5, r6, pc}
		if (bt_addr_le_is_bonded(conn->id, &conn->le.dst) &&
   1dd94:	7a28      	ldrb	r0, [r5, #8]
   1dd96:	4631      	mov	r1, r6
   1dd98:	f00c feb2 	bl	2ab00 <bt_addr_le_is_bonded>
   1dd9c:	b150      	cbz	r0, 1ddb4 <bt_gatt_connected+0x50>
   1dd9e:	f3bf 8f5b 	dmb	ish
   1dda2:	6923      	ldr	r3, [r4, #16]
   1dda4:	f3bf 8f5b 	dmb	ish
   1dda8:	079b      	lsls	r3, r3, #30
   1ddaa:	d403      	bmi.n	1ddb4 <bt_gatt_connected+0x50>
			gatt_write_ccc(conn, params);
   1ddac:	4621      	mov	r1, r4
   1ddae:	4628      	mov	r0, r5
   1ddb0:	f7fe fa2a 	bl	1c208 <gatt_write_ccc>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1ddb4:	f114 0f14 	cmn.w	r4, #20
   1ddb8:	d0ea      	beq.n	1dd90 <bt_gatt_connected+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ddba:	6964      	ldr	r4, [r4, #20]
	SYS_SLIST_FOR_EACH_CONTAINER(&sub->list, params, node) {
   1ddbc:	2c00      	cmp	r4, #0
   1ddbe:	d0e7      	beq.n	1dd90 <bt_gatt_connected+0x2c>
   1ddc0:	3c14      	subs	r4, #20
   1ddc2:	e7e4      	b.n	1dd8e <bt_gatt_connected+0x2a>
   1ddc4:	0001ca61 	.word	0x0001ca61

0001ddc8 <bt_gatt_att_max_mtu_changed>:
{
   1ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ddca:	4b09      	ldr	r3, [pc, #36]	; (1ddf0 <bt_gatt_att_max_mtu_changed+0x28>)
   1ddcc:	681c      	ldr	r4, [r3, #0]
{
   1ddce:	4605      	mov	r5, r0
   1ddd0:	460e      	mov	r6, r1
   1ddd2:	4617      	mov	r7, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&callback_list, cb, node) {
   1ddd4:	b10c      	cbz	r4, 1ddda <bt_gatt_att_max_mtu_changed+0x12>
   1ddd6:	3c04      	subs	r4, #4
   1ddd8:	b904      	cbnz	r4, 1dddc <bt_gatt_att_max_mtu_changed+0x14>
}
   1ddda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (cb->att_mtu_updated) {
   1dddc:	6823      	ldr	r3, [r4, #0]
   1ddde:	b11b      	cbz	r3, 1dde8 <bt_gatt_att_max_mtu_changed+0x20>
			cb->att_mtu_updated(conn, tx, rx);
   1dde0:	463a      	mov	r2, r7
   1dde2:	4631      	mov	r1, r6
   1dde4:	4628      	mov	r0, r5
   1dde6:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   1dde8:	1d23      	adds	r3, r4, #4
   1ddea:	d0f6      	beq.n	1ddda <bt_gatt_att_max_mtu_changed+0x12>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ddec:	6864      	ldr	r4, [r4, #4]
   1ddee:	e7f1      	b.n	1ddd4 <bt_gatt_att_max_mtu_changed+0xc>
   1ddf0:	20002784 	.word	0x20002784

0001ddf4 <db_hash_read>:
{
   1ddf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1ddf8:	4910      	ldr	r1, [pc, #64]	; (1de3c <db_hash_read+0x48>)
{
   1ddfa:	f8bd 7018 	ldrh.w	r7, [sp, #24]
   1ddfe:	4606      	mov	r6, r0
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1de00:	f1a1 0030 	sub.w	r0, r1, #48	; 0x30
{
   1de04:	461d      	mov	r5, r3
   1de06:	4614      	mov	r4, r2
	(void)k_work_cancel_delayable_sync(&db_hash.work, &db_hash.sync);
   1de08:	f007 fccc 	bl	257a4 <k_work_cancel_delayable_sync>
   1de0c:	f3bf 8f5b 	dmb	ish
   1de10:	4b0b      	ldr	r3, [pc, #44]	; (1de40 <db_hash_read+0x4c>)
   1de12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   1de14:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(gatt_sc.flags, DB_HASH_VALID)) {
   1de18:	075b      	lsls	r3, r3, #29
   1de1a:	d401      	bmi.n	1de20 <db_hash_read+0x2c>
		db_hash_gen(true);
   1de1c:	f7fe fb84 	bl	1c528 <db_hash_gen.isra.0>
	(void)bt_gatt_change_aware(conn, true);
   1de20:	2101      	movs	r1, #1
   1de22:	4630      	mov	r0, r6
   1de24:	f00e f868 	bl	2bef8 <bt_gatt_change_aware>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1de28:	2310      	movs	r3, #16
   1de2a:	9306      	str	r3, [sp, #24]
   1de2c:	463a      	mov	r2, r7
   1de2e:	4629      	mov	r1, r5
   1de30:	4620      	mov	r0, r4
   1de32:	4b04      	ldr	r3, [pc, #16]	; (1de44 <db_hash_read+0x50>)
}
   1de34:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash.hash,
   1de38:	f00d bda7 	b.w	2b98a <bt_gatt_attr_read.constprop.0>
   1de3c:	20001c78 	.word	0x20001c78
   1de40:	20001ca0 	.word	0x20001ca0
   1de44:	20001c38 	.word	0x20001c38

0001de48 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
   1de48:	b573      	push	{r0, r1, r4, r5, r6, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1de4a:	4a25      	ldr	r2, [pc, #148]	; (1dee0 <bt_gatt_clear+0x98>)
	struct addr_with_id addr_with_id = {
   1de4c:	9100      	str	r1, [sp, #0]
{
   1de4e:	4604      	mov	r4, r0
   1de50:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
   1de52:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
   1de56:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1de5a:	2001      	movs	r0, #1
   1de5c:	466b      	mov	r3, sp
   1de5e:	f00d ff86 	bl	2bd6e <bt_gatt_foreach_attr>
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   1de62:	4629      	mov	r1, r5
   1de64:	4620      	mov	r0, r4
   1de66:	f7fe f839 	bl	1bedc <find_sc_cfg>
	if (!cfg) {
   1de6a:	b108      	cbz	r0, 1de70 <bt_gatt_clear+0x28>
	clear_sc_cfg(cfg);
   1de6c:	f00d fd67 	bl	2b93e <clear_sc_cfg>
			if (id == cf_cfg[i].id &&
   1de70:	4e1c      	ldr	r6, [pc, #112]	; (1dee4 <bt_gatt_clear+0x9c>)
   1de72:	7833      	ldrb	r3, [r6, #0]
   1de74:	42a3      	cmp	r3, r4
   1de76:	d006      	beq.n	1de86 <bt_gatt_clear+0x3e>
		if (id == sub->id &&
   1de78:	4e1b      	ldr	r6, [pc, #108]	; (1dee8 <bt_gatt_clear+0xa0>)
   1de7a:	7833      	ldrb	r3, [r6, #0]
   1de7c:	42a3      	cmp	r3, r4
   1de7e:	d00c      	beq.n	1de9a <bt_gatt_clear+0x52>
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
   1de80:	2000      	movs	r0, #0
   1de82:	b002      	add	sp, #8
   1de84:	bd70      	pop	{r4, r5, r6, pc}
			    !bt_addr_le_cmp(addr, &cf_cfg[i].peer)) {
   1de86:	1c71      	adds	r1, r6, #1
   1de88:	4628      	mov	r0, r5
   1de8a:	f00d fc4a 	bl	2b722 <bt_addr_le_cmp>
			if (id == cf_cfg[i].id &&
   1de8e:	2800      	cmp	r0, #0
   1de90:	d1f2      	bne.n	1de78 <bt_gatt_clear+0x30>
		clear_cf_cfg(cfg);
   1de92:	4630      	mov	r0, r6
   1de94:	f00d fe21 	bl	2bada <clear_cf_cfg>
   1de98:	e7ee      	b.n	1de78 <bt_gatt_clear+0x30>
		    !bt_addr_le_cmp(addr, &sub->peer)) {
   1de9a:	1c71      	adds	r1, r6, #1
   1de9c:	4628      	mov	r0, r5
   1de9e:	f00d fc40 	bl	2b722 <bt_addr_le_cmp>
		if (id == sub->id &&
   1dea2:	2800      	cmp	r0, #0
   1dea4:	d1ec      	bne.n	1de80 <bt_gatt_clear+0x38>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1dea6:	68b2      	ldr	r2, [r6, #8]
   1dea8:	2a00      	cmp	r2, #0
   1deaa:	d0e9      	beq.n	1de80 <bt_gatt_clear+0x38>
   1deac:	f1b2 0314 	subs.w	r3, r2, #20
   1deb0:	d0e6      	beq.n	1de80 <bt_gatt_clear+0x38>
   1deb2:	6814      	ldr	r4, [r2, #0]
   1deb4:	b104      	cbz	r4, 1deb8 <bt_gatt_clear+0x70>
   1deb6:	3c14      	subs	r4, #20
		gatt_sub_remove(NULL, sub, prev, params);
   1deb8:	4e0b      	ldr	r6, [pc, #44]	; (1dee8 <bt_gatt_clear+0xa0>)
		params->value = 0U;
   1deba:	2500      	movs	r5, #0
		gatt_sub_remove(NULL, sub, prev, params);
   1debc:	2200      	movs	r2, #0
		params->value = 0U;
   1debe:	819d      	strh	r5, [r3, #12]
		gatt_sub_remove(NULL, sub, prev, params);
   1dec0:	4631      	mov	r1, r6
   1dec2:	4610      	mov	r0, r2
   1dec4:	f00d fe7d 	bl	2bbc2 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp,
   1dec8:	2c00      	cmp	r4, #0
   1deca:	d0d9      	beq.n	1de80 <bt_gatt_clear+0x38>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1decc:	f114 0214 	adds.w	r2, r4, #20
   1ded0:	d002      	beq.n	1ded8 <bt_gatt_clear+0x90>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1ded2:	6962      	ldr	r2, [r4, #20]
   1ded4:	b102      	cbz	r2, 1ded8 <bt_gatt_clear+0x90>
   1ded6:	3a14      	subs	r2, #20
{
   1ded8:	4623      	mov	r3, r4
   1deda:	4614      	mov	r4, r2
   1dedc:	e7ee      	b.n	1debc <bt_gatt_clear+0x74>
   1dede:	bf00      	nop
   1dee0:	0001c0cd 	.word	0x0001c0cd
   1dee4:	2000278c 	.word	0x2000278c
   1dee8:	200027bc 	.word	0x200027bc

0001deec <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
   1deec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1def0:	4a33      	ldr	r2, [pc, #204]	; (1dfc0 <bt_gatt_disconnected+0xd4>)
   1def2:	4603      	mov	r3, r0
{
   1def4:	4604      	mov	r4, r0
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
   1def6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1defa:	2001      	movs	r0, #1
   1defc:	f00d ff37 	bl	2bd6e <bt_gatt_foreach_attr>
	sub = gatt_sub_find(conn);
   1df00:	4620      	mov	r0, r4
   1df02:	f7fd fffb 	bl	1befc <gatt_sub_find>
	if (!sub) {
   1df06:	4606      	mov	r6, r0
   1df08:	b3a8      	cbz	r0, 1df76 <bt_gatt_disconnected+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1df0a:	6883      	ldr	r3, [r0, #8]
   1df0c:	b39b      	cbz	r3, 1df76 <bt_gatt_disconnected+0x8a>
   1df0e:	f1b3 0714 	subs.w	r7, r3, #20
   1df12:	d030      	beq.n	1df76 <bt_gatt_disconnected+0x8a>
   1df14:	681d      	ldr	r5, [r3, #0]
   1df16:	b105      	cbz	r5, 1df1a <bt_gatt_disconnected+0x2e>
   1df18:	3d14      	subs	r5, #20
{
   1df1a:	f04f 0b00 	mov.w	fp, #0
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1df1e:	f104 0890 	add.w	r8, r4, #144	; 0x90
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1df22:	f106 0901 	add.w	r9, r6, #1
			params->value = 0U;
   1df26:	46da      	mov	sl, fp
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1df28:	7a20      	ldrb	r0, [r4, #8]
   1df2a:	4641      	mov	r1, r8
   1df2c:	f00c fde8 	bl	2ab00 <bt_addr_le_is_bonded>
   1df30:	b988      	cbnz	r0, 1df56 <bt_gatt_disconnected+0x6a>
			params->value = 0U;
   1df32:	f8a7 a00c 	strh.w	sl, [r7, #12]
			gatt_sub_remove(conn, sub, prev, params);
   1df36:	463b      	mov	r3, r7
   1df38:	465a      	mov	r2, fp
   1df3a:	4631      	mov	r1, r6
   1df3c:	4620      	mov	r0, r4
   1df3e:	f00d fe40 	bl	2bbc2 <gatt_sub_remove>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   1df42:	b1c5      	cbz	r5, 1df76 <bt_gatt_disconnected+0x8a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1df44:	f115 0114 	adds.w	r1, r5, #20
   1df48:	d002      	beq.n	1df50 <bt_gatt_disconnected+0x64>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1df4a:	6969      	ldr	r1, [r5, #20]
   1df4c:	b101      	cbz	r1, 1df50 <bt_gatt_disconnected+0x64>
   1df4e:	3914      	subs	r1, #20
{
   1df50:	462f      	mov	r7, r5
   1df52:	460d      	mov	r5, r1
   1df54:	e7e8      	b.n	1df28 <bt_gatt_disconnected+0x3c>
   1df56:	f3bf 8f5b 	dmb	ish
   1df5a:	693b      	ldr	r3, [r7, #16]
   1df5c:	f3bf 8f5b 	dmb	ish
		if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst) ||
   1df60:	07db      	lsls	r3, r3, #31
   1df62:	d4e6      	bmi.n	1df32 <bt_gatt_disconnected+0x46>
	if (sub->peer.type == BT_ADDR_LE_PUBLIC) {
   1df64:	7873      	ldrb	r3, [r6, #1]
   1df66:	b11b      	cbz	r3, 1df70 <bt_gatt_disconnected+0x84>
	bt_addr_le_copy(&sub->peer, &conn->le.dst);
   1df68:	4641      	mov	r1, r8
   1df6a:	4648      	mov	r0, r9
   1df6c:	f00d fce0 	bl	2b930 <bt_addr_le_copy>
			prev = &params->node;
   1df70:	f107 0b14 	add.w	fp, r7, #20
   1df74:	e7e5      	b.n	1df42 <bt_gatt_disconnected+0x56>
	cfg = find_cf_cfg(conn);
   1df76:	4620      	mov	r0, r4
   1df78:	f7fd ff92 	bl	1bea0 <find_cf_cfg>
	if (!cfg) {
   1df7c:	4605      	mov	r5, r0
   1df7e:	b1e0      	cbz	r0, 1dfba <bt_gatt_disconnected+0xce>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1df80:	f104 0690 	add.w	r6, r4, #144	; 0x90
   1df84:	7a20      	ldrb	r0, [r4, #8]
   1df86:	4631      	mov	r1, r6
   1df88:	f00c fdba 	bl	2ab00 <bt_addr_le_is_bonded>
   1df8c:	b920      	cbnz	r0, 1df98 <bt_gatt_disconnected+0xac>
		clear_cf_cfg(cfg);
   1df8e:	4628      	mov	r0, r5
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
   1df90:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_cf_cfg(cfg);
   1df94:	f00d bda1 	b.w	2bada <clear_cf_cfg>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
   1df98:	1c68      	adds	r0, r5, #1
   1df9a:	4631      	mov	r1, r6
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1df9c:	350c      	adds	r5, #12
   1df9e:	f00d fcc7 	bl	2b930 <bt_addr_le_copy>
   1dfa2:	f3bf 8f5b 	dmb	ish
   1dfa6:	e855 3f00 	ldrex	r3, [r5]
   1dfaa:	f023 0302 	bic.w	r3, r3, #2
   1dfae:	e845 3200 	strex	r2, r3, [r5]
   1dfb2:	2a00      	cmp	r2, #0
   1dfb4:	d1f7      	bne.n	1dfa6 <bt_gatt_disconnected+0xba>
   1dfb6:	f3bf 8f5b 	dmb	ish
}
   1dfba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dfbe:	bf00      	nop
   1dfc0:	0001c22d 	.word	0x0001c22d

0001dfc4 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_l2cap_le_chan *smp = &bt_smp_pool[i];

		if (smp->chan.conn) {
   1dfc4:	4a0c      	ldr	r2, [pc, #48]	; (1dff8 <bt_smp_accept+0x34>)
{
   1dfc6:	b508      	push	{r3, lr}
   1dfc8:	4603      	mov	r3, r0
		if (smp->chan.conn) {
   1dfca:	6810      	ldr	r0, [r2, #0]
   1dfcc:	b918      	cbnz	r0, 1dfd6 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.ops = &ops;
   1dfce:	4b0b      	ldr	r3, [pc, #44]	; (1dffc <bt_smp_accept+0x38>)
   1dfd0:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan;
   1dfd2:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
   1dfd4:	bd08      	pop	{r3, pc}
	BT_ERR("No available SMP context for conn %p", conn);
   1dfd6:	4a0a      	ldr	r2, [pc, #40]	; (1e000 <bt_smp_accept+0x3c>)
   1dfd8:	6811      	ldr	r1, [r2, #0]
   1dfda:	0749      	lsls	r1, r1, #29
   1dfdc:	d009      	beq.n	1dff2 <bt_smp_accept+0x2e>
   1dfde:	4909      	ldr	r1, [pc, #36]	; (1e004 <bt_smp_accept+0x40>)
   1dfe0:	4809      	ldr	r0, [pc, #36]	; (1e008 <bt_smp_accept+0x44>)
   1dfe2:	1a52      	subs	r2, r2, r1
   1dfe4:	0892      	lsrs	r2, r2, #2
   1dfe6:	0192      	lsls	r2, r2, #6
   1dfe8:	f042 0201 	orr.w	r2, r2, #1
   1dfec:	4619      	mov	r1, r3
   1dfee:	f00b f983 	bl	292f8 <log_1>
   1dff2:	f06f 000b 	mvn.w	r0, #11
   1dff6:	e7ed      	b.n	1dfd4 <bt_smp_accept+0x10>
   1dff8:	20001cf8 	.word	0x20001cf8
   1dffc:	0002dfb4 	.word	0x0002dfb4
   1e000:	20000764 	.word	0x20000764
   1e004:	20000740 	.word	0x20000740
   1e008:	00032142 	.word	0x00032142

0001e00c <bt_addr_le_to_str>:
{
   1e00c:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (addr->type) {
   1e00e:	7803      	ldrb	r3, [r0, #0]
{
   1e010:	b08b      	sub	sp, #44	; 0x2c
   1e012:	4604      	mov	r4, r0
   1e014:	460e      	mov	r6, r1
   1e016:	4617      	mov	r7, r2
   1e018:	ad07      	add	r5, sp, #28
   1e01a:	2b03      	cmp	r3, #3
   1e01c:	d820      	bhi.n	1e060 <bt_addr_le_to_str+0x54>
   1e01e:	e8df f003 	tbb	[pc, r3]
   1e022:	1902      	.short	0x1902
   1e024:	1d1b      	.short	0x1d1b
		strcpy(type, "public");
   1e026:	4911      	ldr	r1, [pc, #68]	; (1e06c <bt_addr_le_to_str+0x60>)
		strcpy(type, "random");
   1e028:	4628      	mov	r0, r5
   1e02a:	f00e fe21 	bl	2cc70 <strcpy>
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
   1e02e:	7863      	ldrb	r3, [r4, #1]
   1e030:	9304      	str	r3, [sp, #16]
   1e032:	78a3      	ldrb	r3, [r4, #2]
   1e034:	9303      	str	r3, [sp, #12]
   1e036:	78e3      	ldrb	r3, [r4, #3]
   1e038:	9302      	str	r3, [sp, #8]
   1e03a:	7923      	ldrb	r3, [r4, #4]
   1e03c:	9301      	str	r3, [sp, #4]
   1e03e:	7963      	ldrb	r3, [r4, #5]
   1e040:	9300      	str	r3, [sp, #0]
   1e042:	4a0b      	ldr	r2, [pc, #44]	; (1e070 <bt_addr_le_to_str+0x64>)
   1e044:	79a3      	ldrb	r3, [r4, #6]
   1e046:	9505      	str	r5, [sp, #20]
   1e048:	4639      	mov	r1, r7
   1e04a:	4630      	mov	r0, r6
   1e04c:	f00a fdb2 	bl	28bb4 <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
   1e050:	b00b      	add	sp, #44	; 0x2c
   1e052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		strcpy(type, "random");
   1e054:	4907      	ldr	r1, [pc, #28]	; (1e074 <bt_addr_le_to_str+0x68>)
   1e056:	e7e7      	b.n	1e028 <bt_addr_le_to_str+0x1c>
		strcpy(type, "public-id");
   1e058:	4907      	ldr	r1, [pc, #28]	; (1e078 <bt_addr_le_to_str+0x6c>)
   1e05a:	e7e5      	b.n	1e028 <bt_addr_le_to_str+0x1c>
		strcpy(type, "random-id");
   1e05c:	4907      	ldr	r1, [pc, #28]	; (1e07c <bt_addr_le_to_str+0x70>)
   1e05e:	e7e3      	b.n	1e028 <bt_addr_le_to_str+0x1c>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
   1e060:	4a07      	ldr	r2, [pc, #28]	; (1e080 <bt_addr_le_to_str+0x74>)
   1e062:	210a      	movs	r1, #10
   1e064:	4628      	mov	r0, r5
   1e066:	f00a fda5 	bl	28bb4 <snprintk>
		break;
   1e06a:	e7e0      	b.n	1e02e <bt_addr_le_to_str+0x22>
   1e06c:	00030da5 	.word	0x00030da5
   1e070:	00030dc7 	.word	0x00030dc7
   1e074:	00030dac 	.word	0x00030dac
   1e078:	00030db3 	.word	0x00030db3
   1e07c:	00030dbd 	.word	0x00030dbd
   1e080:	00031c8a 	.word	0x00031c8a

0001e084 <print_le_addr>:
	default: return "Invalid";
	}
}

static void print_le_addr(const char *desc, const bt_addr_le_t *addr)
{
   1e084:	b570      	push	{r4, r5, r6, lr}
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1e086:	780b      	ldrb	r3, [r1, #0]
   1e088:	4605      	mov	r5, r0
   1e08a:	b08a      	sub	sp, #40	; 0x28
   1e08c:	4608      	mov	r0, r1
   1e08e:	b1db      	cbz	r3, 1e0c8 <print_le_addr+0x44>
	return BT_ADDR_IS_STATIC(&addr->a);
   1e090:	798c      	ldrb	r4, [r1, #6]
   1e092:	f004 02c0 	and.w	r2, r4, #192	; 0xc0
	char addr_str[BT_ADDR_LE_STR_LEN];

	const char *addr_desc = bt_addr_le_is_identity(addr) ? "identity" :
   1e096:	2ac0      	cmp	r2, #192	; 0xc0
   1e098:	d016      	beq.n	1e0c8 <print_le_addr+0x44>
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1e09a:	2b01      	cmp	r3, #1
   1e09c:	4c0b      	ldr	r4, [pc, #44]	; (1e0cc <print_le_addr+0x48>)
   1e09e:	d103      	bne.n	1e0a8 <print_le_addr+0x24>
   1e0a0:	4b0b      	ldr	r3, [pc, #44]	; (1e0d0 <print_le_addr+0x4c>)
   1e0a2:	2a40      	cmp	r2, #64	; 0x40
   1e0a4:	bf08      	it	eq
   1e0a6:	461c      	moveq	r4, r3
				bt_addr_le_is_rpa(addr) ? "resolvable" :
				"non-resolvable";

	bt_addr_le_to_str(addr, addr_str, sizeof(addr_str));
   1e0a8:	ae02      	add	r6, sp, #8
   1e0aa:	4631      	mov	r1, r6
   1e0ac:	221e      	movs	r2, #30
   1e0ae:	f7ff ffad 	bl	1e00c <bt_addr_le_to_str>

	shell_print(ctx_shell, "%s address: %s (%s)", desc, addr_str,
   1e0b2:	e9cd 6400 	strd	r6, r4, [sp]
   1e0b6:	4807      	ldr	r0, [pc, #28]	; (1e0d4 <print_le_addr+0x50>)
   1e0b8:	4a07      	ldr	r2, [pc, #28]	; (1e0d8 <print_le_addr+0x54>)
   1e0ba:	6800      	ldr	r0, [r0, #0]
   1e0bc:	462b      	mov	r3, r5
   1e0be:	2108      	movs	r1, #8
   1e0c0:	f00b fd5c 	bl	29b7c <shell_fprintf>
		    addr_desc);
}
   1e0c4:	b00a      	add	sp, #40	; 0x28
   1e0c6:	bd70      	pop	{r4, r5, r6, pc}
	const char *addr_desc = bt_addr_le_is_identity(addr) ? "identity" :
   1e0c8:	4c04      	ldr	r4, [pc, #16]	; (1e0dc <print_le_addr+0x58>)
   1e0ca:	e7ed      	b.n	1e0a8 <print_le_addr+0x24>
   1e0cc:	0003216e 	.word	0x0003216e
   1e0d0:	00032172 	.word	0x00032172
   1e0d4:	200027cc 	.word	0x200027cc
   1e0d8:	00032186 	.word	0x00032186
   1e0dc:	0003217d 	.word	0x0003217d

0001e0e0 <le_param_updated>:
{
   1e0e0:	b507      	push	{r0, r1, r2, lr}
	shell_print(ctx_shell, "LE conn param updated: int 0x%04x lat %d "
   1e0e2:	e9cd 2300 	strd	r2, r3, [sp]
   1e0e6:	4805      	ldr	r0, [pc, #20]	; (1e0fc <le_param_updated+0x1c>)
   1e0e8:	4a05      	ldr	r2, [pc, #20]	; (1e100 <le_param_updated+0x20>)
   1e0ea:	6800      	ldr	r0, [r0, #0]
   1e0ec:	460b      	mov	r3, r1
   1e0ee:	2108      	movs	r1, #8
   1e0f0:	f00b fd44 	bl	29b7c <shell_fprintf>
}
   1e0f4:	b003      	add	sp, #12
   1e0f6:	f85d fb04 	ldr.w	pc, [sp], #4
   1e0fa:	bf00      	nop
   1e0fc:	200027cc 	.word	0x200027cc
   1e100:	0003219b 	.word	0x0003219b

0001e104 <le_param_req>:
{
   1e104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	shell_print(ctx_shell, "LE conn  param req: int (0x%04x, 0x%04x) lat %d"
   1e106:	88cb      	ldrh	r3, [r1, #6]
   1e108:	9302      	str	r3, [sp, #8]
   1e10a:	888b      	ldrh	r3, [r1, #4]
   1e10c:	9301      	str	r3, [sp, #4]
   1e10e:	884b      	ldrh	r3, [r1, #2]
   1e110:	4805      	ldr	r0, [pc, #20]	; (1e128 <le_param_req+0x24>)
   1e112:	9300      	str	r3, [sp, #0]
   1e114:	880b      	ldrh	r3, [r1, #0]
   1e116:	4a05      	ldr	r2, [pc, #20]	; (1e12c <le_param_req+0x28>)
   1e118:	6800      	ldr	r0, [r0, #0]
   1e11a:	2108      	movs	r1, #8
   1e11c:	f00b fd2e 	bl	29b7c <shell_fprintf>
}
   1e120:	2001      	movs	r0, #1
   1e122:	b005      	add	sp, #20
   1e124:	f85d fb04 	ldr.w	pc, [sp], #4
   1e128:	200027cc 	.word	0x200027cc
   1e12c:	000321cb 	.word	0x000321cb

0001e130 <scan_timeout>:
	shell_print(ctx_shell, "Scan timeout");
   1e130:	4b02      	ldr	r3, [pc, #8]	; (1e13c <scan_timeout+0xc>)
   1e132:	4a03      	ldr	r2, [pc, #12]	; (1e140 <scan_timeout+0x10>)
   1e134:	6818      	ldr	r0, [r3, #0]
   1e136:	2108      	movs	r1, #8
   1e138:	f00b bd20 	b.w	29b7c <shell_fprintf>
   1e13c:	200027cc 	.word	0x200027cc
   1e140:	00032202 	.word	0x00032202

0001e144 <cmd_conn_update>:

	return err;
}

static int cmd_conn_update(const struct shell *sh, size_t argc, char *argv[])
{
   1e144:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_le_conn_param param;
	int err;

	if (default_conn == NULL) {
   1e146:	4e1f      	ldr	r6, [pc, #124]	; (1e1c4 <cmd_conn_update+0x80>)
   1e148:	6833      	ldr	r3, [r6, #0]
{
   1e14a:	4605      	mov	r5, r0
   1e14c:	4614      	mov	r4, r2
	if (default_conn == NULL) {
   1e14e:	b953      	cbnz	r3, 1e166 <cmd_conn_update+0x22>
		shell_error(sh,
   1e150:	6883      	ldr	r3, [r0, #8]
   1e152:	4a1d      	ldr	r2, [pc, #116]	; (1e1c8 <cmd_conn_update+0x84>)
   1e154:	689b      	ldr	r3, [r3, #8]
   1e156:	2101      	movs	r1, #1
   1e158:	f00b fd10 	bl	29b7c <shell_fprintf>
				"%s: at least, one connection is required",
				sh->ctx->active_cmd.syntax);
		return -ENOEXEC;
   1e15c:	f06f 0407 	mvn.w	r4, #7
	} else {
		shell_print(sh, "conn update initiated.");
	}

	return err;
}
   1e160:	4620      	mov	r0, r4
   1e162:	b002      	add	sp, #8
   1e164:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = strtoul(argv[1], NULL, 16);
   1e166:	6860      	ldr	r0, [r4, #4]
   1e168:	2210      	movs	r2, #16
   1e16a:	2100      	movs	r1, #0
   1e16c:	f00a fa26 	bl	285bc <strtoul>
	param.interval_max = strtoul(argv[2], NULL, 16);
   1e170:	2210      	movs	r2, #16
	param.interval_min = strtoul(argv[1], NULL, 16);
   1e172:	f8ad 0000 	strh.w	r0, [sp]
	param.interval_max = strtoul(argv[2], NULL, 16);
   1e176:	2100      	movs	r1, #0
   1e178:	68a0      	ldr	r0, [r4, #8]
   1e17a:	f00a fa1f 	bl	285bc <strtoul>
	param.latency = strtoul(argv[3], NULL, 16);
   1e17e:	2210      	movs	r2, #16
	param.interval_max = strtoul(argv[2], NULL, 16);
   1e180:	f8ad 0002 	strh.w	r0, [sp, #2]
	param.latency = strtoul(argv[3], NULL, 16);
   1e184:	2100      	movs	r1, #0
   1e186:	68e0      	ldr	r0, [r4, #12]
   1e188:	f00a fa18 	bl	285bc <strtoul>
	param.timeout = strtoul(argv[4], NULL, 16);
   1e18c:	2210      	movs	r2, #16
	param.latency = strtoul(argv[3], NULL, 16);
   1e18e:	f8ad 0004 	strh.w	r0, [sp, #4]
	param.timeout = strtoul(argv[4], NULL, 16);
   1e192:	2100      	movs	r1, #0
   1e194:	6920      	ldr	r0, [r4, #16]
   1e196:	f00a fa11 	bl	285bc <strtoul>
	err = bt_conn_le_param_update(default_conn, &param);
   1e19a:	4669      	mov	r1, sp
	param.timeout = strtoul(argv[4], NULL, 16);
   1e19c:	f8ad 0006 	strh.w	r0, [sp, #6]
	err = bt_conn_le_param_update(default_conn, &param);
   1e1a0:	6830      	ldr	r0, [r6, #0]
   1e1a2:	f00c fdec 	bl	2ad7e <bt_conn_le_param_update>
	if (err) {
   1e1a6:	4604      	mov	r4, r0
   1e1a8:	b130      	cbz	r0, 1e1b8 <cmd_conn_update+0x74>
		shell_error(sh, "conn update failed (err %d).", err);
   1e1aa:	4603      	mov	r3, r0
   1e1ac:	4a07      	ldr	r2, [pc, #28]	; (1e1cc <cmd_conn_update+0x88>)
   1e1ae:	2101      	movs	r1, #1
   1e1b0:	4628      	mov	r0, r5
   1e1b2:	f00b fce3 	bl	29b7c <shell_fprintf>
   1e1b6:	e7d3      	b.n	1e160 <cmd_conn_update+0x1c>
		shell_print(sh, "conn update initiated.");
   1e1b8:	4a05      	ldr	r2, [pc, #20]	; (1e1d0 <cmd_conn_update+0x8c>)
   1e1ba:	2108      	movs	r1, #8
   1e1bc:	4628      	mov	r0, r5
   1e1be:	f00b fcdd 	bl	29b7c <shell_fprintf>
   1e1c2:	e7cd      	b.n	1e160 <cmd_conn_update+0x1c>
   1e1c4:	200027d0 	.word	0x200027d0
   1e1c8:	00032210 	.word	0x00032210
   1e1cc:	0003223a 	.word	0x0003223a
   1e1d0:	00032258 	.word	0x00032258

0001e1d4 <cmd_info>:
{
   1e1d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	switch (argc) {
   1e1d6:	2902      	cmp	r1, #2
{
   1e1d8:	b08d      	sub	sp, #52	; 0x34
   1e1da:	4606      	mov	r6, r0
   1e1dc:	4613      	mov	r3, r2
	switch (argc) {
   1e1de:	d012      	beq.n	1e206 <cmd_info+0x32>
   1e1e0:	2903      	cmp	r1, #3
   1e1e2:	d023      	beq.n	1e22c <cmd_info+0x58>
   1e1e4:	2901      	cmp	r1, #1
   1e1e6:	d106      	bne.n	1e1f6 <cmd_info+0x22>
		if (default_conn) {
   1e1e8:	4b47      	ldr	r3, [pc, #284]	; (1e308 <cmd_info+0x134>)
   1e1ea:	6818      	ldr	r0, [r3, #0]
   1e1ec:	b118      	cbz	r0, 1e1f6 <cmd_info+0x22>
			conn = bt_conn_ref(default_conn);
   1e1ee:	f00c fcfd 	bl	2abec <bt_conn_ref>
		conn = bt_conn_lookup_addr_le(selected_id, &addr);
   1e1f2:	4605      	mov	r5, r0
	if (!conn) {
   1e1f4:	bb30      	cbnz	r0, 1e244 <cmd_info+0x70>
		shell_error(sh, "Not connected");
   1e1f6:	4a45      	ldr	r2, [pc, #276]	; (1e30c <cmd_info+0x138>)
   1e1f8:	2101      	movs	r1, #1
   1e1fa:	4630      	mov	r0, r6
   1e1fc:	f00b fcbe 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1e200:	f06f 0407 	mvn.w	r4, #7
   1e204:	e00f      	b.n	1e226 <cmd_info+0x52>
		addr.type = BT_ADDR_LE_PUBLIC;
   1e206:	2200      	movs	r2, #0
		err = bt_addr_from_str(argv[1], &addr.a);
   1e208:	6858      	ldr	r0, [r3, #4]
		addr.type = BT_ADDR_LE_PUBLIC;
   1e20a:	f88d 200c 	strb.w	r2, [sp, #12]
		err = bt_addr_from_str(argv[1], &addr.a);
   1e20e:	f10d 010d 	add.w	r1, sp, #13
   1e212:	f00c fb4a 	bl	2a8aa <bt_addr_from_str>
		if (err) {
   1e216:	4604      	mov	r4, r0
   1e218:	b170      	cbz	r0, 1e238 <cmd_info+0x64>
			shell_error(sh, "Invalid peer address (err %d)",
   1e21a:	4603      	mov	r3, r0
   1e21c:	4a3c      	ldr	r2, [pc, #240]	; (1e310 <cmd_info+0x13c>)
   1e21e:	2101      	movs	r1, #1
   1e220:	4630      	mov	r0, r6
   1e222:	f00b fcab 	bl	29b7c <shell_fprintf>
}
   1e226:	4620      	mov	r0, r4
   1e228:	b00d      	add	sp, #52	; 0x34
   1e22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1e22c:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   1e230:	aa03      	add	r2, sp, #12
   1e232:	f7f8 ff01 	bl	17038 <bt_addr_le_from_str>
   1e236:	e7ee      	b.n	1e216 <cmd_info+0x42>
		conn = bt_conn_lookup_addr_le(selected_id, &addr);
   1e238:	4b36      	ldr	r3, [pc, #216]	; (1e314 <cmd_info+0x140>)
   1e23a:	a903      	add	r1, sp, #12
   1e23c:	7818      	ldrb	r0, [r3, #0]
   1e23e:	f7fb ff4b 	bl	1a0d8 <bt_conn_lookup_addr_le>
   1e242:	e7d6      	b.n	1e1f2 <cmd_info+0x1e>
	err = bt_conn_get_info(conn, &info);
   1e244:	a905      	add	r1, sp, #20
   1e246:	f7fb ffb1 	bl	1a1ac <bt_conn_get_info>
	if (err) {
   1e24a:	4e33      	ldr	r6, [pc, #204]	; (1e318 <cmd_info+0x144>)
   1e24c:	4604      	mov	r4, r0
   1e24e:	b140      	cbz	r0, 1e262 <cmd_info+0x8e>
		shell_print(ctx_shell, "Failed to get info");
   1e250:	4a32      	ldr	r2, [pc, #200]	; (1e31c <cmd_info+0x148>)
   1e252:	6830      	ldr	r0, [r6, #0]
   1e254:	2108      	movs	r1, #8
   1e256:	f00b fc91 	bl	29b7c <shell_fprintf>
	bt_conn_unref(conn);
   1e25a:	4628      	mov	r0, r5
   1e25c:	f7fb fcaa 	bl	19bb4 <bt_conn_unref>
	return err;
   1e260:	e7e1      	b.n	1e226 <cmd_info+0x52>
	shell_print(ctx_shell, "Type: %s, Role: %s, Id: %u",
   1e262:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e266:	f89d 1015 	ldrb.w	r1, [sp, #21]
   1e26a:	6830      	ldr	r0, [r6, #0]
	switch (type) {
   1e26c:	3b01      	subs	r3, #1
   1e26e:	b2db      	uxtb	r3, r3
   1e270:	2b03      	cmp	r3, #3
   1e272:	bf96      	itet	ls
   1e274:	4a2a      	ldrls	r2, [pc, #168]	; (1e320 <cmd_info+0x14c>)
	shell_print(ctx_shell, "Type: %s, Role: %s, Id: %u",
   1e276:	4b2b      	ldrhi	r3, [pc, #172]	; (1e324 <cmd_info+0x150>)
	switch (role) {
   1e278:	f852 3023 	ldrls.w	r3, [r2, r3, lsl #2]
   1e27c:	2900      	cmp	r1, #0
   1e27e:	d041      	beq.n	1e304 <cmd_info+0x130>
   1e280:	4a28      	ldr	r2, [pc, #160]	; (1e324 <cmd_info+0x150>)
   1e282:	4f29      	ldr	r7, [pc, #164]	; (1e328 <cmd_info+0x154>)
   1e284:	2901      	cmp	r1, #1
   1e286:	bf08      	it	eq
   1e288:	463a      	moveq	r2, r7
	shell_print(ctx_shell, "Type: %s, Role: %s, Id: %u",
   1e28a:	f89d 1016 	ldrb.w	r1, [sp, #22]
   1e28e:	e9cd 2100 	strd	r2, r1, [sp]
   1e292:	4a26      	ldr	r2, [pc, #152]	; (1e32c <cmd_info+0x158>)
   1e294:	2108      	movs	r1, #8
   1e296:	f00b fc71 	bl	29b7c <shell_fprintf>
	if (info.type == BT_CONN_TYPE_LE) {
   1e29a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e29e:	2b01      	cmp	r3, #1
   1e2a0:	d1db      	bne.n	1e25a <cmd_info+0x86>
		print_le_addr("Remote", info.le.dst);
   1e2a2:	9907      	ldr	r1, [sp, #28]
   1e2a4:	4822      	ldr	r0, [pc, #136]	; (1e330 <cmd_info+0x15c>)
   1e2a6:	f7ff feed 	bl	1e084 <print_le_addr>
		print_le_addr("Local", info.le.src);
   1e2aa:	9906      	ldr	r1, [sp, #24]
   1e2ac:	4821      	ldr	r0, [pc, #132]	; (1e334 <cmd_info+0x160>)
   1e2ae:	f7ff fee9 	bl	1e084 <print_le_addr>
		print_le_addr("Remote on-air", info.le.remote);
   1e2b2:	9909      	ldr	r1, [sp, #36]	; 0x24
   1e2b4:	4820      	ldr	r0, [pc, #128]	; (1e338 <cmd_info+0x164>)
   1e2b6:	f7ff fee5 	bl	1e084 <print_le_addr>
		print_le_addr("Local on-air", info.le.local);
   1e2ba:	9908      	ldr	r1, [sp, #32]
   1e2bc:	481f      	ldr	r0, [pc, #124]	; (1e33c <cmd_info+0x168>)
   1e2be:	f7ff fee1 	bl	1e084 <print_le_addr>
		shell_print(ctx_shell, "Interval: 0x%04x (%u ms)",
   1e2c2:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1e2c6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e2ca:	1092      	asrs	r2, r2, #2
   1e2cc:	9200      	str	r2, [sp, #0]
   1e2ce:	6830      	ldr	r0, [r6, #0]
   1e2d0:	4a1b      	ldr	r2, [pc, #108]	; (1e340 <cmd_info+0x16c>)
   1e2d2:	2108      	movs	r1, #8
   1e2d4:	f00b fc52 	bl	29b7c <shell_fprintf>
		shell_print(ctx_shell, "Latency: 0x%04x (%u ms)",
   1e2d8:	f8bd 302a 	ldrh.w	r3, [sp, #42]	; 0x2a
   1e2dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1e2e0:	1092      	asrs	r2, r2, #2
   1e2e2:	9200      	str	r2, [sp, #0]
   1e2e4:	6830      	ldr	r0, [r6, #0]
   1e2e6:	4a17      	ldr	r2, [pc, #92]	; (1e344 <cmd_info+0x170>)
   1e2e8:	2108      	movs	r1, #8
   1e2ea:	f00b fc47 	bl	29b7c <shell_fprintf>
		shell_print(ctx_shell, "Supervision timeout: 0x%04x (%d ms)",
   1e2ee:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
   1e2f2:	220a      	movs	r2, #10
   1e2f4:	435a      	muls	r2, r3
   1e2f6:	9200      	str	r2, [sp, #0]
   1e2f8:	6830      	ldr	r0, [r6, #0]
   1e2fa:	4a13      	ldr	r2, [pc, #76]	; (1e348 <cmd_info+0x174>)
   1e2fc:	2108      	movs	r1, #8
   1e2fe:	f00b fc3d 	bl	29b7c <shell_fprintf>
   1e302:	e7aa      	b.n	1e25a <cmd_info+0x86>
	case BT_CONN_ROLE_CENTRAL: return "central";
   1e304:	4a11      	ldr	r2, [pc, #68]	; (1e34c <cmd_info+0x178>)
   1e306:	e7c0      	b.n	1e28a <cmd_info+0xb6>
   1e308:	200027d0 	.word	0x200027d0
   1e30c:	000322aa 	.word	0x000322aa
   1e310:	0003228b 	.word	0x0003228b
   1e314:	20002b80 	.word	0x20002b80
   1e318:	200027cc 	.word	0x200027cc
   1e31c:	000322b9 	.word	0x000322b9
   1e320:	0002dfec 	.word	0x0002dfec
   1e324:	00032270 	.word	0x00032270
   1e328:	00032280 	.word	0x00032280
   1e32c:	000322cd 	.word	0x000322cd
   1e330:	000322e9 	.word	0x000322e9
   1e334:	000322f0 	.word	0x000322f0
   1e338:	000322f6 	.word	0x000322f6
   1e33c:	00032304 	.word	0x00032304
   1e340:	00032311 	.word	0x00032311
   1e344:	0003232b 	.word	0x0003232b
   1e348:	00032344 	.word	0x00032344
   1e34c:	00032278 	.word	0x00032278

0001e350 <cmd_disconnect>:
{
   1e350:	4613      	mov	r3, r2
	if (default_conn && argc < 3) {
   1e352:	4a1e      	ldr	r2, [pc, #120]	; (1e3cc <cmd_disconnect+0x7c>)
   1e354:	6812      	ldr	r2, [r2, #0]
{
   1e356:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e358:	4606      	mov	r6, r0
	if (default_conn && argc < 3) {
   1e35a:	b172      	cbz	r2, 1e37a <cmd_disconnect+0x2a>
   1e35c:	2902      	cmp	r1, #2
   1e35e:	d814      	bhi.n	1e38a <cmd_disconnect+0x3a>
		conn = bt_conn_ref(default_conn);
   1e360:	4610      	mov	r0, r2
   1e362:	f00c fc43 	bl	2abec <bt_conn_ref>
		conn = bt_conn_lookup_addr_le(selected_id, &addr);
   1e366:	4605      	mov	r5, r0
	if (!conn) {
   1e368:	bb18      	cbnz	r0, 1e3b2 <cmd_disconnect+0x62>
		shell_error(sh, "Not connected");
   1e36a:	4a19      	ldr	r2, [pc, #100]	; (1e3d0 <cmd_disconnect+0x80>)
   1e36c:	2101      	movs	r1, #1
   1e36e:	4630      	mov	r0, r6
   1e370:	f00b fc04 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1e374:	f06f 0407 	mvn.w	r4, #7
   1e378:	e004      	b.n	1e384 <cmd_disconnect+0x34>
		if (argc < 3) {
   1e37a:	2902      	cmp	r1, #2
   1e37c:	d805      	bhi.n	1e38a <cmd_disconnect+0x3a>
			shell_help(sh);
   1e37e:	f00b fc22 	bl	29bc6 <shell_help>
			return SHELL_CMD_HELP_PRINTED;
   1e382:	2401      	movs	r4, #1
}
   1e384:	4620      	mov	r0, r4
   1e386:	b002      	add	sp, #8
   1e388:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1e38a:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   1e38e:	466a      	mov	r2, sp
   1e390:	f7f8 fe52 	bl	17038 <bt_addr_le_from_str>
		if (err) {
   1e394:	4604      	mov	r4, r0
   1e396:	b130      	cbz	r0, 1e3a6 <cmd_disconnect+0x56>
			shell_error(sh, "Invalid peer address (err %d)",
   1e398:	4a0e      	ldr	r2, [pc, #56]	; (1e3d4 <cmd_disconnect+0x84>)
   1e39a:	4603      	mov	r3, r0
		shell_error(sh, "Disconnection failed (err %d)", err);
   1e39c:	2101      	movs	r1, #1
   1e39e:	4630      	mov	r0, r6
   1e3a0:	f00b fbec 	bl	29b7c <shell_fprintf>
		return err;
   1e3a4:	e7ee      	b.n	1e384 <cmd_disconnect+0x34>
		conn = bt_conn_lookup_addr_le(selected_id, &addr);
   1e3a6:	4b0c      	ldr	r3, [pc, #48]	; (1e3d8 <cmd_disconnect+0x88>)
   1e3a8:	4669      	mov	r1, sp
   1e3aa:	7818      	ldrb	r0, [r3, #0]
   1e3ac:	f7fb fe94 	bl	1a0d8 <bt_conn_lookup_addr_le>
   1e3b0:	e7d9      	b.n	1e366 <cmd_disconnect+0x16>
	err = bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   1e3b2:	2113      	movs	r1, #19
   1e3b4:	f00c fc82 	bl	2acbc <bt_conn_disconnect>
	if (err) {
   1e3b8:	4604      	mov	r4, r0
   1e3ba:	b110      	cbz	r0, 1e3c2 <cmd_disconnect+0x72>
		shell_error(sh, "Disconnection failed (err %d)", err);
   1e3bc:	4a07      	ldr	r2, [pc, #28]	; (1e3dc <cmd_disconnect+0x8c>)
   1e3be:	4603      	mov	r3, r0
   1e3c0:	e7ec      	b.n	1e39c <cmd_disconnect+0x4c>
	bt_conn_unref(conn);
   1e3c2:	4628      	mov	r0, r5
   1e3c4:	f7fb fbf6 	bl	19bb4 <bt_conn_unref>
	return 0;
   1e3c8:	e7dc      	b.n	1e384 <cmd_disconnect+0x34>
   1e3ca:	bf00      	nop
   1e3cc:	200027d0 	.word	0x200027d0
   1e3d0:	000322aa 	.word	0x000322aa
   1e3d4:	0003228b 	.word	0x0003228b
   1e3d8:	20002b80 	.word	0x20002b80
   1e3dc:	00032369 	.word	0x00032369

0001e3e0 <cmd_auto_conn>:
{
   1e3e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e3e2:	4615      	mov	r5, r2
   1e3e4:	b085      	sub	sp, #20
   1e3e6:	4606      	mov	r6, r0
   1e3e8:	460f      	mov	r7, r1
	err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1e3ea:	466a      	mov	r2, sp
   1e3ec:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   1e3f0:	f7f8 fe22 	bl	17038 <bt_addr_le_from_str>
	if (err) {
   1e3f4:	4604      	mov	r4, r0
   1e3f6:	b140      	cbz	r0, 1e40a <cmd_auto_conn+0x2a>
		shell_error(sh, "Invalid peer address (err %d)", err);
   1e3f8:	4603      	mov	r3, r0
   1e3fa:	4a13      	ldr	r2, [pc, #76]	; (1e448 <cmd_auto_conn+0x68>)
   1e3fc:	2101      	movs	r1, #1
   1e3fe:	4630      	mov	r0, r6
   1e400:	f00b fbbc 	bl	29b7c <shell_fprintf>
}
   1e404:	4620      	mov	r0, r4
   1e406:	b005      	add	sp, #20
   1e408:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (argc < 4) {
   1e40a:	2f03      	cmp	r7, #3
   1e40c:	d80a      	bhi.n	1e424 <cmd_auto_conn+0x44>
		return bt_le_set_auto_conn(&addr, BT_LE_CONN_PARAM_DEFAULT);
   1e40e:	4a0f      	ldr	r2, [pc, #60]	; (1e44c <cmd_auto_conn+0x6c>)
   1e410:	6851      	ldr	r1, [r2, #4]
   1e412:	6810      	ldr	r0, [r2, #0]
   1e414:	ab02      	add	r3, sp, #8
   1e416:	c303      	stmia	r3!, {r0, r1}
   1e418:	a902      	add	r1, sp, #8
		return bt_le_set_auto_conn(&addr, NULL);
   1e41a:	4668      	mov	r0, sp
   1e41c:	f7fb ff80 	bl	1a320 <bt_le_set_auto_conn>
   1e420:	4604      	mov	r4, r0
   1e422:	e7ef      	b.n	1e404 <cmd_auto_conn+0x24>
	} else if (!strcmp(argv[3], "on")) {
   1e424:	490a      	ldr	r1, [pc, #40]	; (1e450 <cmd_auto_conn+0x70>)
   1e426:	68e8      	ldr	r0, [r5, #12]
   1e428:	f7ed ffba 	bl	c3a0 <strcmp>
   1e42c:	2800      	cmp	r0, #0
   1e42e:	d0ee      	beq.n	1e40e <cmd_auto_conn+0x2e>
	} else if (!strcmp(argv[3], "off")) {
   1e430:	4908      	ldr	r1, [pc, #32]	; (1e454 <cmd_auto_conn+0x74>)
   1e432:	68e8      	ldr	r0, [r5, #12]
   1e434:	f7ed ffb4 	bl	c3a0 <strcmp>
   1e438:	b908      	cbnz	r0, 1e43e <cmd_auto_conn+0x5e>
		return bt_le_set_auto_conn(&addr, NULL);
   1e43a:	4621      	mov	r1, r4
   1e43c:	e7ed      	b.n	1e41a <cmd_auto_conn+0x3a>
		shell_help(sh);
   1e43e:	4630      	mov	r0, r6
   1e440:	f00b fbc1 	bl	29bc6 <shell_help>
		return SHELL_CMD_HELP_PRINTED;
   1e444:	2401      	movs	r4, #1
   1e446:	e7dd      	b.n	1e404 <cmd_auto_conn+0x24>
   1e448:	0003228b 	.word	0x0003228b
   1e44c:	0002d404 	.word	0x0002d404
   1e450:	0003418a 	.word	0x0003418a
   1e454:	0002fe8e 	.word	0x0002fe8e

0001e458 <cmd_connect_le>:
{
   1e458:	b530      	push	{r4, r5, lr}
   1e45a:	4613      	mov	r3, r2
   1e45c:	b08b      	sub	sp, #44	; 0x2c
   1e45e:	4605      	mov	r5, r0
	err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1e460:	aa02      	add	r2, sp, #8
   1e462:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   1e466:	f7f8 fde7 	bl	17038 <bt_addr_le_from_str>
	if (err) {
   1e46a:	4604      	mov	r4, r0
   1e46c:	b140      	cbz	r0, 1e480 <cmd_connect_le+0x28>
		shell_error(sh, "Invalid peer address (err %d)", err);
   1e46e:	4603      	mov	r3, r0
   1e470:	4a16      	ldr	r2, [pc, #88]	; (1e4cc <cmd_connect_le+0x74>)
   1e472:	2101      	movs	r1, #1
   1e474:	4628      	mov	r0, r5
   1e476:	f00b fb81 	bl	29b7c <shell_fprintf>
}
   1e47a:	4620      	mov	r0, r4
   1e47c:	b00b      	add	sp, #44	; 0x2c
   1e47e:	bd30      	pop	{r4, r5, pc}
	err = bt_conn_le_create(&addr, create_params, BT_LE_CONN_PARAM_DEFAULT,
   1e480:	4a13      	ldr	r2, [pc, #76]	; (1e4d0 <cmd_connect_le+0x78>)
		BT_CONN_LE_CREATE_PARAM(options,
   1e482:	9006      	str	r0, [sp, #24]
   1e484:	f04f 1360 	mov.w	r3, #6291552	; 0x600060
	err = bt_conn_le_create(&addr, create_params, BT_LE_CONN_PARAM_DEFAULT,
   1e488:	6851      	ldr	r1, [r2, #4]
		BT_CONN_LE_CREATE_PARAM(options,
   1e48a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
   1e48e:	e9cd 3007 	strd	r3, r0, [sp, #28]
	err = bt_conn_le_create(&addr, create_params, BT_LE_CONN_PARAM_DEFAULT,
   1e492:	6810      	ldr	r0, [r2, #0]
   1e494:	ab04      	add	r3, sp, #16
   1e496:	c303      	stmia	r3!, {r0, r1}
   1e498:	aa04      	add	r2, sp, #16
   1e49a:	ab01      	add	r3, sp, #4
   1e49c:	a906      	add	r1, sp, #24
   1e49e:	a802      	add	r0, sp, #8
   1e4a0:	f7fb feb0 	bl	1a204 <bt_conn_le_create>
	if (err) {
   1e4a4:	4604      	mov	r4, r0
   1e4a6:	b140      	cbz	r0, 1e4ba <cmd_connect_le+0x62>
		shell_error(sh, "Connection failed (%d)", err);
   1e4a8:	4603      	mov	r3, r0
   1e4aa:	4a0a      	ldr	r2, [pc, #40]	; (1e4d4 <cmd_connect_le+0x7c>)
   1e4ac:	2101      	movs	r1, #1
   1e4ae:	4628      	mov	r0, r5
   1e4b0:	f00b fb64 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1e4b4:	f06f 0407 	mvn.w	r4, #7
   1e4b8:	e7df      	b.n	1e47a <cmd_connect_le+0x22>
		shell_print(sh, "Connection pending");
   1e4ba:	4628      	mov	r0, r5
   1e4bc:	4a06      	ldr	r2, [pc, #24]	; (1e4d8 <cmd_connect_le+0x80>)
   1e4be:	2108      	movs	r1, #8
   1e4c0:	f00b fb5c 	bl	29b7c <shell_fprintf>
		bt_conn_unref(conn);
   1e4c4:	9801      	ldr	r0, [sp, #4]
   1e4c6:	f7fb fb75 	bl	19bb4 <bt_conn_unref>
	return 0;
   1e4ca:	e7d6      	b.n	1e47a <cmd_connect_le+0x22>
   1e4cc:	0003228b 	.word	0x0003228b
   1e4d0:	0002d404 	.word	0x0002d404
   1e4d4:	00032388 	.word	0x00032388
   1e4d8:	000323a0 	.word	0x000323a0

0001e4dc <cmd_scan>:
{
   1e4dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t timeout = 0;
   1e4e0:	2700      	movs	r7, #0
		} else if (!strcmp(arg, "fal")) {
   1e4e2:	f8df b188 	ldr.w	fp, [pc, #392]	; 1e66c <cmd_scan+0x190>
{
   1e4e6:	b089      	sub	sp, #36	; 0x24
   1e4e8:	4605      	mov	r5, r0
   1e4ea:	4689      	mov	r9, r1
   1e4ec:	4690      	mov	r8, r2
	for (size_t argn = 2; argn < argc; argn++) {
   1e4ee:	2602      	movs	r6, #2
	uint32_t options = 0;
   1e4f0:	463c      	mov	r4, r7
	for (size_t argn = 2; argn < argc; argn++) {
   1e4f2:	454e      	cmp	r6, r9
   1e4f4:	d324      	bcc.n	1e540 <cmd_scan+0x64>
	action = argv[1];
   1e4f6:	f8d8 8004 	ldr.w	r8, [r8, #4]
	if (!strcmp(action, "on")) {
   1e4fa:	494d      	ldr	r1, [pc, #308]	; (1e630 <cmd_scan+0x154>)
   1e4fc:	4640      	mov	r0, r8
   1e4fe:	f7ed ff4f 	bl	c3a0 <strcmp>
   1e502:	4606      	mov	r6, r0
   1e504:	2800      	cmp	r0, #0
   1e506:	d167      	bne.n	1e5d8 <cmd_scan+0xfc>
	struct bt_le_scan_param param = {
   1e508:	4601      	mov	r1, r0
   1e50a:	2214      	movs	r2, #20
   1e50c:	a803      	add	r0, sp, #12
   1e50e:	f00e fb9a 	bl	2cc46 <memset>
   1e512:	f04f 0801 	mov.w	r8, #1
   1e516:	4b47      	ldr	r3, [pc, #284]	; (1e634 <cmd_scan+0x158>)
	param.options |= options;
   1e518:	9404      	str	r4, [sp, #16]
	err = bt_le_scan_start(&param, NULL);
   1e51a:	4631      	mov	r1, r6
   1e51c:	a803      	add	r0, sp, #12
	struct bt_le_scan_param param = {
   1e51e:	f88d 800c 	strb.w	r8, [sp, #12]
   1e522:	9305      	str	r3, [sp, #20]
   1e524:	f8ad 7018 	strh.w	r7, [sp, #24]
	err = bt_le_scan_start(&param, NULL);
   1e528:	f7fa ffd0 	bl	194cc <bt_le_scan_start>
	if (err) {
   1e52c:	4604      	mov	r4, r0
   1e52e:	2800      	cmp	r0, #0
   1e530:	d04c      	beq.n	1e5cc <cmd_scan+0xf0>
		shell_error(sh, "Bluetooth set active scan failed "
   1e532:	4a41      	ldr	r2, [pc, #260]	; (1e638 <cmd_scan+0x15c>)
   1e534:	4603      	mov	r3, r0
		shell_error(sh, "Bluetooth set passive scan failed "
   1e536:	2101      	movs	r1, #1
   1e538:	4628      	mov	r0, r5
   1e53a:	f00b fb1f 	bl	29b7c <shell_fprintf>
		return err;
   1e53e:	e039      	b.n	1e5b4 <cmd_scan+0xd8>
		const char *arg = argv[argn];
   1e540:	f858 a026 	ldr.w	sl, [r8, r6, lsl #2]
		if (!strcmp(arg, "dups")) {
   1e544:	493d      	ldr	r1, [pc, #244]	; (1e63c <cmd_scan+0x160>)
		const char *arg = argv[argn];
   1e546:	00b3      	lsls	r3, r6, #2
		if (!strcmp(arg, "dups")) {
   1e548:	4650      	mov	r0, sl
		const char *arg = argv[argn];
   1e54a:	9301      	str	r3, [sp, #4]
		if (!strcmp(arg, "dups")) {
   1e54c:	f7ed ff28 	bl	c3a0 <strcmp>
   1e550:	b918      	cbnz	r0, 1e55a <cmd_scan+0x7e>
			options |= BT_LE_SCAN_OPT_FILTER_DUPLICATE;
   1e552:	f044 0401 	orr.w	r4, r4, #1
	for (size_t argn = 2; argn < argc; argn++) {
   1e556:	3601      	adds	r6, #1
   1e558:	e7cb      	b.n	1e4f2 <cmd_scan+0x16>
		} else if (!strcmp(arg, "nodups")) {
   1e55a:	4939      	ldr	r1, [pc, #228]	; (1e640 <cmd_scan+0x164>)
   1e55c:	4650      	mov	r0, sl
   1e55e:	f7ed ff1f 	bl	c3a0 <strcmp>
   1e562:	b910      	cbnz	r0, 1e56a <cmd_scan+0x8e>
			options &= ~BT_LE_SCAN_OPT_FILTER_DUPLICATE;
   1e564:	f024 0401 	bic.w	r4, r4, #1
   1e568:	e7f5      	b.n	1e556 <cmd_scan+0x7a>
		} else if (!strcmp(arg, "fal")) {
   1e56a:	4659      	mov	r1, fp
   1e56c:	4650      	mov	r0, sl
   1e56e:	f7ed ff17 	bl	c3a0 <strcmp>
   1e572:	b910      	cbnz	r0, 1e57a <cmd_scan+0x9e>
			options |= BT_LE_SCAN_OPT_FILTER_ACCEPT_LIST;
   1e574:	f044 0402 	orr.w	r4, r4, #2
   1e578:	e7ed      	b.n	1e556 <cmd_scan+0x7a>
		} else if (!strcmp(arg, "coded")) {
   1e57a:	4932      	ldr	r1, [pc, #200]	; (1e644 <cmd_scan+0x168>)
   1e57c:	4650      	mov	r0, sl
   1e57e:	f7ed ff0f 	bl	c3a0 <strcmp>
   1e582:	b910      	cbnz	r0, 1e58a <cmd_scan+0xae>
			options |= BT_LE_SCAN_OPT_CODED;
   1e584:	f044 0404 	orr.w	r4, r4, #4
   1e588:	e7e5      	b.n	1e556 <cmd_scan+0x7a>
		} else if (!strcmp(arg, "no-1m")) {
   1e58a:	492f      	ldr	r1, [pc, #188]	; (1e648 <cmd_scan+0x16c>)
   1e58c:	4650      	mov	r0, sl
   1e58e:	f7ed ff07 	bl	c3a0 <strcmp>
   1e592:	b910      	cbnz	r0, 1e59a <cmd_scan+0xbe>
			options |= BT_LE_SCAN_OPT_NO_1M;
   1e594:	f044 0408 	orr.w	r4, r4, #8
   1e598:	e7dd      	b.n	1e556 <cmd_scan+0x7a>
		} else if (!strcmp(arg, "timeout")) {
   1e59a:	492c      	ldr	r1, [pc, #176]	; (1e64c <cmd_scan+0x170>)
   1e59c:	4650      	mov	r0, sl
   1e59e:	f7ed feff 	bl	c3a0 <strcmp>
   1e5a2:	4601      	mov	r1, r0
   1e5a4:	b910      	cbnz	r0, 1e5ac <cmd_scan+0xd0>
			if (++argn == argc) {
   1e5a6:	3601      	adds	r6, #1
   1e5a8:	45b1      	cmp	r9, r6
   1e5aa:	d107      	bne.n	1e5bc <cmd_scan+0xe0>
				shell_help(sh);
   1e5ac:	4628      	mov	r0, r5
   1e5ae:	f00b fb0a 	bl	29bc6 <shell_help>
				return SHELL_CMD_HELP_PRINTED;
   1e5b2:	2401      	movs	r4, #1
}
   1e5b4:	4620      	mov	r0, r4
   1e5b6:	b009      	add	sp, #36	; 0x24
   1e5b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			timeout = strtoul(argv[argn], NULL, 16);
   1e5bc:	9b01      	ldr	r3, [sp, #4]
   1e5be:	4443      	add	r3, r8
   1e5c0:	2210      	movs	r2, #16
   1e5c2:	6858      	ldr	r0, [r3, #4]
   1e5c4:	f009 fffa 	bl	285bc <strtoul>
   1e5c8:	b287      	uxth	r7, r0
   1e5ca:	e7c4      	b.n	1e556 <cmd_scan+0x7a>
		shell_print(sh, "Bluetooth active scan enabled");
   1e5cc:	4a20      	ldr	r2, [pc, #128]	; (1e650 <cmd_scan+0x174>)
		shell_print(sh, "Bluetooth passive scan enabled");
   1e5ce:	2108      	movs	r1, #8
   1e5d0:	4628      	mov	r0, r5
   1e5d2:	f00b fad3 	bl	29b7c <shell_fprintf>
		return cmd_passive_scan_on(sh, options, timeout);
   1e5d6:	e7ed      	b.n	1e5b4 <cmd_scan+0xd8>
	} else if (!strcmp(action, "off")) {
   1e5d8:	491e      	ldr	r1, [pc, #120]	; (1e654 <cmd_scan+0x178>)
   1e5da:	4640      	mov	r0, r8
   1e5dc:	f7ed fee0 	bl	c3a0 <strcmp>
   1e5e0:	b940      	cbnz	r0, 1e5f4 <cmd_scan+0x118>
	err = bt_le_scan_stop();
   1e5e2:	f7fa fff3 	bl	195cc <bt_le_scan_stop>
	if (err) {
   1e5e6:	4604      	mov	r4, r0
   1e5e8:	b110      	cbz	r0, 1e5f0 <cmd_scan+0x114>
		shell_error(sh, "Stopping scanning failed (err %d)", err);
   1e5ea:	4a1b      	ldr	r2, [pc, #108]	; (1e658 <cmd_scan+0x17c>)
   1e5ec:	4603      	mov	r3, r0
   1e5ee:	e7a2      	b.n	1e536 <cmd_scan+0x5a>
		shell_print(sh, "Scan successfully stopped");
   1e5f0:	4a1a      	ldr	r2, [pc, #104]	; (1e65c <cmd_scan+0x180>)
   1e5f2:	e7ec      	b.n	1e5ce <cmd_scan+0xf2>
	} else if (!strcmp(action, "passive")) {
   1e5f4:	491a      	ldr	r1, [pc, #104]	; (1e660 <cmd_scan+0x184>)
   1e5f6:	4640      	mov	r0, r8
   1e5f8:	f7ed fed2 	bl	c3a0 <strcmp>
   1e5fc:	4606      	mov	r6, r0
   1e5fe:	2800      	cmp	r0, #0
   1e600:	d1d4      	bne.n	1e5ac <cmd_scan+0xd0>
	struct bt_le_scan_param param = {
   1e602:	4601      	mov	r1, r0
   1e604:	2214      	movs	r2, #20
   1e606:	a803      	add	r0, sp, #12
   1e608:	f00e fb1d 	bl	2cc46 <memset>
   1e60c:	f04f 1310 	mov.w	r3, #1048592	; 0x100010
	err = bt_le_scan_start(&param, NULL);
   1e610:	4631      	mov	r1, r6
   1e612:	a803      	add	r0, sp, #12
	param.options |= options;
   1e614:	9404      	str	r4, [sp, #16]
	struct bt_le_scan_param param = {
   1e616:	9305      	str	r3, [sp, #20]
   1e618:	f8ad 7018 	strh.w	r7, [sp, #24]
	err = bt_le_scan_start(&param, NULL);
   1e61c:	f7fa ff56 	bl	194cc <bt_le_scan_start>
	if (err) {
   1e620:	4604      	mov	r4, r0
   1e622:	b110      	cbz	r0, 1e62a <cmd_scan+0x14e>
		shell_error(sh, "Bluetooth set passive scan failed "
   1e624:	4a0f      	ldr	r2, [pc, #60]	; (1e664 <cmd_scan+0x188>)
   1e626:	4603      	mov	r3, r0
   1e628:	e785      	b.n	1e536 <cmd_scan+0x5a>
		shell_print(sh, "Bluetooth passive scan enabled");
   1e62a:	4a0f      	ldr	r2, [pc, #60]	; (1e668 <cmd_scan+0x18c>)
   1e62c:	e7cf      	b.n	1e5ce <cmd_scan+0xf2>
   1e62e:	bf00      	nop
   1e630:	0003418a 	.word	0x0003418a
   1e634:	00300060 	.word	0x00300060
   1e638:	000323cb 	.word	0x000323cb
   1e63c:	000323b6 	.word	0x000323b6
   1e640:	000323b4 	.word	0x000323b4
   1e644:	000323bf 	.word	0x000323bf
   1e648:	000323c5 	.word	0x000323c5
   1e64c:	0003189a 	.word	0x0003189a
   1e650:	000323f6 	.word	0x000323f6
   1e654:	0002fe8e 	.word	0x0002fe8e
   1e658:	00032415 	.word	0x00032415
   1e65c:	00032438 	.word	0x00032438
   1e660:	0002e832 	.word	0x0002e832
   1e664:	00032453 	.word	0x00032453
   1e668:	0003247f 	.word	0x0003247f
   1e66c:	000323bb 	.word	0x000323bb

0001e670 <cmd_id_show>:
{
   1e670:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e674:	b08f      	sub	sp, #60	; 0x3c
	size_t i, count = CONFIG_BT_ID_MAX;
   1e676:	2301      	movs	r3, #1
{
   1e678:	4605      	mov	r5, r0
	bt_id_get(addrs, &count);
   1e67a:	a903      	add	r1, sp, #12
   1e67c:	a804      	add	r0, sp, #16
	size_t i, count = CONFIG_BT_ID_MAX;
   1e67e:	9303      	str	r3, [sp, #12]
	bt_id_get(addrs, &count);
   1e680:	f7fa faf2 	bl	18c68 <bt_id_get>
		shell_print(sh, "%s%zu: %s", i == selected_id ? "*" : " ", i,
   1e684:	4f11      	ldr	r7, [pc, #68]	; (1e6cc <cmd_id_show+0x5c>)
   1e686:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1e6d4 <cmd_id_show+0x64>
   1e68a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1e6d8 <cmd_id_show+0x68>
	for (i = 0; i < count; i++) {
   1e68e:	2400      	movs	r4, #0
   1e690:	9b03      	ldr	r3, [sp, #12]
   1e692:	42a3      	cmp	r3, r4
   1e694:	d803      	bhi.n	1e69e <cmd_id_show+0x2e>
}
   1e696:	2000      	movs	r0, #0
   1e698:	b00f      	add	sp, #60	; 0x3c
   1e69a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bt_addr_le_to_str(&addrs[i], addr_str, sizeof(addr_str));
   1e69e:	ab04      	add	r3, sp, #16
   1e6a0:	ae06      	add	r6, sp, #24
   1e6a2:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1e6a6:	221e      	movs	r2, #30
   1e6a8:	4631      	mov	r1, r6
   1e6aa:	4418      	add	r0, r3
   1e6ac:	f7ff fcae 	bl	1e00c <bt_addr_le_to_str>
		shell_print(sh, "%s%zu: %s", i == selected_id ? "*" : " ", i,
   1e6b0:	783b      	ldrb	r3, [r7, #0]
   1e6b2:	4a07      	ldr	r2, [pc, #28]	; (1e6d0 <cmd_id_show+0x60>)
   1e6b4:	e9cd 4600 	strd	r4, r6, [sp]
   1e6b8:	42a3      	cmp	r3, r4
   1e6ba:	bf0c      	ite	eq
   1e6bc:	4643      	moveq	r3, r8
   1e6be:	464b      	movne	r3, r9
   1e6c0:	2108      	movs	r1, #8
   1e6c2:	4628      	mov	r0, r5
   1e6c4:	f00b fa5a 	bl	29b7c <shell_fprintf>
	for (i = 0; i < count; i++) {
   1e6c8:	3401      	adds	r4, #1
   1e6ca:	e7e1      	b.n	1e690 <cmd_id_show+0x20>
   1e6cc:	20002b80 	.word	0x20002b80
   1e6d0:	0003249f 	.word	0x0003249f
   1e6d4:	00030a16 	.word	0x00030a16
   1e6d8:	0002ee9d 	.word	0x0002ee9d

0001e6dc <scan_recv>:
{
   1e6dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e6e0:	b09f      	sub	sp, #124	; 0x7c
	(void)memset(name, 0, sizeof(name));
   1e6e2:	ad16      	add	r5, sp, #88	; 0x58
{
   1e6e4:	4604      	mov	r4, r0
   1e6e6:	460e      	mov	r6, r1
	(void)memset(name, 0, sizeof(name));
   1e6e8:	221e      	movs	r2, #30
   1e6ea:	2100      	movs	r1, #0
   1e6ec:	4628      	mov	r0, r5
   1e6ee:	f00e faaa 	bl	2cc46 <memset>
	bt_data_parse(buf, data_cb, name);
   1e6f2:	4630      	mov	r0, r6
   1e6f4:	462a      	mov	r2, r5
   1e6f6:	4920      	ldr	r1, [pc, #128]	; (1e778 <scan_recv+0x9c>)
   1e6f8:	f7fa fa02 	bl	18b00 <bt_data_parse>
	bt_addr_le_to_str(info->addr, le_addr, sizeof(le_addr));
   1e6fc:	a90e      	add	r1, sp, #56	; 0x38
   1e6fe:	6820      	ldr	r0, [r4, #0]
   1e700:	221e      	movs	r2, #30
   1e702:	f7ff fc83 	bl	1e00c <bt_addr_le_to_str>
	shell_print(ctx_shell, "[DEVICE]: %s, AD evt type %u, RSSI %i %s "
   1e706:	7b22      	ldrb	r2, [r4, #12]
   1e708:	4b1c      	ldr	r3, [pc, #112]	; (1e77c <scan_recv+0xa0>)
   1e70a:	79e7      	ldrb	r7, [r4, #7]
   1e70c:	6818      	ldr	r0, [r3, #0]
   1e70e:	8923      	ldrh	r3, [r4, #8]
   1e710:	f994 c005 	ldrsb.w	ip, [r4, #5]
   1e714:	2a04      	cmp	r2, #4
   1e716:	bf96      	itet	ls
   1e718:	4919      	ldrls	r1, [pc, #100]	; (1e780 <scan_recv+0xa4>)
   1e71a:	4e1a      	ldrhi	r6, [pc, #104]	; (1e784 <scan_recv+0xa8>)
   1e71c:	f851 6022 	ldrls.w	r6, [r1, r2, lsl #2]
   1e720:	7b62      	ldrb	r2, [r4, #13]
	switch (phy) {
   1e722:	2a04      	cmp	r2, #4
   1e724:	bf96      	itet	ls
   1e726:	4916      	ldrls	r1, [pc, #88]	; (1e780 <scan_recv+0xa4>)
	shell_print(ctx_shell, "[DEVICE]: %s, AD evt type %u, RSSI %i %s "
   1e728:	f8df b058 	ldrhi.w	fp, [pc, #88]	; 1e784 <scan_recv+0xa8>
   1e72c:	f851 b022 	ldrls.w	fp, [r1, r2, lsl #2]
   1e730:	8962      	ldrh	r2, [r4, #10]
   1e732:	7921      	ldrb	r1, [r4, #4]
   1e734:	910c      	str	r1, [sp, #48]	; 0x30
   1e736:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1e73a:	f003 0e01 	and.w	lr, r3, #1
   1e73e:	f3c3 0840 	ubfx	r8, r3, #1, #1
   1e742:	f3c3 0980 	ubfx	r9, r3, #2, #1
   1e746:	f3c3 0ac0 	ubfx	sl, r3, #3, #1
   1e74a:	1089      	asrs	r1, r1, #2
   1e74c:	f3c3 1300 	ubfx	r3, r3, #4, #1
   1e750:	e9cd 210a 	strd	r2, r1, [sp, #40]	; 0x28
   1e754:	e9cd a306 	strd	sl, r3, [sp, #24]
   1e758:	e9cd 6b08 	strd	r6, fp, [sp, #32]
   1e75c:	e9cd 8904 	strd	r8, r9, [sp, #16]
   1e760:	e9cd 5e02 	strd	r5, lr, [sp, #8]
   1e764:	e9cd 7c00 	strd	r7, ip, [sp]
   1e768:	4a07      	ldr	r2, [pc, #28]	; (1e788 <scan_recv+0xac>)
   1e76a:	ab0e      	add	r3, sp, #56	; 0x38
   1e76c:	2108      	movs	r1, #8
   1e76e:	f00b fa05 	bl	29b7c <shell_fprintf>
}
   1e772:	b01f      	add	sp, #124	; 0x7c
   1e774:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e778:	0002bfc1 	.word	0x0002bfc1
   1e77c:	200027cc 	.word	0x200027cc
   1e780:	0002dfd8 	.word	0x0002dfd8
   1e784:	000324aa 	.word	0x000324aa
   1e788:	000324b2 	.word	0x000324b2

0001e78c <cmd_bt>:
	SHELL_SUBCMD_SET_END
);

static int cmd_bt(const struct shell *sh, size_t argc, char **argv)
{
	if (argc == 1) {
   1e78c:	2901      	cmp	r1, #1
{
   1e78e:	b513      	push	{r0, r1, r4, lr}
   1e790:	460c      	mov	r4, r1
	if (argc == 1) {
   1e792:	d104      	bne.n	1e79e <cmd_bt+0x12>
		shell_help(sh);
   1e794:	f00b fa17 	bl	29bc6 <shell_help>
		return SHELL_CMD_HELP_PRINTED;
   1e798:	4620      	mov	r0, r4
	}

	shell_error(sh, "%s unknown parameter: %s", argv[0], argv[1]);

	return -EINVAL;
}
   1e79a:	b002      	add	sp, #8
   1e79c:	bd10      	pop	{r4, pc}
	shell_error(sh, "%s unknown parameter: %s", argv[0], argv[1]);
   1e79e:	6853      	ldr	r3, [r2, #4]
   1e7a0:	9300      	str	r3, [sp, #0]
   1e7a2:	6813      	ldr	r3, [r2, #0]
   1e7a4:	4a03      	ldr	r2, [pc, #12]	; (1e7b4 <cmd_bt+0x28>)
   1e7a6:	2101      	movs	r1, #1
   1e7a8:	f00b f9e8 	bl	29b7c <shell_fprintf>
   1e7ac:	f06f 0015 	mvn.w	r0, #21
   1e7b0:	e7f3      	b.n	1e79a <cmd_bt+0xe>
   1e7b2:	bf00      	nop
   1e7b4:	0003252e 	.word	0x0003252e

0001e7b8 <cmd_clear>:
{
   1e7b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e7ba:	4605      	mov	r5, r0
   1e7bc:	460e      	mov	r6, r1
	if (strcmp(argv[1], "all") == 0) {
   1e7be:	6850      	ldr	r0, [r2, #4]
   1e7c0:	491c      	ldr	r1, [pc, #112]	; (1e834 <cmd_clear+0x7c>)
{
   1e7c2:	4614      	mov	r4, r2
	if (strcmp(argv[1], "all") == 0) {
   1e7c4:	f7ed fdec 	bl	c3a0 <strcmp>
   1e7c8:	4601      	mov	r1, r0
   1e7ca:	b990      	cbnz	r0, 1e7f2 <cmd_clear+0x3a>
		err = bt_unpair(selected_id, NULL);
   1e7cc:	4b1a      	ldr	r3, [pc, #104]	; (1e838 <cmd_clear+0x80>)
   1e7ce:	7818      	ldrb	r0, [r3, #0]
   1e7d0:	f00c f8fa 	bl	2a9c8 <bt_unpair>
		if (err) {
   1e7d4:	4604      	mov	r4, r0
   1e7d6:	b130      	cbz	r0, 1e7e6 <cmd_clear+0x2e>
			shell_error(sh, "Failed to clear pairings (err %d)",
   1e7d8:	4a18      	ldr	r2, [pc, #96]	; (1e83c <cmd_clear+0x84>)
   1e7da:	4603      	mov	r3, r0
		shell_error(sh, "Failed to clear pairing (err %d)", err);
   1e7dc:	2101      	movs	r1, #1
   1e7de:	4628      	mov	r0, r5
   1e7e0:	f00b f9cc 	bl	29b7c <shell_fprintf>
   1e7e4:	e00e      	b.n	1e804 <cmd_clear+0x4c>
			shell_print(sh, "Pairings successfully cleared");
   1e7e6:	4a16      	ldr	r2, [pc, #88]	; (1e840 <cmd_clear+0x88>)
		shell_print(sh, "Pairing successfully cleared");
   1e7e8:	2108      	movs	r1, #8
   1e7ea:	4628      	mov	r0, r5
   1e7ec:	f00b f9c6 	bl	29b7c <shell_fprintf>
   1e7f0:	e008      	b.n	1e804 <cmd_clear+0x4c>
	if (argc < 3) {
   1e7f2:	2e02      	cmp	r6, #2
   1e7f4:	d809      	bhi.n	1e80a <cmd_clear+0x52>
		shell_print(sh, "Both address and address type needed");
   1e7f6:	4a13      	ldr	r2, [pc, #76]	; (1e844 <cmd_clear+0x8c>)
   1e7f8:	2108      	movs	r1, #8
   1e7fa:	4628      	mov	r0, r5
   1e7fc:	f00b f9be 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1e800:	f06f 0407 	mvn.w	r4, #7
}
   1e804:	4620      	mov	r0, r4
   1e806:	b002      	add	sp, #8
   1e808:	bd70      	pop	{r4, r5, r6, pc}
		err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1e80a:	e9d4 0101 	ldrd	r0, r1, [r4, #4]
   1e80e:	466a      	mov	r2, sp
   1e810:	f7f8 fc12 	bl	17038 <bt_addr_le_from_str>
	if (err) {
   1e814:	4604      	mov	r4, r0
   1e816:	b108      	cbz	r0, 1e81c <cmd_clear+0x64>
		shell_print(sh, "Invalid address");
   1e818:	4a0b      	ldr	r2, [pc, #44]	; (1e848 <cmd_clear+0x90>)
   1e81a:	e7e5      	b.n	1e7e8 <cmd_clear+0x30>
	err = bt_unpair(selected_id, &addr);
   1e81c:	4b06      	ldr	r3, [pc, #24]	; (1e838 <cmd_clear+0x80>)
   1e81e:	4669      	mov	r1, sp
   1e820:	7818      	ldrb	r0, [r3, #0]
   1e822:	f00c f8d1 	bl	2a9c8 <bt_unpair>
	if (err) {
   1e826:	4604      	mov	r4, r0
   1e828:	b110      	cbz	r0, 1e830 <cmd_clear+0x78>
		shell_error(sh, "Failed to clear pairing (err %d)", err);
   1e82a:	4a08      	ldr	r2, [pc, #32]	; (1e84c <cmd_clear+0x94>)
   1e82c:	4603      	mov	r3, r0
   1e82e:	e7d5      	b.n	1e7dc <cmd_clear+0x24>
		shell_print(sh, "Pairing successfully cleared");
   1e830:	4a07      	ldr	r2, [pc, #28]	; (1e850 <cmd_clear+0x98>)
   1e832:	e7d9      	b.n	1e7e8 <cmd_clear+0x30>
   1e834:	00032548 	.word	0x00032548
   1e838:	20002b80 	.word	0x20002b80
   1e83c:	0003254c 	.word	0x0003254c
   1e840:	0003256f 	.word	0x0003256f
   1e844:	0003258e 	.word	0x0003258e
   1e848:	000325b4 	.word	0x000325b4
   1e84c:	000325c5 	.word	0x000325c5
   1e850:	000325e7 	.word	0x000325e7

0001e854 <cmd_select>:
{
   1e854:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e856:	4613      	mov	r3, r2
   1e858:	4605      	mov	r5, r0
	err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1e85a:	466a      	mov	r2, sp
   1e85c:	e9d3 0101 	ldrd	r0, r1, [r3, #4]
   1e860:	f7f8 fbea 	bl	17038 <bt_addr_le_from_str>
	if (err) {
   1e864:	4604      	mov	r4, r0
   1e866:	b140      	cbz	r0, 1e87a <cmd_select+0x26>
		shell_error(sh, "Invalid peer address (err %d)", err);
   1e868:	4603      	mov	r3, r0
   1e86a:	4a0f      	ldr	r2, [pc, #60]	; (1e8a8 <cmd_select+0x54>)
   1e86c:	2101      	movs	r1, #1
   1e86e:	4628      	mov	r0, r5
   1e870:	f00b f984 	bl	29b7c <shell_fprintf>
}
   1e874:	4620      	mov	r0, r4
   1e876:	b002      	add	sp, #8
   1e878:	bd70      	pop	{r4, r5, r6, pc}
	conn = bt_conn_lookup_addr_le(selected_id, &addr);
   1e87a:	4b0c      	ldr	r3, [pc, #48]	; (1e8ac <cmd_select+0x58>)
   1e87c:	4669      	mov	r1, sp
   1e87e:	7818      	ldrb	r0, [r3, #0]
   1e880:	f7fb fc2a 	bl	1a0d8 <bt_conn_lookup_addr_le>
	if (!conn) {
   1e884:	4606      	mov	r6, r0
   1e886:	b938      	cbnz	r0, 1e898 <cmd_select+0x44>
		shell_error(sh, "No matching connection found");
   1e888:	4a09      	ldr	r2, [pc, #36]	; (1e8b0 <cmd_select+0x5c>)
   1e88a:	2101      	movs	r1, #1
   1e88c:	4628      	mov	r0, r5
   1e88e:	f00b f975 	bl	29b7c <shell_fprintf>
   1e892:	f06f 0407 	mvn.w	r4, #7
   1e896:	e7ed      	b.n	1e874 <cmd_select+0x20>
	if (default_conn) {
   1e898:	4d06      	ldr	r5, [pc, #24]	; (1e8b4 <cmd_select+0x60>)
   1e89a:	6828      	ldr	r0, [r5, #0]
   1e89c:	b108      	cbz	r0, 1e8a2 <cmd_select+0x4e>
		bt_conn_unref(default_conn);
   1e89e:	f7fb f989 	bl	19bb4 <bt_conn_unref>
	default_conn = conn;
   1e8a2:	602e      	str	r6, [r5, #0]
	return 0;
   1e8a4:	e7e6      	b.n	1e874 <cmd_select+0x20>
   1e8a6:	bf00      	nop
   1e8a8:	0003228b 	.word	0x0003228b
   1e8ac:	20002b80 	.word	0x20002b80
   1e8b0:	00032605 	.word	0x00032605
   1e8b4:	200027d0 	.word	0x200027d0

0001e8b8 <cmd_name>:
	if (argc < 2) {
   1e8b8:	2901      	cmp	r1, #1
{
   1e8ba:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e8bc:	4605      	mov	r5, r0
   1e8be:	4616      	mov	r6, r2
	if (argc < 2) {
   1e8c0:	d80b      	bhi.n	1e8da <cmd_name+0x22>
		shell_print(sh, "Bluetooth Local Name: %s", bt_get_name());
   1e8c2:	f7fa f8dd 	bl	18a80 <bt_get_name>
   1e8c6:	4a0c      	ldr	r2, [pc, #48]	; (1e8f8 <cmd_name+0x40>)
   1e8c8:	4603      	mov	r3, r0
   1e8ca:	2108      	movs	r1, #8
   1e8cc:	4628      	mov	r0, r5
   1e8ce:	f00b f955 	bl	29b7c <shell_fprintf>
   1e8d2:	2400      	movs	r4, #0
}
   1e8d4:	4620      	mov	r0, r4
   1e8d6:	b002      	add	sp, #8
   1e8d8:	bd70      	pop	{r4, r5, r6, pc}
	err = bt_set_name(argv[1]);
   1e8da:	6850      	ldr	r0, [r2, #4]
   1e8dc:	f00c f90d 	bl	2aafa <bt_set_name>
	if (err) {
   1e8e0:	4604      	mov	r4, r0
   1e8e2:	2800      	cmp	r0, #0
   1e8e4:	d0f6      	beq.n	1e8d4 <cmd_name+0x1c>
		shell_error(sh, "Unable to set name %s (err %d)", argv[1],
   1e8e6:	9000      	str	r0, [sp, #0]
   1e8e8:	6873      	ldr	r3, [r6, #4]
   1e8ea:	4a04      	ldr	r2, [pc, #16]	; (1e8fc <cmd_name+0x44>)
   1e8ec:	2101      	movs	r1, #1
   1e8ee:	4628      	mov	r0, r5
   1e8f0:	f00b f944 	bl	29b7c <shell_fprintf>
		return err;
   1e8f4:	e7ee      	b.n	1e8d4 <cmd_name+0x1c>
   1e8f6:	bf00      	nop
   1e8f8:	00032623 	.word	0x00032623
   1e8fc:	0003263d 	.word	0x0003263d

0001e900 <cmd_id_select>:
{
   1e900:	b570      	push	{r4, r5, r6, lr}
   1e902:	4613      	mov	r3, r2
   1e904:	b08c      	sub	sp, #48	; 0x30
	id = strtol(argv[1], NULL, 10);
   1e906:	220a      	movs	r2, #10
   1e908:	2100      	movs	r1, #0
{
   1e90a:	4605      	mov	r5, r0
	size_t count = CONFIG_BT_ID_MAX;
   1e90c:	2601      	movs	r6, #1
	id = strtol(argv[1], NULL, 10);
   1e90e:	6858      	ldr	r0, [r3, #4]
	size_t count = CONFIG_BT_ID_MAX;
   1e910:	9601      	str	r6, [sp, #4]
	id = strtol(argv[1], NULL, 10);
   1e912:	f009 fdcd 	bl	284b0 <strtol>
	bt_id_get(addrs, &count);
   1e916:	a901      	add	r1, sp, #4
	id = strtol(argv[1], NULL, 10);
   1e918:	b2c4      	uxtb	r4, r0
	bt_id_get(addrs, &count);
   1e91a:	a802      	add	r0, sp, #8
   1e91c:	f7fa f9a4 	bl	18c68 <bt_id_get>
	if (count <= id) {
   1e920:	9b01      	ldr	r3, [sp, #4]
   1e922:	429c      	cmp	r4, r3
   1e924:	d308      	bcc.n	1e938 <cmd_id_select+0x38>
		shell_error(sh, "Invalid identity");
   1e926:	4628      	mov	r0, r5
   1e928:	4a0c      	ldr	r2, [pc, #48]	; (1e95c <cmd_id_select+0x5c>)
   1e92a:	4631      	mov	r1, r6
   1e92c:	f00b f926 	bl	29b7c <shell_fprintf>
   1e930:	f06f 0007 	mvn.w	r0, #7
}
   1e934:	b00c      	add	sp, #48	; 0x30
   1e936:	bd70      	pop	{r4, r5, r6, pc}
	bt_addr_le_to_str(&addrs[id], addr_str, sizeof(addr_str));
   1e938:	ab02      	add	r3, sp, #8
   1e93a:	ebc4 00c4 	rsb	r0, r4, r4, lsl #3
   1e93e:	221e      	movs	r2, #30
   1e940:	a904      	add	r1, sp, #16
   1e942:	4418      	add	r0, r3
   1e944:	f7ff fb62 	bl	1e00c <bt_addr_le_to_str>
	shell_print(sh, "Selected identity: %s", addr_str);
   1e948:	ab04      	add	r3, sp, #16
   1e94a:	4628      	mov	r0, r5
   1e94c:	4a04      	ldr	r2, [pc, #16]	; (1e960 <cmd_id_select+0x60>)
   1e94e:	2108      	movs	r1, #8
   1e950:	f00b f914 	bl	29b7c <shell_fprintf>
	selected_id = id;
   1e954:	4b03      	ldr	r3, [pc, #12]	; (1e964 <cmd_id_select+0x64>)
	return 0;
   1e956:	2000      	movs	r0, #0
	selected_id = id;
   1e958:	701c      	strb	r4, [r3, #0]
	return 0;
   1e95a:	e7eb      	b.n	1e934 <cmd_id_select+0x34>
   1e95c:	0003265d 	.word	0x0003265d
   1e960:	0003266f 	.word	0x0003266f
   1e964:	20002b80 	.word	0x20002b80

0001e968 <cmd_id_delete>:
	if (argc < 2) {
   1e968:	2901      	cmp	r1, #1
{
   1e96a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1e96c:	4613      	mov	r3, r2
   1e96e:	4606      	mov	r6, r0
	if (argc < 2) {
   1e970:	d808      	bhi.n	1e984 <cmd_id_delete+0x1c>
		shell_error(sh, "Identity identifier not specified");
   1e972:	4a12      	ldr	r2, [pc, #72]	; (1e9bc <cmd_id_delete+0x54>)
   1e974:	2101      	movs	r1, #1
   1e976:	f00b f901 	bl	29b7c <shell_fprintf>
   1e97a:	f06f 0407 	mvn.w	r4, #7
}
   1e97e:	4620      	mov	r0, r4
   1e980:	b002      	add	sp, #8
   1e982:	bd70      	pop	{r4, r5, r6, pc}
	id = strtol(argv[1], NULL, 10);
   1e984:	6858      	ldr	r0, [r3, #4]
   1e986:	220a      	movs	r2, #10
   1e988:	2100      	movs	r1, #0
   1e98a:	f009 fd91 	bl	284b0 <strtol>
	err = bt_id_delete(id);
   1e98e:	b2c5      	uxtb	r5, r0
   1e990:	4628      	mov	r0, r5
   1e992:	f7fa fa35 	bl	18e00 <bt_id_delete>
	if (err < 0) {
   1e996:	1e04      	subs	r4, r0, #0
   1e998:	da07      	bge.n	1e9aa <cmd_id_delete+0x42>
		shell_error(sh, "Deleting ID %u failed (err %d)", id, err);
   1e99a:	4a09      	ldr	r2, [pc, #36]	; (1e9c0 <cmd_id_delete+0x58>)
   1e99c:	9400      	str	r4, [sp, #0]
   1e99e:	462b      	mov	r3, r5
   1e9a0:	2101      	movs	r1, #1
   1e9a2:	4630      	mov	r0, r6
   1e9a4:	f00b f8ea 	bl	29b7c <shell_fprintf>
		return err;
   1e9a8:	e7e9      	b.n	1e97e <cmd_id_delete+0x16>
	shell_print(sh, "Identity %u deleted", id);
   1e9aa:	4a06      	ldr	r2, [pc, #24]	; (1e9c4 <cmd_id_delete+0x5c>)
   1e9ac:	462b      	mov	r3, r5
   1e9ae:	2108      	movs	r1, #8
   1e9b0:	4630      	mov	r0, r6
   1e9b2:	f00b f8e3 	bl	29b7c <shell_fprintf>
	return 0;
   1e9b6:	2400      	movs	r4, #0
   1e9b8:	e7e1      	b.n	1e97e <cmd_id_delete+0x16>
   1e9ba:	bf00      	nop
   1e9bc:	00032686 	.word	0x00032686
   1e9c0:	000326a9 	.word	0x000326a9
   1e9c4:	000326c9 	.word	0x000326c9

0001e9c8 <cmd_id_reset>:
{
   1e9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (argc < 2) {
   1e9ca:	2901      	cmp	r1, #1
{
   1e9cc:	b08d      	sub	sp, #52	; 0x34
   1e9ce:	4605      	mov	r5, r0
   1e9d0:	460f      	mov	r7, r1
   1e9d2:	4614      	mov	r4, r2
	if (argc < 2) {
   1e9d4:	d808      	bhi.n	1e9e8 <cmd_id_reset+0x20>
		shell_error(sh, "Identity identifier not specified");
   1e9d6:	4a22      	ldr	r2, [pc, #136]	; (1ea60 <cmd_id_reset+0x98>)
   1e9d8:	2101      	movs	r1, #1
   1e9da:	f00b f8cf 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1e9de:	f06f 0407 	mvn.w	r4, #7
}
   1e9e2:	4620      	mov	r0, r4
   1e9e4:	b00d      	add	sp, #52	; 0x34
   1e9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	id = strtol(argv[1], NULL, 10);
   1e9e8:	6860      	ldr	r0, [r4, #4]
   1e9ea:	220a      	movs	r2, #10
   1e9ec:	2100      	movs	r1, #0
   1e9ee:	f009 fd5f 	bl	284b0 <strtol>
	if (argc > 2) {
   1e9f2:	2f02      	cmp	r7, #2
	id = strtol(argv[1], NULL, 10);
   1e9f4:	b2c6      	uxtb	r6, r0
	if (argc > 2) {
   1e9f6:	d00c      	beq.n	1ea12 <cmd_id_reset+0x4a>
		err = bt_addr_le_from_str(argv[2], "random", &addr);
   1e9f8:	68a0      	ldr	r0, [r4, #8]
   1e9fa:	491a      	ldr	r1, [pc, #104]	; (1ea64 <cmd_id_reset+0x9c>)
   1e9fc:	aa02      	add	r2, sp, #8
   1e9fe:	f7f8 fb1b 	bl	17038 <bt_addr_le_from_str>
		if (err) {
   1ea02:	4604      	mov	r4, r0
   1ea04:	b168      	cbz	r0, 1ea22 <cmd_id_reset+0x5a>
			shell_print(sh, "Invalid address");
   1ea06:	4a18      	ldr	r2, [pc, #96]	; (1ea68 <cmd_id_reset+0xa0>)
   1ea08:	2108      	movs	r1, #8
   1ea0a:	4628      	mov	r0, r5
   1ea0c:	f00b f8b6 	bl	29b7c <shell_fprintf>
			return err;
   1ea10:	e7e7      	b.n	1e9e2 <cmd_id_reset+0x1a>
		bt_addr_le_copy(&addr, BT_ADDR_LE_ANY);
   1ea12:	2300      	movs	r3, #0
   1ea14:	a904      	add	r1, sp, #16
   1ea16:	a802      	add	r0, sp, #8
   1ea18:	9304      	str	r3, [sp, #16]
   1ea1a:	f8cd 3013 	str.w	r3, [sp, #19]
   1ea1e:	f00d fac8 	bl	2bfb2 <bt_addr_le_copy>
	err = bt_id_reset(id, &addr, NULL);
   1ea22:	2200      	movs	r2, #0
   1ea24:	a902      	add	r1, sp, #8
   1ea26:	4630      	mov	r0, r6
   1ea28:	f7fa f990 	bl	18d4c <bt_id_reset>
	if (err < 0) {
   1ea2c:	1e04      	subs	r4, r0, #0
   1ea2e:	da07      	bge.n	1ea40 <cmd_id_reset+0x78>
		shell_print(sh, "Resetting ID %u failed (err %d)", id, err);
   1ea30:	4a0e      	ldr	r2, [pc, #56]	; (1ea6c <cmd_id_reset+0xa4>)
   1ea32:	9400      	str	r4, [sp, #0]
   1ea34:	4633      	mov	r3, r6
   1ea36:	2108      	movs	r1, #8
   1ea38:	4628      	mov	r0, r5
   1ea3a:	f00b f89f 	bl	29b7c <shell_fprintf>
		return err;
   1ea3e:	e7d0      	b.n	1e9e2 <cmd_id_reset+0x1a>
	bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1ea40:	ac04      	add	r4, sp, #16
   1ea42:	4621      	mov	r1, r4
   1ea44:	221e      	movs	r2, #30
   1ea46:	a802      	add	r0, sp, #8
   1ea48:	f7ff fae0 	bl	1e00c <bt_addr_le_to_str>
	shell_print(sh, "Identity %u reset: %s", id, addr_str);
   1ea4c:	9400      	str	r4, [sp, #0]
   1ea4e:	4a08      	ldr	r2, [pc, #32]	; (1ea70 <cmd_id_reset+0xa8>)
   1ea50:	4633      	mov	r3, r6
   1ea52:	2108      	movs	r1, #8
   1ea54:	4628      	mov	r0, r5
   1ea56:	f00b f891 	bl	29b7c <shell_fprintf>
	return 0;
   1ea5a:	2400      	movs	r4, #0
   1ea5c:	e7c1      	b.n	1e9e2 <cmd_id_reset+0x1a>
   1ea5e:	bf00      	nop
   1ea60:	00032686 	.word	0x00032686
   1ea64:	00030dac 	.word	0x00030dac
   1ea68:	000325b4 	.word	0x000325b4
   1ea6c:	000326de 	.word	0x000326de
   1ea70:	000326ff 	.word	0x000326ff

0001ea74 <cmd_id_create>:
{
   1ea74:	b570      	push	{r4, r5, r6, lr}
	if (argc > 1) {
   1ea76:	2901      	cmp	r1, #1
{
   1ea78:	b08c      	sub	sp, #48	; 0x30
   1ea7a:	4605      	mov	r5, r0
   1ea7c:	4613      	mov	r3, r2
	if (argc > 1) {
   1ea7e:	d919      	bls.n	1eab4 <cmd_id_create+0x40>
		err = bt_addr_le_from_str(argv[1], "random", &addr);
   1ea80:	4918      	ldr	r1, [pc, #96]	; (1eae4 <cmd_id_create+0x70>)
   1ea82:	6858      	ldr	r0, [r3, #4]
   1ea84:	aa02      	add	r2, sp, #8
   1ea86:	f7f8 fad7 	bl	17038 <bt_addr_le_from_str>
		if (err) {
   1ea8a:	b120      	cbz	r0, 1ea96 <cmd_id_create+0x22>
			shell_error(sh, "Invalid address");
   1ea8c:	4a16      	ldr	r2, [pc, #88]	; (1eae8 <cmd_id_create+0x74>)
   1ea8e:	2101      	movs	r1, #1
   1ea90:	4628      	mov	r0, r5
   1ea92:	f00b f873 	bl	29b7c <shell_fprintf>
	err = bt_id_create(&addr, NULL);
   1ea96:	2100      	movs	r1, #0
   1ea98:	a802      	add	r0, sp, #8
   1ea9a:	f7fa f8f7 	bl	18c8c <bt_id_create>
	if (err < 0) {
   1ea9e:	1e04      	subs	r4, r0, #0
   1eaa0:	da11      	bge.n	1eac6 <cmd_id_create+0x52>
		shell_error(sh, "Creating new ID failed (err %d)", err);
   1eaa2:	4a12      	ldr	r2, [pc, #72]	; (1eaec <cmd_id_create+0x78>)
   1eaa4:	4623      	mov	r3, r4
   1eaa6:	2101      	movs	r1, #1
   1eaa8:	4628      	mov	r0, r5
   1eaaa:	f00b f867 	bl	29b7c <shell_fprintf>
}
   1eaae:	4620      	mov	r0, r4
   1eab0:	b00c      	add	sp, #48	; 0x30
   1eab2:	bd70      	pop	{r4, r5, r6, pc}
		bt_addr_le_copy(&addr, BT_ADDR_LE_ANY);
   1eab4:	2300      	movs	r3, #0
   1eab6:	a904      	add	r1, sp, #16
   1eab8:	a802      	add	r0, sp, #8
   1eaba:	9304      	str	r3, [sp, #16]
   1eabc:	f8cd 3013 	str.w	r3, [sp, #19]
   1eac0:	f00d fa77 	bl	2bfb2 <bt_addr_le_copy>
   1eac4:	e7e7      	b.n	1ea96 <cmd_id_create+0x22>
	bt_addr_le_to_str(&addr, addr_str, sizeof(addr_str));
   1eac6:	ae04      	add	r6, sp, #16
   1eac8:	221e      	movs	r2, #30
   1eaca:	4631      	mov	r1, r6
   1eacc:	a802      	add	r0, sp, #8
   1eace:	f7ff fa9d 	bl	1e00c <bt_addr_le_to_str>
	shell_print(sh, "New identity (%d) created: %s", err, addr_str);
   1ead2:	4623      	mov	r3, r4
   1ead4:	4a06      	ldr	r2, [pc, #24]	; (1eaf0 <cmd_id_create+0x7c>)
   1ead6:	9600      	str	r6, [sp, #0]
   1ead8:	2108      	movs	r1, #8
   1eada:	4628      	mov	r0, r5
   1eadc:	f00b f84e 	bl	29b7c <shell_fprintf>
	return 0;
   1eae0:	2400      	movs	r4, #0
   1eae2:	e7e4      	b.n	1eaae <cmd_id_create+0x3a>
   1eae4:	00030dac 	.word	0x00030dac
   1eae8:	000325b4 	.word	0x000325b4
   1eaec:	00032716 	.word	0x00032716
   1eaf0:	00032737 	.word	0x00032737

0001eaf4 <bt_ready>:
	if (err) {
   1eaf4:	4b0c      	ldr	r3, [pc, #48]	; (1eb28 <bt_ready+0x34>)
{
   1eaf6:	b510      	push	{r4, lr}
   1eaf8:	4604      	mov	r4, r0
   1eafa:	6818      	ldr	r0, [r3, #0]
	if (err) {
   1eafc:	b134      	cbz	r4, 1eb0c <bt_ready+0x18>
		shell_error(ctx_shell, "Bluetooth init failed (err %d)", err);
   1eafe:	4623      	mov	r3, r4
   1eb00:	4a0a      	ldr	r2, [pc, #40]	; (1eb2c <bt_ready+0x38>)
}
   1eb02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		shell_error(ctx_shell, "Bluetooth init failed (err %d)", err);
   1eb06:	2101      	movs	r1, #1
   1eb08:	f00b b838 	b.w	29b7c <shell_fprintf>
	shell_print(ctx_shell, "Bluetooth initialized");
   1eb0c:	4a08      	ldr	r2, [pc, #32]	; (1eb30 <bt_ready+0x3c>)
   1eb0e:	2108      	movs	r1, #8
   1eb10:	f00b f834 	bl	29b7c <shell_fprintf>
	bt_le_scan_cb_register(&scan_callbacks);
   1eb14:	4807      	ldr	r0, [pc, #28]	; (1eb34 <bt_ready+0x40>)
   1eb16:	f7fa fd6f 	bl	195f8 <bt_le_scan_cb_register>
	default_conn = NULL;
   1eb1a:	4b07      	ldr	r3, [pc, #28]	; (1eb38 <bt_ready+0x44>)
	bt_conn_cb_register(&conn_callbacks);
   1eb1c:	4807      	ldr	r0, [pc, #28]	; (1eb3c <bt_ready+0x48>)
	default_conn = NULL;
   1eb1e:	601c      	str	r4, [r3, #0]
}
   1eb20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_cb_register(&conn_callbacks);
   1eb24:	f7fb bab6 	b.w	1a094 <bt_conn_cb_register>
   1eb28:	200027cc 	.word	0x200027cc
   1eb2c:	00032756 	.word	0x00032756
   1eb30:	0002e716 	.word	0x0002e716
   1eb34:	20000580 	.word	0x20000580
   1eb38:	200027d0 	.word	0x200027d0
   1eb3c:	2000056c 	.word	0x2000056c

0001eb40 <cmd_init>:
{
   1eb40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ctx_shell = sh;
   1eb44:	4b1b      	ldr	r3, [pc, #108]	; (1ebb4 <cmd_init+0x74>)
		if (!strcmp(arg, "no-settings-load")) {
   1eb46:	f8df a078 	ldr.w	sl, [pc, #120]	; 1ebc0 <cmd_init+0x80>
		} else if (!strcmp(arg, "sync")) {
   1eb4a:	f8df b078 	ldr.w	fp, [pc, #120]	; 1ebc4 <cmd_init+0x84>
	ctx_shell = sh;
   1eb4e:	6018      	str	r0, [r3, #0]
{
   1eb50:	4605      	mov	r5, r0
   1eb52:	460f      	mov	r7, r1
   1eb54:	4690      	mov	r8, r2
	for (size_t argn = 1; argn < argc; argn++) {
   1eb56:	2401      	movs	r4, #1
	bool no_ready_cb = false;
   1eb58:	2600      	movs	r6, #0
	for (size_t argn = 1; argn < argc; argn++) {
   1eb5a:	42bc      	cmp	r4, r7
   1eb5c:	d30c      	bcc.n	1eb78 <cmd_init+0x38>
	if (no_ready_cb) {
   1eb5e:	b30e      	cbz	r6, 1eba4 <cmd_init+0x64>
		err = bt_enable(bt_ready);
   1eb60:	4815      	ldr	r0, [pc, #84]	; (1ebb8 <cmd_init+0x78>)
   1eb62:	f7f9 feeb 	bl	1893c <bt_enable>
		if (err) {
   1eb66:	4604      	mov	r4, r0
   1eb68:	b1b0      	cbz	r0, 1eb98 <cmd_init+0x58>
			shell_error(sh, "Bluetooth init failed (err %d)",
   1eb6a:	4603      	mov	r3, r0
   1eb6c:	4a13      	ldr	r2, [pc, #76]	; (1ebbc <cmd_init+0x7c>)
   1eb6e:	2101      	movs	r1, #1
   1eb70:	4628      	mov	r0, r5
   1eb72:	f00b f803 	bl	29b7c <shell_fprintf>
   1eb76:	e00f      	b.n	1eb98 <cmd_init+0x58>
		const char *arg = argv[argn];
   1eb78:	f858 9024 	ldr.w	r9, [r8, r4, lsl #2]
		if (!strcmp(arg, "no-settings-load")) {
   1eb7c:	4651      	mov	r1, sl
   1eb7e:	4648      	mov	r0, r9
   1eb80:	f7ed fc0e 	bl	c3a0 <strcmp>
   1eb84:	b160      	cbz	r0, 1eba0 <cmd_init+0x60>
		} else if (!strcmp(arg, "sync")) {
   1eb86:	4659      	mov	r1, fp
   1eb88:	4648      	mov	r0, r9
   1eb8a:	f7ed fc09 	bl	c3a0 <strcmp>
   1eb8e:	b130      	cbz	r0, 1eb9e <cmd_init+0x5e>
			shell_help(sh);
   1eb90:	4628      	mov	r0, r5
   1eb92:	f00b f818 	bl	29bc6 <shell_help>
			return SHELL_CMD_HELP_PRINTED;
   1eb96:	2401      	movs	r4, #1
}
   1eb98:	4620      	mov	r0, r4
   1eb9a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			no_ready_cb = true;
   1eb9e:	2601      	movs	r6, #1
	for (size_t argn = 1; argn < argc; argn++) {
   1eba0:	3401      	adds	r4, #1
   1eba2:	e7da      	b.n	1eb5a <cmd_init+0x1a>
		err = bt_enable(NULL);
   1eba4:	4630      	mov	r0, r6
   1eba6:	f7f9 fec9 	bl	1893c <bt_enable>
   1ebaa:	4604      	mov	r4, r0
		bt_ready(err);
   1ebac:	f7ff ffa2 	bl	1eaf4 <bt_ready>
   1ebb0:	e7f2      	b.n	1eb98 <cmd_init+0x58>
   1ebb2:	bf00      	nop
   1ebb4:	200027cc 	.word	0x200027cc
   1ebb8:	0001eaf5 	.word	0x0001eaf5
   1ebbc:	00032756 	.word	0x00032756
   1ebc0:	00032776 	.word	0x00032776
   1ebc4:	00032787 	.word	0x00032787

0001ebc8 <cmd_oob>:
{
   1ebc8:	b5f0      	push	{r4, r5, r6, r7, lr}
	err = bt_le_oob_get_local(selected_id, &oob_local);
   1ebca:	4b1e      	ldr	r3, [pc, #120]	; (1ec44 <cmd_oob+0x7c>)
   1ebcc:	491e      	ldr	r1, [pc, #120]	; (1ec48 <cmd_oob+0x80>)
{
   1ebce:	b09d      	sub	sp, #116	; 0x74
   1ebd0:	4604      	mov	r4, r0
	err = bt_le_oob_get_local(selected_id, &oob_local);
   1ebd2:	7818      	ldrb	r0, [r3, #0]
   1ebd4:	f7fa fa54 	bl	19080 <bt_le_oob_get_local>
	if (err) {
   1ebd8:	4605      	mov	r5, r0
   1ebda:	b138      	cbz	r0, 1ebec <cmd_oob+0x24>
		shell_error(sh, "OOB data failed");
   1ebdc:	4a1b      	ldr	r2, [pc, #108]	; (1ec4c <cmd_oob+0x84>)
   1ebde:	2101      	movs	r1, #1
   1ebe0:	4620      	mov	r0, r4
   1ebe2:	f00a ffcb 	bl	29b7c <shell_fprintf>
}
   1ebe6:	4628      	mov	r0, r5
   1ebe8:	b01d      	add	sp, #116	; 0x74
   1ebea:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_addr_le_to_str(&oob->addr, addr, sizeof(addr));
   1ebec:	a902      	add	r1, sp, #8
	bin2hex(oob->le_sc_data.c, sizeof(oob->le_sc_data.c), c, sizeof(c));
   1ebee:	af0a      	add	r7, sp, #40	; 0x28
	bt_addr_le_to_str(&oob->addr, addr, sizeof(addr));
   1ebf0:	221e      	movs	r2, #30
   1ebf2:	4815      	ldr	r0, [pc, #84]	; (1ec48 <cmd_oob+0x80>)
   1ebf4:	f7ff fa0a 	bl	1e00c <bt_addr_le_to_str>
	bin2hex(oob->le_sc_data.r, sizeof(oob->le_sc_data.r), r, sizeof(r));
   1ebf8:	ae13      	add	r6, sp, #76	; 0x4c
	bin2hex(oob->le_sc_data.c, sizeof(oob->le_sc_data.c), c, sizeof(c));
   1ebfa:	463a      	mov	r2, r7
   1ebfc:	2321      	movs	r3, #33	; 0x21
   1ebfe:	2110      	movs	r1, #16
   1ec00:	4813      	ldr	r0, [pc, #76]	; (1ec50 <cmd_oob+0x88>)
   1ec02:	f009 ff3c 	bl	28a7e <bin2hex>
	bin2hex(oob->le_sc_data.r, sizeof(oob->le_sc_data.r), r, sizeof(r));
   1ec06:	2321      	movs	r3, #33	; 0x21
   1ec08:	4632      	mov	r2, r6
   1ec0a:	2110      	movs	r1, #16
   1ec0c:	4811      	ldr	r0, [pc, #68]	; (1ec54 <cmd_oob+0x8c>)
   1ec0e:	f009 ff36 	bl	28a7e <bin2hex>
	shell_print(sh, "OOB data:");
   1ec12:	4620      	mov	r0, r4
   1ec14:	4a10      	ldr	r2, [pc, #64]	; (1ec58 <cmd_oob+0x90>)
   1ec16:	2108      	movs	r1, #8
   1ec18:	f00a ffb0 	bl	29b7c <shell_fprintf>
	shell_print(sh, "%-29s %-32s %-32s", "addr", "random", "confirm");
   1ec1c:	4b0f      	ldr	r3, [pc, #60]	; (1ec5c <cmd_oob+0x94>)
   1ec1e:	9301      	str	r3, [sp, #4]
   1ec20:	4b0f      	ldr	r3, [pc, #60]	; (1ec60 <cmd_oob+0x98>)
   1ec22:	9300      	str	r3, [sp, #0]
   1ec24:	4620      	mov	r0, r4
   1ec26:	4b0f      	ldr	r3, [pc, #60]	; (1ec64 <cmd_oob+0x9c>)
   1ec28:	4a0f      	ldr	r2, [pc, #60]	; (1ec68 <cmd_oob+0xa0>)
   1ec2a:	2108      	movs	r1, #8
   1ec2c:	f00a ffa6 	bl	29b7c <shell_fprintf>
	shell_print(sh, "%29s %32s %32s", addr, r, c);
   1ec30:	e9cd 6700 	strd	r6, r7, [sp]
   1ec34:	4a0d      	ldr	r2, [pc, #52]	; (1ec6c <cmd_oob+0xa4>)
   1ec36:	ab02      	add	r3, sp, #8
   1ec38:	2108      	movs	r1, #8
   1ec3a:	4620      	mov	r0, r4
   1ec3c:	f00a ff9e 	bl	29b7c <shell_fprintf>
}
   1ec40:	e7d1      	b.n	1ebe6 <cmd_oob+0x1e>
   1ec42:	bf00      	nop
   1ec44:	20002b80 	.word	0x20002b80
   1ec48:	20002b59 	.word	0x20002b59
   1ec4c:	0003278c 	.word	0x0003278c
   1ec50:	20002b70 	.word	0x20002b70
   1ec54:	20002b60 	.word	0x20002b60
   1ec58:	0003279d 	.word	0x0003279d
   1ec5c:	000327c0 	.word	0x000327c0
   1ec60:	00030dac 	.word	0x00030dac
   1ec64:	000327a8 	.word	0x000327a8
   1ec68:	000327ad 	.word	0x000327ad
   1ec6c:	000327c8 	.word	0x000327c8

0001ec70 <cmd_hci_cmd>:
{
   1ec70:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1ec74:	4616      	mov	r6, r2
   1ec76:	460f      	mov	r7, r1
	ogf = strtoul(argv[1], NULL, 16);
   1ec78:	2210      	movs	r2, #16
   1ec7a:	2100      	movs	r1, #0
{
   1ec7c:	4605      	mov	r5, r0
	ogf = strtoul(argv[1], NULL, 16);
   1ec7e:	6870      	ldr	r0, [r6, #4]
   1ec80:	f009 fc9c 	bl	285bc <strtoul>
	ocf = strtoul(argv[2], NULL, 16);
   1ec84:	2210      	movs	r2, #16
	ogf = strtoul(argv[1], NULL, 16);
   1ec86:	4680      	mov	r8, r0
	ocf = strtoul(argv[2], NULL, 16);
   1ec88:	2100      	movs	r1, #0
   1ec8a:	68b0      	ldr	r0, [r6, #8]
   1ec8c:	f009 fc96 	bl	285bc <strtoul>
	if (argc > 3) {
   1ec90:	2f03      	cmp	r7, #3
	ocf = strtoul(argv[2], NULL, 16);
   1ec92:	4604      	mov	r4, r0
	if (argc > 3) {
   1ec94:	d939      	bls.n	1ed0a <cmd_hci_cmd+0x9a>
		if (strlen(argv[3]) > 2 * HCI_CMD_MAX_PARAM) {
   1ec96:	68f0      	ldr	r0, [r6, #12]
   1ec98:	f7ed fb8c 	bl	c3b4 <strlen>
   1ec9c:	2882      	cmp	r0, #130	; 0x82
   1ec9e:	d90a      	bls.n	1ecb6 <cmd_hci_cmd+0x46>
			shell_error(sh, "Data field too large\n");
   1eca0:	4a20      	ldr	r2, [pc, #128]	; (1ed24 <cmd_hci_cmd+0xb4>)
			shell_error(sh, "HCI command illegal data field\n");
   1eca2:	2101      	movs	r1, #1
   1eca4:	4628      	mov	r0, r5
   1eca6:	f00a ff69 	bl	29b7c <shell_fprintf>
			return -ENOEXEC;
   1ecaa:	f06f 0407 	mvn.w	r4, #7
}
   1ecae:	4620      	mov	r0, r4
   1ecb0:	b002      	add	sp, #8
   1ecb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = hex2bin(argv[3], strlen(argv[3]), &hex_data[hex_data_len],
   1ecb6:	68f6      	ldr	r6, [r6, #12]
   1ecb8:	4630      	mov	r0, r6
   1ecba:	f7ed fb7b 	bl	c3b4 <strlen>
   1ecbe:	4a1a      	ldr	r2, [pc, #104]	; (1ed28 <cmd_hci_cmd+0xb8>)
   1ecc0:	4601      	mov	r1, r0
   1ecc2:	2341      	movs	r3, #65	; 0x41
   1ecc4:	4630      	mov	r0, r6
   1ecc6:	f009 ff05 	bl	28ad4 <hex2bin>
		if (!len) {
   1ecca:	4607      	mov	r7, r0
   1eccc:	b908      	cbnz	r0, 1ecd2 <cmd_hci_cmd+0x62>
			shell_error(sh, "HCI command illegal data field\n");
   1ecce:	4a17      	ldr	r2, [pc, #92]	; (1ed2c <cmd_hci_cmd+0xbc>)
   1ecd0:	e7e7      	b.n	1eca2 <cmd_hci_cmd+0x32>
		buf = bt_hci_cmd_create(BT_OP(ogf, ocf), len);
   1ecd2:	ea44 2088 	orr.w	r0, r4, r8, lsl #10
   1ecd6:	b2f9      	uxtb	r1, r7
   1ecd8:	b280      	uxth	r0, r0
   1ecda:	f7f8 fe1d 	bl	17918 <bt_hci_cmd_create>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   1ecde:	4912      	ldr	r1, [pc, #72]	; (1ed28 <cmd_hci_cmd+0xb8>)
   1ece0:	4606      	mov	r6, r0
   1ece2:	463a      	mov	r2, r7
   1ece4:	3008      	adds	r0, #8
   1ece6:	f00d f9c7 	bl	2c078 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_OP(ogf, ocf), buf, &rsp);
   1ecea:	ea44 2088 	orr.w	r0, r4, r8, lsl #10
   1ecee:	aa01      	add	r2, sp, #4
   1ecf0:	4631      	mov	r1, r6
   1ecf2:	b280      	uxth	r0, r0
   1ecf4:	f7f8 fe58 	bl	179a8 <bt_hci_cmd_send_sync>
	if (err) {
   1ecf8:	4604      	mov	r4, r0
   1ecfa:	b140      	cbz	r0, 1ed0e <cmd_hci_cmd+0x9e>
		shell_error(sh, "HCI command failed (err %d)", err);
   1ecfc:	4603      	mov	r3, r0
   1ecfe:	4a0c      	ldr	r2, [pc, #48]	; (1ed30 <cmd_hci_cmd+0xc0>)
   1ed00:	2101      	movs	r1, #1
   1ed02:	4628      	mov	r0, r5
   1ed04:	f00a ff3a 	bl	29b7c <shell_fprintf>
		return err;
   1ed08:	e7d1      	b.n	1ecae <cmd_hci_cmd+0x3e>
	struct net_buf *buf = NULL, *rsp;
   1ed0a:	2600      	movs	r6, #0
   1ed0c:	e7ed      	b.n	1ecea <cmd_hci_cmd+0x7a>
		shell_hexdump(sh, rsp->data, rsp->len);
   1ed0e:	9b01      	ldr	r3, [sp, #4]
   1ed10:	4628      	mov	r0, r5
   1ed12:	899a      	ldrh	r2, [r3, #12]
   1ed14:	6899      	ldr	r1, [r3, #8]
   1ed16:	f00a ff3e 	bl	29b96 <shell_hexdump>
		net_buf_unref(rsp);
   1ed1a:	9801      	ldr	r0, [sp, #4]
   1ed1c:	f001 f96e 	bl	1fffc <net_buf_unref>
	return 0;
   1ed20:	e7c5      	b.n	1ecae <cmd_hci_cmd+0x3e>
   1ed22:	bf00      	nop
   1ed24:	000327d8 	.word	0x000327d8
   1ed28:	20002b18 	.word	0x20002b18
   1ed2c:	000327ef 	.word	0x000327ef
   1ed30:	00032810 	.word	0x00032810

0001ed34 <cmd_chan_map>:
{
   1ed34:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if (hex2bin(argv[1], strlen(argv[1]), chan_map, 5) == 0) {
   1ed36:	6854      	ldr	r4, [r2, #4]
	uint8_t chan_map[5] = {};
   1ed38:	2300      	movs	r3, #0
{
   1ed3a:	4605      	mov	r5, r0
	if (hex2bin(argv[1], strlen(argv[1]), chan_map, 5) == 0) {
   1ed3c:	4620      	mov	r0, r4
	uint8_t chan_map[5] = {};
   1ed3e:	9300      	str	r3, [sp, #0]
   1ed40:	f88d 3004 	strb.w	r3, [sp, #4]
	if (hex2bin(argv[1], strlen(argv[1]), chan_map, 5) == 0) {
   1ed44:	f7ed fb36 	bl	c3b4 <strlen>
   1ed48:	2305      	movs	r3, #5
   1ed4a:	4601      	mov	r1, r0
   1ed4c:	466a      	mov	r2, sp
   1ed4e:	4620      	mov	r0, r4
   1ed50:	f009 fec0 	bl	28ad4 <hex2bin>
   1ed54:	b1d0      	cbz	r0, 1ed8c <cmd_chan_map+0x58>
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ed56:	f89d 3000 	ldrb.w	r3, [sp]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ed5a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   1ed5e:	f88d 2000 	strb.w	r2, [sp]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ed62:	f88d 3004 	strb.w	r3, [sp, #4]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ed66:	f89d 2003 	ldrb.w	r2, [sp, #3]
		uint8_t tmp = ((uint8_t *)buf)[i];
   1ed6a:	f89d 3001 	ldrb.w	r3, [sp, #1]
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1ed6e:	f88d 3003 	strb.w	r3, [sp, #3]
	err = bt_le_set_chan_map(chan_map);
   1ed72:	4668      	mov	r0, sp
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1ed74:	f88d 2001 	strb.w	r2, [sp, #1]
   1ed78:	f7f9 fe86 	bl	18a88 <bt_le_set_chan_map>
	if (err) {
   1ed7c:	4604      	mov	r4, r0
   1ed7e:	b978      	cbnz	r0, 1eda0 <cmd_chan_map+0x6c>
		shell_print(sh, "Channel map set");
   1ed80:	4a0b      	ldr	r2, [pc, #44]	; (1edb0 <cmd_chan_map+0x7c>)
   1ed82:	2108      	movs	r1, #8
   1ed84:	4628      	mov	r0, r5
   1ed86:	f00a fef9 	bl	29b7c <shell_fprintf>
   1ed8a:	e006      	b.n	1ed9a <cmd_chan_map+0x66>
		shell_error(sh, "Invalid channel map");
   1ed8c:	4a09      	ldr	r2, [pc, #36]	; (1edb4 <cmd_chan_map+0x80>)
   1ed8e:	2101      	movs	r1, #1
   1ed90:	4628      	mov	r0, r5
   1ed92:	f00a fef3 	bl	29b7c <shell_fprintf>
   1ed96:	f06f 0407 	mvn.w	r4, #7
}
   1ed9a:	4620      	mov	r0, r4
   1ed9c:	b003      	add	sp, #12
   1ed9e:	bd30      	pop	{r4, r5, pc}
		shell_error(sh, "Failed to set channel map (err %d)", err);
   1eda0:	4603      	mov	r3, r0
   1eda2:	4a05      	ldr	r2, [pc, #20]	; (1edb8 <cmd_chan_map+0x84>)
   1eda4:	2101      	movs	r1, #1
   1eda6:	4628      	mov	r0, r5
   1eda8:	f00a fee8 	bl	29b7c <shell_fprintf>
   1edac:	e7f5      	b.n	1ed9a <cmd_chan_map+0x66>
   1edae:	bf00      	nop
   1edb0:	00032866 	.word	0x00032866
   1edb4:	0003282d 	.word	0x0003282d
   1edb8:	00032842 	.word	0x00032842

0001edbc <disconnected>:
{
   1edbc:	b530      	push	{r4, r5, lr}
   1edbe:	b08b      	sub	sp, #44	; 0x2c
   1edc0:	460d      	mov	r5, r1
	conn_addr_str(conn, addr, sizeof(addr));
   1edc2:	221e      	movs	r2, #30
   1edc4:	a902      	add	r1, sp, #8
{
   1edc6:	4604      	mov	r4, r0
	conn_addr_str(conn, addr, sizeof(addr));
   1edc8:	f00d f90c 	bl	2bfe4 <conn_addr_str>
	shell_print(ctx_shell, "Disconnected: %s (reason 0x%02x)", addr, reason);
   1edcc:	4808      	ldr	r0, [pc, #32]	; (1edf0 <disconnected+0x34>)
   1edce:	9500      	str	r5, [sp, #0]
	if (default_conn == conn) {
   1edd0:	4d08      	ldr	r5, [pc, #32]	; (1edf4 <disconnected+0x38>)
	shell_print(ctx_shell, "Disconnected: %s (reason 0x%02x)", addr, reason);
   1edd2:	6800      	ldr	r0, [r0, #0]
   1edd4:	4a08      	ldr	r2, [pc, #32]	; (1edf8 <disconnected+0x3c>)
   1edd6:	ab02      	add	r3, sp, #8
   1edd8:	2108      	movs	r1, #8
   1edda:	f00a fecf 	bl	29b7c <shell_fprintf>
	if (default_conn == conn) {
   1edde:	6828      	ldr	r0, [r5, #0]
   1ede0:	42a0      	cmp	r0, r4
   1ede2:	d103      	bne.n	1edec <disconnected+0x30>
		bt_conn_unref(default_conn);
   1ede4:	f7fa fee6 	bl	19bb4 <bt_conn_unref>
		default_conn = NULL;
   1ede8:	2300      	movs	r3, #0
   1edea:	602b      	str	r3, [r5, #0]
}
   1edec:	b00b      	add	sp, #44	; 0x2c
   1edee:	bd30      	pop	{r4, r5, pc}
   1edf0:	200027cc 	.word	0x200027cc
   1edf4:	200027d0 	.word	0x200027d0
   1edf8:	00032877 	.word	0x00032877

0001edfc <connected>:
{
   1edfc:	b530      	push	{r4, r5, lr}
   1edfe:	b08b      	sub	sp, #44	; 0x2c
   1ee00:	460c      	mov	r4, r1
	conn_addr_str(conn, addr, sizeof(addr));
   1ee02:	221e      	movs	r2, #30
   1ee04:	a902      	add	r1, sp, #8
{
   1ee06:	4605      	mov	r5, r0
	conn_addr_str(conn, addr, sizeof(addr));
   1ee08:	f00d f8ec 	bl	2bfe4 <conn_addr_str>
	if (err) {
   1ee0c:	4810      	ldr	r0, [pc, #64]	; (1ee50 <connected+0x54>)
   1ee0e:	b17c      	cbz	r4, 1ee30 <connected+0x34>
		shell_error(ctx_shell, "Failed to connect to %s (0x%02x)", addr,
   1ee10:	9400      	str	r4, [sp, #0]
   1ee12:	4a10      	ldr	r2, [pc, #64]	; (1ee54 <connected+0x58>)
   1ee14:	6800      	ldr	r0, [r0, #0]
   1ee16:	ab02      	add	r3, sp, #8
   1ee18:	2101      	movs	r1, #1
   1ee1a:	f00a feaf 	bl	29b7c <shell_fprintf>
	if (pairing_conn) {
   1ee1e:	4c0e      	ldr	r4, [pc, #56]	; (1ee58 <connected+0x5c>)
   1ee20:	6820      	ldr	r0, [r4, #0]
   1ee22:	b118      	cbz	r0, 1ee2c <connected+0x30>
		bt_conn_unref(pairing_conn);
   1ee24:	f7fa fec6 	bl	19bb4 <bt_conn_unref>
		pairing_conn = NULL;
   1ee28:	2300      	movs	r3, #0
   1ee2a:	6023      	str	r3, [r4, #0]
}
   1ee2c:	b00b      	add	sp, #44	; 0x2c
   1ee2e:	bd30      	pop	{r4, r5, pc}
	if (!default_conn) {
   1ee30:	4c0a      	ldr	r4, [pc, #40]	; (1ee5c <connected+0x60>)
	shell_print(ctx_shell, "Connected: %s", addr);
   1ee32:	4a0b      	ldr	r2, [pc, #44]	; (1ee60 <connected+0x64>)
   1ee34:	6800      	ldr	r0, [r0, #0]
   1ee36:	ab02      	add	r3, sp, #8
   1ee38:	2108      	movs	r1, #8
   1ee3a:	f00a fe9f 	bl	29b7c <shell_fprintf>
	if (!default_conn) {
   1ee3e:	6823      	ldr	r3, [r4, #0]
   1ee40:	2b00      	cmp	r3, #0
   1ee42:	d1ec      	bne.n	1ee1e <connected+0x22>
		default_conn = bt_conn_ref(conn);
   1ee44:	4628      	mov	r0, r5
   1ee46:	f00b fed1 	bl	2abec <bt_conn_ref>
   1ee4a:	6020      	str	r0, [r4, #0]
   1ee4c:	e7e7      	b.n	1ee1e <connected+0x22>
   1ee4e:	bf00      	nop
   1ee50:	200027cc 	.word	0x200027cc
   1ee54:	00032899 	.word	0x00032899
   1ee58:	200027d4 	.word	0x200027d4
   1ee5c:	200027d0 	.word	0x200027d0
   1ee60:	000328bb 	.word	0x000328bb

0001ee64 <write_func>:
static struct bt_gatt_write_params write_params;
static uint8_t gatt_write_buf[CHAR_SIZE_MAX];

static void write_func(struct bt_conn *conn, uint8_t err,
		       struct bt_gatt_write_params *params)
{
   1ee64:	b508      	push	{r3, lr}
	shell_print(ctx_shell, "Write complete: err 0x%02x", err);
   1ee66:	4807      	ldr	r0, [pc, #28]	; (1ee84 <write_func+0x20>)
   1ee68:	4a07      	ldr	r2, [pc, #28]	; (1ee88 <write_func+0x24>)
   1ee6a:	6800      	ldr	r0, [r0, #0]
{
   1ee6c:	460b      	mov	r3, r1
	shell_print(ctx_shell, "Write complete: err 0x%02x", err);
   1ee6e:	2108      	movs	r1, #8
   1ee70:	f00a fe84 	bl	29b7c <shell_fprintf>

	(void)memset(&write_params, 0, sizeof(write_params));
}
   1ee74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memset(&write_params, 0, sizeof(write_params));
   1ee78:	4804      	ldr	r0, [pc, #16]	; (1ee8c <write_func+0x28>)
   1ee7a:	2210      	movs	r2, #16
   1ee7c:	2100      	movs	r1, #0
   1ee7e:	f00d bee2 	b.w	2cc46 <memset>
   1ee82:	bf00      	nop
   1ee84:	200027cc 	.word	0x200027cc
   1ee88:	00032a7a 	.word	0x00032a7a
   1ee8c:	2000281c 	.word	0x2000281c

0001ee90 <cmd_set>:

	return BT_GATT_ITER_CONTINUE;
}

static int cmd_set(const struct shell *sh, size_t argc, char *argv[])
{
   1ee90:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ee92:	4614      	mov	r4, r2
   1ee94:	b085      	sub	sp, #20
   1ee96:	4607      	mov	r7, r0
   1ee98:	460e      	mov	r6, r1
	uint16_t handle;
	struct set_data data;

	handle = strtoul(argv[1], NULL, 16);
   1ee9a:	6860      	ldr	r0, [r4, #4]
   1ee9c:	2210      	movs	r2, #16
   1ee9e:	2100      	movs	r1, #0
   1eea0:	f009 fb8c 	bl	285bc <strtoul>

	data.sh = sh;
	data.argc = argc - 2;
	data.argv = argv + 2;
   1eea4:	3408      	adds	r4, #8
	handle = strtoul(argv[1], NULL, 16);
   1eea6:	b285      	uxth	r5, r0
	data.argv = argv + 2;
   1eea8:	9402      	str	r4, [sp, #8]
	data.err = 0;

	bt_gatt_foreach_attr(handle, handle, set_cb, &data);
   1eeaa:	466b      	mov	r3, sp
	data.err = 0;
   1eeac:	2400      	movs	r4, #0
	bt_gatt_foreach_attr(handle, handle, set_cb, &data);
   1eeae:	4a0c      	ldr	r2, [pc, #48]	; (1eee0 <cmd_set+0x50>)
	data.sh = sh;
   1eeb0:	9700      	str	r7, [sp, #0]
	data.argc = argc - 2;
   1eeb2:	3e02      	subs	r6, #2
	bt_gatt_foreach_attr(handle, handle, set_cb, &data);
   1eeb4:	4629      	mov	r1, r5
   1eeb6:	4628      	mov	r0, r5
	data.argc = argc - 2;
   1eeb8:	9601      	str	r6, [sp, #4]
	data.err = 0;
   1eeba:	9403      	str	r4, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, set_cb, &data);
   1eebc:	f00d f8a9 	bl	2c012 <bt_gatt_foreach_attr>

	if (data.err < 0) {
   1eec0:	9b03      	ldr	r3, [sp, #12]
   1eec2:	42a3      	cmp	r3, r4
   1eec4:	db08      	blt.n	1eed8 <cmd_set+0x48>
		return -ENOEXEC;
	}

	bt_gatt_foreach_attr(handle, handle, get_cb, (void *)sh);
   1eec6:	4628      	mov	r0, r5
   1eec8:	4a06      	ldr	r2, [pc, #24]	; (1eee4 <cmd_set+0x54>)
   1eeca:	463b      	mov	r3, r7
   1eecc:	4629      	mov	r1, r5
   1eece:	f00d f8a0 	bl	2c012 <bt_gatt_foreach_attr>

	return 0;
   1eed2:	4620      	mov	r0, r4
}
   1eed4:	b005      	add	sp, #20
   1eed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOEXEC;
   1eed8:	f06f 0007 	mvn.w	r0, #7
   1eedc:	e7fa      	b.n	1eed4 <cmd_set+0x44>
   1eede:	bf00      	nop
   1eee0:	0001f98d 	.word	0x0001f98d
   1eee4:	0001eff1 	.word	0x0001eff1

0001eee8 <cmd_get>:
{
   1eee8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eeea:	4615      	mov	r5, r2
   1eeec:	460f      	mov	r7, r1
   1eeee:	4606      	mov	r6, r0
	start = strtoul(argv[1], NULL, 16);
   1eef0:	2210      	movs	r2, #16
   1eef2:	6868      	ldr	r0, [r5, #4]
   1eef4:	2100      	movs	r1, #0
   1eef6:	f009 fb61 	bl	285bc <strtoul>
	if (argc > 2) {
   1eefa:	2f02      	cmp	r7, #2
	start = strtoul(argv[1], NULL, 16);
   1eefc:	b284      	uxth	r4, r0
	if (argc > 2) {
   1eefe:	d90c      	bls.n	1ef1a <cmd_get+0x32>
		end = strtoul(argv[2], NULL, 16);
   1ef00:	2100      	movs	r1, #0
   1ef02:	68a8      	ldr	r0, [r5, #8]
   1ef04:	2210      	movs	r2, #16
   1ef06:	f009 fb59 	bl	285bc <strtoul>
   1ef0a:	b281      	uxth	r1, r0
	bt_gatt_foreach_attr(start, end, get_cb, (void *)sh);
   1ef0c:	4620      	mov	r0, r4
   1ef0e:	4a04      	ldr	r2, [pc, #16]	; (1ef20 <cmd_get+0x38>)
   1ef10:	4633      	mov	r3, r6
   1ef12:	f00d f87e 	bl	2c012 <bt_gatt_foreach_attr>
}
   1ef16:	2000      	movs	r0, #0
   1ef18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	end = start;
   1ef1a:	4621      	mov	r1, r4
   1ef1c:	e7f6      	b.n	1ef0c <cmd_get+0x24>
   1ef1e:	bf00      	nop
   1ef20:	0001eff1 	.word	0x0001eff1

0001ef24 <print_attr>:
{
   1ef24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	stats.attr_count++;
   1ef28:	4d2e      	ldr	r5, [pc, #184]	; (1efe4 <print_attr+0xc0>)
   1ef2a:	886b      	ldrh	r3, [r5, #2]
{
   1ef2c:	b091      	sub	sp, #68	; 0x44
	stats.attr_count++;
   1ef2e:	3301      	adds	r3, #1
   1ef30:	806b      	strh	r3, [r5, #2]
{
   1ef32:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) ||
   1ef34:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1ef38:	6800      	ldr	r0, [r0, #0]
   1ef3a:	f8ad 3016 	strh.w	r3, [sp, #22]
{
   1ef3e:	4688      	mov	r8, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) ||
   1ef40:	f04f 0900 	mov.w	r9, #0
   1ef44:	a905      	add	r1, sp, #20
{
   1ef46:	4617      	mov	r7, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) ||
   1ef48:	f88d 9014 	strb.w	r9, [sp, #20]
   1ef4c:	f00b fc48 	bl	2a7e0 <bt_uuid_cmp>
   1ef50:	ae06      	add	r6, sp, #24
   1ef52:	2800      	cmp	r0, #0
   1ef54:	d138      	bne.n	1efc8 <print_attr+0xa4>
		stats.svc_count++;
   1ef56:	882b      	ldrh	r3, [r5, #0]
   1ef58:	3301      	adds	r3, #1
   1ef5a:	802b      	strh	r3, [r5, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
   1ef5c:	2300      	movs	r3, #0
   1ef5e:	f88d 3018 	strb.w	r3, [sp, #24]
   1ef62:	6820      	ldr	r0, [r4, #0]
   1ef64:	f642 0303 	movw	r3, #10243	; 0x2803
   1ef68:	4631      	mov	r1, r6
   1ef6a:	f8ad 301a 	strh.w	r3, [sp, #26]
   1ef6e:	f00b fc37 	bl	2a7e0 <bt_uuid_cmp>
   1ef72:	b910      	cbnz	r0, 1ef7a <print_attr+0x56>
		stats.chrc_count++;
   1ef74:	88ab      	ldrh	r3, [r5, #4]
   1ef76:	3301      	adds	r3, #1
   1ef78:	80ab      	strh	r3, [r5, #4]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC) &&
   1ef7a:	2300      	movs	r3, #0
   1ef7c:	f88d 3018 	strb.w	r3, [sp, #24]
   1ef80:	6820      	ldr	r0, [r4, #0]
   1ef82:	f642 1302 	movw	r3, #10498	; 0x2902
   1ef86:	4631      	mov	r1, r6
   1ef88:	f8ad 301a 	strh.w	r3, [sp, #26]
   1ef8c:	f00b fc28 	bl	2a7e0 <bt_uuid_cmp>
   1ef90:	b930      	cbnz	r0, 1efa0 <print_attr+0x7c>
   1ef92:	4b15      	ldr	r3, [pc, #84]	; (1efe8 <print_attr+0xc4>)
   1ef94:	68a2      	ldr	r2, [r4, #8]
   1ef96:	429a      	cmp	r2, r3
		stats.ccc_count++;
   1ef98:	bf02      	ittt	eq
   1ef9a:	88eb      	ldrheq	r3, [r5, #6]
   1ef9c:	3301      	addeq	r3, #1
   1ef9e:	80eb      	strheq	r3, [r5, #6]
	bt_uuid_to_str(attr->uuid, str, sizeof(str));
   1efa0:	6820      	ldr	r0, [r4, #0]
   1efa2:	4631      	mov	r1, r6
   1efa4:	2225      	movs	r2, #37	; 0x25
   1efa6:	f7f8 f80f 	bl	16fc8 <bt_uuid_to_str>
	shell_print(sh, "attr %p handle 0x%04x uuid %s perm 0x%02x",
   1efaa:	7ca3      	ldrb	r3, [r4, #18]
   1efac:	4a0f      	ldr	r2, [pc, #60]	; (1efec <print_attr+0xc8>)
   1efae:	f8cd 8000 	str.w	r8, [sp]
   1efb2:	e9cd 6301 	strd	r6, r3, [sp, #4]
   1efb6:	4638      	mov	r0, r7
   1efb8:	4623      	mov	r3, r4
   1efba:	2108      	movs	r1, #8
   1efbc:	f00a fdde 	bl	29b7c <shell_fprintf>
}
   1efc0:	2001      	movs	r0, #1
   1efc2:	b011      	add	sp, #68	; 0x44
   1efc4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	    !bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1efc8:	f642 0301 	movw	r3, #10241	; 0x2801
   1efcc:	6820      	ldr	r0, [r4, #0]
   1efce:	f88d 9018 	strb.w	r9, [sp, #24]
   1efd2:	4631      	mov	r1, r6
   1efd4:	f8ad 301a 	strh.w	r3, [sp, #26]
   1efd8:	f00b fc02 	bl	2a7e0 <bt_uuid_cmp>
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) ||
   1efdc:	2800      	cmp	r0, #0
   1efde:	d0ba      	beq.n	1ef56 <print_attr+0x32>
   1efe0:	e7bc      	b.n	1ef5c <print_attr+0x38>
   1efe2:	bf00      	nop
   1efe4:	20002a34 	.word	0x20002a34
   1efe8:	0001bf39 	.word	0x0001bf39
   1efec:	00032a96 	.word	0x00032a96

0001eff0 <get_cb>:
{
   1eff0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1eff2:	b0cd      	sub	sp, #308	; 0x134
   1eff4:	4605      	mov	r5, r0
	bt_uuid_to_str(attr->uuid, str, sizeof(str));
   1eff6:	ac02      	add	r4, sp, #8
   1eff8:	6800      	ldr	r0, [r0, #0]
{
   1effa:	4616      	mov	r6, r2
	bt_uuid_to_str(attr->uuid, str, sizeof(str));
   1effc:	4621      	mov	r1, r4
   1effe:	2225      	movs	r2, #37	; 0x25
   1f000:	f7f7 ffe2 	bl	16fc8 <bt_uuid_to_str>
	shell_print(sh, "attr %p uuid %s perm 0x%02x", attr, str,
   1f004:	7cab      	ldrb	r3, [r5, #18]
   1f006:	4a11      	ldr	r2, [pc, #68]	; (1f04c <get_cb+0x5c>)
   1f008:	e9cd 4300 	strd	r4, r3, [sp]
   1f00c:	2108      	movs	r1, #8
   1f00e:	462b      	mov	r3, r5
   1f010:	4630      	mov	r0, r6
   1f012:	f00a fdb3 	bl	29b7c <shell_fprintf>
	if (!attr->read) {
   1f016:	686f      	ldr	r7, [r5, #4]
   1f018:	b1b7      	cbz	r7, 1f048 <get_cb+0x58>
	ret = attr->read(NULL, attr, (void *)buf, sizeof(buf), 0);
   1f01a:	2400      	movs	r4, #0
   1f01c:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f020:	9400      	str	r4, [sp, #0]
   1f022:	aa0c      	add	r2, sp, #48	; 0x30
   1f024:	4629      	mov	r1, r5
   1f026:	4620      	mov	r0, r4
   1f028:	47b8      	blx	r7
	if (ret < 0) {
   1f02a:	1e03      	subs	r3, r0, #0
   1f02c:	da07      	bge.n	1f03e <get_cb+0x4e>
		shell_print(sh, "Failed to read: %zd", ret);
   1f02e:	4630      	mov	r0, r6
   1f030:	4a07      	ldr	r2, [pc, #28]	; (1f050 <get_cb+0x60>)
   1f032:	2108      	movs	r1, #8
   1f034:	f00a fda2 	bl	29b7c <shell_fprintf>
		return BT_GATT_ITER_STOP;
   1f038:	4620      	mov	r0, r4
}
   1f03a:	b04d      	add	sp, #308	; 0x134
   1f03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	shell_hexdump(sh, buf, ret);
   1f03e:	461a      	mov	r2, r3
   1f040:	a90c      	add	r1, sp, #48	; 0x30
   1f042:	4630      	mov	r0, r6
   1f044:	f00a fda7 	bl	29b96 <shell_hexdump>
		return BT_GATT_ITER_CONTINUE;
   1f048:	2001      	movs	r0, #1
   1f04a:	e7f6      	b.n	1f03a <get_cb+0x4a>
   1f04c:	00032ac1 	.word	0x00032ac1
   1f050:	00032ade 	.word	0x00032ade

0001f054 <cmd_write>:
{
   1f054:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!default_conn) {
   1f058:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 1f120 <cmd_write+0xcc>
   1f05c:	f8da 3000 	ldr.w	r3, [sl]
{
   1f060:	4606      	mov	r6, r0
   1f062:	4614      	mov	r4, r2
	if (!default_conn) {
   1f064:	b943      	cbnz	r3, 1f078 <cmd_write+0x24>
		shell_error(sh, "Not connected");
   1f066:	4a26      	ldr	r2, [pc, #152]	; (1f100 <cmd_write+0xac>)
		shell_error(sh, "Write ongoing");
   1f068:	2101      	movs	r1, #1
		shell_error(sh, "No data set");
   1f06a:	f00a fd87 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1f06e:	f06f 0407 	mvn.w	r4, #7
}
   1f072:	4620      	mov	r0, r4
   1f074:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (write_params.func) {
   1f078:	4d22      	ldr	r5, [pc, #136]	; (1f104 <cmd_write+0xb0>)
   1f07a:	682f      	ldr	r7, [r5, #0]
   1f07c:	b10f      	cbz	r7, 1f082 <cmd_write+0x2e>
		shell_error(sh, "Write ongoing");
   1f07e:	4a22      	ldr	r2, [pc, #136]	; (1f108 <cmd_write+0xb4>)
   1f080:	e7f2      	b.n	1f068 <cmd_write+0x14>
	handle = strtoul(argv[1], NULL, 16);
   1f082:	6860      	ldr	r0, [r4, #4]
   1f084:	2210      	movs	r2, #16
   1f086:	4639      	mov	r1, r7
   1f088:	f009 fa98 	bl	285bc <strtoul>
	offset = strtoul(argv[2], NULL, 16);
   1f08c:	2210      	movs	r2, #16
   1f08e:	4639      	mov	r1, r7
	handle = strtoul(argv[1], NULL, 16);
   1f090:	fa1f f980 	uxth.w	r9, r0
	offset = strtoul(argv[2], NULL, 16);
   1f094:	68a0      	ldr	r0, [r4, #8]
   1f096:	f009 fa91 	bl	285bc <strtoul>
	write_params.length = hex2bin(argv[3], strlen(argv[3]),
   1f09a:	f8d4 b00c 	ldr.w	fp, [r4, #12]
   1f09e:	4c1b      	ldr	r4, [pc, #108]	; (1f10c <cmd_write+0xb8>)
	offset = strtoul(argv[2], NULL, 16);
   1f0a0:	fa1f f880 	uxth.w	r8, r0
	write_params.length = hex2bin(argv[3], strlen(argv[3]),
   1f0a4:	4658      	mov	r0, fp
   1f0a6:	f7ed f985 	bl	c3b4 <strlen>
   1f0aa:	f44f 7300 	mov.w	r3, #512	; 0x200
   1f0ae:	4601      	mov	r1, r0
   1f0b0:	4622      	mov	r2, r4
   1f0b2:	4658      	mov	r0, fp
   1f0b4:	f009 fd0e 	bl	28ad4 <hex2bin>
   1f0b8:	b280      	uxth	r0, r0
   1f0ba:	81a8      	strh	r0, [r5, #12]
	if (write_params.length == 0) {
   1f0bc:	b918      	cbnz	r0, 1f0c6 <cmd_write+0x72>
		shell_error(sh, "No data set");
   1f0be:	4a14      	ldr	r2, [pc, #80]	; (1f110 <cmd_write+0xbc>)
   1f0c0:	2101      	movs	r1, #1
   1f0c2:	4630      	mov	r0, r6
   1f0c4:	e7d1      	b.n	1f06a <cmd_write+0x16>
	write_params.func = write_func;
   1f0c6:	4b13      	ldr	r3, [pc, #76]	; (1f114 <cmd_write+0xc0>)
	err = bt_gatt_write(default_conn, &write_params);
   1f0c8:	f8da 0000 	ldr.w	r0, [sl]
	write_params.data = gatt_write_buf;
   1f0cc:	60ac      	str	r4, [r5, #8]
	err = bt_gatt_write(default_conn, &write_params);
   1f0ce:	4629      	mov	r1, r5
	write_params.handle = handle;
   1f0d0:	f8a5 9004 	strh.w	r9, [r5, #4]
	write_params.offset = offset;
   1f0d4:	f8a5 8006 	strh.w	r8, [r5, #6]
	write_params.func = write_func;
   1f0d8:	602b      	str	r3, [r5, #0]
	err = bt_gatt_write(default_conn, &write_params);
   1f0da:	f7fe fb37 	bl	1d74c <bt_gatt_write>
	if (err) {
   1f0de:	4604      	mov	r4, r0
   1f0e0:	b138      	cbz	r0, 1f0f2 <cmd_write+0x9e>
		shell_error(sh, "Write failed (err %d)", err);
   1f0e2:	4603      	mov	r3, r0
   1f0e4:	4a0c      	ldr	r2, [pc, #48]	; (1f118 <cmd_write+0xc4>)
		write_params.func = NULL;
   1f0e6:	602f      	str	r7, [r5, #0]
		shell_error(sh, "Write failed (err %d)", err);
   1f0e8:	2101      	movs	r1, #1
   1f0ea:	4630      	mov	r0, r6
   1f0ec:	f00a fd46 	bl	29b7c <shell_fprintf>
   1f0f0:	e7bf      	b.n	1f072 <cmd_write+0x1e>
		shell_print(sh, "Write pending");
   1f0f2:	4a0a      	ldr	r2, [pc, #40]	; (1f11c <cmd_write+0xc8>)
   1f0f4:	2108      	movs	r1, #8
   1f0f6:	4630      	mov	r0, r6
   1f0f8:	f00a fd40 	bl	29b7c <shell_fprintf>
   1f0fc:	e7b9      	b.n	1f072 <cmd_write+0x1e>
   1f0fe:	bf00      	nop
   1f100:	000322aa 	.word	0x000322aa
   1f104:	2000281c 	.word	0x2000281c
   1f108:	00032af3 	.word	0x00032af3
   1f10c:	20002b81 	.word	0x20002b81
   1f110:	00032b02 	.word	0x00032b02
   1f114:	0001ee65 	.word	0x0001ee65
   1f118:	00032b0f 	.word	0x00032b0f
   1f11c:	00032b26 	.word	0x00032b26
   1f120:	200027d0 	.word	0x200027d0

0001f124 <cmd_resubscribe>:
{
   1f124:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (subscribe_params.value_handle) {
   1f128:	4c26      	ldr	r4, [pc, #152]	; (1f1c4 <cmd_resubscribe+0xa0>)
   1f12a:	8923      	ldrh	r3, [r4, #8]
{
   1f12c:	4607      	mov	r7, r0
   1f12e:	4688      	mov	r8, r1
   1f130:	4615      	mov	r5, r2
	if (subscribe_params.value_handle) {
   1f132:	b14b      	cbz	r3, 1f148 <cmd_resubscribe+0x24>
		shell_error(sh, "Cannot resubscribe: subscription to %x"
   1f134:	4a24      	ldr	r2, [pc, #144]	; (1f1c8 <cmd_resubscribe+0xa4>)
   1f136:	2101      	movs	r1, #1
		shell_error(sh, "Invalid peer address (err %d)", err);
   1f138:	f00a fd20 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1f13c:	f06f 0507 	mvn.w	r5, #7
}
   1f140:	4628      	mov	r0, r5
   1f142:	b002      	add	sp, #8
   1f144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	err = bt_addr_le_from_str(argv[1], argv[2], &addr);
   1f148:	e9d5 0101 	ldrd	r0, r1, [r5, #4]
   1f14c:	466a      	mov	r2, sp
   1f14e:	f7f7 ff73 	bl	17038 <bt_addr_le_from_str>
	if (err) {
   1f152:	4606      	mov	r6, r0
   1f154:	b120      	cbz	r0, 1f160 <cmd_resubscribe+0x3c>
		shell_error(sh, "Invalid peer address (err %d)", err);
   1f156:	4603      	mov	r3, r0
   1f158:	4a1c      	ldr	r2, [pc, #112]	; (1f1cc <cmd_resubscribe+0xa8>)
   1f15a:	2101      	movs	r1, #1
   1f15c:	4638      	mov	r0, r7
   1f15e:	e7eb      	b.n	1f138 <cmd_resubscribe+0x14>
	subscribe_params.ccc_handle = strtoul(argv[3], NULL, 16);
   1f160:	4601      	mov	r1, r0
   1f162:	2210      	movs	r2, #16
   1f164:	68e8      	ldr	r0, [r5, #12]
   1f166:	f009 fa29 	bl	285bc <strtoul>
	subscribe_params.value_handle = strtoul(argv[4], NULL, 16);
   1f16a:	2210      	movs	r2, #16
	subscribe_params.ccc_handle = strtoul(argv[3], NULL, 16);
   1f16c:	8160      	strh	r0, [r4, #10]
	subscribe_params.value_handle = strtoul(argv[4], NULL, 16);
   1f16e:	4631      	mov	r1, r6
   1f170:	6928      	ldr	r0, [r5, #16]
   1f172:	f009 fa23 	bl	285bc <strtoul>
	subscribe_params.value = BT_GATT_CCC_NOTIFY;
   1f176:	2301      	movs	r3, #1
   1f178:	81a3      	strh	r3, [r4, #12]
	if (argc > 5 && !strcmp(argv[5], "ind")) {
   1f17a:	f1b8 0f05 	cmp.w	r8, #5
	subscribe_params.notify = notify_func;
   1f17e:	4b14      	ldr	r3, [pc, #80]	; (1f1d0 <cmd_resubscribe+0xac>)
	subscribe_params.value_handle = strtoul(argv[4], NULL, 16);
   1f180:	8120      	strh	r0, [r4, #8]
	subscribe_params.notify = notify_func;
   1f182:	6023      	str	r3, [r4, #0]
	if (argc > 5 && !strcmp(argv[5], "ind")) {
   1f184:	d906      	bls.n	1f194 <cmd_resubscribe+0x70>
   1f186:	4913      	ldr	r1, [pc, #76]	; (1f1d4 <cmd_resubscribe+0xb0>)
   1f188:	6968      	ldr	r0, [r5, #20]
   1f18a:	f7ed f909 	bl	c3a0 <strcmp>
   1f18e:	b908      	cbnz	r0, 1f194 <cmd_resubscribe+0x70>
		subscribe_params.value = BT_GATT_CCC_INDICATE;
   1f190:	2302      	movs	r3, #2
   1f192:	81a3      	strh	r3, [r4, #12]
	err = bt_gatt_resubscribe(selected_id, &addr, &subscribe_params);
   1f194:	4b10      	ldr	r3, [pc, #64]	; (1f1d8 <cmd_resubscribe+0xb4>)
   1f196:	4a0b      	ldr	r2, [pc, #44]	; (1f1c4 <cmd_resubscribe+0xa0>)
   1f198:	7818      	ldrb	r0, [r3, #0]
   1f19a:	4669      	mov	r1, sp
   1f19c:	f7fe fc60 	bl	1da60 <bt_gatt_resubscribe>
	if (err) {
   1f1a0:	4605      	mov	r5, r0
   1f1a2:	b140      	cbz	r0, 1f1b6 <cmd_resubscribe+0x92>
		subscribe_params.value_handle = 0U;
   1f1a4:	2300      	movs	r3, #0
   1f1a6:	8123      	strh	r3, [r4, #8]
		shell_error(sh, "Resubscribe failed (err %d)", err);
   1f1a8:	4a0c      	ldr	r2, [pc, #48]	; (1f1dc <cmd_resubscribe+0xb8>)
   1f1aa:	4603      	mov	r3, r0
   1f1ac:	2101      	movs	r1, #1
   1f1ae:	4638      	mov	r0, r7
   1f1b0:	f00a fce4 	bl	29b7c <shell_fprintf>
   1f1b4:	e7c4      	b.n	1f140 <cmd_resubscribe+0x1c>
		shell_print(sh, "Resubscribed");
   1f1b6:	4a0a      	ldr	r2, [pc, #40]	; (1f1e0 <cmd_resubscribe+0xbc>)
   1f1b8:	2108      	movs	r1, #8
   1f1ba:	4638      	mov	r0, r7
   1f1bc:	f00a fcde 	bl	29b7c <shell_fprintf>
   1f1c0:	e7be      	b.n	1f140 <cmd_resubscribe+0x1c>
   1f1c2:	bf00      	nop
   1f1c4:	20002804 	.word	0x20002804
   1f1c8:	00032b35 	.word	0x00032b35
   1f1cc:	0003228b 	.word	0x0003228b
   1f1d0:	0001f929 	.word	0x0001f929
   1f1d4:	00032b6c 	.word	0x00032b6c
   1f1d8:	20002b80 	.word	0x20002b80
   1f1dc:	00032b70 	.word	0x00032b70
   1f1e0:	00032b8d 	.word	0x00032b8d

0001f1e4 <cmd_subscribe>:
{
   1f1e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (subscribe_params.value_handle) {
   1f1e8:	4c24      	ldr	r4, [pc, #144]	; (1f27c <cmd_subscribe+0x98>)
   1f1ea:	8927      	ldrh	r7, [r4, #8]
{
   1f1ec:	4606      	mov	r6, r0
   1f1ee:	4688      	mov	r8, r1
   1f1f0:	4615      	mov	r5, r2
	if (subscribe_params.value_handle) {
   1f1f2:	b14f      	cbz	r7, 1f208 <cmd_subscribe+0x24>
		shell_error(sh, "Cannot subscribe: subscription to %x "
   1f1f4:	4a22      	ldr	r2, [pc, #136]	; (1f280 <cmd_subscribe+0x9c>)
   1f1f6:	463b      	mov	r3, r7
   1f1f8:	2101      	movs	r1, #1
   1f1fa:	f00a fcbf 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1f1fe:	f06f 0507 	mvn.w	r5, #7
}
   1f202:	4628      	mov	r0, r5
   1f204:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (!default_conn) {
   1f208:	4b1e      	ldr	r3, [pc, #120]	; (1f284 <cmd_subscribe+0xa0>)
   1f20a:	681a      	ldr	r2, [r3, #0]
   1f20c:	4699      	mov	r9, r3
   1f20e:	b922      	cbnz	r2, 1f21a <cmd_subscribe+0x36>
		shell_error(sh, "Not connected");
   1f210:	4a1d      	ldr	r2, [pc, #116]	; (1f288 <cmd_subscribe+0xa4>)
   1f212:	2101      	movs	r1, #1
   1f214:	f00a fcb2 	bl	29b7c <shell_fprintf>
   1f218:	e7f1      	b.n	1f1fe <cmd_subscribe+0x1a>
	subscribe_params.ccc_handle = strtoul(argv[1], NULL, 16);
   1f21a:	2210      	movs	r2, #16
   1f21c:	4639      	mov	r1, r7
   1f21e:	6868      	ldr	r0, [r5, #4]
   1f220:	f009 f9cc 	bl	285bc <strtoul>
	subscribe_params.value_handle = strtoul(argv[2], NULL, 16);
   1f224:	2210      	movs	r2, #16
	subscribe_params.ccc_handle = strtoul(argv[1], NULL, 16);
   1f226:	8160      	strh	r0, [r4, #10]
	subscribe_params.value_handle = strtoul(argv[2], NULL, 16);
   1f228:	4639      	mov	r1, r7
   1f22a:	68a8      	ldr	r0, [r5, #8]
   1f22c:	f009 f9c6 	bl	285bc <strtoul>
	subscribe_params.value = BT_GATT_CCC_NOTIFY;
   1f230:	2301      	movs	r3, #1
   1f232:	81a3      	strh	r3, [r4, #12]
	if (argc > 3 && !strcmp(argv[3], "ind")) {
   1f234:	f1b8 0f03 	cmp.w	r8, #3
	subscribe_params.notify = notify_func;
   1f238:	4b14      	ldr	r3, [pc, #80]	; (1f28c <cmd_subscribe+0xa8>)
	subscribe_params.value_handle = strtoul(argv[2], NULL, 16);
   1f23a:	8120      	strh	r0, [r4, #8]
	subscribe_params.notify = notify_func;
   1f23c:	6023      	str	r3, [r4, #0]
	if (argc > 3 && !strcmp(argv[3], "ind")) {
   1f23e:	d906      	bls.n	1f24e <cmd_subscribe+0x6a>
   1f240:	4913      	ldr	r1, [pc, #76]	; (1f290 <cmd_subscribe+0xac>)
   1f242:	68e8      	ldr	r0, [r5, #12]
   1f244:	f7ed f8ac 	bl	c3a0 <strcmp>
   1f248:	b908      	cbnz	r0, 1f24e <cmd_subscribe+0x6a>
		subscribe_params.value = BT_GATT_CCC_INDICATE;
   1f24a:	2302      	movs	r3, #2
   1f24c:	81a3      	strh	r3, [r4, #12]
	err = bt_gatt_subscribe(default_conn, &subscribe_params);
   1f24e:	490b      	ldr	r1, [pc, #44]	; (1f27c <cmd_subscribe+0x98>)
   1f250:	f8d9 0000 	ldr.w	r0, [r9]
   1f254:	f7fe fb5a 	bl	1d90c <bt_gatt_subscribe>
	if (err) {
   1f258:	4605      	mov	r5, r0
   1f25a:	b140      	cbz	r0, 1f26e <cmd_subscribe+0x8a>
		subscribe_params.value_handle = 0U;
   1f25c:	2300      	movs	r3, #0
   1f25e:	8123      	strh	r3, [r4, #8]
		shell_error(sh, "Subscribe failed (err %d)", err);
   1f260:	4a0c      	ldr	r2, [pc, #48]	; (1f294 <cmd_subscribe+0xb0>)
   1f262:	4603      	mov	r3, r0
   1f264:	2101      	movs	r1, #1
   1f266:	4630      	mov	r0, r6
   1f268:	f00a fc88 	bl	29b7c <shell_fprintf>
   1f26c:	e7c9      	b.n	1f202 <cmd_subscribe+0x1e>
		shell_print(sh, "Subscribed");
   1f26e:	4a0a      	ldr	r2, [pc, #40]	; (1f298 <cmd_subscribe+0xb4>)
   1f270:	2108      	movs	r1, #8
   1f272:	4630      	mov	r0, r6
   1f274:	f00a fc82 	bl	29b7c <shell_fprintf>
   1f278:	e7c3      	b.n	1f202 <cmd_subscribe+0x1e>
   1f27a:	bf00      	nop
   1f27c:	20002804 	.word	0x20002804
   1f280:	00032b9b 	.word	0x00032b9b
   1f284:	200027d0 	.word	0x200027d0
   1f288:	000322aa 	.word	0x000322aa
   1f28c:	0001f929 	.word	0x0001f929
   1f290:	00032b6c 	.word	0x00032b6c
   1f294:	00032bd0 	.word	0x00032bd0
   1f298:	00032beb 	.word	0x00032beb

0001f29c <write_without_rsp_cb>:
{
   1f29c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	delta = k_cycle_get_32() - cycle_stamp;
   1f29e:	4e1c      	ldr	r6, [pc, #112]	; (1f310 <write_without_rsp_cb+0x74>)
   1f2a0:	4f1c      	ldr	r7, [pc, #112]	; (1f314 <write_without_rsp_cb+0x78>)
	write_stats.count++;
   1f2a2:	4c1d      	ldr	r4, [pc, #116]	; (1f318 <write_without_rsp_cb+0x7c>)
{
   1f2a4:	460d      	mov	r5, r1
   1f2a6:	f00d f9f9 	bl	2c69c <sys_clock_cycle_get_32>
	delta = k_cycle_get_32() - cycle_stamp;
   1f2aa:	6833      	ldr	r3, [r6, #0]
   1f2ac:	1ac0      	subs	r0, r0, r3
   1f2ae:	fba0 0107 	umull	r0, r1, r0, r7
	write_stats.count++;
   1f2b2:	6823      	ldr	r3, [r4, #0]
   1f2b4:	0bc2      	lsrs	r2, r0, #15
   1f2b6:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
	write_stats.total += len;
   1f2ba:	68a1      	ldr	r1, [r4, #8]
	write_stats.count++;
   1f2bc:	3301      	adds	r3, #1
   1f2be:	6023      	str	r3, [r4, #0]
	if (delta > 1000000000) {
   1f2c0:	42ba      	cmp	r2, r7
	write_stats.total += len;
   1f2c2:	b2ab      	uxth	r3, r5
   1f2c4:	fa11 f585 	uxtah	r5, r1, r5
   1f2c8:	60a5      	str	r5, [r4, #8]
	if (delta > 1000000000) {
   1f2ca:	d912      	bls.n	1f2f2 <write_without_rsp_cb+0x56>
		write_stats.len = 0U;
   1f2cc:	2300      	movs	r3, #0
   1f2ce:	6063      	str	r3, [r4, #4]
		write_stats.rate = 0U;
   1f2d0:	60e3      	str	r3, [r4, #12]
   1f2d2:	f00d f9e3 	bl	2c69c <sys_clock_cycle_get_32>
		cycle_stamp = k_cycle_get_32();
   1f2d6:	6030      	str	r0, [r6, #0]
	shell_print(ctx_shell, "Write #%u: %u bytes (%u bps)",
   1f2d8:	68e3      	ldr	r3, [r4, #12]
   1f2da:	9301      	str	r3, [sp, #4]
   1f2dc:	480f      	ldr	r0, [pc, #60]	; (1f31c <write_without_rsp_cb+0x80>)
   1f2de:	68a3      	ldr	r3, [r4, #8]
   1f2e0:	9300      	str	r3, [sp, #0]
   1f2e2:	4a0f      	ldr	r2, [pc, #60]	; (1f320 <write_without_rsp_cb+0x84>)
   1f2e4:	6823      	ldr	r3, [r4, #0]
   1f2e6:	6800      	ldr	r0, [r0, #0]
   1f2e8:	2108      	movs	r1, #8
   1f2ea:	f00a fc47 	bl	29b7c <shell_fprintf>
}
   1f2ee:	b003      	add	sp, #12
   1f2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		write_stats.len += len;
   1f2f2:	6861      	ldr	r1, [r4, #4]
		write_stats.rate = ((uint64_t)write_stats.len << 3) *
   1f2f4:	480b      	ldr	r0, [pc, #44]	; (1f324 <write_without_rsp_cb+0x88>)
		write_stats.len += len;
   1f2f6:	440b      	add	r3, r1
		write_stats.rate = ((uint64_t)write_stats.len << 3) *
   1f2f8:	fba3 0100 	umull	r0, r1, r3, r0
			1000000000U / delta;
   1f2fc:	2a01      	cmp	r2, #1
		write_stats.len += len;
   1f2fe:	6063      	str	r3, [r4, #4]
		write_stats.rate = ((uint64_t)write_stats.len << 3) *
   1f300:	4419      	add	r1, r3
			1000000000U / delta;
   1f302:	bf38      	it	cc
   1f304:	2201      	movcc	r2, #1
   1f306:	2300      	movs	r3, #0
   1f308:	f7e0 ff9a 	bl	240 <__aeabi_uldivmod>
		write_stats.rate = ((uint64_t)write_stats.len << 3) *
   1f30c:	60e0      	str	r0, [r4, #12]
   1f30e:	e7e3      	b.n	1f2d8 <write_without_rsp_cb+0x3c>
   1f310:	200027d8 	.word	0x200027d8
   1f314:	3b9aca00 	.word	0x3b9aca00
   1f318:	2000282c 	.word	0x2000282c
   1f31c:	200027cc 	.word	0x200027cc
   1f320:	00032bf7 	.word	0x00032bf7
   1f324:	dcd65000 	.word	0xdcd65000

0001f328 <cmd_write_without_rsp>:
{
   1f328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!default_conn) {
   1f32c:	4e3f      	ldr	r6, [pc, #252]	; (1f42c <cmd_write_without_rsp+0x104>)
   1f32e:	6833      	ldr	r3, [r6, #0]
{
   1f330:	b087      	sub	sp, #28
   1f332:	4607      	mov	r7, r0
   1f334:	468b      	mov	fp, r1
   1f336:	4614      	mov	r4, r2
   1f338:	46b2      	mov	sl, r6
	if (!default_conn) {
   1f33a:	b94b      	cbnz	r3, 1f350 <cmd_write_without_rsp+0x28>
		shell_error(sh, "Not connected");
   1f33c:	4a3c      	ldr	r2, [pc, #240]	; (1f430 <cmd_write_without_rsp+0x108>)
   1f33e:	2101      	movs	r1, #1
   1f340:	f00a fc1c 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1f344:	f06f 0b07 	mvn.w	fp, #7
}
   1f348:	4658      	mov	r0, fp
   1f34a:	b007      	add	sp, #28
   1f34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	sign = !strcmp(argv[0], "signed-write");
   1f350:	4938      	ldr	r1, [pc, #224]	; (1f434 <cmd_write_without_rsp+0x10c>)
   1f352:	6810      	ldr	r0, [r2, #0]
   1f354:	f7ed f824 	bl	c3a0 <strcmp>
   1f358:	2800      	cmp	r0, #0
   1f35a:	bf0c      	ite	eq
   1f35c:	2301      	moveq	r3, #1
   1f35e:	2300      	movne	r3, #0
   1f360:	9305      	str	r3, [sp, #20]
	if (!sign) {
   1f362:	d14b      	bne.n	1f3fc <cmd_write_without_rsp+0xd4>
	bt_gatt_complete_func_t func = NULL;
   1f364:	f04f 0900 	mov.w	r9, #0
	handle = strtoul(argv[1], NULL, 16);
   1f368:	2210      	movs	r2, #16
   1f36a:	2100      	movs	r1, #0
   1f36c:	6860      	ldr	r0, [r4, #4]
	gatt_write_buf[0] = strtoul(argv[2], NULL, 16);
   1f36e:	4d32      	ldr	r5, [pc, #200]	; (1f438 <cmd_write_without_rsp+0x110>)
	handle = strtoul(argv[1], NULL, 16);
   1f370:	f009 f924 	bl	285bc <strtoul>
	gatt_write_buf[0] = strtoul(argv[2], NULL, 16);
   1f374:	2210      	movs	r2, #16
	handle = strtoul(argv[1], NULL, 16);
   1f376:	fa1f f880 	uxth.w	r8, r0
	gatt_write_buf[0] = strtoul(argv[2], NULL, 16);
   1f37a:	2100      	movs	r1, #0
   1f37c:	68a0      	ldr	r0, [r4, #8]
   1f37e:	f009 f91d 	bl	285bc <strtoul>
	if (argc > 3) {
   1f382:	f1bb 0f03 	cmp.w	fp, #3
	gatt_write_buf[0] = strtoul(argv[2], NULL, 16);
   1f386:	7028      	strb	r0, [r5, #0]
	if (argc > 3) {
   1f388:	d94c      	bls.n	1f424 <cmd_write_without_rsp+0xfc>
		len = MIN(strtoul(argv[3], NULL, 16), sizeof(gatt_write_buf));
   1f38a:	68e0      	ldr	r0, [r4, #12]
   1f38c:	2210      	movs	r2, #16
   1f38e:	2100      	movs	r1, #0
   1f390:	f009 f914 	bl	285bc <strtoul>
   1f394:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
   1f398:	d23e      	bcs.n	1f418 <cmd_write_without_rsp+0xf0>
   1f39a:	68e0      	ldr	r0, [r4, #12]
   1f39c:	2210      	movs	r2, #16
   1f39e:	2100      	movs	r1, #0
   1f3a0:	f009 f90c 	bl	285bc <strtoul>
   1f3a4:	b286      	uxth	r6, r0
			gatt_write_buf[i] = gatt_write_buf[0];
   1f3a6:	7829      	ldrb	r1, [r5, #0]
		for (i = 1; i < len; i++) {
   1f3a8:	2201      	movs	r2, #1
   1f3aa:	4296      	cmp	r6, r2
   1f3ac:	dc37      	bgt.n	1f41e <cmd_write_without_rsp+0xf6>
	if (argc > 4) {
   1f3ae:	f1bb 0f04 	cmp.w	fp, #4
   1f3b2:	d038      	beq.n	1f426 <cmd_write_without_rsp+0xfe>
		repeat = strtoul(argv[4], NULL, 16);
   1f3b4:	6920      	ldr	r0, [r4, #16]
   1f3b6:	2210      	movs	r2, #16
   1f3b8:	2100      	movs	r1, #0
   1f3ba:	f009 f8ff 	bl	285bc <strtoul>
	if (!repeat) {
   1f3be:	b284      	uxth	r4, r0
   1f3c0:	2c01      	cmp	r4, #1
   1f3c2:	bf38      	it	cc
   1f3c4:	2401      	movcc	r4, #1
		err = bt_gatt_write_without_response_cb(default_conn, handle,
   1f3c6:	4d1c      	ldr	r5, [pc, #112]	; (1f438 <cmd_write_without_rsp+0x110>)
   1f3c8:	9b05      	ldr	r3, [sp, #20]
   1f3ca:	9300      	str	r3, [sp, #0]
   1f3cc:	e9cd 9601 	strd	r9, r6, [sp, #4]
   1f3d0:	4633      	mov	r3, r6
   1f3d2:	f8da 0000 	ldr.w	r0, [sl]
   1f3d6:	462a      	mov	r2, r5
   1f3d8:	4641      	mov	r1, r8
   1f3da:	f7fe f937 	bl	1d64c <bt_gatt_write_without_response_cb>
		if (err) {
   1f3de:	3c01      	subs	r4, #1
   1f3e0:	b2a4      	uxth	r4, r4
   1f3e2:	4683      	mov	fp, r0
   1f3e4:	b918      	cbnz	r0, 1f3ee <cmd_write_without_rsp+0xc6>
	z_impl_k_yield();
   1f3e6:	f007 f9e3 	bl	267b0 <z_impl_k_yield>
	while (repeat--) {
   1f3ea:	2c00      	cmp	r4, #0
   1f3ec:	d1ec      	bne.n	1f3c8 <cmd_write_without_rsp+0xa0>
	shell_print(sh, "Write Complete (err %d)", err);
   1f3ee:	4a13      	ldr	r2, [pc, #76]	; (1f43c <cmd_write_without_rsp+0x114>)
   1f3f0:	465b      	mov	r3, fp
   1f3f2:	2108      	movs	r1, #8
   1f3f4:	4638      	mov	r0, r7
   1f3f6:	f00a fbc1 	bl	29b7c <shell_fprintf>
	return err;
   1f3fa:	e7a5      	b.n	1f348 <cmd_write_without_rsp+0x20>
		if (!strcmp(argv[0], "write-without-response-cb")) {
   1f3fc:	4910      	ldr	r1, [pc, #64]	; (1f440 <cmd_write_without_rsp+0x118>)
   1f3fe:	6820      	ldr	r0, [r4, #0]
   1f400:	f7ec ffce 	bl	c3a0 <strcmp>
   1f404:	4601      	mov	r1, r0
   1f406:	2800      	cmp	r0, #0
   1f408:	d1ac      	bne.n	1f364 <cmd_write_without_rsp+0x3c>
	memset(&write_stats, 0, sizeof(write_stats));
   1f40a:	480e      	ldr	r0, [pc, #56]	; (1f444 <cmd_write_without_rsp+0x11c>)
			func = write_without_rsp_cb;
   1f40c:	f8df 9038 	ldr.w	r9, [pc, #56]	; 1f448 <cmd_write_without_rsp+0x120>
	memset(&write_stats, 0, sizeof(write_stats));
   1f410:	2210      	movs	r2, #16
   1f412:	f00d fc18 	bl	2cc46 <memset>
}
   1f416:	e7a7      	b.n	1f368 <cmd_write_without_rsp+0x40>
		len = MIN(strtoul(argv[3], NULL, 16), sizeof(gatt_write_buf));
   1f418:	f44f 7600 	mov.w	r6, #512	; 0x200
   1f41c:	e7c3      	b.n	1f3a6 <cmd_write_without_rsp+0x7e>
			gatt_write_buf[i] = gatt_write_buf[0];
   1f41e:	54a9      	strb	r1, [r5, r2]
		for (i = 1; i < len; i++) {
   1f420:	3201      	adds	r2, #1
   1f422:	e7c2      	b.n	1f3aa <cmd_write_without_rsp+0x82>
	len = 1U;
   1f424:	2601      	movs	r6, #1
		repeat = 1U;
   1f426:	2401      	movs	r4, #1
   1f428:	e7cd      	b.n	1f3c6 <cmd_write_without_rsp+0x9e>
   1f42a:	bf00      	nop
   1f42c:	200027d0 	.word	0x200027d0
   1f430:	000322aa 	.word	0x000322aa
   1f434:	00032c15 	.word	0x00032c15
   1f438:	20002b81 	.word	0x20002b81
   1f43c:	00032c3c 	.word	0x00032c3c
   1f440:	00032c22 	.word	0x00032c22
   1f444:	2000282c 	.word	0x2000282c
   1f448:	0001f29d 	.word	0x0001f29d

0001f44c <cmd_mread>:
{
   1f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!default_conn) {
   1f450:	4e23      	ldr	r6, [pc, #140]	; (1f4e0 <cmd_mread+0x94>)
   1f452:	6833      	ldr	r3, [r6, #0]
{
   1f454:	b085      	sub	sp, #20
   1f456:	4607      	mov	r7, r0
	if (!default_conn) {
   1f458:	b94b      	cbnz	r3, 1f46e <cmd_mread+0x22>
		shell_error(sh, "Not connected");
   1f45a:	4a22      	ldr	r2, [pc, #136]	; (1f4e4 <cmd_mread+0x98>)
   1f45c:	2101      	movs	r1, #1
		shell_print(sh, "Read ongoing");
   1f45e:	f00a fb8d 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1f462:	f06f 0407 	mvn.w	r4, #7
}
   1f466:	4620      	mov	r0, r4
   1f468:	b005      	add	sp, #20
   1f46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (read_params.func) {
   1f46e:	4c1e      	ldr	r4, [pc, #120]	; (1f4e8 <cmd_mread+0x9c>)
   1f470:	6823      	ldr	r3, [r4, #0]
   1f472:	b113      	cbz	r3, 1f47a <cmd_mread+0x2e>
		shell_print(sh, "Read ongoing");
   1f474:	4a1d      	ldr	r2, [pc, #116]	; (1f4ec <cmd_mread+0xa0>)
   1f476:	2108      	movs	r1, #8
   1f478:	e7f1      	b.n	1f45e <cmd_mread+0x12>
	if ((argc - 1) >  ARRAY_SIZE(h)) {
   1f47a:	f101 3aff 	add.w	sl, r1, #4294967295
   1f47e:	f1ba 0f08 	cmp.w	sl, #8
   1f482:	d81c      	bhi.n	1f4be <cmd_mread+0x72>
   1f484:	46e9      	mov	r9, sp
   1f486:	f102 0804 	add.w	r8, r2, #4
   1f48a:	eb02 0581 	add.w	r5, r2, r1, lsl #2
   1f48e:	46cb      	mov	fp, r9
	for (i = 0; i < argc - 1; i++) {
   1f490:	45a8      	cmp	r8, r5
   1f492:	d11c      	bne.n	1f4ce <cmd_mread+0x82>
	read_params.func = read_func;
   1f494:	4b16      	ldr	r3, [pc, #88]	; (1f4f0 <cmd_mread+0xa4>)
	err = bt_gatt_read(default_conn, &read_params);
   1f496:	4914      	ldr	r1, [pc, #80]	; (1f4e8 <cmd_mread+0x9c>)
   1f498:	6830      	ldr	r0, [r6, #0]
	read_params.multiple.handles = h;
   1f49a:	f8c4 b008 	str.w	fp, [r4, #8]
	read_params.multiple.variable = true;
   1f49e:	2501      	movs	r5, #1
	read_params.handle_count = i;
   1f4a0:	e9c4 3a00 	strd	r3, sl, [r4]
	read_params.multiple.variable = true;
   1f4a4:	7325      	strb	r5, [r4, #12]
	err = bt_gatt_read(default_conn, &read_params);
   1f4a6:	f7fd ffd9 	bl	1d45c <bt_gatt_read>
	if (err) {
   1f4aa:	4604      	mov	r4, r0
   1f4ac:	2800      	cmp	r0, #0
   1f4ae:	d0da      	beq.n	1f466 <cmd_mread+0x1a>
		shell_error(sh, "GATT multiple read request failed (err %d)",
   1f4b0:	4603      	mov	r3, r0
   1f4b2:	4a10      	ldr	r2, [pc, #64]	; (1f4f4 <cmd_mread+0xa8>)
   1f4b4:	4629      	mov	r1, r5
   1f4b6:	4638      	mov	r0, r7
   1f4b8:	f00a fb60 	bl	29b7c <shell_fprintf>
   1f4bc:	e7d3      	b.n	1f466 <cmd_mread+0x1a>
		shell_print(sh, "Enter max %lu handle items to read",
   1f4be:	2308      	movs	r3, #8
   1f4c0:	4a0d      	ldr	r2, [pc, #52]	; (1f4f8 <cmd_mread+0xac>)
   1f4c2:	4619      	mov	r1, r3
   1f4c4:	f00a fb5a 	bl	29b7c <shell_fprintf>
		return -EINVAL;
   1f4c8:	f06f 0415 	mvn.w	r4, #21
   1f4cc:	e7cb      	b.n	1f466 <cmd_mread+0x1a>
		h[i] = strtoul(argv[i + 1], NULL, 16);
   1f4ce:	f858 0b04 	ldr.w	r0, [r8], #4
   1f4d2:	2210      	movs	r2, #16
   1f4d4:	2100      	movs	r1, #0
   1f4d6:	f009 f871 	bl	285bc <strtoul>
   1f4da:	f829 0b02 	strh.w	r0, [r9], #2
	for (i = 0; i < argc - 1; i++) {
   1f4de:	e7d7      	b.n	1f490 <cmd_mread+0x44>
   1f4e0:	200027d0 	.word	0x200027d0
   1f4e4:	000322aa 	.word	0x000322aa
   1f4e8:	200027f4 	.word	0x200027f4
   1f4ec:	00032c55 	.word	0x00032c55
   1f4f0:	0001fb29 	.word	0x0001fb29
   1f4f4:	00032c87 	.word	0x00032c87
   1f4f8:	00032c63 	.word	0x00032c63

0001f4fc <cmd_read_uuid>:
	if (!default_conn) {
   1f4fc:	4b25      	ldr	r3, [pc, #148]	; (1f594 <cmd_read_uuid+0x98>)
{
   1f4fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f502:	4615      	mov	r5, r2
	if (!default_conn) {
   1f504:	681a      	ldr	r2, [r3, #0]
{
   1f506:	4607      	mov	r7, r0
   1f508:	460e      	mov	r6, r1
   1f50a:	4698      	mov	r8, r3
	if (!default_conn) {
   1f50c:	b942      	cbnz	r2, 1f520 <cmd_read_uuid+0x24>
		shell_error(sh, "Not connected");
   1f50e:	4a22      	ldr	r2, [pc, #136]	; (1f598 <cmd_read_uuid+0x9c>)
   1f510:	2101      	movs	r1, #1
		shell_print(sh, "Read ongoing");
   1f512:	f00a fb33 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1f516:	f06f 0407 	mvn.w	r4, #7
}
   1f51a:	4620      	mov	r0, r4
   1f51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (read_params.func) {
   1f520:	4c1e      	ldr	r4, [pc, #120]	; (1f59c <cmd_read_uuid+0xa0>)
   1f522:	6821      	ldr	r1, [r4, #0]
   1f524:	b111      	cbz	r1, 1f52c <cmd_read_uuid+0x30>
		shell_print(sh, "Read ongoing");
   1f526:	4a1e      	ldr	r2, [pc, #120]	; (1f5a0 <cmd_read_uuid+0xa4>)
   1f528:	2108      	movs	r1, #8
   1f52a:	e7f2      	b.n	1f512 <cmd_read_uuid+0x16>
	read_params.func = read_func;
   1f52c:	4b1d      	ldr	r3, [pc, #116]	; (1f5a4 <cmd_read_uuid+0xa8>)
	if (argc > 1) {
   1f52e:	2e01      	cmp	r6, #1
	read_params.handle_count = 0;
   1f530:	e9c4 3100 	strd	r3, r1, [r4]
	read_params.by_uuid.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
   1f534:	4b1c      	ldr	r3, [pc, #112]	; (1f5a8 <cmd_read_uuid+0xac>)
   1f536:	60a3      	str	r3, [r4, #8]
	if (argc > 1) {
   1f538:	d918      	bls.n	1f56c <cmd_read_uuid+0x70>
		uuid.val = strtoul(argv[1], NULL, 16);
   1f53a:	6868      	ldr	r0, [r5, #4]
   1f53c:	2210      	movs	r2, #16
   1f53e:	f009 f83d 	bl	285bc <strtoul>
   1f542:	4b1a      	ldr	r3, [pc, #104]	; (1f5ac <cmd_read_uuid+0xb0>)
   1f544:	b280      	uxth	r0, r0
   1f546:	8058      	strh	r0, [r3, #2]
		if (uuid.val) {
   1f548:	b100      	cbz	r0, 1f54c <cmd_read_uuid+0x50>
			read_params.by_uuid.uuid = &uuid.uuid;
   1f54a:	60e3      	str	r3, [r4, #12]
	if (argc > 2) {
   1f54c:	2e02      	cmp	r6, #2
   1f54e:	d00d      	beq.n	1f56c <cmd_read_uuid+0x70>
		read_params.by_uuid.start_handle = strtoul(argv[2], NULL, 16);
   1f550:	68a8      	ldr	r0, [r5, #8]
   1f552:	2210      	movs	r2, #16
   1f554:	2100      	movs	r1, #0
   1f556:	f009 f831 	bl	285bc <strtoul>
		if (argc > 3) {
   1f55a:	2e03      	cmp	r6, #3
		read_params.by_uuid.start_handle = strtoul(argv[2], NULL, 16);
   1f55c:	8120      	strh	r0, [r4, #8]
		if (argc > 3) {
   1f55e:	d005      	beq.n	1f56c <cmd_read_uuid+0x70>
			read_params.by_uuid.end_handle = strtoul(argv[3],
   1f560:	68e8      	ldr	r0, [r5, #12]
   1f562:	2210      	movs	r2, #16
   1f564:	2100      	movs	r1, #0
   1f566:	f009 f829 	bl	285bc <strtoul>
   1f56a:	8160      	strh	r0, [r4, #10]
	err = bt_gatt_read(default_conn, &read_params);
   1f56c:	490b      	ldr	r1, [pc, #44]	; (1f59c <cmd_read_uuid+0xa0>)
   1f56e:	f8d8 0000 	ldr.w	r0, [r8]
   1f572:	f7fd ff73 	bl	1d45c <bt_gatt_read>
	if (err) {
   1f576:	4604      	mov	r4, r0
   1f578:	b130      	cbz	r0, 1f588 <cmd_read_uuid+0x8c>
		shell_error(sh, "Read failed (err %d)", err);
   1f57a:	4603      	mov	r3, r0
   1f57c:	4a0c      	ldr	r2, [pc, #48]	; (1f5b0 <cmd_read_uuid+0xb4>)
   1f57e:	2101      	movs	r1, #1
   1f580:	4638      	mov	r0, r7
   1f582:	f00a fafb 	bl	29b7c <shell_fprintf>
   1f586:	e7c8      	b.n	1f51a <cmd_read_uuid+0x1e>
		shell_print(sh, "Read pending");
   1f588:	4a0a      	ldr	r2, [pc, #40]	; (1f5b4 <cmd_read_uuid+0xb8>)
   1f58a:	2108      	movs	r1, #8
   1f58c:	4638      	mov	r0, r7
   1f58e:	f00a faf5 	bl	29b7c <shell_fprintf>
   1f592:	e7c2      	b.n	1f51a <cmd_read_uuid+0x1e>
   1f594:	200027d0 	.word	0x200027d0
   1f598:	000322aa 	.word	0x000322aa
   1f59c:	200027f4 	.word	0x200027f4
   1f5a0:	00032c55 	.word	0x00032c55
   1f5a4:	0001fb29 	.word	0x0001fb29
   1f5a8:	ffff0001 	.word	0xffff0001
   1f5ac:	20002a3c 	.word	0x20002a3c
   1f5b0:	00032cb3 	.word	0x00032cb3
   1f5b4:	00032cc9 	.word	0x00032cc9

0001f5b8 <cmd_read>:
{
   1f5b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (!default_conn) {
   1f5bc:	4b1e      	ldr	r3, [pc, #120]	; (1f638 <__kernel_ram_size+0x60>)
{
   1f5be:	4616      	mov	r6, r2
	if (!default_conn) {
   1f5c0:	681a      	ldr	r2, [r3, #0]
{
   1f5c2:	4605      	mov	r5, r0
   1f5c4:	4688      	mov	r8, r1
   1f5c6:	4699      	mov	r9, r3
	if (!default_conn) {
   1f5c8:	b942      	cbnz	r2, 1f5dc <__kernel_ram_size+0x4>
		shell_error(sh, "Not connected");
   1f5ca:	4a1c      	ldr	r2, [pc, #112]	; (1f63c <__kernel_ram_size+0x64>)
   1f5cc:	2101      	movs	r1, #1
		shell_print(sh, "Read ongoing");
   1f5ce:	f00a fad5 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1f5d2:	f06f 0407 	mvn.w	r4, #7
}
   1f5d6:	4620      	mov	r0, r4
   1f5d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (read_params.func) {
   1f5dc:	4c18      	ldr	r4, [pc, #96]	; (1f640 <__kernel_ram_size+0x68>)
   1f5de:	6827      	ldr	r7, [r4, #0]
   1f5e0:	b117      	cbz	r7, 1f5e8 <__kernel_ram_size+0x10>
		shell_print(sh, "Read ongoing");
   1f5e2:	4a18      	ldr	r2, [pc, #96]	; (1f644 <__kernel_ram_size+0x6c>)
   1f5e4:	2108      	movs	r1, #8
   1f5e6:	e7f2      	b.n	1f5ce <cmd_read+0x16>
	read_params.func = read_func;
   1f5e8:	4b17      	ldr	r3, [pc, #92]	; (1f648 <__kernel_ram_size+0x70>)
   1f5ea:	6023      	str	r3, [r4, #0]
	read_params.single.handle = strtoul(argv[1], NULL, 16);
   1f5ec:	6870      	ldr	r0, [r6, #4]
	read_params.handle_count = 1;
   1f5ee:	2301      	movs	r3, #1
	read_params.single.handle = strtoul(argv[1], NULL, 16);
   1f5f0:	2210      	movs	r2, #16
   1f5f2:	4639      	mov	r1, r7
	read_params.handle_count = 1;
   1f5f4:	6063      	str	r3, [r4, #4]
	read_params.single.handle = strtoul(argv[1], NULL, 16);
   1f5f6:	f008 ffe1 	bl	285bc <strtoul>
	if (argc > 2) {
   1f5fa:	f1b8 0f02 	cmp.w	r8, #2
	read_params.single.handle = strtoul(argv[1], NULL, 16);
   1f5fe:	8120      	strh	r0, [r4, #8]
	read_params.single.offset = 0U;
   1f600:	8167      	strh	r7, [r4, #10]
	if (argc > 2) {
   1f602:	d905      	bls.n	1f610 <__kernel_ram_size+0x38>
		read_params.single.offset = strtoul(argv[2], NULL, 16);
   1f604:	68b0      	ldr	r0, [r6, #8]
   1f606:	2210      	movs	r2, #16
   1f608:	4639      	mov	r1, r7
   1f60a:	f008 ffd7 	bl	285bc <strtoul>
   1f60e:	8160      	strh	r0, [r4, #10]
	err = bt_gatt_read(default_conn, &read_params);
   1f610:	490b      	ldr	r1, [pc, #44]	; (1f640 <__kernel_ram_size+0x68>)
   1f612:	f8d9 0000 	ldr.w	r0, [r9]
   1f616:	f7fd ff21 	bl	1d45c <bt_gatt_read>
	if (err) {
   1f61a:	4604      	mov	r4, r0
   1f61c:	b130      	cbz	r0, 1f62c <__kernel_ram_size+0x54>
		shell_error(sh, "Read failed (err %d)", err);
   1f61e:	4603      	mov	r3, r0
   1f620:	4a0a      	ldr	r2, [pc, #40]	; (1f64c <__kernel_ram_size+0x74>)
   1f622:	2101      	movs	r1, #1
   1f624:	4628      	mov	r0, r5
   1f626:	f00a faa9 	bl	29b7c <shell_fprintf>
   1f62a:	e7d4      	b.n	1f5d6 <cmd_read+0x1e>
		shell_print(sh, "Read pending");
   1f62c:	4a08      	ldr	r2, [pc, #32]	; (1f650 <__kernel_ram_size+0x78>)
   1f62e:	2108      	movs	r1, #8
   1f630:	4628      	mov	r0, r5
   1f632:	f00a faa3 	bl	29b7c <shell_fprintf>
   1f636:	e7ce      	b.n	1f5d6 <cmd_read+0x1e>
   1f638:	200027d0 	.word	0x200027d0
   1f63c:	000322aa 	.word	0x000322aa
   1f640:	200027f4 	.word	0x200027f4
   1f644:	00032c55 	.word	0x00032c55
   1f648:	0001fb29 	.word	0x0001fb29
   1f64c:	00032cb3 	.word	0x00032cb3
   1f650:	00032cc9 	.word	0x00032cc9

0001f654 <discover_func>:
{
   1f654:	b570      	push	{r4, r5, r6, lr}
   1f656:	4d4f      	ldr	r5, [pc, #316]	; (1f794 <discover_func+0x140>)
   1f658:	b08e      	sub	sp, #56	; 0x38
   1f65a:	4616      	mov	r6, r2
	if (!attr) {
   1f65c:	460c      	mov	r4, r1
   1f65e:	b961      	cbnz	r1, 1f67a <discover_func+0x26>
		shell_print(ctx_shell, "Discover complete");
   1f660:	4a4d      	ldr	r2, [pc, #308]	; (1f798 <discover_func+0x144>)
   1f662:	6828      	ldr	r0, [r5, #0]
   1f664:	2108      	movs	r1, #8
   1f666:	f00a fa89 	bl	29b7c <shell_fprintf>
__ssp_bos_icheck3(memset, void *, int)
   1f66a:	2214      	movs	r2, #20
   1f66c:	4621      	mov	r1, r4
   1f66e:	4630      	mov	r0, r6
   1f670:	f00d fae9 	bl	2cc46 <memset>
		return BT_GATT_ITER_STOP;
   1f674:	4620      	mov	r0, r4
}
   1f676:	b00e      	add	sp, #56	; 0x38
   1f678:	bd70      	pop	{r4, r5, r6, pc}
	switch (params->type) {
   1f67a:	7c13      	ldrb	r3, [r2, #16]
   1f67c:	2b02      	cmp	r3, #2
   1f67e:	d075      	beq.n	1f76c <discover_func+0x118>
   1f680:	d90f      	bls.n	1f6a2 <discover_func+0x4e>
   1f682:	2b03      	cmp	r3, #3
   1f684:	d01f      	beq.n	1f6c6 <discover_func+0x72>
		bt_uuid_to_str(attr->uuid, str, sizeof(str));
   1f686:	6820      	ldr	r0, [r4, #0]
   1f688:	a904      	add	r1, sp, #16
   1f68a:	2225      	movs	r2, #37	; 0x25
   1f68c:	f7f7 fc9c 	bl	16fc8 <bt_uuid_to_str>
		shell_print(ctx_shell, "Descriptor %s found: handle %x", str,
   1f690:	8a23      	ldrh	r3, [r4, #16]
   1f692:	9300      	str	r3, [sp, #0]
   1f694:	4a41      	ldr	r2, [pc, #260]	; (1f79c <discover_func+0x148>)
   1f696:	6828      	ldr	r0, [r5, #0]
   1f698:	ab04      	add	r3, sp, #16
   1f69a:	2108      	movs	r1, #8
   1f69c:	f00a fa6e 	bl	29b7c <shell_fprintf>
   1f6a0:	e00f      	b.n	1f6c2 <discover_func+0x6e>
		gatt_service = attr->user_data;
   1f6a2:	68ce      	ldr	r6, [r1, #12]
		bt_uuid_to_str(gatt_service->uuid, str, sizeof(str));
   1f6a4:	2225      	movs	r2, #37	; 0x25
   1f6a6:	6830      	ldr	r0, [r6, #0]
   1f6a8:	a904      	add	r1, sp, #16
   1f6aa:	f7f7 fc8d 	bl	16fc8 <bt_uuid_to_str>
		shell_print(ctx_shell, "Service %s found: start handle %x, "
   1f6ae:	88b3      	ldrh	r3, [r6, #4]
   1f6b0:	9301      	str	r3, [sp, #4]
   1f6b2:	8a23      	ldrh	r3, [r4, #16]
   1f6b4:	9300      	str	r3, [sp, #0]
   1f6b6:	4a3a      	ldr	r2, [pc, #232]	; (1f7a0 <discover_func+0x14c>)
   1f6b8:	6828      	ldr	r0, [r5, #0]
   1f6ba:	ab04      	add	r3, sp, #16
   1f6bc:	2108      	movs	r1, #8
   1f6be:	f00a fa5d 	bl	29b7c <shell_fprintf>
	return BT_GATT_ITER_CONTINUE;
   1f6c2:	2001      	movs	r0, #1
		break;
   1f6c4:	e7d7      	b.n	1f676 <discover_func+0x22>
		gatt_chrc = attr->user_data;
   1f6c6:	68ce      	ldr	r6, [r1, #12]
		bt_uuid_to_str(gatt_chrc->uuid, str, sizeof(str));
   1f6c8:	2225      	movs	r2, #37	; 0x25
   1f6ca:	6830      	ldr	r0, [r6, #0]
   1f6cc:	a904      	add	r1, sp, #16
   1f6ce:	f7f7 fc7b 	bl	16fc8 <bt_uuid_to_str>
		shell_print(ctx_shell, "Characteristic %s found: handle %x",
   1f6d2:	8a23      	ldrh	r3, [r4, #16]
   1f6d4:	9300      	str	r3, [sp, #0]
   1f6d6:	6828      	ldr	r0, [r5, #0]
   1f6d8:	4a32      	ldr	r2, [pc, #200]	; (1f7a4 <discover_func+0x150>)
   1f6da:	ab04      	add	r3, sp, #16
   1f6dc:	2108      	movs	r1, #8
   1f6de:	f00a fa4d 	bl	29b7c <shell_fprintf>
		print_chrc_props(ctx_shell, gatt_chrc->properties);
   1f6e2:	682c      	ldr	r4, [r5, #0]
   1f6e4:	79b5      	ldrb	r5, [r6, #6]
	shell_print(sh, "Properties: ");
   1f6e6:	4a30      	ldr	r2, [pc, #192]	; (1f7a8 <discover_func+0x154>)
   1f6e8:	2108      	movs	r1, #8
   1f6ea:	4620      	mov	r0, r4
   1f6ec:	f00a fa46 	bl	29b7c <shell_fprintf>
	if (properties & BT_GATT_CHRC_BROADCAST) {
   1f6f0:	07e9      	lsls	r1, r5, #31
   1f6f2:	d504      	bpl.n	1f6fe <discover_func+0xaa>
		shell_print(sh, "[bcast]");
   1f6f4:	4a2d      	ldr	r2, [pc, #180]	; (1f7ac <discover_func+0x158>)
   1f6f6:	2108      	movs	r1, #8
   1f6f8:	4620      	mov	r0, r4
   1f6fa:	f00a fa3f 	bl	29b7c <shell_fprintf>
	if (properties & BT_GATT_CHRC_READ) {
   1f6fe:	07aa      	lsls	r2, r5, #30
   1f700:	d504      	bpl.n	1f70c <discover_func+0xb8>
		shell_print(sh, "[read]");
   1f702:	4a2b      	ldr	r2, [pc, #172]	; (1f7b0 <discover_func+0x15c>)
   1f704:	2108      	movs	r1, #8
   1f706:	4620      	mov	r0, r4
   1f708:	f00a fa38 	bl	29b7c <shell_fprintf>
	if (properties & BT_GATT_CHRC_WRITE) {
   1f70c:	072b      	lsls	r3, r5, #28
   1f70e:	d504      	bpl.n	1f71a <discover_func+0xc6>
		shell_print(sh, "[write]");
   1f710:	4a28      	ldr	r2, [pc, #160]	; (1f7b4 <discover_func+0x160>)
   1f712:	2108      	movs	r1, #8
   1f714:	4620      	mov	r0, r4
   1f716:	f00a fa31 	bl	29b7c <shell_fprintf>
	if (properties & BT_GATT_CHRC_WRITE_WITHOUT_RESP) {
   1f71a:	076e      	lsls	r6, r5, #29
   1f71c:	d504      	bpl.n	1f728 <discover_func+0xd4>
		shell_print(sh, "[write w/w rsp]");
   1f71e:	4a26      	ldr	r2, [pc, #152]	; (1f7b8 <discover_func+0x164>)
   1f720:	2108      	movs	r1, #8
   1f722:	4620      	mov	r0, r4
   1f724:	f00a fa2a 	bl	29b7c <shell_fprintf>
	if (properties & BT_GATT_CHRC_NOTIFY) {
   1f728:	06e8      	lsls	r0, r5, #27
   1f72a:	d504      	bpl.n	1f736 <discover_func+0xe2>
		shell_print(sh, "[notify]");
   1f72c:	4a23      	ldr	r2, [pc, #140]	; (1f7bc <discover_func+0x168>)
   1f72e:	2108      	movs	r1, #8
   1f730:	4620      	mov	r0, r4
   1f732:	f00a fa23 	bl	29b7c <shell_fprintf>
	if (properties & BT_GATT_CHRC_INDICATE) {
   1f736:	06a9      	lsls	r1, r5, #26
   1f738:	d504      	bpl.n	1f744 <discover_func+0xf0>
		shell_print(sh, "[indicate]");
   1f73a:	4a21      	ldr	r2, [pc, #132]	; (1f7c0 <discover_func+0x16c>)
   1f73c:	2108      	movs	r1, #8
   1f73e:	4620      	mov	r0, r4
   1f740:	f00a fa1c 	bl	29b7c <shell_fprintf>
	if (properties & BT_GATT_CHRC_AUTH) {
   1f744:	066a      	lsls	r2, r5, #25
   1f746:	d504      	bpl.n	1f752 <discover_func+0xfe>
		shell_print(sh, "[auth]");
   1f748:	4a1e      	ldr	r2, [pc, #120]	; (1f7c4 <discover_func+0x170>)
   1f74a:	2108      	movs	r1, #8
   1f74c:	4620      	mov	r0, r4
   1f74e:	f00a fa15 	bl	29b7c <shell_fprintf>
	if (properties & BT_GATT_CHRC_EXT_PROP) {
   1f752:	062b      	lsls	r3, r5, #24
   1f754:	d504      	bpl.n	1f760 <discover_func+0x10c>
		shell_print(sh, "[ext prop]");
   1f756:	4a1c      	ldr	r2, [pc, #112]	; (1f7c8 <discover_func+0x174>)
   1f758:	2108      	movs	r1, #8
   1f75a:	4620      	mov	r0, r4
   1f75c:	f00a fa0e 	bl	29b7c <shell_fprintf>
	shell_print(sh, "");
   1f760:	4a1a      	ldr	r2, [pc, #104]	; (1f7cc <discover_func+0x178>)
   1f762:	2108      	movs	r1, #8
   1f764:	4620      	mov	r0, r4
   1f766:	f00a fa09 	bl	29b7c <shell_fprintf>
   1f76a:	e7aa      	b.n	1f6c2 <discover_func+0x6e>
		gatt_include = attr->user_data;
   1f76c:	68ce      	ldr	r6, [r1, #12]
		bt_uuid_to_str(gatt_include->uuid, str, sizeof(str));
   1f76e:	2225      	movs	r2, #37	; 0x25
   1f770:	6830      	ldr	r0, [r6, #0]
   1f772:	a904      	add	r1, sp, #16
   1f774:	f7f7 fc28 	bl	16fc8 <bt_uuid_to_str>
		shell_print(ctx_shell, "Include %s found: handle %x, start %x, "
   1f778:	88f3      	ldrh	r3, [r6, #6]
   1f77a:	9302      	str	r3, [sp, #8]
   1f77c:	88b3      	ldrh	r3, [r6, #4]
   1f77e:	9301      	str	r3, [sp, #4]
   1f780:	8a23      	ldrh	r3, [r4, #16]
   1f782:	9300      	str	r3, [sp, #0]
   1f784:	4a12      	ldr	r2, [pc, #72]	; (1f7d0 <discover_func+0x17c>)
   1f786:	6828      	ldr	r0, [r5, #0]
   1f788:	ab04      	add	r3, sp, #16
   1f78a:	2108      	movs	r1, #8
   1f78c:	f00a f9f6 	bl	29b7c <shell_fprintf>
		break;
   1f790:	e797      	b.n	1f6c2 <discover_func+0x6e>
   1f792:	bf00      	nop
   1f794:	200027cc 	.word	0x200027cc
   1f798:	00032cd7 	.word	0x00032cd7
   1f79c:	00032dd2 	.word	0x00032dd2
   1f7a0:	00032cea 	.word	0x00032cea
   1f7a4:	00032d1c 	.word	0x00032d1c
   1f7a8:	00032d40 	.word	0x00032d40
   1f7ac:	00032d4e 	.word	0x00032d4e
   1f7b0:	00032d57 	.word	0x00032d57
   1f7b4:	00032d5f 	.word	0x00032d5f
   1f7b8:	00032d68 	.word	0x00032d68
   1f7bc:	00032d79 	.word	0x00032d79
   1f7c0:	00032d83 	.word	0x00032d83
   1f7c4:	00032d8f 	.word	0x00032d8f
   1f7c8:	00032d97 	.word	0x00032d97
   1f7cc:	0003329a 	.word	0x0003329a
   1f7d0:	00032da3 	.word	0x00032da3

0001f7d4 <cmd_discover>:
	if (!default_conn) {
   1f7d4:	4b39      	ldr	r3, [pc, #228]	; (1f8bc <cmd_discover+0xe8>)
{
   1f7d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f7da:	4615      	mov	r5, r2
	if (!default_conn) {
   1f7dc:	681a      	ldr	r2, [r3, #0]
{
   1f7de:	4607      	mov	r7, r0
   1f7e0:	460e      	mov	r6, r1
   1f7e2:	4698      	mov	r8, r3
	if (!default_conn) {
   1f7e4:	b942      	cbnz	r2, 1f7f8 <cmd_discover+0x24>
		shell_error(sh, "Not connected");
   1f7e6:	4a36      	ldr	r2, [pc, #216]	; (1f8c0 <cmd_discover+0xec>)
   1f7e8:	2101      	movs	r1, #1
		shell_print(sh, "Discover ongoing");
   1f7ea:	f00a f9c7 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1f7ee:	f06f 0407 	mvn.w	r4, #7
}
   1f7f2:	4620      	mov	r0, r4
   1f7f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (discover_params.func) {
   1f7f8:	4c32      	ldr	r4, [pc, #200]	; (1f8c4 <cmd_discover+0xf0>)
   1f7fa:	6861      	ldr	r1, [r4, #4]
   1f7fc:	b111      	cbz	r1, 1f804 <cmd_discover+0x30>
		shell_print(sh, "Discover ongoing");
   1f7fe:	4a32      	ldr	r2, [pc, #200]	; (1f8c8 <cmd_discover+0xf4>)
   1f800:	2108      	movs	r1, #8
   1f802:	e7f2      	b.n	1f7ea <cmd_discover+0x16>
	discover_params.func = discover_func;
   1f804:	4b31      	ldr	r3, [pc, #196]	; (1f8cc <cmd_discover+0xf8>)
   1f806:	6063      	str	r3, [r4, #4]
	discover_params.start_handle = BT_ATT_FIRST_ATTRIBUTE_HANDLE;
   1f808:	2301      	movs	r3, #1
   1f80a:	8123      	strh	r3, [r4, #8]
	if (argc > 1) {
   1f80c:	2e01      	cmp	r6, #1
	discover_params.end_handle = BT_ATT_LAST_ATTRIBUTE_HANDLE;
   1f80e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f812:	81e3      	strh	r3, [r4, #14]
	if (argc > 1) {
   1f814:	d918      	bls.n	1f848 <cmd_discover+0x74>
		uuid.val = strtoul(argv[1], NULL, 16);
   1f816:	6868      	ldr	r0, [r5, #4]
   1f818:	2210      	movs	r2, #16
   1f81a:	f008 fecf 	bl	285bc <strtoul>
   1f81e:	4b2c      	ldr	r3, [pc, #176]	; (1f8d0 <cmd_discover+0xfc>)
   1f820:	b280      	uxth	r0, r0
   1f822:	8058      	strh	r0, [r3, #2]
		if (uuid.val) {
   1f824:	b100      	cbz	r0, 1f828 <cmd_discover+0x54>
			discover_params.uuid = &uuid.uuid;
   1f826:	6023      	str	r3, [r4, #0]
	if (argc > 2) {
   1f828:	2e02      	cmp	r6, #2
   1f82a:	d00d      	beq.n	1f848 <cmd_discover+0x74>
		discover_params.start_handle = strtoul(argv[2], NULL, 16);
   1f82c:	68a8      	ldr	r0, [r5, #8]
   1f82e:	2210      	movs	r2, #16
   1f830:	2100      	movs	r1, #0
   1f832:	f008 fec3 	bl	285bc <strtoul>
		if (argc > 3) {
   1f836:	2e03      	cmp	r6, #3
		discover_params.start_handle = strtoul(argv[2], NULL, 16);
   1f838:	8120      	strh	r0, [r4, #8]
		if (argc > 3) {
   1f83a:	d005      	beq.n	1f848 <cmd_discover+0x74>
			discover_params.end_handle = strtoul(argv[3], NULL, 16);
   1f83c:	68e8      	ldr	r0, [r5, #12]
   1f83e:	2210      	movs	r2, #16
   1f840:	2100      	movs	r1, #0
   1f842:	f008 febb 	bl	285bc <strtoul>
   1f846:	81e0      	strh	r0, [r4, #14]
	if (!strcmp(argv[0], "discover")) {
   1f848:	4922      	ldr	r1, [pc, #136]	; (1f8d4 <cmd_discover+0x100>)
   1f84a:	6828      	ldr	r0, [r5, #0]
   1f84c:	f7ec fda8 	bl	c3a0 <strcmp>
   1f850:	b978      	cbnz	r0, 1f872 <cmd_discover+0x9e>
		discover_params.type = BT_GATT_DISCOVER_ATTRIBUTE;
   1f852:	2305      	movs	r3, #5
	err = bt_gatt_discover(default_conn, &discover_params);
   1f854:	491b      	ldr	r1, [pc, #108]	; (1f8c4 <cmd_discover+0xf0>)
   1f856:	f8d8 0000 	ldr.w	r0, [r8]
		discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   1f85a:	7423      	strb	r3, [r4, #16]
	err = bt_gatt_discover(default_conn, &discover_params);
   1f85c:	f7fd f9c0 	bl	1cbe0 <bt_gatt_discover>
	if (err) {
   1f860:	4604      	mov	r4, r0
   1f862:	b320      	cbz	r0, 1f8ae <cmd_discover+0xda>
		shell_error(sh, "Discover failed (err %d)", err);
   1f864:	4603      	mov	r3, r0
   1f866:	4a1c      	ldr	r2, [pc, #112]	; (1f8d8 <cmd_discover+0x104>)
   1f868:	2101      	movs	r1, #1
   1f86a:	4638      	mov	r0, r7
   1f86c:	f00a f986 	bl	29b7c <shell_fprintf>
   1f870:	e7bf      	b.n	1f7f2 <cmd_discover+0x1e>
	} else if (!strcmp(argv[0], "discover-secondary")) {
   1f872:	491a      	ldr	r1, [pc, #104]	; (1f8dc <cmd_discover+0x108>)
   1f874:	6828      	ldr	r0, [r5, #0]
   1f876:	f7ec fd93 	bl	c3a0 <strcmp>
   1f87a:	b908      	cbnz	r0, 1f880 <cmd_discover+0xac>
		discover_params.type = BT_GATT_DISCOVER_SECONDARY;
   1f87c:	2301      	movs	r3, #1
   1f87e:	e7e9      	b.n	1f854 <cmd_discover+0x80>
	} else if (!strcmp(argv[0], "discover-include")) {
   1f880:	4917      	ldr	r1, [pc, #92]	; (1f8e0 <cmd_discover+0x10c>)
   1f882:	6828      	ldr	r0, [r5, #0]
   1f884:	f7ec fd8c 	bl	c3a0 <strcmp>
   1f888:	b908      	cbnz	r0, 1f88e <cmd_discover+0xba>
		discover_params.type = BT_GATT_DISCOVER_INCLUDE;
   1f88a:	2302      	movs	r3, #2
   1f88c:	e7e2      	b.n	1f854 <cmd_discover+0x80>
	} else if (!strcmp(argv[0], "discover-characteristic")) {
   1f88e:	4915      	ldr	r1, [pc, #84]	; (1f8e4 <cmd_discover+0x110>)
   1f890:	6828      	ldr	r0, [r5, #0]
   1f892:	f7ec fd85 	bl	c3a0 <strcmp>
   1f896:	b908      	cbnz	r0, 1f89c <cmd_discover+0xc8>
		discover_params.type = BT_GATT_DISCOVER_CHARACTERISTIC;
   1f898:	2303      	movs	r3, #3
   1f89a:	e7db      	b.n	1f854 <cmd_discover+0x80>
	} else if (!strcmp(argv[0], "discover-descriptor")) {
   1f89c:	4912      	ldr	r1, [pc, #72]	; (1f8e8 <cmd_discover+0x114>)
   1f89e:	6828      	ldr	r0, [r5, #0]
   1f8a0:	f7ec fd7e 	bl	c3a0 <strcmp>
   1f8a4:	b908      	cbnz	r0, 1f8aa <cmd_discover+0xd6>
		discover_params.type = BT_GATT_DISCOVER_DESCRIPTOR;
   1f8a6:	2304      	movs	r3, #4
   1f8a8:	e7d4      	b.n	1f854 <cmd_discover+0x80>
		discover_params.type = BT_GATT_DISCOVER_PRIMARY;
   1f8aa:	2300      	movs	r3, #0
   1f8ac:	e7d2      	b.n	1f854 <cmd_discover+0x80>
		shell_print(sh, "Discover pending");
   1f8ae:	4a0f      	ldr	r2, [pc, #60]	; (1f8ec <cmd_discover+0x118>)
   1f8b0:	2108      	movs	r1, #8
   1f8b2:	4638      	mov	r0, r7
   1f8b4:	f00a f962 	bl	29b7c <shell_fprintf>
   1f8b8:	e79b      	b.n	1f7f2 <cmd_discover+0x1e>
   1f8ba:	bf00      	nop
   1f8bc:	200027d0 	.word	0x200027d0
   1f8c0:	000322aa 	.word	0x000322aa
   1f8c4:	200027dc 	.word	0x200027dc
   1f8c8:	00032df2 	.word	0x00032df2
   1f8cc:	0001f655 	.word	0x0001f655
   1f8d0:	20002a3c 	.word	0x20002a3c
   1f8d4:	00032e04 	.word	0x00032e04
   1f8d8:	00032e5d 	.word	0x00032e5d
   1f8dc:	00032e0d 	.word	0x00032e0d
   1f8e0:	00032e20 	.word	0x00032e20
   1f8e4:	00032e31 	.word	0x00032e31
   1f8e8:	00032e49 	.word	0x00032e49
   1f8ec:	00032e77 	.word	0x00032e77

0001f8f0 <cmd_att_mtu>:

int cmd_att_mtu(const struct shell *sh, size_t argc, char *argv[])
{
	uint16_t mtu;

	if (default_conn) {
   1f8f0:	4b0a      	ldr	r3, [pc, #40]	; (1f91c <cmd_att_mtu+0x2c>)
   1f8f2:	681b      	ldr	r3, [r3, #0]
{
   1f8f4:	b510      	push	{r4, lr}
   1f8f6:	4604      	mov	r4, r0
	if (default_conn) {
   1f8f8:	b153      	cbz	r3, 1f910 <cmd_att_mtu+0x20>
		mtu = bt_gatt_get_mtu(default_conn);
   1f8fa:	4618      	mov	r0, r3
   1f8fc:	f00c fa44 	bl	2bd88 <bt_gatt_get_mtu>
		shell_print(sh, "MTU size: %u", mtu);
   1f900:	4a07      	ldr	r2, [pc, #28]	; (1f920 <cmd_att_mtu+0x30>)
		mtu = bt_gatt_get_mtu(default_conn);
   1f902:	4603      	mov	r3, r0
		shell_print(sh, "MTU size: %u", mtu);
   1f904:	2108      	movs	r1, #8
   1f906:	4620      	mov	r0, r4
   1f908:	f00a f938 	bl	29b7c <shell_fprintf>
	} else {
		shell_print(sh, "No default connection");
	}

	return 0;
}
   1f90c:	2000      	movs	r0, #0
   1f90e:	bd10      	pop	{r4, pc}
		shell_print(sh, "No default connection");
   1f910:	4a04      	ldr	r2, [pc, #16]	; (1f924 <cmd_att_mtu+0x34>)
   1f912:	2108      	movs	r1, #8
   1f914:	f00a f932 	bl	29b7c <shell_fprintf>
   1f918:	e7f8      	b.n	1f90c <cmd_att_mtu+0x1c>
   1f91a:	bf00      	nop
   1f91c:	200027d0 	.word	0x200027d0
   1f920:	00032e89 	.word	0x00032e89
   1f924:	00032e97 	.word	0x00032e97

0001f928 <notify_func>:
{
   1f928:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f92a:	460d      	mov	r5, r1
   1f92c:	4909      	ldr	r1, [pc, #36]	; (1f954 <notify_func+0x2c>)
	if (!data) {
   1f92e:	4614      	mov	r4, r2
   1f930:	6808      	ldr	r0, [r1, #0]
   1f932:	b93a      	cbnz	r2, 1f944 <notify_func+0x1c>
		shell_print(ctx_shell, "Unsubscribed");
   1f934:	4a08      	ldr	r2, [pc, #32]	; (1f958 <notify_func+0x30>)
   1f936:	2108      	movs	r1, #8
   1f938:	f00a f920 	bl	29b7c <shell_fprintf>
		params->value_handle = 0U;
   1f93c:	812c      	strh	r4, [r5, #8]
   1f93e:	4620      	mov	r0, r4
}
   1f940:	b003      	add	sp, #12
   1f942:	bd30      	pop	{r4, r5, pc}
	shell_print(ctx_shell, "Notification: data %p length %u", data, length);
   1f944:	9300      	str	r3, [sp, #0]
   1f946:	2108      	movs	r1, #8
   1f948:	4613      	mov	r3, r2
   1f94a:	4a04      	ldr	r2, [pc, #16]	; (1f95c <notify_func+0x34>)
   1f94c:	f00a f916 	bl	29b7c <shell_fprintf>
	return BT_GATT_ITER_CONTINUE;
   1f950:	2001      	movs	r0, #1
   1f952:	e7f5      	b.n	1f940 <notify_func+0x18>
   1f954:	200027cc 	.word	0x200027cc
   1f958:	00032eae 	.word	0x00032eae
   1f95c:	00032ebc 	.word	0x00032ebc

0001f960 <cmd_gatt>:
	SHELL_SUBCMD_SET_END
);

static int cmd_gatt(const struct shell *sh, size_t argc, char **argv)
{
	if (argc == 1) {
   1f960:	2901      	cmp	r1, #1
{
   1f962:	b513      	push	{r0, r1, r4, lr}
   1f964:	460c      	mov	r4, r1
	if (argc == 1) {
   1f966:	d104      	bne.n	1f972 <cmd_gatt+0x12>
		shell_help(sh);
   1f968:	f00a f92d 	bl	29bc6 <shell_help>
		/* shell returns 1 when help is printed */
		return 1;
   1f96c:	4620      	mov	r0, r4
	}

	shell_error(sh, "%s unknown parameter: %s", argv[0], argv[1]);

	return -EINVAL;
}
   1f96e:	b002      	add	sp, #8
   1f970:	bd10      	pop	{r4, pc}
	shell_error(sh, "%s unknown parameter: %s", argv[0], argv[1]);
   1f972:	6853      	ldr	r3, [r2, #4]
   1f974:	9300      	str	r3, [sp, #0]
   1f976:	6813      	ldr	r3, [r2, #0]
   1f978:	4a03      	ldr	r2, [pc, #12]	; (1f988 <cmd_gatt+0x28>)
   1f97a:	2101      	movs	r1, #1
   1f97c:	f00a f8fe 	bl	29b7c <shell_fprintf>
   1f980:	f06f 0015 	mvn.w	r0, #21
   1f984:	e7f3      	b.n	1f96e <cmd_gatt+0xe>
   1f986:	bf00      	nop
   1f988:	0003252e 	.word	0x0003252e

0001f98c <set_cb>:
{
   1f98c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (!attr->write) {
   1f990:	6883      	ldr	r3, [r0, #8]
{
   1f992:	b0c3      	sub	sp, #268	; 0x10c
   1f994:	4607      	mov	r7, r0
   1f996:	4615      	mov	r5, r2
	if (!attr->write) {
   1f998:	bb63      	cbnz	r3, 1f9f4 <set_cb+0x68>
		shell_error(data->sh, "Write not supported");
   1f99a:	4a18      	ldr	r2, [pc, #96]	; (1f9fc <set_cb+0x70>)
   1f99c:	6828      	ldr	r0, [r5, #0]
   1f99e:	2101      	movs	r1, #1
   1f9a0:	f00a f8ec 	bl	29b7c <shell_fprintf>
		data->err = -ENOENT;
   1f9a4:	f06f 0301 	mvn.w	r3, #1
   1f9a8:	60eb      	str	r3, [r5, #12]
	return BT_GATT_ITER_CONTINUE;
   1f9aa:	2001      	movs	r0, #1
   1f9ac:	e01f      	b.n	1f9ee <set_cb+0x62>
		buf[i] = strtoul(data->argv[i], NULL, 16);
   1f9ae:	68ab      	ldr	r3, [r5, #8]
   1f9b0:	2210      	movs	r2, #16
   1f9b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
   1f9b6:	2100      	movs	r1, #0
   1f9b8:	f008 fe00 	bl	285bc <strtoul>
   1f9bc:	f808 0006 	strb.w	r0, [r8, r6]
	for (i = 0; i < data->argc; i++) {
   1f9c0:	3601      	adds	r6, #1
   1f9c2:	686b      	ldr	r3, [r5, #4]
   1f9c4:	429e      	cmp	r6, r3
   1f9c6:	d3f2      	bcc.n	1f9ae <set_cb+0x22>
	ret = attr->write(NULL, attr, (void *)buf, i, 0, 0);
   1f9c8:	2400      	movs	r4, #0
   1f9ca:	b2b3      	uxth	r3, r6
   1f9cc:	e9cd 4400 	strd	r4, r4, [sp]
   1f9d0:	f8d7 9008 	ldr.w	r9, [r7, #8]
   1f9d4:	4642      	mov	r2, r8
   1f9d6:	4639      	mov	r1, r7
   1f9d8:	4620      	mov	r0, r4
   1f9da:	47c8      	blx	r9
	if (ret < 0) {
   1f9dc:	1e03      	subs	r3, r0, #0
   1f9de:	dae4      	bge.n	1f9aa <set_cb+0x1e>
		shell_error(data->sh, "Failed to write: %zd", ret);
   1f9e0:	6828      	ldr	r0, [r5, #0]
   1f9e2:	4a07      	ldr	r2, [pc, #28]	; (1fa00 <set_cb+0x74>)
		data->err = ret;
   1f9e4:	60eb      	str	r3, [r5, #12]
		shell_error(data->sh, "Failed to write: %zd", ret);
   1f9e6:	2101      	movs	r1, #1
   1f9e8:	f00a f8c8 	bl	29b7c <shell_fprintf>
		return BT_GATT_ITER_STOP;
   1f9ec:	4620      	mov	r0, r4
}
   1f9ee:	b043      	add	sp, #268	; 0x10c
   1f9f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (i = 0; i < data->argc; i++) {
   1f9f4:	2600      	movs	r6, #0
   1f9f6:	f10d 0808 	add.w	r8, sp, #8
   1f9fa:	e7e2      	b.n	1f9c2 <set_cb+0x36>
   1f9fc:	00032edd 	.word	0x00032edd
   1fa00:	00032ef2 	.word	0x00032ef2

0001fa04 <cmd_show_db>:
{
   1fa04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	memset(&stats, 0, sizeof(stats));
   1fa08:	4d2a      	ldr	r5, [pc, #168]	; (1fab4 <cmd_show_db+0xb0>)
   1fa0a:	2400      	movs	r4, #0
	if (argc > 1) {
   1fa0c:	2901      	cmp	r1, #1
{
   1fa0e:	b086      	sub	sp, #24
   1fa10:	4606      	mov	r6, r0
   1fa12:	4688      	mov	r8, r1
   1fa14:	4617      	mov	r7, r2
	memset(&stats, 0, sizeof(stats));
   1fa16:	602c      	str	r4, [r5, #0]
   1fa18:	606c      	str	r4, [r5, #4]
	if (argc > 1) {
   1fa1a:	d920      	bls.n	1fa5e <cmd_show_db+0x5a>
		uuid.val = strtoul(argv[1], NULL, 16);
   1fa1c:	6878      	ldr	r0, [r7, #4]
		uuid.uuid.type = BT_UUID_TYPE_16;
   1fa1e:	f88d 4014 	strb.w	r4, [sp, #20]
		uuid.val = strtoul(argv[1], NULL, 16);
   1fa22:	2210      	movs	r2, #16
   1fa24:	4621      	mov	r1, r4
   1fa26:	f008 fdc9 	bl	285bc <strtoul>
		if (argc > 2) {
   1fa2a:	f1b8 0f02 	cmp.w	r8, #2
		uuid.val = strtoul(argv[1], NULL, 16);
   1fa2e:	f8ad 0016 	strh.w	r0, [sp, #22]
		if (argc > 2) {
   1fa32:	d005      	beq.n	1fa40 <cmd_show_db+0x3c>
			num_matches = strtoul(argv[2], NULL, 10);
   1fa34:	4621      	mov	r1, r4
   1fa36:	68b8      	ldr	r0, [r7, #8]
   1fa38:	220a      	movs	r2, #10
   1fa3a:	f008 fdbf 	bl	285bc <strtoul>
   1fa3e:	b284      	uxth	r4, r0
		bt_gatt_foreach_attr_type(0x0001, 0xffff, &uuid.uuid, NULL,
   1fa40:	4b1d      	ldr	r3, [pc, #116]	; (1fab8 <cmd_show_db+0xb4>)
   1fa42:	9602      	str	r6, [sp, #8]
   1fa44:	e9cd 4300 	strd	r4, r3, [sp]
   1fa48:	aa05      	add	r2, sp, #20
   1fa4a:	2300      	movs	r3, #0
   1fa4c:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1fa50:	2001      	movs	r0, #1
   1fa52:	f7fc fcf3 	bl	1c43c <bt_gatt_foreach_attr_type>
}
   1fa56:	2000      	movs	r0, #0
   1fa58:	b006      	add	sp, #24
   1fa5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, print_attr, (void *)sh);
   1fa5e:	4603      	mov	r3, r0
   1fa60:	4a15      	ldr	r2, [pc, #84]	; (1fab8 <cmd_show_db+0xb4>)
   1fa62:	f64f 71ff 	movw	r1, #65535	; 0xffff
   1fa66:	2001      	movs	r0, #1
   1fa68:	f00c fad3 	bl	2c012 <bt_gatt_foreach_attr>
	if (!stats.attr_count) {
   1fa6c:	886b      	ldrh	r3, [r5, #2]
   1fa6e:	b92b      	cbnz	r3, 1fa7c <cmd_show_db+0x78>
		shell_print(sh, "No attribute found");
   1fa70:	4a12      	ldr	r2, [pc, #72]	; (1fabc <cmd_show_db+0xb8>)
   1fa72:	2108      	movs	r1, #8
   1fa74:	4630      	mov	r0, r6
   1fa76:	f00a f881 	bl	29b7c <shell_fprintf>
		return 0;
   1fa7a:	e7ec      	b.n	1fa56 <cmd_show_db+0x52>
	total_len += stats.chrc_count * sizeof(struct bt_gatt_chrc);
   1fa7c:	88a9      	ldrh	r1, [r5, #4]
	total_len = stats.svc_count * sizeof(struct bt_gatt_service);
   1fa7e:	882a      	ldrh	r2, [r5, #0]
	total_len += stats.ccc_count * sizeof(struct _bt_gatt_ccc);
   1fa80:	88ec      	ldrh	r4, [r5, #6]
	total_len += stats.chrc_count * sizeof(struct bt_gatt_chrc);
   1fa82:	00c9      	lsls	r1, r1, #3
   1fa84:	200c      	movs	r0, #12
   1fa86:	fb00 1202 	mla	r2, r0, r2, r1
	total_len += stats.attr_count * sizeof(struct bt_gatt_attr);
   1fa8a:	2114      	movs	r1, #20
   1fa8c:	fb01 2303 	mla	r3, r1, r3, r2
	total_len += stats.ccc_count * sizeof(struct _bt_gatt_ccc);
   1fa90:	2218      	movs	r2, #24
   1fa92:	fb02 3404 	mla	r4, r2, r4, r3
	shell_print(sh, "=================================================");
   1fa96:	4630      	mov	r0, r6
   1fa98:	4a09      	ldr	r2, [pc, #36]	; (1fac0 <cmd_show_db+0xbc>)
   1fa9a:	2108      	movs	r1, #8
   1fa9c:	f00a f86e 	bl	29b7c <shell_fprintf>
	shell_print(sh, "Total: %u services %u attributes (%zu bytes)",
   1faa0:	886b      	ldrh	r3, [r5, #2]
   1faa2:	9300      	str	r3, [sp, #0]
   1faa4:	4a07      	ldr	r2, [pc, #28]	; (1fac4 <cmd_show_db+0xc0>)
   1faa6:	882b      	ldrh	r3, [r5, #0]
   1faa8:	9401      	str	r4, [sp, #4]
   1faaa:	2108      	movs	r1, #8
   1faac:	4630      	mov	r0, r6
   1faae:	f00a f865 	bl	29b7c <shell_fprintf>
	return 0;
   1fab2:	e7d0      	b.n	1fa56 <cmd_show_db+0x52>
   1fab4:	20002a34 	.word	0x20002a34
   1fab8:	0001ef25 	.word	0x0001ef25
   1fabc:	00032f08 	.word	0x00032f08
   1fac0:	00032f1c 	.word	0x00032f1c
   1fac4:	00032f4f 	.word	0x00032f4f

0001fac8 <cmd_unsubscribe>:
{
   1fac8:	b538      	push	{r3, r4, r5, lr}
	if (!default_conn) {
   1faca:	4b11      	ldr	r3, [pc, #68]	; (1fb10 <cmd_unsubscribe+0x48>)
   1facc:	681b      	ldr	r3, [r3, #0]
{
   1face:	4605      	mov	r5, r0
	if (!default_conn) {
   1fad0:	b93b      	cbnz	r3, 1fae2 <cmd_unsubscribe+0x1a>
		shell_error(sh, "Not connected");
   1fad2:	4a10      	ldr	r2, [pc, #64]	; (1fb14 <cmd_unsubscribe+0x4c>)
		shell_error(sh, "No subscription found");
   1fad4:	2101      	movs	r1, #1
   1fad6:	f00a f851 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1fada:	f06f 0407 	mvn.w	r4, #7
}
   1fade:	4620      	mov	r0, r4
   1fae0:	bd38      	pop	{r3, r4, r5, pc}
	if (!subscribe_params.value_handle) {
   1fae2:	490d      	ldr	r1, [pc, #52]	; (1fb18 <cmd_unsubscribe+0x50>)
   1fae4:	890a      	ldrh	r2, [r1, #8]
   1fae6:	b90a      	cbnz	r2, 1faec <cmd_unsubscribe+0x24>
		shell_error(sh, "No subscription found");
   1fae8:	4a0c      	ldr	r2, [pc, #48]	; (1fb1c <cmd_unsubscribe+0x54>)
   1faea:	e7f3      	b.n	1fad4 <cmd_unsubscribe+0xc>
	err = bt_gatt_unsubscribe(default_conn, &subscribe_params);
   1faec:	4618      	mov	r0, r3
   1faee:	f7fe f831 	bl	1db54 <bt_gatt_unsubscribe>
	if (err) {
   1faf2:	4604      	mov	r4, r0
   1faf4:	b130      	cbz	r0, 1fb04 <cmd_unsubscribe+0x3c>
		shell_error(sh, "Unsubscribe failed (err %d)", err);
   1faf6:	4603      	mov	r3, r0
   1faf8:	4a09      	ldr	r2, [pc, #36]	; (1fb20 <cmd_unsubscribe+0x58>)
   1fafa:	2101      	movs	r1, #1
   1fafc:	4628      	mov	r0, r5
   1fafe:	f00a f83d 	bl	29b7c <shell_fprintf>
   1fb02:	e7ec      	b.n	1fade <cmd_unsubscribe+0x16>
		shell_print(sh, "Unsubscribe success");
   1fb04:	4a07      	ldr	r2, [pc, #28]	; (1fb24 <cmd_unsubscribe+0x5c>)
   1fb06:	2108      	movs	r1, #8
   1fb08:	4628      	mov	r0, r5
   1fb0a:	f00a f837 	bl	29b7c <shell_fprintf>
   1fb0e:	e7e6      	b.n	1fade <cmd_unsubscribe+0x16>
   1fb10:	200027d0 	.word	0x200027d0
   1fb14:	000322aa 	.word	0x000322aa
   1fb18:	20002804 	.word	0x20002804
   1fb1c:	00032f7d 	.word	0x00032f7d
   1fb20:	00032f94 	.word	0x00032f94
   1fb24:	00032fb1 	.word	0x00032fb1

0001fb28 <read_func>:
{
   1fb28:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fb2a:	461c      	mov	r4, r3
	shell_print(ctx_shell, "Read complete: err 0x%02x length %u", err, length);
   1fb2c:	480a      	ldr	r0, [pc, #40]	; (1fb58 <read_func+0x30>)
   1fb2e:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   1fb32:	9300      	str	r3, [sp, #0]
{
   1fb34:	4615      	mov	r5, r2
	shell_print(ctx_shell, "Read complete: err 0x%02x length %u", err, length);
   1fb36:	460b      	mov	r3, r1
   1fb38:	4a08      	ldr	r2, [pc, #32]	; (1fb5c <read_func+0x34>)
   1fb3a:	6800      	ldr	r0, [r0, #0]
   1fb3c:	2108      	movs	r1, #8
   1fb3e:	f00a f81d 	bl	29b7c <shell_fprintf>
	if (!data) {
   1fb42:	b93c      	cbnz	r4, 1fb54 <read_func+0x2c>
   1fb44:	2210      	movs	r2, #16
   1fb46:	4621      	mov	r1, r4
   1fb48:	4628      	mov	r0, r5
   1fb4a:	f00d f87c 	bl	2cc46 <memset>
   1fb4e:	4620      	mov	r0, r4
}
   1fb50:	b003      	add	sp, #12
   1fb52:	bd30      	pop	{r4, r5, pc}
	return BT_GATT_ITER_CONTINUE;
   1fb54:	2001      	movs	r0, #1
   1fb56:	e7fb      	b.n	1fb50 <read_func+0x28>
   1fb58:	200027cc 	.word	0x200027cc
   1fb5c:	00032fc6 	.word	0x00032fc6

0001fb60 <exchange_func>:
{
   1fb60:	b510      	push	{r4, lr}
	shell_print(ctx_shell, "Exchange %s", err == 0U ? "successful" :
   1fb62:	4b07      	ldr	r3, [pc, #28]	; (1fb80 <exchange_func+0x20>)
   1fb64:	4807      	ldr	r0, [pc, #28]	; (1fb84 <exchange_func+0x24>)
{
   1fb66:	4614      	mov	r4, r2
	shell_print(ctx_shell, "Exchange %s", err == 0U ? "successful" :
   1fb68:	4a07      	ldr	r2, [pc, #28]	; (1fb88 <exchange_func+0x28>)
   1fb6a:	6800      	ldr	r0, [r0, #0]
   1fb6c:	2900      	cmp	r1, #0
   1fb6e:	bf18      	it	ne
   1fb70:	4613      	movne	r3, r2
   1fb72:	4a06      	ldr	r2, [pc, #24]	; (1fb8c <exchange_func+0x2c>)
   1fb74:	2108      	movs	r1, #8
   1fb76:	f00a f801 	bl	29b7c <shell_fprintf>
   1fb7a:	2300      	movs	r3, #0
   1fb7c:	6023      	str	r3, [r4, #0]
}
   1fb7e:	bd10      	pop	{r4, pc}
   1fb80:	00032feb 	.word	0x00032feb
   1fb84:	200027cc 	.word	0x200027cc
   1fb88:	00031f53 	.word	0x00031f53
   1fb8c:	00032ff6 	.word	0x00032ff6

0001fb90 <cmd_exchange_mtu>:
{
   1fb90:	b538      	push	{r3, r4, r5, lr}
	if (!default_conn) {
   1fb92:	4b12      	ldr	r3, [pc, #72]	; (1fbdc <cmd_exchange_mtu+0x4c>)
   1fb94:	681b      	ldr	r3, [r3, #0]
{
   1fb96:	4605      	mov	r5, r0
	if (!default_conn) {
   1fb98:	b93b      	cbnz	r3, 1fbaa <cmd_exchange_mtu+0x1a>
		shell_print(sh, "Not connected");
   1fb9a:	4a11      	ldr	r2, [pc, #68]	; (1fbe0 <cmd_exchange_mtu+0x50>)
		shell_print(sh, "MTU Exchange ongoing");
   1fb9c:	2108      	movs	r1, #8
   1fb9e:	f009 ffed 	bl	29b7c <shell_fprintf>
		return -ENOEXEC;
   1fba2:	f06f 0407 	mvn.w	r4, #7
}
   1fba6:	4620      	mov	r0, r4
   1fba8:	bd38      	pop	{r3, r4, r5, pc}
	if (exchange_params.func) {
   1fbaa:	490e      	ldr	r1, [pc, #56]	; (1fbe4 <cmd_exchange_mtu+0x54>)
   1fbac:	680a      	ldr	r2, [r1, #0]
   1fbae:	b10a      	cbz	r2, 1fbb4 <cmd_exchange_mtu+0x24>
		shell_print(sh, "MTU Exchange ongoing");
   1fbb0:	4a0d      	ldr	r2, [pc, #52]	; (1fbe8 <cmd_exchange_mtu+0x58>)
   1fbb2:	e7f3      	b.n	1fb9c <cmd_exchange_mtu+0xc>
	exchange_params.func = exchange_func;
   1fbb4:	4a0d      	ldr	r2, [pc, #52]	; (1fbec <cmd_exchange_mtu+0x5c>)
   1fbb6:	600a      	str	r2, [r1, #0]
	err = bt_gatt_exchange_mtu(default_conn, &exchange_params);
   1fbb8:	4618      	mov	r0, r3
   1fbba:	f7fc ffcb 	bl	1cb54 <bt_gatt_exchange_mtu>
	if (err) {
   1fbbe:	4604      	mov	r4, r0
   1fbc0:	b130      	cbz	r0, 1fbd0 <cmd_exchange_mtu+0x40>
		shell_print(sh, "Exchange failed (err %d)", err);
   1fbc2:	4603      	mov	r3, r0
   1fbc4:	4a0a      	ldr	r2, [pc, #40]	; (1fbf0 <cmd_exchange_mtu+0x60>)
   1fbc6:	2108      	movs	r1, #8
   1fbc8:	4628      	mov	r0, r5
   1fbca:	f009 ffd7 	bl	29b7c <shell_fprintf>
   1fbce:	e7ea      	b.n	1fba6 <cmd_exchange_mtu+0x16>
		shell_print(sh, "Exchange pending");
   1fbd0:	4a08      	ldr	r2, [pc, #32]	; (1fbf4 <cmd_exchange_mtu+0x64>)
   1fbd2:	2108      	movs	r1, #8
   1fbd4:	4628      	mov	r0, r5
   1fbd6:	f009 ffd1 	bl	29b7c <shell_fprintf>
   1fbda:	e7e4      	b.n	1fba6 <cmd_exchange_mtu+0x16>
   1fbdc:	200027d0 	.word	0x200027d0
   1fbe0:	000322aa 	.word	0x000322aa
   1fbe4:	200027f0 	.word	0x200027f0
   1fbe8:	00033003 	.word	0x00033003
   1fbec:	0001fb61 	.word	0x0001fb61
   1fbf0:	00033019 	.word	0x00033019
   1fbf4:	00033033 	.word	0x00033033

0001fbf8 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1fbf8:	4b02      	ldr	r3, [pc, #8]	; (1fc04 <net_buf_pool_get+0xc>)
   1fbfa:	2234      	movs	r2, #52	; 0x34
   1fbfc:	fb02 3000 	mla	r0, r2, r0, r3
   1fc00:	4770      	bx	lr
   1fc02:	bf00      	nop
   1fc04:	200008f0 	.word	0x200008f0

0001fc08 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fc08:	7983      	ldrb	r3, [r0, #6]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
				__alignof__(struct net_buf));
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1fc0a:	4a07      	ldr	r2, [pc, #28]	; (1fc28 <net_buf_id+0x20>)
   1fc0c:	2134      	movs	r1, #52	; 0x34
   1fc0e:	fb01 2303 	mla	r3, r1, r3, r2
   1fc12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fc14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1fc18:	3317      	adds	r3, #23
	ptrdiff_t offset = (uint8_t *)buf - (uint8_t *)pool->__bufs;
   1fc1a:	1a80      	subs	r0, r0, r2
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fc1c:	f023 0303 	bic.w	r3, r3, #3

	return offset / struct_size;
}
   1fc20:	fbb0 f0f3 	udiv	r0, r0, r3
   1fc24:	4770      	bx	lr
   1fc26:	bf00      	nop
   1fc28:	200008f0 	.word	0x200008f0

0001fc2c <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1fc2c:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc2e:	4a0a      	ldr	r2, [pc, #40]	; (1fc58 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fc30:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc32:	2434      	movs	r4, #52	; 0x34
   1fc34:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   1fc38:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1fc3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fc3c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1fc3e:	6823      	ldr	r3, [r4, #0]
   1fc40:	429a      	cmp	r2, r3
   1fc42:	bf94      	ite	ls
   1fc44:	600a      	strls	r2, [r1, #0]
   1fc46:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1fc48:	f7ff ffde 	bl	1fc08 <net_buf_id>
   1fc4c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1fc50:	fb02 3000 	mla	r0, r2, r0, r3
   1fc54:	bd10      	pop	{r4, pc}
   1fc56:	bf00      	nop
   1fc58:	200008f0 	.word	0x200008f0

0001fc5c <net_buf_reset>:
{
   1fc5c:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf->flags == 0U);
   1fc5e:	7943      	ldrb	r3, [r0, #5]
{
   1fc60:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf->flags == 0U);
   1fc62:	b14b      	cbz	r3, 1fc78 <net_buf_reset+0x1c>
   1fc64:	490d      	ldr	r1, [pc, #52]	; (1fc9c <net_buf_reset+0x40>)
   1fc66:	480e      	ldr	r0, [pc, #56]	; (1fca0 <net_buf_reset+0x44>)
   1fc68:	4a0e      	ldr	r2, [pc, #56]	; (1fca4 <net_buf_reset+0x48>)
   1fc6a:	2356      	movs	r3, #86	; 0x56
   1fc6c:	f008 ff95 	bl	28b9a <printk>
   1fc70:	480c      	ldr	r0, [pc, #48]	; (1fca4 <net_buf_reset+0x48>)
   1fc72:	2156      	movs	r1, #86	; 0x56
   1fc74:	f009 f9d2 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(buf->frags == NULL);
   1fc78:	6823      	ldr	r3, [r4, #0]
   1fc7a:	b14b      	cbz	r3, 1fc90 <net_buf_reset+0x34>
   1fc7c:	490a      	ldr	r1, [pc, #40]	; (1fca8 <net_buf_reset+0x4c>)
   1fc7e:	4808      	ldr	r0, [pc, #32]	; (1fca0 <net_buf_reset+0x44>)
   1fc80:	4a08      	ldr	r2, [pc, #32]	; (1fca4 <net_buf_reset+0x48>)
   1fc82:	2357      	movs	r3, #87	; 0x57
   1fc84:	f008 ff89 	bl	28b9a <printk>
   1fc88:	4806      	ldr	r0, [pc, #24]	; (1fca4 <net_buf_reset+0x48>)
   1fc8a:	2157      	movs	r1, #87	; 0x57
   1fc8c:	f009 f9c6 	bl	2901c <assert_post_action>
	buf->len  = 0U;
   1fc90:	2300      	movs	r3, #0
   1fc92:	81a3      	strh	r3, [r4, #12]
	buf->data = buf->__buf;
   1fc94:	6923      	ldr	r3, [r4, #16]
   1fc96:	60a3      	str	r3, [r4, #8]
}
   1fc98:	bd10      	pop	{r4, pc}
   1fc9a:	bf00      	nop
   1fc9c:	00033258 	.word	0x00033258
   1fca0:	0002e93e 	.word	0x0002e93e
   1fca4:	00033234 	.word	0x00033234
   1fca8:	00033269 	.word	0x00033269

0001fcac <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1fcac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fcb0:	4605      	mov	r5, r0
   1fcb2:	9101      	str	r1, [sp, #4]
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1fcb4:	4610      	mov	r0, r2
   1fcb6:	4619      	mov	r1, r3
{
   1fcb8:	4616      	mov	r6, r2
   1fcba:	461f      	mov	r7, r3
	uint64_t end = sys_clock_timeout_end_calc(timeout);
   1fcbc:	f00c fee2 	bl	2ca84 <sys_clock_timeout_end_calc>
   1fcc0:	4681      	mov	r9, r0
   1fcc2:	468a      	mov	sl, r1
	struct net_buf *buf;
	k_spinlock_key_t key;

	__ASSERT_NO_MSG(pool);
   1fcc4:	b94d      	cbnz	r5, 1fcda <net_buf_alloc_len+0x2e>
   1fcc6:	4978      	ldr	r1, [pc, #480]	; (1fea8 <net_buf_alloc_len+0x1fc>)
   1fcc8:	4878      	ldr	r0, [pc, #480]	; (1feac <net_buf_alloc_len+0x200>)
   1fcca:	4a79      	ldr	r2, [pc, #484]	; (1feb0 <net_buf_alloc_len+0x204>)
   1fccc:	23f4      	movs	r3, #244	; 0xf4
   1fcce:	f008 ff64 	bl	28b9a <printk>
   1fcd2:	4877      	ldr	r0, [pc, #476]	; (1feb0 <net_buf_alloc_len+0x204>)
   1fcd4:	21f4      	movs	r1, #244	; 0xf4
   1fcd6:	f009 f9a1 	bl	2901c <assert_post_action>
	NET_BUF_DBG("%s():%d: pool %p size %zu", func, line, pool, size);

	/* We need to prevent race conditions
	 * when accessing pool->uninit_count.
	 */
	key = k_spin_lock(&pool->lock);
   1fcda:	f105 081c 	add.w	r8, r5, #28
	__asm__ volatile(
   1fcde:	f04f 0340 	mov.w	r3, #64	; 0x40
   1fce2:	f3ef 8b11 	mrs	fp, BASEPRI
   1fce6:	f383 8812 	msr	BASEPRI_MAX, r3
   1fcea:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   1fcee:	4640      	mov	r0, r8
   1fcf0:	f004 f852 	bl	23d98 <z_spin_lock_valid>
   1fcf4:	b968      	cbnz	r0, 1fd12 <net_buf_alloc_len+0x66>
   1fcf6:	4a6f      	ldr	r2, [pc, #444]	; (1feb4 <net_buf_alloc_len+0x208>)
   1fcf8:	496f      	ldr	r1, [pc, #444]	; (1feb8 <net_buf_alloc_len+0x20c>)
   1fcfa:	486c      	ldr	r0, [pc, #432]	; (1feac <net_buf_alloc_len+0x200>)
   1fcfc:	2381      	movs	r3, #129	; 0x81
   1fcfe:	f008 ff4c 	bl	28b9a <printk>
   1fd02:	486e      	ldr	r0, [pc, #440]	; (1febc <net_buf_alloc_len+0x210>)
   1fd04:	4641      	mov	r1, r8
   1fd06:	f008 ff48 	bl	28b9a <printk>
   1fd0a:	486a      	ldr	r0, [pc, #424]	; (1feb4 <net_buf_alloc_len+0x208>)
   1fd0c:	2181      	movs	r1, #129	; 0x81
   1fd0e:	f009 f985 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   1fd12:	4640      	mov	r0, r8
   1fd14:	f004 f85e 	bl	23dd4 <z_spin_lock_set_owner>

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1fd18:	8c6b      	ldrh	r3, [r5, #34]	; 0x22
   1fd1a:	2b00      	cmp	r3, #0
   1fd1c:	f000 8082 	beq.w	1fe24 <net_buf_alloc_len+0x178>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1fd20:	8c2a      	ldrh	r2, [r5, #32]
   1fd22:	429a      	cmp	r2, r3
   1fd24:	d952      	bls.n	1fdcc <net_buf_alloc_len+0x120>
	return z_impl_k_queue_get(queue, timeout);
   1fd26:	2200      	movs	r2, #0
   1fd28:	2300      	movs	r3, #0
   1fd2a:	4628      	mov	r0, r5
   1fd2c:	f004 ff6e 	bl	24c0c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1fd30:	4604      	mov	r4, r0
   1fd32:	2800      	cmp	r0, #0
   1fd34:	d04a      	beq.n	1fdcc <net_buf_alloc_len+0x120>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   1fd36:	4640      	mov	r0, r8
   1fd38:	f004 f83c 	bl	23db4 <z_spin_unlock_valid>
   1fd3c:	b968      	cbnz	r0, 1fd5a <net_buf_alloc_len+0xae>
   1fd3e:	4a5d      	ldr	r2, [pc, #372]	; (1feb4 <net_buf_alloc_len+0x208>)
   1fd40:	495f      	ldr	r1, [pc, #380]	; (1fec0 <net_buf_alloc_len+0x214>)
   1fd42:	485a      	ldr	r0, [pc, #360]	; (1feac <net_buf_alloc_len+0x200>)
   1fd44:	23ac      	movs	r3, #172	; 0xac
   1fd46:	f008 ff28 	bl	28b9a <printk>
   1fd4a:	485e      	ldr	r0, [pc, #376]	; (1fec4 <net_buf_alloc_len+0x218>)
   1fd4c:	4641      	mov	r1, r8
   1fd4e:	f008 ff24 	bl	28b9a <printk>
   1fd52:	4858      	ldr	r0, [pc, #352]	; (1feb4 <net_buf_alloc_len+0x208>)
   1fd54:	21ac      	movs	r1, #172	; 0xac
   1fd56:	f009 f961 	bl	2901c <assert_post_action>
	__asm__ volatile(
   1fd5a:	f38b 8811 	msr	BASEPRI, fp
   1fd5e:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1fd62:	f8dd 8004 	ldr.w	r8, [sp, #4]
   1fd66:	f1b8 0f00 	cmp.w	r8, #0
   1fd6a:	f000 8099 	beq.w	1fea0 <net_buf_alloc_len+0x1f4>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1fd6e:	ea56 0307 	orrs.w	r3, r6, r7
   1fd72:	d010      	beq.n	1fd96 <net_buf_alloc_len+0xea>
   1fd74:	1c7b      	adds	r3, r7, #1
   1fd76:	bf08      	it	eq
   1fd78:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   1fd7c:	d00b      	beq.n	1fd96 <net_buf_alloc_len+0xea>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - sys_clock_tick_get();
   1fd7e:	f007 fbc1 	bl	27504 <sys_clock_tick_get>
   1fd82:	ebb9 0600 	subs.w	r6, r9, r0
   1fd86:	eb6a 0701 	sbc.w	r7, sl, r1
   1fd8a:	2e00      	cmp	r6, #0
   1fd8c:	f177 0300 	sbcs.w	r3, r7, #0
   1fd90:	bfbc      	itt	lt
   1fd92:	2600      	movlt	r6, #0
   1fd94:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1fd96:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1fd98:	f8df 912c 	ldr.w	r9, [pc, #300]	; 1fec8 <net_buf_alloc_len+0x21c>
   1fd9c:	f04f 0a34 	mov.w	sl, #52	; 0x34
   1fda0:	fb0a 9303 	mla	r3, sl, r3, r9
   1fda4:	4632      	mov	r2, r6
   1fda6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   1fda8:	681b      	ldr	r3, [r3, #0]
   1fdaa:	a901      	add	r1, sp, #4
   1fdac:	681d      	ldr	r5, [r3, #0]
   1fdae:	4620      	mov	r0, r4
   1fdb0:	463b      	mov	r3, r7
   1fdb2:	47a8      	blx	r5
   1fdb4:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1fdb6:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1fdb8:	2800      	cmp	r0, #0
   1fdba:	d155      	bne.n	1fe68 <net_buf_alloc_len+0x1bc>
	k_lifo_put(&pool->free, buf);
   1fdbc:	79a0      	ldrb	r0, [r4, #6]
   1fdbe:	4621      	mov	r1, r4
   1fdc0:	fb00 900a 	mla	r0, r0, sl, r9
   1fdc4:	f00c fdb9 	bl	2c93a <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1fdc8:	462c      	mov	r4, r5
}
   1fdca:	e049      	b.n	1fe60 <net_buf_alloc_len+0x1b4>
		uninit_count = pool->uninit_count--;
   1fdcc:	8c6c      	ldrh	r4, [r5, #34]	; 0x22
   1fdce:	1e63      	subs	r3, r4, #1
   1fdd0:	846b      	strh	r3, [r5, #34]	; 0x22
   1fdd2:	4640      	mov	r0, r8
   1fdd4:	f003 ffee 	bl	23db4 <z_spin_unlock_valid>
   1fdd8:	b968      	cbnz	r0, 1fdf6 <net_buf_alloc_len+0x14a>
   1fdda:	4a36      	ldr	r2, [pc, #216]	; (1feb4 <net_buf_alloc_len+0x208>)
   1fddc:	4938      	ldr	r1, [pc, #224]	; (1fec0 <net_buf_alloc_len+0x214>)
   1fdde:	4833      	ldr	r0, [pc, #204]	; (1feac <net_buf_alloc_len+0x200>)
   1fde0:	23ac      	movs	r3, #172	; 0xac
   1fde2:	f008 feda 	bl	28b9a <printk>
   1fde6:	4837      	ldr	r0, [pc, #220]	; (1fec4 <net_buf_alloc_len+0x218>)
   1fde8:	4641      	mov	r1, r8
   1fdea:	f008 fed6 	bl	28b9a <printk>
   1fdee:	4831      	ldr	r0, [pc, #196]	; (1feb4 <net_buf_alloc_len+0x208>)
   1fdf0:	21ac      	movs	r1, #172	; 0xac
   1fdf2:	f009 f913 	bl	2901c <assert_post_action>
   1fdf6:	f38b 8811 	msr	BASEPRI, fp
   1fdfa:	f3bf 8f6f 	isb	sy
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1fdfe:	8c2b      	ldrh	r3, [r5, #32]
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fe00:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
	size_t byte_offset = (pool->buf_count - uninit_count) * struct_size;
   1fe04:	1b1c      	subs	r4, r3, r4
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fe06:	f102 0017 	add.w	r0, r2, #23
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1fe0a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
	size_t struct_size = ROUND_UP(sizeof(struct net_buf) + pool->user_data_size,
   1fe0c:	f020 0003 	bic.w	r0, r0, #3
	buf = (struct net_buf *)(((uint8_t *)pool->__bufs) + byte_offset);
   1fe10:	fb04 3400 	mla	r4, r4, r0, r3
	return pool - _net_buf_pool_list;
   1fe14:	482c      	ldr	r0, [pc, #176]	; (1fec8 <net_buf_alloc_len+0x21c>)
   1fe16:	4b2d      	ldr	r3, [pc, #180]	; (1fecc <net_buf_alloc_len+0x220>)
	buf->user_data_size = pool->user_data_size;
   1fe18:	71e2      	strb	r2, [r4, #7]
	return pool - _net_buf_pool_list;
   1fe1a:	1a2d      	subs	r5, r5, r0
   1fe1c:	10ad      	asrs	r5, r5, #2
   1fe1e:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1fe20:	71a5      	strb	r5, [r4, #6]
		goto success;
   1fe22:	e79e      	b.n	1fd62 <net_buf_alloc_len+0xb6>
   1fe24:	4640      	mov	r0, r8
   1fe26:	f003 ffc5 	bl	23db4 <z_spin_unlock_valid>
   1fe2a:	b968      	cbnz	r0, 1fe48 <net_buf_alloc_len+0x19c>
   1fe2c:	4a21      	ldr	r2, [pc, #132]	; (1feb4 <net_buf_alloc_len+0x208>)
   1fe2e:	4924      	ldr	r1, [pc, #144]	; (1fec0 <net_buf_alloc_len+0x214>)
   1fe30:	481e      	ldr	r0, [pc, #120]	; (1feac <net_buf_alloc_len+0x200>)
   1fe32:	23ac      	movs	r3, #172	; 0xac
   1fe34:	f008 feb1 	bl	28b9a <printk>
   1fe38:	4822      	ldr	r0, [pc, #136]	; (1fec4 <net_buf_alloc_len+0x218>)
   1fe3a:	4641      	mov	r1, r8
   1fe3c:	f008 fead 	bl	28b9a <printk>
   1fe40:	481c      	ldr	r0, [pc, #112]	; (1feb4 <net_buf_alloc_len+0x208>)
   1fe42:	21ac      	movs	r1, #172	; 0xac
   1fe44:	f009 f8ea 	bl	2901c <assert_post_action>
   1fe48:	f38b 8811 	msr	BASEPRI, fp
   1fe4c:	f3bf 8f6f 	isb	sy
   1fe50:	4632      	mov	r2, r6
   1fe52:	463b      	mov	r3, r7
   1fe54:	4628      	mov	r0, r5
   1fe56:	f004 fed9 	bl	24c0c <z_impl_k_queue_get>
	if (!buf) {
   1fe5a:	4604      	mov	r4, r0
   1fe5c:	2800      	cmp	r0, #0
   1fe5e:	d180      	bne.n	1fd62 <net_buf_alloc_len+0xb6>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1fe60:	4620      	mov	r0, r4
   1fe62:	b003      	add	sp, #12
   1fe64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		NET_BUF_ASSERT(req_size <= size);
   1fe68:	9b01      	ldr	r3, [sp, #4]
   1fe6a:	4598      	cmp	r8, r3
   1fe6c:	d90e      	bls.n	1fe8c <net_buf_alloc_len+0x1e0>
   1fe6e:	4918      	ldr	r1, [pc, #96]	; (1fed0 <net_buf_alloc_len+0x224>)
   1fe70:	4a0f      	ldr	r2, [pc, #60]	; (1feb0 <net_buf_alloc_len+0x204>)
   1fe72:	480e      	ldr	r0, [pc, #56]	; (1feac <net_buf_alloc_len+0x200>)
   1fe74:	f240 1355 	movw	r3, #341	; 0x155
   1fe78:	f008 fe8f 	bl	28b9a <printk>
   1fe7c:	4815      	ldr	r0, [pc, #84]	; (1fed4 <net_buf_alloc_len+0x228>)
   1fe7e:	f008 fe8c 	bl	28b9a <printk>
   1fe82:	480b      	ldr	r0, [pc, #44]	; (1feb0 <net_buf_alloc_len+0x204>)
   1fe84:	f240 1155 	movw	r1, #341	; 0x155
   1fe88:	f009 f8c8 	bl	2901c <assert_post_action>
	buf->frags = NULL;
   1fe8c:	2300      	movs	r3, #0
   1fe8e:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1fe90:	2301      	movs	r3, #1
   1fe92:	80a3      	strh	r3, [r4, #4]
	buf->size  = size;
   1fe94:	9b01      	ldr	r3, [sp, #4]
   1fe96:	81e3      	strh	r3, [r4, #14]
	net_buf_reset(buf);
   1fe98:	4620      	mov	r0, r4
   1fe9a:	f7ff fedf 	bl	1fc5c <net_buf_reset>
	return buf;
   1fe9e:	e7df      	b.n	1fe60 <net_buf_alloc_len+0x1b4>
		buf->__buf = NULL;
   1fea0:	f8c4 8010 	str.w	r8, [r4, #16]
   1fea4:	e7f2      	b.n	1fe8c <net_buf_alloc_len+0x1e0>
   1fea6:	bf00      	nop
   1fea8:	00033283 	.word	0x00033283
   1feac:	0002e93e 	.word	0x0002e93e
   1feb0:	00033234 	.word	0x00033234
   1feb4:	0002e9fe 	.word	0x0002e9fe
   1feb8:	0002ea50 	.word	0x0002ea50
   1febc:	0002ea65 	.word	0x0002ea65
   1fec0:	0002ea24 	.word	0x0002ea24
   1fec4:	0002ea3b 	.word	0x0002ea3b
   1fec8:	200008f0 	.word	0x200008f0
   1fecc:	c4ec4ec5 	.word	0xc4ec4ec5
   1fed0:	00033288 	.word	0x00033288
   1fed4:	00033299 	.word	0x00033299

0001fed8 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, k_timeout_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, k_timeout_t timeout)
#endif
{
   1fed8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1fedc:	4606      	mov	r6, r0
   1fede:	f004 fe95 	bl	24c0c <z_impl_k_queue_get>
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p", func, line, fifo);

	buf = k_fifo_get(fifo, timeout);
	if (!buf) {
   1fee2:	4605      	mov	r5, r0
   1fee4:	b150      	cbz	r0, 1fefc <net_buf_get+0x24>
	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
		__ASSERT_NO_MSG(frag->frags);
   1fee6:	4f13      	ldr	r7, [pc, #76]	; (1ff34 <net_buf_get+0x5c>)
   1fee8:	f8df 804c 	ldr.w	r8, [pc, #76]	; 1ff38 <net_buf_get+0x60>
   1feec:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1ff3c <net_buf_get+0x64>
   1fef0:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1fef2:	7963      	ldrb	r3, [r4, #5]
   1fef4:	f013 0301 	ands.w	r3, r3, #1
   1fef8:	d103      	bne.n	1ff02 <net_buf_get+0x2a>
		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1fefa:	6023      	str	r3, [r4, #0]

	return buf;
}
   1fefc:	4628      	mov	r0, r5
   1fefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ff02:	2200      	movs	r2, #0
   1ff04:	2300      	movs	r3, #0
   1ff06:	4630      	mov	r0, r6
   1ff08:	f004 fe80 	bl	24c0c <z_impl_k_queue_get>
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1ff0c:	6020      	str	r0, [r4, #0]
		__ASSERT_NO_MSG(frag->frags);
   1ff0e:	b958      	cbnz	r0, 1ff28 <net_buf_get+0x50>
   1ff10:	4641      	mov	r1, r8
   1ff12:	4648      	mov	r0, r9
   1ff14:	f240 13ad 	movw	r3, #429	; 0x1ad
   1ff18:	463a      	mov	r2, r7
   1ff1a:	f008 fe3e 	bl	28b9a <printk>
   1ff1e:	f240 11ad 	movw	r1, #429	; 0x1ad
   1ff22:	4638      	mov	r0, r7
   1ff24:	f009 f87a 	bl	2901c <assert_post_action>
		frag->flags &= ~NET_BUF_FRAGS;
   1ff28:	7963      	ldrb	r3, [r4, #5]
   1ff2a:	f023 0301 	bic.w	r3, r3, #1
   1ff2e:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ff30:	6824      	ldr	r4, [r4, #0]
   1ff32:	e7de      	b.n	1fef2 <net_buf_get+0x1a>
   1ff34:	00033234 	.word	0x00033234
   1ff38:	0003329c 	.word	0x0003329c
   1ff3c:	0002e93e 	.word	0x0002e93e

0001ff40 <net_buf_simple_reserve>:
	buf->size  = size;
	buf->len   = size;
}

void net_buf_simple_reserve(struct net_buf_simple *buf, size_t reserve)
{
   1ff40:	b538      	push	{r3, r4, r5, lr}
   1ff42:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf);
   1ff44:	4604      	mov	r4, r0
   1ff46:	b958      	cbnz	r0, 1ff60 <net_buf_simple_reserve+0x20>
   1ff48:	490e      	ldr	r1, [pc, #56]	; (1ff84 <net_buf_simple_reserve+0x44>)
   1ff4a:	480f      	ldr	r0, [pc, #60]	; (1ff88 <net_buf_simple_reserve+0x48>)
   1ff4c:	4a0f      	ldr	r2, [pc, #60]	; (1ff8c <net_buf_simple_reserve+0x4c>)
   1ff4e:	f44f 73e2 	mov.w	r3, #452	; 0x1c4
   1ff52:	f008 fe22 	bl	28b9a <printk>
   1ff56:	480d      	ldr	r0, [pc, #52]	; (1ff8c <net_buf_simple_reserve+0x4c>)
   1ff58:	f44f 71e2 	mov.w	r1, #452	; 0x1c4
   1ff5c:	f009 f85e 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(buf->len == 0U);
   1ff60:	88a3      	ldrh	r3, [r4, #4]
   1ff62:	b15b      	cbz	r3, 1ff7c <net_buf_simple_reserve+0x3c>
   1ff64:	490a      	ldr	r1, [pc, #40]	; (1ff90 <net_buf_simple_reserve+0x50>)
   1ff66:	4808      	ldr	r0, [pc, #32]	; (1ff88 <net_buf_simple_reserve+0x48>)
   1ff68:	4a08      	ldr	r2, [pc, #32]	; (1ff8c <net_buf_simple_reserve+0x4c>)
   1ff6a:	f240 13c5 	movw	r3, #453	; 0x1c5
   1ff6e:	f008 fe14 	bl	28b9a <printk>
   1ff72:	4806      	ldr	r0, [pc, #24]	; (1ff8c <net_buf_simple_reserve+0x4c>)
   1ff74:	f240 11c5 	movw	r1, #453	; 0x1c5
   1ff78:	f009 f850 	bl	2901c <assert_post_action>
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ff7c:	68a3      	ldr	r3, [r4, #8]
   1ff7e:	442b      	add	r3, r5
   1ff80:	6023      	str	r3, [r4, #0]
}
   1ff82:	bd38      	pop	{r3, r4, r5, pc}
   1ff84:	00030ef1 	.word	0x00030ef1
   1ff88:	0002e93e 	.word	0x0002e93e
   1ff8c:	00033234 	.word	0x00033234
   1ff90:	000332a8 	.word	0x000332a8

0001ff94 <net_buf_put>:

	return buf;
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1ff94:	b538      	push	{r3, r4, r5, lr}
   1ff96:	460c      	mov	r4, r1
	struct net_buf *tail;

	__ASSERT_NO_MSG(fifo);
   1ff98:	4605      	mov	r5, r0
   1ff9a:	b958      	cbnz	r0, 1ffb4 <net_buf_put+0x20>
   1ff9c:	4913      	ldr	r1, [pc, #76]	; (1ffec <net_buf_put+0x58>)
   1ff9e:	4814      	ldr	r0, [pc, #80]	; (1fff0 <net_buf_put+0x5c>)
   1ffa0:	4a14      	ldr	r2, [pc, #80]	; (1fff4 <net_buf_put+0x60>)
   1ffa2:	f44f 7300 	mov.w	r3, #512	; 0x200
   1ffa6:	f008 fdf8 	bl	28b9a <printk>
   1ffaa:	4812      	ldr	r0, [pc, #72]	; (1fff4 <net_buf_put+0x60>)
   1ffac:	f44f 7100 	mov.w	r1, #512	; 0x200
   1ffb0:	f009 f834 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(buf);
   1ffb4:	b95c      	cbnz	r4, 1ffce <net_buf_put+0x3a>
   1ffb6:	4910      	ldr	r1, [pc, #64]	; (1fff8 <net_buf_put+0x64>)
   1ffb8:	480d      	ldr	r0, [pc, #52]	; (1fff0 <net_buf_put+0x5c>)
   1ffba:	4a0e      	ldr	r2, [pc, #56]	; (1fff4 <net_buf_put+0x60>)
   1ffbc:	f240 2301 	movw	r3, #513	; 0x201
   1ffc0:	f008 fdeb 	bl	28b9a <printk>
   1ffc4:	480b      	ldr	r0, [pc, #44]	; (1fff4 <net_buf_put+0x60>)
   1ffc6:	f240 2101 	movw	r1, #513	; 0x201
   1ffca:	f009 f827 	bl	2901c <assert_post_action>
{
   1ffce:	4622      	mov	r2, r4

	for (tail = buf; tail->frags; tail = tail->frags) {
   1ffd0:	6811      	ldr	r1, [r2, #0]
   1ffd2:	b929      	cbnz	r1, 1ffe0 <net_buf_put+0x4c>
		tail->flags |= NET_BUF_FRAGS;
	}

	k_fifo_put_list(fifo, buf, tail);
   1ffd4:	4621      	mov	r1, r4
   1ffd6:	4628      	mov	r0, r5
}
   1ffd8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_fifo_put_list(fifo, buf, tail);
   1ffdc:	f004 bdb8 	b.w	24b50 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1ffe0:	7953      	ldrb	r3, [r2, #5]
   1ffe2:	f043 0301 	orr.w	r3, r3, #1
   1ffe6:	7153      	strb	r3, [r2, #5]
   1ffe8:	460a      	mov	r2, r1
   1ffea:	e7f1      	b.n	1ffd0 <net_buf_put+0x3c>
   1ffec:	000332b7 	.word	0x000332b7
   1fff0:	0002e93e 	.word	0x0002e93e
   1fff4:	00033234 	.word	0x00033234
   1fff8:	00030ef1 	.word	0x00030ef1

0001fffc <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1fffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   20000:	4605      	mov	r5, r0
   20002:	b328      	cbz	r0, 20050 <CONFIG_PM_SRAM_SIZE+0x50>
   20004:	4e1c      	ldr	r6, [pc, #112]	; (20078 <CONFIG_PM_SRAM_SIZE+0x78>)
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   20006:	2700      	movs	r7, #0
	pool->alloc->cb->unref(buf, data);
   20008:	f04f 0834 	mov.w	r8, #52	; 0x34
		struct net_buf *frags = buf->frags;
   2000c:	462c      	mov	r4, r5
   2000e:	682d      	ldr	r5, [r5, #0]
		if (--buf->ref > 0) {
   20010:	7923      	ldrb	r3, [r4, #4]
   20012:	3b01      	subs	r3, #1
   20014:	b2db      	uxtb	r3, r3
   20016:	7123      	strb	r3, [r4, #4]
   20018:	b9c3      	cbnz	r3, 2004c <CONFIG_PM_SRAM_SIZE+0x4c>
		if (buf->__buf) {
   2001a:	6921      	ldr	r1, [r4, #16]
   2001c:	b159      	cbz	r1, 20036 <CONFIG_PM_SRAM_SIZE+0x36>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   2001e:	7963      	ldrb	r3, [r4, #5]
   20020:	079b      	lsls	r3, r3, #30
   20022:	d407      	bmi.n	20034 <CONFIG_PM_SRAM_SIZE+0x34>
	pool->alloc->cb->unref(buf, data);
   20024:	79a3      	ldrb	r3, [r4, #6]
   20026:	fb08 6303 	mla	r3, r8, r3, r6
   2002a:	4620      	mov	r0, r4
   2002c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   2002e:	681b      	ldr	r3, [r3, #0]
   20030:	689b      	ldr	r3, [r3, #8]
   20032:	4798      	blx	r3
			buf->__buf = NULL;
   20034:	6127      	str	r7, [r4, #16]
		}

		buf->data = NULL;
		buf->frags = NULL;

		pool = net_buf_pool_get(buf->pool_id);
   20036:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   20038:	60a7      	str	r7, [r4, #8]
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		atomic_inc(&pool->avail_count);
		__ASSERT_NO_MSG(atomic_get(&pool->avail_count) <= pool->buf_count);
#endif

		if (pool->destroy) {
   2003a:	fb08 6300 	mla	r3, r8, r0, r6
		buf->frags = NULL;
   2003e:	6027      	str	r7, [r4, #0]
		if (pool->destroy) {
   20040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   20042:	b19b      	cbz	r3, 2006c <CONFIG_PM_SRAM_SIZE+0x6c>
			pool->destroy(buf);
   20044:	4620      	mov	r0, r4
   20046:	4798      	blx	r3
	while (buf) {
   20048:	2d00      	cmp	r5, #0
   2004a:	d1df      	bne.n	2000c <CONFIG_PM_SRAM_SIZE+0xc>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   2004c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__ASSERT_NO_MSG(buf);
   20050:	490a      	ldr	r1, [pc, #40]	; (2007c <CONFIG_PM_SRAM_SIZE+0x7c>)
   20052:	480b      	ldr	r0, [pc, #44]	; (20080 <CONFIG_PM_SRAM_SIZE+0x80>)
   20054:	4a0b      	ldr	r2, [pc, #44]	; (20084 <CONFIG_PM_SRAM_SIZE+0x84>)
   20056:	f44f 7304 	mov.w	r3, #528	; 0x210
   2005a:	f008 fd9e 	bl	28b9a <printk>
}
   2005e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	__ASSERT_NO_MSG(buf);
   20062:	4808      	ldr	r0, [pc, #32]	; (20084 <CONFIG_PM_SRAM_SIZE+0x84>)
   20064:	f44f 7104 	mov.w	r1, #528	; 0x210
   20068:	f008 bfd8 	b.w	2901c <assert_post_action>
	k_lifo_put(&pool->free, buf);
   2006c:	4621      	mov	r1, r4
   2006e:	fb00 6008 	mla	r0, r0, r8, r6
   20072:	f00c fc62 	bl	2c93a <k_queue_prepend>
}
   20076:	e7e7      	b.n	20048 <CONFIG_PM_SRAM_SIZE+0x48>
   20078:	200008f0 	.word	0x200008f0
   2007c:	00030ef1 	.word	0x00030ef1
   20080:	0002e93e 	.word	0x0002e93e
   20084:	00033234 	.word	0x00033234

00020088 <net_buf_ref>:

struct net_buf *net_buf_ref(struct net_buf *buf)
{
   20088:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   2008a:	4604      	mov	r4, r0
   2008c:	b958      	cbnz	r0, 200a6 <net_buf_ref+0x1e>
   2008e:	4908      	ldr	r1, [pc, #32]	; (200b0 <net_buf_ref+0x28>)
   20090:	4808      	ldr	r0, [pc, #32]	; (200b4 <net_buf_ref+0x2c>)
   20092:	4a09      	ldr	r2, [pc, #36]	; (200b8 <net_buf_ref+0x30>)
   20094:	f240 233f 	movw	r3, #575	; 0x23f
   20098:	f008 fd7f 	bl	28b9a <printk>
   2009c:	4806      	ldr	r0, [pc, #24]	; (200b8 <net_buf_ref+0x30>)
   2009e:	f240 213f 	movw	r1, #575	; 0x23f
   200a2:	f008 ffbb 	bl	2901c <assert_post_action>

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   200a6:	7923      	ldrb	r3, [r4, #4]
   200a8:	3301      	adds	r3, #1
   200aa:	7123      	strb	r3, [r4, #4]
	return buf;
}
   200ac:	4620      	mov	r0, r4
   200ae:	bd10      	pop	{r4, pc}
   200b0:	00030ef1 	.word	0x00030ef1
   200b4:	0002e93e 	.word	0x0002e93e
   200b8:	00033234 	.word	0x00033234

000200bc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   200bc:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(buf);
   200be:	4604      	mov	r4, r0
   200c0:	b958      	cbnz	r0, 200da <net_buf_frag_last+0x1e>
   200c2:	4908      	ldr	r1, [pc, #32]	; (200e4 <net_buf_frag_last+0x28>)
   200c4:	4808      	ldr	r0, [pc, #32]	; (200e8 <net_buf_frag_last+0x2c>)
   200c6:	4a09      	ldr	r2, [pc, #36]	; (200ec <net_buf_frag_last+0x30>)
   200c8:	f44f 731f 	mov.w	r3, #636	; 0x27c
   200cc:	f008 fd65 	bl	28b9a <printk>
   200d0:	4806      	ldr	r0, [pc, #24]	; (200ec <net_buf_frag_last+0x30>)
   200d2:	f44f 711f 	mov.w	r1, #636	; 0x27c
   200d6:	f008 ffa1 	bl	2901c <assert_post_action>

	while (buf->frags) {
   200da:	4620      	mov	r0, r4
   200dc:	6824      	ldr	r4, [r4, #0]
   200de:	2c00      	cmp	r4, #0
   200e0:	d1fb      	bne.n	200da <net_buf_frag_last+0x1e>
		buf = buf->frags;
	}

	return buf;
}
   200e2:	bd10      	pop	{r4, pc}
   200e4:	00030ef1 	.word	0x00030ef1
   200e8:	0002e93e 	.word	0x0002e93e
   200ec:	00033234 	.word	0x00033234

000200f0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   200f0:	b538      	push	{r3, r4, r5, lr}
   200f2:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(parent);
   200f4:	4604      	mov	r4, r0
   200f6:	b958      	cbnz	r0, 20110 <net_buf_frag_insert+0x20>
   200f8:	4910      	ldr	r1, [pc, #64]	; (2013c <net_buf_frag_insert+0x4c>)
   200fa:	4811      	ldr	r0, [pc, #68]	; (20140 <net_buf_frag_insert+0x50>)
   200fc:	4a11      	ldr	r2, [pc, #68]	; (20144 <net_buf_frag_insert+0x54>)
   200fe:	f240 2387 	movw	r3, #647	; 0x287
   20102:	f008 fd4a 	bl	28b9a <printk>
   20106:	480f      	ldr	r0, [pc, #60]	; (20144 <net_buf_frag_insert+0x54>)
   20108:	f240 2187 	movw	r1, #647	; 0x287
   2010c:	f008 ff86 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(frag);
   20110:	b95d      	cbnz	r5, 2012a <net_buf_frag_insert+0x3a>
   20112:	490d      	ldr	r1, [pc, #52]	; (20148 <net_buf_frag_insert+0x58>)
   20114:	480a      	ldr	r0, [pc, #40]	; (20140 <net_buf_frag_insert+0x50>)
   20116:	4a0b      	ldr	r2, [pc, #44]	; (20144 <net_buf_frag_insert+0x54>)
   20118:	f44f 7322 	mov.w	r3, #648	; 0x288
   2011c:	f008 fd3d 	bl	28b9a <printk>
   20120:	4808      	ldr	r0, [pc, #32]	; (20144 <net_buf_frag_insert+0x54>)
   20122:	f44f 7122 	mov.w	r1, #648	; 0x288
   20126:	f008 ff79 	bl	2901c <assert_post_action>

	if (parent->frags) {
   2012a:	6823      	ldr	r3, [r4, #0]
   2012c:	b123      	cbz	r3, 20138 <net_buf_frag_insert+0x48>
		net_buf_frag_last(frag)->frags = parent->frags;
   2012e:	4628      	mov	r0, r5
   20130:	f7ff ffc4 	bl	200bc <net_buf_frag_last>
   20134:	6823      	ldr	r3, [r4, #0]
   20136:	6003      	str	r3, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   20138:	6025      	str	r5, [r4, #0]
}
   2013a:	bd38      	pop	{r3, r4, r5, pc}
   2013c:	000332bc 	.word	0x000332bc
   20140:	0002e93e 	.word	0x0002e93e
   20144:	00033234 	.word	0x00033234
   20148:	000332c3 	.word	0x000332c3

0002014c <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2014c:	b538      	push	{r3, r4, r5, lr}
   2014e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(frag);
   20150:	460d      	mov	r5, r1
   20152:	b959      	cbnz	r1, 2016c <net_buf_frag_add+0x20>
   20154:	490c      	ldr	r1, [pc, #48]	; (20188 <net_buf_frag_add+0x3c>)
   20156:	480d      	ldr	r0, [pc, #52]	; (2018c <net_buf_frag_add+0x40>)
   20158:	4a0d      	ldr	r2, [pc, #52]	; (20190 <net_buf_frag_add+0x44>)
   2015a:	f240 2393 	movw	r3, #659	; 0x293
   2015e:	f008 fd1c 	bl	28b9a <printk>
   20162:	480b      	ldr	r0, [pc, #44]	; (20190 <net_buf_frag_add+0x44>)
   20164:	f240 2193 	movw	r1, #659	; 0x293
   20168:	f008 ff58 	bl	2901c <assert_post_action>

	if (!head) {
   2016c:	b924      	cbnz	r4, 20178 <net_buf_frag_add+0x2c>
		return net_buf_ref(frag);
   2016e:	4628      	mov	r0, r5
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   20170:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return net_buf_ref(frag);
   20174:	f7ff bf88 	b.w	20088 <net_buf_ref>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   20178:	4620      	mov	r0, r4
   2017a:	f7ff ff9f 	bl	200bc <net_buf_frag_last>
   2017e:	4629      	mov	r1, r5
   20180:	f7ff ffb6 	bl	200f0 <net_buf_frag_insert>
}
   20184:	4620      	mov	r0, r4
   20186:	bd38      	pop	{r3, r4, r5, pc}
   20188:	000332c3 	.word	0x000332c3
   2018c:	0002e93e 	.word	0x0002e93e
   20190:	00033234 	.word	0x00033234

00020194 <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   20194:	b538      	push	{r3, r4, r5, lr}
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   20196:	6882      	ldr	r2, [r0, #8]
   20198:	6803      	ldr	r3, [r0, #0]
   2019a:	1a9b      	subs	r3, r3, r2
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   2019c:	4299      	cmp	r1, r3
{
   2019e:	4604      	mov	r4, r0
   201a0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);
   201a2:	d90b      	bls.n	201bc <net_buf_simple_push+0x28>
   201a4:	4909      	ldr	r1, [pc, #36]	; (201cc <net_buf_simple_push+0x38>)
   201a6:	480a      	ldr	r0, [pc, #40]	; (201d0 <net_buf_simple_push+0x3c>)
   201a8:	4a0a      	ldr	r2, [pc, #40]	; (201d4 <net_buf_simple_push+0x40>)
   201aa:	f240 4317 	movw	r3, #1047	; 0x417
   201ae:	f008 fcf4 	bl	28b9a <printk>
   201b2:	4808      	ldr	r0, [pc, #32]	; (201d4 <net_buf_simple_push+0x40>)
   201b4:	f240 4117 	movw	r1, #1047	; 0x417
   201b8:	f008 ff30 	bl	2901c <assert_post_action>
	buf->data -= len;
   201bc:	6820      	ldr	r0, [r4, #0]
	buf->len += len;
   201be:	88a1      	ldrh	r1, [r4, #4]
	buf->data -= len;
   201c0:	1b40      	subs	r0, r0, r5
	buf->len += len;
   201c2:	440d      	add	r5, r1
	buf->data -= len;
   201c4:	6020      	str	r0, [r4, #0]
	buf->len += len;
   201c6:	80a5      	strh	r5, [r4, #4]
}
   201c8:	bd38      	pop	{r3, r4, r5, pc}
   201ca:	bf00      	nop
   201cc:	000332d8 	.word	0x000332d8
   201d0:	0002e93e 	.word	0x0002e93e
   201d4:	00033234 	.word	0x00033234

000201d8 <net_buf_simple_pull>:
{
   201d8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(buf->len >= len);
   201da:	8883      	ldrh	r3, [r0, #4]
   201dc:	428b      	cmp	r3, r1
{
   201de:	4604      	mov	r4, r0
   201e0:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   201e2:	d20b      	bcs.n	201fc <net_buf_simple_pull+0x24>
   201e4:	4909      	ldr	r1, [pc, #36]	; (2020c <net_buf_simple_pull+0x34>)
   201e6:	480a      	ldr	r0, [pc, #40]	; (20210 <net_buf_simple_pull+0x38>)
   201e8:	4a0a      	ldr	r2, [pc, #40]	; (20214 <net_buf_simple_pull+0x3c>)
   201ea:	f240 4377 	movw	r3, #1143	; 0x477
   201ee:	f008 fcd4 	bl	28b9a <printk>
   201f2:	4808      	ldr	r0, [pc, #32]	; (20214 <net_buf_simple_pull+0x3c>)
   201f4:	f240 4177 	movw	r1, #1143	; 0x477
   201f8:	f008 ff10 	bl	2901c <assert_post_action>
	buf->len -= len;
   201fc:	88a3      	ldrh	r3, [r4, #4]
	return buf->data += len;
   201fe:	6820      	ldr	r0, [r4, #0]
	buf->len -= len;
   20200:	1b5b      	subs	r3, r3, r5
	return buf->data += len;
   20202:	4428      	add	r0, r5
	buf->len -= len;
   20204:	80a3      	strh	r3, [r4, #4]
	return buf->data += len;
   20206:	6020      	str	r0, [r4, #0]
}
   20208:	bd38      	pop	{r3, r4, r5, pc}
   2020a:	bf00      	nop
   2020c:	000332c8 	.word	0x000332c8
   20210:	0002e93e 	.word	0x0002e93e
   20214:	00033234 	.word	0x00033234

00020218 <net_buf_simple_pull_mem>:
	__ASSERT_NO_MSG(buf->len >= len);
   20218:	8883      	ldrh	r3, [r0, #4]
   2021a:	428b      	cmp	r3, r1
{
   2021c:	b570      	push	{r4, r5, r6, lr}
	void *data = buf->data;
   2021e:	6806      	ldr	r6, [r0, #0]
{
   20220:	4604      	mov	r4, r0
   20222:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(buf->len >= len);
   20224:	d20b      	bcs.n	2023e <net_buf_simple_pull_mem+0x26>
   20226:	490a      	ldr	r1, [pc, #40]	; (20250 <net_buf_simple_pull_mem+0x38>)
   20228:	480a      	ldr	r0, [pc, #40]	; (20254 <net_buf_simple_pull_mem+0x3c>)
   2022a:	4a0b      	ldr	r2, [pc, #44]	; (20258 <net_buf_simple_pull_mem+0x40>)
   2022c:	f240 4383 	movw	r3, #1155	; 0x483
   20230:	f008 fcb3 	bl	28b9a <printk>
   20234:	4808      	ldr	r0, [pc, #32]	; (20258 <net_buf_simple_pull_mem+0x40>)
   20236:	f240 4183 	movw	r1, #1155	; 0x483
   2023a:	f008 feef 	bl	2901c <assert_post_action>
	buf->len -= len;
   2023e:	88a3      	ldrh	r3, [r4, #4]
	buf->data += len;
   20240:	6821      	ldr	r1, [r4, #0]
	buf->len -= len;
   20242:	1b5b      	subs	r3, r3, r5
	buf->data += len;
   20244:	4429      	add	r1, r5
	buf->len -= len;
   20246:	80a3      	strh	r3, [r4, #4]
	buf->data += len;
   20248:	6021      	str	r1, [r4, #0]
}
   2024a:	4630      	mov	r0, r6
   2024c:	bd70      	pop	{r4, r5, r6, pc}
   2024e:	bf00      	nop
   20250:	000332c8 	.word	0x000332c8
   20254:	0002e93e 	.word	0x0002e93e
   20258:	00033234 	.word	0x00033234

0002025c <net_buf_simple_add>:
{
   2025c:	b570      	push	{r4, r5, r6, lr}
	return buf->data + buf->len;
   2025e:	6803      	ldr	r3, [r0, #0]
   20260:	8886      	ldrh	r6, [r0, #4]
   20262:	4604      	mov	r4, r0
   20264:	460d      	mov	r5, r1
   20266:	441e      	add	r6, r3
	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);
   20268:	f00b fefe 	bl	2c068 <net_buf_simple_tailroom>
   2026c:	4288      	cmp	r0, r1
   2026e:	d20b      	bcs.n	20288 <net_buf_simple_add+0x2c>
   20270:	4908      	ldr	r1, [pc, #32]	; (20294 <net_buf_simple_add+0x38>)
   20272:	4809      	ldr	r0, [pc, #36]	; (20298 <net_buf_simple_add+0x3c>)
   20274:	4a09      	ldr	r2, [pc, #36]	; (2029c <net_buf_simple_add+0x40>)
   20276:	f44f 734a 	mov.w	r3, #808	; 0x328
   2027a:	f008 fc8e 	bl	28b9a <printk>
   2027e:	4807      	ldr	r0, [pc, #28]	; (2029c <net_buf_simple_add+0x40>)
   20280:	f44f 714a 	mov.w	r1, #808	; 0x328
   20284:	f008 feca 	bl	2901c <assert_post_action>
	buf->len += len;
   20288:	88a1      	ldrh	r1, [r4, #4]
   2028a:	440d      	add	r5, r1
   2028c:	80a5      	strh	r5, [r4, #4]
}
   2028e:	4630      	mov	r0, r6
   20290:	bd70      	pop	{r4, r5, r6, pc}
   20292:	bf00      	nop
   20294:	000332fc 	.word	0x000332fc
   20298:	0002e93e 	.word	0x0002e93e
   2029c:	00033234 	.word	0x00033234

000202a0 <net_buf_append_bytes>:
{
   202a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202a4:	e9dd 890c 	ldrd	r8, r9, [sp, #48]	; 0x30
   202a8:	4606      	mov	r6, r0
   202aa:	460c      	mov	r4, r1
   202ac:	9200      	str	r2, [sp, #0]
	struct net_buf *frag = net_buf_frag_last(buf);
   202ae:	f7ff ff05 	bl	200bc <net_buf_frag_last>
	size_t added_len = 0;
   202b2:	2700      	movs	r7, #0
	struct net_buf *frag = net_buf_frag_last(buf);
   202b4:	4683      	mov	fp, r0
	return &_net_buf_pool_list[id];
   202b6:	f04f 0a34 	mov.w	sl, #52	; 0x34
	return net_buf_simple_tailroom(&buf->b);
   202ba:	f10b 0b08 	add.w	fp, fp, #8
   202be:	4658      	mov	r0, fp
   202c0:	f00b fed2 	bl	2c068 <net_buf_simple_tailroom>
		uint16_t count = MIN(len, net_buf_tailroom(frag));
   202c4:	4284      	cmp	r4, r0
   202c6:	bf2c      	ite	cs
   202c8:	b282      	uxthcs	r2, r0
   202ca:	b2a2      	uxthcc	r2, r4
	return net_buf_simple_add_mem(&buf->b, mem, len);
   202cc:	9900      	ldr	r1, [sp, #0]
   202ce:	9201      	str	r2, [sp, #4]
   202d0:	4658      	mov	r0, fp
   202d2:	f00b fed1 	bl	2c078 <net_buf_simple_add_mem>
		added_len += count;
   202d6:	9a01      	ldr	r2, [sp, #4]
		value8 += count;
   202d8:	9b00      	ldr	r3, [sp, #0]
		if (len == 0) {
   202da:	1aa4      	subs	r4, r4, r2
		value8 += count;
   202dc:	4413      	add	r3, r2
		added_len += count;
   202de:	4417      	add	r7, r2
		value8 += count;
   202e0:	9300      	str	r3, [sp, #0]
		if (len == 0) {
   202e2:	d016      	beq.n	20312 <net_buf_append_bytes+0x72>
		if (allocate_cb) {
   202e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   202e6:	b153      	cbz	r3, 202fe <net_buf_append_bytes+0x5e>
			frag = allocate_cb(timeout, user_data);
   202e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   202ea:	4640      	mov	r0, r8
   202ec:	4649      	mov	r1, r9
   202ee:	4798      	blx	r3
			frag = net_buf_alloc_len(pool, len, timeout);
   202f0:	4683      	mov	fp, r0
		if (!frag) {
   202f2:	b170      	cbz	r0, 20312 <net_buf_append_bytes+0x72>
		net_buf_frag_add(buf, frag);
   202f4:	4601      	mov	r1, r0
   202f6:	4630      	mov	r0, r6
   202f8:	f7ff ff28 	bl	2014c <net_buf_frag_add>
	do {
   202fc:	e7dd      	b.n	202ba <net_buf_append_bytes+0x1a>
	return &_net_buf_pool_list[id];
   202fe:	79b0      	ldrb	r0, [r6, #6]
			frag = net_buf_alloc_len(pool, len, timeout);
   20300:	4d06      	ldr	r5, [pc, #24]	; (2031c <net_buf_append_bytes+0x7c>)
   20302:	4642      	mov	r2, r8
   20304:	464b      	mov	r3, r9
   20306:	4621      	mov	r1, r4
   20308:	fb00 500a 	mla	r0, r0, sl, r5
   2030c:	f7ff fcce 	bl	1fcac <net_buf_alloc_len>
   20310:	e7ee      	b.n	202f0 <net_buf_append_bytes+0x50>
}
   20312:	4638      	mov	r0, r7
   20314:	b003      	add	sp, #12
   20316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2031a:	bf00      	nop
   2031c:	200008f0 	.word	0x200008f0

00020320 <timing_init>:

static bool has_inited;
static atomic_val_t started_ref;

void timing_init(void)
{
   20320:	b510      	push	{r4, lr}
	if (has_inited) {
   20322:	4c04      	ldr	r4, [pc, #16]	; (20334 <timing_init+0x14>)
   20324:	7823      	ldrb	r3, [r4, #0]
   20326:	b91b      	cbnz	r3, 20330 <timing_init+0x10>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_init();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_init();
#else
	arch_timing_init();
   20328:	f7f6 fb76 	bl	16a18 <arch_timing_init>
#endif

	has_inited = true;
   2032c:	2301      	movs	r3, #1
   2032e:	7023      	strb	r3, [r4, #0]
}
   20330:	bd10      	pop	{r4, pc}
   20332:	bf00      	nop
   20334:	20002d81 	.word	0x20002d81

00020338 <timing_start>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   20338:	4b07      	ldr	r3, [pc, #28]	; (20358 <timing_start+0x20>)
   2033a:	f3bf 8f5b 	dmb	ish
   2033e:	e853 2f00 	ldrex	r2, [r3]
   20342:	1c51      	adds	r1, r2, #1
   20344:	e843 1000 	strex	r0, r1, [r3]
   20348:	2800      	cmp	r0, #0
   2034a:	d1f8      	bne.n	2033e <timing_start+0x6>
   2034c:	f3bf 8f5b 	dmb	ish

void timing_start(void)
{
	if (atomic_inc(&started_ref) != 0) {
   20350:	b90a      	cbnz	r2, 20356 <timing_start+0x1e>
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	board_timing_start();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	soc_timing_start();
#else
	arch_timing_start();
   20352:	f7f6 bb8d 	b.w	16a70 <arch_timing_start>
#endif
}
   20356:	4770      	bx	lr
   20358:	2000283c 	.word	0x2000283c

0002035c <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
   2035c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
   20360:	4c0e      	ldr	r4, [pc, #56]	; (2039c <onoff_start+0x40>)
   20362:	1b05      	subs	r5, r0, r4
   20364:	f3c5 1347 	ubfx	r3, r5, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
   20368:	250c      	movs	r5, #12
   2036a:	435d      	muls	r5, r3
{
   2036c:	4607      	mov	r7, r0
	err = set_starting_state(&subdata->flags, ctx);
   2036e:	f105 0048 	add.w	r0, r5, #72	; 0x48
{
   20372:	460e      	mov	r6, r1
	err = set_starting_state(&subdata->flags, ctx);
   20374:	4420      	add	r0, r4
   20376:	2140      	movs	r1, #64	; 0x40
   20378:	f00b fe93 	bl	2c0a2 <set_starting_state>
	if (err < 0) {
   2037c:	1e01      	subs	r1, r0, #0
   2037e:	db08      	blt.n	20392 <onoff_start+0x36>
	subdata->cb = cb;
   20380:	4b07      	ldr	r3, [pc, #28]	; (203a0 <onoff_start+0x44>)
   20382:	442c      	add	r4, r5
	subdata->user_data = user_data;
   20384:	e9c4 3610 	strd	r3, r6, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   20388:	4b06      	ldr	r3, [pc, #24]	; (203a4 <onoff_start+0x48>)
   2038a:	595b      	ldr	r3, [r3, r5]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
   2038c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
   20390:	4718      	bx	r3
		notify(mgr, err);
   20392:	4638      	mov	r0, r7
   20394:	4633      	mov	r3, r6
}
   20396:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
   2039a:	4718      	bx	r3
   2039c:	20002850 	.word	0x20002850
   203a0:	0002c105 	.word	0x0002c105
   203a4:	0002e3a0 	.word	0x0002e3a0

000203a8 <get_status>:
{
   203a8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   203aa:	b2cc      	uxtb	r4, r1
   203ac:	2c01      	cmp	r4, #1
{
   203ae:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   203b0:	d909      	bls.n	203c6 <get_status+0x1e>
   203b2:	4909      	ldr	r1, [pc, #36]	; (203d8 <get_status+0x30>)
   203b4:	4809      	ldr	r0, [pc, #36]	; (203dc <get_status+0x34>)
   203b6:	4a0a      	ldr	r2, [pc, #40]	; (203e0 <get_status+0x38>)
   203b8:	2379      	movs	r3, #121	; 0x79
   203ba:	f008 fbee 	bl	28b9a <printk>
   203be:	4808      	ldr	r0, [pc, #32]	; (203e0 <get_status+0x38>)
   203c0:	2179      	movs	r1, #121	; 0x79
   203c2:	f008 fe2b 	bl	2901c <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
   203c6:	692b      	ldr	r3, [r5, #16]
   203c8:	210c      	movs	r1, #12
   203ca:	fb04 3401 	mla	r4, r4, r1, r3
   203ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
   203d0:	f000 0007 	and.w	r0, r0, #7
   203d4:	bd38      	pop	{r3, r4, r5, pc}
   203d6:	bf00      	nop
   203d8:	00033365 	.word	0x00033365
   203dc:	0002e93e 	.word	0x0002e93e
   203e0:	00033328 	.word	0x00033328

000203e4 <stop>:
{
   203e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   203e6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   203e8:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   203ea:	6907      	ldr	r7, [r0, #16]
{
   203ec:	4605      	mov	r5, r0
   203ee:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
   203f0:	d90b      	bls.n	2040a <stop+0x26>
   203f2:	4919      	ldr	r1, [pc, #100]	; (20458 <stop+0x74>)
   203f4:	4819      	ldr	r0, [pc, #100]	; (2045c <stop+0x78>)
   203f6:	4a1a      	ldr	r2, [pc, #104]	; (20460 <stop+0x7c>)
   203f8:	f240 134d 	movw	r3, #333	; 0x14d
   203fc:	f008 fbcd 	bl	28b9a <printk>
   20400:	4817      	ldr	r0, [pc, #92]	; (20460 <stop+0x7c>)
   20402:	f240 114d 	movw	r1, #333	; 0x14d
   20406:	f008 fe09 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2040a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2040e:	f3ef 8211 	mrs	r2, BASEPRI
   20412:	f383 8812 	msr	BASEPRI_MAX, r3
   20416:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2041a:	230c      	movs	r3, #12
   2041c:	fb03 7104 	mla	r1, r3, r4, r7
   20420:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   20422:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
   20426:	d001      	beq.n	2042c <stop+0x48>
   20428:	428e      	cmp	r6, r1
   2042a:	d111      	bne.n	20450 <stop+0x6c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   2042c:	fb03 7304 	mla	r3, r3, r4, r7
   20430:	2101      	movs	r1, #1
   20432:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
   20434:	2000      	movs	r0, #0
	__asm__ volatile(
   20436:	f382 8811 	msr	BASEPRI, r2
   2043a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2043e:	b930      	cbnz	r0, 2044e <stop+0x6a>
	get_sub_config(dev, type)->stop();
   20440:	6869      	ldr	r1, [r5, #4]
   20442:	230c      	movs	r3, #12
   20444:	fb03 1404 	mla	r4, r3, r4, r1
   20448:	6863      	ldr	r3, [r4, #4]
   2044a:	4798      	blx	r3
	return 0;
   2044c:	2000      	movs	r0, #0
}
   2044e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
   20450:	f04f 30ff 	mov.w	r0, #4294967295
   20454:	e7ef      	b.n	20436 <stop+0x52>
   20456:	bf00      	nop
   20458:	00033365 	.word	0x00033365
   2045c:	0002e93e 	.word	0x0002e93e
   20460:	00033328 	.word	0x00033328

00020464 <onoff_stop>:
{
   20464:	b570      	push	{r4, r5, r6, lr}
   20466:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
   20468:	4906      	ldr	r1, [pc, #24]	; (20484 <onoff_stop+0x20>)
   2046a:	1a41      	subs	r1, r0, r1
{
   2046c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2046e:	1149      	asrs	r1, r1, #5
   20470:	4805      	ldr	r0, [pc, #20]	; (20488 <onoff_stop+0x24>)
   20472:	2240      	movs	r2, #64	; 0x40
   20474:	f7ff ffb6 	bl	203e4 <stop>
	notify(mgr, res);
   20478:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
   2047a:	4601      	mov	r1, r0
	notify(mgr, res);
   2047c:	4620      	mov	r0, r4
}
   2047e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
   20482:	4718      	bx	r3
   20484:	20002850 	.word	0x20002850
   20488:	0002cfa4 	.word	0x0002cfa4

0002048c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   2048c:	2200      	movs	r2, #0
{
   2048e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20490:	2101      	movs	r1, #1
{
   20492:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   20494:	4610      	mov	r0, r2
   20496:	f7f5 fd6d 	bl	15f74 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
   2049a:	2000      	movs	r0, #0
   2049c:	f7f5 fd38 	bl	15f10 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
   204a0:	480f      	ldr	r0, [pc, #60]	; (204e0 <clk_init+0x54>)
   204a2:	f002 faa5 	bl	229f0 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
   204a6:	4b0f      	ldr	r3, [pc, #60]	; (204e4 <clk_init+0x58>)
   204a8:	4298      	cmp	r0, r3
   204aa:	d115      	bne.n	204d8 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
   204ac:	f00c f925 	bl	2c6fa <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
   204b0:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
   204b2:	490d      	ldr	r1, [pc, #52]	; (204e8 <clk_init+0x5c>)
   204b4:	4630      	mov	r0, r6
   204b6:	f008 fbcb 	bl	28c50 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
   204ba:	2800      	cmp	r0, #0
   204bc:	db0b      	blt.n	204d6 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   204be:	2501      	movs	r5, #1
   204c0:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
   204c2:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
   204c4:	4908      	ldr	r1, [pc, #32]	; (204e8 <clk_init+0x5c>)
   204c6:	f104 0020 	add.w	r0, r4, #32
   204ca:	f008 fbc1 	bl	28c50 <onoff_manager_init>
		if (err < 0) {
   204ce:	2800      	cmp	r0, #0
   204d0:	db01      	blt.n	204d6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
   204d2:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
   204d4:	2000      	movs	r0, #0
}
   204d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
   204d8:	f06f 0004 	mvn.w	r0, #4
   204dc:	e7fb      	b.n	204d6 <clk_init+0x4a>
   204de:	bf00      	nop
   204e0:	00020521 	.word	0x00020521
   204e4:	0bad0000 	.word	0x0bad0000
   204e8:	0002e3e8 	.word	0x0002e3e8

000204ec <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
   204ec:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
   204ee:	230c      	movs	r3, #12
   204f0:	4809      	ldr	r0, [pc, #36]	; (20518 <clkstarted_handle.constprop.0+0x2c>)
   204f2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
   204f4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
   204f6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
   204f8:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
   204fc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
   204fe:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
   20500:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
   20502:	4418      	add	r0, r3
   20504:	f00b fdeb 	bl	2c0de <set_on_state>
	if (callback) {
   20508:	b12d      	cbz	r5, 20516 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
   2050a:	4632      	mov	r2, r6
   2050c:	462b      	mov	r3, r5
   2050e:	4803      	ldr	r0, [pc, #12]	; (2051c <clkstarted_handle.constprop.0+0x30>)
}
   20510:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
   20514:	4718      	bx	r3
}
   20516:	bd70      	pop	{r4, r5, r6, pc}
   20518:	20002850 	.word	0x20002850
   2051c:	0002cfa4 	.word	0x0002cfa4

00020520 <clock_event_handler>:
	switch (event) {
   20520:	2801      	cmp	r0, #1
{
   20522:	b508      	push	{r3, lr}
	switch (event) {
   20524:	d006      	beq.n	20534 <clock_event_handler+0x14>
   20526:	2803      	cmp	r0, #3
   20528:	d008      	beq.n	2053c <clock_event_handler+0x1c>
   2052a:	b9a8      	cbnz	r0, 20558 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
   2052c:	4b10      	ldr	r3, [pc, #64]	; (20570 <clock_event_handler+0x50>)
   2052e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   20530:	075b      	lsls	r3, r3, #29
   20532:	d11b      	bne.n	2056c <clock_event_handler+0x4c>
}
   20534:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
   20538:	f7ff bfd8 	b.w	204ec <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
   2053c:	490d      	ldr	r1, [pc, #52]	; (20574 <clock_event_handler+0x54>)
   2053e:	4a0e      	ldr	r2, [pc, #56]	; (20578 <clock_event_handler+0x58>)
   20540:	480e      	ldr	r0, [pc, #56]	; (2057c <clock_event_handler+0x5c>)
   20542:	f240 235e 	movw	r3, #606	; 0x25e
   20546:	f008 fb28 	bl	28b9a <printk>
   2054a:	f240 215e 	movw	r1, #606	; 0x25e
}
   2054e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
   20552:	4809      	ldr	r0, [pc, #36]	; (20578 <clock_event_handler+0x58>)
   20554:	f008 bd62 	b.w	2901c <assert_post_action>
   20558:	4906      	ldr	r1, [pc, #24]	; (20574 <clock_event_handler+0x54>)
   2055a:	4a07      	ldr	r2, [pc, #28]	; (20578 <clock_event_handler+0x58>)
   2055c:	4807      	ldr	r0, [pc, #28]	; (2057c <clock_event_handler+0x5c>)
   2055e:	f240 2362 	movw	r3, #610	; 0x262
   20562:	f008 fb1a 	bl	28b9a <printk>
   20566:	f240 2162 	movw	r1, #610	; 0x262
   2056a:	e7f0      	b.n	2054e <clock_event_handler+0x2e>
}
   2056c:	bd08      	pop	{r3, pc}
   2056e:	bf00      	nop
   20570:	20002850 	.word	0x20002850
   20574:	00034515 	.word	0x00034515
   20578:	00033328 	.word	0x00033328
   2057c:	0002e93e 	.word	0x0002e93e

00020580 <hfclk_start>:
{
   20580:	b510      	push	{r4, lr}
	return z_impl_k_uptime_ticks();
   20582:	f00c fa79 	bl	2ca78 <z_impl_k_uptime_ticks>
   20586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2058a:	460c      	mov	r4, r1
   2058c:	fba0 0103 	umull	r0, r1, r0, r3
   20590:	fb03 1104 	mla	r1, r3, r4, r1
		hf_start_tstamp = k_uptime_get();
   20594:	4a05      	ldr	r2, [pc, #20]	; (205ac <hfclk_start+0x2c>)
   20596:	0bc3      	lsrs	r3, r0, #15
   20598:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}
   2059c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   205a0:	0bc9      	lsrs	r1, r1, #15
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
   205a2:	2001      	movs	r0, #1
		hf_start_tstamp = k_uptime_get();
   205a4:	e9c2 3100 	strd	r3, r1, [r2]
   205a8:	f002 b9d8 	b.w	2295c <nrfx_clock_start>
   205ac:	20001de8 	.word	0x20001de8

000205b0 <generic_hfclk_start>:
{
   205b0:	b508      	push	{r3, lr}
	__asm__ volatile(
   205b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   205b6:	f3ef 8111 	mrs	r1, BASEPRI
   205ba:	f383 8812 	msr	BASEPRI_MAX, r3
   205be:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
   205c2:	4a11      	ldr	r2, [pc, #68]	; (20608 <generic_hfclk_start+0x58>)
   205c4:	6813      	ldr	r3, [r2, #0]
   205c6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
   205ca:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
   205ce:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
   205d0:	d00c      	beq.n	205ec <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   205d2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   205d6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   205da:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
   205de:	f013 0301 	ands.w	r3, r3, #1
   205e2:	d003      	beq.n	205ec <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
   205e4:	4809      	ldr	r0, [pc, #36]	; (2060c <generic_hfclk_start+0x5c>)
   205e6:	f00b fd7a 	bl	2c0de <set_on_state>
			already_started = true;
   205ea:	2301      	movs	r3, #1
	__asm__ volatile(
   205ec:	f381 8811 	msr	BASEPRI, r1
   205f0:	f3bf 8f6f 	isb	sy
	if (already_started) {
   205f4:	b123      	cbz	r3, 20600 <generic_hfclk_start+0x50>
}
   205f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
   205fa:	2000      	movs	r0, #0
   205fc:	f7ff bf76 	b.w	204ec <clkstarted_handle.constprop.0>
}
   20600:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	hfclk_start();
   20604:	f7ff bfbc 	b.w	20580 <hfclk_start>
   20608:	200028a8 	.word	0x200028a8
   2060c:	20002898 	.word	0x20002898

00020610 <hfclk_stop>:
{
   20610:	b510      	push	{r4, lr}
   20612:	f00c fa31 	bl	2ca78 <z_impl_k_uptime_ticks>
   20616:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   2061a:	460c      	mov	r4, r1
   2061c:	fba0 0103 	umull	r0, r1, r0, r3
   20620:	fb03 1104 	mla	r1, r3, r4, r1
		hf_stop_tstamp = k_uptime_get();
   20624:	4a05      	ldr	r2, [pc, #20]	; (2063c <hfclk_stop+0x2c>)
   20626:	0bc3      	lsrs	r3, r0, #15
   20628:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
}
   2062c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20630:	0bc9      	lsrs	r1, r1, #15
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
   20632:	2001      	movs	r0, #1
		hf_stop_tstamp = k_uptime_get();
   20634:	e9c2 3100 	strd	r3, r1, [r2]
   20638:	f002 b9ba 	b.w	229b0 <nrfx_clock_stop>
   2063c:	20001df0 	.word	0x20001df0

00020640 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   20640:	4b08      	ldr	r3, [pc, #32]	; (20664 <generic_hfclk_stop+0x24>)
   20642:	f3bf 8f5b 	dmb	ish
   20646:	e853 2f00 	ldrex	r2, [r3]
   2064a:	f022 0102 	bic.w	r1, r2, #2
   2064e:	e843 1000 	strex	r0, r1, [r3]
   20652:	2800      	cmp	r0, #0
   20654:	d1f7      	bne.n	20646 <generic_hfclk_stop+0x6>
   20656:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
   2065a:	07d3      	lsls	r3, r2, #31
   2065c:	d401      	bmi.n	20662 <generic_hfclk_stop+0x22>
	hfclk_stop();
   2065e:	f7ff bfd7 	b.w	20610 <hfclk_stop>
}
   20662:	4770      	bx	lr
   20664:	200028a8 	.word	0x200028a8

00020668 <cmd_status>:
		 &data, &config,
		 PRE_KERNEL_1, CONFIG_CLOCK_CONTROL_INIT_PRIORITY,
		 &clock_control_api);

static int cmd_status(const struct shell *shell, size_t argc, char **argv)
{
   20668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2066c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
   20670:	4604      	mov	r4, r0
   20672:	f8d7 6418 	ldr.w	r6, [r7, #1048]	; 0x418
   20676:	f406 3680 	and.w	r6, r6, #65536	; 0x10000
	__asm__ volatile(
   2067a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2067e:	f3ef 8811 	mrs	r8, BASEPRI
   20682:	f383 8812 	msr	BASEPRI_MAX, r3
   20686:	f3bf 8f6f 	isb	sy
   2068a:	f00c f9f5 	bl	2ca78 <z_impl_k_uptime_ticks>
   2068e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20692:	460a      	mov	r2, r1
   20694:	fba0 0103 	umull	r0, r1, r0, r3
   20698:	fb03 1102 	mla	r1, r3, r2, r1
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   2069c:	f8d7 940c 	ldr.w	r9, [r7, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   206a0:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
	uint64_t now = k_uptime_get();

	(void)nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, (void *)&hfclk_src);
	hf_status = (hfclk_src == NRF_CLOCK_HFCLK_HIGH_ACCURACY);

	abs_start = hf_start_tstamp;
   206a4:	4b25      	ldr	r3, [pc, #148]	; (2073c <cmd_status+0xd4>)
   206a6:	f8d3 b000 	ldr.w	fp, [r3]
	abs_stop = hf_stop_tstamp;
   206aa:	4b25      	ldr	r3, [pc, #148]	; (20740 <cmd_status+0xd8>)
   206ac:	0bc5      	lsrs	r5, r0, #15
   206ae:	f8d3 a000 	ldr.w	sl, [r3]
   206b2:	ea45 4541 	orr.w	r5, r5, r1, lsl #17
	__asm__ volatile(
   206b6:	f388 8811 	msr	BASEPRI, r8
   206ba:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	shell_print(shell, "HF clock:");
   206be:	4a21      	ldr	r2, [pc, #132]	; (20744 <cmd_status+0xdc>)
	shell_print(shell, "\t- %srunning (users: %u)",
   206c0:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2075c <cmd_status+0xf4>
   206c4:	4f20      	ldr	r7, [pc, #128]	; (20748 <cmd_status+0xe0>)
	shell_print(shell, "HF clock:");
   206c6:	4620      	mov	r0, r4
   206c8:	2108      	movs	r1, #8
   206ca:	f009 fa57 	bl	29b7c <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   206ce:	f019 0f01 	tst.w	r9, #1
   206d2:	f8df 908c 	ldr.w	r9, [pc, #140]	; 20760 <cmd_status+0xf8>
   206d6:	4a1d      	ldr	r2, [pc, #116]	; (2074c <cmd_status+0xe4>)
   206d8:	f8b9 301e 	ldrh.w	r3, [r9, #30]
   206dc:	9300      	str	r3, [sp, #0]
   206de:	4620      	mov	r0, r4
   206e0:	bf14      	ite	ne
   206e2:	4643      	movne	r3, r8
   206e4:	463b      	moveq	r3, r7
   206e6:	2108      	movs	r1, #8
   206e8:	f009 fa48 	bl	29b7c <shell_fprintf>
			hf_status ? "" : "not ", hf_mgr->refs);
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   206ec:	eba5 030b 	sub.w	r3, r5, fp
   206f0:	9300      	str	r3, [sp, #0]
   206f2:	4620      	mov	r0, r4
   206f4:	465b      	mov	r3, fp
   206f6:	4a16      	ldr	r2, [pc, #88]	; (20750 <cmd_status+0xe8>)
   206f8:	2108      	movs	r1, #8
			(uint32_t)abs_start, (uint32_t)(now - abs_start));
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   206fa:	eba5 050a 	sub.w	r5, r5, sl
	shell_print(shell, "\t- last start: %u ms (%u ms ago)",
   206fe:	f009 fa3d 	bl	29b7c <shell_fprintf>
	shell_print(shell, "\t- last stop: %u ms (%u ms ago)",
   20702:	4653      	mov	r3, sl
   20704:	4620      	mov	r0, r4
   20706:	4a13      	ldr	r2, [pc, #76]	; (20754 <cmd_status+0xec>)
   20708:	9500      	str	r5, [sp, #0]
   2070a:	2108      	movs	r1, #8
   2070c:	f009 fa36 	bl	29b7c <shell_fprintf>
			(uint32_t)abs_stop, (uint32_t)(now - abs_stop));
	shell_print(shell, "LF clock:");
   20710:	4620      	mov	r0, r4
   20712:	4a11      	ldr	r2, [pc, #68]	; (20758 <cmd_status+0xf0>)
   20714:	2108      	movs	r1, #8
   20716:	f009 fa31 	bl	29b7c <shell_fprintf>
	shell_print(shell, "\t- %srunning (users: %u)",
   2071a:	f8b9 303e 	ldrh.w	r3, [r9, #62]	; 0x3e
   2071e:	9300      	str	r3, [sp, #0]
   20720:	4620      	mov	r0, r4
   20722:	4a0a      	ldr	r2, [pc, #40]	; (2074c <cmd_status+0xe4>)
   20724:	2e00      	cmp	r6, #0
   20726:	bf14      	ite	ne
   20728:	4643      	movne	r3, r8
   2072a:	463b      	moveq	r3, r7
   2072c:	2108      	movs	r1, #8
   2072e:	f009 fa25 	bl	29b7c <shell_fprintf>
			lf_status ? "" : "not ", lf_mgr->refs);

	return 0;
}
   20732:	2000      	movs	r0, #0
   20734:	b003      	add	sp, #12
   20736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2073a:	bf00      	nop
   2073c:	20001de8 	.word	0x20001de8
   20740:	20001df0 	.word	0x20001df0
   20744:	0003338e 	.word	0x0003338e
   20748:	00033389 	.word	0x00033389
   2074c:	00033399 	.word	0x00033399
   20750:	000333b3 	.word	0x000333b3
   20754:	000333d5 	.word	0x000333d5
   20758:	000333f6 	.word	0x000333f6
   2075c:	0003329b 	.word	0x0003329b
   20760:	20002850 	.word	0x20002850

00020764 <api_blocking_start>:
{
   20764:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20766:	2200      	movs	r2, #0
   20768:	2301      	movs	r3, #1
   2076a:	e9cd 2302 	strd	r2, r3, [sp, #8]
   2076e:	ab04      	add	r3, sp, #16
   20770:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20774:	4a09      	ldr	r2, [pc, #36]	; (2079c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   20776:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   2077a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
   2077c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
   20780:	f00b fcd2 	bl	2c128 <api_start>
	if (err < 0) {
   20784:	2800      	cmp	r0, #0
   20786:	db05      	blt.n	20794 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
   20788:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   2078c:	2300      	movs	r3, #0
   2078e:	4668      	mov	r0, sp
   20790:	f004 faec 	bl	24d6c <z_impl_k_sem_take>
}
   20794:	b007      	add	sp, #28
   20796:	f85d fb04 	ldr.w	pc, [sp], #4
   2079a:	bf00      	nop
   2079c:	0002c123 	.word	0x0002c123

000207a0 <z_nrf_clock_control_lf_on>:
{
   207a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   207a4:	4949      	ldr	r1, [pc, #292]	; (208cc <z_nrf_clock_control_lf_on+0x12c>)
   207a6:	f3bf 8f5b 	dmb	ish
   207aa:	4605      	mov	r5, r0
   207ac:	2201      	movs	r2, #1
   207ae:	e851 3f00 	ldrex	r3, [r1]
   207b2:	e841 2000 	strex	r0, r2, [r1]
   207b6:	2800      	cmp	r0, #0
   207b8:	d1f9      	bne.n	207ae <z_nrf_clock_control_lf_on+0xe>
   207ba:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
   207be:	b9a3      	cbnz	r3, 207ea <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
   207c0:	4943      	ldr	r1, [pc, #268]	; (208d0 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
   207c2:	4844      	ldr	r0, [pc, #272]	; (208d4 <z_nrf_clock_control_lf_on+0x134>)
   207c4:	604b      	str	r3, [r1, #4]
   207c6:	60cb      	str	r3, [r1, #12]
   207c8:	608a      	str	r2, [r1, #8]
   207ca:	f7ef ff6b 	bl	106a4 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
   207ce:	2800      	cmp	r0, #0
   207d0:	da0b      	bge.n	207ea <z_nrf_clock_control_lf_on+0x4a>
   207d2:	4941      	ldr	r1, [pc, #260]	; (208d8 <z_nrf_clock_control_lf_on+0x138>)
   207d4:	4841      	ldr	r0, [pc, #260]	; (208dc <z_nrf_clock_control_lf_on+0x13c>)
   207d6:	4a42      	ldr	r2, [pc, #264]	; (208e0 <z_nrf_clock_control_lf_on+0x140>)
   207d8:	f44f 7308 	mov.w	r3, #544	; 0x220
   207dc:	f008 f9dd 	bl	28b9a <printk>
   207e0:	483f      	ldr	r0, [pc, #252]	; (208e0 <z_nrf_clock_control_lf_on+0x140>)
   207e2:	f44f 7108 	mov.w	r1, #544	; 0x220
   207e6:	f008 fc19 	bl	2901c <assert_post_action>
	switch (start_mode) {
   207ea:	b3ad      	cbz	r5, 20858 <z_nrf_clock_control_lf_on+0xb8>
   207ec:	1e6b      	subs	r3, r5, #1
   207ee:	2b01      	cmp	r3, #1
   207f0:	d856      	bhi.n	208a0 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
   207f2:	2d01      	cmp	r5, #1
   207f4:	d107      	bne.n	20806 <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
   207f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   207fa:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
   207fe:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
   20802:	2b01      	cmp	r3, #1
   20804:	d028      	beq.n	20858 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   20806:	f00c f83b 	bl	2c880 <k_is_in_isr>
   2080a:	4604      	mov	r4, r0
   2080c:	b918      	cbnz	r0, 20816 <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
   2080e:	4b35      	ldr	r3, [pc, #212]	; (208e4 <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
   20810:	781b      	ldrb	r3, [r3, #0]
   20812:	2b00      	cmp	r3, #0
   20814:	d152      	bne.n	208bc <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
   20816:	f04f 0340 	mov.w	r3, #64	; 0x40
   2081a:	f3ef 8611 	mrs	r6, BASEPRI
   2081e:	f383 8812 	msr	BASEPRI_MAX, r3
   20822:	f3bf 8f6f 	isb	sy
   20826:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20828:	4f2f      	ldr	r7, [pc, #188]	; (208e8 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   2082a:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 208f0 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2082e:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 208f4 <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   20832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   20836:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   2083a:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
   2083e:	03d2      	lsls	r2, r2, #15
   20840:	d50c      	bpl.n	2085c <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   20842:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
   20846:	2b01      	cmp	r3, #1
   20848:	d001      	beq.n	2084e <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
   2084a:	2d01      	cmp	r5, #1
   2084c:	d106      	bne.n	2085c <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
   2084e:	b30c      	cbz	r4, 20894 <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
   20850:	f386 8811 	msr	BASEPRI, r6
   20854:	f3bf 8f6f 	isb	sy
}
   20858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
   2085c:	b1ac      	cbz	r4, 2088a <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
   2085e:	4630      	mov	r0, r6
   20860:	f7f5 fb08 	bl	15e74 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
   20864:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   20868:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
   2086c:	2b00      	cmp	r3, #0
   2086e:	d1e0      	bne.n	20832 <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   20870:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
   20872:	2900      	cmp	r1, #0
   20874:	d0dd      	beq.n	20832 <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   20876:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
   20878:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
   2087a:	2301      	movs	r3, #1
   2087c:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
   20880:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   20884:	f8c9 3000 	str.w	r3, [r9]
}
   20888:	e7d3      	b.n	20832 <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
   2088a:	2100      	movs	r1, #0
   2088c:	2021      	movs	r0, #33	; 0x21
   2088e:	f006 f8e1 	bl	26a54 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   20892:	e7e7      	b.n	20864 <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
   20894:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   20898:	2202      	movs	r2, #2
   2089a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2089e:	e7db      	b.n	20858 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
   208a0:	4912      	ldr	r1, [pc, #72]	; (208ec <z_nrf_clock_control_lf_on+0x14c>)
   208a2:	480e      	ldr	r0, [pc, #56]	; (208dc <z_nrf_clock_control_lf_on+0x13c>)
   208a4:	4a0e      	ldr	r2, [pc, #56]	; (208e0 <z_nrf_clock_control_lf_on+0x140>)
   208a6:	f240 2332 	movw	r3, #562	; 0x232
   208aa:	f008 f976 	bl	28b9a <printk>
}
   208ae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
   208b2:	480b      	ldr	r0, [pc, #44]	; (208e0 <z_nrf_clock_control_lf_on+0x140>)
   208b4:	f240 2132 	movw	r1, #562	; 0x232
   208b8:	f008 bbb0 	b.w	2901c <assert_post_action>
    p_reg->INTENCLR = mask;
   208bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   208c0:	2202      	movs	r2, #2
   208c2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
   208c6:	4606      	mov	r6, r0
}
   208c8:	e7ae      	b.n	20828 <z_nrf_clock_control_lf_on+0x88>
   208ca:	bf00      	nop
   208cc:	200028ac 	.word	0x200028ac
   208d0:	20002840 	.word	0x20002840
   208d4:	20002870 	.word	0x20002870
   208d8:	00033401 	.word	0x00033401
   208dc:	0002e93e 	.word	0x0002e93e
   208e0:	00033328 	.word	0x00033328
   208e4:	200036e5 	.word	0x200036e5
   208e8:	40000104 	.word	0x40000104
   208ec:	00034515 	.word	0x00034515
   208f0:	e000e100 	.word	0xe000e100
   208f4:	40000008 	.word	0x40000008

000208f8 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
   208f8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
   208fa:	4b08      	ldr	r3, [pc, #32]	; (2091c <uart_console_init+0x24>)
   208fc:	4808      	ldr	r0, [pc, #32]	; (20920 <uart_console_init+0x28>)
   208fe:	6018      	str	r0, [r3, #0]
   20900:	f00b ff78 	bl	2c7f4 <z_device_ready>
   20904:	b138      	cbz	r0, 20916 <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
   20906:	4807      	ldr	r0, [pc, #28]	; (20924 <uart_console_init+0x2c>)
   20908:	f7f6 fa30 	bl	16d6c <__stdout_hook_install>
	__printk_hook_install(console_out);
   2090c:	4805      	ldr	r0, [pc, #20]	; (20924 <uart_console_init+0x2c>)
   2090e:	f7ef fc75 	bl	101fc <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
   20912:	2000      	movs	r0, #0
}
   20914:	bd08      	pop	{r3, pc}
		return -ENODEV;
   20916:	f06f 0012 	mvn.w	r0, #18
   2091a:	e7fb      	b.n	20914 <uart_console_init+0x1c>
   2091c:	200028b0 	.word	0x200028b0
   20920:	0002d01c 	.word	0x0002d01c
   20924:	00020929 	.word	0x00020929

00020928 <console_out>:
	if ('\n' == c) {
   20928:	280a      	cmp	r0, #10
{
   2092a:	b538      	push	{r3, r4, r5, lr}
   2092c:	4d07      	ldr	r5, [pc, #28]	; (2094c <console_out+0x24>)
   2092e:	4604      	mov	r4, r0
	if ('\n' == c) {
   20930:	d104      	bne.n	2093c <console_out+0x14>
   20932:	6828      	ldr	r0, [r5, #0]
	api->poll_out(dev, out_char);
   20934:	6883      	ldr	r3, [r0, #8]
   20936:	210d      	movs	r1, #13
   20938:	69db      	ldr	r3, [r3, #28]
   2093a:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
   2093c:	6828      	ldr	r0, [r5, #0]
   2093e:	6883      	ldr	r3, [r0, #8]
   20940:	b2e1      	uxtb	r1, r4
   20942:	69db      	ldr	r3, [r3, #28]
   20944:	4798      	blx	r3
}
   20946:	4620      	mov	r0, r4
   20948:	bd38      	pop	{r3, r4, r5, pc}
   2094a:	bf00      	nop
   2094c:	200028b0 	.word	0x200028b0

00020950 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
   20950:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   20952:	6905      	ldr	r5, [r0, #16]
{
   20954:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
   20956:	460c      	mov	r4, r1
   20958:	b961      	cbnz	r1, 20974 <gpio_nrfx_manage_callback+0x24>
   2095a:	4922      	ldr	r1, [pc, #136]	; (209e4 <gpio_nrfx_manage_callback+0x94>)
   2095c:	4a22      	ldr	r2, [pc, #136]	; (209e8 <gpio_nrfx_manage_callback+0x98>)
   2095e:	4823      	ldr	r0, [pc, #140]	; (209ec <gpio_nrfx_manage_callback+0x9c>)
   20960:	2324      	movs	r3, #36	; 0x24
   20962:	f008 f91a 	bl	28b9a <printk>
   20966:	4822      	ldr	r0, [pc, #136]	; (209f0 <gpio_nrfx_manage_callback+0xa0>)
   20968:	f008 f917 	bl	28b9a <printk>
   2096c:	481e      	ldr	r0, [pc, #120]	; (209e8 <gpio_nrfx_manage_callback+0x98>)
   2096e:	2124      	movs	r1, #36	; 0x24
   20970:	f008 fb54 	bl	2901c <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
   20974:	6863      	ldr	r3, [r4, #4]
   20976:	b963      	cbnz	r3, 20992 <gpio_nrfx_manage_callback+0x42>
   20978:	491e      	ldr	r1, [pc, #120]	; (209f4 <gpio_nrfx_manage_callback+0xa4>)
   2097a:	4a1b      	ldr	r2, [pc, #108]	; (209e8 <gpio_nrfx_manage_callback+0x98>)
   2097c:	481b      	ldr	r0, [pc, #108]	; (209ec <gpio_nrfx_manage_callback+0x9c>)
   2097e:	2325      	movs	r3, #37	; 0x25
   20980:	f008 f90b 	bl	28b9a <printk>
   20984:	481c      	ldr	r0, [pc, #112]	; (209f8 <gpio_nrfx_manage_callback+0xa8>)
   20986:	f008 f908 	bl	28b9a <printk>
   2098a:	4817      	ldr	r0, [pc, #92]	; (209e8 <gpio_nrfx_manage_callback+0x98>)
   2098c:	2125      	movs	r1, #37	; 0x25
   2098e:	f008 fb45 	bl	2901c <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
   20992:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
   20994:	b15b      	cbz	r3, 209ae <gpio_nrfx_manage_callback+0x5e>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   20996:	2200      	movs	r2, #0
   20998:	429c      	cmp	r4, r3
   2099a:	d113      	bne.n	209c4 <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
   2099c:	6823      	ldr	r3, [r4, #0]
   2099e:	b95a      	cbnz	r2, 209b8 <gpio_nrfx_manage_callback+0x68>
   209a0:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
   209a2:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
   209a4:	4294      	cmp	r4, r2
   209a6:	d100      	bne.n	209aa <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
   209a8:	60ab      	str	r3, [r5, #8]
	parent->next = child;
   209aa:	2300      	movs	r3, #0
   209ac:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   209ae:	b976      	cbnz	r6, 209ce <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   209b0:	2000      	movs	r0, #0
				     callback, set);
}
   209b2:	bd70      	pop	{r4, r5, r6, pc}
   209b4:	460b      	mov	r3, r1
   209b6:	e7ef      	b.n	20998 <gpio_nrfx_manage_callback+0x48>
   209b8:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   209ba:	68ab      	ldr	r3, [r5, #8]
   209bc:	429c      	cmp	r4, r3
	list->tail = node;
   209be:	bf08      	it	eq
   209c0:	60aa      	streq	r2, [r5, #8]
}
   209c2:	e7f2      	b.n	209aa <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   209c4:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   209c6:	461a      	mov	r2, r3
   209c8:	2900      	cmp	r1, #0
   209ca:	d1f3      	bne.n	209b4 <gpio_nrfx_manage_callback+0x64>
			if (!set) {
   209cc:	b13e      	cbz	r6, 209de <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
   209ce:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   209d0:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   209d2:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
   209d4:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   209d6:	2800      	cmp	r0, #0
   209d8:	d1ea      	bne.n	209b0 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
   209da:	60ac      	str	r4, [r5, #8]
}
   209dc:	e7e9      	b.n	209b2 <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
   209de:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   209e2:	e7e6      	b.n	209b2 <gpio_nrfx_manage_callback+0x62>
   209e4:	0003347a 	.word	0x0003347a
   209e8:	0003344d 	.word	0x0003344d
   209ec:	0002e93e 	.word	0x0002e93e
   209f0:	00033483 	.word	0x00033483
   209f4:	00033492 	.word	0x00033492
   209f8:	000334a4 	.word	0x000334a4

000209fc <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   209fc:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
   209fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20a02:	d003      	beq.n	20a0c <nrfx_gpio_handler+0x10>
   20a04:	2b01      	cmp	r3, #1
   20a06:	d036      	beq.n	20a76 <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
   20a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20a0c:	4f1b      	ldr	r7, [pc, #108]	; (20a7c <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20a0e:	693b      	ldr	r3, [r7, #16]
   20a10:	685c      	ldr	r4, [r3, #4]
   20a12:	2c00      	cmp	r4, #0
   20a14:	d0f8      	beq.n	20a08 <nrfx_gpio_handler+0xc>
   20a16:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
   20a18:	f8df 806c 	ldr.w	r8, [pc, #108]	; 20a88 <nrfx_gpio_handler+0x8c>
   20a1c:	f8df 906c 	ldr.w	r9, [pc, #108]	; 20a8c <nrfx_gpio_handler+0x90>
   20a20:	f8df a06c 	ldr.w	sl, [pc, #108]	; 20a90 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
   20a24:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
   20a28:	2601      	movs	r6, #1
   20a2a:	2d00      	cmp	r5, #0
   20a2c:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
   20a30:	bf38      	it	cc
   20a32:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
   20a34:	68a3      	ldr	r3, [r4, #8]
   20a36:	421e      	tst	r6, r3
   20a38:	d014      	beq.n	20a64 <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
   20a3a:	6863      	ldr	r3, [r4, #4]
   20a3c:	b963      	cbnz	r3, 20a58 <nrfx_gpio_handler+0x5c>
   20a3e:	4649      	mov	r1, r9
   20a40:	2345      	movs	r3, #69	; 0x45
   20a42:	4642      	mov	r2, r8
   20a44:	4650      	mov	r0, sl
   20a46:	f008 f8a8 	bl	28b9a <printk>
   20a4a:	480d      	ldr	r0, [pc, #52]	; (20a80 <nrfx_gpio_handler+0x84>)
   20a4c:	f008 f8a5 	bl	28b9a <printk>
   20a50:	2145      	movs	r1, #69	; 0x45
   20a52:	4640      	mov	r0, r8
   20a54:	f008 fae2 	bl	2901c <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
   20a58:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
   20a5c:	4621      	mov	r1, r4
   20a5e:	4032      	ands	r2, r6
   20a60:	4638      	mov	r0, r7
   20a62:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   20a64:	2d00      	cmp	r5, #0
   20a66:	d0cf      	beq.n	20a08 <nrfx_gpio_handler+0xc>
   20a68:	682b      	ldr	r3, [r5, #0]
   20a6a:	2b00      	cmp	r3, #0
   20a6c:	bf38      	it	cc
   20a6e:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   20a70:	462c      	mov	r4, r5
   20a72:	461d      	mov	r5, r3
   20a74:	e7de      	b.n	20a34 <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
   20a76:	4f03      	ldr	r7, [pc, #12]	; (20a84 <nrfx_gpio_handler+0x88>)
   20a78:	e7c9      	b.n	20a0e <nrfx_gpio_handler+0x12>
   20a7a:	bf00      	nop
   20a7c:	0002cfbc 	.word	0x0002cfbc
   20a80:	000334a4 	.word	0x000334a4
   20a84:	0002cfd4 	.word	0x0002cfd4
   20a88:	0003344d 	.word	0x0003344d
   20a8c:	000334bb 	.word	0x000334bb
   20a90:	0002e93e 	.word	0x0002e93e

00020a94 <gpio_nrfx_pin_interrupt_configure>:
{
   20a94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20a96:	6840      	ldr	r0, [r0, #4]
   20a98:	7b05      	ldrb	r5, [r0, #12]
   20a9a:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
   20a9e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   20aa2:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
   20aa6:	f04f 0500 	mov.w	r5, #0
   20aaa:	d104      	bne.n	20ab6 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
   20aac:	4620      	mov	r0, r4
   20aae:	f002 fb53 	bl	23158 <nrfx_gpiote_trigger_disable>
	return 0;
   20ab2:	2000      	movs	r0, #0
   20ab4:	e054      	b.n	20b60 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
   20ab6:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
   20aba:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
   20abe:	d151      	bne.n	20b64 <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
   20ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   20ac4:	bf0c      	ite	eq
   20ac6:	2304      	moveq	r3, #4
   20ac8:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
   20aca:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
   20ace:	6883      	ldr	r3, [r0, #8]
   20ad0:	fa23 f101 	lsr.w	r1, r3, r1
   20ad4:	f011 0101 	ands.w	r1, r1, #1
   20ad8:	d155      	bne.n	20b86 <gpio_nrfx_pin_interrupt_configure+0xf2>
   20ada:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   20ade:	d152      	bne.n	20b86 <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
   20ae0:	0966      	lsrs	r6, r4, #5
   20ae2:	d04a      	beq.n	20b7a <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
   20ae4:	f240 33ff 	movw	r3, #1023	; 0x3ff
   20ae8:	2e01      	cmp	r6, #1
   20aea:	bf08      	it	eq
   20aec:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
   20aee:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20af2:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20af4:	07ca      	lsls	r2, r1, #31
   20af6:	d40b      	bmi.n	20b10 <gpio_nrfx_pin_interrupt_configure+0x7c>
   20af8:	492b      	ldr	r1, [pc, #172]	; (20ba8 <gpio_nrfx_pin_interrupt_configure+0x114>)
   20afa:	482c      	ldr	r0, [pc, #176]	; (20bac <gpio_nrfx_pin_interrupt_configure+0x118>)
   20afc:	4a2c      	ldr	r2, [pc, #176]	; (20bb0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   20afe:	f240 2329 	movw	r3, #553	; 0x229
   20b02:	f008 f84a 	bl	28b9a <printk>
   20b06:	482a      	ldr	r0, [pc, #168]	; (20bb0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   20b08:	f240 2129 	movw	r1, #553	; 0x229
   20b0c:	f008 fa86 	bl	2901c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20b10:	b16e      	cbz	r6, 20b2e <gpio_nrfx_pin_interrupt_configure+0x9a>
   20b12:	2e01      	cmp	r6, #1
   20b14:	d034      	beq.n	20b80 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
   20b16:	4927      	ldr	r1, [pc, #156]	; (20bb4 <gpio_nrfx_pin_interrupt_configure+0x120>)
   20b18:	4824      	ldr	r0, [pc, #144]	; (20bac <gpio_nrfx_pin_interrupt_configure+0x118>)
   20b1a:	4a25      	ldr	r2, [pc, #148]	; (20bb0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   20b1c:	f240 232e 	movw	r3, #558	; 0x22e
   20b20:	f008 f83b 	bl	28b9a <printk>
   20b24:	4822      	ldr	r0, [pc, #136]	; (20bb0 <gpio_nrfx_pin_interrupt_configure+0x11c>)
   20b26:	f240 212e 	movw	r1, #558	; 0x22e
   20b2a:	f008 fa77 	bl	2901c <assert_post_action>
        case 0: return NRF_P0;
   20b2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   20b32:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
   20b36:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
   20b3a:	07db      	lsls	r3, r3, #31
   20b3c:	d423      	bmi.n	20b86 <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
   20b3e:	f10d 0507 	add.w	r5, sp, #7
   20b42:	4629      	mov	r1, r5
   20b44:	4620      	mov	r0, r4
   20b46:	f002 fa31 	bl	22fac <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
   20b4a:	4b1b      	ldr	r3, [pc, #108]	; (20bb8 <gpio_nrfx_pin_interrupt_configure+0x124>)
   20b4c:	4298      	cmp	r0, r3
   20b4e:	d119      	bne.n	20b84 <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
   20b50:	4628      	mov	r0, r5
   20b52:	f002 fa8b 	bl	2306c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
   20b56:	4b19      	ldr	r3, [pc, #100]	; (20bbc <gpio_nrfx_pin_interrupt_configure+0x128>)
   20b58:	4298      	cmp	r0, r3
   20b5a:	d013      	beq.n	20b84 <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
   20b5c:	f06f 000b 	mvn.w	r0, #11
}
   20b60:	b004      	add	sp, #16
   20b62:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
   20b64:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   20b68:	d005      	beq.n	20b76 <gpio_nrfx_pin_interrupt_configure+0xe2>
   20b6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
   20b6e:	bf0c      	ite	eq
   20b70:	2302      	moveq	r3, #2
   20b72:	2301      	movne	r3, #1
   20b74:	e7a9      	b.n	20aca <gpio_nrfx_pin_interrupt_configure+0x36>
   20b76:	2303      	movs	r3, #3
   20b78:	e7a7      	b.n	20aca <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
   20b7a:	f04f 31ff 	mov.w	r1, #4294967295
   20b7e:	e7b6      	b.n	20aee <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20b80:	4b0f      	ldr	r3, [pc, #60]	; (20bc0 <gpio_nrfx_pin_interrupt_configure+0x12c>)
   20b82:	e7d6      	b.n	20b32 <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
   20b84:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20b86:	2300      	movs	r3, #0
   20b88:	4619      	mov	r1, r3
   20b8a:	aa02      	add	r2, sp, #8
   20b8c:	4620      	mov	r0, r4
   20b8e:	f002 f8ef 	bl	22d70 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20b92:	4b0a      	ldr	r3, [pc, #40]	; (20bbc <gpio_nrfx_pin_interrupt_configure+0x128>)
   20b94:	4298      	cmp	r0, r3
   20b96:	d104      	bne.n	20ba2 <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
   20b98:	2101      	movs	r1, #1
   20b9a:	4620      	mov	r0, r4
   20b9c:	f002 fa6c 	bl	23078 <nrfx_gpiote_trigger_enable>
   20ba0:	e787      	b.n	20ab2 <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
   20ba2:	f06f 0004 	mvn.w	r0, #4
   20ba6:	e7db      	b.n	20b60 <gpio_nrfx_pin_interrupt_configure+0xcc>
   20ba8:	000334fa 	.word	0x000334fa
   20bac:	0002e93e 	.word	0x0002e93e
   20bb0:	000334c7 	.word	0x000334c7
   20bb4:	00034515 	.word	0x00034515
   20bb8:	0bad0004 	.word	0x0bad0004
   20bbc:	0bad0000 	.word	0x0bad0000
   20bc0:	50000300 	.word	0x50000300

00020bc4 <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   20bc4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
   20bc6:	f002 fa41 	bl	2304c <nrfx_gpiote_is_init>
   20bca:	4604      	mov	r4, r0
   20bcc:	b968      	cbnz	r0, 20bea <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
   20bce:	f002 fa15 	bl	22ffc <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
   20bd2:	4b08      	ldr	r3, [pc, #32]	; (20bf4 <gpio_nrfx_init+0x30>)
   20bd4:	4298      	cmp	r0, r3
   20bd6:	d10a      	bne.n	20bee <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
   20bd8:	4807      	ldr	r0, [pc, #28]	; (20bf8 <gpio_nrfx_init+0x34>)
   20bda:	4621      	mov	r1, r4
   20bdc:	f002 f9e0 	bl	22fa0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   20be0:	4622      	mov	r2, r4
   20be2:	2105      	movs	r1, #5
   20be4:	2006      	movs	r0, #6
   20be6:	f7f5 f9c5 	bl	15f74 <z_arm_irq_priority_set>
		return 0;
   20bea:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
   20bec:	bd10      	pop	{r4, pc}
		return -EIO;
   20bee:	f06f 0004 	mvn.w	r0, #4
   20bf2:	e7fb      	b.n	20bec <gpio_nrfx_init+0x28>
   20bf4:	0bad0000 	.word	0x0bad0000
   20bf8:	000209fd 	.word	0x000209fd

00020bfc <gpio_nrfx_pin_configure>:
{
   20bfc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   20c00:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20c02:	7b3b      	ldrb	r3, [r7, #12]
   20c04:	f001 051f 	and.w	r5, r1, #31
{
   20c08:	b085      	sub	sp, #20
   20c0a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   20c0c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
   20c10:	4614      	mov	r4, r2
   20c12:	b9ca      	cbnz	r2, 20c48 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
   20c14:	a902      	add	r1, sp, #8
   20c16:	4628      	mov	r0, r5
   20c18:	f002 f9c8 	bl	22fac <nrfx_gpiote_channel_get>
   20c1c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
   20c1e:	4628      	mov	r0, r5
   20c20:	f002 fabc 	bl	2319c <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
   20c24:	4b48      	ldr	r3, [pc, #288]	; (20d48 <gpio_nrfx_pin_configure+0x14c>)
   20c26:	4298      	cmp	r0, r3
   20c28:	d004      	beq.n	20c34 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
   20c2a:	f06f 0004 	mvn.w	r0, #4
}
   20c2e:	b005      	add	sp, #20
   20c30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
   20c34:	4284      	cmp	r4, r0
   20c36:	d105      	bne.n	20c44 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
   20c38:	f89d 0008 	ldrb.w	r0, [sp, #8]
   20c3c:	f002 fa10 	bl	23060 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
   20c40:	42a0      	cmp	r0, r4
   20c42:	d1f2      	bne.n	20c2a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   20c44:	2000      	movs	r0, #0
   20c46:	e7f2      	b.n	20c2e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
   20c48:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
   20c4c:	f10d 0103 	add.w	r1, sp, #3
   20c50:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
   20c52:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
   20c56:	f002 f9a9 	bl	22fac <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20c5a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
   20c5c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
   20c5e:	aa02      	add	r2, sp, #8
   20c60:	4649      	mov	r1, r9
   20c62:	4628      	mov	r0, r5
   20c64:	f002 f884 	bl	22d70 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
   20c68:	4b37      	ldr	r3, [pc, #220]	; (20d48 <gpio_nrfx_pin_configure+0x14c>)
   20c6a:	4298      	cmp	r0, r3
   20c6c:	d002      	beq.n	20c74 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   20c6e:	f06f 0015 	mvn.w	r0, #21
   20c72:	e7dc      	b.n	20c2e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
   20c74:	4580      	cmp	r8, r0
   20c76:	d103      	bne.n	20c80 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
   20c78:	f89d 0003 	ldrb.w	r0, [sp, #3]
   20c7c:	f002 f9f0 	bl	23060 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
   20c80:	05a3      	lsls	r3, r4, #22
   20c82:	d54e      	bpl.n	20d22 <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   20c84:	4b31      	ldr	r3, [pc, #196]	; (20d4c <gpio_nrfx_pin_configure+0x150>)
   20c86:	4a32      	ldr	r2, [pc, #200]	; (20d50 <gpio_nrfx_pin_configure+0x154>)
   20c88:	4023      	ands	r3, r4
   20c8a:	4293      	cmp	r3, r2
   20c8c:	d03a      	beq.n	20d04 <gpio_nrfx_pin_configure+0x108>
   20c8e:	d80c      	bhi.n	20caa <gpio_nrfx_pin_configure+0xae>
   20c90:	2b06      	cmp	r3, #6
   20c92:	d014      	beq.n	20cbe <gpio_nrfx_pin_configure+0xc2>
   20c94:	d804      	bhi.n	20ca0 <gpio_nrfx_pin_configure+0xa4>
   20c96:	b193      	cbz	r3, 20cbe <gpio_nrfx_pin_configure+0xc2>
   20c98:	2b02      	cmp	r3, #2
   20c9a:	d1e8      	bne.n	20c6e <gpio_nrfx_pin_configure+0x72>
   20c9c:	2304      	movs	r3, #4
   20c9e:	e00e      	b.n	20cbe <gpio_nrfx_pin_configure+0xc2>
   20ca0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   20ca4:	d1e3      	bne.n	20c6e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
   20ca6:	2301      	movs	r3, #1
   20ca8:	e009      	b.n	20cbe <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   20caa:	4a2a      	ldr	r2, [pc, #168]	; (20d54 <gpio_nrfx_pin_configure+0x158>)
   20cac:	4293      	cmp	r3, r2
   20cae:	d02b      	beq.n	20d08 <gpio_nrfx_pin_configure+0x10c>
   20cb0:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   20cb4:	d02a      	beq.n	20d0c <gpio_nrfx_pin_configure+0x110>
   20cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   20cba:	d1d8      	bne.n	20c6e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
   20cbc:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
   20cbe:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
   20cc2:	f484 7380 	eor.w	r3, r4, #256	; 0x100
   20cc6:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
   20cca:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
   20ccc:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
   20cd0:	bf54      	ite	pl
   20cd2:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
   20cd6:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20cd8:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
   20cda:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
   20cde:	d517      	bpl.n	20d10 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
   20ce0:	687b      	ldr	r3, [r7, #4]
   20ce2:	2101      	movs	r1, #1
   20ce4:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
   20ce8:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
   20cec:	2200      	movs	r2, #0
   20cee:	a901      	add	r1, sp, #4
   20cf0:	4628      	mov	r0, r5
   20cf2:	f002 f8e5 	bl	22ec0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   20cf6:	4b14      	ldr	r3, [pc, #80]	; (20d48 <gpio_nrfx_pin_configure+0x14c>)
   20cf8:	4298      	cmp	r0, r3
   20cfa:	bf14      	ite	ne
   20cfc:	f06f 0015 	mvnne.w	r0, #21
   20d00:	2000      	moveq	r0, #0
   20d02:	e794      	b.n	20c2e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
   20d04:	2307      	movs	r3, #7
   20d06:	e7da      	b.n	20cbe <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
   20d08:	2305      	movs	r3, #5
   20d0a:	e7d8      	b.n	20cbe <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
   20d0c:	2303      	movs	r3, #3
   20d0e:	e7d6      	b.n	20cbe <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
   20d10:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
   20d12:	bf41      	itttt	mi
   20d14:	687b      	ldrmi	r3, [r7, #4]
   20d16:	2101      	movmi	r1, #1
   20d18:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
   20d1c:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
   20d20:	e7e4      	b.n	20cec <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
   20d22:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20d24:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
   20d28:	bf54      	ite	pl
   20d2a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
   20d2e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20d30:	461a      	mov	r2, r3
   20d32:	a901      	add	r1, sp, #4
   20d34:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
   20d36:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
   20d3a:	f002 f819 	bl	22d70 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
   20d3e:	4b02      	ldr	r3, [pc, #8]	; (20d48 <gpio_nrfx_pin_configure+0x14c>)
   20d40:	4298      	cmp	r0, r3
   20d42:	f43f af7f 	beq.w	20c44 <gpio_nrfx_pin_configure+0x48>
   20d46:	e792      	b.n	20c6e <gpio_nrfx_pin_configure+0x72>
   20d48:	0bad0000 	.word	0x0bad0000
   20d4c:	00f00006 	.word	0x00f00006
   20d50:	00100006 	.word	0x00100006
   20d54:	00400002 	.word	0x00400002

00020d58 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   20d58:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   20d5a:	794b      	ldrb	r3, [r1, #5]
   20d5c:	2b01      	cmp	r3, #1
   20d5e:	d028      	beq.n	20db2 <uarte_nrfx_configure+0x5a>
   20d60:	2b03      	cmp	r3, #3
   20d62:	d123      	bne.n	20dac <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   20d64:	2410      	movs	r4, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   20d66:	798b      	ldrb	r3, [r1, #6]
   20d68:	2b03      	cmp	r3, #3
   20d6a:	d11f      	bne.n	20dac <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   20d6c:	79ce      	ldrb	r6, [r1, #7]
   20d6e:	b10e      	cbz	r6, 20d74 <uarte_nrfx_configure+0x1c>
   20d70:	2e01      	cmp	r6, #1
   20d72:	d11b      	bne.n	20dac <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   20d74:	790a      	ldrb	r2, [r1, #4]
   20d76:	2a01      	cmp	r2, #1
   20d78:	d01d      	beq.n	20db6 <uarte_nrfx_configure+0x5e>
   20d7a:	2a02      	cmp	r2, #2
   20d7c:	d01f      	beq.n	20dbe <uarte_nrfx_configure+0x66>
   20d7e:	b9aa      	cbnz	r2, 20dac <uarte_nrfx_configure+0x54>
   20d80:	4615      	mov	r5, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   20d82:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   20d84:	6847      	ldr	r7, [r0, #4]
	switch (baudrate) {
   20d86:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   20d8a:	683f      	ldr	r7, [r7, #0]
	switch (baudrate) {
   20d8c:	d06e      	beq.n	20e6c <uarte_nrfx_configure+0x114>
   20d8e:	d833      	bhi.n	20df8 <uarte_nrfx_configure+0xa0>
   20d90:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   20d94:	d06d      	beq.n	20e72 <uarte_nrfx_configure+0x11a>
   20d96:	d81c      	bhi.n	20dd2 <uarte_nrfx_configure+0x7a>
   20d98:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   20d9c:	d06b      	beq.n	20e76 <uarte_nrfx_configure+0x11e>
   20d9e:	d810      	bhi.n	20dc2 <uarte_nrfx_configure+0x6a>
   20da0:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   20da4:	d06a      	beq.n	20e7c <uarte_nrfx_configure+0x124>
   20da6:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   20daa:	d06a      	beq.n	20e82 <uarte_nrfx_configure+0x12a>
   20dac:	f06f 0085 	mvn.w	r0, #133	; 0x85
   20db0:	e05b      	b.n	20e6a <uarte_nrfx_configure+0x112>
	switch (cfg->stop_bits) {
   20db2:	2400      	movs	r4, #0
   20db4:	e7d7      	b.n	20d66 <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
   20db6:	f44f 7580 	mov.w	r5, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   20dba:	220e      	movs	r2, #14
   20dbc:	e7e1      	b.n	20d82 <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
   20dbe:	2500      	movs	r5, #0
   20dc0:	e7fb      	b.n	20dba <uarte_nrfx_configure+0x62>
	switch (baudrate) {
   20dc2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   20dc6:	d05f      	beq.n	20e88 <uarte_nrfx_configure+0x130>
   20dc8:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   20dcc:	d1ee      	bne.n	20dac <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   20dce:	4b39      	ldr	r3, [pc, #228]	; (20eb4 <uarte_nrfx_configure+0x15c>)
   20dd0:	e03e      	b.n	20e50 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   20dd2:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   20dd6:	d05a      	beq.n	20e8e <uarte_nrfx_configure+0x136>
   20dd8:	d807      	bhi.n	20dea <uarte_nrfx_configure+0x92>
   20dda:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   20dde:	d058      	beq.n	20e92 <uarte_nrfx_configure+0x13a>
   20de0:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   20de4:	d1e2      	bne.n	20dac <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   20de6:	4b34      	ldr	r3, [pc, #208]	; (20eb8 <uarte_nrfx_configure+0x160>)
   20de8:	e032      	b.n	20e50 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   20dea:	f647 2c12 	movw	ip, #31250	; 0x7a12
   20dee:	4563      	cmp	r3, ip
   20df0:	d1dc      	bne.n	20dac <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   20df2:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   20df6:	e02b      	b.n	20e50 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   20df8:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   20dfc:	d04b      	beq.n	20e96 <uarte_nrfx_configure+0x13e>
   20dfe:	d813      	bhi.n	20e28 <uarte_nrfx_configure+0xd0>
   20e00:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   20e04:	d04a      	beq.n	20e9c <uarte_nrfx_configure+0x144>
   20e06:	d809      	bhi.n	20e1c <uarte_nrfx_configure+0xc4>
   20e08:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
   20e0c:	4563      	cmp	r3, ip
   20e0e:	d047      	beq.n	20ea0 <uarte_nrfx_configure+0x148>
   20e10:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   20e14:	d1ca      	bne.n	20dac <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   20e16:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   20e1a:	e019      	b.n	20e50 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   20e1c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   20e20:	d1c4      	bne.n	20dac <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   20e22:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   20e26:	e013      	b.n	20e50 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   20e28:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   20e2c:	d03b      	beq.n	20ea6 <uarte_nrfx_configure+0x14e>
   20e2e:	d809      	bhi.n	20e44 <uarte_nrfx_configure+0xec>
   20e30:	f8df c098 	ldr.w	ip, [pc, #152]	; 20ecc <uarte_nrfx_configure+0x174>
   20e34:	4563      	cmp	r3, ip
   20e36:	d039      	beq.n	20eac <uarte_nrfx_configure+0x154>
   20e38:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   20e3c:	d1b6      	bne.n	20dac <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   20e3e:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   20e42:	e005      	b.n	20e50 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   20e44:	f8df c088 	ldr.w	ip, [pc, #136]	; 20ed0 <uarte_nrfx_configure+0x178>
   20e48:	4563      	cmp	r3, ip
   20e4a:	d1af      	bne.n	20dac <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   20e4c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   20e50:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   20e54:	6903      	ldr	r3, [r0, #16]
   20e56:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->stop
   20e58:	4322      	orrs	r2, r4
                    | (uint32_t)p_cfg->hwfc;
   20e5a:	4335      	orrs	r5, r6
   20e5c:	432a      	orrs	r2, r5
   20e5e:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   20e60:	f8c7 256c 	str.w	r2, [r7, #1388]	; 0x56c
   20e64:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   20e68:	2000      	movs	r0, #0
}
   20e6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   20e6c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   20e70:	e7ee      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   20e72:	4b12      	ldr	r3, [pc, #72]	; (20ebc <uarte_nrfx_configure+0x164>)
   20e74:	e7ec      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   20e76:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   20e7a:	e7e9      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = 0x00014000;
   20e7c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   20e80:	e7e6      	b.n	20e50 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
   20e82:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   20e86:	e7e3      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   20e88:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   20e8c:	e7e0      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   20e8e:	4b0c      	ldr	r3, [pc, #48]	; (20ec0 <uarte_nrfx_configure+0x168>)
   20e90:	e7de      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   20e92:	4b0c      	ldr	r3, [pc, #48]	; (20ec4 <uarte_nrfx_configure+0x16c>)
   20e94:	e7dc      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   20e96:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   20e9a:	e7d9      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   20e9c:	4b0a      	ldr	r3, [pc, #40]	; (20ec8 <uarte_nrfx_configure+0x170>)
   20e9e:	e7d7      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   20ea0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   20ea4:	e7d4      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   20ea6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   20eaa:	e7d1      	b.n	20e50 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   20eac:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   20eb0:	e7ce      	b.n	20e50 <uarte_nrfx_configure+0xf8>
   20eb2:	bf00      	nop
   20eb4:	0013b000 	.word	0x0013b000
   20eb8:	004ea000 	.word	0x004ea000
   20ebc:	00275000 	.word	0x00275000
   20ec0:	0075c000 	.word	0x0075c000
   20ec4:	003af000 	.word	0x003af000
   20ec8:	013a9000 	.word	0x013a9000
   20ecc:	0003d090 	.word	0x0003d090
   20ed0:	000f4240 	.word	0x000f4240

00020ed4 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20ed4:	6802      	ldr	r2, [r0, #0]
    switch (port)
   20ed6:	0953      	lsrs	r3, r2, #5
{
   20ed8:	b510      	push	{r4, lr}
   20eda:	4604      	mov	r4, r0
    switch (port)
   20edc:	d02c      	beq.n	20f38 <nrf_gpio_pin_port_decode+0x64>
   20ede:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   20ee0:	f240 33ff 	movw	r3, #1023	; 0x3ff
   20ee4:	bf18      	it	ne
   20ee6:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   20ee8:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
   20eec:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   20eee:	07db      	lsls	r3, r3, #31
   20ef0:	d40b      	bmi.n	20f0a <nrf_gpio_pin_port_decode+0x36>
   20ef2:	4914      	ldr	r1, [pc, #80]	; (20f44 <nrf_gpio_pin_port_decode+0x70>)
   20ef4:	4814      	ldr	r0, [pc, #80]	; (20f48 <nrf_gpio_pin_port_decode+0x74>)
   20ef6:	4a15      	ldr	r2, [pc, #84]	; (20f4c <nrf_gpio_pin_port_decode+0x78>)
   20ef8:	f240 2329 	movw	r3, #553	; 0x229
   20efc:	f007 fe4d 	bl	28b9a <printk>
   20f00:	4812      	ldr	r0, [pc, #72]	; (20f4c <nrf_gpio_pin_port_decode+0x78>)
   20f02:	f240 2129 	movw	r1, #553	; 0x229
   20f06:	f008 f889 	bl	2901c <assert_post_action>
    uint32_t pin_number = *p_pin;
   20f0a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   20f0c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20f10:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   20f12:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20f14:	d00d      	beq.n	20f32 <nrf_gpio_pin_port_decode+0x5e>
   20f16:	2b01      	cmp	r3, #1
   20f18:	d011      	beq.n	20f3e <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
   20f1a:	490d      	ldr	r1, [pc, #52]	; (20f50 <nrf_gpio_pin_port_decode+0x7c>)
   20f1c:	480a      	ldr	r0, [pc, #40]	; (20f48 <nrf_gpio_pin_port_decode+0x74>)
   20f1e:	4a0b      	ldr	r2, [pc, #44]	; (20f4c <nrf_gpio_pin_port_decode+0x78>)
   20f20:	f240 232e 	movw	r3, #558	; 0x22e
   20f24:	f007 fe39 	bl	28b9a <printk>
   20f28:	4808      	ldr	r0, [pc, #32]	; (20f4c <nrf_gpio_pin_port_decode+0x78>)
   20f2a:	f240 212e 	movw	r1, #558	; 0x22e
   20f2e:	f008 f875 	bl	2901c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   20f32:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   20f36:	bd10      	pop	{r4, pc}
    switch (port)
   20f38:	f04f 33ff 	mov.w	r3, #4294967295
   20f3c:	e7d4      	b.n	20ee8 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
   20f3e:	4805      	ldr	r0, [pc, #20]	; (20f54 <nrf_gpio_pin_port_decode+0x80>)
   20f40:	e7f9      	b.n	20f36 <nrf_gpio_pin_port_decode+0x62>
   20f42:	bf00      	nop
   20f44:	000334fa 	.word	0x000334fa
   20f48:	0002e93e 	.word	0x0002e93e
   20f4c:	000334c7 	.word	0x000334c7
   20f50:	00034515 	.word	0x00034515
   20f54:	50000300 	.word	0x50000300

00020f58 <uarte_nrfx_rx_enable>:
}

static int uarte_nrfx_rx_enable(const struct device *dev, uint8_t *buf,
				size_t len,
				int32_t timeout)
{
   20f58:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20f5c:	4615      	mov	r5, r2
	struct uarte_nrfx_data *data = get_dev_data(dev);
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   20f5e:	6842      	ldr	r2, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   20f60:	f8d0 9010 	ldr.w	r9, [r0, #16]
	return config->uarte_regs;
   20f64:	6817      	ldr	r7, [r2, #0]
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);

	if (cfg->disable_rx) {
   20f66:	7a12      	ldrb	r2, [r2, #8]
{
   20f68:	b087      	sub	sp, #28
   20f6a:	4604      	mov	r4, r0
   20f6c:	4688      	mov	r8, r1
	if (cfg->disable_rx) {
   20f6e:	b19a      	cbz	r2, 20f98 <uarte_nrfx_rx_enable+0x40>
		__ASSERT(false, "TX only UARTE instance");
   20f70:	4a4f      	ldr	r2, [pc, #316]	; (210b0 <uarte_nrfx_rx_enable+0x158>)
   20f72:	4950      	ldr	r1, [pc, #320]	; (210b4 <uarte_nrfx_rx_enable+0x15c>)
   20f74:	4850      	ldr	r0, [pc, #320]	; (210b8 <uarte_nrfx_rx_enable+0x160>)
   20f76:	f240 337f 	movw	r3, #895	; 0x37f
   20f7a:	f007 fe0e 	bl	28b9a <printk>
   20f7e:	484f      	ldr	r0, [pc, #316]	; (210bc <uarte_nrfx_rx_enable+0x164>)
   20f80:	f007 fe0b 	bl	28b9a <printk>
   20f84:	484a      	ldr	r0, [pc, #296]	; (210b0 <uarte_nrfx_rx_enable+0x158>)
   20f86:	f240 317f 	movw	r1, #895	; 0x37f
   20f8a:	f008 f847 	bl	2901c <assert_post_action>
		return -ENOTSUP;
   20f8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
	}

	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);

	return 0;
}
   20f92:	b007      	add	sp, #28
   20f94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (data->async->rx_enabled) {
   20f98:	f8d9 1010 	ldr.w	r1, [r9, #16]
   20f9c:	f891 20d2 	ldrb.w	r2, [r1, #210]	; 0xd2
   20fa0:	2a00      	cmp	r2, #0
   20fa2:	f040 8081 	bne.w	210a8 <uarte_nrfx_rx_enable+0x150>
		MAX(timeout / RX_TIMEOUT_DIV,
   20fa6:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
	data->async->rx_timeout = timeout;
   20faa:	67cb      	str	r3, [r1, #124]	; 0x7c
		MAX(timeout / RX_TIMEOUT_DIV,
   20fac:	bfd2      	itee	le
   20fae:	235c      	movle	r3, #92	; 0x5c
   20fb0:	2205      	movgt	r2, #5
   20fb2:	fb93 f3f2 	sdivgt	r3, r3, r2
	data->async->rx_timeout_slab =
   20fb6:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	data->async->rx_offset = 0;
   20fba:	2300      	movs	r3, #0
	data->async->rx_buf_len = len;
   20fbc:	e9c1 8518 	strd	r8, r5, [r1, #96]	; 0x60
	data->async->rx_next_buf = NULL;
   20fc0:	e9c1 331a 	strd	r3, r3, [r1, #104]	; 0x68
	data->async->rx_next_buf_len = 0;
   20fc4:	670b      	str	r3, [r1, #112]	; 0x70
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   20fc6:	6843      	ldr	r3, [r0, #4]
   20fc8:	685b      	ldr	r3, [r3, #4]
   20fca:	06da      	lsls	r2, r3, #27
   20fcc:	d539      	bpl.n	21042 <uarte_nrfx_rx_enable+0xea>
		if (data->async->rx_flush_cnt) {
   20fce:	f891 60d1 	ldrb.w	r6, [r1, #209]	; 0xd1
   20fd2:	b3b6      	cbz	r6, 21042 <uarte_nrfx_rx_enable+0xea>
			int cpy_len = MIN(len, data->async->rx_flush_cnt);
   20fd4:	42ae      	cmp	r6, r5
   20fd6:	bf28      	it	cs
   20fd8:	462e      	movcs	r6, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   20fda:	4640      	mov	r0, r8
   20fdc:	4632      	mov	r2, r6
   20fde:	31cc      	adds	r1, #204	; 0xcc
   20fe0:	f00b fe09 	bl	2cbf6 <memcpy>
			if (!len) {
   20fe4:	1bad      	subs	r5, r5, r6
			buf += cpy_len;
   20fe6:	44b0      	add	r8, r6
			if (!len) {
   20fe8:	d12b      	bne.n	21042 <uarte_nrfx_rx_enable+0xea>
				data->async->rx_flush_cnt -= cpy_len;
   20fea:	f8d9 2010 	ldr.w	r2, [r9, #16]
   20fee:	f892 30d1 	ldrb.w	r3, [r2, #209]	; 0xd1
   20ff2:	1b9b      	subs	r3, r3, r6
				notify_uart_rx_rdy(dev, cpy_len);
   20ff4:	4631      	mov	r1, r6
				data->async->rx_flush_cnt -= cpy_len;
   20ff6:	f882 30d1 	strb.w	r3, [r2, #209]	; 0xd1
				notify_uart_rx_rdy(dev, cpy_len);
   20ffa:	4620      	mov	r0, r4
   20ffc:	f00b f959 	bl	2c2b2 <notify_uart_rx_rdy>
				notify_rx_buf_release(dev, &data->async->rx_buf,
   21000:	f8d9 6010 	ldr.w	r6, [r9, #16]
	if (*buf) {
   21004:	6e37      	ldr	r7, [r6, #96]	; 0x60
   21006:	b177      	cbz	r7, 21026 <uarte_nrfx_rx_enable+0xce>
		struct uart_event evt = {
   21008:	2214      	movs	r2, #20
   2100a:	4629      	mov	r1, r5
   2100c:	a801      	add	r0, sp, #4
   2100e:	f00b fe1a 	bl	2cc46 <memset>
   21012:	2304      	movs	r3, #4
		user_callback(dev, &evt);
   21014:	eb0d 0103 	add.w	r1, sp, r3
   21018:	4620      	mov	r0, r4
		struct uart_event evt = {
   2101a:	f88d 3004 	strb.w	r3, [sp, #4]
   2101e:	9702      	str	r7, [sp, #8]
		user_callback(dev, &evt);
   21020:	f00b f940 	bl	2c2a4 <user_callback>
			*buf = NULL;
   21024:	6635      	str	r5, [r6, #96]	; 0x60
	struct uart_event evt = {
   21026:	2100      	movs	r1, #0
   21028:	2214      	movs	r2, #20
   2102a:	a801      	add	r0, sp, #4
   2102c:	f00b fe0b 	bl	2cc46 <memset>
   21030:	2305      	movs	r3, #5
	user_callback(dev, (struct uart_event *)&evt);
   21032:	a901      	add	r1, sp, #4
   21034:	4620      	mov	r0, r4
	struct uart_event evt = {
   21036:	f88d 3004 	strb.w	r3, [sp, #4]
	user_callback(dev, (struct uart_event *)&evt);
   2103a:	f00b f933 	bl	2c2a4 <user_callback>
	return 0;
   2103e:	2000      	movs	r0, #0
   21040:	e7a7      	b.n	20f92 <uarte_nrfx_rx_enable+0x3a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21042:	2300      	movs	r3, #0

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   21044:	f8c7 8534 	str.w	r8, [r7, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   21048:	f8c7 5538 	str.w	r5, [r7, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2104c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   21050:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
   21054:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
   21058:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
	data->async->rx_enabled = true;
   2105c:	f8d9 3010 	ldr.w	r3, [r9, #16]
   21060:	2201      	movs	r2, #1
   21062:	f883 20d2 	strb.w	r2, [r3, #210]	; 0xd2
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   21066:	6863      	ldr	r3, [r4, #4]
   21068:	685b      	ldr	r3, [r3, #4]
   2106a:	06db      	lsls	r3, r3, #27
   2106c:	d519      	bpl.n	210a2 <uarte_nrfx_rx_enable+0x14a>
	__asm__ volatile(
   2106e:	f04f 0340 	mov.w	r3, #64	; 0x40
   21072:	f3ef 8111 	mrs	r1, BASEPRI
   21076:	f383 8812 	msr	BASEPRI_MAX, r3
   2107a:	f3bf 8f6f 	isb	sy
	if (data->async) {
   2107e:	6923      	ldr	r3, [r4, #16]
   21080:	691b      	ldr	r3, [r3, #16]
   21082:	b12b      	cbz	r3, 21090 <uarte_nrfx_rx_enable+0x138>
		data->async->low_power_mask |= mask;
   21084:	f8d3 20c8 	ldr.w	r2, [r3, #200]	; 0xc8
   21088:	f042 0202 	orr.w	r2, r2, #2
   2108c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
	return config->uarte_regs;
   21090:	6863      	ldr	r3, [r4, #4]
   21092:	681b      	ldr	r3, [r3, #0]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   21094:	2208      	movs	r2, #8
   21096:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	__asm__ volatile(
   2109a:	f381 8811 	msr	BASEPRI, r1
   2109e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   210a2:	2301      	movs	r3, #1
   210a4:	603b      	str	r3, [r7, #0]
   210a6:	e7ca      	b.n	2103e <uarte_nrfx_rx_enable+0xe6>
		return -EBUSY;
   210a8:	f06f 000f 	mvn.w	r0, #15
   210ac:	e771      	b.n	20f92 <uarte_nrfx_rx_enable+0x3a>
   210ae:	bf00      	nop
   210b0:	0003352b 	.word	0x0003352b
   210b4:	00034515 	.word	0x00034515
   210b8:	0002e93e 	.word	0x0002e93e
   210bc:	0003355f 	.word	0x0003355f

000210c0 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   210c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   210c4:	f8d0 9004 	ldr.w	r9, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
   210c8:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
   210ca:	f8d9 4000 	ldr.w	r4, [r9]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   210ce:	2300      	movs	r3, #0
   210d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   210d4:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
   210d6:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   210d8:	68eb      	ldr	r3, [r5, #12]
   210da:	1c5a      	adds	r2, r3, #1
static int uarte_instance_init(const struct device *dev,
   210dc:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   210de:	d013      	beq.n	21108 <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   210e0:	a801      	add	r0, sp, #4
   210e2:	9301      	str	r3, [sp, #4]
   210e4:	f7ff fef6 	bl	20ed4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   210e8:	9a01      	ldr	r2, [sp, #4]
   210ea:	2301      	movs	r3, #1
   210ec:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   210ee:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   210f2:	68eb      	ldr	r3, [r5, #12]
   210f4:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   210f6:	a801      	add	r0, sp, #4
   210f8:	f7ff feec 	bl	20ed4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   210fc:	9b01      	ldr	r3, [sp, #4]
   210fe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   21102:	2203      	movs	r2, #3
   21104:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   21108:	692b      	ldr	r3, [r5, #16]
   2110a:	1c58      	adds	r0, r3, #1
   2110c:	d011      	beq.n	21132 <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
   2110e:	7f2a      	ldrb	r2, [r5, #28]
   21110:	9301      	str	r3, [sp, #4]
   21112:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21114:	a801      	add	r0, sp, #4
   21116:	bf14      	ite	ne
   21118:	f04f 0803 	movne.w	r8, #3
   2111c:	f04f 0800 	moveq.w	r8, #0
   21120:	f7ff fed8 	bl	20ed4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21124:	9b01      	ldr	r3, [sp, #4]
   21126:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   2112a:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   2112e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   21132:	696b      	ldr	r3, [r5, #20]
   21134:	1c59      	adds	r1, r3, #1
   21136:	d013      	beq.n	21160 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   21138:	a801      	add	r0, sp, #4
   2113a:	9301      	str	r3, [sp, #4]
   2113c:	f7ff feca 	bl	20ed4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   21140:	9a01      	ldr	r2, [sp, #4]
   21142:	2301      	movs	r3, #1
   21144:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   21146:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   2114a:	696b      	ldr	r3, [r5, #20]
   2114c:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2114e:	a801      	add	r0, sp, #4
   21150:	f7ff fec0 	bl	20ed4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   21154:	9b01      	ldr	r3, [sp, #4]
   21156:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   2115a:	2203      	movs	r2, #3
   2115c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
   21160:	69ab      	ldr	r3, [r5, #24]
   21162:	1c5a      	adds	r2, r3, #1
   21164:	d011      	beq.n	2118a <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
   21166:	7f6a      	ldrb	r2, [r5, #29]
   21168:	9301      	str	r3, [sp, #4]
   2116a:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2116c:	a801      	add	r0, sp, #4
   2116e:	bf14      	ite	ne
   21170:	f04f 0803 	movne.w	r8, #3
   21174:	f04f 0800 	moveq.w	r8, #0
   21178:	f7ff feac 	bl	20ed4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   2117c:	9b01      	ldr	r3, [sp, #4]
   2117e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
   21182:	ea4f 0288 	mov.w	r2, r8, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
   21186:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
   2118a:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
   2118e:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
   21190:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   21194:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
   21198:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
   2119c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   211a0:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
   211a2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   211a6:	3104      	adds	r1, #4
   211a8:	4630      	mov	r0, r6
   211aa:	f7ff fdd5 	bl	20d58 <uarte_nrfx_configure>
	if (err) {
   211ae:	4605      	mov	r5, r0
   211b0:	2800      	cmp	r0, #0
   211b2:	f040 8086 	bne.w	212c2 <uarte_instance_init.isra.0+0x202>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
   211b6:	f8d9 3004 	ldr.w	r3, [r9, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
   211ba:	079b      	lsls	r3, r3, #30
   211bc:	d529      	bpl.n	21212 <uarte_instance_init.isra.0+0x152>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   211be:	f107 001a 	add.w	r0, r7, #26
   211c2:	f002 f8e9 	bl	23398 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   211c6:	4b4b      	ldr	r3, [pc, #300]	; (212f4 <uarte_instance_init.isra.0+0x234>)
   211c8:	4298      	cmp	r0, r3
   211ca:	d00f      	beq.n	211ec <uarte_instance_init.isra.0+0x12c>
		LOG_ERR("Failed to allocate PPI Channel");
   211cc:	494a      	ldr	r1, [pc, #296]	; (212f8 <uarte_instance_init.isra.0+0x238>)
   211ce:	680b      	ldr	r3, [r1, #0]
   211d0:	0758      	lsls	r0, r3, #29
   211d2:	d008      	beq.n	211e6 <uarte_instance_init.isra.0+0x126>
   211d4:	4b49      	ldr	r3, [pc, #292]	; (212fc <uarte_instance_init.isra.0+0x23c>)
   211d6:	484a      	ldr	r0, [pc, #296]	; (21300 <uarte_instance_init.isra.0+0x240>)
   211d8:	1ac9      	subs	r1, r1, r3
   211da:	0889      	lsrs	r1, r1, #2
   211dc:	0189      	lsls	r1, r1, #6
   211de:	f041 0101 	orr.w	r1, r1, #1
   211e2:	f008 f87c 	bl	292de <log_0>
		return -EIO;
   211e6:	f06f 0504 	mvn.w	r5, #4
   211ea:	e06a      	b.n	212c2 <uarte_instance_init.isra.0+0x202>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   211ec:	7eb8      	ldrb	r0, [r7, #26]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   211ee:	00c3      	lsls	r3, r0, #3
   211f0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   211f4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   211f8:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   211fc:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   21200:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   21204:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   21208:	4a3e      	ldr	r2, [pc, #248]	; (21304 <uarte_instance_init.isra.0+0x244>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   2120a:	2301      	movs	r3, #1
   2120c:	4083      	lsls	r3, r0
   2120e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
		}
	}


#ifdef CONFIG_UART_ASYNC_API
	if (data->async) {
   21212:	693b      	ldr	r3, [r7, #16]
   21214:	2b00      	cmp	r3, #0
   21216:	d058      	beq.n	212ca <uarte_instance_init.isra.0+0x20a>
	return config->uarte_regs;
   21218:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2121a:	f8d6 8010 	ldr.w	r8, [r6, #16]
	return config->uarte_regs;
   2121e:	681b      	ldr	r3, [r3, #0]
	data->async->low_power_mask = UARTE_LOW_POWER_TX;
   21220:	f8d8 0010 	ldr.w	r0, [r8, #16]
    p_reg->INTENSET = mask;
   21224:	4938      	ldr	r1, [pc, #224]	; (21308 <uarte_instance_init.isra.0+0x248>)
   21226:	2204      	movs	r2, #4
   21228:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
   2122c:	2201      	movs	r2, #1
   2122e:	f8c0 20c8 	str.w	r2, [r0, #200]	; 0xc8
   21232:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   21236:	2108      	movs	r1, #8
   21238:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2123c:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXSTARTED)) {
   21240:	b1a1      	cbz	r1, 2126c <uarte_instance_init.isra.0+0x1ac>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   21242:	605a      	str	r2, [r3, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21244:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
		while (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_RXTO) &&
   21248:	b91a      	cbnz	r2, 21252 <uarte_instance_init.isra.0+0x192>
   2124a:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
   2124e:	2a00      	cmp	r2, #0
   21250:	d0f8      	beq.n	21244 <uarte_instance_init.isra.0+0x184>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   21252:	2200      	movs	r2, #0
   21254:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
   21258:	f8d3 114c 	ldr.w	r1, [r3, #332]	; 0x14c
   2125c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
   21260:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   21264:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   21268:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	k_timer_init(&data->async->rx_timeout_timer, rx_timeout, NULL);
   2126c:	4927      	ldr	r1, [pc, #156]	; (2130c <uarte_instance_init.isra.0+0x24c>)
   2126e:	2200      	movs	r2, #0
   21270:	3088      	adds	r0, #136	; 0x88
   21272:	f00b fc30 	bl	2cad6 <k_timer_init>
	k_timer_user_data_set(&data->async->rx_timeout_timer, data);
   21276:	f8d8 3010 	ldr.w	r3, [r8, #16]
	timer->user_data = user_data;
   2127a:	f8c3 80bc 	str.w	r8, [r3, #188]	; 0xbc
	k_timer_init(&data->async->tx_timeout_timer, tx_timeout, NULL);
   2127e:	f8d8 0010 	ldr.w	r0, [r8, #16]
   21282:	4923      	ldr	r1, [pc, #140]	; (21310 <uarte_instance_init.isra.0+0x250>)
   21284:	2200      	movs	r2, #0
   21286:	3028      	adds	r0, #40	; 0x28
   21288:	f00b fc25 	bl	2cad6 <k_timer_init>
	k_timer_user_data_set(&data->async->tx_timeout_timer, data);
   2128c:	f8d8 3010 	ldr.w	r3, [r8, #16]
   21290:	f8c3 805c 	str.w	r8, [r3, #92]	; 0x5c
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
   21294:	f8d9 3004 	ldr.w	r3, [r9, #4]
   21298:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
   2129a:	bf5c      	itt	pl
   2129c:	f44f 7280 	movpl.w	r2, #256	; 0x100
   212a0:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
   212a4:	06db      	lsls	r3, r3, #27
   212a6:	bf44      	itt	mi
   212a8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
   212ac:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   212b0:	3718      	adds	r7, #24
    p_reg->TXD.MAXCNT = length;
   212b2:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   212b4:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   212b8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   212bc:	2301      	movs	r3, #1
   212be:	60a3      	str	r3, [r4, #8]
   212c0:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   212c2:	4628      	mov	r0, r5
   212c4:	b003      	add	sp, #12
   212c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   212ca:	2308      	movs	r3, #8
   212cc:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
   212d0:	f899 3008 	ldrb.w	r3, [r9, #8]
   212d4:	2b00      	cmp	r3, #0
   212d6:	d1dd      	bne.n	21294 <uarte_instance_init.isra.0+0x1d4>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   212d8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   212dc:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   212e0:	f107 0319 	add.w	r3, r7, #25
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   212e4:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   212e8:	2301      	movs	r3, #1
   212ea:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   212ee:	6023      	str	r3, [r4, #0]
}
   212f0:	e7d0      	b.n	21294 <uarte_instance_init.isra.0+0x1d4>
   212f2:	bf00      	nop
   212f4:	0bad0000 	.word	0x0bad0000
   212f8:	200007a4 	.word	0x200007a4
   212fc:	20000740 	.word	0x20000740
   21300:	00033578 	.word	0x00033578
   21304:	4001f000 	.word	0x4001f000
   21308:	000a0210 	.word	0x000a0210
   2130c:	0002c459 	.word	0x0002c459
   21310:	0002c549 	.word	0x0002c549

00021314 <uarte_nrfx_tx>:
{
   21314:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   21318:	4606      	mov	r6, r0
   2131a:	461d      	mov	r5, r3
	return config->uarte_regs;
   2131c:	6873      	ldr	r3, [r6, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2131e:	6937      	ldr	r7, [r6, #16]
	return config->uarte_regs;
   21320:	f8d3 c000 	ldr.w	ip, [r3]
	__asm__ volatile(
   21324:	f04f 0340 	mov.w	r3, #64	; 0x40
   21328:	f3ef 8811 	mrs	r8, BASEPRI
   2132c:	f383 8812 	msr	BASEPRI_MAX, r3
   21330:	f3bf 8f6f 	isb	sy
	if (data->async->tx_size) {
   21334:	693c      	ldr	r4, [r7, #16]
   21336:	68e3      	ldr	r3, [r4, #12]
   21338:	b143      	cbz	r3, 2134c <uarte_nrfx_tx+0x38>
	__asm__ volatile(
   2133a:	f388 8811 	msr	BASEPRI, r8
   2133e:	f3bf 8f6f 	isb	sy
		return -EBUSY;
   21342:	f06f 000f 	mvn.w	r0, #15
}
   21346:	b002      	add	sp, #8
   21348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    p_reg->INTENSET = mask;
   2134c:	f44f 0e80 	mov.w	lr, #4194304	; 0x400000
	data->async->tx_size = len;
   21350:	60e2      	str	r2, [r4, #12]
	data->async->tx_buf = buf;
   21352:	60a1      	str	r1, [r4, #8]
   21354:	f8cc e304 	str.w	lr, [ip, #772]	; 0x304

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
   21358:	f001 4c60 	and.w	ip, r1, #3758096384	; 0xe0000000
	if (nrfx_is_in_ram(buf)) {
   2135c:	f1bc 5f00 	cmp.w	ip, #536870912	; 0x20000000
   21360:	d12c      	bne.n	213bc <uarte_nrfx_tx+0xa8>
		data->async->xfer_len = len;
   21362:	e9c4 1204 	strd	r1, r2, [r4, #16]
	if (!is_tx_ready(dev)) {
   21366:	4630      	mov	r0, r6
   21368:	f00a ff8c 	bl	2c284 <is_tx_ready>
   2136c:	693b      	ldr	r3, [r7, #16]
   2136e:	2800      	cmp	r0, #0
   21370:	d132      	bne.n	213d8 <uarte_nrfx_tx+0xc4>
		data->async->pending_tx = true;
   21372:	2201      	movs	r2, #1
   21374:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
   21378:	f388 8811 	msr	BASEPRI, r8
   2137c:	f3bf 8f6f 	isb	sy
	if (data->uart_config.flow_ctrl == UART_CFG_FLOW_CTRL_RTS_CTS
   21380:	7afb      	ldrb	r3, [r7, #11]
   21382:	2b01      	cmp	r3, #1
   21384:	d118      	bne.n	213b8 <uarte_nrfx_tx+0xa4>
	    && timeout != SYS_FOREVER_US) {
   21386:	1c6b      	adds	r3, r5, #1
   21388:	d016      	beq.n	213b8 <uarte_nrfx_tx+0xa4>
   2138a:	481a      	ldr	r0, [pc, #104]	; (213f4 <uarte_nrfx_tx+0xe0>)
   2138c:	4a1a      	ldr	r2, [pc, #104]	; (213f8 <uarte_nrfx_tx+0xe4>)
		k_timer_start(&data->async->tx_timeout_timer, K_USEC(timeout),
   2138e:	693c      	ldr	r4, [r7, #16]
   21390:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   21394:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   21398:	2100      	movs	r1, #0
   2139a:	2300      	movs	r3, #0
   2139c:	fbc6 0105 	smlal	r0, r1, r6, r5
   213a0:	f7de ff4e 	bl	240 <__aeabi_uldivmod>
   213a4:	3428      	adds	r4, #40	; 0x28
   213a6:	4602      	mov	r2, r0
   213a8:	460b      	mov	r3, r1
	z_impl_k_timer_start(timer, duration, period);
   213aa:	2000      	movs	r0, #0
   213ac:	2100      	movs	r1, #0
   213ae:	e9cd 0100 	strd	r0, r1, [sp]
   213b2:	4620      	mov	r0, r4
   213b4:	f006 f9ac 	bl	27710 <z_impl_k_timer_start>
	return 0;
   213b8:	2000      	movs	r0, #0
   213ba:	e7c4      	b.n	21346 <uarte_nrfx_tx+0x32>
	size_t remaining = data->async->tx_size - data->async->tx_cache_offset;
   213bc:	68e2      	ldr	r2, [r4, #12]
		data->async->tx_cache_offset = 0;
   213be:	6223      	str	r3, [r4, #32]
	if (!remaining) {
   213c0:	2a00      	cmp	r2, #0
   213c2:	d0d0      	beq.n	21366 <uarte_nrfx_tx+0x52>
	size_t len = MIN(remaining, sizeof(data->async->tx_cache));
   213c4:	2a08      	cmp	r2, #8
   213c6:	bf28      	it	cs
   213c8:	2208      	movcs	r2, #8
	data->async->xfer_buf = data->async->tx_cache;
   213ca:	f104 0018 	add.w	r0, r4, #24
	data->async->xfer_len = len;
   213ce:	6162      	str	r2, [r4, #20]
	data->async->xfer_buf = data->async->tx_cache;
   213d0:	6120      	str	r0, [r4, #16]
   213d2:	f00b fc10 	bl	2cbf6 <memcpy>
   213d6:	e7c6      	b.n	21366 <uarte_nrfx_tx+0x52>
		data->async->pending_tx = false;
   213d8:	2200      	movs	r2, #0
   213da:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
		data->async->tx_amount = -1;
   213de:	f04f 32ff 	mov.w	r2, #4294967295
   213e2:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
		tx_start(dev, data->async->xfer_buf, data->async->xfer_len);
   213e6:	4630      	mov	r0, r6
   213e8:	e9d3 1204 	ldrd	r1, r2, [r3, #16]
   213ec:	f00b f8ef 	bl	2c5ce <tx_start>
   213f0:	e7c2      	b.n	21378 <uarte_nrfx_tx+0x64>
   213f2:	bf00      	nop
   213f4:	000f423f 	.word	0x000f423f
   213f8:	000f4240 	.word	0x000f4240

000213fc <uarte_nrfx_poll_out>:
{
   213fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   213fe:	6906      	ldr	r6, [r0, #16]
{
   21400:	4604      	mov	r4, r0
   21402:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   21404:	f00b fa3c 	bl	2c880 <k_is_in_isr>
   21408:	b910      	cbnz	r0, 21410 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
   2140a:	4b28      	ldr	r3, [pc, #160]	; (214ac <uarte_nrfx_poll_out+0xb0>)
	if (isr_mode) {
   2140c:	781b      	ldrb	r3, [r3, #0]
   2140e:	bb5b      	cbnz	r3, 21468 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   21410:	f04f 0340 	mov.w	r3, #64	; 0x40
   21414:	f3ef 8111 	mrs	r1, BASEPRI
   21418:	f383 8812 	msr	BASEPRI_MAX, r3
   2141c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   21420:	4620      	mov	r0, r4
			key = irq_lock();
   21422:	460d      	mov	r5, r1
			if (is_tx_ready(dev)) {
   21424:	f00a ff2e 	bl	2c284 <is_tx_ready>
   21428:	b1c8      	cbz	r0, 2145e <uarte_nrfx_poll_out+0x62>
				if (data->async && data->async->tx_size &&
   2142a:	6933      	ldr	r3, [r6, #16]
   2142c:	b15b      	cbz	r3, 21446 <uarte_nrfx_poll_out+0x4a>
   2142e:	68da      	ldr	r2, [r3, #12]
   21430:	b14a      	cbz	r2, 21446 <uarte_nrfx_poll_out+0x4a>
					data->async->tx_amount < 0) {
   21432:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
				if (data->async && data->async->tx_size &&
   21436:	2a00      	cmp	r2, #0
   21438:	da05      	bge.n	21446 <uarte_nrfx_poll_out+0x4a>
	return config->uarte_regs;
   2143a:	6862      	ldr	r2, [r4, #4]
   2143c:	6812      	ldr	r2, [r2, #0]
    return p_reg->TXD.AMOUNT;
   2143e:	f8d2 254c 	ldr.w	r2, [r2, #1356]	; 0x54c
					data->async->tx_amount =
   21442:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	data->char_out = c;
   21446:	4631      	mov	r1, r6
	tx_start(dev, &data->char_out, 1);
   21448:	2201      	movs	r2, #1
	data->char_out = c;
   2144a:	f801 7f18 	strb.w	r7, [r1, #24]!
	tx_start(dev, &data->char_out, 1);
   2144e:	4620      	mov	r0, r4
   21450:	f00b f8bd 	bl	2c5ce <tx_start>
	__asm__ volatile(
   21454:	f385 8811 	msr	BASEPRI, r5
   21458:	f3bf 8f6f 	isb	sy
}
   2145c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2145e:	f381 8811 	msr	BASEPRI, r1
   21462:	f3bf 8f6f 	isb	sy
}
   21466:	e7d3      	b.n	21410 <uarte_nrfx_poll_out+0x14>
{
   21468:	2564      	movs	r5, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   2146a:	4620      	mov	r0, r4
   2146c:	f00a ff0a 	bl	2c284 <is_tx_ready>
   21470:	b948      	cbnz	r0, 21486 <uarte_nrfx_poll_out+0x8a>
   21472:	2001      	movs	r0, #1
   21474:	f00b f945 	bl	2c702 <nrfx_busy_wait>
   21478:	3d01      	subs	r5, #1
   2147a:	d1f6      	bne.n	2146a <uarte_nrfx_poll_out+0x6e>
	return z_impl_k_sleep(timeout);
   2147c:	2100      	movs	r1, #0
   2147e:	2021      	movs	r0, #33	; 0x21
   21480:	f005 fae8 	bl	26a54 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   21484:	e7f0      	b.n	21468 <uarte_nrfx_poll_out+0x6c>
	__asm__ volatile(
   21486:	f04f 0340 	mov.w	r3, #64	; 0x40
   2148a:	f3ef 8511 	mrs	r5, BASEPRI
   2148e:	f383 8812 	msr	BASEPRI_MAX, r3
   21492:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   21496:	4620      	mov	r0, r4
   21498:	f00a fef4 	bl	2c284 <is_tx_ready>
   2149c:	2800      	cmp	r0, #0
   2149e:	d1d2      	bne.n	21446 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
   214a0:	f385 8811 	msr	BASEPRI, r5
   214a4:	f3bf 8f6f 	isb	sy
}
   214a8:	e7e8      	b.n	2147c <uarte_nrfx_poll_out+0x80>
   214aa:	bf00      	nop
   214ac:	200036e5 	.word	0x200036e5

000214b0 <random_byte_get>:
	__asm__ volatile(
   214b0:	f04f 0340 	mov.w	r3, #64	; 0x40
   214b4:	f3ef 8211 	mrs	r2, BASEPRI
   214b8:	f383 8812 	msr	BASEPRI_MAX, r3
   214bc:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   214c0:	4b08      	ldr	r3, [pc, #32]	; (214e4 <random_byte_get+0x34>)
   214c2:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   214c4:	b159      	cbz	r1, 214de <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   214c6:	4908      	ldr	r1, [pc, #32]	; (214e8 <random_byte_get+0x38>)
   214c8:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   214cc:	2100      	movs	r1, #0
   214ce:	6019      	str	r1, [r3, #0]
   214d0:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   214d2:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   214d4:	f382 8811 	msr	BASEPRI, r2
   214d8:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   214dc:	4770      	bx	lr
	int retval = -EAGAIN;
   214de:	f06f 000a 	mvn.w	r0, #10
   214e2:	e7f7      	b.n	214d4 <random_byte_get+0x24>
   214e4:	4000d100 	.word	0x4000d100
   214e8:	4000d000 	.word	0x4000d000

000214ec <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   214ec:	b5f0      	push	{r4, r5, r6, r7, lr}
   214ee:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   214f0:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   214f2:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   214f4:	f04f 0540 	mov.w	r5, #64	; 0x40
   214f8:	f3ef 8011 	mrs	r0, BASEPRI
   214fc:	f385 8812 	msr	BASEPRI_MAX, r5
   21500:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   21504:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   21506:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   2150a:	1ba4      	subs	r4, r4, r6
   2150c:	403c      	ands	r4, r7
	if (available < len) {
   2150e:	42a2      	cmp	r2, r4
		len = available;
   21510:	bf88      	it	hi
   21512:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   21514:	eb06 0c02 	add.w	ip, r6, r2
   21518:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   2151c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   2151e:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   21522:	f380 8811 	msr	BASEPRI, r0
   21526:	f3bf 8f6f 	isb	sy
   2152a:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   2152c:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   2152e:	4282      	cmp	r2, r0
   21530:	d119      	bne.n	21566 <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   21532:	4576      	cmp	r6, lr
   21534:	d10d      	bne.n	21552 <rng_pool_get+0x66>
	__asm__ volatile(
   21536:	f04f 0540 	mov.w	r5, #64	; 0x40
   2153a:	f3ef 8211 	mrs	r2, BASEPRI
   2153e:	f385 8812 	msr	BASEPRI_MAX, r5
   21542:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   21546:	781d      	ldrb	r5, [r3, #0]
   21548:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   2154a:	f382 8811 	msr	BASEPRI, r2
   2154e:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   21552:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   21554:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   21556:	b288      	uxth	r0, r1
	available = available - len;
   21558:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   2155a:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   2155c:	bf22      	ittt	cs
   2155e:	4b06      	ldrcs	r3, [pc, #24]	; (21578 <rng_pool_get+0x8c>)
   21560:	2201      	movcs	r2, #1
   21562:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   21564:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   21566:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   2156a:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   2156c:	f89c c005 	ldrb.w	ip, [ip, #5]
   21570:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   21574:	403d      	ands	r5, r7
   21576:	e7da      	b.n	2152e <rng_pool_get+0x42>
   21578:	4000d000 	.word	0x4000d000

0002157c <entropy_nrf5_get_entropy_isr>:
}

static int entropy_nrf5_get_entropy_isr(const struct device *dev,
					uint8_t *buf, uint16_t len,
					uint32_t flags)
{
   2157c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21580:	4614      	mov	r4, r2
   21582:	461d      	mov	r5, r3
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   21584:	6902      	ldr	r2, [r0, #16]
   21586:	4b2c      	ldr	r3, [pc, #176]	; (21638 <entropy_nrf5_get_entropy_isr+0xbc>)
   21588:	429a      	cmp	r2, r3
{
   2158a:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   2158c:	d00b      	beq.n	215a6 <entropy_nrf5_get_entropy_isr+0x2a>
   2158e:	492b      	ldr	r1, [pc, #172]	; (2163c <entropy_nrf5_get_entropy_isr+0xc0>)
   21590:	482b      	ldr	r0, [pc, #172]	; (21640 <entropy_nrf5_get_entropy_isr+0xc4>)
   21592:	4a2c      	ldr	r2, [pc, #176]	; (21644 <entropy_nrf5_get_entropy_isr+0xc8>)
   21594:	f44f 7384 	mov.w	r3, #264	; 0x108
   21598:	f007 faff 	bl	28b9a <printk>
   2159c:	4829      	ldr	r0, [pc, #164]	; (21644 <entropy_nrf5_get_entropy_isr+0xc8>)
   2159e:	f44f 7184 	mov.w	r1, #264	; 0x108
   215a2:	f007 fd3b 	bl	2901c <assert_post_action>

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   215a6:	43eb      	mvns	r3, r5
   215a8:	f013 0501 	ands.w	r5, r3, #1
   215ac:	d006      	beq.n	215bc <entropy_nrf5_get_entropy_isr+0x40>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   215ae:	4826      	ldr	r0, [pc, #152]	; (21648 <entropy_nrf5_get_entropy_isr+0xcc>)
   215b0:	4622      	mov	r2, r4
   215b2:	4631      	mov	r1, r6
   215b4:	f7ff ff9a 	bl	214ec <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   215b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   215bc:	2c00      	cmp	r4, #0
   215be:	d033      	beq.n	21628 <entropy_nrf5_get_entropy_isr+0xac>
	__asm__ volatile(
   215c0:	f04f 0340 	mov.w	r3, #64	; 0x40
   215c4:	f3ef 8811 	mrs	r8, BASEPRI
   215c8:	f383 8812 	msr	BASEPRI_MAX, r3
   215cc:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   215d0:	200d      	movs	r0, #13
   215d2:	f7f4 fcc1 	bl	15f58 <arch_irq_is_enabled>
   215d6:	4607      	mov	r7, r0
		irq_disable(IRQN);
   215d8:	200d      	movs	r0, #13
   215da:	f7f4 fca9 	bl	15f30 <arch_irq_disable>
	__asm__ volatile(
   215de:	f388 8811 	msr	BASEPRI, r8
   215e2:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   215e6:	4a19      	ldr	r2, [pc, #100]	; (2164c <entropy_nrf5_get_entropy_isr+0xd0>)
   215e8:	6015      	str	r5, [r2, #0]
   215ea:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   215ec:	4b18      	ldr	r3, [pc, #96]	; (21650 <entropy_nrf5_get_entropy_isr+0xd4>)
   215ee:	2101      	movs	r1, #1
   215f0:	6019      	str	r1, [r3, #0]
   215f2:	4918      	ldr	r1, [pc, #96]	; (21654 <entropy_nrf5_get_entropy_isr+0xd8>)
   215f4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   215f8:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   215fc:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   215fe:	4691      	mov	r9, r2
   21600:	468a      	mov	sl, r1
   21602:	4698      	mov	r8, r3
   21604:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   21608:	b183      	cbz	r3, 2162c <entropy_nrf5_get_entropy_isr+0xb0>
			byte = random_byte_get();
   2160a:	f7ff ff51 	bl	214b0 <random_byte_get>
			if (byte < 0) {
   2160e:	1e03      	subs	r3, r0, #0
   21610:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   21614:	dbf6      	blt.n	21604 <entropy_nrf5_get_entropy_isr+0x88>
   21616:	3d01      	subs	r5, #1
   21618:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   2161a:	5573      	strb	r3, [r6, r5]
		} while (len);
   2161c:	2d00      	cmp	r5, #0
   2161e:	d1f1      	bne.n	21604 <entropy_nrf5_get_entropy_isr+0x88>
		if (irq_enabled) {
   21620:	b117      	cbz	r7, 21628 <entropy_nrf5_get_entropy_isr+0xac>
			irq_enable(IRQN);
   21622:	200d      	movs	r0, #13
   21624:	f7f4 fc74 	bl	15f10 <arch_irq_enable>
	return cnt;
   21628:	4620      	mov	r0, r4
   2162a:	e7c5      	b.n	215b8 <entropy_nrf5_get_entropy_isr+0x3c>
   2162c:	f3bf 8f4f 	dsb	sy
				__WFE();
   21630:	bf20      	wfe
				__SEV();
   21632:	bf40      	sev
				__WFE();
   21634:	bf20      	wfe
   21636:	e7e5      	b.n	21604 <entropy_nrf5_get_entropy_isr+0x88>
   21638:	200028cc 	.word	0x200028cc
   2163c:	000335e7 	.word	0x000335e7
   21640:	0002e93e 	.word	0x0002e93e
   21644:	000335b5 	.word	0x000335b5
   21648:	200028fc 	.word	0x200028fc
   2164c:	4000d100 	.word	0x4000d100
   21650:	4000d000 	.word	0x4000d000
   21654:	e000e100 	.word	0xe000e100

00021658 <entropy_nrf5_get_entropy>:
{
   21658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   2165c:	4b1a      	ldr	r3, [pc, #104]	; (216c8 <entropy_nrf5_get_entropy+0x70>)
{
   2165e:	4614      	mov	r4, r2
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   21660:	6902      	ldr	r2, [r0, #16]
   21662:	429a      	cmp	r2, r3
{
   21664:	4689      	mov	r9, r1
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   21666:	d009      	beq.n	2167c <entropy_nrf5_get_entropy+0x24>
   21668:	4918      	ldr	r1, [pc, #96]	; (216cc <entropy_nrf5_get_entropy+0x74>)
   2166a:	4819      	ldr	r0, [pc, #100]	; (216d0 <entropy_nrf5_get_entropy+0x78>)
   2166c:	4a19      	ldr	r2, [pc, #100]	; (216d4 <entropy_nrf5_get_entropy+0x7c>)
   2166e:	23ea      	movs	r3, #234	; 0xea
   21670:	f007 fa93 	bl	28b9a <printk>
   21674:	4817      	ldr	r0, [pc, #92]	; (216d4 <entropy_nrf5_get_entropy+0x7c>)
   21676:	21ea      	movs	r1, #234	; 0xea
   21678:	f007 fcd0 	bl	2901c <assert_post_action>
	return z_impl_k_sem_take(sem, timeout);
   2167c:	4e12      	ldr	r6, [pc, #72]	; (216c8 <entropy_nrf5_get_entropy+0x70>)
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2167e:	f106 0745 	add.w	r7, r6, #69	; 0x45
   21682:	f106 0818 	add.w	r8, r6, #24
	while (len) {
   21686:	b914      	cbnz	r4, 2168e <entropy_nrf5_get_entropy+0x36>
}
   21688:	4620      	mov	r0, r4
   2168a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2168e:	f04f 33ff 	mov.w	r3, #4294967295
   21692:	f04f 32ff 	mov.w	r2, #4294967295
   21696:	4630      	mov	r0, r6
   21698:	f003 fb68 	bl	24d6c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   2169c:	4622      	mov	r2, r4
   2169e:	4649      	mov	r1, r9
   216a0:	4638      	mov	r0, r7
   216a2:	f7ff ff23 	bl	214ec <rng_pool_get>
   216a6:	4605      	mov	r5, r0
	z_impl_k_sem_give(sem);
   216a8:	4630      	mov	r0, r6
   216aa:	f003 fb1b 	bl	24ce4 <z_impl_k_sem_give>
		if (bytes == 0U) {
   216ae:	b93d      	cbnz	r5, 216c0 <entropy_nrf5_get_entropy+0x68>
	return z_impl_k_sem_take(sem, timeout);
   216b0:	f04f 32ff 	mov.w	r2, #4294967295
   216b4:	f04f 33ff 	mov.w	r3, #4294967295
   216b8:	4640      	mov	r0, r8
   216ba:	f003 fb57 	bl	24d6c <z_impl_k_sem_take>
			continue;
   216be:	e7e2      	b.n	21686 <entropy_nrf5_get_entropy+0x2e>
		len -= bytes;
   216c0:	1b64      	subs	r4, r4, r5
   216c2:	b2a4      	uxth	r4, r4
		buf += bytes;
   216c4:	44a9      	add	r9, r5
   216c6:	e7de      	b.n	21686 <entropy_nrf5_get_entropy+0x2e>
   216c8:	200028cc 	.word	0x200028cc
   216cc:	000335e7 	.word	0x000335e7
   216d0:	0002e93e 	.word	0x0002e93e
   216d4:	000335b5 	.word	0x000335b5

000216d8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_ENTROPY_INIT_PRIORITY,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *dev)
{
   216d8:	b538      	push	{r3, r4, r5, lr}
	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));
   216da:	4c20      	ldr	r4, [pc, #128]	; (2175c <entropy_nrf5_init+0x84>)
   216dc:	6903      	ldr	r3, [r0, #16]
   216de:	42a3      	cmp	r3, r4
   216e0:	d00b      	beq.n	216fa <entropy_nrf5_init+0x22>
   216e2:	491f      	ldr	r1, [pc, #124]	; (21760 <entropy_nrf5_init+0x88>)
   216e4:	481f      	ldr	r0, [pc, #124]	; (21764 <entropy_nrf5_init+0x8c>)
   216e6:	4a20      	ldr	r2, [pc, #128]	; (21768 <entropy_nrf5_init+0x90>)
   216e8:	f240 1357 	movw	r3, #343	; 0x157
   216ec:	f007 fa55 	bl	28b9a <printk>
   216f0:	481d      	ldr	r0, [pc, #116]	; (21768 <entropy_nrf5_init+0x90>)
   216f2:	f240 1157 	movw	r1, #343	; 0x157
   216f6:	f007 fc91 	bl	2901c <assert_post_action>
	return z_impl_k_sem_init(sem, initial_count, limit);
   216fa:	2201      	movs	r2, #1
   216fc:	4611      	mov	r1, r2
   216fe:	4817      	ldr	r0, [pc, #92]	; (2175c <entropy_nrf5_init+0x84>)
   21700:	f00b f925 	bl	2c94e <z_impl_k_sem_init>
   21704:	2201      	movs	r2, #1
   21706:	2100      	movs	r1, #0
   21708:	4818      	ldr	r0, [pc, #96]	; (2176c <entropy_nrf5_init+0x94>)
   2170a:	f00b f920 	bl	2c94e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   2170e:	f240 4307 	movw	r3, #1031	; 0x407
   21712:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   21716:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   2171a:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   2171c:	230c      	movs	r3, #12
   2171e:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   21722:	2500      	movs	r5, #0
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
}

NRF_STATIC_INLINE void nrf_rng_error_correction_disable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG &= ~RNG_CONFIG_DERCEN_Msk;
   21724:	4b12      	ldr	r3, [pc, #72]	; (21770 <entropy_nrf5_init+0x98>)
   21726:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   2172a:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   2172e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   21732:	f022 0201 	bic.w	r2, r2, #1
   21736:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2173a:	4a0e      	ldr	r2, [pc, #56]	; (21774 <entropy_nrf5_init+0x9c>)
    p_reg->INTENSET = mask;
   2173c:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   2173e:	6015      	str	r5, [r2, #0]
   21740:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   21742:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   21746:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   21748:	6019      	str	r1, [r3, #0]
   2174a:	200d      	movs	r0, #13
   2174c:	f7f4 fc12 	bl	15f74 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   21750:	200d      	movs	r0, #13
   21752:	f7f4 fbdd 	bl	15f10 <arch_irq_enable>

	return 0;
}
   21756:	4628      	mov	r0, r5
   21758:	bd38      	pop	{r3, r4, r5, pc}
   2175a:	bf00      	nop
   2175c:	200028cc 	.word	0x200028cc
   21760:	000335e7 	.word	0x000335e7
   21764:	0002e93e 	.word	0x0002e93e
   21768:	000335b5 	.word	0x000335b5
   2176c:	200028e4 	.word	0x200028e4
   21770:	4000d000 	.word	0x4000d000
   21774:	4000d100 	.word	0x4000d100

00021778 <isr>:
{
   21778:	b510      	push	{r4, lr}
	byte = random_byte_get();
   2177a:	f7ff fe99 	bl	214b0 <random_byte_get>
	if (byte < 0) {
   2177e:	2800      	cmp	r0, #0
   21780:	db20      	blt.n	217c4 <isr+0x4c>
	uint8_t last  = rngp->last;
   21782:	4b17      	ldr	r3, [pc, #92]	; (217e0 <isr+0x68>)
   21784:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   21788:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   2178c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   21790:	1a51      	subs	r1, r2, r1
   21792:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   21796:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   21798:	d10d      	bne.n	217b6 <isr+0x3e>
	uint8_t last  = rngp->last;
   2179a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   2179e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   217a2:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   217a6:	1a51      	subs	r1, r2, r1
   217a8:	ea34 0101 	bics.w	r1, r4, r1
   217ac:	d10b      	bne.n	217c6 <isr+0x4e>
   217ae:	4b0d      	ldr	r3, [pc, #52]	; (217e4 <isr+0x6c>)
   217b0:	2201      	movs	r2, #1
   217b2:	601a      	str	r2, [r3, #0]
}
   217b4:	e00e      	b.n	217d4 <isr+0x5c>
	rngp->buffer[last] = byte;
   217b6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   217b8:	3201      	adds	r2, #1
   217ba:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   217bc:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   217c0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   217c4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   217c6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   217c8:	3201      	adds	r2, #1
   217ca:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   217cc:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   217d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   217d4:	4804      	ldr	r0, [pc, #16]	; (217e8 <isr+0x70>)
}
   217d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   217da:	f003 ba83 	b.w	24ce4 <z_impl_k_sem_give>
   217de:	bf00      	nop
   217e0:	200028cc 	.word	0x200028cc
   217e4:	4000d004 	.word	0x4000d004
   217e8:	200028e4 	.word	0x200028e4

000217ec <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   217ec:	4919      	ldr	r1, [pc, #100]	; (21854 <sys_clock_timeout_handler+0x68>)
{
   217ee:	b570      	push	{r4, r5, r6, lr}
   217f0:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
   217f2:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   217f6:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
   217f8:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
   217fc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
   21800:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
   21802:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
   21806:	f04f 0500 	mov.w	r5, #0
   2180a:	d20a      	bcs.n	21822 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
   2180c:	4b12      	ldr	r3, [pc, #72]	; (21858 <sys_clock_timeout_handler+0x6c>)
   2180e:	6819      	ldr	r1, [r3, #0]
   21810:	060a      	lsls	r2, r1, #24
   21812:	0a0b      	lsrs	r3, r1, #8
   21814:	1992      	adds	r2, r2, r6
   21816:	4911      	ldr	r1, [pc, #68]	; (2185c <sys_clock_timeout_handler+0x70>)
   21818:	f143 0300 	adc.w	r3, r3, #0
   2181c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
   21820:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
   21822:	f005 fda3 	bl	2736c <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
   21826:	00a3      	lsls	r3, r4, #2
   21828:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   2182c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
   21830:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
   21834:	42b2      	cmp	r2, r6
   21836:	d10b      	bne.n	21850 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
   21838:	b91d      	cbnz	r5, 21842 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
   2183a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
   2183e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   21842:	4b07      	ldr	r3, [pc, #28]	; (21860 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21844:	f44f 3080 	mov.w	r0, #65536	; 0x10000
   21848:	fa00 f404 	lsl.w	r4, r0, r4
   2184c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
   21850:	bd70      	pop	{r4, r5, r6, pc}
   21852:	bf00      	nop
   21854:	20001e10 	.word	0x20001e10
   21858:	20002928 	.word	0x20002928
   2185c:	20001df8 	.word	0x20001df8
   21860:	40011000 	.word	0x40011000

00021864 <compare_int_lock>:
{
   21864:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
   21866:	2301      	movs	r3, #1
   21868:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2186a:	4a11      	ldr	r2, [pc, #68]	; (218b0 <compare_int_lock+0x4c>)
   2186c:	f3bf 8f5b 	dmb	ish
   21870:	43dc      	mvns	r4, r3
   21872:	e852 1f00 	ldrex	r1, [r2]
   21876:	ea01 0c04 	and.w	ip, r1, r4
   2187a:	e842 ce00 	strex	lr, ip, [r2]
   2187e:	f1be 0f00 	cmp.w	lr, #0
   21882:	d1f6      	bne.n	21872 <compare_int_lock+0xe>
   21884:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
   21888:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   2188c:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
   21890:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   21894:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
   21898:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
   2189c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
   218a0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
   218a4:	420b      	tst	r3, r1
}
   218a6:	bf14      	ite	ne
   218a8:	2001      	movne	r0, #1
   218aa:	2000      	moveq	r0, #0
   218ac:	bd10      	pop	{r4, pc}
   218ae:	bf00      	nop
   218b0:	20002924 	.word	0x20002924

000218b4 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
   218b4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   218b6:	4a12      	ldr	r2, [pc, #72]	; (21900 <compare_int_unlock.part.0+0x4c>)
   218b8:	f3bf 8f5b 	dmb	ish
   218bc:	4083      	lsls	r3, r0
   218be:	e852 1f00 	ldrex	r1, [r2]
   218c2:	4319      	orrs	r1, r3
   218c4:	e842 1c00 	strex	ip, r1, [r2]
   218c8:	f1bc 0f00 	cmp.w	ip, #0
   218cc:	d1f7      	bne.n	218be <compare_int_unlock.part.0+0xa>
   218ce:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
   218d2:	4a0c      	ldr	r2, [pc, #48]	; (21904 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   218d4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   218d8:	4083      	lsls	r3, r0
   218da:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   218de:	4b0a      	ldr	r3, [pc, #40]	; (21908 <compare_int_unlock.part.0+0x54>)
   218e0:	f3bf 8f5b 	dmb	ish
   218e4:	681b      	ldr	r3, [r3, #0]
   218e6:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
   218ea:	fa23 f000 	lsr.w	r0, r3, r0
   218ee:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   218f0:	bf42      	ittt	mi
   218f2:	4b06      	ldrmi	r3, [pc, #24]	; (2190c <compare_int_unlock.part.0+0x58>)
   218f4:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
   218f8:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
   218fc:	4770      	bx	lr
   218fe:	bf00      	nop
   21900:	20002924 	.word	0x20002924
   21904:	40011000 	.word	0x40011000
   21908:	20002920 	.word	0x20002920
   2190c:	e000e100 	.word	0xe000e100

00021910 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
   21910:	4b0d      	ldr	r3, [pc, #52]	; (21948 <z_nrf_rtc_timer_read+0x38>)
   21912:	681b      	ldr	r3, [r3, #0]
   21914:	0a19      	lsrs	r1, r3, #8
   21916:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
   21918:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
   2191c:	4b0b      	ldr	r3, [pc, #44]	; (2194c <z_nrf_rtc_timer_read+0x3c>)
   2191e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
   21922:	18c0      	adds	r0, r0, r3
   21924:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
   21928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   2192c:	d20a      	bcs.n	21944 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
   2192e:	4b08      	ldr	r3, [pc, #32]	; (21950 <z_nrf_rtc_timer_read+0x40>)
   21930:	e9d3 2300 	ldrd	r2, r3, [r3]
   21934:	4299      	cmp	r1, r3
   21936:	bf08      	it	eq
   21938:	4290      	cmpeq	r0, r2
   2193a:	d203      	bcs.n	21944 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
   2193c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
   21940:	f141 0100 	adc.w	r1, r1, #0
}
   21944:	4770      	bx	lr
   21946:	bf00      	nop
   21948:	20002928 	.word	0x20002928
   2194c:	40011000 	.word	0x40011000
   21950:	20001df8 	.word	0x20001df8

00021954 <compare_set>:
{
   21954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21958:	b085      	sub	sp, #20
   2195a:	4616      	mov	r6, r2
   2195c:	461f      	mov	r7, r3
   2195e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
   21960:	f7ff ff80 	bl	21864 <compare_int_lock>
   21964:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
   21966:	f7ff ffd3 	bl	21910 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
   2196a:	42b9      	cmp	r1, r7
   2196c:	bf08      	it	eq
   2196e:	42b0      	cmpeq	r0, r6
   21970:	d27f      	bcs.n	21a72 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
   21972:	ebb6 0800 	subs.w	r8, r6, r0
   21976:	eb67 0901 	sbc.w	r9, r7, r1
   2197a:	2300      	movs	r3, #0
   2197c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   21980:	454b      	cmp	r3, r9
   21982:	bf08      	it	eq
   21984:	4542      	cmpeq	r2, r8
   21986:	f0c0 8085 	bcc.w	21a94 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
   2198a:	4b44      	ldr	r3, [pc, #272]	; (21a9c <compare_set+0x148>)
   2198c:	eb03 1305 	add.w	r3, r3, r5, lsl #4
   21990:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
   21994:	429f      	cmp	r7, r3
   21996:	bf08      	it	eq
   21998:	4296      	cmpeq	r6, r2
   2199a:	d054      	beq.n	21a46 <compare_set+0xf2>
   2199c:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   219a0:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
   219a4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   219a8:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   219ac:	fa0b f205 	lsl.w	r2, fp, r5
   219b0:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
   219b4:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   219b8:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
   219bc:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
   219be:	4a38      	ldr	r2, [pc, #224]	; (21aa0 <compare_set+0x14c>)
    return p_reg->CC[ch];
   219c0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
   219c4:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   219c8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
   219cc:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
   219d0:	461c      	mov	r4, r3
   219d2:	4693      	mov	fp, r2
     return p_reg->COUNTER;
   219d4:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
   219d8:	eba0 000a 	sub.w	r0, r0, sl
   219dc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   219e0:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
   219e4:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
   219e6:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
   219ea:	d105      	bne.n	219f8 <compare_set+0xa4>
   219ec:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
   219ee:	2013      	movs	r0, #19
   219f0:	f00b f844 	bl	2ca7c <z_impl_k_busy_wait>
   219f4:	4a2a      	ldr	r2, [pc, #168]	; (21aa0 <compare_set+0x14c>)
   219f6:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
   219f8:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
   219fa:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
   219fe:	eba4 000c 	sub.w	r0, r4, ip
   21a02:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
   21a06:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   21a0a:	bf88      	it	hi
   21a0c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21a0e:	2000      	movs	r0, #0
   21a10:	f8c8 0000 	str.w	r0, [r8]
   21a14:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
   21a18:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
   21a1c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
   21a20:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
   21a24:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
   21a28:	4582      	cmp	sl, r0
   21a2a:	d006      	beq.n	21a3a <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
   21a2c:	1a20      	subs	r0, r4, r0
   21a2e:	3802      	subs	r0, #2
   21a30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
   21a34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   21a38:	d819      	bhi.n	21a6e <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
   21a3a:	1ae4      	subs	r4, r4, r3
   21a3c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
   21a40:	1932      	adds	r2, r6, r4
   21a42:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
   21a46:	4c15      	ldr	r4, [pc, #84]	; (21a9c <compare_set+0x148>)
   21a48:	0129      	lsls	r1, r5, #4
   21a4a:	eb04 1005 	add.w	r0, r4, r5, lsl #4
   21a4e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
   21a52:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
   21a54:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
   21a56:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
   21a58:	6043      	str	r3, [r0, #4]
	return ret;
   21a5a:	2400      	movs	r4, #0
	if (key) {
   21a5c:	9b01      	ldr	r3, [sp, #4]
   21a5e:	b113      	cbz	r3, 21a66 <compare_set+0x112>
   21a60:	4628      	mov	r0, r5
   21a62:	f7ff ff27 	bl	218b4 <compare_int_unlock.part.0>
}
   21a66:	4620      	mov	r0, r4
   21a68:	b005      	add	sp, #20
   21a6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a6e:	4620      	mov	r0, r4
   21a70:	e7b0      	b.n	219d4 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
   21a72:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   21a74:	4a0b      	ldr	r2, [pc, #44]	; (21aa4 <compare_set+0x150>)
   21a76:	f3bf 8f5b 	dmb	ish
   21a7a:	40ab      	lsls	r3, r5
   21a7c:	e852 1f00 	ldrex	r1, [r2]
   21a80:	4319      	orrs	r1, r3
   21a82:	e842 1000 	strex	r0, r1, [r2]
   21a86:	2800      	cmp	r0, #0
   21a88:	d1f8      	bne.n	21a7c <compare_set+0x128>
   21a8a:	f3bf 8f5b 	dmb	ish
   21a8e:	4632      	mov	r2, r6
   21a90:	463b      	mov	r3, r7
   21a92:	e7d8      	b.n	21a46 <compare_set+0xf2>
			return -EINVAL;
   21a94:	f06f 0415 	mvn.w	r4, #21
   21a98:	e7e0      	b.n	21a5c <compare_set+0x108>
   21a9a:	bf00      	nop
   21a9c:	20001e00 	.word	0x20001e00
   21aa0:	40011000 	.word	0x40011000
   21aa4:	20002920 	.word	0x20002920

00021aa8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
   21aa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
   21aaa:	4b19      	ldr	r3, [pc, #100]	; (21b10 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
   21aac:	4d19      	ldr	r5, [pc, #100]	; (21b14 <sys_clock_driver_init+0x6c>)
   21aae:	2400      	movs	r4, #0
   21ab0:	f04f 30ff 	mov.w	r0, #4294967295
   21ab4:	f04f 31ff 	mov.w	r1, #4294967295
   21ab8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
   21abc:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
   21ac0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21ac4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   21ac8:	4b13      	ldr	r3, [pc, #76]	; (21b18 <sys_clock_driver_init+0x70>)
   21aca:	2602      	movs	r6, #2
   21acc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
   21ad0:	2101      	movs	r1, #1
   21ad2:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
   21ad6:	2011      	movs	r0, #17
   21ad8:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   21adc:	4622      	mov	r2, r4
   21ade:	f7f4 fa49 	bl	15f74 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
   21ae2:	2011      	movs	r0, #17
   21ae4:	f7f4 fa14 	bl	15f10 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   21ae8:	4a0c      	ldr	r2, [pc, #48]	; (21b1c <sys_clock_driver_init+0x74>)
   21aea:	2301      	movs	r3, #1
   21aec:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
   21aee:	4a0c      	ldr	r2, [pc, #48]	; (21b20 <sys_clock_driver_init+0x78>)
   21af0:	602b      	str	r3, [r5, #0]
   21af2:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
   21af4:	4b0b      	ldr	r3, [pc, #44]	; (21b24 <sys_clock_driver_init+0x7c>)
   21af6:	4a0c      	ldr	r2, [pc, #48]	; (21b28 <sys_clock_driver_init+0x80>)
   21af8:	9300      	str	r3, [sp, #0]
   21afa:	9401      	str	r4, [sp, #4]
   21afc:	2300      	movs	r3, #0
   21afe:	4620      	mov	r0, r4
   21b00:	f7ff ff28 	bl	21954 <compare_set>

	z_nrf_clock_control_lf_on(mode);
   21b04:	4630      	mov	r0, r6
   21b06:	f7fe fe4b 	bl	207a0 <z_nrf_clock_control_lf_on>

	return 0;
}
   21b0a:	4620      	mov	r0, r4
   21b0c:	b002      	add	sp, #8
   21b0e:	bd70      	pop	{r4, r5, r6, pc}
   21b10:	20001e00 	.word	0x20001e00
   21b14:	40011000 	.word	0x40011000
   21b18:	e000e100 	.word	0xe000e100
   21b1c:	40011008 	.word	0x40011008
   21b20:	20002924 	.word	0x20002924
   21b24:	000217ed 	.word	0x000217ed
   21b28:	007fffff 	.word	0x007fffff

00021b2c <rtc_nrf_isr>:
{
   21b2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    return p_reg->INTENSET & mask;
   21b30:	4c2a      	ldr	r4, [pc, #168]	; (21bdc <rtc_nrf_isr+0xb0>)
   21b32:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
   21b36:	0799      	lsls	r1, r3, #30
   21b38:	d509      	bpl.n	21b4e <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21b3a:	4b29      	ldr	r3, [pc, #164]	; (21be0 <rtc_nrf_isr+0xb4>)
   21b3c:	681a      	ldr	r2, [r3, #0]
   21b3e:	b132      	cbz	r2, 21b4e <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21b40:	2200      	movs	r2, #0
   21b42:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
   21b44:	4a27      	ldr	r2, [pc, #156]	; (21be4 <rtc_nrf_isr+0xb8>)
   21b46:	681b      	ldr	r3, [r3, #0]
   21b48:	6813      	ldr	r3, [r2, #0]
   21b4a:	3301      	adds	r3, #1
   21b4c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   21b4e:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   21b52:	b672      	cpsid	i
    return p_reg->INTENSET & mask;
   21b54:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
   21b58:	03d2      	lsls	r2, r2, #15
   21b5a:	d52c      	bpl.n	21bb6 <rtc_nrf_isr+0x8a>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21b5c:	f3bf 8f5b 	dmb	ish
   21b60:	4a21      	ldr	r2, [pc, #132]	; (21be8 <rtc_nrf_isr+0xbc>)
   21b62:	e852 1f00 	ldrex	r1, [r2]
   21b66:	f021 0001 	bic.w	r0, r1, #1
   21b6a:	e842 0500 	strex	r5, r0, [r2]
   21b6e:	2d00      	cmp	r5, #0
   21b70:	d1f7      	bne.n	21b62 <rtc_nrf_isr+0x36>
   21b72:	f3bf 8f5b 	dmb	ish
   21b76:	4a1d      	ldr	r2, [pc, #116]	; (21bec <rtc_nrf_isr+0xc0>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
   21b78:	b909      	cbnz	r1, 21b7e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   21b7a:	6811      	ldr	r1, [r2, #0]
		if (result) {
   21b7c:	b1d9      	cbz	r1, 21bb6 <rtc_nrf_isr+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
   21b7e:	2500      	movs	r5, #0
   21b80:	6015      	str	r5, [r2, #0]
   21b82:	6812      	ldr	r2, [r2, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   21b84:	f383 8810 	msr	PRIMASK, r3
		curr_time = z_nrf_rtc_timer_read();
   21b88:	f7ff fec2 	bl	21910 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
   21b8c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
   21b90:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
   21b92:	4b17      	ldr	r3, [pc, #92]	; (21bf0 <rtc_nrf_isr+0xc4>)
   21b94:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
   21b98:	4549      	cmp	r1, r9
   21b9a:	bf08      	it	eq
   21b9c:	4540      	cmpeq	r0, r8
   21b9e:	d20f      	bcs.n	21bc0 <rtc_nrf_isr+0x94>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
   21ba0:	4629      	mov	r1, r5
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
   21ba2:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
   21ba6:	b141      	cbz	r1, 21bba <rtc_nrf_isr+0x8e>
			handler(chan, expire_time, user_context);
   21ba8:	f8cd a000 	str.w	sl, [sp]
   21bac:	4642      	mov	r2, r8
   21bae:	464b      	mov	r3, r9
   21bb0:	2000      	movs	r0, #0
   21bb2:	4788      	blx	r1
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
   21bb4:	e001      	b.n	21bba <rtc_nrf_isr+0x8e>
   21bb6:	f383 8810 	msr	PRIMASK, r3
}
   21bba:	b002      	add	sp, #8
   21bbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   21bc0:	f04f 36ff 	mov.w	r6, #4294967295
   21bc4:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
   21bc8:	e9d3 1a00 	ldrd	r1, sl, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
   21bcc:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
   21bd0:	601d      	str	r5, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   21bd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   21bd6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
}
   21bda:	e7e2      	b.n	21ba2 <rtc_nrf_isr+0x76>
   21bdc:	40011000 	.word	0x40011000
   21be0:	40011104 	.word	0x40011104
   21be4:	20002928 	.word	0x20002928
   21be8:	20002920 	.word	0x20002920
   21bec:	40011140 	.word	0x40011140
   21bf0:	20001e00 	.word	0x20001e00

00021bf4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   21bf4:	4b14      	ldr	r3, [pc, #80]	; (21c48 <sys_clock_set_timeout+0x54>)
{
   21bf6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
   21bf8:	f1b0 3fff 	cmp.w	r0, #4294967295
   21bfc:	bf08      	it	eq
   21bfe:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   21c00:	1e44      	subs	r4, r0, #1
   21c02:	2c00      	cmp	r4, #0
   21c04:	dd1e      	ble.n	21c44 <sys_clock_set_timeout+0x50>
   21c06:	429c      	cmp	r4, r3
   21c08:	bfa8      	it	ge
   21c0a:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   21c0c:	f7ff fe80 	bl	21910 <z_nrf_rtc_timer_read>
   21c10:	4b0e      	ldr	r3, [pc, #56]	; (21c4c <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   21c12:	490f      	ldr	r1, [pc, #60]	; (21c50 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
   21c14:	e9d3 2300 	ldrd	r2, r3, [r3]
   21c18:	1a80      	subs	r0, r0, r2
		ticks = 0;
   21c1a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   21c1e:	bf28      	it	cs
   21c20:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
   21c22:	3001      	adds	r0, #1
   21c24:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
   21c26:	4808      	ldr	r0, [pc, #32]	; (21c48 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   21c28:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
   21c2a:	4284      	cmp	r4, r0
   21c2c:	bf28      	it	cs
   21c2e:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
   21c30:	1912      	adds	r2, r2, r4
   21c32:	f04f 0000 	mov.w	r0, #0
   21c36:	9001      	str	r0, [sp, #4]
   21c38:	f143 0300 	adc.w	r3, r3, #0
   21c3c:	f7ff fe8a 	bl	21954 <compare_set>
}
   21c40:	b002      	add	sp, #8
   21c42:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
   21c44:	2400      	movs	r4, #0
   21c46:	e7e1      	b.n	21c0c <sys_clock_set_timeout+0x18>
   21c48:	007fffff 	.word	0x007fffff
   21c4c:	20001e10 	.word	0x20001e10
   21c50:	000217ed 	.word	0x000217ed

00021c54 <sys_clock_elapsed>:
{
   21c54:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
   21c56:	f7ff fe5b 	bl	21910 <z_nrf_rtc_timer_read>
   21c5a:	4b02      	ldr	r3, [pc, #8]	; (21c64 <sys_clock_elapsed+0x10>)
   21c5c:	681b      	ldr	r3, [r3, #0]
}
   21c5e:	1ac0      	subs	r0, r0, r3
   21c60:	bd08      	pop	{r3, pc}
   21c62:	bf00      	nop
   21c64:	20001e10 	.word	0x20001e10

00021c68 <multithreading_lock_acquire>:
#include "multithreading_lock.h"

static K_MUTEX_DEFINE(mpsl_lock);

int multithreading_lock_acquire(k_timeout_t timeout)
{
   21c68:	4602      	mov	r2, r0
   21c6a:	460b      	mov	r3, r1
	return z_impl_k_mutex_lock(mutex, timeout);
   21c6c:	4801      	ldr	r0, [pc, #4]	; (21c74 <multithreading_lock_acquire+0xc>)
   21c6e:	f002 bd0b 	b.w	24688 <z_impl_k_mutex_lock>
   21c72:	bf00      	nop
   21c74:	2000081c 	.word	0x2000081c

00021c78 <multithreading_lock_release>:
	return z_impl_k_mutex_unlock(mutex);
   21c78:	4801      	ldr	r0, [pc, #4]	; (21c80 <multithreading_lock_release+0x8>)
   21c7a:	f002 be05 	b.w	24888 <z_impl_k_mutex_unlock>
   21c7e:	bf00      	nop
   21c80:	2000081c 	.word	0x2000081c

00021c84 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
   21c84:	b508      	push	{r3, lr}
	z_impl_log_panic();
   21c86:	f7ef feeb 	bl	11a60 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
   21c8a:	4908      	ldr	r1, [pc, #32]	; (21cac <k_sys_fatal_error_handler+0x28>)
   21c8c:	680b      	ldr	r3, [r1, #0]
   21c8e:	075b      	lsls	r3, r3, #29
   21c90:	d008      	beq.n	21ca4 <k_sys_fatal_error_handler+0x20>
   21c92:	4b07      	ldr	r3, [pc, #28]	; (21cb0 <k_sys_fatal_error_handler+0x2c>)
   21c94:	4807      	ldr	r0, [pc, #28]	; (21cb4 <k_sys_fatal_error_handler+0x30>)
   21c96:	1ac9      	subs	r1, r1, r3
   21c98:	0889      	lsrs	r1, r1, #2
   21c9a:	0189      	lsls	r1, r1, #6
   21c9c:	f041 0101 	orr.w	r1, r1, #1
   21ca0:	f007 fb1d 	bl	292de <log_0>
		sys_arch_reboot(0);
   21ca4:	2000      	movs	r0, #0
   21ca6:	f7f5 f8cb 	bl	16e40 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
   21caa:	bf00      	nop
   21cac:	2000076c 	.word	0x2000076c
   21cb0:	20000740 	.word	0x20000740
   21cb4:	0003362f 	.word	0x0003362f

00021cb8 <sdc_assertion_handler>:
	bt_ctlr_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_BT_CTLR_ASSERT_HANDLER) */
void sdc_assertion_handler(const char *const file, const uint32_t line)
{
   21cb8:	b538      	push	{r3, r4, r5, lr}
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   21cba:	4b0d      	ldr	r3, [pc, #52]	; (21cf0 <sdc_assertion_handler+0x38>)
   21cbc:	681a      	ldr	r2, [r3, #0]
   21cbe:	0752      	lsls	r2, r2, #29
{
   21cc0:	460d      	mov	r5, r1
	BT_ERR("SoftDevice Controller ASSERT: %s, %d", log_strdup(file), line);
   21cc2:	d00d      	beq.n	21ce0 <sdc_assertion_handler+0x28>
   21cc4:	4c0b      	ldr	r4, [pc, #44]	; (21cf4 <sdc_assertion_handler+0x3c>)
   21cc6:	1b1c      	subs	r4, r3, r4
   21cc8:	08a4      	lsrs	r4, r4, #2
   21cca:	f7ef fd31 	bl	11730 <z_log_strdup>
   21cce:	01a4      	lsls	r4, r4, #6
   21cd0:	f044 0401 	orr.w	r4, r4, #1
   21cd4:	4601      	mov	r1, r0
   21cd6:	4623      	mov	r3, r4
   21cd8:	4807      	ldr	r0, [pc, #28]	; (21cf8 <sdc_assertion_handler+0x40>)
   21cda:	462a      	mov	r2, r5
   21cdc:	f007 fb20 	bl	29320 <log_2>
	k_oops();
   21ce0:	4040      	eors	r0, r0
   21ce2:	f380 8811 	msr	BASEPRI, r0
   21ce6:	f04f 0003 	mov.w	r0, #3
   21cea:	df02      	svc	2
}
   21cec:	bd38      	pop	{r3, r4, r5, pc}
   21cee:	bf00      	nop
   21cf0:	20000790 	.word	0x20000790
   21cf4:	20000740 	.word	0x20000740
   21cf8:	0003364c 	.word	0x0003364c

00021cfc <hci_driver_init>:

	(void)sdc_hci_cmd_vs_zephyr_write_bd_addr(bd_addr);
}

static int hci_driver_init(const struct device *unused)
{
   21cfc:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	int err = 0;

	bt_hci_driver_register(&drv);
   21cfe:	4804      	ldr	r0, [pc, #16]	; (21d10 <hci_driver_init+0x14>)
   21d00:	f7f6 fde0 	bl	188c4 <bt_hci_driver_register>

	err = sdc_init(sdc_assertion_handler);
	return err;
}
   21d04:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	err = sdc_init(sdc_assertion_handler);
   21d08:	4802      	ldr	r0, [pc, #8]	; (21d14 <hci_driver_init+0x18>)
   21d0a:	f7e2 b88d 	b.w	3e28 <sdc_init>
   21d0e:	bf00      	nop
   21d10:	0002e4f4 	.word	0x0002e4f4
   21d14:	00021cb9 	.word	0x00021cb9

00021d18 <rand_prio_low_vector_get_blocking>:
{
   21d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   21d1a:	4b16      	ldr	r3, [pc, #88]	; (21d74 <rand_prio_low_vector_get_blocking+0x5c>)
{
   21d1c:	4604      	mov	r4, r0
	int err = entropy_get_entropy(entropy_source, p_buff, length);
   21d1e:	681e      	ldr	r6, [r3, #0]
   21d20:	460d      	mov	r5, r1

static inline int z_impl_entropy_get_entropy(const struct device *dev,
					     uint8_t *buffer,
					     uint16_t length)
{
	const struct entropy_driver_api *api =
   21d22:	68b7      	ldr	r7, [r6, #8]
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
   21d24:	683b      	ldr	r3, [r7, #0]
   21d26:	b963      	cbnz	r3, 21d42 <rand_prio_low_vector_get_blocking+0x2a>
   21d28:	4913      	ldr	r1, [pc, #76]	; (21d78 <rand_prio_low_vector_get_blocking+0x60>)
   21d2a:	4a14      	ldr	r2, [pc, #80]	; (21d7c <rand_prio_low_vector_get_blocking+0x64>)
   21d2c:	4814      	ldr	r0, [pc, #80]	; (21d80 <rand_prio_low_vector_get_blocking+0x68>)
   21d2e:	234b      	movs	r3, #75	; 0x4b
   21d30:	f006 ff33 	bl	28b9a <printk>
   21d34:	4813      	ldr	r0, [pc, #76]	; (21d84 <rand_prio_low_vector_get_blocking+0x6c>)
   21d36:	f006 ff30 	bl	28b9a <printk>
   21d3a:	4810      	ldr	r0, [pc, #64]	; (21d7c <rand_prio_low_vector_get_blocking+0x64>)
   21d3c:	214b      	movs	r1, #75	; 0x4b
   21d3e:	f007 f96d 	bl	2901c <assert_post_action>
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   21d42:	683b      	ldr	r3, [r7, #0]
   21d44:	462a      	mov	r2, r5
   21d46:	4621      	mov	r1, r4
   21d48:	4630      	mov	r0, r6
   21d4a:	4798      	blx	r3
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   21d4c:	b180      	cbz	r0, 21d70 <rand_prio_low_vector_get_blocking+0x58>
   21d4e:	490e      	ldr	r1, [pc, #56]	; (21d88 <rand_prio_low_vector_get_blocking+0x70>)
   21d50:	4a0e      	ldr	r2, [pc, #56]	; (21d8c <rand_prio_low_vector_get_blocking+0x74>)
   21d52:	480b      	ldr	r0, [pc, #44]	; (21d80 <rand_prio_low_vector_get_blocking+0x68>)
   21d54:	f44f 73e8 	mov.w	r3, #464	; 0x1d0
   21d58:	f006 ff1f 	bl	28b9a <printk>
   21d5c:	480c      	ldr	r0, [pc, #48]	; (21d90 <rand_prio_low_vector_get_blocking+0x78>)
   21d5e:	f006 ff1c 	bl	28b9a <printk>
}
   21d62:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	__ASSERT(err == 0, "The entropy source returned an error in a blocking call");
   21d66:	4809      	ldr	r0, [pc, #36]	; (21d8c <rand_prio_low_vector_get_blocking+0x74>)
   21d68:	f44f 71e8 	mov.w	r1, #464	; 0x1d0
   21d6c:	f007 b956 	b.w	2901c <assert_post_action>
}
   21d70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   21d72:	bf00      	nop
   21d74:	2000292c 	.word	0x2000292c
   21d78:	0003369e 	.word	0x0003369e
   21d7c:	00033671 	.word	0x00033671
   21d80:	0002e93e 	.word	0x0002e93e
   21d84:	000336be 	.word	0x000336be
   21d88:	0002ec6a 	.word	0x0002ec6a
   21d8c:	000336e4 	.word	0x000336e4
   21d90:	0003371d 	.word	0x0003371d

00021d94 <rand_prio_high_vector_get>:
{
   21d94:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   21d96:	4b11      	ldr	r3, [pc, #68]	; (21ddc <rand_prio_high_vector_get+0x48>)
{
   21d98:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   21d9a:	6818      	ldr	r0, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   21d9c:	6883      	ldr	r3, [r0, #8]
   21d9e:	685d      	ldr	r5, [r3, #4]
   21da0:	460a      	mov	r2, r1
   21da2:	b1bd      	cbz	r5, 21dd4 <rand_prio_high_vector_get+0x40>
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   21da4:	4621      	mov	r1, r4
   21da6:	2300      	movs	r3, #0
   21da8:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the high priority context");
   21daa:	1e04      	subs	r4, r0, #0
   21dac:	da0e      	bge.n	21dcc <rand_prio_high_vector_get+0x38>
   21dae:	490c      	ldr	r1, [pc, #48]	; (21de0 <rand_prio_high_vector_get+0x4c>)
   21db0:	4a0c      	ldr	r2, [pc, #48]	; (21de4 <rand_prio_high_vector_get+0x50>)
   21db2:	480d      	ldr	r0, [pc, #52]	; (21de8 <rand_prio_high_vector_get+0x54>)
   21db4:	f44f 73e4 	mov.w	r3, #456	; 0x1c8
   21db8:	f006 feef 	bl	28b9a <printk>
   21dbc:	480b      	ldr	r0, [pc, #44]	; (21dec <rand_prio_high_vector_get+0x58>)
   21dbe:	f006 feec 	bl	28b9a <printk>
   21dc2:	4808      	ldr	r0, [pc, #32]	; (21de4 <rand_prio_high_vector_get+0x50>)
   21dc4:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   21dc8:	f007 f928 	bl	2901c <assert_post_action>
	return ret >= 0 ? ret : 0;
   21dcc:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   21dd0:	b2c0      	uxtb	r0, r0
   21dd2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   21dd4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   21dd8:	e7e9      	b.n	21dae <rand_prio_high_vector_get+0x1a>
   21dda:	bf00      	nop
   21ddc:	2000292c 	.word	0x2000292c
   21de0:	00033757 	.word	0x00033757
   21de4:	000336e4 	.word	0x000336e4
   21de8:	0002e93e 	.word	0x0002e93e
   21dec:	00033760 	.word	0x00033760

00021df0 <hci_driver_open>:
{
   21df0:	b570      	push	{r4, r5, r6, lr}
   21df2:	b090      	sub	sp, #64	; 0x40
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   21df4:	2200      	movs	r2, #0
   21df6:	2300      	movs	r3, #0
   21df8:	e9cd 2306 	strd	r2, r3, [sp, #24]
   21dfc:	2300      	movs	r3, #0
   21dfe:	f06f 0209 	mvn.w	r2, #9
   21e02:	e9cd 2303 	strd	r2, r3, [sp, #12]
   21e06:	e9cd 3301 	strd	r3, r3, [sp, #4]
   21e0a:	9300      	str	r3, [sp, #0]
   21e0c:	4962      	ldr	r1, [pc, #392]	; (21f98 <hci_driver_open+0x1a8>)
   21e0e:	4b63      	ldr	r3, [pc, #396]	; (21f9c <hci_driver_open+0x1ac>)
   21e10:	4863      	ldr	r0, [pc, #396]	; (21fa0 <hci_driver_open+0x1b0>)
   21e12:	f44f 6280 	mov.w	r2, #1024	; 0x400
   21e16:	f002 f967 	bl	240e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   21e1a:	4962      	ldr	r1, [pc, #392]	; (21fa4 <hci_driver_open+0x1b4>)
   21e1c:	4860      	ldr	r0, [pc, #384]	; (21fa0 <hci_driver_open+0x1b0>)
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   21e1e:	4c62      	ldr	r4, [pc, #392]	; (21fa8 <hci_driver_open+0x1b8>)
   21e20:	f001 ff70 	bl	23d04 <z_impl_k_thread_name_set>
	sdc_build_revision_get(build_revision);
   21e24:	a80b      	add	r0, sp, #44	; 0x2c
   21e26:	f7e1 ff6b 	bl	3d00 <sdc_build_revision_get>
	LOG_HEXDUMP_INF(build_revision, sizeof(build_revision),
   21e2a:	6820      	ldr	r0, [r4, #0]
   21e2c:	f000 0007 	and.w	r0, r0, #7
   21e30:	2802      	cmp	r0, #2
   21e32:	d90a      	bls.n	21e4a <hci_driver_open+0x5a>
   21e34:	4b5d      	ldr	r3, [pc, #372]	; (21fac <hci_driver_open+0x1bc>)
   21e36:	485e      	ldr	r0, [pc, #376]	; (21fb0 <hci_driver_open+0x1c0>)
   21e38:	1ae3      	subs	r3, r4, r3
   21e3a:	089b      	lsrs	r3, r3, #2
   21e3c:	019b      	lsls	r3, r3, #6
   21e3e:	f043 0303 	orr.w	r3, r3, #3
   21e42:	2214      	movs	r2, #20
   21e44:	a90b      	add	r1, sp, #44	; 0x2c
   21e46:	f007 faab 	bl	293a0 <log_hexdump>
			err = sdc_support_scan();
   21e4a:	f7e2 f89d 	bl	3f88 <sdc_support_scan>
			if (err) {
   21e4e:	b118      	cbz	r0, 21e58 <hci_driver_open+0x68>
				return -ENOTSUP;
   21e50:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   21e54:	b010      	add	sp, #64	; 0x40
   21e56:	bd70      	pop	{r4, r5, r6, pc}
		err = sdc_support_master();
   21e58:	f7e2 f886 	bl	3f68 <sdc_support_master>
		if (err) {
   21e5c:	2800      	cmp	r0, #0
   21e5e:	d1f7      	bne.n	21e50 <hci_driver_open+0x60>
		err = sdc_support_dle();
   21e60:	f7e2 f862 	bl	3f28 <sdc_support_dle>
		if (err) {
   21e64:	2800      	cmp	r0, #0
   21e66:	d1f3      	bne.n	21e50 <hci_driver_open+0x60>
		err = sdc_support_le_2m_phy();
   21e68:	f7e2 f86e 	bl	3f48 <sdc_support_le_2m_phy>
		if (err) {
   21e6c:	4606      	mov	r6, r0
   21e6e:	2800      	cmp	r0, #0
   21e70:	d1ee      	bne.n	21e50 <hci_driver_open+0x60>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21e72:	ad08      	add	r5, sp, #32
	cfg.master_count.count = SDC_MASTER_COUNT;
   21e74:	2101      	movs	r1, #1
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21e76:	462a      	mov	r2, r5
	cfg.master_count.count = SDC_MASTER_COUNT;
   21e78:	f88d 1020 	strb.w	r1, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21e7c:	f7e1 ff4e 	bl	3d1c <sdc_cfg_set>
	if (required_memory < 0) {
   21e80:	2800      	cmp	r0, #0
   21e82:	dbe7      	blt.n	21e54 <hci_driver_open+0x64>
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21e84:	462a      	mov	r2, r5
   21e86:	2102      	movs	r1, #2
   21e88:	4630      	mov	r0, r6
	cfg.slave_count.count = CONFIG_BT_CTLR_SDC_PERIPHERAL_COUNT;
   21e8a:	f88d 6020 	strb.w	r6, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21e8e:	f7e1 ff45 	bl	3d1c <sdc_cfg_set>
	if (required_memory < 0) {
   21e92:	2800      	cmp	r0, #0
   21e94:	dbde      	blt.n	21e54 <hci_driver_open+0x64>
	cfg.buffer_cfg.tx_packet_size = MAX_TX_PACKET_SIZE;
   21e96:	4b47      	ldr	r3, [pc, #284]	; (21fb4 <hci_driver_open+0x1c4>)
   21e98:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21e9a:	462a      	mov	r2, r5
   21e9c:	2103      	movs	r1, #3
   21e9e:	4630      	mov	r0, r6
   21ea0:	f7e1 ff3c 	bl	3d1c <sdc_cfg_set>
	if (required_memory < 0) {
   21ea4:	2800      	cmp	r0, #0
   21ea6:	dbd5      	blt.n	21e54 <hci_driver_open+0x64>
	cfg.event_length.event_length_us =
   21ea8:	f641 534c 	movw	r3, #7500	; 0x1d4c
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21eac:	462a      	mov	r2, r5
   21eae:	2104      	movs	r1, #4
   21eb0:	4630      	mov	r0, r6
	cfg.event_length.event_length_us =
   21eb2:	9308      	str	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21eb4:	f7e1 ff32 	bl	3d1c <sdc_cfg_set>
	if (required_memory < 0) {
   21eb8:	2800      	cmp	r0, #0
   21eba:	dbcb      	blt.n	21e54 <hci_driver_open+0x64>
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21ebc:	462a      	mov	r2, r5
   21ebe:	2105      	movs	r1, #5
   21ec0:	4630      	mov	r0, r6
	cfg.adv_count.count = SDC_ADV_SET_COUNT;
   21ec2:	f88d 6020 	strb.w	r6, [sp, #32]
	sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21ec6:	f7e1 ff29 	bl	3d1c <sdc_cfg_set>
	if (required_memory < 0) {
   21eca:	2800      	cmp	r0, #0
   21ecc:	dbc2      	blt.n	21e54 <hci_driver_open+0x64>
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   21ece:	2303      	movs	r3, #3
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21ed0:	462a      	mov	r2, r5
   21ed2:	2106      	movs	r1, #6
   21ed4:	4630      	mov	r0, r6
		cfg.scan_buffer_cfg.count = CONFIG_BT_CTLR_SDC_SCAN_BUFFER_COUNT;
   21ed6:	f88d 3020 	strb.w	r3, [sp, #32]
		sdc_cfg_set(SDC_DEFAULT_RESOURCE_CFG_TAG,
   21eda:	f7e1 ff1f 	bl	3d1c <sdc_cfg_set>
		if (required_memory < 0) {
   21ede:	2800      	cmp	r0, #0
   21ee0:	dbb8      	blt.n	21e54 <hci_driver_open+0x64>
	if (required_memory > sizeof(sdc_mempool)) {
   21ee2:	f240 4186 	movw	r1, #1158	; 0x486
   21ee6:	4288      	cmp	r0, r1
   21ee8:	dd15      	ble.n	21f16 <hci_driver_open+0x126>
		BT_ERR("Allocated memory too low: %u < %u",
   21eea:	6823      	ldr	r3, [r4, #0]
   21eec:	075d      	lsls	r5, r3, #29
   21eee:	d009      	beq.n	21f04 <hci_driver_open+0x114>
   21ef0:	4b2e      	ldr	r3, [pc, #184]	; (21fac <hci_driver_open+0x1bc>)
   21ef2:	1ae3      	subs	r3, r4, r3
   21ef4:	089b      	lsrs	r3, r3, #2
   21ef6:	019b      	lsls	r3, r3, #6
   21ef8:	4602      	mov	r2, r0
   21efa:	f043 0301 	orr.w	r3, r3, #1
   21efe:	482e      	ldr	r0, [pc, #184]	; (21fb8 <hci_driver_open+0x1c8>)
   21f00:	f007 fa0e 	bl	29320 <log_2>
		k_panic();
   21f04:	4040      	eors	r0, r0
   21f06:	f380 8811 	msr	BASEPRI, r0
   21f0a:	f04f 0004 	mov.w	r0, #4
   21f0e:	df02      	svc	2
		return -ENOMEM;
   21f10:	f06f 000b 	mvn.w	r0, #11
   21f14:	e79e      	b.n	21e54 <hci_driver_open+0x64>
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
   21f16:	4829      	ldr	r0, [pc, #164]	; (21fbc <hci_driver_open+0x1cc>)
   21f18:	f001 fb28 	bl	2356c <z_impl_device_get_binding>
	entropy_source = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   21f1c:	4b28      	ldr	r3, [pc, #160]	; (21fc0 <hci_driver_open+0x1d0>)
   21f1e:	6018      	str	r0, [r3, #0]
	if (!entropy_source) {
   21f20:	b970      	cbnz	r0, 21f40 <hci_driver_open+0x150>
		BT_ERR("An entropy source is required");
   21f22:	6823      	ldr	r3, [r4, #0]
   21f24:	075a      	lsls	r2, r3, #29
   21f26:	d008      	beq.n	21f3a <hci_driver_open+0x14a>
   21f28:	4920      	ldr	r1, [pc, #128]	; (21fac <hci_driver_open+0x1bc>)
   21f2a:	4826      	ldr	r0, [pc, #152]	; (21fc4 <hci_driver_open+0x1d4>)
   21f2c:	1a61      	subs	r1, r4, r1
   21f2e:	0889      	lsrs	r1, r1, #2
   21f30:	0189      	lsls	r1, r1, #6
   21f32:	f041 0101 	orr.w	r1, r1, #1
   21f36:	f007 f9d2 	bl	292de <log_0>
		return -ENODEV;
   21f3a:	f06f 0012 	mvn.w	r0, #18
   21f3e:	e789      	b.n	21e54 <hci_driver_open+0x64>
	sdc_rand_source_t rand_functions = {
   21f40:	4b21      	ldr	r3, [pc, #132]	; (21fc8 <hci_driver_open+0x1d8>)
   21f42:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
   21f46:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	err = sdc_rand_source_register(&rand_functions);
   21f4a:	4628      	mov	r0, r5
   21f4c:	f7e2 f87e 	bl	404c <sdc_rand_source_register>
	if (err) {
   21f50:	4601      	mov	r1, r0
   21f52:	b170      	cbz	r0, 21f72 <hci_driver_open+0x182>
		BT_ERR("Failed to register rand source (%d)", err);
   21f54:	6823      	ldr	r3, [r4, #0]
   21f56:	075b      	lsls	r3, r3, #29
   21f58:	d008      	beq.n	21f6c <hci_driver_open+0x17c>
   21f5a:	4a14      	ldr	r2, [pc, #80]	; (21fac <hci_driver_open+0x1bc>)
   21f5c:	481b      	ldr	r0, [pc, #108]	; (21fcc <hci_driver_open+0x1dc>)
   21f5e:	1aa2      	subs	r2, r4, r2
   21f60:	0892      	lsrs	r2, r2, #2
   21f62:	0192      	lsls	r2, r2, #6
   21f64:	f042 0201 	orr.w	r2, r2, #1
   21f68:	f007 f9c6 	bl	292f8 <log_1>
		return -EINVAL;
   21f6c:	f06f 0015 	mvn.w	r0, #21
   21f70:	e770      	b.n	21e54 <hci_driver_open+0x64>
	err = MULTITHREADING_LOCK_ACQUIRE();
   21f72:	f04f 30ff 	mov.w	r0, #4294967295
   21f76:	f04f 31ff 	mov.w	r1, #4294967295
   21f7a:	f7ff fe75 	bl	21c68 <multithreading_lock_acquire>
	if (!err) {
   21f7e:	4604      	mov	r4, r0
   21f80:	b930      	cbnz	r0, 21f90 <hci_driver_open+0x1a0>
		err = sdc_enable(host_signal, sdc_mempool);
   21f82:	4913      	ldr	r1, [pc, #76]	; (21fd0 <hci_driver_open+0x1e0>)
   21f84:	4813      	ldr	r0, [pc, #76]	; (21fd4 <hci_driver_open+0x1e4>)
   21f86:	f7e1 ff27 	bl	3dd8 <sdc_enable>
   21f8a:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   21f8c:	f7ff fe74 	bl	21c78 <multithreading_lock_release>
	if (err < 0) {
   21f90:	ea04 70e4 	and.w	r0, r4, r4, asr #31
   21f94:	e75e      	b.n	21e54 <hci_driver_open+0x64>
   21f96:	bf00      	nop
   21f98:	20004c80 	.word	0x20004c80
   21f9c:	00021fd9 	.word	0x00021fd9
   21fa0:	20001e18 	.word	0x20001e18
   21fa4:	000337a4 	.word	0x000337a4
   21fa8:	20000790 	.word	0x20000790
   21fac:	20000740 	.word	0x20000740
   21fb0:	000337ab 	.word	0x000337ab
   21fb4:	02031b1b 	.word	0x02031b1b
   21fb8:	000337d2 	.word	0x000337d2
   21fbc:	0003362b 	.word	0x0003362b
   21fc0:	2000292c 	.word	0x2000292c
   21fc4:	000337f4 	.word	0x000337f4
   21fc8:	0002d3f0 	.word	0x0002d3f0
   21fcc:	00033812 	.word	0x00033812
   21fd0:	20002e08 	.word	0x20002e08
   21fd4:	00022105 	.word	0x00022105

00021fd8 <recv_thread>:
{
   21fd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   21fdc:	4b43      	ldr	r3, [pc, #268]	; (220ec <recv_thread+0x114>)
   21fde:	4e44      	ldr	r6, [pc, #272]	; (220f0 <recv_thread+0x118>)
	return z_impl_k_sem_take(sem, timeout);
   21fe0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 22100 <recv_thread+0x128>
		errcode = hci_internal_evt_get(p_hci_buffer);
   21fe4:	4d43      	ldr	r5, [pc, #268]	; (220f4 <recv_thread+0x11c>)
   21fe6:	1b9e      	subs	r6, r3, r6
	bool received_data = false;
   21fe8:	2700      	movs	r7, #0
   21fea:	08b6      	lsrs	r6, r6, #2
	bool received_evt = false;
   21fec:	463c      	mov	r4, r7
   21fee:	4698      	mov	r8, r3
		if (!received_evt && !received_data) {
   21ff0:	b93c      	cbnz	r4, 22002 <recv_thread+0x2a>
   21ff2:	b937      	cbnz	r7, 22002 <recv_thread+0x2a>
   21ff4:	f04f 32ff 	mov.w	r2, #4294967295
   21ff8:	f04f 33ff 	mov.w	r3, #4294967295
   21ffc:	4648      	mov	r0, r9
   21ffe:	f002 feb5 	bl	24d6c <z_impl_k_sem_take>
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22002:	f04f 30ff 	mov.w	r0, #4294967295
   22006:	f04f 31ff 	mov.w	r1, #4294967295
   2200a:	f7ff fe2d 	bl	21c68 <multithreading_lock_acquire>
	if (!errcode) {
   2200e:	b160      	cbz	r0, 2202a <recv_thread+0x52>
		return false;
   22010:	2400      	movs	r4, #0
	errcode = MULTITHREADING_LOCK_ACQUIRE();
   22012:	f04f 30ff 	mov.w	r0, #4294967295
   22016:	f04f 31ff 	mov.w	r1, #4294967295
   2201a:	f7ff fe25 	bl	21c68 <multithreading_lock_acquire>
	if (!errcode) {
   2201e:	2800      	cmp	r0, #0
   22020:	d03c      	beq.n	2209c <recv_thread+0xc4>
		return false;
   22022:	2700      	movs	r7, #0
	z_impl_k_yield();
   22024:	f004 fbc4 	bl	267b0 <z_impl_k_yield>
}
   22028:	e7e2      	b.n	21ff0 <recv_thread+0x18>
		errcode = hci_internal_evt_get(p_hci_buffer);
   2202a:	4832      	ldr	r0, [pc, #200]	; (220f4 <recv_thread+0x11c>)
   2202c:	f000 fba4 	bl	22778 <hci_internal_evt_get>
   22030:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   22032:	f7ff fe21 	bl	21c78 <multithreading_lock_release>
	if (errcode) {
   22036:	2c00      	cmp	r4, #0
   22038:	d1ea      	bne.n	22010 <recv_thread+0x38>
	switch (hdr->evt) {
   2203a:	7828      	ldrb	r0, [r5, #0]
   2203c:	283e      	cmp	r0, #62	; 0x3e
   2203e:	d007      	beq.n	22050 <recv_thread+0x78>
   22040:	28ff      	cmp	r0, #255	; 0xff
   22042:	d01e      	beq.n	22082 <recv_thread+0xaa>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   22044:	f04f 32ff 	mov.w	r2, #4294967295
   22048:	f04f 33ff 	mov.w	r3, #4294967295
   2204c:	2400      	movs	r4, #0
   2204e:	e005      	b.n	2205c <recv_thread+0x84>
		switch (me->subevent) {
   22050:	78ab      	ldrb	r3, [r5, #2]
   22052:	2b02      	cmp	r3, #2
		switch (subevent) {
   22054:	d1f6      	bne.n	22044 <recv_thread+0x6c>
	evt_buf = bt_buf_get_evt(hdr->evt, discardable,
   22056:	2200      	movs	r2, #0
   22058:	2300      	movs	r3, #0
   2205a:	2401      	movs	r4, #1
   2205c:	4621      	mov	r1, r4
   2205e:	f7f5 f887 	bl	17170 <bt_buf_get_evt>
	if (!evt_buf) {
   22062:	4607      	mov	r7, r0
   22064:	b980      	cbnz	r0, 22088 <recv_thread+0xb0>
		if (discardable) {
   22066:	2c00      	cmp	r4, #0
   22068:	d1d3      	bne.n	22012 <recv_thread+0x3a>
		BT_ERR("No event buffer available");
   2206a:	f8d8 3000 	ldr.w	r3, [r8]
   2206e:	075a      	lsls	r2, r3, #29
   22070:	d005      	beq.n	2207e <recv_thread+0xa6>
   22072:	01b1      	lsls	r1, r6, #6
   22074:	4820      	ldr	r0, [pc, #128]	; (220f8 <recv_thread+0x120>)
   22076:	f041 0101 	orr.w	r1, r1, #1
   2207a:	f007 f930 	bl	292de <log_0>
	return true;
   2207e:	2401      	movs	r4, #1
   22080:	e7c7      	b.n	22012 <recv_thread+0x3a>
		switch (subevent) {
   22082:	78ab      	ldrb	r3, [r5, #2]
   22084:	2b80      	cmp	r3, #128	; 0x80
   22086:	e7e5      	b.n	22054 <recv_thread+0x7c>
	net_buf_add_mem(evt_buf, &hci_buf[0], hdr->len + sizeof(*hdr));
   22088:	786a      	ldrb	r2, [r5, #1]
   2208a:	4629      	mov	r1, r5
   2208c:	3202      	adds	r2, #2
   2208e:	3008      	adds	r0, #8
   22090:	f009 fff2 	bl	2c078 <net_buf_simple_add_mem>
	bt_recv(evt_buf);
   22094:	4638      	mov	r0, r7
   22096:	f7f6 fbdf 	bl	18858 <bt_recv>
   2209a:	e7f0      	b.n	2207e <recv_thread+0xa6>
		errcode = sdc_hci_data_get(p_hci_buffer);
   2209c:	4815      	ldr	r0, [pc, #84]	; (220f4 <recv_thread+0x11c>)
   2209e:	f7ea ff35 	bl	cf0c <sdc_hci_data_get>
   220a2:	4607      	mov	r7, r0
		MULTITHREADING_LOCK_RELEASE();
   220a4:	f7ff fde8 	bl	21c78 <multithreading_lock_release>
	if (errcode) {
   220a8:	2f00      	cmp	r7, #0
   220aa:	d1ba      	bne.n	22022 <recv_thread+0x4a>
	struct net_buf *data_buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   220ac:	f04f 32ff 	mov.w	r2, #4294967295
   220b0:	f04f 33ff 	mov.w	r3, #4294967295
   220b4:	2003      	movs	r0, #3
   220b6:	f7f5 f811 	bl	170dc <bt_buf_get_rx>
	if (!data_buf) {
   220ba:	4607      	mov	r7, r0
   220bc:	b958      	cbnz	r0, 220d6 <recv_thread+0xfe>
		BT_ERR("No data buffer available");
   220be:	f8d8 3000 	ldr.w	r3, [r8]
   220c2:	075b      	lsls	r3, r3, #29
   220c4:	d005      	beq.n	220d2 <recv_thread+0xfa>
   220c6:	01b1      	lsls	r1, r6, #6
   220c8:	480c      	ldr	r0, [pc, #48]	; (220fc <recv_thread+0x124>)
   220ca:	f041 0101 	orr.w	r1, r1, #1
   220ce:	f007 f906 	bl	292de <log_0>
	return true;
   220d2:	2701      	movs	r7, #1
   220d4:	e7a6      	b.n	22024 <recv_thread+0x4c>
	net_buf_add_mem(data_buf, &hci_buf[0], len + sizeof(*hdr));
   220d6:	886a      	ldrh	r2, [r5, #2]
   220d8:	4629      	mov	r1, r5
   220da:	3204      	adds	r2, #4
   220dc:	3008      	adds	r0, #8
   220de:	f009 ffcb 	bl	2c078 <net_buf_simple_add_mem>
	bt_recv(data_buf);
   220e2:	4638      	mov	r0, r7
   220e4:	f7f6 fbb8 	bl	18858 <bt_recv>
   220e8:	e7f3      	b.n	220d2 <recv_thread+0xfa>
   220ea:	bf00      	nop
   220ec:	20000790 	.word	0x20000790
   220f0:	20000740 	.word	0x20000740
   220f4:	20002dc2 	.word	0x20002dc2
   220f8:	00033836 	.word	0x00033836
   220fc:	00033850 	.word	0x00033850
   22100:	200008a4 	.word	0x200008a4

00022104 <host_signal>:
	z_impl_k_sem_give(sem);
   22104:	4801      	ldr	r0, [pc, #4]	; (2210c <host_signal+0x8>)
   22106:	f002 bded 	b.w	24ce4 <z_impl_k_sem_give>
   2210a:	bf00      	nop
   2210c:	200008a4 	.word	0x200008a4

00022110 <hci_driver_send>:
{
   22110:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
   22112:	8983      	ldrh	r3, [r0, #12]
{
   22114:	4605      	mov	r5, r0
	if (!buf->len) {
   22116:	b383      	cbz	r3, 2217a <hci_driver_send+0x6a>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   22118:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   2211a:	b1ab      	cbz	r3, 22148 <hci_driver_send+0x38>
   2211c:	2b02      	cmp	r3, #2
   2211e:	d12c      	bne.n	2217a <hci_driver_send+0x6a>
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22120:	f04f 30ff 	mov.w	r0, #4294967295
   22124:	f04f 31ff 	mov.w	r1, #4294967295
   22128:	f7ff fd9e 	bl	21c68 <multithreading_lock_acquire>
	if (!errcode) {
   2212c:	4604      	mov	r4, r0
   2212e:	b948      	cbnz	r0, 22144 <hci_driver_send+0x34>
		errcode = sdc_hci_data_put(acl->data);
   22130:	68a8      	ldr	r0, [r5, #8]
   22132:	f7ea fef8 	bl	cf26 <sdc_hci_data_put>
   22136:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   22138:	f7ff fd9e 	bl	21c78 <multithreading_lock_release>
		if (errcode) {
   2213c:	b1c4      	cbz	r4, 22170 <hci_driver_send+0x60>
   2213e:	4810      	ldr	r0, [pc, #64]	; (22180 <hci_driver_send+0x70>)
   22140:	f002 fdd0 	bl	24ce4 <z_impl_k_sem_give>
}
   22144:	4620      	mov	r0, r4
   22146:	bd38      	pop	{r3, r4, r5, pc}
	int errcode = MULTITHREADING_LOCK_ACQUIRE();
   22148:	f04f 30ff 	mov.w	r0, #4294967295
   2214c:	f04f 31ff 	mov.w	r1, #4294967295
   22150:	f7ff fd8a 	bl	21c68 <multithreading_lock_acquire>
	if (!errcode) {
   22154:	4604      	mov	r4, r0
   22156:	2800      	cmp	r0, #0
   22158:	d1f4      	bne.n	22144 <hci_driver_send+0x34>
		errcode = hci_internal_cmd_put(cmd->data);
   2215a:	68a8      	ldr	r0, [r5, #8]
   2215c:	f000 f840 	bl	221e0 <hci_internal_cmd_put>
   22160:	4604      	mov	r4, r0
		MULTITHREADING_LOCK_RELEASE();
   22162:	f7ff fd89 	bl	21c78 <multithreading_lock_release>
	if (errcode) {
   22166:	2c00      	cmp	r4, #0
   22168:	d1ec      	bne.n	22144 <hci_driver_send+0x34>
   2216a:	4805      	ldr	r0, [pc, #20]	; (22180 <hci_driver_send+0x70>)
   2216c:	f002 fdba 	bl	24ce4 <z_impl_k_sem_give>
		net_buf_unref(buf);
   22170:	4628      	mov	r0, r5
   22172:	f7fd ff43 	bl	1fffc <net_buf_unref>
   22176:	2400      	movs	r4, #0
   22178:	e7e4      	b.n	22144 <hci_driver_send+0x34>
	switch (type) {
   2217a:	f06f 0415 	mvn.w	r4, #21
   2217e:	e7e1      	b.n	22144 <hci_driver_send+0x34>
   22180:	200008a4 	.word	0x200008a4

00022184 <rand_prio_low_vector_get>:
{
   22184:	b538      	push	{r3, r4, r5, lr}
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   22186:	4b11      	ldr	r3, [pc, #68]	; (221cc <rand_prio_low_vector_get+0x48>)
{
   22188:	4604      	mov	r4, r0
	int ret = entropy_get_entropy_isr(entropy_source, p_buff, length, 0);
   2218a:	6818      	ldr	r0, [r3, #0]
	if (unlikely(!api->get_entropy_isr)) {
   2218c:	6883      	ldr	r3, [r0, #8]
   2218e:	685d      	ldr	r5, [r3, #4]
   22190:	460a      	mov	r2, r1
   22192:	b1bd      	cbz	r5, 221c4 <rand_prio_low_vector_get+0x40>
	return api->get_entropy_isr(dev, buffer, length, flags);
   22194:	4621      	mov	r1, r4
   22196:	2300      	movs	r3, #0
   22198:	47a8      	blx	r5
	__ASSERT(ret >= 0, "The entropy source returned an error in the low priority context");
   2219a:	1e04      	subs	r4, r0, #0
   2219c:	da0e      	bge.n	221bc <rand_prio_low_vector_get+0x38>
   2219e:	490c      	ldr	r1, [pc, #48]	; (221d0 <rand_prio_low_vector_get+0x4c>)
   221a0:	4a0c      	ldr	r2, [pc, #48]	; (221d4 <rand_prio_low_vector_get+0x50>)
   221a2:	480d      	ldr	r0, [pc, #52]	; (221d8 <rand_prio_low_vector_get+0x54>)
   221a4:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
   221a8:	f006 fcf7 	bl	28b9a <printk>
   221ac:	480b      	ldr	r0, [pc, #44]	; (221dc <rand_prio_low_vector_get+0x58>)
   221ae:	f006 fcf4 	bl	28b9a <printk>
   221b2:	4808      	ldr	r0, [pc, #32]	; (221d4 <rand_prio_low_vector_get+0x50>)
   221b4:	f44f 71e0 	mov.w	r1, #448	; 0x1c0
   221b8:	f006 ff30 	bl	2901c <assert_post_action>
	return ret >= 0 ? ret : 0;
   221bc:	ea24 70e4 	bic.w	r0, r4, r4, asr #31
}
   221c0:	b2c0      	uxtb	r0, r0
   221c2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTSUP;
   221c4:	f06f 0485 	mvn.w	r4, #133	; 0x85
   221c8:	e7e9      	b.n	2219e <rand_prio_low_vector_get+0x1a>
   221ca:	bf00      	nop
   221cc:	2000292c 	.word	0x2000292c
   221d0:	00033757 	.word	0x00033757
   221d4:	000336e4 	.word	0x000336e4
   221d8:	0002e93e 	.word	0x0002e93e
   221dc:	00033869 	.word	0x00033869

000221e0 <hci_internal_cmd_put>:
		encode_command_complete_header(raw_event_out, opcode, return_param_length, status);
	}
}

int hci_internal_cmd_put(uint8_t *cmd_in)
{
   221e0:	b570      	push	{r4, r5, r6, lr}
	uint16_t opcode = sys_get_le16(cmd_in);

	if (cmd_complete_or_status.occurred) {
   221e2:	4cd7      	ldr	r4, [pc, #860]	; (22540 <hci_internal_cmd_put+0x360>)
   221e4:	7823      	ldrb	r3, [r4, #0]
   221e6:	2b00      	cmp	r3, #0
   221e8:	f040 82b0 	bne.w	2274c <hci_internal_cmd_put+0x56c>
	return ((uint16_t)src[1] << 8) | src[0];
   221ec:	7843      	ldrb	r3, [r0, #1]
   221ee:	7805      	ldrb	r5, [r0, #0]
   221f0:	ea45 2503 	orr.w	r5, r5, r3, lsl #8
	switch (BT_OGF(opcode)) {
   221f4:	f5b5 5f10 	cmp.w	r5, #9216	; 0x2400
   221f8:	b22e      	sxth	r6, r5
   221fa:	ea4f 2395 	mov.w	r3, r5, lsr #10
   221fe:	d209      	bcs.n	22214 <hci_internal_cmd_put+0x34>
   22200:	b15b      	cbz	r3, 2221a <hci_internal_cmd_put+0x3a>
   22202:	3b01      	subs	r3, #1
   22204:	2b07      	cmp	r3, #7
   22206:	d808      	bhi.n	2221a <hci_internal_cmd_put+0x3a>
   22208:	e8df f003 	tbb	[pc, r3]
   2220c:	5c28070a 	.word	0x5c28070a
   22210:	d0070707 	.word	0xd0070707
   22214:	2b3f      	cmp	r3, #63	; 0x3f
   22216:	f000 81fc 	beq.w	22612 <hci_internal_cmd_put+0x432>
   2221a:	2104      	movs	r1, #4
   2221c:	2001      	movs	r0, #1
   2221e:	e233      	b.n	22688 <hci_internal_cmd_put+0x4a8>
	switch (opcode)	{
   22220:	f240 4306 	movw	r3, #1030	; 0x406
   22224:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   22226:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   2222a:	d005      	beq.n	22238 <hci_internal_cmd_put+0x58>
   2222c:	f240 431d 	movw	r3, #1053	; 0x41d
   22230:	429e      	cmp	r6, r3
   22232:	d010      	beq.n	22256 <hci_internal_cmd_put+0x76>
	switch (opcode)	{
   22234:	2001      	movs	r0, #1
   22236:	e001      	b.n	2223c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_lc_disconnect((void *)cmd_params);
   22238:	f7ea ffbf 	bl	d1ba <sdc_hci_cmd_lc_disconnect>
	evt_hdr->evt = BT_HCI_EVT_CMD_STATUS;
   2223c:	230f      	movs	r3, #15
   2223e:	7063      	strb	r3, [r4, #1]
	evt_hdr->len = sizeof(struct bt_hci_evt_cmd_status);
   22240:	2304      	movs	r3, #4
   22242:	70a3      	strb	r3, [r4, #2]
	evt_data->ncmd = 1;
   22244:	2301      	movs	r3, #1
	evt_data->status = status_code;
   22246:	70e0      	strb	r0, [r4, #3]
	evt_data->ncmd = 1;
   22248:	7123      	strb	r3, [r4, #4]
	evt_data->opcode = hci_opcode;
   2224a:	f8a4 5005 	strh.w	r5, [r4, #5]
	{
		/* SDC_HCI_OPCODE_CMD_CB_HOST_NUMBER_OF_COMPLETED_PACKETS will only generate
		 *  command complete if it fails.
		 */

		cmd_complete_or_status.occurred = true;
   2224e:	2301      	movs	r3, #1
   22250:	7023      	strb	r3, [r4, #0]
	}

	return 0;
   22252:	2000      	movs	r0, #0
}
   22254:	bd70      	pop	{r4, r5, r6, pc}
		return sdc_hci_cmd_lc_read_remote_version_information((void *)cmd_params);
   22256:	f7ea ffb2 	bl	d1be <sdc_hci_cmd_lc_read_remote_version_information>
   2225a:	e7ef      	b.n	2223c <hci_internal_cmd_put+0x5c>
	switch (opcode)	{
   2225c:	f640 4363 	movw	r3, #3171	; 0xc63
   22260:	429e      	cmp	r6, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   22262:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   22266:	d025      	beq.n	222b4 <hci_internal_cmd_put+0xd4>
   22268:	dc0f      	bgt.n	2228a <hci_internal_cmd_put+0xaa>
   2226a:	f640 4303 	movw	r3, #3075	; 0xc03
   2226e:	429e      	cmp	r6, r3
   22270:	d018      	beq.n	222a4 <hci_internal_cmd_put+0xc4>
   22272:	f640 432d 	movw	r3, #3117	; 0xc2d
   22276:	429e      	cmp	r6, r3
   22278:	d017      	beq.n	222aa <hci_internal_cmd_put+0xca>
   2227a:	f640 4301 	movw	r3, #3073	; 0xc01
   2227e:	429e      	cmp	r6, r3
   22280:	d1d8      	bne.n	22234 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_set_event_mask((void *)cmd_params);
   22282:	f7ea fe6c 	bl	cf5e <sdc_hci_cmd_cb_set_event_mask>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   22286:	2104      	movs	r1, #4
   22288:	e08d      	b.n	223a6 <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   2228a:	f640 437b 	movw	r3, #3195	; 0xc7b
   2228e:	429e      	cmp	r6, r3
   22290:	d013      	beq.n	222ba <hci_internal_cmd_put+0xda>
   22292:	f640 437c 	movw	r3, #3196	; 0xc7c
   22296:	429e      	cmp	r6, r3
   22298:	d1cc      	bne.n	22234 <hci_internal_cmd_put+0x54>
		return sdc_hci_cmd_cb_write_authenticated_payload_timeout((void *)cmd_params,
   2229a:	49aa      	ldr	r1, [pc, #680]	; (22544 <hci_internal_cmd_put+0x364>)
   2229c:	f7ea fe69 	bl	cf72 <sdc_hci_cmd_cb_write_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_transmit_power_return_t);
   222a0:	2106      	movs	r1, #6
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   222a2:	e080      	b.n	223a6 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_reset();
   222a4:	f7e1 ffb0 	bl	4208 <sdc_hci_cmd_cb_reset>
   222a8:	e7ed      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_transmit_power_level((void *)cmd_params,
   222aa:	49a6      	ldr	r1, [pc, #664]	; (22544 <hci_internal_cmd_put+0x364>)
   222ac:	f7ea fe55 	bl	cf5a <sdc_hci_cmd_cb_read_transmit_power_level>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_buffer_size_return_t);
   222b0:	2107      	movs	r1, #7
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   222b2:	e078      	b.n	223a6 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_cb_set_event_mask_page_2((void *)cmd_params);
   222b4:	f7ea fe58 	bl	cf68 <sdc_hci_cmd_cb_set_event_mask_page_2>
   222b8:	e7e5      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_cb_read_authenticated_payload_timeout((void *)cmd_params,
   222ba:	49a2      	ldr	r1, [pc, #648]	; (22544 <hci_internal_cmd_put+0x364>)
   222bc:	f7ea fe4b 	bl	cf56 <sdc_hci_cmd_cb_read_authenticated_payload_timeout>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_phy_return_t);
   222c0:	2108      	movs	r1, #8
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   222c2:	e070      	b.n	223a6 <hci_internal_cmd_put+0x1c6>
	switch (opcode)	{
   222c4:	f5a6 5680 	sub.w	r6, r6, #4096	; 0x1000
   222c8:	3e01      	subs	r6, #1
   222ca:	2e08      	cmp	r6, #8
   222cc:	d8b2      	bhi.n	22234 <hci_internal_cmd_put+0x54>
   222ce:	a301      	add	r3, pc, #4	; (adr r3, 222d4 <hci_internal_cmd_put+0xf4>)
   222d0:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   222d4:	000222f9 	.word	0x000222f9
   222d8:	00022303 	.word	0x00022303
   222dc:	00022377 	.word	0x00022377
   222e0:	00022235 	.word	0x00022235
   222e4:	00022235 	.word	0x00022235
   222e8:	00022235 	.word	0x00022235
   222ec:	00022235 	.word	0x00022235
   222f0:	00022235 	.word	0x00022235
   222f4:	0002239f 	.word	0x0002239f
		return sdc_hci_cmd_ip_read_local_version_information((void *)event_out_params);
   222f8:	4892      	ldr	r0, [pc, #584]	; (22544 <hci_internal_cmd_put+0x364>)
   222fa:	f7ea ff17 	bl	d12c <sdc_hci_cmd_ip_read_local_version_information>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_max_data_length_return_t);
   222fe:	210c      	movs	r1, #12
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   22300:	e051      	b.n	223a6 <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   22302:	4890      	ldr	r0, [pc, #576]	; (22544 <hci_internal_cmd_put+0x364>)
   22304:	222e      	movs	r2, #46	; 0x2e
   22306:	2100      	movs	r1, #0
   22308:	f00a fc9d 	bl	2cc46 <memset>
	cmds->hci_disconnect = 1;
   2230c:	2320      	movs	r3, #32
   2230e:	71e3      	strb	r3, [r4, #7]
	cmds->hci_read_remote_version_information = 1;
   22310:	2380      	movs	r3, #128	; 0x80
   22312:	7263      	strb	r3, [r4, #9]
	cmds->hci_set_event_mask = 1;
   22314:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   22318:	7323      	strb	r3, [r4, #12]
	cmds->hci_read_transmit_power_level = 1;
   2231a:	2304      	movs	r3, #4
   2231c:	7463      	strb	r3, [r4, #17]
	cmds->hci_read_local_version_information = 1;
   2231e:	2328      	movs	r3, #40	; 0x28
   22320:	7563      	strb	r3, [r4, #21]
	cmds->hci_read_bd_addr = 1;
   22322:	2302      	movs	r3, #2
   22324:	75a3      	strb	r3, [r4, #22]
	cmds->hci_set_event_mask_page_2 = 1;
   22326:	2304      	movs	r3, #4
   22328:	7763      	strb	r3, [r4, #29]
	cmds->hci_le_set_event_mask = 1;
   2232a:	2317      	movs	r3, #23
   2232c:	f884 3020 	strb.w	r3, [r4, #32]
	cmds->hci_le_set_scan_parameters = 1;
   22330:	f06f 0303 	mvn.w	r3, #3
   22334:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	cmds->hci_le_add_device_to_white_list = 1;
   22338:	23ff      	movs	r3, #255	; 0xff
   2233a:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	cmds->hci_le_enable_encryption = 1;
   2233e:	2379      	movs	r3, #121	; 0x79
   22340:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	cmds->hci_read_authenticated_payload_timeout = 1;
   22344:	2330      	movs	r3, #48	; 0x30
   22346:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	cmds->hci_le_set_data_length = 1;
   2234a:	f06f 033f 	mvn.w	r3, #63	; 0x3f
   2234e:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
	cmds->hci_le_write_suggested_default_data_length = 1;
   22352:	2379      	movs	r3, #121	; 0x79
   22354:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
	cmds->hci_le_set_address_resolution_enable = 1;
   22358:	f06f 0301 	mvn.w	r3, #1
   2235c:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	cmds->hci_le_transmitter_test_v2 = 1;
   22360:	2301      	movs	r3, #1
   22362:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	cmds->hci_le_read_transmit_power = 1;
   22366:	2380      	movs	r3, #128	; 0x80
   22368:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	cmds->hci_le_set_privacy_mode = 1;
   2236c:	2304      	movs	r3, #4
   2236e:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
	cmds->read_supported_vs_commands = 1;
   22372:	2144      	movs	r1, #68	; 0x44
   22374:	e118      	b.n	225a8 <hci_internal_cmd_put+0x3c8>
	memset(features, 0, sizeof(*features));
   22376:	4b73      	ldr	r3, [pc, #460]	; (22544 <hci_internal_cmd_put+0x364>)
   22378:	2000      	movs	r0, #0
   2237a:	f8c4 0007 	str.w	r0, [r4, #7]
   2237e:	6058      	str	r0, [r3, #4]
	features->bdedr_not_supported = 1;
   22380:	7ae3      	ldrb	r3, [r4, #11]
   22382:	f023 0360 	bic.w	r3, r3, #96	; 0x60
   22386:	f043 0360 	orr.w	r3, r3, #96	; 0x60
   2238a:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_local_supported_features_return_t);
   2238c:	210c      	movs	r1, #12
	evt_hdr->evt = BT_HCI_EVT_CMD_COMPLETE;
   2238e:	230e      	movs	r3, #14
   22390:	7063      	strb	r3, [r4, #1]
	evt_data->ncmd = 1;
   22392:	2301      	movs	r3, #1
	evt_hdr->len = param_length;
   22394:	70a1      	strb	r1, [r4, #2]
	evt_data->ncmd = 1;
   22396:	70e3      	strb	r3, [r4, #3]
	evt_data->opcode = hci_opcode;
   22398:	80a5      	strh	r5, [r4, #4]
	event[BT_HCI_EVT_HDR_SIZE + sizeof(struct bt_hci_evt_cmd_complete)] = status;
   2239a:	71a0      	strb	r0, [r4, #6]
}
   2239c:	e757      	b.n	2224e <hci_internal_cmd_put+0x6e>
		return sdc_hci_cmd_ip_read_bd_addr((void *)event_out_params);
   2239e:	4869      	ldr	r0, [pc, #420]	; (22544 <hci_internal_cmd_put+0x364>)
   223a0:	f7ea fec2 	bl	d128 <sdc_hci_cmd_ip_read_bd_addr>
		*param_length_out += sizeof(sdc_hci_cmd_ip_read_bd_addr_return_t);
   223a4:	210a      	movs	r1, #10
	if (!command_generates_command_complete_event(opcode) ||
   223a6:	2801      	cmp	r0, #1
   223a8:	d1f1      	bne.n	2238e <hci_internal_cmd_put+0x1ae>
   223aa:	e747      	b.n	2223c <hci_internal_cmd_put+0x5c>
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   223ac:	f5a6 5600 	sub.w	r6, r6, #8192	; 0x2000
   223b0:	3e01      	subs	r6, #1
   223b2:	3003      	adds	r0, #3
	switch (opcode)	{
   223b4:	2e4d      	cmp	r6, #77	; 0x4d
   223b6:	f63f af3d 	bhi.w	22234 <hci_internal_cmd_put+0x54>
   223ba:	a301      	add	r3, pc, #4	; (adr r3, 223c0 <hci_internal_cmd_put+0x1e0>)
   223bc:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
   223c0:	000224f9 	.word	0x000224f9
   223c4:	000224ff 	.word	0x000224ff
   223c8:	00022507 	.word	0x00022507
   223cc:	00022235 	.word	0x00022235
   223d0:	00022527 	.word	0x00022527
   223d4:	00022235 	.word	0x00022235
   223d8:	00022235 	.word	0x00022235
   223dc:	00022235 	.word	0x00022235
   223e0:	00022235 	.word	0x00022235
   223e4:	00022235 	.word	0x00022235
   223e8:	0002252d 	.word	0x0002252d
   223ec:	00022533 	.word	0x00022533
   223f0:	00022539 	.word	0x00022539
   223f4:	00022549 	.word	0x00022549
   223f8:	0002254f 	.word	0x0002254f
   223fc:	00022559 	.word	0x00022559
   22400:	0002255f 	.word	0x0002255f
   22404:	00022565 	.word	0x00022565
   22408:	0002256b 	.word	0x0002256b
   2240c:	00022571 	.word	0x00022571
   22410:	00022577 	.word	0x00022577
   22414:	00022581 	.word	0x00022581
   22418:	00022587 	.word	0x00022587
   2241c:	00022591 	.word	0x00022591
   22420:	00022599 	.word	0x00022599
   22424:	00022235 	.word	0x00022235
   22428:	00022235 	.word	0x00022235
   2242c:	0002259f 	.word	0x0002259f
   22430:	00022235 	.word	0x00022235
   22434:	00022235 	.word	0x00022235
   22438:	00022235 	.word	0x00022235
   2243c:	00022235 	.word	0x00022235
   22440:	00022235 	.word	0x00022235
   22444:	000225ad 	.word	0x000225ad
   22448:	000225b5 	.word	0x000225b5
   2244c:	000225bd 	.word	0x000225bd
   22450:	00022235 	.word	0x00022235
   22454:	00022235 	.word	0x00022235
   22458:	000225c3 	.word	0x000225c3
   2245c:	000225c9 	.word	0x000225c9
   22460:	000225cf 	.word	0x000225cf
   22464:	000225d5 	.word	0x000225d5
   22468:	00022235 	.word	0x00022235
   2246c:	00022235 	.word	0x00022235
   22470:	000225dd 	.word	0x000225dd
   22474:	000225e3 	.word	0x000225e3
   22478:	000225e9 	.word	0x000225e9
   2247c:	000225f1 	.word	0x000225f1
   22480:	000225f9 	.word	0x000225f9
   22484:	000225ff 	.word	0x000225ff
   22488:	00022235 	.word	0x00022235
   2248c:	00022235 	.word	0x00022235
   22490:	00022235 	.word	0x00022235
   22494:	00022235 	.word	0x00022235
   22498:	00022235 	.word	0x00022235
   2249c:	00022235 	.word	0x00022235
   224a0:	00022235 	.word	0x00022235
   224a4:	00022235 	.word	0x00022235
   224a8:	00022235 	.word	0x00022235
   224ac:	00022235 	.word	0x00022235
   224b0:	00022235 	.word	0x00022235
   224b4:	00022235 	.word	0x00022235
   224b8:	00022235 	.word	0x00022235
   224bc:	00022235 	.word	0x00022235
   224c0:	00022235 	.word	0x00022235
   224c4:	00022235 	.word	0x00022235
   224c8:	00022235 	.word	0x00022235
   224cc:	00022235 	.word	0x00022235
   224d0:	00022235 	.word	0x00022235
   224d4:	00022235 	.word	0x00022235
   224d8:	00022235 	.word	0x00022235
   224dc:	00022235 	.word	0x00022235
   224e0:	00022235 	.word	0x00022235
   224e4:	00022235 	.word	0x00022235
   224e8:	00022605 	.word	0x00022605
   224ec:	00022235 	.word	0x00022235
   224f0:	00022235 	.word	0x00022235
   224f4:	0002260d 	.word	0x0002260d
		return sdc_hci_cmd_le_set_event_mask((void *)cmd_params);
   224f8:	f7ea fe4a 	bl	d190 <sdc_hci_cmd_le_set_event_mask>
   224fc:	e6c3      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_buffer_size((void *)event_out_params);
   224fe:	4811      	ldr	r0, [pc, #68]	; (22544 <hci_internal_cmd_put+0x364>)
   22500:	f7ea fe2a 	bl	d158 <sdc_hci_cmd_le_read_buffer_size>
   22504:	e6d4      	b.n	222b0 <hci_internal_cmd_put+0xd0>
	memset(features, 0, sizeof(*features));
   22506:	4b0f      	ldr	r3, [pc, #60]	; (22544 <hci_internal_cmd_put+0x364>)
   22508:	2000      	movs	r0, #0
   2250a:	f8c4 0007 	str.w	r0, [r4, #7]
   2250e:	7118      	strb	r0, [r3, #4]
	features->le_encryption = 1;
   22510:	79e3      	ldrb	r3, [r4, #7]
   22512:	f063 030a 	orn	r3, r3, #10
   22516:	71e3      	strb	r3, [r4, #7]
	features->le_2m_phy = 1;
   22518:	7a23      	ldrb	r3, [r4, #8]
   2251a:	f023 0341 	bic.w	r3, r3, #65	; 0x41
   2251e:	f043 0341 	orr.w	r3, r3, #65	; 0x41
   22522:	7223      	strb	r3, [r4, #8]
   22524:	e732      	b.n	2238c <hci_internal_cmd_put+0x1ac>
		return sdc_hci_cmd_le_set_random_address((void *)cmd_params);
   22526:	f7ea fe3e 	bl	d1a6 <sdc_hci_cmd_le_set_random_address>
   2252a:	e6ac      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_params((void *)cmd_params);
   2252c:	f7ea fe41 	bl	d1b2 <sdc_hci_cmd_le_set_scan_params>
   22530:	e6a9      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_scan_enable((void *)cmd_params);
   22532:	f7ea fe3c 	bl	d1ae <sdc_hci_cmd_le_set_scan_enable>
   22536:	e6a6      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_create_conn((void *)cmd_params);
   22538:	f7ea fe04 	bl	d144 <sdc_hci_cmd_le_create_conn>
   2253c:	e67e      	b.n	2223c <hci_internal_cmd_put+0x5c>
   2253e:	bf00      	nop
   22540:	2000328e 	.word	0x2000328e
   22544:	20003295 	.word	0x20003295
		return sdc_hci_cmd_le_create_conn_cancel();
   22548:	f7ea fdfe 	bl	d148 <sdc_hci_cmd_le_create_conn_cancel>
   2254c:	e69b      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_white_list_size((void *)event_out_params);
   2254e:	4889      	ldr	r0, [pc, #548]	; (22774 <hci_internal_cmd_put+0x594>)
   22550:	f7ea fe12 	bl	d178 <sdc_hci_cmd_le_read_white_list_size>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_resolving_list_size_return_t);
   22554:	2105      	movs	r1, #5
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   22556:	e726      	b.n	223a6 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_clear_white_list();
   22558:	f7ea fdf0 	bl	d13c <sdc_hci_cmd_le_clear_white_list>
   2255c:	e693      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_white_list((void *)cmd_params);
   2255e:	f7ea fde9 	bl	d134 <sdc_hci_cmd_le_add_device_to_white_list>
   22562:	e690      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_white_list((void *)cmd_params);
   22564:	f7ea fe0c 	bl	d180 <sdc_hci_cmd_le_remove_device_from_white_list>
   22568:	e68d      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_conn_update((void *)cmd_params);
   2256a:	f7ea fde9 	bl	d140 <sdc_hci_cmd_le_conn_update>
   2256e:	e665      	b.n	2223c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_set_host_channel_classification((void *)cmd_params);
   22570:	f7ea fe13 	bl	d19a <sdc_hci_cmd_le_set_host_channel_classification>
   22574:	e687      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   22576:	497f      	ldr	r1, [pc, #508]	; (22774 <hci_internal_cmd_put+0x594>)
   22578:	f7ea fdf0 	bl	d15c <sdc_hci_cmd_le_read_channel_map>
		*param_length_out += sizeof(sdc_hci_cmd_le_read_channel_map_return_t);
   2257c:	210b      	movs	r1, #11
		return sdc_hci_cmd_le_read_channel_map((void *)cmd_params,
   2257e:	e712      	b.n	223a6 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_read_remote_features((void *)cmd_params);
   22580:	f7ea fdf2 	bl	d168 <sdc_hci_cmd_le_read_remote_features>
   22584:	e65a      	b.n	2223c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   22586:	497b      	ldr	r1, [pc, #492]	; (22774 <hci_internal_cmd_put+0x594>)
   22588:	f7ea fde2 	bl	d150 <sdc_hci_cmd_le_encrypt>
		*param_length_out += sizeof(sdc_hci_cmd_le_encrypt_return_t);
   2258c:	2114      	movs	r1, #20
		return sdc_hci_cmd_le_encrypt((void *)cmd_params, (void *)event_out_params);
   2258e:	e70a      	b.n	223a6 <hci_internal_cmd_put+0x1c6>
		return sdc_hci_cmd_le_rand((void *)event_out_params);
   22590:	4878      	ldr	r0, [pc, #480]	; (22774 <hci_internal_cmd_put+0x594>)
   22592:	f7ea fddf 	bl	d154 <sdc_hci_cmd_le_rand>
   22596:	e6b2      	b.n	222fe <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_enable_encryption((void *)cmd_params);
   22598:	f7ea fdd8 	bl	d14c <sdc_hci_cmd_le_enable_encryption>
   2259c:	e64e      	b.n	2223c <hci_internal_cmd_put+0x5c>
	*buf = states1;
   2259e:	2370      	movs	r3, #112	; 0x70
   225a0:	71e3      	strb	r3, [r4, #7]
	*(buf + 4) = states2;
   225a2:	2340      	movs	r3, #64	; 0x40
   225a4:	72e3      	strb	r3, [r4, #11]
		*param_length_out += sizeof(sdc_hci_cmd_le_read_supported_states_return_t);
   225a6:	210c      	movs	r1, #12
	cmds->read_supported_vs_commands = 1;
   225a8:	2000      	movs	r0, #0
   225aa:	e6f0      	b.n	2238e <hci_internal_cmd_put+0x1ae>
		return sdc_hci_cmd_le_set_data_length((void *)cmd_params, (void *)event_out_params);
   225ac:	4971      	ldr	r1, [pc, #452]	; (22774 <hci_internal_cmd_put+0x594>)
   225ae:	f7ea fdeb 	bl	d188 <sdc_hci_cmd_le_set_data_length>
   225b2:	e675      	b.n	222a0 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_read_suggested_default_data_length((void *)event_out_params);
   225b4:	486f      	ldr	r0, [pc, #444]	; (22774 <hci_internal_cmd_put+0x594>)
   225b6:	f7ea fddb 	bl	d170 <sdc_hci_cmd_le_read_suggested_default_data_length>
   225ba:	e681      	b.n	222c0 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_write_suggested_default_data_length((void *)cmd_params);
   225bc:	f7ea fdfb 	bl	d1b6 <sdc_hci_cmd_le_write_suggested_default_data_length>
   225c0:	e661      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_add_device_to_resolving_list((void *)cmd_params);
   225c2:	f7ea fdb5 	bl	d130 <sdc_hci_cmd_le_add_device_to_resolving_list>
   225c6:	e65e      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_remove_device_from_resolving_list((void *)cmd_params);
   225c8:	f7ea fdd8 	bl	d17c <sdc_hci_cmd_le_remove_device_from_resolving_list>
   225cc:	e65b      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_clear_resolving_list();
   225ce:	f7ea fdb3 	bl	d138 <sdc_hci_cmd_le_clear_resolving_list>
   225d2:	e658      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_resolving_list_size((void *)event_out_params);
   225d4:	4867      	ldr	r0, [pc, #412]	; (22774 <hci_internal_cmd_put+0x594>)
   225d6:	f7ea fdc9 	bl	d16c <sdc_hci_cmd_le_read_resolving_list_size>
   225da:	e7bb      	b.n	22554 <hci_internal_cmd_put+0x374>
		return sdc_hci_cmd_le_set_address_resolution_enable((void *)cmd_params);
   225dc:	f7ea fdd2 	bl	d184 <sdc_hci_cmd_le_set_address_resolution_enable>
   225e0:	e651      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_resolvable_private_address_timeout((void *)cmd_params);
   225e2:	f7ea fde2 	bl	d1aa <sdc_hci_cmd_le_set_resolvable_private_address_timeout>
   225e6:	e64e      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_read_max_data_length((void *)event_out_params);
   225e8:	4862      	ldr	r0, [pc, #392]	; (22774 <hci_internal_cmd_put+0x594>)
   225ea:	f7ea fdb9 	bl	d160 <sdc_hci_cmd_le_read_max_data_length>
   225ee:	e686      	b.n	222fe <hci_internal_cmd_put+0x11e>
		return sdc_hci_cmd_le_read_phy((void *)cmd_params, (void *)event_out_params);
   225f0:	4960      	ldr	r1, [pc, #384]	; (22774 <hci_internal_cmd_put+0x594>)
   225f2:	f7ea fdb7 	bl	d164 <sdc_hci_cmd_le_read_phy>
   225f6:	e663      	b.n	222c0 <hci_internal_cmd_put+0xe0>
		return sdc_hci_cmd_le_set_default_phy((void *)cmd_params);
   225f8:	f7ea fdc8 	bl	d18c <sdc_hci_cmd_le_set_default_phy>
   225fc:	e643      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_le_set_phy((void *)cmd_params);
   225fe:	f7ea fdce 	bl	d19e <sdc_hci_cmd_le_set_phy>
   22602:	e61b      	b.n	2223c <hci_internal_cmd_put+0x5c>
		return sdc_hci_cmd_le_read_transmit_power((void *)event_out_params);
   22604:	485b      	ldr	r0, [pc, #364]	; (22774 <hci_internal_cmd_put+0x594>)
   22606:	f7ea fdb5 	bl	d174 <sdc_hci_cmd_le_read_transmit_power>
   2260a:	e649      	b.n	222a0 <hci_internal_cmd_put+0xc0>
		return sdc_hci_cmd_le_set_privacy_mode((void *)cmd_params);
   2260c:	f7ea fdc9 	bl	d1a2 <sdc_hci_cmd_le_set_privacy_mode>
   22610:	e639      	b.n	22286 <hci_internal_cmd_put+0xa6>
	switch (opcode)	{
   22612:	f64f 430a 	movw	r3, #64522	; 0xfc0a
   22616:	429d      	cmp	r5, r3
	uint8_t const *cmd_params = &cmd[BT_HCI_CMD_HDR_SIZE];
   22618:	f100 0003 	add.w	r0, r0, #3
	switch (opcode)	{
   2261c:	d820      	bhi.n	22660 <hci_internal_cmd_put+0x480>
   2261e:	f5b5 4f7c 	cmp.w	r5, #64512	; 0xfc00
   22622:	f43f ae07 	beq.w	22234 <hci_internal_cmd_put+0x54>
   22626:	f5a5 437c 	sub.w	r3, r5, #64512	; 0xfc00
   2262a:	3b01      	subs	r3, #1
   2262c:	2b09      	cmp	r3, #9
   2262e:	f63f ae01 	bhi.w	22234 <hci_internal_cmd_put+0x54>
   22632:	a201      	add	r2, pc, #4	; (adr r2, 22638 <hci_internal_cmd_put+0x458>)
   22634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   22638:	00022681 	.word	0x00022681
   2263c:	000226af 	.word	0x000226af
   22640:	00022235 	.word	0x00022235
   22644:	00022235 	.word	0x00022235
   22648:	00022235 	.word	0x00022235
   2264c:	000226ef 	.word	0x000226ef
   22650:	00022235 	.word	0x00022235
   22654:	00022235 	.word	0x00022235
   22658:	000226db 	.word	0x000226db
   2265c:	000226e5 	.word	0x000226e5
   22660:	f505 7340 	add.w	r3, r5, #768	; 0x300
   22664:	b29b      	uxth	r3, r3
   22666:	2b05      	cmp	r3, #5
   22668:	f63f ade4 	bhi.w	22234 <hci_internal_cmd_put+0x54>
   2266c:	f5a5 437d 	sub.w	r3, r5, #64768	; 0xfd00
   22670:	2b05      	cmp	r3, #5
   22672:	f63f addf 	bhi.w	22234 <hci_internal_cmd_put+0x54>
   22676:	e8df f003 	tbb	[pc, r3]
   2267a:	413e      	.short	0x413e
   2267c:	4d4a4744 	.word	0x4d4a4744
		return sdc_hci_cmd_vs_zephyr_read_version_info((void *)event_out_params);
   22680:	483c      	ldr	r0, [pc, #240]	; (22774 <hci_internal_cmd_put+0x594>)
   22682:	f7e1 fdd5 	bl	4230 <sdc_hci_cmd_vs_zephyr_read_version_info>
		*param_length_out += sizeof(sdc_hci_cmd_vs_zephyr_read_version_info_return_t);
   22686:	2110      	movs	r1, #16
	switch (hci_opcode) {
   22688:	f242 0319 	movw	r3, #8217	; 0x2019
   2268c:	429e      	cmp	r6, r3
   2268e:	dc51      	bgt.n	22734 <hci_internal_cmd_put+0x554>
   22690:	f242 030c 	movw	r3, #8204	; 0x200c
   22694:	429e      	cmp	r6, r3
   22696:	dc40      	bgt.n	2271a <hci_internal_cmd_put+0x53a>
   22698:	f240 4306 	movw	r3, #1030	; 0x406
   2269c:	429e      	cmp	r6, r3
   2269e:	f43f adcd 	beq.w	2223c <hci_internal_cmd_put+0x5c>
   226a2:	f240 431d 	movw	r3, #1053	; 0x41d
   226a6:	429e      	cmp	r6, r3
   226a8:	f43f adc8 	beq.w	2223c <hci_internal_cmd_put+0x5c>
   226ac:	e67b      	b.n	223a6 <hci_internal_cmd_put+0x1c6>
	memset(cmds, 0, sizeof(*cmds));
   226ae:	2000      	movs	r0, #0
   226b0:	f8a4 0007 	strh.w	r0, [r4, #7]
	cmds->read_version_info = 1;
   226b4:	79e3      	ldrb	r3, [r4, #7]
   226b6:	f023 0323 	bic.w	r3, r3, #35	; 0x23
   226ba:	f043 0323 	orr.w	r3, r3, #35	; 0x23
   226be:	71e3      	strb	r3, [r4, #7]
	cmds->read_static_addresses = 1;
   226c0:	7a23      	ldrb	r3, [r4, #8]
   226c2:	f023 0307 	bic.w	r3, r3, #7
   226c6:	f043 0307 	orr.w	r3, r3, #7
   226ca:	7223      	strb	r3, [r4, #8]
	switch (hci_opcode) {
   226cc:	f242 0319 	movw	r3, #8217	; 0x2019
   226d0:	429e      	cmp	r6, r3
   226d2:	dd3e      	ble.n	22752 <hci_internal_cmd_put+0x572>
   226d4:	f242 0332 	movw	r3, #8242	; 0x2032
   226d8:	e046      	b.n	22768 <hci_internal_cmd_put+0x588>
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   226da:	4826      	ldr	r0, [pc, #152]	; (22774 <hci_internal_cmd_put+0x594>)
   226dc:	f7ea fcd3 	bl	d086 <sdc_hci_cmd_vs_zephyr_read_static_addresses>
		*param_length_out += sizeof(sdc_hci_vs_zephyr_static_address_t);
   226e0:	211b      	movs	r1, #27
		return sdc_hci_cmd_vs_zephyr_read_static_addresses((void *)event_out_params);
   226e2:	e7d1      	b.n	22688 <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   226e4:	4823      	ldr	r0, [pc, #140]	; (22774 <hci_internal_cmd_put+0x594>)
   226e6:	f7ea fc81 	bl	cfec <sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots>
		*param_length_out +=
   226ea:	2124      	movs	r1, #36	; 0x24
		return sdc_hci_cmd_vs_zephyr_read_key_hierarchy_roots((void *)event_out_params);
   226ec:	e7cc      	b.n	22688 <hci_internal_cmd_put+0x4a8>
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   226ee:	f7ea fd19 	bl	d124 <sdc_hci_cmd_vs_zephyr_write_bd_addr>
	uint8_t return_param_length = sizeof(struct bt_hci_evt_cmd_complete)
   226f2:	2104      	movs	r1, #4
		return sdc_hci_cmd_vs_zephyr_write_bd_addr((void *)cmd_params);
   226f4:	e7c8      	b.n	22688 <hci_internal_cmd_put+0x4a8>
	cmds->read_supported_vs_commands = 1;
   226f6:	233f      	movs	r3, #63	; 0x3f
   226f8:	71e3      	strb	r3, [r4, #7]
   226fa:	e63a      	b.n	22372 <hci_internal_cmd_put+0x192>
		return sdc_hci_cmd_vs_llpm_mode_set((void *)cmd_params);
   226fc:	f7ea fc6f 	bl	cfde <sdc_hci_cmd_vs_llpm_mode_set>
   22700:	e5c1      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_update((void *)cmd_params);
   22702:	f7ea fc40 	bl	cf86 <sdc_hci_cmd_vs_conn_update>
   22706:	e5be      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_conn_event_extend((void *)cmd_params);
   22708:	f7ea fc35 	bl	cf76 <sdc_hci_cmd_vs_conn_event_extend>
   2270c:	e5bb      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_qos_conn_event_report_enable((void *)cmd_params);
   2270e:	f7ea fc68 	bl	cfe2 <sdc_hci_cmd_vs_qos_conn_event_report_enable>
   22712:	e5b8      	b.n	22286 <hci_internal_cmd_put+0xa6>
		return sdc_hci_cmd_vs_event_length_set((void *)cmd_params);
   22714:	f7ea fc61 	bl	cfda <sdc_hci_cmd_vs_event_length_set>
   22718:	e5b5      	b.n	22286 <hci_internal_cmd_put+0xa6>
   2271a:	f5a5 5300 	sub.w	r3, r5, #8192	; 0x2000
   2271e:	3b0d      	subs	r3, #13
   22720:	2201      	movs	r2, #1
   22722:	b29b      	uxth	r3, r3
   22724:	fa02 f303 	lsl.w	r3, r2, r3
   22728:	f241 2241 	movw	r2, #4673	; 0x1241
   2272c:	4213      	tst	r3, r2
   2272e:	f43f ae3a 	beq.w	223a6 <hci_internal_cmd_put+0x1c6>
   22732:	e583      	b.n	2223c <hci_internal_cmd_put+0x5c>
	switch (hci_opcode) {
   22734:	f242 0332 	movw	r3, #8242	; 0x2032
   22738:	429e      	cmp	r6, r3
   2273a:	f43f ad7f 	beq.w	2223c <hci_internal_cmd_put+0x5c>
   2273e:	f5a5 5301 	sub.w	r3, r5, #8256	; 0x2040
   22742:	3b03      	subs	r3, #3
   22744:	2b01      	cmp	r3, #1
   22746:	f67f ad79 	bls.w	2223c <hci_internal_cmd_put+0x5c>
   2274a:	e62c      	b.n	223a6 <hci_internal_cmd_put+0x1c6>
		return -NRF_EPERM;
   2274c:	f04f 30ff 	mov.w	r0, #4294967295
   22750:	e580      	b.n	22254 <hci_internal_cmd_put+0x74>
	switch (hci_opcode) {
   22752:	f242 030c 	movw	r3, #8204	; 0x200c
   22756:	429e      	cmp	r6, r3
   22758:	dc09      	bgt.n	2276e <hci_internal_cmd_put+0x58e>
   2275a:	f240 4306 	movw	r3, #1030	; 0x406
   2275e:	429e      	cmp	r6, r3
   22760:	f43f ad6c 	beq.w	2223c <hci_internal_cmd_put+0x5c>
   22764:	f240 431d 	movw	r3, #1053	; 0x41d
   22768:	429e      	cmp	r6, r3
   2276a:	f43f ad67 	beq.w	2223c <hci_internal_cmd_put+0x5c>
   2276e:	2144      	movs	r1, #68	; 0x44
   22770:	e60d      	b.n	2238e <hci_internal_cmd_put+0x1ae>
   22772:	bf00      	nop
   22774:	20003295 	.word	0x20003295

00022778 <hci_internal_evt_get>:

int hci_internal_evt_get(uint8_t *evt_out)
{
   22778:	b510      	push	{r4, lr}
	if (cmd_complete_or_status.occurred) {
   2277a:	4c07      	ldr	r4, [pc, #28]	; (22798 <hci_internal_evt_get+0x20>)
   2277c:	7823      	ldrb	r3, [r4, #0]
   2277e:	b13b      	cbz	r3, 22790 <hci_internal_evt_get+0x18>
		struct bt_hci_evt_hdr *evt_hdr = (void *)&cmd_complete_or_status.raw_event[0];

		memcpy(evt_out,
   22780:	78a2      	ldrb	r2, [r4, #2]
   22782:	1c61      	adds	r1, r4, #1
   22784:	3202      	adds	r2, #2
   22786:	f00a fa36 	bl	2cbf6 <memcpy>
		       &cmd_complete_or_status.raw_event[0],
		       evt_hdr->len + BT_HCI_EVT_HDR_SIZE);
		cmd_complete_or_status.occurred = false;
   2278a:	2000      	movs	r0, #0
   2278c:	7020      	strb	r0, [r4, #0]

		return 0;
	}

	return sdc_hci_evt_get(evt_out);
}
   2278e:	bd10      	pop	{r4, pc}
   22790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return sdc_hci_evt_get(evt_out);
   22794:	f7ea bbd2 	b.w	cf3c <sdc_hci_evt_get>
   22798:	2000328e 	.word	0x2000328e

0002279c <bt_rand>:
#include <common/log.h>

#define BT_ECB_BLOCK_SIZE 16

int bt_rand(void *buf, size_t len)
{
   2279c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	static const struct device *dev;

	if (unlikely(!dev)) {
   227a0:	4e14      	ldr	r6, [pc, #80]	; (227f4 <bt_rand+0x58>)
   227a2:	6833      	ldr	r3, [r6, #0]
{
   227a4:	4605      	mov	r5, r0
   227a6:	460c      	mov	r4, r1
   227a8:	4637      	mov	r7, r6
	if (unlikely(!dev)) {
   227aa:	b1c3      	cbz	r3, 227de <bt_rand+0x42>
		if (!dev) {
			return -ENODEV;
		}
	}

	return entropy_get_entropy(dev, (uint8_t *)buf, len);
   227ac:	683e      	ldr	r6, [r7, #0]
   227ae:	b2a4      	uxth	r4, r4
	const struct entropy_driver_api *api =
   227b0:	68b7      	ldr	r7, [r6, #8]
	__ASSERT(api->get_entropy != NULL,
   227b2:	683b      	ldr	r3, [r7, #0]
   227b4:	b963      	cbnz	r3, 227d0 <bt_rand+0x34>
   227b6:	4910      	ldr	r1, [pc, #64]	; (227f8 <bt_rand+0x5c>)
   227b8:	4a10      	ldr	r2, [pc, #64]	; (227fc <bt_rand+0x60>)
   227ba:	4811      	ldr	r0, [pc, #68]	; (22800 <bt_rand+0x64>)
   227bc:	234b      	movs	r3, #75	; 0x4b
   227be:	f006 f9ec 	bl	28b9a <printk>
   227c2:	4810      	ldr	r0, [pc, #64]	; (22804 <bt_rand+0x68>)
   227c4:	f006 f9e9 	bl	28b9a <printk>
   227c8:	480c      	ldr	r0, [pc, #48]	; (227fc <bt_rand+0x60>)
   227ca:	214b      	movs	r1, #75	; 0x4b
   227cc:	f006 fc26 	bl	2901c <assert_post_action>
	return api->get_entropy(dev, buffer, length);
   227d0:	683b      	ldr	r3, [r7, #0]
   227d2:	4622      	mov	r2, r4
   227d4:	4629      	mov	r1, r5
   227d6:	4630      	mov	r0, r6
}
   227d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   227dc:	4718      	bx	r3
   227de:	480a      	ldr	r0, [pc, #40]	; (22808 <bt_rand+0x6c>)
   227e0:	f000 fec4 	bl	2356c <z_impl_device_get_binding>
		dev = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   227e4:	6030      	str	r0, [r6, #0]
		if (!dev) {
   227e6:	2800      	cmp	r0, #0
   227e8:	d1e0      	bne.n	227ac <bt_rand+0x10>
}
   227ea:	f06f 0012 	mvn.w	r0, #18
   227ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   227f2:	bf00      	nop
   227f4:	20002930 	.word	0x20002930
   227f8:	0003369e 	.word	0x0003369e
   227fc:	00033671 	.word	0x00033671
   22800:	0002e93e 	.word	0x0002e93e
   22804:	000336be 	.word	0x000336be
   22808:	0003362b 	.word	0x0003362b

0002280c <m_assert_handler>:
	mpsl_assert_handle((char *) file, line);
}

#else /* !IS_ENABLED(CONFIG_MPSL_ASSERT_HANDLER) */
static void m_assert_handler(const char *const file, const uint32_t line)
{
   2280c:	b538      	push	{r3, r4, r5, lr}
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   2280e:	4b0d      	ldr	r3, [pc, #52]	; (22844 <m_assert_handler+0x38>)
   22810:	681a      	ldr	r2, [r3, #0]
   22812:	0752      	lsls	r2, r2, #29
{
   22814:	460d      	mov	r5, r1
	LOG_ERR("MPSL ASSERT: %s, %d", log_strdup(file), line);
   22816:	d00d      	beq.n	22834 <m_assert_handler+0x28>
   22818:	4c0b      	ldr	r4, [pc, #44]	; (22848 <m_assert_handler+0x3c>)
   2281a:	1b1c      	subs	r4, r3, r4
   2281c:	08a4      	lsrs	r4, r4, #2
   2281e:	f7ee ff87 	bl	11730 <z_log_strdup>
   22822:	01a4      	lsls	r4, r4, #6
   22824:	f044 0401 	orr.w	r4, r4, #1
   22828:	4601      	mov	r1, r0
   2282a:	4623      	mov	r3, r4
   2282c:	4807      	ldr	r0, [pc, #28]	; (2284c <m_assert_handler+0x40>)
   2282e:	462a      	mov	r2, r5
   22830:	f006 fd76 	bl	29320 <log_2>
	k_oops();
   22834:	4040      	eors	r0, r0
   22836:	f380 8811 	msr	BASEPRI, r0
   2283a:	f04f 0003 	mov.w	r0, #3
   2283e:	df02      	svc	2
}
   22840:	bd38      	pop	{r3, r4, r5, pc}
   22842:	bf00      	nop
   22844:	20000774 	.word	0x20000774
   22848:	20000740 	.word	0x20000740
   2284c:	000339a1 	.word	0x000339a1

00022850 <mpsl_lib_init>:
	return 0;
#endif
}

static int mpsl_lib_init(const struct device *dev)
{
   22850:	b537      	push	{r0, r1, r2, r4, r5, lr}
	ARG_UNUSED(dev);
	int err = 0;
	mpsl_clock_lfclk_cfg_t clock_cfg;

	clock_cfg.source = m_config_clock_source_get();
	clock_cfg.accuracy_ppm = CONFIG_CLOCK_CONTROL_NRF_ACCURACY;
   22852:	2332      	movs	r3, #50	; 0x32
   22854:	f8ad 3004 	strh.w	r3, [sp, #4]
#else
	clock_cfg.rc_ctiv = 0;
	clock_cfg.rc_temp_ctiv = 0;
#endif

	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   22858:	4a10      	ldr	r2, [pc, #64]	; (2289c <mpsl_lib_init+0x4c>)
	clock_cfg.skip_wait_lfclk_started =
   2285a:	2300      	movs	r3, #0
	clock_cfg.source = m_config_clock_source_get();
   2285c:	2501      	movs	r5, #1
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2285e:	2119      	movs	r1, #25
   22860:	4668      	mov	r0, sp
	clock_cfg.skip_wait_lfclk_started =
   22862:	f88d 3006 	strb.w	r3, [sp, #6]
	clock_cfg.source = m_config_clock_source_get();
   22866:	f8ad 5000 	strh.w	r5, [sp]
	clock_cfg.rc_temp_ctiv = 0;
   2286a:	f88d 3002 	strb.w	r3, [sp, #2]
	err = mpsl_init(&clock_cfg, MPSL_LOW_PRIO_IRQn, m_assert_handler);
   2286e:	f7e1 f86b 	bl	3948 <mpsl_init>
	if (err) {
   22872:	4604      	mov	r4, r0
   22874:	b970      	cbnz	r0, 22894 <mpsl_lib_init+0x44>
	if (err) {
		return err;
	}
#endif

	IRQ_DIRECT_CONNECT(TIMER0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   22876:	4601      	mov	r1, r0
   22878:	462a      	mov	r2, r5
   2287a:	2008      	movs	r0, #8
   2287c:	f7f3 fb7a 	bl	15f74 <z_arm_irq_priority_set>
			   mpsl_timer0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RTC0_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   22880:	462a      	mov	r2, r5
   22882:	4621      	mov	r1, r4
   22884:	200b      	movs	r0, #11
   22886:	f7f3 fb75 	bl	15f74 <z_arm_irq_priority_set>
			   mpsl_rtc0_isr_wrapper, IRQ_ZERO_LATENCY);
	IRQ_DIRECT_CONNECT(RADIO_IRQn, MPSL_HIGH_IRQ_PRIORITY,
   2288a:	462a      	mov	r2, r5
   2288c:	4621      	mov	r1, r4
   2288e:	4628      	mov	r0, r5
   22890:	f7f3 fb70 	bl	15f74 <z_arm_irq_priority_set>
			   mpsl_radio_isr_wrapper, IRQ_ZERO_LATENCY);

	return 0;
}
   22894:	4620      	mov	r0, r4
   22896:	b003      	add	sp, #12
   22898:	bd30      	pop	{r4, r5, pc}
   2289a:	bf00      	nop
   2289c:	0002280d 	.word	0x0002280d

000228a0 <mpsl_low_prio_irq_handler>:
   228a0:	4801      	ldr	r0, [pc, #4]	; (228a8 <mpsl_low_prio_irq_handler+0x8>)
   228a2:	f002 ba1f 	b.w	24ce4 <z_impl_k_sem_give>
   228a6:	bf00      	nop
   228a8:	200008bc 	.word	0x200008bc

000228ac <signal_thread>:
{
   228ac:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_take(sem, timeout);
   228ae:	4d0f      	ldr	r5, [pc, #60]	; (228ec <signal_thread+0x40>)
		__ASSERT_NO_MSG(errcode == 0);
   228b0:	4c0f      	ldr	r4, [pc, #60]	; (228f0 <signal_thread+0x44>)
   228b2:	f04f 32ff 	mov.w	r2, #4294967295
   228b6:	f04f 33ff 	mov.w	r3, #4294967295
   228ba:	4628      	mov	r0, r5
   228bc:	f002 fa56 	bl	24d6c <z_impl_k_sem_take>
		errcode = MULTITHREADING_LOCK_ACQUIRE();
   228c0:	f04f 30ff 	mov.w	r0, #4294967295
   228c4:	f04f 31ff 	mov.w	r1, #4294967295
   228c8:	f7ff f9ce 	bl	21c68 <multithreading_lock_acquire>
		__ASSERT_NO_MSG(errcode == 0);
   228cc:	b148      	cbz	r0, 228e2 <signal_thread+0x36>
   228ce:	4909      	ldr	r1, [pc, #36]	; (228f4 <signal_thread+0x48>)
   228d0:	4809      	ldr	r0, [pc, #36]	; (228f8 <signal_thread+0x4c>)
   228d2:	2346      	movs	r3, #70	; 0x46
   228d4:	4622      	mov	r2, r4
   228d6:	f006 f960 	bl	28b9a <printk>
   228da:	2146      	movs	r1, #70	; 0x46
   228dc:	4620      	mov	r0, r4
   228de:	f006 fb9d 	bl	2901c <assert_post_action>
		mpsl_low_priority_process();
   228e2:	f7e9 fe74 	bl	c5ce <mpsl_low_priority_process>
		MULTITHREADING_LOCK_RELEASE();
   228e6:	f7ff f9c7 	bl	21c78 <multithreading_lock_release>
	while (true) {
   228ea:	e7e2      	b.n	228b2 <signal_thread+0x6>
   228ec:	200008bc 	.word	0x200008bc
   228f0:	000339b5 	.word	0x000339b5
   228f4:	000339e2 	.word	0x000339e2
   228f8:	0002e93e 	.word	0x0002e93e

000228fc <mpsl_signal_thread_init>:

static int mpsl_signal_thread_init(const struct device *dev)
{
   228fc:	b530      	push	{r4, r5, lr}
   228fe:	b089      	sub	sp, #36	; 0x24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   22900:	4d0f      	ldr	r5, [pc, #60]	; (22940 <mpsl_signal_thread_init+0x44>)
   22902:	4910      	ldr	r1, [pc, #64]	; (22944 <mpsl_signal_thread_init+0x48>)
   22904:	2200      	movs	r2, #0
   22906:	2300      	movs	r3, #0
   22908:	e9cd 2306 	strd	r2, r3, [sp, #24]
   2290c:	2400      	movs	r4, #0
   2290e:	f06f 0309 	mvn.w	r3, #9
   22912:	e9cd 3403 	strd	r3, r4, [sp, #12]
   22916:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2291a:	4b0b      	ldr	r3, [pc, #44]	; (22948 <mpsl_signal_thread_init+0x4c>)
   2291c:	9400      	str	r4, [sp, #0]
   2291e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   22922:	4628      	mov	r0, r5
   22924:	f001 fbe0 	bl	240e8 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
   22928:	4908      	ldr	r1, [pc, #32]	; (2294c <mpsl_signal_thread_init+0x50>)
   2292a:	4628      	mov	r0, r5
   2292c:	f001 f9ea 	bl	23d04 <z_impl_k_thread_name_set>
			signal_thread, NULL, NULL, NULL,
			K_PRIO_COOP(CONFIG_MPSL_THREAD_COOP_PRIO),
			0, K_NO_WAIT);
	k_thread_name_set(&signal_thread_data, "MPSL signal");

	IRQ_CONNECT(MPSL_LOW_PRIO_IRQn, MPSL_LOW_PRIO,
   22930:	4622      	mov	r2, r4
   22932:	2104      	movs	r1, #4
   22934:	2019      	movs	r0, #25
   22936:	f7f3 fb1d 	bl	15f74 <z_arm_irq_priority_set>
		    mpsl_low_prio_irq_handler, NULL, 0);

	return 0;
}
   2293a:	4620      	mov	r0, r4
   2293c:	b009      	add	sp, #36	; 0x24
   2293e:	bd30      	pop	{r4, r5, pc}
   22940:	20001ed8 	.word	0x20001ed8
   22944:	200050a0 	.word	0x200050a0
   22948:	000228ad 	.word	0x000228ad
   2294c:	000339ef 	.word	0x000339ef

00022950 <mpsl_hfclk_callback>:

static nrfx_clock_event_handler_t event_handler;

static void mpsl_hfclk_callback(void)
{
	event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   22950:	4b01      	ldr	r3, [pc, #4]	; (22958 <mpsl_hfclk_callback+0x8>)
   22952:	2000      	movs	r0, #0
   22954:	681b      	ldr	r3, [r3, #0]
   22956:	4718      	bx	r3
   22958:	20002934 	.word	0x20002934

0002295c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
   2295c:	b510      	push	{r4, lr}
	switch (domain) {
   2295e:	b130      	cbz	r0, 2296e <nrfx_clock_start+0x12>
   22960:	2801      	cmp	r0, #1
   22962:	d10a      	bne.n	2297a <nrfx_clock_start+0x1e>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   22964:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		mpsl_clock_hfclk_request(mpsl_hfclk_callback);
   22968:	480b      	ldr	r0, [pc, #44]	; (22998 <nrfx_clock_start+0x3c>)
   2296a:	f7e0 be57 	b.w	361c <mpsl_clock_hfclk_request>
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   2296e:	4b0b      	ldr	r3, [pc, #44]	; (2299c <nrfx_clock_start+0x40>)
}
   22970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   22974:	681b      	ldr	r3, [r3, #0]
   22976:	2001      	movs	r0, #1
   22978:	4718      	bx	r3
		__ASSERT(0, "Not supported");
   2297a:	4909      	ldr	r1, [pc, #36]	; (229a0 <nrfx_clock_start+0x44>)
   2297c:	4a09      	ldr	r2, [pc, #36]	; (229a4 <nrfx_clock_start+0x48>)
   2297e:	480a      	ldr	r0, [pc, #40]	; (229a8 <nrfx_clock_start+0x4c>)
   22980:	231c      	movs	r3, #28
   22982:	f006 f90a 	bl	28b9a <printk>
   22986:	4809      	ldr	r0, [pc, #36]	; (229ac <nrfx_clock_start+0x50>)
   22988:	f006 f907 	bl	28b9a <printk>
}
   2298c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Not supported");
   22990:	4804      	ldr	r0, [pc, #16]	; (229a4 <nrfx_clock_start+0x48>)
   22992:	211c      	movs	r1, #28
   22994:	f006 bb42 	b.w	2901c <assert_post_action>
   22998:	00022951 	.word	0x00022951
   2299c:	20002934 	.word	0x20002934
   229a0:	00034515 	.word	0x00034515
   229a4:	00033a05 	.word	0x00033a05
   229a8:	0002e93e 	.word	0x0002e93e
   229ac:	00033a42 	.word	0x00033a42

000229b0 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   229b0:	b508      	push	{r3, lr}
	switch (domain) {
   229b2:	b1a0      	cbz	r0, 229de <nrfx_clock_stop+0x2e>
   229b4:	2801      	cmp	r0, #1
   229b6:	d103      	bne.n	229c0 <nrfx_clock_stop+0x10>
		/* empty */
		break;
	default:
		__ASSERT(0, "Not supported");
	}
}
   229b8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		mpsl_clock_hfclk_release();
   229bc:	f7e0 be20 	b.w	3600 <mpsl_clock_hfclk_release>
		__ASSERT(0, "Not supported");
   229c0:	4907      	ldr	r1, [pc, #28]	; (229e0 <nrfx_clock_stop+0x30>)
   229c2:	4a08      	ldr	r2, [pc, #32]	; (229e4 <nrfx_clock_stop+0x34>)
   229c4:	4808      	ldr	r0, [pc, #32]	; (229e8 <nrfx_clock_stop+0x38>)
   229c6:	232a      	movs	r3, #42	; 0x2a
   229c8:	f006 f8e7 	bl	28b9a <printk>
   229cc:	4807      	ldr	r0, [pc, #28]	; (229ec <nrfx_clock_stop+0x3c>)
   229ce:	f006 f8e4 	bl	28b9a <printk>
}
   229d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT(0, "Not supported");
   229d6:	4803      	ldr	r0, [pc, #12]	; (229e4 <nrfx_clock_stop+0x34>)
   229d8:	212a      	movs	r1, #42	; 0x2a
   229da:	f006 bb1f 	b.w	2901c <assert_post_action>
}
   229de:	bd08      	pop	{r3, pc}
   229e0:	00034515 	.word	0x00034515
   229e4:	00033a05 	.word	0x00033a05
   229e8:	0002e93e 	.word	0x0002e93e
   229ec:	00033a42 	.word	0x00033a42

000229f0 <nrfx_clock_init>:

}

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t handler)
{
	event_handler = handler;
   229f0:	4b01      	ldr	r3, [pc, #4]	; (229f8 <nrfx_clock_init+0x8>)
   229f2:	6018      	str	r0, [r3, #0]

	return NRFX_SUCCESS;
}
   229f4:	4801      	ldr	r0, [pc, #4]	; (229fc <nrfx_clock_init+0xc>)
   229f6:	4770      	bx	lr
   229f8:	20002934 	.word	0x20002934
   229fc:	0bad0000 	.word	0x0bad0000

00022a00 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   22a00:	4a02      	ldr	r2, [pc, #8]	; (22a0c <nvmc_wait+0xc>)
   22a02:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   22a06:	2b00      	cmp	r3, #0
   22a08:	d0fb      	beq.n	22a02 <nvmc_wait+0x2>
}
   22a0a:	4770      	bx	lr
   22a0c:	4001e000 	.word	0x4001e000

00022a10 <SystemInit>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22a10:	4b4e      	ldr	r3, [pc, #312]	; (22b4c <SystemInit+0x13c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   22a12:	681b      	ldr	r3, [r3, #0]
   22a14:	2b0d      	cmp	r3, #13
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   22a16:	b510      	push	{r4, lr}
   22a18:	d157      	bne.n	22aca <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
   22a1a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   22a1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
            NRF_CLOCK->EVENTS_DONE = 0;
   22a22:	2300      	movs	r3, #0
   22a24:	f8c1 310c 	str.w	r3, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   22a28:	f8c1 3110 	str.w	r3, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   22a2c:	f8c1 3538 	str.w	r3, [r1, #1336]	; 0x538
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   22a30:	4b47      	ldr	r3, [pc, #284]	; (22b50 <SystemInit+0x140>)
   22a32:	f8d2 0404 	ldr.w	r0, [r2, #1028]	; 0x404
   22a36:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   22a3a:	f8d2 0408 	ldr.w	r0, [r2, #1032]	; 0x408
   22a3e:	f8c3 0524 	str.w	r0, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   22a42:	f8d2 040c 	ldr.w	r0, [r2, #1036]	; 0x40c
   22a46:	f8c3 0528 	str.w	r0, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   22a4a:	f8d2 0410 	ldr.w	r0, [r2, #1040]	; 0x410
   22a4e:	f8c3 052c 	str.w	r0, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   22a52:	f8d2 0414 	ldr.w	r0, [r2, #1044]	; 0x414
   22a56:	f8c3 0530 	str.w	r0, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   22a5a:	f8d2 0418 	ldr.w	r0, [r2, #1048]	; 0x418
   22a5e:	f8c3 0534 	str.w	r0, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   22a62:	f8d2 041c 	ldr.w	r0, [r2, #1052]	; 0x41c
   22a66:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   22a6a:	f8d2 0420 	ldr.w	r0, [r2, #1056]	; 0x420
   22a6e:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   22a72:	f8d2 0424 	ldr.w	r0, [r2, #1060]	; 0x424
   22a76:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   22a7a:	f8d2 0428 	ldr.w	r0, [r2, #1064]	; 0x428
   22a7e:	f8c3 054c 	str.w	r0, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   22a82:	f8d2 042c 	ldr.w	r0, [r2, #1068]	; 0x42c
   22a86:	f8c3 0550 	str.w	r0, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   22a8a:	f8d2 0430 	ldr.w	r0, [r2, #1072]	; 0x430
   22a8e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   22a92:	f8d2 0434 	ldr.w	r0, [r2, #1076]	; 0x434
   22a96:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   22a9a:	f8d2 0438 	ldr.w	r0, [r2, #1080]	; 0x438
   22a9e:	f8c3 0564 	str.w	r0, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   22aa2:	f8d2 043c 	ldr.w	r0, [r2, #1084]	; 0x43c
   22aa6:	f8c3 0568 	str.w	r0, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   22aaa:	f8d2 0440 	ldr.w	r0, [r2, #1088]	; 0x440
   22aae:	f8c3 056c 	str.w	r0, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   22ab2:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   22ab6:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   22aba:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
   22abe:	07db      	lsls	r3, r3, #31
   22ac0:	d507      	bpl.n	22ad2 <SystemInit+0xc2>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   22ac2:	f06f 0301 	mvn.w	r3, #1
   22ac6:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   22aca:	4b20      	ldr	r3, [pc, #128]	; (22b4c <SystemInit+0x13c>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
   22acc:	681b      	ldr	r3, [r3, #0]
   22ace:	2b0d      	cmp	r3, #13
   22ad0:	d10a      	bne.n	22ae8 <SystemInit+0xd8>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   22ad2:	4b20      	ldr	r3, [pc, #128]	; (22b54 <SystemInit+0x144>)
            {
                switch(var2)
   22ad4:	681b      	ldr	r3, [r3, #0]
   22ad6:	b13b      	cbz	r3, 22ae8 <SystemInit+0xd8>
        #else
            if (nrf52_configuration_249())
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
   22ad8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   22adc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
   22ae0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   22ae4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   22ae8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   22aec:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   22af0:	2a00      	cmp	r2, #0
   22af2:	db03      	blt.n	22afc <SystemInit+0xec>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   22af4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   22af8:	2b00      	cmp	r3, #0
   22afa:	da22      	bge.n	22b42 <SystemInit+0x132>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22afc:	4916      	ldr	r1, [pc, #88]	; (22b58 <SystemInit+0x148>)
   22afe:	2301      	movs	r3, #1
   22b00:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   22b04:	f7ff ff7c 	bl	22a00 <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   22b08:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
   22b0c:	2412      	movs	r4, #18
   22b0e:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   22b12:	f7ff ff75 	bl	22a00 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   22b16:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   22b1a:	f7ff ff71 	bl	22a00 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   22b1e:	2300      	movs	r3, #0
   22b20:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   22b24:	f7ff ff6c 	bl	22a00 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
   22b28:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   22b2c:	490b      	ldr	r1, [pc, #44]	; (22b5c <SystemInit+0x14c>)
   22b2e:	4b0c      	ldr	r3, [pc, #48]	; (22b60 <SystemInit+0x150>)
   22b30:	68ca      	ldr	r2, [r1, #12]
   22b32:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   22b36:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   22b38:	60cb      	str	r3, [r1, #12]
   22b3a:	f3bf 8f4f 	dsb	sy
    __NOP();
   22b3e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   22b40:	e7fd      	b.n	22b3e <SystemInit+0x12e>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   22b42:	4b08      	ldr	r3, [pc, #32]	; (22b64 <SystemInit+0x154>)
   22b44:	4a08      	ldr	r2, [pc, #32]	; (22b68 <SystemInit+0x158>)
   22b46:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   22b48:	bd10      	pop	{r4, pc}
   22b4a:	bf00      	nop
   22b4c:	10000130 	.word	0x10000130
   22b50:	4000c000 	.word	0x4000c000
   22b54:	10000134 	.word	0x10000134
   22b58:	4001e000 	.word	0x4001e000
   22b5c:	e000ed00 	.word	0xe000ed00
   22b60:	05fa0004 	.word	0x05fa0004
   22b64:	200005ec 	.word	0x200005ec
   22b68:	03d09000 	.word	0x03d09000

00022b6c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
   22b6c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
   22b6e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
   22b70:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
   22b72:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
   22b76:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
   22b78:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
   22b7c:	d014      	beq.n	22ba8 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   22b7e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
   22b82:	fa05 f204 	lsl.w	r2, r5, r4
   22b86:	ea23 0202 	bic.w	r2, r3, r2
   22b8a:	e850 6f00 	ldrex	r6, [r0]
   22b8e:	429e      	cmp	r6, r3
   22b90:	d104      	bne.n	22b9c <nrfx_flag32_alloc+0x30>
   22b92:	e840 2c00 	strex	ip, r2, [r0]
   22b96:	f1bc 0f00 	cmp.w	ip, #0
   22b9a:	d1f6      	bne.n	22b8a <nrfx_flag32_alloc+0x1e>
   22b9c:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   22ba0:	d1e6      	bne.n	22b70 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
   22ba2:	4802      	ldr	r0, [pc, #8]	; (22bac <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
   22ba4:	700c      	strb	r4, [r1, #0]
}
   22ba6:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
   22ba8:	4801      	ldr	r0, [pc, #4]	; (22bb0 <nrfx_flag32_alloc+0x44>)
   22baa:	e7fc      	b.n	22ba6 <nrfx_flag32_alloc+0x3a>
   22bac:	0bad0000 	.word	0x0bad0000
   22bb0:	0bad0002 	.word	0x0bad0002

00022bb4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
   22bb4:	6803      	ldr	r3, [r0, #0]
   22bb6:	40cb      	lsrs	r3, r1
   22bb8:	07db      	lsls	r3, r3, #31
{
   22bba:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
   22bbc:	d415      	bmi.n	22bea <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
   22bbe:	2301      	movs	r3, #1
   22bc0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
   22bc4:	6803      	ldr	r3, [r0, #0]
   22bc6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
   22bca:	ea41 0203 	orr.w	r2, r1, r3
   22bce:	e850 4f00 	ldrex	r4, [r0]
   22bd2:	429c      	cmp	r4, r3
   22bd4:	d104      	bne.n	22be0 <nrfx_flag32_free+0x2c>
   22bd6:	e840 2c00 	strex	ip, r2, [r0]
   22bda:	f1bc 0f00 	cmp.w	ip, #0
   22bde:	d1f6      	bne.n	22bce <nrfx_flag32_free+0x1a>
   22be0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
   22be4:	d1ee      	bne.n	22bc4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
   22be6:	4802      	ldr	r0, [pc, #8]	; (22bf0 <nrfx_flag32_free+0x3c>)
}
   22be8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   22bea:	4802      	ldr	r0, [pc, #8]	; (22bf4 <nrfx_flag32_free+0x40>)
   22bec:	e7fc      	b.n	22be8 <nrfx_flag32_free+0x34>
   22bee:	bf00      	nop
   22bf0:	0bad0000 	.word	0x0bad0000
   22bf4:	0bad0004 	.word	0x0bad0004

00022bf8 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   22bf8:	4b05      	ldr	r3, [pc, #20]	; (22c10 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22bfa:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
   22bfc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   22c00:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
   22c04:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   22c08:	4258      	negs	r0, r3
   22c0a:	4158      	adcs	r0, r3
   22c0c:	4770      	bx	lr
   22c0e:	bf00      	nop
   22c10:	200005f0 	.word	0x200005f0

00022c14 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
   22c14:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22c16:	f100 0308 	add.w	r3, r0, #8
   22c1a:	4c0c      	ldr	r4, [pc, #48]	; (22c4c <call_handler+0x38>)
   22c1c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
   22c20:	05da      	lsls	r2, r3, #23
{
   22c22:	4605      	mov	r5, r0
   22c24:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22c26:	d507      	bpl.n	22c38 <call_handler+0x24>
   22c28:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
   22c2c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   22c30:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
   22c34:	6852      	ldr	r2, [r2, #4]
   22c36:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
   22c38:	68a3      	ldr	r3, [r4, #8]
   22c3a:	b12b      	cbz	r3, 22c48 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22c3c:	68e2      	ldr	r2, [r4, #12]
   22c3e:	4631      	mov	r1, r6
   22c40:	4628      	mov	r0, r5
    }
}
   22c42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
   22c46:	4718      	bx	r3
}
   22c48:	bd70      	pop	{r4, r5, r6, pc}
   22c4a:	bf00      	nop
   22c4c:	200005f0 	.word	0x200005f0

00022c50 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22c50:	4b19      	ldr	r3, [pc, #100]	; (22cb8 <release_handler+0x68>)
   22c52:	3008      	adds	r0, #8
{
   22c54:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
   22c56:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   22c5a:	05d1      	lsls	r1, r2, #23
   22c5c:	d51d      	bpl.n	22c9a <release_handler+0x4a>
   22c5e:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
   22c62:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
   22c66:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22c6a:	f103 0410 	add.w	r4, r3, #16
   22c6e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
   22c70:	f834 2b02 	ldrh.w	r2, [r4], #2
   22c74:	f412 7f80 	tst.w	r2, #256	; 0x100
   22c78:	d003      	beq.n	22c82 <release_handler+0x32>
   22c7a:	f3c2 2243 	ubfx	r2, r2, #9, #4
   22c7e:	4291      	cmp	r1, r2
   22c80:	d00b      	beq.n	22c9a <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
   22c82:	3001      	adds	r0, #1
   22c84:	282a      	cmp	r0, #42	; 0x2a
   22c86:	d1f3      	bne.n	22c70 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
   22c88:	2200      	movs	r2, #0
   22c8a:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
   22c8e:	480b      	ldr	r0, [pc, #44]	; (22cbc <release_handler+0x6c>)
   22c90:	f7ff ff90 	bl	22bb4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
   22c94:	4b0a      	ldr	r3, [pc, #40]	; (22cc0 <release_handler+0x70>)
   22c96:	4298      	cmp	r0, r3
   22c98:	d100      	bne.n	22c9c <release_handler+0x4c>
}
   22c9a:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   22c9c:	4909      	ldr	r1, [pc, #36]	; (22cc4 <release_handler+0x74>)
   22c9e:	480a      	ldr	r0, [pc, #40]	; (22cc8 <release_handler+0x78>)
   22ca0:	4a0a      	ldr	r2, [pc, #40]	; (22ccc <release_handler+0x7c>)
   22ca2:	f44f 7399 	mov.w	r3, #306	; 0x132
   22ca6:	f005 ff78 	bl	28b9a <printk>
}
   22caa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
   22cae:	4807      	ldr	r0, [pc, #28]	; (22ccc <release_handler+0x7c>)
   22cb0:	f44f 7199 	mov.w	r1, #306	; 0x132
   22cb4:	f006 b9b2 	b.w	2901c <assert_post_action>
   22cb8:	200005f0 	.word	0x200005f0
   22cbc:	20000658 	.word	0x20000658
   22cc0:	0bad0000 	.word	0x0bad0000
   22cc4:	00033ab6 	.word	0x00033ab6
   22cc8:	0002e93e 	.word	0x0002e93e
   22ccc:	00033a52 	.word	0x00033a52

00022cd0 <pin_handler_trigger_uninit>:
{
   22cd0:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   22cd2:	4c0a      	ldr	r4, [pc, #40]	; (22cfc <pin_handler_trigger_uninit+0x2c>)
   22cd4:	f100 0508 	add.w	r5, r0, #8
   22cd8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
   22cdc:	069a      	lsls	r2, r3, #26
   22cde:	d506      	bpl.n	22cee <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
   22ce0:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
   22ce2:	4a07      	ldr	r2, [pc, #28]	; (22d00 <pin_handler_trigger_uninit+0x30>)
   22ce4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
   22ce8:	2100      	movs	r1, #0
   22cea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
   22cee:	f7ff ffaf 	bl	22c50 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
   22cf2:	2300      	movs	r3, #0
   22cf4:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
   22cf8:	bd38      	pop	{r3, r4, r5, pc}
   22cfa:	bf00      	nop
   22cfc:	200005f0 	.word	0x200005f0
   22d00:	40006000 	.word	0x40006000

00022d04 <nrf_gpio_pin_port_decode>:
{
   22d04:	b510      	push	{r4, lr}
   22d06:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
   22d08:	6800      	ldr	r0, [r0, #0]
   22d0a:	f009 fcfc 	bl	2c706 <nrf_gpio_pin_present_check>
   22d0e:	b958      	cbnz	r0, 22d28 <nrf_gpio_pin_port_decode+0x24>
   22d10:	4912      	ldr	r1, [pc, #72]	; (22d5c <nrf_gpio_pin_port_decode+0x58>)
   22d12:	4813      	ldr	r0, [pc, #76]	; (22d60 <nrf_gpio_pin_port_decode+0x5c>)
   22d14:	4a13      	ldr	r2, [pc, #76]	; (22d64 <nrf_gpio_pin_port_decode+0x60>)
   22d16:	f240 2329 	movw	r3, #553	; 0x229
   22d1a:	f005 ff3e 	bl	28b9a <printk>
   22d1e:	4811      	ldr	r0, [pc, #68]	; (22d64 <nrf_gpio_pin_port_decode+0x60>)
   22d20:	f240 2129 	movw	r1, #553	; 0x229
   22d24:	f006 f97a 	bl	2901c <assert_post_action>
    uint32_t pin_number = *p_pin;
   22d28:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
   22d2a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22d2e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
   22d30:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22d32:	d00d      	beq.n	22d50 <nrf_gpio_pin_port_decode+0x4c>
   22d34:	2b01      	cmp	r3, #1
   22d36:	d00e      	beq.n	22d56 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
   22d38:	490b      	ldr	r1, [pc, #44]	; (22d68 <nrf_gpio_pin_port_decode+0x64>)
   22d3a:	4809      	ldr	r0, [pc, #36]	; (22d60 <nrf_gpio_pin_port_decode+0x5c>)
   22d3c:	4a09      	ldr	r2, [pc, #36]	; (22d64 <nrf_gpio_pin_port_decode+0x60>)
   22d3e:	f240 232e 	movw	r3, #558	; 0x22e
   22d42:	f005 ff2a 	bl	28b9a <printk>
   22d46:	4807      	ldr	r0, [pc, #28]	; (22d64 <nrf_gpio_pin_port_decode+0x60>)
   22d48:	f240 212e 	movw	r1, #558	; 0x22e
   22d4c:	f006 f966 	bl	2901c <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   22d50:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
   22d54:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
   22d56:	4805      	ldr	r0, [pc, #20]	; (22d6c <nrf_gpio_pin_port_decode+0x68>)
   22d58:	e7fc      	b.n	22d54 <nrf_gpio_pin_port_decode+0x50>
   22d5a:	bf00      	nop
   22d5c:	000334fa 	.word	0x000334fa
   22d60:	0002e93e 	.word	0x0002e93e
   22d64:	000334c7 	.word	0x000334c7
   22d68:	00034515 	.word	0x00034515
   22d6c:	50000300 	.word	0x50000300

00022d70 <nrfx_gpiote_input_configure>:
{
   22d70:	b5f0      	push	{r4, r5, r6, r7, lr}
   22d72:	4604      	mov	r4, r0
   22d74:	b085      	sub	sp, #20
   22d76:	4617      	mov	r7, r2
   22d78:	461d      	mov	r5, r3
    if (p_input_config)
   22d7a:	b1f1      	cbz	r1, 22dba <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
   22d7c:	f7ff ff3c 	bl	22bf8 <pin_is_task_output>
   22d80:	b110      	cbz	r0, 22d88 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
   22d82:	484a      	ldr	r0, [pc, #296]	; (22eac <nrfx_gpiote_input_configure+0x13c>)
}
   22d84:	b005      	add	sp, #20
   22d86:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   22d88:	460b      	mov	r3, r1
   22d8a:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
   22d8e:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
   22d92:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
   22d96:	f10d 020f 	add.w	r2, sp, #15
   22d9a:	f10d 010e 	add.w	r1, sp, #14
   22d9e:	4620      	mov	r0, r4
   22da0:	f009 fcc6 	bl	2c730 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   22da4:	4a42      	ldr	r2, [pc, #264]	; (22eb0 <nrfx_gpiote_input_configure+0x140>)
   22da6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
   22daa:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
   22dae:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
   22db2:	f043 0301 	orr.w	r3, r3, #1
   22db6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
   22dba:	b197      	cbz	r7, 22de2 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22dbc:	4b3c      	ldr	r3, [pc, #240]	; (22eb0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
   22dbe:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
   22dc0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22dc2:	f104 0008 	add.w	r0, r4, #8
   22dc6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
   22dca:	078f      	lsls	r7, r1, #30
   22dcc:	d50c      	bpl.n	22de8 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
   22dce:	2a00      	cmp	r2, #0
   22dd0:	d1d7      	bne.n	22d82 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
   22dd2:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
   22dd6:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
   22dda:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
   22dde:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
   22de2:	bbcd      	cbnz	r5, 22e58 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
   22de4:	4833      	ldr	r0, [pc, #204]	; (22eb4 <nrfx_gpiote_input_configure+0x144>)
   22de6:	e7cd      	b.n	22d84 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
   22de8:	f021 0120 	bic.w	r1, r1, #32
   22dec:	04c9      	lsls	r1, r1, #19
   22dee:	0cc9      	lsrs	r1, r1, #19
   22df0:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
   22df4:	2a00      	cmp	r2, #0
   22df6:	d0ec      	beq.n	22dd2 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
   22df8:	2e03      	cmp	r6, #3
   22dfa:	d8c2      	bhi.n	22d82 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
   22dfc:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
   22dfe:	b92e      	cbnz	r6, 22e0c <nrfx_gpiote_input_configure+0x9c>
   22e00:	4a2d      	ldr	r2, [pc, #180]	; (22eb8 <nrfx_gpiote_input_configure+0x148>)
   22e02:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   22e06:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
   22e0a:	e7e2      	b.n	22dd2 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   22e0c:	00ba      	lsls	r2, r7, #2
   22e0e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   22e12:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22e16:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
   22e1a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   22e1e:	f02c 0c03 	bic.w	ip, ip, #3
   22e22:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   22e26:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
   22e2a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
   22e2e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
   22e32:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22e36:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
   22e3a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
   22e3e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
   22e42:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
   22e46:	ea4c 0c0e 	orr.w	ip, ip, lr
   22e4a:	f041 0120 	orr.w	r1, r1, #32
   22e4e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
   22e52:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
   22e56:	e7bc      	b.n	22dd2 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
   22e58:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
   22e5c:	4620      	mov	r0, r4
   22e5e:	f7ff fef7 	bl	22c50 <release_handler>
    if (!handler)
   22e62:	2e00      	cmp	r6, #0
   22e64:	d0be      	beq.n	22de4 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
   22e66:	4d12      	ldr	r5, [pc, #72]	; (22eb0 <nrfx_gpiote_input_configure+0x140>)
   22e68:	682b      	ldr	r3, [r5, #0]
   22e6a:	429e      	cmp	r6, r3
   22e6c:	d104      	bne.n	22e78 <nrfx_gpiote_input_configure+0x108>
   22e6e:	686b      	ldr	r3, [r5, #4]
   22e70:	429f      	cmp	r7, r3
   22e72:	d101      	bne.n	22e78 <nrfx_gpiote_input_configure+0x108>
   22e74:	2200      	movs	r2, #0
   22e76:	e00a      	b.n	22e8e <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
   22e78:	4810      	ldr	r0, [pc, #64]	; (22ebc <nrfx_gpiote_input_configure+0x14c>)
   22e7a:	f10d 010f 	add.w	r1, sp, #15
   22e7e:	f7ff fe75 	bl	22b6c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
   22e82:	4b0c      	ldr	r3, [pc, #48]	; (22eb4 <nrfx_gpiote_input_configure+0x144>)
   22e84:	4298      	cmp	r0, r3
   22e86:	f47f af7d 	bne.w	22d84 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
   22e8a:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
   22e8e:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
   22e92:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   22e96:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
   22e98:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
   22e9a:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
   22e9e:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
   22ea2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   22ea6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
   22eaa:	e79b      	b.n	22de4 <nrfx_gpiote_input_configure+0x74>
   22eac:	0bad0004 	.word	0x0bad0004
   22eb0:	200005f0 	.word	0x200005f0
   22eb4:	0bad0000 	.word	0x0bad0000
   22eb8:	40006000 	.word	0x40006000
   22ebc:	20000658 	.word	0x20000658

00022ec0 <nrfx_gpiote_output_configure>:
{
   22ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
   22ec2:	4604      	mov	r4, r0
   22ec4:	b085      	sub	sp, #20
   22ec6:	4615      	mov	r5, r2
    if (p_config)
   22ec8:	b309      	cbz	r1, 22f0e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22eca:	f100 0708 	add.w	r7, r0, #8
   22ece:	4e31      	ldr	r6, [pc, #196]	; (22f94 <nrfx_gpiote_output_configure+0xd4>)
   22ed0:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
   22ed4:	0798      	lsls	r0, r3, #30
   22ed6:	d401      	bmi.n	22edc <nrfx_gpiote_output_configure+0x1c>
   22ed8:	069a      	lsls	r2, r3, #26
   22eda:	d458      	bmi.n	22f8e <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
   22edc:	f013 0f1c 	tst.w	r3, #28
   22ee0:	d002      	beq.n	22ee8 <nrfx_gpiote_output_configure+0x28>
   22ee2:	784b      	ldrb	r3, [r1, #1]
   22ee4:	2b01      	cmp	r3, #1
   22ee6:	d052      	beq.n	22f8e <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
   22ee8:	2301      	movs	r3, #1
   22eea:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
   22eee:	2300      	movs	r3, #0
   22ef0:	e9cd 1300 	strd	r1, r3, [sp]
   22ef4:	1c4a      	adds	r2, r1, #1
   22ef6:	1c8b      	adds	r3, r1, #2
   22ef8:	4620      	mov	r0, r4
   22efa:	f10d 010f 	add.w	r1, sp, #15
   22efe:	f009 fc17 	bl	2c730 <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
   22f02:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
   22f06:	f043 0303 	orr.w	r3, r3, #3
   22f0a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
   22f0e:	b915      	cbnz	r5, 22f16 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
   22f10:	4821      	ldr	r0, [pc, #132]	; (22f98 <nrfx_gpiote_output_configure+0xd8>)
}
   22f12:	b005      	add	sp, #20
   22f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
   22f16:	4e1f      	ldr	r6, [pc, #124]	; (22f94 <nrfx_gpiote_output_configure+0xd4>)
   22f18:	f104 0708 	add.w	r7, r4, #8
   22f1c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
   22f20:	0783      	lsls	r3, r0, #30
   22f22:	d534      	bpl.n	22f8e <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
   22f24:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
   22f28:	4661      	mov	r1, ip
   22f2a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
   22f2c:	f020 0020 	bic.w	r0, r0, #32
   22f30:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   22f34:	04c0      	lsls	r0, r0, #19
   22f36:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
   22f3a:	0cc0      	lsrs	r0, r0, #19
   22f3c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   22f40:	2300      	movs	r3, #0
   22f42:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
   22f46:	786a      	ldrb	r2, [r5, #1]
   22f48:	2a00      	cmp	r2, #0
   22f4a:	d0e1      	beq.n	22f10 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
   22f4c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
   22f50:	78ad      	ldrb	r5, [r5, #2]
   22f52:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
   22f56:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
   22f5a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22f5e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
   22f62:	0223      	lsls	r3, r4, #8
   22f64:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   22f68:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22f6a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
   22f6e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   22f72:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22f74:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
   22f76:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
   22f7a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   22f7e:	432b      	orrs	r3, r5
   22f80:	f040 0020 	orr.w	r0, r0, #32
   22f84:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
   22f88:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
   22f8c:	e7c0      	b.n	22f10 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
   22f8e:	4803      	ldr	r0, [pc, #12]	; (22f9c <nrfx_gpiote_output_configure+0xdc>)
   22f90:	e7bf      	b.n	22f12 <nrfx_gpiote_output_configure+0x52>
   22f92:	bf00      	nop
   22f94:	200005f0 	.word	0x200005f0
   22f98:	0bad0000 	.word	0x0bad0000
   22f9c:	0bad0004 	.word	0x0bad0004

00022fa0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
   22fa0:	4b01      	ldr	r3, [pc, #4]	; (22fa8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
   22fa2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
   22fa6:	4770      	bx	lr
   22fa8:	200005f0 	.word	0x200005f0

00022fac <nrfx_gpiote_channel_get>:
{
   22fac:	b538      	push	{r3, r4, r5, lr}
   22fae:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
   22fb0:	460d      	mov	r5, r1
   22fb2:	b959      	cbnz	r1, 22fcc <nrfx_gpiote_channel_get+0x20>
   22fb4:	490b      	ldr	r1, [pc, #44]	; (22fe4 <nrfx_gpiote_channel_get+0x38>)
   22fb6:	480c      	ldr	r0, [pc, #48]	; (22fe8 <nrfx_gpiote_channel_get+0x3c>)
   22fb8:	4a0c      	ldr	r2, [pc, #48]	; (22fec <nrfx_gpiote_channel_get+0x40>)
   22fba:	f240 2335 	movw	r3, #565	; 0x235
   22fbe:	f005 fdec 	bl	28b9a <printk>
   22fc2:	480a      	ldr	r0, [pc, #40]	; (22fec <nrfx_gpiote_channel_get+0x40>)
   22fc4:	f240 2135 	movw	r1, #565	; 0x235
   22fc8:	f006 f828 	bl	2901c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   22fcc:	3408      	adds	r4, #8
   22fce:	4b08      	ldr	r3, [pc, #32]	; (22ff0 <nrfx_gpiote_channel_get+0x44>)
   22fd0:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
   22fd4:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   22fd6:	bf43      	ittte	mi
   22fd8:	0b5b      	lsrmi	r3, r3, #13
   22fda:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
   22fdc:	4805      	ldrmi	r0, [pc, #20]	; (22ff4 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
   22fde:	4806      	ldrpl	r0, [pc, #24]	; (22ff8 <nrfx_gpiote_channel_get+0x4c>)
}
   22fe0:	bd38      	pop	{r3, r4, r5, pc}
   22fe2:	bf00      	nop
   22fe4:	00033aca 	.word	0x00033aca
   22fe8:	0002e93e 	.word	0x0002e93e
   22fec:	00033a52 	.word	0x00033a52
   22ff0:	200005f0 	.word	0x200005f0
   22ff4:	0bad0000 	.word	0x0bad0000
   22ff8:	0bad0004 	.word	0x0bad0004

00022ffc <nrfx_gpiote_init>:
{
   22ffc:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
   22ffe:	4c0e      	ldr	r4, [pc, #56]	; (23038 <nrfx_gpiote_init+0x3c>)
   23000:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
   23004:	b9b5      	cbnz	r5, 23034 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
   23006:	2254      	movs	r2, #84	; 0x54
   23008:	4629      	mov	r1, r5
   2300a:	f104 0010 	add.w	r0, r4, #16
   2300e:	f009 fe1a 	bl	2cc46 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
   23012:	2006      	movs	r0, #6
   23014:	f7f2 ff7c 	bl	15f10 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23018:	4b08      	ldr	r3, [pc, #32]	; (2303c <nrfx_gpiote_init+0x40>)
    return err_code;
   2301a:	4809      	ldr	r0, [pc, #36]	; (23040 <nrfx_gpiote_init+0x44>)
   2301c:	601d      	str	r5, [r3, #0]
   2301e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   23020:	4b08      	ldr	r3, [pc, #32]	; (23044 <nrfx_gpiote_init+0x48>)
   23022:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   23026:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
   2302a:	2301      	movs	r3, #1
   2302c:	f884 306c 	strb.w	r3, [r4, #108]	; 0x6c
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
   23030:	66a3      	str	r3, [r4, #104]	; 0x68
}
   23032:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
   23034:	4804      	ldr	r0, [pc, #16]	; (23048 <nrfx_gpiote_init+0x4c>)
   23036:	e7fc      	b.n	23032 <nrfx_gpiote_init+0x36>
   23038:	200005f0 	.word	0x200005f0
   2303c:	4000617c 	.word	0x4000617c
   23040:	0bad0000 	.word	0x0bad0000
   23044:	40006000 	.word	0x40006000
   23048:	0bad0005 	.word	0x0bad0005

0002304c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
   2304c:	4b03      	ldr	r3, [pc, #12]	; (2305c <nrfx_gpiote_is_init+0x10>)
   2304e:	f893 006c 	ldrb.w	r0, [r3, #108]	; 0x6c
}
   23052:	3800      	subs	r0, #0
   23054:	bf18      	it	ne
   23056:	2001      	movne	r0, #1
   23058:	4770      	bx	lr
   2305a:	bf00      	nop
   2305c:	200005f0 	.word	0x200005f0

00023060 <nrfx_gpiote_channel_free>:
{
   23060:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
   23062:	4801      	ldr	r0, [pc, #4]	; (23068 <nrfx_gpiote_channel_free+0x8>)
   23064:	f7ff bda6 	b.w	22bb4 <nrfx_flag32_free>
   23068:	20000654 	.word	0x20000654

0002306c <nrfx_gpiote_channel_alloc>:
{
   2306c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
   2306e:	4801      	ldr	r0, [pc, #4]	; (23074 <nrfx_gpiote_channel_alloc+0x8>)
   23070:	f7ff bd7c 	b.w	22b6c <nrfx_flag32_alloc>
   23074:	20000654 	.word	0x20000654

00023078 <nrfx_gpiote_trigger_enable>:
{
   23078:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   2307a:	4d31      	ldr	r5, [pc, #196]	; (23140 <nrfx_gpiote_trigger_enable+0xc8>)
   2307c:	f100 0708 	add.w	r7, r0, #8
{
   23080:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
   23082:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
   23086:	f013 0f1c 	tst.w	r3, #28
{
   2308a:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
   2308c:	d10b      	bne.n	230a6 <nrfx_gpiote_trigger_enable+0x2e>
   2308e:	492d      	ldr	r1, [pc, #180]	; (23144 <nrfx_gpiote_trigger_enable+0xcc>)
   23090:	482d      	ldr	r0, [pc, #180]	; (23148 <nrfx_gpiote_trigger_enable+0xd0>)
   23092:	4a2e      	ldr	r2, [pc, #184]	; (2314c <nrfx_gpiote_trigger_enable+0xd4>)
   23094:	f240 33df 	movw	r3, #991	; 0x3df
   23098:	f005 fd7f 	bl	28b9a <printk>
   2309c:	482b      	ldr	r0, [pc, #172]	; (2314c <nrfx_gpiote_trigger_enable+0xd4>)
   2309e:	f240 31df 	movw	r1, #991	; 0x3df
   230a2:	f005 ffbb 	bl	2901c <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   230a6:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   230aa:	0683      	lsls	r3, r0, #26
   230ac:	d51f      	bpl.n	230ee <nrfx_gpiote_trigger_enable+0x76>
   230ae:	f010 0302 	ands.w	r3, r0, #2
   230b2:	d11c      	bne.n	230ee <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   230b4:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
   230b6:	4608      	mov	r0, r1
   230b8:	f009 fb36 	bl	2c728 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
   230bc:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   230c0:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   230c4:	6003      	str	r3, [r0, #0]
   230c6:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   230c8:	008b      	lsls	r3, r1, #2
   230ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   230ce:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   230d2:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   230d6:	f042 0201 	orr.w	r2, r2, #1
   230da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
   230de:	b126      	cbz	r6, 230ea <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
   230e0:	4a1b      	ldr	r2, [pc, #108]	; (23150 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
   230e2:	2301      	movs	r3, #1
   230e4:	408b      	lsls	r3, r1
   230e6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   230ea:	b003      	add	sp, #12
   230ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
   230ee:	b95e      	cbnz	r6, 23108 <nrfx_gpiote_trigger_enable+0x90>
   230f0:	4918      	ldr	r1, [pc, #96]	; (23154 <nrfx_gpiote_trigger_enable+0xdc>)
   230f2:	4815      	ldr	r0, [pc, #84]	; (23148 <nrfx_gpiote_trigger_enable+0xd0>)
   230f4:	4a15      	ldr	r2, [pc, #84]	; (2314c <nrfx_gpiote_trigger_enable+0xd4>)
   230f6:	f240 33ee 	movw	r3, #1006	; 0x3ee
   230fa:	f005 fd4e 	bl	28b9a <printk>
   230fe:	4813      	ldr	r0, [pc, #76]	; (2314c <nrfx_gpiote_trigger_enable+0xd4>)
   23100:	f240 31ee 	movw	r1, #1006	; 0x3ee
   23104:	f005 ff8a 	bl	2901c <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23108:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
   2310c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
   23110:	2b04      	cmp	r3, #4
   23112:	d010      	beq.n	23136 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
   23114:	2b05      	cmp	r3, #5
   23116:	d010      	beq.n	2313a <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   23118:	a801      	add	r0, sp, #4
   2311a:	9401      	str	r4, [sp, #4]
   2311c:	f7ff fdf2 	bl	22d04 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23120:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
   23122:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
   23126:	40d9      	lsrs	r1, r3
   23128:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2312c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
   2312e:	4620      	mov	r0, r4
   23130:	f009 fb49 	bl	2c7c6 <nrf_gpio_cfg_sense_set>
}
   23134:	e7d9      	b.n	230ea <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
   23136:	2103      	movs	r1, #3
   23138:	e7f9      	b.n	2312e <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
   2313a:	2102      	movs	r1, #2
   2313c:	e7f7      	b.n	2312e <nrfx_gpiote_trigger_enable+0xb6>
   2313e:	bf00      	nop
   23140:	200005f0 	.word	0x200005f0
   23144:	00033ad4 	.word	0x00033ad4
   23148:	0002e93e 	.word	0x0002e93e
   2314c:	00033a52 	.word	0x00033a52
   23150:	40006000 	.word	0x40006000
   23154:	00033ae9 	.word	0x00033ae9

00023158 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
   23158:	4b0e      	ldr	r3, [pc, #56]	; (23194 <nrfx_gpiote_trigger_disable+0x3c>)
   2315a:	f100 0208 	add.w	r2, r0, #8
   2315e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
   23162:	0699      	lsls	r1, r3, #26
   23164:	d513      	bpl.n	2318e <nrfx_gpiote_trigger_disable+0x36>
   23166:	079a      	lsls	r2, r3, #30
   23168:	d411      	bmi.n	2318e <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
   2316a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
   2316c:	2201      	movs	r2, #1
   2316e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
   23170:	009b      	lsls	r3, r3, #2
   23172:	4909      	ldr	r1, [pc, #36]	; (23198 <nrfx_gpiote_trigger_disable+0x40>)
   23174:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23178:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   2317c:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
   23180:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   23184:	f022 0203 	bic.w	r2, r2, #3
   23188:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
   2318c:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   2318e:	2100      	movs	r1, #0
   23190:	f009 bb19 	b.w	2c7c6 <nrf_gpio_cfg_sense_set>
   23194:	200005f0 	.word	0x200005f0
   23198:	40006000 	.word	0x40006000

0002319c <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   2319c:	4b0e      	ldr	r3, [pc, #56]	; (231d8 <nrfx_gpiote_pin_uninit+0x3c>)
   2319e:	f100 0208 	add.w	r2, r0, #8
{
   231a2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
   231a4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
   231a8:	07db      	lsls	r3, r3, #31
{
   231aa:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
   231ac:	d511      	bpl.n	231d2 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
   231ae:	f7ff ffd3 	bl	23158 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
   231b2:	4620      	mov	r0, r4
   231b4:	f7ff fd8c 	bl	22cd0 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   231b8:	a801      	add	r0, sp, #4
   231ba:	9401      	str	r4, [sp, #4]
   231bc:	f7ff fda2 	bl	22d04 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
   231c0:	9b01      	ldr	r3, [sp, #4]
   231c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   231c6:	2202      	movs	r2, #2
   231c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
   231cc:	4803      	ldr	r0, [pc, #12]	; (231dc <nrfx_gpiote_pin_uninit+0x40>)
}
   231ce:	b002      	add	sp, #8
   231d0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
   231d2:	4803      	ldr	r0, [pc, #12]	; (231e0 <nrfx_gpiote_pin_uninit+0x44>)
   231d4:	e7fb      	b.n	231ce <nrfx_gpiote_pin_uninit+0x32>
   231d6:	bf00      	nop
   231d8:	200005f0 	.word	0x200005f0
   231dc:	0bad0000 	.word	0x0bad0000
   231e0:	0bad0004 	.word	0x0bad0004

000231e4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
   231e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231e8:	4b65      	ldr	r3, [pc, #404]	; (23380 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
   231ea:	4866      	ldr	r0, [pc, #408]	; (23384 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   231ec:	4966      	ldr	r1, [pc, #408]	; (23388 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
   231ee:	2500      	movs	r5, #0
{
   231f0:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
   231f2:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   231f4:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   231f6:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
   231f8:	b136      	cbz	r6, 23208 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
   231fa:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
   231fe:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23200:	bf1e      	ittt	ne
   23202:	601c      	strne	r4, [r3, #0]
   23204:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
   23206:	4315      	orrne	r5, r2
        }
        mask <<= 1;
   23208:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   2320a:	428b      	cmp	r3, r1
        mask <<= 1;
   2320c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
   23210:	d1f1      	bne.n	231f6 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   23212:	4f5e      	ldr	r7, [pc, #376]	; (2338c <nrfx_gpiote_irq_handler+0x1a8>)
   23214:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
   23216:	b37b      	cbz	r3, 23278 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
   23218:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2321c:	4e5c      	ldr	r6, [pc, #368]	; (23390 <nrfx_gpiote_irq_handler+0x1ac>)
   2321e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   23222:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
   23224:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   23228:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
   2322c:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
   2322e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   23232:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23234:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   23238:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
   2323c:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
   23240:	f8d9 3000 	ldr.w	r3, [r9]
   23244:	b9f3      	cbnz	r3, 23284 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
   23246:	f108 0820 	add.w	r8, r8, #32
   2324a:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
   2324e:	f109 0904 	add.w	r9, r9, #4
   23252:	d1f5      	bne.n	23240 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   23254:	603b      	str	r3, [r7, #0]
   23256:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
   23258:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
   2325a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
   2325e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
   23262:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
   23264:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
   23268:	9b01      	ldr	r3, [sp, #4]
   2326a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
   2326e:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
   23270:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
   23274:	4313      	orrs	r3, r2
   23276:	d1dd      	bne.n	23234 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
   23278:	2401      	movs	r4, #1
    while (mask)
   2327a:	2d00      	cmp	r5, #0
   2327c:	d168      	bne.n	23350 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
   2327e:	b009      	add	sp, #36	; 0x24
   23280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
   23284:	fa93 f3a3 	rbit	r3, r3
   23288:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
   2328c:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
   23290:	f106 0208 	add.w	r2, r6, #8
   23294:	4b3f      	ldr	r3, [pc, #252]	; (23394 <nrfx_gpiote_irq_handler+0x1b0>)
   23296:	9605      	str	r6, [sp, #20]
   23298:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
   2329c:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
   232a0:	08f4      	lsrs	r4, r6, #3
   232a2:	9302      	str	r3, [sp, #8]
   232a4:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
   232a6:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
   232a8:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
   232ac:	fa0b fc00 	lsl.w	ip, fp, r0
   232b0:	5d18      	ldrb	r0, [r3, r4]
   232b2:	ea20 000c 	bic.w	r0, r0, ip
   232b6:	5518      	strb	r0, [r3, r4]
   232b8:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   232ba:	a805      	add	r0, sp, #20
   232bc:	9103      	str	r1, [sp, #12]
   232be:	f7ff fd21 	bl	22d04 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   232c2:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
   232c4:	9903      	ldr	r1, [sp, #12]
   232c6:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   232ca:	074b      	lsls	r3, r1, #29
   232cc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
   232d0:	f3c4 4401 	ubfx	r4, r4, #16, #2
   232d4:	d523      	bpl.n	2331e <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
   232d6:	4651      	mov	r1, sl
   232d8:	4630      	mov	r0, r6
   232da:	f7ff fc9b 	bl	22c14 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   232de:	a805      	add	r0, sp, #20
   232e0:	9605      	str	r6, [sp, #20]
   232e2:	f7ff fd0f 	bl	22d04 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
   232e6:	9a05      	ldr	r2, [sp, #20]
   232e8:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
   232ec:	b2e4      	uxtb	r4, r4
   232ee:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
   232f2:	f3c2 4201 	ubfx	r2, r2, #16, #2
   232f6:	4294      	cmp	r4, r2
   232f8:	d107      	bne.n	2330a <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
   232fa:	2100      	movs	r1, #0
   232fc:	4630      	mov	r0, r6
   232fe:	f009 fa62 	bl	2c7c6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
   23302:	4621      	mov	r1, r4
   23304:	4630      	mov	r0, r6
   23306:	f009 fa5e 	bl	2c7c6 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2330a:	a805      	add	r0, sp, #20
   2330c:	9605      	str	r6, [sp, #20]
   2330e:	f7ff fcf9 	bl	22d04 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
   23312:	9b05      	ldr	r3, [sp, #20]
   23314:	fa0b f303 	lsl.w	r3, fp, r3
   23318:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
   2331c:	e790      	b.n	23240 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
   2331e:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
   23320:	bf0c      	ite	eq
   23322:	2103      	moveq	r1, #3
   23324:	2102      	movne	r1, #2
   23326:	4630      	mov	r0, r6
   23328:	f009 fa4d 	bl	2c7c6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
   2332c:	9b02      	ldr	r3, [sp, #8]
   2332e:	2b03      	cmp	r3, #3
   23330:	d004      	beq.n	2333c <nrfx_gpiote_irq_handler+0x158>
   23332:	2c02      	cmp	r4, #2
   23334:	d107      	bne.n	23346 <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23336:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2333a:	d1e6      	bne.n	2330a <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
   2333c:	4651      	mov	r1, sl
   2333e:	4630      	mov	r0, r6
   23340:	f7ff fc68 	bl	22c14 <call_handler>
   23344:	e7e1      	b.n	2330a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
   23346:	2c03      	cmp	r4, #3
   23348:	d1df      	bne.n	2330a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
   2334a:	f1ba 0f02 	cmp.w	sl, #2
   2334e:	e7f4      	b.n	2333a <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
   23350:	fa95 f3a5 	rbit	r3, r5
   23354:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
   23358:	fa04 f203 	lsl.w	r2, r4, r3
   2335c:	009b      	lsls	r3, r3, #2
   2335e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   23362:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   23366:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   2336a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
   2336e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
   23372:	f3c0 2005 	ubfx	r0, r0, #8, #6
   23376:	f3c1 4101 	ubfx	r1, r1, #16, #2
   2337a:	f7ff fc4b 	bl	22c14 <call_handler>
   2337e:	e77c      	b.n	2327a <nrfx_gpiote_irq_handler+0x96>
   23380:	40006100 	.word	0x40006100
   23384:	40006000 	.word	0x40006000
   23388:	40006120 	.word	0x40006120
   2338c:	4000617c 	.word	0x4000617c
   23390:	50000300 	.word	0x50000300
   23394:	200005f0 	.word	0x200005f0

00023398 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
   23398:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
   2339a:	4801      	ldr	r0, [pc, #4]	; (233a0 <nrfx_ppi_channel_alloc+0x8>)
   2339c:	f7ff bbe6 	b.w	22b6c <nrfx_flag32_alloc>
   233a0:	20000660 	.word	0x20000660

000233a4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
   233a4:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   233a6:	4c11      	ldr	r4, [pc, #68]	; (233ec <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
   233a8:	4a11      	ldr	r2, [pc, #68]	; (233f0 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
   233aa:	4912      	ldr	r1, [pc, #72]	; (233f4 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
   233ac:	2303      	movs	r3, #3
   233ae:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
   233b0:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
   233b2:	4b11      	ldr	r3, [pc, #68]	; (233f8 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
   233b4:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
   233b6:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
   233b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
   233bc:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
   233be:	2300      	movs	r3, #0
   233c0:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
   233c2:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   233c4:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
   233c6:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
   233c8:	4a0c      	ldr	r2, [pc, #48]	; (233fc <_DoInit+0x58>)
   233ca:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
   233cc:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
   233ce:	2210      	movs	r2, #16
   233d0:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
   233d2:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
   233d4:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
   233d6:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
   233d8:	f009 fc4a 	bl	2cc70 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
   233dc:	4908      	ldr	r1, [pc, #32]	; (23400 <_DoInit+0x5c>)
   233de:	4620      	mov	r0, r4
   233e0:	f009 fc46 	bl	2cc70 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
   233e4:	2320      	movs	r3, #32
   233e6:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
   233e8:	bd10      	pop	{r4, pc}
   233ea:	bf00      	nop
   233ec:	20002938 	.word	0x20002938
   233f0:	00033af4 	.word	0x00033af4
   233f4:	00033afd 	.word	0x00033afd
   233f8:	200032e5 	.word	0x200032e5
   233fc:	200032d5 	.word	0x200032d5
   23400:	00033b01 	.word	0x00033b01

00023404 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   23404:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
   23408:	4f23      	ldr	r7, [pc, #140]	; (23498 <SEGGER_RTT_WriteSkipNoLock+0x94>)
   2340a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2340e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
   23410:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   23414:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
   23416:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
   23418:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2341a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
   2341c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
   2341e:	d834      	bhi.n	2348a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
   23420:	f8d2 a020 	ldr.w	sl, [r2, #32]
   23424:	ebaa 0905 	sub.w	r9, sl, r5
   23428:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
   2342c:	4294      	cmp	r4, r2
   2342e:	d811      	bhi.n	23454 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   23430:	f04f 0918 	mov.w	r9, #24
   23434:	fb06 9309 	mla	r3, r6, r9, r9
   23438:	443b      	add	r3, r7
   2343a:	4622      	mov	r2, r4
   2343c:	6858      	ldr	r0, [r3, #4]
   2343e:	4641      	mov	r1, r8
   23440:	4428      	add	r0, r5
   23442:	f009 fbd8 	bl	2cbf6 <memcpy>
      memcpy((void*)pDst, pData, NumBytes);
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
   23446:	fb09 7606 	mla	r6, r9, r6, r7
   2344a:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
   2344c:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
   2344e:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
   23450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
   23454:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
   23456:	429c      	cmp	r4, r3
   23458:	d81b      	bhi.n	23492 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
   2345a:	fb00 bb0b 	mla	fp, r0, fp, fp
   2345e:	44bb      	add	fp, r7
   23460:	464a      	mov	r2, r9
   23462:	f8db 0004 	ldr.w	r0, [fp, #4]
   23466:	442c      	add	r4, r5
   23468:	4428      	add	r0, r5
   2346a:	f009 fbc4 	bl	2cbf6 <memcpy>
      if (NumBytes) {
   2346e:	ebb4 040a 	subs.w	r4, r4, sl
   23472:	d006      	beq.n	23482 <SEGGER_RTT_WriteSkipNoLock+0x7e>
   23474:	f8db 0004 	ldr.w	r0, [fp, #4]
   23478:	4622      	mov	r2, r4
   2347a:	eb08 0109 	add.w	r1, r8, r9
   2347e:	f009 fbba 	bl	2cbf6 <memcpy>
      pRing->WrOff = NumBytes;
   23482:	2018      	movs	r0, #24
   23484:	fb00 7606 	mla	r6, r0, r6, r7
   23488:	e7e0      	b.n	2344c <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
   2348a:	3b01      	subs	r3, #1
   2348c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
   2348e:	42a3      	cmp	r3, r4
   23490:	d2ce      	bcs.n	23430 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
   23492:	2000      	movs	r0, #0
   23494:	e7dc      	b.n	23450 <SEGGER_RTT_WriteSkipNoLock+0x4c>
   23496:	bf00      	nop
   23498:	20002938 	.word	0x20002938

0002349c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
   2349c:	4b03      	ldr	r3, [pc, #12]	; (234ac <SEGGER_RTT_HasDataUp+0x10>)
   2349e:	2218      	movs	r2, #24
   234a0:	fb02 3300 	mla	r3, r2, r0, r3
   234a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
   234a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
   234a8:	1a80      	subs	r0, r0, r2
   234aa:	4770      	bx	lr
   234ac:	20002938 	.word	0x20002938

000234b0 <device_visitor>:

static int device_visitor(const device_handle_t *handles,
			   size_t handle_count,
			   device_visitor_callback_t visitor_cb,
			   void *context)
{
   234b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	size_t numdev = __device_end - __device_start;
   234b4:	4e13      	ldr	r6, [pc, #76]	; (23504 <device_visitor+0x54>)
   234b6:	460f      	mov	r7, r1
   234b8:	4619      	mov	r1, r3
   234ba:	4b13      	ldr	r3, [pc, #76]	; (23508 <device_visitor+0x58>)
   234bc:	4692      	mov	sl, r2
   234be:	eba3 0806 	sub.w	r8, r3, r6
   234c2:	4a12      	ldr	r2, [pc, #72]	; (2350c <device_visitor+0x5c>)
   234c4:	ea4f 03e8 	mov.w	r3, r8, asr #3
   234c8:	4681      	mov	r9, r0
   234ca:	fb02 f803 	mul.w	r8, r2, r3
	/* Iterate over fixed devices */
	for (size_t i = 0; i < handle_count; ++i) {
   234ce:	2500      	movs	r5, #0
		dev = &__device_start[dev_handle - 1];
   234d0:	f04f 0b18 	mov.w	fp, #24
   234d4:	42bd      	cmp	r5, r7
   234d6:	d103      	bne.n	234e0 <device_visitor+0x30>
		if (rc < 0) {
			return rc;
		}
	}

	return handle_count;
   234d8:	4628      	mov	r0, r5
}
   234da:	b003      	add	sp, #12
   234dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		device_handle_t dh = handles[i];
   234e0:	f939 4015 	ldrsh.w	r4, [r9, r5, lsl #1]
	if ((dev_handle > 0) && ((size_t)dev_handle <= numdev)) {
   234e4:	2c00      	cmp	r4, #0
   234e6:	dd0b      	ble.n	23500 <device_visitor+0x50>
   234e8:	45a0      	cmp	r8, r4
   234ea:	d309      	bcc.n	23500 <device_visitor+0x50>
		dev = &__device_start[dev_handle - 1];
   234ec:	3c01      	subs	r4, #1
   234ee:	fb0b 6004 	mla	r0, fp, r4, r6
		int rc = visitor_cb(rdev, context);
   234f2:	9101      	str	r1, [sp, #4]
   234f4:	47d0      	blx	sl
		if (rc < 0) {
   234f6:	2800      	cmp	r0, #0
   234f8:	dbef      	blt.n	234da <device_visitor+0x2a>
	for (size_t i = 0; i < handle_count; ++i) {
   234fa:	9901      	ldr	r1, [sp, #4]
   234fc:	3501      	adds	r5, #1
   234fe:	e7e9      	b.n	234d4 <device_visitor+0x24>
	const struct device *dev = NULL;
   23500:	2000      	movs	r0, #0
   23502:	e7f6      	b.n	234f2 <device_visitor+0x42>
   23504:	0002cfa4 	.word	0x0002cfa4
   23508:	0002d034 	.word	0x0002d034
   2350c:	aaaaaaab 	.word	0xaaaaaaab

00023510 <z_sys_init_run_level>:
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23510:	4b0e      	ldr	r3, [pc, #56]	; (2354c <z_sys_init_run_level+0x3c>)
{
   23512:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23514:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   23518:	3001      	adds	r0, #1
   2351a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   2351e:	42a6      	cmp	r6, r4
   23520:	d800      	bhi.n	23524 <z_sys_init_run_level+0x14>
}
   23522:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
   23524:	e9d4 3500 	ldrd	r3, r5, [r4]
   23528:	4628      	mov	r0, r5
   2352a:	4798      	blx	r3
		if (dev != NULL) {
   2352c:	b165      	cbz	r5, 23548 <z_sys_init_run_level+0x38>
			if (rc != 0) {
   2352e:	68eb      	ldr	r3, [r5, #12]
   23530:	b130      	cbz	r0, 23540 <z_sys_init_run_level+0x30>
				if (rc < 0) {
   23532:	2800      	cmp	r0, #0
   23534:	bfb8      	it	lt
   23536:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
   23538:	28ff      	cmp	r0, #255	; 0xff
   2353a:	bfa8      	it	ge
   2353c:	20ff      	movge	r0, #255	; 0xff
   2353e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
   23540:	785a      	ldrb	r2, [r3, #1]
   23542:	f042 0201 	orr.w	r2, r2, #1
   23546:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   23548:	3408      	adds	r4, #8
   2354a:	e7e8      	b.n	2351e <z_sys_init_run_level+0xe>
   2354c:	0002e508 	.word	0x0002e508

00023550 <z_device_get_all_static>:
	*devices = __device_start;
   23550:	4a03      	ldr	r2, [pc, #12]	; (23560 <z_device_get_all_static+0x10>)
	return __device_end - __device_start;
   23552:	4b04      	ldr	r3, [pc, #16]	; (23564 <z_device_get_all_static+0x14>)
	*devices = __device_start;
   23554:	6002      	str	r2, [r0, #0]
	return __device_end - __device_start;
   23556:	1a9b      	subs	r3, r3, r2
}
   23558:	4803      	ldr	r0, [pc, #12]	; (23568 <z_device_get_all_static+0x18>)
	return __device_end - __device_start;
   2355a:	10db      	asrs	r3, r3, #3
}
   2355c:	4358      	muls	r0, r3
   2355e:	4770      	bx	lr
   23560:	0002cfa4 	.word	0x0002cfa4
   23564:	0002d034 	.word	0x0002d034
   23568:	aaaaaaab 	.word	0xaaaaaaab

0002356c <z_impl_device_get_binding>:
{
   2356c:	b570      	push	{r4, r5, r6, lr}
	if ((name == NULL) || (name[0] == '\0')) {
   2356e:	4605      	mov	r5, r0
   23570:	b910      	cbnz	r0, 23578 <z_impl_device_get_binding+0xc>
		return NULL;
   23572:	2400      	movs	r4, #0
}
   23574:	4620      	mov	r0, r4
   23576:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
   23578:	7803      	ldrb	r3, [r0, #0]
   2357a:	2b00      	cmp	r3, #0
   2357c:	d0f9      	beq.n	23572 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
   2357e:	4a0f      	ldr	r2, [pc, #60]	; (235bc <z_impl_device_get_binding+0x50>)
   23580:	4c0f      	ldr	r4, [pc, #60]	; (235c0 <z_impl_device_get_binding+0x54>)
   23582:	4616      	mov	r6, r2
   23584:	4294      	cmp	r4, r2
   23586:	d108      	bne.n	2359a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
   23588:	4c0d      	ldr	r4, [pc, #52]	; (235c0 <z_impl_device_get_binding+0x54>)
   2358a:	42b4      	cmp	r4, r6
   2358c:	d0f1      	beq.n	23572 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   2358e:	4620      	mov	r0, r4
   23590:	f009 f930 	bl	2c7f4 <z_device_ready>
   23594:	b950      	cbnz	r0, 235ac <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   23596:	3418      	adds	r4, #24
   23598:	e7f7      	b.n	2358a <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
   2359a:	4620      	mov	r0, r4
   2359c:	f009 f92a 	bl	2c7f4 <z_device_ready>
   235a0:	b110      	cbz	r0, 235a8 <z_impl_device_get_binding+0x3c>
   235a2:	6823      	ldr	r3, [r4, #0]
   235a4:	42ab      	cmp	r3, r5
   235a6:	d0e5      	beq.n	23574 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
   235a8:	3418      	adds	r4, #24
   235aa:	e7eb      	b.n	23584 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   235ac:	6821      	ldr	r1, [r4, #0]
   235ae:	4628      	mov	r0, r5
   235b0:	f7e8 fef6 	bl	c3a0 <strcmp>
   235b4:	2800      	cmp	r0, #0
   235b6:	d1ee      	bne.n	23596 <z_impl_device_get_binding+0x2a>
   235b8:	e7dc      	b.n	23574 <z_impl_device_get_binding+0x8>
   235ba:	bf00      	nop
   235bc:	0002d034 	.word	0x0002d034
   235c0:	0002cfa4 	.word	0x0002cfa4

000235c4 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   235c4:	4b01      	ldr	r3, [pc, #4]	; (235cc <z_impl_z_errno+0x8>)
   235c6:	6898      	ldr	r0, [r3, #8]
}
   235c8:	30a0      	adds	r0, #160	; 0xa0
   235ca:	4770      	bx	lr
   235cc:	20001f98 	.word	0x20001f98

000235d0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   235d0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   235d4:	4605      	mov	r5, r0
   235d6:	460f      	mov	r7, r1
	__asm__ volatile(
   235d8:	f04f 0340 	mov.w	r3, #64	; 0x40
   235dc:	f3ef 8811 	mrs	r8, BASEPRI
   235e0:	f383 8812 	msr	BASEPRI_MAX, r3
   235e4:	f3bf 8f6f 	isb	sy
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   235e8:	4c33      	ldr	r4, [pc, #204]	; (236b8 <z_fatal_error+0xe8>)
	return z_impl_z_current_get();
   235ea:	f003 fa6b 	bl	26ac4 <z_impl_z_current_get>
   235ee:	6823      	ldr	r3, [r4, #0]
   235f0:	0759      	lsls	r1, r3, #29
   235f2:	4606      	mov	r6, r0
   235f4:	d05d      	beq.n	236b2 <z_fatal_error+0xe2>
   235f6:	4b31      	ldr	r3, [pc, #196]	; (236bc <z_fatal_error+0xec>)
   235f8:	4831      	ldr	r0, [pc, #196]	; (236c0 <z_fatal_error+0xf0>)
   235fa:	1ae3      	subs	r3, r4, r3
   235fc:	2d04      	cmp	r5, #4
   235fe:	ea4f 0393 	mov.w	r3, r3, lsr #2
   23602:	bf96      	itet	ls
   23604:	4a2f      	ldrls	r2, [pc, #188]	; (236c4 <z_fatal_error+0xf4>)
   23606:	4a30      	ldrhi	r2, [pc, #192]	; (236c8 <z_fatal_error+0xf8>)
   23608:	f852 2025 	ldrls.w	r2, [r2, r5, lsl #2]
   2360c:	019b      	lsls	r3, r3, #6
   2360e:	f043 0301 	orr.w	r3, r3, #1
   23612:	f8ad 3000 	strh.w	r3, [sp]
   23616:	4629      	mov	r1, r5
   23618:	2300      	movs	r3, #0
   2361a:	f005 fe9a 	bl	29352 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   2361e:	b17f      	cbz	r7, 23640 <z_fatal_error+0x70>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   23620:	69fb      	ldr	r3, [r7, #28]
   23622:	f3c3 0308 	ubfx	r3, r3, #0, #9
   23626:	b15b      	cbz	r3, 23640 <z_fatal_error+0x70>
		LOG_ERR("Fault during interrupt handling\n");
   23628:	6823      	ldr	r3, [r4, #0]
   2362a:	075a      	lsls	r2, r3, #29
   2362c:	d01b      	beq.n	23666 <z_fatal_error+0x96>
   2362e:	4923      	ldr	r1, [pc, #140]	; (236bc <z_fatal_error+0xec>)
   23630:	4826      	ldr	r0, [pc, #152]	; (236cc <z_fatal_error+0xfc>)
   23632:	1a61      	subs	r1, r4, r1
   23634:	0889      	lsrs	r1, r1, #2
   23636:	0189      	lsls	r1, r1, #6
   23638:	f041 0101 	orr.w	r1, r1, #1
   2363c:	f005 fe4f 	bl	292de <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   23640:	6823      	ldr	r3, [r4, #0]
   23642:	075b      	lsls	r3, r3, #29
   23644:	d00f      	beq.n	23666 <z_fatal_error+0x96>
   23646:	4b1d      	ldr	r3, [pc, #116]	; (236bc <z_fatal_error+0xec>)
   23648:	1ae4      	subs	r4, r4, r3
   2364a:	08a4      	lsrs	r4, r4, #2
   2364c:	01a4      	lsls	r4, r4, #6
   2364e:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   23652:	bb2e      	cbnz	r6, 236a0 <z_fatal_error+0xd0>
		thread_name = "unknown";
   23654:	481e      	ldr	r0, [pc, #120]	; (236d0 <z_fatal_error+0x100>)
   23656:	f7ee f86b 	bl	11730 <z_log_strdup>
	LOG_ERR("Current thread: %p (%s)", thread,
   2365a:	4623      	mov	r3, r4
   2365c:	4602      	mov	r2, r0
   2365e:	4631      	mov	r1, r6
   23660:	481c      	ldr	r0, [pc, #112]	; (236d4 <z_fatal_error+0x104>)
   23662:	f005 fe5d 	bl	29320 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   23666:	4639      	mov	r1, r7
   23668:	4628      	mov	r0, r5
   2366a:	f7fe fb0b 	bl	21c84 <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
   2366e:	2d04      	cmp	r5, #4
   23670:	d10c      	bne.n	2368c <z_fatal_error+0xbc>
   23672:	4919      	ldr	r1, [pc, #100]	; (236d8 <z_fatal_error+0x108>)
   23674:	4a19      	ldr	r2, [pc, #100]	; (236dc <z_fatal_error+0x10c>)
   23676:	481a      	ldr	r0, [pc, #104]	; (236e0 <z_fatal_error+0x110>)
   23678:	238f      	movs	r3, #143	; 0x8f
   2367a:	f005 fa8e 	bl	28b9a <printk>
   2367e:	4819      	ldr	r0, [pc, #100]	; (236e4 <z_fatal_error+0x114>)
   23680:	f005 fa8b 	bl	28b9a <printk>
   23684:	4815      	ldr	r0, [pc, #84]	; (236dc <z_fatal_error+0x10c>)
   23686:	218f      	movs	r1, #143	; 0x8f
   23688:	f005 fcc8 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2368c:	f388 8811 	msr	BASEPRI, r8
   23690:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   23694:	4630      	mov	r0, r6
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
   23696:	b002      	add	sp, #8
   23698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2369c:	f7f3 b9aa 	b.w	169f4 <z_impl_k_thread_abort>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
   236a0:	4630      	mov	r0, r6
   236a2:	f009 f8f3 	bl	2c88c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
   236a6:	2800      	cmp	r0, #0
   236a8:	d0d4      	beq.n	23654 <z_fatal_error+0x84>
   236aa:	7803      	ldrb	r3, [r0, #0]
   236ac:	2b00      	cmp	r3, #0
   236ae:	d0d1      	beq.n	23654 <z_fatal_error+0x84>
   236b0:	e7d1      	b.n	23656 <z_fatal_error+0x86>
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   236b2:	2f00      	cmp	r7, #0
   236b4:	d1b4      	bne.n	23620 <z_fatal_error+0x50>
   236b6:	e7d6      	b.n	23666 <z_fatal_error+0x96>
   236b8:	20000784 	.word	0x20000784
   236bc:	20000740 	.word	0x20000740
   236c0:	00033b1e 	.word	0x00033b1e
   236c4:	0002e520 	.word	0x0002e520
   236c8:	00033b08 	.word	0x00033b08
   236cc:	00033b46 	.word	0x00033b46
   236d0:	00033b16 	.word	0x00033b16
   236d4:	00033b67 	.word	0x00033b67
   236d8:	00033ba1 	.word	0x00033ba1
   236dc:	00033b7f 	.word	0x00033b7f
   236e0:	0002e93e 	.word	0x0002e93e
   236e4:	00033bbe 	.word	0x00033bbe

000236e8 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
   236e8:	b570      	push	{r4, r5, r6, lr}
	struct k_thread *thread = &z_idle_threads[i];
   236ea:	4b15      	ldr	r3, [pc, #84]	; (23740 <init_idle_thread+0x58>)
	k_thread_stack_t *stack = z_idle_stacks[i];

#ifdef CONFIG_THREAD_NAME
	char tname[8];

	snprintk(tname, 8, "idle %02d", i);
   236ec:	4a15      	ldr	r2, [pc, #84]	; (23744 <init_idle_thread+0x5c>)
{
   236ee:	b088      	sub	sp, #32
	snprintk(tname, 8, "idle %02d", i);
   236f0:	ae06      	add	r6, sp, #24
	struct k_thread *thread = &z_idle_threads[i];
   236f2:	25c0      	movs	r5, #192	; 0xc0
   236f4:	fb05 3500 	mla	r5, r5, r0, r3
{
   236f8:	4604      	mov	r4, r0
	snprintk(tname, 8, "idle %02d", i);
   236fa:	4603      	mov	r3, r0
   236fc:	2108      	movs	r1, #8
   236fe:	4630      	mov	r0, r6
   23700:	f005 fa58 	bl	28bb4 <snprintk>
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
   23704:	230f      	movs	r3, #15
   23706:	2201      	movs	r2, #1
   23708:	e9cd 3203 	strd	r3, r2, [sp, #12]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   2370c:	4a0e      	ldr	r2, [pc, #56]	; (23748 <init_idle_thread+0x60>)
	z_setup_new_thread(thread, stack,
   2370e:	490f      	ldr	r1, [pc, #60]	; (2374c <init_idle_thread+0x64>)
   23710:	9605      	str	r6, [sp, #20]
   23712:	2300      	movs	r3, #0
   23714:	e9cd 3301 	strd	r3, r3, [sp, #4]
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
   23718:	231c      	movs	r3, #28
   2371a:	fb03 2304 	mla	r3, r3, r4, r2
	z_setup_new_thread(thread, stack,
   2371e:	f44f 70b0 	mov.w	r0, #352	; 0x160
   23722:	9300      	str	r3, [sp, #0]
   23724:	fb00 1104 	mla	r1, r0, r4, r1
   23728:	4b09      	ldr	r3, [pc, #36]	; (23750 <init_idle_thread+0x68>)
   2372a:	f44f 72a0 	mov.w	r2, #320	; 0x140
   2372e:	4628      	mov	r0, r5
   23730:	f000 fc12 	bl	23f58 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   23734:	7b6b      	ldrb	r3, [r5, #13]
   23736:	f023 0304 	bic.w	r3, r3, #4
   2373a:	736b      	strb	r3, [r5, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
   2373c:	b008      	add	sp, #32
   2373e:	bd70      	pop	{r4, r5, r6, pc}
   23740:	20001fd8 	.word	0x20001fd8
   23744:	00033c3d 	.word	0x00033c3d
   23748:	20001f98 	.word	0x20001f98
   2374c:	200058e0 	.word	0x200058e0
   23750:	000242e1 	.word	0x000242e1

00023754 <bg_thread_main>:
{
   23754:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
   23756:	4b0a      	ldr	r3, [pc, #40]	; (23780 <bg_thread_main+0x2c>)
   23758:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2375a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   2375c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2375e:	f7ff fed7 	bl	23510 <z_sys_init_run_level>
	boot_banner();
   23762:	f009 fa38 	bl	2cbd6 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   23766:	2003      	movs	r0, #3
   23768:	f7ff fed2 	bl	23510 <z_sys_init_run_level>
	z_init_static_threads();
   2376c:	f000 fd0a 	bl	24184 <z_init_static_threads>
	main();
   23770:	f7ec fcf8 	bl	10164 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   23774:	4a03      	ldr	r2, [pc, #12]	; (23784 <bg_thread_main+0x30>)
   23776:	7b13      	ldrb	r3, [r2, #12]
   23778:	f023 0301 	bic.w	r3, r3, #1
   2377c:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   2377e:	bd08      	pop	{r3, pc}
   23780:	200036e5 	.word	0x200036e5
   23784:	20002098 	.word	0x20002098

00023788 <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   23788:	4802      	ldr	r0, [pc, #8]	; (23794 <z_bss_zero+0xc>)
__ssp_bos_icheck3(memset, void *, int)
   2378a:	4a03      	ldr	r2, [pc, #12]	; (23798 <z_bss_zero+0x10>)
   2378c:	2100      	movs	r1, #0
   2378e:	1a12      	subs	r2, r2, r0
   23790:	f009 ba59 	b.w	2cc46 <memset>
   23794:	20000a28 	.word	0x20000a28
   23798:	200036ec 	.word	0x200036ec

0002379c <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
   2379c:	b580      	push	{r7, lr}
   2379e:	b0b6      	sub	sp, #216	; 0xd8
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   237a0:	f7ed feec 	bl	1157c <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   237a4:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 23888 <z_cstart+0xec>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   237a8:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   237ac:	4d30      	ldr	r5, [pc, #192]	; (23870 <z_cstart+0xd4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   237ae:	4e31      	ldr	r6, [pc, #196]	; (23874 <z_cstart+0xd8>)
   237b0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   237b2:	f8df 90d8 	ldr.w	r9, [pc, #216]	; 2388c <z_cstart+0xf0>
   237b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   237ba:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   237bc:	23e0      	movs	r3, #224	; 0xe0
   237be:	2400      	movs	r4, #0
   237c0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   237c4:	2320      	movs	r3, #32
   237c6:	77eb      	strb	r3, [r5, #31]
   237c8:	762c      	strb	r4, [r5, #24]
   237ca:	766c      	strb	r4, [r5, #25]
   237cc:	76ac      	strb	r4, [r5, #26]
   237ce:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   237d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   237d4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   237d8:	626b      	str	r3, [r5, #36]	; 0x24
   237da:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   237de:	f7f3 f877 	bl	168d0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   237e2:	f7f2 fb33 	bl	15e4c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   237e6:	f04f 33ff 	mov.w	r3, #4294967295
   237ea:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   237ec:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
   237ee:	f7f3 fa3d 	bl	16c6c <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
   237f2:	f7f3 f94d 	bl	16a90 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
   237f6:	f240 1301 	movw	r3, #257	; 0x101
   237fa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   237fe:	ab06      	add	r3, sp, #24
   23800:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
   23802:	e9cd 442f 	strd	r4, r4, [sp, #188]	; 0xbc
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
   23806:	f008 fff4 	bl	2c7f2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   2380a:	4620      	mov	r0, r4
   2380c:	f7ff fe80 	bl	23510 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   23810:	2001      	movs	r0, #1
   23812:	f7ff fe7d 	bl	23510 <z_sys_init_run_level>
	_kernel.ready_q.cache = &z_main_thread;
   23816:	4d18      	ldr	r5, [pc, #96]	; (23878 <z_cstart+0xdc>)
	__stack_chk_guard = stack_guard;
	__stack_chk_guard <<= 8;
#endif	/* CONFIG_STACK_CANARIES */

#ifdef CONFIG_TIMING_FUNCTIONS_NEED_AT_BOOT
	timing_init();
   23818:	f7fc fd82 	bl	20320 <timing_init>
	timing_start();
   2381c:	f7fc fd8c 	bl	20338 <timing_start>
	z_sched_init();
   23820:	f002 ffba 	bl	26798 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23824:	4b15      	ldr	r3, [pc, #84]	; (2387c <z_cstart+0xe0>)
   23826:	9305      	str	r3, [sp, #20]
   23828:	2301      	movs	r3, #1
   2382a:	4915      	ldr	r1, [pc, #84]	; (23880 <z_cstart+0xe4>)
   2382c:	9400      	str	r4, [sp, #0]
   2382e:	e9cd 4303 	strd	r4, r3, [sp, #12]
   23832:	f44f 6280 	mov.w	r2, #1024	; 0x400
   23836:	464b      	mov	r3, r9
   23838:	e9cd 4401 	strd	r4, r4, [sp, #4]
   2383c:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
   2383e:	6235      	str	r5, [r6, #32]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   23840:	f000 fb8a 	bl	23f58 <z_setup_new_thread>
   23844:	7b6a      	ldrb	r2, [r5, #13]
   23846:	f022 0204 	bic.w	r2, r2, #4
   2384a:	736a      	strb	r2, [r5, #13]
   2384c:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
   2384e:	4628      	mov	r0, r5
   23850:	f002 fba2 	bl	25f98 <z_ready_thread>
		init_idle_thread(i);
   23854:	4620      	mov	r0, r4
   23856:	f7ff ff47 	bl	236e8 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   2385a:	4b0a      	ldr	r3, [pc, #40]	; (23884 <z_cstart+0xe8>)
   2385c:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2385e:	464a      	mov	r2, r9
   23860:	4639      	mov	r1, r7
   23862:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
   23864:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
   23866:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   2386a:	f7f2 fc83 	bl	16174 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   2386e:	bf00      	nop
   23870:	e000ed00 	.word	0xe000ed00
   23874:	20001f98 	.word	0x20001f98
   23878:	20002098 	.word	0x20002098
   2387c:	00033c47 	.word	0x00033c47
   23880:	200054c0 	.word	0x200054c0
   23884:	20001fd8 	.word	0x20001fd8
   23888:	20006260 	.word	0x20006260
   2388c:	00023755 	.word	0x00023755

00023890 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
   23890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
   23892:	4d0f      	ldr	r5, [pc, #60]	; (238d0 <statics_init+0x40>)
   23894:	4c0f      	ldr	r4, [pc, #60]	; (238d4 <statics_init+0x44>)
   23896:	4e10      	ldr	r6, [pc, #64]	; (238d8 <statics_init+0x48>)
   23898:	462f      	mov	r7, r5
   2389a:	42ac      	cmp	r4, r5
   2389c:	d90c      	bls.n	238b8 <statics_init+0x28>
   2389e:	490f      	ldr	r1, [pc, #60]	; (238dc <statics_init+0x4c>)
   238a0:	480f      	ldr	r0, [pc, #60]	; (238e0 <statics_init+0x50>)
   238a2:	2318      	movs	r3, #24
   238a4:	4632      	mov	r2, r6
   238a6:	f005 f978 	bl	28b9a <printk>
   238aa:	480e      	ldr	r0, [pc, #56]	; (238e4 <statics_init+0x54>)
   238ac:	f005 f975 	bl	28b9a <printk>
   238b0:	2118      	movs	r1, #24
   238b2:	4630      	mov	r0, r6
   238b4:	f005 fbb2 	bl	2901c <assert_post_action>
   238b8:	42bc      	cmp	r4, r7
   238ba:	d301      	bcc.n	238c0 <statics_init+0x30>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
   238bc:	2000      	movs	r0, #0
   238be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   238c0:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   238c4:	4620      	mov	r0, r4
   238c6:	f008 ffb7 	bl	2c838 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
   238ca:	3418      	adds	r4, #24
   238cc:	e7e5      	b.n	2389a <statics_init+0xa>
   238ce:	bf00      	nop
   238d0:	20000808 	.word	0x20000808
   238d4:	20000808 	.word	0x20000808
   238d8:	00033c4f 	.word	0x00033c4f
   238dc:	00033c71 	.word	0x00033c71
   238e0:	0002e93e 	.word	0x0002e93e
   238e4:	000315b0 	.word	0x000315b0

000238e8 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   238e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   238ec:	b087      	sub	sp, #28
   238ee:	e9dd 8910 	ldrd	r8, r9, [sp, #64]	; 0x40
   238f2:	4606      	mov	r6, r0
   238f4:	468b      	mov	fp, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   238f6:	4640      	mov	r0, r8
   238f8:	4649      	mov	r1, r9
{
   238fa:	4692      	mov	sl, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   238fc:	f009 f8c2 	bl	2ca84 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23900:	f106 0414 	add.w	r4, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
   23904:	e9cd 0104 	strd	r0, r1, [sp, #16]
	__asm__ volatile(
   23908:	f04f 0340 	mov.w	r3, #64	; 0x40
   2390c:	f3ef 8511 	mrs	r5, BASEPRI
   23910:	f383 8812 	msr	BASEPRI_MAX, r3
   23914:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23918:	4620      	mov	r0, r4
   2391a:	f000 fa3d 	bl	23d98 <z_spin_lock_valid>
   2391e:	b968      	cbnz	r0, 2393c <k_heap_aligned_alloc+0x54>
   23920:	4a3f      	ldr	r2, [pc, #252]	; (23a20 <k_heap_aligned_alloc+0x138>)
   23922:	4940      	ldr	r1, [pc, #256]	; (23a24 <k_heap_aligned_alloc+0x13c>)
   23924:	4840      	ldr	r0, [pc, #256]	; (23a28 <k_heap_aligned_alloc+0x140>)
   23926:	2381      	movs	r3, #129	; 0x81
   23928:	f005 f937 	bl	28b9a <printk>
   2392c:	483f      	ldr	r0, [pc, #252]	; (23a2c <k_heap_aligned_alloc+0x144>)
   2392e:	4621      	mov	r1, r4
   23930:	f005 f933 	bl	28b9a <printk>
   23934:	483a      	ldr	r0, [pc, #232]	; (23a20 <k_heap_aligned_alloc+0x138>)
   23936:	2181      	movs	r1, #129	; 0x81
   23938:	f005 fb70 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   2393c:	4620      	mov	r0, r4
   2393e:	f000 fa49 	bl	23dd4 <z_spin_lock_set_owner>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   23942:	f3ef 8305 	mrs	r3, IPSR

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_heap, aligned_alloc, h, timeout);

	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   23946:	b17b      	cbz	r3, 23968 <k_heap_aligned_alloc+0x80>
   23948:	ea58 0309 	orrs.w	r3, r8, r9
   2394c:	d00c      	beq.n	23968 <k_heap_aligned_alloc+0x80>
   2394e:	4938      	ldr	r1, [pc, #224]	; (23a30 <k_heap_aligned_alloc+0x148>)
   23950:	4a38      	ldr	r2, [pc, #224]	; (23a34 <k_heap_aligned_alloc+0x14c>)
   23952:	4835      	ldr	r0, [pc, #212]	; (23a28 <k_heap_aligned_alloc+0x140>)
   23954:	2349      	movs	r3, #73	; 0x49
   23956:	f005 f920 	bl	28b9a <printk>
   2395a:	4837      	ldr	r0, [pc, #220]	; (23a38 <k_heap_aligned_alloc+0x150>)
   2395c:	f005 f91d 	bl	28b9a <printk>
   23960:	4834      	ldr	r0, [pc, #208]	; (23a34 <k_heap_aligned_alloc+0x14c>)
   23962:	2149      	movs	r1, #73	; 0x49
   23964:	f005 fb5a 	bl	2901c <assert_post_action>
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23968:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 23a20 <k_heap_aligned_alloc+0x138>
   2396c:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 23a24 <k_heap_aligned_alloc+0x13c>

	bool blocked_alloc = false;

	while (ret == NULL) {
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   23970:	4652      	mov	r2, sl
   23972:	4659      	mov	r1, fp
   23974:	4630      	mov	r0, r6
   23976:	f7ec fffd 	bl	10974 <sys_heap_aligned_alloc>
   2397a:	4607      	mov	r7, r0

		now = sys_clock_tick_get();
   2397c:	f003 fdc2 	bl	27504 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
   23980:	b1cf      	cbz	r7, 239b6 <k_heap_aligned_alloc+0xce>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23982:	4620      	mov	r0, r4
   23984:	f000 fa16 	bl	23db4 <z_spin_unlock_valid>
   23988:	b968      	cbnz	r0, 239a6 <k_heap_aligned_alloc+0xbe>
   2398a:	4a25      	ldr	r2, [pc, #148]	; (23a20 <k_heap_aligned_alloc+0x138>)
   2398c:	492b      	ldr	r1, [pc, #172]	; (23a3c <k_heap_aligned_alloc+0x154>)
   2398e:	4826      	ldr	r0, [pc, #152]	; (23a28 <k_heap_aligned_alloc+0x140>)
   23990:	23ac      	movs	r3, #172	; 0xac
   23992:	f005 f902 	bl	28b9a <printk>
   23996:	482a      	ldr	r0, [pc, #168]	; (23a40 <k_heap_aligned_alloc+0x158>)
   23998:	4621      	mov	r1, r4
   2399a:	f005 f8fe 	bl	28b9a <printk>
   2399e:	4820      	ldr	r0, [pc, #128]	; (23a20 <k_heap_aligned_alloc+0x138>)
   239a0:	21ac      	movs	r1, #172	; 0xac
   239a2:	f005 fb3b 	bl	2901c <assert_post_action>
	__asm__ volatile(
   239a6:	f385 8811 	msr	BASEPRI, r5
   239aa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
   239ae:	4638      	mov	r0, r7
   239b0:	b007      	add	sp, #28
   239b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
   239b6:	9b04      	ldr	r3, [sp, #16]
   239b8:	1a1b      	subs	r3, r3, r0
   239ba:	9302      	str	r3, [sp, #8]
   239bc:	9b05      	ldr	r3, [sp, #20]
   239be:	eb63 0301 	sbc.w	r3, r3, r1
   239c2:	9303      	str	r3, [sp, #12]
   239c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   239c8:	2a01      	cmp	r2, #1
   239ca:	f173 0300 	sbcs.w	r3, r3, #0
   239ce:	dbd8      	blt.n	23982 <k_heap_aligned_alloc+0x9a>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   239d0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   239d4:	4629      	mov	r1, r5
   239d6:	e9cd 2300 	strd	r2, r3, [sp]
   239da:	4620      	mov	r0, r4
   239dc:	f106 020c 	add.w	r2, r6, #12
   239e0:	f002 fc8c 	bl	262fc <z_pend_curr>
	__asm__ volatile(
   239e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   239e8:	f3ef 8511 	mrs	r5, BASEPRI
   239ec:	f383 8812 	msr	BASEPRI_MAX, r3
   239f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   239f4:	4620      	mov	r0, r4
   239f6:	f000 f9cf 	bl	23d98 <z_spin_lock_valid>
   239fa:	b968      	cbnz	r0, 23a18 <k_heap_aligned_alloc+0x130>
   239fc:	480a      	ldr	r0, [pc, #40]	; (23a28 <k_heap_aligned_alloc+0x140>)
   239fe:	2381      	movs	r3, #129	; 0x81
   23a00:	4642      	mov	r2, r8
   23a02:	4649      	mov	r1, r9
   23a04:	f005 f8c9 	bl	28b9a <printk>
   23a08:	4808      	ldr	r0, [pc, #32]	; (23a2c <k_heap_aligned_alloc+0x144>)
   23a0a:	4621      	mov	r1, r4
   23a0c:	f005 f8c5 	bl	28b9a <printk>
   23a10:	2181      	movs	r1, #129	; 0x81
   23a12:	4640      	mov	r0, r8
   23a14:	f005 fb02 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   23a18:	4620      	mov	r0, r4
   23a1a:	f000 f9db 	bl	23dd4 <z_spin_lock_set_owner>
	return k;
   23a1e:	e7a7      	b.n	23970 <k_heap_aligned_alloc+0x88>
   23a20:	0002e9fe 	.word	0x0002e9fe
   23a24:	0002ea50 	.word	0x0002ea50
   23a28:	0002e93e 	.word	0x0002e93e
   23a2c:	0002ea65 	.word	0x0002ea65
   23a30:	00033c87 	.word	0x00033c87
   23a34:	00033c4f 	.word	0x00033c4f
   23a38:	00033299 	.word	0x00033299
   23a3c:	0002ea24 	.word	0x0002ea24
   23a40:	0002ea3b 	.word	0x0002ea3b

00023a44 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
   23a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23a46:	4605      	mov	r5, r0
   23a48:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   23a4a:	f100 0414 	add.w	r4, r0, #20
   23a4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   23a52:	f3ef 8711 	mrs	r7, BASEPRI
   23a56:	f383 8812 	msr	BASEPRI_MAX, r3
   23a5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23a5e:	4620      	mov	r0, r4
   23a60:	f000 f99a 	bl	23d98 <z_spin_lock_valid>
   23a64:	b968      	cbnz	r0, 23a82 <k_heap_free+0x3e>
   23a66:	4a1b      	ldr	r2, [pc, #108]	; (23ad4 <k_heap_free+0x90>)
   23a68:	491b      	ldr	r1, [pc, #108]	; (23ad8 <k_heap_free+0x94>)
   23a6a:	481c      	ldr	r0, [pc, #112]	; (23adc <k_heap_free+0x98>)
   23a6c:	2381      	movs	r3, #129	; 0x81
   23a6e:	f005 f894 	bl	28b9a <printk>
   23a72:	481b      	ldr	r0, [pc, #108]	; (23ae0 <k_heap_free+0x9c>)
   23a74:	4621      	mov	r1, r4
   23a76:	f005 f890 	bl	28b9a <printk>
   23a7a:	4816      	ldr	r0, [pc, #88]	; (23ad4 <k_heap_free+0x90>)
   23a7c:	2181      	movs	r1, #129	; 0x81
   23a7e:	f005 facd 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   23a82:	4620      	mov	r0, r4
   23a84:	f000 f9a6 	bl	23dd4 <z_spin_lock_set_owner>

	sys_heap_free(&h->heap, mem);
   23a88:	4628      	mov	r0, r5
   23a8a:	4631      	mov	r1, r6
   23a8c:	f7ec ff26 	bl	108dc <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
   23a90:	f105 000c 	add.w	r0, r5, #12
   23a94:	f008 ffdc 	bl	2ca50 <z_unpend_all>
   23a98:	b128      	cbz	r0, 23aa6 <k_heap_free+0x62>
		z_reschedule(&h->lock, key);
   23a9a:	4639      	mov	r1, r7
   23a9c:	4620      	mov	r0, r4
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   23a9e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		z_reschedule(&h->lock, key);
   23aa2:	f001 bfd9 	b.w	25a58 <z_reschedule>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23aa6:	4620      	mov	r0, r4
   23aa8:	f000 f984 	bl	23db4 <z_spin_unlock_valid>
   23aac:	b968      	cbnz	r0, 23aca <k_heap_free+0x86>
   23aae:	4a09      	ldr	r2, [pc, #36]	; (23ad4 <k_heap_free+0x90>)
   23ab0:	490c      	ldr	r1, [pc, #48]	; (23ae4 <k_heap_free+0xa0>)
   23ab2:	480a      	ldr	r0, [pc, #40]	; (23adc <k_heap_free+0x98>)
   23ab4:	23ac      	movs	r3, #172	; 0xac
   23ab6:	f005 f870 	bl	28b9a <printk>
   23aba:	480b      	ldr	r0, [pc, #44]	; (23ae8 <k_heap_free+0xa4>)
   23abc:	4621      	mov	r1, r4
   23abe:	f005 f86c 	bl	28b9a <printk>
   23ac2:	4804      	ldr	r0, [pc, #16]	; (23ad4 <k_heap_free+0x90>)
   23ac4:	21ac      	movs	r1, #172	; 0xac
   23ac6:	f005 faa9 	bl	2901c <assert_post_action>
	__asm__ volatile(
   23aca:	f387 8811 	msr	BASEPRI, r7
   23ace:	f3bf 8f6f 	isb	sy
}
   23ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   23ad4:	0002e9fe 	.word	0x0002e9fe
   23ad8:	0002ea50 	.word	0x0002ea50
   23adc:	0002e93e 	.word	0x0002e93e
   23ae0:	0002ea65 	.word	0x0002ea65
   23ae4:	0002ea24 	.word	0x0002ea24
   23ae8:	0002ea3b 	.word	0x0002ea3b

00023aec <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   23aec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23af0:	4d16      	ldr	r5, [pc, #88]	; (23b4c <init_mem_slab_module+0x60>)
   23af2:	4c17      	ldr	r4, [pc, #92]	; (23b50 <init_mem_slab_module+0x64>)
   23af4:	4e17      	ldr	r6, [pc, #92]	; (23b54 <init_mem_slab_module+0x68>)
   23af6:	46a8      	mov	r8, r5
   23af8:	42ac      	cmp	r4, r5
   23afa:	d90c      	bls.n	23b16 <init_mem_slab_module+0x2a>
   23afc:	4916      	ldr	r1, [pc, #88]	; (23b58 <init_mem_slab_module+0x6c>)
   23afe:	4817      	ldr	r0, [pc, #92]	; (23b5c <init_mem_slab_module+0x70>)
   23b00:	233c      	movs	r3, #60	; 0x3c
   23b02:	4632      	mov	r2, r6
   23b04:	f005 f849 	bl	28b9a <printk>
   23b08:	4815      	ldr	r0, [pc, #84]	; (23b60 <init_mem_slab_module+0x74>)
   23b0a:	f005 f846 	bl	28b9a <printk>
   23b0e:	213c      	movs	r1, #60	; 0x3c
   23b10:	4630      	mov	r0, r6
   23b12:	f005 fa83 	bl	2901c <assert_post_action>
   23b16:	4544      	cmp	r4, r8
   23b18:	d302      	bcc.n	23b20 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
   23b1a:	2000      	movs	r0, #0
	return rc;
}
   23b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   23b20:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
   23b24:	ea41 0302 	orr.w	r3, r1, r2
   23b28:	f013 0303 	ands.w	r3, r3, #3
   23b2c:	d10b      	bne.n	23b46 <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
   23b2e:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
   23b30:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   23b32:	4283      	cmp	r3, r0
   23b34:	d101      	bne.n	23b3a <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   23b36:	3420      	adds	r4, #32
   23b38:	e7de      	b.n	23af8 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
   23b3a:	69a7      	ldr	r7, [r4, #24]
   23b3c:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   23b3e:	3301      	adds	r3, #1
		slab->free_list = p;
   23b40:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
   23b42:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   23b44:	e7f5      	b.n	23b32 <init_mem_slab_module+0x46>
		return -EINVAL;
   23b46:	f06f 0015 	mvn.w	r0, #21
	return rc;
   23b4a:	e7e7      	b.n	23b1c <init_mem_slab_module+0x30>
   23b4c:	20000808 	.word	0x20000808
   23b50:	200007a8 	.word	0x200007a8
   23b54:	00033ccc 	.word	0x00033ccc
   23b58:	00033cf1 	.word	0x00033cf1
   23b5c:	0002e93e 	.word	0x0002e93e
   23b60:	000315b0 	.word	0x000315b0

00023b64 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   23b64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   23b68:	4604      	mov	r4, r0
   23b6a:	460e      	mov	r6, r1
   23b6c:	4690      	mov	r8, r2
   23b6e:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   23b70:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   23b74:	f04f 0340 	mov.w	r3, #64	; 0x40
   23b78:	f3ef 8711 	mrs	r7, BASEPRI
   23b7c:	f383 8812 	msr	BASEPRI_MAX, r3
   23b80:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23b84:	4628      	mov	r0, r5
   23b86:	f000 f907 	bl	23d98 <z_spin_lock_valid>
   23b8a:	b968      	cbnz	r0, 23ba8 <k_mem_slab_alloc+0x44>
   23b8c:	4a24      	ldr	r2, [pc, #144]	; (23c20 <k_mem_slab_alloc+0xbc>)
   23b8e:	4925      	ldr	r1, [pc, #148]	; (23c24 <k_mem_slab_alloc+0xc0>)
   23b90:	4825      	ldr	r0, [pc, #148]	; (23c28 <k_mem_slab_alloc+0xc4>)
   23b92:	2381      	movs	r3, #129	; 0x81
   23b94:	f005 f801 	bl	28b9a <printk>
   23b98:	4824      	ldr	r0, [pc, #144]	; (23c2c <k_mem_slab_alloc+0xc8>)
   23b9a:	4629      	mov	r1, r5
   23b9c:	f004 fffd 	bl	28b9a <printk>
   23ba0:	481f      	ldr	r0, [pc, #124]	; (23c20 <k_mem_slab_alloc+0xbc>)
   23ba2:	2181      	movs	r1, #129	; 0x81
   23ba4:	f005 fa3a 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   23ba8:	4628      	mov	r0, r5
   23baa:	f000 f913 	bl	23dd4 <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
   23bae:	69a3      	ldr	r3, [r4, #24]
   23bb0:	b1eb      	cbz	r3, 23bee <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
   23bb2:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
   23bb4:	681b      	ldr	r3, [r3, #0]
   23bb6:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
   23bb8:	69e3      	ldr	r3, [r4, #28]
   23bba:	3301      	adds	r3, #1
   23bbc:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   23bbe:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23bc0:	4628      	mov	r0, r5
   23bc2:	f000 f8f7 	bl	23db4 <z_spin_unlock_valid>
   23bc6:	b968      	cbnz	r0, 23be4 <k_mem_slab_alloc+0x80>
   23bc8:	4a15      	ldr	r2, [pc, #84]	; (23c20 <k_mem_slab_alloc+0xbc>)
   23bca:	4919      	ldr	r1, [pc, #100]	; (23c30 <k_mem_slab_alloc+0xcc>)
   23bcc:	4816      	ldr	r0, [pc, #88]	; (23c28 <k_mem_slab_alloc+0xc4>)
   23bce:	23ac      	movs	r3, #172	; 0xac
   23bd0:	f004 ffe3 	bl	28b9a <printk>
   23bd4:	4817      	ldr	r0, [pc, #92]	; (23c34 <k_mem_slab_alloc+0xd0>)
   23bd6:	4629      	mov	r1, r5
   23bd8:	f004 ffdf 	bl	28b9a <printk>
   23bdc:	4810      	ldr	r0, [pc, #64]	; (23c20 <k_mem_slab_alloc+0xbc>)
   23bde:	21ac      	movs	r1, #172	; 0xac
   23be0:	f005 fa1c 	bl	2901c <assert_post_action>
	__asm__ volatile(
   23be4:	f387 8811 	msr	BASEPRI, r7
   23be8:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
   23bec:	e013      	b.n	23c16 <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
   23bee:	ea58 0209 	orrs.w	r2, r8, r9
   23bf2:	d103      	bne.n	23bfc <k_mem_slab_alloc+0x98>
		*mem = NULL;
   23bf4:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
   23bf6:	f06f 040b 	mvn.w	r4, #11
   23bfa:	e7e1      	b.n	23bc0 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
   23bfc:	4622      	mov	r2, r4
   23bfe:	e9cd 8900 	strd	r8, r9, [sp]
   23c02:	4639      	mov	r1, r7
   23c04:	4628      	mov	r0, r5
   23c06:	f002 fb79 	bl	262fc <z_pend_curr>
		if (result == 0) {
   23c0a:	4604      	mov	r4, r0
   23c0c:	b918      	cbnz	r0, 23c16 <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
   23c0e:	4b0a      	ldr	r3, [pc, #40]	; (23c38 <k_mem_slab_alloc+0xd4>)
   23c10:	689b      	ldr	r3, [r3, #8]
   23c12:	695b      	ldr	r3, [r3, #20]
   23c14:	6033      	str	r3, [r6, #0]
}
   23c16:	4620      	mov	r0, r4
   23c18:	b003      	add	sp, #12
   23c1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23c1e:	bf00      	nop
   23c20:	0002e9fe 	.word	0x0002e9fe
   23c24:	0002ea50 	.word	0x0002ea50
   23c28:	0002e93e 	.word	0x0002e93e
   23c2c:	0002ea65 	.word	0x0002ea65
   23c30:	0002ea24 	.word	0x0002ea24
   23c34:	0002ea3b 	.word	0x0002ea3b
   23c38:	20001f98 	.word	0x20001f98

00023c3c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   23c3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23c40:	4604      	mov	r4, r0
   23c42:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
   23c44:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   23c48:	f04f 0340 	mov.w	r3, #64	; 0x40
   23c4c:	f3ef 8711 	mrs	r7, BASEPRI
   23c50:	f383 8812 	msr	BASEPRI_MAX, r3
   23c54:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23c58:	4628      	mov	r0, r5
   23c5a:	f000 f89d 	bl	23d98 <z_spin_lock_valid>
   23c5e:	b968      	cbnz	r0, 23c7c <k_mem_slab_free+0x40>
   23c60:	4a22      	ldr	r2, [pc, #136]	; (23cec <k_mem_slab_free+0xb0>)
   23c62:	4923      	ldr	r1, [pc, #140]	; (23cf0 <k_mem_slab_free+0xb4>)
   23c64:	4823      	ldr	r0, [pc, #140]	; (23cf4 <k_mem_slab_free+0xb8>)
   23c66:	2381      	movs	r3, #129	; 0x81
   23c68:	f004 ff97 	bl	28b9a <printk>
   23c6c:	4822      	ldr	r0, [pc, #136]	; (23cf8 <k_mem_slab_free+0xbc>)
   23c6e:	4629      	mov	r1, r5
   23c70:	f004 ff93 	bl	28b9a <printk>
   23c74:	481d      	ldr	r0, [pc, #116]	; (23cec <k_mem_slab_free+0xb0>)
   23c76:	2181      	movs	r1, #129	; 0x81
   23c78:	f005 f9d0 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   23c7c:	4628      	mov	r0, r5
   23c7e:	f000 f8a9 	bl	23dd4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
   23c82:	f8d4 8018 	ldr.w	r8, [r4, #24]
   23c86:	f1b8 0f00 	cmp.w	r8, #0
   23c8a:	d10f      	bne.n	23cac <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   23c8c:	4620      	mov	r0, r4
   23c8e:	f002 fd33 	bl	266f8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   23c92:	b158      	cbz	r0, 23cac <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   23c94:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   23c96:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   23c98:	f8c0 80b8 	str.w	r8, [r0, #184]	; 0xb8
			z_ready_thread(pending_thread);
   23c9c:	f002 f97c 	bl	25f98 <z_ready_thread>
			z_reschedule(&slab->lock, key);
   23ca0:	4639      	mov	r1, r7
   23ca2:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
   23ca4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
   23ca8:	f001 bed6 	b.w	25a58 <z_reschedule>
	**(char ***) mem = slab->free_list;
   23cac:	6833      	ldr	r3, [r6, #0]
   23cae:	69a2      	ldr	r2, [r4, #24]
   23cb0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   23cb2:	6833      	ldr	r3, [r6, #0]
   23cb4:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
   23cb6:	69e3      	ldr	r3, [r4, #28]
   23cb8:	3b01      	subs	r3, #1
   23cba:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23cbc:	4628      	mov	r0, r5
   23cbe:	f000 f879 	bl	23db4 <z_spin_unlock_valid>
   23cc2:	b968      	cbnz	r0, 23ce0 <k_mem_slab_free+0xa4>
   23cc4:	4a09      	ldr	r2, [pc, #36]	; (23cec <k_mem_slab_free+0xb0>)
   23cc6:	490d      	ldr	r1, [pc, #52]	; (23cfc <k_mem_slab_free+0xc0>)
   23cc8:	480a      	ldr	r0, [pc, #40]	; (23cf4 <k_mem_slab_free+0xb8>)
   23cca:	23ac      	movs	r3, #172	; 0xac
   23ccc:	f004 ff65 	bl	28b9a <printk>
   23cd0:	480b      	ldr	r0, [pc, #44]	; (23d00 <k_mem_slab_free+0xc4>)
   23cd2:	4629      	mov	r1, r5
   23cd4:	f004 ff61 	bl	28b9a <printk>
   23cd8:	4804      	ldr	r0, [pc, #16]	; (23cec <k_mem_slab_free+0xb0>)
   23cda:	21ac      	movs	r1, #172	; 0xac
   23cdc:	f005 f99e 	bl	2901c <assert_post_action>
	__asm__ volatile(
   23ce0:	f387 8811 	msr	BASEPRI, r7
   23ce4:	f3bf 8f6f 	isb	sy
}
   23ce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   23cec:	0002e9fe 	.word	0x0002e9fe
   23cf0:	0002ea50 	.word	0x0002ea50
   23cf4:	0002e93e 	.word	0x0002e93e
   23cf8:	0002ea65 	.word	0x0002ea65
   23cfc:	0002ea24 	.word	0x0002ea24
   23d00:	0002ea3b 	.word	0x0002ea3b

00023d04 <z_impl_k_thread_name_set>:
	k_spin_unlock(&z_thread_monitor_lock, key);
}
#endif

int z_impl_k_thread_name_set(struct k_thread *thread, const char *value)
{
   23d04:	b510      	push	{r4, lr}
#ifdef CONFIG_THREAD_NAME
	if (thread == NULL) {
   23d06:	4604      	mov	r4, r0
   23d08:	b908      	cbnz	r0, 23d0e <z_impl_k_thread_name_set+0xa>
		thread = _current;
   23d0a:	4b05      	ldr	r3, [pc, #20]	; (23d20 <z_impl_k_thread_name_set+0x1c>)
   23d0c:	689c      	ldr	r4, [r3, #8]
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   23d0e:	2220      	movs	r2, #32
   23d10:	f104 0080 	add.w	r0, r4, #128	; 0x80
   23d14:	f008 ffc6 	bl	2cca4 <strncpy>
	}

	strncpy(thread->name, value, CONFIG_THREAD_MAX_NAME_LEN);
	thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   23d18:	2000      	movs	r0, #0
   23d1a:	f884 009f 	strb.w	r0, [r4, #159]	; 0x9f

	SYS_PORT_TRACING_OBJ_FUNC(k_thread, name_set, thread, -ENOSYS);

	return -ENOSYS;
#endif /* CONFIG_THREAD_NAME */
}
   23d1e:	bd10      	pop	{r4, pc}
   23d20:	20001f98 	.word	0x20001f98

00023d24 <k_thread_state_str>:
#endif /* CONFIG_THREAD_NAME */
}

const char *k_thread_state_str(k_tid_t thread_id)
{
	switch (thread_id->base.thread_state) {
   23d24:	7b43      	ldrb	r3, [r0, #13]
   23d26:	2b10      	cmp	r3, #16
   23d28:	d80e      	bhi.n	23d48 <k_thread_state_str+0x24>
   23d2a:	2b10      	cmp	r3, #16
   23d2c:	d81c      	bhi.n	23d68 <k_thread_state_str+0x44>
   23d2e:	e8df f003 	tbb	[pc, r3]
   23d32:	091d      	.short	0x091d
   23d34:	1b151b13 	.word	0x1b151b13
   23d38:	1b171b1b 	.word	0x1b171b1b
   23d3c:	1b1b1b1b 	.word	0x1b1b1b1b
   23d40:	1b1b      	.short	0x1b1b
   23d42:	19          	.byte	0x19
   23d43:	00          	.byte	0x00
   23d44:	480b      	ldr	r0, [pc, #44]	; (23d74 <k_thread_state_str+0x50>)
   23d46:	4770      	bx	lr
   23d48:	2b20      	cmp	r3, #32
   23d4a:	d011      	beq.n	23d70 <k_thread_state_str+0x4c>
	case _THREAD_SUSPENDED:
		return "suspended";
	case _THREAD_ABORTING:
		return "aborting";
	case _THREAD_QUEUED:
		return "queued";
   23d4c:	4a0a      	ldr	r2, [pc, #40]	; (23d78 <k_thread_state_str+0x54>)
   23d4e:	480b      	ldr	r0, [pc, #44]	; (23d7c <k_thread_state_str+0x58>)
   23d50:	2b80      	cmp	r3, #128	; 0x80
   23d52:	bf08      	it	eq
   23d54:	4610      	moveq	r0, r2
   23d56:	4770      	bx	lr
		return "pending";
   23d58:	4809      	ldr	r0, [pc, #36]	; (23d80 <k_thread_state_str+0x5c>)
   23d5a:	4770      	bx	lr
		return "prestart";
   23d5c:	4809      	ldr	r0, [pc, #36]	; (23d84 <k_thread_state_str+0x60>)
   23d5e:	4770      	bx	lr
		return "dead";
   23d60:	4809      	ldr	r0, [pc, #36]	; (23d88 <k_thread_state_str+0x64>)
   23d62:	4770      	bx	lr
		return "suspended";
   23d64:	4809      	ldr	r0, [pc, #36]	; (23d8c <k_thread_state_str+0x68>)
   23d66:	4770      	bx	lr
	/* Add a break, some day when another case gets added at the end,
	 * this bit of defensive programming will be useful
	 */
		break;
	}
	return "unknown";
   23d68:	4804      	ldr	r0, [pc, #16]	; (23d7c <k_thread_state_str+0x58>)
   23d6a:	4770      	bx	lr
		return "";
   23d6c:	4808      	ldr	r0, [pc, #32]	; (23d90 <k_thread_state_str+0x6c>)
   23d6e:	4770      	bx	lr
		return "aborting";
   23d70:	4808      	ldr	r0, [pc, #32]	; (23d94 <k_thread_state_str+0x70>)
}
   23d72:	4770      	bx	lr
   23d74:	00033d2e 	.word	0x00033d2e
   23d78:	00033d3d 	.word	0x00033d3d
   23d7c:	00033b16 	.word	0x00033b16
   23d80:	00033d0e 	.word	0x00033d0e
   23d84:	00033d16 	.word	0x00033d16
   23d88:	00033d1f 	.word	0x00033d1f
   23d8c:	00033d24 	.word	0x00033d24
   23d90:	0003329b 	.word	0x0003329b
   23d94:	00033d34 	.word	0x00033d34

00023d98 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
   23d98:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
   23d9a:	b138      	cbz	r0, 23dac <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
   23d9c:	4b04      	ldr	r3, [pc, #16]	; (23db0 <z_spin_lock_valid+0x18>)
   23d9e:	7d1b      	ldrb	r3, [r3, #20]
   23da0:	f000 0003 	and.w	r0, r0, #3
   23da4:	1ac0      	subs	r0, r0, r3
   23da6:	bf18      	it	ne
   23da8:	2001      	movne	r0, #1
   23daa:	4770      	bx	lr
			return false;
		}
	}
	return true;
   23dac:	2001      	movs	r0, #1
}
   23dae:	4770      	bx	lr
   23db0:	20001f98 	.word	0x20001f98

00023db4 <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   23db4:	4906      	ldr	r1, [pc, #24]	; (23dd0 <z_spin_unlock_valid+0x1c>)
{
   23db6:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
   23db8:	688a      	ldr	r2, [r1, #8]
   23dba:	7d08      	ldrb	r0, [r1, #20]
   23dbc:	6819      	ldr	r1, [r3, #0]
   23dbe:	4302      	orrs	r2, r0
   23dc0:	4291      	cmp	r1, r2
   23dc2:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
   23dc6:	bf04      	itt	eq
   23dc8:	6018      	streq	r0, [r3, #0]
	return true;
   23dca:	2001      	moveq	r0, #1
}
   23dcc:	4770      	bx	lr
   23dce:	bf00      	nop
   23dd0:	20001f98 	.word	0x20001f98

00023dd4 <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
   23dd4:	4a02      	ldr	r2, [pc, #8]	; (23de0 <z_spin_lock_set_owner+0xc>)
   23dd6:	7d11      	ldrb	r1, [r2, #20]
   23dd8:	6893      	ldr	r3, [r2, #8]
   23dda:	430b      	orrs	r3, r1
   23ddc:	6003      	str	r3, [r0, #0]
}
   23dde:	4770      	bx	lr
   23de0:	20001f98 	.word	0x20001f98

00023de4 <k_thread_foreach>:
{
   23de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23de6:	460e      	mov	r6, r1
	__ASSERT(user_cb != NULL, "user_cb can not be NULL");
   23de8:	4605      	mov	r5, r0
   23dea:	b960      	cbnz	r0, 23e06 <k_thread_foreach+0x22>
   23dec:	4924      	ldr	r1, [pc, #144]	; (23e80 <k_thread_foreach+0x9c>)
   23dee:	4a25      	ldr	r2, [pc, #148]	; (23e84 <k_thread_foreach+0xa0>)
   23df0:	4825      	ldr	r0, [pc, #148]	; (23e88 <k_thread_foreach+0xa4>)
   23df2:	2333      	movs	r3, #51	; 0x33
   23df4:	f004 fed1 	bl	28b9a <printk>
   23df8:	4824      	ldr	r0, [pc, #144]	; (23e8c <k_thread_foreach+0xa8>)
   23dfa:	f004 fece 	bl	28b9a <printk>
   23dfe:	4821      	ldr	r0, [pc, #132]	; (23e84 <k_thread_foreach+0xa0>)
   23e00:	2133      	movs	r1, #51	; 0x33
   23e02:	f005 f90b 	bl	2901c <assert_post_action>
	__asm__ volatile(
   23e06:	f04f 0340 	mov.w	r3, #64	; 0x40
   23e0a:	f3ef 8711 	mrs	r7, BASEPRI
   23e0e:	f383 8812 	msr	BASEPRI_MAX, r3
   23e12:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23e16:	481e      	ldr	r0, [pc, #120]	; (23e90 <k_thread_foreach+0xac>)
   23e18:	f7ff ffbe 	bl	23d98 <z_spin_lock_valid>
   23e1c:	b968      	cbnz	r0, 23e3a <k_thread_foreach+0x56>
   23e1e:	4a1d      	ldr	r2, [pc, #116]	; (23e94 <k_thread_foreach+0xb0>)
   23e20:	491d      	ldr	r1, [pc, #116]	; (23e98 <k_thread_foreach+0xb4>)
   23e22:	4819      	ldr	r0, [pc, #100]	; (23e88 <k_thread_foreach+0xa4>)
   23e24:	2381      	movs	r3, #129	; 0x81
   23e26:	f004 feb8 	bl	28b9a <printk>
   23e2a:	4919      	ldr	r1, [pc, #100]	; (23e90 <k_thread_foreach+0xac>)
   23e2c:	481b      	ldr	r0, [pc, #108]	; (23e9c <k_thread_foreach+0xb8>)
   23e2e:	f004 feb4 	bl	28b9a <printk>
   23e32:	4818      	ldr	r0, [pc, #96]	; (23e94 <k_thread_foreach+0xb0>)
   23e34:	2181      	movs	r1, #129	; 0x81
   23e36:	f005 f8f1 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   23e3a:	4815      	ldr	r0, [pc, #84]	; (23e90 <k_thread_foreach+0xac>)
   23e3c:	f7ff ffca 	bl	23dd4 <z_spin_lock_set_owner>
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   23e40:	4b17      	ldr	r3, [pc, #92]	; (23ea0 <k_thread_foreach+0xbc>)
   23e42:	6adc      	ldr	r4, [r3, #44]	; 0x2c
   23e44:	b9b4      	cbnz	r4, 23e74 <k_thread_foreach+0x90>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23e46:	4812      	ldr	r0, [pc, #72]	; (23e90 <k_thread_foreach+0xac>)
   23e48:	f7ff ffb4 	bl	23db4 <z_spin_unlock_valid>
   23e4c:	b968      	cbnz	r0, 23e6a <k_thread_foreach+0x86>
   23e4e:	4a11      	ldr	r2, [pc, #68]	; (23e94 <k_thread_foreach+0xb0>)
   23e50:	4914      	ldr	r1, [pc, #80]	; (23ea4 <k_thread_foreach+0xc0>)
   23e52:	480d      	ldr	r0, [pc, #52]	; (23e88 <k_thread_foreach+0xa4>)
   23e54:	23ac      	movs	r3, #172	; 0xac
   23e56:	f004 fea0 	bl	28b9a <printk>
   23e5a:	490d      	ldr	r1, [pc, #52]	; (23e90 <k_thread_foreach+0xac>)
   23e5c:	4812      	ldr	r0, [pc, #72]	; (23ea8 <k_thread_foreach+0xc4>)
   23e5e:	f004 fe9c 	bl	28b9a <printk>
   23e62:	480c      	ldr	r0, [pc, #48]	; (23e94 <k_thread_foreach+0xb0>)
   23e64:	21ac      	movs	r1, #172	; 0xac
   23e66:	f005 f8d9 	bl	2901c <assert_post_action>
	__asm__ volatile(
   23e6a:	f387 8811 	msr	BASEPRI, r7
   23e6e:	f3bf 8f6f 	isb	sy
}
   23e72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		user_cb(thread, user_data);
   23e74:	4620      	mov	r0, r4
   23e76:	4631      	mov	r1, r6
   23e78:	47a8      	blx	r5
	for (thread = _kernel.threads; thread; thread = thread->next_thread) {
   23e7a:	6fe4      	ldr	r4, [r4, #124]	; 0x7c
   23e7c:	e7e2      	b.n	23e44 <k_thread_foreach+0x60>
   23e7e:	bf00      	nop
   23e80:	00033d67 	.word	0x00033d67
   23e84:	00033d44 	.word	0x00033d44
   23e88:	0002e93e 	.word	0x0002e93e
   23e8c:	00033d7e 	.word	0x00033d7e
   23e90:	200029e0 	.word	0x200029e0
   23e94:	0002e9fe 	.word	0x0002e9fe
   23e98:	0002ea50 	.word	0x0002ea50
   23e9c:	0002ea65 	.word	0x0002ea65
   23ea0:	20001f98 	.word	0x20001f98
   23ea4:	0002ea24 	.word	0x0002ea24
   23ea8:	0002ea3b 	.word	0x0002ea3b

00023eac <z_thread_monitor_exit>:
{
   23eac:	b538      	push	{r3, r4, r5, lr}
   23eae:	4604      	mov	r4, r0
	__asm__ volatile(
   23eb0:	f04f 0340 	mov.w	r3, #64	; 0x40
   23eb4:	f3ef 8511 	mrs	r5, BASEPRI
   23eb8:	f383 8812 	msr	BASEPRI_MAX, r3
   23ebc:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ec0:	481d      	ldr	r0, [pc, #116]	; (23f38 <z_thread_monitor_exit+0x8c>)
   23ec2:	f7ff ff69 	bl	23d98 <z_spin_lock_valid>
   23ec6:	b968      	cbnz	r0, 23ee4 <z_thread_monitor_exit+0x38>
   23ec8:	4a1c      	ldr	r2, [pc, #112]	; (23f3c <z_thread_monitor_exit+0x90>)
   23eca:	491d      	ldr	r1, [pc, #116]	; (23f40 <z_thread_monitor_exit+0x94>)
   23ecc:	481d      	ldr	r0, [pc, #116]	; (23f44 <z_thread_monitor_exit+0x98>)
   23ece:	2381      	movs	r3, #129	; 0x81
   23ed0:	f004 fe63 	bl	28b9a <printk>
   23ed4:	4918      	ldr	r1, [pc, #96]	; (23f38 <z_thread_monitor_exit+0x8c>)
   23ed6:	481c      	ldr	r0, [pc, #112]	; (23f48 <z_thread_monitor_exit+0x9c>)
   23ed8:	f004 fe5f 	bl	28b9a <printk>
   23edc:	4817      	ldr	r0, [pc, #92]	; (23f3c <z_thread_monitor_exit+0x90>)
   23ede:	2181      	movs	r1, #129	; 0x81
   23ee0:	f005 f89c 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   23ee4:	4814      	ldr	r0, [pc, #80]	; (23f38 <z_thread_monitor_exit+0x8c>)
   23ee6:	f7ff ff75 	bl	23dd4 <z_spin_lock_set_owner>
	if (thread == _kernel.threads) {
   23eea:	4a18      	ldr	r2, [pc, #96]	; (23f4c <z_thread_monitor_exit+0xa0>)
   23eec:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
   23eee:	42a3      	cmp	r3, r4
   23ef0:	d119      	bne.n	23f26 <z_thread_monitor_exit+0x7a>
		_kernel.threads = _kernel.threads->next_thread;
   23ef2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   23ef4:	62d3      	str	r3, [r2, #44]	; 0x2c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   23ef6:	4810      	ldr	r0, [pc, #64]	; (23f38 <z_thread_monitor_exit+0x8c>)
   23ef8:	f7ff ff5c 	bl	23db4 <z_spin_unlock_valid>
   23efc:	b968      	cbnz	r0, 23f1a <z_thread_monitor_exit+0x6e>
   23efe:	4a0f      	ldr	r2, [pc, #60]	; (23f3c <z_thread_monitor_exit+0x90>)
   23f00:	4913      	ldr	r1, [pc, #76]	; (23f50 <z_thread_monitor_exit+0xa4>)
   23f02:	4810      	ldr	r0, [pc, #64]	; (23f44 <z_thread_monitor_exit+0x98>)
   23f04:	23ac      	movs	r3, #172	; 0xac
   23f06:	f004 fe48 	bl	28b9a <printk>
   23f0a:	490b      	ldr	r1, [pc, #44]	; (23f38 <z_thread_monitor_exit+0x8c>)
   23f0c:	4811      	ldr	r0, [pc, #68]	; (23f54 <z_thread_monitor_exit+0xa8>)
   23f0e:	f004 fe44 	bl	28b9a <printk>
   23f12:	480a      	ldr	r0, [pc, #40]	; (23f3c <z_thread_monitor_exit+0x90>)
   23f14:	21ac      	movs	r1, #172	; 0xac
   23f16:	f005 f881 	bl	2901c <assert_post_action>
	__asm__ volatile(
   23f1a:	f385 8811 	msr	BASEPRI, r5
   23f1e:	f3bf 8f6f 	isb	sy
}
   23f22:	bd38      	pop	{r3, r4, r5, pc}
   23f24:	4613      	mov	r3, r2
		while ((prev_thread != NULL) &&
   23f26:	2b00      	cmp	r3, #0
   23f28:	d0e5      	beq.n	23ef6 <z_thread_monitor_exit+0x4a>
			(thread != prev_thread->next_thread)) {
   23f2a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
		while ((prev_thread != NULL) &&
   23f2c:	42a2      	cmp	r2, r4
   23f2e:	d1f9      	bne.n	23f24 <z_thread_monitor_exit+0x78>
			prev_thread->next_thread = thread->next_thread;
   23f30:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   23f32:	67da      	str	r2, [r3, #124]	; 0x7c
   23f34:	e7df      	b.n	23ef6 <z_thread_monitor_exit+0x4a>
   23f36:	bf00      	nop
   23f38:	200029e0 	.word	0x200029e0
   23f3c:	0002e9fe 	.word	0x0002e9fe
   23f40:	0002ea50 	.word	0x0002ea50
   23f44:	0002e93e 	.word	0x0002e93e
   23f48:	0002ea65 	.word	0x0002ea65
   23f4c:	20001f98 	.word	0x20001f98
   23f50:	0002ea24 	.word	0x0002ea24
   23f54:	0002ea3b 	.word	0x0002ea3b

00023f58 <z_setup_new_thread>:
{
   23f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23f5c:	b085      	sub	sp, #20
   23f5e:	4604      	mov	r4, r0
   23f60:	f8dd 9044 	ldr.w	r9, [sp, #68]	; 0x44
   23f64:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
   23f68:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
	Z_ASSERT_VALID_PRIO(prio, entry);
   23f6c:	f1b9 0f0f 	cmp.w	r9, #15
{
   23f70:	4688      	mov	r8, r1
   23f72:	4615      	mov	r5, r2
   23f74:	461f      	mov	r7, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
   23f76:	f040 8083 	bne.w	24080 <z_setup_new_thread+0x128>
   23f7a:	4b4f      	ldr	r3, [pc, #316]	; (240b8 <z_setup_new_thread+0x160>)
   23f7c:	429f      	cmp	r7, r3
   23f7e:	f040 8084 	bne.w	2408a <z_setup_new_thread+0x132>
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
   23f82:	f104 0360 	add.w	r3, r4, #96	; 0x60
	list->tail = (sys_dnode_t *)list;
   23f86:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
	thread_base->user_options = (uint8_t)options;
   23f8a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   23f8c:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23f8e:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   23f90:	2304      	movs	r3, #4
	thread_base->pended_on = NULL;
   23f92:	2600      	movs	r6, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23f94:	f025 0507 	bic.w	r5, r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
   23f98:	7363      	strb	r3, [r4, #13]

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   23f9a:	f108 0320 	add.w	r3, r8, #32
	thread_base->prio = priority;
   23f9e:	f884 900e 	strb.w	r9, [r4, #14]
__ssp_bos_icheck3(memset, void *, int)
   23fa2:	462a      	mov	r2, r5
	node->prev = NULL;
   23fa4:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
   23fa8:	60a6      	str	r6, [r4, #8]
	thread_base->sched_locked = 0U;
   23faa:	73e6      	strb	r6, [r4, #15]
   23fac:	21aa      	movs	r1, #170	; 0xaa
   23fae:	4618      	mov	r0, r3
   23fb0:	f008 fe49 	bl	2cc46 <memset>
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23fb4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   23fb6:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   23fb8:	f105 0920 	add.w	r9, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23fbc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	new_thread->stack_info.delta = delta;
   23fbe:	f8c4 60ac 	str.w	r6, [r4, #172]	; 0xac
	stack_ptr = (char *)stack + stack_obj_size;
   23fc2:	44c1      	add	r9, r8
	new_thread->stack_info.size = stack_buf_size;
   23fc4:	e9c4 0529 	strd	r0, r5, [r4, #164]	; 0xa4
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   23fc8:	e9cd b300 	strd	fp, r3, [sp]
   23fcc:	464a      	mov	r2, r9
   23fce:	463b      	mov	r3, r7
   23fd0:	4641      	mov	r1, r8
   23fd2:	4620      	mov	r0, r4
   23fd4:	f7f2 f896 	bl	16104 <arch_new_thread>
	new_thread->entry.parameter2 = p2;
   23fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23fda:	6763      	str	r3, [r4, #116]	; 0x74
	new_thread->entry.parameter3 = p3;
   23fdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
	new_thread->init_data = NULL;
   23fde:	65e6      	str	r6, [r4, #92]	; 0x5c
	new_thread->entry.parameter1 = p1;
   23fe0:	e9c4 7b1b 	strd	r7, fp, [r4, #108]	; 0x6c
	new_thread->entry.parameter3 = p3;
   23fe4:	67a3      	str	r3, [r4, #120]	; 0x78
	__asm__ volatile(
   23fe6:	f04f 0340 	mov.w	r3, #64	; 0x40
   23fea:	f3ef 8611 	mrs	r6, BASEPRI
   23fee:	f383 8812 	msr	BASEPRI_MAX, r3
   23ff2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   23ff6:	4831      	ldr	r0, [pc, #196]	; (240bc <z_setup_new_thread+0x164>)
   23ff8:	f7ff fece 	bl	23d98 <z_spin_lock_valid>
   23ffc:	b968      	cbnz	r0, 2401a <z_setup_new_thread+0xc2>
   23ffe:	4a30      	ldr	r2, [pc, #192]	; (240c0 <z_setup_new_thread+0x168>)
   24000:	4930      	ldr	r1, [pc, #192]	; (240c4 <z_setup_new_thread+0x16c>)
   24002:	4831      	ldr	r0, [pc, #196]	; (240c8 <z_setup_new_thread+0x170>)
   24004:	2381      	movs	r3, #129	; 0x81
   24006:	f004 fdc8 	bl	28b9a <printk>
   2400a:	492c      	ldr	r1, [pc, #176]	; (240bc <z_setup_new_thread+0x164>)
   2400c:	482f      	ldr	r0, [pc, #188]	; (240cc <z_setup_new_thread+0x174>)
   2400e:	f004 fdc4 	bl	28b9a <printk>
   24012:	482b      	ldr	r0, [pc, #172]	; (240c0 <z_setup_new_thread+0x168>)
   24014:	2181      	movs	r1, #129	; 0x81
   24016:	f005 f801 	bl	2901c <assert_post_action>
	new_thread->next_thread = _kernel.threads;
   2401a:	4d2d      	ldr	r5, [pc, #180]	; (240d0 <z_setup_new_thread+0x178>)
	z_spin_lock_set_owner(l);
   2401c:	4827      	ldr	r0, [pc, #156]	; (240bc <z_setup_new_thread+0x164>)
   2401e:	f7ff fed9 	bl	23dd4 <z_spin_lock_set_owner>
   24022:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24024:	4825      	ldr	r0, [pc, #148]	; (240bc <z_setup_new_thread+0x164>)
   24026:	67e3      	str	r3, [r4, #124]	; 0x7c
	_kernel.threads = new_thread;
   24028:	62ec      	str	r4, [r5, #44]	; 0x2c
   2402a:	f7ff fec3 	bl	23db4 <z_spin_unlock_valid>
   2402e:	b968      	cbnz	r0, 2404c <z_setup_new_thread+0xf4>
   24030:	4a23      	ldr	r2, [pc, #140]	; (240c0 <z_setup_new_thread+0x168>)
   24032:	4928      	ldr	r1, [pc, #160]	; (240d4 <z_setup_new_thread+0x17c>)
   24034:	4824      	ldr	r0, [pc, #144]	; (240c8 <z_setup_new_thread+0x170>)
   24036:	23ac      	movs	r3, #172	; 0xac
   24038:	f004 fdaf 	bl	28b9a <printk>
   2403c:	491f      	ldr	r1, [pc, #124]	; (240bc <z_setup_new_thread+0x164>)
   2403e:	4826      	ldr	r0, [pc, #152]	; (240d8 <z_setup_new_thread+0x180>)
   24040:	f004 fdab 	bl	28b9a <printk>
   24044:	481e      	ldr	r0, [pc, #120]	; (240c0 <z_setup_new_thread+0x168>)
   24046:	21ac      	movs	r1, #172	; 0xac
   24048:	f004 ffe8 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2404c:	f386 8811 	msr	BASEPRI, r6
   24050:	f3bf 8f6f 	isb	sy
	if (name != NULL) {
   24054:	f1ba 0f00 	cmp.w	sl, #0
   24058:	d02b      	beq.n	240b2 <z_setup_new_thread+0x15a>
__ssp_bos_icheck3_restrict(strncpy, char *, const char *)
   2405a:	221f      	movs	r2, #31
   2405c:	4651      	mov	r1, sl
   2405e:	f104 0080 	add.w	r0, r4, #128	; 0x80
   24062:	f008 fe1f 	bl	2cca4 <strncpy>
		new_thread->name[CONFIG_THREAD_MAX_NAME_LEN - 1] = '\0';
   24066:	2300      	movs	r3, #0
   24068:	f884 309f 	strb.w	r3, [r4, #159]	; 0x9f
	if (!_current) {
   2406c:	68ab      	ldr	r3, [r5, #8]
   2406e:	b10b      	cbz	r3, 24074 <z_setup_new_thread+0x11c>
	new_thread->resource_pool = _current->resource_pool;
   24070:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
	return stack_ptr;
   24074:	f8c4 30b0 	str.w	r3, [r4, #176]	; 0xb0
}
   24078:	4648      	mov	r0, r9
   2407a:	b005      	add	sp, #20
   2407c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
   24080:	f109 0310 	add.w	r3, r9, #16
   24084:	2b1e      	cmp	r3, #30
   24086:	f67f af7c 	bls.w	23f82 <z_setup_new_thread+0x2a>
   2408a:	4a14      	ldr	r2, [pc, #80]	; (240dc <z_setup_new_thread+0x184>)
   2408c:	4914      	ldr	r1, [pc, #80]	; (240e0 <z_setup_new_thread+0x188>)
   2408e:	480e      	ldr	r0, [pc, #56]	; (240c8 <z_setup_new_thread+0x170>)
   24090:	f240 13ff 	movw	r3, #511	; 0x1ff
   24094:	f004 fd81 	bl	28b9a <printk>
   24098:	4649      	mov	r1, r9
   2409a:	4812      	ldr	r0, [pc, #72]	; (240e4 <z_setup_new_thread+0x18c>)
   2409c:	f06f 030f 	mvn.w	r3, #15
   240a0:	220e      	movs	r2, #14
   240a2:	f004 fd7a 	bl	28b9a <printk>
   240a6:	480d      	ldr	r0, [pc, #52]	; (240dc <z_setup_new_thread+0x184>)
   240a8:	f240 11ff 	movw	r1, #511	; 0x1ff
   240ac:	f004 ffb6 	bl	2901c <assert_post_action>
   240b0:	e767      	b.n	23f82 <z_setup_new_thread+0x2a>
		new_thread->name[0] = '\0';
   240b2:	f884 a080 	strb.w	sl, [r4, #128]	; 0x80
   240b6:	e7d9      	b.n	2406c <z_setup_new_thread+0x114>
   240b8:	000242e1 	.word	0x000242e1
   240bc:	200029e0 	.word	0x200029e0
   240c0:	0002e9fe 	.word	0x0002e9fe
   240c4:	0002ea50 	.word	0x0002ea50
   240c8:	0002e93e 	.word	0x0002e93e
   240cc:	0002ea65 	.word	0x0002ea65
   240d0:	20001f98 	.word	0x20001f98
   240d4:	0002ea24 	.word	0x0002ea24
   240d8:	0002ea3b 	.word	0x0002ea3b
   240dc:	00033d44 	.word	0x00033d44
   240e0:	00033d98 	.word	0x00033d98
   240e4:	00033e18 	.word	0x00033e18

000240e8 <z_impl_k_thread_create>:
{
   240e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   240ec:	b087      	sub	sp, #28
   240ee:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
   240f2:	4604      	mov	r4, r0
   240f4:	460d      	mov	r5, r1
   240f6:	4690      	mov	r8, r2
   240f8:	4699      	mov	r9, r3
   240fa:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
   240fe:	b173      	cbz	r3, 2411e <z_impl_k_thread_create+0x36>
   24100:	491b      	ldr	r1, [pc, #108]	; (24170 <z_impl_k_thread_create+0x88>)
   24102:	4a1c      	ldr	r2, [pc, #112]	; (24174 <z_impl_k_thread_create+0x8c>)
   24104:	481c      	ldr	r0, [pc, #112]	; (24178 <z_impl_k_thread_create+0x90>)
   24106:	f44f 731a 	mov.w	r3, #616	; 0x268
   2410a:	f004 fd46 	bl	28b9a <printk>
   2410e:	481b      	ldr	r0, [pc, #108]	; (2417c <z_impl_k_thread_create+0x94>)
   24110:	f004 fd43 	bl	28b9a <printk>
   24114:	4817      	ldr	r0, [pc, #92]	; (24174 <z_impl_k_thread_create+0x8c>)
   24116:	f44f 711a 	mov.w	r1, #616	; 0x268
   2411a:	f004 ff7f 	bl	2901c <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   2411e:	2300      	movs	r3, #0
   24120:	9305      	str	r3, [sp, #20]
   24122:	9b12      	ldr	r3, [sp, #72]	; 0x48
   24124:	9304      	str	r3, [sp, #16]
   24126:	9b11      	ldr	r3, [sp, #68]	; 0x44
   24128:	9303      	str	r3, [sp, #12]
   2412a:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2412c:	9302      	str	r3, [sp, #8]
   2412e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   24130:	9301      	str	r3, [sp, #4]
   24132:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   24134:	9300      	str	r3, [sp, #0]
   24136:	4642      	mov	r2, r8
   24138:	464b      	mov	r3, r9
   2413a:	4629      	mov	r1, r5
   2413c:	4620      	mov	r0, r4
   2413e:	f7ff ff0b 	bl	23f58 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   24142:	1c7b      	adds	r3, r7, #1
   24144:	bf08      	it	eq
   24146:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   2414a:	d005      	beq.n	24158 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2414c:	ea56 0307 	orrs.w	r3, r6, r7
   24150:	d106      	bne.n	24160 <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
   24152:	4620      	mov	r0, r4
   24154:	f001 ff68 	bl	26028 <z_sched_start>
}
   24158:	4620      	mov	r0, r4
   2415a:	b007      	add	sp, #28
   2415c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   24160:	4907      	ldr	r1, [pc, #28]	; (24180 <z_impl_k_thread_create+0x98>)
   24162:	4632      	mov	r2, r6
   24164:	463b      	mov	r3, r7
   24166:	f104 0018 	add.w	r0, r4, #24
   2416a:	f002 ff45 	bl	26ff8 <z_add_timeout>
   2416e:	e7f3      	b.n	24158 <z_impl_k_thread_create+0x70>
   24170:	00033e49 	.word	0x00033e49
   24174:	00033d44 	.word	0x00033d44
   24178:	0002e93e 	.word	0x0002e93e
   2417c:	00033e5b 	.word	0x00033e5b
   24180:	000260d1 	.word	0x000260d1

00024184 <z_init_static_threads>:
{
   24184:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   24188:	4f3f      	ldr	r7, [pc, #252]	; (24288 <z_init_static_threads+0x104>)
   2418a:	4d40      	ldr	r5, [pc, #256]	; (2428c <z_init_static_threads+0x108>)
   2418c:	f8df 810c 	ldr.w	r8, [pc, #268]	; 2429c <z_init_static_threads+0x118>
{
   24190:	b086      	sub	sp, #24
   24192:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
   24194:	42bd      	cmp	r5, r7
   24196:	d90e      	bls.n	241b6 <z_init_static_threads+0x32>
   24198:	493d      	ldr	r1, [pc, #244]	; (24290 <z_init_static_threads+0x10c>)
   2419a:	483e      	ldr	r0, [pc, #248]	; (24294 <z_init_static_threads+0x110>)
   2419c:	f240 23cf 	movw	r3, #719	; 0x2cf
   241a0:	4642      	mov	r2, r8
   241a2:	f004 fcfa 	bl	28b9a <printk>
   241a6:	483c      	ldr	r0, [pc, #240]	; (24298 <z_init_static_threads+0x114>)
   241a8:	f004 fcf7 	bl	28b9a <printk>
   241ac:	f240 21cf 	movw	r1, #719	; 0x2cf
   241b0:	4640      	mov	r0, r8
   241b2:	f004 ff33 	bl	2901c <assert_post_action>
   241b6:	42b5      	cmp	r5, r6
   241b8:	f105 0430 	add.w	r4, r5, #48	; 0x30
   241bc:	d31f      	bcc.n	241fe <z_init_static_threads+0x7a>
	k_sched_lock();
   241be:	f001 fc8f 	bl	25ae0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   241c2:	4c32      	ldr	r4, [pc, #200]	; (2428c <z_init_static_threads+0x108>)
   241c4:	4d35      	ldr	r5, [pc, #212]	; (2429c <z_init_static_threads+0x118>)
   241c6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 24290 <z_init_static_threads+0x10c>
   241ca:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 24294 <z_init_static_threads+0x110>
   241ce:	42b4      	cmp	r4, r6
   241d0:	d90e      	bls.n	241f0 <z_init_static_threads+0x6c>
   241d2:	4641      	mov	r1, r8
   241d4:	f240 23ee 	movw	r3, #750	; 0x2ee
   241d8:	462a      	mov	r2, r5
   241da:	4648      	mov	r0, r9
   241dc:	f004 fcdd 	bl	28b9a <printk>
   241e0:	482d      	ldr	r0, [pc, #180]	; (24298 <z_init_static_threads+0x114>)
   241e2:	f004 fcda 	bl	28b9a <printk>
   241e6:	f240 21ee 	movw	r1, #750	; 0x2ee
   241ea:	4628      	mov	r0, r5
   241ec:	f004 ff16 	bl	2901c <assert_post_action>
   241f0:	42b4      	cmp	r4, r6
   241f2:	d321      	bcc.n	24238 <z_init_static_threads+0xb4>
}
   241f4:	b006      	add	sp, #24
   241f6:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
   241fa:	f002 b9b5 	b.w	26568 <k_sched_unlock>
		z_setup_new_thread(
   241fe:	f854 3c04 	ldr.w	r3, [r4, #-4]
   24202:	9305      	str	r3, [sp, #20]
   24204:	f854 3c10 	ldr.w	r3, [r4, #-16]
   24208:	9304      	str	r3, [sp, #16]
   2420a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   2420e:	9303      	str	r3, [sp, #12]
   24210:	f854 3c18 	ldr.w	r3, [r4, #-24]
   24214:	9302      	str	r3, [sp, #8]
   24216:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2421a:	9301      	str	r3, [sp, #4]
   2421c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   24220:	9300      	str	r3, [sp, #0]
   24222:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   24226:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   2422a:	f7ff fe95 	bl	23f58 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   2422e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   24232:	65dd      	str	r5, [r3, #92]	; 0x5c
   24234:	4625      	mov	r5, r4
   24236:	e7ad      	b.n	24194 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   24238:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2423a:	1c4b      	adds	r3, r1, #1
   2423c:	d014      	beq.n	24268 <z_init_static_threads+0xe4>
   2423e:	f240 32e7 	movw	r2, #999	; 0x3e7
   24242:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
   24244:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
   24248:	f44f 4000 	mov.w	r0, #32768	; 0x8000
   2424c:	4693      	mov	fp, r2
   2424e:	469c      	mov	ip, r3
   24250:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24254:	459c      	cmp	ip, r3
   24256:	bf08      	it	eq
   24258:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
   2425a:	6827      	ldr	r7, [r4, #0]
   2425c:	4658      	mov	r0, fp
   2425e:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   24260:	d104      	bne.n	2426c <z_init_static_threads+0xe8>
	z_sched_start(thread);
   24262:	4638      	mov	r0, r7
   24264:	f001 fee0 	bl	26028 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   24268:	3430      	adds	r4, #48	; 0x30
   2426a:	e7b0      	b.n	241ce <z_init_static_threads+0x4a>
   2426c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   24270:	2300      	movs	r3, #0
   24272:	f7db ffe5 	bl	240 <__aeabi_uldivmod>
   24276:	4602      	mov	r2, r0
   24278:	460b      	mov	r3, r1
   2427a:	f107 0018 	add.w	r0, r7, #24
   2427e:	4908      	ldr	r1, [pc, #32]	; (242a0 <z_init_static_threads+0x11c>)
   24280:	f002 feba 	bl	26ff8 <z_add_timeout>
   24284:	e7f0      	b.n	24268 <z_init_static_threads+0xe4>
   24286:	bf00      	nop
   24288:	200007a8 	.word	0x200007a8
   2428c:	200007a8 	.word	0x200007a8
   24290:	00033e80 	.word	0x00033e80
   24294:	0002e93e 	.word	0x0002e93e
   24298:	000315b0 	.word	0x000315b0
   2429c:	00033d44 	.word	0x00033d44
   242a0:	000260d1 	.word	0x000260d1

000242a4 <z_thread_mark_switched_in>:

#ifdef CONFIG_INSTRUMENT_THREAD_SWITCHING
void z_thread_mark_switched_in(void)
{
#if defined(CONFIG_SCHED_THREAD_USAGE) && !defined(CONFIG_USE_SWITCH)
	z_sched_usage_start(_current);
   242a4:	4b01      	ldr	r3, [pc, #4]	; (242ac <z_thread_mark_switched_in+0x8>)
   242a6:	6898      	ldr	r0, [r3, #8]
   242a8:	f002 bd44 	b.w	26d34 <z_sched_usage_start>
   242ac:	20001f98 	.word	0x20001f98

000242b0 <k_thread_runtime_stats_all_get>:

	return 0;
}

int k_thread_runtime_stats_all_get(k_thread_runtime_stats_t *stats)
{
   242b0:	b510      	push	{r4, lr}
	if (stats == NULL) {
   242b2:	b158      	cbz	r0, 242cc <k_thread_runtime_stats_all_get+0x1c>
	}

	*stats = (k_thread_runtime_stats_t) {};

#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	stats->execution_cycles = (_kernel.all_thread_usage
   242b4:	4a07      	ldr	r2, [pc, #28]	; (242d4 <k_thread_runtime_stats_all_get+0x24>)
				   + _kernel.idle_thread_usage);
   242b6:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
   242ba:	e9d2 420e 	ldrd	r4, r2, [r2, #56]	; 0x38
   242be:	191b      	adds	r3, r3, r4
   242c0:	eb41 0202 	adc.w	r2, r1, r2
	stats->execution_cycles = (_kernel.all_thread_usage
   242c4:	e9c0 3200 	strd	r3, r2, [r0]
#endif

	return 0;
   242c8:	2000      	movs	r0, #0
}
   242ca:	bd10      	pop	{r4, pc}
		return -EINVAL;
   242cc:	f06f 0015 	mvn.w	r0, #21
   242d0:	e7fb      	b.n	242ca <k_thread_runtime_stats_all_get+0x1a>
   242d2:	bf00      	nop
   242d4:	20001f98 	.word	0x20001f98

000242d8 <sys_kernel_version_get>:
 * @return kernel version
 */
uint32_t sys_kernel_version_get(void)
{
	return KERNELVERSION;
}
   242d8:	4800      	ldr	r0, [pc, #0]	; (242dc <sys_kernel_version_get+0x4>)
   242da:	4770      	bx	lr
   242dc:	02076300 	.word	0x02076300

000242e0 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
   242e0:	4c11      	ldr	r4, [pc, #68]	; (24328 <idle+0x48>)
   242e2:	68a2      	ldr	r2, [r4, #8]
   242e4:	f992 200e 	ldrsb.w	r2, [r2, #14]
   242e8:	2a00      	cmp	r2, #0
{
   242ea:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
   242ec:	da09      	bge.n	24302 <idle+0x22>
   242ee:	490f      	ldr	r1, [pc, #60]	; (2432c <idle+0x4c>)
   242f0:	480f      	ldr	r0, [pc, #60]	; (24330 <idle+0x50>)
   242f2:	4a10      	ldr	r2, [pc, #64]	; (24334 <idle+0x54>)
   242f4:	2327      	movs	r3, #39	; 0x27
   242f6:	f004 fc50 	bl	28b9a <printk>
   242fa:	480e      	ldr	r0, [pc, #56]	; (24334 <idle+0x54>)
   242fc:	2127      	movs	r1, #39	; 0x27
   242fe:	f004 fe8d 	bl	2901c <assert_post_action>
	__asm__ volatile(
   24302:	f04f 0240 	mov.w	r2, #64	; 0x40
   24306:	f3ef 8311 	mrs	r3, BASEPRI
   2430a:	f382 8812 	msr	BASEPRI_MAX, r2
   2430e:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
   24312:	f002 ff93 	bl	2723c <z_get_next_timeout_expiry>
   24316:	61e0      	str	r0, [r4, #28]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
   24318:	f7f1 fa50 	bl	157bc <pm_system_suspend>
   2431c:	2800      	cmp	r0, #0
   2431e:	d1f0      	bne.n	24302 <idle+0x22>
	arch_cpu_idle();
   24320:	f7f1 fd9a 	bl	15e58 <arch_cpu_idle>
}
   24324:	e7ed      	b.n	24302 <idle+0x22>
   24326:	bf00      	nop
   24328:	20001f98 	.word	0x20001f98
   2432c:	00033ece 	.word	0x00033ece
   24330:	0002e93e 	.word	0x0002e93e
   24334:	00033ead 	.word	0x00033ead

00024338 <z_impl_k_msgq_put>:
	return 0;
}


int z_impl_k_msgq_put(struct k_msgq *msgq, const void *data, k_timeout_t timeout)
{
   24338:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   2433c:	4604      	mov	r4, r0
   2433e:	468a      	mov	sl, r1
   24340:	4690      	mov	r8, r2
   24342:	4699      	mov	r9, r3
   24344:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24348:	b17b      	cbz	r3, 2436a <z_impl_k_msgq_put+0x32>
   2434a:	ea58 0309 	orrs.w	r3, r8, r9
   2434e:	d00c      	beq.n	2436a <z_impl_k_msgq_put+0x32>
   24350:	4943      	ldr	r1, [pc, #268]	; (24460 <z_impl_k_msgq_put+0x128>)
   24352:	4a44      	ldr	r2, [pc, #272]	; (24464 <z_impl_k_msgq_put+0x12c>)
   24354:	4844      	ldr	r0, [pc, #272]	; (24468 <z_impl_k_msgq_put+0x130>)
   24356:	2376      	movs	r3, #118	; 0x76
   24358:	f004 fc1f 	bl	28b9a <printk>
   2435c:	4843      	ldr	r0, [pc, #268]	; (2446c <z_impl_k_msgq_put+0x134>)
   2435e:	f004 fc1c 	bl	28b9a <printk>
   24362:	4840      	ldr	r0, [pc, #256]	; (24464 <z_impl_k_msgq_put+0x12c>)
   24364:	2176      	movs	r1, #118	; 0x76
   24366:	f004 fe59 	bl	2901c <assert_post_action>

	struct k_thread *pending_thread;
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   2436a:	f104 0508 	add.w	r5, r4, #8
   2436e:	f04f 0340 	mov.w	r3, #64	; 0x40
   24372:	f3ef 8711 	mrs	r7, BASEPRI
   24376:	f383 8812 	msr	BASEPRI_MAX, r3
   2437a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2437e:	4628      	mov	r0, r5
   24380:	f7ff fd0a 	bl	23d98 <z_spin_lock_valid>
   24384:	b968      	cbnz	r0, 243a2 <z_impl_k_msgq_put+0x6a>
   24386:	4a3a      	ldr	r2, [pc, #232]	; (24470 <z_impl_k_msgq_put+0x138>)
   24388:	493a      	ldr	r1, [pc, #232]	; (24474 <z_impl_k_msgq_put+0x13c>)
   2438a:	4837      	ldr	r0, [pc, #220]	; (24468 <z_impl_k_msgq_put+0x130>)
   2438c:	2381      	movs	r3, #129	; 0x81
   2438e:	f004 fc04 	bl	28b9a <printk>
   24392:	4839      	ldr	r0, [pc, #228]	; (24478 <z_impl_k_msgq_put+0x140>)
   24394:	4629      	mov	r1, r5
   24396:	f004 fc00 	bl	28b9a <printk>
   2439a:	4835      	ldr	r0, [pc, #212]	; (24470 <z_impl_k_msgq_put+0x138>)
   2439c:	2181      	movs	r1, #129	; 0x81
   2439e:	f004 fe3d 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   243a2:	4628      	mov	r0, r5
   243a4:	f7ff fd16 	bl	23dd4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, put, msgq, timeout);

	if (msgq->used_msgs < msgq->max_msgs) {
   243a8:	6a62      	ldr	r2, [r4, #36]	; 0x24
   243aa:	6923      	ldr	r3, [r4, #16]
   243ac:	429a      	cmp	r2, r3
   243ae:	d243      	bcs.n	24438 <z_impl_k_msgq_put+0x100>
		/* message queue isn't full */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   243b0:	4620      	mov	r0, r4
   243b2:	f002 f9a1 	bl	266f8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   243b6:	68e2      	ldr	r2, [r4, #12]
   243b8:	4606      	mov	r6, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   243ba:	4651      	mov	r1, sl
   243bc:	b180      	cbz	r0, 243e0 <z_impl_k_msgq_put+0xa8>
   243be:	6940      	ldr	r0, [r0, #20]
   243c0:	2400      	movs	r4, #0
   243c2:	f008 fc18 	bl	2cbf6 <memcpy>
			/* give message to waiting thread */
			(void)memcpy(pending_thread->base.swap_data, data,
			       msgq->msg_size);
			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   243c6:	4630      	mov	r0, r6
   243c8:	f8c6 40b8 	str.w	r4, [r6, #184]	; 0xb8
   243cc:	f001 fde4 	bl	25f98 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   243d0:	4639      	mov	r1, r7
   243d2:	4628      	mov	r0, r5
   243d4:	f001 fb40 	bl	25a58 <z_reschedule>
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, put, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   243d8:	4620      	mov	r0, r4
   243da:	b002      	add	sp, #8
   243dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   243e0:	6a20      	ldr	r0, [r4, #32]
   243e2:	f008 fc08 	bl	2cbf6 <memcpy>
			msgq->write_ptr += msgq->msg_size;
   243e6:	6a23      	ldr	r3, [r4, #32]
   243e8:	68e2      	ldr	r2, [r4, #12]
   243ea:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   243ec:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   243ee:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   243f0:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   243f2:	bf04      	itt	eq
   243f4:	6963      	ldreq	r3, [r4, #20]
   243f6:	6223      	streq	r3, [r4, #32]
			msgq->used_msgs++;
   243f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   243fa:	3301      	adds	r3, #1
   243fc:	6263      	str	r3, [r4, #36]	; 0x24
	z_handle_obj_poll_events(&msgq->poll_events, state);
   243fe:	f104 0028 	add.w	r0, r4, #40	; 0x28
   24402:	2110      	movs	r1, #16
   24404:	f008 fbc5 	bl	2cb92 <z_handle_obj_poll_events>
		result = 0;
   24408:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2440a:	4628      	mov	r0, r5
   2440c:	f7ff fcd2 	bl	23db4 <z_spin_unlock_valid>
   24410:	b968      	cbnz	r0, 2442e <z_impl_k_msgq_put+0xf6>
   24412:	4a17      	ldr	r2, [pc, #92]	; (24470 <z_impl_k_msgq_put+0x138>)
   24414:	4919      	ldr	r1, [pc, #100]	; (2447c <z_impl_k_msgq_put+0x144>)
   24416:	4814      	ldr	r0, [pc, #80]	; (24468 <z_impl_k_msgq_put+0x130>)
   24418:	23ac      	movs	r3, #172	; 0xac
   2441a:	f004 fbbe 	bl	28b9a <printk>
   2441e:	4818      	ldr	r0, [pc, #96]	; (24480 <z_impl_k_msgq_put+0x148>)
   24420:	4629      	mov	r1, r5
   24422:	f004 fbba 	bl	28b9a <printk>
   24426:	4812      	ldr	r0, [pc, #72]	; (24470 <z_impl_k_msgq_put+0x138>)
   24428:	21ac      	movs	r1, #172	; 0xac
   2442a:	f004 fdf7 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2442e:	f387 8811 	msr	BASEPRI, r7
   24432:	f3bf 8f6f 	isb	sy
	return result;
   24436:	e7cf      	b.n	243d8 <z_impl_k_msgq_put+0xa0>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24438:	ea58 0309 	orrs.w	r3, r8, r9
   2443c:	d00c      	beq.n	24458 <z_impl_k_msgq_put+0x120>
		_current->base.swap_data = (void *) data;
   2443e:	4b11      	ldr	r3, [pc, #68]	; (24484 <z_impl_k_msgq_put+0x14c>)
   24440:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   24442:	4622      	mov	r2, r4
		_current->base.swap_data = (void *) data;
   24444:	f8c3 a014 	str.w	sl, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   24448:	4639      	mov	r1, r7
   2444a:	e9cd 8900 	strd	r8, r9, [sp]
   2444e:	4628      	mov	r0, r5
   24450:	f001 ff54 	bl	262fc <z_pend_curr>
   24454:	4604      	mov	r4, r0
		return result;
   24456:	e7bf      	b.n	243d8 <z_impl_k_msgq_put+0xa0>
		result = -ENOMSG;
   24458:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2445c:	e7d5      	b.n	2440a <z_impl_k_msgq_put+0xd2>
   2445e:	bf00      	nop
   24460:	00033c87 	.word	0x00033c87
   24464:	00033ef6 	.word	0x00033ef6
   24468:	0002e93e 	.word	0x0002e93e
   2446c:	00033299 	.word	0x00033299
   24470:	0002e9fe 	.word	0x0002e9fe
   24474:	0002ea50 	.word	0x0002ea50
   24478:	0002ea65 	.word	0x0002ea65
   2447c:	0002ea24 	.word	0x0002ea24
   24480:	0002ea3b 	.word	0x0002ea3b
   24484:	20001f98 	.word	0x20001f98

00024488 <z_impl_k_msgq_get>:
}
#include <syscalls/k_msgq_get_attrs_mrsh.c>
#endif

int z_impl_k_msgq_get(struct k_msgq *msgq, void *data, k_timeout_t timeout)
{
   24488:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   2448c:	4604      	mov	r4, r0
   2448e:	460d      	mov	r5, r1
   24490:	4690      	mov	r8, r2
   24492:	4699      	mov	r9, r3
   24494:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr() || K_TIMEOUT_EQ(timeout, K_NO_WAIT), "");
   24498:	b17b      	cbz	r3, 244ba <z_impl_k_msgq_get+0x32>
   2449a:	ea58 0309 	orrs.w	r3, r8, r9
   2449e:	d00c      	beq.n	244ba <z_impl_k_msgq_get+0x32>
   244a0:	4946      	ldr	r1, [pc, #280]	; (245bc <z_impl_k_msgq_get+0x134>)
   244a2:	4a47      	ldr	r2, [pc, #284]	; (245c0 <z_impl_k_msgq_get+0x138>)
   244a4:	4847      	ldr	r0, [pc, #284]	; (245c4 <z_impl_k_msgq_get+0x13c>)
   244a6:	23d0      	movs	r3, #208	; 0xd0
   244a8:	f004 fb77 	bl	28b9a <printk>
   244ac:	4846      	ldr	r0, [pc, #280]	; (245c8 <z_impl_k_msgq_get+0x140>)
   244ae:	f004 fb74 	bl	28b9a <printk>
   244b2:	4843      	ldr	r0, [pc, #268]	; (245c0 <z_impl_k_msgq_get+0x138>)
   244b4:	21d0      	movs	r1, #208	; 0xd0
   244b6:	f004 fdb1 	bl	2901c <assert_post_action>

	k_spinlock_key_t key;
	struct k_thread *pending_thread;
	int result;

	key = k_spin_lock(&msgq->lock);
   244ba:	f104 0608 	add.w	r6, r4, #8
	__asm__ volatile(
   244be:	f04f 0340 	mov.w	r3, #64	; 0x40
   244c2:	f3ef 8711 	mrs	r7, BASEPRI
   244c6:	f383 8812 	msr	BASEPRI_MAX, r3
   244ca:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   244ce:	4630      	mov	r0, r6
   244d0:	f7ff fc62 	bl	23d98 <z_spin_lock_valid>
   244d4:	b968      	cbnz	r0, 244f2 <z_impl_k_msgq_get+0x6a>
   244d6:	4a3d      	ldr	r2, [pc, #244]	; (245cc <z_impl_k_msgq_get+0x144>)
   244d8:	493d      	ldr	r1, [pc, #244]	; (245d0 <z_impl_k_msgq_get+0x148>)
   244da:	483a      	ldr	r0, [pc, #232]	; (245c4 <z_impl_k_msgq_get+0x13c>)
   244dc:	2381      	movs	r3, #129	; 0x81
   244de:	f004 fb5c 	bl	28b9a <printk>
   244e2:	483c      	ldr	r0, [pc, #240]	; (245d4 <z_impl_k_msgq_get+0x14c>)
   244e4:	4631      	mov	r1, r6
   244e6:	f004 fb58 	bl	28b9a <printk>
   244ea:	4838      	ldr	r0, [pc, #224]	; (245cc <z_impl_k_msgq_get+0x144>)
   244ec:	2181      	movs	r1, #129	; 0x81
   244ee:	f004 fd95 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   244f2:	4630      	mov	r0, r6
   244f4:	f7ff fc6e 	bl	23dd4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_msgq, get, msgq, timeout);

	if (msgq->used_msgs > 0U) {
   244f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   244fa:	2b00      	cmp	r3, #0
   244fc:	d036      	beq.n	2456c <z_impl_k_msgq_get+0xe4>
   244fe:	68e2      	ldr	r2, [r4, #12]
   24500:	69e1      	ldr	r1, [r4, #28]
   24502:	4628      	mov	r0, r5
   24504:	f008 fb77 	bl	2cbf6 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		msgq->read_ptr += msgq->msg_size;
   24508:	69e3      	ldr	r3, [r4, #28]
   2450a:	68e2      	ldr	r2, [r4, #12]
   2450c:	4413      	add	r3, r2
		if (msgq->read_ptr == msgq->buffer_end) {
   2450e:	69a2      	ldr	r2, [r4, #24]
		msgq->read_ptr += msgq->msg_size;
   24510:	61e3      	str	r3, [r4, #28]
		if (msgq->read_ptr == msgq->buffer_end) {
   24512:	4293      	cmp	r3, r2
			msgq->read_ptr = msgq->buffer_start;
   24514:	bf04      	itt	eq
   24516:	6963      	ldreq	r3, [r4, #20]
   24518:	61e3      	streq	r3, [r4, #28]
		}
		msgq->used_msgs--;
   2451a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2451c:	3b01      	subs	r3, #1
   2451e:	6263      	str	r3, [r4, #36]	; 0x24

		/* handle first thread waiting to write (if any) */
		pending_thread = z_unpend_first_thread(&msgq->wait_q);
   24520:	4620      	mov	r0, r4
   24522:	f002 f8e9 	bl	266f8 <z_unpend_first_thread>
		if (pending_thread != NULL) {
   24526:	4605      	mov	r5, r0
   24528:	2800      	cmp	r0, #0
   2452a:	d030      	beq.n	2458e <z_impl_k_msgq_get+0x106>
   2452c:	6941      	ldr	r1, [r0, #20]
   2452e:	68e2      	ldr	r2, [r4, #12]
   24530:	6a20      	ldr	r0, [r4, #32]
   24532:	f008 fb60 	bl	2cbf6 <memcpy>
			SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_msgq, get, msgq, timeout);

			/* add thread's message to queue */
			(void)memcpy(msgq->write_ptr, pending_thread->base.swap_data,
			       msgq->msg_size);
			msgq->write_ptr += msgq->msg_size;
   24536:	6a23      	ldr	r3, [r4, #32]
   24538:	68e2      	ldr	r2, [r4, #12]
   2453a:	4413      	add	r3, r2
			if (msgq->write_ptr == msgq->buffer_end) {
   2453c:	69a2      	ldr	r2, [r4, #24]
			msgq->write_ptr += msgq->msg_size;
   2453e:	6223      	str	r3, [r4, #32]
			if (msgq->write_ptr == msgq->buffer_end) {
   24540:	4293      	cmp	r3, r2
				msgq->write_ptr = msgq->buffer_start;
   24542:	bf04      	itt	eq
   24544:	6963      	ldreq	r3, [r4, #20]
   24546:	6223      	streq	r3, [r4, #32]
			}
			msgq->used_msgs++;
   24548:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2454a:	3301      	adds	r3, #1
   2454c:	6263      	str	r3, [r4, #36]	; 0x24
   2454e:	2400      	movs	r4, #0

			/* wake up waiting thread */
			arch_thread_return_value_set(pending_thread, 0);
			z_ready_thread(pending_thread);
   24550:	4628      	mov	r0, r5
   24552:	f8c5 40b8 	str.w	r4, [r5, #184]	; 0xb8
   24556:	f001 fd1f 	bl	25f98 <z_ready_thread>
			z_reschedule(&msgq->lock, key);
   2455a:	4639      	mov	r1, r7
   2455c:	4630      	mov	r0, r6
   2455e:	f001 fa7b 	bl	25a58 <z_reschedule>

			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, 0);

			return 0;
   24562:	4625      	mov	r5, r4
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_msgq, get, msgq, timeout, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   24564:	4628      	mov	r0, r5
   24566:	b003      	add	sp, #12
   24568:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2456c:	ea58 0309 	orrs.w	r3, r8, r9
   24570:	d00b      	beq.n	2458a <z_impl_k_msgq_get+0x102>
		_current->base.swap_data = data;
   24572:	4b19      	ldr	r3, [pc, #100]	; (245d8 <z_impl_k_msgq_get+0x150>)
   24574:	689b      	ldr	r3, [r3, #8]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   24576:	4622      	mov	r2, r4
		_current->base.swap_data = data;
   24578:	615d      	str	r5, [r3, #20]
		result = z_pend_curr(&msgq->lock, key, &msgq->wait_q, timeout);
   2457a:	4639      	mov	r1, r7
   2457c:	e9cd 8900 	strd	r8, r9, [sp]
   24580:	4630      	mov	r0, r6
   24582:	f001 febb 	bl	262fc <z_pend_curr>
   24586:	4605      	mov	r5, r0
		return result;
   24588:	e7ec      	b.n	24564 <z_impl_k_msgq_get+0xdc>
		result = -ENOMSG;
   2458a:	f06f 0522 	mvn.w	r5, #34	; 0x22
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2458e:	4630      	mov	r0, r6
   24590:	f7ff fc10 	bl	23db4 <z_spin_unlock_valid>
   24594:	b968      	cbnz	r0, 245b2 <z_impl_k_msgq_get+0x12a>
   24596:	4a0d      	ldr	r2, [pc, #52]	; (245cc <z_impl_k_msgq_get+0x144>)
   24598:	4910      	ldr	r1, [pc, #64]	; (245dc <z_impl_k_msgq_get+0x154>)
   2459a:	480a      	ldr	r0, [pc, #40]	; (245c4 <z_impl_k_msgq_get+0x13c>)
   2459c:	23ac      	movs	r3, #172	; 0xac
   2459e:	f004 fafc 	bl	28b9a <printk>
   245a2:	480f      	ldr	r0, [pc, #60]	; (245e0 <z_impl_k_msgq_get+0x158>)
   245a4:	4631      	mov	r1, r6
   245a6:	f004 faf8 	bl	28b9a <printk>
   245aa:	4808      	ldr	r0, [pc, #32]	; (245cc <z_impl_k_msgq_get+0x144>)
   245ac:	21ac      	movs	r1, #172	; 0xac
   245ae:	f004 fd35 	bl	2901c <assert_post_action>
	__asm__ volatile(
   245b2:	f387 8811 	msr	BASEPRI, r7
   245b6:	f3bf 8f6f 	isb	sy
	return result;
   245ba:	e7d3      	b.n	24564 <z_impl_k_msgq_get+0xdc>
   245bc:	00033c87 	.word	0x00033c87
   245c0:	00033ef6 	.word	0x00033ef6
   245c4:	0002e93e 	.word	0x0002e93e
   245c8:	00033299 	.word	0x00033299
   245cc:	0002e9fe 	.word	0x0002e9fe
   245d0:	0002ea50 	.word	0x0002ea50
   245d4:	0002ea65 	.word	0x0002ea65
   245d8:	20001f98 	.word	0x20001f98
   245dc:	0002ea24 	.word	0x0002ea24
   245e0:	0002ea3b 	.word	0x0002ea3b

000245e4 <z_impl_k_msgq_peek>:
}
#include <syscalls/k_msgq_get_mrsh.c>
#endif

int z_impl_k_msgq_peek(struct k_msgq *msgq, void *data)
{
   245e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   245e6:	4604      	mov	r4, r0
   245e8:	460e      	mov	r6, r1
	k_spinlock_key_t key;
	int result;

	key = k_spin_lock(&msgq->lock);
   245ea:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   245ee:	f04f 0340 	mov.w	r3, #64	; 0x40
   245f2:	f3ef 8711 	mrs	r7, BASEPRI
   245f6:	f383 8812 	msr	BASEPRI_MAX, r3
   245fa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   245fe:	4628      	mov	r0, r5
   24600:	f7ff fbca 	bl	23d98 <z_spin_lock_valid>
   24604:	b968      	cbnz	r0, 24622 <z_impl_k_msgq_peek+0x3e>
   24606:	4a1a      	ldr	r2, [pc, #104]	; (24670 <z_impl_k_msgq_peek+0x8c>)
   24608:	491a      	ldr	r1, [pc, #104]	; (24674 <z_impl_k_msgq_peek+0x90>)
   2460a:	481b      	ldr	r0, [pc, #108]	; (24678 <z_impl_k_msgq_peek+0x94>)
   2460c:	2381      	movs	r3, #129	; 0x81
   2460e:	f004 fac4 	bl	28b9a <printk>
   24612:	481a      	ldr	r0, [pc, #104]	; (2467c <z_impl_k_msgq_peek+0x98>)
   24614:	4629      	mov	r1, r5
   24616:	f004 fac0 	bl	28b9a <printk>
   2461a:	4815      	ldr	r0, [pc, #84]	; (24670 <z_impl_k_msgq_peek+0x8c>)
   2461c:	2181      	movs	r1, #129	; 0x81
   2461e:	f004 fcfd 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   24622:	4628      	mov	r0, r5
   24624:	f7ff fbd6 	bl	23dd4 <z_spin_lock_set_owner>

	if (msgq->used_msgs > 0U) {
   24628:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2462a:	b1eb      	cbz	r3, 24668 <z_impl_k_msgq_peek+0x84>
   2462c:	68e2      	ldr	r2, [r4, #12]
   2462e:	69e1      	ldr	r1, [r4, #28]
   24630:	4630      	mov	r0, r6
   24632:	f008 fae0 	bl	2cbf6 <memcpy>
		/* take first available message from queue */
		(void)memcpy(data, msgq->read_ptr, msgq->msg_size);
		result = 0;
   24636:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24638:	4628      	mov	r0, r5
   2463a:	f7ff fbbb 	bl	23db4 <z_spin_unlock_valid>
   2463e:	b968      	cbnz	r0, 2465c <z_impl_k_msgq_peek+0x78>
   24640:	4a0b      	ldr	r2, [pc, #44]	; (24670 <z_impl_k_msgq_peek+0x8c>)
   24642:	490f      	ldr	r1, [pc, #60]	; (24680 <z_impl_k_msgq_peek+0x9c>)
   24644:	480c      	ldr	r0, [pc, #48]	; (24678 <z_impl_k_msgq_peek+0x94>)
   24646:	23ac      	movs	r3, #172	; 0xac
   24648:	f004 faa7 	bl	28b9a <printk>
   2464c:	480d      	ldr	r0, [pc, #52]	; (24684 <z_impl_k_msgq_peek+0xa0>)
   2464e:	4629      	mov	r1, r5
   24650:	f004 faa3 	bl	28b9a <printk>
   24654:	4806      	ldr	r0, [pc, #24]	; (24670 <z_impl_k_msgq_peek+0x8c>)
   24656:	21ac      	movs	r1, #172	; 0xac
   24658:	f004 fce0 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2465c:	f387 8811 	msr	BASEPRI, r7
   24660:	f3bf 8f6f 	isb	sy
	SYS_PORT_TRACING_OBJ_FUNC(k_msgq, peek, msgq, result);

	k_spin_unlock(&msgq->lock, key);

	return result;
}
   24664:	4620      	mov	r0, r4
   24666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		result = -ENOMSG;
   24668:	f06f 0422 	mvn.w	r4, #34	; 0x22
   2466c:	e7e4      	b.n	24638 <z_impl_k_msgq_peek+0x54>
   2466e:	bf00      	nop
   24670:	0002e9fe 	.word	0x0002e9fe
   24674:	0002ea50 	.word	0x0002ea50
   24678:	0002e93e 	.word	0x0002e93e
   2467c:	0002ea65 	.word	0x0002ea65
   24680:	0002ea24 	.word	0x0002ea24
   24684:	0002ea3b 	.word	0x0002ea3b

00024688 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   24688:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2468c:	4604      	mov	r4, r0
   2468e:	4616      	mov	r6, r2
   24690:	461f      	mov	r7, r3
   24692:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   24696:	b163      	cbz	r3, 246b2 <z_impl_k_mutex_lock+0x2a>
   24698:	4970      	ldr	r1, [pc, #448]	; (2485c <z_impl_k_mutex_lock+0x1d4>)
   2469a:	4a71      	ldr	r2, [pc, #452]	; (24860 <z_impl_k_mutex_lock+0x1d8>)
   2469c:	4871      	ldr	r0, [pc, #452]	; (24864 <z_impl_k_mutex_lock+0x1dc>)
   2469e:	2365      	movs	r3, #101	; 0x65
   246a0:	f004 fa7b 	bl	28b9a <printk>
   246a4:	4870      	ldr	r0, [pc, #448]	; (24868 <z_impl_k_mutex_lock+0x1e0>)
   246a6:	f004 fa78 	bl	28b9a <printk>
   246aa:	486d      	ldr	r0, [pc, #436]	; (24860 <z_impl_k_mutex_lock+0x1d8>)
   246ac:	2165      	movs	r1, #101	; 0x65
   246ae:	f004 fcb5 	bl	2901c <assert_post_action>
	__asm__ volatile(
   246b2:	f04f 0340 	mov.w	r3, #64	; 0x40
   246b6:	f3ef 8811 	mrs	r8, BASEPRI
   246ba:	f383 8812 	msr	BASEPRI_MAX, r3
   246be:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   246c2:	486a      	ldr	r0, [pc, #424]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   246c4:	f7ff fb68 	bl	23d98 <z_spin_lock_valid>
   246c8:	b968      	cbnz	r0, 246e6 <z_impl_k_mutex_lock+0x5e>
   246ca:	4a69      	ldr	r2, [pc, #420]	; (24870 <z_impl_k_mutex_lock+0x1e8>)
   246cc:	4969      	ldr	r1, [pc, #420]	; (24874 <z_impl_k_mutex_lock+0x1ec>)
   246ce:	4865      	ldr	r0, [pc, #404]	; (24864 <z_impl_k_mutex_lock+0x1dc>)
   246d0:	2381      	movs	r3, #129	; 0x81
   246d2:	f004 fa62 	bl	28b9a <printk>
   246d6:	4965      	ldr	r1, [pc, #404]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   246d8:	4867      	ldr	r0, [pc, #412]	; (24878 <z_impl_k_mutex_lock+0x1f0>)
   246da:	f004 fa5e 	bl	28b9a <printk>
   246de:	4864      	ldr	r0, [pc, #400]	; (24870 <z_impl_k_mutex_lock+0x1e8>)
   246e0:	2181      	movs	r1, #129	; 0x81
   246e2:	f004 fc9b 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   246e6:	4861      	ldr	r0, [pc, #388]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   246e8:	f7ff fb74 	bl	23dd4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   246ec:	68e3      	ldr	r3, [r4, #12]
   246ee:	4a63      	ldr	r2, [pc, #396]	; (2487c <z_impl_k_mutex_lock+0x1f4>)
   246f0:	b1fb      	cbz	r3, 24732 <z_impl_k_mutex_lock+0xaa>
   246f2:	68a0      	ldr	r0, [r4, #8]
   246f4:	6891      	ldr	r1, [r2, #8]
   246f6:	4288      	cmp	r0, r1
   246f8:	d03d      	beq.n	24776 <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   246fa:	ea56 0307 	orrs.w	r3, r6, r7
   246fe:	d13c      	bne.n	2477a <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24700:	485a      	ldr	r0, [pc, #360]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   24702:	f7ff fb57 	bl	23db4 <z_spin_unlock_valid>
   24706:	b968      	cbnz	r0, 24724 <z_impl_k_mutex_lock+0x9c>
   24708:	4a59      	ldr	r2, [pc, #356]	; (24870 <z_impl_k_mutex_lock+0x1e8>)
   2470a:	495d      	ldr	r1, [pc, #372]	; (24880 <z_impl_k_mutex_lock+0x1f8>)
   2470c:	4855      	ldr	r0, [pc, #340]	; (24864 <z_impl_k_mutex_lock+0x1dc>)
   2470e:	23ac      	movs	r3, #172	; 0xac
   24710:	f004 fa43 	bl	28b9a <printk>
   24714:	4955      	ldr	r1, [pc, #340]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   24716:	485b      	ldr	r0, [pc, #364]	; (24884 <z_impl_k_mutex_lock+0x1fc>)
   24718:	f004 fa3f 	bl	28b9a <printk>
   2471c:	4854      	ldr	r0, [pc, #336]	; (24870 <z_impl_k_mutex_lock+0x1e8>)
   2471e:	21ac      	movs	r1, #172	; 0xac
   24720:	f004 fc7c 	bl	2901c <assert_post_action>
	__asm__ volatile(
   24724:	f388 8811 	msr	BASEPRI, r8
   24728:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
   2472c:	f06f 000f 	mvn.w	r0, #15
   24730:	e01e      	b.n	24770 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
   24732:	6891      	ldr	r1, [r2, #8]
   24734:	f991 100e 	ldrsb.w	r1, [r1, #14]
   24738:	484c      	ldr	r0, [pc, #304]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   2473a:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   2473c:	3301      	adds	r3, #1
   2473e:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   24740:	6893      	ldr	r3, [r2, #8]
   24742:	60a3      	str	r3, [r4, #8]
   24744:	f7ff fb36 	bl	23db4 <z_spin_unlock_valid>
   24748:	b968      	cbnz	r0, 24766 <z_impl_k_mutex_lock+0xde>
   2474a:	4a49      	ldr	r2, [pc, #292]	; (24870 <z_impl_k_mutex_lock+0x1e8>)
   2474c:	494c      	ldr	r1, [pc, #304]	; (24880 <z_impl_k_mutex_lock+0x1f8>)
   2474e:	4845      	ldr	r0, [pc, #276]	; (24864 <z_impl_k_mutex_lock+0x1dc>)
   24750:	23ac      	movs	r3, #172	; 0xac
   24752:	f004 fa22 	bl	28b9a <printk>
   24756:	4945      	ldr	r1, [pc, #276]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   24758:	484a      	ldr	r0, [pc, #296]	; (24884 <z_impl_k_mutex_lock+0x1fc>)
   2475a:	f004 fa1e 	bl	28b9a <printk>
   2475e:	4844      	ldr	r0, [pc, #272]	; (24870 <z_impl_k_mutex_lock+0x1e8>)
   24760:	21ac      	movs	r1, #172	; 0xac
   24762:	f004 fc5b 	bl	2901c <assert_post_action>
   24766:	f388 8811 	msr	BASEPRI, r8
   2476a:	f3bf 8f6f 	isb	sy
		return 0;
   2476e:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
   24770:	b002      	add	sp, #8
   24772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   24776:	6921      	ldr	r1, [r4, #16]
   24778:	e7de      	b.n	24738 <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   2477a:	f991 100e 	ldrsb.w	r1, [r1, #14]
   2477e:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
   24782:	4299      	cmp	r1, r3
   24784:	bfa8      	it	ge
   24786:	4619      	movge	r1, r3
   24788:	f06f 027e 	mvn.w	r2, #126	; 0x7e
   2478c:	4291      	cmp	r1, r2
   2478e:	bfb8      	it	lt
   24790:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   24792:	428b      	cmp	r3, r1
   24794:	dd44      	ble.n	24820 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
   24796:	f001 fde1 	bl	2635c <z_set_prio>
   2479a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   2479c:	e9cd 6700 	strd	r6, r7, [sp]
   247a0:	4832      	ldr	r0, [pc, #200]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   247a2:	4622      	mov	r2, r4
   247a4:	4641      	mov	r1, r8
   247a6:	f001 fda9 	bl	262fc <z_pend_curr>
	if (got_mutex == 0) {
   247aa:	2800      	cmp	r0, #0
   247ac:	d0e0      	beq.n	24770 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
   247ae:	f04f 0340 	mov.w	r3, #64	; 0x40
   247b2:	f3ef 8611 	mrs	r6, BASEPRI
   247b6:	f383 8812 	msr	BASEPRI_MAX, r3
   247ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   247be:	482b      	ldr	r0, [pc, #172]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   247c0:	f7ff faea 	bl	23d98 <z_spin_lock_valid>
   247c4:	b968      	cbnz	r0, 247e2 <z_impl_k_mutex_lock+0x15a>
   247c6:	4a2a      	ldr	r2, [pc, #168]	; (24870 <z_impl_k_mutex_lock+0x1e8>)
   247c8:	492a      	ldr	r1, [pc, #168]	; (24874 <z_impl_k_mutex_lock+0x1ec>)
   247ca:	4826      	ldr	r0, [pc, #152]	; (24864 <z_impl_k_mutex_lock+0x1dc>)
   247cc:	2381      	movs	r3, #129	; 0x81
   247ce:	f004 f9e4 	bl	28b9a <printk>
   247d2:	4926      	ldr	r1, [pc, #152]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   247d4:	4828      	ldr	r0, [pc, #160]	; (24878 <z_impl_k_mutex_lock+0x1f0>)
   247d6:	f004 f9e0 	bl	28b9a <printk>
   247da:	4825      	ldr	r0, [pc, #148]	; (24870 <z_impl_k_mutex_lock+0x1e8>)
   247dc:	2181      	movs	r1, #129	; 0x81
   247de:	f004 fc1d 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   247e2:	4822      	ldr	r0, [pc, #136]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   247e4:	f7ff faf6 	bl	23dd4 <z_spin_lock_set_owner>
	return list->head == list;
   247e8:	6823      	ldr	r3, [r4, #0]
   247ea:	6921      	ldr	r1, [r4, #16]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   247ec:	429c      	cmp	r4, r3
   247ee:	d00a      	beq.n	24806 <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   247f0:	b14b      	cbz	r3, 24806 <z_impl_k_mutex_lock+0x17e>
   247f2:	f993 300e 	ldrsb.w	r3, [r3, #14]
   247f6:	4299      	cmp	r1, r3
   247f8:	bfa8      	it	ge
   247fa:	4619      	movge	r1, r3
   247fc:	f06f 037e 	mvn.w	r3, #126	; 0x7e
   24800:	4299      	cmp	r1, r3
   24802:	bfb8      	it	lt
   24804:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   24806:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   24808:	f990 300e 	ldrsb.w	r3, [r0, #14]
   2480c:	4299      	cmp	r1, r3
   2480e:	d109      	bne.n	24824 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
   24810:	b16d      	cbz	r5, 2482e <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
   24812:	4816      	ldr	r0, [pc, #88]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   24814:	4631      	mov	r1, r6
   24816:	f001 f91f 	bl	25a58 <z_reschedule>
	return -EAGAIN;
   2481a:	f06f 000a 	mvn.w	r0, #10
   2481e:	e7a7      	b.n	24770 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
   24820:	2500      	movs	r5, #0
   24822:	e7bb      	b.n	2479c <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
   24824:	f001 fd9a 	bl	2635c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   24828:	2800      	cmp	r0, #0
   2482a:	d1f2      	bne.n	24812 <z_impl_k_mutex_lock+0x18a>
   2482c:	e7f0      	b.n	24810 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2482e:	480f      	ldr	r0, [pc, #60]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   24830:	f7ff fac0 	bl	23db4 <z_spin_unlock_valid>
   24834:	b968      	cbnz	r0, 24852 <z_impl_k_mutex_lock+0x1ca>
   24836:	4a0e      	ldr	r2, [pc, #56]	; (24870 <z_impl_k_mutex_lock+0x1e8>)
   24838:	4911      	ldr	r1, [pc, #68]	; (24880 <z_impl_k_mutex_lock+0x1f8>)
   2483a:	480a      	ldr	r0, [pc, #40]	; (24864 <z_impl_k_mutex_lock+0x1dc>)
   2483c:	23ac      	movs	r3, #172	; 0xac
   2483e:	f004 f9ac 	bl	28b9a <printk>
   24842:	490a      	ldr	r1, [pc, #40]	; (2486c <z_impl_k_mutex_lock+0x1e4>)
   24844:	480f      	ldr	r0, [pc, #60]	; (24884 <z_impl_k_mutex_lock+0x1fc>)
   24846:	f004 f9a8 	bl	28b9a <printk>
   2484a:	4809      	ldr	r0, [pc, #36]	; (24870 <z_impl_k_mutex_lock+0x1e8>)
   2484c:	21ac      	movs	r1, #172	; 0xac
   2484e:	f004 fbe5 	bl	2901c <assert_post_action>
	__asm__ volatile(
   24852:	f386 8811 	msr	BASEPRI, r6
   24856:	f3bf 8f6f 	isb	sy
   2485a:	e7de      	b.n	2481a <z_impl_k_mutex_lock+0x192>
   2485c:	00033e49 	.word	0x00033e49
   24860:	00033f18 	.word	0x00033f18
   24864:	0002e93e 	.word	0x0002e93e
   24868:	00033f3a 	.word	0x00033f3a
   2486c:	200029e4 	.word	0x200029e4
   24870:	0002e9fe 	.word	0x0002e9fe
   24874:	0002ea50 	.word	0x0002ea50
   24878:	0002ea65 	.word	0x0002ea65
   2487c:	20001f98 	.word	0x20001f98
   24880:	0002ea24 	.word	0x0002ea24
   24884:	0002ea3b 	.word	0x0002ea3b

00024888 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   24888:	b538      	push	{r3, r4, r5, lr}
   2488a:	4604      	mov	r4, r0
   2488c:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
   24890:	b163      	cbz	r3, 248ac <z_impl_k_mutex_unlock+0x24>
   24892:	4952      	ldr	r1, [pc, #328]	; (249dc <z_impl_k_mutex_unlock+0x154>)
   24894:	4a52      	ldr	r2, [pc, #328]	; (249e0 <z_impl_k_mutex_unlock+0x158>)
   24896:	4853      	ldr	r0, [pc, #332]	; (249e4 <z_impl_k_mutex_unlock+0x15c>)
   24898:	23c7      	movs	r3, #199	; 0xc7
   2489a:	f004 f97e 	bl	28b9a <printk>
   2489e:	4852      	ldr	r0, [pc, #328]	; (249e8 <z_impl_k_mutex_unlock+0x160>)
   248a0:	f004 f97b 	bl	28b9a <printk>
   248a4:	484e      	ldr	r0, [pc, #312]	; (249e0 <z_impl_k_mutex_unlock+0x158>)
   248a6:	21c7      	movs	r1, #199	; 0xc7
   248a8:	f004 fbb8 	bl	2901c <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
   248ac:	68a3      	ldr	r3, [r4, #8]
   248ae:	2b00      	cmp	r3, #0
   248b0:	f000 808e 	beq.w	249d0 <z_impl_k_mutex_unlock+0x148>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   248b4:	4d4d      	ldr	r5, [pc, #308]	; (249ec <z_impl_k_mutex_unlock+0x164>)
   248b6:	68aa      	ldr	r2, [r5, #8]
   248b8:	4293      	cmp	r3, r2
   248ba:	f040 808c 	bne.w	249d6 <z_impl_k_mutex_unlock+0x14e>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
   248be:	68e3      	ldr	r3, [r4, #12]
   248c0:	b94b      	cbnz	r3, 248d6 <z_impl_k_mutex_unlock+0x4e>
   248c2:	494b      	ldr	r1, [pc, #300]	; (249f0 <z_impl_k_mutex_unlock+0x168>)
   248c4:	4847      	ldr	r0, [pc, #284]	; (249e4 <z_impl_k_mutex_unlock+0x15c>)
   248c6:	4a46      	ldr	r2, [pc, #280]	; (249e0 <z_impl_k_mutex_unlock+0x158>)
   248c8:	23df      	movs	r3, #223	; 0xdf
   248ca:	f004 f966 	bl	28b9a <printk>
   248ce:	4844      	ldr	r0, [pc, #272]	; (249e0 <z_impl_k_mutex_unlock+0x158>)
   248d0:	21df      	movs	r1, #223	; 0xdf
   248d2:	f004 fba3 	bl	2901c <assert_post_action>
   248d6:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
   248da:	b163      	cbz	r3, 248f6 <z_impl_k_mutex_unlock+0x6e>
   248dc:	493f      	ldr	r1, [pc, #252]	; (249dc <z_impl_k_mutex_unlock+0x154>)
   248de:	4a45      	ldr	r2, [pc, #276]	; (249f4 <z_impl_k_mutex_unlock+0x16c>)
   248e0:	4840      	ldr	r0, [pc, #256]	; (249e4 <z_impl_k_mutex_unlock+0x15c>)
   248e2:	23fd      	movs	r3, #253	; 0xfd
   248e4:	f004 f959 	bl	28b9a <printk>
   248e8:	4843      	ldr	r0, [pc, #268]	; (249f8 <z_impl_k_mutex_unlock+0x170>)
   248ea:	f004 f956 	bl	28b9a <printk>
   248ee:	4841      	ldr	r0, [pc, #260]	; (249f4 <z_impl_k_mutex_unlock+0x16c>)
   248f0:	21fd      	movs	r1, #253	; 0xfd
   248f2:	f004 fb93 	bl	2901c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   248f6:	68ab      	ldr	r3, [r5, #8]
   248f8:	7bdb      	ldrb	r3, [r3, #15]
   248fa:	2b01      	cmp	r3, #1
   248fc:	d10c      	bne.n	24918 <z_impl_k_mutex_unlock+0x90>
   248fe:	493f      	ldr	r1, [pc, #252]	; (249fc <z_impl_k_mutex_unlock+0x174>)
   24900:	4a3c      	ldr	r2, [pc, #240]	; (249f4 <z_impl_k_mutex_unlock+0x16c>)
   24902:	4838      	ldr	r0, [pc, #224]	; (249e4 <z_impl_k_mutex_unlock+0x15c>)
   24904:	23fe      	movs	r3, #254	; 0xfe
   24906:	f004 f948 	bl	28b9a <printk>
   2490a:	483b      	ldr	r0, [pc, #236]	; (249f8 <z_impl_k_mutex_unlock+0x170>)
   2490c:	f004 f945 	bl	28b9a <printk>
   24910:	4838      	ldr	r0, [pc, #224]	; (249f4 <z_impl_k_mutex_unlock+0x16c>)
   24912:	21fe      	movs	r1, #254	; 0xfe
   24914:	f004 fb82 	bl	2901c <assert_post_action>

	--_current->base.sched_locked;
   24918:	68aa      	ldr	r2, [r5, #8]
   2491a:	7bd3      	ldrb	r3, [r2, #15]
   2491c:	3b01      	subs	r3, #1
   2491e:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
   24920:	68e3      	ldr	r3, [r4, #12]
   24922:	2b01      	cmp	r3, #1
   24924:	d905      	bls.n	24932 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
   24926:	3b01      	subs	r3, #1
   24928:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
   2492a:	f001 fe1d 	bl	26568 <k_sched_unlock>

	return 0;
   2492e:	2000      	movs	r0, #0
}
   24930:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   24932:	f04f 0340 	mov.w	r3, #64	; 0x40
   24936:	f3ef 8511 	mrs	r5, BASEPRI
   2493a:	f383 8812 	msr	BASEPRI_MAX, r3
   2493e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24942:	482f      	ldr	r0, [pc, #188]	; (24a00 <z_impl_k_mutex_unlock+0x178>)
   24944:	f7ff fa28 	bl	23d98 <z_spin_lock_valid>
   24948:	b968      	cbnz	r0, 24966 <z_impl_k_mutex_unlock+0xde>
   2494a:	4a2e      	ldr	r2, [pc, #184]	; (24a04 <z_impl_k_mutex_unlock+0x17c>)
   2494c:	492e      	ldr	r1, [pc, #184]	; (24a08 <z_impl_k_mutex_unlock+0x180>)
   2494e:	4825      	ldr	r0, [pc, #148]	; (249e4 <z_impl_k_mutex_unlock+0x15c>)
   24950:	2381      	movs	r3, #129	; 0x81
   24952:	f004 f922 	bl	28b9a <printk>
   24956:	492a      	ldr	r1, [pc, #168]	; (24a00 <z_impl_k_mutex_unlock+0x178>)
   24958:	482c      	ldr	r0, [pc, #176]	; (24a0c <z_impl_k_mutex_unlock+0x184>)
   2495a:	f004 f91e 	bl	28b9a <printk>
   2495e:	4829      	ldr	r0, [pc, #164]	; (24a04 <z_impl_k_mutex_unlock+0x17c>)
   24960:	2181      	movs	r1, #129	; 0x81
   24962:	f004 fb5b 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   24966:	4826      	ldr	r0, [pc, #152]	; (24a00 <z_impl_k_mutex_unlock+0x178>)
   24968:	f7ff fa34 	bl	23dd4 <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   2496c:	68a0      	ldr	r0, [r4, #8]
   2496e:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
   24970:	f990 300e 	ldrsb.w	r3, [r0, #14]
   24974:	4299      	cmp	r1, r3
   24976:	d001      	beq.n	2497c <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
   24978:	f001 fcf0 	bl	2635c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   2497c:	4620      	mov	r0, r4
   2497e:	f001 febb 	bl	266f8 <z_unpend_first_thread>
	mutex->owner = new_owner;
   24982:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   24984:	b160      	cbz	r0, 249a0 <z_impl_k_mutex_unlock+0x118>
		mutex->owner_orig_prio = new_owner->base.prio;
   24986:	f990 200e 	ldrsb.w	r2, [r0, #14]
   2498a:	6122      	str	r2, [r4, #16]
   2498c:	2200      	movs	r2, #0
   2498e:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
		z_ready_thread(new_owner);
   24992:	f001 fb01 	bl	25f98 <z_ready_thread>
		z_reschedule(&lock, key);
   24996:	481a      	ldr	r0, [pc, #104]	; (24a00 <z_impl_k_mutex_unlock+0x178>)
   24998:	4629      	mov	r1, r5
   2499a:	f001 f85d 	bl	25a58 <z_reschedule>
   2499e:	e7c4      	b.n	2492a <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
   249a0:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   249a2:	4817      	ldr	r0, [pc, #92]	; (24a00 <z_impl_k_mutex_unlock+0x178>)
   249a4:	f7ff fa06 	bl	23db4 <z_spin_unlock_valid>
   249a8:	b968      	cbnz	r0, 249c6 <z_impl_k_mutex_unlock+0x13e>
   249aa:	4a16      	ldr	r2, [pc, #88]	; (24a04 <z_impl_k_mutex_unlock+0x17c>)
   249ac:	4918      	ldr	r1, [pc, #96]	; (24a10 <z_impl_k_mutex_unlock+0x188>)
   249ae:	480d      	ldr	r0, [pc, #52]	; (249e4 <z_impl_k_mutex_unlock+0x15c>)
   249b0:	23ac      	movs	r3, #172	; 0xac
   249b2:	f004 f8f2 	bl	28b9a <printk>
   249b6:	4912      	ldr	r1, [pc, #72]	; (24a00 <z_impl_k_mutex_unlock+0x178>)
   249b8:	4816      	ldr	r0, [pc, #88]	; (24a14 <z_impl_k_mutex_unlock+0x18c>)
   249ba:	f004 f8ee 	bl	28b9a <printk>
   249be:	4811      	ldr	r0, [pc, #68]	; (24a04 <z_impl_k_mutex_unlock+0x17c>)
   249c0:	21ac      	movs	r1, #172	; 0xac
   249c2:	f004 fb2b 	bl	2901c <assert_post_action>
	__asm__ volatile(
   249c6:	f385 8811 	msr	BASEPRI, r5
   249ca:	f3bf 8f6f 	isb	sy
   249ce:	e7ac      	b.n	2492a <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
   249d0:	f06f 0015 	mvn.w	r0, #21
   249d4:	e7ac      	b.n	24930 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
   249d6:	f04f 30ff 	mov.w	r0, #4294967295
   249da:	e7a9      	b.n	24930 <z_impl_k_mutex_unlock+0xa8>
   249dc:	00033e49 	.word	0x00033e49
   249e0:	00033f18 	.word	0x00033f18
   249e4:	0002e93e 	.word	0x0002e93e
   249e8:	00033f3a 	.word	0x00033f3a
   249ec:	20001f98 	.word	0x20001f98
   249f0:	00033f5f 	.word	0x00033f5f
   249f4:	00033f76 	.word	0x00033f76
   249f8:	00033299 	.word	0x00033299
   249fc:	00033fa1 	.word	0x00033fa1
   24a00:	200029e4 	.word	0x200029e4
   24a04:	0002e9fe 	.word	0x0002e9fe
   24a08:	0002ea50 	.word	0x0002ea50
   24a0c:	0002ea65 	.word	0x0002ea65
   24a10:	0002ea24 	.word	0x0002ea24
   24a14:	0002ea3b 	.word	0x0002ea3b

00024a18 <queue_insert>:
#include <syscalls/k_queue_cancel_wait_mrsh.c>
#endif

static int32_t queue_insert(struct k_queue *queue, void *prev, void *data,
			    bool alloc, bool is_append)
{
   24a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24a1c:	4604      	mov	r4, r0
   24a1e:	f89d a020 	ldrb.w	sl, [sp, #32]
   24a22:	460e      	mov	r6, r1
   24a24:	4690      	mov	r8, r2
   24a26:	4699      	mov	r9, r3
	struct k_thread *first_pending_thread;
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24a28:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
   24a2c:	f04f 0340 	mov.w	r3, #64	; 0x40
   24a30:	f3ef 8711 	mrs	r7, BASEPRI
   24a34:	f383 8812 	msr	BASEPRI_MAX, r3
   24a38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24a3c:	4628      	mov	r0, r5
   24a3e:	f7ff f9ab 	bl	23d98 <z_spin_lock_valid>
   24a42:	b968      	cbnz	r0, 24a60 <queue_insert+0x48>
   24a44:	4a3c      	ldr	r2, [pc, #240]	; (24b38 <queue_insert+0x120>)
   24a46:	493d      	ldr	r1, [pc, #244]	; (24b3c <queue_insert+0x124>)
   24a48:	483d      	ldr	r0, [pc, #244]	; (24b40 <queue_insert+0x128>)
   24a4a:	2381      	movs	r3, #129	; 0x81
   24a4c:	f004 f8a5 	bl	28b9a <printk>
   24a50:	483c      	ldr	r0, [pc, #240]	; (24b44 <queue_insert+0x12c>)
   24a52:	4629      	mov	r1, r5
   24a54:	f004 f8a1 	bl	28b9a <printk>
   24a58:	4837      	ldr	r0, [pc, #220]	; (24b38 <queue_insert+0x120>)
   24a5a:	2181      	movs	r1, #129	; 0x81
   24a5c:	f004 fade 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   24a60:	4628      	mov	r0, r5
   24a62:	f7ff f9b7 	bl	23dd4 <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, queue_insert, queue, alloc);

	if (is_append) {
   24a66:	f1ba 0f00 	cmp.w	sl, #0
   24a6a:	d000      	beq.n	24a6e <queue_insert+0x56>
		prev = sys_sflist_peek_tail(&queue->data_q);
   24a6c:	6866      	ldr	r6, [r4, #4]
	}
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   24a6e:	f104 000c 	add.w	r0, r4, #12
   24a72:	f001 fe41 	bl	266f8 <z_unpend_first_thread>

	if (first_pending_thread != NULL) {
   24a76:	b160      	cbz	r0, 24a92 <queue_insert+0x7a>
   24a78:	2400      	movs	r4, #0
   24a7a:	f8c0 40b8 	str.w	r4, [r0, #184]	; 0xb8
   24a7e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   24a82:	f001 fa89 	bl	25f98 <z_ready_thread>

	SYS_PORT_TRACING_OBJ_FUNC_BLOCKING(k_queue, queue_insert, queue, alloc, K_FOREVER);

	sys_sflist_insert(&queue->data_q, prev, data);
	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   24a86:	4628      	mov	r0, r5
   24a88:	4639      	mov	r1, r7
   24a8a:	f000 ffe5 	bl	25a58 <z_reschedule>

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, queue_insert, queue, alloc, 0);

	return 0;
   24a8e:	2000      	movs	r0, #0
   24a90:	e01e      	b.n	24ad0 <queue_insert+0xb8>
	if (alloc) {
   24a92:	f1b9 0f00 	cmp.w	r9, #0
   24a96:	d02d      	beq.n	24af4 <queue_insert+0xdc>
	return z_thread_aligned_alloc(0, size);
   24a98:	2108      	movs	r1, #8
   24a9a:	f003 fab7 	bl	2800c <z_thread_aligned_alloc>
		if (anode == NULL) {
   24a9e:	b9c8      	cbnz	r0, 24ad4 <queue_insert+0xbc>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24aa0:	4628      	mov	r0, r5
   24aa2:	f7ff f987 	bl	23db4 <z_spin_unlock_valid>
   24aa6:	b968      	cbnz	r0, 24ac4 <queue_insert+0xac>
   24aa8:	4a23      	ldr	r2, [pc, #140]	; (24b38 <queue_insert+0x120>)
   24aaa:	4927      	ldr	r1, [pc, #156]	; (24b48 <queue_insert+0x130>)
   24aac:	4824      	ldr	r0, [pc, #144]	; (24b40 <queue_insert+0x128>)
   24aae:	23ac      	movs	r3, #172	; 0xac
   24ab0:	f004 f873 	bl	28b9a <printk>
   24ab4:	4825      	ldr	r0, [pc, #148]	; (24b4c <queue_insert+0x134>)
   24ab6:	4629      	mov	r1, r5
   24ab8:	f004 f86f 	bl	28b9a <printk>
   24abc:	481e      	ldr	r0, [pc, #120]	; (24b38 <queue_insert+0x120>)
   24abe:	21ac      	movs	r1, #172	; 0xac
   24ac0:	f004 faac 	bl	2901c <assert_post_action>
	__asm__ volatile(
   24ac4:	f387 8811 	msr	BASEPRI, r7
   24ac8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   24acc:	f06f 000b 	mvn.w	r0, #11
}
   24ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 * @param flags A value between 0 and 3 to set the flags value
 */
static inline void sys_sfnode_init(sys_sfnode_t *node, uint8_t flags)
{
	__ASSERT((flags & ~SYS_SFLIST_FLAGS_MASK) == 0UL, "flags too large");
	node->next_and_flags = flags;
   24ad4:	2301      	movs	r3, #1
		anode->data = data;
   24ad6:	f8c0 8004 	str.w	r8, [r0, #4]
   24ada:	6003      	str	r3, [r0, #0]
 */
static inline void sys_sflist_insert(sys_sflist_t *list,
				     sys_sfnode_t *prev,
				     sys_sfnode_t *node);

Z_GENLIST_INSERT(sflist, sfnode)
   24adc:	6803      	ldr	r3, [r0, #0]
   24ade:	f003 0303 	and.w	r3, r3, #3
   24ae2:	b95e      	cbnz	r6, 24afc <queue_insert+0xe4>
	parent->next_and_flags = cur_flags | (unative_t)child;
   24ae4:	6822      	ldr	r2, [r4, #0]
   24ae6:	4313      	orrs	r3, r2
   24ae8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24aea:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   24aec:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   24aee:	b973      	cbnz	r3, 24b0e <queue_insert+0xf6>
	list->tail = node;
   24af0:	6060      	str	r0, [r4, #4]
}
   24af2:	e00c      	b.n	24b0e <queue_insert+0xf6>
	node->next_and_flags = flags;
   24af4:	f8c8 9000 	str.w	r9, [r8]
}
   24af8:	4640      	mov	r0, r8
   24afa:	e7ef      	b.n	24adc <queue_insert+0xc4>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24afc:	6832      	ldr	r2, [r6, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   24afe:	f032 0203 	bics.w	r2, r2, #3
   24b02:	d110      	bne.n	24b26 <queue_insert+0x10e>
Z_GENLIST_APPEND(sflist, sfnode)
   24b04:	6862      	ldr	r2, [r4, #4]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24b06:	6003      	str	r3, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   24b08:	b93a      	cbnz	r2, 24b1a <queue_insert+0x102>
	list->head = node;
   24b0a:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   24b0e:	2104      	movs	r1, #4
   24b10:	f104 0014 	add.w	r0, r4, #20
   24b14:	f008 f83d 	bl	2cb92 <z_handle_obj_poll_events>
   24b18:	e7b5      	b.n	24a86 <queue_insert+0x6e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24b1a:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24b1c:	f003 0303 	and.w	r3, r3, #3
   24b20:	4303      	orrs	r3, r0
   24b22:	6013      	str	r3, [r2, #0]
   24b24:	e7e4      	b.n	24af0 <queue_insert+0xd8>
   24b26:	4313      	orrs	r3, r2
   24b28:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24b2a:	6833      	ldr	r3, [r6, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24b2c:	f003 0303 	and.w	r3, r3, #3
   24b30:	4303      	orrs	r3, r0
   24b32:	6033      	str	r3, [r6, #0]
}
   24b34:	e7eb      	b.n	24b0e <queue_insert+0xf6>
   24b36:	bf00      	nop
   24b38:	0002e9fe 	.word	0x0002e9fe
   24b3c:	0002ea50 	.word	0x0002ea50
   24b40:	0002e93e 	.word	0x0002e93e
   24b44:	0002ea65 	.word	0x0002ea65
   24b48:	0002ea24 	.word	0x0002ea24
   24b4c:	0002ea3b 	.word	0x0002ea3b

00024b50 <k_queue_append_list>:
}
#include <syscalls/k_queue_alloc_prepend_mrsh.c>
#endif

int k_queue_append_list(struct k_queue *queue, void *head, void *tail)
{
   24b50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24b54:	4605      	mov	r5, r0
   24b56:	4617      	mov	r7, r2
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, append_list, queue);

	/* invalid head or tail of list */
	CHECKIF(head == NULL || tail == NULL) {
   24b58:	460c      	mov	r4, r1
   24b5a:	2900      	cmp	r1, #0
   24b5c:	d04a      	beq.n	24bf4 <k_queue_append_list+0xa4>
   24b5e:	2a00      	cmp	r2, #0
   24b60:	d048      	beq.n	24bf4 <k_queue_append_list+0xa4>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, -EINVAL);

		return -EINVAL;
	}

	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24b62:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   24b66:	f04f 0340 	mov.w	r3, #64	; 0x40
   24b6a:	f3ef 8911 	mrs	r9, BASEPRI
   24b6e:	f383 8812 	msr	BASEPRI_MAX, r3
   24b72:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24b76:	4630      	mov	r0, r6
   24b78:	f7ff f90e 	bl	23d98 <z_spin_lock_valid>
   24b7c:	b968      	cbnz	r0, 24b9a <k_queue_append_list+0x4a>
   24b7e:	4a1f      	ldr	r2, [pc, #124]	; (24bfc <k_queue_append_list+0xac>)
   24b80:	491f      	ldr	r1, [pc, #124]	; (24c00 <k_queue_append_list+0xb0>)
   24b82:	4820      	ldr	r0, [pc, #128]	; (24c04 <k_queue_append_list+0xb4>)
   24b84:	2381      	movs	r3, #129	; 0x81
   24b86:	f004 f808 	bl	28b9a <printk>
   24b8a:	481f      	ldr	r0, [pc, #124]	; (24c08 <k_queue_append_list+0xb8>)
   24b8c:	4631      	mov	r1, r6
   24b8e:	f004 f804 	bl	28b9a <printk>
   24b92:	481a      	ldr	r0, [pc, #104]	; (24bfc <k_queue_append_list+0xac>)
   24b94:	2181      	movs	r1, #129	; 0x81
   24b96:	f004 fa41 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   24b9a:	4630      	mov	r0, r6
	struct k_thread *thread = NULL;

	if (head != NULL) {
		thread = z_unpend_first_thread(&queue->wait_q);
   24b9c:	f105 080c 	add.w	r8, r5, #12
   24ba0:	f7ff f918 	bl	23dd4 <z_spin_lock_set_owner>
   24ba4:	4640      	mov	r0, r8
   24ba6:	f001 fda7 	bl	266f8 <z_unpend_first_thread>
   24baa:	f04f 0a00 	mov.w	sl, #0
	}

	while ((head != NULL) && (thread != NULL)) {
   24bae:	b920      	cbnz	r0, 24bba <k_queue_append_list+0x6a>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24bb0:	686b      	ldr	r3, [r5, #4]
   24bb2:	b9cb      	cbnz	r3, 24be8 <k_queue_append_list+0x98>
	list->head = node;
   24bb4:	602c      	str	r4, [r5, #0]
	list->tail = node;
   24bb6:	606f      	str	r7, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   24bb8:	e00a      	b.n	24bd0 <k_queue_append_list+0x80>
	thread->base.swap_data = data;
   24bba:	6144      	str	r4, [r0, #20]
   24bbc:	f8c0 a0b8 	str.w	sl, [r0, #184]	; 0xb8
	z_ready_thread(thread);
   24bc0:	f001 f9ea 	bl	25f98 <z_ready_thread>
		prepare_thread_to_run(thread, head);
		head = *(void **)head;
   24bc4:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   24bc6:	4640      	mov	r0, r8
   24bc8:	f001 fd96 	bl	266f8 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   24bcc:	2c00      	cmp	r4, #0
   24bce:	d1ee      	bne.n	24bae <k_queue_append_list+0x5e>
	z_handle_obj_poll_events(&queue->poll_events, state);
   24bd0:	2104      	movs	r1, #4
   24bd2:	f105 0014 	add.w	r0, r5, #20
   24bd6:	f007 ffdc 	bl	2cb92 <z_handle_obj_poll_events>
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, append_list, queue, 0);

	handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE);
	z_reschedule(&queue->lock, key);
   24bda:	4630      	mov	r0, r6
   24bdc:	4649      	mov	r1, r9
   24bde:	f000 ff3b 	bl	25a58 <z_reschedule>
	return 0;
   24be2:	2000      	movs	r0, #0
}
   24be4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   24be8:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   24bea:	f001 0103 	and.w	r1, r1, #3
   24bee:	430c      	orrs	r4, r1
   24bf0:	601c      	str	r4, [r3, #0]
}
   24bf2:	e7e0      	b.n	24bb6 <k_queue_append_list+0x66>
		return -EINVAL;
   24bf4:	f06f 0015 	mvn.w	r0, #21
   24bf8:	e7f4      	b.n	24be4 <k_queue_append_list+0x94>
   24bfa:	bf00      	nop
   24bfc:	0002e9fe 	.word	0x0002e9fe
   24c00:	0002ea50 	.word	0x0002ea50
   24c04:	0002e93e 	.word	0x0002e93e
   24c08:	0002ea65 	.word	0x0002ea65

00024c0c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   24c0c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   24c10:	4606      	mov	r6, r0
   24c12:	4690      	mov	r8, r2
   24c14:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   24c16:	f100 0508 	add.w	r5, r0, #8
   24c1a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24c1e:	f3ef 8711 	mrs	r7, BASEPRI
   24c22:	f383 8812 	msr	BASEPRI_MAX, r3
   24c26:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24c2a:	4628      	mov	r0, r5
   24c2c:	f7ff f8b4 	bl	23d98 <z_spin_lock_valid>
   24c30:	b968      	cbnz	r0, 24c4e <z_impl_k_queue_get+0x42>
   24c32:	4a25      	ldr	r2, [pc, #148]	; (24cc8 <z_impl_k_queue_get+0xbc>)
   24c34:	4925      	ldr	r1, [pc, #148]	; (24ccc <z_impl_k_queue_get+0xc0>)
   24c36:	4826      	ldr	r0, [pc, #152]	; (24cd0 <z_impl_k_queue_get+0xc4>)
   24c38:	2381      	movs	r3, #129	; 0x81
   24c3a:	f003 ffae 	bl	28b9a <printk>
   24c3e:	4825      	ldr	r0, [pc, #148]	; (24cd4 <z_impl_k_queue_get+0xc8>)
   24c40:	4629      	mov	r1, r5
   24c42:	f003 ffaa 	bl	28b9a <printk>
   24c46:	4820      	ldr	r0, [pc, #128]	; (24cc8 <z_impl_k_queue_get+0xbc>)
   24c48:	2181      	movs	r1, #129	; 0x81
   24c4a:	f004 f9e7 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   24c4e:	4628      	mov	r0, r5
   24c50:	f7ff f8c0 	bl	23dd4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(sflist)
   24c54:	6834      	ldr	r4, [r6, #0]
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   24c56:	b334      	cbz	r4, 24ca6 <z_impl_k_queue_get+0x9a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24c58:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   24c5a:	6872      	ldr	r2, [r6, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   24c5c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   24c60:	4294      	cmp	r4, r2
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   24c62:	4620      	mov	r0, r4
	list->head = node;
   24c64:	6033      	str	r3, [r6, #0]
	list->tail = node;
   24c66:	bf08      	it	eq
   24c68:	6073      	streq	r3, [r6, #4]
   24c6a:	2101      	movs	r1, #1
   24c6c:	f007 fe41 	bl	2c8f2 <z_queue_node_peek>
   24c70:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24c72:	4628      	mov	r0, r5
   24c74:	f7ff f89e 	bl	23db4 <z_spin_unlock_valid>
   24c78:	b968      	cbnz	r0, 24c96 <z_impl_k_queue_get+0x8a>
   24c7a:	4a13      	ldr	r2, [pc, #76]	; (24cc8 <z_impl_k_queue_get+0xbc>)
   24c7c:	4916      	ldr	r1, [pc, #88]	; (24cd8 <z_impl_k_queue_get+0xcc>)
   24c7e:	4814      	ldr	r0, [pc, #80]	; (24cd0 <z_impl_k_queue_get+0xc4>)
   24c80:	23ac      	movs	r3, #172	; 0xac
   24c82:	f003 ff8a 	bl	28b9a <printk>
   24c86:	4815      	ldr	r0, [pc, #84]	; (24cdc <z_impl_k_queue_get+0xd0>)
   24c88:	4629      	mov	r1, r5
   24c8a:	f003 ff86 	bl	28b9a <printk>
   24c8e:	480e      	ldr	r0, [pc, #56]	; (24cc8 <z_impl_k_queue_get+0xbc>)
   24c90:	21ac      	movs	r1, #172	; 0xac
   24c92:	f004 f9c3 	bl	2901c <assert_post_action>
	__asm__ volatile(
   24c96:	f387 8811 	msr	BASEPRI, r7
   24c9a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   24c9e:	4620      	mov	r0, r4
   24ca0:	b003      	add	sp, #12
   24ca2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24ca6:	ea58 0309 	orrs.w	r3, r8, r9
   24caa:	d0e2      	beq.n	24c72 <z_impl_k_queue_get+0x66>
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   24cac:	e9cd 8900 	strd	r8, r9, [sp]
   24cb0:	f106 020c 	add.w	r2, r6, #12
   24cb4:	4639      	mov	r1, r7
   24cb6:	4628      	mov	r0, r5
   24cb8:	f001 fb20 	bl	262fc <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   24cbc:	2800      	cmp	r0, #0
   24cbe:	d1ee      	bne.n	24c9e <z_impl_k_queue_get+0x92>
   24cc0:	4b07      	ldr	r3, [pc, #28]	; (24ce0 <z_impl_k_queue_get+0xd4>)
   24cc2:	689b      	ldr	r3, [r3, #8]
   24cc4:	695c      	ldr	r4, [r3, #20]
   24cc6:	e7ea      	b.n	24c9e <z_impl_k_queue_get+0x92>
   24cc8:	0002e9fe 	.word	0x0002e9fe
   24ccc:	0002ea50 	.word	0x0002ea50
   24cd0:	0002e93e 	.word	0x0002e93e
   24cd4:	0002ea65 	.word	0x0002ea65
   24cd8:	0002ea24 	.word	0x0002ea24
   24cdc:	0002ea3b 	.word	0x0002ea3b
   24ce0:	20001f98 	.word	0x20001f98

00024ce4 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   24ce4:	b538      	push	{r3, r4, r5, lr}
   24ce6:	4604      	mov	r4, r0
	__asm__ volatile(
   24ce8:	f04f 0340 	mov.w	r3, #64	; 0x40
   24cec:	f3ef 8511 	mrs	r5, BASEPRI
   24cf0:	f383 8812 	msr	BASEPRI_MAX, r3
   24cf4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24cf8:	4817      	ldr	r0, [pc, #92]	; (24d58 <z_impl_k_sem_give+0x74>)
   24cfa:	f7ff f84d 	bl	23d98 <z_spin_lock_valid>
   24cfe:	b968      	cbnz	r0, 24d1c <z_impl_k_sem_give+0x38>
   24d00:	4a16      	ldr	r2, [pc, #88]	; (24d5c <z_impl_k_sem_give+0x78>)
   24d02:	4917      	ldr	r1, [pc, #92]	; (24d60 <z_impl_k_sem_give+0x7c>)
   24d04:	4817      	ldr	r0, [pc, #92]	; (24d64 <z_impl_k_sem_give+0x80>)
   24d06:	2381      	movs	r3, #129	; 0x81
   24d08:	f003 ff47 	bl	28b9a <printk>
   24d0c:	4912      	ldr	r1, [pc, #72]	; (24d58 <z_impl_k_sem_give+0x74>)
   24d0e:	4816      	ldr	r0, [pc, #88]	; (24d68 <z_impl_k_sem_give+0x84>)
   24d10:	f003 ff43 	bl	28b9a <printk>
   24d14:	4811      	ldr	r0, [pc, #68]	; (24d5c <z_impl_k_sem_give+0x78>)
   24d16:	2181      	movs	r1, #129	; 0x81
   24d18:	f004 f980 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   24d1c:	480e      	ldr	r0, [pc, #56]	; (24d58 <z_impl_k_sem_give+0x74>)
   24d1e:	f7ff f859 	bl	23dd4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
   24d22:	4620      	mov	r0, r4
   24d24:	f001 fce8 	bl	266f8 <z_unpend_first_thread>

	if (thread != NULL) {
   24d28:	b150      	cbz	r0, 24d40 <z_impl_k_sem_give+0x5c>
   24d2a:	2200      	movs	r2, #0
   24d2c:	f8c0 20b8 	str.w	r2, [r0, #184]	; 0xb8
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   24d30:	f001 f932 	bl	25f98 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   24d34:	4629      	mov	r1, r5
   24d36:	4808      	ldr	r0, [pc, #32]	; (24d58 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
   24d38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   24d3c:	f000 be8c 	b.w	25a58 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   24d40:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   24d44:	429a      	cmp	r2, r3
   24d46:	bf18      	it	ne
   24d48:	3301      	addne	r3, #1
   24d4a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   24d4c:	2102      	movs	r1, #2
   24d4e:	f104 0010 	add.w	r0, r4, #16
   24d52:	f007 ff1e 	bl	2cb92 <z_handle_obj_poll_events>
}
   24d56:	e7ed      	b.n	24d34 <z_impl_k_sem_give+0x50>
   24d58:	200029e8 	.word	0x200029e8
   24d5c:	0002e9fe 	.word	0x0002e9fe
   24d60:	0002ea50 	.word	0x0002ea50
   24d64:	0002e93e 	.word	0x0002e93e
   24d68:	0002ea65 	.word	0x0002ea65

00024d6c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   24d6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24d6e:	4604      	mov	r4, r0
   24d70:	4616      	mov	r6, r2
   24d72:	461f      	mov	r7, r3
   24d74:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
   24d78:	b17b      	cbz	r3, 24d9a <z_impl_k_sem_take+0x2e>
   24d7a:	ea56 0307 	orrs.w	r3, r6, r7
   24d7e:	d00c      	beq.n	24d9a <z_impl_k_sem_take+0x2e>
   24d80:	4935      	ldr	r1, [pc, #212]	; (24e58 <z_impl_k_sem_take+0xec>)
   24d82:	4a36      	ldr	r2, [pc, #216]	; (24e5c <z_impl_k_sem_take+0xf0>)
   24d84:	4836      	ldr	r0, [pc, #216]	; (24e60 <z_impl_k_sem_take+0xf4>)
   24d86:	2379      	movs	r3, #121	; 0x79
   24d88:	f003 ff07 	bl	28b9a <printk>
   24d8c:	4835      	ldr	r0, [pc, #212]	; (24e64 <z_impl_k_sem_take+0xf8>)
   24d8e:	f003 ff04 	bl	28b9a <printk>
   24d92:	4832      	ldr	r0, [pc, #200]	; (24e5c <z_impl_k_sem_take+0xf0>)
   24d94:	2179      	movs	r1, #121	; 0x79
   24d96:	f004 f941 	bl	2901c <assert_post_action>
   24d9a:	f04f 0340 	mov.w	r3, #64	; 0x40
   24d9e:	f3ef 8511 	mrs	r5, BASEPRI
   24da2:	f383 8812 	msr	BASEPRI_MAX, r3
   24da6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24daa:	482f      	ldr	r0, [pc, #188]	; (24e68 <z_impl_k_sem_take+0xfc>)
   24dac:	f7fe fff4 	bl	23d98 <z_spin_lock_valid>
   24db0:	b968      	cbnz	r0, 24dce <z_impl_k_sem_take+0x62>
   24db2:	4a2e      	ldr	r2, [pc, #184]	; (24e6c <z_impl_k_sem_take+0x100>)
   24db4:	492e      	ldr	r1, [pc, #184]	; (24e70 <z_impl_k_sem_take+0x104>)
   24db6:	482a      	ldr	r0, [pc, #168]	; (24e60 <z_impl_k_sem_take+0xf4>)
   24db8:	2381      	movs	r3, #129	; 0x81
   24dba:	f003 feee 	bl	28b9a <printk>
   24dbe:	492a      	ldr	r1, [pc, #168]	; (24e68 <z_impl_k_sem_take+0xfc>)
   24dc0:	482c      	ldr	r0, [pc, #176]	; (24e74 <z_impl_k_sem_take+0x108>)
   24dc2:	f003 feea 	bl	28b9a <printk>
   24dc6:	4829      	ldr	r0, [pc, #164]	; (24e6c <z_impl_k_sem_take+0x100>)
   24dc8:	2181      	movs	r1, #129	; 0x81
   24dca:	f004 f927 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   24dce:	4826      	ldr	r0, [pc, #152]	; (24e68 <z_impl_k_sem_take+0xfc>)
   24dd0:	f7ff f800 	bl	23dd4 <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
   24dd4:	68a3      	ldr	r3, [r4, #8]
   24dd6:	b1d3      	cbz	r3, 24e0e <z_impl_k_sem_take+0xa2>
		sem->count--;
   24dd8:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24dda:	4823      	ldr	r0, [pc, #140]	; (24e68 <z_impl_k_sem_take+0xfc>)
   24ddc:	60a3      	str	r3, [r4, #8]
   24dde:	f7fe ffe9 	bl	23db4 <z_spin_unlock_valid>
   24de2:	b968      	cbnz	r0, 24e00 <z_impl_k_sem_take+0x94>
   24de4:	4a21      	ldr	r2, [pc, #132]	; (24e6c <z_impl_k_sem_take+0x100>)
   24de6:	4924      	ldr	r1, [pc, #144]	; (24e78 <z_impl_k_sem_take+0x10c>)
   24de8:	481d      	ldr	r0, [pc, #116]	; (24e60 <z_impl_k_sem_take+0xf4>)
   24dea:	23ac      	movs	r3, #172	; 0xac
   24dec:	f003 fed5 	bl	28b9a <printk>
   24df0:	491d      	ldr	r1, [pc, #116]	; (24e68 <z_impl_k_sem_take+0xfc>)
   24df2:	4822      	ldr	r0, [pc, #136]	; (24e7c <z_impl_k_sem_take+0x110>)
   24df4:	f003 fed1 	bl	28b9a <printk>
   24df8:	481c      	ldr	r0, [pc, #112]	; (24e6c <z_impl_k_sem_take+0x100>)
   24dfa:	21ac      	movs	r1, #172	; 0xac
   24dfc:	f004 f90e 	bl	2901c <assert_post_action>
	__asm__ volatile(
   24e00:	f385 8811 	msr	BASEPRI, r5
   24e04:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   24e08:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
   24e0a:	b003      	add	sp, #12
   24e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   24e0e:	ea56 0307 	orrs.w	r3, r6, r7
   24e12:	d118      	bne.n	24e46 <z_impl_k_sem_take+0xda>
   24e14:	4814      	ldr	r0, [pc, #80]	; (24e68 <z_impl_k_sem_take+0xfc>)
   24e16:	f7fe ffcd 	bl	23db4 <z_spin_unlock_valid>
   24e1a:	b968      	cbnz	r0, 24e38 <z_impl_k_sem_take+0xcc>
   24e1c:	4a13      	ldr	r2, [pc, #76]	; (24e6c <z_impl_k_sem_take+0x100>)
   24e1e:	4916      	ldr	r1, [pc, #88]	; (24e78 <z_impl_k_sem_take+0x10c>)
   24e20:	480f      	ldr	r0, [pc, #60]	; (24e60 <z_impl_k_sem_take+0xf4>)
   24e22:	23ac      	movs	r3, #172	; 0xac
   24e24:	f003 feb9 	bl	28b9a <printk>
   24e28:	490f      	ldr	r1, [pc, #60]	; (24e68 <z_impl_k_sem_take+0xfc>)
   24e2a:	4814      	ldr	r0, [pc, #80]	; (24e7c <z_impl_k_sem_take+0x110>)
   24e2c:	f003 feb5 	bl	28b9a <printk>
   24e30:	480e      	ldr	r0, [pc, #56]	; (24e6c <z_impl_k_sem_take+0x100>)
   24e32:	21ac      	movs	r1, #172	; 0xac
   24e34:	f004 f8f2 	bl	2901c <assert_post_action>
   24e38:	f385 8811 	msr	BASEPRI, r5
   24e3c:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   24e40:	f06f 000f 	mvn.w	r0, #15
   24e44:	e7e1      	b.n	24e0a <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   24e46:	e9cd 6700 	strd	r6, r7, [sp]
   24e4a:	4622      	mov	r2, r4
   24e4c:	4629      	mov	r1, r5
   24e4e:	4806      	ldr	r0, [pc, #24]	; (24e68 <z_impl_k_sem_take+0xfc>)
   24e50:	f001 fa54 	bl	262fc <z_pend_curr>
	return ret;
   24e54:	e7d9      	b.n	24e0a <z_impl_k_sem_take+0x9e>
   24e56:	bf00      	nop
   24e58:	00033ff2 	.word	0x00033ff2
   24e5c:	00033fd2 	.word	0x00033fd2
   24e60:	0002e93e 	.word	0x0002e93e
   24e64:	00033299 	.word	0x00033299
   24e68:	200029e8 	.word	0x200029e8
   24e6c:	0002e9fe 	.word	0x0002e9fe
   24e70:	0002ea50 	.word	0x0002ea50
   24e74:	0002ea65 	.word	0x0002ea65
   24e78:	0002ea24 	.word	0x0002ea24
   24e7c:	0002ea3b 	.word	0x0002ea3b

00024e80 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   24e80:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
   24e82:	4b09      	ldr	r3, [pc, #36]	; (24ea8 <k_sys_work_q_init+0x28>)
   24e84:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
   24e86:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
   24e88:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
   24e8a:	9300      	str	r3, [sp, #0]
   24e8c:	4907      	ldr	r1, [pc, #28]	; (24eac <k_sys_work_q_init+0x2c>)
   24e8e:	4808      	ldr	r0, [pc, #32]	; (24eb0 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
   24e90:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
   24e94:	f04f 33ff 	mov.w	r3, #4294967295
   24e98:	f44f 6200 	mov.w	r2, #2048	; 0x800
   24e9c:	f000 fa88 	bl	253b0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
   24ea0:	4620      	mov	r0, r4
   24ea2:	b004      	add	sp, #16
   24ea4:	bd10      	pop	{r4, pc}
   24ea6:	bf00      	nop
   24ea8:	0003403f 	.word	0x0003403f
   24eac:	20006260 	.word	0x20006260
   24eb0:	20002158 	.word	0x20002158

00024eb4 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
   24eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24eb8:	4e7e      	ldr	r6, [pc, #504]	; (250b4 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   24eba:	4f7f      	ldr	r7, [pc, #508]	; (250b8 <work_queue_main+0x204>)
{
   24ebc:	b085      	sub	sp, #20
   24ebe:	4604      	mov	r4, r0
	__asm__ volatile(
   24ec0:	f04f 0340 	mov.w	r3, #64	; 0x40
   24ec4:	f3ef 8811 	mrs	r8, BASEPRI
   24ec8:	f383 8812 	msr	BASEPRI_MAX, r3
   24ecc:	f3bf 8f6f 	isb	sy
   24ed0:	4630      	mov	r0, r6
   24ed2:	f7fe ff61 	bl	23d98 <z_spin_lock_valid>
   24ed6:	b968      	cbnz	r0, 24ef4 <work_queue_main+0x40>
   24ed8:	4a78      	ldr	r2, [pc, #480]	; (250bc <work_queue_main+0x208>)
   24eda:	4979      	ldr	r1, [pc, #484]	; (250c0 <work_queue_main+0x20c>)
   24edc:	4879      	ldr	r0, [pc, #484]	; (250c4 <work_queue_main+0x210>)
   24ede:	2381      	movs	r3, #129	; 0x81
   24ee0:	f003 fe5b 	bl	28b9a <printk>
   24ee4:	4878      	ldr	r0, [pc, #480]	; (250c8 <work_queue_main+0x214>)
   24ee6:	4631      	mov	r1, r6
   24ee8:	f003 fe57 	bl	28b9a <printk>
   24eec:	4873      	ldr	r0, [pc, #460]	; (250bc <work_queue_main+0x208>)
   24eee:	2181      	movs	r1, #129	; 0x81
   24ef0:	f004 f894 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   24ef4:	4630      	mov	r0, r6
   24ef6:	f7fe ff6d 	bl	23dd4 <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
   24efa:	f8d4 50c0 	ldr.w	r5, [r4, #192]	; 0xc0
	return list->head;
   24efe:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
Z_GENLIST_GET(slist, snode)
   24f02:	b9ad      	cbnz	r5, 24f30 <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
   24f04:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
   24f08:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
   24f0a:	f8c4 20d8 	str.w	r2, [r4, #216]	; 0xd8
		} else if (flag_test_and_clear(&queue->flags,
   24f0e:	f100 8092 	bmi.w	25036 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
   24f12:	2300      	movs	r3, #0
   24f14:	9302      	str	r3, [sp, #8]
   24f16:	f04f 32ff 	mov.w	r2, #4294967295
   24f1a:	f04f 33ff 	mov.w	r3, #4294967295
   24f1e:	e9cd 2300 	strd	r2, r3, [sp]
   24f22:	4641      	mov	r1, r8
   24f24:	f104 02c8 	add.w	r2, r4, #200	; 0xc8
   24f28:	4630      	mov	r0, r6
   24f2a:	f001 fef1 	bl	26d10 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
   24f2e:	e7c7      	b.n	24ec0 <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24f30:	f8d4 10c4 	ldr.w	r1, [r4, #196]	; 0xc4
   24f34:	682a      	ldr	r2, [r5, #0]
	list->head = node;
   24f36:	f8c4 20c0 	str.w	r2, [r4, #192]	; 0xc0
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24f3a:	428d      	cmp	r5, r1
   24f3c:	d101      	bne.n	24f42 <work_queue_main+0x8e>
	list->tail = node;
   24f3e:	f8c4 20c4 	str.w	r2, [r4, #196]	; 0xc4
	*flagp |= BIT(bit);
   24f42:	f043 0302 	orr.w	r3, r3, #2
   24f46:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	*flagp &= ~BIT(bit);
   24f4a:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
   24f4c:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
   24f50:	f023 0304 	bic.w	r3, r3, #4
   24f54:	f043 0301 	orr.w	r3, r3, #1
   24f58:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24f5a:	4630      	mov	r0, r6
   24f5c:	f7fe ff2a 	bl	23db4 <z_spin_unlock_valid>
   24f60:	b968      	cbnz	r0, 24f7e <work_queue_main+0xca>
   24f62:	4a56      	ldr	r2, [pc, #344]	; (250bc <work_queue_main+0x208>)
   24f64:	4959      	ldr	r1, [pc, #356]	; (250cc <work_queue_main+0x218>)
   24f66:	4857      	ldr	r0, [pc, #348]	; (250c4 <work_queue_main+0x210>)
   24f68:	23ac      	movs	r3, #172	; 0xac
   24f6a:	f003 fe16 	bl	28b9a <printk>
   24f6e:	4858      	ldr	r0, [pc, #352]	; (250d0 <work_queue_main+0x21c>)
   24f70:	4631      	mov	r1, r6
   24f72:	f003 fe12 	bl	28b9a <printk>
   24f76:	4851      	ldr	r0, [pc, #324]	; (250bc <work_queue_main+0x208>)
   24f78:	21ac      	movs	r1, #172	; 0xac
   24f7a:	f004 f84f 	bl	2901c <assert_post_action>
	__asm__ volatile(
   24f7e:	f388 8811 	msr	BASEPRI, r8
   24f82:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
   24f86:	f1b9 0f00 	cmp.w	r9, #0
   24f8a:	d10b      	bne.n	24fa4 <work_queue_main+0xf0>
   24f8c:	4951      	ldr	r1, [pc, #324]	; (250d4 <work_queue_main+0x220>)
   24f8e:	484d      	ldr	r0, [pc, #308]	; (250c4 <work_queue_main+0x210>)
   24f90:	4a51      	ldr	r2, [pc, #324]	; (250d8 <work_queue_main+0x224>)
   24f92:	f44f 7322 	mov.w	r3, #648	; 0x288
   24f96:	f003 fe00 	bl	28b9a <printk>
   24f9a:	484f      	ldr	r0, [pc, #316]	; (250d8 <work_queue_main+0x224>)
   24f9c:	f44f 7122 	mov.w	r1, #648	; 0x288
   24fa0:	f004 f83c 	bl	2901c <assert_post_action>
		handler(work);
   24fa4:	4628      	mov	r0, r5
   24fa6:	47c8      	blx	r9
	__asm__ volatile(
   24fa8:	f04f 0340 	mov.w	r3, #64	; 0x40
   24fac:	f3ef 8a11 	mrs	sl, BASEPRI
   24fb0:	f383 8812 	msr	BASEPRI_MAX, r3
   24fb4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   24fb8:	4630      	mov	r0, r6
   24fba:	f7fe feed 	bl	23d98 <z_spin_lock_valid>
   24fbe:	b968      	cbnz	r0, 24fdc <work_queue_main+0x128>
   24fc0:	4a3e      	ldr	r2, [pc, #248]	; (250bc <work_queue_main+0x208>)
   24fc2:	493f      	ldr	r1, [pc, #252]	; (250c0 <work_queue_main+0x20c>)
   24fc4:	483f      	ldr	r0, [pc, #252]	; (250c4 <work_queue_main+0x210>)
   24fc6:	2381      	movs	r3, #129	; 0x81
   24fc8:	f003 fde7 	bl	28b9a <printk>
   24fcc:	483e      	ldr	r0, [pc, #248]	; (250c8 <work_queue_main+0x214>)
   24fce:	4631      	mov	r1, r6
   24fd0:	f003 fde3 	bl	28b9a <printk>
   24fd4:	4839      	ldr	r0, [pc, #228]	; (250bc <work_queue_main+0x208>)
   24fd6:	2181      	movs	r1, #129	; 0x81
   24fd8:	f004 f820 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   24fdc:	4630      	mov	r0, r6
   24fde:	f7fe fef9 	bl	23dd4 <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
   24fe2:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24fe4:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
   24fe6:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   24fea:	d42e      	bmi.n	2504a <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
   24fec:	60ea      	str	r2, [r5, #12]
   24fee:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
   24ff2:	f023 0302 	bic.w	r3, r3, #2
   24ff6:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   24ffa:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
   24ffc:	f3c3 2500 	ubfx	r5, r3, #8, #1
   25000:	f7fe fed8 	bl	23db4 <z_spin_unlock_valid>
   25004:	b968      	cbnz	r0, 25022 <work_queue_main+0x16e>
   25006:	4a2d      	ldr	r2, [pc, #180]	; (250bc <work_queue_main+0x208>)
   25008:	4930      	ldr	r1, [pc, #192]	; (250cc <work_queue_main+0x218>)
   2500a:	482e      	ldr	r0, [pc, #184]	; (250c4 <work_queue_main+0x210>)
   2500c:	23ac      	movs	r3, #172	; 0xac
   2500e:	f003 fdc4 	bl	28b9a <printk>
   25012:	482f      	ldr	r0, [pc, #188]	; (250d0 <work_queue_main+0x21c>)
   25014:	4631      	mov	r1, r6
   25016:	f003 fdc0 	bl	28b9a <printk>
   2501a:	4828      	ldr	r0, [pc, #160]	; (250bc <work_queue_main+0x208>)
   2501c:	21ac      	movs	r1, #172	; 0xac
   2501e:	f003 fffd 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25022:	f38a 8811 	msr	BASEPRI, sl
   25026:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
   2502a:	2d00      	cmp	r5, #0
   2502c:	f47f af48 	bne.w	24ec0 <work_queue_main+0xc>
	z_impl_k_yield();
   25030:	f001 fbbe 	bl	267b0 <z_impl_k_yield>
}
   25034:	e744      	b.n	24ec0 <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
   25036:	f104 05d0 	add.w	r5, r4, #208	; 0xd0
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
   2503a:	2200      	movs	r2, #0
   2503c:	2101      	movs	r1, #1
   2503e:	4628      	mov	r0, r5
   25040:	f001 fe0c 	bl	26c5c <z_sched_wake>
   25044:	2800      	cmp	r0, #0
   25046:	d1f8      	bne.n	2503a <work_queue_main+0x186>
   25048:	e763      	b.n	24f12 <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2504a:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
   2504c:	f023 0303 	bic.w	r3, r3, #3
   25050:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   25052:	2800      	cmp	r0, #0
   25054:	d0cb      	beq.n	24fee <work_queue_main+0x13a>
	return node->next;
   25056:	6803      	ldr	r3, [r0, #0]
   25058:	2b00      	cmp	r3, #0
   2505a:	bf38      	it	cc
   2505c:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2505e:	f04f 0900 	mov.w	r9, #0
   25062:	4698      	mov	r8, r3
	parent->next = child;
   25064:	46cb      	mov	fp, r9
		if (wc->work == work) {
   25066:	6843      	ldr	r3, [r0, #4]
   25068:	429d      	cmp	r5, r3
   2506a:	4602      	mov	r2, r0
   2506c:	d10d      	bne.n	2508a <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
   2506e:	6802      	ldr	r2, [r0, #0]
   25070:	f1b9 0f00 	cmp.w	r9, #0
   25074:	d115      	bne.n	250a2 <work_queue_main+0x1ee>
   25076:	687b      	ldr	r3, [r7, #4]
	list->head = node;
   25078:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
   2507a:	4283      	cmp	r3, r0
   2507c:	d100      	bne.n	25080 <work_queue_main+0x1cc>
	list->tail = node;
   2507e:	607a      	str	r2, [r7, #4]
	parent->next = child;
   25080:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
   25084:	f7ff fe2e 	bl	24ce4 <z_impl_k_sem_give>
}
   25088:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
   2508a:	f1b8 0f00 	cmp.w	r8, #0
   2508e:	d0ae      	beq.n	24fee <work_queue_main+0x13a>
	return node->next;
   25090:	f8d8 3000 	ldr.w	r3, [r8]
   25094:	2b00      	cmp	r3, #0
   25096:	bf38      	it	cc
   25098:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2509a:	4640      	mov	r0, r8
   2509c:	4691      	mov	r9, r2
   2509e:	4698      	mov	r8, r3
   250a0:	e7e1      	b.n	25066 <work_queue_main+0x1b2>
	parent->next = child;
   250a2:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
   250a6:	687b      	ldr	r3, [r7, #4]
   250a8:	4283      	cmp	r3, r0
	list->tail = node;
   250aa:	bf08      	it	eq
   250ac:	f8c7 9004 	streq.w	r9, [r7, #4]
}
   250b0:	e7e6      	b.n	25080 <work_queue_main+0x1cc>
   250b2:	bf00      	nop
   250b4:	200029ec 	.word	0x200029ec
   250b8:	200029f0 	.word	0x200029f0
   250bc:	0002e9fe 	.word	0x0002e9fe
   250c0:	0002ea50 	.word	0x0002ea50
   250c4:	0002e93e 	.word	0x0002e93e
   250c8:	0002ea65 	.word	0x0002ea65
   250cc:	0002ea24 	.word	0x0002ea24
   250d0:	0002ea3b 	.word	0x0002ea3b
   250d4:	00034069 	.word	0x00034069
   250d8:	00034048 	.word	0x00034048

000250dc <cancel_sync_locked>:
	return (*flagp & BIT(bit)) != 0U;
   250dc:	68c3      	ldr	r3, [r0, #12]
{
   250de:	b570      	push	{r4, r5, r6, lr}
	return (*flagp & BIT(bit)) != 0U;
   250e0:	f3c3 0640 	ubfx	r6, r3, #1, #1
	if (ret) {
   250e4:	079b      	lsls	r3, r3, #30
{
   250e6:	4605      	mov	r5, r0
   250e8:	460c      	mov	r4, r1
	if (ret) {
   250ea:	d50d      	bpl.n	25108 <cancel_sync_locked+0x2c>
	return z_impl_k_sem_init(sem, initial_count, limit);
   250ec:	2201      	movs	r2, #1
   250ee:	2100      	movs	r1, #0
   250f0:	f104 0008 	add.w	r0, r4, #8
   250f4:	f007 fc2b 	bl	2c94e <z_impl_k_sem_init>
	parent->next = child;
   250f8:	2300      	movs	r3, #0
   250fa:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   250fc:	4b05      	ldr	r3, [pc, #20]	; (25114 <cancel_sync_locked+0x38>)
	canceler->work = work;
   250fe:	6065      	str	r5, [r4, #4]
   25100:	685a      	ldr	r2, [r3, #4]
   25102:	b91a      	cbnz	r2, 2510c <cancel_sync_locked+0x30>
	list->head = node;
   25104:	e9c3 4400 	strd	r4, r4, [r3]
}
   25108:	4630      	mov	r0, r6
   2510a:	bd70      	pop	{r4, r5, r6, pc}
	parent->next = child;
   2510c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2510e:	605c      	str	r4, [r3, #4]
}
   25110:	e7fa      	b.n	25108 <cancel_sync_locked+0x2c>
   25112:	bf00      	nop
   25114:	200029f0 	.word	0x200029f0

00025118 <submit_to_queue_locked>:
{
   25118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2511a:	68c3      	ldr	r3, [r0, #12]
   2511c:	079a      	lsls	r2, r3, #30
{
   2511e:	4604      	mov	r4, r0
   25120:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   25122:	f3c3 0540 	ubfx	r5, r3, #1, #1
   25126:	d42b      	bmi.n	25180 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
   25128:	075f      	lsls	r7, r3, #29
   2512a:	d42b      	bmi.n	25184 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
   2512c:	680a      	ldr	r2, [r1, #0]
   2512e:	b90a      	cbnz	r2, 25134 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
   25130:	6882      	ldr	r2, [r0, #8]
   25132:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
   25134:	07d8      	lsls	r0, r3, #31
   25136:	d528      	bpl.n	2518a <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
   25138:	68a3      	ldr	r3, [r4, #8]
   2513a:	b95b      	cbnz	r3, 25154 <submit_to_queue_locked+0x3c>
   2513c:	4924      	ldr	r1, [pc, #144]	; (251d0 <submit_to_queue_locked+0xb8>)
   2513e:	4825      	ldr	r0, [pc, #148]	; (251d4 <submit_to_queue_locked+0xbc>)
   25140:	4a25      	ldr	r2, [pc, #148]	; (251d8 <submit_to_queue_locked+0xc0>)
   25142:	f44f 73a7 	mov.w	r3, #334	; 0x14e
   25146:	f003 fd28 	bl	28b9a <printk>
   2514a:	4823      	ldr	r0, [pc, #140]	; (251d8 <submit_to_queue_locked+0xc0>)
   2514c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
   25150:	f003 ff64 	bl	2901c <assert_post_action>
			*queuep = work->queue;
   25154:	68a3      	ldr	r3, [r4, #8]
   25156:	6033      	str	r3, [r6, #0]
			ret = 2;
   25158:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
   2515a:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
   2515c:	b38f      	cbz	r7, 251c2 <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2515e:	4b1f      	ldr	r3, [pc, #124]	; (251dc <submit_to_queue_locked+0xc4>)
   25160:	689b      	ldr	r3, [r3, #8]
   25162:	42bb      	cmp	r3, r7
   25164:	d113      	bne.n	2518e <submit_to_queue_locked+0x76>
   25166:	f007 fb8b 	bl	2c880 <k_is_in_isr>
   2516a:	f080 0001 	eor.w	r0, r0, #1
   2516e:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
   25170:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   25174:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
   25176:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
   2517a:	d525      	bpl.n	251c8 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
   2517c:	b14a      	cbz	r2, 25192 <submit_to_queue_locked+0x7a>
   2517e:	b950      	cbnz	r0, 25196 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
   25180:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
   25184:	2300      	movs	r3, #0
   25186:	6033      	str	r3, [r6, #0]
	return ret;
   25188:	e015      	b.n	251b6 <submit_to_queue_locked+0x9e>
		ret = 1;
   2518a:	2501      	movs	r5, #1
   2518c:	e7e5      	b.n	2515a <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
   2518e:	2000      	movs	r0, #0
   25190:	e7ee      	b.n	25170 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
   25192:	071b      	lsls	r3, r3, #28
   25194:	d4f4      	bmi.n	25180 <submit_to_queue_locked+0x68>
	parent->next = child;
   25196:	2300      	movs	r3, #0
   25198:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   2519a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
   2519e:	b963      	cbnz	r3, 251ba <submit_to_queue_locked+0xa2>
	list->head = node;
   251a0:	e9c7 4430 	strd	r4, r4, [r7, #192]	; 0xc0
		(void)notify_queue_locked(queue);
   251a4:	4638      	mov	r0, r7
   251a6:	f007 fbe2 	bl	2c96e <notify_queue_locked>
	*flagp |= BIT(bit);
   251aa:	68e3      	ldr	r3, [r4, #12]
   251ac:	f043 0304 	orr.w	r3, r3, #4
   251b0:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
   251b2:	6833      	ldr	r3, [r6, #0]
   251b4:	60a3      	str	r3, [r4, #8]
}
   251b6:	4628      	mov	r0, r5
   251b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
   251ba:	601c      	str	r4, [r3, #0]
	list->tail = node;
   251bc:	f8c7 40c4 	str.w	r4, [r7, #196]	; 0xc4
}
   251c0:	e7f0      	b.n	251a4 <submit_to_queue_locked+0x8c>
		return -EINVAL;
   251c2:	f06f 0515 	mvn.w	r5, #21
   251c6:	e7dd      	b.n	25184 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
   251c8:	f06f 0512 	mvn.w	r5, #18
   251cc:	e7da      	b.n	25184 <submit_to_queue_locked+0x6c>
   251ce:	bf00      	nop
   251d0:	00034080 	.word	0x00034080
   251d4:	0002e93e 	.word	0x0002e93e
   251d8:	00034048 	.word	0x00034048
   251dc:	20001f98 	.word	0x20001f98

000251e0 <work_timeout>:
 * Invoked by timeout infrastructure.
 * Takes and releases work lock.
 * Conditionally reschedules.
 */
static void work_timeout(struct _timeout *to)
{
   251e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   251e2:	4604      	mov	r4, r0
	__asm__ volatile(
   251e4:	f04f 0340 	mov.w	r3, #64	; 0x40
   251e8:	f3ef 8511 	mrs	r5, BASEPRI
   251ec:	f383 8812 	msr	BASEPRI_MAX, r3
   251f0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   251f4:	481e      	ldr	r0, [pc, #120]	; (25270 <work_timeout+0x90>)
   251f6:	f7fe fdcf 	bl	23d98 <z_spin_lock_valid>
   251fa:	b968      	cbnz	r0, 25218 <work_timeout+0x38>
   251fc:	4a1d      	ldr	r2, [pc, #116]	; (25274 <work_timeout+0x94>)
   251fe:	491e      	ldr	r1, [pc, #120]	; (25278 <work_timeout+0x98>)
   25200:	481e      	ldr	r0, [pc, #120]	; (2527c <work_timeout+0x9c>)
   25202:	2381      	movs	r3, #129	; 0x81
   25204:	f003 fcc9 	bl	28b9a <printk>
   25208:	4919      	ldr	r1, [pc, #100]	; (25270 <work_timeout+0x90>)
   2520a:	481d      	ldr	r0, [pc, #116]	; (25280 <work_timeout+0xa0>)
   2520c:	f003 fcc5 	bl	28b9a <printk>
   25210:	4818      	ldr	r0, [pc, #96]	; (25274 <work_timeout+0x94>)
   25212:	2181      	movs	r1, #129	; 0x81
   25214:	f003 ff02 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   25218:	4815      	ldr	r0, [pc, #84]	; (25270 <work_timeout+0x90>)
   2521a:	f7fe fddb 	bl	23dd4 <z_spin_lock_set_owner>
	struct k_work_delayable *dw
		= CONTAINER_OF(to, struct k_work_delayable, timeout);
	struct k_work *wp = &dw->work;
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_work_q *queue = NULL;
   2521e:	2300      	movs	r3, #0
   25220:	9301      	str	r3, [sp, #4]
	bool ret = flag_test(flagp, bit);
   25222:	f854 3c04 	ldr.w	r3, [r4, #-4]
	*flagp &= ~BIT(bit);
   25226:	f023 0208 	bic.w	r2, r3, #8
	 * notified of new work at the next reschedule point.
	 *
	 * If not successful there is no notification that the work has been
	 * abandoned.  Sorry.
	 */
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   2522a:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2522c:	f844 2c04 	str.w	r2, [r4, #-4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
   25230:	d506      	bpl.n	25240 <work_timeout+0x60>
		queue = dw->queue;
   25232:	69a3      	ldr	r3, [r4, #24]
   25234:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
   25236:	a901      	add	r1, sp, #4
   25238:	f1a4 0010 	sub.w	r0, r4, #16
   2523c:	f7ff ff6c 	bl	25118 <submit_to_queue_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25240:	480b      	ldr	r0, [pc, #44]	; (25270 <work_timeout+0x90>)
   25242:	f7fe fdb7 	bl	23db4 <z_spin_unlock_valid>
   25246:	b968      	cbnz	r0, 25264 <work_timeout+0x84>
   25248:	4a0a      	ldr	r2, [pc, #40]	; (25274 <work_timeout+0x94>)
   2524a:	490e      	ldr	r1, [pc, #56]	; (25284 <work_timeout+0xa4>)
   2524c:	480b      	ldr	r0, [pc, #44]	; (2527c <work_timeout+0x9c>)
   2524e:	23ac      	movs	r3, #172	; 0xac
   25250:	f003 fca3 	bl	28b9a <printk>
   25254:	4906      	ldr	r1, [pc, #24]	; (25270 <work_timeout+0x90>)
   25256:	480c      	ldr	r0, [pc, #48]	; (25288 <work_timeout+0xa8>)
   25258:	f003 fc9f 	bl	28b9a <printk>
   2525c:	4805      	ldr	r0, [pc, #20]	; (25274 <work_timeout+0x94>)
   2525e:	21ac      	movs	r1, #172	; 0xac
   25260:	f003 fedc 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25264:	f385 8811 	msr	BASEPRI, r5
   25268:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
}
   2526c:	b003      	add	sp, #12
   2526e:	bd30      	pop	{r4, r5, pc}
   25270:	200029ec 	.word	0x200029ec
   25274:	0002e9fe 	.word	0x0002e9fe
   25278:	0002ea50 	.word	0x0002ea50
   2527c:	0002e93e 	.word	0x0002e93e
   25280:	0002ea65 	.word	0x0002ea65
   25284:	0002ea24 	.word	0x0002ea24
   25288:	0002ea3b 	.word	0x0002ea3b

0002528c <k_work_init>:
{
   2528c:	b538      	push	{r3, r4, r5, lr}
   2528e:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(work != NULL);
   25290:	4604      	mov	r4, r0
   25292:	b948      	cbnz	r0, 252a8 <k_work_init+0x1c>
   25294:	490d      	ldr	r1, [pc, #52]	; (252cc <k_work_init+0x40>)
   25296:	480e      	ldr	r0, [pc, #56]	; (252d0 <k_work_init+0x44>)
   25298:	4a0e      	ldr	r2, [pc, #56]	; (252d4 <k_work_init+0x48>)
   2529a:	2389      	movs	r3, #137	; 0x89
   2529c:	f003 fc7d 	bl	28b9a <printk>
   252a0:	480c      	ldr	r0, [pc, #48]	; (252d4 <k_work_init+0x48>)
   252a2:	2189      	movs	r1, #137	; 0x89
   252a4:	f003 feba 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   252a8:	b94d      	cbnz	r5, 252be <k_work_init+0x32>
   252aa:	490b      	ldr	r1, [pc, #44]	; (252d8 <k_work_init+0x4c>)
   252ac:	4808      	ldr	r0, [pc, #32]	; (252d0 <k_work_init+0x44>)
   252ae:	4a09      	ldr	r2, [pc, #36]	; (252d4 <k_work_init+0x48>)
   252b0:	238a      	movs	r3, #138	; 0x8a
   252b2:	f003 fc72 	bl	28b9a <printk>
   252b6:	4807      	ldr	r0, [pc, #28]	; (252d4 <k_work_init+0x48>)
   252b8:	218a      	movs	r1, #138	; 0x8a
   252ba:	f003 feaf 	bl	2901c <assert_post_action>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   252be:	2210      	movs	r2, #16
   252c0:	2100      	movs	r1, #0
   252c2:	4620      	mov	r0, r4
   252c4:	f007 fcbf 	bl	2cc46 <memset>
   252c8:	6065      	str	r5, [r4, #4]
}
   252ca:	bd38      	pop	{r3, r4, r5, pc}
   252cc:	0003411f 	.word	0x0003411f
   252d0:	0002e93e 	.word	0x0002e93e
   252d4:	00034048 	.word	0x00034048
   252d8:	00034069 	.word	0x00034069

000252dc <k_work_submit_to_queue>:
{
   252dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
   252de:	460c      	mov	r4, r1
{
   252e0:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
   252e2:	b959      	cbnz	r1, 252fc <k_work_submit_to_queue+0x20>
   252e4:	4926      	ldr	r1, [pc, #152]	; (25380 <k_work_submit_to_queue+0xa4>)
   252e6:	4827      	ldr	r0, [pc, #156]	; (25384 <k_work_submit_to_queue+0xa8>)
   252e8:	4a27      	ldr	r2, [pc, #156]	; (25388 <k_work_submit_to_queue+0xac>)
   252ea:	f240 1369 	movw	r3, #361	; 0x169
   252ee:	f003 fc54 	bl	28b9a <printk>
   252f2:	4825      	ldr	r0, [pc, #148]	; (25388 <k_work_submit_to_queue+0xac>)
   252f4:	f240 1169 	movw	r1, #361	; 0x169
   252f8:	f003 fe90 	bl	2901c <assert_post_action>
	__asm__ volatile(
   252fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   25300:	f3ef 8511 	mrs	r5, BASEPRI
   25304:	f383 8812 	msr	BASEPRI_MAX, r3
   25308:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2530c:	481f      	ldr	r0, [pc, #124]	; (2538c <k_work_submit_to_queue+0xb0>)
   2530e:	f7fe fd43 	bl	23d98 <z_spin_lock_valid>
   25312:	b968      	cbnz	r0, 25330 <k_work_submit_to_queue+0x54>
   25314:	4a1e      	ldr	r2, [pc, #120]	; (25390 <k_work_submit_to_queue+0xb4>)
   25316:	491f      	ldr	r1, [pc, #124]	; (25394 <k_work_submit_to_queue+0xb8>)
   25318:	481a      	ldr	r0, [pc, #104]	; (25384 <k_work_submit_to_queue+0xa8>)
   2531a:	2381      	movs	r3, #129	; 0x81
   2531c:	f003 fc3d 	bl	28b9a <printk>
   25320:	491a      	ldr	r1, [pc, #104]	; (2538c <k_work_submit_to_queue+0xb0>)
   25322:	481d      	ldr	r0, [pc, #116]	; (25398 <k_work_submit_to_queue+0xbc>)
   25324:	f003 fc39 	bl	28b9a <printk>
   25328:	4819      	ldr	r0, [pc, #100]	; (25390 <k_work_submit_to_queue+0xb4>)
   2532a:	2181      	movs	r1, #129	; 0x81
   2532c:	f003 fe76 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   25330:	4816      	ldr	r0, [pc, #88]	; (2538c <k_work_submit_to_queue+0xb0>)
   25332:	f7fe fd4f 	bl	23dd4 <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
   25336:	4620      	mov	r0, r4
   25338:	a901      	add	r1, sp, #4
   2533a:	f7ff feed 	bl	25118 <submit_to_queue_locked>
   2533e:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25340:	4812      	ldr	r0, [pc, #72]	; (2538c <k_work_submit_to_queue+0xb0>)
   25342:	f7fe fd37 	bl	23db4 <z_spin_unlock_valid>
   25346:	b968      	cbnz	r0, 25364 <k_work_submit_to_queue+0x88>
   25348:	4a11      	ldr	r2, [pc, #68]	; (25390 <k_work_submit_to_queue+0xb4>)
   2534a:	4914      	ldr	r1, [pc, #80]	; (2539c <k_work_submit_to_queue+0xc0>)
   2534c:	480d      	ldr	r0, [pc, #52]	; (25384 <k_work_submit_to_queue+0xa8>)
   2534e:	23ac      	movs	r3, #172	; 0xac
   25350:	f003 fc23 	bl	28b9a <printk>
   25354:	490d      	ldr	r1, [pc, #52]	; (2538c <k_work_submit_to_queue+0xb0>)
   25356:	4812      	ldr	r0, [pc, #72]	; (253a0 <k_work_submit_to_queue+0xc4>)
   25358:	f003 fc1f 	bl	28b9a <printk>
   2535c:	480c      	ldr	r0, [pc, #48]	; (25390 <k_work_submit_to_queue+0xb4>)
   2535e:	21ac      	movs	r1, #172	; 0xac
   25360:	f003 fe5c 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25364:	f385 8811 	msr	BASEPRI, r5
   25368:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
   2536c:	2c00      	cmp	r4, #0
   2536e:	dd04      	ble.n	2537a <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
   25370:	f001 fbae 	bl	26ad0 <z_impl_k_is_preempt_thread>
   25374:	b108      	cbz	r0, 2537a <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
   25376:	f001 fa1b 	bl	267b0 <z_impl_k_yield>
}
   2537a:	4620      	mov	r0, r4
   2537c:	b003      	add	sp, #12
   2537e:	bd30      	pop	{r4, r5, pc}
   25380:	0003411f 	.word	0x0003411f
   25384:	0002e93e 	.word	0x0002e93e
   25388:	00034048 	.word	0x00034048
   2538c:	200029ec 	.word	0x200029ec
   25390:	0002e9fe 	.word	0x0002e9fe
   25394:	0002ea50 	.word	0x0002ea50
   25398:	0002ea65 	.word	0x0002ea65
   2539c:	0002ea24 	.word	0x0002ea24
   253a0:	0002ea3b 	.word	0x0002ea3b

000253a4 <k_work_submit>:
{
   253a4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
   253a6:	4801      	ldr	r0, [pc, #4]	; (253ac <k_work_submit+0x8>)
   253a8:	f7ff bf98 	b.w	252dc <k_work_submit_to_queue>
   253ac:	20002158 	.word	0x20002158

000253b0 <k_work_queue_start>:
{
   253b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253b4:	b088      	sub	sp, #32
   253b6:	460e      	mov	r6, r1
   253b8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   253ba:	4617      	mov	r7, r2
   253bc:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
   253be:	4604      	mov	r4, r0
   253c0:	b958      	cbnz	r0, 253da <k_work_queue_start+0x2a>
   253c2:	492e      	ldr	r1, [pc, #184]	; (2547c <k_work_queue_start+0xcc>)
   253c4:	482e      	ldr	r0, [pc, #184]	; (25480 <k_work_queue_start+0xd0>)
   253c6:	4a2f      	ldr	r2, [pc, #188]	; (25484 <k_work_queue_start+0xd4>)
   253c8:	f240 23b5 	movw	r3, #693	; 0x2b5
   253cc:	f003 fbe5 	bl	28b9a <printk>
   253d0:	482c      	ldr	r0, [pc, #176]	; (25484 <k_work_queue_start+0xd4>)
   253d2:	f240 21b5 	movw	r1, #693	; 0x2b5
   253d6:	f003 fe21 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(stack);
   253da:	b95e      	cbnz	r6, 253f4 <k_work_queue_start+0x44>
   253dc:	492a      	ldr	r1, [pc, #168]	; (25488 <k_work_queue_start+0xd8>)
   253de:	4828      	ldr	r0, [pc, #160]	; (25480 <k_work_queue_start+0xd0>)
   253e0:	4a28      	ldr	r2, [pc, #160]	; (25484 <k_work_queue_start+0xd4>)
   253e2:	f240 23b6 	movw	r3, #694	; 0x2b6
   253e6:	f003 fbd8 	bl	28b9a <printk>
   253ea:	4826      	ldr	r0, [pc, #152]	; (25484 <k_work_queue_start+0xd4>)
   253ec:	f240 21b6 	movw	r1, #694	; 0x2b6
   253f0:	f003 fe14 	bl	2901c <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
   253f4:	f8d4 30d8 	ldr.w	r3, [r4, #216]	; 0xd8
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
   253f8:	07db      	lsls	r3, r3, #31
   253fa:	d50b      	bpl.n	25414 <k_work_queue_start+0x64>
   253fc:	4923      	ldr	r1, [pc, #140]	; (2548c <k_work_queue_start+0xdc>)
   253fe:	4820      	ldr	r0, [pc, #128]	; (25480 <k_work_queue_start+0xd0>)
   25400:	4a20      	ldr	r2, [pc, #128]	; (25484 <k_work_queue_start+0xd4>)
   25402:	f240 23b7 	movw	r3, #695	; 0x2b7
   25406:	f003 fbc8 	bl	28b9a <printk>
   2540a:	481e      	ldr	r0, [pc, #120]	; (25484 <k_work_queue_start+0xd4>)
   2540c:	f240 21b7 	movw	r1, #695	; 0x2b7
   25410:	f003 fe04 	bl	2901c <assert_post_action>
	list->head = NULL;
   25414:	2300      	movs	r3, #0
	list->tail = NULL;
   25416:	e9c4 3330 	strd	r3, r3, [r4, #192]	; 0xc0
   2541a:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
	list->tail = (sys_dnode_t *)list;
   2541e:	e9c4 3332 	strd	r3, r3, [r4, #200]	; 0xc8
   25422:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   25426:	e9c4 3334 	strd	r3, r3, [r4, #208]	; 0xd0
	if ((cfg != NULL) && cfg->no_yield) {
   2542a:	b32d      	cbz	r5, 25478 <k_work_queue_start+0xc8>
   2542c:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
   2542e:	2b00      	cmp	r3, #0
   25430:	f240 1101 	movw	r1, #257	; 0x101
   25434:	bf08      	it	eq
   25436:	2101      	moveq	r1, #1
	*flagp = flags;
   25438:	f8c4 10d8 	str.w	r1, [r4, #216]	; 0xd8
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2543c:	f04f 32ff 	mov.w	r2, #4294967295
   25440:	f04f 33ff 	mov.w	r3, #4294967295
   25444:	e9cd 2306 	strd	r2, r3, [sp, #24]
   25448:	2200      	movs	r2, #0
   2544a:	e9cd 8203 	strd	r8, r2, [sp, #12]
   2544e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   25452:	4b0f      	ldr	r3, [pc, #60]	; (25490 <k_work_queue_start+0xe0>)
   25454:	9400      	str	r4, [sp, #0]
   25456:	463a      	mov	r2, r7
   25458:	4631      	mov	r1, r6
   2545a:	4620      	mov	r0, r4
   2545c:	f7fe fe44 	bl	240e8 <z_impl_k_thread_create>
	if ((cfg != NULL) && (cfg->name != NULL)) {
   25460:	b125      	cbz	r5, 2546c <k_work_queue_start+0xbc>
   25462:	6829      	ldr	r1, [r5, #0]
   25464:	b111      	cbz	r1, 2546c <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
   25466:	4620      	mov	r0, r4
   25468:	f7fe fc4c 	bl	23d04 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
   2546c:	4620      	mov	r0, r4
}
   2546e:	b008      	add	sp, #32
   25470:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   25474:	f007 ba0c 	b.w	2c890 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
   25478:	2101      	movs	r1, #1
   2547a:	e7dd      	b.n	25438 <k_work_queue_start+0x88>
   2547c:	000340de 	.word	0x000340de
   25480:	0002e93e 	.word	0x0002e93e
   25484:	00034048 	.word	0x00034048
   25488:	000340e4 	.word	0x000340e4
   2548c:	000340ea 	.word	0x000340ea
   25490:	00024eb5 	.word	0x00024eb5

00025494 <k_work_init_delayable>:

void k_work_init_delayable(struct k_work_delayable *dwork,
			    k_work_handler_t handler)
{
   25494:	b538      	push	{r3, r4, r5, lr}
   25496:	460d      	mov	r5, r1
	__ASSERT_NO_MSG(dwork != NULL);
   25498:	4604      	mov	r4, r0
   2549a:	b958      	cbnz	r0, 254b4 <k_work_init_delayable+0x20>
   2549c:	4911      	ldr	r1, [pc, #68]	; (254e4 <k_work_init_delayable+0x50>)
   2549e:	4812      	ldr	r0, [pc, #72]	; (254e8 <k_work_init_delayable+0x54>)
   254a0:	4a12      	ldr	r2, [pc, #72]	; (254ec <k_work_init_delayable+0x58>)
   254a2:	f240 332d 	movw	r3, #813	; 0x32d
   254a6:	f003 fb78 	bl	28b9a <printk>
   254aa:	4810      	ldr	r0, [pc, #64]	; (254ec <k_work_init_delayable+0x58>)
   254ac:	f240 312d 	movw	r1, #813	; 0x32d
   254b0:	f003 fdb4 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(handler != NULL);
   254b4:	b95d      	cbnz	r5, 254ce <k_work_init_delayable+0x3a>
   254b6:	490e      	ldr	r1, [pc, #56]	; (254f0 <k_work_init_delayable+0x5c>)
   254b8:	480b      	ldr	r0, [pc, #44]	; (254e8 <k_work_init_delayable+0x54>)
   254ba:	4a0c      	ldr	r2, [pc, #48]	; (254ec <k_work_init_delayable+0x58>)
   254bc:	f240 332e 	movw	r3, #814	; 0x32e
   254c0:	f003 fb6b 	bl	28b9a <printk>
   254c4:	4809      	ldr	r0, [pc, #36]	; (254ec <k_work_init_delayable+0x58>)
   254c6:	f240 312e 	movw	r1, #814	; 0x32e
   254ca:	f003 fda7 	bl	2901c <assert_post_action>

	*dwork = (struct k_work_delayable){
   254ce:	2230      	movs	r2, #48	; 0x30
   254d0:	2100      	movs	r1, #0
   254d2:	4620      	mov	r0, r4
   254d4:	f007 fbb7 	bl	2cc46 <memset>
   254d8:	f44f 7380 	mov.w	r3, #256	; 0x100
   254dc:	6065      	str	r5, [r4, #4]
   254de:	60e3      	str	r3, [r4, #12]
		},
	};
	z_init_timeout(&dwork->timeout);

	SYS_PORT_TRACING_OBJ_INIT(k_work_delayable, dwork);
}
   254e0:	bd38      	pop	{r3, r4, r5, pc}
   254e2:	bf00      	nop
   254e4:	0003411e 	.word	0x0003411e
   254e8:	0002e93e 	.word	0x0002e93e
   254ec:	00034048 	.word	0x00034048
   254f0:	00034069 	.word	0x00034069

000254f4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
   254f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   254f6:	4616      	mov	r6, r2
   254f8:	9001      	str	r0, [sp, #4]
   254fa:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   254fc:	460c      	mov	r4, r1
   254fe:	b959      	cbnz	r1, 25518 <k_work_schedule_for_queue+0x24>
   25500:	492e      	ldr	r1, [pc, #184]	; (255bc <k_work_schedule_for_queue+0xc8>)
   25502:	482f      	ldr	r0, [pc, #188]	; (255c0 <k_work_schedule_for_queue+0xcc>)
   25504:	4a2f      	ldr	r2, [pc, #188]	; (255c4 <k_work_schedule_for_queue+0xd0>)
   25506:	f44f 7369 	mov.w	r3, #932	; 0x3a4
   2550a:	f003 fb46 	bl	28b9a <printk>
   2550e:	482d      	ldr	r0, [pc, #180]	; (255c4 <k_work_schedule_for_queue+0xd0>)
   25510:	f44f 7169 	mov.w	r1, #932	; 0x3a4
   25514:	f003 fd82 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25518:	f04f 0340 	mov.w	r3, #64	; 0x40
   2551c:	f3ef 8511 	mrs	r5, BASEPRI
   25520:	f383 8812 	msr	BASEPRI_MAX, r3
   25524:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25528:	4827      	ldr	r0, [pc, #156]	; (255c8 <k_work_schedule_for_queue+0xd4>)
   2552a:	f7fe fc35 	bl	23d98 <z_spin_lock_valid>
   2552e:	b968      	cbnz	r0, 2554c <k_work_schedule_for_queue+0x58>
   25530:	4a26      	ldr	r2, [pc, #152]	; (255cc <k_work_schedule_for_queue+0xd8>)
   25532:	4927      	ldr	r1, [pc, #156]	; (255d0 <k_work_schedule_for_queue+0xdc>)
   25534:	4822      	ldr	r0, [pc, #136]	; (255c0 <k_work_schedule_for_queue+0xcc>)
   25536:	2381      	movs	r3, #129	; 0x81
   25538:	f003 fb2f 	bl	28b9a <printk>
   2553c:	4922      	ldr	r1, [pc, #136]	; (255c8 <k_work_schedule_for_queue+0xd4>)
   2553e:	4825      	ldr	r0, [pc, #148]	; (255d4 <k_work_schedule_for_queue+0xe0>)
   25540:	f003 fb2b 	bl	28b9a <printk>
   25544:	4821      	ldr	r0, [pc, #132]	; (255cc <k_work_schedule_for_queue+0xd8>)
   25546:	2181      	movs	r1, #129	; 0x81
   25548:	f003 fd68 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   2554c:	481e      	ldr	r0, [pc, #120]	; (255c8 <k_work_schedule_for_queue+0xd4>)
   2554e:	f7fe fc41 	bl	23dd4 <z_spin_lock_set_owner>
	return flags_get(&work->flags) & K_WORK_MASK;
   25552:	68e3      	ldr	r3, [r4, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
   25554:	f013 0f0e 	tst.w	r3, #14
   25558:	d12e      	bne.n	255b8 <k_work_schedule_for_queue+0xc4>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2555a:	ea56 0207 	orrs.w	r2, r6, r7
   2555e:	d11d      	bne.n	2559c <k_work_schedule_for_queue+0xa8>
		return submit_to_queue_locked(work, queuep);
   25560:	4620      	mov	r0, r4
   25562:	a901      	add	r1, sp, #4
   25564:	f7ff fdd8 	bl	25118 <submit_to_queue_locked>
   25568:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2556a:	4817      	ldr	r0, [pc, #92]	; (255c8 <k_work_schedule_for_queue+0xd4>)
   2556c:	f7fe fc22 	bl	23db4 <z_spin_unlock_valid>
   25570:	b968      	cbnz	r0, 2558e <k_work_schedule_for_queue+0x9a>
   25572:	4a16      	ldr	r2, [pc, #88]	; (255cc <k_work_schedule_for_queue+0xd8>)
   25574:	4918      	ldr	r1, [pc, #96]	; (255d8 <k_work_schedule_for_queue+0xe4>)
   25576:	4812      	ldr	r0, [pc, #72]	; (255c0 <k_work_schedule_for_queue+0xcc>)
   25578:	23ac      	movs	r3, #172	; 0xac
   2557a:	f003 fb0e 	bl	28b9a <printk>
   2557e:	4912      	ldr	r1, [pc, #72]	; (255c8 <k_work_schedule_for_queue+0xd4>)
   25580:	4816      	ldr	r0, [pc, #88]	; (255dc <k_work_schedule_for_queue+0xe8>)
   25582:	f003 fb0a 	bl	28b9a <printk>
   25586:	4811      	ldr	r0, [pc, #68]	; (255cc <k_work_schedule_for_queue+0xd8>)
   25588:	21ac      	movs	r1, #172	; 0xac
   2558a:	f003 fd47 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2558e:	f385 8811 	msr	BASEPRI, r5
   25592:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25596:	4620      	mov	r0, r4
   25598:	b003      	add	sp, #12
   2559a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   2559c:	f043 0308 	orr.w	r3, r3, #8
   255a0:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   255a2:	9b01      	ldr	r3, [sp, #4]
   255a4:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   255a6:	f104 0010 	add.w	r0, r4, #16
   255aa:	490d      	ldr	r1, [pc, #52]	; (255e0 <k_work_schedule_for_queue+0xec>)
   255ac:	4632      	mov	r2, r6
   255ae:	463b      	mov	r3, r7
   255b0:	f001 fd22 	bl	26ff8 <z_add_timeout>
	return ret;
   255b4:	2401      	movs	r4, #1
   255b6:	e7d8      	b.n	2556a <k_work_schedule_for_queue+0x76>
	int ret = 0;
   255b8:	2400      	movs	r4, #0
   255ba:	e7d6      	b.n	2556a <k_work_schedule_for_queue+0x76>
   255bc:	0003411e 	.word	0x0003411e
   255c0:	0002e93e 	.word	0x0002e93e
   255c4:	00034048 	.word	0x00034048
   255c8:	200029ec 	.word	0x200029ec
   255cc:	0002e9fe 	.word	0x0002e9fe
   255d0:	0002ea50 	.word	0x0002ea50
   255d4:	0002ea65 	.word	0x0002ea65
   255d8:	0002ea24 	.word	0x0002ea24
   255dc:	0002ea3b 	.word	0x0002ea3b
   255e0:	000251e1 	.word	0x000251e1

000255e4 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
   255e4:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
   255e6:	4801      	ldr	r0, [pc, #4]	; (255ec <k_work_schedule+0x8>)
   255e8:	f7ff bf84 	b.w	254f4 <k_work_schedule_for_queue>
   255ec:	20002158 	.word	0x20002158

000255f0 <k_work_reschedule_for_queue>:
}

int k_work_reschedule_for_queue(struct k_work_q *queue,
				 struct k_work_delayable *dwork,
				 k_timeout_t delay)
{
   255f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   255f2:	4616      	mov	r6, r2
   255f4:	9001      	str	r0, [sp, #4]
   255f6:	461f      	mov	r7, r3
	__ASSERT_NO_MSG(dwork != NULL);
   255f8:	460c      	mov	r4, r1
   255fa:	b959      	cbnz	r1, 25614 <k_work_reschedule_for_queue+0x24>
   255fc:	492d      	ldr	r1, [pc, #180]	; (256b4 <k_work_reschedule_for_queue+0xc4>)
   255fe:	482e      	ldr	r0, [pc, #184]	; (256b8 <k_work_reschedule_for_queue+0xc8>)
   25600:	4a2e      	ldr	r2, [pc, #184]	; (256bc <k_work_reschedule_for_queue+0xcc>)
   25602:	f44f 7372 	mov.w	r3, #968	; 0x3c8
   25606:	f003 fac8 	bl	28b9a <printk>
   2560a:	482c      	ldr	r0, [pc, #176]	; (256bc <k_work_reschedule_for_queue+0xcc>)
   2560c:	f44f 7172 	mov.w	r1, #968	; 0x3c8
   25610:	f003 fd04 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25614:	f04f 0340 	mov.w	r3, #64	; 0x40
   25618:	f3ef 8511 	mrs	r5, BASEPRI
   2561c:	f383 8812 	msr	BASEPRI_MAX, r3
   25620:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25624:	4826      	ldr	r0, [pc, #152]	; (256c0 <k_work_reschedule_for_queue+0xd0>)
   25626:	f7fe fbb7 	bl	23d98 <z_spin_lock_valid>
   2562a:	b968      	cbnz	r0, 25648 <k_work_reschedule_for_queue+0x58>
   2562c:	4a25      	ldr	r2, [pc, #148]	; (256c4 <k_work_reschedule_for_queue+0xd4>)
   2562e:	4926      	ldr	r1, [pc, #152]	; (256c8 <k_work_reschedule_for_queue+0xd8>)
   25630:	4821      	ldr	r0, [pc, #132]	; (256b8 <k_work_reschedule_for_queue+0xc8>)
   25632:	2381      	movs	r3, #129	; 0x81
   25634:	f003 fab1 	bl	28b9a <printk>
   25638:	4921      	ldr	r1, [pc, #132]	; (256c0 <k_work_reschedule_for_queue+0xd0>)
   2563a:	4824      	ldr	r0, [pc, #144]	; (256cc <k_work_reschedule_for_queue+0xdc>)
   2563c:	f003 faad 	bl	28b9a <printk>
   25640:	4820      	ldr	r0, [pc, #128]	; (256c4 <k_work_reschedule_for_queue+0xd4>)
   25642:	2181      	movs	r1, #129	; 0x81
   25644:	f003 fcea 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   25648:	481d      	ldr	r0, [pc, #116]	; (256c0 <k_work_reschedule_for_queue+0xd0>)
   2564a:	f7fe fbc3 	bl	23dd4 <z_spin_lock_set_owner>

	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Remove any active scheduling. */
	(void)unschedule_locked(dwork);
   2564e:	4620      	mov	r0, r4
   25650:	f007 f994 	bl	2c97c <unschedule_locked>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   25654:	ea56 0307 	orrs.w	r3, r6, r7
   25658:	d11d      	bne.n	25696 <k_work_reschedule_for_queue+0xa6>
		return submit_to_queue_locked(work, queuep);
   2565a:	4620      	mov	r0, r4
   2565c:	a901      	add	r1, sp, #4
   2565e:	f7ff fd5b 	bl	25118 <submit_to_queue_locked>
   25662:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25664:	4816      	ldr	r0, [pc, #88]	; (256c0 <k_work_reschedule_for_queue+0xd0>)
   25666:	f7fe fba5 	bl	23db4 <z_spin_unlock_valid>
   2566a:	b968      	cbnz	r0, 25688 <k_work_reschedule_for_queue+0x98>
   2566c:	4a15      	ldr	r2, [pc, #84]	; (256c4 <k_work_reschedule_for_queue+0xd4>)
   2566e:	4918      	ldr	r1, [pc, #96]	; (256d0 <k_work_reschedule_for_queue+0xe0>)
   25670:	4811      	ldr	r0, [pc, #68]	; (256b8 <k_work_reschedule_for_queue+0xc8>)
   25672:	23ac      	movs	r3, #172	; 0xac
   25674:	f003 fa91 	bl	28b9a <printk>
   25678:	4911      	ldr	r1, [pc, #68]	; (256c0 <k_work_reschedule_for_queue+0xd0>)
   2567a:	4816      	ldr	r0, [pc, #88]	; (256d4 <k_work_reschedule_for_queue+0xe4>)
   2567c:	f003 fa8d 	bl	28b9a <printk>
   25680:	4810      	ldr	r0, [pc, #64]	; (256c4 <k_work_reschedule_for_queue+0xd4>)
   25682:	21ac      	movs	r1, #172	; 0xac
   25684:	f003 fcca 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25688:	f385 8811 	msr	BASEPRI, r5
   2568c:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, reschedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
   25690:	4620      	mov	r0, r4
   25692:	b003      	add	sp, #12
   25694:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*flagp |= BIT(bit);
   25696:	68e3      	ldr	r3, [r4, #12]
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   25698:	490f      	ldr	r1, [pc, #60]	; (256d8 <k_work_reschedule_for_queue+0xe8>)
	*flagp |= BIT(bit);
   2569a:	f043 0308 	orr.w	r3, r3, #8
   2569e:	60e3      	str	r3, [r4, #12]
	dwork->queue = *queuep;
   256a0:	9b01      	ldr	r3, [sp, #4]
   256a2:	62a3      	str	r3, [r4, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
   256a4:	f104 0010 	add.w	r0, r4, #16
   256a8:	4632      	mov	r2, r6
   256aa:	463b      	mov	r3, r7
   256ac:	f001 fca4 	bl	26ff8 <z_add_timeout>
	return ret;
   256b0:	2401      	movs	r4, #1
   256b2:	e7d7      	b.n	25664 <k_work_reschedule_for_queue+0x74>
   256b4:	0003411e 	.word	0x0003411e
   256b8:	0002e93e 	.word	0x0002e93e
   256bc:	00034048 	.word	0x00034048
   256c0:	200029ec 	.word	0x200029ec
   256c4:	0002e9fe 	.word	0x0002e9fe
   256c8:	0002ea50 	.word	0x0002ea50
   256cc:	0002ea65 	.word	0x0002ea65
   256d0:	0002ea24 	.word	0x0002ea24
   256d4:	0002ea3b 	.word	0x0002ea3b
   256d8:	000251e1 	.word	0x000251e1

000256dc <k_work_reschedule>:

int k_work_reschedule(struct k_work_delayable *dwork,
				     k_timeout_t delay)
{
   256dc:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, reschedule, dwork, delay);

	int ret = k_work_reschedule_for_queue(&k_sys_work_q, dwork, delay);
   256de:	4801      	ldr	r0, [pc, #4]	; (256e4 <k_work_reschedule+0x8>)
   256e0:	f7ff bf86 	b.w	255f0 <k_work_reschedule_for_queue>
   256e4:	20002158 	.word	0x20002158

000256e8 <k_work_cancel_delayable>:

	return ret;
}

int k_work_cancel_delayable(struct k_work_delayable *dwork)
{
   256e8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(dwork != NULL);
   256ea:	4604      	mov	r4, r0
   256ec:	b958      	cbnz	r0, 25706 <k_work_cancel_delayable+0x1e>
   256ee:	4924      	ldr	r1, [pc, #144]	; (25780 <k_work_cancel_delayable+0x98>)
   256f0:	4824      	ldr	r0, [pc, #144]	; (25784 <k_work_cancel_delayable+0x9c>)
   256f2:	4a25      	ldr	r2, [pc, #148]	; (25788 <k_work_cancel_delayable+0xa0>)
   256f4:	f240 33ea 	movw	r3, #1002	; 0x3ea
   256f8:	f003 fa4f 	bl	28b9a <printk>
   256fc:	4822      	ldr	r0, [pc, #136]	; (25788 <k_work_cancel_delayable+0xa0>)
   256fe:	f240 31ea 	movw	r1, #1002	; 0x3ea
   25702:	f003 fc8b 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25706:	f04f 0340 	mov.w	r3, #64	; 0x40
   2570a:	f3ef 8511 	mrs	r5, BASEPRI
   2570e:	f383 8812 	msr	BASEPRI_MAX, r3
   25712:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25716:	481d      	ldr	r0, [pc, #116]	; (2578c <k_work_cancel_delayable+0xa4>)
   25718:	f7fe fb3e 	bl	23d98 <z_spin_lock_valid>
   2571c:	b968      	cbnz	r0, 2573a <k_work_cancel_delayable+0x52>
   2571e:	4a1c      	ldr	r2, [pc, #112]	; (25790 <k_work_cancel_delayable+0xa8>)
   25720:	491c      	ldr	r1, [pc, #112]	; (25794 <k_work_cancel_delayable+0xac>)
   25722:	4818      	ldr	r0, [pc, #96]	; (25784 <k_work_cancel_delayable+0x9c>)
   25724:	2381      	movs	r3, #129	; 0x81
   25726:	f003 fa38 	bl	28b9a <printk>
   2572a:	4918      	ldr	r1, [pc, #96]	; (2578c <k_work_cancel_delayable+0xa4>)
   2572c:	481a      	ldr	r0, [pc, #104]	; (25798 <k_work_cancel_delayable+0xb0>)
   2572e:	f003 fa34 	bl	28b9a <printk>
   25732:	4817      	ldr	r0, [pc, #92]	; (25790 <k_work_cancel_delayable+0xa8>)
   25734:	2181      	movs	r1, #129	; 0x81
   25736:	f003 fc71 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   2573a:	4814      	ldr	r0, [pc, #80]	; (2578c <k_work_cancel_delayable+0xa4>)
   2573c:	f7fe fb4a 	bl	23dd4 <z_spin_lock_set_owner>
	(void)unschedule_locked(dwork);
   25740:	4620      	mov	r0, r4
   25742:	f007 f91b 	bl	2c97c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   25746:	4620      	mov	r0, r4
   25748:	f007 f926 	bl	2c998 <cancel_async_locked>
   2574c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2574e:	480f      	ldr	r0, [pc, #60]	; (2578c <k_work_cancel_delayable+0xa4>)
   25750:	f7fe fb30 	bl	23db4 <z_spin_unlock_valid>
   25754:	b968      	cbnz	r0, 25772 <k_work_cancel_delayable+0x8a>
   25756:	4a0e      	ldr	r2, [pc, #56]	; (25790 <k_work_cancel_delayable+0xa8>)
   25758:	4910      	ldr	r1, [pc, #64]	; (2579c <k_work_cancel_delayable+0xb4>)
   2575a:	480a      	ldr	r0, [pc, #40]	; (25784 <k_work_cancel_delayable+0x9c>)
   2575c:	23ac      	movs	r3, #172	; 0xac
   2575e:	f003 fa1c 	bl	28b9a <printk>
   25762:	490a      	ldr	r1, [pc, #40]	; (2578c <k_work_cancel_delayable+0xa4>)
   25764:	480e      	ldr	r0, [pc, #56]	; (257a0 <k_work_cancel_delayable+0xb8>)
   25766:	f003 fa18 	bl	28b9a <printk>
   2576a:	4809      	ldr	r0, [pc, #36]	; (25790 <k_work_cancel_delayable+0xa8>)
   2576c:	21ac      	movs	r1, #172	; 0xac
   2576e:	f003 fc55 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25772:	f385 8811 	msr	BASEPRI, r5
   25776:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable, dwork, ret);

	return ret;
}
   2577a:	4620      	mov	r0, r4
   2577c:	bd38      	pop	{r3, r4, r5, pc}
   2577e:	bf00      	nop
   25780:	0003411e 	.word	0x0003411e
   25784:	0002e93e 	.word	0x0002e93e
   25788:	00034048 	.word	0x00034048
   2578c:	200029ec 	.word	0x200029ec
   25790:	0002e9fe 	.word	0x0002e9fe
   25794:	0002ea50 	.word	0x0002ea50
   25798:	0002ea65 	.word	0x0002ea65
   2579c:	0002ea24 	.word	0x0002ea24
   257a0:	0002ea3b 	.word	0x0002ea3b

000257a4 <k_work_cancel_delayable_sync>:

bool k_work_cancel_delayable_sync(struct k_work_delayable *dwork,
				  struct k_work_sync *sync)
{
   257a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   257a8:	460e      	mov	r6, r1
	__ASSERT_NO_MSG(dwork != NULL);
   257aa:	4605      	mov	r5, r0
   257ac:	b958      	cbnz	r0, 257c6 <k_work_cancel_delayable_sync+0x22>
   257ae:	493d      	ldr	r1, [pc, #244]	; (258a4 <k_work_cancel_delayable_sync+0x100>)
   257b0:	483d      	ldr	r0, [pc, #244]	; (258a8 <k_work_cancel_delayable_sync+0x104>)
   257b2:	4a3e      	ldr	r2, [pc, #248]	; (258ac <k_work_cancel_delayable_sync+0x108>)
   257b4:	f240 33fb 	movw	r3, #1019	; 0x3fb
   257b8:	f003 f9ef 	bl	28b9a <printk>
   257bc:	483b      	ldr	r0, [pc, #236]	; (258ac <k_work_cancel_delayable_sync+0x108>)
   257be:	f240 31fb 	movw	r1, #1019	; 0x3fb
   257c2:	f003 fc2b 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(sync != NULL);
   257c6:	b95e      	cbnz	r6, 257e0 <k_work_cancel_delayable_sync+0x3c>
   257c8:	4939      	ldr	r1, [pc, #228]	; (258b0 <k_work_cancel_delayable_sync+0x10c>)
   257ca:	4837      	ldr	r0, [pc, #220]	; (258a8 <k_work_cancel_delayable_sync+0x104>)
   257cc:	4a37      	ldr	r2, [pc, #220]	; (258ac <k_work_cancel_delayable_sync+0x108>)
   257ce:	f44f 737f 	mov.w	r3, #1020	; 0x3fc
   257d2:	f003 f9e2 	bl	28b9a <printk>
   257d6:	4835      	ldr	r0, [pc, #212]	; (258ac <k_work_cancel_delayable_sync+0x108>)
   257d8:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
   257dc:	f003 fc1e 	bl	2901c <assert_post_action>
	__ASSERT_NO_MSG(!k_is_in_isr());
   257e0:	f007 f84e 	bl	2c880 <k_is_in_isr>
   257e4:	b158      	cbz	r0, 257fe <k_work_cancel_delayable_sync+0x5a>
   257e6:	4933      	ldr	r1, [pc, #204]	; (258b4 <k_work_cancel_delayable_sync+0x110>)
   257e8:	482f      	ldr	r0, [pc, #188]	; (258a8 <k_work_cancel_delayable_sync+0x104>)
   257ea:	4a30      	ldr	r2, [pc, #192]	; (258ac <k_work_cancel_delayable_sync+0x108>)
   257ec:	f240 33fd 	movw	r3, #1021	; 0x3fd
   257f0:	f003 f9d3 	bl	28b9a <printk>
   257f4:	482d      	ldr	r0, [pc, #180]	; (258ac <k_work_cancel_delayable_sync+0x108>)
   257f6:	f240 31fd 	movw	r1, #1021	; 0x3fd
   257fa:	f003 fc0f 	bl	2901c <assert_post_action>
	__asm__ volatile(
   257fe:	f04f 0340 	mov.w	r3, #64	; 0x40
   25802:	f3ef 8811 	mrs	r8, BASEPRI
   25806:	f383 8812 	msr	BASEPRI_MAX, r3
   2580a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2580e:	482a      	ldr	r0, [pc, #168]	; (258b8 <k_work_cancel_delayable_sync+0x114>)
   25810:	f7fe fac2 	bl	23d98 <z_spin_lock_valid>
   25814:	b968      	cbnz	r0, 25832 <k_work_cancel_delayable_sync+0x8e>
   25816:	4a29      	ldr	r2, [pc, #164]	; (258bc <k_work_cancel_delayable_sync+0x118>)
   25818:	4929      	ldr	r1, [pc, #164]	; (258c0 <k_work_cancel_delayable_sync+0x11c>)
   2581a:	4823      	ldr	r0, [pc, #140]	; (258a8 <k_work_cancel_delayable_sync+0x104>)
   2581c:	2381      	movs	r3, #129	; 0x81
   2581e:	f003 f9bc 	bl	28b9a <printk>
   25822:	4925      	ldr	r1, [pc, #148]	; (258b8 <k_work_cancel_delayable_sync+0x114>)
   25824:	4827      	ldr	r0, [pc, #156]	; (258c4 <k_work_cancel_delayable_sync+0x120>)
   25826:	f003 f9b8 	bl	28b9a <printk>
   2582a:	4824      	ldr	r0, [pc, #144]	; (258bc <k_work_cancel_delayable_sync+0x118>)
   2582c:	2181      	movs	r1, #129	; 0x81
   2582e:	f003 fbf5 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   25832:	4821      	ldr	r0, [pc, #132]	; (258b8 <k_work_cancel_delayable_sync+0x114>)
   25834:	f7fe face 	bl	23dd4 <z_spin_lock_set_owner>
	return flags_get(&dwork->work.flags) & K_WORK_MASK;
   25838:	68ec      	ldr	r4, [r5, #12]
   2583a:	f004 040f 	and.w	r4, r4, #15

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, cancel_delayable_sync, dwork, sync);

	struct z_work_canceller *canceller = &sync->canceller;
	k_spinlock_key_t key = k_spin_lock(&lock);
	bool pending = (work_delayable_busy_get_locked(dwork) != 0U);
   2583e:	2c00      	cmp	r4, #0
   25840:	bf14      	ite	ne
   25842:	2701      	movne	r7, #1
   25844:	2700      	moveq	r7, #0
	bool need_wait = false;

	if (pending) {
   25846:	d00a      	beq.n	2585e <k_work_cancel_delayable_sync+0xba>
	(void)unschedule_locked(dwork);
   25848:	4628      	mov	r0, r5
   2584a:	f007 f897 	bl	2c97c <unschedule_locked>
	return cancel_async_locked(&dwork->work);
   2584e:	4628      	mov	r0, r5
   25850:	f007 f8a2 	bl	2c998 <cancel_async_locked>
		(void)cancel_delayable_async_locked(dwork);
		need_wait = cancel_sync_locked(&dwork->work, canceller);
   25854:	4631      	mov	r1, r6
   25856:	4628      	mov	r0, r5
   25858:	f7ff fc40 	bl	250dc <cancel_sync_locked>
   2585c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2585e:	4816      	ldr	r0, [pc, #88]	; (258b8 <k_work_cancel_delayable_sync+0x114>)
   25860:	f7fe faa8 	bl	23db4 <z_spin_unlock_valid>
   25864:	b968      	cbnz	r0, 25882 <k_work_cancel_delayable_sync+0xde>
   25866:	4a15      	ldr	r2, [pc, #84]	; (258bc <k_work_cancel_delayable_sync+0x118>)
   25868:	4917      	ldr	r1, [pc, #92]	; (258c8 <k_work_cancel_delayable_sync+0x124>)
   2586a:	480f      	ldr	r0, [pc, #60]	; (258a8 <k_work_cancel_delayable_sync+0x104>)
   2586c:	23ac      	movs	r3, #172	; 0xac
   2586e:	f003 f994 	bl	28b9a <printk>
   25872:	4911      	ldr	r1, [pc, #68]	; (258b8 <k_work_cancel_delayable_sync+0x114>)
   25874:	4815      	ldr	r0, [pc, #84]	; (258cc <k_work_cancel_delayable_sync+0x128>)
   25876:	f003 f990 	bl	28b9a <printk>
   2587a:	4810      	ldr	r0, [pc, #64]	; (258bc <k_work_cancel_delayable_sync+0x118>)
   2587c:	21ac      	movs	r1, #172	; 0xac
   2587e:	f003 fbcd 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25882:	f388 8811 	msr	BASEPRI, r8
   25886:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);

	if (need_wait) {
   2588a:	b13c      	cbz	r4, 2589c <k_work_cancel_delayable_sync+0xf8>
	return z_impl_k_sem_take(sem, timeout);
   2588c:	f04f 32ff 	mov.w	r2, #4294967295
   25890:	f04f 33ff 	mov.w	r3, #4294967295
   25894:	f106 0008 	add.w	r0, r6, #8
   25898:	f7ff fa68 	bl	24d6c <z_impl_k_sem_take>
		k_sem_take(&canceller->sem, K_FOREVER);
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, cancel_delayable_sync, dwork, sync, pending);
	return pending;
}
   2589c:	4638      	mov	r0, r7
   2589e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   258a2:	bf00      	nop
   258a4:	0003411e 	.word	0x0003411e
   258a8:	0002e93e 	.word	0x0002e93e
   258ac:	00034048 	.word	0x00034048
   258b0:	000340ca 	.word	0x000340ca
   258b4:	0002fe1c 	.word	0x0002fe1c
   258b8:	200029ec 	.word	0x200029ec
   258bc:	0002e9fe 	.word	0x0002e9fe
   258c0:	0002ea50 	.word	0x0002ea50
   258c4:	0002ea65 	.word	0x0002ea65
   258c8:	0002ea24 	.word	0x0002ea24
   258cc:	0002ea3b 	.word	0x0002ea3b

000258d0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   258d0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   258d2:	4c08      	ldr	r4, [pc, #32]	; (258f4 <z_reset_time_slice+0x24>)
   258d4:	6823      	ldr	r3, [r4, #0]
   258d6:	b15b      	cbz	r3, 258f0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   258d8:	f7fc f9bc 	bl	21c54 <sys_clock_elapsed>
   258dc:	4603      	mov	r3, r0
   258de:	6820      	ldr	r0, [r4, #0]
   258e0:	4a05      	ldr	r2, [pc, #20]	; (258f8 <z_reset_time_slice+0x28>)
   258e2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   258e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
   258e8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
   258ea:	2100      	movs	r1, #0
   258ec:	f001 bcee 	b.w	272cc <z_set_timeout_expiry>
}
   258f0:	bd10      	pop	{r4, pc}
   258f2:	bf00      	nop
   258f4:	20002a04 	.word	0x20002a04
   258f8:	20001f98 	.word	0x20001f98

000258fc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   258fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   258fe:	4604      	mov	r4, r0
   25900:	460d      	mov	r5, r1
	__asm__ volatile(
   25902:	f04f 0340 	mov.w	r3, #64	; 0x40
   25906:	f3ef 8611 	mrs	r6, BASEPRI
   2590a:	f383 8812 	msr	BASEPRI_MAX, r3
   2590e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25912:	4823      	ldr	r0, [pc, #140]	; (259a0 <k_sched_time_slice_set+0xa4>)
   25914:	f7fe fa40 	bl	23d98 <z_spin_lock_valid>
   25918:	b968      	cbnz	r0, 25936 <k_sched_time_slice_set+0x3a>
   2591a:	4a22      	ldr	r2, [pc, #136]	; (259a4 <k_sched_time_slice_set+0xa8>)
   2591c:	4922      	ldr	r1, [pc, #136]	; (259a8 <k_sched_time_slice_set+0xac>)
   2591e:	4823      	ldr	r0, [pc, #140]	; (259ac <k_sched_time_slice_set+0xb0>)
   25920:	2381      	movs	r3, #129	; 0x81
   25922:	f003 f93a 	bl	28b9a <printk>
   25926:	491e      	ldr	r1, [pc, #120]	; (259a0 <k_sched_time_slice_set+0xa4>)
   25928:	4821      	ldr	r0, [pc, #132]	; (259b0 <k_sched_time_slice_set+0xb4>)
   2592a:	f003 f936 	bl	28b9a <printk>
   2592e:	481d      	ldr	r0, [pc, #116]	; (259a4 <k_sched_time_slice_set+0xa8>)
   25930:	2181      	movs	r1, #129	; 0x81
   25932:	f003 fb73 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   25936:	481a      	ldr	r0, [pc, #104]	; (259a0 <k_sched_time_slice_set+0xa4>)
   25938:	f7fe fa4c 	bl	23dd4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   2593c:	4b1d      	ldr	r3, [pc, #116]	; (259b4 <k_sched_time_slice_set+0xb8>)
   2593e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   25940:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   25944:	f240 30e7 	movw	r0, #999	; 0x3e7
   25948:	2100      	movs	r1, #0
   2594a:	611a      	str	r2, [r3, #16]
   2594c:	fbe7 0104 	umlal	r0, r1, r7, r4
   25950:	2300      	movs	r3, #0
   25952:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   25956:	f7da fc73 	bl	240 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
   2595a:	2c00      	cmp	r4, #0
   2595c:	4b16      	ldr	r3, [pc, #88]	; (259b8 <k_sched_time_slice_set+0xbc>)
   2595e:	dc1b      	bgt.n	25998 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
   25960:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
   25962:	4b16      	ldr	r3, [pc, #88]	; (259bc <k_sched_time_slice_set+0xc0>)
   25964:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   25966:	f7ff ffb3 	bl	258d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2596a:	480d      	ldr	r0, [pc, #52]	; (259a0 <k_sched_time_slice_set+0xa4>)
   2596c:	f7fe fa22 	bl	23db4 <z_spin_unlock_valid>
   25970:	b968      	cbnz	r0, 2598e <k_sched_time_slice_set+0x92>
   25972:	4a0c      	ldr	r2, [pc, #48]	; (259a4 <k_sched_time_slice_set+0xa8>)
   25974:	4912      	ldr	r1, [pc, #72]	; (259c0 <k_sched_time_slice_set+0xc4>)
   25976:	480d      	ldr	r0, [pc, #52]	; (259ac <k_sched_time_slice_set+0xb0>)
   25978:	23ac      	movs	r3, #172	; 0xac
   2597a:	f003 f90e 	bl	28b9a <printk>
   2597e:	4908      	ldr	r1, [pc, #32]	; (259a0 <k_sched_time_slice_set+0xa4>)
   25980:	4810      	ldr	r0, [pc, #64]	; (259c4 <k_sched_time_slice_set+0xc8>)
   25982:	f003 f90a 	bl	28b9a <printk>
   25986:	4807      	ldr	r0, [pc, #28]	; (259a4 <k_sched_time_slice_set+0xa8>)
   25988:	21ac      	movs	r1, #172	; 0xac
   2598a:	f003 fb47 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2598e:	f386 8811 	msr	BASEPRI, r6
   25992:	f3bf 8f6f 	isb	sy
	}
}
   25996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
   25998:	2802      	cmp	r0, #2
   2599a:	bfb8      	it	lt
   2599c:	2002      	movlt	r0, #2
   2599e:	e7df      	b.n	25960 <k_sched_time_slice_set+0x64>
   259a0:	200029fc 	.word	0x200029fc
   259a4:	0002e9fe 	.word	0x0002e9fe
   259a8:	0002ea50 	.word	0x0002ea50
   259ac:	0002e93e 	.word	0x0002e93e
   259b0:	0002ea65 	.word	0x0002ea65
   259b4:	20001f98 	.word	0x20001f98
   259b8:	20002a04 	.word	0x20002a04
   259bc:	20002a00 	.word	0x20002a00
   259c0:	0002ea24 	.word	0x0002ea24
   259c4:	0002ea3b 	.word	0x0002ea3b

000259c8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
   259c8:	b538      	push	{r3, r4, r5, lr}
   259ca:	4604      	mov	r4, r0
	__asm__ volatile(
   259cc:	f04f 0340 	mov.w	r3, #64	; 0x40
   259d0:	f3ef 8511 	mrs	r5, BASEPRI
   259d4:	f383 8812 	msr	BASEPRI_MAX, r3
   259d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   259dc:	4817      	ldr	r0, [pc, #92]	; (25a3c <z_unpend_thread_no_timeout+0x74>)
   259de:	f7fe f9db 	bl	23d98 <z_spin_lock_valid>
   259e2:	b968      	cbnz	r0, 25a00 <z_unpend_thread_no_timeout+0x38>
   259e4:	4a16      	ldr	r2, [pc, #88]	; (25a40 <z_unpend_thread_no_timeout+0x78>)
   259e6:	4917      	ldr	r1, [pc, #92]	; (25a44 <z_unpend_thread_no_timeout+0x7c>)
   259e8:	4817      	ldr	r0, [pc, #92]	; (25a48 <z_unpend_thread_no_timeout+0x80>)
   259ea:	2381      	movs	r3, #129	; 0x81
   259ec:	f003 f8d5 	bl	28b9a <printk>
   259f0:	4912      	ldr	r1, [pc, #72]	; (25a3c <z_unpend_thread_no_timeout+0x74>)
   259f2:	4816      	ldr	r0, [pc, #88]	; (25a4c <z_unpend_thread_no_timeout+0x84>)
   259f4:	f003 f8d1 	bl	28b9a <printk>
   259f8:	4811      	ldr	r0, [pc, #68]	; (25a40 <z_unpend_thread_no_timeout+0x78>)
   259fa:	2181      	movs	r1, #129	; 0x81
   259fc:	f003 fb0e 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   25a00:	480e      	ldr	r0, [pc, #56]	; (25a3c <z_unpend_thread_no_timeout+0x74>)
   25a02:	f7fe f9e7 	bl	23dd4 <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
   25a06:	4620      	mov	r0, r4
   25a08:	f000 f900 	bl	25c0c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25a0c:	480b      	ldr	r0, [pc, #44]	; (25a3c <z_unpend_thread_no_timeout+0x74>)
   25a0e:	f7fe f9d1 	bl	23db4 <z_spin_unlock_valid>
   25a12:	b968      	cbnz	r0, 25a30 <z_unpend_thread_no_timeout+0x68>
   25a14:	4a0a      	ldr	r2, [pc, #40]	; (25a40 <z_unpend_thread_no_timeout+0x78>)
   25a16:	490e      	ldr	r1, [pc, #56]	; (25a50 <z_unpend_thread_no_timeout+0x88>)
   25a18:	480b      	ldr	r0, [pc, #44]	; (25a48 <z_unpend_thread_no_timeout+0x80>)
   25a1a:	23ac      	movs	r3, #172	; 0xac
   25a1c:	f003 f8bd 	bl	28b9a <printk>
   25a20:	4906      	ldr	r1, [pc, #24]	; (25a3c <z_unpend_thread_no_timeout+0x74>)
   25a22:	480c      	ldr	r0, [pc, #48]	; (25a54 <z_unpend_thread_no_timeout+0x8c>)
   25a24:	f003 f8b9 	bl	28b9a <printk>
   25a28:	4805      	ldr	r0, [pc, #20]	; (25a40 <z_unpend_thread_no_timeout+0x78>)
   25a2a:	21ac      	movs	r1, #172	; 0xac
   25a2c:	f003 faf6 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25a30:	f385 8811 	msr	BASEPRI, r5
   25a34:	f3bf 8f6f 	isb	sy
	}
}
   25a38:	bd38      	pop	{r3, r4, r5, pc}
   25a3a:	bf00      	nop
   25a3c:	200029fc 	.word	0x200029fc
   25a40:	0002e9fe 	.word	0x0002e9fe
   25a44:	0002ea50 	.word	0x0002ea50
   25a48:	0002e93e 	.word	0x0002e93e
   25a4c:	0002ea65 	.word	0x0002ea65
   25a50:	0002ea24 	.word	0x0002ea24
   25a54:	0002ea3b 	.word	0x0002ea3b

00025a58 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
   25a58:	b538      	push	{r3, r4, r5, lr}
   25a5a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   25a5c:	460d      	mov	r5, r1
   25a5e:	b9e9      	cbnz	r1, 25a9c <z_reschedule+0x44>
   25a60:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
   25a64:	b9d3      	cbnz	r3, 25a9c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
   25a66:	4b19      	ldr	r3, [pc, #100]	; (25acc <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
   25a68:	6a1a      	ldr	r2, [r3, #32]
   25a6a:	689b      	ldr	r3, [r3, #8]
   25a6c:	429a      	cmp	r2, r3
   25a6e:	d015      	beq.n	25a9c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25a70:	f7fe f9a0 	bl	23db4 <z_spin_unlock_valid>
   25a74:	b968      	cbnz	r0, 25a92 <z_reschedule+0x3a>
   25a76:	4a16      	ldr	r2, [pc, #88]	; (25ad0 <z_reschedule+0x78>)
   25a78:	4916      	ldr	r1, [pc, #88]	; (25ad4 <z_reschedule+0x7c>)
   25a7a:	4817      	ldr	r0, [pc, #92]	; (25ad8 <z_reschedule+0x80>)
   25a7c:	23c3      	movs	r3, #195	; 0xc3
   25a7e:	f003 f88c 	bl	28b9a <printk>
   25a82:	4816      	ldr	r0, [pc, #88]	; (25adc <z_reschedule+0x84>)
   25a84:	4621      	mov	r1, r4
   25a86:	f003 f888 	bl	28b9a <printk>
   25a8a:	4811      	ldr	r0, [pc, #68]	; (25ad0 <z_reschedule+0x78>)
   25a8c:	21c3      	movs	r1, #195	; 0xc3
   25a8e:	f003 fac5 	bl	2901c <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   25a92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
   25a96:	2000      	movs	r0, #0
   25a98:	f7f0 bad2 	b.w	16040 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25a9c:	4620      	mov	r0, r4
   25a9e:	f7fe f989 	bl	23db4 <z_spin_unlock_valid>
   25aa2:	b968      	cbnz	r0, 25ac0 <z_reschedule+0x68>
   25aa4:	4a0a      	ldr	r2, [pc, #40]	; (25ad0 <z_reschedule+0x78>)
   25aa6:	490b      	ldr	r1, [pc, #44]	; (25ad4 <z_reschedule+0x7c>)
   25aa8:	480b      	ldr	r0, [pc, #44]	; (25ad8 <z_reschedule+0x80>)
   25aaa:	23ac      	movs	r3, #172	; 0xac
   25aac:	f003 f875 	bl	28b9a <printk>
   25ab0:	480a      	ldr	r0, [pc, #40]	; (25adc <z_reschedule+0x84>)
   25ab2:	4621      	mov	r1, r4
   25ab4:	f003 f871 	bl	28b9a <printk>
   25ab8:	4805      	ldr	r0, [pc, #20]	; (25ad0 <z_reschedule+0x78>)
   25aba:	21ac      	movs	r1, #172	; 0xac
   25abc:	f003 faae 	bl	2901c <assert_post_action>
   25ac0:	f385 8811 	msr	BASEPRI, r5
   25ac4:	f3bf 8f6f 	isb	sy
   25ac8:	bd38      	pop	{r3, r4, r5, pc}
   25aca:	bf00      	nop
   25acc:	20001f98 	.word	0x20001f98
   25ad0:	0002e9fe 	.word	0x0002e9fe
   25ad4:	0002ea24 	.word	0x0002ea24
   25ad8:	0002e93e 	.word	0x0002e93e
   25adc:	0002ea3b 	.word	0x0002ea3b

00025ae0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
   25ae0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   25ae2:	f04f 0340 	mov.w	r3, #64	; 0x40
   25ae6:	f3ef 8511 	mrs	r5, BASEPRI
   25aea:	f383 8812 	msr	BASEPRI_MAX, r3
   25aee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25af2:	4829      	ldr	r0, [pc, #164]	; (25b98 <k_sched_lock+0xb8>)
   25af4:	f7fe f950 	bl	23d98 <z_spin_lock_valid>
   25af8:	b968      	cbnz	r0, 25b16 <k_sched_lock+0x36>
   25afa:	4a28      	ldr	r2, [pc, #160]	; (25b9c <k_sched_lock+0xbc>)
   25afc:	4928      	ldr	r1, [pc, #160]	; (25ba0 <k_sched_lock+0xc0>)
   25afe:	4829      	ldr	r0, [pc, #164]	; (25ba4 <k_sched_lock+0xc4>)
   25b00:	2381      	movs	r3, #129	; 0x81
   25b02:	f003 f84a 	bl	28b9a <printk>
   25b06:	4924      	ldr	r1, [pc, #144]	; (25b98 <k_sched_lock+0xb8>)
   25b08:	4827      	ldr	r0, [pc, #156]	; (25ba8 <k_sched_lock+0xc8>)
   25b0a:	f003 f846 	bl	28b9a <printk>
   25b0e:	4823      	ldr	r0, [pc, #140]	; (25b9c <k_sched_lock+0xbc>)
   25b10:	2181      	movs	r1, #129	; 0x81
   25b12:	f003 fa83 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   25b16:	4820      	ldr	r0, [pc, #128]	; (25b98 <k_sched_lock+0xb8>)
   25b18:	f7fe f95c 	bl	23dd4 <z_spin_lock_set_owner>
   25b1c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   25b20:	b163      	cbz	r3, 25b3c <k_sched_lock+0x5c>
   25b22:	4922      	ldr	r1, [pc, #136]	; (25bac <k_sched_lock+0xcc>)
   25b24:	4a22      	ldr	r2, [pc, #136]	; (25bb0 <k_sched_lock+0xd0>)
   25b26:	481f      	ldr	r0, [pc, #124]	; (25ba4 <k_sched_lock+0xc4>)
   25b28:	23fd      	movs	r3, #253	; 0xfd
   25b2a:	f003 f836 	bl	28b9a <printk>
   25b2e:	4821      	ldr	r0, [pc, #132]	; (25bb4 <k_sched_lock+0xd4>)
   25b30:	f003 f833 	bl	28b9a <printk>
   25b34:	481e      	ldr	r0, [pc, #120]	; (25bb0 <k_sched_lock+0xd0>)
   25b36:	21fd      	movs	r1, #253	; 0xfd
   25b38:	f003 fa70 	bl	2901c <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
   25b3c:	4c1e      	ldr	r4, [pc, #120]	; (25bb8 <k_sched_lock+0xd8>)
   25b3e:	68a2      	ldr	r2, [r4, #8]
   25b40:	7bd2      	ldrb	r2, [r2, #15]
   25b42:	2a01      	cmp	r2, #1
   25b44:	d10c      	bne.n	25b60 <k_sched_lock+0x80>
   25b46:	491d      	ldr	r1, [pc, #116]	; (25bbc <k_sched_lock+0xdc>)
   25b48:	4a19      	ldr	r2, [pc, #100]	; (25bb0 <k_sched_lock+0xd0>)
   25b4a:	4816      	ldr	r0, [pc, #88]	; (25ba4 <k_sched_lock+0xc4>)
   25b4c:	23fe      	movs	r3, #254	; 0xfe
   25b4e:	f003 f824 	bl	28b9a <printk>
   25b52:	4818      	ldr	r0, [pc, #96]	; (25bb4 <k_sched_lock+0xd4>)
   25b54:	f003 f821 	bl	28b9a <printk>
   25b58:	4815      	ldr	r0, [pc, #84]	; (25bb0 <k_sched_lock+0xd0>)
   25b5a:	21fe      	movs	r1, #254	; 0xfe
   25b5c:	f003 fa5e 	bl	2901c <assert_post_action>
	--_current->base.sched_locked;
   25b60:	68a2      	ldr	r2, [r4, #8]
   25b62:	7bd3      	ldrb	r3, [r2, #15]
   25b64:	3b01      	subs	r3, #1
   25b66:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25b68:	480b      	ldr	r0, [pc, #44]	; (25b98 <k_sched_lock+0xb8>)
   25b6a:	f7fe f923 	bl	23db4 <z_spin_unlock_valid>
   25b6e:	b968      	cbnz	r0, 25b8c <k_sched_lock+0xac>
   25b70:	4a0a      	ldr	r2, [pc, #40]	; (25b9c <k_sched_lock+0xbc>)
   25b72:	4913      	ldr	r1, [pc, #76]	; (25bc0 <k_sched_lock+0xe0>)
   25b74:	480b      	ldr	r0, [pc, #44]	; (25ba4 <k_sched_lock+0xc4>)
   25b76:	23ac      	movs	r3, #172	; 0xac
   25b78:	f003 f80f 	bl	28b9a <printk>
   25b7c:	4906      	ldr	r1, [pc, #24]	; (25b98 <k_sched_lock+0xb8>)
   25b7e:	4811      	ldr	r0, [pc, #68]	; (25bc4 <k_sched_lock+0xe4>)
   25b80:	f003 f80b 	bl	28b9a <printk>
   25b84:	4805      	ldr	r0, [pc, #20]	; (25b9c <k_sched_lock+0xbc>)
   25b86:	21ac      	movs	r1, #172	; 0xac
   25b88:	f003 fa48 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25b8c:	f385 8811 	msr	BASEPRI, r5
   25b90:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
   25b94:	bd38      	pop	{r3, r4, r5, pc}
   25b96:	bf00      	nop
   25b98:	200029fc 	.word	0x200029fc
   25b9c:	0002e9fe 	.word	0x0002e9fe
   25ba0:	0002ea50 	.word	0x0002ea50
   25ba4:	0002e93e 	.word	0x0002e93e
   25ba8:	0002ea65 	.word	0x0002ea65
   25bac:	00033e49 	.word	0x00033e49
   25bb0:	00033f76 	.word	0x00033f76
   25bb4:	00033299 	.word	0x00033299
   25bb8:	20001f98 	.word	0x20001f98
   25bbc:	00033fa1 	.word	0x00033fa1
   25bc0:	0002ea24 	.word	0x0002ea24
   25bc4:	0002ea3b 	.word	0x0002ea3b

00025bc8 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25bc8:	4b0c      	ldr	r3, [pc, #48]	; (25bfc <z_priq_dumb_remove+0x34>)
   25bca:	4299      	cmp	r1, r3
{
   25bcc:	b510      	push	{r4, lr}
   25bce:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25bd0:	d10b      	bne.n	25bea <z_priq_dumb_remove+0x22>
   25bd2:	490b      	ldr	r1, [pc, #44]	; (25c00 <z_priq_dumb_remove+0x38>)
   25bd4:	480b      	ldr	r0, [pc, #44]	; (25c04 <z_priq_dumb_remove+0x3c>)
   25bd6:	4a0c      	ldr	r2, [pc, #48]	; (25c08 <z_priq_dumb_remove+0x40>)
   25bd8:	f240 33e7 	movw	r3, #999	; 0x3e7
   25bdc:	f002 ffdd 	bl	28b9a <printk>
   25be0:	4809      	ldr	r0, [pc, #36]	; (25c08 <z_priq_dumb_remove+0x40>)
   25be2:	f240 31e7 	movw	r1, #999	; 0x3e7
   25be6:	f003 fa19 	bl	2901c <assert_post_action>
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
   25bea:	e9d4 3200 	ldrd	r3, r2, [r4]

	prev->next = next;
   25bee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   25bf0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   25bf2:	2300      	movs	r3, #0
	node->prev = NULL;
   25bf4:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   25bf8:	bd10      	pop	{r4, pc}
   25bfa:	bf00      	nop
   25bfc:	20001fd8 	.word	0x20001fd8
   25c00:	00034155 	.word	0x00034155
   25c04:	0002e93e 	.word	0x0002e93e
   25c08:	00034133 	.word	0x00034133

00025c0c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
   25c0c:	6883      	ldr	r3, [r0, #8]
{
   25c0e:	b510      	push	{r4, lr}
   25c10:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
   25c12:	b95b      	cbnz	r3, 25c2c <unpend_thread_no_timeout+0x20>
   25c14:	490b      	ldr	r1, [pc, #44]	; (25c44 <unpend_thread_no_timeout+0x38>)
   25c16:	480c      	ldr	r0, [pc, #48]	; (25c48 <unpend_thread_no_timeout+0x3c>)
   25c18:	4a0c      	ldr	r2, [pc, #48]	; (25c4c <unpend_thread_no_timeout+0x40>)
   25c1a:	f240 2383 	movw	r3, #643	; 0x283
   25c1e:	f002 ffbc 	bl	28b9a <printk>
   25c22:	480a      	ldr	r0, [pc, #40]	; (25c4c <unpend_thread_no_timeout+0x40>)
   25c24:	f240 2183 	movw	r1, #643	; 0x283
   25c28:	f003 f9f8 	bl	2901c <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
   25c2c:	68a0      	ldr	r0, [r4, #8]
   25c2e:	4621      	mov	r1, r4
   25c30:	f7ff ffca 	bl	25bc8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   25c34:	7b63      	ldrb	r3, [r4, #13]
   25c36:	f023 0302 	bic.w	r3, r3, #2
   25c3a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
   25c3c:	2300      	movs	r3, #0
   25c3e:	60a3      	str	r3, [r4, #8]
}
   25c40:	bd10      	pop	{r4, pc}
   25c42:	bf00      	nop
   25c44:	00034176 	.word	0x00034176
   25c48:	0002e93e 	.word	0x0002e93e
   25c4c:	00034133 	.word	0x00034133

00025c50 <z_unpend_thread>:
{
   25c50:	b538      	push	{r3, r4, r5, lr}
   25c52:	4604      	mov	r4, r0
	__asm__ volatile(
   25c54:	f04f 0340 	mov.w	r3, #64	; 0x40
   25c58:	f3ef 8511 	mrs	r5, BASEPRI
   25c5c:	f383 8812 	msr	BASEPRI_MAX, r3
   25c60:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25c64:	4819      	ldr	r0, [pc, #100]	; (25ccc <z_unpend_thread+0x7c>)
   25c66:	f7fe f897 	bl	23d98 <z_spin_lock_valid>
   25c6a:	b968      	cbnz	r0, 25c88 <z_unpend_thread+0x38>
   25c6c:	4a18      	ldr	r2, [pc, #96]	; (25cd0 <z_unpend_thread+0x80>)
   25c6e:	4919      	ldr	r1, [pc, #100]	; (25cd4 <z_unpend_thread+0x84>)
   25c70:	4819      	ldr	r0, [pc, #100]	; (25cd8 <z_unpend_thread+0x88>)
   25c72:	2381      	movs	r3, #129	; 0x81
   25c74:	f002 ff91 	bl	28b9a <printk>
   25c78:	4914      	ldr	r1, [pc, #80]	; (25ccc <z_unpend_thread+0x7c>)
   25c7a:	4818      	ldr	r0, [pc, #96]	; (25cdc <z_unpend_thread+0x8c>)
   25c7c:	f002 ff8d 	bl	28b9a <printk>
   25c80:	4813      	ldr	r0, [pc, #76]	; (25cd0 <z_unpend_thread+0x80>)
   25c82:	2181      	movs	r1, #129	; 0x81
   25c84:	f003 f9ca 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   25c88:	4810      	ldr	r0, [pc, #64]	; (25ccc <z_unpend_thread+0x7c>)
   25c8a:	f7fe f8a3 	bl	23dd4 <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
   25c8e:	4620      	mov	r0, r4
   25c90:	f7ff ffbc 	bl	25c0c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25c94:	480d      	ldr	r0, [pc, #52]	; (25ccc <z_unpend_thread+0x7c>)
   25c96:	f7fe f88d 	bl	23db4 <z_spin_unlock_valid>
   25c9a:	b968      	cbnz	r0, 25cb8 <z_unpend_thread+0x68>
   25c9c:	4a0c      	ldr	r2, [pc, #48]	; (25cd0 <z_unpend_thread+0x80>)
   25c9e:	4910      	ldr	r1, [pc, #64]	; (25ce0 <z_unpend_thread+0x90>)
   25ca0:	480d      	ldr	r0, [pc, #52]	; (25cd8 <z_unpend_thread+0x88>)
   25ca2:	23ac      	movs	r3, #172	; 0xac
   25ca4:	f002 ff79 	bl	28b9a <printk>
   25ca8:	4908      	ldr	r1, [pc, #32]	; (25ccc <z_unpend_thread+0x7c>)
   25caa:	480e      	ldr	r0, [pc, #56]	; (25ce4 <z_unpend_thread+0x94>)
   25cac:	f002 ff75 	bl	28b9a <printk>
   25cb0:	4807      	ldr	r0, [pc, #28]	; (25cd0 <z_unpend_thread+0x80>)
   25cb2:	21ac      	movs	r1, #172	; 0xac
   25cb4:	f003 f9b2 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25cb8:	f385 8811 	msr	BASEPRI, r5
   25cbc:	f3bf 8f6f 	isb	sy
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   25cc0:	f104 0018 	add.w	r0, r4, #24
}
   25cc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   25cc8:	f001 ba6a 	b.w	271a0 <z_abort_timeout>
   25ccc:	200029fc 	.word	0x200029fc
   25cd0:	0002e9fe 	.word	0x0002e9fe
   25cd4:	0002ea50 	.word	0x0002ea50
   25cd8:	0002e93e 	.word	0x0002e93e
   25cdc:	0002ea65 	.word	0x0002ea65
   25ce0:	0002ea24 	.word	0x0002ea24
   25ce4:	0002ea3b 	.word	0x0002ea3b

00025ce8 <update_cache>:
{
   25ce8:	b538      	push	{r3, r4, r5, lr}
   25cea:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
   25cec:	4814      	ldr	r0, [pc, #80]	; (25d40 <update_cache+0x58>)
   25cee:	4d15      	ldr	r5, [pc, #84]	; (25d44 <update_cache+0x5c>)
   25cf0:	f006 fea4 	bl	2ca3c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
   25cf4:	4604      	mov	r4, r0
   25cf6:	b900      	cbnz	r0, 25cfa <update_cache+0x12>
   25cf8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
   25cfa:	b9ca      	cbnz	r2, 25d30 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
   25cfc:	68ab      	ldr	r3, [r5, #8]
   25cfe:	b963      	cbnz	r3, 25d1a <update_cache+0x32>
   25d00:	4911      	ldr	r1, [pc, #68]	; (25d48 <update_cache+0x60>)
   25d02:	4a12      	ldr	r2, [pc, #72]	; (25d4c <update_cache+0x64>)
   25d04:	4812      	ldr	r0, [pc, #72]	; (25d50 <update_cache+0x68>)
   25d06:	2389      	movs	r3, #137	; 0x89
   25d08:	f002 ff47 	bl	28b9a <printk>
   25d0c:	4811      	ldr	r0, [pc, #68]	; (25d54 <update_cache+0x6c>)
   25d0e:	f002 ff44 	bl	28b9a <printk>
   25d12:	480e      	ldr	r0, [pc, #56]	; (25d4c <update_cache+0x64>)
   25d14:	2189      	movs	r1, #137	; 0x89
   25d16:	f003 f981 	bl	2901c <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
   25d1a:	68ab      	ldr	r3, [r5, #8]
   25d1c:	7b5a      	ldrb	r2, [r3, #13]
   25d1e:	06d2      	lsls	r2, r2, #27
   25d20:	d106      	bne.n	25d30 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   25d22:	69a2      	ldr	r2, [r4, #24]
   25d24:	b922      	cbnz	r2, 25d30 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
   25d26:	89da      	ldrh	r2, [r3, #14]
   25d28:	2a7f      	cmp	r2, #127	; 0x7f
   25d2a:	d901      	bls.n	25d30 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
   25d2c:	622b      	str	r3, [r5, #32]
}
   25d2e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   25d30:	68ab      	ldr	r3, [r5, #8]
   25d32:	42a3      	cmp	r3, r4
   25d34:	d001      	beq.n	25d3a <update_cache+0x52>
			z_reset_time_slice();
   25d36:	f7ff fdcb 	bl	258d0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   25d3a:	622c      	str	r4, [r5, #32]
}
   25d3c:	e7f7      	b.n	25d2e <update_cache+0x46>
   25d3e:	bf00      	nop
   25d40:	20001fbc 	.word	0x20001fbc
   25d44:	20001f98 	.word	0x20001f98
   25d48:	0003418d 	.word	0x0003418d
   25d4c:	00034133 	.word	0x00034133
   25d50:	0002e93e 	.word	0x0002e93e
   25d54:	00033299 	.word	0x00033299

00025d58 <move_thread_to_end_of_prio_q>:
{
   25d58:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   25d5a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   25d5e:	7b43      	ldrb	r3, [r0, #13]
   25d60:	2a00      	cmp	r2, #0
{
   25d62:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   25d64:	da06      	bge.n	25d74 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   25d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   25d6a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   25d6c:	4601      	mov	r1, r0
   25d6e:	481f      	ldr	r0, [pc, #124]	; (25dec <move_thread_to_end_of_prio_q+0x94>)
   25d70:	f7ff ff2a 	bl	25bc8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   25d74:	7b63      	ldrb	r3, [r4, #13]
   25d76:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25d7a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25d7c:	4b1c      	ldr	r3, [pc, #112]	; (25df0 <move_thread_to_end_of_prio_q+0x98>)
   25d7e:	429c      	cmp	r4, r3
   25d80:	d109      	bne.n	25d96 <move_thread_to_end_of_prio_q+0x3e>
   25d82:	491c      	ldr	r1, [pc, #112]	; (25df4 <move_thread_to_end_of_prio_q+0x9c>)
   25d84:	481c      	ldr	r0, [pc, #112]	; (25df8 <move_thread_to_end_of_prio_q+0xa0>)
   25d86:	4a1d      	ldr	r2, [pc, #116]	; (25dfc <move_thread_to_end_of_prio_q+0xa4>)
   25d88:	23ba      	movs	r3, #186	; 0xba
   25d8a:	f002 ff06 	bl	28b9a <printk>
   25d8e:	481b      	ldr	r0, [pc, #108]	; (25dfc <move_thread_to_end_of_prio_q+0xa4>)
   25d90:	21ba      	movs	r1, #186	; 0xba
   25d92:	f003 f943 	bl	2901c <assert_post_action>
	return list->head == list;
   25d96:	4a1a      	ldr	r2, [pc, #104]	; (25e00 <move_thread_to_end_of_prio_q+0xa8>)
   25d98:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25d9a:	6a95      	ldr	r5, [r2, #40]	; 0x28
	return list->head == list;
   25d9c:	f851 3f24 	ldr.w	r3, [r1, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25da0:	428b      	cmp	r3, r1
   25da2:	bf08      	it	eq
   25da4:	2300      	moveq	r3, #0
   25da6:	2b00      	cmp	r3, #0
   25da8:	bf38      	it	cc
   25daa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25dac:	b1cb      	cbz	r3, 25de2 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
   25dae:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   25db2:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   25db6:	4286      	cmp	r6, r0
   25db8:	d00f      	beq.n	25dda <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
   25dba:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   25dbc:	2800      	cmp	r0, #0
   25dbe:	dd0c      	ble.n	25dda <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
   25dc0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   25dc2:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
   25dc6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   25dc8:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
   25dca:	6890      	ldr	r0, [r2, #8]
   25dcc:	1b03      	subs	r3, r0, r4
   25dce:	4258      	negs	r0, r3
}
   25dd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   25dd4:	4158      	adcs	r0, r3
   25dd6:	f7ff bf87 	b.w	25ce8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25dda:	42ab      	cmp	r3, r5
   25ddc:	d001      	beq.n	25de2 <move_thread_to_end_of_prio_q+0x8a>
   25dde:	681b      	ldr	r3, [r3, #0]
   25de0:	e7e4      	b.n	25dac <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
   25de2:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
   25de6:	602c      	str	r4, [r5, #0]
	list->tail = node;
   25de8:	6294      	str	r4, [r2, #40]	; 0x28
}
   25dea:	e7ee      	b.n	25dca <move_thread_to_end_of_prio_q+0x72>
   25dec:	20001fbc 	.word	0x20001fbc
   25df0:	20001fd8 	.word	0x20001fd8
   25df4:	00034155 	.word	0x00034155
   25df8:	0002e93e 	.word	0x0002e93e
   25dfc:	00034133 	.word	0x00034133
   25e00:	20001f98 	.word	0x20001f98

00025e04 <z_time_slice>:
{
   25e04:	b570      	push	{r4, r5, r6, lr}
   25e06:	4604      	mov	r4, r0
	__asm__ volatile(
   25e08:	f04f 0340 	mov.w	r3, #64	; 0x40
   25e0c:	f3ef 8511 	mrs	r5, BASEPRI
   25e10:	f383 8812 	msr	BASEPRI_MAX, r3
   25e14:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25e18:	482a      	ldr	r0, [pc, #168]	; (25ec4 <z_time_slice+0xc0>)
   25e1a:	f7fd ffbd 	bl	23d98 <z_spin_lock_valid>
   25e1e:	b968      	cbnz	r0, 25e3c <z_time_slice+0x38>
   25e20:	4a29      	ldr	r2, [pc, #164]	; (25ec8 <z_time_slice+0xc4>)
   25e22:	492a      	ldr	r1, [pc, #168]	; (25ecc <z_time_slice+0xc8>)
   25e24:	482a      	ldr	r0, [pc, #168]	; (25ed0 <z_time_slice+0xcc>)
   25e26:	2381      	movs	r3, #129	; 0x81
   25e28:	f002 feb7 	bl	28b9a <printk>
   25e2c:	4925      	ldr	r1, [pc, #148]	; (25ec4 <z_time_slice+0xc0>)
   25e2e:	4829      	ldr	r0, [pc, #164]	; (25ed4 <z_time_slice+0xd0>)
   25e30:	f002 feb3 	bl	28b9a <printk>
   25e34:	4824      	ldr	r0, [pc, #144]	; (25ec8 <z_time_slice+0xc4>)
   25e36:	2181      	movs	r1, #129	; 0x81
   25e38:	f003 f8f0 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   25e3c:	4821      	ldr	r0, [pc, #132]	; (25ec4 <z_time_slice+0xc0>)
   25e3e:	f7fd ffc9 	bl	23dd4 <z_spin_lock_set_owner>
	if (pending_current == _current) {
   25e42:	4b25      	ldr	r3, [pc, #148]	; (25ed8 <z_time_slice+0xd4>)
   25e44:	4a25      	ldr	r2, [pc, #148]	; (25edc <z_time_slice+0xd8>)
   25e46:	6898      	ldr	r0, [r3, #8]
   25e48:	6811      	ldr	r1, [r2, #0]
   25e4a:	4288      	cmp	r0, r1
   25e4c:	4619      	mov	r1, r3
   25e4e:	d118      	bne.n	25e82 <z_time_slice+0x7e>
			z_reset_time_slice();
   25e50:	f7ff fd3e 	bl	258d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25e54:	481b      	ldr	r0, [pc, #108]	; (25ec4 <z_time_slice+0xc0>)
   25e56:	f7fd ffad 	bl	23db4 <z_spin_unlock_valid>
   25e5a:	b968      	cbnz	r0, 25e78 <z_time_slice+0x74>
   25e5c:	4a1a      	ldr	r2, [pc, #104]	; (25ec8 <z_time_slice+0xc4>)
   25e5e:	4920      	ldr	r1, [pc, #128]	; (25ee0 <z_time_slice+0xdc>)
   25e60:	481b      	ldr	r0, [pc, #108]	; (25ed0 <z_time_slice+0xcc>)
   25e62:	23ac      	movs	r3, #172	; 0xac
   25e64:	f002 fe99 	bl	28b9a <printk>
   25e68:	4916      	ldr	r1, [pc, #88]	; (25ec4 <z_time_slice+0xc0>)
   25e6a:	481e      	ldr	r0, [pc, #120]	; (25ee4 <z_time_slice+0xe0>)
   25e6c:	f002 fe95 	bl	28b9a <printk>
   25e70:	4815      	ldr	r0, [pc, #84]	; (25ec8 <z_time_slice+0xc4>)
   25e72:	21ac      	movs	r1, #172	; 0xac
   25e74:	f003 f8d2 	bl	2901c <assert_post_action>
	__asm__ volatile(
   25e78:	f385 8811 	msr	BASEPRI, r5
   25e7c:	f3bf 8f6f 	isb	sy
}
   25e80:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   25e82:	2600      	movs	r6, #0
   25e84:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   25e86:	4a18      	ldr	r2, [pc, #96]	; (25ee8 <z_time_slice+0xe4>)
   25e88:	6812      	ldr	r2, [r2, #0]
   25e8a:	b1ba      	cbz	r2, 25ebc <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   25e8c:	89c2      	ldrh	r2, [r0, #14]
   25e8e:	2a7f      	cmp	r2, #127	; 0x7f
   25e90:	d814      	bhi.n	25ebc <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
   25e92:	7b42      	ldrb	r2, [r0, #13]
   25e94:	06d2      	lsls	r2, r2, #27
   25e96:	d111      	bne.n	25ebc <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   25e98:	4a14      	ldr	r2, [pc, #80]	; (25eec <z_time_slice+0xe8>)
   25e9a:	f990 600e 	ldrsb.w	r6, [r0, #14]
   25e9e:	6812      	ldr	r2, [r2, #0]
   25ea0:	4296      	cmp	r6, r2
   25ea2:	db0b      	blt.n	25ebc <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
   25ea4:	4a12      	ldr	r2, [pc, #72]	; (25ef0 <z_time_slice+0xec>)
   25ea6:	4290      	cmp	r0, r2
   25ea8:	d008      	beq.n	25ebc <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
   25eaa:	691a      	ldr	r2, [r3, #16]
   25eac:	42a2      	cmp	r2, r4
   25eae:	dc02      	bgt.n	25eb6 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
   25eb0:	f7ff ff52 	bl	25d58 <move_thread_to_end_of_prio_q>
   25eb4:	e7cc      	b.n	25e50 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
   25eb6:	1b12      	subs	r2, r2, r4
   25eb8:	611a      	str	r2, [r3, #16]
   25eba:	e7cb      	b.n	25e54 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
   25ebc:	2300      	movs	r3, #0
   25ebe:	610b      	str	r3, [r1, #16]
   25ec0:	e7c8      	b.n	25e54 <z_time_slice+0x50>
   25ec2:	bf00      	nop
   25ec4:	200029fc 	.word	0x200029fc
   25ec8:	0002e9fe 	.word	0x0002e9fe
   25ecc:	0002ea50 	.word	0x0002ea50
   25ed0:	0002e93e 	.word	0x0002e93e
   25ed4:	0002ea65 	.word	0x0002ea65
   25ed8:	20001f98 	.word	0x20001f98
   25edc:	200029f8 	.word	0x200029f8
   25ee0:	0002ea24 	.word	0x0002ea24
   25ee4:	0002ea3b 	.word	0x0002ea3b
   25ee8:	20002a04 	.word	0x20002a04
   25eec:	20002a00 	.word	0x20002a00
   25ef0:	20001fd8 	.word	0x20001fd8

00025ef4 <ready_thread>:
{
   25ef4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   25ef6:	f990 200d 	ldrsb.w	r2, [r0, #13]
   25efa:	7b43      	ldrb	r3, [r0, #13]
   25efc:	2a00      	cmp	r2, #0
{
   25efe:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   25f00:	db3e      	blt.n	25f80 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   25f02:	06da      	lsls	r2, r3, #27
   25f04:	d13c      	bne.n	25f80 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
   25f06:	6985      	ldr	r5, [r0, #24]
   25f08:	2d00      	cmp	r5, #0
   25f0a:	d139      	bne.n	25f80 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
   25f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   25f10:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   25f12:	4b1c      	ldr	r3, [pc, #112]	; (25f84 <ready_thread+0x90>)
   25f14:	4298      	cmp	r0, r3
   25f16:	d109      	bne.n	25f2c <ready_thread+0x38>
   25f18:	491b      	ldr	r1, [pc, #108]	; (25f88 <ready_thread+0x94>)
   25f1a:	481c      	ldr	r0, [pc, #112]	; (25f8c <ready_thread+0x98>)
   25f1c:	4a1c      	ldr	r2, [pc, #112]	; (25f90 <ready_thread+0x9c>)
   25f1e:	23ba      	movs	r3, #186	; 0xba
   25f20:	f002 fe3b 	bl	28b9a <printk>
   25f24:	481a      	ldr	r0, [pc, #104]	; (25f90 <ready_thread+0x9c>)
   25f26:	21ba      	movs	r1, #186	; 0xba
   25f28:	f003 f878 	bl	2901c <assert_post_action>
	return list->head == list;
   25f2c:	4919      	ldr	r1, [pc, #100]	; (25f94 <ready_thread+0xa0>)
   25f2e:	460b      	mov	r3, r1
   25f30:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   25f34:	4298      	cmp	r0, r3
   25f36:	bf18      	it	ne
   25f38:	4605      	movne	r5, r0
   25f3a:	2d00      	cmp	r5, #0
   25f3c:	461a      	mov	r2, r3
   25f3e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   25f40:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   25f42:	bf38      	it	cc
   25f44:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   25f46:	b1b3      	cbz	r3, 25f76 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
   25f48:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   25f4c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   25f50:	4286      	cmp	r6, r0
   25f52:	d00c      	beq.n	25f6e <ready_thread+0x7a>
		return b2 - b1;
   25f54:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   25f56:	2800      	cmp	r0, #0
   25f58:	dd09      	ble.n	25f6e <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
   25f5a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   25f5c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   25f60:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   25f62:	605c      	str	r4, [r3, #4]
}
   25f64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
   25f68:	2000      	movs	r0, #0
   25f6a:	f7ff bebd 	b.w	25ce8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   25f6e:	42ab      	cmp	r3, r5
   25f70:	d001      	beq.n	25f76 <ready_thread+0x82>
   25f72:	681b      	ldr	r3, [r3, #0]
   25f74:	e7e7      	b.n	25f46 <ready_thread+0x52>
	node->prev = tail;
   25f76:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   25f7a:	602c      	str	r4, [r5, #0]
	list->tail = node;
   25f7c:	628c      	str	r4, [r1, #40]	; 0x28
}
   25f7e:	e7f1      	b.n	25f64 <ready_thread+0x70>
}
   25f80:	bd70      	pop	{r4, r5, r6, pc}
   25f82:	bf00      	nop
   25f84:	20001fd8 	.word	0x20001fd8
   25f88:	00034155 	.word	0x00034155
   25f8c:	0002e93e 	.word	0x0002e93e
   25f90:	00034133 	.word	0x00034133
   25f94:	20001f98 	.word	0x20001f98

00025f98 <z_ready_thread>:
{
   25f98:	b538      	push	{r3, r4, r5, lr}
   25f9a:	4604      	mov	r4, r0
	__asm__ volatile(
   25f9c:	f04f 0340 	mov.w	r3, #64	; 0x40
   25fa0:	f3ef 8511 	mrs	r5, BASEPRI
   25fa4:	f383 8812 	msr	BASEPRI_MAX, r3
   25fa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   25fac:	4817      	ldr	r0, [pc, #92]	; (2600c <z_ready_thread+0x74>)
   25fae:	f7fd fef3 	bl	23d98 <z_spin_lock_valid>
   25fb2:	b968      	cbnz	r0, 25fd0 <z_ready_thread+0x38>
   25fb4:	4a16      	ldr	r2, [pc, #88]	; (26010 <z_ready_thread+0x78>)
   25fb6:	4917      	ldr	r1, [pc, #92]	; (26014 <z_ready_thread+0x7c>)
   25fb8:	4817      	ldr	r0, [pc, #92]	; (26018 <z_ready_thread+0x80>)
   25fba:	2381      	movs	r3, #129	; 0x81
   25fbc:	f002 fded 	bl	28b9a <printk>
   25fc0:	4912      	ldr	r1, [pc, #72]	; (2600c <z_ready_thread+0x74>)
   25fc2:	4816      	ldr	r0, [pc, #88]	; (2601c <z_ready_thread+0x84>)
   25fc4:	f002 fde9 	bl	28b9a <printk>
   25fc8:	4811      	ldr	r0, [pc, #68]	; (26010 <z_ready_thread+0x78>)
   25fca:	2181      	movs	r1, #129	; 0x81
   25fcc:	f003 f826 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   25fd0:	480e      	ldr	r0, [pc, #56]	; (2600c <z_ready_thread+0x74>)
   25fd2:	f7fd feff 	bl	23dd4 <z_spin_lock_set_owner>
			ready_thread(thread);
   25fd6:	4620      	mov	r0, r4
   25fd8:	f7ff ff8c 	bl	25ef4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   25fdc:	480b      	ldr	r0, [pc, #44]	; (2600c <z_ready_thread+0x74>)
   25fde:	f7fd fee9 	bl	23db4 <z_spin_unlock_valid>
   25fe2:	b968      	cbnz	r0, 26000 <z_ready_thread+0x68>
   25fe4:	4a0a      	ldr	r2, [pc, #40]	; (26010 <z_ready_thread+0x78>)
   25fe6:	490e      	ldr	r1, [pc, #56]	; (26020 <z_ready_thread+0x88>)
   25fe8:	480b      	ldr	r0, [pc, #44]	; (26018 <z_ready_thread+0x80>)
   25fea:	23ac      	movs	r3, #172	; 0xac
   25fec:	f002 fdd5 	bl	28b9a <printk>
   25ff0:	4906      	ldr	r1, [pc, #24]	; (2600c <z_ready_thread+0x74>)
   25ff2:	480c      	ldr	r0, [pc, #48]	; (26024 <z_ready_thread+0x8c>)
   25ff4:	f002 fdd1 	bl	28b9a <printk>
   25ff8:	4805      	ldr	r0, [pc, #20]	; (26010 <z_ready_thread+0x78>)
   25ffa:	21ac      	movs	r1, #172	; 0xac
   25ffc:	f003 f80e 	bl	2901c <assert_post_action>
	__asm__ volatile(
   26000:	f385 8811 	msr	BASEPRI, r5
   26004:	f3bf 8f6f 	isb	sy
}
   26008:	bd38      	pop	{r3, r4, r5, pc}
   2600a:	bf00      	nop
   2600c:	200029fc 	.word	0x200029fc
   26010:	0002e9fe 	.word	0x0002e9fe
   26014:	0002ea50 	.word	0x0002ea50
   26018:	0002e93e 	.word	0x0002e93e
   2601c:	0002ea65 	.word	0x0002ea65
   26020:	0002ea24 	.word	0x0002ea24
   26024:	0002ea3b 	.word	0x0002ea3b

00026028 <z_sched_start>:
{
   26028:	b538      	push	{r3, r4, r5, lr}
   2602a:	4604      	mov	r4, r0
	__asm__ volatile(
   2602c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26030:	f3ef 8511 	mrs	r5, BASEPRI
   26034:	f383 8812 	msr	BASEPRI_MAX, r3
   26038:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2603c:	481d      	ldr	r0, [pc, #116]	; (260b4 <z_sched_start+0x8c>)
   2603e:	f7fd feab 	bl	23d98 <z_spin_lock_valid>
   26042:	b968      	cbnz	r0, 26060 <z_sched_start+0x38>
   26044:	4a1c      	ldr	r2, [pc, #112]	; (260b8 <z_sched_start+0x90>)
   26046:	491d      	ldr	r1, [pc, #116]	; (260bc <z_sched_start+0x94>)
   26048:	481d      	ldr	r0, [pc, #116]	; (260c0 <z_sched_start+0x98>)
   2604a:	2381      	movs	r3, #129	; 0x81
   2604c:	f002 fda5 	bl	28b9a <printk>
   26050:	4918      	ldr	r1, [pc, #96]	; (260b4 <z_sched_start+0x8c>)
   26052:	481c      	ldr	r0, [pc, #112]	; (260c4 <z_sched_start+0x9c>)
   26054:	f002 fda1 	bl	28b9a <printk>
   26058:	4817      	ldr	r0, [pc, #92]	; (260b8 <z_sched_start+0x90>)
   2605a:	2181      	movs	r1, #129	; 0x81
   2605c:	f002 ffde 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   26060:	4814      	ldr	r0, [pc, #80]	; (260b4 <z_sched_start+0x8c>)
   26062:	f7fd feb7 	bl	23dd4 <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
   26066:	7b63      	ldrb	r3, [r4, #13]
   26068:	075a      	lsls	r2, r3, #29
   2606a:	d416      	bmi.n	2609a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2606c:	4811      	ldr	r0, [pc, #68]	; (260b4 <z_sched_start+0x8c>)
   2606e:	f7fd fea1 	bl	23db4 <z_spin_unlock_valid>
   26072:	b968      	cbnz	r0, 26090 <z_sched_start+0x68>
   26074:	4a10      	ldr	r2, [pc, #64]	; (260b8 <z_sched_start+0x90>)
   26076:	4914      	ldr	r1, [pc, #80]	; (260c8 <z_sched_start+0xa0>)
   26078:	4811      	ldr	r0, [pc, #68]	; (260c0 <z_sched_start+0x98>)
   2607a:	23ac      	movs	r3, #172	; 0xac
   2607c:	f002 fd8d 	bl	28b9a <printk>
   26080:	490c      	ldr	r1, [pc, #48]	; (260b4 <z_sched_start+0x8c>)
   26082:	4812      	ldr	r0, [pc, #72]	; (260cc <z_sched_start+0xa4>)
   26084:	f002 fd89 	bl	28b9a <printk>
   26088:	480b      	ldr	r0, [pc, #44]	; (260b8 <z_sched_start+0x90>)
   2608a:	21ac      	movs	r1, #172	; 0xac
   2608c:	f002 ffc6 	bl	2901c <assert_post_action>
	__asm__ volatile(
   26090:	f385 8811 	msr	BASEPRI, r5
   26094:	f3bf 8f6f 	isb	sy
}
   26098:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2609a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
   2609e:	4620      	mov	r0, r4
   260a0:	7363      	strb	r3, [r4, #13]
   260a2:	f7ff ff27 	bl	25ef4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   260a6:	4629      	mov	r1, r5
   260a8:	4802      	ldr	r0, [pc, #8]	; (260b4 <z_sched_start+0x8c>)
}
   260aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
   260ae:	f7ff bcd3 	b.w	25a58 <z_reschedule>
   260b2:	bf00      	nop
   260b4:	200029fc 	.word	0x200029fc
   260b8:	0002e9fe 	.word	0x0002e9fe
   260bc:	0002ea50 	.word	0x0002ea50
   260c0:	0002e93e 	.word	0x0002e93e
   260c4:	0002ea65 	.word	0x0002ea65
   260c8:	0002ea24 	.word	0x0002ea24
   260cc:	0002ea3b 	.word	0x0002ea3b

000260d0 <z_thread_timeout>:
{
   260d0:	b570      	push	{r4, r5, r6, lr}
   260d2:	4604      	mov	r4, r0
	__asm__ volatile(
   260d4:	f04f 0340 	mov.w	r3, #64	; 0x40
   260d8:	f3ef 8611 	mrs	r6, BASEPRI
   260dc:	f383 8812 	msr	BASEPRI_MAX, r3
   260e0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   260e4:	4820      	ldr	r0, [pc, #128]	; (26168 <z_thread_timeout+0x98>)
   260e6:	f7fd fe57 	bl	23d98 <z_spin_lock_valid>
   260ea:	b968      	cbnz	r0, 26108 <z_thread_timeout+0x38>
   260ec:	4a1f      	ldr	r2, [pc, #124]	; (2616c <z_thread_timeout+0x9c>)
   260ee:	4920      	ldr	r1, [pc, #128]	; (26170 <z_thread_timeout+0xa0>)
   260f0:	4820      	ldr	r0, [pc, #128]	; (26174 <z_thread_timeout+0xa4>)
   260f2:	2381      	movs	r3, #129	; 0x81
   260f4:	f002 fd51 	bl	28b9a <printk>
   260f8:	491b      	ldr	r1, [pc, #108]	; (26168 <z_thread_timeout+0x98>)
   260fa:	481f      	ldr	r0, [pc, #124]	; (26178 <z_thread_timeout+0xa8>)
   260fc:	f002 fd4d 	bl	28b9a <printk>
   26100:	481a      	ldr	r0, [pc, #104]	; (2616c <z_thread_timeout+0x9c>)
   26102:	2181      	movs	r1, #129	; 0x81
   26104:	f002 ff8a 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   26108:	4817      	ldr	r0, [pc, #92]	; (26168 <z_thread_timeout+0x98>)
   2610a:	f7fd fe63 	bl	23dd4 <z_spin_lock_set_owner>
		if (!killed) {
   2610e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   26112:	f013 0f28 	tst.w	r3, #40	; 0x28
   26116:	d110      	bne.n	2613a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
   26118:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
   2611c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
   26120:	b113      	cbz	r3, 26128 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
   26122:	4628      	mov	r0, r5
   26124:	f7ff fd72 	bl	25c0c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26128:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   2612c:	f023 0314 	bic.w	r3, r3, #20
   26130:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
   26134:	4628      	mov	r0, r5
   26136:	f7ff fedd 	bl	25ef4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2613a:	480b      	ldr	r0, [pc, #44]	; (26168 <z_thread_timeout+0x98>)
   2613c:	f7fd fe3a 	bl	23db4 <z_spin_unlock_valid>
   26140:	b968      	cbnz	r0, 2615e <z_thread_timeout+0x8e>
   26142:	4a0a      	ldr	r2, [pc, #40]	; (2616c <z_thread_timeout+0x9c>)
   26144:	490d      	ldr	r1, [pc, #52]	; (2617c <z_thread_timeout+0xac>)
   26146:	480b      	ldr	r0, [pc, #44]	; (26174 <z_thread_timeout+0xa4>)
   26148:	23ac      	movs	r3, #172	; 0xac
   2614a:	f002 fd26 	bl	28b9a <printk>
   2614e:	4906      	ldr	r1, [pc, #24]	; (26168 <z_thread_timeout+0x98>)
   26150:	480b      	ldr	r0, [pc, #44]	; (26180 <z_thread_timeout+0xb0>)
   26152:	f002 fd22 	bl	28b9a <printk>
   26156:	4805      	ldr	r0, [pc, #20]	; (2616c <z_thread_timeout+0x9c>)
   26158:	21ac      	movs	r1, #172	; 0xac
   2615a:	f002 ff5f 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2615e:	f386 8811 	msr	BASEPRI, r6
   26162:	f3bf 8f6f 	isb	sy
}
   26166:	bd70      	pop	{r4, r5, r6, pc}
   26168:	200029fc 	.word	0x200029fc
   2616c:	0002e9fe 	.word	0x0002e9fe
   26170:	0002ea50 	.word	0x0002ea50
   26174:	0002e93e 	.word	0x0002e93e
   26178:	0002ea65 	.word	0x0002ea65
   2617c:	0002ea24 	.word	0x0002ea24
   26180:	0002ea3b 	.word	0x0002ea3b

00026184 <unready_thread>:
{
   26184:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
   26186:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   2618a:	7b43      	ldrb	r3, [r0, #13]
   2618c:	2a00      	cmp	r2, #0
{
   2618e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
   26190:	da06      	bge.n	261a0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26192:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   26196:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26198:	4601      	mov	r1, r0
   2619a:	4806      	ldr	r0, [pc, #24]	; (261b4 <unready_thread+0x30>)
   2619c:	f7ff fd14 	bl	25bc8 <z_priq_dumb_remove>
	update_cache(thread == _current);
   261a0:	4b05      	ldr	r3, [pc, #20]	; (261b8 <unready_thread+0x34>)
   261a2:	6898      	ldr	r0, [r3, #8]
   261a4:	1b03      	subs	r3, r0, r4
   261a6:	4258      	negs	r0, r3
}
   261a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
   261ac:	4158      	adcs	r0, r3
   261ae:	f7ff bd9b 	b.w	25ce8 <update_cache>
   261b2:	bf00      	nop
   261b4:	20001fbc 	.word	0x20001fbc
   261b8:	20001f98 	.word	0x20001f98

000261bc <add_to_waitq_locked>:
{
   261bc:	b538      	push	{r3, r4, r5, lr}
   261be:	4604      	mov	r4, r0
   261c0:	460d      	mov	r5, r1
	unready_thread(thread);
   261c2:	f7ff ffdf 	bl	26184 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   261c6:	7b63      	ldrb	r3, [r4, #13]
   261c8:	f043 0302 	orr.w	r3, r3, #2
   261cc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   261ce:	b31d      	cbz	r5, 26218 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   261d0:	4b17      	ldr	r3, [pc, #92]	; (26230 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
   261d2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   261d4:	429c      	cmp	r4, r3
   261d6:	d109      	bne.n	261ec <add_to_waitq_locked+0x30>
   261d8:	4916      	ldr	r1, [pc, #88]	; (26234 <add_to_waitq_locked+0x78>)
   261da:	4817      	ldr	r0, [pc, #92]	; (26238 <add_to_waitq_locked+0x7c>)
   261dc:	4a17      	ldr	r2, [pc, #92]	; (2623c <add_to_waitq_locked+0x80>)
   261de:	23ba      	movs	r3, #186	; 0xba
   261e0:	f002 fcdb 	bl	28b9a <printk>
   261e4:	4815      	ldr	r0, [pc, #84]	; (2623c <add_to_waitq_locked+0x80>)
   261e6:	21ba      	movs	r1, #186	; 0xba
   261e8:	f002 ff18 	bl	2901c <assert_post_action>
	return list->head == list;
   261ec:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   261ee:	429d      	cmp	r5, r3
   261f0:	bf08      	it	eq
   261f2:	2300      	moveq	r3, #0
   261f4:	2b00      	cmp	r3, #0
   261f6:	bf38      	it	cc
   261f8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   261fa:	b19b      	cbz	r3, 26224 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
   261fc:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26200:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   26204:	4291      	cmp	r1, r2
   26206:	d008      	beq.n	2621a <add_to_waitq_locked+0x5e>
		return b2 - b1;
   26208:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
   2620a:	2a00      	cmp	r2, #0
   2620c:	dd05      	ble.n	2621a <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
   2620e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26210:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   26214:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26216:	605c      	str	r4, [r3, #4]
}
   26218:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2621a:	686a      	ldr	r2, [r5, #4]
   2621c:	4293      	cmp	r3, r2
   2621e:	d001      	beq.n	26224 <add_to_waitq_locked+0x68>
   26220:	681b      	ldr	r3, [r3, #0]
   26222:	e7ea      	b.n	261fa <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
   26224:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
   26226:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
   2622a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2622c:	606c      	str	r4, [r5, #4]
   2622e:	e7f3      	b.n	26218 <add_to_waitq_locked+0x5c>
   26230:	20001fd8 	.word	0x20001fd8
   26234:	00034155 	.word	0x00034155
   26238:	0002e93e 	.word	0x0002e93e
   2623c:	00034133 	.word	0x00034133

00026240 <pend>:
{
   26240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26244:	4604      	mov	r4, r0
   26246:	460d      	mov	r5, r1
   26248:	4616      	mov	r6, r2
   2624a:	461f      	mov	r7, r3
	__asm__ volatile(
   2624c:	f04f 0340 	mov.w	r3, #64	; 0x40
   26250:	f3ef 8811 	mrs	r8, BASEPRI
   26254:	f383 8812 	msr	BASEPRI_MAX, r3
   26258:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2625c:	481f      	ldr	r0, [pc, #124]	; (262dc <pend+0x9c>)
   2625e:	f7fd fd9b 	bl	23d98 <z_spin_lock_valid>
   26262:	b968      	cbnz	r0, 26280 <pend+0x40>
   26264:	4a1e      	ldr	r2, [pc, #120]	; (262e0 <pend+0xa0>)
   26266:	491f      	ldr	r1, [pc, #124]	; (262e4 <pend+0xa4>)
   26268:	481f      	ldr	r0, [pc, #124]	; (262e8 <pend+0xa8>)
   2626a:	2381      	movs	r3, #129	; 0x81
   2626c:	f002 fc95 	bl	28b9a <printk>
   26270:	491a      	ldr	r1, [pc, #104]	; (262dc <pend+0x9c>)
   26272:	481e      	ldr	r0, [pc, #120]	; (262ec <pend+0xac>)
   26274:	f002 fc91 	bl	28b9a <printk>
   26278:	4819      	ldr	r0, [pc, #100]	; (262e0 <pend+0xa0>)
   2627a:	2181      	movs	r1, #129	; 0x81
   2627c:	f002 fece 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   26280:	4816      	ldr	r0, [pc, #88]	; (262dc <pend+0x9c>)
   26282:	f7fd fda7 	bl	23dd4 <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
   26286:	4620      	mov	r0, r4
   26288:	4629      	mov	r1, r5
   2628a:	f7ff ff97 	bl	261bc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2628e:	4813      	ldr	r0, [pc, #76]	; (262dc <pend+0x9c>)
   26290:	f7fd fd90 	bl	23db4 <z_spin_unlock_valid>
   26294:	b968      	cbnz	r0, 262b2 <pend+0x72>
   26296:	4a12      	ldr	r2, [pc, #72]	; (262e0 <pend+0xa0>)
   26298:	4915      	ldr	r1, [pc, #84]	; (262f0 <pend+0xb0>)
   2629a:	4813      	ldr	r0, [pc, #76]	; (262e8 <pend+0xa8>)
   2629c:	23ac      	movs	r3, #172	; 0xac
   2629e:	f002 fc7c 	bl	28b9a <printk>
   262a2:	490e      	ldr	r1, [pc, #56]	; (262dc <pend+0x9c>)
   262a4:	4813      	ldr	r0, [pc, #76]	; (262f4 <pend+0xb4>)
   262a6:	f002 fc78 	bl	28b9a <printk>
   262aa:	480d      	ldr	r0, [pc, #52]	; (262e0 <pend+0xa0>)
   262ac:	21ac      	movs	r1, #172	; 0xac
   262ae:	f002 feb5 	bl	2901c <assert_post_action>
	__asm__ volatile(
   262b2:	f388 8811 	msr	BASEPRI, r8
   262b6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   262ba:	1c7b      	adds	r3, r7, #1
   262bc:	bf08      	it	eq
   262be:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   262c2:	d008      	beq.n	262d6 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   262c4:	4632      	mov	r2, r6
   262c6:	463b      	mov	r3, r7
   262c8:	f104 0018 	add.w	r0, r4, #24
   262cc:	490a      	ldr	r1, [pc, #40]	; (262f8 <pend+0xb8>)
}
   262ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   262d2:	f000 be91 	b.w	26ff8 <z_add_timeout>
   262d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   262da:	bf00      	nop
   262dc:	200029fc 	.word	0x200029fc
   262e0:	0002e9fe 	.word	0x0002e9fe
   262e4:	0002ea50 	.word	0x0002ea50
   262e8:	0002e93e 	.word	0x0002e93e
   262ec:	0002ea65 	.word	0x0002ea65
   262f0:	0002ea24 	.word	0x0002ea24
   262f4:	0002ea3b 	.word	0x0002ea3b
   262f8:	000260d1 	.word	0x000260d1

000262fc <z_pend_curr>:
{
   262fc:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
   262fe:	4b11      	ldr	r3, [pc, #68]	; (26344 <z_pend_curr+0x48>)
{
   26300:	4604      	mov	r4, r0
	pending_current = _current;
   26302:	6898      	ldr	r0, [r3, #8]
   26304:	4b10      	ldr	r3, [pc, #64]	; (26348 <z_pend_curr+0x4c>)
{
   26306:	460d      	mov	r5, r1
	pending_current = _current;
   26308:	6018      	str	r0, [r3, #0]
{
   2630a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   2630c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   26310:	f7ff ff96 	bl	26240 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26314:	4620      	mov	r0, r4
   26316:	f7fd fd4d 	bl	23db4 <z_spin_unlock_valid>
   2631a:	b968      	cbnz	r0, 26338 <z_pend_curr+0x3c>
   2631c:	4a0b      	ldr	r2, [pc, #44]	; (2634c <z_pend_curr+0x50>)
   2631e:	490c      	ldr	r1, [pc, #48]	; (26350 <z_pend_curr+0x54>)
   26320:	480c      	ldr	r0, [pc, #48]	; (26354 <z_pend_curr+0x58>)
   26322:	23c3      	movs	r3, #195	; 0xc3
   26324:	f002 fc39 	bl	28b9a <printk>
   26328:	480b      	ldr	r0, [pc, #44]	; (26358 <z_pend_curr+0x5c>)
   2632a:	4621      	mov	r1, r4
   2632c:	f002 fc35 	bl	28b9a <printk>
   26330:	4806      	ldr	r0, [pc, #24]	; (2634c <z_pend_curr+0x50>)
   26332:	21c3      	movs	r1, #195	; 0xc3
   26334:	f002 fe72 	bl	2901c <assert_post_action>
   26338:	4628      	mov	r0, r5
}
   2633a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2633e:	f7ef be7f 	b.w	16040 <arch_swap>
   26342:	bf00      	nop
   26344:	20001f98 	.word	0x20001f98
   26348:	200029f8 	.word	0x200029f8
   2634c:	0002e9fe 	.word	0x0002e9fe
   26350:	0002ea24 	.word	0x0002ea24
   26354:	0002e93e 	.word	0x0002e93e
   26358:	0002ea3b 	.word	0x0002ea3b

0002635c <z_set_prio>:
{
   2635c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2635e:	4604      	mov	r4, r0
   26360:	460e      	mov	r6, r1
	__asm__ volatile(
   26362:	f04f 0340 	mov.w	r3, #64	; 0x40
   26366:	f3ef 8711 	mrs	r7, BASEPRI
   2636a:	f383 8812 	msr	BASEPRI_MAX, r3
   2636e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26372:	483c      	ldr	r0, [pc, #240]	; (26464 <z_set_prio+0x108>)
   26374:	f7fd fd10 	bl	23d98 <z_spin_lock_valid>
   26378:	b968      	cbnz	r0, 26396 <z_set_prio+0x3a>
   2637a:	4a3b      	ldr	r2, [pc, #236]	; (26468 <z_set_prio+0x10c>)
   2637c:	493b      	ldr	r1, [pc, #236]	; (2646c <z_set_prio+0x110>)
   2637e:	483c      	ldr	r0, [pc, #240]	; (26470 <z_set_prio+0x114>)
   26380:	2381      	movs	r3, #129	; 0x81
   26382:	f002 fc0a 	bl	28b9a <printk>
   26386:	4937      	ldr	r1, [pc, #220]	; (26464 <z_set_prio+0x108>)
   26388:	483a      	ldr	r0, [pc, #232]	; (26474 <z_set_prio+0x118>)
   2638a:	f002 fc06 	bl	28b9a <printk>
   2638e:	4836      	ldr	r0, [pc, #216]	; (26468 <z_set_prio+0x10c>)
   26390:	2181      	movs	r1, #129	; 0x81
   26392:	f002 fe43 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   26396:	4833      	ldr	r0, [pc, #204]	; (26464 <z_set_prio+0x108>)
   26398:	f7fd fd1c 	bl	23dd4 <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2639c:	7b63      	ldrb	r3, [r4, #13]
   2639e:	06da      	lsls	r2, r3, #27
   263a0:	b276      	sxtb	r6, r6
   263a2:	d15c      	bne.n	2645e <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
   263a4:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
   263a6:	2d00      	cmp	r5, #0
   263a8:	d159      	bne.n	2645e <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   263aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   263ae:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   263b0:	4831      	ldr	r0, [pc, #196]	; (26478 <z_set_prio+0x11c>)
   263b2:	4621      	mov	r1, r4
   263b4:	f7ff fc08 	bl	25bc8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
   263b8:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
   263ba:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
   263bc:	f063 037f 	orn	r3, r3, #127	; 0x7f
   263c0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   263c2:	4b2e      	ldr	r3, [pc, #184]	; (2647c <z_set_prio+0x120>)
   263c4:	429c      	cmp	r4, r3
   263c6:	d109      	bne.n	263dc <z_set_prio+0x80>
   263c8:	492d      	ldr	r1, [pc, #180]	; (26480 <z_set_prio+0x124>)
   263ca:	4829      	ldr	r0, [pc, #164]	; (26470 <z_set_prio+0x114>)
   263cc:	4a2d      	ldr	r2, [pc, #180]	; (26484 <z_set_prio+0x128>)
   263ce:	23ba      	movs	r3, #186	; 0xba
   263d0:	f002 fbe3 	bl	28b9a <printk>
   263d4:	482b      	ldr	r0, [pc, #172]	; (26484 <z_set_prio+0x128>)
   263d6:	21ba      	movs	r1, #186	; 0xba
   263d8:	f002 fe20 	bl	2901c <assert_post_action>
	return list->head == list;
   263dc:	492a      	ldr	r1, [pc, #168]	; (26488 <z_set_prio+0x12c>)
   263de:	460b      	mov	r3, r1
   263e0:	f853 0f24 	ldr.w	r0, [r3, #36]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   263e4:	4298      	cmp	r0, r3
   263e6:	bf18      	it	ne
   263e8:	4605      	movne	r5, r0
   263ea:	2d00      	cmp	r5, #0
   263ec:	461a      	mov	r2, r3
   263ee:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   263f0:	6a8d      	ldr	r5, [r1, #40]	; 0x28
   263f2:	bf38      	it	cc
   263f4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   263f6:	b36b      	cbz	r3, 26454 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
   263f8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   263fc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
   26400:	4286      	cmp	r6, r0
   26402:	d023      	beq.n	2644c <z_set_prio+0xf0>
		return b2 - b1;
   26404:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
   26406:	2800      	cmp	r0, #0
   26408:	dd20      	ble.n	2644c <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
   2640a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2640c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   26410:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26412:	605c      	str	r4, [r3, #4]
			update_cache(1);
   26414:	2001      	movs	r0, #1
   26416:	f7ff fc67 	bl	25ce8 <update_cache>
   2641a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2641c:	4811      	ldr	r0, [pc, #68]	; (26464 <z_set_prio+0x108>)
   2641e:	f7fd fcc9 	bl	23db4 <z_spin_unlock_valid>
   26422:	b968      	cbnz	r0, 26440 <z_set_prio+0xe4>
   26424:	4a10      	ldr	r2, [pc, #64]	; (26468 <z_set_prio+0x10c>)
   26426:	4919      	ldr	r1, [pc, #100]	; (2648c <z_set_prio+0x130>)
   26428:	4811      	ldr	r0, [pc, #68]	; (26470 <z_set_prio+0x114>)
   2642a:	23ac      	movs	r3, #172	; 0xac
   2642c:	f002 fbb5 	bl	28b9a <printk>
   26430:	490c      	ldr	r1, [pc, #48]	; (26464 <z_set_prio+0x108>)
   26432:	4817      	ldr	r0, [pc, #92]	; (26490 <z_set_prio+0x134>)
   26434:	f002 fbb1 	bl	28b9a <printk>
   26438:	480b      	ldr	r0, [pc, #44]	; (26468 <z_set_prio+0x10c>)
   2643a:	21ac      	movs	r1, #172	; 0xac
   2643c:	f002 fdee 	bl	2901c <assert_post_action>
	__asm__ volatile(
   26440:	f387 8811 	msr	BASEPRI, r7
   26444:	f3bf 8f6f 	isb	sy
}
   26448:	4620      	mov	r0, r4
   2644a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   2644c:	42ab      	cmp	r3, r5
   2644e:	d001      	beq.n	26454 <z_set_prio+0xf8>
   26450:	681b      	ldr	r3, [r3, #0]
   26452:	e7d0      	b.n	263f6 <z_set_prio+0x9a>
	node->prev = tail;
   26454:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
   26458:	602c      	str	r4, [r5, #0]
	list->tail = node;
   2645a:	628c      	str	r4, [r1, #40]	; 0x28
}
   2645c:	e7da      	b.n	26414 <z_set_prio+0xb8>
			thread->base.prio = prio;
   2645e:	73a6      	strb	r6, [r4, #14]
   26460:	2400      	movs	r4, #0
   26462:	e7db      	b.n	2641c <z_set_prio+0xc0>
   26464:	200029fc 	.word	0x200029fc
   26468:	0002e9fe 	.word	0x0002e9fe
   2646c:	0002ea50 	.word	0x0002ea50
   26470:	0002e93e 	.word	0x0002e93e
   26474:	0002ea65 	.word	0x0002ea65
   26478:	20001fbc 	.word	0x20001fbc
   2647c:	20001fd8 	.word	0x20001fd8
   26480:	00034155 	.word	0x00034155
   26484:	00034133 	.word	0x00034133
   26488:	20001f98 	.word	0x20001f98
   2648c:	0002ea24 	.word	0x0002ea24
   26490:	0002ea3b 	.word	0x0002ea3b

00026494 <z_impl_k_thread_suspend>:
{
   26494:	b570      	push	{r4, r5, r6, lr}
   26496:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
   26498:	3018      	adds	r0, #24
   2649a:	f000 fe81 	bl	271a0 <z_abort_timeout>
	__asm__ volatile(
   2649e:	f04f 0340 	mov.w	r3, #64	; 0x40
   264a2:	f3ef 8611 	mrs	r6, BASEPRI
   264a6:	f383 8812 	msr	BASEPRI_MAX, r3
   264aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   264ae:	4825      	ldr	r0, [pc, #148]	; (26544 <z_impl_k_thread_suspend+0xb0>)
   264b0:	f7fd fc72 	bl	23d98 <z_spin_lock_valid>
   264b4:	b968      	cbnz	r0, 264d2 <z_impl_k_thread_suspend+0x3e>
   264b6:	4a24      	ldr	r2, [pc, #144]	; (26548 <z_impl_k_thread_suspend+0xb4>)
   264b8:	4924      	ldr	r1, [pc, #144]	; (2654c <z_impl_k_thread_suspend+0xb8>)
   264ba:	4825      	ldr	r0, [pc, #148]	; (26550 <z_impl_k_thread_suspend+0xbc>)
   264bc:	2381      	movs	r3, #129	; 0x81
   264be:	f002 fb6c 	bl	28b9a <printk>
   264c2:	4920      	ldr	r1, [pc, #128]	; (26544 <z_impl_k_thread_suspend+0xb0>)
   264c4:	4823      	ldr	r0, [pc, #140]	; (26554 <z_impl_k_thread_suspend+0xc0>)
   264c6:	f002 fb68 	bl	28b9a <printk>
   264ca:	481f      	ldr	r0, [pc, #124]	; (26548 <z_impl_k_thread_suspend+0xb4>)
   264cc:	2181      	movs	r1, #129	; 0x81
   264ce:	f002 fda5 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   264d2:	481c      	ldr	r0, [pc, #112]	; (26544 <z_impl_k_thread_suspend+0xb0>)
   264d4:	f7fd fc7e 	bl	23dd4 <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
   264d8:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
   264dc:	7b63      	ldrb	r3, [r4, #13]
   264de:	2a00      	cmp	r2, #0
   264e0:	da06      	bge.n	264f0 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   264e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
   264e6:	481c      	ldr	r0, [pc, #112]	; (26558 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   264e8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   264ea:	4621      	mov	r1, r4
   264ec:	f7ff fb6c 	bl	25bc8 <z_priq_dumb_remove>
		update_cache(thread == _current);
   264f0:	4d1a      	ldr	r5, [pc, #104]	; (2655c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   264f2:	7b63      	ldrb	r3, [r4, #13]
   264f4:	68a8      	ldr	r0, [r5, #8]
   264f6:	f043 0310 	orr.w	r3, r3, #16
   264fa:	7363      	strb	r3, [r4, #13]
   264fc:	1b03      	subs	r3, r0, r4
   264fe:	4258      	negs	r0, r3
   26500:	4158      	adcs	r0, r3
   26502:	f7ff fbf1 	bl	25ce8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26506:	480f      	ldr	r0, [pc, #60]	; (26544 <z_impl_k_thread_suspend+0xb0>)
   26508:	f7fd fc54 	bl	23db4 <z_spin_unlock_valid>
   2650c:	b968      	cbnz	r0, 2652a <z_impl_k_thread_suspend+0x96>
   2650e:	4a0e      	ldr	r2, [pc, #56]	; (26548 <z_impl_k_thread_suspend+0xb4>)
   26510:	4913      	ldr	r1, [pc, #76]	; (26560 <z_impl_k_thread_suspend+0xcc>)
   26512:	480f      	ldr	r0, [pc, #60]	; (26550 <z_impl_k_thread_suspend+0xbc>)
   26514:	23ac      	movs	r3, #172	; 0xac
   26516:	f002 fb40 	bl	28b9a <printk>
   2651a:	490a      	ldr	r1, [pc, #40]	; (26544 <z_impl_k_thread_suspend+0xb0>)
   2651c:	4811      	ldr	r0, [pc, #68]	; (26564 <z_impl_k_thread_suspend+0xd0>)
   2651e:	f002 fb3c 	bl	28b9a <printk>
   26522:	4809      	ldr	r0, [pc, #36]	; (26548 <z_impl_k_thread_suspend+0xb4>)
   26524:	21ac      	movs	r1, #172	; 0xac
   26526:	f002 fd79 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2652a:	f386 8811 	msr	BASEPRI, r6
   2652e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   26532:	68ab      	ldr	r3, [r5, #8]
   26534:	42a3      	cmp	r3, r4
   26536:	d103      	bne.n	26540 <z_impl_k_thread_suspend+0xac>
}
   26538:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   2653c:	f006 ba74 	b.w	2ca28 <z_reschedule_unlocked>
}
   26540:	bd70      	pop	{r4, r5, r6, pc}
   26542:	bf00      	nop
   26544:	200029fc 	.word	0x200029fc
   26548:	0002e9fe 	.word	0x0002e9fe
   2654c:	0002ea50 	.word	0x0002ea50
   26550:	0002e93e 	.word	0x0002e93e
   26554:	0002ea65 	.word	0x0002ea65
   26558:	20001fbc 	.word	0x20001fbc
   2655c:	20001f98 	.word	0x20001f98
   26560:	0002ea24 	.word	0x0002ea24
   26564:	0002ea3b 	.word	0x0002ea3b

00026568 <k_sched_unlock>:
{
   26568:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2656a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2656e:	f3ef 8511 	mrs	r5, BASEPRI
   26572:	f383 8812 	msr	BASEPRI_MAX, r3
   26576:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2657a:	482d      	ldr	r0, [pc, #180]	; (26630 <k_sched_unlock+0xc8>)
   2657c:	f7fd fc0c 	bl	23d98 <z_spin_lock_valid>
   26580:	b968      	cbnz	r0, 2659e <k_sched_unlock+0x36>
   26582:	4a2c      	ldr	r2, [pc, #176]	; (26634 <k_sched_unlock+0xcc>)
   26584:	492c      	ldr	r1, [pc, #176]	; (26638 <k_sched_unlock+0xd0>)
   26586:	482d      	ldr	r0, [pc, #180]	; (2663c <k_sched_unlock+0xd4>)
   26588:	2381      	movs	r3, #129	; 0x81
   2658a:	f002 fb06 	bl	28b9a <printk>
   2658e:	4928      	ldr	r1, [pc, #160]	; (26630 <k_sched_unlock+0xc8>)
   26590:	482b      	ldr	r0, [pc, #172]	; (26640 <k_sched_unlock+0xd8>)
   26592:	f002 fb02 	bl	28b9a <printk>
   26596:	4827      	ldr	r0, [pc, #156]	; (26634 <k_sched_unlock+0xcc>)
   26598:	2181      	movs	r1, #129	; 0x81
   2659a:	f002 fd3f 	bl	2901c <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
   2659e:	4c29      	ldr	r4, [pc, #164]	; (26644 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
   265a0:	4823      	ldr	r0, [pc, #140]	; (26630 <k_sched_unlock+0xc8>)
   265a2:	f7fd fc17 	bl	23dd4 <z_spin_lock_set_owner>
   265a6:	68a2      	ldr	r2, [r4, #8]
   265a8:	7bd2      	ldrb	r2, [r2, #15]
   265aa:	b972      	cbnz	r2, 265ca <k_sched_unlock+0x62>
   265ac:	4926      	ldr	r1, [pc, #152]	; (26648 <k_sched_unlock+0xe0>)
   265ae:	4a27      	ldr	r2, [pc, #156]	; (2664c <k_sched_unlock+0xe4>)
   265b0:	4822      	ldr	r0, [pc, #136]	; (2663c <k_sched_unlock+0xd4>)
   265b2:	f240 3385 	movw	r3, #901	; 0x385
   265b6:	f002 faf0 	bl	28b9a <printk>
   265ba:	4825      	ldr	r0, [pc, #148]	; (26650 <k_sched_unlock+0xe8>)
   265bc:	f002 faed 	bl	28b9a <printk>
   265c0:	4822      	ldr	r0, [pc, #136]	; (2664c <k_sched_unlock+0xe4>)
   265c2:	f240 3185 	movw	r1, #901	; 0x385
   265c6:	f002 fd29 	bl	2901c <assert_post_action>
   265ca:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
   265ce:	b173      	cbz	r3, 265ee <k_sched_unlock+0x86>
   265d0:	4920      	ldr	r1, [pc, #128]	; (26654 <k_sched_unlock+0xec>)
   265d2:	4a1e      	ldr	r2, [pc, #120]	; (2664c <k_sched_unlock+0xe4>)
   265d4:	4819      	ldr	r0, [pc, #100]	; (2663c <k_sched_unlock+0xd4>)
   265d6:	f240 3386 	movw	r3, #902	; 0x386
   265da:	f002 fade 	bl	28b9a <printk>
   265de:	481c      	ldr	r0, [pc, #112]	; (26650 <k_sched_unlock+0xe8>)
   265e0:	f002 fadb 	bl	28b9a <printk>
   265e4:	4819      	ldr	r0, [pc, #100]	; (2664c <k_sched_unlock+0xe4>)
   265e6:	f240 3186 	movw	r1, #902	; 0x386
   265ea:	f002 fd17 	bl	2901c <assert_post_action>
		++_current->base.sched_locked;
   265ee:	68a2      	ldr	r2, [r4, #8]
   265f0:	7bd3      	ldrb	r3, [r2, #15]
   265f2:	3301      	adds	r3, #1
		update_cache(0);
   265f4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
   265f6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   265f8:	f7ff fb76 	bl	25ce8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   265fc:	480c      	ldr	r0, [pc, #48]	; (26630 <k_sched_unlock+0xc8>)
   265fe:	f7fd fbd9 	bl	23db4 <z_spin_unlock_valid>
   26602:	b968      	cbnz	r0, 26620 <k_sched_unlock+0xb8>
   26604:	4a0b      	ldr	r2, [pc, #44]	; (26634 <k_sched_unlock+0xcc>)
   26606:	4914      	ldr	r1, [pc, #80]	; (26658 <k_sched_unlock+0xf0>)
   26608:	480c      	ldr	r0, [pc, #48]	; (2663c <k_sched_unlock+0xd4>)
   2660a:	23ac      	movs	r3, #172	; 0xac
   2660c:	f002 fac5 	bl	28b9a <printk>
   26610:	4907      	ldr	r1, [pc, #28]	; (26630 <k_sched_unlock+0xc8>)
   26612:	4812      	ldr	r0, [pc, #72]	; (2665c <k_sched_unlock+0xf4>)
   26614:	f002 fac1 	bl	28b9a <printk>
   26618:	4806      	ldr	r0, [pc, #24]	; (26634 <k_sched_unlock+0xcc>)
   2661a:	21ac      	movs	r1, #172	; 0xac
   2661c:	f002 fcfe 	bl	2901c <assert_post_action>
	__asm__ volatile(
   26620:	f385 8811 	msr	BASEPRI, r5
   26624:	f3bf 8f6f 	isb	sy
}
   26628:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
   2662c:	f006 b9fc 	b.w	2ca28 <z_reschedule_unlocked>
   26630:	200029fc 	.word	0x200029fc
   26634:	0002e9fe 	.word	0x0002e9fe
   26638:	0002ea50 	.word	0x0002ea50
   2663c:	0002e93e 	.word	0x0002e93e
   26640:	0002ea65 	.word	0x0002ea65
   26644:	20001f98 	.word	0x20001f98
   26648:	000341b4 	.word	0x000341b4
   2664c:	00034133 	.word	0x00034133
   26650:	00033299 	.word	0x00033299
   26654:	00033e49 	.word	0x00033e49
   26658:	0002ea24 	.word	0x0002ea24
   2665c:	0002ea3b 	.word	0x0002ea3b

00026660 <z_unpend1_no_timeout>:
{
   26660:	b538      	push	{r3, r4, r5, lr}
   26662:	4604      	mov	r4, r0
	__asm__ volatile(
   26664:	f04f 0340 	mov.w	r3, #64	; 0x40
   26668:	f3ef 8511 	mrs	r5, BASEPRI
   2666c:	f383 8812 	msr	BASEPRI_MAX, r3
   26670:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26674:	4819      	ldr	r0, [pc, #100]	; (266dc <z_unpend1_no_timeout+0x7c>)
   26676:	f7fd fb8f 	bl	23d98 <z_spin_lock_valid>
   2667a:	b968      	cbnz	r0, 26698 <z_unpend1_no_timeout+0x38>
   2667c:	4a18      	ldr	r2, [pc, #96]	; (266e0 <z_unpend1_no_timeout+0x80>)
   2667e:	4919      	ldr	r1, [pc, #100]	; (266e4 <z_unpend1_no_timeout+0x84>)
   26680:	4819      	ldr	r0, [pc, #100]	; (266e8 <z_unpend1_no_timeout+0x88>)
   26682:	2381      	movs	r3, #129	; 0x81
   26684:	f002 fa89 	bl	28b9a <printk>
   26688:	4914      	ldr	r1, [pc, #80]	; (266dc <z_unpend1_no_timeout+0x7c>)
   2668a:	4818      	ldr	r0, [pc, #96]	; (266ec <z_unpend1_no_timeout+0x8c>)
   2668c:	f002 fa85 	bl	28b9a <printk>
   26690:	4813      	ldr	r0, [pc, #76]	; (266e0 <z_unpend1_no_timeout+0x80>)
   26692:	2181      	movs	r1, #129	; 0x81
   26694:	f002 fcc2 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   26698:	4810      	ldr	r0, [pc, #64]	; (266dc <z_unpend1_no_timeout+0x7c>)
   2669a:	f7fd fb9b 	bl	23dd4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   2669e:	4620      	mov	r0, r4
   266a0:	f006 f9cc 	bl	2ca3c <z_priq_dumb_best>
		if (thread != NULL) {
   266a4:	4604      	mov	r4, r0
   266a6:	b108      	cbz	r0, 266ac <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
   266a8:	f7ff fab0 	bl	25c0c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   266ac:	480b      	ldr	r0, [pc, #44]	; (266dc <z_unpend1_no_timeout+0x7c>)
   266ae:	f7fd fb81 	bl	23db4 <z_spin_unlock_valid>
   266b2:	b968      	cbnz	r0, 266d0 <z_unpend1_no_timeout+0x70>
   266b4:	4a0a      	ldr	r2, [pc, #40]	; (266e0 <z_unpend1_no_timeout+0x80>)
   266b6:	490e      	ldr	r1, [pc, #56]	; (266f0 <z_unpend1_no_timeout+0x90>)
   266b8:	480b      	ldr	r0, [pc, #44]	; (266e8 <z_unpend1_no_timeout+0x88>)
   266ba:	23ac      	movs	r3, #172	; 0xac
   266bc:	f002 fa6d 	bl	28b9a <printk>
   266c0:	4906      	ldr	r1, [pc, #24]	; (266dc <z_unpend1_no_timeout+0x7c>)
   266c2:	480c      	ldr	r0, [pc, #48]	; (266f4 <z_unpend1_no_timeout+0x94>)
   266c4:	f002 fa69 	bl	28b9a <printk>
   266c8:	4805      	ldr	r0, [pc, #20]	; (266e0 <z_unpend1_no_timeout+0x80>)
   266ca:	21ac      	movs	r1, #172	; 0xac
   266cc:	f002 fca6 	bl	2901c <assert_post_action>
	__asm__ volatile(
   266d0:	f385 8811 	msr	BASEPRI, r5
   266d4:	f3bf 8f6f 	isb	sy
}
   266d8:	4620      	mov	r0, r4
   266da:	bd38      	pop	{r3, r4, r5, pc}
   266dc:	200029fc 	.word	0x200029fc
   266e0:	0002e9fe 	.word	0x0002e9fe
   266e4:	0002ea50 	.word	0x0002ea50
   266e8:	0002e93e 	.word	0x0002e93e
   266ec:	0002ea65 	.word	0x0002ea65
   266f0:	0002ea24 	.word	0x0002ea24
   266f4:	0002ea3b 	.word	0x0002ea3b

000266f8 <z_unpend_first_thread>:
{
   266f8:	b538      	push	{r3, r4, r5, lr}
   266fa:	4604      	mov	r4, r0
	__asm__ volatile(
   266fc:	f04f 0340 	mov.w	r3, #64	; 0x40
   26700:	f3ef 8511 	mrs	r5, BASEPRI
   26704:	f383 8812 	msr	BASEPRI_MAX, r3
   26708:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2670c:	481b      	ldr	r0, [pc, #108]	; (2677c <z_unpend_first_thread+0x84>)
   2670e:	f7fd fb43 	bl	23d98 <z_spin_lock_valid>
   26712:	b968      	cbnz	r0, 26730 <z_unpend_first_thread+0x38>
   26714:	4a1a      	ldr	r2, [pc, #104]	; (26780 <z_unpend_first_thread+0x88>)
   26716:	491b      	ldr	r1, [pc, #108]	; (26784 <z_unpend_first_thread+0x8c>)
   26718:	481b      	ldr	r0, [pc, #108]	; (26788 <z_unpend_first_thread+0x90>)
   2671a:	2381      	movs	r3, #129	; 0x81
   2671c:	f002 fa3d 	bl	28b9a <printk>
   26720:	4916      	ldr	r1, [pc, #88]	; (2677c <z_unpend_first_thread+0x84>)
   26722:	481a      	ldr	r0, [pc, #104]	; (2678c <z_unpend_first_thread+0x94>)
   26724:	f002 fa39 	bl	28b9a <printk>
   26728:	4815      	ldr	r0, [pc, #84]	; (26780 <z_unpend_first_thread+0x88>)
   2672a:	2181      	movs	r1, #129	; 0x81
   2672c:	f002 fc76 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   26730:	4812      	ldr	r0, [pc, #72]	; (2677c <z_unpend_first_thread+0x84>)
   26732:	f7fd fb4f 	bl	23dd4 <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
   26736:	4620      	mov	r0, r4
   26738:	f006 f980 	bl	2ca3c <z_priq_dumb_best>
		if (thread != NULL) {
   2673c:	4604      	mov	r4, r0
   2673e:	b128      	cbz	r0, 2674c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
   26740:	f7ff fa64 	bl	25c0c <unpend_thread_no_timeout>
   26744:	f104 0018 	add.w	r0, r4, #24
   26748:	f000 fd2a 	bl	271a0 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2674c:	480b      	ldr	r0, [pc, #44]	; (2677c <z_unpend_first_thread+0x84>)
   2674e:	f7fd fb31 	bl	23db4 <z_spin_unlock_valid>
   26752:	b968      	cbnz	r0, 26770 <z_unpend_first_thread+0x78>
   26754:	4a0a      	ldr	r2, [pc, #40]	; (26780 <z_unpend_first_thread+0x88>)
   26756:	490e      	ldr	r1, [pc, #56]	; (26790 <z_unpend_first_thread+0x98>)
   26758:	480b      	ldr	r0, [pc, #44]	; (26788 <z_unpend_first_thread+0x90>)
   2675a:	23ac      	movs	r3, #172	; 0xac
   2675c:	f002 fa1d 	bl	28b9a <printk>
   26760:	4906      	ldr	r1, [pc, #24]	; (2677c <z_unpend_first_thread+0x84>)
   26762:	480c      	ldr	r0, [pc, #48]	; (26794 <z_unpend_first_thread+0x9c>)
   26764:	f002 fa19 	bl	28b9a <printk>
   26768:	4805      	ldr	r0, [pc, #20]	; (26780 <z_unpend_first_thread+0x88>)
   2676a:	21ac      	movs	r1, #172	; 0xac
   2676c:	f002 fc56 	bl	2901c <assert_post_action>
	__asm__ volatile(
   26770:	f385 8811 	msr	BASEPRI, r5
   26774:	f3bf 8f6f 	isb	sy
}
   26778:	4620      	mov	r0, r4
   2677a:	bd38      	pop	{r3, r4, r5, pc}
   2677c:	200029fc 	.word	0x200029fc
   26780:	0002e9fe 	.word	0x0002e9fe
   26784:	0002ea50 	.word	0x0002ea50
   26788:	0002e93e 	.word	0x0002e93e
   2678c:	0002ea65 	.word	0x0002ea65
   26790:	0002ea24 	.word	0x0002ea24
   26794:	0002ea3b 	.word	0x0002ea3b

00026798 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   26798:	4b04      	ldr	r3, [pc, #16]	; (267ac <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2679a:	2100      	movs	r1, #0
   2679c:	f103 0224 	add.w	r2, r3, #36	; 0x24
	list->tail = (sys_dnode_t *)list;
   267a0:	e9c3 2209 	strd	r2, r2, [r3, #36]	; 0x24
   267a4:	4608      	mov	r0, r1
   267a6:	f7ff b8a9 	b.w	258fc <k_sched_time_slice_set>
   267aa:	bf00      	nop
   267ac:	20001f98 	.word	0x20001f98

000267b0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   267b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   267b2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   267b6:	b173      	cbz	r3, 267d6 <z_impl_k_yield+0x26>
   267b8:	4941      	ldr	r1, [pc, #260]	; (268c0 <z_impl_k_yield+0x110>)
   267ba:	4a42      	ldr	r2, [pc, #264]	; (268c4 <z_impl_k_yield+0x114>)
   267bc:	4842      	ldr	r0, [pc, #264]	; (268c8 <z_impl_k_yield+0x118>)
   267be:	f240 43dc 	movw	r3, #1244	; 0x4dc
   267c2:	f002 f9ea 	bl	28b9a <printk>
   267c6:	4841      	ldr	r0, [pc, #260]	; (268cc <z_impl_k_yield+0x11c>)
   267c8:	f002 f9e7 	bl	28b9a <printk>
   267cc:	483d      	ldr	r0, [pc, #244]	; (268c4 <z_impl_k_yield+0x114>)
   267ce:	f240 41dc 	movw	r1, #1244	; 0x4dc
   267d2:	f002 fc23 	bl	2901c <assert_post_action>
	__asm__ volatile(
   267d6:	f04f 0340 	mov.w	r3, #64	; 0x40
   267da:	f3ef 8611 	mrs	r6, BASEPRI
   267de:	f383 8812 	msr	BASEPRI_MAX, r3
   267e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   267e6:	483a      	ldr	r0, [pc, #232]	; (268d0 <z_impl_k_yield+0x120>)
   267e8:	f7fd fad6 	bl	23d98 <z_spin_lock_valid>
   267ec:	b968      	cbnz	r0, 2680a <z_impl_k_yield+0x5a>
   267ee:	4a39      	ldr	r2, [pc, #228]	; (268d4 <z_impl_k_yield+0x124>)
   267f0:	4939      	ldr	r1, [pc, #228]	; (268d8 <z_impl_k_yield+0x128>)
   267f2:	4835      	ldr	r0, [pc, #212]	; (268c8 <z_impl_k_yield+0x118>)
   267f4:	2381      	movs	r3, #129	; 0x81
   267f6:	f002 f9d0 	bl	28b9a <printk>
   267fa:	4935      	ldr	r1, [pc, #212]	; (268d0 <z_impl_k_yield+0x120>)
   267fc:	4837      	ldr	r0, [pc, #220]	; (268dc <z_impl_k_yield+0x12c>)
   267fe:	f002 f9cc 	bl	28b9a <printk>
   26802:	4834      	ldr	r0, [pc, #208]	; (268d4 <z_impl_k_yield+0x124>)
   26804:	2181      	movs	r1, #129	; 0x81
   26806:	f002 fc09 	bl	2901c <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
   2680a:	4d35      	ldr	r5, [pc, #212]	; (268e0 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
   2680c:	4830      	ldr	r0, [pc, #192]	; (268d0 <z_impl_k_yield+0x120>)
   2680e:	f7fd fae1 	bl	23dd4 <z_spin_lock_set_owner>
   26812:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26814:	7b4b      	ldrb	r3, [r1, #13]
   26816:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2681a:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
   2681c:	f105 0024 	add.w	r0, r5, #36	; 0x24
   26820:	f7ff f9d2 	bl	25bc8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
   26824:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
   26826:	7b63      	ldrb	r3, [r4, #13]
   26828:	f063 037f 	orn	r3, r3, #127	; 0x7f
   2682c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
   2682e:	4b2d      	ldr	r3, [pc, #180]	; (268e4 <z_impl_k_yield+0x134>)
   26830:	429c      	cmp	r4, r3
   26832:	d109      	bne.n	26848 <z_impl_k_yield+0x98>
   26834:	492c      	ldr	r1, [pc, #176]	; (268e8 <z_impl_k_yield+0x138>)
   26836:	4824      	ldr	r0, [pc, #144]	; (268c8 <z_impl_k_yield+0x118>)
   26838:	4a22      	ldr	r2, [pc, #136]	; (268c4 <z_impl_k_yield+0x114>)
   2683a:	23ba      	movs	r3, #186	; 0xba
   2683c:	f002 f9ad 	bl	28b9a <printk>
   26840:	4820      	ldr	r0, [pc, #128]	; (268c4 <z_impl_k_yield+0x114>)
   26842:	21ba      	movs	r1, #186	; 0xba
   26844:	f002 fbea 	bl	2901c <assert_post_action>
	return list->head == list;
   26848:	6a6b      	ldr	r3, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2684a:	4828      	ldr	r0, [pc, #160]	; (268ec <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2684c:	6aa9      	ldr	r1, [r5, #40]	; 0x28
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2684e:	4283      	cmp	r3, r0
   26850:	bf08      	it	eq
   26852:	2300      	moveq	r3, #0
   26854:	2b00      	cmp	r3, #0
   26856:	bf38      	it	cc
   26858:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2685a:	b35b      	cbz	r3, 268b4 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
   2685c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
   26860:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
   26864:	4297      	cmp	r7, r2
   26866:	d021      	beq.n	268ac <z_impl_k_yield+0xfc>
		return b2 - b1;
   26868:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
   2686a:	2a00      	cmp	r2, #0
   2686c:	dd1e      	ble.n	268ac <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
   2686e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26870:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
   26874:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26876:	605c      	str	r4, [r3, #4]
	update_cache(1);
   26878:	2001      	movs	r0, #1
   2687a:	f7ff fa35 	bl	25ce8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2687e:	4814      	ldr	r0, [pc, #80]	; (268d0 <z_impl_k_yield+0x120>)
   26880:	f7fd fa98 	bl	23db4 <z_spin_unlock_valid>
   26884:	b968      	cbnz	r0, 268a2 <z_impl_k_yield+0xf2>
   26886:	4a13      	ldr	r2, [pc, #76]	; (268d4 <z_impl_k_yield+0x124>)
   26888:	4919      	ldr	r1, [pc, #100]	; (268f0 <z_impl_k_yield+0x140>)
   2688a:	480f      	ldr	r0, [pc, #60]	; (268c8 <z_impl_k_yield+0x118>)
   2688c:	23c3      	movs	r3, #195	; 0xc3
   2688e:	f002 f984 	bl	28b9a <printk>
   26892:	490f      	ldr	r1, [pc, #60]	; (268d0 <z_impl_k_yield+0x120>)
   26894:	4817      	ldr	r0, [pc, #92]	; (268f4 <z_impl_k_yield+0x144>)
   26896:	f002 f980 	bl	28b9a <printk>
   2689a:	480e      	ldr	r0, [pc, #56]	; (268d4 <z_impl_k_yield+0x124>)
   2689c:	21c3      	movs	r1, #195	; 0xc3
   2689e:	f002 fbbd 	bl	2901c <assert_post_action>
   268a2:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
   268a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   268a8:	f7ef bbca 	b.w	16040 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   268ac:	428b      	cmp	r3, r1
   268ae:	d001      	beq.n	268b4 <z_impl_k_yield+0x104>
   268b0:	681b      	ldr	r3, [r3, #0]
   268b2:	e7d2      	b.n	2685a <z_impl_k_yield+0xaa>
	node->prev = tail;
   268b4:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
   268b8:	600c      	str	r4, [r1, #0]
	list->tail = node;
   268ba:	62ac      	str	r4, [r5, #40]	; 0x28
}
   268bc:	e7dc      	b.n	26878 <z_impl_k_yield+0xc8>
   268be:	bf00      	nop
   268c0:	00033e49 	.word	0x00033e49
   268c4:	00034133 	.word	0x00034133
   268c8:	0002e93e 	.word	0x0002e93e
   268cc:	00033299 	.word	0x00033299
   268d0:	200029fc 	.word	0x200029fc
   268d4:	0002e9fe 	.word	0x0002e9fe
   268d8:	0002ea50 	.word	0x0002ea50
   268dc:	0002ea65 	.word	0x0002ea65
   268e0:	20001f98 	.word	0x20001f98
   268e4:	20001fd8 	.word	0x20001fd8
   268e8:	00034155 	.word	0x00034155
   268ec:	20001fbc 	.word	0x20001fbc
   268f0:	0002ea24 	.word	0x0002ea24
   268f4:	0002ea3b 	.word	0x0002ea3b

000268f8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
   268f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   268fc:	4604      	mov	r4, r0
   268fe:	460d      	mov	r5, r1
   26900:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
   26904:	b173      	cbz	r3, 26924 <z_tick_sleep+0x2c>
   26906:	4945      	ldr	r1, [pc, #276]	; (26a1c <z_tick_sleep+0x124>)
   26908:	4a45      	ldr	r2, [pc, #276]	; (26a20 <z_tick_sleep+0x128>)
   2690a:	4846      	ldr	r0, [pc, #280]	; (26a24 <z_tick_sleep+0x12c>)
   2690c:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
   26910:	f002 f943 	bl	28b9a <printk>
   26914:	4844      	ldr	r0, [pc, #272]	; (26a28 <z_tick_sleep+0x130>)
   26916:	f002 f940 	bl	28b9a <printk>
   2691a:	4841      	ldr	r0, [pc, #260]	; (26a20 <z_tick_sleep+0x128>)
   2691c:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
   26920:	f002 fb7c 	bl	2901c <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   26924:	ea54 0305 	orrs.w	r3, r4, r5
   26928:	d104      	bne.n	26934 <z_tick_sleep+0x3c>
	z_impl_k_yield();
   2692a:	f7ff ff41 	bl	267b0 <z_impl_k_yield>
		k_yield();
		return 0;
   2692e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   26930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
   26934:	f06f 0301 	mvn.w	r3, #1
   26938:	1b1e      	subs	r6, r3, r4
   2693a:	f04f 33ff 	mov.w	r3, #4294967295
   2693e:	eb63 0705 	sbc.w	r7, r3, r5
   26942:	2e01      	cmp	r6, #1
   26944:	f177 0300 	sbcs.w	r3, r7, #0
   26948:	da64      	bge.n	26a14 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
   2694a:	f006 f891 	bl	2ca70 <sys_clock_tick_get_32>
   2694e:	1906      	adds	r6, r0, r4
   26950:	f04f 0340 	mov.w	r3, #64	; 0x40
   26954:	f3ef 8811 	mrs	r8, BASEPRI
   26958:	f383 8812 	msr	BASEPRI_MAX, r3
   2695c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26960:	4832      	ldr	r0, [pc, #200]	; (26a2c <z_tick_sleep+0x134>)
   26962:	f7fd fa19 	bl	23d98 <z_spin_lock_valid>
   26966:	b968      	cbnz	r0, 26984 <z_tick_sleep+0x8c>
   26968:	4a31      	ldr	r2, [pc, #196]	; (26a30 <z_tick_sleep+0x138>)
   2696a:	4932      	ldr	r1, [pc, #200]	; (26a34 <z_tick_sleep+0x13c>)
   2696c:	482d      	ldr	r0, [pc, #180]	; (26a24 <z_tick_sleep+0x12c>)
   2696e:	2381      	movs	r3, #129	; 0x81
   26970:	f002 f913 	bl	28b9a <printk>
   26974:	492d      	ldr	r1, [pc, #180]	; (26a2c <z_tick_sleep+0x134>)
   26976:	4830      	ldr	r0, [pc, #192]	; (26a38 <z_tick_sleep+0x140>)
   26978:	f002 f90f 	bl	28b9a <printk>
   2697c:	482c      	ldr	r0, [pc, #176]	; (26a30 <z_tick_sleep+0x138>)
   2697e:	2181      	movs	r1, #129	; 0x81
   26980:	f002 fb4c 	bl	2901c <assert_post_action>
	pending_current = _current;
   26984:	4f2d      	ldr	r7, [pc, #180]	; (26a3c <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
   26986:	4829      	ldr	r0, [pc, #164]	; (26a2c <z_tick_sleep+0x134>)
   26988:	f7fd fa24 	bl	23dd4 <z_spin_lock_set_owner>
   2698c:	4b2c      	ldr	r3, [pc, #176]	; (26a40 <z_tick_sleep+0x148>)
   2698e:	68b8      	ldr	r0, [r7, #8]
   26990:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   26992:	f7ff fbf7 	bl	26184 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   26996:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
   26998:	492a      	ldr	r1, [pc, #168]	; (26a44 <z_tick_sleep+0x14c>)
   2699a:	4622      	mov	r2, r4
   2699c:	462b      	mov	r3, r5
   2699e:	3018      	adds	r0, #24
   269a0:	f000 fb2a 	bl	26ff8 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   269a4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   269a6:	4821      	ldr	r0, [pc, #132]	; (26a2c <z_tick_sleep+0x134>)
   269a8:	7b53      	ldrb	r3, [r2, #13]
   269aa:	f043 0310 	orr.w	r3, r3, #16
   269ae:	7353      	strb	r3, [r2, #13]
   269b0:	f7fd fa00 	bl	23db4 <z_spin_unlock_valid>
   269b4:	b968      	cbnz	r0, 269d2 <z_tick_sleep+0xda>
   269b6:	4a1e      	ldr	r2, [pc, #120]	; (26a30 <z_tick_sleep+0x138>)
   269b8:	4923      	ldr	r1, [pc, #140]	; (26a48 <z_tick_sleep+0x150>)
   269ba:	481a      	ldr	r0, [pc, #104]	; (26a24 <z_tick_sleep+0x12c>)
   269bc:	23c3      	movs	r3, #195	; 0xc3
   269be:	f002 f8ec 	bl	28b9a <printk>
   269c2:	491a      	ldr	r1, [pc, #104]	; (26a2c <z_tick_sleep+0x134>)
   269c4:	4821      	ldr	r0, [pc, #132]	; (26a4c <z_tick_sleep+0x154>)
   269c6:	f002 f8e8 	bl	28b9a <printk>
   269ca:	4819      	ldr	r0, [pc, #100]	; (26a30 <z_tick_sleep+0x138>)
   269cc:	21c3      	movs	r1, #195	; 0xc3
   269ce:	f002 fb25 	bl	2901c <assert_post_action>
   269d2:	4640      	mov	r0, r8
   269d4:	f7ef fb34 	bl	16040 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
   269d8:	68bb      	ldr	r3, [r7, #8]
   269da:	7b5b      	ldrb	r3, [r3, #13]
   269dc:	06db      	lsls	r3, r3, #27
   269de:	d50e      	bpl.n	269fe <z_tick_sleep+0x106>
   269e0:	491b      	ldr	r1, [pc, #108]	; (26a50 <z_tick_sleep+0x158>)
   269e2:	4a0f      	ldr	r2, [pc, #60]	; (26a20 <z_tick_sleep+0x128>)
   269e4:	480f      	ldr	r0, [pc, #60]	; (26a24 <z_tick_sleep+0x12c>)
   269e6:	f240 5319 	movw	r3, #1305	; 0x519
   269ea:	f002 f8d6 	bl	28b9a <printk>
   269ee:	480e      	ldr	r0, [pc, #56]	; (26a28 <z_tick_sleep+0x130>)
   269f0:	f002 f8d3 	bl	28b9a <printk>
   269f4:	480a      	ldr	r0, [pc, #40]	; (26a20 <z_tick_sleep+0x128>)
   269f6:	f240 5119 	movw	r1, #1305	; 0x519
   269fa:	f002 fb0f 	bl	2901c <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
   269fe:	f006 f837 	bl	2ca70 <sys_clock_tick_get_32>
   26a02:	1a30      	subs	r0, r6, r0
   26a04:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
   26a08:	2801      	cmp	r0, #1
   26a0a:	f171 0300 	sbcs.w	r3, r1, #0
   26a0e:	bfb8      	it	lt
   26a10:	2000      	movlt	r0, #0
   26a12:	e78d      	b.n	26930 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
   26a14:	f06f 0601 	mvn.w	r6, #1
   26a18:	1b36      	subs	r6, r6, r4
   26a1a:	e799      	b.n	26950 <z_tick_sleep+0x58>
   26a1c:	00033e49 	.word	0x00033e49
   26a20:	00034133 	.word	0x00034133
   26a24:	0002e93e 	.word	0x0002e93e
   26a28:	00033299 	.word	0x00033299
   26a2c:	200029fc 	.word	0x200029fc
   26a30:	0002e9fe 	.word	0x0002e9fe
   26a34:	0002ea50 	.word	0x0002ea50
   26a38:	0002ea65 	.word	0x0002ea65
   26a3c:	20001f98 	.word	0x20001f98
   26a40:	200029f8 	.word	0x200029f8
   26a44:	000260d1 	.word	0x000260d1
   26a48:	0002ea24 	.word	0x0002ea24
   26a4c:	0002ea3b 	.word	0x0002ea3b
   26a50:	000341e5 	.word	0x000341e5

00026a54 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   26a54:	b538      	push	{r3, r4, r5, lr}
   26a56:	4604      	mov	r4, r0
   26a58:	460d      	mov	r5, r1
   26a5a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
   26a5e:	b173      	cbz	r3, 26a7e <z_impl_k_sleep+0x2a>
   26a60:	4913      	ldr	r1, [pc, #76]	; (26ab0 <z_impl_k_sleep+0x5c>)
   26a62:	4a14      	ldr	r2, [pc, #80]	; (26ab4 <z_impl_k_sleep+0x60>)
   26a64:	4814      	ldr	r0, [pc, #80]	; (26ab8 <z_impl_k_sleep+0x64>)
   26a66:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   26a6a:	f002 f896 	bl	28b9a <printk>
   26a6e:	4813      	ldr	r0, [pc, #76]	; (26abc <z_impl_k_sleep+0x68>)
   26a70:	f002 f893 	bl	28b9a <printk>
   26a74:	480f      	ldr	r0, [pc, #60]	; (26ab4 <z_impl_k_sleep+0x60>)
   26a76:	f44f 61a5 	mov.w	r1, #1320	; 0x528
   26a7a:	f002 facf 	bl	2901c <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26a7e:	1c6b      	adds	r3, r5, #1
   26a80:	bf08      	it	eq
   26a82:	f1b4 3fff 	cmpeq.w	r4, #4294967295
   26a86:	d106      	bne.n	26a96 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
   26a88:	4b0d      	ldr	r3, [pc, #52]	; (26ac0 <z_impl_k_sleep+0x6c>)
   26a8a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   26a8c:	f7ff fd02 	bl	26494 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
   26a90:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
   26a94:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
   26a96:	4620      	mov	r0, r4
   26a98:	4629      	mov	r1, r5
   26a9a:	f7ff ff2d 	bl	268f8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   26a9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   26aa2:	fb80 3403 	smull	r3, r4, r0, r3
   26aa6:	0bd8      	lsrs	r0, r3, #15
   26aa8:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
   26aac:	e7f2      	b.n	26a94 <z_impl_k_sleep+0x40>
   26aae:	bf00      	nop
   26ab0:	00033e49 	.word	0x00033e49
   26ab4:	00034133 	.word	0x00034133
   26ab8:	0002e93e 	.word	0x0002e93e
   26abc:	00033299 	.word	0x00033299
   26ac0:	20001f98 	.word	0x20001f98

00026ac4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   26ac4:	4b01      	ldr	r3, [pc, #4]	; (26acc <z_impl_z_current_get+0x8>)
   26ac6:	6898      	ldr	r0, [r3, #8]
   26ac8:	4770      	bx	lr
   26aca:	bf00      	nop
   26acc:	20001f98 	.word	0x20001f98

00026ad0 <z_impl_k_is_preempt_thread>:
   26ad0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
   26ad4:	b93b      	cbnz	r3, 26ae6 <z_impl_k_is_preempt_thread+0x16>
   26ad6:	4b05      	ldr	r3, [pc, #20]	; (26aec <z_impl_k_is_preempt_thread+0x1c>)
   26ad8:	689b      	ldr	r3, [r3, #8]
   26ada:	89d8      	ldrh	r0, [r3, #14]
   26adc:	287f      	cmp	r0, #127	; 0x7f
   26ade:	bf8c      	ite	hi
   26ae0:	2000      	movhi	r0, #0
   26ae2:	2001      	movls	r0, #1
   26ae4:	4770      	bx	lr
   26ae6:	2000      	movs	r0, #0
}
   26ae8:	4770      	bx	lr
   26aea:	bf00      	nop
   26aec:	20001f98 	.word	0x20001f98

00026af0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
   26af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26af4:	4604      	mov	r4, r0
   26af6:	f04f 0340 	mov.w	r3, #64	; 0x40
   26afa:	f3ef 8611 	mrs	r6, BASEPRI
   26afe:	f383 8812 	msr	BASEPRI_MAX, r3
   26b02:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26b06:	4849      	ldr	r0, [pc, #292]	; (26c2c <z_thread_abort+0x13c>)
   26b08:	f7fd f946 	bl	23d98 <z_spin_lock_valid>
   26b0c:	b968      	cbnz	r0, 26b2a <z_thread_abort+0x3a>
   26b0e:	4a48      	ldr	r2, [pc, #288]	; (26c30 <z_thread_abort+0x140>)
   26b10:	4948      	ldr	r1, [pc, #288]	; (26c34 <z_thread_abort+0x144>)
   26b12:	4849      	ldr	r0, [pc, #292]	; (26c38 <z_thread_abort+0x148>)
   26b14:	2381      	movs	r3, #129	; 0x81
   26b16:	f002 f840 	bl	28b9a <printk>
   26b1a:	4944      	ldr	r1, [pc, #272]	; (26c2c <z_thread_abort+0x13c>)
   26b1c:	4847      	ldr	r0, [pc, #284]	; (26c3c <z_thread_abort+0x14c>)
   26b1e:	f002 f83c 	bl	28b9a <printk>
   26b22:	4843      	ldr	r0, [pc, #268]	; (26c30 <z_thread_abort+0x140>)
   26b24:	2181      	movs	r1, #129	; 0x81
   26b26:	f002 fa79 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   26b2a:	4840      	ldr	r0, [pc, #256]	; (26c2c <z_thread_abort+0x13c>)
   26b2c:	f7fd f952 	bl	23dd4 <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
   26b30:	7b63      	ldrb	r3, [r4, #13]
   26b32:	071a      	lsls	r2, r3, #28
   26b34:	d517      	bpl.n	26b66 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26b36:	483d      	ldr	r0, [pc, #244]	; (26c2c <z_thread_abort+0x13c>)
   26b38:	f7fd f93c 	bl	23db4 <z_spin_unlock_valid>
   26b3c:	b968      	cbnz	r0, 26b5a <z_thread_abort+0x6a>
   26b3e:	4a3c      	ldr	r2, [pc, #240]	; (26c30 <z_thread_abort+0x140>)
   26b40:	493f      	ldr	r1, [pc, #252]	; (26c40 <z_thread_abort+0x150>)
   26b42:	483d      	ldr	r0, [pc, #244]	; (26c38 <z_thread_abort+0x148>)
   26b44:	23ac      	movs	r3, #172	; 0xac
   26b46:	f002 f828 	bl	28b9a <printk>
   26b4a:	4938      	ldr	r1, [pc, #224]	; (26c2c <z_thread_abort+0x13c>)
   26b4c:	483d      	ldr	r0, [pc, #244]	; (26c44 <z_thread_abort+0x154>)
   26b4e:	f002 f824 	bl	28b9a <printk>
   26b52:	4837      	ldr	r0, [pc, #220]	; (26c30 <z_thread_abort+0x140>)
   26b54:	21ac      	movs	r1, #172	; 0xac
   26b56:	f002 fa61 	bl	2901c <assert_post_action>
	__asm__ volatile(
   26b5a:	f386 8811 	msr	BASEPRI, r6
   26b5e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
   26b62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
   26b66:	f023 0220 	bic.w	r2, r3, #32
   26b6a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
   26b6e:	09d2      	lsrs	r2, r2, #7
   26b70:	d145      	bne.n	26bfe <z_thread_abort+0x10e>
		thread->base.thread_state &= ~_THREAD_ABORTING;
   26b72:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
   26b74:	68a3      	ldr	r3, [r4, #8]
   26b76:	b113      	cbz	r3, 26b7e <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
   26b78:	4620      	mov	r0, r4
   26b7a:	f7ff f847 	bl	25c0c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
   26b7e:	f104 0018 	add.w	r0, r4, #24
   26b82:	f000 fb0d 	bl	271a0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   26b86:	f104 0760 	add.w	r7, r4, #96	; 0x60
   26b8a:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
   26b8e:	6e25      	ldr	r5, [r4, #96]	; 0x60
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26b90:	42bd      	cmp	r5, r7
   26b92:	d001      	beq.n	26b98 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26b94:	2d00      	cmp	r5, #0
   26b96:	d13c      	bne.n	26c12 <z_thread_abort+0x122>
		update_cache(1);
   26b98:	2001      	movs	r0, #1
   26b9a:	f7ff f8a5 	bl	25ce8 <update_cache>
		z_thread_monitor_exit(thread);
   26b9e:	4620      	mov	r0, r4
   26ba0:	f7fd f984 	bl	23eac <z_thread_monitor_exit>
	if (thread == _current && !arch_is_in_isr()) {
   26ba4:	4b28      	ldr	r3, [pc, #160]	; (26c48 <z_thread_abort+0x158>)
   26ba6:	689b      	ldr	r3, [r3, #8]
   26ba8:	42a3      	cmp	r3, r4
   26baa:	d1c4      	bne.n	26b36 <z_thread_abort+0x46>
   26bac:	f3ef 8305 	mrs	r3, IPSR
   26bb0:	2b00      	cmp	r3, #0
   26bb2:	d1c0      	bne.n	26b36 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26bb4:	481d      	ldr	r0, [pc, #116]	; (26c2c <z_thread_abort+0x13c>)
   26bb6:	f7fd f8fd 	bl	23db4 <z_spin_unlock_valid>
   26bba:	b968      	cbnz	r0, 26bd8 <z_thread_abort+0xe8>
   26bbc:	4a1c      	ldr	r2, [pc, #112]	; (26c30 <z_thread_abort+0x140>)
   26bbe:	4920      	ldr	r1, [pc, #128]	; (26c40 <z_thread_abort+0x150>)
   26bc0:	481d      	ldr	r0, [pc, #116]	; (26c38 <z_thread_abort+0x148>)
   26bc2:	23c3      	movs	r3, #195	; 0xc3
   26bc4:	f001 ffe9 	bl	28b9a <printk>
   26bc8:	4918      	ldr	r1, [pc, #96]	; (26c2c <z_thread_abort+0x13c>)
   26bca:	481e      	ldr	r0, [pc, #120]	; (26c44 <z_thread_abort+0x154>)
   26bcc:	f001 ffe5 	bl	28b9a <printk>
   26bd0:	4817      	ldr	r0, [pc, #92]	; (26c30 <z_thread_abort+0x140>)
   26bd2:	21c3      	movs	r1, #195	; 0xc3
   26bd4:	f002 fa22 	bl	2901c <assert_post_action>
   26bd8:	4630      	mov	r0, r6
   26bda:	f7ef fa31 	bl	16040 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
   26bde:	4a1b      	ldr	r2, [pc, #108]	; (26c4c <z_thread_abort+0x15c>)
   26be0:	491b      	ldr	r1, [pc, #108]	; (26c50 <z_thread_abort+0x160>)
   26be2:	4815      	ldr	r0, [pc, #84]	; (26c38 <z_thread_abort+0x148>)
   26be4:	f240 634b 	movw	r3, #1611	; 0x64b
   26be8:	f001 ffd7 	bl	28b9a <printk>
   26bec:	4819      	ldr	r0, [pc, #100]	; (26c54 <z_thread_abort+0x164>)
   26bee:	f001 ffd4 	bl	28b9a <printk>
   26bf2:	4816      	ldr	r0, [pc, #88]	; (26c4c <z_thread_abort+0x15c>)
   26bf4:	f240 614b 	movw	r1, #1611	; 0x64b
   26bf8:	f002 fa10 	bl	2901c <assert_post_action>
   26bfc:	e79b      	b.n	26b36 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26bfe:	f003 035f 	and.w	r3, r3, #95	; 0x5f
   26c02:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
   26c06:	4814      	ldr	r0, [pc, #80]	; (26c58 <z_thread_abort+0x168>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
   26c08:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
   26c0a:	4621      	mov	r1, r4
   26c0c:	f7fe ffdc 	bl	25bc8 <z_priq_dumb_remove>
}
   26c10:	e7b0      	b.n	26b74 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
   26c12:	4628      	mov	r0, r5
   26c14:	f7fe fffa 	bl	25c0c <unpend_thread_no_timeout>
   26c18:	f105 0018 	add.w	r0, r5, #24
   26c1c:	f000 fac0 	bl	271a0 <z_abort_timeout>
   26c20:	f8c5 80b8 	str.w	r8, [r5, #184]	; 0xb8
		ready_thread(thread);
   26c24:	4628      	mov	r0, r5
   26c26:	f7ff f965 	bl	25ef4 <ready_thread>
   26c2a:	e7b0      	b.n	26b8e <z_thread_abort+0x9e>
   26c2c:	200029fc 	.word	0x200029fc
   26c30:	0002e9fe 	.word	0x0002e9fe
   26c34:	0002ea50 	.word	0x0002ea50
   26c38:	0002e93e 	.word	0x0002e93e
   26c3c:	0002ea65 	.word	0x0002ea65
   26c40:	0002ea24 	.word	0x0002ea24
   26c44:	0002ea3b 	.word	0x0002ea3b
   26c48:	20001f98 	.word	0x20001f98
   26c4c:	00034133 	.word	0x00034133
   26c50:	00034515 	.word	0x00034515
   26c54:	00034225 	.word	0x00034225
   26c58:	20001fbc 	.word	0x20001fbc

00026c5c <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
   26c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26c5e:	4604      	mov	r4, r0
   26c60:	460e      	mov	r6, r1
   26c62:	4615      	mov	r5, r2
	__asm__ volatile(
   26c64:	f04f 0340 	mov.w	r3, #64	; 0x40
   26c68:	f3ef 8711 	mrs	r7, BASEPRI
   26c6c:	f383 8812 	msr	BASEPRI_MAX, r3
   26c70:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26c74:	481f      	ldr	r0, [pc, #124]	; (26cf4 <z_sched_wake+0x98>)
   26c76:	f7fd f88f 	bl	23d98 <z_spin_lock_valid>
   26c7a:	b968      	cbnz	r0, 26c98 <z_sched_wake+0x3c>
   26c7c:	4a1e      	ldr	r2, [pc, #120]	; (26cf8 <z_sched_wake+0x9c>)
   26c7e:	491f      	ldr	r1, [pc, #124]	; (26cfc <z_sched_wake+0xa0>)
   26c80:	481f      	ldr	r0, [pc, #124]	; (26d00 <z_sched_wake+0xa4>)
   26c82:	2381      	movs	r3, #129	; 0x81
   26c84:	f001 ff89 	bl	28b9a <printk>
   26c88:	491a      	ldr	r1, [pc, #104]	; (26cf4 <z_sched_wake+0x98>)
   26c8a:	481e      	ldr	r0, [pc, #120]	; (26d04 <z_sched_wake+0xa8>)
   26c8c:	f001 ff85 	bl	28b9a <printk>
   26c90:	4819      	ldr	r0, [pc, #100]	; (26cf8 <z_sched_wake+0x9c>)
   26c92:	2181      	movs	r1, #129	; 0x81
   26c94:	f002 f9c2 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   26c98:	4816      	ldr	r0, [pc, #88]	; (26cf4 <z_sched_wake+0x98>)
   26c9a:	f7fd f89b 	bl	23dd4 <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
   26c9e:	4620      	mov	r0, r4
   26ca0:	f005 fecc 	bl	2ca3c <z_priq_dumb_best>

		if (thread != NULL) {
   26ca4:	4604      	mov	r4, r0
   26ca6:	b160      	cbz	r0, 26cc2 <z_sched_wake+0x66>
   26ca8:	f8c0 60b8 	str.w	r6, [r0, #184]	; 0xb8
   26cac:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
   26cae:	f7fe ffad 	bl	25c0c <unpend_thread_no_timeout>
   26cb2:	f104 0018 	add.w	r0, r4, #24
   26cb6:	f000 fa73 	bl	271a0 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
   26cba:	4620      	mov	r0, r4
   26cbc:	f7ff f91a 	bl	25ef4 <ready_thread>
			ret = true;
   26cc0:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26cc2:	480c      	ldr	r0, [pc, #48]	; (26cf4 <z_sched_wake+0x98>)
   26cc4:	f7fd f876 	bl	23db4 <z_spin_unlock_valid>
   26cc8:	b968      	cbnz	r0, 26ce6 <z_sched_wake+0x8a>
   26cca:	4a0b      	ldr	r2, [pc, #44]	; (26cf8 <z_sched_wake+0x9c>)
   26ccc:	490e      	ldr	r1, [pc, #56]	; (26d08 <z_sched_wake+0xac>)
   26cce:	480c      	ldr	r0, [pc, #48]	; (26d00 <z_sched_wake+0xa4>)
   26cd0:	23ac      	movs	r3, #172	; 0xac
   26cd2:	f001 ff62 	bl	28b9a <printk>
   26cd6:	4907      	ldr	r1, [pc, #28]	; (26cf4 <z_sched_wake+0x98>)
   26cd8:	480c      	ldr	r0, [pc, #48]	; (26d0c <z_sched_wake+0xb0>)
   26cda:	f001 ff5e 	bl	28b9a <printk>
   26cde:	4806      	ldr	r0, [pc, #24]	; (26cf8 <z_sched_wake+0x9c>)
   26ce0:	21ac      	movs	r1, #172	; 0xac
   26ce2:	f002 f99b 	bl	2901c <assert_post_action>
	__asm__ volatile(
   26ce6:	f387 8811 	msr	BASEPRI, r7
   26cea:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   26cee:	4620      	mov	r0, r4
   26cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26cf2:	bf00      	nop
   26cf4:	200029fc 	.word	0x200029fc
   26cf8:	0002e9fe 	.word	0x0002e9fe
   26cfc:	0002ea50 	.word	0x0002ea50
   26d00:	0002e93e 	.word	0x0002e93e
   26d04:	0002ea65 	.word	0x0002ea65
   26d08:	0002ea24 	.word	0x0002ea24
   26d0c:	0002ea3b 	.word	0x0002ea3b

00026d10 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
   26d10:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   26d12:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
   26d16:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
   26d18:	e9cd 6700 	strd	r6, r7, [sp]
   26d1c:	f7ff faee 	bl	262fc <z_pend_curr>

	if (data != NULL) {
   26d20:	b11c      	cbz	r4, 26d2a <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
   26d22:	4b03      	ldr	r3, [pc, #12]	; (26d30 <z_sched_wait+0x20>)
   26d24:	689b      	ldr	r3, [r3, #8]
   26d26:	695b      	ldr	r3, [r3, #20]
   26d28:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
   26d2a:	b002      	add	sp, #8
   26d2c:	bdd0      	pop	{r4, r6, r7, pc}
   26d2e:	bf00      	nop
   26d30:	20001f98 	.word	0x20001f98

00026d34 <z_sched_usage_start>:
	/* Edge case: we use a zero as a null ("stop() already called") */
	return (now == 0) ? 1 : now;
}

void z_sched_usage_start(struct k_thread *thread)
{
   26d34:	b508      	push	{r3, lr}
#if defined(CONFIG_BOARD_HAS_TIMING_FUNCTIONS)
	return board_timing_counter_get();
#elif defined(CONFIG_SOC_HAS_TIMING_FUNCTIONS)
	return soc_timing_counter_get();
#else
	return arch_timing_counter_get();
   26d36:	f7ef fea5 	bl	16a84 <arch_timing_counter_get>
	/* One write through a volatile pointer doesn't require
	 * synchronization as long as _usage() treats it as volatile
	 * (we can't race with _stop() by design).
	 */
	_current_cpu->usage0 = usage_now();
   26d3a:	4b03      	ldr	r3, [pc, #12]	; (26d48 <z_sched_usage_start+0x14>)
   26d3c:	2801      	cmp	r0, #1
   26d3e:	bf38      	it	cc
   26d40:	2001      	movcc	r0, #1
   26d42:	6198      	str	r0, [r3, #24]
}
   26d44:	bd08      	pop	{r3, pc}
   26d46:	bf00      	nop
   26d48:	20001f98 	.word	0x20001f98

00026d4c <z_sched_usage_stop>:

void z_sched_usage_stop(void)
{
   26d4c:	b570      	push	{r4, r5, r6, lr}
	__asm__ volatile(
   26d4e:	f04f 0340 	mov.w	r3, #64	; 0x40
   26d52:	f3ef 8511 	mrs	r5, BASEPRI
   26d56:	f383 8812 	msr	BASEPRI_MAX, r3
   26d5a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26d5e:	482a      	ldr	r0, [pc, #168]	; (26e08 <z_sched_usage_stop+0xbc>)
   26d60:	f7fd f81a 	bl	23d98 <z_spin_lock_valid>
   26d64:	b968      	cbnz	r0, 26d82 <z_sched_usage_stop+0x36>
   26d66:	4a29      	ldr	r2, [pc, #164]	; (26e0c <z_sched_usage_stop+0xc0>)
   26d68:	4929      	ldr	r1, [pc, #164]	; (26e10 <z_sched_usage_stop+0xc4>)
   26d6a:	482a      	ldr	r0, [pc, #168]	; (26e14 <z_sched_usage_stop+0xc8>)
   26d6c:	2381      	movs	r3, #129	; 0x81
   26d6e:	f001 ff14 	bl	28b9a <printk>
   26d72:	4925      	ldr	r1, [pc, #148]	; (26e08 <z_sched_usage_stop+0xbc>)
   26d74:	4828      	ldr	r0, [pc, #160]	; (26e18 <z_sched_usage_stop+0xcc>)
   26d76:	f001 ff10 	bl	28b9a <printk>
   26d7a:	4824      	ldr	r0, [pc, #144]	; (26e0c <z_sched_usage_stop+0xc0>)
   26d7c:	2181      	movs	r1, #129	; 0x81
   26d7e:	f002 f94d 	bl	2901c <assert_post_action>
	k_spinlock_key_t k = k_spin_lock(&usage_lock);
	uint32_t u0 = _current_cpu->usage0;
   26d82:	4c26      	ldr	r4, [pc, #152]	; (26e1c <z_sched_usage_stop+0xd0>)
	z_spin_lock_set_owner(l);
   26d84:	4820      	ldr	r0, [pc, #128]	; (26e08 <z_sched_usage_stop+0xbc>)
   26d86:	f7fd f825 	bl	23dd4 <z_spin_lock_set_owner>
   26d8a:	69a6      	ldr	r6, [r4, #24]

	if (u0 != 0) {
   26d8c:	b1de      	cbz	r6, 26dc6 <z_sched_usage_stop+0x7a>
   26d8e:	f7ef fe79 	bl	16a84 <arch_timing_counter_get>
		uint32_t dt = usage_now() - u0;

#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
		if (z_is_idle_thread_object(_current)) {
   26d92:	68a2      	ldr	r2, [r4, #8]
   26d94:	4b22      	ldr	r3, [pc, #136]	; (26e20 <z_sched_usage_stop+0xd4>)
		uint32_t dt = usage_now() - u0;
   26d96:	2801      	cmp	r0, #1
   26d98:	bf2c      	ite	cs
   26d9a:	ebc6 0000 	rsbcs	r0, r6, r0
   26d9e:	f1c6 0001 	rsbcc	r0, r6, #1
		if (z_is_idle_thread_object(_current)) {
   26da2:	429a      	cmp	r2, r3
   26da4:	f04f 0600 	mov.w	r6, #0
   26da8:	d126      	bne.n	26df8 <z_sched_usage_stop+0xac>
			_kernel.idle_thread_usage += dt;
   26daa:	e9d4 310e 	ldrd	r3, r1, [r4, #56]	; 0x38
   26dae:	181b      	adds	r3, r3, r0
   26db0:	eb46 0101 	adc.w	r1, r6, r1
   26db4:	e9c4 310e 	strd	r3, r1, [r4, #56]	; 0x38
		} else {
			_kernel.all_thread_usage += dt;
		}
#endif
		_current->base.usage += dt;
   26db8:	e9d2 310c 	ldrd	r3, r1, [r2, #48]	; 0x30
   26dbc:	1818      	adds	r0, r3, r0
   26dbe:	eb46 0101 	adc.w	r1, r6, r1
   26dc2:	e9c2 010c 	strd	r0, r1, [r2, #48]	; 0x30
	}

	_current_cpu->usage0 = 0;
   26dc6:	2300      	movs	r3, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26dc8:	480f      	ldr	r0, [pc, #60]	; (26e08 <z_sched_usage_stop+0xbc>)
   26dca:	61a3      	str	r3, [r4, #24]
   26dcc:	f7fc fff2 	bl	23db4 <z_spin_unlock_valid>
   26dd0:	b968      	cbnz	r0, 26dee <z_sched_usage_stop+0xa2>
   26dd2:	4a0e      	ldr	r2, [pc, #56]	; (26e0c <z_sched_usage_stop+0xc0>)
   26dd4:	4913      	ldr	r1, [pc, #76]	; (26e24 <z_sched_usage_stop+0xd8>)
   26dd6:	480f      	ldr	r0, [pc, #60]	; (26e14 <z_sched_usage_stop+0xc8>)
   26dd8:	23ac      	movs	r3, #172	; 0xac
   26dda:	f001 fede 	bl	28b9a <printk>
   26dde:	490a      	ldr	r1, [pc, #40]	; (26e08 <z_sched_usage_stop+0xbc>)
   26de0:	4811      	ldr	r0, [pc, #68]	; (26e28 <z_sched_usage_stop+0xdc>)
   26de2:	f001 feda 	bl	28b9a <printk>
   26de6:	4809      	ldr	r0, [pc, #36]	; (26e0c <z_sched_usage_stop+0xc0>)
   26de8:	21ac      	movs	r1, #172	; 0xac
   26dea:	f002 f917 	bl	2901c <assert_post_action>
	__asm__ volatile(
   26dee:	f385 8811 	msr	BASEPRI, r5
   26df2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&usage_lock, k);
}
   26df6:	bd70      	pop	{r4, r5, r6, pc}
			_kernel.all_thread_usage += dt;
   26df8:	e9d4 310c 	ldrd	r3, r1, [r4, #48]	; 0x30
   26dfc:	181b      	adds	r3, r3, r0
   26dfe:	eb46 0101 	adc.w	r1, r6, r1
   26e02:	e9c4 310c 	strd	r3, r1, [r4, #48]	; 0x30
   26e06:	e7d7      	b.n	26db8 <z_sched_usage_stop+0x6c>
   26e08:	20002a08 	.word	0x20002a08
   26e0c:	0002e9fe 	.word	0x0002e9fe
   26e10:	0002ea50 	.word	0x0002ea50
   26e14:	0002e93e 	.word	0x0002e93e
   26e18:	0002ea65 	.word	0x0002ea65
   26e1c:	20001f98 	.word	0x20001f98
   26e20:	20001fd8 	.word	0x20001fd8
   26e24:	0002ea24 	.word	0x0002ea24
   26e28:	0002ea3b 	.word	0x0002ea3b

00026e2c <z_sched_thread_usage>:

uint64_t z_sched_thread_usage(struct k_thread *thread)
{
   26e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   26e30:	4604      	mov	r4, r0
	__asm__ volatile(
   26e32:	f04f 0340 	mov.w	r3, #64	; 0x40
   26e36:	f3ef 8a11 	mrs	sl, BASEPRI
   26e3a:	f383 8812 	msr	BASEPRI_MAX, r3
   26e3e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   26e42:	482f      	ldr	r0, [pc, #188]	; (26f00 <z_sched_thread_usage+0xd4>)
   26e44:	f7fc ffa8 	bl	23d98 <z_spin_lock_valid>
   26e48:	b968      	cbnz	r0, 26e66 <z_sched_thread_usage+0x3a>
   26e4a:	4a2e      	ldr	r2, [pc, #184]	; (26f04 <z_sched_thread_usage+0xd8>)
   26e4c:	492e      	ldr	r1, [pc, #184]	; (26f08 <z_sched_thread_usage+0xdc>)
   26e4e:	482f      	ldr	r0, [pc, #188]	; (26f0c <z_sched_thread_usage+0xe0>)
   26e50:	2381      	movs	r3, #129	; 0x81
   26e52:	f001 fea2 	bl	28b9a <printk>
   26e56:	492a      	ldr	r1, [pc, #168]	; (26f00 <z_sched_thread_usage+0xd4>)
   26e58:	482d      	ldr	r0, [pc, #180]	; (26f10 <z_sched_thread_usage+0xe4>)
   26e5a:	f001 fe9e 	bl	28b9a <printk>
   26e5e:	4829      	ldr	r0, [pc, #164]	; (26f04 <z_sched_thread_usage+0xd8>)
   26e60:	2181      	movs	r1, #129	; 0x81
   26e62:	f002 f8db 	bl	2901c <assert_post_action>
	k_spinlock_key_t k = k_spin_lock(&usage_lock);
	uint32_t u0 = _current_cpu->usage0, now = usage_now();
   26e66:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 26f20 <z_sched_thread_usage+0xf4>
	z_spin_lock_set_owner(l);
   26e6a:	4825      	ldr	r0, [pc, #148]	; (26f00 <z_sched_thread_usage+0xd4>)
   26e6c:	f7fc ffb2 	bl	23dd4 <z_spin_lock_set_owner>
   26e70:	f8d9 8018 	ldr.w	r8, [r9, #24]
   26e74:	f7ef fe06 	bl	16a84 <arch_timing_counter_get>
	uint64_t ret = thread->base.usage;
   26e78:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	; 0x30

	if (u0 != 0) {
   26e7c:	464b      	mov	r3, r9
   26e7e:	f1b8 0f00 	cmp.w	r8, #0
   26e82:	d018      	beq.n	26eb6 <z_sched_thread_usage+0x8a>
		uint32_t dt = now - u0;

#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
		if (z_is_idle_thread_object(thread)) {
   26e84:	4923      	ldr	r1, [pc, #140]	; (26f14 <z_sched_thread_usage+0xe8>)
   26e86:	2801      	cmp	r0, #1
   26e88:	bf38      	it	cc
   26e8a:	2001      	movcc	r0, #1
   26e8c:	428c      	cmp	r4, r1
		uint32_t dt = now - u0;
   26e8e:	eba0 0208 	sub.w	r2, r0, r8
   26e92:	f04f 0c00 	mov.w	ip, #0
		if (z_is_idle_thread_object(thread)) {
   26e96:	d128      	bne.n	26eea <z_sched_thread_usage+0xbe>
			_kernel.idle_thread_usage += dt;
   26e98:	f8d9 1038 	ldr.w	r1, [r9, #56]	; 0x38
   26e9c:	f8d9 703c 	ldr.w	r7, [r9, #60]	; 0x3c
   26ea0:	1889      	adds	r1, r1, r2
   26ea2:	eb47 0e0c 	adc.w	lr, r7, ip
   26ea6:	e9c9 1e0e 	strd	r1, lr, [r9, #56]	; 0x38
		} else {
			_kernel.all_thread_usage += dt;
		}
#endif

		ret += dt;
   26eaa:	18ad      	adds	r5, r5, r2
   26eac:	eb46 060c 	adc.w	r6, r6, ip
		thread->base.usage = ret;
   26eb0:	e9c4 560c 	strd	r5, r6, [r4, #48]	; 0x30
		_current_cpu->usage0 = now;
   26eb4:	6198      	str	r0, [r3, #24]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   26eb6:	4812      	ldr	r0, [pc, #72]	; (26f00 <z_sched_thread_usage+0xd4>)
   26eb8:	f7fc ff7c 	bl	23db4 <z_spin_unlock_valid>
   26ebc:	b968      	cbnz	r0, 26eda <z_sched_thread_usage+0xae>
   26ebe:	4a11      	ldr	r2, [pc, #68]	; (26f04 <z_sched_thread_usage+0xd8>)
   26ec0:	4915      	ldr	r1, [pc, #84]	; (26f18 <z_sched_thread_usage+0xec>)
   26ec2:	4812      	ldr	r0, [pc, #72]	; (26f0c <z_sched_thread_usage+0xe0>)
   26ec4:	23ac      	movs	r3, #172	; 0xac
   26ec6:	f001 fe68 	bl	28b9a <printk>
   26eca:	490d      	ldr	r1, [pc, #52]	; (26f00 <z_sched_thread_usage+0xd4>)
   26ecc:	4813      	ldr	r0, [pc, #76]	; (26f1c <z_sched_thread_usage+0xf0>)
   26ece:	f001 fe64 	bl	28b9a <printk>
   26ed2:	480c      	ldr	r0, [pc, #48]	; (26f04 <z_sched_thread_usage+0xd8>)
   26ed4:	21ac      	movs	r1, #172	; 0xac
   26ed6:	f002 f8a1 	bl	2901c <assert_post_action>
	__asm__ volatile(
   26eda:	f38a 8811 	msr	BASEPRI, sl
   26ede:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&usage_lock, k);
	return ret;
}
   26ee2:	4628      	mov	r0, r5
   26ee4:	4631      	mov	r1, r6
   26ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			_kernel.all_thread_usage += dt;
   26eea:	f8d9 1030 	ldr.w	r1, [r9, #48]	; 0x30
   26eee:	f8d9 7034 	ldr.w	r7, [r9, #52]	; 0x34
   26ef2:	1889      	adds	r1, r1, r2
   26ef4:	eb47 0e0c 	adc.w	lr, r7, ip
   26ef8:	e9c9 1e0c 	strd	r1, lr, [r9, #48]	; 0x30
   26efc:	e7d5      	b.n	26eaa <z_sched_thread_usage+0x7e>
   26efe:	bf00      	nop
   26f00:	20002a08 	.word	0x20002a08
   26f04:	0002e9fe 	.word	0x0002e9fe
   26f08:	0002ea50 	.word	0x0002ea50
   26f0c:	0002e93e 	.word	0x0002e93e
   26f10:	0002ea65 	.word	0x0002ea65
   26f14:	20001fd8 	.word	0x20001fd8
   26f18:	0002ea24 	.word	0x0002ea24
   26f1c:	0002ea3b 	.word	0x0002ea3b
   26f20:	20001f98 	.word	0x20001f98

00026f24 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   26f24:	b508      	push	{r3, lr}
   26f26:	4806      	ldr	r0, [pc, #24]	; (26f40 <z_data_copy+0x1c>)
   26f28:	4a06      	ldr	r2, [pc, #24]	; (26f44 <z_data_copy+0x20>)
   26f2a:	4907      	ldr	r1, [pc, #28]	; (26f48 <z_data_copy+0x24>)
   26f2c:	1a12      	subs	r2, r2, r0
   26f2e:	f005 fe62 	bl	2cbf6 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   26f32:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   26f36:	4a05      	ldr	r2, [pc, #20]	; (26f4c <z_data_copy+0x28>)
   26f38:	4905      	ldr	r1, [pc, #20]	; (26f50 <z_data_copy+0x2c>)
   26f3a:	4806      	ldr	r0, [pc, #24]	; (26f54 <z_data_copy+0x30>)
   26f3c:	f005 be5b 	b.w	2cbf6 <memcpy>
   26f40:	20000000 	.word	0x20000000
   26f44:	20000a28 	.word	0x20000a28
   26f48:	00034674 	.word	0x00034674
   26f4c:	00000000 	.word	0x00000000
   26f50:	00034674 	.word	0x00034674
   26f54:	20000000 	.word	0x20000000

00026f58 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
   26f58:	4b03      	ldr	r3, [pc, #12]	; (26f68 <elapsed+0x10>)
   26f5a:	681b      	ldr	r3, [r3, #0]
   26f5c:	b90b      	cbnz	r3, 26f62 <elapsed+0xa>
   26f5e:	f7fa be79 	b.w	21c54 <sys_clock_elapsed>
}
   26f62:	2000      	movs	r0, #0
   26f64:	4770      	bx	lr
   26f66:	bf00      	nop
   26f68:	20002a0c 	.word	0x20002a0c

00026f6c <next_timeout>:

static int32_t next_timeout(void)
{
   26f6c:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   26f6e:	4b13      	ldr	r3, [pc, #76]	; (26fbc <next_timeout+0x50>)
   26f70:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f72:	429c      	cmp	r4, r3
   26f74:	bf08      	it	eq
   26f76:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   26f78:	f7ff ffee 	bl	26f58 <elapsed>
   26f7c:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   26f7e:	b1bc      	cbz	r4, 26fb0 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   26f80:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   26f84:	1b40      	subs	r0, r0, r5
   26f86:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   26f8a:	2801      	cmp	r0, #1
   26f8c:	f171 0300 	sbcs.w	r3, r1, #0
   26f90:	db11      	blt.n	26fb6 <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   26f92:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   26f96:	2300      	movs	r3, #0
   26f98:	4282      	cmp	r2, r0
   26f9a:	eb73 0401 	sbcs.w	r4, r3, r1
   26f9e:	da00      	bge.n	26fa2 <next_timeout+0x36>
   26fa0:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   26fa2:	4b07      	ldr	r3, [pc, #28]	; (26fc0 <next_timeout+0x54>)
   26fa4:	691b      	ldr	r3, [r3, #16]
   26fa6:	b113      	cbz	r3, 26fae <next_timeout+0x42>
   26fa8:	4298      	cmp	r0, r3
   26faa:	bfa8      	it	ge
   26fac:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   26fae:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   26fb0:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   26fb4:	e7f5      	b.n	26fa2 <next_timeout+0x36>
   26fb6:	2000      	movs	r0, #0
   26fb8:	e7f3      	b.n	26fa2 <next_timeout+0x36>
   26fba:	bf00      	nop
   26fbc:	20000664 	.word	0x20000664
   26fc0:	20001f98 	.word	0x20001f98

00026fc4 <remove_timeout>:
{
   26fc4:	b530      	push	{r4, r5, lr}
   26fc6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   26fc8:	b168      	cbz	r0, 26fe6 <remove_timeout+0x22>
   26fca:	4a0a      	ldr	r2, [pc, #40]	; (26ff4 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   26fcc:	6852      	ldr	r2, [r2, #4]
   26fce:	4290      	cmp	r0, r2
   26fd0:	d009      	beq.n	26fe6 <remove_timeout+0x22>
	if (next(t) != NULL) {
   26fd2:	b143      	cbz	r3, 26fe6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   26fd4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   26fd8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   26fdc:	1912      	adds	r2, r2, r4
   26fde:	eb45 0101 	adc.w	r1, r5, r1
   26fe2:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
   26fe6:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
   26fe8:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   26fea:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   26fec:	2300      	movs	r3, #0
	node->prev = NULL;
   26fee:	e9c0 3300 	strd	r3, r3, [r0]
}
   26ff2:	bd30      	pop	{r4, r5, pc}
   26ff4:	20000664 	.word	0x20000664

00026ff8 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   26ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26ffc:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   26ffe:	1c6b      	adds	r3, r5, #1
   27000:	bf08      	it	eq
   27002:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   27006:	4682      	mov	sl, r0
   27008:	468b      	mov	fp, r1
   2700a:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2700c:	f000 80aa 	beq.w	27164 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
   27010:	6803      	ldr	r3, [r0, #0]
   27012:	b163      	cbz	r3, 2702e <z_add_timeout+0x36>
   27014:	4955      	ldr	r1, [pc, #340]	; (2716c <z_add_timeout+0x174>)
   27016:	4a56      	ldr	r2, [pc, #344]	; (27170 <z_add_timeout+0x178>)
   27018:	4856      	ldr	r0, [pc, #344]	; (27174 <z_add_timeout+0x17c>)
   2701a:	235d      	movs	r3, #93	; 0x5d
   2701c:	f001 fdbd 	bl	28b9a <printk>
   27020:	4855      	ldr	r0, [pc, #340]	; (27178 <z_add_timeout+0x180>)
   27022:	f001 fdba 	bl	28b9a <printk>
   27026:	4852      	ldr	r0, [pc, #328]	; (27170 <z_add_timeout+0x178>)
   27028:	215d      	movs	r1, #93	; 0x5d
   2702a:	f001 fff7 	bl	2901c <assert_post_action>
	to->fn = fn;
   2702e:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
   27032:	f04f 0340 	mov.w	r3, #64	; 0x40
   27036:	f3ef 8b11 	mrs	fp, BASEPRI
   2703a:	f383 8812 	msr	BASEPRI_MAX, r3
   2703e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27042:	484e      	ldr	r0, [pc, #312]	; (2717c <z_add_timeout+0x184>)
   27044:	f7fc fea8 	bl	23d98 <z_spin_lock_valid>
   27048:	b968      	cbnz	r0, 27066 <z_add_timeout+0x6e>
   2704a:	4a4d      	ldr	r2, [pc, #308]	; (27180 <z_add_timeout+0x188>)
   2704c:	494d      	ldr	r1, [pc, #308]	; (27184 <z_add_timeout+0x18c>)
   2704e:	4849      	ldr	r0, [pc, #292]	; (27174 <z_add_timeout+0x17c>)
   27050:	2381      	movs	r3, #129	; 0x81
   27052:	f001 fda2 	bl	28b9a <printk>
   27056:	4949      	ldr	r1, [pc, #292]	; (2717c <z_add_timeout+0x184>)
   27058:	484b      	ldr	r0, [pc, #300]	; (27188 <z_add_timeout+0x190>)
   2705a:	f001 fd9e 	bl	28b9a <printk>
   2705e:	4848      	ldr	r0, [pc, #288]	; (27180 <z_add_timeout+0x188>)
   27060:	2181      	movs	r1, #129	; 0x81
   27062:	f001 ffdb 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   27066:	4845      	ldr	r0, [pc, #276]	; (2717c <z_add_timeout+0x184>)
   27068:	f7fc feb4 	bl	23dd4 <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
   2706c:	f06f 0301 	mvn.w	r3, #1
   27070:	ebb3 0804 	subs.w	r8, r3, r4
   27074:	f04f 32ff 	mov.w	r2, #4294967295
   27078:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
   2707c:	f1b8 0f00 	cmp.w	r8, #0
   27080:	f179 0100 	sbcs.w	r1, r9, #0
   27084:	db1c      	blt.n	270c0 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
   27086:	4841      	ldr	r0, [pc, #260]	; (2718c <z_add_timeout+0x194>)
   27088:	e9d0 1000 	ldrd	r1, r0, [r0]
   2708c:	1a5b      	subs	r3, r3, r1
   2708e:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
   27092:	1b1e      	subs	r6, r3, r4
   27094:	eb62 0705 	sbc.w	r7, r2, r5
   27098:	2e01      	cmp	r6, #1
   2709a:	f177 0300 	sbcs.w	r3, r7, #0
   2709e:	bfbc      	itt	lt
   270a0:	2601      	movlt	r6, #1
   270a2:	2700      	movlt	r7, #0
   270a4:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
   270a8:	4a39      	ldr	r2, [pc, #228]	; (27190 <z_add_timeout+0x198>)
   270aa:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   270ae:	4293      	cmp	r3, r2
   270b0:	d11d      	bne.n	270ee <z_add_timeout+0xf6>
	node->prev = tail;
   270b2:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
   270b6:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
   270ba:	f8c2 a004 	str.w	sl, [r2, #4]
}
   270be:	e02c      	b.n	2711a <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
   270c0:	f7ff ff4a 	bl	26f58 <elapsed>
   270c4:	1c63      	adds	r3, r4, #1
   270c6:	9300      	str	r3, [sp, #0]
   270c8:	f145 0300 	adc.w	r3, r5, #0
   270cc:	9301      	str	r3, [sp, #4]
   270ce:	e9dd 2300 	ldrd	r2, r3, [sp]
   270d2:	1812      	adds	r2, r2, r0
   270d4:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
   270d8:	e9ca 2304 	strd	r2, r3, [sl, #16]
   270dc:	e7e4      	b.n	270a8 <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
   270de:	1be0      	subs	r0, r4, r7
   270e0:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
   270e4:	42b3      	cmp	r3, r6
   270e6:	e9ca 0104 	strd	r0, r1, [sl, #16]
   270ea:	d0e2      	beq.n	270b2 <z_add_timeout+0xba>
   270ec:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
   270ee:	2b00      	cmp	r3, #0
   270f0:	d0df      	beq.n	270b2 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
   270f2:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
   270f6:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   270fa:	42bc      	cmp	r4, r7
   270fc:	eb75 0108 	sbcs.w	r1, r5, r8
   27100:	daed      	bge.n	270de <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
   27102:	1b38      	subs	r0, r7, r4
   27104:	eb68 0105 	sbc.w	r1, r8, r5
   27108:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
   2710c:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2710e:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
   27112:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   27116:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
   2711a:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2711c:	4293      	cmp	r3, r2
   2711e:	d00b      	beq.n	27138 <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   27120:	459a      	cmp	sl, r3
   27122:	d109      	bne.n	27138 <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   27124:	f7ff ff22 	bl	26f6c <next_timeout>

			if (next_time == 0 ||
   27128:	b118      	cbz	r0, 27132 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
   2712a:	4b1a      	ldr	r3, [pc, #104]	; (27194 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
   2712c:	691b      	ldr	r3, [r3, #16]
   2712e:	4283      	cmp	r3, r0
   27130:	d002      	beq.n	27138 <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
   27132:	2100      	movs	r1, #0
   27134:	f7fa fd5e 	bl	21bf4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27138:	4810      	ldr	r0, [pc, #64]	; (2717c <z_add_timeout+0x184>)
   2713a:	f7fc fe3b 	bl	23db4 <z_spin_unlock_valid>
   2713e:	b968      	cbnz	r0, 2715c <z_add_timeout+0x164>
   27140:	4a0f      	ldr	r2, [pc, #60]	; (27180 <z_add_timeout+0x188>)
   27142:	4915      	ldr	r1, [pc, #84]	; (27198 <z_add_timeout+0x1a0>)
   27144:	480b      	ldr	r0, [pc, #44]	; (27174 <z_add_timeout+0x17c>)
   27146:	23ac      	movs	r3, #172	; 0xac
   27148:	f001 fd27 	bl	28b9a <printk>
   2714c:	490b      	ldr	r1, [pc, #44]	; (2717c <z_add_timeout+0x184>)
   2714e:	4813      	ldr	r0, [pc, #76]	; (2719c <z_add_timeout+0x1a4>)
   27150:	f001 fd23 	bl	28b9a <printk>
   27154:	480a      	ldr	r0, [pc, #40]	; (27180 <z_add_timeout+0x188>)
   27156:	21ac      	movs	r1, #172	; 0xac
   27158:	f001 ff60 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2715c:	f38b 8811 	msr	BASEPRI, fp
   27160:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   27164:	b003      	add	sp, #12
   27166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2716a:	bf00      	nop
   2716c:	0003426b 	.word	0x0003426b
   27170:	00034247 	.word	0x00034247
   27174:	0002e93e 	.word	0x0002e93e
   27178:	00033299 	.word	0x00033299
   2717c:	20002a10 	.word	0x20002a10
   27180:	0002e9fe 	.word	0x0002e9fe
   27184:	0002ea50 	.word	0x0002ea50
   27188:	0002ea65 	.word	0x0002ea65
   2718c:	20002238 	.word	0x20002238
   27190:	20000664 	.word	0x20000664
   27194:	20001f98 	.word	0x20001f98
   27198:	0002ea24 	.word	0x0002ea24
   2719c:	0002ea3b 	.word	0x0002ea3b

000271a0 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
   271a0:	b538      	push	{r3, r4, r5, lr}
   271a2:	4604      	mov	r4, r0
	__asm__ volatile(
   271a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   271a8:	f3ef 8511 	mrs	r5, BASEPRI
   271ac:	f383 8812 	msr	BASEPRI_MAX, r3
   271b0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   271b4:	481a      	ldr	r0, [pc, #104]	; (27220 <z_abort_timeout+0x80>)
   271b6:	f7fc fdef 	bl	23d98 <z_spin_lock_valid>
   271ba:	b968      	cbnz	r0, 271d8 <z_abort_timeout+0x38>
   271bc:	4a19      	ldr	r2, [pc, #100]	; (27224 <z_abort_timeout+0x84>)
   271be:	491a      	ldr	r1, [pc, #104]	; (27228 <z_abort_timeout+0x88>)
   271c0:	481a      	ldr	r0, [pc, #104]	; (2722c <z_abort_timeout+0x8c>)
   271c2:	2381      	movs	r3, #129	; 0x81
   271c4:	f001 fce9 	bl	28b9a <printk>
   271c8:	4915      	ldr	r1, [pc, #84]	; (27220 <z_abort_timeout+0x80>)
   271ca:	4819      	ldr	r0, [pc, #100]	; (27230 <z_abort_timeout+0x90>)
   271cc:	f001 fce5 	bl	28b9a <printk>
   271d0:	4814      	ldr	r0, [pc, #80]	; (27224 <z_abort_timeout+0x84>)
   271d2:	2181      	movs	r1, #129	; 0x81
   271d4:	f001 ff22 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   271d8:	4811      	ldr	r0, [pc, #68]	; (27220 <z_abort_timeout+0x80>)
   271da:	f7fc fdfb 	bl	23dd4 <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
   271de:	6823      	ldr	r3, [r4, #0]
   271e0:	b1db      	cbz	r3, 2721a <z_abort_timeout+0x7a>
			remove_timeout(to);
   271e2:	4620      	mov	r0, r4
   271e4:	f7ff feee 	bl	26fc4 <remove_timeout>
			ret = 0;
   271e8:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   271ea:	480d      	ldr	r0, [pc, #52]	; (27220 <z_abort_timeout+0x80>)
   271ec:	f7fc fde2 	bl	23db4 <z_spin_unlock_valid>
   271f0:	b968      	cbnz	r0, 2720e <z_abort_timeout+0x6e>
   271f2:	4a0c      	ldr	r2, [pc, #48]	; (27224 <z_abort_timeout+0x84>)
   271f4:	490f      	ldr	r1, [pc, #60]	; (27234 <z_abort_timeout+0x94>)
   271f6:	480d      	ldr	r0, [pc, #52]	; (2722c <z_abort_timeout+0x8c>)
   271f8:	23ac      	movs	r3, #172	; 0xac
   271fa:	f001 fcce 	bl	28b9a <printk>
   271fe:	4908      	ldr	r1, [pc, #32]	; (27220 <z_abort_timeout+0x80>)
   27200:	480d      	ldr	r0, [pc, #52]	; (27238 <z_abort_timeout+0x98>)
   27202:	f001 fcca 	bl	28b9a <printk>
   27206:	4807      	ldr	r0, [pc, #28]	; (27224 <z_abort_timeout+0x84>)
   27208:	21ac      	movs	r1, #172	; 0xac
   2720a:	f001 ff07 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2720e:	f385 8811 	msr	BASEPRI, r5
   27212:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
   27216:	4620      	mov	r0, r4
   27218:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
   2721a:	f06f 0415 	mvn.w	r4, #21
   2721e:	e7e4      	b.n	271ea <z_abort_timeout+0x4a>
   27220:	20002a10 	.word	0x20002a10
   27224:	0002e9fe 	.word	0x0002e9fe
   27228:	0002ea50 	.word	0x0002ea50
   2722c:	0002e93e 	.word	0x0002e93e
   27230:	0002ea65 	.word	0x0002ea65
   27234:	0002ea24 	.word	0x0002ea24
   27238:	0002ea3b 	.word	0x0002ea3b

0002723c <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
   2723c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2723e:	f04f 0340 	mov.w	r3, #64	; 0x40
   27242:	f3ef 8511 	mrs	r5, BASEPRI
   27246:	f383 8812 	msr	BASEPRI_MAX, r3
   2724a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2724e:	4818      	ldr	r0, [pc, #96]	; (272b0 <z_get_next_timeout_expiry+0x74>)
   27250:	f7fc fda2 	bl	23d98 <z_spin_lock_valid>
   27254:	b968      	cbnz	r0, 27272 <z_get_next_timeout_expiry+0x36>
   27256:	4a17      	ldr	r2, [pc, #92]	; (272b4 <z_get_next_timeout_expiry+0x78>)
   27258:	4917      	ldr	r1, [pc, #92]	; (272b8 <z_get_next_timeout_expiry+0x7c>)
   2725a:	4818      	ldr	r0, [pc, #96]	; (272bc <z_get_next_timeout_expiry+0x80>)
   2725c:	2381      	movs	r3, #129	; 0x81
   2725e:	f001 fc9c 	bl	28b9a <printk>
   27262:	4913      	ldr	r1, [pc, #76]	; (272b0 <z_get_next_timeout_expiry+0x74>)
   27264:	4816      	ldr	r0, [pc, #88]	; (272c0 <z_get_next_timeout_expiry+0x84>)
   27266:	f001 fc98 	bl	28b9a <printk>
   2726a:	4812      	ldr	r0, [pc, #72]	; (272b4 <z_get_next_timeout_expiry+0x78>)
   2726c:	2181      	movs	r1, #129	; 0x81
   2726e:	f001 fed5 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   27272:	480f      	ldr	r0, [pc, #60]	; (272b0 <z_get_next_timeout_expiry+0x74>)
   27274:	f7fc fdae 	bl	23dd4 <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
   27278:	f7ff fe78 	bl	26f6c <next_timeout>
   2727c:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2727e:	480c      	ldr	r0, [pc, #48]	; (272b0 <z_get_next_timeout_expiry+0x74>)
   27280:	f7fc fd98 	bl	23db4 <z_spin_unlock_valid>
   27284:	b968      	cbnz	r0, 272a2 <z_get_next_timeout_expiry+0x66>
   27286:	4a0b      	ldr	r2, [pc, #44]	; (272b4 <z_get_next_timeout_expiry+0x78>)
   27288:	490e      	ldr	r1, [pc, #56]	; (272c4 <z_get_next_timeout_expiry+0x88>)
   2728a:	480c      	ldr	r0, [pc, #48]	; (272bc <z_get_next_timeout_expiry+0x80>)
   2728c:	23ac      	movs	r3, #172	; 0xac
   2728e:	f001 fc84 	bl	28b9a <printk>
   27292:	4907      	ldr	r1, [pc, #28]	; (272b0 <z_get_next_timeout_expiry+0x74>)
   27294:	480c      	ldr	r0, [pc, #48]	; (272c8 <z_get_next_timeout_expiry+0x8c>)
   27296:	f001 fc80 	bl	28b9a <printk>
   2729a:	4806      	ldr	r0, [pc, #24]	; (272b4 <z_get_next_timeout_expiry+0x78>)
   2729c:	21ac      	movs	r1, #172	; 0xac
   2729e:	f001 febd 	bl	2901c <assert_post_action>
	__asm__ volatile(
   272a2:	f385 8811 	msr	BASEPRI, r5
   272a6:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
   272aa:	4620      	mov	r0, r4
   272ac:	bd38      	pop	{r3, r4, r5, pc}
   272ae:	bf00      	nop
   272b0:	20002a10 	.word	0x20002a10
   272b4:	0002e9fe 	.word	0x0002e9fe
   272b8:	0002ea50 	.word	0x0002ea50
   272bc:	0002e93e 	.word	0x0002e93e
   272c0:	0002ea65 	.word	0x0002ea65
   272c4:	0002ea24 	.word	0x0002ea24
   272c8:	0002ea3b 	.word	0x0002ea3b

000272cc <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
   272cc:	b570      	push	{r4, r5, r6, lr}
   272ce:	4604      	mov	r4, r0
   272d0:	460d      	mov	r5, r1
	__asm__ volatile(
   272d2:	f04f 0340 	mov.w	r3, #64	; 0x40
   272d6:	f3ef 8611 	mrs	r6, BASEPRI
   272da:	f383 8812 	msr	BASEPRI_MAX, r3
   272de:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   272e2:	481b      	ldr	r0, [pc, #108]	; (27350 <z_set_timeout_expiry+0x84>)
   272e4:	f7fc fd58 	bl	23d98 <z_spin_lock_valid>
   272e8:	b968      	cbnz	r0, 27306 <z_set_timeout_expiry+0x3a>
   272ea:	4a1a      	ldr	r2, [pc, #104]	; (27354 <z_set_timeout_expiry+0x88>)
   272ec:	491a      	ldr	r1, [pc, #104]	; (27358 <z_set_timeout_expiry+0x8c>)
   272ee:	481b      	ldr	r0, [pc, #108]	; (2735c <z_set_timeout_expiry+0x90>)
   272f0:	2381      	movs	r3, #129	; 0x81
   272f2:	f001 fc52 	bl	28b9a <printk>
   272f6:	4916      	ldr	r1, [pc, #88]	; (27350 <z_set_timeout_expiry+0x84>)
   272f8:	4819      	ldr	r0, [pc, #100]	; (27360 <z_set_timeout_expiry+0x94>)
   272fa:	f001 fc4e 	bl	28b9a <printk>
   272fe:	4815      	ldr	r0, [pc, #84]	; (27354 <z_set_timeout_expiry+0x88>)
   27300:	2181      	movs	r1, #129	; 0x81
   27302:	f001 fe8b 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   27306:	4812      	ldr	r0, [pc, #72]	; (27350 <z_set_timeout_expiry+0x84>)
   27308:	f7fc fd64 	bl	23dd4 <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
   2730c:	f7ff fe2e 	bl	26f6c <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   27310:	2801      	cmp	r0, #1
   27312:	dd05      	ble.n	27320 <z_set_timeout_expiry+0x54>
   27314:	42a0      	cmp	r0, r4
   27316:	db03      	blt.n	27320 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
   27318:	4629      	mov	r1, r5
   2731a:	4620      	mov	r0, r4
   2731c:	f7fa fc6a 	bl	21bf4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27320:	480b      	ldr	r0, [pc, #44]	; (27350 <z_set_timeout_expiry+0x84>)
   27322:	f7fc fd47 	bl	23db4 <z_spin_unlock_valid>
   27326:	b968      	cbnz	r0, 27344 <z_set_timeout_expiry+0x78>
   27328:	4a0a      	ldr	r2, [pc, #40]	; (27354 <z_set_timeout_expiry+0x88>)
   2732a:	490e      	ldr	r1, [pc, #56]	; (27364 <z_set_timeout_expiry+0x98>)
   2732c:	480b      	ldr	r0, [pc, #44]	; (2735c <z_set_timeout_expiry+0x90>)
   2732e:	23ac      	movs	r3, #172	; 0xac
   27330:	f001 fc33 	bl	28b9a <printk>
   27334:	4906      	ldr	r1, [pc, #24]	; (27350 <z_set_timeout_expiry+0x84>)
   27336:	480c      	ldr	r0, [pc, #48]	; (27368 <z_set_timeout_expiry+0x9c>)
   27338:	f001 fc2f 	bl	28b9a <printk>
   2733c:	4805      	ldr	r0, [pc, #20]	; (27354 <z_set_timeout_expiry+0x88>)
   2733e:	21ac      	movs	r1, #172	; 0xac
   27340:	f001 fe6c 	bl	2901c <assert_post_action>
	__asm__ volatile(
   27344:	f386 8811 	msr	BASEPRI, r6
   27348:	f3bf 8f6f 	isb	sy
		}
	}
}
   2734c:	bd70      	pop	{r4, r5, r6, pc}
   2734e:	bf00      	nop
   27350:	20002a10 	.word	0x20002a10
   27354:	0002e9fe 	.word	0x0002e9fe
   27358:	0002ea50 	.word	0x0002ea50
   2735c:	0002e93e 	.word	0x0002e93e
   27360:	0002ea65 	.word	0x0002ea65
   27364:	0002ea24 	.word	0x0002ea24
   27368:	0002ea3b 	.word	0x0002ea3b

0002736c <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
   2736c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27370:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   27372:	f7fe fd47 	bl	25e04 <z_time_slice>
	__asm__ volatile(
   27376:	f04f 0340 	mov.w	r3, #64	; 0x40
   2737a:	f3ef 8711 	mrs	r7, BASEPRI
   2737e:	f383 8812 	msr	BASEPRI_MAX, r3
   27382:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27386:	4855      	ldr	r0, [pc, #340]	; (274dc <sys_clock_announce+0x170>)
   27388:	f7fc fd06 	bl	23d98 <z_spin_lock_valid>
   2738c:	b968      	cbnz	r0, 273aa <sys_clock_announce+0x3e>
   2738e:	4a54      	ldr	r2, [pc, #336]	; (274e0 <sys_clock_announce+0x174>)
   27390:	4954      	ldr	r1, [pc, #336]	; (274e4 <sys_clock_announce+0x178>)
   27392:	4855      	ldr	r0, [pc, #340]	; (274e8 <sys_clock_announce+0x17c>)
   27394:	2381      	movs	r3, #129	; 0x81
   27396:	f001 fc00 	bl	28b9a <printk>
   2739a:	4950      	ldr	r1, [pc, #320]	; (274dc <sys_clock_announce+0x170>)
   2739c:	4853      	ldr	r0, [pc, #332]	; (274ec <sys_clock_announce+0x180>)
   2739e:	f001 fbfc 	bl	28b9a <printk>
   273a2:	484f      	ldr	r0, [pc, #316]	; (274e0 <sys_clock_announce+0x174>)
   273a4:	2181      	movs	r1, #129	; 0x81
   273a6:	f001 fe39 	bl	2901c <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   273aa:	4d51      	ldr	r5, [pc, #324]	; (274f0 <sys_clock_announce+0x184>)
   273ac:	4e51      	ldr	r6, [pc, #324]	; (274f4 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
   273ae:	484b      	ldr	r0, [pc, #300]	; (274dc <sys_clock_announce+0x170>)
	return list->head == list;
   273b0:	f8df a14c 	ldr.w	sl, [pc, #332]	; 27500 <sys_clock_announce+0x194>
   273b4:	f7fc fd0e 	bl	23dd4 <z_spin_lock_set_owner>
   273b8:	46b3      	mov	fp, r6
   273ba:	602c      	str	r4, [r5, #0]
   273bc:	e9d6 2300 	ldrd	r2, r3, [r6]
   273c0:	f8d5 c000 	ldr.w	ip, [r5]
   273c4:	f8da 4000 	ldr.w	r4, [sl]
   273c8:	e9cd 2300 	strd	r2, r3, [sp]
   273cc:	4662      	mov	r2, ip
   273ce:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   273d0:	4554      	cmp	r4, sl
   273d2:	46e0      	mov	r8, ip
   273d4:	4699      	mov	r9, r3
   273d6:	d00c      	beq.n	273f2 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
   273d8:	b15c      	cbz	r4, 273f2 <sys_clock_announce+0x86>
   273da:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
   273de:	458c      	cmp	ip, r1
   273e0:	eb79 0302 	sbcs.w	r3, r9, r2
   273e4:	da2e      	bge.n	27444 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   273e6:	ebb1 000c 	subs.w	r0, r1, ip
   273ea:	eb62 0109 	sbc.w	r1, r2, r9
   273ee:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
   273f2:	9a00      	ldr	r2, [sp, #0]
   273f4:	9901      	ldr	r1, [sp, #4]
   273f6:	eb18 0202 	adds.w	r2, r8, r2
   273fa:	464b      	mov	r3, r9
   273fc:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
   27400:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
   27402:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
   27406:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
   27408:	f7ff fdb0 	bl	26f6c <next_timeout>
   2740c:	4621      	mov	r1, r4
   2740e:	f7fa fbf1 	bl	21bf4 <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27412:	4832      	ldr	r0, [pc, #200]	; (274dc <sys_clock_announce+0x170>)
   27414:	f7fc fcce 	bl	23db4 <z_spin_unlock_valid>
   27418:	b968      	cbnz	r0, 27436 <sys_clock_announce+0xca>
   2741a:	4a31      	ldr	r2, [pc, #196]	; (274e0 <sys_clock_announce+0x174>)
   2741c:	4936      	ldr	r1, [pc, #216]	; (274f8 <sys_clock_announce+0x18c>)
   2741e:	4832      	ldr	r0, [pc, #200]	; (274e8 <sys_clock_announce+0x17c>)
   27420:	23ac      	movs	r3, #172	; 0xac
   27422:	f001 fbba 	bl	28b9a <printk>
   27426:	492d      	ldr	r1, [pc, #180]	; (274dc <sys_clock_announce+0x170>)
   27428:	4834      	ldr	r0, [pc, #208]	; (274fc <sys_clock_announce+0x190>)
   2742a:	f001 fbb6 	bl	28b9a <printk>
   2742e:	482c      	ldr	r0, [pc, #176]	; (274e0 <sys_clock_announce+0x174>)
   27430:	21ac      	movs	r1, #172	; 0xac
   27432:	f001 fdf3 	bl	2901c <assert_post_action>
	__asm__ volatile(
   27436:	f387 8811 	msr	BASEPRI, r7
   2743a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   2743e:	b003      	add	sp, #12
   27440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   27444:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
   27448:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
   2744c:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
   27450:	f04f 0200 	mov.w	r2, #0
   27454:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   27458:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
   2745c:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
   2745e:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
   27462:	4620      	mov	r0, r4
		curr_tick += dt;
   27464:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
   27468:	f7ff fdac 	bl	26fc4 <remove_timeout>
   2746c:	481b      	ldr	r0, [pc, #108]	; (274dc <sys_clock_announce+0x170>)
   2746e:	f7fc fca1 	bl	23db4 <z_spin_unlock_valid>
   27472:	b968      	cbnz	r0, 27490 <sys_clock_announce+0x124>
   27474:	4a1a      	ldr	r2, [pc, #104]	; (274e0 <sys_clock_announce+0x174>)
   27476:	4920      	ldr	r1, [pc, #128]	; (274f8 <sys_clock_announce+0x18c>)
   27478:	481b      	ldr	r0, [pc, #108]	; (274e8 <sys_clock_announce+0x17c>)
   2747a:	23ac      	movs	r3, #172	; 0xac
   2747c:	f001 fb8d 	bl	28b9a <printk>
   27480:	4916      	ldr	r1, [pc, #88]	; (274dc <sys_clock_announce+0x170>)
   27482:	481e      	ldr	r0, [pc, #120]	; (274fc <sys_clock_announce+0x190>)
   27484:	f001 fb89 	bl	28b9a <printk>
   27488:	4815      	ldr	r0, [pc, #84]	; (274e0 <sys_clock_announce+0x174>)
   2748a:	21ac      	movs	r1, #172	; 0xac
   2748c:	f001 fdc6 	bl	2901c <assert_post_action>
   27490:	f387 8811 	msr	BASEPRI, r7
   27494:	f3bf 8f6f 	isb	sy
		t->fn(t);
   27498:	68a3      	ldr	r3, [r4, #8]
   2749a:	4620      	mov	r0, r4
   2749c:	4798      	blx	r3
	__asm__ volatile(
   2749e:	f04f 0340 	mov.w	r3, #64	; 0x40
   274a2:	f3ef 8711 	mrs	r7, BASEPRI
   274a6:	f383 8812 	msr	BASEPRI_MAX, r3
   274aa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   274ae:	480b      	ldr	r0, [pc, #44]	; (274dc <sys_clock_announce+0x170>)
   274b0:	f7fc fc72 	bl	23d98 <z_spin_lock_valid>
   274b4:	b968      	cbnz	r0, 274d2 <sys_clock_announce+0x166>
   274b6:	4a0a      	ldr	r2, [pc, #40]	; (274e0 <sys_clock_announce+0x174>)
   274b8:	490a      	ldr	r1, [pc, #40]	; (274e4 <sys_clock_announce+0x178>)
   274ba:	480b      	ldr	r0, [pc, #44]	; (274e8 <sys_clock_announce+0x17c>)
   274bc:	2381      	movs	r3, #129	; 0x81
   274be:	f001 fb6c 	bl	28b9a <printk>
   274c2:	4906      	ldr	r1, [pc, #24]	; (274dc <sys_clock_announce+0x170>)
   274c4:	4809      	ldr	r0, [pc, #36]	; (274ec <sys_clock_announce+0x180>)
   274c6:	f001 fb68 	bl	28b9a <printk>
   274ca:	4805      	ldr	r0, [pc, #20]	; (274e0 <sys_clock_announce+0x174>)
   274cc:	2181      	movs	r1, #129	; 0x81
   274ce:	f001 fda5 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   274d2:	4802      	ldr	r0, [pc, #8]	; (274dc <sys_clock_announce+0x170>)
   274d4:	f7fc fc7e 	bl	23dd4 <z_spin_lock_set_owner>
	return k;
   274d8:	e770      	b.n	273bc <sys_clock_announce+0x50>
   274da:	bf00      	nop
   274dc:	20002a10 	.word	0x20002a10
   274e0:	0002e9fe 	.word	0x0002e9fe
   274e4:	0002ea50 	.word	0x0002ea50
   274e8:	0002e93e 	.word	0x0002e93e
   274ec:	0002ea65 	.word	0x0002ea65
   274f0:	20002a0c 	.word	0x20002a0c
   274f4:	20002238 	.word	0x20002238
   274f8:	0002ea24 	.word	0x0002ea24
   274fc:	0002ea3b 	.word	0x0002ea3b
   27500:	20000664 	.word	0x20000664

00027504 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
   27504:	b570      	push	{r4, r5, r6, lr}
   27506:	f04f 0340 	mov.w	r3, #64	; 0x40
   2750a:	f3ef 8611 	mrs	r6, BASEPRI
   2750e:	f383 8812 	msr	BASEPRI_MAX, r3
   27512:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27516:	481b      	ldr	r0, [pc, #108]	; (27584 <sys_clock_tick_get+0x80>)
   27518:	f7fc fc3e 	bl	23d98 <z_spin_lock_valid>
   2751c:	b968      	cbnz	r0, 2753a <sys_clock_tick_get+0x36>
   2751e:	4a1a      	ldr	r2, [pc, #104]	; (27588 <sys_clock_tick_get+0x84>)
   27520:	491a      	ldr	r1, [pc, #104]	; (2758c <sys_clock_tick_get+0x88>)
   27522:	481b      	ldr	r0, [pc, #108]	; (27590 <sys_clock_tick_get+0x8c>)
   27524:	2381      	movs	r3, #129	; 0x81
   27526:	f001 fb38 	bl	28b9a <printk>
   2752a:	4916      	ldr	r1, [pc, #88]	; (27584 <sys_clock_tick_get+0x80>)
   2752c:	4819      	ldr	r0, [pc, #100]	; (27594 <sys_clock_tick_get+0x90>)
   2752e:	f001 fb34 	bl	28b9a <printk>
   27532:	4815      	ldr	r0, [pc, #84]	; (27588 <sys_clock_tick_get+0x84>)
   27534:	2181      	movs	r1, #129	; 0x81
   27536:	f001 fd71 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   2753a:	4812      	ldr	r0, [pc, #72]	; (27584 <sys_clock_tick_get+0x80>)
   2753c:	f7fc fc4a 	bl	23dd4 <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
   27540:	f7fa fb88 	bl	21c54 <sys_clock_elapsed>
   27544:	4b14      	ldr	r3, [pc, #80]	; (27598 <sys_clock_tick_get+0x94>)
   27546:	e9d3 4500 	ldrd	r4, r5, [r3]
   2754a:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2754c:	480d      	ldr	r0, [pc, #52]	; (27584 <sys_clock_tick_get+0x80>)
   2754e:	f145 0500 	adc.w	r5, r5, #0
   27552:	f7fc fc2f 	bl	23db4 <z_spin_unlock_valid>
   27556:	b968      	cbnz	r0, 27574 <sys_clock_tick_get+0x70>
   27558:	4a0b      	ldr	r2, [pc, #44]	; (27588 <sys_clock_tick_get+0x84>)
   2755a:	4910      	ldr	r1, [pc, #64]	; (2759c <sys_clock_tick_get+0x98>)
   2755c:	480c      	ldr	r0, [pc, #48]	; (27590 <sys_clock_tick_get+0x8c>)
   2755e:	23ac      	movs	r3, #172	; 0xac
   27560:	f001 fb1b 	bl	28b9a <printk>
   27564:	4907      	ldr	r1, [pc, #28]	; (27584 <sys_clock_tick_get+0x80>)
   27566:	480e      	ldr	r0, [pc, #56]	; (275a0 <sys_clock_tick_get+0x9c>)
   27568:	f001 fb17 	bl	28b9a <printk>
   2756c:	4806      	ldr	r0, [pc, #24]	; (27588 <sys_clock_tick_get+0x84>)
   2756e:	21ac      	movs	r1, #172	; 0xac
   27570:	f001 fd54 	bl	2901c <assert_post_action>
	__asm__ volatile(
   27574:	f386 8811 	msr	BASEPRI, r6
   27578:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   2757c:	4620      	mov	r0, r4
   2757e:	4629      	mov	r1, r5
   27580:	bd70      	pop	{r4, r5, r6, pc}
   27582:	bf00      	nop
   27584:	20002a10 	.word	0x20002a10
   27588:	0002e9fe 	.word	0x0002e9fe
   2758c:	0002ea50 	.word	0x0002ea50
   27590:	0002e93e 	.word	0x0002e93e
   27594:	0002ea65 	.word	0x0002ea65
   27598:	20002238 	.word	0x20002238
   2759c:	0002ea24 	.word	0x0002ea24
   275a0:	0002ea3b 	.word	0x0002ea3b

000275a4 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   275a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   275a6:	4604      	mov	r4, r0
	__asm__ volatile(
   275a8:	f04f 0340 	mov.w	r3, #64	; 0x40
   275ac:	f3ef 8511 	mrs	r5, BASEPRI
   275b0:	f383 8812 	msr	BASEPRI_MAX, r3
   275b4:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   275b8:	484d      	ldr	r0, [pc, #308]	; (276f0 <z_timer_expiration_handler+0x14c>)
   275ba:	f7fc fbed 	bl	23d98 <z_spin_lock_valid>
   275be:	b968      	cbnz	r0, 275dc <z_timer_expiration_handler+0x38>
   275c0:	4a4c      	ldr	r2, [pc, #304]	; (276f4 <z_timer_expiration_handler+0x150>)
   275c2:	494d      	ldr	r1, [pc, #308]	; (276f8 <z_timer_expiration_handler+0x154>)
   275c4:	484d      	ldr	r0, [pc, #308]	; (276fc <z_timer_expiration_handler+0x158>)
   275c6:	2381      	movs	r3, #129	; 0x81
   275c8:	f001 fae7 	bl	28b9a <printk>
   275cc:	4948      	ldr	r1, [pc, #288]	; (276f0 <z_timer_expiration_handler+0x14c>)
   275ce:	484c      	ldr	r0, [pc, #304]	; (27700 <z_timer_expiration_handler+0x15c>)
   275d0:	f001 fae3 	bl	28b9a <printk>
   275d4:	4847      	ldr	r0, [pc, #284]	; (276f4 <z_timer_expiration_handler+0x150>)
   275d6:	2181      	movs	r1, #129	; 0x81
   275d8:	f001 fd20 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   275dc:	4844      	ldr	r0, [pc, #272]	; (276f0 <z_timer_expiration_handler+0x14c>)
   275de:	f7fc fbf9 	bl	23dd4 <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   275e2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   275e6:	1c56      	adds	r6, r2, #1
   275e8:	f143 0700 	adc.w	r7, r3, #0
   275ec:	2f00      	cmp	r7, #0
   275ee:	bf08      	it	eq
   275f0:	2e02      	cmpeq	r6, #2
   275f2:	d303      	bcc.n	275fc <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   275f4:	4943      	ldr	r1, [pc, #268]	; (27704 <z_timer_expiration_handler+0x160>)
   275f6:	4620      	mov	r0, r4
   275f8:	f7ff fcfe 	bl	26ff8 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   275fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
   275fe:	3301      	adds	r3, #1
   27600:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   27602:	6a23      	ldr	r3, [r4, #32]
   27604:	2b00      	cmp	r3, #0
   27606:	d035      	beq.n	27674 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27608:	4839      	ldr	r0, [pc, #228]	; (276f0 <z_timer_expiration_handler+0x14c>)
   2760a:	f7fc fbd3 	bl	23db4 <z_spin_unlock_valid>
   2760e:	b968      	cbnz	r0, 2762c <z_timer_expiration_handler+0x88>
   27610:	4a38      	ldr	r2, [pc, #224]	; (276f4 <z_timer_expiration_handler+0x150>)
   27612:	493d      	ldr	r1, [pc, #244]	; (27708 <z_timer_expiration_handler+0x164>)
   27614:	4839      	ldr	r0, [pc, #228]	; (276fc <z_timer_expiration_handler+0x158>)
   27616:	23ac      	movs	r3, #172	; 0xac
   27618:	f001 fabf 	bl	28b9a <printk>
   2761c:	4934      	ldr	r1, [pc, #208]	; (276f0 <z_timer_expiration_handler+0x14c>)
   2761e:	483b      	ldr	r0, [pc, #236]	; (2770c <z_timer_expiration_handler+0x168>)
   27620:	f001 fabb 	bl	28b9a <printk>
   27624:	4833      	ldr	r0, [pc, #204]	; (276f4 <z_timer_expiration_handler+0x150>)
   27626:	21ac      	movs	r1, #172	; 0xac
   27628:	f001 fcf8 	bl	2901c <assert_post_action>
	__asm__ volatile(
   2762c:	f385 8811 	msr	BASEPRI, r5
   27630:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
   27634:	6a23      	ldr	r3, [r4, #32]
   27636:	4620      	mov	r0, r4
   27638:	4798      	blx	r3
	__asm__ volatile(
   2763a:	f04f 0340 	mov.w	r3, #64	; 0x40
   2763e:	f3ef 8511 	mrs	r5, BASEPRI
   27642:	f383 8812 	msr	BASEPRI_MAX, r3
   27646:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   2764a:	4829      	ldr	r0, [pc, #164]	; (276f0 <z_timer_expiration_handler+0x14c>)
   2764c:	f7fc fba4 	bl	23d98 <z_spin_lock_valid>
   27650:	b968      	cbnz	r0, 2766e <z_timer_expiration_handler+0xca>
   27652:	4a28      	ldr	r2, [pc, #160]	; (276f4 <z_timer_expiration_handler+0x150>)
   27654:	4928      	ldr	r1, [pc, #160]	; (276f8 <z_timer_expiration_handler+0x154>)
   27656:	4829      	ldr	r0, [pc, #164]	; (276fc <z_timer_expiration_handler+0x158>)
   27658:	2381      	movs	r3, #129	; 0x81
   2765a:	f001 fa9e 	bl	28b9a <printk>
   2765e:	4924      	ldr	r1, [pc, #144]	; (276f0 <z_timer_expiration_handler+0x14c>)
   27660:	4827      	ldr	r0, [pc, #156]	; (27700 <z_timer_expiration_handler+0x15c>)
   27662:	f001 fa9a 	bl	28b9a <printk>
   27666:	4823      	ldr	r0, [pc, #140]	; (276f4 <z_timer_expiration_handler+0x150>)
   27668:	2181      	movs	r1, #129	; 0x81
   2766a:	f001 fcd7 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   2766e:	4820      	ldr	r0, [pc, #128]	; (276f0 <z_timer_expiration_handler+0x14c>)
   27670:	f7fc fbb0 	bl	23dd4 <z_spin_lock_set_owner>
	return list->head == list;
   27674:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27678:	42a6      	cmp	r6, r4
   2767a:	d000      	beq.n	2767e <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   2767c:	b9b6      	cbnz	r6, 276ac <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   2767e:	481c      	ldr	r0, [pc, #112]	; (276f0 <z_timer_expiration_handler+0x14c>)
   27680:	f7fc fb98 	bl	23db4 <z_spin_unlock_valid>
   27684:	b968      	cbnz	r0, 276a2 <z_timer_expiration_handler+0xfe>
   27686:	4a1b      	ldr	r2, [pc, #108]	; (276f4 <z_timer_expiration_handler+0x150>)
   27688:	491f      	ldr	r1, [pc, #124]	; (27708 <z_timer_expiration_handler+0x164>)
   2768a:	481c      	ldr	r0, [pc, #112]	; (276fc <z_timer_expiration_handler+0x158>)
   2768c:	23ac      	movs	r3, #172	; 0xac
   2768e:	f001 fa84 	bl	28b9a <printk>
   27692:	4917      	ldr	r1, [pc, #92]	; (276f0 <z_timer_expiration_handler+0x14c>)
   27694:	481d      	ldr	r0, [pc, #116]	; (2770c <z_timer_expiration_handler+0x168>)
   27696:	f001 fa80 	bl	28b9a <printk>
   2769a:	4816      	ldr	r0, [pc, #88]	; (276f4 <z_timer_expiration_handler+0x150>)
   2769c:	21ac      	movs	r1, #172	; 0xac
   2769e:	f001 fcbd 	bl	2901c <assert_post_action>
	__asm__ volatile(
   276a2:	f385 8811 	msr	BASEPRI, r5
   276a6:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
   276aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
   276ac:	4630      	mov	r0, r6
   276ae:	f7fe f98b 	bl	259c8 <z_unpend_thread_no_timeout>
   276b2:	2300      	movs	r3, #0
   276b4:	480e      	ldr	r0, [pc, #56]	; (276f0 <z_timer_expiration_handler+0x14c>)
   276b6:	f8c6 30b8 	str.w	r3, [r6, #184]	; 0xb8
   276ba:	f7fc fb7b 	bl	23db4 <z_spin_unlock_valid>
   276be:	b968      	cbnz	r0, 276dc <z_timer_expiration_handler+0x138>
   276c0:	4a0c      	ldr	r2, [pc, #48]	; (276f4 <z_timer_expiration_handler+0x150>)
   276c2:	4911      	ldr	r1, [pc, #68]	; (27708 <z_timer_expiration_handler+0x164>)
   276c4:	480d      	ldr	r0, [pc, #52]	; (276fc <z_timer_expiration_handler+0x158>)
   276c6:	23ac      	movs	r3, #172	; 0xac
   276c8:	f001 fa67 	bl	28b9a <printk>
   276cc:	4908      	ldr	r1, [pc, #32]	; (276f0 <z_timer_expiration_handler+0x14c>)
   276ce:	480f      	ldr	r0, [pc, #60]	; (2770c <z_timer_expiration_handler+0x168>)
   276d0:	f001 fa63 	bl	28b9a <printk>
   276d4:	4807      	ldr	r0, [pc, #28]	; (276f4 <z_timer_expiration_handler+0x150>)
   276d6:	21ac      	movs	r1, #172	; 0xac
   276d8:	f001 fca0 	bl	2901c <assert_post_action>
   276dc:	f385 8811 	msr	BASEPRI, r5
   276e0:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
   276e4:	4630      	mov	r0, r6
}
   276e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
   276ea:	f7fe bc55 	b.w	25f98 <z_ready_thread>
   276ee:	bf00      	nop
   276f0:	20002a14 	.word	0x20002a14
   276f4:	0002e9fe 	.word	0x0002e9fe
   276f8:	0002ea50 	.word	0x0002ea50
   276fc:	0002e93e 	.word	0x0002e93e
   27700:	0002ea65 	.word	0x0002ea65
   27704:	000275a5 	.word	0x000275a5
   27708:	0002ea24 	.word	0x0002ea24
   2770c:	0002ea3b 	.word	0x0002ea3b

00027710 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   27710:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   27714:	4619      	mov	r1, r3
   27716:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   27718:	1c4c      	adds	r4, r1, #1
{
   2771a:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2771c:	bf08      	it	eq
   2771e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   27722:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   27726:	4680      	mov	r8, r0
   27728:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2772a:	d04c      	beq.n	277c6 <z_impl_k_timer_start+0xb6>
   2772c:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   2772e:	1c6b      	adds	r3, r5, #1
   27730:	bf08      	it	eq
   27732:	f1b2 3fff 	cmpeq.w	r2, #4294967295
   27736:	4614      	mov	r4, r2
   27738:	d019      	beq.n	2776e <z_impl_k_timer_start+0x5e>
   2773a:	ea54 0305 	orrs.w	r3, r4, r5
   2773e:	d016      	beq.n	2776e <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
   27740:	f06f 0301 	mvn.w	r3, #1
   27744:	ebb3 0a02 	subs.w	sl, r3, r2
   27748:	f04f 33ff 	mov.w	r3, #4294967295
   2774c:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
   27750:	f1ba 0f00 	cmp.w	sl, #0
   27754:	f17b 0300 	sbcs.w	r3, fp, #0
   27758:	da09      	bge.n	2776e <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
   2775a:	f112 34ff 	adds.w	r4, r2, #4294967295
   2775e:	f145 35ff 	adc.w	r5, r5, #4294967295
   27762:	2c01      	cmp	r4, #1
   27764:	f175 0300 	sbcs.w	r3, r5, #0
   27768:	bfbc      	itt	lt
   2776a:	2401      	movlt	r4, #1
   2776c:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2776e:	f06f 0301 	mvn.w	r3, #1
   27772:	1a1b      	subs	r3, r3, r0
   27774:	9300      	str	r3, [sp, #0]
   27776:	f04f 33ff 	mov.w	r3, #4294967295
   2777a:	eb63 0301 	sbc.w	r3, r3, r1
   2777e:	9301      	str	r3, [sp, #4]
   27780:	e9dd 2300 	ldrd	r2, r3, [sp]
   27784:	2a00      	cmp	r2, #0
   27786:	f173 0300 	sbcs.w	r3, r3, #0
   2778a:	da0c      	bge.n	277a6 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
   2778c:	f110 38ff 	adds.w	r8, r0, #4294967295
   27790:	f141 39ff 	adc.w	r9, r1, #4294967295
   27794:	f1b8 0f00 	cmp.w	r8, #0
   27798:	f179 0300 	sbcs.w	r3, r9, #0
   2779c:	bfbc      	itt	lt
   2779e:	f04f 0800 	movlt.w	r8, #0
   277a2:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
   277a6:	4630      	mov	r0, r6
   277a8:	f7ff fcfa 	bl	271a0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   277ac:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   277ae:	4907      	ldr	r1, [pc, #28]	; (277cc <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
   277b0:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   277b2:	4642      	mov	r2, r8
   277b4:	464b      	mov	r3, r9
   277b6:	4630      	mov	r0, r6
	timer->period = period;
   277b8:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   277bc:	b002      	add	sp, #8
   277be:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   277c2:	f7ff bc19 	b.w	26ff8 <z_add_timeout>
}
   277c6:	b002      	add	sp, #8
   277c8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   277cc:	000275a5 	.word	0x000275a5

000277d0 <clear_event_registrations>:

/* must be called with interrupts locked */
static inline void clear_event_registrations(struct k_poll_event *events,
					      int num_events,
					      k_spinlock_key_t key)
{
   277d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   277d4:	2414      	movs	r4, #20
		__ASSERT(false, "invalid event type\n");
   277d6:	4d53      	ldr	r5, [pc, #332]	; (27924 <clear_event_registrations+0x154>)
   277d8:	f8df 918c 	ldr.w	r9, [pc, #396]	; 27968 <clear_event_registrations+0x198>
   277dc:	4e52      	ldr	r6, [pc, #328]	; (27928 <clear_event_registrations+0x158>)
{
   277de:	4680      	mov	r8, r0
   277e0:	4617      	mov	r7, r2
	while (num_events--) {
   277e2:	fb04 0401 	mla	r4, r4, r1, r0
   277e6:	45a0      	cmp	r8, r4
   277e8:	d101      	bne.n	277ee <clear_event_registrations+0x1e>
		clear_event_registration(&events[num_events]);
		k_spin_unlock(&lock, key);
		key = k_spin_lock(&lock);
	}
}
   277ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	event->poller = NULL;
   277ee:	2300      	movs	r3, #0
   277f0:	f844 3c0c 	str.w	r3, [r4, #-12]
	switch (event->type) {
   277f4:	f814 3c07 	ldrb.w	r3, [r4, #-7]
   277f8:	f003 031f 	and.w	r3, r3, #31
   277fc:	2b08      	cmp	r3, #8
   277fe:	d84f      	bhi.n	278a0 <clear_event_registrations+0xd0>
   27800:	e8df f003 	tbb	[pc, r3]
   27804:	4e05305b 	.word	0x4e05305b
   27808:	4e4e4e21 	.word	0x4e4e4e21
   2780c:	3f          	.byte	0x3f
   2780d:	00          	.byte	0x00
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   2780e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   27812:	b963      	cbnz	r3, 2782e <clear_event_registrations+0x5e>
   27814:	4945      	ldr	r1, [pc, #276]	; (2792c <clear_event_registrations+0x15c>)
   27816:	23a9      	movs	r3, #169	; 0xa9
   27818:	462a      	mov	r2, r5
   2781a:	4630      	mov	r0, r6
   2781c:	f001 f9bd 	bl	28b9a <printk>
   27820:	4843      	ldr	r0, [pc, #268]	; (27930 <clear_event_registrations+0x160>)
   27822:	f001 f9ba 	bl	28b9a <printk>
   27826:	21a9      	movs	r1, #169	; 0xa9
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   27828:	4628      	mov	r0, r5
   2782a:	f001 fbf7 	bl	2901c <assert_post_action>
	if (remove_event && sys_dnode_is_linked(&event->_node)) {
   2782e:	f854 3c14 	ldr.w	r3, [r4, #-20]
   27832:	2b00      	cmp	r3, #0
   27834:	d041      	beq.n	278ba <clear_event_registrations+0xea>
	sys_dnode_t *const prev = node->prev;
   27836:	f854 2c10 	ldr.w	r2, [r4, #-16]
	prev->next = next;
   2783a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2783c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2783e:	2300      	movs	r3, #0
	node->prev = NULL;
   27840:	e944 3305 	strd	r3, r3, [r4, #-20]
	sys_dnode_init(node);
}
   27844:	e039      	b.n	278ba <clear_event_registrations+0xea>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   27846:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2784a:	2b00      	cmp	r3, #0
   2784c:	d1ef      	bne.n	2782e <clear_event_registrations+0x5e>
   2784e:	4939      	ldr	r1, [pc, #228]	; (27934 <clear_event_registrations+0x164>)
   27850:	23ad      	movs	r3, #173	; 0xad
   27852:	462a      	mov	r2, r5
   27854:	4630      	mov	r0, r6
   27856:	f001 f9a0 	bl	28b9a <printk>
   2785a:	4837      	ldr	r0, [pc, #220]	; (27938 <clear_event_registrations+0x168>)
   2785c:	f001 f99d 	bl	28b9a <printk>
   27860:	21ad      	movs	r1, #173	; 0xad
   27862:	e7e1      	b.n	27828 <clear_event_registrations+0x58>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   27864:	f854 3c04 	ldr.w	r3, [r4, #-4]
   27868:	2b00      	cmp	r3, #0
   2786a:	d1e0      	bne.n	2782e <clear_event_registrations+0x5e>
   2786c:	4933      	ldr	r1, [pc, #204]	; (2793c <clear_event_registrations+0x16c>)
   2786e:	23b1      	movs	r3, #177	; 0xb1
   27870:	462a      	mov	r2, r5
   27872:	4630      	mov	r0, r6
   27874:	f001 f991 	bl	28b9a <printk>
   27878:	4831      	ldr	r0, [pc, #196]	; (27940 <clear_event_registrations+0x170>)
   2787a:	f001 f98e 	bl	28b9a <printk>
   2787e:	21b1      	movs	r1, #177	; 0xb1
   27880:	e7d2      	b.n	27828 <clear_event_registrations+0x58>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   27882:	f854 3c04 	ldr.w	r3, [r4, #-4]
   27886:	2b00      	cmp	r3, #0
   27888:	d1d1      	bne.n	2782e <clear_event_registrations+0x5e>
   2788a:	492e      	ldr	r1, [pc, #184]	; (27944 <clear_event_registrations+0x174>)
   2788c:	23b5      	movs	r3, #181	; 0xb5
   2788e:	462a      	mov	r2, r5
   27890:	4630      	mov	r0, r6
   27892:	f001 f982 	bl	28b9a <printk>
   27896:	482c      	ldr	r0, [pc, #176]	; (27948 <clear_event_registrations+0x178>)
   27898:	f001 f97f 	bl	28b9a <printk>
   2789c:	21b5      	movs	r1, #181	; 0xb5
   2789e:	e7c3      	b.n	27828 <clear_event_registrations+0x58>
		__ASSERT(false, "invalid event type\n");
   278a0:	4649      	mov	r1, r9
   278a2:	23bc      	movs	r3, #188	; 0xbc
   278a4:	462a      	mov	r2, r5
   278a6:	4630      	mov	r0, r6
   278a8:	f001 f977 	bl	28b9a <printk>
   278ac:	4827      	ldr	r0, [pc, #156]	; (2794c <clear_event_registrations+0x17c>)
   278ae:	f001 f974 	bl	28b9a <printk>
   278b2:	21bc      	movs	r1, #188	; 0xbc
   278b4:	4628      	mov	r0, r5
   278b6:	f001 fbb1 	bl	2901c <assert_post_action>
   278ba:	4825      	ldr	r0, [pc, #148]	; (27950 <clear_event_registrations+0x180>)
   278bc:	f7fc fa7a 	bl	23db4 <z_spin_unlock_valid>
   278c0:	b968      	cbnz	r0, 278de <clear_event_registrations+0x10e>
   278c2:	4a24      	ldr	r2, [pc, #144]	; (27954 <clear_event_registrations+0x184>)
   278c4:	4924      	ldr	r1, [pc, #144]	; (27958 <clear_event_registrations+0x188>)
   278c6:	23ac      	movs	r3, #172	; 0xac
   278c8:	4630      	mov	r0, r6
   278ca:	f001 f966 	bl	28b9a <printk>
   278ce:	4920      	ldr	r1, [pc, #128]	; (27950 <clear_event_registrations+0x180>)
   278d0:	4822      	ldr	r0, [pc, #136]	; (2795c <clear_event_registrations+0x18c>)
   278d2:	f001 f962 	bl	28b9a <printk>
   278d6:	481f      	ldr	r0, [pc, #124]	; (27954 <clear_event_registrations+0x184>)
   278d8:	21ac      	movs	r1, #172	; 0xac
   278da:	f001 fb9f 	bl	2901c <assert_post_action>
   278de:	f387 8811 	msr	BASEPRI, r7
   278e2:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   278e6:	f04f 0340 	mov.w	r3, #64	; 0x40
   278ea:	f3ef 8711 	mrs	r7, BASEPRI
   278ee:	f383 8812 	msr	BASEPRI_MAX, r3
   278f2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   278f6:	4816      	ldr	r0, [pc, #88]	; (27950 <clear_event_registrations+0x180>)
   278f8:	f7fc fa4e 	bl	23d98 <z_spin_lock_valid>
   278fc:	b968      	cbnz	r0, 2791a <clear_event_registrations+0x14a>
   278fe:	4a15      	ldr	r2, [pc, #84]	; (27954 <clear_event_registrations+0x184>)
   27900:	4917      	ldr	r1, [pc, #92]	; (27960 <clear_event_registrations+0x190>)
   27902:	2381      	movs	r3, #129	; 0x81
   27904:	4630      	mov	r0, r6
   27906:	f001 f948 	bl	28b9a <printk>
   2790a:	4911      	ldr	r1, [pc, #68]	; (27950 <clear_event_registrations+0x180>)
   2790c:	4815      	ldr	r0, [pc, #84]	; (27964 <clear_event_registrations+0x194>)
   2790e:	f001 f944 	bl	28b9a <printk>
   27912:	4810      	ldr	r0, [pc, #64]	; (27954 <clear_event_registrations+0x184>)
   27914:	2181      	movs	r1, #129	; 0x81
   27916:	f001 fb81 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   2791a:	480d      	ldr	r0, [pc, #52]	; (27950 <clear_event_registrations+0x180>)
   2791c:	f7fc fa5a 	bl	23dd4 <z_spin_lock_set_owner>
	return k;
   27920:	3c14      	subs	r4, #20
   27922:	e760      	b.n	277e6 <clear_event_registrations+0x16>
   27924:	0003428b 	.word	0x0003428b
   27928:	0002e93e 	.word	0x0002e93e
   2792c:	000342ac 	.word	0x000342ac
   27930:	000342c6 	.word	0x000342c6
   27934:	000342db 	.word	0x000342db
   27938:	000342f7 	.word	0x000342f7
   2793c:	00034308 	.word	0x00034308
   27940:	00034325 	.word	0x00034325
   27944:	0003433c 	.word	0x0003433c
   27948:	00034357 	.word	0x00034357
   2794c:	00034370 	.word	0x00034370
   27950:	20002a18 	.word	0x20002a18
   27954:	0002e9fe 	.word	0x0002e9fe
   27958:	0002ea24 	.word	0x0002ea24
   2795c:	0002ea3b 	.word	0x0002ea3b
   27960:	0002ea50 	.word	0x0002ea50
   27964:	0002ea65 	.word	0x0002ea65
   27968:	00034515 	.word	0x00034515

0002796c <register_events>:

static inline int register_events(struct k_poll_event *events,
				  int num_events,
				  struct z_poller *poller,
				  bool just_check)
{
   2796c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	int events_registered = 0;

	for (int ii = 0; ii < num_events; ii++) {
   27970:	2700      	movs	r7, #0
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27972:	4e7c      	ldr	r6, [pc, #496]	; (27b64 <register_events+0x1f8>)
   27974:	f8df 8230 	ldr.w	r8, [pc, #560]	; 27ba8 <register_events+0x23c>
   27978:	f8df a230 	ldr.w	sl, [pc, #560]	; 27bac <register_events+0x240>
{
   2797c:	9100      	str	r1, [sp, #0]
   2797e:	4615      	mov	r5, r2
   27980:	9301      	str	r3, [sp, #4]
   27982:	4604      	mov	r4, r0
	int events_registered = 0;
   27984:	46b9      	mov	r9, r7
	for (int ii = 0; ii < num_events; ii++) {
   27986:	9b00      	ldr	r3, [sp, #0]
   27988:	429f      	cmp	r7, r3
   2798a:	db03      	blt.n	27994 <register_events+0x28>
		}
		k_spin_unlock(&lock, key);
	}

	return events_registered;
}
   2798c:	4648      	mov	r0, r9
   2798e:	b003      	add	sp, #12
   27990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27994:	f04f 0340 	mov.w	r3, #64	; 0x40
   27998:	f3ef 8b11 	mrs	fp, BASEPRI
   2799c:	f383 8812 	msr	BASEPRI_MAX, r3
   279a0:	f3bf 8f6f 	isb	sy
   279a4:	4630      	mov	r0, r6
   279a6:	f7fc f9f7 	bl	23d98 <z_spin_lock_valid>
   279aa:	b968      	cbnz	r0, 279c8 <register_events+0x5c>
   279ac:	486e      	ldr	r0, [pc, #440]	; (27b68 <register_events+0x1fc>)
   279ae:	2381      	movs	r3, #129	; 0x81
   279b0:	4642      	mov	r2, r8
   279b2:	4651      	mov	r1, sl
   279b4:	f001 f8f1 	bl	28b9a <printk>
   279b8:	486c      	ldr	r0, [pc, #432]	; (27b6c <register_events+0x200>)
   279ba:	4631      	mov	r1, r6
   279bc:	f001 f8ed 	bl	28b9a <printk>
   279c0:	2181      	movs	r1, #129	; 0x81
   279c2:	4640      	mov	r0, r8
   279c4:	f001 fb2a 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   279c8:	4630      	mov	r0, r6
   279ca:	f7fc fa03 	bl	23dd4 <z_spin_lock_set_owner>
	switch (event->type) {
   279ce:	7b63      	ldrb	r3, [r4, #13]
   279d0:	f003 031f 	and.w	r3, r3, #31
   279d4:	2b08      	cmp	r3, #8
   279d6:	d84f      	bhi.n	27a78 <register_events+0x10c>
   279d8:	e8df f003 	tbb	[pc, r3]
   279dc:	4e054230 	.word	0x4e054230
   279e0:	4e4e4e2c 	.word	0x4e4e4e2c
   279e4:	48          	.byte	0x48
   279e5:	00          	.byte	0x00
		if (k_sem_count_get(event->sem) > 0U) {
   279e6:	6923      	ldr	r3, [r4, #16]
   279e8:	689b      	ldr	r3, [r3, #8]
   279ea:	b33b      	cbz	r3, 27a3c <register_events+0xd0>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   279ec:	2302      	movs	r3, #2
	event->state |= state;
   279ee:	68e2      	ldr	r2, [r4, #12]
   279f0:	f3c2 3045 	ubfx	r0, r2, #13, #6
   279f4:	4303      	orrs	r3, r0
	event->poller = NULL;
   279f6:	2100      	movs	r1, #0
	event->state |= state;
   279f8:	f363 3252 	bfi	r2, r3, #13, #6
	event->poller = NULL;
   279fc:	60a1      	str	r1, [r4, #8]
	event->state |= state;
   279fe:	60e2      	str	r2, [r4, #12]
			poller->is_polling = false;
   27a00:	7029      	strb	r1, [r5, #0]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27a02:	4630      	mov	r0, r6
   27a04:	f7fc f9d6 	bl	23db4 <z_spin_unlock_valid>
   27a08:	b968      	cbnz	r0, 27a26 <register_events+0xba>
   27a0a:	4959      	ldr	r1, [pc, #356]	; (27b70 <register_events+0x204>)
   27a0c:	4856      	ldr	r0, [pc, #344]	; (27b68 <register_events+0x1fc>)
   27a0e:	23ac      	movs	r3, #172	; 0xac
   27a10:	4642      	mov	r2, r8
   27a12:	f001 f8c2 	bl	28b9a <printk>
   27a16:	4857      	ldr	r0, [pc, #348]	; (27b74 <register_events+0x208>)
   27a18:	4631      	mov	r1, r6
   27a1a:	f001 f8be 	bl	28b9a <printk>
   27a1e:	21ac      	movs	r1, #172	; 0xac
   27a20:	4640      	mov	r0, r8
   27a22:	f001 fafb 	bl	2901c <assert_post_action>
	__asm__ volatile(
   27a26:	f38b 8811 	msr	BASEPRI, fp
   27a2a:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   27a2e:	3701      	adds	r7, #1
   27a30:	3414      	adds	r4, #20
   27a32:	e7a8      	b.n	27986 <register_events+0x1a>
		if (!k_queue_is_empty(event->queue)) {
   27a34:	6923      	ldr	r3, [r4, #16]
   27a36:	681b      	ldr	r3, [r3, #0]
   27a38:	2b00      	cmp	r3, #0
   27a3a:	d12e      	bne.n	27a9a <register_events+0x12e>
		} else if (!just_check && poller->is_polling) {
   27a3c:	9b01      	ldr	r3, [sp, #4]
   27a3e:	2b00      	cmp	r3, #0
   27a40:	d1df      	bne.n	27a02 <register_events+0x96>
   27a42:	782b      	ldrb	r3, [r5, #0]
   27a44:	2b00      	cmp	r3, #0
   27a46:	d0dc      	beq.n	27a02 <register_events+0x96>
	switch (event->type) {
   27a48:	7b63      	ldrb	r3, [r4, #13]
   27a4a:	f003 031f 	and.w	r3, r3, #31
   27a4e:	2b08      	cmp	r3, #8
   27a50:	d879      	bhi.n	27b46 <register_events+0x1da>
   27a52:	e8df f003 	tbb	[pc, r3]
   27a56:	5139      	.short	0x5139
   27a58:	783d7824 	.word	0x783d7824
   27a5c:	7878      	.short	0x7878
   27a5e:	64          	.byte	0x64
   27a5f:	00          	.byte	0x00
		if (event->signal->signaled != 0U) {
   27a60:	6923      	ldr	r3, [r4, #16]
   27a62:	689b      	ldr	r3, [r3, #8]
   27a64:	2b00      	cmp	r3, #0
   27a66:	d0e9      	beq.n	27a3c <register_events+0xd0>
			*state = K_POLL_STATE_SIGNALED;
   27a68:	2301      	movs	r3, #1
   27a6a:	e7c0      	b.n	279ee <register_events+0x82>
		if (event->msgq->used_msgs > 0) {
   27a6c:	6923      	ldr	r3, [r4, #16]
   27a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   27a70:	2b00      	cmp	r3, #0
   27a72:	d0e3      	beq.n	27a3c <register_events+0xd0>
			*state = K_POLL_STATE_MSGQ_DATA_AVAILABLE;
   27a74:	2310      	movs	r3, #16
   27a76:	e7ba      	b.n	279ee <register_events+0x82>
		__ASSERT(false, "invalid event type (0x%x)\n", event->type);
   27a78:	4a3f      	ldr	r2, [pc, #252]	; (27b78 <register_events+0x20c>)
   27a7a:	4940      	ldr	r1, [pc, #256]	; (27b7c <register_events+0x210>)
   27a7c:	483a      	ldr	r0, [pc, #232]	; (27b68 <register_events+0x1fc>)
   27a7e:	235c      	movs	r3, #92	; 0x5c
   27a80:	f001 f88b 	bl	28b9a <printk>
   27a84:	7b61      	ldrb	r1, [r4, #13]
   27a86:	483e      	ldr	r0, [pc, #248]	; (27b80 <register_events+0x214>)
   27a88:	f001 011f 	and.w	r1, r1, #31
   27a8c:	f001 f885 	bl	28b9a <printk>
   27a90:	4839      	ldr	r0, [pc, #228]	; (27b78 <register_events+0x20c>)
   27a92:	215c      	movs	r1, #92	; 0x5c
   27a94:	f001 fac2 	bl	2901c <assert_post_action>
		break;
   27a98:	e7d0      	b.n	27a3c <register_events+0xd0>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27a9a:	2304      	movs	r3, #4
   27a9c:	e7a7      	b.n	279ee <register_events+0x82>
		__ASSERT(event->sem != NULL, "invalid semaphore\n");
   27a9e:	6923      	ldr	r3, [r4, #16]
   27aa0:	b963      	cbnz	r3, 27abc <register_events+0x150>
   27aa2:	4938      	ldr	r1, [pc, #224]	; (27b84 <register_events+0x218>)
   27aa4:	4a34      	ldr	r2, [pc, #208]	; (27b78 <register_events+0x20c>)
   27aa6:	4830      	ldr	r0, [pc, #192]	; (27b68 <register_events+0x1fc>)
   27aa8:	2386      	movs	r3, #134	; 0x86
   27aaa:	f001 f876 	bl	28b9a <printk>
   27aae:	4836      	ldr	r0, [pc, #216]	; (27b88 <register_events+0x21c>)
   27ab0:	f001 f873 	bl	28b9a <printk>
   27ab4:	4830      	ldr	r0, [pc, #192]	; (27b78 <register_events+0x20c>)
   27ab6:	2186      	movs	r1, #134	; 0x86
   27ab8:	f001 fab0 	bl	2901c <assert_post_action>
		add_event(&event->sem->poll_events, event, poller);
   27abc:	6920      	ldr	r0, [r4, #16]
   27abe:	462a      	mov	r2, r5
   27ac0:	4621      	mov	r1, r4
   27ac2:	3010      	adds	r0, #16
		add_event(&event->queue->poll_events, event, poller);
   27ac4:	f005 f830 	bl	2cb28 <add_event>
	event->poller = poller;
   27ac8:	60a5      	str	r5, [r4, #8]
			events_registered += 1;
   27aca:	f109 0901 	add.w	r9, r9, #1
   27ace:	e798      	b.n	27a02 <register_events+0x96>
		__ASSERT(event->queue != NULL, "invalid queue\n");
   27ad0:	6923      	ldr	r3, [r4, #16]
   27ad2:	b963      	cbnz	r3, 27aee <register_events+0x182>
   27ad4:	492d      	ldr	r1, [pc, #180]	; (27b8c <register_events+0x220>)
   27ad6:	4a28      	ldr	r2, [pc, #160]	; (27b78 <register_events+0x20c>)
   27ad8:	4823      	ldr	r0, [pc, #140]	; (27b68 <register_events+0x1fc>)
   27ada:	238a      	movs	r3, #138	; 0x8a
   27adc:	f001 f85d 	bl	28b9a <printk>
   27ae0:	482b      	ldr	r0, [pc, #172]	; (27b90 <register_events+0x224>)
   27ae2:	f001 f85a 	bl	28b9a <printk>
   27ae6:	4824      	ldr	r0, [pc, #144]	; (27b78 <register_events+0x20c>)
   27ae8:	218a      	movs	r1, #138	; 0x8a
   27aea:	f001 fa97 	bl	2901c <assert_post_action>
		add_event(&event->queue->poll_events, event, poller);
   27aee:	6920      	ldr	r0, [r4, #16]
   27af0:	462a      	mov	r2, r5
   27af2:	4621      	mov	r1, r4
   27af4:	3014      	adds	r0, #20
   27af6:	e7e5      	b.n	27ac4 <register_events+0x158>
		__ASSERT(event->signal != NULL, "invalid poll signal\n");
   27af8:	6923      	ldr	r3, [r4, #16]
   27afa:	b963      	cbnz	r3, 27b16 <register_events+0x1aa>
   27afc:	4925      	ldr	r1, [pc, #148]	; (27b94 <register_events+0x228>)
   27afe:	4a1e      	ldr	r2, [pc, #120]	; (27b78 <register_events+0x20c>)
   27b00:	4819      	ldr	r0, [pc, #100]	; (27b68 <register_events+0x1fc>)
   27b02:	238e      	movs	r3, #142	; 0x8e
   27b04:	f001 f849 	bl	28b9a <printk>
   27b08:	4823      	ldr	r0, [pc, #140]	; (27b98 <register_events+0x22c>)
   27b0a:	f001 f846 	bl	28b9a <printk>
   27b0e:	481a      	ldr	r0, [pc, #104]	; (27b78 <register_events+0x20c>)
   27b10:	218e      	movs	r1, #142	; 0x8e
   27b12:	f001 fa83 	bl	2901c <assert_post_action>
		add_event(&event->signal->poll_events, event, poller);
   27b16:	6920      	ldr	r0, [r4, #16]
   27b18:	462a      	mov	r2, r5
   27b1a:	4621      	mov	r1, r4
   27b1c:	e7d2      	b.n	27ac4 <register_events+0x158>
		__ASSERT(event->msgq != NULL, "invalid message queue\n");
   27b1e:	6923      	ldr	r3, [r4, #16]
   27b20:	b963      	cbnz	r3, 27b3c <register_events+0x1d0>
   27b22:	491e      	ldr	r1, [pc, #120]	; (27b9c <register_events+0x230>)
   27b24:	4a14      	ldr	r2, [pc, #80]	; (27b78 <register_events+0x20c>)
   27b26:	4810      	ldr	r0, [pc, #64]	; (27b68 <register_events+0x1fc>)
   27b28:	2392      	movs	r3, #146	; 0x92
   27b2a:	f001 f836 	bl	28b9a <printk>
   27b2e:	481c      	ldr	r0, [pc, #112]	; (27ba0 <register_events+0x234>)
   27b30:	f001 f833 	bl	28b9a <printk>
   27b34:	4810      	ldr	r0, [pc, #64]	; (27b78 <register_events+0x20c>)
   27b36:	2192      	movs	r1, #146	; 0x92
   27b38:	f001 fa70 	bl	2901c <assert_post_action>
		add_event(&event->msgq->poll_events, event, poller);
   27b3c:	6920      	ldr	r0, [r4, #16]
   27b3e:	462a      	mov	r2, r5
   27b40:	4621      	mov	r1, r4
   27b42:	3028      	adds	r0, #40	; 0x28
   27b44:	e7be      	b.n	27ac4 <register_events+0x158>
		__ASSERT(false, "invalid event type\n");
   27b46:	4a0c      	ldr	r2, [pc, #48]	; (27b78 <register_events+0x20c>)
   27b48:	490c      	ldr	r1, [pc, #48]	; (27b7c <register_events+0x210>)
   27b4a:	4807      	ldr	r0, [pc, #28]	; (27b68 <register_events+0x1fc>)
   27b4c:	2399      	movs	r3, #153	; 0x99
   27b4e:	f001 f824 	bl	28b9a <printk>
   27b52:	4814      	ldr	r0, [pc, #80]	; (27ba4 <register_events+0x238>)
   27b54:	f001 f821 	bl	28b9a <printk>
   27b58:	4807      	ldr	r0, [pc, #28]	; (27b78 <register_events+0x20c>)
   27b5a:	2199      	movs	r1, #153	; 0x99
   27b5c:	f001 fa5e 	bl	2901c <assert_post_action>
		break;
   27b60:	e7b2      	b.n	27ac8 <register_events+0x15c>
   27b62:	bf00      	nop
   27b64:	20002a18 	.word	0x20002a18
   27b68:	0002e93e 	.word	0x0002e93e
   27b6c:	0002ea65 	.word	0x0002ea65
   27b70:	0002ea24 	.word	0x0002ea24
   27b74:	0002ea3b 	.word	0x0002ea3b
   27b78:	0003428b 	.word	0x0003428b
   27b7c:	00034515 	.word	0x00034515
   27b80:	00034386 	.word	0x00034386
   27b84:	000342ac 	.word	0x000342ac
   27b88:	000342c6 	.word	0x000342c6
   27b8c:	000342db 	.word	0x000342db
   27b90:	000342f7 	.word	0x000342f7
   27b94:	00034308 	.word	0x00034308
   27b98:	00034325 	.word	0x00034325
   27b9c:	0003433c 	.word	0x0003433c
   27ba0:	00034357 	.word	0x00034357
   27ba4:	00034370 	.word	0x00034370
   27ba8:	0002e9fe 	.word	0x0002e9fe
   27bac:	0002ea50 	.word	0x0002ea50

00027bb0 <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
   27bb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   27bb4:	6884      	ldr	r4, [r0, #8]
{
   27bb6:	4605      	mov	r5, r0
   27bb8:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
   27bba:	b1d4      	cbz	r4, 27bf2 <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
   27bbc:	7863      	ldrb	r3, [r4, #1]
   27bbe:	2b01      	cmp	r3, #1
   27bc0:	d14b      	bne.n	27c5a <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
   27bc2:	f1b4 0768 	subs.w	r7, r4, #104	; 0x68
   27bc6:	d10e      	bne.n	27be6 <signal_poll_event+0x36>
   27bc8:	4a30      	ldr	r2, [pc, #192]	; (27c8c <signal_poll_event+0xdc>)
   27bca:	4931      	ldr	r1, [pc, #196]	; (27c90 <signal_poll_event+0xe0>)
   27bcc:	4831      	ldr	r0, [pc, #196]	; (27c94 <signal_poll_event+0xe4>)
   27bce:	23f9      	movs	r3, #249	; 0xf9
   27bd0:	f000 ffe3 	bl	28b9a <printk>
   27bd4:	4830      	ldr	r0, [pc, #192]	; (27c98 <signal_poll_event+0xe8>)
   27bd6:	f000 ffe0 	bl	28b9a <printk>
   27bda:	482c      	ldr	r0, [pc, #176]	; (27c8c <signal_poll_event+0xdc>)
   27bdc:	21f9      	movs	r1, #249	; 0xf9
   27bde:	f001 fa1d 	bl	2901c <assert_post_action>
	if (!z_is_thread_pending(thread)) {
   27be2:	7b7b      	ldrb	r3, [r7, #13]
   27be4:	deff      	udf	#255	; 0xff
   27be6:	f814 3c5b 	ldrb.w	r3, [r4, #-91]
   27bea:	f013 0302 	ands.w	r3, r3, #2
   27bee:	d10a      	bne.n	27c06 <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
   27bf0:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   27bf2:	68eb      	ldr	r3, [r5, #12]
   27bf4:	f3c3 3145 	ubfx	r1, r3, #13, #6
   27bf8:	430e      	orrs	r6, r1
	event->poller = NULL;
   27bfa:	2000      	movs	r0, #0
	event->state |= state;
   27bfc:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
   27c00:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   27c02:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
   27c04:	e00d      	b.n	27c22 <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
   27c06:	e954 2310 	ldrd	r2, r3, [r4, #-64]	; 0x40
   27c0a:	f04f 31ff 	mov.w	r1, #4294967295
   27c0e:	f06f 0001 	mvn.w	r0, #1
   27c12:	428b      	cmp	r3, r1
   27c14:	bf08      	it	eq
   27c16:	4282      	cmpeq	r2, r0
   27c18:	d105      	bne.n	27c26 <signal_poll_event+0x76>
		poller->is_polling = false;
   27c1a:	2300      	movs	r3, #0
   27c1c:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   27c1e:	f06f 000a 	mvn.w	r0, #10
}
   27c22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
   27c26:	4638      	mov	r0, r7
   27c28:	f7fe f812 	bl	25c50 <z_unpend_thread>
	arch_thread_return_value_set(thread,
   27c2c:	2e08      	cmp	r6, #8
   27c2e:	bf0c      	ite	eq
   27c30:	f06f 0303 	mvneq.w	r3, #3
   27c34:	2300      	movne	r3, #0
   27c36:	6523      	str	r3, [r4, #80]	; 0x50
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27c38:	f814 3c5b 	ldrb.w	r3, [r4, #-91]
   27c3c:	06db      	lsls	r3, r3, #27
   27c3e:	d104      	bne.n	27c4a <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
   27c40:	f854 8c50 	ldr.w	r8, [r4, #-80]
   27c44:	f1b8 0f00 	cmp.w	r8, #0
   27c48:	d001      	beq.n	27c4e <signal_poll_event+0x9e>
		poller->is_polling = false;
   27c4a:	2300      	movs	r3, #0
   27c4c:	e7d0      	b.n	27bf0 <signal_poll_event+0x40>
	z_ready_thread(thread);
   27c4e:	4638      	mov	r0, r7
   27c50:	f7fe f9a2 	bl	25f98 <z_ready_thread>
		poller->is_polling = false;
   27c54:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   27c58:	e7cb      	b.n	27bf2 <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
   27c5a:	2b02      	cmp	r3, #2
   27c5c:	d1f5      	bne.n	27c4a <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   27c5e:	7823      	ldrb	r3, [r4, #0]
   27c60:	2b00      	cmp	r3, #0
   27c62:	d0c6      	beq.n	27bf2 <signal_poll_event+0x42>
   27c64:	f854 7c04 	ldr.w	r7, [r4, #-4]
   27c68:	b177      	cbz	r7, 27c88 <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
   27c6a:	f1a4 0914 	sub.w	r9, r4, #20
   27c6e:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
   27c72:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   27c76:	f7ff fa93 	bl	271a0 <z_abort_timeout>
		twork->poll_result = 0;
   27c7a:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
   27c7e:	4649      	mov	r1, r9
   27c80:	4638      	mov	r0, r7
   27c82:	f7fd fb2b 	bl	252dc <k_work_submit_to_queue>
   27c86:	e7e5      	b.n	27c54 <signal_poll_event+0xa4>
		poller->is_polling = false;
   27c88:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   27c8a:	e7b2      	b.n	27bf2 <signal_poll_event+0x42>
   27c8c:	0003428b 	.word	0x0003428b
   27c90:	000343a3 	.word	0x000343a3
   27c94:	0002e93e 	.word	0x0002e93e
   27c98:	000343b9 	.word	0x000343b9

00027c9c <k_poll_event_init>:
{
   27c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27c9e:	4605      	mov	r5, r0
   27ca0:	460f      	mov	r7, r1
   27ca2:	461e      	mov	r6, r3
	__ASSERT(mode == K_POLL_MODE_NOTIFY_ONLY,
   27ca4:	4614      	mov	r4, r2
   27ca6:	b162      	cbz	r2, 27cc2 <k_poll_event_init+0x26>
   27ca8:	491b      	ldr	r1, [pc, #108]	; (27d18 <k_poll_event_init+0x7c>)
   27caa:	4a1c      	ldr	r2, [pc, #112]	; (27d1c <k_poll_event_init+0x80>)
   27cac:	481c      	ldr	r0, [pc, #112]	; (27d20 <k_poll_event_init+0x84>)
   27cae:	232d      	movs	r3, #45	; 0x2d
   27cb0:	f000 ff73 	bl	28b9a <printk>
   27cb4:	481b      	ldr	r0, [pc, #108]	; (27d24 <k_poll_event_init+0x88>)
   27cb6:	f000 ff70 	bl	28b9a <printk>
   27cba:	4818      	ldr	r0, [pc, #96]	; (27d1c <k_poll_event_init+0x80>)
   27cbc:	212d      	movs	r1, #45	; 0x2d
   27cbe:	f001 f9ad 	bl	2901c <assert_post_action>
	__ASSERT(type < (BIT(_POLL_NUM_TYPES)), "invalid type\n");
   27cc2:	2f1f      	cmp	r7, #31
   27cc4:	d90c      	bls.n	27ce0 <k_poll_event_init+0x44>
   27cc6:	4918      	ldr	r1, [pc, #96]	; (27d28 <k_poll_event_init+0x8c>)
   27cc8:	4a14      	ldr	r2, [pc, #80]	; (27d1c <k_poll_event_init+0x80>)
   27cca:	4815      	ldr	r0, [pc, #84]	; (27d20 <k_poll_event_init+0x84>)
   27ccc:	232f      	movs	r3, #47	; 0x2f
   27cce:	f000 ff64 	bl	28b9a <printk>
   27cd2:	4816      	ldr	r0, [pc, #88]	; (27d2c <k_poll_event_init+0x90>)
   27cd4:	f000 ff61 	bl	28b9a <printk>
   27cd8:	4810      	ldr	r0, [pc, #64]	; (27d1c <k_poll_event_init+0x80>)
   27cda:	212f      	movs	r1, #47	; 0x2f
   27cdc:	f001 f99e 	bl	2901c <assert_post_action>
	__ASSERT(obj != NULL, "must provide an object\n");
   27ce0:	b966      	cbnz	r6, 27cfc <k_poll_event_init+0x60>
   27ce2:	4913      	ldr	r1, [pc, #76]	; (27d30 <k_poll_event_init+0x94>)
   27ce4:	4a0d      	ldr	r2, [pc, #52]	; (27d1c <k_poll_event_init+0x80>)
   27ce6:	480e      	ldr	r0, [pc, #56]	; (27d20 <k_poll_event_init+0x84>)
   27ce8:	2330      	movs	r3, #48	; 0x30
   27cea:	f000 ff56 	bl	28b9a <printk>
   27cee:	4811      	ldr	r0, [pc, #68]	; (27d34 <k_poll_event_init+0x98>)
   27cf0:	f000 ff53 	bl	28b9a <printk>
   27cf4:	4809      	ldr	r0, [pc, #36]	; (27d1c <k_poll_event_init+0x80>)
   27cf6:	2130      	movs	r1, #48	; 0x30
   27cf8:	f001 f990 	bl	2901c <assert_post_action>
	event->poller = NULL;
   27cfc:	2300      	movs	r3, #0
	event->type = type;
   27cfe:	04e4      	lsls	r4, r4, #19
   27d00:	023f      	lsls	r7, r7, #8
	event->poller = NULL;
   27d02:	60ab      	str	r3, [r5, #8]
	event->type = type;
   27d04:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
   27d08:	7b2b      	ldrb	r3, [r5, #12]
   27d0a:	f407 57f8 	and.w	r7, r7, #7936	; 0x1f00
   27d0e:	433c      	orrs	r4, r7
   27d10:	431c      	orrs	r4, r3
	event->obj = obj;
   27d12:	e9c5 4603 	strd	r4, r6, [r5, #12]
}
   27d16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27d18:	000343d8 	.word	0x000343d8
   27d1c:	0003428b 	.word	0x0003428b
   27d20:	0002e93e 	.word	0x0002e93e
   27d24:	000343f8 	.word	0x000343f8
   27d28:	0003441e 	.word	0x0003441e
   27d2c:	00034442 	.word	0x00034442
   27d30:	00034452 	.word	0x00034452
   27d34:	00034465 	.word	0x00034465

00027d38 <z_impl_k_poll>:
{
   27d38:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   27d3c:	461f      	mov	r7, r3
	struct z_poller *poller = &_current->poller;
   27d3e:	4b75      	ldr	r3, [pc, #468]	; (27f14 <z_impl_k_poll+0x1dc>)
   27d40:	689d      	ldr	r5, [r3, #8]
	poller->is_polling = true;
   27d42:	2301      	movs	r3, #1
{
   27d44:	4604      	mov	r4, r0
   27d46:	4688      	mov	r8, r1
   27d48:	4616      	mov	r6, r2
	struct z_poller *poller = &_current->poller;
   27d4a:	f105 0968 	add.w	r9, r5, #104	; 0x68
	poller->is_polling = true;
   27d4e:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
	poller->mode = MODE_POLL;
   27d52:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   27d56:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
   27d5a:	b173      	cbz	r3, 27d7a <z_impl_k_poll+0x42>
   27d5c:	496e      	ldr	r1, [pc, #440]	; (27f18 <z_impl_k_poll+0x1e0>)
   27d5e:	4a6f      	ldr	r2, [pc, #444]	; (27f1c <z_impl_k_poll+0x1e4>)
   27d60:	486f      	ldr	r0, [pc, #444]	; (27f20 <z_impl_k_poll+0x1e8>)
   27d62:	f44f 738d 	mov.w	r3, #282	; 0x11a
   27d66:	f000 ff18 	bl	28b9a <printk>
   27d6a:	486e      	ldr	r0, [pc, #440]	; (27f24 <z_impl_k_poll+0x1ec>)
   27d6c:	f000 ff15 	bl	28b9a <printk>
   27d70:	486a      	ldr	r0, [pc, #424]	; (27f1c <z_impl_k_poll+0x1e4>)
   27d72:	f44f 718d 	mov.w	r1, #282	; 0x11a
   27d76:	f001 f951 	bl	2901c <assert_post_action>
	__ASSERT(events != NULL, "NULL events\n");
   27d7a:	b974      	cbnz	r4, 27d9a <z_impl_k_poll+0x62>
   27d7c:	496a      	ldr	r1, [pc, #424]	; (27f28 <z_impl_k_poll+0x1f0>)
   27d7e:	4a67      	ldr	r2, [pc, #412]	; (27f1c <z_impl_k_poll+0x1e4>)
   27d80:	4867      	ldr	r0, [pc, #412]	; (27f20 <z_impl_k_poll+0x1e8>)
   27d82:	f240 131b 	movw	r3, #283	; 0x11b
   27d86:	f000 ff08 	bl	28b9a <printk>
   27d8a:	4868      	ldr	r0, [pc, #416]	; (27f2c <z_impl_k_poll+0x1f4>)
   27d8c:	f000 ff05 	bl	28b9a <printk>
   27d90:	4862      	ldr	r0, [pc, #392]	; (27f1c <z_impl_k_poll+0x1e4>)
   27d92:	f240 111b 	movw	r1, #283	; 0x11b
   27d96:	f001 f941 	bl	2901c <assert_post_action>
	__ASSERT(num_events >= 0, "<0 events\n");
   27d9a:	f1b8 0f00 	cmp.w	r8, #0
   27d9e:	da0e      	bge.n	27dbe <z_impl_k_poll+0x86>
   27da0:	4963      	ldr	r1, [pc, #396]	; (27f30 <z_impl_k_poll+0x1f8>)
   27da2:	4a5e      	ldr	r2, [pc, #376]	; (27f1c <z_impl_k_poll+0x1e4>)
   27da4:	485e      	ldr	r0, [pc, #376]	; (27f20 <z_impl_k_poll+0x1e8>)
   27da6:	f44f 738e 	mov.w	r3, #284	; 0x11c
   27daa:	f000 fef6 	bl	28b9a <printk>
   27dae:	4861      	ldr	r0, [pc, #388]	; (27f34 <z_impl_k_poll+0x1fc>)
   27db0:	f000 fef3 	bl	28b9a <printk>
   27db4:	4859      	ldr	r0, [pc, #356]	; (27f1c <z_impl_k_poll+0x1e4>)
   27db6:	f44f 718e 	mov.w	r1, #284	; 0x11c
   27dba:	f001 f92f 	bl	2901c <assert_post_action>
	events_registered = register_events(events, num_events, poller,
   27dbe:	ea56 0307 	orrs.w	r3, r6, r7
   27dc2:	bf0c      	ite	eq
   27dc4:	2301      	moveq	r3, #1
   27dc6:	2300      	movne	r3, #0
   27dc8:	4641      	mov	r1, r8
   27dca:	464a      	mov	r2, r9
   27dcc:	4620      	mov	r0, r4
   27dce:	f7ff fdcd 	bl	2796c <register_events>
   27dd2:	4680      	mov	r8, r0
	__asm__ volatile(
   27dd4:	f04f 0340 	mov.w	r3, #64	; 0x40
   27dd8:	f3ef 8911 	mrs	r9, BASEPRI
   27ddc:	f383 8812 	msr	BASEPRI_MAX, r3
   27de0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27de4:	4854      	ldr	r0, [pc, #336]	; (27f38 <z_impl_k_poll+0x200>)
   27de6:	f7fb ffd7 	bl	23d98 <z_spin_lock_valid>
   27dea:	b968      	cbnz	r0, 27e08 <z_impl_k_poll+0xd0>
   27dec:	4a53      	ldr	r2, [pc, #332]	; (27f3c <z_impl_k_poll+0x204>)
   27dee:	4954      	ldr	r1, [pc, #336]	; (27f40 <z_impl_k_poll+0x208>)
   27df0:	484b      	ldr	r0, [pc, #300]	; (27f20 <z_impl_k_poll+0x1e8>)
   27df2:	2381      	movs	r3, #129	; 0x81
   27df4:	f000 fed1 	bl	28b9a <printk>
   27df8:	494f      	ldr	r1, [pc, #316]	; (27f38 <z_impl_k_poll+0x200>)
   27dfa:	4852      	ldr	r0, [pc, #328]	; (27f44 <z_impl_k_poll+0x20c>)
   27dfc:	f000 fecd 	bl	28b9a <printk>
   27e00:	484e      	ldr	r0, [pc, #312]	; (27f3c <z_impl_k_poll+0x204>)
   27e02:	2181      	movs	r1, #129	; 0x81
   27e04:	f001 f90a 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   27e08:	484b      	ldr	r0, [pc, #300]	; (27f38 <z_impl_k_poll+0x200>)
   27e0a:	f7fb ffe3 	bl	23dd4 <z_spin_lock_set_owner>
	if (!poller->is_polling) {
   27e0e:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
   27e12:	b9fb      	cbnz	r3, 27e54 <z_impl_k_poll+0x11c>
		clear_event_registrations(events, events_registered, key);
   27e14:	4620      	mov	r0, r4
   27e16:	464a      	mov	r2, r9
   27e18:	4641      	mov	r1, r8
   27e1a:	f7ff fcd9 	bl	277d0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27e1e:	4846      	ldr	r0, [pc, #280]	; (27f38 <z_impl_k_poll+0x200>)
   27e20:	f7fb ffc8 	bl	23db4 <z_spin_unlock_valid>
   27e24:	b968      	cbnz	r0, 27e42 <z_impl_k_poll+0x10a>
   27e26:	4a45      	ldr	r2, [pc, #276]	; (27f3c <z_impl_k_poll+0x204>)
   27e28:	4947      	ldr	r1, [pc, #284]	; (27f48 <z_impl_k_poll+0x210>)
   27e2a:	483d      	ldr	r0, [pc, #244]	; (27f20 <z_impl_k_poll+0x1e8>)
   27e2c:	23ac      	movs	r3, #172	; 0xac
   27e2e:	f000 feb4 	bl	28b9a <printk>
   27e32:	4941      	ldr	r1, [pc, #260]	; (27f38 <z_impl_k_poll+0x200>)
   27e34:	4845      	ldr	r0, [pc, #276]	; (27f4c <z_impl_k_poll+0x214>)
   27e36:	f000 feb0 	bl	28b9a <printk>
   27e3a:	4840      	ldr	r0, [pc, #256]	; (27f3c <z_impl_k_poll+0x204>)
   27e3c:	21ac      	movs	r1, #172	; 0xac
   27e3e:	f001 f8ed 	bl	2901c <assert_post_action>
	__asm__ volatile(
   27e42:	f389 8811 	msr	BASEPRI, r9
   27e46:	f3bf 8f6f 	isb	sy
		return 0;
   27e4a:	2500      	movs	r5, #0
}
   27e4c:	4628      	mov	r0, r5
   27e4e:	b003      	add	sp, #12
   27e50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller->is_polling = false;
   27e54:	2300      	movs	r3, #0
   27e56:	f885 3068 	strb.w	r3, [r5, #104]	; 0x68
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   27e5a:	ea56 0307 	orrs.w	r3, r6, r7
   27e5e:	d118      	bne.n	27e92 <z_impl_k_poll+0x15a>
   27e60:	4835      	ldr	r0, [pc, #212]	; (27f38 <z_impl_k_poll+0x200>)
   27e62:	f7fb ffa7 	bl	23db4 <z_spin_unlock_valid>
   27e66:	b968      	cbnz	r0, 27e84 <z_impl_k_poll+0x14c>
   27e68:	4a34      	ldr	r2, [pc, #208]	; (27f3c <z_impl_k_poll+0x204>)
   27e6a:	4937      	ldr	r1, [pc, #220]	; (27f48 <z_impl_k_poll+0x210>)
   27e6c:	482c      	ldr	r0, [pc, #176]	; (27f20 <z_impl_k_poll+0x1e8>)
   27e6e:	23ac      	movs	r3, #172	; 0xac
   27e70:	f000 fe93 	bl	28b9a <printk>
   27e74:	4930      	ldr	r1, [pc, #192]	; (27f38 <z_impl_k_poll+0x200>)
   27e76:	4835      	ldr	r0, [pc, #212]	; (27f4c <z_impl_k_poll+0x214>)
   27e78:	f000 fe8f 	bl	28b9a <printk>
   27e7c:	482f      	ldr	r0, [pc, #188]	; (27f3c <z_impl_k_poll+0x204>)
   27e7e:	21ac      	movs	r1, #172	; 0xac
   27e80:	f001 f8cc 	bl	2901c <assert_post_action>
   27e84:	f389 8811 	msr	BASEPRI, r9
   27e88:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   27e8c:	f06f 050a 	mvn.w	r5, #10
   27e90:	e7dc      	b.n	27e4c <z_impl_k_poll+0x114>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   27e92:	e9cd 6700 	strd	r6, r7, [sp]
   27e96:	4a2e      	ldr	r2, [pc, #184]	; (27f50 <z_impl_k_poll+0x218>)
   27e98:	4827      	ldr	r0, [pc, #156]	; (27f38 <z_impl_k_poll+0x200>)
   27e9a:	4649      	mov	r1, r9
   27e9c:	f7fe fa2e 	bl	262fc <z_pend_curr>
   27ea0:	4605      	mov	r5, r0
	__asm__ volatile(
   27ea2:	f04f 0340 	mov.w	r3, #64	; 0x40
   27ea6:	f3ef 8611 	mrs	r6, BASEPRI
   27eaa:	f383 8812 	msr	BASEPRI_MAX, r3
   27eae:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27eb2:	4821      	ldr	r0, [pc, #132]	; (27f38 <z_impl_k_poll+0x200>)
   27eb4:	f7fb ff70 	bl	23d98 <z_spin_lock_valid>
   27eb8:	b968      	cbnz	r0, 27ed6 <z_impl_k_poll+0x19e>
   27eba:	4a20      	ldr	r2, [pc, #128]	; (27f3c <z_impl_k_poll+0x204>)
   27ebc:	4920      	ldr	r1, [pc, #128]	; (27f40 <z_impl_k_poll+0x208>)
   27ebe:	4818      	ldr	r0, [pc, #96]	; (27f20 <z_impl_k_poll+0x1e8>)
   27ec0:	2381      	movs	r3, #129	; 0x81
   27ec2:	f000 fe6a 	bl	28b9a <printk>
   27ec6:	491c      	ldr	r1, [pc, #112]	; (27f38 <z_impl_k_poll+0x200>)
   27ec8:	481e      	ldr	r0, [pc, #120]	; (27f44 <z_impl_k_poll+0x20c>)
   27eca:	f000 fe66 	bl	28b9a <printk>
   27ece:	481b      	ldr	r0, [pc, #108]	; (27f3c <z_impl_k_poll+0x204>)
   27ed0:	2181      	movs	r1, #129	; 0x81
   27ed2:	f001 f8a3 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   27ed6:	4818      	ldr	r0, [pc, #96]	; (27f38 <z_impl_k_poll+0x200>)
   27ed8:	f7fb ff7c 	bl	23dd4 <z_spin_lock_set_owner>
	clear_event_registrations(events, events_registered, key);
   27edc:	4620      	mov	r0, r4
   27ede:	4632      	mov	r2, r6
   27ee0:	4641      	mov	r1, r8
   27ee2:	f7ff fc75 	bl	277d0 <clear_event_registrations>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27ee6:	4814      	ldr	r0, [pc, #80]	; (27f38 <z_impl_k_poll+0x200>)
   27ee8:	f7fb ff64 	bl	23db4 <z_spin_unlock_valid>
   27eec:	b968      	cbnz	r0, 27f0a <z_impl_k_poll+0x1d2>
   27eee:	4a13      	ldr	r2, [pc, #76]	; (27f3c <z_impl_k_poll+0x204>)
   27ef0:	4915      	ldr	r1, [pc, #84]	; (27f48 <z_impl_k_poll+0x210>)
   27ef2:	480b      	ldr	r0, [pc, #44]	; (27f20 <z_impl_k_poll+0x1e8>)
   27ef4:	23ac      	movs	r3, #172	; 0xac
   27ef6:	f000 fe50 	bl	28b9a <printk>
   27efa:	490f      	ldr	r1, [pc, #60]	; (27f38 <z_impl_k_poll+0x200>)
   27efc:	4813      	ldr	r0, [pc, #76]	; (27f4c <z_impl_k_poll+0x214>)
   27efe:	f000 fe4c 	bl	28b9a <printk>
   27f02:	480e      	ldr	r0, [pc, #56]	; (27f3c <z_impl_k_poll+0x204>)
   27f04:	21ac      	movs	r1, #172	; 0xac
   27f06:	f001 f889 	bl	2901c <assert_post_action>
	__asm__ volatile(
   27f0a:	f386 8811 	msr	BASEPRI, r6
   27f0e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   27f12:	e79b      	b.n	27e4c <z_impl_k_poll+0x114>
   27f14:	20001f98 	.word	0x20001f98
   27f18:	00033e49 	.word	0x00033e49
   27f1c:	0003428b 	.word	0x0003428b
   27f20:	0002e93e 	.word	0x0002e93e
   27f24:	00033299 	.word	0x00033299
   27f28:	0003447f 	.word	0x0003447f
   27f2c:	00034495 	.word	0x00034495
   27f30:	000344a4 	.word	0x000344a4
   27f34:	000344b4 	.word	0x000344b4
   27f38:	20002a18 	.word	0x20002a18
   27f3c:	0002e9fe 	.word	0x0002e9fe
   27f40:	0002ea50 	.word	0x0002ea50
   27f44:	0002ea65 	.word	0x0002ea65
   27f48:	0002ea24 	.word	0x0002ea24
   27f4c:	0002ea3b 	.word	0x0002ea3b
   27f50:	2000066c 	.word	0x2000066c

00027f54 <z_impl_k_poll_signal_raise>:
{
   27f54:	b570      	push	{r4, r5, r6, lr}
   27f56:	4604      	mov	r4, r0
   27f58:	460d      	mov	r5, r1
	__asm__ volatile(
   27f5a:	f04f 0340 	mov.w	r3, #64	; 0x40
   27f5e:	f3ef 8611 	mrs	r6, BASEPRI
   27f62:	f383 8812 	msr	BASEPRI_MAX, r3
   27f66:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
   27f6a:	4821      	ldr	r0, [pc, #132]	; (27ff0 <z_impl_k_poll_signal_raise+0x9c>)
   27f6c:	f7fb ff14 	bl	23d98 <z_spin_lock_valid>
   27f70:	b968      	cbnz	r0, 27f8e <z_impl_k_poll_signal_raise+0x3a>
   27f72:	4a20      	ldr	r2, [pc, #128]	; (27ff4 <z_impl_k_poll_signal_raise+0xa0>)
   27f74:	4920      	ldr	r1, [pc, #128]	; (27ff8 <z_impl_k_poll_signal_raise+0xa4>)
   27f76:	4821      	ldr	r0, [pc, #132]	; (27ffc <z_impl_k_poll_signal_raise+0xa8>)
   27f78:	2381      	movs	r3, #129	; 0x81
   27f7a:	f000 fe0e 	bl	28b9a <printk>
   27f7e:	491c      	ldr	r1, [pc, #112]	; (27ff0 <z_impl_k_poll_signal_raise+0x9c>)
   27f80:	481f      	ldr	r0, [pc, #124]	; (28000 <z_impl_k_poll_signal_raise+0xac>)
   27f82:	f000 fe0a 	bl	28b9a <printk>
   27f86:	481b      	ldr	r0, [pc, #108]	; (27ff4 <z_impl_k_poll_signal_raise+0xa0>)
   27f88:	2181      	movs	r1, #129	; 0x81
   27f8a:	f001 f847 	bl	2901c <assert_post_action>
	z_spin_lock_set_owner(l);
   27f8e:	4818      	ldr	r0, [pc, #96]	; (27ff0 <z_impl_k_poll_signal_raise+0x9c>)
   27f90:	f7fb ff20 	bl	23dd4 <z_spin_lock_set_owner>
	return list->head == list;
   27f94:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
   27f96:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
   27f98:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   27f9a:	4284      	cmp	r4, r0
   27f9c:	60a1      	str	r1, [r4, #8]
   27f9e:	d117      	bne.n	27fd0 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
   27fa0:	4813      	ldr	r0, [pc, #76]	; (27ff0 <z_impl_k_poll_signal_raise+0x9c>)
   27fa2:	f7fb ff07 	bl	23db4 <z_spin_unlock_valid>
   27fa6:	b968      	cbnz	r0, 27fc4 <z_impl_k_poll_signal_raise+0x70>
   27fa8:	4a12      	ldr	r2, [pc, #72]	; (27ff4 <z_impl_k_poll_signal_raise+0xa0>)
   27faa:	4916      	ldr	r1, [pc, #88]	; (28004 <z_impl_k_poll_signal_raise+0xb0>)
   27fac:	4813      	ldr	r0, [pc, #76]	; (27ffc <z_impl_k_poll_signal_raise+0xa8>)
   27fae:	23ac      	movs	r3, #172	; 0xac
   27fb0:	f000 fdf3 	bl	28b9a <printk>
   27fb4:	490e      	ldr	r1, [pc, #56]	; (27ff0 <z_impl_k_poll_signal_raise+0x9c>)
   27fb6:	4814      	ldr	r0, [pc, #80]	; (28008 <z_impl_k_poll_signal_raise+0xb4>)
   27fb8:	f000 fdef 	bl	28b9a <printk>
   27fbc:	480d      	ldr	r0, [pc, #52]	; (27ff4 <z_impl_k_poll_signal_raise+0xa0>)
   27fbe:	21ac      	movs	r1, #172	; 0xac
   27fc0:	f001 f82c 	bl	2901c <assert_post_action>
	__asm__ volatile(
   27fc4:	f386 8811 	msr	BASEPRI, r6
   27fc8:	f3bf 8f6f 	isb	sy
		return 0;
   27fcc:	2400      	movs	r4, #0
   27fce:	e00d      	b.n	27fec <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
   27fd0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   27fd4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   27fd6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27fd8:	2300      	movs	r3, #0
	node->prev = NULL;
   27fda:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   27fde:	f7ff fde7 	bl	27bb0 <signal_poll_event>
	z_reschedule(&lock, key);
   27fe2:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   27fe4:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   27fe6:	4802      	ldr	r0, [pc, #8]	; (27ff0 <z_impl_k_poll_signal_raise+0x9c>)
   27fe8:	f7fd fd36 	bl	25a58 <z_reschedule>
}
   27fec:	4620      	mov	r0, r4
   27fee:	bd70      	pop	{r4, r5, r6, pc}
   27ff0:	20002a18 	.word	0x20002a18
   27ff4:	0002e9fe 	.word	0x0002e9fe
   27ff8:	0002ea50 	.word	0x0002ea50
   27ffc:	0002e93e 	.word	0x0002e93e
   28000:	0002ea65 	.word	0x0002ea65
   28004:	0002ea24 	.word	0x0002ea24
   28008:	0002ea3b 	.word	0x0002ea3b

0002800c <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   2800c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2800e:	4606      	mov	r6, r0
   28010:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   28012:	f004 fc35 	bl	2c880 <k_is_in_isr>
   28016:	b988      	cbnz	r0, 2803c <z_thread_aligned_alloc+0x30>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   28018:	4b15      	ldr	r3, [pc, #84]	; (28070 <z_thread_aligned_alloc+0x64>)
   2801a:	689b      	ldr	r3, [r3, #8]
   2801c:	f8d3 40b0 	ldr.w	r4, [r3, #176]	; 0xb0
	}

	if (heap != NULL) {
   28020:	b31c      	cbz	r4, 2806a <z_thread_aligned_alloc+0x5e>
	return c < a;
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	size_t c = a + b;
   28022:	2204      	movs	r2, #4
   28024:	18aa      	adds	r2, r5, r2
   28026:	d209      	bcs.n	2803c <z_thread_aligned_alloc+0x30>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   28028:	2000      	movs	r0, #0
   2802a:	2100      	movs	r1, #0
   2802c:	e9cd 0100 	strd	r0, r1, [sp]
   28030:	f046 0104 	orr.w	r1, r6, #4
   28034:	4620      	mov	r0, r4
   28036:	f7fb fc57 	bl	238e8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   2803a:	b908      	cbnz	r0, 28040 <z_thread_aligned_alloc+0x34>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   2803c:	2400      	movs	r4, #0
	}

	return ret;
   2803e:	e014      	b.n	2806a <z_thread_aligned_alloc+0x5e>
	*heap_ref = heap;
   28040:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   28042:	1d04      	adds	r4, r0, #4
	__ASSERT(align == 0 || ((uintptr_t)mem & (align - 1)) == 0,
   28044:	b18e      	cbz	r6, 2806a <z_thread_aligned_alloc+0x5e>
   28046:	1e73      	subs	r3, r6, #1
   28048:	421c      	tst	r4, r3
   2804a:	d00e      	beq.n	2806a <z_thread_aligned_alloc+0x5e>
   2804c:	4a09      	ldr	r2, [pc, #36]	; (28074 <z_thread_aligned_alloc+0x68>)
   2804e:	490a      	ldr	r1, [pc, #40]	; (28078 <z_thread_aligned_alloc+0x6c>)
   28050:	480a      	ldr	r0, [pc, #40]	; (2807c <z_thread_aligned_alloc+0x70>)
   28052:	2325      	movs	r3, #37	; 0x25
   28054:	f000 fda1 	bl	28b9a <printk>
   28058:	4809      	ldr	r0, [pc, #36]	; (28080 <z_thread_aligned_alloc+0x74>)
   2805a:	4621      	mov	r1, r4
   2805c:	4632      	mov	r2, r6
   2805e:	f000 fd9c 	bl	28b9a <printk>
   28062:	4804      	ldr	r0, [pc, #16]	; (28074 <z_thread_aligned_alloc+0x68>)
   28064:	2125      	movs	r1, #37	; 0x25
   28066:	f000 ffd9 	bl	2901c <assert_post_action>
}
   2806a:	4620      	mov	r0, r4
   2806c:	b002      	add	sp, #8
   2806e:	bd70      	pop	{r4, r5, r6, pc}
   28070:	20001f98 	.word	0x20001f98
   28074:	000344c1 	.word	0x000344c1
   28078:	000344e5 	.word	0x000344e5
   2807c:	0002e93e 	.word	0x0002e93e
   28080:	00034517 	.word	0x00034517

00028084 <gmtime_r>:
   28084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28088:	e9d0 6700 	ldrd	r6, r7, [r0]
   2808c:	460c      	mov	r4, r1
   2808e:	4a51      	ldr	r2, [pc, #324]	; (281d4 <gmtime_r+0x150>)
   28090:	2300      	movs	r3, #0
   28092:	4630      	mov	r0, r6
   28094:	4639      	mov	r1, r7
   28096:	f7d8 f883 	bl	1a0 <__aeabi_ldivmod>
   2809a:	4639      	mov	r1, r7
   2809c:	4605      	mov	r5, r0
   2809e:	4a4d      	ldr	r2, [pc, #308]	; (281d4 <gmtime_r+0x150>)
   280a0:	4630      	mov	r0, r6
   280a2:	2300      	movs	r3, #0
   280a4:	f7d8 f87c 	bl	1a0 <__aeabi_ldivmod>
   280a8:	2a00      	cmp	r2, #0
   280aa:	bfbc      	itt	lt
   280ac:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
   280b0:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
   280b4:	f44f 6161 	mov.w	r1, #3600	; 0xe10
   280b8:	f505 202f 	add.w	r0, r5, #716800	; 0xaf000
   280bc:	fbb2 f3f1 	udiv	r3, r2, r1
   280c0:	fb01 2213 	mls	r2, r1, r3, r2
   280c4:	f04f 013c 	mov.w	r1, #60	; 0x3c
   280c8:	bfac      	ite	ge
   280ca:	f600 206c 	addwge	r0, r0, #2668	; 0xa6c
   280ce:	f600 206b 	addwlt	r0, r0, #2667	; 0xa6b
   280d2:	60a3      	str	r3, [r4, #8]
   280d4:	fbb2 f3f1 	udiv	r3, r2, r1
   280d8:	fb01 2213 	mls	r2, r1, r3, r2
   280dc:	6063      	str	r3, [r4, #4]
   280de:	6022      	str	r2, [r4, #0]
   280e0:	1cc3      	adds	r3, r0, #3
   280e2:	2207      	movs	r2, #7
   280e4:	fb93 f2f2 	sdiv	r2, r3, r2
   280e8:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
   280ec:	1a9b      	subs	r3, r3, r2
   280ee:	bf48      	it	mi
   280f0:	3307      	addmi	r3, #7
   280f2:	2800      	cmp	r0, #0
   280f4:	61a3      	str	r3, [r4, #24]
   280f6:	bfb8      	it	lt
   280f8:	f5a0 330e 	sublt.w	r3, r0, #145408	; 0x23800
   280fc:	4936      	ldr	r1, [pc, #216]	; (281d8 <gmtime_r+0x154>)
   280fe:	bfae      	itee	ge
   28100:	fb90 f1f1 	sdivge	r1, r0, r1
   28104:	f5a3 732c 	sublt.w	r3, r3, #688	; 0x2b0
   28108:	fb93 f1f1 	sdivlt	r1, r3, r1
   2810c:	4b33      	ldr	r3, [pc, #204]	; (281dc <gmtime_r+0x158>)
   2810e:	fb03 0001 	mla	r0, r3, r1, r0
   28112:	f648 62ac 	movw	r2, #36524	; 0x8eac
   28116:	fbb0 f2f2 	udiv	r2, r0, r2
   2811a:	4402      	add	r2, r0
   2811c:	f240 5cb4 	movw	ip, #1460	; 0x5b4
   28120:	fbb0 f3fc 	udiv	r3, r0, ip
   28124:	1ad2      	subs	r2, r2, r3
   28126:	f240 176d 	movw	r7, #365	; 0x16d
   2812a:	4b2d      	ldr	r3, [pc, #180]	; (281e0 <gmtime_r+0x15c>)
   2812c:	fbb0 f3f3 	udiv	r3, r0, r3
   28130:	2664      	movs	r6, #100	; 0x64
   28132:	1ad3      	subs	r3, r2, r3
   28134:	fbb3 f5f7 	udiv	r5, r3, r7
   28138:	fbb3 f3fc 	udiv	r3, r3, ip
   2813c:	fbb5 f2f6 	udiv	r2, r5, r6
   28140:	1ad3      	subs	r3, r2, r3
   28142:	4403      	add	r3, r0
   28144:	fb07 3315 	mls	r3, r7, r5, r3
   28148:	2099      	movs	r0, #153	; 0x99
   2814a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   2814e:	f10c 0c02 	add.w	ip, ip, #2
   28152:	f103 0e01 	add.w	lr, r3, #1
   28156:	fbbc f7f0 	udiv	r7, ip, r0
   2815a:	4378      	muls	r0, r7
   2815c:	3002      	adds	r0, #2
   2815e:	f04f 0805 	mov.w	r8, #5
   28162:	fbb0 f0f8 	udiv	r0, r0, r8
   28166:	ebae 0000 	sub.w	r0, lr, r0
   2816a:	f240 5ef9 	movw	lr, #1529	; 0x5f9
   2816e:	45f4      	cmp	ip, lr
   28170:	bf94      	ite	ls
   28172:	f04f 0c02 	movls.w	ip, #2
   28176:	f06f 0c09 	mvnhi.w	ip, #9
   2817a:	4467      	add	r7, ip
   2817c:	f44f 7cc8 	mov.w	ip, #400	; 0x190
   28180:	fb0c 5101 	mla	r1, ip, r1, r5
   28184:	2f01      	cmp	r7, #1
   28186:	bf98      	it	ls
   28188:	3101      	addls	r1, #1
   2818a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
   2818e:	d30c      	bcc.n	281aa <gmtime_r+0x126>
   28190:	f5a3 7399 	sub.w	r3, r3, #306	; 0x132
   28194:	61e3      	str	r3, [r4, #28]
   28196:	f2a1 716c 	subw	r1, r1, #1900	; 0x76c
   2819a:	2300      	movs	r3, #0
   2819c:	60e0      	str	r0, [r4, #12]
   2819e:	e9c4 7104 	strd	r7, r1, [r4, #16]
   281a2:	6223      	str	r3, [r4, #32]
   281a4:	4620      	mov	r0, r4
   281a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   281aa:	f015 0f03 	tst.w	r5, #3
   281ae:	d102      	bne.n	281b6 <gmtime_r+0x132>
   281b0:	fb06 5212 	mls	r2, r6, r2, r5
   281b4:	b95a      	cbnz	r2, 281ce <gmtime_r+0x14a>
   281b6:	f44f 76c8 	mov.w	r6, #400	; 0x190
   281ba:	fbb5 f2f6 	udiv	r2, r5, r6
   281be:	fb06 5212 	mls	r2, r6, r2, r5
   281c2:	fab2 f282 	clz	r2, r2
   281c6:	0952      	lsrs	r2, r2, #5
   281c8:	333b      	adds	r3, #59	; 0x3b
   281ca:	4413      	add	r3, r2
   281cc:	e7e2      	b.n	28194 <gmtime_r+0x110>
   281ce:	2201      	movs	r2, #1
   281d0:	e7fa      	b.n	281c8 <gmtime_r+0x144>
   281d2:	bf00      	nop
   281d4:	00015180 	.word	0x00015180
   281d8:	00023ab1 	.word	0x00023ab1
   281dc:	fffdc54f 	.word	0xfffdc54f
   281e0:	00023ab0 	.word	0x00023ab0

000281e4 <_free_r>:
   281e4:	b538      	push	{r3, r4, r5, lr}
   281e6:	4605      	mov	r5, r0
   281e8:	2900      	cmp	r1, #0
   281ea:	d045      	beq.n	28278 <_free_r+0x94>
   281ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
   281f0:	1f0c      	subs	r4, r1, #4
   281f2:	2b00      	cmp	r3, #0
   281f4:	bfb8      	it	lt
   281f6:	18e4      	addlt	r4, r4, r3
   281f8:	f000 f9ea 	bl	285d0 <__malloc_lock>
   281fc:	4a1f      	ldr	r2, [pc, #124]	; (2827c <_free_r+0x98>)
   281fe:	6813      	ldr	r3, [r2, #0]
   28200:	4610      	mov	r0, r2
   28202:	b933      	cbnz	r3, 28212 <_free_r+0x2e>
   28204:	6063      	str	r3, [r4, #4]
   28206:	6014      	str	r4, [r2, #0]
   28208:	4628      	mov	r0, r5
   2820a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2820e:	f000 b9e5 	b.w	285dc <__malloc_unlock>
   28212:	42a3      	cmp	r3, r4
   28214:	d90b      	bls.n	2822e <_free_r+0x4a>
   28216:	6821      	ldr	r1, [r4, #0]
   28218:	1862      	adds	r2, r4, r1
   2821a:	4293      	cmp	r3, r2
   2821c:	bf04      	itt	eq
   2821e:	681a      	ldreq	r2, [r3, #0]
   28220:	685b      	ldreq	r3, [r3, #4]
   28222:	6063      	str	r3, [r4, #4]
   28224:	bf04      	itt	eq
   28226:	1852      	addeq	r2, r2, r1
   28228:	6022      	streq	r2, [r4, #0]
   2822a:	6004      	str	r4, [r0, #0]
   2822c:	e7ec      	b.n	28208 <_free_r+0x24>
   2822e:	461a      	mov	r2, r3
   28230:	685b      	ldr	r3, [r3, #4]
   28232:	b10b      	cbz	r3, 28238 <_free_r+0x54>
   28234:	42a3      	cmp	r3, r4
   28236:	d9fa      	bls.n	2822e <_free_r+0x4a>
   28238:	6811      	ldr	r1, [r2, #0]
   2823a:	1850      	adds	r0, r2, r1
   2823c:	42a0      	cmp	r0, r4
   2823e:	d10b      	bne.n	28258 <_free_r+0x74>
   28240:	6820      	ldr	r0, [r4, #0]
   28242:	4401      	add	r1, r0
   28244:	1850      	adds	r0, r2, r1
   28246:	4283      	cmp	r3, r0
   28248:	6011      	str	r1, [r2, #0]
   2824a:	d1dd      	bne.n	28208 <_free_r+0x24>
   2824c:	6818      	ldr	r0, [r3, #0]
   2824e:	685b      	ldr	r3, [r3, #4]
   28250:	6053      	str	r3, [r2, #4]
   28252:	4401      	add	r1, r0
   28254:	6011      	str	r1, [r2, #0]
   28256:	e7d7      	b.n	28208 <_free_r+0x24>
   28258:	d902      	bls.n	28260 <_free_r+0x7c>
   2825a:	230c      	movs	r3, #12
   2825c:	602b      	str	r3, [r5, #0]
   2825e:	e7d3      	b.n	28208 <_free_r+0x24>
   28260:	6820      	ldr	r0, [r4, #0]
   28262:	1821      	adds	r1, r4, r0
   28264:	428b      	cmp	r3, r1
   28266:	bf04      	itt	eq
   28268:	6819      	ldreq	r1, [r3, #0]
   2826a:	685b      	ldreq	r3, [r3, #4]
   2826c:	6063      	str	r3, [r4, #4]
   2826e:	bf04      	itt	eq
   28270:	1809      	addeq	r1, r1, r0
   28272:	6021      	streq	r1, [r4, #0]
   28274:	6054      	str	r4, [r2, #4]
   28276:	e7c7      	b.n	28208 <_free_r+0x24>
   28278:	bd38      	pop	{r3, r4, r5, pc}
   2827a:	bf00      	nop
   2827c:	20002a1c 	.word	0x20002a1c

00028280 <_malloc_r>:
   28280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28282:	1ccd      	adds	r5, r1, #3
   28284:	f025 0503 	bic.w	r5, r5, #3
   28288:	3508      	adds	r5, #8
   2828a:	2d0c      	cmp	r5, #12
   2828c:	bf38      	it	cc
   2828e:	250c      	movcc	r5, #12
   28290:	2d00      	cmp	r5, #0
   28292:	4606      	mov	r6, r0
   28294:	db01      	blt.n	2829a <_malloc_r+0x1a>
   28296:	42a9      	cmp	r1, r5
   28298:	d903      	bls.n	282a2 <_malloc_r+0x22>
   2829a:	230c      	movs	r3, #12
   2829c:	6033      	str	r3, [r6, #0]
   2829e:	2000      	movs	r0, #0
   282a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   282a2:	f000 f995 	bl	285d0 <__malloc_lock>
   282a6:	4921      	ldr	r1, [pc, #132]	; (2832c <_malloc_r+0xac>)
   282a8:	680a      	ldr	r2, [r1, #0]
   282aa:	4614      	mov	r4, r2
   282ac:	b99c      	cbnz	r4, 282d6 <_malloc_r+0x56>
   282ae:	4f20      	ldr	r7, [pc, #128]	; (28330 <_malloc_r+0xb0>)
   282b0:	683b      	ldr	r3, [r7, #0]
   282b2:	b923      	cbnz	r3, 282be <_malloc_r+0x3e>
   282b4:	4621      	mov	r1, r4
   282b6:	4630      	mov	r0, r6
   282b8:	f000 f83c 	bl	28334 <_sbrk_r>
   282bc:	6038      	str	r0, [r7, #0]
   282be:	4629      	mov	r1, r5
   282c0:	4630      	mov	r0, r6
   282c2:	f000 f837 	bl	28334 <_sbrk_r>
   282c6:	1c43      	adds	r3, r0, #1
   282c8:	d123      	bne.n	28312 <_malloc_r+0x92>
   282ca:	230c      	movs	r3, #12
   282cc:	6033      	str	r3, [r6, #0]
   282ce:	4630      	mov	r0, r6
   282d0:	f000 f984 	bl	285dc <__malloc_unlock>
   282d4:	e7e3      	b.n	2829e <_malloc_r+0x1e>
   282d6:	6823      	ldr	r3, [r4, #0]
   282d8:	1b5b      	subs	r3, r3, r5
   282da:	d417      	bmi.n	2830c <_malloc_r+0x8c>
   282dc:	2b0b      	cmp	r3, #11
   282de:	d903      	bls.n	282e8 <_malloc_r+0x68>
   282e0:	6023      	str	r3, [r4, #0]
   282e2:	441c      	add	r4, r3
   282e4:	6025      	str	r5, [r4, #0]
   282e6:	e004      	b.n	282f2 <_malloc_r+0x72>
   282e8:	6863      	ldr	r3, [r4, #4]
   282ea:	42a2      	cmp	r2, r4
   282ec:	bf0c      	ite	eq
   282ee:	600b      	streq	r3, [r1, #0]
   282f0:	6053      	strne	r3, [r2, #4]
   282f2:	4630      	mov	r0, r6
   282f4:	f000 f972 	bl	285dc <__malloc_unlock>
   282f8:	f104 000b 	add.w	r0, r4, #11
   282fc:	1d23      	adds	r3, r4, #4
   282fe:	f020 0007 	bic.w	r0, r0, #7
   28302:	1ac2      	subs	r2, r0, r3
   28304:	d0cc      	beq.n	282a0 <_malloc_r+0x20>
   28306:	1a1b      	subs	r3, r3, r0
   28308:	50a3      	str	r3, [r4, r2]
   2830a:	e7c9      	b.n	282a0 <_malloc_r+0x20>
   2830c:	4622      	mov	r2, r4
   2830e:	6864      	ldr	r4, [r4, #4]
   28310:	e7cc      	b.n	282ac <_malloc_r+0x2c>
   28312:	1cc4      	adds	r4, r0, #3
   28314:	f024 0403 	bic.w	r4, r4, #3
   28318:	42a0      	cmp	r0, r4
   2831a:	d0e3      	beq.n	282e4 <_malloc_r+0x64>
   2831c:	1a21      	subs	r1, r4, r0
   2831e:	4630      	mov	r0, r6
   28320:	f000 f808 	bl	28334 <_sbrk_r>
   28324:	3001      	adds	r0, #1
   28326:	d1dd      	bne.n	282e4 <_malloc_r+0x64>
   28328:	e7cf      	b.n	282ca <_malloc_r+0x4a>
   2832a:	bf00      	nop
   2832c:	20002a1c 	.word	0x20002a1c
   28330:	20002a20 	.word	0x20002a20

00028334 <_sbrk_r>:
   28334:	b538      	push	{r3, r4, r5, lr}
   28336:	4d06      	ldr	r5, [pc, #24]	; (28350 <_sbrk_r+0x1c>)
   28338:	2300      	movs	r3, #0
   2833a:	4604      	mov	r4, r0
   2833c:	4608      	mov	r0, r1
   2833e:	602b      	str	r3, [r5, #0]
   28340:	f7ee fd1a 	bl	16d78 <_sbrk>
   28344:	1c43      	adds	r3, r0, #1
   28346:	d102      	bne.n	2834e <_sbrk_r+0x1a>
   28348:	682b      	ldr	r3, [r5, #0]
   2834a:	b103      	cbz	r3, 2834e <_sbrk_r+0x1a>
   2834c:	6023      	str	r3, [r4, #0]
   2834e:	bd38      	pop	{r3, r4, r5, pc}
   28350:	200036e8 	.word	0x200036e8

00028354 <sniprintf>:
   28354:	b40c      	push	{r2, r3}
   28356:	b530      	push	{r4, r5, lr}
   28358:	4b17      	ldr	r3, [pc, #92]	; (283b8 <sniprintf+0x64>)
   2835a:	1e0c      	subs	r4, r1, #0
   2835c:	681d      	ldr	r5, [r3, #0]
   2835e:	b09d      	sub	sp, #116	; 0x74
   28360:	da08      	bge.n	28374 <sniprintf+0x20>
   28362:	238b      	movs	r3, #139	; 0x8b
   28364:	602b      	str	r3, [r5, #0]
   28366:	f04f 30ff 	mov.w	r0, #4294967295
   2836a:	b01d      	add	sp, #116	; 0x74
   2836c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
   28370:	b002      	add	sp, #8
   28372:	4770      	bx	lr
   28374:	f44f 7302 	mov.w	r3, #520	; 0x208
   28378:	f8ad 3014 	strh.w	r3, [sp, #20]
   2837c:	bf14      	ite	ne
   2837e:	f104 33ff 	addne.w	r3, r4, #4294967295
   28382:	4623      	moveq	r3, r4
   28384:	9304      	str	r3, [sp, #16]
   28386:	9307      	str	r3, [sp, #28]
   28388:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2838c:	9002      	str	r0, [sp, #8]
   2838e:	9006      	str	r0, [sp, #24]
   28390:	f8ad 3016 	strh.w	r3, [sp, #22]
   28394:	9a20      	ldr	r2, [sp, #128]	; 0x80
   28396:	ab21      	add	r3, sp, #132	; 0x84
   28398:	a902      	add	r1, sp, #8
   2839a:	4628      	mov	r0, r5
   2839c:	9301      	str	r3, [sp, #4]
   2839e:	f000 f923 	bl	285e8 <_svfiprintf_r>
   283a2:	1c43      	adds	r3, r0, #1
   283a4:	bfbc      	itt	lt
   283a6:	238b      	movlt	r3, #139	; 0x8b
   283a8:	602b      	strlt	r3, [r5, #0]
   283aa:	2c00      	cmp	r4, #0
   283ac:	d0dd      	beq.n	2836a <sniprintf+0x16>
   283ae:	9b02      	ldr	r3, [sp, #8]
   283b0:	2200      	movs	r2, #0
   283b2:	701a      	strb	r2, [r3, #0]
   283b4:	e7d9      	b.n	2836a <sniprintf+0x16>
   283b6:	bf00      	nop
   283b8:	20000674 	.word	0x20000674

000283bc <_strtol_l.isra.0>:
   283bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   283c0:	4e3a      	ldr	r6, [pc, #232]	; (284ac <_strtol_l.isra.0+0xf0>)
   283c2:	4686      	mov	lr, r0
   283c4:	468c      	mov	ip, r1
   283c6:	4660      	mov	r0, ip
   283c8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   283cc:	5da5      	ldrb	r5, [r4, r6]
   283ce:	f015 0508 	ands.w	r5, r5, #8
   283d2:	d1f8      	bne.n	283c6 <_strtol_l.isra.0+0xa>
   283d4:	2c2d      	cmp	r4, #45	; 0x2d
   283d6:	d133      	bne.n	28440 <_strtol_l.isra.0+0x84>
   283d8:	f89c 4000 	ldrb.w	r4, [ip]
   283dc:	f04f 0801 	mov.w	r8, #1
   283e0:	f100 0c02 	add.w	ip, r0, #2
   283e4:	2b00      	cmp	r3, #0
   283e6:	d05c      	beq.n	284a2 <_strtol_l.isra.0+0xe6>
   283e8:	2b10      	cmp	r3, #16
   283ea:	d10c      	bne.n	28406 <_strtol_l.isra.0+0x4a>
   283ec:	2c30      	cmp	r4, #48	; 0x30
   283ee:	d10a      	bne.n	28406 <_strtol_l.isra.0+0x4a>
   283f0:	f89c 0000 	ldrb.w	r0, [ip]
   283f4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   283f8:	2858      	cmp	r0, #88	; 0x58
   283fa:	d14d      	bne.n	28498 <_strtol_l.isra.0+0xdc>
   283fc:	f89c 4001 	ldrb.w	r4, [ip, #1]
   28400:	2310      	movs	r3, #16
   28402:	f10c 0c02 	add.w	ip, ip, #2
   28406:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   2840a:	3f01      	subs	r7, #1
   2840c:	2600      	movs	r6, #0
   2840e:	fbb7 f9f3 	udiv	r9, r7, r3
   28412:	4630      	mov	r0, r6
   28414:	fb03 7a19 	mls	sl, r3, r9, r7
   28418:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   2841c:	2d09      	cmp	r5, #9
   2841e:	d818      	bhi.n	28452 <_strtol_l.isra.0+0x96>
   28420:	462c      	mov	r4, r5
   28422:	42a3      	cmp	r3, r4
   28424:	dd24      	ble.n	28470 <_strtol_l.isra.0+0xb4>
   28426:	1c75      	adds	r5, r6, #1
   28428:	d007      	beq.n	2843a <_strtol_l.isra.0+0x7e>
   2842a:	4581      	cmp	r9, r0
   2842c:	d31d      	bcc.n	2846a <_strtol_l.isra.0+0xae>
   2842e:	d101      	bne.n	28434 <_strtol_l.isra.0+0x78>
   28430:	45a2      	cmp	sl, r4
   28432:	db1a      	blt.n	2846a <_strtol_l.isra.0+0xae>
   28434:	fb00 4003 	mla	r0, r0, r3, r4
   28438:	2601      	movs	r6, #1
   2843a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   2843e:	e7eb      	b.n	28418 <_strtol_l.isra.0+0x5c>
   28440:	2c2b      	cmp	r4, #43	; 0x2b
   28442:	bf08      	it	eq
   28444:	f89c 4000 	ldrbeq.w	r4, [ip]
   28448:	46a8      	mov	r8, r5
   2844a:	bf08      	it	eq
   2844c:	f100 0c02 	addeq.w	ip, r0, #2
   28450:	e7c8      	b.n	283e4 <_strtol_l.isra.0+0x28>
   28452:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   28456:	2d19      	cmp	r5, #25
   28458:	d801      	bhi.n	2845e <_strtol_l.isra.0+0xa2>
   2845a:	3c37      	subs	r4, #55	; 0x37
   2845c:	e7e1      	b.n	28422 <_strtol_l.isra.0+0x66>
   2845e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   28462:	2d19      	cmp	r5, #25
   28464:	d804      	bhi.n	28470 <_strtol_l.isra.0+0xb4>
   28466:	3c57      	subs	r4, #87	; 0x57
   28468:	e7db      	b.n	28422 <_strtol_l.isra.0+0x66>
   2846a:	f04f 36ff 	mov.w	r6, #4294967295
   2846e:	e7e4      	b.n	2843a <_strtol_l.isra.0+0x7e>
   28470:	1c73      	adds	r3, r6, #1
   28472:	d106      	bne.n	28482 <_strtol_l.isra.0+0xc6>
   28474:	2322      	movs	r3, #34	; 0x22
   28476:	f8ce 3000 	str.w	r3, [lr]
   2847a:	4638      	mov	r0, r7
   2847c:	b942      	cbnz	r2, 28490 <_strtol_l.isra.0+0xd4>
   2847e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28482:	f1b8 0f00 	cmp.w	r8, #0
   28486:	d000      	beq.n	2848a <_strtol_l.isra.0+0xce>
   28488:	4240      	negs	r0, r0
   2848a:	2a00      	cmp	r2, #0
   2848c:	d0f7      	beq.n	2847e <_strtol_l.isra.0+0xc2>
   2848e:	b10e      	cbz	r6, 28494 <_strtol_l.isra.0+0xd8>
   28490:	f10c 31ff 	add.w	r1, ip, #4294967295
   28494:	6011      	str	r1, [r2, #0]
   28496:	e7f2      	b.n	2847e <_strtol_l.isra.0+0xc2>
   28498:	2430      	movs	r4, #48	; 0x30
   2849a:	2b00      	cmp	r3, #0
   2849c:	d1b3      	bne.n	28406 <_strtol_l.isra.0+0x4a>
   2849e:	2308      	movs	r3, #8
   284a0:	e7b1      	b.n	28406 <_strtol_l.isra.0+0x4a>
   284a2:	2c30      	cmp	r4, #48	; 0x30
   284a4:	d0a4      	beq.n	283f0 <_strtol_l.isra.0+0x34>
   284a6:	230a      	movs	r3, #10
   284a8:	e7ad      	b.n	28406 <_strtol_l.isra.0+0x4a>
   284aa:	bf00      	nop
   284ac:	00034540 	.word	0x00034540

000284b0 <strtol>:
   284b0:	4613      	mov	r3, r2
   284b2:	460a      	mov	r2, r1
   284b4:	4601      	mov	r1, r0
   284b6:	4802      	ldr	r0, [pc, #8]	; (284c0 <strtol+0x10>)
   284b8:	6800      	ldr	r0, [r0, #0]
   284ba:	f7ff bf7f 	b.w	283bc <_strtol_l.isra.0>
   284be:	bf00      	nop
   284c0:	20000674 	.word	0x20000674

000284c4 <_strtoul_l.isra.0>:
   284c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   284c8:	4e3b      	ldr	r6, [pc, #236]	; (285b8 <_strtoul_l.isra.0+0xf4>)
   284ca:	4686      	mov	lr, r0
   284cc:	468c      	mov	ip, r1
   284ce:	4660      	mov	r0, ip
   284d0:	f81c 4b01 	ldrb.w	r4, [ip], #1
   284d4:	5da5      	ldrb	r5, [r4, r6]
   284d6:	f015 0508 	ands.w	r5, r5, #8
   284da:	d1f8      	bne.n	284ce <_strtoul_l.isra.0+0xa>
   284dc:	2c2d      	cmp	r4, #45	; 0x2d
   284de:	d134      	bne.n	2854a <_strtoul_l.isra.0+0x86>
   284e0:	f89c 4000 	ldrb.w	r4, [ip]
   284e4:	f04f 0801 	mov.w	r8, #1
   284e8:	f100 0c02 	add.w	ip, r0, #2
   284ec:	2b00      	cmp	r3, #0
   284ee:	d05e      	beq.n	285ae <_strtoul_l.isra.0+0xea>
   284f0:	2b10      	cmp	r3, #16
   284f2:	d10c      	bne.n	2850e <_strtoul_l.isra.0+0x4a>
   284f4:	2c30      	cmp	r4, #48	; 0x30
   284f6:	d10a      	bne.n	2850e <_strtoul_l.isra.0+0x4a>
   284f8:	f89c 0000 	ldrb.w	r0, [ip]
   284fc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   28500:	2858      	cmp	r0, #88	; 0x58
   28502:	d14f      	bne.n	285a4 <_strtoul_l.isra.0+0xe0>
   28504:	f89c 4001 	ldrb.w	r4, [ip, #1]
   28508:	2310      	movs	r3, #16
   2850a:	f10c 0c02 	add.w	ip, ip, #2
   2850e:	f04f 37ff 	mov.w	r7, #4294967295
   28512:	2500      	movs	r5, #0
   28514:	fbb7 f7f3 	udiv	r7, r7, r3
   28518:	fb03 f907 	mul.w	r9, r3, r7
   2851c:	ea6f 0909 	mvn.w	r9, r9
   28520:	4628      	mov	r0, r5
   28522:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   28526:	2e09      	cmp	r6, #9
   28528:	d818      	bhi.n	2855c <_strtoul_l.isra.0+0x98>
   2852a:	4634      	mov	r4, r6
   2852c:	42a3      	cmp	r3, r4
   2852e:	dd24      	ble.n	2857a <_strtoul_l.isra.0+0xb6>
   28530:	2d00      	cmp	r5, #0
   28532:	db1f      	blt.n	28574 <_strtoul_l.isra.0+0xb0>
   28534:	4287      	cmp	r7, r0
   28536:	d31d      	bcc.n	28574 <_strtoul_l.isra.0+0xb0>
   28538:	d101      	bne.n	2853e <_strtoul_l.isra.0+0x7a>
   2853a:	45a1      	cmp	r9, r4
   2853c:	db1a      	blt.n	28574 <_strtoul_l.isra.0+0xb0>
   2853e:	fb00 4003 	mla	r0, r0, r3, r4
   28542:	2501      	movs	r5, #1
   28544:	f81c 4b01 	ldrb.w	r4, [ip], #1
   28548:	e7eb      	b.n	28522 <_strtoul_l.isra.0+0x5e>
   2854a:	2c2b      	cmp	r4, #43	; 0x2b
   2854c:	bf08      	it	eq
   2854e:	f89c 4000 	ldrbeq.w	r4, [ip]
   28552:	46a8      	mov	r8, r5
   28554:	bf08      	it	eq
   28556:	f100 0c02 	addeq.w	ip, r0, #2
   2855a:	e7c7      	b.n	284ec <_strtoul_l.isra.0+0x28>
   2855c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
   28560:	2e19      	cmp	r6, #25
   28562:	d801      	bhi.n	28568 <_strtoul_l.isra.0+0xa4>
   28564:	3c37      	subs	r4, #55	; 0x37
   28566:	e7e1      	b.n	2852c <_strtoul_l.isra.0+0x68>
   28568:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
   2856c:	2e19      	cmp	r6, #25
   2856e:	d804      	bhi.n	2857a <_strtoul_l.isra.0+0xb6>
   28570:	3c57      	subs	r4, #87	; 0x57
   28572:	e7db      	b.n	2852c <_strtoul_l.isra.0+0x68>
   28574:	f04f 35ff 	mov.w	r5, #4294967295
   28578:	e7e4      	b.n	28544 <_strtoul_l.isra.0+0x80>
   2857a:	2d00      	cmp	r5, #0
   2857c:	da07      	bge.n	2858e <_strtoul_l.isra.0+0xca>
   2857e:	2322      	movs	r3, #34	; 0x22
   28580:	f8ce 3000 	str.w	r3, [lr]
   28584:	f04f 30ff 	mov.w	r0, #4294967295
   28588:	b942      	cbnz	r2, 2859c <_strtoul_l.isra.0+0xd8>
   2858a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   2858e:	f1b8 0f00 	cmp.w	r8, #0
   28592:	d000      	beq.n	28596 <_strtoul_l.isra.0+0xd2>
   28594:	4240      	negs	r0, r0
   28596:	2a00      	cmp	r2, #0
   28598:	d0f7      	beq.n	2858a <_strtoul_l.isra.0+0xc6>
   2859a:	b10d      	cbz	r5, 285a0 <_strtoul_l.isra.0+0xdc>
   2859c:	f10c 31ff 	add.w	r1, ip, #4294967295
   285a0:	6011      	str	r1, [r2, #0]
   285a2:	e7f2      	b.n	2858a <_strtoul_l.isra.0+0xc6>
   285a4:	2430      	movs	r4, #48	; 0x30
   285a6:	2b00      	cmp	r3, #0
   285a8:	d1b1      	bne.n	2850e <_strtoul_l.isra.0+0x4a>
   285aa:	2308      	movs	r3, #8
   285ac:	e7af      	b.n	2850e <_strtoul_l.isra.0+0x4a>
   285ae:	2c30      	cmp	r4, #48	; 0x30
   285b0:	d0a2      	beq.n	284f8 <_strtoul_l.isra.0+0x34>
   285b2:	230a      	movs	r3, #10
   285b4:	e7ab      	b.n	2850e <_strtoul_l.isra.0+0x4a>
   285b6:	bf00      	nop
   285b8:	00034540 	.word	0x00034540

000285bc <strtoul>:
   285bc:	4613      	mov	r3, r2
   285be:	460a      	mov	r2, r1
   285c0:	4601      	mov	r1, r0
   285c2:	4802      	ldr	r0, [pc, #8]	; (285cc <strtoul+0x10>)
   285c4:	6800      	ldr	r0, [r0, #0]
   285c6:	f7ff bf7d 	b.w	284c4 <_strtoul_l.isra.0>
   285ca:	bf00      	nop
   285cc:	20000674 	.word	0x20000674

000285d0 <__malloc_lock>:
   285d0:	4801      	ldr	r0, [pc, #4]	; (285d8 <__malloc_lock+0x8>)
   285d2:	f7ee bbe5 	b.w	16da0 <__retarget_lock_acquire_recursive>
   285d6:	bf00      	nop
   285d8:	20000808 	.word	0x20000808

000285dc <__malloc_unlock>:
   285dc:	4801      	ldr	r0, [pc, #4]	; (285e4 <__malloc_unlock+0x8>)
   285de:	f7ee bbfd 	b.w	16ddc <__retarget_lock_release_recursive>
   285e2:	bf00      	nop
   285e4:	20000808 	.word	0x20000808

000285e8 <_svfiprintf_r>:
   285e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   285ec:	4698      	mov	r8, r3
   285ee:	898b      	ldrh	r3, [r1, #12]
   285f0:	061b      	lsls	r3, r3, #24
   285f2:	b09d      	sub	sp, #116	; 0x74
   285f4:	4607      	mov	r7, r0
   285f6:	460d      	mov	r5, r1
   285f8:	4614      	mov	r4, r2
   285fa:	d50e      	bpl.n	2861a <_svfiprintf_r+0x32>
   285fc:	690b      	ldr	r3, [r1, #16]
   285fe:	b963      	cbnz	r3, 2861a <_svfiprintf_r+0x32>
   28600:	2140      	movs	r1, #64	; 0x40
   28602:	f7ff fe3d 	bl	28280 <_malloc_r>
   28606:	6028      	str	r0, [r5, #0]
   28608:	6128      	str	r0, [r5, #16]
   2860a:	b920      	cbnz	r0, 28616 <_svfiprintf_r+0x2e>
   2860c:	230c      	movs	r3, #12
   2860e:	603b      	str	r3, [r7, #0]
   28610:	f04f 30ff 	mov.w	r0, #4294967295
   28614:	e0d1      	b.n	287ba <_svfiprintf_r+0x1d2>
   28616:	2340      	movs	r3, #64	; 0x40
   28618:	616b      	str	r3, [r5, #20]
   2861a:	2300      	movs	r3, #0
   2861c:	9309      	str	r3, [sp, #36]	; 0x24
   2861e:	2320      	movs	r3, #32
   28620:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
   28624:	f8cd 800c 	str.w	r8, [sp, #12]
   28628:	2330      	movs	r3, #48	; 0x30
   2862a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 287d4 <_svfiprintf_r+0x1ec>
   2862e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
   28632:	f04f 0901 	mov.w	r9, #1
   28636:	4623      	mov	r3, r4
   28638:	469a      	mov	sl, r3
   2863a:	f813 2b01 	ldrb.w	r2, [r3], #1
   2863e:	b10a      	cbz	r2, 28644 <_svfiprintf_r+0x5c>
   28640:	2a25      	cmp	r2, #37	; 0x25
   28642:	d1f9      	bne.n	28638 <_svfiprintf_r+0x50>
   28644:	ebba 0b04 	subs.w	fp, sl, r4
   28648:	d00b      	beq.n	28662 <_svfiprintf_r+0x7a>
   2864a:	465b      	mov	r3, fp
   2864c:	4622      	mov	r2, r4
   2864e:	4629      	mov	r1, r5
   28650:	4638      	mov	r0, r7
   28652:	f004 fb5e 	bl	2cd12 <__ssputs_r>
   28656:	3001      	adds	r0, #1
   28658:	f000 80aa 	beq.w	287b0 <_svfiprintf_r+0x1c8>
   2865c:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2865e:	445a      	add	r2, fp
   28660:	9209      	str	r2, [sp, #36]	; 0x24
   28662:	f89a 3000 	ldrb.w	r3, [sl]
   28666:	2b00      	cmp	r3, #0
   28668:	f000 80a2 	beq.w	287b0 <_svfiprintf_r+0x1c8>
   2866c:	2300      	movs	r3, #0
   2866e:	f04f 32ff 	mov.w	r2, #4294967295
   28672:	e9cd 2305 	strd	r2, r3, [sp, #20]
   28676:	f10a 0a01 	add.w	sl, sl, #1
   2867a:	9304      	str	r3, [sp, #16]
   2867c:	9307      	str	r3, [sp, #28]
   2867e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
   28682:	931a      	str	r3, [sp, #104]	; 0x68
   28684:	4654      	mov	r4, sl
   28686:	2205      	movs	r2, #5
   28688:	f814 1b01 	ldrb.w	r1, [r4], #1
   2868c:	4851      	ldr	r0, [pc, #324]	; (287d4 <_svfiprintf_r+0x1ec>)
   2868e:	f7d7 fd37 	bl	100 <memchr>
   28692:	9a04      	ldr	r2, [sp, #16]
   28694:	b9d8      	cbnz	r0, 286ce <_svfiprintf_r+0xe6>
   28696:	06d0      	lsls	r0, r2, #27
   28698:	bf44      	itt	mi
   2869a:	2320      	movmi	r3, #32
   2869c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   286a0:	0711      	lsls	r1, r2, #28
   286a2:	bf44      	itt	mi
   286a4:	232b      	movmi	r3, #43	; 0x2b
   286a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
   286aa:	f89a 3000 	ldrb.w	r3, [sl]
   286ae:	2b2a      	cmp	r3, #42	; 0x2a
   286b0:	d015      	beq.n	286de <_svfiprintf_r+0xf6>
   286b2:	9a07      	ldr	r2, [sp, #28]
   286b4:	4654      	mov	r4, sl
   286b6:	2000      	movs	r0, #0
   286b8:	f04f 0c0a 	mov.w	ip, #10
   286bc:	4621      	mov	r1, r4
   286be:	f811 3b01 	ldrb.w	r3, [r1], #1
   286c2:	3b30      	subs	r3, #48	; 0x30
   286c4:	2b09      	cmp	r3, #9
   286c6:	d94e      	bls.n	28766 <_svfiprintf_r+0x17e>
   286c8:	b1b0      	cbz	r0, 286f8 <_svfiprintf_r+0x110>
   286ca:	9207      	str	r2, [sp, #28]
   286cc:	e014      	b.n	286f8 <_svfiprintf_r+0x110>
   286ce:	eba0 0308 	sub.w	r3, r0, r8
   286d2:	fa09 f303 	lsl.w	r3, r9, r3
   286d6:	4313      	orrs	r3, r2
   286d8:	9304      	str	r3, [sp, #16]
   286da:	46a2      	mov	sl, r4
   286dc:	e7d2      	b.n	28684 <_svfiprintf_r+0x9c>
   286de:	9b03      	ldr	r3, [sp, #12]
   286e0:	1d19      	adds	r1, r3, #4
   286e2:	681b      	ldr	r3, [r3, #0]
   286e4:	9103      	str	r1, [sp, #12]
   286e6:	2b00      	cmp	r3, #0
   286e8:	bfbb      	ittet	lt
   286ea:	425b      	neglt	r3, r3
   286ec:	f042 0202 	orrlt.w	r2, r2, #2
   286f0:	9307      	strge	r3, [sp, #28]
   286f2:	9307      	strlt	r3, [sp, #28]
   286f4:	bfb8      	it	lt
   286f6:	9204      	strlt	r2, [sp, #16]
   286f8:	7823      	ldrb	r3, [r4, #0]
   286fa:	2b2e      	cmp	r3, #46	; 0x2e
   286fc:	d10c      	bne.n	28718 <_svfiprintf_r+0x130>
   286fe:	7863      	ldrb	r3, [r4, #1]
   28700:	2b2a      	cmp	r3, #42	; 0x2a
   28702:	d135      	bne.n	28770 <_svfiprintf_r+0x188>
   28704:	9b03      	ldr	r3, [sp, #12]
   28706:	1d1a      	adds	r2, r3, #4
   28708:	681b      	ldr	r3, [r3, #0]
   2870a:	9203      	str	r2, [sp, #12]
   2870c:	2b00      	cmp	r3, #0
   2870e:	bfb8      	it	lt
   28710:	f04f 33ff 	movlt.w	r3, #4294967295
   28714:	3402      	adds	r4, #2
   28716:	9305      	str	r3, [sp, #20]
   28718:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 287e4 <_svfiprintf_r+0x1fc>
   2871c:	7821      	ldrb	r1, [r4, #0]
   2871e:	2203      	movs	r2, #3
   28720:	4650      	mov	r0, sl
   28722:	f7d7 fced 	bl	100 <memchr>
   28726:	b140      	cbz	r0, 2873a <_svfiprintf_r+0x152>
   28728:	2340      	movs	r3, #64	; 0x40
   2872a:	eba0 000a 	sub.w	r0, r0, sl
   2872e:	fa03 f000 	lsl.w	r0, r3, r0
   28732:	9b04      	ldr	r3, [sp, #16]
   28734:	4303      	orrs	r3, r0
   28736:	3401      	adds	r4, #1
   28738:	9304      	str	r3, [sp, #16]
   2873a:	f814 1b01 	ldrb.w	r1, [r4], #1
   2873e:	4826      	ldr	r0, [pc, #152]	; (287d8 <_svfiprintf_r+0x1f0>)
   28740:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
   28744:	2206      	movs	r2, #6
   28746:	f7d7 fcdb 	bl	100 <memchr>
   2874a:	2800      	cmp	r0, #0
   2874c:	d038      	beq.n	287c0 <_svfiprintf_r+0x1d8>
   2874e:	4b23      	ldr	r3, [pc, #140]	; (287dc <_svfiprintf_r+0x1f4>)
   28750:	bb1b      	cbnz	r3, 2879a <_svfiprintf_r+0x1b2>
   28752:	9b03      	ldr	r3, [sp, #12]
   28754:	3307      	adds	r3, #7
   28756:	f023 0307 	bic.w	r3, r3, #7
   2875a:	3308      	adds	r3, #8
   2875c:	9303      	str	r3, [sp, #12]
   2875e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   28760:	4433      	add	r3, r6
   28762:	9309      	str	r3, [sp, #36]	; 0x24
   28764:	e767      	b.n	28636 <_svfiprintf_r+0x4e>
   28766:	fb0c 3202 	mla	r2, ip, r2, r3
   2876a:	460c      	mov	r4, r1
   2876c:	2001      	movs	r0, #1
   2876e:	e7a5      	b.n	286bc <_svfiprintf_r+0xd4>
   28770:	2300      	movs	r3, #0
   28772:	3401      	adds	r4, #1
   28774:	9305      	str	r3, [sp, #20]
   28776:	4619      	mov	r1, r3
   28778:	f04f 0c0a 	mov.w	ip, #10
   2877c:	4620      	mov	r0, r4
   2877e:	f810 2b01 	ldrb.w	r2, [r0], #1
   28782:	3a30      	subs	r2, #48	; 0x30
   28784:	2a09      	cmp	r2, #9
   28786:	d903      	bls.n	28790 <_svfiprintf_r+0x1a8>
   28788:	2b00      	cmp	r3, #0
   2878a:	d0c5      	beq.n	28718 <_svfiprintf_r+0x130>
   2878c:	9105      	str	r1, [sp, #20]
   2878e:	e7c3      	b.n	28718 <_svfiprintf_r+0x130>
   28790:	fb0c 2101 	mla	r1, ip, r1, r2
   28794:	4604      	mov	r4, r0
   28796:	2301      	movs	r3, #1
   28798:	e7f0      	b.n	2877c <_svfiprintf_r+0x194>
   2879a:	ab03      	add	r3, sp, #12
   2879c:	9300      	str	r3, [sp, #0]
   2879e:	462a      	mov	r2, r5
   287a0:	4b0f      	ldr	r3, [pc, #60]	; (287e0 <_svfiprintf_r+0x1f8>)
   287a2:	a904      	add	r1, sp, #16
   287a4:	4638      	mov	r0, r7
   287a6:	f3af 8000 	nop.w
   287aa:	1c42      	adds	r2, r0, #1
   287ac:	4606      	mov	r6, r0
   287ae:	d1d6      	bne.n	2875e <_svfiprintf_r+0x176>
   287b0:	89ab      	ldrh	r3, [r5, #12]
   287b2:	065b      	lsls	r3, r3, #25
   287b4:	f53f af2c 	bmi.w	28610 <_svfiprintf_r+0x28>
   287b8:	9809      	ldr	r0, [sp, #36]	; 0x24
   287ba:	b01d      	add	sp, #116	; 0x74
   287bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   287c0:	ab03      	add	r3, sp, #12
   287c2:	9300      	str	r3, [sp, #0]
   287c4:	462a      	mov	r2, r5
   287c6:	4b06      	ldr	r3, [pc, #24]	; (287e0 <_svfiprintf_r+0x1f8>)
   287c8:	a904      	add	r1, sp, #16
   287ca:	4638      	mov	r0, r7
   287cc:	f000 f80c 	bl	287e8 <_printf_i>
   287d0:	e7eb      	b.n	287aa <_svfiprintf_r+0x1c2>
   287d2:	bf00      	nop
   287d4:	00034640 	.word	0x00034640
   287d8:	0003464a 	.word	0x0003464a
   287dc:	00000000 	.word	0x00000000
   287e0:	0002cd13 	.word	0x0002cd13
   287e4:	00034646 	.word	0x00034646

000287e8 <_printf_i>:
   287e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   287ec:	460c      	mov	r4, r1
   287ee:	4691      	mov	r9, r2
   287f0:	7e27      	ldrb	r7, [r4, #24]
   287f2:	990c      	ldr	r1, [sp, #48]	; 0x30
   287f4:	2f78      	cmp	r7, #120	; 0x78
   287f6:	4680      	mov	r8, r0
   287f8:	469a      	mov	sl, r3
   287fa:	f104 0243 	add.w	r2, r4, #67	; 0x43
   287fe:	d807      	bhi.n	28810 <_printf_i+0x28>
   28800:	2f62      	cmp	r7, #98	; 0x62
   28802:	d80a      	bhi.n	2881a <_printf_i+0x32>
   28804:	2f00      	cmp	r7, #0
   28806:	f000 80d8 	beq.w	289ba <_printf_i+0x1d2>
   2880a:	2f58      	cmp	r7, #88	; 0x58
   2880c:	f000 80a3 	beq.w	28956 <_printf_i+0x16e>
   28810:	f104 0642 	add.w	r6, r4, #66	; 0x42
   28814:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
   28818:	e03a      	b.n	28890 <_printf_i+0xa8>
   2881a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
   2881e:	2b15      	cmp	r3, #21
   28820:	d8f6      	bhi.n	28810 <_printf_i+0x28>
   28822:	a001      	add	r0, pc, #4	; (adr r0, 28828 <_printf_i+0x40>)
   28824:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
   28828:	00028881 	.word	0x00028881
   2882c:	00028895 	.word	0x00028895
   28830:	00028811 	.word	0x00028811
   28834:	00028811 	.word	0x00028811
   28838:	00028811 	.word	0x00028811
   2883c:	00028811 	.word	0x00028811
   28840:	00028895 	.word	0x00028895
   28844:	00028811 	.word	0x00028811
   28848:	00028811 	.word	0x00028811
   2884c:	00028811 	.word	0x00028811
   28850:	00028811 	.word	0x00028811
   28854:	000289a1 	.word	0x000289a1
   28858:	000288c5 	.word	0x000288c5
   2885c:	00028983 	.word	0x00028983
   28860:	00028811 	.word	0x00028811
   28864:	00028811 	.word	0x00028811
   28868:	000289c3 	.word	0x000289c3
   2886c:	00028811 	.word	0x00028811
   28870:	000288c5 	.word	0x000288c5
   28874:	00028811 	.word	0x00028811
   28878:	00028811 	.word	0x00028811
   2887c:	0002898b 	.word	0x0002898b
   28880:	680b      	ldr	r3, [r1, #0]
   28882:	1d1a      	adds	r2, r3, #4
   28884:	681b      	ldr	r3, [r3, #0]
   28886:	600a      	str	r2, [r1, #0]
   28888:	f104 0642 	add.w	r6, r4, #66	; 0x42
   2888c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   28890:	2301      	movs	r3, #1
   28892:	e0a3      	b.n	289dc <_printf_i+0x1f4>
   28894:	6825      	ldr	r5, [r4, #0]
   28896:	6808      	ldr	r0, [r1, #0]
   28898:	062e      	lsls	r6, r5, #24
   2889a:	f100 0304 	add.w	r3, r0, #4
   2889e:	d50a      	bpl.n	288b6 <_printf_i+0xce>
   288a0:	6805      	ldr	r5, [r0, #0]
   288a2:	600b      	str	r3, [r1, #0]
   288a4:	2d00      	cmp	r5, #0
   288a6:	da03      	bge.n	288b0 <_printf_i+0xc8>
   288a8:	232d      	movs	r3, #45	; 0x2d
   288aa:	426d      	negs	r5, r5
   288ac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   288b0:	485e      	ldr	r0, [pc, #376]	; (28a2c <_printf_i+0x244>)
   288b2:	230a      	movs	r3, #10
   288b4:	e019      	b.n	288ea <_printf_i+0x102>
   288b6:	f015 0f40 	tst.w	r5, #64	; 0x40
   288ba:	6805      	ldr	r5, [r0, #0]
   288bc:	600b      	str	r3, [r1, #0]
   288be:	bf18      	it	ne
   288c0:	b22d      	sxthne	r5, r5
   288c2:	e7ef      	b.n	288a4 <_printf_i+0xbc>
   288c4:	680b      	ldr	r3, [r1, #0]
   288c6:	6825      	ldr	r5, [r4, #0]
   288c8:	1d18      	adds	r0, r3, #4
   288ca:	6008      	str	r0, [r1, #0]
   288cc:	0628      	lsls	r0, r5, #24
   288ce:	d501      	bpl.n	288d4 <_printf_i+0xec>
   288d0:	681d      	ldr	r5, [r3, #0]
   288d2:	e002      	b.n	288da <_printf_i+0xf2>
   288d4:	0669      	lsls	r1, r5, #25
   288d6:	d5fb      	bpl.n	288d0 <_printf_i+0xe8>
   288d8:	881d      	ldrh	r5, [r3, #0]
   288da:	4854      	ldr	r0, [pc, #336]	; (28a2c <_printf_i+0x244>)
   288dc:	2f6f      	cmp	r7, #111	; 0x6f
   288de:	bf0c      	ite	eq
   288e0:	2308      	moveq	r3, #8
   288e2:	230a      	movne	r3, #10
   288e4:	2100      	movs	r1, #0
   288e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
   288ea:	6866      	ldr	r6, [r4, #4]
   288ec:	60a6      	str	r6, [r4, #8]
   288ee:	2e00      	cmp	r6, #0
   288f0:	bfa2      	ittt	ge
   288f2:	6821      	ldrge	r1, [r4, #0]
   288f4:	f021 0104 	bicge.w	r1, r1, #4
   288f8:	6021      	strge	r1, [r4, #0]
   288fa:	b90d      	cbnz	r5, 28900 <_printf_i+0x118>
   288fc:	2e00      	cmp	r6, #0
   288fe:	d04d      	beq.n	2899c <_printf_i+0x1b4>
   28900:	4616      	mov	r6, r2
   28902:	fbb5 f1f3 	udiv	r1, r5, r3
   28906:	fb03 5711 	mls	r7, r3, r1, r5
   2890a:	5dc7      	ldrb	r7, [r0, r7]
   2890c:	f806 7d01 	strb.w	r7, [r6, #-1]!
   28910:	462f      	mov	r7, r5
   28912:	42bb      	cmp	r3, r7
   28914:	460d      	mov	r5, r1
   28916:	d9f4      	bls.n	28902 <_printf_i+0x11a>
   28918:	2b08      	cmp	r3, #8
   2891a:	d10b      	bne.n	28934 <_printf_i+0x14c>
   2891c:	6823      	ldr	r3, [r4, #0]
   2891e:	07df      	lsls	r7, r3, #31
   28920:	d508      	bpl.n	28934 <_printf_i+0x14c>
   28922:	6923      	ldr	r3, [r4, #16]
   28924:	6861      	ldr	r1, [r4, #4]
   28926:	4299      	cmp	r1, r3
   28928:	bfde      	ittt	le
   2892a:	2330      	movle	r3, #48	; 0x30
   2892c:	f806 3c01 	strble.w	r3, [r6, #-1]
   28930:	f106 36ff 	addle.w	r6, r6, #4294967295
   28934:	1b92      	subs	r2, r2, r6
   28936:	6122      	str	r2, [r4, #16]
   28938:	f8cd a000 	str.w	sl, [sp]
   2893c:	464b      	mov	r3, r9
   2893e:	aa03      	add	r2, sp, #12
   28940:	4621      	mov	r1, r4
   28942:	4640      	mov	r0, r8
   28944:	f004 fa40 	bl	2cdc8 <_printf_common>
   28948:	3001      	adds	r0, #1
   2894a:	d14c      	bne.n	289e6 <_printf_i+0x1fe>
   2894c:	f04f 30ff 	mov.w	r0, #4294967295
   28950:	b004      	add	sp, #16
   28952:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   28956:	4835      	ldr	r0, [pc, #212]	; (28a2c <_printf_i+0x244>)
   28958:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
   2895c:	6823      	ldr	r3, [r4, #0]
   2895e:	680e      	ldr	r6, [r1, #0]
   28960:	061f      	lsls	r7, r3, #24
   28962:	f856 5b04 	ldr.w	r5, [r6], #4
   28966:	600e      	str	r6, [r1, #0]
   28968:	d514      	bpl.n	28994 <_printf_i+0x1ac>
   2896a:	07d9      	lsls	r1, r3, #31
   2896c:	bf44      	itt	mi
   2896e:	f043 0320 	orrmi.w	r3, r3, #32
   28972:	6023      	strmi	r3, [r4, #0]
   28974:	b91d      	cbnz	r5, 2897e <_printf_i+0x196>
   28976:	6823      	ldr	r3, [r4, #0]
   28978:	f023 0320 	bic.w	r3, r3, #32
   2897c:	6023      	str	r3, [r4, #0]
   2897e:	2310      	movs	r3, #16
   28980:	e7b0      	b.n	288e4 <_printf_i+0xfc>
   28982:	6823      	ldr	r3, [r4, #0]
   28984:	f043 0320 	orr.w	r3, r3, #32
   28988:	6023      	str	r3, [r4, #0]
   2898a:	2378      	movs	r3, #120	; 0x78
   2898c:	4828      	ldr	r0, [pc, #160]	; (28a30 <_printf_i+0x248>)
   2898e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
   28992:	e7e3      	b.n	2895c <_printf_i+0x174>
   28994:	065e      	lsls	r6, r3, #25
   28996:	bf48      	it	mi
   28998:	b2ad      	uxthmi	r5, r5
   2899a:	e7e6      	b.n	2896a <_printf_i+0x182>
   2899c:	4616      	mov	r6, r2
   2899e:	e7bb      	b.n	28918 <_printf_i+0x130>
   289a0:	680b      	ldr	r3, [r1, #0]
   289a2:	6826      	ldr	r6, [r4, #0]
   289a4:	6960      	ldr	r0, [r4, #20]
   289a6:	1d1d      	adds	r5, r3, #4
   289a8:	600d      	str	r5, [r1, #0]
   289aa:	0635      	lsls	r5, r6, #24
   289ac:	681b      	ldr	r3, [r3, #0]
   289ae:	d501      	bpl.n	289b4 <_printf_i+0x1cc>
   289b0:	6018      	str	r0, [r3, #0]
   289b2:	e002      	b.n	289ba <_printf_i+0x1d2>
   289b4:	0671      	lsls	r1, r6, #25
   289b6:	d5fb      	bpl.n	289b0 <_printf_i+0x1c8>
   289b8:	8018      	strh	r0, [r3, #0]
   289ba:	2300      	movs	r3, #0
   289bc:	6123      	str	r3, [r4, #16]
   289be:	4616      	mov	r6, r2
   289c0:	e7ba      	b.n	28938 <_printf_i+0x150>
   289c2:	680b      	ldr	r3, [r1, #0]
   289c4:	1d1a      	adds	r2, r3, #4
   289c6:	600a      	str	r2, [r1, #0]
   289c8:	681e      	ldr	r6, [r3, #0]
   289ca:	6862      	ldr	r2, [r4, #4]
   289cc:	2100      	movs	r1, #0
   289ce:	4630      	mov	r0, r6
   289d0:	f7d7 fb96 	bl	100 <memchr>
   289d4:	b108      	cbz	r0, 289da <_printf_i+0x1f2>
   289d6:	1b80      	subs	r0, r0, r6
   289d8:	6060      	str	r0, [r4, #4]
   289da:	6863      	ldr	r3, [r4, #4]
   289dc:	6123      	str	r3, [r4, #16]
   289de:	2300      	movs	r3, #0
   289e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
   289e4:	e7a8      	b.n	28938 <_printf_i+0x150>
   289e6:	6923      	ldr	r3, [r4, #16]
   289e8:	4632      	mov	r2, r6
   289ea:	4649      	mov	r1, r9
   289ec:	4640      	mov	r0, r8
   289ee:	47d0      	blx	sl
   289f0:	3001      	adds	r0, #1
   289f2:	d0ab      	beq.n	2894c <_printf_i+0x164>
   289f4:	6823      	ldr	r3, [r4, #0]
   289f6:	079b      	lsls	r3, r3, #30
   289f8:	d413      	bmi.n	28a22 <_printf_i+0x23a>
   289fa:	68e0      	ldr	r0, [r4, #12]
   289fc:	9b03      	ldr	r3, [sp, #12]
   289fe:	4298      	cmp	r0, r3
   28a00:	bfb8      	it	lt
   28a02:	4618      	movlt	r0, r3
   28a04:	e7a4      	b.n	28950 <_printf_i+0x168>
   28a06:	2301      	movs	r3, #1
   28a08:	4632      	mov	r2, r6
   28a0a:	4649      	mov	r1, r9
   28a0c:	4640      	mov	r0, r8
   28a0e:	47d0      	blx	sl
   28a10:	3001      	adds	r0, #1
   28a12:	d09b      	beq.n	2894c <_printf_i+0x164>
   28a14:	3501      	adds	r5, #1
   28a16:	68e3      	ldr	r3, [r4, #12]
   28a18:	9903      	ldr	r1, [sp, #12]
   28a1a:	1a5b      	subs	r3, r3, r1
   28a1c:	42ab      	cmp	r3, r5
   28a1e:	dcf2      	bgt.n	28a06 <_printf_i+0x21e>
   28a20:	e7eb      	b.n	289fa <_printf_i+0x212>
   28a22:	2500      	movs	r5, #0
   28a24:	f104 0619 	add.w	r6, r4, #25
   28a28:	e7f5      	b.n	28a16 <_printf_i+0x22e>
   28a2a:	bf00      	nop
   28a2c:	00034651 	.word	0x00034651
   28a30:	00034662 	.word	0x00034662

00028a34 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   28a34:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   28a38:	b2db      	uxtb	r3, r3
   28a3a:	2b09      	cmp	r3, #9
   28a3c:	d802      	bhi.n	28a44 <char2hex+0x10>
		*x = c - '0';
   28a3e:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   28a40:	2000      	movs	r0, #0
   28a42:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   28a44:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   28a48:	2b05      	cmp	r3, #5
   28a4a:	d802      	bhi.n	28a52 <char2hex+0x1e>
		*x = c - 'a' + 10;
   28a4c:	3857      	subs	r0, #87	; 0x57
   28a4e:	7008      	strb	r0, [r1, #0]
   28a50:	e7f6      	b.n	28a40 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   28a52:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   28a56:	2b05      	cmp	r3, #5
   28a58:	d801      	bhi.n	28a5e <char2hex+0x2a>
		*x = c - 'A' + 10;
   28a5a:	3837      	subs	r0, #55	; 0x37
   28a5c:	e7f7      	b.n	28a4e <char2hex+0x1a>
		return -EINVAL;
   28a5e:	f06f 0015 	mvn.w	r0, #21
}
   28a62:	4770      	bx	lr

00028a64 <hex2char>:

int hex2char(uint8_t x, char *c)
{
	if (x <= 9) {
   28a64:	2809      	cmp	r0, #9
   28a66:	d803      	bhi.n	28a70 <hex2char+0xc>
		*c = x + '0';
   28a68:	3030      	adds	r0, #48	; 0x30
	} else  if (x <= 15) {
		*c = x - 10 + 'a';
   28a6a:	7008      	strb	r0, [r1, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   28a6c:	2000      	movs	r0, #0
   28a6e:	4770      	bx	lr
	} else  if (x <= 15) {
   28a70:	280f      	cmp	r0, #15
   28a72:	d801      	bhi.n	28a78 <hex2char+0x14>
		*c = x - 10 + 'a';
   28a74:	3057      	adds	r0, #87	; 0x57
   28a76:	e7f8      	b.n	28a6a <hex2char+0x6>
		return -EINVAL;
   28a78:	f06f 0015 	mvn.w	r0, #21
}
   28a7c:	4770      	bx	lr

00028a7e <bin2hex>:

size_t bin2hex(const uint8_t *buf, size_t buflen, char *hex, size_t hexlen)
{
	if ((hexlen + 1) < buflen * 2) {
   28a7e:	3301      	adds	r3, #1
   28a80:	ebb3 0f41 	cmp.w	r3, r1, lsl #1
{
   28a84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28a88:	460c      	mov	r4, r1
	if ((hexlen + 1) < buflen * 2) {
   28a8a:	ea4f 0641 	mov.w	r6, r1, lsl #1
   28a8e:	d203      	bcs.n	28a98 <bin2hex+0x1a>
		return 0;
   28a90:	2600      	movs	r6, #0
		}
	}

	hex[2 * buflen] = '\0';
	return 2 * buflen;
}
   28a92:	4630      	mov	r0, r6
   28a94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   28a98:	4603      	mov	r3, r0
   28a9a:	1c55      	adds	r5, r2, #1
   28a9c:	1847      	adds	r7, r0, r1
	for (size_t i = 0; i < buflen; i++) {
   28a9e:	42bb      	cmp	r3, r7
   28aa0:	d103      	bne.n	28aaa <bin2hex+0x2c>
	hex[2 * buflen] = '\0';
   28aa2:	2300      	movs	r3, #0
   28aa4:	f802 3014 	strb.w	r3, [r2, r4, lsl #1]
	return 2 * buflen;
   28aa8:	e7f3      	b.n	28a92 <bin2hex+0x14>
		if (hex2char(buf[i] >> 4, &hex[2 * i]) < 0) {
   28aaa:	7818      	ldrb	r0, [r3, #0]
   28aac:	1e69      	subs	r1, r5, #1
   28aae:	0900      	lsrs	r0, r0, #4
   28ab0:	4698      	mov	r8, r3
   28ab2:	f7ff ffd7 	bl	28a64 <hex2char>
   28ab6:	2800      	cmp	r0, #0
   28ab8:	dbea      	blt.n	28a90 <bin2hex+0x12>
		if (hex2char(buf[i] & 0xf, &hex[2 * i + 1]) < 0) {
   28aba:	f898 0000 	ldrb.w	r0, [r8]
   28abe:	4629      	mov	r1, r5
   28ac0:	f000 000f 	and.w	r0, r0, #15
   28ac4:	3301      	adds	r3, #1
   28ac6:	f7ff ffcd 	bl	28a64 <hex2char>
   28aca:	2800      	cmp	r0, #0
   28acc:	f105 0502 	add.w	r5, r5, #2
   28ad0:	dae5      	bge.n	28a9e <bin2hex+0x20>
   28ad2:	e7dd      	b.n	28a90 <bin2hex+0x12>

00028ad4 <hex2bin>:

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   28ad4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   28ad6:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   28ad8:	f001 0001 	and.w	r0, r1, #1
   28adc:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   28ae0:	429d      	cmp	r5, r3
   28ae2:	ea4f 0651 	mov.w	r6, r1, lsr #1
   28ae6:	d903      	bls.n	28af0 <hex2bin+0x1c>
		return 0;
   28ae8:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   28aea:	4628      	mov	r0, r5
   28aec:	b003      	add	sp, #12
   28aee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   28af0:	b158      	cbz	r0, 28b0a <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   28af2:	7820      	ldrb	r0, [r4, #0]
   28af4:	f10d 0107 	add.w	r1, sp, #7
   28af8:	f7ff ff9c 	bl	28a34 <char2hex>
   28afc:	2800      	cmp	r0, #0
   28afe:	dbf3      	blt.n	28ae8 <hex2bin+0x14>
		buf[0] = dec;
   28b00:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28b04:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   28b08:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   28b0a:	3401      	adds	r4, #1
   28b0c:	4416      	add	r6, r2
   28b0e:	42b2      	cmp	r2, r6
   28b10:	d0eb      	beq.n	28aea <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   28b12:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   28b16:	f10d 0107 	add.w	r1, sp, #7
   28b1a:	f7ff ff8b 	bl	28a34 <char2hex>
   28b1e:	2800      	cmp	r0, #0
   28b20:	dbe2      	blt.n	28ae8 <hex2bin+0x14>
		buf[i] = dec << 4;
   28b22:	f89d 3007 	ldrb.w	r3, [sp, #7]
   28b26:	011b      	lsls	r3, r3, #4
   28b28:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   28b2a:	f814 0b02 	ldrb.w	r0, [r4], #2
   28b2e:	f10d 0107 	add.w	r1, sp, #7
   28b32:	f7ff ff7f 	bl	28a34 <char2hex>
   28b36:	2800      	cmp	r0, #0
   28b38:	dbd6      	blt.n	28ae8 <hex2bin+0x14>
		buf[i] += dec;
   28b3a:	7813      	ldrb	r3, [r2, #0]
   28b3c:	f89d 1007 	ldrb.w	r1, [sp, #7]
   28b40:	440b      	add	r3, r1
   28b42:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   28b46:	e7e2      	b.n	28b0e <hex2bin+0x3a>

00028b48 <sys_notify_validate>:
	if (notify == NULL) {
   28b48:	4603      	mov	r3, r0
   28b4a:	b140      	cbz	r0, 28b5e <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   28b4c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   28b4e:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
   28b52:	2a02      	cmp	r2, #2
   28b54:	d006      	beq.n	28b64 <sys_notify_validate+0x1c>
   28b56:	2a03      	cmp	r2, #3
   28b58:	d004      	beq.n	28b64 <sys_notify_validate+0x1c>
   28b5a:	2a01      	cmp	r2, #1
   28b5c:	d005      	beq.n	28b6a <sys_notify_validate+0x22>
		return -EINVAL;
   28b5e:	f06f 0015 	mvn.w	r0, #21
}
   28b62:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   28b64:	681a      	ldr	r2, [r3, #0]
   28b66:	2a00      	cmp	r2, #0
   28b68:	d0f9      	beq.n	28b5e <sys_notify_validate+0x16>
		notify->result = 0;
   28b6a:	2000      	movs	r0, #0
   28b6c:	6098      	str	r0, [r3, #8]
   28b6e:	4770      	bx	lr

00028b70 <arch_printk_char_out>:
}
   28b70:	2000      	movs	r0, #0
   28b72:	4770      	bx	lr

00028b74 <str_out>:
{
   28b74:	b530      	push	{r4, r5, lr}
   28b76:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   28b78:	680c      	ldr	r4, [r1, #0]
   28b7a:	1c55      	adds	r5, r2, #1
   28b7c:	b114      	cbz	r4, 28b84 <str_out+0x10>
   28b7e:	684b      	ldr	r3, [r1, #4]
   28b80:	4293      	cmp	r3, r2
   28b82:	dc01      	bgt.n	28b88 <str_out+0x14>
		ctx->count++;
   28b84:	608d      	str	r5, [r1, #8]
}
   28b86:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   28b88:	3b01      	subs	r3, #1
   28b8a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   28b8c:	bf08      	it	eq
   28b8e:	2200      	moveq	r2, #0
   28b90:	608d      	str	r5, [r1, #8]
   28b92:	bf0c      	ite	eq
   28b94:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   28b96:	54a0      	strbne	r0, [r4, r2]
   28b98:	e7f5      	b.n	28b86 <str_out+0x12>

00028b9a <printk>:
{
   28b9a:	b40f      	push	{r0, r1, r2, r3}
   28b9c:	b507      	push	{r0, r1, r2, lr}
   28b9e:	a904      	add	r1, sp, #16
   28ba0:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   28ba4:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   28ba6:	f7e7 fb2f 	bl	10208 <vprintk>
}
   28baa:	b003      	add	sp, #12
   28bac:	f85d eb04 	ldr.w	lr, [sp], #4
   28bb0:	b004      	add	sp, #16
   28bb2:	4770      	bx	lr

00028bb4 <snprintk>:
{
   28bb4:	b40c      	push	{r2, r3}
   28bb6:	b507      	push	{r0, r1, r2, lr}
   28bb8:	ab04      	add	r3, sp, #16
   28bba:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   28bbe:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   28bc0:	f7e7 fb30 	bl	10224 <vsnprintk>
}
   28bc4:	b003      	add	sp, #12
   28bc6:	f85d eb04 	ldr.w	lr, [sp], #4
   28bca:	b002      	add	sp, #8
   28bcc:	4770      	bx	lr

00028bce <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   28bce:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
   28bd0:	f013 0307 	ands.w	r3, r3, #7
   28bd4:	d105      	bne.n	28be2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   28bd6:	6803      	ldr	r3, [r0, #0]
   28bd8:	2b00      	cmp	r3, #0
		evt = EVT_START;
   28bda:	bf0c      	ite	eq
   28bdc:	2000      	moveq	r0, #0
   28bde:	2003      	movne	r0, #3
   28be0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   28be2:	2b02      	cmp	r3, #2
   28be4:	d105      	bne.n	28bf2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   28be6:	8bc3      	ldrh	r3, [r0, #30]
   28be8:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   28bea:	bf14      	ite	ne
   28bec:	2000      	movne	r0, #0
   28bee:	2004      	moveq	r0, #4
   28bf0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   28bf2:	2b01      	cmp	r3, #1
   28bf4:	d105      	bne.n	28c02 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   28bf6:	6803      	ldr	r3, [r0, #0]
   28bf8:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   28bfa:	bf0c      	ite	eq
   28bfc:	2000      	moveq	r0, #0
   28bfe:	2005      	movne	r0, #5
   28c00:	4770      	bx	lr
	int evt = EVT_NOP;
   28c02:	2000      	movs	r0, #0
}
   28c04:	4770      	bx	lr

00028c06 <notify_one>:
{
   28c06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28c0a:	460d      	mov	r5, r1
   28c0c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   28c0e:	4619      	mov	r1, r3
   28c10:	1d28      	adds	r0, r5, #4
{
   28c12:	4690      	mov	r8, r2
   28c14:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   28c16:	f7e7 fab9 	bl	1018c <sys_notify_finalize>
	if (cb) {
   28c1a:	4604      	mov	r4, r0
   28c1c:	b138      	cbz	r0, 28c2e <notify_one+0x28>
		cb(mgr, cli, state, res);
   28c1e:	4633      	mov	r3, r6
   28c20:	4642      	mov	r2, r8
   28c22:	4629      	mov	r1, r5
   28c24:	4638      	mov	r0, r7
   28c26:	46a4      	mov	ip, r4
}
   28c28:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   28c2c:	4760      	bx	ip
}
   28c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028c32 <validate_args>:
{
   28c32:	b510      	push	{r4, lr}
   28c34:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   28c36:	b140      	cbz	r0, 28c4a <validate_args+0x18>
   28c38:	b139      	cbz	r1, 28c4a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   28c3a:	1d08      	adds	r0, r1, #4
   28c3c:	f7ff ff84 	bl	28b48 <sys_notify_validate>
	if ((rv == 0)
   28c40:	b928      	cbnz	r0, 28c4e <validate_args+0x1c>
	    && ((cli->notify.flags
   28c42:	68a3      	ldr	r3, [r4, #8]
   28c44:	f033 0303 	bics.w	r3, r3, #3
   28c48:	d001      	beq.n	28c4e <validate_args+0x1c>
		rv = -EINVAL;
   28c4a:	f06f 0015 	mvn.w	r0, #21
}
   28c4e:	bd10      	pop	{r4, pc}

00028c50 <onoff_manager_init>:
{
   28c50:	b538      	push	{r3, r4, r5, lr}
   28c52:	460c      	mov	r4, r1
	if ((mgr == NULL)
   28c54:	4605      	mov	r5, r0
   28c56:	b158      	cbz	r0, 28c70 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   28c58:	b151      	cbz	r1, 28c70 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   28c5a:	680b      	ldr	r3, [r1, #0]
   28c5c:	b143      	cbz	r3, 28c70 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   28c5e:	684b      	ldr	r3, [r1, #4]
   28c60:	b133      	cbz	r3, 28c70 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   28c62:	2220      	movs	r2, #32
   28c64:	2100      	movs	r1, #0
   28c66:	f003 ffee 	bl	2cc46 <memset>
   28c6a:	612c      	str	r4, [r5, #16]
	return 0;
   28c6c:	2000      	movs	r0, #0
}
   28c6e:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   28c70:	f06f 0015 	mvn.w	r0, #21
   28c74:	e7fb      	b.n	28c6e <onoff_manager_init+0x1e>

00028c76 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   28c76:	4604      	mov	r4, r0
   28c78:	b508      	push	{r3, lr}
   28c7a:	4608      	mov	r0, r1
   28c7c:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
   28c7e:	461a      	mov	r2, r3
   28c80:	47a0      	blx	r4
	return z_impl_z_current_get();
   28c82:	f7fd ff1f 	bl	26ac4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
   28c86:	f7ed feb5 	bl	169f4 <z_impl_k_thread_abort>

00028c8a <timeutil_timegm>:

time_t timeutil_timegm(const struct tm *tm)
{
   28c8a:	b538      	push	{r3, r4, r5, lr}
	int64_t time = timeutil_timegm64(tm);
   28c8c:	f7e7 fda2 	bl	107d4 <timeutil_timegm64>
   28c90:	4605      	mov	r5, r0
   28c92:	460c      	mov	r4, r1
	time_t rv = (time_t)time;

	errno = 0;
   28c94:	f001 fd84 	bl	2a7a0 <__errno>
   28c98:	2300      	movs	r3, #0
   28c9a:	6003      	str	r3, [r0, #0]
		errno = ERANGE;
		rv = -1;
	}

	return rv;
}
   28c9c:	4621      	mov	r1, r4
   28c9e:	4628      	mov	r0, r5
   28ca0:	bd38      	pop	{r3, r4, r5, pc}

00028ca2 <chunk_size>:
		return ((uint16_t *)cmem)[f];
   28ca2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
   28ca6:	8840      	ldrh	r0, [r0, #2]
}
   28ca8:	0840      	lsrs	r0, r0, #1
   28caa:	4770      	bx	lr

00028cac <free_list_add>:
{
   28cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   28cae:	4603      	mov	r3, r0
   28cb0:	460c      	mov	r4, r1
		int bidx = bucket_idx(h, chunk_size(h, c));
   28cb2:	f7ff fff6 	bl	28ca2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   28cb6:	fab0 f080 	clz	r0, r0
   28cba:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
   28cbe:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
   28cc2:	00ca      	lsls	r2, r1, #3
   28cc4:	f8dc 6010 	ldr.w	r6, [ip, #16]
   28cc8:	1d17      	adds	r7, r2, #4
   28cca:	b28d      	uxth	r5, r1
   28ccc:	3206      	adds	r2, #6
   28cce:	b956      	cbnz	r6, 28ce6 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
   28cd0:	2101      	movs	r1, #1
   28cd2:	fa01 f000 	lsl.w	r0, r1, r0
   28cd6:	68d9      	ldr	r1, [r3, #12]
   28cd8:	4301      	orrs	r1, r0
   28cda:	60d9      	str	r1, [r3, #12]
		b->next = c;
   28cdc:	f8cc 4010 	str.w	r4, [ip, #16]
		((uint16_t *)cmem)[f] = val;
   28ce0:	53dd      	strh	r5, [r3, r7]
   28ce2:	529d      	strh	r5, [r3, r2]
}
   28ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
   28ce6:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
   28ce8:	3104      	adds	r1, #4
   28cea:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
   28cec:	53d8      	strh	r0, [r3, r7]
   28cee:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   28cf2:	529e      	strh	r6, [r3, r2]
   28cf4:	80c5      	strh	r5, [r0, #6]
   28cf6:	525d      	strh	r5, [r3, r1]
   28cf8:	e7f4      	b.n	28ce4 <free_list_add+0x38>

00028cfa <free_list_remove_bidx>:
{
   28cfa:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
   28cfc:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
   28d00:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
   28d02:	4299      	cmp	r1, r3
   28d04:	f102 0104 	add.w	r1, r2, #4
   28d08:	d10a      	bne.n	28d20 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
   28d0a:	2301      	movs	r3, #1
   28d0c:	fa03 f202 	lsl.w	r2, r3, r2
   28d10:	68c3      	ldr	r3, [r0, #12]
   28d12:	ea23 0302 	bic.w	r3, r3, r2
   28d16:	60c3      	str	r3, [r0, #12]
		b->next = 0;
   28d18:	2300      	movs	r3, #0
   28d1a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
   28d1e:	bd10      	pop	{r4, pc}
   28d20:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
   28d22:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
   28d26:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
   28d2a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   28d2e:	80cb      	strh	r3, [r1, #6]
   28d30:	8082      	strh	r2, [r0, #4]
}
   28d32:	e7f4      	b.n	28d1e <free_list_remove_bidx+0x24>

00028d34 <free_list_remove>:
{
   28d34:	b510      	push	{r4, lr}
   28d36:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
   28d38:	f7ff ffb3 	bl	28ca2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
   28d3c:	fab0 f280 	clz	r2, r0
}
   28d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		free_list_remove_bidx(h, c, bidx);
   28d44:	f1c2 021f 	rsb	r2, r2, #31
   28d48:	4618      	mov	r0, r3
   28d4a:	f7ff bfd6 	b.w	28cfa <free_list_remove_bidx>

00028d4e <alloc_chunk>:
{
   28d4e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   28d52:	fab1 f581 	clz	r5, r1
   28d56:	f1c5 091f 	rsb	r9, r5, #31
	if (b->next) {
   28d5a:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
   28d5e:	4603      	mov	r3, r0
	if (b->next) {
   28d60:	693a      	ldr	r2, [r7, #16]
{
   28d62:	460e      	mov	r6, r1
	if (b->next) {
   28d64:	b1ca      	cbz	r2, 28d9a <alloc_chunk+0x4c>
   28d66:	f04f 0803 	mov.w	r8, #3
			chunkid_t c = b->next;
   28d6a:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
   28d6c:	4618      	mov	r0, r3
   28d6e:	4621      	mov	r1, r4
   28d70:	f7ff ff97 	bl	28ca2 <chunk_size>
   28d74:	42b0      	cmp	r0, r6
   28d76:	d307      	bcc.n	28d88 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
   28d78:	464a      	mov	r2, r9
		free_list_remove_bidx(h, c, minbucket);
   28d7a:	4621      	mov	r1, r4
   28d7c:	4618      	mov	r0, r3
   28d7e:	f7ff ffbc 	bl	28cfa <free_list_remove_bidx>
}
   28d82:	4620      	mov	r0, r4
   28d84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
   28d88:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
   28d8c:	f1b8 0801 	subs.w	r8, r8, #1
   28d90:	88e1      	ldrh	r1, [r4, #6]
			b->next = next_free_chunk(h, c);
   28d92:	6139      	str	r1, [r7, #16]
		} while (--i && b->next != first);
   28d94:	d001      	beq.n	28d9a <alloc_chunk+0x4c>
   28d96:	428a      	cmp	r2, r1
   28d98:	d1e7      	bne.n	28d6a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
   28d9a:	68d9      	ldr	r1, [r3, #12]
   28d9c:	f1c5 0520 	rsb	r5, r5, #32
   28da0:	f04f 34ff 	mov.w	r4, #4294967295
   28da4:	40ac      	lsls	r4, r5
	if (bmask != 0U) {
   28da6:	400c      	ands	r4, r1
   28da8:	d0eb      	beq.n	28d82 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
   28daa:	fa94 f2a4 	rbit	r2, r4
   28dae:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   28db2:	1d11      	adds	r1, r2, #4
   28db4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
   28db8:	e7df      	b.n	28d7a <alloc_chunk+0x2c>

00028dba <merge_chunks>:
{
   28dba:	b538      	push	{r3, r4, r5, lr}
   28dbc:	4603      	mov	r3, r0
   28dbe:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   28dc0:	f7ff ff6f 	bl	28ca2 <chunk_size>
   28dc4:	4611      	mov	r1, r2
   28dc6:	4604      	mov	r4, r0
   28dc8:	4618      	mov	r0, r3
   28dca:	f7ff ff6a 	bl	28ca2 <chunk_size>
   28dce:	4404      	add	r4, r0
		((uint16_t *)cmem)[f] = val;
   28dd0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28dd4:	0061      	lsls	r1, r4, #1
		((uint16_t *)cmem)[f] = val;
   28dd6:	8069      	strh	r1, [r5, #2]
	return c + chunk_size(h, c);
   28dd8:	4618      	mov	r0, r3
   28dda:	4611      	mov	r1, r2
   28ddc:	f7ff ff61 	bl	28ca2 <chunk_size>
	void *cmem = &buf[c];
   28de0:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   28de2:	f823 4032 	strh.w	r4, [r3, r2, lsl #3]
}
   28de6:	bd38      	pop	{r3, r4, r5, pc}

00028de8 <split_chunks>:
{
   28de8:	b538      	push	{r3, r4, r5, lr}
   28dea:	4603      	mov	r3, r0
   28dec:	460c      	mov	r4, r1
	chunksz_t sz0 = chunk_size(h, lc);
   28dee:	f7ff ff58 	bl	28ca2 <chunk_size>
	chunksz_t lsz = rc - lc;
   28df2:	1a51      	subs	r1, r2, r1
	chunksz_t rsz = sz0 - lsz;
   28df4:	1aa5      	subs	r5, r4, r2
   28df6:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   28dfa:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28dfc:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
   28dfe:	8060      	strh	r0, [r4, #2]
   28e00:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   28e04:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
   28e06:	8044      	strh	r4, [r0, #2]
   28e08:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
   28e0c:	4618      	mov	r0, r3
   28e0e:	4611      	mov	r1, r2
   28e10:	f7ff ff47 	bl	28ca2 <chunk_size>
	void *cmem = &buf[c];
   28e14:	4402      	add	r2, r0
		((uint16_t *)cmem)[f] = val;
   28e16:	f823 5032 	strh.w	r5, [r3, r2, lsl #3]
}
   28e1a:	bd38      	pop	{r3, r4, r5, pc}

00028e1c <free_chunk>:
{
   28e1c:	b538      	push	{r3, r4, r5, lr}
   28e1e:	4605      	mov	r5, r0
   28e20:	460c      	mov	r4, r1
	return c + chunk_size(h, c);
   28e22:	f7ff ff3e 	bl	28ca2 <chunk_size>
   28e26:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
   28e28:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   28e2c:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
   28e2e:	07da      	lsls	r2, r3, #31
   28e30:	d40a      	bmi.n	28e48 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
   28e32:	4628      	mov	r0, r5
   28e34:	f7ff ff7e 	bl	28d34 <free_list_remove>
	return c + chunk_size(h, c);
   28e38:	4621      	mov	r1, r4
   28e3a:	4628      	mov	r0, r5
   28e3c:	f7ff ff31 	bl	28ca2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   28e40:	1822      	adds	r2, r4, r0
   28e42:	4628      	mov	r0, r5
   28e44:	f7ff ffb9 	bl	28dba <merge_chunks>
		return ((uint16_t *)cmem)[f];
   28e48:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   28e4c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
   28e4e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   28e52:	789b      	ldrb	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
   28e54:	07db      	lsls	r3, r3, #31
   28e56:	d40c      	bmi.n	28e72 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
   28e58:	4628      	mov	r0, r5
   28e5a:	f7ff ff6b 	bl	28d34 <free_list_remove>
		return ((uint16_t *)cmem)[f];
   28e5e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
   28e62:	4622      	mov	r2, r4
   28e64:	1a61      	subs	r1, r4, r1
   28e66:	4628      	mov	r0, r5
   28e68:	f7ff ffa7 	bl	28dba <merge_chunks>
   28e6c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
   28e70:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
   28e72:	4621      	mov	r1, r4
   28e74:	4628      	mov	r0, r5
}
   28e76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
   28e7a:	f7ff bf17 	b.w	28cac <free_list_add>

00028e7e <sys_heap_alloc>:
{
   28e7e:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   28e80:	6805      	ldr	r5, [r0, #0]
	if (bytes == 0U || size_too_big(h, bytes)) {
   28e82:	b909      	cbnz	r1, 28e88 <sys_heap_alloc+0xa>
		return NULL;
   28e84:	2000      	movs	r0, #0
}
   28e86:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
   28e88:	68ab      	ldr	r3, [r5, #8]
   28e8a:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   28e8e:	d9f9      	bls.n	28e84 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   28e90:	310b      	adds	r1, #11
   28e92:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   28e94:	4621      	mov	r1, r4
   28e96:	4628      	mov	r0, r5
   28e98:	f7ff ff59 	bl	28d4e <alloc_chunk>
	if (c == 0U) {
   28e9c:	4606      	mov	r6, r0
   28e9e:	2800      	cmp	r0, #0
   28ea0:	d0f0      	beq.n	28e84 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   28ea2:	4601      	mov	r1, r0
   28ea4:	4628      	mov	r0, r5
   28ea6:	f7ff fefc 	bl	28ca2 <chunk_size>
   28eaa:	42a0      	cmp	r0, r4
   28eac:	d908      	bls.n	28ec0 <sys_heap_alloc+0x42>
		split_chunks(h, c, c + chunk_sz);
   28eae:	4434      	add	r4, r6
   28eb0:	4628      	mov	r0, r5
   28eb2:	4622      	mov	r2, r4
   28eb4:	f7ff ff98 	bl	28de8 <split_chunks>
		free_list_add(h, c + chunk_sz);
   28eb8:	4621      	mov	r1, r4
   28eba:	4628      	mov	r0, r5
   28ebc:	f7ff fef6 	bl	28cac <free_list_add>
	void *cmem = &buf[c];
   28ec0:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   28ec4:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   28ec6:	8853      	ldrh	r3, [r2, #2]
   28ec8:	f043 0301 	orr.w	r3, r3, #1
   28ecc:	8053      	strh	r3, [r2, #2]
   28ece:	3004      	adds	r0, #4
	return chunk_mem(h, c);
   28ed0:	e7d9      	b.n	28e86 <sys_heap_alloc+0x8>

00028ed2 <outs>:
{
   28ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   28ed6:	4607      	mov	r7, r0
   28ed8:	4688      	mov	r8, r1
   28eda:	4615      	mov	r5, r2
   28edc:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   28ede:	4614      	mov	r4, r2
   28ee0:	42b4      	cmp	r4, r6
   28ee2:	eba4 0005 	sub.w	r0, r4, r5
   28ee6:	d302      	bcc.n	28eee <outs+0x1c>
   28ee8:	b93e      	cbnz	r6, 28efa <outs+0x28>
   28eea:	7823      	ldrb	r3, [r4, #0]
   28eec:	b12b      	cbz	r3, 28efa <outs+0x28>
		int rc = out((int)*sp++, ctx);
   28eee:	f814 0b01 	ldrb.w	r0, [r4], #1
   28ef2:	4641      	mov	r1, r8
   28ef4:	47b8      	blx	r7
		if (rc < 0) {
   28ef6:	2800      	cmp	r0, #0
   28ef8:	daf2      	bge.n	28ee0 <outs+0xe>
}
   28efa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00028efe <ring_buf_get_rewind_threshold>:
}
   28efe:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
   28f02:	4770      	bx	lr

00028f04 <ring_buf_is_empty>:
{
   28f04:	b570      	push	{r4, r5, r6, lr}
	uint32_t head = buf->head;
   28f06:	e9d0 5400 	ldrd	r5, r4, [r0]
	if (tail < head) {
   28f0a:	42ac      	cmp	r4, r5
   28f0c:	d206      	bcs.n	28f1c <ring_buf_is_empty+0x18>
		tail += get_rewind_value(buf->size,
   28f0e:	6906      	ldr	r6, [r0, #16]
   28f10:	f7ff fff5 	bl	28efe <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
   28f14:	fbb0 f0f6 	udiv	r0, r0, r6
		tail += get_rewind_value(buf->size,
   28f18:	fb06 4400 	mla	r4, r6, r0, r4
}
   28f1c:	1b63      	subs	r3, r4, r5
   28f1e:	4258      	negs	r0, r3
   28f20:	4158      	adcs	r0, r3
   28f22:	bd70      	pop	{r4, r5, r6, pc}

00028f24 <ring_buf_put_claim>:
{
   28f24:	b5f0      	push	{r4, r5, r6, r7, lr}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   28f26:	6985      	ldr	r5, [r0, #24]
	tmp_trail_mod = mod(buf, buf->misc.byte_mode.tmp_tail);
   28f28:	6886      	ldr	r6, [r0, #8]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   28f2a:	6907      	ldr	r7, [r0, #16]
{
   28f2c:	4604      	mov	r4, r0
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   28f2e:	b185      	cbz	r5, 28f52 <ring_buf_put_claim+0x2e>
   28f30:	4035      	ands	r5, r6
	space = (buf->head + buf->size) - buf->misc.byte_mode.tmp_tail;
   28f32:	6823      	ldr	r3, [r4, #0]
   28f34:	443b      	add	r3, r7
   28f36:	1b98      	subs	r0, r3, r6
	size = MIN(size, space);
   28f38:	4290      	cmp	r0, r2
   28f3a:	bf28      	it	cs
   28f3c:	4610      	movcs	r0, r2
	trail_size = buf->size - tmp_trail_mod;
   28f3e:	1b7f      	subs	r7, r7, r5
	*data = &buf->buf.buf8[tmp_trail_mod];
   28f40:	6963      	ldr	r3, [r4, #20]
	allocated = MIN(trail_size, size);
   28f42:	42b8      	cmp	r0, r7
   28f44:	bf28      	it	cs
   28f46:	4638      	movcs	r0, r7
	*data = &buf->buf.buf8[tmp_trail_mod];
   28f48:	441d      	add	r5, r3
		buf->misc.byte_mode.tmp_tail + allocated;
   28f4a:	4406      	add	r6, r0
	*data = &buf->buf.buf8[tmp_trail_mod];
   28f4c:	600d      	str	r5, [r1, #0]
	buf->misc.byte_mode.tmp_tail =
   28f4e:	60a6      	str	r6, [r4, #8]
}
   28f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   28f52:	fbb6 f5f7 	udiv	r5, r6, r7
   28f56:	fb07 6515 	mls	r5, r7, r5, r6
   28f5a:	e7ea      	b.n	28f32 <ring_buf_put_claim+0xe>

00028f5c <ring_buf_put_finish>:
{
   28f5c:	b570      	push	{r4, r5, r6, lr}
   28f5e:	4605      	mov	r5, r0
   28f60:	460c      	mov	r4, r1
	uint32_t threshold = ring_buf_get_rewind_threshold();
   28f62:	f7ff ffcc 	bl	28efe <ring_buf_get_rewind_threshold>
	if ((buf->tail + size) > (buf->head + buf->size)) {
   28f66:	686e      	ldr	r6, [r5, #4]
   28f68:	692b      	ldr	r3, [r5, #16]
   28f6a:	682a      	ldr	r2, [r5, #0]
   28f6c:	1931      	adds	r1, r6, r4
   28f6e:	441a      	add	r2, r3
   28f70:	4291      	cmp	r1, r2
   28f72:	d80a      	bhi.n	28f8a <ring_buf_put_finish+0x2e>
	if (buf->tail > threshold) {
   28f74:	4286      	cmp	r6, r0
		rew = 0;
   28f76:	bf92      	itee	ls
   28f78:	2300      	movls	r3, #0
	return buf_size * (threshold / buf_size);
   28f7a:	fbb0 f0f3 	udivhi	r0, r0, r3
   28f7e:	4343      	mulhi	r3, r0
	buf->tail += (size - rew);
   28f80:	1ac9      	subs	r1, r1, r3
	buf->misc.byte_mode.tmp_tail = buf->tail;
   28f82:	e9c5 1101 	strd	r1, r1, [r5, #4]
	return 0;
   28f86:	2000      	movs	r0, #0
}
   28f88:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   28f8a:	f06f 0015 	mvn.w	r0, #21
   28f8e:	e7fb      	b.n	28f88 <ring_buf_put_finish+0x2c>

00028f90 <ring_buf_get_claim>:
{
   28f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tail < buf->misc.byte_mode.tmp_head) {
   28f94:	68c3      	ldr	r3, [r0, #12]
	uint32_t tail = buf->tail;
   28f96:	6846      	ldr	r6, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   28f98:	42b3      	cmp	r3, r6
{
   28f9a:	4604      	mov	r4, r0
   28f9c:	460f      	mov	r7, r1
   28f9e:	4690      	mov	r8, r2
	if (tail < buf->misc.byte_mode.tmp_head) {
   28fa0:	d906      	bls.n	28fb0 <ring_buf_get_claim+0x20>
   28fa2:	6905      	ldr	r5, [r0, #16]
		tail += get_rewind_value(buf->size,
   28fa4:	f7ff ffab 	bl	28efe <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
   28fa8:	fbb0 f0f5 	udiv	r0, r0, r5
		tail += get_rewind_value(buf->size,
   28fac:	fb05 6600 	mla	r6, r5, r0, r6
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   28fb0:	69a5      	ldr	r5, [r4, #24]
	tmp_head_mod = mod(buf, buf->misc.byte_mode.tmp_head);
   28fb2:	68e1      	ldr	r1, [r4, #12]
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   28fb4:	6923      	ldr	r3, [r4, #16]
   28fb6:	b185      	cbz	r5, 28fda <ring_buf_get_claim+0x4a>
   28fb8:	400d      	ands	r5, r1
	space = tail - buf->misc.byte_mode.tmp_head;
   28fba:	1a70      	subs	r0, r6, r1
	granted_size = MIN(size, space);
   28fbc:	4540      	cmp	r0, r8
   28fbe:	bf28      	it	cs
   28fc0:	4640      	movcs	r0, r8
   28fc2:	4606      	mov	r6, r0
	trail_size = buf->size - tmp_head_mod;
   28fc4:	1b58      	subs	r0, r3, r5
	granted_size = MIN(trail_size, granted_size);
   28fc6:	42b0      	cmp	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   28fc8:	6963      	ldr	r3, [r4, #20]
	granted_size = MIN(trail_size, granted_size);
   28fca:	bf28      	it	cs
   28fcc:	4630      	movcs	r0, r6
	*data = &buf->buf.buf8[tmp_head_mod];
   28fce:	441d      	add	r5, r3
	buf->misc.byte_mode.tmp_head += granted_size;
   28fd0:	4401      	add	r1, r0
	*data = &buf->buf.buf8[tmp_head_mod];
   28fd2:	603d      	str	r5, [r7, #0]
	buf->misc.byte_mode.tmp_head += granted_size;
   28fd4:	60e1      	str	r1, [r4, #12]
}
   28fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return likely(buf->mask) ? val & buf->mask : val % buf->size;
   28fda:	fbb1 f5f3 	udiv	r5, r1, r3
   28fde:	fb03 1515 	mls	r5, r3, r5, r1
   28fe2:	e7ea      	b.n	28fba <ring_buf_get_claim+0x2a>

00028fe4 <ring_buf_get_finish>:
{
   28fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t tail = buf->tail;
   28fe6:	6847      	ldr	r7, [r0, #4]
	if (tail < buf->misc.byte_mode.tmp_head) {
   28fe8:	68c3      	ldr	r3, [r0, #12]
   28fea:	42bb      	cmp	r3, r7
{
   28fec:	4605      	mov	r5, r0
   28fee:	460c      	mov	r4, r1
	if (tail < buf->misc.byte_mode.tmp_head) {
   28ff0:	d912      	bls.n	29018 <ring_buf_get_finish+0x34>
		rew = get_rewind_value(buf->size,
   28ff2:	6906      	ldr	r6, [r0, #16]
   28ff4:	f7ff ff83 	bl	28efe <ring_buf_get_rewind_threshold>
	return buf_size * (threshold / buf_size);
   28ff8:	fbb0 f0f6 	udiv	r0, r0, r6
   28ffc:	4370      	muls	r0, r6
		tail += rew;
   28ffe:	4407      	add	r7, r0
	if ((buf->head + size) > tail) {
   29000:	6829      	ldr	r1, [r5, #0]
   29002:	4421      	add	r1, r4
   29004:	42b9      	cmp	r1, r7
	buf->head += (size - rew);
   29006:	bf9f      	itttt	ls
   29008:	1a09      	subls	r1, r1, r0
   2900a:	6029      	strls	r1, [r5, #0]
	buf->misc.byte_mode.tmp_head = buf->head;
   2900c:	60e9      	strls	r1, [r5, #12]
	return 0;
   2900e:	2000      	movls	r0, #0
		return -EINVAL;
   29010:	bf88      	it	hi
   29012:	f06f 0015 	mvnhi.w	r0, #21
}
   29016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rew = 0;
   29018:	2000      	movs	r0, #0
   2901a:	e7f1      	b.n	29000 <ring_buf_get_finish+0x1c>

0002901c <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
   2901c:	4040      	eors	r0, r0
   2901e:	f380 8811 	msr	BASEPRI, r0
   29022:	f04f 0004 	mov.w	r0, #4
   29026:	df02      	svc	2
}
   29028:	4770      	bx	lr

0002902a <fnmatchx>:
    return ok == negate ? NULL : pattern;
}


static int fnmatchx(const char *pattern, const char *string, int flags, size_t recursion)
{
   2902a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2902e:	b087      	sub	sp, #28
   29030:	468a      	mov	sl, r1
   29032:	4614      	mov	r4, r2
   29034:	9302      	str	r3, [sp, #8]
    const char *stringstart, *r;
    char c, test;

    if ((pattern == NULL) || (string == NULL))
   29036:	4605      	mov	r5, r0
   29038:	b918      	cbnz	r0, 29042 <fnmatchx+0x18>
    {
        return FNM_NOMATCH;
   2903a:	2001      	movs	r0, #1
                return FNM_NOMATCH;
            break;
        }
    }
    /* NOTREACHED */
}
   2903c:	b007      	add	sp, #28
   2903e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ((pattern == NULL) || (string == NULL))
   29042:	2900      	cmp	r1, #0
   29044:	d0f9      	beq.n	2903a <fnmatchx+0x10>
    if (recursion-- == 0)
   29046:	9b02      	ldr	r3, [sp, #8]
   29048:	2b00      	cmp	r3, #0
   2904a:	f000 811a 	beq.w	29282 <fnmatchx+0x258>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   2904e:	f004 0304 	and.w	r3, r4, #4
   29052:	460a      	mov	r2, r1
   29054:	9304      	str	r3, [sp, #16]
        switch (c = FOLDCASE(*pattern++, flags)) {
   29056:	46a8      	mov	r8, r5
   29058:	4621      	mov	r1, r4
   2905a:	f818 0b01 	ldrb.w	r0, [r8], #1
   2905e:	f7e8 fa17 	bl	11490 <foldcase>
   29062:	4603      	mov	r3, r0
   29064:	b2c0      	uxtb	r0, r0
   29066:	283f      	cmp	r0, #63	; 0x3f
   29068:	7817      	ldrb	r7, [r2, #0]
   2906a:	4606      	mov	r6, r0
   2906c:	d024      	beq.n	290b8 <fnmatchx+0x8e>
   2906e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   29072:	d10a      	bne.n	2908a <fnmatchx+0x60>
   29074:	b1c0      	cbz	r0, 290a8 <fnmatchx+0x7e>
   29076:	282a      	cmp	r0, #42	; 0x2a
   29078:	d035      	beq.n	290e6 <fnmatchx+0xbc>
            if (c != FOLDCASE(*string++, flags))
   2907a:	4621      	mov	r1, r4
   2907c:	4638      	mov	r0, r7
   2907e:	3201      	adds	r2, #1
   29080:	f7e8 fa06 	bl	11490 <foldcase>
   29084:	4286      	cmp	r6, r0
   29086:	d01e      	beq.n	290c6 <fnmatchx+0x9c>
   29088:	e7d7      	b.n	2903a <fnmatchx+0x10>
        switch (c = FOLDCASE(*pattern++, flags)) {
   2908a:	285b      	cmp	r0, #91	; 0x5b
   2908c:	d07b      	beq.n	29186 <fnmatchx+0x15c>
   2908e:	285c      	cmp	r0, #92	; 0x5c
   29090:	d1f3      	bne.n	2907a <fnmatchx+0x50>
            if (!(flags & FNM_NOESCAPE)) {
   29092:	07e3      	lsls	r3, r4, #31
   29094:	d4f1      	bmi.n	2907a <fnmatchx+0x50>
                if ((c = FOLDCASE(*pattern++, flags)) == EOS) {
   29096:	7868      	ldrb	r0, [r5, #1]
   29098:	f7e8 f9fa 	bl	11490 <foldcase>
   2909c:	f010 06ff 	ands.w	r6, r0, #255	; 0xff
   290a0:	bf18      	it	ne
   290a2:	f105 0802 	addne.w	r8, r5, #2
   290a6:	e7e8      	b.n	2907a <fnmatchx+0x50>
            if ((flags & FNM_LEADING_DIR) && *string == '/')
   290a8:	06e4      	lsls	r4, r4, #27
   290aa:	d501      	bpl.n	290b0 <fnmatchx+0x86>
   290ac:	2f2f      	cmp	r7, #47	; 0x2f
   290ae:	d0c5      	beq.n	2903c <fnmatchx+0x12>
            return *string == EOS ? 0 : FNM_NOMATCH;
   290b0:	1e38      	subs	r0, r7, #0
                        0 : FNM_NOMATCH;
   290b2:	bf18      	it	ne
   290b4:	2001      	movne	r0, #1
   290b6:	e7c1      	b.n	2903c <fnmatchx+0x12>
            if (*string == EOS)
   290b8:	2f00      	cmp	r7, #0
   290ba:	d0be      	beq.n	2903a <fnmatchx+0x10>
            if (*string == '/' && (flags & FNM_PATHNAME))
   290bc:	2f2f      	cmp	r7, #47	; 0x2f
   290be:	d104      	bne.n	290ca <fnmatchx+0xa0>
   290c0:	07a1      	lsls	r1, r4, #30
   290c2:	d4ba      	bmi.n	2903a <fnmatchx+0x10>
            ++string;
   290c4:	3201      	adds	r2, #1
            break;
   290c6:	4645      	mov	r5, r8
   290c8:	e7c5      	b.n	29056 <fnmatchx+0x2c>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   290ca:	2f2e      	cmp	r7, #46	; 0x2e
   290cc:	d1fa      	bne.n	290c4 <fnmatchx+0x9a>
   290ce:	9b04      	ldr	r3, [sp, #16]
   290d0:	2b00      	cmp	r3, #0
   290d2:	d0f7      	beq.n	290c4 <fnmatchx+0x9a>
   290d4:	4552      	cmp	r2, sl
   290d6:	d0b0      	beq.n	2903a <fnmatchx+0x10>
                (string == stringstart ||
   290d8:	07a3      	lsls	r3, r4, #30
   290da:	d5f3      	bpl.n	290c4 <fnmatchx+0x9a>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   290dc:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   290e0:	2b2f      	cmp	r3, #47	; 0x2f
   290e2:	d1ef      	bne.n	290c4 <fnmatchx+0x9a>
   290e4:	e7a9      	b.n	2903a <fnmatchx+0x10>
            c = FOLDCASE(*pattern, flags);
   290e6:	7868      	ldrb	r0, [r5, #1]
                c = FOLDCASE(*++pattern, flags);
   290e8:	f7e8 f9d2 	bl	11490 <foldcase>
   290ec:	b2c1      	uxtb	r1, r0
            while (c == '*')
   290ee:	292a      	cmp	r1, #42	; 0x2a
   290f0:	d018      	beq.n	29124 <fnmatchx+0xfa>
            if (*string == '.' && (flags & FNM_PERIOD) &&
   290f2:	2f2e      	cmp	r7, #46	; 0x2e
   290f4:	d109      	bne.n	2910a <fnmatchx+0xe0>
   290f6:	9b04      	ldr	r3, [sp, #16]
   290f8:	b13b      	cbz	r3, 2910a <fnmatchx+0xe0>
   290fa:	4552      	cmp	r2, sl
   290fc:	d09d      	beq.n	2903a <fnmatchx+0x10>
                (string == stringstart ||
   290fe:	07a7      	lsls	r7, r4, #30
   29100:	d503      	bpl.n	2910a <fnmatchx+0xe0>
                ((flags & FNM_PATHNAME) && *(string - 1) == '/')))
   29102:	f812 3c01 	ldrb.w	r3, [r2, #-1]
   29106:	2b2f      	cmp	r3, #47	; 0x2f
   29108:	d097      	beq.n	2903a <fnmatchx+0x10>
            if (c == EOS) {
   2910a:	b979      	cbnz	r1, 2912c <fnmatchx+0x102>
                if (flags & FNM_PATHNAME)
   2910c:	f014 0002 	ands.w	r0, r4, #2
   29110:	d094      	beq.n	2903c <fnmatchx+0x12>
                        0 : FNM_NOMATCH;
   29112:	06e6      	lsls	r6, r4, #27
   29114:	f100 80b7 	bmi.w	29286 <fnmatchx+0x25c>
                        strchr(string, '/') == NULL ?
   29118:	212f      	movs	r1, #47	; 0x2f
   2911a:	4610      	mov	r0, r2
   2911c:	f003 fd9b 	bl	2cc56 <strchr>
                        0 : FNM_NOMATCH;
   29120:	3800      	subs	r0, #0
   29122:	e7c6      	b.n	290b2 <fnmatchx+0x88>
                c = FOLDCASE(*++pattern, flags);
   29124:	f818 0f01 	ldrb.w	r0, [r8, #1]!
   29128:	4621      	mov	r1, r4
   2912a:	e7dd      	b.n	290e8 <fnmatchx+0xbe>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   2912c:	292f      	cmp	r1, #47	; 0x2f
   2912e:	d021      	beq.n	29174 <fnmatchx+0x14a>
    if (recursion-- == 0)
   29130:	9b02      	ldr	r3, [sp, #8]
   29132:	4616      	mov	r6, r2
   29134:	1e5f      	subs	r7, r3, #1
                switch ((e = fnmatchx(pattern, string,
   29136:	f024 0904 	bic.w	r9, r4, #4
                if (test == '/' && flags & FNM_PATHNAME)
   2913a:	f004 0a02 	and.w	sl, r4, #2
   2913e:	46b3      	mov	fp, r6
            while ((test = FOLDCASE(*string, flags)) != EOS) {
   29140:	4621      	mov	r1, r4
   29142:	f89b 0000 	ldrb.w	r0, [fp]
   29146:	f7e8 f9a3 	bl	11490 <foldcase>
   2914a:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
   2914e:	f106 0601 	add.w	r6, r6, #1
   29152:	f43f af72 	beq.w	2903a <fnmatchx+0x10>
                switch ((e = fnmatchx(pattern, string,
   29156:	463b      	mov	r3, r7
   29158:	464a      	mov	r2, r9
   2915a:	4659      	mov	r1, fp
   2915c:	4640      	mov	r0, r8
   2915e:	f7ff ff64 	bl	2902a <fnmatchx>
   29162:	2801      	cmp	r0, #1
   29164:	f47f af6a 	bne.w	2903c <fnmatchx+0x12>
                if (test == '/' && flags & FNM_PATHNAME)
   29168:	2d2f      	cmp	r5, #47	; 0x2f
   2916a:	d1e8      	bne.n	2913e <fnmatchx+0x114>
   2916c:	f1ba 0f00 	cmp.w	sl, #0
   29170:	d0e5      	beq.n	2913e <fnmatchx+0x114>
   29172:	e762      	b.n	2903a <fnmatchx+0x10>
            } else if (c == '/' && flags & FNM_PATHNAME) {
   29174:	07a5      	lsls	r5, r4, #30
   29176:	d5db      	bpl.n	29130 <fnmatchx+0x106>
                if ((string = strchr(string, '/')) == NULL)
   29178:	4610      	mov	r0, r2
   2917a:	f003 fd6c 	bl	2cc56 <strchr>
   2917e:	4602      	mov	r2, r0
   29180:	2800      	cmp	r0, #0
   29182:	d1a0      	bne.n	290c6 <fnmatchx+0x9c>
   29184:	e759      	b.n	2903a <fnmatchx+0x10>
            if (*string == EOS)
   29186:	2f00      	cmp	r7, #0
   29188:	f43f af57 	beq.w	2903a <fnmatchx+0x10>
            if (*string == '/' && flags & FNM_PATHNAME)
   2918c:	2f2f      	cmp	r7, #47	; 0x2f
   2918e:	d102      	bne.n	29196 <fnmatchx+0x16c>
   29190:	07a0      	lsls	r0, r4, #30
   29192:	f53f af52 	bmi.w	2903a <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   29196:	4621      	mov	r1, r4
   29198:	4638      	mov	r0, r7
   2919a:	f7e8 f979 	bl	11490 <foldcase>
   2919e:	9000      	str	r0, [sp, #0]
    if (pattern == NULL)
   291a0:	f1b8 0f00 	cmp.w	r8, #0
   291a4:	f43f af49 	beq.w	2903a <fnmatchx+0x10>
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   291a8:	786b      	ldrb	r3, [r5, #1]
   291aa:	2b21      	cmp	r3, #33	; 0x21
   291ac:	d001      	beq.n	291b2 <fnmatchx+0x188>
   291ae:	2b5e      	cmp	r3, #94	; 0x5e
   291b0:	d126      	bne.n	29200 <fnmatchx+0x1d6>
        ++pattern;
   291b2:	3502      	adds	r5, #2
   291b4:	2301      	movs	r3, #1
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   291b6:	9301      	str	r3, [sp, #4]
    need = 1;
   291b8:	2301      	movs	r3, #1
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   291ba:	ea04 0103 	and.w	r1, r4, r3
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   291be:	f04f 0b00 	mov.w	fp, #0
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   291c2:	9103      	str	r1, [sp, #12]
    for (ok = 0; (c = FOLDCASE(*pattern++, flags)) != ']' || need;) {
   291c4:	462e      	mov	r6, r5
   291c6:	4621      	mov	r1, r4
   291c8:	f816 0b01 	ldrb.w	r0, [r6], #1
   291cc:	9305      	str	r3, [sp, #20]
   291ce:	f7e8 f95f 	bl	11490 <foldcase>
   291d2:	fa5f f980 	uxtb.w	r9, r0
   291d6:	f1b9 0f5d 	cmp.w	r9, #93	; 0x5d
   291da:	9b05      	ldr	r3, [sp, #20]
   291dc:	d113      	bne.n	29206 <fnmatchx+0x1dc>
   291de:	bb2b      	cbnz	r3, 2922c <fnmatchx+0x202>
    return ok == negate ? NULL : pattern;
   291e0:	9b01      	ldr	r3, [sp, #4]
   291e2:	455b      	cmp	r3, fp
   291e4:	f43f af29 	beq.w	2903a <fnmatchx+0x10>
            if ((r = rangematch(pattern,
   291e8:	2e00      	cmp	r6, #0
   291ea:	f43f af26 	beq.w	2903a <fnmatchx+0x10>
            if (r == (void *)-1) {
   291ee:	1c71      	adds	r1, r6, #1
   291f0:	d103      	bne.n	291fa <fnmatchx+0x1d0>
                if (*string != '[')
   291f2:	2f5b      	cmp	r7, #91	; 0x5b
   291f4:	f47f af21 	bne.w	2903a <fnmatchx+0x10>
   291f8:	4646      	mov	r6, r8
            ++string;
   291fa:	3201      	adds	r2, #1
            break;
   291fc:	46b0      	mov	r8, r6
   291fe:	e762      	b.n	290c6 <fnmatchx+0x9c>
   29200:	4645      	mov	r5, r8
    if ((negate = (*pattern == '!' || *pattern == '^')) != 0)
   29202:	2300      	movs	r3, #0
   29204:	e7d7      	b.n	291b6 <fnmatchx+0x18c>
        if (c == '/')
   29206:	f1b9 0f2f 	cmp.w	r9, #47	; 0x2f
   2920a:	d0f2      	beq.n	291f2 <fnmatchx+0x1c8>
        if (c == '\\' && !(flags & FNM_NOESCAPE))
   2920c:	f1b9 0f5c 	cmp.w	r9, #92	; 0x5c
   29210:	d108      	bne.n	29224 <fnmatchx+0x1fa>
   29212:	9b03      	ldr	r3, [sp, #12]
   29214:	b953      	cbnz	r3, 2922c <fnmatchx+0x202>
            c = FOLDCASE(*pattern++, flags);
   29216:	7868      	ldrb	r0, [r5, #1]
   29218:	4621      	mov	r1, r4
   2921a:	f7e8 f939 	bl	11490 <foldcase>
   2921e:	1cae      	adds	r6, r5, #2
   29220:	fa5f f980 	uxtb.w	r9, r0
        if (c == EOS)
   29224:	f1b9 0f00 	cmp.w	r9, #0
   29228:	f43f af07 	beq.w	2903a <fnmatchx+0x10>
        if (*pattern == '-' 
   2922c:	7833      	ldrb	r3, [r6, #0]
   2922e:	2b2d      	cmp	r3, #45	; 0x2d
   29230:	d120      	bne.n	29274 <fnmatchx+0x24a>
            && (c2 = FOLDCASE(*(pattern + 1), flags)) != EOS &&
   29232:	7870      	ldrb	r0, [r6, #1]
   29234:	4621      	mov	r1, r4
   29236:	f7e8 f92b 	bl	11490 <foldcase>
   2923a:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
   2923e:	d019      	beq.n	29274 <fnmatchx+0x24a>
   29240:	285d      	cmp	r0, #93	; 0x5d
   29242:	d017      	beq.n	29274 <fnmatchx+0x24a>
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   29244:	285c      	cmp	r0, #92	; 0x5c
            pattern += 2;
   29246:	f106 0502 	add.w	r5, r6, #2
            if (c2 == '\\' && !(flags & FNM_NOESCAPE))
   2924a:	d10a      	bne.n	29262 <fnmatchx+0x238>
   2924c:	9b03      	ldr	r3, [sp, #12]
   2924e:	b943      	cbnz	r3, 29262 <fnmatchx+0x238>
                c2 = FOLDCASE(*pattern++, flags);
   29250:	78b0      	ldrb	r0, [r6, #2]
   29252:	f7e8 f91d 	bl	11490 <foldcase>
            if (c2 == EOS)
   29256:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
                c2 = FOLDCASE(*pattern++, flags);
   2925a:	f106 0503 	add.w	r5, r6, #3
            if (c2 == EOS)
   2925e:	f43f aeec 	beq.w	2903a <fnmatchx+0x10>
            if (c <= test && test <= c2)
   29262:	9b00      	ldr	r3, [sp, #0]
   29264:	454b      	cmp	r3, r9
   29266:	db03      	blt.n	29270 <fnmatchx+0x246>
                ok = 1;
   29268:	4283      	cmp	r3, r0
   2926a:	bfd8      	it	le
   2926c:	f04f 0b01 	movle.w	fp, #1
            ok = 1;
   29270:	2300      	movs	r3, #0
   29272:	e7a7      	b.n	291c4 <fnmatchx+0x19a>
        } else if (c == test)
   29274:	9b00      	ldr	r3, [sp, #0]
   29276:	4635      	mov	r5, r6
   29278:	454b      	cmp	r3, r9
   2927a:	bf08      	it	eq
   2927c:	f04f 0b01 	moveq.w	fp, #1
   29280:	e7f6      	b.n	29270 <fnmatchx+0x246>
        return FNM_NORES;
   29282:	2003      	movs	r0, #3
   29284:	e6da      	b.n	2903c <fnmatchx+0x12>
                return 0;
   29286:	4608      	mov	r0, r1
   29288:	e6d8      	b.n	2903c <fnmatchx+0x12>

0002928a <fnmatch>:

int fnmatch(const char *pattern, const char *string, int flags)
{
    return fnmatchx(pattern, string, flags, 64);
   2928a:	2340      	movs	r3, #64	; 0x40
   2928c:	f7ff becd 	b.w	2902a <fnmatchx>

00029290 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   29290:	4770      	bx	lr

00029292 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   29292:	2300      	movs	r3, #0
	list->head = NULL;
   29294:	e9c0 3300 	strd	r3, r3, [r0]
}
   29298:	4770      	bx	lr

0002929a <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2929a:	6803      	ldr	r3, [r0, #0]
   2929c:	b923      	cbnz	r3, 292a8 <log_list_add_tail+0xe>
		list->head = msg;
   2929e:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   292a0:	2300      	movs	r3, #0
	list->tail = msg;
   292a2:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   292a4:	600b      	str	r3, [r1, #0]
}
   292a6:	4770      	bx	lr
		list->tail->next = msg;
   292a8:	6843      	ldr	r3, [r0, #4]
   292aa:	6019      	str	r1, [r3, #0]
   292ac:	e7f8      	b.n	292a0 <log_list_add_tail+0x6>

000292ae <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   292ae:	6800      	ldr	r0, [r0, #0]
   292b0:	4770      	bx	lr

000292b2 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   292b2:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   292b4:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   292b6:	b108      	cbz	r0, 292bc <log_list_head_get+0xa>
		list->head = list->head->next;
   292b8:	6802      	ldr	r2, [r0, #0]
   292ba:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   292bc:	4770      	bx	lr

000292be <log_backend_is_active>:
	return backend->cb->active;
   292be:	6843      	ldr	r3, [r0, #4]
}
   292c0:	7958      	ldrb	r0, [r3, #5]
   292c2:	4770      	bx	lr

000292c4 <z_log_msg_std_alloc>:
{
   292c4:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   292c6:	f7e8 fd7f 	bl	11dc8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   292ca:	b118      	cbz	r0, 292d4 <z_log_msg_std_alloc+0x10>
		msg->hdr.ref_cnt = 1;
   292cc:	2301      	movs	r3, #1
   292ce:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   292d0:	2300      	movs	r3, #0
   292d2:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   292d4:	bd08      	pop	{r3, pc}

000292d6 <default_get_timestamp>:
   292d6:	f003 b9e1 	b.w	2c69c <sys_clock_cycle_get_32>

000292da <dummy_timestamp>:
   292da:	2000      	movs	r0, #0
   292dc:	4770      	bx	lr

000292de <log_0>:
{
   292de:	b538      	push	{r3, r4, r5, lr}
   292e0:	4605      	mov	r5, r0
   292e2:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   292e4:	f7ff ffee 	bl	292c4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   292e8:	b128      	cbz	r0, 292f6 <log_0+0x18>
		msg->str = str;
   292ea:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   292ec:	4621      	mov	r1, r4
}
   292ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   292f2:	f7e8 bb17 	b.w	11924 <msg_finalize>
}
   292f6:	bd38      	pop	{r3, r4, r5, pc}

000292f8 <log_1>:
{
   292f8:	b570      	push	{r4, r5, r6, lr}
   292fa:	4606      	mov	r6, r0
   292fc:	460d      	mov	r5, r1
   292fe:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   29300:	f7ff ffe0 	bl	292c4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   29304:	b158      	cbz	r0, 2931e <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   29306:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   29308:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2930a:	2101      	movs	r1, #1
   2930c:	f361 1207 	bfi	r2, r1, #4, #4
   29310:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   29312:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   29314:	4621      	mov	r1, r4
}
   29316:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   2931a:	f7e8 bb03 	b.w	11924 <msg_finalize>
}
   2931e:	bd70      	pop	{r4, r5, r6, pc}

00029320 <log_2>:
{
   29320:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29324:	4680      	mov	r8, r0
   29326:	460f      	mov	r7, r1
   29328:	4616      	mov	r6, r2
   2932a:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2932c:	f7ff ffca 	bl	292c4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   29330:	b168      	cbz	r0, 2934e <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   29332:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   29334:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   29338:	2202      	movs	r2, #2
   2933a:	f362 1307 	bfi	r3, r2, #4, #4
   2933e:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   29340:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   29344:	4629      	mov	r1, r5
}
   29346:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   2934a:	f7e8 baeb 	b.w	11924 <msg_finalize>
}
   2934e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029352 <log_3>:
{
   29352:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   29356:	4680      	mov	r8, r0
   29358:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   2935c:	460f      	mov	r7, r1
   2935e:	4616      	mov	r6, r2
   29360:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   29362:	f7ff ffaf 	bl	292c4 <z_log_msg_std_alloc>

	if (msg != NULL) {
   29366:	b170      	cbz	r0, 29386 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   29368:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   2936a:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   2936e:	2203      	movs	r2, #3
   29370:	f362 1307 	bfi	r3, r2, #4, #4
   29374:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   29376:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   2937a:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   2937c:	4649      	mov	r1, r9
}
   2937e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   29382:	f7e8 bacf 	b.w	11924 <msg_finalize>
}
   29386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002938a <log_n>:
{
   2938a:	b510      	push	{r4, lr}
   2938c:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   2938e:	f7e8 fd6d 	bl	11e6c <log_msg_create_n>
		if (msg == NULL) {
   29392:	b120      	cbz	r0, 2939e <log_n+0x14>
		msg_finalize(msg, src_level);
   29394:	4621      	mov	r1, r4
}
   29396:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2939a:	f7e8 bac3 	b.w	11924 <msg_finalize>
}
   2939e:	bd10      	pop	{r4, pc}

000293a0 <log_hexdump>:
{
   293a0:	b510      	push	{r4, lr}
   293a2:	461c      	mov	r4, r3
			log_msg_hexdump_create(str, (const uint8_t *)data, length);
   293a4:	f000 f8a3 	bl	294ee <log_msg_hexdump_create>
		if (msg == NULL) {
   293a8:	b120      	cbz	r0, 293b4 <log_hexdump+0x14>
		msg_finalize(msg, src_level);
   293aa:	4621      	mov	r1, r4
}
   293ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   293b0:	f7e8 bab8 	b.w	11924 <msg_finalize>
}
   293b4:	bd10      	pop	{r4, pc}

000293b6 <z_log_get_tag>:
}
   293b6:	2000      	movs	r0, #0
   293b8:	4770      	bx	lr

000293ba <log_msg_hexdump_data_op>:
{
   293ba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   293be:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   293c0:	8903      	ldrh	r3, [r0, #8]
{
   293c2:	f89d 7020 	ldrb.w	r7, [sp, #32]
   293c6:	460e      	mov	r6, r1
   293c8:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   293ca:	f3c3 028d 	ubfx	r2, r3, #2, #14
	if (offset >= available_len) {
   293ce:	42a2      	cmp	r2, r4
   293d0:	d803      	bhi.n	293da <log_msg_hexdump_data_op+0x20>
		*length = 0;
   293d2:	2300      	movs	r3, #0
   293d4:	600b      	str	r3, [r1, #0]
}
   293d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   293da:	680b      	ldr	r3, [r1, #0]
   293dc:	4423      	add	r3, r4
   293de:	4293      	cmp	r3, r2
		*length = available_len - offset;
   293e0:	bf84      	itt	hi
   293e2:	1b13      	subhi	r3, r2, r4
   293e4:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   293e6:	2a0c      	cmp	r2, #12
	req_len = *length;
   293e8:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   293ec:	d92a      	bls.n	29444 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   293ee:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   293f0:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   293f4:	d82d      	bhi.n	29452 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   293f6:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   293f8:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   293fa:	454a      	cmp	r2, r9
   293fc:	bf28      	it	cs
   293fe:	464a      	movcs	r2, r9
   29400:	4615      	mov	r5, r2
		if (put_op) {
   29402:	4420      	add	r0, r4
   29404:	b317      	cbz	r7, 2944c <log_msg_hexdump_data_op+0x92>
   29406:	4631      	mov	r1, r6
   29408:	f003 fbf5 	bl	2cbf6 <memcpy>
		req_len -= cpy_len;
   2940c:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   29410:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   29412:	f1b9 0f00 	cmp.w	r9, #0
   29416:	d0de      	beq.n	293d6 <log_msg_hexdump_data_op+0x1c>
   29418:	f1b8 0f00 	cmp.w	r8, #0
   2941c:	d0db      	beq.n	293d6 <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   2941e:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   29422:	454d      	cmp	r5, r9
   29424:	bf28      	it	cs
   29426:	464d      	movcs	r5, r9
		if (put_op) {
   29428:	1d20      	adds	r0, r4, #4
   2942a:	4440      	add	r0, r8
   2942c:	462a      	mov	r2, r5
   2942e:	b1bf      	cbz	r7, 29460 <log_msg_hexdump_data_op+0xa6>
   29430:	4631      	mov	r1, r6
   29432:	f003 fbe0 	bl	2cbf6 <memcpy>
		req_len -= cpy_len;
   29436:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   2943a:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   2943e:	442e      	add	r6, r5
		offset = 0;
   29440:	2400      	movs	r4, #0
   29442:	e7e6      	b.n	29412 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   29444:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   29446:	f04f 0800 	mov.w	r8, #0
   2944a:	e7d6      	b.n	293fa <log_msg_hexdump_data_op+0x40>
   2944c:	4601      	mov	r1, r0
   2944e:	4630      	mov	r0, r6
   29450:	e7da      	b.n	29408 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   29452:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   29454:	2c1b      	cmp	r4, #27
   29456:	d9dc      	bls.n	29412 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   29458:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   2945c:	3c1c      	subs	r4, #28
   2945e:	e7f9      	b.n	29454 <log_msg_hexdump_data_op+0x9a>
   29460:	4601      	mov	r1, r0
   29462:	4630      	mov	r0, r6
   29464:	e7e5      	b.n	29432 <log_msg_hexdump_data_op+0x78>

00029466 <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   29466:	3004      	adds	r0, #4
   29468:	f3bf 8f5b 	dmb	ish
   2946c:	e850 3f00 	ldrex	r3, [r0]
   29470:	3301      	adds	r3, #1
   29472:	e840 3200 	strex	r2, r3, [r0]
   29476:	2a00      	cmp	r2, #0
   29478:	d1f8      	bne.n	2946c <log_msg_get+0x6>
   2947a:	f3bf 8f5b 	dmb	ish
}
   2947e:	4770      	bx	lr

00029480 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   29480:	7a40      	ldrb	r0, [r0, #9]
}
   29482:	0900      	lsrs	r0, r0, #4
   29484:	4770      	bx	lr

00029486 <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   29486:	7a43      	ldrb	r3, [r0, #9]
   29488:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   2948c:	ea4f 1213 	mov.w	r2, r3, lsr #4
   29490:	d216      	bcs.n	294c0 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   29492:	2a03      	cmp	r2, #3
   29494:	d803      	bhi.n	2949e <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   29496:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   2949a:	6948      	ldr	r0, [r1, #20]
   2949c:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   2949e:	2901      	cmp	r1, #1
   294a0:	d803      	bhi.n	294aa <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   294a2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   294a6:	6988      	ldr	r0, [r1, #24]
   294a8:	4770      	bx	lr
	cont = msg->payload.ext.next;
   294aa:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   294ac:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   294ae:	2906      	cmp	r1, #6
   294b0:	d803      	bhi.n	294ba <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   294b2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   294b6:	6848      	ldr	r0, [r1, #4]
   294b8:	4770      	bx	lr
		cont = cont->next;
   294ba:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   294bc:	3907      	subs	r1, #7
		cont = cont->next;
   294be:	e7f6      	b.n	294ae <log_msg_arg_get+0x28>
		return 0;
   294c0:	2000      	movs	r0, #0
}
   294c2:	4770      	bx	lr

000294c4 <log_msg_put>:
{
   294c4:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   294c6:	1d02      	adds	r2, r0, #4
   294c8:	f3bf 8f5b 	dmb	ish
   294cc:	e852 1f00 	ldrex	r1, [r2]
   294d0:	3901      	subs	r1, #1
   294d2:	e842 1c00 	strex	ip, r1, [r2]
   294d6:	f1bc 0f00 	cmp.w	ip, #0
   294da:	d1f7      	bne.n	294cc <log_msg_put+0x8>
   294dc:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   294e0:	685b      	ldr	r3, [r3, #4]
   294e2:	b90b      	cbnz	r3, 294e8 <log_msg_put+0x24>
		msg_free(msg);
   294e4:	f7e8 bc84 	b.w	11df0 <msg_free>
}
   294e8:	4770      	bx	lr

000294ea <log_msg_str_get>:
}
   294ea:	6900      	ldr	r0, [r0, #16]
   294ec:	4770      	bx	lr

000294ee <log_msg_hexdump_create>:
{
   294ee:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   294f2:	f643 75ff 	movw	r5, #16383	; 0x3fff
   294f6:	4295      	cmp	r5, r2
{
   294f8:	4680      	mov	r8, r0
   294fa:	460e      	mov	r6, r1
   294fc:	4617      	mov	r7, r2
	length = (length > LOG_MSG_HEXDUMP_MAX_LENGTH) ?
   294fe:	bf28      	it	cs
   29500:	4615      	movcs	r5, r2
	msg = (struct log_msg *)log_msg_chunk_alloc();
   29502:	f7e8 fc61 	bl	11dc8 <log_msg_chunk_alloc>
	if (msg == NULL) {
   29506:	4604      	mov	r4, r0
   29508:	b378      	cbz	r0, 2956a <log_msg_hexdump_create+0x7c>
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   2950a:	8902      	ldrh	r2, [r0, #8]
	msg->str = str;
   2950c:	f8c0 8010 	str.w	r8, [r0, #16]
	msg->hdr.ref_cnt = 1;
   29510:	2301      	movs	r3, #1
   29512:	6043      	str	r3, [r0, #4]
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   29514:	00ab      	lsls	r3, r5, #2
   29516:	f043 0301 	orr.w	r3, r3, #1
   2951a:	f002 0202 	and.w	r2, r2, #2
   2951e:	4313      	orrs	r3, r2
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   29520:	2f0c      	cmp	r7, #12
	msg->hdr.params.hexdump.type = LOG_MSG_TYPE_HEXDUMP;
   29522:	8103      	strh	r3, [r0, #8]
	if (length > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   29524:	f100 0814 	add.w	r8, r0, #20
   29528:	d916      	bls.n	29558 <log_msg_hexdump_create+0x6a>
   2952a:	6833      	ldr	r3, [r6, #0]
		msg->hdr.params.generic.ext = 1;
   2952c:	7a02      	ldrb	r2, [r0, #8]
   2952e:	6183      	str	r3, [r0, #24]
   29530:	6873      	ldr	r3, [r6, #4]
   29532:	61c3      	str	r3, [r0, #28]
   29534:	f042 0202 	orr.w	r2, r2, #2
		msg->payload.ext.next = NULL;
   29538:	2300      	movs	r3, #0
   2953a:	6143      	str	r3, [r0, #20]
		msg->hdr.params.generic.ext = 1;
   2953c:	7202      	strb	r2, [r0, #8]
		data += LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   2953e:	3608      	adds	r6, #8
		length -= LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   29540:	3d08      	subs	r5, #8
	while (length > 0) {
   29542:	4699      	mov	r9, r3
   29544:	b18d      	cbz	r5, 2956a <log_msg_hexdump_create+0x7c>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   29546:	f7e8 fc3f 	bl	11dc8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   2954a:	4607      	mov	r7, r0
   2954c:	b980      	cbnz	r0, 29570 <log_msg_hexdump_create+0x82>
			msg_free(msg);
   2954e:	4620      	mov	r0, r4
   29550:	f7e8 fc4e 	bl	11df0 <msg_free>
			return NULL;
   29554:	463c      	mov	r4, r7
   29556:	e008      	b.n	2956a <log_msg_hexdump_create+0x7c>
   29558:	462a      	mov	r2, r5
   2955a:	4631      	mov	r1, r6
   2955c:	4640      	mov	r0, r8
   2955e:	f003 fb4a 	bl	2cbf6 <memcpy>
		msg->hdr.params.generic.ext = 0;
   29562:	7a23      	ldrb	r3, [r4, #8]
   29564:	f36f 0341 	bfc	r3, #1, #1
   29568:	7223      	strb	r3, [r4, #8]
}
   2956a:	4620      	mov	r0, r4
   2956c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chunk_length = (length > HEXDUMP_BYTES_CONT_MSG) ?
   29570:	2d1c      	cmp	r5, #28
   29572:	462f      	mov	r7, r5
   29574:	bf28      	it	cs
   29576:	271c      	movcs	r7, #28
		*prev_cont = cont;
   29578:	f8c8 0000 	str.w	r0, [r8]
   2957c:	4631      	mov	r1, r6
		cont->next = NULL;
   2957e:	f8c0 9000 	str.w	r9, [r0]
		prev_cont = &cont->next;
   29582:	4680      	mov	r8, r0
   29584:	463a      	mov	r2, r7
   29586:	3004      	adds	r0, #4
   29588:	f003 fb35 	bl	2cbf6 <memcpy>
		data += chunk_length;
   2958c:	443e      	add	r6, r7
		length -= chunk_length;
   2958e:	1bed      	subs	r5, r5, r7
   29590:	e7d8      	b.n	29544 <log_msg_hexdump_create+0x56>

00029592 <log_msg_hexdump_data_get>:
{
   29592:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   29594:	2400      	movs	r4, #0
   29596:	9400      	str	r4, [sp, #0]
   29598:	f7ff ff0f 	bl	293ba <log_msg_hexdump_data_op>
}
   2959c:	b002      	add	sp, #8
   2959e:	bd10      	pop	{r4, pc}

000295a0 <buffer_write>:
{
   295a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   295a2:	4606      	mov	r6, r0
   295a4:	460d      	mov	r5, r1
   295a6:	4614      	mov	r4, r2
   295a8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   295aa:	4621      	mov	r1, r4
   295ac:	4628      	mov	r0, r5
   295ae:	463a      	mov	r2, r7
   295b0:	47b0      	blx	r6
	} while (len != 0);
   295b2:	1a24      	subs	r4, r4, r0
		buf += processed;
   295b4:	4405      	add	r5, r0
	} while (len != 0);
   295b6:	d1f8      	bne.n	295aa <buffer_write+0xa>
}
   295b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000295ba <std_print>:
{
   295ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   295be:	b08e      	sub	sp, #56	; 0x38
   295c0:	af0e      	add	r7, sp, #56	; 0x38
   295c2:	4680      	mov	r8, r0
   295c4:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   295c6:	f7ff ff90 	bl	294ea <log_msg_str_get>
   295ca:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   295cc:	4640      	mov	r0, r8
   295ce:	f7ff ff57 	bl	29480 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   295d2:	0083      	lsls	r3, r0, #2
   295d4:	3307      	adds	r3, #7
   295d6:	f023 0307 	bic.w	r3, r3, #7
   295da:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   295de:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   295e0:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   295e2:	f04f 0900 	mov.w	r9, #0
   295e6:	45d1      	cmp	r9, sl
   295e8:	d116      	bne.n	29618 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   295ea:	4640      	mov	r0, r8
   295ec:	f7ff ff48 	bl	29480 <log_msg_nargs_get>
   295f0:	280f      	cmp	r0, #15
   295f2:	d81e      	bhi.n	29632 <std_print+0x78>
   295f4:	e8df f010 	tbh	[pc, r0, lsl #1]
   295f8:	00200019 	.word	0x00200019
   295fc:	002d0026 	.word	0x002d0026
   29600:	00410036 	.word	0x00410036
   29604:	005d004e 	.word	0x005d004e
   29608:	0081006e 	.word	0x0081006e
   2960c:	00ad0096 	.word	0x00ad0096
   29610:	00e100c6 	.word	0x00e100c6
   29614:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   29618:	4649      	mov	r1, r9
   2961a:	4640      	mov	r0, r8
   2961c:	f7ff ff33 	bl	29486 <log_msg_arg_get>
   29620:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   29624:	f109 0901 	add.w	r9, r9, #1
   29628:	e7dd      	b.n	295e6 <std_print+0x2c>
		print_formatted(output, str);
   2962a:	4631      	mov	r1, r6
   2962c:	4628      	mov	r0, r5
   2962e:	f7e8 fc93 	bl	11f58 <print_formatted>
}
   29632:	46bd      	mov	sp, r7
   29634:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, str, args[0]);
   29638:	6822      	ldr	r2, [r4, #0]
   2963a:	4631      	mov	r1, r6
   2963c:	4628      	mov	r0, r5
   2963e:	f7e8 fc8b 	bl	11f58 <print_formatted>
		break;
   29642:	e7f6      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1]);
   29644:	e9d4 2300 	ldrd	r2, r3, [r4]
   29648:	4631      	mov	r1, r6
   2964a:	4628      	mov	r0, r5
   2964c:	f7e8 fc84 	bl	11f58 <print_formatted>
		break;
   29650:	e7ef      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2]);
   29652:	68a3      	ldr	r3, [r4, #8]
   29654:	9300      	str	r3, [sp, #0]
   29656:	e9d4 2300 	ldrd	r2, r3, [r4]
   2965a:	4631      	mov	r1, r6
   2965c:	4628      	mov	r0, r5
   2965e:	f7e8 fc7b 	bl	11f58 <print_formatted>
		break;
   29662:	e7e6      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   29664:	68e3      	ldr	r3, [r4, #12]
   29666:	9301      	str	r3, [sp, #4]
   29668:	68a3      	ldr	r3, [r4, #8]
   2966a:	9300      	str	r3, [sp, #0]
   2966c:	e9d4 2300 	ldrd	r2, r3, [r4]
   29670:	4631      	mov	r1, r6
   29672:	4628      	mov	r0, r5
   29674:	f7e8 fc70 	bl	11f58 <print_formatted>
		break;
   29678:	e7db      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   2967a:	6923      	ldr	r3, [r4, #16]
   2967c:	9302      	str	r3, [sp, #8]
   2967e:	68e3      	ldr	r3, [r4, #12]
   29680:	9301      	str	r3, [sp, #4]
   29682:	68a3      	ldr	r3, [r4, #8]
   29684:	9300      	str	r3, [sp, #0]
   29686:	e9d4 2300 	ldrd	r2, r3, [r4]
   2968a:	4631      	mov	r1, r6
   2968c:	4628      	mov	r0, r5
   2968e:	f7e8 fc63 	bl	11f58 <print_formatted>
		break;
   29692:	e7ce      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   29694:	6963      	ldr	r3, [r4, #20]
   29696:	9303      	str	r3, [sp, #12]
   29698:	6923      	ldr	r3, [r4, #16]
   2969a:	9302      	str	r3, [sp, #8]
   2969c:	68e3      	ldr	r3, [r4, #12]
   2969e:	9301      	str	r3, [sp, #4]
   296a0:	68a3      	ldr	r3, [r4, #8]
   296a2:	9300      	str	r3, [sp, #0]
   296a4:	e9d4 2300 	ldrd	r2, r3, [r4]
   296a8:	4631      	mov	r1, r6
   296aa:	4628      	mov	r0, r5
   296ac:	f7e8 fc54 	bl	11f58 <print_formatted>
		break;
   296b0:	e7bf      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   296b2:	69a3      	ldr	r3, [r4, #24]
   296b4:	9304      	str	r3, [sp, #16]
   296b6:	6963      	ldr	r3, [r4, #20]
   296b8:	9303      	str	r3, [sp, #12]
   296ba:	6923      	ldr	r3, [r4, #16]
   296bc:	9302      	str	r3, [sp, #8]
   296be:	68e3      	ldr	r3, [r4, #12]
   296c0:	9301      	str	r3, [sp, #4]
   296c2:	68a3      	ldr	r3, [r4, #8]
   296c4:	9300      	str	r3, [sp, #0]
   296c6:	e9d4 2300 	ldrd	r2, r3, [r4]
   296ca:	4631      	mov	r1, r6
   296cc:	4628      	mov	r0, r5
   296ce:	f7e8 fc43 	bl	11f58 <print_formatted>
		break;
   296d2:	e7ae      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   296d4:	69e3      	ldr	r3, [r4, #28]
   296d6:	9305      	str	r3, [sp, #20]
   296d8:	69a3      	ldr	r3, [r4, #24]
   296da:	9304      	str	r3, [sp, #16]
   296dc:	6963      	ldr	r3, [r4, #20]
   296de:	9303      	str	r3, [sp, #12]
   296e0:	6923      	ldr	r3, [r4, #16]
   296e2:	9302      	str	r3, [sp, #8]
   296e4:	68e3      	ldr	r3, [r4, #12]
   296e6:	9301      	str	r3, [sp, #4]
   296e8:	68a3      	ldr	r3, [r4, #8]
   296ea:	9300      	str	r3, [sp, #0]
   296ec:	e9d4 2300 	ldrd	r2, r3, [r4]
   296f0:	4631      	mov	r1, r6
   296f2:	4628      	mov	r0, r5
   296f4:	f7e8 fc30 	bl	11f58 <print_formatted>
		break;
   296f8:	e79b      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   296fa:	6a23      	ldr	r3, [r4, #32]
   296fc:	9306      	str	r3, [sp, #24]
   296fe:	69e3      	ldr	r3, [r4, #28]
   29700:	9305      	str	r3, [sp, #20]
   29702:	69a3      	ldr	r3, [r4, #24]
   29704:	9304      	str	r3, [sp, #16]
   29706:	6963      	ldr	r3, [r4, #20]
   29708:	9303      	str	r3, [sp, #12]
   2970a:	6923      	ldr	r3, [r4, #16]
   2970c:	9302      	str	r3, [sp, #8]
   2970e:	68e3      	ldr	r3, [r4, #12]
   29710:	9301      	str	r3, [sp, #4]
   29712:	68a3      	ldr	r3, [r4, #8]
   29714:	9300      	str	r3, [sp, #0]
   29716:	e9d4 2300 	ldrd	r2, r3, [r4]
   2971a:	4631      	mov	r1, r6
   2971c:	4628      	mov	r0, r5
   2971e:	f7e8 fc1b 	bl	11f58 <print_formatted>
		break;
   29722:	e786      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   29724:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29726:	9307      	str	r3, [sp, #28]
   29728:	6a23      	ldr	r3, [r4, #32]
   2972a:	9306      	str	r3, [sp, #24]
   2972c:	69e3      	ldr	r3, [r4, #28]
   2972e:	9305      	str	r3, [sp, #20]
   29730:	69a3      	ldr	r3, [r4, #24]
   29732:	9304      	str	r3, [sp, #16]
   29734:	6963      	ldr	r3, [r4, #20]
   29736:	9303      	str	r3, [sp, #12]
   29738:	6923      	ldr	r3, [r4, #16]
   2973a:	9302      	str	r3, [sp, #8]
   2973c:	68e3      	ldr	r3, [r4, #12]
   2973e:	9301      	str	r3, [sp, #4]
   29740:	68a3      	ldr	r3, [r4, #8]
   29742:	9300      	str	r3, [sp, #0]
   29744:	e9d4 2300 	ldrd	r2, r3, [r4]
   29748:	4631      	mov	r1, r6
   2974a:	4628      	mov	r0, r5
   2974c:	f7e8 fc04 	bl	11f58 <print_formatted>
		break;
   29750:	e76f      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   29752:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29754:	9308      	str	r3, [sp, #32]
   29756:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29758:	9307      	str	r3, [sp, #28]
   2975a:	6a23      	ldr	r3, [r4, #32]
   2975c:	9306      	str	r3, [sp, #24]
   2975e:	69e3      	ldr	r3, [r4, #28]
   29760:	9305      	str	r3, [sp, #20]
   29762:	69a3      	ldr	r3, [r4, #24]
   29764:	9304      	str	r3, [sp, #16]
   29766:	6963      	ldr	r3, [r4, #20]
   29768:	9303      	str	r3, [sp, #12]
   2976a:	6923      	ldr	r3, [r4, #16]
   2976c:	9302      	str	r3, [sp, #8]
   2976e:	68e3      	ldr	r3, [r4, #12]
   29770:	9301      	str	r3, [sp, #4]
   29772:	68a3      	ldr	r3, [r4, #8]
   29774:	9300      	str	r3, [sp, #0]
   29776:	e9d4 2300 	ldrd	r2, r3, [r4]
   2977a:	4631      	mov	r1, r6
   2977c:	4628      	mov	r0, r5
   2977e:	f7e8 fbeb 	bl	11f58 <print_formatted>
		break;
   29782:	e756      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   29784:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29786:	9309      	str	r3, [sp, #36]	; 0x24
   29788:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2978a:	9308      	str	r3, [sp, #32]
   2978c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2978e:	9307      	str	r3, [sp, #28]
   29790:	6a23      	ldr	r3, [r4, #32]
   29792:	9306      	str	r3, [sp, #24]
   29794:	69e3      	ldr	r3, [r4, #28]
   29796:	9305      	str	r3, [sp, #20]
   29798:	69a3      	ldr	r3, [r4, #24]
   2979a:	9304      	str	r3, [sp, #16]
   2979c:	6963      	ldr	r3, [r4, #20]
   2979e:	9303      	str	r3, [sp, #12]
   297a0:	6923      	ldr	r3, [r4, #16]
   297a2:	9302      	str	r3, [sp, #8]
   297a4:	68e3      	ldr	r3, [r4, #12]
   297a6:	9301      	str	r3, [sp, #4]
   297a8:	68a3      	ldr	r3, [r4, #8]
   297aa:	9300      	str	r3, [sp, #0]
   297ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   297b0:	4631      	mov	r1, r6
   297b2:	4628      	mov	r0, r5
   297b4:	f7e8 fbd0 	bl	11f58 <print_formatted>
		break;
   297b8:	e73b      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   297ba:	6b23      	ldr	r3, [r4, #48]	; 0x30
   297bc:	930a      	str	r3, [sp, #40]	; 0x28
   297be:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   297c0:	9309      	str	r3, [sp, #36]	; 0x24
   297c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   297c4:	9308      	str	r3, [sp, #32]
   297c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   297c8:	9307      	str	r3, [sp, #28]
   297ca:	6a23      	ldr	r3, [r4, #32]
   297cc:	9306      	str	r3, [sp, #24]
   297ce:	69e3      	ldr	r3, [r4, #28]
   297d0:	9305      	str	r3, [sp, #20]
   297d2:	69a3      	ldr	r3, [r4, #24]
   297d4:	9304      	str	r3, [sp, #16]
   297d6:	6963      	ldr	r3, [r4, #20]
   297d8:	9303      	str	r3, [sp, #12]
   297da:	6923      	ldr	r3, [r4, #16]
   297dc:	9302      	str	r3, [sp, #8]
   297de:	68e3      	ldr	r3, [r4, #12]
   297e0:	9301      	str	r3, [sp, #4]
   297e2:	68a3      	ldr	r3, [r4, #8]
   297e4:	9300      	str	r3, [sp, #0]
   297e6:	e9d4 2300 	ldrd	r2, r3, [r4]
   297ea:	4631      	mov	r1, r6
   297ec:	4628      	mov	r0, r5
   297ee:	f7e8 fbb3 	bl	11f58 <print_formatted>
		break;
   297f2:	e71e      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   297f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   297f6:	930b      	str	r3, [sp, #44]	; 0x2c
   297f8:	6b23      	ldr	r3, [r4, #48]	; 0x30
   297fa:	930a      	str	r3, [sp, #40]	; 0x28
   297fc:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   297fe:	9309      	str	r3, [sp, #36]	; 0x24
   29800:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29802:	9308      	str	r3, [sp, #32]
   29804:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29806:	9307      	str	r3, [sp, #28]
   29808:	6a23      	ldr	r3, [r4, #32]
   2980a:	9306      	str	r3, [sp, #24]
   2980c:	69e3      	ldr	r3, [r4, #28]
   2980e:	9305      	str	r3, [sp, #20]
   29810:	69a3      	ldr	r3, [r4, #24]
   29812:	9304      	str	r3, [sp, #16]
   29814:	6963      	ldr	r3, [r4, #20]
   29816:	9303      	str	r3, [sp, #12]
   29818:	6923      	ldr	r3, [r4, #16]
   2981a:	9302      	str	r3, [sp, #8]
   2981c:	68e3      	ldr	r3, [r4, #12]
   2981e:	9301      	str	r3, [sp, #4]
   29820:	68a3      	ldr	r3, [r4, #8]
   29822:	9300      	str	r3, [sp, #0]
   29824:	e9d4 2300 	ldrd	r2, r3, [r4]
   29828:	4631      	mov	r1, r6
   2982a:	4628      	mov	r0, r5
   2982c:	f7e8 fb94 	bl	11f58 <print_formatted>
		break;
   29830:	e6ff      	b.n	29632 <std_print+0x78>
		print_formatted(output, str, args[0], args[1], args[2],
   29832:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   29834:	930c      	str	r3, [sp, #48]	; 0x30
   29836:	6b63      	ldr	r3, [r4, #52]	; 0x34
   29838:	930b      	str	r3, [sp, #44]	; 0x2c
   2983a:	6b23      	ldr	r3, [r4, #48]	; 0x30
   2983c:	930a      	str	r3, [sp, #40]	; 0x28
   2983e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29840:	9309      	str	r3, [sp, #36]	; 0x24
   29842:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   29844:	9308      	str	r3, [sp, #32]
   29846:	6a63      	ldr	r3, [r4, #36]	; 0x24
   29848:	9307      	str	r3, [sp, #28]
   2984a:	6a23      	ldr	r3, [r4, #32]
   2984c:	9306      	str	r3, [sp, #24]
   2984e:	69e3      	ldr	r3, [r4, #28]
   29850:	9305      	str	r3, [sp, #20]
   29852:	69a3      	ldr	r3, [r4, #24]
   29854:	9304      	str	r3, [sp, #16]
   29856:	6963      	ldr	r3, [r4, #20]
   29858:	9303      	str	r3, [sp, #12]
   2985a:	6923      	ldr	r3, [r4, #16]
   2985c:	9302      	str	r3, [sp, #8]
   2985e:	68e3      	ldr	r3, [r4, #12]
   29860:	9301      	str	r3, [sp, #4]
   29862:	68a3      	ldr	r3, [r4, #8]
   29864:	9300      	str	r3, [sp, #0]
   29866:	e9d4 2300 	ldrd	r2, r3, [r4]
   2986a:	4631      	mov	r1, r6
   2986c:	4628      	mov	r0, r5
   2986e:	f7e8 fb73 	bl	11f58 <print_formatted>
}
   29872:	e6de      	b.n	29632 <std_print+0x78>

00029874 <log_output_flush>:
		     output->control_block->offset,
   29874:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
   29876:	6881      	ldr	r1, [r0, #8]
{
   29878:	b510      	push	{r4, lr}
   2987a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
   2987c:	e9d2 2300 	ldrd	r2, r3, [r2]
   29880:	6800      	ldr	r0, [r0, #0]
   29882:	f7ff fe8d 	bl	295a0 <buffer_write>
	output->control_block->offset = 0;
   29886:	6863      	ldr	r3, [r4, #4]
   29888:	2200      	movs	r2, #0
   2988a:	601a      	str	r2, [r3, #0]
}
   2988c:	bd10      	pop	{r4, pc}

0002988e <log_halt>:
{
   2988e:	b508      	push	{r3, lr}
	log_backend_deactivate(backend);
   29890:	4608      	mov	r0, r1
   29892:	f7e8 fea5 	bl	125e0 <log_backend_deactivate>
}
   29896:	2000      	movs	r0, #0
   29898:	bd08      	pop	{r3, pc}

0002989a <log_go>:
{
   2989a:	b508      	push	{r3, lr}
	log_backend_activate(backend, backend->cb->ctx);
   2989c:	684b      	ldr	r3, [r1, #4]
{
   2989e:	4608      	mov	r0, r1
	log_backend_activate(backend, backend->cb->ctx);
   298a0:	6819      	ldr	r1, [r3, #0]
   298a2:	f7e8 feb7 	bl	12614 <log_backend_activate>
}
   298a6:	2000      	movs	r0, #0
   298a8:	bd08      	pop	{r3, pc}

000298aa <cmd_log_self_status>:
{
   298aa:	b570      	push	{r4, r5, r6, lr}
   298ac:	4604      	mov	r4, r0
   298ae:	460d      	mov	r5, r1
   298b0:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   298b2:	f7e8 ff27 	bl	12704 <shell_state_precheck>
   298b6:	b130      	cbz	r0, 298c6 <cmd_log_self_status+0x1c>
	log_status(shell, shell->log_backend->backend, argc, argv);
   298b8:	69e1      	ldr	r1, [r4, #28]
   298ba:	4633      	mov	r3, r6
   298bc:	6809      	ldr	r1, [r1, #0]
   298be:	462a      	mov	r2, r5
   298c0:	4620      	mov	r0, r4
   298c2:	f7e8 fe1d 	bl	12500 <log_status>
}
   298c6:	2000      	movs	r0, #0
   298c8:	bd70      	pop	{r4, r5, r6, pc}

000298ca <cmd_log_self_halt>:
{
   298ca:	b510      	push	{r4, lr}
   298cc:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   298ce:	f7e8 ff19 	bl	12704 <shell_state_precheck>
   298d2:	b118      	cbz	r0, 298dc <cmd_log_self_halt+0x12>
	return log_halt(shell, shell->log_backend->backend, argc, argv);
   298d4:	69e3      	ldr	r3, [r4, #28]
	log_backend_deactivate(backend);
   298d6:	6818      	ldr	r0, [r3, #0]
   298d8:	f7e8 fe82 	bl	125e0 <log_backend_deactivate>
}
   298dc:	2000      	movs	r0, #0
   298de:	bd10      	pop	{r4, pc}

000298e0 <cmd_log_self_go>:
{
   298e0:	b510      	push	{r4, lr}
   298e2:	4604      	mov	r4, r0
	if (!shell_state_precheck(shell)) {
   298e4:	f7e8 ff0e 	bl	12704 <shell_state_precheck>
   298e8:	b128      	cbz	r0, 298f6 <cmd_log_self_go+0x16>
	return log_go(shell, shell->log_backend->backend, argc, argv);
   298ea:	69e3      	ldr	r3, [r4, #28]
   298ec:	6818      	ldr	r0, [r3, #0]
	log_backend_activate(backend, backend->cb->ctx);
   298ee:	6843      	ldr	r3, [r0, #4]
   298f0:	6819      	ldr	r1, [r3, #0]
   298f2:	f7e8 fe8f 	bl	12614 <log_backend_activate>
}
   298f6:	2000      	movs	r0, #0
   298f8:	bd10      	pop	{r4, pc}

000298fa <cmd_log_self_enable>:
{
   298fa:	b570      	push	{r4, r5, r6, lr}
   298fc:	4604      	mov	r4, r0
   298fe:	460d      	mov	r5, r1
   29900:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   29902:	f7e8 feff 	bl	12704 <shell_state_precheck>
   29906:	b140      	cbz	r0, 2991a <cmd_log_self_enable+0x20>
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   29908:	69e1      	ldr	r1, [r4, #28]
   2990a:	4633      	mov	r3, r6
   2990c:	462a      	mov	r2, r5
   2990e:	4620      	mov	r0, r4
   29910:	6809      	ldr	r1, [r1, #0]
}
   29912:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_enable(shell, shell->log_backend->backend, argc, argv);
   29916:	f7e8 bf6d 	b.w	127f4 <log_enable>
}
   2991a:	bd70      	pop	{r4, r5, r6, pc}

0002991c <log_disable>:
{
   2991c:	b513      	push	{r0, r1, r4, lr}
	filters_set(shell, backend, argc - 1, &argv[1], LOG_LEVEL_NONE);
   2991e:	2400      	movs	r4, #0
   29920:	9400      	str	r4, [sp, #0]
   29922:	3304      	adds	r3, #4
   29924:	3a01      	subs	r2, #1
   29926:	f7e8 fefd 	bl	12724 <filters_set>
}
   2992a:	4620      	mov	r0, r4
   2992c:	b002      	add	sp, #8
   2992e:	bd10      	pop	{r4, pc}

00029930 <cmd_log_self_disable>:
{
   29930:	b570      	push	{r4, r5, r6, lr}
   29932:	4604      	mov	r4, r0
   29934:	460d      	mov	r5, r1
   29936:	4616      	mov	r6, r2
	if (!shell_state_precheck(shell)) {
   29938:	f7e8 fee4 	bl	12704 <shell_state_precheck>
   2993c:	b140      	cbz	r0, 29950 <cmd_log_self_disable+0x20>
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   2993e:	69e1      	ldr	r1, [r4, #28]
   29940:	4633      	mov	r3, r6
   29942:	462a      	mov	r2, r5
   29944:	4620      	mov	r0, r4
   29946:	6809      	ldr	r1, [r1, #0]
}
   29948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return log_disable(shell, shell->log_backend->backend, argc, argv);
   2994c:	f7ff bfe6 	b.w	2991c <log_disable>
}
   29950:	bd70      	pop	{r4, r5, r6, pc}

00029952 <cmd_kernel_reboot_warm>:
#endif

#if defined(CONFIG_REBOOT)
static int cmd_kernel_reboot_warm(const struct shell *shell,
				  size_t argc, char **argv)
{
   29952:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_WARM);
   29954:	2000      	movs	r0, #0
   29956:	f7e7 fd87 	bl	11468 <sys_reboot>

0002995a <cmd_kernel_reboot_cold>:
	return 0;
}

static int cmd_kernel_reboot_cold(const struct shell *shell,
				  size_t argc, char **argv)
{
   2995a:	b508      	push	{r3, lr}
	ARG_UNUSED(argc);
	ARG_UNUSED(argv);
#if (CONFIG_KERNEL_SHELL_REBOOT_DELAY > 0)
	k_sleep(K_MSEC(CONFIG_KERNEL_SHELL_REBOOT_DELAY));
#endif
	sys_reboot(SYS_REBOOT_COLD);
   2995c:	2001      	movs	r0, #1
   2995e:	f7e7 fd83 	bl	11468 <sys_reboot>

00029962 <cmd_date_get>:

static int cmd_date_get(const struct shell *shell, size_t argc, char **argv)
{
   29962:	b510      	push	{r4, lr}
   29964:	4604      	mov	r4, r0
   29966:	b08e      	sub	sp, #56	; 0x38
   29968:	2001      	movs	r0, #1
   2996a:	4669      	mov	r1, sp
   2996c:	f7e6 f9a0 	bl	fcb0 <z_impl_clock_gettime>
	struct timespec tp;
	struct tm tm;

	clock_gettime(CLOCK_REALTIME, &tp);

	gmtime_r(&tp.tv_sec, &tm);
   29970:	a905      	add	r1, sp, #20
   29972:	4668      	mov	r0, sp
   29974:	f7fe fb86 	bl	28084 <gmtime_r>

	date_print(shell, &tm);
   29978:	4620      	mov	r0, r4
   2997a:	a905      	add	r1, sp, #20
   2997c:	f7e9 fa16 	bl	12dac <date_print>

	return 0;
}
   29980:	2000      	movs	r0, #0
   29982:	b00e      	add	sp, #56	; 0x38
   29984:	bd10      	pop	{r4, pc}

00029986 <z_impl_uart_irq_tx_disable>:
	if (api->irq_tx_disable != NULL) {
   29986:	6883      	ldr	r3, [r0, #8]
   29988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   2998a:	b103      	cbz	r3, 2998e <z_impl_uart_irq_tx_disable+0x8>
		api->irq_tx_disable(dev);
   2998c:	4718      	bx	r3
}
   2998e:	4770      	bx	lr

00029990 <read>:
{
   29990:	b510      	push	{r4, lr}
   29992:	461c      	mov	r4, r3
	*cnt = ring_buf_get(sh_uart->rx_ringbuf, data, length);
   29994:	6843      	ldr	r3, [r0, #4]
   29996:	68d8      	ldr	r0, [r3, #12]
   29998:	f7e7 fd32 	bl	11400 <ring_buf_get>
   2999c:	6020      	str	r0, [r4, #0]
}
   2999e:	2000      	movs	r0, #0
   299a0:	bd10      	pop	{r4, pc}

000299a2 <ring_buf_reset>:
	buf->head = 0;
   299a2:	2300      	movs	r3, #0
	buf->tail = 0;
   299a4:	e9c0 3300 	strd	r3, r3, [r0]
__ssp_bos_icheck3(memset, void *, int)
   299a8:	6083      	str	r3, [r0, #8]
   299aa:	60c3      	str	r3, [r0, #12]
}
   299ac:	4770      	bx	lr

000299ae <write>:
{
   299ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct shell_uart *sh_uart = (struct shell_uart *)transport->ctx;
   299b2:	6845      	ldr	r5, [r0, #4]
{
   299b4:	461e      	mov	r6, r3
		!sh_uart->ctrl_blk->blocking_tx) {
   299b6:	682b      	ldr	r3, [r5, #0]
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   299b8:	7c1b      	ldrb	r3, [r3, #16]
{
   299ba:	460c      	mov	r4, r1
   299bc:	4617      	mov	r7, r2
	if (IS_ENABLED(CONFIG_SHELL_BACKEND_SERIAL_INTERRUPT_DRIVEN) &&
   299be:	b153      	cbz	r3, 299d6 <write+0x28>
   299c0:	eb01 0802 	add.w	r8, r1, r2
		for (size_t i = 0; i < length; i++) {
   299c4:	4544      	cmp	r4, r8
   299c6:	682b      	ldr	r3, [r5, #0]
   299c8:	d120      	bne.n	29a0c <write+0x5e>
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   299ca:	e9d3 2101 	ldrd	r2, r1, [r3, #4]
		*cnt = length;
   299ce:	6037      	str	r7, [r6, #0]
		sh_uart->ctrl_blk->handler(SHELL_TRANSPORT_EVT_TX_RDY,
   299d0:	2001      	movs	r0, #1
   299d2:	4790      	blx	r2
   299d4:	e017      	b.n	29a06 <write+0x58>
	*cnt = ring_buf_put(sh_uart->tx_ringbuf, data, length);
   299d6:	68a8      	ldr	r0, [r5, #8]
   299d8:	f7e7 fce2 	bl	113a0 <ring_buf_put>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   299dc:	682b      	ldr	r3, [r5, #0]
   299de:	6030      	str	r0, [r6, #0]
   299e0:	330c      	adds	r3, #12
   299e2:	2101      	movs	r1, #1
   299e4:	f3bf 8f5b 	dmb	ish
   299e8:	e853 2f00 	ldrex	r2, [r3]
   299ec:	e843 1000 	strex	r0, r1, [r3]
   299f0:	2800      	cmp	r0, #0
   299f2:	d1f9      	bne.n	299e8 <write+0x3a>
   299f4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&sh_uart->ctrl_blk->tx_busy, 1) == 0) {
   299f8:	b92a      	cbnz	r2, 29a06 <write+0x58>
		uart_irq_tx_enable(sh_uart->ctrl_blk->dev);
   299fa:	682b      	ldr	r3, [r5, #0]
   299fc:	6818      	ldr	r0, [r3, #0]
	if (api->irq_tx_enable != NULL) {
   299fe:	6883      	ldr	r3, [r0, #8]
   29a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   29a02:	b103      	cbz	r3, 29a06 <write+0x58>
		api->irq_tx_enable(dev);
   29a04:	4798      	blx	r3
}
   29a06:	2000      	movs	r0, #0
   29a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			uart_poll_out(sh_uart->ctrl_blk->dev, data8[i]);
   29a0c:	6818      	ldr	r0, [r3, #0]
   29a0e:	f814 1b01 	ldrb.w	r1, [r4], #1
	api->poll_out(dev, out_char);
   29a12:	6883      	ldr	r3, [r0, #8]
   29a14:	69db      	ldr	r3, [r3, #28]
   29a16:	4798      	blx	r3
		for (size_t i = 0; i < length; i++) {
   29a18:	e7d4      	b.n	299c4 <write+0x16>

00029a1a <uninit>:
		const struct device *dev = sh_uart->ctrl_blk->dev;
   29a1a:	6843      	ldr	r3, [r0, #4]
   29a1c:	681b      	ldr	r3, [r3, #0]
{
   29a1e:	b510      	push	{r4, lr}
		const struct device *dev = sh_uart->ctrl_blk->dev;
   29a20:	681c      	ldr	r4, [r3, #0]
   29a22:	4620      	mov	r0, r4
   29a24:	f7ff ffaf 	bl	29986 <z_impl_uart_irq_tx_disable>
	if (api->irq_rx_disable != NULL) {
   29a28:	68a3      	ldr	r3, [r4, #8]
   29a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   29a2c:	b10b      	cbz	r3, 29a32 <uninit+0x18>
		api->irq_rx_disable(dev);
   29a2e:	4620      	mov	r0, r4
   29a30:	4798      	blx	r3
}
   29a32:	2000      	movs	r0, #0
   29a34:	bd10      	pop	{r4, pc}

00029a36 <enable>:
{
   29a36:	b508      	push	{r3, lr}
	sh_uart->ctrl_blk->blocking_tx = blocking_tx;
   29a38:	6843      	ldr	r3, [r0, #4]
   29a3a:	681b      	ldr	r3, [r3, #0]
   29a3c:	7419      	strb	r1, [r3, #16]
	if (blocking_tx) {
   29a3e:	b111      	cbz	r1, 29a46 <enable+0x10>
		uart_irq_tx_disable(sh_uart->ctrl_blk->dev);
   29a40:	6818      	ldr	r0, [r3, #0]
   29a42:	f7ff ffa0 	bl	29986 <z_impl_uart_irq_tx_disable>
}
   29a46:	2000      	movs	r0, #0
   29a48:	bd08      	pop	{r3, pc}

00029a4a <atomic_or>:
{
   29a4a:	4603      	mov	r3, r0
}
   29a4c:	f3bf 8f5b 	dmb	ish
   29a50:	e853 0f00 	ldrex	r0, [r3]
   29a54:	ea40 0201 	orr.w	r2, r0, r1
   29a58:	e843 2c00 	strex	ip, r2, [r3]
   29a5c:	f1bc 0f00 	cmp.w	ip, #0
   29a60:	d1f6      	bne.n	29a50 <atomic_or+0x6>
   29a62:	f3bf 8f5b 	dmb	ish
   29a66:	4770      	bx	lr

00029a68 <atomic_and>:
{
   29a68:	4603      	mov	r3, r0
}
   29a6a:	f3bf 8f5b 	dmb	ish
   29a6e:	e853 0f00 	ldrex	r0, [r3]
   29a72:	ea00 0201 	and.w	r2, r0, r1
   29a76:	e843 2c00 	strex	ip, r2, [r3]
   29a7a:	f1bc 0f00 	cmp.w	ip, #0
   29a7e:	d1f6      	bne.n	29a6e <atomic_and+0x6>
   29a80:	f3bf 8f5b 	dmb	ish
   29a84:	4770      	bx	lr

00029a86 <shell_signal_handle>:
{
   29a86:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   29a88:	6885      	ldr	r5, [r0, #8]
   29a8a:	0109      	lsls	r1, r1, #4
   29a8c:	f501 711a 	add.w	r1, r1, #616	; 0x268
{
   29a90:	4604      	mov	r4, r0
   29a92:	4616      	mov	r6, r2
	struct k_poll_signal *signal = &shell->ctx->signals[sig_idx];
   29a94:	440d      	add	r5, r1
	z_impl_k_poll_signal_check(sig, signaled, result);
   29a96:	aa01      	add	r2, sp, #4
   29a98:	4669      	mov	r1, sp
   29a9a:	4628      	mov	r0, r5
   29a9c:	f003 f88f 	bl	2cbbe <z_impl_k_poll_signal_check>
	if (set) {
   29aa0:	9b00      	ldr	r3, [sp, #0]
   29aa2:	b123      	cbz	r3, 29aae <shell_signal_handle+0x28>
	z_impl_k_poll_signal_reset(sig);
   29aa4:	4628      	mov	r0, r5
   29aa6:	f003 f887 	bl	2cbb8 <z_impl_k_poll_signal_reset>
		handler(shell);
   29aaa:	4620      	mov	r0, r4
   29aac:	47b0      	blx	r6
}
   29aae:	b002      	add	sp, #8
   29ab0:	bd70      	pop	{r4, r5, r6, pc}

00029ab2 <k_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
   29ab2:	f7fa bee9 	b.w	24888 <z_impl_k_mutex_unlock>

00029ab6 <z_shell_strlen>:
{
   29ab6:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   29ab8:	b110      	cbz	r0, 29ac0 <z_shell_strlen+0xa>
   29aba:	f7e2 fc7b 	bl	c3b4 <strlen>
   29abe:	b280      	uxth	r0, r0
}
   29ac0:	bd08      	pop	{r3, pc}

00029ac2 <z_shell_raw_fprintf>:
{
   29ac2:	b40e      	push	{r1, r2, r3}
   29ac4:	b503      	push	{r0, r1, lr}
   29ac6:	aa03      	add	r2, sp, #12
   29ac8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   29acc:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   29ace:	f7ea fd53 	bl	14578 <z_shell_fprintf_fmt>
}
   29ad2:	b002      	add	sp, #8
   29ad4:	f85d eb04 	ldr.w	lr, [sp], #4
   29ad8:	b003      	add	sp, #12
   29ada:	4770      	bx	lr

00029adc <z_flag_history_exit_set.isra.0>:
static inline bool z_flag_history_exit_set(const struct shell *sh, bool val)
   29adc:	b508      	push	{r3, lr}
   29ade:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   29ae0:	f500 7019 	add.w	r0, r0, #612	; 0x264
   29ae4:	2104      	movs	r1, #4
   29ae6:	b123      	cbz	r3, 29af2 <z_flag_history_exit_set.isra.0+0x16>
   29ae8:	f7ff ffaf 	bl	29a4a <atomic_or>
}
   29aec:	f3c0 0080 	ubfx	r0, r0, #2, #1
   29af0:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, history_exit, val, ret);
   29af2:	f06f 0104 	mvn.w	r1, #4
   29af6:	f7ff ffb7 	bl	29a68 <atomic_and>
   29afa:	e7f7      	b.n	29aec <z_flag_history_exit_set.isra.0+0x10>

00029afc <z_flag_insert_mode_set.isra.0>:
static inline bool z_flag_insert_mode_set(const struct shell *sh, bool val)
   29afc:	b508      	push	{r3, lr}
   29afe:	460b      	mov	r3, r1
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   29b00:	f500 7018 	add.w	r0, r0, #608	; 0x260
   29b04:	2101      	movs	r1, #1
   29b06:	b123      	cbz	r3, 29b12 <z_flag_insert_mode_set.isra.0+0x16>
   29b08:	f7ff ff9f 	bl	29a4a <atomic_or>
}
   29b0c:	f000 0001 	and.w	r0, r0, #1
   29b10:	bd08      	pop	{r3, pc}
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, insert_mode, val, ret);
   29b12:	f06f 0101 	mvn.w	r1, #1
   29b16:	f7ff ffa7 	bl	29a68 <atomic_and>
   29b1a:	e7f7      	b.n	29b0c <z_flag_insert_mode_set.isra.0+0x10>

00029b1c <k_mutex_lock.constprop.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
   29b1c:	f7fa bdb4 	b.w	24688 <z_impl_k_mutex_lock>

00029b20 <shell_log_process>:
{
   29b20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	int signaled = 0;
   29b22:	2300      	movs	r3, #0
{
   29b24:	4604      	mov	r4, r0
	int signaled = 0;
   29b26:	9300      	str	r3, [sp, #0]
			z_shell_cmd_line_erase(shell);
   29b28:	4620      	mov	r0, r4
   29b2a:	f000 f9c2 	bl	29eb2 <z_shell_cmd_line_erase>
			processed = z_shell_log_backend_process(
   29b2e:	69e0      	ldr	r0, [r4, #28]
   29b30:	f000 fab4 	bl	2a09c <z_shell_log_backend_process>
   29b34:	4605      	mov	r5, r0
		z_shell_print_prompt_and_cmd(shell);
   29b36:	4620      	mov	r0, r4
		struct k_poll_signal *signal =
   29b38:	68a6      	ldr	r6, [r4, #8]
		z_shell_print_prompt_and_cmd(shell);
   29b3a:	f7eb f959 	bl	14df0 <z_shell_print_prompt_and_cmd>
		if (shell->ctx->cmd_buff_len) {
   29b3e:	68a3      	ldr	r3, [r4, #8]
   29b40:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
		struct k_poll_signal *signal =
   29b42:	f506 761a 	add.w	r6, r6, #616	; 0x268
		if (shell->ctx->cmd_buff_len) {
   29b46:	b123      	cbz	r3, 29b52 <shell_log_process+0x32>
	return z_impl_k_sleep(timeout);
   29b48:	f44f 70f6 	mov.w	r0, #492	; 0x1ec
   29b4c:	2100      	movs	r1, #0
   29b4e:	f7fc ff81 	bl	26a54 <z_impl_k_sleep>
	z_impl_k_poll_signal_check(sig, signaled, result);
   29b52:	aa01      	add	r2, sp, #4
   29b54:	4669      	mov	r1, sp
   29b56:	4630      	mov	r0, r6
   29b58:	f003 f831 	bl	2cbbe <z_impl_k_poll_signal_check>
	} while (processed && !signaled);
   29b5c:	b115      	cbz	r5, 29b64 <shell_log_process+0x44>
   29b5e:	9b00      	ldr	r3, [sp, #0]
   29b60:	2b00      	cmp	r3, #0
   29b62:	d0e1      	beq.n	29b28 <shell_log_process+0x8>
}
   29b64:	b002      	add	sp, #8
   29b66:	bd70      	pop	{r4, r5, r6, pc}

00029b68 <transport_evt_handler>:
	signal = (evt_type == SHELL_TRANSPORT_EVT_RX_RDY) ?
   29b68:	688b      	ldr	r3, [r1, #8]
			&shell->ctx->signals[SHELL_SIGNAL_RXRDY] :
   29b6a:	b920      	cbnz	r0, 29b76 <transport_evt_handler+0xe>
   29b6c:	f503 701a 	add.w	r0, r3, #616	; 0x268
	return z_impl_k_poll_signal_raise(sig, result);
   29b70:	2100      	movs	r1, #0
   29b72:	f7fe b9ef 	b.w	27f54 <z_impl_k_poll_signal_raise>
   29b76:	f503 7026 	add.w	r0, r3, #664	; 0x298
   29b7a:	e7f9      	b.n	29b70 <transport_evt_handler+0x8>

00029b7c <shell_fprintf>:
{
   29b7c:	b40c      	push	{r2, r3}
   29b7e:	b507      	push	{r0, r1, r2, lr}
   29b80:	ab04      	add	r3, sp, #16
   29b82:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(args, fmt);
   29b86:	9301      	str	r3, [sp, #4]
	shell_vfprintf(shell, color, fmt, args);
   29b88:	f7ea fbb4 	bl	142f4 <shell_vfprintf>
}
   29b8c:	b003      	add	sp, #12
   29b8e:	f85d eb04 	ldr.w	lr, [sp], #4
   29b92:	b002      	add	sp, #8
   29b94:	4770      	bx	lr

00029b96 <shell_hexdump>:
{
   29b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29b9a:	4607      	mov	r7, r0
   29b9c:	460e      	mov	r6, r1
   29b9e:	4614      	mov	r4, r2
	const uint8_t *p = data;
   29ba0:	460d      	mov	r5, r1
	while (len) {
   29ba2:	b90c      	cbnz	r4, 29ba8 <shell_hexdump+0x12>
}
   29ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		line_len = MIN(len, SHELL_HEXDUMP_BYTES_IN_LINE);
   29ba8:	2c10      	cmp	r4, #16
   29baa:	46a0      	mov	r8, r4
   29bac:	bf28      	it	cs
   29bae:	f04f 0810 	movcs.w	r8, #16
		shell_hexdump_line(shell, p - data, p, line_len);
   29bb2:	462a      	mov	r2, r5
   29bb4:	1ba9      	subs	r1, r5, r6
   29bb6:	4643      	mov	r3, r8
   29bb8:	4638      	mov	r0, r7
   29bba:	f7ea fc71 	bl	144a0 <shell_hexdump_line>
		len -= line_len;
   29bbe:	eba4 0408 	sub.w	r4, r4, r8
		p += line_len;
   29bc2:	4445      	add	r5, r8
   29bc4:	e7ed      	b.n	29ba2 <shell_hexdump+0xc>

00029bc6 <shell_help>:
{
   29bc6:	b510      	push	{r4, lr}
   29bc8:	4604      	mov	r4, r0
	k_mutex_lock(&shell->ctx->wr_mtx, K_FOREVER);
   29bca:	6880      	ldr	r0, [r0, #8]
   29bcc:	f04f 32ff 	mov.w	r2, #4294967295
   29bd0:	f04f 33ff 	mov.w	r3, #4294967295
   29bd4:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   29bd8:	f7ff ffa0 	bl	29b1c <k_mutex_lock.constprop.0>
	shell_internal_help_print(shell);
   29bdc:	4620      	mov	r0, r4
   29bde:	f7e9 fc4f 	bl	13480 <shell_internal_help_print>
	k_mutex_unlock(&shell->ctx->wr_mtx);
   29be2:	68a0      	ldr	r0, [r4, #8]
}
   29be4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_mutex_unlock(&shell->ctx->wr_mtx);
   29be8:	f500 703e 	add.w	r0, r0, #760	; 0x2f8
   29bec:	f7ff bf61 	b.w	29ab2 <k_mutex_unlock>

00029bf0 <shell_set_bypass>:
	sh->ctx->bypass = bypass;
   29bf0:	6883      	ldr	r3, [r0, #8]
   29bf2:	6399      	str	r1, [r3, #56]	; 0x38
}
   29bf4:	4770      	bx	lr

00029bf6 <z_shell_fprintf_buffer_flush>:


void z_shell_fprintf_buffer_flush(const struct shell_fprintf *sh_fprintf)
{
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   29bf6:	6902      	ldr	r2, [r0, #16]
   29bf8:	6883      	ldr	r3, [r0, #8]
   29bfa:	6812      	ldr	r2, [r2, #0]
   29bfc:	6801      	ldr	r1, [r0, #0]
{
   29bfe:	b510      	push	{r4, lr}
   29c00:	4604      	mov	r4, r0
	sh_fprintf->fwrite(sh_fprintf->user_ctx, sh_fprintf->buffer,
   29c02:	68c0      	ldr	r0, [r0, #12]
   29c04:	4798      	blx	r3
			   sh_fprintf->ctrl_blk->buffer_cnt);
	sh_fprintf->ctrl_blk->buffer_cnt = 0;
   29c06:	6923      	ldr	r3, [r4, #16]
   29c08:	2200      	movs	r2, #0
   29c0a:	601a      	str	r2, [r3, #0]
}
   29c0c:	bd10      	pop	{r4, pc}

00029c0e <out_func>:
{
   29c0e:	b538      	push	{r3, r4, r5, lr}
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   29c10:	68cb      	ldr	r3, [r1, #12]
   29c12:	7c1b      	ldrb	r3, [r3, #16]
   29c14:	2b02      	cmp	r3, #2
{
   29c16:	4605      	mov	r5, r0
   29c18:	460c      	mov	r4, r1
	if ((shell->shell_flag == SHELL_FLAG_OLF_CRLF) && (c == '\n')) {
   29c1a:	d104      	bne.n	29c26 <out_func+0x18>
   29c1c:	280a      	cmp	r0, #10
   29c1e:	d102      	bne.n	29c26 <out_func+0x18>
		(void)out_func('\r', ctx);
   29c20:	200d      	movs	r0, #13
   29c22:	f7ff fff4 	bl	29c0e <out_func>
	sh_fprintf->buffer[sh_fprintf->ctrl_blk->buffer_cnt] = (uint8_t)c;
   29c26:	6923      	ldr	r3, [r4, #16]
   29c28:	6822      	ldr	r2, [r4, #0]
   29c2a:	681b      	ldr	r3, [r3, #0]
   29c2c:	54d5      	strb	r5, [r2, r3]
	sh_fprintf->ctrl_blk->buffer_cnt++;
   29c2e:	6922      	ldr	r2, [r4, #16]
   29c30:	6813      	ldr	r3, [r2, #0]
   29c32:	3301      	adds	r3, #1
   29c34:	6013      	str	r3, [r2, #0]
	if (sh_fprintf->ctrl_blk->buffer_cnt == sh_fprintf->buffer_size) {
   29c36:	6862      	ldr	r2, [r4, #4]
   29c38:	4293      	cmp	r3, r2
   29c3a:	d102      	bne.n	29c42 <out_func+0x34>
		z_shell_fprintf_buffer_flush(sh_fprintf);
   29c3c:	4620      	mov	r0, r4
   29c3e:	f7ff ffda 	bl	29bf6 <z_shell_fprintf_buffer_flush>
}
   29c42:	2000      	movs	r0, #0
   29c44:	bd38      	pop	{r3, r4, r5, pc}

00029c46 <z_shell_strlen>:
{
   29c46:	b508      	push	{r3, lr}
	return str == NULL ? 0U : (uint16_t)strlen(str);
   29c48:	b110      	cbz	r0, 29c50 <z_shell_strlen+0xa>
   29c4a:	f7e2 fbb3 	bl	c3b4 <strlen>
   29c4e:	b280      	uxth	r0, r0
}
   29c50:	bd08      	pop	{r3, pc}

00029c52 <z_column_span_with_buffer_offsets_get>:
{
   29c52:	b510      	push	{r4, lr}
	return (1 + ((buffer_pos + cons->name_len) % cons->terminal_wid));
   29c54:	7b04      	ldrb	r4, [r0, #12]
   29c56:	8943      	ldrh	r3, [r0, #10]
   29c58:	4422      	add	r2, r4
   29c5a:	4421      	add	r1, r4
   29c5c:	fbb2 f0f3 	udiv	r0, r2, r3
   29c60:	fbb1 f4f3 	udiv	r4, r1, r3
   29c64:	fb03 2010 	mls	r0, r3, r0, r2
   29c68:	fb03 1114 	mls	r1, r3, r4, r1
}
   29c6c:	1a40      	subs	r0, r0, r1
   29c6e:	bd10      	pop	{r4, pc}

00029c70 <z_row_span_with_buffer_offsets_get>:
{
   29c70:	b510      	push	{r4, lr}
	return ((buffer_pos + cons->name_len) / cons->terminal_wid);
   29c72:	7b04      	ldrb	r4, [r0, #12]
   29c74:	8943      	ldrh	r3, [r0, #10]
   29c76:	4421      	add	r1, r4
   29c78:	1910      	adds	r0, r2, r4
   29c7a:	fbb1 f1f3 	udiv	r1, r1, r3
   29c7e:	fbb0 f0f3 	udiv	r0, r0, r3
}
   29c82:	1a40      	subs	r0, r0, r1
   29c84:	bd10      	pop	{r4, pc}

00029c86 <z_shell_multiline_data_calc>:
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   29c86:	7b03      	ldrb	r3, [r0, #12]
{
   29c88:	b530      	push	{r4, r5, lr}
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   29c8a:	8944      	ldrh	r4, [r0, #10]
   29c8c:	4419      	add	r1, r3
   29c8e:	fbb1 f5f4 	udiv	r5, r1, r4
   29c92:	fb04 1115 	mls	r1, r4, r5, r1
   29c96:	3101      	adds	r1, #1
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   29c98:	441a      	add	r2, r3
	cons->cur_x = (buff_pos + cons->name_len) % cons->terminal_wid + 1;
   29c9a:	8001      	strh	r1, [r0, #0]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   29c9c:	fbb2 f3f4 	udiv	r3, r2, r4
   29ca0:	1c59      	adds	r1, r3, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   29ca2:	fb04 2313 	mls	r3, r4, r3, r2
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   29ca6:	3501      	adds	r5, #1
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   29ca8:	3301      	adds	r3, #1
	cons->cur_y = (buff_pos + cons->name_len) / cons->terminal_wid + 1;
   29caa:	8085      	strh	r5, [r0, #4]
	cons->cur_y_end = (buff_len + cons->name_len) / cons->terminal_wid + 1;
   29cac:	80c1      	strh	r1, [r0, #6]
	cons->cur_x_end = (buff_len + cons->name_len) % cons->terminal_wid + 1;
   29cae:	8043      	strh	r3, [r0, #2]
}
   29cb0:	bd30      	pop	{r4, r5, pc}

00029cb2 <z_shell_pattern_remove>:
{
   29cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29cb4:	460e      	mov	r6, r1
	char *pattern_addr = strstr(buff, pattern);
   29cb6:	4611      	mov	r1, r2
{
   29cb8:	4615      	mov	r5, r2
   29cba:	4607      	mov	r7, r0
	char *pattern_addr = strstr(buff, pattern);
   29cbc:	f003 f812 	bl	2cce4 <strstr>
   29cc0:	4604      	mov	r4, r0
	uint16_t pattern_len = z_shell_strlen(pattern);
   29cc2:	4628      	mov	r0, r5
   29cc4:	f7ff ffbf 	bl	29c46 <z_shell_strlen>
   29cc8:	4605      	mov	r5, r0
	if (!pattern_addr) {
   29cca:	b1c4      	cbz	r4, 29cfe <z_shell_pattern_remove+0x4c>
	if (pattern_addr > buff) {
   29ccc:	42a7      	cmp	r7, r4
   29cce:	d207      	bcs.n	29ce0 <z_shell_pattern_remove+0x2e>
		if (*(pattern_addr - 1) == ' ') {
   29cd0:	f814 3c01 	ldrb.w	r3, [r4, #-1]
   29cd4:	2b20      	cmp	r3, #32
			pattern_len++; /* space needs to be removed as well */
   29cd6:	bf02      	ittt	eq
   29cd8:	3501      	addeq	r5, #1
   29cda:	b2ad      	uxtheq	r5, r5
			pattern_addr--; /* set pointer to space */
   29cdc:	f104 34ff 	addeq.w	r4, r4, #4294967295
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   29ce0:	4620      	mov	r0, r4
   29ce2:	f7ff ffb0 	bl	29c46 <z_shell_strlen>
	*buff_len -= pattern_len;
   29ce6:	8833      	ldrh	r3, [r6, #0]
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   29ce8:	1b42      	subs	r2, r0, r5
	*buff_len -= pattern_len;
   29cea:	1b5b      	subs	r3, r3, r5
	shift = z_shell_strlen(pattern_addr) - pattern_len + 1; /* +1 for EOS */
   29cec:	3201      	adds	r2, #1
	*buff_len -= pattern_len;
   29cee:	8033      	strh	r3, [r6, #0]
__ssp_bos_icheck3(memmove, void *, const void *)
   29cf0:	1961      	adds	r1, r4, r5
   29cf2:	4620      	mov	r0, r4
   29cf4:	b292      	uxth	r2, r2
}
   29cf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   29cfa:	f002 bf8a 	b.w	2cc12 <memmove>
   29cfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029d00 <z_shell_find_cmd>:
{
   29d00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29d04:	460f      	mov	r7, r1
   29d06:	b086      	sub	sp, #24
   29d08:	4616      	mov	r6, r2
	if (parent) {
   29d0a:	4604      	mov	r4, r0
   29d0c:	b170      	cbz	r0, 29d2c <z_shell_find_cmd+0x2c>
		memcpy(&parent_cpy, parent, sizeof(struct shell_static_entry));
   29d0e:	4603      	mov	r3, r0
   29d10:	ac01      	add	r4, sp, #4
   29d12:	f100 0510 	add.w	r5, r0, #16
   29d16:	6818      	ldr	r0, [r3, #0]
   29d18:	6859      	ldr	r1, [r3, #4]
   29d1a:	4622      	mov	r2, r4
   29d1c:	c203      	stmia	r2!, {r0, r1}
   29d1e:	3308      	adds	r3, #8
   29d20:	42ab      	cmp	r3, r5
   29d22:	4614      	mov	r4, r2
   29d24:	d1f7      	bne.n	29d16 <z_shell_find_cmd+0x16>
   29d26:	6818      	ldr	r0, [r3, #0]
   29d28:	6010      	str	r0, [r2, #0]
		parent = &parent_cpy;
   29d2a:	ac01      	add	r4, sp, #4
   29d2c:	f04f 0800 	mov.w	r8, #0
	while ((entry = z_shell_cmd_get(parent, idx++, dloc)) != NULL) {
   29d30:	4641      	mov	r1, r8
   29d32:	4632      	mov	r2, r6
   29d34:	4620      	mov	r0, r4
   29d36:	f7ea fcfb 	bl	14730 <z_shell_cmd_get>
   29d3a:	f108 0801 	add.w	r8, r8, #1
   29d3e:	4605      	mov	r5, r0
   29d40:	b128      	cbz	r0, 29d4e <z_shell_find_cmd+0x4e>
		if (strcmp(cmd_str, entry->syntax) == 0) {
   29d42:	6829      	ldr	r1, [r5, #0]
   29d44:	4638      	mov	r0, r7
   29d46:	f7e2 fb2b 	bl	c3a0 <strcmp>
   29d4a:	2800      	cmp	r0, #0
   29d4c:	d1f0      	bne.n	29d30 <z_shell_find_cmd+0x30>
}
   29d4e:	4628      	mov	r0, r5
   29d50:	b006      	add	sp, #24
   29d52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00029d56 <z_shell_get_last_command>:
{
   29d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   29d5a:	461c      	mov	r4, r3
   29d5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
   29d60:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   29d64:	2300      	movs	r3, #0
{
   29d66:	460f      	mov	r7, r1
   29d68:	4616      	mov	r6, r2
	*match_arg = Z_SHELL_CMD_ROOT_LVL;
   29d6a:	6023      	str	r3, [r4, #0]
	while (*match_arg < argc) {
   29d6c:	6823      	ldr	r3, [r4, #0]
   29d6e:	42bb      	cmp	r3, r7
				continue;
   29d70:	4605      	mov	r5, r0
	while (*match_arg < argc) {
   29d72:	d21b      	bcs.n	29dac <z_shell_get_last_command+0x56>
			if (z_shell_has_wildcard(argv[*match_arg])) {
   29d74:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
   29d78:	f000 fadc 	bl	2a334 <z_shell_has_wildcard>
   29d7c:	6823      	ldr	r3, [r4, #0]
   29d7e:	4682      	mov	sl, r0
   29d80:	b118      	cbz	r0, 29d8a <z_shell_get_last_command+0x34>
				(*match_arg)++;
   29d82:	3301      	adds	r3, #1
   29d84:	6023      	str	r3, [r4, #0]
				continue;
   29d86:	4628      	mov	r0, r5
   29d88:	e7f0      	b.n	29d6c <z_shell_get_last_command+0x16>
		entry = z_shell_find_cmd(entry, argv[*match_arg], dloc);
   29d8a:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
   29d8e:	4642      	mov	r2, r8
   29d90:	4628      	mov	r0, r5
   29d92:	f7ff ffb5 	bl	29d00 <z_shell_find_cmd>
		if (entry) {
   29d96:	b148      	cbz	r0, 29dac <z_shell_get_last_command+0x56>
			(*match_arg)++;
   29d98:	6823      	ldr	r3, [r4, #0]
   29d9a:	1c5a      	adds	r2, r3, #1
   29d9c:	6022      	str	r2, [r4, #0]
		if (only_static && (entry == dloc)) {
   29d9e:	f1b9 0f00 	cmp.w	r9, #0
   29da2:	d0e3      	beq.n	29d6c <z_shell_get_last_command+0x16>
   29da4:	4580      	cmp	r8, r0
   29da6:	d1e1      	bne.n	29d6c <z_shell_get_last_command+0x16>
			(*match_arg)--;
   29da8:	6023      	str	r3, [r4, #0]
			return NULL;
   29daa:	4655      	mov	r5, sl
}
   29dac:	4628      	mov	r0, r5
   29dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00029db2 <z_shell_raw_fprintf>:
{
   29db2:	b40e      	push	{r1, r2, r3}
   29db4:	b503      	push	{r0, r1, lr}
   29db6:	aa03      	add	r2, sp, #12
   29db8:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   29dbc:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   29dbe:	f7ea fbdb 	bl	14578 <z_shell_fprintf_fmt>
}
   29dc2:	b002      	add	sp, #8
   29dc4:	f85d eb04 	ldr.w	lr, [sp], #4
   29dc8:	b003      	add	sp, #12
   29dca:	4770      	bx	lr

00029dcc <full_line_cmd.isra.0>:
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   29dcc:	6802      	ldr	r2, [r0, #0]
static inline bool full_line_cmd(const struct shell *shell)
   29dce:	b538      	push	{r3, r4, r5, lr}
   29dd0:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   29dd2:	6810      	ldr	r0, [r2, #0]
   29dd4:	8f95      	ldrh	r5, [r2, #60]	; 0x3c
	return str == NULL ? 0U : (uint16_t)strlen(str);
   29dd6:	b110      	cbz	r0, 29dde <full_line_cmd.isra.0+0x12>
   29dd8:	f7e2 faec 	bl	c3b4 <strlen>
   29ddc:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   29dde:	6822      	ldr	r2, [r4, #0]
   29de0:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_len + z_shell_strlen(shell->ctx->prompt))
   29de2:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   29de4:	fbb3 f0f2 	udiv	r0, r3, r2
   29de8:	fb02 3010 	mls	r0, r2, r0, r3
}
   29dec:	fab0 f080 	clz	r0, r0
   29df0:	0940      	lsrs	r0, r0, #5
   29df2:	bd38      	pop	{r3, r4, r5, pc}

00029df4 <z_shell_cursor_in_empty_line>:
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   29df4:	6882      	ldr	r2, [r0, #8]
{
   29df6:	b538      	push	{r3, r4, r5, lr}
   29df8:	4604      	mov	r4, r0
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   29dfa:	6810      	ldr	r0, [r2, #0]
   29dfc:	8fd5      	ldrh	r5, [r2, #62]	; 0x3e
   29dfe:	b110      	cbz	r0, 29e06 <z_shell_cursor_in_empty_line+0x12>
   29e00:	f7e2 fad8 	bl	c3b4 <strlen>
   29e04:	b280      	uxth	r0, r0
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   29e06:	68a2      	ldr	r2, [r4, #8]
   29e08:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
	return ((shell->ctx->cmd_buff_pos + z_shell_strlen(shell->ctx->prompt))
   29e0a:	1943      	adds	r3, r0, r5
			% shell->ctx->vt100_ctx.cons.terminal_wid == 0U);
   29e0c:	fbb3 f0f2 	udiv	r0, r3, r2
   29e10:	fb02 3010 	mls	r0, r2, r0, r3
}
   29e14:	fab0 f080 	clz	r0, r0
   29e18:	0940      	lsrs	r0, r0, #5
   29e1a:	bd38      	pop	{r3, r4, r5, pc}

00029e1c <z_shell_op_cursor_move>:
{
   29e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   29e1e:	4604      	mov	r4, r0
	struct shell_multiline_cons *cons = &shell->ctx->vt100_ctx.cons;
   29e20:	6880      	ldr	r0, [r0, #8]
{
   29e22:	460d      	mov	r5, r1
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   29e24:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   29e26:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   29e28:	3020      	adds	r0, #32
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   29e2a:	440d      	add	r5, r1
	z_shell_multiline_data_calc(cons, shell->ctx->cmd_buff_pos,
   29e2c:	f7ff ff2b 	bl	29c86 <z_shell_multiline_data_calc>
						&shell->ctx->vt100_ctx.cons,
   29e30:	68a0      	ldr	r0, [r4, #8]
	uint16_t new_pos = shell->ctx->cmd_buff_pos + val;
   29e32:	b2ad      	uxth	r5, r5
	row_span = z_row_span_with_buffer_offsets_get(
   29e34:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   29e36:	462a      	mov	r2, r5
   29e38:	3020      	adds	r0, #32
   29e3a:	f7ff ff19 	bl	29c70 <z_row_span_with_buffer_offsets_get>
   29e3e:	4607      	mov	r7, r0
						&shell->ctx->vt100_ctx.cons,
   29e40:	68a0      	ldr	r0, [r4, #8]
	col_span = z_column_span_with_buffer_offsets_get(
   29e42:	462a      	mov	r2, r5
   29e44:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   29e46:	3020      	adds	r0, #32
   29e48:	f7ff ff03 	bl	29c52 <z_column_span_with_buffer_offsets_get>
	z_shell_op_cursor_vert_move(shell, -row_span);
   29e4c:	4279      	negs	r1, r7
	col_span = z_column_span_with_buffer_offsets_get(
   29e4e:	4606      	mov	r6, r0
	z_shell_op_cursor_vert_move(shell, -row_span);
   29e50:	4620      	mov	r0, r4
   29e52:	f7ea fd23 	bl	1489c <z_shell_op_cursor_vert_move>
	z_shell_op_cursor_horiz_move(shell, col_span);
   29e56:	4631      	mov	r1, r6
   29e58:	4620      	mov	r0, r4
   29e5a:	f7ea fd35 	bl	148c8 <z_shell_op_cursor_horiz_move>
	shell->ctx->cmd_buff_pos = new_pos;
   29e5e:	68a3      	ldr	r3, [r4, #8]
   29e60:	87dd      	strh	r5, [r3, #62]	; 0x3e
}
   29e62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00029e64 <z_shell_op_cursor_home_move>:
	z_shell_op_cursor_move(shell, -shell->ctx->cmd_buff_pos);
   29e64:	6883      	ldr	r3, [r0, #8]
   29e66:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
   29e68:	4249      	negs	r1, r1
   29e6a:	b209      	sxth	r1, r1
   29e6c:	f7ff bfd6 	b.w	29e1c <z_shell_op_cursor_move>

00029e70 <z_shell_op_cursor_end_move>:
	z_shell_op_cursor_move(shell, shell->ctx->cmd_buff_len -
   29e70:	6883      	ldr	r3, [r0, #8]
   29e72:	8f99      	ldrh	r1, [r3, #60]	; 0x3c
   29e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   29e76:	1ac9      	subs	r1, r1, r3
   29e78:	b209      	sxth	r1, r1
   29e7a:	f7ff bfcf 	b.w	29e1c <z_shell_op_cursor_move>

00029e7e <z_shell_op_left_arrow>:
	if (shell->ctx->cmd_buff_pos > 0) {
   29e7e:	6883      	ldr	r3, [r0, #8]
   29e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   29e82:	b11b      	cbz	r3, 29e8c <z_shell_op_left_arrow+0xe>
		z_shell_op_cursor_move(shell, -1);
   29e84:	f04f 31ff 	mov.w	r1, #4294967295
   29e88:	f7ff bfc8 	b.w	29e1c <z_shell_op_cursor_move>
}
   29e8c:	4770      	bx	lr

00029e8e <z_shell_op_right_arrow>:
	if (shell->ctx->cmd_buff_pos < shell->ctx->cmd_buff_len) {
   29e8e:	6883      	ldr	r3, [r0, #8]
   29e90:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   29e92:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
   29e94:	429a      	cmp	r2, r3
   29e96:	d202      	bcs.n	29e9e <z_shell_op_right_arrow+0x10>
		z_shell_op_cursor_move(shell, 1);
   29e98:	2101      	movs	r1, #1
   29e9a:	f7ff bfbf 	b.w	29e1c <z_shell_op_cursor_move>
}
   29e9e:	4770      	bx	lr

00029ea0 <z_shell_op_delete_from_cursor>:
	shell->ctx->cmd_buff_len = shell->ctx->cmd_buff_pos;
   29ea0:	6883      	ldr	r3, [r0, #8]
   29ea2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   29ea4:	879a      	strh	r2, [r3, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos] = '\0';
   29ea6:	4413      	add	r3, r2
   29ea8:	2200      	movs	r2, #0
   29eaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	z_clear_eos(shell);
   29eae:	f7ea bce9 	b.w	14884 <z_clear_eos>

00029eb2 <z_shell_cmd_line_erase>:
{
   29eb2:	b510      	push	{r4, lr}
   29eb4:	4604      	mov	r4, r0
	z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   29eb6:	6880      	ldr	r0, [r0, #8]
   29eb8:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   29eba:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   29ebc:	3020      	adds	r0, #32
   29ebe:	f7ff fee2 	bl	29c86 <z_shell_multiline_data_calc>
				   -(shell->ctx->vt100_ctx.cons.cur_x - 1));
   29ec2:	68a3      	ldr	r3, [r4, #8]
   29ec4:	8c19      	ldrh	r1, [r3, #32]
	z_shell_op_cursor_horiz_move(shell,
   29ec6:	4620      	mov	r0, r4
   29ec8:	f1c1 0101 	rsb	r1, r1, #1
   29ecc:	f7ea fcfc 	bl	148c8 <z_shell_op_cursor_horiz_move>
	z_shell_op_cursor_vert_move(shell, shell->ctx->vt100_ctx.cons.cur_y - 1);
   29ed0:	68a3      	ldr	r3, [r4, #8]
   29ed2:	8c99      	ldrh	r1, [r3, #36]	; 0x24
   29ed4:	4620      	mov	r0, r4
   29ed6:	3901      	subs	r1, #1
   29ed8:	f7ea fce0 	bl	1489c <z_shell_op_cursor_vert_move>
	z_clear_eos(shell);
   29edc:	4620      	mov	r0, r4
}
   29ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_clear_eos(shell);
   29ee2:	f7ea bccf 	b.w	14884 <z_clear_eos>

00029ee6 <z_shell_print_stream>:
	z_shell_write((const struct shell *) user_ctx, data, len);
   29ee6:	f7ea bd83 	b.w	149f0 <z_shell_write>

00029eea <z_shell_vfprintf>:
{
   29eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   29eec:	461e      	mov	r6, r3
	    z_flag_use_colors_get(shell)	  &&
   29eee:	6883      	ldr	r3, [r0, #8]
{
   29ef0:	4615      	mov	r5, r2
	return sh->ctx->cfg.flags.use_colors == 1;
   29ef2:	f8d3 2260 	ldr.w	r2, [r3, #608]	; 0x260
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   29ef6:	06d2      	lsls	r2, r2, #27
{
   29ef8:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_SHELL_VT100_COLORS) &&
   29efa:	d513      	bpl.n	29f24 <z_shell_vfprintf+0x3a>
	    z_flag_use_colors_get(shell)	  &&
   29efc:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
   29f00:	428a      	cmp	r2, r1
   29f02:	d00f      	beq.n	29f24 <z_shell_vfprintf+0x3a>
			     enum shell_vt100_color color);

static inline void z_shell_vt100_colors_store(const struct shell *sh,
					      struct shell_vt100_colors *color)
{
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   29f04:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   29f06:	f8ad 3004 	strh.w	r3, [sp, #4]
		z_shell_vt100_color_set(shell, color);
   29f0a:	f7ea fdf1 	bl	14af0 <z_shell_vt100_color_set>
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   29f0e:	6960      	ldr	r0, [r4, #20]
   29f10:	4629      	mov	r1, r5
   29f12:	4632      	mov	r2, r6
   29f14:	f7ea fb30 	bl	14578 <z_shell_fprintf_fmt>
		z_shell_vt100_colors_restore(shell, &col);
   29f18:	a901      	add	r1, sp, #4
   29f1a:	4620      	mov	r0, r4
   29f1c:	f7ea fe08 	bl	14b30 <z_shell_vt100_colors_restore>
}
   29f20:	b003      	add	sp, #12
   29f22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		z_shell_fprintf_fmt(shell->fprintf_ctx, fmt, args);
   29f24:	6960      	ldr	r0, [r4, #20]
   29f26:	4632      	mov	r2, r6
   29f28:	4629      	mov	r1, r5
   29f2a:	f7ea fb25 	bl	14578 <z_shell_fprintf_fmt>
}
   29f2e:	e7f7      	b.n	29f20 <z_shell_vfprintf+0x36>

00029f30 <data_insert>:
{
   29f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   29f34:	6886      	ldr	r6, [r0, #8]
   29f36:	8fb5      	ldrh	r5, [r6, #60]	; 0x3c
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   29f38:	18ab      	adds	r3, r5, r2
   29f3a:	2bff      	cmp	r3, #255	; 0xff
{
   29f3c:	4607      	mov	r7, r0
   29f3e:	4688      	mov	r8, r1
   29f40:	4614      	mov	r4, r2
	if ((shell->ctx->cmd_buff_len + len) >= CONFIG_SHELL_CMD_BUFF_SIZE) {
   29f42:	dc1f      	bgt.n	29f84 <data_insert+0x54>
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   29f44:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
   29f46:	1aed      	subs	r5, r5, r3
	char *curr_pos = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   29f48:	3342      	adds	r3, #66	; 0x42
   29f4a:	441e      	add	r6, r3
	uint16_t after = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   29f4c:	b2ad      	uxth	r5, r5
   29f4e:	462a      	mov	r2, r5
   29f50:	4631      	mov	r1, r6
   29f52:	1930      	adds	r0, r6, r4
   29f54:	f002 fe5d 	bl	2cc12 <memmove>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   29f58:	4622      	mov	r2, r4
   29f5a:	4641      	mov	r1, r8
   29f5c:	4630      	mov	r0, r6
   29f5e:	f002 fe4a 	bl	2cbf6 <memcpy>
	shell->ctx->cmd_buff_len += len;
   29f62:	68ba      	ldr	r2, [r7, #8]
   29f64:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
   29f66:	4423      	add	r3, r4
   29f68:	b29b      	uxth	r3, r3
   29f6a:	8793      	strh	r3, [r2, #60]	; 0x3c
	shell->ctx->cmd_buff[shell->ctx->cmd_buff_len] = '\0';
   29f6c:	4413      	add	r3, r2
   29f6e:	2200      	movs	r2, #0
   29f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	if (!z_flag_echo_get(shell)) {
   29f74:	68bb      	ldr	r3, [r7, #8]
	return sh->ctx->cfg.flags.echo == 1;
   29f76:	f8d3 1260 	ldr.w	r1, [r3, #608]	; 0x260
   29f7a:	0789      	lsls	r1, r1, #30
   29f7c:	d404      	bmi.n	29f88 <data_insert+0x58>
		shell->ctx->cmd_buff_pos += len;
   29f7e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
   29f80:	4414      	add	r4, r2
   29f82:	87dc      	strh	r4, [r3, #62]	; 0x3e
}
   29f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	reprint_from_cursor(shell, after, false);
   29f88:	4629      	mov	r1, r5
   29f8a:	4638      	mov	r0, r7
}
   29f8c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	reprint_from_cursor(shell, after, false);
   29f90:	f7ea beb6 	b.w	14d00 <reprint_from_cursor>

00029f94 <z_shell_op_completion_insert>:
	data_insert(shell, compl, compl_len);
   29f94:	f7ff bfcc 	b.w	29f30 <data_insert>

00029f98 <z_shell_op_char_delete>:
{
   29f98:	b538      	push	{r3, r4, r5, lr}
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   29f9a:	6883      	ldr	r3, [r0, #8]
{
   29f9c:	4605      	mov	r5, r0
	uint16_t diff = shell->ctx->cmd_buff_len - shell->ctx->cmd_buff_pos;
   29f9e:	8f9c      	ldrh	r4, [r3, #60]	; 0x3c
   29fa0:	8fd8      	ldrh	r0, [r3, #62]	; 0x3e
   29fa2:	1a24      	subs	r4, r4, r0
   29fa4:	b2a4      	uxth	r4, r4
	if (diff == 0U) {
   29fa6:	b18c      	cbz	r4, 29fcc <z_shell_op_char_delete+0x34>
	char *str = &shell->ctx->cmd_buff[shell->ctx->cmd_buff_pos];
   29fa8:	3042      	adds	r0, #66	; 0x42
   29faa:	4418      	add	r0, r3
__ssp_bos_icheck3(memmove, void *, const void *)
   29fac:	4622      	mov	r2, r4
   29fae:	1c41      	adds	r1, r0, #1
   29fb0:	f002 fe2f 	bl	2cc12 <memmove>
	--shell->ctx->cmd_buff_len;
   29fb4:	68aa      	ldr	r2, [r5, #8]
   29fb6:	8f93      	ldrh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   29fb8:	1e61      	subs	r1, r4, #1
	--shell->ctx->cmd_buff_len;
   29fba:	3b01      	subs	r3, #1
   29fbc:	8793      	strh	r3, [r2, #60]	; 0x3c
	reprint_from_cursor(shell, --diff, true);
   29fbe:	4628      	mov	r0, r5
   29fc0:	2201      	movs	r2, #1
}
   29fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	reprint_from_cursor(shell, --diff, true);
   29fc6:	b289      	uxth	r1, r1
   29fc8:	f7ea be9a 	b.w	14d00 <reprint_from_cursor>
}
   29fcc:	bd38      	pop	{r3, r4, r5, pc}

00029fce <z_shell_op_char_backspace>:
	if ((shell->ctx->cmd_buff_len == 0) ||
   29fce:	6883      	ldr	r3, [r0, #8]
   29fd0:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
{
   29fd2:	b510      	push	{r4, lr}
   29fd4:	4604      	mov	r4, r0
	if ((shell->ctx->cmd_buff_len == 0) ||
   29fd6:	b152      	cbz	r2, 29fee <z_shell_op_char_backspace+0x20>
   29fd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
   29fda:	b143      	cbz	r3, 29fee <z_shell_op_char_backspace+0x20>
	z_shell_op_cursor_move(shell, -1);
   29fdc:	f04f 31ff 	mov.w	r1, #4294967295
   29fe0:	f7ff ff1c 	bl	29e1c <z_shell_op_cursor_move>
	z_shell_op_char_delete(shell);
   29fe4:	4620      	mov	r0, r4
}
   29fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_shell_op_char_delete(shell);
   29fea:	f7ff bfd5 	b.w	29f98 <z_shell_op_char_delete>
}
   29fee:	bd10      	pop	{r4, pc}

00029ff0 <msg_from_fifo.isra.0>:
static struct log_msg *msg_from_fifo(const struct shell_log_backend *backend)
   29ff0:	b507      	push	{r0, r1, r2, lr}
	return z_impl_k_msgq_get(msgq, data, timeout);
   29ff2:	2200      	movs	r2, #0
   29ff4:	2300      	movs	r3, #0
   29ff6:	4669      	mov	r1, sp
   29ff8:	f7fa fa46 	bl	24488 <z_impl_k_msgq_get>
	return (err == 0) ? msg.msg : NULL;
   29ffc:	b918      	cbnz	r0, 2a006 <msg_from_fifo.isra.0+0x16>
   29ffe:	9800      	ldr	r0, [sp, #0]
}
   2a000:	b003      	add	sp, #12
   2a002:	f85d fb04 	ldr.w	pc, [sp], #4
	return (err == 0) ? msg.msg : NULL;
   2a006:	2000      	movs	r0, #0
   2a008:	e7fa      	b.n	2a000 <msg_from_fifo.isra.0+0x10>

0002a00a <dropped>:
	}
}

static void dropped(const struct log_backend *const backend, uint32_t cnt)
{
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2a00a:	6843      	ldr	r3, [r0, #4]
   2a00c:	681b      	ldr	r3, [r3, #0]
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2a00e:	e9d3 3206 	ldrd	r3, r2, [r3, #24]
   2a012:	f3bf 8f5b 	dmb	ish
   2a016:	e853 0f00 	ldrex	r0, [r3]
   2a01a:	4408      	add	r0, r1
   2a01c:	e843 0c00 	strex	ip, r0, [r3]
   2a020:	f1bc 0f00 	cmp.w	ip, #0
   2a024:	d1f7      	bne.n	2a016 <dropped+0xc>
   2a026:	f3bf 8f5b 	dmb	ish
   2a02a:	68d3      	ldr	r3, [r2, #12]
   2a02c:	f3bf 8f5b 	dmb	ish
   2a030:	e853 2f00 	ldrex	r2, [r3]
   2a034:	440a      	add	r2, r1
   2a036:	e843 2000 	strex	r0, r2, [r3]
   2a03a:	2800      	cmp	r0, #0
   2a03c:	d1f8      	bne.n	2a030 <dropped+0x26>
   2a03e:	f3bf 8f5b 	dmb	ish
	const struct shell_log_backend *log_backend = shell->log_backend;

	atomic_add(&shell->stats->log_lost_cnt, cnt);
	atomic_add(&log_backend->control_block->dropped_cnt, cnt);
}
   2a042:	4770      	bx	lr

0002a044 <z_shell_log_backend_output_func>:
{
   2a044:	b510      	push	{r4, lr}
   2a046:	4613      	mov	r3, r2
   2a048:	460c      	mov	r4, r1
	z_shell_print_stream(ctx, data, length);
   2a04a:	460a      	mov	r2, r1
   2a04c:	4601      	mov	r1, r0
   2a04e:	4618      	mov	r0, r3
   2a050:	f7ff ff49 	bl	29ee6 <z_shell_print_stream>
}
   2a054:	4620      	mov	r0, r4
   2a056:	bd10      	pop	{r4, pc}

0002a058 <z_shell_log_backend_enable>:
{
   2a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a05a:	4604      	mov	r4, r0
   2a05c:	460e      	mov	r6, r1
   2a05e:	4617      	mov	r7, r2
		while ((msg = msg_from_fifo(backend)) != NULL) {
   2a060:	6860      	ldr	r0, [r4, #4]
   2a062:	f7ff ffc5 	bl	29ff0 <msg_from_fifo.isra.0>
   2a066:	4605      	mov	r5, r0
   2a068:	b960      	cbnz	r0, 2a084 <z_shell_log_backend_enable+0x2c>
		log_backend_enable(backend->backend, ctx, init_log_level);
   2a06a:	463a      	mov	r2, r7
   2a06c:	6820      	ldr	r0, [r4, #0]
   2a06e:	4631      	mov	r1, r6
   2a070:	f7e7 fe40 	bl	11cf4 <log_backend_enable>
		log_output_ctx_set(backend->log_output, ctx);
   2a074:	68a3      	ldr	r3, [r4, #8]
   2a076:	685b      	ldr	r3, [r3, #4]
 * @param ctx		User context.
 */
static inline void log_output_ctx_set(const struct log_output *output,
				      void *ctx)
{
	output->control_block->ctx = ctx;
   2a078:	605e      	str	r6, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   2a07a:	68e3      	ldr	r3, [r4, #12]
		backend->control_block->state = SHELL_LOG_BACKEND_ENABLED;
   2a07c:	2201      	movs	r2, #1
   2a07e:	711a      	strb	r2, [r3, #4]
		backend->control_block->dropped_cnt = 0;
   2a080:	601d      	str	r5, [r3, #0]
}
   2a082:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			log_msg_put(msg);
   2a084:	f7ff fa1e 	bl	294c4 <log_msg_put>
   2a088:	e7ea      	b.n	2a060 <z_shell_log_backend_enable+0x8>

0002a08a <z_shell_log_backend_disable>:
{
   2a08a:	b510      	push	{r4, lr}
   2a08c:	4604      	mov	r4, r0
	log_backend_disable(backend->backend);
   2a08e:	6800      	ldr	r0, [r0, #0]
   2a090:	f7e7 fe5a 	bl	11d48 <log_backend_disable>
	backend->control_block->state = SHELL_LOG_BACKEND_DISABLED;
   2a094:	68e3      	ldr	r3, [r4, #12]
   2a096:	2202      	movs	r2, #2
   2a098:	711a      	strb	r2, [r3, #4]
}
   2a09a:	bd10      	pop	{r4, pc}

0002a09c <z_shell_log_backend_process>:
			(const struct shell *)backend->backend->cb->ctx;
   2a09c:	6803      	ldr	r3, [r0, #0]
	const struct shell *shell =
   2a09e:	685b      	ldr	r3, [r3, #4]
{
   2a0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	const struct shell *shell =
   2a0a2:	681e      	ldr	r6, [r3, #0]
			z_flag_use_colors_get(shell);
   2a0a4:	68b3      	ldr	r3, [r6, #8]
	return sh->ctx->cfg.flags.use_colors == 1;
   2a0a6:	f8d3 5260 	ldr.w	r5, [r3, #608]	; 0x260
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2a0aa:	68c3      	ldr	r3, [r0, #12]
   2a0ac:	f3bf 8f5b 	dmb	ish
{
   2a0b0:	4604      	mov	r4, r0
   2a0b2:	f3c5 1500 	ubfx	r5, r5, #4, #1
   2a0b6:	2200      	movs	r2, #0
   2a0b8:	e853 7f00 	ldrex	r7, [r3]
   2a0bc:	e843 2100 	strex	r1, r2, [r3]
   2a0c0:	2900      	cmp	r1, #0
   2a0c2:	d1f9      	bne.n	2a0b8 <z_shell_log_backend_process+0x1c>
   2a0c4:	f3bf 8f5b 	dmb	ish
	if (dropped) {
   2a0c8:	b18f      	cbz	r7, 2a0ee <z_shell_log_backend_process+0x52>
		if (colors) {
   2a0ca:	b13d      	cbz	r5, 2a0dc <z_shell_log_backend_process+0x40>
	memcpy(color, &sh->ctx->vt100_ctx.col, sizeof(*color));
   2a0cc:	68b3      	ldr	r3, [r6, #8]
			z_shell_vt100_color_set(shell, SHELL_VT100_COLOR_RED);
   2a0ce:	2101      	movs	r1, #1
   2a0d0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
   2a0d2:	f8ad 3004 	strh.w	r3, [sp, #4]
   2a0d6:	4630      	mov	r0, r6
   2a0d8:	f7ea fd0a 	bl	14af0 <z_shell_vt100_color_set>
		log_output_dropped_process(backend->log_output, dropped);
   2a0dc:	68a0      	ldr	r0, [r4, #8]
   2a0de:	4639      	mov	r1, r7
   2a0e0:	f7e8 f940 	bl	12364 <log_output_dropped_process>
		if (colors) {
   2a0e4:	b11d      	cbz	r5, 2a0ee <z_shell_log_backend_process+0x52>
			z_shell_vt100_colors_restore(shell, &col);
   2a0e6:	a901      	add	r1, sp, #4
   2a0e8:	4630      	mov	r0, r6
   2a0ea:	f7ea fd21 	bl	14b30 <z_shell_vt100_colors_restore>
	struct log_msg *msg = msg_from_fifo(backend);
   2a0ee:	6860      	ldr	r0, [r4, #4]
   2a0f0:	f7ff ff7e 	bl	29ff0 <msg_from_fifo.isra.0>
	if (!msg) {
   2a0f4:	4604      	mov	r4, r0
   2a0f6:	b168      	cbz	r0, 2a114 <z_shell_log_backend_process+0x78>
	msg_process(shell->log_backend->log_output, msg, colors);
   2a0f8:	69f3      	ldr	r3, [r6, #28]
		flags |= LOG_OUTPUT_FLAG_COLORS;
   2a0fa:	2d00      	cmp	r5, #0
	log_output_msg_process(log_output, msg, flags);
   2a0fc:	4601      	mov	r1, r0
   2a0fe:	bf08      	it	eq
   2a100:	220e      	moveq	r2, #14
   2a102:	6898      	ldr	r0, [r3, #8]
   2a104:	bf18      	it	ne
   2a106:	220f      	movne	r2, #15
   2a108:	f7e8 f89a 	bl	12240 <log_output_msg_process>
	log_msg_put(msg);
   2a10c:	4620      	mov	r0, r4
   2a10e:	f7ff f9d9 	bl	294c4 <log_msg_put>
	return true;
   2a112:	2001      	movs	r0, #1
}
   2a114:	b003      	add	sp, #12
   2a116:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002a118 <panic>:
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2a118:	6843      	ldr	r3, [r0, #4]
{
   2a11a:	b510      	push	{r4, lr}
	const struct shell *shell = (const struct shell *)backend->cb->ctx;
   2a11c:	681c      	ldr	r4, [r3, #0]
	err = shell->iface->api->enable(shell->iface, true);
   2a11e:	6860      	ldr	r0, [r4, #4]
   2a120:	6803      	ldr	r3, [r0, #0]
   2a122:	2101      	movs	r1, #1
   2a124:	689b      	ldr	r3, [r3, #8]
   2a126:	4798      	blx	r3
	if (err == 0) {
   2a128:	bb48      	cbnz	r0, 2a17e <panic+0x66>
		shell->log_backend->control_block->state =
   2a12a:	69e3      	ldr	r3, [r4, #28]
   2a12c:	68db      	ldr	r3, [r3, #12]
   2a12e:	2203      	movs	r2, #3
   2a130:	711a      	strb	r2, [r3, #4]
	Z_SHELL_SET_FLAG_ATOMIC(sh, ctx, panic_mode, val, ret);
   2a132:	68a3      	ldr	r3, [r4, #8]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a134:	f3bf 8f5b 	dmb	ish
   2a138:	f503 7319 	add.w	r3, r3, #612	; 0x264
   2a13c:	e853 2f00 	ldrex	r2, [r3]
   2a140:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   2a144:	e843 2100 	strex	r1, r2, [r3]
   2a148:	2900      	cmp	r1, #0
   2a14a:	d1f7      	bne.n	2a13c <panic+0x24>
   2a14c:	f3bf 8f5b 	dmb	ish
		z_shell_multiline_data_calc(&shell->ctx->vt100_ctx.cons,
   2a150:	68a0      	ldr	r0, [r4, #8]
   2a152:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2a154:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
   2a156:	3020      	adds	r0, #32
   2a158:	f7ff fd95 	bl	29c86 <z_shell_multiline_data_calc>
		z_shell_op_cursor_vert_move(shell, -1);
   2a15c:	f04f 31ff 	mov.w	r1, #4294967295
   2a160:	4620      	mov	r0, r4
   2a162:	f7ea fb9b 	bl	1489c <z_shell_op_cursor_vert_move>
					   -shell->ctx->vt100_ctx.cons.cur_x);
   2a166:	68a3      	ldr	r3, [r4, #8]
   2a168:	8c19      	ldrh	r1, [r3, #32]
		z_shell_op_cursor_horiz_move(shell,
   2a16a:	4620      	mov	r0, r4
   2a16c:	4249      	negs	r1, r1
   2a16e:	f7ea fbab 	bl	148c8 <z_shell_op_cursor_horiz_move>
			while (z_shell_log_backend_process(
   2a172:	69e0      	ldr	r0, [r4, #28]
   2a174:	f7ff ff92 	bl	2a09c <z_shell_log_backend_process>
   2a178:	2800      	cmp	r0, #0
   2a17a:	d1fa      	bne.n	2a172 <panic+0x5a>
}
   2a17c:	bd10      	pop	{r4, pc}
		z_shell_log_backend_disable(shell->log_backend);
   2a17e:	69e0      	ldr	r0, [r4, #28]
}
   2a180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		z_shell_log_backend_disable(shell->log_backend);
   2a184:	f7ff bf81 	b.w	2a08a <z_shell_log_backend_disable>

0002a188 <z_shell_raw_fprintf>:
{
   2a188:	b40e      	push	{r1, r2, r3}
   2a18a:	b503      	push	{r0, r1, lr}
   2a18c:	aa03      	add	r2, sp, #12
   2a18e:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   2a192:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2a194:	f7ea f9f0 	bl	14578 <z_shell_fprintf_fmt>
}
   2a198:	b002      	add	sp, #8
   2a19a:	f85d eb04 	ldr.w	lr, [sp], #4
   2a19e:	b003      	add	sp, #12
   2a1a0:	4770      	bx	lr

0002a1a2 <cmd_shell_stats_reset>:
	shell->stats->log_lost_cnt = 0;
   2a1a2:	6983      	ldr	r3, [r0, #24]
   2a1a4:	2000      	movs	r0, #0
   2a1a6:	6018      	str	r0, [r3, #0]
}
   2a1a8:	4770      	bx	lr

0002a1aa <z_shell_raw_fprintf>:
{
   2a1aa:	b40e      	push	{r1, r2, r3}
   2a1ac:	b503      	push	{r0, r1, lr}
   2a1ae:	aa03      	add	r2, sp, #12
   2a1b0:	f852 1b04 	ldr.w	r1, [r2], #4
	va_start(args, fmt);
   2a1b4:	9201      	str	r2, [sp, #4]
	z_shell_fprintf_fmt(ctx, fmt, args);
   2a1b6:	f7ea f9df 	bl	14578 <z_shell_fprintf_fmt>
}
   2a1ba:	b002      	add	sp, #8
   2a1bc:	f85d eb04 	ldr.w	lr, [sp], #4
   2a1c0:	b003      	add	sp, #12
   2a1c2:	4770      	bx	lr

0002a1c4 <cmd_echo_on>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
   2a1c4:	6883      	ldr	r3, [r0, #8]
   2a1c6:	f3bf 8f5b 	dmb	ish
   2a1ca:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2a1ce:	e853 2f00 	ldrex	r2, [r3]
   2a1d2:	f042 0202 	orr.w	r2, r2, #2
   2a1d6:	e843 2100 	strex	r1, r2, [r3]
   2a1da:	2900      	cmp	r1, #0
   2a1dc:	d1f7      	bne.n	2a1ce <cmd_echo_on+0xa>
   2a1de:	f3bf 8f5b 	dmb	ish
}
   2a1e2:	2000      	movs	r0, #0
   2a1e4:	4770      	bx	lr

0002a1e6 <cmd_bacskpace_mode_backspace>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, mode_delete, val, ret);
   2a1e6:	6883      	ldr	r3, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2a1e8:	f3bf 8f5b 	dmb	ish
   2a1ec:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2a1f0:	e853 2f00 	ldrex	r2, [r3]
   2a1f4:	f022 0208 	bic.w	r2, r2, #8
   2a1f8:	e843 2100 	strex	r1, r2, [r3]
   2a1fc:	2900      	cmp	r1, #0
   2a1fe:	d1f7      	bne.n	2a1f0 <cmd_bacskpace_mode_backspace+0xa>
   2a200:	f3bf 8f5b 	dmb	ish
}
   2a204:	2000      	movs	r0, #0
   2a206:	4770      	bx	lr

0002a208 <cmd_echo_off>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, echo, val, ret);
   2a208:	6883      	ldr	r3, [r0, #8]
   2a20a:	f3bf 8f5b 	dmb	ish
   2a20e:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2a212:	e853 2f00 	ldrex	r2, [r3]
   2a216:	f022 0202 	bic.w	r2, r2, #2
   2a21a:	e843 2100 	strex	r1, r2, [r3]
   2a21e:	2900      	cmp	r1, #0
   2a220:	d1f7      	bne.n	2a212 <cmd_echo_off+0xa>
   2a222:	f3bf 8f5b 	dmb	ish
}
   2a226:	2000      	movs	r0, #0
   2a228:	4770      	bx	lr

0002a22a <cmd_colors_off>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_colors, val, ret);
   2a22a:	6883      	ldr	r3, [r0, #8]
   2a22c:	f3bf 8f5b 	dmb	ish
   2a230:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2a234:	e853 2f00 	ldrex	r2, [r3]
   2a238:	f022 0210 	bic.w	r2, r2, #16
   2a23c:	e843 2100 	strex	r1, r2, [r3]
   2a240:	2900      	cmp	r1, #0
   2a242:	d1f7      	bne.n	2a234 <cmd_colors_off+0xa>
   2a244:	f3bf 8f5b 	dmb	ish
}
   2a248:	2000      	movs	r0, #0
   2a24a:	4770      	bx	lr

0002a24c <cmd_bacskpace_mode_delete>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, mode_delete, val, ret);
   2a24c:	6883      	ldr	r3, [r0, #8]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a24e:	f3bf 8f5b 	dmb	ish
   2a252:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2a256:	e853 2f00 	ldrex	r2, [r3]
   2a25a:	f042 0208 	orr.w	r2, r2, #8
   2a25e:	e843 2100 	strex	r1, r2, [r3]
   2a262:	2900      	cmp	r1, #0
   2a264:	d1f7      	bne.n	2a256 <cmd_bacskpace_mode_delete+0xa>
   2a266:	f3bf 8f5b 	dmb	ish
}
   2a26a:	2000      	movs	r0, #0
   2a26c:	4770      	bx	lr

0002a26e <cmd_colors_on>:
	Z_SHELL_SET_FLAG_ATOMIC(sh, cfg, use_colors, val, ret);
   2a26e:	6883      	ldr	r3, [r0, #8]
   2a270:	f3bf 8f5b 	dmb	ish
   2a274:	f503 7318 	add.w	r3, r3, #608	; 0x260
   2a278:	e853 2f00 	ldrex	r2, [r3]
   2a27c:	f042 0210 	orr.w	r2, r2, #16
   2a280:	e843 2100 	strex	r1, r2, [r3]
   2a284:	2900      	cmp	r1, #0
   2a286:	d1f7      	bne.n	2a278 <cmd_colors_on+0xa>
   2a288:	f3bf 8f5b 	dmb	ish
}
   2a28c:	2000      	movs	r0, #0
   2a28e:	4770      	bx	lr

0002a290 <remove_from_tail.part.0>:
static bool remove_from_tail(struct shell_history *history)
   2a290:	b508      	push	{r3, lr}
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2a292:	6883      	ldr	r3, [r0, #8]
	ring_buf_get_finish(history->ring_buf, total_len);
   2a294:	6800      	ldr	r0, [r0, #0]
	sys_dnode_t *const next = node->next;
   2a296:	e9d3 2100 	ldrd	r2, r1, [r3]
	prev->next = next;
   2a29a:	600a      	str	r2, [r1, #0]
	next->prev = prev;
   2a29c:	6051      	str	r1, [r2, #4]
	node->next = NULL;
   2a29e:	2200      	movs	r2, #0
	node->prev = NULL;
   2a2a0:	e9c3 2200 	strd	r2, r2, [r3]
			h_item->len + h_item->padding;
   2a2a4:	8919      	ldrh	r1, [r3, #8]
   2a2a6:	895b      	ldrh	r3, [r3, #10]
   2a2a8:	4419      	add	r1, r3
	ring_buf_get_finish(history->ring_buf, total_len);
   2a2aa:	310c      	adds	r1, #12
   2a2ac:	f7fe fe9a 	bl	28fe4 <ring_buf_get_finish>
}
   2a2b0:	2001      	movs	r0, #1
   2a2b2:	bd08      	pop	{r3, pc}

0002a2b4 <z_shell_history_mode_exit>:
	history->current = NULL;
   2a2b4:	2300      	movs	r3, #0
   2a2b6:	60c3      	str	r3, [r0, #12]
}
   2a2b8:	4770      	bx	lr

0002a2ba <z_shell_history_get>:
{
   2a2ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a2bc:	461f      	mov	r7, r3
	return list->head == list;
   2a2be:	4603      	mov	r3, r0
   2a2c0:	4616      	mov	r6, r2
   2a2c2:	f853 4f04 	ldr.w	r4, [r3, #4]!
	if (sys_dlist_is_empty(&history->list)) {
   2a2c6:	429c      	cmp	r4, r3
   2a2c8:	d102      	bne.n	2a2d0 <z_shell_history_get+0x16>
		*len = 0U;
   2a2ca:	2000      	movs	r0, #0
   2a2cc:	8038      	strh	r0, [r7, #0]
}
   2a2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!up) { /* button down */
   2a2d0:	68c5      	ldr	r5, [r0, #12]
   2a2d2:	b9b1      	cbnz	r1, 2a302 <z_shell_history_get+0x48>
		if (history->current == NULL) {
   2a2d4:	2d00      	cmp	r5, #0
   2a2d6:	d0f8      	beq.n	2a2ca <z_shell_history_get+0x10>
	return (node == list->head) ? NULL : node->prev;
   2a2d8:	42a5      	cmp	r5, r4
   2a2da:	d102      	bne.n	2a2e2 <z_shell_history_get+0x28>
	history->current = l_item;
   2a2dc:	2300      	movs	r3, #0
   2a2de:	60c3      	str	r3, [r0, #12]
	if (l_item) {
   2a2e0:	e7f3      	b.n	2a2ca <z_shell_history_get+0x10>
   2a2e2:	686c      	ldr	r4, [r5, #4]
	history->current = l_item;
   2a2e4:	60c4      	str	r4, [r0, #12]
	if (l_item) {
   2a2e6:	2c00      	cmp	r4, #0
   2a2e8:	d0ef      	beq.n	2a2ca <z_shell_history_get+0x10>
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a2ea:	8922      	ldrh	r2, [r4, #8]
   2a2ec:	f104 010c 	add.w	r1, r4, #12
   2a2f0:	4630      	mov	r0, r6
   2a2f2:	f002 fc80 	bl	2cbf6 <memcpy>
		*len = h_item->len;
   2a2f6:	8923      	ldrh	r3, [r4, #8]
   2a2f8:	803b      	strh	r3, [r7, #0]
		dst[*len] = '\0';
   2a2fa:	2200      	movs	r2, #0
   2a2fc:	54f2      	strb	r2, [r6, r3]
		return true;
   2a2fe:	2001      	movs	r0, #1
   2a300:	e7e5      	b.n	2a2ce <z_shell_history_get+0x14>
		sys_dlist_peek_head_not_empty(&history->list) :
   2a302:	2d00      	cmp	r5, #0
   2a304:	d0ee      	beq.n	2a2e4 <z_shell_history_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   2a306:	6883      	ldr	r3, [r0, #8]
   2a308:	429d      	cmp	r5, r3
   2a30a:	d0e7      	beq.n	2a2dc <z_shell_history_get+0x22>
   2a30c:	682c      	ldr	r4, [r5, #0]
   2a30e:	e7e9      	b.n	2a2e4 <z_shell_history_get+0x2a>

0002a310 <z_shell_history_purge>:
{
   2a310:	b538      	push	{r3, r4, r5, lr}
   2a312:	4604      	mov	r4, r0
	if (sys_dlist_is_empty(&history->list)) {
   2a314:	1d05      	adds	r5, r0, #4
   2a316:	6863      	ldr	r3, [r4, #4]
   2a318:	42ab      	cmp	r3, r5
   2a31a:	d004      	beq.n	2a326 <z_shell_history_purge+0x16>
   2a31c:	4620      	mov	r0, r4
   2a31e:	f7ff ffb7 	bl	2a290 <remove_from_tail.part.0>
	while (remove_from_tail(history)) {
   2a322:	2800      	cmp	r0, #0
   2a324:	d1f7      	bne.n	2a316 <z_shell_history_purge+0x6>
}
   2a326:	bd38      	pop	{r3, r4, r5, pc}

0002a328 <z_shell_history_init>:

void z_shell_history_init(struct shell_history *history)
{
	sys_dlist_init(&history->list);
   2a328:	1d03      	adds	r3, r0, #4
	list->tail = (sys_dnode_t *)list;
   2a32a:	e9c0 3301 	strd	r3, r3, [r0, #4]
	history->current = NULL;
   2a32e:	2300      	movs	r3, #0
   2a330:	60c3      	str	r3, [r0, #12]
}
   2a332:	4770      	bx	lr

0002a334 <z_shell_has_wildcard>:
{
   2a334:	b510      	push	{r4, lr}
   2a336:	4604      	mov	r4, r0
   2a338:	b908      	cbnz	r0, 2a33e <z_shell_has_wildcard+0xa>
	return false;
   2a33a:	2000      	movs	r0, #0
}
   2a33c:	bd10      	pop	{r4, pc}
   2a33e:	f7e2 f839 	bl	c3b4 <strlen>
	for (size_t i = 0; i < str_len; i++) {
   2a342:	2300      	movs	r3, #0
   2a344:	b280      	uxth	r0, r0
   2a346:	4283      	cmp	r3, r0
   2a348:	d2f7      	bcs.n	2a33a <z_shell_has_wildcard+0x6>
		if ((str[i] == '?') || (str[i] == '*')) {
   2a34a:	5ce2      	ldrb	r2, [r4, r3]
   2a34c:	2a3f      	cmp	r2, #63	; 0x3f
   2a34e:	d003      	beq.n	2a358 <z_shell_has_wildcard+0x24>
   2a350:	2a2a      	cmp	r2, #42	; 0x2a
   2a352:	d001      	beq.n	2a358 <z_shell_has_wildcard+0x24>
	for (size_t i = 0; i < str_len; i++) {
   2a354:	3301      	adds	r3, #1
   2a356:	e7f6      	b.n	2a346 <z_shell_has_wildcard+0x12>
			return true;
   2a358:	2001      	movs	r0, #1
   2a35a:	e7ef      	b.n	2a33c <z_shell_has_wildcard+0x8>

0002a35c <z_shell_wildcard_prepare>:
{
   2a35c:	b510      	push	{r4, lr}
   2a35e:	4604      	mov	r4, r0
__ssp_bos_icheck3(memset, void *, int)
   2a360:	6880      	ldr	r0, [r0, #8]
   2a362:	f44f 7280 	mov.w	r2, #256	; 0x100
   2a366:	2100      	movs	r1, #0
   2a368:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   2a36c:	f002 fc6b 	bl	2cc46 <memset>
	memcpy(shell->ctx->temp_buff,
   2a370:	68a0      	ldr	r0, [r4, #8]
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a372:	8f82      	ldrh	r2, [r0, #60]	; 0x3c
   2a374:	f100 0142 	add.w	r1, r0, #66	; 0x42
   2a378:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   2a37c:	f002 fc3b 	bl	2cbf6 <memcpy>
	z_shell_spaces_trim(shell->ctx->temp_buff);
   2a380:	68a0      	ldr	r0, [r4, #8]
   2a382:	f500 70a1 	add.w	r0, r0, #322	; 0x142
   2a386:	f7ea fa0d 	bl	147a4 <z_shell_spaces_trim>
	shell->ctx->cmd_tmp_buff_len = z_shell_strlen(shell->ctx->temp_buff) + 1;
   2a38a:	68a3      	ldr	r3, [r4, #8]
   2a38c:	f513 70a1 	adds.w	r0, r3, #322	; 0x142
   2a390:	d007      	beq.n	2a3a2 <z_shell_wildcard_prepare+0x46>
   2a392:	f7e2 f80f 	bl	c3b4 <strlen>
   2a396:	b283      	uxth	r3, r0
   2a398:	68a2      	ldr	r2, [r4, #8]
   2a39a:	3301      	adds	r3, #1
   2a39c:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
}
   2a3a0:	bd10      	pop	{r4, pc}
   2a3a2:	4603      	mov	r3, r0
   2a3a4:	e7f8      	b.n	2a398 <z_shell_wildcard_prepare+0x3c>

0002a3a6 <z_shell_wildcard_finalize>:

void z_shell_wildcard_finalize(const struct shell *shell)
{
   2a3a6:	b510      	push	{r4, lr}
   2a3a8:	4604      	mov	r4, r0
	memcpy(shell->ctx->cmd_buff,
   2a3aa:	6880      	ldr	r0, [r0, #8]
   2a3ac:	f8b0 2040 	ldrh.w	r2, [r0, #64]	; 0x40
   2a3b0:	f500 71a1 	add.w	r1, r0, #322	; 0x142
   2a3b4:	3042      	adds	r0, #66	; 0x42
   2a3b6:	f002 fc1e 	bl	2cbf6 <memcpy>
	       shell->ctx->temp_buff,
	       shell->ctx->cmd_tmp_buff_len);
	shell->ctx->cmd_buff_len = shell->ctx->cmd_tmp_buff_len;
   2a3ba:	68a3      	ldr	r3, [r4, #8]
   2a3bc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   2a3c0:	879a      	strh	r2, [r3, #60]	; 0x3c
}
   2a3c2:	bd10      	pop	{r4, pc}

0002a3c4 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   2a3c4:	2200      	movs	r2, #0
   2a3c6:	e9c0 2200 	strd	r2, r2, [r0]
   2a3ca:	6082      	str	r2, [r0, #8]
}
   2a3cc:	4770      	bx	lr

0002a3ce <bt_scan_stop>:
	return bt_le_scan_stop();
   2a3ce:	f7ef b8fd 	b.w	195cc <bt_le_scan_stop>

0002a3d2 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2a3d2:	b538      	push	{r3, r4, r5, lr}
   2a3d4:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2a3d6:	42ab      	cmp	r3, r5
{
   2a3d8:	4611      	mov	r1, r2
   2a3da:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   2a3dc:	d804      	bhi.n	2a3e8 <_copy+0x16>
   2a3de:	461a      	mov	r2, r3
   2a3e0:	f002 fc09 	bl	2cbf6 <memcpy>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2a3e4:	4620      	mov	r0, r4
   2a3e6:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   2a3e8:	2400      	movs	r4, #0
   2a3ea:	e7fb      	b.n	2a3e4 <_copy+0x12>

0002a3ec <_set>:
__ssp_bos_icheck3(memset, void *, int)
   2a3ec:	f002 bc2b 	b.w	2cc46 <memset>

0002a3f0 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   2a3f0:	09c3      	lsrs	r3, r0, #7
   2a3f2:	005a      	lsls	r2, r3, #1
   2a3f4:	4413      	add	r3, r2
   2a3f6:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   2a3fa:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   2a3fe:	b2c0      	uxtb	r0, r0
   2a400:	4770      	bx	lr

0002a402 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   2a402:	78cb      	ldrb	r3, [r1, #3]
   2a404:	7802      	ldrb	r2, [r0, #0]
   2a406:	4053      	eors	r3, r2
   2a408:	7003      	strb	r3, [r0, #0]
   2a40a:	884b      	ldrh	r3, [r1, #2]
   2a40c:	7842      	ldrb	r2, [r0, #1]
   2a40e:	4053      	eors	r3, r2
   2a410:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   2a412:	680a      	ldr	r2, [r1, #0]
   2a414:	7883      	ldrb	r3, [r0, #2]
   2a416:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a41a:	7083      	strb	r3, [r0, #2]
   2a41c:	680a      	ldr	r2, [r1, #0]
   2a41e:	78c3      	ldrb	r3, [r0, #3]
   2a420:	4053      	eors	r3, r2
   2a422:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   2a424:	79cb      	ldrb	r3, [r1, #7]
   2a426:	7902      	ldrb	r2, [r0, #4]
   2a428:	4053      	eors	r3, r2
   2a42a:	7103      	strb	r3, [r0, #4]
   2a42c:	88cb      	ldrh	r3, [r1, #6]
   2a42e:	7942      	ldrb	r2, [r0, #5]
   2a430:	4053      	eors	r3, r2
   2a432:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   2a434:	684a      	ldr	r2, [r1, #4]
   2a436:	7983      	ldrb	r3, [r0, #6]
   2a438:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a43c:	7183      	strb	r3, [r0, #6]
   2a43e:	684a      	ldr	r2, [r1, #4]
   2a440:	79c3      	ldrb	r3, [r0, #7]
   2a442:	4053      	eors	r3, r2
   2a444:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   2a446:	7acb      	ldrb	r3, [r1, #11]
   2a448:	7a02      	ldrb	r2, [r0, #8]
   2a44a:	4053      	eors	r3, r2
   2a44c:	7203      	strb	r3, [r0, #8]
   2a44e:	7a42      	ldrb	r2, [r0, #9]
   2a450:	894b      	ldrh	r3, [r1, #10]
   2a452:	4053      	eors	r3, r2
   2a454:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   2a456:	688a      	ldr	r2, [r1, #8]
   2a458:	7a83      	ldrb	r3, [r0, #10]
   2a45a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a45e:	7283      	strb	r3, [r0, #10]
   2a460:	688a      	ldr	r2, [r1, #8]
   2a462:	7ac3      	ldrb	r3, [r0, #11]
   2a464:	4053      	eors	r3, r2
   2a466:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   2a468:	7bcb      	ldrb	r3, [r1, #15]
   2a46a:	7b02      	ldrb	r2, [r0, #12]
   2a46c:	4053      	eors	r3, r2
   2a46e:	7303      	strb	r3, [r0, #12]
   2a470:	89cb      	ldrh	r3, [r1, #14]
   2a472:	7b42      	ldrb	r2, [r0, #13]
   2a474:	4053      	eors	r3, r2
   2a476:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   2a478:	68ca      	ldr	r2, [r1, #12]
   2a47a:	7b83      	ldrb	r3, [r0, #14]
   2a47c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   2a480:	7383      	strb	r3, [r0, #14]
   2a482:	68ca      	ldr	r2, [r1, #12]
   2a484:	7bc3      	ldrb	r3, [r0, #15]
   2a486:	4053      	eors	r3, r2
   2a488:	73c3      	strb	r3, [r0, #15]
}
   2a48a:	4770      	bx	lr

0002a48c <shift_rows>:
{
   2a48c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   2a48e:	7802      	ldrb	r2, [r0, #0]
   2a490:	f88d 2000 	strb.w	r2, [sp]
   2a494:	7942      	ldrb	r2, [r0, #5]
   2a496:	f88d 2001 	strb.w	r2, [sp, #1]
   2a49a:	7a82      	ldrb	r2, [r0, #10]
   2a49c:	f88d 2002 	strb.w	r2, [sp, #2]
   2a4a0:	7bc2      	ldrb	r2, [r0, #15]
   2a4a2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   2a4a6:	7902      	ldrb	r2, [r0, #4]
   2a4a8:	f88d 2004 	strb.w	r2, [sp, #4]
   2a4ac:	7a42      	ldrb	r2, [r0, #9]
   2a4ae:	f88d 2005 	strb.w	r2, [sp, #5]
   2a4b2:	7b82      	ldrb	r2, [r0, #14]
   2a4b4:	f88d 2006 	strb.w	r2, [sp, #6]
   2a4b8:	78c2      	ldrb	r2, [r0, #3]
   2a4ba:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   2a4be:	7a02      	ldrb	r2, [r0, #8]
   2a4c0:	f88d 2008 	strb.w	r2, [sp, #8]
   2a4c4:	7b42      	ldrb	r2, [r0, #13]
   2a4c6:	f88d 2009 	strb.w	r2, [sp, #9]
   2a4ca:	7882      	ldrb	r2, [r0, #2]
   2a4cc:	f88d 200a 	strb.w	r2, [sp, #10]
   2a4d0:	79c2      	ldrb	r2, [r0, #7]
   2a4d2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   2a4d6:	7b02      	ldrb	r2, [r0, #12]
   2a4d8:	f88d 200c 	strb.w	r2, [sp, #12]
   2a4dc:	7842      	ldrb	r2, [r0, #1]
   2a4de:	7ac3      	ldrb	r3, [r0, #11]
   2a4e0:	f88d 200d 	strb.w	r2, [sp, #13]
   2a4e4:	7982      	ldrb	r2, [r0, #6]
   2a4e6:	f88d 200e 	strb.w	r2, [sp, #14]
   2a4ea:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   2a4ee:	2310      	movs	r3, #16
   2a4f0:	466a      	mov	r2, sp
   2a4f2:	4619      	mov	r1, r3
   2a4f4:	f7ff ff6d 	bl	2a3d2 <_copy>
}
   2a4f8:	b005      	add	sp, #20
   2a4fa:	f85d fb04 	ldr.w	pc, [sp], #4

0002a4fe <mult_row_column>:
{
   2a4fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2a500:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2a502:	7808      	ldrb	r0, [r1, #0]
{
   2a504:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   2a506:	f7ff ff73 	bl	2a3f0 <_double_byte>
   2a50a:	4605      	mov	r5, r0
   2a50c:	7860      	ldrb	r0, [r4, #1]
   2a50e:	f7ff ff6f 	bl	2a3f0 <_double_byte>
   2a512:	78a2      	ldrb	r2, [r4, #2]
   2a514:	7863      	ldrb	r3, [r4, #1]
   2a516:	4053      	eors	r3, r2
   2a518:	78e2      	ldrb	r2, [r4, #3]
   2a51a:	4053      	eors	r3, r2
   2a51c:	405d      	eors	r5, r3
   2a51e:	4045      	eors	r5, r0
   2a520:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   2a522:	7860      	ldrb	r0, [r4, #1]
   2a524:	7827      	ldrb	r7, [r4, #0]
   2a526:	f7ff ff63 	bl	2a3f0 <_double_byte>
   2a52a:	4605      	mov	r5, r0
   2a52c:	78a0      	ldrb	r0, [r4, #2]
   2a52e:	f7ff ff5f 	bl	2a3f0 <_double_byte>
   2a532:	78a3      	ldrb	r3, [r4, #2]
   2a534:	405f      	eors	r7, r3
   2a536:	78e3      	ldrb	r3, [r4, #3]
   2a538:	405f      	eors	r7, r3
   2a53a:	407d      	eors	r5, r7
   2a53c:	4045      	eors	r5, r0
   2a53e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   2a540:	78a0      	ldrb	r0, [r4, #2]
   2a542:	7865      	ldrb	r5, [r4, #1]
   2a544:	7827      	ldrb	r7, [r4, #0]
   2a546:	f7ff ff53 	bl	2a3f0 <_double_byte>
   2a54a:	406f      	eors	r7, r5
   2a54c:	4605      	mov	r5, r0
   2a54e:	78e0      	ldrb	r0, [r4, #3]
   2a550:	f7ff ff4e 	bl	2a3f0 <_double_byte>
   2a554:	78e3      	ldrb	r3, [r4, #3]
   2a556:	405f      	eors	r7, r3
   2a558:	407d      	eors	r5, r7
   2a55a:	4045      	eors	r5, r0
   2a55c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   2a55e:	7820      	ldrb	r0, [r4, #0]
   2a560:	f7ff ff46 	bl	2a3f0 <_double_byte>
   2a564:	7863      	ldrb	r3, [r4, #1]
   2a566:	7825      	ldrb	r5, [r4, #0]
   2a568:	405d      	eors	r5, r3
   2a56a:	78a3      	ldrb	r3, [r4, #2]
   2a56c:	405d      	eors	r5, r3
   2a56e:	4045      	eors	r5, r0
   2a570:	78e0      	ldrb	r0, [r4, #3]
   2a572:	f7ff ff3d 	bl	2a3f0 <_double_byte>
   2a576:	b2ed      	uxtb	r5, r5
   2a578:	4045      	eors	r5, r0
   2a57a:	70f5      	strb	r5, [r6, #3]
}
   2a57c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002a57e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   2a57e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2a580:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   2a582:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   2a584:	f912 3b10 	ldrsb.w	r3, [r2], #16
   2a588:	2b00      	cmp	r3, #0
   2a58a:	bfb4      	ite	lt
   2a58c:	2387      	movlt	r3, #135	; 0x87
   2a58e:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   2a590:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   2a594:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   2a598:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   2a59a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   2a59e:	d002      	beq.n	2a5a6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   2a5a0:	7813      	ldrb	r3, [r2, #0]
   2a5a2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   2a5a4:	e7f4      	b.n	2a590 <gf_double+0x12>
	}
}
   2a5a6:	bd10      	pop	{r4, pc}

0002a5a8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   2a5a8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   2a5aa:	b120      	cbz	r0, 2a5b6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   2a5ac:	2258      	movs	r2, #88	; 0x58
   2a5ae:	2100      	movs	r1, #0
   2a5b0:	f7ff ff1c 	bl	2a3ec <_set>
   2a5b4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2a5b6:	bd08      	pop	{r3, pc}

0002a5b8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   2a5b8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2a5ba:	4604      	mov	r4, r0
   2a5bc:	b188      	cbz	r0, 2a5e2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2a5be:	2210      	movs	r2, #16
   2a5c0:	2100      	movs	r1, #0
   2a5c2:	f7ff ff13 	bl	2a3ec <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   2a5c6:	2210      	movs	r2, #16
   2a5c8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a5cc:	2100      	movs	r1, #0
   2a5ce:	f7ff ff0d 	bl	2a3ec <_set>
	s->leftover_offset = 0;
   2a5d2:	2300      	movs	r3, #0
   2a5d4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2a5d6:	2200      	movs	r2, #0
   2a5d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   2a5dc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   2a5e0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   2a5e2:	bd10      	pop	{r4, pc}

0002a5e4 <tc_cmac_setup>:
{
   2a5e4:	b570      	push	{r4, r5, r6, lr}
   2a5e6:	460d      	mov	r5, r1
   2a5e8:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2a5ea:	4604      	mov	r4, r0
   2a5ec:	b310      	cbz	r0, 2a634 <tc_cmac_setup+0x50>
   2a5ee:	b311      	cbz	r1, 2a636 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   2a5f0:	2258      	movs	r2, #88	; 0x58
   2a5f2:	2100      	movs	r1, #0
   2a5f4:	f7ff fefa 	bl	2a3ec <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2a5f8:	4629      	mov	r1, r5
	s->sched = sched;
   2a5fa:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   2a5fc:	4630      	mov	r0, r6
   2a5fe:	f7eb fb69 	bl	15cd4 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   2a602:	2210      	movs	r2, #16
   2a604:	2100      	movs	r1, #0
   2a606:	4620      	mov	r0, r4
   2a608:	f7ff fef0 	bl	2a3ec <_set>
	gf_double (s->K1, s->iv);
   2a60c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a610:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a612:	4621      	mov	r1, r4
   2a614:	4620      	mov	r0, r4
   2a616:	f7eb fbaf 	bl	15d78 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2a61a:	4621      	mov	r1, r4
   2a61c:	4628      	mov	r0, r5
   2a61e:	f7ff ffae 	bl	2a57e <gf_double>
	gf_double (s->K2, s->K1);
   2a622:	4629      	mov	r1, r5
   2a624:	f104 0020 	add.w	r0, r4, #32
   2a628:	f7ff ffa9 	bl	2a57e <gf_double>
	tc_cmac_init(s);
   2a62c:	4620      	mov	r0, r4
   2a62e:	f7ff ffc3 	bl	2a5b8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   2a632:	2001      	movs	r0, #1
}
   2a634:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2a636:	4608      	mov	r0, r1
   2a638:	e7fc      	b.n	2a634 <tc_cmac_setup+0x50>

0002a63a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2a63a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2a63e:	460d      	mov	r5, r1
   2a640:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   2a642:	4604      	mov	r4, r0
   2a644:	2800      	cmp	r0, #0
   2a646:	d062      	beq.n	2a70e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2a648:	b912      	cbnz	r2, 2a650 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2a64a:	2001      	movs	r0, #1
}
   2a64c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   2a650:	2900      	cmp	r1, #0
   2a652:	d05c      	beq.n	2a70e <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   2a654:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   2a658:	ea50 0301 	orrs.w	r3, r0, r1
   2a65c:	d057      	beq.n	2a70e <tc_cmac_update+0xd4>
	s->countdown--;
   2a65e:	f110 32ff 	adds.w	r2, r0, #4294967295
	if (s->leftover_offset > 0) {
   2a662:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   2a666:	f141 33ff 	adc.w	r3, r1, #4294967295
   2a66a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2a66e:	f1b8 0f00 	cmp.w	r8, #0
   2a672:	d02a      	beq.n	2a6ca <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   2a674:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   2a678:	f108 0030 	add.w	r0, r8, #48	; 0x30
   2a67c:	42be      	cmp	r6, r7
   2a67e:	4420      	add	r0, r4
   2a680:	d208      	bcs.n	2a694 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2a682:	462a      	mov	r2, r5
   2a684:	4633      	mov	r3, r6
   2a686:	4631      	mov	r1, r6
   2a688:	f7ff fea3 	bl	2a3d2 <_copy>
			s->leftover_offset += data_length;
   2a68c:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2a68e:	4432      	add	r2, r6
   2a690:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   2a692:	e7da      	b.n	2a64a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   2a694:	463b      	mov	r3, r7
   2a696:	462a      	mov	r2, r5
   2a698:	4639      	mov	r1, r7
   2a69a:	f7ff fe9a 	bl	2a3d2 <_copy>
		data_length -= remaining_space;
   2a69e:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2a6a0:	2300      	movs	r3, #0
   2a6a2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   2a6a4:	4446      	add	r6, r8
		data += remaining_space;
   2a6a6:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a6a8:	1e63      	subs	r3, r4, #1
   2a6aa:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2a6ae:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a6b2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a6b6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   2a6b8:	ea82 0200 	eor.w	r2, r2, r0
   2a6bc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a6be:	d1f6      	bne.n	2a6ae <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a6c0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a6c2:	4621      	mov	r1, r4
   2a6c4:	4620      	mov	r0, r4
   2a6c6:	f7eb fb57 	bl	15d78 <tc_aes_encrypt>
   2a6ca:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2a6ce:	2e10      	cmp	r6, #16
   2a6d0:	d80a      	bhi.n	2a6e8 <tc_cmac_update+0xae>
	if (data_length > 0) {
   2a6d2:	2e00      	cmp	r6, #0
   2a6d4:	d0b9      	beq.n	2a64a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   2a6d6:	4633      	mov	r3, r6
   2a6d8:	462a      	mov	r2, r5
   2a6da:	4631      	mov	r1, r6
   2a6dc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   2a6e0:	f7ff fe77 	bl	2a3d2 <_copy>
		s->leftover_offset = data_length;
   2a6e4:	6466      	str	r6, [r4, #68]	; 0x44
   2a6e6:	e7b0      	b.n	2a64a <tc_cmac_update+0x10>
   2a6e8:	1e63      	subs	r3, r4, #1
   2a6ea:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2a6ec:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a6f0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a6f4:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   2a6f6:	ea82 0200 	eor.w	r2, r2, r0
   2a6fa:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a6fc:	d1f6      	bne.n	2a6ec <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2a6fe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a700:	4621      	mov	r1, r4
   2a702:	4620      	mov	r0, r4
   2a704:	f7eb fb38 	bl	15d78 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2a708:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2a70a:	3e10      	subs	r6, #16
   2a70c:	e7df      	b.n	2a6ce <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   2a70e:	2000      	movs	r0, #0
   2a710:	e79c      	b.n	2a64c <tc_cmac_update+0x12>

0002a712 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   2a712:	b570      	push	{r4, r5, r6, lr}
   2a714:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   2a716:	4605      	mov	r5, r0
   2a718:	b1e8      	cbz	r0, 2a756 <tc_cmac_final+0x44>
   2a71a:	b369      	cbz	r1, 2a778 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2a71c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   2a71e:	2a10      	cmp	r2, #16
   2a720:	d11a      	bne.n	2a758 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   2a722:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a724:	1e63      	subs	r3, r4, #1
   2a726:	3901      	subs	r1, #1
   2a728:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2a72c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   2a730:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   2a734:	4072      	eors	r2, r6
   2a736:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a73a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2a73c:	ea82 0206 	eor.w	r2, r2, r6
   2a740:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2a742:	d1f3      	bne.n	2a72c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   2a744:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   2a746:	4621      	mov	r1, r4
   2a748:	4628      	mov	r0, r5
   2a74a:	f7eb fb15 	bl	15d78 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2a74e:	4620      	mov	r0, r4
   2a750:	f7ff ff2a 	bl	2a5a8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   2a754:	2001      	movs	r0, #1
}
   2a756:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2a758:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2a75c:	2100      	movs	r1, #0
   2a75e:	f1c2 0210 	rsb	r2, r2, #16
   2a762:	4420      	add	r0, r4
   2a764:	f7ff fe42 	bl	2a3ec <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2a768:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2a76a:	4423      	add	r3, r4
   2a76c:	2280      	movs	r2, #128	; 0x80
   2a76e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   2a772:	f104 0120 	add.w	r1, r4, #32
   2a776:	e7d5      	b.n	2a724 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   2a778:	4608      	mov	r0, r1
   2a77a:	e7ec      	b.n	2a756 <tc_cmac_final+0x44>

0002a77c <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   2a77c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   2a77e:	6800      	ldr	r0, [r0, #0]
   2a780:	f7eb bb82 	b.w	15e88 <z_arm_fatal_error>

0002a784 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2a784:	2100      	movs	r1, #0
   2a786:	2001      	movs	r0, #1
   2a788:	f7eb bb7e 	b.w	15e88 <z_arm_fatal_error>

0002a78c <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2a78c:	b508      	push	{r3, lr}
	handler();
   2a78e:	f7eb fc37 	bl	16000 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   2a792:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   2a796:	f7eb bd27 	b.w	161e8 <z_arm_exc_exit>

0002a79a <_stdout_hook_default>:
}
   2a79a:	f04f 30ff 	mov.w	r0, #4294967295
   2a79e:	4770      	bx	lr

0002a7a0 <__errno>:
		/* coverity[OVERRUN] */
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   2a7a0:	f7f8 bf10 	b.w	235c4 <z_impl_z_errno>

0002a7a4 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
   2a7a4:	b084      	sub	sp, #16
   2a7a6:	ab04      	add	r3, sp, #16
   2a7a8:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
   2a7ac:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2a7b0:	2b06      	cmp	r3, #6
   2a7b2:	d108      	bne.n	2a7c6 <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2a7b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2a7b8:	2201      	movs	r2, #1
   2a7ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   2a7be:	f3bf 8f4f 	dsb	sy
        __WFE();
   2a7c2:	bf20      	wfe
    while (true)
   2a7c4:	e7fd      	b.n	2a7c2 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2a7c6:	b004      	add	sp, #16
   2a7c8:	4770      	bx	lr

0002a7ca <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   2a7ca:	b084      	sub	sp, #16
   2a7cc:	ab04      	add	r3, sp, #16
   2a7ce:	e903 0007 	stmdb	r3, {r0, r1, r2}
   2a7d2:	2300      	movs	r3, #0
   2a7d4:	f383 8811 	msr	BASEPRI, r3
   2a7d8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   2a7dc:	b004      	add	sp, #16
   2a7de:	4770      	bx	lr

0002a7e0 <bt_uuid_cmp>:
{
   2a7e0:	b510      	push	{r4, lr}
   2a7e2:	460c      	mov	r4, r1
	if (u1->type != u2->type) {
   2a7e4:	7801      	ldrb	r1, [r0, #0]
   2a7e6:	7822      	ldrb	r2, [r4, #0]
   2a7e8:	428a      	cmp	r2, r1
{
   2a7ea:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   2a7ec:	d00e      	beq.n	2a80c <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   2a7ee:	4669      	mov	r1, sp
   2a7f0:	f7ec fba6 	bl	16f40 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   2a7f4:	a905      	add	r1, sp, #20
   2a7f6:	4620      	mov	r0, r4
   2a7f8:	f7ec fba2 	bl	16f40 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   2a7fc:	2210      	movs	r2, #16
   2a7fe:	f10d 0115 	add.w	r1, sp, #21
   2a802:	f10d 0001 	add.w	r0, sp, #1
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2a806:	f002 f9e8 	bl	2cbda <memcmp>
   2a80a:	e007      	b.n	2a81c <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   2a80c:	2a01      	cmp	r2, #1
   2a80e:	d007      	beq.n	2a820 <bt_uuid_cmp+0x40>
   2a810:	2a02      	cmp	r2, #2
   2a812:	d008      	beq.n	2a826 <bt_uuid_cmp+0x46>
   2a814:	b95a      	cbnz	r2, 2a82e <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2a816:	8840      	ldrh	r0, [r0, #2]
   2a818:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2a81a:	1ac0      	subs	r0, r0, r3
}
   2a81c:	b00a      	add	sp, #40	; 0x28
   2a81e:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   2a820:	6840      	ldr	r0, [r0, #4]
   2a822:	6863      	ldr	r3, [r4, #4]
   2a824:	e7f9      	b.n	2a81a <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2a826:	2210      	movs	r2, #16
   2a828:	1c61      	adds	r1, r4, #1
   2a82a:	3001      	adds	r0, #1
   2a82c:	e7eb      	b.n	2a806 <bt_uuid_cmp+0x26>
	switch (u1->type) {
   2a82e:	f06f 0015 	mvn.w	r0, #21
   2a832:	e7f3      	b.n	2a81c <bt_uuid_cmp+0x3c>

0002a834 <bt_uuid_create>:
	switch (data_len) {
   2a834:	2a04      	cmp	r2, #4
{
   2a836:	b530      	push	{r4, r5, lr}
	switch (data_len) {
   2a838:	d00d      	beq.n	2a856 <bt_uuid_create+0x22>
   2a83a:	2a10      	cmp	r2, #16
   2a83c:	d019      	beq.n	2a872 <bt_uuid_create+0x3e>
   2a83e:	2a02      	cmp	r2, #2
   2a840:	f04f 0300 	mov.w	r3, #0
   2a844:	d121      	bne.n	2a88a <bt_uuid_create+0x56>
		uuid->type = BT_UUID_TYPE_16;
   2a846:	7003      	strb	r3, [r0, #0]
   2a848:	784a      	ldrb	r2, [r1, #1]
   2a84a:	780b      	ldrb	r3, [r1, #0]
   2a84c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2a850:	8043      	strh	r3, [r0, #2]
	return true;
   2a852:	2001      	movs	r0, #1
}
   2a854:	bd30      	pop	{r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   2a856:	2301      	movs	r3, #1
   2a858:	7003      	strb	r3, [r0, #0]
   2a85a:	788a      	ldrb	r2, [r1, #2]
   2a85c:	78cc      	ldrb	r4, [r1, #3]
   2a85e:	784d      	ldrb	r5, [r1, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2a860:	ea42 2404 	orr.w	r4, r2, r4, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   2a864:	780a      	ldrb	r2, [r1, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   2a866:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   2a86a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   2a86e:	6042      	str	r2, [r0, #4]
		break;
   2a870:	e7ef      	b.n	2a852 <bt_uuid_create+0x1e>
		uuid->type = BT_UUID_TYPE_128;
   2a872:	2302      	movs	r3, #2
   2a874:	f800 3b01 	strb.w	r3, [r0], #1
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2a878:	f101 0310 	add.w	r3, r1, #16
   2a87c:	f851 2b04 	ldr.w	r2, [r1], #4
   2a880:	f840 2b04 	str.w	r2, [r0], #4
   2a884:	4299      	cmp	r1, r3
   2a886:	d1f9      	bne.n	2a87c <bt_uuid_create+0x48>
   2a888:	e7e3      	b.n	2a852 <bt_uuid_create+0x1e>
	switch (data_len) {
   2a88a:	4618      	mov	r0, r3
   2a88c:	e7e2      	b.n	2a854 <bt_uuid_create+0x20>

0002a88e <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   2a88e:	2301      	movs	r3, #1
{
   2a890:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2a892:	2106      	movs	r1, #6
{
   2a894:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   2a896:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   2a89a:	f7f7 ff7f 	bl	2279c <bt_rand>
	if (err) {
   2a89e:	b918      	cbnz	r0, 2a8a8 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   2a8a0:	79a3      	ldrb	r3, [r4, #6]
   2a8a2:	f063 033f 	orn	r3, r3, #63	; 0x3f
   2a8a6:	71a3      	strb	r3, [r4, #6]
}
   2a8a8:	bd10      	pop	{r4, pc}

0002a8aa <bt_addr_from_str>:
{
   2a8aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2a8ae:	4604      	mov	r4, r0
   2a8b0:	460e      	mov	r6, r1
	if (strlen(str) != 17U) {
   2a8b2:	f7e1 fd7f 	bl	c3b4 <strlen>
   2a8b6:	2811      	cmp	r0, #17
   2a8b8:	d114      	bne.n	2a8e4 <bt_addr_from_str+0x3a>
   2a8ba:	1e67      	subs	r7, r4, #1
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   2a8bc:	2505      	movs	r5, #5
   2a8be:	f1c4 0402 	rsb	r4, r4, #2
   2a8c2:	f04f 0803 	mov.w	r8, #3
   2a8c6:	19e2      	adds	r2, r4, r7
   2a8c8:	f817 0f01 	ldrb.w	r0, [r7, #1]!
   2a8cc:	b910      	cbnz	r0, 2a8d4 <bt_addr_from_str+0x2a>
}
   2a8ce:	b002      	add	sp, #8
   2a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!(j % 3) && (*str != ':')) {
   2a8d4:	fb92 f3f8 	sdiv	r3, r2, r8
   2a8d8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   2a8dc:	429a      	cmp	r2, r3
   2a8de:	d104      	bne.n	2a8ea <bt_addr_from_str+0x40>
   2a8e0:	283a      	cmp	r0, #58	; 0x3a
   2a8e2:	d004      	beq.n	2a8ee <bt_addr_from_str+0x44>
		return -EINVAL;
   2a8e4:	f06f 0015 	mvn.w	r0, #21
   2a8e8:	e7f1      	b.n	2a8ce <bt_addr_from_str+0x24>
		} else if (*str == ':') {
   2a8ea:	283a      	cmp	r0, #58	; 0x3a
   2a8ec:	d101      	bne.n	2a8f2 <bt_addr_from_str+0x48>
			i--;
   2a8ee:	3d01      	subs	r5, #1
			continue;
   2a8f0:	e7e9      	b.n	2a8c6 <bt_addr_from_str+0x1c>
		addr->val[i] = addr->val[i] << 4;
   2a8f2:	5d73      	ldrb	r3, [r6, r5]
   2a8f4:	011b      	lsls	r3, r3, #4
   2a8f6:	5573      	strb	r3, [r6, r5]
		if (char2hex(*str, &tmp) < 0) {
   2a8f8:	f10d 0107 	add.w	r1, sp, #7
   2a8fc:	7838      	ldrb	r0, [r7, #0]
   2a8fe:	f7fe f899 	bl	28a34 <char2hex>
   2a902:	2800      	cmp	r0, #0
   2a904:	dbee      	blt.n	2a8e4 <bt_addr_from_str+0x3a>
		addr->val[i] |= tmp;
   2a906:	5d73      	ldrb	r3, [r6, r5]
   2a908:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2a90c:	4313      	orrs	r3, r2
   2a90e:	5573      	strb	r3, [r6, r5]
	for (i = 5, j = 1; *str != '\0'; str++, j++) {
   2a910:	e7d9      	b.n	2a8c6 <bt_addr_from_str+0x1c>

0002a912 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   2a912:	280f      	cmp	r0, #15
   2a914:	d806      	bhi.n	2a924 <bt_hci_evt_get_flags+0x12>
   2a916:	280d      	cmp	r0, #13
   2a918:	d80b      	bhi.n	2a932 <bt_hci_evt_get_flags+0x20>
   2a91a:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2a91c:	bf14      	ite	ne
   2a91e:	2002      	movne	r0, #2
   2a920:	2003      	moveq	r0, #3
   2a922:	4770      	bx	lr
	switch (evt) {
   2a924:	2813      	cmp	r0, #19
   2a926:	d004      	beq.n	2a932 <bt_hci_evt_get_flags+0x20>
   2a928:	281a      	cmp	r0, #26
   2a92a:	bf14      	ite	ne
   2a92c:	2002      	movne	r0, #2
   2a92e:	2001      	moveq	r0, #1
   2a930:	4770      	bx	lr
   2a932:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   2a934:	4770      	bx	lr

0002a936 <bt_addr_le_copy>:
   2a936:	680b      	ldr	r3, [r1, #0]
   2a938:	6003      	str	r3, [r0, #0]
   2a93a:	888b      	ldrh	r3, [r1, #4]
   2a93c:	8083      	strh	r3, [r0, #4]
   2a93e:	798b      	ldrb	r3, [r1, #6]
   2a940:	7183      	strb	r3, [r0, #6]
}
   2a942:	4770      	bx	lr

0002a944 <bt_addr_copy>:
   2a944:	680b      	ldr	r3, [r1, #0]
   2a946:	6003      	str	r3, [r0, #0]
   2a948:	888b      	ldrh	r3, [r1, #4]
   2a94a:	8083      	strh	r3, [r0, #4]
}
   2a94c:	4770      	bx	lr

0002a94e <bt_le_create_conn>:
	return bt_le_create_conn_legacy(conn);
   2a94e:	f7ed baf3 	b.w	17f38 <bt_le_create_conn_legacy>

0002a952 <bt_hci_disconnect>:
{
   2a952:	b570      	push	{r4, r5, r6, lr}
   2a954:	4606      	mov	r6, r0
   2a956:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   2a958:	f240 4006 	movw	r0, #1030	; 0x406
   2a95c:	2103      	movs	r1, #3
   2a95e:	f7ec ffdb 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   2a962:	4604      	mov	r4, r0
   2a964:	b168      	cbz	r0, 2a982 <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2a966:	2103      	movs	r1, #3
   2a968:	3008      	adds	r0, #8
   2a96a:	f7f5 fc77 	bl	2025c <net_buf_simple_add>
	disconn->reason = reason;
   2a96e:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   2a970:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2a972:	4621      	mov	r1, r4
   2a974:	2200      	movs	r2, #0
}
   2a976:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2a97a:	f240 4006 	movw	r0, #1030	; 0x406
   2a97e:	f7ed b813 	b.w	179a8 <bt_hci_cmd_send_sync>
}
   2a982:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2a986:	bd70      	pop	{r4, r5, r6, pc}

0002a988 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   2a988:	8802      	ldrh	r2, [r0, #0]
   2a98a:	8843      	ldrh	r3, [r0, #2]
   2a98c:	429a      	cmp	r2, r3
{
   2a98e:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   2a990:	d818      	bhi.n	2a9c4 <bt_le_conn_params_valid+0x3c>
   2a992:	2a05      	cmp	r2, #5
   2a994:	d916      	bls.n	2a9c4 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   2a996:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   2a99a:	d813      	bhi.n	2a9c4 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   2a99c:	8884      	ldrh	r4, [r0, #4]
   2a99e:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   2a9a2:	d20f      	bcs.n	2a9c4 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   2a9a4:	88c1      	ldrh	r1, [r0, #6]
   2a9a6:	f1a1 020a 	sub.w	r2, r1, #10
   2a9aa:	b292      	uxth	r2, r2
   2a9ac:	f640 4076 	movw	r0, #3190	; 0xc76
   2a9b0:	4282      	cmp	r2, r0
   2a9b2:	d807      	bhi.n	2a9c4 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   2a9b4:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   2a9b8:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   2a9bc:	bf34      	ite	cc
   2a9be:	2001      	movcc	r0, #1
   2a9c0:	2000      	movcs	r0, #0
}
   2a9c2:	bd10      	pop	{r4, pc}
		return false;
   2a9c4:	2000      	movs	r0, #0
   2a9c6:	e7fc      	b.n	2a9c2 <bt_le_conn_params_valid+0x3a>

0002a9c8 <bt_unpair>:
{
   2a9c8:	b570      	push	{r4, r5, r6, lr}
   2a9ca:	460e      	mov	r6, r1
	if (id >= CONFIG_BT_ID_MAX) {
   2a9cc:	4605      	mov	r5, r0
   2a9ce:	b9a0      	cbnz	r0, 2a9fa <bt_unpair+0x32>
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
   2a9d0:	f7ef fb82 	bl	1a0d8 <bt_conn_lookup_addr_le>
	if (conn) {
   2a9d4:	4604      	mov	r4, r0
   2a9d6:	b150      	cbz	r0, 2a9ee <bt_unpair+0x26>
		if (conn->type == BT_CONN_TYPE_LE) {
   2a9d8:	7883      	ldrb	r3, [r0, #2]
   2a9da:	2b01      	cmp	r3, #1
			conn->le.keys = NULL;
   2a9dc:	bf08      	it	eq
   2a9de:	f8c0 50bc 	streq.w	r5, [r0, #188]	; 0xbc
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
   2a9e2:	2113      	movs	r1, #19
   2a9e4:	f000 f96a 	bl	2acbc <bt_conn_disconnect>
		bt_conn_unref(conn);
   2a9e8:	4620      	mov	r0, r4
   2a9ea:	f7ef f8e3 	bl	19bb4 <bt_conn_unref>
	bt_gatt_clear(id, addr);
   2a9ee:	4631      	mov	r1, r6
   2a9f0:	2000      	movs	r0, #0
   2a9f2:	f7f3 fa29 	bl	1de48 <bt_gatt_clear>
	return 0;
   2a9f6:	2000      	movs	r0, #0
}
   2a9f8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2a9fa:	f06f 0015 	mvn.w	r0, #21
   2a9fe:	e7fb      	b.n	2a9f8 <bt_unpair+0x30>

0002aa00 <bt_le_set_data_len>:
{
   2aa00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2aa02:	4607      	mov	r7, r0
   2aa04:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2aa06:	f242 0022 	movw	r0, #8226	; 0x2022
   2aa0a:	2106      	movs	r1, #6
{
   2aa0c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2aa0e:	f7ec ff83 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   2aa12:	4604      	mov	r4, r0
   2aa14:	b170      	cbz	r0, 2aa34 <bt_le_set_data_len+0x34>
   2aa16:	2106      	movs	r1, #6
   2aa18:	3008      	adds	r0, #8
   2aa1a:	f7f5 fc1f 	bl	2025c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2aa1e:	883b      	ldrh	r3, [r7, #0]
   2aa20:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   2aa22:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   2aa24:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2aa26:	4621      	mov	r1, r4
   2aa28:	f242 0022 	movw	r0, #8226	; 0x2022
}
   2aa2c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   2aa30:	f7ed bb0a 	b.w	18048 <bt_hci_cmd_send>
}
   2aa34:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2aa38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002aa3a <bt_le_set_phy>:
{
   2aa3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2aa3e:	4680      	mov	r8, r0
   2aa40:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2aa42:	f242 0032 	movw	r0, #8242	; 0x2032
   2aa46:	2107      	movs	r1, #7
{
   2aa48:	f89d 9020 	ldrb.w	r9, [sp, #32]
   2aa4c:	4616      	mov	r6, r2
   2aa4e:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   2aa50:	f7ec ff62 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   2aa54:	4604      	mov	r4, r0
   2aa56:	b190      	cbz	r0, 2aa7e <bt_le_set_phy+0x44>
   2aa58:	2107      	movs	r1, #7
   2aa5a:	3008      	adds	r0, #8
   2aa5c:	f7f5 fbfe 	bl	2025c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2aa60:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   2aa64:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   2aa66:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   2aa68:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   2aa6a:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   2aa6c:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2aa70:	4621      	mov	r1, r4
   2aa72:	f242 0032 	movw	r0, #8242	; 0x2032
}
   2aa76:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   2aa7a:	f7ed bae5 	b.w	18048 <bt_hci_cmd_send>
}
   2aa7e:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2aa82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0002aa86 <le_enh_conn_complete>:
	bt_hci_le_enh_conn_complete(evt);
   2aa86:	6880      	ldr	r0, [r0, #8]
   2aa88:	f7ed bba0 	b.w	181cc <bt_hci_le_enh_conn_complete>

0002aa8c <le_legacy_conn_complete>:
{
   2aa8c:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
   2aa8e:	6881      	ldr	r1, [r0, #8]
{
   2aa90:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
   2aa92:	780b      	ldrb	r3, [r1, #0]
   2aa94:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
   2aa98:	f8b1 3001 	ldrh.w	r3, [r1, #1]
   2aa9c:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
   2aaa0:	78cb      	ldrb	r3, [r1, #3]
   2aaa2:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
   2aaa6:	f8b1 300b 	ldrh.w	r3, [r1, #11]
   2aaaa:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
   2aaae:	f8b1 300d 	ldrh.w	r3, [r1, #13]
   2aab2:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
   2aab6:	f8b1 300f 	ldrh.w	r3, [r1, #15]
   2aaba:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
   2aabe:	7c4b      	ldrb	r3, [r1, #17]
   2aac0:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
   2aac4:	a803      	add	r0, sp, #12
   2aac6:	3104      	adds	r1, #4
   2aac8:	f7ff ff35 	bl	2a936 <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, BT_ADDR_ANY);
   2aacc:	2200      	movs	r2, #0
   2aace:	4669      	mov	r1, sp
   2aad0:	f10d 0013 	add.w	r0, sp, #19
   2aad4:	9200      	str	r2, [sp, #0]
   2aad6:	f8ad 2004 	strh.w	r2, [sp, #4]
   2aada:	f7ff ff33 	bl	2a944 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
   2aade:	4669      	mov	r1, sp
   2aae0:	f10d 0019 	add.w	r0, sp, #25
   2aae4:	9200      	str	r2, [sp, #0]
   2aae6:	f8ad 2004 	strh.w	r2, [sp, #4]
   2aaea:	f7ff ff2b 	bl	2a944 <bt_addr_copy>
	bt_hci_le_enh_conn_complete(evt);
   2aaee:	a802      	add	r0, sp, #8
   2aaf0:	f7ed fb6c 	bl	181cc <bt_hci_le_enh_conn_complete>
}
   2aaf4:	b00b      	add	sp, #44	; 0x2c
   2aaf6:	f85d fb04 	ldr.w	pc, [sp], #4

0002aafa <bt_set_name>:
}
   2aafa:	f06f 000b 	mvn.w	r0, #11
   2aafe:	4770      	bx	lr

0002ab00 <bt_addr_le_is_bonded>:
}
   2ab00:	2000      	movs	r0, #0
   2ab02:	4770      	bx	lr

0002ab04 <bt_addr_copy>:
   2ab04:	680b      	ldr	r3, [r1, #0]
   2ab06:	6003      	str	r3, [r0, #0]
   2ab08:	888b      	ldrh	r3, [r1, #4]
   2ab0a:	8083      	strh	r3, [r0, #4]
   2ab0c:	4770      	bx	lr

0002ab0e <bt_addr_le_copy>:
   2ab0e:	680b      	ldr	r3, [r1, #0]
   2ab10:	6003      	str	r3, [r0, #0]
   2ab12:	888b      	ldrh	r3, [r1, #4]
   2ab14:	8083      	strh	r3, [r0, #4]
   2ab16:	798b      	ldrb	r3, [r1, #6]
   2ab18:	7183      	strb	r3, [r0, #6]
}
   2ab1a:	4770      	bx	lr

0002ab1c <bt_lookup_id_addr>:
}
   2ab1c:	4608      	mov	r0, r1
   2ab1e:	4770      	bx	lr

0002ab20 <bt_id_set_private_addr>:
{
   2ab20:	b507      	push	{r0, r1, r2, lr}
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
   2ab22:	2106      	movs	r1, #6
   2ab24:	4668      	mov	r0, sp
   2ab26:	f7f7 fe39 	bl	2279c <bt_rand>
	if (err) {
   2ab2a:	b940      	cbnz	r0, 2ab3e <bt_id_set_private_addr+0x1e>
	BT_ADDR_SET_NRPA(&nrpa);
   2ab2c:	f89d 3005 	ldrb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2ab30:	4668      	mov	r0, sp
	BT_ADDR_SET_NRPA(&nrpa);
   2ab32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2ab36:	f88d 3005 	strb.w	r3, [sp, #5]
	err = set_random_address(&nrpa);
   2ab3a:	f7ee f835 	bl	18ba8 <set_random_address>
}
   2ab3e:	b003      	add	sp, #12
   2ab40:	f85d fb04 	ldr.w	pc, [sp], #4

0002ab44 <bt_id_scan_random_addr_check>:
}
   2ab44:	2001      	movs	r0, #1
   2ab46:	4770      	bx	lr

0002ab48 <atomic_and>:
{
   2ab48:	4603      	mov	r3, r0
}
   2ab4a:	f3bf 8f5b 	dmb	ish
   2ab4e:	e853 0f00 	ldrex	r0, [r3]
   2ab52:	ea00 0201 	and.w	r2, r0, r1
   2ab56:	e843 2c00 	strex	ip, r2, [r3]
   2ab5a:	f1bc 0f00 	cmp.w	ip, #0
   2ab5e:	d1f6      	bne.n	2ab4e <atomic_and+0x6>
   2ab60:	f3bf 8f5b 	dmb	ish
   2ab64:	4770      	bx	lr

0002ab66 <bt_addr_le_copy>:
   2ab66:	680b      	ldr	r3, [r1, #0]
   2ab68:	6003      	str	r3, [r0, #0]
   2ab6a:	888b      	ldrh	r3, [r1, #4]
   2ab6c:	8083      	strh	r3, [r0, #4]
   2ab6e:	798b      	ldrb	r3, [r1, #6]
   2ab70:	7183      	strb	r3, [r0, #6]
   2ab72:	4770      	bx	lr

0002ab74 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2ab74:	f3bf 8f5b 	dmb	ish
   2ab78:	6800      	ldr	r0, [r0, #0]
   2ab7a:	f3bf 8f5b 	dmb	ish
}
   2ab7e:	4770      	bx	lr

0002ab80 <bt_addr_le_copy>:
   2ab80:	680b      	ldr	r3, [r1, #0]
   2ab82:	6003      	str	r3, [r0, #0]
   2ab84:	888b      	ldrh	r3, [r1, #4]
   2ab86:	8083      	strh	r3, [r0, #4]
   2ab88:	798b      	ldrb	r3, [r1, #6]
   2ab8a:	7183      	strb	r3, [r0, #6]
   2ab8c:	4770      	bx	lr

0002ab8e <tx_notify>:
{
   2ab8e:	b570      	push	{r4, r5, r6, lr}
   2ab90:	4604      	mov	r4, r0
	__asm__ volatile(
   2ab92:	f04f 0240 	mov.w	r2, #64	; 0x40
   2ab96:	f3ef 8311 	mrs	r3, BASEPRI
   2ab9a:	f382 8812 	msr	BASEPRI_MAX, r2
   2ab9e:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   2aba2:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   2aba4:	b920      	cbnz	r0, 2abb0 <tx_notify+0x22>
	__asm__ volatile(
   2aba6:	f383 8811 	msr	BASEPRI, r3
   2abaa:	f3bf 8f6f 	isb	sy
}
   2abae:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2abb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   2abb2:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2abb4:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2abb6:	4288      	cmp	r0, r1
	list->tail = node;
   2abb8:	bf08      	it	eq
   2abba:	6262      	streq	r2, [r4, #36]	; 0x24
   2abbc:	f383 8811 	msr	BASEPRI, r3
   2abc0:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   2abc4:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   2abc8:	f7ee fd26 	bl	19618 <tx_free>
		cb(conn, user_data);
   2abcc:	4631      	mov	r1, r6
   2abce:	4620      	mov	r0, r4
   2abd0:	47a8      	blx	r5
	while (1) {
   2abd2:	e7de      	b.n	2ab92 <tx_notify+0x4>

0002abd4 <tx_complete_work>:
	tx_notify(conn);
   2abd4:	3828      	subs	r0, #40	; 0x28
   2abd6:	f7ff bfda 	b.w	2ab8e <tx_notify>

0002abda <bt_conn_reset_rx_state>:
{
   2abda:	b510      	push	{r4, lr}
   2abdc:	4604      	mov	r4, r0
	if (!conn->rx) {
   2abde:	6900      	ldr	r0, [r0, #16]
   2abe0:	b118      	cbz	r0, 2abea <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   2abe2:	f7f5 fa0b 	bl	1fffc <net_buf_unref>
	conn->rx = NULL;
   2abe6:	2300      	movs	r3, #0
   2abe8:	6123      	str	r3, [r4, #16]
}
   2abea:	bd10      	pop	{r4, pc}

0002abec <bt_conn_ref>:
{
   2abec:	b510      	push	{r4, lr}
   2abee:	4603      	mov	r3, r0
		old = atomic_get(&conn->ref);
   2abf0:	f100 02c0 	add.w	r2, r0, #192	; 0xc0
   2abf4:	4610      	mov	r0, r2
   2abf6:	f7ff ffbd 	bl	2ab74 <atomic_get>
		if (!old) {
   2abfa:	b180      	cbz	r0, 2ac1e <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2abfc:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   2ac00:	1c41      	adds	r1, r0, #1
   2ac02:	e852 4f00 	ldrex	r4, [r2]
   2ac06:	4284      	cmp	r4, r0
   2ac08:	d104      	bne.n	2ac14 <bt_conn_ref+0x28>
   2ac0a:	e842 1c00 	strex	ip, r1, [r2]
   2ac0e:	f1bc 0f00 	cmp.w	ip, #0
   2ac12:	d1f6      	bne.n	2ac02 <bt_conn_ref+0x16>
   2ac14:	f3bf 8f5b 	dmb	ish
   2ac18:	d1ec      	bne.n	2abf4 <bt_conn_ref+0x8>
}
   2ac1a:	4618      	mov	r0, r3
   2ac1c:	bd10      	pop	{r4, pc}
			return NULL;
   2ac1e:	4603      	mov	r3, r0
   2ac20:	e7fb      	b.n	2ac1a <bt_conn_ref+0x2e>

0002ac22 <conn_lookup_handle>:
{
   2ac22:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2ac26:	4607      	mov	r7, r0
   2ac28:	460e      	mov	r6, r1
   2ac2a:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   2ac2c:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2ac2e:	f04f 09c8 	mov.w	r9, #200	; 0xc8
	for (i = 0; i < size; i++) {
   2ac32:	42b4      	cmp	r4, r6
   2ac34:	d103      	bne.n	2ac3e <conn_lookup_handle+0x1c>
	return NULL;
   2ac36:	2300      	movs	r3, #0
}
   2ac38:	4618      	mov	r0, r3
   2ac3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   2ac3e:	fb09 7004 	mla	r0, r9, r4, r7
   2ac42:	f7ff ffd3 	bl	2abec <bt_conn_ref>
   2ac46:	4603      	mov	r3, r0
		if (!conn) {
   2ac48:	b158      	cbz	r0, 2ac62 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   2ac4a:	7a85      	ldrb	r5, [r0, #10]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   2ac4c:	2d01      	cmp	r5, #1
   2ac4e:	d002      	beq.n	2ac56 <conn_lookup_handle+0x34>
   2ac50:	3d07      	subs	r5, #7
   2ac52:	2d01      	cmp	r5, #1
   2ac54:	d803      	bhi.n	2ac5e <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   2ac56:	881a      	ldrh	r2, [r3, #0]
   2ac58:	4542      	cmp	r2, r8
   2ac5a:	d0ed      	beq.n	2ac38 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   2ac5c:	4618      	mov	r0, r3
   2ac5e:	f7ee ffa9 	bl	19bb4 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   2ac62:	3401      	adds	r4, #1
   2ac64:	e7e5      	b.n	2ac32 <conn_lookup_handle+0x10>

0002ac66 <bt_conn_connected>:
{
   2ac66:	b510      	push	{r4, lr}
   2ac68:	4604      	mov	r4, r0
	bt_l2cap_connected(conn);
   2ac6a:	f7ef fdc7 	bl	1a7fc <bt_l2cap_connected>
	notify_connected(conn);
   2ac6e:	4620      	mov	r0, r4
}
   2ac70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	notify_connected(conn);
   2ac74:	f7ee bcda 	b.w	1962c <notify_connected>

0002ac78 <bt_conn_get_security>:
}
   2ac78:	2001      	movs	r0, #1
   2ac7a:	4770      	bx	lr

0002ac7c <bt_conn_is_peer_addr_le>:
{
   2ac7c:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   2ac7e:	7a03      	ldrb	r3, [r0, #8]
   2ac80:	428b      	cmp	r3, r1
{
   2ac82:	4604      	mov	r4, r0
   2ac84:	4615      	mov	r5, r2
	if (id != conn->id) {
   2ac86:	d115      	bne.n	2acb4 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   2ac88:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2ac8c:	2207      	movs	r2, #7
   2ac8e:	4628      	mov	r0, r5
   2ac90:	f001 ffa3 	bl	2cbda <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   2ac94:	b180      	cbz	r0, 2acb8 <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_CENTRAL) {
   2ac96:	78e3      	ldrb	r3, [r4, #3]
   2ac98:	2207      	movs	r2, #7
   2ac9a:	b943      	cbnz	r3, 2acae <bt_conn_is_peer_addr_le+0x32>
   2ac9c:	f104 019e 	add.w	r1, r4, #158	; 0x9e
   2aca0:	4628      	mov	r0, r5
   2aca2:	f001 ff9a 	bl	2cbda <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   2aca6:	fab0 f080 	clz	r0, r0
   2acaa:	0940      	lsrs	r0, r0, #5
}
   2acac:	bd38      	pop	{r3, r4, r5, pc}
   2acae:	f104 0197 	add.w	r1, r4, #151	; 0x97
   2acb2:	e7f5      	b.n	2aca0 <bt_conn_is_peer_addr_le+0x24>
		return false;
   2acb4:	2000      	movs	r0, #0
   2acb6:	e7f9      	b.n	2acac <bt_conn_is_peer_addr_le+0x30>
		return true;
   2acb8:	2001      	movs	r0, #1
   2acba:	e7f7      	b.n	2acac <bt_conn_is_peer_addr_le+0x30>

0002acbc <bt_conn_disconnect>:
{
   2acbc:	b538      	push	{r3, r4, r5, lr}
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2acbe:	7883      	ldrb	r3, [r0, #2]
   2acc0:	2b01      	cmp	r3, #1
{
   2acc2:	4604      	mov	r4, r0
   2acc4:	460d      	mov	r5, r1
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2acc6:	d103      	bne.n	2acd0 <bt_conn_disconnect+0x14>
		bt_le_set_auto_conn(&conn->le.dst, NULL);
   2acc8:	2100      	movs	r1, #0
   2acca:	3090      	adds	r0, #144	; 0x90
   2accc:	f7ef fb28 	bl	1a320 <bt_le_set_auto_conn>
	switch (conn->state) {
   2acd0:	7aa3      	ldrb	r3, [r4, #10]
   2acd2:	3b02      	subs	r3, #2
   2acd4:	2b06      	cmp	r3, #6
   2acd6:	d805      	bhi.n	2ace4 <bt_conn_disconnect+0x28>
   2acd8:	e8df f003 	tbb	[pc, r3]
   2acdc:	04040408 	.word	0x04040408
   2ace0:	1a12      	.short	0x1a12
   2ace2:	10          	.byte	0x10
   2ace3:	00          	.byte	0x00
   2ace4:	f06f 057f 	mvn.w	r5, #127	; 0x7f
}
   2ace8:	4628      	mov	r0, r5
   2acea:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2acec:	4620      	mov	r0, r4
		conn->err = reason;
   2acee:	7265      	strb	r5, [r4, #9]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   2acf0:	2100      	movs	r1, #0
   2acf2:	f7ee ff95 	bl	19c20 <bt_conn_set_state>
			bt_le_scan_update(false);
   2acf6:	2000      	movs	r0, #0
   2acf8:	f7ee faa8 	bl	1924c <bt_le_scan_update>
		return 0;
   2acfc:	2500      	movs	r5, #0
   2acfe:	e7f3      	b.n	2ace8 <bt_conn_disconnect+0x2c>
			k_work_cancel_delayable(&conn->deferred_work);
   2ad00:	f104 0060 	add.w	r0, r4, #96	; 0x60
   2ad04:	f7fa fcf0 	bl	256e8 <k_work_cancel_delayable>
}
   2ad08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_create_conn_cancel();
   2ad0c:	f7ed b970 	b.w	17ff0 <bt_le_create_conn_cancel>
	err = bt_hci_disconnect(conn->handle, reason);
   2ad10:	4629      	mov	r1, r5
   2ad12:	8820      	ldrh	r0, [r4, #0]
   2ad14:	f7ff fe1d 	bl	2a952 <bt_hci_disconnect>
	if (err) {
   2ad18:	4605      	mov	r5, r0
   2ad1a:	2800      	cmp	r0, #0
   2ad1c:	d1e4      	bne.n	2ace8 <bt_conn_disconnect+0x2c>
	if (conn->state == BT_CONN_CONNECTED) {
   2ad1e:	7aa3      	ldrb	r3, [r4, #10]
   2ad20:	2b07      	cmp	r3, #7
   2ad22:	d1e1      	bne.n	2ace8 <bt_conn_disconnect+0x2c>
		bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   2ad24:	2108      	movs	r1, #8
   2ad26:	4620      	mov	r0, r4
   2ad28:	f7ee ff7a 	bl	19c20 <bt_conn_set_state>
   2ad2c:	e7dc      	b.n	2ace8 <bt_conn_disconnect+0x2c>

0002ad2e <bt_conn_le_conn_update>:
{
   2ad2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2ad30:	4607      	mov	r7, r0
   2ad32:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   2ad34:	f242 0013 	movw	r0, #8211	; 0x2013
   2ad38:	210e      	movs	r1, #14
   2ad3a:	f7ec fded 	bl	17918 <bt_hci_cmd_create>
	if (!buf) {
   2ad3e:	4606      	mov	r6, r0
   2ad40:	b1d0      	cbz	r0, 2ad78 <bt_conn_le_conn_update+0x4a>
   2ad42:	210e      	movs	r1, #14
   2ad44:	3008      	adds	r0, #8
   2ad46:	f7f5 fa89 	bl	2025c <net_buf_simple_add>
__ssp_bos_icheck3(memset, void *, int)
   2ad4a:	220e      	movs	r2, #14
   2ad4c:	4604      	mov	r4, r0
   2ad4e:	2100      	movs	r1, #0
   2ad50:	f001 ff79 	bl	2cc46 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   2ad54:	883b      	ldrh	r3, [r7, #0]
   2ad56:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   2ad58:	882b      	ldrh	r3, [r5, #0]
   2ad5a:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   2ad5c:	886b      	ldrh	r3, [r5, #2]
   2ad5e:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   2ad60:	88ab      	ldrh	r3, [r5, #4]
   2ad62:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   2ad64:	88eb      	ldrh	r3, [r5, #6]
   2ad66:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ad68:	4631      	mov	r1, r6
   2ad6a:	2200      	movs	r2, #0
}
   2ad6c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   2ad70:	f242 0013 	movw	r0, #8211	; 0x2013
   2ad74:	f7ec be18 	b.w	179a8 <bt_hci_cmd_send_sync>
}
   2ad78:	f06f 0068 	mvn.w	r0, #104	; 0x68
   2ad7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002ad7e <bt_conn_le_param_update>:
	if (conn->le.interval >= param->interval_min &&
   2ad7e:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	; 0xa6
   2ad82:	880a      	ldrh	r2, [r1, #0]
   2ad84:	429a      	cmp	r2, r3
   2ad86:	d81c      	bhi.n	2adc2 <bt_conn_le_param_update+0x44>
   2ad88:	884a      	ldrh	r2, [r1, #2]
   2ad8a:	429a      	cmp	r2, r3
   2ad8c:	d319      	bcc.n	2adc2 <bt_conn_le_param_update+0x44>
	    conn->le.interval <= param->interval_max &&
   2ad8e:	f8b0 20ac 	ldrh.w	r2, [r0, #172]	; 0xac
   2ad92:	888b      	ldrh	r3, [r1, #4]
   2ad94:	429a      	cmp	r2, r3
   2ad96:	d114      	bne.n	2adc2 <bt_conn_le_param_update+0x44>
	    conn->le.latency == param->latency &&
   2ad98:	f8b0 20ae 	ldrh.w	r2, [r0, #174]	; 0xae
   2ad9c:	88cb      	ldrh	r3, [r1, #6]
   2ad9e:	429a      	cmp	r2, r3
   2ada0:	d10f      	bne.n	2adc2 <bt_conn_le_param_update+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2ada2:	3004      	adds	r0, #4
   2ada4:	f3bf 8f5b 	dmb	ish
   2ada8:	e850 3f00 	ldrex	r3, [r0]
   2adac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
   2adb0:	e840 3200 	strex	r2, r3, [r0]
   2adb4:	2a00      	cmp	r2, #0
   2adb6:	d1f7      	bne.n	2ada8 <bt_conn_le_param_update+0x2a>
   2adb8:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
   2adbc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   2adc0:	4770      	bx	lr
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
   2adc2:	78c3      	ldrb	r3, [r0, #3]
   2adc4:	b90b      	cbnz	r3, 2adca <bt_conn_le_param_update+0x4c>
		return send_conn_le_param_update(conn, param);
   2adc6:	f7ef bb21 	b.w	1a40c <send_conn_le_param_update>
	return 0;
   2adca:	2000      	movs	r0, #0
}
   2adcc:	4770      	bx	lr

0002adce <l2cap_connected>:
}
   2adce:	4770      	bx	lr

0002add0 <l2cap_disconnected>:
	(void)k_work_cancel_delayable(&chan->rtx_work);
   2add0:	3010      	adds	r0, #16
   2add2:	f7fa bc89 	b.w	256e8 <k_work_cancel_delayable>

0002add6 <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2add6:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2add8:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2adda:	b17b      	cbz	r3, 2adfc <bt_l2cap_chan_remove+0x26>
   2addc:	3b08      	subs	r3, #8
   2adde:	2200      	movs	r2, #0
   2ade0:	b163      	cbz	r3, 2adfc <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   2ade2:	428b      	cmp	r3, r1
   2ade4:	f103 0408 	add.w	r4, r3, #8
   2ade8:	d10f      	bne.n	2ae0a <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   2adea:	688b      	ldr	r3, [r1, #8]
   2adec:	b93a      	cbnz	r2, 2adfe <bt_l2cap_chan_remove+0x28>
   2adee:	6d82      	ldr	r2, [r0, #88]	; 0x58
	list->head = node;
   2adf0:	6543      	str	r3, [r0, #84]	; 0x54
Z_GENLIST_REMOVE(slist, snode)
   2adf2:	4294      	cmp	r4, r2
   2adf4:	d100      	bne.n	2adf8 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   2adf6:	6583      	str	r3, [r0, #88]	; 0x58
	parent->next = child;
   2adf8:	2300      	movs	r3, #0
   2adfa:	608b      	str	r3, [r1, #8]
}
   2adfc:	bd10      	pop	{r4, pc}
   2adfe:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2ae00:	6d83      	ldr	r3, [r0, #88]	; 0x58
   2ae02:	429c      	cmp	r4, r3
	list->tail = node;
   2ae04:	bf08      	it	eq
   2ae06:	6582      	streq	r2, [r0, #88]	; 0x58
}
   2ae08:	e7f6      	b.n	2adf8 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2ae0a:	2c00      	cmp	r4, #0
   2ae0c:	d0f6      	beq.n	2adfc <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ae0e:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2ae10:	2b00      	cmp	r3, #0
   2ae12:	d0f3      	beq.n	2adfc <bt_l2cap_chan_remove+0x26>
   2ae14:	3b08      	subs	r3, #8
   2ae16:	4622      	mov	r2, r4
   2ae18:	e7e2      	b.n	2ade0 <bt_l2cap_chan_remove+0xa>

0002ae1a <bt_l2cap_chan_del>:
{
   2ae1a:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   2ae1c:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   2ae20:	4604      	mov	r4, r0
	if (!chan->conn) {
   2ae22:	b123      	cbz	r3, 2ae2e <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   2ae24:	686b      	ldr	r3, [r5, #4]
   2ae26:	b103      	cbz	r3, 2ae2a <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   2ae28:	4798      	blx	r3
	chan->conn = NULL;
   2ae2a:	2300      	movs	r3, #0
   2ae2c:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   2ae2e:	68e3      	ldr	r3, [r4, #12]
   2ae30:	b10b      	cbz	r3, 2ae36 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   2ae32:	4620      	mov	r0, r4
   2ae34:	4798      	blx	r3
	if (ops->released) {
   2ae36:	69eb      	ldr	r3, [r5, #28]
   2ae38:	b11b      	cbz	r3, 2ae42 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   2ae3a:	4620      	mov	r0, r4
}
   2ae3c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   2ae40:	4718      	bx	r3
}
   2ae42:	bd70      	pop	{r4, r5, r6, pc}

0002ae44 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ae44:	6d43      	ldr	r3, [r0, #84]	; 0x54
{
   2ae46:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ae48:	b18b      	cbz	r3, 2ae6e <bt_l2cap_disconnected+0x2a>
   2ae4a:	f1b3 0008 	subs.w	r0, r3, #8
   2ae4e:	d00e      	beq.n	2ae6e <bt_l2cap_disconnected+0x2a>
   2ae50:	681c      	ldr	r4, [r3, #0]
   2ae52:	b104      	cbz	r4, 2ae56 <bt_l2cap_disconnected+0x12>
   2ae54:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   2ae56:	f7ff ffe0 	bl	2ae1a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   2ae5a:	b144      	cbz	r4, 2ae6e <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2ae5c:	f114 0308 	adds.w	r3, r4, #8
   2ae60:	d002      	beq.n	2ae68 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2ae62:	68a3      	ldr	r3, [r4, #8]
   2ae64:	b103      	cbz	r3, 2ae68 <bt_l2cap_disconnected+0x24>
   2ae66:	3b08      	subs	r3, #8
{
   2ae68:	4620      	mov	r0, r4
   2ae6a:	461c      	mov	r4, r3
   2ae6c:	e7f3      	b.n	2ae56 <bt_l2cap_disconnected+0x12>
}
   2ae6e:	bd10      	pop	{r4, pc}

0002ae70 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   2ae70:	3104      	adds	r1, #4
   2ae72:	f7ef b80f 	b.w	19e94 <bt_conn_create_pdu_timeout>

0002ae76 <bt_l2cap_send_cb>:
{
   2ae76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae7a:	4614      	mov	r4, r2
   2ae7c:	4605      	mov	r5, r0
   2ae7e:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   2ae80:	f102 0008 	add.w	r0, r2, #8
   2ae84:	2104      	movs	r1, #4
   2ae86:	461e      	mov	r6, r3
   2ae88:	f8dd 8018 	ldr.w	r8, [sp, #24]
   2ae8c:	f7f5 f982 	bl	20194 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ae90:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   2ae92:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   2ae94:	3a04      	subs	r2, #4
   2ae96:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2ae98:	4643      	mov	r3, r8
   2ae9a:	4632      	mov	r2, r6
   2ae9c:	4621      	mov	r1, r4
   2ae9e:	4628      	mov	r0, r5
}
   2aea0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   2aea4:	f7ee bdda 	b.w	19a5c <bt_conn_send_cb>

0002aea8 <l2cap_send_reject.constprop.0>:
static void l2cap_send_reject(struct bt_conn *conn, uint8_t ident,
   2aea8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   2aeaa:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   2aeac:	2202      	movs	r2, #2
   2aeae:	2001      	movs	r0, #1
   2aeb0:	f7ef fc56 	bl	1a760 <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   2aeb4:	4604      	mov	r4, r0
   2aeb6:	b198      	cbz	r0, 2aee0 <l2cap_send_reject.constprop.0+0x38>
	return net_buf_simple_add(&buf->b, len);
   2aeb8:	2102      	movs	r1, #2
   2aeba:	3008      	adds	r0, #8
   2aebc:	f7f5 f9ce 	bl	2025c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   2aec0:	2300      	movs	r3, #0
   2aec2:	7003      	strb	r3, [r0, #0]
   2aec4:	7043      	strb	r3, [r0, #1]
   2aec6:	4622      	mov	r2, r4
   2aec8:	9300      	str	r3, [sp, #0]
   2aeca:	2105      	movs	r1, #5
   2aecc:	4628      	mov	r0, r5
   2aece:	f7ff ffd2 	bl	2ae76 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, cid, buf)) {
   2aed2:	b128      	cbz	r0, 2aee0 <l2cap_send_reject.constprop.0+0x38>
		net_buf_unref(buf);
   2aed4:	4620      	mov	r0, r4
}
   2aed6:	b003      	add	sp, #12
   2aed8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		net_buf_unref(buf);
   2aedc:	f7f5 b88e 	b.w	1fffc <net_buf_unref>
}
   2aee0:	b003      	add	sp, #12
   2aee2:	bd30      	pop	{r4, r5, pc}

0002aee4 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2aee4:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2aee6:	b160      	cbz	r0, 2af02 <bt_l2cap_le_lookup_tx_cid+0x1e>
   2aee8:	3808      	subs	r0, #8
   2aeea:	b900      	cbnz	r0, 2aeee <bt_l2cap_le_lookup_tx_cid+0xa>
   2aeec:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   2aeee:	f8b0 3080 	ldrh.w	r3, [r0, #128]	; 0x80
   2aef2:	428b      	cmp	r3, r1
   2aef4:	d005      	beq.n	2af02 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2aef6:	f110 0308 	adds.w	r3, r0, #8
   2aefa:	d001      	beq.n	2af00 <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2aefc:	6880      	ldr	r0, [r0, #8]
   2aefe:	e7f2      	b.n	2aee6 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   2af00:	4618      	mov	r0, r3
}
   2af02:	4770      	bx	lr

0002af04 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   2af04:	6d40      	ldr	r0, [r0, #84]	; 0x54
   2af06:	b160      	cbz	r0, 2af22 <bt_l2cap_le_lookup_rx_cid+0x1e>
   2af08:	3808      	subs	r0, #8
   2af0a:	b900      	cbnz	r0, 2af0e <bt_l2cap_le_lookup_rx_cid+0xa>
   2af0c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   2af0e:	f8b0 3070 	ldrh.w	r3, [r0, #112]	; 0x70
   2af12:	428b      	cmp	r3, r1
   2af14:	d005      	beq.n	2af22 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2af16:	f110 0308 	adds.w	r3, r0, #8
   2af1a:	d001      	beq.n	2af20 <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2af1c:	6880      	ldr	r0, [r0, #8]
   2af1e:	e7f2      	b.n	2af06 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   2af20:	4618      	mov	r0, r3
}
   2af22:	4770      	bx	lr

0002af24 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   2af24:	4770      	bx	lr

0002af26 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   2af26:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   2af28:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   2af2a:	b128      	cbz	r0, 2af38 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2af2c:	6859      	ldr	r1, [r3, #4]
   2af2e:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   2af30:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   2af32:	4288      	cmp	r0, r1
	list->tail = node;
   2af34:	bf08      	it	eq
   2af36:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   2af38:	4770      	bx	lr

0002af3a <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2af3a:	4603      	mov	r3, r0
   2af3c:	6800      	ldr	r0, [r0, #0]
   2af3e:	2200      	movs	r2, #0
   2af40:	b900      	cbnz	r0, 2af44 <sys_slist_find_and_remove+0xa>
   2af42:	4770      	bx	lr
   2af44:	4288      	cmp	r0, r1
   2af46:	d110      	bne.n	2af6a <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   2af48:	6808      	ldr	r0, [r1, #0]
   2af4a:	b942      	cbnz	r2, 2af5e <sys_slist_find_and_remove+0x24>
   2af4c:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   2af4e:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   2af50:	4291      	cmp	r1, r2
   2af52:	d100      	bne.n	2af56 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   2af54:	6058      	str	r0, [r3, #4]
	parent->next = child;
   2af56:	2300      	movs	r3, #0
   2af58:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2af5a:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   2af5c:	4770      	bx	lr
	parent->next = child;
   2af5e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2af60:	6858      	ldr	r0, [r3, #4]
   2af62:	4281      	cmp	r1, r0
	list->tail = node;
   2af64:	bf08      	it	eq
   2af66:	605a      	streq	r2, [r3, #4]
}
   2af68:	e7f5      	b.n	2af56 <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2af6a:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2af6c:	6800      	ldr	r0, [r0, #0]
   2af6e:	e7e7      	b.n	2af40 <sys_slist_find_and_remove+0x6>

0002af70 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   2af70:	4603      	mov	r3, r0
	size_t bytes = 0;
   2af72:	2000      	movs	r0, #0

	while (buf) {
   2af74:	b903      	cbnz	r3, 2af78 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   2af76:	4770      	bx	lr
		bytes += buf->len;
   2af78:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   2af7a:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   2af7c:	4410      	add	r0, r2
		buf = buf->frags;
   2af7e:	e7f9      	b.n	2af74 <net_buf_frags_len+0x4>

0002af80 <att_sent>:
	if (chan->ops->sent) {
   2af80:	684b      	ldr	r3, [r1, #4]
   2af82:	695b      	ldr	r3, [r3, #20]
{
   2af84:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   2af86:	b103      	cbz	r3, 2af8a <att_sent+0xa>
		chan->ops->sent(chan);
   2af88:	4718      	bx	r3
}
   2af8a:	4770      	bx	lr

0002af8c <attr_read_type_cb>:
{
   2af8c:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   2af8e:	68d4      	ldr	r4, [r2, #12]
   2af90:	7823      	ldrb	r3, [r4, #0]
   2af92:	3102      	adds	r1, #2
   2af94:	b913      	cbnz	r3, 2af9c <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   2af96:	7021      	strb	r1, [r4, #0]
	return true;
   2af98:	2001      	movs	r0, #1
   2af9a:	e006      	b.n	2afaa <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   2af9c:	428b      	cmp	r3, r1
   2af9e:	d0fb      	beq.n	2af98 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   2afa0:	8983      	ldrh	r3, [r0, #12]
   2afa2:	3b02      	subs	r3, #2
   2afa4:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   2afa6:	2000      	movs	r0, #0
   2afa8:	6110      	str	r0, [r2, #16]
}
   2afaa:	bd10      	pop	{r4, pc}

0002afac <att_prepare_write_req>:
}
   2afac:	2006      	movs	r0, #6
   2afae:	4770      	bx	lr

0002afb0 <att_op_get_type>:
	switch (op) {
   2afb0:	281e      	cmp	r0, #30
   2afb2:	d816      	bhi.n	2afe2 <att_op_get_type+0x32>
   2afb4:	b308      	cbz	r0, 2affa <att_op_get_type+0x4a>
   2afb6:	1e43      	subs	r3, r0, #1
   2afb8:	2b1d      	cmp	r3, #29
   2afba:	d81e      	bhi.n	2affa <att_op_get_type+0x4a>
   2afbc:	e8df f003 	tbb	[pc, r3]
   2afc0:	23172317 	.word	0x23172317
   2afc4:	23172317 	.word	0x23172317
   2afc8:	23172317 	.word	0x23172317
   2afcc:	23172317 	.word	0x23172317
   2afd0:	1d172317 	.word	0x1d172317
   2afd4:	2317231d 	.word	0x2317231d
   2afd8:	1d191d17 	.word	0x1d191d17
   2afdc:	0f1b      	.short	0x0f1b
   2afde:	2004      	movs	r0, #4
   2afe0:	4770      	bx	lr
   2afe2:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   2afe6:	2b52      	cmp	r3, #82	; 0x52
   2afe8:	d107      	bne.n	2affa <att_op_get_type+0x4a>
		return ATT_COMMAND;
   2afea:	2000      	movs	r0, #0
}
   2afec:	4770      	bx	lr
		return ATT_RESPONSE;
   2afee:	2002      	movs	r0, #2
   2aff0:	4770      	bx	lr
		return ATT_NOTIFICATION;
   2aff2:	2003      	movs	r0, #3
   2aff4:	4770      	bx	lr
		return ATT_INDICATION;
   2aff6:	2005      	movs	r0, #5
   2aff8:	4770      	bx	lr
		return ATT_COMMAND;
   2affa:	f010 0f40 	tst.w	r0, #64	; 0x40
   2affe:	bf0c      	ite	eq
   2b000:	2006      	moveq	r0, #6
   2b002:	2000      	movne	r0, #0
   2b004:	4770      	bx	lr
		return ATT_REQUEST;
   2b006:	2001      	movs	r0, #1
   2b008:	4770      	bx	lr

0002b00a <chan_req_send>:
{
   2b00a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b00c:	688f      	ldr	r7, [r1, #8]
{
   2b00e:	4604      	mov	r4, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b010:	4638      	mov	r0, r7
{
   2b012:	460d      	mov	r5, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   2b014:	f7ff ffac 	bl	2af70 <net_buf_frags_len>
   2b018:	f8b4 308a 	ldrh.w	r3, [r4, #138]	; 0x8a
   2b01c:	4283      	cmp	r3, r0
   2b01e:	d30d      	bcc.n	2b03c <chan_req_send+0x32>
	req->buf = NULL;
   2b020:	2600      	movs	r6, #0
	chan->req = req;
   2b022:	f8c4 10fc 	str.w	r1, [r4, #252]	; 0xfc
	err = chan_send(chan, buf, NULL);
   2b026:	4632      	mov	r2, r6
	req->buf = NULL;
   2b028:	608e      	str	r6, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2b02a:	4620      	mov	r0, r4
   2b02c:	4639      	mov	r1, r7
   2b02e:	f7ef fdb9 	bl	1aba4 <chan_send>
	if (err) {
   2b032:	b110      	cbz	r0, 2b03a <chan_req_send+0x30>
		req->buf = buf;
   2b034:	60af      	str	r7, [r5, #8]
		chan->req = NULL;
   2b036:	f8c4 60fc 	str.w	r6, [r4, #252]	; 0xfc
}
   2b03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EMSGSIZE;
   2b03c:	f06f 0079 	mvn.w	r0, #121	; 0x79
   2b040:	e7fb      	b.n	2b03a <chan_req_send+0x30>

0002b042 <process_queue>:
{
   2b042:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   2b044:	2200      	movs	r2, #0
{
   2b046:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   2b048:	2300      	movs	r3, #0
   2b04a:	4608      	mov	r0, r1
{
   2b04c:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2b04e:	f7f4 ff43 	bl	1fed8 <net_buf_get>
	if (buf) {
   2b052:	4605      	mov	r5, r0
   2b054:	b160      	cbz	r0, 2b070 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   2b056:	4601      	mov	r1, r0
   2b058:	2200      	movs	r2, #0
   2b05a:	4620      	mov	r0, r4
   2b05c:	f7ef fda2 	bl	1aba4 <chan_send>
		if (err) {
   2b060:	4604      	mov	r4, r0
   2b062:	b118      	cbz	r0, 2b06c <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   2b064:	4629      	mov	r1, r5
   2b066:	4630      	mov	r0, r6
   2b068:	f001 fc67 	bl	2c93a <k_queue_prepend>
}
   2b06c:	4620      	mov	r0, r4
   2b06e:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2b070:	f06f 0401 	mvn.w	r4, #1
   2b074:	e7fa      	b.n	2b06c <process_queue+0x2a>

0002b076 <att_notify_mult>:
{
   2b076:	b508      	push	{r3, lr}
	bt_gatt_mult_notification(chan->att->conn, buf->data, buf->len);
   2b078:	6803      	ldr	r3, [r0, #0]
   2b07a:	898a      	ldrh	r2, [r1, #12]
   2b07c:	6818      	ldr	r0, [r3, #0]
   2b07e:	6889      	ldr	r1, [r1, #8]
   2b080:	f7f2 fe0e 	bl	1dca0 <bt_gatt_mult_notification>
}
   2b084:	2000      	movs	r0, #0
   2b086:	bd08      	pop	{r3, pc}

0002b088 <att_notify>:
{
   2b088:	b538      	push	{r3, r4, r5, lr}
   2b08a:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2b08c:	f101 0008 	add.w	r0, r1, #8
   2b090:	460c      	mov	r4, r1
   2b092:	f000 ffdd 	bl	2c050 <net_buf_simple_pull_le16>
	bt_gatt_notification(chan->att->conn, handle, buf->data, buf->len);
   2b096:	682d      	ldr	r5, [r5, #0]
   2b098:	89a3      	ldrh	r3, [r4, #12]
   2b09a:	68a2      	ldr	r2, [r4, #8]
   2b09c:	4601      	mov	r1, r0
   2b09e:	6828      	ldr	r0, [r5, #0]
   2b0a0:	f000 feff 	bl	2bea2 <bt_gatt_notification>
}
   2b0a4:	2000      	movs	r0, #0
   2b0a6:	bd38      	pop	{r3, r4, r5, pc}

0002b0a8 <bt_att_chan_send_rsp>:
{
   2b0a8:	b538      	push	{r3, r4, r5, lr}
   2b0aa:	4604      	mov	r4, r0
   2b0ac:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
   2b0ae:	f7ef fd79 	bl	1aba4 <chan_send>
	if (err) {
   2b0b2:	b130      	cbz	r0, 2b0c2 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   2b0b4:	4629      	mov	r1, r5
   2b0b6:	f504 7080 	add.w	r0, r4, #256	; 0x100
}
   2b0ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   2b0be:	f7f4 bf69 	b.w	1ff94 <net_buf_put>
}
   2b0c2:	bd38      	pop	{r3, r4, r5, pc}

0002b0c4 <att_chan_mtu_updated>:
{
   2b0c4:	b470      	push	{r4, r5, r6}
	struct bt_att *att = updated_chan->att;
   2b0c6:	6806      	ldr	r6, [r0, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b0c8:	6ab2      	ldr	r2, [r6, #40]	; 0x28
   2b0ca:	b30a      	cbz	r2, 2b110 <att_chan_mtu_updated+0x4c>
   2b0cc:	f5b2 74aa 	subs.w	r4, r2, #340	; 0x154
   2b0d0:	d01d      	beq.n	2b10e <att_chan_mtu_updated+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b0d2:	6813      	ldr	r3, [r2, #0]
   2b0d4:	b10b      	cbz	r3, 2b0da <att_chan_mtu_updated+0x16>
   2b0d6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2b0da:	2200      	movs	r2, #0
   2b0dc:	4611      	mov	r1, r2
		if (chan == updated_chan) {
   2b0de:	42a0      	cmp	r0, r4
   2b0e0:	d009      	beq.n	2b0f6 <att_chan_mtu_updated+0x32>
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2b0e2:	f8b4 508a 	ldrh.w	r5, [r4, #138]	; 0x8a
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2b0e6:	f8b4 407a 	ldrh.w	r4, [r4, #122]	; 0x7a
		max_tx = MAX(max_tx, chan->chan.tx.mtu);
   2b0ea:	42a9      	cmp	r1, r5
   2b0ec:	bf38      	it	cc
   2b0ee:	4629      	movcc	r1, r5
		max_rx = MAX(max_rx, chan->chan.rx.mtu);
   2b0f0:	42a2      	cmp	r2, r4
   2b0f2:	bf38      	it	cc
   2b0f4:	4622      	movcc	r2, r4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b0f6:	b163      	cbz	r3, 2b112 <att_chan_mtu_updated+0x4e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b0f8:	f513 75aa 	adds.w	r5, r3, #340	; 0x154
   2b0fc:	d004      	beq.n	2b108 <att_chan_mtu_updated+0x44>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b0fe:	f8d3 5154 	ldr.w	r5, [r3, #340]	; 0x154
   2b102:	b10d      	cbz	r5, 2b108 <att_chan_mtu_updated+0x44>
   2b104:	f5a5 75aa 	sub.w	r5, r5, #340	; 0x154
{
   2b108:	461c      	mov	r4, r3
   2b10a:	462b      	mov	r3, r5
   2b10c:	e7e7      	b.n	2b0de <att_chan_mtu_updated+0x1a>
   2b10e:	4622      	mov	r2, r4
   2b110:	4611      	mov	r1, r2
	if ((updated_chan->chan.tx.mtu > max_tx) ||
   2b112:	f8b0 308a 	ldrh.w	r3, [r0, #138]	; 0x8a
   2b116:	f8b0 007a 	ldrh.w	r0, [r0, #122]	; 0x7a
   2b11a:	428b      	cmp	r3, r1
   2b11c:	d801      	bhi.n	2b122 <att_chan_mtu_updated+0x5e>
   2b11e:	4290      	cmp	r0, r2
   2b120:	d909      	bls.n	2b136 <att_chan_mtu_updated+0x72>
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2b122:	4282      	cmp	r2, r0
   2b124:	bf38      	it	cc
   2b126:	4602      	movcc	r2, r0
   2b128:	4299      	cmp	r1, r3
   2b12a:	6830      	ldr	r0, [r6, #0]
   2b12c:	bf38      	it	cc
   2b12e:	4619      	movcc	r1, r3
}
   2b130:	bc70      	pop	{r4, r5, r6}
		bt_gatt_att_max_mtu_changed(att->conn, max_tx, max_rx);
   2b132:	f7f2 be49 	b.w	1ddc8 <bt_gatt_att_max_mtu_changed>
}
   2b136:	bc70      	pop	{r4, r5, r6}
   2b138:	4770      	bx	lr

0002b13a <bt_gatt_foreach_attr>:
 *  @param user_data Data to pass to the callback.
 */
static inline void bt_gatt_foreach_attr(uint16_t start_handle, uint16_t end_handle,
					bt_gatt_attr_func_t func,
					void *user_data)
{
   2b13a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2b13c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2b140:	2300      	movs	r3, #0
   2b142:	9300      	str	r3, [sp, #0]
   2b144:	461a      	mov	r2, r3
   2b146:	f7f1 f979 	bl	1c43c <bt_gatt_foreach_attr_type>
				  user_data);
}
   2b14a:	b005      	add	sp, #20
   2b14c:	f85d fb04 	ldr.w	pc, [sp], #4

0002b150 <att_chan_read>:
{
   2b150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b154:	4680      	mov	r8, r0
   2b156:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b158:	4610      	mov	r0, r2
{
   2b15a:	4699      	mov	r9, r3
   2b15c:	468b      	mov	fp, r1
   2b15e:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2b160:	f7ff ff06 	bl	2af70 <net_buf_frags_len>
   2b164:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
   2b168:	4283      	cmp	r3, r0
   2b16a:	d97a      	bls.n	2b262 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2b16c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2b170:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   2b172:	4630      	mov	r0, r6
   2b174:	f7f4 ffa2 	bl	200bc <net_buf_frag_last>
	size_t len, total = 0;
   2b178:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2b17c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b17e:	4630      	mov	r0, r6
   2b180:	f7ff fef6 	bl	2af70 <net_buf_frags_len>
   2b184:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
	return net_buf_simple_tailroom(&buf->b);
   2b188:	f105 0708 	add.w	r7, r5, #8
   2b18c:	1a24      	subs	r4, r4, r0
   2b18e:	4638      	mov	r0, r7
   2b190:	f000 ff6a 	bl	2c068 <net_buf_simple_tailroom>
   2b194:	4284      	cmp	r4, r0
   2b196:	d211      	bcs.n	2b1bc <att_chan_read+0x6c>
   2b198:	4630      	mov	r0, r6
   2b19a:	f7ff fee9 	bl	2af70 <net_buf_frags_len>
   2b19e:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2b1a2:	1a24      	subs	r4, r4, r0
		if (!len) {
   2b1a4:	bb34      	cbnz	r4, 2b1f4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   2b1a6:	79b0      	ldrb	r0, [r6, #6]
   2b1a8:	f7f4 fd26 	bl	1fbf8 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2b1ac:	2200      	movs	r2, #0
   2b1ae:	2300      	movs	r3, #0
   2b1b0:	f000 ff3b 	bl	2c02a <net_buf_alloc_fixed>
			if (!frag) {
   2b1b4:	4605      	mov	r5, r0
   2b1b6:	b930      	cbnz	r0, 2b1c6 <att_chan_read+0x76>
	return total;
   2b1b8:	4657      	mov	r7, sl
   2b1ba:	e02c      	b.n	2b216 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2b1bc:	4638      	mov	r0, r7
   2b1be:	f000 ff53 	bl	2c068 <net_buf_simple_tailroom>
   2b1c2:	4604      	mov	r4, r0
   2b1c4:	e7ee      	b.n	2b1a4 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2b1c6:	4601      	mov	r1, r0
   2b1c8:	4630      	mov	r0, r6
   2b1ca:	f7f4 ffbf 	bl	2014c <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2b1ce:	4630      	mov	r0, r6
   2b1d0:	f7ff fece 	bl	2af70 <net_buf_frags_len>
   2b1d4:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2b1d8:	f105 0708 	add.w	r7, r5, #8
   2b1dc:	1a24      	subs	r4, r4, r0
   2b1de:	4638      	mov	r0, r7
   2b1e0:	f000 ff42 	bl	2c068 <net_buf_simple_tailroom>
   2b1e4:	4284      	cmp	r4, r0
   2b1e6:	d21a      	bcs.n	2b21e <att_chan_read+0xce>
   2b1e8:	4630      	mov	r0, r6
   2b1ea:	f7ff fec1 	bl	2af70 <net_buf_frags_len>
   2b1ee:	f8b8 408a 	ldrh.w	r4, [r8, #138]	; 0x8a
   2b1f2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   2b1f4:	68a9      	ldr	r1, [r5, #8]
   2b1f6:	89aa      	ldrh	r2, [r5, #12]
   2b1f8:	f8db 7004 	ldr.w	r7, [fp, #4]
   2b1fc:	9803      	ldr	r0, [sp, #12]
   2b1fe:	f8cd 9000 	str.w	r9, [sp]
   2b202:	440a      	add	r2, r1
   2b204:	b2a3      	uxth	r3, r4
   2b206:	4659      	mov	r1, fp
   2b208:	47b8      	blx	r7
		if (read < 0) {
   2b20a:	1e07      	subs	r7, r0, #0
   2b20c:	da0c      	bge.n	2b228 <att_chan_read+0xd8>
				return total;
   2b20e:	f1ba 0f00 	cmp.w	sl, #0
   2b212:	bf18      	it	ne
   2b214:	4657      	movne	r7, sl
}
   2b216:	4638      	mov	r0, r7
   2b218:	b005      	add	sp, #20
   2b21a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b21e:	4638      	mov	r0, r7
   2b220:	f000 ff22 	bl	2c068 <net_buf_simple_tailroom>
   2b224:	4604      	mov	r4, r0
   2b226:	e7e5      	b.n	2b1f4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2b228:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b22a:	b993      	cbnz	r3, 2b252 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2b22c:	4639      	mov	r1, r7
   2b22e:	f105 0008 	add.w	r0, r5, #8
   2b232:	f7f5 f813 	bl	2025c <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b236:	4630      	mov	r0, r6
   2b238:	f7ff fe9a 	bl	2af70 <net_buf_frags_len>
   2b23c:	f8b8 308a 	ldrh.w	r3, [r8, #138]	; 0x8a
		offset += read;
   2b240:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b242:	4283      	cmp	r3, r0
		total += read;
   2b244:	44ba      	add	sl, r7
		offset += read;
   2b246:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2b24a:	d9b5      	bls.n	2b1b8 <att_chan_read+0x68>
   2b24c:	42a7      	cmp	r7, r4
   2b24e:	d096      	beq.n	2b17e <att_chan_read+0x2e>
   2b250:	e7b2      	b.n	2b1b8 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   2b252:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b254:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2b256:	4639      	mov	r1, r7
   2b258:	4628      	mov	r0, r5
   2b25a:	4798      	blx	r3
   2b25c:	2800      	cmp	r0, #0
   2b25e:	d1e5      	bne.n	2b22c <att_chan_read+0xdc>
   2b260:	e7aa      	b.n	2b1b8 <att_chan_read+0x68>
		return 0;
   2b262:	2700      	movs	r7, #0
   2b264:	e7d7      	b.n	2b216 <att_chan_read+0xc6>

0002b266 <attr_read_group_cb>:
	if (!data->rsp->len) {
   2b266:	68d0      	ldr	r0, [r2, #12]
   2b268:	7803      	ldrb	r3, [r0, #0]
   2b26a:	3104      	adds	r1, #4
   2b26c:	b913      	cbnz	r3, 2b274 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2b26e:	7001      	strb	r1, [r0, #0]
	return true;
   2b270:	2001      	movs	r0, #1
}
   2b272:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   2b274:	428b      	cmp	r3, r1
   2b276:	d0fb      	beq.n	2b270 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   2b278:	6891      	ldr	r1, [r2, #8]
   2b27a:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   2b27c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2b27e:	3b04      	subs	r3, #4
   2b280:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2b282:	6110      	str	r0, [r2, #16]
		return false;
   2b284:	4770      	bx	lr

0002b286 <chan_req_sent>:
	if (chan->req) {
   2b286:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2b28a:	b133      	cbz	r3, 2b29a <chan_req_sent+0x14>
		k_work_reschedule(&chan->timeout_work, BT_ATT_TIMEOUT);
   2b28c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   2b290:	2300      	movs	r3, #0
   2b292:	f500 7090 	add.w	r0, r0, #288	; 0x120
   2b296:	f7fa ba21 	b.w	256dc <k_work_reschedule>
}
   2b29a:	4770      	bx	lr

0002b29c <find_info_cb>:
{
   2b29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   2b29e:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   2b2a0:	6816      	ldr	r6, [r2, #0]
{
   2b2a2:	4605      	mov	r5, r0
   2b2a4:	460f      	mov	r7, r1
   2b2a6:	4614      	mov	r4, r2
	if (!data->rsp) {
   2b2a8:	b963      	cbnz	r3, 2b2c4 <find_info_cb+0x28>
   2b2aa:	6850      	ldr	r0, [r2, #4]
   2b2ac:	2101      	movs	r1, #1
   2b2ae:	3008      	adds	r0, #8
   2b2b0:	f7f4 ffd4 	bl	2025c <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2b2b4:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   2b2b6:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   2b2b8:	781b      	ldrb	r3, [r3, #0]
   2b2ba:	2b00      	cmp	r3, #0
   2b2bc:	bf0c      	ite	eq
   2b2be:	2301      	moveq	r3, #1
   2b2c0:	2302      	movne	r3, #2
   2b2c2:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   2b2c4:	68a3      	ldr	r3, [r4, #8]
   2b2c6:	781b      	ldrb	r3, [r3, #0]
   2b2c8:	2b01      	cmp	r3, #1
   2b2ca:	d003      	beq.n	2b2d4 <find_info_cb+0x38>
   2b2cc:	2b02      	cmp	r3, #2
   2b2ce:	d019      	beq.n	2b304 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2b2d0:	2000      	movs	r0, #0
   2b2d2:	e016      	b.n	2b302 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   2b2d4:	682b      	ldr	r3, [r5, #0]
   2b2d6:	781b      	ldrb	r3, [r3, #0]
   2b2d8:	2b00      	cmp	r3, #0
   2b2da:	d1f9      	bne.n	2b2d0 <find_info_cb+0x34>
   2b2dc:	6860      	ldr	r0, [r4, #4]
   2b2de:	2104      	movs	r1, #4
   2b2e0:	3008      	adds	r0, #8
   2b2e2:	f7f4 ffbb 	bl	2025c <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2b2e6:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   2b2e8:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   2b2ea:	885b      	ldrh	r3, [r3, #2]
   2b2ec:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2b2ee:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2b2f0:	8007      	strh	r7, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   2b2f2:	899b      	ldrh	r3, [r3, #12]
   2b2f4:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   2b2f8:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2b2fa:	2804      	cmp	r0, #4
   2b2fc:	bf94      	ite	ls
   2b2fe:	2000      	movls	r0, #0
   2b300:	2001      	movhi	r0, #1
}
   2b302:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   2b304:	682b      	ldr	r3, [r5, #0]
   2b306:	781b      	ldrb	r3, [r3, #0]
   2b308:	2b02      	cmp	r3, #2
   2b30a:	d1e1      	bne.n	2b2d0 <find_info_cb+0x34>
   2b30c:	6860      	ldr	r0, [r4, #4]
   2b30e:	2112      	movs	r1, #18
   2b310:	3008      	adds	r0, #8
   2b312:	f7f4 ffa3 	bl	2025c <net_buf_simple_add>
   2b316:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b318:	682a      	ldr	r2, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   2b31a:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(handle);
   2b31c:	f823 7b02 	strh.w	r7, [r3], #2
   2b320:	1c51      	adds	r1, r2, #1
   2b322:	3211      	adds	r2, #17
   2b324:	f851 0b04 	ldr.w	r0, [r1], #4
   2b328:	f843 0b04 	str.w	r0, [r3], #4
   2b32c:	4291      	cmp	r1, r2
   2b32e:	d1f9      	bne.n	2b324 <find_info_cb+0x88>
		if (chan->chan.tx.mtu - data->buf->len >
   2b330:	6863      	ldr	r3, [r4, #4]
   2b332:	f8b6 008a 	ldrh.w	r0, [r6, #138]	; 0x8a
   2b336:	899b      	ldrh	r3, [r3, #12]
   2b338:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2b33a:	2812      	cmp	r0, #18
   2b33c:	e7de      	b.n	2b2fc <find_info_cb+0x60>

0002b33e <att_exec_write_req>:
   2b33e:	2006      	movs	r0, #6
   2b340:	4770      	bx	lr

0002b342 <chan_cfm_sent>:
   2b342:	30f8      	adds	r0, #248	; 0xf8
   2b344:	f3bf 8f5b 	dmb	ish
   2b348:	e850 3f00 	ldrex	r3, [r0]
   2b34c:	f023 0302 	bic.w	r3, r3, #2
   2b350:	e840 3200 	strex	r2, r3, [r0]
   2b354:	2a00      	cmp	r2, #0
   2b356:	d1f7      	bne.n	2b348 <chan_cfm_sent+0x6>
   2b358:	f3bf 8f5b 	dmb	ish
}
   2b35c:	4770      	bx	lr

0002b35e <chan_rsp_sent>:
   2b35e:	30f8      	adds	r0, #248	; 0xf8
   2b360:	f3bf 8f5b 	dmb	ish
   2b364:	e850 3f00 	ldrex	r3, [r0]
   2b368:	f023 0301 	bic.w	r3, r3, #1
   2b36c:	e840 3200 	strex	r2, r3, [r0]
   2b370:	2a00      	cmp	r2, #0
   2b372:	d1f7      	bne.n	2b364 <chan_rsp_sent+0x6>
   2b374:	f3bf 8f5b 	dmb	ish
}
   2b378:	4770      	bx	lr

0002b37a <bt_att_status>:
{
   2b37a:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2b37c:	f3bf 8f5b 	dmb	ish
   2b380:	680b      	ldr	r3, [r1, #0]
   2b382:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b386:	07db      	lsls	r3, r3, #31
{
   2b388:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2b38a:	d519      	bpl.n	2b3c0 <bt_att_status+0x46>
	if (!chan->att) {
   2b38c:	f850 0c08 	ldr.w	r0, [r0, #-8]
   2b390:	b1b0      	cbz	r0, 2b3c0 <bt_att_status+0x46>
	if (chan->req) {
   2b392:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2b396:	b99b      	cbnz	r3, 2b3c0 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2b398:	3004      	adds	r0, #4
   2b39a:	f7ff fdc4 	bl	2af26 <sys_slist_get>
	if (!node) {
   2b39e:	4604      	mov	r4, r0
   2b3a0:	b170      	cbz	r0, 2b3c0 <bt_att_status+0x46>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b3a2:	4601      	mov	r1, r0
   2b3a4:	f1a5 0008 	sub.w	r0, r5, #8
   2b3a8:	f7ef fc6c 	bl	1ac84 <bt_att_chan_req_send>
   2b3ac:	2800      	cmp	r0, #0
   2b3ae:	da07      	bge.n	2b3c0 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   2b3b0:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   2b3b4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   2b3b6:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b3b8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2b3ba:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b3bc:	b902      	cbnz	r2, 2b3c0 <bt_att_status+0x46>
	list->tail = node;
   2b3be:	609c      	str	r4, [r3, #8]
}
   2b3c0:	bd38      	pop	{r3, r4, r5, pc}

0002b3c2 <att_req_send_process>:
{
   2b3c2:	b570      	push	{r4, r5, r6, lr}
   2b3c4:	4605      	mov	r5, r0
	node = sys_slist_get(&att->reqs);
   2b3c6:	3004      	adds	r0, #4
   2b3c8:	f7ff fdad 	bl	2af26 <sys_slist_get>
	if (!node) {
   2b3cc:	4606      	mov	r6, r0
   2b3ce:	b1c0      	cbz	r0, 2b402 <att_req_send_process+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b3d0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2b3d2:	b153      	cbz	r3, 2b3ea <att_req_send_process+0x28>
   2b3d4:	f5b3 70aa 	subs.w	r0, r3, #340	; 0x154
   2b3d8:	d007      	beq.n	2b3ea <att_req_send_process+0x28>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b3da:	681c      	ldr	r4, [r3, #0]
   2b3dc:	b10c      	cbz	r4, 2b3e2 <att_req_send_process+0x20>
   2b3de:	f5a4 74aa 	sub.w	r4, r4, #340	; 0x154
		if (!chan->req) {
   2b3e2:	f8d0 30fc 	ldr.w	r3, [r0, #252]	; 0xfc
   2b3e6:	b13b      	cbz	r3, 2b3f8 <att_req_send_process+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b3e8:	b964      	cbnz	r4, 2b404 <att_req_send_process+0x42>
Z_GENLIST_PREPEND(slist, snode)
   2b3ea:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   2b3ec:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b3ee:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   2b3f0:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b3f2:	b933      	cbnz	r3, 2b402 <att_req_send_process+0x40>
	list->tail = node;
   2b3f4:	60ae      	str	r6, [r5, #8]
}
   2b3f6:	e004      	b.n	2b402 <att_req_send_process+0x40>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b3f8:	4631      	mov	r1, r6
   2b3fa:	f7ef fc43 	bl	1ac84 <bt_att_chan_req_send>
   2b3fe:	2800      	cmp	r0, #0
   2b400:	dbf2      	blt.n	2b3e8 <att_req_send_process+0x26>
}
   2b402:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b404:	f514 73aa 	adds.w	r3, r4, #340	; 0x154
   2b408:	d004      	beq.n	2b414 <att_req_send_process+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b40a:	f8d4 3154 	ldr.w	r3, [r4, #340]	; 0x154
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b40e:	b10b      	cbz	r3, 2b414 <att_req_send_process+0x52>
   2b410:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2b414:	4620      	mov	r0, r4
   2b416:	461c      	mov	r4, r3
   2b418:	e7e3      	b.n	2b3e2 <att_req_send_process+0x20>

0002b41a <write_cb>:
{
   2b41a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b41c:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   2b41e:	4601      	mov	r1, r0
{
   2b420:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   2b422:	222a      	movs	r2, #42	; 0x2a
   2b424:	6820      	ldr	r0, [r4, #0]
   2b426:	f000 fcb1 	bl	2bd8c <bt_gatt_check_perm>
   2b42a:	4605      	mov	r5, r0
   2b42c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   2b42e:	bb20      	cbnz	r0, 2b47a <write_cb+0x60>
	if (!data->req) {
   2b430:	7a23      	ldrb	r3, [r4, #8]
   2b432:	b1ab      	cbz	r3, 2b460 <write_cb+0x46>
	} else if (data->req == BT_ATT_OP_EXEC_WRITE_REQ) {
   2b434:	2b18      	cmp	r3, #24
		flags |= BT_GATT_WRITE_FLAG_EXECUTE;
   2b436:	bf14      	ite	ne
   2b438:	2300      	movne	r3, #0
   2b43a:	2304      	moveq	r3, #4
	write = attr->write(data->conn, attr, data->value, data->len,
   2b43c:	9301      	str	r3, [sp, #4]
   2b43e:	8a63      	ldrh	r3, [r4, #18]
   2b440:	9300      	str	r3, [sp, #0]
   2b442:	68b7      	ldr	r7, [r6, #8]
   2b444:	8a23      	ldrh	r3, [r4, #16]
   2b446:	68e2      	ldr	r2, [r4, #12]
   2b448:	6820      	ldr	r0, [r4, #0]
   2b44a:	4631      	mov	r1, r6
   2b44c:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   2b44e:	1e03      	subs	r3, r0, #0
   2b450:	db08      	blt.n	2b464 <write_cb+0x4a>
   2b452:	8a22      	ldrh	r2, [r4, #16]
   2b454:	4293      	cmp	r3, r2
   2b456:	d10e      	bne.n	2b476 <write_cb+0x5c>
	data->err = 0U;
   2b458:	2300      	movs	r3, #0
   2b45a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   2b45c:	2501      	movs	r5, #1
   2b45e:	e007      	b.n	2b470 <write_cb+0x56>
		flags |= BT_GATT_WRITE_FLAG_CMD;
   2b460:	2302      	movs	r3, #2
   2b462:	e7eb      	b.n	2b43c <write_cb+0x22>
	if (err < 0 && err >= -0xff) {
   2b464:	f113 0fff 	cmn.w	r3, #255	; 0xff
   2b468:	d305      	bcc.n	2b476 <write_cb+0x5c>
		return -err;
   2b46a:	425b      	negs	r3, r3
   2b46c:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   2b46e:	7523      	strb	r3, [r4, #20]
}
   2b470:	4628      	mov	r0, r5
   2b472:	b003      	add	sp, #12
   2b474:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   2b476:	230e      	movs	r3, #14
   2b478:	e7f9      	b.n	2b46e <write_cb+0x54>
		return BT_GATT_ITER_STOP;
   2b47a:	2500      	movs	r5, #0
   2b47c:	e7f8      	b.n	2b470 <write_cb+0x56>

0002b47e <bt_att_sent>:
{
   2b47e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   2b480:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
	struct bt_att *att = chan->att;
   2b484:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   2b488:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   2b48a:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   2b48e:	b10b      	cbz	r3, 2b494 <bt_att_sent+0x16>
		chan->sent(chan);
   2b490:	4638      	mov	r0, r7
   2b492:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2b494:	f3bf 8f5b 	dmb	ish
   2b498:	f105 03f0 	add.w	r3, r5, #240	; 0xf0
   2b49c:	e853 2f00 	ldrex	r2, [r3]
   2b4a0:	f022 0210 	bic.w	r2, r2, #16
   2b4a4:	e843 2100 	strex	r1, r2, [r3]
   2b4a8:	2900      	cmp	r1, #0
   2b4aa:	d1f7      	bne.n	2b49c <bt_att_sent+0x1e>
   2b4ac:	f3bf 8f5b 	dmb	ish
	if (!att) {
   2b4b0:	b30c      	cbz	r4, 2b4f6 <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2b4b2:	f8d5 30f4 	ldr.w	r3, [r5, #244]	; 0xf4
   2b4b6:	b98b      	cbnz	r3, 2b4dc <bt_att_sent+0x5e>
   2b4b8:	6863      	ldr	r3, [r4, #4]
   2b4ba:	b17b      	cbz	r3, 2b4dc <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2b4bc:	1d20      	adds	r0, r4, #4
   2b4be:	f7ff fd32 	bl	2af26 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b4c2:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2b4c4:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2b4c6:	4638      	mov	r0, r7
   2b4c8:	f7ff fd9f 	bl	2b00a <chan_req_send>
   2b4cc:	2800      	cmp	r0, #0
   2b4ce:	da12      	bge.n	2b4f6 <bt_att_sent+0x78>
Z_GENLIST_PREPEND(slist, snode)
   2b4d0:	6863      	ldr	r3, [r4, #4]
	parent->next = child;
   2b4d2:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2b4d4:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2b4d6:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2b4d8:	b903      	cbnz	r3, 2b4dc <bt_att_sent+0x5e>
	list->tail = node;
   2b4da:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   2b4dc:	f105 01f8 	add.w	r1, r5, #248	; 0xf8
   2b4e0:	4638      	mov	r0, r7
   2b4e2:	f7ff fdae 	bl	2b042 <process_queue>
	if (!err) {
   2b4e6:	b130      	cbz	r0, 2b4f6 <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2b4e8:	f104 010c 	add.w	r1, r4, #12
   2b4ec:	4638      	mov	r0, r7
}
   2b4ee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   2b4f2:	f7ff bda6 	b.w	2b042 <process_queue>
}
   2b4f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002b4f8 <read_cb>:
{
   2b4f8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   2b4fc:	f8d2 8000 	ldr.w	r8, [r2]
{
   2b500:	4606      	mov	r6, r0
	data->err = 0x00;
   2b502:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2b504:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2b508:	7317      	strb	r7, [r2, #12]
{
   2b50a:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   2b50c:	4631      	mov	r1, r6
   2b50e:	2215      	movs	r2, #21
   2b510:	f000 fc3c 	bl	2bd8c <bt_gatt_check_perm>
   2b514:	4604      	mov	r4, r0
   2b516:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2b518:	b9a0      	cbnz	r0, 2b544 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   2b51a:	e9cd 0000 	strd	r0, r0, [sp]
   2b51e:	88ab      	ldrh	r3, [r5, #4]
   2b520:	68aa      	ldr	r2, [r5, #8]
   2b522:	4631      	mov	r1, r6
   2b524:	4640      	mov	r0, r8
   2b526:	f7ff fe13 	bl	2b150 <att_chan_read>
	if (ret < 0) {
   2b52a:	1e03      	subs	r3, r0, #0
   2b52c:	da0c      	bge.n	2b548 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   2b52e:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2b532:	bf26      	itte	cs
   2b534:	425b      	negcs	r3, r3
   2b536:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   2b538:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   2b53a:	732b      	strb	r3, [r5, #12]
}
   2b53c:	4620      	mov	r0, r4
   2b53e:	b002      	add	sp, #8
   2b540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2b544:	463c      	mov	r4, r7
   2b546:	e7f9      	b.n	2b53c <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   2b548:	2401      	movs	r4, #1
   2b54a:	e7f7      	b.n	2b53c <read_cb+0x44>

0002b54c <att_read_blob_req>:
{
   2b54c:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   2b54e:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2b550:	8813      	ldrh	r3, [r2, #0]
   2b552:	8852      	ldrh	r2, [r2, #2]
   2b554:	9200      	str	r2, [sp, #0]
   2b556:	210c      	movs	r1, #12
   2b558:	220d      	movs	r2, #13
   2b55a:	f7f0 f945 	bl	1b7e8 <att_read_rsp>
}
   2b55e:	b003      	add	sp, #12
   2b560:	f85d fb04 	ldr.w	pc, [sp], #4

0002b564 <att_read_req>:
{
   2b564:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   2b566:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   2b568:	2200      	movs	r2, #0
   2b56a:	881b      	ldrh	r3, [r3, #0]
   2b56c:	9200      	str	r2, [sp, #0]
   2b56e:	210a      	movs	r1, #10
   2b570:	220b      	movs	r2, #11
   2b572:	f7f0 f939 	bl	1b7e8 <att_read_rsp>
}
   2b576:	b003      	add	sp, #12
   2b578:	f85d fb04 	ldr.w	pc, [sp], #4

0002b57c <bt_att_init>:
	bt_gatt_init();
   2b57c:	f7f0 bea4 	b.w	1c2c8 <bt_gatt_init>

0002b580 <bt_att_get_mtu>:
{
   2b580:	b508      	push	{r3, lr}
	att = att_get(conn);
   2b582:	f7ef fd2f 	bl	1afe4 <att_get>
	if (!att) {
   2b586:	b1d8      	cbz	r0, 2b5c0 <bt_att_get_mtu+0x40>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b588:	6a80      	ldr	r0, [r0, #40]	; 0x28
   2b58a:	b1c8      	cbz	r0, 2b5c0 <bt_att_get_mtu+0x40>
   2b58c:	f5b0 71aa 	subs.w	r1, r0, #340	; 0x154
   2b590:	d015      	beq.n	2b5be <bt_att_get_mtu+0x3e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b592:	6803      	ldr	r3, [r0, #0]
   2b594:	b10b      	cbz	r3, 2b59a <bt_att_get_mtu+0x1a>
   2b596:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
{
   2b59a:	2000      	movs	r0, #0
		if (chan->chan.tx.mtu > mtu) {
   2b59c:	f8b1 208a 	ldrh.w	r2, [r1, #138]	; 0x8a
   2b5a0:	4290      	cmp	r0, r2
   2b5a2:	bf38      	it	cc
   2b5a4:	4610      	movcc	r0, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2b5a6:	b15b      	cbz	r3, 2b5c0 <bt_att_get_mtu+0x40>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2b5a8:	f513 72aa 	adds.w	r2, r3, #340	; 0x154
   2b5ac:	d004      	beq.n	2b5b8 <bt_att_get_mtu+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2b5ae:	f8d3 2154 	ldr.w	r2, [r3, #340]	; 0x154
   2b5b2:	b10a      	cbz	r2, 2b5b8 <bt_att_get_mtu+0x38>
   2b5b4:	f5a2 72aa 	sub.w	r2, r2, #340	; 0x154
{
   2b5b8:	4619      	mov	r1, r3
   2b5ba:	4613      	mov	r3, r2
   2b5bc:	e7ee      	b.n	2b59c <bt_att_get_mtu+0x1c>
		return 0;
   2b5be:	4608      	mov	r0, r1
}
   2b5c0:	bd08      	pop	{r3, pc}

0002b5c2 <att_handle_find_info_rsp>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2b5c2:	898a      	ldrh	r2, [r1, #12]
   2b5c4:	6889      	ldr	r1, [r1, #8]
   2b5c6:	2300      	movs	r3, #0
   2b5c8:	f7f0 bac4 	b.w	1bb54 <att_handle_rsp>

0002b5cc <att_handle_find_type_rsp>:
   2b5cc:	f7ff bff9 	b.w	2b5c2 <att_handle_find_info_rsp>

0002b5d0 <att_handle_read_type_rsp>:
   2b5d0:	f7ff bff7 	b.w	2b5c2 <att_handle_find_info_rsp>

0002b5d4 <att_handle_read_rsp>:
   2b5d4:	f7ff bff5 	b.w	2b5c2 <att_handle_find_info_rsp>

0002b5d8 <att_handle_read_blob_rsp>:
   2b5d8:	f7ff bff3 	b.w	2b5c2 <att_handle_find_info_rsp>

0002b5dc <att_handle_read_mult_rsp>:
   2b5dc:	f7ff bff1 	b.w	2b5c2 <att_handle_find_info_rsp>

0002b5e0 <att_handle_read_group_rsp>:
   2b5e0:	f7ff bfef 	b.w	2b5c2 <att_handle_find_info_rsp>

0002b5e4 <att_handle_write_rsp>:
   2b5e4:	f7ff bfed 	b.w	2b5c2 <att_handle_find_info_rsp>

0002b5e8 <att_handle_prepare_write_rsp>:
   2b5e8:	f7ff bfeb 	b.w	2b5c2 <att_handle_find_info_rsp>

0002b5ec <att_handle_exec_write_rsp>:
   2b5ec:	f7ff bfe9 	b.w	2b5c2 <att_handle_find_info_rsp>

0002b5f0 <att_confirm>:
   2b5f0:	f7ff bfe7 	b.w	2b5c2 <att_handle_find_info_rsp>

0002b5f4 <att_mtu_rsp>:
{
   2b5f4:	b570      	push	{r4, r5, r6, lr}
	rsp = (void *)buf->data;
   2b5f6:	688e      	ldr	r6, [r1, #8]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2b5f8:	8833      	ldrh	r3, [r6, #0]
   2b5fa:	2b16      	cmp	r3, #22
{
   2b5fc:	4604      	mov	r4, r0
   2b5fe:	460d      	mov	r5, r1
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
   2b600:	d806      	bhi.n	2b610 <att_mtu_rsp+0x1c>
		return att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_INVALID_PDU);
   2b602:	2200      	movs	r2, #0
   2b604:	2304      	movs	r3, #4
   2b606:	4611      	mov	r1, r2
}
   2b608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2b60c:	f7f0 baa2 	b.w	1bb54 <att_handle_rsp>
	chan->chan.rx.mtu = MIN(mtu, BT_ATT_MTU);
   2b610:	2317      	movs	r3, #23
   2b612:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   2b616:	f8a0 308a 	strh.w	r3, [r0, #138]	; 0x8a
	att_chan_mtu_updated(chan);
   2b61a:	f7ff fd53 	bl	2b0c4 <att_chan_mtu_updated>
	return att_handle_rsp(chan, rsp, buf->len, 0);
   2b61e:	89aa      	ldrh	r2, [r5, #12]
   2b620:	2300      	movs	r3, #0
   2b622:	4631      	mov	r1, r6
   2b624:	4620      	mov	r0, r4
   2b626:	e7ef      	b.n	2b608 <att_mtu_rsp+0x14>

0002b628 <gatt_ccc_changed>:
{
   2b628:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   2b62a:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   2b62c:	895a      	ldrh	r2, [r3, #10]
   2b62e:	428a      	cmp	r2, r1
   2b630:	d003      	beq.n	2b63a <gatt_ccc_changed+0x12>
		ccc->value = value;
   2b632:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2b634:	68db      	ldr	r3, [r3, #12]
   2b636:	b103      	cbz	r3, 2b63a <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   2b638:	4718      	bx	r3
}
   2b63a:	4770      	bx	lr

0002b63c <gatt_indicate_rsp>:
{
   2b63c:	b510      	push	{r4, lr}
   2b63e:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2b640:	68a3      	ldr	r3, [r4, #8]
{
   2b642:	460a      	mov	r2, r1
	if (params->func) {
   2b644:	b10b      	cbz	r3, 2b64a <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   2b646:	4621      	mov	r1, r4
   2b648:	4798      	blx	r3
	params->_ref--;
   2b64a:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b64c:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   2b64e:	3b01      	subs	r3, #1
   2b650:	b2db      	uxtb	r3, r3
   2b652:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2b654:	b122      	cbz	r2, 2b660 <gatt_indicate_rsp+0x24>
   2b656:	b91b      	cbnz	r3, 2b660 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   2b658:	4620      	mov	r0, r4
}
   2b65a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   2b65e:	4710      	bx	r2
}
   2b660:	bd10      	pop	{r4, pc}

0002b662 <match_uuid>:
	data->attr = attr;
   2b662:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2b664:	8091      	strh	r1, [r2, #4]
}
   2b666:	2000      	movs	r0, #0
   2b668:	4770      	bx	lr

0002b66a <gatt_mtu_rsp>:
{
   2b66a:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   2b66c:	6813      	ldr	r3, [r2, #0]
   2b66e:	4718      	bx	r3

0002b670 <gatt_write_rsp>:
{
   2b670:	9a00      	ldr	r2, [sp, #0]
	params->func(conn, err, params);
   2b672:	6813      	ldr	r3, [r2, #0]
   2b674:	4718      	bx	r3

0002b676 <gen_hash_m>:
{
   2b676:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b678:	6807      	ldr	r7, [r0, #0]
   2b67a:	783d      	ldrb	r5, [r7, #0]
{
   2b67c:	b089      	sub	sp, #36	; 0x24
   2b67e:	4606      	mov	r6, r0
   2b680:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   2b682:	b10d      	cbz	r5, 2b688 <gen_hash_m+0x12>
	switch (u16->val) {
   2b684:	2501      	movs	r5, #1
   2b686:	e014      	b.n	2b6b2 <gen_hash_m+0x3c>
   2b688:	887b      	ldrh	r3, [r7, #2]
   2b68a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2b68e:	d004      	beq.n	2b69a <gen_hash_m+0x24>
   2b690:	d812      	bhi.n	2b6b8 <gen_hash_m+0x42>
   2b692:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   2b696:	2b03      	cmp	r3, #3
   2b698:	d8f4      	bhi.n	2b684 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2b69a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b69e:	2202      	movs	r2, #2
   2b6a0:	f10d 010e 	add.w	r1, sp, #14
   2b6a4:	4620      	mov	r0, r4
   2b6a6:	f7fe ffc8 	bl	2a63a <tc_cmac_update>
   2b6aa:	b9e0      	cbnz	r0, 2b6e6 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2b6ac:	f06f 0315 	mvn.w	r3, #21
   2b6b0:	65a3      	str	r3, [r4, #88]	; 0x58
}
   2b6b2:	4628      	mov	r0, r5
   2b6b4:	b009      	add	sp, #36	; 0x24
   2b6b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2b6b8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   2b6bc:	33ff      	adds	r3, #255	; 0xff
   2b6be:	b29b      	uxth	r3, r3
   2b6c0:	2b04      	cmp	r3, #4
   2b6c2:	d8df      	bhi.n	2b684 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2b6c4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b6c8:	2202      	movs	r2, #2
   2b6ca:	f10d 010e 	add.w	r1, sp, #14
   2b6ce:	4620      	mov	r0, r4
   2b6d0:	f7fe ffb3 	bl	2a63a <tc_cmac_update>
   2b6d4:	2800      	cmp	r0, #0
   2b6d6:	d0e9      	beq.n	2b6ac <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2b6d8:	887b      	ldrh	r3, [r7, #2]
   2b6da:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b6de:	2202      	movs	r2, #2
   2b6e0:	f10d 010e 	add.w	r1, sp, #14
   2b6e4:	e017      	b.n	2b716 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2b6e6:	887b      	ldrh	r3, [r7, #2]
   2b6e8:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b6ec:	2202      	movs	r2, #2
   2b6ee:	f10d 010e 	add.w	r1, sp, #14
   2b6f2:	4620      	mov	r0, r4
   2b6f4:	f7fe ffa1 	bl	2a63a <tc_cmac_update>
   2b6f8:	2800      	cmp	r0, #0
   2b6fa:	d0d7      	beq.n	2b6ac <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   2b6fc:	2000      	movs	r0, #0
   2b6fe:	2310      	movs	r3, #16
   2b700:	eb0d 0203 	add.w	r2, sp, r3
   2b704:	6877      	ldr	r7, [r6, #4]
   2b706:	9000      	str	r0, [sp, #0]
   2b708:	4631      	mov	r1, r6
   2b70a:	47b8      	blx	r7
		if (len < 0) {
   2b70c:	1e02      	subs	r2, r0, #0
   2b70e:	da01      	bge.n	2b714 <gen_hash_m+0x9e>
			state->err = len;
   2b710:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   2b712:	e7ce      	b.n	2b6b2 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   2b714:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2b716:	4620      	mov	r0, r4
   2b718:	f7fe ff8f 	bl	2a63a <tc_cmac_update>
   2b71c:	2800      	cmp	r0, #0
   2b71e:	d1b1      	bne.n	2b684 <gen_hash_m+0xe>
   2b720:	e7c4      	b.n	2b6ac <gen_hash_m+0x36>

0002b722 <bt_addr_le_cmp>:
   2b722:	2207      	movs	r2, #7
   2b724:	f001 ba59 	b.w	2cbda <memcmp>

0002b728 <find_ccc_cfg>:
{
   2b728:	b513      	push	{r0, r1, r4, lr}
   2b72a:	1c4a      	adds	r2, r1, #1
   2b72c:	460c      	mov	r4, r1
		if (conn) {
   2b72e:	b140      	cbz	r0, 2b742 <find_ccc_cfg+0x1a>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   2b730:	7809      	ldrb	r1, [r1, #0]
   2b732:	f7ff faa3 	bl	2ac7c <bt_conn_is_peer_addr_le>
   2b736:	2800      	cmp	r0, #0
	return NULL;
   2b738:	bf08      	it	eq
   2b73a:	2400      	moveq	r4, #0
}
   2b73c:	4620      	mov	r0, r4
   2b73e:	b002      	add	sp, #8
   2b740:	bd10      	pop	{r4, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2b742:	9000      	str	r0, [sp, #0]
   2b744:	4669      	mov	r1, sp
   2b746:	f8cd 0003 	str.w	r0, [sp, #3]
   2b74a:	4610      	mov	r0, r2
   2b74c:	f7ff ffe9 	bl	2b722 <bt_addr_le_cmp>
   2b750:	2800      	cmp	r0, #0
	return NULL;
   2b752:	bf18      	it	ne
   2b754:	2400      	movne	r4, #0
   2b756:	e7f1      	b.n	2b73c <find_ccc_cfg+0x14>

0002b758 <gatt_exchange_mtu_encode>:
{
   2b758:	b508      	push	{r3, lr}
   2b75a:	2102      	movs	r1, #2
   2b75c:	3008      	adds	r0, #8
   2b75e:	f7f4 fd7d 	bl	2025c <net_buf_simple_add>
   2b762:	4603      	mov	r3, r0
	req->mtu = sys_cpu_to_le16(mtu);
   2b764:	2217      	movs	r2, #23
   2b766:	2000      	movs	r0, #0
   2b768:	701a      	strb	r2, [r3, #0]
   2b76a:	7058      	strb	r0, [r3, #1]
}
   2b76c:	bd08      	pop	{r3, pc}

0002b76e <read_included_uuid_encode>:
{
   2b76e:	b510      	push	{r4, lr}
   2b770:	2102      	movs	r1, #2
   2b772:	3008      	adds	r0, #8
   2b774:	4614      	mov	r4, r2
   2b776:	f7f4 fd71 	bl	2025c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->_included.start_handle);
   2b77a:	8963      	ldrh	r3, [r4, #10]
   2b77c:	8003      	strh	r3, [r0, #0]
}
   2b77e:	2000      	movs	r0, #0
   2b780:	bd10      	pop	{r4, pc}

0002b782 <gatt_find_info_encode>:
{
   2b782:	b510      	push	{r4, lr}
   2b784:	2104      	movs	r1, #4
   2b786:	3008      	adds	r0, #8
   2b788:	4614      	mov	r4, r2
   2b78a:	f7f4 fd67 	bl	2025c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2b78e:	8923      	ldrh	r3, [r4, #8]
   2b790:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2b792:	89e3      	ldrh	r3, [r4, #14]
   2b794:	8043      	strh	r3, [r0, #2]
}
   2b796:	2000      	movs	r0, #0
   2b798:	bd10      	pop	{r4, pc}

0002b79a <gatt_read_encode>:
{
   2b79a:	b510      	push	{r4, lr}
   2b79c:	2102      	movs	r1, #2
   2b79e:	3008      	adds	r0, #8
   2b7a0:	4614      	mov	r4, r2
   2b7a2:	f7f4 fd5b 	bl	2025c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   2b7a6:	8923      	ldrh	r3, [r4, #8]
   2b7a8:	8003      	strh	r3, [r0, #0]
}
   2b7aa:	2000      	movs	r0, #0
   2b7ac:	bd10      	pop	{r4, pc}

0002b7ae <gatt_read_blob_encode>:
{
   2b7ae:	b510      	push	{r4, lr}
   2b7b0:	2104      	movs	r1, #4
   2b7b2:	3008      	adds	r0, #8
   2b7b4:	4614      	mov	r4, r2
   2b7b6:	f7f4 fd51 	bl	2025c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->single.handle);
   2b7ba:	8923      	ldrh	r3, [r4, #8]
   2b7bc:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->single.offset);
   2b7be:	8963      	ldrh	r3, [r4, #10]
   2b7c0:	8043      	strh	r3, [r0, #2]
}
   2b7c2:	2000      	movs	r0, #0
   2b7c4:	bd10      	pop	{r4, pc}

0002b7c6 <gatt_cancel_encode>:
{
   2b7c6:	b508      	push	{r3, lr}
   2b7c8:	2101      	movs	r1, #1
   2b7ca:	3008      	adds	r0, #8
   2b7cc:	f7f4 fd46 	bl	2025c <net_buf_simple_add>
   2b7d0:	4603      	mov	r3, r0
	req->flags = BT_ATT_FLAG_CANCEL;
   2b7d2:	2000      	movs	r0, #0
   2b7d4:	7018      	strb	r0, [r3, #0]
}
   2b7d6:	bd08      	pop	{r3, pc}

0002b7d8 <gatt_exec_encode>:
{
   2b7d8:	b508      	push	{r3, lr}
   2b7da:	2101      	movs	r1, #1
   2b7dc:	3008      	adds	r0, #8
   2b7de:	f7f4 fd3d 	bl	2025c <net_buf_simple_add>
	req->flags = BT_ATT_FLAG_EXEC;
   2b7e2:	2301      	movs	r3, #1
   2b7e4:	7003      	strb	r3, [r0, #0]
}
   2b7e6:	2000      	movs	r0, #0
   2b7e8:	bd08      	pop	{r3, pc}

0002b7ea <gatt_read_group_encode>:
{
   2b7ea:	b538      	push	{r3, r4, r5, lr}
   2b7ec:	f100 0408 	add.w	r4, r0, #8
   2b7f0:	2104      	movs	r1, #4
   2b7f2:	4620      	mov	r0, r4
   2b7f4:	4615      	mov	r5, r2
   2b7f6:	f7f4 fd31 	bl	2025c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2b7fa:	892b      	ldrh	r3, [r5, #8]
   2b7fc:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2b7fe:	89eb      	ldrh	r3, [r5, #14]
   2b800:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2b802:	7c2b      	ldrb	r3, [r5, #16]
   2b804:	b933      	cbnz	r3, 2b814 <gatt_read_group_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2b806:	f44f 5120 	mov.w	r1, #10240	; 0x2800
   2b80a:	4620      	mov	r0, r4
   2b80c:	f000 fc40 	bl	2c090 <net_buf_simple_add_le16>
}
   2b810:	2000      	movs	r0, #0
   2b812:	bd38      	pop	{r3, r4, r5, pc}
   2b814:	f642 0101 	movw	r1, #10241	; 0x2801
   2b818:	e7f7      	b.n	2b80a <gatt_read_group_encode+0x20>

0002b81a <gatt_read_type_encode>:
{
   2b81a:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2b81c:	f100 0408 	add.w	r4, r0, #8
   2b820:	2104      	movs	r1, #4
   2b822:	4620      	mov	r0, r4
   2b824:	4615      	mov	r5, r2
   2b826:	f7f4 fd19 	bl	2025c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2b82a:	892b      	ldrh	r3, [r5, #8]
   2b82c:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2b82e:	89eb      	ldrh	r3, [r5, #14]
   2b830:	8043      	strh	r3, [r0, #2]
	switch (params->type) {
   2b832:	7c2b      	ldrb	r3, [r5, #16]
   2b834:	2b02      	cmp	r3, #2
   2b836:	d004      	beq.n	2b842 <gatt_read_type_encode+0x28>
   2b838:	2b03      	cmp	r3, #3
   2b83a:	d009      	beq.n	2b850 <gatt_read_type_encode+0x36>
		net_buf_add_le16(buf, BT_UUID_16(params->uuid)->val);
   2b83c:	682b      	ldr	r3, [r5, #0]
	net_buf_simple_add_le16(&buf->b, val);
   2b83e:	8859      	ldrh	r1, [r3, #2]
   2b840:	e001      	b.n	2b846 <gatt_read_type_encode+0x2c>
   2b842:	f642 0102 	movw	r1, #10242	; 0x2802
   2b846:	4620      	mov	r0, r4
   2b848:	f000 fc22 	bl	2c090 <net_buf_simple_add_le16>
}
   2b84c:	2000      	movs	r0, #0
   2b84e:	bd38      	pop	{r3, r4, r5, pc}
   2b850:	f642 0103 	movw	r1, #10243	; 0x2803
   2b854:	e7f7      	b.n	2b846 <gatt_read_type_encode+0x2c>

0002b856 <gatt_read_mult_encode>:
{
   2b856:	b570      	push	{r4, r5, r6, lr}
   2b858:	4614      	mov	r4, r2
	for (i = 0U; i < params->handle_count; i++) {
   2b85a:	2500      	movs	r5, #0
   2b85c:	f100 0608 	add.w	r6, r0, #8
   2b860:	6862      	ldr	r2, [r4, #4]
   2b862:	b2eb      	uxtb	r3, r5
   2b864:	429a      	cmp	r2, r3
   2b866:	f105 0501 	add.w	r5, r5, #1
   2b86a:	d801      	bhi.n	2b870 <gatt_read_mult_encode+0x1a>
}
   2b86c:	2000      	movs	r0, #0
   2b86e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_le16(buf, params->multiple.handles[i]);
   2b870:	68a2      	ldr	r2, [r4, #8]
   2b872:	4630      	mov	r0, r6
   2b874:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
   2b878:	f000 fc0a 	bl	2c090 <net_buf_simple_add_le16>
	for (i = 0U; i < params->handle_count; i++) {
   2b87c:	e7f0      	b.n	2b860 <gatt_read_mult_encode+0xa>

0002b87e <gatt_write_encode>:
{
   2b87e:	b530      	push	{r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2b880:	2102      	movs	r1, #2
   2b882:	b085      	sub	sp, #20
   2b884:	4605      	mov	r5, r0
   2b886:	3008      	adds	r0, #8
   2b888:	4614      	mov	r4, r2
   2b88a:	f7f4 fce7 	bl	2025c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2b88e:	88a3      	ldrh	r3, [r4, #4]
   2b890:	8003      	strh	r3, [r0, #0]
	write = net_buf_append_bytes(buf, params->length, params->data,
   2b892:	2300      	movs	r3, #0
   2b894:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2b898:	2200      	movs	r2, #0
   2b89a:	2300      	movs	r3, #0
   2b89c:	e9cd 2300 	strd	r2, r3, [sp]
   2b8a0:	89a1      	ldrh	r1, [r4, #12]
   2b8a2:	68a2      	ldr	r2, [r4, #8]
   2b8a4:	4628      	mov	r0, r5
   2b8a6:	f7f4 fcfb 	bl	202a0 <net_buf_append_bytes>
	if (write != params->length) {
   2b8aa:	89a3      	ldrh	r3, [r4, #12]
   2b8ac:	4283      	cmp	r3, r0
}
   2b8ae:	bf14      	ite	ne
   2b8b0:	f06f 000b 	mvnne.w	r0, #11
   2b8b4:	2000      	moveq	r0, #0
   2b8b6:	b005      	add	sp, #20
   2b8b8:	bd30      	pop	{r4, r5, pc}

0002b8ba <gatt_prepare_write_encode>:
{
   2b8ba:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   2b8bc:	4606      	mov	r6, r0
   2b8be:	460c      	mov	r4, r1
   2b8c0:	3008      	adds	r0, #8
   2b8c2:	2104      	movs	r1, #4
   2b8c4:	4615      	mov	r5, r2
   2b8c6:	f7f4 fcc9 	bl	2025c <net_buf_simple_add>
	req->handle = sys_cpu_to_le16(params->handle);
   2b8ca:	88ab      	ldrh	r3, [r5, #4]
   2b8cc:	8003      	strh	r3, [r0, #0]
	req->offset = sys_cpu_to_le16(params->offset);
   2b8ce:	88eb      	ldrh	r3, [r5, #6]
   2b8d0:	8043      	strh	r3, [r0, #2]
	write = net_buf_append_bytes(buf, len - sizeof(*req),
   2b8d2:	2300      	movs	r3, #0
   2b8d4:	e9cd 3302 	strd	r3, r3, [sp, #8]
   2b8d8:	3c04      	subs	r4, #4
   2b8da:	2300      	movs	r3, #0
   2b8dc:	2200      	movs	r2, #0
   2b8de:	e9cd 2300 	strd	r2, r3, [sp]
   2b8e2:	4621      	mov	r1, r4
   2b8e4:	68aa      	ldr	r2, [r5, #8]
   2b8e6:	4630      	mov	r0, r6
   2b8e8:	f7f4 fcda 	bl	202a0 <net_buf_append_bytes>
	if (write != (len - sizeof(*req))) {
   2b8ec:	4284      	cmp	r4, r0
}
   2b8ee:	bf14      	ite	ne
   2b8f0:	f06f 000b 	mvnne.w	r0, #11
   2b8f4:	2000      	moveq	r0, #0
   2b8f6:	b004      	add	sp, #16
   2b8f8:	bd70      	pop	{r4, r5, r6, pc}

0002b8fa <gatt_read_mult_rsp>:
{
   2b8fa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2b8fc:	9d08      	ldr	r5, [sp, #32]
   2b8fe:	4606      	mov	r6, r0
   2b900:	682f      	ldr	r7, [r5, #0]
	if (err || !length) {
   2b902:	460c      	mov	r4, r1
   2b904:	b901      	cbnz	r1, 2b908 <gatt_read_mult_rsp+0xe>
   2b906:	b94b      	cbnz	r3, 2b91c <gatt_read_mult_rsp+0x22>
		params->func(conn, err, params, NULL, 0);
   2b908:	2300      	movs	r3, #0
   2b90a:	9308      	str	r3, [sp, #32]
   2b90c:	462a      	mov	r2, r5
   2b90e:	4621      	mov	r1, r4
	params->func(conn, 0, params, NULL, 0);
   2b910:	4630      	mov	r0, r6
   2b912:	46bc      	mov	ip, r7
}
   2b914:	b003      	add	sp, #12
   2b916:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	params->func(conn, 0, params, NULL, 0);
   2b91a:	4760      	bx	ip
	params->func(conn, 0, params, pdu, length);
   2b91c:	9300      	str	r3, [sp, #0]
   2b91e:	4613      	mov	r3, r2
   2b920:	462a      	mov	r2, r5
   2b922:	47b8      	blx	r7
	params->func(conn, 0, params, NULL, 0);
   2b924:	9408      	str	r4, [sp, #32]
   2b926:	682f      	ldr	r7, [r5, #0]
   2b928:	4623      	mov	r3, r4
   2b92a:	462a      	mov	r2, r5
   2b92c:	4621      	mov	r1, r4
   2b92e:	e7ef      	b.n	2b910 <gatt_read_mult_rsp+0x16>

0002b930 <bt_addr_le_copy>:
   2b930:	680b      	ldr	r3, [r1, #0]
   2b932:	6003      	str	r3, [r0, #0]
   2b934:	888b      	ldrh	r3, [r1, #4]
   2b936:	8083      	strh	r3, [r0, #4]
   2b938:	798b      	ldrb	r3, [r1, #6]
   2b93a:	7183      	strb	r3, [r0, #6]
}
   2b93c:	4770      	bx	lr

0002b93e <clear_sc_cfg>:
__ssp_bos_icheck3(memset, void *, int)
   2b93e:	2300      	movs	r3, #0
   2b940:	6003      	str	r3, [r0, #0]
   2b942:	6043      	str	r3, [r0, #4]
   2b944:	6083      	str	r3, [r0, #8]
}
   2b946:	4770      	bx	lr

0002b948 <sc_clear>:
{
   2b948:	b538      	push	{r3, r4, r5, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2b94a:	f100 0590 	add.w	r5, r0, #144	; 0x90
{
   2b94e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   2b950:	4629      	mov	r1, r5
   2b952:	7a00      	ldrb	r0, [r0, #8]
   2b954:	f7ff f8d4 	bl	2ab00 <bt_addr_le_is_bonded>
   2b958:	7a20      	ldrb	r0, [r4, #8]
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
   2b95a:	4629      	mov	r1, r5
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2b95c:	f7f0 fabe 	bl	1bedc <find_sc_cfg>
		if (cfg) {
   2b960:	b118      	cbz	r0, 2b96a <sc_clear+0x22>
}
   2b962:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			clear_sc_cfg(cfg);
   2b966:	f7ff bfea 	b.w	2b93e <clear_sc_cfg>
}
   2b96a:	bd38      	pop	{r3, r4, r5, pc}

0002b96c <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   2b96c:	2a02      	cmp	r2, #2
{
   2b96e:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2b970:	d108      	bne.n	2b984 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2b972:	2300      	movs	r3, #0
   2b974:	f100 0190 	add.w	r1, r0, #144	; 0x90
   2b978:	461a      	mov	r2, r3
   2b97a:	7a00      	ldrb	r0, [r0, #8]
   2b97c:	f7f0 fb6a 	bl	1c054 <sc_save>
}
   2b980:	2002      	movs	r0, #2
   2b982:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2b984:	f7ff ffe0 	bl	2b948 <sc_clear>
   2b988:	e7fa      	b.n	2b980 <sc_ccc_cfg_write+0x14>

0002b98a <bt_gatt_attr_read.constprop.0>:
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2b98a:	b538      	push	{r3, r4, r5, lr}
   2b98c:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	if (offset > value_len) {
   2b990:	4295      	cmp	r5, r2
ssize_t bt_gatt_attr_read(struct bt_conn *conn, const struct bt_gatt_attr *attr,
   2b992:	460c      	mov	r4, r1
   2b994:	4611      	mov	r1, r2
	if (offset > value_len) {
   2b996:	d30a      	bcc.n	2b9ae <bt_gatt_attr_read.constprop.0+0x24>
	len = MIN(buf_len, value_len - offset);
   2b998:	1aad      	subs	r5, r5, r2
   2b99a:	42a5      	cmp	r5, r4
   2b99c:	bfa8      	it	ge
   2b99e:	4625      	movge	r5, r4
   2b9a0:	b2ad      	uxth	r5, r5
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2b9a2:	462a      	mov	r2, r5
   2b9a4:	4419      	add	r1, r3
   2b9a6:	f001 f926 	bl	2cbf6 <memcpy>
}
   2b9aa:	4628      	mov	r0, r5
   2b9ac:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2b9ae:	f06f 0506 	mvn.w	r5, #6
   2b9b2:	e7fa      	b.n	2b9aa <bt_gatt_attr_read.constprop.0+0x20>

0002b9b4 <bt_gatt_attr_read_ccc>:
{
   2b9b4:	b530      	push	{r4, r5, lr}
	cfg = find_ccc_cfg(conn, ccc);
   2b9b6:	68c9      	ldr	r1, [r1, #12]
{
   2b9b8:	b085      	sub	sp, #20
   2b9ba:	4614      	mov	r4, r2
   2b9bc:	461d      	mov	r5, r3
	cfg = find_ccc_cfg(conn, ccc);
   2b9be:	f7ff feb3 	bl	2b728 <find_ccc_cfg>
	if (cfg) {
   2b9c2:	b100      	cbz	r0, 2b9c6 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(cfg->value);
   2b9c4:	8900      	ldrh	r0, [r0, #8]
   2b9c6:	f8ad 000e 	strh.w	r0, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   2b9ca:	2302      	movs	r3, #2
   2b9cc:	9300      	str	r3, [sp, #0]
   2b9ce:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2b9d2:	f10d 030e 	add.w	r3, sp, #14
   2b9d6:	4629      	mov	r1, r5
   2b9d8:	4620      	mov	r0, r4
   2b9da:	f7ff ffd6 	bl	2b98a <bt_gatt_attr_read.constprop.0>
}
   2b9de:	b005      	add	sp, #20
   2b9e0:	bd30      	pop	{r4, r5, pc}

0002b9e2 <bt_gatt_attr_read_service>:
{
   2b9e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2b9e4:	460c      	mov	r4, r1
   2b9e6:	4619      	mov	r1, r3
	struct bt_uuid *uuid = attr->user_data;
   2b9e8:	68e3      	ldr	r3, [r4, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
   2b9ea:	781c      	ldrb	r4, [r3, #0]
{
   2b9ec:	4610      	mov	r0, r2
   2b9ee:	f8bd 2018 	ldrh.w	r2, [sp, #24]
	if (uuid->type == BT_UUID_TYPE_16) {
   2b9f2:	b954      	cbnz	r4, 2ba0a <bt_gatt_attr_read_service+0x28>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   2b9f4:	885b      	ldrh	r3, [r3, #2]
   2b9f6:	f8ad 300e 	strh.w	r3, [sp, #14]
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2b9fa:	2302      	movs	r3, #2
   2b9fc:	9300      	str	r3, [sp, #0]
   2b9fe:	f10d 030e 	add.w	r3, sp, #14
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2ba02:	f7ff ffc2 	bl	2b98a <bt_gatt_attr_read.constprop.0>
}
   2ba06:	b004      	add	sp, #16
   2ba08:	bd10      	pop	{r4, pc}
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
   2ba0a:	2410      	movs	r4, #16
   2ba0c:	9400      	str	r4, [sp, #0]
   2ba0e:	3301      	adds	r3, #1
   2ba10:	e7f7      	b.n	2ba02 <bt_gatt_attr_read_service+0x20>

0002ba12 <cf_read>:
{
   2ba12:	b530      	push	{r4, r5, lr}
   2ba14:	b085      	sub	sp, #20
   2ba16:	461d      	mov	r5, r3
	uint8_t data[1] = {};
   2ba18:	2300      	movs	r3, #0
{
   2ba1a:	4614      	mov	r4, r2
	uint8_t data[1] = {};
   2ba1c:	f88d 300c 	strb.w	r3, [sp, #12]
	cfg = find_cf_cfg(conn);
   2ba20:	f7f0 fa3e 	bl	1bea0 <find_cf_cfg>
	if (cfg) {
   2ba24:	b110      	cbz	r0, 2ba2c <cf_read+0x1a>
		memcpy(data, cfg->data, sizeof(data));
   2ba26:	7a03      	ldrb	r3, [r0, #8]
   2ba28:	f88d 300c 	strb.w	r3, [sp, #12]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2ba2c:	2301      	movs	r3, #1
   2ba2e:	9300      	str	r3, [sp, #0]
   2ba30:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   2ba34:	ab03      	add	r3, sp, #12
   2ba36:	4629      	mov	r1, r5
   2ba38:	4620      	mov	r0, r4
   2ba3a:	f7ff ffa6 	bl	2b98a <bt_gatt_attr_read.constprop.0>
}
   2ba3e:	b005      	add	sp, #20
   2ba40:	bd30      	pop	{r4, r5, pc}

0002ba42 <read_name>:
{
   2ba42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ba46:	4614      	mov	r4, r2
   2ba48:	461d      	mov	r5, r3
   2ba4a:	f8bd 7018 	ldrh.w	r7, [sp, #24]
	const char *name = bt_get_name();
   2ba4e:	f7ed f817 	bl	18a80 <bt_get_name>
   2ba52:	4606      	mov	r6, r0
				 strlen(name));
   2ba54:	f7e0 fcae 	bl	c3b4 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2ba58:	b280      	uxth	r0, r0
   2ba5a:	9006      	str	r0, [sp, #24]
   2ba5c:	4633      	mov	r3, r6
   2ba5e:	463a      	mov	r2, r7
   2ba60:	4629      	mov	r1, r5
   2ba62:	4620      	mov	r0, r4
}
   2ba64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2ba68:	f7ff bf8f 	b.w	2b98a <bt_gatt_attr_read.constprop.0>

0002ba6c <read_appearance>:
{
   2ba6c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   2ba6e:	4619      	mov	r1, r3
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   2ba70:	2300      	movs	r3, #0
   2ba72:	f8ad 300e 	strh.w	r3, [sp, #14]
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2ba76:	2302      	movs	r3, #2
   2ba78:	9300      	str	r3, [sp, #0]
{
   2ba7a:	4610      	mov	r0, r2
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2ba7c:	f10d 030e 	add.w	r3, sp, #14
   2ba80:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2ba84:	f7ff ff81 	bl	2b98a <bt_gatt_attr_read.constprop.0>
}
   2ba88:	b005      	add	sp, #20
   2ba8a:	f85d fb04 	ldr.w	pc, [sp], #4

0002ba8e <gatt_find_type_encode>:
{
   2ba8e:	b538      	push	{r3, r4, r5, lr}
   2ba90:	f100 0508 	add.w	r5, r0, #8
   2ba94:	2106      	movs	r1, #6
   2ba96:	4628      	mov	r0, r5
   2ba98:	4614      	mov	r4, r2
   2ba9a:	f7f4 fbdf 	bl	2025c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->start_handle);
   2ba9e:	8923      	ldrh	r3, [r4, #8]
   2baa0:	8003      	strh	r3, [r0, #0]
	req->end_handle = sys_cpu_to_le16(params->end_handle);
   2baa2:	89e3      	ldrh	r3, [r4, #14]
   2baa4:	8043      	strh	r3, [r0, #2]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2baa6:	7c23      	ldrb	r3, [r4, #16]
	switch (params->uuid->type) {
   2baa8:	6821      	ldr	r1, [r4, #0]
	if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2baaa:	2b00      	cmp	r3, #0
	req->type = sys_cpu_to_le16(uuid_val);
   2baac:	f642 0301 	movw	r3, #10241	; 0x2801
   2bab0:	bf08      	it	eq
   2bab2:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
   2bab6:	8083      	strh	r3, [r0, #4]
	switch (params->uuid->type) {
   2bab8:	780b      	ldrb	r3, [r1, #0]
   2baba:	b11b      	cbz	r3, 2bac4 <gatt_find_type_encode+0x36>
   2babc:	2b02      	cmp	r3, #2
   2babe:	d006      	beq.n	2bace <gatt_find_type_encode+0x40>
}
   2bac0:	2000      	movs	r0, #0
   2bac2:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_add_le16(&buf->b, val);
   2bac4:	8849      	ldrh	r1, [r1, #2]
   2bac6:	4628      	mov	r0, r5
   2bac8:	f000 fae2 	bl	2c090 <net_buf_simple_add_le16>
}
   2bacc:	e7f8      	b.n	2bac0 <gatt_find_type_encode+0x32>
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2bace:	2210      	movs	r2, #16
   2bad0:	3101      	adds	r1, #1
   2bad2:	4628      	mov	r0, r5
   2bad4:	f000 fad0 	bl	2c078 <net_buf_simple_add_mem>
   2bad8:	e7f2      	b.n	2bac0 <gatt_find_type_encode+0x32>

0002bada <clear_cf_cfg>:
{
   2bada:	b513      	push	{r0, r1, r4, lr}
   2badc:	4602      	mov	r2, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2bade:	2400      	movs	r4, #0
   2bae0:	4669      	mov	r1, sp
   2bae2:	3001      	adds	r0, #1
   2bae4:	9400      	str	r4, [sp, #0]
   2bae6:	f8cd 4003 	str.w	r4, [sp, #3]
   2baea:	f7ff ff21 	bl	2b930 <bt_addr_le_copy>
__ssp_bos_icheck3(memset, void *, int)
   2baee:	7214      	strb	r4, [r2, #8]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2baf0:	320c      	adds	r2, #12
   2baf2:	f3bf 8f5b 	dmb	ish
   2baf6:	e852 3f00 	ldrex	r3, [r2]
   2bafa:	e842 4100 	strex	r1, r4, [r2]
   2bafe:	2900      	cmp	r1, #0
   2bb00:	d1f9      	bne.n	2baf6 <clear_cf_cfg+0x1c>
   2bb02:	f3bf 8f5b 	dmb	ish
}
   2bb06:	b002      	add	sp, #8
   2bb08:	bd10      	pop	{r4, pc}

0002bb0a <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   2bb0a:	2301      	movs	r3, #1
   2bb0c:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2bb0e:	f3bf 8f5b 	dmb	ish
   2bb12:	e850 2f00 	ldrex	r2, [r0]
   2bb16:	431a      	orrs	r2, r3
   2bb18:	e840 2100 	strex	r1, r2, [r0]
   2bb1c:	2900      	cmp	r1, #0
   2bb1e:	d1f8      	bne.n	2bb12 <atomic_set_bit+0x8>
   2bb20:	f3bf 8f5b 	dmb	ish
}
   2bb24:	4770      	bx	lr

0002bb26 <sc_restore_rsp>:
{
   2bb26:	b538      	push	{r3, r4, r5, lr}
   2bb28:	4605      	mov	r5, r0
   2bb2a:	4614      	mov	r4, r2
	cfg = find_cf_cfg(conn);
   2bb2c:	f7f0 f9b8 	bl	1bea0 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2bb30:	b130      	cbz	r0, 2bb40 <sc_restore_rsp+0x1a>
   2bb32:	7a03      	ldrb	r3, [r0, #8]
   2bb34:	07db      	lsls	r3, r3, #31
   2bb36:	d503      	bpl.n	2bb40 <sc_restore_rsp+0x1a>
		atomic_set_bit(cfg->flags, CF_CHANGE_AWARE);
   2bb38:	2100      	movs	r1, #0
   2bb3a:	300c      	adds	r0, #12
   2bb3c:	f7ff ffe5 	bl	2bb0a <atomic_set_bit>
	if (!err && IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
   2bb40:	b934      	cbnz	r4, 2bb50 <sc_restore_rsp+0x2a>
		struct gatt_sc_cfg *sc_cfg = find_sc_cfg(conn->id, &conn->le.dst);
   2bb42:	7a28      	ldrb	r0, [r5, #8]
   2bb44:	f105 0190 	add.w	r1, r5, #144	; 0x90
   2bb48:	f7f0 f9c8 	bl	1bedc <find_sc_cfg>
		if (sc_cfg) {
   2bb4c:	b100      	cbz	r0, 2bb50 <sc_restore_rsp+0x2a>
   2bb4e:	6084      	str	r4, [r0, #8]
}
   2bb50:	bd38      	pop	{r3, r4, r5, pc}

0002bb52 <gatt_write_ccc_buf>:
{
   2bb52:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2bb54:	f100 0508 	add.w	r5, r0, #8
   2bb58:	2102      	movs	r1, #2
   2bb5a:	4628      	mov	r0, r5
   2bb5c:	4614      	mov	r4, r2
   2bb5e:	f7f4 fb7d 	bl	2025c <net_buf_simple_add>
	write_req->handle = sys_cpu_to_le16(params->ccc_handle);
   2bb62:	8963      	ldrh	r3, [r4, #10]
	net_buf_simple_add_le16(&buf->b, val);
   2bb64:	89a1      	ldrh	r1, [r4, #12]
   2bb66:	8003      	strh	r3, [r0, #0]
   2bb68:	3410      	adds	r4, #16
   2bb6a:	4628      	mov	r0, r5
   2bb6c:	f000 fa90 	bl	2c090 <net_buf_simple_add_le16>
   2bb70:	f3bf 8f5b 	dmb	ish
   2bb74:	e854 3f00 	ldrex	r3, [r4]
   2bb78:	f043 0304 	orr.w	r3, r3, #4
   2bb7c:	e844 3200 	strex	r2, r3, [r4]
   2bb80:	2a00      	cmp	r2, #0
   2bb82:	d1f7      	bne.n	2bb74 <gatt_write_ccc_buf+0x22>
   2bb84:	f3bf 8f5b 	dmb	ish
}
   2bb88:	2000      	movs	r0, #0
   2bb8a:	bd38      	pop	{r3, r4, r5, pc}

0002bb8c <gatt_read_uuid_encode>:
{
   2bb8c:	b538      	push	{r3, r4, r5, lr}
	return net_buf_simple_add(&buf->b, len);
   2bb8e:	f100 0408 	add.w	r4, r0, #8
   2bb92:	2104      	movs	r1, #4
   2bb94:	4620      	mov	r0, r4
   2bb96:	4615      	mov	r5, r2
   2bb98:	f7f4 fb60 	bl	2025c <net_buf_simple_add>
	req->start_handle = sys_cpu_to_le16(params->by_uuid.start_handle);
   2bb9c:	892b      	ldrh	r3, [r5, #8]
   2bb9e:	8003      	strh	r3, [r0, #0]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   2bba0:	68e9      	ldr	r1, [r5, #12]
	req->end_handle = sys_cpu_to_le16(params->by_uuid.end_handle);
   2bba2:	896b      	ldrh	r3, [r5, #10]
   2bba4:	8043      	strh	r3, [r0, #2]
	if (params->by_uuid.uuid->type == BT_UUID_TYPE_16) {
   2bba6:	780b      	ldrb	r3, [r1, #0]
   2bba8:	b92b      	cbnz	r3, 2bbb6 <gatt_read_uuid_encode+0x2a>
	net_buf_simple_add_le16(&buf->b, val);
   2bbaa:	8849      	ldrh	r1, [r1, #2]
   2bbac:	4620      	mov	r0, r4
   2bbae:	f000 fa6f 	bl	2c090 <net_buf_simple_add_le16>
}
   2bbb2:	2000      	movs	r0, #0
   2bbb4:	bd38      	pop	{r3, r4, r5, pc}
	return net_buf_simple_add_mem(&buf->b, mem, len);
   2bbb6:	2210      	movs	r2, #16
   2bbb8:	3101      	adds	r1, #1
   2bbba:	4620      	mov	r0, r4
   2bbbc:	f000 fa5c 	bl	2c078 <net_buf_simple_add_mem>
   2bbc0:	e7f7      	b.n	2bbb2 <gatt_read_uuid_encode+0x26>

0002bbc2 <gatt_sub_remove>:
{
   2bbc2:	b538      	push	{r3, r4, r5, lr}
   2bbc4:	460c      	mov	r4, r1
	if (params) {
   2bbc6:	4619      	mov	r1, r3
   2bbc8:	b16b      	cbz	r3, 2bbe6 <gatt_sub_remove+0x24>
		sys_slist_remove(&sub->list, prev, &params->node);
   2bbca:	f103 0514 	add.w	r5, r3, #20
Z_GENLIST_REMOVE(slist, snode)
   2bbce:	695b      	ldr	r3, [r3, #20]
   2bbd0:	b982      	cbnz	r2, 2bbf4 <gatt_sub_remove+0x32>
   2bbd2:	68e2      	ldr	r2, [r4, #12]
	list->head = node;
   2bbd4:	60a3      	str	r3, [r4, #8]
Z_GENLIST_REMOVE(slist, snode)
   2bbd6:	4295      	cmp	r5, r2
   2bbd8:	d100      	bne.n	2bbdc <gatt_sub_remove+0x1a>
	list->tail = node;
   2bbda:	60e3      	str	r3, [r4, #12]
	parent->next = child;
   2bbdc:	2300      	movs	r3, #0
		params->notify(conn, params, NULL, 0);
   2bbde:	680d      	ldr	r5, [r1, #0]
   2bbe0:	614b      	str	r3, [r1, #20]
   2bbe2:	461a      	mov	r2, r3
   2bbe4:	47a8      	blx	r5
	if (gatt_sub_is_empty(sub)) {
   2bbe6:	68a3      	ldr	r3, [r4, #8]
   2bbe8:	b953      	cbnz	r3, 2bc00 <gatt_sub_remove+0x3e>
		gatt_sub_free(sub);
   2bbea:	4620      	mov	r0, r4
}
   2bbec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		gatt_sub_free(sub);
   2bbf0:	f7f0 ba10 	b.w	1c014 <gatt_sub_free>
   2bbf4:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   2bbf6:	68e3      	ldr	r3, [r4, #12]
   2bbf8:	429d      	cmp	r5, r3
	list->tail = node;
   2bbfa:	bf08      	it	eq
   2bbfc:	60e2      	streq	r2, [r4, #12]
}
   2bbfe:	e7ed      	b.n	2bbdc <gatt_sub_remove+0x1a>
}
   2bc00:	bd38      	pop	{r3, r4, r5, pc}

0002bc02 <gatt_write_ccc_rsp>:
{
   2bc02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2bc06:	9c06      	ldr	r4, [sp, #24]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bc08:	f3bf 8f5b 	dmb	ish
   2bc0c:	4606      	mov	r6, r0
   2bc0e:	460d      	mov	r5, r1
   2bc10:	f104 0310 	add.w	r3, r4, #16
   2bc14:	e853 2f00 	ldrex	r2, [r3]
   2bc18:	f022 0204 	bic.w	r2, r2, #4
   2bc1c:	e843 2100 	strex	r1, r2, [r3]
   2bc20:	2900      	cmp	r1, #0
   2bc22:	d1f7      	bne.n	2bc14 <gatt_write_ccc_rsp+0x12>
   2bc24:	f3bf 8f5b 	dmb	ish
	if (err) {
   2bc28:	b1dd      	cbz	r5, 2bc62 <gatt_write_ccc_rsp+0x60>
		sub = gatt_sub_find(conn);
   2bc2a:	f7f0 f967 	bl	1befc <gatt_sub_find>
		if (!sub) {
   2bc2e:	4601      	mov	r1, r0
   2bc30:	b300      	cbz	r0, 2bc74 <gatt_write_ccc_rsp+0x72>
		SYS_SLIST_FOR_EACH_NODE_SAFE(&sub->list, node, tmp) {
   2bc32:	6883      	ldr	r3, [r0, #8]
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bc34:	b143      	cbz	r3, 2bc48 <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2bc36:	681a      	ldr	r2, [r3, #0]
			if (node == &params->node) {
   2bc38:	f104 0014 	add.w	r0, r4, #20
   2bc3c:	4283      	cmp	r3, r0
   2bc3e:	d10b      	bne.n	2bc58 <gatt_write_ccc_rsp+0x56>
				gatt_sub_remove(conn, sub, tmp, params);
   2bc40:	4623      	mov	r3, r4
   2bc42:	4630      	mov	r0, r6
   2bc44:	f7ff ffbd 	bl	2bbc2 <gatt_sub_remove>
	if (params->write) {
   2bc48:	6863      	ldr	r3, [r4, #4]
   2bc4a:	b19b      	cbz	r3, 2bc74 <gatt_write_ccc_rsp+0x72>
		params->write(conn, err, NULL);
   2bc4c:	4629      	mov	r1, r5
   2bc4e:	4630      	mov	r0, r6
   2bc50:	2200      	movs	r2, #0
}
   2bc52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		params->write(conn, err, NULL);
   2bc56:	4718      	bx	r3
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bc58:	2a00      	cmp	r2, #0
   2bc5a:	d0f5      	beq.n	2bc48 <gatt_write_ccc_rsp+0x46>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2bc5c:	4613      	mov	r3, r2
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bc5e:	6812      	ldr	r2, [r2, #0]
   2bc60:	e7ec      	b.n	2bc3c <gatt_write_ccc_rsp+0x3a>
	} else if (!params->value) {
   2bc62:	89a3      	ldrh	r3, [r4, #12]
   2bc64:	2b00      	cmp	r3, #0
   2bc66:	d1ef      	bne.n	2bc48 <gatt_write_ccc_rsp+0x46>
		params->notify(conn, params, NULL, 0);
   2bc68:	6827      	ldr	r7, [r4, #0]
   2bc6a:	462b      	mov	r3, r5
   2bc6c:	462a      	mov	r2, r5
   2bc6e:	4621      	mov	r1, r4
   2bc70:	47b8      	blx	r7
   2bc72:	e7e9      	b.n	2bc48 <gatt_write_ccc_rsp+0x46>
}
   2bc74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002bc78 <gatt_req_send>:
{
   2bc78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2bc7c:	4606      	mov	r6, r0
   2bc7e:	4688      	mov	r8, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2bc80:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
   2bc84:	2100      	movs	r1, #0
{
   2bc86:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
   2bc8a:	4614      	mov	r4, r2
   2bc8c:	461f      	mov	r7, r3
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
   2bc8e:	f7ef ff39 	bl	1bb04 <bt_att_req_alloc>
	if (!req) {
   2bc92:	4605      	mov	r5, r0
   2bc94:	b920      	cbnz	r0, 2bca0 <gatt_req_send+0x28>
		return -ENOMEM;
   2bc96:	f06f 040b 	mvn.w	r4, #11
}
   2bc9a:	4620      	mov	r0, r4
   2bc9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	req->func = func;
   2bca0:	f8c0 8004 	str.w	r8, [r0, #4]
	req->user_data = params;
   2bca4:	60c4      	str	r4, [r0, #12]
	buf = bt_att_create_pdu(conn, op, len);
   2bca6:	f89d 1020 	ldrb.w	r1, [sp, #32]
   2bcaa:	464a      	mov	r2, r9
   2bcac:	4630      	mov	r0, r6
   2bcae:	f7ef fc8b 	bl	1b5c8 <bt_att_create_pdu>
	if (!buf) {
   2bcb2:	b918      	cbnz	r0, 2bcbc <gatt_req_send+0x44>
		bt_att_req_free(req);
   2bcb4:	4628      	mov	r0, r5
   2bcb6:	f7ef ff3b 	bl	1bb30 <bt_att_req_free>
   2bcba:	e7ec      	b.n	2bc96 <gatt_req_send+0x1e>
	err = encode(buf, len, params);
   2bcbc:	4622      	mov	r2, r4
	req->buf = buf;
   2bcbe:	60a8      	str	r0, [r5, #8]
	err = encode(buf, len, params);
   2bcc0:	4649      	mov	r1, r9
   2bcc2:	47b8      	blx	r7
	if (err) {
   2bcc4:	4604      	mov	r4, r0
   2bcc6:	b118      	cbz	r0, 2bcd0 <gatt_req_send+0x58>
		bt_att_req_free(req);
   2bcc8:	4628      	mov	r0, r5
   2bcca:	f7ef ff31 	bl	1bb30 <bt_att_req_free>
   2bcce:	e7e4      	b.n	2bc9a <gatt_req_send+0x22>
	err = bt_att_req_send(conn, req);
   2bcd0:	4629      	mov	r1, r5
   2bcd2:	4630      	mov	r0, r6
   2bcd4:	f7f0 f87a 	bl	1bdcc <bt_att_req_send>
	if (err) {
   2bcd8:	4604      	mov	r4, r0
   2bcda:	2800      	cmp	r0, #0
   2bcdc:	d0dd      	beq.n	2bc9a <gatt_req_send+0x22>
   2bcde:	e7f3      	b.n	2bcc8 <gatt_req_send+0x50>

0002bce0 <bt_gatt_attr_value_handle>:
{
   2bce0:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bce2:	4604      	mov	r4, r0
   2bce4:	b910      	cbnz	r0, 2bcec <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   2bce6:	2000      	movs	r0, #0
}
   2bce8:	b002      	add	sp, #8
   2bcea:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   2bcec:	2300      	movs	r3, #0
   2bcee:	f88d 3004 	strb.w	r3, [sp, #4]
   2bcf2:	6800      	ldr	r0, [r0, #0]
   2bcf4:	f642 0303 	movw	r3, #10243	; 0x2803
   2bcf8:	a901      	add	r1, sp, #4
   2bcfa:	f8ad 3006 	strh.w	r3, [sp, #6]
   2bcfe:	f7fe fd6f 	bl	2a7e0 <bt_uuid_cmp>
   2bd02:	2800      	cmp	r0, #0
   2bd04:	d1ef      	bne.n	2bce6 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   2bd06:	68e3      	ldr	r3, [r4, #12]
   2bd08:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   2bd0a:	2800      	cmp	r0, #0
   2bd0c:	d1ec      	bne.n	2bce8 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   2bd0e:	4620      	mov	r0, r4
   2bd10:	f7f0 fb48 	bl	1c3a4 <bt_gatt_attr_get_handle>
   2bd14:	3001      	adds	r0, #1
   2bd16:	b280      	uxth	r0, r0
	return handle;
   2bd18:	e7e6      	b.n	2bce8 <bt_gatt_attr_value_handle+0x8>

0002bd1a <bt_gatt_attr_read_chrc>:
{
   2bd1a:	b570      	push	{r4, r5, r6, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   2bd1c:	68ce      	ldr	r6, [r1, #12]
{
   2bd1e:	b088      	sub	sp, #32
   2bd20:	4608      	mov	r0, r1
   2bd22:	461d      	mov	r5, r3
	pdu.properties = chrc->properties;
   2bd24:	79b3      	ldrb	r3, [r6, #6]
   2bd26:	f88d 300c 	strb.w	r3, [sp, #12]
{
   2bd2a:	4614      	mov	r4, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   2bd2c:	f7ff ffd8 	bl	2bce0 <bt_gatt_attr_value_handle>
   2bd30:	f8ad 000d 	strh.w	r0, [sp, #13]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   2bd34:	6830      	ldr	r0, [r6, #0]
   2bd36:	7803      	ldrb	r3, [r0, #0]
   2bd38:	b96b      	cbnz	r3, 2bd56 <bt_gatt_attr_read_chrc+0x3c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   2bd3a:	8843      	ldrh	r3, [r0, #2]
   2bd3c:	f8ad 300f 	strh.w	r3, [sp, #15]
		value_len += 2U;
   2bd40:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   2bd42:	9300      	str	r3, [sp, #0]
   2bd44:	f8bd 2030 	ldrh.w	r2, [sp, #48]	; 0x30
   2bd48:	ab03      	add	r3, sp, #12
   2bd4a:	4629      	mov	r1, r5
   2bd4c:	4620      	mov	r0, r4
   2bd4e:	f7ff fe1c 	bl	2b98a <bt_gatt_attr_read.constprop.0>
}
   2bd52:	b008      	add	sp, #32
   2bd54:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   2bd56:	1c43      	adds	r3, r0, #1
   2bd58:	f10d 020f 	add.w	r2, sp, #15
   2bd5c:	3011      	adds	r0, #17
   2bd5e:	f853 1b04 	ldr.w	r1, [r3], #4
   2bd62:	f842 1b04 	str.w	r1, [r2], #4
   2bd66:	4283      	cmp	r3, r0
   2bd68:	d1f9      	bne.n	2bd5e <bt_gatt_attr_read_chrc+0x44>
		value_len += 16U;
   2bd6a:	2313      	movs	r3, #19
   2bd6c:	e7e9      	b.n	2bd42 <bt_gatt_attr_read_chrc+0x28>

0002bd6e <bt_gatt_foreach_attr>:
{
   2bd6e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2bd70:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2bd74:	2300      	movs	r3, #0
   2bd76:	9300      	str	r3, [sp, #0]
   2bd78:	461a      	mov	r2, r3
   2bd7a:	f7f0 fb5f 	bl	1c43c <bt_gatt_foreach_attr_type>
}
   2bd7e:	b005      	add	sp, #20
   2bd80:	f85d fb04 	ldr.w	pc, [sp], #4

0002bd84 <db_hash_process>:
	db_hash_gen(true);
   2bd84:	f7f0 bbd0 	b.w	1c528 <db_hash_gen.isra.0>

0002bd88 <bt_gatt_get_mtu>:
	return bt_att_get_mtu(conn);
   2bd88:	f7ff bbfa 	b.w	2b580 <bt_att_get_mtu>

0002bd8c <bt_gatt_check_perm>:
	if ((mask & BT_GATT_PERM_READ) &&
   2bd8c:	07d3      	lsls	r3, r2, #31
{
   2bd8e:	b510      	push	{r4, lr}
   2bd90:	7c8c      	ldrb	r4, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   2bd92:	d504      	bpl.n	2bd9e <bt_gatt_check_perm+0x12>
   2bd94:	f014 0f15 	tst.w	r4, #21
   2bd98:	d017      	beq.n	2bdca <bt_gatt_check_perm+0x3e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   2bd9a:	684b      	ldr	r3, [r1, #4]
   2bd9c:	b1ab      	cbz	r3, 2bdca <bt_gatt_check_perm+0x3e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   2bd9e:	0793      	lsls	r3, r2, #30
   2bda0:	d504      	bpl.n	2bdac <bt_gatt_check_perm+0x20>
   2bda2:	f014 0f2a 	tst.w	r4, #42	; 0x2a
   2bda6:	d012      	beq.n	2bdce <bt_gatt_check_perm+0x42>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   2bda8:	688b      	ldr	r3, [r1, #8]
   2bdaa:	b183      	cbz	r3, 2bdce <bt_gatt_check_perm+0x42>
	mask &= attr->perm;
   2bdac:	4014      	ands	r4, r2
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   2bdae:	f014 0f30 	tst.w	r4, #48	; 0x30
   2bdb2:	d104      	bne.n	2bdbe <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   2bdb4:	f014 000c 	ands.w	r0, r4, #12
   2bdb8:	bf18      	it	ne
   2bdba:	200f      	movne	r0, #15
}
   2bdbc:	bd10      	pop	{r4, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   2bdbe:	f7fe ff5b 	bl	2ac78 <bt_conn_get_security>
   2bdc2:	2802      	cmp	r0, #2
   2bdc4:	d8f6      	bhi.n	2bdb4 <bt_gatt_check_perm+0x28>
			return BT_ATT_ERR_AUTHENTICATION;
   2bdc6:	2005      	movs	r0, #5
   2bdc8:	e7f8      	b.n	2bdbc <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   2bdca:	2002      	movs	r0, #2
   2bdcc:	e7f6      	b.n	2bdbc <bt_gatt_check_perm+0x30>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   2bdce:	2003      	movs	r0, #3
   2bdd0:	e7f4      	b.n	2bdbc <bt_gatt_check_perm+0x30>

0002bdd2 <gatt_discover_next>:
{
   2bdd2:	b570      	push	{r4, r5, r6, lr}
   2bdd4:	4605      	mov	r5, r0
   2bdd6:	4614      	mov	r4, r2
	if (!last_handle)
   2bdd8:	b929      	cbnz	r1, 2bde6 <gatt_discover_next+0x14>
	if (!bt_gatt_discover(conn, params)) {
   2bdda:	4621      	mov	r1, r4
   2bddc:	4628      	mov	r0, r5
   2bdde:	f7f0 feff 	bl	1cbe0 <bt_gatt_discover>
   2bde2:	b928      	cbnz	r0, 2bdf0 <gatt_discover_next+0x1e>
}
   2bde4:	bd70      	pop	{r4, r5, r6, pc}
	if (params->start_handle < UINT16_MAX) {
   2bde6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   2bdea:	4291      	cmp	r1, r2
   2bdec:	d107      	bne.n	2bdfe <gatt_discover_next+0x2c>
	params->start_handle = last_handle;
   2bdee:	8121      	strh	r1, [r4, #8]
	params->func(conn, NULL, params);
   2bdf0:	6863      	ldr	r3, [r4, #4]
   2bdf2:	4622      	mov	r2, r4
   2bdf4:	4628      	mov	r0, r5
   2bdf6:	2100      	movs	r1, #0
}
   2bdf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	params->func(conn, NULL, params);
   2bdfc:	4718      	bx	r3
	if (params->start_handle > params->end_handle) {
   2bdfe:	89e2      	ldrh	r2, [r4, #14]
		params->start_handle++;
   2be00:	1c4b      	adds	r3, r1, #1
   2be02:	b29b      	uxth	r3, r3
	if (params->start_handle > params->end_handle) {
   2be04:	429a      	cmp	r2, r3
		params->start_handle++;
   2be06:	8123      	strh	r3, [r4, #8]
	if (params->start_handle > params->end_handle) {
   2be08:	d2e7      	bcs.n	2bdda <gatt_discover_next+0x8>
   2be0a:	e7f1      	b.n	2bdf0 <gatt_discover_next+0x1e>

0002be0c <gatt_find_type_rsp>:
{
   2be0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2be10:	b088      	sub	sp, #32
   2be12:	4607      	mov	r7, r0
   2be14:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
   2be18:	4614      	mov	r4, r2
	if (err || (length % sizeof(struct bt_att_handle_group) != 0)) {
   2be1a:	b911      	cbnz	r1, 2be22 <gatt_find_type_rsp+0x16>
   2be1c:	f013 0803 	ands.w	r8, r3, #3
   2be20:	d008      	beq.n	2be34 <gatt_find_type_rsp+0x28>
	params->func(conn, NULL, params);
   2be22:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2be26:	464a      	mov	r2, r9
   2be28:	2100      	movs	r1, #0
   2be2a:	4638      	mov	r0, r7
   2be2c:	4798      	blx	r3
}
   2be2e:	b008      	add	sp, #32
   2be30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	for (uint8_t i = 0U; i < count; i++) {
   2be34:	f3c3 0387 	ubfx	r3, r3, #2, #8
   2be38:	eb02 0583 	add.w	r5, r2, r3, lsl #2
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2be3c:	4646      	mov	r6, r8
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2be3e:	f642 0a01 	movw	sl, #10241	; 0x2801
	for (uint8_t i = 0U; i < count; i++) {
   2be42:	42ac      	cmp	r4, r5
   2be44:	d105      	bne.n	2be52 <gatt_find_type_rsp+0x46>
	gatt_discover_next(conn, end_handle, params);
   2be46:	464a      	mov	r2, r9
   2be48:	4641      	mov	r1, r8
   2be4a:	4638      	mov	r0, r7
   2be4c:	f7ff ffc1 	bl	2bdd2 <gatt_discover_next>
	return;
   2be50:	e7ed      	b.n	2be2e <gatt_find_type_rsp+0x22>
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2be52:	8863      	ldrh	r3, [r4, #2]
		if (params->type == BT_GATT_DISCOVER_PRIMARY) {
   2be54:	f899 1010 	ldrb.w	r1, [r9, #16]
		value.end_handle = end_handle;
   2be58:	f8ad 3008 	strh.w	r3, [sp, #8]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2be5c:	2900      	cmp	r1, #0
		end_handle = sys_le16_to_cpu(rsp[i].end_handle);
   2be5e:	fa1f f883 	uxth.w	r8, r3
		value.uuid = params->uuid;
   2be62:	f8d9 3000 	ldr.w	r3, [r9]
		start_handle = sys_le16_to_cpu(rsp[i].start_handle);
   2be66:	8822      	ldrh	r2, [r4, #0]
		value.uuid = params->uuid;
   2be68:	9301      	str	r3, [sp, #4]
			uuid_svc.val = BT_UUID_GATT_SECONDARY_VAL;
   2be6a:	bf0c      	ite	eq
   2be6c:	f44f 5120 	moveq.w	r1, #10240	; 0x2800
   2be70:	4651      	movne	r1, sl
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2be72:	ab01      	add	r3, sp, #4
   2be74:	f8ad 1002 	strh.w	r1, [sp, #2]
   2be78:	9306      	str	r3, [sp, #24]
		attr.handle = start_handle;
   2be7a:	f8ad 201c 	strh.w	r2, [sp, #28]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2be7e:	e9cd 6604 	strd	r6, r6, [sp, #16]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2be82:	f8d9 3004 	ldr.w	r3, [r9, #4]
		uuid_svc.uuid.type = BT_UUID_TYPE_16;
   2be86:	f88d 6000 	strb.w	r6, [sp]
		attr = (struct bt_gatt_attr)BT_GATT_ATTRIBUTE(&uuid_svc.uuid, 0,
   2be8a:	f8cd d00c 	str.w	sp, [sp, #12]
   2be8e:	f88d 601e 	strb.w	r6, [sp, #30]
		if (params->func(conn, &attr, params) == BT_GATT_ITER_STOP) {
   2be92:	464a      	mov	r2, r9
   2be94:	a903      	add	r1, sp, #12
   2be96:	4638      	mov	r0, r7
   2be98:	4798      	blx	r3
   2be9a:	3404      	adds	r4, #4
   2be9c:	2800      	cmp	r0, #0
   2be9e:	d1d0      	bne.n	2be42 <gatt_find_type_rsp+0x36>
   2bea0:	e7c5      	b.n	2be2e <gatt_find_type_rsp+0x22>

0002bea2 <bt_gatt_notification>:
{
   2bea2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2bea6:	4607      	mov	r7, r0
   2bea8:	4688      	mov	r8, r1
   2beaa:	4691      	mov	r9, r2
   2beac:	469a      	mov	sl, r3
	sub = gatt_sub_find(conn);
   2beae:	f7f0 f825 	bl	1befc <gatt_sub_find>
	if (!sub) {
   2beb2:	b1f8      	cbz	r0, 2bef4 <bt_gatt_notification+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2beb4:	6883      	ldr	r3, [r0, #8]
   2beb6:	b1eb      	cbz	r3, 2bef4 <bt_gatt_notification+0x52>
   2beb8:	f1b3 0614 	subs.w	r6, r3, #20
   2bebc:	d01a      	beq.n	2bef4 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2bebe:	681c      	ldr	r4, [r3, #0]
   2bec0:	b104      	cbz	r4, 2bec4 <bt_gatt_notification+0x22>
   2bec2:	3c14      	subs	r4, #20
		if (handle != params->value_handle) {
   2bec4:	8933      	ldrh	r3, [r6, #8]
   2bec6:	4543      	cmp	r3, r8
   2bec8:	d10a      	bne.n	2bee0 <bt_gatt_notification+0x3e>
		if (params->notify(conn, params, data, length) ==
   2beca:	6835      	ldr	r5, [r6, #0]
   2becc:	4653      	mov	r3, sl
   2bece:	464a      	mov	r2, r9
   2bed0:	4631      	mov	r1, r6
   2bed2:	4638      	mov	r0, r7
   2bed4:	47a8      	blx	r5
   2bed6:	b918      	cbnz	r0, 2bee0 <bt_gatt_notification+0x3e>
			bt_gatt_unsubscribe(conn, params);
   2bed8:	4631      	mov	r1, r6
   2beda:	4638      	mov	r0, r7
   2bedc:	f7f1 fe3a 	bl	1db54 <bt_gatt_unsubscribe>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&sub->list, params, tmp, node) {
   2bee0:	b144      	cbz	r4, 2bef4 <bt_gatt_notification+0x52>
Z_GENLIST_PEEK_NEXT(slist, snode)
   2bee2:	f114 0514 	adds.w	r5, r4, #20
   2bee6:	d002      	beq.n	2beee <bt_gatt_notification+0x4c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2bee8:	6965      	ldr	r5, [r4, #20]
   2beea:	b105      	cbz	r5, 2beee <bt_gatt_notification+0x4c>
   2beec:	3d14      	subs	r5, #20
{
   2beee:	4626      	mov	r6, r4
   2bef0:	462c      	mov	r4, r5
   2bef2:	e7e7      	b.n	2bec4 <bt_gatt_notification+0x22>
}
   2bef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0002bef8 <bt_gatt_change_aware>:
{
   2bef8:	b510      	push	{r4, lr}
   2befa:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   2befc:	f7ef ffd0 	bl	1bea0 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2bf00:	4603      	mov	r3, r0
   2bf02:	b910      	cbnz	r0, 2bf0a <bt_gatt_change_aware+0x12>
		return true;
   2bf04:	2401      	movs	r4, #1
}
   2bf06:	4620      	mov	r0, r4
   2bf08:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   2bf0a:	7a02      	ldrb	r2, [r0, #8]
   2bf0c:	07d2      	lsls	r2, r2, #31
   2bf0e:	d5f9      	bpl.n	2bf04 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2bf10:	f3bf 8f5b 	dmb	ish
   2bf14:	68d9      	ldr	r1, [r3, #12]
   2bf16:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   2bf1a:	f011 0101 	ands.w	r1, r1, #1
   2bf1e:	f100 000c 	add.w	r0, r0, #12
   2bf22:	d1ef      	bne.n	2bf04 <bt_gatt_change_aware+0xc>
	if (!req) {
   2bf24:	2c00      	cmp	r4, #0
   2bf26:	d0ee      	beq.n	2bf06 <bt_gatt_change_aware+0xe>
   2bf28:	f3bf 8f5b 	dmb	ish
   2bf2c:	68db      	ldr	r3, [r3, #12]
   2bf2e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   2bf32:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   2bf36:	079b      	lsls	r3, r3, #30
   2bf38:	d50e      	bpl.n	2bf58 <bt_gatt_change_aware+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2bf3a:	f3bf 8f5b 	dmb	ish
   2bf3e:	e850 3f00 	ldrex	r3, [r0]
   2bf42:	f023 0302 	bic.w	r3, r3, #2
   2bf46:	e840 3200 	strex	r2, r3, [r0]
   2bf4a:	2a00      	cmp	r2, #0
   2bf4c:	d1f7      	bne.n	2bf3e <bt_gatt_change_aware+0x46>
   2bf4e:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2bf52:	f7ff fdda 	bl	2bb0a <atomic_set_bit>
	return false;
   2bf56:	e7d6      	b.n	2bf06 <bt_gatt_change_aware+0xe>
	atomic_set_bit(cfg->flags, CF_OUT_OF_SYNC);
   2bf58:	2101      	movs	r1, #1
   2bf5a:	e7fa      	b.n	2bf52 <bt_gatt_change_aware+0x5a>

0002bf5c <bt_smp_recv>:
{
   2bf5c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	buf = bt_l2cap_create_pdu(NULL, 0);
   2bf5e:	2100      	movs	r1, #0
   2bf60:	f04f 32ff 	mov.w	r2, #4294967295
   2bf64:	f04f 33ff 	mov.w	r3, #4294967295
	struct bt_conn *conn = chan->conn;
   2bf68:	6807      	ldr	r7, [r0, #0]
	buf = bt_l2cap_create_pdu(NULL, 0);
   2bf6a:	4608      	mov	r0, r1
   2bf6c:	f7fe ff80 	bl	2ae70 <bt_l2cap_create_pdu_timeout>
	return net_buf_simple_add(&buf->b, len);
   2bf70:	f100 0608 	add.w	r6, r0, #8
   2bf74:	4604      	mov	r4, r0
   2bf76:	2101      	movs	r1, #1
   2bf78:	4630      	mov	r0, r6
   2bf7a:	f7f4 f96f 	bl	2025c <net_buf_simple_add>
	hdr->code = BT_SMP_CMD_PAIRING_FAIL;
   2bf7e:	2505      	movs	r5, #5
   2bf80:	7005      	strb	r5, [r0, #0]
   2bf82:	2101      	movs	r1, #1
   2bf84:	4630      	mov	r0, r6
   2bf86:	f7f4 f969 	bl	2025c <net_buf_simple_add>
   2bf8a:	2300      	movs	r3, #0
	rsp->reason = BT_SMP_ERR_PAIRING_NOTSUPP;
   2bf8c:	7005      	strb	r5, [r0, #0]
   2bf8e:	4622      	mov	r2, r4
   2bf90:	9300      	str	r3, [sp, #0]
   2bf92:	2106      	movs	r1, #6
   2bf94:	4638      	mov	r0, r7
   2bf96:	f7fe ff6e 	bl	2ae76 <bt_l2cap_send_cb>
	if (bt_l2cap_send(conn, BT_L2CAP_CID_SMP, buf)) {
   2bf9a:	b110      	cbz	r0, 2bfa2 <bt_smp_recv+0x46>
		net_buf_unref(buf);
   2bf9c:	4620      	mov	r0, r4
   2bf9e:	f7f4 f82d 	bl	1fffc <net_buf_unref>
}
   2bfa2:	2000      	movs	r0, #0
   2bfa4:	b003      	add	sp, #12
   2bfa6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002bfa8 <bt_smp_sign>:
   2bfa8:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2bfac:	4770      	bx	lr

0002bfae <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_fixed_chan, BT_L2CAP_CID_SMP, bt_smp_accept, NULL);

int bt_smp_init(void)
{
	return 0;
}
   2bfae:	2000      	movs	r0, #0
   2bfb0:	4770      	bx	lr

0002bfb2 <bt_addr_le_copy>:
{
   2bfb2:	4603      	mov	r3, r0
__ssp_bos_icheck3_restrict(memcpy, void *, const void *)
   2bfb4:	c903      	ldmia	r1, {r0, r1}
   2bfb6:	8099      	strh	r1, [r3, #4]
   2bfb8:	0c09      	lsrs	r1, r1, #16
   2bfba:	6018      	str	r0, [r3, #0]
   2bfbc:	7199      	strb	r1, [r3, #6]
}
   2bfbe:	4770      	bx	lr

0002bfc0 <data_cb>:
{
   2bfc0:	b508      	push	{r3, lr}
   2bfc2:	4603      	mov	r3, r0
   2bfc4:	4608      	mov	r0, r1
	switch (data->type) {
   2bfc6:	781a      	ldrb	r2, [r3, #0]
   2bfc8:	3a08      	subs	r2, #8
   2bfca:	2a01      	cmp	r2, #1
   2bfcc:	d808      	bhi.n	2bfe0 <data_cb+0x20>
		memcpy(name, data->data, MIN(data->data_len, NAME_LEN - 1));
   2bfce:	785a      	ldrb	r2, [r3, #1]
   2bfd0:	6859      	ldr	r1, [r3, #4]
   2bfd2:	2a1d      	cmp	r2, #29
   2bfd4:	bf28      	it	cs
   2bfd6:	221d      	movcs	r2, #29
   2bfd8:	f000 fe0d 	bl	2cbf6 <memcpy>
   2bfdc:	2000      	movs	r0, #0
}
   2bfde:	bd08      	pop	{r3, pc}
		return true;
   2bfe0:	2001      	movs	r0, #1
   2bfe2:	e7fc      	b.n	2bfde <data_cb+0x1e>

0002bfe4 <conn_addr_str>:
{
   2bfe4:	b530      	push	{r4, r5, lr}
   2bfe6:	b089      	sub	sp, #36	; 0x24
   2bfe8:	460c      	mov	r4, r1
	if (bt_conn_get_info(conn, &info) < 0) {
   2bfea:	a901      	add	r1, sp, #4
{
   2bfec:	4615      	mov	r5, r2
	if (bt_conn_get_info(conn, &info) < 0) {
   2bfee:	f7ee f8dd 	bl	1a1ac <bt_conn_get_info>
   2bff2:	2800      	cmp	r0, #0
   2bff4:	da03      	bge.n	2bffe <conn_addr_str+0x1a>
		addr[0] = '\0';
   2bff6:	2300      	movs	r3, #0
   2bff8:	7023      	strb	r3, [r4, #0]
}
   2bffa:	b009      	add	sp, #36	; 0x24
   2bffc:	bd30      	pop	{r4, r5, pc}
	switch (info.type) {
   2bffe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   2c002:	2b01      	cmp	r3, #1
   2c004:	d1f9      	bne.n	2bffa <conn_addr_str+0x16>
		bt_addr_le_to_str(info.le.dst, addr, len);
   2c006:	9803      	ldr	r0, [sp, #12]
   2c008:	462a      	mov	r2, r5
   2c00a:	4621      	mov	r1, r4
   2c00c:	f7f1 fffe 	bl	1e00c <bt_addr_le_to_str>
		break;
   2c010:	e7f3      	b.n	2bffa <conn_addr_str+0x16>

0002c012 <bt_gatt_foreach_attr>:
{
   2c012:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   2c014:	e9cd 2301 	strd	r2, r3, [sp, #4]
   2c018:	2300      	movs	r3, #0
   2c01a:	9300      	str	r3, [sp, #0]
   2c01c:	461a      	mov	r2, r3
   2c01e:	f7f0 fa0d 	bl	1c43c <bt_gatt_foreach_attr_type>
}
   2c022:	b005      	add	sp, #20
   2c024:	f85d fb04 	ldr.w	pc, [sp], #4

0002c028 <fixed_data_unref>:
}
   2c028:	4770      	bx	lr

0002c02a <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   2c02a:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   2c02c:	6849      	ldr	r1, [r1, #4]
   2c02e:	6809      	ldr	r1, [r1, #0]
   2c030:	f7f3 be3c 	b.w	1fcac <net_buf_alloc_len>

0002c034 <net_buf_simple_init_with_data>:
	buf->size  = size;
   2c034:	b292      	uxth	r2, r2
	buf->__buf = data;
   2c036:	6081      	str	r1, [r0, #8]
	buf->data  = data;
   2c038:	6001      	str	r1, [r0, #0]
	buf->size  = size;
   2c03a:	80c2      	strh	r2, [r0, #6]
	buf->len   = size;
   2c03c:	8082      	strh	r2, [r0, #4]
}
   2c03e:	4770      	bx	lr

0002c040 <net_buf_simple_pull_u8>:
{
   2c040:	b510      	push	{r4, lr}
	val = buf->data[0];
   2c042:	6803      	ldr	r3, [r0, #0]
   2c044:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   2c046:	2101      	movs	r1, #1
   2c048:	f7f4 f8c6 	bl	201d8 <net_buf_simple_pull>
}
   2c04c:	4620      	mov	r0, r4
   2c04e:	bd10      	pop	{r4, pc}

0002c050 <net_buf_simple_pull_le16>:
{
   2c050:	b510      	push	{r4, lr}
	val = UNALIGNED_GET((uint16_t *)buf->data);
   2c052:	6803      	ldr	r3, [r0, #0]
   2c054:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   2c056:	2102      	movs	r1, #2
   2c058:	f7f4 f8be 	bl	201d8 <net_buf_simple_pull>
}
   2c05c:	4620      	mov	r0, r4
   2c05e:	bd10      	pop	{r4, pc}

0002c060 <net_buf_simple_headroom>:
	return buf->data - buf->__buf;
   2c060:	6802      	ldr	r2, [r0, #0]
   2c062:	6880      	ldr	r0, [r0, #8]
}
   2c064:	1a10      	subs	r0, r2, r0
   2c066:	4770      	bx	lr

0002c068 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   2c068:	8883      	ldrh	r3, [r0, #4]
   2c06a:	88c2      	ldrh	r2, [r0, #6]
   2c06c:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2c06e:	6803      	ldr	r3, [r0, #0]
   2c070:	6880      	ldr	r0, [r0, #8]
   2c072:	1a18      	subs	r0, r3, r0
}
   2c074:	1a10      	subs	r0, r2, r0
   2c076:	4770      	bx	lr

0002c078 <net_buf_simple_add_mem>:
{
   2c078:	b538      	push	{r3, r4, r5, lr}
   2c07a:	460d      	mov	r5, r1
   2c07c:	4614      	mov	r4, r2
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2c07e:	4611      	mov	r1, r2
   2c080:	f7f4 f8ec 	bl	2025c <net_buf_simple_add>
   2c084:	4622      	mov	r2, r4
   2c086:	4629      	mov	r1, r5
}
   2c088:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   2c08c:	f000 bdb3 	b.w	2cbf6 <memcpy>

0002c090 <net_buf_simple_add_le16>:
{
   2c090:	b510      	push	{r4, lr}
   2c092:	460c      	mov	r4, r1
	sys_put_le16(val, net_buf_simple_add(buf, sizeof(val)));
   2c094:	2102      	movs	r1, #2
   2c096:	f7f4 f8e1 	bl	2025c <net_buf_simple_add>
	dst[0] = val;
   2c09a:	7004      	strb	r4, [r0, #0]
	dst[1] = val >> 8;
   2c09c:	0a24      	lsrs	r4, r4, #8
   2c09e:	7044      	strb	r4, [r0, #1]
}
   2c0a0:	bd10      	pop	{r4, pc}

0002c0a2 <set_starting_state>:
{
   2c0a2:	b510      	push	{r4, lr}
	__asm__ volatile(
   2c0a4:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c0a8:	f3ef 8211 	mrs	r2, BASEPRI
   2c0ac:	f383 8812 	msr	BASEPRI_MAX, r3
   2c0b0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   2c0b4:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   2c0b6:	f003 0407 	and.w	r4, r3, #7
   2c0ba:	2c01      	cmp	r4, #1
   2c0bc:	d106      	bne.n	2c0cc <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   2c0be:	6001      	str	r1, [r0, #0]
	int err = 0;
   2c0c0:	2000      	movs	r0, #0
	__asm__ volatile(
   2c0c2:	f382 8811 	msr	BASEPRI, r2
   2c0c6:	f3bf 8f6f 	isb	sy
}
   2c0ca:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   2c0cc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   2c0d0:	428b      	cmp	r3, r1
		err = -EALREADY;
   2c0d2:	bf14      	ite	ne
   2c0d4:	f04f 30ff 	movne.w	r0, #4294967295
   2c0d8:	f06f 0077 	mvneq.w	r0, #119	; 0x77
   2c0dc:	e7f1      	b.n	2c0c2 <set_starting_state+0x20>

0002c0de <set_on_state>:
	__asm__ volatile(
   2c0de:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c0e2:	f3ef 8211 	mrs	r2, BASEPRI
   2c0e6:	f383 8812 	msr	BASEPRI_MAX, r3
   2c0ea:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   2c0ee:	6803      	ldr	r3, [r0, #0]
   2c0f0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2c0f4:	f043 0302 	orr.w	r3, r3, #2
   2c0f8:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   2c0fa:	f382 8811 	msr	BASEPRI, r2
   2c0fe:	f3bf 8f6f 	isb	sy
}
   2c102:	4770      	bx	lr

0002c104 <onoff_started_callback>:
	return &data->mgr[type];
   2c104:	6900      	ldr	r0, [r0, #16]
   2c106:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2c108:	eb00 1043 	add.w	r0, r0, r3, lsl #5
   2c10c:	2100      	movs	r1, #0
   2c10e:	4710      	bx	r2

0002c110 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   2c110:	2000      	movs	r0, #0
   2c112:	f7f6 bc23 	b.w	2295c <nrfx_clock_start>

0002c116 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2c116:	2000      	movs	r0, #0
   2c118:	f7f6 bc4a 	b.w	229b0 <nrfx_clock_stop>

0002c11c <api_stop>:
	return stop(dev, subsys, CTX_API);
   2c11c:	2280      	movs	r2, #128	; 0x80
   2c11e:	f7f4 b961 	b.w	203e4 <stop>

0002c122 <blocking_start_callback>:
{
   2c122:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   2c124:	f7f8 bdde 	b.w	24ce4 <z_impl_k_sem_give>

0002c128 <api_start>:
{
   2c128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2c12c:	b2c9      	uxtb	r1, r1
	err = set_starting_state(&subdata->flags, ctx);
   2c12e:	240c      	movs	r4, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   2c130:	6905      	ldr	r5, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
   2c132:	434c      	muls	r4, r1
{
   2c134:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   2c136:	f104 0048 	add.w	r0, r4, #72	; 0x48
   2c13a:	2180      	movs	r1, #128	; 0x80
   2c13c:	4428      	add	r0, r5
{
   2c13e:	4690      	mov	r8, r2
   2c140:	461f      	mov	r7, r3
	err = set_starting_state(&subdata->flags, ctx);
   2c142:	f7ff ffae 	bl	2c0a2 <set_starting_state>
	if (err < 0) {
   2c146:	2800      	cmp	r0, #0
   2c148:	db06      	blt.n	2c158 <api_start+0x30>
	subdata->cb = cb;
   2c14a:	4425      	add	r5, r4
	subdata->user_data = user_data;
   2c14c:	e9c5 8710 	strd	r8, r7, [r5, #64]	; 0x40
	 get_sub_config(dev, type)->start();
   2c150:	6873      	ldr	r3, [r6, #4]
   2c152:	591b      	ldr	r3, [r3, r4]
   2c154:	4798      	blx	r3
	return 0;
   2c156:	2000      	movs	r0, #0
}
   2c158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c15c <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c15c:	6843      	ldr	r3, [r0, #4]
   2c15e:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2c160:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2c164:	600b      	str	r3, [r1, #0]
}
   2c166:	2000      	movs	r0, #0
   2c168:	4770      	bx	lr

0002c16a <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c16a:	6843      	ldr	r3, [r0, #4]
   2c16c:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   2c16e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   2c172:	4042      	eors	r2, r0
   2c174:	400a      	ands	r2, r1
   2c176:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2c178:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   2c17c:	2000      	movs	r0, #0
   2c17e:	4770      	bx	lr

0002c180 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c180:	6843      	ldr	r3, [r0, #4]
   2c182:	685b      	ldr	r3, [r3, #4]
}
   2c184:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2c186:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   2c18a:	4770      	bx	lr

0002c18c <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c18c:	6843      	ldr	r3, [r0, #4]
   2c18e:	685b      	ldr	r3, [r3, #4]
}
   2c190:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   2c192:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2c196:	4770      	bx	lr

0002c198 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2c198:	6843      	ldr	r3, [r0, #4]
   2c19a:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   2c19c:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   2c1a0:	404b      	eors	r3, r1
    p_reg->OUT = value;
   2c1a2:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2c1a6:	2000      	movs	r0, #0
   2c1a8:	4770      	bx	lr

0002c1aa <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   2c1aa:	6843      	ldr	r3, [r0, #4]
   2c1ac:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   2c1ae:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2c1b2:	05d1      	lsls	r1, r2, #23
{
   2c1b4:	b410      	push	{r4}
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   2c1b6:	d518      	bpl.n	2c1ea <uarte_nrfx_isr_int+0x40>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c1b8:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2c1bc:	b1aa      	cbz	r2, 2c1ea <uarte_nrfx_isr_int+0x40>
	__asm__ volatile(
   2c1be:	f04f 0140 	mov.w	r1, #64	; 0x40
   2c1c2:	f3ef 8211 	mrs	r2, BASEPRI
   2c1c6:	f381 8812 	msr	BASEPRI_MAX, r1
   2c1ca:	f3bf 8f6f 	isb	sy
   2c1ce:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   2c1d2:	b131      	cbz	r1, 2c1e2 <uarte_nrfx_isr_int+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c1d4:	2100      	movs	r1, #0
   2c1d6:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2c1da:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c1de:	2101      	movs	r1, #1
   2c1e0:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   2c1e2:	f382 8811 	msr	BASEPRI, r2
   2c1e6:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2c1ea:	6842      	ldr	r2, [r0, #4]
   2c1ec:	6852      	ldr	r2, [r2, #4]
   2c1ee:	06d2      	lsls	r2, r2, #27
   2c1f0:	d51a      	bpl.n	2c228 <uarte_nrfx_isr_int+0x7e>
	__asm__ volatile(
   2c1f2:	f04f 0240 	mov.w	r2, #64	; 0x40
   2c1f6:	f3ef 8111 	mrs	r1, BASEPRI
   2c1fa:	f382 8812 	msr	BASEPRI_MAX, r2
   2c1fe:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c202:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2c206:	b112      	cbz	r2, 2c20e <uarte_nrfx_isr_int+0x64>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   2c208:	2200      	movs	r2, #0
   2c20a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
		if (!data->int_driven || data->int_driven->fifo_fill_lock == 0)
   2c20e:	6902      	ldr	r2, [r0, #16]
   2c210:	68d2      	ldr	r2, [r2, #12]
   2c212:	b10a      	cbz	r2, 2c218 <uarte_nrfx_isr_int+0x6e>
   2c214:	6912      	ldr	r2, [r2, #16]
   2c216:	b91a      	cbnz	r2, 2c220 <uarte_nrfx_isr_int+0x76>
    p_reg->INTENCLR = mask;
   2c218:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2c21c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	__asm__ volatile(
   2c220:	f381 8811 	msr	BASEPRI, r1
   2c224:	f3bf 8f6f 	isb	sy
	if (!data->int_driven) {
   2c228:	6902      	ldr	r2, [r0, #16]
   2c22a:	68d2      	ldr	r2, [r2, #12]
   2c22c:	b15a      	cbz	r2, 2c246 <uarte_nrfx_isr_int+0x9c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c22e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
   2c232:	b151      	cbz	r1, 2c24a <uarte_nrfx_isr_int+0xa0>
		if (data->int_driven->disable_tx_irq) {
   2c234:	7b94      	ldrb	r4, [r2, #14]
		data->int_driven->fifo_fill_lock = 0;
   2c236:	2100      	movs	r1, #0
   2c238:	6111      	str	r1, [r2, #16]
		if (data->int_driven->disable_tx_irq) {
   2c23a:	b134      	cbz	r4, 2c24a <uarte_nrfx_isr_int+0xa0>
    p_reg->INTENCLR = mask;
   2c23c:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
   2c240:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
			data->int_driven->disable_tx_irq = false;
   2c244:	7391      	strb	r1, [r2, #14]
}
   2c246:	bc10      	pop	{r4}
   2c248:	4770      	bx	lr
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c24a:	f8d3 1124 	ldr.w	r1, [r3, #292]	; 0x124
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ERROR)) {
   2c24e:	b121      	cbz	r1, 2c25a <uarte_nrfx_isr_int+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c250:	2100      	movs	r1, #0
   2c252:	f8c3 1124 	str.w	r1, [r3, #292]	; 0x124
   2c256:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
	if (data->int_driven->cb) {
   2c25a:	6813      	ldr	r3, [r2, #0]
   2c25c:	2b00      	cmp	r3, #0
   2c25e:	d0f2      	beq.n	2c246 <uarte_nrfx_isr_int+0x9c>
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2c260:	6851      	ldr	r1, [r2, #4]
}
   2c262:	bc10      	pop	{r4}
		data->int_driven->cb(dev, data->int_driven->cb_data);
   2c264:	4718      	bx	r3

0002c266 <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2c266:	6902      	ldr	r2, [r0, #16]
{
   2c268:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2c26a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   2c26e:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2c272:	2000      	movs	r0, #0
   2c274:	4770      	bx	lr

0002c276 <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2c276:	6843      	ldr	r3, [r0, #4]
   2c278:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   2c27a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   2c27e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2c282:	4770      	bx	lr

0002c284 <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2c284:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
   2c286:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c288:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2c28c:	b940      	cbnz	r0, 2c2a0 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
   2c28e:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2c290:	0792      	lsls	r2, r2, #30
   2c292:	d406      	bmi.n	2c2a2 <is_tx_ready+0x1e>
   2c294:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
   2c298:	3800      	subs	r0, #0
   2c29a:	bf18      	it	ne
   2c29c:	2001      	movne	r0, #1
   2c29e:	4770      	bx	lr
   2c2a0:	2001      	movs	r0, #1
}
   2c2a2:	4770      	bx	lr

0002c2a4 <user_callback>:
	if (data->async->user_callback) {
   2c2a4:	6903      	ldr	r3, [r0, #16]
   2c2a6:	691a      	ldr	r2, [r3, #16]
   2c2a8:	6813      	ldr	r3, [r2, #0]
   2c2aa:	b10b      	cbz	r3, 2c2b0 <user_callback+0xc>
		data->async->user_callback(dev, evt, data->async->user_data);
   2c2ac:	6852      	ldr	r2, [r2, #4]
   2c2ae:	4718      	bx	r3
}
   2c2b0:	4770      	bx	lr

0002c2b2 <notify_uart_rx_rdy>:
{
   2c2b2:	b570      	push	{r4, r5, r6, lr}
   2c2b4:	b086      	sub	sp, #24
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2c2b6:	6906      	ldr	r6, [r0, #16]
{
   2c2b8:	4604      	mov	r4, r0
   2c2ba:	460d      	mov	r5, r1
	struct uart_event evt = {
   2c2bc:	2214      	movs	r2, #20
   2c2be:	2100      	movs	r1, #0
   2c2c0:	a801      	add	r0, sp, #4
   2c2c2:	f000 fcc0 	bl	2cc46 <memset>
   2c2c6:	2302      	movs	r3, #2
   2c2c8:	f88d 3004 	strb.w	r3, [sp, #4]
		.data.rx.buf = data->async->rx_buf,
   2c2cc:	6933      	ldr	r3, [r6, #16]
	struct uart_event evt = {
   2c2ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
   2c2d0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   2c2d2:	9202      	str	r2, [sp, #8]
	user_callback(dev, &evt);
   2c2d4:	a901      	add	r1, sp, #4
   2c2d6:	4620      	mov	r0, r4
	struct uart_event evt = {
   2c2d8:	e9cd 3503 	strd	r3, r5, [sp, #12]
	user_callback(dev, &evt);
   2c2dc:	f7ff ffe2 	bl	2c2a4 <user_callback>
}
   2c2e0:	b006      	add	sp, #24
   2c2e2:	bd70      	pop	{r4, r5, r6, pc}

0002c2e4 <uarte_nrfx_rx_buf_rsp>:
	return config->uarte_regs;
   2c2e4:	6843      	ldr	r3, [r0, #4]
{
   2c2e6:	b530      	push	{r4, r5, lr}
	return config->uarte_regs;
   2c2e8:	681b      	ldr	r3, [r3, #0]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2c2ea:	6904      	ldr	r4, [r0, #16]
	__asm__ volatile(
   2c2ec:	f04f 0040 	mov.w	r0, #64	; 0x40
   2c2f0:	f3ef 8511 	mrs	r5, BASEPRI
   2c2f4:	f380 8812 	msr	BASEPRI_MAX, r0
   2c2f8:	f3bf 8f6f 	isb	sy
	if (data->async->rx_buf == NULL) {
   2c2fc:	6924      	ldr	r4, [r4, #16]
   2c2fe:	6e20      	ldr	r0, [r4, #96]	; 0x60
   2c300:	b190      	cbz	r0, 2c328 <uarte_nrfx_rx_buf_rsp+0x44>
	} else if (data->async->rx_next_buf == NULL) {
   2c302:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
   2c304:	b998      	cbnz	r0, 2c32e <uarte_nrfx_rx_buf_rsp+0x4a>
		data->async->rx_next_buf_len = len;
   2c306:	e9c4 121b 	strd	r1, r2, [r4, #108]	; 0x6c
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   2c30a:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   2c30e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    p_reg->SHORTS |= mask;
   2c312:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   2c316:	f042 0220 	orr.w	r2, r2, #32
   2c31a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	__asm__ volatile(
   2c31e:	f385 8811 	msr	BASEPRI, r5
   2c322:	f3bf 8f6f 	isb	sy
}
   2c326:	bd30      	pop	{r4, r5, pc}
		err = -EACCES;
   2c328:	f06f 000c 	mvn.w	r0, #12
   2c32c:	e7f7      	b.n	2c31e <uarte_nrfx_rx_buf_rsp+0x3a>
		err = -EBUSY;
   2c32e:	f06f 000f 	mvn.w	r0, #15
   2c332:	e7f4      	b.n	2c31e <uarte_nrfx_rx_buf_rsp+0x3a>

0002c334 <uarte_nrfx_callback_set>:
	if (!data->async) {
   2c334:	6903      	ldr	r3, [r0, #16]
   2c336:	691b      	ldr	r3, [r3, #16]
   2c338:	b11b      	cbz	r3, 2c342 <uarte_nrfx_callback_set+0xe>
	data->async->user_data = user_data;
   2c33a:	e9c3 1200 	strd	r1, r2, [r3]
	return 0;
   2c33e:	2000      	movs	r0, #0
   2c340:	4770      	bx	lr
		return -ENOTSUP;
   2c342:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
   2c346:	4770      	bx	lr

0002c348 <uarte_nrfx_poll_in>:
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2c348:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
   2c34a:	6843      	ldr	r3, [r0, #4]
	if (data->async) {
   2c34c:	6910      	ldr	r0, [r2, #16]
	return config->uarte_regs;
   2c34e:	681b      	ldr	r3, [r3, #0]
{
   2c350:	b510      	push	{r4, lr}
	if (data->async) {
   2c352:	b958      	cbnz	r0, 2c36c <uarte_nrfx_poll_in+0x24>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c354:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2c358:	b15c      	cbz	r4, 2c372 <uarte_nrfx_poll_in+0x2a>
	*c = data->rx_data;
   2c35a:	7e52      	ldrb	r2, [r2, #25]
   2c35c:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c35e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2c362:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c366:	2201      	movs	r2, #1
   2c368:	601a      	str	r2, [r3, #0]
}
   2c36a:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
   2c36c:	f06f 0085 	mvn.w	r0, #133	; 0x85
   2c370:	e7fb      	b.n	2c36a <uarte_nrfx_poll_in+0x22>
		return -1;
   2c372:	f04f 30ff 	mov.w	r0, #4294967295
   2c376:	e7f8      	b.n	2c36a <uarte_nrfx_poll_in+0x22>

0002c378 <uarte_nrfx_fifo_read>:
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2c378:	2a00      	cmp	r2, #0
{
   2c37a:	b510      	push	{r4, lr}
   2c37c:	4604      	mov	r4, r0
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2c37e:	dd0f      	ble.n	2c3a0 <uarte_nrfx_fifo_read+0x28>
	return config->uarte_regs;
   2c380:	6843      	ldr	r3, [r0, #4]
   2c382:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c384:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (size > 0 && nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   2c388:	b148      	cbz	r0, 2c39e <uarte_nrfx_fifo_read+0x26>
	const struct uarte_nrfx_data *data = get_dev_data(dev);
   2c38a:	6922      	ldr	r2, [r4, #16]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c38c:	2000      	movs	r0, #0
   2c38e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   2c392:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		rx_data[num_rx++] = (uint8_t)data->rx_data;
   2c396:	7e52      	ldrb	r2, [r2, #25]
   2c398:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c39a:	2001      	movs	r0, #1
   2c39c:	6018      	str	r0, [r3, #0]
}
   2c39e:	bd10      	pop	{r4, pc}
	int num_rx = 0;
   2c3a0:	2000      	movs	r0, #0
   2c3a2:	e7fc      	b.n	2c39e <uarte_nrfx_fifo_read+0x26>

0002c3a4 <uarte_nrfx_irq_tx_enable>:
	return config->uarte_regs;
   2c3a4:	6843      	ldr	r3, [r0, #4]
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2c3a6:	6901      	ldr	r1, [r0, #16]
	return config->uarte_regs;
   2c3a8:	681a      	ldr	r2, [r3, #0]
	__asm__ volatile(
   2c3aa:	f04f 0040 	mov.w	r0, #64	; 0x40
   2c3ae:	f3ef 8311 	mrs	r3, BASEPRI
   2c3b2:	f380 8812 	msr	BASEPRI_MAX, r0
   2c3b6:	f3bf 8f6f 	isb	sy
	data->int_driven->disable_tx_irq = false;
   2c3ba:	68c9      	ldr	r1, [r1, #12]
   2c3bc:	2000      	movs	r0, #0
   2c3be:	7388      	strb	r0, [r1, #14]
    p_reg->INTENSET = mask;
   2c3c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   2c3c4:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
	__asm__ volatile(
   2c3c8:	f383 8811 	msr	BASEPRI, r3
   2c3cc:	f3bf 8f6f 	isb	sy
}
   2c3d0:	4770      	bx	lr

0002c3d2 <uarte_nrfx_irq_tx_disable>:
	data->int_driven->disable_tx_irq = true;
   2c3d2:	6903      	ldr	r3, [r0, #16]
   2c3d4:	68db      	ldr	r3, [r3, #12]
   2c3d6:	2201      	movs	r2, #1
   2c3d8:	739a      	strb	r2, [r3, #14]
}
   2c3da:	4770      	bx	lr

0002c3dc <uarte_nrfx_irq_tx_ready_complete>:
	bool ready = !data->int_driven->disable_tx_irq &&
   2c3dc:	6903      	ldr	r3, [r0, #16]
   2c3de:	68db      	ldr	r3, [r3, #12]
   2c3e0:	7b9a      	ldrb	r2, [r3, #14]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2c3e2:	f002 01ff 	and.w	r1, r2, #255	; 0xff
   2c3e6:	b962      	cbnz	r2, 2c402 <uarte_nrfx_irq_tx_ready_complete+0x26>
	return config->uarte_regs;
   2c3e8:	6842      	ldr	r2, [r0, #4]
   2c3ea:	6812      	ldr	r2, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c3ec:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	bool ready = !data->int_driven->disable_tx_irq &&
   2c3f0:	b140      	cbz	r0, 2c404 <uarte_nrfx_irq_tx_ready_complete+0x28>
    return p_reg->INTENSET & mask;
   2c3f2:	f8d2 0304 	ldr.w	r0, [r2, #772]	; 0x304
	if (ready) {
   2c3f6:	f410 0080 	ands.w	r0, r0, #4194304	; 0x400000
   2c3fa:	d003      	beq.n	2c404 <uarte_nrfx_irq_tx_ready_complete+0x28>
		data->int_driven->fifo_fill_lock = 0;
   2c3fc:	6119      	str	r1, [r3, #16]
		     nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) &&
   2c3fe:	2001      	movs	r0, #1
   2c400:	4770      	bx	lr
   2c402:	2000      	movs	r0, #0
}
   2c404:	4770      	bx	lr

0002c406 <uarte_nrfx_irq_rx_ready>:
	return config->uarte_regs;
   2c406:	6843      	ldr	r3, [r0, #4]
   2c408:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2c40a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
}
   2c40e:	3800      	subs	r0, #0
   2c410:	bf18      	it	ne
   2c412:	2001      	movne	r0, #1
   2c414:	4770      	bx	lr

0002c416 <uarte_nrfx_irq_rx_enable>:
	return config->uarte_regs;
   2c416:	6843      	ldr	r3, [r0, #4]
   2c418:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2c41a:	2210      	movs	r2, #16
   2c41c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2c420:	4770      	bx	lr

0002c422 <uarte_nrfx_irq_rx_disable>:
	return config->uarte_regs;
   2c422:	6843      	ldr	r3, [r0, #4]
   2c424:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2c426:	2210      	movs	r2, #16
   2c428:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2c42c:	4770      	bx	lr

0002c42e <uarte_nrfx_irq_err_enable>:
	return config->uarte_regs;
   2c42e:	6843      	ldr	r3, [r0, #4]
   2c430:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2c432:	f44f 7200 	mov.w	r2, #512	; 0x200
   2c436:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2c43a:	4770      	bx	lr

0002c43c <uarte_nrfx_irq_err_disable>:
	return config->uarte_regs;
   2c43c:	6843      	ldr	r3, [r0, #4]
   2c43e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   2c440:	f44f 7200 	mov.w	r2, #512	; 0x200
   2c444:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
   2c448:	4770      	bx	lr

0002c44a <uarte_nrfx_irq_update>:
}
   2c44a:	2001      	movs	r0, #1
   2c44c:	4770      	bx	lr

0002c44e <uarte_nrfx_irq_callback_set>:
	data->int_driven->cb = cb;
   2c44e:	6903      	ldr	r3, [r0, #16]
   2c450:	68db      	ldr	r3, [r3, #12]
	data->int_driven->cb_data = cb_data;
   2c452:	e9c3 1200 	strd	r1, r2, [r3]
}
   2c456:	4770      	bx	lr

0002c458 <rx_timeout>:
{
   2c458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return z_impl_k_timer_user_data_get(timer);
   2c45a:	6b46      	ldr	r6, [r0, #52]	; 0x34
	if (data->async->is_in_irq) {
   2c45c:	6933      	ldr	r3, [r6, #16]
   2c45e:	f893 20d5 	ldrb.w	r2, [r3, #213]	; 0xd5
   2c462:	f002 07ff 	and.w	r7, r2, #255	; 0xff
   2c466:	bb42      	cbnz	r2, 2c4ba <rx_timeout+0x62>
	const struct device *dev = data->dev;
   2c468:	6835      	ldr	r5, [r6, #0]
	return config->uarte_regs;
   2c46a:	686a      	ldr	r2, [r5, #4]
   2c46c:	6812      	ldr	r2, [r2, #0]
   2c46e:	2110      	movs	r1, #16
   2c470:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
		read = data->async->rx_cnt.cnt;
   2c474:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
	if (read != data->async->rx_total_byte_cnt) {
   2c478:	6f59      	ldr	r1, [r3, #116]	; 0x74
   2c47a:	4291      	cmp	r1, r2
		data->async->rx_total_byte_cnt = read;
   2c47c:	bf1e      	ittt	ne
   2c47e:	675a      	strne	r2, [r3, #116]	; 0x74
		data->async->rx_timeout_left = data->async->rx_timeout;
   2c480:	6fda      	ldrne	r2, [r3, #124]	; 0x7c
   2c482:	f8c3 2084 	strne.w	r2, [r3, #132]	; 0x84
		    - data->async->rx_total_user_byte_cnt;
   2c486:	e9d3 421d 	ldrd	r4, r2, [r3, #116]	; 0x74
	if (!hw_rx_counting_enabled(data) &&
   2c48a:	1aa4      	subs	r4, r4, r2
		data->async->rx_cnt.cnt = data->async->rx_total_user_byte_cnt;
   2c48c:	bf48      	it	mi
   2c48e:	f8c3 20c0 	strmi.w	r2, [r3, #192]	; 0xc0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2c492:	e9d3 1219 	ldrd	r1, r2, [r3, #100]	; 0x64
		len = 0;
   2c496:	bf48      	it	mi
   2c498:	2400      	movmi	r4, #0
	if (len + data->async->rx_offset > data->async->rx_buf_len) {
   2c49a:	18a0      	adds	r0, r4, r2
   2c49c:	4288      	cmp	r0, r1
   2c49e:	d90d      	bls.n	2c4bc <rx_timeout+0x64>
		len = data->async->rx_buf_len - data->async->rx_offset;
   2c4a0:	1a8c      	subs	r4, r1, r2
	if (len > 0) {
   2c4a2:	2c00      	cmp	r4, #0
   2c4a4:	dd04      	ble.n	2c4b0 <rx_timeout+0x58>
		clipped = true;
   2c4a6:	2701      	movs	r7, #1
   2c4a8:	e00e      	b.n	2c4c8 <rx_timeout+0x70>
			data->async->rx_timeout_left -=
   2c4aa:	1a52      	subs	r2, r2, r1
   2c4ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	return config->uarte_regs;
   2c4b0:	686b      	ldr	r3, [r5, #4]
   2c4b2:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   2c4b4:	2210      	movs	r2, #16
   2c4b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
   2c4ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (len > 0) {
   2c4bc:	2c00      	cmp	r4, #0
   2c4be:	d0f7      	beq.n	2c4b0 <rx_timeout+0x58>
				< data->async->rx_timeout_slab)) {
   2c4c0:	e9d3 1220 	ldrd	r1, r2, [r3, #128]	; 0x80
		if (clipped ||
   2c4c4:	428a      	cmp	r2, r1
   2c4c6:	daf0      	bge.n	2c4aa <rx_timeout+0x52>
			notify_uart_rx_rdy(dev, len);
   2c4c8:	4621      	mov	r1, r4
   2c4ca:	4628      	mov	r0, r5
   2c4cc:	f7ff fef1 	bl	2c2b2 <notify_uart_rx_rdy>
			data->async->rx_offset += len;
   2c4d0:	6930      	ldr	r0, [r6, #16]
   2c4d2:	6e83      	ldr	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   2c4d4:	6f81      	ldr	r1, [r0, #120]	; 0x78
			data->async->rx_offset += len;
   2c4d6:	4423      	add	r3, r4
			data->async->rx_total_user_byte_cnt += len;
   2c4d8:	4421      	add	r1, r4
			data->async->rx_offset += len;
   2c4da:	6683      	str	r3, [r0, #104]	; 0x68
			data->async->rx_total_user_byte_cnt += len;
   2c4dc:	6781      	str	r1, [r0, #120]	; 0x78
		if (clipped) {
   2c4de:	2f00      	cmp	r7, #0
   2c4e0:	d0e6      	beq.n	2c4b0 <rx_timeout+0x58>
	z_impl_k_timer_stop(timer);
   2c4e2:	3088      	adds	r0, #136	; 0x88
   2c4e4:	f000 fb03 	bl	2caee <z_impl_k_timer_stop>
}
   2c4e8:	e7e2      	b.n	2c4b0 <rx_timeout+0x58>

0002c4ea <uarte_nrfx_irq_is_pending>:
{
   2c4ea:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2c4ec:	6843      	ldr	r3, [r0, #4]
   2c4ee:	681d      	ldr	r5, [r3, #0]
    return p_reg->INTENSET & mask;
   2c4f0:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
		||
   2c4f4:	025b      	lsls	r3, r3, #9
{
   2c4f6:	4604      	mov	r4, r0
		||
   2c4f8:	d405      	bmi.n	2c506 <uarte_nrfx_irq_is_pending+0x1c>
   2c4fa:	f8d5 0304 	ldr.w	r0, [r5, #772]	; 0x304
   2c4fe:	f010 0010 	ands.w	r0, r0, #16
   2c502:	d106      	bne.n	2c512 <uarte_nrfx_irq_is_pending+0x28>
}
   2c504:	bd38      	pop	{r3, r4, r5, pc}
		 uarte_nrfx_irq_tx_ready_complete(dev))
   2c506:	f7ff ff69 	bl	2c3dc <uarte_nrfx_irq_tx_ready_complete>
					    NRF_UARTE_INT_TXSTOPPED_MASK) &&
   2c50a:	2800      	cmp	r0, #0
   2c50c:	d0f5      	beq.n	2c4fa <uarte_nrfx_irq_is_pending+0x10>
		||
   2c50e:	2001      	movs	r0, #1
   2c510:	e7f8      	b.n	2c504 <uarte_nrfx_irq_is_pending+0x1a>
		 uarte_nrfx_irq_rx_ready(dev)));
   2c512:	4620      	mov	r0, r4
   2c514:	f7ff ff77 	bl	2c406 <uarte_nrfx_irq_rx_ready>
					    NRF_UARTE_INT_ENDRX_MASK) &&
   2c518:	3800      	subs	r0, #0
   2c51a:	bf18      	it	ne
   2c51c:	2001      	movne	r0, #1
   2c51e:	e7f1      	b.n	2c504 <uarte_nrfx_irq_is_pending+0x1a>

0002c520 <uarte_nrfx_tx_abort>:
{
   2c520:	b538      	push	{r3, r4, r5, lr}
	return config->uarte_regs;
   2c522:	6843      	ldr	r3, [r0, #4]
   2c524:	681d      	ldr	r5, [r3, #0]
	if (data->async->tx_buf == NULL) {
   2c526:	6903      	ldr	r3, [r0, #16]
   2c528:	6918      	ldr	r0, [r3, #16]
   2c52a:	6883      	ldr	r3, [r0, #8]
   2c52c:	b14b      	cbz	r3, 2c542 <uarte_nrfx_tx_abort+0x22>
	data->async->pending_tx = false;
   2c52e:	2400      	movs	r4, #0
   2c530:	f880 40d4 	strb.w	r4, [r0, #212]	; 0xd4
	z_impl_k_timer_stop(timer);
   2c534:	3028      	adds	r0, #40	; 0x28
   2c536:	f000 fada 	bl	2caee <z_impl_k_timer_stop>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c53a:	2301      	movs	r3, #1
   2c53c:	60eb      	str	r3, [r5, #12]
	return 0;
   2c53e:	4620      	mov	r0, r4
}
   2c540:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2c542:	f06f 000d 	mvn.w	r0, #13
   2c546:	e7fb      	b.n	2c540 <uarte_nrfx_tx_abort+0x20>

0002c548 <tx_timeout>:
	(void) uarte_nrfx_tx_abort(data->dev);
   2c548:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2c54a:	6818      	ldr	r0, [r3, #0]
   2c54c:	f7ff bfe8 	b.w	2c520 <uarte_nrfx_tx_abort>

0002c550 <uarte_nrfx_rx_disable>:
{
   2c550:	b538      	push	{r3, r4, r5, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2c552:	6905      	ldr	r5, [r0, #16]
	return config->uarte_regs;
   2c554:	6843      	ldr	r3, [r0, #4]
	if (data->async->rx_buf == NULL) {
   2c556:	6928      	ldr	r0, [r5, #16]
	return config->uarte_regs;
   2c558:	681c      	ldr	r4, [r3, #0]
	if (data->async->rx_buf == NULL) {
   2c55a:	6e03      	ldr	r3, [r0, #96]	; 0x60
   2c55c:	b1b3      	cbz	r3, 2c58c <uarte_nrfx_rx_disable+0x3c>
	if (data->async->rx_next_buf != NULL) {
   2c55e:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
   2c560:	b153      	cbz	r3, 2c578 <uarte_nrfx_rx_disable+0x28>
    p_reg->SHORTS &= ~(mask);
   2c562:	f8d4 3200 	ldr.w	r3, [r4, #512]	; 0x200
   2c566:	f023 0320 	bic.w	r3, r3, #32
   2c56a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c56e:	2300      	movs	r3, #0
   2c570:	f8c4 314c 	str.w	r3, [r4, #332]	; 0x14c
   2c574:	f8d4 314c 	ldr.w	r3, [r4, #332]	; 0x14c
   2c578:	3088      	adds	r0, #136	; 0x88
   2c57a:	f000 fab8 	bl	2caee <z_impl_k_timer_stop>
	data->async->rx_enabled = false;
   2c57e:	692b      	ldr	r3, [r5, #16]
   2c580:	2000      	movs	r0, #0
   2c582:	f883 00d2 	strb.w	r0, [r3, #210]	; 0xd2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c586:	2301      	movs	r3, #1
   2c588:	6063      	str	r3, [r4, #4]
}
   2c58a:	bd38      	pop	{r3, r4, r5, pc}
		return -EFAULT;
   2c58c:	f06f 000d 	mvn.w	r0, #13
   2c590:	e7fb      	b.n	2c58a <uarte_nrfx_rx_disable+0x3a>

0002c592 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
   2c592:	b510      	push	{r4, lr}
   2c594:	2200      	movs	r2, #0
   2c596:	4604      	mov	r4, r0
   2c598:	2101      	movs	r1, #1
   2c59a:	2002      	movs	r0, #2
   2c59c:	f7e9 fcea 	bl	15f74 <z_arm_irq_priority_set>
   2c5a0:	2002      	movs	r0, #2
   2c5a2:	f7e9 fcb5 	bl	15f10 <arch_irq_enable>
   2c5a6:	4620      	mov	r0, r4
   2c5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c5ac:	f7f4 bd88 	b.w	210c0 <uarte_instance_init.isra.0>

0002c5b0 <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   2c5b0:	b510      	push	{r4, lr}
   2c5b2:	2200      	movs	r2, #0
   2c5b4:	4604      	mov	r4, r0
   2c5b6:	2101      	movs	r1, #1
   2c5b8:	2028      	movs	r0, #40	; 0x28
   2c5ba:	f7e9 fcdb 	bl	15f74 <z_arm_irq_priority_set>
   2c5be:	2028      	movs	r0, #40	; 0x28
   2c5c0:	f7e9 fca6 	bl	15f10 <arch_irq_enable>
   2c5c4:	4620      	mov	r0, r4
   2c5c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2c5ca:	f7f4 bd79 	b.w	210c0 <uarte_instance_init.isra.0>

0002c5ce <tx_start>:
{
   2c5ce:	b510      	push	{r4, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
   2c5d0:	6844      	ldr	r4, [r0, #4]
	return config->uarte_regs;
   2c5d2:	6823      	ldr	r3, [r4, #0]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   2c5d4:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   2c5d8:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2c5dc:	2200      	movs	r2, #0
   2c5de:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
   2c5e2:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
   2c5e6:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
   2c5ea:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
   2c5ee:	6862      	ldr	r2, [r4, #4]
   2c5f0:	06d2      	lsls	r2, r2, #27
   2c5f2:	d50f      	bpl.n	2c614 <tx_start+0x46>
	if (data->async) {
   2c5f4:	6902      	ldr	r2, [r0, #16]
   2c5f6:	6912      	ldr	r2, [r2, #16]
   2c5f8:	b12a      	cbz	r2, 2c606 <tx_start+0x38>
		data->async->low_power_mask |= mask;
   2c5fa:	f8d2 10c8 	ldr.w	r1, [r2, #200]	; 0xc8
   2c5fe:	f041 0101 	orr.w	r1, r1, #1
   2c602:	f8c2 10c8 	str.w	r1, [r2, #200]	; 0xc8
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   2c606:	2208      	movs	r2, #8
   2c608:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
   2c60c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
   2c610:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2c614:	2201      	movs	r2, #1
   2c616:	609a      	str	r2, [r3, #8]
}
   2c618:	bd10      	pop	{r4, pc}

0002c61a <uarte_nrfx_fifo_fill>:
{
   2c61a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
   2c61c:	6906      	ldr	r6, [r0, #16]
	len = MIN(len, data->int_driven->tx_buff_size);
   2c61e:	68f3      	ldr	r3, [r6, #12]
   2c620:	899c      	ldrh	r4, [r3, #12]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   2c622:	f3bf 8f5b 	dmb	ish
   2c626:	4294      	cmp	r4, r2
   2c628:	bfa8      	it	ge
   2c62a:	4614      	movge	r4, r2
{
   2c62c:	4605      	mov	r5, r0
   2c62e:	3310      	adds	r3, #16
   2c630:	2201      	movs	r2, #1
   2c632:	e853 0f00 	ldrex	r0, [r3]
   2c636:	2800      	cmp	r0, #0
   2c638:	d103      	bne.n	2c642 <uarte_nrfx_fifo_fill+0x28>
   2c63a:	e843 2700 	strex	r7, r2, [r3]
   2c63e:	2f00      	cmp	r7, #0
   2c640:	d1f7      	bne.n	2c632 <uarte_nrfx_fifo_fill+0x18>
   2c642:	f3bf 8f5b 	dmb	ish
   2c646:	bf0c      	ite	eq
   2c648:	4613      	moveq	r3, r2
   2c64a:	2300      	movne	r3, #0
	if (!atomic_cas(&data->int_driven->fifo_fill_lock, 0, 1)) {
   2c64c:	d01d      	beq.n	2c68a <uarte_nrfx_fifo_fill+0x70>
		return 0;
   2c64e:	461c      	mov	r4, r3
}
   2c650:	4620      	mov	r0, r4
   2c652:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		data->int_driven->tx_buffer[i] = tx_data[i];
   2c654:	68f2      	ldr	r2, [r6, #12]
   2c656:	5cc8      	ldrb	r0, [r1, r3]
   2c658:	6892      	ldr	r2, [r2, #8]
   2c65a:	54d0      	strb	r0, [r2, r3]
	for (int i = 0; i < len; i++) {
   2c65c:	3301      	adds	r3, #1
   2c65e:	42a3      	cmp	r3, r4
   2c660:	dbf8      	blt.n	2c654 <uarte_nrfx_fifo_fill+0x3a>
	__asm__ volatile(
   2c662:	f04f 0340 	mov.w	r3, #64	; 0x40
   2c666:	f3ef 8711 	mrs	r7, BASEPRI
   2c66a:	f383 8812 	msr	BASEPRI_MAX, r3
   2c66e:	f3bf 8f6f 	isb	sy
	if (!is_tx_ready(dev)) {
   2c672:	4628      	mov	r0, r5
   2c674:	f7ff fe06 	bl	2c284 <is_tx_ready>
   2c678:	68f3      	ldr	r3, [r6, #12]
   2c67a:	b940      	cbnz	r0, 2c68e <uarte_nrfx_fifo_fill+0x74>
		data->int_driven->fifo_fill_lock = 0;
   2c67c:	6118      	str	r0, [r3, #16]
		len = 0;
   2c67e:	4604      	mov	r4, r0
	__asm__ volatile(
   2c680:	f387 8811 	msr	BASEPRI, r7
   2c684:	f3bf 8f6f 	isb	sy
	return len;
   2c688:	e7e2      	b.n	2c650 <uarte_nrfx_fifo_fill+0x36>
	for (int i = 0; i < len; i++) {
   2c68a:	2300      	movs	r3, #0
   2c68c:	e7e7      	b.n	2c65e <uarte_nrfx_fifo_fill+0x44>
		tx_start(dev, data->int_driven->tx_buffer, len);
   2c68e:	6899      	ldr	r1, [r3, #8]
   2c690:	4622      	mov	r2, r4
   2c692:	4628      	mov	r0, r5
   2c694:	f7ff ff9b 	bl	2c5ce <tx_start>
   2c698:	e7f2      	b.n	2c680 <uarte_nrfx_fifo_fill+0x66>

0002c69a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
   2c69a:	4770      	bx	lr

0002c69c <sys_clock_cycle_get_32>:
{
   2c69c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
   2c69e:	f7f5 f937 	bl	21910 <z_nrf_rtc_timer_read>
}
   2c6a2:	bd08      	pop	{r3, pc}

0002c6a4 <mpsl_timer0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2c6a4:	4668      	mov	r0, sp
   2c6a6:	f020 0107 	bic.w	r1, r0, #7
   2c6aa:	468d      	mov	sp, r1
   2c6ac:	b501      	push	{r0, lr}
	MPSL_IRQ_TIMER0_Handler();
   2c6ae:	f7d6 f98f 	bl	29d0 <MPSL_IRQ_TIMER0_Handler>
	ISR_DIRECT_PM();
   2c6b2:	f7e9 fc97 	bl	15fe4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
   2c6b6:	f7e9 fd97 	bl	161e8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_timer0_isr_wrapper)
   2c6ba:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2c6be:	4685      	mov	sp, r0
   2c6c0:	4770      	bx	lr

0002c6c2 <mpsl_rtc0_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2c6c2:	4668      	mov	r0, sp
   2c6c4:	f020 0107 	bic.w	r1, r0, #7
   2c6c8:	468d      	mov	sp, r1
   2c6ca:	b501      	push	{r0, lr}
	MPSL_IRQ_RTC0_Handler();
   2c6cc:	f7d6 f902 	bl	28d4 <MPSL_IRQ_RTC0_Handler>
	ISR_DIRECT_PM();
   2c6d0:	f7e9 fc88 	bl	15fe4 <_arch_isr_direct_pm>
ISR_DIRECT_DECLARE(mpsl_rtc0_isr_wrapper)
   2c6d4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2c6d8:	4685      	mov	sp, r0
   2c6da:	4770      	bx	lr

0002c6dc <mpsl_radio_isr_wrapper>:
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2c6dc:	4668      	mov	r0, sp
   2c6de:	f020 0107 	bic.w	r1, r0, #7
   2c6e2:	468d      	mov	sp, r1
   2c6e4:	b501      	push	{r0, lr}
	MPSL_IRQ_RADIO_Handler();
   2c6e6:	f7df fe9a 	bl	c41e <MPSL_IRQ_RADIO_Handler>
	ISR_DIRECT_PM();
   2c6ea:	f7e9 fc7b 	bl	15fe4 <_arch_isr_direct_pm>
   2c6ee:	f7e9 fd7b 	bl	161e8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(mpsl_radio_isr_wrapper)
   2c6f2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   2c6f6:	4685      	mov	sp, r0
   2c6f8:	4770      	bx	lr

0002c6fa <nrfx_clock_enable>:
}
   2c6fa:	4770      	bx	lr

0002c6fc <nrfx_power_clock_irq_handler>:


void nrfx_clock_irq_handler(void)
{
	MPSL_IRQ_CLOCK_Handler();
   2c6fc:	f7d6 bd9e 	b.w	323c <MPSL_IRQ_CLOCK_Handler>

0002c700 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2c700:	4700      	bx	r0

0002c702 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2c702:	f000 b9bb 	b.w	2ca7c <z_impl_k_busy_wait>

0002c706 <nrf_gpio_pin_present_check>:
    switch (port)
   2c706:	0943      	lsrs	r3, r0, #5
   2c708:	d00b      	beq.n	2c722 <nrf_gpio_pin_present_check+0x1c>
   2c70a:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
   2c70c:	f240 33ff 	movw	r3, #1023	; 0x3ff
   2c710:	bf18      	it	ne
   2c712:	2300      	movne	r3, #0
    pin_number &= 0x1F;
   2c714:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
   2c718:	fa23 f000 	lsr.w	r0, r3, r0
}
   2c71c:	f000 0001 	and.w	r0, r0, #1
   2c720:	4770      	bx	lr
    switch (port)
   2c722:	f04f 33ff 	mov.w	r3, #4294967295
   2c726:	e7f5      	b.n	2c714 <nrf_gpio_pin_present_check+0xe>

0002c728 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
   2c728:	0080      	lsls	r0, r0, #2
}
   2c72a:	f500 7080 	add.w	r0, r0, #256	; 0x100
   2c72e:	4770      	bx	lr

0002c730 <nrf_gpio_reconfigure>:
{
   2c730:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2c734:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c736:	a801      	add	r0, sp, #4
{
   2c738:	460e      	mov	r6, r1
   2c73a:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
   2c73e:	4690      	mov	r8, r2
   2c740:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   2c742:	f7f6 fadf 	bl	22d04 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2c746:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2c748:	f1b8 0f00 	cmp.w	r8, #0
   2c74c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   2c750:	bf14      	ite	ne
   2c752:	2302      	movne	r3, #2
   2c754:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2c756:	2e00      	cmp	r6, #0
   2c758:	bf18      	it	ne
   2c75a:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2c75e:	2d00      	cmp	r5, #0
   2c760:	bf14      	ite	ne
   2c762:	210c      	movne	r1, #12
   2c764:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2c766:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
   2c768:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
   2c76c:	bf14      	ite	ne
   2c76e:	f44f 61e0 	movne.w	r1, #1792	; 0x700
   2c772:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2c774:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
   2c776:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
   2c77a:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
   2c77e:	bf14      	ite	ne
   2c780:	f44f 3140 	movne.w	r1, #196608	; 0x30000
   2c784:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
   2c786:	430b      	orrs	r3, r1
    cnf &= ~to_update;
   2c788:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2c78c:	b106      	cbz	r6, 2c790 <nrf_gpio_reconfigure+0x60>
   2c78e:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
   2c790:	f1b8 0f00 	cmp.w	r8, #0
   2c794:	d003      	beq.n	2c79e <nrf_gpio_reconfigure+0x6e>
   2c796:	f898 8000 	ldrb.w	r8, [r8]
   2c79a:	ea4f 0848 	mov.w	r8, r8, lsl #1
   2c79e:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
   2c7a0:	b10d      	cbz	r5, 2c7a6 <nrf_gpio_reconfigure+0x76>
   2c7a2:	782d      	ldrb	r5, [r5, #0]
   2c7a4:	00ad      	lsls	r5, r5, #2
   2c7a6:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
   2c7aa:	b10c      	cbz	r4, 2c7b0 <nrf_gpio_reconfigure+0x80>
   2c7ac:	7822      	ldrb	r2, [r4, #0]
   2c7ae:	0214      	lsls	r4, r2, #8
   2c7b0:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
   2c7b2:	b10f      	cbz	r7, 2c7b8 <nrf_gpio_reconfigure+0x88>
   2c7b4:	783f      	ldrb	r7, [r7, #0]
   2c7b6:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
   2c7b8:	432c      	orrs	r4, r5
   2c7ba:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
   2c7bc:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
   2c7c0:	b002      	add	sp, #8
   2c7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0002c7c6 <nrf_gpio_cfg_sense_set>:
{
   2c7c6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2c7c8:	f10d 030f 	add.w	r3, sp, #15
   2c7cc:	9301      	str	r3, [sp, #4]
   2c7ce:	2300      	movs	r3, #0
{
   2c7d0:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
   2c7d4:	9300      	str	r3, [sp, #0]
   2c7d6:	461a      	mov	r2, r3
   2c7d8:	4619      	mov	r1, r3
   2c7da:	f7ff ffa9 	bl	2c730 <nrf_gpio_reconfigure>
}
   2c7de:	b005      	add	sp, #20
   2c7e0:	f85d fb04 	ldr.w	pc, [sp], #4

0002c7e4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2c7e4:	f7f6 bdde 	b.w	233a4 <_DoInit>

0002c7e8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   2c7e8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   2c7ea:	f7ff fffb 	bl	2c7e4 <SEGGER_RTT_Init>

	return 0;
}
   2c7ee:	2000      	movs	r0, #0
   2c7f0:	bd08      	pop	{r3, pc}

0002c7f2 <z_device_state_init>:
}
   2c7f2:	4770      	bx	lr

0002c7f4 <z_device_ready>:
	if (dev == NULL) {
   2c7f4:	b138      	cbz	r0, 2c806 <z_device_ready+0x12>
	return dev->state->initialized && (dev->state->init_res == 0U);
   2c7f6:	68c3      	ldr	r3, [r0, #12]
   2c7f8:	8818      	ldrh	r0, [r3, #0]
   2c7fa:	f3c0 0008 	ubfx	r0, r0, #0, #9
   2c7fe:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
   2c802:	4258      	negs	r0, r3
   2c804:	4158      	adcs	r0, r3
}
   2c806:	4770      	bx	lr

0002c808 <device_required_foreach>:
int device_required_foreach(const struct device *dev,
			    device_visitor_callback_t visitor_cb,
			    void *context)
{
	size_t handle_count = 0;
	const device_handle_t *handles = device_required_handles_get(dev, &handle_count);
   2c808:	6940      	ldr	r0, [r0, #20]
{
   2c80a:	b470      	push	{r4, r5, r6}
   2c80c:	4613      	mov	r3, r2
   2c80e:	460d      	mov	r5, r1
	if (rv != NULL) {
   2c810:	b960      	cbnz	r0, 2c82c <device_required_foreach+0x24>
	size_t handle_count = 0;
   2c812:	4601      	mov	r1, r0

	return device_visitor(handles, handle_count, visitor_cb, context);
   2c814:	462a      	mov	r2, r5
}
   2c816:	bc70      	pop	{r4, r5, r6}
	return device_visitor(handles, handle_count, visitor_cb, context);
   2c818:	f7f6 be4a 	b.w	234b0 <device_visitor>
			++i;
   2c81c:	3101      	adds	r1, #1
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   2c81e:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
   2c822:	4434      	add	r4, r6
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   2c824:	b2a4      	uxth	r4, r4
   2c826:	4294      	cmp	r4, r2
   2c828:	d9f8      	bls.n	2c81c <device_required_foreach+0x14>
   2c82a:	e7f3      	b.n	2c814 <device_required_foreach+0xc>
		size_t i = 0;
   2c82c:	2100      	movs	r1, #0
		       && (rv[i] != DEVICE_HANDLE_SEP)) {
   2c82e:	f647 76ff 	movw	r6, #32767	; 0x7fff
		while ((rv[i] != DEVICE_HANDLE_ENDS)
   2c832:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   2c836:	e7f2      	b.n	2c81e <device_required_foreach+0x16>

0002c838 <k_heap_init>:
{
   2c838:	b410      	push	{r4}
	sys_dlist_init(&w->waitq);
   2c83a:	f100 040c 	add.w	r4, r0, #12
   2c83e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   2c842:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   2c844:	f7e4 b91a 	b.w	10a7c <sys_heap_init>

0002c848 <k_mem_slab_init>:
{
   2c848:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   2c84a:	2400      	movs	r4, #0
   2c84c:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
   2c84e:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2c850:	ea41 0402 	orr.w	r4, r1, r2
   2c854:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   2c858:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
   2c85c:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   2c85e:	d10c      	bne.n	2c87a <k_mem_slab_init+0x32>
	slab->free_list = NULL;
   2c860:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
   2c862:	42a3      	cmp	r3, r4
   2c864:	d103      	bne.n	2c86e <k_mem_slab_init+0x26>
   2c866:	e9c0 0000 	strd	r0, r0, [r0]
}
   2c86a:	2000      	movs	r0, #0
}
   2c86c:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   2c86e:	6985      	ldr	r5, [r0, #24]
   2c870:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   2c872:	3401      	adds	r4, #1
		slab->free_list = p;
   2c874:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
   2c876:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   2c878:	e7f3      	b.n	2c862 <k_mem_slab_init+0x1a>
		return -EINVAL;
   2c87a:	f06f 0015 	mvn.w	r0, #21
	return rc;
   2c87e:	e7f5      	b.n	2c86c <k_mem_slab_init+0x24>

0002c880 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   2c880:	f3ef 8005 	mrs	r0, IPSR
}
   2c884:	3800      	subs	r0, #0
   2c886:	bf18      	it	ne
   2c888:	2001      	movne	r0, #1
   2c88a:	4770      	bx	lr

0002c88c <k_thread_name_get>:
}
   2c88c:	3080      	adds	r0, #128	; 0x80
   2c88e:	4770      	bx	lr

0002c890 <z_impl_k_thread_start>:
	z_sched_start(thread);
   2c890:	f7f9 bbca 	b.w	26028 <z_sched_start>

0002c894 <z_impl_k_thread_stack_space_get>:
{
   2c894:	b510      	push	{r4, lr}
	size_t size = thread->stack_info.size;
   2c896:	e9d0 4229 	ldrd	r4, r2, [r0, #164]	; 0xa4
	size_t unused = 0;
   2c89a:	2300      	movs	r3, #0
	for (size_t i = 0; i < size; i++) {
   2c89c:	4293      	cmp	r3, r2
   2c89e:	d102      	bne.n	2c8a6 <z_impl_k_thread_stack_space_get+0x12>
	*unused_ptr = unused;
   2c8a0:	600b      	str	r3, [r1, #0]
}
   2c8a2:	2000      	movs	r0, #0
   2c8a4:	bd10      	pop	{r4, pc}
		if ((checked_stack[i]) == 0xaaU) {
   2c8a6:	5ce0      	ldrb	r0, [r4, r3]
   2c8a8:	28aa      	cmp	r0, #170	; 0xaa
   2c8aa:	d1f9      	bne.n	2c8a0 <z_impl_k_thread_stack_space_get+0xc>
			unused++;
   2c8ac:	3301      	adds	r3, #1
	for (size_t i = 0; i < size; i++) {
   2c8ae:	e7f5      	b.n	2c89c <z_impl_k_thread_stack_space_get+0x8>

0002c8b0 <z_thread_mark_switched_out>:
	z_sched_usage_stop();
   2c8b0:	f7fa ba4c 	b.w	26d4c <z_sched_usage_stop>

0002c8b4 <k_thread_runtime_stats_get>:
{
   2c8b4:	b510      	push	{r4, lr}
   2c8b6:	460c      	mov	r4, r1
	if ((thread == NULL) || (stats == NULL)) {
   2c8b8:	b150      	cbz	r0, 2c8d0 <k_thread_runtime_stats_get+0x1c>
   2c8ba:	b149      	cbz	r1, 2c8d0 <k_thread_runtime_stats_get+0x1c>
	*stats = (k_thread_runtime_stats_t) {};
   2c8bc:	2200      	movs	r2, #0
   2c8be:	2300      	movs	r3, #0
   2c8c0:	e9c1 2300 	strd	r2, r3, [r1]
	stats->execution_cycles = z_sched_thread_usage(thread);
   2c8c4:	f7fa fab2 	bl	26e2c <z_sched_thread_usage>
   2c8c8:	e9c4 0100 	strd	r0, r1, [r4]
	return 0;
   2c8cc:	2000      	movs	r0, #0
}
   2c8ce:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2c8d0:	f06f 0015 	mvn.w	r0, #21
   2c8d4:	e7fb      	b.n	2c8ce <k_thread_runtime_stats_get+0x1a>

0002c8d6 <z_pm_save_idle_exit>:
{
   2c8d6:	b508      	push	{r3, lr}
	pm_system_resume();
   2c8d8:	f7e8 ff2c 	bl	15734 <pm_system_resume>
}
   2c8dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
   2c8e0:	f7ff bedb 	b.w	2c69a <sys_clock_idle_exit>

0002c8e4 <z_impl_k_mutex_init>:
{
   2c8e4:	4603      	mov	r3, r0
	mutex->owner = NULL;
   2c8e6:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   2c8e8:	e9c3 0002 	strd	r0, r0, [r3, #8]
   2c8ec:	e9c3 3300 	strd	r3, r3, [r3]
}
   2c8f0:	4770      	bx	lr

0002c8f2 <z_queue_node_peek>:
{
   2c8f2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   2c8f4:	4604      	mov	r4, r0
   2c8f6:	b130      	cbz	r0, 2c906 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2c8f8:	6802      	ldr	r2, [r0, #0]
   2c8fa:	0793      	lsls	r3, r2, #30
   2c8fc:	d003      	beq.n	2c906 <z_queue_node_peek+0x14>
		ret = anode->data;
   2c8fe:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   2c900:	b109      	cbz	r1, 2c906 <z_queue_node_peek+0x14>
			k_free(anode);
   2c902:	f000 f961 	bl	2cbc8 <k_free>
}
   2c906:	4620      	mov	r0, r4
   2c908:	bd10      	pop	{r4, pc}

0002c90a <z_impl_k_queue_init>:
	list->head = NULL;
   2c90a:	2300      	movs	r3, #0
	list->tail = NULL;
   2c90c:	e9c0 3300 	strd	r3, r3, [r0]
	queue->lock = (struct k_spinlock) {};
   2c910:	6083      	str	r3, [r0, #8]
	sys_dlist_init(&w->waitq);
   2c912:	f100 030c 	add.w	r3, r0, #12
   2c916:	e9c0 3303 	strd	r3, r3, [r0, #12]
	sys_dlist_init(&queue->poll_events);
   2c91a:	f100 0314 	add.w	r3, r0, #20
   2c91e:	e9c0 3305 	strd	r3, r3, [r0, #20]
}
   2c922:	4770      	bx	lr

0002c924 <k_queue_append>:
{
   2c924:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   2c926:	2301      	movs	r3, #1
   2c928:	9300      	str	r3, [sp, #0]
   2c92a:	2300      	movs	r3, #0
{
   2c92c:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   2c92e:	4619      	mov	r1, r3
   2c930:	f7f8 f872 	bl	24a18 <queue_insert>
}
   2c934:	b003      	add	sp, #12
   2c936:	f85d fb04 	ldr.w	pc, [sp], #4

0002c93a <k_queue_prepend>:
{
   2c93a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   2c93c:	2300      	movs	r3, #0
{
   2c93e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   2c940:	9300      	str	r3, [sp, #0]
   2c942:	4619      	mov	r1, r3
   2c944:	f7f8 f868 	bl	24a18 <queue_insert>
}
   2c948:	b003      	add	sp, #12
   2c94a:	f85d fb04 	ldr.w	pc, [sp], #4

0002c94e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
   2c94e:	b15a      	cbz	r2, 2c968 <z_impl_k_sem_init+0x1a>
   2c950:	428a      	cmp	r2, r1
   2c952:	d309      	bcc.n	2c968 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   2c954:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   2c958:	e9c0 1202 	strd	r1, r2, [r0, #8]
   2c95c:	e9c0 0000 	strd	r0, r0, [r0]
   2c960:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   2c964:	2000      	movs	r0, #0
   2c966:	4770      	bx	lr
		return -EINVAL;
   2c968:	f06f 0015 	mvn.w	r0, #21
}
   2c96c:	4770      	bx	lr

0002c96e <notify_queue_locked>:
	if (queue != NULL) {
   2c96e:	b120      	cbz	r0, 2c97a <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
   2c970:	2200      	movs	r2, #0
   2c972:	4611      	mov	r1, r2
   2c974:	30c8      	adds	r0, #200	; 0xc8
   2c976:	f7fa b971 	b.w	26c5c <z_sched_wake>
}
   2c97a:	4770      	bx	lr

0002c97c <unschedule_locked>:
	bool ret = flag_test(flagp, bit);
   2c97c:	68c3      	ldr	r3, [r0, #12]
{
   2c97e:	b510      	push	{r4, lr}
	*flagp &= ~BIT(bit);
   2c980:	f023 0208 	bic.w	r2, r3, #8
	return (*flagp & BIT(bit)) != 0U;
   2c984:	f3c3 04c0 	ubfx	r4, r3, #3, #1
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2c988:	071b      	lsls	r3, r3, #28
	*flagp &= ~BIT(bit);
   2c98a:	60c2      	str	r2, [r0, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_DELAYED_BIT)) {
   2c98c:	d502      	bpl.n	2c994 <unschedule_locked+0x18>
		z_abort_timeout(&dwork->timeout);
   2c98e:	3010      	adds	r0, #16
   2c990:	f7fa fc06 	bl	271a0 <z_abort_timeout>
}
   2c994:	4620      	mov	r0, r4
   2c996:	bd10      	pop	{r4, pc}

0002c998 <cancel_async_locked>:
{
   2c998:	4603      	mov	r3, r0
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2c99a:	68c0      	ldr	r0, [r0, #12]
{
   2c99c:	b510      	push	{r4, lr}
	if (!flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
   2c99e:	0784      	lsls	r4, r0, #30
   2c9a0:	f3c0 0140 	ubfx	r1, r0, #1, #1
   2c9a4:	d416      	bmi.n	2c9d4 <cancel_async_locked+0x3c>
	*flagp &= ~BIT(bit);
   2c9a6:	f020 0404 	bic.w	r4, r0, #4
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2c9aa:	0740      	lsls	r0, r0, #29
		queue_remove_locked(work->queue, work);
   2c9ac:	689a      	ldr	r2, [r3, #8]
	*flagp &= ~BIT(bit);
   2c9ae:	60dc      	str	r4, [r3, #12]
	if (flag_test_and_clear(&work->flags, K_WORK_QUEUED_BIT)) {
   2c9b0:	d510      	bpl.n	2c9d4 <cancel_async_locked+0x3c>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c9b2:	f8d2 00c0 	ldr.w	r0, [r2, #192]	; 0xc0
   2c9b6:	b168      	cbz	r0, 2c9d4 <cancel_async_locked+0x3c>
   2c9b8:	4283      	cmp	r3, r0
   2c9ba:	d11d      	bne.n	2c9f8 <cancel_async_locked+0x60>
Z_GENLIST_REMOVE(slist, snode)
   2c9bc:	6818      	ldr	r0, [r3, #0]
   2c9be:	b999      	cbnz	r1, 2c9e8 <cancel_async_locked+0x50>
   2c9c0:	f8d2 10c4 	ldr.w	r1, [r2, #196]	; 0xc4
	list->head = node;
   2c9c4:	f8c2 00c0 	str.w	r0, [r2, #192]	; 0xc0
Z_GENLIST_REMOVE(slist, snode)
   2c9c8:	428b      	cmp	r3, r1
   2c9ca:	d101      	bne.n	2c9d0 <cancel_async_locked+0x38>
	list->tail = node;
   2c9cc:	f8c2 00c4 	str.w	r0, [r2, #196]	; 0xc4
	parent->next = child;
   2c9d0:	2200      	movs	r2, #0
   2c9d2:	601a      	str	r2, [r3, #0]
	return flags_get(&work->flags) & K_WORK_MASK;
   2c9d4:	68da      	ldr	r2, [r3, #12]
	if (ret != 0) {
   2c9d6:	f012 000f 	ands.w	r0, r2, #15
	*flagp |= BIT(bit);
   2c9da:	bf1e      	ittt	ne
   2c9dc:	f042 0202 	orrne.w	r2, r2, #2
   2c9e0:	60da      	strne	r2, [r3, #12]
	return flags_get(&work->flags) & K_WORK_MASK;
   2c9e2:	f002 000f 	andne.w	r0, r2, #15
}
   2c9e6:	bd10      	pop	{r4, pc}
   2c9e8:	6008      	str	r0, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
   2c9ea:	f8d2 00c4 	ldr.w	r0, [r2, #196]	; 0xc4
   2c9ee:	4283      	cmp	r3, r0
	list->tail = node;
   2c9f0:	bf08      	it	eq
   2c9f2:	f8c2 10c4 	streq.w	r1, [r2, #196]	; 0xc4
}
   2c9f6:	e7eb      	b.n	2c9d0 <cancel_async_locked+0x38>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   2c9f8:	4601      	mov	r1, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2c9fa:	6800      	ldr	r0, [r0, #0]
   2c9fc:	e7db      	b.n	2c9b6 <cancel_async_locked+0x1e>

0002c9fe <z_sched_prio_cmp>:
	int32_t b1 = thread_1->base.prio;
   2c9fe:	f990 300e 	ldrsb.w	r3, [r0, #14]
	int32_t b2 = thread_2->base.prio;
   2ca02:	f991 000e 	ldrsb.w	r0, [r1, #14]
	if (b1 != b2) {
   2ca06:	4283      	cmp	r3, r0
		return b2 - b1;
   2ca08:	bf14      	ite	ne
   2ca0a:	1ac0      	subne	r0, r0, r3
	return 0;
   2ca0c:	2000      	moveq	r0, #0
}
   2ca0e:	4770      	bx	lr

0002ca10 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   2ca10:	4603      	mov	r3, r0
   2ca12:	b920      	cbnz	r0, 2ca1e <z_reschedule_irqlock+0xe>
   2ca14:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
   2ca18:	b90a      	cbnz	r2, 2ca1e <z_reschedule_irqlock+0xe>
   2ca1a:	f7e9 bb11 	b.w	16040 <arch_swap>
   2ca1e:	f383 8811 	msr	BASEPRI, r3
   2ca22:	f3bf 8f6f 	isb	sy
}
   2ca26:	4770      	bx	lr

0002ca28 <z_reschedule_unlocked>:
	__asm__ volatile(
   2ca28:	f04f 0340 	mov.w	r3, #64	; 0x40
   2ca2c:	f3ef 8011 	mrs	r0, BASEPRI
   2ca30:	f383 8812 	msr	BASEPRI_MAX, r3
   2ca34:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   2ca38:	f7ff bfea 	b.w	2ca10 <z_reschedule_irqlock>

0002ca3c <z_priq_dumb_best>:
{
   2ca3c:	4603      	mov	r3, r0
	return list->head == list;
   2ca3e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ca40:	4283      	cmp	r3, r0
   2ca42:	d003      	beq.n	2ca4c <z_priq_dumb_best+0x10>
	if (n != NULL) {
   2ca44:	2800      	cmp	r0, #0
   2ca46:	bf38      	it	cc
   2ca48:	2000      	movcc	r0, #0
   2ca4a:	4770      	bx	lr
	struct k_thread *thread = NULL;
   2ca4c:	2000      	movs	r0, #0
}
   2ca4e:	4770      	bx	lr

0002ca50 <z_unpend_all>:
{
   2ca50:	b538      	push	{r3, r4, r5, lr}
   2ca52:	4605      	mov	r5, r0
	int need_sched = 0;
   2ca54:	2000      	movs	r0, #0
	return list->head == list;
   2ca56:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2ca58:	42a5      	cmp	r5, r4
   2ca5a:	d000      	beq.n	2ca5e <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   2ca5c:	b904      	cbnz	r4, 2ca60 <z_unpend_all+0x10>
}
   2ca5e:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   2ca60:	4620      	mov	r0, r4
   2ca62:	f7f9 f8f5 	bl	25c50 <z_unpend_thread>
		z_ready_thread(thread);
   2ca66:	4620      	mov	r0, r4
   2ca68:	f7f9 fa96 	bl	25f98 <z_ready_thread>
		need_sched = 1;
   2ca6c:	2001      	movs	r0, #1
   2ca6e:	e7f2      	b.n	2ca56 <z_unpend_all+0x6>

0002ca70 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
   2ca70:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
   2ca72:	f7fa fd47 	bl	27504 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   2ca76:	bd08      	pop	{r3, pc}

0002ca78 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
   2ca78:	f7fa bd44 	b.w	27504 <sys_clock_tick_get>

0002ca7c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
   2ca7c:	b108      	cbz	r0, 2ca82 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
   2ca7e:	f7ea b9f5 	b.w	16e6c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
   2ca82:	4770      	bx	lr

0002ca84 <sys_clock_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
   2ca84:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ca86:	1c4b      	adds	r3, r1, #1
   2ca88:	bf08      	it	eq
   2ca8a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2ca8e:	4604      	mov	r4, r0
   2ca90:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2ca92:	d013      	beq.n	2cabc <sys_clock_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2ca94:	ea54 0105 	orrs.w	r1, r4, r5
   2ca98:	d103      	bne.n	2caa2 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
   2ca9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
   2ca9e:	f7fa bd31 	b.w	27504 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2caa2:	f06f 0101 	mvn.w	r1, #1
   2caa6:	1a0a      	subs	r2, r1, r0
   2caa8:	f04f 31ff 	mov.w	r1, #4294967295
   2caac:	eb61 0305 	sbc.w	r3, r1, r5
   2cab0:	2a00      	cmp	r2, #0
   2cab2:	f173 0100 	sbcs.w	r1, r3, #0
   2cab6:	db02      	blt.n	2cabe <sys_clock_timeout_end_calc+0x3a>
			return Z_TICK_ABS(dt);
   2cab8:	4610      	mov	r0, r2
   2caba:	4619      	mov	r1, r3
}
   2cabc:	bd38      	pop	{r3, r4, r5, pc}
		return sys_clock_tick_get() + MAX(1, dt);
   2cabe:	f7fa fd21 	bl	27504 <sys_clock_tick_get>
   2cac2:	2c01      	cmp	r4, #1
   2cac4:	f175 0300 	sbcs.w	r3, r5, #0
   2cac8:	bfbc      	itt	lt
   2caca:	2401      	movlt	r4, #1
   2cacc:	2500      	movlt	r5, #0
   2cace:	1820      	adds	r0, r4, r0
   2cad0:	eb45 0101 	adc.w	r1, r5, r1
   2cad4:	e7f2      	b.n	2cabc <sys_clock_timeout_end_calc+0x38>

0002cad6 <k_timer_init>:
	timer->status = 0U;
   2cad6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   2cad8:	e9c0 1208 	strd	r1, r2, [r0, #32]
   2cadc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
   2cae0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2cae4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   2cae8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   2caea:	6343      	str	r3, [r0, #52]	; 0x34
}
   2caec:	4770      	bx	lr

0002caee <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   2caee:	b510      	push	{r4, lr}
   2caf0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2caf2:	f7fa fb55 	bl	271a0 <z_abort_timeout>

	if (inactive) {
   2caf6:	b9b0      	cbnz	r0, 2cb26 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   2caf8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2cafa:	b10b      	cbz	r3, 2cb00 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   2cafc:	4620      	mov	r0, r4
   2cafe:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   2cb00:	f104 0018 	add.w	r0, r4, #24
   2cb04:	f7f9 fdac 	bl	26660 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
   2cb08:	b168      	cbz	r0, 2cb26 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
   2cb0a:	f7f9 fa45 	bl	25f98 <z_ready_thread>
   2cb0e:	f04f 0340 	mov.w	r3, #64	; 0x40
   2cb12:	f3ef 8011 	mrs	r0, BASEPRI
   2cb16:	f383 8812 	msr	BASEPRI_MAX, r3
   2cb1a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
   2cb1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2cb22:	f7ff bf75 	b.w	2ca10 <z_reschedule_irqlock>
   2cb26:	bd10      	pop	{r4, pc}

0002cb28 <add_event>:
{
   2cb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cb2a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2cb2c:	e9d0 2300 	ldrd	r2, r3, [r0]
   2cb30:	4290      	cmp	r0, r2
   2cb32:	4604      	mov	r4, r0
   2cb34:	460d      	mov	r5, r1
   2cb36:	d105      	bne.n	2cb44 <add_event+0x1c>
	sys_dnode_t *const tail = list->tail;
   2cb38:	6863      	ldr	r3, [r4, #4]
	node->prev = tail;
   2cb3a:	e9c5 4300 	strd	r4, r3, [r5]
	tail->next = node;
   2cb3e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   2cb40:	6065      	str	r5, [r4, #4]
}
   2cb42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   2cb44:	2b00      	cmp	r3, #0
   2cb46:	d0f7      	beq.n	2cb38 <add_event+0x10>
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2cb48:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2cb4a:	b100      	cbz	r0, 2cb4e <add_event+0x26>
   2cb4c:	3868      	subs	r0, #104	; 0x68
   2cb4e:	b107      	cbz	r7, 2cb52 <add_event+0x2a>
   2cb50:	3f68      	subs	r7, #104	; 0x68
		(z_sched_prio_cmp(poller_thread(pending->poller),
   2cb52:	4639      	mov	r1, r7
   2cb54:	f7ff ff53 	bl	2c9fe <z_sched_prio_cmp>
	if ((pending == NULL) ||
   2cb58:	2800      	cmp	r0, #0
   2cb5a:	dced      	bgt.n	2cb38 <add_event+0x10>
	return list->head == list;
   2cb5c:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2cb5e:	42b4      	cmp	r4, r6
   2cb60:	d0ea      	beq.n	2cb38 <add_event+0x10>
   2cb62:	2e00      	cmp	r6, #0
   2cb64:	bf38      	it	cc
   2cb66:	2600      	movcc	r6, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2cb68:	2e00      	cmp	r6, #0
   2cb6a:	d0e5      	beq.n	2cb38 <add_event+0x10>
		if (z_sched_prio_cmp(poller_thread(poller),
   2cb6c:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2cb6e:	b101      	cbz	r1, 2cb72 <add_event+0x4a>
   2cb70:	3968      	subs	r1, #104	; 0x68
		if (z_sched_prio_cmp(poller_thread(poller),
   2cb72:	4638      	mov	r0, r7
   2cb74:	f7ff ff43 	bl	2c9fe <z_sched_prio_cmp>
   2cb78:	2800      	cmp	r0, #0
   2cb7a:	dd05      	ble.n	2cb88 <add_event+0x60>
	sys_dnode_t *const prev = successor->prev;
   2cb7c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   2cb7e:	e9c5 6300 	strd	r6, r3, [r5]
	prev->next = node;
   2cb82:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2cb84:	6075      	str	r5, [r6, #4]
			return;
   2cb86:	e7dc      	b.n	2cb42 <add_event+0x1a>
	return (node == list->tail) ? NULL : node->next;
   2cb88:	6863      	ldr	r3, [r4, #4]
   2cb8a:	42b3      	cmp	r3, r6
   2cb8c:	d0d4      	beq.n	2cb38 <add_event+0x10>
   2cb8e:	6836      	ldr	r6, [r6, #0]
   2cb90:	e7ea      	b.n	2cb68 <add_event+0x40>

0002cb92 <z_handle_obj_poll_events>:
{
   2cb92:	4603      	mov	r3, r0
	return list->head == list;
   2cb94:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   2cb96:	4283      	cmp	r3, r0
   2cb98:	d008      	beq.n	2cbac <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
   2cb9a:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
   2cb9e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
   2cba0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2cba2:	2300      	movs	r3, #0
	node->prev = NULL;
   2cba4:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   2cba8:	f7fb b802 	b.w	27bb0 <signal_poll_event>
}
   2cbac:	4770      	bx	lr

0002cbae <z_impl_k_poll_signal_init>:
	sig->signaled = 0U;
   2cbae:	2300      	movs	r3, #0
	list->tail = (sys_dnode_t *)list;
   2cbb0:	e9c0 0000 	strd	r0, r0, [r0]
   2cbb4:	6083      	str	r3, [r0, #8]
}
   2cbb6:	4770      	bx	lr

0002cbb8 <z_impl_k_poll_signal_reset>:
	sig->signaled = 0U;
   2cbb8:	2300      	movs	r3, #0
   2cbba:	6083      	str	r3, [r0, #8]
}
   2cbbc:	4770      	bx	lr

0002cbbe <z_impl_k_poll_signal_check>:
	*signaled = sig->signaled;
   2cbbe:	6883      	ldr	r3, [r0, #8]
   2cbc0:	600b      	str	r3, [r1, #0]
	*result = sig->result;
   2cbc2:	68c3      	ldr	r3, [r0, #12]
   2cbc4:	6013      	str	r3, [r2, #0]
}
   2cbc6:	4770      	bx	lr

0002cbc8 <k_free>:
	if (ptr != NULL) {
   2cbc8:	b120      	cbz	r0, 2cbd4 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   2cbca:	1f01      	subs	r1, r0, #4
   2cbcc:	f850 0c04 	ldr.w	r0, [r0, #-4]
   2cbd0:	f7f6 bf38 	b.w	23a44 <k_heap_free>
}
   2cbd4:	4770      	bx	lr

0002cbd6 <boot_banner>:
#else
	printk("*** Booting Zephyr OS version %s %s ***\n",
	       KERNEL_VERSION_STRING, BOOT_DELAY_BANNER);
#endif
#endif
}
   2cbd6:	4770      	bx	lr

0002cbd8 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
   2cbd8:	4770      	bx	lr

0002cbda <memcmp>:
   2cbda:	b530      	push	{r4, r5, lr}
   2cbdc:	3901      	subs	r1, #1
   2cbde:	2400      	movs	r4, #0
   2cbe0:	42a2      	cmp	r2, r4
   2cbe2:	d101      	bne.n	2cbe8 <memcmp+0xe>
   2cbe4:	2000      	movs	r0, #0
   2cbe6:	e005      	b.n	2cbf4 <memcmp+0x1a>
   2cbe8:	5d03      	ldrb	r3, [r0, r4]
   2cbea:	3401      	adds	r4, #1
   2cbec:	5d0d      	ldrb	r5, [r1, r4]
   2cbee:	42ab      	cmp	r3, r5
   2cbf0:	d0f6      	beq.n	2cbe0 <memcmp+0x6>
   2cbf2:	1b58      	subs	r0, r3, r5
   2cbf4:	bd30      	pop	{r4, r5, pc}

0002cbf6 <memcpy>:
   2cbf6:	440a      	add	r2, r1
   2cbf8:	4291      	cmp	r1, r2
   2cbfa:	f100 33ff 	add.w	r3, r0, #4294967295
   2cbfe:	d100      	bne.n	2cc02 <memcpy+0xc>
   2cc00:	4770      	bx	lr
   2cc02:	b510      	push	{r4, lr}
   2cc04:	f811 4b01 	ldrb.w	r4, [r1], #1
   2cc08:	f803 4f01 	strb.w	r4, [r3, #1]!
   2cc0c:	4291      	cmp	r1, r2
   2cc0e:	d1f9      	bne.n	2cc04 <memcpy+0xe>
   2cc10:	bd10      	pop	{r4, pc}

0002cc12 <memmove>:
   2cc12:	4288      	cmp	r0, r1
   2cc14:	b510      	push	{r4, lr}
   2cc16:	eb01 0402 	add.w	r4, r1, r2
   2cc1a:	d902      	bls.n	2cc22 <memmove+0x10>
   2cc1c:	4284      	cmp	r4, r0
   2cc1e:	4623      	mov	r3, r4
   2cc20:	d807      	bhi.n	2cc32 <memmove+0x20>
   2cc22:	1e43      	subs	r3, r0, #1
   2cc24:	42a1      	cmp	r1, r4
   2cc26:	d008      	beq.n	2cc3a <memmove+0x28>
   2cc28:	f811 2b01 	ldrb.w	r2, [r1], #1
   2cc2c:	f803 2f01 	strb.w	r2, [r3, #1]!
   2cc30:	e7f8      	b.n	2cc24 <memmove+0x12>
   2cc32:	4402      	add	r2, r0
   2cc34:	4601      	mov	r1, r0
   2cc36:	428a      	cmp	r2, r1
   2cc38:	d100      	bne.n	2cc3c <memmove+0x2a>
   2cc3a:	bd10      	pop	{r4, pc}
   2cc3c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2cc40:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2cc44:	e7f7      	b.n	2cc36 <memmove+0x24>

0002cc46 <memset>:
   2cc46:	4402      	add	r2, r0
   2cc48:	4603      	mov	r3, r0
   2cc4a:	4293      	cmp	r3, r2
   2cc4c:	d100      	bne.n	2cc50 <memset+0xa>
   2cc4e:	4770      	bx	lr
   2cc50:	f803 1b01 	strb.w	r1, [r3], #1
   2cc54:	e7f9      	b.n	2cc4a <memset+0x4>

0002cc56 <strchr>:
   2cc56:	b2c9      	uxtb	r1, r1
   2cc58:	4603      	mov	r3, r0
   2cc5a:	4618      	mov	r0, r3
   2cc5c:	f813 2b01 	ldrb.w	r2, [r3], #1
   2cc60:	b112      	cbz	r2, 2cc68 <strchr+0x12>
   2cc62:	428a      	cmp	r2, r1
   2cc64:	d1f9      	bne.n	2cc5a <strchr+0x4>
   2cc66:	4770      	bx	lr
   2cc68:	2900      	cmp	r1, #0
   2cc6a:	bf18      	it	ne
   2cc6c:	2000      	movne	r0, #0
   2cc6e:	4770      	bx	lr

0002cc70 <strcpy>:
   2cc70:	4603      	mov	r3, r0
   2cc72:	f811 2b01 	ldrb.w	r2, [r1], #1
   2cc76:	f803 2b01 	strb.w	r2, [r3], #1
   2cc7a:	2a00      	cmp	r2, #0
   2cc7c:	d1f9      	bne.n	2cc72 <strcpy+0x2>
   2cc7e:	4770      	bx	lr

0002cc80 <strncmp>:
   2cc80:	b510      	push	{r4, lr}
   2cc82:	b16a      	cbz	r2, 2cca0 <strncmp+0x20>
   2cc84:	3901      	subs	r1, #1
   2cc86:	1884      	adds	r4, r0, r2
   2cc88:	f810 3b01 	ldrb.w	r3, [r0], #1
   2cc8c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   2cc90:	4293      	cmp	r3, r2
   2cc92:	d103      	bne.n	2cc9c <strncmp+0x1c>
   2cc94:	42a0      	cmp	r0, r4
   2cc96:	d001      	beq.n	2cc9c <strncmp+0x1c>
   2cc98:	2b00      	cmp	r3, #0
   2cc9a:	d1f5      	bne.n	2cc88 <strncmp+0x8>
   2cc9c:	1a98      	subs	r0, r3, r2
   2cc9e:	bd10      	pop	{r4, pc}
   2cca0:	4610      	mov	r0, r2
   2cca2:	e7fc      	b.n	2cc9e <strncmp+0x1e>

0002cca4 <strncpy>:
   2cca4:	b510      	push	{r4, lr}
   2cca6:	3901      	subs	r1, #1
   2cca8:	4603      	mov	r3, r0
   2ccaa:	b132      	cbz	r2, 2ccba <strncpy+0x16>
   2ccac:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2ccb0:	f803 4b01 	strb.w	r4, [r3], #1
   2ccb4:	3a01      	subs	r2, #1
   2ccb6:	2c00      	cmp	r4, #0
   2ccb8:	d1f7      	bne.n	2ccaa <strncpy+0x6>
   2ccba:	441a      	add	r2, r3
   2ccbc:	2100      	movs	r1, #0
   2ccbe:	4293      	cmp	r3, r2
   2ccc0:	d100      	bne.n	2ccc4 <strncpy+0x20>
   2ccc2:	bd10      	pop	{r4, pc}
   2ccc4:	f803 1b01 	strb.w	r1, [r3], #1
   2ccc8:	e7f9      	b.n	2ccbe <strncpy+0x1a>

0002ccca <strnlen>:
   2ccca:	b510      	push	{r4, lr}
   2cccc:	4602      	mov	r2, r0
   2ccce:	4401      	add	r1, r0
   2ccd0:	428a      	cmp	r2, r1
   2ccd2:	4613      	mov	r3, r2
   2ccd4:	d101      	bne.n	2ccda <strnlen+0x10>
   2ccd6:	1a18      	subs	r0, r3, r0
   2ccd8:	bd10      	pop	{r4, pc}
   2ccda:	781c      	ldrb	r4, [r3, #0]
   2ccdc:	3201      	adds	r2, #1
   2ccde:	2c00      	cmp	r4, #0
   2cce0:	d1f6      	bne.n	2ccd0 <strnlen+0x6>
   2cce2:	e7f8      	b.n	2ccd6 <strnlen+0xc>

0002cce4 <strstr>:
   2cce4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2cce6:	780c      	ldrb	r4, [r1, #0]
   2cce8:	b164      	cbz	r4, 2cd04 <strstr+0x20>
   2ccea:	4603      	mov	r3, r0
   2ccec:	781a      	ldrb	r2, [r3, #0]
   2ccee:	4618      	mov	r0, r3
   2ccf0:	1c5e      	adds	r6, r3, #1
   2ccf2:	b90a      	cbnz	r2, 2ccf8 <strstr+0x14>
   2ccf4:	4610      	mov	r0, r2
   2ccf6:	e005      	b.n	2cd04 <strstr+0x20>
   2ccf8:	4294      	cmp	r4, r2
   2ccfa:	d108      	bne.n	2cd0e <strstr+0x2a>
   2ccfc:	460d      	mov	r5, r1
   2ccfe:	f815 2f01 	ldrb.w	r2, [r5, #1]!
   2cd02:	b902      	cbnz	r2, 2cd06 <strstr+0x22>
   2cd04:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2cd06:	f813 7f01 	ldrb.w	r7, [r3, #1]!
   2cd0a:	4297      	cmp	r7, r2
   2cd0c:	d0f7      	beq.n	2ccfe <strstr+0x1a>
   2cd0e:	4633      	mov	r3, r6
   2cd10:	e7ec      	b.n	2ccec <strstr+0x8>

0002cd12 <__ssputs_r>:
   2cd12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cd16:	688e      	ldr	r6, [r1, #8]
   2cd18:	429e      	cmp	r6, r3
   2cd1a:	4682      	mov	sl, r0
   2cd1c:	460c      	mov	r4, r1
   2cd1e:	4690      	mov	r8, r2
   2cd20:	461f      	mov	r7, r3
   2cd22:	d838      	bhi.n	2cd96 <__ssputs_r+0x84>
   2cd24:	898a      	ldrh	r2, [r1, #12]
   2cd26:	f412 6f90 	tst.w	r2, #1152	; 0x480
   2cd2a:	d032      	beq.n	2cd92 <__ssputs_r+0x80>
   2cd2c:	6825      	ldr	r5, [r4, #0]
   2cd2e:	6909      	ldr	r1, [r1, #16]
   2cd30:	eba5 0901 	sub.w	r9, r5, r1
   2cd34:	6965      	ldr	r5, [r4, #20]
   2cd36:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2cd3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2cd3e:	3301      	adds	r3, #1
   2cd40:	444b      	add	r3, r9
   2cd42:	106d      	asrs	r5, r5, #1
   2cd44:	429d      	cmp	r5, r3
   2cd46:	bf38      	it	cc
   2cd48:	461d      	movcc	r5, r3
   2cd4a:	0553      	lsls	r3, r2, #21
   2cd4c:	d531      	bpl.n	2cdb2 <__ssputs_r+0xa0>
   2cd4e:	4629      	mov	r1, r5
   2cd50:	f7fb fa96 	bl	28280 <_malloc_r>
   2cd54:	4606      	mov	r6, r0
   2cd56:	b950      	cbnz	r0, 2cd6e <__ssputs_r+0x5c>
   2cd58:	230c      	movs	r3, #12
   2cd5a:	f8ca 3000 	str.w	r3, [sl]
   2cd5e:	89a3      	ldrh	r3, [r4, #12]
   2cd60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2cd64:	81a3      	strh	r3, [r4, #12]
   2cd66:	f04f 30ff 	mov.w	r0, #4294967295
   2cd6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2cd6e:	6921      	ldr	r1, [r4, #16]
   2cd70:	464a      	mov	r2, r9
   2cd72:	f7ff ff40 	bl	2cbf6 <memcpy>
   2cd76:	89a3      	ldrh	r3, [r4, #12]
   2cd78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
   2cd7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   2cd80:	81a3      	strh	r3, [r4, #12]
   2cd82:	6126      	str	r6, [r4, #16]
   2cd84:	6165      	str	r5, [r4, #20]
   2cd86:	444e      	add	r6, r9
   2cd88:	eba5 0509 	sub.w	r5, r5, r9
   2cd8c:	6026      	str	r6, [r4, #0]
   2cd8e:	60a5      	str	r5, [r4, #8]
   2cd90:	463e      	mov	r6, r7
   2cd92:	42be      	cmp	r6, r7
   2cd94:	d900      	bls.n	2cd98 <__ssputs_r+0x86>
   2cd96:	463e      	mov	r6, r7
   2cd98:	4632      	mov	r2, r6
   2cd9a:	6820      	ldr	r0, [r4, #0]
   2cd9c:	4641      	mov	r1, r8
   2cd9e:	f7ff ff38 	bl	2cc12 <memmove>
   2cda2:	68a3      	ldr	r3, [r4, #8]
   2cda4:	6822      	ldr	r2, [r4, #0]
   2cda6:	1b9b      	subs	r3, r3, r6
   2cda8:	4432      	add	r2, r6
   2cdaa:	60a3      	str	r3, [r4, #8]
   2cdac:	6022      	str	r2, [r4, #0]
   2cdae:	2000      	movs	r0, #0
   2cdb0:	e7db      	b.n	2cd6a <__ssputs_r+0x58>
   2cdb2:	462a      	mov	r2, r5
   2cdb4:	f000 f875 	bl	2cea2 <_realloc_r>
   2cdb8:	4606      	mov	r6, r0
   2cdba:	2800      	cmp	r0, #0
   2cdbc:	d1e1      	bne.n	2cd82 <__ssputs_r+0x70>
   2cdbe:	6921      	ldr	r1, [r4, #16]
   2cdc0:	4650      	mov	r0, sl
   2cdc2:	f7fb fa0f 	bl	281e4 <_free_r>
   2cdc6:	e7c7      	b.n	2cd58 <__ssputs_r+0x46>

0002cdc8 <_printf_common>:
   2cdc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2cdcc:	4616      	mov	r6, r2
   2cdce:	4699      	mov	r9, r3
   2cdd0:	688a      	ldr	r2, [r1, #8]
   2cdd2:	690b      	ldr	r3, [r1, #16]
   2cdd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
   2cdd8:	4293      	cmp	r3, r2
   2cdda:	bfb8      	it	lt
   2cddc:	4613      	movlt	r3, r2
   2cdde:	6033      	str	r3, [r6, #0]
   2cde0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
   2cde4:	4607      	mov	r7, r0
   2cde6:	460c      	mov	r4, r1
   2cde8:	b10a      	cbz	r2, 2cdee <_printf_common+0x26>
   2cdea:	3301      	adds	r3, #1
   2cdec:	6033      	str	r3, [r6, #0]
   2cdee:	6823      	ldr	r3, [r4, #0]
   2cdf0:	0699      	lsls	r1, r3, #26
   2cdf2:	bf42      	ittt	mi
   2cdf4:	6833      	ldrmi	r3, [r6, #0]
   2cdf6:	3302      	addmi	r3, #2
   2cdf8:	6033      	strmi	r3, [r6, #0]
   2cdfa:	6825      	ldr	r5, [r4, #0]
   2cdfc:	f015 0506 	ands.w	r5, r5, #6
   2ce00:	d106      	bne.n	2ce10 <_printf_common+0x48>
   2ce02:	f104 0a19 	add.w	sl, r4, #25
   2ce06:	68e3      	ldr	r3, [r4, #12]
   2ce08:	6832      	ldr	r2, [r6, #0]
   2ce0a:	1a9b      	subs	r3, r3, r2
   2ce0c:	42ab      	cmp	r3, r5
   2ce0e:	dc26      	bgt.n	2ce5e <_printf_common+0x96>
   2ce10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
   2ce14:	1e13      	subs	r3, r2, #0
   2ce16:	6822      	ldr	r2, [r4, #0]
   2ce18:	bf18      	it	ne
   2ce1a:	2301      	movne	r3, #1
   2ce1c:	0692      	lsls	r2, r2, #26
   2ce1e:	d42b      	bmi.n	2ce78 <_printf_common+0xb0>
   2ce20:	f104 0243 	add.w	r2, r4, #67	; 0x43
   2ce24:	4649      	mov	r1, r9
   2ce26:	4638      	mov	r0, r7
   2ce28:	47c0      	blx	r8
   2ce2a:	3001      	adds	r0, #1
   2ce2c:	d01e      	beq.n	2ce6c <_printf_common+0xa4>
   2ce2e:	6823      	ldr	r3, [r4, #0]
   2ce30:	68e5      	ldr	r5, [r4, #12]
   2ce32:	6832      	ldr	r2, [r6, #0]
   2ce34:	f003 0306 	and.w	r3, r3, #6
   2ce38:	2b04      	cmp	r3, #4
   2ce3a:	bf08      	it	eq
   2ce3c:	1aad      	subeq	r5, r5, r2
   2ce3e:	68a3      	ldr	r3, [r4, #8]
   2ce40:	6922      	ldr	r2, [r4, #16]
   2ce42:	bf0c      	ite	eq
   2ce44:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
   2ce48:	2500      	movne	r5, #0
   2ce4a:	4293      	cmp	r3, r2
   2ce4c:	bfc4      	itt	gt
   2ce4e:	1a9b      	subgt	r3, r3, r2
   2ce50:	18ed      	addgt	r5, r5, r3
   2ce52:	2600      	movs	r6, #0
   2ce54:	341a      	adds	r4, #26
   2ce56:	42b5      	cmp	r5, r6
   2ce58:	d11a      	bne.n	2ce90 <_printf_common+0xc8>
   2ce5a:	2000      	movs	r0, #0
   2ce5c:	e008      	b.n	2ce70 <_printf_common+0xa8>
   2ce5e:	2301      	movs	r3, #1
   2ce60:	4652      	mov	r2, sl
   2ce62:	4649      	mov	r1, r9
   2ce64:	4638      	mov	r0, r7
   2ce66:	47c0      	blx	r8
   2ce68:	3001      	adds	r0, #1
   2ce6a:	d103      	bne.n	2ce74 <_printf_common+0xac>
   2ce6c:	f04f 30ff 	mov.w	r0, #4294967295
   2ce70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   2ce74:	3501      	adds	r5, #1
   2ce76:	e7c6      	b.n	2ce06 <_printf_common+0x3e>
   2ce78:	18e1      	adds	r1, r4, r3
   2ce7a:	1c5a      	adds	r2, r3, #1
   2ce7c:	2030      	movs	r0, #48	; 0x30
   2ce7e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
   2ce82:	4422      	add	r2, r4
   2ce84:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
   2ce88:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
   2ce8c:	3302      	adds	r3, #2
   2ce8e:	e7c7      	b.n	2ce20 <_printf_common+0x58>
   2ce90:	2301      	movs	r3, #1
   2ce92:	4622      	mov	r2, r4
   2ce94:	4649      	mov	r1, r9
   2ce96:	4638      	mov	r0, r7
   2ce98:	47c0      	blx	r8
   2ce9a:	3001      	adds	r0, #1
   2ce9c:	d0e6      	beq.n	2ce6c <_printf_common+0xa4>
   2ce9e:	3601      	adds	r6, #1
   2cea0:	e7d9      	b.n	2ce56 <_printf_common+0x8e>

0002cea2 <_realloc_r>:
   2cea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2cea4:	4607      	mov	r7, r0
   2cea6:	4614      	mov	r4, r2
   2cea8:	460e      	mov	r6, r1
   2ceaa:	b921      	cbnz	r1, 2ceb6 <_realloc_r+0x14>
   2ceac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   2ceb0:	4611      	mov	r1, r2
   2ceb2:	f7fb b9e5 	b.w	28280 <_malloc_r>
   2ceb6:	b922      	cbnz	r2, 2cec2 <_realloc_r+0x20>
   2ceb8:	f7fb f994 	bl	281e4 <_free_r>
   2cebc:	4625      	mov	r5, r4
   2cebe:	4628      	mov	r0, r5
   2cec0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2cec2:	f000 f814 	bl	2ceee <_malloc_usable_size_r>
   2cec6:	42a0      	cmp	r0, r4
   2cec8:	d20f      	bcs.n	2ceea <_realloc_r+0x48>
   2ceca:	4621      	mov	r1, r4
   2cecc:	4638      	mov	r0, r7
   2cece:	f7fb f9d7 	bl	28280 <_malloc_r>
   2ced2:	4605      	mov	r5, r0
   2ced4:	2800      	cmp	r0, #0
   2ced6:	d0f2      	beq.n	2cebe <_realloc_r+0x1c>
   2ced8:	4631      	mov	r1, r6
   2ceda:	4622      	mov	r2, r4
   2cedc:	f7ff fe8b 	bl	2cbf6 <memcpy>
   2cee0:	4631      	mov	r1, r6
   2cee2:	4638      	mov	r0, r7
   2cee4:	f7fb f97e 	bl	281e4 <_free_r>
   2cee8:	e7e9      	b.n	2cebe <_realloc_r+0x1c>
   2ceea:	4635      	mov	r5, r6
   2ceec:	e7e7      	b.n	2cebe <_realloc_r+0x1c>

0002ceee <_malloc_usable_size_r>:
   2ceee:	f851 3c04 	ldr.w	r3, [r1, #-4]
   2cef2:	1f18      	subs	r0, r3, #4
   2cef4:	2b00      	cmp	r3, #0
   2cef6:	bfbc      	itt	lt
   2cef8:	580b      	ldrlt	r3, [r1, r0]
   2cefa:	18c0      	addlt	r0, r0, r3
   2cefc:	4770      	bx	lr
	...

0002cf00 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
   2cf00:	f7f5 bd86 	b.w	22a10 <SystemInit>
